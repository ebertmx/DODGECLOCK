
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20004d20 	.word	0x20004d20
   4:	00012945 	.word	0x00012945
   8:	0002008d 	.word	0x0002008d
   c:	00012999 	.word	0x00012999
  10:	00012999 	.word	0x00012999
  14:	00012999 	.word	0x00012999
  18:	00012999 	.word	0x00012999
	...
  2c:	000126ad 	.word	0x000126ad
  30:	00012999 	.word	0x00012999
  34:	00000000 	.word	0x00000000
  38:	00012659 	.word	0x00012659
  3c:	0001eeeb 	.word	0x0001eeeb

00000040 <_irq_vector_table>:
  40:	00012905 0002270f 00012905 00012905     .)...'...)...)..
  50:	00012905 00012905 00012905 00012905     .)...)...)...)..
  60:	000226d7 00012905 00012905 000226f5     .&...)...)...&..
  70:	00012905 00012905 00012905 00012905     .)...)...)...)..
  80:	00012905 00012905 00012905 00012905     .)...)...)...)..
  90:	00012905 00012905 00012905 00012905     .)...)...)...)..
  a0:	00012905 00012905 00012905 00012905     .)...)...)...)..
  b0:	00012905 00012905 00012905 00012905     .)...)...)...)..
  c0:	00012905 00012905 00012905 00012905     .)...)...)...)..
  d0:	00012905 00012905 00012905              .)...)...)..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b96c 	b.w	3d0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8082 	bne.w	226 <CONFIG_FLASH_SIZE+0x26>
     122:	428a      	cmp	r2, r1
     124:	4617      	mov	r7, r2
     126:	d946      	bls.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     128:	fab2 f282 	clz	r2, r2
     12c:	b14a      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa05 f302 	lsl.w	r3, r5, r2
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
     13c:	ea41 0e03 	orr.w	lr, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 4817 	mov.w	r8, r7, lsr #16
     146:	0c23      	lsrs	r3, r4, #16
     148:	fbbe fcf8 	udiv	ip, lr, r8
     14c:	b2b9      	uxth	r1, r7
     14e:	fb08 ee1c 	mls	lr, r8, ip, lr
     152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     156:	fb0c f001 	mul.w	r0, ip, r1
     15a:	4298      	cmp	r0, r3
     15c:	d90a      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15e:	18fb      	adds	r3, r7, r3
     160:	f10c 35ff 	add.w	r5, ip, #4294967295
     164:	f080 8116 	bcs.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x53>
     168:	4298      	cmp	r0, r3
     16a:	f240 8113 	bls.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x53>
     16e:	f1ac 0c02 	sub.w	ip, ip, #2
     172:	443b      	add	r3, r7
     174:	1a1b      	subs	r3, r3, r0
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f8 	udiv	r0, r3, r8
     17c:	fb08 3310 	mls	r3, r8, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f101 	mul.w	r1, r0, r1
     188:	42a1      	cmp	r1, r4
     18a:	d909      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     18c:	193c      	adds	r4, r7, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295
     192:	f080 8101 	bcs.w	398 <CONFIG_BT_DEVICE_APPEARANCE+0x57>
     196:	42a1      	cmp	r1, r4
     198:	f240 80fe 	bls.w	398 <CONFIG_BT_DEVICE_APPEARANCE+0x57>
     19c:	3802      	subs	r0, #2
     19e:	443c      	add	r4, r7
     1a0:	1a64      	subs	r4, r4, r1
     1a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a6:	2100      	movs	r1, #0
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c6 4300 	strd	r4, r3, [r6]
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b6:	b902      	cbnz	r2, 1ba <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x70>
     1b8:	deff      	udf	#255	; 0xff
     1ba:	fab2 f282 	clz	r2, r2
     1be:	2a00      	cmp	r2, #0
     1c0:	d14f      	bne.n	262 <CONFIG_FLASH_SIZE+0x62>
     1c2:	1bcb      	subs	r3, r1, r7
     1c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c8:	fa1f f887 	uxth.w	r8, r7
     1cc:	2101      	movs	r1, #1
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c25      	lsrs	r5, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1dc:	fb08 f30c 	mul.w	r3, r8, ip
     1e0:	42ab      	cmp	r3, r5
     1e2:	d907      	bls.n	1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>
     1e4:	197d      	adds	r5, r7, r5
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ea:	d202      	bcs.n	1f2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa8>
     1ec:	42ab      	cmp	r3, r5
     1ee:	f200 80e7 	bhi.w	3c0 <CONFIG_BT_DEVICE_APPEARANCE+0x7f>
     1f2:	4684      	mov	ip, r0
     1f4:	1aed      	subs	r5, r5, r3
     1f6:	b2a3      	uxth	r3, r4
     1f8:	fbb5 f0fe 	udiv	r0, r5, lr
     1fc:	fb0e 5510 	mls	r5, lr, r0, r5
     200:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     204:	fb08 f800 	mul.w	r8, r8, r0
     208:	45a0      	cmp	r8, r4
     20a:	d907      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     20c:	193c      	adds	r4, r7, r4
     20e:	f100 33ff 	add.w	r3, r0, #4294967295
     212:	d202      	bcs.n	21a <CONFIG_FLASH_SIZE+0x1a>
     214:	45a0      	cmp	r8, r4
     216:	f200 80d7 	bhi.w	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x87>
     21a:	4618      	mov	r0, r3
     21c:	eba4 0408 	sub.w	r4, r4, r8
     220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     224:	e7c0      	b.n	1a8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5e>
     226:	428b      	cmp	r3, r1
     228:	d908      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22a:	2e00      	cmp	r6, #0
     22c:	f000 80af 	beq.w	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     230:	2100      	movs	r1, #0
     232:	e9c6 0500 	strd	r0, r5, [r6]
     236:	4608      	mov	r0, r1
     238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23c:	fab3 f183 	clz	r1, r3
     240:	2900      	cmp	r1, #0
     242:	d14b      	bne.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     244:	42ab      	cmp	r3, r5
     246:	d302      	bcc.n	24e <CONFIG_FLASH_SIZE+0x4e>
     248:	4282      	cmp	r2, r0
     24a:	f200 80b7 	bhi.w	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     24e:	1a84      	subs	r4, r0, r2
     250:	eb65 0303 	sbc.w	r3, r5, r3
     254:	2001      	movs	r0, #1
     256:	469e      	mov	lr, r3
     258:	2e00      	cmp	r6, #0
     25a:	d0aa      	beq.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     25c:	e9c6 4e00 	strd	r4, lr, [r6]
     260:	e7a7      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     262:	f1c2 0c20 	rsb	ip, r2, #32
     266:	fa01 f302 	lsl.w	r3, r1, r2
     26a:	4097      	lsls	r7, r2
     26c:	fa20 f00c 	lsr.w	r0, r0, ip
     270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     274:	fa21 fc0c 	lsr.w	ip, r1, ip
     278:	4318      	orrs	r0, r3
     27a:	fbbc f1fe 	udiv	r1, ip, lr
     27e:	0c05      	lsrs	r5, r0, #16
     280:	fb0e cc11 	mls	ip, lr, r1, ip
     284:	fa1f f887 	uxth.w	r8, r7
     288:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     28c:	fb01 f308 	mul.w	r3, r1, r8
     290:	42ab      	cmp	r3, r5
     292:	fa04 f402 	lsl.w	r4, r4, r2
     296:	d909      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     298:	197d      	adds	r5, r7, r5
     29a:	f101 3cff 	add.w	ip, r1, #4294967295
     29e:	f080 808b 	bcs.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f240 8088 	bls.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     2a8:	3902      	subs	r1, #2
     2aa:	443d      	add	r5, r7
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	b285      	uxth	r5, r0
     2b0:	fbb3 f0fe 	udiv	r0, r3, lr
     2b4:	fb0e 3310 	mls	r3, lr, r0, r3
     2b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2bc:	fb00 f308 	mul.w	r3, r0, r8
     2c0:	42ab      	cmp	r3, r5
     2c2:	d907      	bls.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     2c4:	197d      	adds	r5, r7, r5
     2c6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ca:	d271      	bcs.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     2cc:	42ab      	cmp	r3, r5
     2ce:	d96f      	bls.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     2d0:	3802      	subs	r0, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2da:	e778      	b.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     2dc:	f1c1 0c20 	rsb	ip, r1, #32
     2e0:	408b      	lsls	r3, r1
     2e2:	fa22 f70c 	lsr.w	r7, r2, ip
     2e6:	431f      	orrs	r7, r3
     2e8:	fa20 f40c 	lsr.w	r4, r0, ip
     2ec:	fa05 f301 	lsl.w	r3, r5, r1
     2f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f4:	fa25 f50c 	lsr.w	r5, r5, ip
     2f8:	431c      	orrs	r4, r3
     2fa:	0c23      	lsrs	r3, r4, #16
     2fc:	fbb5 f9fe 	udiv	r9, r5, lr
     300:	fa1f f887 	uxth.w	r8, r7
     304:	fb0e 5519 	mls	r5, lr, r9, r5
     308:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     30c:	fb09 fa08 	mul.w	sl, r9, r8
     310:	45aa      	cmp	sl, r5
     312:	fa02 f201 	lsl.w	r2, r2, r1
     316:	fa00 f301 	lsl.w	r3, r0, r1
     31a:	d908      	bls.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     31c:	197d      	adds	r5, r7, r5
     31e:	f109 30ff 	add.w	r0, r9, #4294967295
     322:	d247      	bcs.n	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     324:	45aa      	cmp	sl, r5
     326:	d945      	bls.n	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     328:	f1a9 0902 	sub.w	r9, r9, #2
     32c:	443d      	add	r5, r7
     32e:	eba5 050a 	sub.w	r5, r5, sl
     332:	b2a4      	uxth	r4, r4
     334:	fbb5 f0fe 	udiv	r0, r5, lr
     338:	fb0e 5510 	mls	r5, lr, r0, r5
     33c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45a0      	cmp	r8, r4
     346:	d907      	bls.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     348:	193c      	adds	r4, r7, r4
     34a:	f100 35ff 	add.w	r5, r0, #4294967295
     34e:	d22d      	bcs.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     350:	45a0      	cmp	r8, r4
     352:	d92b      	bls.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454c      	cmp	r4, r9
     366:	46c6      	mov	lr, r8
     368:	464d      	mov	r5, r9
     36a:	d319      	bcc.n	3a0 <CONFIG_BT_DEVICE_APPEARANCE+0x5f>
     36c:	d016      	beq.n	39c <CONFIG_BT_DEVICE_APPEARANCE+0x5b>
     36e:	b15e      	cbz	r6, 388 <CONFIG_BT_DEVICE_APPEARANCE+0x47>
     370:	ebb3 020e 	subs.w	r2, r3, lr
     374:	eb64 0405 	sbc.w	r4, r4, r5
     378:	fa04 fc0c 	lsl.w	ip, r4, ip
     37c:	40ca      	lsrs	r2, r1
     37e:	ea4c 0202 	orr.w	r2, ip, r2
     382:	40cc      	lsrs	r4, r1
     384:	e9c6 2400 	strd	r2, r4, [r6]
     388:	2100      	movs	r1, #0
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	4631      	mov	r1, r6
     390:	4630      	mov	r0, r6
     392:	e70e      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     394:	46ac      	mov	ip, r5
     396:	e6ed      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     398:	4618      	mov	r0, r3
     39a:	e701      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     39c:	4543      	cmp	r3, r8
     39e:	d2e6      	bcs.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3a0:	ebb8 0e02 	subs.w	lr, r8, r2
     3a4:	eb69 0507 	sbc.w	r5, r9, r7
     3a8:	3801      	subs	r0, #1
     3aa:	e7e0      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3ac:	4628      	mov	r0, r5
     3ae:	e7d3      	b.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     3b0:	4660      	mov	r0, ip
     3b2:	e78f      	b.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     3b4:	4681      	mov	r9, r0
     3b6:	e7ba      	b.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     3b8:	4661      	mov	r1, ip
     3ba:	e777      	b.n	2ac <CONFIG_FLASH_SIZE+0xac>
     3bc:	4608      	mov	r0, r1
     3be:	e74b      	b.n	258 <CONFIG_FLASH_SIZE+0x58>
     3c0:	f1ac 0c02 	sub.w	ip, ip, #2
     3c4:	443d      	add	r5, r7
     3c6:	e715      	b.n	1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>
     3c8:	3802      	subs	r0, #2
     3ca:	443c      	add	r4, r7
     3cc:	e726      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop
     3d4:	2800      	cmp	r0, #0
     3d6:	d019      	beq.n	40c <CONFIG_LOG_BUFFER_SIZE+0xc>
     3d8:	7803      	ldrb	r3, [r0, #0]
     3da:	4913      	ldr	r1, [pc, #76]	; (428 <CONFIG_LOG_BUFFER_SIZE+0x28>)
     3dc:	4a13      	ldr	r2, [pc, #76]	; (42c <CONFIG_LOG_BUFFER_SIZE+0x2c>)
     3de:	b113      	cbz	r3, 3e6 <__aeabi_idiv0+0x16>
     3e0:	2b01      	cmp	r3, #1
     3e2:	d00e      	beq.n	402 <CONFIG_LOG_BUFFER_SIZE+0x2>
     3e4:	e011      	b.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     3e6:	7903      	ldrb	r3, [r0, #4]
     3e8:	2b01      	cmp	r3, #1
     3ea:	d000      	beq.n	3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     3ec:	b96b      	cbnz	r3, 40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     3ee:	7943      	ldrb	r3, [r0, #5]
     3f0:	b10b      	cbz	r3, 3f6 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xe>
     3f2:	2b01      	cmp	r3, #1
     3f4:	d109      	bne.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     3f6:	6883      	ldr	r3, [r0, #8]
     3f8:	3b64      	subs	r3, #100	; 0x64
     3fa:	428b      	cmp	r3, r1
     3fc:	d205      	bcs.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     3fe:	68c0      	ldr	r0, [r0, #12]
     400:	e00e      	b.n	420 <CONFIG_LOG_BUFFER_SIZE+0x20>
     402:	7903      	ldrb	r3, [r0, #4]
     404:	2b01      	cmp	r3, #1
     406:	d002      	beq.n	40e <CONFIG_LOG_BUFFER_SIZE+0xe>
     408:	b10b      	cbz	r3, 40e <CONFIG_LOG_BUFFER_SIZE+0xe>
     40a:	2000      	movs	r0, #0
     40c:	4770      	bx	lr
     40e:	7943      	ldrb	r3, [r0, #5]
     410:	b10b      	cbz	r3, 416 <CONFIG_LOG_BUFFER_SIZE+0x16>
     412:	2b01      	cmp	r3, #1
     414:	d1f9      	bne.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     416:	68c3      	ldr	r3, [r0, #12]
     418:	3b64      	subs	r3, #100	; 0x64
     41a:	428b      	cmp	r3, r1
     41c:	d2f5      	bcs.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     41e:	6880      	ldr	r0, [r0, #8]
     420:	4290      	cmp	r0, r2
     422:	d8f2      	bhi.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     424:	2001      	movs	r0, #1
     426:	4770      	bx	lr
     428:	0001863d 	.word	0x0001863d
     42c:	07a11fff 	.word	0x07a11fff
     430:	b510      	push	{r4, lr}
     432:	4c05      	ldr	r4, [pc, #20]	; (448 <CONFIG_LOG_BUFFER_SIZE+0x48>)
     434:	6820      	ldr	r0, [r4, #0]
     436:	b110      	cbz	r0, 43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     438:	4780      	blx	r0
     43a:	2000      	movs	r0, #0
     43c:	6020      	str	r0, [r4, #0]
     43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     442:	f002 b819 	b.w	2478 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     446:	0000      	.short	0x0000
     448:	20000000 	.word	0x20000000

0000044c <mpsl_timeslot_session_open>:
     44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     450:	460e      	mov	r6, r1
     452:	0005      	movs	r5, r0
     454:	d004      	beq.n	460 <mpsl_timeslot_session_open+0x14>
     456:	f000 f841 	bl	4dc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     45a:	4607      	mov	r7, r0
     45c:	2400      	movs	r4, #0
     45e:	e00a      	b.n	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     460:	f06f 0015 	mvn.w	r0, #21
     464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     468:	4620      	mov	r0, r4
     46a:	f000 f83d 	bl	4e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     46e:	7880      	ldrb	r0, [r0, #2]
     470:	b138      	cbz	r0, 482 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     472:	1c64      	adds	r4, r4, #1
     474:	b2e4      	uxtb	r4, r4
     476:	42bc      	cmp	r4, r7
     478:	d3f6      	bcc.n	468 <mpsl_timeslot_session_open+0x1c>
     47a:	bf00      	nop
     47c:	f06f 000b 	mvn.w	r0, #11
     480:	e7f0      	b.n	464 <mpsl_timeslot_session_open+0x18>
     482:	4627      	mov	r7, r4
     484:	2cff      	cmp	r4, #255	; 0xff
     486:	d0f9      	beq.n	47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     488:	4620      	mov	r0, r4
     48a:	f000 f82d 	bl	4e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     48e:	4604      	mov	r4, r0
     490:	f00b fc5d 	bl	bd4e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
     494:	4807      	ldr	r0, [pc, #28]	; (4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>)
     496:	f001 ffcb 	bl	2430 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     49a:	70e0      	strb	r0, [r4, #3]
     49c:	2820      	cmp	r0, #32
     49e:	d005      	beq.n	4ac <CONFIG_BT_HCI_ECC_STACK_SIZE+0x38>
     4a0:	2001      	movs	r0, #1
     4a2:	6065      	str	r5, [r4, #4]
     4a4:	70a0      	strb	r0, [r4, #2]
     4a6:	7037      	strb	r7, [r6, #0]
     4a8:	2000      	movs	r0, #0
     4aa:	e7db      	b.n	464 <mpsl_timeslot_session_open+0x18>
     4ac:	f06f 0022 	mvn.w	r0, #34	; 0x22
     4b0:	e7d8      	b.n	464 <mpsl_timeslot_session_open+0x18>
     4b2:	0000      	.short	0x0000
     4b4:	0000ba95 	.word	0x0000ba95

000004b8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     4b8:	b510      	push	{r4, lr}
     4ba:	0782      	lsls	r2, r0, #30
     4bc:	d002      	beq.n	4c4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     4be:	f06f 000d 	mvn.w	r0, #13
     4c2:	bd10      	pop	{r4, pc}
     4c4:	4a04      	ldr	r2, [pc, #16]	; (4d8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>)
     4c6:	7011      	strb	r1, [r2, #0]
     4c8:	6050      	str	r0, [r2, #4]
     4ca:	b118      	cbz	r0, 4d4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x1c>
     4cc:	014a      	lsls	r2, r1, #5
     4ce:	2100      	movs	r1, #0
     4d0:	f00b fec3 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     4d4:	2000      	movs	r0, #0
     4d6:	bd10      	pop	{r4, pc}
     4d8:	20000004 	.word	0x20000004

000004dc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     4dc:	4801      	ldr	r0, [pc, #4]	; (4e4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     4de:	7800      	ldrb	r0, [r0, #0]
     4e0:	4770      	bx	lr
     4e2:	0000      	.short	0x0000
     4e4:	20000004 	.word	0x20000004

000004e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     4e8:	4904      	ldr	r1, [pc, #16]	; (4fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
     4ea:	780a      	ldrb	r2, [r1, #0]
     4ec:	4290      	cmp	r0, r2
     4ee:	d301      	bcc.n	4f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     4f0:	2000      	movs	r0, #0
     4f2:	4770      	bx	lr
     4f4:	6849      	ldr	r1, [r1, #4]
     4f6:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     4fa:	4770      	bx	lr
     4fc:	20000004 	.word	0x20000004

00000500 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY>:
     500:	4909      	ldr	r1, [pc, #36]	; (528 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x28>)
     502:	b510      	push	{r4, lr}
     504:	4603      	mov	r3, r0
     506:	684a      	ldr	r2, [r1, #4]
     508:	2000      	movs	r0, #0
     50a:	7809      	ldrb	r1, [r1, #0]
     50c:	e007      	b.n	51e <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x1e>
     50e:	bf00      	nop
     510:	eb02 1440 	add.w	r4, r2, r0, lsl #5
     514:	78e4      	ldrb	r4, [r4, #3]
     516:	429c      	cmp	r4, r3
     518:	d004      	beq.n	524 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x24>
     51a:	1c40      	adds	r0, r0, #1
     51c:	b2c0      	uxtb	r0, r0
     51e:	4288      	cmp	r0, r1
     520:	d3f6      	bcc.n	510 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x10>
     522:	20ff      	movs	r0, #255	; 0xff
     524:	bd10      	pop	{r4, pc}
     526:	0000      	.short	0x0000
     528:	20000004 	.word	0x20000004
     52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     530:	4615      	mov	r5, r2
     532:	4604      	mov	r4, r0
     534:	f100 0208 	add.w	r2, r0, #8
     538:	1cc8      	adds	r0, r1, #3
     53a:	4241      	negs	r1, r0
     53c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 5dc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xdc>
     540:	461f      	mov	r7, r3
     542:	1a28      	subs	r0, r5, r0
     544:	2300      	movs	r3, #0
     546:	9e08      	ldr	r6, [sp, #32]
     548:	ebbc 0c05 	subs.w	ip, ip, r5
     54c:	419b      	sbcs	r3, r3
     54e:	d204      	bcs.n	55a <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x5a>
     550:	f240 51f1 	movw	r1, #1521	; 0x5f1
     554:	2070      	movs	r0, #112	; 0x70
     556:	f003 f983 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     55a:	4b21      	ldr	r3, [pc, #132]	; (5e0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe0>)
     55c:	4299      	cmp	r1, r3
     55e:	dd04      	ble.n	56a <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x6a>
     560:	f240 51f2 	movw	r1, #1522	; 0x5f2
     564:	2070      	movs	r0, #112	; 0x70
     566:	f003 f97b 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     56a:	4b1e      	ldr	r3, [pc, #120]	; (5e4 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe4>)
     56c:	4299      	cmp	r1, r3
     56e:	da04      	bge.n	57a <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x7a>
     570:	f240 51f3 	movw	r1, #1523	; 0x5f3
     574:	2070      	movs	r0, #112	; 0x70
     576:	f003 f973 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     57a:	491b      	ldr	r1, [pc, #108]	; (5e8 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe8>)
     57c:	4288      	cmp	r0, r1
     57e:	bfa8      	it	ge
     580:	491a      	ldrge	r1, [pc, #104]	; (5ec <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xec>)
     582:	da03      	bge.n	58c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x8c>
     584:	2800      	cmp	r0, #0
     586:	bfb8      	it	lt
     588:	4917      	ldrlt	r1, [pc, #92]	; (5e8 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe8>)
     58a:	da00      	bge.n	58e <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x8e>
     58c:	1840      	adds	r0, r0, r1
     58e:	4621      	mov	r1, r4
     590:	f002 fdce 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     594:	6820      	ldr	r0, [r4, #0]
     596:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     59a:	19e8      	adds	r0, r5, r7
     59c:	1cc0      	adds	r0, r0, #3
     59e:	6021      	str	r1, [r4, #0]
     5a0:	2e00      	cmp	r6, #0
     5a2:	bf08      	it	eq
     5a4:	307a      	addeq	r0, #122	; 0x7a
     5a6:	d008      	beq.n	5ba <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xba>
     5a8:	2e01      	cmp	r6, #1
     5aa:	bf08      	it	eq
     5ac:	3045      	addeq	r0, #69	; 0x45
     5ae:	d004      	beq.n	5ba <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xba>
     5b0:	f240 6199 	movw	r1, #1689	; 0x699
     5b4:	2070      	movs	r0, #112	; 0x70
     5b6:	f003 f953 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5ba:	466a      	mov	r2, sp
     5bc:	1d21      	adds	r1, r4, #4
     5be:	f002 fdb7 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     5c2:	f99d 0000 	ldrsb.w	r0, [sp]
     5c6:	2800      	cmp	r0, #0
     5c8:	6860      	ldr	r0, [r4, #4]
     5ca:	bfc4      	itt	gt
     5cc:	1c40      	addgt	r0, r0, #1
     5ce:	6060      	strgt	r0, [r4, #4]
     5d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5d4:	6060      	str	r0, [r4, #4]
     5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     5da:	0000      	.short	0x0000
     5dc:	1e847fff 	.word	0x1e847fff
     5e0:	07a12000 	.word	0x07a12000
     5e4:	f85ee000 	.word	0xf85ee000
     5e8:	1e848000 	.word	0x1e848000
     5ec:	e17b8000 	.word	0xe17b8000
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	4605      	mov	r5, r0
     5f4:	2a20      	cmp	r2, #32
     5f6:	d027      	beq.n	648 <CONFIG_BT_HCI_TX_STACK_SIZE+0x48>
     5f8:	4819      	ldr	r0, [pc, #100]	; (660 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>)
     5fa:	4c1a      	ldr	r4, [pc, #104]	; (664 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>)
     5fc:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     600:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     604:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     608:	2920      	cmp	r1, #32
     60a:	d022      	beq.n	652 <CONFIG_BT_HCI_TX_STACK_SIZE+0x52>
     60c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     610:	7840      	ldrb	r0, [r0, #1]
     612:	784c      	ldrb	r4, [r1, #1]
     614:	7048      	strb	r0, [r1, #1]
     616:	4620      	mov	r0, r4
     618:	4601      	mov	r1, r0
     61a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     61e:	4291      	cmp	r1, r2
     620:	7005      	strb	r5, [r0, #0]
     622:	7840      	ldrb	r0, [r0, #1]
     624:	d1f8      	bne.n	618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     626:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     62a:	2a20      	cmp	r2, #32
     62c:	bf1a      	itte	ne
     62e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     632:	7054      	strbne	r4, [r2, #1]
     634:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     638:	2220      	movs	r2, #32
     63a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     63e:	f88c 2001 	strb.w	r2, [ip, #1]
     642:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     646:	bd70      	pop	{r4, r5, r6, pc}
     648:	f44f 7123 	mov.w	r1, #652	; 0x28c
     64c:	2070      	movs	r0, #112	; 0x70
     64e:	f003 f907 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     652:	f893 4020 	ldrb.w	r4, [r3, #32]
     656:	7840      	ldrb	r0, [r0, #1]
     658:	f883 0020 	strb.w	r0, [r3, #32]
     65c:	e7db      	b.n	616 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     65e:	0000      	.short	0x0000
     660:	20000cc4 	.word	0x20000cc4
     664:	20000d44 	.word	0x20000d44
     668:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     66c:	b087      	sub	sp, #28
     66e:	4604      	mov	r4, r0
     670:	2000      	movs	r0, #0
     672:	9002      	str	r0, [sp, #8]
     674:	489e      	ldr	r0, [pc, #632]	; (8f0 <CONFIG_BT_RX_STACK_SIZE+0x58>)
     676:	9f08      	ldr	r7, [sp, #32]
     678:	4e9e      	ldr	r6, [pc, #632]	; (8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>)
     67a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     67e:	9003      	str	r0, [sp, #12]
     680:	f890 5020 	ldrb.w	r5, [r0, #32]
     684:	2020      	movs	r0, #32
     686:	46e9      	mov	r9, sp
     688:	f10d 0804 	add.w	r8, sp, #4
     68c:	f88d 0000 	strb.w	r0, [sp]
     690:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     694:	2d20      	cmp	r5, #32
     696:	bf18      	it	ne
     698:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     69c:	d032      	beq.n	704 <CONFIG_BT_HCI_TX_STACK_SIZE+0x104>
     69e:	bf00      	nop
     6a0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     6a4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     6a8:	1d01      	adds	r1, r0, #4
     6aa:	6880      	ldr	r0, [r0, #8]
     6ac:	6822      	ldr	r2, [r4, #0]
     6ae:	1a10      	subs	r0, r2, r0
     6b0:	0200      	lsls	r0, r0, #8
     6b2:	17c2      	asrs	r2, r0, #31
     6b4:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6b8:	1200      	asrs	r0, r0, #8
     6ba:	d423      	bmi.n	704 <CONFIG_BT_HCI_TX_STACK_SIZE+0x104>
     6bc:	8960      	ldrh	r0, [r4, #10]
     6be:	b1d0      	cbz	r0, 6f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf6>
     6c0:	8948      	ldrh	r0, [r1, #10]
     6c2:	b9c0      	cbnz	r0, 6f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf6>
     6c4:	4608      	mov	r0, r1
     6c6:	f000 fcdb 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     6ca:	aa05      	add	r2, sp, #20
     6cc:	a904      	add	r1, sp, #16
     6ce:	f002 fd2f 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     6d2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     6d6:	2800      	cmp	r0, #0
     6d8:	bfcc      	ite	gt
     6da:	2001      	movgt	r0, #1
     6dc:	2000      	movle	r0, #0
     6de:	f100 0133 	add.w	r1, r0, #51	; 0x33
     6e2:	9804      	ldr	r0, [sp, #16]
     6e4:	6822      	ldr	r2, [r4, #0]
     6e6:	1a10      	subs	r0, r2, r0
     6e8:	0200      	lsls	r0, r0, #8
     6ea:	17c2      	asrs	r2, r0, #31
     6ec:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6f0:	1200      	asrs	r0, r0, #8
     6f2:	4288      	cmp	r0, r1
     6f4:	db06      	blt.n	704 <CONFIG_BT_HCI_TX_STACK_SIZE+0x104>
     6f6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6fa:	f889 5000 	strb.w	r5, [r9]
     6fe:	7845      	ldrb	r5, [r0, #1]
     700:	2d20      	cmp	r5, #32
     702:	d1cd      	bne.n	6a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     704:	f899 0000 	ldrb.w	r0, [r9]
     708:	f888 0000 	strb.w	r0, [r8]
     70c:	46a1      	mov	r9, r4
     70e:	2d20      	cmp	r5, #32
     710:	bf1c      	itt	ne
     712:	4879      	ldrne	r0, [pc, #484]	; (8f8 <CONFIG_BT_RX_STACK_SIZE+0x60>)
     714:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     718:	f000 80e5 	beq.w	8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     71c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     720:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     724:	f8d9 2004 	ldr.w	r2, [r9, #4]
     728:	f8da 1004 	ldr.w	r1, [sl, #4]
     72c:	4648      	mov	r0, r9
     72e:	1a89      	subs	r1, r1, r2
     730:	0209      	lsls	r1, r1, #8
     732:	17ca      	asrs	r2, r1, #31
     734:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     738:	f10a 0704 	add.w	r7, sl, #4
     73c:	1209      	asrs	r1, r1, #8
     73e:	d41f      	bmi.n	780 <CONFIG_BT_HCI_TX_STACK_SIZE+0x180>
     740:	8979      	ldrh	r1, [r7, #10]
     742:	2900      	cmp	r1, #0
     744:	f000 80cf 	beq.w	8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     748:	8941      	ldrh	r1, [r0, #10]
     74a:	2900      	cmp	r1, #0
     74c:	f040 80cb 	bne.w	8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     750:	f000 fc96 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     754:	aa05      	add	r2, sp, #20
     756:	a904      	add	r1, sp, #16
     758:	f002 fcea 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     75c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     760:	2800      	cmp	r0, #0
     762:	bfcc      	ite	gt
     764:	2001      	movgt	r0, #1
     766:	2000      	movle	r0, #0
     768:	f100 0133 	add.w	r1, r0, #51	; 0x33
     76c:	9804      	ldr	r0, [sp, #16]
     76e:	683a      	ldr	r2, [r7, #0]
     770:	1a10      	subs	r0, r2, r0
     772:	0200      	lsls	r0, r0, #8
     774:	17c2      	asrs	r2, r0, #31
     776:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     77a:	1200      	asrs	r0, r0, #8
     77c:	4288      	cmp	r0, r1
     77e:	da7d      	bge.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     780:	f888 5000 	strb.w	r5, [r8]
     784:	f89a 0010 	ldrb.w	r0, [sl, #16]
     788:	f899 100c 	ldrb.w	r1, [r9, #12]
     78c:	4288      	cmp	r0, r1
     78e:	d905      	bls.n	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     790:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     794:	7845      	ldrb	r5, [r0, #1]
     796:	2d20      	cmp	r5, #32
     798:	d1c0      	bne.n	71c <CONFIG_BT_HCI_TX_STACK_SIZE+0x11c>
     79a:	e0a4      	b.n	8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     79c:	f89d 0004 	ldrb.w	r0, [sp, #4]
     7a0:	e9d4 2100 	ldrd	r2, r1, [r4]
     7a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     7a8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     7ac:	1a89      	subs	r1, r1, r2
     7ae:	6880      	ldr	r0, [r0, #8]
     7b0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     7b4:	4408      	add	r0, r1
     7b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7ba:	e9c4 2000 	strd	r2, r0, [r4]
     7be:	2001      	movs	r0, #1
     7c0:	9002      	str	r0, [sp, #8]
     7c2:	484b      	ldr	r0, [pc, #300]	; (8f0 <CONFIG_BT_RX_STACK_SIZE+0x58>)
     7c4:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     7c8:	b118      	cbz	r0, 7d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d2>
     7ca:	b009      	add	sp, #36	; 0x24
     7cc:	2000      	movs	r0, #0
     7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7d2:	9803      	ldr	r0, [sp, #12]
     7d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
     7d8:	466f      	mov	r7, sp
     7da:	f890 5020 	ldrb.w	r5, [r0, #32]
     7de:	2020      	movs	r0, #32
     7e0:	f10d 0a04 	add.w	sl, sp, #4
     7e4:	f88d 0000 	strb.w	r0, [sp]
     7e8:	2d20      	cmp	r5, #32
     7ea:	bf1c      	itt	ne
     7ec:	4842      	ldrne	r0, [pc, #264]	; (8f8 <CONFIG_BT_RX_STACK_SIZE+0x60>)
     7ee:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     7f2:	d030      	beq.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
     7f4:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     7f8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     7fc:	1d01      	adds	r1, r0, #4
     7fe:	6880      	ldr	r0, [r0, #8]
     800:	6822      	ldr	r2, [r4, #0]
     802:	1a10      	subs	r0, r2, r0
     804:	0200      	lsls	r0, r0, #8
     806:	17c2      	asrs	r2, r0, #31
     808:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     80c:	1200      	asrs	r0, r0, #8
     80e:	d422      	bmi.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
     810:	8960      	ldrh	r0, [r4, #10]
     812:	b1d0      	cbz	r0, 84a <CONFIG_ISR_STACK_SIZE+0x4a>
     814:	8948      	ldrh	r0, [r1, #10]
     816:	b9c0      	cbnz	r0, 84a <CONFIG_ISR_STACK_SIZE+0x4a>
     818:	4608      	mov	r0, r1
     81a:	f000 fc31 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     81e:	aa05      	add	r2, sp, #20
     820:	a904      	add	r1, sp, #16
     822:	f002 fc85 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     826:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     82a:	2800      	cmp	r0, #0
     82c:	bfcc      	ite	gt
     82e:	2001      	movgt	r0, #1
     830:	2000      	movle	r0, #0
     832:	f100 0133 	add.w	r1, r0, #51	; 0x33
     836:	9804      	ldr	r0, [sp, #16]
     838:	6822      	ldr	r2, [r4, #0]
     83a:	1a10      	subs	r0, r2, r0
     83c:	0200      	lsls	r0, r0, #8
     83e:	17c2      	asrs	r2, r0, #31
     840:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     844:	1200      	asrs	r0, r0, #8
     846:	4288      	cmp	r0, r1
     848:	db05      	blt.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
     84a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     84e:	703d      	strb	r5, [r7, #0]
     850:	7845      	ldrb	r5, [r0, #1]
     852:	2d20      	cmp	r5, #32
     854:	d1ce      	bne.n	7f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f4>
     856:	7838      	ldrb	r0, [r7, #0]
     858:	f88a 0000 	strb.w	r0, [sl]
     85c:	4627      	mov	r7, r4
     85e:	2d20      	cmp	r5, #32
     860:	bf1c      	itt	ne
     862:	4825      	ldrne	r0, [pc, #148]	; (8f8 <CONFIG_BT_RX_STACK_SIZE+0x60>)
     864:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     868:	d03d      	beq.n	8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     86a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     86e:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     872:	4638      	mov	r0, r7
     874:	f109 0804 	add.w	r8, r9, #4
     878:	687a      	ldr	r2, [r7, #4]
     87a:	e000      	b.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     87c:	e033      	b.n	8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     87e:	f8d9 1004 	ldr.w	r1, [r9, #4]
     882:	1a89      	subs	r1, r1, r2
     884:	0209      	lsls	r1, r1, #8
     886:	17ca      	asrs	r2, r1, #31
     888:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     88c:	1209      	asrs	r1, r1, #8
     88e:	d41d      	bmi.n	8cc <CONFIG_BT_RX_STACK_SIZE+0x34>
     890:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     894:	b339      	cbz	r1, 8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     896:	8941      	ldrh	r1, [r0, #10]
     898:	bb29      	cbnz	r1, 8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     89a:	f000 fbf1 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     89e:	aa05      	add	r2, sp, #20
     8a0:	a904      	add	r1, sp, #16
     8a2:	f002 fc45 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     8a6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     8aa:	2800      	cmp	r0, #0
     8ac:	bfcc      	ite	gt
     8ae:	2001      	movgt	r0, #1
     8b0:	2000      	movle	r0, #0
     8b2:	f100 0133 	add.w	r1, r0, #51	; 0x33
     8b6:	9804      	ldr	r0, [sp, #16]
     8b8:	f8d8 2000 	ldr.w	r2, [r8]
     8bc:	1a10      	subs	r0, r2, r0
     8be:	0200      	lsls	r0, r0, #8
     8c0:	17c2      	asrs	r2, r0, #31
     8c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     8c6:	1200      	asrs	r0, r0, #8
     8c8:	4288      	cmp	r0, r1
     8ca:	da0c      	bge.n	8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
     8cc:	f88a 5000 	strb.w	r5, [sl]
     8d0:	f899 1010 	ldrb.w	r1, [r9, #16]
     8d4:	7b38      	ldrb	r0, [r7, #12]
     8d6:	4281      	cmp	r1, r0
     8d8:	f67f af60 	bls.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     8dc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     8e0:	7845      	ldrb	r5, [r0, #1]
     8e2:	2d20      	cmp	r5, #32
     8e4:	d1c1      	bne.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
     8e6:	9802      	ldr	r0, [sp, #8]
     8e8:	b009      	add	sp, #36	; 0x24
     8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ee:	0000      	.short	0x0000
     8f0:	20000d44 	.word	0x20000d44
     8f4:	20000a44 	.word	0x20000a44
     8f8:	20000cc4 	.word	0x20000cc4
     8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     900:	4604      	mov	r4, r0
     902:	4847      	ldr	r0, [pc, #284]	; (a20 <CONFIG_BT_RX_STACK_SIZE+0x188>)
     904:	460e      	mov	r6, r1
     906:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     90a:	4f46      	ldr	r7, [pc, #280]	; (a24 <CONFIG_BT_RX_STACK_SIZE+0x18c>)
     90c:	f890 5020 	ldrb.w	r5, [r0, #32]
     910:	2020      	movs	r0, #32
     912:	b083      	sub	sp, #12
     914:	4698      	mov	r8, r3
     916:	4692      	mov	sl, r2
     918:	7010      	strb	r0, [r2, #0]
     91a:	f507 7920 	add.w	r9, r7, #640	; 0x280
     91e:	2d20      	cmp	r5, #32
     920:	bf18      	it	ne
     922:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     926:	d031      	beq.n	98c <CONFIG_BT_RX_STACK_SIZE+0xf4>
     928:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     92c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     930:	1d01      	adds	r1, r0, #4
     932:	6880      	ldr	r0, [r0, #8]
     934:	6822      	ldr	r2, [r4, #0]
     936:	1a10      	subs	r0, r2, r0
     938:	0200      	lsls	r0, r0, #8
     93a:	17c2      	asrs	r2, r0, #31
     93c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     940:	1200      	asrs	r0, r0, #8
     942:	d423      	bmi.n	98c <CONFIG_BT_RX_STACK_SIZE+0xf4>
     944:	8960      	ldrh	r0, [r4, #10]
     946:	b1d0      	cbz	r0, 97e <CONFIG_BT_RX_STACK_SIZE+0xe6>
     948:	8948      	ldrh	r0, [r1, #10]
     94a:	b9c0      	cbnz	r0, 97e <CONFIG_BT_RX_STACK_SIZE+0xe6>
     94c:	4608      	mov	r0, r1
     94e:	f000 fb97 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     952:	aa01      	add	r2, sp, #4
     954:	4669      	mov	r1, sp
     956:	f002 fbeb 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     95a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     95e:	2800      	cmp	r0, #0
     960:	bfcc      	ite	gt
     962:	2001      	movgt	r0, #1
     964:	2000      	movle	r0, #0
     966:	f100 0133 	add.w	r1, r0, #51	; 0x33
     96a:	9800      	ldr	r0, [sp, #0]
     96c:	6822      	ldr	r2, [r4, #0]
     96e:	1a10      	subs	r0, r2, r0
     970:	0200      	lsls	r0, r0, #8
     972:	17c2      	asrs	r2, r0, #31
     974:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     978:	1200      	asrs	r0, r0, #8
     97a:	4288      	cmp	r0, r1
     97c:	db06      	blt.n	98c <CONFIG_BT_RX_STACK_SIZE+0xf4>
     97e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     982:	f88a 5000 	strb.w	r5, [sl]
     986:	7845      	ldrb	r5, [r0, #1]
     988:	2d20      	cmp	r5, #32
     98a:	d1cd      	bne.n	928 <CONFIG_BT_RX_STACK_SIZE+0x90>
     98c:	f89a 0000 	ldrb.w	r0, [sl]
     990:	f888 0000 	strb.w	r0, [r8]
     994:	2d20      	cmp	r5, #32
     996:	bf18      	it	ne
     998:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     99c:	d03c      	beq.n	a18 <CONFIG_BT_RX_STACK_SIZE+0x180>
     99e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     9a2:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     9a6:	6861      	ldr	r1, [r4, #4]
     9a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
     9ac:	4620      	mov	r0, r4
     9ae:	1a51      	subs	r1, r2, r1
     9b0:	0209      	lsls	r1, r1, #8
     9b2:	17ca      	asrs	r2, r1, #31
     9b4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     9b8:	f109 0604 	add.w	r6, r9, #4
     9bc:	1209      	asrs	r1, r1, #8
     9be:	d41b      	bmi.n	9f8 <CONFIG_BT_RX_STACK_SIZE+0x160>
     9c0:	8971      	ldrh	r1, [r6, #10]
     9c2:	b349      	cbz	r1, a18 <CONFIG_BT_RX_STACK_SIZE+0x180>
     9c4:	8941      	ldrh	r1, [r0, #10]
     9c6:	bb39      	cbnz	r1, a18 <CONFIG_BT_RX_STACK_SIZE+0x180>
     9c8:	f000 fb5a 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     9cc:	aa01      	add	r2, sp, #4
     9ce:	4669      	mov	r1, sp
     9d0:	f002 fbae 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     9d4:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     9d8:	2800      	cmp	r0, #0
     9da:	bfcc      	ite	gt
     9dc:	2001      	movgt	r0, #1
     9de:	2000      	movle	r0, #0
     9e0:	f100 0133 	add.w	r1, r0, #51	; 0x33
     9e4:	9800      	ldr	r0, [sp, #0]
     9e6:	6832      	ldr	r2, [r6, #0]
     9e8:	1a10      	subs	r0, r2, r0
     9ea:	0200      	lsls	r0, r0, #8
     9ec:	17c2      	asrs	r2, r0, #31
     9ee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     9f2:	1200      	asrs	r0, r0, #8
     9f4:	4288      	cmp	r0, r1
     9f6:	da0f      	bge.n	a18 <CONFIG_BT_RX_STACK_SIZE+0x180>
     9f8:	f888 5000 	strb.w	r5, [r8]
     9fc:	f899 0010 	ldrb.w	r0, [r9, #16]
     a00:	7b21      	ldrb	r1, [r4, #12]
     a02:	4288      	cmp	r0, r1
     a04:	d803      	bhi.n	a0e <CONFIG_BT_RX_STACK_SIZE+0x176>
     a06:	b003      	add	sp, #12
     a08:	2000      	movs	r0, #0
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a0e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     a12:	7845      	ldrb	r5, [r0, #1]
     a14:	2d20      	cmp	r5, #32
     a16:	d1c2      	bne.n	99e <CONFIG_BT_RX_STACK_SIZE+0x106>
     a18:	b003      	add	sp, #12
     a1a:	2001      	movs	r0, #1
     a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a20:	20000d44 	.word	0x20000d44
     a24:	20000a44 	.word	0x20000a44
     a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a2c:	f04f 0800 	mov.w	r8, #0
     a30:	b098      	sub	sp, #96	; 0x60
     a32:	4616      	mov	r6, r2
     a34:	460d      	mov	r5, r1
     a36:	46c3      	mov	fp, r8
     a38:	f002 f8fc 	bl	2c34 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     a3c:	4604      	mov	r4, r0
     a3e:	2d01      	cmp	r5, #1
     a40:	bf18      	it	ne
     a42:	2d02      	cmpne	r5, #2
     a44:	d005      	beq.n	a52 <CONFIG_BT_RX_STACK_SIZE+0x1ba>
     a46:	f640 117b 	movw	r1, #2427	; 0x97b
     a4a:	f04f 0070 	mov.w	r0, #112	; 0x70
     a4e:	f002 ff07 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a52:	49fe      	ldr	r1, [pc, #1016]	; (e4c <CONFIG_BT_RX_STACK_SIZE+0x5b4>)
     a54:	2001      	movs	r0, #1
     a56:	6008      	str	r0, [r1, #0]
     a58:	49fd      	ldr	r1, [pc, #1012]	; (e50 <CONFIG_BT_RX_STACK_SIZE+0x5b8>)
     a5a:	6889      	ldr	r1, [r1, #8]
     a5c:	6008      	str	r0, [r1, #0]
     a5e:	2000      	movs	r0, #0
     a60:	9006      	str	r0, [sp, #24]
     a62:	1e40      	subs	r0, r0, #1
     a64:	9008      	str	r0, [sp, #32]
     a66:	49fb      	ldr	r1, [pc, #1004]	; (e54 <CONFIG_BT_RX_STACK_SIZE+0x5bc>)
     a68:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     a6c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     a70:	1d1b      	adds	r3, r3, #4
     a72:	af09      	add	r7, sp, #36	; 0x24
     a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a76:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a7a:	a809      	add	r0, sp, #36	; 0x24
     a7c:	f000 fb00 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     a80:	9007      	str	r0, [sp, #28]
     a82:	48f4      	ldr	r0, [pc, #976]	; (e54 <CONFIG_BT_RX_STACK_SIZE+0x5bc>)
     a84:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     a88:	f8b0 031c 	ldrh.w	r0, [r0, #796]	; 0x31c
     a8c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     a90:	f1b9 0f00 	cmp.w	r9, #0
     a94:	bf14      	ite	ne
     a96:	f04f 0a01 	movne.w	sl, #1
     a9a:	f04f 0a00 	moveq.w	sl, #0
     a9e:	9809      	ldr	r0, [sp, #36]	; 0x24
     aa0:	9012      	str	r0, [sp, #72]	; 0x48
     aa2:	f1ba 0f00 	cmp.w	sl, #0
     aa6:	d009      	beq.n	abc <CONFIG_BT_RX_STACK_SIZE+0x224>
     aa8:	48eb      	ldr	r0, [pc, #940]	; (e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>)
     aaa:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     aae:	b928      	cbnz	r0, abc <CONFIG_BT_RX_STACK_SIZE+0x224>
     ab0:	f002 fe72 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     ab4:	2800      	cmp	r0, #0
     ab6:	bf08      	it	eq
     ab8:	2701      	moveq	r7, #1
     aba:	d000      	beq.n	abe <CONFIG_BT_RX_STACK_SIZE+0x226>
     abc:	2700      	movs	r7, #0
     abe:	48e7      	ldr	r0, [pc, #924]	; (e5c <CONFIG_BT_RX_STACK_SIZE+0x5c4>)
     ac0:	2200      	movs	r2, #0
     ac2:	9214      	str	r2, [sp, #80]	; 0x50
     ac4:	7800      	ldrb	r0, [r0, #0]
     ac6:	4616      	mov	r6, r2
     ac8:	2801      	cmp	r0, #1
     aca:	bf18      	it	ne
     acc:	2803      	cmpne	r0, #3
     ace:	d143      	bne.n	b58 <CONFIG_BT_RX_STACK_SIZE+0x2c0>
     ad0:	48e2      	ldr	r0, [pc, #904]	; (e5c <CONFIG_BT_RX_STACK_SIZE+0x5c4>)
     ad2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     ad6:	eba8 0009 	sub.w	r0, r8, r9
     ada:	9014      	str	r0, [sp, #80]	; 0x50
     adc:	45c1      	cmp	r9, r8
     ade:	d23b      	bcs.n	b58 <CONFIG_BT_RX_STACK_SIZE+0x2c0>
     ae0:	a803      	add	r0, sp, #12
     ae2:	9005      	str	r0, [sp, #20]
     ae4:	a817      	add	r0, sp, #92	; 0x5c
     ae6:	9010      	str	r0, [sp, #64]	; 0x40
     ae8:	9907      	ldr	r1, [sp, #28]
     aea:	f108 0003 	add.w	r0, r8, #3
     aee:	4242      	negs	r2, r0
     af0:	f8df c36c 	ldr.w	ip, [pc, #876]	; e60 <CONFIG_BT_RX_STACK_SIZE+0x5c8>
     af4:	1a08      	subs	r0, r1, r0
     af6:	2300      	movs	r3, #0
     af8:	ebbc 0101 	subs.w	r1, ip, r1
     afc:	eb73 0103 	sbcs.w	r1, r3, r3
     b00:	d204      	bcs.n	b0c <CONFIG_BT_RX_STACK_SIZE+0x274>
     b02:	f240 51f1 	movw	r1, #1521	; 0x5f1
     b06:	2070      	movs	r0, #112	; 0x70
     b08:	f002 feaa 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b0c:	49d5      	ldr	r1, [pc, #852]	; (e64 <CONFIG_BT_RX_STACK_SIZE+0x5cc>)
     b0e:	428a      	cmp	r2, r1
     b10:	dd04      	ble.n	b1c <CONFIG_BT_RX_STACK_SIZE+0x284>
     b12:	f240 51f2 	movw	r1, #1522	; 0x5f2
     b16:	2070      	movs	r0, #112	; 0x70
     b18:	f002 fea2 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b1c:	49d2      	ldr	r1, [pc, #840]	; (e68 <CONFIG_BT_RX_STACK_SIZE+0x5d0>)
     b1e:	428a      	cmp	r2, r1
     b20:	da04      	bge.n	b2c <CONFIG_BT_RX_STACK_SIZE+0x294>
     b22:	f240 51f3 	movw	r1, #1523	; 0x5f3
     b26:	2070      	movs	r0, #112	; 0x70
     b28:	f002 fe9a 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b2c:	49cf      	ldr	r1, [pc, #828]	; (e6c <CONFIG_BT_RX_STACK_SIZE+0x5d4>)
     b2e:	4288      	cmp	r0, r1
     b30:	bfa8      	it	ge
     b32:	49cf      	ldrge	r1, [pc, #828]	; (e70 <CONFIG_BT_RX_STACK_SIZE+0x5d8>)
     b34:	da03      	bge.n	b3e <CONFIG_BT_RX_STACK_SIZE+0x2a6>
     b36:	2800      	cmp	r0, #0
     b38:	bfb8      	it	lt
     b3a:	49cc      	ldrlt	r1, [pc, #816]	; (e6c <CONFIG_BT_RX_STACK_SIZE+0x5d4>)
     b3c:	da00      	bge.n	b40 <CONFIG_BT_RX_STACK_SIZE+0x2a8>
     b3e:	1840      	adds	r0, r0, r1
     b40:	9a10      	ldr	r2, [sp, #64]	; 0x40
     b42:	9905      	ldr	r1, [sp, #20]
     b44:	f002 faf4 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     b48:	9803      	ldr	r0, [sp, #12]
     b4a:	9909      	ldr	r1, [sp, #36]	; 0x24
     b4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b50:	9003      	str	r0, [sp, #12]
     b52:	1a08      	subs	r0, r1, r0
     b54:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     b58:	2f00      	cmp	r7, #0
     b5a:	bf18      	it	ne
     b5c:	2632      	movne	r6, #50	; 0x32
     b5e:	d104      	bne.n	b6a <CONFIG_BT_RX_STACK_SIZE+0x2d2>
     b60:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b64:	2800      	cmp	r0, #0
     b66:	bf18      	it	ne
     b68:	2602      	movne	r6, #2
     b6a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b6e:	d008      	beq.n	b82 <CONFIG_BT_RX_STACK_SIZE+0x2ea>
     b70:	9809      	ldr	r0, [sp, #36]	; 0x24
     b72:	1b00      	subs	r0, r0, r4
     b74:	0200      	lsls	r0, r0, #8
     b76:	17c1      	asrs	r1, r0, #31
     b78:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b7c:	1200      	asrs	r0, r0, #8
     b7e:	2801      	cmp	r0, #1
     b80:	da02      	bge.n	b88 <CONFIG_BT_RX_STACK_SIZE+0x2f0>
     b82:	2004      	movs	r0, #4
     b84:	9918      	ldr	r1, [sp, #96]	; 0x60
     b86:	e00b      	b.n	ba0 <CONFIG_BT_RX_STACK_SIZE+0x308>
     b88:	b147      	cbz	r7, b9c <CONFIG_BT_RX_STACK_SIZE+0x304>
     b8a:	48b3      	ldr	r0, [pc, #716]	; (e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>)
     b8c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b90:	b120      	cbz	r0, b9c <CONFIG_BT_RX_STACK_SIZE+0x304>
     b92:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b96:	1c06      	adds	r6, r0, #0
     b98:	bf18      	it	ne
     b9a:	2602      	movne	r6, #2
     b9c:	4621      	mov	r1, r4
     b9e:	2001      	movs	r0, #1
     ba0:	f1b9 0f00 	cmp.w	r9, #0
     ba4:	d002      	beq.n	bac <CONFIG_BT_RX_STACK_SIZE+0x314>
     ba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
     ba8:	2b1e      	cmp	r3, #30
     baa:	da02      	bge.n	bb2 <CONFIG_BT_RX_STACK_SIZE+0x31a>
     bac:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     bb0:	b113      	cbz	r3, bb8 <CONFIG_BT_RX_STACK_SIZE+0x320>
     bb2:	f04f 0b01 	mov.w	fp, #1
     bb6:	1e40      	subs	r0, r0, #1
     bb8:	1983      	adds	r3, r0, r6
     bba:	48a8      	ldr	r0, [pc, #672]	; (e5c <CONFIG_BT_RX_STACK_SIZE+0x5c4>)
     bbc:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     bc0:	7800      	ldrb	r0, [r0, #0]
     bc2:	9015      	str	r0, [sp, #84]	; 0x54
     bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
     bc6:	1a80      	subs	r0, r0, r2
     bc8:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     bcc:	ebac 0001 	sub.w	r0, ip, r1
     bd0:	0200      	lsls	r0, r0, #8
     bd2:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     bd6:	eb00 601e 	add.w	r0, r0, lr, lsr #24
     bda:	1200      	asrs	r0, r0, #8
     bdc:	4298      	cmp	r0, r3
     bde:	db18      	blt.n	c12 <CONFIG_BT_RX_STACK_SIZE+0x37a>
     be0:	2a00      	cmp	r2, #0
     be2:	bf18      	it	ne
     be4:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
     be8:	9e09      	ldr	r6, [sp, #36]	; 0x24
     bea:	9710      	str	r7, [sp, #64]	; 0x40
     bec:	2700      	movs	r7, #0
     bee:	f001 ff1b 	bl	2a28 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     bf2:	1a30      	subs	r0, r6, r0
     bf4:	0200      	lsls	r0, r0, #8
     bf6:	17c1      	asrs	r1, r0, #31
     bf8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     bfc:	1200      	asrs	r0, r0, #8
     bfe:	283e      	cmp	r0, #62	; 0x3e
     c00:	da3e      	bge.n	c80 <CONFIG_BT_RX_STACK_SIZE+0x3e8>
     c02:	2d01      	cmp	r5, #1
     c04:	d01f      	beq.n	c46 <CONFIG_BT_RX_STACK_SIZE+0x3ae>
     c06:	1e70      	subs	r0, r6, #1
     c08:	9910      	ldr	r1, [sp, #64]	; 0x40
     c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c0e:	b311      	cbz	r1, c56 <CONFIG_BT_RX_STACK_SIZE+0x3be>
     c10:	e02c      	b.n	c6c <CONFIG_BT_RX_STACK_SIZE+0x3d4>
     c12:	b17a      	cbz	r2, c34 <CONFIG_BT_RX_STACK_SIZE+0x39c>
     c14:	2e00      	cmp	r6, #0
     c16:	bf04      	itt	eq
     c18:	9815      	ldreq	r0, [sp, #84]	; 0x54
     c1a:	2803      	cmpeq	r0, #3
     c1c:	d00a      	beq.n	c34 <CONFIG_BT_RX_STACK_SIZE+0x39c>
     c1e:	b927      	cbnz	r7, c2a <CONFIG_BT_RX_STACK_SIZE+0x392>
     c20:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     c24:	2800      	cmp	r0, #0
     c26:	bf18      	it	ne
     c28:	1e9b      	subne	r3, r3, #2
     c2a:	2200      	movs	r2, #0
     c2c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
     c30:	4690      	mov	r8, r2
     c32:	e7c7      	b.n	bc4 <CONFIG_BT_RX_STACK_SIZE+0x32c>
     c34:	bb07      	cbnz	r7, c78 <CONFIG_BT_RX_STACK_SIZE+0x3e0>
     c36:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     c3a:	b1e8      	cbz	r0, c78 <CONFIG_BT_RX_STACK_SIZE+0x3e0>
     c3c:	2000      	movs	r0, #0
     c3e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
     c42:	1e9b      	subs	r3, r3, #2
     c44:	e7be      	b.n	bc4 <CONFIG_BT_RX_STACK_SIZE+0x32c>
     c46:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c4a:	d120      	bne.n	c8e <CONFIG_BT_RX_STACK_SIZE+0x3f6>
     c4c:	f640 01f4 	movw	r1, #2292	; 0x8f4
     c50:	2070      	movs	r0, #112	; 0x70
     c52:	f002 fe05 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c56:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c5a:	d007      	beq.n	c6c <CONFIG_BT_RX_STACK_SIZE+0x3d4>
     c5c:	1a21      	subs	r1, r4, r0
     c5e:	0209      	lsls	r1, r1, #8
     c60:	17ca      	asrs	r2, r1, #31
     c62:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     c66:	1209      	asrs	r1, r1, #8
     c68:	2904      	cmp	r1, #4
     c6a:	dd03      	ble.n	c74 <CONFIG_BT_RX_STACK_SIZE+0x3dc>
     c6c:	4604      	mov	r4, r0
     c6e:	f001 fee1 	bl	2a34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c72:	e00c      	b.n	c8e <CONFIG_BT_RX_STACK_SIZE+0x3f6>
     c74:	2900      	cmp	r1, #0
     c76:	dd0a      	ble.n	c8e <CONFIG_BT_RX_STACK_SIZE+0x3f6>
     c78:	b01b      	add	sp, #108	; 0x6c
     c7a:	2000      	movs	r0, #0
     c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c80:	1e70      	subs	r0, r6, #1
     c82:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c86:	4620      	mov	r0, r4
     c88:	f001 fed4 	bl	2a34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c8c:	4657      	mov	r7, sl
     c8e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c92:	d028      	beq.n	ce6 <CONFIG_BT_RX_STACK_SIZE+0x44e>
     c94:	9809      	ldr	r0, [sp, #36]	; 0x24
     c96:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
     c9a:	1b00      	subs	r0, r0, r4
     c9c:	f08b 0301 	eor.w	r3, fp, #1
     ca0:	4a74      	ldr	r2, [pc, #464]	; (e74 <CONFIG_BT_RX_STACK_SIZE+0x5dc>)
     ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ca6:	ebac 0c04 	sub.w	ip, ip, r4
     caa:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     cae:	4283      	cmp	r3, r0
     cb0:	bf98      	it	ls
     cb2:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     cb6:	d2df      	bcs.n	c78 <CONFIG_BT_RX_STACK_SIZE+0x3e0>
     cb8:	4562      	cmp	r2, ip
     cba:	d3dd      	bcc.n	c78 <CONFIG_BT_RX_STACK_SIZE+0x3e0>
     cbc:	4620      	mov	r0, r4
     cbe:	f00b f8e4 	bl	be8a <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     cc2:	4a67      	ldr	r2, [pc, #412]	; (e60 <CONFIG_BT_RX_STACK_SIZE+0x5c8>)
     cc4:	9907      	ldr	r1, [sp, #28]
     cc6:	1c53      	adds	r3, r2, #1
     cc8:	1a0e      	subs	r6, r1, r0
     cca:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     cce:	bf24      	itt	cs
     cd0:	eba0 0c01 	subcs.w	ip, r0, r1
     cd4:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     cd8:	d310      	bcc.n	cfc <CONFIG_BT_RX_STACK_SIZE+0x464>
     cda:	42b2      	cmp	r2, r6
     cdc:	d208      	bcs.n	cf0 <CONFIG_BT_RX_STACK_SIZE+0x458>
     cde:	1a10      	subs	r0, r2, r0
     ce0:	4408      	add	r0, r1
     ce2:	1c46      	adds	r6, r0, #1
     ce4:	e00a      	b.n	cfc <CONFIG_BT_RX_STACK_SIZE+0x464>
     ce6:	f640 2113 	movw	r1, #2579	; 0xa13
     cea:	2070      	movs	r0, #112	; 0x70
     cec:	f002 fdb8 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cf0:	4562      	cmp	r2, ip
     cf2:	d22c      	bcs.n	d4e <CONFIG_BT_RX_STACK_SIZE+0x4b6>
     cf4:	1a51      	subs	r1, r2, r1
     cf6:	4408      	add	r0, r1
     cf8:	1c40      	adds	r0, r0, #1
     cfa:	4246      	negs	r6, r0
     cfc:	4856      	ldr	r0, [pc, #344]	; (e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>)
     cfe:	7f80      	ldrb	r0, [r0, #30]
     d00:	b350      	cbz	r0, d58 <CONFIG_BT_RX_STACK_SIZE+0x4c0>
     d02:	4628      	mov	r0, r5
     d04:	4645      	mov	r5, r8
     d06:	f04f 0b00 	mov.w	fp, #0
     d0a:	46d8      	mov	r8, fp
     d0c:	2801      	cmp	r0, #1
     d0e:	d005      	beq.n	d1c <CONFIG_BT_RX_STACK_SIZE+0x484>
     d10:	2002      	movs	r0, #2
     d12:	f002 f8d7 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d16:	2001      	movs	r0, #1
     d18:	f002 f8d4 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d1c:	45a9      	cmp	r9, r5
     d1e:	d22c      	bcs.n	d7a <CONFIG_BT_RX_STACK_SIZE+0x4e2>
     d20:	eba6 0105 	sub.w	r1, r6, r5
     d24:	f04f 0301 	mov.w	r3, #1
     d28:	f04f 0203 	mov.w	r2, #3
     d2c:	f04f 0002 	mov.w	r0, #2
     d30:	f002 f800 	bl	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d34:	2800      	cmp	r0, #0
     d36:	bf08      	it	eq
     d38:	f04f 0801 	moveq.w	r8, #1
     d3c:	f1b9 0f00 	cmp.w	r9, #0
     d40:	d035      	beq.n	dae <CONFIG_BT_RX_STACK_SIZE+0x516>
     d42:	2301      	movs	r3, #1
     d44:	eba6 0109 	sub.w	r1, r6, r9
     d48:	2203      	movs	r2, #3
     d4a:	4618      	mov	r0, r3
     d4c:	e023      	b.n	d96 <CONFIG_BT_RX_STACK_SIZE+0x4fe>
     d4e:	f640 21f3 	movw	r1, #2803	; 0xaf3
     d52:	2070      	movs	r0, #112	; 0x70
     d54:	f002 fd84 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d58:	45c1      	cmp	r9, r8
     d5a:	bf34      	ite	cc
     d5c:	4640      	movcc	r0, r8
     d5e:	4648      	movcs	r0, r9
     d60:	f1bb 0f00 	cmp.w	fp, #0
     d64:	bf14      	ite	ne
     d66:	2100      	movne	r1, #0
     d68:	211e      	moveq	r1, #30
     d6a:	4408      	add	r0, r1
     d6c:	42b0      	cmp	r0, r6
     d6e:	dbc8      	blt.n	d02 <CONFIG_BT_RX_STACK_SIZE+0x46a>
     d70:	f640 2126 	movw	r1, #2598	; 0xa26
     d74:	2070      	movs	r0, #112	; 0x70
     d76:	f002 fd73 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d7a:	d910      	bls.n	d9e <CONFIG_BT_RX_STACK_SIZE+0x506>
     d7c:	2301      	movs	r3, #1
     d7e:	eba6 0109 	sub.w	r1, r6, r9
     d82:	2203      	movs	r2, #3
     d84:	4618      	mov	r0, r3
     d86:	f001 ffd5 	bl	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d8a:	b328      	cbz	r0, dd8 <CONFIG_BT_RX_STACK_SIZE+0x540>
     d8c:	b17d      	cbz	r5, dae <CONFIG_BT_RX_STACK_SIZE+0x516>
     d8e:	1b71      	subs	r1, r6, r5
     d90:	2301      	movs	r3, #1
     d92:	2203      	movs	r2, #3
     d94:	2002      	movs	r0, #2
     d96:	f001 ffcd 	bl	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d9a:	b1e8      	cbz	r0, dd8 <CONFIG_BT_RX_STACK_SIZE+0x540>
     d9c:	e007      	b.n	dae <CONFIG_BT_RX_STACK_SIZE+0x516>
     d9e:	ea55 0009 	orrs.w	r0, r5, r9
     da2:	d004      	beq.n	dae <CONFIG_BT_RX_STACK_SIZE+0x516>
     da4:	f640 115e 	movw	r1, #2398	; 0x95e
     da8:	2070      	movs	r0, #112	; 0x70
     daa:	f002 fd59 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dae:	2301      	movs	r3, #1
     db0:	2203      	movs	r2, #3
     db2:	4631      	mov	r1, r6
     db4:	2000      	movs	r0, #0
     db6:	f001 ffbd 	bl	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     dba:	b168      	cbz	r0, dd8 <CONFIG_BT_RX_STACK_SIZE+0x540>
     dbc:	2501      	movs	r5, #1
     dbe:	f1b8 0f00 	cmp.w	r8, #0
     dc2:	d003      	beq.n	dcc <CONFIG_BT_RX_STACK_SIZE+0x534>
     dc4:	9812      	ldr	r0, [sp, #72]	; 0x48
     dc6:	9009      	str	r0, [sp, #36]	; 0x24
     dc8:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
     dcc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; e78 <CONFIG_BT_RX_STACK_SIZE+0x5e0>
     dd0:	f1ba 0f00 	cmp.w	sl, #0
     dd4:	d10e      	bne.n	df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>
     dd6:	e009      	b.n	dec <CONFIG_BT_RX_STACK_SIZE+0x554>
     dd8:	2002      	movs	r0, #2
     dda:	f002 f873 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     dde:	2001      	movs	r0, #1
     de0:	f002 f870 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     de4:	b01b      	add	sp, #108	; 0x6c
     de6:	2000      	movs	r0, #0
     de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dec:	481a      	ldr	r0, [pc, #104]	; (e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>)
     dee:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     df2:	b100      	cbz	r0, df6 <CONFIG_BT_RX_STACK_SIZE+0x55e>
     df4:	b34f      	cbz	r7, e4a <CONFIG_BT_RX_STACK_SIZE+0x5b2>
     df6:	f8df a060 	ldr.w	sl, [pc, #96]	; e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>
     dfa:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     dfe:	b118      	cbz	r0, e08 <CONFIG_BT_RX_STACK_SIZE+0x570>
     e00:	f002 fb74 	bl	34ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     e04:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     e08:	b3e7      	cbz	r7, e84 <CONFIG_BT_RX_STACK_SIZE+0x5ec>
     e0a:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     e0e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e16:	f8c8 0000 	str.w	r0, [r8]
     e1a:	2300      	movs	r3, #0
     e1c:	2203      	movs	r2, #3
     e1e:	2005      	movs	r0, #5
     e20:	f001 ff88 	bl	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e24:	b378      	cbz	r0, e86 <CONFIG_BT_RX_STACK_SIZE+0x5ee>
     e26:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     e2a:	2005      	movs	r0, #5
     e2c:	f002 f92a 	bl	3084 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     e30:	4912      	ldr	r1, [pc, #72]	; (e7c <CONFIG_BT_RX_STACK_SIZE+0x5e4>)
     e32:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     e36:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     e3a:	4911      	ldr	r1, [pc, #68]	; (e80 <CONFIG_BT_RX_STACK_SIZE+0x5e8>)
     e3c:	12e0      	asrs	r0, r4, #11
     e3e:	6008      	str	r0, [r1, #0]
     e40:	4c05      	ldr	r4, [pc, #20]	; (e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>)
     e42:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e46:	b3e0      	cbz	r0, ec2 <CONFIG_BT_RX_STACK_SIZE+0x62a>
     e48:	e05d      	b.n	f06 <CONFIG_BT_RX_STACK_SIZE+0x66e>
     e4a:	e01d      	b.n	e88 <CONFIG_BT_RX_STACK_SIZE+0x5f0>
     e4c:	40000508 	.word	0x40000508
     e50:	2000000c 	.word	0x2000000c
     e54:	20000a44 	.word	0x20000a44
     e58:	20000d44 	.word	0x20000d44
     e5c:	2000000e 	.word	0x2000000e
     e60:	1e847fff 	.word	0x1e847fff
     e64:	07a12000 	.word	0x07a12000
     e68:	f85ee000 	.word	0xf85ee000
     e6c:	1e848000 	.word	0x1e848000
     e70:	e17b8000 	.word	0xe17b8000
     e74:	003fffff 	.word	0x003fffff
     e78:	4001f508 	.word	0x4001f508
     e7c:	4001f098 	.word	0x4001f098
     e80:	4001f504 	.word	0x4001f504
     e84:	e005      	b.n	e92 <CONFIG_BT_RX_STACK_SIZE+0x5fa>
     e86:	e035      	b.n	ef4 <CONFIG_BT_RX_STACK_SIZE+0x65c>
     e88:	f8df a0b8 	ldr.w	sl, [pc, #184]	; f44 <CONFIG_BT_RX_STACK_SIZE+0x6ac>
     e8c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e90:	b358      	cbz	r0, eea <CONFIG_BT_RX_STACK_SIZE+0x652>
     e92:	4c2c      	ldr	r4, [pc, #176]	; (f44 <CONFIG_BT_RX_STACK_SIZE+0x6ac>)
     e94:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e98:	b150      	cbz	r0, eb0 <CONFIG_BT_RX_STACK_SIZE+0x618>
     e9a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e9e:	f8c8 0000 	str.w	r0, [r8]
     ea2:	2005      	movs	r0, #5
     ea4:	f002 f80e 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ea8:	f002 fb88 	bl	35bc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     eac:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     eb0:	ac06      	add	r4, sp, #24
     eb2:	4825      	ldr	r0, [pc, #148]	; (f48 <CONFIG_BT_RX_STACK_SIZE+0x6b0>)
     eb4:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     eb8:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
     ebc:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
     ec0:	e000      	b.n	ec4 <CONFIG_BT_RX_STACK_SIZE+0x62c>
     ec2:	e01c      	b.n	efe <CONFIG_BT_RX_STACK_SIZE+0x666>
     ec4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
     ec8:	f8c0 c30c 	str.w	ip, [r0, #780]	; 0x30c
     ecc:	ac0a      	add	r4, sp, #40	; 0x28
     ece:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     ed2:	f8c0 1310 	str.w	r1, [r0, #784]	; 0x310
     ed6:	f8c0 2314 	str.w	r2, [r0, #788]	; 0x314
     eda:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
     ede:	f8c0 c31c 	str.w	ip, [r0, #796]	; 0x31c
     ee2:	b01b      	add	sp, #108	; 0x6c
     ee4:	2001      	movs	r0, #1
     ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eea:	f002 fb1b 	bl	3524 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     eee:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     ef2:	e789      	b.n	e08 <CONFIG_BT_RX_STACK_SIZE+0x570>
     ef4:	f44f 7153 	mov.w	r1, #844	; 0x34c
     ef8:	2070      	movs	r0, #112	; 0x70
     efa:	f002 fcb1 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     efe:	f002 fb4f 	bl	35a0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     f02:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     f06:	eba6 0009 	sub.w	r0, r6, r9
     f0a:	f1a0 0119 	sub.w	r1, r0, #25
     f0e:	2900      	cmp	r1, #0
     f10:	dc04      	bgt.n	f1c <CONFIG_BT_RX_STACK_SIZE+0x684>
     f12:	f44f 6125 	mov.w	r1, #2640	; 0xa50
     f16:	2070      	movs	r0, #112	; 0x70
     f18:	f002 fca2 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f1c:	2203      	movs	r2, #3
     f1e:	2301      	movs	r3, #1
     f20:	4610      	mov	r0, r2
     f22:	f001 ff07 	bl	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     f26:	b138      	cbz	r0, f38 <CONFIG_BT_RX_STACK_SIZE+0x6a0>
     f28:	4808      	ldr	r0, [pc, #32]	; (f4c <CONFIG_BT_RX_STACK_SIZE+0x6b4>)
     f2a:	6880      	ldr	r0, [r0, #8]
     f2c:	f8c0 b000 	str.w	fp, [r0]
     f30:	4807      	ldr	r0, [pc, #28]	; (f50 <CONFIG_BT_RX_STACK_SIZE+0x6b8>)
     f32:	f8c0 b000 	str.w	fp, [r0]
     f36:	e7bb      	b.n	eb0 <CONFIG_BT_RX_STACK_SIZE+0x618>
     f38:	f640 215b 	movw	r1, #2651	; 0xa5b
     f3c:	2070      	movs	r0, #112	; 0x70
     f3e:	f002 fc8f 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f42:	0000      	.short	0x0000
     f44:	20000d44 	.word	0x20000d44
     f48:	20000a44 	.word	0x20000a44
     f4c:	2000000c 	.word	0x2000000c
     f50:	40000508 	.word	0x40000508
     f54:	b510      	push	{r4, lr}
     f56:	4c15      	ldr	r4, [pc, #84]	; (fac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc>)
     f58:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f5c:	2820      	cmp	r0, #32
     f5e:	bf18      	it	ne
     f60:	bd10      	popne	{r4, pc}
     f62:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f66:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f6a:	f890 1020 	ldrb.w	r1, [r0, #32]
     f6e:	2920      	cmp	r1, #32
     f70:	d017      	beq.n	fa2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2>
     f72:	f8df c03c 	ldr.w	ip, [pc, #60]	; fb0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x10>
     f76:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     f7a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     f7e:	785b      	ldrb	r3, [r3, #1]
     f80:	f880 3020 	strb.w	r3, [r0, #32]
     f84:	2301      	movs	r3, #1
     f86:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     f8a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     f8e:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     f92:	2002      	movs	r0, #2
     f94:	f000 f8b2 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
     f98:	2000      	movs	r0, #0
     f9a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     f9e:	77a0      	strb	r0, [r4, #30]
     fa0:	bd10      	pop	{r4, pc}
     fa2:	f240 3199 	movw	r1, #921	; 0x399
     fa6:	2070      	movs	r0, #112	; 0x70
     fa8:	f002 fc5a 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fac:	20000d44 	.word	0x20000d44
     fb0:	20000cc4 	.word	0x20000cc4
     fb4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fb8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
     fbc:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fc0:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fc4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     fc8:	2c20      	cmp	r4, #32
     fca:	bf08      	it	eq
     fcc:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fd0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
     fd4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
     fd8:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
     fdc:	eb09 1785 	add.w	r7, r9, r5, lsl #6
     fe0:	2607      	movs	r6, #7
     fe2:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     fe6:	2801      	cmp	r0, #1
     fe8:	d00e      	beq.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     fea:	2804      	cmp	r0, #4
     fec:	bf08      	it	eq
     fee:	2602      	moveq	r6, #2
     ff0:	d00a      	beq.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ff2:	2805      	cmp	r0, #5
     ff4:	bf0c      	ite	eq
     ff6:	2603      	moveq	r6, #3
     ff8:	2806      	cmpne	r0, #6
     ffa:	d005      	beq.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ffc:	f640 01c1 	movw	r1, #2241	; 0x8c1
    1000:	f04f 0070 	mov.w	r0, #112	; 0x70
    1004:	f002 fc2c 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1008:	f1ba 0f00 	cmp.w	sl, #0
    100c:	bf18      	it	ne
    100e:	f3af 8000 	nopne.w
    1012:	f3ef 8010 	mrs	r0, PRIMASK
    1016:	b672      	cpsid	i
    1018:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    101c:	784a      	ldrb	r2, [r1, #1]
    101e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1022:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1026:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    102a:	42a2      	cmp	r2, r4
    102c:	bf04      	itt	eq
    102e:	2220      	moveq	r2, #32
    1030:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1034:	b1a8      	cbz	r0, 1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    1036:	462a      	mov	r2, r5
    1038:	4621      	mov	r1, r4
    103a:	2001      	movs	r0, #1
    103c:	f000 f85e 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1040:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    1044:	4631      	mov	r1, r6
    1046:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
    104a:	4620      	mov	r0, r4
    104c:	4790      	blx	r2
    104e:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1052:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1056:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    105a:	2c20      	cmp	r4, #32
    105c:	d1be      	bne.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
    105e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1062:	4806      	ldr	r0, [pc, #24]	; (107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>)
    1064:	2800      	cmp	r0, #0
    1066:	bf18      	it	ne
    1068:	f3af 8000 	nopne.w
    106c:	b662      	cpsie	i
    106e:	e7e2      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1070:	20000d44 	.word	0x20000d44
    1074:	00000000 	.word	0x00000000
    1078:	20000cc4 	.word	0x20000cc4
    107c:	00000000 	.word	0x00000000
    1080:	b510      	push	{r4, lr}
    1082:	4604      	mov	r4, r0
    1084:	6800      	ldr	r0, [r0, #0]
    1086:	f00a ff00 	bl	be8a <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    108a:	4601      	mov	r1, r0
    108c:	8960      	ldrh	r0, [r4, #10]
    108e:	f994 2008 	ldrsb.w	r2, [r4, #8]
    1092:	f8df c054 	ldr.w	ip, [pc, #84]	; 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    1096:	4410      	add	r0, r2
    1098:	1cc2      	adds	r2, r0, #3
    109a:	1888      	adds	r0, r1, r2
    109c:	2300      	movs	r3, #0
    109e:	ebbc 0101 	subs.w	r1, ip, r1
    10a2:	eb73 0103 	sbcs.w	r1, r3, r3
    10a6:	d204      	bcs.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
    10a8:	f240 51f1 	movw	r1, #1521	; 0x5f1
    10ac:	2070      	movs	r0, #112	; 0x70
    10ae:	f002 fbd7 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10b2:	490e      	ldr	r1, [pc, #56]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    10b4:	428a      	cmp	r2, r1
    10b6:	dd04      	ble.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    10b8:	f240 51f2 	movw	r1, #1522	; 0x5f2
    10bc:	2070      	movs	r0, #112	; 0x70
    10be:	f002 fbcf 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10c2:	490b      	ldr	r1, [pc, #44]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    10c4:	428a      	cmp	r2, r1
    10c6:	da04      	bge.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    10c8:	f240 51f3 	movw	r1, #1523	; 0x5f3
    10cc:	2070      	movs	r0, #112	; 0x70
    10ce:	f002 fbc7 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d2:	4908      	ldr	r1, [pc, #32]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    10d4:	4288      	cmp	r0, r1
    10d6:	bfa8      	it	ge
    10d8:	4907      	ldrge	r1, [pc, #28]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    10da:	da03      	bge.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
    10dc:	2800      	cmp	r0, #0
    10de:	bfb4      	ite	lt
    10e0:	4904      	ldrlt	r1, [pc, #16]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    10e2:	bd10      	popge	{r4, pc}
    10e4:	1840      	adds	r0, r0, r1
    10e6:	bd10      	pop	{r4, pc}
    10e8:	1e847fff 	.word	0x1e847fff
    10ec:	07a12000 	.word	0x07a12000
    10f0:	f85ee000 	.word	0xf85ee000
    10f4:	1e848000 	.word	0x1e848000
    10f8:	e17b8000 	.word	0xe17b8000
    10fc:	f8df c054 	ldr.w	ip, [pc, #84]	; 1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1100:	b510      	push	{r4, lr}
    1102:	2300      	movs	r3, #0
    1104:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1108:	2807      	cmp	r0, #7
    110a:	d21e      	bcs.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    110c:	e8df f000 	tbb	[pc, r0]
    1110:	05050505 	.word	0x05050505
    1114:	00040404 	.word	0x00040404
    1118:	2301      	movs	r3, #1
    111a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    111e:	2b00      	cmp	r3, #0
    1120:	bf08      	it	eq
    1122:	bd10      	popeq	{r4, pc}
    1124:	480c      	ldr	r0, [pc, #48]	; (1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>)
    1126:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    112a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    112e:	2820      	cmp	r0, #32
    1130:	bf0e      	itee	eq
    1132:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1136:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    113a:	7041      	strbne	r1, [r0, #1]
    113c:	2020      	movs	r0, #32
    113e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1142:	7058      	strb	r0, [r3, #1]
    1144:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1148:	bd10      	pop	{r4, pc}
    114a:	f240 2162 	movw	r1, #610	; 0x262
    114e:	2070      	movs	r0, #112	; 0x70
    1150:	f002 fb86 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1154:	20000cc4 	.word	0x20000cc4
    1158:	20000d44 	.word	0x20000d44
    115c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1160:	b083      	sub	sp, #12
    1162:	485c      	ldr	r0, [pc, #368]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1164:	9904      	ldr	r1, [sp, #16]
    1166:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    116a:	9001      	str	r0, [sp, #4]
    116c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1170:	9803      	ldr	r0, [sp, #12]
    1172:	4625      	mov	r5, r4
    1174:	2801      	cmp	r0, #1
    1176:	bf18      	it	ne
    1178:	2802      	cmpne	r0, #2
    117a:	d005      	beq.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    117c:	f640 2197 	movw	r1, #2711	; 0xa97
    1180:	f04f 0070 	mov.w	r0, #112	; 0x70
    1184:	f002 fb6c 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1188:	2700      	movs	r7, #0
    118a:	2d20      	cmp	r5, #32
    118c:	d04a      	beq.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    118e:	4851      	ldr	r0, [pc, #324]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1190:	9100      	str	r1, [sp, #0]
    1192:	2600      	movs	r6, #0
    1194:	7f80      	ldrb	r0, [r0, #30]
    1196:	2800      	cmp	r0, #0
    1198:	bf08      	it	eq
    119a:	2602      	moveq	r6, #2
    119c:	f001 fc44 	bl	2a28 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11a0:	f8df a138 	ldr.w	sl, [pc, #312]	; 12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>
    11a4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    11a8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    11ac:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    11b0:	684a      	ldr	r2, [r1, #4]
    11b2:	6889      	ldr	r1, [r1, #8]
    11b4:	1a12      	subs	r2, r2, r0
    11b6:	1a09      	subs	r1, r1, r0
    11b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11bc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11c0:	4296      	cmp	r6, r2
    11c2:	bf98      	it	ls
    11c4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11c8:	d201      	bcs.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    11ca:	4589      	cmp	r9, r1
    11cc:	d228      	bcs.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    11ce:	4a44      	ldr	r2, [pc, #272]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    11d0:	9900      	ldr	r1, [sp, #0]
    11d2:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11d6:	4622      	mov	r2, r4
    11d8:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    11dc:	784c      	ldrb	r4, [r1, #1]
    11de:	2c20      	cmp	r4, #32
    11e0:	d016      	beq.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    11e2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    11e6:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    11ea:	f8dc 8004 	ldr.w	r8, [ip, #4]
    11ee:	f8dc c008 	ldr.w	ip, [ip, #8]
    11f2:	eba8 0800 	sub.w	r8, r8, r0
    11f6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    11fa:	ebac 0100 	sub.w	r1, ip, r0
    11fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1202:	4546      	cmp	r6, r8
    1204:	bf98      	it	ls
    1206:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    120a:	d2e4      	bcs.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    120c:	4589      	cmp	r9, r1
    120e:	d3e2      	bcc.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    1210:	2a20      	cmp	r2, #32
    1212:	d005      	beq.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1214:	2120      	movs	r1, #32
    1216:	2004      	movs	r0, #4
    1218:	9b00      	ldr	r3, [sp, #0]
    121a:	f7ff f9e9 	bl	5f0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    121e:	4604      	mov	r4, r0
    1220:	42ac      	cmp	r4, r5
    1222:	d115      	bne.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    1224:	482f      	ldr	r0, [pc, #188]	; (12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>)
    1226:	2800      	cmp	r0, #0
    1228:	bf18      	it	ne
    122a:	f3af 8000 	nopne.w
    122e:	f001 fbfb 	bl	2a28 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1232:	4c28      	ldr	r4, [pc, #160]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1234:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1238:	2920      	cmp	r1, #32
    123a:	d00d      	beq.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    123c:	68e1      	ldr	r1, [r4, #12]
    123e:	1c82      	adds	r2, r0, #2
    1240:	1a51      	subs	r1, r2, r1
    1242:	0209      	lsls	r1, r1, #8
    1244:	17ca      	asrs	r2, r1, #31
    1246:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    124a:	1209      	asrs	r1, r1, #8
    124c:	2900      	cmp	r1, #0
    124e:	dd03      	ble.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    1250:	b005      	add	sp, #20
    1252:	2000      	movs	r0, #0
    1254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1258:	2d20      	cmp	r5, #32
    125a:	d00d      	beq.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
    125c:	462a      	mov	r2, r5
    125e:	9903      	ldr	r1, [sp, #12]
    1260:	f7ff fbe2 	bl	a28 <CONFIG_BT_RX_STACK_SIZE+0x190>
    1264:	b358      	cbz	r0, 12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
    1266:	9801      	ldr	r0, [sp, #4]
    1268:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    126c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1270:	b005      	add	sp, #20
    1272:	2001      	movs	r0, #1
    1274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1278:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    127c:	b118      	cbz	r0, 1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
    127e:	f002 f935 	bl	34ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1282:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1286:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    128a:	b150      	cbz	r0, 12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    128c:	4916      	ldr	r1, [pc, #88]	; (12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    128e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1292:	6008      	str	r0, [r1, #0]
    1294:	2005      	movs	r0, #5
    1296:	f001 fe15 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    129a:	f002 f98f 	bl	35bc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    129e:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12a2:	2004      	movs	r0, #4
    12a4:	f001 fe0e 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12a8:	f001 fe74 	bl	2f94 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12ac:	2020      	movs	r0, #32
    12ae:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12b2:	480e      	ldr	r0, [pc, #56]	; (12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>)
    12b4:	6880      	ldr	r0, [r0, #8]
    12b6:	6007      	str	r7, [r0, #0]
    12b8:	480d      	ldr	r0, [pc, #52]	; (12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    12ba:	6007      	str	r7, [r0, #0]
    12bc:	e7d8      	b.n	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
    12be:	462a      	mov	r2, r5
    12c0:	2120      	movs	r1, #32
    12c2:	2004      	movs	r0, #4
    12c4:	9b04      	ldr	r3, [sp, #16]
    12c6:	f7ff f993 	bl	5f0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    12ca:	b005      	add	sp, #20
    12cc:	2000      	movs	r0, #0
    12ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d2:	0000      	.short	0x0000
    12d4:	20000d44 	.word	0x20000d44
    12d8:	003fffff 	.word	0x003fffff
    12dc:	20000a44 	.word	0x20000a44
    12e0:	20000cc4 	.word	0x20000cc4
    12e4:	00000000 	.word	0x00000000
    12e8:	4001f508 	.word	0x4001f508
    12ec:	2000000c 	.word	0x2000000c
    12f0:	40000508 	.word	0x40000508

000012f4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    12f4:	4906      	ldr	r1, [pc, #24]	; (1310 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    12f6:	b510      	push	{r4, lr}
    12f8:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    12fc:	2a20      	cmp	r2, #32
    12fe:	bf1c      	itt	ne
    1300:	7788      	strbne	r0, [r1, #30]
    1302:	bd10      	popne	{r4, pc}
    1304:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    1308:	2070      	movs	r0, #112	; 0x70
    130a:	f002 faa9 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    130e:	0000      	.short	0x0000
    1310:	20000d44 	.word	0x20000d44

00001314 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1318:	4e68      	ldr	r6, [pc, #416]	; (14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>)
    131a:	4607      	mov	r7, r0
    131c:	b087      	sub	sp, #28
    131e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1322:	468a      	mov	sl, r1
    1324:	2820      	cmp	r0, #32
    1326:	d059      	beq.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    1328:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    132c:	f106 040c 	add.w	r4, r6, #12
    1330:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1334:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1338:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    133c:	2020      	movs	r0, #32
    133e:	f88d 0000 	strb.w	r0, [sp]
    1342:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1346:	aa02      	add	r2, sp, #8
    1348:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    134c:	a901      	add	r1, sp, #4
    134e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1352:	6930      	ldr	r0, [r6, #16]
    1354:	9005      	str	r0, [sp, #20]
    1356:	6830      	ldr	r0, [r6, #0]
    1358:	4438      	add	r0, r7
    135a:	f001 fee9 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    135e:	f99d 0008 	ldrsb.w	r0, [sp, #8]
    1362:	2800      	cmp	r0, #0
    1364:	dd02      	ble.n	136c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    1366:	9801      	ldr	r0, [sp, #4]
    1368:	1c40      	adds	r0, r0, #1
    136a:	9001      	str	r0, [sp, #4]
    136c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    1370:	9901      	ldr	r1, [sp, #4]
    1372:	2f64      	cmp	r7, #100	; 0x64
    1374:	4401      	add	r1, r0
    1376:	d336      	bcc.n	13e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e>
    1378:	4b51      	ldr	r3, [pc, #324]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    137a:	2000      	movs	r0, #0
    137c:	1bdb      	subs	r3, r3, r7
    137e:	4180      	sbcs	r0, r0
    1380:	d331      	bcc.n	13e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e>
    1382:	f8d8 0004 	ldr.w	r0, [r8, #4]
    1386:	1a08      	subs	r0, r1, r0
    1388:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    138c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1390:	d229      	bcs.n	13e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e>
    1392:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    1396:	6060      	str	r0, [r4, #4]
    1398:	4848      	ldr	r0, [pc, #288]	; (14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>)
    139a:	f884 a00c 	strb.w	sl, [r4, #12]
    139e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    13a2:	46ea      	mov	sl, sp
    13a4:	2d20      	cmp	r5, #32
    13a6:	bf1c      	itt	ne
    13a8:	4946      	ldrne	r1, [pc, #280]	; (14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>)
    13aa:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13ae:	d04a      	beq.n	1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
    13b0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    13b4:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    13b8:	6860      	ldr	r0, [r4, #4]
    13ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
    13be:	4621      	mov	r1, r4
    13c0:	1a10      	subs	r0, r2, r0
    13c2:	0200      	lsls	r0, r0, #8
    13c4:	17c2      	asrs	r2, r0, #31
    13c6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13ca:	f108 0604 	add.w	r6, r8, #4
    13ce:	1200      	asrs	r0, r0, #8
    13d0:	d426      	bmi.n	1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    13d2:	8970      	ldrh	r0, [r6, #10]
    13d4:	b388      	cbz	r0, 143a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb2>
    13d6:	8948      	ldrh	r0, [r1, #10]
    13d8:	b148      	cbz	r0, 13ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66>
    13da:	e034      	b.n	1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
    13dc:	f640 316a 	movw	r1, #2922	; 0xb6a
    13e0:	2070      	movs	r0, #112	; 0x70
    13e2:	f002 fa3d 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13e6:	b007      	add	sp, #28
    13e8:	2001      	movs	r0, #1
    13ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13ee:	4620      	mov	r0, r4
    13f0:	f7ff fe46 	bl	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    13f4:	aa04      	add	r2, sp, #16
    13f6:	a903      	add	r1, sp, #12
    13f8:	f001 fe9a 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    13fc:	f99d 0010 	ldrsb.w	r0, [sp, #16]
    1400:	2800      	cmp	r0, #0
    1402:	bfcc      	ite	gt
    1404:	2001      	movgt	r0, #1
    1406:	2000      	movle	r0, #0
    1408:	f100 0133 	add.w	r1, r0, #51	; 0x33
    140c:	9803      	ldr	r0, [sp, #12]
    140e:	6832      	ldr	r2, [r6, #0]
    1410:	1a10      	subs	r0, r2, r0
    1412:	0200      	lsls	r0, r0, #8
    1414:	17c2      	asrs	r2, r0, #31
    1416:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    141a:	1200      	asrs	r0, r0, #8
    141c:	4288      	cmp	r0, r1
    141e:	da12      	bge.n	1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
    1420:	f88a 5000 	strb.w	r5, [sl]
    1424:	f898 1010 	ldrb.w	r1, [r8, #16]
    1428:	7b20      	ldrb	r0, [r4, #12]
    142a:	4281      	cmp	r1, r0
    142c:	d806      	bhi.n	143c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4>
    142e:	9805      	ldr	r0, [sp, #20]
    1430:	6060      	str	r0, [r4, #4]
    1432:	b007      	add	sp, #28
    1434:	2002      	movs	r0, #2
    1436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    143a:	e004      	b.n	1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
    143c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1440:	7845      	ldrb	r5, [r0, #1]
    1442:	2d20      	cmp	r5, #32
    1444:	d1b4      	bne.n	13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
    1446:	2005      	movs	r0, #5
    1448:	f001 fd3c 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    144c:	4c1b      	ldr	r4, [pc, #108]	; (14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>)
    144e:	f04f 30ff 	mov.w	r0, #4294967295
    1452:	60a0      	str	r0, [r4, #8]
    1454:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1458:	f89d 2000 	ldrb.w	r2, [sp]
    145c:	2120      	movs	r1, #32
    145e:	2a20      	cmp	r2, #32
    1460:	bf13      	iteet	ne
    1462:	2005      	movne	r0, #5
    1464:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1468:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    146c:	f7ff f8c0 	blne	5f0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    1470:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1474:	4913      	ldr	r1, [pc, #76]	; (14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>)
    1476:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    147a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    147e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1482:	7048      	strb	r0, [r1, #1]
    1484:	6820      	ldr	r0, [r4, #0]
    1486:	4438      	add	r0, r7
    1488:	6020      	str	r0, [r4, #0]
    148a:	2001      	movs	r0, #1
    148c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1490:	7e60      	ldrb	r0, [r4, #25]
    1492:	2801      	cmp	r0, #1
    1494:	d105      	bne.n	14a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11a>
    1496:	6920      	ldr	r0, [r4, #16]
    1498:	1e40      	subs	r0, r0, #1
    149a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    149e:	f001 fb63 	bl	2b68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    14a2:	f89d 0000 	ldrb.w	r0, [sp]
    14a6:	2820      	cmp	r0, #32
    14a8:	d003      	beq.n	14b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12a>
    14aa:	4807      	ldr	r0, [pc, #28]	; (14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>)
    14ac:	7840      	ldrb	r0, [r0, #1]
    14ae:	f002 faa7 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14b2:	b007      	add	sp, #28
    14b4:	2000      	movs	r0, #0
    14b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ba:	0000      	.short	0x0000
    14bc:	20000d44 	.word	0x20000d44
    14c0:	07a11fff 	.word	0x07a11fff
    14c4:	20000cc4 	.word	0x20000cc4
    14c8:	2000000c 	.word	0x2000000c

000014cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    14cc:	4602      	mov	r2, r0
    14ce:	f8df c054 	ldr.w	ip, [pc, #84]	; 1524 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    14d2:	b510      	push	{r4, lr}
    14d4:	2300      	movs	r3, #0
    14d6:	ebbc 0202 	subs.w	r2, ip, r2
    14da:	4408      	add	r0, r1
    14dc:	eb73 0203 	sbcs.w	r2, r3, r3
    14e0:	d204      	bcs.n	14ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    14e2:	f240 51f1 	movw	r1, #1521	; 0x5f1
    14e6:	2070      	movs	r0, #112	; 0x70
    14e8:	f002 f9ba 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14ec:	4a0e      	ldr	r2, [pc, #56]	; (1528 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    14ee:	4291      	cmp	r1, r2
    14f0:	dd04      	ble.n	14fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    14f2:	f240 51f2 	movw	r1, #1522	; 0x5f2
    14f6:	2070      	movs	r0, #112	; 0x70
    14f8:	f002 f9b2 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14fc:	4a0b      	ldr	r2, [pc, #44]	; (152c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    14fe:	4291      	cmp	r1, r2
    1500:	da04      	bge.n	150c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    1502:	f240 51f3 	movw	r1, #1523	; 0x5f3
    1506:	2070      	movs	r0, #112	; 0x70
    1508:	f002 f9aa 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    150c:	4908      	ldr	r1, [pc, #32]	; (1530 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    150e:	4288      	cmp	r0, r1
    1510:	bfa8      	it	ge
    1512:	4908      	ldrge	r1, [pc, #32]	; (1534 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    1514:	da03      	bge.n	151e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    1516:	2800      	cmp	r0, #0
    1518:	bfb4      	ite	lt
    151a:	4905      	ldrlt	r1, [pc, #20]	; (1530 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    151c:	bd10      	popge	{r4, pc}
    151e:	1840      	adds	r0, r0, r1
    1520:	bd10      	pop	{r4, pc}
    1522:	0000      	.short	0x0000
    1524:	1e847fff 	.word	0x1e847fff
    1528:	07a12000 	.word	0x07a12000
    152c:	f85ee000 	.word	0xf85ee000
    1530:	1e848000 	.word	0x1e848000
    1534:	e17b8000 	.word	0xe17b8000

00001538 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1538:	4a10      	ldr	r2, [pc, #64]	; (157c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    153a:	1a0b      	subs	r3, r1, r0
    153c:	f102 0c01 	add.w	ip, r2, #1
    1540:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1544:	bf3c      	itt	cc
    1546:	4618      	movcc	r0, r3
    1548:	4770      	bxcc	lr
    154a:	b510      	push	{r4, lr}
    154c:	1a44      	subs	r4, r0, r1
    154e:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1552:	bf3c      	itt	cc
    1554:	4618      	movcc	r0, r3
    1556:	bd10      	popcc	{r4, pc}
    1558:	429a      	cmp	r2, r3
    155a:	d203      	bcs.n	1564 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    155c:	1a10      	subs	r0, r2, r0
    155e:	4408      	add	r0, r1
    1560:	1c40      	adds	r0, r0, #1
    1562:	bd10      	pop	{r4, pc}
    1564:	42a2      	cmp	r2, r4
    1566:	d204      	bcs.n	1572 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1568:	1a51      	subs	r1, r2, r1
    156a:	4408      	add	r0, r1
    156c:	1c40      	adds	r0, r0, #1
    156e:	4240      	negs	r0, r0
    1570:	bd10      	pop	{r4, pc}
    1572:	f640 21f3 	movw	r1, #2803	; 0xaf3
    1576:	2070      	movs	r0, #112	; 0x70
    1578:	f002 f972 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    157c:	1e847fff 	.word	0x1e847fff

00001580 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1580:	4907      	ldr	r1, [pc, #28]	; (15a0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    1582:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1586:	4282      	cmp	r2, r0
    1588:	bf04      	itt	eq
    158a:	6848      	ldreq	r0, [r1, #4]
    158c:	4770      	bxeq	lr
    158e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1592:	4904      	ldr	r1, [pc, #16]	; (15a4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1594:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1598:	1d00      	adds	r0, r0, #4
    159a:	f7ff bd71 	b.w	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    159e:	0000      	.short	0x0000
    15a0:	20000d44 	.word	0x20000d44
    15a4:	20000a44 	.word	0x20000a44

000015a8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    15a8:	490b      	ldr	r1, [pc, #44]	; (15d8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    15aa:	b510      	push	{r4, lr}
    15ac:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    15b0:	2820      	cmp	r0, #32
    15b2:	d00c      	beq.n	15ce <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    15b4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    15b8:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    15bc:	4a07      	ldr	r2, [pc, #28]	; (15dc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    15be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    15c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    15c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15ca:	2104      	movs	r1, #4
    15cc:	4710      	bx	r2
    15ce:	f640 01a5 	movw	r1, #2213	; 0x8a5
    15d2:	2070      	movs	r0, #112	; 0x70
    15d4:	f002 f944 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d8:	20000d44 	.word	0x20000d44
    15dc:	20000a44 	.word	0x20000a44

000015e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    15e0:	b570      	push	{r4, r5, r6, lr}
    15e2:	4e60      	ldr	r6, [pc, #384]	; (1764 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>)
    15e4:	4960      	ldr	r1, [pc, #384]	; (1768 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>)
    15e6:	2501      	movs	r5, #1
    15e8:	f506 7440 	add.w	r4, r6, #768	; 0x300
    15ec:	2808      	cmp	r0, #8
    15ee:	d27c      	bcs.n	16ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    15f0:	e8df f000 	tbb	[pc, r0]
    15f4:	9a885704 	.word	0x9a885704
    15f8:	a49f3eb2 	.word	0xa49f3eb2
    15fc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1600:	b918      	cbnz	r0, 160a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1602:	f001 ff8f 	bl	3524 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1606:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    160a:	8ae0      	ldrh	r0, [r4, #22]
    160c:	b110      	cbz	r0, 1614 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    160e:	f002 f8c3 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1612:	b188      	cbz	r0, 1638 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1614:	f7ff fc9e 	bl	f54 <CONFIG_BT_RX_STACK_SIZE+0x6bc>
    1618:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    161c:	68a1      	ldr	r1, [r4, #8]
    161e:	f1b1 3fff 	cmp.w	r1, #4294967295
    1622:	d005      	beq.n	1630 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1624:	2301      	movs	r3, #1
    1626:	2203      	movs	r2, #3
    1628:	2005      	movs	r0, #5
    162a:	f001 fb83 	bl	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    162e:	b140      	cbz	r0, 1642 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1630:	7e60      	ldrb	r0, [r4, #25]
    1632:	2801      	cmp	r0, #1
    1634:	d110      	bne.n	1658 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1636:	e009      	b.n	164c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1638:	f640 015d 	movw	r1, #2141	; 0x85d
    163c:	2070      	movs	r0, #112	; 0x70
    163e:	f002 f90f 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1642:	f640 0162 	movw	r1, #2146	; 0x862
    1646:	2070      	movs	r0, #112	; 0x70
    1648:	f002 f90a 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    164c:	6920      	ldr	r0, [r4, #16]
    164e:	1e40      	subs	r0, r0, #1
    1650:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1654:	f001 fa88 	bl	2b68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1658:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    165c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1660:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1664:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    166c:	2101      	movs	r1, #1
    166e:	4710      	bx	r2
    1670:	f7ff fc70 	bl	f54 <CONFIG_BT_RX_STACK_SIZE+0x6bc>
    1674:	f04f 30ff 	mov.w	r0, #4294967295
    1678:	60a0      	str	r0, [r4, #8]
    167a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    167e:	b158      	cbz	r0, 1698 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb8>
    1680:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1684:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1688:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    168c:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1694:	2106      	movs	r1, #6
    1696:	4710      	bx	r2
    1698:	f640 0172 	movw	r1, #2162	; 0x872
    169c:	2070      	movs	r0, #112	; 0x70
    169e:	f002 f8df 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16a2:	f7ff fc57 	bl	f54 <CONFIG_BT_RX_STACK_SIZE+0x6bc>
    16a6:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    16aa:	f002 f875 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16ae:	b118      	cbz	r0, 16b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    16b0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    16b4:	b128      	cbz	r0, 16c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe2>
    16b6:	e008      	b.n	16ca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xea>
    16b8:	f640 0181 	movw	r1, #2177	; 0x881
    16bc:	2070      	movs	r0, #112	; 0x70
    16be:	f002 f8cf 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16c2:	f001 ff2f 	bl	3524 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16c6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    16ca:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    16ce:	b158      	cbz	r0, 16e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x108>
    16d0:	4926      	ldr	r1, [pc, #152]	; (176c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x18c>)
    16d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16d6:	6008      	str	r0, [r1, #0]
    16d8:	2005      	movs	r0, #5
    16da:	f001 fbf3 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16de:	f001 ff6d 	bl	35bc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    16e2:	2000      	movs	r0, #0
    16e4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    16e8:	e000      	b.n	16ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    16ea:	e035      	b.n	1758 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x178>
    16ec:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    16f0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    16f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    16f8:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    16fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1700:	2100      	movs	r1, #0
    1702:	4710      	bx	r2
    1704:	f001 fc90 	bl	3028 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1708:	8ae0      	ldrh	r0, [r4, #22]
    170a:	b110      	cbz	r0, 1712 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x132>
    170c:	f002 f844 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1710:	b128      	cbz	r0, 171e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13e>
    1712:	4817      	ldr	r0, [pc, #92]	; (1770 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x190>)
    1714:	7800      	ldrb	r0, [r0, #0]
    1716:	2803      	cmp	r0, #3
    1718:	bf08      	it	eq
    171a:	7765      	strbeq	r5, [r4, #29]
    171c:	bd70      	pop	{r4, r5, r6, pc}
    171e:	f640 018b 	movw	r1, #2187	; 0x88b
    1722:	2070      	movs	r0, #112	; 0x70
    1724:	f002 f89c 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1728:	4812      	ldr	r0, [pc, #72]	; (1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    172a:	6005      	str	r5, [r0, #0]
    172c:	6888      	ldr	r0, [r1, #8]
    172e:	6005      	str	r5, [r0, #0]
    1730:	bd70      	pop	{r4, r5, r6, pc}
    1732:	7808      	ldrb	r0, [r1, #0]
    1734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1738:	f002 b962 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    173c:	f7ff fc0a 	bl	f54 <CONFIG_BT_RX_STACK_SIZE+0x6bc>
    1740:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1744:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1748:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    174c:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1754:	2105      	movs	r1, #5
    1756:	4710      	bx	r2
    1758:	f640 019d 	movw	r1, #2205	; 0x89d
    175c:	2070      	movs	r0, #112	; 0x70
    175e:	f002 f87f 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1762:	0000      	.short	0x0000
    1764:	20000a44 	.word	0x20000a44
    1768:	2000000c 	.word	0x2000000c
    176c:	4001f508 	.word	0x4001f508
    1770:	2000000e 	.word	0x2000000e
    1774:	40000508 	.word	0x40000508

00001778 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1778:	4803      	ldr	r0, [pc, #12]	; (1788 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    177a:	b510      	push	{r4, lr}
    177c:	7840      	ldrb	r0, [r0, #1]
    177e:	f00a fb84 	bl	be8a <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1782:	b280      	uxth	r0, r0
    1784:	bd10      	pop	{r4, pc}
    1786:	0000      	.short	0x0000
    1788:	2000000e 	.word	0x2000000e

0000178c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    178c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1790:	48fe      	ldr	r0, [pc, #1016]	; (1b8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>)
    1792:	b093      	sub	sp, #76	; 0x4c
    1794:	4688      	mov	r8, r1
    1796:	6800      	ldr	r0, [r0, #0]
    1798:	4dfd      	ldr	r5, [pc, #1012]	; (1b90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    179a:	05c0      	lsls	r0, r0, #23
    179c:	0dc0      	lsrs	r0, r0, #23
    179e:	d00e      	beq.n	17be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    17a0:	3810      	subs	r0, #16
    17a2:	b240      	sxtb	r0, r0
    17a4:	2800      	cmp	r0, #0
    17a6:	bfb8      	it	lt
    17a8:	f000 000f 	andlt.w	r0, r0, #15
    17ac:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    17b0:	bfac      	ite	ge
    17b2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    17b6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    17ba:	0940      	lsrs	r0, r0, #5
    17bc:	d00d      	beq.n	17da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    17be:	f898 0000 	ldrb.w	r0, [r8]
    17c2:	f04f 0b00 	mov.w	fp, #0
    17c6:	2800      	cmp	r0, #0
    17c8:	bf18      	it	ne
    17ca:	2801      	cmpne	r0, #1
    17cc:	d018      	beq.n	1800 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17ce:	f240 714a 	movw	r1, #1866	; 0x74a
    17d2:	f04f 0070 	mov.w	r0, #112	; 0x70
    17d6:	f002 f843 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17da:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    17de:	f04f 0b01 	mov.w	fp, #1
    17e2:	2820      	cmp	r0, #32
    17e4:	d007      	beq.n	17f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    17e6:	f898 0000 	ldrb.w	r0, [r8]
    17ea:	b148      	cbz	r0, 1800 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17ec:	f240 7146 	movw	r1, #1862	; 0x746
    17f0:	2070      	movs	r0, #112	; 0x70
    17f2:	f002 f835 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f6:	f240 7143 	movw	r1, #1859	; 0x743
    17fa:	2070      	movs	r0, #112	; 0x70
    17fc:	f002 f830 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1800:	4ce4      	ldr	r4, [pc, #912]	; (1b94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    1802:	b124      	cbz	r4, 180e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1804:	2100      	movs	r1, #0
    1806:	f240 704d 	movw	r0, #1869	; 0x74d
    180a:	f3af 8000 	nop.w
    180e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    1810:	49e1      	ldr	r1, [pc, #900]	; (1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    1812:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1816:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    181a:	f04f 0901 	mov.w	r9, #1
    181e:	9001      	str	r0, [sp, #4]
    1820:	b124      	cbz	r4, 182c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    1822:	2100      	movs	r1, #0
    1824:	f240 7055 	movw	r0, #1877	; 0x755
    1828:	f3af 8000 	nop.w
    182c:	f1b9 0f00 	cmp.w	r9, #0
    1830:	d00a      	beq.n	1848 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    1832:	bf00      	nop
    1834:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1838:	f04f 0a00 	mov.w	sl, #0
    183c:	f885 a02b 	strb.w	sl, [r5, #43]	; 0x2b
    1840:	f1bb 0f00 	cmp.w	fp, #0
    1844:	d007      	beq.n	1856 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    1846:	e02e      	b.n	18a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    1848:	48d4      	ldr	r0, [pc, #848]	; (1b9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    184a:	2800      	cmp	r0, #0
    184c:	bf18      	it	ne
    184e:	f3af 8000 	nopne.w
    1852:	b662      	cpsie	i
    1854:	e7ee      	b.n	1834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    1856:	4637      	mov	r7, r6
    1858:	2001      	movs	r0, #1
    185a:	ea20 0607 	bic.w	r6, r0, r7
    185e:	48d0      	ldr	r0, [pc, #832]	; (1ba0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    1860:	2240      	movs	r2, #64	; 0x40
    1862:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1866:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    186a:	f00a fc7c 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    186e:	b124      	cbz	r4, 187a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    1870:	2100      	movs	r1, #0
    1872:	f240 50b5 	movw	r0, #1461	; 0x5b5
    1876:	f3af 8000 	nop.w
    187a:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    187e:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1882:	6a09      	ldr	r1, [r1, #32]
    1884:	6201      	str	r1, [r0, #32]
    1886:	b124      	cbz	r4, 1892 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    1888:	2100      	movs	r1, #0
    188a:	f240 50b9 	movw	r0, #1465	; 0x5b9
    188e:	f3af 8000 	nop.w
    1892:	b124      	cbz	r4, 189e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    1894:	2100      	movs	r1, #0
    1896:	f240 705f 	movw	r0, #1887	; 0x75f
    189a:	f3af 8000 	nop.w
    189e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    18a2:	2800      	cmp	r0, #0
    18a4:	d1bc      	bne.n	1820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    18a6:	b124      	cbz	r4, 18b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    18a8:	2100      	movs	r1, #0
    18aa:	f240 7069 	movw	r0, #1897	; 0x769
    18ae:	f3af 8000 	nop.w
    18b2:	f001 f8b9 	bl	2a28 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    18b6:	4607      	mov	r7, r0
    18b8:	f898 0000 	ldrb.w	r0, [r8]
    18bc:	f88d 0016 	strb.w	r0, [sp, #22]
    18c0:	f898 000b 	ldrb.w	r0, [r8, #11]
    18c4:	f88d 0015 	strb.w	r0, [sp, #21]
    18c8:	f898 100a 	ldrb.w	r1, [r8, #10]
    18cc:	f88d 1014 	strb.w	r1, [sp, #20]
    18d0:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    18d4:	f8ad 1012 	strh.w	r1, [sp, #18]
    18d8:	f898 2000 	ldrb.w	r2, [r8]
    18dc:	9000      	str	r0, [sp, #0]
    18de:	f8d8 3004 	ldr.w	r3, [r8, #4]
    18e2:	f10d 0908 	add.w	r9, sp, #8
    18e6:	b19a      	cbz	r2, 1910 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x184>
    18e8:	2200      	movs	r2, #0
    18ea:	4648      	mov	r0, r9
    18ec:	f7fe fe1e 	bl	52c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    18f0:	9707      	str	r7, [sp, #28]
    18f2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    18f6:	aa0f      	add	r2, sp, #60	; 0x3c
    18f8:	a90e      	add	r1, sp, #56	; 0x38
    18fa:	f001 fc19 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    18fe:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1902:	2820      	cmp	r0, #32
    1904:	d00a      	beq.n	191c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x190>
    1906:	6928      	ldr	r0, [r5, #16]
    1908:	1d40      	adds	r0, r0, #5
    190a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    190e:	e01e      	b.n	194e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c2>
    1910:	4648      	mov	r0, r9
    1912:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1916:	f7fe fe09 	bl	52c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    191a:	e04b      	b.n	19b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x228>
    191c:	9807      	ldr	r0, [sp, #28]
    191e:	3009      	adds	r0, #9
    1920:	9000      	str	r0, [sp, #0]
    1922:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1926:	b128      	cbz	r0, 1934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a8>
    1928:	f001 ff36 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    192c:	b910      	cbnz	r0, 1934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a8>
    192e:	9800      	ldr	r0, [sp, #0]
    1930:	3032      	adds	r0, #50	; 0x32
    1932:	9000      	str	r0, [sp, #0]
    1934:	489b      	ldr	r0, [pc, #620]	; (1ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    1936:	7841      	ldrb	r1, [r0, #1]
    1938:	980e      	ldr	r0, [sp, #56]	; 0x38
    193a:	4281      	cmp	r1, r0
    193c:	bf98      	it	ls
    193e:	9800      	ldrls	r0, [sp, #0]
    1940:	d903      	bls.n	194a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1be>
    1942:	1a09      	subs	r1, r1, r0
    1944:	9800      	ldr	r0, [sp, #0]
    1946:	4408      	add	r0, r1
    1948:	9000      	str	r0, [sp, #0]
    194a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    194e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1952:	1a89      	subs	r1, r1, r2
    1954:	9002      	str	r0, [sp, #8]
    1956:	4408      	add	r0, r1
    1958:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    195c:	9003      	str	r0, [sp, #12]
    195e:	4631      	mov	r1, r6
    1960:	4648      	mov	r0, r9
    1962:	f7fe fe81 	bl	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
    1966:	f898 000b 	ldrb.w	r0, [r8, #11]
    196a:	9000      	str	r0, [sp, #0]
    196c:	46b9      	mov	r9, r7
    196e:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1972:	a80e      	add	r0, sp, #56	; 0x38
    1974:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1978:	f8d8 200c 	ldr.w	r2, [r8, #12]
    197c:	f7fe fdd6 	bl	52c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    1980:	9802      	ldr	r0, [sp, #8]
    1982:	9a03      	ldr	r2, [sp, #12]
    1984:	eba0 0009 	sub.w	r0, r0, r9
    1988:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    198c:	eba2 0209 	sub.w	r2, r2, r9
    1990:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1992:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1996:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    199a:	d201      	bcs.n	19a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    199c:	4291      	cmp	r1, r2
    199e:	d209      	bcs.n	19b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x228>
    19a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    19a4:	1a89      	subs	r1, r1, r2
    19a6:	1878      	adds	r0, r7, r1
    19a8:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    19ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19b0:	e9cd 2002 	strd	r2, r0, [sp, #8]
    19b4:	b124      	cbz	r4, 19c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x234>
    19b6:	2100      	movs	r1, #0
    19b8:	f44f 60ee 	mov.w	r0, #1904	; 0x770
    19bc:	f3af 8000 	nop.w
    19c0:	4a77      	ldr	r2, [pc, #476]	; (1ba0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    19c2:	4639      	mov	r1, r7
    19c4:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    19c8:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    19cc:	a802      	add	r0, sp, #8
    19ce:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    19d2:	2a01      	cmp	r2, #1
    19d4:	bf18      	it	ne
    19d6:	2a02      	cmpne	r2, #2
    19d8:	d13c      	bne.n	1a54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    19da:	9a02      	ldr	r2, [sp, #8]
    19dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
    19e0:	eba2 0201 	sub.w	r2, r2, r1
    19e4:	4b70      	ldr	r3, [pc, #448]	; (1ba8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>)
    19e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    19ea:	ebac 0101 	sub.w	r1, ip, r1
    19ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19f2:	2a02      	cmp	r2, #2
    19f4:	d368      	bcc.n	1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    19f6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    19fa:	d265      	bcs.n	1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    19fc:	428b      	cmp	r3, r1
    19fe:	d363      	bcc.n	1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    1a00:	f04f 0a01 	mov.w	sl, #1
    1a04:	ab0f      	add	r3, sp, #60	; 0x3c
    1a06:	aa0e      	add	r2, sp, #56	; 0x38
    1a08:	4631      	mov	r1, r6
    1a0a:	f7fe ff77 	bl	8fc <CONFIG_BT_RX_STACK_SIZE+0x64>
    1a0e:	b3e8      	cbz	r0, 1a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    1a10:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1a14:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    1a18:	4633      	mov	r3, r6
    1a1a:	428a      	cmp	r2, r1
    1a1c:	d060      	beq.n	1ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    1a1e:	2005      	movs	r0, #5
    1a20:	f7fe fde6 	bl	5f0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    1a24:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    1a28:	7048      	strb	r0, [r1, #1]
    1a2a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    1a2e:	2820      	cmp	r0, #32
    1a30:	bf03      	ittte	eq
    1a32:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a36:	f880 9020 	strbeq.w	r9, [r0, #32]
    1a3a:	f880 a023 	strbeq.w	sl, [r0, #35]	; 0x23
    1a3e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a42:	bf18      	it	ne
    1a44:	f880 9001 	strbne.w	r9, [r0, #1]
    1a48:	4632      	mov	r2, r6
    1a4a:	4649      	mov	r1, r9
    1a4c:	f05f 0003 	movs.w	r0, #3
    1a50:	f7ff fb54 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1a54:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a58:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1a5c:	b124      	cbz	r4, 1a68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2dc>
    1a5e:	2100      	movs	r1, #0
    1a60:	f240 7077 	movw	r0, #1911	; 0x777
    1a64:	f3af 8000 	nop.w
    1a68:	4850      	ldr	r0, [pc, #320]	; (1bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    1a6a:	2800      	cmp	r0, #0
    1a6c:	bf18      	it	ne
    1a6e:	f3af 8000 	nopne.w
    1a72:	f3ef 8910 	mrs	r9, PRIMASK
    1a76:	b672      	cpsid	i
    1a78:	b124      	cbz	r4, 1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    1a7a:	2100      	movs	r1, #0
    1a7c:	f240 707d 	movw	r0, #1917	; 0x77d
    1a80:	f3af 8000 	nop.w
    1a84:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1a88:	2800      	cmp	r0, #0
    1a8a:	e000      	b.n	1a8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x302>
    1a8c:	e024      	b.n	1ad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    1a8e:	f47f aec7 	bne.w	1820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1a92:	b124      	cbz	r4, 1a9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    1a94:	2100      	movs	r1, #0
    1a96:	f240 7085 	movw	r0, #1925	; 0x785
    1a9a:	f3af 8000 	nop.w
    1a9e:	f10d 0e04 	add.w	lr, sp, #4
    1aa2:	f1ba 0f00 	cmp.w	sl, #0
    1aa6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    1aaa:	f100 0004 	add.w	r0, r0, #4
    1aae:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1ab2:	d041      	beq.n	1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ac>
    1ab4:	b124      	cbz	r4, 1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    1ab6:	2100      	movs	r1, #0
    1ab8:	f240 7092 	movw	r0, #1938	; 0x792
    1abc:	f3af 8000 	nop.w
    1ac0:	f1bb 0f00 	cmp.w	fp, #0
    1ac4:	d12b      	bne.n	1b1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1ac6:	e015      	b.n	1af4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    1ac8:	4632      	mov	r2, r6
    1aca:	4649      	mov	r1, r9
    1acc:	2004      	movs	r0, #4
    1ace:	f7ff fb15 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1ad2:	f04f 0a01 	mov.w	sl, #1
    1ad6:	e7bd      	b.n	1a54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    1ad8:	4632      	mov	r2, r6
    1ada:	4649      	mov	r1, r9
    1adc:	2004      	movs	r0, #4
    1ade:	e7b7      	b.n	1a50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1ae0:	2920      	cmp	r1, #32
    1ae2:	bf19      	ittee	ne
    1ae4:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1ae8:	7840      	ldrbne	r0, [r0, #1]
    1aea:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1aee:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1af2:	e797      	b.n	1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1af4:	b19f      	cbz	r7, 1b1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1af6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1afa:	2820      	cmp	r0, #32
    1afc:	d10f      	bne.n	1b1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1afe:	b124      	cbz	r4, 1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    1b00:	2100      	movs	r1, #0
    1b02:	f240 7097 	movw	r0, #1943	; 0x797
    1b06:	f3af 8000 	nop.w
    1b0a:	4631      	mov	r1, r6
    1b0c:	2002      	movs	r0, #2
    1b0e:	f7ff fb25 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    1b12:	b920      	cbnz	r0, 1b1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1b14:	f898 0000 	ldrb.w	r0, [r8]
    1b18:	b3b8      	cbz	r0, 1b8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fe>
    1b1a:	2801      	cmp	r0, #1
    1b1c:	d05d      	beq.n	1bda <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44e>
    1b1e:	b124      	cbz	r4, 1b2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39e>
    1b20:	2100      	movs	r1, #0
    1b22:	f240 70b4 	movw	r0, #1972	; 0x7b4
    1b26:	f3af 8000 	nop.w
    1b2a:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1b2e:	2001      	movs	r0, #1
    1b30:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b34:	f04f 0a01 	mov.w	sl, #1
    1b38:	b124      	cbz	r4, 1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    1b3a:	2100      	movs	r1, #0
    1b3c:	f240 70bd 	movw	r0, #1981	; 0x7bd
    1b40:	f3af 8000 	nop.w
    1b44:	f1b9 0f00 	cmp.w	r9, #0
    1b48:	d050      	beq.n	1bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    1b4a:	b124      	cbz	r4, 1b56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ca>
    1b4c:	2100      	movs	r1, #0
    1b4e:	f240 70c1 	movw	r0, #1985	; 0x7c1
    1b52:	f3af 8000 	nop.w
    1b56:	f1ba 0f00 	cmp.w	sl, #0
    1b5a:	d011      	beq.n	1b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1b5c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b60:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b64:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b68:	2820      	cmp	r0, #32
    1b6a:	d009      	beq.n	1b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1b6c:	b124      	cbz	r4, 1b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    1b6e:	2100      	movs	r1, #0
    1b70:	f44f 60f9 	mov.w	r0, #1992	; 0x7c8
    1b74:	f3af 8000 	nop.w
    1b78:	480d      	ldr	r0, [pc, #52]	; (1bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    1b7a:	7840      	ldrb	r0, [r0, #1]
    1b7c:	f001 ff40 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b80:	b1d4      	cbz	r4, 1bb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    1b82:	2100      	movs	r1, #0
    1b84:	f240 70cd 	movw	r0, #1997	; 0x7cd
    1b88:	e014      	b.n	1bb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    1b8a:	e019      	b.n	1bc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    1b8c:	e000ed04 	.word	0xe000ed04
    1b90:	20000d44 	.word	0x20000d44
    1b94:	00000000 	.word	0x00000000
    1b98:	20000a44 	.word	0x20000a44
    1b9c:	00000000 	.word	0x00000000
    1ba0:	20000cc4 	.word	0x20000cc4
    1ba4:	2000000e 	.word	0x2000000e
    1ba8:	003fffff 	.word	0x003fffff
    1bac:	00000000 	.word	0x00000000
    1bb0:	2000000c 	.word	0x2000000c
    1bb4:	f3af 8000 	nop.w
    1bb8:	b015      	add	sp, #84	; 0x54
    1bba:	4650      	mov	r0, sl
    1bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bc0:	b124      	cbz	r4, 1bcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    1bc2:	2100      	movs	r1, #0
    1bc4:	f240 709f 	movw	r0, #1951	; 0x79f
    1bc8:	f3af 8000 	nop.w
    1bcc:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1bd0:	2004      	movs	r0, #4
    1bd2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1bd4:	f7ff fa92 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1bd8:	e7ac      	b.n	1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    1bda:	2c00      	cmp	r4, #0
    1bdc:	f43f ae20 	beq.w	1820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1be0:	2100      	movs	r1, #0
    1be2:	f240 70aa 	movw	r0, #1962	; 0x7aa
    1be6:	f3af 8000 	nop.w
    1bea:	e619      	b.n	1820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1bec:	4803      	ldr	r0, [pc, #12]	; (1bfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x470>)
    1bee:	2800      	cmp	r0, #0
    1bf0:	bf18      	it	ne
    1bf2:	f3af 8000 	nopne.w
    1bf6:	b662      	cpsie	i
    1bf8:	e7a7      	b.n	1b4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3be>
    1bfa:	0000      	.short	0x0000
    1bfc:	00000000 	.word	0x00000000

00001c00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c04:	4605      	mov	r5, r0
    1c06:	48e4      	ldr	r0, [pc, #912]	; (1f98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>)
    1c08:	b08d      	sub	sp, #52	; 0x34
    1c0a:	6800      	ldr	r0, [r0, #0]
    1c0c:	05c0      	lsls	r0, r0, #23
    1c0e:	0dc0      	lsrs	r0, r0, #23
    1c10:	d011      	beq.n	1c36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    1c12:	3810      	subs	r0, #16
    1c14:	b240      	sxtb	r0, r0
    1c16:	2800      	cmp	r0, #0
    1c18:	bfb8      	it	lt
    1c1a:	f000 000f 	andlt.w	r0, r0, #15
    1c1e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c22:	bfac      	ite	ge
    1c24:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c28:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1c2c:	0940      	lsrs	r0, r0, #5
    1c2e:	bf08      	it	eq
    1c30:	f04f 0b01 	moveq.w	fp, #1
    1c34:	d001      	beq.n	1c3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    1c36:	f04f 0b00 	mov.w	fp, #0
    1c3a:	7828      	ldrb	r0, [r5, #0]
    1c3c:	2800      	cmp	r0, #0
    1c3e:	f04f 0000 	mov.w	r0, #0
    1c42:	bf1c      	itt	ne
    1c44:	b00d      	addne	sp, #52	; 0x34
    1c46:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c4a:	f8df 8350 	ldr.w	r8, [pc, #848]	; 1f9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x250>
    1c4e:	4ed4      	ldr	r6, [pc, #848]	; (1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>)
    1c50:	f04f 0900 	mov.w	r9, #0
    1c54:	f8cd 0018 	str.w	r0, [sp, #24]
    1c58:	f1b8 0f00 	cmp.w	r8, #0
    1c5c:	d004      	beq.n	1c68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    1c5e:	2100      	movs	r1, #0
    1c60:	f44f 60c8 	mov.w	r0, #1600	; 0x640
    1c64:	f3af 8000 	nop.w
    1c68:	f896 702e 	ldrb.w	r7, [r6, #46]	; 0x2e
    1c6c:	f886 902b 	strb.w	r9, [r6, #43]	; 0x2b
    1c70:	f04f 0a00 	mov.w	sl, #0
    1c74:	f1b8 0f00 	cmp.w	r8, #0
    1c78:	d004      	beq.n	1c84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    1c7a:	2100      	movs	r1, #0
    1c7c:	f240 6045 	movw	r0, #1605	; 0x645
    1c80:	f3af 8000 	nop.w
    1c84:	f1bb 0f00 	cmp.w	fp, #0
    1c88:	d121      	bne.n	1cce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1c8a:	463c      	mov	r4, r7
    1c8c:	2001      	movs	r0, #1
    1c8e:	ea20 0704 	bic.w	r7, r0, r4
    1c92:	48c4      	ldr	r0, [pc, #784]	; (1fa4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>)
    1c94:	2240      	movs	r2, #64	; 0x40
    1c96:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    1c9a:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    1c9e:	f00a fa62 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ca2:	f1b8 0f00 	cmp.w	r8, #0
    1ca6:	d004      	beq.n	1cb2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    1ca8:	2100      	movs	r1, #0
    1caa:	f240 50b5 	movw	r0, #1461	; 0x5b5
    1cae:	f3af 8000 	nop.w
    1cb2:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    1cb6:	eb06 0087 	add.w	r0, r6, r7, lsl #2
    1cba:	6a09      	ldr	r1, [r1, #32]
    1cbc:	6201      	str	r1, [r0, #32]
    1cbe:	f1b8 0f00 	cmp.w	r8, #0
    1cc2:	d004      	beq.n	1cce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1cc4:	2100      	movs	r1, #0
    1cc6:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1cca:	f3af 8000 	nop.w
    1cce:	f1b8 0f00 	cmp.w	r8, #0
    1cd2:	d004      	beq.n	1cde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    1cd4:	2100      	movs	r1, #0
    1cd6:	f240 604d 	movw	r0, #1613	; 0x64d
    1cda:	f3af 8000 	nop.w
    1cde:	f000 fea3 	bl	2a28 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1ce2:	4604      	mov	r4, r0
    1ce4:	a802      	add	r0, sp, #8
    1ce6:	9001      	str	r0, [sp, #4]
    1ce8:	7828      	ldrb	r0, [r5, #0]
    1cea:	f88d 0016 	strb.w	r0, [sp, #22]
    1cee:	7ae8      	ldrb	r0, [r5, #11]
    1cf0:	f88d 0015 	strb.w	r0, [sp, #21]
    1cf4:	7aa9      	ldrb	r1, [r5, #10]
    1cf6:	f88d 1014 	strb.w	r1, [sp, #20]
    1cfa:	8929      	ldrh	r1, [r5, #8]
    1cfc:	f8ad 1012 	strh.w	r1, [sp, #18]
    1d00:	782a      	ldrb	r2, [r5, #0]
    1d02:	9000      	str	r0, [sp, #0]
    1d04:	686b      	ldr	r3, [r5, #4]
    1d06:	b19a      	cbz	r2, 1d30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x130>
    1d08:	2200      	movs	r2, #0
    1d0a:	9801      	ldr	r0, [sp, #4]
    1d0c:	f7fe fc0e 	bl	52c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    1d10:	9400      	str	r4, [sp, #0]
    1d12:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1d16:	aa08      	add	r2, sp, #32
    1d18:	a907      	add	r1, sp, #28
    1d1a:	f001 fa09 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1d1e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1d22:	2820      	cmp	r0, #32
    1d24:	d009      	beq.n	1d3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x13a>
    1d26:	6930      	ldr	r0, [r6, #16]
    1d28:	1d40      	adds	r0, r0, #5
    1d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d2e:	e01d      	b.n	1d6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d30:	68ea      	ldr	r2, [r5, #12]
    1d32:	9801      	ldr	r0, [sp, #4]
    1d34:	f7fe fbfa 	bl	52c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    1d38:	e046      	b.n	1dc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1d3a:	9800      	ldr	r0, [sp, #0]
    1d3c:	3009      	adds	r0, #9
    1d3e:	9000      	str	r0, [sp, #0]
    1d40:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1d44:	b128      	cbz	r0, 1d52 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d46:	f001 fd27 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d4a:	b910      	cbnz	r0, 1d52 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d4c:	9800      	ldr	r0, [sp, #0]
    1d4e:	3032      	adds	r0, #50	; 0x32
    1d50:	9000      	str	r0, [sp, #0]
    1d52:	4895      	ldr	r0, [pc, #596]	; (1fa8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>)
    1d54:	9907      	ldr	r1, [sp, #28]
    1d56:	7840      	ldrb	r0, [r0, #1]
    1d58:	4288      	cmp	r0, r1
    1d5a:	bf98      	it	ls
    1d5c:	9800      	ldrls	r0, [sp, #0]
    1d5e:	d903      	bls.n	1d68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1d60:	1a41      	subs	r1, r0, r1
    1d62:	9800      	ldr	r0, [sp, #0]
    1d64:	4408      	add	r0, r1
    1d66:	9000      	str	r0, [sp, #0]
    1d68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d70:	1a89      	subs	r1, r1, r2
    1d72:	9002      	str	r0, [sp, #8]
    1d74:	4408      	add	r0, r1
    1d76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d7a:	9003      	str	r0, [sp, #12]
    1d7c:	4639      	mov	r1, r7
    1d7e:	9801      	ldr	r0, [sp, #4]
    1d80:	f7fe fc72 	bl	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
    1d84:	9401      	str	r4, [sp, #4]
    1d86:	7ae8      	ldrb	r0, [r5, #11]
    1d88:	9000      	str	r0, [sp, #0]
    1d8a:	8929      	ldrh	r1, [r5, #8]
    1d8c:	a808      	add	r0, sp, #32
    1d8e:	686b      	ldr	r3, [r5, #4]
    1d90:	68ea      	ldr	r2, [r5, #12]
    1d92:	f7fe fbcb 	bl	52c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    1d96:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    1d9a:	9a03      	ldr	r2, [sp, #12]
    1d9c:	1ac0      	subs	r0, r0, r3
    1d9e:	1ad2      	subs	r2, r2, r3
    1da0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1da4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1da6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1daa:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1dae:	d201      	bcs.n	1db4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>
    1db0:	4291      	cmp	r1, r2
    1db2:	d209      	bcs.n	1dc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1db4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1db8:	1a89      	subs	r1, r1, r2
    1dba:	1860      	adds	r0, r4, r1
    1dbc:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    1dc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dc4:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1dc8:	f1b8 0f00 	cmp.w	r8, #0
    1dcc:	d004      	beq.n	1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1dce:	2100      	movs	r1, #0
    1dd0:	f240 6053 	movw	r0, #1619	; 0x653
    1dd4:	f3af 8000 	nop.w
    1dd8:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1ddc:	2820      	cmp	r0, #32
    1dde:	d014      	beq.n	1e0a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbe>
    1de0:	6930      	ldr	r0, [r6, #16]
    1de2:	9902      	ldr	r1, [sp, #8]
    1de4:	1a09      	subs	r1, r1, r0
    1de6:	0209      	lsls	r1, r1, #8
    1de8:	17ca      	asrs	r2, r1, #31
    1dea:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1dee:	1209      	asrs	r1, r1, #8
    1df0:	d50b      	bpl.n	1e0a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbe>
    1df2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1df6:	1a89      	subs	r1, r1, r2
    1df8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1dfc:	4408      	add	r0, r1
    1dfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e02:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1e06:	f04f 0a01 	mov.w	sl, #1
    1e0a:	f1b8 0f00 	cmp.w	r8, #0
    1e0e:	d009      	beq.n	1e24 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>
    1e10:	2100      	movs	r1, #0
    1e12:	f240 605d 	movw	r0, #1629	; 0x65d
    1e16:	f3af 8000 	nop.w
    1e1a:	2100      	movs	r1, #0
    1e1c:	f240 6063 	movw	r0, #1635	; 0x663
    1e20:	f3af 8000 	nop.w
    1e24:	9902      	ldr	r1, [sp, #8]
    1e26:	9a03      	ldr	r2, [sp, #12]
    1e28:	1b09      	subs	r1, r1, r4
    1e2a:	1b12      	subs	r2, r2, r4
    1e2c:	485f      	ldr	r0, [pc, #380]	; (1fac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>)
    1e2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e32:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1e36:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1e3a:	d205      	bcs.n	1e48 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1e3c:	4290      	cmp	r0, r2
    1e3e:	d303      	bcc.n	1e48 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1e40:	f1bb 0f00 	cmp.w	fp, #0
    1e44:	d10b      	bne.n	1e5e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x112>
    1e46:	e004      	b.n	1e52 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x106>
    1e48:	464f      	mov	r7, r9
    1e4a:	f1bb 0f00 	cmp.w	fp, #0
    1e4e:	d03a      	beq.n	1ec6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17a>
    1e50:	e098      	b.n	1f84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1e52:	4639      	mov	r1, r7
    1e54:	a802      	add	r0, sp, #8
    1e56:	f7fe fc07 	bl	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
    1e5a:	ea4a 0a00 	orr.w	sl, sl, r0
    1e5e:	f1ba 0f00 	cmp.w	sl, #0
    1e62:	d024      	beq.n	1eae <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x162>
    1e64:	9802      	ldr	r0, [sp, #8]
    1e66:	f00a f810 	bl	be8a <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1e6a:	4601      	mov	r1, r0
    1e6c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1e70:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1e74:	f8df c138 	ldr.w	ip, [pc, #312]	; 1fb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1e78:	4410      	add	r0, r2
    1e7a:	1cc0      	adds	r0, r0, #3
    1e7c:	180a      	adds	r2, r1, r0
    1e7e:	2400      	movs	r4, #0
    1e80:	ebbc 0101 	subs.w	r1, ip, r1
    1e84:	eb74 0109 	sbcs.w	r1, r4, r9
    1e88:	d346      	bcc.n	1f18 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1e8a:	494a      	ldr	r1, [pc, #296]	; (1fb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>)
    1e8c:	4288      	cmp	r0, r1
    1e8e:	dc5e      	bgt.n	1f4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x202>
    1e90:	4249      	negs	r1, r1
    1e92:	4288      	cmp	r0, r1
    1e94:	db63      	blt.n	1f5e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x212>
    1e96:	f10c 0001 	add.w	r0, ip, #1
    1e9a:	4282      	cmp	r2, r0
    1e9c:	bfa8      	it	ge
    1e9e:	4846      	ldrge	r0, [pc, #280]	; (1fb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>)
    1ea0:	da03      	bge.n	1eaa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15e>
    1ea2:	2a00      	cmp	r2, #0
    1ea4:	bfb8      	it	lt
    1ea6:	4845      	ldrlt	r0, [pc, #276]	; (1fbc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>)
    1ea8:	da00      	bge.n	1eac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>
    1eaa:	1812      	adds	r2, r2, r0
    1eac:	60ea      	str	r2, [r5, #12]
    1eae:	f04f 0001 	mov.w	r0, #1
    1eb2:	9006      	str	r0, [sp, #24]
    1eb4:	f1b8 0f00 	cmp.w	r8, #0
    1eb8:	d064      	beq.n	1f84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1eba:	2100      	movs	r1, #0
    1ebc:	f240 6076 	movw	r0, #1654	; 0x676
    1ec0:	f3af 8000 	nop.w
    1ec4:	e05e      	b.n	1f84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1ec6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1eca:	aa01      	add	r2, sp, #4
    1ecc:	4669      	mov	r1, sp
    1ece:	f001 f92f 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1ed2:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1ed6:	2820      	cmp	r0, #32
    1ed8:	d023      	beq.n	1f22 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d6>
    1eda:	6930      	ldr	r0, [r6, #16]
    1edc:	1d40      	adds	r0, r0, #5
    1ede:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ee2:	bf00      	nop
    1ee4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1ee8:	1a89      	subs	r1, r1, r2
    1eea:	4401      	add	r1, r0
    1eec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1ef4:	f009 ffc9 	bl	be8a <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1ef8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    1efc:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1f00:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 1fb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1f04:	4411      	add	r1, r2
    1f06:	1cca      	adds	r2, r1, #3
    1f08:	4601      	mov	r1, r0
    1f0a:	2300      	movs	r3, #0
    1f0c:	ebbc 0101 	subs.w	r1, ip, r1
    1f10:	4410      	add	r0, r2
    1f12:	eb73 0107 	sbcs.w	r1, r3, r7
    1f16:	d217      	bcs.n	1f48 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fc>
    1f18:	f240 51f1 	movw	r1, #1521	; 0x5f1
    1f1c:	2070      	movs	r0, #112	; 0x70
    1f1e:	f001 fc9f 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f22:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1f26:	3409      	adds	r4, #9
    1f28:	b120      	cbz	r0, 1f34 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e8>
    1f2a:	f001 fc35 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f2e:	2800      	cmp	r0, #0
    1f30:	bf08      	it	eq
    1f32:	3432      	addeq	r4, #50	; 0x32
    1f34:	481c      	ldr	r0, [pc, #112]	; (1fa8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>)
    1f36:	9900      	ldr	r1, [sp, #0]
    1f38:	7840      	ldrb	r0, [r0, #1]
    1f3a:	4288      	cmp	r0, r1
    1f3c:	bf84      	itt	hi
    1f3e:	1a40      	subhi	r0, r0, r1
    1f40:	4404      	addhi	r4, r0
    1f42:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    1f46:	e7cd      	b.n	1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    1f48:	491a      	ldr	r1, [pc, #104]	; (1fb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>)
    1f4a:	428a      	cmp	r2, r1
    1f4c:	dd04      	ble.n	1f58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>
    1f4e:	f240 51f2 	movw	r1, #1522	; 0x5f2
    1f52:	2070      	movs	r0, #112	; 0x70
    1f54:	f001 fc84 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f58:	4919      	ldr	r1, [pc, #100]	; (1fc0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>)
    1f5a:	428a      	cmp	r2, r1
    1f5c:	da04      	bge.n	1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    1f5e:	f240 51f3 	movw	r1, #1523	; 0x5f3
    1f62:	2070      	movs	r0, #112	; 0x70
    1f64:	f001 fc7c 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f68:	4914      	ldr	r1, [pc, #80]	; (1fbc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>)
    1f6a:	4288      	cmp	r0, r1
    1f6c:	bfa8      	it	ge
    1f6e:	4912      	ldrge	r1, [pc, #72]	; (1fb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>)
    1f70:	da03      	bge.n	1f7a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22e>
    1f72:	2800      	cmp	r0, #0
    1f74:	bfb8      	it	lt
    1f76:	4911      	ldrlt	r1, [pc, #68]	; (1fbc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>)
    1f78:	da00      	bge.n	1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>
    1f7a:	1840      	adds	r0, r0, r1
    1f7c:	60e8      	str	r0, [r5, #12]
    1f7e:	f04f 0001 	mov.w	r0, #1
    1f82:	9006      	str	r0, [sp, #24]
    1f84:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    1f88:	2800      	cmp	r0, #0
    1f8a:	f47f ae65 	bne.w	1c58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1f8e:	9806      	ldr	r0, [sp, #24]
    1f90:	b00d      	add	sp, #52	; 0x34
    1f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f96:	0000      	.short	0x0000
    1f98:	e000ed04 	.word	0xe000ed04
    1f9c:	00000000 	.word	0x00000000
    1fa0:	20000d44 	.word	0x20000d44
    1fa4:	20000cc4 	.word	0x20000cc4
    1fa8:	2000000e 	.word	0x2000000e
    1fac:	003fffff 	.word	0x003fffff
    1fb0:	1e847fff 	.word	0x1e847fff
    1fb4:	07a12000 	.word	0x07a12000
    1fb8:	e17b8000 	.word	0xe17b8000
    1fbc:	1e848000 	.word	0x1e848000
    1fc0:	f85ee000 	.word	0xf85ee000

00001fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1fc4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fc8:	4d80      	ldr	r5, [pc, #512]	; (21cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1cc>)
    1fca:	b08c      	sub	sp, #48	; 0x30
    1fcc:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1fd0:	2000      	movs	r0, #0
    1fd2:	9009      	str	r0, [sp, #36]	; 0x24
    1fd4:	2001      	movs	r0, #1
    1fd6:	4c7e      	ldr	r4, [pc, #504]	; (21d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d0>)
    1fd8:	f04f 0800 	mov.w	r8, #0
    1fdc:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1fe0:	4683      	mov	fp, r0
    1fe2:	9008      	str	r0, [sp, #32]
    1fe4:	b124      	cbz	r4, 1ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1fe6:	2100      	movs	r1, #0
    1fe8:	f240 70dc 	movw	r0, #2012	; 0x7dc
    1fec:	f3af 8000 	nop.w
    1ff0:	9808      	ldr	r0, [sp, #32]
    1ff2:	b390      	cbz	r0, 205a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5a>
    1ff4:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1ff8:	b124      	cbz	r4, 2004 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4>
    1ffa:	2100      	movs	r1, #0
    1ffc:	f240 70e1 	movw	r0, #2017	; 0x7e1
    2000:	f3af 8000 	nop.w
    2004:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    2008:	2240      	movs	r2, #64	; 0x40
    200a:	ea2b 0609 	bic.w	r6, fp, r9
    200e:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2012:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    2016:	4682      	mov	sl, r0
    2018:	f00a f8a5 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    201c:	b124      	cbz	r4, 2028 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x28>
    201e:	2100      	movs	r1, #0
    2020:	f240 50b5 	movw	r0, #1461	; 0x5b5
    2024:	f3af 8000 	nop.w
    2028:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    202c:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    2030:	9000      	str	r0, [sp, #0]
    2032:	6a09      	ldr	r1, [r1, #32]
    2034:	6201      	str	r1, [r0, #32]
    2036:	b124      	cbz	r4, 2042 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x42>
    2038:	2100      	movs	r1, #0
    203a:	f240 50b9 	movw	r0, #1465	; 0x5b9
    203e:	f3af 8000 	nop.w
    2042:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2046:	b180      	cbz	r0, 206a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6a>
    2048:	2c00      	cmp	r4, #0
    204a:	bf1c      	itt	ne
    204c:	2100      	movne	r1, #0
    204e:	f240 70e7 	movwne	r0, #2023	; 0x7e7
    2052:	d0c7      	beq.n	1fe4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2054:	f3af 8000 	nop.w
    2058:	e7c4      	b.n	1fe4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    205a:	e7ff      	b.n	205c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c>
    205c:	485d      	ldr	r0, [pc, #372]	; (21d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d4>)
    205e:	2800      	cmp	r0, #0
    2060:	bf18      	it	ne
    2062:	f3af 8000 	nopne.w
    2066:	b662      	cpsie	i
    2068:	e7c4      	b.n	1ff4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    206a:	b124      	cbz	r4, 2076 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x76>
    206c:	2100      	movs	r1, #0
    206e:	f240 70eb 	movw	r0, #2027	; 0x7eb
    2072:	f3af 8000 	nop.w
    2076:	980c      	ldr	r0, [sp, #48]	; 0x30
    2078:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    207c:	2803      	cmp	r0, #3
    207e:	d178      	bne.n	2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    2080:	f8dd 9000 	ldr.w	r9, [sp]
    2084:	f8cd 9018 	str.w	r9, [sp, #24]
    2088:	990c      	ldr	r1, [sp, #48]	; 0x30
    208a:	f899 0020 	ldrb.w	r0, [r9, #32]
    208e:	4288      	cmp	r0, r1
    2090:	bf14      	ite	ne
    2092:	f04f 0a00 	movne.w	sl, #0
    2096:	f04f 0a01 	moveq.w	sl, #1
    209a:	f109 0c20 	add.w	ip, r9, #32
    209e:	4686      	mov	lr, r0
    20a0:	2220      	movs	r2, #32
    20a2:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    20a6:	e003      	b.n	20b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb0>
    20a8:	4602      	mov	r2, r0
    20aa:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    20ae:	7840      	ldrb	r0, [r0, #1]
    20b0:	4288      	cmp	r0, r1
    20b2:	d002      	beq.n	20ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xba>
    20b4:	2820      	cmp	r0, #32
    20b6:	d00a      	beq.n	20ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xce>
    20b8:	e7f6      	b.n	20a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa8>
    20ba:	2820      	cmp	r0, #32
    20bc:	d007      	beq.n	20ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xce>
    20be:	4586      	cmp	lr, r0
    20c0:	d107      	bne.n	20d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd2>
    20c2:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    20c6:	7840      	ldrb	r0, [r0, #1]
    20c8:	f88c 0000 	strb.w	r0, [ip]
    20cc:	e007      	b.n	20de <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xde>
    20ce:	4640      	mov	r0, r8
    20d0:	e00c      	b.n	20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
    20d2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    20d6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    20da:	7840      	ldrb	r0, [r0, #1]
    20dc:	7048      	strb	r0, [r1, #1]
    20de:	b124      	cbz	r4, 20ea <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xea>
    20e0:	2100      	movs	r1, #0
    20e2:	f240 503a 	movw	r0, #1338	; 0x53a
    20e6:	f3af 8000 	nop.w
    20ea:	4658      	mov	r0, fp
    20ec:	ea10 0f0a 	tst.w	r0, sl
    20f0:	bf18      	it	ne
    20f2:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    20f6:	b3e0      	cbz	r0, 2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    20f8:	b124      	cbz	r4, 2104 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x104>
    20fa:	2100      	movs	r1, #0
    20fc:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
    2100:	f3af 8000 	nop.w
    2104:	4632      	mov	r2, r6
    2106:	2001      	movs	r0, #1
    2108:	990c      	ldr	r1, [sp, #48]	; 0x30
    210a:	f7fe fff7 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    210e:	9806      	ldr	r0, [sp, #24]
    2110:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    2114:	b124      	cbz	r4, 2120 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x120>
    2116:	2100      	movs	r1, #0
    2118:	f240 70fb 	movw	r0, #2043	; 0x7fb
    211c:	f3af 8000 	nop.w
    2120:	482d      	ldr	r0, [pc, #180]	; (21d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d8>)
    2122:	2800      	cmp	r0, #0
    2124:	bf18      	it	ne
    2126:	f3af 8000 	nopne.w
    212a:	f3ef 8010 	mrs	r0, PRIMASK
    212e:	b672      	cpsid	i
    2130:	9008      	str	r0, [sp, #32]
    2132:	b124      	cbz	r4, 213e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13e>
    2134:	2100      	movs	r1, #0
    2136:	f44f 6000 	mov.w	r0, #2048	; 0x800
    213a:	f3af 8000 	nop.w
    213e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2142:	b138      	cbz	r0, 2154 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x154>
    2144:	2c00      	cmp	r4, #0
    2146:	bf1c      	itt	ne
    2148:	2100      	movne	r1, #0
    214a:	f640 0004 	movwne	r0, #2052	; 0x804
    214e:	f43f af49 	beq.w	1fe4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2152:	e77f      	b.n	2054 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x54>
    2154:	f1b9 0f00 	cmp.w	r9, #0
    2158:	d008      	beq.n	216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>
    215a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    215e:	2820      	cmp	r0, #32
    2160:	d104      	bne.n	216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>
    2162:	4631      	mov	r1, r6
    2164:	2002      	movs	r0, #2
    2166:	f7fe fff9 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    216a:	b1f8      	cbz	r0, 21ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ac>
    216c:	b134      	cbz	r4, 217c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x17c>
    216e:	2100      	movs	r1, #0
    2170:	e000      	b.n	2174 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x174>
    2172:	e009      	b.n	2188 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x188>
    2174:	f640 0018 	movw	r0, #2072	; 0x818
    2178:	f3af 8000 	nop.w
    217c:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    2180:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    2184:	2001      	movs	r0, #1
    2186:	9009      	str	r0, [sp, #36]	; 0x24
    2188:	b124      	cbz	r4, 2194 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x194>
    218a:	2100      	movs	r1, #0
    218c:	f640 0021 	movw	r0, #2081	; 0x821
    2190:	f3af 8000 	nop.w
    2194:	9808      	ldr	r0, [sp, #32]
    2196:	b188      	cbz	r0, 21bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1bc>
    2198:	b124      	cbz	r4, 21a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a4>
    219a:	2100      	movs	r1, #0
    219c:	f640 0025 	movw	r0, #2085	; 0x825
    21a0:	f3af 8000 	nop.w
    21a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    21a6:	b00d      	add	sp, #52	; 0x34
    21a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21ac:	2c00      	cmp	r4, #0
    21ae:	d0f1      	beq.n	2194 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x194>
    21b0:	2100      	movs	r1, #0
    21b2:	f640 0013 	movw	r0, #2067	; 0x813
    21b6:	f3af 8000 	nop.w
    21ba:	e7e6      	b.n	218a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x18a>
    21bc:	4805      	ldr	r0, [pc, #20]	; (21d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d4>)
    21be:	2800      	cmp	r0, #0
    21c0:	bf18      	it	ne
    21c2:	f3af 8000 	nopne.w
    21c6:	b662      	cpsie	i
    21c8:	e7e6      	b.n	2198 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x198>
    21ca:	0000      	.short	0x0000
    21cc:	20000d44 	.word	0x20000d44
	...

000021dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    21dc:	b510      	push	{r4, lr}
    21de:	2820      	cmp	r0, #32
    21e0:	d211      	bcs.n	2206 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21e2:	490e      	ldr	r1, [pc, #56]	; (221c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    21e4:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21e8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    21ec:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    21f0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    21f4:	b13b      	cbz	r3, 2206 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21f6:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21fa:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    21fe:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2202:	2a01      	cmp	r2, #1
    2204:	d001      	beq.n	220a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2206:	2000      	movs	r0, #0
    2208:	bd10      	pop	{r4, pc}
    220a:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    220e:	4601      	mov	r1, r0
    2210:	2000      	movs	r0, #0
    2212:	f7fe ff73 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    2216:	2001      	movs	r0, #1
    2218:	bd10      	pop	{r4, pc}
    221a:	0000      	.short	0x0000
    221c:	20000d44 	.word	0x20000d44

00002220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2220:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2224:	4e7e      	ldr	r6, [pc, #504]	; (2420 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2226:	4680      	mov	r8, r0
    2228:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    222c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2230:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2234:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2238:	2800      	cmp	r0, #0
    223a:	d065      	beq.n	2308 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    223c:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2240:	4d78      	ldr	r5, [pc, #480]	; (2424 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2242:	b125      	cbz	r5, 224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2244:	2100      	movs	r1, #0
    2246:	f640 30b3 	movw	r0, #2995	; 0xbb3
    224a:	f3af 8000 	nop.w
    224e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2252:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2256:	2801      	cmp	r0, #1
    2258:	d018      	beq.n	228c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    225a:	b2c0      	uxtb	r0, r0
    225c:	2804      	cmp	r0, #4
    225e:	bf1c      	itt	ne
    2260:	2805      	cmpne	r0, #5
    2262:	2806      	cmpne	r0, #6
    2264:	d055      	beq.n	2312 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2266:	b12d      	cbz	r5, 2274 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2268:	f04f 0100 	mov.w	r1, #0
    226c:	f640 30bf 	movw	r0, #3007	; 0xbbf
    2270:	f3af 8000 	nop.w
    2274:	f001 fc1a 	bl	3aac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2278:	b125      	cbz	r5, 2284 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    227a:	2100      	movs	r1, #0
    227c:	f640 30c3 	movw	r0, #3011	; 0xbc3
    2280:	f3af 8000 	nop.w
    2284:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2288:	2801      	cmp	r0, #1
    228a:	d1e6      	bne.n	225a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    228c:	2401      	movs	r4, #1
    228e:	b125      	cbz	r5, 229a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2290:	2100      	movs	r1, #0
    2292:	f640 30ca 	movw	r0, #3018	; 0xbca
    2296:	f3af 8000 	nop.w
    229a:	b3a4      	cbz	r4, 2306 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    229c:	2000      	movs	r0, #0
    229e:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    22a2:	b125      	cbz	r5, 22ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    22a4:	2100      	movs	r1, #0
    22a6:	f640 30cf 	movw	r0, #3023	; 0xbcf
    22aa:	f3af 8000 	nop.w
    22ae:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    22b2:	2001      	movs	r0, #1
    22b4:	ea20 090b 	bic.w	r9, r0, fp
    22b8:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    22bc:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    22c0:	2240      	movs	r2, #64	; 0x40
    22c2:	f009 ff50 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    22c6:	b125      	cbz	r5, 22d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    22c8:	2100      	movs	r1, #0
    22ca:	f240 50b5 	movw	r0, #1461	; 0x5b5
    22ce:	f3af 8000 	nop.w
    22d2:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    22d6:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    22da:	6a00      	ldr	r0, [r0, #32]
    22dc:	f8ca 0020 	str.w	r0, [sl, #32]
    22e0:	b125      	cbz	r5, 22ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    22e2:	2100      	movs	r1, #0
    22e4:	f240 50b9 	movw	r0, #1465	; 0x5b9
    22e8:	f3af 8000 	nop.w
    22ec:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22f0:	b1e0      	cbz	r0, 232c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    22f2:	2d00      	cmp	r5, #0
    22f4:	bf1c      	itt	ne
    22f6:	2100      	movne	r1, #0
    22f8:	f640 30d5 	movwne	r0, #3029	; 0xbd5
    22fc:	d0c7      	beq.n	228e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22fe:	bf00      	nop
    2300:	f3af 8000 	nop.w
    2304:	e7c3      	b.n	228e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2306:	e00a      	b.n	231e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2308:	f640 31aa 	movw	r1, #2986	; 0xbaa
    230c:	2070      	movs	r0, #112	; 0x70
    230e:	f001 faa7 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2312:	464a      	mov	r2, r9
    2314:	4641      	mov	r1, r8
    2316:	2001      	movs	r0, #1
    2318:	f7fe fef0 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    231c:	e7ac      	b.n	2278 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    231e:	4842      	ldr	r0, [pc, #264]	; (2428 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2320:	2800      	cmp	r0, #0
    2322:	bf18      	it	ne
    2324:	f3af 8000 	nopne.w
    2328:	b662      	cpsie	i
    232a:	e7b7      	b.n	229c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    232c:	b125      	cbz	r5, 2338 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    232e:	2100      	movs	r1, #0
    2330:	f640 30d9 	movw	r0, #3033	; 0xbd9
    2334:	f3af 8000 	nop.w
    2338:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    233c:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2340:	4640      	mov	r0, r8
    2342:	461c      	mov	r4, r3
    2344:	f04f 0b20 	mov.w	fp, #32
    2348:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    234c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2350:	e004      	b.n	235c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2352:	46a3      	mov	fp, r4
    2354:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2358:	f89c 4001 	ldrb.w	r4, [ip, #1]
    235c:	4284      	cmp	r4, r0
    235e:	d002      	beq.n	2366 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2360:	2c20      	cmp	r4, #32
    2362:	d02b      	beq.n	23bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2364:	e7f5      	b.n	2352 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2366:	2c20      	cmp	r4, #32
    2368:	d028      	beq.n	23bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    236a:	42a3      	cmp	r3, r4
    236c:	d104      	bne.n	2378 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    236e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2372:	7840      	ldrb	r0, [r0, #1]
    2374:	7008      	strb	r0, [r1, #0]
    2376:	e005      	b.n	2384 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    2378:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    237c:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2380:	7840      	ldrb	r0, [r0, #1]
    2382:	7048      	strb	r0, [r1, #1]
    2384:	f1ba 0f00 	cmp.w	sl, #0
    2388:	d011      	beq.n	23ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    238a:	b125      	cbz	r5, 2396 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    238c:	2100      	movs	r1, #0
    238e:	f240 5032 	movw	r0, #1330	; 0x532
    2392:	f3af 8000 	nop.w
    2396:	f89a 0000 	ldrb.w	r0, [sl]
    239a:	42a0      	cmp	r0, r4
    239c:	d107      	bne.n	23ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    239e:	b125      	cbz	r5, 23aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    23a0:	2100      	movs	r1, #0
    23a2:	f240 5035 	movw	r0, #1333	; 0x535
    23a6:	f3af 8000 	nop.w
    23aa:	f88a b000 	strb.w	fp, [sl]
    23ae:	b15d      	cbz	r5, 23c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    23b0:	2100      	movs	r1, #0
    23b2:	f240 503a 	movw	r0, #1338	; 0x53a
    23b6:	f3af 8000 	nop.w
    23ba:	e000      	b.n	23be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    23bc:	b125      	cbz	r5, 23c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    23be:	2100      	movs	r1, #0
    23c0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    23c4:	f3af 8000 	nop.w
    23c8:	4818      	ldr	r0, [pc, #96]	; (242c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    23ca:	2800      	cmp	r0, #0
    23cc:	bf18      	it	ne
    23ce:	f3af 8000 	nopne.w
    23d2:	f3ef 8410 	mrs	r4, PRIMASK
    23d6:	b672      	cpsid	i
    23d8:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    23dc:	b138      	cbz	r0, 23ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    23de:	2d00      	cmp	r5, #0
    23e0:	bf1c      	itt	ne
    23e2:	2100      	movne	r1, #0
    23e4:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    23e8:	f43f af51 	beq.w	228e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    23ec:	e788      	b.n	2300 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    23ee:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    23f2:	2001      	movs	r0, #1
    23f4:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    23f8:	b154      	cbz	r4, 2410 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    23fa:	2d00      	cmp	r5, #0
    23fc:	bf08      	it	eq
    23fe:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2402:	2100      	movs	r1, #0
    2404:	f44f 603f 	mov.w	r0, #3056	; 0xbf0
    2408:	f3af 8000 	nop.w
    240c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2410:	4805      	ldr	r0, [pc, #20]	; (2428 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2412:	2800      	cmp	r0, #0
    2414:	bf18      	it	ne
    2416:	f3af 8000 	nopne.w
    241a:	b662      	cpsie	i
    241c:	e7ed      	b.n	23fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    241e:	0000      	.short	0x0000
    2420:	20000d44 	.word	0x20000d44
	...

00002430 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2430:	b570      	push	{r4, r5, r6, lr}
    2432:	4605      	mov	r5, r0
    2434:	f001 f99e 	bl	3774 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2438:	480d      	ldr	r0, [pc, #52]	; (2470 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    243a:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    243e:	2400      	movs	r4, #0
    2440:	3880      	subs	r0, #128	; 0x80
    2442:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2446:	bf00      	nop
    2448:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    244c:	b129      	cbz	r1, 245a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    244e:	1c61      	adds	r1, r4, #1
    2450:	b2cc      	uxtb	r4, r1
    2452:	2c20      	cmp	r4, #32
    2454:	d3f8      	bcc.n	2448 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2456:	2020      	movs	r0, #32
    2458:	bd70      	pop	{r4, r5, r6, pc}
    245a:	4906      	ldr	r1, [pc, #24]	; (2474 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    245c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2460:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
    2464:	4621      	mov	r1, r4
    2466:	2001      	movs	r0, #1
    2468:	f7fe fe48 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    246c:	4620      	mov	r0, r4
    246e:	bd70      	pop	{r4, r5, r6, pc}
    2470:	20000d44 	.word	0x20000d44
    2474:	20000a44 	.word	0x20000a44

00002478 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    247c:	b083      	sub	sp, #12
    247e:	f000 fad3 	bl	2a28 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2482:	4605      	mov	r5, r0
    2484:	f000 fd86 	bl	2f94 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2488:	4c60      	ldr	r4, [pc, #384]	; (260c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    248a:	68a0      	ldr	r0, [r4, #8]
    248c:	f1b0 3fff 	cmp.w	r0, #4294967295
    2490:	bf1c      	itt	ne
    2492:	f04f 30ff 	movne.w	r0, #4294967295
    2496:	60a0      	strne	r0, [r4, #8]
    2498:	7fa0      	ldrb	r0, [r4, #30]
    249a:	f8df b174 	ldr.w	fp, [pc, #372]	; 2610 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>
    249e:	b9a8      	cbnz	r0, 24cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    24a0:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    24a4:	1a08      	subs	r0, r1, r0
    24a6:	0200      	lsls	r0, r0, #8
    24a8:	17c1      	asrs	r1, r0, #31
    24aa:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    24ae:	1200      	asrs	r0, r0, #8
    24b0:	f44f 710c 	mov.w	r1, #560	; 0x230
    24b4:	f009 fd16 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    24b8:	6921      	ldr	r1, [r4, #16]
    24ba:	4408      	add	r0, r1
    24bc:	1a28      	subs	r0, r5, r0
    24be:	0200      	lsls	r0, r0, #8
    24c0:	17c1      	asrs	r1, r0, #31
    24c2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    24c6:	1200      	asrs	r0, r0, #8
    24c8:	0fc0      	lsrs	r0, r0, #31
    24ca:	d00b      	beq.n	24e4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    24cc:	7e60      	ldrb	r0, [r4, #25]
    24ce:	b1c0      	cbz	r0, 2502 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x8a>
    24d0:	f000 fbb6 	bl	2c40 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    24d4:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    24d8:	b1c8      	cbz	r0, 250e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x96>
    24da:	f240 414e 	movw	r1, #1102	; 0x44e
    24de:	2070      	movs	r0, #112	; 0x70
    24e0:	f001 f9be 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24e4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24e8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    24f0:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
    24f4:	2108      	movs	r1, #8
    24f6:	4790      	blx	r2
    24f8:	f240 413d 	movw	r1, #1085	; 0x43d
    24fc:	2070      	movs	r0, #112	; 0x70
    24fe:	f001 f9af 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2502:	1ce8      	adds	r0, r5, #3
    2504:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2508:	f000 fa94 	bl	2a34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    250c:	e7e2      	b.n	24d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    250e:	f04f 0a01 	mov.w	sl, #1
    2512:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2516:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    251a:	2820      	cmp	r0, #32
    251c:	d024      	beq.n	2568 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf0>
    251e:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2522:	2020      	movs	r0, #32
    2524:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2528:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    252c:	2600      	movs	r6, #0
    252e:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2532:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2536:	4837      	ldr	r0, [pc, #220]	; (2614 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>)
    2538:	6026      	str	r6, [r4, #0]
    253a:	7800      	ldrb	r0, [r0, #0]
    253c:	2802      	cmp	r0, #2
    253e:	bf16      	itet	ne
    2540:	2803      	cmpne	r0, #3
    2542:	2001      	moveq	r0, #1
    2544:	2000      	movne	r0, #0
    2546:	7720      	strb	r0, [r4, #28]
    2548:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    254c:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2550:	f899 0020 	ldrb.w	r0, [r9, #32]
    2554:	2820      	cmp	r0, #32
    2556:	d030      	beq.n	25ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    2558:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    255c:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    2560:	7c81      	ldrb	r1, [r0, #18]
    2562:	2901      	cmp	r1, #1
    2564:	d005      	beq.n	2572 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2566:	e028      	b.n	25ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    2568:	f240 4151 	movw	r1, #1105	; 0x451
    256c:	2070      	movs	r0, #112	; 0x70
    256e:	f001 f977 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2572:	46ab      	mov	fp, r5
    2574:	1d05      	adds	r5, r0, #4
    2576:	89c0      	ldrh	r0, [r0, #14]
    2578:	aa01      	add	r2, sp, #4
    257a:	4669      	mov	r1, sp
    257c:	f000 fdd8 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2580:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2584:	2820      	cmp	r0, #32
    2586:	d004      	beq.n	2592 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x11a>
    2588:	6920      	ldr	r0, [r4, #16]
    258a:	1d40      	adds	r0, r0, #5
    258c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2590:	e00b      	b.n	25aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    2592:	8968      	ldrh	r0, [r5, #10]
    2594:	f10b 0b09 	add.w	fp, fp, #9
    2598:	b128      	cbz	r0, 25a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12e>
    259a:	f001 f8fd 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    259e:	2800      	cmp	r0, #0
    25a0:	bf08      	it	eq
    25a2:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    25a6:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    25aa:	e9d5 2100 	ldrd	r2, r1, [r5]
    25ae:	1a89      	subs	r1, r1, r2
    25b0:	6028      	str	r0, [r5, #0]
    25b2:	4408      	add	r0, r1
    25b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25b8:	6068      	str	r0, [r5, #4]
    25ba:	4639      	mov	r1, r7
    25bc:	2001      	movs	r0, #1
    25be:	f7fe fdcd 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    25c2:	2800      	cmp	r0, #0
    25c4:	d0f9      	beq.n	25ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    25c6:	4814      	ldr	r0, [pc, #80]	; (2618 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    25c8:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    25cc:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    25d0:	2802      	cmp	r0, #2
    25d2:	d104      	bne.n	25de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x166>
    25d4:	463a      	mov	r2, r7
    25d6:	4641      	mov	r1, r8
    25d8:	2006      	movs	r0, #6
    25da:	f7fe fd8f 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    25de:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    25e2:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    25e6:	2820      	cmp	r0, #32
    25e8:	d003      	beq.n	25f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17a>
    25ea:	480c      	ldr	r0, [pc, #48]	; (261c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>)
    25ec:	7840      	ldrb	r0, [r0, #1]
    25ee:	f001 fa07 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    25f2:	7f20      	ldrb	r0, [r4, #28]
    25f4:	2800      	cmp	r0, #0
    25f6:	bf04      	itt	eq
    25f8:	b003      	addeq	sp, #12
    25fa:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25fe:	f000 fd13 	bl	3028 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2602:	7726      	strb	r6, [r4, #28]
    2604:	7766      	strb	r6, [r4, #29]
    2606:	b003      	add	sp, #12
    2608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    260c:	20000d44 	.word	0x20000d44
    2610:	20000a44 	.word	0x20000a44
    2614:	2000000e 	.word	0x2000000e
    2618:	20000cc4 	.word	0x20000cc4
    261c:	2000000c 	.word	0x2000000c

00002620 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2620:	b530      	push	{r4, r5, lr}
    2622:	4c30      	ldr	r4, [pc, #192]	; (26e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    2624:	b083      	sub	sp, #12
    2626:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    262a:	2920      	cmp	r1, #32
    262c:	d008      	beq.n	2640 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    262e:	68a1      	ldr	r1, [r4, #8]
    2630:	f1b1 3fff 	cmp.w	r1, #4294967295
    2634:	d009      	beq.n	264a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2636:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    263a:	2070      	movs	r0, #112	; 0x70
    263c:	f001 f910 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2640:	f640 21cf 	movw	r1, #2767	; 0xacf
    2644:	2070      	movs	r0, #112	; 0x70
    2646:	f001 f90b 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    264a:	6861      	ldr	r1, [r4, #4]
    264c:	f8df c098 	ldr.w	ip, [pc, #152]	; 26e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    2650:	180b      	adds	r3, r1, r0
    2652:	2200      	movs	r2, #0
    2654:	ebbc 0101 	subs.w	r1, ip, r1
    2658:	eb72 0102 	sbcs.w	r1, r2, r2
    265c:	d204      	bcs.n	2668 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    265e:	f240 51f1 	movw	r1, #1521	; 0x5f1
    2662:	2070      	movs	r0, #112	; 0x70
    2664:	f001 f8fc 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2668:	4920      	ldr	r1, [pc, #128]	; (26ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    266a:	4288      	cmp	r0, r1
    266c:	dd04      	ble.n	2678 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    266e:	f240 51f2 	movw	r1, #1522	; 0x5f2
    2672:	2070      	movs	r0, #112	; 0x70
    2674:	f001 f8f4 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2678:	491d      	ldr	r1, [pc, #116]	; (26f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    267a:	4288      	cmp	r0, r1
    267c:	da04      	bge.n	2688 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    267e:	f240 51f3 	movw	r1, #1523	; 0x5f3
    2682:	2070      	movs	r0, #112	; 0x70
    2684:	f001 f8ec 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2688:	481a      	ldr	r0, [pc, #104]	; (26f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    268a:	4283      	cmp	r3, r0
    268c:	bfa8      	it	ge
    268e:	481a      	ldrge	r0, [pc, #104]	; (26f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2690:	da03      	bge.n	269a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    2692:	2b00      	cmp	r3, #0
    2694:	bfb8      	it	lt
    2696:	4817      	ldrlt	r0, [pc, #92]	; (26f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2698:	da00      	bge.n	269c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    269a:	181b      	adds	r3, r3, r0
    269c:	4618      	mov	r0, r3
    269e:	aa01      	add	r2, sp, #4
    26a0:	4669      	mov	r1, sp
    26a2:	f000 fd45 	bl	3130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    26a6:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    26aa:	280f      	cmp	r0, #15
    26ac:	bfcc      	ite	gt
    26ae:	2001      	movgt	r0, #1
    26b0:	2000      	movle	r0, #0
    26b2:	9900      	ldr	r1, [sp, #0]
    26b4:	4408      	add	r0, r1
    26b6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    26ba:	60a1      	str	r1, [r4, #8]
    26bc:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    26c0:	2800      	cmp	r0, #0
    26c2:	bf04      	itt	eq
    26c4:	b003      	addeq	sp, #12
    26c6:	bd30      	popeq	{r4, r5, pc}
    26c8:	2301      	movs	r3, #1
    26ca:	2203      	movs	r2, #3
    26cc:	2005      	movs	r0, #5
    26ce:	f000 fb31 	bl	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26d2:	2800      	cmp	r0, #0
    26d4:	bf1c      	itt	ne
    26d6:	b003      	addne	sp, #12
    26d8:	bd30      	popne	{r4, r5, pc}
    26da:	f640 21d8 	movw	r1, #2776	; 0xad8
    26de:	2070      	movs	r0, #112	; 0x70
    26e0:	f001 f8be 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26e4:	20000d44 	.word	0x20000d44
    26e8:	1e847fff 	.word	0x1e847fff
    26ec:	07a12000 	.word	0x07a12000
    26f0:	f85ee000 	.word	0xf85ee000
    26f4:	1e848000 	.word	0x1e848000
    26f8:	e17b8000 	.word	0xe17b8000

000026fc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    26fc:	b570      	push	{r4, r5, r6, lr}
    26fe:	4c1e      	ldr	r4, [pc, #120]	; (2778 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2700:	2120      	movs	r1, #32
    2702:	f884 1020 	strb.w	r1, [r4, #32]
    2706:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    270a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    270e:	2000      	movs	r0, #0
    2710:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2714:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2718:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    271c:	1e42      	subs	r2, r0, #1
    271e:	60a2      	str	r2, [r4, #8]
    2720:	6020      	str	r0, [r4, #0]
    2722:	77a0      	strb	r0, [r4, #30]
    2724:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2728:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    272c:	7720      	strb	r0, [r4, #28]
    272e:	7760      	strb	r0, [r4, #29]
    2730:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2734:	4911      	ldr	r1, [pc, #68]	; (277c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2736:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    273a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    273e:	7008      	strb	r0, [r1, #0]
    2740:	7048      	strb	r0, [r1, #1]
    2742:	8048      	strh	r0, [r1, #2]
    2744:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2748:	2210      	movs	r2, #16
    274a:	7088      	strb	r0, [r1, #2]
    274c:	f801 0f04 	strb.w	r0, [r1, #4]!
    2750:	1e52      	subs	r2, r2, #1
    2752:	d1fa      	bne.n	274a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2754:	4d0a      	ldr	r5, [pc, #40]	; (2780 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2756:	2601      	movs	r6, #1
    2758:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    275c:	20ff      	movs	r0, #255	; 0xff
    275e:	7028      	strb	r0, [r5, #0]
    2760:	4808      	ldr	r0, [pc, #32]	; (2784 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2762:	f001 f92f 	bl	39c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2766:	7068      	strb	r0, [r5, #1]
    2768:	f001 f98a 	bl	3a80 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    276c:	60a8      	str	r0, [r5, #8]
    276e:	f000 fca3 	bl	30b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2772:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2776:	bd70      	pop	{r4, r5, r6, pc}
    2778:	20000d44 	.word	0x20000d44
    277c:	2000000e 	.word	0x2000000e
    2780:	2000000c 	.word	0x2000000c
    2784:	00000fb5 	.word	0x00000fb5

00002788 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2788:	b570      	push	{r4, r5, r6, lr}
    278a:	4604      	mov	r4, r0
    278c:	4615      	mov	r5, r2
    278e:	4608      	mov	r0, r1
    2790:	f009 fb7b 	bl	be8a <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2794:	4a0f      	ldr	r2, [pc, #60]	; (27d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2796:	1b01      	subs	r1, r0, r4
    2798:	f102 0c01 	add.w	ip, r2, #1
    279c:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    27a0:	bf24      	itt	cs
    27a2:	1a23      	subcs	r3, r4, r0
    27a4:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    27a8:	d30b      	bcc.n	27c2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    27aa:	428a      	cmp	r2, r1
    27ac:	d203      	bcs.n	27b6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    27ae:	1b11      	subs	r1, r2, r4
    27b0:	4408      	add	r0, r1
    27b2:	1c41      	adds	r1, r0, #1
    27b4:	e005      	b.n	27c2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    27b6:	429a      	cmp	r2, r3
    27b8:	d207      	bcs.n	27ca <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    27ba:	1a10      	subs	r0, r2, r0
    27bc:	4420      	add	r0, r4
    27be:	1c40      	adds	r0, r0, #1
    27c0:	4241      	negs	r1, r0
    27c2:	f101 000f 	add.w	r0, r1, #15
    27c6:	1a28      	subs	r0, r5, r0
    27c8:	bd70      	pop	{r4, r5, r6, pc}
    27ca:	f640 21f3 	movw	r1, #2803	; 0xaf3
    27ce:	2070      	movs	r0, #112	; 0x70
    27d0:	f001 f846 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27d4:	1e847fff 	.word	0x1e847fff

000027d8 <MPSL_IRQ_RTC0_Handler>:
    27d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27dc:	4c38      	ldr	r4, [pc, #224]	; (28c0 <MPSL_IRQ_RTC0_Handler+0xe8>)
    27de:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27e2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 28c4 <MPSL_IRQ_RTC0_Handler+0xec>
    27e6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27ea:	f44f 6600 	mov.w	r6, #2048	; 0x800
    27ee:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27f2:	f04f 0500 	mov.w	r5, #0
    27f6:	bf1c      	itt	ne
    27f8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27fc:	2800      	cmpne	r0, #0
    27fe:	d017      	beq.n	2830 <MPSL_IRQ_RTC0_Handler+0x58>
    2800:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2804:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2808:	482f      	ldr	r0, [pc, #188]	; (28c8 <MPSL_IRQ_RTC0_Handler+0xf0>)
    280a:	6800      	ldr	r0, [r0, #0]
    280c:	f8d8 1000 	ldr.w	r1, [r8]
    2810:	eba0 0001 	sub.w	r0, r0, r1
    2814:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2818:	2802      	cmp	r0, #2
    281a:	d302      	bcc.n	2822 <MPSL_IRQ_RTC0_Handler+0x4a>
    281c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2820:	d306      	bcc.n	2830 <MPSL_IRQ_RTC0_Handler+0x58>
    2822:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2826:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    282a:	2004      	movs	r0, #4
    282c:	f7fe fed8 	bl	15e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2830:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2834:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2838:	bf1c      	itt	ne
    283a:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    283e:	2800      	cmpne	r0, #0
    2840:	d017      	beq.n	2872 <MPSL_IRQ_RTC0_Handler+0x9a>
    2842:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2846:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    284a:	4820      	ldr	r0, [pc, #128]	; (28cc <MPSL_IRQ_RTC0_Handler+0xf4>)
    284c:	6800      	ldr	r0, [r0, #0]
    284e:	f8d8 1000 	ldr.w	r1, [r8]
    2852:	eba0 0001 	sub.w	r0, r0, r1
    2856:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    285a:	2802      	cmp	r0, #2
    285c:	d302      	bcc.n	2864 <MPSL_IRQ_RTC0_Handler+0x8c>
    285e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2862:	d306      	bcc.n	2872 <MPSL_IRQ_RTC0_Handler+0x9a>
    2864:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2868:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    286c:	2005      	movs	r0, #5
    286e:	f7fe feb7 	bl	15e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2872:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2876:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    287a:	bf1a      	itte	ne
    287c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2880:	2800      	cmpne	r0, #0
    2882:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2886:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    288a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    288e:	4810      	ldr	r0, [pc, #64]	; (28d0 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2890:	6800      	ldr	r0, [r0, #0]
    2892:	f8d8 1000 	ldr.w	r1, [r8]
    2896:	eba0 0001 	sub.w	r0, r0, r1
    289a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    289e:	2802      	cmp	r0, #2
    28a0:	d304      	bcc.n	28ac <MPSL_IRQ_RTC0_Handler+0xd4>
    28a2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28a6:	bf38      	it	cc
    28a8:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    28b0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28b8:	2006      	movs	r0, #6
    28ba:	f7fe be91 	b.w	15e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28be:	0000      	.short	0x0000
    28c0:	4000b000 	.word	0x4000b000
    28c4:	4000b504 	.word	0x4000b504
    28c8:	4000b540 	.word	0x4000b540
    28cc:	4000b544 	.word	0x4000b544
    28d0:	4000b548 	.word	0x4000b548

000028d4 <MPSL_IRQ_TIMER0_Handler>:
    28d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28d8:	4d3a      	ldr	r5, [pc, #232]	; (29c4 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    28da:	7828      	ldrb	r0, [r5, #0]
    28dc:	2804      	cmp	r0, #4
    28de:	d06c      	beq.n	29ba <MPSL_IRQ_TIMER0_Handler+0xe6>
    28e0:	1ce8      	adds	r0, r5, #3
    28e2:	2201      	movs	r2, #1
    28e4:	7801      	ldrb	r1, [r0, #0]
    28e6:	b159      	cbz	r1, 2900 <MPSL_IRQ_TIMER0_Handler+0x2c>
    28e8:	2901      	cmp	r1, #1
    28ea:	bf08      	it	eq
    28ec:	706a      	strbeq	r2, [r5, #1]
    28ee:	d002      	beq.n	28f6 <MPSL_IRQ_TIMER0_Handler+0x22>
    28f0:	7869      	ldrb	r1, [r5, #1]
    28f2:	2900      	cmp	r1, #0
    28f4:	d05c      	beq.n	29b0 <MPSL_IRQ_TIMER0_Handler+0xdc>
    28f6:	2102      	movs	r1, #2
    28f8:	7001      	strb	r1, [r0, #0]
    28fa:	7840      	ldrb	r0, [r0, #1]
    28fc:	f000 fae2 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2900:	4c31      	ldr	r4, [pc, #196]	; (29c8 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2902:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2906:	f04f 0800 	mov.w	r8, #0
    290a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    290e:	f44f 7680 	mov.w	r6, #256	; 0x100
    2912:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2916:	bf1c      	itt	ne
    2918:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    291c:	2800      	cmpne	r0, #0
    291e:	d008      	beq.n	2932 <MPSL_IRQ_TIMER0_Handler+0x5e>
    2920:	f04f 0003 	mov.w	r0, #3
    2924:	f000 face 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2928:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    292c:	2003      	movs	r0, #3
    292e:	f7fe fe57 	bl	15e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2932:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2936:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    293a:	bf1c      	itt	ne
    293c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2940:	2800      	cmpne	r0, #0
    2942:	d008      	beq.n	2956 <MPSL_IRQ_TIMER0_Handler+0x82>
    2944:	f04f 0002 	mov.w	r0, #2
    2948:	f000 fabc 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    294c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2950:	2002      	movs	r0, #2
    2952:	f7fe fe45 	bl	15e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2956:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    295a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    295e:	bf1c      	itt	ne
    2960:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2964:	2800      	cmpne	r0, #0
    2966:	d008      	beq.n	297a <MPSL_IRQ_TIMER0_Handler+0xa6>
    2968:	f04f 0001 	mov.w	r0, #1
    296c:	f000 faaa 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2970:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2974:	2001      	movs	r0, #1
    2976:	f7fe fe33 	bl	15e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    297a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    297e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2982:	bf1a      	itte	ne
    2984:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2988:	2800      	cmpne	r0, #0
    298a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    298e:	f04f 0000 	mov.w	r0, #0
    2992:	f000 fa97 	bl	2ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2996:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    299a:	2004      	movs	r0, #4
    299c:	7028      	strb	r0, [r5, #0]
    299e:	f8c5 8008 	str.w	r8, [r5, #8]
    29a2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    29a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29aa:	2000      	movs	r0, #0
    29ac:	f7fe be18 	b.w	15e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29b0:	f240 31c7 	movw	r1, #967	; 0x3c7
    29b4:	206c      	movs	r0, #108	; 0x6c
    29b6:	f000 ff53 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29be:	2007      	movs	r0, #7
    29c0:	f7fe be0e 	b.w	15e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29c4:	20000018 	.word	0x20000018
    29c8:	40008000 	.word	0x40008000
    29cc:	2201      	movs	r2, #1
    29ce:	0213      	lsls	r3, r2, #8
    29d0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    29d4:	2000      	movs	r0, #0
    29d6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    29da:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    29de:	f3bf 8f4f 	dsb	sy
    29e2:	f3bf 8f6f 	isb	sy
    29e6:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    29ea:	490c      	ldr	r1, [pc, #48]	; (2a1c <MPSL_IRQ_TIMER0_Handler+0x148>)
    29ec:	604a      	str	r2, [r1, #4]
    29ee:	1e43      	subs	r3, r0, #1
    29f0:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    29f4:	4b0a      	ldr	r3, [pc, #40]	; (2a20 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    29f6:	6018      	str	r0, [r3, #0]
    29f8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29fc:	1d1b      	adds	r3, r3, #4
    29fe:	6018      	str	r0, [r3, #0]
    2a00:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2a04:	1d1b      	adds	r3, r3, #4
    2a06:	6018      	str	r0, [r3, #0]
    2a08:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2a0c:	1d1b      	adds	r3, r3, #4
    2a0e:	6018      	str	r0, [r3, #0]
    2a10:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2a14:	610a      	str	r2, [r1, #16]
    2a16:	4903      	ldr	r1, [pc, #12]	; (2a24 <MPSL_IRQ_TIMER0_Handler+0x150>)
    2a18:	7048      	strb	r0, [r1, #1]
    2a1a:	4770      	bx	lr
    2a1c:	40008000 	.word	0x40008000
    2a20:	40008540 	.word	0x40008540
    2a24:	20000018 	.word	0x20000018

00002a28 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2a28:	4801      	ldr	r0, [pc, #4]	; (2a30 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2a2a:	6800      	ldr	r0, [r0, #0]
    2a2c:	4770      	bx	lr
    2a2e:	0000      	.short	0x0000
    2a30:	4000b504 	.word	0x4000b504

00002a34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2a34:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a38:	4e41      	ldr	r6, [pc, #260]	; (2b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2a3a:	4604      	mov	r4, r0
    2a3c:	1ef7      	subs	r7, r6, #3
    2a3e:	f896 c000 	ldrb.w	ip, [r6]
    2a42:	68f8      	ldr	r0, [r7, #12]
    2a44:	f1bc 0f01 	cmp.w	ip, #1
    2a48:	bf04      	itt	eq
    2a4a:	42a0      	cmpeq	r0, r4
    2a4c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2a50:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2a54:	4a3b      	ldr	r2, [pc, #236]	; (2b44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2a56:	6011      	str	r1, [r2, #0]
    2a58:	493b      	ldr	r1, [pc, #236]	; (2b48 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2a5a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a5e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a62:	4a3a      	ldr	r2, [pc, #232]	; (2b4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2a64:	f04f 0500 	mov.w	r5, #0
    2a68:	f1bc 0f00 	cmp.w	ip, #0
    2a6c:	d057      	beq.n	2b1e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2a6e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2a72:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a76:	6015      	str	r5, [r2, #0]
    2a78:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2a7c:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2a80:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a84:	f04f 0801 	mov.w	r8, #1
    2a88:	2a00      	cmp	r2, #0
    2a8a:	bf04      	itt	eq
    2a8c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2a90:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a98:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a9c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2aa0:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2aa4:	4a2a      	ldr	r2, [pc, #168]	; (2b50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2aa6:	f8d2 a000 	ldr.w	sl, [r2]
    2aaa:	eba4 0a0a 	sub.w	sl, r4, sl
    2aae:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2ab2:	f1bb 0f02 	cmp.w	fp, #2
    2ab6:	d33c      	bcc.n	2b32 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2ab8:	f04f 0a02 	mov.w	sl, #2
    2abc:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2ac0:	d237      	bcs.n	2b32 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2ac2:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2ac6:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2aca:	f1bc 0f00 	cmp.w	ip, #0
    2ace:	d005      	beq.n	2adc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2ad0:	6811      	ldr	r1, [r2, #0]
    2ad2:	1a41      	subs	r1, r0, r1
    2ad4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2ad8:	2902      	cmp	r1, #2
    2ada:	d3f9      	bcc.n	2ad0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2adc:	f8c7 8008 	str.w	r8, [r7, #8]
    2ae0:	703d      	strb	r5, [r7, #0]
    2ae2:	f7ff ff73 	bl	29cc <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ae6:	481b      	ldr	r0, [pc, #108]	; (2b54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2ae8:	6005      	str	r5, [r0, #0]
    2aea:	1d00      	adds	r0, r0, #4
    2aec:	f8c0 a000 	str.w	sl, [r0]
    2af0:	4919      	ldr	r1, [pc, #100]	; (2b58 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2af2:	2004      	movs	r0, #4
    2af4:	6008      	str	r0, [r1, #0]
    2af6:	4919      	ldr	r1, [pc, #100]	; (2b5c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2af8:	f8c1 800c 	str.w	r8, [r1, #12]
    2afc:	68ba      	ldr	r2, [r7, #8]
    2afe:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2b02:	0181      	lsls	r1, r0, #6
    2b04:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2b08:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2b0c:	4a14      	ldr	r2, [pc, #80]	; (2b60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2b0e:	0741      	lsls	r1, r0, #29
    2b10:	6011      	str	r1, [r2, #0]
    2b12:	60fc      	str	r4, [r7, #12]
    2b14:	7070      	strb	r0, [r6, #1]
    2b16:	f886 8000 	strb.w	r8, [r6]
    2b1a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2b1e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b22:	4b10      	ldr	r3, [pc, #64]	; (2b64 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2b24:	601d      	str	r5, [r3, #0]
    2b26:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2b2a:	6015      	str	r5, [r2, #0]
    2b2c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2b30:	e7a4      	b.n	2a7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2b32:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2b36:	f240 11eb 	movw	r1, #491	; 0x1eb
    2b3a:	206c      	movs	r0, #108	; 0x6c
    2b3c:	f000 fe90 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b40:	2000001b 	.word	0x2000001b
    2b44:	4001f508 	.word	0x4001f508
    2b48:	4000b000 	.word	0x4000b000
    2b4c:	4000b544 	.word	0x4000b544
    2b50:	4000b504 	.word	0x4000b504
    2b54:	40008504 	.word	0x40008504
    2b58:	40008510 	.word	0x40008510
    2b5c:	40008000 	.word	0x40008000
    2b60:	4001f504 	.word	0x4001f504
    2b64:	4000b540 	.word	0x4000b540

00002b68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b6c:	4c2b      	ldr	r4, [pc, #172]	; (2c1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b6e:	68e1      	ldr	r1, [r4, #12]
    2b70:	4281      	cmp	r1, r0
    2b72:	bf14      	ite	ne
    2b74:	2201      	movne	r2, #1
    2b76:	2200      	moveq	r2, #0
    2b78:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2c20 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b7c:	f89c 7000 	ldrb.w	r7, [ip]
    2b80:	2f02      	cmp	r7, #2
    2b82:	d002      	beq.n	2b8a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2b84:	2a00      	cmp	r2, #0
    2b86:	d038      	beq.n	2bfa <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2b88:	e003      	b.n	2b92 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2b8a:	2a00      	cmp	r2, #0
    2b8c:	bf08      	it	eq
    2b8e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b92:	7862      	ldrb	r2, [r4, #1]
    2b94:	b382      	cbz	r2, 2bf8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2b96:	4b23      	ldr	r3, [pc, #140]	; (2c24 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b9c:	601a      	str	r2, [r3, #0]
    2b9e:	4b22      	ldr	r3, [pc, #136]	; (2c28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2ba0:	1395      	asrs	r5, r2, #14
    2ba2:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2ba6:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2baa:	2600      	movs	r6, #0
    2bac:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2bb0:	4a1e      	ldr	r2, [pc, #120]	; (2c2c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2bb2:	f8d2 8000 	ldr.w	r8, [r2]
    2bb6:	eba0 0808 	sub.w	r8, r0, r8
    2bba:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2bbe:	f1b8 0f02 	cmp.w	r8, #2
    2bc2:	d324      	bcc.n	2c0e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2bc4:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2bc8:	d221      	bcs.n	2c0e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2bca:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2bce:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2bd2:	b12f      	cbz	r7, 2be0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2bd4:	6813      	ldr	r3, [r2, #0]
    2bd6:	1acb      	subs	r3, r1, r3
    2bd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2bdc:	2b02      	cmp	r3, #2
    2bde:	d3f9      	bcc.n	2bd4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2be0:	4b13      	ldr	r3, [pc, #76]	; (2c30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2be2:	2102      	movs	r1, #2
    2be4:	074a      	lsls	r2, r1, #29
    2be6:	601a      	str	r2, [r3, #0]
    2be8:	60e0      	str	r0, [r4, #12]
    2bea:	2004      	movs	r0, #4
    2bec:	f88c 0001 	strb.w	r0, [ip, #1]
    2bf0:	f88c 1000 	strb.w	r1, [ip]
    2bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bf8:	e004      	b.n	2c04 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2bfa:	f240 11f9 	movw	r1, #505	; 0x1f9
    2bfe:	206c      	movs	r0, #108	; 0x6c
    2c00:	f000 fe2e 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c04:	f240 11fd 	movw	r1, #509	; 0x1fd
    2c08:	206c      	movs	r0, #108	; 0x6c
    2c0a:	f000 fe29 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c0e:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2c12:	f240 2109 	movw	r1, #521	; 0x209
    2c16:	206c      	movs	r0, #108	; 0x6c
    2c18:	f000 fe22 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c1c:	20000018 	.word	0x20000018
    2c20:	2000001b 	.word	0x2000001b
    2c24:	4001f508 	.word	0x4001f508
    2c28:	4000b000 	.word	0x4000b000
    2c2c:	4000b504 	.word	0x4000b504
    2c30:	4001f504 	.word	0x4001f504

00002c34 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2c34:	4801      	ldr	r0, [pc, #4]	; (2c3c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2c36:	68c0      	ldr	r0, [r0, #12]
    2c38:	4770      	bx	lr
    2c3a:	0000      	.short	0x0000
    2c3c:	20000018 	.word	0x20000018

00002c40 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c44:	4833      	ldr	r0, [pc, #204]	; (2d14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2c46:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2c4a:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2c4e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2d18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2c52:	4a32      	ldr	r2, [pc, #200]	; (2d1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2c54:	2100      	movs	r1, #0
    2c56:	f89c 3000 	ldrb.w	r3, [ip]
    2c5a:	b163      	cbz	r3, 2c76 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2c5c:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2c60:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c64:	6011      	str	r1, [r2, #0]
    2c66:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c6a:	bf00      	nop
    2c6c:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2c70:	2201      	movs	r2, #1
    2c72:	b980      	cbnz	r0, 2c96 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2c74:	e009      	b.n	2c8a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2c76:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c7a:	4c29      	ldr	r4, [pc, #164]	; (2d20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2c7c:	6021      	str	r1, [r4, #0]
    2c7e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2c82:	6011      	str	r1, [r2, #0]
    2c84:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c88:	e7f0      	b.n	2c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2c8a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2c92:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2c96:	2b02      	cmp	r3, #2
    2c98:	d004      	beq.n	2ca4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2c9a:	f240 2115 	movw	r1, #533	; 0x215
    2c9e:	206c      	movs	r0, #108	; 0x6c
    2ca0:	f000 fdde 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ca4:	4e1f      	ldr	r6, [pc, #124]	; (2d24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2ca6:	6830      	ldr	r0, [r6, #0]
    2ca8:	4c1f      	ldr	r4, [pc, #124]	; (2d28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2caa:	1cc0      	adds	r0, r0, #3
    2cac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cb0:	68e3      	ldr	r3, [r4, #12]
    2cb2:	4d1e      	ldr	r5, [pc, #120]	; (2d2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2cb4:	4298      	cmp	r0, r3
    2cb6:	d00b      	beq.n	2cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2cb8:	6837      	ldr	r7, [r6, #0]
    2cba:	1bdf      	subs	r7, r3, r7
    2cbc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2cc0:	2f04      	cmp	r7, #4
    2cc2:	d305      	bcc.n	2cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2cc4:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2cc8:	d202      	bcs.n	2cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2cca:	f7ff feb3 	bl	2a34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2cce:	e01b      	b.n	2d08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2cd0:	6830      	ldr	r0, [r6, #0]
    2cd2:	1a18      	subs	r0, r3, r0
    2cd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cd8:	2802      	cmp	r0, #2
    2cda:	d313      	bcc.n	2d04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2cdc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2ce0:	d210      	bcs.n	2d04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2ce2:	4b13      	ldr	r3, [pc, #76]	; (2d30 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2ce4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2ce8:	6018      	str	r0, [r3, #0]
    2cea:	60a2      	str	r2, [r4, #8]
    2cec:	7021      	strb	r1, [r4, #0]
    2cee:	606a      	str	r2, [r5, #4]
    2cf0:	60ea      	str	r2, [r5, #12]
    2cf2:	0040      	lsls	r0, r0, #1
    2cf4:	1f19      	subs	r1, r3, #4
    2cf6:	6008      	str	r0, [r1, #0]
    2cf8:	2004      	movs	r0, #4
    2cfa:	f88c 0001 	strb.w	r0, [ip, #1]
    2cfe:	f88c 2000 	strb.w	r2, [ip]
    2d02:	e001      	b.n	2d08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2d04:	60a2      	str	r2, [r4, #8]
    2d06:	7021      	strb	r1, [r4, #0]
    2d08:	68a0      	ldr	r0, [r4, #8]
    2d0a:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d12:	0000      	.short	0x0000
    2d14:	4000b000 	.word	0x4000b000
    2d18:	2000001b 	.word	0x2000001b
    2d1c:	4000b544 	.word	0x4000b544
    2d20:	4000b540 	.word	0x4000b540
    2d24:	4000b504 	.word	0x4000b504
    2d28:	20000018 	.word	0x20000018
    2d2c:	40008000 	.word	0x40008000
    2d30:	4001f508 	.word	0x4001f508

00002d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d38:	f8df c174 	ldr.w	ip, [pc, #372]	; 2eb0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2d3c:	2701      	movs	r7, #1
    2d3e:	f04f 0800 	mov.w	r8, #0
    2d42:	f89c 5000 	ldrb.w	r5, [ip]
    2d46:	f89c c001 	ldrb.w	ip, [ip, #1]
    2d4a:	2807      	cmp	r0, #7
    2d4c:	d27e      	bcs.n	2e4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2d4e:	e8df f000 	tbb	[pc, r0]
    2d52:	0404      	.short	0x0404
    2d54:	6a6a0404 	.word	0x6a6a0404
    2d58:	006a      	.short	0x006a
    2d5a:	4c56      	ldr	r4, [pc, #344]	; (2eb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2d5c:	68e6      	ldr	r6, [r4, #12]
    2d5e:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2d62:	bf04      	itt	eq
    2d64:	7864      	ldrbeq	r4, [r4, #1]
    2d66:	2c00      	cmpeq	r4, #0
    2d68:	d002      	beq.n	2d70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2d6a:	2d02      	cmp	r5, #2
    2d6c:	d005      	beq.n	2d7a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d6e:	e03c      	b.n	2dea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2d70:	f44f 7112 	mov.w	r1, #584	; 0x248
    2d74:	206c      	movs	r0, #108	; 0x6c
    2d76:	f000 fd73 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d7a:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2d7e:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2d82:	f1ac 0404 	sub.w	r4, ip, #4
    2d86:	0624      	lsls	r4, r4, #24
    2d88:	0da4      	lsrs	r4, r4, #22
    2d8a:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2d8e:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2d92:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2d96:	2400      	movs	r4, #0
    2d98:	2d01      	cmp	r5, #1
    2d9a:	d002      	beq.n	2da2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2d9c:	2d02      	cmp	r5, #2
    2d9e:	d011      	beq.n	2dc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2da0:	e020      	b.n	2de4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2da2:	f1bc 0f04 	cmp.w	ip, #4
    2da6:	d205      	bcs.n	2db4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2da8:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2dac:	f1ba 0f00 	cmp.w	sl, #0
    2db0:	d118      	bne.n	2de4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2db2:	e004      	b.n	2dbe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2db4:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2db8:	f1ba 0f00 	cmp.w	sl, #0
    2dbc:	d112      	bne.n	2de4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dbe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2dc2:	e00f      	b.n	2de4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dc4:	f1bc 0f04 	cmp.w	ip, #4
    2dc8:	d205      	bcs.n	2dd6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2dca:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2dce:	f1ba 0f00 	cmp.w	sl, #0
    2dd2:	d107      	bne.n	2de4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dd4:	e004      	b.n	2de0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2dd6:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2dda:	f1ba 0f00 	cmp.w	sl, #0
    2dde:	d101      	bne.n	2de4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2de0:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2de4:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2de8:	d1d5      	bne.n	2d96 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2dea:	4c33      	ldr	r4, [pc, #204]	; (2eb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2dec:	f100 0c10 	add.w	ip, r0, #16
    2df0:	fa07 fc0c 	lsl.w	ip, r7, ip
    2df4:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2df8:	0080      	lsls	r0, r0, #2
    2dfa:	4420      	add	r0, r4
    2dfc:	b152      	cbz	r2, 2e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2dfe:	6407      	str	r7, [r0, #64]	; 0x40
    2e00:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2e04:	1b8d      	subs	r5, r1, r6
    2e06:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e0a:	42aa      	cmp	r2, r5
    2e0c:	bf98      	it	ls
    2e0e:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e12:	d243      	bcs.n	2e9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e14:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e18:	2b01      	cmp	r3, #1
    2e1a:	bf08      	it	eq
    2e1c:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2e20:	2001      	movs	r0, #1
    2e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e26:	b135      	cbz	r5, 2e36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2e28:	4584      	cmp	ip, r0
    2e2a:	d104      	bne.n	2e36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2e2c:	f240 216b 	movw	r1, #619	; 0x26b
    2e30:	206c      	movs	r0, #108	; 0x6c
    2e32:	f000 fd15 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e36:	1f00      	subs	r0, r0, #4
    2e38:	b2c0      	uxtb	r0, r0
    2e3a:	2b01      	cmp	r3, #1
    2e3c:	bf0c      	ite	eq
    2e3e:	2401      	moveq	r4, #1
    2e40:	2400      	movne	r4, #0
    2e42:	2803      	cmp	r0, #3
    2e44:	d306      	bcc.n	2e54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2e46:	f240 1145 	movw	r1, #325	; 0x145
    2e4a:	e000      	b.n	2e4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2e4c:	e02b      	b.n	2ea6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2e4e:	206c      	movs	r0, #108	; 0x6c
    2e50:	f000 fd06 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e54:	f8df c064 	ldr.w	ip, [pc, #100]	; 2ebc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e58:	f100 0310 	add.w	r3, r0, #16
    2e5c:	fa07 f303 	lsl.w	r3, r7, r3
    2e60:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e64:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e68:	0080      	lsls	r0, r0, #2
    2e6a:	4460      	add	r0, ip
    2e6c:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2e70:	b14a      	cbz	r2, 2e86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2e72:	4d13      	ldr	r5, [pc, #76]	; (2ec0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2e74:	682e      	ldr	r6, [r5, #0]
    2e76:	1b8d      	subs	r5, r1, r6
    2e78:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e7c:	42aa      	cmp	r2, r5
    2e7e:	bf98      	it	ls
    2e80:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e84:	d20a      	bcs.n	2e9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e86:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e8a:	2c00      	cmp	r4, #0
    2e8c:	bf18      	it	ne
    2e8e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e92:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e96:	2001      	movs	r0, #1
    2e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e9c:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2ea0:	2000      	movs	r0, #0
    2ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ea6:	f44f 711c 	mov.w	r1, #624	; 0x270
    2eaa:	206c      	movs	r0, #108	; 0x6c
    2eac:	f000 fcd8 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eb0:	2000001b 	.word	0x2000001b
    2eb4:	20000018 	.word	0x20000018
    2eb8:	40008000 	.word	0x40008000
    2ebc:	4000b000 	.word	0x4000b000
    2ec0:	4000b504 	.word	0x4000b504

00002ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ec6:	2701      	movs	r7, #1
    2ec8:	2400      	movs	r4, #0
    2eca:	2807      	cmp	r0, #7
    2ecc:	d24c      	bcs.n	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2ece:	e8df f000 	tbb	[pc, r0]
    2ed2:	0404      	.short	0x0404
    2ed4:	16160404 	.word	0x16160404
    2ed8:	0016      	.short	0x0016
    2eda:	4a26      	ldr	r2, [pc, #152]	; (2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2edc:	f100 0110 	add.w	r1, r0, #16
    2ee0:	fa07 f101 	lsl.w	r1, r7, r1
    2ee4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2ee8:	0081      	lsls	r1, r0, #2
    2eea:	4411      	add	r1, r2
    2eec:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2ef0:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2ef4:	4920      	ldr	r1, [pc, #128]	; (2f78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2ef6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2efa:	9000      	str	r0, [sp, #0]
    2efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2efe:	4d1f      	ldr	r5, [pc, #124]	; (2f7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2f00:	1f01      	subs	r1, r0, #4
    2f02:	b2ce      	uxtb	r6, r1
    2f04:	7829      	ldrb	r1, [r5, #0]
    2f06:	b179      	cbz	r1, 2f28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2f08:	786a      	ldrb	r2, [r5, #1]
    2f0a:	4282      	cmp	r2, r0
    2f0c:	d10c      	bne.n	2f28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2f0e:	4a1c      	ldr	r2, [pc, #112]	; (2f80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2f10:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2f14:	6010      	str	r0, [r2, #0]
    2f16:	2901      	cmp	r1, #1
    2f18:	bf08      	it	eq
    2f1a:	f7ff fd57 	bleq	29cc <MPSL_IRQ_TIMER0_Handler+0xf8>
    2f1e:	702c      	strb	r4, [r5, #0]
    2f20:	4918      	ldr	r1, [pc, #96]	; (2f84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2f22:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2f26:	60c8      	str	r0, [r1, #12]
    2f28:	f106 0010 	add.w	r0, r6, #16
    2f2c:	fa07 f100 	lsl.w	r1, r7, r0
    2f30:	4815      	ldr	r0, [pc, #84]	; (2f88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2f32:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f36:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f3a:	00b0      	lsls	r0, r6, #2
    2f3c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2f40:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2f44:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2f48:	4a10      	ldr	r2, [pc, #64]	; (2f8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2f4a:	6812      	ldr	r2, [r2, #0]
    2f4c:	1a89      	subs	r1, r1, r2
    2f4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f52:	2902      	cmp	r1, #2
    2f54:	bf24      	itt	cs
    2f56:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2f5a:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2f5e:	480c      	ldr	r0, [pc, #48]	; (2f90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2f60:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2f64:	9000      	str	r0, [sp, #0]
    2f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f68:	f240 21e9 	movw	r1, #745	; 0x2e9
    2f6c:	206c      	movs	r0, #108	; 0x6c
    2f6e:	f000 fc77 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f72:	0000      	.short	0x0000
    2f74:	40008000 	.word	0x40008000
    2f78:	40008140 	.word	0x40008140
    2f7c:	2000001b 	.word	0x2000001b
    2f80:	4001f508 	.word	0x4001f508
    2f84:	20000018 	.word	0x20000018
    2f88:	4000b000 	.word	0x4000b000
    2f8c:	4000b504 	.word	0x4000b504
    2f90:	4000b140 	.word	0x4000b140

00002f94 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f94:	491e      	ldr	r1, [pc, #120]	; (3010 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2f96:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2f9a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2f9e:	481d      	ldr	r0, [pc, #116]	; (3014 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2fa0:	4a1d      	ldr	r2, [pc, #116]	; (3018 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2fa2:	f890 c000 	ldrb.w	ip, [r0]
    2fa6:	2000      	movs	r0, #0
    2fa8:	f1bc 0f00 	cmp.w	ip, #0
    2fac:	d00a      	beq.n	2fc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2fae:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2fb2:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fb6:	6010      	str	r0, [r2, #0]
    2fb8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fbc:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2fc0:	b981      	cbnz	r1, 2fe4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2fc2:	e009      	b.n	2fd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2fc4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fc8:	4b14      	ldr	r3, [pc, #80]	; (301c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2fca:	6018      	str	r0, [r3, #0]
    2fcc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fd0:	6010      	str	r0, [r2, #0]
    2fd2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fd6:	e7f1      	b.n	2fbc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2fd8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2fdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2fe0:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2fe4:	490e      	ldr	r1, [pc, #56]	; (3020 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2fe6:	f04f 32ff 	mov.w	r2, #4294967295
    2fea:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fee:	4a0d      	ldr	r2, [pc, #52]	; (3024 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2ff0:	6010      	str	r0, [r2, #0]
    2ff2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2ff6:	1d12      	adds	r2, r2, #4
    2ff8:	6010      	str	r0, [r2, #0]
    2ffa:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2ffe:	1d12      	adds	r2, r2, #4
    3000:	6010      	str	r0, [r2, #0]
    3002:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3006:	1d12      	adds	r2, r2, #4
    3008:	6010      	str	r0, [r2, #0]
    300a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    300e:	4770      	bx	lr
    3010:	4000b000 	.word	0x4000b000
    3014:	2000001b 	.word	0x2000001b
    3018:	4000b544 	.word	0x4000b544
    301c:	4000b540 	.word	0x4000b540
    3020:	40008000 	.word	0x40008000
    3024:	40008540 	.word	0x40008540

00003028 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3028:	4808      	ldr	r0, [pc, #32]	; (304c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    302a:	f990 0002 	ldrsb.w	r0, [r0, #2]
    302e:	2800      	cmp	r0, #0
    3030:	bfb8      	it	lt
    3032:	4770      	bxlt	lr
    3034:	f000 011f 	and.w	r1, r0, #31
    3038:	2201      	movs	r2, #1
    303a:	fa02 f101 	lsl.w	r1, r2, r1
    303e:	0940      	lsrs	r0, r0, #5
    3040:	0080      	lsls	r0, r0, #2
    3042:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3046:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    304a:	4770      	bx	lr
    304c:	20000018 	.word	0x20000018

00003050 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3050:	b510      	push	{r4, lr}
    3052:	2807      	cmp	r0, #7
    3054:	d20d      	bcs.n	3072 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3056:	e8df f000 	tbb	[pc, r0]
    305a:	0404      	.short	0x0404
    305c:	06060404 	.word	0x06060404
    3060:	0006      	.short	0x0006
    3062:	4906      	ldr	r1, [pc, #24]	; (307c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3064:	e002      	b.n	306c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3066:	1f00      	subs	r0, r0, #4
    3068:	4905      	ldr	r1, [pc, #20]	; (3080 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    306a:	b2c0      	uxtb	r0, r0
    306c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3070:	bd10      	pop	{r4, pc}
    3072:	f44f 7125 	mov.w	r1, #660	; 0x294
    3076:	206c      	movs	r0, #108	; 0x6c
    3078:	f000 fbf2 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    307c:	40008140 	.word	0x40008140
    3080:	4000b140 	.word	0x4000b140

00003084 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3084:	b510      	push	{r4, lr}
    3086:	2807      	cmp	r0, #7
    3088:	d20d      	bcs.n	30a6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    308a:	e8df f000 	tbb	[pc, r0]
    308e:	0404      	.short	0x0404
    3090:	06060404 	.word	0x06060404
    3094:	0006      	.short	0x0006
    3096:	4906      	ldr	r1, [pc, #24]	; (30b0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3098:	e002      	b.n	30a0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    309a:	1f00      	subs	r0, r0, #4
    309c:	4905      	ldr	r1, [pc, #20]	; (30b4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    309e:	b2c0      	uxtb	r0, r0
    30a0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    30a4:	bd10      	pop	{r4, pc}
    30a6:	f44f 7125 	mov.w	r1, #660	; 0x294
    30aa:	206c      	movs	r0, #108	; 0x6c
    30ac:	f000 fbd8 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30b0:	40008140 	.word	0x40008140
    30b4:	4000b140 	.word	0x4000b140

000030b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    30b8:	b570      	push	{r4, r5, r6, lr}
    30ba:	4819      	ldr	r0, [pc, #100]	; (3120 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    30bc:	2400      	movs	r4, #0
    30be:	2104      	movs	r1, #4
    30c0:	7004      	strb	r4, [r0, #0]
    30c2:	1ec0      	subs	r0, r0, #3
    30c4:	7001      	strb	r1, [r0, #0]
    30c6:	0589      	lsls	r1, r1, #22
    30c8:	60c1      	str	r1, [r0, #12]
    30ca:	f7ff fc7f 	bl	29cc <MPSL_IRQ_TIMER0_Handler+0xf8>
    30ce:	2501      	movs	r5, #1
    30d0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    30d4:	02eb      	lsls	r3, r5, #11
    30d6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    30da:	f3bf 8f4f 	dsb	sy
    30de:	f3bf 8f6f 	isb	sy
    30e2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    30e6:	4a0f      	ldr	r2, [pc, #60]	; (3124 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    30e8:	6055      	str	r5, [r2, #4]
    30ea:	6095      	str	r5, [r2, #8]
    30ec:	480e      	ldr	r0, [pc, #56]	; (3128 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    30ee:	6801      	ldr	r1, [r0, #0]
    30f0:	2900      	cmp	r1, #0
    30f2:	d1fc      	bne.n	30ee <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    30f4:	1e48      	subs	r0, r1, #1
    30f6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    30fa:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    30fe:	480b      	ldr	r0, [pc, #44]	; (312c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3100:	6004      	str	r4, [r0, #0]
    3102:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3106:	1d00      	adds	r0, r0, #4
    3108:	6004      	str	r4, [r0, #0]
    310a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    310e:	1d00      	adds	r0, r0, #4
    3110:	6004      	str	r4, [r0, #0]
    3112:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    3116:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    311a:	6015      	str	r5, [r2, #0]
    311c:	bd70      	pop	{r4, r5, r6, pc}
    311e:	0000      	.short	0x0000
    3120:	2000001b 	.word	0x2000001b
    3124:	4000b000 	.word	0x4000b000
    3128:	4000b504 	.word	0x4000b504
    312c:	4000b540 	.word	0x4000b540

00003130 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    3130:	0b43      	lsrs	r3, r0, #13
    3132:	f248 6c37 	movw	ip, #34359	; 0x8637
    3136:	fb03 f30c 	mul.w	r3, r3, ip
    313a:	0c1b      	lsrs	r3, r3, #16
    313c:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    3140:	f8c1 c000 	str.w	ip, [r1]
    3144:	f8df c038 	ldr.w	ip, [pc, #56]	; 3180 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    3148:	fb03 030c 	mla	r3, r3, ip, r0
    314c:	480d      	ldr	r0, [pc, #52]	; (3184 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    314e:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    3152:	4358      	muls	r0, r3
    3154:	0d40      	lsrs	r0, r0, #21
    3156:	fb10 fc0c 	smulbb	ip, r0, ip
    315a:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    315e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3162:	125b      	asrs	r3, r3, #9
    3164:	7013      	strb	r3, [r2, #0]
    3166:	680b      	ldr	r3, [r1, #0]
    3168:	4418      	add	r0, r3
    316a:	6008      	str	r0, [r1, #0]
    316c:	7810      	ldrb	r0, [r2, #0]
    316e:	281f      	cmp	r0, #31
    3170:	bf18      	it	ne
    3172:	4770      	bxne	lr
    3174:	2000      	movs	r0, #0
    3176:	7010      	strb	r0, [r2, #0]
    3178:	6808      	ldr	r0, [r1, #0]
    317a:	1c40      	adds	r0, r0, #1
    317c:	6008      	str	r0, [r1, #0]
    317e:	4770      	bx	lr
    3180:	ffffc2f7 	.word	0xffffc2f7
    3184:	00010c6f 	.word	0x00010c6f

00003188 <MPSL_IRQ_CLOCK_Handler>:
    3188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    318c:	4c16      	ldr	r4, [pc, #88]	; (31e8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    318e:	7a60      	ldrb	r0, [r4, #9]
    3190:	2800      	cmp	r0, #0
    3192:	d027      	beq.n	31e4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3194:	f44f 7180 	mov.w	r1, #256	; 0x100
    3198:	058d      	lsls	r5, r1, #22
    319a:	4628      	mov	r0, r5
    319c:	f008 fec6 	bl	bf2c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31a0:	4680      	mov	r8, r0
    31a2:	f44f 7182 	mov.w	r1, #260	; 0x104
    31a6:	4628      	mov	r0, r5
    31a8:	f008 fec0 	bl	bf2c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31ac:	2600      	movs	r6, #0
    31ae:	4607      	mov	r7, r0
    31b0:	f1b8 0f00 	cmp.w	r8, #0
    31b4:	d009      	beq.n	31ca <MPSL_IRQ_CLOCK_Handler+0x42>
    31b6:	2001      	movs	r0, #1
    31b8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    31bc:	7920      	ldrb	r0, [r4, #4]
    31be:	b120      	cbz	r0, 31ca <MPSL_IRQ_CLOCK_Handler+0x42>
    31c0:	7126      	strb	r6, [r4, #4]
    31c2:	69e0      	ldr	r0, [r4, #28]
    31c4:	b108      	cbz	r0, 31ca <MPSL_IRQ_CLOCK_Handler+0x42>
    31c6:	4780      	blx	r0
    31c8:	61e6      	str	r6, [r4, #28]
    31ca:	b137      	cbz	r7, 31da <MPSL_IRQ_CLOCK_Handler+0x52>
    31cc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    31d0:	2002      	movs	r0, #2
    31d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    31d6:	f000 fa8b 	bl	36f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    31da:	4640      	mov	r0, r8
    31dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    31e0:	f000 b85a 	b.w	3298 <MPSL_IRQ_CLOCK_Handler+0x110>
    31e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31e8:	20000028 	.word	0x20000028
    31ec:	b510      	push	{r4, lr}
    31ee:	f008 ff47 	bl	c080 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    31f2:	b930      	cbnz	r0, 3202 <MPSL_IRQ_CLOCK_Handler+0x7a>
    31f4:	f008 ff65 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31f8:	b918      	cbnz	r0, 3202 <MPSL_IRQ_CLOCK_Handler+0x7a>
    31fa:	f008 ff98 	bl	c12e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    31fe:	2800      	cmp	r0, #0
    3200:	d002      	beq.n	3208 <MPSL_IRQ_CLOCK_Handler+0x80>
    3202:	4902      	ldr	r1, [pc, #8]	; (320c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3204:	2002      	movs	r0, #2
    3206:	6008      	str	r0, [r1, #0]
    3208:	bd10      	pop	{r4, pc}
    320a:	0000      	.short	0x0000
    320c:	40000c34 	.word	0x40000c34
    3210:	b570      	push	{r4, r5, r6, lr}
    3212:	f000 f987 	bl	3524 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3216:	f000 fabf 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    321a:	4c09      	ldr	r4, [pc, #36]	; (3240 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    321c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3220:	b130      	cbz	r0, 3230 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3222:	f7ff ffe3 	bl	31ec <MPSL_IRQ_CLOCK_Handler+0x64>
    3226:	2001      	movs	r0, #1
    3228:	6128      	str	r0, [r5, #16]
    322a:	2004      	movs	r0, #4
    322c:	72a0      	strb	r0, [r4, #10]
    322e:	e004      	b.n	323a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3230:	2003      	movs	r0, #3
    3232:	72a0      	strb	r0, [r4, #10]
    3234:	2001      	movs	r0, #1
    3236:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    323a:	2000      	movs	r0, #0
    323c:	71e0      	strb	r0, [r4, #7]
    323e:	bd70      	pop	{r4, r5, r6, pc}
    3240:	20000028 	.word	0x20000028
    3244:	b570      	push	{r4, r5, r6, lr}
    3246:	4c13      	ldr	r4, [pc, #76]	; (3294 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3248:	79a0      	ldrb	r0, [r4, #6]
    324a:	b1f0      	cbz	r0, 328a <MPSL_IRQ_CLOCK_Handler+0x102>
    324c:	2801      	cmp	r0, #1
    324e:	d003      	beq.n	3258 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3250:	79e1      	ldrb	r1, [r4, #7]
    3252:	1e40      	subs	r0, r0, #1
    3254:	4281      	cmp	r1, r0
    3256:	da18      	bge.n	328a <MPSL_IRQ_CLOCK_Handler+0x102>
    3258:	f000 fa9e 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    325c:	4605      	mov	r5, r0
    325e:	f000 fb6f 	bl	3940 <mpsl_temperature_get>
    3262:	79a1      	ldrb	r1, [r4, #6]
    3264:	2901      	cmp	r1, #1
    3266:	d902      	bls.n	326e <MPSL_IRQ_CLOCK_Handler+0xe6>
    3268:	79e1      	ldrb	r1, [r4, #7]
    326a:	1c49      	adds	r1, r1, #1
    326c:	71e1      	strb	r1, [r4, #7]
    326e:	b10d      	cbz	r5, 3274 <MPSL_IRQ_CLOCK_Handler+0xec>
    3270:	6961      	ldr	r1, [r4, #20]
    3272:	e000      	b.n	3276 <MPSL_IRQ_CLOCK_Handler+0xee>
    3274:	6921      	ldr	r1, [r4, #16]
    3276:	1a41      	subs	r1, r0, r1
    3278:	2902      	cmp	r1, #2
    327a:	da02      	bge.n	3282 <MPSL_IRQ_CLOCK_Handler+0xfa>
    327c:	f111 0f02 	cmn.w	r1, #2
    3280:	dc07      	bgt.n	3292 <MPSL_IRQ_CLOCK_Handler+0x10a>
    3282:	b10d      	cbz	r5, 3288 <MPSL_IRQ_CLOCK_Handler+0x100>
    3284:	6160      	str	r0, [r4, #20]
    3286:	e000      	b.n	328a <MPSL_IRQ_CLOCK_Handler+0x102>
    3288:	6120      	str	r0, [r4, #16]
    328a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    328e:	f7ff bfbf 	b.w	3210 <MPSL_IRQ_CLOCK_Handler+0x88>
    3292:	bd70      	pop	{r4, r5, r6, pc}
    3294:	20000028 	.word	0x20000028
    3298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    329c:	4606      	mov	r6, r0
    329e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    32a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    32a6:	4628      	mov	r0, r5
    32a8:	f008 fe40 	bl	bf2c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32ac:	4680      	mov	r8, r0
    32ae:	f44f 7188 	mov.w	r1, #272	; 0x110
    32b2:	4628      	mov	r0, r5
    32b4:	f008 fe3a 	bl	bf2c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32b8:	4c27      	ldr	r4, [pc, #156]	; (3358 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32ba:	4682      	mov	sl, r0
    32bc:	7827      	ldrb	r7, [r4, #0]
    32be:	f104 0008 	add.w	r0, r4, #8
    32c2:	f008 fea7 	bl	c014 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    32c6:	b110      	cbz	r0, 32ce <MPSL_IRQ_CLOCK_Handler+0x146>
    32c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    32cc:	e016      	b.n	32fc <MPSL_IRQ_CLOCK_Handler+0x174>
    32ce:	f04f 0901 	mov.w	r9, #1
    32d2:	b146      	cbz	r6, 32e6 <MPSL_IRQ_CLOCK_Handler+0x15e>
    32d4:	7aa0      	ldrb	r0, [r4, #10]
    32d6:	2803      	cmp	r0, #3
    32d8:	d105      	bne.n	32e6 <MPSL_IRQ_CLOCK_Handler+0x15e>
    32da:	2004      	movs	r0, #4
    32dc:	72a0      	strb	r0, [r4, #10]
    32de:	f7ff ff85 	bl	31ec <MPSL_IRQ_CLOCK_Handler+0x64>
    32e2:	f8c5 9010 	str.w	r9, [r5, #16]
    32e6:	2600      	movs	r6, #0
    32e8:	f1b8 0f00 	cmp.w	r8, #0
    32ec:	d018      	beq.n	3320 <MPSL_IRQ_CLOCK_Handler+0x198>
    32ee:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    32f2:	7aa0      	ldrb	r0, [r4, #10]
    32f4:	2804      	cmp	r0, #4
    32f6:	d004      	beq.n	3302 <MPSL_IRQ_CLOCK_Handler+0x17a>
    32f8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    32fc:	206d      	movs	r0, #109	; 0x6d
    32fe:	f000 faaf 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3302:	f008 febd 	bl	c080 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3306:	b928      	cbnz	r0, 3314 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3308:	f008 fedb 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    330c:	b910      	cbnz	r0, 3314 <MPSL_IRQ_CLOCK_Handler+0x18c>
    330e:	f008 ff0e 	bl	c12e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3312:	b108      	cbz	r0, 3318 <MPSL_IRQ_CLOCK_Handler+0x190>
    3314:	4811      	ldr	r0, [pc, #68]	; (335c <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3316:	6006      	str	r6, [r0, #0]
    3318:	2002      	movs	r0, #2
    331a:	72a0      	strb	r0, [r4, #10]
    331c:	f000 f8e6 	bl	34ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3320:	f1ba 0f00 	cmp.w	sl, #0
    3324:	d008      	beq.n	3338 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3326:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    332a:	7aa0      	ldrb	r0, [r4, #10]
    332c:	2802      	cmp	r0, #2
    332e:	d101      	bne.n	3334 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3330:	f7ff ff88 	bl	3244 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3334:	f8c5 9014 	str.w	r9, [r5, #20]
    3338:	b13f      	cbz	r7, 334a <MPSL_IRQ_CLOCK_Handler+0x1c2>
    333a:	7026      	strb	r6, [r4, #0]
    333c:	7aa0      	ldrb	r0, [r4, #10]
    333e:	2802      	cmp	r0, #2
    3340:	d101      	bne.n	3346 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3342:	f7ff ff65 	bl	3210 <MPSL_IRQ_CLOCK_Handler+0x88>
    3346:	f000 f8d1 	bl	34ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    334a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    334e:	4802      	ldr	r0, [pc, #8]	; (3358 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3350:	3008      	adds	r0, #8
    3352:	f008 be76 	b.w	c042 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3356:	0000      	.short	0x0000
    3358:	20000028 	.word	0x20000028
    335c:	40000c34 	.word	0x40000c34
    3360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3364:	4c5c      	ldr	r4, [pc, #368]	; (34d8 <MPSL_IRQ_CLOCK_Handler+0x350>)
    3366:	f04f 0800 	mov.w	r8, #0
    336a:	4606      	mov	r6, r0
    336c:	f8c4 8018 	str.w	r8, [r4, #24]
    3370:	7843      	ldrb	r3, [r0, #1]
    3372:	7882      	ldrb	r2, [r0, #2]
    3374:	7800      	ldrb	r0, [r0, #0]
    3376:	72e0      	strb	r0, [r4, #11]
    3378:	7163      	strb	r3, [r4, #5]
    337a:	2701      	movs	r7, #1
    337c:	71a2      	strb	r2, [r4, #6]
    337e:	07bd      	lsls	r5, r7, #30
    3380:	f884 8007 	strb.w	r8, [r4, #7]
    3384:	2805      	cmp	r0, #5
    3386:	d224      	bcs.n	33d2 <MPSL_IRQ_CLOCK_Handler+0x24a>
    3388:	e8df f000 	tbb	[pc, r0]
    338c:	1f05030f 	.word	0x1f05030f
    3390:	0021      	.short	0x0021
    3392:	61a7      	str	r7, [r4, #24]
    3394:	e009      	b.n	33aa <MPSL_IRQ_CLOCK_Handler+0x222>
    3396:	f000 f8c5 	bl	3524 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    339a:	2101      	movs	r1, #1
    339c:	4628      	mov	r0, r5
    339e:	f008 fdca 	bl	bf36 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    33a2:	2800      	cmp	r0, #0
    33a4:	d0f9      	beq.n	339a <MPSL_IRQ_CLOCK_Handler+0x212>
    33a6:	2002      	movs	r0, #2
    33a8:	61a0      	str	r0, [r4, #24]
    33aa:	f008 fdf0 	bl	bf8e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    33ae:	b1b0      	cbz	r0, 33de <MPSL_IRQ_CLOCK_Handler+0x256>
    33b0:	f000 fa0c 	bl	37cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    33b4:	7e21      	ldrb	r1, [r4, #24]
    33b6:	f001 0103 	and.w	r1, r1, #3
    33ba:	4288      	cmp	r0, r1
    33bc:	d10f      	bne.n	33de <MPSL_IRQ_CLOCK_Handler+0x256>
    33be:	79b0      	ldrb	r0, [r6, #6]
    33c0:	b150      	cbz	r0, 33d8 <MPSL_IRQ_CLOCK_Handler+0x250>
    33c2:	2002      	movs	r0, #2
    33c4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33c8:	e06a      	b.n	34a0 <MPSL_IRQ_CLOCK_Handler+0x318>
    33ca:	4844      	ldr	r0, [pc, #272]	; (34dc <MPSL_IRQ_CLOCK_Handler+0x354>)
    33cc:	e7ec      	b.n	33a8 <MPSL_IRQ_CLOCK_Handler+0x220>
    33ce:	4844      	ldr	r0, [pc, #272]	; (34e0 <MPSL_IRQ_CLOCK_Handler+0x358>)
    33d0:	e7ea      	b.n	33a8 <MPSL_IRQ_CLOCK_Handler+0x220>
    33d2:	f44f 714c 	mov.w	r1, #816	; 0x330
    33d6:	e049      	b.n	346c <MPSL_IRQ_CLOCK_Handler+0x2e4>
    33d8:	f000 f9cc 	bl	3774 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    33dc:	e060      	b.n	34a0 <MPSL_IRQ_CLOCK_Handler+0x318>
    33de:	60ef      	str	r7, [r5, #12]
    33e0:	f44f 7a82 	mov.w	sl, #260	; 0x104
    33e4:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    33e8:	69a0      	ldr	r0, [r4, #24]
    33ea:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    33ee:	f008 fe33 	bl	c058 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    33f2:	b940      	cbnz	r0, 3406 <MPSL_IRQ_CLOCK_Handler+0x27e>
    33f4:	f008 fe3a 	bl	c06c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    33f8:	b928      	cbnz	r0, 3406 <MPSL_IRQ_CLOCK_Handler+0x27e>
    33fa:	f008 fe4e 	bl	c09a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    33fe:	b910      	cbnz	r0, 3406 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3400:	f008 fe5f 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3404:	b138      	cbz	r0, 3416 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3406:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    340a:	4836      	ldr	r0, [pc, #216]	; (34e4 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    340c:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3410:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3414:	6001      	str	r1, [r0, #0]
    3416:	f008 fe1f 	bl	c058 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    341a:	b940      	cbnz	r0, 342e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    341c:	f008 fe26 	bl	c06c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3420:	b928      	cbnz	r0, 342e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3422:	f008 fe3a 	bl	c09a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3426:	b910      	cbnz	r0, 342e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3428:	f008 fe4b 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    342c:	b110      	cbz	r0, 3434 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    342e:	482d      	ldr	r0, [pc, #180]	; (34e4 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3430:	3010      	adds	r0, #16
    3432:	6007      	str	r7, [r0, #0]
    3434:	60af      	str	r7, [r5, #8]
    3436:	2002      	movs	r0, #2
    3438:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    343c:	79b0      	ldrb	r0, [r6, #6]
    343e:	bb78      	cbnz	r0, 34a0 <MPSL_IRQ_CLOCK_Handler+0x318>
    3440:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3444:	f010 0f02 	tst.w	r0, #2
    3448:	d00e      	beq.n	3468 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    344a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 34e8 <MPSL_IRQ_CLOCK_Handler+0x360>
    344e:	f8d9 1000 	ldr.w	r1, [r9]
    3452:	43c9      	mvns	r1, r1
    3454:	f341 1700 	sbfx	r7, r1, #4, #1
    3458:	f8d9 1000 	ldr.w	r1, [r9]
    345c:	f041 0110 	orr.w	r1, r1, #16
    3460:	f8c9 1000 	str.w	r1, [r9]
    3464:	1c7f      	adds	r7, r7, #1
    3466:	e007      	b.n	3478 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3468:	f240 21f1 	movw	r1, #753	; 0x2f1
    346c:	206d      	movs	r0, #109	; 0x6d
    346e:	f000 f9f7 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3472:	bf00      	nop
    3474:	f000 fb1a 	bl	3aac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3478:	4651      	mov	r1, sl
    347a:	4628      	mov	r0, r5
    347c:	f008 fd56 	bl	bf2c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3480:	2800      	cmp	r0, #0
    3482:	d0f7      	beq.n	3474 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3484:	f000 f976 	bl	3774 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3488:	b92f      	cbnz	r7, 3496 <MPSL_IRQ_CLOCK_Handler+0x30e>
    348a:	f8d9 1000 	ldr.w	r1, [r9]
    348e:	f021 0110 	bic.w	r1, r1, #16
    3492:	f8c9 1000 	str.w	r1, [r9]
    3496:	2002      	movs	r0, #2
    3498:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    349c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    34a0:	79a0      	ldrb	r0, [r4, #6]
    34a2:	b170      	cbz	r0, 34c2 <MPSL_IRQ_CLOCK_Handler+0x33a>
    34a4:	7830      	ldrb	r0, [r6, #0]
    34a6:	b960      	cbnz	r0, 34c2 <MPSL_IRQ_CLOCK_Handler+0x33a>
    34a8:	f000 f976 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34ac:	4606      	mov	r6, r0
    34ae:	f000 fa47 	bl	3940 <mpsl_temperature_get>
    34b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    34b6:	b116      	cbz	r6, 34be <MPSL_IRQ_CLOCK_Handler+0x336>
    34b8:	e9c4 2004 	strd	r2, r0, [r4, #16]
    34bc:	e001      	b.n	34c2 <MPSL_IRQ_CLOCK_Handler+0x33a>
    34be:	e9c4 0204 	strd	r0, r2, [r4, #16]
    34c2:	2101      	movs	r1, #1
    34c4:	4628      	mov	r0, r5
    34c6:	f008 fd36 	bl	bf36 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    34ca:	b108      	cbz	r0, 34d0 <MPSL_IRQ_CLOCK_Handler+0x348>
    34cc:	f000 f95e 	bl	378c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    34d0:	f884 800a 	strb.w	r8, [r4, #10]
    34d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34d8:	20000028 	.word	0x20000028
    34dc:	00020001 	.word	0x00020001
    34e0:	00030001 	.word	0x00030001
    34e4:	4000053c 	.word	0x4000053c
    34e8:	e000ed10 	.word	0xe000ed10

000034ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    34ec:	b510      	push	{r4, lr}
    34ee:	f3ef 8410 	mrs	r4, PRIMASK
    34f2:	b672      	cpsid	i
    34f4:	480a      	ldr	r0, [pc, #40]	; (3520 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    34f6:	7841      	ldrb	r1, [r0, #1]
    34f8:	b129      	cbz	r1, 3506 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    34fa:	7841      	ldrb	r1, [r0, #1]
    34fc:	1e49      	subs	r1, r1, #1
    34fe:	7041      	strb	r1, [r0, #1]
    3500:	7841      	ldrb	r1, [r0, #1]
    3502:	b129      	cbz	r1, 3510 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3504:	e008      	b.n	3518 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3506:	f240 110d 	movw	r1, #269	; 0x10d
    350a:	206d      	movs	r0, #109	; 0x6d
    350c:	f000 f9a8 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3510:	7880      	ldrb	r0, [r0, #2]
    3512:	b908      	cbnz	r0, 3518 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3514:	f000 f94e 	bl	37b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3518:	2c00      	cmp	r4, #0
    351a:	d100      	bne.n	351e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    351c:	b662      	cpsie	i
    351e:	bd10      	pop	{r4, pc}
    3520:	20000028 	.word	0x20000028

00003524 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3524:	b510      	push	{r4, lr}
    3526:	f3ef 8410 	mrs	r4, PRIMASK
    352a:	b672      	cpsid	i
    352c:	4806      	ldr	r0, [pc, #24]	; (3548 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    352e:	7841      	ldrb	r1, [r0, #1]
    3530:	1c49      	adds	r1, r1, #1
    3532:	7041      	strb	r1, [r0, #1]
    3534:	7840      	ldrb	r0, [r0, #1]
    3536:	2801      	cmp	r0, #1
    3538:	d101      	bne.n	353e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    353a:	f008 fd13 	bl	bf64 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    353e:	2c00      	cmp	r4, #0
    3540:	d100      	bne.n	3544 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3542:	b662      	cpsie	i
    3544:	bd10      	pop	{r4, pc}
    3546:	0000      	.short	0x0000
    3548:	20000028 	.word	0x20000028

0000354c <mpsl_clock_hfclk_release>:
    354c:	4805      	ldr	r0, [pc, #20]	; (3564 <mpsl_clock_hfclk_release+0x18>)
    354e:	b510      	push	{r4, lr}
    3550:	78c1      	ldrb	r1, [r0, #3]
    3552:	b121      	cbz	r1, 355e <mpsl_clock_hfclk_release+0x12>
    3554:	2100      	movs	r1, #0
    3556:	7101      	strb	r1, [r0, #4]
    3558:	70c1      	strb	r1, [r0, #3]
    355a:	f7ff ffc7 	bl	34ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    355e:	2000      	movs	r0, #0
    3560:	bd10      	pop	{r4, pc}
    3562:	0000      	.short	0x0000
    3564:	20000028 	.word	0x20000028

00003568 <mpsl_clock_hfclk_request>:
    3568:	b570      	push	{r4, r5, r6, lr}
    356a:	4c0c      	ldr	r4, [pc, #48]	; (359c <mpsl_clock_hfclk_request+0x34>)
    356c:	78e1      	ldrb	r1, [r4, #3]
    356e:	b961      	cbnz	r1, 358a <mpsl_clock_hfclk_request+0x22>
    3570:	2501      	movs	r5, #1
    3572:	70e5      	strb	r5, [r4, #3]
    3574:	61e0      	str	r0, [r4, #28]
    3576:	f7ff ffd5 	bl	3524 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    357a:	f000 f90d 	bl	3798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    357e:	b130      	cbz	r0, 358e <mpsl_clock_hfclk_request+0x26>
    3580:	69e0      	ldr	r0, [r4, #28]
    3582:	b110      	cbz	r0, 358a <mpsl_clock_hfclk_request+0x22>
    3584:	4780      	blx	r0
    3586:	2000      	movs	r0, #0
    3588:	61e0      	str	r0, [r4, #28]
    358a:	2000      	movs	r0, #0
    358c:	bd70      	pop	{r4, r5, r6, pc}
    358e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3592:	7125      	strb	r5, [r4, #4]
    3594:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3598:	e7f7      	b.n	358a <mpsl_clock_hfclk_request+0x22>
    359a:	0000      	.short	0x0000
    359c:	20000028 	.word	0x20000028

000035a0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    35a0:	f3ef 8010 	mrs	r0, PRIMASK
    35a4:	b672      	cpsid	i
    35a6:	4904      	ldr	r1, [pc, #16]	; (35b8 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    35a8:	788a      	ldrb	r2, [r1, #2]
    35aa:	1c52      	adds	r2, r2, #1
    35ac:	708a      	strb	r2, [r1, #2]
    35ae:	2800      	cmp	r0, #0
    35b0:	d100      	bne.n	35b4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    35b2:	b662      	cpsie	i
    35b4:	4770      	bx	lr
    35b6:	0000      	.short	0x0000
    35b8:	20000028 	.word	0x20000028

000035bc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    35bc:	b510      	push	{r4, lr}
    35be:	f3ef 8410 	mrs	r4, PRIMASK
    35c2:	b672      	cpsid	i
    35c4:	480a      	ldr	r0, [pc, #40]	; (35f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    35c6:	7881      	ldrb	r1, [r0, #2]
    35c8:	b129      	cbz	r1, 35d6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    35ca:	7881      	ldrb	r1, [r0, #2]
    35cc:	1e49      	subs	r1, r1, #1
    35ce:	7081      	strb	r1, [r0, #2]
    35d0:	7841      	ldrb	r1, [r0, #1]
    35d2:	b129      	cbz	r1, 35e0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    35d4:	e008      	b.n	35e8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    35d6:	f240 1125 	movw	r1, #293	; 0x125
    35da:	206d      	movs	r0, #109	; 0x6d
    35dc:	f000 f940 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35e0:	7880      	ldrb	r0, [r0, #2]
    35e2:	b908      	cbnz	r0, 35e8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    35e4:	f000 f8e6 	bl	37b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    35e8:	2c00      	cmp	r4, #0
    35ea:	d100      	bne.n	35ee <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    35ec:	b662      	cpsie	i
    35ee:	bd10      	pop	{r4, pc}
    35f0:	20000028 	.word	0x20000028

000035f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    35f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35f8:	0004      	movs	r4, r0
    35fa:	f06f 0015 	mvn.w	r0, #21
    35fe:	d03c      	beq.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3600:	7821      	ldrb	r1, [r4, #0]
    3602:	2904      	cmp	r1, #4
    3604:	d839      	bhi.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3606:	2900      	cmp	r1, #0
    3608:	7861      	ldrb	r1, [r4, #1]
    360a:	d038      	beq.n	367e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    360c:	2900      	cmp	r1, #0
    360e:	d134      	bne.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3610:	78a1      	ldrb	r1, [r4, #2]
    3612:	2900      	cmp	r1, #0
    3614:	d131      	bne.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3616:	2000      	movs	r0, #0
    3618:	f008 fc53 	bl	bec2 <MPSL_IRQ_RADIO_Handler+0x1e>
    361c:	2000      	movs	r0, #0
    361e:	f008 fc43 	bl	bea8 <MPSL_IRQ_RADIO_Handler+0x4>
    3622:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3626:	f04f 31ff 	mov.w	r1, #4294967295
    362a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    362e:	2600      	movs	r6, #0
    3630:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3634:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3638:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    363c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3640:	4f14      	ldr	r7, [pc, #80]	; (3694 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3642:	707e      	strb	r6, [r7, #1]
    3644:	88a0      	ldrh	r0, [r4, #4]
    3646:	81b8      	strh	r0, [r7, #12]
    3648:	f008 fc83 	bl	bf52 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    364c:	2501      	movs	r5, #1
    364e:	b108      	cbz	r0, 3654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3650:	70fd      	strb	r5, [r7, #3]
    3652:	707d      	strb	r5, [r7, #1]
    3654:	2101      	movs	r1, #1
    3656:	4640      	mov	r0, r8
    3658:	f008 fc6d 	bl	bf36 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    365c:	b108      	cbz	r0, 3662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    365e:	f000 f895 	bl	378c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3662:	4620      	mov	r0, r4
    3664:	f7ff fe7c 	bl	3360 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3668:	727d      	strb	r5, [r7, #9]
    366a:	2000      	movs	r0, #0
    366c:	f008 fc1c 	bl	bea8 <MPSL_IRQ_RADIO_Handler+0x4>
    3670:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3674:	4630      	mov	r0, r6
    3676:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    367a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    367e:	2900      	cmp	r1, #0
    3680:	d0fb      	beq.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3682:	2920      	cmp	r1, #32
    3684:	d8f9      	bhi.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3686:	78a1      	ldrb	r1, [r4, #2]
    3688:	2921      	cmp	r1, #33	; 0x21
    368a:	d8f6      	bhi.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    368c:	2901      	cmp	r1, #1
    368e:	d1c2      	bne.n	3616 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3690:	e7f3      	b.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3692:	0000      	.short	0x0000
    3694:	20000028 	.word	0x20000028

00003698 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3698:	4801      	ldr	r0, [pc, #4]	; (36a0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    369a:	8980      	ldrh	r0, [r0, #12]
    369c:	4770      	bx	lr
    369e:	0000      	.short	0x0000
    36a0:	20000028 	.word	0x20000028

000036a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    36a4:	b510      	push	{r4, lr}
    36a6:	480d      	ldr	r0, [pc, #52]	; (36dc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36a8:	f008 fcb4 	bl	c014 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    36ac:	490b      	ldr	r1, [pc, #44]	; (36dc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36ae:	3908      	subs	r1, #8
    36b0:	b148      	cbz	r0, 36c6 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    36b2:	2001      	movs	r0, #1
    36b4:	7008      	strb	r0, [r1, #0]
    36b6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    36ba:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    36be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36c2:	f7ff bf2f 	b.w	3524 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    36c6:	7a88      	ldrb	r0, [r1, #10]
    36c8:	2802      	cmp	r0, #2
    36ca:	d101      	bne.n	36d0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    36cc:	f7ff fda0 	bl	3210 <MPSL_IRQ_CLOCK_Handler+0x88>
    36d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36d4:	4801      	ldr	r0, [pc, #4]	; (36dc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36d6:	f008 bcb4 	b.w	c042 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    36da:	0000      	.short	0x0000
    36dc:	20000030 	.word	0x20000030

000036e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    36e0:	4802      	ldr	r0, [pc, #8]	; (36ec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    36e2:	7a80      	ldrb	r0, [r0, #10]
    36e4:	2800      	cmp	r0, #0
    36e6:	d000      	beq.n	36ea <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    36e8:	2001      	movs	r0, #1
    36ea:	4770      	bx	lr
    36ec:	20000028 	.word	0x20000028

000036f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    36f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36f2:	4d1f      	ldr	r5, [pc, #124]	; (3770 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    36f4:	7ae8      	ldrb	r0, [r5, #11]
    36f6:	2800      	cmp	r0, #0
    36f8:	d10f      	bne.n	371a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    36fa:	7e28      	ldrb	r0, [r5, #24]
    36fc:	f000 0003 	and.w	r0, r0, #3
    3700:	f008 fc35 	bl	bf6e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3704:	2800      	cmp	r0, #0
    3706:	d008      	beq.n	371a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3708:	f3ef 8110 	mrs	r1, PRIMASK
    370c:	b672      	cpsid	i
    370e:	f7ff ffe7 	bl	36e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3712:	b118      	cbz	r0, 371c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3714:	2900      	cmp	r1, #0
    3716:	d100      	bne.n	371a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3718:	b662      	cpsie	i
    371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    371c:	2601      	movs	r6, #1
    371e:	72ae      	strb	r6, [r5, #10]
    3720:	b901      	cbnz	r1, 3724 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3722:	b662      	cpsie	i
    3724:	2018      	movs	r0, #24
    3726:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    372a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    372e:	61a6      	str	r6, [r4, #24]
    3730:	f44f 7020 	mov.w	r0, #640	; 0x280
    3734:	f8ad 0000 	strh.w	r0, [sp]
    3738:	f8bd 0000 	ldrh.w	r0, [sp]
    373c:	1e41      	subs	r1, r0, #1
    373e:	f8ad 1000 	strh.w	r1, [sp]
    3742:	d2f9      	bcs.n	3738 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3744:	2700      	movs	r7, #0
    3746:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    374a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    374e:	4808      	ldr	r0, [pc, #32]	; (3770 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3750:	3008      	adds	r0, #8
    3752:	f008 fc72 	bl	c03a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3756:	702f      	strb	r7, [r5, #0]
    3758:	f7ff fd5a 	bl	3210 <MPSL_IRQ_CLOCK_Handler+0x88>
    375c:	6166      	str	r6, [r4, #20]
    375e:	7968      	ldrb	r0, [r5, #5]
    3760:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3764:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3768:	2018      	movs	r0, #24
    376a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3770:	20000028 	.word	0x20000028

00003774 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3774:	b510      	push	{r4, lr}
    3776:	4c04      	ldr	r4, [pc, #16]	; (3788 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3778:	7e20      	ldrb	r0, [r4, #24]
    377a:	f000 0003 	and.w	r0, r0, #3
    377e:	f008 fbf6 	bl	bf6e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3782:	2800      	cmp	r0, #0
    3784:	d0f8      	beq.n	3778 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3786:	bd10      	pop	{r4, pc}
    3788:	20000028 	.word	0x20000028

0000378c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    378c:	4901      	ldr	r1, [pc, #4]	; (3794 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    378e:	2001      	movs	r0, #1
    3790:	7008      	strb	r0, [r1, #0]
    3792:	4770      	bx	lr
    3794:	20000288 	.word	0x20000288

00003798 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3798:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    379c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    37a0:	b918      	cbnz	r0, 37aa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    37a2:	4803      	ldr	r0, [pc, #12]	; (37b0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    37a4:	7800      	ldrb	r0, [r0, #0]
    37a6:	2800      	cmp	r0, #0
    37a8:	d000      	beq.n	37ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    37aa:	2001      	movs	r0, #1
    37ac:	4770      	bx	lr
    37ae:	0000      	.short	0x0000
    37b0:	20000288 	.word	0x20000288

000037b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    37b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    37b8:	2101      	movs	r1, #1
    37ba:	6041      	str	r1, [r0, #4]
    37bc:	2100      	movs	r1, #0
    37be:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    37c2:	4801      	ldr	r0, [pc, #4]	; (37c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    37c4:	7001      	strb	r1, [r0, #0]
    37c6:	4770      	bx	lr
    37c8:	20000288 	.word	0x20000288

000037cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    37cc:	4802      	ldr	r0, [pc, #8]	; (37d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    37ce:	6800      	ldr	r0, [r0, #0]
    37d0:	f000 0003 	and.w	r0, r0, #3
    37d4:	4770      	bx	lr
    37d6:	0000      	.short	0x0000
    37d8:	4000041c 	.word	0x4000041c
    37dc:	b510      	push	{r4, lr}
    37de:	b131      	cbz	r1, 37ee <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    37e0:	2901      	cmp	r1, #1
    37e2:	d007      	beq.n	37f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    37e4:	f44f 7142 	mov.w	r1, #776	; 0x308
    37e8:	a005      	add	r0, pc, #20	; (adr r0, 3800 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    37ea:	f000 f80f 	bl	380c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    37ee:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    37f2:	e001      	b.n	37f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    37f4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    37f8:	f000 0001 	and.w	r0, r0, #1
    37fc:	bd10      	pop	{r4, pc}
    37fe:	0000      	.short	0x0000
    3800:	5f66726e 	.word	0x5f66726e
    3804:	636f6c63 	.word	0x636f6c63
    3808:	00682e6b 	.word	0x00682e6b

0000380c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    380c:	4a02      	ldr	r2, [pc, #8]	; (3818 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    380e:	6852      	ldr	r2, [r2, #4]
    3810:	b102      	cbz	r2, 3814 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3812:	4710      	bx	r2
    3814:	e7fe      	b.n	3814 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3816:	0000      	.short	0x0000
    3818:	20000048 	.word	0x20000048
    381c:	4806      	ldr	r0, [pc, #24]	; (3838 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    381e:	b510      	push	{r4, lr}
    3820:	2100      	movs	r1, #0
    3822:	6001      	str	r1, [r0, #0]
    3824:	2101      	movs	r1, #1
    3826:	6001      	str	r1, [r0, #0]
    3828:	4608      	mov	r0, r1
    382a:	f008 fbc7 	bl	bfbc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    382e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3832:	2001      	movs	r0, #1
    3834:	f008 bbb5 	b.w	bfa2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3838:	40001ffc 	.word	0x40001ffc
    383c:	4807      	ldr	r0, [pc, #28]	; (385c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    383e:	b510      	push	{r4, lr}
    3840:	2101      	movs	r1, #1
    3842:	6041      	str	r1, [r0, #4]
    3844:	1e89      	subs	r1, r1, #2
    3846:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    384a:	200c      	movs	r0, #12
    384c:	f008 fbb6 	bl	bfbc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3854:	200c      	movs	r0, #12
    3856:	f008 bba4 	b.w	bfa2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    385a:	0000      	.short	0x0000
    385c:	4000c000 	.word	0x4000c000

00003860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3860:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    3862:	4a10      	ldr	r2, [pc, #64]	; (38a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3864:	6855      	ldr	r5, [r2, #4]
    3866:	b1e5      	cbz	r5, 38a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3868:	2200      	movs	r2, #0
    386a:	4603      	mov	r3, r0
    386c:	466e      	mov	r6, sp
    386e:	240a      	movs	r4, #10
    3870:	e003      	b.n	387a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    3872:	fbb0 f0f4 	udiv	r0, r0, r4
    3876:	1c52      	adds	r2, r2, #1
    3878:	b2d2      	uxtb	r2, r2
    387a:	2800      	cmp	r0, #0
    387c:	d1f9      	bne.n	3872 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    387e:	54b0      	strb	r0, [r6, r2]
    3880:	e00a      	b.n	3898 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3882:	bf00      	nop
    3884:	fbb3 f0f4 	udiv	r0, r3, r4
    3888:	fb04 3010 	mls	r0, r4, r0, r3
    388c:	fbb3 f3f4 	udiv	r3, r3, r4
    3890:	1e52      	subs	r2, r2, #1
    3892:	b2d2      	uxtb	r2, r2
    3894:	3030      	adds	r0, #48	; 0x30
    3896:	54b0      	strb	r0, [r6, r2]
    3898:	2a00      	cmp	r2, #0
    389a:	d1f3      	bne.n	3884 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    389c:	4630      	mov	r0, r6
    389e:	47a8      	blx	r5
    38a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    38a2:	e7fe      	b.n	38a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    38a4:	20000048 	.word	0x20000048

000038a8 <mpsl_init>:
    38a8:	b570      	push	{r4, r5, r6, lr}
    38aa:	4c17      	ldr	r4, [pc, #92]	; (3908 <mpsl_init+0x60>)
    38ac:	4606      	mov	r6, r0
    38ae:	460d      	mov	r5, r1
    38b0:	7860      	ldrb	r0, [r4, #1]
    38b2:	b110      	cbz	r0, 38ba <mpsl_init+0x12>
    38b4:	f04f 30ff 	mov.w	r0, #4294967295
    38b8:	bd70      	pop	{r4, r5, r6, pc}
    38ba:	b906      	cbnz	r6, 38be <mpsl_init+0x16>
    38bc:	4e13      	ldr	r6, [pc, #76]	; (390c <mpsl_init+0x64>)
    38be:	6062      	str	r2, [r4, #4]
    38c0:	7025      	strb	r5, [r4, #0]
    38c2:	f7ff ffab 	bl	381c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    38c6:	f7ff ffb9 	bl	383c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    38ca:	4630      	mov	r0, r6
    38cc:	f7ff fe92 	bl	35f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    38d0:	0006      	movs	r6, r0
    38d2:	d1f1      	bne.n	38b8 <mpsl_init+0x10>
    38d4:	f7fe ff12 	bl	26fc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    38d8:	f7ff ff0a 	bl	36f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    38dc:	f008 fa3c 	bl	bd58 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    38e0:	4628      	mov	r0, r5
    38e2:	f008 fb5e 	bl	bfa2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38e6:	2001      	movs	r0, #1
    38e8:	2d00      	cmp	r5, #0
    38ea:	db09      	blt.n	3900 <mpsl_init+0x58>
    38ec:	f005 011f 	and.w	r1, r5, #31
    38f0:	fa00 f101 	lsl.w	r1, r0, r1
    38f4:	096a      	lsrs	r2, r5, #5
    38f6:	0092      	lsls	r2, r2, #2
    38f8:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    38fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3900:	7060      	strb	r0, [r4, #1]
    3902:	4630      	mov	r0, r6
    3904:	bd70      	pop	{r4, r5, r6, pc}
    3906:	0000      	.short	0x0000
    3908:	20000048 	.word	0x20000048
    390c:	0000bfde 	.word	0x0000bfde

00003910 <mpsl_is_initialized>:
    3910:	4801      	ldr	r0, [pc, #4]	; (3918 <mpsl_is_initialized+0x8>)
    3912:	7840      	ldrb	r0, [r0, #1]
    3914:	4770      	bx	lr
    3916:	0000      	.short	0x0000
    3918:	20000048 	.word	0x20000048

0000391c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    391c:	4807      	ldr	r0, [pc, #28]	; (393c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    391e:	f990 0000 	ldrsb.w	r0, [r0]
    3922:	2800      	cmp	r0, #0
    3924:	db09      	blt.n	393a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3926:	f000 021f 	and.w	r2, r0, #31
    392a:	2101      	movs	r1, #1
    392c:	4091      	lsls	r1, r2
    392e:	0940      	lsrs	r0, r0, #5
    3930:	0080      	lsls	r0, r0, #2
    3932:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3936:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    393a:	4770      	bx	lr
    393c:	20000048 	.word	0x20000048

00003940 <mpsl_temperature_get>:
    3940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3944:	2601      	movs	r6, #1
    3946:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    394a:	0331      	lsls	r1, r6, #12
    394c:	f04f 0800 	mov.w	r8, #0
    3950:	4640      	mov	r0, r8
    3952:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3956:	f3bf 8f4f 	dsb	sy
    395a:	f3bf 8f6f 	isb	sy
    395e:	4c16      	ldr	r4, [pc, #88]	; (39b8 <mpsl_temperature_get+0x78>)
    3960:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3964:	200c      	movs	r0, #12
    3966:	f008 fb48 	bl	bffa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    396a:	4d14      	ldr	r5, [pc, #80]	; (39bc <mpsl_temperature_get+0x7c>)
    396c:	6828      	ldr	r0, [r5, #0]
    396e:	43c0      	mvns	r0, r0
    3970:	f340 1700 	sbfx	r7, r0, #4, #1
    3974:	6828      	ldr	r0, [r5, #0]
    3976:	f040 0010 	orr.w	r0, r0, #16
    397a:	6028      	str	r0, [r5, #0]
    397c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3980:	6026      	str	r6, [r4, #0]
    3982:	1c7f      	adds	r7, r7, #1
    3984:	e002      	b.n	398c <mpsl_temperature_get+0x4c>
    3986:	bf00      	nop
    3988:	f000 f890 	bl	3aac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    398c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3990:	2800      	cmp	r0, #0
    3992:	d0f9      	beq.n	3988 <mpsl_temperature_get+0x48>
    3994:	b91f      	cbnz	r7, 399e <mpsl_temperature_get+0x5e>
    3996:	6828      	ldr	r0, [r5, #0]
    3998:	f020 0010 	bic.w	r0, r0, #16
    399c:	6028      	str	r0, [r5, #0]
    399e:	4808      	ldr	r0, [pc, #32]	; (39c0 <mpsl_temperature_get+0x80>)
    39a0:	6805      	ldr	r5, [r0, #0]
    39a2:	6066      	str	r6, [r4, #4]
    39a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    39a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    39ac:	200c      	movs	r0, #12
    39ae:	f008 fb24 	bl	bffa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    39b2:	4628      	mov	r0, r5
    39b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39b8:	4000c000 	.word	0x4000c000
    39bc:	e000ed10 	.word	0xe000ed10
    39c0:	4000c508 	.word	0x4000c508

000039c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    39c4:	b510      	push	{r4, lr}
    39c6:	4602      	mov	r2, r0
    39c8:	2005      	movs	r0, #5
    39ca:	490c      	ldr	r1, [pc, #48]	; (39fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    39cc:	e004      	b.n	39d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    39ce:	bf00      	nop
    39d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    39d4:	791b      	ldrb	r3, [r3, #4]
    39d6:	b133      	cbz	r3, 39e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    39d8:	1e40      	subs	r0, r0, #1
    39da:	b2c0      	uxtb	r0, r0
    39dc:	d2f8      	bcs.n	39d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    39de:	214b      	movs	r1, #75	; 0x4b
    39e0:	2069      	movs	r0, #105	; 0x69
    39e2:	f7ff ff3d 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    39ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    39ee:	2200      	movs	r2, #0
    39f0:	714a      	strb	r2, [r1, #5]
    39f2:	718a      	strb	r2, [r1, #6]
    39f4:	2201      	movs	r2, #1
    39f6:	710a      	strb	r2, [r1, #4]
    39f8:	bd10      	pop	{r4, pc}
    39fa:	0000      	.short	0x0000
    39fc:	20000d78 	.word	0x20000d78

00003a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3a00:	b510      	push	{r4, lr}
    3a02:	2805      	cmp	r0, #5
    3a04:	d301      	bcc.n	3a0a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3a06:	215a      	movs	r1, #90	; 0x5a
    3a08:	e006      	b.n	3a18 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3a0a:	490a      	ldr	r1, [pc, #40]	; (3a34 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3a0c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3a10:	7901      	ldrb	r1, [r0, #4]
    3a12:	2901      	cmp	r1, #1
    3a14:	d003      	beq.n	3a1e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3a16:	215b      	movs	r1, #91	; 0x5b
    3a18:	2069      	movs	r0, #105	; 0x69
    3a1a:	f7ff ff21 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a1e:	7941      	ldrb	r1, [r0, #5]
    3a20:	7982      	ldrb	r2, [r0, #6]
    3a22:	1c49      	adds	r1, r1, #1
    3a24:	b2c9      	uxtb	r1, r1
    3a26:	428a      	cmp	r2, r1
    3a28:	d000      	beq.n	3a2c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3a2a:	7141      	strb	r1, [r0, #5]
    3a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3a30:	f7ff bf74 	b.w	391c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3a34:	20000d78 	.word	0x20000d78

00003a38 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3a38:	b570      	push	{r4, r5, r6, lr}
    3a3a:	2505      	movs	r5, #5
    3a3c:	4e0e      	ldr	r6, [pc, #56]	; (3a78 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3a3e:	4c0f      	ldr	r4, [pc, #60]	; (3a7c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3a40:	e016      	b.n	3a70 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3a42:	7821      	ldrb	r1, [r4, #0]
    3a44:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3a48:	7902      	ldrb	r2, [r0, #4]
    3a4a:	2a01      	cmp	r2, #1
    3a4c:	d108      	bne.n	3a60 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3a4e:	7942      	ldrb	r2, [r0, #5]
    3a50:	7983      	ldrb	r3, [r0, #6]
    3a52:	429a      	cmp	r2, r3
    3a54:	d004      	beq.n	3a60 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3a56:	7942      	ldrb	r2, [r0, #5]
    3a58:	7182      	strb	r2, [r0, #6]
    3a5a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3a5e:	4780      	blx	r0
    3a60:	7820      	ldrb	r0, [r4, #0]
    3a62:	1c40      	adds	r0, r0, #1
    3a64:	b2c0      	uxtb	r0, r0
    3a66:	7020      	strb	r0, [r4, #0]
    3a68:	2805      	cmp	r0, #5
    3a6a:	d301      	bcc.n	3a70 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3a6c:	2000      	movs	r0, #0
    3a6e:	7020      	strb	r0, [r4, #0]
    3a70:	1e6d      	subs	r5, r5, #1
    3a72:	b2ed      	uxtb	r5, r5
    3a74:	d2e5      	bcs.n	3a42 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3a76:	bd70      	pop	{r4, r5, r6, pc}
    3a78:	20000d78 	.word	0x20000d78
    3a7c:	20000289 	.word	0x20000289

00003a80 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3a80:	b500      	push	{lr}
    3a82:	f008 fae9 	bl	c058 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3a86:	b940      	cbnz	r0, 3a9a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a88:	f008 faf0 	bl	c06c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a8c:	b928      	cbnz	r0, 3a9a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a8e:	f008 fb04 	bl	c09a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a92:	b910      	cbnz	r0, 3a9a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a94:	f008 fb15 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a98:	b108      	cbz	r0, 3a9e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3a9a:	4802      	ldr	r0, [pc, #8]	; (3aa4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3a9c:	bd00      	pop	{pc}
    3a9e:	4802      	ldr	r0, [pc, #8]	; (3aa8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3aa0:	bd00      	pop	{pc}
    3aa2:	0000      	.short	0x0000
    3aa4:	4000050c 	.word	0x4000050c
    3aa8:	4001e700 	.word	0x4001e700

00003aac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3aac:	b510      	push	{r4, lr}
    3aae:	f008 fb08 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3ab2:	b330      	cbz	r0, 3b02 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3ab4:	f3ef 8010 	mrs	r0, PRIMASK
    3ab8:	b1c8      	cbz	r0, 3aee <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3aba:	2100      	movs	r1, #0
    3abc:	b672      	cpsid	i
    3abe:	4812      	ldr	r0, [pc, #72]	; (3b08 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3ac0:	6802      	ldr	r2, [r0, #0]
    3ac2:	6803      	ldr	r3, [r0, #0]
    3ac4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3ac8:	f043 0310 	orr.w	r3, r3, #16
    3acc:	6003      	str	r3, [r0, #0]
    3ace:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3ad2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3ad6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3ada:	431c      	orrs	r4, r3
    3adc:	d000      	beq.n	3ae0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3ade:	bf40      	sev
    3ae0:	bf20      	wfe
    3ae2:	bf00      	nop
    3ae4:	bf00      	nop
    3ae6:	bf00      	nop
    3ae8:	bf00      	nop
    3aea:	b112      	cbz	r2, 3af2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3aec:	e005      	b.n	3afa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3aee:	2101      	movs	r1, #1
    3af0:	e7e4      	b.n	3abc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3af2:	6802      	ldr	r2, [r0, #0]
    3af4:	f022 0210 	bic.w	r2, r2, #16
    3af8:	6002      	str	r2, [r0, #0]
    3afa:	2900      	cmp	r1, #0
    3afc:	d000      	beq.n	3b00 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3afe:	b662      	cpsie	i
    3b00:	bd10      	pop	{r4, pc}
    3b02:	bf20      	wfe
    3b04:	bd10      	pop	{r4, pc}
    3b06:	0000      	.short	0x0000
    3b08:	e000ed10 	.word	0xe000ed10

00003b0c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3b0c:	0000c34b 0000c339 0000c345 0000c333     K...9...E...3...
    3b1c:	0000c331 0000c32f 0000c351 0000c33f     1.../...Q...?...
    3b2c:	0000c329 0000c321 0000c325 0000c31b     )...!...%.......

00003b3c <mpsl_fem_lna_configuration_clear>:
    3b3c:	4801      	ldr	r0, [pc, #4]	; (3b44 <mpsl_fem_lna_configuration_clear+0x8>)
    3b3e:	6800      	ldr	r0, [r0, #0]
    3b40:	68c0      	ldr	r0, [r0, #12]
    3b42:	4700      	bx	r0
    3b44:	20000050 	.word	0x20000050

00003b48 <mpsl_fem_lna_configuration_set>:
    3b48:	4a01      	ldr	r2, [pc, #4]	; (3b50 <mpsl_fem_lna_configuration_set+0x8>)
    3b4a:	6812      	ldr	r2, [r2, #0]
    3b4c:	6852      	ldr	r2, [r2, #4]
    3b4e:	4710      	bx	r2
    3b50:	20000050 	.word	0x20000050

00003b54 <mpsl_fem_pa_configuration_clear>:
    3b54:	4801      	ldr	r0, [pc, #4]	; (3b5c <mpsl_fem_pa_configuration_clear+0x8>)
    3b56:	6800      	ldr	r0, [r0, #0]
    3b58:	6880      	ldr	r0, [r0, #8]
    3b5a:	4700      	bx	r0
    3b5c:	20000050 	.word	0x20000050

00003b60 <mpsl_fem_pa_configuration_set>:
    3b60:	4a01      	ldr	r2, [pc, #4]	; (3b68 <mpsl_fem_pa_configuration_set+0x8>)
    3b62:	6812      	ldr	r2, [r2, #0]
    3b64:	6812      	ldr	r2, [r2, #0]
    3b66:	4710      	bx	r2
    3b68:	20000050 	.word	0x20000050

00003b6c <mpsl_fem_pa_is_configured>:
    3b6c:	4901      	ldr	r1, [pc, #4]	; (3b74 <mpsl_fem_pa_is_configured+0x8>)
    3b6e:	6809      	ldr	r1, [r1, #0]
    3b70:	69c9      	ldr	r1, [r1, #28]
    3b72:	4708      	bx	r1
    3b74:	20000050 	.word	0x20000050

00003b78 <mpsl_fem_device_config_254_apply_get>:
    3b78:	4801      	ldr	r0, [pc, #4]	; (3b80 <mpsl_fem_device_config_254_apply_get+0x8>)
    3b7a:	7800      	ldrb	r0, [r0, #0]
    3b7c:	4770      	bx	lr
    3b7e:	0000      	.short	0x0000
    3b80:	2000028a 	.word	0x2000028a

00003b84 <mpsl_fem_device_config_254_apply_set>:
    3b84:	4901      	ldr	r1, [pc, #4]	; (3b8c <mpsl_fem_device_config_254_apply_set+0x8>)
    3b86:	7008      	strb	r0, [r1, #0]
    3b88:	4770      	bx	lr
    3b8a:	0000      	.short	0x0000
    3b8c:	2000028a 	.word	0x2000028a
    3b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b92:	4c17      	ldr	r4, [pc, #92]	; (3bf0 <mpsl_fem_device_config_254_apply_set+0x6c>)
    3b94:	79a0      	ldrb	r0, [r4, #6]
    3b96:	2802      	cmp	r0, #2
    3b98:	d200      	bcs.n	3b9c <mpsl_fem_device_config_254_apply_set+0x18>
    3b9a:	2002      	movs	r0, #2
    3b9c:	f88d 0001 	strb.w	r0, [sp, #1]
    3ba0:	7960      	ldrb	r0, [r4, #5]
    3ba2:	2803      	cmp	r0, #3
    3ba4:	d200      	bcs.n	3ba8 <mpsl_fem_device_config_254_apply_set+0x24>
    3ba6:	2003      	movs	r0, #3
    3ba8:	f88d 0000 	strb.w	r0, [sp]
    3bac:	7920      	ldrb	r0, [r4, #4]
    3bae:	f8ad 0004 	strh.w	r0, [sp, #4]
    3bb2:	78e0      	ldrb	r0, [r4, #3]
    3bb4:	f8ad 0002 	strh.w	r0, [sp, #2]
    3bb8:	4668      	mov	r0, sp
    3bba:	f006 faaf 	bl	a11c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3bbe:	b108      	cbz	r0, 3bc4 <mpsl_fem_device_config_254_apply_set+0x40>
    3bc0:	219f      	movs	r1, #159	; 0x9f
    3bc2:	e010      	b.n	3be6 <mpsl_fem_device_config_254_apply_set+0x62>
    3bc4:	68a0      	ldr	r0, [r4, #8]
    3bc6:	9002      	str	r0, [sp, #8]
    3bc8:	a802      	add	r0, sp, #8
    3bca:	f006 fabd 	bl	a148 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3bce:	b108      	cbz	r0, 3bd4 <mpsl_fem_device_config_254_apply_set+0x50>
    3bd0:	21a3      	movs	r1, #163	; 0xa3
    3bd2:	e008      	b.n	3be6 <mpsl_fem_device_config_254_apply_set+0x62>
    3bd4:	4807      	ldr	r0, [pc, #28]	; (3bf4 <mpsl_fem_device_config_254_apply_set+0x70>)
    3bd6:	6800      	ldr	r0, [r0, #0]
    3bd8:	9003      	str	r0, [sp, #12]
    3bda:	a803      	add	r0, sp, #12
    3bdc:	f00b f933 	bl	ee46 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3be0:	2800      	cmp	r0, #0
    3be2:	d003      	beq.n	3bec <mpsl_fem_device_config_254_apply_set+0x68>
    3be4:	21a7      	movs	r1, #167	; 0xa7
    3be6:	2003      	movs	r0, #3
    3be8:	f000 f8ba 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bec:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3bee:	0000      	.short	0x0000
    3bf0:	2000005c 	.word	0x2000005c
    3bf4:	00003e38 	.word	0x00003e38

00003bf8 <sdc_build_revision_get>:
    3bf8:	b510      	push	{r4, lr}
    3bfa:	b128      	cbz	r0, 3c08 <sdc_build_revision_get+0x10>
    3bfc:	2214      	movs	r2, #20
    3bfe:	4904      	ldr	r1, [pc, #16]	; (3c10 <sdc_build_revision_get+0x18>)
    3c00:	f008 fab1 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c04:	2000      	movs	r0, #0
    3c06:	bd10      	pop	{r4, pc}
    3c08:	f06f 0015 	mvn.w	r0, #21
    3c0c:	bd10      	pop	{r4, pc}
    3c0e:	0000      	.short	0x0000
    3c10:	00003e6a 	.word	0x00003e6a

00003c14 <sdc_cfg_set>:
    3c14:	b510      	push	{r4, lr}
    3c16:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3c1a:	bb40      	cbnz	r0, 3c6e <sdc_cfg_set+0x5a>
    3c1c:	4b15      	ldr	r3, [pc, #84]	; (3c74 <sdc_cfg_set+0x60>)
    3c1e:	7898      	ldrb	r0, [r3, #2]
    3c20:	b108      	cbz	r0, 3c26 <sdc_cfg_set+0x12>
    3c22:	11a0      	asrs	r0, r4, #6
    3c24:	bd10      	pop	{r4, pc}
    3c26:	b1c9      	cbz	r1, 3c5c <sdc_cfg_set+0x48>
    3c28:	b132      	cbz	r2, 3c38 <sdc_cfg_set+0x24>
    3c2a:	2906      	cmp	r1, #6
    3c2c:	d21f      	bcs.n	3c6e <sdc_cfg_set+0x5a>
    3c2e:	e8df f001 	tbb	[pc, r1]
    3c32:	061e      	.short	0x061e
    3c34:	13100c09 	.word	0x13100c09
    3c38:	f06f 0015 	mvn.w	r0, #21
    3c3c:	bd10      	pop	{r4, pc}
    3c3e:	7810      	ldrb	r0, [r2, #0]
    3c40:	7218      	strb	r0, [r3, #8]
    3c42:	e00b      	b.n	3c5c <sdc_cfg_set+0x48>
    3c44:	7810      	ldrb	r0, [r2, #0]
    3c46:	7258      	strb	r0, [r3, #9]
    3c48:	e008      	b.n	3c5c <sdc_cfg_set+0x48>
    3c4a:	6810      	ldr	r0, [r2, #0]
    3c4c:	f8c3 000b 	str.w	r0, [r3, #11]
    3c50:	e004      	b.n	3c5c <sdc_cfg_set+0x48>
    3c52:	6810      	ldr	r0, [r2, #0]
    3c54:	6118      	str	r0, [r3, #16]
    3c56:	e001      	b.n	3c5c <sdc_cfg_set+0x48>
    3c58:	7810      	ldrb	r0, [r2, #0]
    3c5a:	7298      	strb	r0, [r3, #10]
    3c5c:	4905      	ldr	r1, [pc, #20]	; (3c74 <sdc_cfg_set+0x60>)
    3c5e:	2201      	movs	r2, #1
    3c60:	3108      	adds	r1, #8
    3c62:	2000      	movs	r0, #0
    3c64:	f008 fb76 	bl	c354 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    3c68:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3c6c:	dbe6      	blt.n	3c3c <sdc_cfg_set+0x28>
    3c6e:	4620      	mov	r0, r4
    3c70:	bd10      	pop	{r4, pc}
    3c72:	0000      	.short	0x0000
    3c74:	20000054 	.word	0x20000054

00003c78 <sdc_enable>:
    3c78:	b538      	push	{r3, r4, r5, lr}
    3c7a:	460d      	mov	r5, r1
    3c7c:	0004      	movs	r4, r0
    3c7e:	d020      	beq.n	3cc2 <sdc_enable+0x4a>
    3c80:	b1fd      	cbz	r5, 3cc2 <sdc_enable+0x4a>
    3c82:	f000 f927 	bl	3ed4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3c86:	b1f8      	cbz	r0, 3cc8 <sdc_enable+0x50>
    3c88:	4620      	mov	r0, r4
    3c8a:	f7ff fe9b 	bl	39c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3c8e:	4c10      	ldr	r4, [pc, #64]	; (3cd0 <sdc_enable+0x58>)
    3c90:	2200      	movs	r2, #0
    3c92:	f104 0108 	add.w	r1, r4, #8
    3c96:	7020      	strb	r0, [r4, #0]
    3c98:	4628      	mov	r0, r5
    3c9a:	f008 fb5b 	bl	c354 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    3c9e:	f00b fcab 	bl	f5f8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3ca2:	2100      	movs	r1, #0
    3ca4:	7820      	ldrb	r0, [r4, #0]
    3ca6:	f006 fcc9 	bl	a63c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3caa:	7860      	ldrb	r0, [r4, #1]
    3cac:	f88d 0000 	strb.w	r0, [sp]
    3cb0:	4668      	mov	r0, sp
    3cb2:	f00b f8bc 	bl	ee2e <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3cb6:	f7ff ff6b 	bl	3b90 <mpsl_fem_device_config_254_apply_set+0xc>
    3cba:	2001      	movs	r0, #1
    3cbc:	70a0      	strb	r0, [r4, #2]
    3cbe:	2000      	movs	r0, #0
    3cc0:	bd38      	pop	{r3, r4, r5, pc}
    3cc2:	f06f 0015 	mvn.w	r0, #21
    3cc6:	bd38      	pop	{r3, r4, r5, pc}
    3cc8:	f04f 30ff 	mov.w	r0, #4294967295
    3ccc:	bd38      	pop	{r3, r4, r5, pc}
    3cce:	0000      	.short	0x0000
    3cd0:	20000054 	.word	0x20000054

00003cd4 <sdc_init>:
    3cd4:	b570      	push	{r4, r5, r6, lr}
    3cd6:	0004      	movs	r4, r0
    3cd8:	d00b      	beq.n	3cf2 <sdc_init+0x1e>
    3cda:	f7ff fe19 	bl	3910 <mpsl_is_initialized>
    3cde:	f04f 35ff 	mov.w	r5, #4294967295
    3ce2:	b120      	cbz	r0, 3cee <sdc_init+0x1a>
    3ce4:	f7ff fcd8 	bl	3698 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3ce8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3cec:	d904      	bls.n	3cf8 <sdc_init+0x24>
    3cee:	4628      	mov	r0, r5
    3cf0:	bd70      	pop	{r4, r5, r6, pc}
    3cf2:	f06f 0015 	mvn.w	r0, #21
    3cf6:	bd70      	pop	{r4, r5, r6, pc}
    3cf8:	2200      	movs	r2, #0
    3cfa:	4b14      	ldr	r3, [pc, #80]	; (3d4c <sdc_init+0x78>)
    3cfc:	4611      	mov	r1, r2
    3cfe:	bf00      	nop
    3d00:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    3d04:	4285      	cmp	r5, r0
    3d06:	d303      	bcc.n	3d10 <sdc_init+0x3c>
    3d08:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3d0c:	7882      	ldrb	r2, [r0, #2]
    3d0e:	e003      	b.n	3d18 <sdc_init+0x44>
    3d10:	1c49      	adds	r1, r1, #1
    3d12:	b2c9      	uxtb	r1, r1
    3d14:	290c      	cmp	r1, #12
    3d16:	d3f3      	bcc.n	3d00 <sdc_init+0x2c>
    3d18:	480d      	ldr	r0, [pc, #52]	; (3d50 <sdc_init+0x7c>)
    3d1a:	7042      	strb	r2, [r0, #1]
    3d1c:	6044      	str	r4, [r0, #4]
    3d1e:	480d      	ldr	r0, [pc, #52]	; (3d54 <sdc_init+0x80>)
    3d20:	f000 f9ea 	bl	40f8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3d24:	f3ef 8410 	mrs	r4, PRIMASK
    3d28:	b672      	cpsid	i
    3d2a:	480b      	ldr	r0, [pc, #44]	; (3d58 <sdc_init+0x84>)
    3d2c:	f06f 010c 	mvn.w	r1, #12
    3d30:	f000 fd18 	bl	4764 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3d34:	4809      	ldr	r0, [pc, #36]	; (3d5c <sdc_init+0x88>)
    3d36:	f000 fdd9 	bl	48ec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3d3a:	b118      	cbz	r0, 3d44 <sdc_init+0x70>
    3d3c:	21b5      	movs	r1, #181	; 0xb5
    3d3e:	2003      	movs	r0, #3
    3d40:	f000 f80e 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d44:	b904      	cbnz	r4, 3d48 <sdc_init+0x74>
    3d46:	b662      	cpsie	i
    3d48:	2000      	movs	r0, #0
    3d4a:	bd70      	pop	{r4, r5, r6, pc}
    3d4c:	00003e3a 	.word	0x00003e3a
    3d50:	20000054 	.word	0x20000054
    3d54:	00003b91 	.word	0x00003b91
    3d58:	4000c000 	.word	0x4000c000
    3d5c:	00003f01 	.word	0x00003f01

00003d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3d60:	b50e      	push	{r1, r2, r3, lr}
    3d62:	b672      	cpsid	i
    3d64:	4a15      	ldr	r2, [pc, #84]	; (3dbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3d66:	6855      	ldr	r5, [r2, #4]
    3d68:	b1d5      	cbz	r5, 3da0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3d6a:	2200      	movs	r2, #0
    3d6c:	4603      	mov	r3, r0
    3d6e:	466e      	mov	r6, sp
    3d70:	240a      	movs	r4, #10
    3d72:	e003      	b.n	3d7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3d74:	fbb0 f0f4 	udiv	r0, r0, r4
    3d78:	1c52      	adds	r2, r2, #1
    3d7a:	b2d2      	uxtb	r2, r2
    3d7c:	2800      	cmp	r0, #0
    3d7e:	d1f9      	bne.n	3d74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3d80:	54b0      	strb	r0, [r6, r2]
    3d82:	e009      	b.n	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3d84:	fbb3 f0f4 	udiv	r0, r3, r4
    3d88:	fb04 3010 	mls	r0, r4, r0, r3
    3d8c:	fbb3 f3f4 	udiv	r3, r3, r4
    3d90:	1e52      	subs	r2, r2, #1
    3d92:	b2d2      	uxtb	r2, r2
    3d94:	3030      	adds	r0, #48	; 0x30
    3d96:	54b0      	strb	r0, [r6, r2]
    3d98:	2a00      	cmp	r2, #0
    3d9a:	d1f3      	bne.n	3d84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3d9c:	4630      	mov	r0, r6
    3d9e:	47a8      	blx	r5
    3da0:	f3bf 8f4f 	dsb	sy
    3da4:	4806      	ldr	r0, [pc, #24]	; (3dc0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3da6:	6801      	ldr	r1, [r0, #0]
    3da8:	4a06      	ldr	r2, [pc, #24]	; (3dc4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3daa:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3dae:	4311      	orrs	r1, r2
    3db0:	6001      	str	r1, [r0, #0]
    3db2:	f3bf 8f4f 	dsb	sy
    3db6:	bf00      	nop
    3db8:	e7fd      	b.n	3db6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3dba:	0000      	.short	0x0000
    3dbc:	20000054 	.word	0x20000054
    3dc0:	e000ed0c 	.word	0xe000ed0c
    3dc4:	05fa0004 	.word	0x05fa0004

00003dc8 <sdc_support_adv>:
    3dc8:	4805      	ldr	r0, [pc, #20]	; (3de0 <sdc_support_adv+0x18>)
    3dca:	b510      	push	{r4, lr}
    3dcc:	7880      	ldrb	r0, [r0, #2]
    3dce:	b110      	cbz	r0, 3dd6 <sdc_support_adv+0xe>
    3dd0:	f04f 30ff 	mov.w	r0, #4294967295
    3dd4:	bd10      	pop	{r4, pc}
    3dd6:	f006 fc51 	bl	a67c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3dda:	2000      	movs	r0, #0
    3ddc:	bd10      	pop	{r4, pc}
    3dde:	0000      	.short	0x0000
    3de0:	20000054 	.word	0x20000054

00003de4 <sdc_support_dle>:
    3de4:	4805      	ldr	r0, [pc, #20]	; (3dfc <sdc_support_dle+0x18>)
    3de6:	b510      	push	{r4, lr}
    3de8:	7880      	ldrb	r0, [r0, #2]
    3dea:	b110      	cbz	r0, 3df2 <sdc_support_dle+0xe>
    3dec:	f04f 30ff 	mov.w	r0, #4294967295
    3df0:	bd10      	pop	{r4, pc}
    3df2:	f006 f9c1 	bl	a178 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3df6:	2000      	movs	r0, #0
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	0000      	.short	0x0000
    3dfc:	20000054 	.word	0x20000054

00003e00 <sdc_support_le_2m_phy>:
    3e00:	4805      	ldr	r0, [pc, #20]	; (3e18 <sdc_support_le_2m_phy+0x18>)
    3e02:	b510      	push	{r4, lr}
    3e04:	7880      	ldrb	r0, [r0, #2]
    3e06:	b110      	cbz	r0, 3e0e <sdc_support_le_2m_phy+0xe>
    3e08:	f04f 30ff 	mov.w	r0, #4294967295
    3e0c:	bd10      	pop	{r4, pc}
    3e0e:	f00b f968 	bl	f0e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3e12:	2000      	movs	r0, #0
    3e14:	bd10      	pop	{r4, pc}
    3e16:	0000      	.short	0x0000
    3e18:	20000054 	.word	0x20000054

00003e1c <sdc_support_slave>:
    3e1c:	4805      	ldr	r0, [pc, #20]	; (3e34 <sdc_support_slave+0x18>)
    3e1e:	b510      	push	{r4, lr}
    3e20:	7880      	ldrb	r0, [r0, #2]
    3e22:	b110      	cbz	r0, 3e2a <sdc_support_slave+0xe>
    3e24:	f04f 30ff 	mov.w	r0, #4294967295
    3e28:	bd10      	pop	{r4, pc}
    3e2a:	f006 fc39 	bl	a6a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3e2e:	2000      	movs	r0, #0
    3e30:	bd10      	pop	{r4, pc}
    3e32:	0000      	.short	0x0000
    3e34:	20000054 	.word	0x20000054
    3e38:	00010001 	.word	0x00010001
    3e3c:	0002000b 	.word	0x0002000b
    3e40:	0005000a 	.word	0x0005000a
    3e44:	000a0009 	.word	0x000a0009
    3e48:	00140008 	.word	0x00140008
    3e4c:	001e0007 	.word	0x001e0007
    3e50:	00320006 	.word	0x00320006
    3e54:	004b0005 	.word	0x004b0005
    3e58:	00640004 	.word	0x00640004
    3e5c:	00960003 	.word	0x00960003
    3e60:	00fa0002 	.word	0x00fa0002
    3e64:	01f40001 	.word	0x01f40001
    3e68:	03ef0000 	.word	0x03ef0000
    3e6c:	96799c09 	.word	0x96799c09
    3e70:	08cc7db6 	.word	0x08cc7db6
    3e74:	0fcfb29d 	.word	0x0fcfb29d
    3e78:	ce973cda 	.word	0xce973cda
    3e7c:	0000780d 	.word	0x0000780d

00003e80 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3e80:	4a05      	ldr	r2, [pc, #20]	; (3e98 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3e82:	b510      	push	{r4, lr}
    3e84:	6852      	ldr	r2, [r2, #4]
    3e86:	b112      	cbz	r2, 3e8e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e8c:	4710      	bx	r2
    3e8e:	2183      	movs	r1, #131	; 0x83
    3e90:	2004      	movs	r0, #4
    3e92:	f7ff ff65 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e96:	0000      	.short	0x0000
    3e98:	20000da0 	.word	0x20000da0

00003e9c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3e9c:	4a05      	ldr	r2, [pc, #20]	; (3eb4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3e9e:	b510      	push	{r4, lr}
    3ea0:	6812      	ldr	r2, [r2, #0]
    3ea2:	b112      	cbz	r2, 3eaa <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ea8:	4710      	bx	r2
    3eaa:	217d      	movs	r1, #125	; 0x7d
    3eac:	2004      	movs	r0, #4
    3eae:	f7ff ff57 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3eb2:	0000      	.short	0x0000
    3eb4:	20000da0 	.word	0x20000da0

00003eb8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3eb8:	4a05      	ldr	r2, [pc, #20]	; (3ed0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3eba:	b510      	push	{r4, lr}
    3ebc:	6892      	ldr	r2, [r2, #8]
    3ebe:	b112      	cbz	r2, 3ec6 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ec4:	4710      	bx	r2
    3ec6:	2189      	movs	r1, #137	; 0x89
    3ec8:	2004      	movs	r0, #4
    3eca:	f7ff ff49 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ece:	0000      	.short	0x0000
    3ed0:	20000da0 	.word	0x20000da0

00003ed4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3ed4:	4805      	ldr	r0, [pc, #20]	; (3eec <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3ed6:	6801      	ldr	r1, [r0, #0]
    3ed8:	b129      	cbz	r1, 3ee6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3eda:	6841      	ldr	r1, [r0, #4]
    3edc:	b119      	cbz	r1, 3ee6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ede:	6880      	ldr	r0, [r0, #8]
    3ee0:	b108      	cbz	r0, 3ee6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ee2:	2001      	movs	r0, #1
    3ee4:	4770      	bx	lr
    3ee6:	2000      	movs	r0, #0
    3ee8:	4770      	bx	lr
    3eea:	0000      	.short	0x0000
    3eec:	20000da0 	.word	0x20000da0

00003ef0 <sdc_rand_source_register>:
    3ef0:	4902      	ldr	r1, [pc, #8]	; (3efc <sdc_rand_source_register+0xc>)
    3ef2:	c80d      	ldmia	r0, {r0, r2, r3}
    3ef4:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3ef8:	2000      	movs	r0, #0
    3efa:	4770      	bx	lr
    3efc:	20000da0 	.word	0x20000da0

00003f00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f02:	4c12      	ldr	r4, [pc, #72]	; (3f4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3f04:	2600      	movs	r6, #0
    3f06:	6825      	ldr	r5, [r4, #0]
    3f08:	e011      	b.n	3f2e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f0a:	9800      	ldr	r0, [sp, #0]
    3f0c:	2802      	cmp	r0, #2
    3f0e:	d002      	beq.n	3f16 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3f10:	2803      	cmp	r0, #3
    3f12:	d10c      	bne.n	3f2e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f14:	e006      	b.n	3f24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3f16:	6820      	ldr	r0, [r4, #0]
    3f18:	b110      	cbz	r0, 3f20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3f1a:	2000      	movs	r0, #0
    3f1c:	6026      	str	r6, [r4, #0]
    3f1e:	e005      	b.n	3f2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3f20:	2128      	movs	r1, #40	; 0x28
    3f22:	e00c      	b.n	3f3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f24:	6820      	ldr	r0, [r4, #0]
    3f26:	b168      	cbz	r0, 3f44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3f28:	2001      	movs	r0, #1
    3f2a:	6026      	str	r6, [r4, #0]
    3f2c:	47a8      	blx	r5
    3f2e:	4668      	mov	r0, sp
    3f30:	f000 fcae 	bl	4890 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3f34:	2800      	cmp	r0, #0
    3f36:	d0e8      	beq.n	3f0a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3f38:	2805      	cmp	r0, #5
    3f3a:	d005      	beq.n	3f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3f3c:	2135      	movs	r1, #53	; 0x35
    3f3e:	2004      	movs	r0, #4
    3f40:	f7ff ff0e 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f44:	212d      	movs	r1, #45	; 0x2d
    3f46:	e7fa      	b.n	3f3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f4a:	0000      	.short	0x0000
    3f4c:	20000068 	.word	0x20000068
    3f50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3f52:	4d21      	ldr	r5, [pc, #132]	; (3fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f54:	4606      	mov	r6, r0
    3f56:	7828      	ldrb	r0, [r5, #0]
    3f58:	b148      	cbz	r0, 3f6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6e>
    3f5a:	78ac      	ldrb	r4, [r5, #2]
    3f5c:	1c69      	adds	r1, r5, #1
    3f5e:	1ca4      	adds	r4, r4, #2
    3f60:	4622      	mov	r2, r4
    3f62:	4630      	mov	r0, r6
    3f64:	f008 f8ff 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f68:	2000      	movs	r0, #0
    3f6a:	7028      	strb	r0, [r5, #0]
    3f6c:	e024      	b.n	3fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3f6e:	481a      	ldr	r0, [pc, #104]	; (3fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f70:	3844      	subs	r0, #68	; 0x44
    3f72:	f006 f959 	bl	a228 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3f76:	2800      	cmp	r0, #0
    3f78:	d01f      	beq.n	3fba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3f7a:	4c17      	ldr	r4, [pc, #92]	; (3fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f7c:	3c44      	subs	r4, #68	; 0x44
    3f7e:	7820      	ldrb	r0, [r4, #0]
    3f80:	2811      	cmp	r0, #17
    3f82:	d104      	bne.n	3f8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8e>
    3f84:	210a      	movs	r1, #10
    3f86:	203e      	movs	r0, #62	; 0x3e
    3f88:	f008 fa80 	bl	c48c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f8c:	b118      	cbz	r0, 3f96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f8e:	7820      	ldrb	r0, [r4, #0]
    3f90:	2808      	cmp	r0, #8
    3f92:	d006      	beq.n	3fa2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa2>
    3f94:	e00a      	b.n	3fac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    3f96:	4910      	ldr	r1, [pc, #64]	; (3fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f98:	4630      	mov	r0, r6
    3f9a:	3944      	subs	r1, #68	; 0x44
    3f9c:	f008 fc7f 	bl	c89e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3fa0:	e009      	b.n	3fb6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb6>
    3fa2:	2105      	movs	r1, #5
    3fa4:	203e      	movs	r0, #62	; 0x3e
    3fa6:	f008 fa71 	bl	c48c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3faa:	b138      	cbz	r0, 3fbc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    3fac:	490a      	ldr	r1, [pc, #40]	; (3fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3fae:	4630      	mov	r0, r6
    3fb0:	3944      	subs	r1, #68	; 0x44
    3fb2:	f008 fac9 	bl	c548 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3fb6:	4604      	mov	r4, r0
    3fb8:	4620      	mov	r0, r4
    3fba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3fbc:	88a0      	ldrh	r0, [r4, #4]
    3fbe:	f8ad 0000 	strh.w	r0, [sp]
    3fc2:	a901      	add	r1, sp, #4
    3fc4:	4668      	mov	r0, sp
    3fc6:	f008 fd84 	bl	cad2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3fca:	b118      	cbz	r0, 3fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>
    3fcc:	2197      	movs	r1, #151	; 0x97
    3fce:	2008      	movs	r0, #8
    3fd0:	f7ff fec6 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fd4:	2400      	movs	r4, #0
    3fd6:	e7ef      	b.n	3fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3fd8:	20000e84 	.word	0x20000e84
    3fdc:	b570      	push	{r4, r5, r6, lr}
    3fde:	780a      	ldrb	r2, [r1, #0]
    3fe0:	7082      	strb	r2, [r0, #2]
    3fe2:	b33a      	cbz	r2, 4034 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3fe4:	2a01      	cmp	r2, #1
    3fe6:	d825      	bhi.n	4034 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3fe8:	2313      	movs	r3, #19
    3fea:	7003      	strb	r3, [r0, #0]
    3fec:	2300      	movs	r3, #0
    3fee:	e00a      	b.n	4006 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    3ff0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3ff4:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3ff8:	78a6      	ldrb	r6, [r4, #2]
    3ffa:	70ee      	strb	r6, [r5, #3]
    3ffc:	8864      	ldrh	r4, [r4, #2]
    3ffe:	0a24      	lsrs	r4, r4, #8
    4000:	1c5b      	adds	r3, r3, #1
    4002:	712c      	strb	r4, [r5, #4]
    4004:	b2db      	uxtb	r3, r3
    4006:	4293      	cmp	r3, r2
    4008:	d3f2      	bcc.n	3ff0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    400a:	2300      	movs	r3, #0
    400c:	e00b      	b.n	4026 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    400e:	bf00      	nop
    4010:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4014:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4018:	792e      	ldrb	r6, [r5, #4]
    401a:	7166      	strb	r6, [r4, #5]
    401c:	88ad      	ldrh	r5, [r5, #4]
    401e:	0a2d      	lsrs	r5, r5, #8
    4020:	1c5b      	adds	r3, r3, #1
    4022:	71a5      	strb	r5, [r4, #6]
    4024:	b2db      	uxtb	r3, r3
    4026:	4293      	cmp	r3, r2
    4028:	d3f2      	bcc.n	4010 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    402a:	2101      	movs	r1, #1
    402c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4030:	b2c0      	uxtb	r0, r0
    4032:	bd70      	pop	{r4, r5, r6, pc}
    4034:	2000      	movs	r0, #0
    4036:	bd70      	pop	{r4, r5, r6, pc}

00004038 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4038:	2101      	movs	r1, #1
    403a:	4a0c      	ldr	r2, [pc, #48]	; (406c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    403c:	2840      	cmp	r0, #64	; 0x40
    403e:	d20c      	bcs.n	405a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4040:	2820      	cmp	r0, #32
    4042:	d803      	bhi.n	404c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4044:	1e40      	subs	r0, r0, #1
    4046:	4081      	lsls	r1, r0
    4048:	6810      	ldr	r0, [r2, #0]
    404a:	e002      	b.n	4052 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    404c:	3821      	subs	r0, #33	; 0x21
    404e:	4081      	lsls	r1, r0
    4050:	6850      	ldr	r0, [r2, #4]
    4052:	4201      	tst	r1, r0
    4054:	d107      	bne.n	4066 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4056:	2000      	movs	r0, #0
    4058:	4770      	bx	lr
    405a:	28ff      	cmp	r0, #255	; 0xff
    405c:	d003      	beq.n	4066 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    405e:	3840      	subs	r0, #64	; 0x40
    4060:	4081      	lsls	r1, r0
    4062:	6890      	ldr	r0, [r2, #8]
    4064:	e7f5      	b.n	4052 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4066:	2001      	movs	r0, #1
    4068:	4770      	bx	lr
    406a:	0000      	.short	0x0000
    406c:	2000006c 	.word	0x2000006c

00004070 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4070:	2101      	movs	r1, #1
    4072:	1e40      	subs	r0, r0, #1
    4074:	4081      	lsls	r1, r0
    4076:	4804      	ldr	r0, [pc, #16]	; (4088 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4078:	68c0      	ldr	r0, [r0, #12]
    407a:	4201      	tst	r1, r0
    407c:	d001      	beq.n	4082 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    407e:	2001      	movs	r0, #1
    4080:	4770      	bx	lr
    4082:	2000      	movs	r0, #0
    4084:	4770      	bx	lr
    4086:	0000      	.short	0x0000
    4088:	2000006c 	.word	0x2000006c

0000408c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    408c:	4901      	ldr	r1, [pc, #4]	; (4094 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    408e:	6800      	ldr	r0, [r0, #0]
    4090:	60c8      	str	r0, [r1, #12]
    4092:	4770      	bx	lr
    4094:	2000006c 	.word	0x2000006c

00004098 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4098:	4904      	ldr	r1, [pc, #16]	; (40ac <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    409a:	6802      	ldr	r2, [r0, #0]
    409c:	6840      	ldr	r0, [r0, #4]
    409e:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    40a2:	600a      	str	r2, [r1, #0]
    40a4:	4a02      	ldr	r2, [pc, #8]	; (40b0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    40a6:	4310      	orrs	r0, r2
    40a8:	6048      	str	r0, [r1, #4]
    40aa:	4770      	bx	lr
    40ac:	2000006c 	.word	0x2000006c
    40b0:	024007f8 	.word	0x024007f8

000040b4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    40b4:	4901      	ldr	r1, [pc, #4]	; (40bc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    40b6:	6800      	ldr	r0, [r0, #0]
    40b8:	6088      	str	r0, [r1, #8]
    40ba:	4770      	bx	lr
    40bc:	2000006c 	.word	0x2000006c

000040c0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    40c0:	4805      	ldr	r0, [pc, #20]	; (40d8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    40c2:	f04f 31ff 	mov.w	r1, #4294967295
    40c6:	6001      	str	r1, [r0, #0]
    40c8:	0cc9      	lsrs	r1, r1, #19
    40ca:	6041      	str	r1, [r0, #4]
    40cc:	2100      	movs	r1, #0
    40ce:	6081      	str	r1, [r0, #8]
    40d0:	211f      	movs	r1, #31
    40d2:	60c1      	str	r1, [r0, #12]
    40d4:	4770      	bx	lr
    40d6:	0000      	.short	0x0000
    40d8:	2000006c 	.word	0x2000006c

000040dc <sdc_hci_cmd_cb_reset>:
    40dc:	b510      	push	{r4, lr}
    40de:	f7ff ffef 	bl	40c0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    40e2:	f00a ff75 	bl	efd0 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    40e6:	4604      	mov	r4, r0
    40e8:	4802      	ldr	r0, [pc, #8]	; (40f4 <sdc_hci_cmd_cb_reset+0x18>)
    40ea:	6800      	ldr	r0, [r0, #0]
    40ec:	b100      	cbz	r0, 40f0 <sdc_hci_cmd_cb_reset+0x14>
    40ee:	4780      	blx	r0
    40f0:	4620      	mov	r0, r4
    40f2:	bd10      	pop	{r4, pc}
    40f4:	2000007c 	.word	0x2000007c

000040f8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    40f8:	4901      	ldr	r1, [pc, #4]	; (4100 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    40fa:	6008      	str	r0, [r1, #0]
    40fc:	4770      	bx	lr
    40fe:	0000      	.short	0x0000
    4100:	2000007c 	.word	0x2000007c

00004104 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4104:	2102      	movs	r1, #2
    4106:	8001      	strh	r1, [r0, #0]
    4108:	8041      	strh	r1, [r0, #2]
    410a:	2100      	movs	r1, #0
    410c:	7101      	strb	r1, [r0, #4]
    410e:	21ef      	movs	r1, #239	; 0xef
    4110:	7141      	strb	r1, [r0, #5]
    4112:	f640 1103 	movw	r1, #2307	; 0x903
    4116:	80c1      	strh	r1, [r0, #6]
    4118:	4901      	ldr	r1, [pc, #4]	; (4120 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    411a:	6081      	str	r1, [r0, #8]
    411c:	2000      	movs	r0, #0
    411e:	4770      	bx	lr
    4120:	b696799c 	.word	0xb696799c

00004124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4124:	b510      	push	{r4, lr}
    4126:	2802      	cmp	r0, #2
    4128:	d304      	bcc.n	4134 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    412a:	f240 116b 	movw	r1, #363	; 0x16b
    412e:	2017      	movs	r0, #23
    4130:	f7ff fe16 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4134:	4901      	ldr	r1, [pc, #4]	; (413c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4136:	5c08      	ldrb	r0, [r1, r0]
    4138:	bd10      	pop	{r4, pc}
    413a:	0000      	.short	0x0000
    413c:	20000dac 	.word	0x20000dac

00004140 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4142:	4605      	mov	r5, r0
    4144:	9000      	str	r0, [sp, #0]
    4146:	4291      	cmp	r1, r2
    4148:	d201      	bcs.n	414e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    414a:	4614      	mov	r4, r2
    414c:	e000      	b.n	4150 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    414e:	460c      	mov	r4, r1
    4150:	b155      	cbz	r5, 4168 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4152:	2700      	movs	r7, #0
    4154:	1ce8      	adds	r0, r5, #3
    4156:	f020 0003 	bic.w	r0, r0, #3
    415a:	42a8      	cmp	r0, r5
    415c:	d006      	beq.n	416c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    415e:	f240 113f 	movw	r1, #319	; 0x13f
    4162:	2017      	movs	r0, #23
    4164:	f7ff fdfc 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4168:	2701      	movs	r7, #1
    416a:	e7f3      	b.n	4154 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    416c:	4e12      	ldr	r6, [pc, #72]	; (41b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    416e:	4668      	mov	r0, sp
    4170:	7031      	strb	r1, [r6, #0]
    4172:	7072      	strb	r2, [r6, #1]
    4174:	4639      	mov	r1, r7
    4176:	f000 f8ed 	bl	4354 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    417a:	2000      	movs	r0, #0
    417c:	4603      	mov	r3, r0
    417e:	9900      	ldr	r1, [sp, #0]
    4180:	1cc9      	adds	r1, r1, #3
    4182:	f021 0103 	bic.w	r1, r1, #3
    4186:	9100      	str	r1, [sp, #0]
    4188:	b967      	cbnz	r7, 41a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    418a:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    418e:	60d1      	str	r1, [r2, #12]
    4190:	2100      	movs	r1, #0
    4192:	e005      	b.n	41a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4194:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4198:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    419c:	1c49      	adds	r1, r1, #1
    419e:	b2c9      	uxtb	r1, r1
    41a0:	42a1      	cmp	r1, r4
    41a2:	d3f7      	bcc.n	4194 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    41a4:	9900      	ldr	r1, [sp, #0]
    41a6:	1c40      	adds	r0, r0, #1
    41a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    41ac:	b2c0      	uxtb	r0, r0
    41ae:	9100      	str	r1, [sp, #0]
    41b0:	2802      	cmp	r0, #2
    41b2:	d3e4      	bcc.n	417e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    41b4:	1b48      	subs	r0, r1, r5
    41b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b8:	20000dac 	.word	0x20000dac

000041bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    41bc:	b570      	push	{r4, r5, r6, lr}
    41be:	4604      	mov	r4, r0
    41c0:	f009 f843 	bl	d24a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    41c4:	b108      	cbz	r0, 41ca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    41c6:	2010      	movs	r0, #16
    41c8:	bd70      	pop	{r4, r5, r6, pc}
    41ca:	7825      	ldrb	r5, [r4, #0]
    41cc:	f000 f8fe 	bl	43cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    41d0:	4602      	mov	r2, r0
    41d2:	480c      	ldr	r0, [pc, #48]	; (4204 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    41d4:	8861      	ldrh	r1, [r4, #2]
    41d6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    41da:	e00e      	b.n	41fa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    41dc:	68c3      	ldr	r3, [r0, #12]
    41de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    41e2:	b143      	cbz	r3, 41f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    41e4:	1c4a      	adds	r2, r1, #1
    41e6:	8062      	strh	r2, [r4, #2]
    41e8:	80a1      	strh	r1, [r4, #4]
    41ea:	68c0      	ldr	r0, [r0, #12]
    41ec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    41f0:	60a0      	str	r0, [r4, #8]
    41f2:	2000      	movs	r0, #0
    41f4:	bd70      	pop	{r4, r5, r6, pc}
    41f6:	1c49      	adds	r1, r1, #1
    41f8:	b289      	uxth	r1, r1
    41fa:	4291      	cmp	r1, r2
    41fc:	d3ee      	bcc.n	41dc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    41fe:	8061      	strh	r1, [r4, #2]
    4200:	2005      	movs	r0, #5
    4202:	bd70      	pop	{r4, r5, r6, pc}
    4204:	20000dac 	.word	0x20000dac

00004208 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    420c:	b121      	cbz	r1, 4218 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    420e:	2901      	cmp	r1, #1
    4210:	d002      	beq.n	4218 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4212:	2000      	movs	r0, #0
    4214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4218:	4c0f      	ldr	r4, [pc, #60]	; (4258 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    421a:	2700      	movs	r7, #0
    421c:	463b      	mov	r3, r7
    421e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4222:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4226:	f814 c001 	ldrb.w	ip, [r4, r1]
    422a:	e00a      	b.n	4242 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    422c:	19dc      	adds	r4, r3, r7
    422e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4232:	b2a4      	uxth	r4, r4
    4234:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4238:	f1be 0f00 	cmp.w	lr, #0
    423c:	d004      	beq.n	4248 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    423e:	1c5b      	adds	r3, r3, #1
    4240:	b29b      	uxth	r3, r3
    4242:	459c      	cmp	ip, r3
    4244:	d8f2      	bhi.n	422c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4246:	4634      	mov	r4, r6
    4248:	8004      	strh	r4, [r0, #0]
    424a:	4620      	mov	r0, r4
    424c:	42b4      	cmp	r4, r6
    424e:	d0e0      	beq.n	4212 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4254:	f000 b834 	b.w	42c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4258:	20000dac 	.word	0x20000dac

0000425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4260:	4606      	mov	r6, r0
    4262:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4266:	460c      	mov	r4, r1
    4268:	f243 0702 	movw	r7, #12290	; 0x3002
    426c:	38ff      	subs	r0, #255	; 0xff
    426e:	d020      	beq.n	42b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4270:	2c02      	cmp	r4, #2
    4272:	d302      	bcc.n	427a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4274:	2007      	movs	r0, #7
    4276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    427a:	4630      	mov	r0, r6
    427c:	f000 f85a 	bl	4334 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4280:	0005      	movs	r5, r0
    4282:	d016      	beq.n	42b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4284:	480c      	ldr	r0, [pc, #48]	; (42b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4286:	4629      	mov	r1, r5
    4288:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    428c:	4630      	mov	r0, r6
    428e:	4790      	blx	r2
    4290:	480a      	ldr	r0, [pc, #40]	; (42bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4292:	2100      	movs	r1, #0
    4294:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4298:	68f8      	ldr	r0, [r7, #12]
    429a:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    429e:	4620      	mov	r0, r4
    42a0:	f000 f88a 	bl	43b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    42a4:	4602      	mov	r2, r0
    42a6:	4629      	mov	r1, r5
    42a8:	6878      	ldr	r0, [r7, #4]
    42aa:	f008 ff45 	bl	d138 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    42ae:	2000      	movs	r0, #0
    42b0:	e7e1      	b.n	4276 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    42b2:	4638      	mov	r0, r7
    42b4:	e7df      	b.n	4276 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    42b6:	0000      	.short	0x0000
    42b8:	000043ec 	.word	0x000043ec
    42bc:	20000dac 	.word	0x20000dac
    42c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42c4:	4690      	mov	r8, r2
    42c6:	460d      	mov	r5, r1
    42c8:	4607      	mov	r7, r0
    42ca:	f008 ff79 	bl	d1c0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    42ce:	b148      	cbz	r0, 42e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    42d0:	4816      	ldr	r0, [pc, #88]	; (432c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    42d2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    42d6:	68f0      	ldr	r0, [r6, #12]
    42d8:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    42dc:	b128      	cbz	r0, 42ea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    42de:	f240 1109 	movw	r1, #265	; 0x109
    42e2:	e015      	b.n	4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42e4:	f44f 7184 	mov.w	r1, #264	; 0x108
    42e8:	e012      	b.n	4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42ea:	6870      	ldr	r0, [r6, #4]
    42ec:	2800      	cmp	r0, #0
    42ee:	d01a      	beq.n	4326 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    42f0:	4628      	mov	r0, r5
    42f2:	f000 f861 	bl	43b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    42f6:	4601      	mov	r1, r0
    42f8:	6870      	ldr	r0, [r6, #4]
    42fa:	f008 fecf 	bl	d09c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42fe:	0004      	movs	r4, r0
    4300:	d010      	beq.n	4324 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4302:	68f0      	ldr	r0, [r6, #12]
    4304:	2d02      	cmp	r5, #2
    4306:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    430a:	d304      	bcc.n	4316 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    430c:	f44f 718a 	mov.w	r1, #276	; 0x114
    4310:	2017      	movs	r0, #23
    4312:	f7ff fd25 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4316:	4806      	ldr	r0, [pc, #24]	; (4330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4318:	4642      	mov	r2, r8
    431a:	4621      	mov	r1, r4
    431c:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4320:	4638      	mov	r0, r7
    4322:	4798      	blx	r3
    4324:	4620      	mov	r0, r4
    4326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    432a:	0000      	.short	0x0000
    432c:	20000dac 	.word	0x20000dac
    4330:	000043e4 	.word	0x000043e4
    4334:	b570      	push	{r4, r5, r6, lr}
    4336:	460c      	mov	r4, r1
    4338:	4605      	mov	r5, r0
    433a:	f008 ff41 	bl	d1c0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    433e:	2800      	cmp	r0, #0
    4340:	d005      	beq.n	434e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4342:	4803      	ldr	r0, [pc, #12]	; (4350 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4344:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4348:	68c0      	ldr	r0, [r0, #12]
    434a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    434e:	bd70      	pop	{r4, r5, r6, pc}
    4350:	20000dac 	.word	0x20000dac
    4354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4358:	4e16      	ldr	r6, [pc, #88]	; (43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    435a:	4688      	mov	r8, r1
    435c:	4605      	mov	r5, r0
    435e:	2400      	movs	r4, #0
    4360:	6828      	ldr	r0, [r5, #0]
    4362:	1cc0      	adds	r0, r0, #3
    4364:	f020 0003 	bic.w	r0, r0, #3
    4368:	6028      	str	r0, [r5, #0]
    436a:	4620      	mov	r0, r4
    436c:	f000 f824 	bl	43b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4370:	5d31      	ldrb	r1, [r6, r4]
    4372:	4348      	muls	r0, r1
    4374:	f1b8 0f00 	cmp.w	r8, #0
    4378:	d001      	beq.n	437e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    437a:	2200      	movs	r2, #0
    437c:	e000      	b.n	4380 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    437e:	682a      	ldr	r2, [r5, #0]
    4380:	4601      	mov	r1, r0
    4382:	9200      	str	r2, [sp, #0]
    4384:	b132      	cbz	r2, 4394 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4386:	2700      	movs	r7, #0
    4388:	ea4f 000d 	mov.w	r0, sp
    438c:	f008 feb3 	bl	d0f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4390:	b11f      	cbz	r7, 439a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4392:	e006      	b.n	43a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4394:	2701      	movs	r7, #1
    4396:	2000      	movs	r0, #0
    4398:	e7f8      	b.n	438c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    439a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    439e:	9a00      	ldr	r2, [sp, #0]
    43a0:	604a      	str	r2, [r1, #4]
    43a2:	6829      	ldr	r1, [r5, #0]
    43a4:	1c64      	adds	r4, r4, #1
    43a6:	4408      	add	r0, r1
    43a8:	b2e4      	uxtb	r4, r4
    43aa:	6028      	str	r0, [r5, #0]
    43ac:	2c02      	cmp	r4, #2
    43ae:	d3d7      	bcc.n	4360 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    43b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43b4:	20000dac 	.word	0x20000dac
    43b8:	4903      	ldr	r1, [pc, #12]	; (43c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    43ba:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    43be:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    43c2:	1cc0      	adds	r0, r0, #3
    43c4:	4008      	ands	r0, r1
    43c6:	4770      	bx	lr
    43c8:	000043e0 	.word	0x000043e0
    43cc:	4803      	ldr	r0, [pc, #12]	; (43dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    43ce:	7801      	ldrb	r1, [r0, #0]
    43d0:	7840      	ldrb	r0, [r0, #1]
    43d2:	4281      	cmp	r1, r0
    43d4:	d300      	bcc.n	43d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    43d6:	4608      	mov	r0, r1
    43d8:	4770      	bx	lr
    43da:	0000      	.short	0x0000
    43dc:	20000dac 	.word	0x20000dac
    43e0:	00dc0210 	.word	0x00dc0210
    43e4:	0000d1d5 	.word	0x0000d1d5
    43e8:	0000d1d5 	.word	0x0000d1d5
    43ec:	0000e6af 	.word	0x0000e6af
    43f0:	0000df47 	.word	0x0000df47

000043f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    43f4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43f8:	4c26      	ldr	r4, [pc, #152]	; (4494 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    43fa:	4680      	mov	r8, r0
    43fc:	b081      	sub	sp, #4
    43fe:	6820      	ldr	r0, [r4, #0]
    4400:	469a      	mov	sl, r3
    4402:	4693      	mov	fp, r2
    4404:	b158      	cbz	r0, 441e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4406:	7a02      	ldrb	r2, [r0, #8]
    4408:	4542      	cmp	r2, r8
    440a:	d903      	bls.n	4414 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    440c:	6841      	ldr	r1, [r0, #4]
    440e:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4412:	b140      	cbz	r0, 4426 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4414:	f243 0002 	movw	r0, #12290	; 0x3002
    4418:	b005      	add	sp, #20
    441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    441e:	21a5      	movs	r1, #165	; 0xa5
    4420:	2018      	movs	r0, #24
    4422:	f7ff fc9d 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4426:	4619      	mov	r1, r3
    4428:	9802      	ldr	r0, [sp, #8]
    442a:	f008 feeb 	bl	d204 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    442e:	b286      	uxth	r6, r0
    4430:	4658      	mov	r0, fp
    4432:	990e      	ldr	r1, [sp, #56]	; 0x38
    4434:	f008 fedd 	bl	d1f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4438:	b285      	uxth	r5, r0
    443a:	1970      	adds	r0, r6, r5
    443c:	1d00      	adds	r0, r0, #4
    443e:	b287      	uxth	r7, r0
    4440:	6820      	ldr	r0, [r4, #0]
    4442:	46a1      	mov	r9, r4
    4444:	4639      	mov	r1, r7
    4446:	6800      	ldr	r0, [r0, #0]
    4448:	f008 fe28 	bl	d09c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    444c:	0004      	movs	r4, r0
    444e:	d01f      	beq.n	4490 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4450:	8067      	strh	r7, [r4, #2]
    4452:	8025      	strh	r5, [r4, #0]
    4454:	4629      	mov	r1, r5
    4456:	1d20      	adds	r0, r4, #4
    4458:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    445a:	4607      	mov	r7, r0
    445c:	465a      	mov	r2, fp
    445e:	2301      	movs	r3, #1
    4460:	9500      	str	r5, [sp, #0]
    4462:	f008 fd7a 	bl	cf5a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4466:	8820      	ldrh	r0, [r4, #0]
    4468:	4631      	mov	r1, r6
    446a:	4438      	add	r0, r7
    446c:	2301      	movs	r3, #1
    446e:	9a02      	ldr	r2, [sp, #8]
    4470:	f8cd a000 	str.w	sl, [sp]
    4474:	f008 fd71 	bl	cf5a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4478:	8820      	ldrh	r0, [r4, #0]
    447a:	19c1      	adds	r1, r0, r7
    447c:	4638      	mov	r0, r7
    447e:	f008 fd9d 	bl	cfbc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4482:	f8d9 0000 	ldr.w	r0, [r9]
    4486:	6841      	ldr	r1, [r0, #4]
    4488:	2000      	movs	r0, #0
    448a:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    448e:	e7c3      	b.n	4418 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4490:	2004      	movs	r0, #4
    4492:	e7c1      	b.n	4418 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4494:	20000080 	.word	0x20000080

00004498 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4498:	b570      	push	{r4, r5, r6, lr}
    449a:	4c14      	ldr	r4, [pc, #80]	; (44ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    449c:	6823      	ldr	r3, [r4, #0]
    449e:	b18b      	cbz	r3, 44c4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    44a0:	7a19      	ldrb	r1, [r3, #8]
    44a2:	4281      	cmp	r1, r0
    44a4:	d912      	bls.n	44cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44a6:	685a      	ldr	r2, [r3, #4]
    44a8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    44ac:	b171      	cbz	r1, 44cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44ae:	2500      	movs	r5, #0
    44b0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    44b4:	884a      	ldrh	r2, [r1, #2]
    44b6:	6818      	ldr	r0, [r3, #0]
    44b8:	f008 fe3e 	bl	d138 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    44bc:	6821      	ldr	r1, [r4, #0]
    44be:	2000      	movs	r0, #0
    44c0:	7a0a      	ldrb	r2, [r1, #8]
    44c2:	e00c      	b.n	44de <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    44c4:	21c8      	movs	r1, #200	; 0xc8
    44c6:	2018      	movs	r0, #24
    44c8:	f7ff fc4a 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44cc:	f243 0002 	movw	r0, #12290	; 0x3002
    44d0:	bd70      	pop	{r4, r5, r6, pc}
    44d2:	684b      	ldr	r3, [r1, #4]
    44d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    44d8:	b933      	cbnz	r3, 44e8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    44da:	1c40      	adds	r0, r0, #1
    44dc:	b2c0      	uxtb	r0, r0
    44de:	4282      	cmp	r2, r0
    44e0:	d8f7      	bhi.n	44d2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    44e2:	6808      	ldr	r0, [r1, #0]
    44e4:	f008 fe1d 	bl	d122 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    44e8:	2000      	movs	r0, #0
    44ea:	bd70      	pop	{r4, r5, r6, pc}
    44ec:	20000080 	.word	0x20000080

000044f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    44f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44f4:	460d      	mov	r5, r1
    44f6:	0004      	movs	r4, r0
    44f8:	4690      	mov	r8, r2
    44fa:	f04f 0600 	mov.w	r6, #0
    44fe:	d009      	beq.n	4514 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4500:	2700      	movs	r7, #0
    4502:	1ce0      	adds	r0, r4, #3
    4504:	f020 0003 	bic.w	r0, r0, #3
    4508:	42a0      	cmp	r0, r4
    450a:	d005      	beq.n	4518 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    450c:	2186      	movs	r1, #134	; 0x86
    450e:	2018      	movs	r0, #24
    4510:	f7ff fc26 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4514:	2701      	movs	r7, #1
    4516:	e7f4      	b.n	4502 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4518:	b1cd      	cbz	r5, 454e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    451a:	4611      	mov	r1, r2
    451c:	2000      	movs	r0, #0
    451e:	f008 fdea 	bl	d0f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4522:	300c      	adds	r0, #12
    4524:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4528:	b98f      	cbnz	r7, 454e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    452a:	4f0a      	ldr	r7, [pc, #40]	; (4554 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    452c:	f104 000c 	add.w	r0, r4, #12
    4530:	00aa      	lsls	r2, r5, #2
    4532:	603c      	str	r4, [r7, #0]
    4534:	7225      	strb	r5, [r4, #8]
    4536:	6060      	str	r0, [r4, #4]
    4538:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    453c:	6020      	str	r0, [r4, #0]
    453e:	2100      	movs	r1, #0
    4540:	6860      	ldr	r0, [r4, #4]
    4542:	f007 fe8a 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4546:	4641      	mov	r1, r8
    4548:	6838      	ldr	r0, [r7, #0]
    454a:	f008 fdd4 	bl	d0f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    454e:	4630      	mov	r0, r6
    4550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4554:	20000080 	.word	0x20000080

00004558 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4558:	b570      	push	{r4, r5, r6, lr}
    455a:	4d08      	ldr	r5, [pc, #32]	; (457c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    455c:	6828      	ldr	r0, [r5, #0]
    455e:	2800      	cmp	r0, #0
    4560:	d00a      	beq.n	4578 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4562:	2400      	movs	r4, #0
    4564:	e004      	b.n	4570 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4566:	4620      	mov	r0, r4
    4568:	f7ff ff96 	bl	4498 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    456c:	1c64      	adds	r4, r4, #1
    456e:	b2e4      	uxtb	r4, r4
    4570:	6828      	ldr	r0, [r5, #0]
    4572:	7a00      	ldrb	r0, [r0, #8]
    4574:	42a0      	cmp	r0, r4
    4576:	d8f6      	bhi.n	4566 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4578:	bd70      	pop	{r4, r5, r6, pc}
    457a:	0000      	.short	0x0000
    457c:	20000080 	.word	0x20000080

00004580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4580:	4909      	ldr	r1, [pc, #36]	; (45a8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4582:	b510      	push	{r4, lr}
    4584:	4602      	mov	r2, r0
    4586:	6809      	ldr	r1, [r1, #0]
    4588:	2000      	movs	r0, #0
    458a:	b149      	cbz	r1, 45a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    458c:	7a0b      	ldrb	r3, [r1, #8]
    458e:	4293      	cmp	r3, r2
    4590:	d905      	bls.n	459e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4592:	6849      	ldr	r1, [r1, #4]
    4594:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4598:	2900      	cmp	r1, #0
    459a:	d000      	beq.n	459e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    459c:	1d08      	adds	r0, r1, #4
    459e:	bd10      	pop	{r4, pc}
    45a0:	21ee      	movs	r1, #238	; 0xee
    45a2:	2018      	movs	r0, #24
    45a4:	f7ff fbdc 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45a8:	20000080 	.word	0x20000080

000045ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    45ac:	490a      	ldr	r1, [pc, #40]	; (45d8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    45ae:	b510      	push	{r4, lr}
    45b0:	4602      	mov	r2, r0
    45b2:	6809      	ldr	r1, [r1, #0]
    45b4:	2000      	movs	r0, #0
    45b6:	b159      	cbz	r1, 45d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    45b8:	7a0b      	ldrb	r3, [r1, #8]
    45ba:	4293      	cmp	r3, r2
    45bc:	d907      	bls.n	45ce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45be:	6849      	ldr	r1, [r1, #4]
    45c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    45c4:	2900      	cmp	r1, #0
    45c6:	d002      	beq.n	45ce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45c8:	f831 0b04 	ldrh.w	r0, [r1], #4
    45cc:	4408      	add	r0, r1
    45ce:	bd10      	pop	{r4, pc}
    45d0:	21fc      	movs	r1, #252	; 0xfc
    45d2:	2018      	movs	r0, #24
    45d4:	f7ff fbc4 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45d8:	20000080 	.word	0x20000080

000045dc <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>:
    45dc:	b510      	push	{r4, lr}
    45de:	4604      	mov	r4, r0
    45e0:	2001      	movs	r0, #1
    45e2:	f7ff fd9f 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    45e6:	4284      	cmp	r4, r0
    45e8:	d206      	bcs.n	45f8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY+0x1c>
    45ea:	4904      	ldr	r1, [pc, #16]	; (45fc <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY+0x20>)
    45ec:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    45f0:	6809      	ldr	r1, [r1, #0]
    45f2:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    45f6:	bd10      	pop	{r4, pc}
    45f8:	2000      	movs	r0, #0
    45fa:	bd10      	pop	{r4, pc}
    45fc:	20000084 	.word	0x20000084

00004600 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4600:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4602:	9800      	ldr	r0, [sp, #0]
    4604:	b158      	cbz	r0, 461e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4606:	2600      	movs	r6, #0
    4608:	ea4f 000d 	mov.w	r0, sp
    460c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4610:	0149      	lsls	r1, r1, #5
    4612:	460c      	mov	r4, r1
    4614:	f008 fd6f 	bl	d0f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4618:	4605      	mov	r5, r0
    461a:	b11e      	cbz	r6, 4624 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    461c:	e00d      	b.n	463a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3a>
    461e:	2601      	movs	r6, #1
    4620:	2000      	movs	r0, #0
    4622:	e7f3      	b.n	460c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    4624:	4621      	mov	r1, r4
    4626:	9800      	ldr	r0, [sp, #0]
    4628:	f008 fd38 	bl	d09c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    462c:	4906      	ldr	r1, [pc, #24]	; (4648 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>)
    462e:	6008      	str	r0, [r1, #0]
    4630:	b128      	cbz	r0, 463e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3e>
    4632:	4622      	mov	r2, r4
    4634:	2100      	movs	r1, #0
    4636:	f007 fe10 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    463a:	4628      	mov	r0, r5
    463c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    463e:	211e      	movs	r1, #30
    4640:	2009      	movs	r0, #9
    4642:	f7ff fb8d 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4646:	0000      	.short	0x0000
    4648:	20000084 	.word	0x20000084

0000464c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI>:
    464c:	b510      	push	{r4, lr}
    464e:	2001      	movs	r0, #1
    4650:	f7ff fd68 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    4654:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4658:	0142      	lsls	r2, r0, #5
    465a:	4803      	ldr	r0, [pc, #12]	; (4668 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x1c>)
    465c:	2100      	movs	r1, #0
    465e:	6800      	ldr	r0, [r0, #0]
    4660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4664:	f007 bdf9 	b.w	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4668:	20000084 	.word	0x20000084
    466c:	4909      	ldr	r1, [pc, #36]	; (4694 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x48>)
    466e:	b510      	push	{r4, lr}
    4670:	4807      	ldr	r0, [pc, #28]	; (4690 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x44>)
    4672:	6008      	str	r0, [r1, #0]
    4674:	4b08      	ldr	r3, [pc, #32]	; (4698 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x4c>)
    4676:	2011      	movs	r0, #17
    4678:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    467c:	2200      	movs	r2, #0
    467e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4682:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4686:	1c40      	adds	r0, r0, #1
    4688:	b2c0      	uxtb	r0, r0
    468a:	2814      	cmp	r0, #20
    468c:	d3f4      	bcc.n	4678 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x2c>
    468e:	bd10      	pop	{r4, pc}
    4690:	fffe0000 	.word	0xfffe0000
    4694:	4001f508 	.word	0x4001f508
    4698:	4001f000 	.word	0x4001f000
    469c:	b570      	push	{r4, r5, r6, lr}
    469e:	2420      	movs	r4, #32
    46a0:	2100      	movs	r1, #0
    46a2:	2301      	movs	r3, #1
    46a4:	fa20 f201 	lsr.w	r2, r0, r1
    46a8:	07d2      	lsls	r2, r2, #31
    46aa:	d020      	beq.n	46ee <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xa2>
    46ac:	b24a      	sxtb	r2, r1
    46ae:	2a00      	cmp	r2, #0
    46b0:	db10      	blt.n	46d4 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x88>
    46b2:	bf00      	nop
    46b4:	ea4f 1652 	mov.w	r6, r2, lsr #5
    46b8:	ea4f 0686 	mov.w	r6, r6, lsl #2
    46bc:	f002 051f 	and.w	r5, r2, #31
    46c0:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    46c4:	fa03 f505 	lsl.w	r5, r3, r5
    46c8:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    46cc:	f3bf 8f4f 	dsb	sy
    46d0:	f3bf 8f6f 	isb	sy
    46d4:	db0b      	blt.n	46ee <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xa2>
    46d6:	f002 051f 	and.w	r5, r2, #31
    46da:	ea4f 1252 	mov.w	r2, r2, lsr #5
    46de:	ea4f 0282 	mov.w	r2, r2, lsl #2
    46e2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    46e6:	fa03 f505 	lsl.w	r5, r3, r5
    46ea:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    46ee:	f101 0101 	add.w	r1, r1, #1
    46f2:	42a1      	cmp	r1, r4
    46f4:	d3d6      	bcc.n	46a4 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x58>
    46f6:	bd70      	pop	{r4, r5, r6, pc}
    46f8:	b570      	push	{r4, r5, r6, lr}
    46fa:	0042      	lsls	r2, r0, #1
    46fc:	f04f 0100 	mov.w	r1, #0
    4700:	d501      	bpl.n	4706 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xba>
    4702:	4a14      	ldr	r2, [pc, #80]	; (4754 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x108>)
    4704:	6011      	str	r1, [r2, #0]
    4706:	f3c0 3280 	ubfx	r2, r0, #14, #1
    470a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    470e:	429a      	cmp	r2, r3
    4710:	d003      	beq.n	471a <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xce>
    4712:	2164      	movs	r1, #100	; 0x64
    4714:	201b      	movs	r0, #27
    4716:	f7ff fb23 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    471a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    471e:	d014      	beq.n	474a <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xfe>
    4720:	4a0d      	ldr	r2, [pc, #52]	; (4758 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x10c>)
    4722:	2001      	movs	r0, #1
    4724:	6050      	str	r0, [r2, #4]
    4726:	1e83      	subs	r3, r0, #2
    4728:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    472c:	4a0b      	ldr	r2, [pc, #44]	; (475c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x110>)
    472e:	6090      	str	r0, [r2, #8]
    4730:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4734:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4738:	4c09      	ldr	r4, [pc, #36]	; (4760 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x114>)
    473a:	6021      	str	r1, [r4, #0]
    473c:	1d25      	adds	r5, r4, #4
    473e:	6028      	str	r0, [r5, #0]
    4740:	6090      	str	r0, [r2, #8]
    4742:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4746:	6021      	str	r1, [r4, #0]
    4748:	6028      	str	r0, [r5, #0]
    474a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    474e:	f7ff bf8d 	b.w	466c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x20>
    4752:	0000      	.short	0x0000
    4754:	4001e504 	.word	0x4001e504
    4758:	4000e000 	.word	0x4000e000
    475c:	4000f000 	.word	0x4000f000
    4760:	4000f500 	.word	0x4000f500

00004764 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4764:	b570      	push	{r4, r5, r6, lr}
    4766:	4c0a      	ldr	r4, [pc, #40]	; (4790 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4768:	460d      	mov	r5, r1
    476a:	6020      	str	r0, [r4, #0]
    476c:	f7ff ffc4 	bl	46f8 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xac>
    4770:	6820      	ldr	r0, [r4, #0]
    4772:	f7ff ff93 	bl	469c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x50>
    4776:	f000 f877 	bl	4868 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    477a:	f7ff ff77 	bl	466c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x20>
    477e:	f008 fd59 	bl	d234 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4782:	4628      	mov	r0, r5
    4784:	f000 f8aa 	bl	48dc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    478c:	f000 b8c2 	b.w	4914 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4790:	20000088 	.word	0x20000088

00004794 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4794:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4798:	4e2f      	ldr	r6, [pc, #188]	; (4858 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    479a:	4683      	mov	fp, r0
    479c:	6830      	ldr	r0, [r6, #0]
    479e:	9001      	str	r0, [sp, #4]
    47a0:	2701      	movs	r7, #1
    47a2:	482e      	ldr	r0, [pc, #184]	; (485c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    47a4:	f007 fc36 	bl	c014 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    47a8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 485c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    47ac:	b920      	cbnz	r0, 47b8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    47ae:	2700      	movs	r7, #0
    47b0:	f108 0001 	add.w	r0, r8, #1
    47b4:	f007 fc45 	bl	c042 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    47b8:	4c29      	ldr	r4, [pc, #164]	; (4860 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    47ba:	2500      	movs	r5, #0
    47bc:	f04f 0903 	mov.w	r9, #3
    47c0:	2001      	movs	r0, #1
    47c2:	6060      	str	r0, [r4, #4]
    47c4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    47c8:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    47cc:	f8c6 b000 	str.w	fp, [r6]
    47d0:	6020      	str	r0, [r4, #0]
    47d2:	f8df a090 	ldr.w	sl, [pc, #144]	; 4864 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    47d6:	e017      	b.n	4808 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    47d8:	f8da 0000 	ldr.w	r0, [sl]
    47dc:	06c0      	lsls	r0, r0, #27
    47de:	d513      	bpl.n	4808 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    47e0:	200e      	movs	r0, #14
    47e2:	f008 fd18 	bl	d216 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    47e6:	f3ef 8010 	mrs	r0, PRIMASK
    47ea:	9000      	str	r0, [sp, #0]
    47ec:	b672      	cpsid	i
    47ee:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    47f2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    47f6:	b920      	cbnz	r0, 4802 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    47f8:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    47fc:	b908      	cbnz	r0, 4802 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    47fe:	f7ff f955 	bl	3aac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4802:	9800      	ldr	r0, [sp, #0]
    4804:	b900      	cbnz	r0, 4808 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4806:	b662      	cpsie	i
    4808:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    480c:	b918      	cbnz	r0, 4816 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    480e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4812:	2800      	cmp	r0, #0
    4814:	d0e0      	beq.n	47d8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4816:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    481a:	2800      	cmp	r0, #0
    481c:	d1d0      	bne.n	47c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    481e:	b137      	cbz	r7, 482e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4820:	9801      	ldr	r0, [sp, #4]
    4822:	6030      	str	r0, [r6, #0]
    4824:	f108 0001 	add.w	r0, r8, #1
    4828:	f007 fbf4 	bl	c014 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    482c:	e011      	b.n	4852 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    482e:	f108 0001 	add.w	r0, r8, #1
    4832:	f007 fbef 	bl	c014 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4836:	2800      	cmp	r0, #0
    4838:	d1ba      	bne.n	47b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    483a:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    483e:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4842:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4846:	200e      	movs	r0, #14
    4848:	f008 fce5 	bl	d216 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    484c:	4803      	ldr	r0, [pc, #12]	; (485c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    484e:	f007 fbf8 	bl	c042 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4852:	2000      	movs	r0, #0
    4854:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4858:	4000e504 	.word	0x4000e504
    485c:	2000028b 	.word	0x2000028b
    4860:	4000e000 	.word	0x4000e000
    4864:	e000ed10 	.word	0xe000ed10

00004868 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4868:	b510      	push	{r4, lr}
    486a:	4808      	ldr	r0, [pc, #32]	; (488c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    486c:	f007 fbe5 	bl	c03a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4870:	b108      	cbz	r0, 4876 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4872:	2124      	movs	r1, #36	; 0x24
    4874:	e006      	b.n	4884 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4876:	4805      	ldr	r0, [pc, #20]	; (488c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4878:	1c40      	adds	r0, r0, #1
    487a:	f007 fbde 	bl	c03a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    487e:	2800      	cmp	r0, #0
    4880:	d003      	beq.n	488a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4882:	2128      	movs	r1, #40	; 0x28
    4884:	201d      	movs	r0, #29
    4886:	f7ff fa6b 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    488a:	bd10      	pop	{r4, pc}
    488c:	2000028b 	.word	0x2000028b

00004890 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4890:	b570      	push	{r4, r5, r6, lr}
    4892:	4911      	ldr	r1, [pc, #68]	; (48d8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4894:	680a      	ldr	r2, [r1, #0]
    4896:	b1ea      	cbz	r2, 48d4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4898:	2300      	movs	r3, #0
    489a:	461d      	mov	r5, r3
    489c:	2401      	movs	r4, #1
    489e:	684a      	ldr	r2, [r1, #4]
    48a0:	1c52      	adds	r2, r2, #1
    48a2:	604a      	str	r2, [r1, #4]
    48a4:	2a09      	cmp	r2, #9
    48a6:	d300      	bcc.n	48aa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    48a8:	604d      	str	r5, [r1, #4]
    48aa:	790e      	ldrb	r6, [r1, #4]
    48ac:	fa04 f206 	lsl.w	r2, r4, r6
    48b0:	680e      	ldr	r6, [r1, #0]
    48b2:	4216      	tst	r6, r2
    48b4:	d00b      	beq.n	48ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    48b6:	f3ef 8310 	mrs	r3, PRIMASK
    48ba:	b672      	cpsid	i
    48bc:	680c      	ldr	r4, [r1, #0]
    48be:	4394      	bics	r4, r2
    48c0:	600c      	str	r4, [r1, #0]
    48c2:	b903      	cbnz	r3, 48c6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    48c4:	b662      	cpsie	i
    48c6:	6849      	ldr	r1, [r1, #4]
    48c8:	6001      	str	r1, [r0, #0]
    48ca:	2000      	movs	r0, #0
    48cc:	bd70      	pop	{r4, r5, r6, pc}
    48ce:	1c5b      	adds	r3, r3, #1
    48d0:	2b09      	cmp	r3, #9
    48d2:	d3e4      	bcc.n	489e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    48d4:	2005      	movs	r0, #5
    48d6:	bd70      	pop	{r4, r5, r6, pc}
    48d8:	2000008c 	.word	0x2000008c

000048dc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    48dc:	4802      	ldr	r0, [pc, #8]	; (48e8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    48de:	2100      	movs	r1, #0
    48e0:	6001      	str	r1, [r0, #0]
    48e2:	6041      	str	r1, [r0, #4]
    48e4:	4770      	bx	lr
    48e6:	0000      	.short	0x0000
    48e8:	2000008c 	.word	0x2000008c

000048ec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    48ec:	b510      	push	{r4, lr}
    48ee:	4c08      	ldr	r4, [pc, #32]	; (4910 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    48f0:	7861      	ldrb	r1, [r4, #1]
    48f2:	b109      	cbz	r1, 48f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    48f4:	200f      	movs	r0, #15
    48f6:	bd10      	pop	{r4, pc}
    48f8:	f7ff f864 	bl	39c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    48fc:	7020      	strb	r0, [r4, #0]
    48fe:	28ff      	cmp	r0, #255	; 0xff
    4900:	d001      	beq.n	4906 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4902:	2000      	movs	r0, #0
    4904:	bd10      	pop	{r4, pc}
    4906:	2176      	movs	r1, #118	; 0x76
    4908:	201f      	movs	r0, #31
    490a:	f7ff fa29 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    490e:	0000      	.short	0x0000
    4910:	20000094 	.word	0x20000094

00004914 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4914:	4901      	ldr	r1, [pc, #4]	; (491c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4916:	2000      	movs	r0, #0
    4918:	7048      	strb	r0, [r1, #1]
    491a:	4770      	bx	lr
    491c:	20000094 	.word	0x20000094

00004920 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4920:	4806      	ldr	r0, [pc, #24]	; (493c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4922:	4a07      	ldr	r2, [pc, #28]	; (4940 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4924:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4926:	8852      	ldrh	r2, [r2, #2]
    4928:	4291      	cmp	r1, r2
    492a:	d104      	bne.n	4936 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    492c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4930:	b108      	cbz	r0, 4936 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4932:	2000      	movs	r0, #0
    4934:	4770      	bx	lr
    4936:	2001      	movs	r0, #1
    4938:	4770      	bx	lr
    493a:	0000      	.short	0x0000
    493c:	20000f86 	.word	0x20000f86
    4940:	20000278 	.word	0x20000278

00004944 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4944:	4901      	ldr	r1, [pc, #4]	; (494c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4946:	8048      	strh	r0, [r1, #2]
    4948:	4770      	bx	lr
    494a:	0000      	.short	0x0000
    494c:	20000278 	.word	0x20000278

00004950 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4950:	4808      	ldr	r0, [pc, #32]	; (4974 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4952:	4a09      	ldr	r2, [pc, #36]	; (4978 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4954:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4956:	8852      	ldrh	r2, [r2, #2]
    4958:	4291      	cmp	r1, r2
    495a:	d109      	bne.n	4970 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    495c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4960:	8481      	strh	r1, [r0, #36]	; 0x24
    4962:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4966:	b119      	cbz	r1, 4970 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4968:	2100      	movs	r1, #0
    496a:	7001      	strb	r1, [r0, #0]
    496c:	2001      	movs	r0, #1
    496e:	4770      	bx	lr
    4970:	2000      	movs	r0, #0
    4972:	4770      	bx	lr
    4974:	20000f86 	.word	0x20000f86
    4978:	20000278 	.word	0x20000278

0000497c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    497c:	4807      	ldr	r0, [pc, #28]	; (499c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    497e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4982:	2901      	cmp	r1, #1
    4984:	d007      	beq.n	4996 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4986:	2101      	movs	r1, #1
    4988:	7001      	strb	r1, [r0, #0]
    498a:	4805      	ldr	r0, [pc, #20]	; (49a0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    498c:	4903      	ldr	r1, [pc, #12]	; (499c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    498e:	8800      	ldrh	r0, [r0, #0]
    4990:	8488      	strh	r0, [r1, #36]	; 0x24
    4992:	2001      	movs	r0, #1
    4994:	4770      	bx	lr
    4996:	2000      	movs	r0, #0
    4998:	4770      	bx	lr
    499a:	0000      	.short	0x0000
    499c:	20000f86 	.word	0x20000f86
    49a0:	20000278 	.word	0x20000278

000049a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    49a4:	4906      	ldr	r1, [pc, #24]	; (49c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    49a6:	4b07      	ldr	r3, [pc, #28]	; (49c4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    49a8:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49aa:	885b      	ldrh	r3, [r3, #2]
    49ac:	429a      	cmp	r2, r3
    49ae:	d105      	bne.n	49bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    49b0:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    49b4:	b112      	cbz	r2, 49bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    49b6:	6001      	str	r1, [r0, #0]
    49b8:	2001      	movs	r0, #1
    49ba:	4770      	bx	lr
    49bc:	2000      	movs	r0, #0
    49be:	4770      	bx	lr
    49c0:	20000f86 	.word	0x20000f86
    49c4:	20000278 	.word	0x20000278

000049c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    49c8:	4909      	ldr	r1, [pc, #36]	; (49f0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49ca:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49cc:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    49d0:	3bff      	subs	r3, #255	; 0xff
    49d2:	d002      	beq.n	49da <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    49d4:	2100      	movs	r1, #0
    49d6:	6001      	str	r1, [r0, #0]
    49d8:	e007      	b.n	49ea <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49da:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    49de:	4904      	ldr	r1, [pc, #16]	; (49f0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49e0:	2a01      	cmp	r2, #1
    49e2:	d002      	beq.n	49ea <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49e4:	6001      	str	r1, [r0, #0]
    49e6:	2001      	movs	r0, #1
    49e8:	4770      	bx	lr
    49ea:	2000      	movs	r0, #0
    49ec:	4770      	bx	lr
    49ee:	0000      	.short	0x0000
    49f0:	20000f86 	.word	0x20000f86

000049f4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    49f4:	4901      	ldr	r1, [pc, #4]	; (49fc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    49f6:	8008      	strh	r0, [r1, #0]
    49f8:	4770      	bx	lr
    49fa:	0000      	.short	0x0000
    49fc:	20000278 	.word	0x20000278

00004a00 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4a00:	4905      	ldr	r1, [pc, #20]	; (4a18 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4a02:	2000      	movs	r0, #0
    4a04:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a08:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a0c:	8488      	strh	r0, [r1, #36]	; 0x24
    4a0e:	4903      	ldr	r1, [pc, #12]	; (4a1c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4a10:	8008      	strh	r0, [r1, #0]
    4a12:	8048      	strh	r0, [r1, #2]
    4a14:	4770      	bx	lr
    4a16:	0000      	.short	0x0000
    4a18:	20000f86 	.word	0x20000f86
    4a1c:	20000278 	.word	0x20000278
    4a20:	4905      	ldr	r1, [pc, #20]	; (4a38 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4a22:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a24:	4282      	cmp	r2, r0
    4a26:	d105      	bne.n	4a34 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4a28:	2000      	movs	r0, #0
    4a2a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a32:	8488      	strh	r0, [r1, #36]	; 0x24
    4a34:	4770      	bx	lr
    4a36:	0000      	.short	0x0000
    4a38:	20000f86 	.word	0x20000f86

00004a3c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a3c:	4a0a      	ldr	r2, [pc, #40]	; (4a68 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4a3e:	b110      	cbz	r0, 4a46 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a40:	2801      	cmp	r0, #1
    4a42:	d007      	beq.n	4a54 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4a44:	e00e      	b.n	4a64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a46:	7850      	ldrb	r0, [r2, #1]
    4a48:	b160      	cbz	r0, 4a64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a4a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4a4e:	6008      	str	r0, [r1, #0]
    4a50:	88d0      	ldrh	r0, [r2, #6]
    4a52:	e004      	b.n	4a5e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4a54:	7810      	ldrb	r0, [r2, #0]
    4a56:	b128      	cbz	r0, 4a64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a58:	6890      	ldr	r0, [r2, #8]
    4a5a:	6008      	str	r0, [r1, #0]
    4a5c:	8990      	ldrh	r0, [r2, #12]
    4a5e:	8088      	strh	r0, [r1, #4]
    4a60:	2001      	movs	r0, #1
    4a62:	4770      	bx	lr
    4a64:	2000      	movs	r0, #0
    4a66:	4770      	bx	lr
    4a68:	2000028d 	.word	0x2000028d

00004a6c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4a6c:	4a08      	ldr	r2, [pc, #32]	; (4a90 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4a6e:	2301      	movs	r3, #1
    4a70:	b138      	cbz	r0, 4a82 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4a72:	2801      	cmp	r0, #1
    4a74:	d104      	bne.n	4a80 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4a76:	7013      	strb	r3, [r2, #0]
    4a78:	6808      	ldr	r0, [r1, #0]
    4a7a:	6090      	str	r0, [r2, #8]
    4a7c:	8888      	ldrh	r0, [r1, #4]
    4a7e:	8190      	strh	r0, [r2, #12]
    4a80:	4770      	bx	lr
    4a82:	7053      	strb	r3, [r2, #1]
    4a84:	6808      	ldr	r0, [r1, #0]
    4a86:	f8c2 0002 	str.w	r0, [r2, #2]
    4a8a:	8888      	ldrh	r0, [r1, #4]
    4a8c:	80d0      	strh	r0, [r2, #6]
    4a8e:	4770      	bx	lr
    4a90:	2000028d 	.word	0x2000028d

00004a94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4a94:	4906      	ldr	r1, [pc, #24]	; (4ab0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4a96:	b110      	cbz	r0, 4a9e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4a98:	2801      	cmp	r0, #1
    4a9a:	d002      	beq.n	4aa2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4a9c:	e005      	b.n	4aaa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a9e:	7848      	ldrb	r0, [r1, #1]
    4aa0:	e000      	b.n	4aa4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4aa2:	7808      	ldrb	r0, [r1, #0]
    4aa4:	b108      	cbz	r0, 4aaa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4aa6:	2001      	movs	r0, #1
    4aa8:	4770      	bx	lr
    4aaa:	2000      	movs	r0, #0
    4aac:	4770      	bx	lr
    4aae:	0000      	.short	0x0000
    4ab0:	2000028d 	.word	0x2000028d

00004ab4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4ab4:	4901      	ldr	r1, [pc, #4]	; (4abc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4ab6:	7448      	strb	r0, [r1, #17]
    4ab8:	4770      	bx	lr
    4aba:	0000      	.short	0x0000
    4abc:	20000a32 	.word	0x20000a32

00004ac0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4ac0:	4801      	ldr	r0, [pc, #4]	; (4ac8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4ac2:	78c0      	ldrb	r0, [r0, #3]
    4ac4:	4770      	bx	lr
    4ac6:	0000      	.short	0x0000
    4ac8:	200000b0 	.word	0x200000b0

00004acc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4acc:	4801      	ldr	r0, [pc, #4]	; (4ad4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4ace:	7900      	ldrb	r0, [r0, #4]
    4ad0:	4770      	bx	lr
    4ad2:	0000      	.short	0x0000
    4ad4:	200000b0 	.word	0x200000b0

00004ad8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4ad8:	b578      	push	{r3, r4, r5, r6, lr}
    4ada:	4913      	ldr	r1, [pc, #76]	; (4b28 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4adc:	7c4a      	ldrb	r2, [r1, #17]
    4ade:	b30a      	cbz	r2, 4b24 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4ae0:	7c0a      	ldrb	r2, [r1, #16]
    4ae2:	f88d 2000 	strb.w	r2, [sp]
    4ae6:	9a00      	ldr	r2, [sp, #0]
    4ae8:	9200      	str	r2, [sp, #0]
    4aea:	f89d 2000 	ldrb.w	r2, [sp]
    4aee:	b1ca      	cbz	r2, 4b24 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4af0:	2300      	movs	r3, #0
    4af2:	f101 0210 	add.w	r2, r1, #16
    4af6:	241a      	movs	r4, #26
    4af8:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4afc:	7c0e      	ldrb	r6, [r1, #16]
    4afe:	f88d 6000 	strb.w	r6, [sp]
    4b02:	9e00      	ldr	r6, [sp, #0]
    4b04:	9600      	str	r6, [sp, #0]
    4b06:	f89d 6000 	ldrb.w	r6, [sp]
    4b0a:	b14e      	cbz	r6, 4b20 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4b0c:	7013      	strb	r3, [r2, #0]
    4b0e:	7043      	strb	r3, [r0, #1]
    4b10:	7004      	strb	r4, [r0, #0]
    4b12:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4b16:	6046      	str	r6, [r0, #4]
    4b18:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4b1c:	6086      	str	r6, [r0, #8]
    4b1e:	e7ed      	b.n	4afc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4b20:	2001      	movs	r0, #1
    4b22:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b24:	2000      	movs	r0, #0
    4b26:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b28:	20000a32 	.word	0x20000a32

00004b2c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4b2c:	b570      	push	{r4, r5, r6, lr}
    4b2e:	460c      	mov	r4, r1
    4b30:	4605      	mov	r5, r0
    4b32:	f000 f931 	bl	4d98 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4b36:	b118      	cbz	r0, 4b40 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    4b38:	21ab      	movs	r1, #171	; 0xab
    4b3a:	2027      	movs	r0, #39	; 0x27
    4b3c:	f7ff f910 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b40:	4803      	ldr	r0, [pc, #12]	; (4b50 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4b42:	2101      	movs	r1, #1
    4b44:	f008 ff5e 	bl	da04 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4b48:	4802      	ldr	r0, [pc, #8]	; (4b54 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    4b4a:	71c5      	strb	r5, [r0, #7]
    4b4c:	62c4      	str	r4, [r0, #44]	; 0x2c
    4b4e:	bd70      	pop	{r4, r5, r6, pc}
    4b50:	20000a10 	.word	0x20000a10
    4b54:	200000b0 	.word	0x200000b0

00004b58 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4b58:	4901      	ldr	r1, [pc, #4]	; (4b60 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4b5a:	2001      	movs	r0, #1
    4b5c:	7188      	strb	r0, [r1, #6]
    4b5e:	4770      	bx	lr
    4b60:	200000b0 	.word	0x200000b0

00004b64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b68:	4d4c      	ldr	r5, [pc, #304]	; (4c9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x138>)
    4b6a:	b086      	sub	sp, #24
    4b6c:	782e      	ldrb	r6, [r5, #0]
    4b6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    4b70:	2e00      	cmp	r6, #0
    4b72:	d174      	bne.n	4c5e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4b74:	2a00      	cmp	r2, #0
    4b76:	d072      	beq.n	4c5e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d070      	beq.n	4c5e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4b7c:	2c00      	cmp	r4, #0
    4b7e:	d06e      	beq.n	4c5e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4b80:	f105 0714 	add.w	r7, r5, #20
    4b84:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4b88:	e887 001c 	stmia.w	r7, {r2, r3, r4}
    4b8c:	71ae      	strb	r6, [r5, #6]
    4b8e:	716e      	strb	r6, [r5, #5]
    4b90:	70ee      	strb	r6, [r5, #3]
    4b92:	70ae      	strb	r6, [r5, #2]
    4b94:	712e      	strb	r6, [r5, #4]
    4b96:	81ae      	strh	r6, [r5, #12]
    4b98:	81ee      	strh	r6, [r5, #14]
    4b9a:	f000 f935 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4b9e:	4607      	mov	r7, r0
    4ba0:	f000 f92c 	bl	4dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4ba4:	4604      	mov	r4, r0
    4ba6:	f006 fa1b 	bl	afe0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4baa:	f005 fef5 	bl	a998 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4bae:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    4bb2:	f006 fa9d 	bl	b0f0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4bb6:	f104 0016 	add.w	r0, r4, #22
    4bba:	f006 fb87 	bl	b2cc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4bbe:	f104 0012 	add.w	r0, r4, #18
    4bc2:	f006 fb77 	bl	b2b4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4bc6:	7f38      	ldrb	r0, [r7, #28]
    4bc8:	f006 fb9a 	bl	b300 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4bcc:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4bd0:	6840      	ldr	r0, [r0, #4]
    4bd2:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    4bd6:	b108      	cbz	r0, 4bdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4bd8:	f006 f952 	bl	ae80 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4bdc:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4be0:	2001      	movs	r0, #1
    4be2:	f006 f87d 	bl	ace0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4be6:	2800      	cmp	r0, #0
    4be8:	d050      	beq.n	4c8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    4bea:	46b0      	mov	r8, r6
    4bec:	2001      	movs	r0, #1
    4bee:	f006 f987 	bl	af00 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4bf2:	2214      	movs	r2, #20
    4bf4:	492a      	ldr	r1, [pc, #168]	; (4ca0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13c>)
    4bf6:	4668      	mov	r0, sp
    4bf8:	f007 fab5 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4bfc:	4668      	mov	r0, sp
    4bfe:	f006 f8eb 	bl	add8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4c02:	8820      	ldrh	r0, [r4, #0]
    4c04:	f7ff fcd2 	bl	45ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4c08:	6328      	str	r0, [r5, #48]	; 0x30
    4c0a:	8820      	ldrh	r0, [r4, #0]
    4c0c:	f7ff fcb8 	bl	4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4c10:	6368      	str	r0, [r5, #52]	; 0x34
    4c12:	f107 0058 	add.w	r0, r7, #88	; 0x58
    4c16:	4e23      	ldr	r6, [pc, #140]	; (4ca4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    4c18:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    4c1a:	f106 0c08 	add.w	ip, r6, #8
    4c1e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    4c22:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4c24:	f8c6 0021 	str.w	r0, [r6, #33]	; 0x21
    4c28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    4c2a:	f8c6 0025 	str.w	r0, [r6, #37]	; 0x25
    4c2e:	20ff      	movs	r0, #255	; 0xff
    4c30:	7268      	strb	r0, [r5, #9]
    4c32:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    4c34:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    4c36:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    4c3a:	7cf8      	ldrb	r0, [r7, #19]
    4c3c:	f008 fb6e 	bl	d31c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4c40:	7cf9      	ldrb	r1, [r7, #19]
    4c42:	b101      	cbz	r1, 4c46 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe2>
    4c44:	2104      	movs	r1, #4
    4c46:	4408      	add	r0, r1
    4c48:	b2c0      	uxtb	r0, r0
    4c4a:	7228      	strb	r0, [r5, #8]
    4c4c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    4c50:	1d09      	adds	r1, r1, #4
    4c52:	4281      	cmp	r1, r0
    4c54:	d205      	bcs.n	4c62 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4c56:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    4c5a:	e01c      	b.n	4c96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    4c5c:	e7ff      	b.n	4c5e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4c5e:	21d4      	movs	r1, #212	; 0xd4
    4c60:	e019      	b.n	4c96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    4c62:	4645      	mov	r5, r8
    4c64:	2001      	movs	r0, #1
    4c66:	f000 fb49 	bl	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    4c6a:	480f      	ldr	r0, [pc, #60]	; (4ca8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>)
    4c6c:	6800      	ldr	r0, [r0, #0]
    4c6e:	2803      	cmp	r0, #3
    4c70:	d00f      	beq.n	4c92 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    4c72:	280b      	cmp	r0, #11
    4c74:	d00d      	beq.n	4c92 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    4c76:	f846 5f52 	str.w	r5, [r6, #82]!
    4c7a:	6075      	str	r5, [r6, #4]
    4c7c:	4809      	ldr	r0, [pc, #36]	; (4ca4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    4c7e:	88b9      	ldrh	r1, [r7, #4]
    4c80:	3052      	adds	r0, #82	; 0x52
    4c82:	8041      	strh	r1, [r0, #2]
    4c84:	8821      	ldrh	r1, [r4, #0]
    4c86:	8001      	strh	r1, [r0, #0]
    4c88:	7f39      	ldrb	r1, [r7, #28]
    4c8a:	7101      	strb	r1, [r0, #4]
    4c8c:	b006      	add	sp, #24
    4c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c92:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    4c96:	2027      	movs	r0, #39	; 0x27
    4c98:	f7ff f862 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c9c:	200000b0 	.word	0x200000b0
    4ca0:	00005548 	.word	0x00005548
    4ca4:	200009e0 	.word	0x200009e0
    4ca8:	40001550 	.word	0x40001550

00004cac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4cb0:	4606      	mov	r6, r0
    4cb2:	f000 f8a9 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4cb6:	4d33      	ldr	r5, [pc, #204]	; (4d84 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4cb8:	4604      	mov	r4, r0
    4cba:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4cbc:	7847      	ldrb	r7, [r0, #1]
    4cbe:	b10e      	cbz	r6, 4cc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4cc0:	2e01      	cmp	r6, #1
    4cc2:	d103      	bne.n	4ccc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4cc4:	6b69      	ldr	r1, [r5, #52]	; 0x34
    4cc6:	f007 fbb9 	bl	c43c <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4cca:	7068      	strb	r0, [r5, #1]
    4ccc:	7868      	ldrb	r0, [r5, #1]
    4cce:	f04f 0800 	mov.w	r8, #0
    4cd2:	f04f 0901 	mov.w	r9, #1
    4cd6:	b150      	cbz	r0, 4cee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4cd8:	2801      	cmp	r0, #1
    4cda:	d01a      	beq.n	4d12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4cdc:	2802      	cmp	r0, #2
    4cde:	d034      	beq.n	4d4a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4ce0:	2803      	cmp	r0, #3
    4ce2:	d049      	beq.n	4d78 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xcc>
    4ce4:	f240 31cd 	movw	r1, #973	; 0x3cd
    4ce8:	2027      	movs	r0, #39	; 0x27
    4cea:	f7ff f839 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cee:	2e01      	cmp	r6, #1
    4cf0:	d032      	beq.n	4d58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4cf2:	f000 f8f3 	bl	4edc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4cf6:	4639      	mov	r1, r7
    4cf8:	2201      	movs	r2, #1
    4cfa:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4cfc:	f007 ffc2 	bl	cc84 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d00:	e028      	b.n	4d54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4d02:	bf00      	nop
    4d04:	f884 8008 	strb.w	r8, [r4, #8]
    4d08:	e031      	b.n	4d6e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d0a:	bf00      	nop
    4d0c:	f884 9008 	strb.w	r9, [r4, #8]
    4d10:	e02d      	b.n	4d6e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d12:	2e01      	cmp	r6, #1
    4d14:	d008      	beq.n	4d28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4d16:	f000 f8e1 	bl	4edc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4d1a:	4639      	mov	r1, r7
    4d1c:	2200      	movs	r2, #0
    4d1e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4d20:	f007 ffb0 	bl	cc84 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d24:	2e02      	cmp	r6, #2
    4d26:	d00b      	beq.n	4d40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d28:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    4d2c:	1c40      	adds	r0, r0, #1
    4d2e:	f141 0100 	adc.w	r1, r1, #0
    4d32:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    4d36:	7a20      	ldrb	r0, [r4, #8]
    4d38:	2801      	cmp	r0, #1
    4d3a:	d003      	beq.n	4d44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4d3c:	f884 9008 	strb.w	r9, [r4, #8]
    4d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d44:	f884 8008 	strb.w	r8, [r4, #8]
    4d48:	e7fa      	b.n	4d40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d4a:	2e01      	cmp	r6, #1
    4d4c:	d004      	beq.n	4d58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d4e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4d50:	f008 f99e 	bl	d090 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d54:	2e02      	cmp	r6, #2
    4d56:	d0f3      	beq.n	4d40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d58:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    4d5c:	1c40      	adds	r0, r0, #1
    4d5e:	f141 0100 	adc.w	r1, r1, #0
    4d62:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    4d66:	7a20      	ldrb	r0, [r4, #8]
    4d68:	2801      	cmp	r0, #1
    4d6a:	d1cf      	bne.n	4d0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4d6c:	e7ca      	b.n	4d04 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4d6e:	79e8      	ldrb	r0, [r5, #7]
    4d70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d74:	f7fe be44 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4d78:	2e01      	cmp	r6, #1
    4d7a:	d0e1      	beq.n	4d40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d7c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4d7e:	f008 f987 	bl	d090 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d82:	e7f4      	b.n	4d6e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d84:	200000b0 	.word	0x200000b0

00004d88 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4d88:	4802      	ldr	r0, [pc, #8]	; (4d94 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4d8a:	89c0      	ldrh	r0, [r0, #14]
    4d8c:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4d90:	4770      	bx	lr
    4d92:	0000      	.short	0x0000
    4d94:	200000b0 	.word	0x200000b0

00004d98 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4d98:	4804      	ldr	r0, [pc, #16]	; (4dac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4d9a:	7800      	ldrb	r0, [r0, #0]
    4d9c:	b108      	cbz	r0, 4da2 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4d9e:	200c      	movs	r0, #12
    4da0:	4770      	bx	lr
    4da2:	4903      	ldr	r1, [pc, #12]	; (4db0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4da4:	2000      	movs	r0, #0
    4da6:	7448      	strb	r0, [r1, #17]
    4da8:	4770      	bx	lr
    4daa:	0000      	.short	0x0000
    4dac:	200000b0 	.word	0x200000b0
    4db0:	20000a32 	.word	0x20000a32

00004db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4db4:	480c      	ldr	r0, [pc, #48]	; (4de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4db6:	b510      	push	{r4, lr}
    4db8:	7801      	ldrb	r1, [r0, #0]
    4dba:	b149      	cbz	r1, 4dd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4dbc:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4dc0:	7800      	ldrb	r0, [r0, #0]
    4dc2:	2802      	cmp	r0, #2
    4dc4:	d008      	beq.n	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4dc6:	f44f 71cb 	mov.w	r1, #406	; 0x196
    4dca:	2027      	movs	r0, #39	; 0x27
    4dcc:	f7fe ffc8 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dd4:	f000 b9a8 	b.w	5128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    4dd8:	6848      	ldr	r0, [r1, #4]
    4dda:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4de2:	f006 b801 	b.w	ade8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4de6:	0000      	.short	0x0000
    4de8:	200000b0 	.word	0x200000b0
    4dec:	4a02      	ldr	r2, [pc, #8]	; (4df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4dee:	8993      	ldrh	r3, [r2, #12]
    4df0:	4303      	orrs	r3, r0
    4df2:	8193      	strh	r3, [r2, #12]
    4df4:	6952      	ldr	r2, [r2, #20]
    4df6:	4710      	bx	r2
    4df8:	200000b0 	.word	0x200000b0
    4dfc:	4801      	ldr	r0, [pc, #4]	; (4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4dfe:	6840      	ldr	r0, [r0, #4]
    4e00:	4770      	bx	lr
    4e02:	0000      	.short	0x0000
    4e04:	200000e8 	.word	0x200000e8
    4e08:	4801      	ldr	r0, [pc, #4]	; (4e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4e0a:	6840      	ldr	r0, [r0, #4]
    4e0c:	3070      	adds	r0, #112	; 0x70
    4e0e:	4770      	bx	lr
    4e10:	200000e8 	.word	0x200000e8
    4e14:	4a01      	ldr	r2, [pc, #4]	; (4e1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4e16:	2100      	movs	r1, #0
    4e18:	6952      	ldr	r2, [r2, #20]
    4e1a:	4710      	bx	r2
    4e1c:	200000b0 	.word	0x200000b0
    4e20:	b570      	push	{r4, r5, r6, lr}
    4e22:	f7ff fff1 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4e26:	4604      	mov	r4, r0
    4e28:	f7ff ffe8 	bl	4dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4e2c:	4605      	mov	r5, r0
    4e2e:	4621      	mov	r1, r4
    4e30:	f008 fc09 	bl	d646 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4e34:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    4e38:	2901      	cmp	r1, #1
    4e3a:	d117      	bne.n	4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    4e3c:	2800      	cmp	r0, #0
    4e3e:	d015      	beq.n	4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    4e40:	480b      	ldr	r0, [pc, #44]	; (4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    4e42:	6842      	ldr	r2, [r0, #4]
    4e44:	8828      	ldrh	r0, [r5, #0]
    4e46:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    4e4a:	7a60      	ldrb	r0, [r4, #9]
    4e4c:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    4e50:	7aa0      	ldrb	r0, [r4, #10]
    4e52:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    4e56:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    4e5a:	2001      	movs	r0, #1
    4e5c:	7010      	strb	r0, [r2, #0]
    4e5e:	4804      	ldr	r0, [pc, #16]	; (4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    4e60:	3838      	subs	r0, #56	; 0x38
    4e62:	79c0      	ldrb	r0, [r0, #7]
    4e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e68:	f7fe bdca 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4e6c:	bd70      	pop	{r4, r5, r6, pc}
    4e6e:	0000      	.short	0x0000
    4e70:	200000e8 	.word	0x200000e8
    4e74:	b570      	push	{r4, r5, r6, lr}
    4e76:	4c18      	ldr	r4, [pc, #96]	; (4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    4e78:	4605      	mov	r5, r0
    4e7a:	b939      	cbnz	r1, 4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    4e7c:	2d01      	cmp	r5, #1
    4e7e:	d105      	bne.n	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    4e80:	78e0      	ldrb	r0, [r4, #3]
    4e82:	1c40      	adds	r0, r0, #1
    4e84:	b2c0      	uxtb	r0, r0
    4e86:	70e0      	strb	r0, [r4, #3]
    4e88:	2801      	cmp	r0, #1
    4e8a:	d818      	bhi.n	4ebe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4e8c:	69a1      	ldr	r1, [r4, #24]
    4e8e:	4628      	mov	r0, r5
    4e90:	4788      	blx	r1
    4e92:	b1a0      	cbz	r0, 4ebe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4e94:	7960      	ldrb	r0, [r4, #5]
    4e96:	b990      	cbnz	r0, 4ebe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4e98:	b9e5      	cbnz	r5, 4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4e9a:	480f      	ldr	r0, [pc, #60]	; (4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    4e9c:	3010      	adds	r0, #16
    4e9e:	7801      	ldrb	r1, [r0, #0]
    4ea0:	06c8      	lsls	r0, r1, #27
    4ea2:	d405      	bmi.n	4eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    4ea4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4ea6:	7800      	ldrb	r0, [r0, #0]
    4ea8:	06c0      	lsls	r0, r0, #27
    4eaa:	d401      	bmi.n	4eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    4eac:	2001      	movs	r0, #1
    4eae:	e000      	b.n	4eb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4eb0:	2000      	movs	r0, #0
    4eb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4eb4:	b92a      	cbnz	r2, 4ec2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4eb6:	8962      	ldrh	r2, [r4, #10]
    4eb8:	b11a      	cbz	r2, 4ec2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4eba:	06c9      	lsls	r1, r1, #27
    4ebc:	d401      	bmi.n	4ec2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4ebe:	2001      	movs	r0, #1
    4ec0:	bd70      	pop	{r4, r5, r6, pc}
    4ec2:	89a1      	ldrh	r1, [r4, #12]
    4ec4:	078a      	lsls	r2, r1, #30
    4ec6:	d503      	bpl.n	4ed0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    4ec8:	6a22      	ldr	r2, [r4, #32]
    4eca:	78d2      	ldrb	r2, [r2, #3]
    4ecc:	2a02      	cmp	r2, #2
    4ece:	d001      	beq.n	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4ed0:	4308      	orrs	r0, r1
    4ed2:	d1f4      	bne.n	4ebe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4ed4:	2000      	movs	r0, #0
    4ed6:	bd70      	pop	{r4, r5, r6, pc}
    4ed8:	200000b0 	.word	0x200000b0
    4edc:	b510      	push	{r4, lr}
    4ede:	4c08      	ldr	r4, [pc, #32]	; (4f00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>)
    4ee0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4ee2:	b138      	cbz	r0, 4ef4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x140>
    4ee4:	8962      	ldrh	r2, [r4, #10]
    4ee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4ee8:	1cd2      	adds	r2, r2, #3
    4eea:	f007 f93c 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4eee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4ef0:	6260      	str	r0, [r4, #36]	; 0x24
    4ef2:	bd10      	pop	{r4, pc}
    4ef4:	f240 4114 	movw	r1, #1044	; 0x414
    4ef8:	2027      	movs	r0, #39	; 0x27
    4efa:	f7fe ff31 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4efe:	0000      	.short	0x0000
    4f00:	200000b0 	.word	0x200000b0
    4f04:	b510      	push	{r4, lr}
    4f06:	f7ff ff79 	bl	4dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4f0a:	4604      	mov	r4, r0
    4f0c:	f7ff ff7c 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f10:	4601      	mov	r1, r0
    4f12:	7b42      	ldrb	r2, [r0, #13]
    4f14:	4815      	ldr	r0, [pc, #84]	; (4f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b8>)
    4f16:	2a24      	cmp	r2, #36	; 0x24
    4f18:	d00e      	beq.n	4f38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    4f1a:	7b89      	ldrb	r1, [r1, #14]
    4f1c:	2924      	cmp	r1, #36	; 0x24
    4f1e:	d00b      	beq.n	4f38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    4f20:	2a1f      	cmp	r2, #31
    4f22:	d00d      	beq.n	4f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4f24:	2a20      	cmp	r2, #32
    4f26:	d00b      	beq.n	4f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4f28:	2922      	cmp	r1, #34	; 0x22
    4f2a:	d00f      	beq.n	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    4f2c:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    4f30:	2804      	cmp	r0, #4
    4f32:	d100      	bne.n	4f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x182>
    4f34:	2008      	movs	r0, #8
    4f36:	bd10      	pop	{r4, pc}
    4f38:	6840      	ldr	r0, [r0, #4]
    4f3a:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    4f3e:	e00e      	b.n	4f5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    4f40:	2922      	cmp	r1, #34	; 0x22
    4f42:	d003      	beq.n	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    4f44:	6840      	ldr	r0, [r0, #4]
    4f46:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    4f4a:	e005      	b.n	4f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    4f4c:	6841      	ldr	r1, [r0, #4]
    4f4e:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    4f52:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    4f56:	4008      	ands	r0, r1
    4f58:	f008 f9c8 	bl	d2ec <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4f5c:	4601      	mov	r1, r0
    4f5e:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    4f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f66:	f008 b9ec 	b.w	d342 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x5a>
    4f6a:	0000      	.short	0x0000
    4f6c:	200000e8 	.word	0x200000e8
    4f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f74:	4688      	mov	r8, r1
    4f76:	4606      	mov	r6, r0
    4f78:	f7ff ff46 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f7c:	4c45      	ldr	r4, [pc, #276]	; (5094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    4f7e:	2700      	movs	r7, #0
    4f80:	4605      	mov	r5, r0
    4f82:	f88d 7000 	strb.w	r7, [sp]
    4f86:	7820      	ldrb	r0, [r4, #0]
    4f88:	2802      	cmp	r0, #2
    4f8a:	d004      	beq.n	4f96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    4f8c:	f240 4166 	movw	r1, #1126	; 0x466
    4f90:	2027      	movs	r0, #39	; 0x27
    4f92:	f7fe fee5 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f96:	7ba0      	ldrb	r0, [r4, #14]
    4f98:	0640      	lsls	r0, r0, #25
    4f9a:	d406      	bmi.n	4faa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    4f9c:	2040      	movs	r0, #64	; 0x40
    4f9e:	f7ff ff39 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4fa2:	89e0      	ldrh	r0, [r4, #14]
    4fa4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4fa8:	81e0      	strh	r0, [r4, #14]
    4faa:	483b      	ldr	r0, [pc, #236]	; (5098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>)
    4fac:	b3ee      	cbz	r6, 502a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x276>
    4fae:	7941      	ldrb	r1, [r0, #5]
    4fb0:	1c49      	adds	r1, r1, #1
    4fb2:	7141      	strb	r1, [r0, #5]
    4fb4:	7ce8      	ldrb	r0, [r5, #19]
    4fb6:	f005 fd67 	bl	aa88 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4fba:	f005 fd4b 	bl	aa54 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4fbe:	b968      	cbnz	r0, 4fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4fc0:	7ce8      	ldrb	r0, [r5, #19]
    4fc2:	b158      	cbz	r0, 4fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4fc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fc6:	7841      	ldrb	r1, [r0, #1]
    4fc8:	b141      	cbz	r1, 4fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4fca:	7800      	ldrb	r0, [r0, #0]
    4fcc:	7a29      	ldrb	r1, [r5, #8]
    4fce:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4fd2:	4288      	cmp	r0, r1
    4fd4:	d102      	bne.n	4fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4fd6:	2001      	movs	r0, #1
    4fd8:	70a0      	strb	r0, [r4, #2]
    4fda:	e043      	b.n	5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    4fdc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fde:	7841      	ldrb	r1, [r0, #1]
    4fe0:	8161      	strh	r1, [r4, #10]
    4fe2:	b121      	cbz	r1, 4fee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    4fe4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4fe6:	f008 f820 	bl	d02a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4fea:	62a0      	str	r0, [r4, #40]	; 0x28
    4fec:	e000      	b.n	4ff0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    4fee:	62a7      	str	r7, [r4, #40]	; 0x28
    4ff0:	89e0      	ldrh	r0, [r4, #14]
    4ff2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4ff6:	81e0      	strh	r0, [r4, #14]
    4ff8:	70e7      	strb	r7, [r4, #3]
    4ffa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ffc:	79e9      	ldrb	r1, [r5, #7]
    4ffe:	7800      	ldrb	r0, [r0, #0]
    5000:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5004:	4288      	cmp	r0, r1
    5006:	d005      	beq.n	5014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    5008:	f000 f92a 	bl	5260 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ac>
    500c:	89e0      	ldrh	r0, [r4, #14]
    500e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5012:	81e0      	strh	r0, [r4, #14]
    5014:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5016:	7a29      	ldrb	r1, [r5, #8]
    5018:	7800      	ldrb	r0, [r0, #0]
    501a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    501e:	4288      	cmp	r0, r1
    5020:	d10f      	bne.n	5042 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5022:	4668      	mov	r0, sp
    5024:	f000 f8d8 	bl	51d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    5028:	e00b      	b.n	5042 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    502a:	e7ff      	b.n	502c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    502c:	7981      	ldrb	r1, [r0, #6]
    502e:	1c49      	adds	r1, r1, #1
    5030:	7181      	strb	r1, [r0, #6]
    5032:	7ce8      	ldrb	r0, [r5, #19]
    5034:	b108      	cbz	r0, 503a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    5036:	f005 fd21 	bl	aa7c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    503a:	89e0      	ldrh	r0, [r4, #14]
    503c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5040:	81e0      	strh	r0, [r4, #14]
    5042:	f1b8 0f00 	cmp.w	r8, #0
    5046:	d104      	bne.n	5052 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5048:	4631      	mov	r1, r6
    504a:	2001      	movs	r0, #1
    504c:	f7ff ff12 	bl	4e74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    5050:	b160      	cbz	r0, 506c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    5052:	f89d 0000 	ldrb.w	r0, [sp]
    5056:	b110      	cbz	r0, 505e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    5058:	2000      	movs	r0, #0
    505a:	f7ff fe27 	bl	4cac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    505e:	b10e      	cbz	r6, 5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    5060:	f7ff fede 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5064:	f000 f860 	bl	5128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    506c:	f89d 0000 	ldrb.w	r0, [sp]
    5070:	b110      	cbz	r0, 5078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    5072:	2001      	movs	r0, #1
    5074:	f7ff fe1a 	bl	4cac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5078:	2000      	movs	r0, #0
    507a:	f000 f991 	bl	53a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    507e:	f89d 0000 	ldrb.w	r0, [sp]
    5082:	b110      	cbz	r0, 508a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d6>
    5084:	2002      	movs	r0, #2
    5086:	f7ff fe11 	bl	4cac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    508a:	2e00      	cmp	r6, #0
    508c:	d0ec      	beq.n	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    508e:	f7ff fec7 	bl	4e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5092:	e7e9      	b.n	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    5094:	200000b0 	.word	0x200000b0
    5098:	20000a32 	.word	0x20000a32
    509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50a0:	460e      	mov	r6, r1
    50a2:	4680      	mov	r8, r0
    50a4:	f7ff feb0 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    50a8:	4d1e      	ldr	r5, [pc, #120]	; (5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>)
    50aa:	4604      	mov	r4, r0
    50ac:	7828      	ldrb	r0, [r5, #0]
    50ae:	2801      	cmp	r0, #1
    50b0:	d004      	beq.n	50bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    50b2:	f240 4123 	movw	r1, #1059	; 0x423
    50b6:	2027      	movs	r0, #39	; 0x27
    50b8:	f7fe fe52 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50bc:	7860      	ldrb	r0, [r4, #1]
    50be:	2701      	movs	r7, #1
    50c0:	b130      	cbz	r0, 50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    50c2:	2000      	movs	r0, #0
    50c4:	7060      	strb	r0, [r4, #1]
    50c6:	4601      	mov	r1, r0
    50c8:	2004      	movs	r0, #4
    50ca:	f7ff fe8f 	bl	4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    50ce:	70e7      	strb	r7, [r4, #3]
    50d0:	6a29      	ldr	r1, [r5, #32]
    50d2:	7808      	ldrb	r0, [r1, #0]
    50d4:	43c0      	mvns	r0, r0
    50d6:	0780      	lsls	r0, r0, #30
    50d8:	d109      	bne.n	50ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33a>
    50da:	79a0      	ldrb	r0, [r4, #6]
    50dc:	b9d0      	cbnz	r0, 5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    50de:	2002      	movs	r0, #2
    50e0:	f7ff fe84 	bl	4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    50e4:	6a28      	ldr	r0, [r5, #32]
    50e6:	7800      	ldrb	r0, [r0, #0]
    50e8:	43c0      	mvns	r0, r0
    50ea:	0780      	lsls	r0, r0, #30
    50ec:	d012      	beq.n	5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    50ee:	6a28      	ldr	r0, [r5, #32]
    50f0:	7840      	ldrb	r0, [r0, #1]
    50f2:	b110      	cbz	r0, 50fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    50f4:	2002      	movs	r0, #2
    50f6:	71a0      	strb	r0, [r4, #6]
    50f8:	e000      	b.n	50fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x348>
    50fa:	71a7      	strb	r7, [r4, #6]
    50fc:	ea36 0608 	bics.w	r6, r6, r8
    5100:	d004      	beq.n	510c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    5102:	2101      	movs	r1, #1
    5104:	2000      	movs	r0, #0
    5106:	f7ff feb5 	bl	4e74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    510a:	b128      	cbz	r0, 5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    510c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5110:	f000 b80a 	b.w	5128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5114:	2003      	movs	r0, #3
    5116:	e7ee      	b.n	50f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    5118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    511c:	2000      	movs	r0, #0
    511e:	f000 b8ed 	b.w	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    5122:	0000      	.short	0x0000
    5124:	200000b0 	.word	0x200000b0
    5128:	b510      	push	{r4, lr}
    512a:	f005 fd45 	bl	abb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    512e:	f005 fc33 	bl	a998 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5132:	4c0d      	ldr	r4, [pc, #52]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5134:	89e0      	ldrh	r0, [r4, #14]
    5136:	f7ff fe6d 	bl	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    513a:	69e2      	ldr	r2, [r4, #28]
    513c:	7961      	ldrb	r1, [r4, #5]
    513e:	78a0      	ldrb	r0, [r4, #2]
    5140:	4790      	blx	r2
    5142:	480a      	ldr	r0, [pc, #40]	; (516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5144:	7c40      	ldrb	r0, [r0, #17]
    5146:	b160      	cbz	r0, 5162 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ae>
    5148:	4808      	ldr	r0, [pc, #32]	; (516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    514a:	3852      	subs	r0, #82	; 0x52
    514c:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5150:	6081      	str	r1, [r0, #8]
    5152:	6841      	ldr	r1, [r0, #4]
    5154:	60c1      	str	r1, [r0, #12]
    5156:	4805      	ldr	r0, [pc, #20]	; (516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5158:	2101      	movs	r1, #1
    515a:	7401      	strb	r1, [r0, #16]
    515c:	79e0      	ldrb	r0, [r4, #7]
    515e:	f7fe fc4f 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5162:	2000      	movs	r0, #0
    5164:	7020      	strb	r0, [r4, #0]
    5166:	bd10      	pop	{r4, pc}
    5168:	200000b0 	.word	0x200000b0
    516c:	20000a32 	.word	0x20000a32
    5170:	4808      	ldr	r0, [pc, #32]	; (5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    5172:	b510      	push	{r4, lr}
    5174:	7800      	ldrb	r0, [r0, #0]
    5176:	2802      	cmp	r0, #2
    5178:	d004      	beq.n	5184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>
    517a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    517e:	2027      	movs	r0, #39	; 0x27
    5180:	f7fe fdee 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5184:	4904      	ldr	r1, [pc, #16]	; (5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>)
    5186:	2001      	movs	r0, #1
    5188:	71c8      	strb	r0, [r1, #7]
    518a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    518e:	f7ff bfcb 	b.w	5128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5192:	0000      	.short	0x0000
    5194:	200000b0 	.word	0x200000b0
    5198:	20000a32 	.word	0x20000a32
    519c:	b430      	push	{r4, r5}
    519e:	4b0d      	ldr	r3, [pc, #52]	; (51d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    51a0:	b94a      	cbnz	r2, 51b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    51a2:	7a1a      	ldrb	r2, [r3, #8]
    51a4:	7a5c      	ldrb	r4, [r3, #9]
    51a6:	42a2      	cmp	r2, r4
    51a8:	d105      	bne.n	51b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    51aa:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    51ae:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
    51b2:	42a2      	cmp	r2, r4
    51b4:	d00b      	beq.n	51ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41a>
    51b6:	b131      	cbz	r1, 51c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x412>
    51b8:	7a1a      	ldrb	r2, [r3, #8]
    51ba:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    51be:	bc30      	pop	{r4, r5}
    51c0:	4610      	mov	r0, r2
    51c2:	f006 b88b 	b.w	b2dc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    51c6:	7a5a      	ldrb	r2, [r3, #9]
    51c8:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    51cc:	e7f7      	b.n	51be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    51ce:	bc30      	pop	{r4, r5}
    51d0:	4770      	bx	lr
    51d2:	0000      	.short	0x0000
    51d4:	200000b0 	.word	0x200000b0
    51d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51dc:	4607      	mov	r7, r0
    51de:	f7ff fe13 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    51e2:	4604      	mov	r4, r0
    51e4:	481d      	ldr	r0, [pc, #116]	; (525c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a8>)
    51e6:	2600      	movs	r6, #0
    51e8:	2501      	movs	r5, #1
    51ea:	6a41      	ldr	r1, [r0, #36]	; 0x24
    51ec:	780a      	ldrb	r2, [r1, #0]
    51ee:	f002 0203 	and.w	r2, r2, #3
    51f2:	2a01      	cmp	r2, #1
    51f4:	d015      	beq.n	5222 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    51f6:	2a02      	cmp	r2, #2
    51f8:	d013      	beq.n	5222 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    51fa:	2a03      	cmp	r2, #3
    51fc:	d003      	beq.n	5206 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x452>
    51fe:	7941      	ldrb	r1, [r0, #5]
    5200:	f041 0104 	orr.w	r1, r1, #4
    5204:	e024      	b.n	5250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x49c>
    5206:	7065      	strb	r5, [r4, #1]
    5208:	89c2      	ldrh	r2, [r0, #14]
    520a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    520e:	81c2      	strh	r2, [r0, #14]
    5210:	2001      	movs	r0, #1
    5212:	f7ff fdeb 	bl	4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5216:	e01d      	b.n	5254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    5218:	7226      	strb	r6, [r4, #8]
    521a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    521e:	7225      	strb	r5, [r4, #8]
    5220:	e7fb      	b.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5222:	7849      	ldrb	r1, [r1, #1]
    5224:	b1b1      	cbz	r1, 5254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    5226:	89c2      	ldrh	r2, [r0, #14]
    5228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    522c:	81c2      	strh	r2, [r0, #14]
    522e:	6a82      	ldr	r2, [r0, #40]	; 0x28
    5230:	2a00      	cmp	r2, #0
    5232:	d0f2      	beq.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5234:	29fb      	cmp	r1, #251	; 0xfb
    5236:	d808      	bhi.n	524a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x496>
    5238:	7980      	ldrb	r0, [r0, #6]
    523a:	b120      	cbz	r0, 5246 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x492>
    523c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5240:	2020      	movs	r0, #32
    5242:	f7ff bde7 	b.w	4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5246:	703d      	strb	r5, [r7, #0]
    5248:	e7e7      	b.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    524a:	7941      	ldrb	r1, [r0, #5]
    524c:	f041 0110 	orr.w	r1, r1, #16
    5250:	7141      	strb	r1, [r0, #5]
    5252:	e7e2      	b.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5254:	7a20      	ldrb	r0, [r4, #8]
    5256:	2801      	cmp	r0, #1
    5258:	d1e1      	bne.n	521e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46a>
    525a:	e7dd      	b.n	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    525c:	200000b0 	.word	0x200000b0
    5260:	b570      	push	{r4, r5, r6, lr}
    5262:	f7ff fdd1 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5266:	4604      	mov	r4, r0
    5268:	7980      	ldrb	r0, [r0, #6]
    526a:	2800      	cmp	r0, #0
    526c:	d02f      	beq.n	52ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51a>
    526e:	2802      	cmp	r0, #2
    5270:	d10e      	bne.n	5290 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    5272:	4d1c      	ldr	r5, [pc, #112]	; (52e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x530>)
    5274:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5276:	f007 fcde 	bl	cc36 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    527a:	b348      	cbz	r0, 52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    527c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    5280:	1c40      	adds	r0, r0, #1
    5282:	f141 0100 	adc.w	r1, r1, #0
    5286:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    528a:	79e8      	ldrb	r0, [r5, #7]
    528c:	f7fe fbb8 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5290:	2500      	movs	r5, #0
    5292:	71a5      	strb	r5, [r4, #6]
    5294:	78e0      	ldrb	r0, [r4, #3]
    5296:	b120      	cbz	r0, 52a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ee>
    5298:	70e5      	strb	r5, [r4, #3]
    529a:	2100      	movs	r1, #0
    529c:	2010      	movs	r0, #16
    529e:	f7ff fda5 	bl	4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52a2:	78a0      	ldrb	r0, [r4, #2]
    52a4:	b170      	cbz	r0, 52c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    52a6:	70a5      	strb	r5, [r4, #2]
    52a8:	f7ff fb52 	bl	4950 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    52ac:	b198      	cbz	r0, 52d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    52ae:	2100      	movs	r1, #0
    52b0:	2008      	movs	r0, #8
    52b2:	f7ff fd9b 	bl	4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    52ba:	1c40      	adds	r0, r0, #1
    52bc:	f141 0100 	adc.w	r1, r1, #0
    52c0:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    52c4:	79e0      	ldrb	r0, [r4, #7]
    52c6:	2801      	cmp	r0, #1
    52c8:	d00a      	beq.n	52e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    52ca:	2001      	movs	r0, #1
    52cc:	71e0      	strb	r0, [r4, #7]
    52ce:	bd70      	pop	{r4, r5, r6, pc}
    52d0:	f44f 715a 	mov.w	r1, #872	; 0x368
    52d4:	e001      	b.n	52da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x526>
    52d6:	f44f 7160 	mov.w	r1, #896	; 0x380
    52da:	2027      	movs	r0, #39	; 0x27
    52dc:	f7fe fd40 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52e0:	71e5      	strb	r5, [r4, #7]
    52e2:	bd70      	pop	{r4, r5, r6, pc}
    52e4:	200000b0 	.word	0x200000b0
    52e8:	4803      	ldr	r0, [pc, #12]	; (52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>)
    52ea:	7800      	ldrb	r0, [r0, #0]
    52ec:	2800      	cmp	r0, #0
    52ee:	d001      	beq.n	52f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    52f0:	f7ff bf1a 	b.w	5128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    52f4:	4770      	bx	lr
    52f6:	0000      	.short	0x0000
    52f8:	200000b0 	.word	0x200000b0
    52fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5300:	4681      	mov	r9, r0
    5302:	f7ff fd7b 	bl	4dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5306:	4604      	mov	r4, r0
    5308:	f7ff fd7e 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    530c:	4607      	mov	r7, r0
    530e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    5310:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    5312:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    5316:	7cc0      	ldrb	r0, [r0, #19]
    5318:	f008 f800 	bl	d31c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    531c:	4d1d      	ldr	r5, [pc, #116]	; (5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    531e:	4606      	mov	r6, r0
    5320:	464a      	mov	r2, r9
    5322:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5324:	6268      	str	r0, [r5, #36]	; 0x24
    5326:	2101      	movs	r1, #1
    5328:	4620      	mov	r0, r4
    532a:	f7ff ff37 	bl	519c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    532e:	7cf8      	ldrb	r0, [r7, #19]
    5330:	f04f 0800 	mov.w	r8, #0
    5334:	b1b8      	cbz	r0, 5366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    5336:	4818      	ldr	r0, [pc, #96]	; (5398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5338:	f005 fee0 	bl	b0fc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    533c:	4817      	ldr	r0, [pc, #92]	; (539c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>)
    533e:	2101      	movs	r1, #1
    5340:	7601      	strb	r1, [r0, #24]
    5342:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    5346:	e9c0 1204 	strd	r1, r2, [r0, #16]
    534a:	4a13      	ldr	r2, [pc, #76]	; (5398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    534c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    534e:	f005 fb13 	bl	a978 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5352:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5356:	f007 ffd3 	bl	d300 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    535a:	4602      	mov	r2, r0
    535c:	4631      	mov	r1, r6
    535e:	2001      	movs	r0, #1
    5360:	f005 fb38 	bl	a9d4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5364:	e004      	b.n	5370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5bc>
    5366:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5368:	f005 fec8 	bl	b0fc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    536c:	f005 fb14 	bl	a998 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5370:	f1b9 0f00 	cmp.w	r9, #0
    5374:	d102      	bne.n	537c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>
    5376:	4640      	mov	r0, r8
    5378:	f005 fd5a 	bl	ae30 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    537c:	2100      	movs	r1, #0
    537e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    5382:	2201      	movs	r2, #1
    5384:	4608      	mov	r0, r1
    5386:	f005 ff43 	bl	b210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    538a:	2002      	movs	r0, #2
    538c:	7028      	strb	r0, [r5, #0]
    538e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5392:	0000      	.short	0x0000
    5394:	200000b0 	.word	0x200000b0
    5398:	200008e0 	.word	0x200008e0
    539c:	200009e8 	.word	0x200009e8
    53a0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    53a4:	4604      	mov	r4, r0
    53a6:	f7ff fd2f 	bl	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    53aa:	4606      	mov	r6, r0
    53ac:	f7ff fd26 	bl	4dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    53b0:	4605      	mov	r5, r0
    53b2:	f8df 9188 	ldr.w	r9, [pc, #392]	; 553c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x788>
    53b6:	4622      	mov	r2, r4
    53b8:	2100      	movs	r1, #0
    53ba:	f7ff feef 	bl	519c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    53be:	79b0      	ldrb	r0, [r6, #6]
    53c0:	2701      	movs	r7, #1
    53c2:	f04f 0800 	mov.w	r8, #0
    53c6:	f1a9 0420 	sub.w	r4, r9, #32
    53ca:	b140      	cbz	r0, 53de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62a>
    53cc:	2801      	cmp	r0, #1
    53ce:	d028      	beq.n	5422 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
    53d0:	2802      	cmp	r0, #2
    53d2:	d039      	beq.n	5448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x694>
    53d4:	2803      	cmp	r0, #3
    53d6:	d045      	beq.n	5464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b0>
    53d8:	f44f 711d 	mov.w	r1, #628	; 0x274
    53dc:	e061      	b.n	54a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    53de:	f7ff fd91 	bl	4f04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    53e2:	4601      	mov	r1, r0
    53e4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    53e6:	f008 f898 	bl	d51a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    53ea:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    53ec:	4281      	cmp	r1, r0
    53ee:	d200      	bcs.n	53f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x63e>
    53f0:	4608      	mov	r0, r1
    53f2:	214c      	movs	r1, #76	; 0x4c
    53f4:	f8ad 0004 	strh.w	r0, [sp, #4]
    53f8:	5348      	strh	r0, [r1, r5]
    53fa:	4648      	mov	r0, r9
    53fc:	f7ff fad2 	bl	49a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5400:	b128      	cbz	r0, 540e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65a>
    5402:	2080      	movs	r0, #128	; 0x80
    5404:	6a21      	ldr	r1, [r4, #32]
    5406:	f7ff fcf1 	bl	4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    540a:	70b7      	strb	r7, [r6, #2]
    540c:	e02e      	b.n	546c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    540e:	466a      	mov	r2, sp
    5410:	a901      	add	r1, sp, #4
    5412:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5414:	f007 ff9f 	bl	d356 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    5418:	6220      	str	r0, [r4, #32]
    541a:	b110      	cbz	r0, 5422 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
    541c:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
    5420:	b111      	cbz	r1, 5428 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x674>
    5422:	4847      	ldr	r0, [pc, #284]	; (5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78c>)
    5424:	6220      	str	r0, [r4, #32]
    5426:	e021      	b.n	546c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5428:	f89d 1000 	ldrb.w	r1, [sp]
    542c:	b931      	cbnz	r1, 543c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x688>
    542e:	f8a0 8000 	strh.w	r8, [r0]
    5432:	f880 8002 	strb.w	r8, [r0, #2]
    5436:	2101      	movs	r1, #1
    5438:	f008 fae4 	bl	da04 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    543c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5440:	6a20      	ldr	r0, [r4, #32]
    5442:	f008 faa3 	bl	d98c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5446:	e011      	b.n	546c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5448:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    544c:	f8ad 0004 	strh.w	r0, [sp, #4]
    5450:	466a      	mov	r2, sp
    5452:	a901      	add	r1, sp, #4
    5454:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5456:	f007 ff7e 	bl	d356 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    545a:	6220      	str	r0, [r4, #32]
    545c:	b930      	cbnz	r0, 546c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    545e:	f240 2165 	movw	r1, #613	; 0x265
    5462:	e01e      	b.n	54a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    5464:	4648      	mov	r0, r9
    5466:	f7ff fa9d 	bl	49a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    546a:	b1c0      	cbz	r0, 549e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ea>
    546c:	6a20      	ldr	r0, [r4, #32]
    546e:	2308      	movs	r3, #8
    5470:	7801      	ldrb	r1, [r0, #0]
    5472:	f021 0108 	bic.w	r1, r1, #8
    5476:	7001      	strb	r1, [r0, #0]
    5478:	79f2      	ldrb	r2, [r6, #7]
    547a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    547e:	4311      	orrs	r1, r2
    5480:	f021 0104 	bic.w	r1, r1, #4
    5484:	7001      	strb	r1, [r0, #0]
    5486:	7a32      	ldrb	r2, [r6, #8]
    5488:	2304      	movs	r3, #4
    548a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    548e:	4311      	orrs	r1, r2
    5490:	f021 0110 	bic.w	r1, r1, #16
    5494:	7001      	strb	r1, [r0, #0]
    5496:	43c9      	mvns	r1, r1
    5498:	0789      	lsls	r1, r1, #30
    549a:	d005      	beq.n	54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    549c:	e007      	b.n	54ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    549e:	f240 216e 	movw	r1, #622	; 0x26e
    54a2:	2027      	movs	r0, #39	; 0x27
    54a4:	f7fe fc5c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54a8:	78c0      	ldrb	r0, [r0, #3]
    54aa:	2802      	cmp	r0, #2
    54ac:	d00f      	beq.n	54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    54ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54b0:	f007 fce6 	bl	ce80 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    54b4:	b108      	cbz	r0, 54ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    54b6:	2101      	movs	r1, #1
    54b8:	e00a      	b.n	54d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    54ba:	6a20      	ldr	r0, [r4, #32]
    54bc:	7800      	ldrb	r0, [r0, #0]
    54be:	43c0      	mvns	r0, r0
    54c0:	0780      	lsls	r0, r0, #30
    54c2:	d004      	beq.n	54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    54c4:	f7ff fa2c 	bl	4920 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    54c8:	f080 0101 	eor.w	r1, r0, #1
    54cc:	e000      	b.n	54d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    54ce:	2100      	movs	r1, #0
    54d0:	6a20      	ldr	r0, [r4, #32]
    54d2:	7802      	ldrb	r2, [r0, #0]
    54d4:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    54d8:	7001      	strb	r1, [r0, #0]
    54da:	7cb1      	ldrb	r1, [r6, #18]
    54dc:	b1d1      	cbz	r1, 5514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    54de:	7841      	ldrb	r1, [r0, #1]
    54e0:	b1c1      	cbz	r1, 5514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    54e2:	4818      	ldr	r0, [pc, #96]	; (5544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>)
    54e4:	f005 fe0a 	bl	b0fc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54e8:	4815      	ldr	r0, [pc, #84]	; (5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78c>)
    54ea:	3828      	subs	r0, #40	; 0x28
    54ec:	f880 8018 	strb.w	r8, [r0, #24]
    54f0:	e9d6 1212 	ldrd	r1, r2, [r6, #72]	; 0x48
    54f4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    54f8:	4912      	ldr	r1, [pc, #72]	; (5544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>)
    54fa:	6a22      	ldr	r2, [r4, #32]
    54fc:	f005 fa3c 	bl	a978 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5500:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    5504:	f007 fefc 	bl	d300 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5508:	4602      	mov	r2, r0
    550a:	21fb      	movs	r1, #251	; 0xfb
    550c:	2000      	movs	r0, #0
    550e:	f005 fa61 	bl	a9d4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5512:	e003      	b.n	551c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    5514:	f005 fdf2 	bl	b0fc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5518:	f005 fa3e 	bl	a998 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    551c:	2201      	movs	r2, #1
    551e:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    5522:	4611      	mov	r1, r2
    5524:	2000      	movs	r0, #0
    5526:	f005 fe73 	bl	b210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    552a:	7127      	strb	r7, [r4, #4]
    552c:	6a20      	ldr	r0, [r4, #32]
    552e:	8801      	ldrh	r1, [r0, #0]
    5530:	8221      	strh	r1, [r4, #16]
    5532:	7880      	ldrb	r0, [r0, #2]
    5534:	74a0      	strb	r0, [r4, #18]
    5536:	7027      	strb	r7, [r4, #0]
    5538:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    553c:	200000d0 	.word	0x200000d0
    5540:	20000a10 	.word	0x20000a10
    5544:	200008e0 	.word	0x200008e0
    5548:	00005171 	.word	0x00005171
    554c:	00004f71 	.word	0x00004f71
    5550:	0000509d 	.word	0x0000509d
    5554:	000052e9 	.word	0x000052e9
    5558:	00007145 	.word	0x00007145

0000555c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    555c:	4800      	ldr	r0, [pc, #0]	; (5560 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    555e:	4770      	bx	lr
    5560:	200011ed 	.word	0x200011ed

00005564 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5564:	4904      	ldr	r1, [pc, #16]	; (5578 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5566:	788a      	ldrb	r2, [r1, #2]
    5568:	4282      	cmp	r2, r0
    556a:	d903      	bls.n	5574 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    556c:	4408      	add	r0, r1
    556e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5572:	4770      	bx	lr
    5574:	2000      	movs	r0, #0
    5576:	4770      	bx	lr
    5578:	2000101a 	.word	0x2000101a

0000557c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    557c:	4904      	ldr	r1, [pc, #16]	; (5590 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    557e:	788a      	ldrb	r2, [r1, #2]
    5580:	4282      	cmp	r2, r0
    5582:	d903      	bls.n	558c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5584:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5588:	3083      	adds	r0, #131	; 0x83
    558a:	4770      	bx	lr
    558c:	2000      	movs	r0, #0
    558e:	4770      	bx	lr
    5590:	2000101a 	.word	0x2000101a

00005594 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5594:	4a05      	ldr	r2, [pc, #20]	; (55ac <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5596:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    559a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    559e:	6802      	ldr	r2, [r0, #0]
    55a0:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    55a4:	8880      	ldrh	r0, [r0, #4]
    55a6:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    55aa:	4770      	bx	lr
    55ac:	2000101a 	.word	0x2000101a

000055b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    55b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55b4:	460e      	mov	r6, r1
    55b6:	4607      	mov	r7, r0
    55b8:	4615      	mov	r5, r2
    55ba:	2106      	movs	r1, #6
    55bc:	4630      	mov	r0, r6
    55be:	f008 f8cb 	bl	d758 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    55c2:	4c0d      	ldr	r4, [pc, #52]	; (55f8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    55c4:	b160      	cbz	r0, 55e0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    55c6:	2000      	movs	r0, #0
    55c8:	e004      	b.n	55d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    55ca:	1821      	adds	r1, r4, r0
    55cc:	1c40      	adds	r0, r0, #1
    55ce:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    55d2:	b2c0      	uxtb	r0, r0
    55d4:	78a1      	ldrb	r1, [r4, #2]
    55d6:	4281      	cmp	r1, r0
    55d8:	d8f7      	bhi.n	55ca <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    55da:	2001      	movs	r0, #1
    55dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55e0:	4631      	mov	r1, r6
    55e2:	4638      	mov	r0, r7
    55e4:	f007 fec6 	bl	d374 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    55e8:	2808      	cmp	r0, #8
    55ea:	d003      	beq.n	55f4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    55ec:	4420      	add	r0, r4
    55ee:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    55f2:	e7f2      	b.n	55da <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    55f4:	2000      	movs	r0, #0
    55f6:	e7f1      	b.n	55dc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    55f8:	2000101a 	.word	0x2000101a

000055fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    55fc:	4904      	ldr	r1, [pc, #16]	; (5610 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    55fe:	788a      	ldrb	r2, [r1, #2]
    5600:	4282      	cmp	r2, r0
    5602:	d903      	bls.n	560c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5604:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5608:	1cc0      	adds	r0, r0, #3
    560a:	4770      	bx	lr
    560c:	2000      	movs	r0, #0
    560e:	4770      	bx	lr
    5610:	2000101a 	.word	0x2000101a

00005614 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5614:	b510      	push	{r4, lr}
    5616:	f240 12d3 	movw	r2, #467	; 0x1d3
    561a:	2100      	movs	r1, #0
    561c:	4808      	ldr	r0, [pc, #32]	; (5640 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    561e:	f006 fe1c 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5622:	2208      	movs	r2, #8
    5624:	21ff      	movs	r1, #255	; 0xff
    5626:	4807      	ldr	r0, [pc, #28]	; (5644 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5628:	f006 fe17 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    562c:	4805      	ldr	r0, [pc, #20]	; (5644 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    562e:	2100      	movs	r1, #0
    5630:	1f00      	subs	r0, r0, #4
    5632:	7001      	strb	r1, [r0, #0]
    5634:	7041      	strb	r1, [r0, #1]
    5636:	f44f 7161 	mov.w	r1, #900	; 0x384
    563a:	8041      	strh	r1, [r0, #2]
    563c:	bd10      	pop	{r4, pc}
    563e:	0000      	.short	0x0000
    5640:	2000101a 	.word	0x2000101a
    5644:	20000280 	.word	0x20000280

00005648 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5648:	4901      	ldr	r1, [pc, #4]	; (5650 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    564a:	7008      	strb	r0, [r1, #0]
    564c:	4770      	bx	lr
    564e:	0000      	.short	0x0000
    5650:	2000027c 	.word	0x2000027c

00005654 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5654:	4801      	ldr	r0, [pc, #4]	; (565c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5656:	7800      	ldrb	r0, [r0, #0]
    5658:	4770      	bx	lr
    565a:	0000      	.short	0x0000
    565c:	2000027c 	.word	0x2000027c

00005660 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5660:	4b0b      	ldr	r3, [pc, #44]	; (5690 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5662:	b510      	push	{r4, lr}
    5664:	789c      	ldrb	r4, [r3, #2]
    5666:	4284      	cmp	r4, r0
    5668:	d90f      	bls.n	568a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    566a:	4418      	add	r0, r3
    566c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5670:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5674:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5678:	700b      	strb	r3, [r1, #0]
    567a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    567e:	6011      	str	r1, [r2, #0]
    5680:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5684:	8090      	strh	r0, [r2, #4]
    5686:	2001      	movs	r0, #1
    5688:	bd10      	pop	{r4, pc}
    568a:	2000      	movs	r0, #0
    568c:	bd10      	pop	{r4, pc}
    568e:	0000      	.short	0x0000
    5690:	2000101a 	.word	0x2000101a

00005694 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5694:	4907      	ldr	r1, [pc, #28]	; (56b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5696:	788a      	ldrb	r2, [r1, #2]
    5698:	4282      	cmp	r2, r0
    569a:	d909      	bls.n	56b0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    569c:	4408      	add	r0, r1
    569e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    56a2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    56a6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    56aa:	f000 0001 	and.w	r0, r0, #1
    56ae:	4770      	bx	lr
    56b0:	2000      	movs	r0, #0
    56b2:	4770      	bx	lr
    56b4:	2000101a 	.word	0x2000101a

000056b8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    56b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56bc:	4698      	mov	r8, r3
    56be:	4691      	mov	r9, r2
    56c0:	460c      	mov	r4, r1
    56c2:	4605      	mov	r5, r0
    56c4:	f000 f938 	bl	5938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    56c8:	4606      	mov	r6, r0
    56ca:	2810      	cmp	r0, #16
    56cc:	d006      	beq.n	56dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    56ce:	f000 f903 	bl	58d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    56d2:	2810      	cmp	r0, #16
    56d4:	d002      	beq.n	56dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    56d6:	2012      	movs	r0, #18
    56d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56dc:	4f18      	ldr	r7, [pc, #96]	; (5740 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    56de:	78b8      	ldrb	r0, [r7, #2]
    56e0:	2808      	cmp	r0, #8
    56e2:	d22a      	bcs.n	573a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    56e4:	2e10      	cmp	r6, #16
    56e6:	d105      	bne.n	56f4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    56e8:	2200      	movs	r2, #0
    56ea:	4621      	mov	r1, r4
    56ec:	4628      	mov	r0, r5
    56ee:	f000 f907 	bl	5900 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    56f2:	4606      	mov	r6, r0
    56f4:	78bc      	ldrb	r4, [r7, #2]
    56f6:	2210      	movs	r2, #16
    56f8:	1c60      	adds	r0, r4, #1
    56fa:	70b8      	strb	r0, [r7, #2]
    56fc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5700:	1ce8      	adds	r0, r5, #3
    5702:	4649      	mov	r1, r9
    5704:	f007 ff92 	bl	d62c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5708:	f105 0083 	add.w	r0, r5, #131	; 0x83
    570c:	2210      	movs	r2, #16
    570e:	4641      	mov	r1, r8
    5710:	f007 ff8c 	bl	d62c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5714:	2110      	movs	r1, #16
    5716:	4640      	mov	r0, r8
    5718:	f008 f81e 	bl	d758 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    571c:	443c      	add	r4, r7
    571e:	2110      	movs	r1, #16
    5720:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5724:	4648      	mov	r0, r9
    5726:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    572a:	f008 f815 	bl	d758 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    572e:	77e0      	strb	r0, [r4, #31]
    5730:	f804 6c29 	strb.w	r6, [r4, #-41]
    5734:	2000      	movs	r0, #0
    5736:	73e0      	strb	r0, [r4, #15]
    5738:	e7ce      	b.n	56d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    573a:	2007      	movs	r0, #7
    573c:	e7cc      	b.n	56d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    573e:	0000      	.short	0x0000
    5740:	2000101a 	.word	0x2000101a

00005744 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5744:	4806      	ldr	r0, [pc, #24]	; (5760 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5746:	b510      	push	{r4, lr}
    5748:	7880      	ldrb	r0, [r0, #2]
    574a:	1e40      	subs	r0, r0, #1
    574c:	b244      	sxtb	r4, r0
    574e:	e004      	b.n	575a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5750:	b2e0      	uxtb	r0, r4
    5752:	f000 f939 	bl	59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    5756:	1e64      	subs	r4, r4, #1
    5758:	b264      	sxtb	r4, r4
    575a:	2c00      	cmp	r4, #0
    575c:	daf8      	bge.n	5750 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    575e:	bd10      	pop	{r4, pc}
    5760:	2000101a 	.word	0x2000101a

00005764 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5764:	4801      	ldr	r0, [pc, #4]	; (576c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5766:	8840      	ldrh	r0, [r0, #2]
    5768:	4770      	bx	lr
    576a:	0000      	.short	0x0000
    576c:	2000027c 	.word	0x2000027c

00005770 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5770:	b138      	cbz	r0, 5782 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5772:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5776:	4288      	cmp	r0, r1
    5778:	d803      	bhi.n	5782 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    577a:	4903      	ldr	r1, [pc, #12]	; (5788 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    577c:	8048      	strh	r0, [r1, #2]
    577e:	2001      	movs	r0, #1
    5780:	4770      	bx	lr
    5782:	2000      	movs	r0, #0
    5784:	4770      	bx	lr
    5786:	0000      	.short	0x0000
    5788:	2000027c 	.word	0x2000027c

0000578c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    578c:	4905      	ldr	r1, [pc, #20]	; (57a4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    578e:	788a      	ldrb	r2, [r1, #2]
    5790:	4282      	cmp	r2, r0
    5792:	d903      	bls.n	579c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5794:	4408      	add	r0, r1
    5796:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    579a:	b108      	cbz	r0, 57a0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    579c:	2000      	movs	r0, #0
    579e:	4770      	bx	lr
    57a0:	2001      	movs	r0, #1
    57a2:	4770      	bx	lr
    57a4:	2000101a 	.word	0x2000101a

000057a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    57a8:	b570      	push	{r4, r5, r6, lr}
    57aa:	460d      	mov	r5, r1
    57ac:	4606      	mov	r6, r0
    57ae:	f000 f8c3 	bl	5938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    57b2:	4c10      	ldr	r4, [pc, #64]	; (57f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    57b4:	2810      	cmp	r0, #16
    57b6:	d007      	beq.n	57c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    57b8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    57bc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    57c0:	07c9      	lsls	r1, r1, #31
    57c2:	d001      	beq.n	57c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    57c4:	2001      	movs	r0, #1
    57c6:	bd70      	pop	{r4, r5, r6, pc}
    57c8:	7861      	ldrb	r1, [r4, #1]
    57ca:	2908      	cmp	r1, #8
    57cc:	d210      	bcs.n	57f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    57ce:	2810      	cmp	r0, #16
    57d0:	d008      	beq.n	57e4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    57d2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    57d6:	2101      	movs	r1, #1
    57d8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    57dc:	7860      	ldrb	r0, [r4, #1]
    57de:	1c40      	adds	r0, r0, #1
    57e0:	7060      	strb	r0, [r4, #1]
    57e2:	e7ef      	b.n	57c4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    57e4:	2201      	movs	r2, #1
    57e6:	4629      	mov	r1, r5
    57e8:	4630      	mov	r0, r6
    57ea:	f000 f889 	bl	5900 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    57ee:	e7f5      	b.n	57dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    57f0:	2000      	movs	r0, #0
    57f2:	bd70      	pop	{r4, r5, r6, pc}
    57f4:	2000101a 	.word	0x2000101a

000057f8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    57f8:	b570      	push	{r4, r5, r6, lr}
    57fa:	4d0b      	ldr	r5, [pc, #44]	; (5828 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    57fc:	7828      	ldrb	r0, [r5, #0]
    57fe:	1e40      	subs	r0, r0, #1
    5800:	b244      	sxtb	r4, r0
    5802:	e00a      	b.n	581a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5804:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5808:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    580c:	07c0      	lsls	r0, r0, #31
    580e:	d002      	beq.n	5816 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5810:	b2e0      	uxtb	r0, r4
    5812:	f000 f921 	bl	5a58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    5816:	1e64      	subs	r4, r4, #1
    5818:	b264      	sxtb	r4, r4
    581a:	2c00      	cmp	r4, #0
    581c:	daf2      	bge.n	5804 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    581e:	4903      	ldr	r1, [pc, #12]	; (582c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5820:	2000      	movs	r0, #0
    5822:	7048      	strb	r0, [r1, #1]
    5824:	bd70      	pop	{r4, r5, r6, pc}
    5826:	0000      	.short	0x0000
    5828:	2000101a 	.word	0x2000101a
    582c:	2000027c 	.word	0x2000027c

00005830 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5834:	2400      	movs	r4, #0
    5836:	4625      	mov	r5, r4
    5838:	4e18      	ldr	r6, [pc, #96]	; (589c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    583a:	e029      	b.n	5890 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    583c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5840:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5844:	07c0      	lsls	r0, r0, #31
    5846:	d021      	beq.n	588c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5848:	4628      	mov	r0, r5
    584a:	f000 f845 	bl	58d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    584e:	4603      	mov	r3, r0
    5850:	f7ff fed4 	bl	55fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5854:	4601      	mov	r1, r0
    5856:	2000      	movs	r0, #0
    5858:	2b10      	cmp	r3, #16
    585a:	d009      	beq.n	5870 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    585c:	18f2      	adds	r2, r6, r3
    585e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5862:	f1bc 0f01 	cmp.w	ip, #1
    5866:	d002      	beq.n	586e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5868:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    586c:	b102      	cbz	r2, 5870 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    586e:	2001      	movs	r0, #1
    5870:	1e40      	subs	r0, r0, #1
    5872:	4201      	tst	r1, r0
    5874:	d10a      	bne.n	588c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5876:	480a      	ldr	r0, [pc, #40]	; (58a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5878:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    587c:	5503      	strb	r3, [r0, r4]
    587e:	4620      	mov	r0, r4
    5880:	1c64      	adds	r4, r4, #1
    5882:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5886:	b2e4      	uxtb	r4, r4
    5888:	f005 fe38 	bl	b4fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    588c:	1c6d      	adds	r5, r5, #1
    588e:	b2ed      	uxtb	r5, r5
    5890:	7830      	ldrb	r0, [r6, #0]
    5892:	42a8      	cmp	r0, r5
    5894:	d8d2      	bhi.n	583c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    589a:	0000      	.short	0x0000
    589c:	2000101a 	.word	0x2000101a
    58a0:	20000280 	.word	0x20000280
    58a4:	b570      	push	{r4, r5, r6, lr}
    58a6:	4b0a      	ldr	r3, [pc, #40]	; (58d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    58a8:	781b      	ldrb	r3, [r3, #0]
    58aa:	b173      	cbz	r3, 58ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    58ac:	4b09      	ldr	r3, [pc, #36]	; (58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    58ae:	789c      	ldrb	r4, [r3, #2]
    58b0:	b15c      	cbz	r4, 58ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    58b2:	1845      	adds	r5, r0, r1
    58b4:	4621      	mov	r1, r4
    58b6:	b10a      	cbz	r2, 58bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    58b8:	1cd8      	adds	r0, r3, #3
    58ba:	e001      	b.n	58c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    58bc:	4805      	ldr	r0, [pc, #20]	; (58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    58be:	3083      	adds	r0, #131	; 0x83
    58c0:	462a      	mov	r2, r5
    58c2:	f004 ff7b 	bl	a7bc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    58c6:	2001      	movs	r0, #1
    58c8:	bd70      	pop	{r4, r5, r6, pc}
    58ca:	2000      	movs	r0, #0
    58cc:	bd70      	pop	{r4, r5, r6, pc}
    58ce:	0000      	.short	0x0000
    58d0:	2000027c 	.word	0x2000027c
    58d4:	2000101a 	.word	0x2000101a
    58d8:	4908      	ldr	r1, [pc, #32]	; (58fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    58da:	b510      	push	{r4, lr}
    58dc:	4603      	mov	r3, r0
    58de:	2000      	movs	r0, #0
    58e0:	788a      	ldrb	r2, [r1, #2]
    58e2:	e006      	b.n	58f2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    58e4:	180c      	adds	r4, r1, r0
    58e6:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    58ea:	429c      	cmp	r4, r3
    58ec:	d004      	beq.n	58f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    58ee:	1c40      	adds	r0, r0, #1
    58f0:	b2c0      	uxtb	r0, r0
    58f2:	4282      	cmp	r2, r0
    58f4:	d8f6      	bhi.n	58e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    58f6:	2010      	movs	r0, #16
    58f8:	bd10      	pop	{r4, pc}
    58fa:	0000      	.short	0x0000
    58fc:	2000101a 	.word	0x2000101a
    5900:	b570      	push	{r4, r5, r6, lr}
    5902:	4b0c      	ldr	r3, [pc, #48]	; (5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    5904:	4604      	mov	r4, r0
    5906:	7818      	ldrb	r0, [r3, #0]
    5908:	1c45      	adds	r5, r0, #1
    590a:	701d      	strb	r5, [r3, #0]
    590c:	2810      	cmp	r0, #16
    590e:	d303      	bcc.n	5918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    5910:	2146      	movs	r1, #70	; 0x46
    5912:	2028      	movs	r0, #40	; 0x28
    5914:	f7fe fa24 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5918:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    591c:	680d      	ldr	r5, [r1, #0]
    591e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5922:	8889      	ldrh	r1, [r1, #4]
    5924:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5928:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    592c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5930:	bd70      	pop	{r4, r5, r6, pc}
    5932:	0000      	.short	0x0000
    5934:	2000101a 	.word	0x2000101a
    5938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    593c:	460f      	mov	r7, r1
    593e:	4606      	mov	r6, r0
    5940:	2400      	movs	r4, #0
    5942:	4d0d      	ldr	r5, [pc, #52]	; (5978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    5944:	e00f      	b.n	5966 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    5946:	bf00      	nop
    5948:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    594c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5950:	42b1      	cmp	r1, r6
    5952:	d106      	bne.n	5962 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5954:	2206      	movs	r2, #6
    5956:	4639      	mov	r1, r7
    5958:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    595c:	f006 fbf1 	bl	c142 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5960:	b138      	cbz	r0, 5972 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    5962:	1c64      	adds	r4, r4, #1
    5964:	b2e4      	uxtb	r4, r4
    5966:	7828      	ldrb	r0, [r5, #0]
    5968:	42a0      	cmp	r0, r4
    596a:	d8ed      	bhi.n	5948 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    596c:	2010      	movs	r0, #16
    596e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5972:	4620      	mov	r0, r4
    5974:	e7fb      	b.n	596e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5976:	0000      	.short	0x0000
    5978:	2000101a 	.word	0x2000101a
    597c:	b570      	push	{r4, r5, r6, lr}
    597e:	4605      	mov	r5, r0
    5980:	f7ff ffaa 	bl	58d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5984:	2810      	cmp	r0, #16
    5986:	d11c      	bne.n	59c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5988:	4c0e      	ldr	r4, [pc, #56]	; (59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    598a:	7820      	ldrb	r0, [r4, #0]
    598c:	1e40      	subs	r0, r0, #1
    598e:	b2c0      	uxtb	r0, r0
    5990:	7020      	strb	r0, [r4, #0]
    5992:	42a8      	cmp	r0, r5
    5994:	d015      	beq.n	59c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5996:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    599a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    599e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    59a2:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    59a6:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    59aa:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    59ae:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    59b2:	7820      	ldrb	r0, [r4, #0]
    59b4:	f7ff ff90 	bl	58d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    59b8:	2810      	cmp	r0, #16
    59ba:	d002      	beq.n	59c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    59bc:	4420      	add	r0, r4
    59be:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    59c2:	bd70      	pop	{r4, r5, r6, pc}
    59c4:	2000101a 	.word	0x2000101a
    59c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59cc:	4c21      	ldr	r4, [pc, #132]	; (5a54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    59ce:	4606      	mov	r6, r0
    59d0:	19a7      	adds	r7, r4, r6
    59d2:	78a0      	ldrb	r0, [r4, #2]
    59d4:	1e40      	subs	r0, r0, #1
    59d6:	b2c5      	uxtb	r5, r0
    59d8:	70a5      	strb	r5, [r4, #2]
    59da:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    59de:	42ae      	cmp	r6, r5
    59e0:	d02a      	beq.n	5a38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    59e2:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    59e6:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    59ea:	f10a 0103 	add.w	r1, sl, #3
    59ee:	f109 0003 	add.w	r0, r9, #3
    59f2:	2210      	movs	r2, #16
    59f4:	f006 fbb7 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    59f8:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    59fc:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5a00:	2210      	movs	r2, #16
    5a02:	f006 fbb0 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a06:	1960      	adds	r0, r4, r5
    5a08:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5a0c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5a10:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5a14:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5a18:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5a1c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5a20:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5a24:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5a28:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5a2c:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5a30:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5a34:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5a38:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5a3c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a40:	07c0      	lsls	r0, r0, #31
    5a42:	d104      	bne.n	5a4e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    5a44:	4640      	mov	r0, r8
    5a46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a4a:	f7ff bf97 	b.w	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a52:	0000      	.short	0x0000
    5a54:	2000101a 	.word	0x2000101a
    5a58:	4905      	ldr	r1, [pc, #20]	; (5a70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    5a5a:	784a      	ldrb	r2, [r1, #1]
    5a5c:	1e52      	subs	r2, r2, #1
    5a5e:	704a      	strb	r2, [r1, #1]
    5a60:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5a64:	2200      	movs	r2, #0
    5a66:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5a6a:	f7ff bf87 	b.w	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5a6e:	0000      	.short	0x0000
    5a70:	2000101a 	.word	0x2000101a

00005a74 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    5a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a76:	f06f 021f 	mvn.w	r2, #31
    5a7a:	0c01      	lsrs	r1, r0, #16
    5a7c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    5a80:	251f      	movs	r5, #31
    5a82:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5a86:	3854      	subs	r0, #84	; 0x54
    5a88:	d00d      	beq.n	5aa6 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5a8a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5a8e:	3855      	subs	r0, #85	; 0x55
    5a90:	d009      	beq.n	5aa6 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5a92:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5a96:	38aa      	subs	r0, #170	; 0xaa
    5a98:	d005      	beq.n	5aa6 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5a9a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    5a9e:	38aa      	subs	r0, #170	; 0xaa
    5aa0:	d001      	beq.n	5aa6 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5aa2:	2001      	movs	r0, #1
    5aa4:	e000      	b.n	5aa8 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    5aa6:	2000      	movs	r0, #0
    5aa8:	2200      	movs	r2, #0
    5aaa:	4613      	mov	r3, r2
    5aac:	ea4f 0402 	mov.w	r4, r2
    5ab0:	ea82 0701 	eor.w	r7, r2, r1
    5ab4:	43ff      	mvns	r7, r7
    5ab6:	431f      	orrs	r7, r3
    5ab8:	1c7f      	adds	r7, r7, #1
    5aba:	d00f      	beq.n	5adc <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    5abc:	f006 0701 	and.w	r7, r6, #1
    5ac0:	0852      	lsrs	r2, r2, #1
    5ac2:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    5ac6:	f005 0701 	and.w	r7, r5, #1
    5aca:	085b      	lsrs	r3, r3, #1
    5acc:	0876      	lsrs	r6, r6, #1
    5ace:	086d      	lsrs	r5, r5, #1
    5ad0:	1c64      	adds	r4, r4, #1
    5ad2:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    5ad6:	2c16      	cmp	r4, #22
    5ad8:	d3ea      	bcc.n	5ab0 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    5ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5adc:	2000      	movs	r0, #0
    5ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005ae0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ae4:	4604      	mov	r4, r0
    5ae6:	2601      	movs	r6, #1
    5ae8:	f100 0570 	add.w	r5, r0, #112	; 0x70
    5aec:	b159      	cbz	r1, 5b06 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x26>
    5aee:	2901      	cmp	r1, #1
    5af0:	d020      	beq.n	5b34 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x54>
    5af2:	2902      	cmp	r1, #2
    5af4:	d045      	beq.n	5b82 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa2>
    5af6:	2903      	cmp	r1, #3
    5af8:	d11a      	bne.n	5b30 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    5afa:	4601      	mov	r1, r0
    5afc:	4628      	mov	r0, r5
    5afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b02:	f007 be8f 	b.w	d824 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    5b06:	f44f 7204 	mov.w	r2, #528	; 0x210
    5b0a:	2100      	movs	r1, #0
    5b0c:	f006 fba5 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b10:	f004 fe44 	bl	a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5b14:	f644 112b 	movw	r1, #18731	; 0x492b
    5b18:	4008      	ands	r0, r1
    5b1a:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    5b1e:	0a00      	lsrs	r0, r0, #8
    5b20:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    5b24:	20fe      	movs	r0, #254	; 0xfe
    5b26:	f885 0074 	strb.w	r0, [r5, #116]	; 0x74
    5b2a:	207f      	movs	r0, #127	; 0x7f
    5b2c:	7268      	strb	r0, [r5, #9]
    5b2e:	7466      	strb	r6, [r4, #17]
    5b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b34:	2700      	movs	r7, #0
    5b36:	f8a4 7106 	strh.w	r7, [r4, #262]	; 0x106
    5b3a:	f884 70fb 	strb.w	r7, [r4, #251]	; 0xfb
    5b3e:	6861      	ldr	r1, [r4, #4]
    5b40:	4815      	ldr	r0, [pc, #84]	; (5b98 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb8>)
    5b42:	460a      	mov	r2, r1
    5b44:	4408      	add	r0, r1
    5b46:	fbb0 f0f1 	udiv	r0, r0, r1
    5b4a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    5b4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5b52:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    5b56:	8963      	ldrh	r3, [r4, #10]
    5b58:	4628      	mov	r0, r5
    5b5a:	f000 f899 	bl	5c90 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    5b5e:	4621      	mov	r1, r4
    5b60:	4628      	mov	r0, r5
    5b62:	f007 fe5f 	bl	d824 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    5b66:	f006 fac8 	bl	c0fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5b6a:	b120      	cbz	r0, 5b76 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x96>
    5b6c:	f8d4 0012 	ldr.w	r0, [r4, #18]
    5b70:	f7ff ff80 	bl	5a74 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    5b74:	b110      	cbz	r0, 5b7c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9c>
    5b76:	f884 716c 	strb.w	r7, [r4, #364]	; 0x16c
    5b7a:	e7d9      	b.n	5b30 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    5b7c:	f884 616c 	strb.w	r6, [r4, #364]	; 0x16c
    5b80:	e7d6      	b.n	5b30 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    5b82:	6841      	ldr	r1, [r0, #4]
    5b84:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    5b88:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    5b8c:	4628      	mov	r0, r5
    5b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b92:	f000 b87d 	b.w	5c90 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    5b96:	0000      	.short	0x0000
    5b98:	01c9c37f 	.word	0x01c9c37f

00005b9c <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA>:
    5b9c:	b510      	push	{r4, lr}
    5b9e:	2820      	cmp	r0, #32
    5ba0:	d304      	bcc.n	5bac <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA+0x10>
    5ba2:	f240 117b 	movw	r1, #379	; 0x17b
    5ba6:	2029      	movs	r0, #41	; 0x29
    5ba8:	f7fe f8da 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bac:	4901      	ldr	r1, [pc, #4]	; (5bb4 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA+0x18>)
    5bae:	5c08      	ldrb	r0, [r1, r0]
    5bb0:	bd10      	pop	{r4, pc}
    5bb2:	0000      	.short	0x0000
    5bb4:	20000fec 	.word	0x20000fec

00005bb8 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I>:
    5bb8:	b510      	push	{r4, lr}
    5bba:	2820      	cmp	r0, #32
    5bbc:	d304      	bcc.n	5bc8 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I+0x10>
    5bbe:	f240 1181 	movw	r1, #385	; 0x181
    5bc2:	2029      	movs	r0, #41	; 0x29
    5bc4:	f7fe f8cc 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bc8:	4a01      	ldr	r2, [pc, #4]	; (5bd0 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I+0x18>)
    5bca:	5411      	strb	r1, [r2, r0]
    5bcc:	bd10      	pop	{r4, pc}
    5bce:	0000      	.short	0x0000
    5bd0:	20000fec 	.word	0x20000fec

00005bd4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    5bd4:	b510      	push	{r4, lr}
    5bd6:	2820      	cmp	r0, #32
    5bd8:	d304      	bcc.n	5be4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x10>
    5bda:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    5bde:	2029      	movs	r0, #41	; 0x29
    5be0:	f7fe f8be 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5be4:	4901      	ldr	r1, [pc, #4]	; (5bec <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    5be6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5bea:	bd10      	pop	{r4, pc}
    5bec:	20000fac 	.word	0x20000fac

00005bf0 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    5bf0:	b510      	push	{r4, lr}
    5bf2:	2820      	cmp	r0, #32
    5bf4:	d304      	bcc.n	5c00 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x10>
    5bf6:	f44f 71ba 	mov.w	r1, #372	; 0x174
    5bfa:	2029      	movs	r0, #41	; 0x29
    5bfc:	f7fe f8b0 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c00:	4a01      	ldr	r2, [pc, #4]	; (5c08 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    5c02:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
    5c06:	bd10      	pop	{r4, pc}
    5c08:	20000fac 	.word	0x20000fac
    5c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c0e:	7ec3      	ldrb	r3, [r0, #27]
    5c10:	f891 4020 	ldrb.w	r4, [r1, #32]
    5c14:	2501      	movs	r5, #1
    5c16:	fb04 3202 	mla	r2, r4, r2, r3
    5c1a:	2325      	movs	r3, #37	; 0x25
    5c1c:	fbb2 f4f3 	udiv	r4, r2, r3
    5c20:	fb03 2214 	mls	r2, r3, r4, r2
    5c24:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    5c28:	76c2      	strb	r2, [r0, #27]
    5c2a:	f002 0307 	and.w	r3, r2, #7
    5c2e:	7b24      	ldrb	r4, [r4, #12]
    5c30:	fa05 f303 	lsl.w	r3, r5, r3
    5c34:	421c      	tst	r4, r3
    5c36:	d001      	beq.n	5c3c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x4c>
    5c38:	7702      	strb	r2, [r0, #28]
    5c3a:	e01e      	b.n	5c7a <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8a>
    5c3c:	7e83      	ldrb	r3, [r0, #26]
    5c3e:	fbb2 f4f3 	udiv	r4, r2, r3
    5c42:	fb03 2214 	mls	r2, r3, r4, r2
    5c46:	1c52      	adds	r2, r2, #1
    5c48:	b2d2      	uxtb	r2, r2
    5c4a:	2300      	movs	r3, #0
    5c4c:	18c4      	adds	r4, r0, r3
    5c4e:	7d64      	ldrb	r4, [r4, #21]
    5c50:	4294      	cmp	r4, r2
    5c52:	d314      	bcc.n	5c7e <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8e>
    5c54:	2400      	movs	r4, #0
    5c56:	18ce      	adds	r6, r1, r3
    5c58:	f896 600c 	ldrb.w	r6, [r6, #12]
    5c5c:	fa05 f704 	lsl.w	r7, r5, r4
    5c60:	423e      	tst	r6, r7
    5c62:	d001      	beq.n	5c68 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x78>
    5c64:	1e52      	subs	r2, r2, #1
    5c66:	b2d2      	uxtb	r2, r2
    5c68:	b122      	cbz	r2, 5c74 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x84>
    5c6a:	1c64      	adds	r4, r4, #1
    5c6c:	b2e4      	uxtb	r4, r4
    5c6e:	2c08      	cmp	r4, #8
    5c70:	d3f4      	bcc.n	5c5c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x6c>
    5c72:	e006      	b.n	5c82 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x92>
    5c74:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    5c78:	7701      	strb	r1, [r0, #28]
    5c7a:	2000      	movs	r0, #0
    5c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c7e:	1b12      	subs	r2, r2, r4
    5c80:	b2d2      	uxtb	r2, r2
    5c82:	1c5b      	adds	r3, r3, #1
    5c84:	b2db      	uxtb	r3, r3
    5c86:	2b05      	cmp	r3, #5
    5c88:	d3e0      	bcc.n	5c4c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x5c>
    5c8a:	201f      	movs	r0, #31
    5c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c8e:	0000      	movs	r0, r0
    5c90:	b530      	push	{r4, r5, lr}
    5c92:	2400      	movs	r4, #0
    5c94:	8584      	strh	r4, [r0, #44]	; 0x2c
    5c96:	8e04      	ldrh	r4, [r0, #48]	; 0x30
    5c98:	4d13      	ldr	r5, [pc, #76]	; (5ce8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xf8>)
    5c9a:	434c      	muls	r4, r1
    5c9c:	fbb4 f4f2 	udiv	r4, r4, r2
    5ca0:	8604      	strh	r4, [r0, #48]	; 0x30
    5ca2:	f242 7410 	movw	r4, #10000	; 0x2710
    5ca6:	4363      	muls	r3, r4
    5ca8:	fbb3 f3f2 	udiv	r3, r3, r2
    5cac:	1c5b      	adds	r3, r3, #1
    5cae:	b29b      	uxth	r3, r3
    5cb0:	fb03 f402 	mul.w	r4, r3, r2
    5cb4:	85c3      	strh	r3, [r0, #46]	; 0x2e
    5cb6:	42ac      	cmp	r4, r5
    5cb8:	d901      	bls.n	5cbe <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xce>
    5cba:	1e5b      	subs	r3, r3, #1
    5cbc:	85c3      	strh	r3, [r0, #46]	; 0x2e
    5cbe:	4b0b      	ldr	r3, [pc, #44]	; (5cec <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xfc>)
    5cc0:	f240 2471 	movw	r4, #625	; 0x271
    5cc4:	fbb3 f3f2 	udiv	r3, r3, r2
    5cc8:	1c5b      	adds	r3, r3, #1
    5cca:	8683      	strh	r3, [r0, #52]	; 0x34
    5ccc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    5cce:	4363      	muls	r3, r4
    5cd0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5cd4:	1e5b      	subs	r3, r3, #1
    5cd6:	fbb3 f3f2 	udiv	r3, r3, r2
    5cda:	6243      	str	r3, [r0, #36]	; 0x24
    5cdc:	6a03      	ldr	r3, [r0, #32]
    5cde:	434b      	muls	r3, r1
    5ce0:	fbb3 f1f2 	udiv	r1, r3, r2
    5ce4:	6201      	str	r1, [r0, #32]
    5ce6:	bd30      	pop	{r4, r5, pc}
    5ce8:	01e84800 	.word	0x01e84800
    5cec:	02625a00 	.word	0x02625a00

00005cf0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5cf0:	7841      	ldrb	r1, [r0, #1]
    5cf2:	b141      	cbz	r1, 5d06 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5cf4:	78c0      	ldrb	r0, [r0, #3]
    5cf6:	2819      	cmp	r0, #25
    5cf8:	d203      	bcs.n	5d02 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5cfa:	4a04      	ldr	r2, [pc, #16]	; (5d0c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5cfc:	5c10      	ldrb	r0, [r2, r0]
    5cfe:	4288      	cmp	r0, r1
    5d00:	d101      	bne.n	5d06 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5d02:	2001      	movs	r0, #1
    5d04:	4770      	bx	lr
    5d06:	2000      	movs	r0, #0
    5d08:	4770      	bx	lr
    5d0a:	0000      	.short	0x0000
    5d0c:	0000f83a 	.word	0x0000f83a

00005d10 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5d10:	b50c      	push	{r2, r3, lr}
    5d12:	a20b      	add	r2, pc, #44	; (adr r2, 5d40 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5d14:	e9d2 1200 	ldrd	r1, r2, [r2]
    5d18:	e9cd 1200 	strd	r1, r2, [sp]
    5d1c:	7901      	ldrb	r1, [r0, #4]
    5d1e:	7940      	ldrb	r0, [r0, #5]
    5d20:	f001 0207 	and.w	r2, r1, #7
    5d24:	4669      	mov	r1, sp
    5d26:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5d2a:	2a01      	cmp	r2, #1
    5d2c:	d804      	bhi.n	5d38 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5d2e:	f000 0007 	and.w	r0, r0, #7
    5d32:	5c08      	ldrb	r0, [r1, r0]
    5d34:	2801      	cmp	r0, #1
    5d36:	d901      	bls.n	5d3c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5d38:	2000      	movs	r0, #0
    5d3a:	bd0c      	pop	{r2, r3, pc}
    5d3c:	2001      	movs	r0, #1
    5d3e:	bd0c      	pop	{r2, r3, pc}
    5d40:	02010100 	.word	0x02010100
    5d44:	03020201 	.word	0x03020201

00005d48 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5d48:	b510      	push	{r4, lr}
    5d4a:	2201      	movs	r2, #1
    5d4c:	70c1      	strb	r1, [r0, #3]
    5d4e:	2919      	cmp	r1, #25
    5d50:	d202      	bcs.n	5d58 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5d52:	4a06      	ldr	r2, [pc, #24]	; (5d6c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5d54:	5c52      	ldrb	r2, [r2, r1]
    5d56:	e006      	b.n	5d66 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d58:	29ff      	cmp	r1, #255	; 0xff
    5d5a:	d004      	beq.n	5d66 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d5c:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    5d60:	202a      	movs	r0, #42	; 0x2a
    5d62:	f7fd fffd 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d66:	7042      	strb	r2, [r0, #1]
    5d68:	bd10      	pop	{r4, pc}
    5d6a:	0000      	.short	0x0000
    5d6c:	0000f83a 	.word	0x0000f83a

00005d70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d74:	ea5f 0900 	movs.w	r9, r0
    5d78:	d006      	beq.n	5d88 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5d7a:	4d21      	ldr	r5, [pc, #132]	; (5e00 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5d7c:	f105 0010 	add.w	r0, r5, #16
    5d80:	7b69      	ldrb	r1, [r5, #13]
    5d82:	4682      	mov	sl, r0
    5d84:	b119      	cbz	r1, 5d8e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5d86:	e00b      	b.n	5da0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5d88:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5d8c:	e005      	b.n	5d9a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5d8e:	2100      	movs	r1, #0
    5d90:	f007 ff37 	bl	dc02 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5d94:	b120      	cbz	r0, 5da0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5d96:	f240 31d3 	movw	r1, #979	; 0x3d3
    5d9a:	202b      	movs	r0, #43	; 0x2b
    5d9c:	f7fd ffe0 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5da0:	8a2e      	ldrh	r6, [r5, #16]
    5da2:	2000      	movs	r0, #0
    5da4:	f7fe f9be 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5da8:	4f16      	ldr	r7, [pc, #88]	; (5e04 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5daa:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5dae:	4604      	mov	r4, r0
    5db0:	6838      	ldr	r0, [r7, #0]
    5db2:	b158      	cbz	r0, 5dcc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5db4:	8a28      	ldrh	r0, [r5, #16]
    5db6:	42a0      	cmp	r0, r4
    5db8:	d308      	bcc.n	5dcc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5dba:	1b00      	subs	r0, r0, r4
    5dbc:	b2c0      	uxtb	r0, r0
    5dbe:	2101      	movs	r1, #1
    5dc0:	f007 f9e3 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5dc4:	b148      	cbz	r0, 5dda <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5dc6:	4649      	mov	r1, r9
    5dc8:	683a      	ldr	r2, [r7, #0]
    5dca:	e004      	b.n	5dd6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5dcc:	f8d8 2000 	ldr.w	r2, [r8]
    5dd0:	b11a      	cbz	r2, 5dda <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5dd2:	8a28      	ldrh	r0, [r5, #16]
    5dd4:	4649      	mov	r1, r9
    5dd6:	4790      	blx	r2
    5dd8:	b968      	cbnz	r0, 5df6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5dda:	2100      	movs	r1, #0
    5ddc:	4650      	mov	r0, sl
    5dde:	f007 ff10 	bl	dc02 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5de2:	b910      	cbnz	r0, 5dea <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5de4:	8a28      	ldrh	r0, [r5, #16]
    5de6:	42b0      	cmp	r0, r6
    5de8:	d1e2      	bne.n	5db0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5dea:	4808      	ldr	r0, [pc, #32]	; (5e0c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5dec:	6801      	ldr	r1, [r0, #0]
    5dee:	b129      	cbz	r1, 5dfc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5df0:	4648      	mov	r0, r9
    5df2:	4788      	blx	r1
    5df4:	b110      	cbz	r0, 5dfc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5df6:	2001      	movs	r0, #1
    5df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dfc:	2000      	movs	r0, #0
    5dfe:	e7fb      	b.n	5df8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5e00:	20000dc0 	.word	0x20000dc0
    5e04:	2000022c 	.word	0x2000022c
    5e08:	20000230 	.word	0x20000230
    5e0c:	20000238 	.word	0x20000238

00005e10 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5e10:	b570      	push	{r4, r5, r6, lr}
    5e12:	0005      	movs	r5, r0
    5e14:	460c      	mov	r4, r1
    5e16:	d02e      	beq.n	5e76 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e18:	4818      	ldr	r0, [pc, #96]	; (5e7c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5e1a:	6802      	ldr	r2, [r0, #0]
    5e1c:	b35a      	cbz	r2, 5e76 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e1e:	4628      	mov	r0, r5
    5e20:	4790      	blx	r2
    5e22:	b340      	cbz	r0, 5e76 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e24:	7820      	ldrb	r0, [r4, #0]
    5e26:	2811      	cmp	r0, #17
    5e28:	d002      	beq.n	5e30 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5e2a:	2814      	cmp	r0, #20
    5e2c:	d003      	beq.n	5e36 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    5e2e:	e020      	b.n	5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e30:	7920      	ldrb	r0, [r4, #4]
    5e32:	b1f0      	cbz	r0, 5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e34:	e00a      	b.n	5e4c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e36:	7920      	ldrb	r0, [r4, #4]
    5e38:	b120      	cbz	r0, 5e44 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    5e3a:	4628      	mov	r0, r5
    5e3c:	f008 f8c8 	bl	dfd0 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5e40:	b120      	cbz	r0, 5e4c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e42:	e016      	b.n	5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e44:	490e      	ldr	r1, [pc, #56]	; (5e80 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    5e46:	2000      	movs	r0, #0
    5e48:	7348      	strb	r0, [r1, #13]
    5e4a:	e012      	b.n	5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e4c:	88e4      	ldrh	r4, [r4, #6]
    5e4e:	2100      	movs	r1, #0
    5e50:	4620      	mov	r0, r4
    5e52:	f007 f99a 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5e56:	b160      	cbz	r0, 5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e58:	8800      	ldrh	r0, [r0, #0]
    5e5a:	f007 f9fb 	bl	d254 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5e5e:	2100      	movs	r1, #0
    5e60:	4620      	mov	r0, r4
    5e62:	f7fe f9fb 	bl	425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5e66:	b120      	cbz	r0, 5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e68:	f44f 719a 	mov.w	r1, #308	; 0x134
    5e6c:	202b      	movs	r0, #43	; 0x2b
    5e6e:	f7fd ff77 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e72:	2001      	movs	r0, #1
    5e74:	bd70      	pop	{r4, r5, r6, pc}
    5e76:	2000      	movs	r0, #0
    5e78:	bd70      	pop	{r4, r5, r6, pc}
    5e7a:	0000      	.short	0x0000
    5e7c:	20000228 	.word	0x20000228
    5e80:	20000dc0 	.word	0x20000dc0

00005e84 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5e84:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e88:	b087      	sub	sp, #28
    5e8a:	460c      	mov	r4, r1
    5e8c:	a902      	add	r1, sp, #8
    5e8e:	9807      	ldr	r0, [sp, #28]
    5e90:	f007 fab3 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e94:	2800      	cmp	r0, #0
    5e96:	d17c      	bne.n	5f92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    5e98:	f8df 9118 	ldr.w	r9, [pc, #280]	; 5fb4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x130>
    5e9c:	f04f 0a01 	mov.w	sl, #1
    5ea0:	4680      	mov	r8, r0
    5ea2:	9803      	ldr	r0, [sp, #12]
    5ea4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    5ea8:	2800      	cmp	r0, #0
    5eaa:	d00c      	beq.n	5ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5eac:	f8d9 2000 	ldr.w	r2, [r9]
    5eb0:	b162      	cbz	r2, 5ecc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5eb2:	4621      	mov	r1, r4
    5eb4:	9807      	ldr	r0, [sp, #28]
    5eb6:	4790      	blx	r2
    5eb8:	b140      	cbz	r0, 5ecc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5eba:	4620      	mov	r0, r4
    5ebc:	f000 f916 	bl	60ec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    5ec0:	2800      	cmp	r0, #0
    5ec2:	d1ee      	bne.n	5ea2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5ec4:	2001      	movs	r0, #1
    5ec6:	b009      	add	sp, #36	; 0x24
    5ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ecc:	9d03      	ldr	r5, [sp, #12]
    5ece:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    5ed2:	3570      	adds	r5, #112	; 0x70
    5ed4:	b948      	cbnz	r0, 5eea <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x66>
    5ed6:	7f68      	ldrb	r0, [r5, #29]
    5ed8:	f88d 0004 	strb.w	r0, [sp, #4]
    5edc:	9801      	ldr	r0, [sp, #4]
    5ede:	9001      	str	r0, [sp, #4]
    5ee0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5ee4:	b108      	cbz	r0, 5eea <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x66>
    5ee6:	2001      	movs	r0, #1
    5ee8:	e000      	b.n	5eec <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5eea:	2000      	movs	r0, #0
    5eec:	4683      	mov	fp, r0
    5eee:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
    5ef2:	b1c0      	cbz	r0, 5f26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa2>
    5ef4:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
    5ef8:	0780      	lsls	r0, r0, #30
    5efa:	d514      	bpl.n	5f26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa2>
    5efc:	f884 8001 	strb.w	r8, [r4, #1]
    5f00:	f884 a000 	strb.w	sl, [r4]
    5f04:	f884 8004 	strb.w	r8, [r4, #4]
    5f08:	9907      	ldr	r1, [sp, #28]
    5f0a:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f0e:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
    5f12:	71e1      	strb	r1, [r4, #7]
    5f14:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
    5f18:	8121      	strh	r1, [r4, #8]
    5f1a:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
    5f1e:	8161      	strh	r1, [r4, #10]
    5f20:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
    5f24:	e7c9      	b.n	5eba <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f26:	9807      	ldr	r0, [sp, #28]
    5f28:	f7fe fb40 	bl	45ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f2c:	0007      	movs	r7, r0
    5f2e:	d00d      	beq.n	5f4c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xc8>
    5f30:	f006 ff39 	bl	cda6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5f34:	0006      	movs	r6, r0
    5f36:	d015      	beq.n	5f64 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe0>
    5f38:	f884 8001 	strb.w	r8, [r4, #1]
    5f3c:	200d      	movs	r0, #13
    5f3e:	7020      	strb	r0, [r4, #0]
    5f40:	9807      	ldr	r0, [sp, #28]
    5f42:	80e0      	strh	r0, [r4, #6]
    5f44:	8126      	strh	r6, [r4, #8]
    5f46:	f884 a004 	strb.w	sl, [r4, #4]
    5f4a:	e007      	b.n	5f5c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    5f4c:	f240 213a 	movw	r1, #570	; 0x23a
    5f50:	e02b      	b.n	5faa <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    5f52:	2100      	movs	r1, #0
    5f54:	4638      	mov	r0, r7
    5f56:	460a      	mov	r2, r1
    5f58:	f007 f833 	bl	cfc2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5f5c:	1e76      	subs	r6, r6, #1
    5f5e:	b2b6      	uxth	r6, r6
    5f60:	d2f7      	bcs.n	5f52 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xce>
    5f62:	e7aa      	b.n	5eba <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f64:	9807      	ldr	r0, [sp, #28]
    5f66:	f7fe fb0b 	bl	4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5f6a:	b1e0      	cbz	r0, 5fa6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x122>
    5f6c:	f1bb 0f00 	cmp.w	fp, #0
    5f70:	d01e      	beq.n	5fb0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5f72:	f006 fe50 	bl	cc16 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5f76:	b160      	cbz	r0, 5f92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    5f78:	9807      	ldr	r0, [sp, #28]
    5f7a:	f007 f96b 	bl	d254 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5f7e:	2100      	movs	r1, #0
    5f80:	9807      	ldr	r0, [sp, #28]
    5f82:	f7fe f96b 	bl	425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5f86:	f884 8001 	strb.w	r8, [r4, #1]
    5f8a:	210a      	movs	r1, #10
    5f8c:	4640      	mov	r0, r8
    5f8e:	7021      	strb	r1, [r4, #0]
    5f90:	e000      	b.n	5f94 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5f92:	e00d      	b.n	5fb0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5f94:	f884 8004 	strb.w	r8, [r4, #4]
    5f98:	9907      	ldr	r1, [sp, #28]
    5f9a:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f9e:	7fa9      	ldrb	r1, [r5, #30]
    5fa0:	71e1      	strb	r1, [r4, #7]
    5fa2:	7768      	strb	r0, [r5, #29]
    5fa4:	e789      	b.n	5eba <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5fa6:	f44f 7116 	mov.w	r1, #600	; 0x258
    5faa:	202b      	movs	r0, #43	; 0x2b
    5fac:	f7fd fed8 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fb0:	2000      	movs	r0, #0
    5fb2:	e788      	b.n	5ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5fb4:	20000234 	.word	0x20000234

00005fb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fbc:	4c12      	ldr	r4, [pc, #72]	; (6008 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fbe:	4607      	mov	r7, r0
    5fc0:	460e      	mov	r6, r1
    5fc2:	7de0      	ldrb	r0, [r4, #23]
    5fc4:	b110      	cbz	r0, 5fcc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5fc6:	8b20      	ldrh	r0, [r4, #24]
    5fc8:	2800      	cmp	r0, #0
    5fca:	d012      	beq.n	5ff2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5fcc:	480e      	ldr	r0, [pc, #56]	; (6008 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fce:	300e      	adds	r0, #14
    5fd0:	4680      	mov	r8, r0
    5fd2:	f007 fdc0 	bl	db56 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fd6:	b9a8      	cbnz	r0, 6004 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5fd8:	89e5      	ldrh	r5, [r4, #14]
    5fda:	89e0      	ldrh	r0, [r4, #14]
    5fdc:	4632      	mov	r2, r6
    5fde:	4639      	mov	r1, r7
    5fe0:	f007 fdc8 	bl	db74 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    5fe4:	b138      	cbz	r0, 5ff6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5fe6:	7de0      	ldrb	r0, [r4, #23]
    5fe8:	b110      	cbz	r0, 5ff0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5fea:	8b20      	ldrh	r0, [r4, #24]
    5fec:	1e40      	subs	r0, r0, #1
    5fee:	8320      	strh	r0, [r4, #24]
    5ff0:	2001      	movs	r0, #1
    5ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ff6:	4640      	mov	r0, r8
    5ff8:	f007 fdad 	bl	db56 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5ffc:	b910      	cbnz	r0, 6004 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5ffe:	89e0      	ldrh	r0, [r4, #14]
    6000:	42a8      	cmp	r0, r5
    6002:	d1ea      	bne.n	5fda <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6004:	2000      	movs	r0, #0
    6006:	e7f4      	b.n	5ff2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6008:	20000dc0 	.word	0x20000dc0

0000600c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    600c:	b510      	push	{r4, lr}
    600e:	7901      	ldrb	r1, [r0, #4]
    6010:	b119      	cbz	r1, 601a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    6012:	2901      	cmp	r1, #1
    6014:	d006      	beq.n	6024 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6016:	2000      	movs	r0, #0
    6018:	bd10      	pop	{r4, pc}
    601a:	8842      	ldrh	r2, [r0, #2]
    601c:	6883      	ldr	r3, [r0, #8]
    601e:	8800      	ldrh	r0, [r0, #0]
    6020:	2102      	movs	r1, #2
    6022:	e003      	b.n	602c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6024:	8842      	ldrh	r2, [r0, #2]
    6026:	6883      	ldr	r3, [r0, #8]
    6028:	8800      	ldrh	r0, [r0, #0]
    602a:	2101      	movs	r1, #1
    602c:	f000 f808 	bl	6040 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    6030:	b910      	cbnz	r0, 6038 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    6032:	4902      	ldr	r1, [pc, #8]	; (603c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6034:	2001      	movs	r0, #1
    6036:	7008      	strb	r0, [r1, #0]
    6038:	2001      	movs	r0, #1
    603a:	bd10      	pop	{r4, pc}
    603c:	20000dc0 	.word	0x20000dc0
    6040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6044:	468a      	mov	sl, r1
    6046:	4699      	mov	r9, r3
    6048:	4615      	mov	r5, r2
    604a:	4604      	mov	r4, r0
    604c:	a901      	add	r1, sp, #4
    604e:	f007 f9d4 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6052:	bbe0      	cbnz	r0, 60ce <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6054:	9f02      	ldr	r7, [sp, #8]
    6056:	f04f 0800 	mov.w	r8, #0
    605a:	3770      	adds	r7, #112	; 0x70
    605c:	b18d      	cbz	r5, 6082 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    605e:	4620      	mov	r0, r4
    6060:	f7fe faa4 	bl	45ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6064:	0004      	movs	r4, r0
    6066:	d00f      	beq.n	6088 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    6068:	4629      	mov	r1, r5
    606a:	f006 fedb 	bl	ce24 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    606e:	0006      	movs	r6, r0
    6070:	d003      	beq.n	607a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    6072:	481d      	ldr	r0, [pc, #116]	; (60e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6074:	8880      	ldrh	r0, [r0, #4]
    6076:	42a8      	cmp	r0, r5
    6078:	d208      	bcs.n	608c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    607a:	2000      	movs	r0, #0
    607c:	b004      	add	sp, #16
    607e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6082:	2001      	movs	r0, #1
    6084:	7538      	strb	r0, [r7, #20]
    6086:	e029      	b.n	60dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6088:	2189      	movs	r1, #137	; 0x89
    608a:	e02a      	b.n	60e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    608c:	4620      	mov	r0, r4
    608e:	4631      	mov	r1, r6
    6090:	aa03      	add	r2, sp, #12
    6092:	f006 fec0 	bl	ce16 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6096:	9803      	ldr	r0, [sp, #12]
    6098:	f8a0 8000 	strh.w	r8, [r0]
    609c:	f880 8002 	strb.w	r8, [r0, #2]
    60a0:	7d39      	ldrb	r1, [r7, #20]
    60a2:	b109      	cbz	r1, 60a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    60a4:	f04f 0a02 	mov.w	sl, #2
    60a8:	4651      	mov	r1, sl
    60aa:	f007 fcab 	bl	da04 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    60ae:	4631      	mov	r1, r6
    60b0:	2603      	movs	r6, #3
    60b2:	4620      	mov	r0, r4
    60b4:	464a      	mov	r2, r9
    60b6:	462b      	mov	r3, r5
    60b8:	9600      	str	r6, [sp, #0]
    60ba:	f006 fd95 	bl	cbe8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    60be:	4620      	mov	r0, r4
    60c0:	4629      	mov	r1, r5
    60c2:	f006 fe4c 	bl	cd5e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    60c6:	b158      	cbz	r0, 60e0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    60c8:	4644      	mov	r4, r8
    60ca:	a801      	add	r0, sp, #4
    60cc:	e000      	b.n	60d0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    60ce:	e005      	b.n	60dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    60d0:	f007 fd44 	bl	db5c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    60d4:	9802      	ldr	r0, [sp, #8]
    60d6:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    60da:	753c      	strb	r4, [r7, #20]
    60dc:	2001      	movs	r0, #1
    60de:	e7cd      	b.n	607c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    60e0:	219f      	movs	r1, #159	; 0x9f
    60e2:	202b      	movs	r0, #43	; 0x2b
    60e4:	f7fd fe3c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60e8:	20000dc0 	.word	0x20000dc0
    60ec:	b510      	push	{r4, lr}
    60ee:	492c      	ldr	r1, [pc, #176]	; (61a0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    60f0:	b086      	sub	sp, #24
    60f2:	7d8a      	ldrb	r2, [r1, #22]
    60f4:	7801      	ldrb	r1, [r0, #0]
    60f6:	07d3      	lsls	r3, r2, #31
    60f8:	d101      	bne.n	60fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    60fa:	2919      	cmp	r1, #25
    60fc:	d004      	beq.n	6108 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    60fe:	2918      	cmp	r1, #24
    6100:	d01e      	beq.n	6140 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    6102:	2912      	cmp	r1, #18
    6104:	d045      	beq.n	6192 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    6106:	e049      	b.n	619c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6108:	8880      	ldrh	r0, [r0, #4]
    610a:	f8ad 0000 	strh.w	r0, [sp]
    610e:	a902      	add	r1, sp, #8
    6110:	f007 f973 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6114:	b108      	cbz	r0, 611a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    6116:	2158      	movs	r1, #88	; 0x58
    6118:	e035      	b.n	6186 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    611a:	9803      	ldr	r0, [sp, #12]
    611c:	f810 1f62 	ldrb.w	r1, [r0, #98]!
    6120:	f88d 1002 	strb.w	r1, [sp, #2]
    6124:	7841      	ldrb	r1, [r0, #1]
    6126:	f88d 1003 	strb.w	r1, [sp, #3]
    612a:	8840      	ldrh	r0, [r0, #2]
    612c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6130:	2102      	movs	r1, #2
    6132:	4668      	mov	r0, sp
    6134:	f008 ff70 	bl	f018 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6138:	b340      	cbz	r0, 618c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    613a:	f240 114d 	movw	r1, #333	; 0x14d
    613e:	e022      	b.n	6186 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6140:	0791      	lsls	r1, r2, #30
    6142:	d42b      	bmi.n	619c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6144:	8884      	ldrh	r4, [r0, #4]
    6146:	a903      	add	r1, sp, #12
    6148:	4620      	mov	r0, r4
    614a:	f008 fe4d 	bl	ede8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    614e:	b110      	cbz	r0, 6156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    6150:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6154:	e017      	b.n	6186 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6156:	f8ad 4000 	strh.w	r4, [sp]
    615a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    615e:	f8ad 0002 	strh.w	r0, [sp, #2]
    6162:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6166:	f8ad 0004 	strh.w	r0, [sp, #4]
    616a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    616e:	f8ad 0006 	strh.w	r0, [sp, #6]
    6172:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6176:	f8ad 0008 	strh.w	r0, [sp, #8]
    617a:	4668      	mov	r0, sp
    617c:	f008 fe6b 	bl	ee56 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6180:	b120      	cbz	r0, 618c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6182:	f240 115d 	movw	r1, #349	; 0x15d
    6186:	202b      	movs	r0, #43	; 0x2b
    6188:	f7fd fdea 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    618c:	2001      	movs	r0, #1
    618e:	b006      	add	sp, #24
    6190:	bd10      	pop	{r4, pc}
    6192:	0751      	lsls	r1, r2, #29
    6194:	d402      	bmi.n	619c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6196:	7b80      	ldrb	r0, [r0, #14]
    6198:	07c0      	lsls	r0, r0, #31
    619a:	d0f7      	beq.n	618c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    619c:	2000      	movs	r0, #0
    619e:	e7f6      	b.n	618e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    61a0:	20000dc0 	.word	0x20000dc0

000061a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    61a4:	b570      	push	{r4, r5, r6, lr}
    61a6:	4604      	mov	r4, r0
    61a8:	7c00      	ldrb	r0, [r0, #16]
    61aa:	b300      	cbz	r0, 61ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    61ac:	2802      	cmp	r0, #2
    61ae:	d01e      	beq.n	61ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    61b0:	f05f 0001 	movs.w	r0, #1
    61b4:	f104 0141 	add.w	r1, r4, #65	; 0x41
    61b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    61bc:	460d      	mov	r5, r1
    61be:	b1c0      	cbz	r0, 61f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    61c0:	7de0      	ldrb	r0, [r4, #23]
    61c2:	b1f0      	cbz	r0, 6202 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    61c4:	f8d4 0011 	ldr.w	r0, [r4, #17]
    61c8:	f8c4 0041 	str.w	r0, [r4, #65]	; 0x41
    61cc:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    61d0:	f8a4 0045 	strh.w	r0, [r4, #69]	; 0x45
    61d4:	7c20      	ldrb	r0, [r4, #16]
    61d6:	f007 fe7c 	bl	ded2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    61da:	7620      	strb	r0, [r4, #24]
    61dc:	2008      	movs	r0, #8
    61de:	7660      	strb	r0, [r4, #25]
    61e0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    61e4:	4629      	mov	r1, r5
    61e6:	f007 fe60 	bl	deaa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    61ea:	b9a8      	cbnz	r0, 6218 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    61ec:	e00e      	b.n	620c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    61ee:	2000      	movs	r0, #0
    61f0:	e7e0      	b.n	61b4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    61f2:	2000      	movs	r0, #0
    61f4:	f7fe fc22 	bl	4a3c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    61f8:	2800      	cmp	r0, #0
    61fa:	d1eb      	bne.n	61d4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    61fc:	f240 4172 	movw	r1, #1138	; 0x472
    6200:	e001      	b.n	6206 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6202:	f240 4176 	movw	r1, #1142	; 0x476
    6206:	202d      	movs	r0, #45	; 0x2d
    6208:	f7fd fdaa 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    620c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6210:	4629      	mov	r1, r5
    6212:	f007 fe53 	bl	debc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6216:	b100      	cbz	r0, 621a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6218:	2001      	movs	r0, #1
    621a:	76a0      	strb	r0, [r4, #26]
    621c:	7e20      	ldrb	r0, [r4, #24]
    621e:	b910      	cbnz	r0, 6226 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    6220:	78a0      	ldrb	r0, [r4, #2]
    6222:	0740      	lsls	r0, r0, #29
    6224:	d506      	bpl.n	6234 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6226:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    622a:	f104 0148 	add.w	r1, r4, #72	; 0x48
    622e:	f007 f8a1 	bl	d374 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6232:	7660      	strb	r0, [r4, #25]
    6234:	2500      	movs	r5, #0
    6236:	63a5      	str	r5, [r4, #56]	; 0x38
    6238:	f005 fe20 	bl	be7c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    623c:	63e0      	str	r0, [r4, #60]	; 0x3c
    623e:	2100      	movs	r1, #0
    6240:	4620      	mov	r0, r4
    6242:	f007 ff55 	bl	e0f0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    6246:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
    624a:	78a0      	ldrb	r0, [r4, #2]
    624c:	0740      	lsls	r0, r0, #29
    624e:	d508      	bpl.n	6262 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6250:	7e20      	ldrb	r0, [r4, #24]
    6252:	2800      	cmp	r0, #0
    6254:	d005      	beq.n	6262 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6256:	4620      	mov	r0, r4
    6258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    625c:	2100      	movs	r1, #0
    625e:	f000 bdbb 	b.w	6dd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    6262:	bd70      	pop	{r4, r5, r6, pc}

00006264 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6264:	b508      	push	{r3, lr}
    6266:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
    626a:	f88d 2000 	strb.w	r2, [sp]
    626e:	9a00      	ldr	r2, [sp, #0]
    6270:	9200      	str	r2, [sp, #0]
    6272:	f89d 3000 	ldrb.w	r3, [sp]
    6276:	2200      	movs	r2, #0
    6278:	b163      	cbz	r3, 6294 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    627a:	704a      	strb	r2, [r1, #1]
    627c:	2317      	movs	r3, #23
    627e:	700b      	strb	r3, [r1, #0]
    6280:	f850 3f9d 	ldr.w	r3, [r0, #157]!
    6284:	604b      	str	r3, [r1, #4]
    6286:	6843      	ldr	r3, [r0, #4]
    6288:	608b      	str	r3, [r1, #8]
    628a:	7a03      	ldrb	r3, [r0, #8]
    628c:	730b      	strb	r3, [r1, #12]
    628e:	f800 2c01 	strb.w	r2, [r0, #-1]
    6292:	e03b      	b.n	630c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6294:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    6298:	f88d 3000 	strb.w	r3, [sp]
    629c:	9b00      	ldr	r3, [sp, #0]
    629e:	9300      	str	r3, [sp, #0]
    62a0:	f89d 3000 	ldrb.w	r3, [sp]
    62a4:	b143      	cbz	r3, 62b8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    62a6:	704a      	strb	r2, [r1, #1]
    62a8:	2305      	movs	r3, #5
    62aa:	700b      	strb	r3, [r1, #0]
    62ac:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    62b0:	604b      	str	r3, [r1, #4]
    62b2:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
    62b6:	e029      	b.n	630c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    62b8:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    62bc:	f88d 3000 	strb.w	r3, [sp]
    62c0:	9b00      	ldr	r3, [sp, #0]
    62c2:	9300      	str	r3, [sp, #0]
    62c4:	f89d 3000 	ldrb.w	r3, [sp]
    62c8:	b11b      	cbz	r3, 62d2 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    62ca:	bf00      	nop
    62cc:	f007 fee8 	bl	e0a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    62d0:	e01c      	b.n	630c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    62d2:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    62d6:	f88d 3000 	strb.w	r3, [sp]
    62da:	9b00      	ldr	r3, [sp, #0]
    62dc:	9300      	str	r3, [sp, #0]
    62de:	f89d 3000 	ldrb.w	r3, [sp]
    62e2:	b1ab      	cbz	r3, 6310 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    62e4:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    62e8:	f88d 3000 	strb.w	r3, [sp]
    62ec:	9b00      	ldr	r3, [sp, #0]
    62ee:	9300      	str	r3, [sp, #0]
    62f0:	f89d 3000 	ldrb.w	r3, [sp]
    62f4:	2b00      	cmp	r3, #0
    62f6:	d1e9      	bne.n	62cc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    62f8:	704a      	strb	r2, [r1, #1]
    62fa:	2314      	movs	r3, #20
    62fc:	700b      	strb	r3, [r1, #0]
    62fe:	f850 3f90 	ldr.w	r3, [r0, #144]!
    6302:	604b      	str	r3, [r1, #4]
    6304:	8883      	ldrh	r3, [r0, #4]
    6306:	810b      	strh	r3, [r1, #8]
    6308:	f800 2c02 	strb.w	r2, [r0, #-2]
    630c:	2001      	movs	r0, #1
    630e:	bd08      	pop	{r3, pc}
    6310:	2000      	movs	r0, #0
    6312:	bd08      	pop	{r3, pc}

00006314 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6314:	b530      	push	{r4, r5, lr}
    6316:	460c      	mov	r4, r1
    6318:	b08d      	sub	sp, #52	; 0x34
    631a:	4605      	mov	r5, r0
    631c:	4601      	mov	r1, r0
    631e:	2220      	movs	r2, #32
    6320:	a802      	add	r0, sp, #8
    6322:	f005 ff20 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6326:	a80a      	add	r0, sp, #40	; 0x28
    6328:	f007 ff8f 	bl	e24a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    632c:	7aa0      	ldrb	r0, [r4, #10]
    632e:	f88d 0018 	strb.w	r0, [sp, #24]
    6332:	7820      	ldrb	r0, [r4, #0]
    6334:	f88d 0008 	strb.w	r0, [sp, #8]
    6338:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    633c:	f8ad 0000 	strh.w	r0, [sp]
    6340:	f89d 0000 	ldrb.w	r0, [sp]
    6344:	f000 0101 	and.w	r1, r0, #1
    6348:	f3c0 0240 	ubfx	r2, r0, #1, #1
    634c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6350:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6354:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6358:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    635c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6360:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6364:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6368:	f3c0 1240 	ubfx	r2, r0, #5, #1
    636c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6370:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6374:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6378:	f8ad 000a 	strh.w	r0, [sp, #10]
    637c:	7d20      	ldrb	r0, [r4, #20]
    637e:	2801      	cmp	r0, #1
    6380:	d006      	beq.n	6390 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6382:	2802      	cmp	r0, #2
    6384:	d004      	beq.n	6390 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6386:	f240 21af 	movw	r1, #687	; 0x2af
    638a:	2006      	movs	r0, #6
    638c:	f7fd fce8 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6390:	f88d 000c 	strb.w	r0, [sp, #12]
    6394:	7a61      	ldrb	r1, [r4, #9]
    6396:	a80a      	add	r0, sp, #40	; 0x28
    6398:	f007 ff3e 	bl	e218 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    639c:	7d20      	ldrb	r0, [r4, #20]
    639e:	2101      	movs	r1, #1
    63a0:	2802      	cmp	r0, #2
    63a2:	d102      	bne.n	63aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    63a4:	7d60      	ldrb	r0, [r4, #21]
    63a6:	1c40      	adds	r0, r0, #1
    63a8:	b2c1      	uxtb	r1, r0
    63aa:	7ea0      	ldrb	r0, [r4, #26]
    63ac:	1c40      	adds	r0, r0, #1
    63ae:	b2c2      	uxtb	r2, r0
    63b0:	a80a      	add	r0, sp, #40	; 0x28
    63b2:	f007 fef8 	bl	e1a6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    63b6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    63ba:	0700      	lsls	r0, r0, #28
    63bc:	d501      	bpl.n	63c2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    63be:	2000      	movs	r0, #0
    63c0:	e020      	b.n	6404 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    63c2:	a80a      	add	r0, sp, #40	; 0x28
    63c4:	f007 ff01 	bl	e1ca <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    63c8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    63cc:	2228      	movs	r2, #40	; 0x28
    63ce:	f000 fdab 	bl	6f28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    63d2:	f240 2171 	movw	r1, #625	; 0x271
    63d6:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    63da:	fbb0 f0f1 	udiv	r0, r0, r1
    63de:	4348      	muls	r0, r1
    63e0:	f8d4 1002 	ldr.w	r1, [r4, #2]
    63e4:	f240 2371 	movw	r3, #625	; 0x271
    63e8:	0a0a      	lsrs	r2, r1, #8
    63ea:	f240 2171 	movw	r1, #625	; 0x271
    63ee:	434a      	muls	r2, r1
    63f0:	f8d4 1005 	ldr.w	r1, [r4, #5]
    63f4:	0a09      	lsrs	r1, r1, #8
    63f6:	4359      	muls	r1, r3
    63f8:	4290      	cmp	r0, r2
    63fa:	d801      	bhi.n	6400 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    63fc:	9204      	str	r2, [sp, #16]
    63fe:	e004      	b.n	640a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6400:	4288      	cmp	r0, r1
    6402:	d801      	bhi.n	6408 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6404:	9004      	str	r0, [sp, #16]
    6406:	e000      	b.n	640a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6408:	9104      	str	r1, [sp, #16]
    640a:	7ca0      	ldrb	r0, [r4, #18]
    640c:	f88d 0017 	strb.w	r0, [sp, #23]
    6410:	7e20      	ldrb	r0, [r4, #24]
    6412:	2801      	cmp	r0, #1
    6414:	d000      	beq.n	6418 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6416:	2000      	movs	r0, #0
    6418:	f88d 0014 	strb.w	r0, [sp, #20]
    641c:	f895 0064 	ldrb.w	r0, [r5, #100]	; 0x64
    6420:	f895 0065 	ldrb.w	r0, [r5, #101]	; 0x65
    6424:	2220      	movs	r2, #32
    6426:	a902      	add	r1, sp, #8
    6428:	4628      	mov	r0, r5
    642a:	f005 fe9c 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    642e:	980a      	ldr	r0, [sp, #40]	; 0x28
    6430:	6228      	str	r0, [r5, #32]
    6432:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    6436:	84a8      	strh	r0, [r5, #36]	; 0x24
    6438:	7ae0      	ldrb	r0, [r4, #11]
    643a:	b168      	cbz	r0, 6458 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    643c:	2802      	cmp	r0, #2
    643e:	d00b      	beq.n	6458 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    6440:	f05f 0001 	movs.w	r0, #1
    6444:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
    6448:	68e0      	ldr	r0, [r4, #12]
    644a:	64a8      	str	r0, [r5, #72]	; 0x48
    644c:	8a20      	ldrh	r0, [r4, #16]
    644e:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    6452:	b00d      	add	sp, #52	; 0x34
    6454:	2000      	movs	r0, #0
    6456:	bd30      	pop	{r4, r5, pc}
    6458:	2000      	movs	r0, #0
    645a:	e7f3      	b.n	6444 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

0000645c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    645c:	4a0a      	ldr	r2, [pc, #40]	; (6488 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    645e:	b510      	push	{r4, lr}
    6460:	2100      	movs	r1, #0
    6462:	7011      	strb	r1, [r2, #0]
    6464:	4c09      	ldr	r4, [pc, #36]	; (648c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6466:	6060      	str	r0, [r4, #4]
    6468:	f000 f822 	bl	64b0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    646c:	b110      	cbz	r0, 6474 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    646e:	f240 311e 	movw	r1, #798	; 0x31e
    6472:	e004      	b.n	647e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6474:	68a0      	ldr	r0, [r4, #8]
    6476:	2800      	cmp	r0, #0
    6478:	d104      	bne.n	6484 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    647a:	f240 3121 	movw	r1, #801	; 0x321
    647e:	202d      	movs	r0, #45	; 0x2d
    6480:	f7fd fc6e 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6484:	bd10      	pop	{r4, pc}
    6486:	0000      	.short	0x0000
    6488:	20000ddc 	.word	0x20000ddc
    648c:	200000f0 	.word	0x200000f0

00006490 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6490:	4902      	ldr	r1, [pc, #8]	; (649c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6492:	4801      	ldr	r0, [pc, #4]	; (6498 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6494:	6088      	str	r0, [r1, #8]
    6496:	4770      	bx	lr
    6498:	00006f10 	.word	0x00006f10
    649c:	200000f0 	.word	0x200000f0

000064a0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    64a0:	4902      	ldr	r1, [pc, #8]	; (64ac <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    64a2:	6008      	str	r0, [r1, #0]
    64a4:	6889      	ldr	r1, [r1, #8]
    64a6:	6809      	ldr	r1, [r1, #0]
    64a8:	4708      	bx	r1
    64aa:	0000      	.short	0x0000
    64ac:	200000f0 	.word	0x200000f0

000064b0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    64b0:	4808      	ldr	r0, [pc, #32]	; (64d4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    64b2:	b510      	push	{r4, lr}
    64b4:	7801      	ldrb	r1, [r0, #0]
    64b6:	b111      	cbz	r1, 64be <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    64b8:	240c      	movs	r4, #12
    64ba:	4620      	mov	r0, r4
    64bc:	bd10      	pop	{r4, pc}
    64be:	2400      	movs	r4, #0
    64c0:	6004      	str	r4, [r0, #0]
    64c2:	6044      	str	r4, [r0, #4]
    64c4:	6084      	str	r4, [r0, #8]
    64c6:	60c4      	str	r4, [r0, #12]
    64c8:	f004 fb4c 	bl	ab64 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    64cc:	f004 f98e 	bl	a7ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    64d0:	e7f3      	b.n	64ba <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    64d2:	0000      	.short	0x0000
    64d4:	20000ddc 	.word	0x20000ddc

000064d8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    64d8:	4904      	ldr	r1, [pc, #16]	; (64ec <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    64da:	b510      	push	{r4, lr}
    64dc:	7809      	ldrb	r1, [r1, #0]
    64de:	2901      	cmp	r1, #1
    64e0:	d101      	bne.n	64e6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    64e2:	f000 fb65 	bl	6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    64e6:	2000      	movs	r0, #0
    64e8:	bd10      	pop	{r4, pc}
    64ea:	0000      	.short	0x0000
    64ec:	20000ddc 	.word	0x20000ddc

000064f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    64f0:	4902      	ldr	r1, [pc, #8]	; (64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    64f2:	4801      	ldr	r0, [pc, #4]	; (64f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    64f4:	6008      	str	r0, [r1, #0]
    64f6:	4770      	bx	lr
    64f8:	00006cfd 	.word	0x00006cfd
    64fc:	200000fc 	.word	0x200000fc
    6500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6504:	000f      	movs	r7, r1
    6506:	4604      	mov	r4, r0
    6508:	d023      	beq.n	6552 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    650a:	f104 0020 	add.w	r0, r4, #32
    650e:	4605      	mov	r5, r0
    6510:	f007 fe84 	bl	e21c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6514:	b9b0      	cbnz	r0, 6544 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6516:	78a0      	ldrb	r0, [r4, #2]
    6518:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    651c:	b350      	cbz	r0, 6574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    651e:	4628      	mov	r0, r5
    6520:	f007 fe53 	bl	e1ca <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6524:	4606      	mov	r6, r0
    6526:	4628      	mov	r0, r5
    6528:	f007 fe78 	bl	e21c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    652c:	1a30      	subs	r0, r6, r0
    652e:	b2c0      	uxtb	r0, r0
    6530:	f007 fec9 	bl	e2c6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6534:	4601      	mov	r1, r0
    6536:	4835      	ldr	r0, [pc, #212]	; (660c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6538:	6842      	ldr	r2, [r0, #4]
    653a:	4411      	add	r1, r2
    653c:	6041      	str	r1, [r0, #4]
    653e:	4628      	mov	r0, r5
    6540:	f007 fe8a 	bl	e258 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6544:	4628      	mov	r0, r5
    6546:	f007 fe4c 	bl	e1e2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    654a:	4601      	mov	r1, r0
    654c:	4620      	mov	r0, r4
    654e:	f007 fe0b 	bl	e168 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    6552:	4d2f      	ldr	r5, [pc, #188]	; (6610 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6554:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
    6558:	2100      	movs	r1, #0
    655a:	6868      	ldr	r0, [r5, #4]
    655c:	8001      	strh	r1, [r0, #0]
    655e:	f007 fe19 	bl	e194 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    6562:	8860      	ldrh	r0, [r4, #2]
    6564:	2813      	cmp	r0, #19
    6566:	d013      	beq.n	6590 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6568:	dc09      	bgt.n	657e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    656a:	2810      	cmp	r0, #16
    656c:	d036      	beq.n	65dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    656e:	2812      	cmp	r0, #18
    6570:	d109      	bne.n	6586 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6572:	e031      	b.n	65d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6574:	4620      	mov	r0, r4
    6576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    657a:	f000 bb19 	b.w	6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    657e:	2815      	cmp	r0, #21
    6580:	d00f      	beq.n	65a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6582:	281d      	cmp	r0, #29
    6584:	d00d      	beq.n	65a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6586:	f240 616f 	movw	r1, #1647	; 0x66f
    658a:	202d      	movs	r0, #45	; 0x2d
    658c:	f7fd fbe8 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6590:	2100      	movs	r1, #0
    6592:	6868      	ldr	r0, [r5, #4]
    6594:	f007 fa98 	bl	dac8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6598:	2101      	movs	r1, #1
    659a:	6868      	ldr	r0, [r5, #4]
    659c:	f007 fdfa 	bl	e194 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    65a0:	e020      	b.n	65e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    65a2:	2101      	movs	r1, #1
    65a4:	6868      	ldr	r0, [r5, #4]
    65a6:	f007 fa8f 	bl	dac8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    65aa:	2101      	movs	r1, #1
    65ac:	6868      	ldr	r0, [r5, #4]
    65ae:	f007 fdf1 	bl	e194 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    65b2:	b136      	cbz	r6, 65c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    65b4:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    65b8:	6868      	ldr	r0, [r5, #4]
    65ba:	f007 faa0 	bl	dafe <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    65be:	2101      	movs	r1, #1
    65c0:	e006      	b.n	65d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    65c2:	f104 0148 	add.w	r1, r4, #72	; 0x48
    65c6:	6868      	ldr	r0, [r5, #4]
    65c8:	f007 fa99 	bl	dafe <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    65cc:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
    65d0:	6868      	ldr	r0, [r5, #4]
    65d2:	f007 fa9a 	bl	db0a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    65d6:	e005      	b.n	65e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    65d8:	2106      	movs	r1, #6
    65da:	e000      	b.n	65de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    65dc:	2102      	movs	r1, #2
    65de:	6868      	ldr	r0, [r5, #4]
    65e0:	f007 fa72 	bl	dac8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    65e4:	4620      	mov	r0, r4
    65e6:	f000 fc6b 	bl	6ec0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    65ea:	8860      	ldrh	r0, [r4, #2]
    65ec:	281d      	cmp	r0, #29
    65ee:	d006      	beq.n	65fe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    65f0:	2815      	cmp	r0, #21
    65f2:	d004      	beq.n	65fe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    65f4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    65f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    65f8:	6868      	ldr	r0, [r5, #4]
    65fa:	f007 fa55 	bl	daa8 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    65fe:	4639      	mov	r1, r7
    6600:	4620      	mov	r0, r4
    6602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6606:	f000 b9d9 	b.w	69bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    660a:	0000      	.short	0x0000
    660c:	20000ddc 	.word	0x20000ddc
    6610:	200000f0 	.word	0x200000f0
    6614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6618:	4d28      	ldr	r5, [pc, #160]	; (66bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    661a:	4680      	mov	r8, r0
    661c:	7828      	ldrb	r0, [r5, #0]
    661e:	2802      	cmp	r0, #2
    6620:	d005      	beq.n	662e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6622:	7828      	ldrb	r0, [r5, #0]
    6624:	2803      	cmp	r0, #3
    6626:	d002      	beq.n	662e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6628:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    662c:	e01f      	b.n	666e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    662e:	4c24      	ldr	r4, [pc, #144]	; (66c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    6630:	6820      	ldr	r0, [r4, #0]
    6632:	7b01      	ldrb	r1, [r0, #12]
    6634:	b109      	cbz	r1, 663a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6636:	f007 fda2 	bl	e17e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11a>
    663a:	6860      	ldr	r0, [r4, #4]
    663c:	2700      	movs	r7, #0
    663e:	f1b8 0f00 	cmp.w	r8, #0
    6642:	7800      	ldrb	r0, [r0, #0]
    6644:	f000 060f 	and.w	r6, r0, #15
    6648:	d01f      	beq.n	668a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    664a:	f004 fc93 	bl	af74 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    664e:	b1e0      	cbz	r0, 668a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6650:	4639      	mov	r1, r7
    6652:	6860      	ldr	r0, [r4, #4]
    6654:	f007 f9ee 	bl	da34 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6658:	b1b8      	cbz	r0, 668a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    665a:	782a      	ldrb	r2, [r5, #0]
    665c:	6820      	ldr	r0, [r4, #0]
    665e:	4631      	mov	r1, r6
    6660:	2a02      	cmp	r2, #2
    6662:	d007      	beq.n	6674 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6664:	782a      	ldrb	r2, [r5, #0]
    6666:	2a03      	cmp	r2, #3
    6668:	d004      	beq.n	6674 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    666a:	f640 4159 	movw	r1, #3161	; 0xc59
    666e:	202d      	movs	r0, #45	; 0x2d
    6670:	f7fd fb76 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6674:	68a2      	ldr	r2, [r4, #8]
    6676:	782b      	ldrb	r3, [r5, #0]
    6678:	6952      	ldr	r2, [r2, #20]
    667a:	f06f 0607 	mvn.w	r6, #7
    667e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6682:	58d2      	ldr	r2, [r2, r3]
    6684:	4790      	blx	r2
    6686:	4606      	mov	r6, r0
    6688:	e000      	b.n	668c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    668a:	2601      	movs	r6, #1
    668c:	7ba8      	ldrb	r0, [r5, #14]
    668e:	b118      	cbz	r0, 6698 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    6690:	f004 fa68 	bl	ab64 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6694:	f004 f8aa 	bl	a7ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6698:	2e00      	cmp	r6, #0
    669a:	d00d      	beq.n	66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    669c:	6820      	ldr	r0, [r4, #0]
    669e:	f007 fe25 	bl	e2ec <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    66a2:	b120      	cbz	r0, 66ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    66a4:	68a0      	ldr	r0, [r4, #8]
    66a6:	6880      	ldr	r0, [r0, #8]
    66a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66ac:	4700      	bx	r0
    66ae:	6820      	ldr	r0, [r4, #0]
    66b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66b4:	f000 ba7c 	b.w	6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    66b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66bc:	20000ddc 	.word	0x20000ddc
    66c0:	200000f0 	.word	0x200000f0
    66c4:	b510      	push	{r4, lr}
    66c6:	2903      	cmp	r1, #3
    66c8:	d002      	beq.n	66d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    66ca:	2905      	cmp	r1, #5
    66cc:	d10a      	bne.n	66e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    66ce:	e002      	b.n	66d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    66d0:	f000 fb48 	bl	6d64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x568>
    66d4:	e003      	b.n	66de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    66d6:	4904      	ldr	r1, [pc, #16]	; (66e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    66d8:	6809      	ldr	r1, [r1, #0]
    66da:	b109      	cbz	r1, 66e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    66dc:	4788      	blx	r1
    66de:	b108      	cbz	r0, 66e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    66e0:	2000      	movs	r0, #0
    66e2:	bd10      	pop	{r4, pc}
    66e4:	2001      	movs	r0, #1
    66e6:	bd10      	pop	{r4, pc}
    66e8:	200000fc 	.word	0x200000fc
    66ec:	4a09      	ldr	r2, [pc, #36]	; (6714 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    66ee:	0003      	movs	r3, r0
    66f0:	6810      	ldr	r0, [r2, #0]
    66f2:	d001      	beq.n	66f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    66f4:	f000 ba5c 	b.w	6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    66f8:	2900      	cmp	r1, #0
    66fa:	d009      	beq.n	6710 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    66fc:	6891      	ldr	r1, [r2, #8]
    66fe:	4a06      	ldr	r2, [pc, #24]	; (6718 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    6700:	6909      	ldr	r1, [r1, #16]
    6702:	7812      	ldrb	r2, [r2, #0]
    6704:	f06f 030f 	mvn.w	r3, #15
    6708:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    670c:	5889      	ldr	r1, [r1, r2]
    670e:	4708      	bx	r1
    6710:	4770      	bx	lr
    6712:	0000      	.short	0x0000
    6714:	200000f0 	.word	0x200000f0
    6718:	20000ddc 	.word	0x20000ddc
    671c:	b570      	push	{r4, r5, r6, lr}
    671e:	4604      	mov	r4, r0
    6720:	8840      	ldrh	r0, [r0, #2]
    6722:	2500      	movs	r5, #0
    6724:	2810      	cmp	r0, #16
    6726:	d014      	beq.n	6752 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    6728:	4e14      	ldr	r6, [pc, #80]	; (677c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    672a:	7bb0      	ldrb	r0, [r6, #14]
    672c:	b120      	cbz	r0, 6738 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    672e:	f004 f87d 	bl	a82c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6732:	2040      	movs	r0, #64	; 0x40
    6734:	f004 fa26 	bl	ab84 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6738:	4811      	ldr	r0, [pc, #68]	; (6780 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    673a:	6840      	ldr	r0, [r0, #4]
    673c:	f004 fcde 	bl	b0fc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6740:	78a0      	ldrb	r0, [r4, #2]
    6742:	0740      	lsls	r0, r0, #29
    6744:	d413      	bmi.n	676e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    6746:	7be0      	ldrb	r0, [r4, #15]
    6748:	2801      	cmp	r0, #1
    674a:	d008      	beq.n	675e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    674c:	2803      	cmp	r0, #3
    674e:	d006      	beq.n	675e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    6750:	e006      	b.n	6760 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    6752:	4620      	mov	r0, r4
    6754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6758:	2101      	movs	r1, #1
    675a:	f7ff bed1 	b.w	6500 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    675e:	2510      	movs	r5, #16
    6760:	2100      	movs	r1, #0
    6762:	f045 020e 	orr.w	r2, r5, #14
    6766:	7923      	ldrb	r3, [r4, #4]
    6768:	4608      	mov	r0, r1
    676a:	f004 fd51 	bl	b210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    676e:	2000      	movs	r0, #0
    6770:	f004 fb5e 	bl	ae30 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6774:	2002      	movs	r0, #2
    6776:	7030      	strb	r0, [r6, #0]
    6778:	bd70      	pop	{r4, r5, r6, pc}
    677a:	0000      	.short	0x0000
    677c:	20000ddc 	.word	0x20000ddc
    6780:	200000f0 	.word	0x200000f0
    6784:	b510      	push	{r4, lr}
    6786:	4c12      	ldr	r4, [pc, #72]	; (67d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    6788:	6820      	ldr	r0, [r4, #0]
    678a:	f000 f825 	bl	67d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    678e:	6820      	ldr	r0, [r4, #0]
    6790:	f007 fdac 	bl	e2ec <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6794:	2800      	cmp	r0, #0
    6796:	6820      	ldr	r0, [r4, #0]
    6798:	d00b      	beq.n	67b2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    679a:	490e      	ldr	r1, [pc, #56]	; (67d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    679c:	780a      	ldrb	r2, [r1, #0]
    679e:	2a02      	cmp	r2, #2
    67a0:	d00b      	beq.n	67ba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    67a2:	780a      	ldrb	r2, [r1, #0]
    67a4:	2a03      	cmp	r2, #3
    67a6:	d008      	beq.n	67ba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    67a8:	f640 3194 	movw	r1, #2964	; 0xb94
    67ac:	202d      	movs	r0, #45	; 0x2d
    67ae:	f7fd fad7 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67b6:	f000 b9fb 	b.w	6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    67ba:	68a2      	ldr	r2, [r4, #8]
    67bc:	7809      	ldrb	r1, [r1, #0]
    67be:	68d2      	ldr	r2, [r2, #12]
    67c0:	f06f 0307 	mvn.w	r3, #7
    67c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    67c8:	5851      	ldr	r1, [r2, r1]
    67ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67ce:	4708      	bx	r1
    67d0:	200000f0 	.word	0x200000f0
    67d4:	20000ddc 	.word	0x20000ddc
    67d8:	b510      	push	{r4, lr}
    67da:	7b01      	ldrb	r1, [r0, #12]
    67dc:	b109      	cbz	r1, 67e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    67de:	f007 fcce 	bl	e17e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11a>
    67e2:	4805      	ldr	r0, [pc, #20]	; (67f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    67e4:	7b80      	ldrb	r0, [r0, #14]
    67e6:	2800      	cmp	r0, #0
    67e8:	d005      	beq.n	67f6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    67ea:	f004 f9bb 	bl	ab64 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    67ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67f2:	f003 bffb 	b.w	a7ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    67f6:	bd10      	pop	{r4, pc}
    67f8:	20000ddc 	.word	0x20000ddc

000067fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    67fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6800:	4d54      	ldr	r5, [pc, #336]	; (6954 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>)
    6802:	4604      	mov	r4, r0
    6804:	b086      	sub	sp, #24
    6806:	7828      	ldrb	r0, [r5, #0]
    6808:	bbf0      	cbnz	r0, 6888 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    680a:	7820      	ldrb	r0, [r4, #0]
    680c:	28ff      	cmp	r0, #255	; 0xff
    680e:	d044      	beq.n	689a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e>
    6810:	2600      	movs	r6, #0
    6812:	81ae      	strh	r6, [r5, #12]
    6814:	606e      	str	r6, [r5, #4]
    6816:	706e      	strb	r6, [r5, #1]
    6818:	70ae      	strb	r6, [r5, #2]
    681a:	f884 6059 	strb.w	r6, [r4, #89]	; 0x59
    681e:	4630      	mov	r0, r6
    6820:	f004 fb6e 	bl	af00 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    6824:	2214      	movs	r2, #20
    6826:	494c      	ldr	r1, [pc, #304]	; (6958 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    6828:	4668      	mov	r0, sp
    682a:	f005 fc9c 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    682e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 695c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x160>
    6832:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6836:	6840      	ldr	r0, [r0, #4]
    6838:	9003      	str	r0, [sp, #12]
    683a:	4668      	mov	r0, sp
    683c:	f004 facc 	bl	add8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6840:	f004 fbce 	bl	afe0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6844:	f004 f98e 	bl	ab64 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6848:	f003 ffd0 	bl	a7ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    684c:	4842      	ldr	r0, [pc, #264]	; (6958 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    684e:	1f40      	subs	r0, r0, #5
    6850:	f004 fd30 	bl	b2b4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6854:	4840      	ldr	r0, [pc, #256]	; (6958 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    6856:	3808      	subs	r0, #8
    6858:	f004 fd38 	bl	b2cc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    685c:	f104 0020 	add.w	r0, r4, #32
    6860:	4607      	mov	r7, r0
    6862:	f007 fcf9 	bl	e258 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6866:	4638      	mov	r0, r7
    6868:	f007 fcbb 	bl	e1e2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    686c:	4601      	mov	r1, r0
    686e:	4620      	mov	r0, r4
    6870:	f007 fc7a 	bl	e168 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    6874:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6878:	f004 fc3a 	bl	b0f0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    687c:	7921      	ldrb	r1, [r4, #4]
    687e:	2000      	movs	r0, #0
    6880:	f004 fa2e 	bl	ace0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6884:	60a8      	str	r0, [r5, #8]
    6886:	e000      	b.n	688a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6888:	e007      	b.n	689a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e>
    688a:	b150      	cbz	r0, 68a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    688c:	210f      	movs	r1, #15
    688e:	2005      	movs	r0, #5
    6890:	f004 f98c 	bl	abac <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    6894:	7ea0      	ldrb	r0, [r4, #26]
    6896:	b960      	cbnz	r0, 68b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    6898:	e006      	b.n	68a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    689a:	200c      	movs	r0, #12
    689c:	b006      	add	sp, #24
    689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    68a2:	2001      	movs	r0, #1
    68a4:	7028      	strb	r0, [r5, #0]
    68a6:	e052      	b.n	694e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x152>
    68a8:	7e20      	ldrb	r0, [r4, #24]
    68aa:	b910      	cbnz	r0, 68b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    68ac:	78a0      	ldrb	r0, [r4, #2]
    68ae:	0740      	lsls	r0, r0, #29
    68b0:	d52b      	bpl.n	690a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    68b2:	f005 fae3 	bl	be7c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    68b6:	4682      	mov	sl, r0
    68b8:	4651      	mov	r1, sl
    68ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    68bc:	f7fa fe3c 	bl	1538 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    68c0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 6960 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    68c4:	4607      	mov	r7, r0
    68c6:	fb90 f1f9 	sdiv	r1, r0, r9
    68ca:	fb09 7011 	mls	r0, r9, r1, r7
    68ce:	4241      	negs	r1, r0
    68d0:	4650      	mov	r0, sl
    68d2:	f7fa fdfb 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    68d6:	63e0      	str	r0, [r4, #60]	; 0x3c
    68d8:	fb97 f0f9 	sdiv	r0, r7, r9
    68dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    68de:	4408      	add	r0, r1
    68e0:	63a0      	str	r0, [r4, #56]	; 0x38
    68e2:	f7fe ff3f 	bl	5764 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    68e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    68e8:	4288      	cmp	r0, r1
    68ea:	d80e      	bhi.n	690a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    68ec:	e9c4 6a0e 	strd	r6, sl, [r4, #56]	; 0x38
    68f0:	2101      	movs	r1, #1
    68f2:	4620      	mov	r0, r4
    68f4:	f007 fbfc 	bl	e0f0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    68f8:	78a0      	ldrb	r0, [r4, #2]
    68fa:	0740      	lsls	r0, r0, #29
    68fc:	d505      	bpl.n	690a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    68fe:	7e20      	ldrb	r0, [r4, #24]
    6900:	b118      	cbz	r0, 690a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    6902:	2101      	movs	r1, #1
    6904:	4620      	mov	r0, r4
    6906:	f000 fa67 	bl	6dd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    690a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    690e:	f104 0041 	add.w	r0, r4, #65	; 0x41
    6912:	f004 fcc3 	bl	b29c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    6916:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
    691a:	b130      	cbz	r0, 692a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12e>
    691c:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
    6920:	86a0      	strh	r0, [r4, #52]	; 0x34
    6922:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6924:	62e0      	str	r0, [r4, #44]	; 0x2c
    6926:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
    692a:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
    692e:	b130      	cbz	r0, 693e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    6930:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    6934:	86e0      	strh	r0, [r4, #54]	; 0x36
    6936:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6938:	6320      	str	r0, [r4, #48]	; 0x30
    693a:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
    693e:	f7fe ff77 	bl	5830 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6942:	2103      	movs	r1, #3
    6944:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6948:	f006 fd07 	bl	d35a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    694c:	73a8      	strb	r0, [r5, #14]
    694e:	2000      	movs	r0, #0
    6950:	e7a4      	b.n	689c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa0>
    6952:	0000      	.short	0x0000
    6954:	20000ddc 	.word	0x20000ddc
    6958:	00006eec 	.word	0x00006eec
    695c:	200000f0 	.word	0x200000f0
    6960:	000f4240 	.word	0x000f4240
    6964:	b510      	push	{r4, lr}
    6966:	4604      	mov	r4, r0
    6968:	f7ff ff48 	bl	67fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    696c:	2800      	cmp	r0, #0
    696e:	d108      	bne.n	6982 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x186>
    6970:	4804      	ldr	r0, [pc, #16]	; (6984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    6972:	7800      	ldrb	r0, [r0, #0]
    6974:	2801      	cmp	r0, #1
    6976:	d003      	beq.n	6980 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>
    6978:	2100      	movs	r1, #0
    697a:	4620      	mov	r0, r4
    697c:	f7ff fdc0 	bl	6500 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6980:	2000      	movs	r0, #0
    6982:	bd10      	pop	{r4, pc}
    6984:	20000ddc 	.word	0x20000ddc
    6988:	480a      	ldr	r0, [pc, #40]	; (69b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>)
    698a:	b510      	push	{r4, lr}
    698c:	490a      	ldr	r1, [pc, #40]	; (69b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1bc>)
    698e:	6804      	ldr	r4, [r0, #0]
    6990:	7808      	ldrb	r0, [r1, #0]
    6992:	2800      	cmp	r0, #0
    6994:	d00d      	beq.n	69b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b6>
    6996:	7808      	ldrb	r0, [r1, #0]
    6998:	2802      	cmp	r0, #2
    699a:	d002      	beq.n	69a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a6>
    699c:	7808      	ldrb	r0, [r1, #0]
    699e:	2803      	cmp	r0, #3
    69a0:	d102      	bne.n	69a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    69a2:	4620      	mov	r0, r4
    69a4:	f7ff ff18 	bl	67d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    69a8:	4620      	mov	r0, r4
    69aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69ae:	f000 b8ff 	b.w	6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    69b2:	bd10      	pop	{r4, pc}
    69b4:	200000f0 	.word	0x200000f0
    69b8:	20000ddc 	.word	0x20000ddc
    69bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69c0:	4604      	mov	r4, r0
    69c2:	4824      	ldr	r0, [pc, #144]	; (6a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x258>)
    69c4:	460e      	mov	r6, r1
    69c6:	6840      	ldr	r0, [r0, #4]
    69c8:	f004 fb98 	bl	b0fc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69cc:	4d22      	ldr	r5, [pc, #136]	; (6a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25c>)
    69ce:	2004      	movs	r0, #4
    69d0:	7028      	strb	r0, [r5, #0]
    69d2:	b1f6      	cbz	r6, 6a12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x216>
    69d4:	8860      	ldrh	r0, [r4, #2]
    69d6:	2810      	cmp	r0, #16
    69d8:	d024      	beq.n	6a24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x228>
    69da:	f104 0020 	add.w	r0, r4, #32
    69de:	4680      	mov	r8, r0
    69e0:	68ae      	ldr	r6, [r5, #8]
    69e2:	f007 fbf2 	bl	e1ca <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    69e6:	4607      	mov	r7, r0
    69e8:	4640      	mov	r0, r8
    69ea:	f007 fc17 	bl	e21c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    69ee:	1a38      	subs	r0, r7, r0
    69f0:	1e40      	subs	r0, r0, #1
    69f2:	b2c0      	uxtb	r0, r0
    69f4:	8861      	ldrh	r1, [r4, #2]
    69f6:	2228      	movs	r2, #40	; 0x28
    69f8:	f000 fab6 	bl	6f68 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    69fc:	1981      	adds	r1, r0, r6
    69fe:	78a0      	ldrb	r0, [r4, #2]
    6a00:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6a04:	b108      	cbz	r0, 6a0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x20e>
    6a06:	6868      	ldr	r0, [r5, #4]
    6a08:	4401      	add	r1, r0
    6a0a:	7922      	ldrb	r2, [r4, #4]
    6a0c:	2000      	movs	r0, #0
    6a0e:	f004 fb83 	bl	b118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6a12:	8860      	ldrh	r0, [r4, #2]
    6a14:	2813      	cmp	r0, #19
    6a16:	d013      	beq.n	6a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6a18:	dc09      	bgt.n	6a2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x232>
    6a1a:	2810      	cmp	r0, #16
    6a1c:	d018      	beq.n	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x254>
    6a1e:	2812      	cmp	r0, #18
    6a20:	d109      	bne.n	6a36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6a22:	e00d      	b.n	6a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6a24:	7921      	ldrb	r1, [r4, #4]
    6a26:	2000      	movs	r0, #0
    6a28:	f004 f90e 	bl	ac48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6a2c:	e7f1      	b.n	6a12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x216>
    6a2e:	2815      	cmp	r0, #21
    6a30:	d006      	beq.n	6a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6a32:	281d      	cmp	r0, #29
    6a34:	d004      	beq.n	6a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6a36:	f640 510a 	movw	r1, #3338	; 0xd0a
    6a3a:	202d      	movs	r0, #45	; 0x2d
    6a3c:	f7fd f990 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a40:	7923      	ldrb	r3, [r4, #4]
    6a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a46:	2201      	movs	r2, #1
    6a48:	4611      	mov	r1, r2
    6a4a:	2000      	movs	r0, #0
    6a4c:	f004 bbe0 	b.w	b210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a54:	200000f0 	.word	0x200000f0
    6a58:	20000ddc 	.word	0x20000ddc
    6a5c:	b510      	push	{r4, lr}
    6a5e:	4604      	mov	r4, r0
    6a60:	7800      	ldrb	r0, [r0, #0]
    6a62:	460b      	mov	r3, r1
    6a64:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    6a68:	29ff      	cmp	r1, #255	; 0xff
    6a6a:	d010      	beq.n	6a8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x292>
    6a6c:	f104 029f 	add.w	r2, r4, #159	; 0x9f
    6a70:	1e51      	subs	r1, r2, #1
    6a72:	4618      	mov	r0, r3
    6a74:	f7fe fdf4 	bl	5660 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6a78:	b130      	cbz	r0, 6a88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28c>
    6a7a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    6a7e:	f040 0002 	orr.w	r0, r0, #2
    6a82:	f884 009e 	strb.w	r0, [r4, #158]	; 0x9e
    6a86:	e011      	b.n	6aac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    6a88:	f640 7119 	movw	r1, #3865	; 0xf19
    6a8c:	e01d      	b.n	6aca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ce>
    6a8e:	4810      	ldr	r0, [pc, #64]	; (6ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>)
    6a90:	6840      	ldr	r0, [r0, #4]
    6a92:	7801      	ldrb	r1, [r0, #0]
    6a94:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6a98:	f884 109e 	strb.w	r1, [r4, #158]	; 0x9e
    6a9c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6aa0:	f8c4 109f 	str.w	r1, [r4, #159]	; 0x9f
    6aa4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6aa8:	f8a4 00a3 	strh.w	r0, [r4, #163]	; 0xa3
    6aac:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6ab0:	287f      	cmp	r0, #127	; 0x7f
    6ab2:	d008      	beq.n	6ac6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    6ab4:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    6ab8:	207f      	movs	r0, #127	; 0x7f
    6aba:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6abe:	3486      	adds	r4, #134	; 0x86
    6ac0:	2001      	movs	r0, #1
    6ac2:	75a0      	strb	r0, [r4, #22]
    6ac4:	bd10      	pop	{r4, pc}
    6ac6:	f640 51bb 	movw	r1, #3515	; 0xdbb
    6aca:	202d      	movs	r0, #45	; 0x2d
    6acc:	f7fd f948 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ad0:	200000f0 	.word	0x200000f0
    6ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ad8:	4604      	mov	r4, r0
    6ada:	8840      	ldrh	r0, [r0, #2]
    6adc:	4617      	mov	r7, r2
    6ade:	4688      	mov	r8, r1
    6ae0:	2903      	cmp	r1, #3
    6ae2:	d006      	beq.n	6af2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    6ae4:	f000 0501 	and.w	r5, r0, #1
    6ae8:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    6aec:	b118      	cbz	r0, 6af6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    6aee:	2001      	movs	r0, #1
    6af0:	e002      	b.n	6af8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6af2:	f3c0 0540 	ubfx	r5, r0, #1, #1
    6af6:	2000      	movs	r0, #0
    6af8:	4681      	mov	r9, r0
    6afa:	f004 f851 	bl	aba0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6afe:	4606      	mov	r6, r0
    6b00:	f1b8 0f03 	cmp.w	r8, #3
    6b04:	d025      	beq.n	6b52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x356>
    6b06:	2001      	movs	r0, #1
    6b08:	4680      	mov	r8, r0
    6b0a:	ea35 0509 	bics.w	r5, r5, r9
    6b0e:	d046      	beq.n	6b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6b10:	4825      	ldr	r0, [pc, #148]	; (6ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>)
    6b12:	7b80      	ldrb	r0, [r0, #14]
    6b14:	b138      	cbz	r0, 6b26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    6b16:	f006 fc23 	bl	d360 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6b1a:	7038      	strb	r0, [r7, #0]
    6b1c:	28ff      	cmp	r0, #255	; 0xff
    6b1e:	d002      	beq.n	6b26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    6b20:	f7fe fdb8 	bl	5694 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6b24:	4306      	orrs	r6, r0
    6b26:	4d21      	ldr	r5, [pc, #132]	; (6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b0>)
    6b28:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    6b2c:	6868      	ldr	r0, [r5, #4]
    6b2e:	7801      	ldrb	r1, [r0, #0]
    6b30:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6b34:	4291      	cmp	r1, r2
    6b36:	d106      	bne.n	6b46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34a>
    6b38:	2206      	movs	r2, #6
    6b3a:	f104 0148 	add.w	r1, r4, #72	; 0x48
    6b3e:	1cc0      	adds	r0, r0, #3
    6b40:	f005 faff 	bl	c142 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6b44:	b138      	cbz	r0, 6b56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35a>
    6b46:	2000      	movs	r0, #0
    6b48:	7839      	ldrb	r1, [r7, #0]
    6b4a:	29ff      	cmp	r1, #255	; 0xff
    6b4c:	d009      	beq.n	6b62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x366>
    6b4e:	b9b8      	cbnz	r0, 6b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6b50:	e003      	b.n	6b5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    6b52:	2002      	movs	r0, #2
    6b54:	e7d8      	b.n	6b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30c>
    6b56:	2001      	movs	r0, #1
    6b58:	e7f6      	b.n	6b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34c>
    6b5a:	7e60      	ldrb	r0, [r4, #25]
    6b5c:	4288      	cmp	r0, r1
    6b5e:	d00f      	beq.n	6b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6b60:	e008      	b.n	6b74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    6b62:	b138      	cbz	r0, 6b74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    6b64:	6869      	ldr	r1, [r5, #4]
    6b66:	f811 0b03 	ldrb.w	r0, [r1], #3
    6b6a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6b6e:	f007 fa7e 	bl	e06e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6b72:	b128      	cbz	r0, 6b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6b74:	2000      	movs	r0, #0
    6b76:	78a1      	ldrb	r1, [r4, #2]
    6b78:	0749      	lsls	r1, r1, #29
    6b7a:	d503      	bpl.n	6b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x388>
    6b7c:	b990      	cbnz	r0, 6ba4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b7e:	e00e      	b.n	6b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6b80:	2001      	movs	r0, #1
    6b82:	e7f8      	b.n	6b76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    6b84:	b976      	cbnz	r6, 6ba4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b86:	7be0      	ldrb	r0, [r4, #15]
    6b88:	b108      	cbz	r0, 6b8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x392>
    6b8a:	4540      	cmp	r0, r8
    6b8c:	d107      	bne.n	6b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6b8e:	6869      	ldr	r1, [r5, #4]
    6b90:	f811 0b03 	ldrb.w	r0, [r1], #3
    6b94:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6b98:	f007 fa69 	bl	e06e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6b9c:	b110      	cbz	r0, 6ba4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b9e:	2000      	movs	r0, #0
    6ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ba4:	2001      	movs	r0, #1
    6ba6:	e7fb      	b.n	6ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a4>
    6ba8:	20000ddc 	.word	0x20000ddc
    6bac:	200000f0 	.word	0x200000f0
    6bb0:	b570      	push	{r4, r5, r6, lr}
    6bb2:	4604      	mov	r4, r0
    6bb4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6bb6:	4d10      	ldr	r5, [pc, #64]	; (6bf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3fc>)
    6bb8:	1c40      	adds	r0, r0, #1
    6bba:	62a0      	str	r0, [r4, #40]	; 0x28
    6bbc:	7ba8      	ldrb	r0, [r5, #14]
    6bbe:	2600      	movs	r6, #0
    6bc0:	b120      	cbz	r0, 6bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>
    6bc2:	f003 ffcf 	bl	ab64 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6bc6:	f003 fe11 	bl	a7ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6bca:	73ae      	strb	r6, [r5, #14]
    6bcc:	702e      	strb	r6, [r5, #0]
    6bce:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    6bd2:	b108      	cbz	r0, 6bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    6bd4:	2101      	movs	r1, #1
    6bd6:	e00a      	b.n	6bee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f2>
    6bd8:	7b60      	ldrb	r0, [r4, #13]
    6bda:	b138      	cbz	r0, 6bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6bdc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6bde:	4288      	cmp	r0, r1
    6be0:	d804      	bhi.n	6bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6be2:	2101      	movs	r1, #1
    6be4:	4620      	mov	r0, r4
    6be6:	f000 f9eb 	bl	6fc0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6bea:	bd70      	pop	{r4, r5, r6, pc}
    6bec:	2100      	movs	r1, #0
    6bee:	4620      	mov	r0, r4
    6bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6bf4:	f000 b9e4 	b.w	6fc0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6bf8:	20000ddc 	.word	0x20000ddc
    6bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c00:	4604      	mov	r4, r0
    6c02:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    6c06:	4616      	mov	r6, r2
    6c08:	460d      	mov	r5, r1
    6c0a:	f88d 0000 	strb.w	r0, [sp]
    6c0e:	9800      	ldr	r0, [sp, #0]
    6c10:	9000      	str	r0, [sp, #0]
    6c12:	f89d 0000 	ldrb.w	r0, [sp]
    6c16:	b110      	cbz	r0, 6c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    6c18:	f640 31c8 	movw	r1, #3016	; 0xbc8
    6c1c:	e057      	b.n	6cce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d2>
    6c1e:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    6c22:	8828      	ldrh	r0, [r5, #0]
    6c24:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    6c28:	2b00      	cmp	r3, #0
    6c2a:	d162      	bne.n	6cf2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f6>
    6c2c:	6868      	ldr	r0, [r5, #4]
    6c2e:	f006 fbf5 	bl	d41c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6c32:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    6c36:	8928      	ldrh	r0, [r5, #8]
    6c38:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    6c3c:	8968      	ldrh	r0, [r5, #10]
    6c3e:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    6c42:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    6c46:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    6c4a:	7e21      	ldrb	r1, [r4, #24]
    6c4c:	f104 0841 	add.w	r8, r4, #65	; 0x41
    6c50:	2700      	movs	r7, #0
    6c52:	b129      	cbz	r1, 6c60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x464>
    6c54:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6c58:	4641      	mov	r1, r8
    6c5a:	f007 f92f 	bl	debc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6c5e:	b940      	cbnz	r0, 6c72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    6c60:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    6c64:	b170      	cbz	r0, 6c84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    6c66:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6c6a:	4641      	mov	r1, r8
    6c6c:	f007 f91d 	bl	deaa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6c70:	b140      	cbz	r0, 6c84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    6c72:	f8d4 0041 	ldr.w	r0, [r4, #65]	; 0x41
    6c76:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    6c7a:	f8b4 0045 	ldrh.w	r0, [r4, #69]	; 0x45
    6c7e:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    6c82:	e003      	b.n	6c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    6c84:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    6c88:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    6c8c:	481a      	ldr	r0, [pc, #104]	; (6cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>)
    6c8e:	2eff      	cmp	r6, #255	; 0xff
    6c90:	6841      	ldr	r1, [r0, #4]
    6c92:	7808      	ldrb	r0, [r1, #0]
    6c94:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6c98:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
    6c9c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6ca0:	d018      	beq.n	6cd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
    6ca2:	f851 0f03 	ldr.w	r0, [r1, #3]!
    6ca6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    6caa:	8888      	ldrh	r0, [r1, #4]
    6cac:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    6cb0:	f104 0274 	add.w	r2, r4, #116	; 0x74
    6cb4:	1e51      	subs	r1, r2, #1
    6cb6:	4630      	mov	r0, r6
    6cb8:	f7fe fcd2 	bl	5660 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6cbc:	b128      	cbz	r0, 6cca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ce>
    6cbe:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    6cc2:	f040 0002 	orr.w	r0, r0, #2
    6cc6:	7020      	strb	r0, [r4, #0]
    6cc8:	e00c      	b.n	6ce4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e8>
    6cca:	f640 31e9 	movw	r1, #3049	; 0xbe9
    6cce:	202d      	movs	r0, #45	; 0x2d
    6cd0:	f7fd f846 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd4:	f851 2f03 	ldr.w	r2, [r1, #3]!
    6cd8:	6762      	str	r2, [r4, #116]	; 0x74
    6cda:	8889      	ldrh	r1, [r1, #4]
    6cdc:	f8a4 1078 	strh.w	r1, [r4, #120]	; 0x78
    6ce0:	6007      	str	r7, [r0, #0]
    6ce2:	8087      	strh	r7, [r0, #4]
    6ce4:	8828      	ldrh	r0, [r5, #0]
    6ce6:	f7fd fc4b 	bl	4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6cea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6cee:	f006 b922 	b.w	cf36 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6cf6:	0000      	.short	0x0000
    6cf8:	200000f0 	.word	0x200000f0
    6cfc:	b538      	push	{r3, r4, r5, lr}
    6cfe:	4604      	mov	r4, r0
    6d00:	20ff      	movs	r0, #255	; 0xff
    6d02:	f88d 0000 	strb.w	r0, [sp]
    6d06:	2501      	movs	r5, #1
    6d08:	466a      	mov	r2, sp
    6d0a:	2105      	movs	r1, #5
    6d0c:	4620      	mov	r0, r4
    6d0e:	f7ff fee1 	bl	6ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d8>
    6d12:	b1f8      	cbz	r0, 6d54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x558>
    6d14:	4a11      	ldr	r2, [pc, #68]	; (6d5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x560>)
    6d16:	69e0      	ldr	r0, [r4, #28]
    6d18:	6852      	ldr	r2, [r2, #4]
    6d1a:	7c41      	ldrb	r1, [r0, #17]
    6d1c:	7812      	ldrb	r2, [r2, #0]
    6d1e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6d22:	4011      	ands	r1, r2
    6d24:	7441      	strb	r1, [r0, #17]
    6d26:	2201      	movs	r2, #1
    6d28:	4620      	mov	r0, r4
    6d2a:	69e1      	ldr	r1, [r4, #28]
    6d2c:	f000 f882 	bl	6e34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x638>
    6d30:	2300      	movs	r3, #0
    6d32:	f89d 2000 	ldrb.w	r2, [sp]
    6d36:	4620      	mov	r0, r4
    6d38:	69e1      	ldr	r1, [r4, #28]
    6d3a:	f7ff ff5f 	bl	6bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    6d3e:	2001      	movs	r0, #1
    6d40:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
    6d44:	4a06      	ldr	r2, [pc, #24]	; (6d60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x564>)
    6d46:	2100      	movs	r1, #0
    6d48:	69e0      	ldr	r0, [r4, #28]
    6d4a:	7011      	strb	r1, [r2, #0]
    6d4c:	2105      	movs	r1, #5
    6d4e:	f000 fa43 	bl	71d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6d52:	e000      	b.n	6d56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55a>
    6d54:	2500      	movs	r5, #0
    6d56:	4628      	mov	r0, r5
    6d58:	bd38      	pop	{r3, r4, r5, pc}
    6d5a:	0000      	.short	0x0000
    6d5c:	200000f0 	.word	0x200000f0
    6d60:	20000ddc 	.word	0x20000ddc
    6d64:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6d66:	4604      	mov	r4, r0
    6d68:	20ff      	movs	r0, #255	; 0xff
    6d6a:	f88d 0000 	strb.w	r0, [sp]
    6d6e:	2501      	movs	r5, #1
    6d70:	466a      	mov	r2, sp
    6d72:	2103      	movs	r1, #3
    6d74:	4620      	mov	r0, r4
    6d76:	f7ff fead 	bl	6ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d8>
    6d7a:	b328      	cbz	r0, 6dc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    6d7c:	7b20      	ldrb	r0, [r4, #12]
    6d7e:	b168      	cbz	r0, 6d9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a0>
    6d80:	f894 009c 	ldrb.w	r0, [r4, #156]	; 0x9c
    6d84:	f88d 0004 	strb.w	r0, [sp, #4]
    6d88:	9801      	ldr	r0, [sp, #4]
    6d8a:	9001      	str	r0, [sp, #4]
    6d8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6d90:	b920      	cbnz	r0, 6d9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a0>
    6d92:	f89d 1000 	ldrb.w	r1, [sp]
    6d96:	4620      	mov	r0, r4
    6d98:	f7ff fe60 	bl	6a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    6d9c:	4e0c      	ldr	r6, [pc, #48]	; (6dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>)
    6d9e:	2100      	movs	r1, #0
    6da0:	6870      	ldr	r0, [r6, #4]
    6da2:	8001      	strh	r1, [r0, #0]
    6da4:	2104      	movs	r1, #4
    6da6:	f006 fe8f 	bl	dac8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6daa:	4620      	mov	r0, r4
    6dac:	f000 f888 	bl	6ec0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    6db0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    6db2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6db4:	6870      	ldr	r0, [r6, #4]
    6db6:	f006 febe 	bl	db36 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6dba:	4906      	ldr	r1, [pc, #24]	; (6dd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>)
    6dbc:	2005      	movs	r0, #5
    6dbe:	7008      	strb	r0, [r1, #0]
    6dc0:	6870      	ldr	r0, [r6, #4]
    6dc2:	f004 f99b 	bl	b0fc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6dc6:	e000      	b.n	6dca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ce>
    6dc8:	2500      	movs	r5, #0
    6dca:	4628      	mov	r0, r5
    6dcc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6dce:	0000      	.short	0x0000
    6dd0:	200000f0 	.word	0x200000f0
    6dd4:	20000ddc 	.word	0x20000ddc
    6dd8:	b570      	push	{r4, r5, r6, lr}
    6dda:	4604      	mov	r4, r0
    6ddc:	460e      	mov	r6, r1
    6dde:	7e40      	ldrb	r0, [r0, #25]
    6de0:	f7fe fc0c 	bl	55fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6de4:	0005      	movs	r5, r0
    6de6:	d019      	beq.n	6e1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6de8:	2110      	movs	r1, #16
    6dea:	f006 fcb5 	bl	d758 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6dee:	2800      	cmp	r0, #0
    6df0:	d114      	bne.n	6e1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6df2:	2001      	movs	r0, #1
    6df4:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    6df8:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6dfc:	4632      	mov	r2, r6
    6dfe:	460c      	mov	r4, r1
    6e00:	4628      	mov	r0, r5
    6e02:	f006 fa3c 	bl	d27e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6e06:	4621      	mov	r1, r4
    6e08:	4c05      	ldr	r4, [pc, #20]	; (6e20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>)
    6e0a:	6860      	ldr	r0, [r4, #4]
    6e0c:	f006 fe77 	bl	dafe <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6e10:	6860      	ldr	r0, [r4, #4]
    6e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e16:	2101      	movs	r1, #1
    6e18:	f006 be77 	b.w	db0a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6e1c:	bd70      	pop	{r4, r5, r6, pc}
    6e1e:	0000      	.short	0x0000
    6e20:	200000f0 	.word	0x200000f0
    6e24:	4802      	ldr	r0, [pc, #8]	; (6e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x634>)
    6e26:	2101      	movs	r1, #1
    6e28:	6800      	ldr	r0, [r0, #0]
    6e2a:	f7ff bb69 	b.w	6500 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6e2e:	0000      	.short	0x0000
    6e30:	200000f0 	.word	0x200000f0
    6e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e38:	4e20      	ldr	r6, [pc, #128]	; (6ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c0>)
    6e3a:	4680      	mov	r8, r0
    6e3c:	460c      	mov	r4, r1
    6e3e:	6870      	ldr	r0, [r6, #4]
    6e40:	4615      	mov	r5, r2
    6e42:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    6e46:	f8c4 1012 	str.w	r1, [r4, #18]
    6e4a:	8881      	ldrh	r1, [r0, #4]
    6e4c:	82e1      	strh	r1, [r4, #22]
    6e4e:	7981      	ldrb	r1, [r0, #6]
    6e50:	7621      	strb	r1, [r4, #24]
    6e52:	8940      	ldrh	r0, [r0, #10]
    6e54:	f006 fade 	bl	d414 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6e58:	4607      	mov	r7, r0
    6e5a:	6060      	str	r0, [r4, #4]
    6e5c:	6870      	ldr	r0, [r6, #4]
    6e5e:	4639      	mov	r1, r7
    6e60:	7d80      	ldrb	r0, [r0, #22]
    6e62:	f006 fc74 	bl	d74e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6e66:	8360      	strh	r0, [r4, #26]
    6e68:	6870      	ldr	r0, [r6, #4]
    6e6a:	4639      	mov	r1, r7
    6e6c:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    6e70:	f006 fc69 	bl	d746 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6e74:	61e0      	str	r0, [r4, #28]
    6e76:	6870      	ldr	r0, [r6, #4]
    6e78:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    6e7c:	8121      	strh	r1, [r4, #8]
    6e7e:	8841      	ldrh	r1, [r0, #2]
    6e80:	8161      	strh	r1, [r4, #10]
    6e82:	6841      	ldr	r1, [r0, #4]
    6e84:	60e1      	str	r1, [r4, #12]
    6e86:	7a01      	ldrb	r1, [r0, #8]
    6e88:	7421      	strb	r1, [r4, #16]
    6e8a:	7a41      	ldrb	r1, [r0, #9]
    6e8c:	f001 011f 	and.w	r1, r1, #31
    6e90:	f884 1020 	strb.w	r1, [r4, #32]
    6e94:	7a40      	ldrb	r0, [r0, #9]
    6e96:	0940      	lsrs	r0, r0, #5
    6e98:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    6e9c:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    6ea0:	2101      	movs	r1, #1
    6ea2:	7205      	strb	r5, [r0, #8]
    6ea4:	7245      	strb	r5, [r0, #9]
    6ea6:	7281      	strb	r1, [r0, #10]
    6ea8:	2100      	movs	r1, #0
    6eaa:	3836      	subs	r0, #54	; 0x36
    6eac:	f006 ff7e 	bl	ddac <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6eb0:	f898 000e 	ldrb.w	r0, [r8, #14]
    6eb4:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    6eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ebc:	200000f0 	.word	0x200000f0
    6ec0:	b570      	push	{r4, r5, r6, lr}
    6ec2:	4d07      	ldr	r5, [pc, #28]	; (6ee0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e4>)
    6ec4:	4604      	mov	r4, r0
    6ec6:	f100 0141 	add.w	r1, r0, #65	; 0x41
    6eca:	6868      	ldr	r0, [r5, #4]
    6ecc:	f006 fe24 	bl	db18 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6ed0:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    6ed4:	6868      	ldr	r0, [r5, #4]
    6ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6eda:	f006 be23 	b.w	db24 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    6ede:	0000      	.short	0x0000
    6ee0:	200000f0 	.word	0x200000f0
    6ee4:	d6555555 	.word	0xd6555555
    6ee8:	008e89be 	.word	0x008e89be
    6eec:	00006785 	.word	0x00006785
    6ef0:	00006615 	.word	0x00006615
    6ef4:	000066ed 	.word	0x000066ed
    6ef8:	00000000 	.word	0x00000000
    6efc:	00007145 	.word	0x00007145
    6f00:	000066c5 	.word	0x000066c5
    6f04:	0000671d 	.word	0x0000671d
    6f08:	0000e095 	.word	0x0000e095
    6f0c:	0000e09b 	.word	0x0000e09b
    6f10:	00006965 	.word	0x00006965
    6f14:	00006989 	.word	0x00006989
    6f18:	00006e25 	.word	0x00006e25
    6f1c:	00006f0c 	.word	0x00006f0c
    6f20:	00006f04 	.word	0x00006f04
    6f24:	00006f00 	.word	0x00006f00

00006f28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    6f28:	b510      	push	{r4, lr}
    6f2a:	1e42      	subs	r2, r0, #1
    6f2c:	2a02      	cmp	r2, #2
    6f2e:	d901      	bls.n	6f34 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    6f30:	21ca      	movs	r1, #202	; 0xca
    6f32:	e009      	b.n	6f48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    6f34:	1e40      	subs	r0, r0, #1
    6f36:	2910      	cmp	r1, #16
    6f38:	d009      	beq.n	6f4e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    6f3a:	2912      	cmp	r1, #18
    6f3c:	d00c      	beq.n	6f58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6f3e:	2913      	cmp	r1, #19
    6f40:	d00a      	beq.n	6f58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6f42:	2915      	cmp	r1, #21
    6f44:	d005      	beq.n	6f52 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    6f46:	21d8      	movs	r1, #216	; 0xd8
    6f48:	202f      	movs	r0, #47	; 0x2f
    6f4a:	f7fc ff09 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f4e:	4905      	ldr	r1, [pc, #20]	; (6f64 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f50:	e004      	b.n	6f5c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6f52:	4904      	ldr	r1, [pc, #16]	; (6f64 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f54:	1d89      	adds	r1, r1, #6
    6f56:	e001      	b.n	6f5c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6f58:	4902      	ldr	r1, [pc, #8]	; (6f64 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f5a:	1f89      	subs	r1, r1, #6
    6f5c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    6f60:	bd10      	pop	{r4, pc}
    6f62:	0000      	.short	0x0000
    6f64:	0000e2e0 	.word	0x0000e2e0

00006f68 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    6f68:	1e42      	subs	r2, r0, #1
    6f6a:	b510      	push	{r4, lr}
    6f6c:	b2d2      	uxtb	r2, r2
    6f6e:	2a01      	cmp	r2, #1
    6f70:	d903      	bls.n	6f7a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6f72:	291d      	cmp	r1, #29
    6f74:	d001      	beq.n	6f7a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6f76:	21ee      	movs	r1, #238	; 0xee
    6f78:	e00d      	b.n	6f96 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    6f7a:	2913      	cmp	r1, #19
    6f7c:	d013      	beq.n	6fa6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6f7e:	dc04      	bgt.n	6f8a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    6f80:	2910      	cmp	r1, #16
    6f82:	d00b      	beq.n	6f9c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    6f84:	2912      	cmp	r1, #18
    6f86:	d104      	bne.n	6f92 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    6f88:	e00d      	b.n	6fa6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6f8a:	2915      	cmp	r1, #21
    6f8c:	d008      	beq.n	6fa0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    6f8e:	291d      	cmp	r1, #29
    6f90:	d00e      	beq.n	6fb0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    6f92:	f44f 7181 	mov.w	r1, #258	; 0x102
    6f96:	202f      	movs	r0, #47	; 0x2f
    6f98:	f7fc fee2 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f9c:	4807      	ldr	r0, [pc, #28]	; (6fbc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6f9e:	e004      	b.n	6faa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6fa0:	4806      	ldr	r0, [pc, #24]	; (6fbc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fa2:	3008      	adds	r0, #8
    6fa4:	e001      	b.n	6faa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6fa6:	4805      	ldr	r0, [pc, #20]	; (6fbc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fa8:	1d00      	adds	r0, r0, #4
    6faa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    6fae:	bd10      	pop	{r4, pc}
    6fb0:	f240 315a 	movw	r1, #858	; 0x35a
    6fb4:	fb10 f001 	smulbb	r0, r0, r1
    6fb8:	bd10      	pop	{r4, pc}
    6fba:	0000      	.short	0x0000
    6fbc:	0000e2ce 	.word	0x0000e2ce

00006fc0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    6fc0:	b510      	push	{r4, lr}
    6fc2:	b131      	cbz	r1, 6fd2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    6fc4:	2901      	cmp	r1, #1
    6fc6:	d008      	beq.n	6fda <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    6fc8:	f240 71c1 	movw	r1, #1985	; 0x7c1
    6fcc:	2030      	movs	r0, #48	; 0x30
    6fce:	f7fc fec7 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6fd6:	f000 bab1 	b.w	753c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    6fda:	2100      	movs	r1, #0
    6fdc:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    6fe0:	f007 fac7 	bl	e572 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    6fe4:	4802      	ldr	r0, [pc, #8]	; (6ff0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x30>)
    6fe6:	7940      	ldrb	r0, [r0, #5]
    6fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6fec:	f7fc bd08 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6ff0:	20000100 	.word	0x20000100

00006ff4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    6ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ff8:	4604      	mov	r4, r0
    6ffa:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    6ffe:	4615      	mov	r5, r2
    7000:	460e      	mov	r6, r1
    7002:	2800      	cmp	r0, #0
    7004:	d15f      	bne.n	70c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6>
    7006:	4846      	ldr	r0, [pc, #280]	; (7120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    7008:	f7fb fa12 	bl	2430 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    700c:	4607      	mov	r7, r0
    700e:	2820      	cmp	r0, #32
    7010:	d059      	beq.n	70c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6>
    7012:	7821      	ldrb	r1, [r4, #0]
    7014:	f7fe fdd0 	bl	5bb8 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I>
    7018:	2234      	movs	r2, #52	; 0x34
    701a:	2100      	movs	r1, #0
    701c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    7020:	f005 f91b 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7024:	f884 70a8 	strb.w	r7, [r4, #168]	; 0xa8
    7028:	2703      	movs	r7, #3
    702a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    702e:	f884 70b8 	strb.w	r7, [r4, #184]	; 0xb8
    7032:	b15e      	cbz	r6, 704c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>
    7034:	2101      	movs	r1, #1
    7036:	f506 708e 	add.w	r0, r6, #284	; 0x11c
    703a:	f7fc ff3d 	bl	3eb8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    703e:	f896 011c 	ldrb.w	r0, [r6, #284]	; 0x11c
    7042:	f000 0007 	and.w	r0, r0, #7
    7046:	1c40      	adds	r0, r0, #1
    7048:	f886 011c 	strb.w	r0, [r6, #284]	; 0x11c
    704c:	4620      	mov	r0, r4
    704e:	f007 faab 	bl	e5a8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    7052:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    7056:	f884 70c6 	strb.w	r7, [r4, #198]	; 0xc6
    705a:	2701      	movs	r7, #1
    705c:	f884 70c7 	strb.w	r7, [r4, #199]	; 0xc7
    7060:	2600      	movs	r6, #0
    7062:	f804 6fbc 	strb.w	r6, [r4, #188]!
    7066:	f7fa fb87 	bl	1778 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    706a:	8921      	ldrh	r1, [r4, #8]
    706c:	3cbc      	subs	r4, #188	; 0xbc
    706e:	4288      	cmp	r0, r1
    7070:	d800      	bhi.n	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    7072:	4608      	mov	r0, r1
    7074:	f200 60c3 	addw	r0, r0, #1731	; 0x6c3
    7078:	fa1f f880 	uxth.w	r8, r0
    707c:	4620      	mov	r0, r4
    707e:	f006 ffa7 	bl	dfd0 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7082:	b318      	cbz	r0, 70cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
    7084:	4827      	ldr	r0, [pc, #156]	; (7124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    7086:	7800      	ldrb	r0, [r0, #0]
    7088:	f000 f8e2 	bl	7250 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    708c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7090:	b281      	uxth	r1, r0
    7092:	4628      	mov	r0, r5
    7094:	f004 ff26 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7098:	4428      	add	r0, r5
    709a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    709e:	34ac      	adds	r4, #172	; 0xac
    70a0:	f004 feec 	bl	be7c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    70a4:	4641      	mov	r1, r8
    70a6:	f7fa fa11 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    70aa:	61e0      	str	r0, [r4, #28]
    70ac:	f804 6c03 	strb.w	r6, [r4, #-3]
    70b0:	7127      	strb	r7, [r4, #4]
    70b2:	2001      	movs	r0, #1
    70b4:	f007 f907 	bl	e2c6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    70b8:	f200 100d 	addw	r0, r0, #269	; 0x10d
    70bc:	1a28      	subs	r0, r5, r0
    70be:	62a6      	str	r6, [r4, #40]	; 0x28
    70c0:	60a0      	str	r0, [r4, #8]
    70c2:	3cac      	subs	r4, #172	; 0xac
    70c4:	e017      	b.n	70f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf6>
    70c6:	200c      	movs	r0, #12
    70c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70cc:	4620      	mov	r0, r4
    70ce:	f007 fa19 	bl	e504 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    70d2:	f844 0fc0 	str.w	r0, [r4, #192]!
    70d6:	f804 7c17 	strb.w	r7, [r4, #-23]
    70da:	f004 fecf 	bl	be7c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    70de:	4607      	mov	r7, r0
    70e0:	2000      	movs	r0, #0
    70e2:	f007 fa90 	bl	e606 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    70e6:	eb00 0108 	add.w	r1, r0, r8
    70ea:	4638      	mov	r0, r7
    70ec:	f7fa f9ee 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    70f0:	6165      	str	r5, [r4, #20]
    70f2:	60a0      	str	r0, [r4, #8]
    70f4:	3cc0      	subs	r4, #192	; 0xc0
    70f6:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    70fa:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    70fe:	f007 fa51 	bl	e5a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7102:	b138      	cbz	r0, 7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    7104:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
    7108:	2100      	movs	r1, #0
    710a:	4620      	mov	r0, r4
    710c:	f006 ff95 	bl	e03a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7110:	2000      	movs	r0, #0
    7112:	e7d9      	b.n	70c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    7114:	f44f 7109 	mov.w	r1, #548	; 0x224
    7118:	2030      	movs	r0, #48	; 0x30
    711a:	f7fc fe21 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    711e:	0000      	.short	0x0000
    7120:	0000e631 	.word	0x0000e631
    7124:	20000100 	.word	0x20000100

00007128 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7128:	4905      	ldr	r1, [pc, #20]	; (7140 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x18>)
    712a:	7148      	strb	r0, [r1, #5]
    712c:	2000      	movs	r0, #0
    712e:	7088      	strb	r0, [r1, #2]
    7130:	2201      	movs	r2, #1
    7132:	700a      	strb	r2, [r1, #0]
    7134:	7048      	strb	r0, [r1, #1]
    7136:	710a      	strb	r2, [r1, #4]
    7138:	70c8      	strb	r0, [r1, #3]
    713a:	f007 b922 	b.w	e382 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    713e:	0000      	.short	0x0000
    7140:	20000100 	.word	0x20000100

00007144 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    7144:	4905      	ldr	r1, [pc, #20]	; (715c <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    7146:	788a      	ldrb	r2, [r1, #2]
    7148:	2a02      	cmp	r2, #2
    714a:	d003      	beq.n	7154 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x10>
    714c:	6a09      	ldr	r1, [r1, #32]
    714e:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    7152:	4770      	bx	lr
    7154:	6949      	ldr	r1, [r1, #20]
    7156:	f8c1 0164 	str.w	r0, [r1, #356]	; 0x164
    715a:	4770      	bx	lr
    715c:	20000100 	.word	0x20000100

00007160 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    7160:	4901      	ldr	r1, [pc, #4]	; (7168 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    7162:	7008      	strb	r0, [r1, #0]
    7164:	4770      	bx	lr
    7166:	0000      	.short	0x0000
    7168:	20000100 	.word	0x20000100

0000716c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    716c:	4901      	ldr	r1, [pc, #4]	; (7174 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    716e:	7048      	strb	r0, [r1, #1]
    7170:	4770      	bx	lr
    7172:	0000      	.short	0x0000
    7174:	20000100 	.word	0x20000100

00007178 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    7178:	4905      	ldr	r1, [pc, #20]	; (7190 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    717a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    717e:	fbb1 f1f2 	udiv	r1, r1, r2
    7182:	b510      	push	{r4, lr}
    7184:	f201 2193 	addw	r1, r1, #659	; 0x293
    7188:	f006 fe29 	bl	ddde <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    718c:	b280      	uxth	r0, r0
    718e:	bd10      	pop	{r4, pc}
    7190:	0001527d 	.word	0x0001527d

00007194 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7194:	b570      	push	{r4, r5, r6, lr}
    7196:	4c0f      	ldr	r4, [pc, #60]	; (71d4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x40>)
    7198:	f8d0 6164 	ldr.w	r6, [r0, #356]	; 0x164
    719c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    71a0:	7860      	ldrb	r0, [r4, #1]
    71a2:	b120      	cbz	r0, 71ae <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1a>
    71a4:	4632      	mov	r2, r6
    71a6:	4628      	mov	r0, r5
    71a8:	f006 f93e 	bl	d428 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    71ac:	4605      	mov	r5, r0
    71ae:	68a0      	ldr	r0, [r4, #8]
    71b0:	4285      	cmp	r5, r0
    71b2:	d005      	beq.n	71c0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2c>
    71b4:	6921      	ldr	r1, [r4, #16]
    71b6:	1a28      	subs	r0, r5, r0
    71b8:	4408      	add	r0, r1
    71ba:	6120      	str	r0, [r4, #16]
    71bc:	f7fb fa30 	bl	2620 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    71c0:	60a5      	str	r5, [r4, #8]
    71c2:	42ae      	cmp	r6, r5
    71c4:	d801      	bhi.n	71ca <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x36>
    71c6:	78e0      	ldrb	r0, [r4, #3]
    71c8:	b108      	cbz	r0, 71ce <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    71ca:	2000      	movs	r0, #0
    71cc:	bd70      	pop	{r4, r5, r6, pc}
    71ce:	2001      	movs	r0, #1
    71d0:	bd70      	pop	{r4, r5, r6, pc}
    71d2:	0000      	.short	0x0000
    71d4:	20000100 	.word	0x20000100

000071d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    71d8:	b570      	push	{r4, r5, r6, lr}
    71da:	4d1c      	ldr	r5, [pc, #112]	; (724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>)
    71dc:	4604      	mov	r4, r0
    71de:	2906      	cmp	r1, #6
    71e0:	d22e      	bcs.n	7240 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68>
    71e2:	e8df f001 	tbb	[pc, r1]
    71e6:	0b05      	.short	0x0b05
    71e8:	250f0e03 	.word	0x250f0e03
    71ec:	2100      	movs	r1, #0
    71ee:	e000      	b.n	71f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    71f0:	2101      	movs	r1, #1
    71f2:	4620      	mov	r0, r4
    71f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71f8:	f000 ba1a 	b.w	7630 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x458>
    71fc:	2003      	movs	r0, #3
    71fe:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7202:	bd70      	pop	{r4, r5, r6, pc}
    7204:	f003 feb0 	bl	af68 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7208:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    720c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7210:	f008 fa65 	bl	f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7214:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7218:	1a08      	subs	r0, r1, r0
    721a:	68a9      	ldr	r1, [r5, #8]
    721c:	4401      	add	r1, r0
    721e:	60a9      	str	r1, [r5, #8]
    7220:	68e9      	ldr	r1, [r5, #12]
    7222:	4408      	add	r0, r1
    7224:	60e8      	str	r0, [r5, #12]
    7226:	4620      	mov	r0, r4
    7228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    722c:	f000 b926 	b.w	747c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a4>
    7230:	6a28      	ldr	r0, [r5, #32]
    7232:	2200      	movs	r2, #0
    7234:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    7238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    723c:	f000 b9be 	b.w	75bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e4>
    7240:	f240 71af 	movw	r1, #1967	; 0x7af
    7244:	2030      	movs	r0, #48	; 0x30
    7246:	f7fc fd8b 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    724a:	0000      	.short	0x0000
    724c:	20000100 	.word	0x20000100
    7250:	b510      	push	{r4, lr}
    7252:	280c      	cmp	r0, #12
    7254:	d304      	bcc.n	7260 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x88>
    7256:	f240 312a 	movw	r1, #810	; 0x32a
    725a:	2006      	movs	r0, #6
    725c:	f7fc fd80 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7260:	4901      	ldr	r1, [pc, #4]	; (7268 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    7262:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7266:	bd10      	pop	{r4, pc}
    7268:	0000e682 	.word	0x0000e682
    726c:	b570      	push	{r4, r5, r6, lr}
    726e:	4604      	mov	r4, r0
    7270:	2601      	movs	r6, #1
    7272:	f007 f999 	bl	e5a8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    7276:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    727a:	2000      	movs	r0, #0
    727c:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    7280:	2001      	movs	r0, #1
    7282:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    7286:	f894 00b0 	ldrb.w	r0, [r4, #176]	; 0xb0
    728a:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    728e:	b160      	cbz	r0, 72aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd2>
    7290:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7294:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    7298:	f7fa f918 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    729c:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    72a0:	2100      	movs	r1, #0
    72a2:	4628      	mov	r0, r5
    72a4:	f006 f99f 	bl	d5e6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    72a8:	e00f      	b.n	72ca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf2>
    72aa:	4620      	mov	r0, r4
    72ac:	f006 fe70 	bl	df90 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    72b0:	4606      	mov	r6, r0
    72b2:	4631      	mov	r1, r6
    72b4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    72b8:	f7fa f908 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    72bc:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    72c0:	4631      	mov	r1, r6
    72c2:	4628      	mov	r0, r5
    72c4:	f006 f98f 	bl	d5e6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    72c8:	1c46      	adds	r6, r0, #1
    72ca:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    72ce:	1c41      	adds	r1, r0, #1
    72d0:	290a      	cmp	r1, #10
    72d2:	d202      	bcs.n	72da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    72d4:	4430      	add	r0, r6
    72d6:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
    72da:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    72de:	b130      	cbz	r0, 72ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x116>
    72e0:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    72e4:	1c40      	adds	r0, r0, #1
    72e6:	280a      	cmp	r0, #10
    72e8:	d301      	bcc.n	72ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x116>
    72ea:	2002      	movs	r0, #2
    72ec:	e000      	b.n	72f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    72ee:	2003      	movs	r0, #3
    72f0:	f884 00c6 	strb.w	r0, [r4, #198]	; 0xc6
    72f4:	2100      	movs	r1, #0
    72f6:	4620      	mov	r0, r4
    72f8:	f007 f90a 	bl	e510 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd8>
    72fc:	b140      	cbz	r0, 7310 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x138>
    72fe:	4620      	mov	r0, r4
    7300:	f007 f8f7 	bl	e4f2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7304:	4809      	ldr	r0, [pc, #36]	; (732c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x154>)
    7306:	7940      	ldrb	r0, [r0, #5]
    7308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    730c:	f7fc bb78 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7310:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    7314:	4629      	mov	r1, r5
    7316:	f007 f945 	bl	e5a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    731a:	2800      	cmp	r0, #0
    731c:	d104      	bne.n	7328 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    731e:	f240 61e4 	movw	r1, #1764	; 0x6e4
    7322:	2030      	movs	r0, #48	; 0x30
    7324:	f7fc fd1c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7328:	bd70      	pop	{r4, r5, r6, pc}
    732a:	0000      	.short	0x0000
    732c:	20000100 	.word	0x20000100
    7330:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7332:	4c18      	ldr	r4, [pc, #96]	; (7394 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
    7334:	2001      	movs	r0, #1
    7336:	70e0      	strb	r0, [r4, #3]
    7338:	f64f 75ff 	movw	r5, #65535	; 0xffff
    733c:	e00b      	b.n	7356 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x17e>
    733e:	2100      	movs	r1, #0
    7340:	f005 ff23 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7344:	0006      	movs	r6, r0
    7346:	d010      	beq.n	736a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x192>
    7348:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    734c:	f7fa ff68 	bl	2220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7350:	4630      	mov	r0, r6
    7352:	f007 f945 	bl	e5e0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7356:	4669      	mov	r1, sp
    7358:	2000      	movs	r0, #0
    735a:	f005 ff20 	bl	d19e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    735e:	b180      	cbz	r0, 7382 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    7360:	f240 1137 	movw	r1, #311	; 0x137
    7364:	2030      	movs	r0, #48	; 0x30
    7366:	f7fc fcfb 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    736a:	f240 1157 	movw	r1, #343	; 0x157
    736e:	e7f9      	b.n	7364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18c>
    7370:	9802      	ldr	r0, [sp, #8]
    7372:	b130      	cbz	r0, 7382 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    7374:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    7378:	b119      	cbz	r1, 7382 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    737a:	8800      	ldrh	r0, [r0, #0]
    737c:	42a8      	cmp	r0, r5
    737e:	d1de      	bne.n	733e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x166>
    7380:	e004      	b.n	738c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b4>
    7382:	4668      	mov	r0, sp
    7384:	f7fc ff1a 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7388:	2800      	cmp	r0, #0
    738a:	d0f1      	beq.n	7370 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x198>
    738c:	2000      	movs	r0, #0
    738e:	70e0      	strb	r0, [r4, #3]
    7390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7392:	0000      	.short	0x0000
    7394:	20000100 	.word	0x20000100
    7398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    739c:	4604      	mov	r4, r0
    739e:	4836      	ldr	r0, [pc, #216]	; (7478 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a0>)
    73a0:	461e      	mov	r6, r3
    73a2:	4690      	mov	r8, r2
    73a4:	7900      	ldrb	r0, [r0, #4]
    73a6:	4689      	mov	r9, r1
    73a8:	2500      	movs	r5, #0
    73aa:	b368      	cbz	r0, 7408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73ac:	f7fc f998 	bl	36e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    73b0:	b350      	cbz	r0, 7408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73b2:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    73b6:	2802      	cmp	r0, #2
    73b8:	d326      	bcc.n	7408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73ba:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    73be:	2802      	cmp	r0, #2
    73c0:	d022      	beq.n	7408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73c2:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    73c6:	b9f8      	cbnz	r0, 7408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73c8:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    73cc:	f7ff ff40 	bl	7250 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    73d0:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    73d4:	b281      	uxth	r1, r0
    73d6:	8031      	strh	r1, [r6, #0]
    73d8:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    73dc:	2700      	movs	r7, #0
    73de:	2801      	cmp	r0, #1
    73e0:	d015      	beq.n	740e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x236>
    73e2:	6860      	ldr	r0, [r4, #4]
    73e4:	f004 fd7e 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    73e8:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    73ec:	b280      	uxth	r0, r0
    73ee:	4442      	add	r2, r8
    73f0:	eba2 0109 	sub.w	r1, r2, r9
    73f4:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    73f8:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    73fc:	1a82      	subs	r2, r0, r2
    73fe:	fb01 7502 	mla	r5, r1, r2, r7
    7402:	2001      	movs	r0, #1
    7404:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    7408:	4628      	mov	r0, r5
    740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    740e:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7412:	2803      	cmp	r0, #3
    7414:	d02c      	beq.n	7470 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x298>
    7416:	2101      	movs	r1, #1
    7418:	2000      	movs	r0, #0
    741a:	f006 f8d2 	bl	d5c2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    741e:	69e1      	ldr	r1, [r4, #28]
    7420:	1847      	adds	r7, r0, r1
    7422:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7426:	8831      	ldrh	r1, [r6, #0]
    7428:	34c8      	adds	r4, #200	; 0xc8
    742a:	f004 fd5b 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    742e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7430:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7432:	1a82      	subs	r2, r0, r2
    7434:	fb01 5502 	mla	r5, r1, r2, r5
    7438:	65a0      	str	r0, [r4, #88]	; 0x58
    743a:	8831      	ldrh	r1, [r6, #0]
    743c:	4638      	mov	r0, r7
    743e:	f004 fd51 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7442:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7444:	66a0      	str	r0, [r4, #104]	; 0x68
    7446:	1a41      	subs	r1, r0, r1
    7448:	440d      	add	r5, r1
    744a:	8831      	ldrh	r1, [r6, #0]
    744c:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    7450:	f004 fd48 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7454:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    7456:	4442      	add	r2, r8
    7458:	eba2 0109 	sub.w	r1, r2, r9
    745c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    745e:	1a89      	subs	r1, r1, r2
    7460:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7462:	1e49      	subs	r1, r1, #1
    7464:	1a82      	subs	r2, r0, r2
    7466:	fb01 5502 	mla	r5, r1, r2, r5
    746a:	66e0      	str	r0, [r4, #108]	; 0x6c
    746c:	3cc8      	subs	r4, #200	; 0xc8
    746e:	e7c8      	b.n	7402 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22a>
    7470:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7474:	e7d3      	b.n	741e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x246>
    7476:	0000      	.short	0x0000
    7478:	20000100 	.word	0x20000100
    747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7480:	4604      	mov	r4, r0
    7482:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    7486:	2800      	cmp	r0, #0
    7488:	d053      	beq.n	7532 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    748a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    748e:	2803      	cmp	r0, #3
    7490:	d14f      	bne.n	7532 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    7492:	4829      	ldr	r0, [pc, #164]	; (7538 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x360>)
    7494:	f894 9067 	ldrb.w	r9, [r4, #103]	; 0x67
    7498:	7800      	ldrb	r0, [r0, #0]
    749a:	f7ff fed9 	bl	7250 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    749e:	4605      	mov	r5, r0
    74a0:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    74a4:	f7ff fed4 	bl	7250 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    74a8:	4428      	add	r0, r5
    74aa:	b286      	uxth	r6, r0
    74ac:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    74b0:	f7ff fece 	bl	7250 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    74b4:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    74b8:	fa1f f880 	uxth.w	r8, r0
    74bc:	4648      	mov	r0, r9
    74be:	f008 f90e 	bl	f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    74c2:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    74c6:	1a0d      	subs	r5, r1, r0
    74c8:	4648      	mov	r0, r9
    74ca:	f008 f916 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    74ce:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    74d2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    74d6:	fbb0 f0fa 	udiv	r0, r0, sl
    74da:	1a2d      	subs	r5, r5, r0
    74dc:	4648      	mov	r0, r9
    74de:	f008 f8fe 	bl	f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    74e2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    74e6:	1a0f      	subs	r7, r1, r0
    74e8:	4648      	mov	r0, r9
    74ea:	f008 f906 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    74ee:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    74f2:	4401      	add	r1, r0
    74f4:	fbb1 f0fa 	udiv	r0, r1, sl
    74f8:	1a39      	subs	r1, r7, r0
    74fa:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    74fe:	4370      	muls	r0, r6
    7500:	fbb0 f2f8 	udiv	r2, r0, r8
    7504:	2029      	movs	r0, #41	; 0x29
    7506:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    750a:	3260      	adds	r2, #96	; 0x60
    750c:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    7510:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    7514:	42a9      	cmp	r1, r5
    7516:	d801      	bhi.n	751c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x344>
    7518:	4285      	cmp	r5, r0
    751a:	d901      	bls.n	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x348>
    751c:	f7fc f8c2 	bl	36a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    7520:	4631      	mov	r1, r6
    7522:	6860      	ldr	r0, [r4, #4]
    7524:	f004 fcde 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7528:	2100      	movs	r1, #0
    752a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    752e:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    7532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7536:	0000      	.short	0x0000
    7538:	20000100 	.word	0x20000100
    753c:	b570      	push	{r4, r5, r6, lr}
    753e:	4604      	mov	r4, r0
    7540:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
    7544:	2500      	movs	r5, #0
    7546:	b118      	cbz	r0, 7550 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x378>
    7548:	2001      	movs	r0, #1
    754a:	f007 f85c 	bl	e606 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    754e:	4605      	mov	r5, r0
    7550:	4620      	mov	r0, r4
    7552:	f006 fd1d 	bl	df90 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    7556:	1941      	adds	r1, r0, r5
    7558:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    755c:	34bc      	adds	r4, #188	; 0xbc
    755e:	f7f9 ffb5 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7562:	2600      	movs	r6, #0
    7564:	60e0      	str	r0, [r4, #12]
    7566:	f804 6b0b 	strb.w	r6, [r4], #11
    756a:	2001      	movs	r0, #1
    756c:	f804 0901 	strb.w	r0, [r4], #-1
    7570:	2003      	movs	r0, #3
    7572:	f804 09c6 	strb.w	r0, [r4], #-198
    7576:	4620      	mov	r0, r4
    7578:	f007 f816 	bl	e5a8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    757c:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    7580:	4629      	mov	r1, r5
    7582:	4620      	mov	r0, r4
    7584:	f006 ffc4 	bl	e510 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd8>
    7588:	b930      	cbnz	r0, 7598 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3c0>
    758a:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    758e:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    7592:	f007 f807 	bl	e5a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7596:	b148      	cbz	r0, 75ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3d4>
    7598:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
    759c:	f006 ffe9 	bl	e572 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    75a0:	4805      	ldr	r0, [pc, #20]	; (75b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e0>)
    75a2:	7940      	ldrb	r0, [r0, #5]
    75a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    75a8:	f7fc ba2a 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    75ac:	f44f 61e6 	mov.w	r1, #1840	; 0x730
    75b0:	2030      	movs	r0, #48	; 0x30
    75b2:	f7fc fbd5 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75b6:	0000      	.short	0x0000
    75b8:	20000100 	.word	0x20000100
    75bc:	b570      	push	{r4, r5, r6, lr}
    75be:	4604      	mov	r4, r0
    75c0:	2000      	movs	r0, #0
    75c2:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
    75c6:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
    75ca:	460e      	mov	r6, r1
    75cc:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    75d0:	2001      	movs	r0, #1
    75d2:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    75d6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    75da:	2101      	movs	r1, #1
    75dc:	34a8      	adds	r4, #168	; 0xa8
    75de:	f7fe fa7f 	bl	5ae0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    75e2:	6860      	ldr	r0, [r4, #4]
    75e4:	f8c0 5154 	str.w	r5, [r0, #340]	; 0x154
    75e8:	6861      	ldr	r1, [r4, #4]
    75ea:	7820      	ldrb	r0, [r4, #0]
    75ec:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    75f0:	6860      	ldr	r0, [r4, #4]
    75f2:	f8c0 6164 	str.w	r6, [r0, #356]	; 0x164
    75f6:	6860      	ldr	r0, [r4, #4]
    75f8:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
    75fc:	6860      	ldr	r0, [r4, #4]
    75fe:	8801      	ldrh	r1, [r0, #0]
    7600:	f890 0160 	ldrb.w	r0, [r0, #352]	; 0x160
    7604:	f7fe faf4 	bl	5bf0 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    7608:	6860      	ldr	r0, [r4, #4]
    760a:	f006 feed 	bl	e3e8 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>
    760e:	b120      	cbz	r0, 761a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    7610:	f240 7159 	movw	r1, #1881	; 0x759
    7614:	2030      	movs	r0, #48	; 0x30
    7616:	f7fc fba3 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    761a:	f006 ffaa 	bl	e572 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    761e:	4803      	ldr	r0, [pc, #12]	; (762c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x454>)
    7620:	7940      	ldrb	r0, [r0, #5]
    7622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7626:	f7fc b9eb 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    762a:	0000      	.short	0x0000
    762c:	20000100 	.word	0x20000100
    7630:	b538      	push	{r3, r4, r5, lr}
    7632:	2500      	movs	r5, #0
    7634:	4604      	mov	r4, r0
    7636:	2901      	cmp	r1, #1
    7638:	d102      	bne.n	7640 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x468>
    763a:	4810      	ldr	r0, [pc, #64]	; (767c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a4>)
    763c:	78c0      	ldrb	r0, [r0, #3]
    763e:	b170      	cbz	r0, 765e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x486>
    7640:	2004      	movs	r0, #4
    7642:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7646:	bf00      	nop
    7648:	f006 ff93 	bl	e572 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    764c:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    7650:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7654:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7658:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    765c:	bd38      	pop	{r3, r4, r5, pc}
    765e:	9500      	str	r5, [sp, #0]
    7660:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7664:	2301      	movs	r3, #1
    7666:	2200      	movs	r2, #0
    7668:	4620      	mov	r0, r4
    766a:	f000 f809 	bl	7680 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    766e:	2800      	cmp	r0, #0
    7670:	d0ea      	beq.n	7648 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x470>
    7672:	f240 710e 	movw	r1, #1806	; 0x70e
    7676:	2030      	movs	r0, #48	; 0x30
    7678:	f7fc fb72 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    767c:	20000100 	.word	0x20000100
    7680:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7684:	4604      	mov	r4, r0
    7686:	b085      	sub	sp, #20
    7688:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    768c:	f8df b424 	ldr.w	fp, [pc, #1060]	; 7ab4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8dc>
    7690:	e9cd 3000 	strd	r3, r0, [sp]
    7694:	4699      	mov	r9, r3
    7696:	460f      	mov	r7, r1
    7698:	f89b 0000 	ldrb.w	r0, [fp]
    769c:	f7ff fdd8 	bl	7250 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    76a0:	4605      	mov	r5, r0
    76a2:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    76a6:	f7ff fdd3 	bl	7250 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    76aa:	4428      	add	r0, r5
    76ac:	f8ad 0008 	strh.w	r0, [sp, #8]
    76b0:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    76b4:	280d      	cmp	r0, #13
    76b6:	d004      	beq.n	76c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ea>
    76b8:	2000      	movs	r0, #0
    76ba:	9003      	str	r0, [sp, #12]
    76bc:	9807      	ldr	r0, [sp, #28]
    76be:	b110      	cbz	r0, 76c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ee>
    76c0:	e02e      	b.n	7720 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    76c2:	2001      	movs	r0, #1
    76c4:	e7f9      	b.n	76ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4e2>
    76c6:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    76ca:	2803      	cmp	r0, #3
    76cc:	d128      	bne.n	7720 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    76ce:	9803      	ldr	r0, [sp, #12]
    76d0:	b330      	cbz	r0, 7720 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    76d2:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    76d6:	42b8      	cmp	r0, r7
    76d8:	d122      	bne.n	7720 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    76da:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    76de:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    76e2:	6860      	ldr	r0, [r4, #4]
    76e4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    76e8:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    76ec:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    76f0:	4408      	add	r0, r1
    76f2:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    76f6:	4620      	mov	r0, r4
    76f8:	f000 fb96 	bl	7e28 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    76fc:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    7700:	61e0      	str	r0, [r4, #28]
    7702:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    7706:	8360      	strh	r0, [r4, #26]
    7708:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    770c:	6060      	str	r0, [r4, #4]
    770e:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    7712:	8120      	strh	r0, [r4, #8]
    7714:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7718:	8160      	strh	r0, [r4, #10]
    771a:	2002      	movs	r0, #2
    771c:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7720:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7724:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    7728:	1a38      	subs	r0, r7, r0
    772a:	fa0f fa80 	sxth.w	sl, r0
    772e:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    7732:	1a38      	subs	r0, r7, r0
    7734:	fa0f f880 	sxth.w	r8, r0
    7738:	f1b8 0f00 	cmp.w	r8, #0
    773c:	da06      	bge.n	774c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x574>
    773e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7742:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    7746:	2001      	movs	r0, #1
    7748:	46d0      	mov	r8, sl
    774a:	9000      	str	r0, [sp, #0]
    774c:	ab02      	add	r3, sp, #8
    774e:	4652      	mov	r2, sl
    7750:	4641      	mov	r1, r8
    7752:	4620      	mov	r0, r4
    7754:	f7ff fe20 	bl	7398 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>
    7758:	9004      	str	r0, [sp, #16]
    775a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    775e:	b140      	cbz	r0, 7772 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x59a>
    7760:	2801      	cmp	r0, #1
    7762:	d07c      	beq.n	785e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x686>
    7764:	2802      	cmp	r0, #2
    7766:	d05a      	beq.n	781e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x646>
    7768:	2803      	cmp	r0, #3
    776a:	d079      	beq.n	7860 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x688>
    776c:	f240 518e 	movw	r1, #1422	; 0x58e
    7770:	e19c      	b.n	7aac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    7772:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7776:	b3e8      	cbz	r0, 77f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x61c>
    7778:	2101      	movs	r1, #1
    777a:	2000      	movs	r0, #0
    777c:	f005 ff21 	bl	d5c2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7780:	4606      	mov	r6, r0
    7782:	69e0      	ldr	r0, [r4, #28]
    7784:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7788:	4430      	add	r0, r6
    778a:	f004 fbab 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    778e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7792:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7796:	6860      	ldr	r0, [r4, #4]
    7798:	f004 fba4 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    779c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    77a0:	a901      	add	r1, sp, #4
    77a2:	4668      	mov	r0, sp
    77a4:	f003 fb10 	bl	adc8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    77a8:	e9dd 1200 	ldrd	r1, r2, [sp]
    77ac:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    77b0:	f7fa ffea 	bl	2788 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    77b4:	4682      	mov	sl, r0
    77b6:	4620      	mov	r0, r4
    77b8:	f006 fecd 	bl	e556 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11e>
    77bc:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    77c0:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    77c4:	f007 ff99 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    77c8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    77cc:	4401      	add	r1, r0
    77ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    77d2:	fbb1 f0f0 	udiv	r0, r1, r0
    77d6:	69e1      	ldr	r1, [r4, #28]
    77d8:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    77dc:	4431      	add	r1, r6
    77de:	1a08      	subs	r0, r1, r0
    77e0:	1a81      	subs	r1, r0, r2
    77e2:	4441      	add	r1, r8
    77e4:	3920      	subs	r1, #32
    77e6:	eba1 060a 	sub.w	r6, r1, sl
    77ea:	0050      	lsls	r0, r2, #1
    77ec:	8b61      	ldrh	r1, [r4, #26]
    77ee:	3060      	adds	r0, #96	; 0x60
    77f0:	4401      	add	r1, r0
    77f2:	e000      	b.n	77f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x61e>
    77f4:	e010      	b.n	7818 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x640>
    77f6:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    77fa:	f006 fec1 	bl	e580 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    77fe:	3024      	adds	r0, #36	; 0x24
    7800:	f8cb 0018 	str.w	r0, [fp, #24]
    7804:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7808:	4659      	mov	r1, fp
    780a:	1a30      	subs	r0, r6, r0
    780c:	f5b0 7fdb 	cmp.w	r0, #438	; 0x1b6
    7810:	d85c      	bhi.n	78cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6f4>
    7812:	f240 5127 	movw	r1, #1319	; 0x527
    7816:	e149      	b.n	7aac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    7818:	f240 5105 	movw	r1, #1285	; 0x505
    781c:	e146      	b.n	7aac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    781e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    7822:	69e0      	ldr	r0, [r4, #28]
    7824:	4408      	add	r0, r1
    7826:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    782a:	f004 fb5b 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    782e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7832:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7836:	6860      	ldr	r0, [r4, #4]
    7838:	f004 fb54 	bl	bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    783c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7840:	4620      	mov	r0, r4
    7842:	f006 fe88 	bl	e556 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11e>
    7846:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    784a:	bb10      	cbnz	r0, 7892 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    784c:	f1b9 0f00 	cmp.w	r9, #0
    7850:	d01f      	beq.n	7892 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    7852:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    7856:	4640      	mov	r0, r8
    7858:	f007 ff4f 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    785c:	e001      	b.n	7862 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68a>
    785e:	e036      	b.n	78ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6f6>
    7860:	e052      	b.n	7908 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x730>
    7862:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7866:	4401      	add	r1, r0
    7868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    786c:	fbb1 f0f0 	udiv	r0, r1, r0
    7870:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    7874:	69e2      	ldr	r2, [r4, #28]
    7876:	4408      	add	r0, r1
    7878:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    787c:	4411      	add	r1, r2
    787e:	1a0e      	subs	r6, r1, r0
    7880:	4640      	mov	r0, r8
    7882:	f007 ff2c 	bl	f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7886:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    788a:	1a08      	subs	r0, r1, r0
    788c:	4406      	add	r6, r0
    788e:	3e20      	subs	r6, #32
    7890:	e006      	b.n	78a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c8>
    7892:	69e1      	ldr	r1, [r4, #28]
    7894:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7898:	4408      	add	r0, r1
    789a:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    789e:	1a46      	subs	r6, r0, r1
    78a0:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    78a4:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    78a8:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    78ac:	fb01 0002 	mla	r0, r1, r2, r0
    78b0:	0040      	lsls	r0, r0, #1
    78b2:	8b61      	ldrh	r1, [r4, #26]
    78b4:	3060      	adds	r0, #96	; 0x60
    78b6:	4401      	add	r1, r0
    78b8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    78bc:	f006 fe60 	bl	e580 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    78c0:	f8cb 0018 	str.w	r0, [fp, #24]
    78c4:	2001      	movs	r0, #1
    78c6:	4659      	mov	r1, fp
    78c8:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    78cc:	e066      	b.n	799c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7c4>
    78ce:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    78d2:	6860      	ldr	r0, [r4, #4]
    78d4:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    78d8:	1a46      	subs	r6, r0, r1
    78da:	eb02 000a 	add.w	r0, r2, sl
    78de:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    78e2:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    78e6:	1a80      	subs	r0, r0, r2
    78e8:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    78ec:	1e40      	subs	r0, r0, #1
    78ee:	fb0c 3202 	mla	r2, ip, r2, r3
    78f2:	fb00 2001 	mla	r0, r0, r1, r2
    78f6:	0040      	lsls	r0, r0, #1
    78f8:	8b61      	ldrh	r1, [r4, #26]
    78fa:	3060      	adds	r0, #96	; 0x60
    78fc:	4401      	add	r1, r0
    78fe:	fb06 f608 	mul.w	r6, r6, r8
    7902:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7906:	e044      	b.n	7992 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ba>
    7908:	6860      	ldr	r0, [r4, #4]
    790a:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    790e:	fb00 f008 	mul.w	r0, r0, r8
    7912:	fb08 0611 	mls	r6, r8, r1, r0
    7916:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    791a:	2824      	cmp	r0, #36	; 0x24
    791c:	d003      	beq.n	7926 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74e>
    791e:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    7922:	2824      	cmp	r0, #36	; 0x24
    7924:	d109      	bne.n	793a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    7926:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    792a:	1a38      	subs	r0, r7, r0
    792c:	b200      	sxth	r0, r0
    792e:	2800      	cmp	r0, #0
    7930:	db03      	blt.n	793a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    7932:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    7936:	b100      	cbz	r0, 793a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    7938:	9001      	str	r0, [sp, #4]
    793a:	9800      	ldr	r0, [sp, #0]
    793c:	b1f8      	cbz	r0, 797e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a6>
    793e:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    7942:	b9e0      	cbnz	r0, 797e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a6>
    7944:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    7948:	2800      	cmp	r0, #0
    794a:	d07d      	beq.n	7a48 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    794c:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7950:	2800      	cmp	r0, #0
    7952:	d079      	beq.n	7a48 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    7954:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7958:	f007 fecf 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    795c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7960:	4401      	add	r1, r0
    7962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7966:	fbb1 f0f0 	udiv	r0, r1, r0
    796a:	1a36      	subs	r6, r6, r0
    796c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7970:	f007 feb5 	bl	f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7974:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7978:	1a08      	subs	r0, r1, r0
    797a:	4406      	add	r6, r0
    797c:	3e20      	subs	r6, #32
    797e:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    7982:	eb01 000a 	add.w	r0, r1, sl
    7986:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    798a:	4348      	muls	r0, r1
    798c:	0041      	lsls	r1, r0, #1
    798e:	3160      	adds	r1, #96	; 0x60
    7990:	9801      	ldr	r0, [sp, #4]
    7992:	f006 fdf5 	bl	e580 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    7996:	4659      	mov	r1, fp
    7998:	f8cb 0018 	str.w	r0, [fp, #24]
    799c:	9804      	ldr	r0, [sp, #16]
    799e:	6989      	ldr	r1, [r1, #24]
    79a0:	1a33      	subs	r3, r6, r0
    79a2:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    79a6:	6860      	ldr	r0, [r4, #4]
    79a8:	1b80      	subs	r0, r0, r6
    79aa:	f2a0 2045 	subw	r0, r0, #581	; 0x245
    79ae:	f8cb 001c 	str.w	r0, [fp, #28]
    79b2:	4281      	cmp	r1, r0
    79b4:	d800      	bhi.n	79b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e0>
    79b6:	4608      	mov	r0, r1
    79b8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    79bc:	2000      	movs	r0, #0
    79be:	7028      	strb	r0, [r5, #0]
    79c0:	2064      	movs	r0, #100	; 0x64
    79c2:	8128      	strh	r0, [r5, #8]
    79c4:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    79c8:	4619      	mov	r1, r3
    79ca:	34dc      	adds	r4, #220	; 0xdc
    79cc:	f7f9 fd7e 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    79d0:	60e8      	str	r0, [r5, #12]
    79d2:	f854 0cb0 	ldr.w	r0, [r4, #-176]
    79d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79d8:	4408      	add	r0, r1
    79da:	6068      	str	r0, [r5, #4]
    79dc:	68e8      	ldr	r0, [r5, #12]
    79de:	67e0      	str	r0, [r4, #124]	; 0x7c
    79e0:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    79e4:	2001      	movs	r0, #1
    79e6:	72a8      	strb	r0, [r5, #10]
    79e8:	8aa1      	ldrh	r1, [r4, #20]
    79ea:	3cdc      	subs	r4, #220	; 0xdc
    79ec:	1bc9      	subs	r1, r1, r7
    79ee:	b209      	sxth	r1, r1
    79f0:	2900      	cmp	r1, #0
    79f2:	dd01      	ble.n	79f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x820>
    79f4:	2103      	movs	r1, #3
    79f6:	72a9      	strb	r1, [r5, #10]
    79f8:	9903      	ldr	r1, [sp, #12]
    79fa:	b331      	cbz	r1, 7a4a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x872>
    79fc:	f1b9 0f00 	cmp.w	r9, #0
    7a00:	d027      	beq.n	7a52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a02:	bf00      	nop
    7a04:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    7a08:	b392      	cbz	r2, 7a70 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x898>
    7a0a:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    7a0e:	bf00      	nop
    7a10:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    7a14:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    7a18:	1c49      	adds	r1, r1, #1
    7a1a:	434b      	muls	r3, r1
    7a1c:	4293      	cmp	r3, r2
    7a1e:	d218      	bcs.n	7a52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a20:	7aa9      	ldrb	r1, [r5, #10]
    7a22:	1e49      	subs	r1, r1, #1
    7a24:	2900      	cmp	r1, #0
    7a26:	dd14      	ble.n	7a52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a28:	72a8      	strb	r0, [r5, #10]
    7a2a:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    7a2e:	2101      	movs	r1, #1
    7a30:	1c40      	adds	r0, r0, #1
    7a32:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    7a36:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    7a3a:	f7fc fa21 	bl	3e80 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    7a3e:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    7a42:	f000 0007 	and.w	r0, r0, #7
    7a46:	e001      	b.n	7a4c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x874>
    7a48:	e013      	b.n	7a72 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x89a>
    7a4a:	e015      	b.n	7a78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    7a4c:	1c40      	adds	r0, r0, #1
    7a4e:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    7a52:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    7a56:	4629      	mov	r1, r5
    7a58:	f006 fda4 	bl	e5a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7a5c:	b320      	cbz	r0, 7aa8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d0>
    7a5e:	9807      	ldr	r0, [sp, #28]
    7a60:	f080 0001 	eor.w	r0, r0, #1
    7a64:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    7a68:	2000      	movs	r0, #0
    7a6a:	b009      	add	sp, #36	; 0x24
    7a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a70:	e018      	b.n	7aa4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8cc>
    7a72:	f240 5179 	movw	r1, #1401	; 0x579
    7a76:	e019      	b.n	7aac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    7a78:	f1b9 0f00 	cmp.w	r9, #0
    7a7c:	d1c2      	bne.n	7a04 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x82c>
    7a7e:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7a82:	2800      	cmp	r0, #0
    7a84:	d0e5      	beq.n	7a52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a86:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7a8a:	6860      	ldr	r0, [r4, #4]
    7a8c:	1a41      	subs	r1, r0, r1
    7a8e:	4628      	mov	r0, r5
    7a90:	f005 fda9 	bl	d5e6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7a94:	0400      	lsls	r0, r0, #16
    7a96:	0c00      	lsrs	r0, r0, #16
    7a98:	d0db      	beq.n	7a52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a9a:	9912      	ldr	r1, [sp, #72]	; 0x48
    7a9c:	b101      	cbz	r1, 7aa0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c8>
    7a9e:	8008      	strh	r0, [r1, #0]
    7aa0:	2001      	movs	r0, #1
    7aa2:	e7e2      	b.n	7a6a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x892>
    7aa4:	2100      	movs	r1, #0
    7aa6:	e7b3      	b.n	7a10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x838>
    7aa8:	f240 51d9 	movw	r1, #1497	; 0x5d9
    7aac:	2030      	movs	r0, #48	; 0x30
    7aae:	f7fc f957 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ab2:	0000      	.short	0x0000
    7ab4:	20000100 	.word	0x20000100
    7ab8:	b570      	push	{r4, r5, r6, lr}
    7aba:	2909      	cmp	r1, #9
    7abc:	d24e      	bcs.n	7b5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x984>
    7abe:	e8df f001 	tbb	[pc, r1]
    7ac2:	1a05      	.short	0x1a05
    7ac4:	4d3c4040 	.word	0x4d3c4040
    7ac8:	0048442e 	.word	0x0048442e
    7acc:	4d25      	ldr	r5, [pc, #148]	; (7b64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x98c>)
    7ace:	4604      	mov	r4, r0
    7ad0:	6228      	str	r0, [r5, #32]
    7ad2:	2000      	movs	r0, #0
    7ad4:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7ad8:	4620      	mov	r0, r4
    7ada:	f7fe fce1 	bl	64a0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    7ade:	b110      	cbz	r0, 7ae6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90e>
    7ae0:	f240 21b9 	movw	r1, #697	; 0x2b9
    7ae4:	e037      	b.n	7b56 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    7ae6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    7aea:	38fa      	subs	r0, #250	; 0xfa
    7aec:	f7fa fd98 	bl	2620 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7af0:	2003      	movs	r0, #3
    7af2:	70a8      	strb	r0, [r5, #2]
    7af4:	bd70      	pop	{r4, r5, r6, pc}
    7af6:	4605      	mov	r5, r0
    7af8:	f006 fa6a 	bl	dfd0 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7afc:	b9a8      	cbnz	r0, 7b2a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x952>
    7afe:	4628      	mov	r0, r5
    7b00:	f006 fd00 	bl	e504 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    7b04:	4604      	mov	r4, r0
    7b06:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    7b0a:	42a0      	cmp	r0, r4
    7b0c:	d20b      	bcs.n	7b26 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94e>
    7b0e:	1a20      	subs	r0, r4, r0
    7b10:	2104      	movs	r1, #4
    7b12:	f7f9 fbff 	bl	1314 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    7b16:	b130      	cbz	r0, 7b26 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94e>
    7b18:	4628      	mov	r0, r5
    7b1a:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
    7b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b22:	f006 ba33 	b.w	df8c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    7b26:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
    7b2a:	4628      	mov	r0, r5
    7b2c:	f7fe fcd4 	bl	64d8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    7b30:	2800      	cmp	r0, #0
    7b32:	d0df      	beq.n	7af4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x91c>
    7b34:	f240 21ed 	movw	r1, #749	; 0x2ed
    7b38:	e00d      	b.n	7b56 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    7b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b3e:	f003 bbe5 	b.w	b30c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b46:	f7ff bb91 	b.w	726c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b4e:	f006 bcd0 	b.w	e4f2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7b52:	f44f 7184 	mov.w	r1, #264	; 0x108
    7b56:	2030      	movs	r0, #48	; 0x30
    7b58:	f7fc f902 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b5c:	f44f 7186 	mov.w	r1, #268	; 0x10c
    7b60:	e7f9      	b.n	7b56 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    7b62:	0000      	.short	0x0000
    7b64:	20000100 	.word	0x20000100
    7b68:	b570      	push	{r4, r5, r6, lr}
    7b6a:	4d4f      	ldr	r5, [pc, #316]	; (7ca8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xad0>)
    7b6c:	4606      	mov	r6, r0
    7b6e:	2909      	cmp	r1, #9
    7b70:	d27e      	bcs.n	7c70 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa98>
    7b72:	e8df f001 	tbb	[pc, r1]
    7b76:	4a05      	.short	0x4a05
    7b78:	964e5252 	.word	0x964e5252
    7b7c:	00927069 	.word	0x00927069
    7b80:	4630      	mov	r0, r6
    7b82:	f7fe f827 	bl	5bd4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7b86:	2100      	movs	r1, #0
    7b88:	f005 faff 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7b8c:	0004      	movs	r4, r0
    7b8e:	d007      	beq.n	7ba0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9c8>
    7b90:	4630      	mov	r0, r6
    7b92:	f7fe f81f 	bl	5bd4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7b96:	8821      	ldrh	r1, [r4, #0]
    7b98:	4288      	cmp	r0, r1
    7b9a:	d003      	beq.n	7ba4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9cc>
    7b9c:	21a9      	movs	r1, #169	; 0xa9
    7b9e:	e07d      	b.n	7c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7ba0:	21a8      	movs	r1, #168	; 0xa8
    7ba2:	e07b      	b.n	7c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7ba4:	2100      	movs	r1, #0
    7ba6:	616c      	str	r4, [r5, #20]
    7ba8:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
    7bac:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    7bb0:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    7bb4:	4620      	mov	r0, r4
    7bb6:	b189      	cbz	r1, 7bdc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa04>
    7bb8:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    7bbc:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    7bc0:	428a      	cmp	r2, r1
    7bc2:	d106      	bne.n	7bd2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9fa>
    7bc4:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    7bc8:	1a51      	subs	r1, r2, r1
    7bca:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7bce:	4611      	mov	r1, r2
    7bd0:	e00d      	b.n	7bee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa16>
    7bd2:	1a51      	subs	r1, r2, r1
    7bd4:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7bd8:	b291      	uxth	r1, r2
    7bda:	e008      	b.n	7bee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa16>
    7bdc:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    7be0:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    7be4:	1a89      	subs	r1, r1, r2
    7be6:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7bea:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    7bee:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    7bf2:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    7bf6:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    7bfa:	f000 fb29 	bl	8250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    7bfe:	4620      	mov	r0, r4
    7c00:	f000 f854 	bl	7cac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xad4>
    7c04:	2002      	movs	r0, #2
    7c06:	70a8      	strb	r0, [r5, #2]
    7c08:	bd70      	pop	{r4, r5, r6, pc}
    7c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c0e:	f006 bd52 	b.w	e6b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    7c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c16:	f003 bb79 	b.w	b30c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7c1a:	4630      	mov	r0, r6
    7c1c:	f7fd ffda 	bl	5bd4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7c20:	2100      	movs	r1, #0
    7c22:	f005 fab2 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7c26:	0004      	movs	r4, r0
    7c28:	d007      	beq.n	7c3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa62>
    7c2a:	4630      	mov	r0, r6
    7c2c:	f7fd ffd2 	bl	5bd4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7c30:	8821      	ldrh	r1, [r4, #0]
    7c32:	4288      	cmp	r0, r1
    7c34:	d003      	beq.n	7c3e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa66>
    7c36:	21c3      	movs	r1, #195	; 0xc3
    7c38:	e030      	b.n	7c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c3a:	21c2      	movs	r1, #194	; 0xc2
    7c3c:	e02e      	b.n	7c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c3e:	4620      	mov	r0, r4
    7c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c44:	f000 b866 	b.w	7d14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb3c>
    7c48:	2001      	movs	r0, #1
    7c4a:	f7f9 fb53 	bl	12f4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    7c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c52:	f005 bb49 	b.w	d2e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    7c56:	4630      	mov	r0, r6
    7c58:	f7fd ffbc 	bl	5bd4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7c5c:	2100      	movs	r1, #0
    7c5e:	f005 fa94 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7c62:	0004      	movs	r4, r0
    7c64:	d009      	beq.n	7c7a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa2>
    7c66:	4630      	mov	r0, r6
    7c68:	f7fd ffb4 	bl	5bd4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7c6c:	8821      	ldrh	r1, [r4, #0]
    7c6e:	e000      	b.n	7c72 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa9a>
    7c70:	e017      	b.n	7ca2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaca>
    7c72:	4288      	cmp	r0, r1
    7c74:	d003      	beq.n	7c7e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa6>
    7c76:	21d1      	movs	r1, #209	; 0xd1
    7c78:	e010      	b.n	7c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c7a:	21d0      	movs	r1, #208	; 0xd0
    7c7c:	e00e      	b.n	7c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c7e:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7c82:	2804      	cmp	r0, #4
    7c84:	d001      	beq.n	7c8a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xab2>
    7c86:	21d3      	movs	r1, #211	; 0xd3
    7c88:	e008      	b.n	7c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c8a:	4620      	mov	r0, r4
    7c8c:	f006 fca8 	bl	e5e0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7c90:	7968      	ldrb	r0, [r5, #5]
    7c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c96:	f7fb beb3 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7c9a:	21dc      	movs	r1, #220	; 0xdc
    7c9c:	2030      	movs	r0, #48	; 0x30
    7c9e:	f7fc f85f 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ca2:	21e0      	movs	r1, #224	; 0xe0
    7ca4:	e7fa      	b.n	7c9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7ca6:	0000      	.short	0x0000
    7ca8:	20000100 	.word	0x20000100
    7cac:	b570      	push	{r4, r5, r6, lr}
    7cae:	4604      	mov	r4, r0
    7cb0:	f7f9 fd62 	bl	1778 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7cb4:	2864      	cmp	r0, #100	; 0x64
    7cb6:	d901      	bls.n	7cbc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae4>
    7cb8:	4605      	mov	r5, r0
    7cba:	e000      	b.n	7cbe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae6>
    7cbc:	2564      	movs	r5, #100	; 0x64
    7cbe:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7cc2:	2128      	movs	r1, #40	; 0x28
    7cc4:	f006 fc13 	bl	e4ee <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7cc8:	1946      	adds	r6, r0, r5
    7cca:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7cce:	2128      	movs	r1, #40	; 0x28
    7cd0:	f206 263f 	addw	r6, r6, #575	; 0x23f
    7cd4:	f006 fc0b 	bl	e4ee <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7cd8:	f200 22a3 	addw	r2, r0, #675	; 0x2a3
    7cdc:	4620      	mov	r0, r4
    7cde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7ce0:	f005 fff1 	bl	dcc6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7ce4:	4605      	mov	r5, r0
    7ce6:	4632      	mov	r2, r6
    7ce8:	4620      	mov	r0, r4
    7cea:	6861      	ldr	r1, [r4, #4]
    7cec:	f005 ffeb 	bl	dcc6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7cf0:	4907      	ldr	r1, [pc, #28]	; (7d10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb38>)
    7cf2:	4285      	cmp	r5, r0
    7cf4:	60c8      	str	r0, [r1, #12]
    7cf6:	d200      	bcs.n	7cfa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb22>
    7cf8:	4628      	mov	r0, r5
    7cfa:	6088      	str	r0, [r1, #8]
    7cfc:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    7d00:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
    7d04:	6108      	str	r0, [r1, #16]
    7d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d0a:	f7fa bc89 	b.w	2620 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7d0e:	0000      	.short	0x0000
    7d10:	20000100 	.word	0x20000100
    7d14:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7d16:	4604      	mov	r4, r0
    7d18:	f004 f8b0 	bl	be7c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7d1c:	4601      	mov	r1, r0
    7d1e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7d22:	f7f9 fc09 	bl	1538 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7d26:	6861      	ldr	r1, [r4, #4]
    7d28:	b111      	cbz	r1, 7d30 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb58>
    7d2a:	fbb0 f0f1 	udiv	r0, r0, r1
    7d2e:	e000      	b.n	7d32 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb5a>
    7d30:	2000      	movs	r0, #0
    7d32:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    7d36:	290d      	cmp	r1, #13
    7d38:	d00c      	beq.n	7d54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb7c>
    7d3a:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    7d3e:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7d42:	1813      	adds	r3, r2, r0
    7d44:	1acb      	subs	r3, r1, r3
    7d46:	b21b      	sxth	r3, r3
    7d48:	2b00      	cmp	r3, #0
    7d4a:	db06      	blt.n	7d5a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb82>
    7d4c:	1c49      	adds	r1, r1, #1
    7d4e:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    7d52:	e006      	b.n	7d62 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb8a>
    7d54:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7d58:	e00c      	b.n	7d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb9c>
    7d5a:	1c40      	adds	r0, r0, #1
    7d5c:	4410      	add	r0, r2
    7d5e:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7d62:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    7d66:	b940      	cbnz	r0, 7d7a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xba2>
    7d68:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7d6c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7d70:	4288      	cmp	r0, r1
    7d72:	d102      	bne.n	7d7a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xba2>
    7d74:	1c40      	adds	r0, r0, #1
    7d76:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7d7a:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7d7e:	1c40      	adds	r0, r0, #1
    7d80:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    7d84:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    7d88:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    7d8c:	1a40      	subs	r0, r0, r1
    7d8e:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    7d92:	1e40      	subs	r0, r0, #1
    7d94:	4408      	add	r0, r1
    7d96:	b285      	uxth	r5, r0
    7d98:	e026      	b.n	7de8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc10>
    7d9a:	a801      	add	r0, sp, #4
    7d9c:	2300      	movs	r3, #0
    7d9e:	9000      	str	r0, [sp, #0]
    7da0:	461a      	mov	r2, r3
    7da2:	4620      	mov	r0, r4
    7da4:	f7ff fc6c 	bl	7680 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    7da8:	2800      	cmp	r0, #0
    7daa:	d03a      	beq.n	7e22 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc4a>
    7dac:	2801      	cmp	r0, #1
    7dae:	d004      	beq.n	7dba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe2>
    7db0:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    7db4:	2030      	movs	r0, #48	; 0x30
    7db6:	f7fb ffd3 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dba:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7dbe:	f8b4 10f0 	ldrh.w	r1, [r4, #240]	; 0xf0
    7dc2:	1a42      	subs	r2, r0, r1
    7dc4:	b212      	sxth	r2, r2
    7dc6:	2a00      	cmp	r2, #0
    7dc8:	da09      	bge.n	7dde <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc06>
    7dca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7dce:	4402      	add	r2, r0
    7dd0:	1aaa      	subs	r2, r5, r2
    7dd2:	b212      	sxth	r2, r2
    7dd4:	2a00      	cmp	r2, #0
    7dd6:	da02      	bge.n	7dde <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc06>
    7dd8:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    7ddc:	e004      	b.n	7de8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc10>
    7dde:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7de2:	4408      	add	r0, r1
    7de4:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7de8:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7dec:	1a68      	subs	r0, r5, r1
    7dee:	b200      	sxth	r0, r0
    7df0:	2800      	cmp	r0, #0
    7df2:	dad2      	bge.n	7d9a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbc2>
    7df4:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7df8:	b188      	cbz	r0, 7e1e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc46>
    7dfa:	2008      	movs	r0, #8
    7dfc:	f884 008e 	strb.w	r0, [r4, #142]	; 0x8e
    7e00:	2001      	movs	r0, #1
    7e02:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    7e06:	4620      	mov	r0, r4
    7e08:	f006 fc57 	bl	e6ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    7e0c:	4620      	mov	r0, r4
    7e0e:	f006 fbe7 	bl	e5e0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7e12:	4804      	ldr	r0, [pc, #16]	; (7e24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc4c>)
    7e14:	7940      	ldrb	r0, [r0, #5]
    7e16:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    7e1a:	f7fb bdf1 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7e1e:	203e      	movs	r0, #62	; 0x3e
    7e20:	e7ec      	b.n	7dfc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc24>
    7e22:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7e24:	20000100 	.word	0x20000100

00007e28 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    7e28:	b510      	push	{r4, lr}
    7e2a:	4604      	mov	r4, r0
    7e2c:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    7e30:	6861      	ldr	r1, [r4, #4]
    7e32:	4288      	cmp	r0, r1
    7e34:	d109      	bne.n	7e4a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    7e36:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    7e3a:	8922      	ldrh	r2, [r4, #8]
    7e3c:	4291      	cmp	r1, r2
    7e3e:	d104      	bne.n	7e4a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    7e40:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    7e44:	8962      	ldrh	r2, [r4, #10]
    7e46:	4291      	cmp	r1, r2
    7e48:	d015      	beq.n	7e76 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    7e4a:	8821      	ldrh	r1, [r4, #0]
    7e4c:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    7e50:	f005 fae4 	bl	d41c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7e54:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    7e58:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    7e5c:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    7e60:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7e64:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    7e68:	2001      	movs	r0, #1
    7e6a:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    7e6e:	4807      	ldr	r0, [pc, #28]	; (7e8c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    7e70:	7880      	ldrb	r0, [r0, #2]
    7e72:	f7fb fdc5 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7e76:	2102      	movs	r1, #2
    7e78:	4620      	mov	r0, r4
    7e7a:	f7fd fe31 	bl	5ae0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7e7e:	2000      	movs	r0, #0
    7e80:	f804 0f7e 	strb.w	r0, [r4, #126]!
    7e84:	2003      	movs	r0, #3
    7e86:	70e0      	strb	r0, [r4, #3]
    7e88:	bd10      	pop	{r4, pc}
    7e8a:	0000      	.short	0x0000
    7e8c:	20000124 	.word	0x20000124

00007e90 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7e90:	4806      	ldr	r0, [pc, #24]	; (7eac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7e92:	4905      	ldr	r1, [pc, #20]	; (7ea8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7e94:	6501      	str	r1, [r0, #80]	; 0x50
    7e96:	4906      	ldr	r1, [pc, #24]	; (7eb0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7e98:	6541      	str	r1, [r0, #84]	; 0x54
    7e9a:	4807      	ldr	r0, [pc, #28]	; (7eb8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7e9c:	4905      	ldr	r1, [pc, #20]	; (7eb4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7e9e:	6501      	str	r1, [r0, #80]	; 0x50
    7ea0:	4906      	ldr	r1, [pc, #24]	; (7ebc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7ea2:	6541      	str	r1, [r0, #84]	; 0x54
    7ea4:	4770      	bx	lr
    7ea6:	0000      	.short	0x0000
    7ea8:	00009341 	.word	0x00009341
    7eac:	20000138 	.word	0x20000138
    7eb0:	00009405 	.word	0x00009405
    7eb4:	00009a59 	.word	0x00009a59
    7eb8:	2000019c 	.word	0x2000019c
    7ebc:	00009a89 	.word	0x00009a89

00007ec0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ec2:	460d      	mov	r5, r1
    7ec4:	4607      	mov	r7, r0
    7ec6:	2100      	movs	r1, #0
    7ec8:	f005 f95f 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7ecc:	1e04      	subs	r4, r0, #0
    7ece:	d04f      	beq.n	7f70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7ed0:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    7ed4:	2800      	cmp	r0, #0
    7ed6:	d04b      	beq.n	7f70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7ed8:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7edc:	f88d 0000 	strb.w	r0, [sp]
    7ee0:	9800      	ldr	r0, [sp, #0]
    7ee2:	9000      	str	r0, [sp, #0]
    7ee4:	f89d 0000 	ldrb.w	r0, [sp]
    7ee8:	2600      	movs	r6, #0
    7eea:	b1d8      	cbz	r0, 7f24 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7eec:	706e      	strb	r6, [r5, #1]
    7eee:	2007      	movs	r0, #7
    7ef0:	7028      	strb	r0, [r5, #0]
    7ef2:	e00b      	b.n	7f0c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7ef4:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    7ef8:	8466      	strh	r6, [r4, #34]	; 0x22
    7efa:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    7efe:	6068      	str	r0, [r5, #4]
    7f00:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    7f04:	60a8      	str	r0, [r5, #8]
    7f06:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    7f0a:	81a8      	strh	r0, [r5, #12]
    7f0c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7f10:	f88d 0000 	strb.w	r0, [sp]
    7f14:	9800      	ldr	r0, [sp, #0]
    7f16:	9000      	str	r0, [sp, #0]
    7f18:	f89d 0000 	ldrb.w	r0, [sp]
    7f1c:	2800      	cmp	r0, #0
    7f1e:	d1e9      	bne.n	7ef4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7f20:	712e      	strb	r6, [r5, #4]
    7f22:	e10b      	b.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    7f24:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7f28:	b3a0      	cbz	r0, 7f94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7f2a:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7f2e:	280b      	cmp	r0, #11
    7f30:	d016      	beq.n	7f60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7f32:	280c      	cmp	r0, #12
    7f34:	d004      	beq.n	7f40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7f36:	f640 21ce 	movw	r1, #2766	; 0xace
    7f3a:	2031      	movs	r0, #49	; 0x31
    7f3c:	f7fb ff10 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f40:	8820      	ldrh	r0, [r4, #0]
    7f42:	f7fc fb1d 	bl	4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7f46:	4607      	mov	r7, r0
    7f48:	f004 ffda 	bl	cf00 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7f4c:	b978      	cbnz	r0, 7f6e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7f4e:	706e      	strb	r6, [r5, #1]
    7f50:	200c      	movs	r0, #12
    7f52:	7028      	strb	r0, [r5, #0]
    7f54:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7f58:	7128      	strb	r0, [r5, #4]
    7f5a:	8820      	ldrh	r0, [r4, #0]
    7f5c:	80e8      	strh	r0, [r5, #6]
    7f5e:	e013      	b.n	7f88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7f60:	8820      	ldrh	r0, [r4, #0]
    7f62:	f7fc fb0d 	bl	4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7f66:	4607      	mov	r7, r0
    7f68:	f004 ffca 	bl	cf00 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7f6c:	b108      	cbz	r0, 7f72 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7f6e:	2000      	movs	r0, #0
    7f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f72:	706e      	strb	r6, [r5, #1]
    7f74:	200b      	movs	r0, #11
    7f76:	7028      	strb	r0, [r5, #0]
    7f78:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7f7c:	7128      	strb	r0, [r5, #4]
    7f7e:	8820      	ldrh	r0, [r4, #0]
    7f80:	80e8      	strh	r0, [r5, #6]
    7f82:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    7f86:	7228      	strb	r0, [r5, #8]
    7f88:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    7f8c:	4638      	mov	r0, r7
    7f8e:	f004 ffcc 	bl	cf2a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7f92:	e0d3      	b.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    7f94:	e7ff      	b.n	7f96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7f96:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    7f9a:	f88d 0000 	strb.w	r0, [sp]
    7f9e:	9800      	ldr	r0, [sp, #0]
    7fa0:	9000      	str	r0, [sp, #0]
    7fa2:	f89d 0000 	ldrb.w	r0, [sp]
    7fa6:	b130      	cbz	r0, 7fb6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7fa8:	706e      	strb	r6, [r5, #1]
    7faa:	200e      	movs	r0, #14
    7fac:	7028      	strb	r0, [r5, #0]
    7fae:	80af      	strh	r7, [r5, #4]
    7fb0:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    7fb4:	e0c2      	b.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    7fb6:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7fba:	f88d 0000 	strb.w	r0, [sp]
    7fbe:	9800      	ldr	r0, [sp, #0]
    7fc0:	9000      	str	r0, [sp, #0]
    7fc2:	f89d 0000 	ldrb.w	r0, [sp]
    7fc6:	b198      	cbz	r0, 7ff0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7fc8:	706e      	strb	r6, [r5, #1]
    7fca:	2008      	movs	r0, #8
    7fcc:	7028      	strb	r0, [r5, #0]
    7fce:	8820      	ldrh	r0, [r4, #0]
    7fd0:	80a8      	strh	r0, [r5, #4]
    7fd2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    7fd6:	f8c5 1006 	str.w	r1, [r5, #6]
    7fda:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    7fde:	f8c5 100a 	str.w	r1, [r5, #10]
    7fe2:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    7fe6:	81e8      	strh	r0, [r5, #14]
    7fe8:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    7fec:	7026      	strb	r6, [r4, #0]
    7fee:	e0a5      	b.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    7ff0:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7ff4:	f88d 0000 	strb.w	r0, [sp]
    7ff8:	9800      	ldr	r0, [sp, #0]
    7ffa:	9000      	str	r0, [sp, #0]
    7ffc:	f89d 0000 	ldrb.w	r0, [sp]
    8000:	b1a0      	cbz	r0, 802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    8002:	706e      	strb	r6, [r5, #1]
    8004:	2016      	movs	r0, #22
    8006:	7028      	strb	r0, [r5, #0]
    8008:	e005      	b.n	8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
    800a:	bf00      	nop
    800c:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    8010:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    8014:	6068      	str	r0, [r5, #4]
    8016:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    801a:	f88d 0000 	strb.w	r0, [sp]
    801e:	9800      	ldr	r0, [sp, #0]
    8020:	9000      	str	r0, [sp, #0]
    8022:	f89d 0000 	ldrb.w	r0, [sp]
    8026:	2800      	cmp	r0, #0
    8028:	d1f0      	bne.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    802a:	e087      	b.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    802c:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    8030:	f88d 0000 	strb.w	r0, [sp]
    8034:	9800      	ldr	r0, [sp, #0]
    8036:	9000      	str	r0, [sp, #0]
    8038:	f89d 0000 	ldrb.w	r0, [sp]
    803c:	b170      	cbz	r0, 805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
    803e:	706e      	strb	r6, [r5, #1]
    8040:	2006      	movs	r0, #6
    8042:	7028      	strb	r0, [r5, #0]
    8044:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    8048:	6068      	str	r0, [r5, #4]
    804a:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    804e:	60a8      	str	r0, [r5, #8]
    8050:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8054:	60e8      	str	r0, [r5, #12]
    8056:	f504 7401 	add.w	r4, r4, #516	; 0x204
    805a:	e03a      	b.n	80d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd2>
    805c:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8060:	f88d 0000 	strb.w	r0, [sp]
    8064:	9800      	ldr	r0, [sp, #0]
    8066:	9000      	str	r0, [sp, #0]
    8068:	f89d 0000 	ldrb.w	r0, [sp]
    806c:	b1d0      	cbz	r0, 80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    806e:	706e      	strb	r6, [r5, #1]
    8070:	2012      	movs	r0, #18
    8072:	7028      	strb	r0, [r5, #0]
    8074:	e00b      	b.n	808e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e>
    8076:	bf00      	nop
    8078:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    807c:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8080:	6068      	str	r0, [r5, #4]
    8082:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    8086:	60a8      	str	r0, [r5, #8]
    8088:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    808c:	60e8      	str	r0, [r5, #12]
    808e:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8092:	f88d 0000 	strb.w	r0, [sp]
    8096:	9800      	ldr	r0, [sp, #0]
    8098:	9000      	str	r0, [sp, #0]
    809a:	f89d 0000 	ldrb.w	r0, [sp]
    809e:	2800      	cmp	r0, #0
    80a0:	d1ea      	bne.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
    80a2:	e04b      	b.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    80a4:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    80a8:	f88d 0000 	strb.w	r0, [sp]
    80ac:	9800      	ldr	r0, [sp, #0]
    80ae:	9000      	str	r0, [sp, #0]
    80b0:	f89d 0000 	ldrb.w	r0, [sp]
    80b4:	b180      	cbz	r0, 80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>
    80b6:	706e      	strb	r6, [r5, #1]
    80b8:	2018      	movs	r0, #24
    80ba:	7028      	strb	r0, [r5, #0]
    80bc:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    80c0:	6068      	str	r0, [r5, #4]
    80c2:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    80c6:	60a8      	str	r0, [r5, #8]
    80c8:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    80cc:	81a8      	strh	r0, [r5, #12]
    80ce:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    80d2:	f804 6c02 	strb.w	r6, [r4, #-2]
    80d6:	e031      	b.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    80d8:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    80dc:	f88d 0000 	strb.w	r0, [sp]
    80e0:	9800      	ldr	r0, [sp, #0]
    80e2:	9000      	str	r0, [sp, #0]
    80e4:	f89d 0000 	ldrb.w	r0, [sp]
    80e8:	b138      	cbz	r0, 80fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfa>
    80ea:	2019      	movs	r0, #25
    80ec:	7028      	strb	r0, [r5, #0]
    80ee:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    80f2:	6068      	str	r0, [r5, #4]
    80f4:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    80f8:	e020      	b.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    80fa:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    80fe:	f88d 0000 	strb.w	r0, [sp]
    8102:	9800      	ldr	r0, [sp, #0]
    8104:	9000      	str	r0, [sp, #0]
    8106:	f89d 0000 	ldrb.w	r0, [sp]
    810a:	2800      	cmp	r0, #0
    810c:	f43f af30 	beq.w	7f70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8110:	706e      	strb	r6, [r5, #1]
    8112:	2013      	movs	r0, #19
    8114:	7028      	strb	r0, [r5, #0]
    8116:	e007      	b.n	8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
    8118:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    811c:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8120:	6068      	str	r0, [r5, #4]
    8122:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    8126:	8128      	strh	r0, [r5, #8]
    8128:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    812c:	f88d 0000 	strb.w	r0, [sp]
    8130:	9800      	ldr	r0, [sp, #0]
    8132:	9000      	str	r0, [sp, #0]
    8134:	f89d 0000 	ldrb.w	r0, [sp]
    8138:	2800      	cmp	r0, #0
    813a:	d1ed      	bne.n	8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>
    813c:	2001      	movs	r0, #1
    813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008140 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8140:	491b      	ldr	r1, [pc, #108]	; (81b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    8142:	7088      	strb	r0, [r1, #2]
    8144:	481c      	ldr	r0, [pc, #112]	; (81b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8146:	491b      	ldr	r1, [pc, #108]	; (81b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8148:	6081      	str	r1, [r0, #8]
    814a:	491c      	ldr	r1, [pc, #112]	; (81bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    814c:	6041      	str	r1, [r0, #4]
    814e:	491c      	ldr	r1, [pc, #112]	; (81c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8150:	6001      	str	r1, [r0, #0]
    8152:	491c      	ldr	r1, [pc, #112]	; (81c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8154:	6281      	str	r1, [r0, #40]	; 0x28
    8156:	491c      	ldr	r1, [pc, #112]	; (81c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8158:	62c1      	str	r1, [r0, #44]	; 0x2c
    815a:	491c      	ldr	r1, [pc, #112]	; (81cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    815c:	60c1      	str	r1, [r0, #12]
    815e:	491c      	ldr	r1, [pc, #112]	; (81d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8160:	6181      	str	r1, [r0, #24]
    8162:	491c      	ldr	r1, [pc, #112]	; (81d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8164:	6301      	str	r1, [r0, #48]	; 0x30
    8166:	491c      	ldr	r1, [pc, #112]	; (81d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8168:	6201      	str	r1, [r0, #32]
    816a:	491c      	ldr	r1, [pc, #112]	; (81dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    816c:	64c1      	str	r1, [r0, #76]	; 0x4c
    816e:	491c      	ldr	r1, [pc, #112]	; (81e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8170:	6481      	str	r1, [r0, #72]	; 0x48
    8172:	491c      	ldr	r1, [pc, #112]	; (81e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8174:	6441      	str	r1, [r0, #68]	; 0x44
    8176:	491c      	ldr	r1, [pc, #112]	; (81e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8178:	6341      	str	r1, [r0, #52]	; 0x34
    817a:	491c      	ldr	r1, [pc, #112]	; (81ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    817c:	61c1      	str	r1, [r0, #28]
    817e:	481d      	ldr	r0, [pc, #116]	; (81f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8180:	491b      	ldr	r1, [pc, #108]	; (81f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8182:	6081      	str	r1, [r0, #8]
    8184:	491c      	ldr	r1, [pc, #112]	; (81f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8186:	61c1      	str	r1, [r0, #28]
    8188:	491c      	ldr	r1, [pc, #112]	; (81fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    818a:	6241      	str	r1, [r0, #36]	; 0x24
    818c:	491c      	ldr	r1, [pc, #112]	; (8200 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    818e:	62c1      	str	r1, [r0, #44]	; 0x2c
    8190:	491c      	ldr	r1, [pc, #112]	; (8204 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8192:	6101      	str	r1, [r0, #16]
    8194:	491c      	ldr	r1, [pc, #112]	; (8208 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8196:	6141      	str	r1, [r0, #20]
    8198:	491c      	ldr	r1, [pc, #112]	; (820c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    819a:	6441      	str	r1, [r0, #68]	; 0x44
    819c:	6341      	str	r1, [r0, #52]	; 0x34
    819e:	491c      	ldr	r1, [pc, #112]	; (8210 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    81a0:	6181      	str	r1, [r0, #24]
    81a2:	491c      	ldr	r1, [pc, #112]	; (8214 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    81a4:	6301      	str	r1, [r0, #48]	; 0x30
    81a6:	491c      	ldr	r1, [pc, #112]	; (8218 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    81a8:	6481      	str	r1, [r0, #72]	; 0x48
    81aa:	491c      	ldr	r1, [pc, #112]	; (821c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    81ac:	64c1      	str	r1, [r0, #76]	; 0x4c
    81ae:	4770      	bx	lr
    81b0:	20000124 	.word	0x20000124
    81b4:	000097a9 	.word	0x000097a9
    81b8:	20000138 	.word	0x20000138
    81bc:	00009105 	.word	0x00009105
    81c0:	00009161 	.word	0x00009161
    81c4:	000094cd 	.word	0x000094cd
    81c8:	00009511 	.word	0x00009511
    81cc:	0000920d 	.word	0x0000920d
    81d0:	00009781 	.word	0x00009781
    81d4:	000098c5 	.word	0x000098c5
    81d8:	000092bd 	.word	0x000092bd
    81dc:	000094a1 	.word	0x000094a1
    81e0:	00009475 	.word	0x00009475
    81e4:	00009741 	.word	0x00009741
    81e8:	00009771 	.word	0x00009771
    81ec:	000097dd 	.word	0x000097dd
    81f0:	00009c41 	.word	0x00009c41
    81f4:	2000019c 	.word	0x2000019c
    81f8:	00009c69 	.word	0x00009c69
    81fc:	00009a29 	.word	0x00009a29
    8200:	00009b01 	.word	0x00009b01
    8204:	000099fd 	.word	0x000099fd
    8208:	00009ba9 	.word	0x00009ba9
    820c:	00009b85 	.word	0x00009b85
    8210:	00009bcd 	.word	0x00009bcd
    8214:	00009cc1 	.word	0x00009cc1
    8218:	00009ab9 	.word	0x00009ab9
    821c:	00009ae9 	.word	0x00009ae9

00008220 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8220:	4806      	ldr	r0, [pc, #24]	; (823c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8222:	4905      	ldr	r1, [pc, #20]	; (8238 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8224:	6581      	str	r1, [r0, #88]	; 0x58
    8226:	4906      	ldr	r1, [pc, #24]	; (8240 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8228:	6601      	str	r1, [r0, #96]	; 0x60
    822a:	4807      	ldr	r0, [pc, #28]	; (8248 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    822c:	4905      	ldr	r1, [pc, #20]	; (8244 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    822e:	6581      	str	r1, [r0, #88]	; 0x58
    8230:	4906      	ldr	r1, [pc, #24]	; (824c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8232:	65c1      	str	r1, [r0, #92]	; 0x5c
    8234:	4770      	bx	lr
    8236:	0000      	.short	0x0000
    8238:	00009531 	.word	0x00009531
    823c:	20000138 	.word	0x20000138
    8240:	000095fd 	.word	0x000095fd
    8244:	00009b2d 	.word	0x00009b2d
    8248:	2000019c 	.word	0x2000019c
    824c:	00009b5d 	.word	0x00009b5d

00008250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8254:	2701      	movs	r7, #1
    8256:	4c72      	ldr	r4, [pc, #456]	; (8420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0>)
    8258:	2500      	movs	r5, #0
    825a:	f367 0107 	bfi	r1, r7, #0, #8
    825e:	80a5      	strh	r5, [r4, #4]
    8260:	7065      	strb	r5, [r4, #1]
    8262:	7025      	strb	r5, [r4, #0]
    8264:	60a0      	str	r0, [r4, #8]
    8266:	4689      	mov	r9, r1
    8268:	4680      	mov	r8, r0
    826a:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    826e:	8800      	ldrh	r0, [r0, #0]
    8270:	f7fc f99c 	bl	45ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8274:	b180      	cbz	r0, 8298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8276:	68a0      	ldr	r0, [r4, #8]
    8278:	8800      	ldrh	r0, [r0, #0]
    827a:	f7fc fbbb 	bl	49f4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    827e:	68a0      	ldr	r0, [r4, #8]
    8280:	8800      	ldrh	r0, [r0, #0]
    8282:	f7fc fb5f 	bl	4944 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8286:	68a0      	ldr	r0, [r4, #8]
    8288:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    828c:	b1a9      	cbz	r1, 82ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    828e:	3070      	adds	r0, #112	; 0x70
    8290:	f006 fa22 	bl	e6d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8294:	b128      	cbz	r0, 82a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    8296:	e010      	b.n	82ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8298:	f640 31ab 	movw	r1, #2987	; 0xbab
    829c:	2031      	movs	r0, #49	; 0x31
    829e:	f7fb fd5f 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82a2:	68a0      	ldr	r0, [r4, #8]
    82a4:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    82a8:	b139      	cbz	r1, 82ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    82aa:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    82ae:	2301      	movs	r3, #1
    82b0:	4619      	mov	r1, r3
    82b2:	3070      	adds	r0, #112	; 0x70
    82b4:	f005 f8cb 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    82b8:	b180      	cbz	r0, 82dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    82ba:	68a0      	ldr	r0, [r4, #8]
    82bc:	3070      	adds	r0, #112	; 0x70
    82be:	f006 fa0b 	bl	e6d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    82c2:	b128      	cbz	r0, 82d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    82c4:	68a0      	ldr	r0, [r4, #8]
    82c6:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    82ca:	bf00      	nop
    82cc:	f000 fb86 	bl	89dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    82d0:	68a0      	ldr	r0, [r4, #8]
    82d2:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    82d6:	b189      	cbz	r1, 82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    82d8:	80e5      	strh	r5, [r4, #6]
    82da:	e01e      	b.n	831a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    82dc:	68a0      	ldr	r0, [r4, #8]
    82de:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    82e2:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    82e6:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    82ea:	2100      	movs	r1, #0
    82ec:	2002      	movs	r0, #2
    82ee:	f000 fe03 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    82f2:	68a0      	ldr	r0, [r4, #8]
    82f4:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    82f8:	2002      	movs	r0, #2
    82fa:	e7e7      	b.n	82cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    82fc:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8300:	f88d 1000 	strb.w	r1, [sp]
    8304:	9900      	ldr	r1, [sp, #0]
    8306:	9100      	str	r1, [sp, #0]
    8308:	f89d 1000 	ldrb.w	r1, [sp]
    830c:	b919      	cbnz	r1, 8316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    830e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    8310:	8902      	ldrh	r2, [r0, #8]
    8312:	4291      	cmp	r1, r2
    8314:	d800      	bhi.n	8318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    8316:	8901      	ldrh	r1, [r0, #8]
    8318:	80e1      	strh	r1, [r4, #6]
    831a:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    831e:	1e49      	subs	r1, r1, #1
    8320:	b28e      	uxth	r6, r1
    8322:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8326:	4431      	add	r1, r6
    8328:	f820 195c 	strh.w	r1, [r0], #-92
    832c:	8801      	ldrh	r1, [r0, #0]
    832e:	4431      	add	r1, r6
    8330:	8001      	strh	r1, [r0, #0]
    8332:	f001 fcf3 	bl	9d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    8336:	b120      	cbz	r0, 8342 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    8338:	68a0      	ldr	r0, [r4, #8]
    833a:	f850 1f90 	ldr.w	r1, [r0, #144]!
    833e:	4431      	add	r1, r6
    8340:	6001      	str	r1, [r0, #0]
    8342:	68a0      	ldr	r0, [r4, #8]
    8344:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8348:	2901      	cmp	r1, #1
    834a:	d802      	bhi.n	8352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    834c:	1c49      	adds	r1, r1, #1
    834e:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    8352:	b10e      	cbz	r6, 8358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    8354:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8358:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    835c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8360:	290b      	cmp	r1, #11
    8362:	d001      	beq.n	8368 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    8364:	290c      	cmp	r1, #12
    8366:	d116      	bne.n	8396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146>
    8368:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    836c:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    8370:	1ad2      	subs	r2, r2, r3
    8372:	b212      	sxth	r2, r2
    8374:	2a00      	cmp	r2, #0
    8376:	db0e      	blt.n	8396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146>
    8378:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    837c:	60c1      	str	r1, [r0, #12]
    837e:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    8382:	7401      	strb	r1, [r0, #16]
    8384:	2103      	movs	r1, #3
    8386:	f7fd fbab 	bl	5ae0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    838a:	68a0      	ldr	r0, [r4, #8]
    838c:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8390:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    8394:	e024      	b.n	83e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8396:	2924      	cmp	r1, #36	; 0x24
    8398:	d10f      	bne.n	83ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    839a:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    839e:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    83a2:	1a89      	subs	r1, r1, r2
    83a4:	b209      	sxth	r1, r1
    83a6:	2900      	cmp	r1, #0
    83a8:	db07      	blt.n	83ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    83aa:	f000 fe51 	bl	9050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    83ae:	68a0      	ldr	r0, [r4, #8]
    83b0:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    83b4:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    83b8:	e012      	b.n	83e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    83ba:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    83be:	2924      	cmp	r1, #36	; 0x24
    83c0:	d001      	beq.n	83c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176>
    83c2:	2925      	cmp	r1, #37	; 0x25
    83c4:	d10c      	bne.n	83e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    83c6:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    83ca:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    83ce:	1a08      	subs	r0, r1, r0
    83d0:	b200      	sxth	r0, r0
    83d2:	2800      	cmp	r0, #0
    83d4:	db04      	blt.n	83e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    83d6:	f000 fe3b 	bl	9050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    83da:	68a0      	ldr	r0, [r4, #8]
    83dc:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    83e0:	68a0      	ldr	r0, [r4, #8]
    83e2:	4601      	mov	r1, r0
    83e4:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    83e8:	3070      	adds	r0, #112	; 0x70
    83ea:	f005 f8c9 	bl	d580 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    83ee:	480d      	ldr	r0, [pc, #52]	; (8424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>)
    83f0:	9000      	str	r0, [sp, #0]
    83f2:	4b0d      	ldr	r3, [pc, #52]	; (8428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8>)
    83f4:	4a0d      	ldr	r2, [pc, #52]	; (842c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>)
    83f6:	4641      	mov	r1, r8
    83f8:	4648      	mov	r0, r9
    83fa:	f7fc fbb3 	bl	4b64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    83fe:	68a0      	ldr	r0, [r4, #8]
    8400:	2301      	movs	r3, #1
    8402:	2105      	movs	r1, #5
    8404:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8408:	3070      	adds	r0, #112	; 0x70
    840a:	f005 f820 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    840e:	2800      	cmp	r0, #0
    8410:	d003      	beq.n	841a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca>
    8412:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8416:	f7fc bb9f 	b.w	4b58 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    841e:	0000      	.short	0x0000
    8420:	20000124 	.word	0x20000124
    8424:	00008b8d 	.word	0x00008b8d
    8428:	000086a5 	.word	0x000086a5
    842c:	00008f9d 	.word	0x00008f9d
    8430:	b570      	push	{r4, r5, r6, lr}
    8432:	4c0f      	ldr	r4, [pc, #60]	; (8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>)
    8434:	68a5      	ldr	r5, [r4, #8]
    8436:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    843a:	2920      	cmp	r1, #32
    843c:	d002      	beq.n	8444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>
    843e:	2926      	cmp	r1, #38	; 0x26
    8440:	d003      	beq.n	844a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fa>
    8442:	e011      	b.n	8468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    8444:	f000 fe3a 	bl	90bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8448:	e008      	b.n	845c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    844a:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    844e:	2301      	movs	r3, #1
    8450:	210b      	movs	r1, #11
    8452:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8456:	f004 fffa 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    845a:	b138      	cbz	r0, 846c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    845c:	68a1      	ldr	r1, [r4, #8]
    845e:	2000      	movs	r0, #0
    8460:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8464:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    8468:	2000      	movs	r0, #0
    846a:	bd70      	pop	{r4, r5, r6, pc}
    846c:	202a      	movs	r0, #42	; 0x2a
    846e:	e7e9      	b.n	8444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>
    8470:	20000124 	.word	0x20000124
    8474:	4804      	ldr	r0, [pc, #16]	; (8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x238>)
    8476:	2100      	movs	r1, #0
    8478:	6880      	ldr	r0, [r0, #8]
    847a:	f820 1fa8 	strh.w	r1, [r0, #168]!
    847e:	7881      	ldrb	r1, [r0, #2]
    8480:	1c49      	adds	r1, r1, #1
    8482:	7081      	strb	r1, [r0, #2]
    8484:	4770      	bx	lr
    8486:	0000      	.short	0x0000
    8488:	20000124 	.word	0x20000124
    848c:	4807      	ldr	r0, [pc, #28]	; (84ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25c>)
    848e:	b510      	push	{r4, lr}
    8490:	6881      	ldr	r1, [r0, #8]
    8492:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    8496:	1e40      	subs	r0, r0, #1
    8498:	b240      	sxtb	r0, r0
    849a:	7008      	strb	r0, [r1, #0]
    849c:	2800      	cmp	r0, #0
    849e:	da04      	bge.n	84aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25a>
    84a0:	f240 118f 	movw	r1, #399	; 0x18f
    84a4:	2031      	movs	r0, #49	; 0x31
    84a6:	f7fb fc5b 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84aa:	bd10      	pop	{r4, pc}
    84ac:	20000124 	.word	0x20000124
    84b0:	4917      	ldr	r1, [pc, #92]	; (8510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>)
    84b2:	b510      	push	{r4, lr}
    84b4:	6889      	ldr	r1, [r1, #8]
    84b6:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    84ba:	b1b8      	cbz	r0, 84ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    84bc:	2a10      	cmp	r2, #16
    84be:	d006      	beq.n	84ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    84c0:	2a14      	cmp	r2, #20
    84c2:	d007      	beq.n	84d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>
    84c4:	2a15      	cmp	r2, #21
    84c6:	d008      	beq.n	84da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    84c8:	2a1b      	cmp	r2, #27
    84ca:	d11c      	bne.n	8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    84cc:	e008      	b.n	84e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x290>
    84ce:	2101      	movs	r1, #1
    84d0:	200b      	movs	r0, #11
    84d2:	e007      	b.n	84e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    84d4:	f001 fa54 	bl	9980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1730>
    84d8:	e006      	b.n	84e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    84da:	f000 fd2b 	bl	8f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    84de:	e003      	b.n	84e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    84e0:	2101      	movs	r1, #1
    84e2:	2006      	movs	r0, #6
    84e4:	f000 fd08 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    84e8:	2001      	movs	r0, #1
    84ea:	bd10      	pop	{r4, pc}
    84ec:	2a21      	cmp	r2, #33	; 0x21
    84ee:	d10a      	bne.n	8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    84f0:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    84f4:	2802      	cmp	r0, #2
    84f6:	d008      	beq.n	850a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    84f8:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    84fc:	2801      	cmp	r0, #1
    84fe:	d102      	bne.n	8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    8500:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8504:	b108      	cbz	r0, 850a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8506:	2000      	movs	r0, #0
    8508:	bd10      	pop	{r4, pc}
    850a:	2101      	movs	r1, #1
    850c:	2017      	movs	r0, #23
    850e:	e7e9      	b.n	84e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    8510:	20000124 	.word	0x20000124
    8514:	b510      	push	{r4, lr}
    8516:	bbe8      	cbnz	r0, 8594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    8518:	4c31      	ldr	r4, [pc, #196]	; (85e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>)
    851a:	68a0      	ldr	r0, [r4, #8]
    851c:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8520:	07ca      	lsls	r2, r1, #31
    8522:	d002      	beq.n	852a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    8524:	2101      	movs	r1, #1
    8526:	2009      	movs	r0, #9
    8528:	e052      	b.n	85d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    852a:	078a      	lsls	r2, r1, #30
    852c:	d50a      	bpl.n	8544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>
    852e:	2101      	movs	r1, #1
    8530:	200c      	movs	r0, #12
    8532:	f000 fce1 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8536:	68a0      	ldr	r0, [r4, #8]
    8538:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    853c:	f041 0101 	orr.w	r1, r1, #1
    8540:	7001      	strb	r1, [r0, #0]
    8542:	e047      	b.n	85d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8544:	074a      	lsls	r2, r1, #29
    8546:	d502      	bpl.n	854e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2fe>
    8548:	2101      	movs	r1, #1
    854a:	2013      	movs	r0, #19
    854c:	e040      	b.n	85d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    854e:	070a      	lsls	r2, r1, #28
    8550:	d505      	bpl.n	855e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30e>
    8552:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    8556:	7141      	strb	r1, [r0, #5]
    8558:	2101      	movs	r1, #1
    855a:	2007      	movs	r0, #7
    855c:	e038      	b.n	85d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    855e:	f011 0f30 	tst.w	r1, #48	; 0x30
    8562:	d03b      	beq.n	85dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8564:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8568:	b9a1      	cbnz	r1, 8594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    856a:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    856e:	b1e1      	cbz	r1, 85aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    8570:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8574:	2924      	cmp	r1, #36	; 0x24
    8576:	d02f      	beq.n	85d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    8578:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    857c:	2924      	cmp	r1, #36	; 0x24
    857e:	d02b      	beq.n	85d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    8580:	f05f 0300 	movs.w	r3, #0
    8584:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8588:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    858c:	f005 fb8d 	bl	dcaa <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8590:	68a1      	ldr	r1, [r4, #8]
    8592:	e000      	b.n	8596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x346>
    8594:	e022      	b.n	85dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8596:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    859a:	f020 0020 	bic.w	r0, r0, #32
    859e:	f040 0010 	orr.w	r0, r0, #16
    85a2:	7008      	strb	r0, [r1, #0]
    85a4:	2000      	movs	r0, #0
    85a6:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    85aa:	68a0      	ldr	r0, [r4, #8]
    85ac:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    85b0:	06c9      	lsls	r1, r1, #27
    85b2:	d513      	bpl.n	85dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    85b4:	f005 fb94 	bl	dce0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    85b8:	f000 f906 	bl	87c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    85bc:	68a1      	ldr	r1, [r4, #8]
    85be:	f101 0028 	add.w	r0, r1, #40	; 0x28
    85c2:	8bc2      	ldrh	r2, [r0, #30]
    85c4:	f821 2fe6 	strh.w	r2, [r1, #230]!
    85c8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    85ca:	8048      	strh	r0, [r1, #2]
    85cc:	2101      	movs	r1, #1
    85ce:	2015      	movs	r0, #21
    85d0:	f000 fc92 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    85d4:	2001      	movs	r0, #1
    85d6:	bd10      	pop	{r4, pc}
    85d8:	2301      	movs	r3, #1
    85da:	e7d3      	b.n	8584 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    85dc:	2000      	movs	r0, #0
    85de:	bd10      	pop	{r4, pc}
    85e0:	20000124 	.word	0x20000124
    85e4:	b570      	push	{r4, r5, r6, lr}
    85e6:	460d      	mov	r5, r1
    85e8:	4606      	mov	r6, r0
    85ea:	f005 f9ab 	bl	d944 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    85ee:	4604      	mov	r4, r0
    85f0:	4630      	mov	r0, r6
    85f2:	f005 f9b3 	bl	d95c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    85f6:	4629      	mov	r1, r5
    85f8:	f000 f81e 	bl	8638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    85fc:	b1b8      	cbz	r0, 862e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    85fe:	4620      	mov	r0, r4
    8600:	f004 ffd1 	bl	d5a6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8604:	0001      	movs	r1, r0
    8606:	d00d      	beq.n	8624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8608:	480a      	ldr	r0, [pc, #40]	; (8634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>)
    860a:	6880      	ldr	r0, [r0, #8]
    860c:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    8610:	428a      	cmp	r2, r1
    8612:	d007      	beq.n	8624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8614:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8618:	2901      	cmp	r1, #1
    861a:	d005      	beq.n	8628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    861c:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    8620:	4220      	tst	r0, r4
    8622:	d004      	beq.n	862e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    8624:	2001      	movs	r0, #1
    8626:	bd70      	pop	{r4, r5, r6, pc}
    8628:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    862c:	e7f8      	b.n	8620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    862e:	2000      	movs	r0, #0
    8630:	bd70      	pop	{r4, r5, r6, pc}
    8632:	0000      	.short	0x0000
    8634:	20000124 	.word	0x20000124
    8638:	b570      	push	{r4, r5, r6, lr}
    863a:	460d      	mov	r5, r1
    863c:	4604      	mov	r4, r0
    863e:	f004 ffb2 	bl	d5a6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8642:	b350      	cbz	r0, 869a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8644:	4916      	ldr	r1, [pc, #88]	; (86a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>)
    8646:	6889      	ldr	r1, [r1, #8]
    8648:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    864c:	4282      	cmp	r2, r0
    864e:	d024      	beq.n	869a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8650:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    8654:	2b01      	cmp	r3, #1
    8656:	d005      	beq.n	8664 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x414>
    8658:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    865c:	4223      	tst	r3, r4
    865e:	d013      	beq.n	8688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    8660:	b11d      	cbz	r5, 866a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41a>
    8662:	e01a      	b.n	869a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8664:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    8668:	e7f8      	b.n	865c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    866a:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    866e:	4221      	tst	r1, r4
    8670:	d113      	bne.n	869a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8672:	b15a      	cbz	r2, 868c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    8674:	2a04      	cmp	r2, #4
    8676:	d00e      	beq.n	8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8678:	2804      	cmp	r0, #4
    867a:	d00c      	beq.n	8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    867c:	2a08      	cmp	r2, #8
    867e:	d00a      	beq.n	8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8680:	2808      	cmp	r0, #8
    8682:	d008      	beq.n	8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8684:	4282      	cmp	r2, r0
    8686:	d908      	bls.n	869a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8688:	2000      	movs	r0, #0
    868a:	bd70      	pop	{r4, r5, r6, pc}
    868c:	f240 118f 	movw	r1, #399	; 0x18f
    8690:	2006      	movs	r0, #6
    8692:	f7fb fb65 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8696:	4282      	cmp	r2, r0
    8698:	d3f6      	bcc.n	8688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    869a:	2001      	movs	r0, #1
    869c:	bd70      	pop	{r4, r5, r6, pc}
    869e:	0000      	.short	0x0000
    86a0:	20000124 	.word	0x20000124
    86a4:	490c      	ldr	r1, [pc, #48]	; (86d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>)
    86a6:	4602      	mov	r2, r0
    86a8:	7848      	ldrb	r0, [r1, #1]
    86aa:	b998      	cbnz	r0, 86d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    86ac:	4608      	mov	r0, r1
    86ae:	6880      	ldr	r0, [r0, #8]
    86b0:	b142      	cbz	r2, 86c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>
    86b2:	7909      	ldrb	r1, [r1, #4]
    86b4:	0709      	lsls	r1, r1, #28
    86b6:	d503      	bpl.n	86c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    86b8:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    86bc:	2808      	cmp	r0, #8
    86be:	d009      	beq.n	86d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    86c0:	2001      	movs	r0, #1
    86c2:	4770      	bx	lr
    86c4:	f100 0128 	add.w	r1, r0, #40	; 0x28
    86c8:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    86ca:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    86cc:	428a      	cmp	r2, r1
    86ce:	d801      	bhi.n	86d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    86d0:	f7fe bd60 	b.w	7194 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    86d4:	2000      	movs	r0, #0
    86d6:	4770      	bx	lr
    86d8:	20000124 	.word	0x20000124
    86dc:	b570      	push	{r4, r5, r6, lr}
    86de:	4c39      	ldr	r4, [pc, #228]	; (87c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x574>)
    86e0:	4605      	mov	r5, r0
    86e2:	68a0      	ldr	r0, [r4, #8]
    86e4:	3070      	adds	r0, #112	; 0x70
    86e6:	f005 fff7 	bl	e6d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    86ea:	2800      	cmp	r0, #0
    86ec:	d169      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    86ee:	2d00      	cmp	r5, #0
    86f0:	d167      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    86f2:	68a0      	ldr	r0, [r4, #8]
    86f4:	2301      	movs	r3, #1
    86f6:	4619      	mov	r1, r3
    86f8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    86fc:	3070      	adds	r0, #112	; 0x70
    86fe:	f004 fea6 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8702:	2800      	cmp	r0, #0
    8704:	d15d      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8706:	68a0      	ldr	r0, [r4, #8]
    8708:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    870c:	b149      	cbz	r1, 8722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d2>
    870e:	2100      	movs	r1, #0
    8710:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8714:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8718:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    871c:	2100      	movs	r1, #0
    871e:	2002      	movs	r0, #2
    8720:	e045      	b.n	87ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8722:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8726:	2301      	movs	r3, #1
    8728:	2104      	movs	r1, #4
    872a:	3070      	adds	r0, #112	; 0x70
    872c:	f004 fe8f 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8730:	4605      	mov	r5, r0
    8732:	f7ff feef 	bl	8514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    8736:	2800      	cmp	r0, #0
    8738:	d143      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    873a:	4628      	mov	r0, r5
    873c:	f7ff feb8 	bl	84b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>
    8740:	2800      	cmp	r0, #0
    8742:	d13e      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8744:	68a0      	ldr	r0, [r4, #8]
    8746:	2301      	movs	r3, #1
    8748:	2100      	movs	r1, #0
    874a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    874e:	3070      	adds	r0, #112	; 0x70
    8750:	f004 fe7d 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8754:	b178      	cbz	r0, 8776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    8756:	68a0      	ldr	r0, [r4, #8]
    8758:	2301      	movs	r3, #1
    875a:	2104      	movs	r1, #4
    875c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8760:	3070      	adds	r0, #112	; 0x70
    8762:	f004 fe74 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8766:	b930      	cbnz	r0, 8776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    8768:	68a0      	ldr	r0, [r4, #8]
    876a:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    876e:	b110      	cbz	r0, 8776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    8770:	2100      	movs	r1, #0
    8772:	2012      	movs	r0, #18
    8774:	e01b      	b.n	87ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8776:	68a0      	ldr	r0, [r4, #8]
    8778:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    877c:	290a      	cmp	r1, #10
    877e:	d01a      	beq.n	87b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x566>
    8780:	2d00      	cmp	r5, #0
    8782:	d11e      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8784:	f000 fb18 	bl	8db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>
    8788:	2800      	cmp	r0, #0
    878a:	d11a      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    878c:	68a0      	ldr	r0, [r4, #8]
    878e:	2301      	movs	r3, #1
    8790:	2100      	movs	r1, #0
    8792:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8796:	3070      	adds	r0, #112	; 0x70
    8798:	f004 fe59 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    879c:	2800      	cmp	r0, #0
    879e:	d010      	beq.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    87a0:	68a0      	ldr	r0, [r4, #8]
    87a2:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    87a6:	2800      	cmp	r0, #0
    87a8:	d00b      	beq.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    87aa:	2100      	movs	r1, #0
    87ac:	20ff      	movs	r0, #255	; 0xff
    87ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87b2:	f000 bba1 	b.w	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    87b6:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    87ba:	7101      	strb	r1, [r0, #4]
    87bc:	2100      	movs	r1, #0
    87be:	2007      	movs	r0, #7
    87c0:	e7f5      	b.n	87ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    87c2:	bd70      	pop	{r4, r5, r6, pc}
    87c4:	20000124 	.word	0x20000124
    87c8:	b510      	push	{r4, lr}
    87ca:	4c0a      	ldr	r4, [pc, #40]	; (87f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a4>)
    87cc:	68a1      	ldr	r1, [r4, #8]
    87ce:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    87d2:	2801      	cmp	r0, #1
    87d4:	d00a      	beq.n	87ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x59c>
    87d6:	8808      	ldrh	r0, [r1, #0]
    87d8:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    87dc:	3128      	adds	r1, #40	; 0x28
    87de:	f005 fa40 	bl	dc62 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    87e2:	78a0      	ldrb	r0, [r4, #2]
    87e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87e8:	f7fb b90a 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    87ec:	2002      	movs	r0, #2
    87ee:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    87f2:	bd10      	pop	{r4, pc}
    87f4:	20000124 	.word	0x20000124
    87f8:	b570      	push	{r4, r5, r6, lr}
    87fa:	4c25      	ldr	r4, [pc, #148]	; (8890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    87fc:	0005      	movs	r5, r0
    87fe:	d12f      	bne.n	8860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    8800:	f000 f8a4 	bl	894c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fc>
    8804:	f000 f848 	bl	8898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x648>
    8808:	0005      	movs	r5, r0
    880a:	d129      	bne.n	8860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    880c:	88a0      	ldrh	r0, [r4, #4]
    880e:	0741      	lsls	r1, r0, #29
    8810:	d506      	bpl.n	8820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    8812:	68a1      	ldr	r1, [r4, #8]
    8814:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    8818:	2907      	cmp	r1, #7
    881a:	d101      	bne.n	8820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    881c:	2101      	movs	r1, #1
    881e:	7021      	strb	r1, [r4, #0]
    8820:	0780      	lsls	r0, r0, #30
    8822:	d512      	bpl.n	884a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    8824:	68e0      	ldr	r0, [r4, #12]
    8826:	78c0      	ldrb	r0, [r0, #3]
    8828:	2819      	cmp	r0, #25
    882a:	d205      	bcs.n	8838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>
    882c:	4919      	ldr	r1, [pc, #100]	; (8894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>)
    882e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8832:	b109      	cbz	r1, 8838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>
    8834:	4788      	blx	r1
    8836:	e008      	b.n	884a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    8838:	28ff      	cmp	r0, #255	; 0xff
    883a:	d004      	beq.n	8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    883c:	f240 713c 	movw	r1, #1852	; 0x73c
    8840:	2031      	movs	r0, #49	; 0x31
    8842:	f7fb fa8d 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8846:	f001 f8cd 	bl	99e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1794>
    884a:	7920      	ldrb	r0, [r4, #4]
    884c:	06c0      	lsls	r0, r0, #27
    884e:	d507      	bpl.n	8860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    8850:	68a0      	ldr	r0, [r4, #8]
    8852:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8856:	290b      	cmp	r1, #11
    8858:	d102      	bne.n	8860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    885a:	210c      	movs	r1, #12
    885c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    8860:	7860      	ldrb	r0, [r4, #1]
    8862:	0700      	lsls	r0, r0, #28
    8864:	d511      	bpl.n	888a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63a>
    8866:	68a0      	ldr	r0, [r4, #8]
    8868:	2301      	movs	r3, #1
    886a:	2105      	movs	r1, #5
    886c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8870:	3070      	adds	r0, #112	; 0x70
    8872:	f004 fdec 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8876:	b128      	cbz	r0, 8884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8878:	68a1      	ldr	r1, [r4, #8]
    887a:	2508      	movs	r5, #8
    887c:	2000      	movs	r0, #0
    887e:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    8882:	e002      	b.n	888a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63a>
    8884:	2000      	movs	r0, #0
    8886:	f7fc fa11 	bl	4cac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    888a:	4628      	mov	r0, r5
    888c:	bd70      	pop	{r4, r5, r6, pc}
    888e:	0000      	.short	0x0000
    8890:	20000124 	.word	0x20000124
    8894:	2000019c 	.word	0x2000019c
    8898:	b570      	push	{r4, r5, r6, lr}
    889a:	4c2a      	ldr	r4, [pc, #168]	; (8944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f4>)
    889c:	2000      	movs	r0, #0
    889e:	7921      	ldrb	r1, [r4, #4]
    88a0:	07c9      	lsls	r1, r1, #31
    88a2:	d015      	beq.n	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    88a4:	6920      	ldr	r0, [r4, #16]
    88a6:	2301      	movs	r3, #1
    88a8:	2105      	movs	r1, #5
    88aa:	78c5      	ldrb	r5, [r0, #3]
    88ac:	68a0      	ldr	r0, [r4, #8]
    88ae:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    88b2:	3070      	adds	r0, #112	; 0x70
    88b4:	f004 fdcb 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88b8:	b158      	cbz	r0, 88d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    88ba:	1ead      	subs	r5, r5, #2
    88bc:	2d0a      	cmp	r5, #10
    88be:	d206      	bcs.n	88ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    88c0:	e8df f005 	tbb	[pc, r5]
    88c4:	05050707 	.word	0x05050707
    88c8:	05050707 	.word	0x05050707
    88cc:	0707      	.short	0x0707
    88ce:	2008      	movs	r0, #8
    88d0:	bd70      	pop	{r4, r5, r6, pc}
    88d2:	6920      	ldr	r0, [r4, #16]
    88d4:	f7fd fa0c 	bl	5cf0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    88d8:	b138      	cbz	r0, 88ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69a>
    88da:	6920      	ldr	r0, [r4, #16]
    88dc:	78c5      	ldrb	r5, [r0, #3]
    88de:	b145      	cbz	r5, 88f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    88e0:	2d01      	cmp	r5, #1
    88e2:	d006      	beq.n	88f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    88e4:	2d16      	cmp	r5, #22
    88e6:	d118      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    88e8:	e003      	b.n	88f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    88ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88ee:	f000 bd0f 	b.w	9310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    88f2:	68a0      	ldr	r0, [r4, #8]
    88f4:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    88f8:	f004 fdf7 	bl	d4ea <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    88fc:	b168      	cbz	r0, 891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    88fe:	68a1      	ldr	r1, [r4, #8]
    8900:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    8904:	281f      	cmp	r0, #31
    8906:	d008      	beq.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    8908:	2820      	cmp	r0, #32
    890a:	d003      	beq.n	8914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c4>
    890c:	2d16      	cmp	r5, #22
    890e:	d00c      	beq.n	892a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    8910:	2002      	movs	r0, #2
    8912:	bd70      	pop	{r4, r5, r6, pc}
    8914:	2026      	movs	r0, #38	; 0x26
    8916:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    891a:	2d19      	cmp	r5, #25
    891c:	d207      	bcs.n	892e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    891e:	480a      	ldr	r0, [pc, #40]	; (8948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f8>)
    8920:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8924:	b118      	cbz	r0, 892e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    8926:	4780      	blx	r0
    8928:	e003      	b.n	8932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    892a:	2020      	movs	r0, #32
    892c:	bd70      	pop	{r4, r5, r6, pc}
    892e:	f000 fcef 	bl	9310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    8932:	68a2      	ldr	r2, [r4, #8]
    8934:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    8938:	1c49      	adds	r1, r1, #1
    893a:	f143 0300 	adc.w	r3, r3, #0
    893e:	e9c2 1300 	strd	r1, r3, [r2]
    8942:	bd70      	pop	{r4, r5, r6, pc}
    8944:	20000124 	.word	0x20000124
    8948:	20000138 	.word	0x20000138
    894c:	b570      	push	{r4, r5, r6, lr}
    894e:	4c22      	ldr	r4, [pc, #136]	; (89d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    8950:	7920      	ldrb	r0, [r4, #4]
    8952:	0700      	lsls	r0, r0, #28
    8954:	d53e      	bpl.n	89d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    8956:	68a0      	ldr	r0, [r4, #8]
    8958:	3070      	adds	r0, #112	; 0x70
    895a:	f005 febd 	bl	e6d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    895e:	b148      	cbz	r0, 8974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x724>
    8960:	68a0      	ldr	r0, [r4, #8]
    8962:	21fe      	movs	r1, #254	; 0xfe
    8964:	2500      	movs	r5, #0
    8966:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    896a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    896e:	2919      	cmp	r1, #25
    8970:	d10c      	bne.n	898c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73c>
    8972:	e004      	b.n	897e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8974:	f240 7146 	movw	r1, #1862	; 0x746
    8978:	2031      	movs	r0, #49	; 0x31
    897a:	f7fb f9f1 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    897e:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    8982:	f7ff fd83 	bl	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    8986:	68a0      	ldr	r0, [r4, #8]
    8988:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    898c:	68a0      	ldr	r0, [r4, #8]
    898e:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8992:	291f      	cmp	r1, #31
    8994:	d002      	beq.n	899c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>
    8996:	2927      	cmp	r1, #39	; 0x27
    8998:	d113      	bne.n	89c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x772>
    899a:	e00b      	b.n	89b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>
    899c:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    89a0:	f004 fda3 	bl	d4ea <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    89a4:	b108      	cbz	r0, 89aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75a>
    89a6:	2026      	movs	r0, #38	; 0x26
    89a8:	e000      	b.n	89ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    89aa:	2020      	movs	r0, #32
    89ac:	68a1      	ldr	r1, [r4, #8]
    89ae:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    89b2:	e006      	b.n	89c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x772>
    89b4:	2101      	movs	r1, #1
    89b6:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    89ba:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    89be:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    89c2:	68a0      	ldr	r0, [r4, #8]
    89c4:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    89c8:	2908      	cmp	r1, #8
    89ca:	d103      	bne.n	89d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    89cc:	2102      	movs	r1, #2
    89ce:	7021      	strb	r1, [r4, #0]
    89d0:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    89d4:	bd70      	pop	{r4, r5, r6, pc}
    89d6:	0000      	.short	0x0000
    89d8:	20000124 	.word	0x20000124
    89dc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    89de:	4605      	mov	r5, r0
    89e0:	4668      	mov	r0, sp
    89e2:	f7fb fff1 	bl	49c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    89e6:	b318      	cbz	r0, 8a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    89e8:	2222      	movs	r2, #34	; 0x22
    89ea:	2100      	movs	r1, #0
    89ec:	9800      	ldr	r0, [sp, #0]
    89ee:	f003 fc34 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    89f2:	2103      	movs	r1, #3
    89f4:	9800      	ldr	r0, [sp, #0]
    89f6:	f005 f805 	bl	da04 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    89fa:	9800      	ldr	r0, [sp, #0]
    89fc:	7801      	ldrb	r1, [r0, #0]
    89fe:	f021 0110 	bic.w	r1, r1, #16
    8a02:	7001      	strb	r1, [r0, #0]
    8a04:	4629      	mov	r1, r5
    8a06:	f7fd f99f 	bl	5d48 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8a0a:	2100      	movs	r1, #0
    8a0c:	4c5e      	ldr	r4, [pc, #376]	; (8b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>)
    8a0e:	f644 162f 	movw	r6, #18735	; 0x492f
    8a12:	2d0e      	cmp	r5, #14
    8a14:	d07e      	beq.n	8b14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    8a16:	dc0e      	bgt.n	8a36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e6>
    8a18:	f1a5 0502 	sub.w	r5, r5, #2
    8a1c:	2d0c      	cmp	r5, #12
    8a1e:	d21c      	bcs.n	8a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    8a20:	e8df f005 	tbb	[pc, r5]
    8a24:	a7451b1e 	.word	0xa7451b1e
    8a28:	511b1ea7 	.word	0x511b1ea7
    8a2c:	3723a71b 	.word	0x3723a71b
    8a30:	f640 116b 	movw	r1, #2411	; 0x96b
    8a34:	e0a3      	b.n	8b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92e>
    8a36:	2d15      	cmp	r5, #21
    8a38:	d058      	beq.n	8aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    8a3a:	dc08      	bgt.n	8a4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fe>
    8a3c:	2d11      	cmp	r5, #17
    8a3e:	d01f      	beq.n	8a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x830>
    8a40:	2d12      	cmp	r5, #18
    8a42:	d01c      	beq.n	8a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x82e>
    8a44:	2d13      	cmp	r5, #19
    8a46:	d01a      	beq.n	8a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x82e>
    8a48:	2d14      	cmp	r5, #20
    8a4a:	d106      	bne.n	8a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    8a4c:	e04e      	b.n	8aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    8a4e:	2d16      	cmp	r5, #22
    8a50:	d023      	beq.n	8a9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    8a52:	2d17      	cmp	r5, #23
    8a54:	d065      	beq.n	8b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    8a56:	2dff      	cmp	r5, #255	; 0xff
    8a58:	d07e      	beq.n	8b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x908>
    8a5a:	f640 11dd 	movw	r1, #2525	; 0x9dd
    8a5e:	e08e      	b.n	8b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92e>
    8a60:	68a1      	ldr	r1, [r4, #8]
    8a62:	9800      	ldr	r0, [sp, #0]
    8a64:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    8a68:	e015      	b.n	8a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x846>
    8a6a:	9800      	ldr	r0, [sp, #0]
    8a6c:	220b      	movs	r2, #11
    8a6e:	7102      	strb	r2, [r0, #4]
    8a70:	2259      	movs	r2, #89	; 0x59
    8a72:	7142      	strb	r2, [r0, #5]
    8a74:	7181      	strb	r1, [r0, #6]
    8a76:	212b      	movs	r1, #43	; 0x2b
    8a78:	71c1      	strb	r1, [r0, #7]
    8a7a:	2112      	movs	r1, #18
    8a7c:	7201      	strb	r1, [r0, #8]
    8a7e:	e078      	b.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8a80:	2103      	movs	r1, #3
    8a82:	9800      	ldr	r0, [sp, #0]
    8a84:	f004 ff9a 	bl	d9bc <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    8a88:	2106      	movs	r1, #6
    8a8a:	9800      	ldr	r0, [sp, #0]
    8a8c:	f004 ff98 	bl	d9c0 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    8a90:	e06f      	b.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8a92:	9800      	ldr	r0, [sp, #0]
    8a94:	2106      	movs	r1, #6
    8a96:	7101      	strb	r1, [r0, #4]
    8a98:	e06b      	b.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8a9a:	9800      	ldr	r0, [sp, #0]
    8a9c:	f8d4 1008 	ldr.w	r1, [r4, #8]
    8aa0:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    8aa4:	7102      	strb	r2, [r0, #4]
    8aa6:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    8aaa:	7141      	strb	r1, [r0, #5]
    8aac:	e061      	b.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8aae:	68a1      	ldr	r1, [r4, #8]
    8ab0:	9800      	ldr	r0, [sp, #0]
    8ab2:	f501 7188 	add.w	r1, r1, #272	; 0x110
    8ab6:	f004 ff96 	bl	d9e6 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    8aba:	68a1      	ldr	r1, [r4, #8]
    8abc:	9800      	ldr	r0, [sp, #0]
    8abe:	31dc      	adds	r1, #220	; 0xdc
    8ac0:	f004 ff8e 	bl	d9e0 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    8ac4:	e055      	b.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8ac6:	9101      	str	r1, [sp, #4]
    8ac8:	9102      	str	r1, [sp, #8]
    8aca:	f001 fe67 	bl	a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8ace:	68a1      	ldr	r1, [r4, #8]
    8ad0:	4030      	ands	r0, r6
    8ad2:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8ad6:	4001      	ands	r1, r0
    8ad8:	f88d 1004 	strb.w	r1, [sp, #4]
    8adc:	0a00      	lsrs	r0, r0, #8
    8ade:	f88d 0005 	strb.w	r0, [sp, #5]
    8ae2:	a901      	add	r1, sp, #4
    8ae4:	9800      	ldr	r0, [sp, #0]
    8ae6:	f004 ff88 	bl	d9fa <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    8aea:	e042      	b.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8aec:	68a0      	ldr	r0, [r4, #8]
    8aee:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8af2:	9800      	ldr	r0, [sp, #0]
    8af4:	f004 ff8e 	bl	da14 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8af8:	68a0      	ldr	r0, [r4, #8]
    8afa:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    8afe:	9800      	ldr	r0, [sp, #0]
    8b00:	f004 ff8c 	bl	da1c <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8b04:	68a0      	ldr	r0, [r4, #8]
    8b06:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    8b0a:	9800      	ldr	r0, [sp, #0]
    8b0c:	f004 ff8a 	bl	da24 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    8b10:	68a0      	ldr	r0, [r4, #8]
    8b12:	e000      	b.n	8b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c6>
    8b14:	e010      	b.n	8b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8e8>
    8b16:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    8b1a:	9800      	ldr	r0, [sp, #0]
    8b1c:	f004 ff86 	bl	da2c <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    8b20:	e027      	b.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8b22:	68a1      	ldr	r1, [r4, #8]
    8b24:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8b28:	2801      	cmp	r0, #1
    8b2a:	9800      	ldr	r0, [sp, #0]
    8b2c:	d0b8      	beq.n	8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x850>
    8b2e:	f811 2f62 	ldrb.w	r2, [r1, #98]!
    8b32:	7102      	strb	r2, [r0, #4]
    8b34:	7849      	ldrb	r1, [r1, #1]
    8b36:	e7b8      	b.n	8aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    8b38:	9101      	str	r1, [sp, #4]
    8b3a:	9102      	str	r1, [sp, #8]
    8b3c:	f001 fe2e 	bl	a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8b40:	68a1      	ldr	r1, [r4, #8]
    8b42:	4030      	ands	r0, r6
    8b44:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8b48:	4001      	ands	r1, r0
    8b4a:	f88d 1004 	strb.w	r1, [sp, #4]
    8b4e:	0a00      	lsrs	r0, r0, #8
    8b50:	f88d 0005 	strb.w	r0, [sp, #5]
    8b54:	a901      	add	r1, sp, #4
    8b56:	e000      	b.n	8b5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90a>
    8b58:	e003      	b.n	8b62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x912>
    8b5a:	9800      	ldr	r0, [sp, #0]
    8b5c:	f004 ff48 	bl	d9f0 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    8b60:	e007      	b.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8b62:	68a0      	ldr	r0, [r4, #8]
    8b64:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    8b68:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    8b6c:	9800      	ldr	r0, [sp, #0]
    8b6e:	f004 ff29 	bl	d9c4 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    8b72:	f7fb ff03 	bl	497c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8b76:	2800      	cmp	r0, #0
    8b78:	d104      	bne.n	8b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x934>
    8b7a:	f640 11e1 	movw	r1, #2529	; 0x9e1
    8b7e:	2031      	movs	r0, #49	; 0x31
    8b80:	f7fb f8ee 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8b86:	0000      	.short	0x0000
    8b88:	20000124 	.word	0x20000124
    8b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b90:	4c88      	ldr	r4, [pc, #544]	; (8db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>)
    8b92:	4682      	mov	sl, r0
    8b94:	4689      	mov	r9, r1
    8b96:	68a0      	ldr	r0, [r4, #8]
    8b98:	8800      	ldrh	r0, [r0, #0]
    8b9a:	f7fb fd07 	bl	45ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8b9e:	0006      	movs	r6, r0
    8ba0:	d00a      	beq.n	8bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    8ba2:	88a0      	ldrh	r0, [r4, #4]
    8ba4:	f04f 0500 	mov.w	r5, #0
    8ba8:	05c0      	lsls	r0, r0, #23
    8baa:	68a0      	ldr	r0, [r4, #8]
    8bac:	d509      	bpl.n	8bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    8bae:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    8bb2:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8bb6:	e008      	b.n	8bca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8bb8:	f640 517d 	movw	r1, #3453	; 0xd7d
    8bbc:	2031      	movs	r0, #49	; 0x31
    8bbe:	f7fb f8cf 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bc2:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    8bc6:	1c49      	adds	r1, r1, #1
    8bc8:	8001      	strh	r1, [r0, #0]
    8bca:	f001 f8a7 	bl	9d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    8bce:	f04f 0801 	mov.w	r8, #1
    8bd2:	b328      	cbz	r0, 8c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8bd4:	88a0      	ldrh	r0, [r4, #4]
    8bd6:	0500      	lsls	r0, r0, #20
    8bd8:	d506      	bpl.n	8be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>
    8bda:	68a0      	ldr	r0, [r4, #8]
    8bdc:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    8be0:	b111      	cbz	r1, 8be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>
    8be2:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8be6:	e01b      	b.n	8c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8be8:	68a0      	ldr	r0, [r4, #8]
    8bea:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    8bee:	1c49      	adds	r1, r1, #1
    8bf0:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    8bf4:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
    8bf8:	428a      	cmp	r2, r1
    8bfa:	d301      	bcc.n	8c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b0>
    8bfc:	1a53      	subs	r3, r2, r1
    8bfe:	e000      	b.n	8c02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    8c00:	2300      	movs	r3, #0
    8c02:	88e7      	ldrh	r7, [r4, #6]
    8c04:	1d7f      	adds	r7, r7, #5
    8c06:	42bb      	cmp	r3, r7
    8c08:	d801      	bhi.n	8c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9be>
    8c0a:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    8c0e:	4291      	cmp	r1, r2
    8c10:	d306      	bcc.n	8c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8c12:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8c16:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    8c1a:	78a0      	ldrb	r0, [r4, #2]
    8c1c:	f7fa fef0 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8c20:	88a0      	ldrh	r0, [r4, #4]
    8c22:	f04f 0702 	mov.w	r7, #2
    8c26:	f410 7f40 	tst.w	r0, #768	; 0x300
    8c2a:	d00e      	beq.n	8c4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fa>
    8c2c:	68a0      	ldr	r0, [r4, #8]
    8c2e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8c32:	b111      	cbz	r1, 8c3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ea>
    8c34:	2903      	cmp	r1, #3
    8c36:	d108      	bne.n	8c4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fa>
    8c38:	e002      	b.n	8c40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f0>
    8c3a:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    8c3e:	e001      	b.n	8c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8c40:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8c44:	2101      	movs	r1, #1
    8c46:	f7fe fac7 	bl	71d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8c4a:	68a0      	ldr	r0, [r4, #8]
    8c4c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8c50:	2901      	cmp	r1, #1
    8c52:	d104      	bne.n	8c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8c54:	88a1      	ldrh	r1, [r4, #4]
    8c56:	0549      	lsls	r1, r1, #21
    8c58:	d501      	bpl.n	8c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8c5a:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8c5e:	f1ba 0f00 	cmp.w	sl, #0
    8c62:	d175      	bne.n	8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb00>
    8c64:	7921      	ldrb	r1, [r4, #4]
    8c66:	0649      	lsls	r1, r1, #25
    8c68:	d502      	bpl.n	8c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    8c6a:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    8c6e:	e004      	b.n	8c7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    8c70:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    8c74:	1c49      	adds	r1, r1, #1
    8c76:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    8c7a:	4648      	mov	r0, r9
    8c7c:	f7ff fdbc 	bl	87f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    8c80:	ea40 0009 	orr.w	r0, r0, r9
    8c84:	4681      	mov	r9, r0
    8c86:	f7ff fd29 	bl	86dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    8c8a:	68a7      	ldr	r7, [r4, #8]
    8c8c:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    8c90:	1c40      	adds	r0, r0, #1
    8c92:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8c96:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    8c9a:	b128      	cbz	r0, 8ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    8c9c:	f7fc f874 	bl	4d88 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8ca0:	b1a8      	cbz	r0, 8cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8ca2:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    8ca6:	e012      	b.n	8cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8ca8:	f7fb ff10 	bl	4acc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8cac:	b108      	cbz	r0, 8cb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    8cae:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    8cb2:	f7fb ff05 	bl	4ac0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8cb6:	b150      	cbz	r0, 8cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8cb8:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    8cbc:	1c40      	adds	r0, r0, #1
    8cbe:	b2c0      	uxtb	r0, r0
    8cc0:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    8cc4:	2802      	cmp	r0, #2
    8cc6:	d902      	bls.n	8cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8cc8:	f827 5ff8 	strh.w	r5, [r7, #248]!
    8ccc:	733d      	strb	r5, [r7, #12]
    8cce:	68a0      	ldr	r0, [r4, #8]
    8cd0:	2301      	movs	r3, #1
    8cd2:	2100      	movs	r1, #0
    8cd4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8cd8:	3070      	adds	r0, #112	; 0x70
    8cda:	f004 fbb8 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cde:	b920      	cbnz	r0, 8cea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa9a>
    8ce0:	68a0      	ldr	r0, [r4, #8]
    8ce2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8ce6:	280c      	cmp	r0, #12
    8ce8:	d149      	bne.n	8d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8cea:	68a0      	ldr	r0, [r4, #8]
    8cec:	2301      	movs	r3, #1
    8cee:	2100      	movs	r1, #0
    8cf0:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8cf4:	3070      	adds	r0, #112	; 0x70
    8cf6:	f004 fbaa 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cfa:	b350      	cbz	r0, 8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8cfc:	68a0      	ldr	r0, [r4, #8]
    8cfe:	2301      	movs	r3, #1
    8d00:	2100      	movs	r1, #0
    8d02:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8d06:	3070      	adds	r0, #112	; 0x70
    8d08:	f004 fba1 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d0c:	b308      	cbz	r0, 8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8d0e:	68a0      	ldr	r0, [r4, #8]
    8d10:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8d14:	2902      	cmp	r1, #2
    8d16:	d132      	bne.n	8d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8d18:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    8d1c:	b9c8      	cbnz	r0, 8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8d1e:	4630      	mov	r0, r6
    8d20:	f003 ff79 	bl	cc16 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8d24:	b1a8      	cbz	r0, 8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8d26:	68a0      	ldr	r0, [r4, #8]
    8d28:	3070      	adds	r0, #112	; 0x70
    8d2a:	f005 fcd5 	bl	e6d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8d2e:	b980      	cbnz	r0, 8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8d30:	68a2      	ldr	r2, [r4, #8]
    8d32:	f8b2 00f2 	ldrh.w	r0, [r2, #242]	; 0xf2
    8d36:	2801      	cmp	r0, #1
    8d38:	d921      	bls.n	8d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8d3a:	f882 80fa 	strb.w	r8, [r2, #250]	; 0xfa
    8d3e:	f8b2 109e 	ldrh.w	r1, [r2, #158]	; 0x9e
    8d42:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    8d46:	1e8b      	subs	r3, r1, #2
    8d48:	4298      	cmp	r0, r3
    8d4a:	db03      	blt.n	8d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    8d4c:	2001      	movs	r0, #1
    8d4e:	e004      	b.n	8d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    8d50:	e021      	b.n	8d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb46>
    8d52:	e014      	b.n	8d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8d54:	1a08      	subs	r0, r1, r0
    8d56:	1e40      	subs	r0, r0, #1
    8d58:	b280      	uxth	r0, r0
    8d5a:	f8b2 10f8 	ldrh.w	r1, [r2, #248]	; 0xf8
    8d5e:	88e3      	ldrh	r3, [r4, #6]
    8d60:	4299      	cmp	r1, r3
    8d62:	d301      	bcc.n	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    8d64:	2101      	movs	r1, #1
    8d66:	e002      	b.n	8d6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb1e>
    8d68:	1a59      	subs	r1, r3, r1
    8d6a:	1c49      	adds	r1, r1, #1
    8d6c:	b289      	uxth	r1, r1
    8d6e:	4288      	cmp	r0, r1
    8d70:	d900      	bls.n	8d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb24>
    8d72:	4608      	mov	r0, r1
    8d74:	2801      	cmp	r0, #1
    8d76:	d106      	bne.n	8d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb36>
    8d78:	f882 50fa 	strb.w	r5, [r2, #250]	; 0xfa
    8d7c:	e003      	b.n	8d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb36>
    8d7e:	68a1      	ldr	r1, [r4, #8]
    8d80:	2001      	movs	r0, #1
    8d82:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    8d86:	68a1      	ldr	r1, [r4, #8]
    8d88:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    8d8c:	4410      	add	r0, r2
    8d8e:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    8d92:	f001 f883 	bl	9e9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c4c>
    8d96:	7920      	ldrb	r0, [r4, #4]
    8d98:	464a      	mov	r2, r9
    8d9a:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8d9e:	4650      	mov	r0, sl
    8da0:	f000 ffd0 	bl	9d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    8da4:	68a0      	ldr	r0, [r4, #8]
    8da6:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    8daa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8dae:	f7fb bdcf 	b.w	4950 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8db2:	0000      	.short	0x0000
    8db4:	20000124 	.word	0x20000124
    8db8:	b570      	push	{r4, r5, r6, lr}
    8dba:	4c4e      	ldr	r4, [pc, #312]	; (8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca4>)
    8dbc:	2301      	movs	r3, #1
    8dbe:	2100      	movs	r1, #0
    8dc0:	68a0      	ldr	r0, [r4, #8]
    8dc2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8dc6:	3070      	adds	r0, #112	; 0x70
    8dc8:	f004 fb41 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dcc:	2800      	cmp	r0, #0
    8dce:	d076      	beq.n	8ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6e>
    8dd0:	68a0      	ldr	r0, [r4, #8]
    8dd2:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    8dd6:	2500      	movs	r5, #0
    8dd8:	b139      	cbz	r1, 8dea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9a>
    8dda:	2100      	movs	r1, #0
    8ddc:	200e      	movs	r0, #14
    8dde:	f000 f88b 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8de2:	68a0      	ldr	r0, [r4, #8]
    8de4:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    8de8:	e082      	b.n	8ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8dea:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    8dee:	b119      	cbz	r1, 8df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    8df0:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    8df4:	0789      	lsls	r1, r1, #30
    8df6:	d00a      	beq.n	8e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbe>
    8df8:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8dfc:	b111      	cbz	r1, 8e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb4>
    8dfe:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8e02:	b189      	cbz	r1, 8e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd8>
    8e04:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8e08:	2901      	cmp	r1, #1
    8e0a:	d02f      	beq.n	8e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc1c>
    8e0c:	e06a      	b.n	8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8e0e:	2100      	movs	r1, #0
    8e10:	200c      	movs	r0, #12
    8e12:	f000 f871 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8e16:	68a0      	ldr	r0, [r4, #8]
    8e18:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8e1c:	f041 0101 	orr.w	r1, r1, #1
    8e20:	7001      	strb	r1, [r0, #0]
    8e22:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8e26:	e063      	b.n	8ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8e28:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e2c:	2924      	cmp	r1, #36	; 0x24
    8e2e:	d01b      	beq.n	8e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    8e30:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8e34:	2924      	cmp	r1, #36	; 0x24
    8e36:	d017      	beq.n	8e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    8e38:	f05f 0300 	movs.w	r3, #0
    8e3c:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8e40:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8e44:	f004 ff31 	bl	dcaa <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8e48:	68a0      	ldr	r0, [r4, #8]
    8e4a:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    8e4e:	2100      	movs	r1, #0
    8e50:	2014      	movs	r0, #20
    8e52:	f000 f851 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8e56:	68a1      	ldr	r1, [r4, #8]
    8e58:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8e5c:	8bc2      	ldrh	r2, [r0, #30]
    8e5e:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8e62:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8e64:	8048      	strh	r0, [r1, #2]
    8e66:	e043      	b.n	8ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8e68:	2301      	movs	r3, #1
    8e6a:	e7e7      	b.n	8e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbec>
    8e6c:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    8e70:	bb21      	cbnz	r1, 8ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8e72:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8e76:	2301      	movs	r3, #1
    8e78:	210b      	movs	r1, #11
    8e7a:	3070      	adds	r0, #112	; 0x70
    8e7c:	f004 fae7 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e80:	b9e0      	cbnz	r0, 8ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8e82:	68a0      	ldr	r0, [r4, #8]
    8e84:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    8e88:	f005 fc2e 	bl	e6e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8e8c:	4605      	mov	r5, r0
    8e8e:	68a0      	ldr	r0, [r4, #8]
    8e90:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8e94:	f005 fc28 	bl	e6e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8e98:	4606      	mov	r6, r0
    8e9a:	68a0      	ldr	r0, [r4, #8]
    8e9c:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    8ea0:	4628      	mov	r0, r5
    8ea2:	f005 fc2c 	bl	e6fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8ea6:	b158      	cbz	r0, 8ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    8ea8:	68a0      	ldr	r0, [r4, #8]
    8eaa:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    8eae:	4630      	mov	r0, r6
    8eb0:	f005 fc25 	bl	e6fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8eb4:	b120      	cbz	r0, 8ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    8eb6:	2000      	movs	r0, #0
    8eb8:	f000 f900 	bl	90bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8ebc:	e012      	b.n	8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8ebe:	e012      	b.n	8ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc96>
    8ec0:	68a0      	ldr	r0, [r4, #8]
    8ec2:	2301      	movs	r3, #1
    8ec4:	2103      	movs	r1, #3
    8ec6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8eca:	3070      	adds	r0, #112	; 0x70
    8ecc:	f004 fabf 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ed0:	b940      	cbnz	r0, 8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8ed2:	68a0      	ldr	r0, [r4, #8]
    8ed4:	2301      	movs	r3, #1
    8ed6:	2102      	movs	r1, #2
    8ed8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8edc:	3070      	adds	r0, #112	; 0x70
    8ede:	f004 fab6 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ee2:	b108      	cbz	r0, 8ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    8ee4:	2000      	movs	r0, #0
    8ee6:	bd70      	pop	{r4, r5, r6, pc}
    8ee8:	2100      	movs	r1, #0
    8eea:	2016      	movs	r0, #22
    8eec:	f000 f804 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8ef0:	2001      	movs	r0, #1
    8ef2:	bd70      	pop	{r4, r5, r6, pc}
    8ef4:	20000124 	.word	0x20000124
    8ef8:	b570      	push	{r4, r5, r6, lr}
    8efa:	4c0d      	ldr	r4, [pc, #52]	; (8f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>)
    8efc:	4606      	mov	r6, r0
    8efe:	460d      	mov	r5, r1
    8f00:	68a0      	ldr	r0, [r4, #8]
    8f02:	3070      	adds	r0, #112	; 0x70
    8f04:	f005 fbe8 	bl	e6d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8f08:	b120      	cbz	r0, 8f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc4>
    8f0a:	f640 11f4 	movw	r1, #2548	; 0x9f4
    8f0e:	2031      	movs	r0, #49	; 0x31
    8f10:	f7fa ff26 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f14:	68a2      	ldr	r2, [r4, #8]
    8f16:	2000      	movs	r0, #0
    8f18:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    8f1c:	b115      	cbz	r5, 8f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    8f1e:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    8f22:	bd70      	pop	{r4, r5, r6, pc}
    8f24:	f822 0fa2 	strh.w	r0, [r2, #162]!
    8f28:	2001      	movs	r0, #1
    8f2a:	7110      	strb	r0, [r2, #4]
    8f2c:	bd70      	pop	{r4, r5, r6, pc}
    8f2e:	0000      	.short	0x0000
    8f30:	20000124 	.word	0x20000124
    8f34:	b570      	push	{r4, r5, r6, lr}
    8f36:	4c18      	ldr	r4, [pc, #96]	; (8f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    8f38:	2500      	movs	r5, #0
    8f3a:	68a0      	ldr	r0, [r4, #8]
    8f3c:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    8f40:	2901      	cmp	r1, #1
    8f42:	d00a      	beq.n	8f5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0a>
    8f44:	2902      	cmp	r1, #2
    8f46:	d125      	bne.n	8f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    8f48:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    8f4c:	b1a9      	cbz	r1, 8f7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2a>
    8f4e:	2106      	movs	r1, #6
    8f50:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8f54:	2101      	movs	r1, #1
    8f56:	2002      	movs	r0, #2
    8f58:	e017      	b.n	8f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    8f5a:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    8f5e:	2900      	cmp	r1, #0
    8f60:	d118      	bne.n	8f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    8f62:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    8f66:	f500 7184 	add.w	r1, r0, #264	; 0x108
    8f6a:	2200      	movs	r2, #0
    8f6c:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    8f70:	f004 fa25 	bl	d3be <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8f74:	2101      	movs	r1, #1
    8f76:	2005      	movs	r0, #5
    8f78:	e007      	b.n	8f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    8f7a:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8f7e:	0740      	lsls	r0, r0, #29
    8f80:	d501      	bpl.n	8f86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    8f82:	2011      	movs	r0, #17
    8f84:	e000      	b.n	8f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    8f86:	200d      	movs	r0, #13
    8f88:	2101      	movs	r1, #1
    8f8a:	f7ff ffb5 	bl	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8f8e:	68a0      	ldr	r0, [r4, #8]
    8f90:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    8f94:	bd70      	pop	{r4, r5, r6, pc}
    8f96:	0000      	.short	0x0000
    8f98:	20000124 	.word	0x20000124
    8f9c:	b570      	push	{r4, r5, r6, lr}
    8f9e:	4a2b      	ldr	r2, [pc, #172]	; (904c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfc>)
    8fa0:	4603      	mov	r3, r0
    8fa2:	8890      	ldrh	r0, [r2, #4]
    8fa4:	4318      	orrs	r0, r3
    8fa6:	8090      	strh	r0, [r2, #4]
    8fa8:	4610      	mov	r0, r2
    8faa:	2b40      	cmp	r3, #64	; 0x40
    8fac:	6880      	ldr	r0, [r0, #8]
    8fae:	d00d      	beq.n	8fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7c>
    8fb0:	079e      	lsls	r6, r3, #30
    8fb2:	f04f 0500 	mov.w	r5, #0
    8fb6:	f04f 0401 	mov.w	r4, #1
    8fba:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8fbe:	d50c      	bpl.n	8fda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8a>
    8fc0:	b14e      	cbz	r6, 8fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd86>
    8fc2:	f44f 614f 	mov.w	r1, #3312	; 0xcf0
    8fc6:	2031      	movs	r0, #49	; 0x31
    8fc8:	f7fa feca 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fd0:	2104      	movs	r1, #4
    8fd2:	f7fe b901 	b.w	71d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8fd6:	60d1      	str	r1, [r2, #12]
    8fd8:	e01c      	b.n	9014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    8fda:	b1c6      	cbz	r6, 900e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8fdc:	6111      	str	r1, [r2, #16]
    8fde:	78c9      	ldrb	r1, [r1, #3]
    8fe0:	2906      	cmp	r1, #6
    8fe2:	d002      	beq.n	8fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9a>
    8fe4:	290b      	cmp	r1, #11
    8fe6:	d112      	bne.n	900e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8fe8:	e009      	b.n	8ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    8fea:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8fee:	2917      	cmp	r1, #23
    8ff0:	d10d      	bne.n	900e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8ff2:	2100      	movs	r1, #0
    8ff4:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    8ff8:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    8ffc:	e007      	b.n	900e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8ffe:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9002:	2911      	cmp	r1, #17
    9004:	d103      	bne.n	900e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    9006:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    900a:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    900e:	0799      	lsls	r1, r3, #30
    9010:	d516      	bpl.n	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9012:	68d1      	ldr	r1, [r2, #12]
    9014:	78c9      	ldrb	r1, [r1, #3]
    9016:	2905      	cmp	r1, #5
    9018:	d002      	beq.n	9020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    901a:	290b      	cmp	r1, #11
    901c:	d110      	bne.n	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    901e:	e009      	b.n	9034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde4>
    9020:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9024:	2915      	cmp	r1, #21
    9026:	d10b      	bne.n	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9028:	2100      	movs	r1, #0
    902a:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    902e:	f800 4c3d 	strb.w	r4, [r0, #-61]
    9032:	e005      	b.n	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9034:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9038:	2910      	cmp	r1, #16
    903a:	d101      	bne.n	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    903c:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    9040:	0698      	lsls	r0, r3, #26
    9042:	d501      	bpl.n	9048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    9044:	2008      	movs	r0, #8
    9046:	7050      	strb	r0, [r2, #1]
    9048:	bd70      	pop	{r4, r5, r6, pc}
    904a:	0000      	.short	0x0000
    904c:	20000124 	.word	0x20000124
    9050:	b570      	push	{r4, r5, r6, lr}
    9052:	4c19      	ldr	r4, [pc, #100]	; (90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>)
    9054:	68a0      	ldr	r0, [r4, #8]
    9056:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    905a:	b109      	cbz	r1, 9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    905c:	2601      	movs	r6, #1
    905e:	e000      	b.n	9062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    9060:	2600      	movs	r6, #0
    9062:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    9066:	b10a      	cbz	r2, 906c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1c>
    9068:	2501      	movs	r5, #1
    906a:	e000      	b.n	906e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    906c:	2500      	movs	r5, #0
    906e:	b90e      	cbnz	r6, 9074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    9070:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    9074:	b90d      	cbnz	r5, 907a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2a>
    9076:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    907a:	f100 035e 	add.w	r3, r0, #94	; 0x5e
    907e:	7219      	strb	r1, [r3, #8]
    9080:	725a      	strb	r2, [r3, #9]
    9082:	2101      	movs	r1, #1
    9084:	7299      	strb	r1, [r3, #10]
    9086:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    908a:	2801      	cmp	r0, #1
    908c:	d001      	beq.n	9092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    908e:	b906      	cbnz	r6, 9092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    9090:	b115      	cbz	r5, 9098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    9092:	2000      	movs	r0, #0
    9094:	f000 f812 	bl	90bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9098:	68a0      	ldr	r0, [r4, #8]
    909a:	f004 fe21 	bl	dce0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    909e:	2800      	cmp	r0, #0
    90a0:	d008      	beq.n	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    90a2:	68a1      	ldr	r1, [r4, #8]
    90a4:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    90a8:	8808      	ldrh	r0, [r1, #0]
    90aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90ae:	3128      	adds	r1, #40	; 0x28
    90b0:	f004 bdd7 	b.w	dc62 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    90b4:	bd70      	pop	{r4, r5, r6, pc}
    90b6:	0000      	.short	0x0000
    90b8:	20000124 	.word	0x20000124
    90bc:	b510      	push	{r4, lr}
    90be:	4c10      	ldr	r4, [pc, #64]	; (9100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb0>)
    90c0:	68a1      	ldr	r1, [r4, #8]
    90c2:	880a      	ldrh	r2, [r1, #0]
    90c4:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    90c8:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    90cc:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    90d0:	f005 fb0a 	bl	e6e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    90d4:	68a1      	ldr	r1, [r4, #8]
    90d6:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    90da:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    90de:	f005 fb03 	bl	e6e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    90e2:	68a2      	ldr	r2, [r4, #8]
    90e4:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    90e8:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    90ec:	2001      	movs	r0, #1
    90ee:	7008      	strb	r0, [r1, #0]
    90f0:	2000      	movs	r0, #0
    90f2:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    90f6:	78a0      	ldrb	r0, [r4, #2]
    90f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90fc:	f7fa bc80 	b.w	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9100:	20000124 	.word	0x20000124
    9104:	b510      	push	{r4, lr}
    9106:	4c15      	ldr	r4, [pc, #84]	; (915c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>)
    9108:	2301      	movs	r3, #1
    910a:	2100      	movs	r1, #0
    910c:	68a0      	ldr	r0, [r4, #8]
    910e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9112:	3070      	adds	r0, #112	; 0x70
    9114:	f004 f99b 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9118:	b190      	cbz	r0, 9140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef0>
    911a:	6920      	ldr	r0, [r4, #16]
    911c:	f004 fbeb 	bl	d8f6 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9120:	68a1      	ldr	r1, [r4, #8]
    9122:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9126:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    912a:	f005 faf6 	bl	e71a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    912e:	b148      	cbz	r0, 9144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    9130:	68a0      	ldr	r0, [r4, #8]
    9132:	2128      	movs	r1, #40	; 0x28
    9134:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9138:	306f      	adds	r0, #111	; 0x6f
    913a:	2101      	movs	r1, #1
    913c:	7781      	strb	r1, [r0, #30]
    913e:	e00b      	b.n	9158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    9140:	2001      	movs	r0, #1
    9142:	bd10      	pop	{r4, pc}
    9144:	68a1      	ldr	r1, [r4, #8]
    9146:	6920      	ldr	r0, [r4, #16]
    9148:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    914c:	f004 fbce 	bl	d8ec <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9150:	68a1      	ldr	r1, [r4, #8]
    9152:	200b      	movs	r0, #11
    9154:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9158:	2000      	movs	r0, #0
    915a:	bd10      	pop	{r4, pc}
    915c:	20000124 	.word	0x20000124
    9160:	b570      	push	{r4, r5, r6, lr}
    9162:	4c29      	ldr	r4, [pc, #164]	; (9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb8>)
    9164:	2301      	movs	r3, #1
    9166:	2100      	movs	r1, #0
    9168:	68a0      	ldr	r0, [r4, #8]
    916a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    916e:	3070      	adds	r0, #112	; 0x70
    9170:	f004 f96d 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9174:	b1b8      	cbz	r0, 91a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf56>
    9176:	2100      	movs	r1, #0
    9178:	6920      	ldr	r0, [r4, #16]
    917a:	f004 fb8f 	bl	d89c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    917e:	b1a0      	cbz	r0, 91aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    9180:	6920      	ldr	r0, [r4, #16]
    9182:	68a1      	ldr	r1, [r4, #8]
    9184:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9188:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    918c:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9190:	f005 fac3 	bl	e71a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9194:	b168      	cbz	r0, 91b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf62>
    9196:	68a0      	ldr	r0, [r4, #8]
    9198:	2128      	movs	r1, #40	; 0x28
    919a:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    919e:	306f      	adds	r0, #111	; 0x6f
    91a0:	2101      	movs	r1, #1
    91a2:	7781      	strb	r1, [r0, #30]
    91a4:	e02e      	b.n	9204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb4>
    91a6:	2001      	movs	r0, #1
    91a8:	bd70      	pop	{r4, r5, r6, pc}
    91aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    91ae:	f000 b8af 	b.w	9310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    91b2:	6920      	ldr	r0, [r4, #16]
    91b4:	f004 fba2 	bl	d8fc <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    91b8:	f004 f92c 	bl	d414 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    91bc:	4605      	mov	r5, r0
    91be:	68a0      	ldr	r0, [r4, #8]
    91c0:	4629      	mov	r1, r5
    91c2:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    91c6:	6920      	ldr	r0, [r4, #16]
    91c8:	7900      	ldrb	r0, [r0, #4]
    91ca:	f004 fac0 	bl	d74e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    91ce:	68a1      	ldr	r1, [r4, #8]
    91d0:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    91d4:	6920      	ldr	r0, [r4, #16]
    91d6:	4629      	mov	r1, r5
    91d8:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    91dc:	f004 fab3 	bl	d746 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    91e0:	68a1      	ldr	r1, [r4, #8]
    91e2:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    91e6:	6920      	ldr	r0, [r4, #16]
    91e8:	f004 fb8b 	bl	d902 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    91ec:	68a1      	ldr	r1, [r4, #8]
    91ee:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    91f2:	6920      	ldr	r0, [r4, #16]
    91f4:	f004 fb88 	bl	d908 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    91f8:	68a1      	ldr	r1, [r4, #8]
    91fa:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    91fe:	200d      	movs	r0, #13
    9200:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9204:	2000      	movs	r0, #0
    9206:	bd70      	pop	{r4, r5, r6, pc}
    9208:	20000124 	.word	0x20000124
    920c:	b538      	push	{r3, r4, r5, lr}
    920e:	4c2a      	ldr	r4, [pc, #168]	; (92b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1068>)
    9210:	2301      	movs	r3, #1
    9212:	2100      	movs	r1, #0
    9214:	68a0      	ldr	r0, [r4, #8]
    9216:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    921a:	3070      	adds	r0, #112	; 0x70
    921c:	f004 f917 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9220:	b970      	cbnz	r0, 9240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9222:	68a0      	ldr	r0, [r4, #8]
    9224:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9228:	2a12      	cmp	r2, #18
    922a:	d009      	beq.n	9240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    922c:	2301      	movs	r3, #1
    922e:	2105      	movs	r1, #5
    9230:	3070      	adds	r0, #112	; 0x70
    9232:	f004 f90c 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9236:	b108      	cbz	r0, 923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    9238:	2008      	movs	r0, #8
    923a:	bd38      	pop	{r3, r4, r5, pc}
    923c:	2001      	movs	r0, #1
    923e:	bd38      	pop	{r3, r4, r5, pc}
    9240:	68a0      	ldr	r0, [r4, #8]
    9242:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9246:	b908      	cbnz	r0, 924c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xffc>
    9248:	f7ff f914 	bl	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    924c:	68a1      	ldr	r1, [r4, #8]
    924e:	6920      	ldr	r0, [r4, #16]
    9250:	f501 7184 	add.w	r1, r1, #264	; 0x108
    9254:	f004 fb67 	bl	d926 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9258:	68a1      	ldr	r1, [r4, #8]
    925a:	6920      	ldr	r0, [r4, #16]
    925c:	31d8      	adds	r1, #216	; 0xd8
    925e:	f004 fb59 	bl	d914 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9262:	68a1      	ldr	r1, [r4, #8]
    9264:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    9268:	f88d 0000 	strb.w	r0, [sp]
    926c:	9800      	ldr	r0, [sp, #0]
    926e:	9000      	str	r0, [sp, #0]
    9270:	f89d 0000 	ldrb.w	r0, [sp]
    9274:	b120      	cbz	r0, 9280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1030>
    9276:	f240 219d 	movw	r1, #669	; 0x29d
    927a:	2031      	movs	r0, #49	; 0x31
    927c:	f7fa fd70 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9280:	8808      	ldrh	r0, [r1, #0]
    9282:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    9286:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    928a:	6920      	ldr	r0, [r4, #16]
    928c:	f004 fb46 	bl	d91c <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9290:	68a1      	ldr	r1, [r4, #8]
    9292:	6920      	ldr	r0, [r4, #16]
    9294:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9298:	f004 fb39 	bl	d90e <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    929c:	68a0      	ldr	r0, [r4, #8]
    929e:	4601      	mov	r1, r0
    92a0:	2201      	movs	r2, #1
    92a2:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    92a6:	2014      	movs	r0, #20
    92a8:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    92ac:	78a0      	ldrb	r0, [r4, #2]
    92ae:	f7fa fba7 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    92b2:	2000      	movs	r0, #0
    92b4:	bd38      	pop	{r3, r4, r5, pc}
    92b6:	0000      	.short	0x0000
    92b8:	20000124 	.word	0x20000124
    92bc:	b51c      	push	{r2, r3, r4, lr}
    92be:	4c13      	ldr	r4, [pc, #76]	; (930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>)
    92c0:	68a0      	ldr	r0, [r4, #8]
    92c2:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    92c6:	07c0      	lsls	r0, r0, #31
    92c8:	d001      	beq.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    92ca:	2001      	movs	r0, #1
    92cc:	bd1c      	pop	{r2, r3, r4, pc}
    92ce:	4669      	mov	r1, sp
    92d0:	6920      	ldr	r0, [r4, #16]
    92d2:	f004 fb2e 	bl	d932 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    92d6:	f001 fa61 	bl	a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    92da:	f644 112f 	movw	r1, #18735	; 0x492f
    92de:	4008      	ands	r0, r1
    92e0:	f89d 2000 	ldrb.w	r2, [sp]
    92e4:	68a1      	ldr	r1, [r4, #8]
    92e6:	4002      	ands	r2, r0
    92e8:	f801 2fb4 	strb.w	r2, [r1, #180]!
    92ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
    92f0:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    92f4:	7048      	strb	r0, [r1, #1]
    92f6:	f7ff f8bd 	bl	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    92fa:	68a0      	ldr	r0, [r4, #8]
    92fc:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9300:	f041 0101 	orr.w	r1, r1, #1
    9304:	7001      	strb	r1, [r0, #0]
    9306:	2000      	movs	r0, #0
    9308:	bd1c      	pop	{r2, r3, r4, pc}
    930a:	0000      	.short	0x0000
    930c:	20000124 	.word	0x20000124
    9310:	4a0a      	ldr	r2, [pc, #40]	; (933c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>)
    9312:	b510      	push	{r4, lr}
    9314:	6890      	ldr	r0, [r2, #8]
    9316:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    931a:	070b      	lsls	r3, r1, #28
    931c:	d501      	bpl.n	9322 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d2>
    931e:	2001      	movs	r0, #1
    9320:	bd10      	pop	{r4, pc}
    9322:	f041 0108 	orr.w	r1, r1, #8
    9326:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    932a:	6911      	ldr	r1, [r2, #16]
    932c:	78c9      	ldrb	r1, [r1, #3]
    932e:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    9332:	f7ff f89f 	bl	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9336:	2000      	movs	r0, #0
    9338:	bd10      	pop	{r4, pc}
    933a:	0000      	.short	0x0000
    933c:	20000124 	.word	0x20000124
    9340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9342:	4c2f      	ldr	r4, [pc, #188]	; (9400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11b0>)
    9344:	68a0      	ldr	r0, [r4, #8]
    9346:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    934a:	f010 0f30 	tst.w	r0, #48	; 0x30
    934e:	d001      	beq.n	9354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    9350:	2001      	movs	r0, #1
    9352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9354:	6920      	ldr	r0, [r4, #16]
    9356:	f004 fb07 	bl	d968 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    935a:	b350      	cbz	r0, 93b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1162>
    935c:	6920      	ldr	r0, [r4, #16]
    935e:	f004 faf5 	bl	d94c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9362:	4607      	mov	r7, r0
    9364:	6920      	ldr	r0, [r4, #16]
    9366:	f004 faf5 	bl	d954 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    936a:	4606      	mov	r6, r0
    936c:	6920      	ldr	r0, [r4, #16]
    936e:	f004 faeb 	bl	d948 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9372:	4605      	mov	r5, r0
    9374:	6920      	ldr	r0, [r4, #16]
    9376:	f004 faeb 	bl	d950 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    937a:	4601      	mov	r1, r0
    937c:	9700      	str	r7, [sp, #0]
    937e:	68a0      	ldr	r0, [r4, #8]
    9380:	4633      	mov	r3, r6
    9382:	462a      	mov	r2, r5
    9384:	3028      	adds	r0, #40	; 0x28
    9386:	f004 fd35 	bl	ddf4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    938a:	7920      	ldrb	r0, [r4, #4]
    938c:	0780      	lsls	r0, r0, #30
    938e:	d503      	bpl.n	9398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>
    9390:	68e0      	ldr	r0, [r4, #12]
    9392:	78c0      	ldrb	r0, [r0, #3]
    9394:	2814      	cmp	r0, #20
    9396:	d010      	beq.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116a>
    9398:	68a1      	ldr	r1, [r4, #8]
    939a:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    939e:	281c      	cmp	r0, #28
    93a0:	d00b      	beq.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116a>
    93a2:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    93a6:	2801      	cmp	r0, #1
    93a8:	d00f      	beq.n	93ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    93aa:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    93ae:	b960      	cbnz	r0, 93ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    93b0:	e008      	b.n	93c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    93b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    93b6:	f7ff bfab 	b.w	9310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    93ba:	68a1      	ldr	r1, [r4, #8]
    93bc:	2001      	movs	r0, #1
    93be:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    93c2:	e002      	b.n	93ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    93c4:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    93c8:	b130      	cbz	r0, 93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1188>
    93ca:	68a0      	ldr	r0, [r4, #8]
    93cc:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    93d0:	f041 0110 	orr.w	r1, r1, #16
    93d4:	7001      	strb	r1, [r0, #0]
    93d6:	e00e      	b.n	93f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a6>
    93d8:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    93dc:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    93e0:	f040 0020 	orr.w	r0, r0, #32
    93e4:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    93e8:	f831 0b28 	ldrh.w	r0, [r1], #40
    93ec:	f004 fd09 	bl	de02 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    93f0:	78a0      	ldrb	r0, [r4, #2]
    93f2:	f7fa fb05 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    93f6:	f7ff f83d 	bl	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    93fa:	2000      	movs	r0, #0
    93fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93fe:	0000      	.short	0x0000
    9400:	20000124 	.word	0x20000124
    9404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9406:	4c1a      	ldr	r4, [pc, #104]	; (9470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>)
    9408:	2301      	movs	r3, #1
    940a:	210a      	movs	r1, #10
    940c:	68a0      	ldr	r0, [r4, #8]
    940e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9412:	3070      	adds	r0, #112	; 0x70
    9414:	f004 f81b 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9418:	b338      	cbz	r0, 946a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x121a>
    941a:	6920      	ldr	r0, [r4, #16]
    941c:	f004 faa4 	bl	d968 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9420:	b1c8      	cbz	r0, 9456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1206>
    9422:	6920      	ldr	r0, [r4, #16]
    9424:	f004 fa92 	bl	d94c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9428:	4607      	mov	r7, r0
    942a:	6920      	ldr	r0, [r4, #16]
    942c:	f004 fa92 	bl	d954 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9430:	4606      	mov	r6, r0
    9432:	6920      	ldr	r0, [r4, #16]
    9434:	f004 fa88 	bl	d948 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9438:	4605      	mov	r5, r0
    943a:	6920      	ldr	r0, [r4, #16]
    943c:	f004 fa88 	bl	d950 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9440:	4601      	mov	r1, r0
    9442:	9700      	str	r7, [sp, #0]
    9444:	68a0      	ldr	r0, [r4, #8]
    9446:	4633      	mov	r3, r6
    9448:	462a      	mov	r2, r5
    944a:	3028      	adds	r0, #40	; 0x28
    944c:	f004 fcd2 	bl	ddf4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9450:	68a0      	ldr	r0, [r4, #8]
    9452:	f004 fc45 	bl	dce0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9456:	68a1      	ldr	r1, [r4, #8]
    9458:	2000      	movs	r0, #0
    945a:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    945e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9462:	f7ff f9b1 	bl	87c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    9466:	2000      	movs	r0, #0
    9468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    946a:	2001      	movs	r0, #1
    946c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    946e:	0000      	.short	0x0000
    9470:	20000124 	.word	0x20000124
    9474:	b510      	push	{r4, lr}
    9476:	4c09      	ldr	r4, [pc, #36]	; (949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124c>)
    9478:	68a0      	ldr	r0, [r4, #8]
    947a:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    947e:	0740      	lsls	r0, r0, #29
    9480:	d501      	bpl.n	9486 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1236>
    9482:	2001      	movs	r0, #1
    9484:	bd10      	pop	{r4, pc}
    9486:	f7fe fff5 	bl	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    948a:	68a0      	ldr	r0, [r4, #8]
    948c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9490:	f041 0104 	orr.w	r1, r1, #4
    9494:	7001      	strb	r1, [r0, #0]
    9496:	2000      	movs	r0, #0
    9498:	bd10      	pop	{r4, pc}
    949a:	0000      	.short	0x0000
    949c:	20000124 	.word	0x20000124
    94a0:	b510      	push	{r4, lr}
    94a2:	4c09      	ldr	r4, [pc, #36]	; (94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1278>)
    94a4:	2301      	movs	r3, #1
    94a6:	2109      	movs	r1, #9
    94a8:	68a0      	ldr	r0, [r4, #8]
    94aa:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    94ae:	3070      	adds	r0, #112	; 0x70
    94b0:	f003 ffcd 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94b4:	2800      	cmp	r0, #0
    94b6:	d006      	beq.n	94c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    94b8:	68a1      	ldr	r1, [r4, #8]
    94ba:	2000      	movs	r0, #0
    94bc:	f801 0f9a 	strb.w	r0, [r1, #154]!
    94c0:	7308      	strb	r0, [r1, #12]
    94c2:	f801 0c1d 	strb.w	r0, [r1, #-29]
    94c6:	bd10      	pop	{r4, pc}
    94c8:	20000124 	.word	0x20000124
    94cc:	b510      	push	{r4, lr}
    94ce:	4c0f      	ldr	r4, [pc, #60]	; (950c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12bc>)
    94d0:	2301      	movs	r3, #1
    94d2:	2100      	movs	r1, #0
    94d4:	68a0      	ldr	r0, [r4, #8]
    94d6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    94da:	3070      	adds	r0, #112	; 0x70
    94dc:	f003 ffb7 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94e0:	b138      	cbz	r0, 94f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a2>
    94e2:	f7fe ffc7 	bl	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    94e6:	68a1      	ldr	r1, [r4, #8]
    94e8:	2010      	movs	r0, #16
    94ea:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    94ee:	2000      	movs	r0, #0
    94f0:	bd10      	pop	{r4, pc}
    94f2:	68a0      	ldr	r0, [r4, #8]
    94f4:	2301      	movs	r3, #1
    94f6:	2105      	movs	r1, #5
    94f8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    94fc:	3070      	adds	r0, #112	; 0x70
    94fe:	f003 ffa6 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9502:	b108      	cbz	r0, 9508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b8>
    9504:	2008      	movs	r0, #8
    9506:	bd10      	pop	{r4, pc}
    9508:	2001      	movs	r0, #1
    950a:	bd10      	pop	{r4, pc}
    950c:	20000124 	.word	0x20000124
    9510:	4806      	ldr	r0, [pc, #24]	; (952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12dc>)
    9512:	6880      	ldr	r0, [r0, #8]
    9514:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9518:	2911      	cmp	r1, #17
    951a:	d001      	beq.n	9520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    951c:	2002      	movs	r0, #2
    951e:	4770      	bx	lr
    9520:	2112      	movs	r1, #18
    9522:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9526:	2000      	movs	r0, #0
    9528:	4770      	bx	lr
    952a:	0000      	.short	0x0000
    952c:	20000124 	.word	0x20000124
    9530:	b570      	push	{r4, r5, r6, lr}
    9532:	4c31      	ldr	r4, [pc, #196]	; (95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a8>)
    9534:	2301      	movs	r3, #1
    9536:	210b      	movs	r1, #11
    9538:	68a0      	ldr	r0, [r4, #8]
    953a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    953e:	3070      	adds	r0, #112	; 0x70
    9540:	f003 ff85 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9544:	bb48      	cbnz	r0, 959a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134a>
    9546:	68a0      	ldr	r0, [r4, #8]
    9548:	2301      	movs	r3, #1
    954a:	2100      	movs	r1, #0
    954c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9550:	3070      	adds	r0, #112	; 0x70
    9552:	f003 ff7c 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9556:	b1f0      	cbz	r0, 9596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    9558:	68a0      	ldr	r0, [r4, #8]
    955a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    955e:	2824      	cmp	r0, #36	; 0x24
    9560:	d01b      	beq.n	959a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134a>
    9562:	6920      	ldr	r0, [r4, #16]
    9564:	f004 fa1c 	bl	d9a0 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9568:	b1c8      	cbz	r0, 959e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    956a:	68a0      	ldr	r0, [r4, #8]
    956c:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9570:	f041 0104 	orr.w	r1, r1, #4
    9574:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    9578:	6921      	ldr	r1, [r4, #16]
    957a:	794a      	ldrb	r2, [r1, #5]
    957c:	f002 0207 	and.w	r2, r2, #7
    9580:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    9584:	7909      	ldrb	r1, [r1, #4]
    9586:	f001 0107 	and.w	r1, r1, #7
    958a:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    958e:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    9592:	bb43      	cbnz	r3, 95e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    9594:	e007      	b.n	95a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1356>
    9596:	2001      	movs	r0, #1
    9598:	bd70      	pop	{r4, r5, r6, pc}
    959a:	2020      	movs	r0, #32
    959c:	bd70      	pop	{r4, r5, r6, pc}
    959e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    95a2:	f7ff beb5 	b.w	9310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    95a6:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    95aa:	2b01      	cmp	r3, #1
    95ac:	d01b      	beq.n	95e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    95ae:	f100 0366 	add.w	r3, r0, #102	; 0x66
    95b2:	2501      	movs	r5, #1
    95b4:	785e      	ldrb	r6, [r3, #1]
    95b6:	428e      	cmp	r6, r1
    95b8:	d106      	bne.n	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1378>
    95ba:	7819      	ldrb	r1, [r3, #0]
    95bc:	4291      	cmp	r1, r2
    95be:	d103      	bne.n	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1378>
    95c0:	2102      	movs	r1, #2
    95c2:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    95c6:	e00e      	b.n	95e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    95c8:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    95cc:	8802      	ldrh	r2, [r0, #0]
    95ce:	f821 2902 	strh.w	r2, [r1], #-2
    95d2:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    95d6:	710a      	strb	r2, [r1, #4]
    95d8:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    95dc:	7148      	strb	r0, [r1, #5]
    95de:	700d      	strb	r5, [r1, #0]
    95e0:	78a0      	ldrb	r0, [r4, #2]
    95e2:	f7fa fa0d 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    95e6:	68a1      	ldr	r1, [r4, #8]
    95e8:	2021      	movs	r0, #33	; 0x21
    95ea:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    95ee:	f7fe ff41 	bl	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    95f2:	2000      	movs	r0, #0
    95f4:	bd70      	pop	{r4, r5, r6, pc}
    95f6:	0000      	.short	0x0000
    95f8:	20000124 	.word	0x20000124
    95fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9600:	4c4e      	ldr	r4, [pc, #312]	; (973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ec>)
    9602:	68a0      	ldr	r0, [r4, #8]
    9604:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9608:	2920      	cmp	r1, #32
    960a:	d009      	beq.n	9620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d0>
    960c:	f05f 0700 	movs.w	r7, #0
    9610:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9614:	2922      	cmp	r1, #34	; 0x22
    9616:	d005      	beq.n	9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d4>
    9618:	b387      	cbz	r7, 967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    961a:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    961e:	e003      	b.n	9628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d8>
    9620:	2701      	movs	r7, #1
    9622:	e7f5      	b.n	9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c0>
    9624:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    9628:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    962c:	f041 0104 	orr.w	r1, r1, #4
    9630:	7001      	strb	r1, [r0, #0]
    9632:	6920      	ldr	r0, [r4, #16]
    9634:	f7fc fb6c 	bl	5d10 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9638:	f04f 0801 	mov.w	r8, #1
    963c:	2600      	movs	r6, #0
    963e:	b308      	cbz	r0, 9684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    9640:	4639      	mov	r1, r7
    9642:	6920      	ldr	r0, [r4, #16]
    9644:	f7fe ffce 	bl	85e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    9648:	b1e0      	cbz	r0, 9684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    964a:	466a      	mov	r2, sp
    964c:	6921      	ldr	r1, [r4, #16]
    964e:	68a0      	ldr	r0, [r4, #8]
    9650:	f004 f833 	bl	d6ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9654:	b388      	cbz	r0, 96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146a>
    9656:	6920      	ldr	r0, [r4, #16]
    9658:	f004 f97e 	bl	d958 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    965c:	68a1      	ldr	r1, [r4, #8]
    965e:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9662:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9666:	f005 f858 	bl	e71a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    966a:	b338      	cbz	r0, 96bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146c>
    966c:	68a0      	ldr	r0, [r4, #8]
    966e:	2128      	movs	r1, #40	; 0x28
    9670:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9674:	306f      	adds	r0, #111	; 0x6f
    9676:	f880 801e 	strb.w	r8, [r0, #30]
    967a:	e053      	b.n	9724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    967c:	e7ff      	b.n	967e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142e>
    967e:	2002      	movs	r0, #2
    9680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9684:	68a0      	ldr	r0, [r4, #8]
    9686:	f04f 0900 	mov.w	r9, #0
    968a:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    968e:	2901      	cmp	r1, #1
    9690:	d015      	beq.n	96be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146e>
    9692:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9696:	b1f7      	cbz	r7, 96d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1486>
    9698:	6920      	ldr	r0, [r4, #16]
    969a:	68a1      	ldr	r1, [r4, #8]
    969c:	78c0      	ldrb	r0, [r0, #3]
    969e:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    96a2:	fa08 f200 	lsl.w	r2, r8, r0
    96a6:	f3c2 6000 	ubfx	r0, r2, #24, #1
    96aa:	b160      	cbz	r0, 96c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1476>
    96ac:	200a      	movs	r0, #10
    96ae:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    96b2:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    96b6:	b9a0      	cbnz	r0, 96e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    96b8:	e008      	b.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x147c>
    96ba:	e014      	b.n	96e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1496>
    96bc:	e027      	b.n	970e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14be>
    96be:	201e      	movs	r0, #30
    96c0:	f7ff fcfc 	bl	90bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    96c4:	e7e7      	b.n	9696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    96c6:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    96ca:	e001      	b.n	96d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    96cc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    96d0:	2031      	movs	r0, #49	; 0x31
    96d2:	f7fa fb45 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96d6:	702e      	strb	r6, [r5, #0]
    96d8:	f7fe fed8 	bl	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    96dc:	f7ff fe18 	bl	9310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    96e0:	4681      	mov	r9, r0
    96e2:	4648      	mov	r0, r9
    96e4:	e7cc      	b.n	9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1430>
    96e6:	68a0      	ldr	r0, [r4, #8]
    96e8:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    96ec:	2901      	cmp	r1, #1
    96ee:	d009      	beq.n	9704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    96f0:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    96f4:	68a0      	ldr	r0, [r4, #8]
    96f6:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    96fa:	428d      	cmp	r5, r1
    96fc:	d112      	bne.n	9724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    96fe:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    9702:	e00f      	b.n	9724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    9704:	2000      	movs	r0, #0
    9706:	f7ff fcd9 	bl	90bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    970a:	702e      	strb	r6, [r5, #0]
    970c:	e7f2      	b.n	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    970e:	68a0      	ldr	r0, [r4, #8]
    9710:	f89d 1000 	ldrb.w	r1, [sp]
    9714:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9718:	f89d 1001 	ldrb.w	r1, [sp, #1]
    971c:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    9720:	2024      	movs	r0, #36	; 0x24
    9722:	7028      	strb	r0, [r5, #0]
    9724:	68a0      	ldr	r0, [r4, #8]
    9726:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    972a:	428d      	cmp	r5, r1
    972c:	d102      	bne.n	9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e4>
    972e:	f7fe fead 	bl	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9732:	e001      	b.n	9738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>
    9734:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    9738:	2000      	movs	r0, #0
    973a:	e7a1      	b.n	9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1430>
    973c:	20000124 	.word	0x20000124
    9740:	b510      	push	{r4, lr}
    9742:	4c0a      	ldr	r4, [pc, #40]	; (976c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151c>)
    9744:	68a0      	ldr	r0, [r4, #8]
    9746:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    974a:	f041 0104 	orr.w	r1, r1, #4
    974e:	7001      	strb	r1, [r0, #0]
    9750:	6920      	ldr	r0, [r4, #16]
    9752:	f004 f92f 	bl	d9b4 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9756:	2816      	cmp	r0, #22
    9758:	d001      	beq.n	975e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150e>
    975a:	2000      	movs	r0, #0
    975c:	bd10      	pop	{r4, pc}
    975e:	6920      	ldr	r0, [r4, #16]
    9760:	f004 f92a 	bl	d9b8 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9768:	f7fe be62 	b.w	8430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>
    976c:	20000124 	.word	0x20000124
    9770:	4802      	ldr	r0, [pc, #8]	; (977c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x152c>)
    9772:	6900      	ldr	r0, [r0, #16]
    9774:	7900      	ldrb	r0, [r0, #4]
    9776:	f7fe be5b 	b.w	8430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>
    977a:	0000      	.short	0x0000
    977c:	20000124 	.word	0x20000124
    9780:	b510      	push	{r4, lr}
    9782:	4c08      	ldr	r4, [pc, #32]	; (97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>)
    9784:	68a0      	ldr	r0, [r4, #8]
    9786:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    978a:	2817      	cmp	r0, #23
    978c:	d001      	beq.n	9792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    978e:	2002      	movs	r0, #2
    9790:	bd10      	pop	{r4, pc}
    9792:	f7fe fe7b 	bl	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9796:	68a1      	ldr	r1, [r4, #8]
    9798:	201b      	movs	r0, #27
    979a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    979e:	2000      	movs	r0, #0
    97a0:	bd10      	pop	{r4, pc}
    97a2:	0000      	.short	0x0000
    97a4:	20000124 	.word	0x20000124
    97a8:	b510      	push	{r4, lr}
    97aa:	4c0b      	ldr	r4, [pc, #44]	; (97d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1588>)
    97ac:	2301      	movs	r3, #1
    97ae:	4619      	mov	r1, r3
    97b0:	68a0      	ldr	r0, [r4, #8]
    97b2:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    97b6:	3070      	adds	r0, #112	; 0x70
    97b8:	f003 fe49 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97bc:	b108      	cbz	r0, 97c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    97be:	2000      	movs	r0, #0
    97c0:	bd10      	pop	{r4, pc}
    97c2:	6920      	ldr	r0, [r4, #16]
    97c4:	f004 f8cc 	bl	d960 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    97c8:	68a1      	ldr	r1, [r4, #8]
    97ca:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    97ce:	2007      	movs	r0, #7
    97d0:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    97d4:	e7f3      	b.n	97be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    97d6:	0000      	.short	0x0000
    97d8:	20000124 	.word	0x20000124
    97dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97e0:	4c37      	ldr	r4, [pc, #220]	; (98c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>)
    97e2:	2600      	movs	r6, #0
    97e4:	4620      	mov	r0, r4
    97e6:	68a1      	ldr	r1, [r4, #8]
    97e8:	6900      	ldr	r0, [r0, #16]
    97ea:	2701      	movs	r7, #1
    97ec:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    97f0:	7900      	ldrb	r0, [r0, #4]
    97f2:	2b0e      	cmp	r3, #14
    97f4:	d101      	bne.n	97fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15aa>
    97f6:	2812      	cmp	r0, #18
    97f8:	d006      	beq.n	9808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    97fa:	4a31      	ldr	r2, [pc, #196]	; (98c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>)
    97fc:	2500      	movs	r5, #0
    97fe:	6892      	ldr	r2, [r2, #8]
    9800:	32b4      	adds	r2, #180	; 0xb4
    9802:	2b1c      	cmp	r3, #28
    9804:	d004      	beq.n	9810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9806:	e005      	b.n	9814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    9808:	f7ff fe4a 	bl	94a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1250>
    980c:	4606      	mov	r6, r0
    980e:	e054      	b.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9810:	2814      	cmp	r0, #20
    9812:	d002      	beq.n	981a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ca>
    9814:	2b04      	cmp	r3, #4
    9816:	d00b      	beq.n	9830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    9818:	e00c      	b.n	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e4>
    981a:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    981e:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    9822:	2105      	movs	r1, #5
    9824:	4610      	mov	r0, r2
    9826:	f004 ff38 	bl	e69a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    982a:	f7fe ffcd 	bl	87c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    982e:	e044      	b.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9830:	280e      	cmp	r0, #14
    9832:	d002      	beq.n	983a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    9834:	2b20      	cmp	r3, #32
    9836:	d010      	beq.n	985a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160a>
    9838:	e011      	b.n	985e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160e>
    983a:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    983e:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    9842:	8808      	ldrh	r0, [r1, #0]
    9844:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    9848:	201a      	movs	r0, #26
    984a:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    984e:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    9852:	78a0      	ldrb	r0, [r4, #2]
    9854:	f7fa f8d4 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9858:	e02f      	b.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    985a:	2816      	cmp	r0, #22
    985c:	d006      	beq.n	986c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    985e:	2b26      	cmp	r3, #38	; 0x26
    9860:	d101      	bne.n	9866 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1616>
    9862:	2816      	cmp	r0, #22
    9864:	d002      	beq.n	986c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9866:	2817      	cmp	r0, #23
    9868:	d014      	beq.n	9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    986a:	e026      	b.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    986c:	f801 5f7d 	strb.w	r5, [r1, #125]!
    9870:	f881 5029 	strb.w	r5, [r1, #41]	; 0x29
    9874:	7848      	ldrb	r0, [r1, #1]
    9876:	2821      	cmp	r0, #33	; 0x21
    9878:	d01f      	beq.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    987a:	2108      	movs	r1, #8
    987c:	4610      	mov	r0, r2
    987e:	f004 ff0c 	bl	e69a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    9882:	68a0      	ldr	r0, [r4, #8]
    9884:	210b      	movs	r1, #11
    9886:	30b4      	adds	r0, #180	; 0xb4
    9888:	f004 ff07 	bl	e69a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    988c:	201a      	movs	r0, #26
    988e:	f7ff fc15 	bl	90bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9892:	e012      	b.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9894:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    9898:	2822      	cmp	r0, #34	; 0x22
    989a:	d10e      	bne.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    989c:	f881 507e 	strb.w	r5, [r1, #126]	; 0x7e
    98a0:	f7fe fdf4 	bl	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    98a4:	68a0      	ldr	r0, [r4, #8]
    98a6:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    98aa:	2801      	cmp	r0, #1
    98ac:	d102      	bne.n	98b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>
    98ae:	2000      	movs	r0, #0
    98b0:	f7ff fc04 	bl	90bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    98b4:	68a0      	ldr	r0, [r4, #8]
    98b6:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    98ba:	4630      	mov	r0, r6
    98bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98c0:	20000124 	.word	0x20000124
    98c4:	b570      	push	{r4, r5, r6, lr}
    98c6:	4c2d      	ldr	r4, [pc, #180]	; (997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x172c>)
    98c8:	68a0      	ldr	r0, [r4, #8]
    98ca:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    98ce:	0789      	lsls	r1, r1, #30
    98d0:	d507      	bpl.n	98e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1692>
    98d2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    98d6:	2301      	movs	r3, #1
    98d8:	2108      	movs	r1, #8
    98da:	3070      	adds	r0, #112	; 0x70
    98dc:	f003 fdb7 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98e0:	b1e8      	cbz	r0, 991e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ce>
    98e2:	68a0      	ldr	r0, [r4, #8]
    98e4:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    98e8:	0780      	lsls	r0, r0, #30
    98ea:	d412      	bmi.n	9912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    98ec:	6920      	ldr	r0, [r4, #16]
    98ee:	f004 f839 	bl	d964 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    98f2:	68a1      	ldr	r1, [r4, #8]
    98f4:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    98f8:	6920      	ldr	r0, [r4, #16]
    98fa:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    98fe:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    9902:	8840      	ldrh	r0, [r0, #2]
    9904:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    9908:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    990c:	f040 0002 	orr.w	r0, r0, #2
    9910:	7008      	strb	r0, [r1, #0]
    9912:	68a0      	ldr	r0, [r4, #8]
    9914:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9918:	07c9      	lsls	r1, r1, #31
    991a:	d002      	beq.n	9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    991c:	e010      	b.n	9940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    991e:	2001      	movs	r0, #1
    9920:	bd70      	pop	{r4, r5, r6, pc}
    9922:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9926:	078a      	lsls	r2, r1, #30
    9928:	d504      	bpl.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    992a:	f240 21d9 	movw	r1, #729	; 0x2d9
    992e:	2031      	movs	r0, #49	; 0x31
    9930:	f7fa fa16 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9934:	f041 0102 	orr.w	r1, r1, #2
    9938:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    993c:	f7fe fd9a 	bl	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9940:	68a0      	ldr	r0, [r4, #8]
    9942:	2500      	movs	r5, #0
    9944:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9948:	2906      	cmp	r1, #6
    994a:	d106      	bne.n	995a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    994c:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    9950:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9954:	78a0      	ldrb	r0, [r4, #2]
    9956:	f7fa f853 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    995a:	68a0      	ldr	r0, [r4, #8]
    995c:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    9960:	b151      	cbz	r1, 9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    9962:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    9966:	78a0      	ldrb	r0, [r4, #2]
    9968:	f7fa f84a 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    996c:	68a0      	ldr	r0, [r4, #8]
    996e:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9972:	b909      	cbnz	r1, 9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    9974:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9978:	2000      	movs	r0, #0
    997a:	bd70      	pop	{r4, r5, r6, pc}
    997c:	20000124 	.word	0x20000124
    9980:	b510      	push	{r4, lr}
    9982:	4c17      	ldr	r4, [pc, #92]	; (99e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1790>)
    9984:	68a3      	ldr	r3, [r4, #8]
    9986:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    998a:	2808      	cmp	r0, #8
    998c:	d20e      	bcs.n	99ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    998e:	f100 0208 	add.w	r2, r0, #8
    9992:	f1c0 0008 	rsb	r0, r0, #8
    9996:	b2c1      	uxtb	r1, r0
    9998:	1898      	adds	r0, r3, r2
    999a:	f500 7084 	add.w	r0, r0, #264	; 0x108
    999e:	f7fa fa6f 	bl	3e80 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    99a2:	68a1      	ldr	r1, [r4, #8]
    99a4:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    99a8:	4410      	add	r0, r2
    99aa:	7008      	strb	r0, [r1, #0]
    99ac:	68a3      	ldr	r3, [r4, #8]
    99ae:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    99b2:	3808      	subs	r0, #8
    99b4:	2804      	cmp	r0, #4
    99b6:	d211      	bcs.n	99dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x178c>
    99b8:	1d02      	adds	r2, r0, #4
    99ba:	f1c0 0004 	rsb	r0, r0, #4
    99be:	b2c1      	uxtb	r1, r0
    99c0:	1898      	adds	r0, r3, r2
    99c2:	30d8      	adds	r0, #216	; 0xd8
    99c4:	f7fa fa5c 	bl	3e80 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    99c8:	68a0      	ldr	r0, [r4, #8]
    99ca:	2100      	movs	r1, #0
    99cc:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    99d0:	2101      	movs	r1, #1
    99d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    99d6:	2004      	movs	r0, #4
    99d8:	f7ff ba8e 	b.w	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    99dc:	bd10      	pop	{r4, pc}
    99de:	0000      	.short	0x0000
    99e0:	20000124 	.word	0x20000124
    99e4:	4804      	ldr	r0, [pc, #16]	; (99f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a8>)
    99e6:	2127      	movs	r1, #39	; 0x27
    99e8:	6880      	ldr	r0, [r0, #8]
    99ea:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    99ee:	2100      	movs	r1, #0
    99f0:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    99f4:	4770      	bx	lr
    99f6:	0000      	.short	0x0000
    99f8:	20000124 	.word	0x20000124
    99fc:	4809      	ldr	r0, [pc, #36]	; (9a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>)
    99fe:	b510      	push	{r4, lr}
    9a00:	6880      	ldr	r0, [r0, #8]
    9a02:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a06:	2914      	cmp	r1, #20
    9a08:	d004      	beq.n	9a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>
    9a0a:	f240 6189 	movw	r1, #1673	; 0x689
    9a0e:	2031      	movs	r0, #49	; 0x31
    9a10:	f7fa f9a6 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a14:	2101      	movs	r1, #1
    9a16:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9a1a:	2115      	movs	r1, #21
    9a1c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9a20:	bd10      	pop	{r4, pc}
    9a22:	0000      	.short	0x0000
    9a24:	20000124 	.word	0x20000124
    9a28:	b510      	push	{r4, lr}
    9a2a:	4c0a      	ldr	r4, [pc, #40]	; (9a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    9a2c:	68a0      	ldr	r0, [r4, #8]
    9a2e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9a32:	07c0      	lsls	r0, r0, #31
    9a34:	d008      	beq.n	9a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f8>
    9a36:	f7fe fd29 	bl	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9a3a:	68a0      	ldr	r0, [r4, #8]
    9a3c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9a40:	f021 0101 	bic.w	r1, r1, #1
    9a44:	7001      	strb	r1, [r0, #0]
    9a46:	bd10      	pop	{r4, pc}
    9a48:	f240 6172 	movw	r1, #1650	; 0x672
    9a4c:	2031      	movs	r0, #49	; 0x31
    9a4e:	f7fa f987 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a52:	0000      	.short	0x0000
    9a54:	20000124 	.word	0x20000124
    9a58:	b510      	push	{r4, lr}
    9a5a:	4c0a      	ldr	r4, [pc, #40]	; (9a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>)
    9a5c:	2301      	movs	r3, #1
    9a5e:	2100      	movs	r1, #0
    9a60:	68a0      	ldr	r0, [r4, #8]
    9a62:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9a66:	3070      	adds	r0, #112	; 0x70
    9a68:	f003 fcf1 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a6c:	b120      	cbz	r0, 9a78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>
    9a6e:	68a1      	ldr	r1, [r4, #8]
    9a70:	201c      	movs	r0, #28
    9a72:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9a76:	bd10      	pop	{r4, pc}
    9a78:	f240 61f7 	movw	r1, #1783	; 0x6f7
    9a7c:	2031      	movs	r0, #49	; 0x31
    9a7e:	f7fa f96f 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a82:	0000      	.short	0x0000
    9a84:	20000124 	.word	0x20000124
    9a88:	480a      	ldr	r0, [pc, #40]	; (9ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1864>)
    9a8a:	b510      	push	{r4, lr}
    9a8c:	6880      	ldr	r0, [r0, #8]
    9a8e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9a92:	f3c1 1201 	ubfx	r2, r1, #4, #2
    9a96:	2a01      	cmp	r2, #1
    9a98:	d004      	beq.n	9aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    9a9a:	f240 61fe 	movw	r1, #1790	; 0x6fe
    9a9e:	2031      	movs	r0, #49	; 0x31
    9aa0:	f7fa f95e 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9aa4:	f021 0110 	bic.w	r1, r1, #16
    9aa8:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ab0:	f7fe bcec 	b.w	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9ab4:	20000124 	.word	0x20000124
    9ab8:	b510      	push	{r4, lr}
    9aba:	4c0a      	ldr	r4, [pc, #40]	; (9ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>)
    9abc:	2301      	movs	r3, #1
    9abe:	2100      	movs	r1, #0
    9ac0:	68a0      	ldr	r0, [r4, #8]
    9ac2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9ac6:	3070      	adds	r0, #112	; 0x70
    9ac8:	f003 fcc1 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9acc:	b120      	cbz	r0, 9ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>
    9ace:	68a1      	ldr	r1, [r4, #8]
    9ad0:	200e      	movs	r0, #14
    9ad2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9ad6:	bd10      	pop	{r4, pc}
    9ad8:	f240 61ea 	movw	r1, #1770	; 0x6ea
    9adc:	2031      	movs	r0, #49	; 0x31
    9ade:	f7fa f93f 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ae2:	0000      	.short	0x0000
    9ae4:	20000124 	.word	0x20000124
    9ae8:	4804      	ldr	r0, [pc, #16]	; (9afc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>)
    9aea:	6880      	ldr	r0, [r0, #8]
    9aec:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9af0:	f021 0104 	bic.w	r1, r1, #4
    9af4:	7001      	strb	r1, [r0, #0]
    9af6:	f7fe bcc9 	b.w	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9afa:	0000      	.short	0x0000
    9afc:	20000124 	.word	0x20000124
    9b00:	4809      	ldr	r0, [pc, #36]	; (9b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d8>)
    9b02:	b510      	push	{r4, lr}
    9b04:	6880      	ldr	r0, [r0, #8]
    9b06:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9b0a:	2910      	cmp	r1, #16
    9b0c:	d004      	beq.n	9b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    9b0e:	f240 6181 	movw	r1, #1665	; 0x681
    9b12:	2031      	movs	r0, #49	; 0x31
    9b14:	f7fa f924 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b18:	2101      	movs	r1, #1
    9b1a:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9b1e:	2111      	movs	r1, #17
    9b20:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9b24:	bd10      	pop	{r4, pc}
    9b26:	0000      	.short	0x0000
    9b28:	20000124 	.word	0x20000124
    9b2c:	b510      	push	{r4, lr}
    9b2e:	4c0a      	ldr	r4, [pc, #40]	; (9b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1908>)
    9b30:	2301      	movs	r3, #1
    9b32:	2100      	movs	r1, #0
    9b34:	68a0      	ldr	r0, [r4, #8]
    9b36:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9b3a:	3070      	adds	r0, #112	; 0x70
    9b3c:	f003 fc87 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b40:	b120      	cbz	r0, 9b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>
    9b42:	68a1      	ldr	r1, [r4, #8]
    9b44:	201f      	movs	r0, #31
    9b46:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9b4a:	bd10      	pop	{r4, pc}
    9b4c:	f240 710a 	movw	r1, #1802	; 0x70a
    9b50:	2031      	movs	r0, #49	; 0x31
    9b52:	f7fa f905 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b56:	0000      	.short	0x0000
    9b58:	20000124 	.word	0x20000124
    9b5c:	4808      	ldr	r0, [pc, #32]	; (9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1930>)
    9b5e:	b510      	push	{r4, lr}
    9b60:	6880      	ldr	r0, [r0, #8]
    9b62:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9b66:	2921      	cmp	r1, #33	; 0x21
    9b68:	d005      	beq.n	9b76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1926>
    9b6a:	b121      	cbz	r1, 9b76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1926>
    9b6c:	f240 7111 	movw	r1, #1809	; 0x711
    9b70:	2031      	movs	r0, #49	; 0x31
    9b72:	f7fa f8f5 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b76:	2122      	movs	r1, #34	; 0x22
    9b78:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9b7c:	bd10      	pop	{r4, pc}
    9b7e:	0000      	.short	0x0000
    9b80:	20000124 	.word	0x20000124
    9b84:	4807      	ldr	r0, [pc, #28]	; (9ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1954>)
    9b86:	b510      	push	{r4, lr}
    9b88:	6880      	ldr	r0, [r0, #8]
    9b8a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9b8e:	2915      	cmp	r1, #21
    9b90:	d004      	beq.n	9b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    9b92:	f240 6196 	movw	r1, #1686	; 0x696
    9b96:	2031      	movs	r0, #49	; 0x31
    9b98:	f7fa f8e2 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b9c:	2119      	movs	r1, #25
    9b9e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9ba2:	bd10      	pop	{r4, pc}
    9ba4:	20000124 	.word	0x20000124
    9ba8:	4807      	ldr	r0, [pc, #28]	; (9bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>)
    9baa:	b510      	push	{r4, lr}
    9bac:	6880      	ldr	r0, [r0, #8]
    9bae:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9bb2:	2915      	cmp	r1, #21
    9bb4:	d004      	beq.n	9bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1970>
    9bb6:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    9bba:	2031      	movs	r0, #49	; 0x31
    9bbc:	f7fa f8d0 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bc0:	2117      	movs	r1, #23
    9bc2:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9bc6:	bd10      	pop	{r4, pc}
    9bc8:	20000124 	.word	0x20000124
    9bcc:	b570      	push	{r4, r5, r6, lr}
    9bce:	4d1b      	ldr	r5, [pc, #108]	; (9c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>)
    9bd0:	68a8      	ldr	r0, [r5, #8]
    9bd2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9bd6:	291b      	cmp	r1, #27
    9bd8:	d002      	beq.n	9be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1990>
    9bda:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    9bde:	e007      	b.n	9bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a0>
    9be0:	2400      	movs	r4, #0
    9be2:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    9be6:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    9bea:	b121      	cbz	r1, 9bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9bec:	f240 61b4 	movw	r1, #1716	; 0x6b4
    9bf0:	2031      	movs	r0, #49	; 0x31
    9bf2:	f7fa f8b5 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bf6:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    9bfa:	b141      	cbz	r1, 9c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19be>
    9bfc:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    9c00:	8801      	ldrh	r1, [r0, #0]
    9c02:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    9c06:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9c0a:	210c      	movs	r1, #12
    9c0c:	e008      	b.n	9c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>
    9c0e:	8801      	ldrh	r1, [r0, #0]
    9c10:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    9c14:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9c18:	2101      	movs	r1, #1
    9c1a:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    9c1e:	210b      	movs	r1, #11
    9c20:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    9c24:	8800      	ldrh	r0, [r0, #0]
    9c26:	f7fa fcab 	bl	4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9c2a:	f003 f984 	bl	cf36 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9c2e:	78a8      	ldrb	r0, [r5, #2]
    9c30:	f7f9 fee6 	bl	3a00 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9c34:	68a8      	ldr	r0, [r5, #8]
    9c36:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    9c3a:	bd70      	pop	{r4, r5, r6, pc}
    9c3c:	20000124 	.word	0x20000124
    9c40:	b510      	push	{r4, lr}
    9c42:	4c08      	ldr	r4, [pc, #32]	; (9c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a14>)
    9c44:	2301      	movs	r3, #1
    9c46:	4619      	mov	r1, r3
    9c48:	68a0      	ldr	r0, [r4, #8]
    9c4a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9c4e:	3070      	adds	r0, #112	; 0x70
    9c50:	f003 fbfd 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c54:	2800      	cmp	r0, #0
    9c56:	d103      	bne.n	9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    9c58:	68a1      	ldr	r1, [r4, #8]
    9c5a:	2008      	movs	r0, #8
    9c5c:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9c60:	bd10      	pop	{r4, pc}
    9c62:	0000      	.short	0x0000
    9c64:	20000124 	.word	0x20000124
    9c68:	4814      	ldr	r0, [pc, #80]	; (9cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9c6a:	b510      	push	{r4, lr}
    9c6c:	68c1      	ldr	r1, [r0, #12]
    9c6e:	6880      	ldr	r0, [r0, #8]
    9c70:	7909      	ldrb	r1, [r1, #4]
    9c72:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9c76:	2a0a      	cmp	r2, #10
    9c78:	d109      	bne.n	9c8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3e>
    9c7a:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    9c7e:	428a      	cmp	r2, r1
    9c80:	d105      	bne.n	9c8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3e>
    9c82:	2100      	movs	r1, #0
    9c84:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9c88:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9c8c:	bd10      	pop	{r4, pc}
    9c8e:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9c92:	0713      	lsls	r3, r2, #28
    9c94:	d507      	bpl.n	9ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    9c96:	f022 0108 	bic.w	r1, r2, #8
    9c9a:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ca2:	f7fe bbf3 	b.w	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9ca6:	29ff      	cmp	r1, #255	; 0xff
    9ca8:	d004      	beq.n	9cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a64>
    9caa:	f240 616c 	movw	r1, #1644	; 0x66c
    9cae:	2031      	movs	r0, #49	; 0x31
    9cb0:	f7fa f856 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cb8:	f7ff be94 	b.w	99e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1794>
    9cbc:	20000124 	.word	0x20000124
    9cc0:	b510      	push	{r4, lr}
    9cc2:	4c15      	ldr	r4, [pc, #84]	; (9d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>)
    9cc4:	68a0      	ldr	r0, [r4, #8]
    9cc6:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9cca:	0789      	lsls	r1, r1, #30
    9ccc:	d411      	bmi.n	9cf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa2>
    9cce:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9cd2:	2301      	movs	r3, #1
    9cd4:	2100      	movs	r1, #0
    9cd6:	3070      	adds	r0, #112	; 0x70
    9cd8:	f003 fbb9 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9cdc:	b120      	cbz	r0, 9ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9cde:	68a1      	ldr	r1, [r4, #8]
    9ce0:	2006      	movs	r0, #6
    9ce2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9ce6:	e009      	b.n	9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aac>
    9ce8:	f240 61d6 	movw	r1, #1750	; 0x6d6
    9cec:	2031      	movs	r0, #49	; 0x31
    9cee:	f7fa f837 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cf2:	2100      	movs	r1, #0
    9cf4:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9cf8:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    9cfc:	68a0      	ldr	r0, [r4, #8]
    9cfe:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9d02:	0780      	lsls	r0, r0, #30
    9d04:	d507      	bpl.n	9d16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac6>
    9d06:	f7fe fbc1 	bl	848c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9d0a:	68a0      	ldr	r0, [r4, #8]
    9d0c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9d10:	f021 0102 	bic.w	r1, r1, #2
    9d14:	7001      	strb	r1, [r0, #0]
    9d16:	bd10      	pop	{r4, pc}
    9d18:	20000124 	.word	0x20000124
    9d1c:	4808      	ldr	r0, [pc, #32]	; (9d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>)
    9d1e:	b510      	push	{r4, lr}
    9d20:	6880      	ldr	r0, [r0, #8]
    9d22:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    9d26:	b941      	cbnz	r1, 9d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    9d28:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9d2c:	2301      	movs	r3, #1
    9d2e:	2106      	movs	r1, #6
    9d30:	3070      	adds	r0, #112	; 0x70
    9d32:	f003 fb8c 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d36:	2800      	cmp	r0, #0
    9d38:	d000      	beq.n	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aec>
    9d3a:	2001      	movs	r0, #1
    9d3c:	bd10      	pop	{r4, pc}
    9d3e:	0000      	.short	0x0000
    9d40:	20000124 	.word	0x20000124
    9d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d46:	4c54      	ldr	r4, [pc, #336]	; (9e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c48>)
    9d48:	4606      	mov	r6, r0
    9d4a:	4615      	mov	r5, r2
    9d4c:	68a0      	ldr	r0, [r4, #8]
    9d4e:	b109      	cbz	r1, 9d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    9d50:	2100      	movs	r1, #0
    9d52:	e004      	b.n	9d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    9d54:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    9d58:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    9d5c:	4411      	add	r1, r2
    9d5e:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9d62:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    9d66:	b939      	cbnz	r1, 9d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b28>
    9d68:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9d6c:	2301      	movs	r3, #1
    9d6e:	4619      	mov	r1, r3
    9d70:	3070      	adds	r0, #112	; 0x70
    9d72:	f003 fb6c 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d76:	b130      	cbz	r0, 9d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    9d78:	68a0      	ldr	r0, [r4, #8]
    9d7a:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    9d7e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    9d82:	4411      	add	r1, r2
    9d84:	8001      	strh	r1, [r0, #0]
    9d86:	68a0      	ldr	r0, [r4, #8]
    9d88:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    9d8c:	b132      	cbz	r2, 9d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4c>
    9d8e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    9d92:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9d96:	4419      	add	r1, r3
    9d98:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    9d9c:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    9da0:	2f00      	cmp	r7, #0
    9da2:	dd06      	ble.n	9db2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b62>
    9da4:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    9da8:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9dac:	4419      	add	r1, r3
    9dae:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    9db2:	2101      	movs	r1, #1
    9db4:	233d      	movs	r3, #61	; 0x3d
    9db6:	b116      	cbz	r6, 9dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b6e>
    9db8:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    9dbc:	e013      	b.n	9de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b96>
    9dbe:	7824      	ldrb	r4, [r4, #0]
    9dc0:	2c02      	cmp	r4, #2
    9dc2:	d00a      	beq.n	9dda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8a>
    9dc4:	2c01      	cmp	r4, #1
    9dc6:	d012      	beq.n	9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9e>
    9dc8:	b345      	cbz	r5, 9e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bcc>
    9dca:	f100 028d 	add.w	r2, r0, #141	; 0x8d
    9dce:	7011      	strb	r1, [r2, #0]
    9dd0:	f015 0f14 	tst.w	r5, #20
    9dd4:	d00e      	beq.n	9df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    9dd6:	211e      	movs	r1, #30
    9dd8:	e018      	b.n	9e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    9dda:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    9dde:	2a06      	cmp	r2, #6
    9de0:	d03e      	beq.n	9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9de2:	2216      	movs	r2, #22
    9de4:	e03c      	b.n	9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9de6:	f100 028d 	add.w	r2, r0, #141	; 0x8d
    9dea:	7011      	strb	r1, [r2, #0]
    9dec:	e041      	b.n	9e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9dee:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    9df2:	e035      	b.n	9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9df4:	0729      	lsls	r1, r5, #28
    9df6:	d502      	bpl.n	9dfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bae>
    9df8:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    9dfc:	e039      	b.n	9e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9dfe:	06a9      	lsls	r1, r5, #26
    9e00:	d501      	bpl.n	9e06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb6>
    9e02:	2123      	movs	r1, #35	; 0x23
    9e04:	e002      	b.n	9e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    9e06:	07a9      	lsls	r1, r5, #30
    9e08:	d003      	beq.n	9e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc2>
    9e0a:	212a      	movs	r1, #42	; 0x2a
    9e0c:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9e10:	e02f      	b.n	9e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9e12:	f640 419d 	movw	r1, #3229	; 0xc9d
    9e16:	2031      	movs	r0, #49	; 0x31
    9e18:	f7f9 ffa2 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e1c:	b12a      	cbz	r2, 9e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bda>
    9e1e:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    9e22:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9e26:	429a      	cmp	r2, r3
    9e28:	d210      	bcs.n	9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    9e2a:	2f00      	cmp	r7, #0
    9e2c:	dd05      	ble.n	9e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    9e2e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    9e32:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9e36:	429a      	cmp	r2, r3
    9e38:	d208      	bcs.n	9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    9e3a:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    9e3e:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9e42:	4293      	cmp	r3, r2
    9e44:	d304      	bcc.n	9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    9e46:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    9e4a:	b10b      	cbz	r3, 9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    9e4c:	2222      	movs	r2, #34	; 0x22
    9e4e:	e007      	b.n	9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9e50:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    9e54:	b13b      	cbz	r3, 9e66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c16>
    9e56:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    9e5a:	4293      	cmp	r3, r2
    9e5c:	d309      	bcc.n	9e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9e5e:	2208      	movs	r2, #8
    9e60:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    9e64:	e7bf      	b.n	9de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b96>
    9e66:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    9e6a:	2a06      	cmp	r2, #6
    9e6c:	d301      	bcc.n	9e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9e6e:	223e      	movs	r2, #62	; 0x3e
    9e70:	e7f6      	b.n	9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9e72:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    9e76:	f88d 1000 	strb.w	r1, [sp]
    9e7a:	9900      	ldr	r1, [sp, #0]
    9e7c:	9100      	str	r1, [sp, #0]
    9e7e:	f89d 1000 	ldrb.w	r1, [sp]
    9e82:	b119      	cbz	r1, 9e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>
    9e84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9e88:	f004 bc17 	b.w	e6ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9e8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9e90:	2100      	movs	r1, #0
    9e92:	f7fd b9a1 	b.w	71d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9e96:	0000      	.short	0x0000
    9e98:	20000124 	.word	0x20000124
    9e9c:	b570      	push	{r4, r5, r6, lr}
    9e9e:	4d2d      	ldr	r5, [pc, #180]	; (9f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d04>)
    9ea0:	68a8      	ldr	r0, [r5, #8]
    9ea2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9ea6:	b151      	cbz	r1, 9ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9ea8:	2901      	cmp	r1, #1
    9eaa:	d008      	beq.n	9ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9eac:	2902      	cmp	r1, #2
    9eae:	d009      	beq.n	9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c74>
    9eb0:	2903      	cmp	r1, #3
    9eb2:	d007      	beq.n	9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c74>
    9eb4:	f640 215f 	movw	r1, #2655	; 0xa5f
    9eb8:	2031      	movs	r0, #49	; 0x31
    9eba:	f7f9 ff51 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ebe:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9ec2:	e035      	b.n	9f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce0>
    9ec4:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9ec8:	2908      	cmp	r1, #8
    9eca:	d034      	beq.n	9f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce6>
    9ecc:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9ed0:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9ed4:	2400      	movs	r4, #0
    9ed6:	1c8b      	adds	r3, r1, #2
    9ed8:	429a      	cmp	r2, r3
    9eda:	d306      	bcc.n	9eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9a>
    9edc:	1a51      	subs	r1, r2, r1
    9ede:	1e89      	subs	r1, r1, #2
    9ee0:	040c      	lsls	r4, r1, #16
    9ee2:	0c24      	lsrs	r4, r4, #16
    9ee4:	d001      	beq.n	9eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9a>
    9ee6:	1e64      	subs	r4, r4, #1
    9ee8:	b2a4      	uxth	r4, r4
    9eea:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    9eee:	b139      	cbz	r1, 9f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
    9ef0:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9ef4:	2301      	movs	r3, #1
    9ef6:	2109      	movs	r1, #9
    9ef8:	3070      	adds	r0, #112	; 0x70
    9efa:	f003 faa8 	bl	d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9efe:	b330      	cbz	r0, 9f4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    9f00:	f7ff ff0c 	bl	9d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    9f04:	b168      	cbz	r0, 9f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd2>
    9f06:	68a9      	ldr	r1, [r5, #8]
    9f08:	2000      	movs	r0, #0
    9f0a:	3190      	adds	r1, #144	; 0x90
    9f0c:	c906      	ldmia	r1, {r1, r2}
    9f0e:	1c8b      	adds	r3, r1, #2
    9f10:	429a      	cmp	r2, r3
    9f12:	d303      	bcc.n	9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    9f14:	1a50      	subs	r0, r2, r1
    9f16:	1e80      	subs	r0, r0, #2
    9f18:	d000      	beq.n	9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    9f1a:	1e40      	subs	r0, r0, #1
    9f1c:	42a0      	cmp	r0, r4
    9f1e:	d200      	bcs.n	9f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd2>
    9f20:	b284      	uxth	r4, r0
    9f22:	b10c      	cbz	r4, 9f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd8>
    9f24:	1e64      	subs	r4, r4, #1
    9f26:	b2a4      	uxth	r4, r4
    9f28:	68a8      	ldr	r0, [r5, #8]
    9f2a:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9f2e:	4421      	add	r1, r4
    9f30:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    9f34:	bd70      	pop	{r4, r5, r6, pc}
    9f36:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9f3a:	2903      	cmp	r1, #3
    9f3c:	d3bf      	bcc.n	9ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9f3e:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    9f42:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    9f44:	4411      	add	r1, r2
    9f46:	1c49      	adds	r1, r1, #1
    9f48:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    9f4c:	bd70      	pop	{r4, r5, r6, pc}
    9f4e:	2400      	movs	r4, #0
    9f50:	e7ea      	b.n	9f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd8>
    9f52:	0000      	.short	0x0000
    9f54:	20000124 	.word	0x20000124

00009f58 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9f58:	4903      	ldr	r1, [pc, #12]	; (9f68 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9f5a:	888a      	ldrh	r2, [r1, #4]
    9f5c:	8002      	strh	r2, [r0, #0]
    9f5e:	7889      	ldrb	r1, [r1, #2]
    9f60:	7081      	strb	r1, [r0, #2]
    9f62:	2000      	movs	r0, #0
    9f64:	4770      	bx	lr
    9f66:	0000      	.short	0x0000
    9f68:	20000dc0 	.word	0x20000dc0

00009f6c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9f6c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9f70:	460d      	mov	r5, r1
    9f72:	4606      	mov	r6, r0
    9f74:	f000 fc12 	bl	a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9f78:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9f7c:	b1e0      	cbz	r0, 9fb8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    9f7e:	8830      	ldrh	r0, [r6, #0]
    9f80:	4669      	mov	r1, sp
    9f82:	f003 fa3a 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9f86:	2800      	cmp	r0, #0
    9f88:	d114      	bne.n	9fb4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9f8a:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9f8e:	2700      	movs	r7, #0
    9f90:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    9f94:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    9f98:	f005 f8bf 	bl	f11a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9f9c:	70a8      	strb	r0, [r5, #2]
    9f9e:	7860      	ldrb	r0, [r4, #1]
    9fa0:	f005 f8bb 	bl	f11a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9fa4:	70e8      	strb	r0, [r5, #3]
    9fa6:	78a0      	ldrb	r0, [r4, #2]
    9fa8:	3c66      	subs	r4, #102	; 0x66
    9faa:	2800      	cmp	r0, #0
    9fac:	d1f0      	bne.n	9f90 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    9fae:	8830      	ldrh	r0, [r6, #0]
    9fb0:	8028      	strh	r0, [r5, #0]
    9fb2:	2000      	movs	r0, #0
    9fb4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9fb8:	2001      	movs	r0, #1
    9fba:	e7fb      	b.n	9fb4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

00009fbc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9fbc:	b51c      	push	{r2, r3, r4, lr}
    9fbe:	8800      	ldrh	r0, [r0, #0]
    9fc0:	4669      	mov	r1, sp
    9fc2:	f003 fa1a 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9fc6:	2800      	cmp	r0, #0
    9fc8:	d10b      	bne.n	9fe2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9fca:	480b      	ldr	r0, [pc, #44]	; (9ff8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9fcc:	7800      	ldrb	r0, [r0, #0]
    9fce:	b188      	cbz	r0, 9ff4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9fd0:	9801      	ldr	r0, [sp, #4]
    9fd2:	f005 fa29 	bl	f428 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x346>
    9fd6:	b128      	cbz	r0, 9fe4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9fd8:	9801      	ldr	r0, [sp, #4]
    9fda:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    9fde:	b118      	cbz	r0, 9fe8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9fe0:	203a      	movs	r0, #58	; 0x3a
    9fe2:	bd1c      	pop	{r2, r3, r4, pc}
    9fe4:	2002      	movs	r0, #2
    9fe6:	bd1c      	pop	{r2, r3, r4, pc}
    9fe8:	9901      	ldr	r1, [sp, #4]
    9fea:	2001      	movs	r0, #1
    9fec:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    9ff0:	2000      	movs	r0, #0
    9ff2:	bd1c      	pop	{r2, r3, r4, pc}
    9ff4:	2011      	movs	r0, #17
    9ff6:	bd1c      	pop	{r2, r3, r4, pc}
    9ff8:	20000200 	.word	0x20000200

00009ffc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9ffc:	b510      	push	{r4, lr}
    9ffe:	4604      	mov	r4, r0
    a000:	f005 fa09 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a004:	b130      	cbz	r0, a014 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a006:	4804      	ldr	r0, [pc, #16]	; (a018 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a008:	8941      	ldrh	r1, [r0, #10]
    a00a:	8021      	strh	r1, [r4, #0]
    a00c:	8980      	ldrh	r0, [r0, #12]
    a00e:	8060      	strh	r0, [r4, #2]
    a010:	2000      	movs	r0, #0
    a012:	bd10      	pop	{r4, pc}
    a014:	2001      	movs	r0, #1
    a016:	bd10      	pop	{r4, pc}
    a018:	2000100c 	.word	0x2000100c

0000a01c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a01c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a01e:	4605      	mov	r5, r0
    a020:	f000 fbbc 	bl	a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a024:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a028:	b310      	cbz	r0, a070 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a02a:	2400      	movs	r4, #0
    a02c:	a802      	add	r0, sp, #8
    a02e:	f88d 4004 	strb.w	r4, [sp, #4]
    a032:	f88d 4008 	strb.w	r4, [sp, #8]
    a036:	9000      	str	r0, [sp, #0]
    a038:	78aa      	ldrb	r2, [r5, #2]
    a03a:	7869      	ldrb	r1, [r5, #1]
    a03c:	7828      	ldrb	r0, [r5, #0]
    a03e:	ab01      	add	r3, sp, #4
    a040:	f005 fa27 	bl	f492 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b0>
    a044:	2800      	cmp	r0, #0
    a046:	d112      	bne.n	a06e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a048:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a04c:	f005 f944 	bl	f2d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    a050:	b180      	cbz	r0, a074 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a052:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a056:	f005 f93f 	bl	f2d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    a05a:	b158      	cbz	r0, a074 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a05c:	4806      	ldr	r0, [pc, #24]	; (a078 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a05e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a062:	7481      	strb	r1, [r0, #18]
    a064:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a068:	74c1      	strb	r1, [r0, #19]
    a06a:	8284      	strh	r4, [r0, #20]
    a06c:	2000      	movs	r0, #0
    a06e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a070:	2001      	movs	r0, #1
    a072:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a074:	2011      	movs	r0, #17
    a076:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a078:	20000dc0 	.word	0x20000dc0

0000a07c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a07e:	460f      	mov	r7, r1
    a080:	4605      	mov	r5, r0
    a082:	7806      	ldrb	r6, [r0, #0]
    a084:	f005 f8d7 	bl	f236 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x154>
    a088:	2800      	cmp	r0, #0
    a08a:	d10a      	bne.n	a0a2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x26>
    a08c:	4628      	mov	r0, r5
    a08e:	f005 f8b6 	bl	f1fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11c>
    a092:	2800      	cmp	r0, #0
    a094:	d105      	bne.n	a0a2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x26>
    a096:	2001      	movs	r0, #1
    a098:	f7fa f844 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    a09c:	4286      	cmp	r6, r0
    a09e:	d301      	bcc.n	a0a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a0a0:	2007      	movs	r0, #7
    a0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0a4:	2101      	movs	r1, #1
    a0a6:	4630      	mov	r0, r6
    a0a8:	f003 f86f 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a0ac:	0004      	movs	r4, r0
    a0ae:	d10c      	bne.n	a0ca <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4e>
    a0b0:	2200      	movs	r2, #0
    a0b2:	2101      	movs	r1, #1
    a0b4:	4630      	mov	r0, r6
    a0b6:	f003 f84c 	bl	d152 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a0ba:	0004      	movs	r4, r0
    a0bc:	d00b      	beq.n	a0d6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    a0be:	f003 ff45 	bl	df4c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a0c2:	4915      	ldr	r1, [pc, #84]	; (a118 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9c>)
    a0c4:	4620      	mov	r0, r4
    a0c6:	f003 ff27 	bl	df18 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    a0ca:	4620      	mov	r0, r4
    a0cc:	f004 f953 	bl	e376 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    a0d0:	b130      	cbz	r0, a0e0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x64>
    a0d2:	200c      	movs	r0, #12
    a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0d6:	f241 213b 	movw	r1, #4667	; 0x123b
    a0da:	2039      	movs	r0, #57	; 0x39
    a0dc:	f7f9 fe40 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0e0:	4620      	mov	r0, r4
    a0e2:	f003 ff7f 	bl	dfe4 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a0e6:	7038      	strb	r0, [r7, #0]
    a0e8:	74e8      	strb	r0, [r5, #19]
    a0ea:	4629      	mov	r1, r5
    a0ec:	4620      	mov	r0, r4
    a0ee:	f7fc f911 	bl	6314 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    a0f2:	4606      	mov	r6, r0
    a0f4:	7e68      	ldrb	r0, [r5, #25]
    a0f6:	b168      	cbz	r0, a114 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
    a0f8:	b966      	cbnz	r6, a114 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
    a0fa:	20ff      	movs	r0, #255	; 0xff
    a0fc:	f88d 0000 	strb.w	r0, [sp]
    a100:	466a      	mov	r2, sp
    a102:	2100      	movs	r1, #0
    a104:	4620      	mov	r0, r4
    a106:	f003 ff85 	bl	e014 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    a10a:	466a      	mov	r2, sp
    a10c:	2100      	movs	r1, #0
    a10e:	4620      	mov	r0, r4
    a110:	f003 ff8a 	bl	e028 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    a114:	4630      	mov	r0, r6
    a116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a118:	2000100d 	.word	0x2000100d

0000a11c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a11c:	7801      	ldrb	r1, [r0, #0]
    a11e:	b179      	cbz	r1, a140 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a120:	7841      	ldrb	r1, [r0, #1]
    a122:	b169      	cbz	r1, a140 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a124:	8841      	ldrh	r1, [r0, #2]
    a126:	291b      	cmp	r1, #27
    a128:	d30a      	bcc.n	a140 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a12a:	8881      	ldrh	r1, [r0, #4]
    a12c:	291b      	cmp	r1, #27
    a12e:	d307      	bcc.n	a140 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a130:	4904      	ldr	r1, [pc, #16]	; (a144 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a132:	6802      	ldr	r2, [r0, #0]
    a134:	f8c1 2002 	str.w	r2, [r1, #2]
    a138:	8880      	ldrh	r0, [r0, #4]
    a13a:	80c8      	strh	r0, [r1, #6]
    a13c:	2000      	movs	r0, #0
    a13e:	4770      	bx	lr
    a140:	2012      	movs	r0, #18
    a142:	4770      	bx	lr
    a144:	20000dc0 	.word	0x20000dc0

0000a148 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a148:	6800      	ldr	r0, [r0, #0]
    a14a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a14e:	4288      	cmp	r0, r1
    a150:	d303      	bcc.n	a15a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a152:	4903      	ldr	r1, [pc, #12]	; (a160 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a154:	6088      	str	r0, [r1, #8]
    a156:	2000      	movs	r0, #0
    a158:	4770      	bx	lr
    a15a:	2012      	movs	r0, #18
    a15c:	4770      	bx	lr
    a15e:	0000      	.short	0x0000
    a160:	20000dc0 	.word	0x20000dc0

0000a164 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a164:	4a03      	ldr	r2, [pc, #12]	; (a174 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a166:	e9d2 1200 	ldrd	r1, r2, [r2]
    a16a:	6001      	str	r1, [r0, #0]
    a16c:	6042      	str	r2, [r0, #4]
    a16e:	2000      	movs	r0, #0
    a170:	4770      	bx	lr
    a172:	0000      	.short	0x0000
    a174:	0000a61c 	.word	0x0000a61c

0000a178 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    a178:	b510      	push	{r4, lr}
    a17a:	2005      	movs	r0, #5
    a17c:	f000 fb04 	bl	a788 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a180:	f7fd fe86 	bl	7e90 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a184:	4902      	ldr	r1, [pc, #8]	; (a190 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    a186:	4801      	ldr	r0, [pc, #4]	; (a18c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    a188:	6048      	str	r0, [r1, #4]
    a18a:	bd10      	pop	{r4, pc}
    a18c:	0000a25d 	.word	0x0000a25d
    a190:	20000200 	.word	0x20000200

0000a194 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a194:	4901      	ldr	r1, [pc, #4]	; (a19c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    a196:	7048      	strb	r0, [r1, #1]
    a198:	f000 b802 	b.w	a1a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a19c:	20000200 	.word	0x20000200

0000a1a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1a4:	f003 f86a 	bl	d27c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a1a8:	f7fb fa34 	bl	5614 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a1ac:	4c1a      	ldr	r4, [pc, #104]	; (a218 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>)
    a1ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    a1b2:	2600      	movs	r6, #0
    a1b4:	81e0      	strh	r0, [r4, #14]
    a1b6:	8220      	strh	r0, [r4, #16]
    a1b8:	75e6      	strb	r6, [r4, #23]
    a1ba:	8326      	strh	r6, [r4, #24]
    a1bc:	8026      	strh	r6, [r4, #0]
    a1be:	f7fa fa45 	bl	464c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI>
    a1c2:	a016      	add	r0, pc, #88	; (adr r0, a21c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7c>)
    a1c4:	4d17      	ldr	r5, [pc, #92]	; (a224 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>)
    a1c6:	6801      	ldr	r1, [r0, #0]
    a1c8:	7900      	ldrb	r0, [r0, #4]
    a1ca:	702e      	strb	r6, [r5, #0]
    a1cc:	f8c5 1001 	str.w	r1, [r5, #1]
    a1d0:	7168      	strb	r0, [r5, #5]
    a1d2:	2101      	movs	r1, #1
    a1d4:	2000      	movs	r0, #0
    a1d6:	f002 ffd8 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a1da:	0007      	movs	r7, r0
    a1dc:	d005      	beq.n	a1ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a>
    a1de:	f003 feb5 	bl	df4c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a1e2:	1c69      	adds	r1, r5, #1
    a1e4:	4638      	mov	r0, r7
    a1e6:	f003 fe97 	bl	df18 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    a1ea:	201b      	movs	r0, #27
    a1ec:	80e8      	strh	r0, [r5, #6]
    a1ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a1f2:	8129      	strh	r1, [r5, #8]
    a1f4:	8168      	strh	r0, [r5, #10]
    a1f6:	81a9      	strh	r1, [r5, #12]
    a1f8:	74a6      	strb	r6, [r4, #18]
    a1fa:	74e6      	strb	r6, [r4, #19]
    a1fc:	2103      	movs	r1, #3
    a1fe:	70a1      	strb	r1, [r4, #2]
    a200:	2102      	movs	r1, #2
    a202:	70e1      	strb	r1, [r4, #3]
    a204:	80a0      	strh	r0, [r4, #4]
    a206:	80e0      	strh	r0, [r4, #6]
    a208:	f640 60a6 	movw	r0, #3750	; 0xea6
    a20c:	60a0      	str	r0, [r4, #8]
    a20e:	75a6      	strb	r6, [r4, #22]
    a210:	7326      	strb	r6, [r4, #12]
    a212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a216:	0000      	.short	0x0000
    a218:	20000dc0 	.word	0x20000dc0
    a21c:	ffffffff 	.word	0xffffffff
    a220:	0000001f 	.word	0x0000001f
    a224:	2000100c 	.word	0x2000100c

0000a228 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    a228:	b510      	push	{r4, lr}
    a22a:	b158      	cbz	r0, a244 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    a22c:	490a      	ldr	r1, [pc, #40]	; (a258 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    a22e:	780a      	ldrb	r2, [r1, #0]
    a230:	b16a      	cbz	r2, a24e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    a232:	2200      	movs	r2, #0
    a234:	7042      	strb	r2, [r0, #1]
    a236:	2303      	movs	r3, #3
    a238:	7003      	strb	r3, [r0, #0]
    a23a:	2301      	movs	r3, #1
    a23c:	7103      	strb	r3, [r0, #4]
    a23e:	700a      	strb	r2, [r1, #0]
    a240:	4618      	mov	r0, r3
    a242:	bd10      	pop	{r4, pc}
    a244:	f241 71be 	movw	r1, #6078	; 0x17be
    a248:	2039      	movs	r0, #57	; 0x39
    a24a:	f7f9 fd89 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a252:	f7fb bd8d 	b.w	5d70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    a256:	0000      	.short	0x0000
    a258:	20000dc0 	.word	0x20000dc0
    a25c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a260:	4692      	mov	sl, r2
    a262:	460f      	mov	r7, r1
    a264:	4681      	mov	r9, r0
    a266:	f005 f8d6 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a26a:	2800      	cmp	r0, #0
    a26c:	d063      	beq.n	a336 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a26e:	4933      	ldr	r1, [pc, #204]	; (a33c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    a270:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    a274:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    a278:	88c8      	ldrh	r0, [r1, #6]
    a27a:	4290      	cmp	r0, r2
    a27c:	d300      	bcc.n	a280 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    a27e:	4610      	mov	r0, r2
    a280:	4680      	mov	r8, r0
    a282:	8948      	ldrh	r0, [r1, #10]
    a284:	42b0      	cmp	r0, r6
    a286:	d200      	bcs.n	a28a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    a288:	4606      	mov	r6, r0
    a28a:	890c      	ldrh	r4, [r1, #8]
    a28c:	f640 0048 	movw	r0, #2120	; 0x848
    a290:	4284      	cmp	r4, r0
    a292:	d300      	bcc.n	a296 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    a294:	4604      	mov	r4, r0
    a296:	898d      	ldrh	r5, [r1, #12]
    a298:	4285      	cmp	r5, r0
    a29a:	d300      	bcc.n	a29e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    a29c:	4605      	mov	r5, r0
    a29e:	4284      	cmp	r4, r0
    a2a0:	d300      	bcc.n	a2a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    a2a2:	4604      	mov	r4, r0
    a2a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a2a8:	2e1b      	cmp	r6, #27
    a2aa:	d001      	beq.n	a2b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    a2ac:	428d      	cmp	r5, r1
    a2ae:	d104      	bne.n	a2ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    a2b0:	f1b8 0f1b 	cmp.w	r8, #27
    a2b4:	d03f      	beq.n	a336 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a2b6:	428c      	cmp	r4, r1
    a2b8:	d03d      	beq.n	a336 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a2ba:	466a      	mov	r2, sp
    a2bc:	4651      	mov	r1, sl
    a2be:	4648      	mov	r0, r9
    a2c0:	f005 f82d 	bl	f31e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    a2c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a2c8:	4641      	mov	r1, r8
    a2ca:	4540      	cmp	r0, r8
    a2cc:	d900      	bls.n	a2d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    a2ce:	4608      	mov	r0, r1
    a2d0:	80f8      	strh	r0, [r7, #6]
    a2d2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a2d6:	42a1      	cmp	r1, r4
    a2d8:	d800      	bhi.n	a2dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    a2da:	460c      	mov	r4, r1
    a2dc:	813c      	strh	r4, [r7, #8]
    a2de:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a2e2:	42b1      	cmp	r1, r6
    a2e4:	d800      	bhi.n	a2e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    a2e6:	460e      	mov	r6, r1
    a2e8:	807e      	strh	r6, [r7, #2]
    a2ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a2ee:	42a9      	cmp	r1, r5
    a2f0:	d900      	bls.n	a2f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    a2f2:	4629      	mov	r1, r5
    a2f4:	80b9      	strh	r1, [r7, #4]
    a2f6:	2201      	movs	r2, #1
    a2f8:	703a      	strb	r2, [r7, #0]
    a2fa:	381b      	subs	r0, #27
    a2fc:	28e0      	cmp	r0, #224	; 0xe0
    a2fe:	d902      	bls.n	a306 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    a300:	f640 41b6 	movw	r1, #3254	; 0xcb6
    a304:	e014      	b.n	a330 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a306:	3e1b      	subs	r6, #27
    a308:	2ee0      	cmp	r6, #224	; 0xe0
    a30a:	d902      	bls.n	a312 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    a30c:	f640 41b8 	movw	r1, #3256	; 0xcb8
    a310:	e00e      	b.n	a330 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a312:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a316:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a31a:	4284      	cmp	r4, r0
    a31c:	d902      	bls.n	a324 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    a31e:	f640 41ba 	movw	r1, #3258	; 0xcba
    a322:	e005      	b.n	a330 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a324:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    a328:	4281      	cmp	r1, r0
    a32a:	d904      	bls.n	a336 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a32c:	f640 41bc 	movw	r1, #3260	; 0xcbc
    a330:	2039      	movs	r0, #57	; 0x39
    a332:	f7f9 fd15 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a336:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a33a:	0000      	.short	0x0000
    a33c:	2000100c 	.word	0x2000100c

0000a340 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a344:	b088      	sub	sp, #32
    a346:	460c      	mov	r4, r1
    a348:	4606      	mov	r6, r0
    a34a:	f003 fe4e 	bl	dfea <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a34e:	b198      	cbz	r0, a378 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a350:	4630      	mov	r0, r6
    a352:	f003 fe3d 	bl	dfd0 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a356:	b130      	cbz	r0, a366 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a358:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a35c:	2012      	movs	r0, #18
    a35e:	2900      	cmp	r1, #0
    a360:	d00b      	beq.n	a37a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a362:	2980      	cmp	r1, #128	; 0x80
    a364:	d809      	bhi.n	a37a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a366:	4630      	mov	r0, r6
    a368:	f003 fe2a 	bl	dfc0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a36c:	b140      	cbz	r0, a380 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a36e:	4630      	mov	r0, r6
    a370:	f003 fdb7 	bl	dee2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a374:	b130      	cbz	r0, a384 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    a376:	e009      	b.n	a38c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    a378:	2042      	movs	r0, #66	; 0x42
    a37a:	b008      	add	sp, #32
    a37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a380:	200c      	movs	r0, #12
    a382:	e7fa      	b.n	a37a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a384:	4630      	mov	r0, r6
    a386:	f003 fe1d 	bl	dfc4 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a38a:	b3a8      	cbz	r0, a3f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    a38c:	4630      	mov	r0, r6
    a38e:	f003 fff2 	bl	e376 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    a392:	2800      	cmp	r0, #0
    a394:	d1f4      	bne.n	a380 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a396:	4630      	mov	r0, r6
    a398:	f003 fdbf 	bl	df1a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a39c:	2800      	cmp	r0, #0
    a39e:	d1ef      	bne.n	a380 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a3a0:	4630      	mov	r0, r6
    a3a2:	f7fb feff 	bl	61a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a3a6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a3aa:	f242 7110 	movw	r1, #10000	; 0x2710
    a3ae:	fb00 f801 	mul.w	r8, r0, r1
    a3b2:	78e1      	ldrb	r1, [r4, #3]
    a3b4:	4630      	mov	r0, r6
    a3b6:	f003 fdfa 	bl	dfae <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a3ba:	4630      	mov	r0, r6
    a3bc:	f003 fe04 	bl	dfc8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a3c0:	b1e8      	cbz	r0, a3fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    a3c2:	2200      	movs	r2, #0
    a3c4:	4611      	mov	r1, r2
    a3c6:	a801      	add	r0, sp, #4
    a3c8:	f7f9 ff1e 	bl	4208 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a3cc:	0004      	movs	r4, r0
    a3ce:	d06a      	beq.n	a4a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a3d0:	2100      	movs	r1, #0
    a3d2:	f7fb fb85 	bl	5ae0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a3d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a3da:	8020      	strh	r0, [r4, #0]
    a3dc:	4621      	mov	r1, r4
    a3de:	4630      	mov	r0, r6
    a3e0:	f003 fe16 	bl	e010 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a3e4:	f005 f817 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a3e8:	4d3a      	ldr	r5, [pc, #232]	; (a4d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    a3ea:	2800      	cmp	r0, #0
    a3ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a3f0:	d00f      	beq.n	a412 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    a3f2:	88aa      	ldrh	r2, [r5, #4]
    a3f4:	88e9      	ldrh	r1, [r5, #6]
    a3f6:	e00e      	b.n	a416 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    a3f8:	e7ff      	b.n	a3fa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    a3fa:	2012      	movs	r0, #18
    a3fc:	e7bd      	b.n	a37a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a3fe:	4642      	mov	r2, r8
    a400:	2100      	movs	r1, #0
    a402:	4630      	mov	r0, r6
    a404:	f7fc fdf6 	bl	6ff4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a408:	2800      	cmp	r0, #0
    a40a:	d0b6      	beq.n	a37a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a40c:	f241 4102 	movw	r1, #5122	; 0x1402
    a410:	e053      	b.n	a4ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a412:	221b      	movs	r2, #27
    a414:	4611      	mov	r1, r2
    a416:	84c2      	strh	r2, [r0, #38]	; 0x26
    a418:	8501      	strh	r1, [r0, #40]	; 0x28
    a41a:	68a8      	ldr	r0, [r5, #8]
    a41c:	62a0      	str	r0, [r4, #40]	; 0x28
    a41e:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a422:	4630      	mov	r0, r6
    a424:	f003 fdd8 	bl	dfd8 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a428:	b910      	cbnz	r0, a430 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a42a:	4630      	mov	r0, r6
    a42c:	f003 fdee 	bl	e00c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a430:	6067      	str	r7, [r4, #4]
    a432:	8821      	ldrh	r1, [r4, #0]
    a434:	f8ad 1008 	strh.w	r1, [sp, #8]
    a438:	7ca9      	ldrb	r1, [r5, #18]
    a43a:	f88d 100a 	strb.w	r1, [sp, #10]
    a43e:	7ce9      	ldrb	r1, [r5, #19]
    a440:	f88d 100b 	strb.w	r1, [sp, #11]
    a444:	8aa9      	ldrh	r1, [r5, #20]
    a446:	f8ad 100c 	strh.w	r1, [sp, #12]
    a44a:	a905      	add	r1, sp, #20
    a44c:	9100      	str	r1, [sp, #0]
    a44e:	2001      	movs	r0, #1
    a450:	ab04      	add	r3, sp, #16
    a452:	aa02      	add	r2, sp, #8
    a454:	4621      	mov	r1, r4
    a456:	f004 ff9f 	bl	f398 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    a45a:	b140      	cbz	r0, a46e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a45c:	2100      	movs	r1, #0
    a45e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a462:	f7f9 fefb 	bl	425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a466:	b1f0      	cbz	r0, a4a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a468:	f241 414d 	movw	r1, #5197	; 0x144d
    a46c:	e025      	b.n	a4ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a46e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a472:	f88d 0018 	strb.w	r0, [sp, #24]
    a476:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a47a:	f88d 0019 	strb.w	r0, [sp, #25]
    a47e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a482:	f8ad 001a 	strh.w	r0, [sp, #26]
    a486:	a906      	add	r1, sp, #24
    a488:	4620      	mov	r0, r4
    a48a:	f003 f875 	bl	d578 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a48e:	78e8      	ldrb	r0, [r5, #3]
    a490:	9000      	str	r0, [sp, #0]
    a492:	78ab      	ldrb	r3, [r5, #2]
    a494:	88ea      	ldrh	r2, [r5, #6]
    a496:	88a9      	ldrh	r1, [r5, #4]
    a498:	8820      	ldrh	r0, [r4, #0]
    a49a:	f7f9 ffab 	bl	43f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a49e:	b120      	cbz	r0, a4aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a4a0:	f241 4158 	movw	r1, #5208	; 0x1458
    a4a4:	e009      	b.n	a4ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a4a6:	2009      	movs	r0, #9
    a4a8:	e767      	b.n	a37a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a4aa:	4642      	mov	r2, r8
    a4ac:	4621      	mov	r1, r4
    a4ae:	4630      	mov	r0, r6
    a4b0:	f7fc fda0 	bl	6ff4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a4b4:	b120      	cbz	r0, a4c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a4b6:	f241 415a 	movw	r1, #5210	; 0x145a
    a4ba:	2039      	movs	r0, #57	; 0x39
    a4bc:	f7f9 fc50 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4c0:	4805      	ldr	r0, [pc, #20]	; (a4d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a4c2:	6843      	ldr	r3, [r0, #4]
    a4c4:	b123      	cbz	r3, a4d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a4c6:	2200      	movs	r2, #0
    a4c8:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    a4cc:	4620      	mov	r0, r4
    a4ce:	4798      	blx	r3
    a4d0:	2000      	movs	r0, #0
    a4d2:	e752      	b.n	a37a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a4d4:	20000dc0 	.word	0x20000dc0
    a4d8:	20000200 	.word	0x20000200
    a4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4e0:	b088      	sub	sp, #32
    a4e2:	4604      	mov	r4, r0
    a4e4:	8800      	ldrh	r0, [r0, #0]
    a4e6:	a906      	add	r1, sp, #24
    a4e8:	f002 ff87 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a4ec:	2800      	cmp	r0, #0
    a4ee:	d147      	bne.n	a580 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a4f0:	9807      	ldr	r0, [sp, #28]
    a4f2:	2700      	movs	r7, #0
    a4f4:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    a4f8:	f88d 1008 	strb.w	r1, [sp, #8]
    a4fc:	9902      	ldr	r1, [sp, #8]
    a4fe:	9102      	str	r1, [sp, #8]
    a500:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a504:	f88d 100c 	strb.w	r1, [sp, #12]
    a508:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a50c:	3070      	adds	r0, #112	; 0x70
    a50e:	0689      	lsls	r1, r1, #26
    a510:	d502      	bpl.n	a518 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a512:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a516:	b149      	cbz	r1, a52c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a518:	f05f 0100 	movs.w	r1, #0
    a51c:	f88d 1004 	strb.w	r1, [sp, #4]
    a520:	2105      	movs	r1, #5
    a522:	3044      	adds	r0, #68	; 0x44
    a524:	f004 f905 	bl	e732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a528:	b110      	cbz	r0, a530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a52a:	e004      	b.n	a536 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a52c:	2101      	movs	r1, #1
    a52e:	e7f5      	b.n	a51c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a530:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a534:	b318      	cbz	r0, a57e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a536:	8921      	ldrh	r1, [r4, #8]
    a538:	88e0      	ldrh	r0, [r4, #6]
    a53a:	f004 fee2 	bl	f302 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a53e:	2800      	cmp	r0, #0
    a540:	d11e      	bne.n	a580 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a542:	88a1      	ldrh	r1, [r4, #4]
    a544:	8860      	ldrh	r0, [r4, #2]
    a546:	f004 fedc 	bl	f302 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a54a:	2800      	cmp	r0, #0
    a54c:	d118      	bne.n	a580 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a54e:	8921      	ldrh	r1, [r4, #8]
    a550:	88e0      	ldrh	r0, [r4, #6]
    a552:	f004 fecc 	bl	f2ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20c>
    a556:	2800      	cmp	r0, #0
    a558:	d112      	bne.n	a580 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a55a:	88a1      	ldrh	r1, [r4, #4]
    a55c:	8860      	ldrh	r0, [r4, #2]
    a55e:	f004 fec6 	bl	f2ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20c>
    a562:	0006      	movs	r6, r0
    a564:	d10c      	bne.n	a580 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a566:	9807      	ldr	r0, [sp, #28]
    a568:	f04f 0801 	mov.w	r8, #1
    a56c:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    a570:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    a574:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a578:	b129      	cbz	r1, a586 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a57a:	263a      	movs	r6, #58	; 0x3a
    a57c:	e02f      	b.n	a5de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a57e:	201a      	movs	r0, #26
    a580:	b008      	add	sp, #32
    a582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a586:	4639      	mov	r1, r7
    a588:	aa03      	add	r2, sp, #12
    a58a:	f004 fec8 	bl	f31e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    a58e:	8861      	ldrh	r1, [r4, #2]
    a590:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a594:	4281      	cmp	r1, r0
    a596:	d200      	bcs.n	a59a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a598:	4608      	mov	r0, r1
    a59a:	80e8      	strh	r0, [r5, #6]
    a59c:	88a1      	ldrh	r1, [r4, #4]
    a59e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a5a2:	4281      	cmp	r1, r0
    a5a4:	d200      	bcs.n	a5a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a5a6:	4608      	mov	r0, r1
    a5a8:	8128      	strh	r0, [r5, #8]
    a5aa:	88e2      	ldrh	r2, [r4, #6]
    a5ac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a5b0:	428a      	cmp	r2, r1
    a5b2:	d200      	bcs.n	a5b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a5b4:	4611      	mov	r1, r2
    a5b6:	8069      	strh	r1, [r5, #2]
    a5b8:	8922      	ldrh	r2, [r4, #8]
    a5ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a5be:	428a      	cmp	r2, r1
    a5c0:	d200      	bcs.n	a5c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a5c2:	4611      	mov	r1, r2
    a5c4:	f640 0248 	movw	r2, #2120	; 0x848
    a5c8:	80a9      	strh	r1, [r5, #4]
    a5ca:	4291      	cmp	r1, r2
    a5cc:	d300      	bcc.n	a5d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a5ce:	4611      	mov	r1, r2
    a5d0:	80a9      	strh	r1, [r5, #4]
    a5d2:	4290      	cmp	r0, r2
    a5d4:	d200      	bcs.n	a5d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a5d6:	4602      	mov	r2, r0
    a5d8:	812a      	strh	r2, [r5, #8]
    a5da:	f885 8000 	strb.w	r8, [r5]
    a5de:	706f      	strb	r7, [r5, #1]
    a5e0:	4630      	mov	r0, r6
    a5e2:	e7cd      	b.n	a580 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a5e4:	b510      	push	{r4, lr}
    a5e6:	4604      	mov	r4, r0
    a5e8:	88c1      	ldrh	r1, [r0, #6]
    a5ea:	8880      	ldrh	r0, [r0, #4]
    a5ec:	f004 fe89 	bl	f302 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a5f0:	2800      	cmp	r0, #0
    a5f2:	d10f      	bne.n	a614 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a5f4:	8861      	ldrh	r1, [r4, #2]
    a5f6:	8820      	ldrh	r0, [r4, #0]
    a5f8:	f004 fe83 	bl	f302 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a5fc:	2800      	cmp	r0, #0
    a5fe:	d109      	bne.n	a614 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a600:	4805      	ldr	r0, [pc, #20]	; (a618 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a602:	88a1      	ldrh	r1, [r4, #4]
    a604:	8141      	strh	r1, [r0, #10]
    a606:	8821      	ldrh	r1, [r4, #0]
    a608:	80c1      	strh	r1, [r0, #6]
    a60a:	88e1      	ldrh	r1, [r4, #6]
    a60c:	8181      	strh	r1, [r0, #12]
    a60e:	8861      	ldrh	r1, [r4, #2]
    a610:	8101      	strh	r1, [r0, #8]
    a612:	2000      	movs	r0, #0
    a614:	bd10      	pop	{r4, pc}
    a616:	0000      	.short	0x0000
    a618:	2000100c 	.word	0x2000100c
    a61c:	0b122b0b 	.word	0x0b122b0b
    a620:	122b0059 	.word	0x122b0059
    a624:	05060708 	.word	0x05060708
    a628:	00020304 	.word	0x00020304
    a62c:	f0f4f8fc 	.word	0xf0f4f8fc
    a630:	0304d8ec 	.word	0x0304d8ec
    a634:	f4f8fc00 	.word	0xf4f8fc00
    a638:	00d8ecf0 	.word	0x00d8ecf0

0000a63c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a63c:	b510      	push	{r4, lr}
    a63e:	4604      	mov	r4, r0
    a640:	4804      	ldr	r0, [pc, #16]	; (a654 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a642:	7004      	strb	r4, [r0, #0]
    a644:	6840      	ldr	r0, [r0, #4]
    a646:	f004 ffb1 	bl	f5ac <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a64a:	4620      	mov	r0, r4
    a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a650:	f7ff bda0 	b.w	a194 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a654:	20000208 	.word	0x20000208

0000a658 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a658:	b510      	push	{r4, lr}
    a65a:	4c07      	ldr	r4, [pc, #28]	; (a678 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a65c:	68a0      	ldr	r0, [r4, #8]
    a65e:	f004 ffa5 	bl	f5ac <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a662:	68e0      	ldr	r0, [r4, #12]
    a664:	f004 ffa2 	bl	f5ac <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a668:	f002 fe08 	bl	d27c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a66c:	f7fa ffd2 	bl	5614 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a674:	f7ff bd94 	b.w	a1a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a678:	20000208 	.word	0x20000208

0000a67c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a67c:	b500      	push	{lr}
    a67e:	4905      	ldr	r1, [pc, #20]	; (a694 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a680:	4805      	ldr	r0, [pc, #20]	; (a698 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a682:	f004 ff5f 	bl	f544 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a686:	4804      	ldr	r0, [pc, #16]	; (a698 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a688:	4904      	ldr	r1, [pc, #16]	; (a69c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a68a:	1d00      	adds	r0, r0, #4
    a68c:	f85d eb04 	ldr.w	lr, [sp], #4
    a690:	f004 bf58 	b.w	f544 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a694:	20000218 	.word	0x20000218
    a698:	2000020c 	.word	0x2000020c
    a69c:	20000220 	.word	0x20000220

0000a6a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a6a0:	b500      	push	{lr}
    a6a2:	4908      	ldr	r1, [pc, #32]	; (a6c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a6a4:	4808      	ldr	r0, [pc, #32]	; (a6c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a6a6:	f004 ff4d 	bl	f544 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a6aa:	4807      	ldr	r0, [pc, #28]	; (a6c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a6ac:	4907      	ldr	r1, [pc, #28]	; (a6cc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a6ae:	1d00      	adds	r0, r0, #4
    a6b0:	f004 ff48 	bl	f544 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a6b4:	4804      	ldr	r0, [pc, #16]	; (a6c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a6b6:	4906      	ldr	r1, [pc, #24]	; (a6d0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a6b8:	3008      	adds	r0, #8
    a6ba:	f85d eb04 	ldr.w	lr, [sp], #4
    a6be:	f004 bf41 	b.w	f544 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a6c2:	0000      	.short	0x0000
    a6c4:	20000244 	.word	0x20000244
    a6c8:	2000020c 	.word	0x2000020c
    a6cc:	2000024c 	.word	0x2000024c
    a6d0:	2000023c 	.word	0x2000023c

0000a6d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a6d4:	4801      	ldr	r0, [pc, #4]	; (a6dc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a6d6:	7840      	ldrb	r0, [r0, #1]
    a6d8:	4770      	bx	lr
    a6da:	0000      	.short	0x0000
    a6dc:	20000208 	.word	0x20000208
    a6e0:	b510      	push	{r4, lr}
    a6e2:	f7fb fed5 	bl	6490 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a6e6:	480c      	ldr	r0, [pc, #48]	; (a718 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>)
    a6e8:	7800      	ldrb	r0, [r0, #0]
    a6ea:	f7fc fd1d 	bl	7128 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a6ee:	480b      	ldr	r0, [pc, #44]	; (a71c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x48>)
    a6f0:	f7fb feb4 	bl	645c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a6f4:	490b      	ldr	r1, [pc, #44]	; (a724 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a6f6:	480a      	ldr	r0, [pc, #40]	; (a720 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x4c>)
    a6f8:	2200      	movs	r2, #0
    a6fa:	6008      	str	r0, [r1, #0]
    a6fc:	490b      	ldr	r1, [pc, #44]	; (a72c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x58>)
    a6fe:	480a      	ldr	r0, [pc, #40]	; (a728 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a700:	6008      	str	r0, [r1, #0]
    a702:	2101      	movs	r1, #1
    a704:	4610      	mov	r0, r2
    a706:	f002 fd24 	bl	d152 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a70a:	2800      	cmp	r0, #0
    a70c:	d103      	bne.n	a716 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x42>
    a70e:	21d3      	movs	r1, #211	; 0xd3
    a710:	2001      	movs	r0, #1
    a712:	f7f9 fb25 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a716:	bd10      	pop	{r4, pc}
    a718:	20000208 	.word	0x20000208
    a71c:	200011fd 	.word	0x200011fd
    a720:	00006265 	.word	0x00006265
    a724:	20000228 	.word	0x20000228
    a728:	00005e11 	.word	0x00005e11
    a72c:	2000022c 	.word	0x2000022c
    a730:	b510      	push	{r4, lr}
    a732:	4c0d      	ldr	r4, [pc, #52]	; (a768 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    a734:	2001      	movs	r0, #1
    a736:	7060      	strb	r0, [r4, #1]
    a738:	f7fb feda 	bl	64f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a73c:	7820      	ldrb	r0, [r4, #0]
    a73e:	f7fd fcff 	bl	8140 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a742:	f002 fd89 	bl	d258 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a746:	4909      	ldr	r1, [pc, #36]	; (a76c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    a748:	7820      	ldrb	r0, [r4, #0]
    a74a:	f7fa f9ef 	bl	4b2c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a74e:	f004 ff15 	bl	f57c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    a752:	4908      	ldr	r1, [pc, #32]	; (a774 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    a754:	4806      	ldr	r0, [pc, #24]	; (a770 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    a756:	6008      	str	r0, [r1, #0]
    a758:	4908      	ldr	r1, [pc, #32]	; (a77c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa8>)
    a75a:	4807      	ldr	r0, [pc, #28]	; (a778 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    a75c:	6008      	str	r0, [r1, #0]
    a75e:	4909      	ldr	r1, [pc, #36]	; (a784 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xb0>)
    a760:	4807      	ldr	r0, [pc, #28]	; (a780 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xac>)
    a762:	6008      	str	r0, [r1, #0]
    a764:	bd10      	pop	{r4, pc}
    a766:	0000      	.short	0x0000
    a768:	20000208 	.word	0x20000208
    a76c:	200011fd 	.word	0x200011fd
    a770:	00004ad9 	.word	0x00004ad9
    a774:	20000238 	.word	0x20000238
    a778:	00007ec1 	.word	0x00007ec1
    a77c:	20000234 	.word	0x20000234
    a780:	00005e85 	.word	0x00005e85
    a784:	20000230 	.word	0x20000230

0000a788 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a788:	2101      	movs	r1, #1
    a78a:	4081      	lsls	r1, r0
    a78c:	4802      	ldr	r0, [pc, #8]	; (a798 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a78e:	6802      	ldr	r2, [r0, #0]
    a790:	4311      	orrs	r1, r2
    a792:	6001      	str	r1, [r0, #0]
    a794:	4770      	bx	lr
    a796:	0000      	.short	0x0000
    a798:	20000254 	.word	0x20000254

0000a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a79c:	4801      	ldr	r0, [pc, #4]	; (a7a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a79e:	6800      	ldr	r0, [r0, #0]
    a7a0:	4770      	bx	lr
    a7a2:	0000      	.short	0x0000
    a7a4:	20000254 	.word	0x20000254

0000a7a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a7a8:	4803      	ldr	r0, [pc, #12]	; (a7b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a7aa:	8800      	ldrh	r0, [r0, #0]
    a7ac:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a7b0:	0040      	lsls	r0, r0, #1
    a7b2:	1c40      	adds	r0, r0, #1
    a7b4:	4770      	bx	lr
    a7b6:	0000      	.short	0x0000
    a7b8:	20000254 	.word	0x20000254

0000a7bc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a7bc:	b570      	push	{r4, r5, r6, lr}
    a7be:	4605      	mov	r5, r0
    a7c0:	4616      	mov	r6, r2
    a7c2:	460c      	mov	r4, r1
    a7c4:	2002      	movs	r0, #2
    a7c6:	f000 f999 	bl	aafc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a7ca:	4906      	ldr	r1, [pc, #24]	; (a7e4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a7cc:	2001      	movs	r0, #1
    a7ce:	1ef6      	subs	r6, r6, #3
    a7d0:	7008      	strb	r0, [r1, #0]
    a7d2:	4805      	ldr	r0, [pc, #20]	; (a7e8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a7d4:	6006      	str	r6, [r0, #0]
    a7d6:	4804      	ldr	r0, [pc, #16]	; (a7e8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a7d8:	3808      	subs	r0, #8
    a7da:	6005      	str	r5, [r0, #0]
    a7dc:	1f00      	subs	r0, r0, #4
    a7de:	6004      	str	r4, [r0, #0]
    a7e0:	bd70      	pop	{r4, r5, r6, pc}
    a7e2:	0000      	.short	0x0000
    a7e4:	2000029b 	.word	0x2000029b
    a7e8:	4000f510 	.word	0x4000f510

0000a7ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a7ec:	b510      	push	{r4, lr}
    a7ee:	4c0c      	ldr	r4, [pc, #48]	; (a820 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a7f0:	7820      	ldrb	r0, [r4, #0]
    a7f2:	b180      	cbz	r0, a816 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a7f4:	490b      	ldr	r1, [pc, #44]	; (a824 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a7f6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a7fa:	6008      	str	r0, [r1, #0]
    a7fc:	f000 f86a 	bl	a8d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a800:	2100      	movs	r1, #0
    a802:	b120      	cbz	r0, a80e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a804:	2001      	movs	r0, #1
    a806:	7060      	strb	r0, [r4, #1]
    a808:	4807      	ldr	r0, [pc, #28]	; (a828 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a80a:	6800      	ldr	r0, [r0, #0]
    a80c:	e001      	b.n	a812 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a80e:	7061      	strb	r1, [r4, #1]
    a810:	2010      	movs	r0, #16
    a812:	70a0      	strb	r0, [r4, #2]
    a814:	7021      	strb	r1, [r4, #0]
    a816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a81a:	2000      	movs	r0, #0
    a81c:	f000 b96e 	b.w	aafc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a820:	2000029b 	.word	0x2000029b
    a824:	4001f508 	.word	0x4001f508
    a828:	4000f400 	.word	0x4000f400

0000a82c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a82c:	b510      	push	{r4, lr}
    a82e:	2002      	movs	r0, #2
    a830:	f000 f964 	bl	aafc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a834:	4904      	ldr	r1, [pc, #16]	; (a848 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a836:	2001      	movs	r0, #1
    a838:	7008      	strb	r0, [r1, #0]
    a83a:	f000 f859 	bl	a8f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a83e:	4903      	ldr	r1, [pc, #12]	; (a84c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a840:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a844:	6008      	str	r0, [r1, #0]
    a846:	bd10      	pop	{r4, pc}
    a848:	2000029b 	.word	0x2000029b
    a84c:	4001f504 	.word	0x4001f504

0000a850 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a850:	4803      	ldr	r0, [pc, #12]	; (a860 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a852:	2100      	movs	r1, #0
    a854:	7001      	strb	r1, [r0, #0]
    a856:	7041      	strb	r1, [r0, #1]
    a858:	2110      	movs	r1, #16
    a85a:	7081      	strb	r1, [r0, #2]
    a85c:	4770      	bx	lr
    a85e:	0000      	.short	0x0000
    a860:	2000029b 	.word	0x2000029b

0000a864 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a864:	4807      	ldr	r0, [pc, #28]	; (a884 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a866:	b510      	push	{r4, lr}
    a868:	7801      	ldrb	r1, [r0, #0]
    a86a:	b141      	cbz	r1, a87e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a86c:	f000 f832 	bl	a8d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a870:	b118      	cbz	r0, a87a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a872:	4805      	ldr	r0, [pc, #20]	; (a888 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a874:	6800      	ldr	r0, [r0, #0]
    a876:	b2c0      	uxtb	r0, r0
    a878:	bd10      	pop	{r4, pc}
    a87a:	2010      	movs	r0, #16
    a87c:	bd10      	pop	{r4, pc}
    a87e:	7880      	ldrb	r0, [r0, #2]
    a880:	bd10      	pop	{r4, pc}
    a882:	0000      	.short	0x0000
    a884:	2000029b 	.word	0x2000029b
    a888:	4000f400 	.word	0x4000f400

0000a88c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a88c:	4808      	ldr	r0, [pc, #32]	; (a8b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a88e:	b510      	push	{r4, lr}
    a890:	7801      	ldrb	r1, [r0, #0]
    a892:	b159      	cbz	r1, a8ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a894:	4807      	ldr	r0, [pc, #28]	; (a8b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a896:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a89a:	b128      	cbz	r0, a8a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a89c:	f000 f80c 	bl	a8b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a8a0:	2800      	cmp	r0, #0
    a8a2:	d000      	beq.n	a8a6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a8a4:	2001      	movs	r0, #1
    a8a6:	bd10      	pop	{r4, pc}
    a8a8:	2002      	movs	r0, #2
    a8aa:	bd10      	pop	{r4, pc}
    a8ac:	7840      	ldrb	r0, [r0, #1]
    a8ae:	bd10      	pop	{r4, pc}
    a8b0:	2000029b 	.word	0x2000029b
    a8b4:	4000f000 	.word	0x4000f000
    a8b8:	4805      	ldr	r0, [pc, #20]	; (a8d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a8ba:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a8be:	b111      	cbz	r1, a8c6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a8c0:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a8c4:	b108      	cbz	r0, a8ca <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a8c6:	2000      	movs	r0, #0
    a8c8:	4770      	bx	lr
    a8ca:	2001      	movs	r0, #1
    a8cc:	4770      	bx	lr
    a8ce:	0000      	.short	0x0000
    a8d0:	4000f000 	.word	0x4000f000
    a8d4:	4805      	ldr	r0, [pc, #20]	; (a8ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a8d6:	b510      	push	{r4, lr}
    a8d8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a8dc:	b120      	cbz	r0, a8e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a8de:	f7ff ffeb 	bl	a8b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a8e2:	b108      	cbz	r0, a8e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a8e4:	2001      	movs	r0, #1
    a8e6:	bd10      	pop	{r4, pc}
    a8e8:	2000      	movs	r0, #0
    a8ea:	bd10      	pop	{r4, pc}
    a8ec:	4000f000 	.word	0x4000f000
    a8f0:	4804      	ldr	r0, [pc, #16]	; (a904 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a8f2:	2100      	movs	r1, #0
    a8f4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a8f8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a8fc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a900:	4770      	bx	lr
    a902:	0000      	.short	0x0000
    a904:	4000f000 	.word	0x4000f000

0000a908 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a908:	4a08      	ldr	r2, [pc, #32]	; (a92c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a90a:	b510      	push	{r4, lr}
    a90c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a910:	4907      	ldr	r1, [pc, #28]	; (a930 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a912:	4610      	mov	r0, r2
    a914:	f7f9 f918 	bl	3b48 <mpsl_fem_lna_configuration_set>
    a918:	2800      	cmp	r0, #0
    a91a:	d005      	beq.n	a928 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a91c:	1c40      	adds	r0, r0, #1
    a91e:	d003      	beq.n	a928 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a920:	2170      	movs	r1, #112	; 0x70
    a922:	2040      	movs	r0, #64	; 0x40
    a924:	f7f9 fa1c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a928:	bd10      	pop	{r4, pc}
    a92a:	0000      	.short	0x0000
    a92c:	20000258 	.word	0x20000258
    a930:	0000a960 	.word	0x0000a960

0000a934 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a934:	4a08      	ldr	r2, [pc, #32]	; (a958 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a936:	b510      	push	{r4, lr}
    a938:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a93c:	4907      	ldr	r1, [pc, #28]	; (a95c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a93e:	4610      	mov	r0, r2
    a940:	f7f9 f90e 	bl	3b60 <mpsl_fem_pa_configuration_set>
    a944:	2800      	cmp	r0, #0
    a946:	d005      	beq.n	a954 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a948:	1c40      	adds	r0, r0, #1
    a94a:	d003      	beq.n	a954 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a94c:	2165      	movs	r1, #101	; 0x65
    a94e:	2040      	movs	r0, #64	; 0x40
    a950:	f7f9 fa06 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a954:	bd10      	pop	{r4, pc}
    a956:	0000      	.short	0x0000
    a958:	20000258 	.word	0x20000258
    a95c:	0000a960 	.word	0x0000a960
    a960:	00000001 	.word	0x00000001
    a964:	40001110 	.word	0x40001110
	...

0000a978 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    a978:	b570      	push	{r4, r5, r6, lr}
    a97a:	4606      	mov	r6, r0
    a97c:	4614      	mov	r4, r2
    a97e:	460d      	mov	r5, r1
    a980:	2001      	movs	r0, #1
    a982:	f000 f8bb 	bl	aafc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a986:	4803      	ldr	r0, [pc, #12]	; (a994 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    a988:	6006      	str	r6, [r0, #0]
    a98a:	1d00      	adds	r0, r0, #4
    a98c:	6004      	str	r4, [r0, #0]
    a98e:	1d00      	adds	r0, r0, #4
    a990:	6005      	str	r5, [r0, #0]
    a992:	bd70      	pop	{r4, r5, r6, pc}
    a994:	4000f508 	.word	0x4000f508

0000a998 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a998:	480a      	ldr	r0, [pc, #40]	; (a9c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    a99a:	7801      	ldrb	r1, [r0, #0]
    a99c:	b171      	cbz	r1, a9bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    a99e:	4a0a      	ldr	r2, [pc, #40]	; (a9c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a9a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    a9a4:	6011      	str	r1, [r2, #0]
    a9a6:	4909      	ldr	r1, [pc, #36]	; (a9cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a9a8:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    a9ac:	2100      	movs	r1, #0
    a9ae:	b11a      	cbz	r2, a9b8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a9b0:	4a07      	ldr	r2, [pc, #28]	; (a9d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a9b2:	6812      	ldr	r2, [r2, #0]
    a9b4:	7042      	strb	r2, [r0, #1]
    a9b6:	e000      	b.n	a9ba <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a9b8:	7041      	strb	r1, [r0, #1]
    a9ba:	7001      	strb	r1, [r0, #0]
    a9bc:	2000      	movs	r0, #0
    a9be:	f000 b89d 	b.w	aafc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a9c2:	0000      	.short	0x0000
    a9c4:	2000029e 	.word	0x2000029e
    a9c8:	4001f508 	.word	0x4001f508
    a9cc:	4000f000 	.word	0x4000f000
    a9d0:	4000f400 	.word	0x4000f400

0000a9d4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    a9d4:	b570      	push	{r4, r5, r6, lr}
    a9d6:	4604      	mov	r4, r0
    a9d8:	4816      	ldr	r0, [pc, #88]	; (aa34 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    a9da:	460e      	mov	r6, r1
    a9dc:	2501      	movs	r5, #1
    a9de:	7005      	strb	r5, [r0, #0]
    a9e0:	4915      	ldr	r1, [pc, #84]	; (aa38 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a9e2:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    a9e6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a9ea:	6008      	str	r0, [r1, #0]
    a9ec:	f001 fb69 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a9f0:	b930      	cbnz	r0, aa00 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    a9f2:	4811      	ldr	r0, [pc, #68]	; (aa38 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a9f4:	3014      	adds	r0, #20
    a9f6:	6801      	ldr	r1, [r0, #0]
    a9f8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a9fc:	4331      	orrs	r1, r6
    a9fe:	6001      	str	r1, [r0, #0]
    aa00:	490e      	ldr	r1, [pc, #56]	; (aa3c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    aa02:	2200      	movs	r2, #0
    aa04:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    aa08:	4b0d      	ldr	r3, [pc, #52]	; (aa40 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    aa0a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    aa0e:	6018      	str	r0, [r3, #0]
    aa10:	b12c      	cbz	r4, aa1e <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    aa12:	2c01      	cmp	r4, #1
    aa14:	d007      	beq.n	aa26 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    aa16:	2185      	movs	r1, #133	; 0x85
    aa18:	203c      	movs	r0, #60	; 0x3c
    aa1a:	f7f9 f9a1 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa1e:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    aa22:	600d      	str	r5, [r1, #0]
    aa24:	bd70      	pop	{r4, r5, r6, pc}
    aa26:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    aa2a:	600d      	str	r5, [r1, #0]
    aa2c:	4904      	ldr	r1, [pc, #16]	; (aa40 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    aa2e:	1f09      	subs	r1, r1, #4
    aa30:	6008      	str	r0, [r1, #0]
    aa32:	bd70      	pop	{r4, r5, r6, pc}
    aa34:	2000029e 	.word	0x2000029e
    aa38:	4000f504 	.word	0x4000f504
    aa3c:	4000f000 	.word	0x4000f000
    aa40:	4001f508 	.word	0x4001f508

0000aa44 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    aa44:	4802      	ldr	r0, [pc, #8]	; (aa50 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    aa46:	2100      	movs	r1, #0
    aa48:	7001      	strb	r1, [r0, #0]
    aa4a:	7041      	strb	r1, [r0, #1]
    aa4c:	4770      	bx	lr
    aa4e:	0000      	.short	0x0000
    aa50:	2000029e 	.word	0x2000029e

0000aa54 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    aa54:	4806      	ldr	r0, [pc, #24]	; (aa70 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    aa56:	7801      	ldrb	r1, [r0, #0]
    aa58:	b141      	cbz	r1, aa6c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    aa5a:	4806      	ldr	r0, [pc, #24]	; (aa74 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    aa5c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    aa60:	2800      	cmp	r0, #0
    aa62:	d002      	beq.n	aa6a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    aa64:	4804      	ldr	r0, [pc, #16]	; (aa78 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    aa66:	6800      	ldr	r0, [r0, #0]
    aa68:	b2c0      	uxtb	r0, r0
    aa6a:	4770      	bx	lr
    aa6c:	7840      	ldrb	r0, [r0, #1]
    aa6e:	4770      	bx	lr
    aa70:	2000029e 	.word	0x2000029e
    aa74:	4000f000 	.word	0x4000f000
    aa78:	4000f400 	.word	0x4000f400

0000aa7c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    aa7c:	4901      	ldr	r1, [pc, #4]	; (aa84 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    aa7e:	2001      	movs	r0, #1
    aa80:	6088      	str	r0, [r1, #8]
    aa82:	4770      	bx	lr
    aa84:	4000f000 	.word	0x4000f000

0000aa88 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    aa88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa8c:	2800      	cmp	r0, #0
    aa8e:	d02c      	beq.n	aaea <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    aa90:	4817      	ldr	r0, [pc, #92]	; (aaf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    aa92:	7800      	ldrb	r0, [r0, #0]
    aa94:	b1b0      	cbz	r0, aac4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    aa96:	4d17      	ldr	r5, [pc, #92]	; (aaf4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    aa98:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    aa9c:	2800      	cmp	r0, #0
    aa9e:	d124      	bne.n	aaea <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    aaa0:	2702      	movs	r7, #2
    aaa2:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    aaa6:	4c14      	ldr	r4, [pc, #80]	; (aaf8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    aaa8:	6820      	ldr	r0, [r4, #0]
    aaaa:	43c0      	mvns	r0, r0
    aaac:	f340 1600 	sbfx	r6, r0, #4, #1
    aab0:	6820      	ldr	r0, [r4, #0]
    aab2:	f040 0010 	orr.w	r0, r0, #16
    aab6:	6020      	str	r0, [r4, #0]
    aab8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    aabc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    aac0:	1c76      	adds	r6, r6, #1
    aac2:	e007      	b.n	aad4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    aac4:	21fd      	movs	r1, #253	; 0xfd
    aac6:	203c      	movs	r0, #60	; 0x3c
    aac8:	f7f9 f94a 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aacc:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    aad0:	f7f8 ffec 	bl	3aac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    aad4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    aad8:	2800      	cmp	r0, #0
    aada:	d0f7      	beq.n	aacc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    aadc:	b91e      	cbnz	r6, aae6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    aade:	6820      	ldr	r0, [r4, #0]
    aae0:	f020 0010 	bic.w	r0, r0, #16
    aae4:	6020      	str	r0, [r4, #0]
    aae6:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aaee:	0000      	.short	0x0000
    aaf0:	2000029e 	.word	0x2000029e
    aaf4:	4000f000 	.word	0x4000f000
    aaf8:	e000ed10 	.word	0xe000ed10

0000aafc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    aafc:	b510      	push	{r4, lr}
    aafe:	4604      	mov	r4, r0
    ab00:	f000 f822 	bl	ab48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    ab04:	2c00      	cmp	r4, #0
    ab06:	d017      	beq.n	ab38 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    ab08:	4a0c      	ldr	r2, [pc, #48]	; (ab3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    ab0a:	480c      	ldr	r0, [pc, #48]	; (ab3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    ab0c:	490c      	ldr	r1, [pc, #48]	; (ab40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    ab0e:	3214      	adds	r2, #20
    ab10:	4b0c      	ldr	r3, [pc, #48]	; (ab44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    ab12:	2c01      	cmp	r4, #1
    ab14:	d005      	beq.n	ab22 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    ab16:	2c02      	cmp	r4, #2
    ab18:	d008      	beq.n	ab2c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    ab1a:	217d      	movs	r1, #125	; 0x7d
    ab1c:	203d      	movs	r0, #61	; 0x3d
    ab1e:	f7f9 f91f 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab22:	2402      	movs	r4, #2
    ab24:	6004      	str	r4, [r0, #0]
    ab26:	6011      	str	r1, [r2, #0]
    ab28:	0620      	lsls	r0, r4, #24
    ab2a:	e004      	b.n	ab36 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    ab2c:	2403      	movs	r4, #3
    ab2e:	6004      	str	r4, [r0, #0]
    ab30:	6011      	str	r1, [r2, #0]
    ab32:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ab36:	6018      	str	r0, [r3, #0]
    ab38:	bd10      	pop	{r4, pc}
    ab3a:	0000      	.short	0x0000
    ab3c:	4000f500 	.word	0x4000f500
    ab40:	200012ff 	.word	0x200012ff
    ab44:	4001f504 	.word	0x4001f504
    ab48:	4804      	ldr	r0, [pc, #16]	; (ab5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    ab4a:	2100      	movs	r1, #0
    ab4c:	6001      	str	r1, [r0, #0]
    ab4e:	6001      	str	r1, [r0, #0]
    ab50:	4903      	ldr	r1, [pc, #12]	; (ab60 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    ab52:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    ab56:	6008      	str	r0, [r1, #0]
    ab58:	4770      	bx	lr
    ab5a:	0000      	.short	0x0000
    ab5c:	4000f500 	.word	0x4000f500
    ab60:	4001f508 	.word	0x4001f508

0000ab64 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    ab64:	4805      	ldr	r0, [pc, #20]	; (ab7c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    ab66:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ab6a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    ab6e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ab72:	4903      	ldr	r1, [pc, #12]	; (ab80 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    ab74:	2000      	movs	r0, #0
    ab76:	6008      	str	r0, [r1, #0]
    ab78:	4770      	bx	lr
    ab7a:	0000      	.short	0x0000
    ab7c:	40001000 	.word	0x40001000
    ab80:	40001560 	.word	0x40001560

0000ab84 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    ab84:	4904      	ldr	r1, [pc, #16]	; (ab98 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    ab86:	6008      	str	r0, [r1, #0]
    ab88:	4804      	ldr	r0, [pc, #16]	; (ab9c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    ab8a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ab8e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    ab92:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ab96:	4770      	bx	lr
    ab98:	40001560 	.word	0x40001560
    ab9c:	40001000 	.word	0x40001000

0000aba0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    aba0:	4801      	ldr	r0, [pc, #4]	; (aba8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    aba2:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    aba6:	4770      	bx	lr
    aba8:	20000e00 	.word	0x20000e00

0000abac <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    abac:	4a01      	ldr	r2, [pc, #4]	; (abb4 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    abae:	7051      	strb	r1, [r2, #1]
    abb0:	7010      	strb	r0, [r2, #0]
    abb2:	4770      	bx	lr
    abb4:	20000e00 	.word	0x20000e00

0000abb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abba:	4c1e      	ldr	r4, [pc, #120]	; (ac34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    abbc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    abc0:	2710      	movs	r7, #16
    abc2:	f3c0 1600 	ubfx	r6, r0, #4, #1
    abc6:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    abca:	2002      	movs	r0, #2
    abcc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    abd0:	4819      	ldr	r0, [pc, #100]	; (ac38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    abd2:	2500      	movs	r5, #0
    abd4:	491a      	ldr	r1, [pc, #104]	; (ac40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    abd6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    abda:	4818      	ldr	r0, [pc, #96]	; (ac3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    abdc:	6008      	str	r0, [r1, #0]
    abde:	4819      	ldr	r0, [pc, #100]	; (ac44 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    abe0:	6800      	ldr	r0, [r0, #0]
    abe2:	b1b0      	cbz	r0, ac12 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    abe4:	20ff      	movs	r0, #255	; 0xff
    abe6:	f88d 0000 	strb.w	r0, [sp]
    abea:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    abee:	2001      	movs	r0, #1
    abf0:	6120      	str	r0, [r4, #16]
    abf2:	e004      	b.n	abfe <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    abf4:	f89d 0000 	ldrb.w	r0, [sp]
    abf8:	1e40      	subs	r0, r0, #1
    abfa:	f88d 0000 	strb.w	r0, [sp]
    abfe:	f89d 0000 	ldrb.w	r0, [sp]
    ac02:	b118      	cbz	r0, ac0c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    ac04:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    ac08:	2800      	cmp	r0, #0
    ac0a:	d0f3      	beq.n	abf4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    ac0c:	f89d 0000 	ldrb.w	r0, [sp]
    ac10:	b150      	cbz	r0, ac28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    ac12:	f000 fce9 	bl	b5e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    ac16:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    ac1a:	f000 fe73 	bl	b904 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    ac1e:	2e00      	cmp	r6, #0
    ac20:	d001      	beq.n	ac26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    ac22:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac28:	f240 71a3 	movw	r1, #1955	; 0x7a3
    ac2c:	203e      	movs	r0, #62	; 0x3e
    ac2e:	f7f9 f897 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac32:	0000      	.short	0x0000
    ac34:	40001000 	.word	0x40001000
    ac38:	20000e00 	.word	0x20000e00
    ac3c:	0c0e0000 	.word	0x0c0e0000
    ac40:	4001f508 	.word	0x4001f508
    ac44:	40001550 	.word	0x40001550

0000ac48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    ac48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac4c:	4c1f      	ldr	r4, [pc, #124]	; (accc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    ac4e:	4607      	mov	r7, r0
    ac50:	4688      	mov	r8, r1
    ac52:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    ac56:	07c1      	lsls	r1, r0, #31
    ac58:	d018      	beq.n	ac8c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    ac5a:	4a1d      	ldr	r2, [pc, #116]	; (acd0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    ac5c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    ac60:	6011      	str	r1, [r2, #0]
    ac62:	4d1c      	ldr	r5, [pc, #112]	; (acd4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    ac64:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    ac68:	f041 0101 	orr.w	r1, r1, #1
    ac6c:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    ac70:	f040 0002 	orr.w	r0, r0, #2
    ac74:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    ac78:	4640      	mov	r0, r8
    ac7a:	f000 fea9 	bl	b9d0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ac7e:	f000 fc81 	bl	b584 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    ac82:	2601      	movs	r6, #1
    ac84:	b13f      	cbz	r7, ac96 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    ac86:	2f01      	cmp	r7, #1
    ac88:	d00e      	beq.n	aca8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    ac8a:	e016      	b.n	acba <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    ac8c:	f240 6135 	movw	r1, #1589	; 0x635
    ac90:	203e      	movs	r0, #62	; 0x3e
    ac92:	f7f9 f865 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac96:	4640      	mov	r0, r8
    ac98:	f000 fc94 	bl	b5c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ac9c:	4640      	mov	r0, r8
    ac9e:	f000 fc55 	bl	b54c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    aca2:	72e6      	strb	r6, [r4, #11]
    aca4:	602e      	str	r6, [r5, #0]
    aca6:	e008      	b.n	acba <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aca8:	f000 fc94 	bl	b5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    acac:	f000 fe02 	bl	b8b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    acb0:	2002      	movs	r0, #2
    acb2:	72e0      	strb	r0, [r4, #11]
    acb4:	f000 fd0a 	bl	b6cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    acb8:	606e      	str	r6, [r5, #4]
    acba:	4807      	ldr	r0, [pc, #28]	; (acd8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    acbc:	64c6      	str	r6, [r0, #76]	; 0x4c
    acbe:	4807      	ldr	r0, [pc, #28]	; (acdc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    acc0:	6801      	ldr	r1, [r0, #0]
    acc2:	4638      	mov	r0, r7
    acc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    acc8:	f004 bd29 	b.w	f71e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    accc:	20000e00 	.word	0x20000e00
    acd0:	4001f504 	.word	0x4001f504
    acd4:	40001000 	.word	0x40001000
    acd8:	40008000 	.word	0x40008000
    acdc:	4000854c 	.word	0x4000854c

0000ace0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    ace0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ace4:	4d35      	ldr	r5, [pc, #212]	; (adbc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    ace6:	4606      	mov	r6, r0
    ace8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    acec:	4689      	mov	r9, r1
    acee:	6028      	str	r0, [r5, #0]
    acf0:	4c33      	ldr	r4, [pc, #204]	; (adc0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    acf2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    acf6:	f040 0002 	orr.w	r0, r0, #2
    acfa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    acfe:	4608      	mov	r0, r1
    ad00:	f000 fe66 	bl	b9d0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ad04:	f000 fc3e 	bl	b584 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    ad08:	f8df 80b8 	ldr.w	r8, [pc, #184]	; adc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    ad0c:	2700      	movs	r7, #0
    ad0e:	b116      	cbz	r6, ad16 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    ad10:	2e01      	cmp	r6, #1
    ad12:	d027      	beq.n	ad64 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    ad14:	e03f      	b.n	ad96 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ad16:	4648      	mov	r0, r9
    ad18:	f000 fc54 	bl	b5c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ad1c:	7a60      	ldrb	r0, [r4, #9]
    ad1e:	2801      	cmp	r0, #1
    ad20:	d105      	bne.n	ad2e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    ad22:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ad26:	f041 0108 	orr.w	r1, r1, #8
    ad2a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ad2e:	4648      	mov	r0, r9
    ad30:	f000 fc0c 	bl	b54c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    ad34:	2001      	movs	r0, #1
    ad36:	72e0      	strb	r0, [r4, #11]
    ad38:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ad3a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ad3e:	6320      	str	r0, [r4, #48]	; 0x30
    ad40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ad44:	6028      	str	r0, [r5, #0]
    ad46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ad4a:	f1b9 0f02 	cmp.w	r9, #2
    ad4e:	d007      	beq.n	ad60 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    ad50:	f640 0034 	movw	r0, #2100	; 0x834
    ad54:	f649 72ec 	movw	r2, #40940	; 0x9fec
    ad58:	4410      	add	r0, r2
    ad5a:	fbb0 f7f1 	udiv	r7, r0, r1
    ad5e:	e01a      	b.n	ad96 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ad60:	4608      	mov	r0, r1
    ad62:	e7f7      	b.n	ad54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    ad64:	f000 fc36 	bl	b5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    ad68:	f000 fda4 	bl	b8b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    ad6c:	7a60      	ldrb	r0, [r4, #9]
    ad6e:	2801      	cmp	r0, #1
    ad70:	d105      	bne.n	ad7e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    ad72:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ad76:	f041 0104 	orr.w	r1, r1, #4
    ad7a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ad7e:	2002      	movs	r0, #2
    ad80:	72e0      	strb	r0, [r4, #11]
    ad82:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ad84:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    ad88:	6320      	str	r0, [r4, #48]	; 0x30
    ad8a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ad8e:	6028      	str	r0, [r5, #0]
    ad90:	2729      	movs	r7, #41	; 0x29
    ad92:	f000 fc9b 	bl	b6cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    ad96:	f000 fc85 	bl	b6a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    ad9a:	f001 f869 	bl	be70 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    ad9e:	6800      	ldr	r0, [r0, #0]
    ada0:	2801      	cmp	r0, #1
    ada2:	d006      	beq.n	adb2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    ada4:	2100      	movs	r1, #0
    ada6:	4630      	mov	r0, r6
    ada8:	f004 fcb9 	bl	f71e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    adac:	4638      	mov	r0, r7
    adae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    adb2:	f7ff ff01 	bl	abb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    adb6:	2000      	movs	r0, #0
    adb8:	e7f9      	b.n	adae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    adba:	0000      	.short	0x0000
    adbc:	4001f504 	.word	0x4001f504
    adc0:	20000e00 	.word	0x20000e00
    adc4:	40001000 	.word	0x40001000

0000adc8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    adc8:	4a02      	ldr	r2, [pc, #8]	; (add4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    adca:	6b93      	ldr	r3, [r2, #56]	; 0x38
    adcc:	6003      	str	r3, [r0, #0]
    adce:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    add0:	6008      	str	r0, [r1, #0]
    add2:	4770      	bx	lr
    add4:	20000e00 	.word	0x20000e00

0000add8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    add8:	4601      	mov	r1, r0
    adda:	2214      	movs	r2, #20
    addc:	4801      	ldr	r0, [pc, #4]	; (ade4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    adde:	f001 b9c2 	b.w	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ade2:	0000      	.short	0x0000
    ade4:	20000dec 	.word	0x20000dec

0000ade8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ade8:	490e      	ldr	r1, [pc, #56]	; (ae24 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    adea:	b510      	push	{r4, lr}
    adec:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    adee:	4282      	cmp	r2, r0
    adf0:	d302      	bcc.n	adf8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    adf2:	f640 0123 	movw	r1, #2083	; 0x823
    adf6:	e00a      	b.n	ae0e <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    adf8:	2201      	movs	r2, #1
    adfa:	740a      	strb	r2, [r1, #16]
    adfc:	6148      	str	r0, [r1, #20]
    adfe:	490a      	ldr	r1, [pc, #40]	; (ae28 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    ae00:	644a      	str	r2, [r1, #68]	; 0x44
    ae02:	4a0a      	ldr	r2, [pc, #40]	; (ae2c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ae04:	6813      	ldr	r3, [r2, #0]
    ae06:	4283      	cmp	r3, r0
    ae08:	d304      	bcc.n	ae14 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    ae0a:	f640 012c 	movw	r1, #2092	; 0x82c
    ae0e:	203e      	movs	r0, #62	; 0x3e
    ae10:	f7f8 ffa6 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae14:	2300      	movs	r3, #0
    ae16:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ae1a:	6010      	str	r0, [r2, #0]
    ae1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae20:	f000 bd56 	b.w	b8d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    ae24:	20000e00 	.word	0x20000e00
    ae28:	40008000 	.word	0x40008000
    ae2c:	40008544 	.word	0x40008544

0000ae30 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ae30:	b570      	push	{r4, r5, r6, lr}
    ae32:	4c10      	ldr	r4, [pc, #64]	; (ae74 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ae34:	4606      	mov	r6, r0
    ae36:	2002      	movs	r0, #2
    ae38:	7420      	strb	r0, [r4, #16]
    ae3a:	2596      	movs	r5, #150	; 0x96
    ae3c:	f000 f866 	bl	af0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    ae40:	4602      	mov	r2, r0
    ae42:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    ae46:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    ae4a:	2801      	cmp	r0, #1
    ae4c:	d00d      	beq.n	ae6a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    ae4e:	4628      	mov	r0, r5
    ae50:	f004 fc7d 	bl	f74e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ae54:	4908      	ldr	r1, [pc, #32]	; (ae78 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    ae56:	6160      	str	r0, [r4, #20]
    ae58:	2000      	movs	r0, #0
    ae5a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ae5e:	6961      	ldr	r1, [r4, #20]
    ae60:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ae62:	4408      	add	r0, r1
    ae64:	4905      	ldr	r1, [pc, #20]	; (ae7c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ae66:	6008      	str	r0, [r1, #0]
    ae68:	bd70      	pop	{r4, r5, r6, pc}
    ae6a:	4633      	mov	r3, r6
    ae6c:	4628      	mov	r0, r5
    ae6e:	f004 fc8a 	bl	f786 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ae72:	e7ef      	b.n	ae54 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ae74:	20000e00 	.word	0x20000e00
    ae78:	40008000 	.word	0x40008000
    ae7c:	40008544 	.word	0x40008544

0000ae80 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ae80:	b510      	push	{r4, lr}
    ae82:	f001 f93a 	bl	c0fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ae86:	2800      	cmp	r0, #0
    ae88:	d006      	beq.n	ae98 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    ae8a:	4804      	ldr	r0, [pc, #16]	; (ae9c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ae8c:	6801      	ldr	r1, [r0, #0]
    ae8e:	f021 0101 	bic.w	r1, r1, #1
    ae92:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ae96:	6001      	str	r1, [r0, #0]
    ae98:	bd10      	pop	{r4, pc}
    ae9a:	0000      	.short	0x0000
    ae9c:	40001774 	.word	0x40001774

0000aea0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    aea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aea4:	2240      	movs	r2, #64	; 0x40
    aea6:	2100      	movs	r1, #0
    aea8:	4813      	ldr	r0, [pc, #76]	; (aef8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    aeaa:	f001 f9d6 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aeae:	f000 fd29 	bl	b904 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    aeb2:	f001 f8db 	bl	c06c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    aeb6:	4d11      	ldr	r5, [pc, #68]	; (aefc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aeb8:	4e10      	ldr	r6, [pc, #64]	; (aefc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aeba:	2400      	movs	r4, #0
    aebc:	4f0f      	ldr	r7, [pc, #60]	; (aefc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aebe:	3508      	adds	r5, #8
    aec0:	3610      	adds	r6, #16
    aec2:	b928      	cbnz	r0, aed0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    aec4:	f001 f8e9 	bl	c09a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    aec8:	b910      	cbnz	r0, aed0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    aeca:	f001 f8f0 	bl	c0ae <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    aece:	b108      	cbz	r0, aed4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    aed0:	2224      	movs	r2, #36	; 0x24
    aed2:	e006      	b.n	aee2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aed4:	f001 f92b 	bl	c12e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    aed8:	b910      	cbnz	r0, aee0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    aeda:	f001 f91e 	bl	c11a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    aede:	b140      	cbz	r0, aef2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    aee0:	2240      	movs	r2, #64	; 0x40
    aee2:	21ff      	movs	r1, #255	; 0xff
    aee4:	4638      	mov	r0, r7
    aee6:	f001 f9b8 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aeea:	602c      	str	r4, [r5, #0]
    aeec:	6034      	str	r4, [r6, #0]
    aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aef2:	2238      	movs	r2, #56	; 0x38
    aef4:	e7f5      	b.n	aee2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aef6:	0000      	.short	0x0000
    aef8:	20000e00 	.word	0x20000e00
    aefc:	40000e00 	.word	0x40000e00

0000af00 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    af00:	4901      	ldr	r1, [pc, #4]	; (af08 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    af02:	7008      	strb	r0, [r1, #0]
    af04:	4770      	bx	lr
    af06:	0000      	.short	0x0000
    af08:	20000270 	.word	0x20000270

0000af0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    af0c:	4814      	ldr	r0, [pc, #80]	; (af60 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    af0e:	b510      	push	{r4, lr}
    af10:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    af14:	7ac0      	ldrb	r0, [r0, #11]
    af16:	b141      	cbz	r1, af2a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    af18:	2902      	cmp	r1, #2
    af1a:	d00b      	beq.n	af34 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    af1c:	2802      	cmp	r0, #2
    af1e:	d009      	beq.n	af34 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    af20:	2901      	cmp	r1, #1
    af22:	d00b      	beq.n	af3c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    af24:	2801      	cmp	r0, #1
    af26:	d009      	beq.n	af3c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    af28:	e015      	b.n	af56 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    af2a:	2800      	cmp	r0, #0
    af2c:	d1f6      	bne.n	af1c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    af2e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    af32:	e00d      	b.n	af50 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    af34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af38:	f000 bc56 	b.w	b7e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    af3c:	4809      	ldr	r0, [pc, #36]	; (af64 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    af3e:	6800      	ldr	r0, [r0, #0]
    af40:	f000 000f 	and.w	r0, r0, #15
    af44:	2803      	cmp	r0, #3
    af46:	d006      	beq.n	af56 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    af48:	2804      	cmp	r0, #4
    af4a:	d006      	beq.n	af5a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    af4c:	f240 210b 	movw	r1, #523	; 0x20b
    af50:	203e      	movs	r0, #62	; 0x3e
    af52:	f7f8 ff05 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af56:	2001      	movs	r0, #1
    af58:	bd10      	pop	{r4, pc}
    af5a:	2002      	movs	r0, #2
    af5c:	bd10      	pop	{r4, pc}
    af5e:	0000      	.short	0x0000
    af60:	20000e00 	.word	0x20000e00
    af64:	40001510 	.word	0x40001510

0000af68 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    af68:	4801      	ldr	r0, [pc, #4]	; (af70 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    af6a:	6a00      	ldr	r0, [r0, #32]
    af6c:	4770      	bx	lr
    af6e:	0000      	.short	0x0000
    af70:	20000e00 	.word	0x20000e00

0000af74 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    af74:	4801      	ldr	r0, [pc, #4]	; (af7c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    af76:	7f40      	ldrb	r0, [r0, #29]
    af78:	4770      	bx	lr
    af7a:	0000      	.short	0x0000
    af7c:	20000e00 	.word	0x20000e00

0000af80 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    af80:	4913      	ldr	r1, [pc, #76]	; (afd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    af82:	b510      	push	{r4, lr}
    af84:	6b08      	ldr	r0, [r1, #48]	; 0x30
    af86:	4a13      	ldr	r2, [pc, #76]	; (afd4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    af88:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    af8c:	6010      	str	r0, [r2, #0]
    af8e:	2000      	movs	r0, #0
    af90:	6308      	str	r0, [r1, #48]	; 0x30
    af92:	7408      	strb	r0, [r1, #16]
    af94:	6248      	str	r0, [r1, #36]	; 0x24
    af96:	6208      	str	r0, [r1, #32]
    af98:	490f      	ldr	r1, [pc, #60]	; (afd8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    af9a:	6008      	str	r0, [r1, #0]
    af9c:	1f09      	subs	r1, r1, #4
    af9e:	6008      	str	r0, [r1, #0]
    afa0:	1f09      	subs	r1, r1, #4
    afa2:	6008      	str	r0, [r1, #0]
    afa4:	490c      	ldr	r1, [pc, #48]	; (afd8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    afa6:	1d09      	adds	r1, r1, #4
    afa8:	6008      	str	r0, [r1, #0]
    afaa:	490c      	ldr	r1, [pc, #48]	; (afdc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    afac:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    afb0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    afb4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    afb8:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    afbc:	f7ff fdfc 	bl	abb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    afc0:	2001      	movs	r0, #1
    afc2:	f004 fb7b 	bl	f6bc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    afc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afca:	2001      	movs	r0, #1
    afcc:	f004 bb69 	b.w	f6a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    afd0:	20000e00 	.word	0x20000e00
    afd4:	4001f508 	.word	0x4001f508
    afd8:	40008548 	.word	0x40008548
    afdc:	40008000 	.word	0x40008000

0000afe0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    afe0:	b570      	push	{r4, r5, r6, lr}
    afe2:	2001      	movs	r0, #1
    afe4:	f004 fb6a 	bl	f6bc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    afe8:	4837      	ldr	r0, [pc, #220]	; (b0c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    afea:	2400      	movs	r4, #0
    afec:	6004      	str	r4, [r0, #0]
    afee:	2601      	movs	r6, #1
    aff0:	6006      	str	r6, [r0, #0]
    aff2:	f001 f872 	bl	c0da <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    aff6:	4d35      	ldr	r5, [pc, #212]	; (b0cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aff8:	b118      	cbz	r0, b002 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    affa:	6828      	ldr	r0, [r5, #0]
    affc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b000:	6028      	str	r0, [r5, #0]
    b002:	f001 f85e 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b006:	b128      	cbz	r0, b014 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    b008:	6828      	ldr	r0, [r5, #0]
    b00a:	4931      	ldr	r1, [pc, #196]	; (b0d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b00c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b010:	4308      	orrs	r0, r1
    b012:	6028      	str	r0, [r5, #0]
    b014:	f001 f871 	bl	c0fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b018:	b138      	cbz	r0, b02a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    b01a:	482c      	ldr	r0, [pc, #176]	; (b0cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b01c:	1d00      	adds	r0, r0, #4
    b01e:	6801      	ldr	r1, [r0, #0]
    b020:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b024:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b028:	6001      	str	r1, [r0, #0]
    b02a:	4928      	ldr	r1, [pc, #160]	; (b0cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b02c:	4829      	ldr	r0, [pc, #164]	; (b0d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b02e:	313c      	adds	r1, #60	; 0x3c
    b030:	6008      	str	r0, [r1, #0]
    b032:	f7f8 fda1 	bl	3b78 <mpsl_fem_device_config_254_apply_get>
    b036:	b140      	cbz	r0, b04a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b038:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b03c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b040:	1c41      	adds	r1, r0, #1
    b042:	d002      	beq.n	b04a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b044:	4921      	ldr	r1, [pc, #132]	; (b0cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b046:	3110      	adds	r1, #16
    b048:	6008      	str	r0, [r1, #0]
    b04a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b04e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b050:	1c41      	adds	r1, r0, #1
    b052:	d004      	beq.n	b05e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    b054:	4920      	ldr	r1, [pc, #128]	; (b0d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b056:	680a      	ldr	r2, [r1, #0]
    b058:	f360 4217 	bfi	r2, r0, #16, #8
    b05c:	600a      	str	r2, [r1, #0]
    b05e:	491e      	ldr	r1, [pc, #120]	; (b0d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b060:	f240 605b 	movw	r0, #1627	; 0x65b
    b064:	3954      	subs	r1, #84	; 0x54
    b066:	6008      	str	r0, [r1, #0]
    b068:	1f09      	subs	r1, r1, #4
    b06a:	f240 1003 	movw	r0, #259	; 0x103
    b06e:	6008      	str	r0, [r1, #0]
    b070:	1f08      	subs	r0, r1, #4
    b072:	6006      	str	r6, [r0, #0]
    b074:	2001      	movs	r0, #1
    b076:	f000 fcab 	bl	b9d0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b07a:	4917      	ldr	r1, [pc, #92]	; (b0d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b07c:	f240 1001 	movw	r0, #257	; 0x101
    b080:	31c4      	adds	r1, #196	; 0xc4
    b082:	6008      	str	r0, [r1, #0]
    b084:	4e15      	ldr	r6, [pc, #84]	; (b0dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b086:	2502      	movs	r5, #2
    b088:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b08c:	4915      	ldr	r1, [pc, #84]	; (b0e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b08e:	4814      	ldr	r0, [pc, #80]	; (b0e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b090:	6008      	str	r0, [r1, #0]
    b092:	4815      	ldr	r0, [pc, #84]	; (b0e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b094:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b098:	8784      	strh	r4, [r0, #60]	; 0x3c
    b09a:	3014      	adds	r0, #20
    b09c:	6244      	str	r4, [r0, #36]	; 0x24
    b09e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    b0a2:	2001      	movs	r0, #1
    b0a4:	f004 fafd 	bl	f6a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b0a8:	2010      	movs	r0, #16
    b0aa:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b0ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b0b2:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b0b6:	480d      	ldr	r0, [pc, #52]	; (b0ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b0b8:	6840      	ldr	r0, [r0, #4]
    b0ba:	2800      	cmp	r0, #0
    b0bc:	d002      	beq.n	b0c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    b0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b0c2:	4700      	bx	r0
    b0c4:	bd70      	pop	{r4, r5, r6, pc}
    b0c6:	0000      	.short	0x0000
    b0c8:	40001ffc 	.word	0x40001ffc
    b0cc:	4000173c 	.word	0x4000173c
    b0d0:	80000096 	.word	0x80000096
    b0d4:	8900002c 	.word	0x8900002c
    b0d8:	4000158c 	.word	0x4000158c
    b0dc:	40001000 	.word	0x40001000
    b0e0:	0c0e0000 	.word	0x0c0e0000
    b0e4:	4001f508 	.word	0x4001f508
    b0e8:	20000dec 	.word	0x20000dec
    b0ec:	20000270 	.word	0x20000270

0000b0f0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b0f0:	4901      	ldr	r1, [pc, #4]	; (b0f8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b0f2:	7608      	strb	r0, [r1, #24]
    b0f4:	4770      	bx	lr
    b0f6:	0000      	.short	0x0000
    b0f8:	20000e00 	.word	0x20000e00

0000b0fc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b0fc:	4904      	ldr	r1, [pc, #16]	; (b110 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b0fe:	6008      	str	r0, [r1, #0]
    b100:	4804      	ldr	r0, [pc, #16]	; (b114 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b102:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    b106:	f041 0101 	orr.w	r1, r1, #1
    b10a:	7001      	strb	r1, [r0, #0]
    b10c:	f000 ba92 	b.w	b634 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    b110:	40001504 	.word	0x40001504
    b114:	20000e00 	.word	0x20000e00

0000b118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b11c:	4e35      	ldr	r6, [pc, #212]	; (b1f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    b11e:	4607      	mov	r7, r0
    b120:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b124:	468a      	mov	sl, r1
    b126:	4614      	mov	r4, r2
    b128:	6030      	str	r0, [r6, #0]
    b12a:	4610      	mov	r0, r2
    b12c:	f000 fc50 	bl	b9d0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b130:	f000 fa28 	bl	b584 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b134:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b1f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    b138:	4d30      	ldr	r5, [pc, #192]	; (b1fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b13a:	f04f 0801 	mov.w	r8, #1
    b13e:	b127      	cbz	r7, b14a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b140:	2f01      	cmp	r7, #1
    b142:	d01d      	beq.n	b180 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b144:	f240 7124 	movw	r1, #1828	; 0x724
    b148:	e04a      	b.n	b1e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    b14a:	4620      	mov	r0, r4
    b14c:	f000 fa3a 	bl	b5c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b150:	4620      	mov	r0, r4
    b152:	f000 f9fb 	bl	b54c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b156:	2c02      	cmp	r4, #2
    b158:	d00f      	beq.n	b17a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b15a:	f640 0034 	movw	r0, #2100	; 0x834
    b15e:	bf00      	nop
    b160:	f649 51f8 	movw	r1, #40440	; 0x9df8
    b164:	4401      	add	r1, r0
    b166:	4650      	mov	r0, sl
    b168:	f000 fbd6 	bl	b918 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    b16c:	4604      	mov	r4, r0
    b16e:	4648      	mov	r0, r9
    b170:	f000 fbbc 	bl	b8ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>
    b174:	f885 800b 	strb.w	r8, [r5, #11]
    b178:	e014      	b.n	b1a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b17a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b17e:	e7ef      	b.n	b160 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    b180:	f000 fa28 	bl	b5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b184:	f000 fb96 	bl	b8b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b188:	f000 faa0 	bl	b6cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    b18c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b190:	4650      	mov	r0, sl
    b192:	f000 fbc1 	bl	b918 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    b196:	4604      	mov	r4, r0
    b198:	4817      	ldr	r0, [pc, #92]	; (b1f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b19a:	1d00      	adds	r0, r0, #4
    b19c:	f000 fba6 	bl	b8ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>
    b1a0:	2002      	movs	r0, #2
    b1a2:	72e8      	strb	r0, [r5, #11]
    b1a4:	4816      	ldr	r0, [pc, #88]	; (b200 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b1a6:	6004      	str	r4, [r0, #0]
    b1a8:	4917      	ldr	r1, [pc, #92]	; (b208 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    b1aa:	4816      	ldr	r0, [pc, #88]	; (b204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    b1ac:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b1b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b1b2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b1b6:	6328      	str	r0, [r5, #48]	; 0x30
    b1b8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b1bc:	6030      	str	r0, [r6, #0]
    b1be:	2110      	movs	r1, #16
    b1c0:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    b1c4:	1200      	asrs	r0, r0, #8
    b1c6:	6030      	str	r0, [r6, #0]
    b1c8:	f000 fa6c 	bl	b6a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    b1cc:	490f      	ldr	r1, [pc, #60]	; (b20c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    b1ce:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    b1d2:	480b      	ldr	r0, [pc, #44]	; (b200 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b1d4:	300c      	adds	r0, #12
    b1d6:	6800      	ldr	r0, [r0, #0]
    b1d8:	42a0      	cmp	r0, r4
    b1da:	d304      	bcc.n	b1e6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    b1dc:	f240 7149 	movw	r1, #1865	; 0x749
    b1e0:	203e      	movs	r0, #62	; 0x3e
    b1e2:	f7f8 fdbd 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1e6:	4621      	mov	r1, r4
    b1e8:	4638      	mov	r0, r7
    b1ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1ee:	f004 ba96 	b.w	f71e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b1f2:	0000      	.short	0x0000
    b1f4:	4001f504 	.word	0x4001f504
    b1f8:	40001000 	.word	0x40001000
    b1fc:	20000e00 	.word	0x20000e00
    b200:	40008540 	.word	0x40008540
    b204:	40008140 	.word	0x40008140
    b208:	4001f098 	.word	0x4001f098
    b20c:	40008000 	.word	0x40008000

0000b210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b210:	b510      	push	{r4, lr}
    b212:	b14a      	cbz	r2, b228 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    b214:	4c12      	ldr	r4, [pc, #72]	; (b260 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    b216:	7260      	strb	r0, [r4, #9]
    b218:	7363      	strb	r3, [r4, #13]
    b21a:	07d0      	lsls	r0, r2, #31
    b21c:	d007      	beq.n	b22e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b21e:	2a01      	cmp	r2, #1
    b220:	d005      	beq.n	b22e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b222:	f640 111e 	movw	r1, #2334	; 0x91e
    b226:	e00c      	b.n	b242 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b228:	f640 1117 	movw	r1, #2327	; 0x917
    b22c:	e009      	b.n	b242 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b22e:	b159      	cbz	r1, b248 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    b230:	2002      	movs	r0, #2
    b232:	72a0      	strb	r0, [r4, #10]
    b234:	7322      	strb	r2, [r4, #12]
    b236:	2801      	cmp	r0, #1
    b238:	d008      	beq.n	b24c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    b23a:	2802      	cmp	r0, #2
    b23c:	d00f      	beq.n	b25e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    b23e:	f640 1135 	movw	r1, #2357	; 0x935
    b242:	203e      	movs	r0, #62	; 0x3e
    b244:	f7f8 fd8c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b248:	2001      	movs	r0, #1
    b24a:	e7f2      	b.n	b232 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    b24c:	7ae0      	ldrb	r0, [r4, #11]
    b24e:	2802      	cmp	r0, #2
    b250:	d105      	bne.n	b25e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    b252:	f000 f9bf 	bl	b5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b25a:	f000 bb2b 	b.w	b8b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b25e:	bd10      	pop	{r4, pc}
    b260:	20000e00 	.word	0x20000e00

0000b264 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b264:	490a      	ldr	r1, [pc, #40]	; (b290 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    b266:	b508      	push	{r3, lr}
    b268:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    b26c:	2a01      	cmp	r2, #1
    b26e:	d001      	beq.n	b274 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    b270:	2000      	movs	r0, #0
    b272:	bd08      	pop	{r3, pc}
    b274:	4a07      	ldr	r2, [pc, #28]	; (b294 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    b276:	6812      	ldr	r2, [r2, #0]
    b278:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b27c:	4252      	negs	r2, r2
    b27e:	7002      	strb	r2, [r0, #0]
    b280:	2000      	movs	r0, #0
    b282:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    b286:	4804      	ldr	r0, [pc, #16]	; (b298 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    b288:	6800      	ldr	r0, [r0, #0]
    b28a:	9000      	str	r0, [sp, #0]
    b28c:	2001      	movs	r0, #1
    b28e:	bd08      	pop	{r3, pc}
    b290:	40001000 	.word	0x40001000
    b294:	40001548 	.word	0x40001548
    b298:	4000111c 	.word	0x4000111c

0000b29c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    b29c:	4a04      	ldr	r2, [pc, #16]	; (b2b0 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    b29e:	6803      	ldr	r3, [r0, #0]
    b2a0:	f8c2 3016 	str.w	r3, [r2, #22]
    b2a4:	8880      	ldrh	r0, [r0, #4]
    b2a6:	8350      	strh	r0, [r2, #26]
    b2a8:	f102 0014 	add.w	r0, r2, #20
    b2ac:	7201      	strb	r1, [r0, #8]
    b2ae:	4770      	bx	lr
    b2b0:	20000dec 	.word	0x20000dec

0000b2b4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b2b4:	4a04      	ldr	r2, [pc, #16]	; (b2c8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    b2b6:	78c1      	ldrb	r1, [r0, #3]
    b2b8:	6011      	str	r1, [r2, #0]
    b2ba:	6800      	ldr	r0, [r0, #0]
    b2bc:	4902      	ldr	r1, [pc, #8]	; (b2c8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    b2be:	0200      	lsls	r0, r0, #8
    b2c0:	3908      	subs	r1, #8
    b2c2:	6008      	str	r0, [r1, #0]
    b2c4:	4770      	bx	lr
    b2c6:	0000      	.short	0x0000
    b2c8:	40001524 	.word	0x40001524

0000b2cc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b2cc:	6800      	ldr	r0, [r0, #0]
    b2ce:	4902      	ldr	r1, [pc, #8]	; (b2d8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    b2d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2d4:	6008      	str	r0, [r1, #0]
    b2d6:	4770      	bx	lr
    b2d8:	4000153c 	.word	0x4000153c

0000b2dc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    b2dc:	b510      	push	{r4, lr}
    b2de:	f000 fb53 	bl	b988 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48c>
    b2e2:	4806      	ldr	r0, [pc, #24]	; (b2fc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    b2e4:	6800      	ldr	r0, [r0, #0]
    b2e6:	2803      	cmp	r0, #3
    b2e8:	d001      	beq.n	b2ee <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    b2ea:	280b      	cmp	r0, #11
    b2ec:	d104      	bne.n	b2f8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    b2ee:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    b2f2:	203e      	movs	r0, #62	; 0x3e
    b2f4:	f7f8 fd34 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2f8:	bd10      	pop	{r4, pc}
    b2fa:	0000      	.short	0x0000
    b2fc:	40001550 	.word	0x40001550

0000b300 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b300:	4901      	ldr	r1, [pc, #4]	; (b308 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b302:	7648      	strb	r0, [r1, #25]
    b304:	4770      	bx	lr
    b306:	0000      	.short	0x0000
    b308:	20000e00 	.word	0x20000e00

0000b30c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b30c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b310:	4d71      	ldr	r5, [pc, #452]	; (b4d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    b312:	f04f 0801 	mov.w	r8, #1
    b316:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
    b31a:	4870      	ldr	r0, [pc, #448]	; (b4dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    b31c:	f8d0 b000 	ldr.w	fp, [r0]
    b320:	486f      	ldr	r0, [pc, #444]	; (b4e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>)
    b322:	6800      	ldr	r0, [r0, #0]
    b324:	4c6f      	ldr	r4, [pc, #444]	; (b4e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    b326:	e9c4 0b0e 	strd	r0, fp, [r4, #56]	; 0x38
    b32a:	486f      	ldr	r0, [pc, #444]	; (b4e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    b32c:	7800      	ldrb	r0, [r0, #0]
    b32e:	2804      	cmp	r0, #4
    b330:	d302      	bcc.n	b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    b332:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    b336:	e0c3      	b.n	b4c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    b338:	f000 f956 	bl	b5e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b33c:	496b      	ldr	r1, [pc, #428]	; (b4ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    b33e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b340:	6008      	str	r0, [r1, #0]
    b342:	486b      	ldr	r0, [pc, #428]	; (b4f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b344:	2600      	movs	r6, #0
    b346:	6326      	str	r6, [r4, #48]	; 0x30
    b348:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b34c:	f240 121d 	movw	r2, #285	; 0x11d
    b350:	4391      	bics	r1, r2
    b352:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b356:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b35a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    b35e:	b908      	cbnz	r0, b364 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    b360:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
    b364:	f000 f9c4 	bl	b6f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f4>
    b368:	4605      	mov	r5, r0
    b36a:	485c      	ldr	r0, [pc, #368]	; (b4dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    b36c:	1f00      	subs	r0, r0, #4
    b36e:	6800      	ldr	r0, [r0, #0]
    b370:	6260      	str	r0, [r4, #36]	; 0x24
    b372:	f7ff fdcb 	bl	af0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b376:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b37a:	7ae0      	ldrb	r0, [r4, #11]
    b37c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b380:	46b2      	mov	sl, r6
    b382:	6226      	str	r6, [r4, #32]
    b384:	4e5b      	ldr	r6, [pc, #364]	; (b4f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b386:	2802      	cmp	r0, #2
    b388:	d107      	bne.n	b39a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    b38a:	7860      	ldrb	r0, [r4, #1]
    b38c:	b128      	cbz	r0, b39a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    b38e:	6831      	ldr	r1, [r6, #0]
    b390:	7809      	ldrb	r1, [r1, #0]
    b392:	4001      	ands	r1, r0
    b394:	7820      	ldrb	r0, [r4, #0]
    b396:	4388      	bics	r0, r1
    b398:	d017      	beq.n	b3ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbe>
    b39a:	f884 a01c 	strb.w	sl, [r4, #28]
    b39e:	f8df 9158 	ldr.w	r9, [pc, #344]	; b4f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    b3a2:	07a8      	lsls	r0, r5, #30
    b3a4:	d502      	bpl.n	b3ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa0>
    b3a6:	f8d9 0000 	ldr.w	r0, [r9]
    b3aa:	6220      	str	r0, [r4, #32]
    b3ac:	0728      	lsls	r0, r5, #28
    b3ae:	d502      	bpl.n	b3b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    b3b0:	f8d9 0000 	ldr.w	r0, [r9]
    b3b4:	6220      	str	r0, [r4, #32]
    b3b6:	4f4b      	ldr	r7, [pc, #300]	; (b4e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    b3b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b3ba:	3f14      	subs	r7, #20
    b3bc:	6939      	ldr	r1, [r7, #16]
    b3be:	4788      	blx	r1
    b3c0:	4849      	ldr	r0, [pc, #292]	; (b4e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    b3c2:	7800      	ldrb	r0, [r0, #0]
    b3c4:	07c0      	lsls	r0, r0, #31
    b3c6:	d003      	beq.n	b3d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc4>
    b3c8:	e01b      	b.n	b402 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b3ca:	f884 801c 	strb.w	r8, [r4, #28]
    b3ce:	e7e6      	b.n	b39e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b3d0:	6836      	ldr	r6, [r6, #0]
    b3d2:	7830      	ldrb	r0, [r6, #0]
    b3d4:	f000 000f 	and.w	r0, r0, #15
    b3d8:	2807      	cmp	r0, #7
    b3da:	d210      	bcs.n	b3fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    b3dc:	2206      	movs	r2, #6
    b3de:	f106 0109 	add.w	r1, r6, #9
    b3e2:	1ca0      	adds	r0, r4, #2
    b3e4:	f000 fead 	bl	c142 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    b3e8:	b930      	cbnz	r0, b3f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    b3ea:	7a20      	ldrb	r0, [r4, #8]
    b3ec:	7831      	ldrb	r1, [r6, #0]
    b3ee:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    b3f2:	d101      	bne.n	b3f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    b3f4:	2001      	movs	r0, #1
    b3f6:	e000      	b.n	b3fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    b3f8:	2000      	movs	r0, #0
    b3fa:	7760      	strb	r0, [r4, #29]
    b3fc:	e001      	b.n	b402 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b3fe:	f884 a01d 	strb.w	sl, [r4, #29]
    b402:	2600      	movs	r6, #0
    b404:	4659      	mov	r1, fp
    b406:	4628      	mov	r0, r5
    b408:	f000 fa02 	bl	b810 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>
    b40c:	b918      	cbnz	r0, b416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10a>
    b40e:	4938      	ldr	r1, [pc, #224]	; (b4f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b410:	f8c1 8010 	str.w	r8, [r1, #16]
    b414:	2601      	movs	r6, #1
    b416:	07e8      	lsls	r0, r5, #31
    b418:	d002      	beq.n	b420 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x114>
    b41a:	6838      	ldr	r0, [r7, #0]
    b41c:	4780      	blx	r0
    b41e:	e032      	b.n	b486 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17a>
    b420:	07a8      	lsls	r0, r5, #30
    b422:	d527      	bpl.n	b474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    b424:	0768      	lsls	r0, r5, #29
    b426:	d41f      	bmi.n	b468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b428:	f000 fe67 	bl	c0fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b42c:	b9e0      	cbnz	r0, b468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b42e:	f000 fe54 	bl	c0da <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b432:	b9c8      	cbnz	r0, b468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b434:	482f      	ldr	r0, [pc, #188]	; (b4f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b436:	38b4      	subs	r0, #180	; 0xb4
    b438:	6800      	ldr	r0, [r0, #0]
    b43a:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b43e:	f3c0 6300 	ubfx	r3, r0, #24, #1
    b442:	f000 020f 	and.w	r2, r0, #15
    b446:	f3c0 1103 	ubfx	r1, r0, #4, #4
    b44a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b44e:	b15b      	cbz	r3, b468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b450:	b10a      	cbz	r2, b456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14a>
    b452:	b101      	cbz	r1, b456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14a>
    b454:	b940      	cbnz	r0, b468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b456:	4827      	ldr	r0, [pc, #156]	; (b4f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b458:	38b0      	subs	r0, #176	; 0xb0
    b45a:	6800      	ldr	r0, [r0, #0]
    b45c:	b120      	cbz	r0, b468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b45e:	f1bc 0f03 	cmp.w	ip, #3
    b462:	d201      	bcs.n	b468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b464:	f045 0504 	orr.w	r5, r5, #4
    b468:	f345 0080 	sbfx	r0, r5, #2, #1
    b46c:	4631      	mov	r1, r6
    b46e:	1c40      	adds	r0, r0, #1
    b470:	687a      	ldr	r2, [r7, #4]
    b472:	e007      	b.n	b484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x178>
    b474:	f015 0f28 	tst.w	r5, #40	; 0x28
    b478:	d005      	beq.n	b486 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17a>
    b47a:	f345 1140 	sbfx	r1, r5, #5, #1
    b47e:	68ba      	ldr	r2, [r7, #8]
    b480:	4630      	mov	r0, r6
    b482:	1c49      	adds	r1, r1, #1
    b484:	4790      	blx	r2
    b486:	06e8      	lsls	r0, r5, #27
    b488:	d501      	bpl.n	b48e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x182>
    b48a:	68f8      	ldr	r0, [r7, #12]
    b48c:	4780      	blx	r0
    b48e:	7ae0      	ldrb	r0, [r4, #11]
    b490:	2802      	cmp	r0, #2
    b492:	d11e      	bne.n	b4d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c6>
    b494:	7c20      	ldrb	r0, [r4, #16]
    b496:	2800      	cmp	r0, #0
    b498:	d01b      	beq.n	b4d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c6>
    b49a:	2802      	cmp	r0, #2
    b49c:	d004      	beq.n	b4a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    b49e:	2801      	cmp	r0, #1
    b4a0:	d008      	beq.n	b4b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
    b4a2:	f640 314a 	movw	r1, #2890	; 0xb4a
    b4a6:	e00b      	b.n	b4c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    b4a8:	6961      	ldr	r1, [r4, #20]
    b4aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b4ac:	4401      	add	r1, r0
    b4ae:	f8c9 1000 	str.w	r1, [r9]
    b4b2:	e00a      	b.n	b4ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1be>
    b4b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b4b6:	6960      	ldr	r0, [r4, #20]
    b4b8:	4288      	cmp	r0, r1
    b4ba:	d804      	bhi.n	b4c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ba>
    b4bc:	f640 314b 	movw	r1, #2891	; 0xb4b
    b4c0:	203e      	movs	r0, #62	; 0x3e
    b4c2:	f7f8 fc4d 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4c6:	f8c9 0000 	str.w	r0, [r9]
    b4ca:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b4ce:	f000 b9ff 	b.w	b8d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    b4d2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b4d6:	0000      	.short	0x0000
    b4d8:	40008000 	.word	0x40008000
    b4dc:	4000854c 	.word	0x4000854c
    b4e0:	4000b504 	.word	0x4000b504
    b4e4:	20000e00 	.word	0x20000e00
    b4e8:	20000270 	.word	0x20000270
    b4ec:	4001f508 	.word	0x4001f508
    b4f0:	40001000 	.word	0x40001000
    b4f4:	40001504 	.word	0x40001504
    b4f8:	40008544 	.word	0x40008544

0000b4fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b4fc:	b570      	push	{r4, r5, r6, lr}
    b4fe:	4b11      	ldr	r3, [pc, #68]	; (b544 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    b500:	888c      	ldrh	r4, [r1, #4]
    b502:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b506:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    b50a:	780c      	ldrb	r4, [r1, #0]
    b50c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b510:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b514:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    b518:	4d0b      	ldr	r5, [pc, #44]	; (b548 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    b51a:	6829      	ldr	r1, [r5, #0]
    b51c:	f100 0608 	add.w	r6, r0, #8
    b520:	2401      	movs	r4, #1
    b522:	fa04 f306 	lsl.w	r3, r4, r6
    b526:	b132      	cbz	r2, b536 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b528:	2a01      	cmp	r2, #1
    b52a:	d006      	beq.n	b53a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    b52c:	f240 41d1 	movw	r1, #1233	; 0x4d1
    b530:	203e      	movs	r0, #62	; 0x3e
    b532:	f7f8 fc15 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b536:	4399      	bics	r1, r3
    b538:	e000      	b.n	b53c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    b53a:	4319      	orrs	r1, r3
    b53c:	4084      	lsls	r4, r0
    b53e:	430c      	orrs	r4, r1
    b540:	602c      	str	r4, [r5, #0]
    b542:	bd70      	pop	{r4, r5, r6, pc}
    b544:	40001000 	.word	0x40001000
    b548:	40001640 	.word	0x40001640
    b54c:	b510      	push	{r4, lr}
    b54e:	4604      	mov	r4, r0
    b550:	f000 fdd3 	bl	c0fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b554:	2800      	cmp	r0, #0
    b556:	d00e      	beq.n	b576 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    b558:	4a09      	ldr	r2, [pc, #36]	; (b580 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    b55a:	6811      	ldr	r1, [r2, #0]
    b55c:	0650      	lsls	r0, r2, #25
    b55e:	2c02      	cmp	r4, #2
    b560:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b564:	d008      	beq.n	b578 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    b566:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b56a:	bf00      	nop
    b56c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b570:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b574:	6010      	str	r0, [r2, #0]
    b576:	bd10      	pop	{r4, pc}
    b578:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b57c:	e7f6      	b.n	b56c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    b57e:	0000      	.short	0x0000
    b580:	40001588 	.word	0x40001588
    b584:	480d      	ldr	r0, [pc, #52]	; (b5bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    b586:	7e40      	ldrb	r0, [r0, #25]
    b588:	2825      	cmp	r0, #37	; 0x25
    b58a:	d007      	beq.n	b59c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    b58c:	2826      	cmp	r0, #38	; 0x26
    b58e:	d007      	beq.n	b5a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    b590:	2827      	cmp	r0, #39	; 0x27
    b592:	d007      	beq.n	b5a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    b594:	280a      	cmp	r0, #10
    b596:	d807      	bhi.n	b5a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    b598:	2204      	movs	r2, #4
    b59a:	e006      	b.n	b5aa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    b59c:	2102      	movs	r1, #2
    b59e:	e007      	b.n	b5b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b5a0:	211a      	movs	r1, #26
    b5a2:	e005      	b.n	b5b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b5a4:	2150      	movs	r1, #80	; 0x50
    b5a6:	e003      	b.n	b5b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b5a8:	2206      	movs	r2, #6
    b5aa:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    b5ae:	b2c9      	uxtb	r1, r1
    b5b0:	4a03      	ldr	r2, [pc, #12]	; (b5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b5b2:	6011      	str	r1, [r2, #0]
    b5b4:	4902      	ldr	r1, [pc, #8]	; (b5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b5b6:	314c      	adds	r1, #76	; 0x4c
    b5b8:	6008      	str	r0, [r1, #0]
    b5ba:	4770      	bx	lr
    b5bc:	20000e00 	.word	0x20000e00
    b5c0:	40001508 	.word	0x40001508
    b5c4:	4802      	ldr	r0, [pc, #8]	; (b5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd4>)
    b5c6:	f990 0018 	ldrsb.w	r0, [r0, #24]
    b5ca:	f000 b9fb 	b.w	b9c4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b5ce:	0000      	.short	0x0000
    b5d0:	20000e00 	.word	0x20000e00
    b5d4:	4803      	ldr	r0, [pc, #12]	; (b5e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>)
    b5d6:	7a81      	ldrb	r1, [r0, #10]
    b5d8:	2901      	cmp	r1, #1
    b5da:	d102      	bne.n	b5e2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe6>
    b5dc:	7b40      	ldrb	r0, [r0, #13]
    b5de:	f7ff bff1 	b.w	b5c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b5e2:	4770      	bx	lr
    b5e4:	20000e00 	.word	0x20000e00
    b5e8:	4805      	ldr	r0, [pc, #20]	; (b600 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x104>)
    b5ea:	7ac0      	ldrb	r0, [r0, #11]
    b5ec:	2801      	cmp	r0, #1
    b5ee:	d003      	beq.n	b5f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfc>
    b5f0:	2802      	cmp	r0, #2
    b5f2:	d103      	bne.n	b5fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x100>
    b5f4:	f004 b81d 	b.w	f632 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b5f8:	f004 b827 	b.w	f64a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b5fc:	4770      	bx	lr
    b5fe:	0000      	.short	0x0000
    b600:	20000e00 	.word	0x20000e00
    b604:	4809      	ldr	r0, [pc, #36]	; (b62c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x130>)
    b606:	b508      	push	{r3, lr}
    b608:	2100      	movs	r1, #0
    b60a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b60e:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b612:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b616:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b61a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b61e:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b622:	4803      	ldr	r0, [pc, #12]	; (b630 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x134>)
    b624:	6800      	ldr	r0, [r0, #0]
    b626:	9000      	str	r0, [sp, #0]
    b628:	bd08      	pop	{r3, pc}
    b62a:	0000      	.short	0x0000
    b62c:	40001000 	.word	0x40001000
    b630:	40001118 	.word	0x40001118
    b634:	4816      	ldr	r0, [pc, #88]	; (b690 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x194>)
    b636:	b510      	push	{r4, lr}
    b638:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    b63c:	07c1      	lsls	r1, r0, #31
    b63e:	d026      	beq.n	b68e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b640:	0781      	lsls	r1, r0, #30
    b642:	d513      	bpl.n	b66c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>
    b644:	4813      	ldr	r0, [pc, #76]	; (b694 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    b646:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b64a:	f041 0101 	orr.w	r1, r1, #1
    b64e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b652:	4811      	ldr	r0, [pc, #68]	; (b698 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x19c>)
    b654:	6800      	ldr	r0, [r0, #0]
    b656:	280b      	cmp	r0, #11
    b658:	d005      	beq.n	b666 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b65a:	280a      	cmp	r0, #10
    b65c:	d003      	beq.n	b666 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b65e:	2803      	cmp	r0, #3
    b660:	d001      	beq.n	b666 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b662:	2802      	cmp	r0, #2
    b664:	d113      	bne.n	b68e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b666:	f240 512b 	movw	r1, #1323	; 0x52b
    b66a:	e00d      	b.n	b688 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x18c>
    b66c:	0740      	lsls	r0, r0, #29
    b66e:	d50e      	bpl.n	b68e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b670:	4808      	ldr	r0, [pc, #32]	; (b694 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    b672:	490a      	ldr	r1, [pc, #40]	; (b69c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a0>)
    b674:	3008      	adds	r0, #8
    b676:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b67a:	4809      	ldr	r0, [pc, #36]	; (b6a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a4>)
    b67c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b680:	2801      	cmp	r0, #1
    b682:	d104      	bne.n	b68e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b684:	f240 5132 	movw	r1, #1330	; 0x532
    b688:	203e      	movs	r0, #62	; 0x3e
    b68a:	f7f8 fb69 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b68e:	bd10      	pop	{r4, pc}
    b690:	20000e00 	.word	0x20000e00
    b694:	40001000 	.word	0x40001000
    b698:	40001550 	.word	0x40001550
    b69c:	4001f098 	.word	0x4001f098
    b6a0:	40008000 	.word	0x40008000
    b6a4:	4808      	ldr	r0, [pc, #32]	; (b6c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>)
    b6a6:	4601      	mov	r1, r0
    b6a8:	7a42      	ldrb	r2, [r0, #9]
    b6aa:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    b6ae:	b112      	cbz	r2, b6b6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ba>
    b6b0:	2a01      	cmp	r2, #1
    b6b2:	d003      	beq.n	b6bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c0>
    b6b4:	e006      	b.n	b6c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c8>
    b6b6:	f041 0102 	orr.w	r1, r1, #2
    b6ba:	e001      	b.n	b6c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c4>
    b6bc:	f041 0104 	orr.w	r1, r1, #4
    b6c0:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    b6c4:	f7ff bfb6 	b.w	b634 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    b6c8:	20000e00 	.word	0x20000e00
    b6cc:	b510      	push	{r4, lr}
    b6ce:	f000 fd14 	bl	c0fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b6d2:	2800      	cmp	r0, #0
    b6d4:	d108      	bne.n	b6e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    b6d6:	f000 fd00 	bl	c0da <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b6da:	2800      	cmp	r0, #0
    b6dc:	d104      	bne.n	b6e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    b6de:	4803      	ldr	r0, [pc, #12]	; (b6ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f0>)
    b6e0:	6801      	ldr	r1, [r0, #0]
    b6e2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b6e6:	6001      	str	r1, [r0, #0]
    b6e8:	bd10      	pop	{r4, pc}
    b6ea:	0000      	.short	0x0000
    b6ec:	40001568 	.word	0x40001568
    b6f0:	b538      	push	{r3, r4, r5, lr}
    b6f2:	4d36      	ldr	r5, [pc, #216]	; (b7cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d0>)
    b6f4:	2400      	movs	r4, #0
    b6f6:	7c28      	ldrb	r0, [r5, #16]
    b6f8:	b120      	cbz	r0, b704 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    b6fa:	4835      	ldr	r0, [pc, #212]	; (b7d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>)
    b6fc:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b700:	2801      	cmp	r0, #1
    b702:	d007      	beq.n	b714 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x218>
    b704:	2200      	movs	r2, #0
    b706:	7ae9      	ldrb	r1, [r5, #11]
    b708:	4832      	ldr	r0, [pc, #200]	; (b7d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d8>)
    b70a:	2901      	cmp	r1, #1
    b70c:	d004      	beq.n	b718 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x21c>
    b70e:	2902      	cmp	r1, #2
    b710:	d00a      	beq.n	b728 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b712:	e019      	b.n	b748 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b714:	2201      	movs	r2, #1
    b716:	e7f6      	b.n	b706 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20a>
    b718:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b71c:	2901      	cmp	r1, #1
    b71e:	d001      	beq.n	b724 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x228>
    b720:	2400      	movs	r4, #0
    b722:	e011      	b.n	b748 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b724:	2408      	movs	r4, #8
    b726:	e00f      	b.n	b748 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b728:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b72c:	2901      	cmp	r1, #1
    b72e:	d006      	beq.n	b73e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x242>
    b730:	2100      	movs	r1, #0
    b732:	4b29      	ldr	r3, [pc, #164]	; (b7d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    b734:	681b      	ldr	r3, [r3, #0]
    b736:	2b01      	cmp	r3, #1
    b738:	d003      	beq.n	b742 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x246>
    b73a:	2404      	movs	r4, #4
    b73c:	e002      	b.n	b744 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    b73e:	2102      	movs	r1, #2
    b740:	e7f7      	b.n	b732 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x236>
    b742:	2400      	movs	r4, #0
    b744:	430c      	orrs	r4, r1
    b746:	4314      	orrs	r4, r2
    b748:	f014 0f0b 	tst.w	r4, #11
    b74c:	d105      	bne.n	b75a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25e>
    b74e:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b752:	2901      	cmp	r1, #1
    b754:	d006      	beq.n	b764 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    b756:	2100      	movs	r1, #0
    b758:	430c      	orrs	r4, r1
    b75a:	4920      	ldr	r1, [pc, #128]	; (b7dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e0>)
    b75c:	7809      	ldrb	r1, [r1, #0]
    b75e:	07c9      	lsls	r1, r1, #31
    b760:	d002      	beq.n	b768 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    b762:	e023      	b.n	b7ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2b0>
    b764:	2110      	movs	r1, #16
    b766:	e7f7      	b.n	b758 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    b768:	491d      	ldr	r1, [pc, #116]	; (b7e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e4>)
    b76a:	6809      	ldr	r1, [r1, #0]
    b76c:	f011 0fff 	tst.w	r1, #255	; 0xff
    b770:	d003      	beq.n	b77a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x27e>
    b772:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b776:	2a01      	cmp	r2, #1
    b778:	d000      	beq.n	b77c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x280>
    b77a:	2200      	movs	r2, #0
    b77c:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    b780:	f011 0fff 	tst.w	r1, #255	; 0xff
    b784:	d003      	beq.n	b78e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x292>
    b786:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b78a:	2801      	cmp	r0, #1
    b78c:	d000      	beq.n	b790 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x294>
    b78e:	2000      	movs	r0, #0
    b790:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    b794:	4810      	ldr	r0, [pc, #64]	; (b7d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    b796:	3010      	adds	r0, #16
    b798:	6800      	ldr	r0, [r0, #0]
    b79a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b79e:	f7ff f875 	bl	a88c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    b7a2:	2801      	cmp	r0, #1
    b7a4:	d000      	beq.n	b7a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    b7a6:	2000      	movs	r0, #0
    b7a8:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    b7ac:	f7ff ff2a 	bl	b604 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x108>
    b7b0:	06e0      	lsls	r0, r4, #27
    b7b2:	d506      	bpl.n	b7c2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b7b4:	0720      	lsls	r0, r4, #28
    b7b6:	d404      	bmi.n	b7c2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b7b8:	7ae8      	ldrb	r0, [r5, #11]
    b7ba:	2801      	cmp	r0, #1
    b7bc:	d101      	bne.n	b7c2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b7be:	f044 0420 	orr.w	r4, r4, #32
    b7c2:	4808      	ldr	r0, [pc, #32]	; (b7e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e8>)
    b7c4:	6800      	ldr	r0, [r0, #0]
    b7c6:	9000      	str	r0, [sp, #0]
    b7c8:	4620      	mov	r0, r4
    b7ca:	bd38      	pop	{r3, r4, r5, pc}
    b7cc:	20000e00 	.word	0x20000e00
    b7d0:	40008000 	.word	0x40008000
    b7d4:	40001000 	.word	0x40001000
    b7d8:	40001400 	.word	0x40001400
    b7dc:	20000270 	.word	0x20000270
    b7e0:	40001640 	.word	0x40001640
    b7e4:	40008144 	.word	0x40008144
    b7e8:	4808      	ldr	r0, [pc, #32]	; (b80c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    b7ea:	b510      	push	{r4, lr}
    b7ec:	6800      	ldr	r0, [r0, #0]
    b7ee:	f000 000f 	and.w	r0, r0, #15
    b7f2:	2803      	cmp	r0, #3
    b7f4:	d006      	beq.n	b804 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x308>
    b7f6:	2804      	cmp	r0, #4
    b7f8:	d006      	beq.n	b808 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x30c>
    b7fa:	f240 2136 	movw	r1, #566	; 0x236
    b7fe:	203e      	movs	r0, #62	; 0x3e
    b800:	f7f8 faae 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b804:	2001      	movs	r0, #1
    b806:	bd10      	pop	{r4, pc}
    b808:	2002      	movs	r0, #2
    b80a:	bd10      	pop	{r4, pc}
    b80c:	40001510 	.word	0x40001510
    b810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b814:	4c25      	ldr	r4, [pc, #148]	; (b8ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b0>)
    b816:	460d      	mov	r5, r1
    b818:	7aa2      	ldrb	r2, [r4, #10]
    b81a:	b19a      	cbz	r2, b844 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    b81c:	7b21      	ldrb	r1, [r4, #12]
    b81e:	078b      	lsls	r3, r1, #30
    b820:	d503      	bpl.n	b82a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    b822:	0783      	lsls	r3, r0, #30
    b824:	d501      	bpl.n	b82a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    b826:	0743      	lsls	r3, r0, #29
    b828:	d41c      	bmi.n	b864 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b82a:	06cb      	lsls	r3, r1, #27
    b82c:	d505      	bpl.n	b83a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    b82e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    b832:	b113      	cbz	r3, b83a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    b834:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    b838:	b1a3      	cbz	r3, b864 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b83a:	070b      	lsls	r3, r1, #28
    b83c:	d50b      	bpl.n	b856 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    b83e:	7f23      	ldrb	r3, [r4, #28]
    b840:	b983      	cbnz	r3, b864 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b842:	e008      	b.n	b856 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    b844:	491a      	ldr	r1, [pc, #104]	; (b8b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b4>)
    b846:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b84a:	6008      	str	r0, [r1, #0]
    b84c:	f000 f85a 	bl	b904 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    b850:	2000      	movs	r0, #0
    b852:	7420      	strb	r0, [r4, #16]
    b854:	e028      	b.n	b8a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    b856:	0749      	lsls	r1, r1, #29
    b858:	d501      	bpl.n	b85e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x362>
    b85a:	7f61      	ldrb	r1, [r4, #29]
    b85c:	b111      	cbz	r1, b864 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b85e:	f010 0f11 	tst.w	r0, #17
    b862:	d002      	beq.n	b86a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b864:	f7ff f9a8 	bl	abb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b868:	e01e      	b.n	b8a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    b86a:	2a01      	cmp	r2, #1
    b86c:	d001      	beq.n	b872 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x376>
    b86e:	2601      	movs	r6, #1
    b870:	e000      	b.n	b874 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x378>
    b872:	2600      	movs	r6, #0
    b874:	7a60      	ldrb	r0, [r4, #9]
    b876:	2801      	cmp	r0, #1
    b878:	d00e      	beq.n	b898 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39c>
    b87a:	2700      	movs	r7, #0
    b87c:	f000 f842 	bl	b904 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    b880:	2196      	movs	r1, #150	; 0x96
    b882:	4630      	mov	r0, r6
    b884:	f000 f856 	bl	b934 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x438>
    b888:	4601      	mov	r1, r0
    b88a:	b14f      	cbz	r7, b8a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a4>
    b88c:	353b      	adds	r5, #59	; 0x3b
    b88e:	428d      	cmp	r5, r1
    b890:	d904      	bls.n	b89c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a0>
    b892:	2000      	movs	r0, #0
    b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b898:	2701      	movs	r7, #1
    b89a:	e7ef      	b.n	b87c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x380>
    b89c:	2001      	movs	r0, #1
    b89e:	7260      	strb	r0, [r4, #9]
    b8a0:	7b62      	ldrb	r2, [r4, #13]
    b8a2:	4630      	mov	r0, r6
    b8a4:	f7ff fc38 	bl	b118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b8a8:	2001      	movs	r0, #1
    b8aa:	e7f3      	b.n	b894 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x398>
    b8ac:	20000e00 	.word	0x20000e00
    b8b0:	4001f508 	.word	0x4001f508
    b8b4:	4805      	ldr	r0, [pc, #20]	; (b8cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d0>)
    b8b6:	2100      	movs	r1, #0
    b8b8:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b8bc:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b8c0:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b8c4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b8c8:	4770      	bx	lr
    b8ca:	0000      	.short	0x0000
    b8cc:	40001000 	.word	0x40001000
    b8d0:	4804      	ldr	r0, [pc, #16]	; (b8e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e8>)
    b8d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b8d4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b8d8:	6301      	str	r1, [r0, #48]	; 0x30
    b8da:	4903      	ldr	r1, [pc, #12]	; (b8e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>)
    b8dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b8e0:	6008      	str	r0, [r1, #0]
    b8e2:	4770      	bx	lr
    b8e4:	20000e00 	.word	0x20000e00
    b8e8:	4001f504 	.word	0x4001f504
    b8ec:	4903      	ldr	r1, [pc, #12]	; (b8fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x400>)
    b8ee:	7a49      	ldrb	r1, [r1, #9]
    b8f0:	2900      	cmp	r1, #0
    b8f2:	d102      	bne.n	b8fa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3fe>
    b8f4:	4902      	ldr	r1, [pc, #8]	; (b900 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x404>)
    b8f6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b8fa:	4770      	bx	lr
    b8fc:	20000e00 	.word	0x20000e00
    b900:	4001f098 	.word	0x4001f098
    b904:	4803      	ldr	r0, [pc, #12]	; (b914 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x418>)
    b906:	2100      	movs	r1, #0
    b908:	7241      	strb	r1, [r0, #9]
    b90a:	7281      	strb	r1, [r0, #10]
    b90c:	72c1      	strb	r1, [r0, #11]
    b90e:	2101      	movs	r1, #1
    b910:	7301      	strb	r1, [r0, #12]
    b912:	4770      	bx	lr
    b914:	20000e00 	.word	0x20000e00
    b918:	4a05      	ldr	r2, [pc, #20]	; (b930 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x434>)
    b91a:	7a52      	ldrb	r2, [r2, #9]
    b91c:	2a01      	cmp	r2, #1
    b91e:	d006      	beq.n	b92e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x432>
    b920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b924:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b928:	fbb1 f1f2 	udiv	r1, r1, r2
    b92c:	1a40      	subs	r0, r0, r1
    b92e:	4770      	bx	lr
    b930:	20000e00 	.word	0x20000e00
    b934:	b570      	push	{r4, r5, r6, lr}
    b936:	4c13      	ldr	r4, [pc, #76]	; (b984 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x488>)
    b938:	4603      	mov	r3, r0
    b93a:	460d      	mov	r5, r1
    b93c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    b940:	2000      	movs	r0, #0
    b942:	b15a      	cbz	r2, b95c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>
    b944:	4621      	mov	r1, r4
    b946:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    b94a:	b163      	cbz	r3, b966 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46a>
    b94c:	2b01      	cmp	r3, #1
    b94e:	d111      	bne.n	b974 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    b950:	2a01      	cmp	r2, #1
    b952:	4628      	mov	r0, r5
    b954:	d012      	beq.n	b97c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x480>
    b956:	f003 ff3a 	bl	f7ce <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b95a:	e009      	b.n	b970 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b95c:	f240 7166 	movw	r1, #1894	; 0x766
    b960:	203e      	movs	r0, #62	; 0x3e
    b962:	f7f8 f9fd 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b966:	2a01      	cmp	r2, #1
    b968:	4628      	mov	r0, r5
    b96a:	d004      	beq.n	b976 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x47a>
    b96c:	f003 ff3d 	bl	f7ea <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b970:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b972:	4408      	add	r0, r1
    b974:	bd70      	pop	{r4, r5, r6, pc}
    b976:	f003 ff52 	bl	f81e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b97a:	e7f9      	b.n	b970 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b97c:	f003 ff40 	bl	f800 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b980:	e7f6      	b.n	b970 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b982:	0000      	.short	0x0000
    b984:	20000e00 	.word	0x20000e00
    b988:	b510      	push	{r4, lr}
    b98a:	2200      	movs	r2, #0
    b98c:	2901      	cmp	r1, #1
    b98e:	d008      	beq.n	b9a2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a6>
    b990:	2902      	cmp	r1, #2
    b992:	d004      	beq.n	b99e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a2>
    b994:	f240 217f 	movw	r1, #639	; 0x27f
    b998:	203e      	movs	r0, #62	; 0x3e
    b99a:	f7f8 f9e1 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b99e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b9a2:	4905      	ldr	r1, [pc, #20]	; (b9b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>)
    b9a4:	430a      	orrs	r2, r1
    b9a6:	4905      	ldr	r1, [pc, #20]	; (b9bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c0>)
    b9a8:	600a      	str	r2, [r1, #0]
    b9aa:	4905      	ldr	r1, [pc, #20]	; (b9c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c4>)
    b9ac:	4308      	orrs	r0, r1
    b9ae:	4903      	ldr	r1, [pc, #12]	; (b9bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c0>)
    b9b0:	1d09      	adds	r1, r1, #4
    b9b2:	6008      	str	r0, [r1, #0]
    b9b4:	bd10      	pop	{r4, pc}
    b9b6:	0000      	.short	0x0000
    b9b8:	00100108 	.word	0x00100108
    b9bc:	40001514 	.word	0x40001514
    b9c0:	02030000 	.word	0x02030000

0000b9c4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b9c4:	4901      	ldr	r1, [pc, #4]	; (b9cc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b9c6:	b2c0      	uxtb	r0, r0
    b9c8:	6008      	str	r0, [r1, #0]
    b9ca:	4770      	bx	lr
    b9cc:	4000150c 	.word	0x4000150c

0000b9d0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b9d0:	b510      	push	{r4, lr}
    b9d2:	4907      	ldr	r1, [pc, #28]	; (b9f0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b9d4:	2801      	cmp	r0, #1
    b9d6:	d005      	beq.n	b9e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b9d8:	2802      	cmp	r0, #2
    b9da:	d005      	beq.n	b9e8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b9dc:	2197      	movs	r1, #151	; 0x97
    b9de:	203f      	movs	r0, #63	; 0x3f
    b9e0:	f7f8 f9be 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9e4:	2003      	movs	r0, #3
    b9e6:	e000      	b.n	b9ea <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b9e8:	2004      	movs	r0, #4
    b9ea:	6008      	str	r0, [r1, #0]
    b9ec:	bd10      	pop	{r4, pc}
    b9ee:	0000      	.short	0x0000
    b9f0:	40001510 	.word	0x40001510
    b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9f8:	000d      	movs	r5, r1
    b9fa:	4604      	mov	r4, r0
    b9fc:	f04f 0602 	mov.w	r6, #2
    ba00:	f04f 0701 	mov.w	r7, #1
    ba04:	d008      	beq.n	ba18 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x48>
    ba06:	7828      	ldrb	r0, [r5, #0]
    ba08:	b1c8      	cbz	r0, ba3e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    ba0a:	2801      	cmp	r0, #1
    ba0c:	d006      	beq.n	ba1c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x4c>
    ba0e:	2802      	cmp	r0, #2
    ba10:	d013      	beq.n	ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba12:	2803      	cmp	r0, #3
    ba14:	d13a      	bne.n	ba8c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xbc>
    ba16:	e015      	b.n	ba44 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x74>
    ba18:	7707      	strb	r7, [r0, #28]
    ba1a:	e00e      	b.n	ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba1c:	6868      	ldr	r0, [r5, #4]
    ba1e:	28c8      	cmp	r0, #200	; 0xc8
    ba20:	d303      	bcc.n	ba2a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x5a>
    ba22:	2104      	movs	r1, #4
    ba24:	f7f5 fc76 	bl	1314 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ba28:	b108      	cbz	r0, ba2e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x5e>
    ba2a:	2600      	movs	r6, #0
    ba2c:	e007      	b.n	ba3e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    ba2e:	4620      	mov	r0, r4
    ba30:	6869      	ldr	r1, [r5, #4]
    ba32:	f000 f936 	bl	bca2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2d2>
    ba36:	2601      	movs	r6, #1
    ba38:	e001      	b.n	ba3e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    ba3a:	f7f4 fcf9 	bl	430 <CONFIG_LOG_BUFFER_SIZE+0x30>
    ba3e:	4630      	mov	r0, r6
    ba40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba44:	7820      	ldrb	r0, [r4, #0]
    ba46:	2800      	cmp	r0, #0
    ba48:	d1f7      	bne.n	ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba4a:	6868      	ldr	r0, [r5, #4]
    ba4c:	f7f4 fcc2 	bl	3d4 <__aeabi_idiv0+0x4>
    ba50:	b1e0      	cbz	r0, ba8c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xbc>
    ba52:	6869      	ldr	r1, [r5, #4]
    ba54:	7808      	ldrb	r0, [r1, #0]
    ba56:	b128      	cbz	r0, ba64 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x94>
    ba58:	78a0      	ldrb	r0, [r4, #2]
    ba5a:	2805      	cmp	r0, #5
    ba5c:	d007      	beq.n	ba6e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x9e>
    ba5e:	f240 1179 	movw	r1, #377	; 0x179
    ba62:	e010      	b.n	ba86 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xb6>
    ba64:	4620      	mov	r0, r4
    ba66:	f000 f924 	bl	bcb2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2e2>
    ba6a:	7067      	strb	r7, [r4, #1]
    ba6c:	e7e5      	b.n	ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba6e:	4620      	mov	r0, r4
    ba70:	f000 f937 	bl	bce2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x312>
    ba74:	78e0      	ldrb	r0, [r4, #3]
    ba76:	f104 0108 	add.w	r1, r4, #8
    ba7a:	f000 f809 	bl	ba90 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    ba7e:	2800      	cmp	r0, #0
    ba80:	d1db      	bne.n	ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba82:	f240 117b 	movw	r1, #379	; 0x17b
    ba86:	206a      	movs	r0, #106	; 0x6a
    ba88:	f7f7 feea 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba8c:	7727      	strb	r7, [r4, #28]
    ba8e:	e7d4      	b.n	ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba90:	f7f5 be7c 	b.w	178c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba98:	460d      	mov	r5, r1
    ba9a:	4607      	mov	r7, r0
    ba9c:	f7f4 fd30 	bl	500 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY>
    baa0:	4606      	mov	r6, r0
    baa2:	28ff      	cmp	r0, #255	; 0xff
    baa4:	d009      	beq.n	baba <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xea>
    baa6:	f7f4 fd1f 	bl	4e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    baaa:	0004      	movs	r4, r0
    baac:	d008      	beq.n	bac0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xf0>
    baae:	78e2      	ldrb	r2, [r4, #3]
    bab0:	42ba      	cmp	r2, r7
    bab2:	d008      	beq.n	bac6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xf6>
    bab4:	f240 119d 	movw	r1, #413	; 0x19d
    bab8:	e0f0      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    baba:	f240 1195 	movw	r1, #405	; 0x195
    babe:	e0ed      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bac0:	f44f 71cc 	mov.w	r1, #408	; 0x198
    bac4:	e0ea      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bac6:	2700      	movs	r7, #0
    bac8:	2002      	movs	r0, #2
    baca:	2d09      	cmp	r5, #9
    bacc:	d277      	bcs.n	bbbe <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1ee>
    bace:	e8df f005 	tbb	[pc, r5]
    bad2:	0d05      	.short	0x0d05
    bad4:	60572a2a 	.word	0x60572a2a
    bad8:	00829378 	.word	0x00829378
    badc:	78a0      	ldrb	r0, [r4, #2]
    bade:	2804      	cmp	r0, #4
    bae0:	d06e      	beq.n	bbc0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1f0>
    bae2:	2803      	cmp	r0, #3
    bae4:	d06c      	beq.n	bbc0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1f0>
    bae6:	f240 11a1 	movw	r1, #417	; 0x1a1
    baea:	e0d7      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    baec:	78a0      	ldrb	r0, [r4, #2]
    baee:	2804      	cmp	r0, #4
    baf0:	d004      	beq.n	bafc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x12c>
    baf2:	2803      	cmp	r0, #3
    baf4:	d002      	beq.n	bafc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x12c>
    baf6:	f240 11a5 	movw	r1, #421	; 0x1a5
    bafa:	e0cf      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bafc:	2005      	movs	r0, #5
    bafe:	70a0      	strb	r0, [r4, #2]
    bb00:	7727      	strb	r7, [r4, #28]
    bb02:	7820      	ldrb	r0, [r4, #0]
    bb04:	bb80      	cbnz	r0, bb68 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x198>
    bb06:	2100      	movs	r1, #0
    bb08:	4620      	mov	r0, r4
    bb0a:	f000 f8ca 	bl	bca2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2d2>
    bb0e:	7a20      	ldrb	r0, [r4, #8]
    bb10:	2801      	cmp	r0, #1
    bb12:	d004      	beq.n	bb1e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14e>
    bb14:	6960      	ldr	r0, [r4, #20]
    bb16:	61a0      	str	r0, [r4, #24]
    bb18:	2100      	movs	r1, #0
    bb1a:	6862      	ldr	r2, [r4, #4]
    bb1c:	e041      	b.n	bba2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    bb1e:	78e0      	ldrb	r0, [r4, #3]
    bb20:	f7f5 fd2e 	bl	1580 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    bb24:	e7f7      	b.n	bb16 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x146>
    bb26:	78a1      	ldrb	r1, [r4, #2]
    bb28:	2904      	cmp	r1, #4
    bb2a:	d004      	beq.n	bb36 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x166>
    bb2c:	2903      	cmp	r1, #3
    bb2e:	d002      	beq.n	bb36 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x166>
    bb30:	f240 11c3 	movw	r1, #451	; 0x1c3
    bb34:	e0b2      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb36:	7822      	ldrb	r2, [r4, #0]
    bb38:	b122      	cbz	r2, bb44 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x174>
    bb3a:	4621      	mov	r1, r4
    bb3c:	4630      	mov	r0, r6
    bb3e:	f000 f8ec 	bl	bd1a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    bb42:	e0a2      	b.n	bc8a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    bb44:	2904      	cmp	r1, #4
    bb46:	d000      	beq.n	bb4a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x17a>
    bb48:	2001      	movs	r0, #1
    bb4a:	70a0      	strb	r0, [r4, #2]
    bb4c:	6862      	ldr	r2, [r4, #4]
    bb4e:	2d02      	cmp	r5, #2
    bb50:	d00b      	beq.n	bb6a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x19a>
    bb52:	2106      	movs	r1, #6
    bb54:	4630      	mov	r0, r6
    bb56:	4790      	blx	r2
    bb58:	2800      	cmp	r0, #0
    bb5a:	d06a      	beq.n	bc32 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x262>
    bb5c:	7800      	ldrb	r0, [r0, #0]
    bb5e:	2800      	cmp	r0, #0
    bb60:	d067      	beq.n	bc32 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x262>
    bb62:	f240 11dd 	movw	r1, #477	; 0x1dd
    bb66:	e099      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb68:	e031      	b.n	bbce <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1fe>
    bb6a:	2105      	movs	r1, #5
    bb6c:	4630      	mov	r0, r6
    bb6e:	4790      	blx	r2
    bb70:	2800      	cmp	r0, #0
    bb72:	d06f      	beq.n	bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bb74:	7800      	ldrb	r0, [r0, #0]
    bb76:	2800      	cmp	r0, #0
    bb78:	d06c      	beq.n	bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bb7a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    bb7e:	e08d      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb80:	78a0      	ldrb	r0, [r4, #2]
    bb82:	2805      	cmp	r0, #5
    bb84:	d002      	beq.n	bb8c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1bc>
    bb86:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    bb8a:	e087      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb8c:	2102      	movs	r1, #2
    bb8e:	6862      	ldr	r2, [r4, #4]
    bb90:	e007      	b.n	bba2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    bb92:	78a0      	ldrb	r0, [r4, #2]
    bb94:	2805      	cmp	r0, #5
    bb96:	d002      	beq.n	bb9e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1ce>
    bb98:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bb9c:	e07e      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb9e:	6862      	ldr	r2, [r4, #4]
    bba0:	2101      	movs	r1, #1
    bba2:	4630      	mov	r0, r6
    bba4:	4790      	blx	r2
    bba6:	4601      	mov	r1, r0
    bba8:	4620      	mov	r0, r4
    bbaa:	f7ff ff23 	bl	b9f4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24>
    bbae:	2802      	cmp	r0, #2
    bbb0:	d06b      	beq.n	bc8a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    bbb2:	b3e8      	cbz	r0, bc30 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x260>
    bbb4:	2801      	cmp	r0, #1
    bbb6:	d062      	beq.n	bc7e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ae>
    bbb8:	f240 212a 	movw	r1, #554	; 0x22a
    bbbc:	e06e      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bbbe:	e05b      	b.n	bc78 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2a8>
    bbc0:	e065      	b.n	bc8e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2be>
    bbc2:	78a0      	ldrb	r0, [r4, #2]
    bbc4:	2805      	cmp	r0, #5
    bbc6:	d002      	beq.n	bbce <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1fe>
    bbc8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    bbcc:	e066      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bbce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bbd2:	f7f4 bc2d 	b.w	430 <CONFIG_LOG_BUFFER_SIZE+0x30>
    bbd6:	78a0      	ldrb	r0, [r4, #2]
    bbd8:	2805      	cmp	r0, #5
    bbda:	d002      	beq.n	bbe2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x212>
    bbdc:	f240 11f5 	movw	r1, #501	; 0x1f5
    bbe0:	e05c      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bbe2:	6862      	ldr	r2, [r4, #4]
    bbe4:	210a      	movs	r1, #10
    bbe6:	4630      	mov	r0, r6
    bbe8:	4790      	blx	r2
    bbea:	4601      	mov	r1, r0
    bbec:	4620      	mov	r0, r4
    bbee:	f7ff ff01 	bl	b9f4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24>
    bbf2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    bbf6:	e051      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bbf8:	78a1      	ldrb	r1, [r4, #2]
    bbfa:	2905      	cmp	r1, #5
    bbfc:	d006      	beq.n	bc0c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x23c>
    bbfe:	7863      	ldrb	r3, [r4, #1]
    bc00:	b10b      	cbz	r3, bc06 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x236>
    bc02:	2903      	cmp	r1, #3
    bc04:	d002      	beq.n	bc0c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x23c>
    bc06:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    bc0a:	e047      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc0c:	7821      	ldrb	r1, [r4, #0]
    bc0e:	b129      	cbz	r1, bc1c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24c>
    bc10:	4621      	mov	r1, r4
    bc12:	4630      	mov	r0, r6
    bc14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bc18:	f000 b87f 	b.w	bd1a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    bc1c:	7f21      	ldrb	r1, [r4, #28]
    bc1e:	b181      	cbz	r1, bc42 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x272>
    bc20:	7727      	strb	r7, [r4, #28]
    bc22:	70a0      	strb	r0, [r4, #2]
    bc24:	6862      	ldr	r2, [r4, #4]
    bc26:	2108      	movs	r1, #8
    bc28:	4630      	mov	r0, r6
    bc2a:	4790      	blx	r2
    bc2c:	2800      	cmp	r0, #0
    bc2e:	e001      	b.n	bc34 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x264>
    bc30:	e028      	b.n	bc84 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2b4>
    bc32:	e02a      	b.n	bc8a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    bc34:	d00e      	beq.n	bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc36:	7800      	ldrb	r0, [r0, #0]
    bc38:	2800      	cmp	r0, #0
    bc3a:	d00b      	beq.n	bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc3c:	f44f 7102 	mov.w	r1, #520	; 0x208
    bc40:	e02c      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc42:	7861      	ldrb	r1, [r4, #1]
    bc44:	b159      	cbz	r1, bc5e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x28e>
    bc46:	f104 0108 	add.w	r1, r4, #8
    bc4a:	4610      	mov	r0, r2
    bc4c:	f7ff ff20 	bl	ba90 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    bc50:	b110      	cbz	r0, bc58 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x288>
    bc52:	7067      	strb	r7, [r4, #1]
    bc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc58:	f44f 7103 	mov.w	r1, #524	; 0x20c
    bc5c:	e01e      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc5e:	70a0      	strb	r0, [r4, #2]
    bc60:	6862      	ldr	r2, [r4, #4]
    bc62:	2107      	movs	r1, #7
    bc64:	4630      	mov	r0, r6
    bc66:	4790      	blx	r2
    bc68:	2800      	cmp	r0, #0
    bc6a:	d0f3      	beq.n	bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc6c:	7800      	ldrb	r0, [r0, #0]
    bc6e:	2800      	cmp	r0, #0
    bc70:	d0f0      	beq.n	bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc72:	f44f 7105 	mov.w	r1, #532	; 0x214
    bc76:	e011      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc78:	f240 2119 	movw	r1, #537	; 0x219
    bc7c:	e00e      	b.n	bc9c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc7e:	2104      	movs	r1, #4
    bc80:	6862      	ldr	r2, [r4, #4]
    bc82:	e78e      	b.n	bba2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    bc84:	2103      	movs	r1, #3
    bc86:	6862      	ldr	r2, [r4, #4]
    bc88:	e78b      	b.n	bba2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    bc8a:	2d00      	cmp	r5, #0
    bc8c:	d1e2      	bne.n	bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc8e:	f000 f8f2 	bl	be76 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    bc92:	6800      	ldr	r0, [r0, #0]
    bc94:	2800      	cmp	r0, #0
    bc96:	d0dd      	beq.n	bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc98:	f44f 710d 	mov.w	r1, #564	; 0x234
    bc9c:	206a      	movs	r0, #106	; 0x6a
    bc9e:	f7f7 fddf 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bca2:	4602      	mov	r2, r0
    bca4:	7a03      	ldrb	r3, [r0, #8]
    bca6:	68c0      	ldr	r0, [r0, #12]
    bca8:	4408      	add	r0, r1
    bcaa:	60d0      	str	r0, [r2, #12]
    bcac:	3859      	subs	r0, #89	; 0x59
    bcae:	f7f6 bcb7 	b.w	2620 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    bcb2:	2201      	movs	r2, #1
    bcb4:	7202      	strb	r2, [r0, #8]
    bcb6:	2200      	movs	r2, #0
    bcb8:	74c2      	strb	r2, [r0, #19]
    bcba:	790a      	ldrb	r2, [r1, #4]
    bcbc:	b16a      	cbz	r2, bcda <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30a>
    bcbe:	2200      	movs	r2, #0
    bcc0:	8202      	strh	r2, [r0, #16]
    bcc2:	794a      	ldrb	r2, [r1, #5]
    bcc4:	b15a      	cbz	r2, bcde <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30e>
    bcc6:	2204      	movs	r2, #4
    bcc8:	7482      	strb	r2, [r0, #18]
    bcca:	688a      	ldr	r2, [r1, #8]
    bccc:	326c      	adds	r2, #108	; 0x6c
    bcce:	60c2      	str	r2, [r0, #12]
    bcd0:	68c9      	ldr	r1, [r1, #12]
    bcd2:	6141      	str	r1, [r0, #20]
    bcd4:	2103      	movs	r1, #3
    bcd6:	7081      	strb	r1, [r0, #2]
    bcd8:	4770      	bx	lr
    bcda:	222b      	movs	r2, #43	; 0x2b
    bcdc:	e7f0      	b.n	bcc0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2f0>
    bcde:	2203      	movs	r2, #3
    bce0:	e7f2      	b.n	bcc8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2f8>
    bce2:	b510      	push	{r4, lr}
    bce4:	4604      	mov	r4, r0
    bce6:	2000      	movs	r0, #0
    bce8:	7220      	strb	r0, [r4, #8]
    bcea:	74e0      	strb	r0, [r4, #19]
    bcec:	7908      	ldrb	r0, [r1, #4]
    bcee:	b180      	cbz	r0, bd12 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x342>
    bcf0:	2000      	movs	r0, #0
    bcf2:	8220      	strh	r0, [r4, #16]
    bcf4:	7948      	ldrb	r0, [r1, #5]
    bcf6:	b170      	cbz	r0, bd16 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x346>
    bcf8:	2004      	movs	r0, #4
    bcfa:	74a0      	strb	r0, [r4, #18]
    bcfc:	68c8      	ldr	r0, [r1, #12]
    bcfe:	306c      	adds	r0, #108	; 0x6c
    bd00:	60e0      	str	r0, [r4, #12]
    bd02:	6889      	ldr	r1, [r1, #8]
    bd04:	69a0      	ldr	r0, [r4, #24]
    bd06:	f7f5 fbe1 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bd0a:	6160      	str	r0, [r4, #20]
    bd0c:	2004      	movs	r0, #4
    bd0e:	70a0      	strb	r0, [r4, #2]
    bd10:	bd10      	pop	{r4, pc}
    bd12:	202b      	movs	r0, #43	; 0x2b
    bd14:	e7ed      	b.n	bcf2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x322>
    bd16:	2003      	movs	r0, #3
    bd18:	e7ef      	b.n	bcfa <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x32a>
    bd1a:	b570      	push	{r4, r5, r6, lr}
    bd1c:	4605      	mov	r5, r0
    bd1e:	460c      	mov	r4, r1
    bd20:	78c8      	ldrb	r0, [r1, #3]
    bd22:	f7f6 fa5b 	bl	21dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    bd26:	b178      	cbz	r0, bd48 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x378>
    bd28:	4620      	mov	r0, r4
    bd2a:	f000 f810 	bl	bd4e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
    bd2e:	6862      	ldr	r2, [r4, #4]
    bd30:	2109      	movs	r1, #9
    bd32:	4628      	mov	r0, r5
    bd34:	4790      	blx	r2
    bd36:	2800      	cmp	r0, #0
    bd38:	d008      	beq.n	bd4c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37c>
    bd3a:	7800      	ldrb	r0, [r0, #0]
    bd3c:	2800      	cmp	r0, #0
    bd3e:	d005      	beq.n	bd4c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37c>
    bd40:	21db      	movs	r1, #219	; 0xdb
    bd42:	206a      	movs	r0, #106	; 0x6a
    bd44:	f7f7 fd8c 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd48:	21d7      	movs	r1, #215	; 0xd7
    bd4a:	e7fa      	b.n	bd42 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x372>
    bd4c:	bd70      	pop	{r4, r5, r6, pc}
    bd4e:	2100      	movs	r1, #0
    bd50:	7081      	strb	r1, [r0, #2]
    bd52:	7001      	strb	r1, [r0, #0]
    bd54:	7041      	strb	r1, [r0, #1]
    bd56:	4770      	bx	lr

0000bd58 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    bd58:	b570      	push	{r4, r5, r6, lr}
    bd5a:	f7f4 fbbf 	bl	4dc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bd5e:	4605      	mov	r5, r0
    bd60:	2400      	movs	r4, #0
    bd62:	e006      	b.n	bd72 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    bd64:	4620      	mov	r0, r4
    bd66:	f7f4 fbbf 	bl	4e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bd6a:	f7ff fff0 	bl	bd4e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
    bd6e:	1c64      	adds	r4, r4, #1
    bd70:	b2e4      	uxtb	r4, r4
    bd72:	42ac      	cmp	r4, r5
    bd74:	d3f6      	bcc.n	bd64 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    bd76:	bd70      	pop	{r4, r5, r6, pc}

0000bd78 <mpsl_timeslot_request>:
    bd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd7c:	460d      	mov	r5, r1
    bd7e:	f7f4 fbb3 	bl	4e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bd82:	0004      	movs	r4, r0
    bd84:	d007      	beq.n	bd96 <mpsl_timeslot_request+0x1e>
    bd86:	78a0      	ldrb	r0, [r4, #2]
    bd88:	f06f 0622 	mvn.w	r6, #34	; 0x22
    bd8c:	2801      	cmp	r0, #1
    bd8e:	d006      	beq.n	bd9e <mpsl_timeslot_request+0x26>
    bd90:	2802      	cmp	r0, #2
    bd92:	d110      	bne.n	bdb6 <mpsl_timeslot_request+0x3e>
    bd94:	e003      	b.n	bd9e <mpsl_timeslot_request+0x26>
    bd96:	f06f 0001 	mvn.w	r0, #1
    bd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd9e:	f06f 0715 	mvn.w	r7, #21
    bda2:	b155      	cbz	r5, bdba <mpsl_timeslot_request+0x42>
    bda4:	4628      	mov	r0, r5
    bda6:	f7f4 fb15 	bl	3d4 <__aeabi_idiv0+0x4>
    bdaa:	b130      	cbz	r0, bdba <mpsl_timeslot_request+0x42>
    bdac:	7828      	ldrb	r0, [r5, #0]
    bdae:	b130      	cbz	r0, bdbe <mpsl_timeslot_request+0x46>
    bdb0:	78a0      	ldrb	r0, [r4, #2]
    bdb2:	2802      	cmp	r0, #2
    bdb4:	d008      	beq.n	bdc8 <mpsl_timeslot_request+0x50>
    bdb6:	4630      	mov	r0, r6
    bdb8:	e7ef      	b.n	bd9a <mpsl_timeslot_request+0x22>
    bdba:	4638      	mov	r0, r7
    bdbc:	e7ed      	b.n	bd9a <mpsl_timeslot_request+0x22>
    bdbe:	4629      	mov	r1, r5
    bdc0:	4620      	mov	r0, r4
    bdc2:	f7ff ff76 	bl	bcb2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2e2>
    bdc6:	e003      	b.n	bdd0 <mpsl_timeslot_request+0x58>
    bdc8:	4629      	mov	r1, r5
    bdca:	4620      	mov	r0, r4
    bdcc:	f7ff ff89 	bl	bce2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x312>
    bdd0:	78e0      	ldrb	r0, [r4, #3]
    bdd2:	f104 0108 	add.w	r1, r4, #8
    bdd6:	f7ff fe5b 	bl	ba90 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    bdda:	b108      	cbz	r0, bde0 <mpsl_timeslot_request+0x68>
    bddc:	2000      	movs	r0, #0
    bdde:	e7dc      	b.n	bd9a <mpsl_timeslot_request+0x22>
    bde0:	f240 21ae 	movw	r1, #686	; 0x2ae
    bde4:	206a      	movs	r0, #106	; 0x6a
    bde6:	f7f7 fd3b 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000bdea <mpsl_timeslot_session_close>:
    bdea:	b510      	push	{r4, lr}
    bdec:	4604      	mov	r4, r0
    bdee:	f7f4 fb7b 	bl	4e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bdf2:	0001      	movs	r1, r0
    bdf4:	d004      	beq.n	be00 <mpsl_timeslot_session_close+0x16>
    bdf6:	7808      	ldrb	r0, [r1, #0]
    bdf8:	f06f 0222 	mvn.w	r2, #34	; 0x22
    bdfc:	b968      	cbnz	r0, be1a <mpsl_timeslot_session_close+0x30>
    bdfe:	e002      	b.n	be06 <mpsl_timeslot_session_close+0x1c>
    be00:	f06f 0001 	mvn.w	r0, #1
    be04:	bd10      	pop	{r4, pc}
    be06:	7888      	ldrb	r0, [r1, #2]
    be08:	b138      	cbz	r0, be1a <mpsl_timeslot_session_close+0x30>
    be0a:	2802      	cmp	r0, #2
    be0c:	d007      	beq.n	be1e <mpsl_timeslot_session_close+0x34>
    be0e:	2801      	cmp	r0, #1
    be10:	d005      	beq.n	be1e <mpsl_timeslot_session_close+0x34>
    be12:	2001      	movs	r0, #1
    be14:	7008      	strb	r0, [r1, #0]
    be16:	2000      	movs	r0, #0
    be18:	bd10      	pop	{r4, pc}
    be1a:	4610      	mov	r0, r2
    be1c:	bd10      	pop	{r4, pc}
    be1e:	4620      	mov	r0, r4
    be20:	f7ff ff7b 	bl	bd1a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    be24:	e7f7      	b.n	be16 <mpsl_timeslot_session_close+0x2c>

0000be26 <mpsl_timeslot_session_count_set>:
    be26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be2a:	460e      	mov	r6, r1
    be2c:	4607      	mov	r7, r0
    be2e:	f7f4 fb55 	bl	4dc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    be32:	4605      	mov	r5, r0
    be34:	2400      	movs	r4, #0
    be36:	e00a      	b.n	be4e <mpsl_timeslot_session_count_set+0x28>
    be38:	4620      	mov	r0, r4
    be3a:	f7f4 fb55 	bl	4e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    be3e:	7880      	ldrb	r0, [r0, #2]
    be40:	b118      	cbz	r0, be4a <mpsl_timeslot_session_count_set+0x24>
    be42:	f04f 30ff 	mov.w	r0, #4294967295
    be46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be4a:	1c64      	adds	r4, r4, #1
    be4c:	b2e4      	uxtb	r4, r4
    be4e:	42ac      	cmp	r4, r5
    be50:	d3f2      	bcc.n	be38 <mpsl_timeslot_session_count_set+0x12>
    be52:	2e08      	cmp	r6, #8
    be54:	d902      	bls.n	be5c <mpsl_timeslot_session_count_set+0x36>
    be56:	f06f 0015 	mvn.w	r0, #21
    be5a:	e7f4      	b.n	be46 <mpsl_timeslot_session_count_set+0x20>
    be5c:	b117      	cbz	r7, be64 <mpsl_timeslot_session_count_set+0x3e>
    be5e:	4631      	mov	r1, r6
    be60:	4638      	mov	r0, r7
    be62:	e001      	b.n	be68 <mpsl_timeslot_session_count_set+0x42>
    be64:	2100      	movs	r1, #0
    be66:	4608      	mov	r0, r1
    be68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    be6c:	f7f4 bb24 	b.w	4b8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000be70 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    be70:	2000      	movs	r0, #0
    be72:	f7f7 b907 	b.w	3084 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000be76 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    be76:	2000      	movs	r0, #0
    be78:	f7f7 b8ea 	b.w	3050 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000be7c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    be7c:	b510      	push	{r4, lr}
    be7e:	f7f6 fdd3 	bl	2a28 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    be82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    be86:	f000 b800 	b.w	be8a <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000be8a <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    be8a:	0a41      	lsrs	r1, r0, #9
    be8c:	f643 5209 	movw	r2, #15625	; 0x3d09
    be90:	4351      	muls	r1, r2
    be92:	f3c0 0008 	ubfx	r0, r0, #0, #9
    be96:	fb10 f002 	smulbb	r0, r0, r2
    be9a:	f500 7080 	add.w	r0, r0, #256	; 0x100
    be9e:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    bea2:	4770      	bx	lr

0000bea4 <MPSL_IRQ_RADIO_Handler>:
    bea4:	f7f5 bb80 	b.w	15a8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    bea8:	2800      	cmp	r0, #0
    beaa:	db09      	blt.n	bec0 <MPSL_IRQ_RADIO_Handler+0x1c>
    beac:	f000 021f 	and.w	r2, r0, #31
    beb0:	2101      	movs	r1, #1
    beb2:	4091      	lsls	r1, r2
    beb4:	0940      	lsrs	r0, r0, #5
    beb6:	0080      	lsls	r0, r0, #2
    beb8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bebc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bec0:	4770      	bx	lr
    bec2:	2800      	cmp	r0, #0
    bec4:	db0d      	blt.n	bee2 <MPSL_IRQ_RADIO_Handler+0x3e>
    bec6:	f000 021f 	and.w	r2, r0, #31
    beca:	2101      	movs	r1, #1
    becc:	4091      	lsls	r1, r2
    bece:	0940      	lsrs	r0, r0, #5
    bed0:	0080      	lsls	r0, r0, #2
    bed2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bed6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    beda:	f3bf 8f4f 	dsb	sy
    bede:	f3bf 8f6f 	isb	sy
    bee2:	4770      	bx	lr

0000bee4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bee4:	b570      	push	{r4, r5, r6, lr}
    bee6:	4602      	mov	r2, r0
    bee8:	2000      	movs	r0, #0
    beea:	2900      	cmp	r1, #0
    beec:	d01d      	beq.n	bf2a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    beee:	fba2 0101 	umull	r0, r1, r2, r1
    bef2:	0a40      	lsrs	r0, r0, #9
    bef4:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    bef8:	0a49      	lsrs	r1, r1, #9
    befa:	1c40      	adds	r0, r0, #1
    befc:	f141 0100 	adc.w	r1, r1, #0
    bf00:	f240 72a1 	movw	r2, #1953	; 0x7a1
    bf04:	1883      	adds	r3, r0, r2
    bf06:	f141 0100 	adc.w	r1, r1, #0
    bf0a:	1c5b      	adds	r3, r3, #1
    bf0c:	f141 0400 	adc.w	r4, r1, #0
    bf10:	2100      	movs	r1, #0
    bf12:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    bf16:	41a1      	sbcs	r1, r4
    bf18:	d203      	bcs.n	bf22 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    bf1a:	2171      	movs	r1, #113	; 0x71
    bf1c:	206d      	movs	r0, #109	; 0x6d
    bf1e:	f7f7 fc9f 	bl	3860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf22:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bf26:	fbb0 f0f2 	udiv	r0, r0, r2
    bf2a:	bd70      	pop	{r4, r5, r6, pc}
    bf2c:	5840      	ldr	r0, [r0, r1]
    bf2e:	2800      	cmp	r0, #0
    bf30:	d000      	beq.n	bf34 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    bf32:	2001      	movs	r0, #1
    bf34:	4770      	bx	lr
    bf36:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    bf3a:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    bf3e:	f002 0201 	and.w	r2, r2, #1
    bf42:	03c0      	lsls	r0, r0, #15
    bf44:	d503      	bpl.n	bf4e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bf46:	428a      	cmp	r2, r1
    bf48:	d101      	bne.n	bf4e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bf4a:	2001      	movs	r0, #1
    bf4c:	4770      	bx	lr
    bf4e:	2000      	movs	r0, #0
    bf50:	4770      	bx	lr

0000bf52 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bf52:	b510      	push	{r4, lr}
    bf54:	2101      	movs	r1, #1
    bf56:	0788      	lsls	r0, r1, #30
    bf58:	f7f7 fc40 	bl	37dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bf5c:	2800      	cmp	r0, #0
    bf5e:	d000      	beq.n	bf62 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bf60:	2001      	movs	r0, #1
    bf62:	bd10      	pop	{r4, pc}

0000bf64 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bf64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bf68:	2101      	movs	r1, #1
    bf6a:	6001      	str	r1, [r0, #0]
    bf6c:	4770      	bx	lr

0000bf6e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    bf6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    bf72:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bf76:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bf7a:	f002 0203 	and.w	r2, r2, #3
    bf7e:	03c9      	lsls	r1, r1, #15
    bf80:	d503      	bpl.n	bf8a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bf82:	4282      	cmp	r2, r0
    bf84:	d101      	bne.n	bf8a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bf86:	2001      	movs	r0, #1
    bf88:	4770      	bx	lr
    bf8a:	2000      	movs	r0, #0
    bf8c:	4770      	bx	lr

0000bf8e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bf8e:	b510      	push	{r4, lr}
    bf90:	2100      	movs	r1, #0
    bf92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bf96:	f7f7 fc21 	bl	37dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bf9a:	2800      	cmp	r0, #0
    bf9c:	d000      	beq.n	bfa0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bf9e:	2001      	movs	r0, #1
    bfa0:	bd10      	pop	{r4, pc}
    bfa2:	2800      	cmp	r0, #0
    bfa4:	db09      	blt.n	bfba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bfa6:	f000 021f 	and.w	r2, r0, #31
    bfaa:	2101      	movs	r1, #1
    bfac:	4091      	lsls	r1, r2
    bfae:	0940      	lsrs	r0, r0, #5
    bfb0:	0080      	lsls	r0, r0, #2
    bfb2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bfb6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bfba:	4770      	bx	lr
    bfbc:	2800      	cmp	r0, #0
    bfbe:	db0d      	blt.n	bfdc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bfc0:	f000 021f 	and.w	r2, r0, #31
    bfc4:	2101      	movs	r1, #1
    bfc6:	4091      	lsls	r1, r2
    bfc8:	0940      	lsrs	r0, r0, #5
    bfca:	0080      	lsls	r0, r0, #2
    bfcc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bfd0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bfd4:	f3bf 8f4f 	dsb	sy
    bfd8:	f3bf 8f6f 	isb	sy
    bfdc:	4770      	bx	lr
    bfde:	1000      	.short	0x1000
    bfe0:	00fa0002 	.word	0x00fa0002
    bfe4:	ffdf0000 	.word	0xffdf0000
    bfe8:	4707a0e7 	.word	0x4707a0e7
    bfec:	d67d016b 	.word	0xd67d016b
    bff0:	ce3a8a07 	.word	0xce3a8a07
    bff4:	d057d4b6 	.word	0xd057d4b6
    bff8:	c542      	.short	0xc542
    bffa:	2800      	cmp	r0, #0
    bffc:	db09      	blt.n	c012 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bffe:	f000 021f 	and.w	r2, r0, #31
    c002:	2101      	movs	r1, #1
    c004:	4091      	lsls	r1, r2
    c006:	0940      	lsrs	r0, r0, #5
    c008:	0080      	lsls	r0, r0, #2
    c00a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c00e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c012:	4770      	bx	lr

0000c014 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c014:	f3ef 8110 	mrs	r1, PRIMASK
    c018:	b672      	cpsid	i
    c01a:	7802      	ldrb	r2, [r0, #0]
    c01c:	2a01      	cmp	r2, #1
    c01e:	d001      	beq.n	c024 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c020:	2201      	movs	r2, #1
    c022:	e000      	b.n	c026 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c024:	2200      	movs	r2, #0
    c026:	2301      	movs	r3, #1
    c028:	7003      	strb	r3, [r0, #0]
    c02a:	b901      	cbnz	r1, c02e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c02c:	b662      	cpsie	i
    c02e:	b10a      	cbz	r2, c034 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c030:	2000      	movs	r0, #0
    c032:	4770      	bx	lr
    c034:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c038:	4770      	bx	lr

0000c03a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c03a:	2100      	movs	r1, #0
    c03c:	7001      	strb	r1, [r0, #0]
    c03e:	4608      	mov	r0, r1
    c040:	4770      	bx	lr

0000c042 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c042:	f3ef 8110 	mrs	r1, PRIMASK
    c046:	b672      	cpsid	i
    c048:	2200      	movs	r2, #0
    c04a:	7002      	strb	r2, [r0, #0]
    c04c:	b901      	cbnz	r1, c050 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c04e:	b662      	cpsie	i
    c050:	2000      	movs	r0, #0
    c052:	4770      	bx	lr

0000c054 <mpsl_low_priority_process>:
    c054:	f7f7 bcf0 	b.w	3a38 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c058 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c058:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c05c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c060:	280f      	cmp	r0, #15
    c062:	d001      	beq.n	c068 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c064:	2000      	movs	r0, #0
    c066:	4770      	bx	lr
    c068:	2001      	movs	r0, #1
    c06a:	4770      	bx	lr

0000c06c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c06c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c070:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c074:	280a      	cmp	r0, #10
    c076:	d001      	beq.n	c07c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c078:	2000      	movs	r0, #0
    c07a:	4770      	bx	lr
    c07c:	2001      	movs	r0, #1
    c07e:	4770      	bx	lr

0000c080 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c080:	b500      	push	{lr}
    c082:	f7ff fff3 	bl	c06c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c086:	b120      	cbz	r0, c092 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c088:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c08c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c090:	b108      	cbz	r0, c096 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c092:	2000      	movs	r0, #0
    c094:	bd00      	pop	{pc}
    c096:	2001      	movs	r0, #1
    c098:	bd00      	pop	{pc}

0000c09a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c09a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c09e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c0a2:	280e      	cmp	r0, #14
    c0a4:	d001      	beq.n	c0aa <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c0a6:	2000      	movs	r0, #0
    c0a8:	4770      	bx	lr
    c0aa:	2001      	movs	r0, #1
    c0ac:	4770      	bx	lr

0000c0ae <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c0ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0b2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c0b6:	2810      	cmp	r0, #16
    c0b8:	d001      	beq.n	c0be <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c0ba:	2000      	movs	r0, #0
    c0bc:	4770      	bx	lr
    c0be:	2001      	movs	r0, #1
    c0c0:	4770      	bx	lr

0000c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c0c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0c6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c0ca:	2806      	cmp	r0, #6
    c0cc:	d003      	beq.n	c0d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c0ce:	1c40      	adds	r0, r0, #1
    c0d0:	d001      	beq.n	c0d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c0d2:	2000      	movs	r0, #0
    c0d4:	4770      	bx	lr
    c0d6:	2001      	movs	r0, #1
    c0d8:	4770      	bx	lr

0000c0da <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c0da:	b500      	push	{lr}
    c0dc:	f7ff fff1 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c0e0:	b148      	cbz	r0, c0f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c0e2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0e6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c0ea:	2806      	cmp	r0, #6
    c0ec:	d303      	bcc.n	c0f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c0ee:	1c40      	adds	r0, r0, #1
    c0f0:	d001      	beq.n	c0f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c0f2:	2001      	movs	r0, #1
    c0f4:	bd00      	pop	{pc}
    c0f6:	2000      	movs	r0, #0
    c0f8:	bd00      	pop	{pc}

0000c0fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c0fa:	b500      	push	{lr}
    c0fc:	f7ff ffe1 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c100:	b138      	cbz	r0, c112 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c102:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c106:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c10a:	2806      	cmp	r0, #6
    c10c:	d303      	bcc.n	c116 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c10e:	1c40      	adds	r0, r0, #1
    c110:	d001      	beq.n	c116 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c112:	2000      	movs	r0, #0
    c114:	bd00      	pop	{pc}
    c116:	2001      	movs	r0, #1
    c118:	bd00      	pop	{pc}

0000c11a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c11a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c11e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c122:	280d      	cmp	r0, #13
    c124:	d001      	beq.n	c12a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c126:	2000      	movs	r0, #0
    c128:	4770      	bx	lr
    c12a:	2001      	movs	r0, #1
    c12c:	4770      	bx	lr

0000c12e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c12e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c132:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c136:	2808      	cmp	r0, #8
    c138:	d001      	beq.n	c13e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c13a:	2000      	movs	r0, #0
    c13c:	4770      	bx	lr
    c13e:	2001      	movs	r0, #1
    c140:	4770      	bx	lr

0000c142 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c142:	2a00      	cmp	r2, #0
    c144:	bf04      	itt	eq
    c146:	2000      	moveq	r0, #0
    c148:	4770      	bxeq	lr
    c14a:	1e52      	subs	r2, r2, #1
    c14c:	d007      	beq.n	c15e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c14e:	7803      	ldrb	r3, [r0, #0]
    c150:	f891 c000 	ldrb.w	ip, [r1]
    c154:	4563      	cmp	r3, ip
    c156:	bf04      	itt	eq
    c158:	1c40      	addeq	r0, r0, #1
    c15a:	1c49      	addeq	r1, r1, #1
    c15c:	d0f5      	beq.n	c14a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c15e:	7800      	ldrb	r0, [r0, #0]
    c160:	7809      	ldrb	r1, [r1, #0]
    c162:	1a40      	subs	r0, r0, r1
    c164:	4770      	bx	lr

0000c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c166:	b4f0      	push	{r4, r5, r6, r7}
    c168:	ea80 0c01 	eor.w	ip, r0, r1
    c16c:	4603      	mov	r3, r0
    c16e:	f01c 0f03 	tst.w	ip, #3
    c172:	d13c      	bne.n	c1ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c174:	f013 0f03 	tst.w	r3, #3
    c178:	d00b      	beq.n	c192 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c17a:	2a00      	cmp	r2, #0
    c17c:	bf04      	itt	eq
    c17e:	bcf0      	popeq	{r4, r5, r6, r7}
    c180:	4770      	bxeq	lr
    c182:	f811 cb01 	ldrb.w	ip, [r1], #1
    c186:	f803 cb01 	strb.w	ip, [r3], #1
    c18a:	1e52      	subs	r2, r2, #1
    c18c:	f013 0f03 	tst.w	r3, #3
    c190:	d1f3      	bne.n	c17a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c192:	2a03      	cmp	r2, #3
    c194:	d94f      	bls.n	c236 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c196:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c19a:	d24c      	bcs.n	c236 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c19c:	f1c2 0c00 	rsb	ip, r2, #0
    c1a0:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c1a4:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c1a8:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c1ac:	f1cc 0c00 	rsb	ip, ip, #0
    c1b0:	f1bc 0f00 	cmp.w	ip, #0
    c1b4:	dd1b      	ble.n	c1ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c1b6:	1f0d      	subs	r5, r1, #4
    c1b8:	1f1c      	subs	r4, r3, #4
    c1ba:	f01c 0f01 	tst.w	ip, #1
    c1be:	d003      	beq.n	c1c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c1c0:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c1c4:	f844 6f04 	str.w	r6, [r4, #4]!
    c1c8:	ea5f 066c 	movs.w	r6, ip, asr #1
    c1cc:	d007      	beq.n	c1de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c1ce:	686f      	ldr	r7, [r5, #4]
    c1d0:	6067      	str	r7, [r4, #4]
    c1d2:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c1d6:	f844 7f08 	str.w	r7, [r4, #8]!
    c1da:	1e76      	subs	r6, r6, #1
    c1dc:	d1f7      	bne.n	c1ce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c1de:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c1e2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c1e6:	f1cc 0c00 	rsb	ip, ip, #0
    c1ea:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c1ee:	2a00      	cmp	r2, #0
    c1f0:	bf04      	itt	eq
    c1f2:	bcf0      	popeq	{r4, r5, r6, r7}
    c1f4:	4770      	bxeq	lr
    c1f6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c1fa:	d226      	bcs.n	c24a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c1fc:	2a00      	cmp	r2, #0
    c1fe:	bfdc      	itt	le
    c200:	bcf0      	pople	{r4, r5, r6, r7}
    c202:	4770      	bxle	lr
    c204:	1e49      	subs	r1, r1, #1
    c206:	1e5b      	subs	r3, r3, #1
    c208:	f012 0f01 	tst.w	r2, #1
    c20c:	d003      	beq.n	c216 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c20e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c212:	f803 cf01 	strb.w	ip, [r3, #1]!
    c216:	1052      	asrs	r2, r2, #1
    c218:	bf04      	itt	eq
    c21a:	bcf0      	popeq	{r4, r5, r6, r7}
    c21c:	4770      	bxeq	lr
    c21e:	f891 c001 	ldrb.w	ip, [r1, #1]
    c222:	f883 c001 	strb.w	ip, [r3, #1]
    c226:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c22a:	f803 cf02 	strb.w	ip, [r3, #2]!
    c22e:	1e52      	subs	r2, r2, #1
    c230:	d1f5      	bne.n	c21e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c232:	bcf0      	pop	{r4, r5, r6, r7}
    c234:	4770      	bx	lr
    c236:	2a04      	cmp	r2, #4
    c238:	d3d9      	bcc.n	c1ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c23a:	f851 cb04 	ldr.w	ip, [r1], #4
    c23e:	1f12      	subs	r2, r2, #4
    c240:	f843 cb04 	str.w	ip, [r3], #4
    c244:	2a04      	cmp	r2, #4
    c246:	d2f8      	bcs.n	c23a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c248:	e7d1      	b.n	c1ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c24a:	f811 cb01 	ldrb.w	ip, [r1], #1
    c24e:	f803 cb01 	strb.w	ip, [r3], #1
    c252:	1e52      	subs	r2, r2, #1
    c254:	d1f9      	bne.n	c24a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c256:	bcf0      	pop	{r4, r5, r6, r7}
    c258:	4770      	bx	lr

0000c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c25a:	b470      	push	{r4, r5, r6}
    c25c:	4603      	mov	r3, r0
    c25e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c262:	f010 0f03 	tst.w	r0, #3
    c266:	d009      	beq.n	c27c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c268:	2a00      	cmp	r2, #0
    c26a:	bf04      	itt	eq
    c26c:	bc70      	popeq	{r4, r5, r6}
    c26e:	4770      	bxeq	lr
    c270:	f803 cb01 	strb.w	ip, [r3], #1
    c274:	1e52      	subs	r2, r2, #1
    c276:	f013 0f03 	tst.w	r3, #3
    c27a:	d1f5      	bne.n	c268 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c27c:	b2c9      	uxtb	r1, r1
    c27e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c282:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c286:	2a03      	cmp	r2, #3
    c288:	d939      	bls.n	c2fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c28a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c28e:	d236      	bcs.n	c2fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c290:	4251      	negs	r1, r2
    c292:	17cc      	asrs	r4, r1, #31
    c294:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c298:	1089      	asrs	r1, r1, #2
    c29a:	424e      	negs	r6, r1
    c29c:	2e00      	cmp	r6, #0
    c29e:	dd11      	ble.n	c2c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c2a0:	1f19      	subs	r1, r3, #4
    c2a2:	f016 0f01 	tst.w	r6, #1
    c2a6:	bf18      	it	ne
    c2a8:	f841 5f04 	strne.w	r5, [r1, #4]!
    c2ac:	1074      	asrs	r4, r6, #1
    c2ae:	d004      	beq.n	c2ba <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c2b0:	604d      	str	r5, [r1, #4]
    c2b2:	f841 5f08 	str.w	r5, [r1, #8]!
    c2b6:	1e64      	subs	r4, r4, #1
    c2b8:	d1fa      	bne.n	c2b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c2ba:	4271      	negs	r1, r6
    c2bc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c2c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c2c4:	2a00      	cmp	r2, #0
    c2c6:	bf04      	itt	eq
    c2c8:	bc70      	popeq	{r4, r5, r6}
    c2ca:	4770      	bxeq	lr
    c2cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c2d0:	d21d      	bcs.n	c30e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c2d2:	2a00      	cmp	r2, #0
    c2d4:	bfdc      	itt	le
    c2d6:	bc70      	pople	{r4, r5, r6}
    c2d8:	4770      	bxle	lr
    c2da:	1e59      	subs	r1, r3, #1
    c2dc:	f012 0f01 	tst.w	r2, #1
    c2e0:	bf18      	it	ne
    c2e2:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c2e6:	1052      	asrs	r2, r2, #1
    c2e8:	bf04      	itt	eq
    c2ea:	bc70      	popeq	{r4, r5, r6}
    c2ec:	4770      	bxeq	lr
    c2ee:	f881 c001 	strb.w	ip, [r1, #1]
    c2f2:	f801 cf02 	strb.w	ip, [r1, #2]!
    c2f6:	1e52      	subs	r2, r2, #1
    c2f8:	d1f9      	bne.n	c2ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c2fa:	bc70      	pop	{r4, r5, r6}
    c2fc:	4770      	bx	lr
    c2fe:	2a04      	cmp	r2, #4
    c300:	d3e0      	bcc.n	c2c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c302:	1f12      	subs	r2, r2, #4
    c304:	f843 5b04 	str.w	r5, [r3], #4
    c308:	2a04      	cmp	r2, #4
    c30a:	d2fa      	bcs.n	c302 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c30c:	e7da      	b.n	c2c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c30e:	f803 cb01 	strb.w	ip, [r3], #1
    c312:	1e52      	subs	r2, r2, #1
    c314:	d1fb      	bne.n	c30e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c316:	bc70      	pop	{r4, r5, r6}
    c318:	4770      	bx	lr
    c31a:	f04f 30ff 	mov.w	r0, #4294967295
    c31e:	4770      	bx	lr
    c320:	2000      	movs	r0, #0
    c322:	4770      	bx	lr
    c324:	2000      	movs	r0, #0
    c326:	4770      	bx	lr
    c328:	f04f 30ff 	mov.w	r0, #4294967295
    c32c:	4770      	bx	lr
    c32e:	4770      	bx	lr
    c330:	4770      	bx	lr
    c332:	f04f 30ff 	mov.w	r0, #4294967295
    c336:	4770      	bx	lr
    c338:	f04f 30ff 	mov.w	r0, #4294967295
    c33c:	4770      	bx	lr
    c33e:	2100      	movs	r1, #0
    c340:	7001      	strb	r1, [r0, #0]
    c342:	4770      	bx	lr
    c344:	f04f 30ff 	mov.w	r0, #4294967295
    c348:	4770      	bx	lr
    c34a:	f04f 30ff 	mov.w	r0, #4294967295
    c34e:	4770      	bx	lr
    c350:	2000      	movs	r0, #0
    c352:	4770      	bx	lr
    c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c356:	4604      	mov	r4, r0
    c358:	f100 0003 	add.w	r0, r0, #3
    c35c:	f020 0003 	bic.w	r0, r0, #3
    c360:	0015      	movs	r5, r2
    c362:	9000      	str	r0, [sp, #0]
    c364:	460e      	mov	r6, r1
    c366:	788a      	ldrb	r2, [r1, #2]
    c368:	7849      	ldrb	r1, [r1, #1]
    c36a:	d000      	beq.n	c36e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x114>
    c36c:	2000      	movs	r0, #0
    c36e:	f7f7 fee7 	bl	4140 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c372:	9900      	ldr	r1, [sp, #0]
    c374:	4408      	add	r0, r1
    c376:	9000      	str	r0, [sp, #0]
    c378:	78b1      	ldrb	r1, [r6, #2]
    c37a:	b131      	cbz	r1, c38a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x130>
    c37c:	b105      	cbz	r5, c380 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x126>
    c37e:	2000      	movs	r0, #0
    c380:	f7f8 f93e 	bl	4600 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c384:	9900      	ldr	r1, [sp, #0]
    c386:	4408      	add	r0, r1
    c388:	9000      	str	r0, [sp, #0]
    c38a:	462a      	mov	r2, r5
    c38c:	4631      	mov	r1, r6
    c38e:	4668      	mov	r0, sp
    c390:	f000 f807 	bl	c3a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x148>
    c394:	9800      	ldr	r0, [sp, #0]
    c396:	1dc0      	adds	r0, r0, #7
    c398:	f020 0007 	bic.w	r0, r0, #7
    c39c:	9000      	str	r0, [sp, #0]
    c39e:	1b00      	subs	r0, r0, r4
    c3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3a6:	4606      	mov	r6, r0
    c3a8:	460c      	mov	r4, r1
    c3aa:	7808      	ldrb	r0, [r1, #0]
    c3ac:	7849      	ldrb	r1, [r1, #1]
    c3ae:	2700      	movs	r7, #0
    c3b0:	4408      	add	r0, r1
    c3b2:	4691      	mov	r9, r2
    c3b4:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c3b8:	463d      	mov	r5, r7
    c3ba:	e00e      	b.n	c3da <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    c3bc:	79a3      	ldrb	r3, [r4, #6]
    c3be:	2b02      	cmp	r3, #2
    c3c0:	d200      	bcs.n	c3c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x16a>
    c3c2:	2302      	movs	r3, #2
    c3c4:	7962      	ldrb	r2, [r4, #5]
    c3c6:	2a03      	cmp	r2, #3
    c3c8:	d200      	bcs.n	c3cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x172>
    c3ca:	2203      	movs	r2, #3
    c3cc:	7921      	ldrb	r1, [r4, #4]
    c3ce:	78e0      	ldrb	r0, [r4, #3]
    c3d0:	f000 ff01 	bl	d1d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c3d4:	1c6d      	adds	r5, r5, #1
    c3d6:	4407      	add	r7, r0
    c3d8:	b2ed      	uxtb	r5, r5
    c3da:	4545      	cmp	r5, r8
    c3dc:	d3ee      	bcc.n	c3bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x162>
    c3de:	6830      	ldr	r0, [r6, #0]
    c3e0:	1cc0      	adds	r0, r0, #3
    c3e2:	f020 0003 	bic.w	r0, r0, #3
    c3e6:	6030      	str	r0, [r6, #0]
    c3e8:	f1b9 0f00 	cmp.w	r9, #0
    c3ec:	d000      	beq.n	c3f0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    c3ee:	2000      	movs	r0, #0
    c3f0:	463a      	mov	r2, r7
    c3f2:	4641      	mov	r1, r8
    c3f4:	f7f8 f87c 	bl	44f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c3f8:	6831      	ldr	r1, [r6, #0]
    c3fa:	4408      	add	r0, r1
    c3fc:	6030      	str	r0, [r6, #0]
    c3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c402 <sdc_soc_ecb_block_encrypt>:
    c402:	b530      	push	{r4, r5, lr}
    c404:	460d      	mov	r5, r1
    c406:	b08d      	sub	sp, #52	; 0x34
    c408:	4614      	mov	r4, r2
    c40a:	4601      	mov	r1, r0
    c40c:	2210      	movs	r2, #16
    c40e:	4668      	mov	r0, sp
    c410:	f7ff fea9 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c414:	2210      	movs	r2, #16
    c416:	4629      	mov	r1, r5
    c418:	a804      	add	r0, sp, #16
    c41a:	f7ff fea4 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c41e:	4668      	mov	r0, sp
    c420:	f7f8 f9b8 	bl	4794 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c424:	b118      	cbz	r0, c42e <sdc_soc_ecb_block_encrypt+0x2c>
    c426:	f06f 0015 	mvn.w	r0, #21
    c42a:	b00d      	add	sp, #52	; 0x34
    c42c:	bd30      	pop	{r4, r5, pc}
    c42e:	2210      	movs	r2, #16
    c430:	4620      	mov	r0, r4
    c432:	a908      	add	r1, sp, #32
    c434:	f7ff fe97 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c438:	2000      	movs	r0, #0
    c43a:	e7f6      	b.n	c42a <sdc_soc_ecb_block_encrypt+0x28>

0000c43c <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c43c:	2000      	movs	r0, #0
    c43e:	4770      	bx	lr

0000c440 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c440:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c442:	4604      	mov	r4, r0
    c444:	1d01      	adds	r1, r0, #4
    c446:	4668      	mov	r0, sp
    c448:	f7f9 fdb6 	bl	5fb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c44c:	2800      	cmp	r0, #0
    c44e:	d004      	beq.n	c45a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c450:	4669      	mov	r1, sp
    c452:	4620      	mov	r0, r4
    c454:	f000 f848 	bl	c4e8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c458:	2001      	movs	r0, #1
    c45a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c45c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c45c:	b50e      	push	{r1, r2, r3, lr}
    c45e:	4601      	mov	r1, r0
    c460:	4668      	mov	r0, sp
    c462:	f000 f827 	bl	c4b4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c466:	4668      	mov	r0, sp
    c468:	f7f9 fdd0 	bl	600c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c46c:	bd0e      	pop	{r1, r2, r3, pc}

0000c46e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c46e:	b510      	push	{r4, lr}
    c470:	4604      	mov	r4, r0
    c472:	4620      	mov	r0, r4
    c474:	f7f7 fd6c 	bl	3f50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c478:	2800      	cmp	r0, #0
    c47a:	d006      	beq.n	c48a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c47c:	78a1      	ldrb	r1, [r4, #2]
    c47e:	7820      	ldrb	r0, [r4, #0]
    c480:	f000 f804 	bl	c48c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c484:	2800      	cmp	r0, #0
    c486:	d0f4      	beq.n	c472 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c488:	2001      	movs	r0, #1
    c48a:	bd10      	pop	{r4, pc}
    c48c:	b570      	push	{r4, r5, r6, lr}
    c48e:	460c      	mov	r4, r1
    c490:	4605      	mov	r5, r0
    c492:	f7f7 fdd1 	bl	4038 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c496:	2800      	cmp	r0, #0
    c498:	d002      	beq.n	c4a0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c49a:	2d3e      	cmp	r5, #62	; 0x3e
    c49c:	d001      	beq.n	c4a2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c49e:	2001      	movs	r0, #1
    c4a0:	bd70      	pop	{r4, r5, r6, pc}
    c4a2:	2c12      	cmp	r4, #18
    c4a4:	d004      	beq.n	c4b0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c4a6:	4620      	mov	r0, r4
    c4a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c4ac:	f7f7 bde0 	b.w	4070 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c4b0:	2000      	movs	r0, #0
    c4b2:	bd70      	pop	{r4, r5, r6, pc}

0000c4b4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c4b4:	880a      	ldrh	r2, [r1, #0]
    c4b6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c4ba:	8002      	strh	r2, [r0, #0]
    c4bc:	884a      	ldrh	r2, [r1, #2]
    c4be:	8042      	strh	r2, [r0, #2]
    c4c0:	784a      	ldrb	r2, [r1, #1]
    c4c2:	0993      	lsrs	r3, r2, #6
    c4c4:	2200      	movs	r2, #0
    c4c6:	7142      	strb	r2, [r0, #5]
    c4c8:	784b      	ldrb	r3, [r1, #1]
    c4ca:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c4ce:	b11b      	cbz	r3, c4d8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c4d0:	2b01      	cmp	r3, #1
    c4d2:	d005      	beq.n	c4e0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c4d4:	2b02      	cmp	r3, #2
    c4d6:	d005      	beq.n	c4e4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c4d8:	7102      	strb	r2, [r0, #4]
    c4da:	1d09      	adds	r1, r1, #4
    c4dc:	6081      	str	r1, [r0, #8]
    c4de:	4770      	bx	lr
    c4e0:	2201      	movs	r2, #1
    c4e2:	e7f9      	b.n	c4d8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c4e4:	2202      	movs	r2, #2
    c4e6:	e7f7      	b.n	c4d8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c4e8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c4e8:	b510      	push	{r4, lr}
    c4ea:	460c      	mov	r4, r1
    c4ec:	7809      	ldrb	r1, [r1, #0]
    c4ee:	7001      	strb	r1, [r0, #0]
    c4f0:	7841      	ldrb	r1, [r0, #1]
    c4f2:	f021 010f 	bic.w	r1, r1, #15
    c4f6:	7041      	strb	r1, [r0, #1]
    c4f8:	8822      	ldrh	r2, [r4, #0]
    c4fa:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c4fe:	4311      	orrs	r1, r2
    c500:	7041      	strb	r1, [r0, #1]
    c502:	78a2      	ldrb	r2, [r4, #2]
    c504:	7082      	strb	r2, [r0, #2]
    c506:	8862      	ldrh	r2, [r4, #2]
    c508:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c50c:	0a12      	lsrs	r2, r2, #8
    c50e:	70c2      	strb	r2, [r0, #3]
    c510:	7041      	strb	r1, [r0, #1]
    c512:	7922      	ldrb	r2, [r4, #4]
    c514:	f002 0203 	and.w	r2, r2, #3
    c518:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c51c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c520:	7041      	strb	r1, [r0, #1]
    c522:	7962      	ldrb	r2, [r4, #5]
    c524:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c528:	7041      	strb	r1, [r0, #1]
    c52a:	68a1      	ldr	r1, [r4, #8]
    c52c:	1d02      	adds	r2, r0, #4
    c52e:	4291      	cmp	r1, r2
    c530:	d006      	beq.n	c540 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c532:	8862      	ldrh	r2, [r4, #2]
    c534:	2afb      	cmp	r2, #251	; 0xfb
    c536:	d300      	bcc.n	c53a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c538:	22fb      	movs	r2, #251	; 0xfb
    c53a:	1d00      	adds	r0, r0, #4
    c53c:	f7ff fe13 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c540:	78a0      	ldrb	r0, [r4, #2]
    c542:	1d00      	adds	r0, r0, #4
    c544:	b2c0      	uxtb	r0, r0
    c546:	bd10      	pop	{r4, pc}

0000c548 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c54c:	4604      	mov	r4, r0
    c54e:	780f      	ldrb	r7, [r1, #0]
    c550:	2000      	movs	r0, #0
    c552:	250c      	movs	r5, #12
    c554:	2605      	movs	r6, #5
    c556:	223e      	movs	r2, #62	; 0x3e
    c558:	23ff      	movs	r3, #255	; 0xff
    c55a:	2f1b      	cmp	r7, #27
    c55c:	d27d      	bcs.n	c65a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c55e:	e8df f007 	tbb	[pc, r7]
    c562:	0eeb      	.short	0x0eeb
    c564:	632d2725 	.word	0x632d2725
    c568:	af9b816d 	.word	0xaf9b816d
    c56c:	e2c7bcb1 	.word	0xe2c7bcb1
    c570:	31ebebf5 	.word	0x31ebebf5
    c574:	f2fed5d2 	.word	0xf2fed5d2
    c578:	eeeff0f1 	.word	0xeeeff0f1
    c57c:	00ed      	.short	0x00ed
    c57e:	7025      	strb	r5, [r4, #0]
    c580:	7908      	ldrb	r0, [r1, #4]
    c582:	70a0      	strb	r0, [r4, #2]
    c584:	7948      	ldrb	r0, [r1, #5]
    c586:	70e0      	strb	r0, [r4, #3]
    c588:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c58c:	0a00      	lsrs	r0, r0, #8
    c58e:	7120      	strb	r0, [r4, #4]
    c590:	79c8      	ldrb	r0, [r1, #7]
    c592:	7160      	strb	r0, [r4, #5]
    c594:	7a08      	ldrb	r0, [r1, #8]
    c596:	71a0      	strb	r0, [r4, #6]
    c598:	8908      	ldrh	r0, [r1, #8]
    c59a:	0a00      	lsrs	r0, r0, #8
    c59c:	71e0      	strb	r0, [r4, #7]
    c59e:	7a88      	ldrb	r0, [r1, #10]
    c5a0:	7220      	strb	r0, [r4, #8]
    c5a2:	8948      	ldrh	r0, [r1, #10]
    c5a4:	0a00      	lsrs	r0, r0, #8
    c5a6:	7260      	strb	r0, [r4, #9]
    c5a8:	2008      	movs	r0, #8
    c5aa:	e0c2      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5ac:	2010      	movs	r0, #16
    c5ae:	e000      	b.n	c5b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c5b0:	201a      	movs	r0, #26
    c5b2:	7020      	strb	r0, [r4, #0]
    c5b4:	7908      	ldrb	r0, [r1, #4]
    c5b6:	70a0      	strb	r0, [r4, #2]
    c5b8:	2001      	movs	r0, #1
    c5ba:	e0ba      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5bc:	4620      	mov	r0, r4
    c5be:	f000 f947 	bl	c850 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c5c2:	e0b4      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c5c4:	7022      	strb	r2, [r4, #0]
    c5c6:	200a      	movs	r0, #10
    c5c8:	70a0      	strb	r0, [r4, #2]
    c5ca:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c5ce:	70e0      	strb	r0, [r4, #3]
    c5d0:	7888      	ldrb	r0, [r1, #2]
    c5d2:	7120      	strb	r0, [r4, #4]
    c5d4:	8848      	ldrh	r0, [r1, #2]
    c5d6:	0a00      	lsrs	r0, r0, #8
    c5d8:	7160      	strb	r0, [r4, #5]
    c5da:	7908      	ldrb	r0, [r1, #4]
    c5dc:	71a0      	strb	r0, [r4, #6]
    c5de:	7948      	ldrb	r0, [r1, #5]
    c5e0:	71e0      	strb	r0, [r4, #7]
    c5e2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c5e6:	60a0      	str	r0, [r4, #8]
    c5e8:	8948      	ldrh	r0, [r1, #10]
    c5ea:	81a0      	strh	r0, [r4, #12]
    c5ec:	68c8      	ldr	r0, [r1, #12]
    c5ee:	f8c4 000e 	str.w	r0, [r4, #14]
    c5f2:	8a08      	ldrh	r0, [r1, #16]
    c5f4:	8260      	strh	r0, [r4, #18]
    c5f6:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c5fa:	6160      	str	r0, [r4, #20]
    c5fc:	8ac8      	ldrh	r0, [r1, #22]
    c5fe:	8320      	strh	r0, [r4, #24]
    c600:	7e08      	ldrb	r0, [r1, #24]
    c602:	76a0      	strb	r0, [r4, #26]
    c604:	8b08      	ldrh	r0, [r1, #24]
    c606:	0a00      	lsrs	r0, r0, #8
    c608:	76e0      	strb	r0, [r4, #27]
    c60a:	7e88      	ldrb	r0, [r1, #26]
    c60c:	7720      	strb	r0, [r4, #28]
    c60e:	8b48      	ldrh	r0, [r1, #26]
    c610:	0a00      	lsrs	r0, r0, #8
    c612:	7760      	strb	r0, [r4, #29]
    c614:	7f08      	ldrb	r0, [r1, #28]
    c616:	77a0      	strb	r0, [r4, #30]
    c618:	8b88      	ldrh	r0, [r1, #28]
    c61a:	0a00      	lsrs	r0, r0, #8
    c61c:	77e0      	strb	r0, [r4, #31]
    c61e:	7f88      	ldrb	r0, [r1, #30]
    c620:	f884 0020 	strb.w	r0, [r4, #32]
    c624:	201f      	movs	r0, #31
    c626:	e084      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c628:	7022      	strb	r2, [r4, #0]
    c62a:	2014      	movs	r0, #20
    c62c:	70a0      	strb	r0, [r4, #2]
    c62e:	7908      	ldrb	r0, [r1, #4]
    c630:	70e0      	strb	r0, [r4, #3]
    c632:	8888      	ldrh	r0, [r1, #4]
    c634:	0a00      	lsrs	r0, r0, #8
    c636:	7120      	strb	r0, [r4, #4]
    c638:	7988      	ldrb	r0, [r1, #6]
    c63a:	e0a8      	b.n	c78e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c63c:	7022      	strb	r2, [r4, #0]
    c63e:	2004      	movs	r0, #4
    c640:	70a0      	strb	r0, [r4, #2]
    c642:	7908      	ldrb	r0, [r1, #4]
    c644:	70e0      	strb	r0, [r4, #3]
    c646:	7988      	ldrb	r0, [r1, #6]
    c648:	7120      	strb	r0, [r4, #4]
    c64a:	88c8      	ldrh	r0, [r1, #6]
    c64c:	0a00      	lsrs	r0, r0, #8
    c64e:	7160      	strb	r0, [r4, #5]
    c650:	6888      	ldr	r0, [r1, #8]
    c652:	f8c4 0006 	str.w	r0, [r4, #6]
    c656:	68c8      	ldr	r0, [r1, #12]
    c658:	e000      	b.n	c65c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c65a:	e06d      	b.n	c738 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c65c:	f8c4 000a 	str.w	r0, [r4, #10]
    c660:	200c      	movs	r0, #12
    c662:	e066      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c664:	7022      	strb	r2, [r4, #0]
    c666:	2003      	movs	r0, #3
    c668:	70a0      	strb	r0, [r4, #2]
    c66a:	7908      	ldrb	r0, [r1, #4]
    c66c:	70e0      	strb	r0, [r4, #3]
    c66e:	7988      	ldrb	r0, [r1, #6]
    c670:	7120      	strb	r0, [r4, #4]
    c672:	88c8      	ldrh	r0, [r1, #6]
    c674:	0a00      	lsrs	r0, r0, #8
    c676:	7160      	strb	r0, [r4, #5]
    c678:	7a08      	ldrb	r0, [r1, #8]
    c67a:	71a0      	strb	r0, [r4, #6]
    c67c:	8908      	ldrh	r0, [r1, #8]
    c67e:	0a00      	lsrs	r0, r0, #8
    c680:	71e0      	strb	r0, [r4, #7]
    c682:	7a88      	ldrb	r0, [r1, #10]
    c684:	7220      	strb	r0, [r4, #8]
    c686:	8948      	ldrh	r0, [r1, #10]
    c688:	0a00      	lsrs	r0, r0, #8
    c68a:	7260      	strb	r0, [r4, #9]
    c68c:	7b08      	ldrb	r0, [r1, #12]
    c68e:	72a0      	strb	r0, [r4, #10]
    c690:	8988      	ldrh	r0, [r1, #12]
    c692:	0a00      	lsrs	r0, r0, #8
    c694:	72e0      	strb	r0, [r4, #11]
    c696:	e0d9      	b.n	c84c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c698:	7022      	strb	r2, [r4, #0]
    c69a:	70a6      	strb	r6, [r4, #2]
    c69c:	7908      	ldrb	r0, [r1, #4]
    c69e:	70e0      	strb	r0, [r4, #3]
    c6a0:	8888      	ldrh	r0, [r1, #4]
    c6a2:	0a00      	lsrs	r0, r0, #8
    c6a4:	7120      	strb	r0, [r4, #4]
    c6a6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c6aa:	f8c4 0005 	str.w	r0, [r4, #5]
    c6ae:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c6b2:	f8c4 0009 	str.w	r0, [r4, #9]
    c6b6:	89c8      	ldrh	r0, [r1, #14]
    c6b8:	f8a4 000d 	strh.w	r0, [r4, #13]
    c6bc:	200d      	movs	r0, #13
    c6be:	e038      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c6c0:	2011      	movs	r0, #17
    c6c2:	e044      	b.n	c74e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    c6c4:	7026      	strb	r6, [r4, #0]
    c6c6:	7908      	ldrb	r0, [r1, #4]
    c6c8:	70a0      	strb	r0, [r4, #2]
    c6ca:	7948      	ldrb	r0, [r1, #5]
    c6cc:	70e0      	strb	r0, [r4, #3]
    c6ce:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c6d2:	0a00      	lsrs	r0, r0, #8
    c6d4:	7120      	strb	r0, [r4, #4]
    c6d6:	79c8      	ldrb	r0, [r1, #7]
    c6d8:	e059      	b.n	c78e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c6da:	2008      	movs	r0, #8
    c6dc:	7020      	strb	r0, [r4, #0]
    c6de:	7908      	ldrb	r0, [r1, #4]
    c6e0:	70a0      	strb	r0, [r4, #2]
    c6e2:	7988      	ldrb	r0, [r1, #6]
    c6e4:	70e0      	strb	r0, [r4, #3]
    c6e6:	88c8      	ldrh	r0, [r1, #6]
    c6e8:	0a00      	lsrs	r0, r0, #8
    c6ea:	7120      	strb	r0, [r4, #4]
    c6ec:	7a08      	ldrb	r0, [r1, #8]
    c6ee:	e04e      	b.n	c78e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c6f0:	2030      	movs	r0, #48	; 0x30
    c6f2:	7020      	strb	r0, [r4, #0]
    c6f4:	7908      	ldrb	r0, [r1, #4]
    c6f6:	70a0      	strb	r0, [r4, #2]
    c6f8:	7988      	ldrb	r0, [r1, #6]
    c6fa:	70e0      	strb	r0, [r4, #3]
    c6fc:	88c8      	ldrh	r0, [r1, #6]
    c6fe:	0a00      	lsrs	r0, r0, #8
    c700:	7120      	strb	r0, [r4, #4]
    c702:	2003      	movs	r0, #3
    c704:	e015      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c706:	7022      	strb	r2, [r4, #0]
    c708:	2007      	movs	r0, #7
    c70a:	e045      	b.n	c798 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c70c:	7022      	strb	r2, [r4, #0]
    c70e:	70a5      	strb	r5, [r4, #2]
    c710:	7908      	ldrb	r0, [r1, #4]
    c712:	70e0      	strb	r0, [r4, #3]
    c714:	7988      	ldrb	r0, [r1, #6]
    c716:	7120      	strb	r0, [r4, #4]
    c718:	88c8      	ldrh	r0, [r1, #6]
    c71a:	0a00      	lsrs	r0, r0, #8
    c71c:	7160      	strb	r0, [r4, #5]
    c71e:	7a08      	ldrb	r0, [r1, #8]
    c720:	71a0      	strb	r0, [r4, #6]
    c722:	7a48      	ldrb	r0, [r1, #9]
    c724:	e028      	b.n	c778 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    c726:	4620      	mov	r0, r4
    c728:	1d09      	adds	r1, r1, #4
    c72a:	f7f7 fc57 	bl	3fdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    c72e:	2800      	cmp	r0, #0
    c730:	d002      	beq.n	c738 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c732:	7060      	strb	r0, [r4, #1]
    c734:	1c80      	adds	r0, r0, #2
    c736:	b2c0      	uxtb	r0, r0
    c738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c73c:	e073      	b.n	c826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    c73e:	e047      	b.n	c7d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c740:	e028      	b.n	c794 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    c742:	e053      	b.n	c7ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    c744:	e061      	b.n	c80a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    c746:	e01a      	b.n	c77e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    c748:	e009      	b.n	c75e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    c74a:	e7ff      	b.n	c74c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c74c:	2057      	movs	r0, #87	; 0x57
    c74e:	7020      	strb	r0, [r4, #0]
    c750:	7908      	ldrb	r0, [r1, #4]
    c752:	70a0      	strb	r0, [r4, #2]
    c754:	8888      	ldrh	r0, [r1, #4]
    c756:	0a00      	lsrs	r0, r0, #8
    c758:	70e0      	strb	r0, [r4, #3]
    c75a:	2002      	movs	r0, #2
    c75c:	e7e9      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c75e:	7022      	strb	r2, [r4, #0]
    c760:	2012      	movs	r0, #18
    c762:	70a0      	strb	r0, [r4, #2]
    c764:	7908      	ldrb	r0, [r1, #4]
    c766:	70e0      	strb	r0, [r4, #3]
    c768:	7948      	ldrb	r0, [r1, #5]
    c76a:	7120      	strb	r0, [r4, #4]
    c76c:	7988      	ldrb	r0, [r1, #6]
    c76e:	7160      	strb	r0, [r4, #5]
    c770:	88c8      	ldrh	r0, [r1, #6]
    c772:	0a00      	lsrs	r0, r0, #8
    c774:	71a0      	strb	r0, [r4, #6]
    c776:	7a08      	ldrb	r0, [r1, #8]
    c778:	71e0      	strb	r0, [r4, #7]
    c77a:	2006      	movs	r0, #6
    c77c:	e7d9      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c77e:	7023      	strb	r3, [r4, #0]
    c780:	20a1      	movs	r0, #161	; 0xa1
    c782:	70a0      	strb	r0, [r4, #2]
    c784:	7908      	ldrb	r0, [r1, #4]
    c786:	70e0      	strb	r0, [r4, #3]
    c788:	7948      	ldrb	r0, [r1, #5]
    c78a:	7120      	strb	r0, [r4, #4]
    c78c:	2000      	movs	r0, #0
    c78e:	7160      	strb	r0, [r4, #5]
    c790:	2004      	movs	r0, #4
    c792:	e7ce      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c794:	7023      	strb	r3, [r4, #0]
    c796:	20a2      	movs	r0, #162	; 0xa2
    c798:	70a0      	strb	r0, [r4, #2]
    c79a:	7908      	ldrb	r0, [r1, #4]
    c79c:	70e0      	strb	r0, [r4, #3]
    c79e:	8888      	ldrh	r0, [r1, #4]
    c7a0:	0a00      	lsrs	r0, r0, #8
    c7a2:	7120      	strb	r0, [r4, #4]
    c7a4:	7988      	ldrb	r0, [r1, #6]
    c7a6:	7160      	strb	r0, [r4, #5]
    c7a8:	88c8      	ldrh	r0, [r1, #6]
    c7aa:	0a00      	lsrs	r0, r0, #8
    c7ac:	71a0      	strb	r0, [r4, #6]
    c7ae:	7a08      	ldrb	r0, [r1, #8]
    c7b0:	71e0      	strb	r0, [r4, #7]
    c7b2:	8908      	ldrh	r0, [r1, #8]
    c7b4:	0a00      	lsrs	r0, r0, #8
    c7b6:	7220      	strb	r0, [r4, #8]
    c7b8:	7a88      	ldrb	r0, [r1, #10]
    c7ba:	7260      	strb	r0, [r4, #9]
    c7bc:	8948      	ldrh	r0, [r1, #10]
    c7be:	0a00      	lsrs	r0, r0, #8
    c7c0:	72a0      	strb	r0, [r4, #10]
    c7c2:	7b08      	ldrb	r0, [r1, #12]
    c7c4:	72e0      	strb	r0, [r4, #11]
    c7c6:	8988      	ldrh	r0, [r1, #12]
    c7c8:	0a00      	lsrs	r0, r0, #8
    c7ca:	7320      	strb	r0, [r4, #12]
    c7cc:	200b      	movs	r0, #11
    c7ce:	e7b0      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c7d0:	7023      	strb	r3, [r4, #0]
    c7d2:	20a3      	movs	r0, #163	; 0xa3
    c7d4:	70a0      	strb	r0, [r4, #2]
    c7d6:	7908      	ldrb	r0, [r1, #4]
    c7d8:	70e0      	strb	r0, [r4, #3]
    c7da:	8888      	ldrh	r0, [r1, #4]
    c7dc:	0a00      	lsrs	r0, r0, #8
    c7de:	7120      	strb	r0, [r4, #4]
    c7e0:	7988      	ldrb	r0, [r1, #6]
    c7e2:	7160      	strb	r0, [r4, #5]
    c7e4:	79c8      	ldrb	r0, [r1, #7]
    c7e6:	71a0      	strb	r0, [r4, #6]
    c7e8:	2005      	movs	r0, #5
    c7ea:	e7a2      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c7ec:	7022      	strb	r2, [r4, #0]
    c7ee:	2013      	movs	r0, #19
    c7f0:	70a0      	strb	r0, [r4, #2]
    c7f2:	7908      	ldrb	r0, [r1, #4]
    c7f4:	70e0      	strb	r0, [r4, #3]
    c7f6:	7948      	ldrb	r0, [r1, #5]
    c7f8:	7120      	strb	r0, [r4, #4]
    c7fa:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c7fe:	f8c4 0005 	str.w	r0, [r4, #5]
    c802:	8948      	ldrh	r0, [r1, #10]
    c804:	f8a4 0009 	strh.w	r0, [r4, #9]
    c808:	e020      	b.n	c84c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c80a:	7023      	strb	r3, [r4, #0]
    c80c:	20a4      	movs	r0, #164	; 0xa4
    c80e:	70a0      	strb	r0, [r4, #2]
    c810:	7908      	ldrb	r0, [r1, #4]
    c812:	70e0      	strb	r0, [r4, #3]
    c814:	8888      	ldrh	r0, [r1, #4]
    c816:	0a00      	lsrs	r0, r0, #8
    c818:	7120      	strb	r0, [r4, #4]
    c81a:	7988      	ldrb	r0, [r1, #6]
    c81c:	7160      	strb	r0, [r4, #5]
    c81e:	79c8      	ldrb	r0, [r1, #7]
    c820:	71a0      	strb	r0, [r4, #6]
    c822:	2007      	movs	r0, #7
    c824:	e785      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c826:	7023      	strb	r3, [r4, #0]
    c828:	2080      	movs	r0, #128	; 0x80
    c82a:	70a0      	strb	r0, [r4, #2]
    c82c:	888a      	ldrh	r2, [r1, #4]
    c82e:	f8a4 2003 	strh.w	r2, [r4, #3]
    c832:	88ca      	ldrh	r2, [r1, #6]
    c834:	f8a4 2005 	strh.w	r2, [r4, #5]
    c838:	7a0a      	ldrb	r2, [r1, #8]
    c83a:	71e2      	strb	r2, [r4, #7]
    c83c:	7a4a      	ldrb	r2, [r1, #9]
    c83e:	8122      	strh	r2, [r4, #8]
    c840:	7a8a      	ldrb	r2, [r1, #10]
    c842:	72a2      	strb	r2, [r4, #10]
    c844:	7ac9      	ldrb	r1, [r1, #11]
    c846:	f001 0101 	and.w	r1, r1, #1
    c84a:	72e1      	strb	r1, [r4, #11]
    c84c:	200a      	movs	r0, #10
    c84e:	e770      	b.n	c732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c850 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c850:	223e      	movs	r2, #62	; 0x3e
    c852:	7002      	strb	r2, [r0, #0]
    c854:	2201      	movs	r2, #1
    c856:	7082      	strb	r2, [r0, #2]
    c858:	790a      	ldrb	r2, [r1, #4]
    c85a:	70c2      	strb	r2, [r0, #3]
    c85c:	798a      	ldrb	r2, [r1, #6]
    c85e:	7102      	strb	r2, [r0, #4]
    c860:	88ca      	ldrh	r2, [r1, #6]
    c862:	0a12      	lsrs	r2, r2, #8
    c864:	7142      	strb	r2, [r0, #5]
    c866:	7a0a      	ldrb	r2, [r1, #8]
    c868:	7182      	strb	r2, [r0, #6]
    c86a:	7a4a      	ldrb	r2, [r1, #9]
    c86c:	71c2      	strb	r2, [r0, #7]
    c86e:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c872:	6082      	str	r2, [r0, #8]
    c874:	89ca      	ldrh	r2, [r1, #14]
    c876:	8182      	strh	r2, [r0, #12]
    c878:	7c0a      	ldrb	r2, [r1, #16]
    c87a:	7382      	strb	r2, [r0, #14]
    c87c:	8a0a      	ldrh	r2, [r1, #16]
    c87e:	0a12      	lsrs	r2, r2, #8
    c880:	73c2      	strb	r2, [r0, #15]
    c882:	7c8a      	ldrb	r2, [r1, #18]
    c884:	7402      	strb	r2, [r0, #16]
    c886:	8a4a      	ldrh	r2, [r1, #18]
    c888:	0a12      	lsrs	r2, r2, #8
    c88a:	7442      	strb	r2, [r0, #17]
    c88c:	7d0a      	ldrb	r2, [r1, #20]
    c88e:	7482      	strb	r2, [r0, #18]
    c890:	8a8a      	ldrh	r2, [r1, #20]
    c892:	0a12      	lsrs	r2, r2, #8
    c894:	74c2      	strb	r2, [r0, #19]
    c896:	7d89      	ldrb	r1, [r1, #22]
    c898:	7501      	strb	r1, [r0, #20]
    c89a:	2013      	movs	r0, #19
    c89c:	4770      	bx	lr

0000c89e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c89e:	223e      	movs	r2, #62	; 0x3e
    c8a0:	7002      	strb	r2, [r0, #0]
    c8a2:	2201      	movs	r2, #1
    c8a4:	7082      	strb	r2, [r0, #2]
    c8a6:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c8aa:	70c2      	strb	r2, [r0, #3]
    c8ac:	788a      	ldrb	r2, [r1, #2]
    c8ae:	7102      	strb	r2, [r0, #4]
    c8b0:	884a      	ldrh	r2, [r1, #2]
    c8b2:	0a12      	lsrs	r2, r2, #8
    c8b4:	7142      	strb	r2, [r0, #5]
    c8b6:	790a      	ldrb	r2, [r1, #4]
    c8b8:	7182      	strb	r2, [r0, #6]
    c8ba:	794a      	ldrb	r2, [r1, #5]
    c8bc:	71c2      	strb	r2, [r0, #7]
    c8be:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c8c2:	6082      	str	r2, [r0, #8]
    c8c4:	894a      	ldrh	r2, [r1, #10]
    c8c6:	8182      	strh	r2, [r0, #12]
    c8c8:	7e0a      	ldrb	r2, [r1, #24]
    c8ca:	7382      	strb	r2, [r0, #14]
    c8cc:	8b0a      	ldrh	r2, [r1, #24]
    c8ce:	0a12      	lsrs	r2, r2, #8
    c8d0:	73c2      	strb	r2, [r0, #15]
    c8d2:	7e8a      	ldrb	r2, [r1, #26]
    c8d4:	7402      	strb	r2, [r0, #16]
    c8d6:	8b4a      	ldrh	r2, [r1, #26]
    c8d8:	0a12      	lsrs	r2, r2, #8
    c8da:	7442      	strb	r2, [r0, #17]
    c8dc:	7f0a      	ldrb	r2, [r1, #28]
    c8de:	7482      	strb	r2, [r0, #18]
    c8e0:	8b8a      	ldrh	r2, [r1, #28]
    c8e2:	0a12      	lsrs	r2, r2, #8
    c8e4:	74c2      	strb	r2, [r0, #19]
    c8e6:	7f89      	ldrb	r1, [r1, #30]
    c8e8:	7501      	strb	r1, [r0, #20]
    c8ea:	2113      	movs	r1, #19
    c8ec:	7041      	strb	r1, [r0, #1]
    c8ee:	4608      	mov	r0, r1
    c8f0:	4770      	bx	lr

0000c8f2 <sdc_hci_data_get>:
    c8f2:	b510      	push	{r4, lr}
    c8f4:	b120      	cbz	r0, c900 <sdc_hci_data_get+0xe>
    c8f6:	f7ff fda3 	bl	c440 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c8fa:	b120      	cbz	r0, c906 <sdc_hci_data_get+0x14>
    c8fc:	2000      	movs	r0, #0
    c8fe:	bd10      	pop	{r4, pc}
    c900:	f06f 0015 	mvn.w	r0, #21
    c904:	bd10      	pop	{r4, pc}
    c906:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c90a:	bd10      	pop	{r4, pc}

0000c90c <sdc_hci_data_put>:
    c90c:	b510      	push	{r4, lr}
    c90e:	f06f 0415 	mvn.w	r4, #21
    c912:	b120      	cbz	r0, c91e <sdc_hci_data_put+0x12>
    c914:	f7ff fda2 	bl	c45c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c918:	b108      	cbz	r0, c91e <sdc_hci_data_put+0x12>
    c91a:	2000      	movs	r0, #0
    c91c:	bd10      	pop	{r4, pc}
    c91e:	4620      	mov	r0, r4
    c920:	bd10      	pop	{r4, pc}

0000c922 <sdc_hci_evt_get>:
    c922:	b510      	push	{r4, lr}
    c924:	b120      	cbz	r0, c930 <sdc_hci_evt_get+0xe>
    c926:	f7ff fda2 	bl	c46e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c92a:	b120      	cbz	r0, c936 <sdc_hci_evt_get+0x14>
    c92c:	2000      	movs	r0, #0
    c92e:	bd10      	pop	{r4, pc}
    c930:	f06f 0015 	mvn.w	r0, #21
    c934:	bd10      	pop	{r4, pc}
    c936:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c93a:	bd10      	pop	{r4, pc}

0000c93c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c93c:	f002 baed 	b.w	ef1a <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c940 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c940:	f002 bb2f 	b.w	efa2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c944 <sdc_hci_cmd_cb_set_event_mask>:
    c944:	b510      	push	{r4, lr}
    c946:	f7f7 fba7 	bl	4098 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c94a:	2000      	movs	r0, #0
    c94c:	bd10      	pop	{r4, pc}

0000c94e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c94e:	b510      	push	{r4, lr}
    c950:	f7f7 fbb0 	bl	40b4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c954:	2000      	movs	r0, #0
    c956:	bd10      	pop	{r4, pc}

0000c958 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c958:	f002 bb3f 	b.w	efda <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c95c <sdc_hci_cmd_vs_conn_event_extend>:
    c95c:	b508      	push	{r3, lr}
    c95e:	7800      	ldrb	r0, [r0, #0]
    c960:	f88d 0000 	strb.w	r0, [sp]
    c964:	4668      	mov	r0, sp
    c966:	f002 fa6e 	bl	ee46 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c96a:	bd08      	pop	{r3, pc}

0000c96c <sdc_hci_cmd_vs_conn_update>:
    c96c:	2001      	movs	r0, #1
    c96e:	4770      	bx	lr

0000c970 <sdc_hci_cmd_vs_event_length_set>:
    c970:	f7fd bbea 	b.w	a148 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c974 <sdc_hci_cmd_vs_llpm_mode_set>:
    c974:	2001      	movs	r0, #1
    c976:	4770      	bx	lr

0000c978 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c978:	7800      	ldrb	r0, [r0, #0]
    c97a:	b100      	cbz	r0, c97e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c97c:	2001      	movs	r0, #1
    c97e:	f002 ba2e 	b.w	edde <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c982 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c982:	b570      	push	{r4, r5, r6, lr}
    c984:	4605      	mov	r5, r0
    c986:	2210      	movs	r2, #16
    c988:	2100      	movs	r1, #0
    c98a:	f7ff fc66 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c98e:	2210      	movs	r2, #16
    c990:	2100      	movs	r1, #0
    c992:	f105 0010 	add.w	r0, r5, #16
    c996:	f7ff fc60 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c99a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c99e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c9a2:	1c40      	adds	r0, r0, #1
    c9a4:	d10b      	bne.n	c9be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c9a6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c9aa:	1c40      	adds	r0, r0, #1
    c9ac:	d107      	bne.n	c9be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c9ae:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c9b2:	1c40      	adds	r0, r0, #1
    c9b4:	d103      	bne.n	c9be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c9b6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c9ba:	1c40      	adds	r0, r0, #1
    c9bc:	d00b      	beq.n	c9d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c9be:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c9c2:	6128      	str	r0, [r5, #16]
    c9c4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c9c8:	6168      	str	r0, [r5, #20]
    c9ca:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c9ce:	61a8      	str	r0, [r5, #24]
    c9d0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c9d4:	61e8      	str	r0, [r5, #28]
    c9d6:	2000      	movs	r0, #0
    c9d8:	f7f8 f85c 	bl	4a94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c9dc:	b918      	cbnz	r0, c9e6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c9de:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c9e2:	07c0      	lsls	r0, r0, #31
    c9e4:	d118      	bne.n	ca18 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c9e6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c9ea:	1c40      	adds	r0, r0, #1
    c9ec:	d10b      	bne.n	ca06 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c9ee:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c9f2:	1c40      	adds	r0, r0, #1
    c9f4:	d107      	bne.n	ca06 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c9f6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c9fa:	1c40      	adds	r0, r0, #1
    c9fc:	d103      	bne.n	ca06 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c9fe:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    ca02:	1c40      	adds	r0, r0, #1
    ca04:	d008      	beq.n	ca18 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ca06:	f854 0f90 	ldr.w	r0, [r4, #144]!
    ca0a:	6028      	str	r0, [r5, #0]
    ca0c:	6860      	ldr	r0, [r4, #4]
    ca0e:	6068      	str	r0, [r5, #4]
    ca10:	68a0      	ldr	r0, [r4, #8]
    ca12:	60a8      	str	r0, [r5, #8]
    ca14:	68e0      	ldr	r0, [r4, #12]
    ca16:	60e8      	str	r0, [r5, #12]
    ca18:	2000      	movs	r0, #0
    ca1a:	bd70      	pop	{r4, r5, r6, pc}

0000ca1c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    ca1c:	b570      	push	{r4, r5, r6, lr}
    ca1e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ca22:	4604      	mov	r4, r0
    ca24:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ca28:	1c40      	adds	r0, r0, #1
    ca2a:	d105      	bne.n	ca38 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    ca2c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    ca30:	43c0      	mvns	r0, r0
    ca32:	0400      	lsls	r0, r0, #16
    ca34:	0c00      	lsrs	r0, r0, #16
    ca36:	d03a      	beq.n	caae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    ca38:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    ca3c:	07c0      	lsls	r0, r0, #31
    ca3e:	d036      	beq.n	caae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    ca40:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ca44:	f8c4 0001 	str.w	r0, [r4, #1]
    ca48:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    ca4c:	f8a4 0005 	strh.w	r0, [r4, #5]
    ca50:	79a0      	ldrb	r0, [r4, #6]
    ca52:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    ca56:	71a0      	strb	r0, [r4, #6]
    ca58:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    ca5c:	1c40      	adds	r0, r0, #1
    ca5e:	d00f      	beq.n	ca80 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ca60:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    ca64:	1c40      	adds	r0, r0, #1
    ca66:	d00b      	beq.n	ca80 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ca68:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    ca6c:	1c40      	adds	r0, r0, #1
    ca6e:	d007      	beq.n	ca80 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ca70:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    ca74:	1c40      	adds	r0, r0, #1
    ca76:	d003      	beq.n	ca80 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ca78:	2000      	movs	r0, #0
    ca7a:	f7f8 f80b 	bl	4a94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    ca7e:	b140      	cbz	r0, ca92 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    ca80:	2210      	movs	r2, #16
    ca82:	2100      	movs	r1, #0
    ca84:	1de0      	adds	r0, r4, #7
    ca86:	f7ff fbe8 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ca8a:	2001      	movs	r0, #1
    ca8c:	7020      	strb	r0, [r4, #0]
    ca8e:	2000      	movs	r0, #0
    ca90:	bd70      	pop	{r4, r5, r6, pc}
    ca92:	f855 0f90 	ldr.w	r0, [r5, #144]!
    ca96:	f8c4 0007 	str.w	r0, [r4, #7]
    ca9a:	6868      	ldr	r0, [r5, #4]
    ca9c:	f8c4 000b 	str.w	r0, [r4, #11]
    caa0:	68a8      	ldr	r0, [r5, #8]
    caa2:	f8c4 000f 	str.w	r0, [r4, #15]
    caa6:	68e8      	ldr	r0, [r5, #12]
    caa8:	f8c4 0013 	str.w	r0, [r4, #19]
    caac:	e7ed      	b.n	ca8a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    caae:	2000      	movs	r0, #0
    cab0:	e7ec      	b.n	ca8c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000cab2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cab2:	f002 b9ae 	b.w	ee12 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cab6 <sdc_hci_cmd_ip_read_bd_addr>:
    cab6:	f002 ba41 	b.w	ef3c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000caba <sdc_hci_cmd_ip_read_local_version_information>:
    caba:	f7fd bb53 	b.w	a164 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cabe <sdc_hci_cmd_le_add_device_to_resolving_list>:
    cabe:	f001 be99 	b.w	e7f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cac2 <sdc_hci_cmd_le_add_device_to_white_list>:
    cac2:	f001 beb2 	b.w	e82a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cac6 <sdc_hci_cmd_le_clear_resolving_list>:
    cac6:	f001 bec7 	b.w	e858 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000caca <sdc_hci_cmd_le_clear_white_list>:
    caca:	f001 bed2 	b.w	e872 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cace <sdc_hci_cmd_le_encrypt>:
    cace:	f001 beda 	b.w	e886 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cad2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    cad2:	8802      	ldrh	r2, [r0, #0]
    cad4:	800a      	strh	r2, [r1, #0]
    cad6:	f001 bedf 	b.w	e898 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000cada <sdc_hci_cmd_le_long_term_key_request_reply>:
    cada:	8802      	ldrh	r2, [r0, #0]
    cadc:	800a      	strh	r2, [r1, #0]
    cade:	f001 bef4 	b.w	e8ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000cae2 <sdc_hci_cmd_le_rand>:
    cae2:	f001 bf1c 	b.w	e91e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cae6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    cae6:	f001 bf20 	b.w	e92a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000caea <sdc_hci_cmd_le_read_buffer_size>:
    caea:	f7fd ba35 	b.w	9f58 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000caee <sdc_hci_cmd_le_read_channel_map>:
    caee:	f001 bf2d 	b.w	e94c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000caf2 <sdc_hci_cmd_le_read_max_data_length>:
    caf2:	f001 bf4c 	b.w	e98e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000caf6 <sdc_hci_cmd_le_read_phy>:
    caf6:	f7fd ba39 	b.w	9f6c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cafa <sdc_hci_cmd_le_read_remote_features>:
    cafa:	f7fd ba5f 	b.w	9fbc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cafe <sdc_hci_cmd_le_read_resolving_list_size>:
    cafe:	f001 bf56 	b.w	e9ae <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000cb02 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cb02:	f7fd ba7b 	b.w	9ffc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cb06 <sdc_hci_cmd_le_read_transmit_power>:
    cb06:	f001 bf56 	b.w	e9b6 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cb0a <sdc_hci_cmd_le_read_white_list_size>:
    cb0a:	f001 bf5d 	b.w	e9c8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cb0e <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    cb0e:	f001 bf5f 	b.w	e9d0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000cb12 <sdc_hci_cmd_le_remove_device_from_white_list>:
    cb12:	f001 bf76 	b.w	ea02 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cb16 <sdc_hci_cmd_le_set_address_resolution_enable>:
    cb16:	f001 bf89 	b.w	ea2c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000cb1a <sdc_hci_cmd_le_set_adv_data>:
    cb1a:	f001 bf95 	b.w	ea48 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cb1e <sdc_hci_cmd_le_set_adv_enable>:
    cb1e:	f001 bfc9 	b.w	eab4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cb22 <sdc_hci_cmd_le_set_adv_params>:
    cb22:	f002 b801 	b.w	eb28 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000cb26 <sdc_hci_cmd_le_set_data_length>:
    cb26:	f002 b897 	b.w	ec58 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cb2a <sdc_hci_cmd_le_set_default_phy>:
    cb2a:	f7fd ba77 	b.w	a01c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cb2e <sdc_hci_cmd_le_set_event_mask>:
    cb2e:	b510      	push	{r4, lr}
    cb30:	f7f7 faac 	bl	408c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cb34:	2000      	movs	r0, #0
    cb36:	bd10      	pop	{r4, pc}

0000cb38 <sdc_hci_cmd_le_set_phy>:
    cb38:	f002 b8b5 	b.w	eca6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cb3c <sdc_hci_cmd_le_set_privacy_mode>:
    cb3c:	f002 b8d3 	b.w	ece6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000cb40 <sdc_hci_cmd_le_set_random_address>:
    cb40:	f002 b8e7 	b.w	ed12 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cb44 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    cb44:	f002 b8f3 	b.w	ed2e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000cb48 <sdc_hci_cmd_le_set_scan_response_data>:
    cb48:	f002 b8fa 	b.w	ed40 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cb4c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cb4c:	f002 b930 	b.w	edb0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cb50 <sdc_hci_cmd_lc_disconnect>:
    cb50:	f001 be00 	b.w	e754 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cb54 <sdc_hci_cmd_lc_read_remote_version_information>:
    cb54:	f002 b9fe 	b.w	ef54 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cb58:	b570      	push	{r4, r5, r6, lr}
    cb5a:	880b      	ldrh	r3, [r1, #0]
    cb5c:	7f04      	ldrb	r4, [r0, #28]
    cb5e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    cb62:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    cb66:	8802      	ldrh	r2, [r0, #0]
    cb68:	4435      	add	r5, r6
    cb6a:	1da4      	adds	r4, r4, #6
    cb6c:	882d      	ldrh	r5, [r5, #0]
    cb6e:	4422      	add	r2, r4
    cb70:	b292      	uxth	r2, r2
    cb72:	4425      	add	r5, r4
    cb74:	1e54      	subs	r4, r2, #1
    cb76:	442c      	add	r4, r5
    cb78:	fb94 f4f2 	sdiv	r4, r4, r2
    cb7c:	fb02 6204 	mla	r2, r2, r4, r6
    cb80:	8840      	ldrh	r0, [r0, #2]
    cb82:	b292      	uxth	r2, r2
    cb84:	4290      	cmp	r0, r2
    cb86:	d903      	bls.n	cb90 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cb88:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    cb8c:	4310      	orrs	r0, r2
    cb8e:	e002      	b.n	cb96 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cb90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cb94:	4398      	bics	r0, r3
    cb96:	8008      	strh	r0, [r1, #0]
    cb98:	bd70      	pop	{r4, r5, r6, pc}
    cb9a:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    cb9e:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cba2:	429a      	cmp	r2, r3
    cba4:	d107      	bne.n	cbb6 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    cba6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    cbaa:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cbae:	4288      	cmp	r0, r1
    cbb0:	d001      	beq.n	cbb6 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    cbb2:	2001      	movs	r0, #1
    cbb4:	4770      	bx	lr
    cbb6:	2000      	movs	r0, #0
    cbb8:	4770      	bx	lr

0000cbba <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    cbba:	b570      	push	{r4, r5, r6, lr}
    cbbc:	7f00      	ldrb	r0, [r0, #28]
    cbbe:	461c      	mov	r4, r3
    cbc0:	1d80      	adds	r0, r0, #6
    cbc2:	4408      	add	r0, r1
    cbc4:	4613      	mov	r3, r2
    cbc6:	8809      	ldrh	r1, [r1, #0]
    cbc8:	9a04      	ldr	r2, [sp, #16]
    cbca:	1cc9      	adds	r1, r1, #3
    cbcc:	b289      	uxth	r1, r1
    cbce:	1915      	adds	r5, r2, r4
    cbd0:	1ec0      	subs	r0, r0, #3
    cbd2:	428d      	cmp	r5, r1
    cbd4:	d805      	bhi.n	cbe2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    cbd6:	1881      	adds	r1, r0, r2
    cbd8:	4622      	mov	r2, r4
    cbda:	4618      	mov	r0, r3
    cbdc:	f7ff fac3 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbe0:	e000      	b.n	cbe4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    cbe2:	2400      	movs	r4, #0
    cbe4:	4620      	mov	r0, r4
    cbe6:	bd70      	pop	{r4, r5, r6, pc}

0000cbe8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    cbe8:	b570      	push	{r4, r5, r6, lr}
    cbea:	7f00      	ldrb	r0, [r0, #28]
    cbec:	461c      	mov	r4, r3
    cbee:	1d80      	adds	r0, r0, #6
    cbf0:	4408      	add	r0, r1
    cbf2:	4613      	mov	r3, r2
    cbf4:	8809      	ldrh	r1, [r1, #0]
    cbf6:	9a04      	ldr	r2, [sp, #16]
    cbf8:	1cc9      	adds	r1, r1, #3
    cbfa:	b289      	uxth	r1, r1
    cbfc:	1915      	adds	r5, r2, r4
    cbfe:	1ec0      	subs	r0, r0, #3
    cc00:	428d      	cmp	r5, r1
    cc02:	d805      	bhi.n	cc10 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    cc04:	4410      	add	r0, r2
    cc06:	4622      	mov	r2, r4
    cc08:	4619      	mov	r1, r3
    cc0a:	f7ff faac 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc0e:	e000      	b.n	cc12 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    cc10:	2400      	movs	r4, #0
    cc12:	4620      	mov	r0, r4
    cc14:	bd70      	pop	{r4, r5, r6, pc}

0000cc16 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cc16:	8881      	ldrh	r1, [r0, #4]
    cc18:	88c0      	ldrh	r0, [r0, #6]
    cc1a:	4288      	cmp	r0, r1
    cc1c:	d101      	bne.n	cc22 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cc1e:	2001      	movs	r0, #1
    cc20:	4770      	bx	lr
    cc22:	2000      	movs	r0, #0
    cc24:	4770      	bx	lr

0000cc26 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    cc26:	8881      	ldrh	r1, [r0, #4]
    cc28:	8900      	ldrh	r0, [r0, #8]
    cc2a:	4288      	cmp	r0, r1
    cc2c:	d101      	bne.n	cc32 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    cc2e:	2001      	movs	r0, #1
    cc30:	4770      	bx	lr
    cc32:	2000      	movs	r0, #0
    cc34:	4770      	bx	lr

0000cc36 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cc36:	b570      	push	{r4, r5, r6, lr}
    cc38:	4604      	mov	r4, r0
    cc3a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cc3e:	8880      	ldrh	r0, [r0, #4]
    cc40:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cc44:	4401      	add	r1, r0
    cc46:	8a20      	ldrh	r0, [r4, #16]
    cc48:	2800      	cmp	r0, #0
    cc4a:	d01a      	beq.n	cc82 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cc4c:	89a2      	ldrh	r2, [r4, #12]
    cc4e:	2500      	movs	r5, #0
    cc50:	4410      	add	r0, r2
    cc52:	b280      	uxth	r0, r0
    cc54:	81a0      	strh	r0, [r4, #12]
    cc56:	880a      	ldrh	r2, [r1, #0]
    cc58:	4290      	cmp	r0, r2
    cc5a:	d905      	bls.n	cc68 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    cc5c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    cc60:	f04f 0014 	mov.w	r0, #20
    cc64:	f7f7 f87c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc68:	d109      	bne.n	cc7e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cc6a:	69a0      	ldr	r0, [r4, #24]
    cc6c:	b108      	cbz	r0, cc72 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    cc6e:	7f40      	ldrb	r0, [r0, #29]
    cc70:	7088      	strb	r0, [r1, #2]
    cc72:	f104 0104 	add.w	r1, r4, #4
    cc76:	4620      	mov	r0, r4
    cc78:	f7ff ff6e 	bl	cb58 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc7c:	81a5      	strh	r5, [r4, #12]
    cc7e:	8225      	strh	r5, [r4, #16]
    cc80:	2001      	movs	r0, #1
    cc82:	bd70      	pop	{r4, r5, r6, pc}

0000cc84 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc88:	4604      	mov	r4, r0
    cc8a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    cc8e:	88c0      	ldrh	r0, [r0, #6]
    cc90:	460e      	mov	r6, r1
    cc92:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    cc96:	8a60      	ldrh	r0, [r4, #18]
    cc98:	19d9      	adds	r1, r3, r7
    cc9a:	b108      	cbz	r0, cca0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cc9c:	42b0      	cmp	r0, r6
    cc9e:	d202      	bcs.n	cca6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cca0:	2000      	movs	r0, #0
    cca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cca6:	89e0      	ldrh	r0, [r4, #14]
    cca8:	2500      	movs	r5, #0
    ccaa:	b140      	cbz	r0, ccbe <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    ccac:	f8b1 c000 	ldrh.w	ip, [r1]
    ccb0:	4560      	cmp	r0, ip
    ccb2:	d008      	beq.n	ccc6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    ccb4:	f240 211f 	movw	r1, #543	; 0x21f
    ccb8:	2014      	movs	r0, #20
    ccba:	f7f7 f851 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccbe:	7f60      	ldrb	r0, [r4, #29]
    ccc0:	7088      	strb	r0, [r1, #2]
    ccc2:	800d      	strh	r5, [r1, #0]
    ccc4:	e00e      	b.n	cce4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    ccc6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    ccca:	4418      	add	r0, r3
    cccc:	f10c 0c06 	add.w	ip, ip, #6
    ccd0:	44bc      	add	ip, r7
    ccd2:	4460      	add	r0, ip
    ccd4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    ccd8:	f820 cc03 	strh.w	ip, [r0, #-3]
    ccdc:	f894 c020 	ldrb.w	ip, [r4, #32]
    cce0:	f800 cc01 	strb.w	ip, [r0, #-1]
    cce4:	89e0      	ldrh	r0, [r4, #14]
    cce6:	4430      	add	r0, r6
    cce8:	81e0      	strh	r0, [r4, #14]
    ccea:	8808      	ldrh	r0, [r1, #0]
    ccec:	4430      	add	r0, r6
    ccee:	8008      	strh	r0, [r1, #0]
    ccf0:	b16a      	cbz	r2, cd0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    ccf2:	1da1      	adds	r1, r4, #6
    ccf4:	4620      	mov	r0, r4
    ccf6:	f7ff ff2f 	bl	cb58 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ccfa:	81e5      	strh	r5, [r4, #14]
    ccfc:	7f60      	ldrb	r0, [r4, #29]
    ccfe:	1c40      	adds	r0, r0, #1
    cd00:	7760      	strb	r0, [r4, #29]
    cd02:	7da0      	ldrb	r0, [r4, #22]
    cd04:	b108      	cbz	r0, cd0a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    cd06:	88e0      	ldrh	r0, [r4, #6]
    cd08:	82a0      	strh	r0, [r4, #20]
    cd0a:	75a5      	strb	r5, [r4, #22]
    cd0c:	e00b      	b.n	cd26 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    cd0e:	7f20      	ldrb	r0, [r4, #28]
    cd10:	89e1      	ldrh	r1, [r4, #14]
    cd12:	1d80      	adds	r0, r0, #6
    cd14:	4438      	add	r0, r7
    cd16:	4419      	add	r1, r3
    cd18:	4408      	add	r0, r1
    cd1a:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cd1e:	83e1      	strh	r1, [r4, #30]
    cd20:	7880      	ldrb	r0, [r0, #2]
    cd22:	f884 0020 	strb.w	r0, [r4, #32]
    cd26:	8265      	strh	r5, [r4, #18]
    cd28:	75e5      	strb	r5, [r4, #23]
    cd2a:	2001      	movs	r0, #1
    cd2c:	e7b9      	b.n	cca2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000cd2e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    cd2e:	b510      	push	{r4, lr}
    cd30:	4604      	mov	r4, r0
    cd32:	88c0      	ldrh	r0, [r0, #6]
    cd34:	88a1      	ldrh	r1, [r4, #4]
    cd36:	4281      	cmp	r1, r0
    cd38:	d007      	beq.n	cd4a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cd3a:	89a0      	ldrh	r0, [r4, #12]
    cd3c:	b928      	cbnz	r0, cd4a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cd3e:	8a20      	ldrh	r0, [r4, #16]
    cd40:	b918      	cbnz	r0, cd4a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cd42:	88a0      	ldrh	r0, [r4, #4]
    cd44:	8aa1      	ldrh	r1, [r4, #20]
    cd46:	4288      	cmp	r0, r1
    cd48:	d101      	bne.n	cd4e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    cd4a:	2000      	movs	r0, #0
    cd4c:	bd10      	pop	{r4, pc}
    cd4e:	1d21      	adds	r1, r4, #4
    cd50:	4620      	mov	r0, r4
    cd52:	f7ff ff01 	bl	cb58 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cd56:	2000      	movs	r0, #0
    cd58:	8220      	strh	r0, [r4, #16]
    cd5a:	2001      	movs	r0, #1
    cd5c:	bd10      	pop	{r4, pc}

0000cd5e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    cd5e:	b510      	push	{r4, lr}
    cd60:	4604      	mov	r4, r0
    cd62:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cd66:	88c0      	ldrh	r0, [r0, #6]
    cd68:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cd6c:	4402      	add	r2, r0
    cd6e:	8820      	ldrh	r0, [r4, #0]
    cd70:	2845      	cmp	r0, #69	; 0x45
    cd72:	d200      	bcs.n	cd76 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    cd74:	2045      	movs	r0, #69	; 0x45
    cd76:	4288      	cmp	r0, r1
    cd78:	d204      	bcs.n	cd84 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    cd7a:	f44f 7180 	mov.w	r1, #256	; 0x100
    cd7e:	2014      	movs	r0, #20
    cd80:	f7f6 ffee 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd84:	7de0      	ldrb	r0, [r4, #23]
    cd86:	2800      	cmp	r0, #0
    cd88:	d003      	beq.n	cd92 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    cd8a:	8810      	ldrh	r0, [r2, #0]
    cd8c:	4288      	cmp	r0, r1
    cd8e:	d201      	bcs.n	cd94 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    cd90:	2000      	movs	r0, #0
    cd92:	bd10      	pop	{r4, pc}
    cd94:	8011      	strh	r1, [r2, #0]
    cd96:	1da1      	adds	r1, r4, #6
    cd98:	4620      	mov	r0, r4
    cd9a:	f7ff fedd 	bl	cb58 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cd9e:	2000      	movs	r0, #0
    cda0:	75e0      	strb	r0, [r4, #23]
    cda2:	2001      	movs	r0, #1
    cda4:	bd10      	pop	{r4, pc}

0000cda6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    cda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cdaa:	8941      	ldrh	r1, [r0, #10]
    cdac:	8886      	ldrh	r6, [r0, #4]
    cdae:	4604      	mov	r4, r0
    cdb0:	2500      	movs	r5, #0
    cdb2:	f100 070a 	add.w	r7, r0, #10
    cdb6:	e006      	b.n	cdc6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    cdb8:	4639      	mov	r1, r7
    cdba:	4620      	mov	r0, r4
    cdbc:	f7ff fecc 	bl	cb58 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cdc0:	1c6d      	adds	r5, r5, #1
    cdc2:	8961      	ldrh	r1, [r4, #10]
    cdc4:	b2ad      	uxth	r5, r5
    cdc6:	42b1      	cmp	r1, r6
    cdc8:	d1f6      	bne.n	cdb8 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    cdca:	4628      	mov	r0, r5
    cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cdd0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    cdd0:	b530      	push	{r4, r5, lr}
    cdd2:	88c4      	ldrh	r4, [r0, #6]
    cdd4:	8881      	ldrh	r1, [r0, #4]
    cdd6:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cdda:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cdde:	4413      	add	r3, r2
    cde0:	8882      	ldrh	r2, [r0, #4]
    cde2:	8a85      	ldrh	r5, [r0, #20]
    cde4:	42aa      	cmp	r2, r5
    cde6:	d012      	beq.n	ce0e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cde8:	42a1      	cmp	r1, r4
    cdea:	d010      	beq.n	ce0e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cdec:	8981      	ldrh	r1, [r0, #12]
    cdee:	b971      	cbnz	r1, ce0e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cdf0:	6982      	ldr	r2, [r0, #24]
    cdf2:	b172      	cbz	r2, ce12 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cdf4:	4610      	mov	r0, r2
    cdf6:	f7ff ff16 	bl	cc26 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    cdfa:	b950      	cbnz	r0, ce12 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cdfc:	8910      	ldrh	r0, [r2, #8]
    cdfe:	3224      	adds	r2, #36	; 0x24
    ce00:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    ce04:	4410      	add	r0, r2
    ce06:	7899      	ldrb	r1, [r3, #2]
    ce08:	7880      	ldrb	r0, [r0, #2]
    ce0a:	4288      	cmp	r0, r1
    ce0c:	d101      	bne.n	ce12 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ce0e:	2000      	movs	r0, #0
    ce10:	bd30      	pop	{r4, r5, pc}
    ce12:	4618      	mov	r0, r3
    ce14:	bd30      	pop	{r4, r5, pc}

0000ce16 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    ce16:	7f00      	ldrb	r0, [r0, #28]
    ce18:	1d80      	adds	r0, r0, #6
    ce1a:	4408      	add	r0, r1
    ce1c:	1ec0      	subs	r0, r0, #3
    ce1e:	6010      	str	r0, [r2, #0]
    ce20:	8808      	ldrh	r0, [r1, #0]
    ce22:	4770      	bx	lr

0000ce24 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    ce24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce28:	460e      	mov	r6, r1
    ce2a:	88c1      	ldrh	r1, [r0, #6]
    ce2c:	8902      	ldrh	r2, [r0, #8]
    ce2e:	4604      	mov	r4, r0
    ce30:	f100 0824 	add.w	r8, r0, #36	; 0x24
    ce34:	8800      	ldrh	r0, [r0, #0]
    ce36:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    ce3a:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    ce3e:	2845      	cmp	r0, #69	; 0x45
    ce40:	d200      	bcs.n	ce44 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    ce42:	2045      	movs	r0, #69	; 0x45
    ce44:	42b0      	cmp	r0, r6
    ce46:	d203      	bcs.n	ce50 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    ce48:	21c2      	movs	r1, #194	; 0xc2
    ce4a:	2014      	movs	r0, #20
    ce4c:	f7f6 ff88 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce50:	4610      	mov	r0, r2
    ce52:	f7ff fea2 	bl	cb9a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ce56:	b110      	cbz	r0, ce5e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    ce58:	2000      	movs	r0, #0
    ce5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce5e:	42af      	cmp	r7, r5
    ce60:	d908      	bls.n	ce74 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ce62:	7f21      	ldrb	r1, [r4, #28]
    ce64:	1b78      	subs	r0, r7, r5
    ce66:	1a40      	subs	r0, r0, r1
    ce68:	1f80      	subs	r0, r0, #6
    ce6a:	4286      	cmp	r6, r0
    ce6c:	dd02      	ble.n	ce74 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ce6e:	2000      	movs	r0, #0
    ce70:	75e0      	strb	r0, [r4, #23]
    ce72:	e7f1      	b.n	ce58 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    ce74:	eb08 0005 	add.w	r0, r8, r5
    ce78:	2101      	movs	r1, #1
    ce7a:	8006      	strh	r6, [r0, #0]
    ce7c:	75e1      	strb	r1, [r4, #23]
    ce7e:	e7ec      	b.n	ce5a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000ce80 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    ce80:	b538      	push	{r3, r4, r5, lr}
    ce82:	88c4      	ldrh	r4, [r0, #6]
    ce84:	8881      	ldrh	r1, [r0, #4]
    ce86:	f100 0224 	add.w	r2, r0, #36	; 0x24
    ce8a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    ce8e:	441a      	add	r2, r3
    ce90:	42a1      	cmp	r1, r4
    ce92:	d010      	beq.n	ceb6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    ce94:	8983      	ldrh	r3, [r0, #12]
    ce96:	8a05      	ldrh	r5, [r0, #16]
    ce98:	8812      	ldrh	r2, [r2, #0]
    ce9a:	442b      	add	r3, r5
    ce9c:	4293      	cmp	r3, r2
    ce9e:	d308      	bcc.n	ceb2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cea0:	f8ad 1000 	strh.w	r1, [sp]
    cea4:	4669      	mov	r1, sp
    cea6:	f7ff fe57 	bl	cb58 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ceaa:	f8bd 0000 	ldrh.w	r0, [sp]
    ceae:	42a0      	cmp	r0, r4
    ceb0:	d001      	beq.n	ceb6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    ceb2:	2001      	movs	r0, #1
    ceb4:	bd38      	pop	{r3, r4, r5, pc}
    ceb6:	2000      	movs	r0, #0
    ceb8:	bd38      	pop	{r3, r4, r5, pc}

0000ceba <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    ceba:	b570      	push	{r4, r5, r6, lr}
    cebc:	88c6      	ldrh	r6, [r0, #6]
    cebe:	8885      	ldrh	r5, [r0, #4]
    cec0:	4603      	mov	r3, r0
    cec2:	f100 0424 	add.w	r4, r0, #36	; 0x24
    cec6:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    ceca:	4420      	add	r0, r4
    cecc:	42b5      	cmp	r5, r6
    cece:	d102      	bne.n	ced6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    ced0:	2000      	movs	r0, #0
    ced2:	8218      	strh	r0, [r3, #16]
    ced4:	bd70      	pop	{r4, r5, r6, pc}
    ced6:	8804      	ldrh	r4, [r0, #0]
    ced8:	899d      	ldrh	r5, [r3, #12]
    ceda:	7f1e      	ldrb	r6, [r3, #28]
    cedc:	1b64      	subs	r4, r4, r5
    cede:	4435      	add	r5, r6
    cee0:	4428      	add	r0, r5
    cee2:	880d      	ldrh	r5, [r1, #0]
    cee4:	b2a4      	uxth	r4, r4
    cee6:	1cc0      	adds	r0, r0, #3
    cee8:	42a5      	cmp	r5, r4
    ceea:	d900      	bls.n	ceee <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    ceec:	800c      	strh	r4, [r1, #0]
    ceee:	899c      	ldrh	r4, [r3, #12]
    cef0:	b124      	cbz	r4, cefc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    cef2:	2400      	movs	r4, #0
    cef4:	7014      	strb	r4, [r2, #0]
    cef6:	8809      	ldrh	r1, [r1, #0]
    cef8:	8219      	strh	r1, [r3, #16]
    cefa:	bd70      	pop	{r4, r5, r6, pc}
    cefc:	2401      	movs	r4, #1
    cefe:	e7f9      	b.n	cef4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cf00 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    cf00:	b510      	push	{r4, lr}
    cf02:	8a81      	ldrh	r1, [r0, #20]
    cf04:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cf08:	3aff      	subs	r2, #255	; 0xff
    cf0a:	d002      	beq.n	cf12 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    cf0c:	7d82      	ldrb	r2, [r0, #22]
    cf0e:	b952      	cbnz	r2, cf26 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    cf10:	e004      	b.n	cf1c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    cf12:	f44f 7157 	mov.w	r1, #860	; 0x35c
    cf16:	2014      	movs	r0, #20
    cf18:	f7f6 ff22 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf1c:	8880      	ldrh	r0, [r0, #4]
    cf1e:	4281      	cmp	r1, r0
    cf20:	d101      	bne.n	cf26 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    cf22:	2000      	movs	r0, #0
    cf24:	bd10      	pop	{r4, pc}
    cf26:	2001      	movs	r0, #1
    cf28:	bd10      	pop	{r4, pc}

0000cf2a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    cf2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cf2e:	8281      	strh	r1, [r0, #20]
    cf30:	2100      	movs	r1, #0
    cf32:	7581      	strb	r1, [r0, #22]
    cf34:	4770      	bx	lr

0000cf36 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    cf36:	b510      	push	{r4, lr}
    cf38:	8a81      	ldrh	r1, [r0, #20]
    cf3a:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cf3e:	3aff      	subs	r2, #255	; 0xff
    cf40:	d004      	beq.n	cf4c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    cf42:	f240 313f 	movw	r1, #831	; 0x33f
    cf46:	2014      	movs	r0, #20
    cf48:	f7f6 ff0a 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf4c:	88c1      	ldrh	r1, [r0, #6]
    cf4e:	8281      	strh	r1, [r0, #20]
    cf50:	89c1      	ldrh	r1, [r0, #14]
    cf52:	b101      	cbz	r1, cf56 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    cf54:	2101      	movs	r1, #1
    cf56:	7581      	strb	r1, [r0, #22]
    cf58:	bd10      	pop	{r4, pc}

0000cf5a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf5e:	461d      	mov	r5, r3
    cf60:	4616      	mov	r6, r2
    cf62:	9f06      	ldr	r7, [sp, #24]
    cf64:	460b      	mov	r3, r1
    cf66:	4604      	mov	r4, r0
    cf68:	463a      	mov	r2, r7
    cf6a:	4629      	mov	r1, r5
    cf6c:	4630      	mov	r0, r6
    cf6e:	f000 f84f 	bl	d010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cf72:	4283      	cmp	r3, r0
    cf74:	d201      	bcs.n	cf7a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cf76:	21a1      	movs	r1, #161	; 0xa1
    cf78:	e018      	b.n	cfac <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cf7a:	1ce0      	adds	r0, r4, #3
    cf7c:	f020 0103 	bic.w	r1, r0, #3
    cf80:	4620      	mov	r0, r4
    cf82:	42a1      	cmp	r1, r4
    cf84:	d001      	beq.n	cf8a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    cf86:	21a2      	movs	r1, #162	; 0xa2
    cf88:	e010      	b.n	cfac <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cf8a:	2224      	movs	r2, #36	; 0x24
    cf8c:	2100      	movs	r1, #0
    cf8e:	f7ff f964 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf92:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cf96:	82a0      	strh	r0, [r4, #20]
    cf98:	19a8      	adds	r0, r5, r6
    cf9a:	1d80      	adds	r0, r0, #6
    cf9c:	4378      	muls	r0, r7
    cf9e:	b280      	uxth	r0, r0
    cfa0:	7725      	strb	r5, [r4, #28]
    cfa2:	8060      	strh	r0, [r4, #2]
    cfa4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cfa8:	d903      	bls.n	cfb2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    cfaa:	21a8      	movs	r1, #168	; 0xa8
    cfac:	2014      	movs	r0, #20
    cfae:	f7f6 fed7 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfb2:	8026      	strh	r6, [r4, #0]
    cfb4:	2000      	movs	r0, #0
    cfb6:	7760      	strb	r0, [r4, #29]
    cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cfbc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    cfbc:	6181      	str	r1, [r0, #24]
    cfbe:	6188      	str	r0, [r1, #24]
    cfc0:	4770      	bx	lr

0000cfc2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cfc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfc6:	460b      	mov	r3, r1
    cfc8:	4604      	mov	r4, r0
    cfca:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cfce:	8905      	ldrh	r5, [r0, #8]
    cfd0:	8946      	ldrh	r6, [r0, #10]
    cfd2:	8880      	ldrh	r0, [r0, #4]
    cfd4:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    cfd8:	4439      	add	r1, r7
    cfda:	460f      	mov	r7, r1
    cfdc:	4285      	cmp	r5, r0
    cfde:	d102      	bne.n	cfe6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    cfe0:	2000      	movs	r0, #0
    cfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfe6:	b10a      	cbz	r2, cfec <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    cfe8:	1cc8      	adds	r0, r1, #3
    cfea:	6010      	str	r0, [r2, #0]
    cfec:	b123      	cbz	r3, cff8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    cfee:	7f22      	ldrb	r2, [r4, #28]
    cff0:	1cf9      	adds	r1, r7, #3
    cff2:	4618      	mov	r0, r3
    cff4:	f7ff f8b7 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cff8:	883f      	ldrh	r7, [r7, #0]
    cffa:	f104 0108 	add.w	r1, r4, #8
    cffe:	4620      	mov	r0, r4
    d000:	f7ff fdaa 	bl	cb58 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d004:	42b5      	cmp	r5, r6
    d006:	d101      	bne.n	d00c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d008:	8920      	ldrh	r0, [r4, #8]
    d00a:	8160      	strh	r0, [r4, #10]
    d00c:	4638      	mov	r0, r7
    d00e:	e7e8      	b.n	cfe2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d010:	4401      	add	r1, r0
    d012:	1d89      	adds	r1, r1, #6
    d014:	4351      	muls	r1, r2
    d016:	b28a      	uxth	r2, r1
    d018:	2100      	movs	r1, #0
    d01a:	2845      	cmp	r0, #69	; 0x45
    d01c:	d201      	bcs.n	d022 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d01e:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d022:	3224      	adds	r2, #36	; 0x24
    d024:	1850      	adds	r0, r2, r1
    d026:	b280      	uxth	r0, r0
    d028:	4770      	bx	lr

0000d02a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d02a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d02e:	4688      	mov	r8, r1
    d030:	88c1      	ldrh	r1, [r0, #6]
    d032:	4604      	mov	r4, r0
    d034:	8900      	ldrh	r0, [r0, #8]
    d036:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d03a:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d03e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d042:	eb05 0906 	add.w	r9, r5, r6
    d046:	f7ff fda8 	bl	cb9a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d04a:	2200      	movs	r2, #0
    d04c:	b998      	cbnz	r0, d076 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d04e:	8820      	ldrh	r0, [r4, #0]
    d050:	2845      	cmp	r0, #69	; 0x45
    d052:	d200      	bcs.n	d056 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d054:	2045      	movs	r0, #69	; 0x45
    d056:	42b7      	cmp	r7, r6
    d058:	d906      	bls.n	d068 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d05a:	7f23      	ldrb	r3, [r4, #28]
    d05c:	1bb9      	subs	r1, r7, r6
    d05e:	1ac9      	subs	r1, r1, r3
    d060:	1f89      	subs	r1, r1, #6
    d062:	4281      	cmp	r1, r0
    d064:	da00      	bge.n	d068 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d066:	4608      	mov	r0, r1
    d068:	89e1      	ldrh	r1, [r4, #14]
    d06a:	b111      	cbz	r1, d072 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d06c:	f8b9 3000 	ldrh.w	r3, [r9]
    d070:	1ac0      	subs	r0, r0, r3
    d072:	4540      	cmp	r0, r8
    d074:	da03      	bge.n	d07e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d076:	8262      	strh	r2, [r4, #18]
    d078:	2000      	movs	r0, #0
    d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d07e:	7f20      	ldrb	r0, [r4, #28]
    d080:	4429      	add	r1, r5
    d082:	1d80      	adds	r0, r0, #6
    d084:	4430      	add	r0, r6
    d086:	4408      	add	r0, r1
    d088:	f8a4 8012 	strh.w	r8, [r4, #18]
    d08c:	1ec0      	subs	r0, r0, #3
    d08e:	e7f4      	b.n	d07a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d090 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d090:	2100      	movs	r1, #0
    d092:	81c1      	strh	r1, [r0, #14]
    d094:	8241      	strh	r1, [r0, #18]
    d096:	75c1      	strb	r1, [r0, #23]
    d098:	7581      	strb	r1, [r0, #22]
    d09a:	4770      	bx	lr

0000d09c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d09c:	b570      	push	{r4, r5, r6, lr}
    d09e:	2300      	movs	r3, #0
    d0a0:	2908      	cmp	r1, #8
    d0a2:	d204      	bcs.n	d0ae <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d0a4:	f240 11cb 	movw	r1, #459	; 0x1cb
    d0a8:	2015      	movs	r0, #21
    d0aa:	f7f6 fe59 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0ae:	6802      	ldr	r2, [r0, #0]
    d0b0:	b90a      	cbnz	r2, d0b6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d0b2:	e01e      	b.n	d0f2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d0b4:	4610      	mov	r0, r2
    d0b6:	6802      	ldr	r2, [r0, #0]
    d0b8:	8893      	ldrh	r3, [r2, #4]
    d0ba:	428b      	cmp	r3, r1
    d0bc:	d002      	beq.n	d0c4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d0be:	6813      	ldr	r3, [r2, #0]
    d0c0:	2b00      	cmp	r3, #0
    d0c2:	d1f7      	bne.n	d0b4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d0c4:	8894      	ldrh	r4, [r2, #4]
    d0c6:	4613      	mov	r3, r2
    d0c8:	428c      	cmp	r4, r1
    d0ca:	d101      	bne.n	d0d0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d0cc:	6811      	ldr	r1, [r2, #0]
    d0ce:	e00d      	b.n	d0ec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d0d0:	f101 0508 	add.w	r5, r1, #8
    d0d4:	b2ae      	uxth	r6, r5
    d0d6:	2500      	movs	r5, #0
    d0d8:	42b4      	cmp	r4, r6
    d0da:	d309      	bcc.n	d0f0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d0dc:	1a64      	subs	r4, r4, r1
    d0de:	4411      	add	r1, r2
    d0e0:	600d      	str	r5, [r1, #0]
    d0e2:	808c      	strh	r4, [r1, #4]
    d0e4:	6802      	ldr	r2, [r0, #0]
    d0e6:	6812      	ldr	r2, [r2, #0]
    d0e8:	6002      	str	r2, [r0, #0]
    d0ea:	600a      	str	r2, [r1, #0]
    d0ec:	6001      	str	r1, [r0, #0]
    d0ee:	e000      	b.n	d0f2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d0f0:	2300      	movs	r3, #0
    d0f2:	4618      	mov	r0, r3
    d0f4:	bd70      	pop	{r4, r5, r6, pc}

0000d0f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d0f6:	b510      	push	{r4, lr}
    d0f8:	000c      	movs	r4, r1
    d0fa:	d006      	beq.n	d10a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d0fc:	2c08      	cmp	r4, #8
    d0fe:	d209      	bcs.n	d114 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d100:	f240 1195 	movw	r1, #405	; 0x195
    d104:	2015      	movs	r0, #21
    d106:	f7f6 fe2b 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d10a:	b108      	cbz	r0, d110 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d10c:	2100      	movs	r1, #0
    d10e:	6001      	str	r1, [r0, #0]
    d110:	2000      	movs	r0, #0
    d112:	bd10      	pop	{r4, pc}
    d114:	b118      	cbz	r0, d11e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d116:	b2a1      	uxth	r1, r4
    d118:	6800      	ldr	r0, [r0, #0]
    d11a:	f000 f814 	bl	d146 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d11e:	1d20      	adds	r0, r4, #4
    d120:	bd10      	pop	{r4, pc}

0000d122 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d122:	2100      	movs	r1, #0
    d124:	6802      	ldr	r2, [r0, #0]
    d126:	e003      	b.n	d130 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d128:	8893      	ldrh	r3, [r2, #4]
    d12a:	6812      	ldr	r2, [r2, #0]
    d12c:	4419      	add	r1, r3
    d12e:	b289      	uxth	r1, r1
    d130:	2a00      	cmp	r2, #0
    d132:	d1f9      	bne.n	d128 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d134:	f000 b807 	b.w	d146 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d138 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d138:	2300      	movs	r3, #0
    d13a:	600b      	str	r3, [r1, #0]
    d13c:	808a      	strh	r2, [r1, #4]
    d13e:	6802      	ldr	r2, [r0, #0]
    d140:	600a      	str	r2, [r1, #0]
    d142:	6001      	str	r1, [r0, #0]
    d144:	4770      	bx	lr
    d146:	2300      	movs	r3, #0
    d148:	6043      	str	r3, [r0, #4]
    d14a:	1d02      	adds	r2, r0, #4
    d14c:	8101      	strh	r1, [r0, #8]
    d14e:	6002      	str	r2, [r0, #0]
    d150:	4770      	bx	lr

0000d152 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d152:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d156:	3bff      	subs	r3, #255	; 0xff
    d158:	d001      	beq.n	d15e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d15a:	2902      	cmp	r1, #2
    d15c:	d301      	bcc.n	d162 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d15e:	2000      	movs	r0, #0
    d160:	4770      	bx	lr
    d162:	f7f7 b8ad 	b.w	42c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d166 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    d166:	b50e      	push	{r1, r2, r3, lr}
    d168:	4669      	mov	r1, sp
    d16a:	f000 f818 	bl	d19e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    d16e:	b120      	cbz	r0, d17a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    d170:	f44f 71b2 	mov.w	r1, #356	; 0x164
    d174:	2017      	movs	r0, #23
    d176:	f7f6 fdf3 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d17a:	4668      	mov	r0, sp
    d17c:	f7f7 f81e 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d180:	b108      	cbz	r0, d186 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    d182:	2000      	movs	r0, #0
    d184:	bd0e      	pop	{r1, r2, r3, pc}
    d186:	2001      	movs	r0, #1
    d188:	bd0e      	pop	{r1, r2, r3, pc}

0000d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d18a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d18e:	3aff      	subs	r2, #255	; 0xff
    d190:	d001      	beq.n	d196 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d192:	2902      	cmp	r1, #2
    d194:	d301      	bcc.n	d19a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d196:	2000      	movs	r0, #0
    d198:	4770      	bx	lr
    d19a:	f7f7 b8cb 	b.w	4334 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d19e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d19e:	b570      	push	{r4, r5, r6, lr}
    d1a0:	4605      	mov	r5, r0
    d1a2:	460c      	mov	r4, r1
    d1a4:	4608      	mov	r0, r1
    d1a6:	f000 f850 	bl	d24a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d1aa:	b108      	cbz	r0, d1b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d1ac:	2010      	movs	r0, #16
    d1ae:	bd70      	pop	{r4, r5, r6, pc}
    d1b0:	2d02      	cmp	r5, #2
    d1b2:	d301      	bcc.n	d1b8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d1b4:	2007      	movs	r0, #7
    d1b6:	bd70      	pop	{r4, r5, r6, pc}
    d1b8:	7025      	strb	r5, [r4, #0]
    d1ba:	2000      	movs	r0, #0
    d1bc:	8060      	strh	r0, [r4, #2]
    d1be:	bd70      	pop	{r4, r5, r6, pc}
    d1c0:	b510      	push	{r4, lr}
    d1c2:	4604      	mov	r4, r0
    d1c4:	f7f7 f902 	bl	43cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d1c8:	42a0      	cmp	r0, r4
    d1ca:	d901      	bls.n	d1d0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d1cc:	2001      	movs	r0, #1
    d1ce:	bd10      	pop	{r4, pc}
    d1d0:	2000      	movs	r0, #0
    d1d2:	bd10      	pop	{r4, pc}
    d1d4:	4770      	bx	lr

0000d1d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d1d6:	b570      	push	{r4, r5, r6, lr}
    d1d8:	460e      	mov	r6, r1
    d1da:	461d      	mov	r5, r3
    d1dc:	4611      	mov	r1, r2
    d1de:	f000 f811 	bl	d204 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d1e2:	4604      	mov	r4, r0
    d1e4:	4629      	mov	r1, r5
    d1e6:	4630      	mov	r0, r6
    d1e8:	f000 f803 	bl	d1f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d1ec:	4420      	add	r0, r4
    d1ee:	1d00      	adds	r0, r0, #4
    d1f0:	bd70      	pop	{r4, r5, r6, pc}
    d1f2:	b510      	push	{r4, lr}
    d1f4:	460a      	mov	r2, r1
    d1f6:	2101      	movs	r1, #1
    d1f8:	f7ff ff0a 	bl	d010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d1fc:	1cc0      	adds	r0, r0, #3
    d1fe:	f020 0003 	bic.w	r0, r0, #3
    d202:	bd10      	pop	{r4, pc}
    d204:	b510      	push	{r4, lr}
    d206:	460a      	mov	r2, r1
    d208:	2101      	movs	r1, #1
    d20a:	f7ff ff01 	bl	d010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d20e:	1cc0      	adds	r0, r0, #3
    d210:	f020 0003 	bic.w	r0, r0, #3
    d214:	bd10      	pop	{r4, pc}
    d216:	2800      	cmp	r0, #0
    d218:	db09      	blt.n	d22e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d21a:	f000 021f 	and.w	r2, r0, #31
    d21e:	2101      	movs	r1, #1
    d220:	4091      	lsls	r1, r2
    d222:	0940      	lsrs	r0, r0, #5
    d224:	0080      	lsls	r0, r0, #2
    d226:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d22a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d22e:	4770      	bx	lr

0000d230 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d230:	f7f7 bab0 	b.w	4794 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d234 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d234:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d238:	2000      	movs	r0, #0
    d23a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d23e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d242:	2001      	movs	r0, #1
    d244:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d248:	4770      	bx	lr

0000d24a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d24a:	b108      	cbz	r0, d250 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d24c:	2000      	movs	r0, #0
    d24e:	4770      	bx	lr
    d250:	2001      	movs	r0, #1
    d252:	4770      	bx	lr

0000d254 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d254:	f7f7 bbe4 	b.w	4a20 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d258 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d258:	f7f7 bbd2 	b.w	4a00 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d25c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d25c:	b510      	push	{r4, lr}
    d25e:	2900      	cmp	r1, #0
    d260:	4604      	mov	r4, r0
    d262:	f04f 0106 	mov.w	r1, #6
    d266:	d002      	beq.n	d26e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d268:	f7f6 fe0a 	bl	3e80 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d26c:	e001      	b.n	d272 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d26e:	f7f6 fe23 	bl	3eb8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d272:	7960      	ldrb	r0, [r4, #5]
    d274:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d278:	7160      	strb	r0, [r4, #5]
    d27a:	bd10      	pop	{r4, pc}

0000d27c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d27c:	4770      	bx	lr

0000d27e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d27e:	b530      	push	{r4, r5, lr}
    d280:	460c      	mov	r4, r1
    d282:	4605      	mov	r5, r0
    d284:	b08d      	sub	sp, #52	; 0x34
    d286:	f04f 0103 	mov.w	r1, #3
    d28a:	f104 0003 	add.w	r0, r4, #3
    d28e:	b112      	cbz	r2, d296 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d290:	f7f6 fdf6 	bl	3e80 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d294:	e001      	b.n	d29a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d296:	f7f6 fe0f 	bl	3eb8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d29a:	7960      	ldrb	r0, [r4, #5]
    d29c:	220d      	movs	r2, #13
    d29e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d2a2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d2a6:	7160      	strb	r0, [r4, #5]
    d2a8:	2100      	movs	r1, #0
    d2aa:	a804      	add	r0, sp, #16
    d2ac:	f7fe ffd5 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d2b0:	78e0      	ldrb	r0, [r4, #3]
    d2b2:	f88d 001f 	strb.w	r0, [sp, #31]
    d2b6:	7920      	ldrb	r0, [r4, #4]
    d2b8:	f88d 001e 	strb.w	r0, [sp, #30]
    d2bc:	7960      	ldrb	r0, [r4, #5]
    d2be:	f88d 001d 	strb.w	r0, [sp, #29]
    d2c2:	2210      	movs	r2, #16
    d2c4:	4629      	mov	r1, r5
    d2c6:	4668      	mov	r0, sp
    d2c8:	f7fe ff4d 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2cc:	4668      	mov	r0, sp
    d2ce:	f7ff ffaf 	bl	d230 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d2d2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d2d6:	7020      	strb	r0, [r4, #0]
    d2d8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d2dc:	7060      	strb	r0, [r4, #1]
    d2de:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d2e2:	70a0      	strb	r0, [r4, #2]
    d2e4:	b00d      	add	sp, #52	; 0x34
    d2e6:	bd30      	pop	{r4, r5, pc}

0000d2e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d2e8:	f7f7 bf1e 	b.w	5128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    d2ec:	07c1      	lsls	r1, r0, #31
    d2ee:	d001      	beq.n	d2f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d2f0:	2001      	movs	r0, #1
    d2f2:	4770      	bx	lr
    d2f4:	0780      	lsls	r0, r0, #30
    d2f6:	d501      	bpl.n	d2fc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d2f8:	2002      	movs	r0, #2
    d2fa:	4770      	bx	lr
    d2fc:	2000      	movs	r0, #0
    d2fe:	4770      	bx	lr
    d300:	b510      	push	{r4, lr}
    d302:	2801      	cmp	r0, #1
    d304:	d008      	beq.n	d318 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d306:	2802      	cmp	r0, #2
    d308:	d004      	beq.n	d314 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d30a:	f240 31c1 	movw	r1, #961	; 0x3c1
    d30e:	2006      	movs	r0, #6
    d310:	f7f6 fd26 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d314:	2001      	movs	r0, #1
    d316:	bd10      	pop	{r4, pc}
    d318:	2000      	movs	r0, #0
    d31a:	bd10      	pop	{r4, pc}
    d31c:	b570      	push	{r4, r5, r6, lr}
    d31e:	460c      	mov	r4, r1
    d320:	4605      	mov	r5, r0
    d322:	2b08      	cmp	r3, #8
    d324:	d001      	beq.n	d32a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d326:	4619      	mov	r1, r3
    d328:	e000      	b.n	d32c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d32a:	2104      	movs	r1, #4
    d32c:	4610      	mov	r0, r2
    d32e:	f000 f8f4 	bl	d51a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    d332:	b90d      	cbnz	r5, d338 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x50>
    d334:	1d00      	adds	r0, r0, #4
    d336:	b280      	uxth	r0, r0
    d338:	4284      	cmp	r4, r0
    d33a:	d200      	bcs.n	d33e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x56>
    d33c:	4620      	mov	r0, r4
    d33e:	b2c0      	uxtb	r0, r0
    d340:	bd70      	pop	{r4, r5, r6, pc}
    d342:	2900      	cmp	r1, #0
    d344:	d004      	beq.n	d350 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x68>
    d346:	2801      	cmp	r0, #1
    d348:	d003      	beq.n	d352 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    d34a:	2901      	cmp	r1, #1
    d34c:	d001      	beq.n	d352 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    d34e:	2002      	movs	r0, #2
    d350:	4770      	bx	lr
    d352:	2001      	movs	r0, #1
    d354:	4770      	bx	lr
    d356:	f7ff bdb0 	b.w	ceba <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d35a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d35a:	2201      	movs	r2, #1
    d35c:	f7f8 baa2 	b.w	58a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d360 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d360:	b510      	push	{r4, lr}
    d362:	f002 f954 	bl	f60e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d366:	b118      	cbz	r0, d370 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d36c:	f7fd ba7a 	b.w	a864 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d370:	20ff      	movs	r0, #255	; 0xff
    d372:	bd10      	pop	{r4, pc}

0000d374 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d374:	b510      	push	{r4, lr}
    d376:	f7f8 fadf 	bl	5938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d37a:	2810      	cmp	r0, #16
    d37c:	d003      	beq.n	d386 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d37e:	f7f8 faab 	bl	58d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d382:	2810      	cmp	r0, #16
    d384:	d100      	bne.n	d388 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d386:	2008      	movs	r0, #8
    d388:	bd10      	pop	{r4, pc}

0000d38a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d38a:	b510      	push	{r4, lr}
    d38c:	f7f8 fad4 	bl	5938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d390:	2810      	cmp	r0, #16
    d392:	d007      	beq.n	d3a4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d394:	f7f8 faa0 	bl	58d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d398:	2810      	cmp	r0, #16
    d39a:	d003      	beq.n	d3a4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d39c:	f7f8 fb14 	bl	59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    d3a0:	2001      	movs	r0, #1
    d3a2:	bd10      	pop	{r4, pc}
    d3a4:	2000      	movs	r0, #0
    d3a6:	bd10      	pop	{r4, pc}

0000d3a8 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d3a8:	b510      	push	{r4, lr}
    d3aa:	f7f8 fac5 	bl	5938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d3ae:	2810      	cmp	r0, #16
    d3b0:	d003      	beq.n	d3ba <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d3b2:	f7f8 fb51 	bl	5a58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    d3b6:	2001      	movs	r0, #1
    d3b8:	bd10      	pop	{r4, pc}
    d3ba:	2000      	movs	r0, #0
    d3bc:	bd10      	pop	{r4, pc}

0000d3be <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d3be:	b570      	push	{r4, r5, r6, lr}
    d3c0:	460e      	mov	r6, r1
    d3c2:	b08c      	sub	sp, #48	; 0x30
    d3c4:	4614      	mov	r4, r2
    d3c6:	4601      	mov	r1, r0
    d3c8:	461d      	mov	r5, r3
    d3ca:	2210      	movs	r2, #16
    d3cc:	4668      	mov	r0, sp
    d3ce:	f000 f92d 	bl	d62c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3d2:	2210      	movs	r2, #16
    d3d4:	4631      	mov	r1, r6
    d3d6:	a804      	add	r0, sp, #16
    d3d8:	f000 f928 	bl	d62c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3dc:	4668      	mov	r0, sp
    d3de:	f7ff ff27 	bl	d230 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d3e2:	a908      	add	r1, sp, #32
    d3e4:	f04f 0210 	mov.w	r2, #16
    d3e8:	4628      	mov	r0, r5
    d3ea:	b11c      	cbz	r4, d3f4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d3ec:	f000 f91e 	bl	d62c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3f0:	b00c      	add	sp, #48	; 0x30
    d3f2:	bd70      	pop	{r4, r5, r6, pc}
    d3f4:	f7fe feb7 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3f8:	e7fa      	b.n	d3f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d3fa:	b510      	push	{r4, lr}
    d3fc:	460c      	mov	r4, r1
    d3fe:	2100      	movs	r1, #0
    d400:	f7ff fec3 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d404:	6060      	str	r0, [r4, #4]
    d406:	b118      	cbz	r0, d410 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d408:	2001      	movs	r0, #1
    d40a:	7020      	strb	r0, [r4, #0]
    d40c:	2000      	movs	r0, #0
    d40e:	bd10      	pop	{r4, pc}
    d410:	2002      	movs	r0, #2
    d412:	bd10      	pop	{r4, pc}

0000d414 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d414:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d418:	4348      	muls	r0, r1
    d41a:	4770      	bx	lr

0000d41c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d41c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d420:	fbb0 f0f1 	udiv	r0, r0, r1
    d424:	b280      	uxth	r0, r0
    d426:	4770      	bx	lr

0000d428 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d428:	b570      	push	{r4, r5, r6, lr}
    d42a:	4604      	mov	r4, r0
    d42c:	4290      	cmp	r0, r2
    d42e:	d20b      	bcs.n	d448 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d430:	1b10      	subs	r0, r2, r4
    d432:	2864      	cmp	r0, #100	; 0x64
    d434:	d200      	bcs.n	d438 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d436:	2064      	movs	r0, #100	; 0x64
    d438:	1825      	adds	r5, r4, r0
    d43a:	428d      	cmp	r5, r1
    d43c:	d803      	bhi.n	d446 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d43e:	2104      	movs	r1, #4
    d440:	f7f3 ff68 	bl	1314 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d444:	b108      	cbz	r0, d44a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d446:	4620      	mov	r0, r4
    d448:	bd70      	pop	{r4, r5, r6, pc}
    d44a:	4628      	mov	r0, r5
    d44c:	bd70      	pop	{r4, r5, r6, pc}

0000d44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d44e:	b510      	push	{r4, lr}
    d450:	f1a2 030f 	sub.w	r3, r2, #15
    d454:	290c      	cmp	r1, #12
    d456:	d244      	bcs.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d458:	e8df f001 	tbb	[pc, r1]
    d45c:	120d0806 	.word	0x120d0806
    d460:	241c1815 	.word	0x241c1815
    d464:	312a4127 	.word	0x312a4127
    d468:	b3c2      	cbz	r2, d4dc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d46a:	e03a      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d46c:	2a07      	cmp	r2, #7
    d46e:	d03a      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d470:	2a08      	cmp	r2, #8
    d472:	d038      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d474:	e035      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d476:	2a0c      	cmp	r2, #12
    d478:	d035      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d47a:	2a0b      	cmp	r2, #11
    d47c:	d033      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d47e:	e030      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d480:	2a0d      	cmp	r2, #13
    d482:	d030      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d484:	e02d      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d486:	2b0c      	cmp	r3, #12
    d488:	d92d      	bls.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d48a:	e02a      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d48c:	3a10      	subs	r2, #16
    d48e:	2a0b      	cmp	r2, #11
    d490:	d929      	bls.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d492:	e026      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d494:	2b03      	cmp	r3, #3
    d496:	d926      	bls.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d498:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    d49c:	b308      	cbz	r0, d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d49e:	2a1b      	cmp	r2, #27
    d4a0:	d921      	bls.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4a2:	e01e      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4a4:	2a04      	cmp	r2, #4
    d4a6:	d01e      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4a8:	e01b      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4aa:	2a06      	cmp	r2, #6
    d4ac:	d01b      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ae:	e018      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4b0:	2a1c      	cmp	r2, #28
    d4b2:	d018      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4b4:	2a1d      	cmp	r2, #29
    d4b6:	d016      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4b8:	2a1e      	cmp	r2, #30
    d4ba:	d014      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4bc:	e011      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4be:	2a1f      	cmp	r2, #31
    d4c0:	d011      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4c2:	2a20      	cmp	r2, #32
    d4c4:	d00f      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4c6:	2a21      	cmp	r2, #33	; 0x21
    d4c8:	d00d      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ca:	2a22      	cmp	r2, #34	; 0x22
    d4cc:	d00b      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ce:	2a23      	cmp	r2, #35	; 0x23
    d4d0:	d009      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4d2:	2a24      	cmp	r2, #36	; 0x24
    d4d4:	d007      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4d6:	2a26      	cmp	r2, #38	; 0x26
    d4d8:	d005      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4da:	e002      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4dc:	e003      	b.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4de:	2a0e      	cmp	r2, #14
    d4e0:	d001      	beq.n	d4e6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4e2:	2000      	movs	r0, #0
    d4e4:	bd10      	pop	{r4, pc}
    d4e6:	2001      	movs	r0, #1
    d4e8:	bd10      	pop	{r4, pc}

0000d4ea <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d4ea:	280c      	cmp	r0, #12
    d4ec:	d013      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4ee:	280b      	cmp	r0, #11
    d4f0:	d011      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4f2:	280d      	cmp	r0, #13
    d4f4:	d00f      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4f6:	281f      	cmp	r0, #31
    d4f8:	d00d      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4fa:	2820      	cmp	r0, #32
    d4fc:	d00b      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4fe:	2821      	cmp	r0, #33	; 0x21
    d500:	d009      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d502:	2822      	cmp	r0, #34	; 0x22
    d504:	d007      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d506:	2823      	cmp	r0, #35	; 0x23
    d508:	d005      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d50a:	2824      	cmp	r0, #36	; 0x24
    d50c:	d003      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d50e:	2826      	cmp	r0, #38	; 0x26
    d510:	d001      	beq.n	d516 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d512:	2000      	movs	r0, #0
    d514:	4770      	bx	lr
    d516:	2001      	movs	r0, #1
    d518:	4770      	bx	lr

0000d51a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d51a:	f011 0f0c 	tst.w	r1, #12
    d51e:	d016      	beq.n	d54e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d520:	074a      	lsls	r2, r1, #29
    d522:	f44f 7116 	mov.w	r1, #600	; 0x258
    d526:	2a00      	cmp	r2, #0
    d528:	da02      	bge.n	d530 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d52a:	f04f 0210 	mov.w	r2, #16
    d52e:	e001      	b.n	d534 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d530:	f04f 0240 	mov.w	r2, #64	; 0x40
    d534:	da01      	bge.n	d53a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d536:	f04f 0196 	mov.w	r1, #150	; 0x96
    d53a:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d53e:	eba0 0301 	sub.w	r3, r0, r1
    d542:	4288      	cmp	r0, r1
    d544:	d910      	bls.n	d568 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d546:	fb93 f0f2 	sdiv	r0, r3, r2
    d54a:	b280      	uxth	r0, r0
    d54c:	4770      	bx	lr
    d54e:	2902      	cmp	r1, #2
    d550:	d002      	beq.n	d558 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d552:	2870      	cmp	r0, #112	; 0x70
    d554:	d80a      	bhi.n	d56c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d556:	e007      	b.n	d568 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d558:	283c      	cmp	r0, #60	; 0x3c
    d55a:	d905      	bls.n	d568 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d55c:	383c      	subs	r0, #60	; 0x3c
    d55e:	17c1      	asrs	r1, r0, #31
    d560:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d564:	1080      	asrs	r0, r0, #2
    d566:	e7f0      	b.n	d54a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d568:	2000      	movs	r0, #0
    d56a:	e7ee      	b.n	d54a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d56c:	3870      	subs	r0, #112	; 0x70
    d56e:	17c1      	asrs	r1, r0, #31
    d570:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d574:	10c0      	asrs	r0, r0, #3
    d576:	e7e8      	b.n	d54a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d578 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d578:	6809      	ldr	r1, [r1, #0]
    d57a:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
    d57e:	4770      	bx	lr

0000d580 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    d580:	7e83      	ldrb	r3, [r0, #26]
    d582:	b10b      	cbz	r3, d588 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x8>
    d584:	2b25      	cmp	r3, #37	; 0x25
    d586:	d901      	bls.n	d58c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    d588:	2012      	movs	r0, #18
    d58a:	4770      	bx	lr
    d58c:	b12a      	cbz	r2, d59a <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1a>
    d58e:	7c4b      	ldrb	r3, [r1, #17]
    d590:	b12b      	cbz	r3, d59e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1e>
    d592:	2b01      	cmp	r3, #1
    d594:	d005      	beq.n	d5a2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x22>
    d596:	201f      	movs	r0, #31
    d598:	4770      	bx	lr
    d59a:	2000      	movs	r0, #0
    d59c:	4770      	bx	lr
    d59e:	f7f8 bb35 	b.w	5c0c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x1c>
    d5a2:	f000 b8e8 	b.w	d776 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>

0000d5a6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d5a6:	07c1      	lsls	r1, r0, #31
    d5a8:	d001      	beq.n	d5ae <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d5aa:	2001      	movs	r0, #1
    d5ac:	4770      	bx	lr
    d5ae:	0781      	lsls	r1, r0, #30
    d5b0:	d501      	bpl.n	d5b6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d5b2:	2002      	movs	r0, #2
    d5b4:	4770      	bx	lr
    d5b6:	0740      	lsls	r0, r0, #29
    d5b8:	d501      	bpl.n	d5be <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d5ba:	2008      	movs	r0, #8
    d5bc:	4770      	bx	lr
    d5be:	2000      	movs	r0, #0
    d5c0:	4770      	bx	lr

0000d5c2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d5c2:	b510      	push	{r4, lr}
    d5c4:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d5c8:	2901      	cmp	r1, #1
    d5ca:	d006      	beq.n	d5da <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d5cc:	2902      	cmp	r1, #2
    d5ce:	d005      	beq.n	d5dc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d5d0:	f240 512a 	movw	r1, #1322	; 0x52a
    d5d4:	2029      	movs	r0, #41	; 0x29
    d5d6:	f7f6 fbc3 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5da:	b108      	cbz	r0, d5e0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d5dc:	4610      	mov	r0, r2
    d5de:	bd10      	pop	{r4, pc}
    d5e0:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d5e4:	bd10      	pop	{r4, pc}

0000d5e6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5ea:	460c      	mov	r4, r1
    d5ec:	4605      	mov	r5, r0
    d5ee:	68c6      	ldr	r6, [r0, #12]
    d5f0:	f7f4 fb06 	bl	1c00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d5f4:	b198      	cbz	r0, d61e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d5f6:	b1bc      	cbz	r4, d628 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d5f8:	4630      	mov	r0, r6
    d5fa:	68e9      	ldr	r1, [r5, #12]
    d5fc:	f7f3 ff9c 	bl	1538 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d600:	2800      	cmp	r0, #0
    d602:	dd11      	ble.n	d628 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d604:	4420      	add	r0, r4
    d606:	1e40      	subs	r0, r0, #1
    d608:	fbb0 f7f4 	udiv	r7, r0, r4
    d60c:	fb07 f104 	mul.w	r1, r7, r4
    d610:	4630      	mov	r0, r6
    d612:	f7f3 ff5b 	bl	14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d616:	60e8      	str	r0, [r5, #12]
    d618:	4638      	mov	r0, r7
    d61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d61e:	f240 31af 	movw	r1, #943	; 0x3af
    d622:	2029      	movs	r0, #41	; 0x29
    d624:	f7f6 fb9c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d628:	2000      	movs	r0, #0
    d62a:	e7f6      	b.n	d61a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d62c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d62c:	b530      	push	{r4, r5, lr}
    d62e:	4613      	mov	r3, r2
    d630:	e006      	b.n	d640 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d632:	18cc      	adds	r4, r1, r3
    d634:	1ad5      	subs	r5, r2, r3
    d636:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d63a:	1e5b      	subs	r3, r3, #1
    d63c:	5544      	strb	r4, [r0, r5]
    d63e:	b2db      	uxtb	r3, r3
    d640:	2b00      	cmp	r3, #0
    d642:	d1f6      	bne.n	d632 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d644:	bd30      	pop	{r4, r5, pc}

0000d646 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d646:	b538      	push	{r3, r4, r5, lr}
    d648:	4605      	mov	r5, r0
    d64a:	460c      	mov	r4, r1
    d64c:	4668      	mov	r0, sp
    d64e:	f7fd fe09 	bl	b264 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d652:	b308      	cbz	r0, d698 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    d654:	f99d 0000 	ldrsb.w	r0, [sp]
    d658:	7260      	strb	r0, [r4, #9]
    d65a:	7f21      	ldrb	r1, [r4, #28]
    d65c:	72a1      	strb	r1, [r4, #10]
    d65e:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d662:	2200      	movs	r2, #0
    d664:	1a41      	subs	r1, r0, r1
    d666:	d500      	bpl.n	d66a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x24>
    d668:	4249      	negs	r1, r1
    d66a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    d66e:	428b      	cmp	r3, r1
    d670:	dc10      	bgt.n	d694 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d672:	2bff      	cmp	r3, #255	; 0xff
    d674:	d00e      	beq.n	d694 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d676:	7b21      	ldrb	r1, [r4, #12]
    d678:	1c49      	adds	r1, r1, #1
    d67a:	b2c9      	uxtb	r1, r1
    d67c:	7321      	strb	r1, [r4, #12]
    d67e:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    d682:	4299      	cmp	r1, r3
    d684:	d802      	bhi.n	d68c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    d686:	7ae1      	ldrb	r1, [r4, #11]
    d688:	297f      	cmp	r1, #127	; 0x7f
    d68a:	d103      	bne.n	d694 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d68c:	72e0      	strb	r0, [r4, #11]
    d68e:	2000      	movs	r0, #0
    d690:	7320      	strb	r0, [r4, #12]
    d692:	2201      	movs	r2, #1
    d694:	4610      	mov	r0, r2
    d696:	bd38      	pop	{r3, r4, r5, pc}
    d698:	207f      	movs	r0, #127	; 0x7f
    d69a:	7260      	strb	r0, [r4, #9]
    d69c:	2000      	movs	r0, #0
    d69e:	bd38      	pop	{r3, r4, r5, pc}

0000d6a0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d6a0:	2300      	movs	r3, #0
    d6a2:	6203      	str	r3, [r0, #32]
    d6a4:	8502      	strh	r2, [r0, #40]	; 0x28
    d6a6:	f240 2371 	movw	r3, #625	; 0x271
    d6aa:	435a      	muls	r2, r3
    d6ac:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d6b0:	1e52      	subs	r2, r2, #1
    d6b2:	fbb2 f1f1 	udiv	r1, r2, r1
    d6b6:	6241      	str	r1, [r0, #36]	; 0x24
    d6b8:	4770      	bx	lr

0000d6ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d6ba:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d6be:	4607      	mov	r7, r0
    d6c0:	4690      	mov	r8, r2
    d6c2:	468b      	mov	fp, r1
    d6c4:	2601      	movs	r6, #1
    d6c6:	4608      	mov	r0, r1
    d6c8:	f000 f93c 	bl	d944 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d6cc:	4682      	mov	sl, r0
    d6ce:	4658      	mov	r0, fp
    d6d0:	f000 f944 	bl	d95c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d6d4:	4681      	mov	r9, r0
    d6d6:	f7ff ff66 	bl	d5a6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d6da:	4604      	mov	r4, r0
    d6dc:	4650      	mov	r0, sl
    d6de:	f7ff ff62 	bl	d5a6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d6e2:	4605      	mov	r5, r0
    d6e4:	ea54 0005 	orrs.w	r0, r4, r5
    d6e8:	d100      	bne.n	d6ec <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d6ea:	2600      	movs	r6, #0
    d6ec:	f7fd f85c 	bl	a7a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d6f0:	ea10 0f09 	tst.w	r0, r9
    d6f4:	d100      	bne.n	d6f8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d6f6:	2400      	movs	r4, #0
    d6f8:	f7fd f856 	bl	a7a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d6fc:	ea10 0f0a 	tst.w	r0, sl
    d700:	d100      	bne.n	d704 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d702:	2500      	movs	r5, #0
    d704:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
    d708:	42a0      	cmp	r0, r4
    d70a:	d100      	bne.n	d70e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d70c:	2400      	movs	r4, #0
    d70e:	f888 4000 	strb.w	r4, [r8]
    d712:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
    d716:	42a8      	cmp	r0, r5
    d718:	d100      	bne.n	d71c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d71a:	2500      	movs	r5, #0
    d71c:	f888 5001 	strb.w	r5, [r8, #1]
    d720:	b974      	cbnz	r4, d740 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d722:	b96d      	cbnz	r5, d740 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d724:	4658      	mov	r0, fp
    d726:	f000 f917 	bl	d958 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d72a:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    d72e:	1a40      	subs	r0, r0, r1
    d730:	b200      	sxth	r0, r0
    d732:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d736:	4288      	cmp	r0, r1
    d738:	dc01      	bgt.n	d73e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d73a:	2800      	cmp	r0, #0
    d73c:	dc00      	bgt.n	d740 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d73e:	2600      	movs	r6, #0
    d740:	4630      	mov	r0, r6
    d742:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d746 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d746:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d74a:	4348      	muls	r0, r1
    d74c:	4770      	bx	lr

0000d74e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d74e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d752:	fb10 f001 	smulbb	r0, r0, r1
    d756:	4770      	bx	lr

0000d758 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d758:	b510      	push	{r4, lr}
    d75a:	2300      	movs	r3, #0
    d75c:	461a      	mov	r2, r3
    d75e:	e003      	b.n	d768 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d760:	5c84      	ldrb	r4, [r0, r2]
    d762:	4323      	orrs	r3, r4
    d764:	1c52      	adds	r2, r2, #1
    d766:	b2d2      	uxtb	r2, r2
    d768:	428a      	cmp	r2, r1
    d76a:	d3f9      	bcc.n	d760 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d76c:	b10b      	cbz	r3, d772 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d76e:	2000      	movs	r0, #0
    d770:	bd10      	pop	{r4, pc}
    d772:	2001      	movs	r0, #1
    d774:	bd10      	pop	{r4, pc}
    d776:	b5f0      	push	{r4, r5, r6, r7, lr}
    d778:	7d0c      	ldrb	r4, [r1, #20]
    d77a:	7c8b      	ldrb	r3, [r1, #18]
    d77c:	7ccd      	ldrb	r5, [r1, #19]
    d77e:	405c      	eors	r4, r3
    d780:	7d4b      	ldrb	r3, [r1, #21]
    d782:	8882      	ldrh	r2, [r0, #4]
    d784:	406b      	eors	r3, r5
    d786:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    d78a:	7e86      	ldrb	r6, [r0, #26]
    d78c:	4062      	eors	r2, r4
    d78e:	2300      	movs	r3, #0
    d790:	b2d5      	uxtb	r5, r2
    d792:	0a12      	lsrs	r2, r2, #8
    d794:	fa95 f5a5 	rbit	r5, r5
    d798:	fa92 f2a2 	rbit	r2, r2
    d79c:	0e2d      	lsrs	r5, r5, #24
    d79e:	0e12      	lsrs	r2, r2, #24
    d7a0:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
    d7a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    d7a8:	1c5b      	adds	r3, r3, #1
    d7aa:	4422      	add	r2, r4
    d7ac:	b2db      	uxtb	r3, r3
    d7ae:	b292      	uxth	r2, r2
    d7b0:	2b03      	cmp	r3, #3
    d7b2:	d3ed      	bcc.n	d790 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x38>
    d7b4:	4062      	eors	r2, r4
    d7b6:	2325      	movs	r3, #37	; 0x25
    d7b8:	fbb2 f4f3 	udiv	r4, r2, r3
    d7bc:	fb03 2314 	mls	r3, r3, r4, r2
    d7c0:	eb01 04d3 	add.w	r4, r1, r3, lsr #3
    d7c4:	76c3      	strb	r3, [r0, #27]
    d7c6:	f003 0707 	and.w	r7, r3, #7
    d7ca:	7b24      	ldrb	r4, [r4, #12]
    d7cc:	2501      	movs	r5, #1
    d7ce:	fa05 f707 	lsl.w	r7, r5, r7
    d7d2:	423c      	tst	r4, r7
    d7d4:	d001      	beq.n	d7da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x82>
    d7d6:	7703      	strb	r3, [r0, #28]
    d7d8:	e01a      	b.n	d810 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
    d7da:	4356      	muls	r6, r2
    d7dc:	0c32      	lsrs	r2, r6, #16
    d7de:	1c52      	adds	r2, r2, #1
    d7e0:	b2d2      	uxtb	r2, r2
    d7e2:	2400      	movs	r4, #0
    d7e4:	1903      	adds	r3, r0, r4
    d7e6:	7d5b      	ldrb	r3, [r3, #21]
    d7e8:	4293      	cmp	r3, r2
    d7ea:	d313      	bcc.n	d814 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xbc>
    d7ec:	2300      	movs	r3, #0
    d7ee:	190e      	adds	r6, r1, r4
    d7f0:	7b36      	ldrb	r6, [r6, #12]
    d7f2:	fa05 f703 	lsl.w	r7, r5, r3
    d7f6:	423e      	tst	r6, r7
    d7f8:	d001      	beq.n	d7fe <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xa6>
    d7fa:	1e52      	subs	r2, r2, #1
    d7fc:	b2d2      	uxtb	r2, r2
    d7fe:	b122      	cbz	r2, d80a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb2>
    d800:	1c5b      	adds	r3, r3, #1
    d802:	b2db      	uxtb	r3, r3
    d804:	2b08      	cmp	r3, #8
    d806:	d3f4      	bcc.n	d7f2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x9a>
    d808:	e006      	b.n	d818 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xc0>
    d80a:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    d80e:	7701      	strb	r1, [r0, #28]
    d810:	2000      	movs	r0, #0
    d812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d814:	1ad2      	subs	r2, r2, r3
    d816:	b2d2      	uxtb	r2, r2
    d818:	1c64      	adds	r4, r4, #1
    d81a:	b2e4      	uxtb	r4, r4
    d81c:	2c05      	cmp	r4, #5
    d81e:	d3e1      	bcc.n	d7e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8c>
    d820:	201f      	movs	r0, #31
    d822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d824:	b570      	push	{r4, r5, r6, lr}
    d826:	4605      	mov	r5, r0
    d828:	7c08      	ldrb	r0, [r1, #16]
    d82a:	460e      	mov	r6, r1
    d82c:	f000 001f 	and.w	r0, r0, #31
    d830:	7408      	strb	r0, [r1, #16]
    d832:	2000      	movs	r0, #0
    d834:	76a8      	strb	r0, [r5, #26]
    d836:	4604      	mov	r4, r0
    d838:	1930      	adds	r0, r6, r4
    d83a:	7b00      	ldrb	r0, [r0, #12]
    d83c:	f000 f811 	bl	d862 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10a>
    d840:	1929      	adds	r1, r5, r4
    d842:	1c64      	adds	r4, r4, #1
    d844:	7548      	strb	r0, [r1, #21]
    d846:	7ea9      	ldrb	r1, [r5, #26]
    d848:	b2e4      	uxtb	r4, r4
    d84a:	4408      	add	r0, r1
    d84c:	76a8      	strb	r0, [r5, #26]
    d84e:	2c05      	cmp	r4, #5
    d850:	d3f2      	bcc.n	d838 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xe0>
    d852:	b2c0      	uxtb	r0, r0
    d854:	2825      	cmp	r0, #37	; 0x25
    d856:	d903      	bls.n	d860 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x108>
    d858:	21bf      	movs	r1, #191	; 0xbf
    d85a:	2029      	movs	r0, #41	; 0x29
    d85c:	f7f6 fa80 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d860:	bd70      	pop	{r4, r5, r6, pc}
    d862:	f000 0101 	and.w	r1, r0, #1
    d866:	0840      	lsrs	r0, r0, #1
    d868:	f000 0201 	and.w	r2, r0, #1
    d86c:	4411      	add	r1, r2
    d86e:	0840      	lsrs	r0, r0, #1
    d870:	f000 0201 	and.w	r2, r0, #1
    d874:	4411      	add	r1, r2
    d876:	0840      	lsrs	r0, r0, #1
    d878:	f000 0201 	and.w	r2, r0, #1
    d87c:	4411      	add	r1, r2
    d87e:	0840      	lsrs	r0, r0, #1
    d880:	f000 0201 	and.w	r2, r0, #1
    d884:	4411      	add	r1, r2
    d886:	0840      	lsrs	r0, r0, #1
    d888:	f000 0201 	and.w	r2, r0, #1
    d88c:	4411      	add	r1, r2
    d88e:	0840      	lsrs	r0, r0, #1
    d890:	f000 0201 	and.w	r2, r0, #1
    d894:	4411      	add	r1, r2
    d896:	eb01 0050 	add.w	r0, r1, r0, lsr #1
    d89a:	4770      	bx	lr

0000d89c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d89c:	b570      	push	{r4, r5, r6, lr}
    d89e:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d8a2:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d8a6:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d8aa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d8ae:	88c0      	ldrh	r0, [r0, #6]
    d8b0:	b131      	cbz	r1, d8c0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d8b2:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d8b6:	d903      	bls.n	d8c0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d8b8:	f640 5107 	movw	r1, #3335	; 0xd07
    d8bc:	428a      	cmp	r2, r1
    d8be:	d90b      	bls.n	d8d8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d8c0:	1f91      	subs	r1, r2, #6
    d8c2:	f640 467a 	movw	r6, #3194	; 0xc7a
    d8c6:	42b1      	cmp	r1, r6
    d8c8:	d80e      	bhi.n	d8e8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8ca:	b16b      	cbz	r3, d8e8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8cc:	2b08      	cmp	r3, #8
    d8ce:	d80b      	bhi.n	d8e8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8d0:	4293      	cmp	r3, r2
    d8d2:	d209      	bcs.n	d8e8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8d4:	4294      	cmp	r4, r2
    d8d6:	d807      	bhi.n	d8e8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8d8:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d8dc:	d204      	bcs.n	d8e8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8de:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d8e2:	d801      	bhi.n	d8e8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8e4:	2001      	movs	r0, #1
    d8e6:	bd70      	pop	{r4, r5, r6, pc}
    d8e8:	2000      	movs	r0, #0
    d8ea:	bd70      	pop	{r4, r5, r6, pc}

0000d8ec <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d8ec:	6842      	ldr	r2, [r0, #4]
    d8ee:	600a      	str	r2, [r1, #0]
    d8f0:	7a00      	ldrb	r0, [r0, #8]
    d8f2:	7108      	strb	r0, [r1, #4]
    d8f4:	4770      	bx	lr

0000d8f6 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d8f6:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d8fa:	4770      	bx	lr

0000d8fc <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d8fc:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d900:	4770      	bx	lr

0000d902 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d902:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d906:	4770      	bx	lr

0000d908 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d908:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d90c:	4770      	bx	lr

0000d90e <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d90e:	8980      	ldrh	r0, [r0, #12]
    d910:	8008      	strh	r0, [r1, #0]
    d912:	4770      	bx	lr

0000d914 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d914:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d918:	6008      	str	r0, [r1, #0]
    d91a:	4770      	bx	lr

0000d91c <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d91c:	6842      	ldr	r2, [r0, #4]
    d91e:	600a      	str	r2, [r1, #0]
    d920:	6880      	ldr	r0, [r0, #8]
    d922:	6048      	str	r0, [r1, #4]
    d924:	4770      	bx	lr

0000d926 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d926:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d92a:	600a      	str	r2, [r1, #0]
    d92c:	6840      	ldr	r0, [r0, #4]
    d92e:	6048      	str	r0, [r1, #4]
    d930:	4770      	bx	lr

0000d932 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d932:	6842      	ldr	r2, [r0, #4]
    d934:	600a      	str	r2, [r1, #0]
    d936:	6880      	ldr	r0, [r0, #8]
    d938:	6048      	str	r0, [r1, #4]
    d93a:	4770      	bx	lr

0000d93c <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d93c:	7800      	ldrb	r0, [r0, #0]
    d93e:	f000 0003 	and.w	r0, r0, #3
    d942:	4770      	bx	lr

0000d944 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d944:	7900      	ldrb	r0, [r0, #4]
    d946:	4770      	bx	lr

0000d948 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d948:	8880      	ldrh	r0, [r0, #4]
    d94a:	4770      	bx	lr

0000d94c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d94c:	88c0      	ldrh	r0, [r0, #6]
    d94e:	4770      	bx	lr

0000d950 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d950:	8900      	ldrh	r0, [r0, #8]
    d952:	4770      	bx	lr

0000d954 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d954:	8940      	ldrh	r0, [r0, #10]
    d956:	4770      	bx	lr

0000d958 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d958:	88c0      	ldrh	r0, [r0, #6]
    d95a:	4770      	bx	lr

0000d95c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d95c:	7940      	ldrb	r0, [r0, #5]
    d95e:	4770      	bx	lr

0000d960 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d960:	7900      	ldrb	r0, [r0, #4]
    d962:	4770      	bx	lr

0000d964 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d964:	7900      	ldrb	r0, [r0, #4]
    d966:	4770      	bx	lr

0000d968 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d968:	8901      	ldrh	r1, [r0, #8]
    d96a:	291b      	cmp	r1, #27
    d96c:	d30c      	bcc.n	d988 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d96e:	8941      	ldrh	r1, [r0, #10]
    d970:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d974:	4291      	cmp	r1, r2
    d976:	d307      	bcc.n	d988 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d978:	8881      	ldrh	r1, [r0, #4]
    d97a:	291b      	cmp	r1, #27
    d97c:	d304      	bcc.n	d988 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d97e:	88c0      	ldrh	r0, [r0, #6]
    d980:	4290      	cmp	r0, r2
    d982:	d301      	bcc.n	d988 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d984:	2001      	movs	r0, #1
    d986:	4770      	bx	lr
    d988:	2000      	movs	r0, #0
    d98a:	4770      	bx	lr

0000d98c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d98c:	b510      	push	{r4, lr}
    d98e:	29fb      	cmp	r1, #251	; 0xfb
    d990:	d904      	bls.n	d99c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d992:	f240 515b 	movw	r1, #1371	; 0x55b
    d996:	202a      	movs	r0, #42	; 0x2a
    d998:	f7f6 f9e2 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d99c:	7041      	strb	r1, [r0, #1]
    d99e:	bd10      	pop	{r4, pc}

0000d9a0 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d9a0:	7901      	ldrb	r1, [r0, #4]
    d9a2:	0749      	lsls	r1, r1, #29
    d9a4:	d004      	beq.n	d9b0 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d9a6:	7940      	ldrb	r0, [r0, #5]
    d9a8:	0740      	lsls	r0, r0, #29
    d9aa:	d001      	beq.n	d9b0 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d9ac:	2001      	movs	r0, #1
    d9ae:	4770      	bx	lr
    d9b0:	2000      	movs	r0, #0
    d9b2:	4770      	bx	lr

0000d9b4 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d9b4:	7900      	ldrb	r0, [r0, #4]
    d9b6:	4770      	bx	lr

0000d9b8 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d9b8:	7940      	ldrb	r0, [r0, #5]
    d9ba:	4770      	bx	lr

0000d9bc <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d9bc:	7101      	strb	r1, [r0, #4]
    d9be:	4770      	bx	lr

0000d9c0 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d9c0:	7141      	strb	r1, [r0, #5]
    d9c2:	4770      	bx	lr

0000d9c4 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d9c4:	b510      	push	{r4, lr}
    d9c6:	2a1b      	cmp	r2, #27
    d9c8:	d904      	bls.n	d9d4 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d9ca:	f240 31c2 	movw	r1, #962	; 0x3c2
    d9ce:	202a      	movs	r0, #42	; 0x2a
    d9d0:	f7f6 f9c6 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9d4:	7042      	strb	r2, [r0, #1]
    d9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9da:	1cc0      	adds	r0, r0, #3
    d9dc:	f7fe bbc3 	b.w	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d9e0 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d9e0:	6809      	ldr	r1, [r1, #0]
    d9e2:	60c1      	str	r1, [r0, #12]
    d9e4:	4770      	bx	lr

0000d9e6 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d9e6:	680a      	ldr	r2, [r1, #0]
    d9e8:	6042      	str	r2, [r0, #4]
    d9ea:	6849      	ldr	r1, [r1, #4]
    d9ec:	6081      	str	r1, [r0, #8]
    d9ee:	4770      	bx	lr

0000d9f0 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d9f0:	680a      	ldr	r2, [r1, #0]
    d9f2:	6042      	str	r2, [r0, #4]
    d9f4:	6849      	ldr	r1, [r1, #4]
    d9f6:	6081      	str	r1, [r0, #8]
    d9f8:	4770      	bx	lr

0000d9fa <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d9fa:	680a      	ldr	r2, [r1, #0]
    d9fc:	6042      	str	r2, [r0, #4]
    d9fe:	6849      	ldr	r1, [r1, #4]
    da00:	6081      	str	r1, [r0, #8]
    da02:	4770      	bx	lr

0000da04 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    da04:	7802      	ldrb	r2, [r0, #0]
    da06:	f001 0103 	and.w	r1, r1, #3
    da0a:	f022 0203 	bic.w	r2, r2, #3
    da0e:	430a      	orrs	r2, r1
    da10:	7002      	strb	r2, [r0, #0]
    da12:	4770      	bx	lr

0000da14 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    da14:	7101      	strb	r1, [r0, #4]
    da16:	0a09      	lsrs	r1, r1, #8
    da18:	7141      	strb	r1, [r0, #5]
    da1a:	4770      	bx	lr

0000da1c <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    da1c:	7181      	strb	r1, [r0, #6]
    da1e:	0a09      	lsrs	r1, r1, #8
    da20:	71c1      	strb	r1, [r0, #7]
    da22:	4770      	bx	lr

0000da24 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    da24:	7201      	strb	r1, [r0, #8]
    da26:	0a09      	lsrs	r1, r1, #8
    da28:	7241      	strb	r1, [r0, #9]
    da2a:	4770      	bx	lr

0000da2c <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    da2c:	7281      	strb	r1, [r0, #10]
    da2e:	0a09      	lsrs	r1, r1, #8
    da30:	72c1      	strb	r1, [r0, #11]
    da32:	4770      	bx	lr

0000da34 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    da34:	b570      	push	{r4, r5, r6, lr}
    da36:	7802      	ldrb	r2, [r0, #0]
    da38:	f002 020f 	and.w	r2, r2, #15
    da3c:	2a03      	cmp	r2, #3
    da3e:	d02c      	beq.n	da9a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    da40:	2a05      	cmp	r2, #5
    da42:	d12d      	bne.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da44:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    da48:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    da4c:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    da50:	7d83      	ldrb	r3, [r0, #22]
    da52:	b141      	cbz	r1, da66 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    da54:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    da58:	d905      	bls.n	da66 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    da5a:	f640 5107 	movw	r1, #3335	; 0xd07
    da5e:	428a      	cmp	r2, r1
    da60:	d801      	bhi.n	da66 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    da62:	2101      	movs	r1, #1
    da64:	e000      	b.n	da68 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    da66:	2100      	movs	r1, #0
    da68:	7846      	ldrb	r6, [r0, #1]
    da6a:	2e22      	cmp	r6, #34	; 0x22
    da6c:	d118      	bne.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da6e:	b959      	cbnz	r1, da88 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    da70:	1f91      	subs	r1, r2, #6
    da72:	f640 467a 	movw	r6, #3194	; 0xc7a
    da76:	42b1      	cmp	r1, r6
    da78:	d812      	bhi.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da7a:	b18b      	cbz	r3, daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da7c:	2b08      	cmp	r3, #8
    da7e:	d80f      	bhi.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da80:	4293      	cmp	r3, r2
    da82:	d20d      	bcs.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da84:	4294      	cmp	r4, r2
    da86:	d80b      	bhi.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da88:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    da8c:	d208      	bcs.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da8e:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    da92:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    da96:	d905      	bls.n	daa4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    da98:	e002      	b.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da9a:	7840      	ldrb	r0, [r0, #1]
    da9c:	280c      	cmp	r0, #12
    da9e:	d001      	beq.n	daa4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    daa0:	2000      	movs	r0, #0
    daa2:	bd70      	pop	{r4, r5, r6, pc}
    daa4:	2001      	movs	r0, #1
    daa6:	bd70      	pop	{r4, r5, r6, pc}

0000daa8 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    daa8:	b570      	push	{r4, r5, r6, lr}
    daaa:	4614      	mov	r4, r2
    daac:	4605      	mov	r5, r0
    daae:	2a1f      	cmp	r2, #31
    dab0:	d903      	bls.n	daba <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    dab2:	21b2      	movs	r1, #178	; 0xb2
    dab4:	202a      	movs	r0, #42	; 0x2a
    dab6:	f7f6 f953 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daba:	f105 0009 	add.w	r0, r5, #9
    dabe:	f7fe fb52 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dac2:	1da4      	adds	r4, r4, #6
    dac4:	706c      	strb	r4, [r5, #1]
    dac6:	bd70      	pop	{r4, r5, r6, pc}

0000dac8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    dac8:	b510      	push	{r4, lr}
    daca:	7802      	ldrb	r2, [r0, #0]
    dacc:	f001 030f 	and.w	r3, r1, #15
    dad0:	f022 020f 	bic.w	r2, r2, #15
    dad4:	431a      	orrs	r2, r3
    dad6:	7002      	strb	r2, [r0, #0]
    dad8:	2907      	cmp	r1, #7
    dada:	d20c      	bcs.n	daf6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    dadc:	e8df f001 	tbb	[pc, r1]
    dae0:	06040604 	.word	0x06040604
    dae4:	00040804 	.word	0x00040804
    dae8:	2106      	movs	r1, #6
    daea:	e002      	b.n	daf2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    daec:	210c      	movs	r1, #12
    daee:	e000      	b.n	daf2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    daf0:	2122      	movs	r1, #34	; 0x22
    daf2:	7041      	strb	r1, [r0, #1]
    daf4:	bd10      	pop	{r4, pc}
    daf6:	216e      	movs	r1, #110	; 0x6e
    daf8:	202a      	movs	r0, #42	; 0x2a
    dafa:	f7f6 f931 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dafe <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    dafe:	680a      	ldr	r2, [r1, #0]
    db00:	f840 2f09 	str.w	r2, [r0, #9]!
    db04:	8889      	ldrh	r1, [r1, #4]
    db06:	8081      	strh	r1, [r0, #4]
    db08:	4770      	bx	lr

0000db0a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    db0a:	7802      	ldrb	r2, [r0, #0]
    db0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    db10:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    db14:	7002      	strb	r2, [r0, #0]
    db16:	4770      	bx	lr

0000db18 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    db18:	680a      	ldr	r2, [r1, #0]
    db1a:	f840 2f03 	str.w	r2, [r0, #3]!
    db1e:	8889      	ldrh	r1, [r1, #4]
    db20:	8081      	strh	r1, [r0, #4]
    db22:	4770      	bx	lr

0000db24 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    db24:	7802      	ldrb	r2, [r0, #0]
    db26:	2340      	movs	r3, #64	; 0x40
    db28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    db2c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    db30:	430a      	orrs	r2, r1
    db32:	7002      	strb	r2, [r0, #0]
    db34:	4770      	bx	lr

0000db36 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    db36:	b570      	push	{r4, r5, r6, lr}
    db38:	4614      	mov	r4, r2
    db3a:	4605      	mov	r5, r0
    db3c:	2a1f      	cmp	r2, #31
    db3e:	d903      	bls.n	db48 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    db40:	21d4      	movs	r1, #212	; 0xd4
    db42:	202a      	movs	r0, #42	; 0x2a
    db44:	f7f6 f90c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db48:	f105 0009 	add.w	r0, r5, #9
    db4c:	f7fe fb0b 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db50:	1da4      	adds	r4, r4, #6
    db52:	706c      	strb	r4, [r5, #1]
    db54:	bd70      	pop	{r4, r5, r6, pc}

0000db56 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    db56:	2101      	movs	r1, #1
    db58:	f000 b853 	b.w	dc02 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000db5c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    db5c:	6841      	ldr	r1, [r0, #4]
    db5e:	2200      	movs	r2, #0
    db60:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    db64:	2b00      	cmp	r3, #0
    db66:	d004      	beq.n	db72 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    db68:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    db6c:	6840      	ldr	r0, [r0, #4]
    db6e:	f000 bc63 	b.w	e438 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    db72:	4770      	bx	lr
    db74:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    db78:	460e      	mov	r6, r1
    db7a:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    db7e:	4617      	mov	r7, r2
    db80:	39ff      	subs	r1, #255	; 0xff
    db82:	d014      	beq.n	dbae <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    db84:	8030      	strh	r0, [r6, #0]
    db86:	2100      	movs	r1, #0
    db88:	7171      	strb	r1, [r6, #5]
    db8a:	f7f6 fcf9 	bl	4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    db8e:	4604      	mov	r4, r0
    db90:	f7ff f91e 	bl	cdd0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    db94:	0005      	movs	r5, r0
    db96:	d00a      	beq.n	dbae <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    db98:	4620      	mov	r0, r4
    db9a:	4629      	mov	r1, r5
    db9c:	aa01      	add	r2, sp, #4
    db9e:	f7ff f93a 	bl	ce16 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    dba2:	8070      	strh	r0, [r6, #2]
    dba4:	b130      	cbz	r0, dbb4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    dba6:	28fb      	cmp	r0, #251	; 0xfb
    dba8:	d906      	bls.n	dbb8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    dbaa:	21c9      	movs	r1, #201	; 0xc9
    dbac:	e026      	b.n	dbfc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dbae:	2000      	movs	r0, #0
    dbb0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dbb4:	21c8      	movs	r1, #200	; 0xc8
    dbb6:	e021      	b.n	dbfc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dbb8:	9801      	ldr	r0, [sp, #4]
    dbba:	f7ff febf 	bl	d93c <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    dbbe:	2801      	cmp	r0, #1
    dbc0:	d003      	beq.n	dbca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    dbc2:	2802      	cmp	r0, #2
    dbc4:	d001      	beq.n	dbca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    dbc6:	21d8      	movs	r1, #216	; 0xd8
    dbc8:	e018      	b.n	dbfc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dbca:	7130      	strb	r0, [r6, #4]
    dbcc:	4629      	mov	r1, r5
    dbce:	8873      	ldrh	r3, [r6, #2]
    dbd0:	2503      	movs	r5, #3
    dbd2:	4620      	mov	r0, r4
    dbd4:	463a      	mov	r2, r7
    dbd6:	9500      	str	r5, [sp, #0]
    dbd8:	f7fe ffef 	bl	cbba <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    dbdc:	4620      	mov	r0, r4
    dbde:	60b7      	str	r7, [r6, #8]
    dbe0:	f7ff f8a5 	bl	cd2e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    dbe4:	b138      	cbz	r0, dbf6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    dbe6:	2100      	movs	r1, #0
    dbe8:	4620      	mov	r0, r4
    dbea:	460a      	mov	r2, r1
    dbec:	f7ff f9e9 	bl	cfc2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    dbf0:	b118      	cbz	r0, dbfa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    dbf2:	2001      	movs	r0, #1
    dbf4:	e7dc      	b.n	dbb0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    dbf6:	21e8      	movs	r1, #232	; 0xe8
    dbf8:	e000      	b.n	dbfc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dbfa:	21ed      	movs	r1, #237	; 0xed
    dbfc:	202b      	movs	r0, #43	; 0x2b
    dbfe:	f7f6 f8af 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc02:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dc06:	4604      	mov	r4, r0
    dc08:	460e      	mov	r6, r1
    dc0a:	2000      	movs	r0, #0
    dc0c:	f7f6 fa8a 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dc10:	4605      	mov	r5, r0
    dc12:	2000      	movs	r0, #0
    dc14:	b916      	cbnz	r6, dc1c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    dc16:	2001      	movs	r0, #1
    dc18:	f7f6 fa84 	bl	4124 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dc1c:	2600      	movs	r6, #0
    dc1e:	46b0      	mov	r8, r6
    dc20:	182f      	adds	r7, r5, r0
    dc22:	e017      	b.n	dc54 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    dc24:	8820      	ldrh	r0, [r4, #0]
    dc26:	1c40      	adds	r0, r0, #1
    dc28:	b280      	uxth	r0, r0
    dc2a:	8020      	strh	r0, [r4, #0]
    dc2c:	42b8      	cmp	r0, r7
    dc2e:	d302      	bcc.n	dc36 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    dc30:	4640      	mov	r0, r8
    dc32:	f8a4 8000 	strh.w	r8, [r4]
    dc36:	b280      	uxth	r0, r0
    dc38:	42a8      	cmp	r0, r5
    dc3a:	d304      	bcc.n	dc46 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    dc3c:	42b8      	cmp	r0, r7
    dc3e:	d202      	bcs.n	dc46 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    dc40:	2000      	movs	r0, #0
    dc42:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dc46:	4669      	mov	r1, sp
    dc48:	f7ff fbd7 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    dc4c:	2800      	cmp	r0, #0
    dc4e:	d0f8      	beq.n	dc42 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    dc50:	1c76      	adds	r6, r6, #1
    dc52:	b2f6      	uxtb	r6, r6
    dc54:	42b7      	cmp	r7, r6
    dc56:	d8e5      	bhi.n	dc24 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    dc58:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dc5c:	8020      	strh	r0, [r4, #0]
    dc5e:	2012      	movs	r0, #18
    dc60:	e7ef      	b.n	dc42 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000dc62 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    dc62:	b570      	push	{r4, r5, r6, lr}
    dc64:	8050      	strh	r0, [r2, #2]
    dc66:	890c      	ldrh	r4, [r1, #8]
    dc68:	8094      	strh	r4, [r2, #4]
    dc6a:	898b      	ldrh	r3, [r1, #12]
    dc6c:	80d3      	strh	r3, [r2, #6]
    dc6e:	8948      	ldrh	r0, [r1, #10]
    dc70:	8110      	strh	r0, [r2, #8]
    dc72:	89cd      	ldrh	r5, [r1, #14]
    dc74:	8155      	strh	r5, [r2, #10]
    dc76:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    dc78:	42ae      	cmp	r6, r5
    dc7a:	d108      	bne.n	dc8e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc7c:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    dc7e:	4285      	cmp	r5, r0
    dc80:	d105      	bne.n	dc8e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc82:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    dc84:	429d      	cmp	r5, r3
    dc86:	d102      	bne.n	dc8e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc88:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    dc8a:	42a3      	cmp	r3, r4
    dc8c:	d001      	beq.n	dc92 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    dc8e:	2301      	movs	r3, #1
    dc90:	e000      	b.n	dc94 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    dc92:	2300      	movs	r3, #0
    dc94:	7313      	strb	r3, [r2, #12]
    dc96:	8548      	strh	r0, [r1, #42]	; 0x2a
    dc98:	8950      	ldrh	r0, [r2, #10]
    dc9a:	85c8      	strh	r0, [r1, #46]	; 0x2e
    dc9c:	8890      	ldrh	r0, [r2, #4]
    dc9e:	8588      	strh	r0, [r1, #44]	; 0x2c
    dca0:	88d0      	ldrh	r0, [r2, #6]
    dca2:	8608      	strh	r0, [r1, #48]	; 0x30
    dca4:	2001      	movs	r0, #1
    dca6:	7010      	strb	r0, [r2, #0]
    dca8:	bd70      	pop	{r4, r5, r6, pc}

0000dcaa <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    dcaa:	b510      	push	{r4, lr}
    dcac:	888c      	ldrh	r4, [r1, #4]
    dcae:	890a      	ldrh	r2, [r1, #8]
    dcb0:	884b      	ldrh	r3, [r1, #2]
    dcb2:	88c9      	ldrh	r1, [r1, #6]
    dcb4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    dcb8:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    dcbc:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
    dcc0:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    dcc4:	bd10      	pop	{r4, pc}

0000dcc6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    dcc6:	b570      	push	{r4, r5, r6, lr}
    dcc8:	4615      	mov	r5, r2
    dcca:	460c      	mov	r4, r1
    dccc:	f000 f8c3 	bl	de56 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dcd0:	3096      	adds	r0, #150	; 0x96
    dcd2:	4428      	add	r0, r5
    dcd4:	42a0      	cmp	r0, r4
    dcd6:	d801      	bhi.n	dcdc <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    dcd8:	1a20      	subs	r0, r4, r0
    dcda:	bd70      	pop	{r4, r5, r6, pc}
    dcdc:	2000      	movs	r0, #0
    dcde:	bd70      	pop	{r4, r5, r6, pc}

0000dce0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    dce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dce4:	4604      	mov	r4, r0
    dce6:	8e47      	ldrh	r7, [r0, #50]	; 0x32
    dce8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
    dcea:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
    dcee:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    dcf0:	4285      	cmp	r5, r0
    dcf2:	d300      	bcc.n	dcf6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    dcf4:	4605      	mov	r5, r0
    dcf6:	4620      	mov	r0, r4
    dcf8:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    dcfc:	f000 f89b 	bl	de36 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dd00:	4601      	mov	r1, r0
    dd02:	8665      	strh	r5, [r4, #50]	; 0x32
    dd04:	86e1      	strh	r1, [r4, #54]	; 0x36
    dd06:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    dd08:	f104 0028 	add.w	r0, r4, #40	; 0x28
    dd0c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    dd0e:	4680      	mov	r8, r0
    dd10:	42aa      	cmp	r2, r5
    dd12:	d200      	bcs.n	dd16 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    dd14:	462a      	mov	r2, r5
    dd16:	428b      	cmp	r3, r1
    dd18:	d200      	bcs.n	dd1c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    dd1a:	460b      	mov	r3, r1
    dd1c:	8202      	strh	r2, [r0, #16]
    dd1e:	f8a8 3012 	strh.w	r3, [r8, #18]
    dd22:	42bd      	cmp	r5, r7
    dd24:	d101      	bne.n	dd2a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    dd26:	42b1      	cmp	r1, r6
    dd28:	d001      	beq.n	dd2e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    dd2a:	2001      	movs	r0, #1
    dd2c:	e000      	b.n	dd30 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    dd2e:	2000      	movs	r0, #0
    dd30:	4681      	mov	r9, r0
    dd32:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
    dd36:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    dd38:	8e27      	ldrh	r7, [r4, #48]	; 0x30
    dd3a:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    dd3c:	4285      	cmp	r5, r0
    dd3e:	d300      	bcc.n	dd42 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    dd40:	4605      	mov	r5, r0
    dd42:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    dd46:	4620      	mov	r0, r4
    dd48:	f000 f87d 	bl	de46 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    dd4c:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    dd50:	2902      	cmp	r1, #2
    dd52:	d108      	bne.n	dd66 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    dd54:	42af      	cmp	r7, r5
    dd56:	d200      	bcs.n	dd5a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    dd58:	463d      	mov	r5, r7
    dd5a:	4286      	cmp	r6, r0
    dd5c:	d200      	bcs.n	dd60 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    dd5e:	4630      	mov	r0, r6
    dd60:	2100      	movs	r1, #0
    dd62:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    dd66:	f8a8 5008 	strh.w	r5, [r8, #8]
    dd6a:	f8a8 000c 	strh.w	r0, [r8, #12]
    dd6e:	42bd      	cmp	r5, r7
    dd70:	d101      	bne.n	dd76 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    dd72:	42b0      	cmp	r0, r6
    dd74:	d001      	beq.n	dd7a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    dd76:	2001      	movs	r0, #1
    dd78:	e000      	b.n	dd7c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    dd7a:	2000      	movs	r0, #0
    dd7c:	ea40 0009 	orr.w	r0, r0, r9
    dd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dd84 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    dd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd88:	4616      	mov	r6, r2
    dd8a:	460f      	mov	r7, r1
    dd8c:	4604      	mov	r4, r0
    dd8e:	f000 f862 	bl	de56 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dd92:	4605      	mov	r5, r0
    dd94:	463a      	mov	r2, r7
    dd96:	6861      	ldr	r1, [r4, #4]
    dd98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dd9a:	f000 f847 	bl	de2c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    dd9e:	19a9      	adds	r1, r5, r6
    dda0:	4281      	cmp	r1, r0
    dda2:	d300      	bcc.n	dda6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    dda4:	4608      	mov	r0, r1
    dda6:	62e0      	str	r0, [r4, #44]	; 0x2c
    dda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ddac <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    ddac:	221b      	movs	r2, #27
    ddae:	8402      	strh	r2, [r0, #32]
    ddb0:	8382      	strh	r2, [r0, #28]
    ddb2:	82c2      	strh	r2, [r0, #22]
    ddb4:	8282      	strh	r2, [r0, #20]
    ddb6:	8142      	strh	r2, [r0, #10]
    ddb8:	8202      	strh	r2, [r0, #16]
    ddba:	8102      	strh	r2, [r0, #8]
    ddbc:	8542      	strh	r2, [r0, #42]	; 0x2a
    ddbe:	8582      	strh	r2, [r0, #44]	; 0x2c
    ddc0:	8482      	strh	r2, [r0, #36]	; 0x24
    ddc2:	2900      	cmp	r1, #0
    ddc4:	d10a      	bne.n	dddc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    ddc6:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ddca:	8441      	strh	r1, [r0, #34]	; 0x22
    ddcc:	83c1      	strh	r1, [r0, #30]
    ddce:	8341      	strh	r1, [r0, #26]
    ddd0:	8301      	strh	r1, [r0, #24]
    ddd2:	81c1      	strh	r1, [r0, #14]
    ddd4:	8241      	strh	r1, [r0, #18]
    ddd6:	8181      	strh	r1, [r0, #12]
    ddd8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    ddda:	8601      	strh	r1, [r0, #48]	; 0x30
    dddc:	4770      	bx	lr

0000ddde <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    ddde:	6800      	ldr	r0, [r0, #0]
    dde0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    dde4:	4290      	cmp	r0, r2
    dde6:	d903      	bls.n	ddf0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    dde8:	1a40      	subs	r0, r0, r1
    ddea:	389c      	subs	r0, #156	; 0x9c
    ddec:	0840      	lsrs	r0, r0, #1
    ddee:	4770      	bx	lr
    ddf0:	2000      	movs	r0, #0
    ddf2:	4770      	bx	lr

0000ddf4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    ddf4:	b510      	push	{r4, lr}
    ddf6:	9c02      	ldr	r4, [sp, #8]
    ddf8:	8281      	strh	r1, [r0, #20]
    ddfa:	82c2      	strh	r2, [r0, #22]
    ddfc:	8303      	strh	r3, [r0, #24]
    ddfe:	8344      	strh	r4, [r0, #26]
    de00:	bd10      	pop	{r4, pc}

0000de02 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    de02:	8050      	strh	r0, [r2, #2]
    de04:	8a88      	ldrh	r0, [r1, #20]
    de06:	8090      	strh	r0, [r2, #4]
    de08:	8ac8      	ldrh	r0, [r1, #22]
    de0a:	80d0      	strh	r0, [r2, #6]
    de0c:	8b08      	ldrh	r0, [r1, #24]
    de0e:	8110      	strh	r0, [r2, #8]
    de10:	8b48      	ldrh	r0, [r1, #26]
    de12:	8150      	strh	r0, [r2, #10]
    de14:	2001      	movs	r0, #1
    de16:	7010      	strb	r0, [r2, #0]
    de18:	4770      	bx	lr
    de1a:	2902      	cmp	r1, #2
    de1c:	d003      	beq.n	de26 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    de1e:	00c0      	lsls	r0, r0, #3
    de20:	3070      	adds	r0, #112	; 0x70
    de22:	b280      	uxth	r0, r0
    de24:	4770      	bx	lr
    de26:	0080      	lsls	r0, r0, #2
    de28:	303c      	adds	r0, #60	; 0x3c
    de2a:	e7fa      	b.n	de22 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    de2c:	4288      	cmp	r0, r1
    de2e:	d300      	bcc.n	de32 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    de30:	4608      	mov	r0, r1
    de32:	1a80      	subs	r0, r0, r2
    de34:	4770      	bx	lr
    de36:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    de3a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    de3e:	4281      	cmp	r1, r0
    de40:	d200      	bcs.n	de44 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    de42:	4608      	mov	r0, r1
    de44:	4770      	bx	lr
    de46:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    de4a:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
    de4e:	4281      	cmp	r1, r0
    de50:	d200      	bcs.n	de54 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    de52:	4608      	mov	r0, r1
    de54:	4770      	bx	lr
    de56:	2196      	movs	r1, #150	; 0x96
    de58:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    de5c:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    de60:	f000 b800 	b.w	de64 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    de64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de68:	460d      	mov	r5, r1
    de6a:	4606      	mov	r6, r0
    de6c:	4698      	mov	r8, r3
    de6e:	4617      	mov	r7, r2
    de70:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    de72:	4611      	mov	r1, r2
    de74:	f7ff ffd1 	bl	de1a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    de78:	4604      	mov	r4, r0
    de7a:	4639      	mov	r1, r7
    de7c:	4630      	mov	r0, r6
    de7e:	f7ff ffe2 	bl	de46 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    de82:	42a0      	cmp	r0, r4
    de84:	d200      	bcs.n	de88 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    de86:	4604      	mov	r4, r0
    de88:	8f30      	ldrh	r0, [r6, #56]	; 0x38
    de8a:	4641      	mov	r1, r8
    de8c:	f7ff ffc5 	bl	de1a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    de90:	4607      	mov	r7, r0
    de92:	4641      	mov	r1, r8
    de94:	4630      	mov	r0, r6
    de96:	f7ff ffce 	bl	de36 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    de9a:	42b8      	cmp	r0, r7
    de9c:	d300      	bcc.n	dea0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    de9e:	4638      	mov	r0, r7
    dea0:	4420      	add	r0, r4
    dea2:	4428      	add	r0, r5
    dea4:	1d80      	adds	r0, r0, #6
    dea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    deaa:	2801      	cmp	r0, #1
    deac:	d102      	bne.n	deb4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    deae:	7948      	ldrb	r0, [r1, #5]
    deb0:	0980      	lsrs	r0, r0, #6
    deb2:	d001      	beq.n	deb8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    deb4:	2000      	movs	r0, #0
    deb6:	4770      	bx	lr
    deb8:	2001      	movs	r0, #1
    deba:	4770      	bx	lr
    debc:	2801      	cmp	r0, #1
    debe:	d106      	bne.n	dece <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    dec0:	7948      	ldrb	r0, [r1, #5]
    dec2:	2101      	movs	r1, #1
    dec4:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    dec8:	d101      	bne.n	dece <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    deca:	2001      	movs	r0, #1
    decc:	4770      	bx	lr
    dece:	2000      	movs	r0, #0
    ded0:	4770      	bx	lr
    ded2:	2802      	cmp	r0, #2
    ded4:	d003      	beq.n	dede <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    ded6:	2803      	cmp	r0, #3
    ded8:	d001      	beq.n	dede <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    deda:	2000      	movs	r0, #0
    dedc:	4770      	bx	lr
    dede:	2001      	movs	r0, #1
    dee0:	4770      	bx	lr

0000dee2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    dee2:	b510      	push	{r4, lr}
    dee4:	4604      	mov	r4, r0
    dee6:	7c00      	ldrb	r0, [r0, #16]
    dee8:	f7ff fff3 	bl	ded2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    deec:	b148      	cbz	r0, df02 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    deee:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    def2:	f104 0148 	add.w	r1, r4, #72	; 0x48
    def6:	f7ff fa3d 	bl	d374 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    defa:	2808      	cmp	r0, #8
    defc:	d001      	beq.n	df02 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    defe:	2001      	movs	r0, #1
    df00:	bd10      	pop	{r4, pc}
    df02:	7c20      	ldrb	r0, [r4, #16]
    df04:	b118      	cbz	r0, df0e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    df06:	2802      	cmp	r0, #2
    df08:	d001      	beq.n	df0e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    df0a:	7de0      	ldrb	r0, [r4, #23]
    df0c:	bd10      	pop	{r4, pc}
    df0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df12:	2000      	movs	r0, #0
    df14:	f7f6 bdbe 	b.w	4a94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000df18 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>:
    df18:	4770      	bx	lr

0000df1a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    df1a:	b508      	push	{r3, lr}
    df1c:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    df20:	f88d 1000 	strb.w	r1, [sp]
    df24:	9900      	ldr	r1, [sp, #0]
    df26:	9100      	str	r1, [sp, #0]
    df28:	f89d 1000 	ldrb.w	r1, [sp]
    df2c:	b109      	cbz	r1, df32 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    df2e:	2001      	movs	r0, #1
    df30:	bd08      	pop	{r3, pc}
    df32:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    df36:	f88d 0000 	strb.w	r0, [sp]
    df3a:	9800      	ldr	r0, [sp, #0]
    df3c:	9000      	str	r0, [sp, #0]
    df3e:	f89d 0000 	ldrb.w	r0, [sp]
    df42:	2000      	movs	r0, #0
    df44:	bd08      	pop	{r3, pc}

0000df46 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    df46:	20ff      	movs	r0, #255	; 0xff
    df48:	7008      	strb	r0, [r1, #0]
    df4a:	4770      	bx	lr

0000df4c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    df4c:	b510      	push	{r4, lr}
    df4e:	4604      	mov	r4, r0
    df50:	22dc      	movs	r2, #220	; 0xdc
    df52:	2100      	movs	r1, #0
    df54:	f7fe f981 	bl	c25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df58:	20ff      	movs	r0, #255	; 0xff
    df5a:	7020      	strb	r0, [r4, #0]
    df5c:	207f      	movs	r0, #127	; 0x7f
    df5e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    df62:	2013      	movs	r0, #19
    df64:	8060      	strh	r0, [r4, #2]
    df66:	2001      	movs	r0, #1
    df68:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    df6c:	2000      	movs	r0, #0
    df6e:	73a0      	strb	r0, [r4, #14]
    df70:	f104 0020 	add.w	r0, r4, #32
    df74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df78:	f000 b967 	b.w	e24a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000df7c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    df7c:	7880      	ldrb	r0, [r0, #2]
    df7e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    df82:	b108      	cbz	r0, df88 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    df84:	2000      	movs	r0, #0
    df86:	4770      	bx	lr
    df88:	201f      	movs	r0, #31
    df8a:	4770      	bx	lr

0000df8c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    df8c:	f7f8 be10 	b.w	6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>

0000df90 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    df90:	6880      	ldr	r0, [r0, #8]
    df92:	4770      	bx	lr

0000df94 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    df94:	2001      	movs	r0, #1
    df96:	4770      	bx	lr

0000df98 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    df98:	b510      	push	{r4, lr}
    df9a:	4604      	mov	r4, r0
    df9c:	3020      	adds	r0, #32
    df9e:	f000 f914 	bl	e1ca <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    dfa2:	8861      	ldrh	r1, [r4, #2]
    dfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfa8:	2228      	movs	r2, #40	; 0x28
    dfaa:	f7f8 bfbd 	b.w	6f28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000dfae <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    dfae:	2200      	movs	r2, #0
    dfb0:	6282      	str	r2, [r0, #40]	; 0x28
    dfb2:	8843      	ldrh	r3, [r0, #2]
    dfb4:	2b1d      	cmp	r3, #29
    dfb6:	d001      	beq.n	dfbc <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    dfb8:	7341      	strb	r1, [r0, #13]
    dfba:	4770      	bx	lr
    dfbc:	7342      	strb	r2, [r0, #13]
    dfbe:	4770      	bx	lr

0000dfc0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    dfc0:	2001      	movs	r0, #1
    dfc2:	4770      	bx	lr

0000dfc4 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    dfc4:	2000      	movs	r0, #0
    dfc6:	4770      	bx	lr

0000dfc8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    dfc8:	7880      	ldrb	r0, [r0, #2]
    dfca:	f000 0001 	and.w	r0, r0, #1
    dfce:	4770      	bx	lr

0000dfd0 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    dfd0:	7880      	ldrb	r0, [r0, #2]
    dfd2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dfd6:	4770      	bx	lr

0000dfd8 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    dfd8:	2001      	movs	r0, #1
    dfda:	4770      	bx	lr

0000dfdc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    dfdc:	7880      	ldrb	r0, [r0, #2]
    dfde:	f3c0 0040 	ubfx	r0, r0, #1, #1
    dfe2:	4770      	bx	lr

0000dfe4 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    dfe4:	f990 000e 	ldrsb.w	r0, [r0, #14]
    dfe8:	4770      	bx	lr

0000dfea <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    dfea:	7800      	ldrb	r0, [r0, #0]
    dfec:	28ff      	cmp	r0, #255	; 0xff
    dfee:	d001      	beq.n	dff4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    dff0:	2001      	movs	r0, #1
    dff2:	4770      	bx	lr
    dff4:	2000      	movs	r0, #0
    dff6:	4770      	bx	lr

0000dff8 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    dff8:	680a      	ldr	r2, [r1, #0]
    dffa:	f840 2f11 	str.w	r2, [r0, #17]!
    dffe:	8889      	ldrh	r1, [r1, #4]
    e000:	8081      	strh	r1, [r0, #4]
    e002:	2101      	movs	r1, #1
    e004:	7181      	strb	r1, [r0, #6]
    e006:	4770      	bx	lr

0000e008 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e008:	7b00      	ldrb	r0, [r0, #12]
    e00a:	4770      	bx	lr

0000e00c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e00c:	2001      	movs	r0, #1
    e00e:	4770      	bx	lr

0000e010 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e010:	61c1      	str	r1, [r0, #28]
    e012:	4770      	bx	lr

0000e014 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    e014:	2300      	movs	r3, #0
    e016:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    e01a:	f8a0 1066 	strh.w	r1, [r0, #102]	; 0x66
    e01e:	f840 2f5c 	str.w	r2, [r0, #92]!
    e022:	2101      	movs	r1, #1
    e024:	7201      	strb	r1, [r0, #8]
    e026:	4770      	bx	lr

0000e028 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    e028:	2300      	movs	r3, #0
    e02a:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    e02e:	f840 2f60 	str.w	r2, [r0, #96]!
    e032:	8101      	strh	r1, [r0, #8]
    e034:	2101      	movs	r1, #1
    e036:	7141      	strb	r1, [r0, #5]
    e038:	4770      	bx	lr

0000e03a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e03a:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
    e03e:	4770      	bx	lr

0000e040 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e040:	b570      	push	{r4, r5, r6, lr}
    e042:	4604      	mov	r4, r0
    e044:	7880      	ldrb	r0, [r0, #2]
    e046:	2501      	movs	r5, #1
    e048:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e04c:	b138      	cbz	r0, e05e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e04e:	233c      	movs	r3, #60	; 0x3c
    e050:	22ff      	movs	r2, #255	; 0xff
    e052:	4620      	mov	r0, r4
    e054:	69e1      	ldr	r1, [r4, #28]
    e056:	f7f8 fdd1 	bl	6bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    e05a:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
    e05e:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
    e062:	bd70      	pop	{r4, r5, r6, pc}

0000e064 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e064:	7bc0      	ldrb	r0, [r0, #15]
    e066:	2800      	cmp	r0, #0
    e068:	d000      	beq.n	e06c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e06a:	2001      	movs	r0, #1
    e06c:	4770      	bx	lr
    e06e:	b510      	push	{r4, lr}
    e070:	f7ff f980 	bl	d374 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e074:	4604      	mov	r4, r0
    e076:	f7f7 fb89 	bl	578c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e07a:	b138      	cbz	r0, e08c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e07c:	4620      	mov	r0, r4
    e07e:	f7f7 fabd 	bl	55fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e082:	b118      	cbz	r0, e08c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e084:	2110      	movs	r1, #16
    e086:	f7ff fb67 	bl	d758 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e08a:	b108      	cbz	r0, e090 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e08c:	2000      	movs	r0, #0
    e08e:	bd10      	pop	{r4, pc}
    e090:	2001      	movs	r0, #1
    e092:	bd10      	pop	{r4, pc}
    e094:	2101      	movs	r1, #1
    e096:	f7f8 ba33 	b.w	6500 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e09a:	2101      	movs	r1, #1
    e09c:	f7f8 ba30 	b.w	6500 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0a4:	4604      	mov	r4, r0
    e0a6:	2700      	movs	r7, #0
    e0a8:	704f      	strb	r7, [r1, #1]
    e0aa:	2011      	movs	r0, #17
    e0ac:	460d      	mov	r5, r1
    e0ae:	7008      	strb	r0, [r1, #0]
    e0b0:	2220      	movs	r2, #32
    e0b2:	f104 016e 	add.w	r1, r4, #110	; 0x6e
    e0b6:	1d28      	adds	r0, r5, #4
    e0b8:	f7fe f855 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e0bc:	2601      	movs	r6, #1
    e0be:	722e      	strb	r6, [r5, #8]
    e0c0:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    e0c4:	7928      	ldrb	r0, [r5, #4]
    e0c6:	2800      	cmp	r0, #0
    e0c8:	d110      	bne.n	e0ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    e0ca:	88e8      	ldrh	r0, [r5, #6]
    e0cc:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    e0d0:	69e0      	ldr	r0, [r4, #28]
    e0d2:	7c41      	ldrb	r1, [r0, #17]
    e0d4:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    e0d8:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
    e0dc:	8800      	ldrh	r0, [r0, #0]
    e0de:	f7f6 fa4f 	bl	4580 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e0e2:	f7fe ff22 	bl	cf2a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e0e6:	69e0      	ldr	r0, [r4, #28]
    e0e8:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    e0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0f4:	4604      	mov	r4, r0
    e0f6:	460f      	mov	r7, r1
    e0f8:	7e40      	ldrb	r0, [r0, #25]
    e0fa:	f7f7 fa3f 	bl	557c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e0fe:	4606      	mov	r6, r0
    e100:	7e20      	ldrb	r0, [r4, #24]
    e102:	f104 0541 	add.w	r5, r4, #65	; 0x41
    e106:	b120      	cbz	r0, e112 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    e108:	b11e      	cbz	r6, e112 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    e10a:	7e60      	ldrb	r0, [r4, #25]
    e10c:	f7f7 fa2a 	bl	5564 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e110:	b1a0      	cbz	r0, e13c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xd8>
    e112:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    e116:	2800      	cmp	r0, #0
    e118:	d024      	beq.n	e164 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x100>
    e11a:	7ea0      	ldrb	r0, [r4, #26]
    e11c:	2800      	cmp	r0, #0
    e11e:	d021      	beq.n	e164 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x100>
    e120:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    e124:	4629      	mov	r1, r5
    e126:	f7ff fec9 	bl	debc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    e12a:	b1a8      	cbz	r0, e158 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf4>
    e12c:	f7f7 fa16 	bl	555c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e130:	463a      	mov	r2, r7
    e132:	4629      	mov	r1, r5
    e134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e138:	f7ff b8a1 	b.w	d27e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e13c:	2001      	movs	r0, #1
    e13e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    e142:	463a      	mov	r2, r7
    e144:	4629      	mov	r1, r5
    e146:	4630      	mov	r0, r6
    e148:	f7ff f899 	bl	d27e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e14c:	7e61      	ldrb	r1, [r4, #25]
    e14e:	4628      	mov	r0, r5
    e150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e154:	f7f7 ba1e 	b.w	5594 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e158:	4639      	mov	r1, r7
    e15a:	4628      	mov	r0, r5
    e15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e160:	f7ff b87c 	b.w	d25c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e168:	b510      	push	{r4, lr}
    e16a:	4604      	mov	r4, r0
    e16c:	4608      	mov	r0, r1
    e16e:	f7fd f8c7 	bl	b300 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e172:	7921      	ldrb	r1, [r4, #4]
    e174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e178:	2025      	movs	r0, #37	; 0x25
    e17a:	f001 bace 	b.w	f71a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e17e:	b510      	push	{r4, lr}
    e180:	4604      	mov	r4, r0
    e182:	3026      	adds	r0, #38	; 0x26
    e184:	f7fd f86e 	bl	b264 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e188:	2800      	cmp	r0, #0
    e18a:	d102      	bne.n	e192 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    e18c:	207f      	movs	r0, #127	; 0x7f
    e18e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e192:	bd10      	pop	{r4, pc}
    e194:	7802      	ldrb	r2, [r0, #0]
    e196:	2320      	movs	r3, #32
    e198:	f022 0220 	bic.w	r2, r2, #32
    e19c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e1a0:	430a      	orrs	r2, r1
    e1a2:	7002      	strb	r2, [r0, #0]
    e1a4:	4770      	bx	lr

0000e1a6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e1a6:	b570      	push	{r4, r5, r6, lr}
    e1a8:	7001      	strb	r1, [r0, #0]
    e1aa:	7042      	strb	r2, [r0, #1]
    e1ac:	4614      	mov	r4, r2
    e1ae:	460d      	mov	r5, r1
    e1b0:	7880      	ldrb	r0, [r0, #2]
    e1b2:	f000 f87f 	bl	e2b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e1b6:	fb10 f005 	smulbb	r0, r0, r5
    e1ba:	4360      	muls	r0, r4
    e1bc:	28ff      	cmp	r0, #255	; 0xff
    e1be:	d303      	bcc.n	e1c8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e1c0:	215c      	movs	r1, #92	; 0x5c
    e1c2:	202e      	movs	r0, #46	; 0x2e
    e1c4:	f7f5 fdcc 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1c8:	bd70      	pop	{r4, r5, r6, pc}

0000e1ca <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e1ca:	b510      	push	{r4, lr}
    e1cc:	4604      	mov	r4, r0
    e1ce:	7880      	ldrb	r0, [r0, #2]
    e1d0:	f000 f870 	bl	e2b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e1d4:	7861      	ldrb	r1, [r4, #1]
    e1d6:	7822      	ldrb	r2, [r4, #0]
    e1d8:	fb11 f102 	smulbb	r1, r1, r2
    e1dc:	4348      	muls	r0, r1
    e1de:	b2c0      	uxtb	r0, r0
    e1e0:	bd10      	pop	{r4, pc}

0000e1e2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e1e2:	b510      	push	{r4, lr}
    e1e4:	4604      	mov	r4, r0
    e1e6:	f000 f84d 	bl	e284 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e1ea:	7961      	ldrb	r1, [r4, #5]
    e1ec:	1c49      	adds	r1, r1, #1
    e1ee:	b2c9      	uxtb	r1, r1
    e1f0:	7161      	strb	r1, [r4, #5]
    e1f2:	7862      	ldrb	r2, [r4, #1]
    e1f4:	4291      	cmp	r1, r2
    e1f6:	d10b      	bne.n	e210 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e1f8:	2200      	movs	r2, #0
    e1fa:	7162      	strb	r2, [r4, #5]
    e1fc:	78e1      	ldrb	r1, [r4, #3]
    e1fe:	4301      	orrs	r1, r0
    e200:	70e1      	strb	r1, [r4, #3]
    e202:	78a3      	ldrb	r3, [r4, #2]
    e204:	4299      	cmp	r1, r3
    e206:	d103      	bne.n	e210 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e208:	70e2      	strb	r2, [r4, #3]
    e20a:	7921      	ldrb	r1, [r4, #4]
    e20c:	1c49      	adds	r1, r1, #1
    e20e:	7121      	strb	r1, [r4, #4]
    e210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e214:	f000 b825 	b.w	e262 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e218 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e218:	7081      	strb	r1, [r0, #2]
    e21a:	4770      	bx	lr

0000e21c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e21c:	b570      	push	{r4, r5, r6, lr}
    e21e:	4604      	mov	r4, r0
    e220:	7880      	ldrb	r0, [r0, #2]
    e222:	f000 f847 	bl	e2b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e226:	7861      	ldrb	r1, [r4, #1]
    e228:	fb11 f500 	smulbb	r5, r1, r0
    e22c:	78e0      	ldrb	r0, [r4, #3]
    e22e:	f000 f841 	bl	e2b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e232:	7861      	ldrb	r1, [r4, #1]
    e234:	7962      	ldrb	r2, [r4, #5]
    e236:	fb10 2001 	smlabb	r0, r0, r1, r2
    e23a:	7821      	ldrb	r1, [r4, #0]
    e23c:	7922      	ldrb	r2, [r4, #4]
    e23e:	1a89      	subs	r1, r1, r2
    e240:	fb11 f105 	smulbb	r1, r1, r5
    e244:	1a08      	subs	r0, r1, r0
    e246:	b2c0      	uxtb	r0, r0
    e248:	bd70      	pop	{r4, r5, r6, pc}

0000e24a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e24a:	2100      	movs	r1, #0
    e24c:	6001      	str	r1, [r0, #0]
    e24e:	8081      	strh	r1, [r0, #4]
    e250:	2101      	movs	r1, #1
    e252:	7041      	strb	r1, [r0, #1]
    e254:	7001      	strb	r1, [r0, #0]
    e256:	4770      	bx	lr

0000e258 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e258:	2100      	movs	r1, #0
    e25a:	70c1      	strb	r1, [r0, #3]
    e25c:	7141      	strb	r1, [r0, #5]
    e25e:	7101      	strb	r1, [r0, #4]
    e260:	4770      	bx	lr
    e262:	b510      	push	{r4, lr}
    e264:	2801      	cmp	r0, #1
    e266:	d007      	beq.n	e278 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e268:	2802      	cmp	r0, #2
    e26a:	d007      	beq.n	e27c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e26c:	2804      	cmp	r0, #4
    e26e:	d007      	beq.n	e280 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e270:	2139      	movs	r1, #57	; 0x39
    e272:	202e      	movs	r0, #46	; 0x2e
    e274:	f7f5 fd74 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e278:	2025      	movs	r0, #37	; 0x25
    e27a:	bd10      	pop	{r4, pc}
    e27c:	2026      	movs	r0, #38	; 0x26
    e27e:	bd10      	pop	{r4, pc}
    e280:	2027      	movs	r0, #39	; 0x27
    e282:	bd10      	pop	{r4, pc}
    e284:	4601      	mov	r1, r0
    e286:	2000      	movs	r0, #0
    e288:	788a      	ldrb	r2, [r1, #2]
    e28a:	07d3      	lsls	r3, r2, #31
    e28c:	d002      	beq.n	e294 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e28e:	78cb      	ldrb	r3, [r1, #3]
    e290:	07db      	lsls	r3, r3, #31
    e292:	d006      	beq.n	e2a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e294:	0793      	lsls	r3, r2, #30
    e296:	d506      	bpl.n	e2a6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e298:	78cb      	ldrb	r3, [r1, #3]
    e29a:	079b      	lsls	r3, r3, #30
    e29c:	d403      	bmi.n	e2a6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e29e:	2002      	movs	r0, #2
    e2a0:	4770      	bx	lr
    e2a2:	2001      	movs	r0, #1
    e2a4:	4770      	bx	lr
    e2a6:	0752      	lsls	r2, r2, #29
    e2a8:	d5fc      	bpl.n	e2a4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e2aa:	78c9      	ldrb	r1, [r1, #3]
    e2ac:	0749      	lsls	r1, r1, #29
    e2ae:	d4f9      	bmi.n	e2a4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e2b0:	2004      	movs	r0, #4
    e2b2:	4770      	bx	lr
    e2b4:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e2b8:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e2bc:	4411      	add	r1, r2
    e2be:	f000 0001 	and.w	r0, r0, #1
    e2c2:	4408      	add	r0, r1
    e2c4:	4770      	bx	lr

0000e2c6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e2c6:	f240 315a 	movw	r1, #858	; 0x35a
    e2ca:	4348      	muls	r0, r1
    e2cc:	4770      	bx	lr
    e2ce:	020e      	.short	0x020e
    e2d0:	0630041c 	.word	0x0630041c
    e2d4:	035a0c60 	.word	0x035a0c60
    e2d8:	05c506b4 	.word	0x05c506b4
    e2dc:	12250bf5 	.word	0x12250bf5
    e2e0:	03b101a3 	.word	0x03b101a3
    e2e4:	02ef05bf 	.word	0x02ef05bf
    e2e8:	09a30649 	.word	0x09a30649

0000e2ec <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e2ec:	b510      	push	{r4, lr}
    e2ee:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
    e2f2:	b109      	cbz	r1, e2f8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e2f4:	2000      	movs	r0, #0
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    e2fc:	b959      	cbnz	r1, e316 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    e2fe:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
    e302:	b141      	cbz	r1, e316 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    e304:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
    e308:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    e30c:	4291      	cmp	r1, r2
    e30e:	d902      	bls.n	e316 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    e310:	f7ff fe96 	bl	e040 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e314:	e7ee      	b.n	e2f4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e316:	2001      	movs	r0, #1
    e318:	bd10      	pop	{r4, pc}

0000e31a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    e31a:	b510      	push	{r4, lr}
    e31c:	4604      	mov	r4, r0
    e31e:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    e322:	b170      	cbz	r0, e342 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x28>
    e324:	2001      	movs	r0, #1
    e326:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    e32a:	4601      	mov	r1, r0
    e32c:	4620      	mov	r0, r4
    e32e:	f7ff fe84 	bl	e03a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e332:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    e336:	2803      	cmp	r0, #3
    e338:	d005      	beq.n	e346 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x2c>
    e33a:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
    e33e:	2800      	cmp	r0, #0
    e340:	d000      	beq.n	e344 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x2a>
    e342:	200c      	movs	r0, #12
    e344:	bd10      	pop	{r4, pc}
    e346:	f814 0fa8 	ldrb.w	r0, [r4, #168]!
    e34a:	f7f3 fe3b 	bl	1fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e34e:	7820      	ldrb	r0, [r4, #0]
    e350:	f7f3 ff66 	bl	2220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e354:	f814 09a8 	ldrb.w	r0, [r4], #-168
    e358:	f7f3 ff40 	bl	21dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e35c:	b118      	cbz	r0, e366 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x4c>
    e35e:	2000      	movs	r0, #0
    e360:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    e364:	bd10      	pop	{r4, pc}
    e366:	f240 2141 	movw	r1, #577	; 0x241
    e36a:	2030      	movs	r0, #48	; 0x30
    e36c:	f7f5 fcf8 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e370 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    e370:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
    e374:	4770      	bx	lr

0000e376 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    e376:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    e37a:	2800      	cmp	r0, #0
    e37c:	d000      	beq.n	e380 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xa>
    e37e:	2001      	movs	r0, #1
    e380:	4770      	bx	lr

0000e382 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    e382:	b50e      	push	{r1, r2, r3, lr}
    e384:	4669      	mov	r1, sp
    e386:	2001      	movs	r0, #1
    e388:	f7fe ff09 	bl	d19e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e38c:	b138      	cbz	r0, e39e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    e38e:	f240 116b 	movw	r1, #363	; 0x16b
    e392:	2030      	movs	r0, #48	; 0x30
    e394:	f7f5 fce4 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e398:	9802      	ldr	r0, [sp, #8]
    e39a:	f7ff ffbe 	bl	e31a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    e39e:	4668      	mov	r0, sp
    e3a0:	f7f5 ff0c 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e3a4:	2800      	cmp	r0, #0
    e3a6:	d0f7      	beq.n	e398 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    e3a8:	f7f8 ffc2 	bl	7330 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x158>
    e3ac:	2000      	movs	r0, #0
    e3ae:	bd0e      	pop	{r1, r2, r3, pc}

0000e3b0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    e3b0:	b50e      	push	{r1, r2, r3, lr}
    e3b2:	4669      	mov	r1, sp
    e3b4:	2001      	movs	r0, #1
    e3b6:	f7fe fef2 	bl	d19e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e3ba:	b150      	cbz	r0, e3d2 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e3bc:	f44f 61fb 	mov.w	r1, #2008	; 0x7d8
    e3c0:	2030      	movs	r0, #48	; 0x30
    e3c2:	f7f5 fccd 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3c6:	9802      	ldr	r0, [sp, #8]
    e3c8:	f7ff ffd5 	bl	e376 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e3cc:	b108      	cbz	r0, e3d2 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e3ce:	2000      	movs	r0, #0
    e3d0:	bd0e      	pop	{r1, r2, r3, pc}
    e3d2:	4668      	mov	r0, sp
    e3d4:	f7f5 fef2 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e3d8:	2800      	cmp	r0, #0
    e3da:	d0f4      	beq.n	e3c6 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    e3dc:	2000      	movs	r0, #0
    e3de:	f7fe fec2 	bl	d166 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    e3e2:	f080 0001 	eor.w	r0, r0, #1
    e3e6:	bd0e      	pop	{r1, r2, r3, pc}

0000e3e8 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>:
    e3e8:	b538      	push	{r3, r4, r5, lr}
    e3ea:	2500      	movs	r5, #0
    e3ec:	4604      	mov	r4, r0
    e3ee:	f880 512c 	strb.w	r5, [r0, #300]	; 0x12c
    e3f2:	f8a0 515c 	strh.w	r5, [r0, #348]	; 0x15c
    e3f6:	462b      	mov	r3, r5
    e3f8:	462a      	mov	r2, r5
    e3fa:	4629      	mov	r1, r5
    e3fc:	9500      	str	r5, [sp, #0]
    e3fe:	f7f9 f93f 	bl	7680 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    e402:	b120      	cbz	r0, e40e <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA+0x26>
    e404:	f44f 7118 	mov.w	r1, #608	; 0x260
    e408:	2030      	movs	r0, #48	; 0x30
    e40a:	f7f5 fca9 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e40e:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e412:	2001      	movs	r0, #1
    e414:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    e418:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e41c:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    e420:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    e424:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    e428:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    e42c:	1e40      	subs	r0, r0, #1
    e42e:	f824 0bb4 	strh.w	r0, [r4], #180
    e432:	2000      	movs	r0, #0
    e434:	86e5      	strh	r5, [r4, #54]	; 0x36
    e436:	bd38      	pop	{r3, r4, r5, pc}

0000e438 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    e438:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e43a:	4604      	mov	r4, r0
    e43c:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    e440:	2800      	cmp	r0, #0
    e442:	d153      	bne.n	e4ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e444:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e448:	2803      	cmp	r0, #3
    e44a:	d14f      	bne.n	e4ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e44c:	f7fd fd16 	bl	be7c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e450:	4601      	mov	r1, r0
    e452:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    e456:	f7f3 f86f 	bl	1538 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e45a:	2800      	cmp	r0, #0
    e45c:	dd46      	ble.n	e4ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e45e:	6861      	ldr	r1, [r4, #4]
    e460:	b111      	cbz	r1, e468 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    e462:	fbb0 f0f1 	udiv	r0, r0, r1
    e466:	e000      	b.n	e46a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    e468:	2000      	movs	r0, #0
    e46a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e46e:	1c40      	adds	r0, r0, #1
    e470:	4408      	add	r0, r1
    e472:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e476:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e47a:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    e47e:	1a08      	subs	r0, r1, r0
    e480:	b200      	sxth	r0, r0
    e482:	2800      	cmp	r0, #0
    e484:	dd32      	ble.n	e4ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e486:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e48a:	f7f3 fd9b 	bl	1fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e48e:	2800      	cmp	r0, #0
    e490:	d02c      	beq.n	e4ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e492:	2001      	movs	r0, #1
    e494:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    e498:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    e49c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    e4a0:	ae01      	add	r6, sp, #4
    e4a2:	1a40      	subs	r0, r0, r1
    e4a4:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e4a8:	1e40      	subs	r0, r0, #1
    e4aa:	4408      	add	r0, r1
    e4ac:	b285      	uxth	r5, r0
    e4ae:	e017      	b.n	e4e0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    e4b0:	9600      	str	r6, [sp, #0]
    e4b2:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    e4b6:	2300      	movs	r3, #0
    e4b8:	2201      	movs	r2, #1
    e4ba:	4620      	mov	r0, r4
    e4bc:	f7f9 f8e0 	bl	7680 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    e4c0:	2800      	cmp	r0, #0
    e4c2:	d013      	beq.n	e4ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e4c4:	2801      	cmp	r0, #1
    e4c6:	d004      	beq.n	e4d2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    e4c8:	f240 6143 	movw	r1, #1603	; 0x643
    e4cc:	2030      	movs	r0, #48	; 0x30
    e4ce:	f7f5 fc47 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4d2:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e4d6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e4da:	4408      	add	r0, r1
    e4dc:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e4e0:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e4e4:	1a28      	subs	r0, r5, r0
    e4e6:	b200      	sxth	r0, r0
    e4e8:	2800      	cmp	r0, #0
    e4ea:	dae1      	bge.n	e4b0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    e4ec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e4ee:	2000      	movs	r0, #0
    e4f0:	4770      	bx	lr
    e4f2:	b510      	push	{r4, lr}
    e4f4:	4604      	mov	r4, r0
    e4f6:	f814 0fa8 	ldrb.w	r0, [r4, #168]!
    e4fa:	f7f3 fe6f 	bl	21dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e4fe:	2000      	movs	r0, #0
    e500:	7420      	strb	r0, [r4, #16]
    e502:	bd10      	pop	{r4, pc}
    e504:	b510      	push	{r4, lr}
    e506:	f7ff fd47 	bl	df98 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e50a:	f200 100d 	addw	r0, r0, #269	; 0x10d
    e50e:	bd10      	pop	{r4, pc}
    e510:	b570      	push	{r4, r5, r6, lr}
    e512:	4604      	mov	r4, r0
    e514:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    e518:	460d      	mov	r5, r1
    e51a:	b108      	cbz	r0, e520 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xe8>
    e51c:	2001      	movs	r0, #1
    e51e:	bd70      	pop	{r4, r5, r6, pc}
    e520:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    e524:	b1a8      	cbz	r0, e552 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11a>
    e526:	4620      	mov	r0, r4
    e528:	f7ff fd32 	bl	df90 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e52c:	4405      	add	r5, r0
    e52e:	4620      	mov	r0, r4
    e530:	f7ff ffe8 	bl	e504 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    e534:	1941      	adds	r1, r0, r5
    e536:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    e53a:	4288      	cmp	r0, r1
    e53c:	d206      	bcs.n	e54c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x114>
    e53e:	2001      	movs	r0, #1
    e540:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    e544:	4620      	mov	r0, r4
    e546:	f7ff fd7b 	bl	e040 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e54a:	e7e7      	b.n	e51c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xe4>
    e54c:	1b40      	subs	r0, r0, r5
    e54e:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    e552:	2000      	movs	r0, #0
    e554:	bd70      	pop	{r4, r5, r6, pc}
    e556:	b510      	push	{r4, lr}
    e558:	4604      	mov	r4, r0
    e55a:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    e55e:	f000 f883 	bl	e668 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x230>
    e562:	4602      	mov	r2, r0
    e564:	4620      	mov	r0, r4
    e566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e56a:	f240 111b 	movw	r1, #283	; 0x11b
    e56e:	f7ff bc09 	b.w	dd84 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e572:	b510      	push	{r4, lr}
    e574:	f7fc fd04 	bl	af80 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e57c:	f7f3 bf7c 	b.w	2478 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e580:	b570      	push	{r4, r5, r6, lr}
    e582:	460c      	mov	r4, r1
    e584:	4605      	mov	r5, r0
    e586:	f001 f8b8 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e58a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e58e:	4408      	add	r0, r1
    e590:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e594:	fbb0 f6f1 	udiv	r6, r0, r1
    e598:	4628      	mov	r0, r5
    e59a:	f001 f8a0 	bl	f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e59e:	4430      	add	r0, r6
    e5a0:	4420      	add	r0, r4
    e5a2:	bd70      	pop	{r4, r5, r6, pc}
    e5a4:	f7f3 b8f2 	b.w	178c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e5a8:	b510      	push	{r4, lr}
    e5aa:	4604      	mov	r4, r0
    e5ac:	f7ff fd14 	bl	dfd8 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e5b0:	b1a0      	cbz	r0, e5dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a4>
    e5b2:	4620      	mov	r0, r4
    e5b4:	f7ff fd08 	bl	dfc8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e5b8:	b918      	cbnz	r0, e5c2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18a>
    e5ba:	4620      	mov	r0, r4
    e5bc:	f7ff fd0e 	bl	dfdc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e5c0:	b120      	cbz	r0, e5cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x194>
    e5c2:	2445      	movs	r4, #69	; 0x45
    e5c4:	f001 f857 	bl	f676 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e5c8:	b928      	cbnz	r0, e5d6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    e5ca:	e001      	b.n	e5d0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x198>
    e5cc:	243e      	movs	r4, #62	; 0x3e
    e5ce:	e7f9      	b.n	e5c4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18c>
    e5d0:	f001 f847 	bl	f662 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e5d4:	b100      	cbz	r0, e5d8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a0>
    e5d6:	1de4      	adds	r4, r4, #7
    e5d8:	4620      	mov	r0, r4
    e5da:	bd10      	pop	{r4, pc}
    e5dc:	2067      	movs	r0, #103	; 0x67
    e5de:	bd10      	pop	{r4, pc}
    e5e0:	b510      	push	{r4, lr}
    e5e2:	4604      	mov	r4, r0
    e5e4:	2000      	movs	r0, #0
    e5e6:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e5ea:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e5ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e5f2:	f204 1441 	addw	r4, r4, #321	; 0x141
    e5f6:	f7f7 fafb 	bl	5bf0 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    e5fa:	7fe0      	ldrb	r0, [r4, #31]
    e5fc:	f7f3 fdee 	bl	21dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e600:	2020      	movs	r0, #32
    e602:	77e0      	strb	r0, [r4, #31]
    e604:	bd10      	pop	{r4, pc}
    e606:	b508      	push	{r3, lr}
    e608:	2800      	cmp	r0, #0
    e60a:	f04f 0101 	mov.w	r1, #1
    e60e:	4668      	mov	r0, sp
    e610:	d002      	beq.n	e618 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1e0>
    e612:	f7f5 fc35 	bl	3e80 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e616:	e001      	b.n	e61c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1e4>
    e618:	f7f5 fc40 	bl	3e9c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    e61c:	f89d 0000 	ldrb.w	r0, [sp]
    e620:	f242 7110 	movw	r1, #10000	; 0x2710
    e624:	0200      	lsls	r0, r0, #8
    e626:	fbb0 f2f1 	udiv	r2, r0, r1
    e62a:	fb01 0012 	mls	r0, r1, r2, r0
    e62e:	bd08      	pop	{r3, pc}
    e630:	b570      	push	{r4, r5, r6, lr}
    e632:	460d      	mov	r5, r1
    e634:	4604      	mov	r4, r0
    e636:	f7f7 fab1 	bl	5b9c <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA>
    e63a:	2101      	movs	r1, #1
    e63c:	f7fe fda5 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e640:	b160      	cbz	r0, e65c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e642:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    e646:	2903      	cmp	r1, #3
    e648:	d108      	bne.n	e65c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e64a:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    e64e:	42a1      	cmp	r1, r4
    e650:	d104      	bne.n	e65c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e652:	4629      	mov	r1, r5
    e654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e658:	f7f9 ba2e 	b.w	7ab8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8e0>
    e65c:	4629      	mov	r1, r5
    e65e:	4620      	mov	r0, r4
    e660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e664:	f7f9 ba80 	b.w	7b68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x990>
    e668:	b510      	push	{r4, lr}
    e66a:	f001 f846 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e66e:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e672:	4408      	add	r0, r1
    e674:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e678:	fbb0 f0f1 	udiv	r0, r0, r1
    e67c:	f500 70bc 	add.w	r0, r0, #376	; 0x178
    e680:	bd10      	pop	{r4, pc}
    e682:	01f4      	.short	0x01f4
    e684:	009600fa 	.word	0x009600fa
    e688:	004b0064 	.word	0x004b0064
    e68c:	001e0032 	.word	0x001e0032
    e690:	000a0014 	.word	0x000a0014
    e694:	00020005 	.word	0x00020005
    e698:	0001      	.short	0x0001
    e69a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e69e:	f001 0307 	and.w	r3, r1, #7
    e6a2:	7802      	ldrb	r2, [r0, #0]
    e6a4:	2101      	movs	r1, #1
    e6a6:	4099      	lsls	r1, r3
    e6a8:	438a      	bics	r2, r1
    e6aa:	7002      	strb	r2, [r0, #0]
    e6ac:	4770      	bx	lr

0000e6ae <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e6ae:	f7f5 bef3 	b.w	4498 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e6b2 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e6b2:	2000      	movs	r0, #0
    e6b4:	4770      	bx	lr

0000e6b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e6b6:	f7f6 bb7d 	b.w	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e6ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e6ba:	2100      	movs	r1, #0
    e6bc:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    e6c0:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    e6c4:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    e6c8:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    e6cc:	b109      	cbz	r1, e6d2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e6ce:	2102      	movs	r1, #2
    e6d0:	e000      	b.n	e6d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e6d2:	2103      	movs	r1, #3
    e6d4:	f7f8 bd80 	b.w	71d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e6d8:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    e6dc:	28fe      	cmp	r0, #254	; 0xfe
    e6de:	d001      	beq.n	e6e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e6e0:	2001      	movs	r0, #1
    e6e2:	4770      	bx	lr
    e6e4:	2000      	movs	r0, #0
    e6e6:	4770      	bx	lr
    e6e8:	b510      	push	{r4, lr}
    e6ea:	2801      	cmp	r0, #1
    e6ec:	d006      	beq.n	e6fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e6ee:	2802      	cmp	r0, #2
    e6f0:	d004      	beq.n	e6fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e6f2:	f240 219d 	movw	r1, #669	; 0x29d
    e6f6:	2006      	movs	r0, #6
    e6f8:	f7f5 fb32 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6fc:	bd10      	pop	{r4, pc}
    e6fe:	2801      	cmp	r0, #1
    e700:	d002      	beq.n	e708 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e702:	2802      	cmp	r0, #2
    e704:	d105      	bne.n	e712 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e706:	e002      	b.n	e70e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e708:	2901      	cmp	r1, #1
    e70a:	d004      	beq.n	e716 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e70c:	e001      	b.n	e712 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e70e:	2902      	cmp	r1, #2
    e710:	d001      	beq.n	e716 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e712:	2000      	movs	r0, #0
    e714:	4770      	bx	lr
    e716:	2001      	movs	r0, #1
    e718:	4770      	bx	lr
    e71a:	1a40      	subs	r0, r0, r1
    e71c:	b200      	sxth	r0, r0
    e71e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e722:	4288      	cmp	r0, r1
    e724:	dc01      	bgt.n	e72a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e726:	2800      	cmp	r0, #0
    e728:	dc01      	bgt.n	e72e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e72a:	2001      	movs	r0, #1
    e72c:	4770      	bx	lr
    e72e:	2000      	movs	r0, #0
    e730:	4770      	bx	lr
    e732:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e736:	f001 0107 	and.w	r1, r1, #7
    e73a:	7800      	ldrb	r0, [r0, #0]
    e73c:	2201      	movs	r2, #1
    e73e:	408a      	lsls	r2, r1
    e740:	4010      	ands	r0, r2
    e742:	40c8      	lsrs	r0, r1
    e744:	4770      	bx	lr
    e746:	b118      	cbz	r0, e750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e748:	2802      	cmp	r0, #2
    e74a:	d001      	beq.n	e750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e74c:	2001      	movs	r0, #1
    e74e:	4770      	bx	lr
    e750:	2000      	movs	r0, #0
    e752:	4770      	bx	lr

0000e754 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e754:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e758:	7881      	ldrb	r1, [r0, #2]
    e75a:	4604      	mov	r4, r0
    e75c:	291a      	cmp	r1, #26
    e75e:	d025      	beq.n	e7ac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    e760:	dc0e      	bgt.n	e780 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    e762:	2916      	cmp	r1, #22
    e764:	d22e      	bcs.n	e7c4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e766:	e8df f001 	tbb	[pc, r1]
    e76a:	2d2d      	.short	0x2d2d
    e76c:	212d2d2d 	.word	0x212d2d2d
    e770:	2d2d2d2d 	.word	0x2d2d2d2d
    e774:	2d2d2d2d 	.word	0x2d2d2d2d
    e778:	2d2d2d2d 	.word	0x2d2d2d2d
    e77c:	2121212d 	.word	0x2121212d
    e780:	292a      	cmp	r1, #42	; 0x2a
    e782:	d01f      	beq.n	e7c4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e784:	dc0b      	bgt.n	e79e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    e786:	f1a1 011e 	sub.w	r1, r1, #30
    e78a:	290c      	cmp	r1, #12
    e78c:	d21a      	bcs.n	e7c4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e78e:	e8df f001 	tbb	[pc, r1]
    e792:	1919      	.short	0x1919
    e794:	19191919 	.word	0x19191919
    e798:	19191919 	.word	0x19191919
    e79c:	0d19      	.short	0x0d19
    e79e:	393a      	subs	r1, #58	; 0x3a
    e7a0:	2904      	cmp	r1, #4
    e7a2:	d20f      	bcs.n	e7c4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e7a4:	e8df f001 	tbb	[pc, r1]
    e7a8:	020e020e 	.word	0x020e020e
    e7ac:	8820      	ldrh	r0, [r4, #0]
    e7ae:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e7b2:	d207      	bcs.n	e7c4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e7b4:	2701      	movs	r7, #1
    e7b6:	4669      	mov	r1, sp
    e7b8:	f7fe fe1f 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e7bc:	b120      	cbz	r0, e7c8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    e7be:	2002      	movs	r0, #2
    e7c0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e7c4:	2012      	movs	r0, #18
    e7c6:	e7fb      	b.n	e7c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e7c8:	9d01      	ldr	r5, [sp, #4]
    e7ca:	4668      	mov	r0, sp
    e7cc:	462e      	mov	r6, r5
    e7ce:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    e7d2:	f206 1671 	addw	r6, r6, #369	; 0x171
    e7d6:	f000 fe24 	bl	f422 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
    e7da:	b108      	cbz	r0, e7e0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    e7dc:	7828      	ldrb	r0, [r5, #0]
    e7de:	b108      	cbz	r0, e7e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    e7e0:	200c      	movs	r0, #12
    e7e2:	e7ed      	b.n	e7c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e7e4:	702f      	strb	r7, [r5, #0]
    e7e6:	78a0      	ldrb	r0, [r4, #2]
    e7e8:	7030      	strb	r0, [r6, #0]
    e7ea:	4668      	mov	r0, sp
    e7ec:	f7ff f9b6 	bl	db5c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e7f0:	2000      	movs	r0, #0
    e7f2:	e7e5      	b.n	e7c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000e7f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e7f4:	b510      	push	{r4, lr}
    e7f6:	4604      	mov	r4, r0
    e7f8:	7800      	ldrb	r0, [r0, #0]
    e7fa:	b118      	cbz	r0, e804 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e7fc:	2801      	cmp	r0, #1
    e7fe:	d001      	beq.n	e804 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e800:	2012      	movs	r0, #18
    e802:	bd10      	pop	{r4, pc}
    e804:	f000 fdc1 	bl	f38a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e808:	b120      	cbz	r0, e814 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e80a:	f7f6 ff23 	bl	5654 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e80e:	b108      	cbz	r0, e814 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e810:	200c      	movs	r0, #12
    e812:	bd10      	pop	{r4, pc}
    e814:	7820      	ldrb	r0, [r4, #0]
    e816:	f7ff ff96 	bl	e746 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e81a:	1de2      	adds	r2, r4, #7
    e81c:	f104 0317 	add.w	r3, r4, #23
    e820:	1c61      	adds	r1, r4, #1
    e822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e826:	f7f6 bf47 	b.w	56b8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e82a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e82a:	b510      	push	{r4, lr}
    e82c:	4604      	mov	r4, r0
    e82e:	f000 fe6c 	bl	f50a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    e832:	b108      	cbz	r0, e838 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e834:	200c      	movs	r0, #12
    e836:	bd10      	pop	{r4, pc}
    e838:	7820      	ldrb	r0, [r4, #0]
    e83a:	b118      	cbz	r0, e844 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e83c:	2801      	cmp	r0, #1
    e83e:	d001      	beq.n	e844 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e840:	2012      	movs	r0, #18
    e842:	bd10      	pop	{r4, pc}
    e844:	f7ff ff7f 	bl	e746 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e848:	1c61      	adds	r1, r4, #1
    e84a:	f7f6 ffad 	bl	57a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e84e:	b108      	cbz	r0, e854 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e850:	2000      	movs	r0, #0
    e852:	bd10      	pop	{r4, pc}
    e854:	2007      	movs	r0, #7
    e856:	bd10      	pop	{r4, pc}

0000e858 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e858:	b510      	push	{r4, lr}
    e85a:	f000 fd96 	bl	f38a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e85e:	b120      	cbz	r0, e86a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e860:	f7f6 fef8 	bl	5654 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e864:	b108      	cbz	r0, e86a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e866:	200c      	movs	r0, #12
    e868:	bd10      	pop	{r4, pc}
    e86a:	f7f6 ff6b 	bl	5744 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e86e:	2000      	movs	r0, #0
    e870:	bd10      	pop	{r4, pc}

0000e872 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e872:	b510      	push	{r4, lr}
    e874:	f000 fe49 	bl	f50a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    e878:	b108      	cbz	r0, e87e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e87a:	200c      	movs	r0, #12
    e87c:	bd10      	pop	{r4, pc}
    e87e:	f7f6 ffbb 	bl	57f8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e882:	2000      	movs	r0, #0
    e884:	bd10      	pop	{r4, pc}

0000e886 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e886:	b510      	push	{r4, lr}
    e888:	460b      	mov	r3, r1
    e88a:	2201      	movs	r2, #1
    e88c:	f100 0110 	add.w	r1, r0, #16
    e890:	f7fe fd95 	bl	d3be <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e894:	2000      	movs	r0, #0
    e896:	bd10      	pop	{r4, pc}

0000e898 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e898:	b510      	push	{r4, lr}
    e89a:	8800      	ldrh	r0, [r0, #0]
    e89c:	2100      	movs	r1, #0
    e89e:	f7fe fc74 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e8a2:	b118      	cbz	r0, e8ac <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e8a4:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    e8a8:	b111      	cbz	r1, e8b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e8aa:	e007      	b.n	e8bc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e8ac:	2002      	movs	r0, #2
    e8ae:	bd10      	pop	{r4, pc}
    e8b0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    e8b4:	2914      	cmp	r1, #20
    e8b6:	d003      	beq.n	e8c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e8b8:	2915      	cmp	r1, #21
    e8ba:	d001      	beq.n	e8c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e8bc:	200c      	movs	r0, #12
    e8be:	bd10      	pop	{r4, pc}
    e8c0:	2102      	movs	r1, #2
    e8c2:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    e8c6:	2000      	movs	r0, #0
    e8c8:	bd10      	pop	{r4, pc}

0000e8ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e8ca:	b538      	push	{r3, r4, r5, lr}
    e8cc:	4605      	mov	r5, r0
    e8ce:	8800      	ldrh	r0, [r0, #0]
    e8d0:	2100      	movs	r1, #0
    e8d2:	f7fe fc5a 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e8d6:	0004      	movs	r4, r0
    e8d8:	d003      	beq.n	e8e2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e8da:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    e8de:	b110      	cbz	r0, e8e6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e8e0:	e010      	b.n	e904 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e8e2:	2002      	movs	r0, #2
    e8e4:	bd38      	pop	{r3, r4, r5, pc}
    e8e6:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    e8ea:	2814      	cmp	r0, #20
    e8ec:	d001      	beq.n	e8f2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e8ee:	2815      	cmp	r0, #21
    e8f0:	d108      	bne.n	e904 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e8f2:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    e8f6:	f88d 0000 	strb.w	r0, [sp]
    e8fa:	9800      	ldr	r0, [sp, #0]
    e8fc:	9000      	str	r0, [sp, #0]
    e8fe:	f89d 0000 	ldrb.w	r0, [sp]
    e902:	b108      	cbz	r0, e908 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e904:	200c      	movs	r0, #12
    e906:	bd38      	pop	{r3, r4, r5, pc}
    e908:	2210      	movs	r2, #16
    e90a:	1ca9      	adds	r1, r5, #2
    e90c:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    e910:	f7fd fc29 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e914:	2001      	movs	r0, #1
    e916:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    e91a:	2000      	movs	r0, #0
    e91c:	bd38      	pop	{r3, r4, r5, pc}

0000e91e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e91e:	b510      	push	{r4, lr}
    e920:	2108      	movs	r1, #8
    e922:	f7f5 fac9 	bl	3eb8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e926:	2000      	movs	r0, #0
    e928:	bd10      	pop	{r4, pc}

0000e92a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e92a:	b510      	push	{r4, lr}
    e92c:	4604      	mov	r4, r0
    e92e:	2101      	movs	r1, #1
    e930:	2000      	movs	r0, #0
    e932:	f7fe fc2a 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e936:	b120      	cbz	r0, e942 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>
    e938:	f7ff fb54 	bl	dfe4 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e93c:	7020      	strb	r0, [r4, #0]
    e93e:	2000      	movs	r0, #0
    e940:	bd10      	pop	{r4, pc}
    e942:	f240 51e4 	movw	r1, #1508	; 0x5e4
    e946:	2039      	movs	r0, #57	; 0x39
    e948:	f7f5 fa0a 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e94c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    e94c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e94e:	460c      	mov	r4, r1
    e950:	4605      	mov	r5, r0
    e952:	8800      	ldrh	r0, [r0, #0]
    e954:	4669      	mov	r1, sp
    e956:	f7fe fd50 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e95a:	2200      	movs	r2, #0
    e95c:	b128      	cbz	r0, e96a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    e95e:	f8c4 2002 	str.w	r2, [r4, #2]
    e962:	71a2      	strb	r2, [r4, #6]
    e964:	8022      	strh	r2, [r4, #0]
    e966:	2002      	movs	r0, #2
    e968:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e96a:	9901      	ldr	r1, [sp, #4]
    e96c:	4608      	mov	r0, r1
    e96e:	3170      	adds	r1, #112	; 0x70
    e970:	f881 2046 	strb.w	r2, [r1, #70]	; 0x46
    e974:	68c3      	ldr	r3, [r0, #12]
    e976:	f8c4 3002 	str.w	r3, [r4, #2]
    e97a:	7c03      	ldrb	r3, [r0, #16]
    e97c:	71a3      	strb	r3, [r4, #6]
    e97e:	882b      	ldrh	r3, [r5, #0]
    e980:	8023      	strh	r3, [r4, #0]
    e982:	f891 3046 	ldrb.w	r3, [r1, #70]	; 0x46
    e986:	2b00      	cmp	r3, #0
    e988:	d1f2      	bne.n	e970 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    e98a:	2000      	movs	r0, #0
    e98c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e98e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e98e:	b510      	push	{r4, lr}
    e990:	4604      	mov	r4, r0
    e992:	f000 fd40 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    e996:	b140      	cbz	r0, e9aa <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e998:	20fb      	movs	r0, #251	; 0xfb
    e99a:	8020      	strh	r0, [r4, #0]
    e99c:	f640 0148 	movw	r1, #2120	; 0x848
    e9a0:	8061      	strh	r1, [r4, #2]
    e9a2:	80a0      	strh	r0, [r4, #4]
    e9a4:	80e1      	strh	r1, [r4, #6]
    e9a6:	2000      	movs	r0, #0
    e9a8:	bd10      	pop	{r4, pc}
    e9aa:	2001      	movs	r0, #1
    e9ac:	bd10      	pop	{r4, pc}

0000e9ae <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e9ae:	2108      	movs	r1, #8
    e9b0:	7001      	strb	r1, [r0, #0]
    e9b2:	2000      	movs	r0, #0
    e9b4:	4770      	bx	lr

0000e9b6 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e9b6:	b510      	push	{r4, lr}
    e9b8:	4604      	mov	r4, r0
    e9ba:	20d8      	movs	r0, #216	; 0xd8
    e9bc:	7020      	strb	r0, [r4, #0]
    e9be:	f000 fd0b 	bl	f3d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    e9c2:	7060      	strb	r0, [r4, #1]
    e9c4:	2000      	movs	r0, #0
    e9c6:	bd10      	pop	{r4, pc}

0000e9c8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e9c8:	2108      	movs	r1, #8
    e9ca:	7001      	strb	r1, [r0, #0]
    e9cc:	2000      	movs	r0, #0
    e9ce:	4770      	bx	lr

0000e9d0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e9d0:	b510      	push	{r4, lr}
    e9d2:	4604      	mov	r4, r0
    e9d4:	7800      	ldrb	r0, [r0, #0]
    e9d6:	b108      	cbz	r0, e9dc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e9d8:	2801      	cmp	r0, #1
    e9da:	d110      	bne.n	e9fe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e9dc:	f000 fcd5 	bl	f38a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e9e0:	b120      	cbz	r0, e9ec <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e9e2:	f7f6 fe37 	bl	5654 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e9e6:	b108      	cbz	r0, e9ec <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e9e8:	200c      	movs	r0, #12
    e9ea:	bd10      	pop	{r4, pc}
    e9ec:	7820      	ldrb	r0, [r4, #0]
    e9ee:	f7ff feaa 	bl	e746 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e9f2:	1c61      	adds	r1, r4, #1
    e9f4:	f7fe fcc9 	bl	d38a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e9f8:	b108      	cbz	r0, e9fe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e9fa:	2000      	movs	r0, #0
    e9fc:	bd10      	pop	{r4, pc}
    e9fe:	2012      	movs	r0, #18
    ea00:	bd10      	pop	{r4, pc}

0000ea02 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ea02:	b510      	push	{r4, lr}
    ea04:	4604      	mov	r4, r0
    ea06:	f000 fd80 	bl	f50a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    ea0a:	b108      	cbz	r0, ea10 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ea0c:	200c      	movs	r0, #12
    ea0e:	bd10      	pop	{r4, pc}
    ea10:	7820      	ldrb	r0, [r4, #0]
    ea12:	b108      	cbz	r0, ea18 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ea14:	2801      	cmp	r0, #1
    ea16:	d107      	bne.n	ea28 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ea18:	f7ff fe95 	bl	e746 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ea1c:	1c61      	adds	r1, r4, #1
    ea1e:	f7fe fcc3 	bl	d3a8 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ea22:	b108      	cbz	r0, ea28 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ea24:	2000      	movs	r0, #0
    ea26:	bd10      	pop	{r4, pc}
    ea28:	2012      	movs	r0, #18
    ea2a:	bd10      	pop	{r4, pc}

0000ea2c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ea2c:	b510      	push	{r4, lr}
    ea2e:	4604      	mov	r4, r0
    ea30:	f000 fcab 	bl	f38a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    ea34:	b108      	cbz	r0, ea3a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ea36:	200c      	movs	r0, #12
    ea38:	bd10      	pop	{r4, pc}
    ea3a:	7820      	ldrb	r0, [r4, #0]
    ea3c:	f000 0001 	and.w	r0, r0, #1
    ea40:	f7f6 fe02 	bl	5648 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ea44:	2000      	movs	r0, #0
    ea46:	bd10      	pop	{r4, pc}

0000ea48 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    ea48:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ea4a:	4605      	mov	r5, r0
    ea4c:	2000      	movs	r0, #0
    ea4e:	f7f5 fdc5 	bl	45dc <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>
    ea52:	0004      	movs	r4, r0
    ea54:	d01e      	beq.n	ea94 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    ea56:	f104 0022 	add.w	r0, r4, #34	; 0x22
    ea5a:	6020      	str	r0, [r4, #0]
    ea5c:	301f      	adds	r0, #31
    ea5e:	60a0      	str	r0, [r4, #8]
    ea60:	f894 0020 	ldrb.w	r0, [r4, #32]
    ea64:	2600      	movs	r6, #0
    ea66:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ea6a:	221f      	movs	r2, #31
    ea6c:	8086      	strh	r6, [r0, #4]
    ea6e:	f894 0020 	ldrb.w	r0, [r4, #32]
    ea72:	1c40      	adds	r0, r0, #1
    ea74:	f000 0001 	and.w	r0, r0, #1
    ea78:	f884 0020 	strb.w	r0, [r4, #32]
    ea7c:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    ea80:	7829      	ldrb	r1, [r5, #0]
    ea82:	1c68      	adds	r0, r5, #1
    ea84:	f000 fb87 	bl	f196 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb4>
    ea88:	b130      	cbz	r0, ea98 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x50>
    ea8a:	f241 5101 	movw	r1, #5377	; 0x1501
    ea8e:	2039      	movs	r0, #57	; 0x39
    ea90:	f7f5 f966 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea94:	2007      	movs	r0, #7
    ea96:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ea98:	f894 0020 	ldrb.w	r0, [r4, #32]
    ea9c:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    eaa0:	9001      	str	r0, [sp, #4]
    eaa2:	7828      	ldrb	r0, [r5, #0]
    eaa4:	f8ad 0002 	strh.w	r0, [sp, #2]
    eaa8:	f88d 6000 	strb.w	r6, [sp]
    eaac:	4668      	mov	r0, sp
    eaae:	f000 f9de 	bl	ee6e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    eab2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eab4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    eab4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    eab6:	4606      	mov	r6, r0
    eab8:	2101      	movs	r1, #1
    eaba:	2000      	movs	r0, #0
    eabc:	f7fe fb65 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eac0:	0005      	movs	r5, r0
    eac2:	d019      	beq.n	eaf8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x44>
    eac4:	7830      	ldrb	r0, [r6, #0]
    eac6:	2400      	movs	r4, #0
    eac8:	b160      	cbz	r0, eae4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
    eaca:	f88d 4004 	strb.w	r4, [sp, #4]
    eace:	f10d 0105 	add.w	r1, sp, #5
    ead2:	2001      	movs	r0, #1
    ead4:	f7f5 ffb2 	bl	4a3c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ead8:	b120      	cbz	r0, eae4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
    eada:	a801      	add	r0, sp, #4
    eadc:	f000 f89e 	bl	ec1c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    eae0:	2800      	cmp	r0, #0
    eae2:	d117      	bne.n	eb14 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x60>
    eae4:	f88d 4000 	strb.w	r4, [sp]
    eae8:	4628      	mov	r0, r5
    eaea:	f7ff fa71 	bl	dfd0 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    eaee:	b140      	cbz	r0, eb02 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x4e>
    eaf0:	2080      	movs	r0, #128	; 0x80
    eaf2:	f8ad 0001 	strh.w	r0, [sp, #1]
    eaf6:	e006      	b.n	eb06 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x52>
    eaf8:	f241 5185 	movw	r1, #5509	; 0x1585
    eafc:	2039      	movs	r0, #57	; 0x39
    eafe:	f7f5 f92f 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb02:	f8ad 4001 	strh.w	r4, [sp, #1]
    eb06:	f88d 4003 	strb.w	r4, [sp, #3]
    eb0a:	7830      	ldrb	r0, [r6, #0]
    eb0c:	2801      	cmp	r0, #1
    eb0e:	d002      	beq.n	eb16 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x62>
    eb10:	b130      	cbz	r0, eb20 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x6c>
    eb12:	2012      	movs	r0, #18
    eb14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb16:	4669      	mov	r1, sp
    eb18:	4628      	mov	r0, r5
    eb1a:	f7fb fc11 	bl	a340 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    eb1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb20:	4628      	mov	r0, r5
    eb22:	f000 fc95 	bl	f450 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36e>
    eb26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000eb28 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    eb28:	b530      	push	{r4, r5, lr}
    eb2a:	4604      	mov	r4, r0
    eb2c:	b08b      	sub	sp, #44	; 0x2c
    eb2e:	2101      	movs	r1, #1
    eb30:	2000      	movs	r0, #0
    eb32:	f7fe fb2a 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eb36:	0001      	movs	r1, r0
    eb38:	d006      	beq.n	eb48 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    eb3a:	8860      	ldrh	r0, [r4, #2]
    eb3c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    eb40:	d905      	bls.n	eb4e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x26>
    eb42:	2012      	movs	r0, #18
    eb44:	b00b      	add	sp, #44	; 0x2c
    eb46:	bd30      	pop	{r4, r5, pc}
    eb48:	f241 11d8 	movw	r1, #4568	; 0x11d8
    eb4c:	e063      	b.n	ec16 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xee>
    eb4e:	2500      	movs	r5, #0
    eb50:	f88d 5004 	strb.w	r5, [sp, #4]
    eb54:	7922      	ldrb	r2, [r4, #4]
    eb56:	9500      	str	r5, [sp, #0]
    eb58:	f89d 0000 	ldrb.w	r0, [sp]
    eb5c:	2a05      	cmp	r2, #5
    eb5e:	f040 0010 	orr.w	r0, r0, #16
    eb62:	f88d 0000 	strb.w	r0, [sp]
    eb66:	d254      	bcs.n	ec12 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xea>
    eb68:	e8df f002 	tbb	[pc, r2]
    eb6c:	11050803 	.word	0x11050803
    eb70:	000b      	.short	0x000b
    eb72:	f040 0001 	orr.w	r0, r0, #1
    eb76:	f040 0002 	orr.w	r0, r0, #2
    eb7a:	e006      	b.n	eb8a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x62>
    eb7c:	f040 0009 	orr.w	r0, r0, #9
    eb80:	e001      	b.n	eb86 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5e>
    eb82:	f040 0001 	orr.w	r0, r0, #1
    eb86:	f040 0004 	orr.w	r0, r0, #4
    eb8a:	f88d 0000 	strb.w	r0, [sp]
    eb8e:	f8bd 0000 	ldrh.w	r0, [sp]
    eb92:	9000      	str	r0, [sp, #0]
    eb94:	f8bd 0000 	ldrh.w	r0, [sp]
    eb98:	f8ad 0005 	strh.w	r0, [sp, #5]
    eb9c:	8822      	ldrh	r2, [r4, #0]
    eb9e:	f8dd 0006 	ldr.w	r0, [sp, #6]
    eba2:	f362 201f 	bfi	r0, r2, #8, #24
    eba6:	f8cd 0006 	str.w	r0, [sp, #6]
    ebaa:	8862      	ldrh	r2, [r4, #2]
    ebac:	f8dd 0009 	ldr.w	r0, [sp, #9]
    ebb0:	f362 201f 	bfi	r0, r2, #8, #24
    ebb4:	f8cd 0009 	str.w	r0, [sp, #9]
    ebb8:	7b60      	ldrb	r0, [r4, #13]
    ebba:	f88d 000d 	strb.w	r0, [sp, #13]
    ebbe:	7960      	ldrb	r0, [r4, #5]
    ebc0:	f88d 000e 	strb.w	r0, [sp, #14]
    ebc4:	79a0      	ldrb	r0, [r4, #6]
    ebc6:	f88d 000f 	strb.w	r0, [sp, #15]
    ebca:	f8d4 0007 	ldr.w	r0, [r4, #7]
    ebce:	9004      	str	r0, [sp, #16]
    ebd0:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    ebd4:	f8ad 0014 	strh.w	r0, [sp, #20]
    ebd8:	7ba0      	ldrb	r0, [r4, #14]
    ebda:	f88d 0016 	strb.w	r0, [sp, #22]
    ebde:	207f      	movs	r0, #127	; 0x7f
    ebe0:	f88d 0017 	strb.w	r0, [sp, #23]
    ebe4:	2001      	movs	r0, #1
    ebe6:	f88d 0018 	strb.w	r0, [sp, #24]
    ebea:	f88d 5019 	strb.w	r5, [sp, #25]
    ebee:	f88d 001a 	strb.w	r0, [sp, #26]
    ebf2:	f88d 501b 	strb.w	r5, [sp, #27]
    ebf6:	4608      	mov	r0, r1
    ebf8:	f7ff fa06 	bl	e008 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    ebfc:	f88d 001c 	strb.w	r0, [sp, #28]
    ec00:	f88d 501d 	strb.w	r5, [sp, #29]
    ec04:	f88d 501e 	strb.w	r5, [sp, #30]
    ec08:	a909      	add	r1, sp, #36	; 0x24
    ec0a:	a801      	add	r0, sp, #4
    ec0c:	f7fb fa36 	bl	a07c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    ec10:	e798      	b.n	eb44 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    ec12:	f241 01bc 	movw	r1, #4284	; 0x10bc
    ec16:	2039      	movs	r0, #57	; 0x39
    ec18:	f7f5 f8a2 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ec1c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    ec1c:	b570      	push	{r4, r5, r6, lr}
    ec1e:	4604      	mov	r4, r0
    ec20:	7800      	ldrb	r0, [r0, #0]
    ec22:	2101      	movs	r1, #1
    ec24:	f7fe fab1 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec28:	0005      	movs	r5, r0
    ec2a:	d007      	beq.n	ec3c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    ec2c:	f7ff fba3 	bl	e376 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ec30:	b160      	cbz	r0, ec4c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ec32:	4628      	mov	r0, r5
    ec34:	f7ff f9d2 	bl	dfdc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ec38:	b110      	cbz	r0, ec40 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    ec3a:	e005      	b.n	ec48 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    ec3c:	2042      	movs	r0, #66	; 0x42
    ec3e:	bd70      	pop	{r4, r5, r6, pc}
    ec40:	4628      	mov	r0, r5
    ec42:	f7ff f9c1 	bl	dfc8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ec46:	b108      	cbz	r0, ec4c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ec48:	200c      	movs	r0, #12
    ec4a:	bd70      	pop	{r4, r5, r6, pc}
    ec4c:	1c61      	adds	r1, r4, #1
    ec4e:	4628      	mov	r0, r5
    ec50:	f7ff f9d2 	bl	dff8 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    ec54:	2000      	movs	r0, #0
    ec56:	bd70      	pop	{r4, r5, r6, pc}

0000ec58 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ec58:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ec5a:	460d      	mov	r5, r1
    ec5c:	4604      	mov	r4, r0
    ec5e:	f000 fbda 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    ec62:	b130      	cbz	r0, ec72 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ec64:	88a2      	ldrh	r2, [r4, #4]
    ec66:	f244 2090 	movw	r0, #17040	; 0x4290
    ec6a:	4282      	cmp	r2, r0
    ec6c:	d903      	bls.n	ec76 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ec6e:	2012      	movs	r0, #18
    ec70:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec72:	2001      	movs	r0, #1
    ec74:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec76:	f640 0048 	movw	r0, #2120	; 0x848
    ec7a:	4282      	cmp	r2, r0
    ec7c:	d300      	bcc.n	ec80 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ec7e:	4602      	mov	r2, r0
    ec80:	8820      	ldrh	r0, [r4, #0]
    ec82:	f8ad 0000 	strh.w	r0, [sp]
    ec86:	8860      	ldrh	r0, [r4, #2]
    ec88:	f8ad 0002 	strh.w	r0, [sp, #2]
    ec8c:	f8ad 2004 	strh.w	r2, [sp, #4]
    ec90:	8860      	ldrh	r0, [r4, #2]
    ec92:	f8ad 0006 	strh.w	r0, [sp, #6]
    ec96:	f8ad 2008 	strh.w	r2, [sp, #8]
    ec9a:	8820      	ldrh	r0, [r4, #0]
    ec9c:	8028      	strh	r0, [r5, #0]
    ec9e:	4668      	mov	r0, sp
    eca0:	f7fb fc1c 	bl	a4dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    eca4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eca6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    eca6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eca8:	4604      	mov	r4, r0
    ecaa:	f7fb fd77 	bl	a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ecae:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ecb2:	b1b0      	cbz	r0, ece2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    ecb4:	f10d 0007 	add.w	r0, sp, #7
    ecb8:	9000      	str	r0, [sp, #0]
    ecba:	7922      	ldrb	r2, [r4, #4]
    ecbc:	78e1      	ldrb	r1, [r4, #3]
    ecbe:	78a0      	ldrb	r0, [r4, #2]
    ecc0:	f10d 0306 	add.w	r3, sp, #6
    ecc4:	f000 fbe5 	bl	f492 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b0>
    ecc8:	2800      	cmp	r0, #0
    ecca:	d109      	bne.n	ece0 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    eccc:	8820      	ldrh	r0, [r4, #0]
    ecce:	f8ad 0004 	strh.w	r0, [sp, #4]
    ecd2:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ecd6:	f8ad 0008 	strh.w	r0, [sp, #8]
    ecda:	a801      	add	r0, sp, #4
    ecdc:	f000 f903 	bl	eee6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ece0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ece2:	2001      	movs	r0, #1
    ece4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ece6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    ece6:	b510      	push	{r4, lr}
    ece8:	4604      	mov	r4, r0
    ecea:	f000 fb4e 	bl	f38a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    ecee:	b120      	cbz	r0, ecfa <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ecf0:	f7f6 fcb0 	bl	5654 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ecf4:	b108      	cbz	r0, ecfa <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ecf6:	200c      	movs	r0, #12
    ecf8:	bd10      	pop	{r4, pc}
    ecfa:	7820      	ldrb	r0, [r4, #0]
    ecfc:	f7ff fd23 	bl	e746 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ed00:	79e2      	ldrb	r2, [r4, #7]
    ed02:	1c61      	adds	r1, r4, #1
    ed04:	f7f6 fc54 	bl	55b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ed08:	b108      	cbz	r0, ed0e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ed0a:	2000      	movs	r0, #0
    ed0c:	bd10      	pop	{r4, pc}
    ed0e:	2002      	movs	r0, #2
    ed10:	bd10      	pop	{r4, pc}

0000ed12 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ed12:	b510      	push	{r4, lr}
    ed14:	4604      	mov	r4, r0
    ed16:	2001      	movs	r0, #1
    ed18:	f000 fa22 	bl	f160 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ed1c:	b128      	cbz	r0, ed2a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ed1e:	4621      	mov	r1, r4
    ed20:	2001      	movs	r0, #1
    ed22:	f7f5 fea3 	bl	4a6c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ed26:	2000      	movs	r0, #0
    ed28:	bd10      	pop	{r4, pc}
    ed2a:	200c      	movs	r0, #12
    ed2c:	bd10      	pop	{r4, pc}

0000ed2e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ed2e:	b510      	push	{r4, lr}
    ed30:	8800      	ldrh	r0, [r0, #0]
    ed32:	f7f6 fd1d 	bl	5770 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ed36:	b108      	cbz	r0, ed3c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ed38:	2000      	movs	r0, #0
    ed3a:	bd10      	pop	{r4, pc}
    ed3c:	2030      	movs	r0, #48	; 0x30
    ed3e:	bd10      	pop	{r4, pc}

0000ed40 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ed40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed42:	4605      	mov	r5, r0
    ed44:	2000      	movs	r0, #0
    ed46:	f7f5 fc49 	bl	45dc <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>
    ed4a:	0004      	movs	r4, r0
    ed4c:	d01f      	beq.n	ed8e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4e>
    ed4e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    ed52:	6120      	str	r0, [r4, #16]
    ed54:	301f      	adds	r0, #31
    ed56:	61a0      	str	r0, [r4, #24]
    ed58:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ed5c:	2600      	movs	r6, #0
    ed5e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ed62:	221f      	movs	r2, #31
    ed64:	8286      	strh	r6, [r0, #20]
    ed66:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ed6a:	1c40      	adds	r0, r0, #1
    ed6c:	f000 0001 	and.w	r0, r0, #1
    ed70:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    ed74:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    ed78:	7829      	ldrb	r1, [r5, #0]
    ed7a:	1c68      	adds	r0, r5, #1
    ed7c:	3310      	adds	r3, #16
    ed7e:	f000 fa0a 	bl	f196 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb4>
    ed82:	b130      	cbz	r0, ed92 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x52>
    ed84:	f241 3132 	movw	r1, #4914	; 0x1332
    ed88:	2039      	movs	r0, #57	; 0x39
    ed8a:	f7f4 ffe9 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed8e:	2007      	movs	r0, #7
    ed90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ed92:	f88d 6000 	strb.w	r6, [sp]
    ed96:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ed9a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ed9e:	6900      	ldr	r0, [r0, #16]
    eda0:	9001      	str	r0, [sp, #4]
    eda2:	7828      	ldrb	r0, [r5, #0]
    eda4:	f8ad 0002 	strh.w	r0, [sp, #2]
    eda8:	4668      	mov	r0, sp
    edaa:	f000 f87e 	bl	eeaa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    edae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000edb0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    edb0:	b51c      	push	{r2, r3, r4, lr}
    edb2:	4604      	mov	r4, r0
    edb4:	f000 fb2f 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    edb8:	b178      	cbz	r0, edda <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    edba:	8820      	ldrh	r0, [r4, #0]
    edbc:	f8ad 0000 	strh.w	r0, [sp]
    edc0:	8860      	ldrh	r0, [r4, #2]
    edc2:	f8ad 0002 	strh.w	r0, [sp, #2]
    edc6:	8820      	ldrh	r0, [r4, #0]
    edc8:	f8ad 0004 	strh.w	r0, [sp, #4]
    edcc:	8860      	ldrh	r0, [r4, #2]
    edce:	f8ad 0006 	strh.w	r0, [sp, #6]
    edd2:	4668      	mov	r0, sp
    edd4:	f7fb fc06 	bl	a5e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    edd8:	bd1c      	pop	{r2, r3, r4, pc}
    edda:	2001      	movs	r0, #1
    eddc:	bd1c      	pop	{r2, r3, r4, pc}

0000edde <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    edde:	b510      	push	{r4, lr}
    ede0:	f7f5 fe68 	bl	4ab4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    ede4:	2000      	movs	r0, #0
    ede6:	bd10      	pop	{r4, pc}

0000ede8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ede8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    edea:	460c      	mov	r4, r1
    edec:	4605      	mov	r5, r0
    edee:	f000 fb12 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    edf2:	b160      	cbz	r0, ee0e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    edf4:	4669      	mov	r1, sp
    edf6:	4628      	mov	r0, r5
    edf8:	f7fe faff 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    edfc:	2800      	cmp	r0, #0
    edfe:	d105      	bne.n	ee0c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    ee00:	2100      	movs	r1, #0
    ee02:	4622      	mov	r2, r4
    ee04:	9801      	ldr	r0, [sp, #4]
    ee06:	f000 fa8a 	bl	f31e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    ee0a:	2000      	movs	r0, #0
    ee0c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee0e:	2001      	movs	r0, #1
    ee10:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ee12 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ee12:	b510      	push	{r4, lr}
    ee14:	4604      	mov	r4, r0
    ee16:	2000      	movs	r0, #0
    ee18:	f000 f9a2 	bl	f160 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ee1c:	b128      	cbz	r0, ee2a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    ee1e:	4621      	mov	r1, r4
    ee20:	2000      	movs	r0, #0
    ee22:	f7f5 fe23 	bl	4a6c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ee26:	2000      	movs	r0, #0
    ee28:	bd10      	pop	{r4, pc}
    ee2a:	200c      	movs	r0, #12
    ee2c:	bd10      	pop	{r4, pc}

0000ee2e <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    ee2e:	b510      	push	{r4, lr}
    ee30:	4604      	mov	r4, r0
    ee32:	f7ff fabd 	bl	e3b0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    ee36:	b120      	cbz	r0, ee42 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    ee38:	7820      	ldrb	r0, [r4, #0]
    ee3a:	f7f8 f991 	bl	7160 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    ee3e:	2000      	movs	r0, #0
    ee40:	bd10      	pop	{r4, pc}
    ee42:	200c      	movs	r0, #12
    ee44:	bd10      	pop	{r4, pc}

0000ee46 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    ee46:	b510      	push	{r4, lr}
    ee48:	7800      	ldrb	r0, [r0, #0]
    ee4a:	f000 0001 	and.w	r0, r0, #1
    ee4e:	f7f8 f98d 	bl	716c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    ee52:	2000      	movs	r0, #0
    ee54:	bd10      	pop	{r4, pc}

0000ee56 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ee56:	b510      	push	{r4, lr}
    ee58:	4604      	mov	r4, r0
    ee5a:	f000 fadc 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    ee5e:	b120      	cbz	r0, ee6a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    ee60:	4620      	mov	r0, r4
    ee62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee66:	f7fb bb39 	b.w	a4dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    ee6a:	2001      	movs	r0, #1
    ee6c:	bd10      	pop	{r4, pc}

0000ee6e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ee6e:	b570      	push	{r4, r5, r6, lr}
    ee70:	4604      	mov	r4, r0
    ee72:	7800      	ldrb	r0, [r0, #0]
    ee74:	2101      	movs	r1, #1
    ee76:	f7fe f988 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee7a:	0005      	movs	r5, r0
    ee7c:	d013      	beq.n	eea6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x38>
    ee7e:	2201      	movs	r2, #1
    ee80:	8861      	ldrh	r1, [r4, #2]
    ee82:	f000 f99d 	bl	f1c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    ee86:	2800      	cmp	r0, #0
    ee88:	d10c      	bne.n	eea4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x36>
    ee8a:	4628      	mov	r0, r5
    ee8c:	f7ff f876 	bl	df7c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ee90:	8861      	ldrh	r1, [r4, #2]
    ee92:	4281      	cmp	r1, r0
    ee94:	d800      	bhi.n	ee98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2a>
    ee96:	4608      	mov	r0, r1
    ee98:	4601      	mov	r1, r0
    ee9a:	4628      	mov	r0, r5
    ee9c:	6862      	ldr	r2, [r4, #4]
    ee9e:	f7ff f8b9 	bl	e014 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    eea2:	2000      	movs	r0, #0
    eea4:	bd70      	pop	{r4, r5, r6, pc}
    eea6:	2042      	movs	r0, #66	; 0x42
    eea8:	bd70      	pop	{r4, r5, r6, pc}

0000eeaa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    eeaa:	b570      	push	{r4, r5, r6, lr}
    eeac:	4604      	mov	r4, r0
    eeae:	7800      	ldrb	r0, [r0, #0]
    eeb0:	2101      	movs	r1, #1
    eeb2:	f7fe f96a 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eeb6:	0005      	movs	r5, r0
    eeb8:	d00b      	beq.n	eed2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    eeba:	2201      	movs	r2, #1
    eebc:	8861      	ldrh	r1, [r4, #2]
    eebe:	f000 f97f 	bl	f1c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    eec2:	2800      	cmp	r0, #0
    eec4:	d106      	bne.n	eed4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    eec6:	8866      	ldrh	r6, [r4, #2]
    eec8:	4628      	mov	r0, r5
    eeca:	f7ff f887 	bl	dfdc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eece:	b110      	cbz	r0, eed6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    eed0:	e002      	b.n	eed8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    eed2:	2042      	movs	r0, #66	; 0x42
    eed4:	bd70      	pop	{r4, r5, r6, pc}
    eed6:	2600      	movs	r6, #0
    eed8:	4631      	mov	r1, r6
    eeda:	4628      	mov	r0, r5
    eedc:	6862      	ldr	r2, [r4, #4]
    eede:	f7ff f8a3 	bl	e028 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    eee2:	2000      	movs	r0, #0
    eee4:	bd70      	pop	{r4, r5, r6, pc}

0000eee6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    eee6:	b510      	push	{r4, lr}
    eee8:	4604      	mov	r4, r0
    eeea:	8880      	ldrh	r0, [r0, #4]
    eeec:	b128      	cbz	r0, eefa <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eeee:	2801      	cmp	r0, #1
    eef0:	d003      	beq.n	eefa <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eef2:	2802      	cmp	r0, #2
    eef4:	d001      	beq.n	eefa <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eef6:	2012      	movs	r0, #18
    eef8:	bd10      	pop	{r4, pc}
    eefa:	78e0      	ldrb	r0, [r4, #3]
    eefc:	f000 f9ec 	bl	f2d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    ef00:	b148      	cbz	r0, ef16 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ef02:	78a0      	ldrb	r0, [r4, #2]
    ef04:	f000 f9e8 	bl	f2d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    ef08:	b128      	cbz	r0, ef16 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ef0a:	4620      	mov	r0, r4
    ef0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef10:	2101      	movs	r1, #1
    ef12:	f000 b881 	b.w	f018 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ef16:	2011      	movs	r0, #17
    ef18:	bd10      	pop	{r4, pc}

0000ef1a <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ef1a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef1c:	460c      	mov	r4, r1
    ef1e:	4605      	mov	r5, r0
    ef20:	8800      	ldrh	r0, [r0, #0]
    ef22:	4669      	mov	r1, sp
    ef24:	f7fe fa69 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef28:	2800      	cmp	r0, #0
    ef2a:	d106      	bne.n	ef3a <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    ef2c:	9801      	ldr	r0, [sp, #4]
    ef2e:	8829      	ldrh	r1, [r5, #0]
    ef30:	8021      	strh	r1, [r4, #0]
    ef32:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    ef36:	8060      	strh	r0, [r4, #2]
    ef38:	2000      	movs	r0, #0
    ef3a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef3c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ef3c:	b510      	push	{r4, lr}
    ef3e:	4604      	mov	r4, r0
    ef40:	4601      	mov	r1, r0
    ef42:	2000      	movs	r0, #0
    ef44:	f7f5 fd7a 	bl	4a3c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ef48:	b910      	cbnz	r0, ef50 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ef4a:	2000      	movs	r0, #0
    ef4c:	6020      	str	r0, [r4, #0]
    ef4e:	80a0      	strh	r0, [r4, #4]
    ef50:	2000      	movs	r0, #0
    ef52:	bd10      	pop	{r4, pc}

0000ef54 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ef54:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef56:	8800      	ldrh	r0, [r0, #0]
    ef58:	4669      	mov	r1, sp
    ef5a:	f7fe fa4e 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef5e:	b958      	cbnz	r0, ef78 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef60:	4668      	mov	r0, sp
    ef62:	f000 fa5e 	bl	f422 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
    ef66:	b138      	cbz	r0, ef78 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef68:	9c01      	ldr	r4, [sp, #4]
    ef6a:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    ef6e:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    ef72:	3470      	adds	r4, #112	; 0x70
    ef74:	b929      	cbnz	r1, ef82 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    ef76:	e001      	b.n	ef7c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef78:	2002      	movs	r0, #2
    ef7a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef7c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    ef80:	b109      	cbz	r1, ef86 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ef82:	203a      	movs	r0, #58	; 0x3a
    ef84:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef86:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    ef8a:	f04f 0501 	mov.w	r5, #1
    ef8e:	0789      	lsls	r1, r1, #30
    ef90:	d103      	bne.n	ef9a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    ef92:	7005      	strb	r5, [r0, #0]
    ef94:	4668      	mov	r0, sp
    ef96:	f7fe fde1 	bl	db5c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ef9a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    ef9e:	2000      	movs	r0, #0
    efa0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000efa2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    efa2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    efa4:	460c      	mov	r4, r1
    efa6:	4605      	mov	r5, r0
    efa8:	8800      	ldrh	r0, [r0, #0]
    efaa:	4669      	mov	r1, sp
    efac:	f7fe fa25 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efb0:	b108      	cbz	r0, efb6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    efb2:	2002      	movs	r0, #2
    efb4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    efb6:	78a8      	ldrb	r0, [r5, #2]
    efb8:	b130      	cbz	r0, efc8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    efba:	f000 fa0d 	bl	f3d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    efbe:	70a0      	strb	r0, [r4, #2]
    efc0:	8828      	ldrh	r0, [r5, #0]
    efc2:	8020      	strh	r0, [r4, #0]
    efc4:	2000      	movs	r0, #0
    efc6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    efc8:	9801      	ldr	r0, [sp, #4]
    efca:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    efce:	e7f6      	b.n	efbe <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000efd0 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    efd0:	b510      	push	{r4, lr}
    efd2:	f7fb fb41 	bl	a658 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    efd6:	2000      	movs	r0, #0
    efd8:	bd10      	pop	{r4, pc}

0000efda <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    efda:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    efde:	4604      	mov	r4, r0
    efe0:	8840      	ldrh	r0, [r0, #2]
    efe2:	460d      	mov	r5, r1
    efe4:	b1b0      	cbz	r0, f014 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    efe6:	8820      	ldrh	r0, [r4, #0]
    efe8:	4669      	mov	r1, sp
    efea:	f7fe fa06 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efee:	2800      	cmp	r0, #0
    eff0:	d10e      	bne.n	f010 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    eff2:	8820      	ldrh	r0, [r4, #0]
    eff4:	8028      	strh	r0, [r5, #0]
    eff6:	9e01      	ldr	r6, [sp, #4]
    eff8:	1d35      	adds	r5, r6, #4
    effa:	3670      	adds	r6, #112	; 0x70
    effc:	682f      	ldr	r7, [r5, #0]
    effe:	8862      	ldrh	r2, [r4, #2]
    f000:	4639      	mov	r1, r7
    f002:	4630      	mov	r0, r6
    f004:	f7fe fb4c 	bl	d6a0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f008:	6828      	ldr	r0, [r5, #0]
    f00a:	42b8      	cmp	r0, r7
    f00c:	d1f6      	bne.n	effc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    f00e:	2000      	movs	r0, #0
    f010:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f014:	2012      	movs	r0, #18
    f016:	e7fb      	b.n	f010 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000f018 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f01c:	b086      	sub	sp, #24
    f01e:	468a      	mov	sl, r1
    f020:	4606      	mov	r6, r0
    f022:	8800      	ldrh	r0, [r0, #0]
    f024:	a901      	add	r1, sp, #4
    f026:	f7fe f9e8 	bl	d3fa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f02a:	2800      	cmp	r0, #0
    f02c:	d138      	bne.n	f0a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f02e:	9802      	ldr	r0, [sp, #8]
    f030:	f04f 0800 	mov.w	r8, #0
    f034:	4601      	mov	r1, r0
    f036:	4689      	mov	r9, r1
    f038:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    f03c:	f88d 1000 	strb.w	r1, [sp]
    f040:	9900      	ldr	r1, [sp, #0]
    f042:	9100      	str	r1, [sp, #0]
    f044:	f89d 5000 	ldrb.w	r5, [sp]
    f048:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f04c:	3070      	adds	r0, #112	; 0x70
    f04e:	2921      	cmp	r1, #33	; 0x21
    f050:	d100      	bne.n	f054 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f052:	b13d      	cbz	r5, f064 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f054:	2400      	movs	r4, #0
    f056:	3044      	adds	r0, #68	; 0x44
    f058:	2108      	movs	r1, #8
    f05a:	4607      	mov	r7, r0
    f05c:	f7ff fb69 	bl	e732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f060:	b110      	cbz	r0, f068 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f062:	e007      	b.n	f074 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f064:	2401      	movs	r4, #1
    f066:	e7f6      	b.n	f056 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f068:	210b      	movs	r1, #11
    f06a:	4638      	mov	r0, r7
    f06c:	f7ff fb61 	bl	e732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f070:	b900      	cbnz	r0, f074 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f072:	b1a4      	cbz	r4, f09e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f074:	a804      	add	r0, sp, #16
    f076:	9000      	str	r0, [sp, #0]
    f078:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f07c:	ab03      	add	r3, sp, #12
    f07e:	4632      	mov	r2, r6
    f080:	4649      	mov	r1, r9
    f082:	f000 f989 	bl	f398 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    f086:	0007      	movs	r7, r0
    f088:	d10a      	bne.n	f0a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f08a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f08e:	9c02      	ldr	r4, [sp, #8]
    f090:	b148      	cbz	r0, f0a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f092:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    f096:	2001      	movs	r0, #1
    f098:	7060      	strb	r0, [r4, #1]
    f09a:	b94d      	cbnz	r5, f0b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f09c:	e006      	b.n	f0ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f09e:	201a      	movs	r0, #26
    f0a0:	b006      	add	sp, #24
    f0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f0a6:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    f0aa:	e7f4      	b.n	f096 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f0ac:	7820      	ldrb	r0, [r4, #0]
    f0ae:	b108      	cbz	r0, f0b4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f0b0:	273a      	movs	r7, #58	; 0x3a
    f0b2:	e012      	b.n	f0da <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f0b4:	f884 a000 	strb.w	sl, [r4]
    f0b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f0bc:	70a0      	strb	r0, [r4, #2]
    f0be:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f0c2:	70e1      	strb	r1, [r4, #3]
    f0c4:	f88d 0000 	strb.w	r0, [sp]
    f0c8:	f88d 1001 	strb.w	r1, [sp, #1]
    f0cc:	88b0      	ldrh	r0, [r6, #4]
    f0ce:	f8ad 0002 	strh.w	r0, [sp, #2]
    f0d2:	4669      	mov	r1, sp
    f0d4:	4648      	mov	r0, r9
    f0d6:	f7fe fa4f 	bl	d578 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f0da:	f884 8001 	strb.w	r8, [r4, #1]
    f0de:	4638      	mov	r0, r7
    f0e0:	e7de      	b.n	f0a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f0e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f0e2:	b510      	push	{r4, lr}
    f0e4:	2008      	movs	r0, #8
    f0e6:	f7fb fb4f 	bl	a788 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0ee:	f7f9 b897 	b.w	8220 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f0f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f0f6:	4288      	cmp	r0, r1
    f0f8:	d303      	bcc.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f0fa:	f640 0148 	movw	r1, #2120	; 0x848
    f0fe:	4288      	cmp	r0, r1
    f100:	d300      	bcc.n	f104 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f102:	4608      	mov	r0, r1
    f104:	4770      	bx	lr
    f106:	07c1      	lsls	r1, r0, #31
    f108:	d001      	beq.n	f10e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f10a:	2001      	movs	r0, #1
    f10c:	4770      	bx	lr
    f10e:	0780      	lsls	r0, r0, #30
    f110:	d501      	bpl.n	f116 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f112:	2002      	movs	r0, #2
    f114:	4770      	bx	lr
    f116:	2000      	movs	r0, #0
    f118:	4770      	bx	lr
    f11a:	b510      	push	{r4, lr}
    f11c:	2801      	cmp	r0, #1
    f11e:	d006      	beq.n	f12e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f120:	2802      	cmp	r0, #2
    f122:	d004      	beq.n	f12e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f124:	f240 219d 	movw	r1, #669	; 0x29d
    f128:	2006      	movs	r0, #6
    f12a:	f7f4 fe19 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f12e:	bd10      	pop	{r4, pc}
    f130:	b50e      	push	{r1, r2, r3, lr}
    f132:	4669      	mov	r1, sp
    f134:	2001      	movs	r0, #1
    f136:	f7fe f832 	bl	d19e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f13a:	b150      	cbz	r0, f152 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f13c:	f44f 719a 	mov.w	r1, #308	; 0x134
    f140:	2039      	movs	r0, #57	; 0x39
    f142:	f7f4 fe0d 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f146:	9802      	ldr	r0, [sp, #8]
    f148:	f7ff f915 	bl	e376 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f14c:	b108      	cbz	r0, f152 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f14e:	2001      	movs	r0, #1
    f150:	bd0e      	pop	{r1, r2, r3, pc}
    f152:	4668      	mov	r0, sp
    f154:	f7f5 f832 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f158:	2800      	cmp	r0, #0
    f15a:	d0f4      	beq.n	f146 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f15c:	2000      	movs	r0, #0
    f15e:	bd0e      	pop	{r1, r2, r3, pc}
    f160:	b510      	push	{r4, lr}
    f162:	f7ff ffe5 	bl	f130 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f166:	b1a0      	cbz	r0, f192 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f168:	2101      	movs	r1, #1
    f16a:	2000      	movs	r0, #0
    f16c:	f7fe f80d 	bl	d18a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f170:	0004      	movs	r4, r0
    f172:	d003      	beq.n	f17c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f174:	f7fe ff32 	bl	dfdc <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f178:	b128      	cbz	r0, f186 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa4>
    f17a:	e008      	b.n	f18e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xac>
    f17c:	f44f 71be 	mov.w	r1, #380	; 0x17c
    f180:	2039      	movs	r0, #57	; 0x39
    f182:	f7f4 fded 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f186:	4620      	mov	r0, r4
    f188:	f7fe ff1e 	bl	dfc8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f18c:	b108      	cbz	r0, f192 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f18e:	2000      	movs	r0, #0
    f190:	bd10      	pop	{r4, pc}
    f192:	2001      	movs	r0, #1
    f194:	bd10      	pop	{r4, pc}
    f196:	b570      	push	{r4, r5, r6, lr}
    f198:	460d      	mov	r5, r1
    f19a:	8899      	ldrh	r1, [r3, #4]
    f19c:	461c      	mov	r4, r3
    f19e:	194b      	adds	r3, r1, r5
    f1a0:	4293      	cmp	r3, r2
    f1a2:	d901      	bls.n	f1a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc6>
    f1a4:	2007      	movs	r0, #7
    f1a6:	bd70      	pop	{r4, r5, r6, pc}
    f1a8:	6822      	ldr	r2, [r4, #0]
    f1aa:	1853      	adds	r3, r2, r1
    f1ac:	4601      	mov	r1, r0
    f1ae:	462a      	mov	r2, r5
    f1b0:	4618      	mov	r0, r3
    f1b2:	f7fc ffd8 	bl	c166 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f1b6:	88a0      	ldrh	r0, [r4, #4]
    f1b8:	4428      	add	r0, r5
    f1ba:	80a0      	strh	r0, [r4, #4]
    f1bc:	2000      	movs	r0, #0
    f1be:	bd70      	pop	{r4, r5, r6, pc}
    f1c0:	b570      	push	{r4, r5, r6, lr}
    f1c2:	460c      	mov	r4, r1
    f1c4:	4605      	mov	r5, r0
    f1c6:	b112      	cbz	r2, f1ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f1c8:	291f      	cmp	r1, #31
    f1ca:	d807      	bhi.n	f1dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfa>
    f1cc:	e011      	b.n	f1f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f1ce:	2cff      	cmp	r4, #255	; 0xff
    f1d0:	d804      	bhi.n	f1dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfa>
    f1d2:	f7fe ff01 	bl	dfd8 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f1d6:	b118      	cbz	r0, f1e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f1d8:	2c1f      	cmp	r4, #31
    f1da:	d901      	bls.n	f1e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f1dc:	2012      	movs	r0, #18
    f1de:	bd70      	pop	{r4, r5, r6, pc}
    f1e0:	4628      	mov	r0, r5
    f1e2:	f7fe ff02 	bl	dfea <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f1e6:	b130      	cbz	r0, f1f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x114>
    f1e8:	4621      	mov	r1, r4
    f1ea:	4628      	mov	r0, r5
    f1ec:	f7fe fed2 	bl	df94 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f1f0:	b118      	cbz	r0, f1fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x118>
    f1f2:	2000      	movs	r0, #0
    f1f4:	bd70      	pop	{r4, r5, r6, pc}
    f1f6:	2042      	movs	r0, #66	; 0x42
    f1f8:	bd70      	pop	{r4, r5, r6, pc}
    f1fa:	2045      	movs	r0, #69	; 0x45
    f1fc:	bd70      	pop	{r4, r5, r6, pc}
    f1fe:	b510      	push	{r4, lr}
    f200:	4604      	mov	r4, r0
    f202:	7840      	ldrb	r0, [r0, #1]
    f204:	06c1      	lsls	r1, r0, #27
    f206:	d512      	bpl.n	f22e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f208:	07c0      	lsls	r0, r0, #31
    f20a:	d00b      	beq.n	f224 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f20c:	f7fb fa62 	bl	a6d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f210:	b168      	cbz	r0, f22e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f212:	7860      	ldrb	r0, [r4, #1]
    f214:	06c1      	lsls	r1, r0, #27
    f216:	d405      	bmi.n	f224 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f218:	0700      	lsls	r0, r0, #28
    f21a:	d503      	bpl.n	f224 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f21c:	7d20      	ldrb	r0, [r4, #20]
    f21e:	2802      	cmp	r0, #2
    f220:	d105      	bne.n	f22e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f222:	e006      	b.n	f232 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    f224:	7d20      	ldrb	r0, [r4, #20]
    f226:	2802      	cmp	r0, #2
    f228:	d003      	beq.n	f232 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    f22a:	7ea0      	ldrb	r0, [r4, #26]
    f22c:	b108      	cbz	r0, f232 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    f22e:	2011      	movs	r0, #17
    f230:	bd10      	pop	{r4, pc}
    f232:	2000      	movs	r0, #0
    f234:	bd10      	pop	{r4, pc}
    f236:	b538      	push	{r3, r4, r5, lr}
    f238:	4604      	mov	r4, r0
    f23a:	7800      	ldrb	r0, [r0, #0]
    f23c:	28ef      	cmp	r0, #239	; 0xef
    f23e:	d847      	bhi.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f240:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f244:	f8ad 0000 	strh.w	r0, [sp]
    f248:	9800      	ldr	r0, [sp, #0]
    f24a:	f000 f939 	bl	f4c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    f24e:	b3c0      	cbz	r0, f2c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f250:	7861      	ldrb	r1, [r4, #1]
    f252:	0708      	lsls	r0, r1, #28
    f254:	d40f      	bmi.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x194>
    f256:	f8d4 2002 	ldr.w	r2, [r4, #2]
    f25a:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f25e:	0a13      	lsrs	r3, r2, #8
    f260:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    f264:	d834      	bhi.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f266:	2320      	movs	r3, #32
    f268:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    f26c:	d830      	bhi.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f26e:	025a      	lsls	r2, r3, #9
    f270:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f274:	d32c      	bcc.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f276:	7a60      	ldrb	r0, [r4, #9]
    f278:	b318      	cbz	r0, f2c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f27a:	2807      	cmp	r0, #7
    f27c:	d828      	bhi.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f27e:	7aa0      	ldrb	r0, [r4, #10]
    f280:	b128      	cbz	r0, f28e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    f282:	2801      	cmp	r0, #1
    f284:	d003      	beq.n	f28e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    f286:	2802      	cmp	r0, #2
    f288:	d001      	beq.n	f28e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    f28a:	2803      	cmp	r0, #3
    f28c:	d120      	bne.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f28e:	074a      	lsls	r2, r1, #29
    f290:	d403      	bmi.n	f29a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b8>
    f292:	2802      	cmp	r0, #2
    f294:	d001      	beq.n	f29a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b8>
    f296:	2803      	cmp	r0, #3
    f298:	d105      	bne.n	f2a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c4>
    f29a:	7ae0      	ldrb	r0, [r4, #11]
    f29c:	b108      	cbz	r0, f2a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    f29e:	2801      	cmp	r0, #1
    f2a0:	d116      	bne.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2a2:	0748      	lsls	r0, r1, #29
    f2a4:	d407      	bmi.n	f2b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f2a6:	7ca0      	ldrb	r0, [r4, #18]
    f2a8:	b128      	cbz	r0, f2b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f2aa:	2801      	cmp	r0, #1
    f2ac:	d003      	beq.n	f2b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f2ae:	2802      	cmp	r0, #2
    f2b0:	d001      	beq.n	f2b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f2b2:	2803      	cmp	r0, #3
    f2b4:	d10c      	bne.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2b6:	06c8      	lsls	r0, r1, #27
    f2b8:	7d20      	ldrb	r0, [r4, #20]
    f2ba:	d503      	bpl.n	f2c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f2bc:	2801      	cmp	r0, #1
    f2be:	d107      	bne.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2c0:	e002      	b.n	f2c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    f2c2:	e005      	b.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2c4:	2802      	cmp	r0, #2
    f2c6:	d003      	beq.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2c8:	7e20      	ldrb	r0, [r4, #24]
    f2ca:	b118      	cbz	r0, f2d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f2cc:	2801      	cmp	r0, #1
    f2ce:	d001      	beq.n	f2d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f2d0:	2012      	movs	r0, #18
    f2d2:	bd38      	pop	{r3, r4, r5, pc}
    f2d4:	2000      	movs	r0, #0
    f2d6:	bd38      	pop	{r3, r4, r5, pc}
    f2d8:	b510      	push	{r4, lr}
    f2da:	0004      	movs	r4, r0
    f2dc:	d005      	beq.n	f2ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x208>
    f2de:	f7fb fa63 	bl	a7a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f2e2:	4384      	bics	r4, r0
    f2e4:	d001      	beq.n	f2ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x208>
    f2e6:	2000      	movs	r0, #0
    f2e8:	bd10      	pop	{r4, pc}
    f2ea:	2001      	movs	r0, #1
    f2ec:	bd10      	pop	{r4, pc}
    f2ee:	28fb      	cmp	r0, #251	; 0xfb
    f2f0:	d803      	bhi.n	f2fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x218>
    f2f2:	f640 0048 	movw	r0, #2120	; 0x848
    f2f6:	4281      	cmp	r1, r0
    f2f8:	d901      	bls.n	f2fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x21c>
    f2fa:	2011      	movs	r0, #17
    f2fc:	4770      	bx	lr
    f2fe:	2000      	movs	r0, #0
    f300:	4770      	bx	lr
    f302:	381b      	subs	r0, #27
    f304:	28e1      	cmp	r0, #225	; 0xe1
    f306:	d206      	bcs.n	f316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x234>
    f308:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f30c:	d303      	bcc.n	f316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x234>
    f30e:	f244 2090 	movw	r0, #17040	; 0x4290
    f312:	4281      	cmp	r1, r0
    f314:	d901      	bls.n	f31a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x238>
    f316:	2012      	movs	r0, #18
    f318:	4770      	bx	lr
    f31a:	2000      	movs	r0, #0
    f31c:	4770      	bx	lr
    f31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f322:	4606      	mov	r6, r0
    f324:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
    f328:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
    f32c:	4615      	mov	r5, r2
    f32e:	3028      	adds	r0, #40	; 0x28
    f330:	f7f7 ff22 	bl	7178 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    f334:	4680      	mov	r8, r0
    f336:	2102      	movs	r1, #2
    f338:	f7fe f8ef 	bl	d51a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f33c:	4287      	cmp	r7, r0
    f33e:	d200      	bcs.n	f342 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x260>
    f340:	4638      	mov	r0, r7
    f342:	4607      	mov	r7, r0
    f344:	2102      	movs	r1, #2
    f346:	4640      	mov	r0, r8
    f348:	f7fe f8e7 	bl	d51a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f34c:	4284      	cmp	r4, r0
    f34e:	d200      	bcs.n	f352 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x270>
    f350:	4620      	mov	r0, r4
    f352:	8831      	ldrh	r1, [r6, #0]
    f354:	8029      	strh	r1, [r5, #0]
    f356:	2f1b      	cmp	r7, #27
    f358:	d913      	bls.n	f382 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
    f35a:	2ffb      	cmp	r7, #251	; 0xfb
    f35c:	d300      	bcc.n	f360 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f35e:	27fb      	movs	r7, #251	; 0xfb
    f360:	806f      	strh	r7, [r5, #2]
    f362:	281b      	cmp	r0, #27
    f364:	d90f      	bls.n	f386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    f366:	28fb      	cmp	r0, #251	; 0xfb
    f368:	d300      	bcc.n	f36c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28a>
    f36a:	20fb      	movs	r0, #251	; 0xfb
    f36c:	80e8      	strh	r0, [r5, #6]
    f36e:	4640      	mov	r0, r8
    f370:	f7ff febf 	bl	f0f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f374:	80a8      	strh	r0, [r5, #4]
    f376:	4640      	mov	r0, r8
    f378:	f7ff febb 	bl	f0f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f37c:	8128      	strh	r0, [r5, #8]
    f37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f382:	271b      	movs	r7, #27
    f384:	e7ec      	b.n	f360 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f386:	201b      	movs	r0, #27
    f388:	e7f0      	b.n	f36c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28a>
    f38a:	b510      	push	{r4, lr}
    f38c:	f7ff fed0 	bl	f130 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f390:	2800      	cmp	r0, #0
    f392:	d000      	beq.n	f396 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b4>
    f394:	2001      	movs	r0, #1
    f396:	bd10      	pop	{r4, pc}
    f398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f39c:	7890      	ldrb	r0, [r2, #2]
    f39e:	9e06      	ldr	r6, [sp, #24]
    f3a0:	461d      	mov	r5, r3
    f3a2:	4614      	mov	r4, r2
    f3a4:	b908      	cbnz	r0, f3aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
    f3a6:	f7fb f9ff 	bl	a7a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f3aa:	78e4      	ldrb	r4, [r4, #3]
    f3ac:	4607      	mov	r7, r0
    f3ae:	b914      	cbnz	r4, f3b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d4>
    f3b0:	f7fb f9fa 	bl	a7a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f3b4:	4604      	mov	r4, r0
    f3b6:	b16f      	cbz	r7, f3d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f3b8:	b164      	cbz	r4, f3d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f3ba:	4638      	mov	r0, r7
    f3bc:	f7ff fea3 	bl	f106 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f3c0:	4620      	mov	r0, r4
    f3c2:	f7ff fea0 	bl	f106 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f3c6:	b12f      	cbz	r7, f3d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f3c8:	b124      	cbz	r4, f3d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f3ca:	702f      	strb	r7, [r5, #0]
    f3cc:	7034      	strb	r4, [r6, #0]
    f3ce:	2000      	movs	r0, #0
    f3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3d4:	2009      	movs	r0, #9
    f3d6:	e7fb      	b.n	f3d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ee>
    f3d8:	b510      	push	{r4, lr}
    f3da:	f7fc fe68 	bl	c0ae <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f3de:	b928      	cbnz	r0, f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30a>
    f3e0:	f7fc fe9b 	bl	c11a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f3e4:	b910      	cbnz	r0, f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30a>
    f3e6:	f7fc fea2 	bl	c12e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f3ea:	b108      	cbz	r0, f3f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    f3ec:	2008      	movs	r0, #8
    f3ee:	bd10      	pop	{r4, pc}
    f3f0:	f7fc fe32 	bl	c058 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f3f4:	b940      	cbnz	r0, f408 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    f3f6:	f7fc fe39 	bl	c06c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f3fa:	b928      	cbnz	r0, f408 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    f3fc:	f7fc fe4d 	bl	c09a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f400:	b910      	cbnz	r0, f408 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    f402:	f7fc fe5e 	bl	c0c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f406:	b108      	cbz	r0, f40c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32a>
    f408:	2004      	movs	r0, #4
    f40a:	bd10      	pop	{r4, pc}
    f40c:	f240 51b4 	movw	r1, #1460	; 0x5b4
    f410:	2039      	movs	r0, #57	; 0x39
    f412:	f7f4 fca5 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f416:	b510      	push	{r4, lr}
    f418:	f7fb f9c0 	bl	a79c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f41c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f420:	bd10      	pop	{r4, pc}
    f422:	6840      	ldr	r0, [r0, #4]
    f424:	f000 b800 	b.w	f428 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x346>
    f428:	b508      	push	{r3, lr}
    f42a:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f42e:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    f432:	f88d 0000 	strb.w	r0, [sp]
    f436:	9800      	ldr	r0, [sp, #0]
    f438:	9000      	str	r0, [sp, #0]
    f43a:	f89d 0000 	ldrb.w	r0, [sp]
    f43e:	1e40      	subs	r0, r0, #1
    f440:	4208      	tst	r0, r1
    f442:	d003      	beq.n	f44c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36a>
    f444:	2904      	cmp	r1, #4
    f446:	d001      	beq.n	f44c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36a>
    f448:	2001      	movs	r0, #1
    f44a:	bd08      	pop	{r3, pc}
    f44c:	2000      	movs	r0, #0
    f44e:	bd08      	pop	{r3, pc}
    f450:	b570      	push	{r4, r5, r6, lr}
    f452:	4605      	mov	r5, r0
    f454:	f7fe fdc9 	bl	dfea <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f458:	b148      	cbz	r0, f46e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    f45a:	4628      	mov	r0, r5
    f45c:	f7fe ff88 	bl	e370 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    f460:	4604      	mov	r4, r0
    f462:	4628      	mov	r0, r5
    f464:	f7fe ff59 	bl	e31a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    f468:	b118      	cbz	r0, f472 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x390>
    f46a:	200c      	movs	r0, #12
    f46c:	bd70      	pop	{r4, r5, r6, pc}
    f46e:	2042      	movs	r0, #66	; 0x42
    f470:	bd70      	pop	{r4, r5, r6, pc}
    f472:	b164      	cbz	r4, f48e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ac>
    f474:	8820      	ldrh	r0, [r4, #0]
    f476:	f7fd feed 	bl	d254 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f47a:	8820      	ldrh	r0, [r4, #0]
    f47c:	2100      	movs	r1, #0
    f47e:	f7f4 feed 	bl	425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f482:	b120      	cbz	r0, f48e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ac>
    f484:	f241 417b 	movw	r1, #5243	; 0x147b
    f488:	2039      	movs	r0, #57	; 0x39
    f48a:	f7f4 fc69 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f48e:	2000      	movs	r0, #0
    f490:	bd70      	pop	{r4, r5, r6, pc}
    f492:	b530      	push	{r4, r5, lr}
    f494:	f340 0400 	sbfx	r4, r0, #0, #1
    f498:	f340 0040 	sbfx	r0, r0, #1, #1
    f49c:	1c40      	adds	r0, r0, #1
    f49e:	9d03      	ldr	r5, [sp, #12]
    f4a0:	1c64      	adds	r4, r4, #1
    f4a2:	d000      	beq.n	f4a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c4>
    f4a4:	b119      	cbz	r1, f4ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3cc>
    f4a6:	b100      	cbz	r0, f4aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c8>
    f4a8:	b10a      	cbz	r2, f4ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3cc>
    f4aa:	b91c      	cbnz	r4, f4b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d2>
    f4ac:	e001      	b.n	f4b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d0>
    f4ae:	2011      	movs	r0, #17
    f4b0:	bd30      	pop	{r4, r5, pc}
    f4b2:	2100      	movs	r1, #0
    f4b4:	7019      	strb	r1, [r3, #0]
    f4b6:	b900      	cbnz	r0, f4ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    f4b8:	2200      	movs	r2, #0
    f4ba:	702a      	strb	r2, [r5, #0]
    f4bc:	2000      	movs	r0, #0
    f4be:	bd30      	pop	{r4, r5, pc}
    f4c0:	b2c0      	uxtb	r0, r0
    f4c2:	06c1      	lsls	r1, r0, #27
    f4c4:	d40c      	bmi.n	f4e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fe>
    f4c6:	0681      	lsls	r1, r0, #26
    f4c8:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    f4cc:	d503      	bpl.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    f4ce:	b9d1      	cbnz	r1, f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4d0:	0781      	lsls	r1, r0, #30
    f4d2:	d418      	bmi.n	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4d4:	e001      	b.n	f4da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    f4d6:	2900      	cmp	r1, #0
    f4d8:	d1fa      	bne.n	f4d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ee>
    f4da:	0700      	lsls	r0, r0, #28
    f4dc:	d413      	bmi.n	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4de:	e010      	b.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    f4e0:	0641      	lsls	r1, r0, #25
    f4e2:	d410      	bmi.n	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4e4:	0681      	lsls	r1, r0, #26
    f4e6:	d40e      	bmi.n	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4e8:	07c1      	lsls	r1, r0, #31
    f4ea:	ea4f 7180 	mov.w	r1, r0, lsl #30
    f4ee:	d004      	beq.n	f4fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x418>
    f4f0:	2900      	cmp	r1, #0
    f4f2:	db02      	blt.n	f4fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x418>
    f4f4:	0740      	lsls	r0, r0, #29
    f4f6:	d404      	bmi.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    f4f8:	e005      	b.n	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4fa:	0701      	lsls	r1, r0, #28
    f4fc:	d403      	bmi.n	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4fe:	0740      	lsls	r0, r0, #29
    f500:	d401      	bmi.n	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f502:	2001      	movs	r0, #1
    f504:	4770      	bx	lr
    f506:	2000      	movs	r0, #0
    f508:	4770      	bx	lr
    f50a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f50c:	4669      	mov	r1, sp
    f50e:	2001      	movs	r0, #1
    f510:	f7fd fe45 	bl	d19e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f514:	b178      	cbz	r0, f536 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    f516:	f44f 71a9 	mov.w	r1, #338	; 0x152
    f51a:	2039      	movs	r0, #57	; 0x39
    f51c:	f7f4 fc20 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f520:	9c02      	ldr	r4, [sp, #8]
    f522:	4620      	mov	r0, r4
    f524:	f7fe ff27 	bl	e376 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f528:	b128      	cbz	r0, f536 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    f52a:	4620      	mov	r0, r4
    f52c:	f7fe fd9a 	bl	e064 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    f530:	b108      	cbz	r0, f536 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    f532:	2001      	movs	r0, #1
    f534:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f536:	4668      	mov	r0, sp
    f538:	f7f4 fe40 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f53c:	2800      	cmp	r0, #0
    f53e:	d0ef      	beq.n	f520 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43e>
    f540:	2000      	movs	r0, #0
    f542:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f544 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f544:	6802      	ldr	r2, [r0, #0]
    f546:	b912      	cbnz	r2, f54e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f548:	6001      	str	r1, [r0, #0]
    f54a:	4770      	bx	lr
    f54c:	4602      	mov	r2, r0
    f54e:	6850      	ldr	r0, [r2, #4]
    f550:	b108      	cbz	r0, f556 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f552:	428a      	cmp	r2, r1
    f554:	d1fa      	bne.n	f54c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f556:	428a      	cmp	r2, r1
    f558:	d0f7      	beq.n	f54a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f55a:	6051      	str	r1, [r2, #4]
    f55c:	4770      	bx	lr
    f55e:	b510      	push	{r4, lr}
    f560:	f7fe ff0f 	bl	e382 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    f564:	b108      	cbz	r0, f56a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f566:	21ea      	movs	r1, #234	; 0xea
    f568:	e004      	b.n	f574 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x30>
    f56a:	f7f6 ffa1 	bl	64b0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    f56e:	2800      	cmp	r0, #0
    f570:	d003      	beq.n	f57a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x36>
    f572:	21ef      	movs	r1, #239	; 0xef
    f574:	2001      	movs	r0, #1
    f576:	f7f4 fbf3 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f57a:	bd10      	pop	{r4, pc}
    f57c:	b50e      	push	{r1, r2, r3, lr}
    f57e:	4669      	mov	r1, sp
    f580:	2000      	movs	r0, #0
    f582:	f7fd fe0c 	bl	d19e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f586:	b158      	cbz	r0, f5a0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    f588:	21a0      	movs	r1, #160	; 0xa0
    f58a:	e006      	b.n	f59a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x56>
    f58c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    f590:	2100      	movs	r1, #0
    f592:	f7f4 fe63 	bl	425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f596:	b118      	cbz	r0, f5a0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    f598:	21a4      	movs	r1, #164	; 0xa4
    f59a:	2001      	movs	r0, #1
    f59c:	f7f4 fbe0 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5a0:	4668      	mov	r0, sp
    f5a2:	f7f4 fe0b 	bl	41bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f5a6:	2800      	cmp	r0, #0
    f5a8:	d0f0      	beq.n	f58c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x48>
    f5aa:	bd0e      	pop	{r1, r2, r3, pc}
    f5ac:	b510      	push	{r4, lr}
    f5ae:	4604      	mov	r4, r0
    f5b0:	e002      	b.n	f5b8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x74>
    f5b2:	6820      	ldr	r0, [r4, #0]
    f5b4:	4780      	blx	r0
    f5b6:	6864      	ldr	r4, [r4, #4]
    f5b8:	2c00      	cmp	r4, #0
    f5ba:	d1fa      	bne.n	f5b2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6e>
    f5bc:	bd10      	pop	{r4, pc}
    f5be:	b510      	push	{r4, lr}
    f5c0:	f7ff ffdc 	bl	f57c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    f5c4:	f7f4 ffc8 	bl	4558 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f5c8:	f7f5 fa1a 	bl	4a00 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f5cc:	f7f5 fbe4 	bl	4d98 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f5d0:	2800      	cmp	r0, #0
    f5d2:	d003      	beq.n	f5dc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    f5d4:	21c4      	movs	r1, #196	; 0xc4
    f5d6:	2001      	movs	r0, #1
    f5d8:	f7f4 fbc2 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5dc:	bd10      	pop	{r4, pc}
    f5de:	b510      	push	{r4, lr}
    f5e0:	f7ff ffbd 	bl	f55e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    f5e4:	f7ff f865 	bl	e6b2 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    f5e8:	2800      	cmp	r0, #0
    f5ea:	d004      	beq.n	f5f6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xb2>
    f5ec:	f44f 7183 	mov.w	r1, #262	; 0x106
    f5f0:	2001      	movs	r0, #1
    f5f2:	f7f4 fbb5 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5f6:	bd10      	pop	{r4, pc}

0000f5f8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f5f8:	b510      	push	{r4, lr}
    f5fa:	f7fb fc51 	bl	aea0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f5fe:	f000 f844 	bl	f68a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f602:	f7fb f925 	bl	a850 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f60a:	f7fb ba1b 	b.w	aa44 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f60e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f60e:	b510      	push	{r4, lr}
    f610:	24c8      	movs	r4, #200	; 0xc8
    f612:	1e64      	subs	r4, r4, #1
    f614:	b2e4      	uxtb	r4, r4
    f616:	f7fb f939 	bl	a88c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f61a:	2802      	cmp	r0, #2
    f61c:	d003      	beq.n	f626 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f61e:	2801      	cmp	r0, #1
    f620:	d000      	beq.n	f624 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f622:	2000      	movs	r0, #0
    f624:	bd10      	pop	{r4, pc}
    f626:	2c00      	cmp	r4, #0
    f628:	d1f3      	bne.n	f612 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f62a:	218f      	movs	r1, #143	; 0x8f
    f62c:	203b      	movs	r0, #59	; 0x3b
    f62e:	f7f4 fb97 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f632 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f632:	b510      	push	{r4, lr}
    f634:	f7f4 fa82 	bl	3b3c <mpsl_fem_lna_configuration_clear>
    f638:	2800      	cmp	r0, #0
    f63a:	d005      	beq.n	f648 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f63c:	1c40      	adds	r0, r0, #1
    f63e:	d003      	beq.n	f648 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f640:	214a      	movs	r1, #74	; 0x4a
    f642:	2040      	movs	r0, #64	; 0x40
    f644:	f7f4 fb8c 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f648:	bd10      	pop	{r4, pc}

0000f64a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f64a:	b510      	push	{r4, lr}
    f64c:	f7f4 fa82 	bl	3b54 <mpsl_fem_pa_configuration_clear>
    f650:	2800      	cmp	r0, #0
    f652:	d005      	beq.n	f660 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f654:	1c40      	adds	r0, r0, #1
    f656:	d003      	beq.n	f660 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f658:	2143      	movs	r1, #67	; 0x43
    f65a:	2040      	movs	r0, #64	; 0x40
    f65c:	f7f4 fb80 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f660:	bd10      	pop	{r4, pc}

0000f662 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f662:	b510      	push	{r4, lr}
    f664:	2100      	movs	r1, #0
    f666:	4608      	mov	r0, r1
    f668:	f7f4 fa6e 	bl	3b48 <mpsl_fem_lna_configuration_set>
    f66c:	b108      	cbz	r0, f672 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f66e:	2000      	movs	r0, #0
    f670:	bd10      	pop	{r4, pc}
    f672:	2001      	movs	r0, #1
    f674:	bd10      	pop	{r4, pc}

0000f676 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f676:	b508      	push	{r3, lr}
    f678:	4668      	mov	r0, sp
    f67a:	f7f4 fa77 	bl	3b6c <mpsl_fem_pa_is_configured>
    f67e:	f89d 0000 	ldrb.w	r0, [sp]
    f682:	2800      	cmp	r0, #0
    f684:	d000      	beq.n	f688 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f686:	2001      	movs	r0, #1
    f688:	bd08      	pop	{r3, pc}

0000f68a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f68a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f68e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f692:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f696:	f3bf 8f4f 	dsb	sy
    f69a:	f3bf 8f6f 	isb	sy
    f69e:	f7fb ba53 	b.w	ab48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f6a2:	2800      	cmp	r0, #0
    f6a4:	db09      	blt.n	f6ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f6a6:	f000 021f 	and.w	r2, r0, #31
    f6aa:	2101      	movs	r1, #1
    f6ac:	4091      	lsls	r1, r2
    f6ae:	0940      	lsrs	r0, r0, #5
    f6b0:	0080      	lsls	r0, r0, #2
    f6b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f6b6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f6ba:	4770      	bx	lr
    f6bc:	2800      	cmp	r0, #0
    f6be:	db0d      	blt.n	f6dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f6c0:	f000 021f 	and.w	r2, r0, #31
    f6c4:	2101      	movs	r1, #1
    f6c6:	4091      	lsls	r1, r2
    f6c8:	0940      	lsrs	r0, r0, #5
    f6ca:	0080      	lsls	r0, r0, #2
    f6cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f6d0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f6d4:	f3bf 8f4f 	dsb	sy
    f6d8:	f3bf 8f6f 	isb	sy
    f6dc:	4770      	bx	lr

0000f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f6de:	b510      	push	{r4, lr}
    f6e0:	2801      	cmp	r0, #1
    f6e2:	d006      	beq.n	f6f2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f6e4:	2802      	cmp	r0, #2
    f6e6:	d006      	beq.n	f6f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f6e8:	f640 31a9 	movw	r1, #2985	; 0xba9
    f6ec:	203e      	movs	r0, #62	; 0x3e
    f6ee:	f7f4 fb37 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6f2:	2028      	movs	r0, #40	; 0x28
    f6f4:	bd10      	pop	{r4, pc}
    f6f6:	2018      	movs	r0, #24
    f6f8:	bd10      	pop	{r4, pc}

0000f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f6fa:	b510      	push	{r4, lr}
    f6fc:	2801      	cmp	r0, #1
    f6fe:	d006      	beq.n	f70e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f700:	2802      	cmp	r0, #2
    f702:	d007      	beq.n	f714 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f704:	f640 31bd 	movw	r1, #3005	; 0xbbd
    f708:	203e      	movs	r0, #62	; 0x3e
    f70a:	f7f4 fb29 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f70e:	f641 6014 	movw	r0, #7700	; 0x1e14
    f712:	bd10      	pop	{r4, pc}
    f714:	f241 1030 	movw	r0, #4400	; 0x1130
    f718:	bd10      	pop	{r4, pc}

0000f71a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f71a:	f7fc b935 	b.w	b988 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48c>
    f71e:	b510      	push	{r4, lr}
    f720:	460a      	mov	r2, r1
    f722:	b130      	cbz	r0, f732 <__kernel_ram_size+0x12>
    f724:	2801      	cmp	r0, #1
    f726:	d00b      	beq.n	f740 <__kernel_ram_size+0x20>
    f728:	f240 612f 	movw	r1, #1583	; 0x62f
    f72c:	203e      	movs	r0, #62	; 0x3e
    f72e:	f7f4 fb17 	bl	3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f736:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f73a:	4610      	mov	r0, r2
    f73c:	f7fb b8fa 	b.w	a934 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f744:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f748:	4610      	mov	r0, r2
    f74a:	f7fb b8dd 	b.w	a908 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f74e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f74e:	b570      	push	{r4, r5, r6, lr}
    f750:	4605      	mov	r5, r0
    f752:	4614      	mov	r4, r2
    f754:	4608      	mov	r0, r1
    f756:	f7ff ffd0 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f75a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f75e:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f762:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f766:	4620      	mov	r0, r4
    f768:	f7ff ffc7 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f76c:	4428      	add	r0, r5
    f76e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f772:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f776:	fbb0 f5f1 	udiv	r5, r0, r1
    f77a:	4620      	mov	r0, r4
    f77c:	f7ff ffaf 	bl	f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f780:	4428      	add	r0, r5
    f782:	1d40      	adds	r0, r0, #5
    f784:	bd70      	pop	{r4, r5, r6, pc}

0000f786 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f78a:	4607      	mov	r7, r0
    f78c:	461d      	mov	r5, r3
    f78e:	460e      	mov	r6, r1
    f790:	4614      	mov	r4, r2
    f792:	4610      	mov	r0, r2
    f794:	f7ff ffb1 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f798:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f79c:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f7a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f7a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f7a8:	2e02      	cmp	r6, #2
    f7aa:	d00e      	beq.n	f7ca <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f7ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f7b0:	4411      	add	r1, r2
    f7b2:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f7b6:	fbb1 f6f0 	udiv	r6, r1, r0
    f7ba:	4620      	mov	r0, r4
    f7bc:	f7ff ff8f 	bl	f6de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f7c0:	4430      	add	r0, r6
    f7c2:	4428      	add	r0, r5
    f7c4:	1d40      	adds	r0, r0, #5
    f7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7ca:	4602      	mov	r2, r0
    f7cc:	e7f0      	b.n	f7b0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f7ce <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f7ce:	b510      	push	{r4, lr}
    f7d0:	4604      	mov	r4, r0
    f7d2:	4608      	mov	r0, r1
    f7d4:	f7ff ff91 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7dc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f7e0:	fbb0 f0f1 	udiv	r0, r0, r1
    f7e4:	1a20      	subs	r0, r4, r0
    f7e6:	1e80      	subs	r0, r0, #2
    f7e8:	bd10      	pop	{r4, pc}

0000f7ea <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f7ea:	b510      	push	{r4, lr}
    f7ec:	4604      	mov	r4, r0
    f7ee:	4608      	mov	r0, r1
    f7f0:	f7ff ff83 	bl	f6fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7f8:	fbb0 f0f1 	udiv	r0, r0, r1
    f7fc:	1a20      	subs	r0, r4, r0
    f7fe:	bd10      	pop	{r4, pc}

0000f800 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f804:	2902      	cmp	r1, #2
    f806:	d008      	beq.n	f81a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f808:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f80c:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f810:	fbb1 f1f2 	udiv	r1, r1, r2
    f814:	4408      	add	r0, r1
    f816:	1e80      	subs	r0, r0, #2
    f818:	4770      	bx	lr
    f81a:	4611      	mov	r1, r2
    f81c:	e7f6      	b.n	f80c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f81e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f81e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f822:	2902      	cmp	r1, #2
    f824:	d007      	beq.n	f836 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f826:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f82a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f82e:	fbb1 f1f2 	udiv	r1, r1, r2
    f832:	4408      	add	r0, r1
    f834:	4770      	bx	lr
    f836:	4611      	mov	r1, r2
    f838:	e7f7      	b.n	f82a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f83a:	080c      	.short	0x080c
    f83c:	010d1702 	.word	0x010d1702
    f840:	09090201 	.word	0x09090201
    f844:	02060101 	.word	0x02060101
    f848:	03181809 	.word	0x03181809
    f84c:	09090101 	.word	0x09090101
    f850:	00050303 	.word	0x00050303
    f854:	00000000 	.word	0x00000000

0000f858 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    f858:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f85a:	4d43      	ldr	r5, [pc, #268]	; (f968 <bt_init+0x110>)
    f85c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    f860:	6899      	ldr	r1, [r3, #8]
    f862:	f011 0101 	ands.w	r1, r1, #1
{
    f866:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f868:	d121      	bne.n	f8ae <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f86a:	aa03      	add	r2, sp, #12
    f86c:	f640 4003 	movw	r0, #3075	; 0xc03
    f870:	f004 fe5a 	bl	14528 <bt_hci_cmd_send_sync>
		if (err) {
    f874:	4604      	mov	r4, r0
    f876:	2800      	cmp	r0, #0
    f878:	d173      	bne.n	f962 <bt_init+0x10a>
		hci_reset_complete(rsp);
    f87a:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
    f87c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f87e:	781b      	ldrb	r3, [r3, #0]
    f880:	b993      	cbnz	r3, f8a8 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f882:	f3bf 8f5b 	dmb	ish
    f886:	462b      	mov	r3, r5
    f888:	f853 2f98 	ldr.w	r2, [r3, #152]!
    f88c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f890:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f894:	f3bf 8f5b 	dmb	ish
    f898:	e853 1f00 	ldrex	r1, [r3]
    f89c:	e843 2000 	strex	r0, r2, [r3]
    f8a0:	2800      	cmp	r0, #0
    f8a2:	d1f9      	bne.n	f898 <bt_init+0x40>
    f8a4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    f8a8:	9803      	ldr	r0, [sp, #12]
    f8aa:	f00b f9b7 	bl	1ac1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f8ae:	aa03      	add	r2, sp, #12
    f8b0:	2100      	movs	r1, #0
    f8b2:	f241 0003 	movw	r0, #4099	; 0x1003
    f8b6:	f004 fe37 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    f8ba:	4604      	mov	r4, r0
    f8bc:	2800      	cmp	r0, #0
    f8be:	d150      	bne.n	f962 <bt_init+0x10a>
	read_local_features_complete(rsp);
    f8c0:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f8c2:	482a      	ldr	r0, [pc, #168]	; (f96c <bt_init+0x114>)
    f8c4:	6899      	ldr	r1, [r3, #8]
    f8c6:	2208      	movs	r2, #8
    f8c8:	3101      	adds	r1, #1
    f8ca:	f010 fcb4 	bl	20236 <memcpy>
	net_buf_unref(rsp);
    f8ce:	9803      	ldr	r0, [sp, #12]
    f8d0:	f00b f9a4 	bl	1ac1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f8d4:	4621      	mov	r1, r4
    f8d6:	aa03      	add	r2, sp, #12
    f8d8:	f241 0001 	movw	r0, #4097	; 0x1001
    f8dc:	f004 fe24 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    f8e0:	4604      	mov	r4, r0
    f8e2:	2800      	cmp	r0, #0
    f8e4:	d13d      	bne.n	f962 <bt_init+0x10a>
	read_local_ver_complete(rsp);
    f8e6:	9803      	ldr	r0, [sp, #12]
    f8e8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f8ea:	785a      	ldrb	r2, [r3, #1]
    f8ec:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f8f0:	78d9      	ldrb	r1, [r3, #3]
    f8f2:	789a      	ldrb	r2, [r3, #2]
    f8f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f8f8:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    f8fa:	791a      	ldrb	r2, [r3, #4]
    f8fc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f900:	7a19      	ldrb	r1, [r3, #8]
    f902:	79da      	ldrb	r2, [r3, #7]
    f904:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f908:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f90a:	795a      	ldrb	r2, [r3, #5]
    f90c:	799b      	ldrb	r3, [r3, #6]
    f90e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f912:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    f914:	f00b f982 	bl	1ac1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f918:	4621      	mov	r1, r4
    f91a:	aa03      	add	r2, sp, #12
    f91c:	f241 0002 	movw	r0, #4098	; 0x1002
    f920:	f004 fe02 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    f924:	4604      	mov	r4, r0
    f926:	b9e0      	cbnz	r0, f962 <bt_init+0x10a>
	read_supported_commands_complete(rsp);
    f928:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    f92a:	4811      	ldr	r0, [pc, #68]	; (f970 <bt_init+0x118>)
    f92c:	6899      	ldr	r1, [r3, #8]
    f92e:	2240      	movs	r2, #64	; 0x40
    f930:	3101      	adds	r1, #1
    f932:	f010 fc80 	bl	20236 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    f936:	480e      	ldr	r0, [pc, #56]	; (f970 <bt_init+0x118>)
    f938:	f010 fd49 	bl	203ce <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    f93c:	9803      	ldr	r0, [sp, #12]
    f93e:	f00b f96d 	bl	1ac1c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f942:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f946:	065a      	lsls	r2, r3, #25
    f948:	d41a      	bmi.n	f980 <bt_init+0x128>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    f94a:	4b0a      	ldr	r3, [pc, #40]	; (f974 <bt_init+0x11c>)
    f94c:	490a      	ldr	r1, [pc, #40]	; (f978 <bt_init+0x120>)
		BT_ERR("Non-LE capable controller detected!");
    f94e:	480b      	ldr	r0, [pc, #44]	; (f97c <bt_init+0x124>)
    f950:	1ac9      	subs	r1, r1, r3
    f952:	08c9      	lsrs	r1, r1, #3
    f954:	0189      	lsls	r1, r1, #6
    f956:	f041 0101 	orr.w	r1, r1, #1
    f95a:	f00e fe12 	bl	1e582 <log_0>
		return -ENODEV;
    f95e:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    f962:	4620      	mov	r0, r4
    f964:	b008      	add	sp, #32
    f966:	bd70      	pop	{r4, r5, r6, pc}
    f968:	200002a0 	.word	0x200002a0
    f96c:	200002dc 	.word	0x200002dc
    f970:	200002e4 	.word	0x200002e4
    f974:	0002353c 	.word	0x0002353c
    f978:	0002357c 	.word	0x0002357c
    f97c:	00024f56 	.word	0x00024f56
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f980:	4621      	mov	r1, r4
    f982:	aa03      	add	r2, sp, #12
    f984:	f242 0003 	movw	r0, #8195	; 0x2003
    f988:	f004 fdce 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    f98c:	4604      	mov	r4, r0
    f98e:	2800      	cmp	r0, #0
    f990:	d1e7      	bne.n	f962 <bt_init+0x10a>
	read_le_features_complete(rsp);
    f992:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f994:	48a4      	ldr	r0, [pc, #656]	; (fc28 <bt_init+0x3d0>)
    f996:	6899      	ldr	r1, [r3, #8]
    f998:	2208      	movs	r2, #8
    f99a:	3101      	adds	r1, #1
    f99c:	f010 fc4b 	bl	20236 <memcpy>
	net_buf_unref(rsp);
    f9a0:	9803      	ldr	r0, [sp, #12]
    f9a2:	f00b f93b 	bl	1ac1c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f9a6:	4621      	mov	r1, r4
    f9a8:	aa03      	add	r2, sp, #12
    f9aa:	f242 0002 	movw	r0, #8194	; 0x2002
    f9ae:	f004 fdbb 	bl	14528 <bt_hci_cmd_send_sync>
		if (err) {
    f9b2:	4604      	mov	r4, r0
    f9b4:	2800      	cmp	r0, #0
    f9b6:	d1d4      	bne.n	f962 <bt_init+0x10a>
		le_read_buffer_size_complete(rsp);
    f9b8:	9b03      	ldr	r3, [sp, #12]
    f9ba:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f9bc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f9c0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    f9c4:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    f9c6:	b121      	cbz	r1, f9d2 <bt_init+0x17a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f9c8:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    f9ca:	4898      	ldr	r0, [pc, #608]	; (fc2c <bt_init+0x3d4>)
    f9cc:	4611      	mov	r1, r2
    f9ce:	f013 f869 	bl	22aa4 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f9d2:	9803      	ldr	r0, [sp, #12]
    f9d4:	f00b f922 	bl	1ac1c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f9d8:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    f9dc:	f016 0620 	ands.w	r6, r6, #32
    f9e0:	f000 80fe 	beq.w	fbe0 <bt_init+0x388>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f9e4:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    f9e8:	071b      	lsls	r3, r3, #28
    f9ea:	d511      	bpl.n	fa10 <bt_init+0x1b8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f9ec:	aa03      	add	r2, sp, #12
    f9ee:	2100      	movs	r1, #0
    f9f0:	f242 001c 	movw	r0, #8220	; 0x201c
    f9f4:	f004 fd98 	bl	14528 <bt_hci_cmd_send_sync>
		if (err) {
    f9f8:	4604      	mov	r4, r0
    f9fa:	2800      	cmp	r0, #0
    f9fc:	d1b1      	bne.n	f962 <bt_init+0x10a>
		le_read_supp_states_complete(rsp);
    f9fe:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    fa00:	6883      	ldr	r3, [r0, #8]
    fa02:	f853 2f01 	ldr.w	r2, [r3, #1]!
    fa06:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    fa08:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    fa0c:	f00b f906 	bl	1ac1c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    fa10:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    fa14:	069e      	lsls	r6, r3, #26
    fa16:	d523      	bpl.n	fa60 <bt_init+0x208>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    fa18:	a902      	add	r1, sp, #8
    fa1a:	f10d 0006 	add.w	r0, sp, #6
    fa1e:	f004 fdfb 	bl	14618 <hci_le_read_max_data_len>
		if (err) {
    fa22:	4604      	mov	r4, r0
    fa24:	2800      	cmp	r0, #0
    fa26:	d19c      	bne.n	f962 <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    fa28:	2104      	movs	r1, #4
    fa2a:	f242 0024 	movw	r0, #8228	; 0x2024
    fa2e:	f004 fc1f 	bl	14270 <bt_hci_cmd_create>
		if (!buf) {
    fa32:	4606      	mov	r6, r0
    fa34:	2800      	cmp	r0, #0
    fa36:	f000 80da 	beq.w	fbee <bt_init+0x396>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    fa3a:	2104      	movs	r1, #4
    fa3c:	3008      	adds	r0, #8
    fa3e:	f012 fd27 	bl	22490 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    fa42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fa46:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    fa48:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    fa4c:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    fa4e:	4622      	mov	r2, r4
    fa50:	4631      	mov	r1, r6
    fa52:	f242 0024 	movw	r0, #8228	; 0x2024
    fa56:	f004 fd67 	bl	14528 <bt_hci_cmd_send_sync>
		if (err) {
    fa5a:	4604      	mov	r4, r0
    fa5c:	2800      	cmp	r0, #0
    fa5e:	d180      	bne.n	f962 <bt_init+0x10a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    fa60:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    fa64:	065c      	lsls	r4, r3, #25
    fa66:	d510      	bpl.n	fa8a <bt_init+0x232>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    fa68:	aa03      	add	r2, sp, #12
    fa6a:	2100      	movs	r1, #0
    fa6c:	f242 002a 	movw	r0, #8234	; 0x202a
    fa70:	f004 fd5a 	bl	14528 <bt_hci_cmd_send_sync>
		if (err) {
    fa74:	4604      	mov	r4, r0
    fa76:	2800      	cmp	r0, #0
    fa78:	f47f af73 	bne.w	f962 <bt_init+0x10a>
		le_read_resolving_list_size_complete(rsp);
    fa7c:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
    fa7e:	6883      	ldr	r3, [r0, #8]
    fa80:	785b      	ldrb	r3, [r3, #1]
    fa82:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
    fa86:	f00b f8c9 	bl	1ac1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    fa8a:	2108      	movs	r1, #8
    fa8c:	f242 0001 	movw	r0, #8193	; 0x2001
    fa90:	f004 fbee 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
    fa94:	4604      	mov	r4, r0
    fa96:	2800      	cmp	r0, #0
    fa98:	f000 80a9 	beq.w	fbee <bt_init+0x396>
    fa9c:	2108      	movs	r1, #8
    fa9e:	4408      	add	r0, r1
    faa0:	f012 fcf6 	bl	22490 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    faa4:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    faa8:	f011 0f40 	tst.w	r1, #64	; 0x40
    faac:	4602      	mov	r2, r0
    faae:	f240 2302 	movw	r3, #514	; 0x202
    fab2:	bf08      	it	eq
    fab4:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    fab6:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    fab8:	bf4c      	ite	mi
    faba:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    fabe:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    fac2:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    fac4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    fac8:	bf48      	it	mi
    faca:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    face:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    fad2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    fad6:	bf18      	it	ne
    fad8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    fadc:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    fae0:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    fae2:	bf48      	it	mi
    fae4:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    fae8:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    faea:	bf08      	it	eq
    faec:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    faf0:	2100      	movs	r1, #0
    faf2:	f010 fd3d 	bl	20570 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    faf6:	4621      	mov	r1, r4
    faf8:	2200      	movs	r2, #0
    fafa:	f242 0001 	movw	r0, #8193	; 0x2001
    fafe:	f004 fd13 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    fb02:	4604      	mov	r4, r0
    fb04:	2800      	cmp	r0, #0
    fb06:	f47f af2c 	bne.w	f962 <bt_init+0x10a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    fb0a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    fb0e:	0698      	lsls	r0, r3, #26
    fb10:	d41e      	bmi.n	fb50 <bt_init+0x2f8>
	if (bt_dev.le.acl_mtu) {
    fb12:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    fb16:	b9d9      	cbnz	r1, fb50 <bt_init+0x2f8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    fb18:	aa03      	add	r2, sp, #12
    fb1a:	f241 0005 	movw	r0, #4101	; 0x1005
    fb1e:	f004 fd03 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    fb22:	4604      	mov	r4, r0
    fb24:	2800      	cmp	r0, #0
    fb26:	f47f af1c 	bne.w	f962 <bt_init+0x10a>
	if (bt_dev.le.acl_mtu) {
    fb2a:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    fb2e:	b963      	cbnz	r3, fb4a <bt_init+0x2f2>
	read_buffer_size_complete(rsp);
    fb30:	9b03      	ldr	r3, [sp, #12]
    fb32:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    fb34:	785a      	ldrb	r2, [r3, #1]
    fb36:	7899      	ldrb	r1, [r3, #2]
    fb38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb3c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    fb40:	889a      	ldrh	r2, [r3, #4]
    fb42:	483a      	ldr	r0, [pc, #232]	; (fc2c <bt_init+0x3d4>)
    fb44:	4611      	mov	r1, r2
    fb46:	f012 ffad 	bl	22aa4 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    fb4a:	9803      	ldr	r0, [sp, #12]
    fb4c:	f00b f866 	bl	1ac1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    fb50:	2108      	movs	r1, #8
    fb52:	f640 4001 	movw	r0, #3073	; 0xc01
    fb56:	f004 fb8b 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
    fb5a:	4604      	mov	r4, r0
    fb5c:	2800      	cmp	r0, #0
    fb5e:	d046      	beq.n	fbee <bt_init+0x396>
    fb60:	2108      	movs	r1, #8
    fb62:	4408      	add	r0, r1
    fb64:	f012 fc94 	bl	22490 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    fb68:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    fb6c:	07d9      	lsls	r1, r3, #31
    fb6e:	4602      	mov	r2, r0
    fb70:	d552      	bpl.n	fc18 <bt_init+0x3c0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    fb72:	a12b      	add	r1, pc, #172	; (adr r1, fc20 <bt_init+0x3c8>)
    fb74:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    fb78:	f010 fcfa 	bl	20570 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    fb7c:	4621      	mov	r1, r4
    fb7e:	2200      	movs	r2, #0
    fb80:	f640 4001 	movw	r0, #3073	; 0xc01
    fb84:	f004 fcd0 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    fb88:	4604      	mov	r4, r0
    fb8a:	2800      	cmp	r0, #0
    fb8c:	f47f aee9 	bne.w	f962 <bt_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    fb90:	4601      	mov	r1, r0
    fb92:	aa02      	add	r2, sp, #8
    fb94:	f64f 4001 	movw	r0, #64513	; 0xfc01
    fb98:	f004 fcc6 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    fb9c:	4e24      	ldr	r6, [pc, #144]	; (fc30 <bt_init+0x3d8>)
    fb9e:	4b25      	ldr	r3, [pc, #148]	; (fc34 <bt_init+0x3dc>)
    fba0:	1af6      	subs	r6, r6, r3
    fba2:	08f6      	lsrs	r6, r6, #3
    fba4:	01b6      	lsls	r6, r6, #6
    fba6:	2800      	cmp	r0, #0
    fba8:	d04c      	beq.n	fc44 <bt_init+0x3ec>
		BT_WARN("Vendor HCI extensions not available");
    fbaa:	4823      	ldr	r0, [pc, #140]	; (fc38 <bt_init+0x3e0>)
    fbac:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    fbb0:	f00e fce7 	bl	1e582 <log_0>
	err = bt_id_init();
    fbb4:	f010 fe60 	bl	20878 <bt_id_init>
	if (err) {
    fbb8:	4604      	mov	r4, r0
    fbba:	2800      	cmp	r0, #0
    fbbc:	f47f aed1 	bne.w	f962 <bt_init+0x10a>
		err = bt_conn_init();
    fbc0:	f006 fdfa 	bl	167b8 <bt_conn_init>
		if (err) {
    fbc4:	4604      	mov	r4, r0
    fbc6:	2800      	cmp	r0, #0
    fbc8:	f47f aecb 	bne.w	f962 <bt_init+0x10a>
		if (!bt_dev.id_count) {
    fbcc:	79eb      	ldrb	r3, [r5, #7]
    fbce:	2b00      	cmp	r3, #0
    fbd0:	f040 80a5 	bne.w	fd1e <bt_init+0x4c6>
			BT_INFO("No ID address. App must call settings_load()");
    fbd4:	4819      	ldr	r0, [pc, #100]	; (fc3c <bt_init+0x3e4>)
    fbd6:	f046 0103 	orr.w	r1, r6, #3
    fbda:	f00e fcd2 	bl	1e582 <log_0>
			return 0;
    fbde:	e6c0      	b.n	f962 <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    fbe0:	2102      	movs	r1, #2
    fbe2:	f640 406d 	movw	r0, #3181	; 0xc6d
    fbe6:	f004 fb43 	bl	14270 <bt_hci_cmd_create>
		if (!buf) {
    fbea:	4604      	mov	r4, r0
    fbec:	b910      	cbnz	r0, fbf4 <bt_init+0x39c>
		return -ENOBUFS;
    fbee:	f06f 0468 	mvn.w	r4, #104	; 0x68
    fbf2:	e6b6      	b.n	f962 <bt_init+0x10a>
    fbf4:	2102      	movs	r1, #2
    fbf6:	3008      	adds	r0, #8
    fbf8:	f012 fc4a 	bl	22490 <net_buf_simple_add>
		cp_le->le = 0x01;
    fbfc:	2301      	movs	r3, #1
    fbfe:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    fc00:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    fc02:	4621      	mov	r1, r4
    fc04:	4632      	mov	r2, r6
    fc06:	f640 406d 	movw	r0, #3181	; 0xc6d
    fc0a:	f004 fc8d 	bl	14528 <bt_hci_cmd_send_sync>
		if (err) {
    fc0e:	4604      	mov	r4, r0
    fc10:	2800      	cmp	r0, #0
    fc12:	f43f aee7 	beq.w	f9e4 <bt_init+0x18c>
    fc16:	e6a4      	b.n	f962 <bt_init+0x10a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    fc18:	4809      	ldr	r0, [pc, #36]	; (fc40 <bt_init+0x3e8>)
    fc1a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    fc1e:	e7ab      	b.n	fb78 <bt_init+0x320>
    fc20:	02008890 	.word	0x02008890
    fc24:	20008000 	.word	0x20008000
    fc28:	20000340 	.word	0x20000340
    fc2c:	20000370 	.word	0x20000370
    fc30:	0002357c 	.word	0x0002357c
    fc34:	0002353c 	.word	0x0002353c
    fc38:	00024f7a 	.word	0x00024f7a
    fc3c:	0002504e 	.word	0x0002504e
    fc40:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    fc44:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    fc46:	4839      	ldr	r0, [pc, #228]	; (fd2c <bt_init+0x4d4>)
	rp.info = (void *)rsp->data;
    fc48:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    fc4a:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    fc4e:	2a03      	cmp	r2, #3
		return plat_str[platform];
    fc50:	bf96      	itet	ls
    fc52:	4937      	ldrls	r1, [pc, #220]	; (fd30 <bt_init+0x4d8>)
	return "unknown";
    fc54:	4937      	ldrhi	r1, [pc, #220]	; (fd34 <bt_init+0x4dc>)
		return plat_str[platform];
    fc56:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    fc5a:	f046 0303 	orr.w	r3, r6, #3
    fc5e:	f00e fcb1 	bl	1e5c4 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    fc62:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    fc66:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    fc6a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    fc6c:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    fc70:	d12e      	bne.n	fcd0 <bt_init+0x478>
	if (variant < ARRAY_SIZE(nordic_str)) {
    fc72:	2a03      	cmp	r2, #3
    fc74:	d82c      	bhi.n	fcd0 <bt_init+0x478>
		return nordic_str[variant];
    fc76:	4930      	ldr	r1, [pc, #192]	; (fd38 <bt_init+0x4e0>)
    fc78:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    fc7c:	482f      	ldr	r0, [pc, #188]	; (fd3c <bt_init+0x4e4>)
    fc7e:	f00e fca1 	bl	1e5c4 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    fc82:	7962      	ldrb	r2, [r4, #5]
    fc84:	482e      	ldr	r0, [pc, #184]	; (fd40 <bt_init+0x4e8>)
	if (variant < ARRAY_SIZE(var_str)) {
    fc86:	2a03      	cmp	r2, #3
		return var_str[variant];
    fc88:	bf96      	itet	ls
    fc8a:	492e      	ldrls	r1, [pc, #184]	; (fd44 <bt_init+0x4ec>)
	return "unknown";
    fc8c:	4929      	ldrhi	r1, [pc, #164]	; (fd34 <bt_init+0x4dc>)
		return var_str[variant];
    fc8e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    fc92:	e9cd 1203 	strd	r1, r2, [sp, #12]
    fc96:	79a2      	ldrb	r2, [r4, #6]
    fc98:	9205      	str	r2, [sp, #20]
    fc9a:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    fc9e:	9206      	str	r2, [sp, #24]
    fca0:	f8d4 2009 	ldr.w	r2, [r4, #9]
    fca4:	9207      	str	r2, [sp, #28]
    fca6:	f046 0303 	orr.w	r3, r6, #3
    fcaa:	2205      	movs	r2, #5
    fcac:	a903      	add	r1, sp, #12
    fcae:	f00e fcbe 	bl	1e62e <log_n>
	net_buf_unref(rsp);
    fcb2:	9802      	ldr	r0, [sp, #8]
    fcb4:	f00a ffb2 	bl	1ac1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    fcb8:	aa02      	add	r2, sp, #8
    fcba:	2100      	movs	r1, #0
    fcbc:	f64f 4002 	movw	r0, #64514	; 0xfc02
    fcc0:	f004 fc32 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
    fcc4:	4604      	mov	r4, r0
    fcc6:	b128      	cbz	r0, fcd4 <bt_init+0x47c>
		BT_WARN("Failed to read supported vendor commands");
    fcc8:	481f      	ldr	r0, [pc, #124]	; (fd48 <bt_init+0x4f0>)
    fcca:	f046 0102 	orr.w	r1, r6, #2
    fcce:	e76f      	b.n	fbb0 <bt_init+0x358>
		return "unknown";
    fcd0:	4918      	ldr	r1, [pc, #96]	; (fd34 <bt_init+0x4dc>)
    fcd2:	e7d3      	b.n	fc7c <bt_init+0x424>
	rp.cmds = (void *)rsp->data;
    fcd4:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    fcd6:	481d      	ldr	r0, [pc, #116]	; (fd4c <bt_init+0x4f4>)
    fcd8:	6899      	ldr	r1, [r3, #8]
    fcda:	2202      	movs	r2, #2
    fcdc:	3101      	adds	r1, #1
    fcde:	f010 faaa 	bl	20236 <memcpy>
	net_buf_unref(rsp);
    fce2:	9802      	ldr	r0, [sp, #8]
    fce4:	f00a ff9a 	bl	1ac1c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    fce8:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    fcec:	075b      	lsls	r3, r3, #29
    fcee:	f57f af61 	bpl.w	fbb4 <bt_init+0x35c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    fcf2:	aa02      	add	r2, sp, #8
    fcf4:	4621      	mov	r1, r4
    fcf6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    fcfa:	f004 fc15 	bl	14528 <bt_hci_cmd_send_sync>
		if (err) {
    fcfe:	b118      	cbz	r0, fd08 <bt_init+0x4b0>
			BT_WARN("Failed to read supported vendor features");
    fd00:	4813      	ldr	r0, [pc, #76]	; (fd50 <bt_init+0x4f8>)
    fd02:	f046 0102 	orr.w	r1, r6, #2
    fd06:	e753      	b.n	fbb0 <bt_init+0x358>
		rp.feat = (void *)rsp->data;
    fd08:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    fd0a:	4812      	ldr	r0, [pc, #72]	; (fd54 <bt_init+0x4fc>)
    fd0c:	6899      	ldr	r1, [r3, #8]
    fd0e:	2201      	movs	r2, #1
    fd10:	4411      	add	r1, r2
    fd12:	f010 fa90 	bl	20236 <memcpy>
		net_buf_unref(rsp);
    fd16:	9802      	ldr	r0, [sp, #8]
    fd18:	f00a ff80 	bl	1ac1c <net_buf_unref>
    fd1c:	e74a      	b.n	fbb4 <bt_init+0x35c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fd1e:	2104      	movs	r1, #4
    fd20:	480d      	ldr	r0, [pc, #52]	; (fd58 <bt_init+0x500>)
    fd22:	f010 fc16 	bl	20552 <atomic_or>
	bt_finalize_init();
    fd26:	f004 ff35 	bl	14b94 <bt_finalize_init>
	return 0;
    fd2a:	e61a      	b.n	f962 <bt_init+0x10a>
    fd2c:	00024f9e 	.word	0x00024f9e
    fd30:	00023b54 	.word	0x00023b54
    fd34:	00024a6e 	.word	0x00024a6e
    fd38:	00023b14 	.word	0x00023b14
    fd3c:	00024fb7 	.word	0x00024fb7
    fd40:	00024fcf 	.word	0x00024fcf
    fd44:	00023b8c 	.word	0x00023b8c
    fd48:	00024ffc 	.word	0x00024ffc
    fd4c:	20000325 	.word	0x20000325
    fd50:	00025025 	.word	0x00025025
    fd54:	20000324 	.word	0x20000324
    fd58:	20000338 	.word	0x20000338

0000fd5c <hrmc_ccc_cfg_changed>:
    fd5c:	4b07      	ldr	r3, [pc, #28]	; (fd7c <hrmc_ccc_cfg_changed+0x20>)
    fd5e:	4a08      	ldr	r2, [pc, #32]	; (fd80 <hrmc_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    fd60:	4808      	ldr	r0, [pc, #32]	; (fd84 <hrmc_ccc_cfg_changed+0x28>)
    fd62:	1ad2      	subs	r2, r2, r3
    fd64:	08d2      	lsrs	r2, r2, #3
    fd66:	4b08      	ldr	r3, [pc, #32]	; (fd88 <hrmc_ccc_cfg_changed+0x2c>)
    fd68:	0192      	lsls	r2, r2, #6
    fd6a:	2901      	cmp	r1, #1
    fd6c:	bf14      	ite	ne
    fd6e:	4601      	movne	r1, r0
    fd70:	4619      	moveq	r1, r3
    fd72:	f042 0203 	orr.w	r2, r2, #3
    fd76:	4805      	ldr	r0, [pc, #20]	; (fd8c <hrmc_ccc_cfg_changed+0x30>)
    fd78:	f00e bc10 	b.w	1e59c <log_1>
    fd7c:	0002353c 	.word	0x0002353c
    fd80:	000235e4 	.word	0x000235e4
    fd84:	00023ed0 	.word	0x00023ed0
    fd88:	00023ec8 	.word	0x00023ec8
    fd8c:	00023ed9 	.word	0x00023ed9

0000fd90 <bt_dclk_notify>:

	return 0;
}

int bt_dclk_notify(uint16_t dclk_value, uint16_t dclk_state)
{
    fd90:	b510      	push	{r4, lr}
	int rc;
	static uint16_t hrm[2];

	hrm[0] = dclk_state; /* uint8, sensor contact */
    fd92:	4c0c      	ldr	r4, [pc, #48]	; (fdc4 <bt_dclk_notify+0x34>)
{
    fd94:	b086      	sub	sp, #24
	hrm[0] = dclk_state; /* uint8, sensor contact */
    fd96:	8021      	strh	r1, [r4, #0]
	hrm[1] = dclk_value;
    fd98:	8060      	strh	r0, [r4, #2]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    fd9a:	2218      	movs	r2, #24
    fd9c:	2100      	movs	r1, #0
    fd9e:	4668      	mov	r0, sp
    fda0:	f010 fa74 	bl	2028c <memset>

	params.attr = attr;
    fda4:	4b08      	ldr	r3, [pc, #32]	; (fdc8 <bt_dclk_notify+0x38>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    fda6:	4669      	mov	r1, sp
	params.data = data;
    fda8:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    fdac:	2000      	movs	r0, #0
	params.len = len;
    fdae:	2304      	movs	r3, #4
    fdb0:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    fdb4:	f008 fe2e 	bl	18a14 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
}
    fdb8:	f110 0f80 	cmn.w	r0, #128	; 0x80
    fdbc:	bf08      	it	eq
    fdbe:	2000      	moveq	r0, #0
    fdc0:	b006      	add	sp, #24
    fdc2:	bd10      	pop	{r4, pc}
    fdc4:	20002150 	.word	0x20002150
    fdc8:	0002376c 	.word	0x0002376c

0000fdcc <passkey_display>:
	bt_conn_auth_passkey_entry(conn, 123456);
}

void passkey_display(struct bt_conn *conn, unsigned int passkey)
{
	printk("Controller passkey = %d", passkey);
    fdcc:	4801      	ldr	r0, [pc, #4]	; (fdd4 <passkey_display+0x8>)
    fdce:	f00d bf93 	b.w	1dcf8 <printk>
    fdd2:	bf00      	nop
    fdd4:	00023ef2 	.word	0x00023ef2

0000fdd8 <disconnected>:
	printk("Disconnected (reason 0x%02x)\n", reason);
    fdd8:	4801      	ldr	r0, [pc, #4]	; (fde0 <disconnected+0x8>)
    fdda:	f00d bf8d 	b.w	1dcf8 <printk>
    fdde:	bf00      	nop
    fde0:	00023f0a 	.word	0x00023f0a

0000fde4 <connected>:
	if (err) {
    fde4:	b111      	cbz	r1, fdec <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    fde6:	4803      	ldr	r0, [pc, #12]	; (fdf4 <connected+0x10>)
    fde8:	f00d bf86 	b.w	1dcf8 <printk>
		printk("Connected\n");
    fdec:	4802      	ldr	r0, [pc, #8]	; (fdf8 <connected+0x14>)
    fdee:	f00d bf83 	b.w	1dcf8 <printk>
    fdf2:	bf00      	nop
    fdf4:	00023f28 	.word	0x00023f28
    fdf8:	00023f48 	.word	0x00023f48

0000fdfc <passkey_confirm>:
}

void passkey_confirm(struct bt_conn *conn, unsigned int passkey)
{
    fdfc:	b510      	push	{r4, lr}
    fdfe:	4604      	mov	r4, r0
	printk("Confirm Passkey = %d", passkey);
    fe00:	4803      	ldr	r0, [pc, #12]	; (fe10 <passkey_confirm+0x14>)
    fe02:	f00d ff79 	bl	1dcf8 <printk>
	bt_conn_auth_passkey_confirm(conn);
    fe06:	4620      	mov	r0, r4
}
    fe08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_auth_passkey_confirm(conn);
    fe0c:	f006 bcac 	b.w	16768 <bt_conn_auth_passkey_confirm>
    fe10:	00023f53 	.word	0x00023f53

0000fe14 <dclk_expire_cb>:


static void dclk_expire_cb(struct k_timer *timer_id)
{
	//dclk_start();
	dclk_state = EXPRIRE;
    fe14:	4b03      	ldr	r3, [pc, #12]	; (fe24 <dclk_expire_cb+0x10>)
    fe16:	2103      	movs	r1, #3
    fe18:	7019      	strb	r1, [r3, #0]
	dclk_value = 0;
    fe1a:	4b03      	ldr	r3, [pc, #12]	; (fe28 <dclk_expire_cb+0x14>)
    fe1c:	2000      	movs	r0, #0
    fe1e:	6018      	str	r0, [r3, #0]
	bt_dclk_notify(dclk_value, dclk_state);
    fe20:	f7ff bfb6 	b.w	fd90 <bt_dclk_notify>
    fe24:	20002170 	.word	0x20002170
    fe28:	20001d70 	.word	0x20001d70

0000fe2c <passkey_entry>:
{
    fe2c:	b538      	push	{r3, r4, r5, lr}
	printk("Sending entry passkey = %d", 123456);
    fe2e:	4d06      	ldr	r5, [pc, #24]	; (fe48 <passkey_entry+0x1c>)
{
    fe30:	4604      	mov	r4, r0
	printk("Sending entry passkey = %d", 123456);
    fe32:	4629      	mov	r1, r5
    fe34:	4805      	ldr	r0, [pc, #20]	; (fe4c <passkey_entry+0x20>)
    fe36:	f00d ff5f 	bl	1dcf8 <printk>
	bt_conn_auth_passkey_entry(conn, 123456);
    fe3a:	4629      	mov	r1, r5
    fe3c:	4620      	mov	r0, r4
}
    fe3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_auth_passkey_entry(conn, 123456);
    fe42:	f006 bc81 	b.w	16748 <bt_conn_auth_passkey_entry>
    fe46:	bf00      	nop
    fe48:	0001e240 	.word	0x0001e240
    fe4c:	00023f68 	.word	0x00023f68

0000fe50 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    fe50:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    fe52:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    fe54:	b08a      	sub	sp, #40	; 0x28
    fe56:	4604      	mov	r4, r0
    fe58:	460e      	mov	r6, r1
    fe5a:	ad07      	add	r5, sp, #28
    fe5c:	2b03      	cmp	r3, #3
    fe5e:	d820      	bhi.n	fea2 <bt_addr_le_to_str.constprop.0+0x52>
    fe60:	e8df f003 	tbb	[pc, r3]
    fe64:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    fe68:	4911      	ldr	r1, [pc, #68]	; (feb0 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    fe6a:	4628      	mov	r0, r5
    fe6c:	f010 f98b 	bl	20186 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fe70:	7863      	ldrb	r3, [r4, #1]
    fe72:	9304      	str	r3, [sp, #16]
    fe74:	78a3      	ldrb	r3, [r4, #2]
    fe76:	9303      	str	r3, [sp, #12]
    fe78:	78e3      	ldrb	r3, [r4, #3]
    fe7a:	9302      	str	r3, [sp, #8]
    fe7c:	7923      	ldrb	r3, [r4, #4]
    fe7e:	9301      	str	r3, [sp, #4]
    fe80:	7963      	ldrb	r3, [r4, #5]
    fe82:	9300      	str	r3, [sp, #0]
    fe84:	4a0b      	ldr	r2, [pc, #44]	; (feb4 <bt_addr_le_to_str.constprop.0+0x64>)
    fe86:	79a3      	ldrb	r3, [r4, #6]
    fe88:	9505      	str	r5, [sp, #20]
    fe8a:	211e      	movs	r1, #30
    fe8c:	4630      	mov	r0, r6
    fe8e:	f00d ff40 	bl	1dd12 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    fe92:	b00a      	add	sp, #40	; 0x28
    fe94:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    fe96:	4908      	ldr	r1, [pc, #32]	; (feb8 <bt_addr_le_to_str.constprop.0+0x68>)
    fe98:	e7e7      	b.n	fe6a <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    fe9a:	4908      	ldr	r1, [pc, #32]	; (febc <bt_addr_le_to_str.constprop.0+0x6c>)
    fe9c:	e7e5      	b.n	fe6a <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    fe9e:	4908      	ldr	r1, [pc, #32]	; (fec0 <bt_addr_le_to_str.constprop.0+0x70>)
    fea0:	e7e3      	b.n	fe6a <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fea2:	4a08      	ldr	r2, [pc, #32]	; (fec4 <bt_addr_le_to_str.constprop.0+0x74>)
    fea4:	210a      	movs	r1, #10
    fea6:	4628      	mov	r0, r5
    fea8:	f00d ff33 	bl	1dd12 <snprintk>
		break;
    feac:	e7e0      	b.n	fe70 <bt_addr_le_to_str.constprop.0+0x20>
    feae:	bf00      	nop
    feb0:	00023f83 	.word	0x00023f83
    feb4:	00023fa5 	.word	0x00023fa5
    feb8:	00023f8a 	.word	0x00023f8a
    febc:	00023f91 	.word	0x00023f91
    fec0:	00023f9b 	.word	0x00023f9b
    fec4:	00025dcf 	.word	0x00025dcf

0000fec8 <auth_cancel>:
{
    fec8:	b500      	push	{lr}
    feca:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fecc:	f010 fede 	bl	20c8c <bt_conn_get_dst>
    fed0:	4669      	mov	r1, sp
    fed2:	f7ff ffbd 	bl	fe50 <bt_addr_le_to_str.constprop.0>
	printk("Pairing cancelled: %s\n", addr);
    fed6:	4803      	ldr	r0, [pc, #12]	; (fee4 <auth_cancel+0x1c>)
    fed8:	4669      	mov	r1, sp
    feda:	f00d ff0d 	bl	1dcf8 <printk>
}
    fede:	b009      	add	sp, #36	; 0x24
    fee0:	f85d fb04 	ldr.w	pc, [sp], #4
    fee4:	00023fc8 	.word	0x00023fc8

0000fee8 <auth_pairing>:
{
    fee8:	b510      	push	{r4, lr}
    feea:	b088      	sub	sp, #32
    feec:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    feee:	f010 fecd 	bl	20c8c <bt_conn_get_dst>
    fef2:	4669      	mov	r1, sp
    fef4:	f7ff ffac 	bl	fe50 <bt_addr_le_to_str.constprop.0>
	int err = bt_conn_auth_pairing_confirm(conn);
    fef8:	4620      	mov	r0, r4
    fefa:	f006 fc43 	bl	16784 <bt_conn_auth_pairing_confirm>
	printk("Pairing Authorized %d: %s\n", err, addr);
    fefe:	466a      	mov	r2, sp
	int err = bt_conn_auth_pairing_confirm(conn);
    ff00:	4601      	mov	r1, r0
	printk("Pairing Authorized %d: %s\n", err, addr);
    ff02:	4802      	ldr	r0, [pc, #8]	; (ff0c <auth_pairing+0x24>)
    ff04:	f00d fef8 	bl	1dcf8 <printk>
}
    ff08:	b008      	add	sp, #32
    ff0a:	bd10      	pop	{r4, pc}
    ff0c:	00023fdf 	.word	0x00023fdf

0000ff10 <dclk_start>:
{
    ff10:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    ff12:	2200      	movs	r2, #0
    ff14:	2300      	movs	r3, #0
    ff16:	e9cd 2300 	strd	r2, r3, [sp]
    ff1a:	4806      	ldr	r0, [pc, #24]	; (ff34 <dclk_start+0x24>)
    ff1c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ff20:	2300      	movs	r3, #0
    ff22:	f00d fd2d 	bl	1d980 <z_impl_k_timer_start>
	dclk_state = RUN;
    ff26:	4b04      	ldr	r3, [pc, #16]	; (ff38 <dclk_start+0x28>)
    ff28:	2200      	movs	r2, #0
    ff2a:	701a      	strb	r2, [r3, #0]
}
    ff2c:	b003      	add	sp, #12
    ff2e:	f85d fb04 	ldr.w	pc, [sp], #4
    ff32:	bf00      	nop
    ff34:	200006a8 	.word	0x200006a8
    ff38:	20002170 	.word	0x20002170

0000ff3c <dclk_notify>:
{
    ff3c:	b538      	push	{r3, r4, r5, lr}
	if (dclk_state != PAUSE)
    ff3e:	4c0b      	ldr	r4, [pc, #44]	; (ff6c <dclk_notify+0x30>)
    ff40:	4d0b      	ldr	r5, [pc, #44]	; (ff70 <dclk_notify+0x34>)
    ff42:	7822      	ldrb	r2, [r4, #0]
    ff44:	2a01      	cmp	r2, #1
    ff46:	d00a      	beq.n	ff5e <dclk_notify+0x22>
__syscall k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
				       const struct k_timer *timer)
{
	return z_timeout_remaining(&timer->timeout);
    ff48:	480a      	ldr	r0, [pc, #40]	; (ff74 <dclk_notify+0x38>)
    ff4a:	f012 ffc6 	bl	22eda <z_timeout_remaining>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    ff4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ff52:	fba0 0103 	umull	r0, r1, r0, r3
    ff56:	0bc3      	lsrs	r3, r0, #15
    ff58:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
    ff5c:	602b      	str	r3, [r5, #0]
	bt_dclk_notify(dclk_value, dclk_state);
    ff5e:	7821      	ldrb	r1, [r4, #0]
    ff60:	8828      	ldrh	r0, [r5, #0]
}
    ff62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_dclk_notify(dclk_value, dclk_state);
    ff66:	f7ff bf13 	b.w	fd90 <bt_dclk_notify>
    ff6a:	bf00      	nop
    ff6c:	20002170 	.word	0x20002170
    ff70:	20001d70 	.word	0x20001d70
    ff74:	200006a8 	.word	0x200006a8

0000ff78 <main>:


const uint16_t UPDATE_PERIOD = 1000;

void main(void)
{
    ff78:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_enable(NULL);
    ff7a:	2000      	movs	r0, #0
{
    ff7c:	b088      	sub	sp, #32
	err = bt_enable(NULL);
    ff7e:	f004 fe81 	bl	14c84 <bt_enable>
	if (err) {
    ff82:	4601      	mov	r1, r0
    ff84:	b120      	cbz	r0, ff90 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
    ff86:	4819      	ldr	r0, [pc, #100]	; (ffec <main+0x74>)
    ff88:	f00d feb6 	bl	1dcf8 <printk>
		//hrs_notify();

		/* Battery level simulation */
		//bas_notify();
	}
}
    ff8c:	b008      	add	sp, #32
    ff8e:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_load();
    ff90:	f00e fe23 	bl	1ebda <settings_load>
		if (err)
    ff94:	4606      	mov	r6, r0
    ff96:	2800      	cmp	r0, #0
    ff98:	d1f8      	bne.n	ff8c <main+0x14>
	bt_conn_cb_register(&conn_callbacks);
    ff9a:	4815      	ldr	r0, [pc, #84]	; (fff0 <main+0x78>)
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    ff9c:	4d15      	ldr	r5, [pc, #84]	; (fff4 <main+0x7c>)
	bt_conn_cb_register(&conn_callbacks);
    ff9e:	f005 ffbd 	bl	15f1c <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    ffa2:	4815      	ldr	r0, [pc, #84]	; (fff8 <main+0x80>)
    ffa4:	f006 fbb4 	bl	16710 <bt_conn_auth_cb_register>
	printk("Bluetooth initialized\n");
    ffa8:	4814      	ldr	r0, [pc, #80]	; (fffc <main+0x84>)
    ffaa:	f00d fea5 	bl	1dcf8 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    ffae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ffb0:	ac03      	add	r4, sp, #12
    ffb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ffb4:	682b      	ldr	r3, [r5, #0]
    ffb6:	6023      	str	r3, [r4, #0]
    ffb8:	4911      	ldr	r1, [pc, #68]	; (10000 <CONFIG_PM_SRAM_SIZE>)
    ffba:	9600      	str	r6, [sp, #0]
    ffbc:	4633      	mov	r3, r6
    ffbe:	2202      	movs	r2, #2
    ffc0:	a803      	add	r0, sp, #12
    ffc2:	f005 fcb9 	bl	15938 <bt_le_adv_start>
	if (err) {
    ffc6:	4601      	mov	r1, r0
    ffc8:	b160      	cbz	r0, ffe4 <main+0x6c>
		printk("Advertising failed to start (err %d)\n", err);
    ffca:	480e      	ldr	r0, [pc, #56]	; (10004 <CONFIG_PM_SRAM_SIZE+0x4>)
    ffcc:	f00d fe94 	bl	1dcf8 <printk>
	dclk_start();
    ffd0:	f7ff ff9e 	bl	ff10 <dclk_start>
	return z_impl_k_sleep(timeout);
    ffd4:	2100      	movs	r1, #0
    ffd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ffda:	f00d fa6f 	bl	1d4bc <z_impl_k_sleep>
		dclk_notify();
    ffde:	f7ff ffad 	bl	ff3c <dclk_notify>
	while (1) {
    ffe2:	e7f7      	b.n	ffd4 <main+0x5c>
	printk("Advertising successfully started\n");
    ffe4:	4808      	ldr	r0, [pc, #32]	; (10008 <CONFIG_PM_SRAM_SIZE+0x8>)
    ffe6:	f00d fe87 	bl	1dcf8 <printk>
    ffea:	e7f1      	b.n	ffd0 <main+0x58>
    ffec:	00023ffa 	.word	0x00023ffa
    fff0:	20000424 	.word	0x20000424
    fff4:	00023680 	.word	0x00023680
    fff8:	20000400 	.word	0x20000400
    fffc:	0002401a 	.word	0x0002401a
   10000:	000237a8 	.word	0x000237a8
   10004:	00024031 	.word	0x00024031
   10008:	00024057 	.word	0x00024057

0001000c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1000c:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1000e:	4c0a      	ldr	r4, [pc, #40]	; (10038 <crc8_ccitt+0x2c>)
   10010:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   10012:	4291      	cmp	r1, r2
   10014:	d100      	bne.n	10018 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   10016:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   10018:	f811 3b01 	ldrb.w	r3, [r1], #1
   1001c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1001e:	0903      	lsrs	r3, r0, #4
   10020:	5ce3      	ldrb	r3, [r4, r3]
   10022:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   10026:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10028:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1002c:	5ce0      	ldrb	r0, [r4, r3]
   1002e:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   10032:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   10034:	e7ed      	b.n	10012 <crc8_ccitt+0x6>
   10036:	bf00      	nop
   10038:	00024079 	.word	0x00024079

0001003c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1003c:	680b      	ldr	r3, [r1, #0]
   1003e:	3301      	adds	r3, #1
   10040:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10042:	4b01      	ldr	r3, [pc, #4]	; (10048 <char_out+0xc>)
   10044:	681b      	ldr	r3, [r3, #0]
   10046:	4718      	bx	r3
   10048:	20000440 	.word	0x20000440

0001004c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1004c:	b507      	push	{r0, r1, r2, lr}
   1004e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10050:	2100      	movs	r1, #0
{
   10052:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10054:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10056:	4803      	ldr	r0, [pc, #12]	; (10064 <vprintk+0x18>)
   10058:	a901      	add	r1, sp, #4
   1005a:	f000 f8ff 	bl	1025c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1005e:	b003      	add	sp, #12
   10060:	f85d fb04 	ldr.w	pc, [sp], #4
   10064:	0001003d 	.word	0x0001003d

00010068 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10068:	b530      	push	{r4, r5, lr}
   1006a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1006c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   10070:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10072:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   10074:	a901      	add	r1, sp, #4
   10076:	4805      	ldr	r0, [pc, #20]	; (1008c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   10078:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   1007a:	f000 f8ef 	bl	1025c <cbvprintf>

	if (ctx.count < ctx.max) {
   1007e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   10082:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10084:	bfb8      	it	lt
   10086:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10088:	b005      	add	sp, #20
   1008a:	bd30      	pop	{r4, r5, pc}
   1008c:	0001dcd3 	.word	0x0001dcd3

00010090 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10094:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10098:	f019 0808 	ands.w	r8, r9, #8
{
   1009c:	4604      	mov	r4, r0
   1009e:	4693      	mov	fp, r2
	if (processing) {
   100a0:	d00d      	beq.n	100be <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   100a2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   100a4:	bf0c      	ite	eq
   100a6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   100aa:	f049 0920 	orrne.w	r9, r9, #32
   100ae:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   100b2:	f38b 8811 	msr	BASEPRI, fp
   100b6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   100ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   100be:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   100c2:	2902      	cmp	r1, #2
   100c4:	d107      	bne.n	100d6 <process_event+0x46>
			evt = process_recheck(mgr);
   100c6:	4620      	mov	r0, r4
   100c8:	f00d fe30 	bl	1dd2c <process_recheck>
		if (evt == EVT_NOP) {
   100cc:	2800      	cmp	r0, #0
   100ce:	d0f0      	beq.n	100b2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   100d0:	2801      	cmp	r0, #1
   100d2:	8b23      	ldrh	r3, [r4, #24]
   100d4:	d150      	bne.n	10178 <process_event+0xe8>
			res = mgr->last_res;
   100d6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   100d8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   100da:	2f00      	cmp	r7, #0
   100dc:	da15      	bge.n	1010a <process_event+0x7a>
		*clients = mgr->clients;
   100de:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   100e0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   100e4:	e9c4 8800 	strd	r8, r8, [r4]
   100e8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   100ec:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   100ee:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   100f0:	8b21      	ldrh	r1, [r4, #24]
   100f2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   100f6:	45ca      	cmp	sl, r9
   100f8:	d002      	beq.n	10100 <process_event+0x70>
		if (do_monitors
   100fa:	68a3      	ldr	r3, [r4, #8]
   100fc:	2b00      	cmp	r3, #0
   100fe:	d15c      	bne.n	101ba <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   10100:	b90d      	cbnz	r5, 10106 <process_event+0x76>
		    || (transit != NULL)) {
   10102:	2e00      	cmp	r6, #0
   10104:	d074      	beq.n	101f0 <process_event+0x160>
   10106:	2300      	movs	r3, #0
   10108:	e058      	b.n	101bc <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1010a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1010e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10110:	2a01      	cmp	r2, #1
   10112:	d820      	bhi.n	10156 <process_event+0xc6>
		*clients = mgr->clients;
   10114:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   10118:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1011a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   1011c:	b289      	uxth	r1, r1
	list->tail = NULL;
   1011e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10122:	d10c      	bne.n	1013e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10124:	2d00      	cmp	r5, #0
   10126:	462b      	mov	r3, r5
   10128:	bf38      	it	cc
   1012a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1012c:	b12b      	cbz	r3, 1013a <process_event+0xaa>
				mgr->refs += 1U;
   1012e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10130:	681b      	ldr	r3, [r3, #0]
   10132:	3201      	adds	r2, #1
   10134:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10136:	2b00      	cmp	r3, #0
   10138:	d1f8      	bne.n	1012c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1013a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1013e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10140:	4620      	mov	r0, r4
   10142:	f00d fdf3 	bl	1dd2c <process_recheck>
   10146:	4606      	mov	r6, r0
   10148:	2800      	cmp	r0, #0
   1014a:	d0d1      	beq.n	100f0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1014c:	8b23      	ldrh	r3, [r4, #24]
   1014e:	f043 0320 	orr.w	r3, r3, #32
   10152:	8323      	strh	r3, [r4, #24]
   10154:	e7cb      	b.n	100ee <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10156:	2b04      	cmp	r3, #4
   10158:	d10c      	bne.n	10174 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1015a:	f021 0107 	bic.w	r1, r1, #7
   1015e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10160:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10162:	4620      	mov	r0, r4
   10164:	f00d fde2 	bl	1dd2c <process_recheck>
   10168:	4605      	mov	r5, r0
   1016a:	2800      	cmp	r0, #0
   1016c:	d0bf      	beq.n	100ee <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1016e:	f041 0120 	orr.w	r1, r1, #32
   10172:	8321      	strh	r1, [r4, #24]
   10174:	2500      	movs	r5, #0
   10176:	e7ba      	b.n	100ee <process_event+0x5e>
		} else if (evt == EVT_START) {
   10178:	2803      	cmp	r0, #3
   1017a:	d109      	bne.n	10190 <process_event+0x100>
			transit = mgr->transitions->start;
   1017c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1017e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   10182:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10184:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   10188:	8323      	strh	r3, [r4, #24]
}
   1018a:	2500      	movs	r5, #0
		res = 0;
   1018c:	462f      	mov	r7, r5
   1018e:	e7af      	b.n	100f0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   10190:	2804      	cmp	r0, #4
   10192:	d106      	bne.n	101a2 <process_event+0x112>
			transit = mgr->transitions->stop;
   10194:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10196:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1019a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1019c:	f043 0304 	orr.w	r3, r3, #4
   101a0:	e7f2      	b.n	10188 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   101a2:	2805      	cmp	r0, #5
   101a4:	d106      	bne.n	101b4 <process_event+0x124>
			transit = mgr->transitions->reset;
   101a6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   101a8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   101ac:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   101ae:	f043 0305 	orr.w	r3, r3, #5
   101b2:	e7e9      	b.n	10188 <process_event+0xf8>
   101b4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   101b6:	462e      	mov	r6, r5
   101b8:	e7e8      	b.n	1018c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   101ba:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   101bc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   101c0:	8321      	strh	r1, [r4, #24]
   101c2:	f38b 8811 	msr	BASEPRI, fp
   101c6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   101ca:	bb03      	cbnz	r3, 1020e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   101cc:	2d00      	cmp	r5, #0
   101ce:	d133      	bne.n	10238 <process_event+0x1a8>
			if (transit != NULL) {
   101d0:	b116      	cbz	r6, 101d8 <process_event+0x148>
				transit(mgr, transition_complete);
   101d2:	4921      	ldr	r1, [pc, #132]	; (10258 <process_event+0x1c8>)
   101d4:	4620      	mov	r0, r4
   101d6:	47b0      	blx	r6
	__asm__ volatile(
   101d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   101dc:	f3ef 8b11 	mrs	fp, BASEPRI
   101e0:	f383 8811 	msr	BASEPRI, r3
   101e4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   101e8:	8b23      	ldrh	r3, [r4, #24]
   101ea:	f023 0308 	bic.w	r3, r3, #8
   101ee:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   101f0:	8b23      	ldrh	r3, [r4, #24]
   101f2:	06da      	lsls	r2, r3, #27
   101f4:	d528      	bpl.n	10248 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   101f6:	f023 0310 	bic.w	r3, r3, #16
   101fa:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   101fc:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   101fe:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   10202:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10206:	2900      	cmp	r1, #0
   10208:	f47f af5b 	bne.w	100c2 <process_event+0x32>
out:
   1020c:	e751      	b.n	100b2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1020e:	68a1      	ldr	r1, [r4, #8]
   10210:	2900      	cmp	r1, #0
   10212:	d0db      	beq.n	101cc <process_event+0x13c>
	return node->next;
   10214:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   10216:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1021a:	2b00      	cmp	r3, #0
   1021c:	bf38      	it	cc
   1021e:	2300      	movcc	r3, #0
   10220:	4699      	mov	r9, r3
   10222:	4652      	mov	r2, sl
   10224:	463b      	mov	r3, r7
   10226:	4620      	mov	r0, r4
   10228:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1022a:	f1b9 0f00 	cmp.w	r9, #0
   1022e:	d0cd      	beq.n	101cc <process_event+0x13c>
   10230:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10234:	4649      	mov	r1, r9
   10236:	e7ee      	b.n	10216 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10238:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1023a:	463b      	mov	r3, r7
   1023c:	4652      	mov	r2, sl
   1023e:	4620      	mov	r0, r4
   10240:	682d      	ldr	r5, [r5, #0]
   10242:	f00d fd8f 	bl	1dd64 <notify_one>
   10246:	e7c1      	b.n	101cc <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10248:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1024c:	bf1e      	ittt	ne
   1024e:	f023 0320 	bicne.w	r3, r3, #32
   10252:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   10254:	2102      	movne	r1, #2
   10256:	e7d2      	b.n	101fe <process_event+0x16e>
   10258:	0001dd91 	.word	0x0001dd91

0001025c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1025c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10260:	b091      	sub	sp, #68	; 0x44
   10262:	468b      	mov	fp, r1
   10264:	9002      	str	r0, [sp, #8]
   10266:	4692      	mov	sl, r2
   10268:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1026a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1026c:	f89a 0000 	ldrb.w	r0, [sl]
   10270:	b908      	cbnz	r0, 10276 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10272:	4628      	mov	r0, r5
   10274:	e35e      	b.n	10934 <cbvprintf+0x6d8>
		if (*fp != '%') {
   10276:	2825      	cmp	r0, #37	; 0x25
   10278:	f10a 0701 	add.w	r7, sl, #1
   1027c:	d007      	beq.n	1028e <cbvprintf+0x32>
			OUTC('%');
   1027e:	9b02      	ldr	r3, [sp, #8]
   10280:	4659      	mov	r1, fp
   10282:	4798      	blx	r3
   10284:	2800      	cmp	r0, #0
   10286:	f2c0 8355 	blt.w	10934 <cbvprintf+0x6d8>
   1028a:	3501      	adds	r5, #1
			break;
   1028c:	e210      	b.n	106b0 <cbvprintf+0x454>
		} state = {
   1028e:	2218      	movs	r2, #24
   10290:	2100      	movs	r1, #0
   10292:	a80a      	add	r0, sp, #40	; 0x28
   10294:	f00f fffa 	bl	2028c <memset>
	if (*sp == '%') {
   10298:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1029c:	2b25      	cmp	r3, #37	; 0x25
   1029e:	d078      	beq.n	10392 <cbvprintf+0x136>
   102a0:	2200      	movs	r2, #0
   102a2:	4694      	mov	ip, r2
   102a4:	4616      	mov	r6, r2
   102a6:	4696      	mov	lr, r2
   102a8:	4610      	mov	r0, r2
   102aa:	4639      	mov	r1, r7
		switch (*sp) {
   102ac:	f817 3b01 	ldrb.w	r3, [r7], #1
   102b0:	2b2b      	cmp	r3, #43	; 0x2b
   102b2:	f000 809d 	beq.w	103f0 <cbvprintf+0x194>
   102b6:	f200 8094 	bhi.w	103e2 <cbvprintf+0x186>
   102ba:	2b20      	cmp	r3, #32
   102bc:	f000 809b 	beq.w	103f6 <cbvprintf+0x19a>
   102c0:	2b23      	cmp	r3, #35	; 0x23
   102c2:	f000 809a 	beq.w	103fa <cbvprintf+0x19e>
   102c6:	b128      	cbz	r0, 102d4 <cbvprintf+0x78>
   102c8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   102cc:	f040 0004 	orr.w	r0, r0, #4
   102d0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   102d4:	f1be 0f00 	cmp.w	lr, #0
   102d8:	d005      	beq.n	102e6 <cbvprintf+0x8a>
   102da:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   102de:	f040 0008 	orr.w	r0, r0, #8
   102e2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   102e6:	b12e      	cbz	r6, 102f4 <cbvprintf+0x98>
   102e8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   102ec:	f040 0010 	orr.w	r0, r0, #16
   102f0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   102f4:	f1bc 0f00 	cmp.w	ip, #0
   102f8:	d005      	beq.n	10306 <cbvprintf+0xaa>
   102fa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   102fe:	f040 0020 	orr.w	r0, r0, #32
   10302:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10306:	b12a      	cbz	r2, 10314 <cbvprintf+0xb8>
   10308:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1030c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10310:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   10314:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10318:	f002 0044 	and.w	r0, r2, #68	; 0x44
   1031c:	2844      	cmp	r0, #68	; 0x44
   1031e:	d103      	bne.n	10328 <cbvprintf+0xcc>
		conv->flag_zero = false;
   10320:	f36f 1286 	bfc	r2, #6, #1
   10324:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   10328:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1032c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1032e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10332:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   10336:	d17b      	bne.n	10430 <cbvprintf+0x1d4>
		conv->width_star = true;
   10338:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1033c:	f042 0201 	orr.w	r2, r2, #1
   10340:	1c4b      	adds	r3, r1, #1
   10342:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   10346:	781a      	ldrb	r2, [r3, #0]
   10348:	2a2e      	cmp	r2, #46	; 0x2e
   1034a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1034e:	bf0c      	ite	eq
   10350:	2101      	moveq	r1, #1
   10352:	2100      	movne	r1, #0
   10354:	f361 0241 	bfi	r2, r1, #1, #1
   10358:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   1035c:	d174      	bne.n	10448 <cbvprintf+0x1ec>
	if (*sp == '*') {
   1035e:	785a      	ldrb	r2, [r3, #1]
   10360:	2a2a      	cmp	r2, #42	; 0x2a
   10362:	d06a      	beq.n	1043a <cbvprintf+0x1de>
   10364:	3301      	adds	r3, #1
	size_t val = 0;
   10366:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   10368:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1036a:	4618      	mov	r0, r3
   1036c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10370:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10374:	2f09      	cmp	r7, #9
   10376:	f240 808e 	bls.w	10496 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   1037a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1037e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   10380:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10384:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   10388:	f361 0241 	bfi	r2, r1, #1, #1
   1038c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10390:	e05a      	b.n	10448 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   10392:	f10a 0702 	add.w	r7, sl, #2
   10396:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   1039a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1039e:	07d9      	lsls	r1, r3, #31
   103a0:	f140 8149 	bpl.w	10636 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   103a4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   103a8:	f1b9 0f00 	cmp.w	r9, #0
   103ac:	da07      	bge.n	103be <cbvprintf+0x162>
				conv->flag_dash = true;
   103ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   103b2:	f042 0204 	orr.w	r2, r2, #4
   103b6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   103ba:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   103be:	075a      	lsls	r2, r3, #29
   103c0:	f140 8142 	bpl.w	10648 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   103c4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   103c8:	f1b8 0f00 	cmp.w	r8, #0
   103cc:	f280 8141 	bge.w	10652 <cbvprintf+0x3f6>
				conv->prec_present = false;
   103d0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   103d4:	f36f 0341 	bfc	r3, #1, #1
   103d8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   103dc:	f04f 38ff 	mov.w	r8, #4294967295
   103e0:	e137      	b.n	10652 <cbvprintf+0x3f6>
		switch (*sp) {
   103e2:	2b2d      	cmp	r3, #45	; 0x2d
   103e4:	d00c      	beq.n	10400 <cbvprintf+0x1a4>
   103e6:	2b30      	cmp	r3, #48	; 0x30
   103e8:	f47f af6d 	bne.w	102c6 <cbvprintf+0x6a>
			conv->flag_zero = true;
   103ec:	2201      	movs	r2, #1
	} while (loop);
   103ee:	e75c      	b.n	102aa <cbvprintf+0x4e>
			conv->flag_plus = true;
   103f0:	f04f 0e01 	mov.w	lr, #1
   103f4:	e759      	b.n	102aa <cbvprintf+0x4e>
			conv->flag_space = true;
   103f6:	2601      	movs	r6, #1
   103f8:	e757      	b.n	102aa <cbvprintf+0x4e>
			conv->flag_hash = true;
   103fa:	f04f 0c01 	mov.w	ip, #1
   103fe:	e754      	b.n	102aa <cbvprintf+0x4e>
		switch (*sp) {
   10400:	2001      	movs	r0, #1
   10402:	e752      	b.n	102aa <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   10404:	fb0c 0202 	mla	r2, ip, r2, r0
   10408:	3a30      	subs	r2, #48	; 0x30
   1040a:	4633      	mov	r3, r6
   1040c:	461e      	mov	r6, r3
   1040e:	f816 0b01 	ldrb.w	r0, [r6], #1
   10412:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10416:	2f09      	cmp	r7, #9
   10418:	d9f4      	bls.n	10404 <cbvprintf+0x1a8>
	if (sp != wp) {
   1041a:	4299      	cmp	r1, r3
   1041c:	d093      	beq.n	10346 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1041e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   10422:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   10424:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   10426:	f362 0141 	bfi	r1, r2, #1, #1
   1042a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1042e:	e78a      	b.n	10346 <cbvprintf+0xea>
   10430:	460b      	mov	r3, r1
	size_t val = 0;
   10432:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10434:	f04f 0c0a 	mov.w	ip, #10
   10438:	e7e8      	b.n	1040c <cbvprintf+0x1b0>
		conv->prec_star = true;
   1043a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1043e:	f042 0204 	orr.w	r2, r2, #4
   10442:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   10446:	3302      	adds	r3, #2
	switch (*sp) {
   10448:	461f      	mov	r7, r3
   1044a:	f817 2b01 	ldrb.w	r2, [r7], #1
   1044e:	2a6c      	cmp	r2, #108	; 0x6c
   10450:	d041      	beq.n	104d6 <cbvprintf+0x27a>
   10452:	d825      	bhi.n	104a0 <cbvprintf+0x244>
   10454:	2a68      	cmp	r2, #104	; 0x68
   10456:	d02b      	beq.n	104b0 <cbvprintf+0x254>
   10458:	2a6a      	cmp	r2, #106	; 0x6a
   1045a:	d046      	beq.n	104ea <cbvprintf+0x28e>
   1045c:	2a4c      	cmp	r2, #76	; 0x4c
   1045e:	d04c      	beq.n	104fa <cbvprintf+0x29e>
   10460:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   10462:	f817 2b01 	ldrb.w	r2, [r7], #1
   10466:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1046a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1046e:	2a78      	cmp	r2, #120	; 0x78
   10470:	f200 80d9 	bhi.w	10626 <cbvprintf+0x3ca>
   10474:	2a57      	cmp	r2, #87	; 0x57
   10476:	d84d      	bhi.n	10514 <cbvprintf+0x2b8>
   10478:	2a41      	cmp	r2, #65	; 0x41
   1047a:	d003      	beq.n	10484 <cbvprintf+0x228>
   1047c:	3a45      	subs	r2, #69	; 0x45
   1047e:	2a02      	cmp	r2, #2
   10480:	f200 80d1 	bhi.w	10626 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   10484:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10488:	2204      	movs	r2, #4
   1048a:	f362 0302 	bfi	r3, r2, #0, #3
   1048e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   10492:	2301      	movs	r3, #1
			break;
   10494:	e09e      	b.n	105d4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   10496:	fb06 2101 	mla	r1, r6, r1, r2
   1049a:	3930      	subs	r1, #48	; 0x30
   1049c:	4603      	mov	r3, r0
   1049e:	e764      	b.n	1036a <cbvprintf+0x10e>
	switch (*sp) {
   104a0:	2a74      	cmp	r2, #116	; 0x74
   104a2:	d026      	beq.n	104f2 <cbvprintf+0x296>
   104a4:	2a7a      	cmp	r2, #122	; 0x7a
   104a6:	d1db      	bne.n	10460 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   104a8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   104ac:	2206      	movs	r2, #6
   104ae:	e00d      	b.n	104cc <cbvprintf+0x270>
		if (*++sp == 'h') {
   104b0:	785a      	ldrb	r2, [r3, #1]
   104b2:	2a68      	cmp	r2, #104	; 0x68
   104b4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   104b8:	d106      	bne.n	104c8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   104ba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   104bc:	f361 02c6 	bfi	r2, r1, #3, #4
   104c0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   104c4:	1c9f      	adds	r7, r3, #2
   104c6:	e7cc      	b.n	10462 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   104c8:	4613      	mov	r3, r2
   104ca:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   104cc:	f362 03c6 	bfi	r3, r2, #3, #4
   104d0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   104d4:	e7c5      	b.n	10462 <cbvprintf+0x206>
		if (*++sp == 'l') {
   104d6:	785a      	ldrb	r2, [r3, #1]
   104d8:	2a6c      	cmp	r2, #108	; 0x6c
   104da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   104de:	d101      	bne.n	104e4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   104e0:	2104      	movs	r1, #4
   104e2:	e7eb      	b.n	104bc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   104e4:	4613      	mov	r3, r2
   104e6:	2203      	movs	r2, #3
   104e8:	e7f0      	b.n	104cc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   104ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   104ee:	2205      	movs	r2, #5
   104f0:	e7ec      	b.n	104cc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   104f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   104f6:	2207      	movs	r2, #7
   104f8:	e7e8      	b.n	104cc <cbvprintf+0x270>
		conv->unsupported = true;
   104fa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   104fe:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   10502:	f023 0302 	bic.w	r3, r3, #2
   10506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1050a:	f043 0302 	orr.w	r3, r3, #2
   1050e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   10512:	e7a6      	b.n	10462 <cbvprintf+0x206>
   10514:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   10518:	2920      	cmp	r1, #32
   1051a:	f200 8084 	bhi.w	10626 <cbvprintf+0x3ca>
   1051e:	a001      	add	r0, pc, #4	; (adr r0, 10524 <cbvprintf+0x2c8>)
   10520:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   10524:	000105e9 	.word	0x000105e9
   10528:	00010627 	.word	0x00010627
   1052c:	00010627 	.word	0x00010627
   10530:	00010627 	.word	0x00010627
   10534:	00010627 	.word	0x00010627
   10538:	00010627 	.word	0x00010627
   1053c:	00010627 	.word	0x00010627
   10540:	00010627 	.word	0x00010627
   10544:	00010627 	.word	0x00010627
   10548:	00010485 	.word	0x00010485
   1054c:	00010627 	.word	0x00010627
   10550:	000105e9 	.word	0x000105e9
   10554:	000105a9 	.word	0x000105a9
   10558:	00010485 	.word	0x00010485
   1055c:	00010485 	.word	0x00010485
   10560:	00010485 	.word	0x00010485
   10564:	00010627 	.word	0x00010627
   10568:	000105a9 	.word	0x000105a9
   1056c:	00010627 	.word	0x00010627
   10570:	00010627 	.word	0x00010627
   10574:	00010627 	.word	0x00010627
   10578:	00010627 	.word	0x00010627
   1057c:	000105f1 	.word	0x000105f1
   10580:	000105e9 	.word	0x000105e9
   10584:	0001060d 	.word	0x0001060d
   10588:	00010627 	.word	0x00010627
   1058c:	00010627 	.word	0x00010627
   10590:	0001060d 	.word	0x0001060d
   10594:	00010627 	.word	0x00010627
   10598:	000105e9 	.word	0x000105e9
   1059c:	00010627 	.word	0x00010627
   105a0:	00010627 	.word	0x00010627
   105a4:	000105e9 	.word	0x000105e9
		conv->specifier_cat = SPECIFIER_SINT;
   105a8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   105ac:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   105ae:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   105b2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   105b6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   105b8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   105bc:	bf02      	ittt	eq
   105be:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   105c2:	f041 0101 	orreq.w	r1, r1, #1
   105c6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   105ca:	2a63      	cmp	r2, #99	; 0x63
   105cc:	d131      	bne.n	10632 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   105ce:	3b00      	subs	r3, #0
   105d0:	bf18      	it	ne
   105d2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   105d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   105d8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   105dc:	430b      	orrs	r3, r1
   105de:	f363 0241 	bfi	r2, r3, #1, #1
   105e2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   105e6:	e6d8      	b.n	1039a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   105e8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   105ec:	2002      	movs	r0, #2
   105ee:	e7de      	b.n	105ae <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   105f0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   105f4:	f003 0378 	and.w	r3, r3, #120	; 0x78
   105f8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   105fc:	2103      	movs	r1, #3
   105fe:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10602:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   10604:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10608:	4143      	adcs	r3, r0
   1060a:	e7e3      	b.n	105d4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   1060c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   10610:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   10612:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   10616:	f361 0202 	bfi	r2, r1, #0, #3
   1061a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1061e:	bf14      	ite	ne
   10620:	2301      	movne	r3, #1
   10622:	2300      	moveq	r3, #0
   10624:	e7d6      	b.n	105d4 <cbvprintf+0x378>
		conv->invalid = true;
   10626:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1062a:	f043 0301 	orr.w	r3, r3, #1
   1062e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   10632:	2300      	movs	r3, #0
   10634:	e7ce      	b.n	105d4 <cbvprintf+0x378>
		} else if (conv->width_present) {
   10636:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   1063a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1063c:	bfb4      	ite	lt
   1063e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   10642:	f04f 39ff 	movge.w	r9, #4294967295
   10646:	e6ba      	b.n	103be <cbvprintf+0x162>
		} else if (conv->prec_present) {
   10648:	079b      	lsls	r3, r3, #30
   1064a:	f57f aec7 	bpl.w	103dc <cbvprintf+0x180>
			precision = conv->prec_value;
   1064e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   10652:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   10656:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   10658:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   1065c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   10660:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10664:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   10666:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1066a:	d136      	bne.n	106da <cbvprintf+0x47e>
			switch (length_mod) {
   1066c:	1ed3      	subs	r3, r2, #3
   1066e:	2b04      	cmp	r3, #4
   10670:	d820      	bhi.n	106b4 <cbvprintf+0x458>
   10672:	e8df f003 	tbb	[pc, r3]
   10676:	0703      	.short	0x0703
   10678:	1f07      	.short	0x1f07
   1067a:	1f          	.byte	0x1f
   1067b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1067c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   10680:	17c1      	asrs	r1, r0, #31
   10682:	e004      	b.n	1068e <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   10684:	3407      	adds	r4, #7
   10686:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1068a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   1068e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   10692:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10696:	f013 0603 	ands.w	r6, r3, #3
   1069a:	d054      	beq.n	10746 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   1069c:	9802      	ldr	r0, [sp, #8]
   1069e:	463b      	mov	r3, r7
   106a0:	4652      	mov	r2, sl
   106a2:	4659      	mov	r1, fp
   106a4:	f00d ff13 	bl	1e4ce <outs>
   106a8:	2800      	cmp	r0, #0
   106aa:	f2c0 8143 	blt.w	10934 <cbvprintf+0x6d8>
   106ae:	4405      	add	r5, r0
			continue;
   106b0:	46ba      	mov	sl, r7
   106b2:	e5db      	b.n	1026c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   106b4:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   106b8:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   106ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
   106be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   106c2:	d105      	bne.n	106d0 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   106c4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   106c8:	930a      	str	r3, [sp, #40]	; 0x28
   106ca:	2300      	movs	r3, #0
   106cc:	930b      	str	r3, [sp, #44]	; 0x2c
   106ce:	e7e0      	b.n	10692 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   106d0:	2a02      	cmp	r2, #2
   106d2:	d1de      	bne.n	10692 <cbvprintf+0x436>
				value->sint = (short)value->sint;
   106d4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   106d8:	e7d2      	b.n	10680 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   106da:	2b02      	cmp	r3, #2
   106dc:	d123      	bne.n	10726 <cbvprintf+0x4ca>
			switch (length_mod) {
   106de:	1ed3      	subs	r3, r2, #3
   106e0:	2b04      	cmp	r3, #4
   106e2:	d813      	bhi.n	1070c <cbvprintf+0x4b0>
   106e4:	e8df f003 	tbb	[pc, r3]
   106e8:	120a0a03 	.word	0x120a0a03
   106ec:	12          	.byte	0x12
   106ed:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   106ee:	6820      	ldr	r0, [r4, #0]
   106f0:	900a      	str	r0, [sp, #40]	; 0x28
   106f2:	2100      	movs	r1, #0
   106f4:	1d23      	adds	r3, r4, #4
   106f6:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   106f8:	461c      	mov	r4, r3
   106fa:	e7ca      	b.n	10692 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   106fc:	3407      	adds	r4, #7
   106fe:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   10702:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   10706:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   1070a:	e7f5      	b.n	106f8 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   1070c:	f854 3b04 	ldr.w	r3, [r4], #4
   10710:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   10712:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   10714:	f04f 0300 	mov.w	r3, #0
   10718:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   1071a:	d0d3      	beq.n	106c4 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   1071c:	2a02      	cmp	r2, #2
   1071e:	d1b8      	bne.n	10692 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   10720:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10724:	e7d0      	b.n	106c8 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   10726:	2b04      	cmp	r3, #4
   10728:	d107      	bne.n	1073a <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   1072a:	3407      	adds	r4, #7
   1072c:	f024 0407 	bic.w	r4, r4, #7
   10730:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   10734:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10738:	e7ab      	b.n	10692 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1073a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1073c:	bf04      	itt	eq
   1073e:	f854 3b04 	ldreq.w	r3, [r4], #4
   10742:	930a      	streq	r3, [sp, #40]	; 0x28
   10744:	e7a5      	b.n	10692 <cbvprintf+0x436>
		switch (conv->specifier) {
   10746:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1074a:	2878      	cmp	r0, #120	; 0x78
   1074c:	d8b0      	bhi.n	106b0 <cbvprintf+0x454>
   1074e:	2862      	cmp	r0, #98	; 0x62
   10750:	d822      	bhi.n	10798 <cbvprintf+0x53c>
   10752:	2825      	cmp	r0, #37	; 0x25
   10754:	f43f ad93 	beq.w	1027e <cbvprintf+0x22>
   10758:	2858      	cmp	r0, #88	; 0x58
   1075a:	d1a9      	bne.n	106b0 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1075c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10760:	9300      	str	r3, [sp, #0]
   10762:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10766:	ab04      	add	r3, sp, #16
   10768:	aa0c      	add	r2, sp, #48	; 0x30
   1076a:	f00d fe65 	bl	1e438 <encode_uint>
   1076e:	4682      	mov	sl, r0
			if (precision >= 0) {
   10770:	f1b8 0f00 	cmp.w	r8, #0
   10774:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   10778:	db0c      	blt.n	10794 <cbvprintf+0x538>
				conv->flag_zero = false;
   1077a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1077e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   10782:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10786:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   10788:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   1078c:	d902      	bls.n	10794 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   1078e:	eba8 0303 	sub.w	r3, r8, r3
   10792:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   10794:	4680      	mov	r8, r0
   10796:	e03d      	b.n	10814 <cbvprintf+0x5b8>
   10798:	3863      	subs	r0, #99	; 0x63
   1079a:	2815      	cmp	r0, #21
   1079c:	d888      	bhi.n	106b0 <cbvprintf+0x454>
   1079e:	a101      	add	r1, pc, #4	; (adr r1, 107a4 <cbvprintf+0x548>)
   107a0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   107a4:	00010825 	.word	0x00010825
   107a8:	00010889 	.word	0x00010889
   107ac:	000106b1 	.word	0x000106b1
   107b0:	000106b1 	.word	0x000106b1
   107b4:	000106b1 	.word	0x000106b1
   107b8:	000106b1 	.word	0x000106b1
   107bc:	00010889 	.word	0x00010889
   107c0:	000106b1 	.word	0x000106b1
   107c4:	000106b1 	.word	0x000106b1
   107c8:	000106b1 	.word	0x000106b1
   107cc:	000106b1 	.word	0x000106b1
   107d0:	000108e7 	.word	0x000108e7
   107d4:	000108b5 	.word	0x000108b5
   107d8:	000108b9 	.word	0x000108b9
   107dc:	000106b1 	.word	0x000106b1
   107e0:	000106b1 	.word	0x000106b1
   107e4:	000107fd 	.word	0x000107fd
   107e8:	000106b1 	.word	0x000106b1
   107ec:	000108b5 	.word	0x000108b5
   107f0:	000106b1 	.word	0x000106b1
   107f4:	000106b1 	.word	0x000106b1
   107f8:	000108b5 	.word	0x000108b5
			if (precision >= 0) {
   107fc:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   10800:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   10804:	db0a      	blt.n	1081c <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   10806:	4641      	mov	r1, r8
   10808:	4650      	mov	r0, sl
   1080a:	f00f fce0 	bl	201ce <strnlen>
			bpe = bps + len;
   1080e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   10812:	2600      	movs	r6, #0
		if (bps == NULL) {
   10814:	f1ba 0f00 	cmp.w	sl, #0
   10818:	d10c      	bne.n	10834 <cbvprintf+0x5d8>
   1081a:	e749      	b.n	106b0 <cbvprintf+0x454>
				len = strlen(bps);
   1081c:	4650      	mov	r0, sl
   1081e:	f00f fccf 	bl	201c0 <strlen>
   10822:	e7f4      	b.n	1080e <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10826:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   1082a:	2600      	movs	r6, #0
			bpe = buf + 1;
   1082c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   10830:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   10834:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   10838:	b106      	cbz	r6, 1083c <cbvprintf+0x5e0>
			nj_len += 1U;
   1083a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1083c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   10840:	06d0      	lsls	r0, r2, #27
   10842:	d56b      	bpl.n	1091c <cbvprintf+0x6c0>
			nj_len += 2U;
   10844:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   10846:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   10848:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   1084a:	bf48      	it	mi
   1084c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1084e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   10850:	bf48      	it	mi
   10852:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   10854:	f1b9 0f00 	cmp.w	r9, #0
   10858:	dd79      	ble.n	1094e <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   1085a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1085e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   10862:	f3c2 0380 	ubfx	r3, r2, #2, #1
   10866:	9303      	str	r3, [sp, #12]
   10868:	0753      	lsls	r3, r2, #29
   1086a:	d470      	bmi.n	1094e <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   1086c:	0650      	lsls	r0, r2, #25
   1086e:	d564      	bpl.n	1093a <cbvprintf+0x6de>
					if (sign != 0) {
   10870:	b146      	cbz	r6, 10884 <cbvprintf+0x628>
						OUTC(sign);
   10872:	9b02      	ldr	r3, [sp, #8]
   10874:	4659      	mov	r1, fp
   10876:	4630      	mov	r0, r6
   10878:	4798      	blx	r3
   1087a:	2800      	cmp	r0, #0
   1087c:	db5a      	blt.n	10934 <cbvprintf+0x6d8>
						sign = 0;
   1087e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   10880:	3501      	adds	r5, #1
						sign = 0;
   10882:	461e      	mov	r6, r3
					pad = '0';
   10884:	2330      	movs	r3, #48	; 0x30
   10886:	e059      	b.n	1093c <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   10888:	071e      	lsls	r6, r3, #28
   1088a:	d411      	bmi.n	108b0 <cbvprintf+0x654>
				sign = ' ';
   1088c:	f013 0610 	ands.w	r6, r3, #16
   10890:	bf18      	it	ne
   10892:	2620      	movne	r6, #32
			sint = value->sint;
   10894:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   10898:	2a00      	cmp	r2, #0
   1089a:	f173 0100 	sbcs.w	r1, r3, #0
   1089e:	f6bf af5d 	bge.w	1075c <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   108a2:	4252      	negs	r2, r2
   108a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   108a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   108ac:	262d      	movs	r6, #45	; 0x2d
   108ae:	e755      	b.n	1075c <cbvprintf+0x500>
				sign = '+';
   108b0:	262b      	movs	r6, #43	; 0x2b
   108b2:	e7ef      	b.n	10894 <cbvprintf+0x638>
		switch (conv->specifier) {
   108b4:	2600      	movs	r6, #0
   108b6:	e751      	b.n	1075c <cbvprintf+0x500>
			if (value->ptr != NULL) {
   108b8:	980a      	ldr	r0, [sp, #40]	; 0x28
   108ba:	b348      	cbz	r0, 10910 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   108bc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   108c0:	9300      	str	r3, [sp, #0]
   108c2:	aa0c      	add	r2, sp, #48	; 0x30
   108c4:	ab04      	add	r3, sp, #16
   108c6:	2100      	movs	r1, #0
   108c8:	f00d fdb6 	bl	1e438 <encode_uint>
				conv->altform_0c = true;
   108cc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   108d0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   108d4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   108d8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   108dc:	4682      	mov	sl, r0
				conv->altform_0c = true;
   108de:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   108e2:	2600      	movs	r6, #0
				goto prec_int_pad0;
   108e4:	e744      	b.n	10770 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   108e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   108e8:	2a07      	cmp	r2, #7
   108ea:	f63f aee1 	bhi.w	106b0 <cbvprintf+0x454>
   108ee:	e8df f002 	tbb	[pc, r2]
   108f2:	040d      	.short	0x040d
   108f4:	08080d06 	.word	0x08080d06
   108f8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   108fa:	701d      	strb	r5, [r3, #0]
		break;
   108fc:	e6d8      	b.n	106b0 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   108fe:	801d      	strh	r5, [r3, #0]
		break;
   10900:	e6d6      	b.n	106b0 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   10902:	4628      	mov	r0, r5
   10904:	17e9      	asrs	r1, r5, #31
   10906:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1090a:	e6d1      	b.n	106b0 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1090c:	601d      	str	r5, [r3, #0]
		break;
   1090e:	e6cf      	b.n	106b0 <cbvprintf+0x454>
			bpe = bps + 5;
   10910:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 109d8 <cbvprintf+0x77c>
   10914:	4606      	mov	r6, r0
			bps = "(nil)";
   10916:	f1a8 0a05 	sub.w	sl, r8, #5
   1091a:	e78b      	b.n	10834 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   1091c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1091e:	bf48      	it	mi
   10920:	3301      	addmi	r3, #1
   10922:	e790      	b.n	10846 <cbvprintf+0x5ea>
					OUTC(pad);
   10924:	4618      	mov	r0, r3
   10926:	9303      	str	r3, [sp, #12]
   10928:	4659      	mov	r1, fp
   1092a:	9b02      	ldr	r3, [sp, #8]
   1092c:	4798      	blx	r3
   1092e:	2800      	cmp	r0, #0
   10930:	9b03      	ldr	r3, [sp, #12]
   10932:	da04      	bge.n	1093e <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   10934:	b011      	add	sp, #68	; 0x44
   10936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1093a:	2320      	movs	r3, #32
   1093c:	444d      	add	r5, r9
   1093e:	464a      	mov	r2, r9
				while (width-- > 0) {
   10940:	2a00      	cmp	r2, #0
   10942:	eba5 0109 	sub.w	r1, r5, r9
   10946:	f109 39ff 	add.w	r9, r9, #4294967295
   1094a:	dceb      	bgt.n	10924 <cbvprintf+0x6c8>
   1094c:	460d      	mov	r5, r1
		if (sign != 0) {
   1094e:	b136      	cbz	r6, 1095e <cbvprintf+0x702>
			OUTC(sign);
   10950:	9b02      	ldr	r3, [sp, #8]
   10952:	4659      	mov	r1, fp
   10954:	4630      	mov	r0, r6
   10956:	4798      	blx	r3
   10958:	2800      	cmp	r0, #0
   1095a:	dbeb      	blt.n	10934 <cbvprintf+0x6d8>
   1095c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1095e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10962:	06d9      	lsls	r1, r3, #27
   10964:	d401      	bmi.n	1096a <cbvprintf+0x70e>
   10966:	071a      	lsls	r2, r3, #28
   10968:	d506      	bpl.n	10978 <cbvprintf+0x71c>
				OUTC('0');
   1096a:	9b02      	ldr	r3, [sp, #8]
   1096c:	4659      	mov	r1, fp
   1096e:	2030      	movs	r0, #48	; 0x30
   10970:	4798      	blx	r3
   10972:	2800      	cmp	r0, #0
   10974:	dbde      	blt.n	10934 <cbvprintf+0x6d8>
   10976:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   10978:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1097c:	06db      	lsls	r3, r3, #27
   1097e:	d507      	bpl.n	10990 <cbvprintf+0x734>
				OUTC(conv->specifier);
   10980:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   10984:	9b02      	ldr	r3, [sp, #8]
   10986:	4659      	mov	r1, fp
   10988:	4798      	blx	r3
   1098a:	2800      	cmp	r0, #0
   1098c:	dbd2      	blt.n	10934 <cbvprintf+0x6d8>
   1098e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10990:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   10992:	442e      	add	r6, r5
   10994:	1b73      	subs	r3, r6, r5
   10996:	2b00      	cmp	r3, #0
   10998:	dc16      	bgt.n	109c8 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   1099a:	9802      	ldr	r0, [sp, #8]
   1099c:	4643      	mov	r3, r8
   1099e:	4652      	mov	r2, sl
   109a0:	4659      	mov	r1, fp
   109a2:	f00d fd94 	bl	1e4ce <outs>
   109a6:	2800      	cmp	r0, #0
   109a8:	dbc4      	blt.n	10934 <cbvprintf+0x6d8>
   109aa:	4405      	add	r5, r0
		while (width > 0) {
   109ac:	44a9      	add	r9, r5
   109ae:	eba9 0305 	sub.w	r3, r9, r5
   109b2:	2b00      	cmp	r3, #0
   109b4:	f77f ae7c 	ble.w	106b0 <cbvprintf+0x454>
			OUTC(' ');
   109b8:	9b02      	ldr	r3, [sp, #8]
   109ba:	4659      	mov	r1, fp
   109bc:	2020      	movs	r0, #32
   109be:	4798      	blx	r3
   109c0:	2800      	cmp	r0, #0
   109c2:	dbb7      	blt.n	10934 <cbvprintf+0x6d8>
   109c4:	3501      	adds	r5, #1
			--width;
   109c6:	e7f2      	b.n	109ae <cbvprintf+0x752>
				OUTC('0');
   109c8:	9b02      	ldr	r3, [sp, #8]
   109ca:	4659      	mov	r1, fp
   109cc:	2030      	movs	r0, #48	; 0x30
   109ce:	4798      	blx	r3
   109d0:	2800      	cmp	r0, #0
   109d2:	dbaf      	blt.n	10934 <cbvprintf+0x6d8>
   109d4:	3501      	adds	r5, #1
   109d6:	e7dd      	b.n	10994 <cbvprintf+0x738>
   109d8:	0002408e 	.word	0x0002408e

000109dc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   109dc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   109de:	4910      	ldr	r1, [pc, #64]	; (10a20 <enable_logger+0x44>)
   109e0:	4810      	ldr	r0, [pc, #64]	; (10a24 <enable_logger+0x48>)
{
   109e2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   109e4:	2200      	movs	r2, #0
   109e6:	f012 fae3 	bl	22fb0 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   109ea:	4d0f      	ldr	r5, [pc, #60]	; (10a28 <enable_logger+0x4c>)
   109ec:	490f      	ldr	r1, [pc, #60]	; (10a2c <enable_logger+0x50>)
   109ee:	2200      	movs	r2, #0
   109f0:	2300      	movs	r3, #0
   109f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   109f6:	2400      	movs	r4, #0
   109f8:	230e      	movs	r3, #14
   109fa:	e9cd 3403 	strd	r3, r4, [sp, #12]
   109fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10a02:	4b0b      	ldr	r3, [pc, #44]	; (10a30 <enable_logger+0x54>)
   10a04:	9400      	str	r4, [sp, #0]
   10a06:	f44f 7240 	mov.w	r2, #768	; 0x300
   10a0a:	4628      	mov	r0, r5
   10a0c:	f00b fea0 	bl	1c750 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   10a10:	4908      	ldr	r1, [pc, #32]	; (10a34 <enable_logger+0x58>)
   10a12:	4628      	mov	r0, r5
   10a14:	f011 ff64 	bl	228e0 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   10a18:	4620      	mov	r0, r4
   10a1a:	b009      	add	sp, #36	; 0x24
   10a1c:	bd30      	pop	{r4, r5, pc}
   10a1e:	bf00      	nop
   10a20:	00010a39 	.word	0x00010a39
   10a24:	20001410 	.word	0x20001410
   10a28:	20001448 	.word	0x20001448
   10a2c:	20002a40 	.word	0x20002a40
   10a30:	00010e61 	.word	0x00010e61
   10a34:	0002408f 	.word	0x0002408f

00010a38 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   10a38:	4801      	ldr	r0, [pc, #4]	; (10a40 <log_process_thread_timer_expiry_fn+0x8>)
   10a3a:	f00c b81b 	b.w	1ca74 <z_impl_k_sem_give>
   10a3e:	bf00      	nop
   10a40:	20000774 	.word	0x20000774

00010a44 <log_core_init>:
{
   10a44:	b510      	push	{r4, lr}
	panic_mode = false;
   10a46:	4b0b      	ldr	r3, [pc, #44]	; (10a74 <log_core_init+0x30>)
   10a48:	2200      	movs	r2, #0
   10a4a:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   10a4c:	4b0a      	ldr	r3, [pc, #40]	; (10a78 <log_core_init+0x34>)
   10a4e:	4a0b      	ldr	r2, [pc, #44]	; (10a7c <log_core_init+0x38>)
   10a50:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   10a52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10a56:	f000 fad9 	bl	1100c <log_output_timestamp_freq_set>
		log_msg_pool_init();
   10a5a:	f000 fa63 	bl	10f24 <log_msg_pool_init>
		log_list_init(&list);
   10a5e:	4808      	ldr	r0, [pc, #32]	; (10a80 <log_core_init+0x3c>)
   10a60:	f00d fd4c 	bl	1e4fc <log_list_init>
}
   10a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   10a68:	4906      	ldr	r1, [pc, #24]	; (10a84 <log_core_init+0x40>)
   10a6a:	4807      	ldr	r0, [pc, #28]	; (10a88 <log_core_init+0x44>)
   10a6c:	2308      	movs	r3, #8
   10a6e:	2248      	movs	r2, #72	; 0x48
   10a70:	f011 beec 	b.w	2284c <k_mem_slab_init>
   10a74:	20002172 	.word	0x20002172
   10a78:	20000444 	.word	0x20000444
   10a7c:	0001e53b 	.word	0x0001e53b
   10a80:	20001d80 	.word	0x20001d80
   10a84:	20006028 	.word	0x20006028
   10a88:	20001d88 	.word	0x20001d88

00010a8c <get_msg>:
{
   10a8c:	b510      	push	{r4, lr}
   10a8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a92:	f3ef 8411 	mrs	r4, BASEPRI
   10a96:	f383 8811 	msr	BASEPRI, r3
   10a9a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   10a9e:	4804      	ldr	r0, [pc, #16]	; (10ab0 <get_msg+0x24>)
   10aa0:	f00d fd3c 	bl	1e51c <log_list_head_get>
	__asm__ volatile(
   10aa4:	f384 8811 	msr	BASEPRI, r4
   10aa8:	f3bf 8f6f 	isb	sy
}
   10aac:	bd10      	pop	{r4, pc}
   10aae:	bf00      	nop
   10ab0:	20001d80 	.word	0x20001d80

00010ab4 <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10ab4:	4b06      	ldr	r3, [pc, #24]	; (10ad0 <z_log_dropped+0x1c>)
   10ab6:	f3bf 8f5b 	dmb	ish
   10aba:	e853 2f00 	ldrex	r2, [r3]
   10abe:	3201      	adds	r2, #1
   10ac0:	e843 2100 	strex	r1, r2, [r3]
   10ac4:	2900      	cmp	r1, #0
   10ac6:	d1f8      	bne.n	10aba <z_log_dropped+0x6>
   10ac8:	f3bf 8f5b 	dmb	ish
}
   10acc:	4770      	bx	lr
   10ace:	bf00      	nop
   10ad0:	20001d78 	.word	0x20001d78

00010ad4 <z_log_dropped_read_and_clear>:
}
   10ad4:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10ad6:	4b06      	ldr	r3, [pc, #24]	; (10af0 <z_log_dropped_read_and_clear+0x1c>)
   10ad8:	f3bf 8f5b 	dmb	ish
   10adc:	4602      	mov	r2, r0
   10ade:	e853 0f00 	ldrex	r0, [r3]
   10ae2:	e843 2100 	strex	r1, r2, [r3]
   10ae6:	2900      	cmp	r1, #0
   10ae8:	d1f9      	bne.n	10ade <z_log_dropped_read_and_clear+0xa>
   10aea:	f3bf 8f5b 	dmb	ish
   10aee:	4770      	bx	lr
   10af0:	20001d78 	.word	0x20001d78

00010af4 <dropped_notify>:
{
   10af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   10af6:	f7ff ffed 	bl	10ad4 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   10afa:	4c0a      	ldr	r4, [pc, #40]	; (10b24 <dropped_notify+0x30>)
   10afc:	4d0a      	ldr	r5, [pc, #40]	; (10b28 <dropped_notify+0x34>)
   10afe:	1b2d      	subs	r5, r5, r4
   10b00:	4607      	mov	r7, r0
   10b02:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   10b04:	2600      	movs	r6, #0
   10b06:	42ae      	cmp	r6, r5
   10b08:	db00      	blt.n	10b0c <dropped_notify+0x18>
}
   10b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   10b0c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   10b0e:	795b      	ldrb	r3, [r3, #5]
   10b10:	b12b      	cbz	r3, 10b1e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   10b12:	6823      	ldr	r3, [r4, #0]
   10b14:	691b      	ldr	r3, [r3, #16]
   10b16:	b113      	cbz	r3, 10b1e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   10b18:	4639      	mov	r1, r7
   10b1a:	4620      	mov	r0, r4
   10b1c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   10b1e:	3601      	adds	r6, #1
   10b20:	3410      	adds	r4, #16
   10b22:	e7f0      	b.n	10b06 <dropped_notify+0x12>
   10b24:	0002364c 	.word	0x0002364c
   10b28:	0002364c 	.word	0x0002364c

00010b2c <log_backend_enable>:
	id += backend - log_backend_get(0);
   10b2c:	4b09      	ldr	r3, [pc, #36]	; (10b54 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   10b2e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   10b30:	1ac3      	subs	r3, r0, r3
   10b32:	111b      	asrs	r3, r3, #4
   10b34:	3301      	adds	r3, #1
{
   10b36:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   10b38:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
   10b3a:	6843      	ldr	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   10b3c:	4c06      	ldr	r4, [pc, #24]	; (10b58 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
   10b3e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   10b40:	2201      	movs	r2, #1
   10b42:	715a      	strb	r2, [r3, #5]
   10b44:	7822      	ldrb	r2, [r4, #0]
   10b46:	b912      	cbnz	r2, 10b4e <log_backend_enable+0x22>
   10b48:	4804      	ldr	r0, [pc, #16]	; (10b5c <log_backend_enable+0x30>)
   10b4a:	f00b ff93 	bl	1ca74 <z_impl_k_sem_give>
	backend_attached = true;
   10b4e:	2301      	movs	r3, #1
   10b50:	7023      	strb	r3, [r4, #0]
}
   10b52:	bd10      	pop	{r4, pc}
   10b54:	0002364c 	.word	0x0002364c
   10b58:	20002171 	.word	0x20002171
   10b5c:	20000774 	.word	0x20000774

00010b60 <log_init>:
{
   10b60:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10b62:	4b12      	ldr	r3, [pc, #72]	; (10bac <log_init+0x4c>)
   10b64:	f3bf 8f5b 	dmb	ish
   10b68:	e853 5f00 	ldrex	r5, [r3]
   10b6c:	1c6a      	adds	r2, r5, #1
   10b6e:	e843 2100 	strex	r1, r2, [r3]
   10b72:	2900      	cmp	r1, #0
   10b74:	d1f8      	bne.n	10b68 <log_init+0x8>
   10b76:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   10b7a:	b92d      	cbnz	r5, 10b88 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
   10b7c:	4c0c      	ldr	r4, [pc, #48]	; (10bb0 <log_init+0x50>)
   10b7e:	4e0d      	ldr	r6, [pc, #52]	; (10bb4 <log_init+0x54>)
   10b80:	1b36      	subs	r6, r6, r4
   10b82:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   10b84:	42b5      	cmp	r5, r6
   10b86:	db00      	blt.n	10b8a <log_init+0x2a>
}
   10b88:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   10b8a:	7b23      	ldrb	r3, [r4, #12]
   10b8c:	b153      	cbz	r3, 10ba4 <log_init+0x44>
			if (backend->api->init != NULL) {
   10b8e:	6823      	ldr	r3, [r4, #0]
   10b90:	699b      	ldr	r3, [r3, #24]
   10b92:	b10b      	cbz	r3, 10b98 <log_init+0x38>
				backend->api->init(backend);
   10b94:	4620      	mov	r0, r4
   10b96:	4798      	blx	r3
			log_backend_enable(backend,
   10b98:	6863      	ldr	r3, [r4, #4]
   10b9a:	2204      	movs	r2, #4
   10b9c:	6819      	ldr	r1, [r3, #0]
   10b9e:	4620      	mov	r0, r4
   10ba0:	f7ff ffc4 	bl	10b2c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10ba4:	3501      	adds	r5, #1
   10ba6:	3410      	adds	r4, #16
   10ba8:	e7ec      	b.n	10b84 <log_init+0x24>
   10baa:	bf00      	nop
   10bac:	20001d7c 	.word	0x20001d7c
   10bb0:	0002364c 	.word	0x0002364c
   10bb4:	0002364c 	.word	0x0002364c

00010bb8 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   10bb8:	4b16      	ldr	r3, [pc, #88]	; (10c14 <z_log_strdup+0x5c>)
   10bba:	4298      	cmp	r0, r3
{
   10bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10bbe:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   10bc0:	d302      	bcc.n	10bc8 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   10bc2:	4b15      	ldr	r3, [pc, #84]	; (10c18 <z_log_strdup+0x60>)
   10bc4:	4298      	cmp	r0, r3
   10bc6:	d320      	bcc.n	10c0a <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   10bc8:	4814      	ldr	r0, [pc, #80]	; (10c1c <z_log_strdup+0x64>)
   10bca:	2200      	movs	r2, #0
   10bcc:	2300      	movs	r3, #0
   10bce:	a901      	add	r1, sp, #4
   10bd0:	f00b fd5c 	bl	1c68c <k_mem_slab_alloc>
	if (err != 0) {
   10bd4:	4605      	mov	r5, r0
   10bd6:	b9d8      	cbnz	r0, 10c10 <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10bd8:	2201      	movs	r2, #1
   10bda:	9b01      	ldr	r3, [sp, #4]
   10bdc:	f3bf 8f5b 	dmb	ish
   10be0:	e853 1f00 	ldrex	r1, [r3]
   10be4:	e843 2000 	strex	r0, r2, [r3]
   10be8:	2800      	cmp	r0, #0
   10bea:	d1f9      	bne.n	10be0 <z_log_strdup+0x28>
   10bec:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   10bf0:	9801      	ldr	r0, [sp, #4]
   10bf2:	4621      	mov	r1, r4
   10bf4:	2241      	movs	r2, #65	; 0x41
   10bf6:	3004      	adds	r0, #4
   10bf8:	f00f facf 	bl	2019a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   10bfc:	9c01      	ldr	r4, [sp, #4]
   10bfe:	237e      	movs	r3, #126	; 0x7e
   10c00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   10c04:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   10c08:	3404      	adds	r4, #4
}
   10c0a:	4620      	mov	r0, r4
   10c0c:	b003      	add	sp, #12
   10c0e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   10c10:	4c03      	ldr	r4, [pc, #12]	; (10c20 <z_log_strdup+0x68>)
   10c12:	e7fa      	b.n	10c0a <z_log_strdup+0x52>
   10c14:	000232c0 	.word	0x000232c0
   10c18:	000262d0 	.word	0x000262d0
   10c1c:	20001d88 	.word	0x20001d88
   10c20:	00024097 	.word	0x00024097

00010c24 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   10c24:	b150      	cbz	r0, 10c3c <log_is_strdup+0x18>
   10c26:	4b06      	ldr	r3, [pc, #24]	; (10c40 <log_is_strdup+0x1c>)
   10c28:	4298      	cmp	r0, r3
   10c2a:	d306      	bcc.n	10c3a <log_is_strdup+0x16>
   10c2c:	f503 7310 	add.w	r3, r3, #576	; 0x240
   10c30:	4298      	cmp	r0, r3
   10c32:	bf2c      	ite	cs
   10c34:	2000      	movcs	r0, #0
   10c36:	2001      	movcc	r0, #1
   10c38:	4770      	bx	lr
   10c3a:	2000      	movs	r0, #0
}
   10c3c:	4770      	bx	lr
   10c3e:	bf00      	nop
   10c40:	20006028 	.word	0x20006028

00010c44 <z_impl_log_process>:
{
   10c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   10c48:	4b46      	ldr	r3, [pc, #280]	; (10d64 <z_impl_log_process+0x120>)
   10c4a:	781b      	ldrb	r3, [r3, #0]
{
   10c4c:	b085      	sub	sp, #20
   10c4e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   10c50:	b903      	cbnz	r3, 10c54 <z_impl_log_process+0x10>
   10c52:	b300      	cbz	r0, 10c96 <z_impl_log_process+0x52>
	msg = get_msg();
   10c54:	f7ff ff1a 	bl	10a8c <get_msg>
	if (msg.msg) {
   10c58:	4605      	mov	r5, r0
   10c5a:	b178      	cbz	r0, 10c7c <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10c5c:	f3bf 8f5b 	dmb	ish
   10c60:	4b41      	ldr	r3, [pc, #260]	; (10d68 <z_impl_log_process+0x124>)
   10c62:	e853 2f00 	ldrex	r2, [r3]
   10c66:	3a01      	subs	r2, #1
   10c68:	e843 2100 	strex	r1, r2, [r3]
   10c6c:	2900      	cmp	r1, #0
   10c6e:	d1f8      	bne.n	10c62 <z_impl_log_process+0x1e>
   10c70:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   10c74:	b19c      	cbz	r4, 10c9e <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
   10c76:	4628      	mov	r0, r5
   10c78:	f00d fd11 	bl	1e69e <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   10c7c:	b92c      	cbnz	r4, 10c8a <z_impl_log_process+0x46>
	return dropped_cnt > 0;
   10c7e:	4b3b      	ldr	r3, [pc, #236]	; (10d6c <z_impl_log_process+0x128>)
	if (!bypass && z_log_dropped_pending()) {
   10c80:	681b      	ldr	r3, [r3, #0]
   10c82:	2b00      	cmp	r3, #0
   10c84:	dd01      	ble.n	10c8a <z_impl_log_process+0x46>
		dropped_notify();
   10c86:	f7ff ff35 	bl	10af4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   10c8a:	4839      	ldr	r0, [pc, #228]	; (10d70 <z_impl_log_process+0x12c>)
   10c8c:	f00d fc44 	bl	1e518 <log_list_head_peek>
   10c90:	1e04      	subs	r4, r0, #0
   10c92:	bf18      	it	ne
   10c94:	2401      	movne	r4, #1
}
   10c96:	4620      	mov	r0, r4
   10c98:	b005      	add	sp, #20
   10c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   10c9e:	4b35      	ldr	r3, [pc, #212]	; (10d74 <z_impl_log_process+0x130>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   10ca0:	781b      	ldrb	r3, [r3, #0]
   10ca2:	b9cb      	cbnz	r3, 10cd8 <z_impl_log_process+0x94>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10ca4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   10ca6:	07db      	lsls	r3, r3, #31
   10ca8:	d416      	bmi.n	10cd8 <z_impl_log_process+0x94>
	msg_str = log_msg_str_get(msg);
   10caa:	f00d fd0b 	bl	1e6c4 <log_msg_str_get>
   10cae:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10cb0:	4628      	mov	r0, r5
   10cb2:	f00d fcd2 	bl	1e65a <log_msg_nargs_get>
   10cb6:	4601      	mov	r1, r0
   10cb8:	4640      	mov	r0, r8
   10cba:	f00d fc42 	bl	1e542 <z_log_get_s_mask>
   10cbe:	4f2e      	ldr	r7, [pc, #184]	; (10d78 <z_impl_log_process+0x134>)
   10cc0:	4b2e      	ldr	r3, [pc, #184]	; (10d7c <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10cc2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 10d98 <z_impl_log_process+0x154>
   10cc6:	1bdb      	subs	r3, r3, r7
   10cc8:	08db      	lsrs	r3, r3, #3
   10cca:	9303      	str	r3, [sp, #12]
   10ccc:	4b2c      	ldr	r3, [pc, #176]	; (10d80 <z_impl_log_process+0x13c>)
   10cce:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10cd0:	4606      	mov	r6, r0
   10cd2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   10cd6:	b936      	cbnz	r6, 10ce6 <z_impl_log_process+0xa2>
   10cd8:	4e2a      	ldr	r6, [pc, #168]	; (10d84 <z_impl_log_process+0x140>)
   10cda:	4f2b      	ldr	r7, [pc, #172]	; (10d88 <z_impl_log_process+0x144>)
   10cdc:	1bbf      	subs	r7, r7, r6
   10cde:	113f      	asrs	r7, r7, #4
   10ce0:	f04f 0800 	mov.w	r8, #0
   10ce4:	e03a      	b.n	10d5c <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
   10ce6:	fab6 f186 	clz	r1, r6
   10cea:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   10cee:	4649      	mov	r1, r9
   10cf0:	4628      	mov	r0, r5
   10cf2:	f00d fcb5 	bl	1e660 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   10cf6:	4b25      	ldr	r3, [pc, #148]	; (10d8c <z_impl_log_process+0x148>)
   10cf8:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   10cfa:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   10cfc:	d302      	bcc.n	10d04 <z_impl_log_process+0xc0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   10cfe:	4b24      	ldr	r3, [pc, #144]	; (10d90 <z_impl_log_process+0x14c>)
   10d00:	4298      	cmp	r0, r3
   10d02:	d31a      	bcc.n	10d3a <z_impl_log_process+0xf6>
   10d04:	4608      	mov	r0, r1
   10d06:	f7ff ff8d 	bl	10c24 <log_is_strdup>
   10d0a:	4602      	mov	r2, r0
   10d0c:	b9a8      	cbnz	r0, 10d3a <z_impl_log_process+0xf6>
   10d0e:	4b21      	ldr	r3, [pc, #132]	; (10d94 <z_impl_log_process+0x150>)
   10d10:	4299      	cmp	r1, r3
   10d12:	d012      	beq.n	10d3a <z_impl_log_process+0xf6>
	return msg->hdr.ids.source_id;
   10d14:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   10d16:	9903      	ldr	r1, [sp, #12]
   10d18:	f3c3 1389 	ubfx	r3, r3, #6, #10
   10d1c:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   10d1e:	bf38      	it	cc
   10d20:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10d24:	ea4f 138a 	mov.w	r3, sl, lsl #6
   10d28:	f043 0301 	orr.w	r3, r3, #1
   10d2c:	f8ad 3000 	strh.w	r3, [sp]
   10d30:	4649      	mov	r1, r9
   10d32:	4643      	mov	r3, r8
   10d34:	4658      	mov	r0, fp
   10d36:	f00d fc5e 	bl	1e5f6 <log_3>
		mask &= ~BIT(idx);
   10d3a:	2101      	movs	r1, #1
   10d3c:	fa01 f109 	lsl.w	r1, r1, r9
   10d40:	ea26 0601 	bic.w	r6, r6, r1
   10d44:	e7c7      	b.n	10cd6 <z_impl_log_process+0x92>
	return backend->cb->active;
   10d46:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   10d48:	795b      	ldrb	r3, [r3, #5]
   10d4a:	b123      	cbz	r3, 10d56 <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
   10d4c:	6833      	ldr	r3, [r6, #0]
   10d4e:	4629      	mov	r1, r5
   10d50:	685b      	ldr	r3, [r3, #4]
   10d52:	4630      	mov	r0, r6
   10d54:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   10d56:	f108 0801 	add.w	r8, r8, #1
   10d5a:	3610      	adds	r6, #16
   10d5c:	45b8      	cmp	r8, r7
   10d5e:	dbf2      	blt.n	10d46 <z_impl_log_process+0x102>
   10d60:	e789      	b.n	10c76 <z_impl_log_process+0x32>
   10d62:	bf00      	nop
   10d64:	20002171 	.word	0x20002171
   10d68:	20001d74 	.word	0x20001d74
   10d6c:	20001d78 	.word	0x20001d78
   10d70:	20001d80 	.word	0x20001d80
   10d74:	20002172 	.word	0x20002172
   10d78:	0002353c 	.word	0x0002353c
   10d7c:	0002364c 	.word	0x0002364c
   10d80:	000235ec 	.word	0x000235ec
   10d84:	0002364c 	.word	0x0002364c
   10d88:	0002364c 	.word	0x0002364c
   10d8c:	000232c0 	.word	0x000232c0
   10d90:	000262d0 	.word	0x000262d0
   10d94:	00024097 	.word	0x00024097
   10d98:	000240b1 	.word	0x000240b1

00010d9c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   10d9c:	4b29      	ldr	r3, [pc, #164]	; (10e44 <msg_finalize+0xa8>)
{
   10d9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   10da0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   10da2:	8141      	strh	r1, [r0, #10]
{
   10da4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   10da6:	4798      	blx	r3
   10da8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10daa:	f04f 0340 	mov.w	r3, #64	; 0x40
   10dae:	f3ef 8511 	mrs	r5, BASEPRI
   10db2:	f383 8811 	msr	BASEPRI, r3
   10db6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10dba:	4823      	ldr	r0, [pc, #140]	; (10e48 <msg_finalize+0xac>)
   10dbc:	4621      	mov	r1, r4
   10dbe:	f00d fba1 	bl	1e504 <log_list_add_tail>
	__asm__ volatile(
   10dc2:	f385 8811 	msr	BASEPRI, r5
   10dc6:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10dca:	f3bf 8f5b 	dmb	ish
   10dce:	4b1f      	ldr	r3, [pc, #124]	; (10e4c <msg_finalize+0xb0>)
   10dd0:	e853 2f00 	ldrex	r2, [r3]
   10dd4:	3201      	adds	r2, #1
   10dd6:	e843 2100 	strex	r1, r2, [r3]
   10dda:	2900      	cmp	r1, #0
   10ddc:	d1f8      	bne.n	10dd0 <msg_finalize+0x34>
   10dde:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   10de2:	4a1b      	ldr	r2, [pc, #108]	; (10e50 <msg_finalize+0xb4>)
   10de4:	7812      	ldrb	r2, [r2, #0]
   10de6:	b182      	cbz	r2, 10e0a <msg_finalize+0x6e>
	__asm__ volatile(
   10de8:	f04f 0340 	mov.w	r3, #64	; 0x40
   10dec:	f3ef 8411 	mrs	r4, BASEPRI
   10df0:	f383 8811 	msr	BASEPRI, r3
   10df4:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   10df8:	2000      	movs	r0, #0
   10dfa:	f7ff ff23 	bl	10c44 <z_impl_log_process>
	__asm__ volatile(
   10dfe:	f384 8811 	msr	BASEPRI, r4
   10e02:	f3bf 8f6f 	isb	sy
}
   10e06:	b003      	add	sp, #12
   10e08:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   10e0a:	4a12      	ldr	r2, [pc, #72]	; (10e54 <msg_finalize+0xb8>)
   10e0c:	681b      	ldr	r3, [r3, #0]
   10e0e:	6812      	ldr	r2, [r2, #0]
   10e10:	2a00      	cmp	r2, #0
   10e12:	d0f8      	beq.n	10e06 <msg_finalize+0x6a>
   10e14:	2b01      	cmp	r3, #1
   10e16:	d10a      	bne.n	10e2e <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   10e18:	2200      	movs	r2, #0
   10e1a:	2300      	movs	r3, #0
   10e1c:	e9cd 2300 	strd	r2, r3, [sp]
   10e20:	480d      	ldr	r0, [pc, #52]	; (10e58 <msg_finalize+0xbc>)
   10e22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10e26:	2300      	movs	r3, #0
   10e28:	f00c fdaa 	bl	1d980 <z_impl_k_timer_start>
   10e2c:	e7eb      	b.n	10e06 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   10e2e:	2b0a      	cmp	r3, #10
   10e30:	d1e9      	bne.n	10e06 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   10e32:	4809      	ldr	r0, [pc, #36]	; (10e58 <msg_finalize+0xbc>)
   10e34:	f012 f8c8 	bl	22fc8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   10e38:	4808      	ldr	r0, [pc, #32]	; (10e5c <msg_finalize+0xc0>)
}
   10e3a:	b003      	add	sp, #12
   10e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   10e40:	f00b be18 	b.w	1ca74 <z_impl_k_sem_give>
   10e44:	20000444 	.word	0x20000444
   10e48:	20001d80 	.word	0x20001d80
   10e4c:	20001d74 	.word	0x20001d74
   10e50:	20002172 	.word	0x20002172
   10e54:	20001da4 	.word	0x20001da4
   10e58:	20001410 	.word	0x20001410
   10e5c:	20000774 	.word	0x20000774

00010e60 <log_process_thread_func>:
{
   10e60:	b510      	push	{r4, lr}
	log_init();
   10e62:	f7ff fe7d 	bl	10b60 <log_init>
	return z_impl_k_current_get();
   10e66:	f00c fb4b 	bl	1d500 <z_impl_k_current_get>
	proc_tid = process_tid;
   10e6a:	4b0c      	ldr	r3, [pc, #48]	; (10e9c <log_process_thread_func+0x3c>)
   10e6c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   10e6e:	b130      	cbz	r0, 10e7e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   10e70:	4b0b      	ldr	r3, [pc, #44]	; (10ea0 <log_process_thread_func+0x40>)
	    process_tid &&
   10e72:	681b      	ldr	r3, [r3, #0]
   10e74:	2b09      	cmp	r3, #9
   10e76:	dd02      	ble.n	10e7e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   10e78:	480a      	ldr	r0, [pc, #40]	; (10ea4 <log_process_thread_func+0x44>)
   10e7a:	f00b fdfb 	bl	1ca74 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   10e7e:	4c09      	ldr	r4, [pc, #36]	; (10ea4 <log_process_thread_func+0x44>)
   10e80:	2000      	movs	r0, #0
   10e82:	f7ff fedf 	bl	10c44 <z_impl_log_process>
		if (log_process(false) == false) {
   10e86:	2800      	cmp	r0, #0
   10e88:	d1fa      	bne.n	10e80 <log_process_thread_func+0x20>
   10e8a:	f04f 32ff 	mov.w	r2, #4294967295
   10e8e:	f04f 33ff 	mov.w	r3, #4294967295
   10e92:	4620      	mov	r0, r4
   10e94:	f00b fe14 	bl	1cac0 <z_impl_k_sem_take>
   10e98:	e7f2      	b.n	10e80 <log_process_thread_func+0x20>
   10e9a:	bf00      	nop
   10e9c:	20001da4 	.word	0x20001da4
   10ea0:	20001d74 	.word	0x20001d74
   10ea4:	20000774 	.word	0x20000774

00010ea8 <z_impl_log_panic>:
{
   10ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   10eaa:	4f0e      	ldr	r7, [pc, #56]	; (10ee4 <z_impl_log_panic+0x3c>)
   10eac:	783d      	ldrb	r5, [r7, #0]
   10eae:	b975      	cbnz	r5, 10ece <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   10eb0:	4c0d      	ldr	r4, [pc, #52]	; (10ee8 <z_impl_log_panic+0x40>)
   10eb2:	4e0e      	ldr	r6, [pc, #56]	; (10eec <z_impl_log_panic+0x44>)
	log_init();
   10eb4:	f7ff fe54 	bl	10b60 <log_init>
   10eb8:	1b36      	subs	r6, r6, r4
   10eba:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   10ebc:	42b5      	cmp	r5, r6
   10ebe:	db07      	blt.n	10ed0 <z_impl_log_panic+0x28>
   10ec0:	2000      	movs	r0, #0
   10ec2:	f7ff febf 	bl	10c44 <z_impl_log_process>
		while (log_process(false) == true) {
   10ec6:	2800      	cmp	r0, #0
   10ec8:	d1fa      	bne.n	10ec0 <z_impl_log_panic+0x18>
	panic_mode = true;
   10eca:	2301      	movs	r3, #1
   10ecc:	703b      	strb	r3, [r7, #0]
}
   10ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   10ed0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   10ed2:	795b      	ldrb	r3, [r3, #5]
   10ed4:	b11b      	cbz	r3, 10ede <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   10ed6:	6823      	ldr	r3, [r4, #0]
   10ed8:	4620      	mov	r0, r4
   10eda:	695b      	ldr	r3, [r3, #20]
   10edc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   10ede:	3501      	adds	r5, #1
   10ee0:	3410      	adds	r4, #16
   10ee2:	e7eb      	b.n	10ebc <z_impl_log_panic+0x14>
   10ee4:	20002172 	.word	0x20002172
   10ee8:	0002364c 	.word	0x0002364c
   10eec:	0002364c 	.word	0x0002364c

00010ef0 <log_free>:
{
   10ef0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   10ef2:	3804      	subs	r0, #4
   10ef4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10ef6:	f3bf 8f5b 	dmb	ish
   10efa:	e850 3f00 	ldrex	r3, [r0]
   10efe:	1e5a      	subs	r2, r3, #1
   10f00:	e840 2100 	strex	r1, r2, [r0]
   10f04:	2900      	cmp	r1, #0
   10f06:	d1f8      	bne.n	10efa <log_free+0xa>
   10f08:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   10f0c:	2b01      	cmp	r3, #1
   10f0e:	d103      	bne.n	10f18 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   10f10:	4803      	ldr	r0, [pc, #12]	; (10f20 <log_free+0x30>)
   10f12:	a901      	add	r1, sp, #4
   10f14:	f011 fcb5 	bl	22882 <k_mem_slab_free>
}
   10f18:	b003      	add	sp, #12
   10f1a:	f85d fb04 	ldr.w	pc, [sp], #4
   10f1e:	bf00      	nop
   10f20:	20001d88 	.word	0x20001d88

00010f24 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   10f24:	2320      	movs	r3, #32
   10f26:	4902      	ldr	r1, [pc, #8]	; (10f30 <log_msg_pool_init+0xc>)
   10f28:	4802      	ldr	r0, [pc, #8]	; (10f34 <log_msg_pool_init+0x10>)
   10f2a:	461a      	mov	r2, r3
   10f2c:	f011 bc8e 	b.w	2284c <k_mem_slab_init>
   10f30:	20006268 	.word	0x20006268
   10f34:	20001da8 	.word	0x20001da8

00010f38 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   10f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   10f3a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   10f3c:	4d09      	ldr	r5, [pc, #36]	; (10f64 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   10f3e:	9301      	str	r3, [sp, #4]
   10f40:	2001      	movs	r0, #1
   10f42:	f7ff fe7f 	bl	10c44 <z_impl_log_process>
   10f46:	4604      	mov	r4, r0
			z_log_dropped();
   10f48:	f7ff fdb4 	bl	10ab4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   10f4c:	2200      	movs	r2, #0
   10f4e:	2300      	movs	r3, #0
   10f50:	a901      	add	r1, sp, #4
   10f52:	4628      	mov	r0, r5
   10f54:	f00b fb9a 	bl	1c68c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   10f58:	b108      	cbz	r0, 10f5e <log_msg_no_space_handle+0x26>
   10f5a:	2c00      	cmp	r4, #0
   10f5c:	d1f0      	bne.n	10f40 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   10f5e:	9801      	ldr	r0, [sp, #4]
   10f60:	b003      	add	sp, #12
   10f62:	bd30      	pop	{r4, r5, pc}
   10f64:	20001da8 	.word	0x20001da8

00010f68 <log_msg_chunk_alloc>:
{
   10f68:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   10f6a:	2300      	movs	r3, #0
   10f6c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   10f6e:	4807      	ldr	r0, [pc, #28]	; (10f8c <log_msg_chunk_alloc+0x24>)
   10f70:	2200      	movs	r2, #0
   10f72:	2300      	movs	r3, #0
   10f74:	a901      	add	r1, sp, #4
   10f76:	f00b fb89 	bl	1c68c <k_mem_slab_alloc>
	if (err != 0) {
   10f7a:	b110      	cbz	r0, 10f82 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   10f7c:	f7ff ffdc 	bl	10f38 <log_msg_no_space_handle>
   10f80:	9001      	str	r0, [sp, #4]
}
   10f82:	9801      	ldr	r0, [sp, #4]
   10f84:	b003      	add	sp, #12
   10f86:	f85d fb04 	ldr.w	pc, [sp], #4
   10f8a:	bf00      	nop
   10f8c:	20001da8 	.word	0x20001da8

00010f90 <msg_free>:
{
   10f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10f92:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   10f94:	7a45      	ldrb	r5, [r0, #9]
{
   10f96:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   10f98:	092d      	lsrs	r5, r5, #4
{
   10f9a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   10f9c:	07d8      	lsls	r0, r3, #31
   10f9e:	d41c      	bmi.n	10fda <msg_free+0x4a>
   10fa0:	b1dd      	cbz	r5, 10fda <msg_free+0x4a>
		uint32_t smask = 0U;
   10fa2:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   10fa4:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   10fa6:	9801      	ldr	r0, [sp, #4]
   10fa8:	4631      	mov	r1, r6
   10faa:	f00d fb59 	bl	1e660 <log_msg_arg_get>
   10fae:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   10fb0:	f7ff fe38 	bl	10c24 <log_is_strdup>
   10fb4:	b170      	cbz	r0, 10fd4 <msg_free+0x44>
				if (smask == 0U) {
   10fb6:	b934      	cbnz	r4, 10fc6 <msg_free+0x36>
					smask = z_log_get_s_mask(
   10fb8:	9b01      	ldr	r3, [sp, #4]
   10fba:	4629      	mov	r1, r5
   10fbc:	6918      	ldr	r0, [r3, #16]
   10fbe:	f00d fac0 	bl	1e542 <z_log_get_s_mask>
					if (smask == 0U) {
   10fc2:	4604      	mov	r4, r0
   10fc4:	b148      	cbz	r0, 10fda <msg_free+0x4a>
				if (smask & BIT(i)) {
   10fc6:	fa24 f306 	lsr.w	r3, r4, r6
   10fca:	07d9      	lsls	r1, r3, #31
   10fcc:	d502      	bpl.n	10fd4 <msg_free+0x44>
					log_free(buf);
   10fce:	4638      	mov	r0, r7
   10fd0:	f7ff ff8e 	bl	10ef0 <log_free>
		for (i = 0U; i < nargs; i++) {
   10fd4:	3601      	adds	r6, #1
   10fd6:	42ae      	cmp	r6, r5
   10fd8:	d3e5      	bcc.n	10fa6 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   10fda:	9b01      	ldr	r3, [sp, #4]
   10fdc:	7a1a      	ldrb	r2, [r3, #8]
   10fde:	0792      	lsls	r2, r2, #30
   10fe0:	d504      	bpl.n	10fec <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   10fe2:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   10fe4:	4c08      	ldr	r4, [pc, #32]	; (11008 <msg_free+0x78>)
   10fe6:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   10fe8:	9b03      	ldr	r3, [sp, #12]
   10fea:	b92b      	cbnz	r3, 10ff8 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   10fec:	4806      	ldr	r0, [pc, #24]	; (11008 <msg_free+0x78>)
   10fee:	a901      	add	r1, sp, #4
   10ff0:	f011 fc47 	bl	22882 <k_mem_slab_free>
}
   10ff4:	b005      	add	sp, #20
   10ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   10ff8:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   10ffa:	a903      	add	r1, sp, #12
   10ffc:	4620      	mov	r0, r4
   10ffe:	f011 fc40 	bl	22882 <k_mem_slab_free>
		cont = next;
   11002:	9503      	str	r5, [sp, #12]
   11004:	e7f0      	b.n	10fe8 <msg_free+0x58>
   11006:	bf00      	nop
   11008:	20001da8 	.word	0x20001da8

0001100c <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1100c:	4a08      	ldr	r2, [pc, #32]	; (11030 <log_output_timestamp_freq_set+0x24>)
{
   1100e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   11010:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   11012:	4c08      	ldr	r4, [pc, #32]	; (11034 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   11014:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   11016:	2100      	movs	r1, #0
   11018:	42a0      	cmp	r0, r4
   1101a:	d804      	bhi.n	11026 <log_output_timestamp_freq_set+0x1a>
   1101c:	b101      	cbz	r1, 11020 <log_output_timestamp_freq_set+0x14>
   1101e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   11020:	4b05      	ldr	r3, [pc, #20]	; (11038 <log_output_timestamp_freq_set+0x2c>)
   11022:	6018      	str	r0, [r3, #0]
}
   11024:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   11026:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   11028:	005b      	lsls	r3, r3, #1
   1102a:	2101      	movs	r1, #1
   1102c:	e7f4      	b.n	11018 <log_output_timestamp_freq_set+0xc>
   1102e:	bf00      	nop
   11030:	20001dc8 	.word	0x20001dc8
   11034:	000f4240 	.word	0x000f4240
   11038:	20001dc4 	.word	0x20001dc4

0001103c <blvl_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1103c:	4b07      	ldr	r3, [pc, #28]	; (1105c <blvl_ccc_cfg_changed+0x20>)
   1103e:	4a08      	ldr	r2, [pc, #32]	; (11060 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   11040:	4808      	ldr	r0, [pc, #32]	; (11064 <blvl_ccc_cfg_changed+0x28>)
   11042:	1ad2      	subs	r2, r2, r3
   11044:	08d2      	lsrs	r2, r2, #3
   11046:	4b08      	ldr	r3, [pc, #32]	; (11068 <blvl_ccc_cfg_changed+0x2c>)
   11048:	0192      	lsls	r2, r2, #6
   1104a:	2901      	cmp	r1, #1
   1104c:	bf14      	ite	ne
   1104e:	4601      	movne	r1, r0
   11050:	4619      	moveq	r1, r3
   11052:	f042 0203 	orr.w	r2, r2, #3
   11056:	4805      	ldr	r0, [pc, #20]	; (1106c <blvl_ccc_cfg_changed+0x30>)
   11058:	f00d baa0 	b.w	1e59c <log_1>
   1105c:	0002353c 	.word	0x0002353c
   11060:	0002353c 	.word	0x0002353c
   11064:	00023ed0 	.word	0x00023ed0
   11068:	00023ec8 	.word	0x00023ec8
   1106c:	00024116 	.word	0x00024116

00011070 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   11070:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   11072:	4c08      	ldr	r4, [pc, #32]	; (11094 <read_blvl+0x24>)
{
   11074:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   11076:	7824      	ldrb	r4, [r4, #0]
   11078:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   1107c:	2401      	movs	r4, #1
   1107e:	9402      	str	r4, [sp, #8]
   11080:	f10d 0417 	add.w	r4, sp, #23
   11084:	9401      	str	r4, [sp, #4]
   11086:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1108a:	9400      	str	r4, [sp, #0]
   1108c:	f010 fc60 	bl	21950 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   11090:	b006      	add	sp, #24
   11092:	bd10      	pop	{r4, pc}
   11094:	20000627 	.word	0x20000627

00011098 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   11098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1109c:	460f      	mov	r7, r1
   1109e:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   110a0:	2108      	movs	r1, #8
   110a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   110a4:	f00d fc8f 	bl	1e9c6 <nvs_al_size.isra.0>

	*addr -= ate_size;
   110a8:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   110aa:	4b13      	ldr	r3, [pc, #76]	; (110f8 <nvs_recover_last_ate+0x60>)
	*addr -= ate_size;
   110ac:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   110ae:	4680      	mov	r8, r0
	*addr -= ate_size;
   110b0:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   110b2:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   110b6:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   110b8:	42ac      	cmp	r4, r5
   110ba:	d803      	bhi.n	110c4 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   110bc:	2000      	movs	r0, #0
}
   110be:	b003      	add	sp, #12
   110c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   110c4:	2308      	movs	r3, #8
   110c6:	466a      	mov	r2, sp
   110c8:	4621      	mov	r1, r4
   110ca:	4630      	mov	r0, r6
   110cc:	f00d fbde 	bl	1e88c <nvs_flash_rd>
		if (rc) {
   110d0:	2800      	cmp	r0, #0
   110d2:	d1f4      	bne.n	110be <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   110d4:	4669      	mov	r1, sp
   110d6:	4630      	mov	r0, r6
   110d8:	f00d fc7f 	bl	1e9da <nvs_ate_valid>
   110dc:	b140      	cbz	r0, 110f0 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   110de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   110e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   110e6:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   110e8:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   110ec:	4413      	add	r3, r2
   110ee:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   110f0:	eba4 0408 	sub.w	r4, r4, r8
   110f4:	e7e0      	b.n	110b8 <nvs_recover_last_ate+0x20>
   110f6:	bf00      	nop
   110f8:	ffff0000 	.word	0xffff0000

000110fc <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   110fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11100:	4605      	mov	r5, r0
   11102:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11104:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   11106:	2108      	movs	r1, #8
   11108:	f00d fc5d 	bl	1e9c6 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1110c:	686b      	ldr	r3, [r5, #4]
   1110e:	0c1b      	lsrs	r3, r3, #16
   11110:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11112:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
   11114:	a903      	add	r1, sp, #12
   11116:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   11118:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   1111a:	f00d fc78 	bl	1ea0e <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1111e:	9b03      	ldr	r3, [sp, #12]
   11120:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11122:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   11124:	4419      	add	r1, r3
   11126:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1112a:	2308      	movs	r3, #8
   1112c:	4632      	mov	r2, r6
   1112e:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
   11130:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11132:	f00d fbab 	bl	1e88c <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   11136:	1e04      	subs	r4, r0, #0
   11138:	f2c0 809c 	blt.w	11274 <nvs_gc+0x178>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1113c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1113e:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   11140:	2300      	movs	r3, #0
		if (data8[i] != value) {
   11142:	5cf1      	ldrb	r1, [r6, r3]
   11144:	4291      	cmp	r1, r2
   11146:	f040 8083 	bne.w	11250 <nvs_gc+0x154>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1114a:	3301      	adds	r3, #1
   1114c:	2b08      	cmp	r3, #8
   1114e:	d1f8      	bne.n	11142 <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
   11150:	9903      	ldr	r1, [sp, #12]
   11152:	4628      	mov	r0, r5
   11154:	f00d fbf7 	bl	1e946 <nvs_flash_erase_sector>
   11158:	4604      	mov	r4, r0
		if (rc) {
   1115a:	e08b      	b.n	11274 <nvs_gc+0x178>
	}

	stop_addr = gc_addr - ate_size;

	if (nvs_close_ate_valid(fs, &close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
   1115c:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   1115e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   11162:	0c1b      	lsrs	r3, r3, #16
   11164:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   11166:	4413      	add	r3, r2
   11168:	9304      	str	r3, [sp, #16]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1116a:	f8df b110 	ldr.w	fp, [pc, #272]	; 1127c <nvs_gc+0x180>
		gc_prev_addr = gc_addr;
   1116e:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   11172:	aa08      	add	r2, sp, #32
   11174:	a904      	add	r1, sp, #16
   11176:	4628      	mov	r0, r5
   11178:	f00d fcb8 	bl	1eaec <nvs_prev_ate>
		if (rc) {
   1117c:	4604      	mov	r4, r0
   1117e:	2800      	cmp	r0, #0
   11180:	d178      	bne.n	11274 <nvs_gc+0x178>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   11182:	a908      	add	r1, sp, #32
   11184:	4628      	mov	r0, r5
   11186:	f00d fc28 	bl	1e9da <nvs_ate_valid>
   1118a:	2800      	cmp	r0, #0
   1118c:	d036      	beq.n	111fc <nvs_gc+0x100>
		wlk_addr = fs->ate_wra;
   1118e:	686b      	ldr	r3, [r5, #4]
   11190:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   11192:	aa0a      	add	r2, sp, #40	; 0x28
   11194:	a905      	add	r1, sp, #20
   11196:	4628      	mov	r0, r5
			wlk_prev_addr = wlk_addr;
   11198:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1119a:	f00d fca7 	bl	1eaec <nvs_prev_ate>
			if (rc) {
   1119e:	4604      	mov	r4, r0
   111a0:	2800      	cmp	r0, #0
   111a2:	d167      	bne.n	11274 <nvs_gc+0x178>
			if ((wlk_ate.id == gc_ate.id) &&
   111a4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   111a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   111ac:	429a      	cmp	r2, r3
   111ae:	d028      	beq.n	11202 <nvs_gc+0x106>
		} while (wlk_addr != fs->ate_wra);
   111b0:	686a      	ldr	r2, [r5, #4]
   111b2:	9b05      	ldr	r3, [sp, #20]
   111b4:	429a      	cmp	r2, r3
   111b6:	d1ec      	bne.n	11192 <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   111b8:	4556      	cmp	r6, sl
   111ba:	d11f      	bne.n	111fc <nvs_gc+0x100>
   111bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   111c0:	b1e3      	cbz	r3, 111fc <nvs_gc+0x100>
			data_addr += gc_ate.offset;
   111c2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   111c6:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   111ca:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
   111cc:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   111ce:	68ab      	ldr	r3, [r5, #8]
   111d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   111d4:	f00d fbee 	bl	1e9b4 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   111d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   111da:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   111de:	681e      	ldr	r6, [r3, #0]
   111e0:	4276      	negs	r6, r6
	block_size =
   111e2:	f006 0320 	and.w	r3, r6, #32
   111e6:	9301      	str	r3, [sp, #4]
	while (len) {
   111e8:	f1b9 0f00 	cmp.w	r9, #0
   111ec:	d110      	bne.n	11210 <nvs_gc+0x114>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   111ee:	a908      	add	r1, sp, #32
   111f0:	4628      	mov	r0, r5
   111f2:	f00d fc6a 	bl	1eaca <nvs_flash_ate_wrt>
			if (rc) {
   111f6:	4604      	mov	r4, r0
   111f8:	2800      	cmp	r0, #0
   111fa:	d13b      	bne.n	11274 <nvs_gc+0x178>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
   111fc:	45c2      	cmp	sl, r8
   111fe:	d1b6      	bne.n	1116e <nvs_gc+0x72>
   11200:	e7a6      	b.n	11150 <nvs_gc+0x54>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   11202:	a90a      	add	r1, sp, #40	; 0x28
   11204:	4628      	mov	r0, r5
   11206:	f00d fbe8 	bl	1e9da <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   1120a:	2800      	cmp	r0, #0
   1120c:	d0d0      	beq.n	111b0 <nvs_gc+0xb4>
   1120e:	e7d3      	b.n	111b8 <nvs_gc+0xbc>
		bytes_to_copy = MIN(block_size, len);
   11210:	9b01      	ldr	r3, [sp, #4]
   11212:	454b      	cmp	r3, r9
   11214:	bf28      	it	cs
   11216:	464b      	movcs	r3, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   11218:	aa0c      	add	r2, sp, #48	; 0x30
   1121a:	4639      	mov	r1, r7
   1121c:	4628      	mov	r0, r5
		bytes_to_copy = MIN(block_size, len);
   1121e:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   11220:	f00d fb34 	bl	1e88c <nvs_flash_rd>
		if (rc) {
   11224:	4604      	mov	r4, r0
   11226:	bb28      	cbnz	r0, 11274 <nvs_gc+0x178>
	if (!len) {
   11228:	b136      	cbz	r6, 11238 <nvs_gc+0x13c>
   1122a:	68a9      	ldr	r1, [r5, #8]
   1122c:	4633      	mov	r3, r6
   1122e:	aa0c      	add	r2, sp, #48	; 0x30
   11230:	4628      	mov	r0, r5
   11232:	f00d fc15 	bl	1ea60 <nvs_flash_al_wrt.part.0>
   11236:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
   11238:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1123a:	4631      	mov	r1, r6
   1123c:	f00d fbc3 	bl	1e9c6 <nvs_al_size.isra.0>
   11240:	68aa      	ldr	r2, [r5, #8]
   11242:	4402      	add	r2, r0
   11244:	60aa      	str	r2, [r5, #8]
		if (rc) {
   11246:	b9ac      	cbnz	r4, 11274 <nvs_gc+0x178>
		len -= bytes_to_copy;
   11248:	eba9 0906 	sub.w	r9, r9, r6
		addr += bytes_to_copy;
   1124c:	4437      	add	r7, r6
   1124e:	e7cb      	b.n	111e8 <nvs_gc+0xec>
	stop_addr = gc_addr - ate_size;
   11250:	9804      	ldr	r0, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   11252:	4631      	mov	r1, r6
	stop_addr = gc_addr - ate_size;
   11254:	eba0 0808 	sub.w	r8, r0, r8
	if (nvs_close_ate_valid(fs, &close_ate)) {
   11258:	4628      	mov	r0, r5
   1125a:	f00d fbe3 	bl	1ea24 <nvs_close_ate_valid>
   1125e:	2800      	cmp	r0, #0
   11260:	f47f af7c 	bne.w	1115c <nvs_gc+0x60>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   11264:	a904      	add	r1, sp, #16
   11266:	4628      	mov	r0, r5
   11268:	f7ff ff16 	bl	11098 <nvs_recover_last_ate>
		if (rc) {
   1126c:	4604      	mov	r4, r0
   1126e:	2800      	cmp	r0, #0
   11270:	f43f af7b 	beq.w	1116a <nvs_gc+0x6e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
   11274:	4620      	mov	r0, r4
   11276:	b015      	add	sp, #84	; 0x54
   11278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1127c:	ffff0000 	.word	0xffff0000

00011280 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   11280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11284:	4604      	mov	r4, r0
   11286:	b086      	sub	sp, #24
   11288:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   1128a:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
   1128e:	4630      	mov	r0, r6
   11290:	f011 fb34 	bl	228fc <z_impl_k_mutex_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11294:	4628      	mov	r0, r5
   11296:	f00b f887 	bl	1c3a8 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   1129a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   1129c:	b978      	cbnz	r0, 112be <nvs_init+0x3e>
   1129e:	4bac      	ldr	r3, [pc, #688]	; (11550 <nvs_init+0x2d0>)
   112a0:	49ac      	ldr	r1, [pc, #688]	; (11554 <nvs_init+0x2d4>)
		LOG_ERR("No valid flash device found");
   112a2:	48ad      	ldr	r0, [pc, #692]	; (11558 <nvs_init+0x2d8>)
   112a4:	1ac9      	subs	r1, r1, r3
   112a6:	08c9      	lsrs	r1, r1, #3
   112a8:	0189      	lsls	r1, r1, #6
   112aa:	f041 0101 	orr.w	r1, r1, #1
   112ae:	f00d f968 	bl	1e582 <log_0>
		return -ENXIO;
   112b2:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   112b6:	4628      	mov	r0, r5
   112b8:	b006      	add	sp, #24
   112ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   112be:	6883      	ldr	r3, [r0, #8]
   112c0:	691b      	ldr	r3, [r3, #16]
   112c2:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   112c4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   112c6:	b960      	cbnz	r0, 112e2 <nvs_init+0x62>
   112c8:	49a2      	ldr	r1, [pc, #648]	; (11554 <nvs_init+0x2d4>)
   112ca:	4ba1      	ldr	r3, [pc, #644]	; (11550 <nvs_init+0x2d0>)
		LOG_ERR("Could not obtain flash parameters");
   112cc:	48a3      	ldr	r0, [pc, #652]	; (1155c <nvs_init+0x2dc>)
   112ce:	1ac9      	subs	r1, r1, r3
   112d0:	08c9      	lsrs	r1, r1, #3
   112d2:	0189      	lsls	r1, r1, #6
   112d4:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
   112d8:	f00d f953 	bl	1e582 <log_0>
		return -EINVAL;
   112dc:	f06f 0515 	mvn.w	r5, #21
   112e0:	e7e9      	b.n	112b6 <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
   112e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   112e4:	6883      	ldr	r3, [r0, #8]
   112e6:	691b      	ldr	r3, [r3, #16]
   112e8:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   112ea:	6803      	ldr	r3, [r0, #0]
   112ec:	3b01      	subs	r3, #1
   112ee:	2b1f      	cmp	r3, #31
   112f0:	d908      	bls.n	11304 <nvs_init+0x84>
   112f2:	4998      	ldr	r1, [pc, #608]	; (11554 <nvs_init+0x2d4>)
   112f4:	4b96      	ldr	r3, [pc, #600]	; (11550 <nvs_init+0x2d0>)
		LOG_ERR("Unsupported write block size");
   112f6:	489a      	ldr	r0, [pc, #616]	; (11560 <nvs_init+0x2e0>)
   112f8:	1ac9      	subs	r1, r1, r3
   112fa:	08c9      	lsrs	r1, r1, #3
   112fc:	0189      	lsls	r1, r1, #6
   112fe:	f041 0101 	orr.w	r1, r1, #1
   11302:	e7e9      	b.n	112d8 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   11304:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11306:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11308:	aa03      	add	r2, sp, #12
   1130a:	f011 f97b 	bl	22604 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1130e:	b140      	cbz	r0, 11322 <nvs_init+0xa2>
   11310:	4990      	ldr	r1, [pc, #576]	; (11554 <nvs_init+0x2d4>)
   11312:	4b8f      	ldr	r3, [pc, #572]	; (11550 <nvs_init+0x2d0>)
		LOG_ERR("Unable to get page info");
   11314:	4893      	ldr	r0, [pc, #588]	; (11564 <nvs_init+0x2e4>)
   11316:	1ac9      	subs	r1, r1, r3
   11318:	08c9      	lsrs	r1, r1, #3
   1131a:	0189      	lsls	r1, r1, #6
   1131c:	f041 0101 	orr.w	r1, r1, #1
   11320:	e7da      	b.n	112d8 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
   11322:	89a3      	ldrh	r3, [r4, #12]
   11324:	b12b      	cbz	r3, 11332 <nvs_init+0xb2>
   11326:	9a04      	ldr	r2, [sp, #16]
   11328:	fbb3 f5f2 	udiv	r5, r3, r2
   1132c:	fb02 3515 	mls	r5, r2, r5, r3
   11330:	b145      	cbz	r5, 11344 <nvs_init+0xc4>
   11332:	4988      	ldr	r1, [pc, #544]	; (11554 <nvs_init+0x2d4>)
   11334:	4b86      	ldr	r3, [pc, #536]	; (11550 <nvs_init+0x2d0>)
		LOG_ERR("Invalid sector size");
   11336:	488c      	ldr	r0, [pc, #560]	; (11568 <nvs_init+0x2e8>)
   11338:	1ac9      	subs	r1, r1, r3
   1133a:	08c9      	lsrs	r1, r1, #3
   1133c:	0189      	lsls	r1, r1, #6
   1133e:	f041 0101 	orr.w	r1, r1, #1
   11342:	e7c9      	b.n	112d8 <nvs_init+0x58>
	if (fs->sector_count < 2) {
   11344:	89e3      	ldrh	r3, [r4, #14]
   11346:	2b01      	cmp	r3, #1
   11348:	d808      	bhi.n	1135c <nvs_init+0xdc>
   1134a:	4982      	ldr	r1, [pc, #520]	; (11554 <nvs_init+0x2d4>)
   1134c:	4b80      	ldr	r3, [pc, #512]	; (11550 <nvs_init+0x2d0>)
		LOG_ERR("Configuration error - sector count");
   1134e:	4887      	ldr	r0, [pc, #540]	; (1156c <nvs_init+0x2ec>)
   11350:	1ac9      	subs	r1, r1, r3
   11352:	08c9      	lsrs	r1, r1, #3
   11354:	0189      	lsls	r1, r1, #6
   11356:	f041 0101 	orr.w	r1, r1, #1
   1135a:	e7bd      	b.n	112d8 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   1135c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   1135e:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   11360:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11364:	f04f 32ff 	mov.w	r2, #4294967295
   11368:	f04f 33ff 	mov.w	r3, #4294967295
   1136c:	4630      	mov	r0, r6
   1136e:	f00b fa8f 	bl	1c890 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11372:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11374:	2108      	movs	r1, #8
   11376:	f00d fb26 	bl	1e9c6 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   1137a:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1137c:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
   1137e:	89e3      	ldrh	r3, [r4, #14]
   11380:	fa1f fa85 	uxth.w	sl, r5
   11384:	4553      	cmp	r3, sl
   11386:	d865      	bhi.n	11454 <nvs_init+0x1d4>
	if (closed_sectors == fs->sector_count) {
   11388:	89e3      	ldrh	r3, [r4, #14]
   1138a:	42bb      	cmp	r3, r7
   1138c:	f000 80c3 	beq.w	11516 <nvs_init+0x296>
	if (i == fs->sector_count) {
   11390:	4553      	cmp	r3, sl
   11392:	d10c      	bne.n	113ae <nvs_init+0x12e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   11394:	9900      	ldr	r1, [sp, #0]
   11396:	2308      	movs	r3, #8
   11398:	464a      	mov	r2, r9
   1139a:	eba1 0108 	sub.w	r1, r1, r8
   1139e:	4620      	mov	r0, r4
   113a0:	f00d faac 	bl	1e8fc <nvs_flash_cmp_const>
		if (!rc) {
   113a4:	b918      	cbnz	r0, 113ae <nvs_init+0x12e>
			nvs_sector_advance(fs, &addr);
   113a6:	89e0      	ldrh	r0, [r4, #14]
   113a8:	4669      	mov	r1, sp
   113aa:	f00d fb30 	bl	1ea0e <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   113ae:	4669      	mov	r1, sp
   113b0:	4620      	mov	r0, r4
   113b2:	f7ff fe71 	bl	11098 <nvs_recover_last_ate>
	if (rc) {
   113b6:	4605      	mov	r5, r0
   113b8:	bb40      	cbnz	r0, 1140c <nvs_init+0x18c>
	fs->ate_wra = addr;
   113ba:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   113bc:	4f6c      	ldr	r7, [pc, #432]	; (11570 <nvs_init+0x2f0>)
	fs->ate_wra = addr;
   113be:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   113c0:	403b      	ands	r3, r7
   113c2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   113c4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   113c8:	4299      	cmp	r1, r3
   113ca:	d30f      	bcc.n	113ec <nvs_init+0x16c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   113cc:	2308      	movs	r3, #8
   113ce:	aa01      	add	r2, sp, #4
   113d0:	4620      	mov	r0, r4
   113d2:	f00d fa5b 	bl	1e88c <nvs_flash_rd>
		if (rc) {
   113d6:	4605      	mov	r5, r0
   113d8:	b9c0      	cbnz	r0, 1140c <nvs_init+0x18c>
   113da:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   113dc:	f813 2b01 	ldrb.w	r2, [r3], #1
   113e0:	4591      	cmp	r9, r2
   113e2:	f040 809b 	bne.w	1151c <nvs_init+0x29c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   113e6:	3501      	adds	r5, #1
   113e8:	2d08      	cmp	r5, #8
   113ea:	d1f7      	bne.n	113dc <nvs_init+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   113ec:	6863      	ldr	r3, [r4, #4]
   113ee:	4f60      	ldr	r7, [pc, #384]	; (11570 <nvs_init+0x2f0>)
	nvs_sector_advance(fs, &addr);
   113f0:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   113f2:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
   113f4:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   113f6:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   113f8:	f00d fb09 	bl	1ea0e <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   113fc:	89a3      	ldrh	r3, [r4, #12]
   113fe:	9900      	ldr	r1, [sp, #0]
   11400:	464a      	mov	r2, r9
   11402:	4620      	mov	r0, r4
   11404:	f00d fa7a 	bl	1e8fc <nvs_flash_cmp_const>
	if (rc < 0) {
   11408:	1e05      	subs	r5, r0, #0
   1140a:	da46      	bge.n	1149a <nvs_init+0x21a>
	return z_impl_k_mutex_unlock(mutex);
   1140c:	4630      	mov	r0, r6
   1140e:	f00b fab7 	bl	1c980 <z_impl_k_mutex_unlock>
	if (rc) {
   11412:	2d00      	cmp	r5, #0
   11414:	f47f af4f 	bne.w	112b6 <nvs_init+0x36>
	fs->ready = true;
   11418:	2301      	movs	r3, #1
   1141a:	7423      	strb	r3, [r4, #16]
   1141c:	4e4d      	ldr	r6, [pc, #308]	; (11554 <nvs_init+0x2d4>)
   1141e:	4b4c      	ldr	r3, [pc, #304]	; (11550 <nvs_init+0x2d0>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   11420:	89a2      	ldrh	r2, [r4, #12]
   11422:	89e1      	ldrh	r1, [r4, #14]
   11424:	4853      	ldr	r0, [pc, #332]	; (11574 <nvs_init+0x2f4>)
   11426:	1af6      	subs	r6, r6, r3
   11428:	08f6      	lsrs	r6, r6, #3
   1142a:	01b6      	lsls	r6, r6, #6
   1142c:	f046 0603 	orr.w	r6, r6, #3
   11430:	4633      	mov	r3, r6
   11432:	f00d f8c7 	bl	1e5c4 <log_2>
	LOG_INF("alloc wra: %d, %x",
   11436:	6861      	ldr	r1, [r4, #4]
   11438:	484f      	ldr	r0, [pc, #316]	; (11578 <nvs_init+0x2f8>)
   1143a:	4633      	mov	r3, r6
   1143c:	b28a      	uxth	r2, r1
   1143e:	0c09      	lsrs	r1, r1, #16
   11440:	f00d f8c0 	bl	1e5c4 <log_2>
	LOG_INF("data wra: %d, %x",
   11444:	68a1      	ldr	r1, [r4, #8]
   11446:	484d      	ldr	r0, [pc, #308]	; (1157c <nvs_init+0x2fc>)
   11448:	b28a      	uxth	r2, r1
   1144a:	4633      	mov	r3, r6
   1144c:	0c09      	lsrs	r1, r1, #16
   1144e:	f00d f8b9 	bl	1e5c4 <log_2>
	return 0;
   11452:	e730      	b.n	112b6 <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
   11454:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   11456:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   11458:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
   1145c:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11460:	464a      	mov	r2, r9
   11462:	2308      	movs	r3, #8
   11464:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   11466:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11468:	f00d fa48 	bl	1e8fc <nvs_flash_cmp_const>
		if (rc) {
   1146c:	b170      	cbz	r0, 1148c <nvs_init+0x20c>
			nvs_sector_advance(fs, &addr);
   1146e:	89e0      	ldrh	r0, [r4, #14]
   11470:	4669      	mov	r1, sp
   11472:	f00d facc 	bl	1ea0e <nvs_sector_advance.isra.0>
			closed_sectors++;
   11476:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11478:	9900      	ldr	r1, [sp, #0]
   1147a:	2308      	movs	r3, #8
   1147c:	464a      	mov	r2, r9
   1147e:	4620      	mov	r0, r4
			closed_sectors++;
   11480:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11482:	f00d fa3b 	bl	1e8fc <nvs_flash_cmp_const>
			if (!rc) {
   11486:	2800      	cmp	r0, #0
   11488:	f43f af7e 	beq.w	11388 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
   1148c:	3501      	adds	r5, #1
   1148e:	e776      	b.n	1137e <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   11490:	2d00      	cmp	r5, #0
   11492:	d058      	beq.n	11546 <nvs_init+0x2c6>
				rc = -ESPIPE;
   11494:	f06f 051c 	mvn.w	r5, #28
   11498:	e7b8      	b.n	1140c <nvs_init+0x18c>
	if (rc) {
   1149a:	d021      	beq.n	114e0 <nvs_init+0x260>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1149c:	6861      	ldr	r1, [r4, #4]
   1149e:	4620      	mov	r0, r4
   114a0:	f00d fa51 	bl	1e946 <nvs_flash_erase_sector>
		if (rc) {
   114a4:	4605      	mov	r5, r0
   114a6:	2800      	cmp	r0, #0
   114a8:	d1b0      	bne.n	1140c <nvs_init+0x18c>
		fs->ate_wra &= ADDR_SECT_MASK;
   114aa:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   114ac:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   114ae:	403b      	ands	r3, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   114b0:	4403      	add	r3, r0
   114b2:	eba3 0048 	sub.w	r0, r3, r8, lsl #1
   114b6:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   114b8:	4038      	ands	r0, r7
   114ba:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
   114bc:	4620      	mov	r0, r4
   114be:	f7ff fe1d 	bl	110fc <nvs_gc>
   114c2:	4605      	mov	r5, r0
		goto end;
   114c4:	e7a2      	b.n	1140c <nvs_init+0x18c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   114c6:	1a5b      	subs	r3, r3, r1
   114c8:	464a      	mov	r2, r9
   114ca:	4620      	mov	r0, r4
   114cc:	f00d fa16 	bl	1e8fc <nvs_flash_cmp_const>
		if (rc < 0) {
   114d0:	1e05      	subs	r5, r0, #0
   114d2:	db9b      	blt.n	1140c <nvs_init+0x18c>
		if (!rc) {
   114d4:	d008      	beq.n	114e8 <nvs_init+0x268>
		fs->data_wra += fs->flash_parameters->write_block_size;
   114d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   114d8:	68a3      	ldr	r3, [r4, #8]
   114da:	6812      	ldr	r2, [r2, #0]
   114dc:	4413      	add	r3, r2
   114de:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   114e0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   114e4:	428b      	cmp	r3, r1
   114e6:	d8ee      	bhi.n	114c6 <nvs_init+0x246>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   114e8:	6861      	ldr	r1, [r4, #4]
   114ea:	89a3      	ldrh	r3, [r4, #12]
   114ec:	eb01 0048 	add.w	r0, r1, r8, lsl #1
   114f0:	4298      	cmp	r0, r3
   114f2:	d18b      	bne.n	1140c <nvs_init+0x18c>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   114f4:	4f1e      	ldr	r7, [pc, #120]	; (11570 <nvs_init+0x2f0>)
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   114f6:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   114f8:	ea01 0307 	and.w	r3, r1, r7
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   114fc:	429a      	cmp	r2, r3
   114fe:	d085      	beq.n	1140c <nvs_init+0x18c>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   11500:	4620      	mov	r0, r4
   11502:	f00d fa20 	bl	1e946 <nvs_flash_erase_sector>
		if (rc) {
   11506:	4605      	mov	r5, r0
   11508:	2800      	cmp	r0, #0
   1150a:	f47f af7f 	bne.w	1140c <nvs_init+0x18c>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1150e:	6863      	ldr	r3, [r4, #4]
   11510:	403b      	ands	r3, r7
   11512:	60a3      	str	r3, [r4, #8]
   11514:	e77a      	b.n	1140c <nvs_init+0x18c>
		rc = -EDEADLK;
   11516:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   1151a:	e777      	b.n	1140c <nvs_init+0x18c>
		if (nvs_ate_valid(fs, &last_ate)) {
   1151c:	a901      	add	r1, sp, #4
   1151e:	4620      	mov	r0, r4
   11520:	f00d fa5b 	bl	1e9da <nvs_ate_valid>
   11524:	6862      	ldr	r2, [r4, #4]
   11526:	b170      	cbz	r0, 11546 <nvs_init+0x2c6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   11528:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1152a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   1152e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11532:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   11534:	403b      	ands	r3, r7
   11536:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   11538:	4429      	add	r1, r5
   1153a:	f00d fa44 	bl	1e9c6 <nvs_al_size.isra.0>
   1153e:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   11540:	4293      	cmp	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   11542:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   11544:	d0a4      	beq.n	11490 <nvs_init+0x210>
		fs->ate_wra -= ate_size;
   11546:	eba2 0208 	sub.w	r2, r2, r8
   1154a:	6062      	str	r2, [r4, #4]
   1154c:	e73a      	b.n	113c4 <nvs_init+0x144>
   1154e:	bf00      	nop
   11550:	0002353c 	.word	0x0002353c
   11554:	000235dc 	.word	0x000235dc
   11558:	00024143 	.word	0x00024143
   1155c:	0002415f 	.word	0x0002415f
   11560:	00024181 	.word	0x00024181
   11564:	0002419e 	.word	0x0002419e
   11568:	000241b6 	.word	0x000241b6
   1156c:	000241ca 	.word	0x000241ca
   11570:	ffff0000 	.word	0xffff0000
   11574:	000241ed 	.word	0x000241ed
   11578:	00024204 	.word	0x00024204
   1157c:	00024216 	.word	0x00024216

00011580 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   11580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11584:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   11586:	7c03      	ldrb	r3, [r0, #16]
{
   11588:	b089      	sub	sp, #36	; 0x24
   1158a:	4604      	mov	r4, r0
   1158c:	4689      	mov	r9, r1
   1158e:	4690      	mov	r8, r2
	if (!fs->ready) {
   11590:	b97b      	cbnz	r3, 115b2 <nvs_write+0x32>
   11592:	4b69      	ldr	r3, [pc, #420]	; (11738 <nvs_write+0x1b8>)
   11594:	4969      	ldr	r1, [pc, #420]	; (1173c <nvs_write+0x1bc>)
		LOG_ERR("NVS not initialized");
   11596:	486a      	ldr	r0, [pc, #424]	; (11740 <nvs_write+0x1c0>)
   11598:	1ac9      	subs	r1, r1, r3
   1159a:	08c9      	lsrs	r1, r1, #3
   1159c:	0189      	lsls	r1, r1, #6
   1159e:	f041 0101 	orr.w	r1, r1, #1
   115a2:	f00c ffee 	bl	1e582 <log_0>
		return -EACCES;
   115a6:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   115aa:	4628      	mov	r0, r5
   115ac:	b009      	add	sp, #36	; 0x24
   115ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   115b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   115b4:	2108      	movs	r1, #8
   115b6:	4618      	mov	r0, r3
   115b8:	f00d fa05 	bl	1e9c6 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   115bc:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   115be:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   115c0:	4618      	mov	r0, r3
   115c2:	f00d fa00 	bl	1e9c6 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   115c6:	89a3      	ldrh	r3, [r4, #12]
   115c8:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   115cc:	1a9b      	subs	r3, r3, r2
   115ce:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   115d0:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   115d2:	f200 80ac 	bhi.w	1172e <nvs_write+0x1ae>
   115d6:	b11e      	cbz	r6, 115e0 <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
   115d8:	f1b8 0f00 	cmp.w	r8, #0
   115dc:	f000 80a7 	beq.w	1172e <nvs_write+0x1ae>
	wlk_addr = fs->ate_wra;
   115e0:	6863      	ldr	r3, [r4, #4]
   115e2:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   115e4:	aa04      	add	r2, sp, #16
   115e6:	a903      	add	r1, sp, #12
   115e8:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   115ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   115ee:	f00d fa7d 	bl	1eaec <nvs_prev_ate>
		if (rc) {
   115f2:	4605      	mov	r5, r0
   115f4:	2800      	cmp	r0, #0
   115f6:	d1d8      	bne.n	115aa <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   115f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   115fc:	454b      	cmp	r3, r9
   115fe:	d005      	beq.n	1160c <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
   11600:	6862      	ldr	r2, [r4, #4]
   11602:	9b03      	ldr	r3, [sp, #12]
   11604:	429a      	cmp	r2, r3
   11606:	d1ed      	bne.n	115e4 <nvs_write+0x64>
		if (len == 0) {
   11608:	b9e6      	cbnz	r6, 11644 <nvs_write+0xc4>
   1160a:	e7ce      	b.n	115aa <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1160c:	a904      	add	r1, sp, #16
   1160e:	4620      	mov	r0, r4
   11610:	f00d f9e3 	bl	1e9da <nvs_ate_valid>
   11614:	2800      	cmp	r0, #0
   11616:	d0f3      	beq.n	11600 <nvs_write+0x80>
		if (len == 0) {
   11618:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1161c:	b186      	cbz	r6, 11640 <nvs_write+0xc0>
		} else if (len == wlk_ate.len) {
   1161e:	429e      	cmp	r6, r3
   11620:	d110      	bne.n	11644 <nvs_write+0xc4>
		rd_addr += wlk_ate.offset;
   11622:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   11626:	ea4f 411b 	mov.w	r1, fp, lsr #16
   1162a:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   1162c:	4401      	add	r1, r0
   1162e:	4633      	mov	r3, r6
   11630:	4642      	mov	r2, r8
   11632:	4620      	mov	r0, r4
   11634:	f00d f938 	bl	1e8a8 <nvs_flash_block_cmp>
			if (rc <= 0) {
   11638:	2800      	cmp	r0, #0
   1163a:	dc03      	bgt.n	11644 <nvs_write+0xc4>
   1163c:	4605      	mov	r5, r0
   1163e:	e7b4      	b.n	115aa <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   11640:	2b00      	cmp	r3, #0
   11642:	d0b2      	beq.n	115aa <nvs_write+0x2a>
	if (data_size) {
   11644:	2f00      	cmp	r7, #0
   11646:	d13f      	bne.n	116c8 <nvs_write+0x148>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   11648:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1164c:	f04f 32ff 	mov.w	r2, #4294967295
   11650:	f04f 33ff 	mov.w	r3, #4294967295
   11654:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   11656:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 11744 <nvs_write+0x1c4>
   1165a:	f00b f919 	bl	1c890 <z_impl_k_mutex_lock>
	gc_count = 0;
   1165e:	2200      	movs	r2, #0
		if (gc_count == fs->sector_count) {
   11660:	89e3      	ldrh	r3, [r4, #14]
   11662:	429a      	cmp	r2, r3
   11664:	d060      	beq.n	11728 <nvs_write+0x1a8>
		if (fs->ate_wra >= fs->data_wra + required_space) {
   11666:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1166a:	1878      	adds	r0, r7, r1
   1166c:	4283      	cmp	r3, r0
   1166e:	d32e      	bcc.n	116ce <nvs_write+0x14e>
	entry.part = 0xff;
   11670:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   11672:	a806      	add	r0, sp, #24
	entry.id = id;
   11674:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   11678:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   1167c:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   11680:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   11684:	f00d f996 	bl	1e9b4 <nvs_ate_crc8_update>
	if (!len) {
   11688:	b136      	cbz	r6, 11698 <nvs_write+0x118>
   1168a:	68a1      	ldr	r1, [r4, #8]
   1168c:	4633      	mov	r3, r6
   1168e:	4642      	mov	r2, r8
   11690:	4620      	mov	r0, r4
   11692:	f00d f9e5 	bl	1ea60 <nvs_flash_al_wrt.part.0>
   11696:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   11698:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1169a:	4631      	mov	r1, r6
   1169c:	f00d f993 	bl	1e9c6 <nvs_al_size.isra.0>
   116a0:	68a3      	ldr	r3, [r4, #8]
   116a2:	4403      	add	r3, r0
   116a4:	60a3      	str	r3, [r4, #8]
	if (rc) {
   116a6:	2d00      	cmp	r5, #0
   116a8:	d144      	bne.n	11734 <nvs_write+0x1b4>
	rc = nvs_flash_ate_wrt(fs, &entry);
   116aa:	a906      	add	r1, sp, #24
   116ac:	4620      	mov	r0, r4
   116ae:	f00d fa0c 	bl	1eaca <nvs_flash_ate_wrt>
	if (rc) {
   116b2:	4605      	mov	r5, r0
   116b4:	2800      	cmp	r0, #0
   116b6:	d13d      	bne.n	11734 <nvs_write+0x1b4>
	rc = len;
   116b8:	4633      	mov	r3, r6
   116ba:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   116bc:	4650      	mov	r0, sl
   116be:	f00b f95f 	bl	1c980 <z_impl_k_mutex_unlock>
	return rc;
   116c2:	9b01      	ldr	r3, [sp, #4]
   116c4:	461d      	mov	r5, r3
   116c6:	e770      	b.n	115aa <nvs_write+0x2a>
		required_space = data_size + ate_size;
   116c8:	4457      	add	r7, sl
   116ca:	b2bf      	uxth	r7, r7
   116cc:	e7bc      	b.n	11648 <nvs_write+0xc8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   116ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   116d0:	9201      	str	r2, [sp, #4]
   116d2:	2108      	movs	r1, #8
   116d4:	f00d f977 	bl	1e9c6 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   116d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   116dc:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   116e0:	2100      	movs	r1, #0
   116e2:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   116e6:	1819      	adds	r1, r3, r0
   116e8:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   116ec:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   116ee:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   116f2:	440b      	add	r3, r1
   116f4:	1a18      	subs	r0, r3, r0
   116f6:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   116f8:	a806      	add	r0, sp, #24
   116fa:	f00d f95b 	bl	1e9b4 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   116fe:	a906      	add	r1, sp, #24
   11700:	4620      	mov	r0, r4
   11702:	f00d f9e2 	bl	1eaca <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   11706:	89e0      	ldrh	r0, [r4, #14]
   11708:	1d21      	adds	r1, r4, #4
   1170a:	f00d f980 	bl	1ea0e <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1170e:	6863      	ldr	r3, [r4, #4]
   11710:	ea03 030b 	and.w	r3, r3, fp
   11714:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   11716:	4620      	mov	r0, r4
   11718:	f7ff fcf0 	bl	110fc <nvs_gc>
		if (rc) {
   1171c:	4603      	mov	r3, r0
   1171e:	2800      	cmp	r0, #0
   11720:	d1cb      	bne.n	116ba <nvs_write+0x13a>
		gc_count++;
   11722:	9a01      	ldr	r2, [sp, #4]
   11724:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   11726:	e79b      	b.n	11660 <nvs_write+0xe0>
			rc = -ENOSPC;
   11728:	f06f 031b 	mvn.w	r3, #27
   1172c:	e7c5      	b.n	116ba <nvs_write+0x13a>
		return -EINVAL;
   1172e:	f06f 0515 	mvn.w	r5, #21
   11732:	e73a      	b.n	115aa <nvs_write+0x2a>
			if (rc) {
   11734:	462b      	mov	r3, r5
   11736:	e7c0      	b.n	116ba <nvs_write+0x13a>
   11738:	0002353c 	.word	0x0002353c
   1173c:	000235dc 	.word	0x000235dc
   11740:	0002412f 	.word	0x0002412f
   11744:	ffff0000 	.word	0xffff0000

00011748 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   11748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1174c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1174e:	7c03      	ldrb	r3, [r0, #16]
{
   11750:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   11754:	4604      	mov	r4, r0
   11756:	460f      	mov	r7, r1
   11758:	4690      	mov	r8, r2
	if (!fs->ready) {
   1175a:	b973      	cbnz	r3, 1177a <nvs_read_hist+0x32>
   1175c:	4b2b      	ldr	r3, [pc, #172]	; (1180c <nvs_read_hist+0xc4>)
   1175e:	492c      	ldr	r1, [pc, #176]	; (11810 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
   11760:	482c      	ldr	r0, [pc, #176]	; (11814 <nvs_read_hist+0xcc>)
   11762:	1ac9      	subs	r1, r1, r3
   11764:	08c9      	lsrs	r1, r1, #3
   11766:	0189      	lsls	r1, r1, #6
   11768:	f041 0101 	orr.w	r1, r1, #1
   1176c:	f00c ff09 	bl	1e582 <log_0>
		return -EACCES;
   11770:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   11774:	b004      	add	sp, #16
   11776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1177a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1177c:	2108      	movs	r1, #8
   1177e:	f00d f922 	bl	1e9c6 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   11782:	89a3      	ldrh	r3, [r4, #12]
   11784:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   11788:	429e      	cmp	r6, r3
   1178a:	d83c      	bhi.n	11806 <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
   1178c:	6863      	ldr	r3, [r4, #4]
   1178e:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   11790:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   11794:	aa02      	add	r2, sp, #8
   11796:	a901      	add	r1, sp, #4
   11798:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1179a:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1179c:	f00d f9a6 	bl	1eaec <nvs_prev_ate>
		if (rc) {
   117a0:	2800      	cmp	r0, #0
   117a2:	d1e7      	bne.n	11774 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   117a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   117a8:	42bb      	cmp	r3, r7
   117aa:	d108      	bne.n	117be <nvs_read_hist+0x76>
   117ac:	a902      	add	r1, sp, #8
   117ae:	4620      	mov	r0, r4
   117b0:	f00d f913 	bl	1e9da <nvs_ate_valid>
   117b4:	b118      	cbz	r0, 117be <nvs_read_hist+0x76>
			cnt_his++;
   117b6:	f10a 0a01 	add.w	sl, sl, #1
   117ba:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   117be:	6862      	ldr	r2, [r4, #4]
   117c0:	9b01      	ldr	r3, [sp, #4]
   117c2:	429a      	cmp	r2, r3
   117c4:	d018      	beq.n	117f8 <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
   117c6:	45d1      	cmp	r9, sl
   117c8:	d2e4      	bcs.n	11794 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   117ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   117ce:	b1bb      	cbz	r3, 11800 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   117d0:	45d1      	cmp	r9, sl
   117d2:	d815      	bhi.n	11800 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
   117d4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   117d8:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   117da:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   117dc:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   117e0:	bf28      	it	cs
   117e2:	4633      	movcs	r3, r6
   117e4:	4642      	mov	r2, r8
   117e6:	4429      	add	r1, r5
   117e8:	4620      	mov	r0, r4
   117ea:	f00d f84f 	bl	1e88c <nvs_flash_rd>
	if (rc) {
   117ee:	2800      	cmp	r0, #0
   117f0:	d1c0      	bne.n	11774 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   117f2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   117f6:	e7bd      	b.n	11774 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   117f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   117fc:	42bb      	cmp	r3, r7
   117fe:	d0e4      	beq.n	117ca <nvs_read_hist+0x82>
		return -ENOENT;
   11800:	f06f 0001 	mvn.w	r0, #1
   11804:	e7b6      	b.n	11774 <nvs_read_hist+0x2c>
		return -EINVAL;
   11806:	f06f 0015 	mvn.w	r0, #21
   1180a:	e7b3      	b.n	11774 <nvs_read_hist+0x2c>
   1180c:	0002353c 	.word	0x0002353c
   11810:	000235dc 	.word	0x000235dc
   11814:	0002412f 	.word	0x0002412f

00011818 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   11818:	4b09      	ldr	r3, [pc, #36]	; (11840 <get_flash_area_from_id+0x28>)
{
   1181a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   1181c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   1181e:	4b09      	ldr	r3, [pc, #36]	; (11844 <get_flash_area_from_id+0x2c>)
{
   11820:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
   11822:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   11824:	2300      	movs	r3, #0
   11826:	429d      	cmp	r5, r3
   11828:	dc01      	bgt.n	1182e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   1182a:	2000      	movs	r0, #0
}
   1182c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   1182e:	0119      	lsls	r1, r3, #4
   11830:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   11834:	5c61      	ldrb	r1, [r4, r1]
   11836:	4291      	cmp	r1, r2
   11838:	d0f8      	beq.n	1182c <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
   1183a:	3301      	adds	r3, #1
   1183c:	e7f3      	b.n	11826 <get_flash_area_from_id+0xe>
   1183e:	bf00      	nop
   11840:	000238bc 	.word	0x000238bc
   11844:	20000478 	.word	0x20000478

00011848 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   11848:	4b08      	ldr	r3, [pc, #32]	; (1186c <flash_area_open+0x24>)
   1184a:	681b      	ldr	r3, [r3, #0]
{
   1184c:	b510      	push	{r4, lr}
   1184e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   11850:	b12b      	cbz	r3, 1185e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   11852:	f7ff ffe1 	bl	11818 <get_flash_area_from_id>
	if (area == NULL) {
   11856:	b128      	cbz	r0, 11864 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   11858:	6020      	str	r0, [r4, #0]
	return 0;
   1185a:	2000      	movs	r0, #0
}
   1185c:	bd10      	pop	{r4, pc}
		return -EACCES;
   1185e:	f06f 000c 	mvn.w	r0, #12
   11862:	e7fb      	b.n	1185c <flash_area_open+0x14>
		return -ENOENT;
   11864:	f06f 0001 	mvn.w	r0, #1
   11868:	e7f8      	b.n	1185c <flash_area_open+0x14>
   1186a:	bf00      	nop
   1186c:	20000478 	.word	0x20000478

00011870 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   11870:	b530      	push	{r4, r5, lr}
   11872:	b089      	sub	sp, #36	; 0x24
   11874:	460c      	mov	r4, r1
   11876:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   11878:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   1187a:	f7ff ffcd 	bl	11818 <get_flash_area_from_id>
	if (fa == NULL) {
   1187e:	b1b8      	cbz	r0, 118b0 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   11880:	6843      	ldr	r3, [r0, #4]
   11882:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   11884:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   11886:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   11888:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   1188a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   1188e:	2300      	movs	r3, #0
	cb_data->status = 0;
   11890:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   11894:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
   11896:	f00d f980 	bl	1eb9a <device_get_binding>
	if (flash_dev == NULL) {
   1189a:	b160      	cbz	r0, 118b6 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   1189c:	4907      	ldr	r1, [pc, #28]	; (118bc <flash_area_get_sectors+0x4c>)
   1189e:	aa01      	add	r2, sp, #4
   118a0:	f010 feb4 	bl	2260c <flash_page_foreach>
	if (cb_data->status == 0) {
   118a4:	9807      	ldr	r0, [sp, #28]
   118a6:	b908      	cbnz	r0, 118ac <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   118a8:	9b05      	ldr	r3, [sp, #20]
   118aa:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   118ac:	b009      	add	sp, #36	; 0x24
   118ae:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   118b0:	f06f 0015 	mvn.w	r0, #21
   118b4:	e7fa      	b.n	118ac <flash_area_get_sectors+0x3c>
		return -ENODEV;
   118b6:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   118ba:	e7f7      	b.n	118ac <flash_area_get_sectors+0x3c>
   118bc:	0001eb9f 	.word	0x0001eb9f

000118c0 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   118c0:	4b10      	ldr	r3, [pc, #64]	; (11904 <settings_save_one+0x44>)
{
   118c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   118c6:	681c      	ldr	r4, [r3, #0]
{
   118c8:	4605      	mov	r5, r0
   118ca:	460e      	mov	r6, r1
   118cc:	4617      	mov	r7, r2
	if (!cs) {
   118ce:	b1ac      	cbz	r4, 118fc <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   118d0:	f04f 32ff 	mov.w	r2, #4294967295
   118d4:	f04f 33ff 	mov.w	r3, #4294967295
   118d8:	480b      	ldr	r0, [pc, #44]	; (11908 <settings_save_one+0x48>)
   118da:	f00a ffd9 	bl	1c890 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   118de:	6863      	ldr	r3, [r4, #4]
   118e0:	4632      	mov	r2, r6
   118e2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   118e6:	4629      	mov	r1, r5
   118e8:	463b      	mov	r3, r7
   118ea:	4620      	mov	r0, r4
   118ec:	47c0      	blx	r8
   118ee:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   118f0:	4805      	ldr	r0, [pc, #20]	; (11908 <settings_save_one+0x48>)
   118f2:	f00b f845 	bl	1c980 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   118f6:	4620      	mov	r0, r4
   118f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   118fc:	f06f 0401 	mvn.w	r4, #1
   11900:	e7f9      	b.n	118f6 <settings_save_one+0x36>
   11902:	bf00      	nop
   11904:	20001dd4 	.word	0x20001dd4
   11908:	20000748 	.word	0x20000748

0001190c <settings_src_register>:
	parent->next = child;
   1190c:	2300      	movs	r3, #0
   1190e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   11910:	4b04      	ldr	r3, [pc, #16]	; (11924 <settings_src_register+0x18>)
   11912:	685a      	ldr	r2, [r3, #4]
   11914:	b912      	cbnz	r2, 1191c <settings_src_register+0x10>
	list->head = node;
   11916:	e9c3 0000 	strd	r0, r0, [r3]
}
   1191a:	4770      	bx	lr
	parent->next = child;
   1191c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1191e:	6058      	str	r0, [r3, #4]
}
   11920:	4770      	bx	lr
   11922:	bf00      	nop
   11924:	20001dcc 	.word	0x20001dcc

00011928 <settings_dst_register>:
	settings_save_dst = cs;
   11928:	4b01      	ldr	r3, [pc, #4]	; (11930 <settings_dst_register+0x8>)
   1192a:	6018      	str	r0, [r3, #0]
}
   1192c:	4770      	bx	lr
   1192e:	bf00      	nop
   11930:	20001dd4 	.word	0x20001dd4

00011934 <settings_load_subtree>:
{
   11934:	b530      	push	{r4, r5, lr}
   11936:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   11938:	2300      	movs	r3, #0
{
   1193a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   1193c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   11940:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11942:	f04f 33ff 	mov.w	r3, #4294967295
   11946:	480e      	ldr	r0, [pc, #56]	; (11980 <settings_load_subtree+0x4c>)
   11948:	f04f 32ff 	mov.w	r2, #4294967295
   1194c:	f00a ffa0 	bl	1c890 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11950:	4b0c      	ldr	r3, [pc, #48]	; (11984 <settings_load_subtree+0x50>)
   11952:	681c      	ldr	r4, [r3, #0]
   11954:	2c00      	cmp	r4, #0
   11956:	bf38      	it	cc
   11958:	2400      	movcc	r4, #0
   1195a:	b13c      	cbz	r4, 1196c <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   1195c:	6863      	ldr	r3, [r4, #4]
   1195e:	4620      	mov	r0, r4
   11960:	681b      	ldr	r3, [r3, #0]
   11962:	a901      	add	r1, sp, #4
   11964:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11966:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11968:	2c00      	cmp	r4, #0
   1196a:	d1f6      	bne.n	1195a <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   1196c:	4628      	mov	r0, r5
   1196e:	f000 f8d7 	bl	11b20 <settings_commit_subtree>
   11972:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11974:	4802      	ldr	r0, [pc, #8]	; (11980 <settings_load_subtree+0x4c>)
   11976:	f00b f803 	bl	1c980 <z_impl_k_mutex_unlock>
}
   1197a:	4620      	mov	r0, r4
   1197c:	b005      	add	sp, #20
   1197e:	bd30      	pop	{r4, r5, pc}
   11980:	20000748 	.word	0x20000748
   11984:	20001dcc 	.word	0x20001dcc

00011988 <settings_load_subtree_direct>:
{
   11988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   1198a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1198e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   11990:	f04f 33ff 	mov.w	r3, #4294967295
   11994:	480c      	ldr	r0, [pc, #48]	; (119c8 <settings_load_subtree_direct+0x40>)
   11996:	f04f 32ff 	mov.w	r2, #4294967295
   1199a:	f00a ff79 	bl	1c890 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1199e:	4b0b      	ldr	r3, [pc, #44]	; (119cc <settings_load_subtree_direct+0x44>)
   119a0:	681c      	ldr	r4, [r3, #0]
   119a2:	2c00      	cmp	r4, #0
   119a4:	bf38      	it	cc
   119a6:	2400      	movcc	r4, #0
   119a8:	b13c      	cbz	r4, 119ba <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   119aa:	6863      	ldr	r3, [r4, #4]
   119ac:	4620      	mov	r0, r4
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	a901      	add	r1, sp, #4
   119b2:	4798      	blx	r3
   119b4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   119b6:	2c00      	cmp	r4, #0
   119b8:	d1f6      	bne.n	119a8 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   119ba:	4803      	ldr	r0, [pc, #12]	; (119c8 <settings_load_subtree_direct+0x40>)
   119bc:	f00a ffe0 	bl	1c980 <z_impl_k_mutex_unlock>
}
   119c0:	2000      	movs	r0, #0
   119c2:	b004      	add	sp, #16
   119c4:	bd10      	pop	{r4, pc}
   119c6:	bf00      	nop
   119c8:	20000748 	.word	0x20000748
   119cc:	20001dcc 	.word	0x20001dcc

000119d0 <settings_store_init>:
	list->head = NULL;
   119d0:	4b02      	ldr	r3, [pc, #8]	; (119dc <settings_store_init+0xc>)
   119d2:	2200      	movs	r2, #0
	list->tail = NULL;
   119d4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   119d8:	4770      	bx	lr
   119da:	bf00      	nop
   119dc:	20001dcc 	.word	0x20001dcc

000119e0 <settings_init>:
	list->head = NULL;
   119e0:	4b02      	ldr	r3, [pc, #8]	; (119ec <settings_init+0xc>)
   119e2:	2200      	movs	r2, #0
	list->tail = NULL;
   119e4:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   119e8:	f7ff bff2 	b.w	119d0 <settings_store_init>
   119ec:	20001dd8 	.word	0x20001dd8

000119f0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   119f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   119f4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   119f6:	460e      	mov	r6, r1
   119f8:	b109      	cbz	r1, 119fe <settings_parse_and_lookup+0xe>
		*next = NULL;
   119fa:	2300      	movs	r3, #0
   119fc:	600b      	str	r3, [r1, #0]
   119fe:	4c1e      	ldr	r4, [pc, #120]	; (11a78 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11a00:	f8df 807c 	ldr.w	r8, [pc, #124]	; 11a80 <settings_parse_and_lookup+0x90>
   11a04:	2500      	movs	r5, #0
   11a06:	4544      	cmp	r4, r8
   11a08:	d308      	bcc.n	11a1c <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   11a0a:	4b1c      	ldr	r3, [pc, #112]	; (11a7c <settings_parse_and_lookup+0x8c>)
   11a0c:	681c      	ldr	r4, [r3, #0]
   11a0e:	b10c      	cbz	r4, 11a14 <settings_parse_and_lookup+0x24>
   11a10:	3c14      	subs	r4, #20
   11a12:	b9c4      	cbnz	r4, 11a46 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   11a14:	4628      	mov	r0, r5
   11a16:	b002      	add	sp, #8
   11a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   11a1c:	6821      	ldr	r1, [r4, #0]
   11a1e:	aa01      	add	r2, sp, #4
   11a20:	4638      	mov	r0, r7
   11a22:	f00d f8e1 	bl	1ebe8 <settings_name_steq>
   11a26:	b160      	cbz	r0, 11a42 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
   11a28:	b925      	cbnz	r5, 11a34 <settings_parse_and_lookup+0x44>
			if (next) {
   11a2a:	b10e      	cbz	r6, 11a30 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
   11a2c:	9b01      	ldr	r3, [sp, #4]
   11a2e:	6033      	str	r3, [r6, #0]
   11a30:	4625      	mov	r5, r4
   11a32:	e006      	b.n	11a42 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   11a34:	6829      	ldr	r1, [r5, #0]
   11a36:	6820      	ldr	r0, [r4, #0]
   11a38:	2200      	movs	r2, #0
   11a3a:	f00d f8d5 	bl	1ebe8 <settings_name_steq>
   11a3e:	2800      	cmp	r0, #0
   11a40:	d1f3      	bne.n	11a2a <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11a42:	3414      	adds	r4, #20
   11a44:	e7df      	b.n	11a06 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   11a46:	6821      	ldr	r1, [r4, #0]
   11a48:	aa01      	add	r2, sp, #4
   11a4a:	4638      	mov	r0, r7
   11a4c:	f00d f8cc 	bl	1ebe8 <settings_name_steq>
   11a50:	b160      	cbz	r0, 11a6c <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   11a52:	b925      	cbnz	r5, 11a5e <settings_parse_and_lookup+0x6e>
			if (next) {
   11a54:	b10e      	cbz	r6, 11a5a <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   11a56:	9b01      	ldr	r3, [sp, #4]
   11a58:	6033      	str	r3, [r6, #0]
   11a5a:	4625      	mov	r5, r4
   11a5c:	e006      	b.n	11a6c <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   11a5e:	6829      	ldr	r1, [r5, #0]
   11a60:	6820      	ldr	r0, [r4, #0]
   11a62:	2200      	movs	r2, #0
   11a64:	f00d f8c0 	bl	1ebe8 <settings_name_steq>
   11a68:	2800      	cmp	r0, #0
   11a6a:	d1f3      	bne.n	11a54 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   11a6c:	f114 0f14 	cmn.w	r4, #20
   11a70:	d0d0      	beq.n	11a14 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11a72:	6964      	ldr	r4, [r4, #20]
   11a74:	e7cb      	b.n	11a0e <settings_parse_and_lookup+0x1e>
   11a76:	bf00      	nop
   11a78:	000234c4 	.word	0x000234c4
   11a7c:	20001dd8 	.word	0x20001dd8
   11a80:	0002353c 	.word	0x0002353c

00011a84 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   11a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11a88:	b085      	sub	sp, #20
   11a8a:	4605      	mov	r5, r0
   11a8c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   11a90:	9003      	str	r0, [sp, #12]
{
   11a92:	460c      	mov	r4, r1
   11a94:	4616      	mov	r6, r2
   11a96:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   11a98:	f1b8 0f00 	cmp.w	r8, #0
   11a9c:	d018      	beq.n	11ad0 <settings_call_set_handler+0x4c>
   11a9e:	f8d8 1000 	ldr.w	r1, [r8]
   11aa2:	b181      	cbz	r1, 11ac6 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   11aa4:	aa03      	add	r2, sp, #12
   11aa6:	f00d f89f 	bl	1ebe8 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   11aaa:	b960      	cbnz	r0, 11ac6 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   11aac:	2000      	movs	r0, #0
   11aae:	e007      	b.n	11ac0 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   11ab0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11ab4:	9300      	str	r3, [sp, #0]
   11ab6:	9803      	ldr	r0, [sp, #12]
   11ab8:	463b      	mov	r3, r7
   11aba:	4632      	mov	r2, r6
   11abc:	4621      	mov	r1, r4
   11abe:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   11ac0:	b005      	add	sp, #20
   11ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   11ac6:	f8d8 9004 	ldr.w	r9, [r8, #4]
   11aca:	f1b9 0f00 	cmp.w	r9, #0
   11ace:	d1ef      	bne.n	11ab0 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   11ad0:	a903      	add	r1, sp, #12
   11ad2:	4628      	mov	r0, r5
   11ad4:	f7ff ff8c 	bl	119f0 <settings_parse_and_lookup>
		if (!ch) {
   11ad8:	2800      	cmp	r0, #0
   11ada:	d0e7      	beq.n	11aac <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   11adc:	f8d0 8008 	ldr.w	r8, [r0, #8]
   11ae0:	9803      	ldr	r0, [sp, #12]
   11ae2:	4632      	mov	r2, r6
   11ae4:	463b      	mov	r3, r7
   11ae6:	4621      	mov	r1, r4
   11ae8:	47c0      	blx	r8
		if (rc != 0) {
   11aea:	4606      	mov	r6, r0
   11aec:	2800      	cmp	r0, #0
   11aee:	d0dd      	beq.n	11aac <settings_call_set_handler+0x28>
   11af0:	4b08      	ldr	r3, [pc, #32]	; (11b14 <settings_call_set_handler+0x90>)
   11af2:	4c09      	ldr	r4, [pc, #36]	; (11b18 <settings_call_set_handler+0x94>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   11af4:	4628      	mov	r0, r5
   11af6:	1ae4      	subs	r4, r4, r3
   11af8:	08e4      	lsrs	r4, r4, #3
   11afa:	f7ff f85d 	bl	10bb8 <z_log_strdup>
			LOG_ERR("set-value failure. key: %s error(%d)",
   11afe:	01a4      	lsls	r4, r4, #6
   11b00:	f044 0401 	orr.w	r4, r4, #1
   11b04:	4601      	mov	r1, r0
   11b06:	4623      	mov	r3, r4
   11b08:	4804      	ldr	r0, [pc, #16]	; (11b1c <settings_call_set_handler+0x98>)
   11b0a:	4632      	mov	r2, r6
   11b0c:	f00c fd5a 	bl	1e5c4 <log_2>
   11b10:	e7cc      	b.n	11aac <settings_call_set_handler+0x28>
   11b12:	bf00      	nop
   11b14:	0002353c 	.word	0x0002353c
   11b18:	00023634 	.word	0x00023634
   11b1c:	00024241 	.word	0x00024241

00011b20 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   11b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11b22:	4c1a      	ldr	r4, [pc, #104]	; (11b8c <settings_commit_subtree+0x6c>)
   11b24:	4f1a      	ldr	r7, [pc, #104]	; (11b90 <settings_commit_subtree+0x70>)
{
   11b26:	4606      	mov	r6, r0
	rc = 0;
   11b28:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11b2a:	42bc      	cmp	r4, r7
   11b2c:	d306      	bcc.n	11b3c <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   11b2e:	4b19      	ldr	r3, [pc, #100]	; (11b94 <settings_commit_subtree+0x74>)
   11b30:	681c      	ldr	r4, [r3, #0]
   11b32:	b10c      	cbz	r4, 11b38 <settings_commit_subtree+0x18>
   11b34:	3c14      	subs	r4, #20
   11b36:	b99c      	cbnz	r4, 11b60 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   11b38:	4628      	mov	r0, r5
   11b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11b3c:	b91e      	cbnz	r6, 11b46 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
   11b3e:	68e3      	ldr	r3, [r4, #12]
   11b40:	b94b      	cbnz	r3, 11b56 <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11b42:	3414      	adds	r4, #20
   11b44:	e7f1      	b.n	11b2a <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11b46:	6820      	ldr	r0, [r4, #0]
   11b48:	2200      	movs	r2, #0
   11b4a:	4631      	mov	r1, r6
   11b4c:	f00d f84c 	bl	1ebe8 <settings_name_steq>
   11b50:	2800      	cmp	r0, #0
   11b52:	d1f4      	bne.n	11b3e <settings_commit_subtree+0x1e>
   11b54:	e7f5      	b.n	11b42 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
   11b56:	4798      	blx	r3
				rc = rc2;
   11b58:	2d00      	cmp	r5, #0
   11b5a:	bf08      	it	eq
   11b5c:	4605      	moveq	r5, r0
   11b5e:	e7f0      	b.n	11b42 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11b60:	b936      	cbnz	r6, 11b70 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
   11b62:	68e3      	ldr	r3, [r4, #12]
   11b64:	b963      	cbnz	r3, 11b80 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
   11b66:	f114 0f14 	cmn.w	r4, #20
   11b6a:	d0e5      	beq.n	11b38 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11b6c:	6964      	ldr	r4, [r4, #20]
   11b6e:	e7e0      	b.n	11b32 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11b70:	6820      	ldr	r0, [r4, #0]
   11b72:	2200      	movs	r2, #0
   11b74:	4631      	mov	r1, r6
   11b76:	f00d f837 	bl	1ebe8 <settings_name_steq>
   11b7a:	2800      	cmp	r0, #0
   11b7c:	d1f1      	bne.n	11b62 <settings_commit_subtree+0x42>
   11b7e:	e7f2      	b.n	11b66 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
   11b80:	4798      	blx	r3
				rc = rc2;
   11b82:	2d00      	cmp	r5, #0
   11b84:	bf08      	it	eq
   11b86:	4605      	moveq	r5, r0
   11b88:	e7ed      	b.n	11b66 <settings_commit_subtree+0x46>
   11b8a:	bf00      	nop
   11b8c:	000234c4 	.word	0x000234c4
   11b90:	0002353c 	.word	0x0002353c
   11b94:	20001dd8 	.word	0x20001dd8

00011b98 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   11b98:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   11b9a:	4c06      	ldr	r4, [pc, #24]	; (11bb4 <settings_subsys_init+0x1c>)
   11b9c:	7823      	ldrb	r3, [r4, #0]
   11b9e:	b93b      	cbnz	r3, 11bb0 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   11ba0:	f7ff ff1e 	bl	119e0 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   11ba4:	f000 f864 	bl	11c70 <settings_backend_init>

	if (!err) {
   11ba8:	b908      	cbnz	r0, 11bae <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   11baa:	2301      	movs	r3, #1
   11bac:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   11bae:	bd10      	pop	{r4, pc}
		return 0;
   11bb0:	2000      	movs	r0, #0
   11bb2:	e7fc      	b.n	11bae <settings_subsys_init+0x16>
   11bb4:	20002173 	.word	0x20002173

00011bb8 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   11bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   11bbc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   11bbe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 11c6c <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   11bc2:	3401      	adds	r4, #1
{
   11bc4:	b098      	sub	sp, #96	; 0x60
   11bc6:	4680      	mov	r8, r0
   11bc8:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   11bca:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   11bcc:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   11bd0:	1e65      	subs	r5, r4, #1
   11bd2:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   11bd4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   11bd8:	d045      	beq.n	11c66 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   11bda:	234a      	movs	r3, #74	; 0x4a
   11bdc:	aa05      	add	r2, sp, #20
   11bde:	4629      	mov	r1, r5
   11be0:	4630      	mov	r0, r6
   11be2:	f00c ffd3 	bl	1eb8c <nvs_read>
   11be6:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   11bea:	343f      	adds	r4, #63	; 0x3f
   11bec:	b2a4      	uxth	r4, r4
   11bee:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   11bf0:	4621      	mov	r1, r4
   11bf2:	2301      	movs	r3, #1
   11bf4:	f10d 020b 	add.w	r2, sp, #11
   11bf8:	4630      	mov	r0, r6
   11bfa:	f00c ffc7 	bl	1eb8c <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   11bfe:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   11c00:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   11c02:	dc03      	bgt.n	11c0c <settings_nvs_load+0x54>
   11c04:	2800      	cmp	r0, #0
   11c06:	dc03      	bgt.n	11c10 <settings_nvs_load+0x58>
{
   11c08:	462c      	mov	r4, r5
   11c0a:	e7e1      	b.n	11bd0 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   11c0c:	2800      	cmp	r0, #0
   11c0e:	dc16      	bgt.n	11c3e <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   11c10:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   11c14:	42ab      	cmp	r3, r5
   11c16:	d109      	bne.n	11c2c <settings_nvs_load+0x74>
				cf->last_name_id--;
   11c18:	4642      	mov	r2, r8
   11c1a:	1e6b      	subs	r3, r5, #1
   11c1c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   11c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11c24:	2302      	movs	r3, #2
   11c26:	4630      	mov	r0, r6
   11c28:	f7ff fcaa 	bl	11580 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   11c2c:	4629      	mov	r1, r5
   11c2e:	4630      	mov	r0, r6
   11c30:	f00c ffa8 	bl	1eb84 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   11c34:	4621      	mov	r1, r4
   11c36:	4630      	mov	r0, r6
   11c38:	f00c ffa4 	bl	1eb84 <nvs_delete>
			continue;
   11c3c:	e7e4      	b.n	11c08 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   11c3e:	ab18      	add	r3, sp, #96	; 0x60
   11c40:	441f      	add	r7, r3
   11c42:	2300      	movs	r3, #0
   11c44:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   11c48:	4652      	mov	r2, sl
   11c4a:	f8cd 9000 	str.w	r9, [sp]
   11c4e:	ab03      	add	r3, sp, #12
   11c50:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   11c52:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   11c54:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   11c58:	f7ff ff14 	bl	11a84 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   11c5c:	2800      	cmp	r0, #0
   11c5e:	d0d3      	beq.n	11c08 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   11c60:	b018      	add	sp, #96	; 0x60
   11c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11c66:	2000      	movs	r0, #0
	return ret;
   11c68:	e7fa      	b.n	11c60 <settings_nvs_load+0xa8>
   11c6a:	bf00      	nop
   11c6c:	0001ec5b 	.word	0x0001ec5b

00011c70 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   11c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   11c72:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   11c74:	4669      	mov	r1, sp
   11c76:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   11c78:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   11c7a:	f7ff fde5 	bl	11848 <flash_area_open>
	if (rc) {
   11c7e:	4604      	mov	r4, r0
   11c80:	2800      	cmp	r0, #0
   11c82:	d136      	bne.n	11cf2 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   11c84:	aa02      	add	r2, sp, #8
   11c86:	a901      	add	r1, sp, #4
   11c88:	2004      	movs	r0, #4
   11c8a:	f7ff fdf1 	bl	11870 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   11c8e:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   11c92:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   11c94:	d02d      	beq.n	11cf2 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   11c96:	b138      	cbz	r0, 11ca8 <settings_backend_init+0x38>
   11c98:	340c      	adds	r4, #12
   11c9a:	d005      	beq.n	11ca8 <settings_backend_init+0x38>
		k_panic();
   11c9c:	4040      	eors	r0, r0
   11c9e:	f380 8811 	msr	BASEPRI, r0
   11ca2:	f04f 0004 	mov.w	r0, #4
   11ca6:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   11ca8:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   11caa:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   11cae:	d223      	bcs.n	11cf8 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   11cb0:	9a00      	ldr	r2, [sp, #0]
   11cb2:	2300      	movs	r3, #0
   11cb4:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   11cb6:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   11cb8:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   11cba:	4285      	cmp	r5, r0
   11cbc:	b29c      	uxth	r4, r3
   11cbe:	d303      	bcc.n	11cc8 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   11cc0:	3301      	adds	r3, #1
   11cc2:	2b08      	cmp	r3, #8
   11cc4:	d1f8      	bne.n	11cb8 <settings_backend_init+0x48>
   11cc6:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   11cc8:	4d0d      	ldr	r5, [pc, #52]	; (11d00 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   11cca:	6853      	ldr	r3, [r2, #4]
   11ccc:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   11cce:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   11cd0:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   11cd2:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   11cd4:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   11cd6:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   11cd8:	f00d f856 	bl	1ed88 <settings_nvs_backend_init>
	if (rc) {
   11cdc:	4604      	mov	r4, r0
   11cde:	b940      	cbnz	r0, 11cf2 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   11ce0:	4e08      	ldr	r6, [pc, #32]	; (11d04 <settings_backend_init+0x94>)
   11ce2:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   11ce4:	4628      	mov	r0, r5
   11ce6:	f7ff fe11 	bl	1190c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   11cea:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   11cec:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   11cee:	f7ff fe1b 	bl	11928 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   11cf2:	4620      	mov	r0, r4
   11cf4:	b004      	add	sp, #16
   11cf6:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   11cf8:	f06f 0420 	mvn.w	r4, #32
   11cfc:	e7f9      	b.n	11cf2 <settings_backend_init+0x82>
   11cfe:	bf00      	nop
   11d00:	20001de0 	.word	0x20001de0
   11d04:	2000047c 	.word	0x2000047c

00011d08 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   11d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d0a:	4605      	mov	r5, r0
	__asm__ volatile(
   11d0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d10:	f3ef 8611 	mrs	r6, BASEPRI
   11d14:	f383 8811 	msr	BASEPRI, r3
   11d18:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11d1c:	4b0b      	ldr	r3, [pc, #44]	; (11d4c <pm_state_notify+0x44>)
   11d1e:	681c      	ldr	r4, [r3, #0]
   11d20:	2c00      	cmp	r4, #0
   11d22:	bf38      	it	cc
   11d24:	2400      	movcc	r4, #0
   11d26:	b15c      	cbz	r4, 11d40 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   11d28:	4f09      	ldr	r7, [pc, #36]	; (11d50 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   11d2a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   11d2e:	2d00      	cmp	r5, #0
   11d30:	bf08      	it	eq
   11d32:	4613      	moveq	r3, r2
		if (callback) {
   11d34:	b10b      	cbz	r3, 11d3a <pm_state_notify+0x32>
			callback(z_power_state.state);
   11d36:	7838      	ldrb	r0, [r7, #0]
   11d38:	4798      	blx	r3
   11d3a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11d3c:	2c00      	cmp	r4, #0
   11d3e:	d1f4      	bne.n	11d2a <pm_state_notify+0x22>
	__asm__ volatile(
   11d40:	f386 8811 	msr	BASEPRI, r6
   11d44:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   11d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d4a:	bf00      	nop
   11d4c:	20001e20 	.word	0x20001e20
   11d50:	20001e28 	.word	0x20001e28

00011d54 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   11d54:	4b08      	ldr	r3, [pc, #32]	; (11d78 <pm_system_resume+0x24>)
{
   11d56:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   11d58:	681c      	ldr	r4, [r3, #0]
   11d5a:	b95c      	cbnz	r4, 11d74 <pm_system_resume+0x20>
		post_ops_done = 1;
   11d5c:	2201      	movs	r2, #1
   11d5e:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   11d60:	4b06      	ldr	r3, [pc, #24]	; (11d7c <pm_system_resume+0x28>)
   11d62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11d66:	f00e fac9 	bl	202fc <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   11d6a:	4620      	mov	r0, r4
	}
}
   11d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   11d70:	f7ff bfca 	b.w	11d08 <pm_state_notify>
}
   11d74:	bd10      	pop	{r4, pc}
   11d76:	bf00      	nop
   11d78:	2000048c 	.word	0x2000048c
   11d7c:	20001e28 	.word	0x20001e28

00011d80 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   11d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d82:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   11d84:	466e      	mov	r6, sp
   11d86:	4601      	mov	r1, r0
{
   11d88:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   11d8a:	4630      	mov	r0, r6
   11d8c:	f00d f818 	bl	1edc0 <pm_policy_next_state>
   11d90:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11d94:	4c14      	ldr	r4, [pc, #80]	; (11de8 <pm_system_suspend+0x68>)
   11d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   11d9a:	7820      	ldrb	r0, [r4, #0]
   11d9c:	b308      	cbz	r0, 11de2 <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   11d9e:	4b13      	ldr	r3, [pc, #76]	; (11dec <pm_system_suspend+0x6c>)
   11da0:	2100      	movs	r1, #0
   11da2:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   11da4:	1c6b      	adds	r3, r5, #1
   11da6:	d00e      	beq.n	11dc6 <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
   11da8:	4811      	ldr	r0, [pc, #68]	; (11df0 <pm_system_suspend+0x70>)
   11daa:	4617      	mov	r7, r2
   11dac:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11db0:	2100      	movs	r1, #0
   11db2:	4a10      	ldr	r2, [pc, #64]	; (11df4 <pm_system_suspend+0x74>)
   11db4:	2300      	movs	r3, #0
   11db6:	fbe6 0107 	umlal	r0, r1, r6, r7
   11dba:	f7ee f991 	bl	e0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   11dbe:	2101      	movs	r1, #1
   11dc0:	1a28      	subs	r0, r5, r0
   11dc2:	f011 f8aa 	bl	22f1a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   11dc6:	f00b f8eb 	bl	1cfa0 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   11dca:	2001      	movs	r0, #1
   11dcc:	f7ff ff9c 	bl	11d08 <pm_state_notify>
	pm_power_state_set(z_power_state);
   11dd0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   11dd4:	f00e fa7f 	bl	202d6 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   11dd8:	f7ff ffbc 	bl	11d54 <pm_system_resume>
	k_sched_unlock();
   11ddc:	f00b f9d2 	bl	1d184 <k_sched_unlock>

	return z_power_state.state;
   11de0:	7820      	ldrb	r0, [r4, #0]
}
   11de2:	b005      	add	sp, #20
   11de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11de6:	bf00      	nop
   11de8:	20001e28 	.word	0x20001e28
   11dec:	2000048c 	.word	0x2000048c
   11df0:	000f423f 	.word	0x000f423f
   11df4:	000f4240 	.word	0x000f4240

00011df8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11df8:	b570      	push	{r4, r5, r6, lr}
   11dfa:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   11dfc:	480d      	ldr	r0, [pc, #52]	; (11e34 <onoff_stop+0x3c>)
   11dfe:	1a23      	subs	r3, r4, r0
   11e00:	109a      	asrs	r2, r3, #2
   11e02:	4b0d      	ldr	r3, [pc, #52]	; (11e38 <onoff_stop+0x40>)
   11e04:	4353      	muls	r3, r2
   11e06:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   11e08:	250c      	movs	r5, #12
   11e0a:	435d      	muls	r5, r3
   11e0c:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   11e10:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   11e12:	4418      	add	r0, r3
   11e14:	2140      	movs	r1, #64	; 0x40
   11e16:	f00c ffe1 	bl	1eddc <set_off_state>
	if (err < 0) {
   11e1a:	1e01      	subs	r1, r0, #0
   11e1c:	db04      	blt.n	11e28 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   11e1e:	4b07      	ldr	r3, [pc, #28]	; (11e3c <onoff_stop+0x44>)
   11e20:	442b      	add	r3, r5
   11e22:	685b      	ldr	r3, [r3, #4]
   11e24:	4798      	blx	r3
	return 0;
   11e26:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   11e28:	4620      	mov	r0, r4
   11e2a:	4633      	mov	r3, r6
}
   11e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   11e30:	4718      	bx	r3
   11e32:	bf00      	nop
   11e34:	20001e48 	.word	0x20001e48
   11e38:	b6db6db7 	.word	0xb6db6db7
   11e3c:	000238d4 	.word	0x000238d4

00011e40 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11e44:	4c0f      	ldr	r4, [pc, #60]	; (11e84 <onoff_start+0x44>)
   11e46:	4d10      	ldr	r5, [pc, #64]	; (11e88 <onoff_start+0x48>)
   11e48:	1b03      	subs	r3, r0, r4
   11e4a:	109b      	asrs	r3, r3, #2
   11e4c:	435d      	muls	r5, r3
   11e4e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   11e50:	250c      	movs	r5, #12
   11e52:	435d      	muls	r5, r3
{
   11e54:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   11e56:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   11e5a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   11e5c:	4420      	add	r0, r4
   11e5e:	2140      	movs	r1, #64	; 0x40
   11e60:	f00c ffd5 	bl	1ee0e <set_starting_state>
	if (err < 0) {
   11e64:	1e01      	subs	r1, r0, #0
   11e66:	db08      	blt.n	11e7a <onoff_start+0x3a>
	subdata->cb = cb;
   11e68:	4b08      	ldr	r3, [pc, #32]	; (11e8c <onoff_start+0x4c>)
   11e6a:	442c      	add	r4, r5
	subdata->user_data = user_data;
   11e6c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   11e70:	4b07      	ldr	r3, [pc, #28]	; (11e90 <onoff_start+0x50>)
   11e72:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   11e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   11e78:	4718      	bx	r3
		notify(mgr, err);
   11e7a:	4638      	mov	r0, r7
   11e7c:	4633      	mov	r3, r6
}
   11e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   11e82:	4718      	bx	r3
   11e84:	20001e48 	.word	0x20001e48
   11e88:	b6db6db7 	.word	0xb6db6db7
   11e8c:	0001ee71 	.word	0x0001ee71
   11e90:	000238d4 	.word	0x000238d4

00011e94 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11e94:	2200      	movs	r2, #0
{
   11e96:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11e98:	2101      	movs	r1, #1
{
   11e9a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11e9c:	4610      	mov	r0, r2
   11e9e:	f000 fc47 	bl	12730 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   11ea2:	2000      	movs	r0, #0
   11ea4:	f000 fc12 	bl	126cc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   11ea8:	480f      	ldr	r0, [pc, #60]	; (11ee8 <clk_init+0x54>)
   11eaa:	f00a f813 	bl	1bed4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11eae:	4b0f      	ldr	r3, [pc, #60]	; (11eec <clk_init+0x58>)
   11eb0:	4298      	cmp	r0, r3
   11eb2:	d115      	bne.n	11ee0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11eb4:	f010 fc3f 	bl	22736 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   11eb8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   11eba:	490d      	ldr	r1, [pc, #52]	; (11ef0 <clk_init+0x5c>)
   11ebc:	4630      	mov	r0, r6
   11ebe:	f00b ff84 	bl	1ddca <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   11ec2:	2800      	cmp	r0, #0
   11ec4:	db0b      	blt.n	11ede <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11ec6:	2501      	movs	r5, #1
   11ec8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   11eca:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11ecc:	4908      	ldr	r1, [pc, #32]	; (11ef0 <clk_init+0x5c>)
   11ece:	f104 001c 	add.w	r0, r4, #28
   11ed2:	f00b ff7a 	bl	1ddca <onoff_manager_init>
		if (err < 0) {
   11ed6:	2800      	cmp	r0, #0
   11ed8:	db01      	blt.n	11ede <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11eda:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   11edc:	2000      	movs	r0, #0
}
   11ede:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   11ee0:	f06f 0004 	mvn.w	r0, #4
   11ee4:	e7fb      	b.n	11ede <clk_init+0x4a>
   11ee6:	bf00      	nop
   11ee8:	00011f29 	.word	0x00011f29
   11eec:	0bad0000 	.word	0x0bad0000
   11ef0:	000238ec 	.word	0x000238ec

00011ef4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   11ef4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   11ef6:	230c      	movs	r3, #12
   11ef8:	4809      	ldr	r0, [pc, #36]	; (11f20 <clkstarted_handle.constprop.0+0x2c>)
   11efa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   11efc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   11efe:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   11f00:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   11f04:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   11f06:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   11f08:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   11f0a:	4418      	add	r0, r3
   11f0c:	f00c ff9d 	bl	1ee4a <set_on_state>
	if (callback) {
   11f10:	b12d      	cbz	r5, 11f1e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11f12:	4632      	mov	r2, r6
   11f14:	462b      	mov	r3, r5
   11f16:	4803      	ldr	r0, [pc, #12]	; (11f24 <clkstarted_handle.constprop.0+0x30>)
}
   11f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   11f1c:	4718      	bx	r3
}
   11f1e:	bd70      	pop	{r4, r5, r6, pc}
   11f20:	20001e48 	.word	0x20001e48
   11f24:	2000062c 	.word	0x2000062c

00011f28 <clock_event_handler>:
	switch (event) {
   11f28:	b110      	cbz	r0, 11f30 <clock_event_handler+0x8>
   11f2a:	2801      	cmp	r0, #1
   11f2c:	d004      	beq.n	11f38 <clock_event_handler+0x10>
   11f2e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   11f30:	4b03      	ldr	r3, [pc, #12]	; (11f40 <clock_event_handler+0x18>)
   11f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11f34:	075b      	lsls	r3, r3, #29
   11f36:	d101      	bne.n	11f3c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11f38:	f7ff bfdc 	b.w	11ef4 <clkstarted_handle.constprop.0>
}
   11f3c:	4770      	bx	lr
   11f3e:	bf00      	nop
   11f40:	20001e48 	.word	0x20001e48

00011f44 <generic_hfclk_start>:
{
   11f44:	b508      	push	{r3, lr}
	__asm__ volatile(
   11f46:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f4a:	f3ef 8111 	mrs	r1, BASEPRI
   11f4e:	f383 8811 	msr	BASEPRI, r3
   11f52:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   11f56:	4a12      	ldr	r2, [pc, #72]	; (11fa0 <generic_hfclk_start+0x5c>)
   11f58:	6813      	ldr	r3, [r2, #0]
   11f5a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   11f5e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   11f62:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11f64:	d00c      	beq.n	11f80 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   11f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11f6a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   11f6e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   11f72:	f013 0301 	ands.w	r3, r3, #1
   11f76:	d003      	beq.n	11f80 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   11f78:	480a      	ldr	r0, [pc, #40]	; (11fa4 <generic_hfclk_start+0x60>)
   11f7a:	f00c ff66 	bl	1ee4a <set_on_state>
			already_started = true;
   11f7e:	2301      	movs	r3, #1
	__asm__ volatile(
   11f80:	f381 8811 	msr	BASEPRI, r1
   11f84:	f3bf 8f6f 	isb	sy
	if (already_started) {
   11f88:	b123      	cbz	r3, 11f94 <generic_hfclk_start+0x50>
}
   11f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   11f8e:	2000      	movs	r0, #0
   11f90:	f7ff bfb0 	b.w	11ef4 <clkstarted_handle.constprop.0>
}
   11f94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11f98:	2001      	movs	r0, #1
   11f9a:	f009 bf8b 	b.w	1beb4 <nrfx_clock_start>
   11f9e:	bf00      	nop
   11fa0:	20001e98 	.word	0x20001e98
   11fa4:	20001e88 	.word	0x20001e88

00011fa8 <lfclk_start>:
{
   11fa8:	b510      	push	{r4, lr}
	if (!once) {
   11faa:	4c07      	ldr	r4, [pc, #28]	; (11fc8 <lfclk_start+0x20>)
   11fac:	7823      	ldrb	r3, [r4, #0]
   11fae:	b92b      	cbnz	r3, 11fbc <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   11fb0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   11fb4:	f010 ffcf 	bl	22f56 <z_impl_k_busy_wait>
		once = true;
   11fb8:	2301      	movs	r3, #1
   11fba:	7023      	strb	r3, [r4, #0]
}
   11fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   11fc0:	2000      	movs	r0, #0
   11fc2:	f009 bf77 	b.w	1beb4 <nrfx_clock_start>
   11fc6:	bf00      	nop
   11fc8:	20002174 	.word	0x20002174

00011fcc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11fcc:	4b09      	ldr	r3, [pc, #36]	; (11ff4 <generic_hfclk_stop+0x28>)
   11fce:	f3bf 8f5b 	dmb	ish
   11fd2:	e853 2f00 	ldrex	r2, [r3]
   11fd6:	f022 0102 	bic.w	r1, r2, #2
   11fda:	e843 1000 	strex	r0, r1, [r3]
   11fde:	2800      	cmp	r0, #0
   11fe0:	d1f7      	bne.n	11fd2 <generic_hfclk_stop+0x6>
   11fe2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   11fe6:	07d3      	lsls	r3, r2, #31
   11fe8:	d402      	bmi.n	11ff0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11fea:	2001      	movs	r0, #1
   11fec:	f010 bb9e 	b.w	2272c <nrfx_clock_stop>
}
   11ff0:	4770      	bx	lr
   11ff2:	bf00      	nop
   11ff4:	20001e98 	.word	0x20001e98

00011ff8 <api_blocking_start>:
{
   11ff8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11ffa:	2200      	movs	r2, #0
   11ffc:	2301      	movs	r3, #1
   11ffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   12002:	ab04      	add	r3, sp, #16
   12004:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12008:	4a09      	ldr	r2, [pc, #36]	; (12030 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1200a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1200e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12010:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12014:	f00c ff4f 	bl	1eeb6 <api_start>
	if (err < 0) {
   12018:	2800      	cmp	r0, #0
   1201a:	db05      	blt.n	12028 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1201c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12020:	2300      	movs	r3, #0
   12022:	4668      	mov	r0, sp
   12024:	f00a fd4c 	bl	1cac0 <z_impl_k_sem_take>
}
   12028:	b007      	add	sp, #28
   1202a:	f85d fb04 	ldr.w	pc, [sp], #4
   1202e:	bf00      	nop
   12030:	0001ee89 	.word	0x0001ee89

00012034 <z_nrf_clock_control_get_onoff>:
}
   12034:	4a02      	ldr	r2, [pc, #8]	; (12040 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   12036:	b2c3      	uxtb	r3, r0
}
   12038:	201c      	movs	r0, #28
   1203a:	fb03 2000 	mla	r0, r3, r0, r2
   1203e:	4770      	bx	lr
   12040:	20001e48 	.word	0x20001e48

00012044 <z_nrf_clock_control_lf_on>:
{
   12044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12046:	4928      	ldr	r1, [pc, #160]	; (120e8 <z_nrf_clock_control_lf_on+0xa4>)
   12048:	f3bf 8f5b 	dmb	ish
   1204c:	4606      	mov	r6, r0
   1204e:	2201      	movs	r2, #1
   12050:	e851 3f00 	ldrex	r3, [r1]
   12054:	e841 2000 	strex	r0, r2, [r1]
   12058:	2800      	cmp	r0, #0
   1205a:	d1f9      	bne.n	12050 <z_nrf_clock_control_lf_on+0xc>
   1205c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   12060:	b933      	cbnz	r3, 12070 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   12062:	4922      	ldr	r1, [pc, #136]	; (120ec <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   12064:	4822      	ldr	r0, [pc, #136]	; (120f0 <z_nrf_clock_control_lf_on+0xac>)
   12066:	604b      	str	r3, [r1, #4]
   12068:	60cb      	str	r3, [r1, #12]
   1206a:	608a      	str	r2, [r1, #8]
   1206c:	f00b fec0 	bl	1ddf0 <onoff_request>
	switch (start_mode) {
   12070:	1e73      	subs	r3, r6, #1
   12072:	2b01      	cmp	r3, #1
   12074:	d820      	bhi.n	120b8 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12076:	f010 fc2d 	bl	228d4 <k_is_in_isr>
   1207a:	4604      	mov	r4, r0
   1207c:	b910      	cbnz	r0, 12084 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   1207e:	4b1d      	ldr	r3, [pc, #116]	; (120f4 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   12080:	781b      	ldrb	r3, [r3, #0]
   12082:	bb53      	cbnz	r3, 120da <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   12084:	f04f 0340 	mov.w	r3, #64	; 0x40
   12088:	f3ef 8511 	mrs	r5, BASEPRI
   1208c:	f383 8811 	msr	BASEPRI, r3
   12090:	f3bf 8f6f 	isb	sy
   12094:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12096:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   1209a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1209e:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   120a2:	03d2      	lsls	r2, r2, #15
   120a4:	d509      	bpl.n	120ba <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   120a6:	079b      	lsls	r3, r3, #30
   120a8:	d001      	beq.n	120ae <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   120aa:	2e01      	cmp	r6, #1
   120ac:	d105      	bne.n	120ba <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   120ae:	b174      	cbz	r4, 120ce <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   120b0:	f385 8811 	msr	BASEPRI, r5
   120b4:	f3bf 8f6f 	isb	sy
}
   120b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   120ba:	b11c      	cbz	r4, 120c4 <z_nrf_clock_control_lf_on+0x80>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   120bc:	4628      	mov	r0, r5
   120be:	f000 fbbf 	bl	12840 <arch_cpu_atomic_idle>
}
   120c2:	e7ea      	b.n	1209a <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   120c4:	2100      	movs	r1, #0
   120c6:	2021      	movs	r0, #33	; 0x21
   120c8:	f00b f9f8 	bl	1d4bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   120cc:	e7e5      	b.n	1209a <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   120ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   120d2:	2202      	movs	r2, #2
   120d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   120d8:	e7ee      	b.n	120b8 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   120da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   120de:	2202      	movs	r2, #2
   120e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   120e4:	4605      	mov	r5, r0
}
   120e6:	e7d6      	b.n	12096 <z_nrf_clock_control_lf_on+0x52>
   120e8:	20001e9c 	.word	0x20001e9c
   120ec:	20001e38 	.word	0x20001e38
   120f0:	20001e64 	.word	0x20001e64
   120f4:	20002a26 	.word	0x20002a26

000120f8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   120f8:	4a04      	ldr	r2, [pc, #16]	; (1210c <sys_clock_timeout_handler+0x14>)
   120fa:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   120fc:	1ac8      	subs	r0, r1, r3
   120fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   12102:	4403      	add	r3, r0
   12104:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   12106:	f00b bb8d 	b.w	1d824 <sys_clock_announce>
   1210a:	bf00      	nop
   1210c:	20001eb0 	.word	0x20001eb0

00012110 <set_absolute_alarm>:
{
   12110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12114:	0086      	lsls	r6, r0, #2
   12116:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1211a:	f100 0450 	add.w	r4, r0, #80	; 0x50
   1211e:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   12122:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   12124:	f8df 807c 	ldr.w	r8, [pc, #124]	; 121a4 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   12128:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1212c:	b2a4      	uxth	r4, r4
   1212e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12132:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   12136:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   1213a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1213e:	4087      	lsls	r7, r0
   12140:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   12142:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   12146:	eba3 030a 	sub.w	r3, r3, sl
   1214a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1214e:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   12152:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   12154:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   12158:	d102      	bne.n	12160 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   1215a:	2013      	movs	r0, #19
   1215c:	f010 fefb 	bl	22f56 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   12160:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   12164:	1aab      	subs	r3, r5, r2
   12166:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   1216a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1216e:	bf88      	it	hi
   12170:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12172:	2300      	movs	r3, #0
   12174:	6023      	str	r3, [r4, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   12176:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   12178:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1217c:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   12180:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   12184:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   12188:	459a      	cmp	sl, r3
   1218a:	d006      	beq.n	1219a <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   1218c:	1aeb      	subs	r3, r5, r3
   1218e:	3b02      	subs	r3, #2
   12190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   12194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   12198:	d801      	bhi.n	1219e <set_absolute_alarm+0x8e>
}
   1219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   1219e:	462b      	mov	r3, r5
   121a0:	e7cf      	b.n	12142 <set_absolute_alarm+0x32>
   121a2:	bf00      	nop
   121a4:	40011000 	.word	0x40011000

000121a8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   121a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   121aa:	4e10      	ldr	r6, [pc, #64]	; (121ec <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   121ac:	4f10      	ldr	r7, [pc, #64]	; (121f0 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   121ae:	2500      	movs	r5, #0
   121b0:	4b10      	ldr	r3, [pc, #64]	; (121f4 <rtc_nrf_isr+0x4c>)
   121b2:	2000      	movs	r0, #0
   121b4:	681c      	ldr	r4, [r3, #0]
   121b6:	461a      	mov	r2, r3
   121b8:	b105      	cbz	r5, 121bc <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   121ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   121bc:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   121c0:	03c9      	lsls	r1, r1, #15
   121c2:	d5fa      	bpl.n	121ba <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   121c4:	6839      	ldr	r1, [r7, #0]
   121c6:	2900      	cmp	r1, #0
   121c8:	d0f7      	beq.n	121ba <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   121ca:	603d      	str	r5, [r7, #0]
   121cc:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   121ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   121d2:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
   121d6:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   121da:	2501      	movs	r5, #1
			if (handler) {
   121dc:	b11c      	cbz	r4, 121e6 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
   121de:	685a      	ldr	r2, [r3, #4]
   121e0:	6018      	str	r0, [r3, #0]
   121e2:	47a0      	blx	r4
   121e4:	e7e4      	b.n	121b0 <rtc_nrf_isr+0x8>
   121e6:	6014      	str	r4, [r2, #0]
}
   121e8:	e7e7      	b.n	121ba <rtc_nrf_isr+0x12>
   121ea:	bf00      	nop
   121ec:	40011000 	.word	0x40011000
   121f0:	40011140 	.word	0x40011140
   121f4:	20001ea4 	.word	0x20001ea4

000121f8 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   121f8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   121fa:	4d10      	ldr	r5, [pc, #64]	; (1223c <sys_clock_driver_init+0x44>)
   121fc:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   121fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   12202:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   12206:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1220a:	4b0d      	ldr	r3, [pc, #52]	; (12240 <sys_clock_driver_init+0x48>)
   1220c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12210:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12214:	2101      	movs	r1, #1
   12216:	4622      	mov	r2, r4
   12218:	2011      	movs	r0, #17
   1221a:	f000 fa89 	bl	12730 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1221e:	2011      	movs	r0, #17
   12220:	f000 fa54 	bl	126cc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12224:	4a07      	ldr	r2, [pc, #28]	; (12244 <sys_clock_driver_init+0x4c>)
   12226:	2301      	movs	r3, #1
   12228:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1222a:	4a07      	ldr	r2, [pc, #28]	; (12248 <sys_clock_driver_init+0x50>)
   1222c:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   1222e:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   12230:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   12232:	f7ff ff07 	bl	12044 <z_nrf_clock_control_lf_on>

	return 0;
}
   12236:	4620      	mov	r0, r4
   12238:	bd38      	pop	{r3, r4, r5, pc}
   1223a:	bf00      	nop
   1223c:	40011000 	.word	0x40011000
   12240:	e000e100 	.word	0xe000e100
   12244:	40011008 	.word	0x40011008
   12248:	20001eac 	.word	0x20001eac

0001224c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1224c:	4b13      	ldr	r3, [pc, #76]	; (1229c <sys_clock_set_timeout+0x50>)
   1224e:	f1b0 3fff 	cmp.w	r0, #4294967295
   12252:	bf08      	it	eq
   12254:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12256:	3801      	subs	r0, #1
   12258:	2800      	cmp	r0, #0
   1225a:	dd1c      	ble.n	12296 <sys_clock_set_timeout+0x4a>
   1225c:	4298      	cmp	r0, r3
   1225e:	bfa8      	it	ge
   12260:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   12262:	4b0f      	ldr	r3, [pc, #60]	; (122a0 <sys_clock_set_timeout+0x54>)
   12264:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   12268:	4b0e      	ldr	r3, [pc, #56]	; (122a4 <sys_clock_set_timeout+0x58>)
   1226a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1226c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   1226e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   12272:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   12276:	bf18      	it	ne
   12278:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   1227a:	4a0b      	ldr	r2, [pc, #44]	; (122a8 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1227c:	3301      	adds	r3, #1
   1227e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   12280:	480a      	ldr	r0, [pc, #40]	; (122ac <sys_clock_set_timeout+0x60>)
   12282:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   12284:	2000      	movs	r0, #0
   12286:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   12288:	4a04      	ldr	r2, [pc, #16]	; (1229c <sys_clock_set_timeout+0x50>)
   1228a:	4293      	cmp	r3, r2
   1228c:	bf94      	ite	ls
   1228e:	18c9      	addls	r1, r1, r3
   12290:	1889      	addhi	r1, r1, r2
   12292:	f7ff bf3d 	b.w	12110 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12296:	2000      	movs	r0, #0
   12298:	e7e3      	b.n	12262 <sys_clock_set_timeout+0x16>
   1229a:	bf00      	nop
   1229c:	007fffff 	.word	0x007fffff
   122a0:	40011000 	.word	0x40011000
   122a4:	20001eb0 	.word	0x20001eb0
   122a8:	20001ea4 	.word	0x20001ea4
   122ac:	000120f9 	.word	0x000120f9

000122b0 <sys_clock_elapsed>:
   122b0:	4b04      	ldr	r3, [pc, #16]	; (122c4 <sys_clock_elapsed+0x14>)
   122b2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   122b6:	4b04      	ldr	r3, [pc, #16]	; (122c8 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   122b8:	681b      	ldr	r3, [r3, #0]
   122ba:	1ac0      	subs	r0, r0, r3
}
   122bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   122c0:	4770      	bx	lr
   122c2:	bf00      	nop
   122c4:	40011000 	.word	0x40011000
   122c8:	20001eb0 	.word	0x20001eb0

000122cc <sys_clock_cycle_get_32>:
	__asm__ volatile(
   122cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   122d0:	f3ef 8211 	mrs	r2, BASEPRI
   122d4:	f383 8811 	msr	BASEPRI, r3
   122d8:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   122dc:	4906      	ldr	r1, [pc, #24]	; (122f8 <sys_clock_cycle_get_32+0x2c>)
   122de:	4b07      	ldr	r3, [pc, #28]	; (122fc <sys_clock_cycle_get_32+0x30>)
   122e0:	6808      	ldr	r0, [r1, #0]
   122e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   122e6:	f382 8811 	msr	BASEPRI, r2
   122ea:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   122ee:	1a1b      	subs	r3, r3, r0
   122f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   122f4:	4418      	add	r0, r3
   122f6:	4770      	bx	lr
   122f8:	20001eb0 	.word	0x20001eb0
   122fc:	40011000 	.word	0x40011000

00012300 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   12300:	4b01      	ldr	r3, [pc, #4]	; (12308 <uECC_get_rng+0x8>)
   12302:	6818      	ldr	r0, [r3, #0]
   12304:	4770      	bx	lr
   12306:	bf00      	nop
   12308:	20000490 	.word	0x20000490

0001230c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   1230c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1230e:	2208      	movs	r2, #8
{
   12310:	b089      	sub	sp, #36	; 0x24
   12312:	460c      	mov	r4, r1
   12314:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   12316:	f00c ffac 	bl	1f272 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   1231a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   1231c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   1231e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   12320:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   12322:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   12324:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   12326:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   12328:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1232a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1232c:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   1232e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12330:	2308      	movs	r3, #8
   12332:	466a      	mov	r2, sp
   12334:	4669      	mov	r1, sp
   12336:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   12338:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1233c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1233e:	f00c fe9a 	bl	1f076 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12342:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12344:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12346:	466a      	mov	r2, sp
   12348:	4631      	mov	r1, r6
   1234a:	4630      	mov	r0, r6
   1234c:	f00c fe93 	bl	1f076 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   12350:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12352:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   12354:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12356:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   12358:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1235a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   1235c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1235e:	4405      	add	r5, r0
	tmp[7] = 0;
   12360:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12364:	466a      	mov	r2, sp
   12366:	2308      	movs	r3, #8
   12368:	4669      	mov	r1, sp
   1236a:	4668      	mov	r0, sp
   1236c:	f00c fe83 	bl	1f076 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12370:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12372:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12374:	2308      	movs	r3, #8
   12376:	466a      	mov	r2, sp
   12378:	4630      	mov	r0, r6
   1237a:	f00c fe7c 	bl	1f076 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   1237e:	6a23      	ldr	r3, [r4, #32]
   12380:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   12382:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12384:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   12386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12388:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   1238a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1238c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1238e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12390:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12392:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12394:	2308      	movs	r3, #8
   12396:	466a      	mov	r2, sp
   12398:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   1239a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   1239e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   123a0:	f00c fe69 	bl	1f076 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   123a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   123a6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   123a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   123aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   123ac:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   123ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   123b0:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   123b2:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   123b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   123b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   123b8:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   123ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   123be:	6a23      	ldr	r3, [r4, #32]
   123c0:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   123c2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   123c4:	2308      	movs	r3, #8
   123c6:	466a      	mov	r2, sp
   123c8:	4630      	mov	r0, r6
   123ca:	f00c fe54 	bl	1f076 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   123ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   123d0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   123d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   123d4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   123d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   123d8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   123da:	6a23      	ldr	r3, [r4, #32]
   123dc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   123de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   123e0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   123e2:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123e4:	2308      	movs	r3, #8
   123e6:	466a      	mov	r2, sp
   123e8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   123ea:	e9cd 7704 	strd	r7, r7, [sp, #16]
   123ee:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123f0:	f00c ff75 	bl	1f2de <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   123f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   123f6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   123f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   123fa:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   123fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   123fe:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   12400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12402:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   12404:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12406:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   12408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1240a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1240c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1240e:	2308      	movs	r3, #8
   12410:	466a      	mov	r2, sp
   12412:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   12414:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12418:	f00c ff61 	bl	1f2de <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   1241c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1241e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   12420:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12422:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   12424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12426:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   12428:	6a23      	ldr	r3, [r4, #32]
   1242a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   1242c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1242e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   12430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   12432:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   12436:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12438:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1243a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1243c:	2308      	movs	r3, #8
   1243e:	466a      	mov	r2, sp
   12440:	4630      	mov	r0, r6
   12442:	f00c ff4c 	bl	1f2de <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   12446:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12448:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   1244a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   1244c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   12450:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12452:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   12454:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12456:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   12458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   1245a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   1245e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12460:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12462:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12464:	2308      	movs	r3, #8
   12466:	466a      	mov	r2, sp
   12468:	4630      	mov	r0, r6
   1246a:	f00c ff38 	bl	1f2de <uECC_vli_sub>

	if (carry < 0) {
   1246e:	1a2d      	subs	r5, r5, r0
   12470:	d410      	bmi.n	12494 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   12472:	4c0d      	ldr	r4, [pc, #52]	; (124a8 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   12474:	b935      	cbnz	r5, 12484 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   12476:	2208      	movs	r2, #8
   12478:	4631      	mov	r1, r6
   1247a:	4620      	mov	r0, r4
   1247c:	f00c ff05 	bl	1f28a <uECC_vli_cmp_unsafe>
		while (carry || 
   12480:	2801      	cmp	r0, #1
   12482:	d00f      	beq.n	124a4 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   12484:	2308      	movs	r3, #8
   12486:	4622      	mov	r2, r4
   12488:	4631      	mov	r1, r6
   1248a:	4630      	mov	r0, r6
   1248c:	f00c ff27 	bl	1f2de <uECC_vli_sub>
   12490:	1a2d      	subs	r5, r5, r0
   12492:	e7ef      	b.n	12474 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   12494:	4a04      	ldr	r2, [pc, #16]	; (124a8 <vli_mmod_fast_secp256r1+0x19c>)
   12496:	2308      	movs	r3, #8
   12498:	4631      	mov	r1, r6
   1249a:	4630      	mov	r0, r6
   1249c:	f00c fdeb 	bl	1f076 <uECC_vli_add>
		while (carry < 0);
   124a0:	182d      	adds	r5, r5, r0
   124a2:	d4f8      	bmi.n	12496 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   124a4:	b009      	add	sp, #36	; 0x24
   124a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124a8:	000238fc 	.word	0x000238fc

000124ac <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   124ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   124ae:	4e26      	ldr	r6, [pc, #152]	; (12548 <tc_aes128_set_encrypt_key+0x9c>)
{
   124b0:	4607      	mov	r7, r0
   124b2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   124b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   124b6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   124b8:	ad01      	add	r5, sp, #4
   124ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   124bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   124be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   124c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   124c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   124c8:	4638      	mov	r0, r7
   124ca:	2f00      	cmp	r7, #0
   124cc:	d038      	beq.n	12540 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   124ce:	2c00      	cmp	r4, #0
   124d0:	d038      	beq.n	12544 <tc_aes128_set_encrypt_key+0x98>
   124d2:	1f38      	subs	r0, r7, #4
   124d4:	4621      	mov	r1, r4
   124d6:	4602      	mov	r2, r0
   124d8:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   124da:	784b      	ldrb	r3, [r1, #1]
   124dc:	780d      	ldrb	r5, [r1, #0]
   124de:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   124e0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   124e4:	78cd      	ldrb	r5, [r1, #3]
   124e6:	432b      	orrs	r3, r5
   124e8:	788d      	ldrb	r5, [r1, #2]
   124ea:	3104      	adds	r1, #4
   124ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   124f0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   124f2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   124f6:	d1f0      	bne.n	124da <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   124f8:	4c14      	ldr	r4, [pc, #80]	; (1254c <tc_aes128_set_encrypt_key+0xa0>)
   124fa:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   124fc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   124fe:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12500:	d116      	bne.n	12530 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12502:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12506:	5ca5      	ldrb	r5, [r4, r2]
   12508:	0e1a      	lsrs	r2, r3, #24
   1250a:	5ca2      	ldrb	r2, [r4, r2]
   1250c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12510:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12514:	b2db      	uxtb	r3, r3
   12516:	5d65      	ldrb	r5, [r4, r5]
   12518:	5ce3      	ldrb	r3, [r4, r3]
   1251a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1251e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12522:	ad0c      	add	r5, sp, #48	; 0x30
   12524:	f021 0303 	bic.w	r3, r1, #3
   12528:	442b      	add	r3, r5
   1252a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1252e:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   12530:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12534:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12536:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12538:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1253a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1253c:	d1de      	bne.n	124fc <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1253e:	2001      	movs	r0, #1
}
   12540:	b00d      	add	sp, #52	; 0x34
   12542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12544:	4620      	mov	r0, r4
   12546:	e7fb      	b.n	12540 <tc_aes128_set_encrypt_key+0x94>
   12548:	00023694 	.word	0x00023694
   1254c:	00024296 	.word	0x00024296

00012550 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   12550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12554:	4615      	mov	r5, r2
   12556:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   12558:	4606      	mov	r6, r0
   1255a:	2800      	cmp	r0, #0
   1255c:	d058      	beq.n	12610 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1255e:	2900      	cmp	r1, #0
   12560:	d059      	beq.n	12616 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   12562:	2a00      	cmp	r2, #0
   12564:	d059      	beq.n	1261a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   12566:	2310      	movs	r3, #16
   12568:	460a      	mov	r2, r1
   1256a:	4668      	mov	r0, sp
   1256c:	4619      	mov	r1, r3
   1256e:	f00c fcbe 	bl	1eeee <_copy>
	add_round_key(state, s->words);
   12572:	4629      	mov	r1, r5
   12574:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   12576:	4c2a      	ldr	r4, [pc, #168]	; (12620 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   12578:	f00d fbc3 	bl	1fd02 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1257c:	f105 0710 	add.w	r7, r5, #16
   12580:	46a1      	mov	r9, r4
   12582:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   12584:	46e8      	mov	r8, sp
{
   12586:	466a      	mov	r2, sp
   12588:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   1258a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1258c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1258e:	5c61      	ldrb	r1, [r4, r1]
   12590:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   12594:	d1f9      	bne.n	1258a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   12596:	4668      	mov	r0, sp
   12598:	f00d fbf8 	bl	1fd8c <shift_rows>
	mult_row_column(t, s);
   1259c:	4669      	mov	r1, sp
   1259e:	a804      	add	r0, sp, #16
   125a0:	f00d fc2d 	bl	1fdfe <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   125a4:	a901      	add	r1, sp, #4
   125a6:	a805      	add	r0, sp, #20
   125a8:	f00d fc29 	bl	1fdfe <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   125ac:	a902      	add	r1, sp, #8
   125ae:	a806      	add	r0, sp, #24
   125b0:	f00d fc25 	bl	1fdfe <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   125b4:	a903      	add	r1, sp, #12
   125b6:	a807      	add	r0, sp, #28
   125b8:	f00d fc21 	bl	1fdfe <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   125bc:	2310      	movs	r3, #16
   125be:	4619      	mov	r1, r3
   125c0:	eb0d 0203 	add.w	r2, sp, r3
   125c4:	4668      	mov	r0, sp
   125c6:	f00c fc92 	bl	1eeee <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   125ca:	4639      	mov	r1, r7
   125cc:	4668      	mov	r0, sp
   125ce:	3710      	adds	r7, #16
   125d0:	f00d fb97 	bl	1fd02 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   125d4:	42af      	cmp	r7, r5
   125d6:	d1d5      	bne.n	12584 <tc_aes_encrypt+0x34>
   125d8:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   125da:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   125de:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   125e0:	f819 3003 	ldrb.w	r3, [r9, r3]
   125e4:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   125e8:	d1f7      	bne.n	125da <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   125ea:	4668      	mov	r0, sp
   125ec:	f00d fbce 	bl	1fd8c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   125f0:	4629      	mov	r1, r5
   125f2:	4668      	mov	r0, sp
   125f4:	f00d fb85 	bl	1fd02 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   125f8:	2310      	movs	r3, #16
   125fa:	4619      	mov	r1, r3
   125fc:	466a      	mov	r2, sp
   125fe:	4630      	mov	r0, r6
   12600:	f00c fc75 	bl	1eeee <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   12604:	4668      	mov	r0, sp
   12606:	2210      	movs	r2, #16
   12608:	4621      	mov	r1, r4
   1260a:	f00c fc7d 	bl	1ef08 <_set>

	return TC_CRYPTO_SUCCESS;
   1260e:	2001      	movs	r0, #1
}
   12610:	b009      	add	sp, #36	; 0x24
   12612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   12616:	4608      	mov	r0, r1
   12618:	e7fa      	b.n	12610 <tc_aes_encrypt+0xc0>
   1261a:	4610      	mov	r0, r2
   1261c:	e7f8      	b.n	12610 <tc_aes_encrypt+0xc0>
   1261e:	bf00      	nop
   12620:	00024296 	.word	0x00024296

00012624 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12624:	4a09      	ldr	r2, [pc, #36]	; (1264c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12626:	490a      	ldr	r1, [pc, #40]	; (12650 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12628:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1262a:	6809      	ldr	r1, [r1, #0]
   1262c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1262e:	4909      	ldr	r1, [pc, #36]	; (12654 <arch_swap+0x30>)
	_current->arch.basepri = key;
   12630:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12632:	684b      	ldr	r3, [r1, #4]
   12634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12638:	604b      	str	r3, [r1, #4]
   1263a:	2300      	movs	r3, #0
   1263c:	f383 8811 	msr	BASEPRI, r3
   12640:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12644:	6893      	ldr	r3, [r2, #8]
}
   12646:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12648:	4770      	bx	lr
   1264a:	bf00      	nop
   1264c:	20002108 	.word	0x20002108
   12650:	00023eb0 	.word	0x00023eb0
   12654:	e000ed00 	.word	0xe000ed00

00012658 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12658:	4912      	ldr	r1, [pc, #72]	; (126a4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1265a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1265c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12660:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12662:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12666:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1266a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1266c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12670:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12674:	4f0c      	ldr	r7, [pc, #48]	; (126a8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12676:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1267a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1267c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1267e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12680:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12682:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12684:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12686:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1268a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1268c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1268e:	f000 fc29 	bl	12ee4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12692:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12696:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1269a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1269e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   126a2:	4770      	bx	lr
    ldr r1, =_kernel
   126a4:	20002108 	.word	0x20002108
    ldr v4, =_SCS_ICSR
   126a8:	e000ed04 	.word	0xe000ed04

000126ac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   126ac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   126b0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   126b2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   126b6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   126ba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   126bc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   126c0:	2902      	cmp	r1, #2
    beq _oops
   126c2:	d0ff      	beq.n	126c4 <_oops>

000126c4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   126c4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   126c6:	f00d fcdd 	bl	20084 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   126ca:	bd01      	pop	{r0, pc}

000126cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   126cc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   126ce:	2b00      	cmp	r3, #0
   126d0:	db08      	blt.n	126e4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126d2:	2201      	movs	r2, #1
   126d4:	f000 001f 	and.w	r0, r0, #31
   126d8:	fa02 f000 	lsl.w	r0, r2, r0
   126dc:	095b      	lsrs	r3, r3, #5
   126de:	4a02      	ldr	r2, [pc, #8]	; (126e8 <arch_irq_enable+0x1c>)
   126e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   126e4:	4770      	bx	lr
   126e6:	bf00      	nop
   126e8:	e000e100 	.word	0xe000e100

000126ec <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   126ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   126ee:	2b00      	cmp	r3, #0
   126f0:	db0d      	blt.n	1270e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126f2:	2201      	movs	r2, #1
   126f4:	095b      	lsrs	r3, r3, #5
   126f6:	f000 001f 	and.w	r0, r0, #31
   126fa:	fa02 f000 	lsl.w	r0, r2, r0
   126fe:	3320      	adds	r3, #32
   12700:	4a03      	ldr	r2, [pc, #12]	; (12710 <arch_irq_disable+0x24>)
   12702:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12706:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1270a:	f3bf 8f6f 	isb	sy
}
   1270e:	4770      	bx	lr
   12710:	e000e100 	.word	0xe000e100

00012714 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12714:	4b05      	ldr	r3, [pc, #20]	; (1272c <arch_irq_is_enabled+0x18>)
   12716:	0942      	lsrs	r2, r0, #5
   12718:	f000 001f 	and.w	r0, r0, #31
   1271c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12720:	2301      	movs	r3, #1
   12722:	fa03 f000 	lsl.w	r0, r3, r0
}
   12726:	4010      	ands	r0, r2
   12728:	4770      	bx	lr
   1272a:	bf00      	nop
   1272c:	e000e100 	.word	0xe000e100

00012730 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12730:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12732:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   12734:	bf54      	ite	pl
   12736:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12738:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1273a:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1273c:	bfac      	ite	ge
   1273e:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12742:	4a07      	ldrlt	r2, [pc, #28]	; (12760 <z_arm_irq_priority_set+0x30>)
   12744:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12748:	bfac      	ite	ge
   1274a:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1274e:	f000 000f 	andlt.w	r0, r0, #15
   12752:	b2db      	uxtb	r3, r3
   12754:	bfb4      	ite	lt
   12756:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12758:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   1275c:	4770      	bx	lr
   1275e:	bf00      	nop
   12760:	e000ed14 	.word	0xe000ed14

00012764 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12764:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   12766:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12768:	4b04      	ldr	r3, [pc, #16]	; (1277c <_arch_isr_direct_pm+0x18>)
   1276a:	6a18      	ldr	r0, [r3, #32]
   1276c:	b118      	cbz	r0, 12776 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1276e:	2200      	movs	r2, #0
   12770:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   12772:	f010 f8bc 	bl	228ee <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12776:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12778:	bd08      	pop	{r3, pc}
   1277a:	bf00      	nop
   1277c:	20002108 	.word	0x20002108

00012780 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12780:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12784:	9b00      	ldr	r3, [sp, #0]
   12786:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1278a:	490a      	ldr	r1, [pc, #40]	; (127b4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   1278c:	9b01      	ldr	r3, [sp, #4]
   1278e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12792:	9b02      	ldr	r3, [sp, #8]
   12794:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12798:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1279c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   127a0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   127a4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   127a8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   127aa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   127ac:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   127ae:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   127b0:	4770      	bx	lr
   127b2:	bf00      	nop
   127b4:	0001decd 	.word	0x0001decd

000127b8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   127b8:	4a0b      	ldr	r2, [pc, #44]	; (127e8 <z_check_thread_stack_fail+0x30>)
{
   127ba:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   127bc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   127be:	b190      	cbz	r0, 127e6 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   127c0:	f113 0f16 	cmn.w	r3, #22
   127c4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   127c6:	d005      	beq.n	127d4 <z_check_thread_stack_fail+0x1c>
   127c8:	f1a0 0220 	sub.w	r2, r0, #32
   127cc:	429a      	cmp	r2, r3
   127ce:	d806      	bhi.n	127de <z_check_thread_stack_fail+0x26>
   127d0:	4283      	cmp	r3, r0
   127d2:	d204      	bcs.n	127de <z_check_thread_stack_fail+0x26>
   127d4:	4281      	cmp	r1, r0
   127d6:	bf2c      	ite	cs
   127d8:	2100      	movcs	r1, #0
   127da:	2101      	movcc	r1, #1
   127dc:	e000      	b.n	127e0 <z_check_thread_stack_fail+0x28>
   127de:	2100      	movs	r1, #0
   127e0:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   127e2:	bf08      	it	eq
   127e4:	2000      	moveq	r0, #0
}
   127e6:	4770      	bx	lr
   127e8:	20002108 	.word	0x20002108

000127ec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   127ec:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   127ee:	4b09      	ldr	r3, [pc, #36]	; (12814 <arch_switch_to_main_thread+0x28>)
   127f0:	6098      	str	r0, [r3, #8]
{
   127f2:	460d      	mov	r5, r1
   127f4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   127f6:	f000 fb75 	bl	12ee4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   127fa:	4620      	mov	r0, r4
   127fc:	f385 8809 	msr	PSP, r5
   12800:	2100      	movs	r1, #0
   12802:	b663      	cpsie	if
   12804:	f381 8811 	msr	BASEPRI, r1
   12808:	f3bf 8f6f 	isb	sy
   1280c:	2200      	movs	r2, #0
   1280e:	2300      	movs	r3, #0
   12810:	f00b fb5c 	bl	1decc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12814:	20002108 	.word	0x20002108

00012818 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12818:	4901      	ldr	r1, [pc, #4]	; (12820 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1281a:	2210      	movs	r2, #16
	str	r2, [r1]
   1281c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1281e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12820:	e000ed10 	.word	0xe000ed10

00012824 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12824:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12826:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12828:	f380 8811 	msr	BASEPRI, r0
	isb
   1282c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12830:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12834:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12836:	b662      	cpsie	i
	isb
   12838:	f3bf 8f6f 	isb	sy

	bx	lr
   1283c:	4770      	bx	lr
   1283e:	bf00      	nop

00012840 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12840:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12842:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12844:	f381 8811 	msr	BASEPRI, r1

	wfe
   12848:	bf20      	wfe

	msr	BASEPRI, r0
   1284a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1284e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12850:	4770      	bx	lr
   12852:	bf00      	nop

00012854 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12854:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12856:	4606      	mov	r6, r0

	if (esf != NULL) {
   12858:	460c      	mov	r4, r1
   1285a:	b301      	cbz	r1, 1289e <z_arm_fatal_error+0x4a>
   1285c:	4b13      	ldr	r3, [pc, #76]	; (128ac <z_arm_fatal_error+0x58>)
   1285e:	4d14      	ldr	r5, [pc, #80]	; (128b0 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12860:	4814      	ldr	r0, [pc, #80]	; (128b4 <z_arm_fatal_error+0x60>)
   12862:	1aed      	subs	r5, r5, r3
   12864:	08ed      	lsrs	r5, r5, #3
   12866:	01ad      	lsls	r5, r5, #6
   12868:	f045 0501 	orr.w	r5, r5, #1
   1286c:	f8ad 5000 	strh.w	r5, [sp]
   12870:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   12874:	6809      	ldr	r1, [r1, #0]
   12876:	f00b febe 	bl	1e5f6 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1287a:	f8ad 5000 	strh.w	r5, [sp]
   1287e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   12882:	68e1      	ldr	r1, [r4, #12]
   12884:	480c      	ldr	r0, [pc, #48]	; (128b8 <z_arm_fatal_error+0x64>)
   12886:	f00b feb6 	bl	1e5f6 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1288a:	69e1      	ldr	r1, [r4, #28]
   1288c:	480b      	ldr	r0, [pc, #44]	; (128bc <z_arm_fatal_error+0x68>)
   1288e:	462a      	mov	r2, r5
   12890:	f00b fe84 	bl	1e59c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12894:	69a1      	ldr	r1, [r4, #24]
   12896:	480a      	ldr	r0, [pc, #40]	; (128c0 <z_arm_fatal_error+0x6c>)
   12898:	462a      	mov	r2, r5
   1289a:	f00b fe7f 	bl	1e59c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1289e:	4621      	mov	r1, r4
   128a0:	4630      	mov	r0, r6
}
   128a2:	b002      	add	sp, #8
   128a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   128a8:	f009 bdb0 	b.w	1c40c <z_fatal_error>
   128ac:	0002353c 	.word	0x0002353c
   128b0:	0002360c 	.word	0x0002360c
   128b4:	00024396 	.word	0x00024396
   128b8:	000243c5 	.word	0x000243c5
   128bc:	000243f4 	.word	0x000243f4
   128c0:	00024403 	.word	0x00024403

000128c4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   128c4:	bf30      	wfi
    b z_SysNmiOnReset
   128c6:	f7ff bffd 	b.w	128c4 <z_SysNmiOnReset>
   128ca:	bf00      	nop

000128cc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   128cc:	4a0b      	ldr	r2, [pc, #44]	; (128fc <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   128ce:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   128d0:	4b0b      	ldr	r3, [pc, #44]	; (12900 <z_arm_prep_c+0x34>)
   128d2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   128d6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   128d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   128dc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   128e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   128e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   128e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   128ec:	f009 fdec 	bl	1c4c8 <z_bss_zero>
	z_data_copy();
   128f0:	f00a fe80 	bl	1d5f4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   128f4:	f000 facc 	bl	12e90 <z_arm_interrupt_init>
	z_cstart();
   128f8:	f009 fe0a 	bl	1c510 <z_cstart>
   128fc:	00000000 	.word	0x00000000
   12900:	e000ed00 	.word	0xe000ed00

00012904 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12904:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12906:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12908:	4a0b      	ldr	r2, [pc, #44]	; (12938 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1290a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   1290c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1290e:	bf1e      	ittt	ne
	movne	r1, #0
   12910:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12912:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   12914:	f00f ffeb 	blne	228ee <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12918:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1291a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1291e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12922:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12926:	4905      	ldr	r1, [pc, #20]	; (1293c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12928:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1292a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1292c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1292e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12932:	4903      	ldr	r1, [pc, #12]	; (12940 <_isr_wrapper+0x3c>)
	bx r1
   12934:	4708      	bx	r1
   12936:	0000      	.short	0x0000
	ldr r2, =_kernel
   12938:	20002108 	.word	0x20002108
	ldr r1, =_sw_isr_table
   1293c:	00023340 	.word	0x00023340
	ldr r1, =z_arm_int_exit
   12940:	00012df1 	.word	0x00012df1

00012944 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12944:	2000      	movs	r0, #0
    msr CONTROL, r0
   12946:	f380 8814 	msr	CONTROL, r0
    isb
   1294a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1294e:	f00d fcc0 	bl	202d2 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12952:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12954:	490d      	ldr	r1, [pc, #52]	; (1298c <__start+0x48>)
    str r0, [r1]
   12956:	6008      	str	r0, [r1, #0]
    dsb
   12958:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1295c:	480c      	ldr	r0, [pc, #48]	; (12990 <__start+0x4c>)
    msr msp, r0
   1295e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12962:	f000 fa63 	bl	12e2c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12966:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12968:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1296c:	4809      	ldr	r0, [pc, #36]	; (12994 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1296e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   12972:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12974:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12978:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1297c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1297e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12980:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12984:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12988:	f7ff ffa0 	bl	128cc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1298c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12990:	20004d20 	.word	0x20004d20
    ldr r0, =z_interrupt_stacks
   12994:	20004ea0 	.word	0x20004ea0

00012998 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12998:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1299c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   129a0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   129a2:	4672      	mov	r2, lr
	bl z_arm_fault
   129a4:	f000 f94e 	bl	12c44 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   129a8:	bd01      	pop	{r0, pc}
   129aa:	bf00      	nop

000129ac <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   129ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129b0:	4b35      	ldr	r3, [pc, #212]	; (12a88 <mem_manage_fault+0xdc>)
   129b2:	4c36      	ldr	r4, [pc, #216]	; (12a8c <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   129b4:	4d36      	ldr	r5, [pc, #216]	; (12a90 <mem_manage_fault+0xe4>)
   129b6:	1ae4      	subs	r4, r4, r3
   129b8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   129ba:	01a4      	lsls	r4, r4, #6
   129bc:	f044 0901 	orr.w	r9, r4, #1
{
   129c0:	4607      	mov	r7, r0
   129c2:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   129c4:	4833      	ldr	r0, [pc, #204]	; (12a94 <mem_manage_fault+0xe8>)
   129c6:	4649      	mov	r1, r9
{
   129c8:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   129ca:	f00b fdda 	bl	1e582 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   129ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   129d0:	06d3      	lsls	r3, r2, #27
   129d2:	d503      	bpl.n	129dc <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   129d4:	4830      	ldr	r0, [pc, #192]	; (12a98 <mem_manage_fault+0xec>)
   129d6:	4649      	mov	r1, r9
   129d8:	f00b fdd3 	bl	1e582 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   129dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   129de:	0718      	lsls	r0, r3, #28
   129e0:	d504      	bpl.n	129ec <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   129e2:	482e      	ldr	r0, [pc, #184]	; (12a9c <mem_manage_fault+0xf0>)
   129e4:	f044 0101 	orr.w	r1, r4, #1
   129e8:	f00b fdcb 	bl	1e582 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   129ec:	4d28      	ldr	r5, [pc, #160]	; (12a90 <mem_manage_fault+0xe4>)
   129ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   129f0:	0799      	lsls	r1, r3, #30
   129f2:	d423      	bmi.n	12a3c <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   129f4:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   129f8:	4d25      	ldr	r5, [pc, #148]	; (12a90 <mem_manage_fault+0xe4>)
   129fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   129fc:	07d3      	lsls	r3, r2, #31
   129fe:	d504      	bpl.n	12a0a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   12a00:	4827      	ldr	r0, [pc, #156]	; (12aa0 <mem_manage_fault+0xf4>)
   12a02:	f044 0101 	orr.w	r1, r4, #1
   12a06:	f00b fdbc 	bl	1e582 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12a0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12a0c:	0698      	lsls	r0, r3, #26
   12a0e:	d504      	bpl.n	12a1a <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   12a10:	4824      	ldr	r0, [pc, #144]	; (12aa4 <mem_manage_fault+0xf8>)
   12a12:	f044 0101 	orr.w	r1, r4, #1
   12a16:	f00b fdb4 	bl	1e582 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12a1a:	4b1d      	ldr	r3, [pc, #116]	; (12a90 <mem_manage_fault+0xe4>)
   12a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12a1e:	06d1      	lsls	r1, r2, #27
   12a20:	d424      	bmi.n	12a6c <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   12a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12a24:	0792      	lsls	r2, r2, #30
   12a26:	d421      	bmi.n	12a6c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12a28:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12a2a:	4a19      	ldr	r2, [pc, #100]	; (12a90 <mem_manage_fault+0xe4>)
   12a2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12a2e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12a32:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   12a34:	2300      	movs	r3, #0
   12a36:	7033      	strb	r3, [r6, #0]

	return reason;
}
   12a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   12a3c:	f044 0a01 	orr.w	sl, r4, #1
   12a40:	4819      	ldr	r0, [pc, #100]	; (12aa8 <mem_manage_fault+0xfc>)
   12a42:	4651      	mov	r1, sl
   12a44:	f00b fd9d 	bl	1e582 <log_0>
		uint32_t temp = SCB->MMFAR;
   12a48:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   12a4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12a4e:	061a      	lsls	r2, r3, #24
   12a50:	d5d0      	bpl.n	129f4 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12a52:	4816      	ldr	r0, [pc, #88]	; (12aac <mem_manage_fault+0x100>)
   12a54:	4652      	mov	r2, sl
   12a56:	4649      	mov	r1, r9
   12a58:	f00b fda0 	bl	1e59c <log_1>
			if (from_hard_fault != 0) {
   12a5c:	f1b8 0f00 	cmp.w	r8, #0
   12a60:	d0ca      	beq.n	129f8 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12a62:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12a68:	62ab      	str	r3, [r5, #40]	; 0x28
   12a6a:	e7c5      	b.n	129f8 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   12a6c:	685b      	ldr	r3, [r3, #4]
   12a6e:	051b      	lsls	r3, r3, #20
   12a70:	d5da      	bpl.n	12a28 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12a72:	4639      	mov	r1, r7
   12a74:	4648      	mov	r0, r9
   12a76:	f7ff fe9f 	bl	127b8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   12a7a:	2800      	cmp	r0, #0
   12a7c:	d0d4      	beq.n	12a28 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   12a7e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   12a82:	2002      	movs	r0, #2
   12a84:	e7d1      	b.n	12a2a <mem_manage_fault+0x7e>
   12a86:	bf00      	nop
   12a88:	0002353c 	.word	0x0002353c
   12a8c:	0002360c 	.word	0x0002360c
   12a90:	e000ed00 	.word	0xe000ed00
   12a94:	00024431 	.word	0x00024431
   12a98:	00024447 	.word	0x00024447
   12a9c:	0002447a 	.word	0x0002447a
   12aa0:	000244bb 	.word	0x000244bb
   12aa4:	000244da 	.word	0x000244da
   12aa8:	0002448d 	.word	0x0002448d
   12aac:	000244a5 	.word	0x000244a5

00012ab0 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   12ab0:	b570      	push	{r4, r5, r6, lr}
   12ab2:	4b23      	ldr	r3, [pc, #140]	; (12b40 <usage_fault.isra.0+0x90>)
   12ab4:	4c23      	ldr	r4, [pc, #140]	; (12b44 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12ab6:	4d24      	ldr	r5, [pc, #144]	; (12b48 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   12ab8:	4824      	ldr	r0, [pc, #144]	; (12b4c <usage_fault.isra.0+0x9c>)
   12aba:	1ae4      	subs	r4, r4, r3
   12abc:	08e4      	lsrs	r4, r4, #3
   12abe:	01a4      	lsls	r4, r4, #6
   12ac0:	f044 0601 	orr.w	r6, r4, #1
   12ac4:	4631      	mov	r1, r6
   12ac6:	f00b fd5c 	bl	1e582 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12aca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   12acc:	0193      	lsls	r3, r2, #6
   12ace:	d503      	bpl.n	12ad8 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   12ad0:	481f      	ldr	r0, [pc, #124]	; (12b50 <usage_fault.isra.0+0xa0>)
   12ad2:	4631      	mov	r1, r6
   12ad4:	f00b fd55 	bl	1e582 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12ad8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12ada:	01dd      	lsls	r5, r3, #7
   12adc:	d504      	bpl.n	12ae8 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   12ade:	481d      	ldr	r0, [pc, #116]	; (12b54 <usage_fault.isra.0+0xa4>)
   12ae0:	f044 0101 	orr.w	r1, r4, #1
   12ae4:	f00b fd4d 	bl	1e582 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12ae8:	4d17      	ldr	r5, [pc, #92]	; (12b48 <usage_fault.isra.0+0x98>)
   12aea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   12aec:	0310      	lsls	r0, r2, #12
   12aee:	d504      	bpl.n	12afa <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   12af0:	4819      	ldr	r0, [pc, #100]	; (12b58 <usage_fault.isra.0+0xa8>)
   12af2:	f044 0101 	orr.w	r1, r4, #1
   12af6:	f00b fd44 	bl	1e582 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12afa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12afc:	0359      	lsls	r1, r3, #13
   12afe:	d504      	bpl.n	12b0a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   12b00:	4816      	ldr	r0, [pc, #88]	; (12b5c <usage_fault.isra.0+0xac>)
   12b02:	f044 0101 	orr.w	r1, r4, #1
   12b06:	f00b fd3c 	bl	1e582 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12b0a:	4d0f      	ldr	r5, [pc, #60]	; (12b48 <usage_fault.isra.0+0x98>)
   12b0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   12b0e:	0392      	lsls	r2, r2, #14
   12b10:	d504      	bpl.n	12b1c <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   12b12:	4813      	ldr	r0, [pc, #76]	; (12b60 <usage_fault.isra.0+0xb0>)
   12b14:	f044 0101 	orr.w	r1, r4, #1
   12b18:	f00b fd33 	bl	1e582 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12b1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12b1e:	03db      	lsls	r3, r3, #15
   12b20:	d504      	bpl.n	12b2c <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   12b22:	4810      	ldr	r0, [pc, #64]	; (12b64 <usage_fault.isra.0+0xb4>)
   12b24:	f044 0101 	orr.w	r1, r4, #1
   12b28:	f00b fd2b 	bl	1e582 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12b2c:	4a06      	ldr	r2, [pc, #24]	; (12b48 <usage_fault.isra.0+0x98>)
   12b2e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12b30:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12b34:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   12b38:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   12b3a:	2000      	movs	r0, #0
   12b3c:	bd70      	pop	{r4, r5, r6, pc}
   12b3e:	bf00      	nop
   12b40:	0002353c 	.word	0x0002353c
   12b44:	0002360c 	.word	0x0002360c
   12b48:	e000ed00 	.word	0xe000ed00
   12b4c:	00024509 	.word	0x00024509
   12b50:	00024521 	.word	0x00024521
   12b54:	00024534 	.word	0x00024534
   12b58:	0002454e 	.word	0x0002454e
   12b5c:	0002456c 	.word	0x0002456c
   12b60:	00024591 	.word	0x00024591
   12b64:	000245ab 	.word	0x000245ab

00012b68 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b6c:	4b2a      	ldr	r3, [pc, #168]	; (12c18 <bus_fault.isra.0+0xb0>)
   12b6e:	4c2b      	ldr	r4, [pc, #172]	; (12c1c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12b70:	4d2b      	ldr	r5, [pc, #172]	; (12c20 <bus_fault.isra.0+0xb8>)
   12b72:	1ae4      	subs	r4, r4, r3
   12b74:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   12b76:	01a4      	lsls	r4, r4, #6
   12b78:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12b7c:	4607      	mov	r7, r0
   12b7e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   12b80:	4828      	ldr	r0, [pc, #160]	; (12c24 <bus_fault.isra.0+0xbc>)
   12b82:	4641      	mov	r1, r8
   12b84:	f00b fcfd 	bl	1e582 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12b88:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   12b8a:	04d1      	lsls	r1, r2, #19
   12b8c:	d503      	bpl.n	12b96 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   12b8e:	4826      	ldr	r0, [pc, #152]	; (12c28 <bus_fault.isra.0+0xc0>)
   12b90:	4641      	mov	r1, r8
   12b92:	f00b fcf6 	bl	1e582 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12b96:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12b98:	051a      	lsls	r2, r3, #20
   12b9a:	d504      	bpl.n	12ba6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   12b9c:	4823      	ldr	r0, [pc, #140]	; (12c2c <bus_fault.isra.0+0xc4>)
   12b9e:	f044 0101 	orr.w	r1, r4, #1
   12ba2:	f00b fcee 	bl	1e582 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12ba6:	4d1e      	ldr	r5, [pc, #120]	; (12c20 <bus_fault.isra.0+0xb8>)
   12ba8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12baa:	059b      	lsls	r3, r3, #22
   12bac:	d512      	bpl.n	12bd4 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   12bae:	f044 0801 	orr.w	r8, r4, #1
   12bb2:	481f      	ldr	r0, [pc, #124]	; (12c30 <bus_fault.isra.0+0xc8>)
   12bb4:	4641      	mov	r1, r8
   12bb6:	f00b fce4 	bl	1e582 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   12bba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12bbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12bbe:	0418      	lsls	r0, r3, #16
   12bc0:	d508      	bpl.n	12bd4 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12bc2:	481c      	ldr	r0, [pc, #112]	; (12c34 <bus_fault.isra.0+0xcc>)
   12bc4:	4642      	mov	r2, r8
   12bc6:	f00b fce9 	bl	1e59c <log_1>
			if (from_hard_fault != 0) {
   12bca:	b11f      	cbz	r7, 12bd4 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12bcc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12bce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12bd2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12bd4:	4d12      	ldr	r5, [pc, #72]	; (12c20 <bus_fault.isra.0+0xb8>)
   12bd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12bd8:	0559      	lsls	r1, r3, #21
   12bda:	d504      	bpl.n	12be6 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   12bdc:	4816      	ldr	r0, [pc, #88]	; (12c38 <bus_fault.isra.0+0xd0>)
   12bde:	f044 0101 	orr.w	r1, r4, #1
   12be2:	f00b fcce 	bl	1e582 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12be6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12be8:	05da      	lsls	r2, r3, #23
   12bea:	d50d      	bpl.n	12c08 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   12bec:	4813      	ldr	r0, [pc, #76]	; (12c3c <bus_fault.isra.0+0xd4>)
   12bee:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12bf2:	f00b fcc6 	bl	1e582 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12bf6:	4a0a      	ldr	r2, [pc, #40]	; (12c20 <bus_fault.isra.0+0xb8>)
   12bf8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12bfa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12bfc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12c00:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12c02:	7030      	strb	r0, [r6, #0]
}
   12c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12c08:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12c0a:	049b      	lsls	r3, r3, #18
   12c0c:	d5f3      	bpl.n	12bf6 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12c0e:	480c      	ldr	r0, [pc, #48]	; (12c40 <bus_fault.isra.0+0xd8>)
   12c10:	f044 0101 	orr.w	r1, r4, #1
   12c14:	e7ed      	b.n	12bf2 <bus_fault.isra.0+0x8a>
   12c16:	bf00      	nop
   12c18:	0002353c 	.word	0x0002353c
   12c1c:	0002360c 	.word	0x0002360c
   12c20:	e000ed00 	.word	0xe000ed00
   12c24:	000245d6 	.word	0x000245d6
   12c28:	000245ec 	.word	0x000245ec
   12c2c:	0002447a 	.word	0x0002447a
   12c30:	000245fd 	.word	0x000245fd
   12c34:	00024616 	.word	0x00024616
   12c38:	0002462b 	.word	0x0002462b
   12c3c:	00024646 	.word	0x00024646
   12c40:	000244da 	.word	0x000244da

00012c44 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12c48:	4b57      	ldr	r3, [pc, #348]	; (12da8 <z_arm_fault+0x164>)
   12c4a:	685e      	ldr	r6, [r3, #4]
{
   12c4c:	b08a      	sub	sp, #40	; 0x28
   12c4e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12c50:	f3c6 0408 	ubfx	r4, r6, #0, #9
   12c54:	2500      	movs	r5, #0
   12c56:	f385 8811 	msr	BASEPRI, r5
   12c5a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12c5e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   12c62:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   12c66:	d10d      	bne.n	12c84 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   12c68:	f002 030c 	and.w	r3, r2, #12
   12c6c:	2b08      	cmp	r3, #8
   12c6e:	d10b      	bne.n	12c88 <z_arm_fault+0x44>
   12c70:	494e      	ldr	r1, [pc, #312]	; (12dac <z_arm_fault+0x168>)
   12c72:	4b4f      	ldr	r3, [pc, #316]	; (12db0 <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   12c74:	484f      	ldr	r0, [pc, #316]	; (12db4 <z_arm_fault+0x170>)
   12c76:	1ac9      	subs	r1, r1, r3
   12c78:	08c9      	lsrs	r1, r1, #3
   12c7a:	0189      	lsls	r1, r1, #6
   12c7c:	f041 0101 	orr.w	r1, r1, #1
   12c80:	f00b fc7f 	bl	1e582 <log_0>
		return NULL;
   12c84:	462f      	mov	r7, r5
   12c86:	e003      	b.n	12c90 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12c88:	0712      	lsls	r2, r2, #28
   12c8a:	d401      	bmi.n	12c90 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   12c8c:	4607      	mov	r7, r0
			*nested_exc = true;
   12c8e:	2501      	movs	r5, #1
	*recoverable = false;
   12c90:	2300      	movs	r3, #0
   12c92:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   12c96:	1ee3      	subs	r3, r4, #3
   12c98:	2b09      	cmp	r3, #9
   12c9a:	d86b      	bhi.n	12d74 <z_arm_fault+0x130>
   12c9c:	e8df f003 	tbb	[pc, r3]
   12ca0:	3d5d5905 	.word	0x3d5d5905
   12ca4:	6a6a6a6a 	.word	0x6a6a6a6a
   12ca8:	616a      	.short	0x616a
   12caa:	4b41      	ldr	r3, [pc, #260]	; (12db0 <z_arm_fault+0x16c>)
   12cac:	4e3f      	ldr	r6, [pc, #252]	; (12dac <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   12cae:	4842      	ldr	r0, [pc, #264]	; (12db8 <z_arm_fault+0x174>)
   12cb0:	1af6      	subs	r6, r6, r3
   12cb2:	08f6      	lsrs	r6, r6, #3
   12cb4:	01b6      	lsls	r6, r6, #6
   12cb6:	f046 0601 	orr.w	r6, r6, #1
   12cba:	4631      	mov	r1, r6
   12cbc:	f00b fc61 	bl	1e582 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12cc0:	4b39      	ldr	r3, [pc, #228]	; (12da8 <z_arm_fault+0x164>)
   12cc2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   12cc4:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12cc8:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   12ccc:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12cd0:	d005      	beq.n	12cde <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   12cd2:	483a      	ldr	r0, [pc, #232]	; (12dbc <z_arm_fault+0x178>)
   12cd4:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   12cd6:	f00b fc54 	bl	1e582 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12cda:	2400      	movs	r4, #0
}
   12cdc:	e020      	b.n	12d20 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12ce0:	005b      	lsls	r3, r3, #1
   12ce2:	d51d      	bpl.n	12d20 <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
   12ce4:	4836      	ldr	r0, [pc, #216]	; (12dc0 <z_arm_fault+0x17c>)
   12ce6:	4631      	mov	r1, r6
   12ce8:	f00b fc4b 	bl	1e582 <log_0>
		if (SCB_MMFSR != 0) {
   12cec:	4b35      	ldr	r3, [pc, #212]	; (12dc4 <z_arm_fault+0x180>)
   12cee:	781b      	ldrb	r3, [r3, #0]
   12cf0:	b133      	cbz	r3, 12d00 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
   12cf2:	f10d 0207 	add.w	r2, sp, #7
   12cf6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12cf8:	4638      	mov	r0, r7
   12cfa:	f7ff fe57 	bl	129ac <mem_manage_fault>
   12cfe:	e00e      	b.n	12d1e <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
   12d00:	4b31      	ldr	r3, [pc, #196]	; (12dc8 <z_arm_fault+0x184>)
   12d02:	781b      	ldrb	r3, [r3, #0]
   12d04:	b12b      	cbz	r3, 12d12 <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
   12d06:	f10d 0107 	add.w	r1, sp, #7
   12d0a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   12d0c:	f7ff ff2c 	bl	12b68 <bus_fault.isra.0>
   12d10:	e005      	b.n	12d1e <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
   12d12:	4b2e      	ldr	r3, [pc, #184]	; (12dcc <z_arm_fault+0x188>)
   12d14:	881b      	ldrh	r3, [r3, #0]
   12d16:	b29b      	uxth	r3, r3
   12d18:	b113      	cbz	r3, 12d20 <z_arm_fault+0xdc>
			reason = usage_fault(esf);
   12d1a:	f7ff fec9 	bl	12ab0 <usage_fault.isra.0>
   12d1e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12d20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12d24:	b993      	cbnz	r3, 12d4c <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12d26:	2220      	movs	r2, #32
   12d28:	4639      	mov	r1, r7
   12d2a:	a802      	add	r0, sp, #8
   12d2c:	f00d fa83 	bl	20236 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d32:	b39d      	cbz	r5, 12d9c <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12d34:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12d38:	b922      	cbnz	r2, 12d44 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12d3a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12d3e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12d42:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   12d44:	a902      	add	r1, sp, #8
   12d46:	4620      	mov	r0, r4
   12d48:	f7ff fd84 	bl	12854 <z_arm_fatal_error>
}
   12d4c:	b00a      	add	sp, #40	; 0x28
   12d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   12d52:	f10d 0207 	add.w	r2, sp, #7
   12d56:	2100      	movs	r1, #0
   12d58:	e7ce      	b.n	12cf8 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
   12d5a:	f10d 0107 	add.w	r1, sp, #7
   12d5e:	2000      	movs	r0, #0
   12d60:	e7d4      	b.n	12d0c <z_arm_fault+0xc8>
   12d62:	4912      	ldr	r1, [pc, #72]	; (12dac <z_arm_fault+0x168>)
   12d64:	4b12      	ldr	r3, [pc, #72]	; (12db0 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
   12d66:	481a      	ldr	r0, [pc, #104]	; (12dd0 <z_arm_fault+0x18c>)
   12d68:	1ac9      	subs	r1, r1, r3
   12d6a:	08c9      	lsrs	r1, r1, #3
   12d6c:	0189      	lsls	r1, r1, #6
   12d6e:	f041 0101 	orr.w	r1, r1, #1
   12d72:	e7b0      	b.n	12cd6 <z_arm_fault+0x92>
   12d74:	4a0e      	ldr	r2, [pc, #56]	; (12db0 <z_arm_fault+0x16c>)
   12d76:	4b0d      	ldr	r3, [pc, #52]	; (12dac <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
   12d78:	4816      	ldr	r0, [pc, #88]	; (12dd4 <z_arm_fault+0x190>)
   12d7a:	4917      	ldr	r1, [pc, #92]	; (12dd8 <z_arm_fault+0x194>)
   12d7c:	1a9b      	subs	r3, r3, r2
   12d7e:	08db      	lsrs	r3, r3, #3
   12d80:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   12d84:	ea4f 1383 	mov.w	r3, r3, lsl #6
   12d88:	bf18      	it	ne
   12d8a:	4601      	movne	r1, r0
   12d8c:	f043 0301 	orr.w	r3, r3, #1
   12d90:	4812      	ldr	r0, [pc, #72]	; (12ddc <z_arm_fault+0x198>)
   12d92:	f1a4 0210 	sub.w	r2, r4, #16
   12d96:	f00b fc15 	bl	1e5c4 <log_2>
   12d9a:	e79e      	b.n	12cda <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12d9c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12da0:	f023 0301 	bic.w	r3, r3, #1
   12da4:	e7cd      	b.n	12d42 <z_arm_fault+0xfe>
   12da6:	bf00      	nop
   12da8:	e000ed00 	.word	0xe000ed00
   12dac:	0002360c 	.word	0x0002360c
   12db0:	0002353c 	.word	0x0002353c
   12db4:	0002465e 	.word	0x0002465e
   12db8:	00024689 	.word	0x00024689
   12dbc:	000246a0 	.word	0x000246a0
   12dc0:	000246c1 	.word	0x000246c1
   12dc4:	e000ed28 	.word	0xe000ed28
   12dc8:	e000ed29 	.word	0xe000ed29
   12dcc:	e000ed2a 	.word	0xe000ed2a
   12dd0:	000246e0 	.word	0x000246e0
   12dd4:	00024719 	.word	0x00024719
   12dd8:	00024704 	.word	0x00024704
   12ddc:	00024732 	.word	0x00024732

00012de0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12de0:	4a02      	ldr	r2, [pc, #8]	; (12dec <z_arm_fault_init+0xc>)
   12de2:	6953      	ldr	r3, [r2, #20]
   12de4:	f043 0310 	orr.w	r3, r3, #16
   12de8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   12dea:	4770      	bx	lr
   12dec:	e000ed00 	.word	0xe000ed00

00012df0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12df0:	4b04      	ldr	r3, [pc, #16]	; (12e04 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   12df2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12df4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   12df6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12df8:	d003      	beq.n	12e02 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12dfa:	4903      	ldr	r1, [pc, #12]	; (12e08 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12e00:	600a      	str	r2, [r1, #0]

00012e02 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   12e02:	4770      	bx	lr
	ldr r3, =_kernel
   12e04:	20002108 	.word	0x20002108
	ldr r1, =_SCS_ICSR
   12e08:	e000ed04 	.word	0xe000ed04

00012e0c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12e0c:	4a06      	ldr	r2, [pc, #24]	; (12e28 <z_arm_clear_arm_mpu_config+0x1c>)
   12e0e:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   12e10:	2300      	movs	r3, #0
	int num_regions =
   12e12:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12e16:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12e18:	428b      	cmp	r3, r1
   12e1a:	d100      	bne.n	12e1e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   12e1c:	4770      	bx	lr
  MPU->RNR = rnr;
   12e1e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   12e20:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   12e22:	3301      	adds	r3, #1
   12e24:	e7f8      	b.n	12e18 <z_arm_clear_arm_mpu_config+0xc>
   12e26:	bf00      	nop
   12e28:	e000ed90 	.word	0xe000ed90

00012e2c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12e2c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12e2e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12e30:	2300      	movs	r3, #0
   12e32:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12e36:	f7ff ffe9 	bl	12e0c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12e3a:	4b14      	ldr	r3, [pc, #80]	; (12e8c <z_arm_init_arch_hw_at_boot+0x60>)
   12e3c:	f04f 32ff 	mov.w	r2, #4294967295
   12e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   12e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   12e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   12e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   12e54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   12e58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   12e5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12e60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12e64:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   12e68:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   12e6c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   12e70:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   12e74:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   12e78:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   12e7c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   12e80:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12e82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12e86:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12e8a:	bd08      	pop	{r3, pc}
   12e8c:	e000e100 	.word	0xe000e100

00012e90 <z_arm_interrupt_init>:
   12e90:	4804      	ldr	r0, [pc, #16]	; (12ea4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12e92:	2300      	movs	r3, #0
   12e94:	2140      	movs	r1, #64	; 0x40
   12e96:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12e98:	3301      	adds	r3, #1
   12e9a:	2b27      	cmp	r3, #39	; 0x27
   12e9c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12ea0:	d1f9      	bne.n	12e96 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12ea2:	4770      	bx	lr
   12ea4:	e000e100 	.word	0xe000e100

00012ea8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12ea8:	4b06      	ldr	r3, [pc, #24]	; (12ec4 <z_impl_k_thread_abort+0x1c>)
   12eaa:	689b      	ldr	r3, [r3, #8]
   12eac:	4283      	cmp	r3, r0
   12eae:	d107      	bne.n	12ec0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12eb0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12eb4:	b123      	cbz	r3, 12ec0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12eb6:	4a04      	ldr	r2, [pc, #16]	; (12ec8 <z_impl_k_thread_abort+0x20>)
   12eb8:	6853      	ldr	r3, [r2, #4]
   12eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12ebe:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   12ec0:	f00a bb34 	b.w	1d52c <z_thread_abort>
   12ec4:	20002108 	.word	0x20002108
   12ec8:	e000ed00 	.word	0xe000ed00

00012ecc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12ecc:	4b02      	ldr	r3, [pc, #8]	; (12ed8 <z_arm_configure_static_mpu_regions+0xc>)
   12ece:	4a03      	ldr	r2, [pc, #12]	; (12edc <z_arm_configure_static_mpu_regions+0x10>)
   12ed0:	4803      	ldr	r0, [pc, #12]	; (12ee0 <z_arm_configure_static_mpu_regions+0x14>)
   12ed2:	2101      	movs	r1, #1
   12ed4:	f000 b884 	b.w	12fe0 <arm_core_mpu_configure_static_mpu_regions>
   12ed8:	20010000 	.word	0x20010000
   12edc:	20000000 	.word	0x20000000
   12ee0:	000239a8 	.word	0x000239a8

00012ee4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12ee4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12ee6:	4b05      	ldr	r3, [pc, #20]	; (12efc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12ee8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   12eea:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12eec:	4a04      	ldr	r2, [pc, #16]	; (12f00 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12eee:	2120      	movs	r1, #32
   12ef0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12ef4:	4618      	mov	r0, r3
   12ef6:	2101      	movs	r1, #1
   12ef8:	f000 b87c 	b.w	12ff4 <arm_core_mpu_configure_dynamic_mpu_regions>
   12efc:	20001eb4 	.word	0x20001eb4
   12f00:	150b0000 	.word	0x150b0000

00012f04 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   12f06:	4f28      	ldr	r7, [pc, #160]	; (12fa8 <mpu_configure_regions+0xa4>)
   12f08:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12f0a:	2100      	movs	r1, #0
   12f0c:	42b1      	cmp	r1, r6
   12f0e:	da14      	bge.n	12f3a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   12f10:	6844      	ldr	r4, [r0, #4]
   12f12:	2c00      	cmp	r4, #0
   12f14:	d045      	beq.n	12fa2 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   12f16:	b1c3      	cbz	r3, 12f4a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12f18:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   12f1c:	ea14 0f0c 	tst.w	r4, ip
   12f20:	d00d      	beq.n	12f3e <mpu_configure_regions+0x3a>
   12f22:	4a22      	ldr	r2, [pc, #136]	; (12fac <mpu_configure_regions+0xa8>)
   12f24:	4b22      	ldr	r3, [pc, #136]	; (12fb0 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   12f26:	4823      	ldr	r0, [pc, #140]	; (12fb4 <mpu_configure_regions+0xb0>)
   12f28:	1ad2      	subs	r2, r2, r3
   12f2a:	08d2      	lsrs	r2, r2, #3
   12f2c:	0192      	lsls	r2, r2, #6
   12f2e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12f32:	f00b fb33 	bl	1e59c <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12f36:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   12f3a:	4610      	mov	r0, r2
   12f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   12f3e:	2c1f      	cmp	r4, #31
   12f40:	d9ef      	bls.n	12f22 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   12f42:	6805      	ldr	r5, [r0, #0]
		&&
   12f44:	ea1c 0f05 	tst.w	ip, r5
   12f48:	d1eb      	bne.n	12f22 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   12f4a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12f4c:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   12f4e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   12f52:	6802      	ldr	r2, [r0, #0]
   12f54:	d916      	bls.n	12f84 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   12f56:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   12f5a:	d815      	bhi.n	12f88 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12f5c:	3c01      	subs	r4, #1
   12f5e:	fab4 f484 	clz	r4, r4
   12f62:	f1c4 041f 	rsb	r4, r4, #31
   12f66:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   12f68:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12f6a:	ea4c 0404 	orr.w	r4, ip, r4
   12f6e:	d90d      	bls.n	12f8c <mpu_configure_regions+0x88>
   12f70:	4a0e      	ldr	r2, [pc, #56]	; (12fac <mpu_configure_regions+0xa8>)
   12f72:	4b0f      	ldr	r3, [pc, #60]	; (12fb0 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12f74:	4810      	ldr	r0, [pc, #64]	; (12fb8 <mpu_configure_regions+0xb4>)
   12f76:	1ad2      	subs	r2, r2, r3
   12f78:	08d2      	lsrs	r2, r2, #3
   12f7a:	0192      	lsls	r2, r2, #6
   12f7c:	f042 0201 	orr.w	r2, r2, #1
   12f80:	4629      	mov	r1, r5
   12f82:	e7d6      	b.n	12f32 <mpu_configure_regions+0x2e>
		return REGION_32B;
   12f84:	2408      	movs	r4, #8
   12f86:	e7ef      	b.n	12f68 <mpu_configure_regions+0x64>
		return REGION_4G;
   12f88:	243e      	movs	r4, #62	; 0x3e
   12f8a:	e7ed      	b.n	12f68 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12f8c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   12f90:	432a      	orrs	r2, r5
   12f92:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12f96:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   12f9a:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12f9c:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12f9e:	613c      	str	r4, [r7, #16]
		reg_index++;
   12fa0:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   12fa2:	3101      	adds	r1, #1
   12fa4:	300c      	adds	r0, #12
   12fa6:	e7b1      	b.n	12f0c <mpu_configure_regions+0x8>
   12fa8:	e000ed90 	.word	0xe000ed90
   12fac:	000235fc 	.word	0x000235fc
   12fb0:	0002353c 	.word	0x0002353c
   12fb4:	00024749 	.word	0x00024749
   12fb8:	0002476c 	.word	0x0002476c

00012fbc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12fbc:	4b03      	ldr	r3, [pc, #12]	; (12fcc <arm_core_mpu_enable+0x10>)
   12fbe:	2205      	movs	r2, #5
   12fc0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   12fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12fc6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12fca:	4770      	bx	lr
   12fcc:	e000ed90 	.word	0xe000ed90

00012fd0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   12fd0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12fd4:	4b01      	ldr	r3, [pc, #4]	; (12fdc <arm_core_mpu_disable+0xc>)
   12fd6:	2200      	movs	r2, #0
   12fd8:	605a      	str	r2, [r3, #4]
}
   12fda:	4770      	bx	lr
   12fdc:	e000ed90 	.word	0xe000ed90

00012fe0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12fe0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12fe2:	4c03      	ldr	r4, [pc, #12]	; (12ff0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12fe4:	2301      	movs	r3, #1
   12fe6:	7822      	ldrb	r2, [r4, #0]
   12fe8:	f7ff ff8c 	bl	12f04 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12fec:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   12fee:	bd10      	pop	{r4, pc}
   12ff0:	20002175 	.word	0x20002175

00012ff4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   12ff4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   12ff6:	4a08      	ldr	r2, [pc, #32]	; (13018 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   12ff8:	2300      	movs	r3, #0
   12ffa:	7812      	ldrb	r2, [r2, #0]
   12ffc:	f7ff ff82 	bl	12f04 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13000:	f110 0f16 	cmn.w	r0, #22
   13004:	d003      	beq.n	1300e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   13006:	4b05      	ldr	r3, [pc, #20]	; (1301c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   13008:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1300a:	2807      	cmp	r0, #7
   1300c:	dd00      	ble.n	13010 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   1300e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   13010:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   13012:	611a      	str	r2, [r3, #16]
   13014:	3001      	adds	r0, #1
   13016:	e7f8      	b.n	1300a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13018:	20002175 	.word	0x20002175
   1301c:	e000ed90 	.word	0xe000ed90

00013020 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13020:	4913      	ldr	r1, [pc, #76]	; (13070 <z_arm_mpu_init+0x50>)
   13022:	6808      	ldr	r0, [r1, #0]
   13024:	2808      	cmp	r0, #8
{
   13026:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13028:	d81e      	bhi.n	13068 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1302a:	f7ff ffd1 	bl	12fd0 <arm_core_mpu_disable>
	MPU->RNR = index;
   1302e:	4c11      	ldr	r4, [pc, #68]	; (13074 <z_arm_mpu_init+0x54>)
   13030:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13032:	2200      	movs	r2, #0
   13034:	4290      	cmp	r0, r2
   13036:	f101 010c 	add.w	r1, r1, #12
   1303a:	d105      	bne.n	13048 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1303c:	4b0e      	ldr	r3, [pc, #56]	; (13078 <z_arm_mpu_init+0x58>)
   1303e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   13040:	f7ff ffbc 	bl	12fbc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13044:	2000      	movs	r0, #0
}
   13046:	bd10      	pop	{r4, pc}
   13048:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1304a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   1304e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13052:	4313      	orrs	r3, r2
   13054:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13058:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1305a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1305e:	f043 0301 	orr.w	r3, r3, #1
   13062:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13064:	3201      	adds	r2, #1
   13066:	e7e5      	b.n	13034 <z_arm_mpu_init+0x14>
		return -1;
   13068:	f04f 30ff 	mov.w	r0, #4294967295
   1306c:	e7eb      	b.n	13046 <z_arm_mpu_init+0x26>
   1306e:	bf00      	nop
   13070:	000239b4 	.word	0x000239b4
   13074:	e000ed90 	.word	0xe000ed90
   13078:	20002175 	.word	0x20002175

0001307c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1307c:	f04f 0240 	mov.w	r2, #64	; 0x40
   13080:	f3ef 8311 	mrs	r3, BASEPRI
   13084:	f382 8811 	msr	BASEPRI, r2
   13088:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1308c:	4a04      	ldr	r2, [pc, #16]	; (130a0 <nordicsemi_nrf52_init+0x24>)
   1308e:	2101      	movs	r1, #1
   13090:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   13094:	f383 8811 	msr	BASEPRI, r3
   13098:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1309c:	2000      	movs	r0, #0
   1309e:	4770      	bx	lr
   130a0:	4001e000 	.word	0x4001e000

000130a4 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   130a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   130a8:	b2c0      	uxtb	r0, r0
   130aa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   130ae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   130b2:	4905      	ldr	r1, [pc, #20]	; (130c8 <sys_arch_reboot+0x24>)
   130b4:	4b05      	ldr	r3, [pc, #20]	; (130cc <sys_arch_reboot+0x28>)
   130b6:	68ca      	ldr	r2, [r1, #12]
   130b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   130bc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   130be:	60cb      	str	r3, [r1, #12]
   130c0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   130c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   130c6:	e7fd      	b.n	130c4 <sys_arch_reboot+0x20>
   130c8:	e000ed00 	.word	0xe000ed00
   130cc:	05fa0004 	.word	0x05fa0004

000130d0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   130d0:	b120      	cbz	r0, 130dc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   130d2:	4b03      	ldr	r3, [pc, #12]	; (130e0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   130d4:	0180      	lsls	r0, r0, #6
   130d6:	f043 0301 	orr.w	r3, r3, #1
   130da:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   130dc:	4770      	bx	lr
   130de:	bf00      	nop
   130e0:	00023750 	.word	0x00023750

000130e4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   130e4:	4b0e      	ldr	r3, [pc, #56]	; (13120 <bt_hex_real+0x3c>)
   130e6:	2940      	cmp	r1, #64	; 0x40
{
   130e8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   130ea:	bf28      	it	cs
   130ec:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   130ee:	4c0d      	ldr	r4, [pc, #52]	; (13124 <bt_hex_real+0x40>)
   130f0:	1846      	adds	r6, r0, r1
   130f2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   130f4:	42b0      	cmp	r0, r6
   130f6:	f103 0302 	add.w	r3, r3, #2
   130fa:	d104      	bne.n	13106 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   130fc:	2300      	movs	r3, #0
   130fe:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   13102:	4807      	ldr	r0, [pc, #28]	; (13120 <bt_hex_real+0x3c>)
   13104:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   13106:	7802      	ldrb	r2, [r0, #0]
   13108:	0912      	lsrs	r2, r2, #4
   1310a:	5ca2      	ldrb	r2, [r4, r2]
   1310c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13110:	f810 2b01 	ldrb.w	r2, [r0], #1
   13114:	f002 020f 	and.w	r2, r2, #15
   13118:	5ca2      	ldrb	r2, [r4, r2]
   1311a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1311e:	e7e9      	b.n	130f4 <bt_hex_real+0x10>
   13120:	20002176 	.word	0x20002176
   13124:	000247a5 	.word	0x000247a5

00013128 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   13128:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1312a:	7803      	ldrb	r3, [r0, #0]
   1312c:	b08b      	sub	sp, #44	; 0x2c
   1312e:	4604      	mov	r4, r0
   13130:	ad07      	add	r5, sp, #28
   13132:	2b03      	cmp	r3, #3
   13134:	d821      	bhi.n	1317a <bt_addr_le_str_real+0x52>
   13136:	e8df f003 	tbb	[pc, r3]
   1313a:	1a02      	.short	0x1a02
   1313c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1313e:	4912      	ldr	r1, [pc, #72]	; (13188 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   13140:	4628      	mov	r0, r5
   13142:	f00d f820 	bl	20186 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13146:	7863      	ldrb	r3, [r4, #1]
   13148:	9304      	str	r3, [sp, #16]
   1314a:	78a3      	ldrb	r3, [r4, #2]
   1314c:	9303      	str	r3, [sp, #12]
   1314e:	78e3      	ldrb	r3, [r4, #3]
   13150:	9302      	str	r3, [sp, #8]
   13152:	7923      	ldrb	r3, [r4, #4]
   13154:	9301      	str	r3, [sp, #4]
   13156:	7963      	ldrb	r3, [r4, #5]
   13158:	9300      	str	r3, [sp, #0]
   1315a:	4a0c      	ldr	r2, [pc, #48]	; (1318c <bt_addr_le_str_real+0x64>)
   1315c:	79a3      	ldrb	r3, [r4, #6]
   1315e:	9505      	str	r5, [sp, #20]
   13160:	211e      	movs	r1, #30
   13162:	480b      	ldr	r0, [pc, #44]	; (13190 <bt_addr_le_str_real+0x68>)
   13164:	f00a fdd5 	bl	1dd12 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   13168:	4809      	ldr	r0, [pc, #36]	; (13190 <bt_addr_le_str_real+0x68>)
   1316a:	b00b      	add	sp, #44	; 0x2c
   1316c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1316e:	4909      	ldr	r1, [pc, #36]	; (13194 <bt_addr_le_str_real+0x6c>)
   13170:	e7e6      	b.n	13140 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   13172:	4909      	ldr	r1, [pc, #36]	; (13198 <bt_addr_le_str_real+0x70>)
   13174:	e7e4      	b.n	13140 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   13176:	4909      	ldr	r1, [pc, #36]	; (1319c <bt_addr_le_str_real+0x74>)
   13178:	e7e2      	b.n	13140 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1317a:	4a09      	ldr	r2, [pc, #36]	; (131a0 <bt_addr_le_str_real+0x78>)
   1317c:	210a      	movs	r1, #10
   1317e:	4628      	mov	r0, r5
   13180:	f00a fdc7 	bl	1dd12 <snprintk>
		break;
   13184:	e7df      	b.n	13146 <bt_addr_le_str_real+0x1e>
   13186:	bf00      	nop
   13188:	00023f83 	.word	0x00023f83
   1318c:	00023fa5 	.word	0x00023fa5
   13190:	200021f7 	.word	0x200021f7
   13194:	00023f8a 	.word	0x00023f8a
   13198:	00023f91 	.word	0x00023f91
   1319c:	00023f9b 	.word	0x00023f9b
   131a0:	00025dcf 	.word	0x00025dcf

000131a4 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   131a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   131a8:	4b6a      	ldr	r3, [pc, #424]	; (13354 <ecc_thread+0x1b0>)
   131aa:	4d6b      	ldr	r5, [pc, #428]	; (13358 <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   131ac:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 13378 <ecc_thread+0x1d4>
	return z_impl_k_sem_take(sem, timeout);
   131b0:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 1337c <ecc_thread+0x1d8>
   131b4:	1aed      	subs	r5, r5, r3
   131b6:	08ed      	lsrs	r5, r5, #3
   131b8:	4647      	mov	r7, r8
   131ba:	f04f 32ff 	mov.w	r2, #4294967295
   131be:	f04f 33ff 	mov.w	r3, #4294967295
   131c2:	4648      	mov	r0, r9
   131c4:	f009 fc7c 	bl	1cac0 <z_impl_k_sem_take>
   131c8:	f3bf 8f5b 	dmb	ish
   131cc:	f8d8 4000 	ldr.w	r4, [r8]
   131d0:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   131d4:	f014 0401 	ands.w	r4, r4, #1
   131d8:	d05a      	beq.n	13290 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   131da:	f8df a194 	ldr.w	sl, [pc, #404]	; 13370 <ecc_thread+0x1cc>
   131de:	4c5f      	ldr	r4, [pc, #380]	; (1335c <ecc_thread+0x1b8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   131e0:	4e5f      	ldr	r6, [pc, #380]	; (13360 <ecc_thread+0x1bc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   131e2:	4860      	ldr	r0, [pc, #384]	; (13364 <ecc_thread+0x1c0>)
   131e4:	4652      	mov	r2, sl
   131e6:	4621      	mov	r1, r4
   131e8:	f00b fe99 	bl	1ef1e <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   131ec:	bbe8      	cbnz	r0, 1326a <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
   131ee:	01a9      	lsls	r1, r5, #6
   131f0:	485d      	ldr	r0, [pc, #372]	; (13368 <ecc_thread+0x1c4>)
   131f2:	f041 0101 	orr.w	r1, r1, #1
   131f6:	f00b f9c4 	bl	1e582 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   131fa:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   131fe:	f04f 32ff 	mov.w	r2, #4294967295
   13202:	f04f 33ff 	mov.w	r3, #4294967295
   13206:	2001      	movs	r0, #1
   13208:	f000 faea 	bl	137e0 <bt_buf_get_rx>
   1320c:	f100 0608 	add.w	r6, r0, #8
   13210:	2102      	movs	r1, #2
   13212:	4604      	mov	r4, r0
   13214:	4630      	mov	r0, r6
   13216:	f00f f93b 	bl	22490 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1321a:	233e      	movs	r3, #62	; 0x3e
   1321c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1321e:	2342      	movs	r3, #66	; 0x42
   13220:	7043      	strb	r3, [r0, #1]
   13222:	2101      	movs	r1, #1
   13224:	4630      	mov	r0, r6
   13226:	f00f f933 	bl	22490 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1322a:	2308      	movs	r3, #8
   1322c:	7003      	strb	r3, [r0, #0]
   1322e:	2141      	movs	r1, #65	; 0x41
   13230:	4630      	mov	r0, r6
   13232:	f00f f92d 	bl	22490 <net_buf_simple_add>
   13236:	4606      	mov	r6, r0
	evt->status = status;
   13238:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
   1323c:	f1ba 0f00 	cmp.w	sl, #0
   13240:	d01d      	beq.n	1327e <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
   13242:	2240      	movs	r2, #64	; 0x40
   13244:	2100      	movs	r1, #0
   13246:	f00d f821 	bl	2028c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1324a:	f3bf 8f5b 	dmb	ish
   1324e:	e857 3f00 	ldrex	r3, [r7]
   13252:	f023 0301 	bic.w	r3, r3, #1
   13256:	e847 3200 	strex	r2, r3, [r7]
   1325a:	2a00      	cmp	r2, #0
   1325c:	d1f7      	bne.n	1324e <ecc_thread+0xaa>
   1325e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   13262:	4620      	mov	r0, r4
	bt_recv(buf);
   13264:	f001 fc4e 	bl	14b04 <bt_recv>
	while (true) {
   13268:	e7a7      	b.n	131ba <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   1326a:	2220      	movs	r2, #32
   1326c:	4631      	mov	r1, r6
   1326e:	4620      	mov	r0, r4
   13270:	f00c ffd1 	bl	20216 <memcmp>
   13274:	2800      	cmp	r0, #0
   13276:	d0b4      	beq.n	131e2 <ecc_thread+0x3e>
	return 0;
   13278:	f04f 0a00 	mov.w	sl, #0
   1327c:	e7bf      	b.n	131fe <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
   1327e:	4939      	ldr	r1, [pc, #228]	; (13364 <ecc_thread+0x1c0>)
   13280:	f00d f89b 	bl	203ba <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
   13284:	4939      	ldr	r1, [pc, #228]	; (1336c <ecc_thread+0x1c8>)
   13286:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1328a:	f00d f896 	bl	203ba <sys_memcpy_swap.constprop.0>
   1328e:	e7dc      	b.n	1324a <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13290:	f3bf 8f5b 	dmb	ish
   13294:	f8d8 3000 	ldr.w	r3, [r8]
   13298:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   1329c:	079b      	lsls	r3, r3, #30
   1329e:	d58c      	bpl.n	131ba <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   132a0:	4933      	ldr	r1, [pc, #204]	; (13370 <ecc_thread+0x1cc>)
   132a2:	4830      	ldr	r0, [pc, #192]	; (13364 <ecc_thread+0x1c0>)
   132a4:	f00c fd0a 	bl	1fcbc <uECC_valid_public_key>
	if (ret < 0) {
   132a8:	1e01      	subs	r1, r0, #0
   132aa:	da38      	bge.n	1331e <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
   132ac:	01aa      	lsls	r2, r5, #6
   132ae:	4831      	ldr	r0, [pc, #196]	; (13374 <ecc_thread+0x1d0>)
   132b0:	f042 0201 	orr.w	r2, r2, #1
   132b4:	f00b f972 	bl	1e59c <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   132b8:	f04f 32ff 	mov.w	r2, #4294967295
   132bc:	f04f 33ff 	mov.w	r3, #4294967295
   132c0:	2001      	movs	r0, #1
   132c2:	f000 fa8d 	bl	137e0 <bt_buf_get_rx>
   132c6:	f100 0a08 	add.w	sl, r0, #8
   132ca:	2102      	movs	r1, #2
   132cc:	4606      	mov	r6, r0
   132ce:	4650      	mov	r0, sl
   132d0:	f00f f8de 	bl	22490 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   132d4:	233e      	movs	r3, #62	; 0x3e
   132d6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   132d8:	2322      	movs	r3, #34	; 0x22
   132da:	7043      	strb	r3, [r0, #1]
   132dc:	2101      	movs	r1, #1
   132de:	4650      	mov	r0, sl
   132e0:	f00f f8d6 	bl	22490 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   132e4:	2309      	movs	r3, #9
   132e6:	7003      	strb	r3, [r0, #0]
   132e8:	2121      	movs	r1, #33	; 0x21
   132ea:	4650      	mov	r0, sl
   132ec:	f00f f8d0 	bl	22490 <net_buf_simple_add>
   132f0:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   132f2:	3001      	adds	r0, #1
   132f4:	bb3c      	cbnz	r4, 13346 <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   132f6:	221f      	movs	r2, #31
   132f8:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   132fa:	21ff      	movs	r1, #255	; 0xff
   132fc:	2220      	movs	r2, #32
   132fe:	f00c ffc5 	bl	2028c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13302:	f3bf 8f5b 	dmb	ish
   13306:	e857 3f00 	ldrex	r3, [r7]
   1330a:	f023 0302 	bic.w	r3, r3, #2
   1330e:	e847 3200 	strex	r2, r3, [r7]
   13312:	2a00      	cmp	r2, #0
   13314:	d1f7      	bne.n	13306 <ecc_thread+0x162>
   13316:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1331a:	4630      	mov	r0, r6
   1331c:	e7a2      	b.n	13264 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
   1331e:	490f      	ldr	r1, [pc, #60]	; (1335c <ecc_thread+0x1b8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13320:	f3bf 8f5b 	dmb	ish
   13324:	f8d8 3000 	ldr.w	r3, [r8]
   13328:	480d      	ldr	r0, [pc, #52]	; (13360 <ecc_thread+0x1bc>)
   1332a:	f3bf 8f5b 	dmb	ish
   1332e:	f013 0f04 	tst.w	r3, #4
   13332:	f101 0220 	add.w	r2, r1, #32
   13336:	4b0e      	ldr	r3, [pc, #56]	; (13370 <ecc_thread+0x1cc>)
   13338:	bf18      	it	ne
   1333a:	4601      	movne	r1, r0
   1333c:	4610      	mov	r0, r2
   1333e:	f00b fe3d 	bl	1efbc <uECC_shared_secret>
   13342:	4604      	mov	r4, r0
   13344:	e7b8      	b.n	132b8 <ecc_thread+0x114>
		evt->status = 0U;
   13346:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   13348:	4906      	ldr	r1, [pc, #24]	; (13364 <ecc_thread+0x1c0>)
		evt->status = 0U;
   1334a:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   1334c:	f00d f835 	bl	203ba <sys_memcpy_swap.constprop.0>
   13350:	e7d7      	b.n	13302 <ecc_thread+0x15e>
   13352:	bf00      	nop
   13354:	0002353c 	.word	0x0002353c
   13358:	00023584 	.word	0x00023584
   1335c:	20002215 	.word	0x20002215
   13360:	00024819 	.word	0x00024819
   13364:	20002235 	.word	0x20002235
   13368:	000247bd 	.word	0x000247bd
   1336c:	20002255 	.word	0x20002255
   13370:	000239d4 	.word	0x000239d4
   13374:	000247e6 	.word	0x000247e6
   13378:	20001ec0 	.word	0x20001ec0
   1337c:	2000075c 	.word	0x2000075c

00013380 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   13380:	b570      	push	{r4, r5, r6, lr}
   13382:	4c21      	ldr	r4, [pc, #132]	; (13408 <le_gen_dhkey+0x88>)
   13384:	f3bf 8f5b 	dmb	ish
   13388:	6823      	ldr	r3, [r4, #0]
   1338a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   1338e:	07da      	lsls	r2, r3, #31
{
   13390:	4606      	mov	r6, r0
   13392:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   13394:	d501      	bpl.n	1339a <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13396:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   13398:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   1339a:	2901      	cmp	r1, #1
   1339c:	d831      	bhi.n	13402 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1339e:	f3bf 8f5b 	dmb	ish
   133a2:	e854 3f00 	ldrex	r3, [r4]
   133a6:	f043 0202 	orr.w	r2, r3, #2
   133aa:	e844 2100 	strex	r1, r2, [r4]
   133ae:	2900      	cmp	r1, #0
   133b0:	d1f7      	bne.n	133a2 <le_gen_dhkey+0x22>
   133b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   133b6:	079b      	lsls	r3, r3, #30
   133b8:	d4ed      	bmi.n	13396 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
   133ba:	4814      	ldr	r0, [pc, #80]	; (1340c <le_gen_dhkey+0x8c>)
   133bc:	4631      	mov	r1, r6
   133be:	f00c fffc 	bl	203ba <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
   133c2:	4813      	ldr	r0, [pc, #76]	; (13410 <le_gen_dhkey+0x90>)
   133c4:	f106 0120 	add.w	r1, r6, #32
   133c8:	f00c fff7 	bl	203ba <sys_memcpy_swap.constprop.0>
   133cc:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   133d0:	b175      	cbz	r5, 133f0 <le_gen_dhkey+0x70>
   133d2:	e854 3f00 	ldrex	r3, [r4]
   133d6:	f043 0304 	orr.w	r3, r3, #4
   133da:	e844 3200 	strex	r2, r3, [r4]
   133de:	2a00      	cmp	r2, #0
   133e0:	d1f7      	bne.n	133d2 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133e2:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   133e6:	480b      	ldr	r0, [pc, #44]	; (13414 <le_gen_dhkey+0x94>)
   133e8:	f009 fb44 	bl	1ca74 <z_impl_k_sem_give>
   133ec:	2000      	movs	r0, #0
   133ee:	e7d3      	b.n	13398 <le_gen_dhkey+0x18>
   133f0:	e854 3f00 	ldrex	r3, [r4]
   133f4:	f023 0304 	bic.w	r3, r3, #4
   133f8:	e844 3200 	strex	r2, r3, [r4]
   133fc:	2a00      	cmp	r2, #0
   133fe:	d0f0      	beq.n	133e2 <le_gen_dhkey+0x62>
   13400:	e7f6      	b.n	133f0 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   13402:	2012      	movs	r0, #18
   13404:	e7c8      	b.n	13398 <le_gen_dhkey+0x18>
   13406:	bf00      	nop
   13408:	20001ec0 	.word	0x20001ec0
   1340c:	20002235 	.word	0x20002235
   13410:	20002255 	.word	0x20002255
   13414:	2000075c 	.word	0x2000075c

00013418 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   13418:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1341a:	7d06      	ldrb	r6, [r0, #20]
   1341c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   1341e:	b976      	cbnz	r6, 1343e <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   13420:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   13422:	881d      	ldrh	r5, [r3, #0]
   13424:	f242 0226 	movw	r2, #8230	; 0x2026
   13428:	4295      	cmp	r5, r2
   1342a:	d045      	beq.n	134b8 <bt_hci_ecc_send+0xa0>
   1342c:	d80f      	bhi.n	1344e <bt_hci_ecc_send+0x36>
   1342e:	f242 0201 	movw	r2, #8193	; 0x2001
   13432:	4295      	cmp	r5, r2
   13434:	d04f      	beq.n	134d6 <bt_hci_ecc_send+0xbe>
   13436:	f242 0325 	movw	r3, #8229	; 0x2025
   1343a:	429d      	cmp	r5, r3
   1343c:	d013      	beq.n	13466 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   1343e:	4b2a      	ldr	r3, [pc, #168]	; (134e8 <bt_hci_ecc_send+0xd0>)
   13440:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   13444:	4620      	mov	r0, r4
   13446:	691b      	ldr	r3, [r3, #16]
}
   13448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   1344c:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   1344e:	f242 035e 	movw	r3, #8286	; 0x205e
   13452:	429d      	cmp	r5, r3
   13454:	d1f3      	bne.n	1343e <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   13456:	2103      	movs	r1, #3
   13458:	3008      	adds	r0, #8
   1345a:	f00f f838 	bl	224ce <net_buf_simple_pull>
	cmd = (void *)buf->data;
   1345e:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   13460:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   13464:	e02e      	b.n	134c4 <bt_hci_ecc_send+0xac>
   13466:	2103      	movs	r1, #3
   13468:	3008      	adds	r0, #8
   1346a:	f00f f830 	bl	224ce <net_buf_simple_pull>
	net_buf_unref(buf);
   1346e:	4620      	mov	r0, r4
   13470:	f007 fbd4 	bl	1ac1c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13474:	f3bf 8f5b 	dmb	ish
   13478:	4b1c      	ldr	r3, [pc, #112]	; (134ec <bt_hci_ecc_send+0xd4>)
   1347a:	681a      	ldr	r2, [r3, #0]
   1347c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   13480:	0792      	lsls	r2, r2, #30
   13482:	d507      	bpl.n	13494 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   13484:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   13486:	4631      	mov	r1, r6
   13488:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   1348c:	f00c ff71 	bl	20372 <send_cmd_status>
}
   13490:	2000      	movs	r0, #0
   13492:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13494:	f3bf 8f5b 	dmb	ish
   13498:	e853 2f00 	ldrex	r2, [r3]
   1349c:	f042 0101 	orr.w	r1, r2, #1
   134a0:	e843 1000 	strex	r0, r1, [r3]
   134a4:	2800      	cmp	r0, #0
   134a6:	d1f7      	bne.n	13498 <bt_hci_ecc_send+0x80>
   134a8:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   134ac:	07d3      	lsls	r3, r2, #31
   134ae:	d4e9      	bmi.n	13484 <bt_hci_ecc_send+0x6c>
   134b0:	480f      	ldr	r0, [pc, #60]	; (134f0 <bt_hci_ecc_send+0xd8>)
   134b2:	f009 fadf 	bl	1ca74 <z_impl_k_sem_give>
}
   134b6:	e7e6      	b.n	13486 <bt_hci_ecc_send+0x6e>
   134b8:	2103      	movs	r1, #3
   134ba:	3008      	adds	r0, #8
   134bc:	f00f f807 	bl	224ce <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   134c0:	68a0      	ldr	r0, [r4, #8]
   134c2:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   134c4:	f7ff ff5c 	bl	13380 <le_gen_dhkey>
   134c8:	4606      	mov	r6, r0
	net_buf_unref(buf);
   134ca:	4620      	mov	r0, r4
   134cc:	f007 fba6 	bl	1ac1c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   134d0:	4631      	mov	r1, r6
   134d2:	4628      	mov	r0, r5
   134d4:	e7da      	b.n	1348c <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   134d6:	78da      	ldrb	r2, [r3, #3]
   134d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   134dc:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   134de:	791a      	ldrb	r2, [r3, #4]
   134e0:	f022 0201 	bic.w	r2, r2, #1
   134e4:	711a      	strb	r2, [r3, #4]
}
   134e6:	e7aa      	b.n	1343e <bt_hci_ecc_send+0x26>
   134e8:	200002a0 	.word	0x200002a0
   134ec:	20001ec0 	.word	0x20001ec0
   134f0:	2000075c 	.word	0x2000075c

000134f4 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   134f4:	b510      	push	{r4, lr}
   134f6:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   134f8:	4c0c      	ldr	r4, [pc, #48]	; (1352c <bt_hci_ecc_init+0x38>)
   134fa:	490d      	ldr	r1, [pc, #52]	; (13530 <bt_hci_ecc_init+0x3c>)
   134fc:	2200      	movs	r2, #0
   134fe:	2300      	movs	r3, #0
   13500:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13504:	2300      	movs	r3, #0
   13506:	220a      	movs	r2, #10
   13508:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1350c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   13510:	9300      	str	r3, [sp, #0]
   13512:	f44f 628f 	mov.w	r2, #1144	; 0x478
   13516:	4b07      	ldr	r3, [pc, #28]	; (13534 <bt_hci_ecc_init+0x40>)
   13518:	4620      	mov	r0, r4
   1351a:	f009 f919 	bl	1c750 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1351e:	4906      	ldr	r1, [pc, #24]	; (13538 <bt_hci_ecc_init+0x44>)
   13520:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   13522:	b008      	add	sp, #32
   13524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13528:	f00f b9da 	b.w	228e0 <z_impl_k_thread_name_set>
   1352c:	200014c8 	.word	0x200014c8
   13530:	20002d60 	.word	0x20002d60
   13534:	000131a5 	.word	0x000131a5
   13538:	00024807 	.word	0x00024807

0001353c <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   1353c:	b510      	push	{r4, lr}
   1353e:	4b0d      	ldr	r3, [pc, #52]	; (13574 <save_id+0x38>)
   13540:	4c0d      	ldr	r4, [pc, #52]	; (13578 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
   13542:	480e      	ldr	r0, [pc, #56]	; (1357c <save_id+0x40>)
   13544:	1ae4      	subs	r4, r4, r3
   13546:	08e4      	lsrs	r4, r4, #3
   13548:	01a4      	lsls	r4, r4, #6
   1354a:	f044 0103 	orr.w	r1, r4, #3
   1354e:	f00b f818 	bl	1e582 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   13552:	490b      	ldr	r1, [pc, #44]	; (13580 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   13554:	480b      	ldr	r0, [pc, #44]	; (13584 <save_id+0x48>)
   13556:	79ca      	ldrb	r2, [r1, #7]
   13558:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1355c:	f7fe f9b0 	bl	118c0 <settings_save_one>
	if (err) {
   13560:	4601      	mov	r1, r0
   13562:	b130      	cbz	r0, 13572 <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
   13564:	f044 0201 	orr.w	r2, r4, #1
   13568:	4807      	ldr	r0, [pc, #28]	; (13588 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   1356a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   1356e:	f00b b815 	b.w	1e59c <log_1>
}
   13572:	bd10      	pop	{r4, pc}
   13574:	0002353c 	.word	0x0002353c
   13578:	000235ac 	.word	0x000235ac
   1357c:	00024839 	.word	0x00024839
   13580:	200002a0 	.word	0x200002a0
   13584:	00024843 	.word	0x00024843
   13588:	00024849 	.word	0x00024849

0001358c <set>:
{
   1358c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1358e:	4616      	mov	r6, r2
   13590:	461f      	mov	r7, r3
	if (!name) {
   13592:	4604      	mov	r4, r0
   13594:	b960      	cbnz	r0, 135b0 <set+0x24>
   13596:	4925      	ldr	r1, [pc, #148]	; (1362c <set+0xa0>)
   13598:	4b25      	ldr	r3, [pc, #148]	; (13630 <set+0xa4>)
		BT_ERR("Insufficient number of arguments");
   1359a:	4826      	ldr	r0, [pc, #152]	; (13634 <set+0xa8>)
   1359c:	1ac9      	subs	r1, r1, r3
   1359e:	08c9      	lsrs	r1, r1, #3
   135a0:	0189      	lsls	r1, r1, #6
   135a2:	f041 0101 	orr.w	r1, r1, #1
   135a6:	f00a ffec 	bl	1e582 <log_0>
	return -ENOENT;
   135aa:	f06f 0401 	mvn.w	r4, #1
   135ae:	e01c      	b.n	135ea <set+0x5e>
	len = settings_name_next(name, &next);
   135b0:	a901      	add	r1, sp, #4
   135b2:	f00b fb3c 	bl	1ec2e <settings_name_next>
	if (!strncmp(name, "id", len)) {
   135b6:	4920      	ldr	r1, [pc, #128]	; (13638 <set+0xac>)
	len = settings_name_next(name, &next);
   135b8:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   135ba:	4620      	mov	r0, r4
   135bc:	f00c fe1c 	bl	201f8 <strncmp>
   135c0:	4604      	mov	r4, r0
   135c2:	2800      	cmp	r0, #0
   135c4:	d1f1      	bne.n	135aa <set+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   135c6:	f3bf 8f5b 	dmb	ish
   135ca:	4d1c      	ldr	r5, [pc, #112]	; (1363c <set+0xb0>)
   135cc:	682b      	ldr	r3, [r5, #0]
   135ce:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   135d2:	075b      	lsls	r3, r3, #29
   135d4:	d50c      	bpl.n	135f0 <set+0x64>
   135d6:	4915      	ldr	r1, [pc, #84]	; (1362c <set+0xa0>)
   135d8:	4b15      	ldr	r3, [pc, #84]	; (13630 <set+0xa4>)
			BT_WARN("Ignoring identities stored in flash");
   135da:	4819      	ldr	r0, [pc, #100]	; (13640 <set+0xb4>)
   135dc:	1ac9      	subs	r1, r1, r3
   135de:	08c9      	lsrs	r1, r1, #3
   135e0:	0189      	lsls	r1, r1, #6
   135e2:	f041 0102 	orr.w	r1, r1, #2
   135e6:	f00a ffcc 	bl	1e582 <log_0>
}
   135ea:	4620      	mov	r0, r4
   135ec:	b003      	add	sp, #12
   135ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   135f0:	3d98      	subs	r5, #152	; 0x98
   135f2:	2207      	movs	r2, #7
   135f4:	4629      	mov	r1, r5
   135f6:	4638      	mov	r0, r7
   135f8:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   135fa:	2806      	cmp	r0, #6
   135fc:	d810      	bhi.n	13620 <set+0x94>
   135fe:	4b0c      	ldr	r3, [pc, #48]	; (13630 <set+0xa4>)
   13600:	490a      	ldr	r1, [pc, #40]	; (1362c <set+0xa0>)
				BT_ERR("Invalid length ID address in storage");
   13602:	4810      	ldr	r0, [pc, #64]	; (13644 <set+0xb8>)
   13604:	1ac9      	subs	r1, r1, r3
   13606:	08c9      	lsrs	r1, r1, #3
   13608:	0189      	lsls	r1, r1, #6
   1360a:	f041 0101 	orr.w	r1, r1, #1
   1360e:	f00a ffb8 	bl	1e582 <log_0>
			(void)memset(bt_dev.id_addr, 0,
   13612:	2207      	movs	r2, #7
   13614:	4621      	mov	r1, r4
   13616:	4628      	mov	r0, r5
   13618:	f00c fe38 	bl	2028c <memset>
			bt_dev.id_count = 0U;
   1361c:	71ec      	strb	r4, [r5, #7]
   1361e:	e7e4      	b.n	135ea <set+0x5e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   13620:	2307      	movs	r3, #7
   13622:	fbb0 f0f3 	udiv	r0, r0, r3
   13626:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   13628:	e7df      	b.n	135ea <set+0x5e>
   1362a:	bf00      	nop
   1362c:	000235ac 	.word	0x000235ac
   13630:	0002353c 	.word	0x0002353c
   13634:	00024864 	.word	0x00024864
   13638:	00023f98 	.word	0x00023f98
   1363c:	20000338 	.word	0x20000338
   13640:	00024885 	.word	0x00024885
   13644:	000248a9 	.word	0x000248a9

00013648 <bt_settings_encode_key>:
{
   13648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1364c:	b088      	sub	sp, #32
   1364e:	799c      	ldrb	r4, [r3, #6]
   13650:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   13654:	795d      	ldrb	r5, [r3, #5]
   13656:	791e      	ldrb	r6, [r3, #4]
   13658:	78df      	ldrb	r7, [r3, #3]
   1365a:	f893 c002 	ldrb.w	ip, [r3, #2]
   1365e:	f893 e001 	ldrb.w	lr, [r3, #1]
   13662:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   13664:	f1b8 0f00 	cmp.w	r8, #0
   13668:	d00e      	beq.n	13688 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   1366a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1366e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   13672:	4613      	mov	r3, r2
   13674:	e9cd 6702 	strd	r6, r7, [sp, #8]
   13678:	e9cd 4500 	strd	r4, r5, [sp]
   1367c:	4a08      	ldr	r2, [pc, #32]	; (136a0 <bt_settings_encode_key+0x58>)
   1367e:	f00a fb48 	bl	1dd12 <snprintk>
}
   13682:	b008      	add	sp, #32
   13684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   13688:	e9cd e305 	strd	lr, r3, [sp, #20]
   1368c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   13690:	4613      	mov	r3, r2
   13692:	e9cd 5601 	strd	r5, r6, [sp, #4]
   13696:	4a03      	ldr	r2, [pc, #12]	; (136a4 <bt_settings_encode_key+0x5c>)
   13698:	9400      	str	r4, [sp, #0]
   1369a:	f00a fb3a 	bl	1dd12 <snprintk>
}
   1369e:	e7f0      	b.n	13682 <bt_settings_encode_key+0x3a>
   136a0:	000248ce 	.word	0x000248ce
   136a4:	000248f2 	.word	0x000248f2

000136a8 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   136a8:	4801      	ldr	r0, [pc, #4]	; (136b0 <bt_settings_save_id+0x8>)
   136aa:	f009 bb7b 	b.w	1cda4 <k_work_submit>
   136ae:	bf00      	nop
   136b0:	20000494 	.word	0x20000494

000136b4 <commit>:
}

static int commit(void)
{
   136b4:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   136b6:	4c1a      	ldr	r4, [pc, #104]	; (13720 <commit+0x6c>)
   136b8:	79e3      	ldrb	r3, [r4, #7]
   136ba:	b99b      	cbnz	r3, 136e4 <commit+0x30>
		bt_setup_public_id_addr();
   136bc:	f001 fe20 	bl	15300 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
   136c0:	79e3      	ldrb	r3, [r4, #7]
   136c2:	b97b      	cbnz	r3, 136e4 <commit+0x30>
		int err;

		err = bt_setup_random_id_addr();
   136c4:	f001 fe86 	bl	153d4 <bt_setup_random_id_addr>
		if (err) {
   136c8:	4604      	mov	r4, r0
   136ca:	b158      	cbz	r0, 136e4 <commit+0x30>
   136cc:	4915      	ldr	r1, [pc, #84]	; (13724 <commit+0x70>)
   136ce:	4b16      	ldr	r3, [pc, #88]	; (13728 <commit+0x74>)
			BT_ERR("Unable to setup an identity address");
   136d0:	4816      	ldr	r0, [pc, #88]	; (1372c <commit+0x78>)
   136d2:	1ac9      	subs	r1, r1, r3
   136d4:	08c9      	lsrs	r1, r1, #3
   136d6:	0189      	lsls	r1, r1, #6
   136d8:	f041 0101 	orr.w	r1, r1, #1
   136dc:	f00a ff51 	bl	1e582 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   136e0:	4620      	mov	r0, r4
   136e2:	bd38      	pop	{r3, r4, r5, pc}
   136e4:	4d12      	ldr	r5, [pc, #72]	; (13730 <commit+0x7c>)
   136e6:	f3bf 8f5b 	dmb	ish
   136ea:	682b      	ldr	r3, [r5, #0]
   136ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   136f0:	079b      	lsls	r3, r3, #30
   136f2:	d401      	bmi.n	136f8 <commit+0x44>
		bt_finalize_init();
   136f4:	f001 fa4e 	bl	14b94 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   136f8:	f3bf 8f5b 	dmb	ish
   136fc:	e855 4f00 	ldrex	r4, [r5]
   13700:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
   13704:	e845 3200 	strex	r2, r3, [r5]
   13708:	2a00      	cmp	r2, #0
   1370a:	d1f7      	bne.n	136fc <commit+0x48>
   1370c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   13710:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   13714:	d0e4      	beq.n	136e0 <commit+0x2c>
		bt_settings_save_id();
   13716:	f7ff ffc7 	bl	136a8 <bt_settings_save_id>
	return 0;
   1371a:	2400      	movs	r4, #0
   1371c:	e7e0      	b.n	136e0 <commit+0x2c>
   1371e:	bf00      	nop
   13720:	200002a0 	.word	0x200002a0
   13724:	000235ac 	.word	0x000235ac
   13728:	0002353c 	.word	0x0002353c
   1372c:	00024913 	.word	0x00024913
   13730:	20000338 	.word	0x20000338

00013734 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   13734:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   13736:	f7fe fa2f 	bl	11b98 <settings_subsys_init>
	if (err) {
   1373a:	4604      	mov	r4, r0
   1373c:	b150      	cbz	r0, 13754 <bt_settings_init+0x20>
   1373e:	4a06      	ldr	r2, [pc, #24]	; (13758 <bt_settings_init+0x24>)
   13740:	4b06      	ldr	r3, [pc, #24]	; (1375c <bt_settings_init+0x28>)
   13742:	1ad2      	subs	r2, r2, r3
   13744:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
   13746:	0192      	lsls	r2, r2, #6
   13748:	4601      	mov	r1, r0
   1374a:	f042 0201 	orr.w	r2, r2, #1
   1374e:	4804      	ldr	r0, [pc, #16]	; (13760 <bt_settings_init+0x2c>)
   13750:	f00a ff24 	bl	1e59c <log_1>
		return err;
	}

	return 0;
}
   13754:	4620      	mov	r0, r4
   13756:	bd10      	pop	{r4, pc}
   13758:	000235ac 	.word	0x000235ac
   1375c:	0002353c 	.word	0x0002353c
   13760:	00024937 	.word	0x00024937

00013764 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   13764:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   13766:	7802      	ldrb	r2, [r0, #0]
   13768:	2a01      	cmp	r2, #1
{
   1376a:	4604      	mov	r4, r0
   1376c:	460b      	mov	r3, r1
	switch (src->type) {
   1376e:	d016      	beq.n	1379e <uuid_to_uuid128+0x3a>
   13770:	2a02      	cmp	r2, #2
   13772:	d02c      	beq.n	137ce <uuid_to_uuid128+0x6a>
   13774:	b98a      	cbnz	r2, 1379a <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13776:	4a19      	ldr	r2, [pc, #100]	; (137dc <uuid_to_uuid128+0x78>)
   13778:	460d      	mov	r5, r1
   1377a:	f102 0710 	add.w	r7, r2, #16
   1377e:	6810      	ldr	r0, [r2, #0]
   13780:	6851      	ldr	r1, [r2, #4]
   13782:	462e      	mov	r6, r5
   13784:	c603      	stmia	r6!, {r0, r1}
   13786:	3208      	adds	r2, #8
   13788:	42ba      	cmp	r2, r7
   1378a:	4635      	mov	r5, r6
   1378c:	d1f7      	bne.n	1377e <uuid_to_uuid128+0x1a>
   1378e:	7812      	ldrb	r2, [r2, #0]
   13790:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13792:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   13794:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   13796:	0a12      	lsrs	r2, r2, #8
   13798:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1379a:	bcf0      	pop	{r4, r5, r6, r7}
   1379c:	4770      	bx	lr
		*dst = uuid128_base;
   1379e:	4a0f      	ldr	r2, [pc, #60]	; (137dc <uuid_to_uuid128+0x78>)
   137a0:	460d      	mov	r5, r1
   137a2:	f102 0710 	add.w	r7, r2, #16
   137a6:	6810      	ldr	r0, [r2, #0]
   137a8:	6851      	ldr	r1, [r2, #4]
   137aa:	462e      	mov	r6, r5
   137ac:	c603      	stmia	r6!, {r0, r1}
   137ae:	3208      	adds	r2, #8
   137b0:	42ba      	cmp	r2, r7
   137b2:	4635      	mov	r5, r6
   137b4:	d1f7      	bne.n	137a6 <uuid_to_uuid128+0x42>
   137b6:	7812      	ldrb	r2, [r2, #0]
   137b8:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   137ba:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   137bc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   137be:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   137c2:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   137c4:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   137c6:	0a12      	lsrs	r2, r2, #8
   137c8:	7399      	strb	r1, [r3, #14]
   137ca:	741a      	strb	r2, [r3, #16]
}
   137cc:	e7e5      	b.n	1379a <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   137ce:	4601      	mov	r1, r0
}
   137d0:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   137d2:	2211      	movs	r2, #17
   137d4:	4618      	mov	r0, r3
   137d6:	f00c bd2e 	b.w	20236 <memcpy>
   137da:	bf00      	nop
   137dc:	0002496b 	.word	0x0002496b

000137e0 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   137e0:	b538      	push	{r3, r4, r5, lr}
   137e2:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   137e4:	4805      	ldr	r0, [pc, #20]	; (137fc <bt_buf_get_rx+0x1c>)
   137e6:	f00e fdfd 	bl	223e4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   137ea:	4604      	mov	r4, r0
   137ec:	b120      	cbz	r0, 137f8 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   137ee:	2100      	movs	r1, #0
   137f0:	3008      	adds	r0, #8
   137f2:	f00e fe16 	bl	22422 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   137f6:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   137f8:	4620      	mov	r0, r4
   137fa:	bd38      	pop	{r3, r4, r5, pc}
   137fc:	2000088c 	.word	0x2000088c

00013800 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13800:	b570      	push	{r4, r5, r6, lr}
   13802:	4602      	mov	r2, r0
   13804:	460b      	mov	r3, r1
	__asm__ volatile(
   13806:	f04f 0140 	mov.w	r1, #64	; 0x40
   1380a:	f3ef 8511 	mrs	r5, BASEPRI
   1380e:	f381 8811 	msr	BASEPRI, r1
   13812:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   13816:	480c      	ldr	r0, [pc, #48]	; (13848 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   13818:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   1381a:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   1381e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
   13822:	f385 8811 	msr	BASEPRI, r5
   13826:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   1382a:	b924      	cbnz	r4, 13836 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1382c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13830:	2001      	movs	r0, #1
   13832:	f7ff bfd5 	b.w	137e0 <bt_buf_get_rx>
   13836:	2301      	movs	r3, #1
   13838:	f104 0008 	add.w	r0, r4, #8
   1383c:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   1383e:	81a1      	strh	r1, [r4, #12]
   13840:	f00e fdef 	bl	22422 <net_buf_simple_reserve>
}
   13844:	4620      	mov	r0, r4
   13846:	bd70      	pop	{r4, r5, r6, pc}
   13848:	200002a0 	.word	0x200002a0

0001384c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1384c:	b570      	push	{r4, r5, r6, lr}
   1384e:	4604      	mov	r4, r0
	switch (evt) {
   13850:	2c0f      	cmp	r4, #15
{
   13852:	460d      	mov	r5, r1
   13854:	4610      	mov	r0, r2
   13856:	4619      	mov	r1, r3
	switch (evt) {
   13858:	d805      	bhi.n	13866 <bt_buf_get_evt+0x1a>
   1385a:	2c0d      	cmp	r4, #13
   1385c:	d912      	bls.n	13884 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1385e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13862:	f7ff bfcd 	b.w	13800 <bt_buf_get_cmd_complete>
	switch (evt) {
   13866:	2c13      	cmp	r4, #19
   13868:	d10c      	bne.n	13884 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   1386a:	480b      	ldr	r0, [pc, #44]	; (13898 <bt_buf_get_evt+0x4c>)
   1386c:	f00e fdba 	bl	223e4 <net_buf_alloc_fixed>
			if (buf) {
   13870:	4604      	mov	r4, r0
   13872:	b128      	cbz	r0, 13880 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   13874:	2100      	movs	r1, #0
   13876:	3008      	adds	r0, #8
   13878:	f00e fdd3 	bl	22422 <net_buf_simple_reserve>
   1387c:	2301      	movs	r3, #1
   1387e:	7523      	strb	r3, [r4, #20]
}
   13880:	4620      	mov	r0, r4
   13882:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   13884:	4602      	mov	r2, r0
   13886:	460b      	mov	r3, r1
		if (discardable) {
   13888:	b10d      	cbz	r5, 1388e <bt_buf_get_evt+0x42>
   1388a:	4804      	ldr	r0, [pc, #16]	; (1389c <bt_buf_get_evt+0x50>)
   1388c:	e7ee      	b.n	1386c <bt_buf_get_evt+0x20>
}
   1388e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13892:	2001      	movs	r0, #1
   13894:	f7ff bfa4 	b.w	137e0 <bt_buf_get_rx>
   13898:	200008b4 	.word	0x200008b4
   1389c:	20000814 	.word	0x20000814

000138a0 <ver_str>:
{
   138a0:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   138a2:	4d0b      	ldr	r5, [pc, #44]	; (138d0 <ver_str+0x30>)
{
   138a4:	4606      	mov	r6, r0
	const char * const str[] = {
   138a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   138a8:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
   138aa:	466c      	mov	r4, sp
   138ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   138ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   138b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   138b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   138b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   138ba:	2e0b      	cmp	r6, #11
		return str[ver];
   138bc:	bf9b      	ittet	ls
   138be:	ab0c      	addls	r3, sp, #48	; 0x30
   138c0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   138c4:	4803      	ldrhi	r0, [pc, #12]	; (138d4 <ver_str+0x34>)
		return str[ver];
   138c6:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
   138ca:	b00c      	add	sp, #48	; 0x30
   138cc:	bd70      	pop	{r4, r5, r6, pc}
   138ce:	bf00      	nop
   138d0:	000236c0 	.word	0x000236c0
   138d4:	00024a6e 	.word	0x00024a6e

000138d8 <hci_data_buf_overflow>:
   138d8:	4905      	ldr	r1, [pc, #20]	; (138f0 <hci_data_buf_overflow+0x18>)
   138da:	4a06      	ldr	r2, [pc, #24]	; (138f4 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   138dc:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   138de:	4806      	ldr	r0, [pc, #24]	; (138f8 <hci_data_buf_overflow+0x20>)
   138e0:	1a52      	subs	r2, r2, r1
   138e2:	08d2      	lsrs	r2, r2, #3
   138e4:	0192      	lsls	r2, r2, #6
   138e6:	7819      	ldrb	r1, [r3, #0]
   138e8:	f042 0202 	orr.w	r2, r2, #2
   138ec:	f00a be56 	b.w	1e59c <log_1>
   138f0:	0002353c 	.word	0x0002353c
   138f4:	0002357c 	.word	0x0002357c
   138f8:	00024a76 	.word	0x00024a76

000138fc <hci_disconn_complete_prio>:
{
   138fc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   138fe:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   13900:	781a      	ldrb	r2, [r3, #0]
   13902:	b972      	cbnz	r2, 13922 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13904:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   13908:	4620      	mov	r0, r4
   1390a:	f002 fc65 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   1390e:	4605      	mov	r5, r0
   13910:	b940      	cbnz	r0, 13924 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   13912:	4b08      	ldr	r3, [pc, #32]	; (13934 <hci_disconn_complete_prio+0x38>)
   13914:	881a      	ldrh	r2, [r3, #0]
   13916:	b922      	cbnz	r2, 13922 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13918:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   1391c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13920:	8018      	strh	r0, [r3, #0]
}
   13922:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13924:	2101      	movs	r1, #1
   13926:	f002 fc63 	bl	161f0 <bt_conn_set_state>
	bt_conn_unref(conn);
   1392a:	4628      	mov	r0, r5
}
   1392c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13930:	f00d b973 	b.w	20c1a <bt_conn_unref>
   13934:	20002154 	.word	0x20002154

00013938 <hci_disconn_complete>:
{
   13938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1393a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1393c:	7835      	ldrb	r5, [r6, #0]
   1393e:	b9f5      	cbnz	r5, 1397e <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13940:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   13944:	4638      	mov	r0, r7
   13946:	f002 fc47 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   1394a:	4604      	mov	r4, r0
   1394c:	b960      	cbnz	r0, 13968 <hci_disconn_complete+0x30>
   1394e:	4b0c      	ldr	r3, [pc, #48]	; (13980 <hci_disconn_complete+0x48>)
   13950:	4a0c      	ldr	r2, [pc, #48]	; (13984 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   13952:	480d      	ldr	r0, [pc, #52]	; (13988 <hci_disconn_complete+0x50>)
   13954:	1ad2      	subs	r2, r2, r3
   13956:	08d2      	lsrs	r2, r2, #3
   13958:	0192      	lsls	r2, r2, #6
   1395a:	4639      	mov	r1, r7
   1395c:	f042 0201 	orr.w	r2, r2, #1
}
   13960:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   13964:	f00a be1a 	b.w	1e59c <log_1>
	conn->err = evt->reason;
   13968:	78f3      	ldrb	r3, [r6, #3]
   1396a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1396c:	4629      	mov	r1, r5
   1396e:	f002 fc3f 	bl	161f0 <bt_conn_set_state>
	conn->handle = 0U;
   13972:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   13974:	4620      	mov	r0, r4
}
   13976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1397a:	f00d b94e 	b.w	20c1a <bt_conn_unref>
}
   1397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13980:	0002353c 	.word	0x0002353c
   13984:	0002357c 	.word	0x0002357c
   13988:	00024a9e 	.word	0x00024a9e

0001398c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1398c:	6883      	ldr	r3, [r0, #8]
{
   1398e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13990:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   13992:	4620      	mov	r0, r4
   13994:	f002 fc20 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   13998:	b960      	cbnz	r0, 139b4 <le_data_len_change+0x28>
   1399a:	4a08      	ldr	r2, [pc, #32]	; (139bc <le_data_len_change+0x30>)
   1399c:	4b08      	ldr	r3, [pc, #32]	; (139c0 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1399e:	4809      	ldr	r0, [pc, #36]	; (139c4 <le_data_len_change+0x38>)
   139a0:	1ad2      	subs	r2, r2, r3
   139a2:	08d2      	lsrs	r2, r2, #3
   139a4:	0192      	lsls	r2, r2, #6
   139a6:	4621      	mov	r1, r4
   139a8:	f042 0201 	orr.w	r2, r2, #1
}
   139ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   139b0:	f00a bdf4 	b.w	1e59c <log_1>
}
   139b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   139b8:	f00d b92f 	b.w	20c1a <bt_conn_unref>
   139bc:	0002357c 	.word	0x0002357c
   139c0:	0002353c 	.word	0x0002353c
   139c4:	00024ac4 	.word	0x00024ac4

000139c8 <hci_hardware_error>:
{
   139c8:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   139ca:	2101      	movs	r1, #1
   139cc:	3008      	adds	r0, #8
   139ce:	f00e fd86 	bl	224de <net_buf_simple_pull_mem>
   139d2:	4b06      	ldr	r3, [pc, #24]	; (139ec <hci_hardware_error+0x24>)
   139d4:	4a06      	ldr	r2, [pc, #24]	; (139f0 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   139d6:	7801      	ldrb	r1, [r0, #0]
   139d8:	4806      	ldr	r0, [pc, #24]	; (139f4 <hci_hardware_error+0x2c>)
   139da:	1ad2      	subs	r2, r2, r3
   139dc:	08d2      	lsrs	r2, r2, #3
   139de:	0192      	lsls	r2, r2, #6
}
   139e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   139e4:	f042 0201 	orr.w	r2, r2, #1
   139e8:	f00a bdd8 	b.w	1e59c <log_1>
   139ec:	0002353c 	.word	0x0002353c
   139f0:	0002357c 	.word	0x0002357c
   139f4:	00024ae8 	.word	0x00024ae8

000139f8 <hci_vendor_event>:
{
   139f8:	b510      	push	{r4, lr}
   139fa:	4a0a      	ldr	r2, [pc, #40]	; (13a24 <hci_vendor_event+0x2c>)
   139fc:	4c0a      	ldr	r4, [pc, #40]	; (13a28 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   139fe:	8981      	ldrh	r1, [r0, #12]
   13a00:	6880      	ldr	r0, [r0, #8]
   13a02:	1aa4      	subs	r4, r4, r2
   13a04:	f7ff fb6e 	bl	130e4 <bt_hex_real>
   13a08:	f7fd f8d6 	bl	10bb8 <z_log_strdup>
   13a0c:	08e4      	lsrs	r4, r4, #3
   13a0e:	01a4      	lsls	r4, r4, #6
   13a10:	f044 0402 	orr.w	r4, r4, #2
   13a14:	4601      	mov	r1, r0
   13a16:	4622      	mov	r2, r4
   13a18:	4804      	ldr	r0, [pc, #16]	; (13a2c <hci_vendor_event+0x34>)
}
   13a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   13a1e:	f00a bdbd 	b.w	1e59c <log_1>
   13a22:	bf00      	nop
   13a24:	0002353c 	.word	0x0002353c
   13a28:	0002357c 	.word	0x0002357c
   13a2c:	00024b0a 	.word	0x00024b0a

00013a30 <hci_encrypt_key_refresh_complete>:
{
   13a30:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   13a32:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   13a34:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   13a38:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   13a3a:	4630      	mov	r0, r6
   13a3c:	f002 fbcc 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   13a40:	4604      	mov	r4, r0
   13a42:	b960      	cbnz	r0, 13a5e <hci_encrypt_key_refresh_complete+0x2e>
   13a44:	4a1e      	ldr	r2, [pc, #120]	; (13ac0 <hci_encrypt_key_refresh_complete+0x90>)
   13a46:	4b1f      	ldr	r3, [pc, #124]	; (13ac4 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   13a48:	481f      	ldr	r0, [pc, #124]	; (13ac8 <hci_encrypt_key_refresh_complete+0x98>)
   13a4a:	1ad2      	subs	r2, r2, r3
   13a4c:	08d2      	lsrs	r2, r2, #3
   13a4e:	0192      	lsls	r2, r2, #6
   13a50:	4631      	mov	r1, r6
   13a52:	f042 0201 	orr.w	r2, r2, #1
}
   13a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   13a5a:	f00a bd9f 	b.w	1e59c <log_1>
	if (status) {
   13a5e:	b165      	cbz	r5, 13a7a <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
   13a60:	2d29      	cmp	r5, #41	; 0x29
   13a62:	bf96      	itet	ls
   13a64:	4b19      	ldrls	r3, [pc, #100]	; (13acc <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
   13a66:	2208      	movhi	r2, #8
   13a68:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   13a6a:	4629      	mov	r1, r5
   13a6c:	f002 fa40 	bl	15ef0 <bt_conn_security_changed>
	bt_conn_unref(conn);
   13a70:	4620      	mov	r0, r4
}
   13a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   13a76:	f00d b8d0 	b.w	20c1a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   13a7a:	7883      	ldrb	r3, [r0, #2]
   13a7c:	2b01      	cmp	r3, #1
   13a7e:	d107      	bne.n	13a90 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
   13a80:	f006 fdd2 	bl	1a628 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   13a84:	4620      	mov	r0, r4
   13a86:	f00c fd4c 	bl	20522 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   13a8a:	2800      	cmp	r0, #0
   13a8c:	bf08      	it	eq
   13a8e:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   13a90:	4b0e      	ldr	r3, [pc, #56]	; (13acc <hci_encrypt_key_refresh_complete+0x9c>)
   13a92:	4629      	mov	r1, r5
   13a94:	5d5a      	ldrb	r2, [r3, r5]
   13a96:	4620      	mov	r0, r4
   13a98:	f002 fa2a 	bl	15ef0 <bt_conn_security_changed>
	if (status) {
   13a9c:	2d00      	cmp	r5, #0
   13a9e:	d0e7      	beq.n	13a70 <hci_encrypt_key_refresh_complete+0x40>
   13aa0:	4b08      	ldr	r3, [pc, #32]	; (13ac4 <hci_encrypt_key_refresh_complete+0x94>)
   13aa2:	4907      	ldr	r1, [pc, #28]	; (13ac0 <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
   13aa4:	480a      	ldr	r0, [pc, #40]	; (13ad0 <hci_encrypt_key_refresh_complete+0xa0>)
   13aa6:	1ac9      	subs	r1, r1, r3
   13aa8:	08c9      	lsrs	r1, r1, #3
   13aaa:	0189      	lsls	r1, r1, #6
   13aac:	f041 0101 	orr.w	r1, r1, #1
   13ab0:	f00a fd67 	bl	1e582 <log_0>
		bt_conn_disconnect(conn, status);
   13ab4:	4629      	mov	r1, r5
   13ab6:	4620      	mov	r0, r4
   13ab8:	f00d f8ea 	bl	20c90 <bt_conn_disconnect>
   13abc:	e7d8      	b.n	13a70 <hci_encrypt_key_refresh_complete+0x40>
   13abe:	bf00      	nop
   13ac0:	0002357c 	.word	0x0002357c
   13ac4:	0002353c 	.word	0x0002353c
   13ac8:	00024a9e 	.word	0x00024a9e
   13acc:	000250c3 	.word	0x000250c3
   13ad0:	00024b2e 	.word	0x00024b2e

00013ad4 <hci_encrypt_change>:
{
   13ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   13ad6:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13ad8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   13adc:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   13ade:	4638      	mov	r0, r7
   13ae0:	f002 fb7a 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   13ae4:	4604      	mov	r4, r0
   13ae6:	b960      	cbnz	r0, 13b02 <hci_encrypt_change+0x2e>
   13ae8:	4b1f      	ldr	r3, [pc, #124]	; (13b68 <hci_encrypt_change+0x94>)
   13aea:	4a20      	ldr	r2, [pc, #128]	; (13b6c <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   13aec:	4820      	ldr	r0, [pc, #128]	; (13b70 <hci_encrypt_change+0x9c>)
   13aee:	1ad2      	subs	r2, r2, r3
   13af0:	08d2      	lsrs	r2, r2, #3
   13af2:	0192      	lsls	r2, r2, #6
   13af4:	4639      	mov	r1, r7
   13af6:	f042 0201 	orr.w	r2, r2, #1
}
   13afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   13afe:	f00a bd4d 	b.w	1e59c <log_1>
	if (status) {
   13b02:	b165      	cbz	r5, 13b1e <hci_encrypt_change+0x4a>
	switch (hci_err) {
   13b04:	2d29      	cmp	r5, #41	; 0x29
   13b06:	bf96      	itet	ls
   13b08:	4b1a      	ldrls	r3, [pc, #104]	; (13b74 <hci_encrypt_change+0xa0>)
	if (status) {
   13b0a:	2208      	movhi	r2, #8
   13b0c:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   13b0e:	4629      	mov	r1, r5
   13b10:	f002 f9ee 	bl	15ef0 <bt_conn_security_changed>
	bt_conn_unref(conn);
   13b14:	4620      	mov	r0, r4
}
   13b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   13b1a:	f00d b87e 	b.w	20c1a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   13b1e:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   13b20:	78f3      	ldrb	r3, [r6, #3]
   13b22:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   13b24:	2a01      	cmp	r2, #1
   13b26:	d108      	bne.n	13b3a <hci_encrypt_change+0x66>
		if (conn->encrypt) {
   13b28:	b10b      	cbz	r3, 13b2e <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   13b2a:	f006 fd7d 	bl	1a628 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   13b2e:	4620      	mov	r0, r4
   13b30:	f00c fcf7 	bl	20522 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   13b34:	2800      	cmp	r0, #0
   13b36:	bf08      	it	eq
   13b38:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   13b3a:	4b0e      	ldr	r3, [pc, #56]	; (13b74 <hci_encrypt_change+0xa0>)
   13b3c:	4629      	mov	r1, r5
   13b3e:	5d5a      	ldrb	r2, [r3, r5]
   13b40:	4620      	mov	r0, r4
   13b42:	f002 f9d5 	bl	15ef0 <bt_conn_security_changed>
	if (status) {
   13b46:	2d00      	cmp	r5, #0
   13b48:	d0e4      	beq.n	13b14 <hci_encrypt_change+0x40>
   13b4a:	4b07      	ldr	r3, [pc, #28]	; (13b68 <hci_encrypt_change+0x94>)
   13b4c:	4907      	ldr	r1, [pc, #28]	; (13b6c <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
   13b4e:	480a      	ldr	r0, [pc, #40]	; (13b78 <hci_encrypt_change+0xa4>)
   13b50:	1ac9      	subs	r1, r1, r3
   13b52:	08c9      	lsrs	r1, r1, #3
   13b54:	0189      	lsls	r1, r1, #6
   13b56:	f041 0101 	orr.w	r1, r1, #1
   13b5a:	f00a fd12 	bl	1e582 <log_0>
		bt_conn_disconnect(conn, status);
   13b5e:	4629      	mov	r1, r5
   13b60:	4620      	mov	r0, r4
   13b62:	f00d f895 	bl	20c90 <bt_conn_disconnect>
   13b66:	e7d5      	b.n	13b14 <hci_encrypt_change+0x40>
   13b68:	0002353c 	.word	0x0002353c
   13b6c:	0002357c 	.word	0x0002357c
   13b70:	00024a9e 	.word	0x00024a9e
   13b74:	000250c3 	.word	0x000250c3
   13b78:	00024b2e 	.word	0x00024b2e

00013b7c <le_conn_update_complete>:
{
   13b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   13b7e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   13b80:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   13b84:	4630      	mov	r0, r6
   13b86:	f002 fb27 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   13b8a:	4604      	mov	r4, r0
   13b8c:	b960      	cbnz	r0, 13ba8 <le_conn_update_complete+0x2c>
   13b8e:	4a1f      	ldr	r2, [pc, #124]	; (13c0c <le_conn_update_complete+0x90>)
   13b90:	4b1f      	ldr	r3, [pc, #124]	; (13c10 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13b92:	4820      	ldr	r0, [pc, #128]	; (13c14 <le_conn_update_complete+0x98>)
   13b94:	1ad2      	subs	r2, r2, r3
   13b96:	08d2      	lsrs	r2, r2, #3
   13b98:	0192      	lsls	r2, r2, #6
   13b9a:	f042 0201 	orr.w	r2, r2, #1
   13b9e:	4631      	mov	r1, r6
   13ba0:	f00a fcfc 	bl	1e59c <log_1>
}
   13ba4:	b002      	add	sp, #8
   13ba6:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   13ba8:	782b      	ldrb	r3, [r5, #0]
   13baa:	b9bb      	cbnz	r3, 13bdc <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   13bac:	792a      	ldrb	r2, [r5, #4]
   13bae:	78eb      	ldrb	r3, [r5, #3]
   13bb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13bb4:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   13bb8:	79aa      	ldrb	r2, [r5, #6]
   13bba:	796b      	ldrb	r3, [r5, #5]
   13bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13bc0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13bc4:	79eb      	ldrb	r3, [r5, #7]
   13bc6:	7a2a      	ldrb	r2, [r5, #8]
   13bc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13bcc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   13bd0:	f002 f91c 	bl	15e0c <notify_le_param_updated>
	bt_conn_unref(conn);
   13bd4:	4620      	mov	r0, r4
   13bd6:	f00d f820 	bl	20c1a <bt_conn_unref>
   13bda:	e7e3      	b.n	13ba4 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   13bdc:	2b1a      	cmp	r3, #26
   13bde:	d1f9      	bne.n	13bd4 <le_conn_update_complete+0x58>
   13be0:	78c3      	ldrb	r3, [r0, #3]
   13be2:	2b01      	cmp	r3, #1
   13be4:	d1f6      	bne.n	13bd4 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13bea:	3004      	adds	r0, #4
   13bec:	f00c fcb1 	bl	20552 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   13bf0:	0543      	lsls	r3, r0, #21
   13bf2:	d4ef      	bmi.n	13bd4 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   13bf4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   13bf8:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   13bfa:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   13bfc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   13c00:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   13c02:	4620      	mov	r0, r4
   13c04:	f002 ff6c 	bl	16ae0 <bt_l2cap_update_conn_param>
   13c08:	e7e4      	b.n	13bd4 <le_conn_update_complete+0x58>
   13c0a:	bf00      	nop
   13c0c:	0002357c 	.word	0x0002357c
   13c10:	0002353c 	.word	0x0002353c
   13c14:	00024ac4 	.word	0x00024ac4

00013c18 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13c18:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13c1a:	4c0c      	ldr	r4, [pc, #48]	; (13c4c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13c1c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13c1e:	2205      	movs	r2, #5
   13c20:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   13c24:	f002 fc0c 	bl	16440 <bt_conn_lookup_state_le>
		if (!conn) {
   13c28:	b970      	cbnz	r0, 13c48 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   13c2a:	4b09      	ldr	r3, [pc, #36]	; (13c50 <find_pending_connect.part.0+0x38>)
   13c2c:	6818      	ldr	r0, [r3, #0]
   13c2e:	889a      	ldrh	r2, [r3, #4]
   13c30:	9000      	str	r0, [sp, #0]
   13c32:	799b      	ldrb	r3, [r3, #6]
   13c34:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13c38:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
   13c3c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13c40:	2204      	movs	r2, #4
   13c42:	4669      	mov	r1, sp
   13c44:	f002 fbfc 	bl	16440 <bt_conn_lookup_state_le>
}
   13c48:	b002      	add	sp, #8
   13c4a:	bd10      	pop	{r4, pc}
   13c4c:	200002a0 	.word	0x200002a0
   13c50:	000236f0 	.word	0x000236f0

00013c54 <hci_cmd_done>:
{
   13c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c58:	4607      	mov	r7, r0
   13c5a:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13c5c:	7990      	ldrb	r0, [r2, #6]
   13c5e:	4e40      	ldr	r6, [pc, #256]	; (13d60 <hci_cmd_done+0x10c>)
{
   13c60:	4688      	mov	r8, r1
   13c62:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13c64:	f006 ff1e 	bl	1aaa4 <net_buf_pool_get>
   13c68:	4286      	cmp	r6, r0
   13c6a:	d016      	beq.n	13c9a <hci_cmd_done+0x46>
   13c6c:	4b3d      	ldr	r3, [pc, #244]	; (13d64 <hci_cmd_done+0x110>)
   13c6e:	4d3e      	ldr	r5, [pc, #248]	; (13d68 <hci_cmd_done+0x114>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   13c70:	79a0      	ldrb	r0, [r4, #6]
   13c72:	9700      	str	r7, [sp, #0]
   13c74:	1aed      	subs	r5, r5, r3
   13c76:	08ed      	lsrs	r5, r5, #3
   13c78:	9001      	str	r0, [sp, #4]
   13c7a:	f006 ff13 	bl	1aaa4 <net_buf_pool_get>
   13c7e:	01ad      	lsls	r5, r5, #6
   13c80:	f045 0502 	orr.w	r5, r5, #2
   13c84:	e9cd 0602 	strd	r0, r6, [sp, #8]
   13c88:	462b      	mov	r3, r5
   13c8a:	4838      	ldr	r0, [pc, #224]	; (13d6c <hci_cmd_done+0x118>)
   13c8c:	2204      	movs	r2, #4
   13c8e:	4669      	mov	r1, sp
   13c90:	f00a fccd 	bl	1e62e <log_n>
}
   13c94:	b005      	add	sp, #20
   13c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   13c9a:	4620      	mov	r0, r4
   13c9c:	f006 ff0a 	bl	1aab4 <net_buf_id>
   13ca0:	4d33      	ldr	r5, [pc, #204]	; (13d70 <hci_cmd_done+0x11c>)
   13ca2:	f04f 090c 	mov.w	r9, #12
   13ca6:	fb09 5300 	mla	r3, r9, r0, r5
   13caa:	885b      	ldrh	r3, [r3, #2]
   13cac:	42bb      	cmp	r3, r7
   13cae:	d011      	beq.n	13cd4 <hci_cmd_done+0x80>
   13cb0:	4b2c      	ldr	r3, [pc, #176]	; (13d64 <hci_cmd_done+0x110>)
   13cb2:	4e2d      	ldr	r6, [pc, #180]	; (13d68 <hci_cmd_done+0x114>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   13cb4:	4620      	mov	r0, r4
   13cb6:	1af6      	subs	r6, r6, r3
   13cb8:	f006 fefc 	bl	1aab4 <net_buf_id>
   13cbc:	08f6      	lsrs	r6, r6, #3
   13cbe:	fb09 5000 	mla	r0, r9, r0, r5
   13cc2:	01b6      	lsls	r6, r6, #6
   13cc4:	f046 0602 	orr.w	r6, r6, #2
   13cc8:	8842      	ldrh	r2, [r0, #2]
   13cca:	482a      	ldr	r0, [pc, #168]	; (13d74 <hci_cmd_done+0x120>)
   13ccc:	4633      	mov	r3, r6
   13cce:	4639      	mov	r1, r7
   13cd0:	f00a fc78 	bl	1e5c4 <log_2>
	if (cmd(buf)->state && !status) {
   13cd4:	4620      	mov	r0, r4
   13cd6:	f006 feed 	bl	1aab4 <net_buf_id>
   13cda:	260c      	movs	r6, #12
   13cdc:	fb06 5000 	mla	r0, r6, r0, r5
   13ce0:	6843      	ldr	r3, [r0, #4]
   13ce2:	b1ab      	cbz	r3, 13d10 <hci_cmd_done+0xbc>
   13ce4:	f1b8 0f00 	cmp.w	r8, #0
   13ce8:	d112      	bne.n	13d10 <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13cea:	4620      	mov	r0, r4
   13cec:	f006 fee2 	bl	1aab4 <net_buf_id>
   13cf0:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   13cf4:	2101      	movs	r1, #1
   13cf6:	6842      	ldr	r2, [r0, #4]
   13cf8:	e9d2 3000 	ldrd	r3, r0, [r2]
	if (val) {
   13cfc:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13cfe:	f000 061f 	and.w	r6, r0, #31
   13d02:	40b1      	lsls	r1, r6
	if (val) {
   13d04:	0940      	lsrs	r0, r0, #5
   13d06:	b1da      	cbz	r2, 13d40 <hci_cmd_done+0xec>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d0c:	f00c fc21 	bl	20552 <atomic_or>
	if (cmd(buf)->sync) {
   13d10:	4620      	mov	r0, r4
   13d12:	f006 fecf 	bl	1aab4 <net_buf_id>
   13d16:	260c      	movs	r6, #12
   13d18:	fb06 5000 	mla	r0, r6, r0, r5
   13d1c:	6883      	ldr	r3, [r0, #8]
   13d1e:	2b00      	cmp	r3, #0
   13d20:	d0b8      	beq.n	13c94 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   13d22:	4620      	mov	r0, r4
   13d24:	f006 fec6 	bl	1aab4 <net_buf_id>
   13d28:	4370      	muls	r0, r6
   13d2a:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13d2e:	4620      	mov	r0, r4
   13d30:	f006 fec0 	bl	1aab4 <net_buf_id>
   13d34:	fb06 5500 	mla	r5, r6, r0, r5
   13d38:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   13d3a:	f008 fe9b 	bl	1ca74 <z_impl_k_sem_give>
}
   13d3e:	e7a9      	b.n	13c94 <hci_cmd_done+0x40>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13d40:	43c9      	mvns	r1, r1
   13d42:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   13d46:	f3bf 8f5b 	dmb	ish
   13d4a:	e853 2f00 	ldrex	r2, [r3]
   13d4e:	400a      	ands	r2, r1
   13d50:	e843 2000 	strex	r0, r2, [r3]
   13d54:	2800      	cmp	r0, #0
   13d56:	d1f8      	bne.n	13d4a <hci_cmd_done+0xf6>
   13d58:	f3bf 8f5b 	dmb	ish
   13d5c:	e7d8      	b.n	13d10 <hci_cmd_done+0xbc>
   13d5e:	bf00      	nop
   13d60:	20000864 	.word	0x20000864
   13d64:	0002353c 	.word	0x0002353c
   13d68:	0002357c 	.word	0x0002357c
   13d6c:	00024b54 	.word	0x00024b54
   13d70:	20001ec4 	.word	0x20001ec4
   13d74:	00024b89 	.word	0x00024b89

00013d78 <handle_event>:
{
   13d78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13d7a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13d7e:	4605      	mov	r5, r0
   13d80:	4608      	mov	r0, r1
		if (handler->event != event) {
   13d82:	7811      	ldrb	r1, [r2, #0]
   13d84:	42a9      	cmp	r1, r5
   13d86:	d01a      	beq.n	13dbe <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   13d88:	3208      	adds	r2, #8
   13d8a:	429a      	cmp	r2, r3
   13d8c:	d1f9      	bne.n	13d82 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   13d8e:	8986      	ldrh	r6, [r0, #12]
   13d90:	4b16      	ldr	r3, [pc, #88]	; (13dec <handle_event+0x74>)
   13d92:	4c17      	ldr	r4, [pc, #92]	; (13df0 <handle_event+0x78>)
   13d94:	6880      	ldr	r0, [r0, #8]
   13d96:	4631      	mov	r1, r6
   13d98:	1ae4      	subs	r4, r4, r3
   13d9a:	f7ff f9a3 	bl	130e4 <bt_hex_real>
   13d9e:	f7fc ff0b 	bl	10bb8 <z_log_strdup>
   13da2:	08e4      	lsrs	r4, r4, #3
   13da4:	01a4      	lsls	r4, r4, #6
   13da6:	f044 0402 	orr.w	r4, r4, #2
   13daa:	4603      	mov	r3, r0
   13dac:	f8ad 4000 	strh.w	r4, [sp]
   13db0:	4810      	ldr	r0, [pc, #64]	; (13df4 <handle_event+0x7c>)
   13db2:	4632      	mov	r2, r6
   13db4:	4629      	mov	r1, r5
   13db6:	f00a fc1e 	bl	1e5f6 <log_3>
}
   13dba:	b002      	add	sp, #8
   13dbc:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   13dbe:	8981      	ldrh	r1, [r0, #12]
   13dc0:	7853      	ldrb	r3, [r2, #1]
   13dc2:	428b      	cmp	r3, r1
   13dc4:	d90d      	bls.n	13de2 <handle_event+0x6a>
   13dc6:	4a09      	ldr	r2, [pc, #36]	; (13dec <handle_event+0x74>)
   13dc8:	4b09      	ldr	r3, [pc, #36]	; (13df0 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   13dca:	480b      	ldr	r0, [pc, #44]	; (13df8 <handle_event+0x80>)
   13dcc:	1a9b      	subs	r3, r3, r2
   13dce:	08db      	lsrs	r3, r3, #3
   13dd0:	019b      	lsls	r3, r3, #6
   13dd2:	f043 0301 	orr.w	r3, r3, #1
   13dd6:	462a      	mov	r2, r5
}
   13dd8:	b002      	add	sp, #8
   13dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   13dde:	f00a bbf1 	b.w	1e5c4 <log_2>
		handler->handler(buf);
   13de2:	6853      	ldr	r3, [r2, #4]
}
   13de4:	b002      	add	sp, #8
   13de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   13dea:	4718      	bx	r3
   13dec:	0002353c 	.word	0x0002353c
   13df0:	0002357c 	.word	0x0002357c
   13df4:	00024bde 	.word	0x00024bde
   13df8:	00024bbc 	.word	0x00024bbc

00013dfc <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   13dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e00:	4b47      	ldr	r3, [pc, #284]	; (13f20 <hci_rx_thread+0x124>)
   13e02:	4d48      	ldr	r5, [pc, #288]	; (13f24 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   13e04:	f8df 813c 	ldr.w	r8, [pc, #316]	; 13f44 <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13e08:	f8df 913c 	ldr.w	r9, [pc, #316]	; 13f48 <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13e0c:	4f46      	ldr	r7, [pc, #280]	; (13f28 <hci_rx_thread+0x12c>)
   13e0e:	1aed      	subs	r5, r5, r3
   13e10:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   13e12:	f04f 32ff 	mov.w	r2, #4294967295
   13e16:	f04f 33ff 	mov.w	r3, #4294967295
   13e1a:	4640      	mov	r0, r8
   13e1c:	f00e fae7 	bl	223ee <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13e20:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   13e22:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   13e24:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   13e26:	d046      	beq.n	13eb6 <hci_rx_thread+0xba>
   13e28:	2903      	cmp	r1, #3
   13e2a:	d173      	bne.n	13f14 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13e2c:	8983      	ldrh	r3, [r0, #12]
   13e2e:	2b03      	cmp	r3, #3
   13e30:	d80c      	bhi.n	13e4c <hci_rx_thread+0x50>
   13e32:	493e      	ldr	r1, [pc, #248]	; (13f2c <hci_rx_thread+0x130>)
   13e34:	483e      	ldr	r0, [pc, #248]	; (13f30 <hci_rx_thread+0x134>)
   13e36:	f240 1379 	movw	r3, #377	; 0x179
   13e3a:	463a      	mov	r2, r7
   13e3c:	f009 ff5c 	bl	1dcf8 <printk>
   13e40:	4040      	eors	r0, r0
   13e42:	f380 8811 	msr	BASEPRI, r0
   13e46:	f04f 0003 	mov.w	r0, #3
   13e4a:	df02      	svc	2
   13e4c:	2104      	movs	r1, #4
   13e4e:	f104 0008 	add.w	r0, r4, #8
   13e52:	f00e fb44 	bl	224de <net_buf_simple_pull_mem>
	if (buf->len != len) {
   13e56:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   13e58:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13e5a:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13e5e:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   13e60:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   13e64:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   13e66:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13e68:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   13e6a:	d009      	beq.n	13e80 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   13e6c:	01ab      	lsls	r3, r5, #6
   13e6e:	4831      	ldr	r0, [pc, #196]	; (13f34 <hci_rx_thread+0x138>)
   13e70:	f043 0301 	orr.w	r3, r3, #1
   13e74:	f00a fba6 	bl	1e5c4 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   13e78:	4620      	mov	r0, r4
   13e7a:	f006 fecf 	bl	1ac1c <net_buf_unref>
			break;
   13e7e:	e017      	b.n	13eb0 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13e80:	f002 f9aa 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   13e84:	4606      	mov	r6, r0
   13e86:	b938      	cbnz	r0, 13e98 <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   13e88:	01aa      	lsls	r2, r5, #6
   13e8a:	8ae1      	ldrh	r1, [r4, #22]
   13e8c:	482a      	ldr	r0, [pc, #168]	; (13f38 <hci_rx_thread+0x13c>)
   13e8e:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   13e92:	f00a fb83 	bl	1e59c <log_1>
   13e96:	e7ef      	b.n	13e78 <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   13e98:	f002 fc82 	bl	167a0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13e9c:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   13ea0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   13ea2:	4621      	mov	r1, r4
   13ea4:	4630      	mov	r0, r6
   13ea6:	f002 f841 	bl	15f2c <bt_conn_recv>
	bt_conn_unref(conn);
   13eaa:	4630      	mov	r0, r6
   13eac:	f00c feb5 	bl	20c1a <bt_conn_unref>
	z_impl_k_yield();
   13eb0:	f009 fab2 	bl	1d418 <z_impl_k_yield>
	while (1) {
   13eb4:	e7ad      	b.n	13e12 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13eb6:	8983      	ldrh	r3, [r0, #12]
   13eb8:	2b01      	cmp	r3, #1
   13eba:	d80c      	bhi.n	13ed6 <hci_rx_thread+0xda>
   13ebc:	491b      	ldr	r1, [pc, #108]	; (13f2c <hci_rx_thread+0x130>)
   13ebe:	481c      	ldr	r0, [pc, #112]	; (13f30 <hci_rx_thread+0x134>)
   13ec0:	f640 03f9 	movw	r3, #2297	; 0x8f9
   13ec4:	463a      	mov	r2, r7
   13ec6:	f009 ff17 	bl	1dcf8 <printk>
   13eca:	4040      	eors	r0, r0
   13ecc:	f380 8811 	msr	BASEPRI, r0
   13ed0:	f04f 0003 	mov.w	r0, #3
   13ed4:	df02      	svc	2
   13ed6:	2102      	movs	r1, #2
   13ed8:	f104 0008 	add.w	r0, r4, #8
   13edc:	f00e faff 	bl	224de <net_buf_simple_pull_mem>
   13ee0:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13ee2:	7800      	ldrb	r0, [r0, #0]
   13ee4:	f00c fb0b 	bl	204fe <bt_hci_evt_get_flags>
   13ee8:	0783      	lsls	r3, r0, #30
   13eea:	d40c      	bmi.n	13f06 <hci_rx_thread+0x10a>
   13eec:	4913      	ldr	r1, [pc, #76]	; (13f3c <hci_rx_thread+0x140>)
   13eee:	4810      	ldr	r0, [pc, #64]	; (13f30 <hci_rx_thread+0x134>)
   13ef0:	f640 03fd 	movw	r3, #2301	; 0x8fd
   13ef4:	463a      	mov	r2, r7
   13ef6:	f009 feff 	bl	1dcf8 <printk>
   13efa:	4040      	eors	r0, r0
   13efc:	f380 8811 	msr	BASEPRI, r0
   13f00:	f04f 0003 	mov.w	r0, #3
   13f04:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13f06:	7830      	ldrb	r0, [r6, #0]
   13f08:	2306      	movs	r3, #6
   13f0a:	464a      	mov	r2, r9
   13f0c:	4621      	mov	r1, r4
   13f0e:	f7ff ff33 	bl	13d78 <handle_event>
	net_buf_unref(buf);
   13f12:	e7b1      	b.n	13e78 <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   13f14:	01aa      	lsls	r2, r5, #6
   13f16:	480a      	ldr	r0, [pc, #40]	; (13f40 <hci_rx_thread+0x144>)
   13f18:	f042 0201 	orr.w	r2, r2, #1
   13f1c:	e7b9      	b.n	13e92 <hci_rx_thread+0x96>
   13f1e:	bf00      	nop
   13f20:	0002353c 	.word	0x0002353c
   13f24:	0002357c 	.word	0x0002357c
   13f28:	00024c00 	.word	0x00024c00
   13f2c:	00024c34 	.word	0x00024c34
   13f30:	00024c4d 	.word	0x00024c4d
   13f34:	00024c6a 	.word	0x00024c6a
   13f38:	00024c8e 	.word	0x00024c8e
   13f3c:	00024cb0 	.word	0x00024cb0
   13f40:	00024cde 	.word	0x00024cde
   13f44:	200003ac 	.word	0x200003ac
   13f48:	00023b24 	.word	0x00023b24

00013f4c <hci_le_meta_event>:
{
   13f4c:	b510      	push	{r4, lr}
   13f4e:	2101      	movs	r1, #1
   13f50:	4604      	mov	r4, r0
   13f52:	3008      	adds	r0, #8
   13f54:	f00e fac3 	bl	224de <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13f58:	4621      	mov	r1, r4
   13f5a:	4a03      	ldr	r2, [pc, #12]	; (13f68 <hci_le_meta_event+0x1c>)
   13f5c:	7800      	ldrb	r0, [r0, #0]
}
   13f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13f62:	230a      	movs	r3, #10
   13f64:	f7ff bf08 	b.w	13d78 <handle_event>
   13f68:	00023ab4 	.word	0x00023ab4

00013f6c <hci_num_completed_packets>:
{
   13f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f70:	4d39      	ldr	r5, [pc, #228]	; (14058 <hci_num_completed_packets+0xec>)
   13f72:	4b3a      	ldr	r3, [pc, #232]	; (1405c <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   13f74:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   13f78:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 14064 <hci_num_completed_packets+0xf8>
   13f7c:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   13f7e:	2600      	movs	r6, #0
   13f80:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   13f82:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   13f84:	f898 3000 	ldrb.w	r3, [r8]
   13f88:	429e      	cmp	r6, r3
   13f8a:	db01      	blt.n	13f90 <hci_num_completed_packets+0x24>
}
   13f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   13f90:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   13f94:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   13f98:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   13f9c:	4658      	mov	r0, fp
   13f9e:	f002 f91b 	bl	161d8 <bt_conn_lookup_handle>
		if (!conn) {
   13fa2:	4604      	mov	r4, r0
   13fa4:	b1d8      	cbz	r0, 13fde <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   13fa6:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   13faa:	2f00      	cmp	r7, #0
   13fac:	d033      	beq.n	14016 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   13fae:	f04f 0340 	mov.w	r3, #64	; 0x40
   13fb2:	f3ef 8211 	mrs	r2, BASEPRI
   13fb6:	f383 8811 	msr	BASEPRI, r3
   13fba:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   13fbe:	69e3      	ldr	r3, [r4, #28]
   13fc0:	b1b3      	cbz	r3, 13ff0 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   13fc2:	3b01      	subs	r3, #1
   13fc4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   13fc6:	f382 8811 	msr	BASEPRI, r2
   13fca:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   13fce:	4620      	mov	r0, r4
   13fd0:	f001 ff18 	bl	15e04 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   13fd4:	3f01      	subs	r7, #1
   13fd6:	f008 fd4d 	bl	1ca74 <z_impl_k_sem_give>
   13fda:	b2bf      	uxth	r7, r7
   13fdc:	e7e5      	b.n	13faa <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   13fde:	01aa      	lsls	r2, r5, #6
   13fe0:	481f      	ldr	r0, [pc, #124]	; (14060 <hci_num_completed_packets+0xf4>)
   13fe2:	f042 0201 	orr.w	r2, r2, #1
   13fe6:	4659      	mov	r1, fp
   13fe8:	f00a fad8 	bl	1e59c <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   13fec:	3601      	adds	r6, #1
   13fee:	e7c9      	b.n	13f84 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   13ff0:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13ff2:	b12b      	cbz	r3, 14000 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13ff4:	69a1      	ldr	r1, [r4, #24]
   13ff6:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   13ff8:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13ffa:	428b      	cmp	r3, r1
	list->tail = node;
   13ffc:	bf08      	it	eq
   13ffe:	61a0      	streq	r0, [r4, #24]
   14000:	f382 8811 	msr	BASEPRI, r2
   14004:	f3bf 8f6f 	isb	sy
			if (!node) {
   14008:	b94b      	cbnz	r3, 1401e <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   1400a:	01a9      	lsls	r1, r5, #6
   1400c:	f041 0101 	orr.w	r1, r1, #1
   14010:	4650      	mov	r0, sl
   14012:	f00a fab6 	bl	1e582 <log_0>
		bt_conn_unref(conn);
   14016:	4620      	mov	r0, r4
   14018:	f00c fdff 	bl	20c1a <bt_conn_unref>
   1401c:	e7e6      	b.n	13fec <hci_num_completed_packets+0x80>
	__asm__ volatile(
   1401e:	f04f 0240 	mov.w	r2, #64	; 0x40
   14022:	f3ef 8111 	mrs	r1, BASEPRI
   14026:	f382 8811 	msr	BASEPRI, r2
   1402a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1402e:	68da      	ldr	r2, [r3, #12]
   14030:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   14032:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   14036:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   14038:	f8c3 900c 	str.w	r9, [r3, #12]
   1403c:	b94a      	cbnz	r2, 14052 <hci_num_completed_packets+0xe6>
	list->head = node;
   1403e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   14042:	f381 8811 	msr	BASEPRI, r1
   14046:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1404a:	4658      	mov	r0, fp
   1404c:	f008 feaa 	bl	1cda4 <k_work_submit>
   14050:	e7bd      	b.n	13fce <hci_num_completed_packets+0x62>
	parent->next = child;
   14052:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14054:	6263      	str	r3, [r4, #36]	; 0x24
}
   14056:	e7f4      	b.n	14042 <hci_num_completed_packets+0xd6>
   14058:	0002357c 	.word	0x0002357c
   1405c:	0002353c 	.word	0x0002353c
   14060:	00024cf2 	.word	0x00024cf2
   14064:	00024d0e 	.word	0x00024d0e

00014068 <hci_tx_thread>:
{
   14068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1406c:	4d51      	ldr	r5, [pc, #324]	; (141b4 <hci_tx_thread+0x14c>)
   1406e:	4b52      	ldr	r3, [pc, #328]	; (141b8 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   14070:	f8df 914c 	ldr.w	r9, [pc, #332]	; 141c0 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   14074:	f8df a174 	ldr.w	sl, [pc, #372]	; 141ec <hci_tx_thread+0x184>
   14078:	1aed      	subs	r5, r5, r3
   1407a:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   1407c:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14080:	484e      	ldr	r0, [pc, #312]	; (141bc <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   14082:	f36f 3352 	bfc	r3, #13, #6
   14086:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1408a:	f002 f83d 	bl	16108 <bt_conn_prepare_events>
   1408e:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   14090:	484b      	ldr	r0, [pc, #300]	; (141c0 <hci_tx_thread+0x158>)
   14092:	f04f 32ff 	mov.w	r2, #4294967295
   14096:	f04f 33ff 	mov.w	r3, #4294967295
   1409a:	4639      	mov	r1, r7
   1409c:	f009 fcd0 	bl	1da40 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   140a0:	b160      	cbz	r0, 140bc <hci_tx_thread+0x54>
   140a2:	4948      	ldr	r1, [pc, #288]	; (141c4 <hci_tx_thread+0x15c>)
   140a4:	4848      	ldr	r0, [pc, #288]	; (141c8 <hci_tx_thread+0x160>)
   140a6:	f640 136f 	movw	r3, #2415	; 0x96f
   140aa:	4652      	mov	r2, sl
   140ac:	f009 fe24 	bl	1dcf8 <printk>
   140b0:	4040      	eors	r0, r0
   140b2:	f380 8811 	msr	BASEPRI, r0
   140b6:	f04f 0003 	mov.w	r0, #3
   140ba:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   140bc:	4e43      	ldr	r6, [pc, #268]	; (141cc <hci_tx_thread+0x164>)
{
   140be:	f8df 8100 	ldr.w	r8, [pc, #256]	; 141c0 <hci_tx_thread+0x158>
   140c2:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
   140c6:	b917      	cbnz	r7, 140ce <hci_tx_thread+0x66>
	z_impl_k_yield();
   140c8:	f009 f9a6 	bl	1d418 <z_impl_k_yield>
	while (1) {
   140cc:	e7d6      	b.n	1407c <hci_tx_thread+0x14>
		switch (ev->state) {
   140ce:	f8d8 100c 	ldr.w	r1, [r8, #12]
   140d2:	f3c1 3145 	ubfx	r1, r1, #13, #6
   140d6:	2901      	cmp	r1, #1
   140d8:	d959      	bls.n	1418e <hci_tx_thread+0x126>
   140da:	2904      	cmp	r1, #4
   140dc:	d163      	bne.n	141a6 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   140de:	f898 300c 	ldrb.w	r3, [r8, #12]
   140e2:	2b00      	cmp	r3, #0
   140e4:	d157      	bne.n	14196 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   140e6:	483a      	ldr	r0, [pc, #232]	; (141d0 <hci_tx_thread+0x168>)
   140e8:	2200      	movs	r2, #0
   140ea:	2300      	movs	r3, #0
   140ec:	f00e f97f 	bl	223ee <net_buf_get>
	BT_ASSERT(buf);
   140f0:	4604      	mov	r4, r0
   140f2:	b960      	cbnz	r0, 1410e <hci_tx_thread+0xa6>
   140f4:	4937      	ldr	r1, [pc, #220]	; (141d4 <hci_tx_thread+0x16c>)
   140f6:	4834      	ldr	r0, [pc, #208]	; (141c8 <hci_tx_thread+0x160>)
   140f8:	f640 130c 	movw	r3, #2316	; 0x90c
   140fc:	4652      	mov	r2, sl
   140fe:	f009 fdfb 	bl	1dcf8 <printk>
   14102:	4040      	eors	r0, r0
   14104:	f380 8811 	msr	BASEPRI, r0
   14108:	f04f 0003 	mov.w	r0, #3
   1410c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1410e:	f04f 33ff 	mov.w	r3, #4294967295
   14112:	f04f 32ff 	mov.w	r2, #4294967295
   14116:	4658      	mov	r0, fp
   14118:	f008 fcd2 	bl	1cac0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1411c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   14120:	b163      	cbz	r3, 1413c <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   14122:	01a9      	lsls	r1, r5, #6
   14124:	482c      	ldr	r0, [pc, #176]	; (141d8 <hci_tx_thread+0x170>)
   14126:	f041 0101 	orr.w	r1, r1, #1
   1412a:	f00a fa2a 	bl	1e582 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   1412e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   14132:	f006 fd73 	bl	1ac1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14136:	2300      	movs	r3, #0
   14138:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   1413c:	4620      	mov	r0, r4
   1413e:	f00e f981 	bl	22444 <net_buf_ref>
   14142:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
		return bt_hci_ecc_send(buf);
   14146:	4620      	mov	r0, r4
   14148:	f7ff f966 	bl	13418 <bt_hci_ecc_send>
	if (err) {
   1414c:	4601      	mov	r1, r0
   1414e:	b1f0      	cbz	r0, 1418e <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   14150:	01aa      	lsls	r2, r5, #6
   14152:	4822      	ldr	r0, [pc, #136]	; (141dc <hci_tx_thread+0x174>)
   14154:	f042 0201 	orr.w	r2, r2, #1
   14158:	f00a fa20 	bl	1e59c <log_1>
	z_impl_k_sem_give(sem);
   1415c:	4820      	ldr	r0, [pc, #128]	; (141e0 <hci_tx_thread+0x178>)
   1415e:	f008 fc89 	bl	1ca74 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14162:	4620      	mov	r0, r4
   14164:	f006 fca6 	bl	1aab4 <net_buf_id>
   14168:	4b1e      	ldr	r3, [pc, #120]	; (141e4 <hci_tx_thread+0x17c>)
   1416a:	220c      	movs	r2, #12
   1416c:	fb02 3000 	mla	r0, r2, r0, r3
   14170:	211f      	movs	r1, #31
   14172:	8840      	ldrh	r0, [r0, #2]
   14174:	4622      	mov	r2, r4
   14176:	f7ff fd6d 	bl	13c54 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   1417a:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   1417e:	f006 fd4d 	bl	1ac1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14182:	2300      	movs	r3, #0
		net_buf_unref(buf);
   14184:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   14186:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
   1418a:	f006 fd47 	bl	1ac1c <net_buf_unref>
	for (; count; ev++, count--) {
   1418e:	f108 0814 	add.w	r8, r8, #20
   14192:	3f01      	subs	r7, #1
   14194:	e797      	b.n	140c6 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14196:	2b01      	cmp	r3, #1
   14198:	d1f9      	bne.n	1418e <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   1419a:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   1419e:	3838      	subs	r0, #56	; 0x38
   141a0:	f002 fa4e 	bl	16640 <bt_conn_process_tx>
   141a4:	e7f3      	b.n	1418e <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   141a6:	01aa      	lsls	r2, r5, #6
   141a8:	480f      	ldr	r0, [pc, #60]	; (141e8 <hci_tx_thread+0x180>)
   141aa:	f042 0202 	orr.w	r2, r2, #2
   141ae:	f00a f9f5 	bl	1e59c <log_1>
   141b2:	e7ec      	b.n	1418e <hci_tx_thread+0x126>
   141b4:	0002357c 	.word	0x0002357c
   141b8:	0002353c 	.word	0x0002353c
   141bc:	200004b8 	.word	0x200004b8
   141c0:	200004a4 	.word	0x200004a4
   141c4:	00024d25 	.word	0x00024d25
   141c8:	00024c4d 	.word	0x00024c4d
   141cc:	200002a0 	.word	0x200002a0
   141d0:	200003c4 	.word	0x200003c4
   141d4:	0002497f 	.word	0x0002497f
   141d8:	00024d2e 	.word	0x00024d2e
   141dc:	00024d49 	.word	0x00024d49
   141e0:	20000390 	.word	0x20000390
   141e4:	20001ec4 	.word	0x20001ec4
   141e8:	00024d6b 	.word	0x00024d6b
   141ec:	00024c00 	.word	0x00024c00

000141f0 <hci_cmd_status>:
{
   141f0:	b538      	push	{r3, r4, r5, lr}
   141f2:	2104      	movs	r1, #4
   141f4:	4604      	mov	r4, r0
   141f6:	3008      	adds	r0, #8
   141f8:	f00e f971 	bl	224de <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   141fc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   141fe:	7801      	ldrb	r1, [r0, #0]
   14200:	8840      	ldrh	r0, [r0, #2]
   14202:	4622      	mov	r2, r4
   14204:	f7ff fd26 	bl	13c54 <hci_cmd_done>
	if (ncmd) {
   14208:	b125      	cbz	r5, 14214 <hci_cmd_status+0x24>
   1420a:	4803      	ldr	r0, [pc, #12]	; (14218 <hci_cmd_status+0x28>)
}
   1420c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14210:	f008 bc30 	b.w	1ca74 <z_impl_k_sem_give>
   14214:	bd38      	pop	{r3, r4, r5, pc}
   14216:	bf00      	nop
   14218:	20000390 	.word	0x20000390

0001421c <hci_cmd_complete>:
{
   1421c:	b538      	push	{r3, r4, r5, lr}
   1421e:	2103      	movs	r1, #3
   14220:	4604      	mov	r4, r0
   14222:	3008      	adds	r0, #8
   14224:	f00e f95b 	bl	224de <net_buf_simple_pull_mem>
	status = buf->data[0];
   14228:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   1422a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1422c:	7819      	ldrb	r1, [r3, #0]
   1422e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14232:	4622      	mov	r2, r4
   14234:	f7ff fd0e 	bl	13c54 <hci_cmd_done>
	if (ncmd) {
   14238:	b125      	cbz	r5, 14244 <hci_cmd_complete+0x28>
   1423a:	4803      	ldr	r0, [pc, #12]	; (14248 <hci_cmd_complete+0x2c>)
}
   1423c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14240:	f008 bc18 	b.w	1ca74 <z_impl_k_sem_give>
   14244:	bd38      	pop	{r3, r4, r5, pc}
   14246:	bf00      	nop
   14248:	20000390 	.word	0x20000390

0001424c <bt_hci_cmd_state_set_init>:
{
   1424c:	b510      	push	{r4, lr}
	state->bit = bit;
   1424e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   14252:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14256:	720b      	strb	r3, [r1, #8]
{
   14258:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1425a:	f006 fc2b 	bl	1aab4 <net_buf_id>
   1425e:	4b03      	ldr	r3, [pc, #12]	; (1426c <bt_hci_cmd_state_set_init+0x20>)
   14260:	220c      	movs	r2, #12
   14262:	fb02 3000 	mla	r0, r2, r0, r3
   14266:	6044      	str	r4, [r0, #4]
}
   14268:	bd10      	pop	{r4, pc}
   1426a:	bf00      	nop
   1426c:	20001ec4 	.word	0x20001ec4

00014270 <bt_hci_cmd_create>:
{
   14270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   14274:	f04f 32ff 	mov.w	r2, #4294967295
   14278:	f04f 33ff 	mov.w	r3, #4294967295
   1427c:	4605      	mov	r5, r0
   1427e:	4816      	ldr	r0, [pc, #88]	; (142d8 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   14280:	f8df 8058 	ldr.w	r8, [pc, #88]	; 142dc <bt_hci_cmd_create+0x6c>
{
   14284:	460e      	mov	r6, r1
   14286:	f00e f8ad 	bl	223e4 <net_buf_alloc_fixed>
   1428a:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1428c:	f100 0b08 	add.w	fp, r0, #8
   14290:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14292:	2700      	movs	r7, #0
   14294:	4658      	mov	r0, fp
   14296:	f00e f8c4 	bl	22422 <net_buf_simple_reserve>
   1429a:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   1429c:	4620      	mov	r0, r4
   1429e:	f006 fc09 	bl	1aab4 <net_buf_id>
   142a2:	f04f 0a0c 	mov.w	sl, #12
   142a6:	fb0a 8000 	mla	r0, sl, r0, r8
   142aa:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   142ac:	4620      	mov	r0, r4
   142ae:	f006 fc01 	bl	1aab4 <net_buf_id>
   142b2:	fb0a 8000 	mla	r0, sl, r0, r8
   142b6:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   142b8:	4620      	mov	r0, r4
   142ba:	f006 fbfb 	bl	1aab4 <net_buf_id>
   142be:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   142c2:	2103      	movs	r1, #3
   142c4:	6047      	str	r7, [r0, #4]
   142c6:	4658      	mov	r0, fp
   142c8:	f00e f8e2 	bl	22490 <net_buf_simple_add>
	hdr->param_len = param_len;
   142cc:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   142ce:	8005      	strh	r5, [r0, #0]
}
   142d0:	4620      	mov	r0, r4
   142d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d6:	bf00      	nop
   142d8:	20000864 	.word	0x20000864
   142dc:	20001ec4 	.word	0x20001ec4

000142e0 <bt_hci_cmd_send>:
{
   142e0:	b538      	push	{r3, r4, r5, lr}
   142e2:	4605      	mov	r5, r0
	if (!buf) {
   142e4:	460c      	mov	r4, r1
   142e6:	b919      	cbnz	r1, 142f0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   142e8:	f7ff ffc2 	bl	14270 <bt_hci_cmd_create>
		if (!buf) {
   142ec:	4604      	mov	r4, r0
   142ee:	b1f0      	cbz	r0, 1432e <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   142f0:	f640 4335 	movw	r3, #3125	; 0xc35
   142f4:	429d      	cmp	r5, r3
   142f6:	d114      	bne.n	14322 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
   142f8:	4620      	mov	r0, r4
   142fa:	f7ff f88d 	bl	13418 <bt_hci_ecc_send>
		if (err) {
   142fe:	4605      	mov	r5, r0
   14300:	b168      	cbz	r0, 1431e <bt_hci_cmd_send+0x3e>
   14302:	4b0c      	ldr	r3, [pc, #48]	; (14334 <bt_hci_cmd_send+0x54>)
   14304:	4a0c      	ldr	r2, [pc, #48]	; (14338 <bt_hci_cmd_send+0x58>)
   14306:	1ad2      	subs	r2, r2, r3
   14308:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   1430a:	0192      	lsls	r2, r2, #6
   1430c:	4601      	mov	r1, r0
   1430e:	f042 0201 	orr.w	r2, r2, #1
   14312:	480a      	ldr	r0, [pc, #40]	; (1433c <bt_hci_cmd_send+0x5c>)
   14314:	f00a f942 	bl	1e59c <log_1>
			net_buf_unref(buf);
   14318:	4620      	mov	r0, r4
   1431a:	f006 fc7f 	bl	1ac1c <net_buf_unref>
}
   1431e:	4628      	mov	r0, r5
   14320:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14322:	4807      	ldr	r0, [pc, #28]	; (14340 <bt_hci_cmd_send+0x60>)
   14324:	4621      	mov	r1, r4
   14326:	f00e f880 	bl	2242a <net_buf_put>
	return 0;
   1432a:	2500      	movs	r5, #0
   1432c:	e7f7      	b.n	1431e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   1432e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14332:	e7f4      	b.n	1431e <bt_hci_cmd_send+0x3e>
   14334:	0002353c 	.word	0x0002353c
   14338:	0002357c 	.word	0x0002357c
   1433c:	00024d49 	.word	0x00024d49
   14340:	200003c4 	.word	0x200003c4

00014344 <le_ltk_request>:
{
   14344:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   14346:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14348:	882e      	ldrh	r6, [r5, #0]
   1434a:	b2b7      	uxth	r7, r6
{
   1434c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1434e:	4638      	mov	r0, r7
   14350:	f001 ff42 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   14354:	4604      	mov	r4, r0
   14356:	b960      	cbnz	r0, 14372 <le_ltk_request+0x2e>
   14358:	4a26      	ldr	r2, [pc, #152]	; (143f4 <le_ltk_request+0xb0>)
   1435a:	4b27      	ldr	r3, [pc, #156]	; (143f8 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1435c:	4827      	ldr	r0, [pc, #156]	; (143fc <le_ltk_request+0xb8>)
   1435e:	1ad2      	subs	r2, r2, r3
   14360:	08d2      	lsrs	r2, r2, #3
   14362:	0192      	lsls	r2, r2, #6
   14364:	f042 0201 	orr.w	r2, r2, #1
   14368:	4639      	mov	r1, r7
   1436a:	f00a f917 	bl	1e59c <log_1>
}
   1436e:	b007      	add	sp, #28
   14370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   14372:	af02      	add	r7, sp, #8
   14374:	f8d5 2002 	ldr.w	r2, [r5, #2]
   14378:	f8d5 3006 	ldr.w	r3, [r5, #6]
   1437c:	9701      	str	r7, [sp, #4]
   1437e:	8969      	ldrh	r1, [r5, #10]
   14380:	9100      	str	r1, [sp, #0]
   14382:	f00d fe0c 	bl	21f9e <bt_smp_request_ltk>
   14386:	b320      	cbz	r0, 143d2 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   14388:	2112      	movs	r1, #18
   1438a:	f242 001a 	movw	r0, #8218	; 0x201a
   1438e:	f7ff ff6f 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   14392:	4605      	mov	r5, r0
   14394:	b968      	cbnz	r0, 143b2 <le_ltk_request+0x6e>
   14396:	4917      	ldr	r1, [pc, #92]	; (143f4 <le_ltk_request+0xb0>)
   14398:	4b17      	ldr	r3, [pc, #92]	; (143f8 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
   1439a:	4819      	ldr	r0, [pc, #100]	; (14400 <le_ltk_request+0xbc>)
   1439c:	1ac9      	subs	r1, r1, r3
   1439e:	08c9      	lsrs	r1, r1, #3
   143a0:	0189      	lsls	r1, r1, #6
   143a2:	f041 0101 	orr.w	r1, r1, #1
   143a6:	f00a f8ec 	bl	1e582 <log_0>
	bt_conn_unref(conn);
   143aa:	4620      	mov	r0, r4
   143ac:	f00c fc35 	bl	20c1a <bt_conn_unref>
   143b0:	e7dd      	b.n	1436e <le_ltk_request+0x2a>
   143b2:	2112      	movs	r1, #18
   143b4:	3008      	adds	r0, #8
   143b6:	f00e f86b 	bl	22490 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   143ba:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   143bc:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   143c0:	2210      	movs	r2, #16
   143c2:	f00b ff38 	bl	20236 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   143c6:	4629      	mov	r1, r5
   143c8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   143cc:	f7ff ff88 	bl	142e0 <bt_hci_cmd_send>
   143d0:	e7eb      	b.n	143aa <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   143d2:	2102      	movs	r1, #2
   143d4:	f242 001b 	movw	r0, #8219	; 0x201b
   143d8:	f7ff ff4a 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   143dc:	4605      	mov	r5, r0
   143de:	2800      	cmp	r0, #0
   143e0:	d0d9      	beq.n	14396 <le_ltk_request+0x52>
   143e2:	2102      	movs	r1, #2
   143e4:	3008      	adds	r0, #8
   143e6:	f00e f853 	bl	22490 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   143ea:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   143ec:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   143ee:	f242 001b 	movw	r0, #8219	; 0x201b
   143f2:	e7eb      	b.n	143cc <le_ltk_request+0x88>
   143f4:	0002357c 	.word	0x0002357c
   143f8:	0002353c 	.word	0x0002353c
   143fc:	00024ac4 	.word	0x00024ac4
   14400:	00024d8c 	.word	0x00024d8c

00014404 <le_conn_param_neg_reply>:
{
   14404:	b570      	push	{r4, r5, r6, lr}
   14406:	4606      	mov	r6, r0
   14408:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1440a:	f242 0021 	movw	r0, #8225	; 0x2021
   1440e:	2103      	movs	r1, #3
   14410:	f7ff ff2e 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   14414:	4604      	mov	r4, r0
   14416:	b958      	cbnz	r0, 14430 <le_conn_param_neg_reply+0x2c>
   14418:	490c      	ldr	r1, [pc, #48]	; (1444c <le_conn_param_neg_reply+0x48>)
   1441a:	4b0d      	ldr	r3, [pc, #52]	; (14450 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   1441c:	480d      	ldr	r0, [pc, #52]	; (14454 <le_conn_param_neg_reply+0x50>)
   1441e:	1ac9      	subs	r1, r1, r3
   14420:	08c9      	lsrs	r1, r1, #3
   14422:	0189      	lsls	r1, r1, #6
}
   14424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   14428:	f041 0101 	orr.w	r1, r1, #1
   1442c:	f00a b8a9 	b.w	1e582 <log_0>
   14430:	2103      	movs	r1, #3
   14432:	3008      	adds	r0, #8
   14434:	f00e f82c 	bl	22490 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   14438:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1443a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1443c:	4621      	mov	r1, r4
   1443e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   14442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14446:	f7ff bf4b 	b.w	142e0 <bt_hci_cmd_send>
   1444a:	bf00      	nop
   1444c:	0002357c 	.word	0x0002357c
   14450:	0002353c 	.word	0x0002353c
   14454:	00024da3 	.word	0x00024da3

00014458 <le_conn_param_req>:
{
   14458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1445a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1445c:	78d9      	ldrb	r1, [r3, #3]
   1445e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   14460:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14462:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14466:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1446a:	7959      	ldrb	r1, [r3, #5]
   1446c:	791a      	ldrb	r2, [r3, #4]
   1446e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14472:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   14476:	799a      	ldrb	r2, [r3, #6]
   14478:	79d9      	ldrb	r1, [r3, #7]
   1447a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1447e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14482:	7a1a      	ldrb	r2, [r3, #8]
   14484:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   14486:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14488:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1448c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1448e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   14492:	f001 fea1 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   14496:	4606      	mov	r6, r0
   14498:	b980      	cbnz	r0, 144bc <le_conn_param_req+0x64>
   1449a:	4b20      	ldr	r3, [pc, #128]	; (1451c <le_conn_param_req+0xc4>)
   1449c:	4a20      	ldr	r2, [pc, #128]	; (14520 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1449e:	4821      	ldr	r0, [pc, #132]	; (14524 <le_conn_param_req+0xcc>)
   144a0:	1ad2      	subs	r2, r2, r3
   144a2:	08d2      	lsrs	r2, r2, #3
   144a4:	0192      	lsls	r2, r2, #6
   144a6:	4621      	mov	r1, r4
   144a8:	f042 0201 	orr.w	r2, r2, #1
   144ac:	f00a f876 	bl	1e59c <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   144b0:	2102      	movs	r1, #2
   144b2:	4620      	mov	r0, r4
   144b4:	f7ff ffa6 	bl	14404 <le_conn_param_neg_reply>
}
   144b8:	b003      	add	sp, #12
   144ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   144bc:	4669      	mov	r1, sp
   144be:	f001 fcdd 	bl	15e7c <le_param_req>
   144c2:	b938      	cbnz	r0, 144d4 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   144c4:	211e      	movs	r1, #30
   144c6:	4620      	mov	r0, r4
   144c8:	f7ff ff9c 	bl	14404 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   144cc:	4630      	mov	r0, r6
   144ce:	f00c fba4 	bl	20c1a <bt_conn_unref>
   144d2:	e7f1      	b.n	144b8 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   144d4:	210e      	movs	r1, #14
   144d6:	f242 0020 	movw	r0, #8224	; 0x2020
   144da:	f7ff fec9 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   144de:	4605      	mov	r5, r0
   144e0:	2800      	cmp	r0, #0
   144e2:	d0f3      	beq.n	144cc <le_conn_param_req+0x74>
   144e4:	210e      	movs	r1, #14
   144e6:	3008      	adds	r0, #8
   144e8:	f00d ffd2 	bl	22490 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   144ec:	220e      	movs	r2, #14
   144ee:	4604      	mov	r4, r0
   144f0:	2100      	movs	r1, #0
   144f2:	f00b fecb 	bl	2028c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   144f6:	f8bd 3000 	ldrh.w	r3, [sp]
   144fa:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   144fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14500:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   14502:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14506:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   14508:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1450c:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1450e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   14510:	4629      	mov	r1, r5
   14512:	f242 0020 	movw	r0, #8224	; 0x2020
   14516:	f7ff fee3 	bl	142e0 <bt_hci_cmd_send>
   1451a:	e7d7      	b.n	144cc <le_conn_param_req+0x74>
   1451c:	0002353c 	.word	0x0002353c
   14520:	0002357c 	.word	0x0002357c
   14524:	00024ac4 	.word	0x00024ac4

00014528 <bt_hci_cmd_send_sync>:
{
   14528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1452c:	4607      	mov	r7, r0
   1452e:	b086      	sub	sp, #24
   14530:	4615      	mov	r5, r2
	if (!buf) {
   14532:	460c      	mov	r4, r1
   14534:	b921      	cbnz	r1, 14540 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   14536:	f7ff fe9b 	bl	14270 <bt_hci_cmd_create>
		if (!buf) {
   1453a:	4604      	mov	r4, r0
   1453c:	2800      	cmp	r0, #0
   1453e:	d055      	beq.n	145ec <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14540:	2201      	movs	r2, #1
   14542:	2100      	movs	r1, #0
   14544:	4668      	mov	r0, sp
   14546:	f00e faad 	bl	22aa4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1454a:	4620      	mov	r0, r4
   1454c:	f006 fab2 	bl	1aab4 <net_buf_id>
   14550:	4e28      	ldr	r6, [pc, #160]	; (145f4 <bt_hci_cmd_send_sync+0xcc>)
   14552:	230c      	movs	r3, #12
   14554:	fb03 6000 	mla	r0, r3, r0, r6
   14558:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   1455c:	4620      	mov	r0, r4
   1455e:	f00d ff71 	bl	22444 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14562:	4825      	ldr	r0, [pc, #148]	; (145f8 <bt_hci_cmd_send_sync+0xd0>)
   14564:	4621      	mov	r1, r4
   14566:	f00d ff60 	bl	2242a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1456a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1456e:	2300      	movs	r3, #0
   14570:	4668      	mov	r0, sp
   14572:	f008 faa5 	bl	1cac0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14576:	4680      	mov	r8, r0
   14578:	b180      	cbz	r0, 1459c <bt_hci_cmd_send_sync+0x74>
   1457a:	4a20      	ldr	r2, [pc, #128]	; (145fc <bt_hci_cmd_send_sync+0xd4>)
   1457c:	4920      	ldr	r1, [pc, #128]	; (14600 <bt_hci_cmd_send_sync+0xd8>)
   1457e:	4821      	ldr	r0, [pc, #132]	; (14604 <bt_hci_cmd_send_sync+0xdc>)
   14580:	f240 1333 	movw	r3, #307	; 0x133
   14584:	f009 fbb8 	bl	1dcf8 <printk>
   14588:	481f      	ldr	r0, [pc, #124]	; (14608 <bt_hci_cmd_send_sync+0xe0>)
   1458a:	4641      	mov	r1, r8
   1458c:	f009 fbb4 	bl	1dcf8 <printk>
   14590:	4040      	eors	r0, r0
   14592:	f380 8811 	msr	BASEPRI, r0
   14596:	f04f 0003 	mov.w	r0, #3
   1459a:	df02      	svc	2
	status = cmd(buf)->status;
   1459c:	4620      	mov	r0, r4
   1459e:	f006 fa89 	bl	1aab4 <net_buf_id>
   145a2:	230c      	movs	r3, #12
   145a4:	4343      	muls	r3, r0
   145a6:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   145a8:	b1be      	cbz	r6, 145da <bt_hci_cmd_send_sync+0xb2>
   145aa:	4a18      	ldr	r2, [pc, #96]	; (1460c <bt_hci_cmd_send_sync+0xe4>)
   145ac:	4b18      	ldr	r3, [pc, #96]	; (14610 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   145ae:	4819      	ldr	r0, [pc, #100]	; (14614 <bt_hci_cmd_send_sync+0xec>)
   145b0:	1a9b      	subs	r3, r3, r2
   145b2:	08db      	lsrs	r3, r3, #3
   145b4:	019b      	lsls	r3, r3, #6
   145b6:	f043 0302 	orr.w	r3, r3, #2
   145ba:	4632      	mov	r2, r6
   145bc:	4639      	mov	r1, r7
   145be:	f00a f801 	bl	1e5c4 <log_2>
		net_buf_unref(buf);
   145c2:	4620      	mov	r0, r4
   145c4:	f006 fb2a 	bl	1ac1c <net_buf_unref>
			return -EIO;
   145c8:	2e09      	cmp	r6, #9
   145ca:	bf0c      	ite	eq
   145cc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   145d0:	f06f 0004 	mvnne.w	r0, #4
}
   145d4:	b006      	add	sp, #24
   145d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   145da:	b115      	cbz	r5, 145e2 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   145dc:	602c      	str	r4, [r5, #0]
	return 0;
   145de:	4630      	mov	r0, r6
   145e0:	e7f8      	b.n	145d4 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   145e2:	4620      	mov	r0, r4
   145e4:	f006 fb1a 	bl	1ac1c <net_buf_unref>
	return 0;
   145e8:	4628      	mov	r0, r5
   145ea:	e7f3      	b.n	145d4 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   145ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
   145f0:	e7f0      	b.n	145d4 <bt_hci_cmd_send_sync+0xac>
   145f2:	bf00      	nop
   145f4:	20001ec4 	.word	0x20001ec4
   145f8:	200003c4 	.word	0x200003c4
   145fc:	00024c00 	.word	0x00024c00
   14600:	00024d25 	.word	0x00024d25
   14604:	00024c4d 	.word	0x00024c4d
   14608:	00024dbd 	.word	0x00024dbd
   1460c:	0002353c 	.word	0x0002353c
   14610:	0002357c 	.word	0x0002357c
   14614:	00024ddd 	.word	0x00024ddd

00014618 <hci_le_read_max_data_len>:
{
   14618:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1461a:	4606      	mov	r6, r0
   1461c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1461e:	aa01      	add	r2, sp, #4
   14620:	2100      	movs	r1, #0
   14622:	f242 002f 	movw	r0, #8239	; 0x202f
   14626:	f7ff ff7f 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   1462a:	4604      	mov	r4, r0
   1462c:	b160      	cbz	r0, 14648 <hci_le_read_max_data_len+0x30>
   1462e:	490c      	ldr	r1, [pc, #48]	; (14660 <hci_le_read_max_data_len+0x48>)
   14630:	4b0c      	ldr	r3, [pc, #48]	; (14664 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   14632:	480d      	ldr	r0, [pc, #52]	; (14668 <hci_le_read_max_data_len+0x50>)
   14634:	1ac9      	subs	r1, r1, r3
   14636:	08c9      	lsrs	r1, r1, #3
   14638:	0189      	lsls	r1, r1, #6
   1463a:	f041 0101 	orr.w	r1, r1, #1
   1463e:	f009 ffa0 	bl	1e582 <log_0>
}
   14642:	4620      	mov	r0, r4
   14644:	b002      	add	sp, #8
   14646:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   14648:	9801      	ldr	r0, [sp, #4]
   1464a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1464c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14650:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   14652:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   14656:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   14658:	f006 fae0 	bl	1ac1c <net_buf_unref>
	return 0;
   1465c:	e7f1      	b.n	14642 <hci_le_read_max_data_len+0x2a>
   1465e:	bf00      	nop
   14660:	0002357c 	.word	0x0002357c
   14664:	0002353c 	.word	0x0002353c
   14668:	00024df9 	.word	0x00024df9

0001466c <conn_auto_initiate>:
{
   1466c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1466e:	7b43      	ldrb	r3, [r0, #13]
   14670:	2b07      	cmp	r3, #7
{
   14672:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14674:	d121      	bne.n	146ba <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14676:	f3bf 8f5b 	dmb	ish
   1467a:	6843      	ldr	r3, [r0, #4]
   1467c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14680:	049b      	lsls	r3, r3, #18
   14682:	f100 0604 	add.w	r6, r0, #4
   14686:	d41a      	bmi.n	146be <conn_auto_initiate+0x52>
   14688:	78c3      	ldrb	r3, [r0, #3]
   1468a:	b123      	cbz	r3, 14696 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   1468c:	4b31      	ldr	r3, [pc, #196]	; (14754 <conn_auto_initiate+0xe8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   1468e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   14692:	071d      	lsls	r5, r3, #28
   14694:	d513      	bpl.n	146be <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   14696:	2102      	movs	r1, #2
   14698:	f242 0016 	movw	r0, #8214	; 0x2016
   1469c:	f7ff fde8 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   146a0:	4605      	mov	r5, r0
   146a2:	b160      	cbz	r0, 146be <conn_auto_initiate+0x52>
   146a4:	2102      	movs	r1, #2
   146a6:	3008      	adds	r0, #8
   146a8:	f00d fef2 	bl	22490 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   146ac:	8823      	ldrh	r3, [r4, #0]
   146ae:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   146b0:	4629      	mov	r1, r5
   146b2:	f242 0016 	movw	r0, #8214	; 0x2016
   146b6:	f7ff fe13 	bl	142e0 <bt_hci_cmd_send>
}
   146ba:	b004      	add	sp, #16
   146bc:	bd70      	pop	{r4, r5, r6, pc}
   146be:	f3bf 8f5b 	dmb	ish
   146c2:	6863      	ldr	r3, [r4, #4]
   146c4:	4d23      	ldr	r5, [pc, #140]	; (14754 <conn_auto_initiate+0xe8>)
   146c6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   146ca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   146ce:	f3c3 3100 	ubfx	r1, r3, #12, #1
   146d2:	d11a      	bne.n	1470a <conn_auto_initiate+0x9e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   146d4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   146d8:	07d8      	lsls	r0, r3, #31
   146da:	d516      	bpl.n	1470a <conn_auto_initiate+0x9e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   146dc:	2302      	movs	r3, #2
   146de:	9100      	str	r1, [sp, #0]
   146e0:	461a      	mov	r2, r3
   146e2:	4620      	mov	r0, r4
   146e4:	f00b ff8c 	bl	20600 <bt_le_set_phy>
		if (!err) {
   146e8:	4601      	mov	r1, r0
   146ea:	b920      	cbnz	r0, 146f6 <conn_auto_initiate+0x8a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   146ec:	2180      	movs	r1, #128	; 0x80
   146ee:	4630      	mov	r0, r6
   146f0:	f00b ff2f 	bl	20552 <atomic_or>
			return;
   146f4:	e7e1      	b.n	146ba <conn_auto_initiate+0x4e>
   146f6:	4a18      	ldr	r2, [pc, #96]	; (14758 <conn_auto_initiate+0xec>)
   146f8:	4b18      	ldr	r3, [pc, #96]	; (1475c <conn_auto_initiate+0xf0>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   146fa:	4819      	ldr	r0, [pc, #100]	; (14760 <conn_auto_initiate+0xf4>)
   146fc:	1ad2      	subs	r2, r2, r3
   146fe:	08d2      	lsrs	r2, r2, #3
   14700:	0192      	lsls	r2, r2, #6
   14702:	f042 0201 	orr.w	r2, r2, #1
   14706:	f009 ff49 	bl	1e59c <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1470a:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1470e:	069a      	lsls	r2, r3, #26
   14710:	d5d3      	bpl.n	146ba <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14712:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   14716:	689b      	ldr	r3, [r3, #8]
   14718:	079b      	lsls	r3, r3, #30
   1471a:	d5ce      	bpl.n	146ba <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1471c:	f10d 010e 	add.w	r1, sp, #14
   14720:	a803      	add	r0, sp, #12
   14722:	f7ff ff79 	bl	14618 <hci_le_read_max_data_len>
			if (!err) {
   14726:	2800      	cmp	r0, #0
   14728:	d1c7      	bne.n	146ba <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   1472a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1472e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   14732:	4620      	mov	r0, r4
   14734:	f00b ff47 	bl	205c6 <bt_le_set_data_len>
				if (err) {
   14738:	4601      	mov	r1, r0
   1473a:	2800      	cmp	r0, #0
   1473c:	d0bd      	beq.n	146ba <conn_auto_initiate+0x4e>
   1473e:	4b07      	ldr	r3, [pc, #28]	; (1475c <conn_auto_initiate+0xf0>)
   14740:	4a05      	ldr	r2, [pc, #20]	; (14758 <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
   14742:	4808      	ldr	r0, [pc, #32]	; (14764 <conn_auto_initiate+0xf8>)
   14744:	1ad2      	subs	r2, r2, r3
   14746:	08d2      	lsrs	r2, r2, #3
   14748:	0192      	lsls	r2, r2, #6
   1474a:	f042 0201 	orr.w	r2, r2, #1
   1474e:	f009 ff25 	bl	1e59c <log_1>
		}
   14752:	e7b2      	b.n	146ba <conn_auto_initiate+0x4e>
   14754:	200002a0 	.word	0x200002a0
   14758:	0002357c 	.word	0x0002357c
   1475c:	0002353c 	.word	0x0002353c
   14760:	00024e19 	.word	0x00024e19
   14764:	00024e33 	.word	0x00024e33

00014768 <le_phy_update_complete>:
{
   14768:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1476a:	6883      	ldr	r3, [r0, #8]
   1476c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   14770:	4628      	mov	r0, r5
   14772:	f001 fd31 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   14776:	4604      	mov	r4, r0
   14778:	b960      	cbnz	r0, 14794 <le_phy_update_complete+0x2c>
   1477a:	4b14      	ldr	r3, [pc, #80]	; (147cc <le_phy_update_complete+0x64>)
   1477c:	4a14      	ldr	r2, [pc, #80]	; (147d0 <le_phy_update_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1477e:	4815      	ldr	r0, [pc, #84]	; (147d4 <le_phy_update_complete+0x6c>)
   14780:	1ad2      	subs	r2, r2, r3
   14782:	08d2      	lsrs	r2, r2, #3
   14784:	0192      	lsls	r2, r2, #6
   14786:	4629      	mov	r1, r5
   14788:	f042 0201 	orr.w	r2, r2, #1
}
   1478c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14790:	f009 bf04 	b.w	1e59c <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   14794:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14796:	f3bf 8f5b 	dmb	ish
   1479a:	e850 3f00 	ldrex	r3, [r0]
   1479e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   147a2:	e840 2100 	strex	r1, r2, [r0]
   147a6:	2900      	cmp	r1, #0
   147a8:	d1f7      	bne.n	1479a <le_phy_update_complete+0x32>
   147aa:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   147ae:	061b      	lsls	r3, r3, #24
   147b0:	d506      	bpl.n	147c0 <le_phy_update_complete+0x58>
   147b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   147b6:	f00b fecc 	bl	20552 <atomic_or>
		conn_auto_initiate(conn);
   147ba:	4620      	mov	r0, r4
   147bc:	f7ff ff56 	bl	1466c <conn_auto_initiate>
	bt_conn_unref(conn);
   147c0:	4620      	mov	r0, r4
}
   147c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   147c6:	f00c ba28 	b.w	20c1a <bt_conn_unref>
   147ca:	bf00      	nop
   147cc:	0002353c 	.word	0x0002353c
   147d0:	0002357c 	.word	0x0002357c
   147d4:	00024ac4 	.word	0x00024ac4

000147d8 <le_remote_feat_complete>:
{
   147d8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   147da:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   147dc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   147e0:	4630      	mov	r0, r6
   147e2:	f001 fcf9 	bl	161d8 <bt_conn_lookup_handle>
	if (!conn) {
   147e6:	4604      	mov	r4, r0
   147e8:	b960      	cbnz	r0, 14804 <le_remote_feat_complete+0x2c>
   147ea:	4a10      	ldr	r2, [pc, #64]	; (1482c <le_remote_feat_complete+0x54>)
   147ec:	4b10      	ldr	r3, [pc, #64]	; (14830 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   147ee:	4811      	ldr	r0, [pc, #68]	; (14834 <le_remote_feat_complete+0x5c>)
   147f0:	1ad2      	subs	r2, r2, r3
   147f2:	08d2      	lsrs	r2, r2, #3
   147f4:	0192      	lsls	r2, r2, #6
   147f6:	4631      	mov	r1, r6
   147f8:	f042 0201 	orr.w	r2, r2, #1
}
   147fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14800:	f009 becc 	b.w	1e59c <log_1>
	if (!evt->status) {
   14804:	782b      	ldrb	r3, [r5, #0]
   14806:	b923      	cbnz	r3, 14812 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   14808:	2208      	movs	r2, #8
   1480a:	1ce9      	adds	r1, r5, #3
   1480c:	30ac      	adds	r0, #172	; 0xac
   1480e:	f00b fd12 	bl	20236 <memcpy>
   14812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   14816:	1d20      	adds	r0, r4, #4
   14818:	f00b fe9b 	bl	20552 <atomic_or>
	conn_auto_initiate(conn);
   1481c:	4620      	mov	r0, r4
   1481e:	f7ff ff25 	bl	1466c <conn_auto_initiate>
	bt_conn_unref(conn);
   14822:	4620      	mov	r0, r4
}
   14824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   14828:	f00c b9f7 	b.w	20c1a <bt_conn_unref>
   1482c:	0002357c 	.word	0x0002357c
   14830:	0002353c 	.word	0x0002353c
   14834:	00024ac4 	.word	0x00024ac4

00014838 <bt_hci_le_enh_conn_complete>:
{
   14838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1483c:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   14840:	4a7c      	ldr	r2, [pc, #496]	; (14a34 <bt_hci_le_enh_conn_complete+0x1fc>)
	handle |= ~BT_ACL_HANDLE_MASK;
   14842:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   14846:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   14848:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   1484c:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   1484e:	b29b      	uxth	r3, r3
   14850:	4299      	cmp	r1, r3
   14852:	f04f 0800 	mov.w	r8, #0
{
   14856:	b085      	sub	sp, #20
			disconnected_handles[i] = 0;
   14858:	bf04      	itt	eq
   1485a:	f8a2 8000 	strheq.w	r8, [r2]
			return true;
   1485e:	f04f 0801 	moveq.w	r8, #1
	bt_id_pending_keys_update();
   14862:	f000 fb1f 	bl	14ea4 <bt_id_pending_keys_update>
	if (evt->status) {
   14866:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14868:	fa1f f789 	uxth.w	r7, r9
	if (evt->status) {
   1486c:	b3b4      	cbz	r4, 148dc <bt_hci_le_enh_conn_complete+0xa4>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1486e:	2c3c      	cmp	r4, #60	; 0x3c
   14870:	d128      	bne.n	148c4 <bt_hci_le_enh_conn_complete+0x8c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14872:	f000 ff2b 	bl	156cc <bt_le_adv_lookup_legacy>
   14876:	f3bf 8f5b 	dmb	ish
   1487a:	3010      	adds	r0, #16
   1487c:	e850 3f00 	ldrex	r3, [r0]
   14880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14884:	e840 3200 	strex	r2, r3, [r0]
   14888:	2a00      	cmp	r2, #0
   1488a:	d1f7      	bne.n	1487c <bt_hci_le_enh_conn_complete+0x44>
   1488c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   14890:	2000      	movs	r0, #0
   14892:	f7ff f9c1 	bl	13c18 <find_pending_connect.part.0>
		if (!conn) {
   14896:	4605      	mov	r5, r0
   14898:	b960      	cbnz	r0, 148b4 <bt_hci_le_enh_conn_complete+0x7c>
   1489a:	4967      	ldr	r1, [pc, #412]	; (14a38 <bt_hci_le_enh_conn_complete+0x200>)
   1489c:	4b67      	ldr	r3, [pc, #412]	; (14a3c <bt_hci_le_enh_conn_complete+0x204>)
			BT_ERR("No pending slave connection");
   1489e:	4868      	ldr	r0, [pc, #416]	; (14a40 <bt_hci_le_enh_conn_complete+0x208>)
   148a0:	1ac9      	subs	r1, r1, r3
   148a2:	08c9      	lsrs	r1, r1, #3
   148a4:	0189      	lsls	r1, r1, #6
   148a6:	f041 0101 	orr.w	r1, r1, #1
   148aa:	f009 fe6a 	bl	1e582 <log_0>
}
   148ae:	b005      	add	sp, #20
   148b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   148b4:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   148b6:	2100      	movs	r1, #0
   148b8:	f001 fc9a 	bl	161f0 <bt_conn_set_state>
		bt_conn_unref(conn);
   148bc:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   148be:	f00c f9ac 	bl	20c1a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   148c2:	e7f4      	b.n	148ae <bt_hci_le_enh_conn_complete+0x76>
   148c4:	4b5d      	ldr	r3, [pc, #372]	; (14a3c <bt_hci_le_enh_conn_complete+0x204>)
   148c6:	4a5c      	ldr	r2, [pc, #368]	; (14a38 <bt_hci_le_enh_conn_complete+0x200>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   148c8:	485e      	ldr	r0, [pc, #376]	; (14a44 <bt_hci_le_enh_conn_complete+0x20c>)
   148ca:	1ad2      	subs	r2, r2, r3
   148cc:	08d2      	lsrs	r2, r2, #3
   148ce:	0192      	lsls	r2, r2, #6
   148d0:	f042 0202 	orr.w	r2, r2, #2
   148d4:	4621      	mov	r1, r4
   148d6:	f009 fe61 	bl	1e59c <log_1>
		return;
   148da:	e7e8      	b.n	148ae <bt_hci_le_enh_conn_complete+0x76>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   148dc:	792b      	ldrb	r3, [r5, #4]
   148de:	3b02      	subs	r3, #2
   148e0:	2b01      	cmp	r3, #1
   148e2:	f105 0604 	add.w	r6, r5, #4
   148e6:	d843      	bhi.n	14970 <bt_hci_le_enh_conn_complete+0x138>
	memcpy(dst, src, sizeof(*dst));
   148e8:	2207      	movs	r2, #7
   148ea:	4631      	mov	r1, r6
   148ec:	a802      	add	r0, sp, #8
   148ee:	f00b fca2 	bl	20236 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   148f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   148f6:	2206      	movs	r2, #6
   148f8:	3b02      	subs	r3, #2
   148fa:	f105 0111 	add.w	r1, r5, #17
   148fe:	f10d 0001 	add.w	r0, sp, #1
   14902:	f88d 3008 	strb.w	r3, [sp, #8]
   14906:	f00b fc96 	bl	20236 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1490a:	2301      	movs	r3, #1
   1490c:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   14910:	78eb      	ldrb	r3, [r5, #3]
   14912:	2b01      	cmp	r3, #1
   14914:	d116      	bne.n	14944 <bt_hci_le_enh_conn_complete+0x10c>
   14916:	a802      	add	r0, sp, #8
   14918:	f7ff f97e 	bl	13c18 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1491c:	78eb      	ldrb	r3, [r5, #3]
   1491e:	2b01      	cmp	r3, #1
   14920:	4604      	mov	r4, r0
   14922:	d10e      	bne.n	14942 <bt_hci_le_enh_conn_complete+0x10a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14924:	f000 fed2 	bl	156cc <bt_le_adv_lookup_legacy>
   14928:	f3bf 8f5b 	dmb	ish
   1492c:	3010      	adds	r0, #16
   1492e:	e850 3f00 	ldrex	r3, [r0]
   14932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14936:	e840 3200 	strex	r2, r3, [r0]
   1493a:	2a00      	cmp	r2, #0
   1493c:	d1f7      	bne.n	1492e <bt_hci_le_enh_conn_complete+0xf6>
   1493e:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   14942:	bb54      	cbnz	r4, 1499a <bt_hci_le_enh_conn_complete+0x162>
   14944:	4a3d      	ldr	r2, [pc, #244]	; (14a3c <bt_hci_le_enh_conn_complete+0x204>)
   14946:	4c3c      	ldr	r4, [pc, #240]	; (14a38 <bt_hci_le_enh_conn_complete+0x200>)
		BT_ERR("No pending conn for peer %s",
   14948:	4630      	mov	r0, r6
   1494a:	1aa4      	subs	r4, r4, r2
   1494c:	f7fe fbec 	bl	13128 <bt_addr_le_str_real>
   14950:	f7fc f932 	bl	10bb8 <z_log_strdup>
   14954:	08e4      	lsrs	r4, r4, #3
   14956:	01a4      	lsls	r4, r4, #6
   14958:	f044 0401 	orr.w	r4, r4, #1
   1495c:	4601      	mov	r1, r0
   1495e:	4622      	mov	r2, r4
   14960:	4839      	ldr	r0, [pc, #228]	; (14a48 <bt_hci_le_enh_conn_complete+0x210>)
   14962:	f009 fe1b 	bl	1e59c <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   14966:	211f      	movs	r1, #31
   14968:	4638      	mov	r0, r7
   1496a:	f00b fe11 	bl	20590 <bt_hci_disconnect>
		return;
   1496e:	e79e      	b.n	148ae <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   14970:	78eb      	ldrb	r3, [r5, #3]
   14972:	2b01      	cmp	r3, #1
   14974:	bf04      	itt	eq
   14976:	4b35      	ldreq	r3, [pc, #212]	; (14a4c <bt_hci_le_enh_conn_complete+0x214>)
   14978:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   1497c:	4631      	mov	r1, r6
   1497e:	4620      	mov	r0, r4
   14980:	f00b ff4e 	bl	20820 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   14984:	2207      	movs	r2, #7
   14986:	4601      	mov	r1, r0
   14988:	a802      	add	r0, sp, #8
   1498a:	f00b fc54 	bl	20236 <memcpy>
   1498e:	2207      	movs	r2, #7
   14990:	4631      	mov	r1, r6
   14992:	4668      	mov	r0, sp
   14994:	f00b fc4f 	bl	20236 <memcpy>
}
   14998:	e7ba      	b.n	14910 <bt_hci_le_enh_conn_complete+0xd8>
	conn->handle = handle;
   1499a:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1499c:	2207      	movs	r2, #7
   1499e:	f820 9b88 	strh.w	r9, [r0], #136
   149a2:	a902      	add	r1, sp, #8
   149a4:	f00b fc47 	bl	20236 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   149a8:	7e2a      	ldrb	r2, [r5, #24]
   149aa:	7deb      	ldrb	r3, [r5, #23]
   149ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   149b0:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   149b4:	7eaa      	ldrb	r2, [r5, #26]
   149b6:	7e6b      	ldrb	r3, [r5, #25]
   149b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   149bc:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   149c0:	7eeb      	ldrb	r3, [r5, #27]
   149c2:	7f2a      	ldrb	r2, [r5, #28]
   149c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   149c8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   149cc:	78eb      	ldrb	r3, [r5, #3]
   149ce:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   149d0:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   149d2:	2b01      	cmp	r3, #1
	conn->err = 0U;
   149d4:	7325      	strb	r5, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   149d6:	d11a      	bne.n	14a0e <bt_hci_le_enh_conn_complete+0x1d6>
   149d8:	2207      	movs	r2, #7
   149da:	4669      	mov	r1, sp
   149dc:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   149e0:	f00b fc29 	bl	20236 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   149e4:	f000 fe72 	bl	156cc <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   149e8:	7a21      	ldrb	r1, [r4, #8]
   149ea:	4e18      	ldr	r6, [pc, #96]	; (14a4c <bt_hci_le_enh_conn_complete+0x214>)
   149ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   149f0:	2207      	movs	r2, #7
   149f2:	4431      	add	r1, r6
   149f4:	f104 0096 	add.w	r0, r4, #150	; 0x96
   149f8:	f00b fc1d 	bl	20236 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   149fc:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   14a00:	462a      	mov	r2, r5
   14a02:	f001 0340 	and.w	r3, r1, #64	; 0x40
   14a06:	4313      	orrs	r3, r2
   14a08:	d001      	beq.n	14a0e <bt_hci_le_enh_conn_complete+0x1d6>
			bt_le_adv_resume();
   14a0a:	f000 ffa3 	bl	15954 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14a0e:	2107      	movs	r1, #7
   14a10:	4620      	mov	r0, r4
   14a12:	f001 fbed 	bl	161f0 <bt_conn_set_state>
	if (is_disconnected) {
   14a16:	f1b8 0f00 	cmp.w	r8, #0
   14a1a:	d003      	beq.n	14a24 <bt_hci_le_enh_conn_complete+0x1ec>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14a1c:	2101      	movs	r1, #1
   14a1e:	4620      	mov	r0, r4
   14a20:	f001 fbe6 	bl	161f0 <bt_conn_set_state>
	bt_conn_connected(conn);
   14a24:	4620      	mov	r0, r4
   14a26:	f00c f8b4 	bl	20b92 <bt_conn_connected>
	conn_auto_initiate(conn);
   14a2a:	4620      	mov	r0, r4
   14a2c:	f7ff fe1e 	bl	1466c <conn_auto_initiate>
	bt_conn_unref(conn);
   14a30:	4620      	mov	r0, r4
   14a32:	e744      	b.n	148be <bt_hci_le_enh_conn_complete+0x86>
   14a34:	20002154 	.word	0x20002154
   14a38:	0002357c 	.word	0x0002357c
   14a3c:	0002353c 	.word	0x0002353c
   14a40:	00024e4f 	.word	0x00024e4f
   14a44:	00024e6b 	.word	0x00024e6b
   14a48:	00024e84 	.word	0x00024e84
   14a4c:	200002a0 	.word	0x200002a0

00014a50 <bt_security_err_get>:
	switch (hci_err) {
   14a50:	2829      	cmp	r0, #41	; 0x29
   14a52:	bf9a      	itte	ls
   14a54:	4b01      	ldrls	r3, [pc, #4]	; (14a5c <bt_security_err_get+0xc>)
   14a56:	5c18      	ldrbls	r0, [r3, r0]
{
   14a58:	2008      	movhi	r0, #8
}
   14a5a:	4770      	bx	lr
   14a5c:	000250c3 	.word	0x000250c3

00014a60 <hci_event_prio>:
{
   14a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a64:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   14a66:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   14a6a:	4630      	mov	r0, r6
   14a6c:	f00d fd47 	bl	224fe <net_buf_simple_headroom>
	state->len = buf->len;
   14a70:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14a74:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14a78:	4605      	mov	r5, r0
   14a7a:	d80c      	bhi.n	14a96 <hci_event_prio+0x36>
   14a7c:	4a1c      	ldr	r2, [pc, #112]	; (14af0 <hci_event_prio+0x90>)
   14a7e:	491d      	ldr	r1, [pc, #116]	; (14af4 <hci_event_prio+0x94>)
   14a80:	481d      	ldr	r0, [pc, #116]	; (14af8 <hci_event_prio+0x98>)
   14a82:	f640 43dc 	movw	r3, #3292	; 0xcdc
   14a86:	f009 f937 	bl	1dcf8 <printk>
   14a8a:	4040      	eors	r0, r0
   14a8c:	f380 8811 	msr	BASEPRI, r0
   14a90:	f04f 0003 	mov.w	r0, #3
   14a94:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   14a96:	2102      	movs	r1, #2
   14a98:	4630      	mov	r0, r6
   14a9a:	f00d fd20 	bl	224de <net_buf_simple_pull_mem>
   14a9e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14aa0:	7800      	ldrb	r0, [r0, #0]
   14aa2:	f00b fd2c 	bl	204fe <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14aa6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14aa8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14aaa:	d40c      	bmi.n	14ac6 <hci_event_prio+0x66>
   14aac:	4a10      	ldr	r2, [pc, #64]	; (14af0 <hci_event_prio+0x90>)
   14aae:	4913      	ldr	r1, [pc, #76]	; (14afc <hci_event_prio+0x9c>)
   14ab0:	4811      	ldr	r0, [pc, #68]	; (14af8 <hci_event_prio+0x98>)
   14ab2:	f44f 634e 	mov.w	r3, #3296	; 0xce0
   14ab6:	f009 f91f 	bl	1dcf8 <printk>
   14aba:	4040      	eors	r0, r0
   14abc:	f380 8811 	msr	BASEPRI, r0
   14ac0:	f04f 0003 	mov.w	r0, #3
   14ac4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14ac6:	2305      	movs	r3, #5
   14ac8:	4a0d      	ldr	r2, [pc, #52]	; (14b00 <hci_event_prio+0xa0>)
   14aca:	7838      	ldrb	r0, [r7, #0]
   14acc:	4621      	mov	r1, r4
   14ace:	f7ff f953 	bl	13d78 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14ad2:	07b3      	lsls	r3, r6, #30
   14ad4:	d507      	bpl.n	14ae6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   14ad6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14ad8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14adc:	fa10 f585 	uxtah	r5, r0, r5
   14ae0:	60a5      	str	r5, [r4, #8]
}
   14ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14ae6:	4620      	mov	r0, r4
}
   14ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14aec:	f006 b896 	b.w	1ac1c <net_buf_unref>
   14af0:	00024c00 	.word	0x00024c00
   14af4:	00024c34 	.word	0x00024c34
   14af8:	00024c4d 	.word	0x00024c4d
   14afc:	00024ea0 	.word	0x00024ea0
   14b00:	00023b64 	.word	0x00023b64

00014b04 <bt_recv>:
{
   14b04:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14b06:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   14b08:	2901      	cmp	r1, #1
{
   14b0a:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   14b0c:	d007      	beq.n	14b1e <bt_recv+0x1a>
   14b0e:	2903      	cmp	r1, #3
   14b10:	d113      	bne.n	14b3a <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   14b12:	4812      	ldr	r0, [pc, #72]	; (14b5c <bt_recv+0x58>)
   14b14:	4629      	mov	r1, r5
   14b16:	f00d fc88 	bl	2242a <net_buf_put>
		return 0;
   14b1a:	2000      	movs	r0, #0
   14b1c:	e00c      	b.n	14b38 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14b1e:	6883      	ldr	r3, [r0, #8]
   14b20:	7818      	ldrb	r0, [r3, #0]
   14b22:	f00b fcec 	bl	204fe <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14b26:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14b28:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14b2a:	d502      	bpl.n	14b32 <bt_recv+0x2e>
			hci_event_prio(buf);
   14b2c:	4628      	mov	r0, r5
   14b2e:	f7ff ff97 	bl	14a60 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14b32:	f014 0002 	ands.w	r0, r4, #2
   14b36:	d1ec      	bne.n	14b12 <bt_recv+0xe>
}
   14b38:	bd38      	pop	{r3, r4, r5, pc}
   14b3a:	4b09      	ldr	r3, [pc, #36]	; (14b60 <bt_recv+0x5c>)
   14b3c:	4a09      	ldr	r2, [pc, #36]	; (14b64 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   14b3e:	480a      	ldr	r0, [pc, #40]	; (14b68 <bt_recv+0x64>)
   14b40:	1ad2      	subs	r2, r2, r3
   14b42:	08d2      	lsrs	r2, r2, #3
   14b44:	0192      	lsls	r2, r2, #6
   14b46:	f042 0201 	orr.w	r2, r2, #1
   14b4a:	f009 fd27 	bl	1e59c <log_1>
		net_buf_unref(buf);
   14b4e:	4628      	mov	r0, r5
   14b50:	f006 f864 	bl	1ac1c <net_buf_unref>
		return -EINVAL;
   14b54:	f06f 0015 	mvn.w	r0, #21
   14b58:	e7ee      	b.n	14b38 <bt_recv+0x34>
   14b5a:	bf00      	nop
   14b5c:	200003ac 	.word	0x200003ac
   14b60:	0002353c 	.word	0x0002353c
   14b64:	0002357c 	.word	0x0002357c
   14b68:	00024eb9 	.word	0x00024eb9

00014b6c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14b6c:	4a08      	ldr	r2, [pc, #32]	; (14b90 <bt_hci_driver_register+0x24>)
{
   14b6e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   14b70:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   14b74:	b930      	cbnz	r0, 14b84 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   14b76:	68d9      	ldr	r1, [r3, #12]
   14b78:	b139      	cbz	r1, 14b8a <bt_hci_driver_register+0x1e>
   14b7a:	6919      	ldr	r1, [r3, #16]
   14b7c:	b129      	cbz	r1, 14b8a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   14b7e:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   14b82:	4770      	bx	lr
		return -EALREADY;
   14b84:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14b88:	4770      	bx	lr
		return -EINVAL;
   14b8a:	f06f 0015 	mvn.w	r0, #21
}
   14b8e:	4770      	bx	lr
   14b90:	200002a0 	.word	0x200002a0

00014b94 <bt_finalize_init>:
{
   14b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14b98:	4c2b      	ldr	r4, [pc, #172]	; (14c48 <bt_finalize_init+0xb4>)
   14b9a:	4d2c      	ldr	r5, [pc, #176]	; (14c4c <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   14b9c:	4e2c      	ldr	r6, [pc, #176]	; (14c50 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
   14b9e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 14c68 <bt_finalize_init+0xd4>
{
   14ba2:	b087      	sub	sp, #28
   14ba4:	2102      	movs	r1, #2
   14ba6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   14baa:	f00b fcd2 	bl	20552 <atomic_or>
   14bae:	4b29      	ldr	r3, [pc, #164]	; (14c54 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   14bb0:	4929      	ldr	r1, [pc, #164]	; (14c58 <bt_finalize_init+0xc4>)
   14bb2:	1aed      	subs	r5, r5, r3
   14bb4:	79e3      	ldrb	r3, [r4, #7]
   14bb6:	4620      	mov	r0, r4
   14bb8:	2b01      	cmp	r3, #1
   14bba:	bf88      	it	hi
   14bbc:	460e      	movhi	r6, r1
   14bbe:	f7fe fab3 	bl	13128 <bt_addr_le_str_real>
   14bc2:	f7fb fff9 	bl	10bb8 <z_log_strdup>
   14bc6:	08ed      	lsrs	r5, r5, #3
   14bc8:	01ad      	lsls	r5, r5, #6
   14bca:	f045 0703 	orr.w	r7, r5, #3
   14bce:	4602      	mov	r2, r0
   14bd0:	4631      	mov	r1, r6
   14bd2:	4822      	ldr	r0, [pc, #136]	; (14c5c <bt_finalize_init+0xc8>)
   14bd4:	463b      	mov	r3, r7
   14bd6:	f009 fcf5 	bl	1e5c4 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   14bda:	46a0      	mov	r8, r4
   14bdc:	2601      	movs	r6, #1
   14bde:	79e3      	ldrb	r3, [r4, #7]
   14be0:	429e      	cmp	r6, r3
   14be2:	f108 0807 	add.w	r8, r8, #7
   14be6:	db22      	blt.n	14c2e <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   14be8:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
   14bec:	4630      	mov	r0, r6
   14bee:	f7fe fe57 	bl	138a0 <ver_str>
   14bf2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   14bf4:	9304      	str	r3, [sp, #16]
   14bf6:	f045 0503 	orr.w	r5, r5, #3
   14bfa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   14bfc:	9305      	str	r3, [sp, #20]
   14bfe:	e9cd 0602 	strd	r0, r6, [sp, #8]
   14c02:	462b      	mov	r3, r5
   14c04:	a902      	add	r1, sp, #8
   14c06:	2204      	movs	r2, #4
   14c08:	4815      	ldr	r0, [pc, #84]	; (14c60 <bt_finalize_init+0xcc>)
   14c0a:	f009 fd10 	bl	1e62e <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   14c0e:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
   14c12:	4630      	mov	r0, r6
   14c14:	f7fe fe44 	bl	138a0 <ver_str>
   14c18:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   14c1a:	f8ad 5000 	strh.w	r5, [sp]
   14c1e:	4601      	mov	r1, r0
   14c20:	4632      	mov	r2, r6
   14c22:	4810      	ldr	r0, [pc, #64]	; (14c64 <bt_finalize_init+0xd0>)
   14c24:	f009 fce7 	bl	1e5f6 <log_3>
}
   14c28:	b007      	add	sp, #28
   14c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   14c2e:	4640      	mov	r0, r8
   14c30:	f7fe fa7a 	bl	13128 <bt_addr_le_str_real>
   14c34:	f7fb ffc0 	bl	10bb8 <z_log_strdup>
   14c38:	4631      	mov	r1, r6
   14c3a:	4602      	mov	r2, r0
   14c3c:	463b      	mov	r3, r7
   14c3e:	4648      	mov	r0, r9
   14c40:	f009 fcc0 	bl	1e5c4 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   14c44:	3601      	adds	r6, #1
   14c46:	e7ca      	b.n	14bde <bt_finalize_init+0x4a>
   14c48:	200002a0 	.word	0x200002a0
   14c4c:	0002357c 	.word	0x0002357c
   14c50:	00024019 	.word	0x00024019
   14c54:	0002353c 	.word	0x0002353c
   14c58:	00024ecd 	.word	0x00024ecd
   14c5c:	00024ed1 	.word	0x00024ed1
   14c60:	00024ef1 	.word	0x00024ef1
   14c64:	00024f2f 	.word	0x00024f2f
   14c68:	00024ee0 	.word	0x00024ee0

00014c6c <init_work>:
{
   14c6c:	b510      	push	{r4, lr}
	err = bt_init();
   14c6e:	f7fa fdf3 	bl	f858 <bt_init>
	if (ready_cb) {
   14c72:	4b03      	ldr	r3, [pc, #12]	; (14c80 <init_work+0x14>)
   14c74:	681b      	ldr	r3, [r3, #0]
   14c76:	b113      	cbz	r3, 14c7e <init_work+0x12>
}
   14c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   14c7c:	4718      	bx	r3
}
   14c7e:	bd10      	pop	{r4, pc}
   14c80:	20001edc 	.word	0x20001edc

00014c84 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   14c84:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   14c88:	4d38      	ldr	r5, [pc, #224]	; (14d6c <bt_enable+0xe8>)
   14c8a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   14c8e:	b088      	sub	sp, #32
   14c90:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   14c92:	b97b      	cbnz	r3, 14cb4 <bt_enable+0x30>
   14c94:	4b36      	ldr	r3, [pc, #216]	; (14d70 <bt_enable+0xec>)
   14c96:	4937      	ldr	r1, [pc, #220]	; (14d74 <bt_enable+0xf0>)
		BT_ERR("No HCI driver registered");
   14c98:	4837      	ldr	r0, [pc, #220]	; (14d78 <bt_enable+0xf4>)
   14c9a:	1ac9      	subs	r1, r1, r3
   14c9c:	08c9      	lsrs	r1, r1, #3
   14c9e:	0189      	lsls	r1, r1, #6
   14ca0:	f041 0101 	orr.w	r1, r1, #1
   14ca4:	f009 fc6d 	bl	1e582 <log_0>
		return -ENODEV;
   14ca8:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   14cac:	4620      	mov	r0, r4
   14cae:	b008      	add	sp, #32
   14cb0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14cb4:	2101      	movs	r1, #1
   14cb6:	f105 0098 	add.w	r0, r5, #152	; 0x98
   14cba:	f00b fc4a 	bl	20552 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14cbe:	07c3      	lsls	r3, r0, #31
   14cc0:	d451      	bmi.n	14d66 <bt_enable+0xe2>
		err = bt_settings_init();
   14cc2:	f7fe fd37 	bl	13734 <bt_settings_init>
		if (err) {
   14cc6:	4604      	mov	r4, r0
   14cc8:	2800      	cmp	r0, #0
   14cca:	d1ef      	bne.n	14cac <bt_enable+0x28>
	ready_cb = cb;
   14ccc:	4b2b      	ldr	r3, [pc, #172]	; (14d7c <bt_enable+0xf8>)
   14cce:	f04f 0800 	mov.w	r8, #0
   14cd2:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   14cd4:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14cd8:	f06f 0308 	mvn.w	r3, #8
   14cdc:	e9cd 0302 	strd	r0, r3, [sp, #8]
   14ce0:	e9cd 0000 	strd	r0, r0, [sp]
   14ce4:	9004      	str	r0, [sp, #16]
   14ce6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   14cea:	4b25      	ldr	r3, [pc, #148]	; (14d80 <bt_enable+0xfc>)
   14cec:	4925      	ldr	r1, [pc, #148]	; (14d84 <bt_enable+0x100>)
   14cee:	4826      	ldr	r0, [pc, #152]	; (14d88 <bt_enable+0x104>)
   14cf0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14cf4:	f007 fd2c 	bl	1c750 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14cf8:	4924      	ldr	r1, [pc, #144]	; (14d8c <bt_enable+0x108>)
   14cfa:	4823      	ldr	r0, [pc, #140]	; (14d88 <bt_enable+0x104>)
   14cfc:	f00d fdf0 	bl	228e0 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14d00:	f06f 0307 	mvn.w	r3, #7
   14d04:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14d08:	e9cd 8906 	strd	r8, r9, [sp, #24]
   14d0c:	e9cd 4400 	strd	r4, r4, [sp]
   14d10:	4b1f      	ldr	r3, [pc, #124]	; (14d90 <bt_enable+0x10c>)
   14d12:	4920      	ldr	r1, [pc, #128]	; (14d94 <bt_enable+0x110>)
   14d14:	9404      	str	r4, [sp, #16]
   14d16:	f640 0298 	movw	r2, #2200	; 0x898
   14d1a:	481f      	ldr	r0, [pc, #124]	; (14d98 <bt_enable+0x114>)
   14d1c:	f007 fd18 	bl	1c750 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14d20:	491e      	ldr	r1, [pc, #120]	; (14d9c <bt_enable+0x118>)
   14d22:	481d      	ldr	r0, [pc, #116]	; (14d98 <bt_enable+0x114>)
   14d24:	f00d fddc 	bl	228e0 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   14d28:	f7fe fbe4 	bl	134f4 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   14d2c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   14d30:	68db      	ldr	r3, [r3, #12]
   14d32:	4798      	blx	r3
	if (err) {
   14d34:	4604      	mov	r4, r0
   14d36:	b158      	cbz	r0, 14d50 <bt_enable+0xcc>
   14d38:	4b0d      	ldr	r3, [pc, #52]	; (14d70 <bt_enable+0xec>)
   14d3a:	4a0e      	ldr	r2, [pc, #56]	; (14d74 <bt_enable+0xf0>)
   14d3c:	1ad2      	subs	r2, r2, r3
   14d3e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   14d40:	0192      	lsls	r2, r2, #6
   14d42:	4601      	mov	r1, r0
   14d44:	f042 0201 	orr.w	r2, r2, #1
   14d48:	4815      	ldr	r0, [pc, #84]	; (14da0 <bt_enable+0x11c>)
   14d4a:	f009 fc27 	bl	1e59c <log_1>
		return err;
   14d4e:	e7ad      	b.n	14cac <bt_enable+0x28>
	if (!cb) {
   14d50:	b926      	cbnz	r6, 14d5c <bt_enable+0xd8>
}
   14d52:	b008      	add	sp, #32
   14d54:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   14d58:	f7fa bd7e 	b.w	f858 <bt_init>
	k_work_submit(&bt_dev.init);
   14d5c:	f105 0088 	add.w	r0, r5, #136	; 0x88
   14d60:	f008 f820 	bl	1cda4 <k_work_submit>
	return 0;
   14d64:	e7a2      	b.n	14cac <bt_enable+0x28>
		return -EALREADY;
   14d66:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14d6a:	e79f      	b.n	14cac <bt_enable+0x28>
   14d6c:	200002a0 	.word	0x200002a0
   14d70:	0002353c 	.word	0x0002353c
   14d74:	0002357c 	.word	0x0002357c
   14d78:	0002507b 	.word	0x0002507b
   14d7c:	20001edc 	.word	0x20001edc
   14d80:	00014069 	.word	0x00014069
   14d84:	20003ac0 	.word	0x20003ac0
   14d88:	200015c8 	.word	0x200015c8
   14d8c:	00025094 	.word	0x00025094
   14d90:	00013dfd 	.word	0x00013dfd
   14d94:	20003200 	.word	0x20003200
   14d98:	20001548 	.word	0x20001548
   14d9c:	0002509a 	.word	0x0002509a
   14da0:	000250a0 	.word	0x000250a0

00014da4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14da4:	4800      	ldr	r0, [pc, #0]	; (14da8 <bt_get_name+0x4>)
   14da6:	4770      	bx	lr
   14da8:	000250bc 	.word	0x000250bc

00014dac <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14dae:	4f0b      	ldr	r7, [pc, #44]	; (14ddc <id_find+0x30>)
{
   14db0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14db2:	2500      	movs	r5, #0
   14db4:	79fb      	ldrb	r3, [r7, #7]
   14db6:	b2ec      	uxtb	r4, r5
   14db8:	42a3      	cmp	r3, r4
   14dba:	d802      	bhi.n	14dc2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14dbc:	f06f 0401 	mvn.w	r4, #1
   14dc0:	e009      	b.n	14dd6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   14dc2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   14dc6:	2207      	movs	r2, #7
   14dc8:	4439      	add	r1, r7
   14dca:	4630      	mov	r0, r6
   14dcc:	f00b fa23 	bl	20216 <memcmp>
   14dd0:	3501      	adds	r5, #1
   14dd2:	2800      	cmp	r0, #0
   14dd4:	d1ee      	bne.n	14db4 <id_find+0x8>
}
   14dd6:	4620      	mov	r0, r4
   14dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14dda:	bf00      	nop
   14ddc:	200002a0 	.word	0x200002a0

00014de0 <set_random_address>:
{
   14de0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   14de2:	4914      	ldr	r1, [pc, #80]	; (14e34 <set_random_address+0x54>)
   14de4:	2206      	movs	r2, #6
   14de6:	4605      	mov	r5, r0
   14de8:	f00b fa15 	bl	20216 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14dec:	4604      	mov	r4, r0
   14dee:	b1e0      	cbz	r0, 14e2a <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14df0:	2106      	movs	r1, #6
   14df2:	f242 0005 	movw	r0, #8197	; 0x2005
   14df6:	f7ff fa3b 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   14dfa:	4604      	mov	r4, r0
   14dfc:	b1b8      	cbz	r0, 14e2e <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14dfe:	2206      	movs	r2, #6
   14e00:	4629      	mov	r1, r5
   14e02:	3008      	adds	r0, #8
   14e04:	f00d fb4a 	bl	2249c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14e08:	4621      	mov	r1, r4
   14e0a:	2200      	movs	r2, #0
   14e0c:	f242 0005 	movw	r0, #8197	; 0x2005
   14e10:	f7ff fb8a 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   14e14:	4604      	mov	r4, r0
   14e16:	b940      	cbnz	r0, 14e2a <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   14e18:	2206      	movs	r2, #6
   14e1a:	4806      	ldr	r0, [pc, #24]	; (14e34 <set_random_address+0x54>)
   14e1c:	4629      	mov	r1, r5
   14e1e:	f00b fa0a 	bl	20236 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14e22:	4b05      	ldr	r3, [pc, #20]	; (14e38 <set_random_address+0x58>)
   14e24:	2201      	movs	r2, #1
   14e26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   14e2a:	4620      	mov	r0, r4
   14e2c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14e2e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14e32:	e7fa      	b.n	14e2a <set_random_address+0x4a>
   14e34:	200002cd 	.word	0x200002cd
   14e38:	200002a0 	.word	0x200002a0

00014e3c <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14e3c:	b530      	push	{r4, r5, lr}
   14e3e:	4c17      	ldr	r4, [pc, #92]	; (14e9c <id_create.isra.0+0x60>)
   14e40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14e44:	b085      	sub	sp, #20
   14e46:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14e48:	460d      	mov	r5, r1
   14e4a:	b1b1      	cbz	r1, 14e7a <id_create.isra.0+0x3e>
   14e4c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14e4e:	2207      	movs	r2, #7
   14e50:	a902      	add	r1, sp, #8
   14e52:	4628      	mov	r0, r5
   14e54:	9302      	str	r3, [sp, #8]
   14e56:	f8cd 300b 	str.w	r3, [sp, #11]
   14e5a:	f00b f9dc 	bl	20216 <memcmp>
   14e5e:	b160      	cbz	r0, 14e7a <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14e60:	4629      	mov	r1, r5
   14e62:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14e64:	f00b fc59 	bl	2071a <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14e68:	480d      	ldr	r0, [pc, #52]	; (14ea0 <id_create.isra.0+0x64>)
   14e6a:	f00b fc59 	bl	20720 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14e6e:	0783      	lsls	r3, r0, #30
   14e70:	d501      	bpl.n	14e76 <id_create.isra.0+0x3a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   14e72:	f7fe fc19 	bl	136a8 <bt_settings_save_id>
	}
}
   14e76:	b005      	add	sp, #20
   14e78:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   14e7a:	4668      	mov	r0, sp
   14e7c:	f00b fb31 	bl	204e2 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   14e80:	4668      	mov	r0, sp
   14e82:	f7ff ff93 	bl	14dac <id_find>
   14e86:	2800      	cmp	r0, #0
   14e88:	daf7      	bge.n	14e7a <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14e8a:	4669      	mov	r1, sp
   14e8c:	4620      	mov	r0, r4
   14e8e:	f00b fc44 	bl	2071a <bt_addr_le_copy>
		if (addr) {
   14e92:	2d00      	cmp	r5, #0
   14e94:	d0e8      	beq.n	14e68 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14e96:	4621      	mov	r1, r4
   14e98:	4628      	mov	r0, r5
   14e9a:	e7e3      	b.n	14e64 <id_create.isra.0+0x28>
   14e9c:	200002a0 	.word	0x200002a0
   14ea0:	20000338 	.word	0x20000338

00014ea4 <bt_id_pending_keys_update>:
   14ea4:	4b0a      	ldr	r3, [pc, #40]	; (14ed0 <bt_id_pending_keys_update+0x2c>)
   14ea6:	f3bf 8f5b 	dmb	ish
   14eaa:	e853 2f00 	ldrex	r2, [r3]
   14eae:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   14eb2:	e843 1000 	strex	r0, r1, [r3]
   14eb6:	2800      	cmp	r0, #0
   14eb8:	d1f7      	bne.n	14eaa <bt_id_pending_keys_update+0x6>
   14eba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   14ebe:	0493      	lsls	r3, r2, #18
   14ec0:	d504      	bpl.n	14ecc <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   14ec2:	4904      	ldr	r1, [pc, #16]	; (14ed4 <bt_id_pending_keys_update+0x30>)
   14ec4:	2200      	movs	r2, #0
   14ec6:	2002      	movs	r0, #2
   14ec8:	f005 bc78 	b.w	1a7bc <bt_keys_foreach>
}
   14ecc:	4770      	bx	lr
   14ece:	bf00      	nop
   14ed0:	20000338 	.word	0x20000338
   14ed4:	00020859 	.word	0x00020859

00014ed8 <bt_id_add>:
{
   14ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14eda:	4e5e      	ldr	r6, [pc, #376]	; (15054 <bt_id_add+0x17c>)
   14edc:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
   14ee0:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
   14ee4:	4604      	mov	r4, r0
   14ee6:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14ee8:	b10a      	cbz	r2, 14eee <bt_id_add+0x16>
   14eea:	429a      	cmp	r2, r3
   14eec:	d208      	bcs.n	14f00 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   14eee:	3301      	adds	r3, #1
   14ef0:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   14ef4:	7a23      	ldrb	r3, [r4, #8]
   14ef6:	f043 0304 	orr.w	r3, r3, #4
   14efa:	7223      	strb	r3, [r4, #8]
}
   14efc:	b003      	add	sp, #12
   14efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   14f00:	2100      	movs	r1, #0
   14f02:	2206      	movs	r2, #6
   14f04:	4608      	mov	r0, r1
   14f06:	f001 fa9b 	bl	16440 <bt_conn_lookup_state_le>
	if (conn) {
   14f0a:	4607      	mov	r7, r0
   14f0c:	b198      	cbz	r0, 14f36 <bt_id_add+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14f0e:	f3bf 8f5b 	dmb	ish
   14f12:	3698      	adds	r6, #152	; 0x98
   14f14:	e856 3f00 	ldrex	r3, [r6]
   14f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14f1c:	e846 3200 	strex	r2, r3, [r6]
   14f20:	2a00      	cmp	r2, #0
   14f22:	d1f7      	bne.n	14f14 <bt_id_add+0x3c>
   14f24:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   14f28:	7a23      	ldrb	r3, [r4, #8]
   14f2a:	f043 0301 	orr.w	r3, r3, #1
   14f2e:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   14f30:	f00b fe73 	bl	20c1a <bt_conn_unref>
		return;
   14f34:	e7e2      	b.n	14efc <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   14f36:	4601      	mov	r1, r0
   14f38:	4847      	ldr	r0, [pc, #284]	; (15058 <bt_id_add+0x180>)
   14f3a:	f000 fbc1 	bl	156c0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   14f3e:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
   14f42:	b173      	cbz	r3, 14f62 <bt_id_add+0x8a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   14f44:	4638      	mov	r0, r7
   14f46:	f00b fbf1 	bl	2072c <addr_res_enable>
		if (err) {
   14f4a:	b150      	cbz	r0, 14f62 <bt_id_add+0x8a>
   14f4c:	4943      	ldr	r1, [pc, #268]	; (1505c <bt_id_add+0x184>)
   14f4e:	4b44      	ldr	r3, [pc, #272]	; (15060 <bt_id_add+0x188>)
			BT_WARN("Failed to disable address resolution");
   14f50:	4844      	ldr	r0, [pc, #272]	; (15064 <bt_id_add+0x18c>)
   14f52:	1ac9      	subs	r1, r1, r3
   14f54:	08c9      	lsrs	r1, r1, #3
   14f56:	0189      	lsls	r1, r1, #6
   14f58:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   14f5c:	f009 fb11 	bl	1e582 <log_0>
	if (err) {
   14f60:	e023      	b.n	14faa <bt_id_add+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   14f62:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   14f66:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14f6a:	429a      	cmp	r2, r3
   14f6c:	d125      	bne.n	14fba <bt_id_add+0xe2>
   14f6e:	4b3c      	ldr	r3, [pc, #240]	; (15060 <bt_id_add+0x188>)
   14f70:	4e3a      	ldr	r6, [pc, #232]	; (1505c <bt_id_add+0x184>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   14f72:	483d      	ldr	r0, [pc, #244]	; (15068 <bt_id_add+0x190>)
   14f74:	1af6      	subs	r6, r6, r3
   14f76:	08f6      	lsrs	r6, r6, #3
   14f78:	01b6      	lsls	r6, r6, #6
   14f7a:	f046 0102 	orr.w	r1, r6, #2
   14f7e:	f009 fb00 	bl	1e582 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   14f82:	2200      	movs	r2, #0
   14f84:	4611      	mov	r1, r2
   14f86:	f242 0029 	movw	r0, #8233	; 0x2029
   14f8a:	f7ff facd 	bl	14528 <bt_hci_cmd_send_sync>
		if (err) {
   14f8e:	b118      	cbz	r0, 14f98 <bt_id_add+0xc0>
			BT_ERR("Failed to clear resolution list");
   14f90:	4836      	ldr	r0, [pc, #216]	; (1506c <bt_id_add+0x194>)
   14f92:	f046 0101 	orr.w	r1, r6, #1
   14f96:	e7e1      	b.n	14f5c <bt_id_add+0x84>
		bt_dev.le.rl_entries++;
   14f98:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14f9c:	3301      	adds	r3, #1
   14f9e:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   14fa2:	7a23      	ldrb	r3, [r4, #8]
   14fa4:	f043 0304 	orr.w	r3, r3, #4
   14fa8:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   14faa:	2001      	movs	r0, #1
   14fac:	f00b fbbe 	bl	2072c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   14fb0:	482f      	ldr	r0, [pc, #188]	; (15070 <bt_id_add+0x198>)
   14fb2:	2100      	movs	r1, #0
   14fb4:	f000 fb84 	bl	156c0 <bt_le_ext_adv_foreach>
   14fb8:	e7a0      	b.n	14efc <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   14fba:	1c67      	adds	r7, r4, #1
   14fbc:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   14fc0:	4638      	mov	r0, r7
   14fc2:	f00b fbcb 	bl	2075c <hci_id_add.isra.0>
	if (err) {
   14fc6:	4606      	mov	r6, r0
   14fc8:	b140      	cbz	r0, 14fdc <bt_id_add+0x104>
   14fca:	4924      	ldr	r1, [pc, #144]	; (1505c <bt_id_add+0x184>)
   14fcc:	4b24      	ldr	r3, [pc, #144]	; (15060 <bt_id_add+0x188>)
		BT_ERR("Failed to add IRK to controller");
   14fce:	4829      	ldr	r0, [pc, #164]	; (15074 <bt_id_add+0x19c>)
   14fd0:	1ac9      	subs	r1, r1, r3
   14fd2:	08c9      	lsrs	r1, r1, #3
   14fd4:	0189      	lsls	r1, r1, #6
   14fd6:	f041 0101 	orr.w	r1, r1, #1
   14fda:	e7bf      	b.n	14f5c <bt_id_add+0x84>
	bt_dev.le.rl_entries++;
   14fdc:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14fe0:	3301      	adds	r3, #1
   14fe2:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   14fe6:	7a23      	ldrb	r3, [r4, #8]
   14fe8:	f043 0304 	orr.w	r3, r3, #4
   14fec:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   14fee:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
   14ff2:	075b      	lsls	r3, r3, #29
   14ff4:	d408      	bmi.n	15008 <bt_id_add+0x130>
   14ff6:	4919      	ldr	r1, [pc, #100]	; (1505c <bt_id_add+0x184>)
   14ff8:	4b19      	ldr	r3, [pc, #100]	; (15060 <bt_id_add+0x188>)
		BT_WARN("Set privacy mode command is not supported");
   14ffa:	481f      	ldr	r0, [pc, #124]	; (15078 <bt_id_add+0x1a0>)
   14ffc:	1ac9      	subs	r1, r1, r3
   14ffe:	08c9      	lsrs	r1, r1, #3
   15000:	0189      	lsls	r1, r1, #6
   15002:	f041 0102 	orr.w	r1, r1, #2
   15006:	e7a9      	b.n	14f5c <bt_id_add+0x84>
	bt_addr_le_copy(&cp.id_addr, addr);
   15008:	4639      	mov	r1, r7
   1500a:	4668      	mov	r0, sp
   1500c:	f00b fb85 	bl	2071a <bt_addr_le_copy>
	cp.mode = mode;
   15010:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   15012:	2108      	movs	r1, #8
   15014:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   15018:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1501c:	f7ff f928 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   15020:	4604      	mov	r4, r0
   15022:	b940      	cbnz	r0, 15036 <bt_id_add+0x15e>
   15024:	490d      	ldr	r1, [pc, #52]	; (1505c <bt_id_add+0x184>)
   15026:	4b0e      	ldr	r3, [pc, #56]	; (15060 <bt_id_add+0x188>)
		BT_ERR("Failed to set privacy mode");
   15028:	4814      	ldr	r0, [pc, #80]	; (1507c <bt_id_add+0x1a4>)
   1502a:	1ac9      	subs	r1, r1, r3
   1502c:	08c9      	lsrs	r1, r1, #3
   1502e:	0189      	lsls	r1, r1, #6
   15030:	f041 0101 	orr.w	r1, r1, #1
   15034:	e792      	b.n	14f5c <bt_id_add+0x84>
   15036:	2208      	movs	r2, #8
   15038:	4669      	mov	r1, sp
   1503a:	4410      	add	r0, r2
   1503c:	f00d fa2e 	bl	2249c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   15040:	4632      	mov	r2, r6
   15042:	4621      	mov	r1, r4
   15044:	f242 004e 	movw	r0, #8270	; 0x204e
   15048:	f7ff fa6e 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   1504c:	2800      	cmp	r0, #0
   1504e:	d0ac      	beq.n	14faa <bt_id_add+0xd2>
   15050:	e7e8      	b.n	15024 <bt_id_add+0x14c>
   15052:	bf00      	nop
   15054:	200002a0 	.word	0x200002a0
   15058:	000207e9 	.word	0x000207e9
   1505c:	0002358c 	.word	0x0002358c
   15060:	0002353c 	.word	0x0002353c
   15064:	000250ed 	.word	0x000250ed
   15068:	00025112 	.word	0x00025112
   1506c:	00025143 	.word	0x00025143
   15070:	000207bf 	.word	0x000207bf
   15074:	00025163 	.word	0x00025163
   15078:	00025183 	.word	0x00025183
   1507c:	000251ad 	.word	0x000251ad

00015080 <bt_id_del>:
{
   15080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   15084:	4e47      	ldr	r6, [pc, #284]	; (151a4 <bt_id_del+0x124>)
   15086:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
   1508a:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
   1508e:	4604      	mov	r4, r0
   15090:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
   15092:	b112      	cbz	r2, 1509a <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   15094:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   15096:	4293      	cmp	r3, r2
   15098:	dd08      	ble.n	150ac <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   1509a:	3b01      	subs	r3, #1
   1509c:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   150a0:	7a23      	ldrb	r3, [r4, #8]
   150a2:	f023 0304 	bic.w	r3, r3, #4
   150a6:	7223      	strb	r3, [r4, #8]
}
   150a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   150ac:	2100      	movs	r1, #0
   150ae:	2206      	movs	r2, #6
   150b0:	4608      	mov	r0, r1
   150b2:	f001 f9c5 	bl	16440 <bt_conn_lookup_state_le>
	if (conn) {
   150b6:	4607      	mov	r7, r0
   150b8:	b1a0      	cbz	r0, 150e4 <bt_id_del+0x64>
   150ba:	f3bf 8f5b 	dmb	ish
   150be:	3698      	adds	r6, #152	; 0x98
   150c0:	e856 3f00 	ldrex	r3, [r6]
   150c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   150c8:	e846 3200 	strex	r2, r3, [r6]
   150cc:	2a00      	cmp	r2, #0
   150ce:	d1f7      	bne.n	150c0 <bt_id_del+0x40>
   150d0:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   150d4:	7a23      	ldrb	r3, [r4, #8]
   150d6:	f043 0302 	orr.w	r3, r3, #2
   150da:	7223      	strb	r3, [r4, #8]
}
   150dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   150e0:	f00b bd9b 	b.w	20c1a <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   150e4:	4601      	mov	r1, r0
   150e6:	4830      	ldr	r0, [pc, #192]	; (151a8 <bt_id_del+0x128>)
   150e8:	f000 faea 	bl	156c0 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   150ec:	4638      	mov	r0, r7
   150ee:	f00b fb1d 	bl	2072c <addr_res_enable>
	if (err) {
   150f2:	4606      	mov	r6, r0
   150f4:	b1b0      	cbz	r0, 15124 <bt_id_del+0xa4>
   150f6:	4a2d      	ldr	r2, [pc, #180]	; (151ac <bt_id_del+0x12c>)
   150f8:	4b2d      	ldr	r3, [pc, #180]	; (151b0 <bt_id_del+0x130>)
   150fa:	1ad2      	subs	r2, r2, r3
   150fc:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   150fe:	0192      	lsls	r2, r2, #6
   15100:	4601      	mov	r1, r0
   15102:	f042 0201 	orr.w	r2, r2, #1
   15106:	482b      	ldr	r0, [pc, #172]	; (151b4 <bt_id_del+0x134>)
   15108:	f009 fa48 	bl	1e59c <log_1>
	if (bt_dev.le.rl_entries) {
   1510c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   15110:	b113      	cbz	r3, 15118 <bt_id_del+0x98>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   15112:	2001      	movs	r0, #1
   15114:	f00b fb0a 	bl	2072c <addr_res_enable>
}
   15118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1511c:	4826      	ldr	r0, [pc, #152]	; (151b8 <bt_id_del+0x138>)
   1511e:	2100      	movs	r1, #0
   15120:	f000 bace 	b.w	156c0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   15124:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   15128:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   1512c:	429a      	cmp	r2, r3
   1512e:	d20c      	bcs.n	1514a <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
   15130:	3b01      	subs	r3, #1
   15132:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   15136:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   15138:	4920      	ldr	r1, [pc, #128]	; (151bc <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   1513a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1513e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   15140:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   15142:	2002      	movs	r0, #2
   15144:	f005 fb3a 	bl	1a7bc <bt_keys_foreach>
		goto done;
   15148:	e7e0      	b.n	1510c <bt_id_del+0x8c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1514a:	2107      	movs	r1, #7
   1514c:	f242 0028 	movw	r0, #8232	; 0x2028
   15150:	f7ff f88e 	bl	14270 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   15154:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   15158:	4607      	mov	r7, r0
   1515a:	b950      	cbnz	r0, 15172 <bt_id_del+0xf2>
   1515c:	4b14      	ldr	r3, [pc, #80]	; (151b0 <bt_id_del+0x130>)
   1515e:	4913      	ldr	r1, [pc, #76]	; (151ac <bt_id_del+0x12c>)
		BT_ERR("Failed to remove IRK from controller");
   15160:	4817      	ldr	r0, [pc, #92]	; (151c0 <bt_id_del+0x140>)
   15162:	1ac9      	subs	r1, r1, r3
   15164:	08c9      	lsrs	r1, r1, #3
   15166:	0189      	lsls	r1, r1, #6
   15168:	f041 0101 	orr.w	r1, r1, #1
   1516c:	f009 fa09 	bl	1e582 <log_0>
		goto done;
   15170:	e7cc      	b.n	1510c <bt_id_del+0x8c>
	return net_buf_simple_add(&buf->b, len);
   15172:	2107      	movs	r1, #7
   15174:	3008      	adds	r0, #8
   15176:	f00d f98b 	bl	22490 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1517a:	4641      	mov	r1, r8
   1517c:	f00b facd 	bl	2071a <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   15180:	4632      	mov	r2, r6
   15182:	4639      	mov	r1, r7
   15184:	f242 0028 	movw	r0, #8232	; 0x2028
   15188:	f7ff f9ce 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   1518c:	2800      	cmp	r0, #0
   1518e:	d1e5      	bne.n	1515c <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
   15190:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   15194:	3b01      	subs	r3, #1
   15196:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   1519a:	7a23      	ldrb	r3, [r4, #8]
   1519c:	f023 0304 	bic.w	r3, r3, #4
   151a0:	7223      	strb	r3, [r4, #8]
   151a2:	e7b3      	b.n	1510c <bt_id_del+0x8c>
   151a4:	200002a0 	.word	0x200002a0
   151a8:	000207e9 	.word	0x000207e9
   151ac:	0002358c 	.word	0x0002358c
   151b0:	0002353c 	.word	0x0002353c
   151b4:	000251c8 	.word	0x000251c8
   151b8:	000207bf 	.word	0x000207bf
   151bc:	000207ad 	.word	0x000207ad
   151c0:	000251f5 	.word	0x000251f5

000151c4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   151c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   151c6:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   151c8:	4605      	mov	r5, r0
   151ca:	b918      	cbnz	r0, 151d4 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   151cc:	b34c      	cbz	r4, 15222 <bt_id_create+0x5e>
		return -EINVAL;
   151ce:	f06f 0415 	mvn.w	r4, #21
   151d2:	e023      	b.n	1521c <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   151d4:	2300      	movs	r3, #0
   151d6:	2207      	movs	r2, #7
   151d8:	4669      	mov	r1, sp
   151da:	9300      	str	r3, [sp, #0]
   151dc:	f8cd 3003 	str.w	r3, [sp, #3]
   151e0:	f00b f819 	bl	20216 <memcmp>
   151e4:	2800      	cmp	r0, #0
   151e6:	d0f1      	beq.n	151cc <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   151e8:	782b      	ldrb	r3, [r5, #0]
   151ea:	2b01      	cmp	r3, #1
   151ec:	d104      	bne.n	151f8 <bt_id_create+0x34>
   151ee:	79ab      	ldrb	r3, [r5, #6]
   151f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   151f4:	2bc0      	cmp	r3, #192	; 0xc0
   151f6:	d00a      	beq.n	1520e <bt_id_create+0x4a>
   151f8:	4b1a      	ldr	r3, [pc, #104]	; (15264 <bt_id_create+0xa0>)
   151fa:	491b      	ldr	r1, [pc, #108]	; (15268 <bt_id_create+0xa4>)
			BT_ERR("Only static random identity address supported");
   151fc:	481b      	ldr	r0, [pc, #108]	; (1526c <bt_id_create+0xa8>)
   151fe:	1ac9      	subs	r1, r1, r3
   15200:	08c9      	lsrs	r1, r1, #3
   15202:	0189      	lsls	r1, r1, #6
   15204:	f041 0101 	orr.w	r1, r1, #1
   15208:	f009 f9bb 	bl	1e582 <log_0>
			return -EINVAL;
   1520c:	e7df      	b.n	151ce <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1520e:	4628      	mov	r0, r5
   15210:	f7ff fdcc 	bl	14dac <id_find>
   15214:	2800      	cmp	r0, #0
   15216:	dbd9      	blt.n	151cc <bt_id_create+0x8>
			return -EALREADY;
   15218:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   1521c:	4620      	mov	r0, r4
   1521e:	b002      	add	sp, #8
   15220:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   15222:	4e13      	ldr	r6, [pc, #76]	; (15270 <bt_id_create+0xac>)
   15224:	79f3      	ldrb	r3, [r6, #7]
   15226:	2b01      	cmp	r3, #1
   15228:	d019      	beq.n	1525e <bt_id_create+0x9a>
   1522a:	f106 0098 	add.w	r0, r6, #152	; 0x98
   1522e:	f00b fa77 	bl	20720 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15232:	07c3      	lsls	r3, r0, #31
   15234:	d40b      	bmi.n	1524e <bt_id_create+0x8a>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   15236:	2d00      	cmp	r5, #0
   15238:	d0c9      	beq.n	151ce <bt_id_create+0xa>
   1523a:	2207      	movs	r2, #7
   1523c:	4669      	mov	r1, sp
   1523e:	4628      	mov	r0, r5
   15240:	9400      	str	r4, [sp, #0]
   15242:	f8cd 4003 	str.w	r4, [sp, #3]
   15246:	f00a ffe6 	bl	20216 <memcmp>
   1524a:	2800      	cmp	r0, #0
   1524c:	d0bf      	beq.n	151ce <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   1524e:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   15250:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   15252:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   15254:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   15256:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   15258:	f7ff fdf0 	bl	14e3c <id_create.isra.0>
	return new_id;
   1525c:	e7de      	b.n	1521c <bt_id_create+0x58>
		return -ENOMEM;
   1525e:	f06f 040b 	mvn.w	r4, #11
   15262:	e7db      	b.n	1521c <bt_id_create+0x58>
   15264:	0002353c 	.word	0x0002353c
   15268:	0002358c 	.word	0x0002358c
   1526c:	0002521a 	.word	0x0002521a
   15270:	200002a0 	.word	0x200002a0

00015274 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   15274:	b570      	push	{r4, r5, r6, lr}
   15276:	b086      	sub	sp, #24
   15278:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1527a:	aa01      	add	r2, sp, #4
   1527c:	2100      	movs	r1, #0
   1527e:	f241 0009 	movw	r0, #4105	; 0x1009
   15282:	f7ff f951 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   15286:	4604      	mov	r4, r0
   15288:	b160      	cbz	r0, 152a4 <bt_id_read_public_addr+0x30>
   1528a:	491a      	ldr	r1, [pc, #104]	; (152f4 <bt_id_read_public_addr+0x80>)
   1528c:	4b1a      	ldr	r3, [pc, #104]	; (152f8 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   1528e:	481b      	ldr	r0, [pc, #108]	; (152fc <bt_id_read_public_addr+0x88>)
   15290:	1ac9      	subs	r1, r1, r3
   15292:	08c9      	lsrs	r1, r1, #3
   15294:	0189      	lsls	r1, r1, #6
   15296:	f041 0102 	orr.w	r1, r1, #2
   1529a:	f009 f972 	bl	1e582 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   1529e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   152a0:	b006      	add	sp, #24
   152a2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   152a4:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   152a6:	9002      	str	r0, [sp, #8]
   152a8:	689d      	ldr	r5, [r3, #8]
   152aa:	f8ad 000c 	strh.w	r0, [sp, #12]
   152ae:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   152b0:	2206      	movs	r2, #6
   152b2:	a902      	add	r1, sp, #8
   152b4:	4628      	mov	r0, r5
   152b6:	f00a ffae 	bl	20216 <memcmp>
   152ba:	b918      	cbnz	r0, 152c4 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   152bc:	9801      	ldr	r0, [sp, #4]
   152be:	f005 fcad 	bl	1ac1c <net_buf_unref>
   152c2:	e7ec      	b.n	1529e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   152c4:	f04f 33ff 	mov.w	r3, #4294967295
   152c8:	2206      	movs	r2, #6
   152ca:	a904      	add	r1, sp, #16
   152cc:	4628      	mov	r0, r5
   152ce:	9304      	str	r3, [sp, #16]
   152d0:	f8ad 3014 	strh.w	r3, [sp, #20]
   152d4:	f00a ff9f 	bl	20216 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   152d8:	2800      	cmp	r0, #0
   152da:	d0ef      	beq.n	152bc <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   152dc:	2206      	movs	r2, #6
   152de:	4629      	mov	r1, r5
   152e0:	1c70      	adds	r0, r6, #1
   152e2:	f00a ffa8 	bl	20236 <memcpy>
	net_buf_unref(rsp);
   152e6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   152e8:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   152ea:	f005 fc97 	bl	1ac1c <net_buf_unref>
	return 1U;
   152ee:	2001      	movs	r0, #1
   152f0:	e7d6      	b.n	152a0 <bt_id_read_public_addr+0x2c>
   152f2:	bf00      	nop
   152f4:	0002358c 	.word	0x0002358c
   152f8:	0002353c 	.word	0x0002353c
   152fc:	00025248 	.word	0x00025248

00015300 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   15300:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   15302:	4668      	mov	r0, sp
   15304:	f7ff ffb6 	bl	15274 <bt_id_read_public_addr>
   15308:	4b04      	ldr	r3, [pc, #16]	; (1531c <bt_setup_public_id_addr+0x1c>)
   1530a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1530c:	b118      	cbz	r0, 15316 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   1530e:	4669      	mov	r1, sp
   15310:	2000      	movs	r0, #0
   15312:	f7ff fd93 	bl	14e3c <id_create.isra.0>
}
   15316:	b003      	add	sp, #12
   15318:	f85d fb04 	ldr.w	pc, [sp], #4
   1531c:	200002a0 	.word	0x200002a0

00015320 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   15320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15324:	4b25      	ldr	r3, [pc, #148]	; (153bc <bt_read_static_addr+0x9c>)
   15326:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   1532a:	f014 0401 	ands.w	r4, r4, #1
{
   1532e:	4607      	mov	r7, r0
   15330:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15332:	d10a      	bne.n	1534a <bt_read_static_addr+0x2a>
   15334:	4922      	ldr	r1, [pc, #136]	; (153c0 <bt_read_static_addr+0xa0>)
   15336:	4b23      	ldr	r3, [pc, #140]	; (153c4 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   15338:	4823      	ldr	r0, [pc, #140]	; (153c8 <bt_read_static_addr+0xa8>)
   1533a:	1ac9      	subs	r1, r1, r3
   1533c:	08c9      	lsrs	r1, r1, #3
   1533e:	0189      	lsls	r1, r1, #6
   15340:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   15344:	f009 f91d 	bl	1e582 <log_0>
   15348:	e012      	b.n	15370 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1534a:	aa01      	add	r2, sp, #4
   1534c:	2100      	movs	r1, #0
   1534e:	f64f 4009 	movw	r0, #64521	; 0xfc09
   15352:	f7ff f8e9 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   15356:	4605      	mov	r5, r0
   15358:	b170      	cbz	r0, 15378 <bt_read_static_addr+0x58>
   1535a:	4b1a      	ldr	r3, [pc, #104]	; (153c4 <bt_read_static_addr+0xa4>)
   1535c:	4918      	ldr	r1, [pc, #96]	; (153c0 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   1535e:	481b      	ldr	r0, [pc, #108]	; (153cc <bt_read_static_addr+0xac>)
   15360:	1ac9      	subs	r1, r1, r3
   15362:	08c9      	lsrs	r1, r1, #3
   15364:	0189      	lsls	r1, r1, #6
   15366:	f041 0102 	orr.w	r1, r1, #2
   1536a:	f009 f90a 	bl	1e582 <log_0>
		return 0;
   1536e:	2400      	movs	r4, #0
	}

	return cnt;
}
   15370:	4620      	mov	r0, r4
   15372:	b002      	add	sp, #8
   15374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   15378:	9b01      	ldr	r3, [sp, #4]
   1537a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1537c:	785c      	ldrb	r4, [r3, #1]
   1537e:	42b4      	cmp	r4, r6
   15380:	bf28      	it	cs
   15382:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   15384:	f04f 0816 	mov.w	r8, #22
   15388:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1538a:	42a5      	cmp	r5, r4
   1538c:	db0d      	blt.n	153aa <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   1538e:	9801      	ldr	r0, [sp, #4]
   15390:	f005 fc44 	bl	1ac1c <net_buf_unref>
	if (!cnt) {
   15394:	2c00      	cmp	r4, #0
   15396:	d1eb      	bne.n	15370 <bt_read_static_addr+0x50>
   15398:	4909      	ldr	r1, [pc, #36]	; (153c0 <bt_read_static_addr+0xa0>)
   1539a:	4b0a      	ldr	r3, [pc, #40]	; (153c4 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   1539c:	480c      	ldr	r0, [pc, #48]	; (153d0 <bt_read_static_addr+0xb0>)
   1539e:	1ac9      	subs	r1, r1, r3
   153a0:	08c9      	lsrs	r1, r1, #3
   153a2:	0189      	lsls	r1, r1, #6
   153a4:	f041 0102 	orr.w	r1, r1, #2
   153a8:	e7cc      	b.n	15344 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   153aa:	fb08 7005 	mla	r0, r8, r5, r7
   153ae:	2216      	movs	r2, #22
   153b0:	4631      	mov	r1, r6
   153b2:	f00a ff40 	bl	20236 <memcpy>
	for (i = 0; i < cnt; i++) {
   153b6:	3501      	adds	r5, #1
   153b8:	e7e7      	b.n	1538a <bt_read_static_addr+0x6a>
   153ba:	bf00      	nop
   153bc:	200002a0 	.word	0x200002a0
   153c0:	0002358c 	.word	0x0002358c
   153c4:	0002353c 	.word	0x0002353c
   153c8:	00025266 	.word	0x00025266
   153cc:	00025292 	.word	0x00025292
   153d0:	000252b2 	.word	0x000252b2

000153d4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   153d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   153d6:	4d14      	ldr	r5, [pc, #80]	; (15428 <bt_setup_random_id_addr+0x54>)
   153d8:	79ec      	ldrb	r4, [r5, #7]
{
   153da:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   153dc:	b9f4      	cbnz	r4, 1541c <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   153de:	2101      	movs	r1, #1
   153e0:	a802      	add	r0, sp, #8
   153e2:	f7ff ff9d 	bl	15320 <bt_read_static_addr>
   153e6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   153e8:	b1c0      	cbz	r0, 1541c <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   153ea:	2716      	movs	r7, #22
   153ec:	e00f      	b.n	1540e <bt_setup_random_id_addr+0x3a>
   153ee:	ab02      	add	r3, sp, #8
   153f0:	fb07 3106 	mla	r1, r7, r6, r3
   153f4:	2206      	movs	r2, #6
   153f6:	f10d 0001 	add.w	r0, sp, #1
   153fa:	f00a ff1c 	bl	20236 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   153fe:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   15400:	4669      	mov	r1, sp
   15402:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   15404:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   15408:	f7ff fd18 	bl	14e3c <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1540c:	3401      	adds	r4, #1
   1540e:	79eb      	ldrb	r3, [r5, #7]
   15410:	b2e6      	uxtb	r6, r4
   15412:	42b3      	cmp	r3, r6
   15414:	d8eb      	bhi.n	153ee <bt_setup_random_id_addr+0x1a>
			}

			return 0;
   15416:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   15418:	b009      	add	sp, #36	; 0x24
   1541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   1541c:	2100      	movs	r1, #0
   1541e:	4608      	mov	r0, r1
   15420:	f7ff fed0 	bl	151c4 <bt_id_create>
   15424:	e7f8      	b.n	15418 <bt_setup_random_id_addr+0x44>
   15426:	bf00      	nop
   15428:	200002a0 	.word	0x200002a0

0001542c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1542c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   15430:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   15434:	7805      	ldrb	r5, [r0, #0]
{
   15436:	460e      	mov	r6, r1
   15438:	4690      	mov	r8, r2
   1543a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1543c:	d026      	beq.n	1548c <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1543e:	4c22      	ldr	r4, [pc, #136]	; (154c8 <bt_id_set_adv_own_addr+0x9c>)
   15440:	b12a      	cbz	r2, 1544e <bt_id_set_adv_own_addr+0x22>
   15442:	0688      	lsls	r0, r1, #26
   15444:	d503      	bpl.n	1544e <bt_id_set_adv_own_addr+0x22>
   15446:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   1544a:	0659      	lsls	r1, r3, #25
   1544c:	d539      	bpl.n	154c2 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1544e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   15452:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   15456:	5ce3      	ldrb	r3, [r4, r3]
   15458:	2b01      	cmp	r3, #1
   1545a:	d008      	beq.n	1546e <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1545c:	eba9 0505 	sub.w	r5, r9, r5
   15460:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15462:	f1b8 0f00 	cmp.w	r8, #0
   15466:	d10c      	bne.n	15482 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   15468:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1546a:	2000      	movs	r0, #0
   1546c:	e007      	b.n	1547e <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1546e:	2007      	movs	r0, #7
   15470:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   15474:	4420      	add	r0, r4
   15476:	f7ff fcb3 	bl	14de0 <set_random_address>
				if (err) {
   1547a:	2800      	cmp	r0, #0
   1547c:	d0ee      	beq.n	1545c <bt_id_set_adv_own_addr+0x30>
}
   1547e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15482:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   15484:	bf48      	it	mi
   15486:	f043 0302 	orrmi.w	r3, r3, #2
   1548a:	e7ed      	b.n	15468 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1548c:	074b      	lsls	r3, r1, #29
   1548e:	d514      	bpl.n	154ba <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15490:	4e0d      	ldr	r6, [pc, #52]	; (154c8 <bt_id_set_adv_own_addr+0x9c>)
   15492:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   15496:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   1549a:	5cf3      	ldrb	r3, [r6, r3]
   1549c:	2b01      	cmp	r3, #1
   1549e:	d10a      	bne.n	154b6 <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   154a0:	2007      	movs	r0, #7
   154a2:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   154a6:	4430      	add	r0, r6
   154a8:	f7ff fc9a 	bl	14de0 <set_random_address>
			*own_addr_type = id_addr->type;
   154ac:	eba8 0505 	sub.w	r5, r8, r5
   154b0:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   154b2:	703b      	strb	r3, [r7, #0]
		if (err) {
   154b4:	e7e3      	b.n	1547e <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   154b6:	4620      	mov	r0, r4
   154b8:	e7f8      	b.n	154ac <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   154ba:	f00b f9b9 	bl	20830 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   154be:	2301      	movs	r3, #1
   154c0:	e7f7      	b.n	154b2 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   154c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   154c6:	e7da      	b.n	1547e <bt_id_set_adv_own_addr+0x52>
   154c8:	200002a0 	.word	0x200002a0

000154cc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   154cc:	6843      	ldr	r3, [r0, #4]
{
   154ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   154d0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   154d2:	0558      	lsls	r0, r3, #21
   154d4:	d502      	bpl.n	154dc <valid_adv_param+0x10>
		return false;
   154d6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   154d8:	b003      	add	sp, #12
   154da:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   154dc:	6922      	ldr	r2, [r4, #16]
   154de:	b10a      	cbz	r2, 154e4 <valid_adv_param+0x18>
   154e0:	07d9      	lsls	r1, r3, #31
   154e2:	d5f8      	bpl.n	154d6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   154e4:	4d1a      	ldr	r5, [pc, #104]	; (15550 <valid_adv_param+0x84>)
   154e6:	7820      	ldrb	r0, [r4, #0]
   154e8:	79eb      	ldrb	r3, [r5, #7]
   154ea:	4283      	cmp	r3, r0
   154ec:	d9f3      	bls.n	154d6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   154ee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   154f2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   154f4:	2207      	movs	r2, #7
   154f6:	4669      	mov	r1, sp
   154f8:	4428      	add	r0, r5
   154fa:	9300      	str	r3, [sp, #0]
   154fc:	f8cd 3003 	str.w	r3, [sp, #3]
   15500:	f00a fe89 	bl	20216 <memcmp>
	if (param->id >= bt_dev.id_count ||
   15504:	2800      	cmp	r0, #0
   15506:	d0e6      	beq.n	154d6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15508:	6860      	ldr	r0, [r4, #4]
   1550a:	07c2      	lsls	r2, r0, #31
   1550c:	d406      	bmi.n	1551c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1550e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   15512:	2b08      	cmp	r3, #8
   15514:	d802      	bhi.n	1551c <valid_adv_param+0x50>
   15516:	68a3      	ldr	r3, [r4, #8]
   15518:	2b9f      	cmp	r3, #159	; 0x9f
   1551a:	d9dc      	bls.n	154d6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1551c:	f010 0f30 	tst.w	r0, #48	; 0x30
   15520:	d002      	beq.n	15528 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   15522:	6923      	ldr	r3, [r4, #16]
   15524:	2b00      	cmp	r3, #0
   15526:	d0d6      	beq.n	154d6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   15528:	06c3      	lsls	r3, r0, #27
   1552a:	d401      	bmi.n	15530 <valid_adv_param+0x64>
   1552c:	6923      	ldr	r3, [r4, #16]
   1552e:	b943      	cbnz	r3, 15542 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   15530:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   15534:	429a      	cmp	r2, r3
   15536:	d8ce      	bhi.n	154d6 <valid_adv_param+0xa>
   15538:	2a1f      	cmp	r2, #31
   1553a:	d9cc      	bls.n	154d6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1553c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15540:	d8c9      	bhi.n	154d6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   15542:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   15546:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1554a:	bf18      	it	ne
   1554c:	2001      	movne	r0, #1
   1554e:	e7c3      	b.n	154d8 <valid_adv_param+0xc>
   15550:	200002a0 	.word	0x200002a0

00015554 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   15554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15558:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1555a:	2120      	movs	r1, #32
{
   1555c:	4682      	mov	sl, r0
   1555e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15560:	f7fe fe86 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   15564:	4606      	mov	r6, r0
   15566:	2800      	cmp	r0, #0
   15568:	d05c      	beq.n	15624 <hci_set_ad+0xd0>
   1556a:	2120      	movs	r1, #32
   1556c:	3008      	adds	r0, #8
   1556e:	f00c ff8f 	bl	22490 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   15572:	2220      	movs	r2, #32
   15574:	2100      	movs	r1, #0
   15576:	4681      	mov	r9, r0
   15578:	f00a fe88 	bl	2028c <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1557c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   15580:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   15584:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   15586:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   15588:	f8d4 8000 	ldr.w	r8, [r4]
   1558c:	2300      	movs	r3, #0
   1558e:	6862      	ldr	r2, [r4, #4]
   15590:	4293      	cmp	r3, r2
   15592:	d30d      	bcc.n	155b0 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   15594:	9b00      	ldr	r3, [sp, #0]
   15596:	3408      	adds	r4, #8
   15598:	429c      	cmp	r4, r3
   1559a:	d1f5      	bne.n	15588 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1559c:	2200      	movs	r2, #0
   1559e:	4631      	mov	r1, r6
   155a0:	4650      	mov	r0, sl
	*data_len = set_data_len;
   155a2:	f889 5000 	strb.w	r5, [r9]
}
   155a6:	b003      	add	sp, #12
   155a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   155ac:	f7fe bfbc 	b.w	14528 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   155b0:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   155b4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   155b8:	1ca8      	adds	r0, r5, #2
   155ba:	1881      	adds	r1, r0, r2
   155bc:	291f      	cmp	r1, #31
   155be:	d91a      	bls.n	155f6 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   155c0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   155c4:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   155c8:	d101      	bne.n	155ce <hci_set_ad+0x7a>
   155ca:	2a00      	cmp	r2, #0
   155cc:	dc11      	bgt.n	155f2 <hci_set_ad+0x9e>
   155ce:	4b17      	ldr	r3, [pc, #92]	; (1562c <hci_set_ad+0xd8>)
   155d0:	4917      	ldr	r1, [pc, #92]	; (15630 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   155d2:	4818      	ldr	r0, [pc, #96]	; (15634 <hci_set_ad+0xe0>)
   155d4:	1ac9      	subs	r1, r1, r3
   155d6:	08c9      	lsrs	r1, r1, #3
   155d8:	0189      	lsls	r1, r1, #6
   155da:	f041 0101 	orr.w	r1, r1, #1
   155de:	f008 ffd0 	bl	1e582 <log_0>
		net_buf_unref(buf);
   155e2:	4630      	mov	r0, r6
   155e4:	f005 fb1a 	bl	1ac1c <net_buf_unref>
					return -EINVAL;
   155e8:	f06f 0015 	mvn.w	r0, #21
}
   155ec:	b003      	add	sp, #12
   155ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   155f2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   155f6:	b2d7      	uxtb	r7, r2
   155f8:	1c79      	adds	r1, r7, #1
   155fa:	f80b 1005 	strb.w	r1, [fp, r5]
   155fe:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   15600:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   15602:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   15606:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1560a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1560e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   15610:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   15612:	f00a fe10 	bl	20236 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   15616:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   15618:	443d      	add	r5, r7
   1561a:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1561c:	3301      	adds	r3, #1
   1561e:	f108 0808 	add.w	r8, r8, #8
   15622:	e7b4      	b.n	1558e <hci_set_ad+0x3a>
		return -ENOBUFS;
   15624:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15628:	e7e0      	b.n	155ec <hci_set_ad+0x98>
   1562a:	bf00      	nop
   1562c:	0002353c 	.word	0x0002353c
   15630:	00023544 	.word	0x00023544
   15634:	000252e1 	.word	0x000252e1

00015638 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   15638:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1563a:	4606      	mov	r6, r0
   1563c:	4b1e      	ldr	r3, [pc, #120]	; (156b8 <le_adv_start_add_conn+0x80>)
   1563e:	f816 2b09 	ldrb.w	r2, [r6], #9
   15642:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{
   15646:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15648:	2300      	movs	r3, #0
{
   1564a:	4605      	mov	r5, r0
   1564c:	2207      	movs	r2, #7
   1564e:	460f      	mov	r7, r1
   15650:	4630      	mov	r0, r6
   15652:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15654:	9300      	str	r3, [sp, #0]
   15656:	f8cd 3003 	str.w	r3, [sp, #3]
   1565a:	f00a fddc 	bl	20216 <memcmp>
   1565e:	782a      	ldrb	r2, [r5, #0]
   15660:	4604      	mov	r4, r0
   15662:	b9a8      	cbnz	r0, 15690 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   15664:	4b15      	ldr	r3, [pc, #84]	; (156bc <le_adv_start_add_conn+0x84>)
   15666:	6818      	ldr	r0, [r3, #0]
   15668:	8899      	ldrh	r1, [r3, #4]
   1566a:	9002      	str	r0, [sp, #8]
   1566c:	799b      	ldrb	r3, [r3, #6]
   1566e:	f8ad 100c 	strh.w	r1, [sp, #12]
   15672:	4610      	mov	r0, r2
   15674:	a902      	add	r1, sp, #8
   15676:	f88d 300e 	strb.w	r3, [sp, #14]
   1567a:	f000 fd83 	bl	16184 <bt_conn_add_le>
		if (!conn) {
   1567e:	4605      	mov	r5, r0
   15680:	b1b8      	cbz	r0, 156b2 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   15682:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   15684:	f000 fdb4 	bl	161f0 <bt_conn_set_state>
	*out_conn = conn;
   15688:	603d      	str	r5, [r7, #0]
	return 0;
}
   1568a:	4620      	mov	r0, r4
   1568c:	b005      	add	sp, #20
   1568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   15690:	4631      	mov	r1, r6
   15692:	4610      	mov	r0, r2
   15694:	f000 feae 	bl	163f4 <bt_conn_exists_le>
   15698:	4604      	mov	r4, r0
   1569a:	b938      	cbnz	r0, 156ac <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1569c:	7828      	ldrb	r0, [r5, #0]
   1569e:	4631      	mov	r1, r6
   156a0:	f000 fd70 	bl	16184 <bt_conn_add_le>
	if (!conn) {
   156a4:	4605      	mov	r5, r0
   156a6:	b120      	cbz	r0, 156b2 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   156a8:	2105      	movs	r1, #5
   156aa:	e7eb      	b.n	15684 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   156ac:	f06f 0415 	mvn.w	r4, #21
   156b0:	e7eb      	b.n	1568a <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   156b2:	f06f 040b 	mvn.w	r4, #11
   156b6:	e7e8      	b.n	1568a <le_adv_start_add_conn+0x52>
   156b8:	200002a0 	.word	0x200002a0
   156bc:	0002370c 	.word	0x0002370c

000156c0 <bt_le_ext_adv_foreach>:
{
   156c0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   156c2:	4801      	ldr	r0, [pc, #4]	; (156c8 <bt_le_ext_adv_foreach+0x8>)
   156c4:	4718      	bx	r3
   156c6:	bf00      	nop
   156c8:	200002b8 	.word	0x200002b8

000156cc <bt_le_adv_lookup_legacy>:
}
   156cc:	4800      	ldr	r0, [pc, #0]	; (156d0 <bt_le_adv_lookup_legacy+0x4>)
   156ce:	4770      	bx	lr
   156d0:	200002b8 	.word	0x200002b8

000156d4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   156d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   156d8:	690e      	ldr	r6, [r1, #16]
{
   156da:	b08f      	sub	sp, #60	; 0x3c
   156dc:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   156de:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   156e0:	ebb6 0b03 	subs.w	fp, r6, r3
{
   156e4:	4605      	mov	r5, r0
   156e6:	488f      	ldr	r0, [pc, #572]	; (15924 <bt_le_adv_start_legacy+0x250>)
	struct bt_conn *conn = NULL;
   156e8:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   156ea:	bf18      	it	ne
   156ec:	f04f 0b01 	movne.w	fp, #1
{
   156f0:	460c      	mov	r4, r1
   156f2:	4691      	mov	r9, r2
   156f4:	f00b f8d1 	bl	2089a <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   156f8:	0787      	lsls	r7, r0, #30
   156fa:	f140 8108 	bpl.w	1590e <bt_le_adv_start_legacy+0x23a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   156fe:	4608      	mov	r0, r1
   15700:	f7ff fee4 	bl	154cc <valid_adv_param>
   15704:	b928      	cbnz	r0, 15712 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   15706:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1570a:	4658      	mov	r0, fp
   1570c:	b00f      	add	sp, #60	; 0x3c
   1570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   15712:	4620      	mov	r0, r4
   15714:	f00b f89e 	bl	20854 <bt_id_adv_random_addr_check>
   15718:	4680      	mov	r8, r0
   1571a:	2800      	cmp	r0, #0
   1571c:	d0f3      	beq.n	15706 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1571e:	f105 0710 	add.w	r7, r5, #16
   15722:	4638      	mov	r0, r7
   15724:	f00b f8b9 	bl	2089a <atomic_get>
   15728:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1572c:	0640      	lsls	r0, r0, #25
   1572e:	f100 80f1 	bmi.w	15914 <bt_le_adv_start_legacy+0x240>
	(void)memset(&set_param, 0, sizeof(set_param));
   15732:	220f      	movs	r2, #15
   15734:	a80a      	add	r0, sp, #40	; 0x28
   15736:	9105      	str	r1, [sp, #20]
   15738:	f00a fda8 	bl	2028c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1573c:	68a3      	ldr	r3, [r4, #8]
   1573e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   15742:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15744:	68e3      	ldr	r3, [r4, #12]
   15746:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1574a:	f00b f897 	bl	2087c <get_adv_channel_map>
	if (adv->id != param->id) {
   1574e:	782a      	ldrb	r2, [r5, #0]
   15750:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   15752:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15754:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   15758:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1575a:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   1575e:	d004      	beq.n	1576a <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15760:	4870      	ldr	r0, [pc, #448]	; (15924 <bt_le_adv_start_legacy+0x250>)
   15762:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   15766:	f00b f89e 	bl	208a6 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1576a:	4a6f      	ldr	r2, [pc, #444]	; (15928 <bt_le_adv_start_legacy+0x254>)
	adv->id = param->id;
   1576c:	7823      	ldrb	r3, [r4, #0]
   1576e:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   15770:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   15774:	6861      	ldr	r1, [r4, #4]
   15776:	465a      	mov	r2, fp
   15778:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1577c:	4628      	mov	r0, r5
   1577e:	f7ff fe55 	bl	1542c <bt_id_set_adv_own_addr>
	if (err) {
   15782:	4683      	mov	fp, r0
   15784:	2800      	cmp	r0, #0
   15786:	d1c0      	bne.n	1570a <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   15788:	f105 0009 	add.w	r0, r5, #9
   1578c:	2e00      	cmp	r6, #0
   1578e:	d04d      	beq.n	1582c <bt_le_adv_start_legacy+0x158>
	memcpy(dst, src, sizeof(*dst));
   15790:	6921      	ldr	r1, [r4, #16]
   15792:	2207      	movs	r2, #7
   15794:	f00a fd4f 	bl	20236 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15798:	6860      	ldr	r0, [r4, #4]
   1579a:	07c1      	lsls	r1, r0, #31
   1579c:	d54f      	bpl.n	1583e <bt_le_adv_start_legacy+0x16a>
		if (dir_adv) {
   1579e:	2e00      	cmp	r6, #0
   157a0:	d04a      	beq.n	15838 <bt_le_adv_start_legacy+0x164>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   157a2:	f010 0f10 	tst.w	r0, #16
   157a6:	bf14      	ite	ne
   157a8:	2304      	movne	r3, #4
   157aa:	2301      	moveq	r3, #1
   157ac:	6921      	ldr	r1, [r4, #16]
   157ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   157b2:	2207      	movs	r2, #7
   157b4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   157b8:	f00a fd3d 	bl	20236 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   157bc:	210f      	movs	r1, #15
   157be:	f242 0006 	movw	r0, #8198	; 0x2006
   157c2:	f7fe fd55 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   157c6:	4683      	mov	fp, r0
   157c8:	2800      	cmp	r0, #0
   157ca:	f000 80a6 	beq.w	1591a <bt_le_adv_start_legacy+0x246>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   157ce:	220f      	movs	r2, #15
   157d0:	a90a      	add	r1, sp, #40	; 0x28
   157d2:	3008      	adds	r0, #8
   157d4:	f00c fe62 	bl	2249c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   157d8:	2200      	movs	r2, #0
   157da:	4659      	mov	r1, fp
   157dc:	f242 0006 	movw	r0, #8198	; 0x2006
   157e0:	f7fe fea2 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   157e4:	2800      	cmp	r0, #0
   157e6:	f040 809b 	bne.w	15920 <bt_le_adv_start_legacy+0x24c>
	if (!dir_adv) {
   157ea:	2e00      	cmp	r6, #0
   157ec:	d033      	beq.n	15856 <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   157ee:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   157f0:	07da      	lsls	r2, r3, #31
   157f2:	d444      	bmi.n	1587e <bt_le_adv_start_legacy+0x1aa>
	return bt_le_adv_set_enable_legacy(adv, enable);
   157f4:	2101      	movs	r1, #1
   157f6:	4628      	mov	r0, r5
   157f8:	f00b f8fc 	bl	209f4 <bt_le_adv_set_enable_legacy>
	if (err) {
   157fc:	4683      	mov	fp, r0
   157fe:	2800      	cmp	r0, #0
   15800:	d07e      	beq.n	15900 <bt_le_adv_start_legacy+0x22c>
   15802:	4b4a      	ldr	r3, [pc, #296]	; (1592c <bt_le_adv_start_legacy+0x258>)
   15804:	494a      	ldr	r1, [pc, #296]	; (15930 <bt_le_adv_start_legacy+0x25c>)
		BT_ERR("Failed to start advertiser");
   15806:	484b      	ldr	r0, [pc, #300]	; (15934 <bt_le_adv_start_legacy+0x260>)
   15808:	1ac9      	subs	r1, r1, r3
   1580a:	08c9      	lsrs	r1, r1, #3
   1580c:	0189      	lsls	r1, r1, #6
   1580e:	f041 0101 	orr.w	r1, r1, #1
   15812:	f008 feb6 	bl	1e582 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15816:	9807      	ldr	r0, [sp, #28]
   15818:	2800      	cmp	r0, #0
   1581a:	f43f af76 	beq.w	1570a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1581e:	2100      	movs	r1, #0
   15820:	f000 fce6 	bl	161f0 <bt_conn_set_state>
			bt_conn_unref(conn);
   15824:	9807      	ldr	r0, [sp, #28]
   15826:	f00b f9f8 	bl	20c1a <bt_conn_unref>
   1582a:	e76e      	b.n	1570a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1582c:	9608      	str	r6, [sp, #32]
   1582e:	2207      	movs	r2, #7
   15830:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   15834:	a908      	add	r1, sp, #32
   15836:	e7ad      	b.n	15794 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
   15838:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   1583c:	e7be      	b.n	157bc <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   1583e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15840:	b933      	cbnz	r3, 15850 <bt_le_adv_start_legacy+0x17c>
   15842:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   15846:	f1c8 0303 	rsb	r3, r8, #3
   1584a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1584e:	e7b5      	b.n	157bc <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   15850:	f04f 0801 	mov.w	r8, #1
   15854:	e7f7      	b.n	15846 <bt_le_adv_start_legacy+0x172>
   15856:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15858:	f3c3 4280 	ubfx	r2, r3, #18, #1
   1585c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   15860:	e9cd 8301 	strd	r8, r3, [sp, #4]
   15864:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15866:	9203      	str	r2, [sp, #12]
   15868:	9300      	str	r3, [sp, #0]
   1586a:	4652      	mov	r2, sl
   1586c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1586e:	4649      	mov	r1, r9
   15870:	4628      	mov	r0, r5
   15872:	f00b f83e 	bl	208f2 <le_adv_update.constprop.0>
		if (err) {
   15876:	4683      	mov	fp, r0
   15878:	2800      	cmp	r0, #0
   1587a:	d0b8      	beq.n	157ee <bt_le_adv_start_legacy+0x11a>
   1587c:	e745      	b.n	1570a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1587e:	a907      	add	r1, sp, #28
   15880:	4628      	mov	r0, r5
   15882:	f7ff fed9 	bl	15638 <le_adv_start_add_conn>
		if (err) {
   15886:	4683      	mov	fp, r0
   15888:	2800      	cmp	r0, #0
   1588a:	d0b3      	beq.n	157f4 <bt_le_adv_start_legacy+0x120>
			if (err == -ENOMEM && !dir_adv &&
   1588c:	f110 0f0c 	cmn.w	r0, #12
   15890:	f47f af3b 	bne.w	1570a <bt_le_adv_start_legacy+0x36>
   15894:	2e00      	cmp	r6, #0
   15896:	f47f af38 	bne.w	1570a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1589a:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1589c:	079b      	lsls	r3, r3, #30
   1589e:	f53f af34 	bmi.w	1570a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   158a2:	6860      	ldr	r0, [r4, #4]
   158a4:	f080 0002 	eor.w	r0, r0, #2
   158a8:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   158ac:	f00b 0201 	and.w	r2, fp, #1
   158b0:	210c      	movs	r1, #12
   158b2:	4638      	mov	r0, r7
   158b4:	f00b f806 	bl	208c4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   158b8:	6862      	ldr	r2, [r4, #4]
   158ba:	2107      	movs	r1, #7
   158bc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   158c0:	4638      	mov	r0, r7
   158c2:	f00a ffff 	bl	208c4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   158c6:	6862      	ldr	r2, [r4, #4]
   158c8:	2112      	movs	r1, #18
   158ca:	f3c2 4280 	ubfx	r2, r2, #18, #1
   158ce:	4638      	mov	r0, r7
   158d0:	f00a fff8 	bl	208c4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   158d4:	6862      	ldr	r2, [r4, #4]
   158d6:	2108      	movs	r1, #8
   158d8:	f002 0201 	and.w	r2, r2, #1
   158dc:	4638      	mov	r0, r7
   158de:	f00a fff1 	bl	208c4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   158e2:	4642      	mov	r2, r8
   158e4:	2109      	movs	r1, #9
   158e6:	4638      	mov	r0, r7
   158e8:	f00a ffec 	bl	208c4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   158ec:	6862      	ldr	r2, [r4, #4]
   158ee:	210b      	movs	r1, #11
   158f0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   158f4:	4638      	mov	r0, r7
   158f6:	f00a ffe5 	bl	208c4 <atomic_set_bit_to>
	return 0;
   158fa:	f04f 0b00 	mov.w	fp, #0
   158fe:	e704      	b.n	1570a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15900:	9807      	ldr	r0, [sp, #28]
   15902:	b108      	cbz	r0, 15908 <bt_le_adv_start_legacy+0x234>
		bt_conn_unref(conn);
   15904:	f00b f989 	bl	20c1a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15908:	2e00      	cmp	r6, #0
   1590a:	d1cf      	bne.n	158ac <bt_le_adv_start_legacy+0x1d8>
   1590c:	e7c9      	b.n	158a2 <bt_le_adv_start_legacy+0x1ce>
		return -EAGAIN;
   1590e:	f06f 0b0a 	mvn.w	fp, #10
   15912:	e6fa      	b.n	1570a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   15914:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   15918:	e6f7      	b.n	1570a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1591a:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   1591e:	e6f4      	b.n	1570a <bt_le_adv_start_legacy+0x36>
   15920:	4683      	mov	fp, r0
   15922:	e6f2      	b.n	1570a <bt_le_adv_start_legacy+0x36>
   15924:	20000338 	.word	0x20000338
   15928:	200002a0 	.word	0x200002a0
   1592c:	0002353c 	.word	0x0002353c
   15930:	00023544 	.word	0x00023544
   15934:	000252fa 	.word	0x000252fa

00015938 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15938:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1593a:	9c04      	ldr	r4, [sp, #16]
   1593c:	e9cd 3400 	strd	r3, r4, [sp]
   15940:	4613      	mov	r3, r2
   15942:	460a      	mov	r2, r1
   15944:	4601      	mov	r1, r0
   15946:	4802      	ldr	r0, [pc, #8]	; (15950 <bt_le_adv_start+0x18>)
   15948:	f7ff fec4 	bl	156d4 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
   1594c:	b002      	add	sp, #8
   1594e:	bd10      	pop	{r4, pc}
   15950:	200002b8 	.word	0x200002b8

00015954 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   15954:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15956:	481e      	ldr	r0, [pc, #120]	; (159d0 <bt_le_adv_resume+0x7c>)
   15958:	4c1d      	ldr	r4, [pc, #116]	; (159d0 <bt_le_adv_resume+0x7c>)
   1595a:	f00a ff9e 	bl	2089a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1595e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   15962:	d032      	beq.n	159ca <bt_le_adv_resume+0x76>
   15964:	4620      	mov	r0, r4
   15966:	f00a ff98 	bl	2089a <atomic_get>
   1596a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1596c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   15970:	d42b      	bmi.n	159ca <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15972:	4620      	mov	r0, r4
   15974:	f00a ff91 	bl	2089a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   15978:	05c3      	lsls	r3, r0, #23
   1597a:	d526      	bpl.n	159ca <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   1597c:	a901      	add	r1, sp, #4
   1597e:	f1a4 0010 	sub.w	r0, r4, #16
   15982:	f7ff fe59 	bl	15638 <le_adv_start_add_conn>
	if (err) {
   15986:	bb00      	cbnz	r0, 159ca <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15988:	2101      	movs	r1, #1
   1598a:	f1a4 0010 	sub.w	r0, r4, #16
   1598e:	f00b f831 	bl	209f4 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   15992:	b150      	cbz	r0, 159aa <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15994:	4629      	mov	r1, r5
   15996:	9801      	ldr	r0, [sp, #4]
   15998:	f000 fc2a 	bl	161f0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1599c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   159a0:	4620      	mov	r0, r4
   159a2:	f00a ff80 	bl	208a6 <atomic_and>
	return (old & mask) != 0;
   159a6:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   159aa:	9801      	ldr	r0, [sp, #4]
   159ac:	f00b f935 	bl	20c1a <bt_conn_unref>
	if (persist_paused) {
   159b0:	b15d      	cbz	r5, 159ca <bt_le_adv_resume+0x76>
   159b2:	f3bf 8f5b 	dmb	ish
   159b6:	e854 3f00 	ldrex	r3, [r4]
   159ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   159be:	e844 3200 	strex	r2, r3, [r4]
   159c2:	2a00      	cmp	r2, #0
   159c4:	d1f7      	bne.n	159b6 <bt_le_adv_resume+0x62>
   159c6:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   159ca:	b003      	add	sp, #12
   159cc:	bd30      	pop	{r4, r5, pc}
   159ce:	bf00      	nop
   159d0:	200002c8 	.word	0x200002c8

000159d4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   159d4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
   159d6:	4904      	ldr	r1, [pc, #16]	; (159e8 <bt_pub_key_is_debug+0x14>)
   159d8:	2240      	movs	r2, #64	; 0x40
   159da:	f00a fc1c 	bl	20216 <memcmp>
}
   159de:	fab0 f080 	clz	r0, r0
   159e2:	0940      	lsrs	r0, r0, #5
   159e4:	bd08      	pop	{r3, pc}
   159e6:	bf00      	nop
   159e8:	000253aa 	.word	0x000253aa

000159ec <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   159ec:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   159ee:	4b44      	ldr	r3, [pc, #272]	; (15b00 <bt_pub_key_gen+0x114>)
   159f0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   159f4:	f003 0306 	and.w	r3, r3, #6
   159f8:	2b06      	cmp	r3, #6
   159fa:	d00d      	beq.n	15a18 <bt_pub_key_gen+0x2c>
   159fc:	4b41      	ldr	r3, [pc, #260]	; (15b04 <bt_pub_key_gen+0x118>)
   159fe:	4942      	ldr	r1, [pc, #264]	; (15b08 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   15a00:	4842      	ldr	r0, [pc, #264]	; (15b0c <bt_pub_key_gen+0x120>)
   15a02:	1ac9      	subs	r1, r1, r3
   15a04:	08c9      	lsrs	r1, r1, #3
   15a06:	0189      	lsls	r1, r1, #6
   15a08:	f041 0102 	orr.w	r1, r1, #2
   15a0c:	f008 fdb9 	bl	1e582 <log_0>
		return -ENOTSUP;
   15a10:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   15a14:	4630      	mov	r0, r6
   15a16:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   15a18:	2800      	cmp	r0, #0
   15a1a:	d06d      	beq.n	15af8 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15a1c:	4d3c      	ldr	r5, [pc, #240]	; (15b10 <bt_pub_key_gen+0x124>)
   15a1e:	682a      	ldr	r2, [r5, #0]
   15a20:	b10a      	cbz	r2, 15a26 <bt_pub_key_gen+0x3a>
   15a22:	1f13      	subs	r3, r2, #4
   15a24:	b9bb      	cbnz	r3, 15a56 <bt_pub_key_gen+0x6a>
	parent->next = child;
   15a26:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   15a28:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   15a2a:	1d03      	adds	r3, r0, #4
	list->head = node;
   15a2c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   15a2e:	b902      	cbnz	r2, 15a32 <bt_pub_key_gen+0x46>
	list->tail = node;
   15a30:	606b      	str	r3, [r5, #4]
   15a32:	4c38      	ldr	r4, [pc, #224]	; (15b14 <bt_pub_key_gen+0x128>)
   15a34:	f3bf 8f5b 	dmb	ish
   15a38:	e854 2f00 	ldrex	r2, [r4]
   15a3c:	f042 0310 	orr.w	r3, r2, #16
   15a40:	e844 3100 	strex	r1, r3, [r4]
   15a44:	2900      	cmp	r1, #0
   15a46:	d1f7      	bne.n	15a38 <bt_pub_key_gen+0x4c>
   15a48:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15a4c:	f012 0210 	ands.w	r2, r2, #16
   15a50:	d017      	beq.n	15a82 <bt_pub_key_gen+0x96>
		return 0;
   15a52:	2600      	movs	r6, #0
   15a54:	e7de      	b.n	15a14 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   15a56:	4298      	cmp	r0, r3
   15a58:	d10c      	bne.n	15a74 <bt_pub_key_gen+0x88>
   15a5a:	4b2a      	ldr	r3, [pc, #168]	; (15b04 <bt_pub_key_gen+0x118>)
   15a5c:	492a      	ldr	r1, [pc, #168]	; (15b08 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
   15a5e:	482e      	ldr	r0, [pc, #184]	; (15b18 <bt_pub_key_gen+0x12c>)
   15a60:	1ac9      	subs	r1, r1, r3
   15a62:	08c9      	lsrs	r1, r1, #3
   15a64:	0189      	lsls	r1, r1, #6
   15a66:	f041 0102 	orr.w	r1, r1, #2
   15a6a:	f008 fd8a 	bl	1e582 <log_0>
			return -EALREADY;
   15a6e:	f06f 0677 	mvn.w	r6, #119	; 0x77
   15a72:	e7cf      	b.n	15a14 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15a74:	1d19      	adds	r1, r3, #4
   15a76:	d0d6      	beq.n	15a26 <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15a78:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15a7a:	2b00      	cmp	r3, #0
   15a7c:	d0d3      	beq.n	15a26 <bt_pub_key_gen+0x3a>
   15a7e:	3b04      	subs	r3, #4
   15a80:	e7d0      	b.n	15a24 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a82:	f3bf 8f5b 	dmb	ish
   15a86:	e854 3f00 	ldrex	r3, [r4]
   15a8a:	f023 0308 	bic.w	r3, r3, #8
   15a8e:	e844 3100 	strex	r1, r3, [r4]
   15a92:	2900      	cmp	r1, #0
   15a94:	d1f7      	bne.n	15a86 <bt_pub_key_gen+0x9a>
   15a96:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   15a9a:	4611      	mov	r1, r2
   15a9c:	f242 0025 	movw	r0, #8229	; 0x2025
   15aa0:	f7fe fd42 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   15aa4:	4606      	mov	r6, r0
   15aa6:	2800      	cmp	r0, #0
   15aa8:	d0d3      	beq.n	15a52 <bt_pub_key_gen+0x66>
   15aaa:	4b16      	ldr	r3, [pc, #88]	; (15b04 <bt_pub_key_gen+0x118>)
   15aac:	4916      	ldr	r1, [pc, #88]	; (15b08 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
   15aae:	481b      	ldr	r0, [pc, #108]	; (15b1c <bt_pub_key_gen+0x130>)
   15ab0:	1ac9      	subs	r1, r1, r3
   15ab2:	08c9      	lsrs	r1, r1, #3
   15ab4:	0189      	lsls	r1, r1, #6
   15ab6:	f041 0101 	orr.w	r1, r1, #1
   15aba:	f008 fd62 	bl	1e582 <log_0>
   15abe:	f3bf 8f5b 	dmb	ish
   15ac2:	e854 3f00 	ldrex	r3, [r4]
   15ac6:	f023 0310 	bic.w	r3, r3, #16
   15aca:	e844 3200 	strex	r2, r3, [r4]
   15ace:	2a00      	cmp	r2, #0
   15ad0:	d1f7      	bne.n	15ac2 <bt_pub_key_gen+0xd6>
   15ad2:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15ad6:	682c      	ldr	r4, [r5, #0]
   15ad8:	b91c      	cbnz	r4, 15ae2 <bt_pub_key_gen+0xf6>
	list->head = NULL;
   15ada:	2300      	movs	r3, #0
	list->tail = NULL;
   15adc:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   15ae0:	e798      	b.n	15a14 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15ae2:	3c04      	subs	r4, #4
   15ae4:	2c00      	cmp	r4, #0
   15ae6:	d0f8      	beq.n	15ada <bt_pub_key_gen+0xee>
			if (cb->func) {
   15ae8:	6823      	ldr	r3, [r4, #0]
   15aea:	b10b      	cbz	r3, 15af0 <bt_pub_key_gen+0x104>
				cb->func(NULL);
   15aec:	2000      	movs	r0, #0
   15aee:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15af0:	1d23      	adds	r3, r4, #4
   15af2:	d0f2      	beq.n	15ada <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15af4:	6864      	ldr	r4, [r4, #4]
	return node->next;
   15af6:	e7ef      	b.n	15ad8 <bt_pub_key_gen+0xec>
		return -EINVAL;
   15af8:	f06f 0615 	mvn.w	r6, #21
   15afc:	e78a      	b.n	15a14 <bt_pub_key_gen+0x28>
   15afe:	bf00      	nop
   15b00:	200002a0 	.word	0x200002a0
   15b04:	0002353c 	.word	0x0002353c
   15b08:	0002356c 	.word	0x0002356c
   15b0c:	0002531c 	.word	0x0002531c
   15b10:	20001ee4 	.word	0x20001ee4
   15b14:	20000338 	.word	0x20000338
   15b18:	0002533b 	.word	0x0002533b
   15b1c:	00025357 	.word	0x00025357

00015b20 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15b20:	4b05      	ldr	r3, [pc, #20]	; (15b38 <bt_pub_key_get+0x18>)
   15b22:	f3bf 8f5b 	dmb	ish
   15b26:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   15b28:	4804      	ldr	r0, [pc, #16]	; (15b3c <bt_pub_key_get+0x1c>)
   15b2a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   15b2e:	f013 0f08 	tst.w	r3, #8
}
   15b32:	bf08      	it	eq
   15b34:	2000      	moveq	r0, #0
   15b36:	4770      	bx	lr
   15b38:	20000338 	.word	0x20000338
   15b3c:	20002275 	.word	0x20002275

00015b40 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   15b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   15b42:	4d25      	ldr	r5, [pc, #148]	; (15bd8 <bt_dh_key_gen+0x98>)
   15b44:	682b      	ldr	r3, [r5, #0]
   15b46:	428b      	cmp	r3, r1
{
   15b48:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   15b4a:	d03f      	beq.n	15bcc <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15b4c:	b11b      	cbz	r3, 15b56 <bt_dh_key_gen+0x16>
		return -EBUSY;
   15b4e:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   15b52:	4620      	mov	r0, r4
   15b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b56:	4b21      	ldr	r3, [pc, #132]	; (15bdc <bt_dh_key_gen+0x9c>)
   15b58:	f3bf 8f5b 	dmb	ish
   15b5c:	681a      	ldr	r2, [r3, #0]
   15b5e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15b62:	f3c2 1700 	ubfx	r7, r2, #4, #1
   15b66:	06d2      	lsls	r2, r2, #27
   15b68:	d4f1      	bmi.n	15b4e <bt_dh_key_gen+0xe>
   15b6a:	f3bf 8f5b 	dmb	ish
   15b6e:	681b      	ldr	r3, [r3, #0]
   15b70:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   15b74:	071b      	lsls	r3, r3, #28
   15b76:	d52c      	bpl.n	15bd2 <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
   15b78:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   15b7a:	f242 0026 	movw	r0, #8230	; 0x2026
   15b7e:	2140      	movs	r1, #64	; 0x40
   15b80:	f7fe fb76 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   15b84:	4604      	mov	r4, r0
   15b86:	b1f0      	cbz	r0, 15bc6 <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
   15b88:	2140      	movs	r1, #64	; 0x40
   15b8a:	3008      	adds	r0, #8
   15b8c:	f00c fc80 	bl	22490 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   15b90:	2240      	movs	r2, #64	; 0x40
   15b92:	4631      	mov	r1, r6
   15b94:	f00a fb4f 	bl	20236 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   15b98:	4621      	mov	r1, r4
   15b9a:	463a      	mov	r2, r7
   15b9c:	f242 0026 	movw	r0, #8230	; 0x2026
   15ba0:	f7fe fcc2 	bl	14528 <bt_hci_cmd_send_sync>
	if (err) {
   15ba4:	4604      	mov	r4, r0
   15ba6:	2800      	cmp	r0, #0
   15ba8:	d0d3      	beq.n	15b52 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   15baa:	2300      	movs	r3, #0
   15bac:	602b      	str	r3, [r5, #0]
   15bae:	4a0c      	ldr	r2, [pc, #48]	; (15be0 <bt_dh_key_gen+0xa0>)
   15bb0:	4b0c      	ldr	r3, [pc, #48]	; (15be4 <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   15bb2:	480d      	ldr	r0, [pc, #52]	; (15be8 <bt_dh_key_gen+0xa8>)
   15bb4:	1ad2      	subs	r2, r2, r3
   15bb6:	08d2      	lsrs	r2, r2, #3
   15bb8:	0192      	lsls	r2, r2, #6
   15bba:	f042 0202 	orr.w	r2, r2, #2
   15bbe:	4621      	mov	r1, r4
   15bc0:	f008 fcec 	bl	1e59c <log_1>
		return err;
   15bc4:	e7c5      	b.n	15b52 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   15bc6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15bca:	e7ee      	b.n	15baa <bt_dh_key_gen+0x6a>
		return -EALREADY;
   15bcc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15bd0:	e7bf      	b.n	15b52 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   15bd2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   15bd6:	e7bc      	b.n	15b52 <bt_dh_key_gen+0x12>
   15bd8:	20001ee0 	.word	0x20001ee0
   15bdc:	20000338 	.word	0x20000338
   15be0:	0002356c 	.word	0x0002356c
   15be4:	0002353c 	.word	0x0002353c
   15be8:	00025381 	.word	0x00025381

00015bec <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   15bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15bee:	4c1d      	ldr	r4, [pc, #116]	; (15c64 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   15bf0:	6886      	ldr	r6, [r0, #8]
   15bf2:	f3bf 8f5b 	dmb	ish
   15bf6:	e854 3f00 	ldrex	r3, [r4]
   15bfa:	f023 0310 	bic.w	r3, r3, #16
   15bfe:	e844 3200 	strex	r2, r3, [r4]
   15c02:	2a00      	cmp	r2, #0
   15c04:	d1f7      	bne.n	15bf6 <bt_hci_evt_le_pkey_complete+0xa>
   15c06:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   15c0a:	7833      	ldrb	r3, [r6, #0]
   15c0c:	b983      	cbnz	r3, 15c30 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, 64);
   15c0e:	4816      	ldr	r0, [pc, #88]	; (15c68 <bt_hci_evt_le_pkey_complete+0x7c>)
   15c10:	2240      	movs	r2, #64	; 0x40
   15c12:	1c71      	adds	r1, r6, #1
   15c14:	f00a fb0f 	bl	20236 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c18:	f3bf 8f5b 	dmb	ish
   15c1c:	e854 3f00 	ldrex	r3, [r4]
   15c20:	f043 0308 	orr.w	r3, r3, #8
   15c24:	e844 3200 	strex	r2, r3, [r4]
   15c28:	2a00      	cmp	r2, #0
   15c2a:	d1f7      	bne.n	15c1c <bt_hci_evt_le_pkey_complete+0x30>
   15c2c:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15c30:	4d0e      	ldr	r5, [pc, #56]	; (15c6c <bt_hci_evt_le_pkey_complete+0x80>)
   15c32:	682c      	ldr	r4, [r5, #0]
   15c34:	b91c      	cbnz	r4, 15c3e <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   15c36:	2300      	movs	r3, #0
	list->tail = NULL;
   15c38:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   15c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   15c3e:	4f0a      	ldr	r7, [pc, #40]	; (15c68 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15c40:	3c04      	subs	r4, #4
   15c42:	2c00      	cmp	r4, #0
   15c44:	d0f7      	beq.n	15c36 <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   15c46:	6823      	ldr	r3, [r4, #0]
   15c48:	b12b      	cbz	r3, 15c56 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   15c4a:	7832      	ldrb	r2, [r6, #0]
   15c4c:	2a00      	cmp	r2, #0
   15c4e:	bf0c      	ite	eq
   15c50:	4638      	moveq	r0, r7
   15c52:	2000      	movne	r0, #0
   15c54:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15c56:	1d23      	adds	r3, r4, #4
   15c58:	d0ed      	beq.n	15c36 <bt_hci_evt_le_pkey_complete+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15c5a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15c5c:	2c00      	cmp	r4, #0
   15c5e:	d0ea      	beq.n	15c36 <bt_hci_evt_le_pkey_complete+0x4a>
   15c60:	3c04      	subs	r4, #4
   15c62:	e7ee      	b.n	15c42 <bt_hci_evt_le_pkey_complete+0x56>
   15c64:	20000338 	.word	0x20000338
   15c68:	20002275 	.word	0x20002275
   15c6c:	20001ee4 	.word	0x20001ee4

00015c70 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   15c70:	4905      	ldr	r1, [pc, #20]	; (15c88 <bt_hci_evt_le_dhkey_complete+0x18>)
   15c72:	680b      	ldr	r3, [r1, #0]
   15c74:	b133      	cbz	r3, 15c84 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   15c76:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   15c78:	2000      	movs	r0, #0
   15c7a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   15c7c:	7811      	ldrb	r1, [r2, #0]
   15c7e:	b901      	cbnz	r1, 15c82 <bt_hci_evt_le_dhkey_complete+0x12>
   15c80:	1c50      	adds	r0, r2, #1
   15c82:	4718      	bx	r3
	}
}
   15c84:	4770      	bx	lr
   15c86:	bf00      	nop
   15c88:	20001ee0 	.word	0x20001ee0

00015c8c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   15c8c:	2300      	movs	r3, #0
	tx->user_data = NULL;
   15c8e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   15c92:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   15c94:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   15c96:	4801      	ldr	r0, [pc, #4]	; (15c9c <tx_free+0x10>)
   15c98:	f00c beb3 	b.w	22a02 <k_queue_append>
   15c9c:	200007d4 	.word	0x200007d4

00015ca0 <notify_connected>:
{
   15ca0:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   15ca2:	4b09      	ldr	r3, [pc, #36]	; (15cc8 <notify_connected+0x28>)
   15ca4:	681d      	ldr	r5, [r3, #0]
{
   15ca6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   15ca8:	7b21      	ldrb	r1, [r4, #12]
   15caa:	b92d      	cbnz	r5, 15cb8 <notify_connected+0x18>
	if (!conn->err) {
   15cac:	b951      	cbnz	r1, 15cc4 <notify_connected+0x24>
		bt_gatt_connected(conn);
   15cae:	4620      	mov	r0, r4
}
   15cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   15cb4:	f003 b83c 	b.w	18d30 <bt_gatt_connected>
		if (cb->connected) {
   15cb8:	682b      	ldr	r3, [r5, #0]
   15cba:	b10b      	cbz	r3, 15cc0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   15cbc:	4620      	mov	r0, r4
   15cbe:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15cc0:	69ad      	ldr	r5, [r5, #24]
   15cc2:	e7f1      	b.n	15ca8 <notify_connected+0x8>
}
   15cc4:	bd38      	pop	{r3, r4, r5, pc}
   15cc6:	bf00      	nop
   15cc8:	20001ef0 	.word	0x20001ef0

00015ccc <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   15ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   15cd0:	694d      	ldr	r5, [r1, #20]
{
   15cd2:	4604      	mov	r4, r0
   15cd4:	460e      	mov	r6, r1
   15cd6:	4691      	mov	r9, r2
   15cd8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   15cda:	f04f 33ff 	mov.w	r3, #4294967295
   15cde:	4845      	ldr	r0, [pc, #276]	; (15df4 <send_frag+0x128>)
   15ce0:	f04f 32ff 	mov.w	r2, #4294967295
   15ce4:	f006 feec 	bl	1cac0 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   15ce8:	7b63      	ldrb	r3, [r4, #13]
   15cea:	2b07      	cmp	r3, #7
   15cec:	d151      	bne.n	15d92 <send_frag+0xc6>
	__asm__ volatile(
   15cee:	f04f 0340 	mov.w	r3, #64	; 0x40
   15cf2:	f3ef 8211 	mrs	r2, BASEPRI
   15cf6:	f383 8811 	msr	BASEPRI, r3
   15cfa:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   15cfe:	2d00      	cmp	r5, #0
   15d00:	d059      	beq.n	15db6 <send_frag+0xea>
	parent->next = child;
   15d02:	2300      	movs	r3, #0
   15d04:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   15d06:	69a3      	ldr	r3, [r4, #24]
   15d08:	2b00      	cmp	r3, #0
   15d0a:	d151      	bne.n	15db0 <send_frag+0xe4>
	list->head = node;
   15d0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   15d10:	f382 8811 	msr	BASEPRI, r2
   15d14:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   15d18:	2104      	movs	r1, #4
   15d1a:	f106 0008 	add.w	r0, r6, #8
   15d1e:	f00c fbce 	bl	224be <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15d22:	8823      	ldrh	r3, [r4, #0]
   15d24:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   15d28:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15d2c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15d2e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15d32:	3b04      	subs	r3, #4
   15d34:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15d36:	2302      	movs	r3, #2
   15d38:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   15d3a:	4630      	mov	r0, r6
   15d3c:	f00a fce2 	bl	20704 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   15d40:	4601      	mov	r1, r0
   15d42:	2800      	cmp	r0, #0
   15d44:	d053      	beq.n	15dee <send_frag+0x122>
   15d46:	4b2c      	ldr	r3, [pc, #176]	; (15df8 <send_frag+0x12c>)
   15d48:	4a2c      	ldr	r2, [pc, #176]	; (15dfc <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
   15d4a:	482d      	ldr	r0, [pc, #180]	; (15e00 <send_frag+0x134>)
   15d4c:	1ad2      	subs	r2, r2, r3
   15d4e:	08d2      	lsrs	r2, r2, #3
   15d50:	0192      	lsls	r2, r2, #6
   15d52:	f042 0201 	orr.w	r2, r2, #1
   15d56:	f008 fc21 	bl	1e59c <log_1>
	__asm__ volatile(
   15d5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15d5e:	f3ef 8111 	mrs	r1, BASEPRI
   15d62:	f383 8811 	msr	BASEPRI, r3
   15d66:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   15d6a:	2d00      	cmp	r5, #0
   15d6c:	d039      	beq.n	15de2 <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15d6e:	6963      	ldr	r3, [r4, #20]
   15d70:	2200      	movs	r2, #0
   15d72:	b153      	cbz	r3, 15d8a <send_frag+0xbe>
   15d74:	429d      	cmp	r5, r3
   15d76:	d131      	bne.n	15ddc <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   15d78:	682b      	ldr	r3, [r5, #0]
   15d7a:	bb4a      	cbnz	r2, 15dd0 <send_frag+0x104>
   15d7c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   15d7e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   15d80:	4295      	cmp	r5, r2
   15d82:	d100      	bne.n	15d86 <send_frag+0xba>
	list->tail = node;
   15d84:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   15d86:	2300      	movs	r3, #0
   15d88:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   15d8a:	f381 8811 	msr	BASEPRI, r1
   15d8e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   15d92:	4818      	ldr	r0, [pc, #96]	; (15df4 <send_frag+0x128>)
   15d94:	f006 fe6e 	bl	1ca74 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   15d98:	b115      	cbz	r5, 15da0 <send_frag+0xd4>
		tx_free(tx);
   15d9a:	4628      	mov	r0, r5
   15d9c:	f7ff ff76 	bl	15c8c <tx_free>
	}

	if (always_consume) {
   15da0:	b11f      	cbz	r7, 15daa <send_frag+0xde>
		net_buf_unref(buf);
   15da2:	4630      	mov	r0, r6
   15da4:	f004 ff3a 	bl	1ac1c <net_buf_unref>
	}
	return false;
   15da8:	2700      	movs	r7, #0
}
   15daa:	4638      	mov	r0, r7
   15dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15db0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15db2:	61a5      	str	r5, [r4, #24]
}
   15db4:	e7ac      	b.n	15d10 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   15db6:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   15db8:	b133      	cbz	r3, 15dc8 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   15dba:	f103 080c 	add.w	r8, r3, #12
   15dbe:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   15dc0:	3301      	adds	r3, #1
   15dc2:	f8c8 3000 	str.w	r3, [r8]
   15dc6:	e7a3      	b.n	15d10 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15dc8:	69e3      	ldr	r3, [r4, #28]
   15dca:	f104 081c 	add.w	r8, r4, #28
   15dce:	e7f7      	b.n	15dc0 <send_frag+0xf4>
	parent->next = child;
   15dd0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15dd2:	69a3      	ldr	r3, [r4, #24]
   15dd4:	429d      	cmp	r5, r3
	list->tail = node;
   15dd6:	bf08      	it	eq
   15dd8:	61a2      	streq	r2, [r4, #24]
}
   15dda:	e7d4      	b.n	15d86 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15ddc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15dde:	681b      	ldr	r3, [r3, #0]
   15de0:	e7c7      	b.n	15d72 <send_frag+0xa6>
			(*pending_no_cb)--;
   15de2:	f8d8 3000 	ldr.w	r3, [r8]
   15de6:	3b01      	subs	r3, #1
   15de8:	f8c8 3000 	str.w	r3, [r8]
   15dec:	e7cd      	b.n	15d8a <send_frag+0xbe>
	return true;
   15dee:	2701      	movs	r7, #1
   15df0:	e7db      	b.n	15daa <send_frag+0xde>
   15df2:	bf00      	nop
   15df4:	20000370 	.word	0x20000370
   15df8:	0002353c 	.word	0x0002353c
   15dfc:	0002355c 	.word	0x0002355c
   15e00:	00024d49 	.word	0x00024d49

00015e04 <bt_conn_get_pkts>:
}
   15e04:	4800      	ldr	r0, [pc, #0]	; (15e08 <bt_conn_get_pkts+0x4>)
   15e06:	4770      	bx	lr
   15e08:	20000370 	.word	0x20000370

00015e0c <notify_le_param_updated>:
{
   15e0c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15e0e:	f3bf 8f5b 	dmb	ish
   15e12:	6842      	ldr	r2, [r0, #4]
   15e14:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15e18:	0592      	lsls	r2, r2, #22
{
   15e1a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15e1c:	f100 0304 	add.w	r3, r0, #4
   15e20:	d519      	bpl.n	15e56 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15e22:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15e26:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   15e2a:	4291      	cmp	r1, r2
   15e2c:	d813      	bhi.n	15e56 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15e2e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   15e32:	4291      	cmp	r1, r2
   15e34:	d30f      	bcc.n	15e56 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
   15e36:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   15e3a:	4291      	cmp	r1, r2
   15e3c:	d10b      	bne.n	15e56 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15e3e:	f3bf 8f5b 	dmb	ish
   15e42:	e853 2f00 	ldrex	r2, [r3]
   15e46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   15e4a:	e843 2100 	strex	r1, r2, [r3]
   15e4e:	2900      	cmp	r1, #0
   15e50:	d1f7      	bne.n	15e42 <notify_le_param_updated+0x36>
   15e52:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   15e56:	4b08      	ldr	r3, [pc, #32]	; (15e78 <notify_le_param_updated+0x6c>)
   15e58:	681d      	ldr	r5, [r3, #0]
   15e5a:	b905      	cbnz	r5, 15e5e <notify_le_param_updated+0x52>
}
   15e5c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   15e5e:	68ee      	ldr	r6, [r5, #12]
   15e60:	b13e      	cbz	r6, 15e72 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   15e62:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   15e66:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15e6a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15e6e:	4620      	mov	r0, r4
   15e70:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   15e72:	69ad      	ldr	r5, [r5, #24]
   15e74:	e7f1      	b.n	15e5a <notify_le_param_updated+0x4e>
   15e76:	bf00      	nop
   15e78:	20001ef0 	.word	0x20001ef0

00015e7c <le_param_req>:
{
   15e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e7e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   15e80:	4608      	mov	r0, r1
{
   15e82:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15e84:	f00a fc1e 	bl	206c4 <bt_le_conn_params_valid>
   15e88:	4604      	mov	r4, r0
   15e8a:	b910      	cbnz	r0, 15e92 <le_param_req+0x16>
		return false;
   15e8c:	2400      	movs	r4, #0
}
   15e8e:	4620      	mov	r0, r4
   15e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15e92:	4b09      	ldr	r3, [pc, #36]	; (15eb8 <le_param_req+0x3c>)
   15e94:	681e      	ldr	r6, [r3, #0]
   15e96:	2e00      	cmp	r6, #0
   15e98:	d0f9      	beq.n	15e8e <le_param_req+0x12>
		if (!cb->le_param_req) {
   15e9a:	68b3      	ldr	r3, [r6, #8]
   15e9c:	b90b      	cbnz	r3, 15ea2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   15e9e:	69b6      	ldr	r6, [r6, #24]
   15ea0:	e7f9      	b.n	15e96 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   15ea2:	4629      	mov	r1, r5
   15ea4:	4638      	mov	r0, r7
   15ea6:	4798      	blx	r3
   15ea8:	2800      	cmp	r0, #0
   15eaa:	d0ef      	beq.n	15e8c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   15eac:	4628      	mov	r0, r5
   15eae:	f00a fc09 	bl	206c4 <bt_le_conn_params_valid>
   15eb2:	2800      	cmp	r0, #0
   15eb4:	d1f3      	bne.n	15e9e <le_param_req+0x22>
   15eb6:	e7e9      	b.n	15e8c <le_param_req+0x10>
   15eb8:	20001ef0 	.word	0x20001ef0

00015ebc <bt_conn_identity_resolved>:
{
   15ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   15ebe:	78c3      	ldrb	r3, [r0, #3]
{
   15ec0:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   15ec2:	b93b      	cbnz	r3, 15ed4 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   15ec4:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   15ec8:	4b08      	ldr	r3, [pc, #32]	; (15eec <bt_conn_identity_resolved+0x30>)
   15eca:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15ecc:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   15ed0:	b91d      	cbnz	r5, 15eda <bt_conn_identity_resolved+0x1e>
}
   15ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   15ed4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   15ed8:	e7f6      	b.n	15ec8 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   15eda:	692b      	ldr	r3, [r5, #16]
   15edc:	b11b      	cbz	r3, 15ee6 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15ede:	463a      	mov	r2, r7
   15ee0:	4631      	mov	r1, r6
   15ee2:	4620      	mov	r0, r4
   15ee4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15ee6:	69ad      	ldr	r5, [r5, #24]
   15ee8:	e7f2      	b.n	15ed0 <bt_conn_identity_resolved+0x14>
   15eea:	bf00      	nop
   15eec:	20001ef0 	.word	0x20001ef0

00015ef0 <bt_conn_security_changed>:
{
   15ef0:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   15ef2:	7a43      	ldrb	r3, [r0, #9]
   15ef4:	7283      	strb	r3, [r0, #10]
{
   15ef6:	4604      	mov	r4, r0
   15ef8:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   15efa:	f00a ff66 	bl	20dca <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   15efe:	4b06      	ldr	r3, [pc, #24]	; (15f18 <bt_conn_security_changed+0x28>)
   15f00:	681d      	ldr	r5, [r3, #0]
   15f02:	b905      	cbnz	r5, 15f06 <bt_conn_security_changed+0x16>
}
   15f04:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   15f06:	696b      	ldr	r3, [r5, #20]
   15f08:	b11b      	cbz	r3, 15f12 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   15f0a:	7a61      	ldrb	r1, [r4, #9]
   15f0c:	4632      	mov	r2, r6
   15f0e:	4620      	mov	r0, r4
   15f10:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15f12:	69ad      	ldr	r5, [r5, #24]
   15f14:	e7f5      	b.n	15f02 <bt_conn_security_changed+0x12>
   15f16:	bf00      	nop
   15f18:	20001ef0 	.word	0x20001ef0

00015f1c <bt_conn_cb_register>:
	cb->_next = callback_list;
   15f1c:	4b02      	ldr	r3, [pc, #8]	; (15f28 <bt_conn_cb_register+0xc>)
   15f1e:	681a      	ldr	r2, [r3, #0]
   15f20:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   15f22:	6018      	str	r0, [r3, #0]
}
   15f24:	4770      	bx	lr
   15f26:	bf00      	nop
   15f28:	20001ef0 	.word	0x20001ef0

00015f2c <bt_conn_recv>:
{
   15f2c:	b570      	push	{r4, r5, r6, lr}
   15f2e:	4616      	mov	r6, r2
   15f30:	4604      	mov	r4, r0
   15f32:	460d      	mov	r5, r1
	tx_notify(conn);
   15f34:	f00a fd85 	bl	20a42 <tx_notify>
	switch (flags) {
   15f38:	2e01      	cmp	r6, #1
   15f3a:	d02e      	beq.n	15f9a <bt_conn_recv+0x6e>
   15f3c:	2e02      	cmp	r6, #2
   15f3e:	d15b      	bne.n	15ff8 <bt_conn_recv+0xcc>
		if (conn->rx) {
   15f40:	6923      	ldr	r3, [r4, #16]
   15f42:	b163      	cbz	r3, 15f5e <bt_conn_recv+0x32>
   15f44:	4b37      	ldr	r3, [pc, #220]	; (16024 <bt_conn_recv+0xf8>)
   15f46:	4938      	ldr	r1, [pc, #224]	; (16028 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   15f48:	4838      	ldr	r0, [pc, #224]	; (1602c <bt_conn_recv+0x100>)
   15f4a:	1ac9      	subs	r1, r1, r3
   15f4c:	08c9      	lsrs	r1, r1, #3
   15f4e:	0189      	lsls	r1, r1, #6
   15f50:	f041 0101 	orr.w	r1, r1, #1
   15f54:	f008 fb15 	bl	1e582 <log_0>
			bt_conn_reset_rx_state(conn);
   15f58:	4620      	mov	r0, r4
   15f5a:	f00a fdf3 	bl	20b44 <bt_conn_reset_rx_state>
		conn->rx = buf;
   15f5e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   15f60:	6923      	ldr	r3, [r4, #16]
   15f62:	8999      	ldrh	r1, [r3, #12]
   15f64:	2901      	cmp	r1, #1
   15f66:	d95b      	bls.n	16020 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   15f68:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   15f6a:	7845      	ldrb	r5, [r0, #1]
   15f6c:	7802      	ldrb	r2, [r0, #0]
   15f6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   15f72:	3204      	adds	r2, #4
   15f74:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   15f76:	4291      	cmp	r1, r2
   15f78:	d352      	bcc.n	16020 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
   15f7a:	d949      	bls.n	16010 <bt_conn_recv+0xe4>
   15f7c:	4829      	ldr	r0, [pc, #164]	; (16024 <bt_conn_recv+0xf8>)
   15f7e:	4b2a      	ldr	r3, [pc, #168]	; (16028 <bt_conn_recv+0xfc>)
   15f80:	1a1b      	subs	r3, r3, r0
   15f82:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   15f84:	019b      	lsls	r3, r3, #6
   15f86:	482a      	ldr	r0, [pc, #168]	; (16030 <bt_conn_recv+0x104>)
   15f88:	f043 0301 	orr.w	r3, r3, #1
   15f8c:	f008 fb1a 	bl	1e5c4 <log_2>
		bt_conn_reset_rx_state(conn);
   15f90:	4620      	mov	r0, r4
}
   15f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   15f96:	f00a bdd5 	b.w	20b44 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   15f9a:	6920      	ldr	r0, [r4, #16]
   15f9c:	b968      	cbnz	r0, 15fba <bt_conn_recv+0x8e>
   15f9e:	4922      	ldr	r1, [pc, #136]	; (16028 <bt_conn_recv+0xfc>)
   15fa0:	4b20      	ldr	r3, [pc, #128]	; (16024 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   15fa2:	4824      	ldr	r0, [pc, #144]	; (16034 <bt_conn_recv+0x108>)
   15fa4:	1ac9      	subs	r1, r1, r3
   15fa6:	08c9      	lsrs	r1, r1, #3
   15fa8:	0189      	lsls	r1, r1, #6
   15faa:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   15fae:	f008 fae8 	bl	1e582 <log_0>
			bt_conn_reset_rx_state(conn);
   15fb2:	4620      	mov	r0, r4
   15fb4:	f00a fdc6 	bl	20b44 <bt_conn_reset_rx_state>
   15fb8:	e001      	b.n	15fbe <bt_conn_recv+0x92>
		if (!buf->len) {
   15fba:	89ae      	ldrh	r6, [r5, #12]
   15fbc:	b926      	cbnz	r6, 15fc8 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   15fbe:	4628      	mov	r0, r5
}
   15fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   15fc4:	f004 be2a 	b.w	1ac1c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   15fc8:	3008      	adds	r0, #8
   15fca:	f00c fa9c 	bl	22506 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   15fce:	4286      	cmp	r6, r0
   15fd0:	d908      	bls.n	15fe4 <bt_conn_recv+0xb8>
   15fd2:	4915      	ldr	r1, [pc, #84]	; (16028 <bt_conn_recv+0xfc>)
   15fd4:	4b13      	ldr	r3, [pc, #76]	; (16024 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   15fd6:	4818      	ldr	r0, [pc, #96]	; (16038 <bt_conn_recv+0x10c>)
   15fd8:	1ac9      	subs	r1, r1, r3
   15fda:	08c9      	lsrs	r1, r1, #3
   15fdc:	0189      	lsls	r1, r1, #6
   15fde:	f041 0101 	orr.w	r1, r1, #1
   15fe2:	e7e4      	b.n	15fae <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15fe4:	6920      	ldr	r0, [r4, #16]
   15fe6:	89aa      	ldrh	r2, [r5, #12]
   15fe8:	68a9      	ldr	r1, [r5, #8]
   15fea:	3008      	adds	r0, #8
   15fec:	f00c fa56 	bl	2249c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   15ff0:	4628      	mov	r0, r5
   15ff2:	f004 fe13 	bl	1ac1c <net_buf_unref>
		break;
   15ff6:	e7b3      	b.n	15f60 <bt_conn_recv+0x34>
   15ff8:	4a0a      	ldr	r2, [pc, #40]	; (16024 <bt_conn_recv+0xf8>)
   15ffa:	4b0b      	ldr	r3, [pc, #44]	; (16028 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   15ffc:	480f      	ldr	r0, [pc, #60]	; (1603c <bt_conn_recv+0x110>)
   15ffe:	1a9b      	subs	r3, r3, r2
   16000:	08db      	lsrs	r3, r3, #3
   16002:	019b      	lsls	r3, r3, #6
   16004:	f043 0201 	orr.w	r2, r3, #1
   16008:	4631      	mov	r1, r6
   1600a:	f008 fac7 	bl	1e59c <log_1>
		bt_conn_reset_rx_state(conn);
   1600e:	e7d0      	b.n	15fb2 <bt_conn_recv+0x86>
	conn->rx = NULL;
   16010:	2200      	movs	r2, #0
   16012:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   16014:	4620      	mov	r0, r4
   16016:	4619      	mov	r1, r3
}
   16018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1601c:	f000 bd28 	b.w	16a70 <bt_l2cap_recv>
}
   16020:	bd70      	pop	{r4, r5, r6, pc}
   16022:	bf00      	nop
   16024:	0002353c 	.word	0x0002353c
   16028:	0002355c 	.word	0x0002355c
   1602c:	000253ea 	.word	0x000253ea
   16030:	0002546a 	.word	0x0002546a
   16034:	00025407 	.word	0x00025407
   16038:	00025425 	.word	0x00025425
   1603c:	0002544c 	.word	0x0002544c

00016040 <bt_conn_send_cb>:
{
   16040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16044:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   16046:	7b43      	ldrb	r3, [r0, #13]
   16048:	2b07      	cmp	r3, #7
{
   1604a:	4605      	mov	r5, r0
   1604c:	460e      	mov	r6, r1
   1604e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   16050:	d00c      	beq.n	1606c <bt_conn_send_cb+0x2c>
   16052:	4926      	ldr	r1, [pc, #152]	; (160ec <bt_conn_send_cb+0xac>)
   16054:	4b26      	ldr	r3, [pc, #152]	; (160f0 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   16056:	4827      	ldr	r0, [pc, #156]	; (160f4 <bt_conn_send_cb+0xb4>)
   16058:	1ac9      	subs	r1, r1, r3
   1605a:	08c9      	lsrs	r1, r1, #3
   1605c:	0189      	lsls	r1, r1, #6
   1605e:	f041 0101 	orr.w	r1, r1, #1
   16062:	f008 fa8e 	bl	1e582 <log_0>
			return -ENOTCONN;
   16066:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1606a:	e01d      	b.n	160a8 <bt_conn_send_cb+0x68>
	if (cb) {
   1606c:	2a00      	cmp	r2, #0
   1606e:	d03a      	beq.n	160e6 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   16070:	f007 fa46 	bl	1d500 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   16074:	4b20      	ldr	r3, [pc, #128]	; (160f8 <bt_conn_send_cb+0xb8>)
   16076:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   16078:	4820      	ldr	r0, [pc, #128]	; (160fc <bt_conn_send_cb+0xbc>)
   1607a:	bf07      	ittee	eq
   1607c:	2200      	moveq	r2, #0
   1607e:	2300      	moveq	r3, #0
   16080:	f04f 32ff 	movne.w	r2, #4294967295
   16084:	f04f 33ff 	movne.w	r3, #4294967295
   16088:	f006 fcc0 	bl	1ca0c <z_impl_k_queue_get>
   1608c:	4604      	mov	r4, r0
		if (!tx) {
   1608e:	b968      	cbnz	r0, 160ac <bt_conn_send_cb+0x6c>
   16090:	4b17      	ldr	r3, [pc, #92]	; (160f0 <bt_conn_send_cb+0xb0>)
   16092:	4916      	ldr	r1, [pc, #88]	; (160ec <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   16094:	481a      	ldr	r0, [pc, #104]	; (16100 <bt_conn_send_cb+0xc0>)
   16096:	1ac9      	subs	r1, r1, r3
   16098:	08c9      	lsrs	r1, r1, #3
   1609a:	0189      	lsls	r1, r1, #6
   1609c:	f041 0101 	orr.w	r1, r1, #1
   160a0:	f008 fa6f 	bl	1e582 <log_0>
			return -ENOBUFS;
   160a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   160a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   160ac:	7b6b      	ldrb	r3, [r5, #13]
   160ae:	2b07      	cmp	r3, #7
   160b0:	d00d      	beq.n	160ce <bt_conn_send_cb+0x8e>
   160b2:	4b0f      	ldr	r3, [pc, #60]	; (160f0 <bt_conn_send_cb+0xb0>)
   160b4:	490d      	ldr	r1, [pc, #52]	; (160ec <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   160b6:	4813      	ldr	r0, [pc, #76]	; (16104 <bt_conn_send_cb+0xc4>)
   160b8:	1ac9      	subs	r1, r1, r3
   160ba:	08c9      	lsrs	r1, r1, #3
   160bc:	0189      	lsls	r1, r1, #6
   160be:	f041 0102 	orr.w	r1, r1, #2
   160c2:	f008 fa5e 	bl	1e582 <log_0>
			tx_free(tx);
   160c6:	4620      	mov	r0, r4
   160c8:	f7ff fde0 	bl	15c8c <tx_free>
   160cc:	e7cb      	b.n	16066 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   160ce:	2300      	movs	r3, #0
		tx->user_data = user_data;
   160d0:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   160d4:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   160d6:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   160d8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   160dc:	4631      	mov	r1, r6
   160de:	f00c f9a4 	bl	2242a <net_buf_put>
	return 0;
   160e2:	2000      	movs	r0, #0
   160e4:	e7e0      	b.n	160a8 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   160e6:	614a      	str	r2, [r1, #20]
   160e8:	e7f6      	b.n	160d8 <bt_conn_send_cb+0x98>
   160ea:	bf00      	nop
   160ec:	0002355c 	.word	0x0002355c
   160f0:	0002353c 	.word	0x0002353c
   160f4:	00025485 	.word	0x00025485
   160f8:	20001cc8 	.word	0x20001cc8
   160fc:	200007d4 	.word	0x200007d4
   16100:	00025494 	.word	0x00025494
   16104:	000254b2 	.word	0x000254b2

00016108 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   16108:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   1610a:	4b1b      	ldr	r3, [pc, #108]	; (16178 <bt_conn_prepare_events+0x70>)
   1610c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1610e:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   16110:	609a      	str	r2, [r3, #8]
{
   16112:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16114:	f00d f8aa 	bl	2326c <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16118:	f3bf 8f5b 	dmb	ish
   1611c:	4b17      	ldr	r3, [pc, #92]	; (1617c <bt_conn_prepare_events+0x74>)
   1611e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   16122:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   16126:	f104 0014 	add.w	r0, r4, #20
   1612a:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   1612c:	b90a      	cbnz	r2, 16132 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   1612e:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   16130:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16132:	7b5a      	ldrb	r2, [r3, #13]
   16134:	b99a      	cbnz	r2, 1615e <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16136:	f3bf 8f5b 	dmb	ish
   1613a:	1d1a      	adds	r2, r3, #4
   1613c:	e852 5f00 	ldrex	r5, [r2]
   16140:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   16144:	e842 ce00 	strex	lr, ip, [r2]
   16148:	f1be 0f00 	cmp.w	lr, #0
   1614c:	d1f6      	bne.n	1613c <bt_conn_prepare_events+0x34>
   1614e:	f3bf 8f5b 	dmb	ish
   16152:	066a      	lsls	r2, r5, #25
   16154:	d503      	bpl.n	1615e <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   16156:	4618      	mov	r0, r3
   16158:	f00a fcfd 	bl	20b56 <conn_cleanup>
   1615c:	e7e7      	b.n	1612e <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   1615e:	7b4b      	ldrb	r3, [r1, #13]
   16160:	2b07      	cmp	r3, #7
   16162:	d1e4      	bne.n	1612e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   16164:	4b06      	ldr	r3, [pc, #24]	; (16180 <bt_conn_prepare_events+0x78>)
   16166:	2200      	movs	r2, #0
   16168:	2104      	movs	r1, #4
   1616a:	f00d f87f 	bl	2326c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1616e:	2301      	movs	r3, #1
   16170:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   16174:	2002      	movs	r0, #2
	return ev_count;
   16176:	e7db      	b.n	16130 <bt_conn_prepare_events+0x28>
   16178:	200004e0 	.word	0x200004e0
   1617c:	20001648 	.word	0x20001648
   16180:	20001680 	.word	0x20001680

00016184 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   16184:	b570      	push	{r4, r5, r6, lr}
   16186:	4606      	mov	r6, r0
   16188:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1618a:	480f      	ldr	r0, [pc, #60]	; (161c8 <bt_conn_add_le+0x44>)
   1618c:	2101      	movs	r1, #1
   1618e:	f00a fc7e 	bl	20a8e <bt_conn_new>
	if (!conn) {
   16192:	4604      	mov	r4, r0
   16194:	b1b0      	cbz	r0, 161c4 <bt_conn_add_le+0x40>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   16196:	490d      	ldr	r1, [pc, #52]	; (161cc <bt_conn_add_le+0x48>)
   16198:	3058      	adds	r0, #88	; 0x58
   1619a:	f00c fd20 	bl	22bde <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1619e:	490c      	ldr	r1, [pc, #48]	; (161d0 <bt_conn_add_le+0x4c>)
   161a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   161a4:	f00c fcf5 	bl	22b92 <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   161a8:	7226      	strb	r6, [r4, #8]
   161aa:	2207      	movs	r2, #7
   161ac:	4629      	mov	r1, r5
   161ae:	f104 0088 	add.w	r0, r4, #136	; 0x88
   161b2:	f00a f840 	bl	20236 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   161b6:	2301      	movs	r3, #1
   161b8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   161ba:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   161bc:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   161be:	4b05      	ldr	r3, [pc, #20]	; (161d4 <bt_conn_add_le+0x50>)
   161c0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   161c4:	4620      	mov	r0, r4
   161c6:	bd70      	pop	{r4, r5, r6, pc}
   161c8:	20001648 	.word	0x20001648
   161cc:	000164e5 	.word	0x000164e5
   161d0:	00020a89 	.word	0x00020a89
   161d4:	00280018 	.word	0x00280018

000161d8 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   161d8:	4602      	mov	r2, r0
   161da:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   161dc:	2101      	movs	r1, #1
   161de:	4803      	ldr	r0, [pc, #12]	; (161ec <bt_conn_lookup_handle+0x14>)
   161e0:	f00a fd32 	bl	20c48 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   161e4:	2800      	cmp	r0, #0
   161e6:	bf38      	it	cc
   161e8:	2000      	movcc	r0, #0
   161ea:	bd08      	pop	{r3, pc}
   161ec:	20001648 	.word	0x20001648

000161f0 <bt_conn_set_state>:
{
   161f0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   161f2:	7b46      	ldrb	r6, [r0, #13]
   161f4:	428e      	cmp	r6, r1
{
   161f6:	4604      	mov	r4, r0
   161f8:	460d      	mov	r5, r1
	if (conn->state == state) {
   161fa:	d112      	bne.n	16222 <bt_conn_set_state+0x32>
   161fc:	4b65      	ldr	r3, [pc, #404]	; (16394 <bt_conn_set_state+0x1a4>)
   161fe:	4a66      	ldr	r2, [pc, #408]	; (16398 <bt_conn_set_state+0x1a8>)
		BT_WARN("no transition %s", state2str(state));
   16200:	4866      	ldr	r0, [pc, #408]	; (1639c <bt_conn_set_state+0x1ac>)
   16202:	2e08      	cmp	r6, #8
   16204:	eba2 0203 	sub.w	r2, r2, r3
   16208:	bf96      	itet	ls
   1620a:	4b65      	ldrls	r3, [pc, #404]	; (163a0 <bt_conn_set_state+0x1b0>)
   1620c:	4965      	ldrhi	r1, [pc, #404]	; (163a4 <bt_conn_set_state+0x1b4>)
   1620e:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   16212:	08d2      	lsrs	r2, r2, #3
   16214:	0192      	lsls	r2, r2, #6
   16216:	f042 0202 	orr.w	r2, r2, #2
}
   1621a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   1621e:	f008 b9bd 	b.w	1e59c <log_1>
	conn->state = state;
   16222:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   16224:	b90e      	cbnz	r6, 1622a <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
   16226:	f00a fcdd 	bl	20be4 <bt_conn_ref>
	switch (conn->state) {
   1622a:	7b63      	ldrb	r3, [r4, #13]
   1622c:	2b08      	cmp	r3, #8
   1622e:	f200 80a6 	bhi.w	1637e <bt_conn_set_state+0x18e>
   16232:	e8df f003 	tbb	[pc, r3]
   16236:	0537      	.short	0x0537
   16238:	aeaeaeae 	.word	0xaeaeaeae
   1623c:	1cae      	.short	0x1cae
   1623e:	ae          	.byte	0xae
   1623f:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   16240:	4d59      	ldr	r5, [pc, #356]	; (163a8 <bt_conn_set_state+0x1b8>)
		tx->pending_no_cb = 0U;
   16242:	2600      	movs	r6, #0
	__asm__ volatile(
   16244:	f04f 0340 	mov.w	r3, #64	; 0x40
   16248:	f3ef 8211 	mrs	r2, BASEPRI
   1624c:	f383 8811 	msr	BASEPRI, r3
   16250:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   16254:	69e3      	ldr	r3, [r4, #28]
   16256:	2b00      	cmp	r3, #0
   16258:	d072      	beq.n	16340 <bt_conn_set_state+0x150>
			conn->pending_no_cb--;
   1625a:	3b01      	subs	r3, #1
   1625c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1625e:	f382 8811 	msr	BASEPRI, r2
   16262:	f3bf 8f6f 	isb	sy
   16266:	4628      	mov	r0, r5
   16268:	f006 fc04 	bl	1ca74 <z_impl_k_sem_give>
}
   1626c:	e7ea      	b.n	16244 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1626e:	78a3      	ldrb	r3, [r4, #2]
   16270:	2b04      	cmp	r3, #4
   16272:	f000 808e 	beq.w	16392 <bt_conn_set_state+0x1a2>
	z_impl_k_queue_init(queue);
   16276:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1627a:	f00c fbb6 	bl	229ea <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1627e:	484b      	ldr	r0, [pc, #300]	; (163ac <bt_conn_set_state+0x1bc>)
   16280:	2100      	movs	r1, #0
   16282:	f007 fc39 	bl	1daf8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   16286:	2300      	movs	r3, #0
	list->tail = NULL;
   16288:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1628c:	78e3      	ldrb	r3, [r4, #3]
   1628e:	2b01      	cmp	r3, #1
   16290:	d17f      	bne.n	16392 <bt_conn_set_state+0x1a2>
			k_work_schedule(&conn->deferred_work,
   16292:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16296:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   1629a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1629e:	2300      	movs	r3, #0
   162a0:	f006 bdea 	b.w	1ce78 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   162a4:	78a3      	ldrb	r3, [r4, #2]
   162a6:	2b04      	cmp	r3, #4
   162a8:	d104      	bne.n	162b4 <bt_conn_set_state+0xc4>
			bt_conn_unref(conn);
   162aa:	4620      	mov	r0, r4
}
   162ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   162b0:	f00a bcb3 	b.w	20c1a <bt_conn_unref>
		switch (old_state) {
   162b4:	2e08      	cmp	r6, #8
   162b6:	d86c      	bhi.n	16392 <bt_conn_set_state+0x1a2>
   162b8:	a301      	add	r3, pc, #4	; (adr r3, 162c0 <bt_conn_set_state+0xd0>)
   162ba:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   162be:	bf00      	nop
   162c0:	0001632d 	.word	0x0001632d
   162c4:	000162e5 	.word	0x000162e5
   162c8:	0001631f 	.word	0x0001631f
   162cc:	000162ab 	.word	0x000162ab
   162d0:	000162ab 	.word	0x000162ab
   162d4:	0001631f 	.word	0x0001631f
   162d8:	0001631f 	.word	0x0001631f
   162dc:	0001632d 	.word	0x0001632d
   162e0:	0001632d 	.word	0x0001632d
			tx_notify(conn);
   162e4:	4620      	mov	r0, r4
   162e6:	f00a fbac 	bl	20a42 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   162ea:	78a3      	ldrb	r3, [r4, #2]
   162ec:	2b01      	cmp	r3, #1
   162ee:	d103      	bne.n	162f8 <bt_conn_set_state+0x108>
				k_work_cancel_delayable(&conn->deferred_work);
   162f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   162f4:	f00c fc7f 	bl	22bf6 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   162f8:	f3bf 8f5b 	dmb	ish
   162fc:	3404      	adds	r4, #4
   162fe:	e854 3f00 	ldrex	r3, [r4]
   16302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16306:	e844 3200 	strex	r2, r3, [r4]
   1630a:	2a00      	cmp	r2, #0
   1630c:	d1f7      	bne.n	162fe <bt_conn_set_state+0x10e>
   1630e:	f3bf 8f5b 	dmb	ish
   16312:	4826      	ldr	r0, [pc, #152]	; (163ac <bt_conn_set_state+0x1bc>)
}
   16314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16318:	2100      	movs	r1, #0
   1631a:	f007 bbed 	b.w	1daf8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1631e:	7b23      	ldrb	r3, [r4, #12]
   16320:	2b00      	cmp	r3, #0
   16322:	d0c2      	beq.n	162aa <bt_conn_set_state+0xba>
				notify_connected(conn);
   16324:	4620      	mov	r0, r4
   16326:	f7ff fcbb 	bl	15ca0 <notify_connected>
   1632a:	e7be      	b.n	162aa <bt_conn_set_state+0xba>
   1632c:	4a1a      	ldr	r2, [pc, #104]	; (16398 <bt_conn_set_state+0x1a8>)
   1632e:	4b19      	ldr	r3, [pc, #100]	; (16394 <bt_conn_set_state+0x1a4>)
			BT_WARN("Invalid (%u) old state", state);
   16330:	481f      	ldr	r0, [pc, #124]	; (163b0 <bt_conn_set_state+0x1c0>)
   16332:	1ad2      	subs	r2, r2, r3
   16334:	08d2      	lsrs	r2, r2, #3
   16336:	0192      	lsls	r2, r2, #6
   16338:	f042 0202 	orr.w	r2, r2, #2
   1633c:	4629      	mov	r1, r5
   1633e:	e76c      	b.n	1621a <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   16340:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   16342:	b128      	cbz	r0, 16350 <bt_conn_set_state+0x160>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16344:	69a1      	ldr	r1, [r4, #24]
   16346:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   16348:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1634a:	4288      	cmp	r0, r1
	list->tail = node;
   1634c:	bf08      	it	eq
   1634e:	61a3      	streq	r3, [r4, #24]
   16350:	f382 8811 	msr	BASEPRI, r2
   16354:	f3bf 8f6f 	isb	sy
		if (!node) {
   16358:	b1d8      	cbz	r0, 16392 <bt_conn_set_state+0x1a2>
	__asm__ volatile(
   1635a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1635e:	f3ef 8311 	mrs	r3, BASEPRI
   16362:	f382 8811 	msr	BASEPRI, r2
   16366:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1636a:	68c2      	ldr	r2, [r0, #12]
   1636c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1636e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   16370:	f383 8811 	msr	BASEPRI, r3
   16374:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   16378:	f7ff fc88 	bl	15c8c <tx_free>
   1637c:	e773      	b.n	16266 <bt_conn_set_state+0x76>
   1637e:	4a06      	ldr	r2, [pc, #24]	; (16398 <bt_conn_set_state+0x1a8>)
   16380:	4b04      	ldr	r3, [pc, #16]	; (16394 <bt_conn_set_state+0x1a4>)
		BT_WARN("no valid (%u) state was set", state);
   16382:	480c      	ldr	r0, [pc, #48]	; (163b4 <bt_conn_set_state+0x1c4>)
   16384:	1ad2      	subs	r2, r2, r3
   16386:	08d2      	lsrs	r2, r2, #3
   16388:	0192      	lsls	r2, r2, #6
   1638a:	f042 0202 	orr.w	r2, r2, #2
   1638e:	4629      	mov	r1, r5
   16390:	e743      	b.n	1621a <bt_conn_set_state+0x2a>
}
   16392:	bd70      	pop	{r4, r5, r6, pc}
   16394:	0002353c 	.word	0x0002353c
   16398:	0002355c 	.word	0x0002355c
   1639c:	000254e2 	.word	0x000254e2
   163a0:	00023b9c 	.word	0x00023b9c
   163a4:	000254d8 	.word	0x000254d8
   163a8:	20000370 	.word	0x20000370
   163ac:	200004e0 	.word	0x200004e0
   163b0:	000254f3 	.word	0x000254f3
   163b4:	0002550a 	.word	0x0002550a

000163b8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   163b8:	b570      	push	{r4, r5, r6, lr}
   163ba:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   163bc:	480c      	ldr	r0, [pc, #48]	; (163f0 <bt_conn_lookup_addr_le+0x38>)
{
   163be:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   163c0:	f00a fc10 	bl	20be4 <bt_conn_ref>

		if (!conn) {
   163c4:	4604      	mov	r4, r0
   163c6:	b128      	cbz	r0, 163d4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   163c8:	7883      	ldrb	r3, [r0, #2]
   163ca:	2b01      	cmp	r3, #1
   163cc:	d004      	beq.n	163d8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   163ce:	f00a fc24 	bl	20c1a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   163d2:	2400      	movs	r4, #0
}
   163d4:	4620      	mov	r0, r4
   163d6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   163d8:	4629      	mov	r1, r5
   163da:	4632      	mov	r2, r6
   163dc:	f00a fbe2 	bl	20ba4 <bt_conn_is_peer_addr_le>
   163e0:	4605      	mov	r5, r0
   163e2:	2800      	cmp	r0, #0
   163e4:	d1f6      	bne.n	163d4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   163e6:	4620      	mov	r0, r4
   163e8:	f00a fc17 	bl	20c1a <bt_conn_unref>
	return NULL;
   163ec:	462c      	mov	r4, r5
			continue;
   163ee:	e7f1      	b.n	163d4 <bt_conn_lookup_addr_le+0x1c>
   163f0:	20001648 	.word	0x20001648

000163f4 <bt_conn_exists_le>:
{
   163f4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   163f6:	f7ff ffdf 	bl	163b8 <bt_conn_lookup_addr_le>
	if (conn) {
   163fa:	4604      	mov	r4, r0
   163fc:	b1a0      	cbz	r0, 16428 <bt_conn_exists_le+0x34>
   163fe:	4b0b      	ldr	r3, [pc, #44]	; (1642c <bt_conn_exists_le+0x38>)
   16400:	4a0b      	ldr	r2, [pc, #44]	; (16430 <bt_conn_exists_le+0x3c>)
   16402:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   16404:	7b43      	ldrb	r3, [r0, #13]
   16406:	480b      	ldr	r0, [pc, #44]	; (16434 <bt_conn_exists_le+0x40>)
   16408:	2b08      	cmp	r3, #8
   1640a:	bf96      	itet	ls
   1640c:	490a      	ldrls	r1, [pc, #40]	; (16438 <bt_conn_exists_le+0x44>)
   1640e:	490b      	ldrhi	r1, [pc, #44]	; (1643c <bt_conn_exists_le+0x48>)
   16410:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   16414:	08d2      	lsrs	r2, r2, #3
   16416:	0192      	lsls	r2, r2, #6
   16418:	f042 0202 	orr.w	r2, r2, #2
   1641c:	f008 f8be 	bl	1e59c <log_1>
		bt_conn_unref(conn);
   16420:	4620      	mov	r0, r4
   16422:	f00a fbfa 	bl	20c1a <bt_conn_unref>
		return true;
   16426:	2001      	movs	r0, #1
}
   16428:	bd10      	pop	{r4, pc}
   1642a:	bf00      	nop
   1642c:	0002353c 	.word	0x0002353c
   16430:	0002355c 	.word	0x0002355c
   16434:	00025526 	.word	0x00025526
   16438:	00023b9c 	.word	0x00023b9c
   1643c:	000254d8 	.word	0x000254d8

00016440 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16442:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16444:	480e      	ldr	r0, [pc, #56]	; (16480 <bt_conn_lookup_state_le+0x40>)
{
   16446:	460e      	mov	r6, r1
   16448:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1644a:	f00a fbcb 	bl	20be4 <bt_conn_ref>

		if (!conn) {
   1644e:	4604      	mov	r4, r0
   16450:	b1a0      	cbz	r0, 1647c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16452:	7883      	ldrb	r3, [r0, #2]
   16454:	2b01      	cmp	r3, #1
   16456:	d003      	beq.n	16460 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   16458:	f00a fbdf 	bl	20c1a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1645c:	2400      	movs	r4, #0
			continue;
   1645e:	e00d      	b.n	1647c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   16460:	b136      	cbz	r6, 16470 <bt_conn_lookup_state_le+0x30>
   16462:	4632      	mov	r2, r6
   16464:	4629      	mov	r1, r5
   16466:	f00a fb9d 	bl	20ba4 <bt_conn_is_peer_addr_le>
   1646a:	b908      	cbnz	r0, 16470 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1646c:	4620      	mov	r0, r4
   1646e:	e7f3      	b.n	16458 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   16470:	7b63      	ldrb	r3, [r4, #13]
   16472:	42bb      	cmp	r3, r7
   16474:	d1fa      	bne.n	1646c <bt_conn_lookup_state_le+0x2c>
   16476:	7a23      	ldrb	r3, [r4, #8]
   16478:	42ab      	cmp	r3, r5
   1647a:	d1f7      	bne.n	1646c <bt_conn_lookup_state_le+0x2c>
}
   1647c:	4620      	mov	r0, r4
   1647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16480:	20001648 	.word	0x20001648

00016484 <send_conn_le_param_update>:
{
   16484:	b538      	push	{r3, r4, r5, lr}
   16486:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   16488:	4608      	mov	r0, r1
{
   1648a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1648c:	f00a f91a 	bl	206c4 <bt_le_conn_params_valid>
   16490:	b318      	cbz	r0, 164da <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16492:	4b13      	ldr	r3, [pc, #76]	; (164e0 <send_conn_le_param_update+0x5c>)
   16494:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   16498:	0799      	lsls	r1, r3, #30
   1649a:	d407      	bmi.n	164ac <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   1649c:	78e3      	ldrb	r3, [r4, #3]
   1649e:	b183      	cbz	r3, 164c2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   164a0:	4629      	mov	r1, r5
   164a2:	4620      	mov	r0, r4
}
   164a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   164a8:	f000 bb1a 	b.w	16ae0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   164ac:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   164b0:	079a      	lsls	r2, r3, #30
   164b2:	d5f3      	bpl.n	1649c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   164b4:	f3bf 8f5b 	dmb	ish
   164b8:	6863      	ldr	r3, [r4, #4]
   164ba:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   164be:	055b      	lsls	r3, r3, #21
   164c0:	d4ec      	bmi.n	1649c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   164c2:	4629      	mov	r1, r5
   164c4:	4620      	mov	r0, r4
   164c6:	f00a fc07 	bl	20cd8 <bt_conn_le_conn_update>
		if (rc == 0) {
   164ca:	b928      	cbnz	r0, 164d8 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   164cc:	88ab      	ldrh	r3, [r5, #4]
   164ce:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   164d2:	88eb      	ldrh	r3, [r5, #6]
   164d4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   164d8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   164da:	f06f 0015 	mvn.w	r0, #21
   164de:	e7fb      	b.n	164d8 <send_conn_le_param_update+0x54>
   164e0:	200002a0 	.word	0x200002a0

000164e4 <deferred_work>:
{
   164e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   164e6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   164ea:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   164ec:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   164f0:	b993      	cbnz	r3, 16518 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   164f2:	4630      	mov	r0, r6
   164f4:	f00a fc53 	bl	20d9e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   164f8:	4b1f      	ldr	r3, [pc, #124]	; (16578 <deferred_work+0x94>)
   164fa:	681d      	ldr	r5, [r3, #0]
   164fc:	b925      	cbnz	r5, 16508 <deferred_work+0x24>
		bt_conn_unref(conn);
   164fe:	4630      	mov	r0, r6
   16500:	f00a fb8b 	bl	20c1a <bt_conn_unref>
}
   16504:	b002      	add	sp, #8
   16506:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   16508:	686b      	ldr	r3, [r5, #4]
   1650a:	b11b      	cbz	r3, 16514 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   1650c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   16510:	4630      	mov	r0, r6
   16512:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16514:	69ad      	ldr	r5, [r5, #24]
   16516:	e7f1      	b.n	164fc <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   16518:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1651c:	2b01      	cmp	r3, #1
   1651e:	d1f1      	bne.n	16504 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16520:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   16524:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   16528:	e855 3f00 	ldrex	r3, [r5]
   1652c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   16530:	e845 2100 	strex	r1, r2, [r5]
   16534:	2900      	cmp	r1, #0
   16536:	d1f7      	bne.n	16528 <deferred_work+0x44>
   16538:	f3bf 8f5b 	dmb	ish
   1653c:	059b      	lsls	r3, r3, #22
   1653e:	d514      	bpl.n	1656a <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16542:	9300      	str	r3, [sp, #0]
   16544:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16546:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   16548:	4669      	mov	r1, sp
   1654a:	4630      	mov	r0, r6
   1654c:	f7ff ff9a 	bl	16484 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16550:	f3bf 8f5b 	dmb	ish
   16554:	e855 3f00 	ldrex	r3, [r5]
   16558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1655c:	e845 3200 	strex	r2, r3, [r5]
   16560:	2a00      	cmp	r2, #0
   16562:	d1f7      	bne.n	16554 <deferred_work+0x70>
   16564:	f3bf 8f5b 	dmb	ish
   16568:	e7cc      	b.n	16504 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   1656a:	4a04      	ldr	r2, [pc, #16]	; (1657c <deferred_work+0x98>)
   1656c:	6810      	ldr	r0, [r2, #0]
   1656e:	6851      	ldr	r1, [r2, #4]
   16570:	466b      	mov	r3, sp
   16572:	c303      	stmia	r3!, {r0, r1}
   16574:	e7e8      	b.n	16548 <deferred_work+0x64>
   16576:	bf00      	nop
   16578:	20001ef0 	.word	0x20001ef0
   1657c:	00023704 	.word	0x00023704

00016580 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   16580:	b538      	push	{r3, r4, r5, lr}
   16582:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   16584:	490c      	ldr	r1, [pc, #48]	; (165b8 <bt_conn_create_pdu_timeout+0x38>)
   16586:	2800      	cmp	r0, #0
   16588:	bf08      	it	eq
   1658a:	4608      	moveq	r0, r1
   1658c:	f00b ff2a 	bl	223e4 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   16590:	4604      	mov	r4, r0
   16592:	b958      	cbnz	r0, 165ac <bt_conn_create_pdu_timeout+0x2c>
   16594:	4909      	ldr	r1, [pc, #36]	; (165bc <bt_conn_create_pdu_timeout+0x3c>)
   16596:	4b0a      	ldr	r3, [pc, #40]	; (165c0 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   16598:	480a      	ldr	r0, [pc, #40]	; (165c4 <bt_conn_create_pdu_timeout+0x44>)
   1659a:	1ac9      	subs	r1, r1, r3
   1659c:	08c9      	lsrs	r1, r1, #3
   1659e:	0189      	lsls	r1, r1, #6
   165a0:	f041 0102 	orr.w	r1, r1, #2
   165a4:	f007 ffed 	bl	1e582 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   165a8:	4620      	mov	r0, r4
   165aa:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   165ac:	1d29      	adds	r1, r5, #4
   165ae:	3008      	adds	r0, #8
   165b0:	f00b ff37 	bl	22422 <net_buf_simple_reserve>
	return buf;
   165b4:	e7f8      	b.n	165a8 <bt_conn_create_pdu_timeout+0x28>
   165b6:	bf00      	nop
   165b8:	200007ec 	.word	0x200007ec
   165bc:	0002355c 	.word	0x0002355c
   165c0:	0002353c 	.word	0x0002353c
   165c4:	00025549 	.word	0x00025549

000165c8 <bt_conn_create_frag_timeout>:
{
   165c8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   165ca:	4801      	ldr	r0, [pc, #4]	; (165d0 <bt_conn_create_frag_timeout+0x8>)
   165cc:	f7ff bfd8 	b.w	16580 <bt_conn_create_pdu_timeout>
   165d0:	2000083c 	.word	0x2000083c

000165d4 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   165d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165d8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   165da:	f04f 33ff 	mov.w	r3, #4294967295
   165de:	f04f 32ff 	mov.w	r2, #4294967295
   165e2:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   165e4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   165e6:	f7ff ffef 	bl	165c8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   165ea:	7833      	ldrb	r3, [r6, #0]
   165ec:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   165ee:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   165f0:	f04f 0600 	mov.w	r6, #0
   165f4:	d005      	beq.n	16602 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   165f6:	f004 fb11 	bl	1ac1c <net_buf_unref>
		return NULL;
   165fa:	4635      	mov	r5, r6
}
   165fc:	4628      	mov	r0, r5
   165fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   16602:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   16604:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   16608:	4e0c      	ldr	r6, [pc, #48]	; (1663c <create_frag.isra.0+0x68>)
   1660a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1660c:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   16610:	f00b ff79 	bl	22506 <net_buf_simple_tailroom>
   16614:	4580      	cmp	r8, r0
   16616:	d20c      	bcs.n	16632 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   16618:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1661c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   16620:	4632      	mov	r2, r6
   16622:	4638      	mov	r0, r7
   16624:	f00b ff3a 	bl	2249c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16628:	4631      	mov	r1, r6
   1662a:	4620      	mov	r0, r4
   1662c:	f00b ff4f 	bl	224ce <net_buf_simple_pull>
   16630:	e7e4      	b.n	165fc <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   16632:	4638      	mov	r0, r7
   16634:	f00b ff67 	bl	22506 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16638:	b286      	uxth	r6, r0
   1663a:	e7ef      	b.n	1661c <create_frag.isra.0+0x48>
   1663c:	200002a0 	.word	0x200002a0

00016640 <bt_conn_process_tx>:
{
   16640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16642:	7b43      	ldrb	r3, [r0, #13]
{
   16644:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   16646:	b993      	cbnz	r3, 1666e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16648:	f3bf 8f5b 	dmb	ish
   1664c:	1d03      	adds	r3, r0, #4
   1664e:	e853 2f00 	ldrex	r2, [r3]
   16652:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   16656:	e843 1400 	strex	r4, r1, [r3]
   1665a:	2c00      	cmp	r4, #0
   1665c:	d1f7      	bne.n	1664e <bt_conn_process_tx+0xe>
   1665e:	f3bf 8f5b 	dmb	ish
   16662:	0653      	lsls	r3, r2, #25
   16664:	d503      	bpl.n	1666e <bt_conn_process_tx+0x2e>
}
   16666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   1666a:	f00a ba74 	b.w	20b56 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1666e:	2200      	movs	r2, #0
   16670:	2300      	movs	r3, #0
   16672:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16676:	f00b feba 	bl	223ee <net_buf_get>
	BT_ASSERT(buf);
   1667a:	4604      	mov	r4, r0
   1667c:	b960      	cbnz	r0, 16698 <bt_conn_process_tx+0x58>
   1667e:	4a20      	ldr	r2, [pc, #128]	; (16700 <bt_conn_process_tx+0xc0>)
   16680:	4920      	ldr	r1, [pc, #128]	; (16704 <bt_conn_process_tx+0xc4>)
   16682:	4821      	ldr	r0, [pc, #132]	; (16708 <bt_conn_process_tx+0xc8>)
   16684:	f240 5357 	movw	r3, #1367	; 0x557
   16688:	f007 fb36 	bl	1dcf8 <printk>
   1668c:	4040      	eors	r0, r0
   1668e:	f380 8811 	msr	BASEPRI, r0
   16692:	f04f 0003 	mov.w	r0, #3
   16696:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   16698:	4f1c      	ldr	r7, [pc, #112]	; (1670c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1669a:	89a1      	ldrh	r1, [r4, #12]
   1669c:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   166a0:	4291      	cmp	r1, r2
   166a2:	d807      	bhi.n	166b4 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   166a4:	2300      	movs	r3, #0
   166a6:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   166a8:	4621      	mov	r1, r4
   166aa:	4628      	mov	r0, r5
   166ac:	f7ff fb0e 	bl	15ccc <send_frag>
	if (!send_buf(conn, buf)) {
   166b0:	b140      	cbz	r0, 166c4 <bt_conn_process_tx+0x84>
}
   166b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   166b4:	f105 060d 	add.w	r6, r5, #13
   166b8:	4621      	mov	r1, r4
   166ba:	4630      	mov	r0, r6
   166bc:	f7ff ff8a 	bl	165d4 <create_frag.isra.0>
	if (!frag) {
   166c0:	4601      	mov	r1, r0
   166c2:	b920      	cbnz	r0, 166ce <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   166c4:	4620      	mov	r0, r4
}
   166c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   166ca:	f004 baa7 	b.w	1ac1c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   166ce:	2301      	movs	r3, #1
   166d0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   166d2:	4628      	mov	r0, r5
   166d4:	f7ff fafa 	bl	15ccc <send_frag>
   166d8:	2800      	cmp	r0, #0
   166da:	d0f3      	beq.n	166c4 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   166dc:	89a2      	ldrh	r2, [r4, #12]
   166de:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   166e2:	429a      	cmp	r2, r3
   166e4:	d802      	bhi.n	166ec <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   166e6:	2300      	movs	r3, #0
   166e8:	2203      	movs	r2, #3
   166ea:	e7dd      	b.n	166a8 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   166ec:	4621      	mov	r1, r4
   166ee:	4630      	mov	r0, r6
   166f0:	f7ff ff70 	bl	165d4 <create_frag.isra.0>
		if (!frag) {
   166f4:	4601      	mov	r1, r0
   166f6:	2800      	cmp	r0, #0
   166f8:	d0e4      	beq.n	166c4 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   166fa:	2301      	movs	r3, #1
   166fc:	461a      	mov	r2, r3
   166fe:	e7e8      	b.n	166d2 <bt_conn_process_tx+0x92>
   16700:	00025572 	.word	0x00025572
   16704:	0002497f 	.word	0x0002497f
   16708:	00024c4d 	.word	0x00024c4d
   1670c:	200002a0 	.word	0x200002a0

00016710 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   16710:	4b0c      	ldr	r3, [pc, #48]	; (16744 <bt_conn_auth_cb_register+0x34>)
   16712:	b908      	cbnz	r0, 16718 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   16714:	6018      	str	r0, [r3, #0]
		return 0;
   16716:	4770      	bx	lr
	}

	if (bt_auth) {
   16718:	681a      	ldr	r2, [r3, #0]
   1671a:	b962      	cbnz	r2, 16736 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1671c:	6902      	ldr	r2, [r0, #16]
   1671e:	b93a      	cbnz	r2, 16730 <bt_conn_auth_cb_register+0x20>
   16720:	6802      	ldr	r2, [r0, #0]
   16722:	b95a      	cbnz	r2, 1673c <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   16724:	6842      	ldr	r2, [r0, #4]
   16726:	b94a      	cbnz	r2, 1673c <bt_conn_auth_cb_register+0x2c>
   16728:	6882      	ldr	r2, [r0, #8]
   1672a:	b93a      	cbnz	r2, 1673c <bt_conn_auth_cb_register+0x2c>
   1672c:	6942      	ldr	r2, [r0, #20]
   1672e:	b92a      	cbnz	r2, 1673c <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   16730:	6018      	str	r0, [r3, #0]
	return 0;
   16732:	2000      	movs	r0, #0
   16734:	4770      	bx	lr
		return -EALREADY;
   16736:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1673a:	4770      	bx	lr
		return -EINVAL;
   1673c:	f06f 0015 	mvn.w	r0, #21
}
   16740:	4770      	bx	lr
   16742:	bf00      	nop
   16744:	20001eec 	.word	0x20001eec

00016748 <bt_conn_auth_passkey_entry>:

int bt_conn_auth_passkey_entry(struct bt_conn *conn, unsigned int passkey)
{
	if (!bt_auth) {
   16748:	4a06      	ldr	r2, [pc, #24]	; (16764 <bt_conn_auth_passkey_entry+0x1c>)
   1674a:	6812      	ldr	r2, [r2, #0]
{
   1674c:	b508      	push	{r3, lr}
	if (!bt_auth) {
   1674e:	b132      	cbz	r2, 1675e <bt_conn_auth_passkey_entry+0x16>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) && conn->type == BT_CONN_TYPE_LE) {
   16750:	7883      	ldrb	r3, [r0, #2]
   16752:	2b01      	cmp	r3, #1
   16754:	d103      	bne.n	1675e <bt_conn_auth_passkey_entry+0x16>
		bt_smp_auth_passkey_entry(conn, passkey);
   16756:	f00b fd3b 	bl	221d0 <bt_smp_auth_passkey_entry>
		return 0;
   1675a:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_BREDR) && conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_entry(conn, passkey);
	}

	return -EINVAL;
}
   1675c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1675e:	f06f 0015 	mvn.w	r0, #21
   16762:	e7fb      	b.n	1675c <bt_conn_auth_passkey_entry+0x14>
   16764:	20001eec 	.word	0x20001eec

00016768 <bt_conn_auth_passkey_confirm>:

int bt_conn_auth_passkey_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   16768:	4a05      	ldr	r2, [pc, #20]	; (16780 <bt_conn_auth_passkey_confirm+0x18>)
   1676a:	6812      	ldr	r2, [r2, #0]
   1676c:	b122      	cbz	r2, 16778 <bt_conn_auth_passkey_confirm+0x10>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1676e:	7883      	ldrb	r3, [r0, #2]
   16770:	2b01      	cmp	r3, #1
   16772:	d101      	bne.n	16778 <bt_conn_auth_passkey_confirm+0x10>
	    conn->type == BT_CONN_TYPE_LE) {
		return bt_smp_auth_passkey_confirm(conn);
   16774:	f00b bd64 	b.w	22240 <bt_smp_auth_passkey_confirm>
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_confirm(conn);
	}

	return -EINVAL;
}
   16778:	f06f 0015 	mvn.w	r0, #21
   1677c:	4770      	bx	lr
   1677e:	bf00      	nop
   16780:	20001eec 	.word	0x20001eec

00016784 <bt_conn_auth_pairing_confirm>:
	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   16784:	4a05      	ldr	r2, [pc, #20]	; (1679c <bt_conn_auth_pairing_confirm+0x18>)
   16786:	6812      	ldr	r2, [r2, #0]
   16788:	b122      	cbz	r2, 16794 <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
   1678a:	7883      	ldrb	r3, [r0, #2]
   1678c:	2b01      	cmp	r3, #1
   1678e:	d101      	bne.n	16794 <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
   16790:	f00b bca7 	b.w	220e2 <bt_smp_auth_pairing_confirm>
		return bt_ssp_auth_pairing_confirm(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
   16794:	f06f 0015 	mvn.w	r0, #21
   16798:	4770      	bx	lr
   1679a:	bf00      	nop
   1679c:	20001eec 	.word	0x20001eec

000167a0 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   167a0:	4b03      	ldr	r3, [pc, #12]	; (167b0 <bt_conn_index+0x10>)
   167a2:	1ac0      	subs	r0, r0, r3
   167a4:	4b03      	ldr	r3, [pc, #12]	; (167b4 <bt_conn_index+0x14>)
   167a6:	1180      	asrs	r0, r0, #6
   167a8:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   167aa:	b2c0      	uxtb	r0, r0
   167ac:	4770      	bx	lr
   167ae:	bf00      	nop
   167b0:	20001648 	.word	0x20001648
   167b4:	aaaaaaab 	.word	0xaaaaaaab

000167b8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   167b8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   167ba:	490b      	ldr	r1, [pc, #44]	; (167e8 <bt_conn_init+0x30>)
   167bc:	480b      	ldr	r0, [pc, #44]	; (167ec <bt_conn_init+0x34>)
   167be:	f00c f920 	bl	22a02 <k_queue_append>
   167c2:	490b      	ldr	r1, [pc, #44]	; (167f0 <bt_conn_init+0x38>)
   167c4:	4809      	ldr	r0, [pc, #36]	; (167ec <bt_conn_init+0x34>)
   167c6:	f00c f91c 	bl	22a02 <k_queue_append>
   167ca:	490a      	ldr	r1, [pc, #40]	; (167f4 <bt_conn_init+0x3c>)
   167cc:	4807      	ldr	r0, [pc, #28]	; (167ec <bt_conn_init+0x34>)
   167ce:	f00c f918 	bl	22a02 <k_queue_append>
	}

	bt_att_init();
   167d2:	f00a fe5d 	bl	21490 <bt_att_init>

	err = bt_smp_init();
   167d6:	f003 ffb3 	bl	1a740 <bt_smp_init>
	if (err) {
   167da:	4604      	mov	r4, r0
   167dc:	b908      	cbnz	r0, 167e2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   167de:	f00a fb4a 	bl	20e76 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   167e2:	4620      	mov	r0, r4
   167e4:	bd10      	pop	{r4, pc}
   167e6:	bf00      	nop
   167e8:	20001ef4 	.word	0x20001ef4
   167ec:	200007d4 	.word	0x200007d4
   167f0:	20001f04 	.word	0x20001f04
   167f4:	20001f14 	.word	0x20001f14

000167f8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   167f8:	4a0b      	ldr	r2, [pc, #44]	; (16828 <l2cap_accept+0x30>)
{
   167fa:	b508      	push	{r3, lr}
   167fc:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   167fe:	6810      	ldr	r0, [r2, #0]
   16800:	b918      	cbnz	r0, 1680a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   16802:	4b0a      	ldr	r3, [pc, #40]	; (1682c <l2cap_accept+0x34>)
   16804:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   16806:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   16808:	bd08      	pop	{r3, pc}
   1680a:	4909      	ldr	r1, [pc, #36]	; (16830 <l2cap_accept+0x38>)
   1680c:	4a09      	ldr	r2, [pc, #36]	; (16834 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   1680e:	480a      	ldr	r0, [pc, #40]	; (16838 <l2cap_accept+0x40>)
   16810:	1a52      	subs	r2, r2, r1
   16812:	08d2      	lsrs	r2, r2, #3
   16814:	0192      	lsls	r2, r2, #6
   16816:	f042 0201 	orr.w	r2, r2, #1
   1681a:	4619      	mov	r1, r3
   1681c:	f007 febe 	bl	1e59c <log_1>
	return -ENOMEM;
   16820:	f06f 000b 	mvn.w	r0, #11
   16824:	e7f0      	b.n	16808 <l2cap_accept+0x10>
   16826:	bf00      	nop
   16828:	20001708 	.word	0x20001708
   1682c:	00023be0 	.word	0x00023be0
   16830:	0002353c 	.word	0x0002353c
   16834:	0002359c 	.word	0x0002359c
   16838:	000255ff 	.word	0x000255ff

0001683c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1683e:	4605      	mov	r5, r0
   16840:	460f      	mov	r7, r1
   16842:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   16844:	2300      	movs	r3, #0
   16846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1684a:	2104      	movs	r1, #4
   1684c:	2000      	movs	r0, #0
   1684e:	f7ff fe97 	bl	16580 <bt_conn_create_pdu_timeout>
	if (!buf) {
   16852:	4604      	mov	r4, r0
   16854:	b960      	cbnz	r0, 16870 <l2cap_create_le_sig_pdu.isra.0+0x34>
   16856:	4a0a      	ldr	r2, [pc, #40]	; (16880 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   16858:	4b0a      	ldr	r3, [pc, #40]	; (16884 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1685a:	480b      	ldr	r0, [pc, #44]	; (16888 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1685c:	1ad2      	subs	r2, r2, r3
   1685e:	08d2      	lsrs	r2, r2, #3
   16860:	0192      	lsls	r2, r2, #6
   16862:	f042 0201 	orr.w	r2, r2, #1
   16866:	4629      	mov	r1, r5
   16868:	f007 fe98 	bl	1e59c <log_1>
}
   1686c:	4620      	mov	r0, r4
   1686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   16870:	2104      	movs	r1, #4
   16872:	3008      	adds	r0, #8
   16874:	f00b fe0c 	bl	22490 <net_buf_simple_add>
	hdr->code = code;
   16878:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1687a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1687c:	8046      	strh	r6, [r0, #2]
	return buf;
   1687e:	e7f5      	b.n	1686c <l2cap_create_le_sig_pdu.isra.0+0x30>
   16880:	0002359c 	.word	0x0002359c
   16884:	0002353c 	.word	0x0002353c
   16888:	00025626 	.word	0x00025626

0001688c <l2cap_rtx_timeout>:
{
   1688c:	b538      	push	{r3, r4, r5, lr}
   1688e:	4a0b      	ldr	r2, [pc, #44]	; (168bc <l2cap_rtx_timeout+0x30>)
   16890:	4b0b      	ldr	r3, [pc, #44]	; (168c0 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   16892:	4604      	mov	r4, r0
   16894:	1ad2      	subs	r2, r2, r3
   16896:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1689a:	480a      	ldr	r0, [pc, #40]	; (168c4 <l2cap_rtx_timeout+0x38>)
   1689c:	08d2      	lsrs	r2, r2, #3
   1689e:	0192      	lsls	r2, r2, #6
   168a0:	4621      	mov	r1, r4
   168a2:	f042 0201 	orr.w	r2, r2, #1
   168a6:	f007 fe79 	bl	1e59c <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   168aa:	4628      	mov	r0, r5
   168ac:	4621      	mov	r1, r4
   168ae:	f00a fa3f 	bl	20d30 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   168b2:	4620      	mov	r0, r4
}
   168b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   168b8:	f00a ba5c 	b.w	20d74 <bt_l2cap_chan_del>
   168bc:	0002359c 	.word	0x0002359c
   168c0:	0002353c 	.word	0x0002353c
   168c4:	0002564e 	.word	0x0002564e

000168c8 <bt_l2cap_connected>:
{
   168c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   168cc:	4e29      	ldr	r6, [pc, #164]	; (16974 <bt_l2cap_connected+0xac>)
   168ce:	4f2a      	ldr	r7, [pc, #168]	; (16978 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   168d0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1697c <bt_l2cap_connected+0xb4>
{
   168d4:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   168d6:	42be      	cmp	r6, r7
   168d8:	d302      	bcc.n	168e0 <bt_l2cap_connected+0x18>
}
   168da:	b003      	add	sp, #12
   168dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   168e0:	6873      	ldr	r3, [r6, #4]
   168e2:	a901      	add	r1, sp, #4
   168e4:	4620      	mov	r0, r4
   168e6:	4798      	blx	r3
   168e8:	2800      	cmp	r0, #0
   168ea:	db3d      	blt.n	16968 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   168ec:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   168ee:	8833      	ldrh	r3, [r6, #0]
   168f0:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   168f4:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   168f8:	4641      	mov	r1, r8
   168fa:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   168fe:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   16902:	f00c f96c 	bl	22bde <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16906:	f3bf 8f5b 	dmb	ish
   1690a:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1690e:	2200      	movs	r2, #0
   16910:	e853 1f00 	ldrex	r1, [r3]
   16914:	e843 2000 	strex	r0, r2, [r3]
   16918:	2800      	cmp	r0, #0
   1691a:	d1f9      	bne.n	16910 <bt_l2cap_connected+0x48>
   1691c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   16920:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   16922:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   16924:	f105 0308 	add.w	r3, r5, #8
   16928:	bb02      	cbnz	r2, 1696c <bt_l2cap_connected+0xa4>
	list->head = node;
   1692a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   1692e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   16930:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   16932:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   16934:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   16938:	681b      	ldr	r3, [r3, #0]
   1693a:	b103      	cbz	r3, 1693e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   1693c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1693e:	9b01      	ldr	r3, [sp, #4]
   16940:	f3bf 8f5b 	dmb	ish
   16944:	3368      	adds	r3, #104	; 0x68
   16946:	e853 2f00 	ldrex	r2, [r3]
   1694a:	f042 0201 	orr.w	r2, r2, #1
   1694e:	e843 2100 	strex	r1, r2, [r3]
   16952:	2900      	cmp	r1, #0
   16954:	d1f7      	bne.n	16946 <bt_l2cap_connected+0x7e>
   16956:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1695a:	9801      	ldr	r0, [sp, #4]
   1695c:	6843      	ldr	r3, [r0, #4]
   1695e:	699b      	ldr	r3, [r3, #24]
   16960:	b113      	cbz	r3, 16968 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   16962:	f100 0168 	add.w	r1, r0, #104	; 0x68
   16966:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16968:	360c      	adds	r6, #12
   1696a:	e7b4      	b.n	168d6 <bt_l2cap_connected+0xe>
	parent->next = child;
   1696c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1696e:	6563      	str	r3, [r4, #84]	; 0x54
}
   16970:	e7dd      	b.n	1692e <bt_l2cap_connected+0x66>
   16972:	bf00      	nop
   16974:	00023478 	.word	0x00023478
   16978:	0002349c 	.word	0x0002349c
   1697c:	0001688d 	.word	0x0001688d

00016980 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   16980:	898b      	ldrh	r3, [r1, #12]
   16982:	2b03      	cmp	r3, #3
{
   16984:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16986:	4606      	mov	r6, r0
   16988:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1698a:	d80a      	bhi.n	169a2 <l2cap_recv+0x22>
   1698c:	4931      	ldr	r1, [pc, #196]	; (16a54 <l2cap_recv+0xd4>)
   1698e:	4b32      	ldr	r3, [pc, #200]	; (16a58 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   16990:	4832      	ldr	r0, [pc, #200]	; (16a5c <l2cap_recv+0xdc>)
   16992:	1ac9      	subs	r1, r1, r3
   16994:	08c9      	lsrs	r1, r1, #3
   16996:	0189      	lsls	r1, r1, #6
   16998:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   1699c:	f007 fdf1 	bl	1e582 <log_0>
		return 0;
   169a0:	e013      	b.n	169ca <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   169a2:	2104      	movs	r1, #4
   169a4:	f105 0008 	add.w	r0, r5, #8
   169a8:	f00b fd99 	bl	224de <net_buf_simple_pull_mem>
	if (buf->len != len) {
   169ac:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   169ae:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   169b0:	428a      	cmp	r2, r1
   169b2:	4604      	mov	r4, r0
   169b4:	d00c      	beq.n	169d0 <l2cap_recv+0x50>
   169b6:	4828      	ldr	r0, [pc, #160]	; (16a58 <l2cap_recv+0xd8>)
   169b8:	4b26      	ldr	r3, [pc, #152]	; (16a54 <l2cap_recv+0xd4>)
   169ba:	1a1b      	subs	r3, r3, r0
   169bc:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   169be:	019b      	lsls	r3, r3, #6
   169c0:	4827      	ldr	r0, [pc, #156]	; (16a60 <l2cap_recv+0xe0>)
   169c2:	f043 0301 	orr.w	r3, r3, #1
   169c6:	f007 fdfd 	bl	1e5c4 <log_2>
}
   169ca:	2000      	movs	r0, #0
   169cc:	b002      	add	sp, #8
   169ce:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   169d0:	7843      	ldrb	r3, [r0, #1]
   169d2:	b943      	cbnz	r3, 169e6 <l2cap_recv+0x66>
   169d4:	491f      	ldr	r1, [pc, #124]	; (16a54 <l2cap_recv+0xd4>)
   169d6:	4b20      	ldr	r3, [pc, #128]	; (16a58 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   169d8:	4822      	ldr	r0, [pc, #136]	; (16a64 <l2cap_recv+0xe4>)
   169da:	1ac9      	subs	r1, r1, r3
   169dc:	08c9      	lsrs	r1, r1, #3
   169de:	0189      	lsls	r1, r1, #6
   169e0:	f041 0101 	orr.w	r1, r1, #1
   169e4:	e7da      	b.n	1699c <l2cap_recv+0x1c>
	switch (hdr->code) {
   169e6:	7801      	ldrb	r1, [r0, #0]
   169e8:	2901      	cmp	r1, #1
   169ea:	d0ee      	beq.n	169ca <l2cap_recv+0x4a>
   169ec:	2913      	cmp	r1, #19
   169ee:	d10a      	bne.n	16a06 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   169f0:	2a01      	cmp	r2, #1
   169f2:	d8ea      	bhi.n	169ca <l2cap_recv+0x4a>
   169f4:	4917      	ldr	r1, [pc, #92]	; (16a54 <l2cap_recv+0xd4>)
   169f6:	4b18      	ldr	r3, [pc, #96]	; (16a58 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   169f8:	481b      	ldr	r0, [pc, #108]	; (16a68 <l2cap_recv+0xe8>)
   169fa:	1ac9      	subs	r1, r1, r3
   169fc:	08c9      	lsrs	r1, r1, #3
   169fe:	0189      	lsls	r1, r1, #6
   16a00:	f041 0101 	orr.w	r1, r1, #1
   16a04:	e7ca      	b.n	1699c <l2cap_recv+0x1c>
   16a06:	4b14      	ldr	r3, [pc, #80]	; (16a58 <l2cap_recv+0xd8>)
   16a08:	4a12      	ldr	r2, [pc, #72]	; (16a54 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   16a0a:	4818      	ldr	r0, [pc, #96]	; (16a6c <l2cap_recv+0xec>)
   16a0c:	1ad2      	subs	r2, r2, r3
   16a0e:	08d2      	lsrs	r2, r2, #3
   16a10:	0192      	lsls	r2, r2, #6
   16a12:	f042 0202 	orr.w	r2, r2, #2
   16a16:	f007 fdc1 	bl	1e59c <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   16a1a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   16a1c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   16a1e:	2202      	movs	r2, #2
   16a20:	2001      	movs	r0, #1
   16a22:	f7ff ff0b 	bl	1683c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   16a26:	4604      	mov	r4, r0
   16a28:	2800      	cmp	r0, #0
   16a2a:	d0ce      	beq.n	169ca <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   16a2c:	2102      	movs	r1, #2
   16a2e:	3008      	adds	r0, #8
   16a30:	f00b fd2e 	bl	22490 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   16a34:	2300      	movs	r3, #0
   16a36:	7003      	strb	r3, [r0, #0]
   16a38:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   16a3a:	4622      	mov	r2, r4
   16a3c:	9300      	str	r3, [sp, #0]
   16a3e:	2105      	movs	r1, #5
   16a40:	4628      	mov	r0, r5
   16a42:	f00a f9df 	bl	20e04 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   16a46:	2800      	cmp	r0, #0
   16a48:	d0bf      	beq.n	169ca <l2cap_recv+0x4a>
		net_buf_unref(buf);
   16a4a:	4620      	mov	r0, r4
   16a4c:	f004 f8e6 	bl	1ac1c <net_buf_unref>
   16a50:	e7bb      	b.n	169ca <l2cap_recv+0x4a>
   16a52:	bf00      	nop
   16a54:	0002359c 	.word	0x0002359c
   16a58:	0002353c 	.word	0x0002353c
   16a5c:	0002565e 	.word	0x0002565e
   16a60:	0002567c 	.word	0x0002567c
   16a64:	0002569d 	.word	0x0002569d
   16a68:	000256be 	.word	0x000256be
   16a6c:	000256da 	.word	0x000256da

00016a70 <bt_l2cap_recv>:
{
   16a70:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   16a72:	898b      	ldrh	r3, [r1, #12]
   16a74:	2b03      	cmp	r3, #3
{
   16a76:	4605      	mov	r5, r0
   16a78:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   16a7a:	d80e      	bhi.n	16a9a <bt_l2cap_recv+0x2a>
   16a7c:	4914      	ldr	r1, [pc, #80]	; (16ad0 <bt_l2cap_recv+0x60>)
   16a7e:	4b15      	ldr	r3, [pc, #84]	; (16ad4 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   16a80:	4815      	ldr	r0, [pc, #84]	; (16ad8 <bt_l2cap_recv+0x68>)
   16a82:	1ac9      	subs	r1, r1, r3
   16a84:	08c9      	lsrs	r1, r1, #3
   16a86:	0189      	lsls	r1, r1, #6
   16a88:	f041 0101 	orr.w	r1, r1, #1
   16a8c:	f007 fd79 	bl	1e582 <log_0>
	net_buf_unref(buf);
   16a90:	4620      	mov	r0, r4
}
   16a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   16a96:	f004 b8c1 	b.w	1ac1c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   16a9a:	2104      	movs	r1, #4
   16a9c:	f104 0008 	add.w	r0, r4, #8
   16aa0:	f00b fd1d 	bl	224de <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   16aa4:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   16aa6:	4628      	mov	r0, r5
   16aa8:	f00a f9d5 	bl	20e56 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16aac:	b950      	cbnz	r0, 16ac4 <bt_l2cap_recv+0x54>
   16aae:	4b09      	ldr	r3, [pc, #36]	; (16ad4 <bt_l2cap_recv+0x64>)
   16ab0:	4a07      	ldr	r2, [pc, #28]	; (16ad0 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   16ab2:	480a      	ldr	r0, [pc, #40]	; (16adc <bt_l2cap_recv+0x6c>)
   16ab4:	1ad2      	subs	r2, r2, r3
   16ab6:	08d2      	lsrs	r2, r2, #3
   16ab8:	0192      	lsls	r2, r2, #6
   16aba:	f042 0202 	orr.w	r2, r2, #2
   16abe:	f007 fd6d 	bl	1e59c <log_1>
		net_buf_unref(buf);
   16ac2:	e7e5      	b.n	16a90 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   16ac4:	6843      	ldr	r3, [r0, #4]
   16ac6:	4621      	mov	r1, r4
   16ac8:	691b      	ldr	r3, [r3, #16]
   16aca:	4798      	blx	r3
   16acc:	e7e0      	b.n	16a90 <bt_l2cap_recv+0x20>
   16ace:	bf00      	nop
   16ad0:	0002359c 	.word	0x0002359c
   16ad4:	0002353c 	.word	0x0002353c
   16ad8:	000256f8 	.word	0x000256f8
   16adc:	00025715 	.word	0x00025715

00016ae0 <bt_l2cap_update_conn_param>:
{
   16ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   16ae2:	4b17      	ldr	r3, [pc, #92]	; (16b40 <bt_l2cap_update_conn_param+0x60>)
   16ae4:	781a      	ldrb	r2, [r3, #0]
   16ae6:	3201      	adds	r2, #1
	if (!ident) {
   16ae8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   16aec:	bf08      	it	eq
   16aee:	2201      	moveq	r2, #1
   16af0:	701a      	strb	r2, [r3, #0]
{
   16af2:	4606      	mov	r6, r0
   16af4:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   16af6:	2208      	movs	r2, #8
   16af8:	7819      	ldrb	r1, [r3, #0]
   16afa:	2012      	movs	r0, #18
   16afc:	f7ff fe9e 	bl	1683c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   16b00:	4604      	mov	r4, r0
   16b02:	b1d0      	cbz	r0, 16b3a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   16b04:	2108      	movs	r1, #8
   16b06:	4408      	add	r0, r1
   16b08:	f00b fcc2 	bl	22490 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   16b0c:	882b      	ldrh	r3, [r5, #0]
   16b0e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   16b10:	886b      	ldrh	r3, [r5, #2]
   16b12:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   16b14:	88ab      	ldrh	r3, [r5, #4]
   16b16:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   16b18:	88eb      	ldrh	r3, [r5, #6]
   16b1a:	80c3      	strh	r3, [r0, #6]
   16b1c:	2300      	movs	r3, #0
   16b1e:	9300      	str	r3, [sp, #0]
   16b20:	4622      	mov	r2, r4
   16b22:	2105      	movs	r1, #5
   16b24:	4630      	mov	r0, r6
   16b26:	f00a f96d 	bl	20e04 <bt_l2cap_send_cb>
	if (err) {
   16b2a:	4605      	mov	r5, r0
   16b2c:	b110      	cbz	r0, 16b34 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   16b2e:	4620      	mov	r0, r4
   16b30:	f004 f874 	bl	1ac1c <net_buf_unref>
}
   16b34:	4628      	mov	r0, r5
   16b36:	b002      	add	sp, #8
   16b38:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   16b3a:	f06f 050b 	mvn.w	r5, #11
   16b3e:	e7f9      	b.n	16b34 <bt_l2cap_update_conn_param+0x54>
   16b40:	200022b5 	.word	0x200022b5

00016b44 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   16b44:	4b02      	ldr	r3, [pc, #8]	; (16b50 <att_cfm_sent+0xc>)
   16b46:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16b4a:	f00a b9c2 	b.w	20ed2 <att_sent>
   16b4e:	bf00      	nop
   16b50:	000211dd 	.word	0x000211dd

00016b54 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   16b54:	4b02      	ldr	r3, [pc, #8]	; (16b60 <att_rsp_sent+0xc>)
   16b56:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16b5a:	f00a b9ba 	b.w	20ed2 <att_sent>
   16b5e:	bf00      	nop
   16b60:	000211c1 	.word	0x000211c1

00016b64 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   16b64:	4b02      	ldr	r3, [pc, #8]	; (16b70 <att_req_sent+0xc>)
   16b66:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16b6a:	f00a b9b2 	b.w	20ed2 <att_sent>
   16b6e:	bf00      	nop
   16b70:	000211a7 	.word	0x000211a7

00016b74 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   16b74:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   16b76:	3808      	subs	r0, #8
   16b78:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   16b7a:	a901      	add	r1, sp, #4
   16b7c:	4802      	ldr	r0, [pc, #8]	; (16b88 <bt_att_released+0x14>)
   16b7e:	f00b fe80 	bl	22882 <k_mem_slab_free>
}
   16b82:	b003      	add	sp, #12
   16b84:	f85d fb04 	ldr.w	pc, [sp], #4
   16b88:	200006fc 	.word	0x200006fc

00016b8c <read_group_cb>:
{
   16b8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16b90:	4606      	mov	r6, r0
   16b92:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16b94:	f04f 0800 	mov.w	r8, #0
   16b98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16b9c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   16b9e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16ba0:	f88d 8008 	strb.w	r8, [sp, #8]
   16ba4:	a902      	add	r1, sp, #8
{
   16ba6:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16ba8:	f8ad 300a 	strh.w	r3, [sp, #10]
   16bac:	f009 fc47 	bl	2043e <bt_uuid_cmp>
   16bb0:	b1a0      	cbz	r0, 16bdc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16bb2:	f642 0301 	movw	r3, #10241	; 0x2801
   16bb6:	6830      	ldr	r0, [r6, #0]
   16bb8:	f88d 800c 	strb.w	r8, [sp, #12]
   16bbc:	a903      	add	r1, sp, #12
   16bbe:	f8ad 300e 	strh.w	r3, [sp, #14]
   16bc2:	f009 fc3c 	bl	2043e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16bc6:	b148      	cbz	r0, 16bdc <read_group_cb+0x50>
		if (data->group &&
   16bc8:	6923      	ldr	r3, [r4, #16]
   16bca:	b11b      	cbz	r3, 16bd4 <read_group_cb+0x48>
   16bcc:	885a      	ldrh	r2, [r3, #2]
   16bce:	42aa      	cmp	r2, r5
   16bd0:	d200      	bcs.n	16bd4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16bd2:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16bd4:	2001      	movs	r0, #1
}
   16bd6:	b004      	add	sp, #16
   16bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16bdc:	6861      	ldr	r1, [r4, #4]
   16bde:	6830      	ldr	r0, [r6, #0]
   16be0:	f009 fc2d 	bl	2043e <bt_uuid_cmp>
   16be4:	b110      	cbz	r0, 16bec <read_group_cb+0x60>
		data->group = NULL;
   16be6:	2300      	movs	r3, #0
   16be8:	6123      	str	r3, [r4, #16]
   16bea:	e7f3      	b.n	16bd4 <read_group_cb+0x48>
	if (data->rsp->len &&
   16bec:	68e3      	ldr	r3, [r4, #12]
   16bee:	68a0      	ldr	r0, [r4, #8]
   16bf0:	781a      	ldrb	r2, [r3, #0]
   16bf2:	b13a      	cbz	r2, 16c04 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16bf4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   16bf8:	8981      	ldrh	r1, [r0, #12]
   16bfa:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16bfc:	4293      	cmp	r3, r2
   16bfe:	da01      	bge.n	16c04 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   16c00:	2000      	movs	r0, #0
   16c02:	e7e8      	b.n	16bd6 <read_group_cb+0x4a>
   16c04:	2104      	movs	r1, #4
   16c06:	3008      	adds	r0, #8
   16c08:	f00b fc42 	bl	22490 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16c0c:	4b09      	ldr	r3, [pc, #36]	; (16c34 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16c0e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16c10:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16c12:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16c14:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16c16:	4631      	mov	r1, r6
   16c18:	9300      	str	r3, [sp, #0]
   16c1a:	9401      	str	r4, [sp, #4]
   16c1c:	2300      	movs	r3, #0
   16c1e:	4638      	mov	r0, r7
   16c20:	f00a f9a7 	bl	20f72 <att_chan_read>
	if (read < 0) {
   16c24:	2800      	cmp	r0, #0
   16c26:	dbeb      	blt.n	16c00 <read_group_cb+0x74>
	if (!data->group) {
   16c28:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16c2a:	3800      	subs	r0, #0
   16c2c:	bf18      	it	ne
   16c2e:	2001      	movne	r0, #1
   16c30:	e7d1      	b.n	16bd6 <read_group_cb+0x4a>
   16c32:	bf00      	nop
   16c34:	00021121 	.word	0x00021121

00016c38 <read_type_cb>:
{
   16c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16c3c:	f8d2 8000 	ldr.w	r8, [r2]
{
   16c40:	4606      	mov	r6, r0
   16c42:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16c44:	6800      	ldr	r0, [r0, #0]
   16c46:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   16c48:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   16c4c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16c4e:	f009 fbf6 	bl	2043e <bt_uuid_cmp>
   16c52:	4607      	mov	r7, r0
   16c54:	2800      	cmp	r0, #0
   16c56:	d13e      	bne.n	16cd6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16c58:	4628      	mov	r0, r5
   16c5a:	2215      	movs	r2, #21
   16c5c:	4631      	mov	r1, r6
   16c5e:	f00a fee7 	bl	21a30 <bt_gatt_check_perm>
   16c62:	4605      	mov	r5, r0
   16c64:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16c66:	b148      	cbz	r0, 16c7c <read_type_cb+0x44>
		if (data->rsp->len) {
   16c68:	68e3      	ldr	r3, [r4, #12]
   16c6a:	781b      	ldrb	r3, [r3, #0]
   16c6c:	b923      	cbnz	r3, 16c78 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   16c6e:	2500      	movs	r5, #0
}
   16c70:	4628      	mov	r0, r5
   16c72:	b003      	add	sp, #12
   16c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   16c78:	7527      	strb	r7, [r4, #20]
   16c7a:	e7f8      	b.n	16c6e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16c7c:	68a0      	ldr	r0, [r4, #8]
   16c7e:	f00b fbe5 	bl	2244c <net_buf_frag_last>
   16c82:	2102      	movs	r1, #2
   16c84:	3008      	adds	r0, #8
   16c86:	f00b fc03 	bl	22490 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16c8a:	4b14      	ldr	r3, [pc, #80]	; (16cdc <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16c8c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16c8e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   16c90:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16c94:	4631      	mov	r1, r6
   16c96:	9300      	str	r3, [sp, #0]
   16c98:	9401      	str	r4, [sp, #4]
   16c9a:	462b      	mov	r3, r5
   16c9c:	4640      	mov	r0, r8
   16c9e:	f00a f968 	bl	20f72 <att_chan_read>
	if (read < 0) {
   16ca2:	2800      	cmp	r0, #0
   16ca4:	da07      	bge.n	16cb6 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   16ca6:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   16caa:	bf26      	itte	cs
   16cac:	4240      	negcs	r0, r0
   16cae:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   16cb0:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   16cb2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16cb4:	e7dc      	b.n	16c70 <read_type_cb+0x38>
	if (!data->item) {
   16cb6:	6923      	ldr	r3, [r4, #16]
   16cb8:	2b00      	cmp	r3, #0
   16cba:	d0d8      	beq.n	16c6e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16cbc:	68a0      	ldr	r0, [r4, #8]
   16cbe:	f00a f900 	bl	20ec2 <net_buf_frags_len>
   16cc2:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16cc6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16cc8:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16cca:	7818      	ldrb	r0, [r3, #0]
   16ccc:	4285      	cmp	r5, r0
   16cce:	bf94      	ite	ls
   16cd0:	2500      	movls	r5, #0
   16cd2:	2501      	movhi	r5, #1
   16cd4:	e7cc      	b.n	16c70 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16cd6:	2501      	movs	r5, #1
   16cd8:	e7ca      	b.n	16c70 <read_type_cb+0x38>
   16cda:	bf00      	nop
   16cdc:	00020edf 	.word	0x00020edf

00016ce0 <find_type_cb>:
{
   16ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   16ce4:	f8d2 9000 	ldr.w	r9, [r2]
{
   16ce8:	b091      	sub	sp, #68	; 0x44
   16cea:	4607      	mov	r7, r0
   16cec:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16cee:	2500      	movs	r5, #0
   16cf0:	f642 0301 	movw	r3, #10241	; 0x2801
   16cf4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   16cf6:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16cfa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   16cfe:	a90b      	add	r1, sp, #44	; 0x2c
{
   16d00:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16d02:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   16d06:	f009 fb9a 	bl	2043e <bt_uuid_cmp>
   16d0a:	2800      	cmp	r0, #0
   16d0c:	d066      	beq.n	16ddc <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   16d0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16d12:	6838      	ldr	r0, [r7, #0]
   16d14:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   16d18:	a90b      	add	r1, sp, #44	; 0x2c
   16d1a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   16d1e:	f009 fb8e 	bl	2043e <bt_uuid_cmp>
   16d22:	b138      	cbz	r0, 16d34 <find_type_cb+0x54>
		if (data->group &&
   16d24:	68a3      	ldr	r3, [r4, #8]
   16d26:	b11b      	cbz	r3, 16d30 <find_type_cb+0x50>
   16d28:	885a      	ldrh	r2, [r3, #2]
   16d2a:	42b2      	cmp	r2, r6
   16d2c:	d200      	bcs.n	16d30 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16d2e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   16d30:	2001      	movs	r0, #1
   16d32:	e009      	b.n	16d48 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   16d34:	6861      	ldr	r1, [r4, #4]
   16d36:	4608      	mov	r0, r1
   16d38:	f00a f8c3 	bl	20ec2 <net_buf_frags_len>
   16d3c:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   16d40:	1a1b      	subs	r3, r3, r0
   16d42:	2b03      	cmp	r3, #3
   16d44:	d803      	bhi.n	16d4e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   16d46:	2000      	movs	r0, #0
}
   16d48:	b011      	add	sp, #68	; 0x44
   16d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   16d4e:	4608      	mov	r0, r1
   16d50:	f00b fb7c 	bl	2244c <net_buf_frag_last>
   16d54:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   16d56:	6860      	ldr	r0, [r4, #4]
   16d58:	f00a f8b3 	bl	20ec2 <net_buf_frags_len>
   16d5c:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   16d60:	f105 0b08 	add.w	fp, r5, #8
   16d64:	ebaa 0a00 	sub.w	sl, sl, r0
   16d68:	4658      	mov	r0, fp
   16d6a:	f00b fbcc 	bl	22506 <net_buf_simple_tailroom>
   16d6e:	4582      	cmp	sl, r0
   16d70:	d237      	bcs.n	16de2 <find_type_cb+0x102>
   16d72:	6860      	ldr	r0, [r4, #4]
   16d74:	f00a f8a5 	bl	20ec2 <net_buf_frags_len>
   16d78:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   16d7c:	1a18      	subs	r0, r3, r0
	if (!len) {
   16d7e:	b970      	cbnz	r0, 16d9e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   16d80:	6863      	ldr	r3, [r4, #4]
   16d82:	7998      	ldrb	r0, [r3, #6]
   16d84:	f003 fe8e 	bl	1aaa4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   16d88:	2200      	movs	r2, #0
   16d8a:	2300      	movs	r3, #0
   16d8c:	f00b fb2a 	bl	223e4 <net_buf_alloc_fixed>
		if (!frag) {
   16d90:	4605      	mov	r5, r0
   16d92:	2800      	cmp	r0, #0
   16d94:	d0d7      	beq.n	16d46 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   16d96:	4601      	mov	r1, r0
   16d98:	6860      	ldr	r0, [r4, #4]
   16d9a:	f00b fb68 	bl	2246e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   16d9e:	2300      	movs	r3, #0
   16da0:	9300      	str	r3, [sp, #0]
   16da2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   16da6:	4639      	mov	r1, r7
   16da8:	2310      	movs	r3, #16
   16daa:	aa02      	add	r2, sp, #8
   16dac:	4640      	mov	r0, r8
   16dae:	47c8      	blx	r9
	if (read < 0) {
   16db0:	1e07      	subs	r7, r0, #0
   16db2:	db13      	blt.n	16ddc <find_type_cb+0xfc>
	if (read != data->value_len) {
   16db4:	7c22      	ldrb	r2, [r4, #16]
   16db6:	68e0      	ldr	r0, [r4, #12]
   16db8:	42ba      	cmp	r2, r7
   16dba:	d037      	beq.n	16e2c <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   16dbc:	4601      	mov	r1, r0
   16dbe:	a80b      	add	r0, sp, #44	; 0x2c
   16dc0:	f009 fb67 	bl	20492 <bt_uuid_create>
   16dc4:	b988      	cbnz	r0, 16dea <find_type_cb+0x10a>
   16dc6:	4a1b      	ldr	r2, [pc, #108]	; (16e34 <find_type_cb+0x154>)
   16dc8:	4b1b      	ldr	r3, [pc, #108]	; (16e38 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   16dca:	7c21      	ldrb	r1, [r4, #16]
   16dcc:	481b      	ldr	r0, [pc, #108]	; (16e3c <find_type_cb+0x15c>)
   16dce:	1ad2      	subs	r2, r2, r3
   16dd0:	08d2      	lsrs	r2, r2, #3
   16dd2:	0192      	lsls	r2, r2, #6
   16dd4:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   16dd8:	f007 fbe0 	bl	1e59c <log_1>
	data->group = NULL;
   16ddc:	2300      	movs	r3, #0
   16dde:	60a3      	str	r3, [r4, #8]
   16de0:	e7a6      	b.n	16d30 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   16de2:	4658      	mov	r0, fp
   16de4:	f00b fb8f 	bl	22506 <net_buf_simple_tailroom>
   16de8:	e7c9      	b.n	16d7e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   16dea:	b2fa      	uxtb	r2, r7
   16dec:	a902      	add	r1, sp, #8
   16dee:	a806      	add	r0, sp, #24
   16df0:	f009 fb4f 	bl	20492 <bt_uuid_create>
   16df4:	b948      	cbnz	r0, 16e0a <find_type_cb+0x12a>
   16df6:	4a0f      	ldr	r2, [pc, #60]	; (16e34 <find_type_cb+0x154>)
   16df8:	4b0f      	ldr	r3, [pc, #60]	; (16e38 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   16dfa:	4811      	ldr	r0, [pc, #68]	; (16e40 <find_type_cb+0x160>)
   16dfc:	1ad2      	subs	r2, r2, r3
   16dfe:	08d2      	lsrs	r2, r2, #3
   16e00:	0192      	lsls	r2, r2, #6
   16e02:	f042 0202 	orr.w	r2, r2, #2
   16e06:	4639      	mov	r1, r7
   16e08:	e7e6      	b.n	16dd8 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   16e0a:	a906      	add	r1, sp, #24
   16e0c:	a80b      	add	r0, sp, #44	; 0x2c
   16e0e:	f009 fb16 	bl	2043e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   16e12:	2800      	cmp	r0, #0
   16e14:	d1e2      	bne.n	16ddc <find_type_cb+0xfc>
	data->err = 0x00;
   16e16:	2300      	movs	r3, #0
   16e18:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   16e1a:	2104      	movs	r1, #4
   16e1c:	f105 0008 	add.w	r0, r5, #8
   16e20:	f00b fb36 	bl	22490 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   16e24:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16e26:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16e28:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   16e2a:	e781      	b.n	16d30 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   16e2c:	a902      	add	r1, sp, #8
   16e2e:	f009 f9f2 	bl	20216 <memcmp>
   16e32:	e7ee      	b.n	16e12 <find_type_cb+0x132>
   16e34:	0002354c 	.word	0x0002354c
   16e38:	0002353c 	.word	0x0002353c
   16e3c:	00025751 	.word	0x00025751
   16e40:	00025770 	.word	0x00025770

00016e44 <chan_send>:
{
   16e44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16e48:	688b      	ldr	r3, [r1, #8]
   16e4a:	781b      	ldrb	r3, [r3, #0]
   16e4c:	2bd2      	cmp	r3, #210	; 0xd2
{
   16e4e:	4606      	mov	r6, r0
   16e50:	460c      	mov	r4, r1
   16e52:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16e54:	d116      	bne.n	16e84 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   16e56:	6803      	ldr	r3, [r0, #0]
   16e58:	6818      	ldr	r0, [r3, #0]
   16e5a:	f00b f93f 	bl	220dc <bt_smp_sign>
		if (err) {
   16e5e:	4605      	mov	r5, r0
   16e60:	b180      	cbz	r0, 16e84 <chan_send+0x40>
   16e62:	4b24      	ldr	r3, [pc, #144]	; (16ef4 <chan_send+0xb0>)
   16e64:	4924      	ldr	r1, [pc, #144]	; (16ef8 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   16e66:	4825      	ldr	r0, [pc, #148]	; (16efc <chan_send+0xb8>)
   16e68:	1ac9      	subs	r1, r1, r3
   16e6a:	08c9      	lsrs	r1, r1, #3
   16e6c:	0189      	lsls	r1, r1, #6
   16e6e:	f041 0101 	orr.w	r1, r1, #1
   16e72:	f007 fb86 	bl	1e582 <log_0>
			net_buf_unref(buf);
   16e76:	4620      	mov	r0, r4
   16e78:	f003 fed0 	bl	1ac1c <net_buf_unref>
}
   16e7c:	4628      	mov	r0, r5
   16e7e:	b003      	add	sp, #12
   16e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   16e84:	f104 0008 	add.w	r0, r4, #8
   16e88:	f00b fb39 	bl	224fe <net_buf_simple_headroom>
	state->len = buf->len;
   16e8c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   16e90:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   16e92:	b957      	cbnz	r7, 16eaa <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   16e94:	68a3      	ldr	r3, [r4, #8]
   16e96:	7818      	ldrb	r0, [r3, #0]
   16e98:	f00a f833 	bl	20f02 <att_op_get_type>
   16e9c:	1e43      	subs	r3, r0, #1
   16e9e:	b2db      	uxtb	r3, r3
   16ea0:	2b04      	cmp	r3, #4
   16ea2:	bf9c      	itt	ls
   16ea4:	4a16      	ldrls	r2, [pc, #88]	; (16f00 <chan_send+0xbc>)
   16ea6:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16eaa:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   16eac:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16eb0:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   16eb2:	4b14      	ldr	r3, [pc, #80]	; (16f04 <chan_send+0xc0>)
   16eb4:	429f      	cmp	r7, r3
   16eb6:	d018      	beq.n	16eea <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   16eb8:	4b13      	ldr	r3, [pc, #76]	; (16f08 <chan_send+0xc4>)
   16eba:	429f      	cmp	r7, r3
   16ebc:	d017      	beq.n	16eee <chan_send+0xaa>
		return att_sent;
   16ebe:	4913      	ldr	r1, [pc, #76]	; (16f0c <chan_send+0xc8>)
   16ec0:	4b13      	ldr	r3, [pc, #76]	; (16f10 <chan_send+0xcc>)
   16ec2:	4a14      	ldr	r2, [pc, #80]	; (16f14 <chan_send+0xd0>)
   16ec4:	428f      	cmp	r7, r1
   16ec6:	bf18      	it	ne
   16ec8:	4613      	movne	r3, r2
			       &chan->chan.chan);
   16eca:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16ecc:	9600      	str	r6, [sp, #0]
   16ece:	4622      	mov	r2, r4
   16ed0:	2104      	movs	r1, #4
   16ed2:	f009 ff97 	bl	20e04 <bt_l2cap_send_cb>
	if (err) {
   16ed6:	4605      	mov	r5, r0
   16ed8:	2800      	cmp	r0, #0
   16eda:	d0cf      	beq.n	16e7c <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   16edc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16ede:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16ee2:	fa10 f088 	uxtah	r0, r0, r8
   16ee6:	60a0      	str	r0, [r4, #8]
}
   16ee8:	e7c8      	b.n	16e7c <chan_send+0x38>
		return att_rsp_sent;
   16eea:	4b0b      	ldr	r3, [pc, #44]	; (16f18 <chan_send+0xd4>)
   16eec:	e7ed      	b.n	16eca <chan_send+0x86>
		return att_cfm_sent;
   16eee:	4b0b      	ldr	r3, [pc, #44]	; (16f1c <chan_send+0xd8>)
   16ef0:	e7eb      	b.n	16eca <chan_send+0x86>
   16ef2:	bf00      	nop
   16ef4:	0002353c 	.word	0x0002353c
   16ef8:	0002354c 	.word	0x0002354c
   16efc:	0002578f 	.word	0x0002578f
   16f00:	00023c00 	.word	0x00023c00
   16f04:	000211c1 	.word	0x000211c1
   16f08:	000211dd 	.word	0x000211dd
   16f0c:	000211a7 	.word	0x000211a7
   16f10:	00016b65 	.word	0x00016b65
   16f14:	00020ed3 	.word	0x00020ed3
   16f18:	00016b55 	.word	0x00016b55
   16f1c:	00016b45 	.word	0x00016b45

00016f20 <att_get>:
{
   16f20:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   16f22:	7b43      	ldrb	r3, [r0, #13]
   16f24:	2b07      	cmp	r3, #7
   16f26:	d00b      	beq.n	16f40 <att_get+0x20>
   16f28:	4918      	ldr	r1, [pc, #96]	; (16f8c <att_get+0x6c>)
   16f2a:	4b19      	ldr	r3, [pc, #100]	; (16f90 <att_get+0x70>)
		BT_WARN("Not connected");
   16f2c:	4819      	ldr	r0, [pc, #100]	; (16f94 <att_get+0x74>)
   16f2e:	1ac9      	subs	r1, r1, r3
   16f30:	08c9      	lsrs	r1, r1, #3
   16f32:	0189      	lsls	r1, r1, #6
   16f34:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   16f38:	f007 fb23 	bl	1e582 <log_0>
		return NULL;
   16f3c:	2400      	movs	r4, #0
   16f3e:	e00e      	b.n	16f5e <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16f40:	2104      	movs	r1, #4
   16f42:	f009 ff88 	bl	20e56 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16f46:	4604      	mov	r4, r0
   16f48:	b958      	cbnz	r0, 16f62 <att_get+0x42>
   16f4a:	4910      	ldr	r1, [pc, #64]	; (16f8c <att_get+0x6c>)
   16f4c:	4b10      	ldr	r3, [pc, #64]	; (16f90 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   16f4e:	4812      	ldr	r0, [pc, #72]	; (16f98 <att_get+0x78>)
   16f50:	1ac9      	subs	r1, r1, r3
   16f52:	08c9      	lsrs	r1, r1, #3
   16f54:	0189      	lsls	r1, r1, #6
   16f56:	f041 0101 	orr.w	r1, r1, #1
   16f5a:	f007 fb12 	bl	1e582 <log_0>
}
   16f5e:	4620      	mov	r0, r4
   16f60:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16f62:	f3bf 8f5b 	dmb	ish
   16f66:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   16f6a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   16f6e:	075b      	lsls	r3, r3, #29
   16f70:	d508      	bpl.n	16f84 <att_get+0x64>
   16f72:	4906      	ldr	r1, [pc, #24]	; (16f8c <att_get+0x6c>)
   16f74:	4b06      	ldr	r3, [pc, #24]	; (16f90 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   16f76:	4809      	ldr	r0, [pc, #36]	; (16f9c <att_get+0x7c>)
   16f78:	1ac9      	subs	r1, r1, r3
   16f7a:	08c9      	lsrs	r1, r1, #3
   16f7c:	0189      	lsls	r1, r1, #6
   16f7e:	f041 0102 	orr.w	r1, r1, #2
   16f82:	e7d9      	b.n	16f38 <att_get+0x18>
	return att_chan->att;
   16f84:	f850 4c08 	ldr.w	r4, [r0, #-8]
   16f88:	e7e9      	b.n	16f5e <att_get+0x3e>
   16f8a:	bf00      	nop
   16f8c:	0002354c 	.word	0x0002354c
   16f90:	0002353c 	.word	0x0002353c
   16f94:	000257a2 	.word	0x000257a2
   16f98:	000257b0 	.word	0x000257b0
   16f9c:	000257cb 	.word	0x000257cb

00016fa0 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   16fa0:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   16fa2:	4a07      	ldr	r2, [pc, #28]	; (16fc0 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   16fa4:	4604      	mov	r4, r0
   16fa6:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   16fa8:	f7ff ff4c 	bl	16e44 <chan_send>
	if (err) {
   16fac:	b130      	cbz	r0, 16fbc <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   16fae:	4629      	mov	r1, r5
   16fb0:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   16fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   16fb8:	f00b ba37 	b.w	2242a <net_buf_put>
}
   16fbc:	bd38      	pop	{r3, r4, r5, pc}
   16fbe:	bf00      	nop
   16fc0:	000211c1 	.word	0x000211c1

00016fc4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16fc6:	2300      	movs	r3, #0
{
   16fc8:	4606      	mov	r6, r0
   16fca:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16fcc:	4828      	ldr	r0, [pc, #160]	; (17070 <bt_att_accept+0xac>)
   16fce:	2200      	movs	r2, #0
   16fd0:	4669      	mov	r1, sp
   16fd2:	f005 fb5b 	bl	1c68c <k_mem_slab_alloc>
   16fd6:	4604      	mov	r4, r0
   16fd8:	b178      	cbz	r0, 16ffa <bt_att_accept+0x36>
   16fda:	4a26      	ldr	r2, [pc, #152]	; (17074 <bt_att_accept+0xb0>)
   16fdc:	4b26      	ldr	r3, [pc, #152]	; (17078 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
   16fde:	4827      	ldr	r0, [pc, #156]	; (1707c <bt_att_accept+0xb8>)
   16fe0:	1ad2      	subs	r2, r2, r3
   16fe2:	08d2      	lsrs	r2, r2, #3
   16fe4:	0192      	lsls	r2, r2, #6
   16fe6:	f042 0201 	orr.w	r2, r2, #1
   16fea:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   16fec:	f007 fad6 	bl	1e59c <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   16ff0:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   16ff4:	4620      	mov	r0, r4
   16ff6:	b003      	add	sp, #12
   16ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   16ffa:	4601      	mov	r1, r0
   16ffc:	222c      	movs	r2, #44	; 0x2c
   16ffe:	9800      	ldr	r0, [sp, #0]
   17000:	f009 f944 	bl	2028c <memset>
	att->conn = conn;
   17004:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   17006:	481e      	ldr	r0, [pc, #120]	; (17080 <bt_att_accept+0xbc>)
	list->tail = NULL;
   17008:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   1700a:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1700e:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   17012:	2200      	movs	r2, #0
   17014:	2300      	movs	r3, #0
   17016:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17018:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1701a:	f005 fb37 	bl	1c68c <k_mem_slab_alloc>
   1701e:	4604      	mov	r4, r0
   17020:	b148      	cbz	r0, 17036 <bt_att_accept+0x72>
   17022:	4a14      	ldr	r2, [pc, #80]	; (17074 <bt_att_accept+0xb0>)
   17024:	4b14      	ldr	r3, [pc, #80]	; (17078 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   17026:	6829      	ldr	r1, [r5, #0]
   17028:	4816      	ldr	r0, [pc, #88]	; (17084 <bt_att_accept+0xc0>)
   1702a:	1ad2      	subs	r2, r2, r3
   1702c:	08d2      	lsrs	r2, r2, #3
   1702e:	0192      	lsls	r2, r2, #6
   17030:	f042 0201 	orr.w	r2, r2, #1
   17034:	e7da      	b.n	16fec <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   17036:	4601      	mov	r1, r0
   17038:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1703c:	9801      	ldr	r0, [sp, #4]
   1703e:	f009 f925 	bl	2028c <memset>
	chan->chan.chan.ops = &ops;
   17042:	9801      	ldr	r0, [sp, #4]
   17044:	4b10      	ldr	r3, [pc, #64]	; (17088 <bt_att_accept+0xc4>)
   17046:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   17048:	30f8      	adds	r0, #248	; 0xf8
   1704a:	f00b fcce 	bl	229ea <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1704e:	9b01      	ldr	r3, [sp, #4]
   17050:	f3bf 8f5b 	dmb	ish
   17054:	33f0      	adds	r3, #240	; 0xf0
   17056:	e853 2f00 	ldrex	r2, [r3]
   1705a:	e843 4100 	strex	r1, r4, [r3]
   1705e:	2900      	cmp	r1, #0
   17060:	d1f9      	bne.n	17056 <bt_att_accept+0x92>
   17062:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   17066:	9b01      	ldr	r3, [sp, #4]
   17068:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1706c:	603b      	str	r3, [r7, #0]
	return 0;
   1706e:	e7c1      	b.n	16ff4 <bt_att_accept+0x30>
   17070:	200006e0 	.word	0x200006e0
   17074:	0002354c 	.word	0x0002354c
   17078:	0002353c 	.word	0x0002353c
   1707c:	000257ef 	.word	0x000257ef
   17080:	200006fc 	.word	0x200006fc
   17084:	00025814 	.word	0x00025814
   17088:	200004f0 	.word	0x200004f0

0001708c <bt_att_connected>:
{
   1708c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1708e:	2104      	movs	r1, #4
{
   17090:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   17092:	6800      	ldr	r0, [r0, #0]
   17094:	f009 fecf 	bl	20e36 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   17098:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1709c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1709e:	b91b      	cbnz	r3, 170a8 <bt_att_connected+0x1c>
   170a0:	f105 000c 	add.w	r0, r5, #12
   170a4:	f00b fca1 	bl	229ea <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   170a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   170aa:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   170ae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   170b0:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   170b4:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   170b6:	b902      	cbnz	r2, 170ba <bt_att_connected+0x2e>
	list->tail = node;
   170b8:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   170ba:	f3bf 8f5b 	dmb	ish
   170be:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   170c2:	4908      	ldr	r1, [pc, #32]	; (170e4 <bt_att_connected+0x58>)
   170c4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   170c8:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   170ca:	bf5e      	ittt	pl
   170cc:	2317      	movpl	r3, #23
   170ce:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   170d2:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   170d6:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   170da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   170de:	f00b bd7e 	b.w	22bde <k_work_init_delayable>
   170e2:	bf00      	nop
   170e4:	00017a1d 	.word	0x00017a1d

000170e8 <att_write_cmd>:
{
   170e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   170ea:	4604      	mov	r4, r0
   170ec:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   170ee:	f101 0008 	add.w	r0, r1, #8
   170f2:	460d      	mov	r5, r1
   170f4:	f00b f9fb 	bl	224ee <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   170f8:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   170fa:	68af      	ldr	r7, [r5, #8]
   170fc:	89ad      	ldrh	r5, [r5, #12]
   170fe:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17100:	2100      	movs	r1, #0
   17102:	6818      	ldr	r0, [r3, #0]
   17104:	f00a fcbf 	bl	21a86 <bt_gatt_change_aware>
   17108:	b320      	cbz	r0, 17154 <att_write_cmd+0x6c>
	if (!handle) {
   1710a:	b32e      	cbz	r6, 17158 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   1710c:	2218      	movs	r2, #24
   1710e:	2100      	movs	r1, #0
   17110:	4668      	mov	r0, sp
   17112:	f009 f8bb 	bl	2028c <memset>
	data.conn = chan->att->conn;
   17116:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17118:	4a10      	ldr	r2, [pc, #64]	; (1715c <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   1711a:	681b      	ldr	r3, [r3, #0]
   1711c:	9300      	str	r3, [sp, #0]
	data.req = req;
   1711e:	2300      	movs	r3, #0
   17120:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   17124:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17128:	2301      	movs	r3, #1
   1712a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1712e:	4631      	mov	r1, r6
   17130:	466b      	mov	r3, sp
   17132:	4630      	mov	r0, r6
	data.value = value;
   17134:	9703      	str	r7, [sp, #12]
	data.len = len;
   17136:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1713a:	f009 ff0f 	bl	20f5c <bt_gatt_foreach_attr>
	if (data.err) {
   1713e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   17142:	b923      	cbnz	r3, 1714e <att_write_cmd+0x66>
	if (data.buf) {
   17144:	9901      	ldr	r1, [sp, #4]
   17146:	b111      	cbz	r1, 1714e <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17148:	4620      	mov	r0, r4
   1714a:	f7ff ff29 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
   1714e:	2000      	movs	r0, #0
}
   17150:	b007      	add	sp, #28
   17152:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17154:	2012      	movs	r0, #18
   17156:	e7fb      	b.n	17150 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   17158:	2001      	movs	r0, #1
   1715a:	e7f9      	b.n	17150 <att_write_cmd+0x68>
   1715c:	00021299 	.word	0x00021299

00017160 <bt_att_chan_create_pdu>:
{
   17160:	b538      	push	{r3, r4, r5, lr}
   17162:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   17164:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   17168:	3201      	adds	r2, #1
   1716a:	428a      	cmp	r2, r1
   1716c:	d90c      	bls.n	17188 <bt_att_chan_create_pdu+0x28>
   1716e:	481a      	ldr	r0, [pc, #104]	; (171d8 <bt_att_chan_create_pdu+0x78>)
   17170:	4b1a      	ldr	r3, [pc, #104]	; (171dc <bt_att_chan_create_pdu+0x7c>)
   17172:	1a1b      	subs	r3, r3, r0
   17174:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   17176:	019b      	lsls	r3, r3, #6
   17178:	4819      	ldr	r0, [pc, #100]	; (171e0 <bt_att_chan_create_pdu+0x80>)
   1717a:	f043 0302 	orr.w	r3, r3, #2
   1717e:	f007 fa21 	bl	1e5c4 <log_2>
		return NULL;
   17182:	2400      	movs	r4, #0
}
   17184:	4620      	mov	r0, r4
   17186:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   17188:	4628      	mov	r0, r5
   1718a:	f009 feba 	bl	20f02 <att_op_get_type>
   1718e:	2802      	cmp	r0, #2
   17190:	d001      	beq.n	17196 <bt_att_chan_create_pdu+0x36>
   17192:	2804      	cmp	r0, #4
   17194:	d114      	bne.n	171c0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   17196:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1719a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1719c:	2100      	movs	r1, #0
   1719e:	4608      	mov	r0, r1
   171a0:	f009 fe2d 	bl	20dfe <bt_l2cap_create_pdu_timeout>
   171a4:	4604      	mov	r4, r0
	if (!buf) {
   171a6:	b980      	cbnz	r0, 171ca <bt_att_chan_create_pdu+0x6a>
   171a8:	4b0b      	ldr	r3, [pc, #44]	; (171d8 <bt_att_chan_create_pdu+0x78>)
   171aa:	4a0c      	ldr	r2, [pc, #48]	; (171dc <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   171ac:	480d      	ldr	r0, [pc, #52]	; (171e4 <bt_att_chan_create_pdu+0x84>)
   171ae:	1ad2      	subs	r2, r2, r3
   171b0:	08d2      	lsrs	r2, r2, #3
   171b2:	0192      	lsls	r2, r2, #6
   171b4:	f042 0201 	orr.w	r2, r2, #1
   171b8:	4629      	mov	r1, r5
   171ba:	f007 f9ef 	bl	1e59c <log_1>
		return NULL;
   171be:	e7e1      	b.n	17184 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   171c0:	f04f 32ff 	mov.w	r2, #4294967295
   171c4:	f04f 33ff 	mov.w	r3, #4294967295
   171c8:	e7e8      	b.n	1719c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   171ca:	2101      	movs	r1, #1
   171cc:	3008      	adds	r0, #8
   171ce:	f00b f95f 	bl	22490 <net_buf_simple_add>
	hdr->code = op;
   171d2:	7005      	strb	r5, [r0, #0]
	return buf;
   171d4:	e7d6      	b.n	17184 <bt_att_chan_create_pdu+0x24>
   171d6:	bf00      	nop
   171d8:	0002353c 	.word	0x0002353c
   171dc:	0002354c 	.word	0x0002354c
   171e0:	00025839 	.word	0x00025839
   171e4:	00025626 	.word	0x00025626

000171e8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   171e8:	898b      	ldrh	r3, [r1, #12]
{
   171ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171ee:	4604      	mov	r4, r0
   171f0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   171f2:	b963      	cbnz	r3, 1720e <bt_att_recv+0x26>
   171f4:	494c      	ldr	r1, [pc, #304]	; (17328 <bt_att_recv+0x140>)
   171f6:	4b4d      	ldr	r3, [pc, #308]	; (1732c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   171f8:	484d      	ldr	r0, [pc, #308]	; (17330 <bt_att_recv+0x148>)
   171fa:	1ac9      	subs	r1, r1, r3
   171fc:	08c9      	lsrs	r1, r1, #3
   171fe:	0189      	lsls	r1, r1, #6
   17200:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   17204:	f007 f9bd 	bl	1e582 <log_0>
}
   17208:	2000      	movs	r0, #0
   1720a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1720e:	2101      	movs	r1, #1
   17210:	f108 0008 	add.w	r0, r8, #8
   17214:	f00b f963 	bl	224de <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   17218:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1721c:	4605      	mov	r5, r0
   1721e:	2b00      	cmp	r3, #0
   17220:	d0f2      	beq.n	17208 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   17222:	4a44      	ldr	r2, [pc, #272]	; (17334 <bt_att_recv+0x14c>)
   17224:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   17226:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1722a:	2300      	movs	r3, #0
   1722c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1722e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   17232:	4288      	cmp	r0, r1
   17234:	d11d      	bne.n	17272 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   17236:	00d8      	lsls	r0, r3, #3
   17238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1723c:	789f      	ldrb	r7, [r3, #2]
   1723e:	2f01      	cmp	r7, #1
   17240:	d132      	bne.n	172a8 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17242:	f3bf 8f5b 	dmb	ish
   17246:	34e8      	adds	r4, #232	; 0xe8
   17248:	e854 3f00 	ldrex	r3, [r4]
   1724c:	f043 0201 	orr.w	r2, r3, #1
   17250:	e844 2100 	strex	r1, r2, [r4]
   17254:	2900      	cmp	r1, #0
   17256:	d1f7      	bne.n	17248 <bt_att_recv+0x60>
   17258:	f3bf 8f5b 	dmb	ish
   1725c:	07da      	lsls	r2, r3, #31
   1725e:	d53d      	bpl.n	172dc <bt_att_recv+0xf4>
   17260:	4931      	ldr	r1, [pc, #196]	; (17328 <bt_att_recv+0x140>)
   17262:	4b32      	ldr	r3, [pc, #200]	; (1732c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   17264:	4834      	ldr	r0, [pc, #208]	; (17338 <bt_att_recv+0x150>)
   17266:	1ac9      	subs	r1, r1, r3
   17268:	08c9      	lsrs	r1, r1, #3
   1726a:	0189      	lsls	r1, r1, #6
   1726c:	f041 0102 	orr.w	r1, r1, #2
   17270:	e7c8      	b.n	17204 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17272:	3301      	adds	r3, #1
   17274:	2b0d      	cmp	r3, #13
   17276:	d1da      	bne.n	1722e <bt_att_recv+0x46>
   17278:	4b2c      	ldr	r3, [pc, #176]	; (1732c <bt_att_recv+0x144>)
   1727a:	4a2b      	ldr	r2, [pc, #172]	; (17328 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1727c:	482f      	ldr	r0, [pc, #188]	; (1733c <bt_att_recv+0x154>)
   1727e:	1ad2      	subs	r2, r2, r3
   17280:	08d2      	lsrs	r2, r2, #3
   17282:	0192      	lsls	r2, r2, #6
   17284:	f042 0202 	orr.w	r2, r2, #2
   17288:	f007 f988 	bl	1e59c <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   1728c:	7829      	ldrb	r1, [r5, #0]
   1728e:	4608      	mov	r0, r1
   17290:	f009 fe37 	bl	20f02 <att_op_get_type>
   17294:	2800      	cmp	r0, #0
   17296:	d0b7      	beq.n	17208 <bt_att_recv+0x20>
	if (!req) {
   17298:	2900      	cmp	r1, #0
   1729a:	d0b5      	beq.n	17208 <bt_att_recv+0x20>
   1729c:	2306      	movs	r3, #6
   1729e:	2200      	movs	r2, #0
   172a0:	4630      	mov	r0, r6
   172a2:	f00a f88e 	bl	213c2 <send_err_rsp.part.0>
   172a6:	e7af      	b.n	17208 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   172a8:	2f05      	cmp	r7, #5
   172aa:	d117      	bne.n	172dc <bt_att_recv+0xf4>
   172ac:	f3bf 8f5b 	dmb	ish
   172b0:	34e8      	adds	r4, #232	; 0xe8
   172b2:	e854 3f00 	ldrex	r3, [r4]
   172b6:	f043 0202 	orr.w	r2, r3, #2
   172ba:	e844 2100 	strex	r1, r2, [r4]
   172be:	2900      	cmp	r1, #0
   172c0:	d1f7      	bne.n	172b2 <bt_att_recv+0xca>
   172c2:	f3bf 8f5b 	dmb	ish
   172c6:	079b      	lsls	r3, r3, #30
   172c8:	d508      	bpl.n	172dc <bt_att_recv+0xf4>
   172ca:	4917      	ldr	r1, [pc, #92]	; (17328 <bt_att_recv+0x140>)
   172cc:	4b17      	ldr	r3, [pc, #92]	; (1732c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   172ce:	481c      	ldr	r0, [pc, #112]	; (17340 <bt_att_recv+0x158>)
   172d0:	1ac9      	subs	r1, r1, r3
   172d2:	08c9      	lsrs	r1, r1, #3
   172d4:	0189      	lsls	r1, r1, #6
   172d6:	f041 0102 	orr.w	r1, r1, #2
   172da:	e793      	b.n	17204 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   172dc:	eb0c 0300 	add.w	r3, ip, r0
   172e0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   172e4:	785a      	ldrb	r2, [r3, #1]
   172e6:	428a      	cmp	r2, r1
   172e8:	d90e      	bls.n	17308 <bt_att_recv+0x120>
   172ea:	4a10      	ldr	r2, [pc, #64]	; (1732c <bt_att_recv+0x144>)
   172ec:	4b0e      	ldr	r3, [pc, #56]	; (17328 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   172ee:	4815      	ldr	r0, [pc, #84]	; (17344 <bt_att_recv+0x15c>)
   172f0:	1a9b      	subs	r3, r3, r2
   172f2:	08db      	lsrs	r3, r3, #3
   172f4:	019b      	lsls	r3, r3, #6
   172f6:	782a      	ldrb	r2, [r5, #0]
   172f8:	f043 0301 	orr.w	r3, r3, #1
   172fc:	f007 f962 	bl	1e5c4 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   17300:	2f01      	cmp	r7, #1
   17302:	d181      	bne.n	17208 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   17304:	2304      	movs	r3, #4
   17306:	e00a      	b.n	1731e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   17308:	685b      	ldr	r3, [r3, #4]
   1730a:	4641      	mov	r1, r8
   1730c:	4630      	mov	r0, r6
   1730e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   17310:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   17312:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   17314:	f47f af78 	bne.w	17208 <bt_att_recv+0x20>
   17318:	2800      	cmp	r0, #0
   1731a:	f43f af75 	beq.w	17208 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1731e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   17320:	2900      	cmp	r1, #0
   17322:	f43f af71 	beq.w	17208 <bt_att_recv+0x20>
   17326:	e7ba      	b.n	1729e <bt_att_recv+0xb6>
   17328:	0002354c 	.word	0x0002354c
   1732c:	0002353c 	.word	0x0002353c
   17330:	0002585e 	.word	0x0002585e
   17334:	00023c14 	.word	0x00023c14
   17338:	00025879 	.word	0x00025879
   1733c:	000258d3 	.word	0x000258d3
   17340:	00025895 	.word	0x00025895
   17344:	000258b4 	.word	0x000258b4

00017348 <att_write_req>:
{
   17348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1734c:	4604      	mov	r4, r0
   1734e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   17350:	f101 0008 	add.w	r0, r1, #8
   17354:	460d      	mov	r5, r1
   17356:	f00b f8ca 	bl	224ee <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1735a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   1735c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   17360:	89ad      	ldrh	r5, [r5, #12]
   17362:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17364:	2101      	movs	r1, #1
   17366:	6818      	ldr	r0, [r3, #0]
   17368:	f00a fb8d 	bl	21a86 <bt_gatt_change_aware>
   1736c:	2800      	cmp	r0, #0
   1736e:	d03f      	beq.n	173f0 <att_write_req+0xa8>
	if (!handle) {
   17370:	2e00      	cmp	r6, #0
   17372:	d03f      	beq.n	173f4 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   17374:	2218      	movs	r2, #24
   17376:	2100      	movs	r1, #0
   17378:	4668      	mov	r0, sp
   1737a:	f008 ff87 	bl	2028c <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1737e:	2200      	movs	r2, #0
   17380:	2113      	movs	r1, #19
   17382:	4620      	mov	r0, r4
   17384:	f7ff feec 	bl	17160 <bt_att_chan_create_pdu>
   17388:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1738a:	b378      	cbz	r0, 173ec <att_write_req+0xa4>
	data.conn = chan->att->conn;
   1738c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1738e:	4a1a      	ldr	r2, [pc, #104]	; (173f8 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   17390:	681b      	ldr	r3, [r3, #0]
   17392:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17394:	2301      	movs	r3, #1
   17396:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   1739a:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   1739e:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   173a0:	466b      	mov	r3, sp
   173a2:	4631      	mov	r1, r6
   173a4:	4630      	mov	r0, r6
	data.len = len;
   173a6:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   173aa:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   173ae:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   173b2:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   173b6:	f009 fdd1 	bl	20f5c <bt_gatt_foreach_attr>
	if (data.err) {
   173ba:	f89d 5014 	ldrb.w	r5, [sp, #20]
   173be:	b175      	cbz	r5, 173de <att_write_req+0x96>
			net_buf_unref(data.buf);
   173c0:	9801      	ldr	r0, [sp, #4]
   173c2:	f003 fc2b 	bl	1ac1c <net_buf_unref>
	if (!req) {
   173c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   173ca:	4632      	mov	r2, r6
   173cc:	4641      	mov	r1, r8
   173ce:	4620      	mov	r0, r4
   173d0:	f009 fff7 	bl	213c2 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   173d4:	463d      	mov	r5, r7
}
   173d6:	4628      	mov	r0, r5
   173d8:	b007      	add	sp, #28
   173da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   173de:	9901      	ldr	r1, [sp, #4]
   173e0:	2900      	cmp	r1, #0
   173e2:	d0f8      	beq.n	173d6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   173e4:	4620      	mov	r0, r4
   173e6:	f7ff fddb 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
   173ea:	e7f4      	b.n	173d6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   173ec:	250e      	movs	r5, #14
   173ee:	e7f2      	b.n	173d6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   173f0:	2512      	movs	r5, #18
   173f2:	e7f0      	b.n	173d6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   173f4:	2501      	movs	r5, #1
   173f6:	e7ee      	b.n	173d6 <att_write_req+0x8e>
   173f8:	00021299 	.word	0x00021299

000173fc <bt_att_create_pdu>:
{
   173fc:	b570      	push	{r4, r5, r6, lr}
   173fe:	460e      	mov	r6, r1
   17400:	4615      	mov	r5, r2
	att = att_get(conn);
   17402:	f7ff fd8d 	bl	16f20 <att_get>
	if (!att) {
   17406:	b1c0      	cbz	r0, 1743a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17408:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
   1740a:	1c69      	adds	r1, r5, #1
   1740c:	b15b      	cbz	r3, 17426 <bt_att_create_pdu+0x2a>
   1740e:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   17412:	d008      	beq.n	17426 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17414:	681b      	ldr	r3, [r3, #0]
   17416:	b10b      	cbz	r3, 1741c <bt_att_create_pdu+0x20>
   17418:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1741c:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   17420:	4291      	cmp	r1, r2
   17422:	d90c      	bls.n	1743e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17424:	b98b      	cbnz	r3, 1744a <bt_att_create_pdu+0x4e>
   17426:	4a0e      	ldr	r2, [pc, #56]	; (17460 <bt_att_create_pdu+0x64>)
   17428:	4b0e      	ldr	r3, [pc, #56]	; (17464 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1742a:	480f      	ldr	r0, [pc, #60]	; (17468 <bt_att_create_pdu+0x6c>)
   1742c:	1ad2      	subs	r2, r2, r3
   1742e:	08d2      	lsrs	r2, r2, #3
   17430:	0192      	lsls	r2, r2, #6
   17432:	f042 0202 	orr.w	r2, r2, #2
   17436:	f007 f8b1 	bl	1e59c <log_1>
}
   1743a:	2000      	movs	r0, #0
   1743c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1743e:	462a      	mov	r2, r5
   17440:	4631      	mov	r1, r6
}
   17442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   17446:	f7ff be8b 	b.w	17160 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1744a:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   1744e:	d004      	beq.n	1745a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17450:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17454:	b10c      	cbz	r4, 1745a <bt_att_create_pdu+0x5e>
   17456:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1745a:	4618      	mov	r0, r3
   1745c:	4623      	mov	r3, r4
   1745e:	e7dd      	b.n	1741c <bt_att_create_pdu+0x20>
   17460:	0002354c 	.word	0x0002354c
   17464:	0002353c 	.word	0x0002353c
   17468:	000258ed 	.word	0x000258ed

0001746c <att_read_group_req>:
{
   1746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17470:	7b0c      	ldrb	r4, [r1, #12]
   17472:	3c04      	subs	r4, #4
   17474:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   17476:	2c02      	cmp	r4, #2
{
   17478:	4605      	mov	r5, r0
   1747a:	b08c      	sub	sp, #48	; 0x30
   1747c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1747e:	d001      	beq.n	17484 <att_read_group_req+0x18>
   17480:	2c10      	cmp	r4, #16
   17482:	d16e      	bne.n	17562 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   17484:	2104      	movs	r1, #4
   17486:	3008      	adds	r0, #8
   17488:	f00b f829 	bl	224de <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1748c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   17490:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17492:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17494:	1d01      	adds	r1, r0, #4
   17496:	4622      	mov	r2, r4
   17498:	4640      	mov	r0, r8
   1749a:	f008 fffa 	bl	20492 <bt_uuid_create>
   1749e:	2800      	cmp	r0, #0
   174a0:	d061      	beq.n	17566 <att_read_group_req+0xfa>
	if (!start || !end) {
   174a2:	2e00      	cmp	r6, #0
   174a4:	d03a      	beq.n	1751c <att_read_group_req+0xb0>
   174a6:	2400      	movs	r4, #0
   174a8:	2f00      	cmp	r7, #0
   174aa:	d036      	beq.n	1751a <att_read_group_req+0xae>
	if (start > end) {
   174ac:	42b7      	cmp	r7, r6
   174ae:	d335      	bcc.n	1751c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   174b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   174b4:	a901      	add	r1, sp, #4
   174b6:	4640      	mov	r0, r8
   174b8:	f88d 4004 	strb.w	r4, [sp, #4]
   174bc:	f8ad 3006 	strh.w	r3, [sp, #6]
   174c0:	f008 ffbd 	bl	2043e <bt_uuid_cmp>
   174c4:	2800      	cmp	r0, #0
   174c6:	d134      	bne.n	17532 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   174c8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   174ca:	2214      	movs	r2, #20
   174cc:	2100      	movs	r1, #0
   174ce:	a807      	add	r0, sp, #28
   174d0:	f008 fedc 	bl	2028c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   174d4:	2201      	movs	r2, #1
   174d6:	2111      	movs	r1, #17
   174d8:	4620      	mov	r0, r4
   174da:	f7ff ff8f 	bl	173fc <bt_att_create_pdu>
   174de:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   174e0:	2800      	cmp	r0, #0
   174e2:	d040      	beq.n	17566 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   174e4:	2101      	movs	r1, #1
   174e6:	3008      	adds	r0, #8
	data.uuid = uuid;
   174e8:	e9cd 5807 	strd	r5, r8, [sp, #28]
   174ec:	f00a ffd0 	bl	22490 <net_buf_simple_add>
	data.rsp->len = 0U;
   174f0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   174f4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   174f6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   174f8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   174fc:	4a1b      	ldr	r2, [pc, #108]	; (1756c <att_read_group_req+0x100>)
	data.group = NULL;
   174fe:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17502:	4639      	mov	r1, r7
   17504:	4630      	mov	r0, r6
   17506:	f009 fd29 	bl	20f5c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1750a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1750c:	781c      	ldrb	r4, [r3, #0]
   1750e:	bb1c      	cbnz	r4, 17558 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   17510:	9809      	ldr	r0, [sp, #36]	; 0x24
   17512:	f003 fb83 	bl	1ac1c <net_buf_unref>
	if (!req) {
   17516:	230a      	movs	r3, #10
   17518:	e018      	b.n	1754c <att_read_group_req+0xe0>
			*err = 0U;
   1751a:	463e      	mov	r6, r7
	if (!req) {
   1751c:	2301      	movs	r3, #1
   1751e:	4632      	mov	r2, r6
   17520:	2110      	movs	r1, #16
   17522:	4628      	mov	r0, r5
   17524:	f009 ff4d 	bl	213c2 <send_err_rsp.part.0>
		return 0;
   17528:	2400      	movs	r4, #0
}
   1752a:	4620      	mov	r0, r4
   1752c:	b00c      	add	sp, #48	; 0x30
   1752e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   17532:	f642 0301 	movw	r3, #10241	; 0x2801
   17536:	a907      	add	r1, sp, #28
   17538:	4640      	mov	r0, r8
   1753a:	f88d 401c 	strb.w	r4, [sp, #28]
   1753e:	f8ad 301e 	strh.w	r3, [sp, #30]
   17542:	f008 ff7c 	bl	2043e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17546:	2800      	cmp	r0, #0
   17548:	d0be      	beq.n	174c8 <att_read_group_req+0x5c>
	if (!req) {
   1754a:	2310      	movs	r3, #16
   1754c:	4632      	mov	r2, r6
   1754e:	2110      	movs	r1, #16
   17550:	4628      	mov	r0, r5
   17552:	f009 ff36 	bl	213c2 <send_err_rsp.part.0>
		return 0;
   17556:	e7e8      	b.n	1752a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17558:	9909      	ldr	r1, [sp, #36]	; 0x24
   1755a:	4628      	mov	r0, r5
   1755c:	f7ff fd20 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   17560:	e7e2      	b.n	17528 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   17562:	2404      	movs	r4, #4
   17564:	e7e1      	b.n	1752a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   17566:	240e      	movs	r4, #14
   17568:	e7df      	b.n	1752a <att_read_group_req+0xbe>
   1756a:	bf00      	nop
   1756c:	00016b8d 	.word	0x00016b8d

00017570 <att_read_mult_req>:
{
   17570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17574:	6886      	ldr	r6, [r0, #8]
{
   17576:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   17578:	2210      	movs	r2, #16
{
   1757a:	4604      	mov	r4, r0
   1757c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   1757e:	4668      	mov	r0, sp
   17580:	2100      	movs	r1, #0
   17582:	f008 fe83 	bl	2028c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   17586:	2200      	movs	r2, #0
   17588:	210f      	movs	r1, #15
   1758a:	4630      	mov	r0, r6
   1758c:	f7ff ff36 	bl	173fc <bt_att_create_pdu>
   17590:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17592:	b358      	cbz	r0, 175ec <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17594:	f8df 9058 	ldr.w	r9, [pc, #88]	; 175f0 <att_read_mult_req+0x80>
	data.chan = chan;
   17598:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1759a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1759e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   175a2:	89ab      	ldrh	r3, [r5, #12]
   175a4:	2b01      	cmp	r3, #1
   175a6:	d804      	bhi.n	175b2 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   175a8:	9902      	ldr	r1, [sp, #8]
   175aa:	4620      	mov	r0, r4
   175ac:	f7ff fcf8 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
   175b0:	e018      	b.n	175e4 <att_read_mult_req+0x74>
   175b2:	4638      	mov	r0, r7
   175b4:	f00a ff9b 	bl	224ee <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   175b8:	466b      	mov	r3, sp
   175ba:	464a      	mov	r2, r9
   175bc:	4601      	mov	r1, r0
   175be:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   175c0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   175c4:	f009 fcca 	bl	20f5c <bt_gatt_foreach_attr>
		if (data.err) {
   175c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   175cc:	2b00      	cmp	r3, #0
   175ce:	d0e8      	beq.n	175a2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   175d0:	9802      	ldr	r0, [sp, #8]
   175d2:	f003 fb23 	bl	1ac1c <net_buf_unref>
	if (!req) {
   175d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   175da:	4632      	mov	r2, r6
   175dc:	210e      	movs	r1, #14
   175de:	4620      	mov	r0, r4
   175e0:	f009 feef 	bl	213c2 <send_err_rsp.part.0>
	return 0;
   175e4:	2000      	movs	r0, #0
}
   175e6:	b005      	add	sp, #20
   175e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   175ec:	200e      	movs	r0, #14
   175ee:	e7fa      	b.n	175e6 <att_read_mult_req+0x76>
   175f0:	0002136f 	.word	0x0002136f

000175f4 <att_read_rsp>:
{
   175f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   175f8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   175fc:	4605      	mov	r5, r0
   175fe:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17600:	4640      	mov	r0, r8
   17602:	2101      	movs	r1, #1
{
   17604:	4614      	mov	r4, r2
   17606:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   17608:	f00a fa3d 	bl	21a86 <bt_gatt_change_aware>
   1760c:	b388      	cbz	r0, 17672 <att_read_rsp+0x7e>
	if (!handle) {
   1760e:	b396      	cbz	r6, 17676 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   17610:	2210      	movs	r2, #16
   17612:	2100      	movs	r1, #0
   17614:	4668      	mov	r0, sp
   17616:	f008 fe39 	bl	2028c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1761a:	2200      	movs	r2, #0
   1761c:	4621      	mov	r1, r4
   1761e:	4640      	mov	r0, r8
   17620:	f7ff feec 	bl	173fc <bt_att_create_pdu>
   17624:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17626:	b340      	cbz	r0, 1767a <att_read_rsp+0x86>
	data.offset = offset;
   17628:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1762c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17630:	2301      	movs	r3, #1
   17632:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17636:	4a12      	ldr	r2, [pc, #72]	; (17680 <att_read_rsp+0x8c>)
	data.chan = chan;
   17638:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1763a:	466b      	mov	r3, sp
   1763c:	4631      	mov	r1, r6
   1763e:	4630      	mov	r0, r6
   17640:	f009 fc8c 	bl	20f5c <bt_gatt_foreach_attr>
	if (data.err) {
   17644:	f89d 400c 	ldrb.w	r4, [sp, #12]
   17648:	b174      	cbz	r4, 17668 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1764a:	9802      	ldr	r0, [sp, #8]
   1764c:	f003 fae6 	bl	1ac1c <net_buf_unref>
	if (!req) {
   17650:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17654:	4632      	mov	r2, r6
   17656:	4639      	mov	r1, r7
   17658:	4628      	mov	r0, r5
   1765a:	f009 feb2 	bl	213c2 <send_err_rsp.part.0>
		return 0;
   1765e:	2400      	movs	r4, #0
}
   17660:	4620      	mov	r0, r4
   17662:	b004      	add	sp, #16
   17664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17668:	9902      	ldr	r1, [sp, #8]
   1766a:	4628      	mov	r0, r5
   1766c:	f7ff fc98 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   17670:	e7f6      	b.n	17660 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17672:	2412      	movs	r4, #18
   17674:	e7f4      	b.n	17660 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   17676:	2401      	movs	r4, #1
   17678:	e7f2      	b.n	17660 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1767a:	240e      	movs	r4, #14
   1767c:	e7f0      	b.n	17660 <att_read_rsp+0x6c>
   1767e:	bf00      	nop
   17680:	0002136f 	.word	0x0002136f

00017684 <att_read_type_req>:
{
   17684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17688:	7b0c      	ldrb	r4, [r1, #12]
   1768a:	3c04      	subs	r4, #4
   1768c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1768e:	2c02      	cmp	r4, #2
{
   17690:	4605      	mov	r5, r0
   17692:	b08c      	sub	sp, #48	; 0x30
   17694:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17696:	d001      	beq.n	1769c <att_read_type_req+0x18>
   17698:	2c10      	cmp	r4, #16
   1769a:	d14f      	bne.n	1773c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1769c:	2104      	movs	r1, #4
   1769e:	3008      	adds	r0, #8
   176a0:	f00a ff1d 	bl	224de <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   176a4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   176a8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   176aa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   176ac:	1d01      	adds	r1, r0, #4
   176ae:	4622      	mov	r2, r4
   176b0:	4640      	mov	r0, r8
   176b2:	f008 feee 	bl	20492 <bt_uuid_create>
   176b6:	b188      	cbz	r0, 176dc <att_read_type_req+0x58>
	if (!start || !end) {
   176b8:	b19e      	cbz	r6, 176e2 <att_read_type_req+0x5e>
   176ba:	b18f      	cbz	r7, 176e0 <att_read_type_req+0x5c>
	if (start > end) {
   176bc:	42be      	cmp	r6, r7
   176be:	d810      	bhi.n	176e2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   176c0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   176c2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   176c4:	2100      	movs	r1, #0
   176c6:	eb0d 0002 	add.w	r0, sp, r2
   176ca:	f008 fddf 	bl	2028c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   176ce:	2201      	movs	r2, #1
   176d0:	2109      	movs	r1, #9
   176d2:	4620      	mov	r0, r4
   176d4:	f7ff fe92 	bl	173fc <bt_att_create_pdu>
   176d8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   176da:	b968      	cbnz	r0, 176f8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   176dc:	240e      	movs	r4, #14
   176de:	e007      	b.n	176f0 <att_read_type_req+0x6c>
			*err = 0U;
   176e0:	463e      	mov	r6, r7
	if (!req) {
   176e2:	2301      	movs	r3, #1
   176e4:	4632      	mov	r2, r6
   176e6:	2108      	movs	r1, #8
   176e8:	4628      	mov	r0, r5
   176ea:	f009 fe6a 	bl	213c2 <send_err_rsp.part.0>
		return 0;
   176ee:	2400      	movs	r4, #0
}
   176f0:	4620      	mov	r0, r4
   176f2:	b00c      	add	sp, #48	; 0x30
   176f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   176f8:	2101      	movs	r1, #1
   176fa:	3008      	adds	r0, #8
	data.uuid = uuid;
   176fc:	e9cd 5806 	strd	r5, r8, [sp, #24]
   17700:	f00a fec6 	bl	22490 <net_buf_simple_add>
	data.rsp->len = 0U;
   17704:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17708:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1770a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1770c:	4a0c      	ldr	r2, [pc, #48]	; (17740 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   1770e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17712:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17714:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17718:	4630      	mov	r0, r6
   1771a:	ab06      	add	r3, sp, #24
   1771c:	f009 fc1e 	bl	20f5c <bt_gatt_foreach_attr>
	if (data.err) {
   17720:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   17724:	b12c      	cbz	r4, 17732 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   17726:	9808      	ldr	r0, [sp, #32]
   17728:	f003 fa78 	bl	1ac1c <net_buf_unref>
	if (!req) {
   1772c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   17730:	e7d8      	b.n	176e4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17732:	9908      	ldr	r1, [sp, #32]
   17734:	4628      	mov	r0, r5
   17736:	f7ff fc33 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1773a:	e7d9      	b.n	176f0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1773c:	2404      	movs	r4, #4
   1773e:	e7d7      	b.n	176f0 <att_read_type_req+0x6c>
   17740:	00016c39 	.word	0x00016c39

00017744 <att_find_type_req>:
{
   17744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17748:	4688      	mov	r8, r1
   1774a:	b086      	sub	sp, #24
   1774c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1774e:	2106      	movs	r1, #6
   17750:	f108 0008 	add.w	r0, r8, #8
   17754:	f00a fec3 	bl	224de <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   17758:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1775a:	b317      	cbz	r7, 177a2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1775c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   17760:	f1b9 0f00 	cmp.w	r9, #0
   17764:	d01c      	beq.n	177a0 <att_find_type_req+0x5c>
	if (start > end) {
   17766:	45b9      	cmp	r9, r7
   17768:	d31b      	bcc.n	177a2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1776a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1776c:	f8ad 3002 	strh.w	r3, [sp, #2]
   17770:	2400      	movs	r4, #0
   17772:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17776:	a901      	add	r1, sp, #4
   17778:	4668      	mov	r0, sp
	value = buf->data;
   1777a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1777e:	f88d 4000 	strb.w	r4, [sp]
   17782:	f88d 4004 	strb.w	r4, [sp, #4]
   17786:	f8ad 3006 	strh.w	r3, [sp, #6]
   1778a:	f008 fe58 	bl	2043e <bt_uuid_cmp>
   1778e:	4606      	mov	r6, r0
   17790:	b190      	cbz	r0, 177b8 <att_find_type_req+0x74>
	if (!req) {
   17792:	230a      	movs	r3, #10
   17794:	463a      	mov	r2, r7
   17796:	2106      	movs	r1, #6
   17798:	4628      	mov	r0, r5
   1779a:	f009 fe12 	bl	213c2 <send_err_rsp.part.0>
		return 0;
   1779e:	e007      	b.n	177b0 <att_find_type_req+0x6c>
			*err = 0U;
   177a0:	464f      	mov	r7, r9
	if (!req) {
   177a2:	2301      	movs	r3, #1
   177a4:	463a      	mov	r2, r7
   177a6:	2106      	movs	r1, #6
   177a8:	4628      	mov	r0, r5
   177aa:	f009 fe0a 	bl	213c2 <send_err_rsp.part.0>
		return 0;
   177ae:	2400      	movs	r4, #0
}
   177b0:	4620      	mov	r0, r4
   177b2:	b006      	add	sp, #24
   177b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   177b8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   177bc:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   177c0:	4601      	mov	r1, r0
   177c2:	2214      	movs	r2, #20
   177c4:	a801      	add	r0, sp, #4
   177c6:	f008 fd61 	bl	2028c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   177ca:	4632      	mov	r2, r6
   177cc:	2107      	movs	r1, #7
   177ce:	4640      	mov	r0, r8
   177d0:	f7ff fe14 	bl	173fc <bt_att_create_pdu>
   177d4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   177d6:	b1d8      	cbz	r0, 17810 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   177d8:	230a      	movs	r3, #10
   177da:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   177de:	4a0d      	ldr	r2, [pc, #52]	; (17814 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   177e0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   177e4:	ab01      	add	r3, sp, #4
   177e6:	4649      	mov	r1, r9
   177e8:	4638      	mov	r0, r7
	data.value = value;
   177ea:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   177ee:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   177f0:	f009 fbb4 	bl	20f5c <bt_gatt_foreach_attr>
	if (data.err) {
   177f4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   177f8:	b12c      	cbz	r4, 17806 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   177fa:	9802      	ldr	r0, [sp, #8]
   177fc:	f003 fa0e 	bl	1ac1c <net_buf_unref>
	if (!req) {
   17800:	f89d 3015 	ldrb.w	r3, [sp, #21]
   17804:	e7ce      	b.n	177a4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17806:	9902      	ldr	r1, [sp, #8]
   17808:	4628      	mov	r0, r5
   1780a:	f7ff fbc9 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1780e:	e7cf      	b.n	177b0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   17810:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17812:	e7cd      	b.n	177b0 <att_find_type_req+0x6c>
   17814:	00016ce1 	.word	0x00016ce1

00017818 <att_find_info_req>:
{
   17818:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1781a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1781c:	881e      	ldrh	r6, [r3, #0]
{
   1781e:	b085      	sub	sp, #20
   17820:	4605      	mov	r5, r0
	if (!start || !end) {
   17822:	b19e      	cbz	r6, 1784c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   17824:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   17826:	b184      	cbz	r4, 1784a <att_find_info_req+0x32>
	if (start > end) {
   17828:	42a6      	cmp	r6, r4
   1782a:	d80f      	bhi.n	1784c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1782c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1782e:	2210      	movs	r2, #16
   17830:	2100      	movs	r1, #0
   17832:	4668      	mov	r0, sp
   17834:	f008 fd2a 	bl	2028c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   17838:	2200      	movs	r2, #0
   1783a:	2105      	movs	r1, #5
   1783c:	4638      	mov	r0, r7
   1783e:	f7ff fddd 	bl	173fc <bt_att_create_pdu>
   17842:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   17844:	b958      	cbnz	r0, 1785e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   17846:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   17848:	e007      	b.n	1785a <att_find_info_req+0x42>
			*err = 0U;
   1784a:	4626      	mov	r6, r4
	if (!req) {
   1784c:	2301      	movs	r3, #1
   1784e:	4632      	mov	r2, r6
   17850:	2104      	movs	r1, #4
   17852:	4628      	mov	r0, r5
   17854:	f009 fdb5 	bl	213c2 <send_err_rsp.part.0>
	return 0;
   17858:	2000      	movs	r0, #0
}
   1785a:	b005      	add	sp, #20
   1785c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1785e:	4621      	mov	r1, r4
   17860:	4a08      	ldr	r2, [pc, #32]	; (17884 <att_find_info_req+0x6c>)
	data.chan = chan;
   17862:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17864:	466b      	mov	r3, sp
   17866:	4630      	mov	r0, r6
   17868:	f009 fb78 	bl	20f5c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1786c:	9c02      	ldr	r4, [sp, #8]
   1786e:	b924      	cbnz	r4, 1787a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   17870:	9801      	ldr	r0, [sp, #4]
   17872:	f003 f9d3 	bl	1ac1c <net_buf_unref>
	if (!req) {
   17876:	230a      	movs	r3, #10
   17878:	e7e9      	b.n	1784e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1787a:	9901      	ldr	r1, [sp, #4]
   1787c:	4628      	mov	r0, r5
   1787e:	f7ff fb8f 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
   17882:	e7e9      	b.n	17858 <att_find_info_req+0x40>
   17884:	00021089 	.word	0x00021089

00017888 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   17888:	b513      	push	{r0, r1, r4, lr}
   1788a:	4602      	mov	r2, r0
   1788c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1788e:	4808      	ldr	r0, [pc, #32]	; (178b0 <bt_att_req_alloc+0x28>)
   17890:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   17892:	2400      	movs	r4, #0
   17894:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17896:	f004 fef9 	bl	1c68c <k_mem_slab_alloc>
   1789a:	4601      	mov	r1, r0
   1789c:	b930      	cbnz	r0, 178ac <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1789e:	9801      	ldr	r0, [sp, #4]
   178a0:	221c      	movs	r2, #28
   178a2:	f008 fcf3 	bl	2028c <memset>

	return req;
   178a6:	9801      	ldr	r0, [sp, #4]
}
   178a8:	b002      	add	sp, #8
   178aa:	bd10      	pop	{r4, pc}
		return NULL;
   178ac:	4620      	mov	r0, r4
   178ae:	e7fb      	b.n	178a8 <bt_att_req_alloc+0x20>
   178b0:	20000718 	.word	0x20000718

000178b4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   178b4:	b507      	push	{r0, r1, r2, lr}
   178b6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   178b8:	6880      	ldr	r0, [r0, #8]
   178ba:	b120      	cbz	r0, 178c6 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   178bc:	f003 f9ae 	bl	1ac1c <net_buf_unref>
		req->buf = NULL;
   178c0:	9b01      	ldr	r3, [sp, #4]
   178c2:	2200      	movs	r2, #0
   178c4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   178c6:	4803      	ldr	r0, [pc, #12]	; (178d4 <bt_att_req_free+0x20>)
   178c8:	a901      	add	r1, sp, #4
   178ca:	f00a ffda 	bl	22882 <k_mem_slab_free>
}
   178ce:	b003      	add	sp, #12
   178d0:	f85d fb04 	ldr.w	pc, [sp], #4
   178d4:	20000718 	.word	0x20000718

000178d8 <att_handle_rsp>:
{
   178d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178dc:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   178de:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   178e2:	460f      	mov	r7, r1
   178e4:	4690      	mov	r8, r2
   178e6:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   178e8:	f00b f985 	bl	22bf6 <k_work_cancel_delayable>
	if (!chan->req) {
   178ec:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   178f0:	b9e5      	cbnz	r5, 1792c <att_handle_rsp+0x54>
   178f2:	4919      	ldr	r1, [pc, #100]	; (17958 <att_handle_rsp+0x80>)
   178f4:	4819      	ldr	r0, [pc, #100]	; (1795c <att_handle_rsp+0x84>)
   178f6:	1a40      	subs	r0, r0, r1
   178f8:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   178fa:	0180      	lsls	r0, r0, #6
   178fc:	f040 0102 	orr.w	r1, r0, #2
   17900:	4817      	ldr	r0, [pc, #92]	; (17960 <att_handle_rsp+0x88>)
   17902:	f006 fe3e 	bl	1e582 <log_0>
	bt_att_func_t func = NULL;
   17906:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   17908:	6820      	ldr	r0, [r4, #0]
   1790a:	f009 fc99 	bl	21240 <att_req_send_process>
	if (func) {
   1790e:	f1ba 0f00 	cmp.w	sl, #0
   17912:	d007      	beq.n	17924 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   17914:	6820      	ldr	r0, [r4, #0]
   17916:	f8cd 9000 	str.w	r9, [sp]
   1791a:	6800      	ldr	r0, [r0, #0]
   1791c:	4643      	mov	r3, r8
   1791e:	463a      	mov	r2, r7
   17920:	4631      	mov	r1, r6
   17922:	47d0      	blx	sl
}
   17924:	2000      	movs	r0, #0
   17926:	b003      	add	sp, #12
   17928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1792c:	4b0d      	ldr	r3, [pc, #52]	; (17964 <att_handle_rsp+0x8c>)
   1792e:	429d      	cmp	r5, r3
   17930:	f04f 0b00 	mov.w	fp, #0
   17934:	d103      	bne.n	1793e <att_handle_rsp+0x66>
		chan->req = NULL;
   17936:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   1793a:	46da      	mov	sl, fp
		goto process;
   1793c:	e7e4      	b.n	17908 <att_handle_rsp+0x30>
	func = chan->req->func;
   1793e:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   17942:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   17946:	4628      	mov	r0, r5
	params = chan->req->user_data;
   17948:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   1794c:	f7ff ffb2 	bl	178b4 <bt_att_req_free>
	chan->req = NULL;
   17950:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
   17954:	e7d8      	b.n	17908 <att_handle_rsp+0x30>
   17956:	bf00      	nop
   17958:	0002353c 	.word	0x0002353c
   1795c:	0002354c 	.word	0x0002354c
   17960:	00025908 	.word	0x00025908
   17964:	20001f24 	.word	0x20001f24

00017968 <bt_att_disconnected>:
{
   17968:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1796a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1796e:	b085      	sub	sp, #20
   17970:	4604      	mov	r4, r0
	if (!att_chan->att) {
   17972:	b385      	cbz	r5, 179d6 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   17974:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   17978:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1797c:	f009 fa86 	bl	20e8c <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   17980:	f1a4 0608 	sub.w	r6, r4, #8
   17984:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   17988:	2200      	movs	r2, #0
   1798a:	2300      	movs	r3, #0
   1798c:	4638      	mov	r0, r7
   1798e:	f00a fd2e 	bl	223ee <net_buf_get>
   17992:	4602      	mov	r2, r0
   17994:	bb08      	cbnz	r0, 179da <bt_att_disconnected+0x72>
	if (chan->req) {
   17996:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1799a:	b123      	cbz	r3, 179a6 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1799c:	4601      	mov	r1, r0
   1799e:	230e      	movs	r3, #14
   179a0:	4630      	mov	r0, r6
   179a2:	f7ff ff99 	bl	178d8 <att_handle_rsp>
	chan->att = NULL;
   179a6:	2300      	movs	r3, #0
   179a8:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   179ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   179ae:	b993      	cbnz	r3, 179d6 <bt_att_disconnected+0x6e>
	att_reset(att);
   179b0:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   179b2:	9803      	ldr	r0, [sp, #12]
   179b4:	2200      	movs	r2, #0
   179b6:	2300      	movs	r3, #0
   179b8:	300c      	adds	r0, #12
   179ba:	f00a fd18 	bl	223ee <net_buf_get>
   179be:	b978      	cbnz	r0, 179e0 <bt_att_disconnected+0x78>
	att->conn = NULL;
   179c0:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   179c2:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   179c4:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   179c6:	b976      	cbnz	r6, 179e6 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   179c8:	4813      	ldr	r0, [pc, #76]	; (17a18 <bt_att_disconnected+0xb0>)
   179ca:	a903      	add	r1, sp, #12
   179cc:	f00a ff59 	bl	22882 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   179d0:	6820      	ldr	r0, [r4, #0]
   179d2:	f001 fa6d 	bl	18eb0 <bt_gatt_disconnected>
}
   179d6:	b005      	add	sp, #20
   179d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   179da:	f003 f91f 	bl	1ac1c <net_buf_unref>
   179de:	e7d3      	b.n	17988 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   179e0:	f003 f91c 	bl	1ac1c <net_buf_unref>
   179e4:	e7e5      	b.n	179b2 <bt_att_disconnected+0x4a>
	return node->next;
   179e6:	6835      	ldr	r5, [r6, #0]
   179e8:	2d00      	cmp	r5, #0
   179ea:	bf38      	it	cc
   179ec:	2500      	movcc	r5, #0
		if (req->func) {
   179ee:	6877      	ldr	r7, [r6, #4]
   179f0:	b137      	cbz	r7, 17a00 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   179f2:	69b3      	ldr	r3, [r6, #24]
   179f4:	9300      	str	r3, [sp, #0]
   179f6:	2300      	movs	r3, #0
   179f8:	461a      	mov	r2, r3
   179fa:	210e      	movs	r1, #14
   179fc:	4618      	mov	r0, r3
   179fe:	47b8      	blx	r7
		bt_att_req_free(req);
   17a00:	4630      	mov	r0, r6
   17a02:	f7ff ff57 	bl	178b4 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   17a06:	2d00      	cmp	r5, #0
   17a08:	d0de      	beq.n	179c8 <bt_att_disconnected+0x60>
   17a0a:	682b      	ldr	r3, [r5, #0]
   17a0c:	2b00      	cmp	r3, #0
   17a0e:	bf38      	it	cc
   17a10:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17a12:	462e      	mov	r6, r5
   17a14:	461d      	mov	r5, r3
   17a16:	e7ea      	b.n	179ee <bt_att_disconnected+0x86>
   17a18:	200006e0 	.word	0x200006e0

00017a1c <att_timeout>:
   17a1c:	4b08      	ldr	r3, [pc, #32]	; (17a40 <att_timeout+0x24>)
   17a1e:	4909      	ldr	r1, [pc, #36]	; (17a44 <att_timeout+0x28>)
{
   17a20:	b510      	push	{r4, lr}
   17a22:	1ac9      	subs	r1, r1, r3
   17a24:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   17a26:	0189      	lsls	r1, r1, #6
{
   17a28:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   17a2a:	f041 0101 	orr.w	r1, r1, #1
   17a2e:	4806      	ldr	r0, [pc, #24]	; (17a48 <att_timeout+0x2c>)
   17a30:	f006 fda7 	bl	1e582 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   17a34:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   17a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   17a3c:	f7ff bf94 	b.w	17968 <bt_att_disconnected>
   17a40:	0002353c 	.word	0x0002353c
   17a44:	0002354c 	.word	0x0002354c
   17a48:	0002591f 	.word	0x0002591f

00017a4c <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   17a4c:	490a      	ldr	r1, [pc, #40]	; (17a78 <db_hash_store+0x2c>)
   17a4e:	480b      	ldr	r0, [pc, #44]	; (17a7c <db_hash_store+0x30>)
{
   17a50:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   17a52:	2210      	movs	r2, #16
   17a54:	f7f9 ff34 	bl	118c0 <settings_save_one>
	if (err) {
   17a58:	4601      	mov	r1, r0
   17a5a:	b158      	cbz	r0, 17a74 <db_hash_store+0x28>
   17a5c:	4b08      	ldr	r3, [pc, #32]	; (17a80 <db_hash_store+0x34>)
   17a5e:	4a09      	ldr	r2, [pc, #36]	; (17a84 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
   17a60:	4809      	ldr	r0, [pc, #36]	; (17a88 <db_hash_store+0x3c>)
   17a62:	1ad2      	subs	r2, r2, r3
   17a64:	08d2      	lsrs	r2, r2, #3
   17a66:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
   17a68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   17a6c:	f042 0201 	orr.w	r2, r2, #1
   17a70:	f006 bd94 	b.w	1e59c <log_1>
}
   17a74:	bd08      	pop	{r3, pc}
   17a76:	bf00      	nop
   17a78:	200017f0 	.word	0x200017f0
   17a7c:	00025932 	.word	0x00025932
   17a80:	0002353c 	.word	0x0002353c
   17a84:	00023574 	.word	0x00023574
   17a88:	0002593a 	.word	0x0002593a

00017a8c <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   17a8c:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17a8e:	490b      	ldr	r1, [pc, #44]	; (17abc <db_hash_set+0x30>)
{
   17a90:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17a92:	4618      	mov	r0, r3
   17a94:	2210      	movs	r2, #16
   17a96:	47a0      	blx	r4
	if (len < 0) {
   17a98:	1e04      	subs	r4, r0, #0
   17a9a:	da0c      	bge.n	17ab6 <db_hash_set+0x2a>
   17a9c:	4a08      	ldr	r2, [pc, #32]	; (17ac0 <db_hash_set+0x34>)
   17a9e:	4b09      	ldr	r3, [pc, #36]	; (17ac4 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
   17aa0:	4809      	ldr	r0, [pc, #36]	; (17ac8 <db_hash_set+0x3c>)
   17aa2:	1ad2      	subs	r2, r2, r3
   17aa4:	08d2      	lsrs	r2, r2, #3
   17aa6:	0192      	lsls	r2, r2, #6
   17aa8:	f042 0201 	orr.w	r2, r2, #1
   17aac:	4621      	mov	r1, r4
   17aae:	f006 fd75 	bl	1e59c <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   17ab2:	4620      	mov	r0, r4
   17ab4:	bd10      	pop	{r4, pc}
	return 0;
   17ab6:	2400      	movs	r4, #0
   17ab8:	e7fb      	b.n	17ab2 <db_hash_set+0x26>
   17aba:	bf00      	nop
   17abc:	20001800 	.word	0x20001800
   17ac0:	00023574 	.word	0x00023574
   17ac4:	0002353c 	.word	0x0002353c
   17ac8:	00025960 	.word	0x00025960

00017acc <sc_store>:
{
   17acc:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   17ace:	4605      	mov	r5, r0
{
   17ad0:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   17ad2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   17ad6:	4604      	mov	r4, r0
	if (cfg->id) {
   17ad8:	b1fa      	cbz	r2, 17b1a <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   17ada:	ae02      	add	r6, sp, #8
   17adc:	2104      	movs	r1, #4
   17ade:	4630      	mov	r0, r6
   17ae0:	f006 f855 	bl	1db8e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   17ae4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   17ae6:	4a0e      	ldr	r2, [pc, #56]	; (17b20 <sc_store+0x54>)
   17ae8:	462b      	mov	r3, r5
   17aea:	2124      	movs	r1, #36	; 0x24
   17aec:	a803      	add	r0, sp, #12
   17aee:	f7fb fdab 	bl	13648 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   17af2:	f104 0108 	add.w	r1, r4, #8
   17af6:	2204      	movs	r2, #4
   17af8:	a803      	add	r0, sp, #12
   17afa:	f7f9 fee1 	bl	118c0 <settings_save_one>
	if (err) {
   17afe:	4601      	mov	r1, r0
   17b00:	b148      	cbz	r0, 17b16 <sc_store+0x4a>
   17b02:	4a08      	ldr	r2, [pc, #32]	; (17b24 <sc_store+0x58>)
   17b04:	4b08      	ldr	r3, [pc, #32]	; (17b28 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
   17b06:	4809      	ldr	r0, [pc, #36]	; (17b2c <sc_store+0x60>)
   17b08:	1ad2      	subs	r2, r2, r3
   17b0a:	08d2      	lsrs	r2, r2, #3
   17b0c:	0192      	lsls	r2, r2, #6
   17b0e:	f042 0201 	orr.w	r2, r2, #1
   17b12:	f006 fd43 	bl	1e59c <log_1>
}
   17b16:	b00c      	add	sp, #48	; 0x30
   17b18:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   17b1a:	9200      	str	r2, [sp, #0]
   17b1c:	e7e3      	b.n	17ae6 <sc_store+0x1a>
   17b1e:	bf00      	nop
   17b20:	00025bc1 	.word	0x00025bc1
   17b24:	00023574 	.word	0x00023574
   17b28:	0002353c 	.word	0x0002353c
   17b2c:	00025981 	.word	0x00025981

00017b30 <db_hash_commit>:

static int db_hash_commit(void)
{
   17b30:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17b32:	2108      	movs	r1, #8
   17b34:	4804      	ldr	r0, [pc, #16]	; (17b48 <db_hash_commit+0x18>)
   17b36:	f009 fdd2 	bl	216de <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   17b3a:	2200      	movs	r2, #0
   17b3c:	2300      	movs	r3, #0
   17b3e:	4803      	ldr	r0, [pc, #12]	; (17b4c <db_hash_commit+0x1c>)
   17b40:	f005 f9ce 	bl	1cee0 <k_work_reschedule>

	return 0;
}
   17b44:	2000      	movs	r0, #0
   17b46:	bd08      	pop	{r3, pc}
   17b48:	200018b8 	.word	0x200018b8
   17b4c:	20001810 	.word	0x20001810

00017b50 <ccc_save>:
{
   17b50:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17b52:	4b0c      	ldr	r3, [pc, #48]	; (17b84 <ccc_save+0x34>)
{
   17b54:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17b56:	6882      	ldr	r2, [r0, #8]
   17b58:	429a      	cmp	r2, r3
{
   17b5a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   17b5c:	d10f      	bne.n	17b7e <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   17b5e:	7922      	ldrb	r2, [r4, #4]
   17b60:	6821      	ldr	r1, [r4, #0]
   17b62:	68c0      	ldr	r0, [r0, #12]
   17b64:	f009 fe07 	bl	21776 <ccc_find_cfg>
	if (!cfg) {
   17b68:	b148      	cbz	r0, 17b7e <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   17b6a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   17b6e:	8901      	ldrh	r1, [r0, #8]
   17b70:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   17b74:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   17b76:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   17b78:	8151      	strh	r1, [r2, #10]
	save->count++;
   17b7a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   17b7e:	2001      	movs	r0, #1
   17b80:	bd38      	pop	{r3, r4, r5, pc}
   17b82:	bf00      	nop
   17b84:	00017c3d 	.word	0x00017c3d

00017b88 <ccc_load>:
{
   17b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17b8a:	4b21      	ldr	r3, [pc, #132]	; (17c10 <ccc_load+0x88>)
{
   17b8c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17b8e:	6882      	ldr	r2, [r0, #8]
   17b90:	429a      	cmp	r2, r3
   17b92:	d002      	beq.n	17b9a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   17b94:	2001      	movs	r0, #1
}
   17b96:	b002      	add	sp, #8
   17b98:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   17b9a:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   17b9c:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   17b9e:	b94b      	cbnz	r3, 17bb4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   17ba0:	7922      	ldrb	r2, [r4, #4]
   17ba2:	6821      	ldr	r1, [r4, #0]
   17ba4:	4630      	mov	r0, r6
   17ba6:	f009 fde6 	bl	21776 <ccc_find_cfg>
	if (!cfg) {
   17baa:	2800      	cmp	r0, #0
   17bac:	d0f2      	beq.n	17b94 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   17bae:	f009 fda8 	bl	21702 <clear_ccc_cfg>
   17bb2:	e7ef      	b.n	17b94 <ccc_load+0xc>
	} else if (!load->count) {
   17bb4:	68e0      	ldr	r0, [r4, #12]
   17bb6:	2800      	cmp	r0, #0
   17bb8:	d0ed      	beq.n	17b96 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   17bba:	881b      	ldrh	r3, [r3, #0]
   17bbc:	4299      	cmp	r1, r3
   17bbe:	d00a      	beq.n	17bd6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   17bc0:	d9e8      	bls.n	17b94 <ccc_load+0xc>
	load->count--;
   17bc2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   17bc4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   17bc6:	3801      	subs	r0, #1
	load->entry++;
   17bc8:	3304      	adds	r3, #4
	load->count--;
   17bca:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17bcc:	3800      	subs	r0, #0
	load->entry++;
   17bce:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17bd0:	bf18      	it	ne
   17bd2:	2001      	movne	r0, #1
   17bd4:	e7df      	b.n	17b96 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   17bd6:	7922      	ldrb	r2, [r4, #4]
   17bd8:	6821      	ldr	r1, [r4, #0]
   17bda:	4630      	mov	r0, r6
   17bdc:	f009 fdcb 	bl	21776 <ccc_find_cfg>
	if (!cfg) {
   17be0:	4605      	mov	r5, r0
   17be2:	b980      	cbnz	r0, 17c06 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   17be4:	9000      	str	r0, [sp, #0]
   17be6:	4602      	mov	r2, r0
   17be8:	f8cd 0003 	str.w	r0, [sp, #3]
   17bec:	4669      	mov	r1, sp
   17bee:	4630      	mov	r0, r6
   17bf0:	f009 fdc1 	bl	21776 <ccc_find_cfg>
		if (!cfg) {
   17bf4:	4605      	mov	r5, r0
   17bf6:	2800      	cmp	r0, #0
   17bf8:	d0e3      	beq.n	17bc2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   17bfa:	6821      	ldr	r1, [r4, #0]
   17bfc:	3001      	adds	r0, #1
   17bfe:	f009 fd7d 	bl	216fc <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   17c02:	7923      	ldrb	r3, [r4, #4]
   17c04:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   17c06:	68a3      	ldr	r3, [r4, #8]
   17c08:	885b      	ldrh	r3, [r3, #2]
   17c0a:	812b      	strh	r3, [r5, #8]
   17c0c:	e7d9      	b.n	17bc2 <ccc_load+0x3a>
   17c0e:	bf00      	nop
   17c10:	00017c3d 	.word	0x00017c3d

00017c14 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   17c14:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17c16:	6881      	ldr	r1, [r0, #8]
{
   17c18:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17c1a:	4a07      	ldr	r2, [pc, #28]	; (17c38 <remove_peer_from_attr+0x24>)
   17c1c:	4291      	cmp	r1, r2
   17c1e:	d109      	bne.n	17c34 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   17c20:	791a      	ldrb	r2, [r3, #4]
   17c22:	6819      	ldr	r1, [r3, #0]
   17c24:	68c0      	ldr	r0, [r0, #12]
   17c26:	f009 fda6 	bl	21776 <ccc_find_cfg>
	if (cfg) {
   17c2a:	b118      	cbz	r0, 17c34 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   17c2c:	220a      	movs	r2, #10
   17c2e:	2100      	movs	r1, #0
   17c30:	f008 fb2c 	bl	2028c <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   17c34:	2001      	movs	r0, #1
   17c36:	bd08      	pop	{r3, pc}
   17c38:	00017c3d 	.word	0x00017c3d

00017c3c <bt_gatt_attr_write_ccc>:
{
   17c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17c40:	461f      	mov	r7, r3
   17c42:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   17c46:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   17c4a:	4606      	mov	r6, r0
   17c4c:	4688      	mov	r8, r1
	if (offset) {
   17c4e:	2b00      	cmp	r3, #0
   17c50:	d14a      	bne.n	17ce8 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
   17c52:	1e7b      	subs	r3, r7, #1
   17c54:	2b01      	cmp	r3, #1
   17c56:	d84a      	bhi.n	17cee <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
   17c58:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   17c5a:	7815      	ldrb	r5, [r2, #0]
   17c5c:	bf18      	it	ne
   17c5e:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   17c60:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   17c62:	bf0c      	ite	eq
   17c64:	b2ad      	uxtheq	r5, r5
   17c66:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   17c6a:	f009 fd93 	bl	21794 <find_ccc_cfg>
	if (!cfg) {
   17c6e:	4604      	mov	r4, r0
   17c70:	b9e0      	cbnz	r0, 17cac <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
   17c72:	b915      	cbnz	r5, 17c7a <bt_gatt_attr_write_ccc+0x3e>
			return len;
   17c74:	4638      	mov	r0, r7
}
   17c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   17c7a:	4649      	mov	r1, r9
   17c7c:	f009 fd8a 	bl	21794 <find_ccc_cfg>
		if (!cfg) {
   17c80:	4604      	mov	r4, r0
   17c82:	b960      	cbnz	r0, 17c9e <bt_gatt_attr_write_ccc+0x62>
   17c84:	4b1b      	ldr	r3, [pc, #108]	; (17cf4 <bt_gatt_attr_write_ccc+0xb8>)
   17c86:	491c      	ldr	r1, [pc, #112]	; (17cf8 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
   17c88:	481c      	ldr	r0, [pc, #112]	; (17cfc <bt_gatt_attr_write_ccc+0xc0>)
   17c8a:	1ac9      	subs	r1, r1, r3
   17c8c:	08c9      	lsrs	r1, r1, #3
   17c8e:	0189      	lsls	r1, r1, #6
   17c90:	f041 0102 	orr.w	r1, r1, #2
   17c94:	f006 fc75 	bl	1e582 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17c98:	f06f 0010 	mvn.w	r0, #16
   17c9c:	e7eb      	b.n	17c76 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17c9e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   17ca2:	3001      	adds	r0, #1
   17ca4:	f009 fd2a 	bl	216fc <bt_addr_le_copy>
		cfg->id = conn->id;
   17ca8:	7a33      	ldrb	r3, [r6, #8]
   17caa:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17cac:	f8d9 3010 	ldr.w	r3, [r9, #16]
   17cb0:	b973      	cbnz	r3, 17cd0 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
   17cb2:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   17cb6:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   17cb8:	42ab      	cmp	r3, r5
   17cba:	d003      	beq.n	17cc4 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   17cbc:	4649      	mov	r1, r9
   17cbe:	4640      	mov	r0, r8
   17cc0:	f009 fc8e 	bl	215e0 <gatt_ccc_changed>
	if (!value) {
   17cc4:	2d00      	cmp	r5, #0
   17cc6:	d1d5      	bne.n	17c74 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   17cc8:	4620      	mov	r0, r4
   17cca:	f009 fd1a 	bl	21702 <clear_ccc_cfg>
   17cce:	e7d1      	b.n	17c74 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   17cd0:	462a      	mov	r2, r5
   17cd2:	4641      	mov	r1, r8
   17cd4:	4630      	mov	r0, r6
   17cd6:	4798      	blx	r3
		if (write < 0) {
   17cd8:	2800      	cmp	r0, #0
   17cda:	dbcc      	blt.n	17c76 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   17cdc:	1e42      	subs	r2, r0, #1
   17cde:	2a01      	cmp	r2, #1
   17ce0:	d9e7      	bls.n	17cb2 <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   17ce2:	f06f 000d 	mvn.w	r0, #13
   17ce6:	e7c6      	b.n	17c76 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17ce8:	f06f 0006 	mvn.w	r0, #6
   17cec:	e7c3      	b.n	17c76 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17cee:	f06f 000c 	mvn.w	r0, #12
   17cf2:	e7c0      	b.n	17c76 <bt_gatt_attr_write_ccc+0x3a>
   17cf4:	0002353c 	.word	0x0002353c
   17cf8:	00023574 	.word	0x00023574
   17cfc:	0002599d 	.word	0x0002599d

00017d00 <sc_commit>:
{
   17d00:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17d02:	f06f 0102 	mvn.w	r1, #2
   17d06:	4808      	ldr	r0, [pc, #32]	; (17d28 <sc_commit+0x28>)
   17d08:	f009 fd09 	bl	2171e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17d0c:	4806      	ldr	r0, [pc, #24]	; (17d28 <sc_commit+0x28>)
   17d0e:	f009 fc8a 	bl	21626 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17d12:	07c3      	lsls	r3, r0, #31
   17d14:	d505      	bpl.n	17d22 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   17d16:	4805      	ldr	r0, [pc, #20]	; (17d2c <sc_commit+0x2c>)
   17d18:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17d1c:	2300      	movs	r3, #0
   17d1e:	f005 f8df 	bl	1cee0 <k_work_reschedule>
}
   17d22:	2000      	movs	r0, #0
   17d24:	bd08      	pop	{r3, pc}
   17d26:	bf00      	nop
   17d28:	200018b8 	.word	0x200018b8
   17d2c:	20001888 	.word	0x20001888

00017d30 <find_sc_cfg>:
{
   17d30:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   17d32:	4c0e      	ldr	r4, [pc, #56]	; (17d6c <find_sc_cfg+0x3c>)
   17d34:	7823      	ldrb	r3, [r4, #0]
   17d36:	4283      	cmp	r3, r0
{
   17d38:	4605      	mov	r5, r0
   17d3a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   17d3c:	d00a      	beq.n	17d54 <find_sc_cfg+0x24>
   17d3e:	7b23      	ldrb	r3, [r4, #12]
   17d40:	42ab      	cmp	r3, r5
   17d42:	d111      	bne.n	17d68 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   17d44:	480a      	ldr	r0, [pc, #40]	; (17d70 <find_sc_cfg+0x40>)
   17d46:	2207      	movs	r2, #7
   17d48:	4631      	mov	r1, r6
   17d4a:	f008 fa64 	bl	20216 <memcmp>
   17d4e:	b958      	cbnz	r0, 17d68 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17d50:	2001      	movs	r0, #1
   17d52:	e005      	b.n	17d60 <find_sc_cfg+0x30>
   17d54:	2207      	movs	r2, #7
   17d56:	1c60      	adds	r0, r4, #1
   17d58:	f008 fa5d 	bl	20216 <memcmp>
		if (id == sc_cfg[i].id &&
   17d5c:	2800      	cmp	r0, #0
   17d5e:	d1ee      	bne.n	17d3e <find_sc_cfg+0xe>
			return &sc_cfg[i];
   17d60:	230c      	movs	r3, #12
   17d62:	fb03 4000 	mla	r0, r3, r0, r4
   17d66:	e000      	b.n	17d6a <find_sc_cfg+0x3a>
	return NULL;
   17d68:	2000      	movs	r0, #0
}
   17d6a:	bd70      	pop	{r4, r5, r6, pc}
   17d6c:	20002158 	.word	0x20002158
   17d70:	20002165 	.word	0x20002165

00017d74 <sc_save>:
{
   17d74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17d78:	4680      	mov	r8, r0
   17d7a:	460f      	mov	r7, r1
   17d7c:	4616      	mov	r6, r2
   17d7e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17d80:	f7ff ffd6 	bl	17d30 <find_sc_cfg>
	if (!cfg) {
   17d84:	4604      	mov	r4, r0
   17d86:	b9c8      	cbnz	r0, 17dbc <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17d88:	4669      	mov	r1, sp
   17d8a:	9000      	str	r0, [sp, #0]
   17d8c:	f8cd 0003 	str.w	r0, [sp, #3]
   17d90:	f7ff ffce 	bl	17d30 <find_sc_cfg>
		if (!cfg) {
   17d94:	4604      	mov	r4, r0
   17d96:	b960      	cbnz	r0, 17db2 <sc_save+0x3e>
   17d98:	4915      	ldr	r1, [pc, #84]	; (17df0 <sc_save+0x7c>)
   17d9a:	4b16      	ldr	r3, [pc, #88]	; (17df4 <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
   17d9c:	4816      	ldr	r0, [pc, #88]	; (17df8 <sc_save+0x84>)
   17d9e:	1ac9      	subs	r1, r1, r3
   17da0:	08c9      	lsrs	r1, r1, #3
   17da2:	0189      	lsls	r1, r1, #6
   17da4:	f041 0101 	orr.w	r1, r1, #1
   17da8:	f006 fbeb 	bl	1e582 <log_0>
}
   17dac:	b002      	add	sp, #8
   17dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   17db2:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   17db6:	4639      	mov	r1, r7
   17db8:	f009 fca0 	bl	216fc <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   17dbc:	8922      	ldrh	r2, [r4, #8]
   17dbe:	8963      	ldrh	r3, [r4, #10]
   17dc0:	b96a      	cbnz	r2, 17dde <sc_save+0x6a>
   17dc2:	b973      	cbnz	r3, 17de2 <sc_save+0x6e>
		cfg->data.start = start;
   17dc4:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   17dc6:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   17dc8:	4621      	mov	r1, r4
   17dca:	f811 0b01 	ldrb.w	r0, [r1], #1
   17dce:	f008 fc9b 	bl	20708 <bt_addr_le_is_bonded>
   17dd2:	2800      	cmp	r0, #0
   17dd4:	d0ea      	beq.n	17dac <sc_save+0x38>
		sc_store(cfg);
   17dd6:	4620      	mov	r0, r4
   17dd8:	f7ff fe78 	bl	17acc <sc_store>
   17ddc:	e7e6      	b.n	17dac <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   17dde:	4296      	cmp	r6, r2
   17de0:	d302      	bcc.n	17de8 <sc_save+0x74>
   17de2:	429d      	cmp	r5, r3
   17de4:	d8ef      	bhi.n	17dc6 <sc_save+0x52>
   17de6:	e7e1      	b.n	17dac <sc_save+0x38>
	if (*end < new_end) {
   17de8:	429d      	cmp	r5, r3
		*start = new_start;
   17dea:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   17dec:	d9ec      	bls.n	17dc8 <sc_save+0x54>
   17dee:	e7ea      	b.n	17dc6 <sc_save+0x52>
   17df0:	00023574 	.word	0x00023574
   17df4:	0002353c 	.word	0x0002353c
   17df8:	000259b7 	.word	0x000259b7

00017dfc <sc_set>:
{
   17dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17e00:	460e      	mov	r6, r1
   17e02:	b087      	sub	sp, #28
   17e04:	4690      	mov	r8, r2
   17e06:	4699      	mov	r9, r3
	if (!name) {
   17e08:	4607      	mov	r7, r0
   17e0a:	b978      	cbnz	r0, 17e2c <sc_set+0x30>
   17e0c:	4937      	ldr	r1, [pc, #220]	; (17eec <sc_set+0xf0>)
   17e0e:	4b38      	ldr	r3, [pc, #224]	; (17ef0 <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
   17e10:	4838      	ldr	r0, [pc, #224]	; (17ef4 <sc_set+0xf8>)
   17e12:	1ac9      	subs	r1, r1, r3
   17e14:	08c9      	lsrs	r1, r1, #3
   17e16:	0189      	lsls	r1, r1, #6
   17e18:	f041 0101 	orr.w	r1, r1, #1
   17e1c:	f006 fbb1 	bl	1e582 <log_0>
		return -EINVAL;
   17e20:	f06f 0515 	mvn.w	r5, #21
}
   17e24:	4628      	mov	r0, r5
   17e26:	b007      	add	sp, #28
   17e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   17e2c:	a902      	add	r1, sp, #8
   17e2e:	f008 fae2 	bl	203f6 <bt_settings_decode_key>
	if (err) {
   17e32:	4605      	mov	r5, r0
   17e34:	b178      	cbz	r0, 17e56 <sc_set+0x5a>
   17e36:	4a2e      	ldr	r2, [pc, #184]	; (17ef0 <sc_set+0xf4>)
   17e38:	4c2c      	ldr	r4, [pc, #176]	; (17eec <sc_set+0xf0>)
   17e3a:	4638      	mov	r0, r7
   17e3c:	1aa4      	subs	r4, r4, r2
   17e3e:	08e4      	lsrs	r4, r4, #3
   17e40:	f7f8 feba 	bl	10bb8 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   17e44:	01a4      	lsls	r4, r4, #6
   17e46:	f044 0401 	orr.w	r4, r4, #1
   17e4a:	4601      	mov	r1, r0
   17e4c:	4622      	mov	r2, r4
   17e4e:	482a      	ldr	r0, [pc, #168]	; (17ef8 <sc_set+0xfc>)
   17e50:	f006 fba4 	bl	1e59c <log_1>
   17e54:	e7e4      	b.n	17e20 <sc_set+0x24>
	settings_name_next(name, &next);
   17e56:	a901      	add	r1, sp, #4
   17e58:	4638      	mov	r0, r7
   17e5a:	f006 fee8 	bl	1ec2e <settings_name_next>
	if (!next) {
   17e5e:	9801      	ldr	r0, [sp, #4]
   17e60:	b308      	cbz	r0, 17ea6 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
   17e62:	220a      	movs	r2, #10
   17e64:	4629      	mov	r1, r5
   17e66:	f008 f918 	bl	2009a <strtol>
   17e6a:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   17e6c:	a902      	add	r1, sp, #8
   17e6e:	4638      	mov	r0, r7
   17e70:	f7ff ff5e 	bl	17d30 <find_sc_cfg>
	if (!cfg && len_rd) {
   17e74:	4604      	mov	r4, r0
   17e76:	bb88      	cbnz	r0, 17edc <sc_set+0xe0>
   17e78:	2e00      	cmp	r6, #0
   17e7a:	d0d3      	beq.n	17e24 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17e7c:	a904      	add	r1, sp, #16
   17e7e:	9004      	str	r0, [sp, #16]
   17e80:	f8cd 0013 	str.w	r0, [sp, #19]
   17e84:	f7ff ff54 	bl	17d30 <find_sc_cfg>
		if (!cfg) {
   17e88:	4604      	mov	r4, r0
   17e8a:	b970      	cbnz	r0, 17eaa <sc_set+0xae>
   17e8c:	4b18      	ldr	r3, [pc, #96]	; (17ef0 <sc_set+0xf4>)
   17e8e:	4917      	ldr	r1, [pc, #92]	; (17eec <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
   17e90:	481a      	ldr	r0, [pc, #104]	; (17efc <sc_set+0x100>)
   17e92:	1ac9      	subs	r1, r1, r3
   17e94:	08c9      	lsrs	r1, r1, #3
   17e96:	0189      	lsls	r1, r1, #6
   17e98:	f041 0101 	orr.w	r1, r1, #1
   17e9c:	f006 fb71 	bl	1e582 <log_0>
			return -ENOMEM;
   17ea0:	f06f 050b 	mvn.w	r5, #11
   17ea4:	e7be      	b.n	17e24 <sc_set+0x28>
		id = BT_ID_DEFAULT;
   17ea6:	462f      	mov	r7, r5
   17ea8:	e7e0      	b.n	17e6c <sc_set+0x70>
		cfg->id = id;
   17eaa:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   17eae:	a902      	add	r1, sp, #8
   17eb0:	f009 fc24 	bl	216fc <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   17eb4:	f104 0108 	add.w	r1, r4, #8
   17eb8:	2204      	movs	r2, #4
   17eba:	4648      	mov	r0, r9
   17ebc:	47c0      	blx	r8
		if (len < 0) {
   17ebe:	1e04      	subs	r4, r0, #0
   17ec0:	dab0      	bge.n	17e24 <sc_set+0x28>
   17ec2:	4b0b      	ldr	r3, [pc, #44]	; (17ef0 <sc_set+0xf4>)
   17ec4:	4a09      	ldr	r2, [pc, #36]	; (17eec <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
   17ec6:	480e      	ldr	r0, [pc, #56]	; (17f00 <sc_set+0x104>)
   17ec8:	1ad2      	subs	r2, r2, r3
   17eca:	08d2      	lsrs	r2, r2, #3
   17ecc:	0192      	lsls	r2, r2, #6
   17ece:	f042 0201 	orr.w	r2, r2, #1
   17ed2:	4621      	mov	r1, r4
   17ed4:	f006 fb62 	bl	1e59c <log_1>
			return len;
   17ed8:	4625      	mov	r5, r4
   17eda:	e7a3      	b.n	17e24 <sc_set+0x28>
	if (len_rd) {
   17edc:	2e00      	cmp	r6, #0
   17ede:	d1e9      	bne.n	17eb4 <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
   17ee0:	220c      	movs	r2, #12
   17ee2:	4631      	mov	r1, r6
   17ee4:	f008 f9d2 	bl	2028c <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   17ee8:	e79c      	b.n	17e24 <sc_set+0x28>
   17eea:	bf00      	nop
   17eec:	00023574 	.word	0x00023574
   17ef0:	0002353c 	.word	0x0002353c
   17ef4:	00024864 	.word	0x00024864
   17ef8:	000259d6 	.word	0x000259d6
   17efc:	000259f2 	.word	0x000259f2
   17f00:	00025960 	.word	0x00025960

00017f04 <find_cf_cfg_by_addr>:
{
   17f04:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   17f06:	4c0e      	ldr	r4, [pc, #56]	; (17f40 <find_cf_cfg_by_addr+0x3c>)
   17f08:	7823      	ldrb	r3, [r4, #0]
   17f0a:	4283      	cmp	r3, r0
{
   17f0c:	4606      	mov	r6, r0
   17f0e:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   17f10:	d00a      	beq.n	17f28 <find_cf_cfg_by_addr+0x24>
   17f12:	7c23      	ldrb	r3, [r4, #16]
   17f14:	42b3      	cmp	r3, r6
   17f16:	d111      	bne.n	17f3c <find_cf_cfg_by_addr+0x38>
   17f18:	490a      	ldr	r1, [pc, #40]	; (17f44 <find_cf_cfg_by_addr+0x40>)
   17f1a:	2207      	movs	r2, #7
   17f1c:	4628      	mov	r0, r5
   17f1e:	f008 f97a 	bl	20216 <memcmp>
   17f22:	b958      	cbnz	r0, 17f3c <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17f24:	2001      	movs	r0, #1
   17f26:	e006      	b.n	17f36 <find_cf_cfg_by_addr+0x32>
   17f28:	2207      	movs	r2, #7
   17f2a:	1c61      	adds	r1, r4, #1
   17f2c:	4628      	mov	r0, r5
   17f2e:	f008 f972 	bl	20216 <memcmp>
			if (id == cf_cfg[i].id &&
   17f32:	2800      	cmp	r0, #0
   17f34:	d1ed      	bne.n	17f12 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   17f36:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   17f3a:	e000      	b.n	17f3e <find_cf_cfg_by_addr+0x3a>
	return NULL;
   17f3c:	2000      	movs	r0, #0
}
   17f3e:	bd70      	pop	{r4, r5, r6, pc}
   17f40:	20001f40 	.word	0x20001f40
   17f44:	20001f51 	.word	0x20001f51

00017f48 <find_cf_cfg>:
{
   17f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17f4a:	4c16      	ldr	r4, [pc, #88]	; (17fa4 <find_cf_cfg+0x5c>)
		if (!conn) {
   17f4c:	4605      	mov	r5, r0
   17f4e:	b140      	cbz	r0, 17f62 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17f50:	4622      	mov	r2, r4
   17f52:	f812 1b01 	ldrb.w	r1, [r2], #1
   17f56:	f008 fe25 	bl	20ba4 <bt_conn_is_peer_addr_le>
   17f5a:	b1c0      	cbz	r0, 17f8e <find_cf_cfg+0x46>
}
   17f5c:	4620      	mov	r0, r4
   17f5e:	b003      	add	sp, #12
   17f60:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17f62:	9000      	str	r0, [sp, #0]
   17f64:	2207      	movs	r2, #7
   17f66:	f8cd 0003 	str.w	r0, [sp, #3]
   17f6a:	4669      	mov	r1, sp
   17f6c:	1c60      	adds	r0, r4, #1
   17f6e:	f008 f952 	bl	20216 <memcmp>
   17f72:	2800      	cmp	r0, #0
   17f74:	d0f2      	beq.n	17f5c <find_cf_cfg+0x14>
   17f76:	2207      	movs	r2, #7
   17f78:	4669      	mov	r1, sp
   17f7a:	f104 0011 	add.w	r0, r4, #17
   17f7e:	9500      	str	r5, [sp, #0]
   17f80:	f8cd 5003 	str.w	r5, [sp, #3]
   17f84:	f008 f947 	bl	20216 <memcmp>
   17f88:	b948      	cbnz	r0, 17f9e <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17f8a:	3410      	adds	r4, #16
   17f8c:	e7e6      	b.n	17f5c <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17f8e:	7c21      	ldrb	r1, [r4, #16]
   17f90:	f104 0211 	add.w	r2, r4, #17
   17f94:	4628      	mov	r0, r5
   17f96:	f008 fe05 	bl	20ba4 <bt_conn_is_peer_addr_le>
   17f9a:	2800      	cmp	r0, #0
   17f9c:	d1f5      	bne.n	17f8a <find_cf_cfg+0x42>
	return NULL;
   17f9e:	2400      	movs	r4, #0
   17fa0:	e7dc      	b.n	17f5c <find_cf_cfg+0x14>
   17fa2:	bf00      	nop
   17fa4:	20001f40 	.word	0x20001f40

00017fa8 <cf_write>:
{
   17fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fac:	4698      	mov	r8, r3
   17fae:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   17fb2:	2b01      	cmp	r3, #1
{
   17fb4:	4606      	mov	r6, r0
   17fb6:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   17fb8:	d83d      	bhi.n	18036 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   17fba:	4443      	add	r3, r8
   17fbc:	2b01      	cmp	r3, #1
   17fbe:	4645      	mov	r5, r8
   17fc0:	dc3c      	bgt.n	1803c <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   17fc2:	f7ff ffc1 	bl	17f48 <find_cf_cfg>
	if (!cfg) {
   17fc6:	4604      	mov	r4, r0
   17fc8:	b990      	cbnz	r0, 17ff0 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   17fca:	f7ff ffbd 	bl	17f48 <find_cf_cfg>
	if (!cfg) {
   17fce:	4604      	mov	r4, r0
   17fd0:	b970      	cbnz	r0, 17ff0 <cf_write+0x48>
   17fd2:	4b1d      	ldr	r3, [pc, #116]	; (18048 <cf_write+0xa0>)
   17fd4:	491d      	ldr	r1, [pc, #116]	; (1804c <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   17fd6:	481e      	ldr	r0, [pc, #120]	; (18050 <cf_write+0xa8>)
   17fd8:	1ac9      	subs	r1, r1, r3
   17fda:	08c9      	lsrs	r1, r1, #3
   17fdc:	0189      	lsls	r1, r1, #6
   17fde:	f041 0102 	orr.w	r1, r1, #2
   17fe2:	f006 face 	bl	1e582 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17fe6:	f06f 0510 	mvn.w	r5, #16
}
   17fea:	4628      	mov	r0, r5
   17fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   17ff0:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17ff2:	f1b8 0f00 	cmp.w	r8, #0
   17ff6:	d10c      	bne.n	18012 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17ff8:	f106 0188 	add.w	r1, r6, #136	; 0x88
   17ffc:	1c60      	adds	r0, r4, #1
   17ffe:	f009 fb7d 	bl	216fc <bt_addr_le_copy>
	cfg->id = conn->id;
   18002:	4620      	mov	r0, r4
   18004:	7a33      	ldrb	r3, [r6, #8]
   18006:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1800a:	2101      	movs	r1, #1
   1800c:	f009 fb67 	bl	216de <atomic_or>
}
   18010:	e7eb      	b.n	17fea <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18012:	7a20      	ldrb	r0, [r4, #8]
   18014:	fa20 f301 	lsr.w	r3, r0, r1
   18018:	07da      	lsls	r2, r3, #31
   1801a:	d503      	bpl.n	18024 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   1801c:	783b      	ldrb	r3, [r7, #0]
   1801e:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18020:	07db      	lsls	r3, r3, #31
   18022:	d50e      	bpl.n	18042 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18024:	3101      	adds	r1, #1
   18026:	2903      	cmp	r1, #3
   18028:	d1e3      	bne.n	17ff2 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1802a:	783b      	ldrb	r3, [r7, #0]
   1802c:	f003 0307 	and.w	r3, r3, #7
   18030:	4318      	orrs	r0, r3
   18032:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   18034:	e7e0      	b.n	17ff8 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18036:	f06f 0506 	mvn.w	r5, #6
   1803a:	e7d6      	b.n	17fea <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1803c:	f06f 050c 	mvn.w	r5, #12
   18040:	e7d3      	b.n	17fea <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   18042:	f06f 0512 	mvn.w	r5, #18
   18046:	e7d0      	b.n	17fea <cf_write+0x42>
   18048:	0002353c 	.word	0x0002353c
   1804c:	00023574 	.word	0x00023574
   18050:	00025a14 	.word	0x00025a14

00018054 <cf_set>:
{
   18054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18058:	4689      	mov	r9, r1
   1805a:	b085      	sub	sp, #20
   1805c:	4617      	mov	r7, r2
   1805e:	4698      	mov	r8, r3
	if (!name) {
   18060:	4605      	mov	r5, r0
   18062:	b978      	cbnz	r0, 18084 <cf_set+0x30>
   18064:	4934      	ldr	r1, [pc, #208]	; (18138 <cf_set+0xe4>)
   18066:	4b35      	ldr	r3, [pc, #212]	; (1813c <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
   18068:	4835      	ldr	r0, [pc, #212]	; (18140 <cf_set+0xec>)
   1806a:	1ac9      	subs	r1, r1, r3
   1806c:	08c9      	lsrs	r1, r1, #3
   1806e:	0189      	lsls	r1, r1, #6
   18070:	f041 0101 	orr.w	r1, r1, #1
   18074:	f006 fa85 	bl	1e582 <log_0>
		return -EINVAL;
   18078:	f06f 0415 	mvn.w	r4, #21
}
   1807c:	4620      	mov	r0, r4
   1807e:	b005      	add	sp, #20
   18080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   18084:	a902      	add	r1, sp, #8
   18086:	f008 f9b6 	bl	203f6 <bt_settings_decode_key>
	if (err) {
   1808a:	4604      	mov	r4, r0
   1808c:	b178      	cbz	r0, 180ae <cf_set+0x5a>
   1808e:	4a2b      	ldr	r2, [pc, #172]	; (1813c <cf_set+0xe8>)
   18090:	4c29      	ldr	r4, [pc, #164]	; (18138 <cf_set+0xe4>)
   18092:	4628      	mov	r0, r5
   18094:	1aa4      	subs	r4, r4, r2
   18096:	08e4      	lsrs	r4, r4, #3
   18098:	f7f8 fd8e 	bl	10bb8 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1809c:	01a4      	lsls	r4, r4, #6
   1809e:	f044 0401 	orr.w	r4, r4, #1
   180a2:	4601      	mov	r1, r0
   180a4:	4622      	mov	r2, r4
   180a6:	4827      	ldr	r0, [pc, #156]	; (18144 <cf_set+0xf0>)
   180a8:	f006 fa78 	bl	1e59c <log_1>
   180ac:	e7e4      	b.n	18078 <cf_set+0x24>
	settings_name_next(name, &next);
   180ae:	a901      	add	r1, sp, #4
   180b0:	4628      	mov	r0, r5
   180b2:	f006 fdbc 	bl	1ec2e <settings_name_next>
	if (!next) {
   180b6:	9801      	ldr	r0, [sp, #4]
   180b8:	b1d8      	cbz	r0, 180f2 <cf_set+0x9e>
		id = strtol(next, NULL, 10);
   180ba:	220a      	movs	r2, #10
   180bc:	4621      	mov	r1, r4
   180be:	f007 ffec 	bl	2009a <strtol>
   180c2:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   180c4:	a902      	add	r1, sp, #8
   180c6:	4630      	mov	r0, r6
   180c8:	f7ff ff1c 	bl	17f04 <find_cf_cfg_by_addr>
	if (!cfg) {
   180cc:	4605      	mov	r5, r0
   180ce:	b9b8      	cbnz	r0, 18100 <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
   180d0:	f7ff ff3a 	bl	17f48 <find_cf_cfg>
		if (!cfg) {
   180d4:	4605      	mov	r5, r0
   180d6:	b970      	cbnz	r0, 180f6 <cf_set+0xa2>
   180d8:	4b18      	ldr	r3, [pc, #96]	; (1813c <cf_set+0xe8>)
   180da:	4917      	ldr	r1, [pc, #92]	; (18138 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
   180dc:	481a      	ldr	r0, [pc, #104]	; (18148 <cf_set+0xf4>)
   180de:	1ac9      	subs	r1, r1, r3
   180e0:	08c9      	lsrs	r1, r1, #3
   180e2:	0189      	lsls	r1, r1, #6
   180e4:	f041 0101 	orr.w	r1, r1, #1
   180e8:	f006 fa4b 	bl	1e582 <log_0>
			return -ENOMEM;
   180ec:	f06f 040b 	mvn.w	r4, #11
   180f0:	e7c4      	b.n	1807c <cf_set+0x28>
		id = BT_ID_DEFAULT;
   180f2:	4626      	mov	r6, r4
   180f4:	e7e6      	b.n	180c4 <cf_set+0x70>
		cfg->id = id;
   180f6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   180fa:	a902      	add	r1, sp, #8
   180fc:	f009 fafe 	bl	216fc <bt_addr_le_copy>
	if (len_rd) {
   18100:	f1b9 0f00 	cmp.w	r9, #0
   18104:	d013      	beq.n	1812e <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   18106:	f105 0108 	add.w	r1, r5, #8
   1810a:	2201      	movs	r2, #1
   1810c:	4640      	mov	r0, r8
   1810e:	47b8      	blx	r7
		if (len < 0) {
   18110:	1e05      	subs	r5, r0, #0
   18112:	dab3      	bge.n	1807c <cf_set+0x28>
   18114:	4b09      	ldr	r3, [pc, #36]	; (1813c <cf_set+0xe8>)
   18116:	4a08      	ldr	r2, [pc, #32]	; (18138 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
   18118:	480c      	ldr	r0, [pc, #48]	; (1814c <cf_set+0xf8>)
   1811a:	1ad2      	subs	r2, r2, r3
   1811c:	08d2      	lsrs	r2, r2, #3
   1811e:	0192      	lsls	r2, r2, #6
   18120:	f042 0201 	orr.w	r2, r2, #1
   18124:	4629      	mov	r1, r5
   18126:	f006 fa39 	bl	1e59c <log_1>
			return len;
   1812a:	462c      	mov	r4, r5
   1812c:	e7a6      	b.n	1807c <cf_set+0x28>
		clear_cf_cfg(cfg);
   1812e:	4628      	mov	r0, r5
   18130:	f009 fb04 	bl	2173c <clear_cf_cfg>
   18134:	e7a2      	b.n	1807c <cf_set+0x28>
   18136:	bf00      	nop
   18138:	00023574 	.word	0x00023574
   1813c:	0002353c 	.word	0x0002353c
   18140:	00024864 	.word	0x00024864
   18144:	000259d6 	.word	0x000259d6
   18148:	00025a40 	.word	0x00025a40
   1814c:	00025960 	.word	0x00025960

00018150 <read_ppcp>:
{
   18150:	b513      	push	{r0, r1, r4, lr}
   18152:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   18156:	4c0b      	ldr	r4, [pc, #44]	; (18184 <read_ppcp+0x34>)
{
   18158:	4610      	mov	r0, r2
	if (offset > value_len) {
   1815a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1815c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   18160:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   18164:	d80b      	bhi.n	1817e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   18166:	f1c1 0408 	rsb	r4, r1, #8
   1816a:	429c      	cmp	r4, r3
   1816c:	bfa8      	it	ge
   1816e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   18170:	4622      	mov	r2, r4
   18172:	4469      	add	r1, sp
   18174:	f008 f85f 	bl	20236 <memcpy>
}
   18178:	4620      	mov	r0, r4
   1817a:	b002      	add	sp, #8
   1817c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1817e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   18182:	e7f9      	b.n	18178 <read_ppcp+0x28>
   18184:	00280018 	.word	0x00280018

00018188 <sc_indicate_rsp>:
{
   18188:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1818a:	f06f 0102 	mvn.w	r1, #2
   1818e:	4604      	mov	r4, r0
   18190:	480d      	ldr	r0, [pc, #52]	; (181c8 <sc_indicate_rsp+0x40>)
   18192:	f009 fac4 	bl	2171e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18196:	480c      	ldr	r0, [pc, #48]	; (181c8 <sc_indicate_rsp+0x40>)
   18198:	f009 fa45 	bl	21626 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1819c:	07c2      	lsls	r2, r0, #31
   1819e:	d504      	bpl.n	181aa <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   181a0:	480a      	ldr	r0, [pc, #40]	; (181cc <sc_indicate_rsp+0x44>)
   181a2:	2200      	movs	r2, #0
   181a4:	2300      	movs	r3, #0
   181a6:	f004 fe9b 	bl	1cee0 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   181aa:	4620      	mov	r0, r4
   181ac:	f7ff fecc 	bl	17f48 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   181b0:	b140      	cbz	r0, 181c4 <sc_indicate_rsp+0x3c>
   181b2:	7a03      	ldrb	r3, [r0, #8]
   181b4:	07db      	lsls	r3, r3, #31
   181b6:	d505      	bpl.n	181c4 <sc_indicate_rsp+0x3c>
}
   181b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   181bc:	2101      	movs	r1, #1
   181be:	300c      	adds	r0, #12
   181c0:	f009 ba8d 	b.w	216de <atomic_or>
   181c4:	bd10      	pop	{r4, pc}
   181c6:	bf00      	nop
   181c8:	200018b8 	.word	0x200018b8
   181cc:	20001888 	.word	0x20001888

000181d0 <bt_gatt_clear_sc>:
{
   181d0:	b570      	push	{r4, r5, r6, lr}
   181d2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   181d4:	f7ff fdac 	bl	17d30 <find_sc_cfg>
	if (!cfg) {
   181d8:	4604      	mov	r4, r0
   181da:	b318      	cbz	r0, 18224 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
   181dc:	4605      	mov	r5, r0
   181de:	f815 2b01 	ldrb.w	r2, [r5], #1
   181e2:	b312      	cbz	r2, 1822a <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   181e4:	ae02      	add	r6, sp, #8
   181e6:	2104      	movs	r1, #4
   181e8:	4630      	mov	r0, r6
   181ea:	f005 fcd0 	bl	1db8e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   181ee:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   181f0:	2124      	movs	r1, #36	; 0x24
   181f2:	4a0f      	ldr	r2, [pc, #60]	; (18230 <bt_gatt_clear_sc+0x60>)
   181f4:	462b      	mov	r3, r5
   181f6:	a803      	add	r0, sp, #12
   181f8:	f7fb fa26 	bl	13648 <bt_settings_encode_key>
		err = settings_delete(key);
   181fc:	a803      	add	r0, sp, #12
   181fe:	f006 fcef 	bl	1ebe0 <settings_delete>
		if (err) {
   18202:	4601      	mov	r1, r0
   18204:	b148      	cbz	r0, 1821a <bt_gatt_clear_sc+0x4a>
   18206:	4a0b      	ldr	r2, [pc, #44]	; (18234 <bt_gatt_clear_sc+0x64>)
   18208:	4b0b      	ldr	r3, [pc, #44]	; (18238 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
   1820a:	480c      	ldr	r0, [pc, #48]	; (1823c <bt_gatt_clear_sc+0x6c>)
   1820c:	1ad2      	subs	r2, r2, r3
   1820e:	08d2      	lsrs	r2, r2, #3
   18210:	0192      	lsls	r2, r2, #6
   18212:	f042 0201 	orr.w	r2, r2, #1
   18216:	f006 f9c1 	bl	1e59c <log_1>
	memset(cfg, 0, sizeof(*cfg));
   1821a:	220c      	movs	r2, #12
   1821c:	2100      	movs	r1, #0
   1821e:	4620      	mov	r0, r4
   18220:	f008 f834 	bl	2028c <memset>
}
   18224:	2000      	movs	r0, #0
   18226:	b00c      	add	sp, #48	; 0x30
   18228:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1822a:	9200      	str	r2, [sp, #0]
   1822c:	e7e0      	b.n	181f0 <bt_gatt_clear_sc+0x20>
   1822e:	bf00      	nop
   18230:	00025bc1 	.word	0x00025bc1
   18234:	00023574 	.word	0x00023574
   18238:	0002353c 	.word	0x0002353c
   1823c:	00025a62 	.word	0x00025a62

00018240 <sc_clear>:
{
   18240:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18242:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   18246:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18248:	4631      	mov	r1, r6
   1824a:	7a00      	ldrb	r0, [r0, #8]
   1824c:	f008 fa5c 	bl	20708 <bt_addr_le_is_bonded>
   18250:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   18252:	4631      	mov	r1, r6
   18254:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18256:	b17d      	cbz	r5, 18278 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   18258:	f7ff ffba 	bl	181d0 <bt_gatt_clear_sc>
		if (err) {
   1825c:	4601      	mov	r1, r0
   1825e:	b1a0      	cbz	r0, 1828a <sc_clear+0x4a>
   18260:	4a0a      	ldr	r2, [pc, #40]	; (1828c <sc_clear+0x4c>)
   18262:	4b0b      	ldr	r3, [pc, #44]	; (18290 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
   18264:	480b      	ldr	r0, [pc, #44]	; (18294 <sc_clear+0x54>)
   18266:	1ad2      	subs	r2, r2, r3
   18268:	08d2      	lsrs	r2, r2, #3
   1826a:	0192      	lsls	r2, r2, #6
}
   1826c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   18270:	f042 0201 	orr.w	r2, r2, #1
   18274:	f006 b992 	b.w	1e59c <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18278:	f7ff fd5a 	bl	17d30 <find_sc_cfg>
		if (cfg) {
   1827c:	b128      	cbz	r0, 1828a <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
   1827e:	4629      	mov	r1, r5
   18280:	220c      	movs	r2, #12
}
   18282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   18286:	f008 b801 	b.w	2028c <memset>
}
   1828a:	bd70      	pop	{r4, r5, r6, pc}
   1828c:	00023574 	.word	0x00023574
   18290:	0002353c 	.word	0x0002353c
   18294:	00025a7f 	.word	0x00025a7f

00018298 <disconnected_cb>:
{
   18298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1829c:	4b1f      	ldr	r3, [pc, #124]	; (1831c <disconnected_cb+0x84>)
{
   1829e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   182a0:	6882      	ldr	r2, [r0, #8]
   182a2:	429a      	cmp	r2, r3
{
   182a4:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   182a6:	d102      	bne.n	182ae <disconnected_cb+0x16>
	ccc = attr->user_data;
   182a8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   182aa:	8963      	ldrh	r3, [r4, #10]
   182ac:	b9c3      	cbnz	r3, 182e0 <disconnected_cb+0x48>
}
   182ae:	2001      	movs	r0, #1
   182b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   182b4:	f105 0888 	add.w	r8, r5, #136	; 0x88
   182b8:	7a28      	ldrb	r0, [r5, #8]
   182ba:	4641      	mov	r1, r8
   182bc:	f008 fa24 	bl	20708 <bt_addr_le_is_bonded>
   182c0:	b948      	cbnz	r0, 182d6 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   182c2:	4b17      	ldr	r3, [pc, #92]	; (18320 <disconnected_cb+0x88>)
   182c4:	429c      	cmp	r4, r3
   182c6:	d102      	bne.n	182ce <disconnected_cb+0x36>
					sc_clear(conn);
   182c8:	4628      	mov	r0, r5
   182ca:	f7ff ffb9 	bl	18240 <sc_clear>
				clear_ccc_cfg(cfg);
   182ce:	4620      	mov	r0, r4
   182d0:	f009 fa17 	bl	21702 <clear_ccc_cfg>
	if (!value_used) {
   182d4:	e019      	b.n	1830a <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   182d6:	4641      	mov	r1, r8
   182d8:	4638      	mov	r0, r7
   182da:	f009 fa0f 	bl	216fc <bt_addr_le_copy>
	if (!value_used) {
   182de:	e014      	b.n	1830a <disconnected_cb+0x72>
		if (!cfg->value) {
   182e0:	8923      	ldrh	r3, [r4, #8]
   182e2:	b193      	cbz	r3, 1830a <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   182e4:	4627      	mov	r7, r4
   182e6:	4628      	mov	r0, r5
   182e8:	f817 1b01 	ldrb.w	r1, [r7], #1
   182ec:	463a      	mov	r2, r7
   182ee:	f008 fc59 	bl	20ba4 <bt_conn_is_peer_addr_le>
   182f2:	2800      	cmp	r0, #0
   182f4:	d1de      	bne.n	182b4 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   182f6:	7820      	ldrb	r0, [r4, #0]
   182f8:	4639      	mov	r1, r7
   182fa:	f7fe f85d 	bl	163b8 <bt_conn_lookup_addr_le>
			if (tmp) {
   182fe:	b120      	cbz	r0, 1830a <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   18300:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   18302:	f008 fc8a 	bl	20c1a <bt_conn_unref>
	if (!value_used) {
   18306:	2d07      	cmp	r5, #7
   18308:	d0d1      	beq.n	182ae <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1830a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1830c:	2100      	movs	r1, #0
   1830e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   18310:	2b00      	cmp	r3, #0
   18312:	d0cc      	beq.n	182ae <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   18314:	4630      	mov	r0, r6
   18316:	4798      	blx	r3
   18318:	e7c9      	b.n	182ae <disconnected_cb+0x16>
   1831a:	bf00      	nop
   1831c:	00017c3d 	.word	0x00017c3d
   18320:	20000540 	.word	0x20000540

00018324 <bt_gatt_init>:
{
   18324:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18326:	4b20      	ldr	r3, [pc, #128]	; (183a8 <bt_gatt_init+0x84>)
   18328:	f3bf 8f5b 	dmb	ish
   1832c:	2201      	movs	r2, #1
   1832e:	e853 1f00 	ldrex	r1, [r3]
   18332:	2900      	cmp	r1, #0
   18334:	d103      	bne.n	1833e <bt_gatt_init+0x1a>
   18336:	e843 2000 	strex	r0, r2, [r3]
   1833a:	2800      	cmp	r0, #0
   1833c:	d1f7      	bne.n	1832e <bt_gatt_init+0xa>
   1833e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   18342:	d130      	bne.n	183a6 <bt_gatt_init+0x82>
   18344:	f3bf 8f5b 	dmb	ish
   18348:	4b18      	ldr	r3, [pc, #96]	; (183ac <bt_gatt_init+0x88>)
   1834a:	e853 1f00 	ldrex	r1, [r3]
   1834e:	2900      	cmp	r1, #0
   18350:	d103      	bne.n	1835a <bt_gatt_init+0x36>
   18352:	e843 2000 	strex	r0, r2, [r3]
   18356:	2800      	cmp	r0, #0
   18358:	d1f7      	bne.n	1834a <bt_gatt_init+0x26>
   1835a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1835e:	d108      	bne.n	18372 <bt_gatt_init+0x4e>
   18360:	4a13      	ldr	r2, [pc, #76]	; (183b0 <bt_gatt_init+0x8c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   18362:	4914      	ldr	r1, [pc, #80]	; (183b4 <bt_gatt_init+0x90>)
   18364:	8813      	ldrh	r3, [r2, #0]
   18366:	4c14      	ldr	r4, [pc, #80]	; (183b8 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   18368:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1836a:	42a1      	cmp	r1, r4
   1836c:	d315      	bcc.n	1839a <bt_gatt_init+0x76>
   1836e:	b100      	cbz	r0, 18372 <bt_gatt_init+0x4e>
   18370:	8013      	strh	r3, [r2, #0]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   18372:	4912      	ldr	r1, [pc, #72]	; (183bc <bt_gatt_init+0x98>)
   18374:	4812      	ldr	r0, [pc, #72]	; (183c0 <bt_gatt_init+0x9c>)
   18376:	f00a fc32 	bl	22bde <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1837a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1837e:	2300      	movs	r3, #0
   18380:	480f      	ldr	r0, [pc, #60]	; (183c0 <bt_gatt_init+0x9c>)
   18382:	f004 fd79 	bl	1ce78 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   18386:	490f      	ldr	r1, [pc, #60]	; (183c4 <bt_gatt_init+0xa0>)
   18388:	480f      	ldr	r0, [pc, #60]	; (183c8 <bt_gatt_init+0xa4>)
   1838a:	f00a fc28 	bl	22bde <k_work_init_delayable>
}
   1838e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18392:	480e      	ldr	r0, [pc, #56]	; (183cc <bt_gatt_init+0xa8>)
   18394:	2102      	movs	r1, #2
   18396:	f009 b9a2 	b.w	216de <atomic_or>
		last_static_handle += svc->attr_count;
   1839a:	6848      	ldr	r0, [r1, #4]
   1839c:	4403      	add	r3, r0
   1839e:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   183a0:	3108      	adds	r1, #8
   183a2:	2001      	movs	r0, #1
   183a4:	e7e1      	b.n	1836a <bt_gatt_init+0x46>
}
   183a6:	bd10      	pop	{r4, pc}
   183a8:	20001f60 	.word	0x20001f60
   183ac:	20001f7c 	.word	0x20001f7c
   183b0:	20002156 	.word	0x20002156
   183b4:	0002349c 	.word	0x0002349c
   183b8:	000234c4 	.word	0x000234c4
   183bc:	00018589 	.word	0x00018589
   183c0:	20001810 	.word	0x20001810
   183c4:	00018919 	.word	0x00018919
   183c8:	20001888 	.word	0x20001888
   183cc:	200018b8 	.word	0x200018b8

000183d0 <bt_gatt_attr_get_handle>:
{
   183d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   183d4:	4603      	mov	r3, r0
   183d6:	b148      	cbz	r0, 183ec <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   183d8:	8a00      	ldrh	r0, [r0, #16]
   183da:	b938      	cbnz	r0, 183ec <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   183dc:	4912      	ldr	r1, [pc, #72]	; (18428 <bt_gatt_attr_get_handle+0x58>)
   183de:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1842c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   183e2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   183e4:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   183e8:	4571      	cmp	r1, lr
   183ea:	d301      	bcc.n	183f0 <bt_gatt_attr_get_handle+0x20>
}
   183ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   183f0:	e9d1 7600 	ldrd	r7, r6, [r1]
   183f4:	42bb      	cmp	r3, r7
   183f6:	d304      	bcc.n	18402 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   183f8:	fb0c 7206 	mla	r2, ip, r6, r7
   183fc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   183fe:	4293      	cmp	r3, r2
   18400:	d90e      	bls.n	18420 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   18402:	19a2      	adds	r2, r4, r6
   18404:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18406:	3108      	adds	r1, #8
   18408:	4614      	mov	r4, r2
   1840a:	e7ed      	b.n	183e8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1840c:	fb0c 7805 	mla	r8, ip, r5, r7
   18410:	4543      	cmp	r3, r8
   18412:	d007      	beq.n	18424 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   18414:	3501      	adds	r5, #1
   18416:	1962      	adds	r2, r4, r5
   18418:	42b5      	cmp	r5, r6
   1841a:	b292      	uxth	r2, r2
   1841c:	d1f6      	bne.n	1840c <bt_gatt_attr_get_handle+0x3c>
   1841e:	e7f2      	b.n	18406 <bt_gatt_attr_get_handle+0x36>
   18420:	2500      	movs	r5, #0
   18422:	e7f8      	b.n	18416 <bt_gatt_attr_get_handle+0x46>
   18424:	4610      	mov	r0, r2
   18426:	e7e1      	b.n	183ec <bt_gatt_attr_get_handle+0x1c>
   18428:	0002349c 	.word	0x0002349c
   1842c:	000234c4 	.word	0x000234c4

00018430 <bt_gatt_foreach_attr_type>:
{
   18430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18434:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   18438:	9100      	str	r1, [sp, #0]
   1843a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1843c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18440:	2d00      	cmp	r5, #0
   18442:	bf08      	it	eq
   18444:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   18446:	4b24      	ldr	r3, [pc, #144]	; (184d8 <bt_gatt_foreach_attr_type+0xa8>)
   18448:	881b      	ldrh	r3, [r3, #0]
   1844a:	4283      	cmp	r3, r0
{
   1844c:	4607      	mov	r7, r0
   1844e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   18450:	d23c      	bcs.n	184cc <bt_gatt_foreach_attr_type+0x9c>
}
   18452:	b003      	add	sp, #12
   18454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   18458:	6873      	ldr	r3, [r6, #4]
   1845a:	4423      	add	r3, r4
   1845c:	42bb      	cmp	r3, r7
   1845e:	d232      	bcs.n	184c6 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   18460:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18462:	3608      	adds	r6, #8
   18464:	4b1d      	ldr	r3, [pc, #116]	; (184dc <bt_gatt_foreach_attr_type+0xac>)
   18466:	429e      	cmp	r6, r3
   18468:	d3f6      	bcc.n	18458 <bt_gatt_foreach_attr_type+0x28>
   1846a:	e7f2      	b.n	18452 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1846c:	5889      	ldr	r1, [r1, r2]
   1846e:	9301      	str	r3, [sp, #4]
   18470:	4640      	mov	r0, r8
   18472:	f007 ffe4 	bl	2043e <bt_uuid_cmp>
   18476:	9b01      	ldr	r3, [sp, #4]
   18478:	b190      	cbz	r0, 184a0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1847a:	3401      	adds	r4, #1
   1847c:	f10a 0a01 	add.w	sl, sl, #1
   18480:	b2a4      	uxth	r4, r4
   18482:	6873      	ldr	r3, [r6, #4]
   18484:	4553      	cmp	r3, sl
   18486:	d9ec      	bls.n	18462 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   18488:	9b00      	ldr	r3, [sp, #0]
   1848a:	429c      	cmp	r4, r3
   1848c:	d8e1      	bhi.n	18452 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1848e:	42bc      	cmp	r4, r7
   18490:	d3f3      	bcc.n	1847a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18492:	6831      	ldr	r1, [r6, #0]
   18494:	fb0b f20a 	mul.w	r2, fp, sl
   18498:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1849a:	f1b8 0f00 	cmp.w	r8, #0
   1849e:	d1e5      	bne.n	1846c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   184a0:	f1b9 0f00 	cmp.w	r9, #0
   184a4:	d10b      	bne.n	184be <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   184a6:	3d01      	subs	r5, #1
   184a8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   184aa:	4618      	mov	r0, r3
   184ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   184ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   184b0:	4621      	mov	r1, r4
   184b2:	4798      	blx	r3
	if (!*num_matches) {
   184b4:	2d00      	cmp	r5, #0
   184b6:	d0cc      	beq.n	18452 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   184b8:	2800      	cmp	r0, #0
   184ba:	d1de      	bne.n	1847a <bt_gatt_foreach_attr_type+0x4a>
   184bc:	e7c9      	b.n	18452 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   184be:	68da      	ldr	r2, [r3, #12]
   184c0:	4591      	cmp	r9, r2
   184c2:	d1da      	bne.n	1847a <bt_gatt_foreach_attr_type+0x4a>
   184c4:	e7ef      	b.n	184a6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   184c6:	f04f 0a00 	mov.w	sl, #0
   184ca:	e7da      	b.n	18482 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   184cc:	4e04      	ldr	r6, [pc, #16]	; (184e0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   184ce:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   184d0:	f04f 0b14 	mov.w	fp, #20
   184d4:	e7c6      	b.n	18464 <bt_gatt_foreach_attr_type+0x34>
   184d6:	bf00      	nop
   184d8:	20002156 	.word	0x20002156
   184dc:	000234c4 	.word	0x000234c4
   184e0:	0002349c 	.word	0x0002349c

000184e4 <db_hash_gen>:
{
   184e4:	b530      	push	{r4, r5, lr}
   184e6:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   184e8:	2300      	movs	r3, #0
{
   184ea:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   184ec:	aa1c      	add	r2, sp, #112	; 0x70
   184ee:	4669      	mov	r1, sp
   184f0:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   184f2:	e9cd 3300 	strd	r3, r3, [sp]
   184f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   184fa:	f007 fcf3 	bl	1fee4 <tc_cmac_setup>
   184fe:	b958      	cbnz	r0, 18518 <db_hash_gen+0x34>
   18500:	491a      	ldr	r1, [pc, #104]	; (1856c <db_hash_gen+0x88>)
   18502:	4b1b      	ldr	r3, [pc, #108]	; (18570 <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   18504:	481b      	ldr	r0, [pc, #108]	; (18574 <db_hash_gen+0x90>)
   18506:	1ac9      	subs	r1, r1, r3
   18508:	08c9      	lsrs	r1, r1, #3
   1850a:	0189      	lsls	r1, r1, #6
   1850c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   18510:	f006 f837 	bl	1e582 <log_0>
}
   18514:	b049      	add	sp, #292	; 0x124
   18516:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   18518:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1851c:	2001      	movs	r0, #1
   1851e:	4a16      	ldr	r2, [pc, #88]	; (18578 <db_hash_gen+0x94>)
   18520:	ab04      	add	r3, sp, #16
   18522:	f009 fa7a 	bl	21a1a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   18526:	4815      	ldr	r0, [pc, #84]	; (1857c <db_hash_gen+0x98>)
   18528:	a904      	add	r1, sp, #16
   1852a:	f007 fd72 	bl	20012 <tc_cmac_final>
   1852e:	b940      	cbnz	r0, 18542 <db_hash_gen+0x5e>
   18530:	490e      	ldr	r1, [pc, #56]	; (1856c <db_hash_gen+0x88>)
   18532:	4b0f      	ldr	r3, [pc, #60]	; (18570 <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
   18534:	4812      	ldr	r0, [pc, #72]	; (18580 <db_hash_gen+0x9c>)
   18536:	1ac9      	subs	r1, r1, r3
   18538:	08c9      	lsrs	r1, r1, #3
   1853a:	0189      	lsls	r1, r1, #6
   1853c:	f041 0101 	orr.w	r1, r1, #1
   18540:	e7e6      	b.n	18510 <db_hash_gen+0x2c>
   18542:	4b0e      	ldr	r3, [pc, #56]	; (1857c <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   18544:	2208      	movs	r2, #8
   18546:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1854a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1854c:	780d      	ldrb	r5, [r1, #0]
   1854e:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   18552:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   18554:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   18558:	d1f7      	bne.n	1854a <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1855a:	b10c      	cbz	r4, 18560 <db_hash_gen+0x7c>
		db_hash_store();
   1855c:	f7ff fa76 	bl	17a4c <db_hash_store>
   18560:	2104      	movs	r1, #4
   18562:	4808      	ldr	r0, [pc, #32]	; (18584 <db_hash_gen+0xa0>)
   18564:	f009 f8bb 	bl	216de <atomic_or>
   18568:	e7d4      	b.n	18514 <db_hash_gen+0x30>
   1856a:	bf00      	nop
   1856c:	00023574 	.word	0x00023574
   18570:	0002353c 	.word	0x0002353c
   18574:	00025a95 	.word	0x00025a95
   18578:	00021633 	.word	0x00021633
   1857c:	200017f0 	.word	0x200017f0
   18580:	00025aae 	.word	0x00025aae
   18584:	200018b8 	.word	0x200018b8

00018588 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18588:	f06f 0108 	mvn.w	r1, #8
{
   1858c:	b510      	push	{r4, lr}
   1858e:	4828      	ldr	r0, [pc, #160]	; (18630 <db_hash_process+0xa8>)
   18590:	f009 f8c5 	bl	2171e <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   18594:	0701      	lsls	r1, r0, #28
   18596:	d545      	bpl.n	18624 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18598:	4825      	ldr	r0, [pc, #148]	; (18630 <db_hash_process+0xa8>)
   1859a:	f009 f844 	bl	21626 <atomic_get>
   1859e:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   185a0:	075a      	lsls	r2, r3, #29
   185a2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   185a6:	d401      	bmi.n	185ac <db_hash_process+0x24>
			db_hash_gen(false);
   185a8:	f7ff ff9c 	bl	184e4 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   185ac:	4921      	ldr	r1, [pc, #132]	; (18634 <db_hash_process+0xac>)
   185ae:	2210      	movs	r2, #16
   185b0:	1888      	adds	r0, r1, r2
   185b2:	f007 fe30 	bl	20216 <memcmp>
   185b6:	b948      	cbnz	r0, 185cc <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   185b8:	481f      	ldr	r0, [pc, #124]	; (18638 <db_hash_process+0xb0>)
   185ba:	f00a fb1c 	bl	22bf6 <k_work_cancel_delayable>
}
   185be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   185c2:	481b      	ldr	r0, [pc, #108]	; (18630 <db_hash_process+0xa8>)
   185c4:	f06f 0101 	mvn.w	r1, #1
   185c8:	f009 b8a9 	b.w	2171e <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   185cc:	4c1b      	ldr	r4, [pc, #108]	; (1863c <db_hash_process+0xb4>)
   185ce:	2101      	movs	r1, #1
   185d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
   185d4:	f009 f883 	bl	216de <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   185d8:	f010 0f01 	tst.w	r0, #1
   185dc:	4623      	mov	r3, r4
   185de:	d110      	bne.n	18602 <db_hash_process+0x7a>
		gatt_sc.start = start;
   185e0:	4b17      	ldr	r3, [pc, #92]	; (18640 <db_hash_process+0xb8>)
   185e2:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   185e4:	4812      	ldr	r0, [pc, #72]	; (18630 <db_hash_process+0xa8>)
   185e6:	f009 f81e 	bl	21626 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   185ea:	0783      	lsls	r3, r0, #30
   185ec:	d405      	bmi.n	185fa <db_hash_process+0x72>
	k_work_reschedule(&gatt_sc.work, timeout);
   185ee:	4812      	ldr	r0, [pc, #72]	; (18638 <db_hash_process+0xb0>)
   185f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   185f4:	2300      	movs	r3, #0
   185f6:	f004 fc73 	bl	1cee0 <k_work_reschedule>
}
   185fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   185fe:	f7ff ba25 	b.w	17a4c <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   18602:	8b22      	ldrh	r2, [r4, #24]
   18604:	8b61      	ldrh	r1, [r4, #26]
   18606:	2a01      	cmp	r2, #1
   18608:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1860c:	d805      	bhi.n	1861a <db_hash_process+0x92>
   1860e:	4291      	cmp	r1, r2
   18610:	d0f3      	beq.n	185fa <db_hash_process+0x72>
		*end = new_end;
   18612:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18616:	835a      	strh	r2, [r3, #26]
   18618:	e7e4      	b.n	185e4 <db_hash_process+0x5c>
		*start = new_start;
   1861a:	2001      	movs	r0, #1
	if (*end < new_end) {
   1861c:	4291      	cmp	r1, r2
		*start = new_start;
   1861e:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   18620:	d0e0      	beq.n	185e4 <db_hash_process+0x5c>
   18622:	e7f6      	b.n	18612 <db_hash_process+0x8a>
}
   18624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   18628:	2001      	movs	r0, #1
   1862a:	f7ff bf5b 	b.w	184e4 <db_hash_gen>
   1862e:	bf00      	nop
   18630:	200018b8 	.word	0x200018b8
   18634:	200017f0 	.word	0x200017f0
   18638:	20001888 	.word	0x20001888
   1863c:	20001868 	.word	0x20001868
   18640:	ffff0001 	.word	0xffff0001

00018644 <ccc_set_direct>:
{
   18644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18648:	b0b9      	sub	sp, #228	; 0xe4
   1864a:	4688      	mov	r8, r1
   1864c:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1864e:	4939      	ldr	r1, [pc, #228]	; (18734 <ccc_set_direct+0xf0>)
   18650:	9840      	ldr	r0, [sp, #256]	; 0x100
   18652:	466a      	mov	r2, sp
{
   18654:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   18656:	f006 fac7 	bl	1ebe8 <settings_name_steq>
   1865a:	b978      	cbnz	r0, 1867c <ccc_set_direct+0x38>
   1865c:	4b36      	ldr	r3, [pc, #216]	; (18738 <ccc_set_direct+0xf4>)
   1865e:	4937      	ldr	r1, [pc, #220]	; (1873c <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
   18660:	4837      	ldr	r0, [pc, #220]	; (18740 <ccc_set_direct+0xfc>)
   18662:	1ac9      	subs	r1, r1, r3
   18664:	08c9      	lsrs	r1, r1, #3
   18666:	0189      	lsls	r1, r1, #6
   18668:	f041 0101 	orr.w	r1, r1, #1
   1866c:	f005 ff89 	bl	1e582 <log_0>
			return -EINVAL;
   18670:	f06f 0515 	mvn.w	r5, #21
}
   18674:	4628      	mov	r0, r5
   18676:	b039      	add	sp, #228	; 0xe4
   18678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1867c:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   1867e:	a901      	add	r1, sp, #4
   18680:	4630      	mov	r0, r6
   18682:	f006 fad4 	bl	1ec2e <settings_name_next>
		if (!name) {
   18686:	b96e      	cbnz	r6, 186a4 <ccc_set_direct+0x60>
   18688:	492c      	ldr	r1, [pc, #176]	; (1873c <ccc_set_direct+0xf8>)
   1868a:	4b2b      	ldr	r3, [pc, #172]	; (18738 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
   1868c:	482d      	ldr	r0, [pc, #180]	; (18744 <ccc_set_direct+0x100>)
   1868e:	1ac9      	subs	r1, r1, r3
   18690:	08c9      	lsrs	r1, r1, #3
   18692:	0189      	lsls	r1, r1, #6
   18694:	f041 0101 	orr.w	r1, r1, #1
   18698:	f005 ff73 	bl	1e582 <log_0>
			return -EINVAL;
   1869c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   186a0:	4625      	mov	r5, r4
   186a2:	e7e7      	b.n	18674 <ccc_set_direct+0x30>
		} else if (!next) {
   186a4:	9801      	ldr	r0, [sp, #4]
   186a6:	b9c8      	cbnz	r0, 186dc <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
   186a8:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   186ac:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   186b0:	4649      	mov	r1, r9
   186b2:	4630      	mov	r0, r6
   186b4:	f007 fe9f 	bl	203f6 <bt_settings_decode_key>
		if (err) {
   186b8:	4605      	mov	r5, r0
   186ba:	b1a0      	cbz	r0, 186e6 <ccc_set_direct+0xa2>
   186bc:	4a1e      	ldr	r2, [pc, #120]	; (18738 <ccc_set_direct+0xf4>)
   186be:	4c1f      	ldr	r4, [pc, #124]	; (1873c <ccc_set_direct+0xf8>)
   186c0:	4630      	mov	r0, r6
   186c2:	1aa4      	subs	r4, r4, r2
   186c4:	08e4      	lsrs	r4, r4, #3
   186c6:	f7f8 fa77 	bl	10bb8 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   186ca:	01a4      	lsls	r4, r4, #6
   186cc:	f044 0401 	orr.w	r4, r4, #1
   186d0:	4601      	mov	r1, r0
   186d2:	4622      	mov	r2, r4
   186d4:	481c      	ldr	r0, [pc, #112]	; (18748 <ccc_set_direct+0x104>)
   186d6:	f005 ff61 	bl	1e59c <log_1>
   186da:	e7df      	b.n	1869c <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
   186dc:	220a      	movs	r2, #10
   186de:	2100      	movs	r1, #0
   186e0:	f007 fcdb 	bl	2009a <strtol>
   186e4:	e7e0      	b.n	186a8 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
   186e6:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   186ea:	f1b8 0f00 	cmp.w	r8, #0
   186ee:	d01d      	beq.n	1872c <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   186f0:	ae08      	add	r6, sp, #32
   186f2:	22c0      	movs	r2, #192	; 0xc0
   186f4:	4631      	mov	r1, r6
   186f6:	4638      	mov	r0, r7
   186f8:	47a0      	blx	r4
			if (len < 0) {
   186fa:	1e04      	subs	r4, r0, #0
   186fc:	da0b      	bge.n	18716 <ccc_set_direct+0xd2>
   186fe:	4b0e      	ldr	r3, [pc, #56]	; (18738 <ccc_set_direct+0xf4>)
   18700:	4a0e      	ldr	r2, [pc, #56]	; (1873c <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
   18702:	4812      	ldr	r0, [pc, #72]	; (1874c <ccc_set_direct+0x108>)
   18704:	1ad2      	subs	r2, r2, r3
   18706:	08d2      	lsrs	r2, r2, #3
   18708:	0192      	lsls	r2, r2, #6
   1870a:	f042 0201 	orr.w	r2, r2, #1
   1870e:	4621      	mov	r1, r4
   18710:	f005 ff44 	bl	1e59c <log_1>
				return len;
   18714:	e7c4      	b.n	186a0 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   18716:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   18718:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1871a:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1871c:	4a0c      	ldr	r2, [pc, #48]	; (18750 <ccc_set_direct+0x10c>)
   1871e:	ab04      	add	r3, sp, #16
   18720:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18724:	2001      	movs	r0, #1
   18726:	f009 f978 	bl	21a1a <bt_gatt_foreach_attr>
	return 0;
   1872a:	e7a3      	b.n	18674 <ccc_set_direct+0x30>
			load.count = 0;
   1872c:	e9cd 0006 	strd	r0, r0, [sp, #24]
   18730:	e7f4      	b.n	1871c <ccc_set_direct+0xd8>
   18732:	bf00      	nop
   18734:	00025ac7 	.word	0x00025ac7
   18738:	0002353c 	.word	0x0002353c
   1873c:	00023574 	.word	0x00023574
   18740:	00025ace 	.word	0x00025ace
   18744:	00024864 	.word	0x00024864
   18748:	000259d6 	.word	0x000259d6
   1874c:	00025960 	.word	0x00025960
   18750:	00017b89 	.word	0x00017b89

00018754 <gatt_indicate>:
{
   18754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18758:	4615      	mov	r5, r2
   1875a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1875c:	2214      	movs	r2, #20
   1875e:	6869      	ldr	r1, [r5, #4]
{
   18760:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   18762:	f009 f965 	bl	21a30 <bt_gatt_check_perm>
   18766:	4607      	mov	r7, r0
   18768:	b170      	cbz	r0, 18788 <gatt_indicate+0x34>
   1876a:	4b2a      	ldr	r3, [pc, #168]	; (18814 <gatt_indicate+0xc0>)
   1876c:	492a      	ldr	r1, [pc, #168]	; (18818 <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   1876e:	482b      	ldr	r0, [pc, #172]	; (1881c <gatt_indicate+0xc8>)
   18770:	1ac9      	subs	r1, r1, r3
   18772:	08c9      	lsrs	r1, r1, #3
   18774:	0189      	lsls	r1, r1, #6
   18776:	f041 0102 	orr.w	r1, r1, #2
   1877a:	f005 ff02 	bl	1e582 <log_0>
		return -EPERM;
   1877e:	f04f 35ff 	mov.w	r5, #4294967295
}
   18782:	4628      	mov	r0, r5
   18784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   18788:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1878c:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1878e:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   18790:	f7ff f87a 	bl	17888 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   18794:	3602      	adds	r6, #2
	if (!req) {
   18796:	4604      	mov	r4, r0
   18798:	b910      	cbnz	r0, 187a0 <gatt_indicate+0x4c>
		return -ENOMEM;
   1879a:	f06f 050b 	mvn.w	r5, #11
   1879e:	e7f0      	b.n	18782 <gatt_indicate+0x2e>
	req->func = func;
   187a0:	4b1f      	ldr	r3, [pc, #124]	; (18820 <gatt_indicate+0xcc>)
	req->len = len;
   187a2:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   187a4:	211d      	movs	r1, #29
   187a6:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   187a8:	60c7      	str	r7, [r0, #12]
	req->func = func;
   187aa:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   187ac:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   187ae:	4632      	mov	r2, r6
   187b0:	4640      	mov	r0, r8
   187b2:	f7fe fe23 	bl	173fc <bt_att_create_pdu>
	if (!buf) {
   187b6:	4606      	mov	r6, r0
   187b8:	b968      	cbnz	r0, 187d6 <gatt_indicate+0x82>
   187ba:	4b16      	ldr	r3, [pc, #88]	; (18814 <gatt_indicate+0xc0>)
   187bc:	4916      	ldr	r1, [pc, #88]	; (18818 <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   187be:	4819      	ldr	r0, [pc, #100]	; (18824 <gatt_indicate+0xd0>)
   187c0:	1ac9      	subs	r1, r1, r3
   187c2:	08c9      	lsrs	r1, r1, #3
   187c4:	0189      	lsls	r1, r1, #6
   187c6:	f041 0102 	orr.w	r1, r1, #2
   187ca:	f005 feda 	bl	1e582 <log_0>
		bt_att_req_free(req);
   187ce:	4620      	mov	r0, r4
   187d0:	f7ff f870 	bl	178b4 <bt_att_req_free>
   187d4:	e7e1      	b.n	1879a <gatt_indicate+0x46>
	return net_buf_simple_add(&buf->b, len);
   187d6:	f100 0a08 	add.w	sl, r0, #8
   187da:	2102      	movs	r1, #2
   187dc:	4650      	mov	r0, sl
   187de:	f009 fe57 	bl	22490 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   187e2:	4607      	mov	r7, r0
   187e4:	8aa9      	ldrh	r1, [r5, #20]
   187e6:	f827 9b02 	strh.w	r9, [r7], #2
   187ea:	4650      	mov	r0, sl
   187ec:	f009 fe50 	bl	22490 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   187f0:	8aaa      	ldrh	r2, [r5, #20]
   187f2:	6929      	ldr	r1, [r5, #16]
   187f4:	4638      	mov	r0, r7
   187f6:	f007 fd1e 	bl	20236 <memcpy>
	req->buf = buf;
   187fa:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   187fc:	4621      	mov	r1, r4
   187fe:	4640      	mov	r0, r8
   18800:	f008 fed9 	bl	215b6 <bt_att_req_send>
	if (err) {
   18804:	4605      	mov	r5, r0
   18806:	2800      	cmp	r0, #0
   18808:	d0bb      	beq.n	18782 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1880a:	4620      	mov	r0, r4
   1880c:	f7ff f852 	bl	178b4 <bt_att_req_free>
   18810:	e7b7      	b.n	18782 <gatt_indicate+0x2e>
   18812:	bf00      	nop
   18814:	0002353c 	.word	0x0002353c
   18818:	00023574 	.word	0x00023574
   1881c:	00025ada 	.word	0x00025ada
   18820:	000215f5 	.word	0x000215f5
   18824:	00025af0 	.word	0x00025af0

00018828 <bt_gatt_indicate>:
{
   18828:	b530      	push	{r4, r5, lr}
   1882a:	4604      	mov	r4, r0
   1882c:	b08b      	sub	sp, #44	; 0x2c
   1882e:	4837      	ldr	r0, [pc, #220]	; (1890c <bt_gatt_indicate+0xe4>)
   18830:	460d      	mov	r5, r1
   18832:	f008 fef8 	bl	21626 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18836:	0782      	lsls	r2, r0, #30
   18838:	d561      	bpl.n	188fe <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   1883a:	6848      	ldr	r0, [r1, #4]
   1883c:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1883e:	b114      	cbz	r4, 18846 <bt_gatt_indicate+0x1e>
   18840:	7b63      	ldrb	r3, [r4, #13]
   18842:	2b07      	cmp	r3, #7
   18844:	d15e      	bne.n	18904 <bt_gatt_indicate+0xdc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18846:	f7ff fdc3 	bl	183d0 <bt_gatt_attr_get_handle>
   1884a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1884e:	b918      	cbnz	r0, 18858 <bt_gatt_indicate+0x30>
		return -ENOENT;
   18850:	f06f 0001 	mvn.w	r0, #1
}
   18854:	b00b      	add	sp, #44	; 0x2c
   18856:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   18858:	682a      	ldr	r2, [r5, #0]
   1885a:	b9ba      	cbnz	r2, 1888c <bt_gatt_indicate+0x64>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1885c:	9b05      	ldr	r3, [sp, #20]
   1885e:	6818      	ldr	r0, [r3, #0]
   18860:	2300      	movs	r3, #0
   18862:	f88d 3010 	strb.w	r3, [sp, #16]
   18866:	a904      	add	r1, sp, #16
   18868:	f642 0303 	movw	r3, #10243	; 0x2803
   1886c:	f8ad 3012 	strh.w	r3, [sp, #18]
   18870:	f007 fde5 	bl	2043e <bt_uuid_cmp>
   18874:	b1d0      	cbz	r0, 188ac <bt_gatt_indicate+0x84>
	if (conn) {
   18876:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1887a:	b324      	cbz	r4, 188c6 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1887c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1887e:	4601      	mov	r1, r0
		params->_ref = 1;
   18880:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   18882:	462a      	mov	r2, r5
   18884:	4620      	mov	r0, r4
   18886:	f7ff ff65 	bl	18754 <gatt_indicate>
   1888a:	e7e3      	b.n	18854 <bt_gatt_indicate+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1888c:	a905      	add	r1, sp, #20
   1888e:	9102      	str	r1, [sp, #8]
   18890:	491f      	ldr	r1, [pc, #124]	; (18910 <bt_gatt_indicate+0xe8>)
   18892:	9101      	str	r1, [sp, #4]
   18894:	2101      	movs	r1, #1
	found->attr = NULL;
   18896:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18898:	9100      	str	r1, [sp, #0]
   1889a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1889e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   188a0:	f7ff fdc6 	bl	18430 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   188a4:	9b05      	ldr	r3, [sp, #20]
   188a6:	2b00      	cmp	r3, #0
   188a8:	d1d8      	bne.n	1885c <bt_gatt_indicate+0x34>
   188aa:	e7d1      	b.n	18850 <bt_gatt_indicate+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   188ac:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   188ae:	68c3      	ldr	r3, [r0, #12]
   188b0:	799b      	ldrb	r3, [r3, #6]
   188b2:	069b      	lsls	r3, r3, #26
   188b4:	d402      	bmi.n	188bc <bt_gatt_indicate+0x94>
			return -EINVAL;
   188b6:	f06f 0015 	mvn.w	r0, #21
   188ba:	e7cb      	b.n	18854 <bt_gatt_indicate+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   188bc:	f009 f85f 	bl	2197e <bt_gatt_attr_value_handle>
   188c0:	f8ad 0018 	strh.w	r0, [sp, #24]
   188c4:	e7d7      	b.n	18876 <bt_gatt_indicate+0x4e>
	data.err = -ENOTCONN;
   188c6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   188ca:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   188cc:	2302      	movs	r3, #2
   188ce:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   188d2:	f642 1302 	movw	r3, #10498	; 0x2902
   188d6:	f8ad 3012 	strh.w	r3, [sp, #18]
   188da:	ab05      	add	r3, sp, #20
   188dc:	9302      	str	r3, [sp, #8]
   188de:	4b0d      	ldr	r3, [pc, #52]	; (18914 <bt_gatt_indicate+0xec>)
   188e0:	9301      	str	r3, [sp, #4]
   188e2:	2301      	movs	r3, #1
   188e4:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   188e6:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   188e8:	4623      	mov	r3, r4
   188ea:	aa04      	add	r2, sp, #16
   188ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   188f0:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   188f2:	f88d 4010 	strb.w	r4, [sp, #16]
   188f6:	f7ff fd9b 	bl	18430 <bt_gatt_foreach_attr_type>
	return data.err;
   188fa:	9807      	ldr	r0, [sp, #28]
   188fc:	e7aa      	b.n	18854 <bt_gatt_indicate+0x2c>
		return -EAGAIN;
   188fe:	f06f 000a 	mvn.w	r0, #10
   18902:	e7a7      	b.n	18854 <bt_gatt_indicate+0x2c>
		return -ENOTCONN;
   18904:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18908:	e7a4      	b.n	18854 <bt_gatt_indicate+0x2c>
   1890a:	bf00      	nop
   1890c:	20000338 	.word	0x20000338
   18910:	0002161b 	.word	0x0002161b
   18914:	00018afd 	.word	0x00018afd

00018918 <sc_process>:
{
   18918:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1891a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1891e:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   18920:	f850 3c08 	ldr.w	r3, [r0, #-8]
   18924:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   18926:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1892a:	f06f 0101 	mvn.w	r1, #1
   1892e:	4628      	mov	r0, r5
   18930:	f008 fef5 	bl	2171e <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   18934:	4b0d      	ldr	r3, [pc, #52]	; (1896c <sc_process+0x54>)
   18936:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1893a:	4b0d      	ldr	r3, [pc, #52]	; (18970 <sc_process+0x58>)
   1893c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   18940:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   18942:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   18944:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   18948:	2304      	movs	r3, #4
	sc->start = 0U;
   1894a:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1894e:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   18952:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   18956:	4631      	mov	r1, r6
   18958:	f7ff ff66 	bl	18828 <bt_gatt_indicate>
   1895c:	b918      	cbnz	r0, 18966 <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1895e:	2102      	movs	r1, #2
   18960:	4628      	mov	r0, r5
   18962:	f008 febc 	bl	216de <atomic_or>
}
   18966:	b002      	add	sp, #8
   18968:	bd70      	pop	{r4, r5, r6, pc}
   1896a:	bf00      	nop
   1896c:	00023ca4 	.word	0x00023ca4
   18970:	00018189 	.word	0x00018189

00018974 <gatt_notify>:
{
   18974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18978:	4614      	mov	r4, r2
   1897a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1897c:	2214      	movs	r2, #20
   1897e:	6861      	ldr	r1, [r4, #4]
{
   18980:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   18982:	f009 f855 	bl	21a30 <bt_gatt_check_perm>
   18986:	b168      	cbz	r0, 189a4 <gatt_notify+0x30>
   18988:	4b1e      	ldr	r3, [pc, #120]	; (18a04 <gatt_notify+0x90>)
   1898a:	491f      	ldr	r1, [pc, #124]	; (18a08 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   1898c:	481f      	ldr	r0, [pc, #124]	; (18a0c <gatt_notify+0x98>)
   1898e:	1ac9      	subs	r1, r1, r3
   18990:	08c9      	lsrs	r1, r1, #3
   18992:	0189      	lsls	r1, r1, #6
   18994:	f041 0102 	orr.w	r1, r1, #2
   18998:	f005 fdf3 	bl	1e582 <log_0>
		return -EPERM;
   1899c:	f04f 30ff 	mov.w	r0, #4294967295
}
   189a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   189a4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   189a6:	211b      	movs	r1, #27
   189a8:	3202      	adds	r2, #2
   189aa:	4638      	mov	r0, r7
   189ac:	f7fe fd26 	bl	173fc <bt_att_create_pdu>
	if (!buf) {
   189b0:	4605      	mov	r5, r0
   189b2:	b960      	cbnz	r0, 189ce <gatt_notify+0x5a>
   189b4:	4b13      	ldr	r3, [pc, #76]	; (18a04 <gatt_notify+0x90>)
   189b6:	4914      	ldr	r1, [pc, #80]	; (18a08 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   189b8:	4815      	ldr	r0, [pc, #84]	; (18a10 <gatt_notify+0x9c>)
   189ba:	1ac9      	subs	r1, r1, r3
   189bc:	08c9      	lsrs	r1, r1, #3
   189be:	0189      	lsls	r1, r1, #6
   189c0:	f041 0102 	orr.w	r1, r1, #2
   189c4:	f005 fddd 	bl	1e582 <log_0>
		return -ENOMEM;
   189c8:	f06f 000b 	mvn.w	r0, #11
   189cc:	e7e8      	b.n	189a0 <gatt_notify+0x2c>
   189ce:	f100 0908 	add.w	r9, r0, #8
   189d2:	2102      	movs	r1, #2
   189d4:	4648      	mov	r0, r9
   189d6:	f009 fd5b 	bl	22490 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   189da:	4606      	mov	r6, r0
   189dc:	89a1      	ldrh	r1, [r4, #12]
   189de:	f826 8b02 	strh.w	r8, [r6], #2
   189e2:	4648      	mov	r0, r9
   189e4:	f009 fd54 	bl	22490 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   189e8:	89a2      	ldrh	r2, [r4, #12]
   189ea:	68a1      	ldr	r1, [r4, #8]
   189ec:	4630      	mov	r0, r6
   189ee:	f007 fc22 	bl	20236 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   189f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   189f6:	4629      	mov	r1, r5
   189f8:	4638      	mov	r0, r7
}
   189fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   189fe:	f008 bd8f 	b.w	21520 <bt_att_send>
   18a02:	bf00      	nop
   18a04:	0002353c 	.word	0x0002353c
   18a08:	00023574 	.word	0x00023574
   18a0c:	00025ada 	.word	0x00025ada
   18a10:	00025b17 	.word	0x00025b17

00018a14 <bt_gatt_notify_cb>:
{
   18a14:	b530      	push	{r4, r5, lr}
   18a16:	4604      	mov	r4, r0
   18a18:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18a1a:	4835      	ldr	r0, [pc, #212]	; (18af0 <bt_gatt_notify_cb+0xdc>)
   18a1c:	460d      	mov	r5, r1
   18a1e:	f008 fe02 	bl	21626 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18a22:	0782      	lsls	r2, r0, #30
   18a24:	d55d      	bpl.n	18ae2 <bt_gatt_notify_cb+0xce>
	data.attr = params->attr;
   18a26:	6848      	ldr	r0, [r1, #4]
   18a28:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18a2a:	b114      	cbz	r4, 18a32 <bt_gatt_notify_cb+0x1e>
   18a2c:	7b63      	ldrb	r3, [r4, #13]
   18a2e:	2b07      	cmp	r3, #7
   18a30:	d15a      	bne.n	18ae8 <bt_gatt_notify_cb+0xd4>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18a32:	f7ff fccd 	bl	183d0 <bt_gatt_attr_get_handle>
   18a36:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   18a3a:	b918      	cbnz	r0, 18a44 <bt_gatt_notify_cb+0x30>
		return -ENOENT;
   18a3c:	f06f 0001 	mvn.w	r0, #1
}
   18a40:	b00b      	add	sp, #44	; 0x2c
   18a42:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   18a44:	682a      	ldr	r2, [r5, #0]
   18a46:	b9aa      	cbnz	r2, 18a74 <bt_gatt_notify_cb+0x60>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   18a48:	9b05      	ldr	r3, [sp, #20]
   18a4a:	6818      	ldr	r0, [r3, #0]
   18a4c:	2300      	movs	r3, #0
   18a4e:	f88d 3010 	strb.w	r3, [sp, #16]
   18a52:	a904      	add	r1, sp, #16
   18a54:	f642 0303 	movw	r3, #10243	; 0x2803
   18a58:	f8ad 3012 	strh.w	r3, [sp, #18]
   18a5c:	f007 fcef 	bl	2043e <bt_uuid_cmp>
   18a60:	b1c0      	cbz	r0, 18a94 <bt_gatt_notify_cb+0x80>
	if (conn) {
   18a62:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   18a66:	b314      	cbz	r4, 18aae <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   18a68:	4601      	mov	r1, r0
   18a6a:	462a      	mov	r2, r5
   18a6c:	4620      	mov	r0, r4
   18a6e:	f7ff ff81 	bl	18974 <gatt_notify>
   18a72:	e7e5      	b.n	18a40 <bt_gatt_notify_cb+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18a74:	a905      	add	r1, sp, #20
   18a76:	9102      	str	r1, [sp, #8]
   18a78:	491e      	ldr	r1, [pc, #120]	; (18af4 <bt_gatt_notify_cb+0xe0>)
   18a7a:	9101      	str	r1, [sp, #4]
   18a7c:	2101      	movs	r1, #1
	found->attr = NULL;
   18a7e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18a80:	9100      	str	r1, [sp, #0]
   18a82:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   18a86:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18a88:	f7ff fcd2 	bl	18430 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   18a8c:	9b05      	ldr	r3, [sp, #20]
   18a8e:	2b00      	cmp	r3, #0
   18a90:	d1da      	bne.n	18a48 <bt_gatt_notify_cb+0x34>
   18a92:	e7d3      	b.n	18a3c <bt_gatt_notify_cb+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   18a94:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   18a96:	68c3      	ldr	r3, [r0, #12]
   18a98:	799b      	ldrb	r3, [r3, #6]
   18a9a:	06db      	lsls	r3, r3, #27
   18a9c:	d402      	bmi.n	18aa4 <bt_gatt_notify_cb+0x90>
			return -EINVAL;
   18a9e:	f06f 0015 	mvn.w	r0, #21
   18aa2:	e7cd      	b.n	18a40 <bt_gatt_notify_cb+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   18aa4:	f008 ff6b 	bl	2197e <bt_gatt_attr_value_handle>
   18aa8:	f8ad 0018 	strh.w	r0, [sp, #24]
   18aac:	e7d9      	b.n	18a62 <bt_gatt_notify_cb+0x4e>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18aae:	f642 1202 	movw	r2, #10498	; 0x2902
   18ab2:	f8ad 2012 	strh.w	r2, [sp, #18]
   18ab6:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   18ab8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18abc:	9202      	str	r2, [sp, #8]
   18abe:	4a0e      	ldr	r2, [pc, #56]	; (18af8 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   18ac0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   18ac2:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18ac4:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   18ac8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18acc:	aa04      	add	r2, sp, #16
   18ace:	4623      	mov	r3, r4
   18ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   18ad4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18ad6:	f88d 4010 	strb.w	r4, [sp, #16]
   18ada:	f7ff fca9 	bl	18430 <bt_gatt_foreach_attr_type>
	return data.err;
   18ade:	9807      	ldr	r0, [sp, #28]
   18ae0:	e7ae      	b.n	18a40 <bt_gatt_notify_cb+0x2c>
		return -EAGAIN;
   18ae2:	f06f 000a 	mvn.w	r0, #10
   18ae6:	e7ab      	b.n	18a40 <bt_gatt_notify_cb+0x2c>
		return -ENOTCONN;
   18ae8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18aec:	e7a8      	b.n	18a40 <bt_gatt_notify_cb+0x2c>
   18aee:	bf00      	nop
   18af0:	20000338 	.word	0x20000338
   18af4:	0002161b 	.word	0x0002161b
   18af8:	00018afd 	.word	0x00018afd

00018afc <notify_cb>:
{
   18afc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18b00:	4b3c      	ldr	r3, [pc, #240]	; (18bf4 <notify_cb+0xf8>)
{
   18b02:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18b04:	6882      	ldr	r2, [r0, #8]
   18b06:	429a      	cmp	r2, r3
{
   18b08:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18b0a:	d113      	bne.n	18b34 <notify_cb+0x38>
	ccc = attr->user_data;
   18b0c:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18b0e:	4b3a      	ldr	r3, [pc, #232]	; (18bf8 <notify_cb+0xfc>)
   18b10:	429f      	cmp	r7, r3
   18b12:	d014      	beq.n	18b3e <notify_cb+0x42>
		if (cfg->value != data->type) {
   18b14:	893a      	ldrh	r2, [r7, #8]
   18b16:	89a3      	ldrh	r3, [r4, #12]
   18b18:	429a      	cmp	r2, r3
   18b1a:	d10b      	bne.n	18b34 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18b1c:	4639      	mov	r1, r7
   18b1e:	f811 0b01 	ldrb.w	r0, [r1], #1
   18b22:	f7fd fc49 	bl	163b8 <bt_conn_lookup_addr_le>
		if (!conn) {
   18b26:	4605      	mov	r5, r0
   18b28:	b120      	cbz	r0, 18b34 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   18b2a:	7b43      	ldrb	r3, [r0, #13]
   18b2c:	2b07      	cmp	r3, #7
   18b2e:	d02e      	beq.n	18b8e <notify_cb+0x92>
			bt_conn_unref(conn);
   18b30:	f008 f873 	bl	20c1a <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   18b34:	2701      	movs	r7, #1
}
   18b36:	4638      	mov	r0, r7
   18b38:	b003      	add	sp, #12
   18b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18b3e:	f04f 0800 	mov.w	r8, #0
   18b42:	4d2e      	ldr	r5, [pc, #184]	; (18bfc <notify_cb+0x100>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   18b44:	46c1      	mov	r9, r8
   18b46:	2207      	movs	r2, #7
   18b48:	4669      	mov	r1, sp
   18b4a:	4628      	mov	r0, r5
   18b4c:	f8cd 9000 	str.w	r9, [sp]
   18b50:	f8cd 9003 	str.w	r9, [sp, #3]
   18b54:	f007 fb5f 	bl	20216 <memcmp>
   18b58:	b178      	cbz	r0, 18b7a <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   18b5a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   18b5e:	2207      	movs	r2, #7
   18b60:	4629      	mov	r1, r5
   18b62:	f7fd fc6d 	bl	16440 <bt_conn_lookup_state_le>
			if (!conn) {
   18b66:	b978      	cbnz	r0, 18b88 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   18b68:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   18b6a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   18b6e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   18b70:	4629      	mov	r1, r5
   18b72:	8853      	ldrh	r3, [r2, #2]
   18b74:	8812      	ldrh	r2, [r2, #0]
   18b76:	f7ff f8fd 	bl	17d74 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18b7a:	350c      	adds	r5, #12
   18b7c:	f1b8 0f00 	cmp.w	r8, #0
   18b80:	d1c8      	bne.n	18b14 <notify_cb+0x18>
   18b82:	f04f 0801 	mov.w	r8, #1
   18b86:	e7de      	b.n	18b46 <notify_cb+0x4a>
			bt_conn_unref(conn);
   18b88:	f008 f847 	bl	20c1a <bt_conn_unref>
   18b8c:	e7f5      	b.n	18b7a <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18b8e:	697b      	ldr	r3, [r7, #20]
   18b90:	b123      	cbz	r3, 18b9c <notify_cb+0xa0>
   18b92:	4631      	mov	r1, r6
   18b94:	4798      	blx	r3
   18b96:	b908      	cbnz	r0, 18b9c <notify_cb+0xa0>
			bt_conn_unref(conn);
   18b98:	4628      	mov	r0, r5
   18b9a:	e7c9      	b.n	18b30 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   18b9c:	2214      	movs	r2, #20
   18b9e:	4631      	mov	r1, r6
   18ba0:	4628      	mov	r0, r5
   18ba2:	f008 ff45 	bl	21a30 <bt_gatt_check_perm>
   18ba6:	4607      	mov	r7, r0
   18ba8:	b150      	cbz	r0, 18bc0 <notify_cb+0xc4>
   18baa:	4b15      	ldr	r3, [pc, #84]	; (18c00 <notify_cb+0x104>)
   18bac:	4915      	ldr	r1, [pc, #84]	; (18c04 <notify_cb+0x108>)
			BT_WARN("Link is not encrypted");
   18bae:	4816      	ldr	r0, [pc, #88]	; (18c08 <notify_cb+0x10c>)
   18bb0:	1ac9      	subs	r1, r1, r3
   18bb2:	08c9      	lsrs	r1, r1, #3
   18bb4:	0189      	lsls	r1, r1, #6
   18bb6:	f041 0102 	orr.w	r1, r1, #2
   18bba:	f005 fce2 	bl	1e582 <log_0>
			continue;
   18bbe:	e7b9      	b.n	18b34 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   18bc0:	89a3      	ldrh	r3, [r4, #12]
   18bc2:	88a1      	ldrh	r1, [r4, #4]
   18bc4:	6922      	ldr	r2, [r4, #16]
   18bc6:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   18bc8:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   18bca:	d10f      	bne.n	18bec <notify_cb+0xf0>
			err = gatt_indicate(conn, data->handle,
   18bcc:	f7ff fdc2 	bl	18754 <gatt_indicate>
			if (err == 0) {
   18bd0:	4606      	mov	r6, r0
   18bd2:	b918      	cbnz	r0, 18bdc <notify_cb+0xe0>
				data->ind_params->_ref++;
   18bd4:	6922      	ldr	r2, [r4, #16]
   18bd6:	7d93      	ldrb	r3, [r2, #22]
   18bd8:	3301      	adds	r3, #1
   18bda:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18bdc:	4628      	mov	r0, r5
   18bde:	f008 f81c 	bl	20c1a <bt_conn_unref>
		if (err < 0) {
   18be2:	2e00      	cmp	r6, #0
   18be4:	dba7      	blt.n	18b36 <notify_cb+0x3a>
		data->err = 0;
   18be6:	2300      	movs	r3, #0
   18be8:	60a3      	str	r3, [r4, #8]
   18bea:	e7a3      	b.n	18b34 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18bec:	f7ff fec2 	bl	18974 <gatt_notify>
   18bf0:	4606      	mov	r6, r0
   18bf2:	e7f3      	b.n	18bdc <notify_cb+0xe0>
   18bf4:	00017c3d 	.word	0x00017c3d
   18bf8:	20000540 	.word	0x20000540
   18bfc:	20002159 	.word	0x20002159
   18c00:	0002353c 	.word	0x0002353c
   18c04:	00023574 	.word	0x00023574
   18c08:	00025ada 	.word	0x00025ada

00018c0c <update_ccc>:
{
   18c0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18c10:	4b3e      	ldr	r3, [pc, #248]	; (18d0c <update_ccc+0x100>)
	struct bt_conn *conn = data->conn;
   18c12:	6815      	ldr	r5, [r2, #0]
{
   18c14:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18c16:	6882      	ldr	r2, [r0, #8]
   18c18:	429a      	cmp	r2, r3
{
   18c1a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18c1c:	d11c      	bne.n	18c58 <update_ccc+0x4c>
	ccc = attr->user_data;
   18c1e:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   18c20:	893b      	ldrh	r3, [r7, #8]
   18c22:	b1cb      	cbz	r3, 18c58 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18c24:	463a      	mov	r2, r7
   18c26:	4628      	mov	r0, r5
   18c28:	f812 1b01 	ldrb.w	r1, [r2], #1
   18c2c:	f007 ffba 	bl	20ba4 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   18c30:	b190      	cbz	r0, 18c58 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18c32:	222a      	movs	r2, #42	; 0x2a
   18c34:	4621      	mov	r1, r4
   18c36:	4628      	mov	r0, r5
   18c38:	f008 fefa 	bl	21a30 <bt_gatt_check_perm>
		if (err) {
   18c3c:	b308      	cbz	r0, 18c82 <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   18c3e:	2803      	cmp	r0, #3
   18c40:	d10e      	bne.n	18c60 <update_ccc+0x54>
   18c42:	4a33      	ldr	r2, [pc, #204]	; (18d10 <update_ccc+0x104>)
   18c44:	4b33      	ldr	r3, [pc, #204]	; (18d14 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
   18c46:	4834      	ldr	r0, [pc, #208]	; (18d18 <update_ccc+0x10c>)
   18c48:	1ad2      	subs	r2, r2, r3
   18c4a:	08d2      	lsrs	r2, r2, #3
   18c4c:	0192      	lsls	r2, r2, #6
   18c4e:	f042 0202 	orr.w	r2, r2, #2
   18c52:	4621      	mov	r1, r4
   18c54:	f005 fca2 	bl	1e59c <log_1>
}
   18c58:	2001      	movs	r0, #1
   18c5a:	b002      	add	sp, #8
   18c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   18c60:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   18c62:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
   18c64:	bf14      	ite	ne
   18c66:	f04f 0802 	movne.w	r8, #2
   18c6a:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   18c6e:	f007 ff67 	bl	20b40 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   18c72:	4580      	cmp	r8, r0
   18c74:	d905      	bls.n	18c82 <update_ccc+0x76>
				if (data->sec < sec) {
   18c76:	7933      	ldrb	r3, [r6, #4]
   18c78:	4543      	cmp	r3, r8
   18c7a:	d2ed      	bcs.n	18c58 <update_ccc+0x4c>
					data->sec = sec;
   18c7c:	f886 8004 	strb.w	r8, [r6, #4]
   18c80:	e7ea      	b.n	18c58 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
   18c82:	4639      	mov	r1, r7
   18c84:	4620      	mov	r0, r4
   18c86:	f008 fcab 	bl	215e0 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   18c8a:	4b24      	ldr	r3, [pc, #144]	; (18d1c <update_ccc+0x110>)
   18c8c:	429f      	cmp	r7, r3
   18c8e:	d1e3      	bne.n	18c58 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18c90:	7a28      	ldrb	r0, [r5, #8]
   18c92:	f105 0188 	add.w	r1, r5, #136	; 0x88
   18c96:	f7ff f84b 	bl	17d30 <find_sc_cfg>
	if (!cfg) {
   18c9a:	4604      	mov	r4, r0
   18c9c:	2800      	cmp	r0, #0
   18c9e:	d0db      	beq.n	18c58 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
   18ca0:	8902      	ldrh	r2, [r0, #8]
   18ca2:	8943      	ldrh	r3, [r0, #10]
   18ca4:	ea52 0103 	orrs.w	r1, r2, r3
   18ca8:	d0d6      	beq.n	18c58 <update_ccc+0x4c>
	index = bt_conn_index(conn);
   18caa:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   18cac:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   18cb0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   18cb4:	f7fd fd74 	bl	167a0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18cb8:	4919      	ldr	r1, [pc, #100]	; (18d20 <update_ccc+0x114>)
   18cba:	4a1a      	ldr	r2, [pc, #104]	; (18d24 <update_ccc+0x118>)
   18cbc:	2318      	movs	r3, #24
   18cbe:	fb03 1300 	mla	r3, r3, r0, r1
   18cc2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   18cc4:	4a18      	ldr	r2, [pc, #96]	; (18d28 <update_ccc+0x11c>)
   18cc6:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   18cc8:	aa01      	add	r2, sp, #4
   18cca:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   18ccc:	2204      	movs	r2, #4
   18cce:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18cd0:	b203      	sxth	r3, r0
   18cd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18cd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   18cda:	4628      	mov	r0, r5
   18cdc:	f7ff fda4 	bl	18828 <bt_gatt_indicate>
   18ce0:	b148      	cbz	r0, 18cf6 <update_ccc+0xea>
   18ce2:	490b      	ldr	r1, [pc, #44]	; (18d10 <update_ccc+0x104>)
   18ce4:	4b0b      	ldr	r3, [pc, #44]	; (18d14 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
   18ce6:	4811      	ldr	r0, [pc, #68]	; (18d2c <update_ccc+0x120>)
   18ce8:	1ac9      	subs	r1, r1, r3
   18cea:	08c9      	lsrs	r1, r1, #3
   18cec:	0189      	lsls	r1, r1, #6
   18cee:	f041 0101 	orr.w	r1, r1, #1
   18cf2:	f005 fc46 	bl	1e582 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   18cf6:	2204      	movs	r2, #4
   18cf8:	2100      	movs	r1, #0
   18cfa:	f104 0008 	add.w	r0, r4, #8
   18cfe:	f007 fac5 	bl	2028c <memset>
		sc_store(cfg);
   18d02:	4620      	mov	r0, r4
   18d04:	f7fe fee2 	bl	17acc <sc_store>
   18d08:	e7a6      	b.n	18c58 <update_ccc+0x4c>
   18d0a:	bf00      	nop
   18d0c:	00017c3d 	.word	0x00017c3d
   18d10:	00023574 	.word	0x00023574
   18d14:	0002353c 	.word	0x0002353c
   18d18:	00025b40 	.word	0x00025b40
   18d1c:	20000540 	.word	0x20000540
   18d20:	20001f64 	.word	0x20001f64
   18d24:	00023ca4 	.word	0x00023ca4
   18d28:	000217c9 	.word	0x000217c9
   18d2c:	00025b54 	.word	0x00025b54

00018d30 <bt_gatt_connected>:
{
   18d30:	b570      	push	{r4, r5, r6, lr}
   18d32:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18d34:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   18d38:	4604      	mov	r4, r0
	data.conn = conn;
   18d3a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   18d3c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18d3e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   18d40:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18d44:	4629      	mov	r1, r5
   18d46:	f007 fcdf 	bl	20708 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   18d4a:	b190      	cbz	r0, 18d72 <bt_gatt_connected+0x42>
		if (conn->id) {
   18d4c:	7a22      	ldrb	r2, [r4, #8]
   18d4e:	b31a      	cbz	r2, 18d98 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   18d50:	ae02      	add	r6, sp, #8
   18d52:	2104      	movs	r1, #4
   18d54:	4630      	mov	r0, r6
   18d56:	f004 ff1a 	bl	1db8e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18d5a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18d5c:	4a0f      	ldr	r2, [pc, #60]	; (18d9c <bt_gatt_connected+0x6c>)
   18d5e:	2124      	movs	r1, #36	; 0x24
   18d60:	a805      	add	r0, sp, #20
   18d62:	462b      	mov	r3, r5
   18d64:	f7fa fc70 	bl	13648 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   18d68:	aa05      	add	r2, sp, #20
   18d6a:	490d      	ldr	r1, [pc, #52]	; (18da0 <bt_gatt_connected+0x70>)
   18d6c:	4610      	mov	r0, r2
   18d6e:	f7f8 fe0b 	bl	11988 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18d72:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18d76:	4a0b      	ldr	r2, [pc, #44]	; (18da4 <bt_gatt_connected+0x74>)
   18d78:	ab03      	add	r3, sp, #12
   18d7a:	2001      	movs	r0, #1
   18d7c:	f008 fe4d 	bl	21a1a <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   18d80:	4620      	mov	r0, r4
   18d82:	f007 fedd 	bl	20b40 <bt_conn_get_security>
   18d86:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   18d8a:	4288      	cmp	r0, r1
   18d8c:	d202      	bcs.n	18d94 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
   18d8e:	4620      	mov	r0, r4
   18d90:	f007 fea3 	bl	20ada <bt_conn_set_security>
}
   18d94:	b00e      	add	sp, #56	; 0x38
   18d96:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18d98:	9200      	str	r2, [sp, #0]
   18d9a:	e7df      	b.n	18d5c <bt_gatt_connected+0x2c>
   18d9c:	00025aca 	.word	0x00025aca
   18da0:	00018645 	.word	0x00018645
   18da4:	00018c0d 	.word	0x00018c0d

00018da8 <bt_gatt_encrypt_change>:
{
   18da8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18daa:	4a06      	ldr	r2, [pc, #24]	; (18dc4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   18dac:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18dae:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   18db0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18db2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   18db6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18dba:	f008 fe2e 	bl	21a1a <bt_gatt_foreach_attr>
}
   18dbe:	b003      	add	sp, #12
   18dc0:	f85d fb04 	ldr.w	pc, [sp], #4
   18dc4:	00018c0d 	.word	0x00018c0d

00018dc8 <db_hash_read>:
{
   18dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18dca:	4914      	ldr	r1, [pc, #80]	; (18e1c <db_hash_read+0x54>)
{
   18dcc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   18dd0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18dd2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   18dd6:	461f      	mov	r7, r3
   18dd8:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18dda:	f009 ff20 	bl	22c1e <k_work_cancel_delayable_sync>
   18dde:	4810      	ldr	r0, [pc, #64]	; (18e20 <db_hash_read+0x58>)
   18de0:	f008 fc21 	bl	21626 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   18de4:	0743      	lsls	r3, r0, #29
   18de6:	d402      	bmi.n	18dee <db_hash_read+0x26>
		db_hash_gen(true);
   18de8:	2001      	movs	r0, #1
   18dea:	f7ff fb7b 	bl	184e4 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   18dee:	2101      	movs	r1, #1
   18df0:	4620      	mov	r0, r4
   18df2:	f008 fe48 	bl	21a86 <bt_gatt_change_aware>
	if (offset > value_len) {
   18df6:	2e10      	cmp	r6, #16
   18df8:	d80c      	bhi.n	18e14 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   18dfa:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   18dfe:	4909      	ldr	r1, [pc, #36]	; (18e24 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   18e00:	42bc      	cmp	r4, r7
   18e02:	bfa8      	it	ge
   18e04:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18e06:	4622      	mov	r2, r4
   18e08:	4431      	add	r1, r6
   18e0a:	4628      	mov	r0, r5
   18e0c:	f007 fa13 	bl	20236 <memcpy>
}
   18e10:	4620      	mov	r0, r4
   18e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e14:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   18e18:	e7fa      	b.n	18e10 <db_hash_read+0x48>
   18e1a:	bf00      	nop
   18e1c:	20001840 	.word	0x20001840
   18e20:	200018b8 	.word	0x200018b8
   18e24:	200017f0 	.word	0x200017f0

00018e28 <bt_gatt_store_ccc>:
{
   18e28:	b570      	push	{r4, r5, r6, lr}
   18e2a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   18e2c:	2300      	movs	r3, #0
{
   18e2e:	4604      	mov	r4, r0
   18e30:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   18e32:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   18e34:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   18e38:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   18e3a:	4a18      	ldr	r2, [pc, #96]	; (18e9c <bt_gatt_store_ccc+0x74>)
   18e3c:	ab0d      	add	r3, sp, #52	; 0x34
   18e3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e42:	2001      	movs	r0, #1
   18e44:	f008 fde9 	bl	21a1a <bt_gatt_foreach_attr>
	if (id) {
   18e48:	b31c      	cbz	r4, 18e92 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   18e4a:	ae03      	add	r6, sp, #12
   18e4c:	4622      	mov	r2, r4
   18e4e:	2104      	movs	r1, #4
   18e50:	4630      	mov	r0, r6
   18e52:	f004 fe9c 	bl	1db8e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   18e56:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   18e58:	4a11      	ldr	r2, [pc, #68]	; (18ea0 <bt_gatt_store_ccc+0x78>)
   18e5a:	462b      	mov	r3, r5
   18e5c:	2124      	movs	r1, #36	; 0x24
   18e5e:	a804      	add	r0, sp, #16
   18e60:	f7fa fbf2 	bl	13648 <bt_settings_encode_key>
	if (save.count) {
   18e64:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   18e66:	b1b2      	cbz	r2, 18e96 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   18e68:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   18e6a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   18e6c:	a804      	add	r0, sp, #16
   18e6e:	f7f8 fd27 	bl	118c0 <settings_save_one>
	if (err) {
   18e72:	4604      	mov	r4, r0
   18e74:	b150      	cbz	r0, 18e8c <bt_gatt_store_ccc+0x64>
   18e76:	4a0b      	ldr	r2, [pc, #44]	; (18ea4 <bt_gatt_store_ccc+0x7c>)
   18e78:	4b0b      	ldr	r3, [pc, #44]	; (18ea8 <bt_gatt_store_ccc+0x80>)
   18e7a:	1ad2      	subs	r2, r2, r3
   18e7c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
   18e7e:	0192      	lsls	r2, r2, #6
   18e80:	4601      	mov	r1, r0
   18e82:	f042 0201 	orr.w	r2, r2, #1
   18e86:	4809      	ldr	r0, [pc, #36]	; (18eac <bt_gatt_store_ccc+0x84>)
   18e88:	f005 fb88 	bl	1e59c <log_1>
}
   18e8c:	4620      	mov	r0, r4
   18e8e:	b040      	add	sp, #256	; 0x100
   18e90:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   18e92:	9400      	str	r4, [sp, #0]
   18e94:	e7e0      	b.n	18e58 <bt_gatt_store_ccc+0x30>
		str = NULL;
   18e96:	4611      	mov	r1, r2
   18e98:	e7e8      	b.n	18e6c <bt_gatt_store_ccc+0x44>
   18e9a:	bf00      	nop
   18e9c:	00017b51 	.word	0x00017b51
   18ea0:	00025aca 	.word	0x00025aca
   18ea4:	00023574 	.word	0x00023574
   18ea8:	0002353c 	.word	0x0002353c
   18eac:	00025b71 	.word	0x00025b71

00018eb0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18eb2:	4604      	mov	r4, r0
   18eb4:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18eb6:	4603      	mov	r3, r0
   18eb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18ebc:	2001      	movs	r0, #1
   18ebe:	4a37      	ldr	r2, [pc, #220]	; (18f9c <bt_gatt_disconnected+0xec>)
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18ec0:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18ec4:	f008 fda9 	bl	21a1a <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18ec8:	7a20      	ldrb	r0, [r4, #8]
   18eca:	4629      	mov	r1, r5
   18ecc:	f007 fc1c 	bl	20708 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18ed0:	2800      	cmp	r0, #0
   18ed2:	d035      	beq.n	18f40 <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   18ed4:	4629      	mov	r1, r5
   18ed6:	7a20      	ldrb	r0, [r4, #8]
   18ed8:	f7ff ffa6 	bl	18e28 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   18edc:	4620      	mov	r0, r4
   18ede:	f7ff f833 	bl	17f48 <find_cf_cfg>
	if (!cfg) {
   18ee2:	4606      	mov	r6, r0
   18ee4:	2800      	cmp	r0, #0
   18ee6:	d04a      	beq.n	18f7e <bt_gatt_disconnected+0xce>
		if (conn->id) {
   18ee8:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   18eea:	3608      	adds	r6, #8
		if (conn->id) {
   18eec:	2a00      	cmp	r2, #0
   18eee:	d048      	beq.n	18f82 <bt_gatt_disconnected+0xd2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   18ef0:	af02      	add	r7, sp, #8
   18ef2:	2104      	movs	r1, #4
   18ef4:	4638      	mov	r0, r7
   18ef6:	f004 fe4a 	bl	1db8e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   18efa:	9700      	str	r7, [sp, #0]
   18efc:	462b      	mov	r3, r5
   18efe:	4a28      	ldr	r2, [pc, #160]	; (18fa0 <bt_gatt_disconnected+0xf0>)
   18f00:	2124      	movs	r1, #36	; 0x24
   18f02:	a803      	add	r0, sp, #12
   18f04:	f7fa fba0 	bl	13648 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   18f08:	7a23      	ldrb	r3, [r4, #8]
   18f0a:	2701      	movs	r7, #1
   18f0c:	b93b      	cbnz	r3, 18f1e <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   18f0e:	2300      	movs	r3, #0
   18f10:	9300      	str	r3, [sp, #0]
   18f12:	4a23      	ldr	r2, [pc, #140]	; (18fa0 <bt_gatt_disconnected+0xf0>)
   18f14:	462b      	mov	r3, r5
   18f16:	2124      	movs	r1, #36	; 0x24
   18f18:	a803      	add	r0, sp, #12
   18f1a:	f7fa fb95 	bl	13648 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   18f1e:	4631      	mov	r1, r6
   18f20:	463a      	mov	r2, r7
   18f22:	a803      	add	r0, sp, #12
   18f24:	f7f8 fccc 	bl	118c0 <settings_save_one>
	if (err) {
   18f28:	4601      	mov	r1, r0
   18f2a:	b148      	cbz	r0, 18f40 <bt_gatt_disconnected+0x90>
   18f2c:	4a1d      	ldr	r2, [pc, #116]	; (18fa4 <bt_gatt_disconnected+0xf4>)
   18f2e:	4b1e      	ldr	r3, [pc, #120]	; (18fa8 <bt_gatt_disconnected+0xf8>)
		BT_ERR("Failed to store Client Features (err %d)", err);
   18f30:	481e      	ldr	r0, [pc, #120]	; (18fac <bt_gatt_disconnected+0xfc>)
   18f32:	1ad2      	subs	r2, r2, r3
   18f34:	08d2      	lsrs	r2, r2, #3
   18f36:	0192      	lsls	r2, r2, #6
   18f38:	f042 0201 	orr.w	r2, r2, #1
   18f3c:	f005 fb2e 	bl	1e59c <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18f40:	7a20      	ldrb	r0, [r4, #8]
   18f42:	4629      	mov	r1, r5
   18f44:	f007 fbe0 	bl	20708 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   18f48:	b150      	cbz	r0, 18f60 <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
   18f4a:	7a23      	ldrb	r3, [r4, #8]
   18f4c:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   18f50:	4a17      	ldr	r2, [pc, #92]	; (18fb0 <bt_gatt_disconnected+0x100>)
		struct addr_with_id addr_with_id = {
   18f52:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   18f54:	ab03      	add	r3, sp, #12
   18f56:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18f5a:	2001      	movs	r0, #1
   18f5c:	f008 fd5d 	bl	21a1a <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   18f60:	4620      	mov	r0, r4
   18f62:	f7fe fff1 	bl	17f48 <find_cf_cfg>
	if (!cfg) {
   18f66:	4606      	mov	r6, r0
   18f68:	b138      	cbz	r0, 18f7a <bt_gatt_disconnected+0xca>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18f6a:	7a20      	ldrb	r0, [r4, #8]
   18f6c:	4629      	mov	r1, r5
   18f6e:	f007 fbcb 	bl	20708 <bt_addr_le_is_bonded>
   18f72:	b940      	cbnz	r0, 18f86 <bt_gatt_disconnected+0xd6>
		clear_cf_cfg(cfg);
   18f74:	4630      	mov	r0, r6
   18f76:	f008 fbe1 	bl	2173c <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   18f7a:	b00d      	add	sp, #52	; 0x34
   18f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   18f7e:	4607      	mov	r7, r0
   18f80:	e7c5      	b.n	18f0e <bt_gatt_disconnected+0x5e>
   18f82:	2701      	movs	r7, #1
   18f84:	e7c3      	b.n	18f0e <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18f86:	4629      	mov	r1, r5
   18f88:	1c70      	adds	r0, r6, #1
   18f8a:	f008 fbb7 	bl	216fc <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18f8e:	f06f 0102 	mvn.w	r1, #2
   18f92:	f106 000c 	add.w	r0, r6, #12
   18f96:	f008 fbc2 	bl	2171e <atomic_and>
}
   18f9a:	e7ee      	b.n	18f7a <bt_gatt_disconnected+0xca>
   18f9c:	00018299 	.word	0x00018299
   18fa0:	00025bbb 	.word	0x00025bbb
   18fa4:	00023574 	.word	0x00023574
   18fa8:	0002353c 	.word	0x0002353c
   18fac:	00025b8f 	.word	0x00025b8f
   18fb0:	00017c15 	.word	0x00017c15

00018fb4 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   18fb4:	4b10      	ldr	r3, [pc, #64]	; (18ff8 <get_io_capa+0x44>)
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	b1bb      	cbz	r3, 18fea <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   18fba:	681a      	ldr	r2, [r3, #0]
   18fbc:	b142      	cbz	r2, 18fd0 <get_io_capa+0x1c>
   18fbe:	6859      	ldr	r1, [r3, #4]
   18fc0:	b131      	cbz	r1, 18fd0 <get_io_capa+0x1c>
   18fc2:	6899      	ldr	r1, [r3, #8]
   18fc4:	b911      	cbnz	r1, 18fcc <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   18fc6:	490d      	ldr	r1, [pc, #52]	; (18ffc <get_io_capa+0x48>)
   18fc8:	7809      	ldrb	r1, [r1, #0]
   18fca:	b939      	cbnz	r1, 18fdc <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   18fcc:	2004      	movs	r0, #4
   18fce:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   18fd0:	490a      	ldr	r1, [pc, #40]	; (18ffc <get_io_capa+0x48>)
   18fd2:	7809      	ldrb	r1, [r1, #0]
   18fd4:	b111      	cbz	r1, 18fdc <get_io_capa+0x28>
   18fd6:	b10a      	cbz	r2, 18fdc <get_io_capa+0x28>
   18fd8:	6899      	ldr	r1, [r3, #8]
   18fda:	b941      	cbnz	r1, 18fee <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   18fdc:	685b      	ldr	r3, [r3, #4]
   18fde:	b943      	cbnz	r3, 18ff2 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   18fe0:	2a00      	cmp	r2, #0
   18fe2:	bf0c      	ite	eq
   18fe4:	2003      	moveq	r0, #3
   18fe6:	2000      	movne	r0, #0
   18fe8:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   18fea:	2003      	movs	r0, #3
   18fec:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   18fee:	2001      	movs	r0, #1
   18ff0:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   18ff2:	2002      	movs	r0, #2
	}
}
   18ff4:	4770      	bx	lr
   18ff6:	bf00      	nop
   18ff8:	20001eec 	.word	0x20001eec
   18ffc:	200022b7 	.word	0x200022b7

00019000 <smp_dhkey_generate>:
}
#endif /* CONFIG_BT_PERIPHERAL */

static void bt_smp_dhkey_ready(const uint8_t *dhkey);
static uint8_t smp_dhkey_generate(struct bt_smp *smp)
{
   19000:	b538      	push	{r3, r4, r5, lr}
	int err;

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   19002:	1d05      	adds	r5, r0, #4
{
   19004:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   19006:	2108      	movs	r1, #8
   19008:	4628      	mov	r0, r5
   1900a:	f008 fd6f 	bl	21aec <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1900e:	490b      	ldr	r1, [pc, #44]	; (1903c <smp_dhkey_generate+0x3c>)
   19010:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19014:	f7fc fd94 	bl	15b40 <bt_dh_key_gen>
	if (err) {
   19018:	b170      	cbz	r0, 19038 <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1901a:	2108      	movs	r1, #8
   1901c:	4628      	mov	r0, r5
   1901e:	f008 fd79 	bl	21b14 <atomic_clear_bit>
   19022:	4b07      	ldr	r3, [pc, #28]	; (19040 <smp_dhkey_generate+0x40>)
   19024:	4907      	ldr	r1, [pc, #28]	; (19044 <smp_dhkey_generate+0x44>)

		BT_ERR("Failed to generate DHKey");
   19026:	4808      	ldr	r0, [pc, #32]	; (19048 <smp_dhkey_generate+0x48>)
   19028:	1ac9      	subs	r1, r1, r3
   1902a:	08c9      	lsrs	r1, r1, #3
   1902c:	0189      	lsls	r1, r1, #6
   1902e:	f041 0101 	orr.w	r1, r1, #1
   19032:	f005 faa6 	bl	1e582 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   19036:	2008      	movs	r0, #8
	}

	return 0;
}
   19038:	bd38      	pop	{r3, r4, r5, pc}
   1903a:	bf00      	nop
   1903c:	000222a5 	.word	0x000222a5
   19040:	0002353c 	.word	0x0002353c
   19044:	000235b4 	.word	0x000235b4
   19048:	00025bcc 	.word	0x00025bcc

0001904c <get_auth.isra.0>:
	if (sc_supported) {
   1904c:	4b0c      	ldr	r3, [pc, #48]	; (19080 <get_auth.isra.0+0x34>)
   1904e:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   19050:	b510      	push	{r4, lr}
	if (sc_supported) {
   19052:	b17b      	cbz	r3, 19074 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   19054:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   19058:	f7ff ffac 	bl	18fb4 <get_io_capa>
	if (bondable) {
   1905c:	4b09      	ldr	r3, [pc, #36]	; (19084 <get_auth.isra.0+0x38>)
   1905e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   19060:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   19062:	bf0c      	ite	eq
   19064:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   19068:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1906c:	b12b      	cbz	r3, 1907a <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1906e:	f044 0001 	orr.w	r0, r4, #1
}
   19072:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   19074:	f000 0407 	and.w	r4, r0, #7
   19078:	e7ee      	b.n	19058 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1907a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1907e:	e7f8      	b.n	19072 <get_auth.isra.0+0x26>
   19080:	200022b7 	.word	0x200022b7
   19084:	20000628 	.word	0x20000628

00019088 <smp_chan_get>:
{
   19088:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1908a:	2106      	movs	r1, #6
   1908c:	f007 fee3 	bl	20e56 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19090:	4604      	mov	r4, r0
   19092:	b958      	cbnz	r0, 190ac <smp_chan_get+0x24>
   19094:	4907      	ldr	r1, [pc, #28]	; (190b4 <smp_chan_get+0x2c>)
   19096:	4b08      	ldr	r3, [pc, #32]	; (190b8 <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   19098:	4808      	ldr	r0, [pc, #32]	; (190bc <smp_chan_get+0x34>)
   1909a:	1ac9      	subs	r1, r1, r3
   1909c:	08c9      	lsrs	r1, r1, #3
   1909e:	0189      	lsls	r1, r1, #6
   190a0:	f041 0101 	orr.w	r1, r1, #1
   190a4:	f005 fa6d 	bl	1e582 <log_0>
}
   190a8:	4620      	mov	r0, r4
   190aa:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   190ac:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   190b0:	e7fa      	b.n	190a8 <smp_chan_get+0x20>
   190b2:	bf00      	nop
   190b4:	000235b4 	.word	0x000235b4
   190b8:	0002353c 	.word	0x0002353c
   190bc:	00025be5 	.word	0x00025be5

000190c0 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   190c0:	4b0c      	ldr	r3, [pc, #48]	; (190f4 <bt_smp_accept+0x34>)
{
   190c2:	b510      	push	{r4, lr}
   190c4:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
   190c6:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   190ca:	b928      	cbnz	r0, 190d8 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   190cc:	4a0a      	ldr	r2, [pc, #40]	; (190f8 <bt_smp_accept+0x38>)
   190ce:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   190d2:	33f0      	adds	r3, #240	; 0xf0
   190d4:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   190d6:	bd10      	pop	{r4, pc}
   190d8:	4b08      	ldr	r3, [pc, #32]	; (190fc <bt_smp_accept+0x3c>)
   190da:	4a09      	ldr	r2, [pc, #36]	; (19100 <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
   190dc:	4809      	ldr	r0, [pc, #36]	; (19104 <bt_smp_accept+0x44>)
   190de:	1ad2      	subs	r2, r2, r3
   190e0:	08d2      	lsrs	r2, r2, #3
   190e2:	0192      	lsls	r2, r2, #6
   190e4:	f042 0201 	orr.w	r2, r2, #1
   190e8:	4621      	mov	r1, r4
   190ea:	f005 fa57 	bl	1e59c <log_1>
	return -ENOMEM;
   190ee:	f06f 000b 	mvn.w	r0, #11
   190f2:	e7f0      	b.n	190d6 <bt_smp_accept+0x16>
   190f4:	200018c0 	.word	0x200018c0
   190f8:	00023e20 	.word	0x00023e20
   190fc:	0002353c 	.word	0x0002353c
   19100:	000235b4 	.word	0x000235b4
   19104:	00025c00 	.word	0x00025c00

00019108 <smp_init>:
{
   19108:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1910a:	22f0      	movs	r2, #240	; 0xf0
{
   1910c:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1910e:	2100      	movs	r1, #0
   19110:	f007 f8bc 	bl	2028c <memset>
	if (bt_rand(smp->prnd, 16)) {
   19114:	2110      	movs	r1, #16
   19116:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1911a:	f002 fe0f 	bl	1bd3c <bt_rand>
   1911e:	4604      	mov	r4, r0
   19120:	b948      	cbnz	r0, 19136 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   19122:	2105      	movs	r1, #5
   19124:	4628      	mov	r0, r5
   19126:	f008 fce1 	bl	21aec <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1912a:	f7fc fcf9 	bl	15b20 <bt_pub_key_get>
   1912e:	4b03      	ldr	r3, [pc, #12]	; (1913c <smp_init+0x34>)
   19130:	6018      	str	r0, [r3, #0]
}
   19132:	4620      	mov	r0, r4
   19134:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   19136:	2408      	movs	r4, #8
   19138:	e7fb      	b.n	19132 <smp_init+0x2a>
   1913a:	bf00      	nop
   1913c:	20001f80 	.word	0x20001f80

00019140 <smp_find>:
{
   19140:	4601      	mov	r1, r0
   19142:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   19144:	4803      	ldr	r0, [pc, #12]	; (19154 <smp_find+0x14>)
   19146:	f008 fdb0 	bl	21caa <atomic_test_bit>
   1914a:	2800      	cmp	r0, #0
}
   1914c:	4802      	ldr	r0, [pc, #8]	; (19158 <smp_find+0x18>)
   1914e:	bf08      	it	eq
   19150:	2000      	moveq	r0, #0
   19152:	bd08      	pop	{r3, pc}
   19154:	200018c4 	.word	0x200018c4
   19158:	200018c0 	.word	0x200018c0

0001915c <compute_and_check_and_send_slave_dhcheck>:
{
   1915c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   19160:	2210      	movs	r2, #16
{
   19162:	b0a3      	sub	sp, #140	; 0x8c
   19164:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   19166:	2100      	movs	r1, #0
   19168:	eb0d 0002 	add.w	r0, sp, r2
   1916c:	f007 f88e 	bl	2028c <memset>
	switch (smp->method) {
   19170:	7a21      	ldrb	r1, [r4, #8]
   19172:	2905      	cmp	r1, #5
   19174:	f200 8099 	bhi.w	192aa <compute_and_check_and_send_slave_dhcheck+0x14e>
   19178:	e8df f001 	tbb	[pc, r1]
   1917c:	09030309 	.word	0x09030309
   19180:	8e97      	.short	0x8e97
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   19182:	2204      	movs	r2, #4
   19184:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   19188:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1918a:	f007 f854 	bl	20236 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1918e:	4b79      	ldr	r3, [pc, #484]	; (19374 <compute_and_check_and_send_slave_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
   19190:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   19194:	aa14      	add	r2, sp, #80	; 0x50
   19196:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1919a:	6818      	ldr	r0, [r3, #0]
   1919c:	6859      	ldr	r1, [r3, #4]
   1919e:	4615      	mov	r5, r2
   191a0:	c503      	stmia	r5!, {r0, r1}
   191a2:	3308      	adds	r3, #8
   191a4:	42b3      	cmp	r3, r6
   191a6:	462a      	mov	r2, r5
   191a8:	d1f7      	bne.n	1919a <compute_and_check_and_send_slave_dhcheck+0x3e>
   191aa:	6818      	ldr	r0, [r3, #0]
   191ac:	791b      	ldrb	r3, [r3, #4]
   191ae:	6028      	str	r0, [r5, #0]
   191b0:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   191b2:	ad0c      	add	r5, sp, #48	; 0x30
   191b4:	2220      	movs	r2, #32
   191b6:	f104 0197 	add.w	r1, r4, #151	; 0x97
   191ba:	4628      	mov	r0, r5
   191bc:	f008 fc8a 	bl	21ad4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   191c0:	486d      	ldr	r0, [pc, #436]	; (19378 <compute_and_check_and_send_slave_dhcheck+0x21c>)
   191c2:	ab08      	add	r3, sp, #32
   191c4:	2220      	movs	r2, #32
   191c6:	4629      	mov	r1, r5
   191c8:	f008 fcb3 	bl	21b32 <bt_smp_aes_cmac>
	if (err) {
   191cc:	2800      	cmp	r0, #0
   191ce:	f040 80c7 	bne.w	19360 <compute_and_check_and_send_slave_dhcheck+0x204>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   191d2:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   191d6:	2210      	movs	r2, #16
   191d8:	4639      	mov	r1, r7
   191da:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   191de:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   191e2:	f008 fc77 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   191e6:	2210      	movs	r2, #16
   191e8:	4641      	mov	r1, r8
   191ea:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   191ee:	f008 fc71 	bl	21ad4 <sys_memcpy_swap>
	m[37] = a1->type;
   191f2:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   191f6:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   191fa:	2206      	movs	r2, #6
   191fc:	f109 0190 	add.w	r1, r9, #144	; 0x90
   19200:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   19204:	f008 fc66 	bl	21ad4 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   19208:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1920c:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   19210:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   19214:	2206      	movs	r2, #6
   19216:	f109 0197 	add.w	r1, r9, #151	; 0x97
   1921a:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1921e:	f008 fc59 	bl	21ad4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   19222:	4633      	mov	r3, r6
   19224:	2235      	movs	r2, #53	; 0x35
   19226:	a914      	add	r1, sp, #80	; 0x50
   19228:	a808      	add	r0, sp, #32
   1922a:	f008 fc82 	bl	21b32 <bt_smp_aes_cmac>
	if (err) {
   1922e:	2800      	cmp	r0, #0
   19230:	f040 8096 	bne.w	19360 <compute_and_check_and_send_slave_dhcheck+0x204>
	sys_mem_swap(mackey, 16);
   19234:	4630      	mov	r0, r6
   19236:	f008 fcb7 	bl	21ba8 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1923a:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   1923e:	2301      	movs	r3, #1
   19240:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   19244:	2235      	movs	r2, #53	; 0x35
   19246:	464b      	mov	r3, r9
   19248:	a914      	add	r1, sp, #80	; 0x50
   1924a:	a808      	add	r0, sp, #32
   1924c:	f008 fc71 	bl	21b32 <bt_smp_aes_cmac>
	if (err) {
   19250:	2800      	cmp	r0, #0
   19252:	f040 8085 	bne.w	19360 <compute_and_check_and_send_slave_dhcheck+0x204>
	sys_mem_swap(ltk, 16);
   19256:	4648      	mov	r0, r9
   19258:	f008 fca6 	bl	21ba8 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1925c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   19260:	aa14      	add	r2, sp, #80	; 0x50
   19262:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   19264:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   19268:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1926a:	9301      	str	r3, [sp, #4]
   1926c:	f104 0311 	add.w	r3, r4, #17
   19270:	9202      	str	r2, [sp, #8]
   19272:	9300      	str	r3, [sp, #0]
   19274:	463a      	mov	r2, r7
   19276:	ab04      	add	r3, sp, #16
   19278:	4641      	mov	r1, r8
   1927a:	4630      	mov	r0, r6
   1927c:	f008 fca2 	bl	21bc4 <smp_f6>
   19280:	b1f8      	cbz	r0, 192c2 <compute_and_check_and_send_slave_dhcheck+0x166>
   19282:	493e      	ldr	r1, [pc, #248]	; (1937c <compute_and_check_and_send_slave_dhcheck+0x220>)
   19284:	4b3e      	ldr	r3, [pc, #248]	; (19380 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate local DHKey check failed");
   19286:	483f      	ldr	r0, [pc, #252]	; (19384 <compute_and_check_and_send_slave_dhcheck+0x228>)
   19288:	1ac9      	subs	r1, r1, r3
   1928a:	08c9      	lsrs	r1, r1, #3
   1928c:	0189      	lsls	r1, r1, #6
   1928e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   19292:	f005 f976 	bl	1e582 <log_0>
   19296:	e012      	b.n	192be <compute_and_check_and_send_slave_dhcheck+0x162>
		if (smp->oobd_remote) {
   19298:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1929c:	2900      	cmp	r1, #0
   1929e:	f43f af76 	beq.w	1918e <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   192a2:	2210      	movs	r2, #16
   192a4:	eb0d 0002 	add.w	r0, sp, r2
   192a8:	e76f      	b.n	1918a <compute_and_check_and_send_slave_dhcheck+0x2e>
   192aa:	4a34      	ldr	r2, [pc, #208]	; (1937c <compute_and_check_and_send_slave_dhcheck+0x220>)
   192ac:	4b34      	ldr	r3, [pc, #208]	; (19380 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   192ae:	4836      	ldr	r0, [pc, #216]	; (19388 <compute_and_check_and_send_slave_dhcheck+0x22c>)
   192b0:	1ad2      	subs	r2, r2, r3
   192b2:	08d2      	lsrs	r2, r2, #3
   192b4:	0192      	lsls	r2, r2, #6
   192b6:	f042 0201 	orr.w	r2, r2, #1
   192ba:	f005 f96f 	bl	1e59c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   192be:	2008      	movs	r0, #8
   192c0:	e049      	b.n	19356 <compute_and_check_and_send_slave_dhcheck+0x1fa>
	if (smp->method == LE_SC_OOB) {
   192c2:	7a23      	ldrb	r3, [r4, #8]
   192c4:	2b05      	cmp	r3, #5
   192c6:	d107      	bne.n	192d8 <compute_and_check_and_send_slave_dhcheck+0x17c>
		if (smp->oobd_local) {
   192c8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   192cc:	2210      	movs	r2, #16
   192ce:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   192d2:	b1e1      	cbz	r1, 1930e <compute_and_check_and_send_slave_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   192d4:	f006 ffaf 	bl	20236 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   192d8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   192dc:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   192de:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   192e2:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   192e4:	9301      	str	r3, [sp, #4]
   192e6:	f104 030a 	add.w	r3, r4, #10
   192ea:	9202      	str	r2, [sp, #8]
   192ec:	9300      	str	r3, [sp, #0]
   192ee:	4642      	mov	r2, r8
   192f0:	ab04      	add	r3, sp, #16
   192f2:	4639      	mov	r1, r7
   192f4:	4630      	mov	r0, r6
   192f6:	f008 fc65 	bl	21bc4 <smp_f6>
   192fa:	b158      	cbz	r0, 19314 <compute_and_check_and_send_slave_dhcheck+0x1b8>
   192fc:	491f      	ldr	r1, [pc, #124]	; (1937c <compute_and_check_and_send_slave_dhcheck+0x220>)
   192fe:	4b20      	ldr	r3, [pc, #128]	; (19380 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate remote DHKey check failed");
   19300:	4822      	ldr	r0, [pc, #136]	; (1938c <compute_and_check_and_send_slave_dhcheck+0x230>)
   19302:	1ac9      	subs	r1, r1, r3
   19304:	08c9      	lsrs	r1, r1, #3
   19306:	0189      	lsls	r1, r1, #6
   19308:	f041 0101 	orr.w	r1, r1, #1
   1930c:	e7c1      	b.n	19292 <compute_and_check_and_send_slave_dhcheck+0x136>
			memset(r, 0, sizeof(r));
   1930e:	f006 ffbd 	bl	2028c <memset>
   19312:	e7e1      	b.n	192d8 <compute_and_check_and_send_slave_dhcheck+0x17c>
	if (memcmp(smp->e, re, 16)) {
   19314:	4629      	mov	r1, r5
   19316:	2210      	movs	r2, #16
   19318:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1931c:	f006 ff7b 	bl	20216 <memcmp>
   19320:	4605      	mov	r5, r0
   19322:	b9d8      	cbnz	r0, 1935c <compute_and_check_and_send_slave_dhcheck+0x200>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   19324:	210d      	movs	r1, #13
   19326:	4620      	mov	r0, r4
   19328:	f008 fce9 	bl	21cfe <smp_create_pdu.isra.0>
	if (!buf) {
   1932c:	4606      	mov	r6, r0
   1932e:	2800      	cmp	r0, #0
   19330:	d0c5      	beq.n	192be <compute_and_check_and_send_slave_dhcheck+0x162>
   19332:	2110      	movs	r1, #16
   19334:	3008      	adds	r0, #8
   19336:	f009 f8ab 	bl	22490 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1933a:	2210      	movs	r2, #16
   1933c:	a914      	add	r1, sp, #80	; 0x50
   1933e:	f006 ff7a 	bl	20236 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   19342:	462a      	mov	r2, r5
   19344:	4631      	mov	r1, r6
   19346:	4620      	mov	r0, r4
   19348:	f008 fc0f 	bl	21b6a <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1934c:	1d20      	adds	r0, r4, #4
   1934e:	2101      	movs	r1, #1
   19350:	f008 fbcc 	bl	21aec <atomic_set_bit>
	return 0;
   19354:	4628      	mov	r0, r5
}
   19356:	b023      	add	sp, #140	; 0x8c
   19358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1935c:	200b      	movs	r0, #11
   1935e:	e7fa      	b.n	19356 <compute_and_check_and_send_slave_dhcheck+0x1fa>
   19360:	4906      	ldr	r1, [pc, #24]	; (1937c <compute_and_check_and_send_slave_dhcheck+0x220>)
   19362:	4b07      	ldr	r3, [pc, #28]	; (19380 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate LTK failed");
   19364:	480a      	ldr	r0, [pc, #40]	; (19390 <compute_and_check_and_send_slave_dhcheck+0x234>)
   19366:	1ac9      	subs	r1, r1, r3
   19368:	08c9      	lsrs	r1, r1, #3
   1936a:	0189      	lsls	r1, r1, #6
   1936c:	f041 0101 	orr.w	r1, r1, #1
   19370:	e78f      	b.n	19292 <compute_and_check_and_send_slave_dhcheck+0x136>
   19372:	bf00      	nop
   19374:	00023713 	.word	0x00023713
   19378:	00025f0b 	.word	0x00025f0b
   1937c:	000235b4 	.word	0x000235b4
   19380:	0002353c 	.word	0x0002353c
   19384:	00025c41 	.word	0x00025c41
   19388:	00025c25 	.word	0x00025c25
   1938c:	00025c64 	.word	0x00025c64
   19390:	00025c88 	.word	0x00025c88

00019394 <smp_send_pairing_confirm>:
{
   19394:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   19396:	7a04      	ldrb	r4, [r0, #8]
   19398:	2c02      	cmp	r4, #2
{
   1939a:	4605      	mov	r5, r0
	switch (smp->method) {
   1939c:	d824      	bhi.n	193e8 <smp_send_pairing_confirm+0x54>
   1939e:	b14c      	cbz	r4, 193b4 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   193a0:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   193a4:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   193a8:	40dc      	lsrs	r4, r3
   193aa:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   193ae:	f064 047f 	orn	r4, r4, #127	; 0x7f
   193b2:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   193b4:	2103      	movs	r1, #3
   193b6:	4628      	mov	r0, r5
   193b8:	f008 fca1 	bl	21cfe <smp_create_pdu.isra.0>
	if (!buf) {
   193bc:	4606      	mov	r6, r0
   193be:	b300      	cbz	r0, 19402 <smp_send_pairing_confirm+0x6e>
   193c0:	2110      	movs	r1, #16
   193c2:	3008      	adds	r0, #8
   193c4:	f009 f864 	bl	22490 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   193c8:	9000      	str	r0, [sp, #0]
   193ca:	4816      	ldr	r0, [pc, #88]	; (19424 <smp_send_pairing_confirm+0x90>)
   193cc:	4623      	mov	r3, r4
   193ce:	6800      	ldr	r0, [r0, #0]
   193d0:	f105 0227 	add.w	r2, r5, #39	; 0x27
   193d4:	f105 0157 	add.w	r1, r5, #87	; 0x57
   193d8:	f008 fc40 	bl	21c5c <smp_f4>
   193dc:	4604      	mov	r4, r0
   193de:	b1a0      	cbz	r0, 1940a <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   193e0:	4630      	mov	r0, r6
   193e2:	f001 fc1b 	bl	1ac1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   193e6:	e00c      	b.n	19402 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   193e8:	2c03      	cmp	r4, #3
   193ea:	d00c      	beq.n	19406 <smp_send_pairing_confirm+0x72>
   193ec:	4a0e      	ldr	r2, [pc, #56]	; (19428 <smp_send_pairing_confirm+0x94>)
   193ee:	4b0f      	ldr	r3, [pc, #60]	; (1942c <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   193f0:	480f      	ldr	r0, [pc, #60]	; (19430 <smp_send_pairing_confirm+0x9c>)
   193f2:	1ad2      	subs	r2, r2, r3
   193f4:	08d2      	lsrs	r2, r2, #3
   193f6:	0192      	lsls	r2, r2, #6
   193f8:	f042 0201 	orr.w	r2, r2, #1
   193fc:	4621      	mov	r1, r4
   193fe:	f005 f8cd 	bl	1e59c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   19402:	2008      	movs	r0, #8
   19404:	e00b      	b.n	1941e <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   19406:	2400      	movs	r4, #0
   19408:	e7d4      	b.n	193b4 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   1940a:	4602      	mov	r2, r0
   1940c:	4631      	mov	r1, r6
   1940e:	4628      	mov	r0, r5
   19410:	f008 fbab 	bl	21b6a <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   19414:	1d28      	adds	r0, r5, #4
   19416:	4621      	mov	r1, r4
   19418:	f008 fb7c 	bl	21b14 <atomic_clear_bit>
	return 0;
   1941c:	4620      	mov	r0, r4
}
   1941e:	b002      	add	sp, #8
   19420:	bd70      	pop	{r4, r5, r6, pc}
   19422:	bf00      	nop
   19424:	20001f80 	.word	0x20001f80
   19428:	000235b4 	.word	0x000235b4
   1942c:	0002353c 	.word	0x0002353c
   19430:	00025c25 	.word	0x00025c25

00019434 <smp_public_key_slave>:
{
   19434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   19438:	1d06      	adds	r6, r0, #4
{
   1943a:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1943c:	210e      	movs	r1, #14
   1943e:	4630      	mov	r0, r6
   19440:	f008 fc33 	bl	21caa <atomic_test_bit>
   19444:	b998      	cbnz	r0, 1946e <smp_public_key_slave+0x3a>
	    memcmp(smp->pkey, sc_public_key, 32) == 0) {
   19446:	4b4e      	ldr	r3, [pc, #312]	; (19580 <smp_public_key_slave+0x14c>)
   19448:	2220      	movs	r2, #32
   1944a:	6819      	ldr	r1, [r3, #0]
   1944c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19450:	f006 fee1 	bl	20216 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   19454:	b958      	cbnz	r0, 1946e <smp_public_key_slave+0x3a>
   19456:	494b      	ldr	r1, [pc, #300]	; (19584 <smp_public_key_slave+0x150>)
   19458:	4b4b      	ldr	r3, [pc, #300]	; (19588 <smp_public_key_slave+0x154>)
		BT_WARN("Remote public key rejected");
   1945a:	484c      	ldr	r0, [pc, #304]	; (1958c <smp_public_key_slave+0x158>)
   1945c:	1ac9      	subs	r1, r1, r3
   1945e:	08c9      	lsrs	r1, r1, #3
   19460:	0189      	lsls	r1, r1, #6
   19462:	f041 0102 	orr.w	r1, r1, #2
   19466:	f005 f88c 	bl	1e582 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1946a:	2008      	movs	r0, #8
   1946c:	e02e      	b.n	194cc <smp_public_key_slave+0x98>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1946e:	210c      	movs	r1, #12
   19470:	4620      	mov	r0, r4
   19472:	f008 fc44 	bl	21cfe <smp_create_pdu.isra.0>
	if (!req_buf) {
   19476:	4605      	mov	r5, r0
   19478:	2800      	cmp	r0, #0
   1947a:	d0f6      	beq.n	1946a <smp_public_key_slave+0x36>
   1947c:	2140      	movs	r1, #64	; 0x40
   1947e:	3008      	adds	r0, #8
   19480:	f009 f806 	bl	22490 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   19484:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 19580 <smp_public_key_slave+0x14c>
   19488:	2220      	movs	r2, #32
   1948a:	f8d8 1000 	ldr.w	r1, [r8]
   1948e:	4607      	mov	r7, r0
   19490:	f006 fed1 	bl	20236 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   19494:	f8d8 1000 	ldr.w	r1, [r8]
   19498:	2220      	movs	r2, #32
   1949a:	4411      	add	r1, r2
   1949c:	18b8      	adds	r0, r7, r2
   1949e:	f006 feca 	bl	20236 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   194a2:	4629      	mov	r1, r5
   194a4:	2200      	movs	r2, #0
   194a6:	4620      	mov	r0, r4
   194a8:	f008 fb5f 	bl	21b6a <smp_send.isra.0>
	switch (smp->method) {
   194ac:	7a21      	ldrb	r1, [r4, #8]
   194ae:	2905      	cmp	r1, #5
   194b0:	d859      	bhi.n	19566 <smp_public_key_slave+0x132>
   194b2:	e8df f001 	tbb	[pc, r1]
   194b6:	3803      	.short	0x3803
   194b8:	5658030d 	.word	0x5658030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   194bc:	2104      	movs	r1, #4
   194be:	4620      	mov	r0, r4
   194c0:	f008 fb14 	bl	21aec <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   194c4:	f7ff ff66 	bl	19394 <smp_send_pairing_confirm>
		if (err) {
   194c8:	2800      	cmp	r0, #0
   194ca:	d03d      	beq.n	19548 <smp_public_key_slave+0x114>
}
   194cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   194d0:	2104      	movs	r1, #4
   194d2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   194d6:	f002 fc31 	bl	1bd3c <bt_rand>
   194da:	2800      	cmp	r0, #0
   194dc:	d1c5      	bne.n	1946a <smp_public_key_slave+0x36>
		smp->passkey %= 1000000;
   194de:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   194e2:	4a2b      	ldr	r2, [pc, #172]	; (19590 <smp_public_key_slave+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
   194e4:	4d2b      	ldr	r5, [pc, #172]	; (19594 <smp_public_key_slave+0x160>)
		smp->passkey %= 1000000;
   194e6:	fbb1 f3f2 	udiv	r3, r1, r2
   194ea:	fb02 1313 	mls	r3, r2, r3, r1
   194ee:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   194f2:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   194f4:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   194f8:	b163      	cbz	r3, 19514 <smp_public_key_slave+0xe0>
   194fa:	681b      	ldr	r3, [r3, #0]
   194fc:	b153      	cbz	r3, 19514 <smp_public_key_slave+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   194fe:	210b      	movs	r1, #11
   19500:	4630      	mov	r0, r6
   19502:	f008 faf3 	bl	21aec <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   19506:	682b      	ldr	r3, [r5, #0]
   19508:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1950c:	681b      	ldr	r3, [r3, #0]
   1950e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   19512:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   19514:	2103      	movs	r1, #3
   19516:	4620      	mov	r0, r4
   19518:	f008 fae8 	bl	21aec <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1951c:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1951e:	4620      	mov	r0, r4
   19520:	f008 fae4 	bl	21aec <atomic_set_bit>
		break;
   19524:	e010      	b.n	19548 <smp_public_key_slave+0x114>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   19526:	4620      	mov	r0, r4
   19528:	2103      	movs	r1, #3
   1952a:	f008 fadf 	bl	21aec <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1952e:	210e      	movs	r1, #14
   19530:	f008 fadc 	bl	21aec <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19534:	4630      	mov	r0, r6
   19536:	210a      	movs	r1, #10
   19538:	f008 fad8 	bl	21aec <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1953c:	4b15      	ldr	r3, [pc, #84]	; (19594 <smp_public_key_slave+0x160>)
   1953e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   19542:	681b      	ldr	r3, [r3, #0]
   19544:	685b      	ldr	r3, [r3, #4]
   19546:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   19548:	4630      	mov	r0, r6
   1954a:	2107      	movs	r1, #7
   1954c:	f008 face 	bl	21aec <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   19550:	2008      	movs	r0, #8
   19552:	f7ff fdf5 	bl	19140 <smp_find>
   19556:	b988      	cbnz	r0, 1957c <smp_public_key_slave+0x148>
		return smp_dhkey_generate(smp);
   19558:	4620      	mov	r0, r4
}
   1955a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   1955e:	f7ff bd4f 	b.w	19000 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19562:	2104      	movs	r1, #4
   19564:	e7db      	b.n	1951e <smp_public_key_slave+0xea>
   19566:	4b08      	ldr	r3, [pc, #32]	; (19588 <smp_public_key_slave+0x154>)
   19568:	4a06      	ldr	r2, [pc, #24]	; (19584 <smp_public_key_slave+0x150>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1956a:	480b      	ldr	r0, [pc, #44]	; (19598 <smp_public_key_slave+0x164>)
   1956c:	1ad2      	subs	r2, r2, r3
   1956e:	08d2      	lsrs	r2, r2, #3
   19570:	0192      	lsls	r2, r2, #6
   19572:	f042 0201 	orr.w	r2, r2, #1
   19576:	f005 f811 	bl	1e59c <log_1>
   1957a:	e776      	b.n	1946a <smp_public_key_slave+0x36>
	return 0;
   1957c:	2000      	movs	r0, #0
   1957e:	e7a5      	b.n	194cc <smp_public_key_slave+0x98>
   19580:	20001f80 	.word	0x20001f80
   19584:	000235b4 	.word	0x000235b4
   19588:	0002353c 	.word	0x0002353c
   1958c:	00025c9d 	.word	0x00025c9d
   19590:	000f4240 	.word	0x000f4240
   19594:	20001eec 	.word	0x20001eec
   19598:	00025c25 	.word	0x00025c25

0001959c <smp_public_key>:
{
   1959c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1959e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   195a0:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   195a4:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
   195a6:	2220      	movs	r2, #32
   195a8:	4631      	mov	r1, r6
   195aa:	4628      	mov	r0, r5
   195ac:	f006 fe43 	bl	20236 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   195b0:	2220      	movs	r2, #32
   195b2:	18b1      	adds	r1, r6, r2
   195b4:	f104 0077 	add.w	r0, r4, #119	; 0x77
   195b8:	f006 fe3d 	bl	20236 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   195bc:	4628      	mov	r0, r5
   195be:	f7fc fa09 	bl	159d4 <bt_pub_key_is_debug>
   195c2:	b940      	cbnz	r0, 195d6 <smp_public_key+0x3a>
	if (!sc_public_key) {
   195c4:	4b1a      	ldr	r3, [pc, #104]	; (19630 <smp_public_key+0x94>)
   195c6:	681d      	ldr	r5, [r3, #0]
   195c8:	bb6d      	cbnz	r5, 19626 <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   195ca:	1d20      	adds	r0, r4, #4
   195cc:	2106      	movs	r1, #6
   195ce:	f008 fa8d 	bl	21aec <atomic_set_bit>
		return 0;
   195d2:	4628      	mov	r0, r5
   195d4:	e026      	b.n	19624 <smp_public_key+0x88>
   195d6:	4b17      	ldr	r3, [pc, #92]	; (19634 <smp_public_key+0x98>)
   195d8:	4917      	ldr	r1, [pc, #92]	; (19638 <smp_public_key+0x9c>)
		BT_INFO("Remote is using Debug Public key");
   195da:	4818      	ldr	r0, [pc, #96]	; (1963c <smp_public_key+0xa0>)
   195dc:	1ac9      	subs	r1, r1, r3
   195de:	08c9      	lsrs	r1, r1, #3
   195e0:	0189      	lsls	r1, r1, #6
   195e2:	f041 0103 	orr.w	r1, r1, #3
   195e6:	f004 ffcc 	bl	1e582 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   195ea:	210e      	movs	r1, #14
   195ec:	1d20      	adds	r0, r4, #4
   195ee:	f008 fa7d 	bl	21aec <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   195f2:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   195f6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   195fa:	b933      	cbnz	r3, 1960a <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   195fc:	7a28      	ldrb	r0, [r5, #8]
   195fe:	f105 0188 	add.w	r1, r5, #136	; 0x88
   19602:	f001 f8b3 	bl	1a76c <bt_keys_get_addr>
   19606:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1960a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1960e:	2b00      	cmp	r3, #0
   19610:	d0d8      	beq.n	195c4 <smp_public_key+0x28>
   19612:	89da      	ldrh	r2, [r3, #14]
   19614:	f002 0224 	and.w	r2, r2, #36	; 0x24
   19618:	2a00      	cmp	r2, #0
   1961a:	d0d3      	beq.n	195c4 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1961c:	7b5b      	ldrb	r3, [r3, #13]
   1961e:	079b      	lsls	r3, r3, #30
   19620:	d4d0      	bmi.n	195c4 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19622:	2003      	movs	r0, #3
}
   19624:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
   19626:	4620      	mov	r0, r4
}
   19628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
   1962c:	f7ff bf02 	b.w	19434 <smp_public_key_slave>
   19630:	20001f80 	.word	0x20001f80
   19634:	0002353c 	.word	0x0002353c
   19638:	000235b4 	.word	0x000235b4
   1963c:	00025cb8 	.word	0x00025cb8

00019640 <smp_pairing_req>:
{
   19640:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   19644:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   19646:	78eb      	ldrb	r3, [r5, #3]
   19648:	3b07      	subs	r3, #7
   1964a:	2b09      	cmp	r3, #9
{
   1964c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1964e:	d904      	bls.n	1965a <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   19650:	2506      	movs	r5, #6
}
   19652:	4628      	mov	r0, r5
   19654:	b002      	add	sp, #8
   19656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   1965a:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   1965e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   19662:	b15b      	cbz	r3, 1967c <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19664:	1d26      	adds	r6, r4, #4
   19666:	210f      	movs	r1, #15
   19668:	4630      	mov	r0, r6
   1966a:	f008 fb1e 	bl	21caa <atomic_test_bit>
   1966e:	b980      	cbnz	r0, 19692 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   19670:	4620      	mov	r0, r4
   19672:	f7ff fd49 	bl	19108 <smp_init>
		if (ret) {
   19676:	b160      	cbz	r0, 19692 <smp_pairing_req+0x52>
			return ret;
   19678:	b2c5      	uxtb	r5, r0
   1967a:	e7ea      	b.n	19652 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1967c:	7a38      	ldrb	r0, [r7, #8]
   1967e:	f107 0188 	add.w	r1, r7, #136	; 0x88
   19682:	f001 f873 	bl	1a76c <bt_keys_get_addr>
   19686:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   1968a:	2800      	cmp	r0, #0
   1968c:	d1ea      	bne.n	19664 <smp_pairing_req+0x24>
	switch (sec) {
   1968e:	2508      	movs	r5, #8
   19690:	e7df      	b.n	19652 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   19692:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   19694:	2206      	movs	r2, #6
   19696:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   19698:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1969a:	f104 000a 	add.w	r0, r4, #10
   1969e:	f006 fdca 	bl	20236 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   196a2:	2302      	movs	r3, #2
   196a4:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   196a6:	78a8      	ldrb	r0, [r5, #2]
   196a8:	f7ff fcd0 	bl	1904c <get_auth.isra.0>
   196ac:	74e0      	strb	r0, [r4, #19]
   196ae:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   196b0:	f7ff fc80 	bl	18fb4 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   196b4:	4ba4      	ldr	r3, [pc, #656]	; (19948 <smp_pairing_req+0x308>)
	rsp->io_capability = get_io_capa();
   196b6:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   196b8:	781b      	ldrb	r3, [r3, #0]
   196ba:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   196bc:	2310      	movs	r3, #16
   196be:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   196c0:	792b      	ldrb	r3, [r5, #4]
   196c2:	f003 0303 	and.w	r3, r3, #3
   196c6:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   196c8:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   196ca:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   196ce:	f003 0301 	and.w	r3, r3, #1
   196d2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   196d4:	d00c      	beq.n	196f0 <smp_pairing_req+0xb0>
   196d6:	78ab      	ldrb	r3, [r5, #2]
   196d8:	0719      	lsls	r1, r3, #28
   196da:	d509      	bpl.n	196f0 <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   196dc:	2105      	movs	r1, #5
   196de:	4630      	mov	r0, r6
   196e0:	f008 fa04 	bl	21aec <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   196e4:	7d63      	ldrb	r3, [r4, #21]
   196e6:	f003 0302 	and.w	r3, r3, #2
   196ea:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   196ec:	2300      	movs	r3, #0
   196ee:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   196f0:	7ce3      	ldrb	r3, [r4, #19]
   196f2:	069a      	lsls	r2, r3, #26
   196f4:	d506      	bpl.n	19704 <smp_pairing_req+0xc4>
   196f6:	78ab      	ldrb	r3, [r5, #2]
   196f8:	069b      	lsls	r3, r3, #26
   196fa:	d503      	bpl.n	19704 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   196fc:	2114      	movs	r1, #20
   196fe:	4630      	mov	r0, r6
   19700:	f008 f9f4 	bl	21aec <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   19704:	7da3      	ldrb	r3, [r4, #22]
   19706:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1970a:	7d63      	ldrb	r3, [r4, #21]
   1970c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   19710:	7ce3      	ldrb	r3, [r4, #19]
   19712:	07d8      	lsls	r0, r3, #31
   19714:	d506      	bpl.n	19724 <smp_pairing_req+0xe4>
   19716:	78ab      	ldrb	r3, [r5, #2]
   19718:	07d9      	lsls	r1, r3, #31
   1971a:	d503      	bpl.n	19724 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1971c:	210d      	movs	r1, #13
   1971e:	4630      	mov	r0, r6
   19720:	f008 f9e4 	bl	21aec <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   19724:	2103      	movs	r1, #3
   19726:	4630      	mov	r0, r6
   19728:	f008 f9e0 	bl	21aec <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1972c:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1972e:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19730:	f008 fabb 	bl	21caa <atomic_test_bit>
   19734:	bb28      	cbnz	r0, 19782 <smp_pairing_req+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19736:	2d04      	cmp	r5, #4
   19738:	d81a      	bhi.n	19770 <smp_pairing_req+0x130>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1973a:	7ca2      	ldrb	r2, [r4, #18]
   1973c:	7ae3      	ldrb	r3, [r4, #11]
   1973e:	4013      	ands	r3, r2
   19740:	07da      	lsls	r2, r3, #31
   19742:	d437      	bmi.n	197b4 <smp_pairing_req+0x174>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19744:	7b20      	ldrb	r0, [r4, #12]
   19746:	7ce3      	ldrb	r3, [r4, #19]
   19748:	4318      	orrs	r0, r3
   1974a:	f010 0004 	ands.w	r0, r0, #4
   1974e:	d00f      	beq.n	19770 <smp_pairing_req+0x130>
	method = gen_method_legacy[remote_io][get_io_capa()];
   19750:	f7ff fc30 	bl	18fb4 <get_io_capa>
   19754:	4b7d      	ldr	r3, [pc, #500]	; (1994c <smp_pairing_req+0x30c>)
   19756:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1975a:	441d      	add	r5, r3
   1975c:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1975e:	2804      	cmp	r0, #4
   19760:	d106      	bne.n	19770 <smp_pairing_req+0x130>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   19762:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   19766:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   19768:	2b00      	cmp	r3, #0
   1976a:	bf0c      	ite	eq
   1976c:	2002      	moveq	r0, #2
   1976e:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   19770:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   19772:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   19776:	4620      	mov	r0, r4
   19778:	f008 faa0 	bl	21cbc <update_keys_check>
   1977c:	bb00      	cbnz	r0, 197c0 <smp_pairing_req+0x180>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1977e:	2503      	movs	r5, #3
   19780:	e767      	b.n	19652 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   19782:	7b20      	ldrb	r0, [r4, #12]
   19784:	7ce2      	ldrb	r2, [r4, #19]
   19786:	ea00 0302 	and.w	r3, r0, r2
   1978a:	071b      	lsls	r3, r3, #28
   1978c:	d504      	bpl.n	19798 <smp_pairing_req+0x158>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1978e:	7ca1      	ldrb	r1, [r4, #18]
   19790:	7ae3      	ldrb	r3, [r4, #11]
   19792:	430b      	orrs	r3, r1
   19794:	07d9      	lsls	r1, r3, #31
   19796:	d40f      	bmi.n	197b8 <smp_pairing_req+0x178>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19798:	2d04      	cmp	r5, #4
   1979a:	d80f      	bhi.n	197bc <smp_pairing_req+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1979c:	4310      	orrs	r0, r2
   1979e:	f010 0004 	ands.w	r0, r0, #4
   197a2:	d0e5      	beq.n	19770 <smp_pairing_req+0x130>
	return gen_method_sc[remote_io][get_io_capa()];
   197a4:	f7ff fc06 	bl	18fb4 <get_io_capa>
   197a8:	4b69      	ldr	r3, [pc, #420]	; (19950 <smp_pairing_req+0x310>)
   197aa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   197ae:	441d      	add	r5, r3
   197b0:	5c28      	ldrb	r0, [r5, r0]
   197b2:	e7dd      	b.n	19770 <smp_pairing_req+0x130>
		return LEGACY_OOB;
   197b4:	2006      	movs	r0, #6
   197b6:	e7db      	b.n	19770 <smp_pairing_req+0x130>
			return LE_SC_OOB;
   197b8:	2005      	movs	r0, #5
   197ba:	e7d9      	b.n	19770 <smp_pairing_req+0x130>
		return JUST_WORKS;
   197bc:	2000      	movs	r0, #0
   197be:	e7d7      	b.n	19770 <smp_pairing_req+0x130>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   197c0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   197c4:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   197c6:	2b03      	cmp	r3, #3
   197c8:	d034      	beq.n	19834 <smp_pairing_req+0x1f4>
   197ca:	d822      	bhi.n	19812 <smp_pairing_req+0x1d2>
   197cc:	3b01      	subs	r3, #1
   197ce:	2b01      	cmp	r3, #1
   197d0:	f63f af5d 	bhi.w	1968e <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   197d4:	2105      	movs	r1, #5
   197d6:	4630      	mov	r0, r6
   197d8:	f008 fa67 	bl	21caa <atomic_test_bit>
   197dc:	2800      	cmp	r0, #0
   197de:	f040 80c5 	bne.w	1996c <smp_pairing_req+0x32c>
	struct bt_conn *conn = smp->chan.chan.conn;
   197e2:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   197e6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   197ea:	7a28      	ldrb	r0, [r5, #8]
   197ec:	f001 f84e 	bl	1a88c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   197f0:	7a21      	ldrb	r1, [r4, #8]
   197f2:	b318      	cbz	r0, 1983c <smp_pairing_req+0x1fc>
   197f4:	7b43      	ldrb	r3, [r0, #13]
   197f6:	07db      	lsls	r3, r3, #31
   197f8:	d520      	bpl.n	1983c <smp_pairing_req+0x1fc>
   197fa:	b9f9      	cbnz	r1, 1983c <smp_pairing_req+0x1fc>
   197fc:	4b55      	ldr	r3, [pc, #340]	; (19954 <smp_pairing_req+0x314>)
   197fe:	4956      	ldr	r1, [pc, #344]	; (19958 <smp_pairing_req+0x318>)
		BT_ERR("JustWorks failed, authenticated keys present");
   19800:	4856      	ldr	r0, [pc, #344]	; (1995c <smp_pairing_req+0x31c>)
   19802:	1ac9      	subs	r1, r1, r3
   19804:	08c9      	lsrs	r1, r1, #3
   19806:	0189      	lsls	r1, r1, #6
   19808:	f041 0101 	orr.w	r1, r1, #1
   1980c:	f004 feb9 	bl	1e582 <log_0>
	if (ret) {
   19810:	e73d      	b.n	1968e <smp_pairing_req+0x4e>
	switch (sec) {
   19812:	2b04      	cmp	r3, #4
   19814:	f47f af3b 	bne.w	1968e <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   19818:	7d23      	ldrb	r3, [r4, #20]
   1981a:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1981c:	4293      	cmp	r3, r2
   1981e:	bf28      	it	cs
   19820:	4613      	movcs	r3, r2
   19822:	2b10      	cmp	r3, #16
   19824:	f47f af14 	bne.w	19650 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19828:	2105      	movs	r1, #5
   1982a:	4630      	mov	r0, r6
   1982c:	f008 fa3d 	bl	21caa <atomic_test_bit>
   19830:	2800      	cmp	r0, #0
   19832:	d0a4      	beq.n	1977e <smp_pairing_req+0x13e>
		if (smp->method == JUST_WORKS) {
   19834:	7a23      	ldrb	r3, [r4, #8]
   19836:	2b00      	cmp	r3, #0
   19838:	d1cc      	bne.n	197d4 <smp_pairing_req+0x194>
   1983a:	e7a0      	b.n	1977e <smp_pairing_req+0x13e>
	switch (smp->method) {
   1983c:	2906      	cmp	r1, #6
   1983e:	d869      	bhi.n	19914 <smp_pairing_req+0x2d4>
   19840:	e8df f001 	tbb	[pc, r1]
   19844:	68335e1b 	.word	0x68335e1b
   19848:	6868      	.short	0x6868
   1984a:	04          	.byte	0x04
   1984b:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1984c:	4d44      	ldr	r5, [pc, #272]	; (19960 <smp_pairing_req+0x320>)
   1984e:	682b      	ldr	r3, [r5, #0]
   19850:	2b00      	cmp	r3, #0
   19852:	d06a      	beq.n	1992a <smp_pairing_req+0x2ea>
   19854:	68db      	ldr	r3, [r3, #12]
   19856:	2b00      	cmp	r3, #0
   19858:	d067      	beq.n	1992a <smp_pairing_req+0x2ea>
			struct bt_conn_oob_info info = {
   1985a:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1985c:	210a      	movs	r1, #10
   1985e:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   19860:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19864:	f008 f942 	bl	21aec <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   19868:	682b      	ldr	r3, [r5, #0]
   1986a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1986e:	68db      	ldr	r3, [r3, #12]
   19870:	a901      	add	r1, sp, #4
   19872:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19874:	7a23      	ldrb	r3, [r4, #8]
   19876:	2b00      	cmp	r3, #0
   19878:	d159      	bne.n	1992e <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1987a:	210f      	movs	r1, #15
   1987c:	4630      	mov	r0, r6
   1987e:	f008 fa14 	bl	21caa <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19882:	4605      	mov	r5, r0
   19884:	2800      	cmp	r0, #0
   19886:	d152      	bne.n	1992e <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19888:	4f35      	ldr	r7, [pc, #212]	; (19960 <smp_pairing_req+0x320>)
   1988a:	683b      	ldr	r3, [r7, #0]
   1988c:	2b00      	cmp	r3, #0
   1988e:	d04e      	beq.n	1992e <smp_pairing_req+0x2ee>
	    bt_auth && bt_auth->pairing_confirm) {
   19890:	695b      	ldr	r3, [r3, #20]
   19892:	2b00      	cmp	r3, #0
   19894:	d04b      	beq.n	1992e <smp_pairing_req+0x2ee>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19896:	4630      	mov	r0, r6
   19898:	210a      	movs	r1, #10
   1989a:	f008 f927 	bl	21aec <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1989e:	683b      	ldr	r3, [r7, #0]
   198a0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   198a4:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   198a6:	4798      	blx	r3
		return 0;
   198a8:	e6d3      	b.n	19652 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   198aa:	2104      	movs	r1, #4
   198ac:	eb0d 0001 	add.w	r0, sp, r1
   198b0:	f002 fa44 	bl	1bd3c <bt_rand>
   198b4:	2800      	cmp	r0, #0
   198b6:	f47f aeea 	bne.w	1968e <smp_pairing_req+0x4e>
			passkey %= 1000000;
   198ba:	9901      	ldr	r1, [sp, #4]
   198bc:	4a29      	ldr	r2, [pc, #164]	; (19964 <smp_pairing_req+0x324>)
		if (bt_auth && bt_auth->passkey_display) {
   198be:	4f28      	ldr	r7, [pc, #160]	; (19960 <smp_pairing_req+0x320>)
			passkey %= 1000000;
   198c0:	fbb1 f3f2 	udiv	r3, r1, r2
   198c4:	fb02 1313 	mls	r3, r2, r3, r1
   198c8:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   198ca:	683b      	ldr	r3, [r7, #0]
   198cc:	b153      	cbz	r3, 198e4 <smp_pairing_req+0x2a4>
   198ce:	681b      	ldr	r3, [r3, #0]
   198d0:	b143      	cbz	r3, 198e4 <smp_pairing_req+0x2a4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   198d2:	210b      	movs	r1, #11
   198d4:	4630      	mov	r0, r6
   198d6:	f008 f909 	bl	21aec <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   198da:	683b      	ldr	r3, [r7, #0]
   198dc:	9901      	ldr	r1, [sp, #4]
   198de:	681b      	ldr	r3, [r3, #0]
   198e0:	4628      	mov	r0, r5
   198e2:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   198e4:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   198e6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   198ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   198ee:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   198f0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   198f4:	0a1b      	lsrs	r3, r3, #8
   198f6:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   198fa:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   198fe:	e7b9      	b.n	19874 <smp_pairing_req+0x234>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19900:	4630      	mov	r0, r6
   19902:	210a      	movs	r1, #10
   19904:	f008 f8f2 	bl	21aec <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   19908:	4b15      	ldr	r3, [pc, #84]	; (19960 <smp_pairing_req+0x320>)
   1990a:	681b      	ldr	r3, [r3, #0]
   1990c:	4628      	mov	r0, r5
   1990e:	685b      	ldr	r3, [r3, #4]
   19910:	4798      	blx	r3
	if (ret) {
   19912:	e7af      	b.n	19874 <smp_pairing_req+0x234>
   19914:	4b0f      	ldr	r3, [pc, #60]	; (19954 <smp_pairing_req+0x314>)
   19916:	4a10      	ldr	r2, [pc, #64]	; (19958 <smp_pairing_req+0x318>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   19918:	4813      	ldr	r0, [pc, #76]	; (19968 <smp_pairing_req+0x328>)
   1991a:	1ad2      	subs	r2, r2, r3
   1991c:	08d2      	lsrs	r2, r2, #3
   1991e:	0192      	lsls	r2, r2, #6
   19920:	f042 0201 	orr.w	r2, r2, #1
   19924:	f004 fe3a 	bl	1e59c <log_1>
	if (ret) {
   19928:	e6b1      	b.n	1968e <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1992a:	2502      	movs	r5, #2
   1992c:	e691      	b.n	19652 <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1992e:	2103      	movs	r1, #3
   19930:	4620      	mov	r0, r4
   19932:	f008 f8db 	bl	21aec <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   19936:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   19938:	4620      	mov	r0, r4
   1993a:	f008 f8d7 	bl	21aec <atomic_set_bit>
	return send_pairing_rsp(smp);
   1993e:	f008 fa16 	bl	21d6e <send_pairing_rsp>
   19942:	4605      	mov	r5, r0
   19944:	e685      	b.n	19652 <smp_pairing_req+0x12>
   19946:	bf00      	nop
   19948:	200022b6 	.word	0x200022b6
   1994c:	00025ed9 	.word	0x00025ed9
   19950:	00025ef2 	.word	0x00025ef2
   19954:	0002353c 	.word	0x0002353c
   19958:	000235b4 	.word	0x000235b4
   1995c:	00025cd9 	.word	0x00025cd9
   19960:	20001eec 	.word	0x20001eec
   19964:	000f4240 	.word	0x000f4240
   19968:	00025c25 	.word	0x00025c25
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1996c:	7a25      	ldrb	r5, [r4, #8]
   1996e:	b9a5      	cbnz	r5, 1999a <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19970:	210f      	movs	r1, #15
   19972:	4630      	mov	r0, r6
   19974:	f008 f999 	bl	21caa <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19978:	b978      	cbnz	r0, 1999a <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1997a:	f8df 8024 	ldr.w	r8, [pc, #36]	; 199a0 <smp_pairing_req+0x360>
   1997e:	f8d8 3000 	ldr.w	r3, [r8]
   19982:	b153      	cbz	r3, 1999a <smp_pairing_req+0x35a>
	    bt_auth && bt_auth->pairing_confirm) {
   19984:	695b      	ldr	r3, [r3, #20]
   19986:	b143      	cbz	r3, 1999a <smp_pairing_req+0x35a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19988:	4630      	mov	r0, r6
   1998a:	210a      	movs	r1, #10
   1998c:	f008 f8ae 	bl	21aec <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   19990:	f8d8 3000 	ldr.w	r3, [r8]
   19994:	4638      	mov	r0, r7
   19996:	695b      	ldr	r3, [r3, #20]
   19998:	e785      	b.n	198a6 <smp_pairing_req+0x266>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1999a:	210c      	movs	r1, #12
   1999c:	e7cc      	b.n	19938 <smp_pairing_req+0x2f8>
   1999e:	bf00      	nop
   199a0:	20001eec 	.word	0x20001eec

000199a4 <smp_ident_info>:
{
   199a4:	b570      	push	{r4, r5, r6, lr}
   199a6:	460b      	mov	r3, r1
   199a8:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   199aa:	210d      	movs	r1, #13
   199ac:	3004      	adds	r0, #4
   199ae:	f008 f97c 	bl	21caa <atomic_test_bit>
   199b2:	b310      	cbz	r0, 199fa <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   199b4:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   199b6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   199ba:	f103 0588 	add.w	r5, r3, #136	; 0x88
   199be:	7a19      	ldrb	r1, [r3, #8]
   199c0:	462a      	mov	r2, r5
   199c2:	2002      	movs	r0, #2
   199c4:	f008 fcf9 	bl	223ba <bt_keys_get_type>
		if (!keys) {
   199c8:	b990      	cbnz	r0, 199f0 <smp_ident_info+0x4c>
   199ca:	4a0f      	ldr	r2, [pc, #60]	; (19a08 <smp_ident_info+0x64>)
   199cc:	4c0f      	ldr	r4, [pc, #60]	; (19a0c <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   199ce:	4628      	mov	r0, r5
   199d0:	1aa4      	subs	r4, r4, r2
   199d2:	f7f9 fba9 	bl	13128 <bt_addr_le_str_real>
   199d6:	f7f7 f8ef 	bl	10bb8 <z_log_strdup>
   199da:	08e4      	lsrs	r4, r4, #3
   199dc:	01a4      	lsls	r4, r4, #6
   199de:	f044 0401 	orr.w	r4, r4, #1
   199e2:	4601      	mov	r1, r0
   199e4:	4622      	mov	r2, r4
   199e6:	480a      	ldr	r0, [pc, #40]	; (19a10 <smp_ident_info+0x6c>)
   199e8:	f004 fdd8 	bl	1e59c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   199ec:	2008      	movs	r0, #8
}
   199ee:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   199f0:	2210      	movs	r2, #16
   199f2:	4631      	mov	r1, r6
   199f4:	302a      	adds	r0, #42	; 0x2a
   199f6:	f006 fc1e 	bl	20236 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   199fa:	4620      	mov	r0, r4
   199fc:	2109      	movs	r1, #9
   199fe:	f008 f875 	bl	21aec <atomic_set_bit>
	return 0;
   19a02:	2000      	movs	r0, #0
   19a04:	e7f3      	b.n	199ee <smp_ident_info+0x4a>
   19a06:	bf00      	nop
   19a08:	0002353c 	.word	0x0002353c
   19a0c:	000235b4 	.word	0x000235b4
   19a10:	00025d06 	.word	0x00025d06

00019a14 <smp_encrypt_info>:
{
   19a14:	b570      	push	{r4, r5, r6, lr}
   19a16:	460b      	mov	r3, r1
   19a18:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19a1a:	210d      	movs	r1, #13
   19a1c:	3004      	adds	r0, #4
   19a1e:	f008 f944 	bl	21caa <atomic_test_bit>
   19a22:	b310      	cbz	r0, 19a6a <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   19a24:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   19a26:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19a2a:	f103 0588 	add.w	r5, r3, #136	; 0x88
   19a2e:	7a19      	ldrb	r1, [r3, #8]
   19a30:	462a      	mov	r2, r5
   19a32:	2004      	movs	r0, #4
   19a34:	f008 fcc1 	bl	223ba <bt_keys_get_type>
		if (!keys) {
   19a38:	b990      	cbnz	r0, 19a60 <smp_encrypt_info+0x4c>
   19a3a:	4a0f      	ldr	r2, [pc, #60]	; (19a78 <smp_encrypt_info+0x64>)
   19a3c:	4c0f      	ldr	r4, [pc, #60]	; (19a7c <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   19a3e:	4628      	mov	r0, r5
   19a40:	1aa4      	subs	r4, r4, r2
   19a42:	f7f9 fb71 	bl	13128 <bt_addr_le_str_real>
   19a46:	f7f7 f8b7 	bl	10bb8 <z_log_strdup>
   19a4a:	08e4      	lsrs	r4, r4, #3
   19a4c:	01a4      	lsls	r4, r4, #6
   19a4e:	f044 0401 	orr.w	r4, r4, #1
   19a52:	4601      	mov	r1, r0
   19a54:	4622      	mov	r2, r4
   19a56:	480a      	ldr	r0, [pc, #40]	; (19a80 <smp_encrypt_info+0x6c>)
   19a58:	f004 fda0 	bl	1e59c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   19a5c:	2008      	movs	r0, #8
}
   19a5e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   19a60:	2210      	movs	r2, #16
   19a62:	4631      	mov	r1, r6
   19a64:	301a      	adds	r0, #26
   19a66:	f006 fbe6 	bl	20236 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   19a6a:	4620      	mov	r0, r4
   19a6c:	2107      	movs	r1, #7
   19a6e:	f008 f83d 	bl	21aec <atomic_set_bit>
	return 0;
   19a72:	2000      	movs	r0, #0
   19a74:	e7f3      	b.n	19a5e <smp_encrypt_info+0x4a>
   19a76:	bf00      	nop
   19a78:	0002353c 	.word	0x0002353c
   19a7c:	000235b4 	.word	0x000235b4
   19a80:	00025d06 	.word	0x00025d06

00019a84 <bt_smp_connected>:
{
   19a84:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   19a86:	4905      	ldr	r1, [pc, #20]	; (19a9c <bt_smp_connected+0x18>)
   19a88:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   19a8c:	30e8      	adds	r0, #232	; 0xe8
   19a8e:	f009 f8a6 	bl	22bde <k_work_init_delayable>
	smp_reset(smp);
   19a92:	4620      	mov	r0, r4
}
   19a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   19a98:	f008 b9c3 	b.w	21e22 <smp_reset>
   19a9c:	0001a5ed 	.word	0x0001a5ed

00019aa0 <smp_pairing_confirm>:
{
   19aa0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   19aa2:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19aa4:	1d05      	adds	r5, r0, #4
{
   19aa6:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19aa8:	210b      	movs	r1, #11
   19aaa:	4628      	mov	r0, r5
   19aac:	f008 f832 	bl	21b14 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   19ab0:	4631      	mov	r1, r6
   19ab2:	2210      	movs	r2, #16
   19ab4:	f104 0017 	add.w	r0, r4, #23
   19ab8:	f006 fbbd 	bl	20236 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19abc:	2105      	movs	r1, #5
   19abe:	4628      	mov	r0, r5
   19ac0:	f008 f8f3 	bl	21caa <atomic_test_bit>
   19ac4:	b920      	cbnz	r0, 19ad0 <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   19ac6:	4620      	mov	r0, r4
}
   19ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   19acc:	f008 ba27 	b.w	21f1e <legacy_pairing_confirm>
	switch (smp->method) {
   19ad0:	7a21      	ldrb	r1, [r4, #8]
   19ad2:	2901      	cmp	r1, #1
   19ad4:	d009      	beq.n	19aea <smp_pairing_confirm+0x4a>
   19ad6:	2902      	cmp	r1, #2
   19ad8:	d113      	bne.n	19b02 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19ada:	4620      	mov	r0, r4
   19adc:	2104      	movs	r1, #4
   19ade:	f008 f805 	bl	21aec <atomic_set_bit>
}
   19ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   19ae6:	f7ff bc55 	b.w	19394 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   19aea:	210a      	movs	r1, #10
   19aec:	4628      	mov	r0, r5
   19aee:	f008 f8dc 	bl	21caa <atomic_test_bit>
   19af2:	2800      	cmp	r0, #0
   19af4:	d0f1      	beq.n	19ada <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   19af6:	4628      	mov	r0, r5
   19af8:	2100      	movs	r1, #0
   19afa:	f007 fff7 	bl	21aec <atomic_set_bit>
			return 0;
   19afe:	2000      	movs	r0, #0
}
   19b00:	bd70      	pop	{r4, r5, r6, pc}
   19b02:	4b06      	ldr	r3, [pc, #24]	; (19b1c <smp_pairing_confirm+0x7c>)
   19b04:	4a06      	ldr	r2, [pc, #24]	; (19b20 <smp_pairing_confirm+0x80>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   19b06:	4807      	ldr	r0, [pc, #28]	; (19b24 <smp_pairing_confirm+0x84>)
   19b08:	1ad2      	subs	r2, r2, r3
   19b0a:	08d2      	lsrs	r2, r2, #3
   19b0c:	0192      	lsls	r2, r2, #6
   19b0e:	f042 0201 	orr.w	r2, r2, #1
   19b12:	f004 fd43 	bl	1e59c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   19b16:	2008      	movs	r0, #8
   19b18:	e7f2      	b.n	19b00 <smp_pairing_confirm+0x60>
   19b1a:	bf00      	nop
   19b1c:	0002353c 	.word	0x0002353c
   19b20:	000235b4 	.word	0x000235b4
   19b24:	00025c25 	.word	0x00025c25

00019b28 <smp_pairing_random>:
{
   19b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b2c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   19b2e:	f100 0737 	add.w	r7, r0, #55	; 0x37
   19b32:	6889      	ldr	r1, [r1, #8]
{
   19b34:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   19b36:	2210      	movs	r2, #16
   19b38:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19b3a:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   19b3c:	f006 fb7b 	bl	20236 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19b40:	2105      	movs	r1, #5
   19b42:	4630      	mov	r0, r6
   19b44:	f008 f8b1 	bl	21caa <atomic_test_bit>
   19b48:	2800      	cmp	r0, #0
   19b4a:	d147      	bne.n	19bdc <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
   19b4c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19b50:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   19b54:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19b58:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   19b5a:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19b5c:	9201      	str	r2, [sp, #4]
   19b5e:	9300      	str	r3, [sp, #0]
   19b60:	9502      	str	r5, [sp, #8]
   19b62:	f104 0310 	add.w	r3, r4, #16
   19b66:	f104 0209 	add.w	r2, r4, #9
   19b6a:	4639      	mov	r1, r7
   19b6c:	4640      	mov	r0, r8
   19b6e:	f008 f97b 	bl	21e68 <smp_c1>
	if (err) {
   19b72:	bb18      	cbnz	r0, 19bbc <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   19b74:	2210      	movs	r2, #16
   19b76:	4629      	mov	r1, r5
   19b78:	f104 0017 	add.w	r0, r4, #23
   19b7c:	f006 fb4b 	bl	20216 <memcmp>
   19b80:	2800      	cmp	r0, #0
   19b82:	f040 8095 	bne.w	19cb0 <smp_pairing_random+0x188>
	memcpy(out, r2, 8);
   19b86:	2208      	movs	r2, #8
   19b88:	4639      	mov	r1, r7
   19b8a:	4628      	mov	r0, r5
   19b8c:	f006 fb53 	bl	20236 <memcpy>
	memcpy(out + 8, r1, 8);
   19b90:	2208      	movs	r2, #8
   19b92:	f104 0127 	add.w	r1, r4, #39	; 0x27
   19b96:	a80c      	add	r0, sp, #48	; 0x30
   19b98:	f006 fb4d 	bl	20236 <memcpy>
	return bt_encrypt_le(k, out, out);
   19b9c:	462a      	mov	r2, r5
   19b9e:	4629      	mov	r1, r5
   19ba0:	4640      	mov	r0, r8
   19ba2:	f008 fd61 	bl	22668 <bt_encrypt_le>
		if (err) {
   19ba6:	b158      	cbz	r0, 19bc0 <smp_pairing_random+0x98>
   19ba8:	4973      	ldr	r1, [pc, #460]	; (19d78 <smp_pairing_random+0x250>)
   19baa:	4b74      	ldr	r3, [pc, #464]	; (19d7c <smp_pairing_random+0x254>)
			BT_ERR("Calculate STK failed");
   19bac:	4874      	ldr	r0, [pc, #464]	; (19d80 <smp_pairing_random+0x258>)
   19bae:	1ac9      	subs	r1, r1, r3
   19bb0:	08c9      	lsrs	r1, r1, #3
   19bb2:	0189      	lsls	r1, r1, #6
   19bb4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   19bb8:	f004 fce3 	bl	1e582 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   19bbc:	2508      	movs	r5, #8
   19bbe:	e078      	b.n	19cb2 <smp_pairing_random+0x18a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   19bc0:	4629      	mov	r1, r5
   19bc2:	2210      	movs	r2, #16
   19bc4:	4640      	mov	r0, r8
   19bc6:	f006 fb36 	bl	20236 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   19bca:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19bcc:	4630      	mov	r0, r6
   19bce:	f007 ff8d 	bl	21aec <atomic_set_bit>
	return smp_send_pairing_random(smp);
   19bd2:	4620      	mov	r0, r4
   19bd4:	f008 f8b2 	bl	21d3c <smp_send_pairing_random>
   19bd8:	4605      	mov	r5, r0
   19bda:	e06a      	b.n	19cb2 <smp_pairing_random+0x18a>
	switch (smp->method) {
   19bdc:	7a21      	ldrb	r1, [r4, #8]
   19bde:	2905      	cmp	r1, #5
   19be0:	f200 80a9 	bhi.w	19d36 <smp_pairing_random+0x20e>
   19be4:	e8df f001 	tbb	[pc, r1]
   19be8:	0341413b 	.word	0x0341413b
   19bec:	8ba7      	.short	0x8ba7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   19bee:	4b65      	ldr	r3, [pc, #404]	; (19d84 <smp_pairing_random+0x25c>)
   19bf0:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   19bf2:	2220      	movs	r2, #32
   19bf4:	f104 0157 	add.w	r1, r4, #87	; 0x57
   19bf8:	a80a      	add	r0, sp, #40	; 0x28
   19bfa:	f007 ff6b 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   19bfe:	2220      	movs	r2, #32
   19c00:	4629      	mov	r1, r5
   19c02:	a812      	add	r0, sp, #72	; 0x48
   19c04:	f007 ff66 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   19c08:	2210      	movs	r2, #16
   19c0a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   19c0e:	a81a      	add	r0, sp, #104	; 0x68
   19c10:	f007 ff60 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   19c14:	2210      	movs	r2, #16
   19c16:	4639      	mov	r1, r7
   19c18:	a806      	add	r0, sp, #24
   19c1a:	f007 ff5b 	bl	21ad4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   19c1e:	ab06      	add	r3, sp, #24
   19c20:	2250      	movs	r2, #80	; 0x50
   19c22:	a90a      	add	r1, sp, #40	; 0x28
   19c24:	4618      	mov	r0, r3
   19c26:	f007 ff84 	bl	21b32 <bt_smp_aes_cmac>
	if (err) {
   19c2a:	2800      	cmp	r0, #0
   19c2c:	d1c6      	bne.n	19bbc <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
   19c2e:	2204      	movs	r2, #4
   19c30:	a909      	add	r1, sp, #36	; 0x24
   19c32:	a805      	add	r0, sp, #20
   19c34:	f006 faff 	bl	20236 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   19c38:	9b05      	ldr	r3, [sp, #20]
   19c3a:	4953      	ldr	r1, [pc, #332]	; (19d88 <smp_pairing_random+0x260>)
   19c3c:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19c3e:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   19c40:	fbb3 f2f1 	udiv	r2, r3, r1
   19c44:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19c48:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   19c4a:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19c4c:	f007 ff4e 	bl	21aec <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   19c50:	4b4e      	ldr	r3, [pc, #312]	; (19d8c <smp_pairing_random+0x264>)
   19c52:	9905      	ldr	r1, [sp, #20]
   19c54:	681b      	ldr	r3, [r3, #0]
   19c56:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   19c5a:	689b      	ldr	r3, [r3, #8]
   19c5c:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19c5e:	210d      	movs	r1, #13
   19c60:	4620      	mov	r0, r4
   19c62:	f007 ff43 	bl	21aec <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19c66:	2110      	movs	r1, #16
   19c68:	e7b0      	b.n	19bcc <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19c6a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   19c6e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19c72:	4944      	ldr	r1, [pc, #272]	; (19d84 <smp_pairing_random+0x25c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19c74:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19c76:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19c78:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19c7c:	9500      	str	r5, [sp, #0]
   19c7e:	6809      	ldr	r1, [r1, #0]
   19c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19c84:	463a      	mov	r2, r7
   19c86:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19c8a:	f007 ffe7 	bl	21c5c <smp_f4>
   19c8e:	b140      	cbz	r0, 19ca2 <smp_pairing_random+0x17a>
   19c90:	4939      	ldr	r1, [pc, #228]	; (19d78 <smp_pairing_random+0x250>)
   19c92:	4b3a      	ldr	r3, [pc, #232]	; (19d7c <smp_pairing_random+0x254>)
		BT_ERR("Calculate confirm failed");
   19c94:	483e      	ldr	r0, [pc, #248]	; (19d90 <smp_pairing_random+0x268>)
   19c96:	1ac9      	subs	r1, r1, r3
   19c98:	08c9      	lsrs	r1, r1, #3
   19c9a:	0189      	lsls	r1, r1, #6
   19c9c:	f041 0101 	orr.w	r1, r1, #1
   19ca0:	e78a      	b.n	19bb8 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   19ca2:	2210      	movs	r2, #16
   19ca4:	4629      	mov	r1, r5
   19ca6:	f104 0017 	add.w	r0, r4, #23
   19caa:	f006 fab4 	bl	20216 <memcmp>
   19cae:	b120      	cbz	r0, 19cba <smp_pairing_random+0x192>
		return BT_SMP_ERR_CONFIRM_FAILED;
   19cb0:	2504      	movs	r5, #4
}
   19cb2:	4628      	mov	r0, r5
   19cb4:	b01e      	add	sp, #120	; 0x78
   19cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   19cba:	2103      	movs	r1, #3
   19cbc:	4620      	mov	r0, r4
   19cbe:	f007 ff15 	bl	21aec <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   19cc2:	f008 f83b 	bl	21d3c <smp_send_pairing_random>
		if (err) {
   19cc6:	4605      	mov	r5, r0
   19cc8:	2800      	cmp	r0, #0
   19cca:	d1f2      	bne.n	19cb2 <smp_pairing_random+0x18a>
		smp->passkey_round++;
   19ccc:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   19cd0:	3301      	adds	r3, #1
   19cd2:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   19cd4:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   19cd6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   19cda:	d108      	bne.n	19cee <smp_pairing_random+0x1c6>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19cdc:	4620      	mov	r0, r4
   19cde:	210d      	movs	r1, #13
   19ce0:	f007 ff04 	bl	21aec <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19ce4:	2110      	movs	r1, #16
   19ce6:	4630      	mov	r0, r6
   19ce8:	f007 ff00 	bl	21aec <atomic_set_bit>
			return 0;
   19cec:	e7e1      	b.n	19cb2 <smp_pairing_random+0x18a>
		if (bt_rand(smp->prnd, 16)) {
   19cee:	2110      	movs	r1, #16
   19cf0:	f104 0027 	add.w	r0, r4, #39	; 0x27
   19cf4:	f002 f822 	bl	1bd3c <bt_rand>
   19cf8:	2800      	cmp	r0, #0
   19cfa:	d0da      	beq.n	19cb2 <smp_pairing_random+0x18a>
   19cfc:	e75e      	b.n	19bbc <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
   19cfe:	2110      	movs	r1, #16
   19d00:	f104 0027 	add.w	r0, r4, #39	; 0x27
   19d04:	f002 f81a 	bl	1bd3c <bt_rand>
   19d08:	2800      	cmp	r0, #0
   19d0a:	f47f af57 	bne.w	19bbc <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
   19d0e:	4f1f      	ldr	r7, [pc, #124]	; (19d8c <smp_pairing_random+0x264>)
   19d10:	683b      	ldr	r3, [r7, #0]
   19d12:	b1db      	cbz	r3, 19d4c <smp_pairing_random+0x224>
   19d14:	68db      	ldr	r3, [r3, #12]
   19d16:	b1cb      	cbz	r3, 19d4c <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   19d18:	4b1e      	ldr	r3, [pc, #120]	; (19d94 <smp_pairing_random+0x26c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   19d1a:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   19d1c:	881b      	ldrh	r3, [r3, #0]
   19d1e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   19d22:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   19d24:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   19d26:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   19d2a:	d411      	bmi.n	19d50 <smp_pairing_random+0x228>
				     BT_CONN_OOB_BOTH_PEERS :
   19d2c:	2b00      	cmp	r3, #0
   19d2e:	bf0c      	ite	eq
   19d30:	2003      	moveq	r0, #3
   19d32:	2001      	movne	r0, #1
   19d34:	e00f      	b.n	19d56 <smp_pairing_random+0x22e>
   19d36:	4b11      	ldr	r3, [pc, #68]	; (19d7c <smp_pairing_random+0x254>)
   19d38:	4a0f      	ldr	r2, [pc, #60]	; (19d78 <smp_pairing_random+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   19d3a:	4817      	ldr	r0, [pc, #92]	; (19d98 <smp_pairing_random+0x270>)
   19d3c:	1ad2      	subs	r2, r2, r3
   19d3e:	08d2      	lsrs	r2, r2, #3
   19d40:	0192      	lsls	r2, r2, #6
   19d42:	f042 0201 	orr.w	r2, r2, #1
   19d46:	f004 fc29 	bl	1e59c <log_1>
   19d4a:	e737      	b.n	19bbc <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   19d4c:	2502      	movs	r5, #2
   19d4e:	e7b0      	b.n	19cb2 <smp_pairing_random+0x18a>
				     BT_CONN_OOB_BOTH_PEERS :
   19d50:	2b00      	cmp	r3, #0
   19d52:	bf18      	it	ne
   19d54:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   19d56:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   19d58:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   19d5c:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   19d60:	4630      	mov	r0, r6
   19d62:	210c      	movs	r1, #12
   19d64:	f007 fec2 	bl	21aec <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   19d68:	683b      	ldr	r3, [r7, #0]
   19d6a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   19d6e:	68db      	ldr	r3, [r3, #12]
   19d70:	a90a      	add	r1, sp, #40	; 0x28
   19d72:	4798      	blx	r3
			return 0;
   19d74:	e79d      	b.n	19cb2 <smp_pairing_random+0x18a>
   19d76:	bf00      	nop
   19d78:	000235b4 	.word	0x000235b4
   19d7c:	0002353c 	.word	0x0002353c
   19d80:	00025d20 	.word	0x00025d20
   19d84:	20001f80 	.word	0x20001f80
   19d88:	000f4240 	.word	0x000f4240
   19d8c:	20001eec 	.word	0x20001eec
   19d90:	00025d35 	.word	0x00025d35
   19d94:	00023748 	.word	0x00023748
   19d98:	00025c25 	.word	0x00025c25

00019d9c <bt_smp_start_security>:
{
   19d9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   19da0:	78c4      	ldrb	r4, [r0, #3]
   19da2:	2c01      	cmp	r4, #1
{
   19da4:	4605      	mov	r5, r0
	switch (conn->role) {
   19da6:	d005      	beq.n	19db4 <bt_smp_start_security+0x18>
		return -EINVAL;
   19da8:	f06f 0415 	mvn.w	r4, #21
}
   19dac:	4620      	mov	r0, r4
   19dae:	b003      	add	sp, #12
   19db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   19db4:	f7ff f968 	bl	19088 <smp_chan_get>
	if (!smp) {
   19db8:	4606      	mov	r6, r0
   19dba:	2800      	cmp	r0, #0
   19dbc:	f000 80a5 	beq.w	19f0a <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19dc0:	1d07      	adds	r7, r0, #4
   19dc2:	2104      	movs	r1, #4
   19dc4:	4638      	mov	r0, r7
   19dc6:	f007 ff70 	bl	21caa <atomic_test_bit>
   19dca:	2800      	cmp	r0, #0
   19dcc:	f040 80a0 	bne.w	19f10 <bt_smp_start_security+0x174>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19dd0:	2103      	movs	r1, #3
   19dd2:	4638      	mov	r0, r7
   19dd4:	f007 ff69 	bl	21caa <atomic_test_bit>
   19dd8:	b110      	cbz	r0, 19de0 <bt_smp_start_security+0x44>
		return -EBUSY;
   19dda:	f06f 040f 	mvn.w	r4, #15
   19dde:	e7e5      	b.n	19dac <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19de0:	4621      	mov	r1, r4
   19de2:	4638      	mov	r0, r7
   19de4:	f007 ff61 	bl	21caa <atomic_test_bit>
   19de8:	2800      	cmp	r0, #0
   19dea:	d1f6      	bne.n	19dda <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   19dec:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   19dee:	2b03      	cmp	r3, #3
   19df0:	d03d      	beq.n	19e6e <bt_smp_start_security+0xd2>
   19df2:	d82c      	bhi.n	19e4e <bt_smp_start_security+0xb2>
   19df4:	3b01      	subs	r3, #1
   19df6:	2b01      	cmp	r3, #1
   19df8:	d947      	bls.n	19e8a <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   19dfa:	210b      	movs	r1, #11
   19dfc:	1d28      	adds	r0, r5, #4
   19dfe:	f007 ff54 	bl	21caa <atomic_test_bit>
   19e02:	2800      	cmp	r0, #0
   19e04:	d1d0      	bne.n	19da8 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   19e06:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   19e0a:	b983      	cbnz	r3, 19e2e <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   19e0c:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   19e10:	7a29      	ldrb	r1, [r5, #8]
   19e12:	4622      	mov	r2, r4
   19e14:	2020      	movs	r0, #32
   19e16:	f000 fce9 	bl	1a7ec <bt_keys_find>
   19e1a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   19e1e:	b930      	cbnz	r0, 19e2e <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   19e20:	7a29      	ldrb	r1, [r5, #8]
   19e22:	4622      	mov	r2, r4
   19e24:	2004      	movs	r0, #4
   19e26:	f000 fce1 	bl	1a7ec <bt_keys_find>
   19e2a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   19e2e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   19e32:	2b00      	cmp	r3, #0
   19e34:	d0b8      	beq.n	19da8 <bt_smp_start_security+0xc>
   19e36:	89da      	ldrh	r2, [r3, #14]
   19e38:	f002 0224 	and.w	r2, r2, #36	; 0x24
   19e3c:	2a00      	cmp	r2, #0
   19e3e:	d0b3      	beq.n	19da8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   19e40:	7aaa      	ldrb	r2, [r5, #10]
   19e42:	2a02      	cmp	r2, #2
   19e44:	d921      	bls.n	19e8a <bt_smp_start_security+0xee>
   19e46:	7b5b      	ldrb	r3, [r3, #13]
   19e48:	07db      	lsls	r3, r3, #31
   19e4a:	d5ad      	bpl.n	19da8 <bt_smp_start_security+0xc>
   19e4c:	e01d      	b.n	19e8a <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
   19e4e:	2b04      	cmp	r3, #4
   19e50:	d1d3      	bne.n	19dfa <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19e52:	f7ff f8af 	bl	18fb4 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   19e56:	2803      	cmp	r0, #3
   19e58:	d104      	bne.n	19e64 <bt_smp_start_security+0xc8>
   19e5a:	4b2f      	ldr	r3, [pc, #188]	; (19f18 <bt_smp_start_security+0x17c>)
   19e5c:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19e5e:	b1fb      	cbz	r3, 19ea0 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   19e60:	68dc      	ldr	r4, [r3, #12]
   19e62:	b10c      	cbz	r4, 19e68 <bt_smp_start_security+0xcc>
   19e64:	4b2d      	ldr	r3, [pc, #180]	; (19f1c <bt_smp_start_security+0x180>)
   19e66:	781c      	ldrb	r4, [r3, #0]
   19e68:	f004 0401 	and.w	r4, r4, #1
   19e6c:	e00b      	b.n	19e86 <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19e6e:	f7ff f8a1 	bl	18fb4 <get_io_capa>
   19e72:	2803      	cmp	r0, #3
   19e74:	d107      	bne.n	19e86 <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
   19e76:	4b28      	ldr	r3, [pc, #160]	; (19f18 <bt_smp_start_security+0x17c>)
   19e78:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19e7a:	2c00      	cmp	r4, #0
   19e7c:	d0bd      	beq.n	19dfa <bt_smp_start_security+0x5e>
		       (bt_auth && bt_auth->oob_data_request);
   19e7e:	68e4      	ldr	r4, [r4, #12]
   19e80:	3c00      	subs	r4, #0
   19e82:	bf18      	it	ne
   19e84:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   19e86:	2c00      	cmp	r4, #0
   19e88:	d0b7      	beq.n	19dfa <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   19e8a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   19e8e:	b14b      	cbz	r3, 19ea4 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
   19e90:	4630      	mov	r0, r6
   19e92:	f7ff f939 	bl	19108 <smp_init>
   19e96:	4604      	mov	r4, r0
   19e98:	b180      	cbz	r0, 19ebc <bt_smp_start_security+0x120>
		return -ENOBUFS;
   19e9a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19e9e:	e785      	b.n	19dac <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   19ea0:	2400      	movs	r4, #0
   19ea2:	e7e1      	b.n	19e68 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19ea4:	7a28      	ldrb	r0, [r5, #8]
   19ea6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   19eaa:	f000 fc5f 	bl	1a76c <bt_keys_get_addr>
   19eae:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   19eb2:	2800      	cmp	r0, #0
   19eb4:	d1ec      	bne.n	19e90 <bt_smp_start_security+0xf4>
			return -ENOMEM;
   19eb6:	f06f 040b 	mvn.w	r4, #11
   19eba:	e777      	b.n	19dac <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   19ebc:	210b      	movs	r1, #11
   19ebe:	4630      	mov	r0, r6
   19ec0:	f007 ff1d 	bl	21cfe <smp_create_pdu.isra.0>
	if (!req_buf) {
   19ec4:	4680      	mov	r8, r0
   19ec6:	2800      	cmp	r0, #0
   19ec8:	d0e7      	beq.n	19e9a <bt_smp_start_security+0xfe>
   19eca:	2101      	movs	r1, #1
   19ecc:	3008      	adds	r0, #8
   19ece:	f008 fadf 	bl	22490 <net_buf_simple_add>
   19ed2:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   19ed4:	2009      	movs	r0, #9
   19ed6:	f7ff f8b9 	bl	1904c <get_auth.isra.0>
   19eda:	4623      	mov	r3, r4
   19edc:	f889 0000 	strb.w	r0, [r9]
   19ee0:	4642      	mov	r2, r8
   19ee2:	9400      	str	r4, [sp, #0]
   19ee4:	2106      	movs	r1, #6
   19ee6:	4628      	mov	r0, r5
   19ee8:	f006 ff8c 	bl	20e04 <bt_l2cap_send_cb>
	if (err) {
   19eec:	4604      	mov	r4, r0
   19eee:	b118      	cbz	r0, 19ef8 <bt_smp_start_security+0x15c>
		net_buf_unref(req_buf);
   19ef0:	4640      	mov	r0, r8
   19ef2:	f000 fe93 	bl	1ac1c <net_buf_unref>
		return err;
   19ef6:	e759      	b.n	19dac <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   19ef8:	4638      	mov	r0, r7
   19efa:	210f      	movs	r1, #15
   19efc:	f007 fdf6 	bl	21aec <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   19f00:	2101      	movs	r1, #1
   19f02:	4630      	mov	r0, r6
   19f04:	f007 fdf2 	bl	21aec <atomic_set_bit>
	return 0;
   19f08:	e750      	b.n	19dac <bt_smp_start_security+0x10>
		return -ENOTCONN;
   19f0a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   19f0e:	e74d      	b.n	19dac <bt_smp_start_security+0x10>
		return -EIO;
   19f10:	f06f 0404 	mvn.w	r4, #4
   19f14:	e74a      	b.n	19dac <bt_smp_start_security+0x10>
   19f16:	bf00      	nop
   19f18:	20001eec 	.word	0x20001eec
   19f1c:	200022b7 	.word	0x200022b7

00019f20 <smp_pairing_complete>:
{
   19f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   19f24:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!status) {
   19f28:	4f28      	ldr	r7, [pc, #160]	; (19fcc <smp_pairing_complete+0xac>)
{
   19f2a:	4605      	mov	r5, r0
   19f2c:	f100 0804 	add.w	r8, r0, #4
	if (!status) {
   19f30:	b9e1      	cbnz	r1, 19f6c <smp_pairing_complete+0x4c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   19f32:	210d      	movs	r1, #13
   19f34:	4640      	mov	r0, r8
   19f36:	f007 feb8 	bl	21caa <atomic_test_bit>
		if (bond_flag) {
   19f3a:	4606      	mov	r6, r0
   19f3c:	b118      	cbz	r0, 19f46 <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
   19f3e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19f42:	f000 fd7b 	bl	1aa3c <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   19f46:	683b      	ldr	r3, [r7, #0]
   19f48:	b123      	cbz	r3, 19f54 <smp_pairing_complete+0x34>
   19f4a:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
   19f4c:	b113      	cbz	r3, 19f54 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(conn, security_err);
   19f4e:	4631      	mov	r1, r6
   19f50:	4620      	mov	r0, r4
   19f52:	4798      	blx	r3
	smp_reset(smp);
   19f54:	4628      	mov	r0, r5
   19f56:	f007 ff64 	bl	21e22 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   19f5a:	7a62      	ldrb	r2, [r4, #9]
   19f5c:	7aa3      	ldrb	r3, [r4, #10]
   19f5e:	429a      	cmp	r2, r3
   19f60:	d032      	beq.n	19fc8 <smp_pairing_complete+0xa8>
		bt_smp_start_security(conn);
   19f62:	4620      	mov	r0, r4
}
   19f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
   19f68:	f7ff bf18 	b.w	19d9c <bt_smp_start_security>
	switch (smp_err) {
   19f6c:	3901      	subs	r1, #1
   19f6e:	b2c9      	uxtb	r1, r1
   19f70:	290d      	cmp	r1, #13
   19f72:	bf9c      	itt	ls
   19f74:	4b16      	ldrls	r3, [pc, #88]	; (19fd0 <smp_pairing_complete+0xb0>)
   19f76:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   19f78:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   19f7c:	bf88      	it	hi
   19f7e:	2608      	movhi	r6, #8
		if (conn->le.keys &&
   19f80:	b143      	cbz	r3, 19f94 <smp_pairing_complete+0x74>
   19f82:	7b1b      	ldrb	r3, [r3, #12]
   19f84:	b9cb      	cbnz	r3, 19fba <smp_pairing_complete+0x9a>
			bt_keys_clear(conn->le.keys);
   19f86:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19f8a:	f000 fc8f 	bl	1a8ac <bt_keys_clear>
			conn->le.keys = NULL;
   19f8e:	2300      	movs	r3, #0
   19f90:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   19f94:	2102      	movs	r1, #2
   19f96:	4640      	mov	r0, r8
   19f98:	f007 fe87 	bl	21caa <atomic_test_bit>
   19f9c:	b940      	cbnz	r0, 19fb0 <smp_pairing_complete+0x90>
	switch (err) {
   19f9e:	2e08      	cmp	r6, #8
   19fa0:	bf16      	itet	ne
   19fa2:	4b0c      	ldrne	r3, [pc, #48]	; (19fd4 <smp_pairing_complete+0xb4>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   19fa4:	211f      	moveq	r1, #31
   19fa6:	5d99      	ldrbne	r1, [r3, r6]
			bt_conn_security_changed(conn,
   19fa8:	4632      	mov	r2, r6
   19faa:	4620      	mov	r0, r4
   19fac:	f7fb ffa0 	bl	15ef0 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   19fb0:	683b      	ldr	r3, [r7, #0]
   19fb2:	2b00      	cmp	r3, #0
   19fb4:	d0ce      	beq.n	19f54 <smp_pairing_complete+0x34>
   19fb6:	69db      	ldr	r3, [r3, #28]
   19fb8:	e7c8      	b.n	19f4c <smp_pairing_complete+0x2c>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   19fba:	2102      	movs	r1, #2
   19fbc:	4640      	mov	r0, r8
   19fbe:	f007 fe74 	bl	21caa <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   19fc2:	2800      	cmp	r0, #0
   19fc4:	d1df      	bne.n	19f86 <smp_pairing_complete+0x66>
   19fc6:	e7e5      	b.n	19f94 <smp_pairing_complete+0x74>
}
   19fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19fcc:	20001eec 	.word	0x20001eec
   19fd0:	00025ebb 	.word	0x00025ebb
   19fd4:	00025ed1 	.word	0x00025ed1

00019fd8 <bt_smp_recv>:
{
   19fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   19fda:	898b      	ldrh	r3, [r1, #12]
{
   19fdc:	4607      	mov	r7, r0
   19fde:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19fe0:	b95b      	cbnz	r3, 19ffa <bt_smp_recv+0x22>
   19fe2:	493a      	ldr	r1, [pc, #232]	; (1a0cc <bt_smp_recv+0xf4>)
   19fe4:	4b3a      	ldr	r3, [pc, #232]	; (1a0d0 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   19fe6:	483b      	ldr	r0, [pc, #236]	; (1a0d4 <bt_smp_recv+0xfc>)
   19fe8:	1ac9      	subs	r1, r1, r3
   19fea:	08c9      	lsrs	r1, r1, #3
   19fec:	0189      	lsls	r1, r1, #6
   19fee:	f041 0101 	orr.w	r1, r1, #1
   19ff2:	f004 fac6 	bl	1e582 <log_0>
}
   19ff6:	2000      	movs	r0, #0
   19ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19ffa:	2101      	movs	r1, #1
   19ffc:	f105 0008 	add.w	r0, r5, #8
   1a000:	f008 fa6d 	bl	224de <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1a004:	2104      	movs	r1, #4
   1a006:	4606      	mov	r6, r0
   1a008:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   1a00c:	f007 fe4d 	bl	21caa <atomic_test_bit>
   1a010:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   1a014:	7831      	ldrb	r1, [r6, #0]
   1a016:	b150      	cbz	r0, 1a02e <bt_smp_recv+0x56>
   1a018:	4a2c      	ldr	r2, [pc, #176]	; (1a0cc <bt_smp_recv+0xf4>)
   1a01a:	4b2d      	ldr	r3, [pc, #180]	; (1a0d0 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1a01c:	482e      	ldr	r0, [pc, #184]	; (1a0d8 <bt_smp_recv+0x100>)
   1a01e:	1ad2      	subs	r2, r2, r3
   1a020:	08d2      	lsrs	r2, r2, #3
   1a022:	0192      	lsls	r2, r2, #6
   1a024:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1a028:	f004 fab8 	bl	1e59c <log_1>
		return 0;
   1a02c:	e7e3      	b.n	19ff6 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1a02e:	290e      	cmp	r1, #14
   1a030:	d908      	bls.n	1a044 <bt_smp_recv+0x6c>
   1a032:	4a26      	ldr	r2, [pc, #152]	; (1a0cc <bt_smp_recv+0xf4>)
   1a034:	4b26      	ldr	r3, [pc, #152]	; (1a0d0 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1a036:	4829      	ldr	r0, [pc, #164]	; (1a0dc <bt_smp_recv+0x104>)
   1a038:	1ad2      	subs	r2, r2, r3
   1a03a:	08d2      	lsrs	r2, r2, #3
   1a03c:	0192      	lsls	r2, r2, #6
   1a03e:	f042 0202 	orr.w	r2, r2, #2
   1a042:	e7f1      	b.n	1a028 <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   1a044:	4f26      	ldr	r7, [pc, #152]	; (1a0e0 <bt_smp_recv+0x108>)
   1a046:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1a04a:	b973      	cbnz	r3, 1a06a <bt_smp_recv+0x92>
   1a04c:	4b20      	ldr	r3, [pc, #128]	; (1a0d0 <bt_smp_recv+0xf8>)
   1a04e:	4a1f      	ldr	r2, [pc, #124]	; (1a0cc <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1a050:	4824      	ldr	r0, [pc, #144]	; (1a0e4 <bt_smp_recv+0x10c>)
   1a052:	1ad2      	subs	r2, r2, r3
   1a054:	08d2      	lsrs	r2, r2, #3
   1a056:	0192      	lsls	r2, r2, #6
   1a058:	f042 0202 	orr.w	r2, r2, #2
   1a05c:	f004 fa9e 	bl	1e59c <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1a060:	2107      	movs	r1, #7
		smp_error(smp, err);
   1a062:	4620      	mov	r0, r4
   1a064:	f008 f864 	bl	22130 <smp_error>
   1a068:	e7c5      	b.n	19ff6 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1a06a:	4620      	mov	r0, r4
   1a06c:	f007 fec1 	bl	21df2 <atomic_test_and_clear_bit>
   1a070:	7831      	ldrb	r1, [r6, #0]
   1a072:	b970      	cbnz	r0, 1a092 <bt_smp_recv+0xba>
   1a074:	4b16      	ldr	r3, [pc, #88]	; (1a0d0 <bt_smp_recv+0xf8>)
   1a076:	4a15      	ldr	r2, [pc, #84]	; (1a0cc <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1a078:	481b      	ldr	r0, [pc, #108]	; (1a0e8 <bt_smp_recv+0x110>)
   1a07a:	1ad2      	subs	r2, r2, r3
   1a07c:	08d2      	lsrs	r2, r2, #3
   1a07e:	0192      	lsls	r2, r2, #6
   1a080:	f042 0202 	orr.w	r2, r2, #2
   1a084:	f004 fa8a 	bl	1e59c <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1a088:	7833      	ldrb	r3, [r6, #0]
   1a08a:	2b05      	cmp	r3, #5
   1a08c:	d0b3      	beq.n	19ff6 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a08e:	2108      	movs	r1, #8
   1a090:	e7e7      	b.n	1a062 <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1a092:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   1a096:	89a8      	ldrh	r0, [r5, #12]
   1a098:	791b      	ldrb	r3, [r3, #4]
   1a09a:	4283      	cmp	r3, r0
   1a09c:	d00d      	beq.n	1a0ba <bt_smp_recv+0xe2>
   1a09e:	4a0c      	ldr	r2, [pc, #48]	; (1a0d0 <bt_smp_recv+0xf8>)
   1a0a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0cc <bt_smp_recv+0xf4>)
   1a0a2:	1a9b      	subs	r3, r3, r2
   1a0a4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1a0a6:	019b      	lsls	r3, r3, #6
   1a0a8:	460a      	mov	r2, r1
   1a0aa:	f043 0301 	orr.w	r3, r3, #1
   1a0ae:	4601      	mov	r1, r0
   1a0b0:	480e      	ldr	r0, [pc, #56]	; (1a0ec <bt_smp_recv+0x114>)
   1a0b2:	f004 fa87 	bl	1e5c4 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1a0b6:	210a      	movs	r1, #10
   1a0b8:	e7d3      	b.n	1a062 <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   1a0ba:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1a0be:	4620      	mov	r0, r4
   1a0c0:	4629      	mov	r1, r5
   1a0c2:	4798      	blx	r3
	if (err) {
   1a0c4:	4601      	mov	r1, r0
   1a0c6:	2800      	cmp	r0, #0
   1a0c8:	d095      	beq.n	19ff6 <bt_smp_recv+0x1e>
   1a0ca:	e7ca      	b.n	1a062 <bt_smp_recv+0x8a>
   1a0cc:	000235b4 	.word	0x000235b4
   1a0d0:	0002353c 	.word	0x0002353c
   1a0d4:	00025d4e 	.word	0x00025d4e
   1a0d8:	00025d69 	.word	0x00025d69
   1a0dc:	00025d9a 	.word	0x00025d9a
   1a0e0:	00023da8 	.word	0x00023da8
   1a0e4:	00025dbc 	.word	0x00025dbc
   1a0e8:	00025dd6 	.word	0x00025dd6
   1a0ec:	000258b4 	.word	0x000258b4

0001a0f0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1a0f0:	4b12      	ldr	r3, [pc, #72]	; (1a13c <bt_smp_pkey_ready+0x4c>)
{
   1a0f2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1a0f4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1a0f6:	b958      	cbnz	r0, 1a110 <bt_smp_pkey_ready+0x20>
   1a0f8:	4911      	ldr	r1, [pc, #68]	; (1a140 <bt_smp_pkey_ready+0x50>)
   1a0fa:	4b12      	ldr	r3, [pc, #72]	; (1a144 <bt_smp_pkey_ready+0x54>)
		BT_WARN("Public key not available");
   1a0fc:	4812      	ldr	r0, [pc, #72]	; (1a148 <bt_smp_pkey_ready+0x58>)
   1a0fe:	1ac9      	subs	r1, r1, r3
   1a100:	08c9      	lsrs	r1, r1, #3
   1a102:	0189      	lsls	r1, r1, #6
}
   1a104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1a108:	f041 0102 	orr.w	r1, r1, #2
   1a10c:	f004 ba39 	b.w	1e582 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a110:	4c0e      	ldr	r4, [pc, #56]	; (1a14c <bt_smp_pkey_ready+0x5c>)
	z_impl_k_sem_give(sem);
   1a112:	480f      	ldr	r0, [pc, #60]	; (1a150 <bt_smp_pkey_ready+0x60>)
   1a114:	f002 fcae 	bl	1ca74 <z_impl_k_sem_give>
   1a118:	f3bf 8f5b 	dmb	ish
   1a11c:	6863      	ldr	r3, [r4, #4]
   1a11e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1a122:	065b      	lsls	r3, r3, #25
   1a124:	d509      	bpl.n	1a13a <bt_smp_pkey_ready+0x4a>
		err = smp_public_key_slave(smp);
   1a126:	4620      	mov	r0, r4
   1a128:	f7ff f984 	bl	19434 <smp_public_key_slave>
		if (err) {
   1a12c:	4601      	mov	r1, r0
   1a12e:	b120      	cbz	r0, 1a13a <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   1a130:	4620      	mov	r0, r4
}
   1a132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1a136:	f007 bffb 	b.w	22130 <smp_error>
}
   1a13a:	bd10      	pop	{r4, pc}
   1a13c:	20001f80 	.word	0x20001f80
   1a140:	000235b4 	.word	0x000235b4
   1a144:	0002353c 	.word	0x0002353c
   1a148:	00025df1 	.word	0x00025df1
   1a14c:	200018c0 	.word	0x200018c0
   1a150:	2000078c 	.word	0x2000078c

0001a154 <smp_ident_addr_info>:
{
   1a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1a158:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1a15a:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1a15e:	782b      	ldrb	r3, [r5, #0]
{
   1a160:	4604      	mov	r4, r0
   1a162:	f107 0688 	add.w	r6, r7, #136	; 0x88
   1a166:	b313      	cbz	r3, 1a1ae <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1a168:	79ab      	ldrb	r3, [r5, #6]
   1a16a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a16e:	2bc0      	cmp	r3, #192	; 0xc0
   1a170:	d01d      	beq.n	1a1ae <smp_ident_addr_info+0x5a>
   1a172:	4b4b      	ldr	r3, [pc, #300]	; (1a2a0 <smp_ident_addr_info+0x14c>)
   1a174:	4c4b      	ldr	r4, [pc, #300]	; (1a2a4 <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1a176:	4628      	mov	r0, r5
   1a178:	1ae4      	subs	r4, r4, r3
   1a17a:	f7f8 ffd5 	bl	13128 <bt_addr_le_str_real>
   1a17e:	f7f6 fd1b 	bl	10bb8 <z_log_strdup>
   1a182:	08e4      	lsrs	r4, r4, #3
   1a184:	01a4      	lsls	r4, r4, #6
   1a186:	f044 0401 	orr.w	r4, r4, #1
   1a18a:	4601      	mov	r1, r0
   1a18c:	4622      	mov	r2, r4
   1a18e:	4846      	ldr	r0, [pc, #280]	; (1a2a8 <smp_ident_addr_info+0x154>)
   1a190:	f004 fa04 	bl	1e59c <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1a194:	4630      	mov	r0, r6
   1a196:	f7f8 ffc7 	bl	13128 <bt_addr_le_str_real>
   1a19a:	f7f6 fd0d 	bl	10bb8 <z_log_strdup>
   1a19e:	4622      	mov	r2, r4
   1a1a0:	4601      	mov	r1, r0
   1a1a2:	4842      	ldr	r0, [pc, #264]	; (1a2ac <smp_ident_addr_info+0x158>)
   1a1a4:	f004 f9fa 	bl	1e59c <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   1a1a8:	200a      	movs	r0, #10
}
   1a1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1a1ae:	2207      	movs	r2, #7
   1a1b0:	4629      	mov	r1, r5
   1a1b2:	4630      	mov	r0, r6
   1a1b4:	f006 f82f 	bl	20216 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1a1b8:	b168      	cbz	r0, 1a1d6 <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1a1ba:	7a38      	ldrb	r0, [r7, #8]
   1a1bc:	4629      	mov	r1, r5
   1a1be:	f000 fb65 	bl	1a88c <bt_keys_find_addr>
		if (keys) {
   1a1c2:	4680      	mov	r8, r0
   1a1c4:	b138      	cbz	r0, 1a1d6 <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   1a1c6:	4601      	mov	r1, r0
   1a1c8:	4620      	mov	r0, r4
   1a1ca:	f007 fd77 	bl	21cbc <update_keys_check>
   1a1ce:	b300      	cbz	r0, 1a212 <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   1a1d0:	4640      	mov	r0, r8
   1a1d2:	f000 fb6b 	bl	1a8ac <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a1d6:	210d      	movs	r1, #13
   1a1d8:	1d20      	adds	r0, r4, #4
   1a1da:	f007 fd66 	bl	21caa <atomic_test_bit>
   1a1de:	2800      	cmp	r0, #0
   1a1e0:	d046      	beq.n	1a270 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1a1e2:	7a39      	ldrb	r1, [r7, #8]
   1a1e4:	4632      	mov	r2, r6
   1a1e6:	2002      	movs	r0, #2
   1a1e8:	f008 f8e7 	bl	223ba <bt_keys_get_type>
		if (!keys) {
   1a1ec:	4680      	mov	r8, r0
   1a1ee:	b990      	cbnz	r0, 1a216 <smp_ident_addr_info+0xc2>
   1a1f0:	4a2b      	ldr	r2, [pc, #172]	; (1a2a0 <smp_ident_addr_info+0x14c>)
   1a1f2:	4c2c      	ldr	r4, [pc, #176]	; (1a2a4 <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
   1a1f4:	4630      	mov	r0, r6
   1a1f6:	1aa4      	subs	r4, r4, r2
   1a1f8:	f7f8 ff96 	bl	13128 <bt_addr_le_str_real>
   1a1fc:	f7f6 fcdc 	bl	10bb8 <z_log_strdup>
   1a200:	08e4      	lsrs	r4, r4, #3
   1a202:	01a4      	lsls	r4, r4, #6
   1a204:	f044 0401 	orr.w	r4, r4, #1
   1a208:	4601      	mov	r1, r0
   1a20a:	4622      	mov	r2, r4
   1a20c:	4828      	ldr	r0, [pc, #160]	; (1a2b0 <smp_ident_addr_info+0x15c>)
   1a20e:	f004 f9c5 	bl	1e59c <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   1a212:	2008      	movs	r0, #8
   1a214:	e7c9      	b.n	1a1aa <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1a216:	78fb      	ldrb	r3, [r7, #3]
   1a218:	2b00      	cmp	r3, #0
   1a21a:	d13e      	bne.n	1a29a <smp_ident_addr_info+0x146>
			dst = &conn->le.resp_addr;
   1a21c:	f107 0196 	add.w	r1, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1a220:	780b      	ldrb	r3, [r1, #0]
   1a222:	2b01      	cmp	r3, #1
   1a224:	d121      	bne.n	1a26a <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1a226:	798b      	ldrb	r3, [r1, #6]
   1a228:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a22c:	2b40      	cmp	r3, #64	; 0x40
   1a22e:	d11c      	bne.n	1a26a <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1a230:	2206      	movs	r2, #6
   1a232:	3101      	adds	r1, #1
   1a234:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1a238:	f005 fffd 	bl	20236 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1a23c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
   1a240:	b19b      	cbz	r3, 1a26a <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1a242:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
   1a246:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a24a:	2bc0      	cmp	r3, #192	; 0xc0
   1a24c:	d00d      	beq.n	1a26a <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1a24e:	2207      	movs	r2, #7
   1a250:	4629      	mov	r1, r5
   1a252:	f108 0001 	add.w	r0, r8, #1
   1a256:	f005 ffee 	bl	20236 <memcpy>
   1a25a:	2207      	movs	r2, #7
   1a25c:	4629      	mov	r1, r5
   1a25e:	4630      	mov	r0, r6
   1a260:	f005 ffe9 	bl	20236 <memcpy>
				bt_conn_identity_resolved(conn);
   1a264:	4638      	mov	r0, r7
   1a266:	f7fb fe29 	bl	15ebc <bt_conn_identity_resolved>
		bt_id_add(keys);
   1a26a:	4640      	mov	r0, r8
   1a26c:	f7fa fe34 	bl	14ed8 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1a270:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1a274:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1a278:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1a27a:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1a27e:	d503      	bpl.n	1a288 <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a280:	210a      	movs	r1, #10
   1a282:	4620      	mov	r0, r4
   1a284:	f007 fc32 	bl	21aec <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1a288:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1a28c:	b91d      	cbnz	r5, 1a296 <smp_ident_addr_info+0x142>
		smp_pairing_complete(smp, 0);
   1a28e:	4629      	mov	r1, r5
   1a290:	4620      	mov	r0, r4
   1a292:	f7ff fe45 	bl	19f20 <smp_pairing_complete>
	return 0;
   1a296:	2000      	movs	r0, #0
   1a298:	e787      	b.n	1a1aa <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   1a29a:	f107 018f 	add.w	r1, r7, #143	; 0x8f
   1a29e:	e7bf      	b.n	1a220 <smp_ident_addr_info+0xcc>
   1a2a0:	0002353c 	.word	0x0002353c
   1a2a4:	000235b4 	.word	0x000235b4
   1a2a8:	00025e0a 	.word	0x00025e0a
   1a2ac:	00025e37 	.word	0x00025e37
   1a2b0:	00025d06 	.word	0x00025d06

0001a2b4 <smp_master_ident>:
{
   1a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1a2b6:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   1a2ba:	4604      	mov	r4, r0
   1a2bc:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a2be:	3004      	adds	r0, #4
   1a2c0:	210d      	movs	r1, #13
   1a2c2:	f007 fcf2 	bl	21caa <atomic_test_bit>
   1a2c6:	b368      	cbz	r0, 1a324 <smp_master_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1a2c8:	f105 0788 	add.w	r7, r5, #136	; 0x88
   1a2cc:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1a2ce:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1a2d0:	463a      	mov	r2, r7
   1a2d2:	2004      	movs	r0, #4
   1a2d4:	f008 f871 	bl	223ba <bt_keys_get_type>
		if (!keys) {
   1a2d8:	4605      	mov	r5, r0
   1a2da:	b990      	cbnz	r0, 1a302 <smp_master_ident+0x4e>
   1a2dc:	4a1c      	ldr	r2, [pc, #112]	; (1a350 <smp_master_ident+0x9c>)
   1a2de:	4c1d      	ldr	r4, [pc, #116]	; (1a354 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
   1a2e0:	4638      	mov	r0, r7
   1a2e2:	1aa4      	subs	r4, r4, r2
   1a2e4:	f7f8 ff20 	bl	13128 <bt_addr_le_str_real>
   1a2e8:	f7f6 fc66 	bl	10bb8 <z_log_strdup>
   1a2ec:	08e4      	lsrs	r4, r4, #3
   1a2ee:	01a4      	lsls	r4, r4, #6
   1a2f0:	f044 0401 	orr.w	r4, r4, #1
   1a2f4:	4601      	mov	r1, r0
   1a2f6:	4622      	mov	r2, r4
   1a2f8:	4817      	ldr	r0, [pc, #92]	; (1a358 <smp_master_ident+0xa4>)
   1a2fa:	f004 f94f 	bl	1e59c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1a2fe:	2008      	movs	r0, #8
}
   1a300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1a302:	2202      	movs	r2, #2
   1a304:	4631      	mov	r1, r6
   1a306:	3018      	adds	r0, #24
   1a308:	f005 ff95 	bl	20236 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1a30c:	2208      	movs	r2, #8
   1a30e:	1cb1      	adds	r1, r6, #2
   1a310:	f105 0010 	add.w	r0, r5, #16
   1a314:	f005 ff8f 	bl	20236 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1a318:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1a31c:	f023 0301 	bic.w	r3, r3, #1
   1a320:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1a324:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1a328:	079a      	lsls	r2, r3, #30
   1a32a:	d50c      	bpl.n	1a346 <smp_master_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1a32c:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a32e:	4620      	mov	r0, r4
   1a330:	f007 fbdc 	bl	21aec <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1a334:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1a338:	b91d      	cbnz	r5, 1a342 <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
   1a33a:	4629      	mov	r1, r5
   1a33c:	4620      	mov	r0, r4
   1a33e:	f7ff fdef 	bl	19f20 <smp_pairing_complete>
	return 0;
   1a342:	2000      	movs	r0, #0
   1a344:	e7dc      	b.n	1a300 <smp_master_ident+0x4c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1a346:	075b      	lsls	r3, r3, #29
   1a348:	d5f4      	bpl.n	1a334 <smp_master_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a34a:	210a      	movs	r1, #10
   1a34c:	e7ef      	b.n	1a32e <smp_master_ident+0x7a>
   1a34e:	bf00      	nop
   1a350:	0002353c 	.word	0x0002353c
   1a354:	000235b4 	.word	0x000235b4
   1a358:	00025d06 	.word	0x00025d06

0001a35c <smp_pairing_failed>:
{
   1a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a35e:	4a15      	ldr	r2, [pc, #84]	; (1a3b4 <smp_pairing_failed+0x58>)
   1a360:	4b15      	ldr	r3, [pc, #84]	; (1a3b8 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1a362:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1a364:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   1a368:	7829      	ldrb	r1, [r5, #0]
   1a36a:	1ad2      	subs	r2, r2, r3
   1a36c:	08d2      	lsrs	r2, r2, #3
{
   1a36e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1a370:	0192      	lsls	r2, r2, #6
   1a372:	4812      	ldr	r0, [pc, #72]	; (1a3bc <smp_pairing_failed+0x60>)
   1a374:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1a378:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1a37a:	f004 f90f 	bl	1e59c <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1a37e:	210a      	movs	r1, #10
   1a380:	4638      	mov	r0, r7
   1a382:	f007 fd36 	bl	21df2 <atomic_test_and_clear_bit>
   1a386:	b140      	cbz	r0, 1a39a <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   1a388:	4b0d      	ldr	r3, [pc, #52]	; (1a3c0 <smp_pairing_failed+0x64>)
   1a38a:	681b      	ldr	r3, [r3, #0]
   1a38c:	b963      	cbnz	r3, 1a3a8 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   1a38e:	4620      	mov	r0, r4
   1a390:	7829      	ldrb	r1, [r5, #0]
   1a392:	f7ff fdc5 	bl	19f20 <smp_pairing_complete>
}
   1a396:	2000      	movs	r0, #0
   1a398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1a39a:	210b      	movs	r1, #11
   1a39c:	4638      	mov	r0, r7
   1a39e:	f007 fd28 	bl	21df2 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1a3a2:	2800      	cmp	r0, #0
   1a3a4:	d1f0      	bne.n	1a388 <smp_pairing_failed+0x2c>
   1a3a6:	e7f2      	b.n	1a38e <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1a3a8:	691b      	ldr	r3, [r3, #16]
   1a3aa:	2b00      	cmp	r3, #0
   1a3ac:	d0ef      	beq.n	1a38e <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   1a3ae:	4630      	mov	r0, r6
   1a3b0:	4798      	blx	r3
   1a3b2:	e7ec      	b.n	1a38e <smp_pairing_failed+0x32>
   1a3b4:	000235b4 	.word	0x000235b4
   1a3b8:	0002353c 	.word	0x0002353c
   1a3bc:	00025e1e 	.word	0x00025e1e
   1a3c0:	20001eec 	.word	0x20001eec

0001a3c4 <bt_smp_encrypt_change>:
{
   1a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1a3c8:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a3ca:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   1a3ce:	b088      	sub	sp, #32
   1a3d0:	4604      	mov	r4, r0
   1a3d2:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a3d4:	4630      	mov	r0, r6
   1a3d6:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1a3d8:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a3dc:	f007 fd09 	bl	21df2 <atomic_test_and_clear_bit>
   1a3e0:	b318      	cbz	r0, 1a42a <bt_smp_encrypt_change+0x66>
	if (hci_status) {
   1a3e2:	b1bf      	cbz	r7, 1a414 <bt_smp_encrypt_change+0x50>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a3e4:	2103      	movs	r1, #3
   1a3e6:	4630      	mov	r0, r6
   1a3e8:	f007 fc5f 	bl	21caa <atomic_test_bit>
   1a3ec:	b1e8      	cbz	r0, 1a42a <bt_smp_encrypt_change+0x66>
			uint8_t smp_err = smp_err_get(
   1a3ee:	4638      	mov	r0, r7
   1a3f0:	f7fa fb2e 	bl	14a50 <bt_security_err_get>
	switch (auth_err) {
   1a3f4:	3801      	subs	r0, #1
   1a3f6:	b2c0      	uxtb	r0, r0
   1a3f8:	2807      	cmp	r0, #7
   1a3fa:	bf9a      	itte	ls
   1a3fc:	4b73      	ldrls	r3, [pc, #460]	; (1a5cc <bt_smp_encrypt_change+0x208>)
   1a3fe:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1a400:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1a402:	2102      	movs	r1, #2
   1a404:	4630      	mov	r0, r6
   1a406:	f007 fb71 	bl	21aec <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1a40a:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1a40c:	4628      	mov	r0, r5
   1a40e:	f7ff fd87 	bl	19f20 <smp_pairing_complete>
   1a412:	e00a      	b.n	1a42a <bt_smp_encrypt_change+0x66>
	if (!conn->encrypt) {
   1a414:	f898 300b 	ldrb.w	r3, [r8, #11]
   1a418:	b13b      	cbz	r3, 1a42a <bt_smp_encrypt_change+0x66>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a41a:	2103      	movs	r1, #3
   1a41c:	4630      	mov	r0, r6
   1a41e:	f007 fc44 	bl	21caa <atomic_test_bit>
   1a422:	b928      	cbnz	r0, 1a430 <bt_smp_encrypt_change+0x6c>
		smp_reset(smp);
   1a424:	4628      	mov	r0, r5
   1a426:	f007 fcfc 	bl	21e22 <smp_reset>
}
   1a42a:	b008      	add	sp, #32
   1a42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a430:	2105      	movs	r1, #5
   1a432:	4630      	mov	r0, r6
   1a434:	f007 fc39 	bl	21caa <atomic_test_bit>
   1a438:	b1b8      	cbz	r0, 1a46a <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1a43a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1a43e:	071b      	lsls	r3, r3, #28
   1a440:	d507      	bpl.n	1a452 <bt_smp_encrypt_change+0x8e>
   1a442:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1a446:	071f      	lsls	r7, r3, #28
   1a448:	d503      	bpl.n	1a452 <bt_smp_encrypt_change+0x8e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1a44a:	2111      	movs	r1, #17
   1a44c:	4630      	mov	r0, r6
   1a44e:	f007 fb4d 	bl	21aec <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1a452:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1a456:	f023 0308 	bic.w	r3, r3, #8
   1a45a:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1a45e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1a462:	f023 0308 	bic.w	r3, r3, #8
   1a466:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1a46a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1a46e:	07d8      	lsls	r0, r3, #31
   1a470:	d51d      	bpl.n	1a4ae <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1a472:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a474:	4628      	mov	r0, r5
   1a476:	f007 fb39 	bl	21aec <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1a47a:	4630      	mov	r0, r6
   1a47c:	2102      	movs	r1, #2
   1a47e:	f007 fb35 	bl	21aec <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1a482:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
   1a484:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1a488:	b9cb      	cbnz	r3, 1a4be <bt_smp_encrypt_change+0xfa>
   1a48a:	4a51      	ldr	r2, [pc, #324]	; (1a5d0 <bt_smp_encrypt_change+0x20c>)
   1a48c:	4c51      	ldr	r4, [pc, #324]	; (1a5d4 <bt_smp_encrypt_change+0x210>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1a48e:	3088      	adds	r0, #136	; 0x88
   1a490:	1aa4      	subs	r4, r4, r2
   1a492:	f7f8 fe49 	bl	13128 <bt_addr_le_str_real>
   1a496:	f7f6 fb8f 	bl	10bb8 <z_log_strdup>
   1a49a:	08e4      	lsrs	r4, r4, #3
   1a49c:	01a4      	lsls	r4, r4, #6
   1a49e:	f044 0401 	orr.w	r4, r4, #1
   1a4a2:	4601      	mov	r1, r0
   1a4a4:	4622      	mov	r2, r4
   1a4a6:	484c      	ldr	r0, [pc, #304]	; (1a5d8 <bt_smp_encrypt_change+0x214>)
   1a4a8:	f004 f878 	bl	1e59c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1a4ac:	e7bd      	b.n	1a42a <bt_smp_encrypt_change+0x66>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1a4ae:	0799      	lsls	r1, r3, #30
   1a4b0:	d501      	bpl.n	1a4b6 <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1a4b2:	2108      	movs	r1, #8
   1a4b4:	e7de      	b.n	1a474 <bt_smp_encrypt_change+0xb0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1a4b6:	075a      	lsls	r2, r3, #29
   1a4b8:	d5df      	bpl.n	1a47a <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a4ba:	210a      	movs	r1, #10
   1a4bc:	e7da      	b.n	1a474 <bt_smp_encrypt_change+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a4be:	2105      	movs	r1, #5
   1a4c0:	4630      	mov	r0, r6
   1a4c2:	f007 fbf2 	bl	21caa <atomic_test_bit>
   1a4c6:	b9b0      	cbnz	r0, 1a4f6 <bt_smp_encrypt_change+0x132>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1a4c8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1a4cc:	07db      	lsls	r3, r3, #31
   1a4ce:	d512      	bpl.n	1a4f6 <bt_smp_encrypt_change+0x132>
	struct bt_keys *keys = conn->le.keys;
   1a4d0:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a4d2:	211a      	movs	r1, #26
   1a4d4:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1a4d6:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a4da:	f001 fc2f 	bl	1bd3c <bt_rand>
   1a4de:	4681      	mov	r9, r0
   1a4e0:	b170      	cbz	r0, 1a500 <bt_smp_encrypt_change+0x13c>
   1a4e2:	493c      	ldr	r1, [pc, #240]	; (1a5d4 <bt_smp_encrypt_change+0x210>)
   1a4e4:	4b3a      	ldr	r3, [pc, #232]	; (1a5d0 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to get random bytes");
   1a4e6:	483d      	ldr	r0, [pc, #244]	; (1a5dc <bt_smp_encrypt_change+0x218>)
   1a4e8:	1ac9      	subs	r1, r1, r3
   1a4ea:	08c9      	lsrs	r1, r1, #3
   1a4ec:	0189      	lsls	r1, r1, #6
   1a4ee:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1a4f2:	f004 f846 	bl	1e582 <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
   1a4f6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1a4fa:	2900      	cmp	r1, #0
   1a4fc:	d195      	bne.n	1a42a <bt_smp_encrypt_change+0x66>
   1a4fe:	e785      	b.n	1a40c <bt_smp_encrypt_change+0x48>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1a500:	2106      	movs	r1, #6
   1a502:	4628      	mov	r0, r5
   1a504:	f007 fbfb 	bl	21cfe <smp_create_pdu.isra.0>
		if (!buf) {
   1a508:	4680      	mov	r8, r0
   1a50a:	b940      	cbnz	r0, 1a51e <bt_smp_encrypt_change+0x15a>
   1a50c:	4931      	ldr	r1, [pc, #196]	; (1a5d4 <bt_smp_encrypt_change+0x210>)
   1a50e:	4b30      	ldr	r3, [pc, #192]	; (1a5d0 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1a510:	4833      	ldr	r0, [pc, #204]	; (1a5e0 <bt_smp_encrypt_change+0x21c>)
   1a512:	1ac9      	subs	r1, r1, r3
   1a514:	08c9      	lsrs	r1, r1, #3
   1a516:	0189      	lsls	r1, r1, #6
   1a518:	f041 0101 	orr.w	r1, r1, #1
   1a51c:	e7e9      	b.n	1a4f2 <bt_smp_encrypt_change+0x12e>
	return net_buf_simple_add(&buf->b, len);
   1a51e:	2110      	movs	r1, #16
   1a520:	3008      	adds	r0, #8
   1a522:	f007 ffb5 	bl	22490 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1a526:	7b3a      	ldrb	r2, [r7, #12]
   1a528:	a901      	add	r1, sp, #4
   1a52a:	4682      	mov	sl, r0
   1a52c:	f005 fe83 	bl	20236 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1a530:	7b38      	ldrb	r0, [r7, #12]
   1a532:	280f      	cmp	r0, #15
   1a534:	d805      	bhi.n	1a542 <bt_smp_encrypt_change+0x17e>
			(void)memset(info->ltk + keys->enc_size, 0,
   1a536:	f1c0 0210 	rsb	r2, r0, #16
   1a53a:	4649      	mov	r1, r9
   1a53c:	4450      	add	r0, sl
   1a53e:	f005 fea5 	bl	2028c <memset>
		smp_send(smp, buf, NULL, NULL);
   1a542:	4641      	mov	r1, r8
   1a544:	2200      	movs	r2, #0
   1a546:	4628      	mov	r0, r5
   1a548:	f007 fb0f 	bl	21b6a <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   1a54c:	2107      	movs	r1, #7
   1a54e:	4628      	mov	r0, r5
   1a550:	f007 fbd5 	bl	21cfe <smp_create_pdu.isra.0>
		if (!buf) {
   1a554:	4680      	mov	r8, r0
   1a556:	b940      	cbnz	r0, 1a56a <bt_smp_encrypt_change+0x1a6>
   1a558:	491e      	ldr	r1, [pc, #120]	; (1a5d4 <bt_smp_encrypt_change+0x210>)
   1a55a:	4b1d      	ldr	r3, [pc, #116]	; (1a5d0 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Master Ident buffer");
   1a55c:	4821      	ldr	r0, [pc, #132]	; (1a5e4 <bt_smp_encrypt_change+0x220>)
   1a55e:	1ac9      	subs	r1, r1, r3
   1a560:	08c9      	lsrs	r1, r1, #3
   1a562:	0189      	lsls	r1, r1, #6
   1a564:	f041 0101 	orr.w	r1, r1, #1
   1a568:	e7c3      	b.n	1a4f2 <bt_smp_encrypt_change+0x12e>
   1a56a:	210a      	movs	r1, #10
   1a56c:	3008      	adds	r0, #8
   1a56e:	f007 ff8f 	bl	22490 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1a572:	2208      	movs	r2, #8
   1a574:	4681      	mov	r9, r0
   1a576:	a905      	add	r1, sp, #20
   1a578:	3002      	adds	r0, #2
   1a57a:	f005 fe5c 	bl	20236 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1a57e:	2202      	movs	r2, #2
   1a580:	a907      	add	r1, sp, #28
   1a582:	4648      	mov	r0, r9
   1a584:	f005 fe57 	bl	20236 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1a588:	4641      	mov	r1, r8
   1a58a:	4628      	mov	r0, r5
   1a58c:	4a16      	ldr	r2, [pc, #88]	; (1a5e8 <bt_smp_encrypt_change+0x224>)
   1a58e:	f007 faec 	bl	21b6a <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a592:	210d      	movs	r1, #13
   1a594:	4630      	mov	r0, r6
   1a596:	f007 fb88 	bl	21caa <atomic_test_bit>
   1a59a:	2800      	cmp	r0, #0
   1a59c:	d0ab      	beq.n	1a4f6 <bt_smp_encrypt_change+0x132>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   1a59e:	4638      	mov	r0, r7
   1a5a0:	2101      	movs	r1, #1
   1a5a2:	f007 ff1a 	bl	223da <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   1a5a6:	a901      	add	r1, sp, #4
   1a5a8:	2210      	movs	r2, #16
   1a5aa:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   1a5ae:	f005 fe42 	bl	20236 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   1a5b2:	a905      	add	r1, sp, #20
   1a5b4:	2208      	movs	r2, #8
   1a5b6:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1a5ba:	f005 fe3c 	bl	20236 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   1a5be:	2202      	movs	r2, #2
   1a5c0:	a907      	add	r1, sp, #28
   1a5c2:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1a5c6:	f005 fe36 	bl	20236 <memcpy>
   1a5ca:	e794      	b.n	1a4f6 <bt_smp_encrypt_change+0x132>
   1a5cc:	00025ec9 	.word	0x00025ec9
   1a5d0:	0002353c 	.word	0x0002353c
   1a5d4:	000235b4 	.word	0x000235b4
   1a5d8:	00025e2a 	.word	0x00025e2a
   1a5dc:	00025e3f 	.word	0x00025e3f
   1a5e0:	00025e5a 	.word	0x00025e5a
   1a5e4:	00025e81 	.word	0x00025e81
   1a5e8:	0002238b 	.word	0x0002238b

0001a5ec <smp_timeout>:
   1a5ec:	4b0b      	ldr	r3, [pc, #44]	; (1a61c <smp_timeout+0x30>)
   1a5ee:	490c      	ldr	r1, [pc, #48]	; (1a620 <smp_timeout+0x34>)
{
   1a5f0:	b510      	push	{r4, lr}
   1a5f2:	1ac9      	subs	r1, r1, r3
   1a5f4:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   1a5f6:	0189      	lsls	r1, r1, #6
{
   1a5f8:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1a5fa:	f041 0101 	orr.w	r1, r1, #1
   1a5fe:	4809      	ldr	r0, [pc, #36]	; (1a624 <smp_timeout+0x38>)
   1a600:	f003 ffbf 	bl	1e582 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1a604:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
   1a608:	2108      	movs	r1, #8
   1a60a:	f7ff fc89 	bl	19f20 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a60e:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   1a612:	2104      	movs	r1, #4
}
   1a614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a618:	f007 ba68 	b.w	21aec <atomic_set_bit>
   1a61c:	0002353c 	.word	0x0002353c
   1a620:	000235b4 	.word	0x000235b4
   1a624:	00025ea8 	.word	0x00025ea8

0001a628 <bt_smp_update_keys>:
{
   1a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a62a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1a62c:	f7fe fd2c 	bl	19088 <smp_chan_get>
	if (!smp) {
   1a630:	4605      	mov	r5, r0
   1a632:	2800      	cmp	r0, #0
   1a634:	d07c      	beq.n	1a730 <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a636:	1d06      	adds	r6, r0, #4
   1a638:	2103      	movs	r1, #3
   1a63a:	4630      	mov	r0, r6
   1a63c:	f007 fb35 	bl	21caa <atomic_test_bit>
   1a640:	2800      	cmp	r0, #0
   1a642:	d075      	beq.n	1a730 <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   1a644:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a648:	b108      	cbz	r0, 1a64e <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1a64a:	f000 f92f 	bl	1a8ac <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a64e:	f104 0788 	add.w	r7, r4, #136	; 0x88
   1a652:	7a20      	ldrb	r0, [r4, #8]
   1a654:	4639      	mov	r1, r7
   1a656:	f000 f889 	bl	1a76c <bt_keys_get_addr>
   1a65a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1a65e:	b9b0      	cbnz	r0, 1a68e <bt_smp_update_keys+0x66>
   1a660:	4a34      	ldr	r2, [pc, #208]	; (1a734 <bt_smp_update_keys+0x10c>)
   1a662:	4c35      	ldr	r4, [pc, #212]	; (1a738 <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
   1a664:	4638      	mov	r0, r7
   1a666:	1aa4      	subs	r4, r4, r2
   1a668:	f7f8 fd5e 	bl	13128 <bt_addr_le_str_real>
   1a66c:	f7f6 faa4 	bl	10bb8 <z_log_strdup>
   1a670:	08e4      	lsrs	r4, r4, #3
   1a672:	01a4      	lsls	r4, r4, #6
   1a674:	f044 0401 	orr.w	r4, r4, #1
   1a678:	4601      	mov	r1, r0
   1a67a:	4622      	mov	r2, r4
   1a67c:	482f      	ldr	r0, [pc, #188]	; (1a73c <bt_smp_update_keys+0x114>)
   1a67e:	f003 ff8d 	bl	1e59c <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a682:	4628      	mov	r0, r5
   1a684:	2108      	movs	r1, #8
}
   1a686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a68a:	f007 bd51 	b.w	22130 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1a68e:	210e      	movs	r1, #14
   1a690:	4630      	mov	r0, r6
   1a692:	f007 fb0a 	bl	21caa <atomic_test_bit>
   1a696:	b128      	cbz	r0, 1a6a4 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1a698:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1a69c:	7b53      	ldrb	r3, [r2, #13]
   1a69e:	f043 0302 	orr.w	r3, r3, #2
   1a6a2:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1a6a4:	7a2a      	ldrb	r2, [r5, #8]
   1a6a6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1a6aa:	2a03      	cmp	r2, #3
   1a6ac:	7b4b      	ldrb	r3, [r1, #13]
   1a6ae:	d836      	bhi.n	1a71e <bt_smp_update_keys+0xf6>
   1a6b0:	b3c2      	cbz	r2, 1a724 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1a6b2:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a6b6:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1a6b8:	7b6b      	ldrb	r3, [r5, #13]
   1a6ba:	7d2a      	ldrb	r2, [r5, #20]
   1a6bc:	4293      	cmp	r3, r2
   1a6be:	bf28      	it	cs
   1a6c0:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a6c2:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a6c4:	4630      	mov	r0, r6
   1a6c6:	2105      	movs	r1, #5
   1a6c8:	f007 faef 	bl	21caa <atomic_test_bit>
   1a6cc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1a6d0:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a6d2:	b350      	cbz	r0, 1a72a <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   1a6d4:	f042 0210 	orr.w	r2, r2, #16
   1a6d8:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a6da:	210d      	movs	r1, #13
   1a6dc:	4630      	mov	r0, r6
   1a6de:	f007 fae4 	bl	21caa <atomic_test_bit>
   1a6e2:	b328      	cbz	r0, 1a730 <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1a6e4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a6e8:	2120      	movs	r1, #32
   1a6ea:	f007 fe76 	bl	223da <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1a6ee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a6f2:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1a6f6:	2210      	movs	r2, #16
   1a6f8:	301a      	adds	r0, #26
   1a6fa:	f005 fd9c 	bl	20236 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1a6fe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a702:	2208      	movs	r2, #8
   1a704:	2100      	movs	r1, #0
   1a706:	3010      	adds	r0, #16
   1a708:	f005 fdc0 	bl	2028c <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1a70c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a710:	2202      	movs	r2, #2
}
   1a712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1a716:	2100      	movs	r1, #0
   1a718:	3018      	adds	r0, #24
   1a71a:	f005 bdb7 	b.w	2028c <memset>
	switch (smp->method) {
   1a71e:	3a05      	subs	r2, #5
   1a720:	2a01      	cmp	r2, #1
   1a722:	d9c6      	bls.n	1a6b2 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a724:	f023 0301 	bic.w	r3, r3, #1
   1a728:	e7c5      	b.n	1a6b6 <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1a72a:	f022 0210 	bic.w	r2, r2, #16
   1a72e:	735a      	strb	r2, [r3, #13]
}
   1a730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a732:	bf00      	nop
   1a734:	0002353c 	.word	0x0002353c
   1a738:	000235b4 	.word	0x000235b4
   1a73c:	00025d06 	.word	0x00025d06

0001a740 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1a740:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a742:	4b07      	ldr	r3, [pc, #28]	; (1a760 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1a744:	4807      	ldr	r0, [pc, #28]	; (1a764 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a746:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   1a74a:	f003 0306 	and.w	r3, r3, #6
   1a74e:	1f9a      	subs	r2, r3, #6
   1a750:	4253      	negs	r3, r2
   1a752:	4153      	adcs	r3, r2
   1a754:	4a04      	ldr	r2, [pc, #16]	; (1a768 <bt_smp_init+0x28>)
   1a756:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1a758:	f7fb f948 	bl	159ec <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1a75c:	2000      	movs	r0, #0
   1a75e:	bd08      	pop	{r3, pc}
   1a760:	200002a0 	.word	0x200002a0
   1a764:	20000558 	.word	0x20000558
   1a768:	200022b7 	.word	0x200022b7

0001a76c <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1a76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1a76e:	4c11      	ldr	r4, [pc, #68]	; (1a7b4 <bt_keys_get_addr+0x48>)
   1a770:	7823      	ldrb	r3, [r4, #0]
   1a772:	4283      	cmp	r3, r0
{
   1a774:	4605      	mov	r5, r0
   1a776:	460e      	mov	r6, r1
   1a778:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1a77a:	d00b      	beq.n	1a794 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1a77c:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1a77e:	480e      	ldr	r0, [pc, #56]	; (1a7b8 <bt_keys_get_addr+0x4c>)
   1a780:	9400      	str	r4, [sp, #0]
   1a782:	2207      	movs	r2, #7
   1a784:	4669      	mov	r1, sp
   1a786:	f8cd 4003 	str.w	r4, [sp, #3]
   1a78a:	f005 fd44 	bl	20216 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1a78e:	b140      	cbz	r0, 1a7a2 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1a790:	4620      	mov	r0, r4
   1a792:	e00d      	b.n	1a7b0 <bt_keys_get_addr+0x44>
   1a794:	2207      	movs	r2, #7
   1a796:	1c60      	adds	r0, r4, #1
   1a798:	f005 fd3d 	bl	20216 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1a79c:	2800      	cmp	r0, #0
   1a79e:	d1ed      	bne.n	1a77c <bt_keys_get_addr+0x10>
   1a7a0:	e7f6      	b.n	1a790 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   1a7a2:	4805      	ldr	r0, [pc, #20]	; (1a7b8 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1a7a4:	703d      	strb	r5, [r7, #0]
   1a7a6:	2207      	movs	r2, #7
   1a7a8:	4631      	mov	r1, r6
   1a7aa:	f005 fd44 	bl	20236 <memcpy>
		return keys;
   1a7ae:	4801      	ldr	r0, [pc, #4]	; (1a7b4 <bt_keys_get_addr+0x48>)
}
   1a7b0:	b003      	add	sp, #12
   1a7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a7b4:	20001f84 	.word	0x20001f84
   1a7b8:	20001f85 	.word	0x20001f85

0001a7bc <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1a7bc:	460b      	mov	r3, r1
   1a7be:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1a7c0:	4a04      	ldr	r2, [pc, #16]	; (1a7d4 <bt_keys_foreach+0x18>)
{
   1a7c2:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1a7c4:	89d4      	ldrh	r4, [r2, #14]
   1a7c6:	4204      	tst	r4, r0
   1a7c8:	d002      	beq.n	1a7d0 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1a7ca:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1a7cc:	4610      	mov	r0, r2
   1a7ce:	4718      	bx	r3
}
   1a7d0:	bc10      	pop	{r4}
   1a7d2:	4770      	bx	lr
   1a7d4:	20001f84 	.word	0x20001f84

0001a7d8 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1a7d8:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1a7da:	4903      	ldr	r1, [pc, #12]	; (1a7e8 <keys_commit+0x10>)
   1a7dc:	2200      	movs	r2, #0
   1a7de:	2002      	movs	r0, #2
   1a7e0:	f7ff ffec 	bl	1a7bc <bt_keys_foreach>
	}

	return 0;
}
   1a7e4:	2000      	movs	r0, #0
   1a7e6:	bd08      	pop	{r3, pc}
   1a7e8:	000223b7 	.word	0x000223b7

0001a7ec <bt_keys_find>:
{
   1a7ec:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a7ee:	4c09      	ldr	r4, [pc, #36]	; (1a814 <bt_keys_find+0x28>)
{
   1a7f0:	460b      	mov	r3, r1
   1a7f2:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a7f4:	89e2      	ldrh	r2, [r4, #14]
   1a7f6:	4202      	tst	r2, r0
   1a7f8:	d007      	beq.n	1a80a <bt_keys_find+0x1e>
   1a7fa:	7822      	ldrb	r2, [r4, #0]
   1a7fc:	429a      	cmp	r2, r3
   1a7fe:	d104      	bne.n	1a80a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1a800:	2207      	movs	r2, #7
   1a802:	1c60      	adds	r0, r4, #1
   1a804:	f005 fd07 	bl	20216 <memcmp>
   1a808:	b108      	cbz	r0, 1a80e <bt_keys_find+0x22>
	return NULL;
   1a80a:	2000      	movs	r0, #0
}
   1a80c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a80e:	4620      	mov	r0, r4
   1a810:	e7fc      	b.n	1a80c <bt_keys_find+0x20>
   1a812:	bf00      	nop
   1a814:	20001f84 	.word	0x20001f84

0001a818 <bt_keys_find_irk>:
{
   1a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1a81a:	780b      	ldrb	r3, [r1, #0]
   1a81c:	2b01      	cmp	r3, #1
   1a81e:	4607      	mov	r7, r0
   1a820:	460c      	mov	r4, r1
   1a822:	d001      	beq.n	1a828 <bt_keys_find_irk+0x10>
		return NULL;
   1a824:	2000      	movs	r0, #0
}
   1a826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1a828:	798b      	ldrb	r3, [r1, #6]
   1a82a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a82e:	2b40      	cmp	r3, #64	; 0x40
   1a830:	d1f8      	bne.n	1a824 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a832:	4d13      	ldr	r5, [pc, #76]	; (1a880 <bt_keys_find_irk+0x68>)
   1a834:	89eb      	ldrh	r3, [r5, #14]
   1a836:	f013 0f02 	tst.w	r3, #2
   1a83a:	462e      	mov	r6, r5
   1a83c:	d0f2      	beq.n	1a824 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1a83e:	7833      	ldrb	r3, [r6, #0]
   1a840:	42bb      	cmp	r3, r7
   1a842:	d10b      	bne.n	1a85c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1a844:	2206      	movs	r2, #6
   1a846:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1a84a:	1c60      	adds	r0, r4, #1
   1a84c:	f005 fce3 	bl	20216 <memcmp>
   1a850:	b908      	cbnz	r0, 1a856 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   1a852:	4628      	mov	r0, r5
   1a854:	e7e7      	b.n	1a826 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a856:	89f3      	ldrh	r3, [r6, #14]
   1a858:	079b      	lsls	r3, r3, #30
   1a85a:	d5e3      	bpl.n	1a824 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1a85c:	7833      	ldrb	r3, [r6, #0]
   1a85e:	42bb      	cmp	r3, r7
   1a860:	d1e0      	bne.n	1a824 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1a862:	3401      	adds	r4, #1
   1a864:	4807      	ldr	r0, [pc, #28]	; (1a884 <bt_keys_find_irk+0x6c>)
   1a866:	4621      	mov	r1, r4
   1a868:	f005 fd70 	bl	2034c <bt_rpa_irk_matches>
   1a86c:	2800      	cmp	r0, #0
   1a86e:	d0d9      	beq.n	1a824 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1a870:	4805      	ldr	r0, [pc, #20]	; (1a888 <bt_keys_find_irk+0x70>)
   1a872:	2206      	movs	r2, #6
   1a874:	4621      	mov	r1, r4
   1a876:	f005 fcde 	bl	20236 <memcpy>
			return &key_pool[i];
   1a87a:	4801      	ldr	r0, [pc, #4]	; (1a880 <bt_keys_find_irk+0x68>)
}
   1a87c:	e7d3      	b.n	1a826 <bt_keys_find_irk+0xe>
   1a87e:	bf00      	nop
   1a880:	20001f84 	.word	0x20001f84
   1a884:	20001fae 	.word	0x20001fae
   1a888:	20001fbe 	.word	0x20001fbe

0001a88c <bt_keys_find_addr>:
{
   1a88c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1a88e:	4c06      	ldr	r4, [pc, #24]	; (1a8a8 <bt_keys_find_addr+0x1c>)
   1a890:	7823      	ldrb	r3, [r4, #0]
   1a892:	4283      	cmp	r3, r0
   1a894:	d104      	bne.n	1a8a0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1a896:	2207      	movs	r2, #7
   1a898:	1c60      	adds	r0, r4, #1
   1a89a:	f005 fcbc 	bl	20216 <memcmp>
   1a89e:	b108      	cbz	r0, 1a8a4 <bt_keys_find_addr+0x18>
	return NULL;
   1a8a0:	2000      	movs	r0, #0
}
   1a8a2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a8a4:	4620      	mov	r0, r4
   1a8a6:	e7fc      	b.n	1a8a2 <bt_keys_find_addr+0x16>
   1a8a8:	20001f84 	.word	0x20001f84

0001a8ac <bt_keys_clear>:
{
   1a8ac:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a8ae:	7a03      	ldrb	r3, [r0, #8]
   1a8b0:	075b      	lsls	r3, r3, #29
{
   1a8b2:	b08c      	sub	sp, #48	; 0x30
   1a8b4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a8b6:	d501      	bpl.n	1a8bc <bt_keys_clear+0x10>
		bt_id_del(keys);
   1a8b8:	f7fa fbe2 	bl	15080 <bt_id_del>
		if (keys->id) {
   1a8bc:	4625      	mov	r5, r4
   1a8be:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a8c2:	b1aa      	cbz	r2, 1a8f0 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1a8c4:	ae02      	add	r6, sp, #8
   1a8c6:	2104      	movs	r1, #4
   1a8c8:	4630      	mov	r0, r6
   1a8ca:	f003 f960 	bl	1db8e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a8ce:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a8d0:	462b      	mov	r3, r5
   1a8d2:	4a08      	ldr	r2, [pc, #32]	; (1a8f4 <bt_keys_clear+0x48>)
   1a8d4:	2124      	movs	r1, #36	; 0x24
   1a8d6:	a803      	add	r0, sp, #12
   1a8d8:	f7f8 feb6 	bl	13648 <bt_settings_encode_key>
		settings_delete(key);
   1a8dc:	a803      	add	r0, sp, #12
   1a8de:	f004 f97f 	bl	1ebe0 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1a8e2:	225c      	movs	r2, #92	; 0x5c
   1a8e4:	2100      	movs	r1, #0
   1a8e6:	4620      	mov	r0, r4
   1a8e8:	f005 fcd0 	bl	2028c <memset>
}
   1a8ec:	b00c      	add	sp, #48	; 0x30
   1a8ee:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a8f0:	9200      	str	r2, [sp, #0]
   1a8f2:	e7ed      	b.n	1a8d0 <bt_keys_clear+0x24>
   1a8f4:	00025fba 	.word	0x00025fba

0001a8f8 <keys_set>:
{
   1a8f8:	b570      	push	{r4, r5, r6, lr}
   1a8fa:	4614      	mov	r4, r2
   1a8fc:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1a8fe:	4605      	mov	r5, r0
   1a900:	b970      	cbnz	r0, 1a920 <keys_set+0x28>
   1a902:	4946      	ldr	r1, [pc, #280]	; (1aa1c <keys_set+0x124>)
   1a904:	4b46      	ldr	r3, [pc, #280]	; (1aa20 <keys_set+0x128>)
		BT_ERR("Insufficient number of arguments");
   1a906:	4847      	ldr	r0, [pc, #284]	; (1aa24 <keys_set+0x12c>)
   1a908:	1ac9      	subs	r1, r1, r3
   1a90a:	08c9      	lsrs	r1, r1, #3
   1a90c:	0189      	lsls	r1, r1, #6
   1a90e:	f041 0101 	orr.w	r1, r1, #1
   1a912:	f003 fe36 	bl	1e582 <log_0>
		return -EINVAL;
   1a916:	f06f 0415 	mvn.w	r4, #21
}
   1a91a:	4620      	mov	r0, r4
   1a91c:	b018      	add	sp, #96	; 0x60
   1a91e:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1a920:	2250      	movs	r2, #80	; 0x50
   1a922:	a904      	add	r1, sp, #16
   1a924:	4618      	mov	r0, r3
   1a926:	47a0      	blx	r4
	if (len < 0) {
   1a928:	1e04      	subs	r4, r0, #0
   1a92a:	da0b      	bge.n	1a944 <keys_set+0x4c>
   1a92c:	4a3b      	ldr	r2, [pc, #236]	; (1aa1c <keys_set+0x124>)
   1a92e:	4b3c      	ldr	r3, [pc, #240]	; (1aa20 <keys_set+0x128>)
		BT_ERR("Failed to read value (err %zd)", len);
   1a930:	483d      	ldr	r0, [pc, #244]	; (1aa28 <keys_set+0x130>)
   1a932:	1ad2      	subs	r2, r2, r3
   1a934:	08d2      	lsrs	r2, r2, #3
   1a936:	0192      	lsls	r2, r2, #6
   1a938:	f042 0201 	orr.w	r2, r2, #1
   1a93c:	4621      	mov	r1, r4
   1a93e:	f003 fe2d 	bl	1e59c <log_1>
   1a942:	e7e8      	b.n	1a916 <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   1a944:	a902      	add	r1, sp, #8
   1a946:	4628      	mov	r0, r5
   1a948:	f005 fd55 	bl	203f6 <bt_settings_decode_key>
	if (err) {
   1a94c:	4606      	mov	r6, r0
   1a94e:	b148      	cbz	r0, 1a964 <keys_set+0x6c>
   1a950:	4a32      	ldr	r2, [pc, #200]	; (1aa1c <keys_set+0x124>)
   1a952:	4b33      	ldr	r3, [pc, #204]	; (1aa20 <keys_set+0x128>)
		BT_ERR("Unable to decode address %s", name);
   1a954:	4835      	ldr	r0, [pc, #212]	; (1aa2c <keys_set+0x134>)
   1a956:	1ad2      	subs	r2, r2, r3
   1a958:	08d2      	lsrs	r2, r2, #3
   1a95a:	0192      	lsls	r2, r2, #6
   1a95c:	f042 0201 	orr.w	r2, r2, #1
   1a960:	4629      	mov	r1, r5
   1a962:	e7ec      	b.n	1a93e <keys_set+0x46>
	settings_name_next(name, &next);
   1a964:	a901      	add	r1, sp, #4
   1a966:	4628      	mov	r0, r5
   1a968:	f004 f961 	bl	1ec2e <settings_name_next>
	if (!next) {
   1a96c:	9801      	ldr	r0, [sp, #4]
   1a96e:	b120      	cbz	r0, 1a97a <keys_set+0x82>
		id = strtol(next, NULL, 10);
   1a970:	220a      	movs	r2, #10
   1a972:	4631      	mov	r1, r6
   1a974:	f005 fb91 	bl	2009a <strtol>
   1a978:	b2c0      	uxtb	r0, r0
	if (!len) {
   1a97a:	b9e4      	cbnz	r4, 1a9b6 <keys_set+0xbe>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1a97c:	4601      	mov	r1, r0
   1a97e:	aa02      	add	r2, sp, #8
   1a980:	203f      	movs	r0, #63	; 0x3f
   1a982:	f7ff ff33 	bl	1a7ec <bt_keys_find>
		if (keys) {
   1a986:	b120      	cbz	r0, 1a992 <keys_set+0x9a>
			(void)memset(keys, 0, sizeof(*keys));
   1a988:	225c      	movs	r2, #92	; 0x5c
   1a98a:	4621      	mov	r1, r4
   1a98c:	f005 fc7e 	bl	2028c <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1a990:	e7c3      	b.n	1a91a <keys_set+0x22>
   1a992:	4a23      	ldr	r2, [pc, #140]	; (1aa20 <keys_set+0x128>)
   1a994:	4d21      	ldr	r5, [pc, #132]	; (1aa1c <keys_set+0x124>)
			BT_WARN("Unable to find deleted keys for %s",
   1a996:	a802      	add	r0, sp, #8
   1a998:	1aad      	subs	r5, r5, r2
   1a99a:	f7f8 fbc5 	bl	13128 <bt_addr_le_str_real>
   1a99e:	f7f6 f90b 	bl	10bb8 <z_log_strdup>
   1a9a2:	08ed      	lsrs	r5, r5, #3
   1a9a4:	01ad      	lsls	r5, r5, #6
   1a9a6:	f045 0502 	orr.w	r5, r5, #2
   1a9aa:	4601      	mov	r1, r0
   1a9ac:	462a      	mov	r2, r5
   1a9ae:	4820      	ldr	r0, [pc, #128]	; (1aa30 <keys_set+0x138>)
   1a9b0:	f003 fdf4 	bl	1e59c <log_1>
   1a9b4:	e7b1      	b.n	1a91a <keys_set+0x22>
	keys = bt_keys_get_addr(id, &addr);
   1a9b6:	a902      	add	r1, sp, #8
   1a9b8:	f7ff fed8 	bl	1a76c <bt_keys_get_addr>
	if (!keys) {
   1a9bc:	4605      	mov	r5, r0
   1a9be:	b998      	cbnz	r0, 1a9e8 <keys_set+0xf0>
   1a9c0:	4a17      	ldr	r2, [pc, #92]	; (1aa20 <keys_set+0x128>)
   1a9c2:	4c16      	ldr	r4, [pc, #88]	; (1aa1c <keys_set+0x124>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1a9c4:	a802      	add	r0, sp, #8
   1a9c6:	1aa4      	subs	r4, r4, r2
   1a9c8:	f7f8 fbae 	bl	13128 <bt_addr_le_str_real>
   1a9cc:	f7f6 f8f4 	bl	10bb8 <z_log_strdup>
   1a9d0:	08e4      	lsrs	r4, r4, #3
   1a9d2:	01a4      	lsls	r4, r4, #6
   1a9d4:	f044 0401 	orr.w	r4, r4, #1
   1a9d8:	4601      	mov	r1, r0
   1a9da:	4622      	mov	r2, r4
   1a9dc:	4815      	ldr	r0, [pc, #84]	; (1aa34 <keys_set+0x13c>)
   1a9de:	f003 fddd 	bl	1e59c <log_1>
		return -ENOMEM;
   1a9e2:	f06f 040b 	mvn.w	r4, #11
   1a9e6:	e798      	b.n	1a91a <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   1a9e8:	2c50      	cmp	r4, #80	; 0x50
   1a9ea:	d00f      	beq.n	1aa0c <keys_set+0x114>
   1a9ec:	4a0c      	ldr	r2, [pc, #48]	; (1aa20 <keys_set+0x128>)
   1a9ee:	4b0b      	ldr	r3, [pc, #44]	; (1aa1c <keys_set+0x124>)
			BT_ERR("Invalid key length %zd != %zu", len,
   1a9f0:	4811      	ldr	r0, [pc, #68]	; (1aa38 <keys_set+0x140>)
   1a9f2:	1a9b      	subs	r3, r3, r2
   1a9f4:	08db      	lsrs	r3, r3, #3
   1a9f6:	019b      	lsls	r3, r3, #6
   1a9f8:	f043 0301 	orr.w	r3, r3, #1
   1a9fc:	2250      	movs	r2, #80	; 0x50
   1a9fe:	4621      	mov	r1, r4
   1aa00:	f003 fde0 	bl	1e5c4 <log_2>
			bt_keys_clear(keys);
   1aa04:	4628      	mov	r0, r5
   1aa06:	f7ff ff51 	bl	1a8ac <bt_keys_clear>
			return -EINVAL;
   1aa0a:	e784      	b.n	1a916 <keys_set+0x1e>
		memcpy(keys->storage_start, val, len);
   1aa0c:	4622      	mov	r2, r4
   1aa0e:	a904      	add	r1, sp, #16
   1aa10:	300c      	adds	r0, #12
   1aa12:	f005 fc10 	bl	20236 <memcpy>
	return 0;
   1aa16:	2400      	movs	r4, #0
   1aa18:	e77f      	b.n	1a91a <keys_set+0x22>
   1aa1a:	bf00      	nop
   1aa1c:	00023594 	.word	0x00023594
   1aa20:	0002353c 	.word	0x0002353c
   1aa24:	00024864 	.word	0x00024864
   1aa28:	00025f1b 	.word	0x00025f1b
   1aa2c:	000259d6 	.word	0x000259d6
   1aa30:	00025f3a 	.word	0x00025f3a
   1aa34:	00025f5d 	.word	0x00025f5d
   1aa38:	00025f7c 	.word	0x00025f7c

0001aa3c <bt_keys_store>:
{
   1aa3c:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1aa3e:	4605      	mov	r5, r0
{
   1aa40:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1aa42:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1aa46:	4604      	mov	r4, r0
	if (keys->id) {
   1aa48:	b30a      	cbz	r2, 1aa8e <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   1aa4a:	ae02      	add	r6, sp, #8
   1aa4c:	2104      	movs	r1, #4
   1aa4e:	4630      	mov	r0, r6
   1aa50:	f003 f89d 	bl	1db8e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1aa54:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1aa56:	4a0f      	ldr	r2, [pc, #60]	; (1aa94 <bt_keys_store+0x58>)
   1aa58:	462b      	mov	r3, r5
   1aa5a:	2124      	movs	r1, #36	; 0x24
   1aa5c:	a803      	add	r0, sp, #12
   1aa5e:	f7f8 fdf3 	bl	13648 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1aa62:	f104 010c 	add.w	r1, r4, #12
   1aa66:	2250      	movs	r2, #80	; 0x50
   1aa68:	a803      	add	r0, sp, #12
   1aa6a:	f7f6 ff29 	bl	118c0 <settings_save_one>
	if (err) {
   1aa6e:	4604      	mov	r4, r0
   1aa70:	b150      	cbz	r0, 1aa88 <bt_keys_store+0x4c>
   1aa72:	4a09      	ldr	r2, [pc, #36]	; (1aa98 <bt_keys_store+0x5c>)
   1aa74:	4b09      	ldr	r3, [pc, #36]	; (1aa9c <bt_keys_store+0x60>)
   1aa76:	1ad2      	subs	r2, r2, r3
   1aa78:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   1aa7a:	0192      	lsls	r2, r2, #6
   1aa7c:	4601      	mov	r1, r0
   1aa7e:	f042 0201 	orr.w	r2, r2, #1
   1aa82:	4807      	ldr	r0, [pc, #28]	; (1aaa0 <bt_keys_store+0x64>)
   1aa84:	f003 fd8a 	bl	1e59c <log_1>
}
   1aa88:	4620      	mov	r0, r4
   1aa8a:	b00c      	add	sp, #48	; 0x30
   1aa8c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1aa8e:	9200      	str	r2, [sp, #0]
   1aa90:	e7e1      	b.n	1aa56 <bt_keys_store+0x1a>
   1aa92:	bf00      	nop
   1aa94:	00025fba 	.word	0x00025fba
   1aa98:	00023594 	.word	0x00023594
   1aa9c:	0002353c 	.word	0x0002353c
   1aaa0:	00025f9a 	.word	0x00025f9a

0001aaa4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1aaa4:	4b02      	ldr	r3, [pc, #8]	; (1aab0 <net_buf_pool_get+0xc>)
   1aaa6:	2228      	movs	r2, #40	; 0x28
   1aaa8:	fb02 3000 	mla	r0, r2, r0, r3
   1aaac:	4770      	bx	lr
   1aaae:	bf00      	nop
   1aab0:	200007ec 	.word	0x200007ec

0001aab4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1aab4:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1aab6:	4a05      	ldr	r2, [pc, #20]	; (1aacc <net_buf_id+0x18>)
   1aab8:	2128      	movs	r1, #40	; 0x28
   1aaba:	fb01 2303 	mla	r3, r1, r3, r2
   1aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aac0:	1ac0      	subs	r0, r0, r3
}
   1aac2:	4b03      	ldr	r3, [pc, #12]	; (1aad0 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1aac4:	10c0      	asrs	r0, r0, #3
}
   1aac6:	4358      	muls	r0, r3
   1aac8:	4770      	bx	lr
   1aaca:	bf00      	nop
   1aacc:	200007ec 	.word	0x200007ec
   1aad0:	aaaaaaab 	.word	0xaaaaaaab

0001aad4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1aad4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1aad6:	4a0a      	ldr	r2, [pc, #40]	; (1ab00 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1aad8:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1aada:	2428      	movs	r4, #40	; 0x28
   1aadc:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1aae0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1aae2:	6a1b      	ldr	r3, [r3, #32]
   1aae4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1aae6:	6823      	ldr	r3, [r4, #0]
   1aae8:	429a      	cmp	r2, r3
   1aaea:	bf94      	ite	ls
   1aaec:	600a      	strls	r2, [r1, #0]
   1aaee:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1aaf0:	f7ff ffe0 	bl	1aab4 <net_buf_id>
   1aaf4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1aaf8:	fb02 3000 	mla	r0, r2, r0, r3
   1aafc:	bd10      	pop	{r4, pc}
   1aafe:	bf00      	nop
   1ab00:	200007ec 	.word	0x200007ec

0001ab04 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ab04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ab08:	4605      	mov	r5, r0
   1ab0a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ab0c:	4610      	mov	r0, r2
   1ab0e:	4619      	mov	r1, r3
{
   1ab10:	4616      	mov	r6, r2
   1ab12:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ab14:	f008 fa23 	bl	22f5e <sys_clock_timeout_end_calc>
   1ab18:	4680      	mov	r8, r0
   1ab1a:	4689      	mov	r9, r1
	__asm__ volatile(
   1ab1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab20:	f3ef 8a11 	mrs	sl, BASEPRI
   1ab24:	f383 8811 	msr	BASEPRI, r3
   1ab28:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ab2c:	8b6b      	ldrh	r3, [r5, #26]
   1ab2e:	2b00      	cmp	r3, #0
   1ab30:	d054      	beq.n	1abdc <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ab32:	8b2a      	ldrh	r2, [r5, #24]
   1ab34:	429a      	cmp	r2, r3
   1ab36:	d93d      	bls.n	1abb4 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1ab38:	2200      	movs	r2, #0
   1ab3a:	2300      	movs	r3, #0
   1ab3c:	4628      	mov	r0, r5
   1ab3e:	f001 ff65 	bl	1ca0c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ab42:	4604      	mov	r4, r0
   1ab44:	2800      	cmp	r0, #0
   1ab46:	d035      	beq.n	1abb4 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1ab48:	f38a 8811 	msr	BASEPRI, sl
   1ab4c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ab50:	9b01      	ldr	r3, [sp, #4]
   1ab52:	2b00      	cmp	r3, #0
   1ab54:	d052      	beq.n	1abfc <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ab56:	ea56 0307 	orrs.w	r3, r6, r7
   1ab5a:	d010      	beq.n	1ab7e <net_buf_alloc_len+0x7a>
   1ab5c:	1c7b      	adds	r3, r7, #1
   1ab5e:	bf08      	it	eq
   1ab60:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1ab64:	d00b      	beq.n	1ab7e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1ab66:	f002 fec9 	bl	1d8fc <sys_clock_tick_get>
   1ab6a:	ebb8 0600 	subs.w	r6, r8, r0
   1ab6e:	eb69 0701 	sbc.w	r7, r9, r1
   1ab72:	2e00      	cmp	r6, #0
   1ab74:	f177 0300 	sbcs.w	r3, r7, #0
   1ab78:	bfbc      	itt	lt
   1ab7a:	2600      	movlt	r6, #0
   1ab7c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab7e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ab80:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1ac14 <net_buf_alloc_len+0x110>
   1ab84:	2228      	movs	r2, #40	; 0x28
   1ab86:	fb02 8303 	mla	r3, r2, r3, r8
   1ab8a:	a901      	add	r1, sp, #4
   1ab8c:	6a1b      	ldr	r3, [r3, #32]
   1ab8e:	681b      	ldr	r3, [r3, #0]
   1ab90:	4632      	mov	r2, r6
   1ab92:	681d      	ldr	r5, [r3, #0]
   1ab94:	4620      	mov	r0, r4
   1ab96:	463b      	mov	r3, r7
   1ab98:	47a8      	blx	r5
   1ab9a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ab9c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1ab9e:	bb70      	cbnz	r0, 1abfe <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1aba0:	79a0      	ldrb	r0, [r4, #6]
   1aba2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1aba6:	4621      	mov	r1, r4
   1aba8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1abac:	f007 ff34 	bl	22a18 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1abb0:	462c      	mov	r4, r5
}
   1abb2:	e01f      	b.n	1abf4 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1abb4:	8b68      	ldrh	r0, [r5, #26]
   1abb6:	1e43      	subs	r3, r0, #1
   1abb8:	836b      	strh	r3, [r5, #26]
   1abba:	f38a 8811 	msr	BASEPRI, sl
   1abbe:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1abc2:	8b2c      	ldrh	r4, [r5, #24]
   1abc4:	1a24      	subs	r4, r4, r0
   1abc6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1abc8:	2318      	movs	r3, #24
   1abca:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1abce:	4811      	ldr	r0, [pc, #68]	; (1ac14 <net_buf_alloc_len+0x110>)
   1abd0:	4b11      	ldr	r3, [pc, #68]	; (1ac18 <net_buf_alloc_len+0x114>)
   1abd2:	1a2d      	subs	r5, r5, r0
   1abd4:	10ed      	asrs	r5, r5, #3
   1abd6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1abd8:	71a5      	strb	r5, [r4, #6]
		goto success;
   1abda:	e7b9      	b.n	1ab50 <net_buf_alloc_len+0x4c>
   1abdc:	f38a 8811 	msr	BASEPRI, sl
   1abe0:	f3bf 8f6f 	isb	sy
   1abe4:	4632      	mov	r2, r6
   1abe6:	463b      	mov	r3, r7
   1abe8:	4628      	mov	r0, r5
   1abea:	f001 ff0f 	bl	1ca0c <z_impl_k_queue_get>
	if (!buf) {
   1abee:	4604      	mov	r4, r0
   1abf0:	2800      	cmp	r0, #0
   1abf2:	d1ad      	bne.n	1ab50 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1abf4:	4620      	mov	r0, r4
   1abf6:	b002      	add	sp, #8
   1abf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1abfc:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1abfe:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ac00:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ac02:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1ac04:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1ac06:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1ac08:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1ac0a:	6923      	ldr	r3, [r4, #16]
   1ac0c:	81e2      	strh	r2, [r4, #14]
   1ac0e:	60a3      	str	r3, [r4, #8]
	return buf;
   1ac10:	e7f0      	b.n	1abf4 <net_buf_alloc_len+0xf0>
   1ac12:	bf00      	nop
   1ac14:	200007ec 	.word	0x200007ec
   1ac18:	cccccccd 	.word	0xcccccccd

0001ac1c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ac1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac20:	4d17      	ldr	r5, [pc, #92]	; (1ac80 <net_buf_unref+0x64>)
   1ac22:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ac24:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1ac26:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1ac28:	b90c      	cbnz	r4, 1ac2e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1ac2e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1ac30:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1ac34:	3b01      	subs	r3, #1
   1ac36:	b2db      	uxtb	r3, r3
   1ac38:	7123      	strb	r3, [r4, #4]
   1ac3a:	2b00      	cmp	r3, #0
   1ac3c:	d1f5      	bne.n	1ac2a <net_buf_unref+0xe>
		if (buf->__buf) {
   1ac3e:	6921      	ldr	r1, [r4, #16]
   1ac40:	b159      	cbz	r1, 1ac5a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ac42:	7963      	ldrb	r3, [r4, #5]
   1ac44:	079b      	lsls	r3, r3, #30
   1ac46:	d407      	bmi.n	1ac58 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1ac48:	79a3      	ldrb	r3, [r4, #6]
   1ac4a:	fb07 5303 	mla	r3, r7, r3, r5
   1ac4e:	4620      	mov	r0, r4
   1ac50:	6a1b      	ldr	r3, [r3, #32]
   1ac52:	681b      	ldr	r3, [r3, #0]
   1ac54:	689b      	ldr	r3, [r3, #8]
   1ac56:	4798      	blx	r3
			buf->__buf = NULL;
   1ac58:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1ac5a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1ac5c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1ac5e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1ac62:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1ac64:	69db      	ldr	r3, [r3, #28]
   1ac66:	b11b      	cbz	r3, 1ac70 <net_buf_unref+0x54>
			pool->destroy(buf);
   1ac68:	4620      	mov	r0, r4
   1ac6a:	4798      	blx	r3
{
   1ac6c:	4644      	mov	r4, r8
   1ac6e:	e7db      	b.n	1ac28 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1ac70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ac74:	4621      	mov	r1, r4
   1ac76:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1ac7a:	f007 fecd 	bl	22a18 <k_queue_prepend>
}
   1ac7e:	e7f5      	b.n	1ac6c <net_buf_unref+0x50>
   1ac80:	200007ec 	.word	0x200007ec

0001ac84 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   1ac84:	4b01      	ldr	r3, [pc, #4]	; (1ac8c <hfclk_on_callback+0x8>)
   1ac86:	2201      	movs	r2, #1
   1ac88:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   1ac8a:	4770      	bx	lr
   1ac8c:	4000c000 	.word	0x4000c000

0001ac90 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1ac90:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   1ac92:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1ac94:	d10b      	bne.n	1acae <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   1ac96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1ac98:	4b06      	ldr	r3, [pc, #24]	; (1acb4 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   1ac9a:	4807      	ldr	r0, [pc, #28]	; (1acb8 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   1ac9c:	4359      	muls	r1, r3
	val->val1 = uval / 1000000;
   1ac9e:	fb91 f3f0 	sdiv	r3, r1, r0
   1aca2:	6013      	str	r3, [r2, #0]
	val->val2 = uval % 1000000;
   1aca4:	fb00 1313 	mls	r3, r0, r3, r1
   1aca8:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   1acaa:	2000      	movs	r0, #0
   1acac:	4770      	bx	lr
		return -ENOTSUP;
   1acae:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1acb2:	4770      	bx	lr
   1acb4:	0003d090 	.word	0x0003d090
   1acb8:	000f4240 	.word	0x000f4240

0001acbc <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1acbc:	4b03      	ldr	r3, [pc, #12]	; (1accc <temp_nrf5_isr+0x10>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   1acbe:	6900      	ldr	r0, [r0, #16]
   1acc0:	2200      	movs	r2, #0
   1acc2:	601a      	str	r2, [r3, #0]
   1acc4:	681b      	ldr	r3, [r3, #0]
	z_impl_k_sem_give(sem);
   1acc6:	f001 bed5 	b.w	1ca74 <z_impl_k_sem_give>
   1acca:	bf00      	nop
   1accc:	4000c100 	.word	0x4000c100

0001acd0 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   1acd0:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   1acd2:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1acd4:	2000      	movs	r0, #0
   1acd6:	f7f7 f9ad 	bl	12034 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   1acda:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   1acdc:	f04f 32ff 	mov.w	r2, #4294967295
   1ace0:	2100      	movs	r1, #0
   1ace2:	4620      	mov	r0, r4
   1ace4:	f007 fede 	bl	22aa4 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   1ace8:	f104 0018 	add.w	r0, r4, #24
   1acec:	f007 fe06 	bl	228fc <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   1acf0:	2200      	movs	r2, #0
   1acf2:	2101      	movs	r1, #1
   1acf4:	200c      	movs	r0, #12
   1acf6:	f7f7 fd1b 	bl	12730 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   1acfa:	200c      	movs	r0, #12
   1acfc:	f7f7 fce6 	bl	126cc <arch_irq_enable>
    p_reg->INTENSET = mask;
   1ad00:	4b02      	ldr	r3, [pc, #8]	; (1ad0c <temp_nrf5_init+0x3c>)
   1ad02:	2201      	movs	r2, #1
   1ad04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   1ad08:	2000      	movs	r0, #0
   1ad0a:	bd10      	pop	{r4, pc}
   1ad0c:	4000c000 	.word	0x4000c000

0001ad10 <temp_nrf5_sample_fetch>:
{
   1ad10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   1ad12:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   1ad14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1ad16:	b36b      	cbz	r3, 1ad74 <temp_nrf5_sample_fetch+0x64>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   1ad18:	2938      	cmp	r1, #56	; 0x38
   1ad1a:	d001      	beq.n	1ad20 <temp_nrf5_sample_fetch+0x10>
   1ad1c:	290c      	cmp	r1, #12
   1ad1e:	d12c      	bne.n	1ad7a <temp_nrf5_sample_fetch+0x6a>
	k_mutex_lock(&data->mutex, K_FOREVER);
   1ad20:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   1ad24:	f04f 32ff 	mov.w	r2, #4294967295
   1ad28:	f04f 33ff 	mov.w	r3, #4294967295
   1ad2c:	4630      	mov	r0, r6
   1ad2e:	f001 fdaf 	bl	1c890 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1ad32:	4b13      	ldr	r3, [pc, #76]	; (1ad80 <temp_nrf5_sample_fetch+0x70>)
   1ad34:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   1ad36:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1ad38:	2303      	movs	r3, #3
   1ad3a:	2400      	movs	r4, #0
   1ad3c:	4669      	mov	r1, sp
   1ad3e:	9403      	str	r4, [sp, #12]
   1ad40:	9302      	str	r3, [sp, #8]
   1ad42:	f003 f855 	bl	1ddf0 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   1ad46:	f04f 32ff 	mov.w	r2, #4294967295
   1ad4a:	f04f 33ff 	mov.w	r3, #4294967295
   1ad4e:	4628      	mov	r0, r5
   1ad50:	f001 feb6 	bl	1cac0 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   1ad54:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1ad56:	f003 f894 	bl	1de82 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   1ad5a:	4b0a      	ldr	r3, [pc, #40]	; (1ad84 <temp_nrf5_sample_fetch+0x74>)
   1ad5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   1ad60:	62eb      	str	r3, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   1ad62:	4b09      	ldr	r3, [pc, #36]	; (1ad88 <temp_nrf5_sample_fetch+0x78>)
   1ad64:	2201      	movs	r2, #1
   1ad66:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   1ad68:	4630      	mov	r0, r6
   1ad6a:	f001 fe09 	bl	1c980 <z_impl_k_mutex_unlock>
	return 0;
   1ad6e:	4620      	mov	r0, r4
}
   1ad70:	b004      	add	sp, #16
   1ad72:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1ad74:	f06f 000a 	mvn.w	r0, #10
   1ad78:	e7fa      	b.n	1ad70 <temp_nrf5_sample_fetch+0x60>
		return -ENOTSUP;
   1ad7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ad7e:	e7f7      	b.n	1ad70 <temp_nrf5_sample_fetch+0x60>
   1ad80:	0001ac85 	.word	0x0001ac85
   1ad84:	4000c000 	.word	0x4000c000
   1ad88:	4000c004 	.word	0x4000c004

0001ad8c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1ad8c:	4b02      	ldr	r3, [pc, #8]	; (1ad98 <flash_nrf_pages_layout+0xc>)
   1ad8e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1ad90:	2301      	movs	r3, #1
   1ad92:	6013      	str	r3, [r2, #0]
}
   1ad94:	4770      	bx	lr
   1ad96:	bf00      	nop
   1ad98:	2000201c 	.word	0x2000201c

0001ad9c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1ad9c:	4800      	ldr	r0, [pc, #0]	; (1ada0 <flash_nrf_get_parameters+0x4>)
   1ad9e:	4770      	bx	lr
   1ada0:	00023e78 	.word	0x00023e78

0001ada4 <flash_nrf_read>:
{
   1ada4:	b570      	push	{r4, r5, r6, lr}
   1ada6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1ada8:	4628      	mov	r0, r5
   1adaa:	4619      	mov	r1, r3
{
   1adac:	4616      	mov	r6, r2
   1adae:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1adb0:	f007 fbb1 	bl	22516 <is_regular_addr_valid>
   1adb4:	b970      	cbnz	r0, 1add4 <flash_nrf_read+0x30>
   1adb6:	4a0c      	ldr	r2, [pc, #48]	; (1ade8 <flash_nrf_read+0x44>)
   1adb8:	4b0c      	ldr	r3, [pc, #48]	; (1adec <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1adba:	480d      	ldr	r0, [pc, #52]	; (1adf0 <flash_nrf_read+0x4c>)
   1adbc:	1a9b      	subs	r3, r3, r2
   1adbe:	08db      	lsrs	r3, r3, #3
   1adc0:	019b      	lsls	r3, r3, #6
   1adc2:	f043 0301 	orr.w	r3, r3, #1
   1adc6:	4622      	mov	r2, r4
   1adc8:	4629      	mov	r1, r5
   1adca:	f003 fbfb 	bl	1e5c4 <log_2>
		return -EINVAL;
   1adce:	f06f 0015 	mvn.w	r0, #21
}
   1add2:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1add4:	b134      	cbz	r4, 1ade4 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1add6:	4622      	mov	r2, r4
   1add8:	4629      	mov	r1, r5
   1adda:	4630      	mov	r0, r6
   1addc:	f005 fa2b 	bl	20236 <memcpy>
	return 0;
   1ade0:	2000      	movs	r0, #0
   1ade2:	e7f6      	b.n	1add2 <flash_nrf_read+0x2e>
		return 0;
   1ade4:	4620      	mov	r0, r4
   1ade6:	e7f4      	b.n	1add2 <flash_nrf_read+0x2e>
   1ade8:	0002353c 	.word	0x0002353c
   1adec:	000235cc 	.word	0x000235cc
   1adf0:	00025fe0 	.word	0x00025fe0

0001adf4 <flash_nrf_erase>:
{
   1adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1adf6:	b087      	sub	sp, #28
   1adf8:	460e      	mov	r6, r1
   1adfa:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1adfc:	f007 fca8 	bl	22750 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1ae00:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ae02:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1ae04:	4630      	mov	r0, r6
   1ae06:	f007 fb86 	bl	22516 <is_regular_addr_valid>
   1ae0a:	b388      	cbz	r0, 1ae70 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ae0c:	fbb6 f3f7 	udiv	r3, r6, r7
   1ae10:	fb07 6313 	mls	r3, r7, r3, r6
   1ae14:	b923      	cbnz	r3, 1ae20 <flash_nrf_erase+0x2c>
   1ae16:	fbb5 f4f7 	udiv	r4, r5, r7
   1ae1a:	fb07 5414 	mls	r4, r7, r4, r5
   1ae1e:	b184      	cbz	r4, 1ae42 <flash_nrf_erase+0x4e>
   1ae20:	4a25      	ldr	r2, [pc, #148]	; (1aeb8 <flash_nrf_erase+0xc4>)
   1ae22:	4b26      	ldr	r3, [pc, #152]	; (1aebc <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1ae24:	4826      	ldr	r0, [pc, #152]	; (1aec0 <flash_nrf_erase+0xcc>)
   1ae26:	1a9b      	subs	r3, r3, r2
   1ae28:	08db      	lsrs	r3, r3, #3
   1ae2a:	019b      	lsls	r3, r3, #6
   1ae2c:	f043 0301 	orr.w	r3, r3, #1
   1ae30:	462a      	mov	r2, r5
   1ae32:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ae34:	f003 fbc6 	bl	1e5c4 <log_2>
		return -EINVAL;
   1ae38:	f06f 0415 	mvn.w	r4, #21
}
   1ae3c:	4620      	mov	r0, r4
   1ae3e:	b007      	add	sp, #28
   1ae40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1ae42:	42af      	cmp	r7, r5
   1ae44:	d8fa      	bhi.n	1ae3c <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1ae46:	f04f 33ff 	mov.w	r3, #4294967295
   1ae4a:	f04f 32ff 	mov.w	r2, #4294967295
   1ae4e:	481d      	ldr	r0, [pc, #116]	; (1aec4 <flash_nrf_erase+0xd0>)
   1ae50:	f001 fe36 	bl	1cac0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1ae54:	f007 fc72 	bl	2273c <nrf_flash_sync_is_required>
   1ae58:	ab02      	add	r3, sp, #8
   1ae5a:	4601      	mov	r1, r0
   1ae5c:	b998      	cbnz	r0, 1ae86 <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1ae5e:	2210      	movs	r2, #16
   1ae60:	4618      	mov	r0, r3
   1ae62:	f005 fa13 	bl	2028c <memset>
   1ae66:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1ae6a:	f007 fb67 	bl	2253c <erase_op>
   1ae6e:	e01d      	b.n	1aeac <flash_nrf_erase+0xb8>
   1ae70:	4a11      	ldr	r2, [pc, #68]	; (1aeb8 <flash_nrf_erase+0xc4>)
   1ae72:	4b12      	ldr	r3, [pc, #72]	; (1aebc <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ae74:	4814      	ldr	r0, [pc, #80]	; (1aec8 <flash_nrf_erase+0xd4>)
   1ae76:	1a9b      	subs	r3, r3, r2
   1ae78:	08db      	lsrs	r3, r3, #3
   1ae7a:	019b      	lsls	r3, r3, #6
   1ae7c:	f043 0301 	orr.w	r3, r3, #1
   1ae80:	462a      	mov	r2, r5
   1ae82:	4631      	mov	r1, r6
   1ae84:	e7d6      	b.n	1ae34 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1ae86:	2210      	movs	r2, #16
   1ae88:	4621      	mov	r1, r4
   1ae8a:	4618      	mov	r0, r3
   1ae8c:	f005 f9fe 	bl	2028c <memset>
   1ae90:	2201      	movs	r2, #1
   1ae92:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1ae96:	4a0d      	ldr	r2, [pc, #52]	; (1aecc <flash_nrf_erase+0xd8>)
   1ae98:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1ae9c:	480c      	ldr	r0, [pc, #48]	; (1aed0 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1ae9e:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1aea2:	f001 f85f 	bl	1bf64 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1aea6:	4668      	mov	r0, sp
   1aea8:	f001 f862 	bl	1bf70 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1aeac:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1aeae:	4805      	ldr	r0, [pc, #20]	; (1aec4 <flash_nrf_erase+0xd0>)
   1aeb0:	f001 fde0 	bl	1ca74 <z_impl_k_sem_give>
}
   1aeb4:	e7c2      	b.n	1ae3c <flash_nrf_erase+0x48>
   1aeb6:	bf00      	nop
   1aeb8:	0002353c 	.word	0x0002353c
   1aebc:	000235cc 	.word	0x000235cc
   1aec0:	00025ffd 	.word	0x00025ffd
   1aec4:	20002024 	.word	0x20002024
   1aec8:	00025fe0 	.word	0x00025fe0
   1aecc:	0002253d 	.word	0x0002253d
   1aed0:	00015e64 	.word	0x00015e64

0001aed4 <nrf_flash_init>:
{
   1aed4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1aed6:	2201      	movs	r2, #1
   1aed8:	4611      	mov	r1, r2
   1aeda:	4807      	ldr	r0, [pc, #28]	; (1aef8 <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1aedc:	4c07      	ldr	r4, [pc, #28]	; (1aefc <nrf_flash_init+0x28>)
   1aede:	f007 fde1 	bl	22aa4 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1aee2:	f001 f837 	bl	1bf54 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1aee6:	f007 fc37 	bl	22758 <nrfx_nvmc_flash_page_count_get>
   1aeea:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1aeec:	f007 fc30 	bl	22750 <nrfx_nvmc_flash_page_size_get>
   1aef0:	6060      	str	r0, [r4, #4]
}
   1aef2:	2000      	movs	r0, #0
   1aef4:	bd10      	pop	{r4, pc}
   1aef6:	bf00      	nop
   1aef8:	20002024 	.word	0x20002024
   1aefc:	2000201c 	.word	0x2000201c

0001af00 <write_op>:
{
   1af00:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1af02:	7b03      	ldrb	r3, [r0, #12]
{
   1af04:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1af06:	b10b      	cbz	r3, 1af0c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1af08:	f007 fc1a 	bl	22740 <nrf_flash_sync_get_timestamp_begin>
{
   1af0c:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1af0e:	68a3      	ldr	r3, [r4, #8]
   1af10:	2b03      	cmp	r3, #3
   1af12:	d806      	bhi.n	1af22 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1af14:	4a12      	ldr	r2, [pc, #72]	; (1af60 <write_op+0x60>)
   1af16:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1af1a:	07db      	lsls	r3, r3, #31
   1af1c:	d5fb      	bpl.n	1af16 <write_op+0x16>
	return FLASH_OP_DONE;
   1af1e:	2000      	movs	r0, #0
}
   1af20:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1af22:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1af24:	6860      	ldr	r0, [r4, #4]
   1af26:	6819      	ldr	r1, [r3, #0]
   1af28:	f001 fa0c 	bl	1c344 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1af2c:	6863      	ldr	r3, [r4, #4]
   1af2e:	3304      	adds	r3, #4
   1af30:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1af32:	6823      	ldr	r3, [r4, #0]
   1af34:	3304      	adds	r3, #4
   1af36:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1af38:	68a3      	ldr	r3, [r4, #8]
   1af3a:	3b04      	subs	r3, #4
   1af3c:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1af3e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1af40:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1af42:	2b00      	cmp	r3, #0
   1af44:	d0e3      	beq.n	1af0e <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1af46:	4628      	mov	r0, r5
   1af48:	f001 f89e 	bl	1c088 <nrf_flash_sync_check_time_limit>
   1af4c:	2800      	cmp	r0, #0
   1af4e:	d0de      	beq.n	1af0e <write_op+0xe>
   1af50:	4a03      	ldr	r2, [pc, #12]	; (1af60 <write_op+0x60>)
   1af52:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1af56:	07d9      	lsls	r1, r3, #31
   1af58:	d5fb      	bpl.n	1af52 <write_op+0x52>
				return FLASH_OP_ONGOING;
   1af5a:	2001      	movs	r0, #1
   1af5c:	e7e0      	b.n	1af20 <write_op+0x20>
   1af5e:	bf00      	nop
   1af60:	4001e000 	.word	0x4001e000

0001af64 <flash_nrf_write>:
{
   1af64:	b570      	push	{r4, r5, r6, lr}
   1af66:	460d      	mov	r5, r1
   1af68:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1af6a:	4619      	mov	r1, r3
   1af6c:	4628      	mov	r0, r5
{
   1af6e:	4616      	mov	r6, r2
   1af70:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1af72:	f007 fad0 	bl	22516 <is_regular_addr_valid>
   1af76:	b980      	cbnz	r0, 1af9a <flash_nrf_write+0x36>
   1af78:	4a23      	ldr	r2, [pc, #140]	; (1b008 <flash_nrf_write+0xa4>)
   1af7a:	4b24      	ldr	r3, [pc, #144]	; (1b00c <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1af7c:	4824      	ldr	r0, [pc, #144]	; (1b010 <flash_nrf_write+0xac>)
   1af7e:	1a9b      	subs	r3, r3, r2
   1af80:	08db      	lsrs	r3, r3, #3
   1af82:	019b      	lsls	r3, r3, #6
   1af84:	f043 0301 	orr.w	r3, r3, #1
   1af88:	4622      	mov	r2, r4
   1af8a:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1af8c:	f003 fb1a 	bl	1e5c4 <log_2>
		return -EINVAL;
   1af90:	f06f 0415 	mvn.w	r4, #21
}
   1af94:	4620      	mov	r0, r4
   1af96:	b006      	add	sp, #24
   1af98:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1af9a:	ea45 0304 	orr.w	r3, r5, r4
   1af9e:	079b      	lsls	r3, r3, #30
   1afa0:	d00a      	beq.n	1afb8 <flash_nrf_write+0x54>
   1afa2:	4a19      	ldr	r2, [pc, #100]	; (1b008 <flash_nrf_write+0xa4>)
   1afa4:	4b19      	ldr	r3, [pc, #100]	; (1b00c <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1afa6:	481b      	ldr	r0, [pc, #108]	; (1b014 <flash_nrf_write+0xb0>)
   1afa8:	1a9b      	subs	r3, r3, r2
   1afaa:	08db      	lsrs	r3, r3, #3
   1afac:	019b      	lsls	r3, r3, #6
   1afae:	f043 0301 	orr.w	r3, r3, #1
   1afb2:	4622      	mov	r2, r4
   1afb4:	4629      	mov	r1, r5
   1afb6:	e7e9      	b.n	1af8c <flash_nrf_write+0x28>
	if (!len) {
   1afb8:	2c00      	cmp	r4, #0
   1afba:	d0eb      	beq.n	1af94 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1afbc:	f04f 33ff 	mov.w	r3, #4294967295
   1afc0:	f04f 32ff 	mov.w	r2, #4294967295
   1afc4:	4814      	ldr	r0, [pc, #80]	; (1b018 <flash_nrf_write+0xb4>)
   1afc6:	f001 fd7b 	bl	1cac0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1afca:	f007 fbb7 	bl	2273c <nrf_flash_sync_is_required>
   1afce:	4603      	mov	r3, r0
	struct flash_context context = {
   1afd0:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1afd4:	a802      	add	r0, sp, #8
   1afd6:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1afd8:	b18b      	cbz	r3, 1affe <flash_nrf_write+0x9a>
	struct flash_context context = {
   1afda:	2301      	movs	r3, #1
   1afdc:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1afe0:	4b0e      	ldr	r3, [pc, #56]	; (1b01c <flash_nrf_write+0xb8>)
   1afe2:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1afe6:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1afea:	f000 ffbb 	bl	1bf64 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1afee:	4668      	mov	r0, sp
   1aff0:	f000 ffbe 	bl	1bf70 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1aff4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1aff6:	4808      	ldr	r0, [pc, #32]	; (1b018 <flash_nrf_write+0xb4>)
   1aff8:	f001 fd3c 	bl	1ca74 <z_impl_k_sem_give>
}
   1affc:	e7ca      	b.n	1af94 <flash_nrf_write+0x30>
	struct flash_context context = {
   1affe:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1b002:	f7ff ff7d 	bl	1af00 <write_op>
   1b006:	e7f5      	b.n	1aff4 <flash_nrf_write+0x90>
   1b008:	0002353c 	.word	0x0002353c
   1b00c:	000235cc 	.word	0x000235cc
   1b010:	00025fe0 	.word	0x00025fe0
   1b014:	0002601c 	.word	0x0002601c
   1b018:	20002024 	.word	0x20002024
   1b01c:	0001af01 	.word	0x0001af01

0001b020 <random_byte_get>:
	__asm__ volatile(
   1b020:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b024:	f3ef 8211 	mrs	r2, BASEPRI
   1b028:	f383 8811 	msr	BASEPRI, r3
   1b02c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b030:	4b08      	ldr	r3, [pc, #32]	; (1b054 <random_byte_get+0x34>)
   1b032:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1b034:	b159      	cbz	r1, 1b04e <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1b036:	4908      	ldr	r1, [pc, #32]	; (1b058 <random_byte_get+0x38>)
   1b038:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b03c:	2100      	movs	r1, #0
   1b03e:	6019      	str	r1, [r3, #0]
   1b040:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1b042:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1b044:	f382 8811 	msr	BASEPRI, r2
   1b048:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1b04c:	4770      	bx	lr
	int retval = -EAGAIN;
   1b04e:	f06f 000a 	mvn.w	r0, #10
   1b052:	e7f7      	b.n	1b044 <random_byte_get+0x24>
   1b054:	4000d100 	.word	0x4000d100
   1b058:	4000d000 	.word	0x4000d000

0001b05c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b05e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1b060:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1b062:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1b064:	f04f 0540 	mov.w	r5, #64	; 0x40
   1b068:	f3ef 8011 	mrs	r0, BASEPRI
   1b06c:	f385 8811 	msr	BASEPRI, r5
   1b070:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1b074:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1b076:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1b07a:	1ba4      	subs	r4, r4, r6
   1b07c:	403c      	ands	r4, r7
	if (available < len) {
   1b07e:	42a2      	cmp	r2, r4
		len = available;
   1b080:	bf88      	it	hi
   1b082:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1b084:	eb06 0c02 	add.w	ip, r6, r2
   1b088:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1b08c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1b08e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1b092:	f380 8811 	msr	BASEPRI, r0
   1b096:	f3bf 8f6f 	isb	sy
   1b09a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1b09c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1b09e:	4282      	cmp	r2, r0
   1b0a0:	d119      	bne.n	1b0d6 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1b0a2:	4576      	cmp	r6, lr
   1b0a4:	d10d      	bne.n	1b0c2 <rng_pool_get+0x66>
	__asm__ volatile(
   1b0a6:	f04f 0540 	mov.w	r5, #64	; 0x40
   1b0aa:	f3ef 8211 	mrs	r2, BASEPRI
   1b0ae:	f385 8811 	msr	BASEPRI, r5
   1b0b2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1b0b6:	781d      	ldrb	r5, [r3, #0]
   1b0b8:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1b0ba:	f382 8811 	msr	BASEPRI, r2
   1b0be:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1b0c2:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1b0c4:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1b0c6:	b288      	uxth	r0, r1
	available = available - len;
   1b0c8:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1b0ca:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b0cc:	bf22      	ittt	cs
   1b0ce:	4b06      	ldrcs	r3, [pc, #24]	; (1b0e8 <rng_pool_get+0x8c>)
   1b0d0:	2201      	movcs	r2, #1
   1b0d2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1b0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1b0d6:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1b0da:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1b0dc:	f89c c005 	ldrb.w	ip, [ip, #5]
   1b0e0:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1b0e4:	403d      	ands	r5, r7
   1b0e6:	e7da      	b.n	1b09e <rng_pool_get+0x42>
   1b0e8:	4000d000 	.word	0x4000d000

0001b0ec <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b0ec:	43db      	mvns	r3, r3
{
   1b0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b0f2:	f013 0501 	ands.w	r5, r3, #1
{
   1b0f6:	460e      	mov	r6, r1
   1b0f8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b0fa:	d004      	beq.n	1b106 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1b0fc:	4821      	ldr	r0, [pc, #132]	; (1b184 <entropy_nrf5_get_entropy_isr+0x98>)
   1b0fe:	f7ff ffad 	bl	1b05c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1b102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1b106:	2a00      	cmp	r2, #0
   1b108:	d033      	beq.n	1b172 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1b10a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b10e:	f3ef 8811 	mrs	r8, BASEPRI
   1b112:	f383 8811 	msr	BASEPRI, r3
   1b116:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1b11a:	200d      	movs	r0, #13
   1b11c:	f7f7 fafa 	bl	12714 <arch_irq_is_enabled>
   1b120:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1b122:	200d      	movs	r0, #13
   1b124:	f7f7 fae2 	bl	126ec <arch_irq_disable>
	__asm__ volatile(
   1b128:	f388 8811 	msr	BASEPRI, r8
   1b12c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b130:	4a15      	ldr	r2, [pc, #84]	; (1b188 <entropy_nrf5_get_entropy_isr+0x9c>)
   1b132:	6015      	str	r5, [r2, #0]
   1b134:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b136:	4b15      	ldr	r3, [pc, #84]	; (1b18c <entropy_nrf5_get_entropy_isr+0xa0>)
   1b138:	2101      	movs	r1, #1
   1b13a:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b13c:	4914      	ldr	r1, [pc, #80]	; (1b190 <entropy_nrf5_get_entropy_isr+0xa4>)
   1b13e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1b142:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1b146:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b148:	4691      	mov	r9, r2
   1b14a:	468a      	mov	sl, r1
   1b14c:	4698      	mov	r8, r3
   1b14e:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1b152:	b183      	cbz	r3, 1b176 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1b154:	f7ff ff64 	bl	1b020 <random_byte_get>
			if (byte < 0) {
   1b158:	1e03      	subs	r3, r0, #0
   1b15a:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1b15e:	dbf6      	blt.n	1b14e <entropy_nrf5_get_entropy_isr+0x62>
   1b160:	3d01      	subs	r5, #1
   1b162:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1b164:	5573      	strb	r3, [r6, r5]
		} while (len);
   1b166:	2d00      	cmp	r5, #0
   1b168:	d1f1      	bne.n	1b14e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1b16a:	b117      	cbz	r7, 1b172 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1b16c:	200d      	movs	r0, #13
   1b16e:	f7f7 faad 	bl	126cc <arch_irq_enable>
	return cnt;
   1b172:	4620      	mov	r0, r4
   1b174:	e7c5      	b.n	1b102 <entropy_nrf5_get_entropy_isr+0x16>
   1b176:	f3bf 8f4f 	dsb	sy
				__WFE();
   1b17a:	bf20      	wfe
				__SEV();
   1b17c:	bf40      	sev
				__WFE();
   1b17e:	bf20      	wfe
   1b180:	e7e5      	b.n	1b14e <entropy_nrf5_get_entropy_isr+0x62>
   1b182:	bf00      	nop
   1b184:	20002070 	.word	0x20002070
   1b188:	4000d100 	.word	0x4000d100
   1b18c:	4000d000 	.word	0x4000d000
   1b190:	e000e100 	.word	0xe000e100

0001b194 <entropy_nrf5_get_entropy>:
{
   1b194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1b198:	4f13      	ldr	r7, [pc, #76]	; (1b1e8 <entropy_nrf5_get_entropy+0x54>)
   1b19a:	460d      	mov	r5, r1
   1b19c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b19e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1b1a2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1b1a6:	b914      	cbnz	r4, 1b1ae <entropy_nrf5_get_entropy+0x1a>
}
   1b1a8:	4620      	mov	r0, r4
   1b1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b1ae:	f04f 33ff 	mov.w	r3, #4294967295
   1b1b2:	f04f 32ff 	mov.w	r2, #4294967295
   1b1b6:	4638      	mov	r0, r7
   1b1b8:	f001 fc82 	bl	1cac0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b1bc:	4622      	mov	r2, r4
   1b1be:	4629      	mov	r1, r5
   1b1c0:	4640      	mov	r0, r8
   1b1c2:	f7ff ff4b 	bl	1b05c <rng_pool_get>
   1b1c6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1b1c8:	4638      	mov	r0, r7
   1b1ca:	f001 fc53 	bl	1ca74 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1b1ce:	b93e      	cbnz	r6, 1b1e0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1b1d0:	f04f 32ff 	mov.w	r2, #4294967295
   1b1d4:	f04f 33ff 	mov.w	r3, #4294967295
   1b1d8:	4648      	mov	r0, r9
   1b1da:	f001 fc71 	bl	1cac0 <z_impl_k_sem_take>
			continue;
   1b1de:	e7e2      	b.n	1b1a6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1b1e0:	1ba4      	subs	r4, r4, r6
   1b1e2:	b2a4      	uxth	r4, r4
		buf += bytes;
   1b1e4:	4435      	add	r5, r6
   1b1e6:	e7de      	b.n	1b1a6 <entropy_nrf5_get_entropy+0x12>
   1b1e8:	20002040 	.word	0x20002040

0001b1ec <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1b1ec:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b1ee:	4c19      	ldr	r4, [pc, #100]	; (1b254 <entropy_nrf5_init+0x68>)
   1b1f0:	2201      	movs	r2, #1
   1b1f2:	4611      	mov	r1, r2
   1b1f4:	4620      	mov	r0, r4
   1b1f6:	f007 fc55 	bl	22aa4 <z_impl_k_sem_init>
   1b1fa:	2201      	movs	r2, #1
   1b1fc:	2100      	movs	r1, #0
   1b1fe:	f104 0018 	add.w	r0, r4, #24
   1b202:	f007 fc4f 	bl	22aa4 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1b206:	f240 4307 	movw	r3, #1031	; 0x407
   1b20a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1b20e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b212:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1b214:	230c      	movs	r3, #12
   1b216:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1b21a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1b21c:	4b0e      	ldr	r3, [pc, #56]	; (1b258 <entropy_nrf5_init+0x6c>)
   1b21e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1b222:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1b226:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b22a:	f022 0201 	bic.w	r2, r2, #1
   1b22e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b232:	4a0a      	ldr	r2, [pc, #40]	; (1b25c <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1b234:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b236:	6015      	str	r5, [r2, #0]
   1b238:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1b23a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1b23e:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b240:	6019      	str	r1, [r3, #0]
   1b242:	200d      	movs	r0, #13
   1b244:	f7f7 fa74 	bl	12730 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1b248:	200d      	movs	r0, #13
   1b24a:	f7f7 fa3f 	bl	126cc <arch_irq_enable>

	return 0;
}
   1b24e:	4628      	mov	r0, r5
   1b250:	bd38      	pop	{r3, r4, r5, pc}
   1b252:	bf00      	nop
   1b254:	20002040 	.word	0x20002040
   1b258:	4000d000 	.word	0x4000d000
   1b25c:	4000d100 	.word	0x4000d100

0001b260 <isr>:
{
   1b260:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1b262:	f7ff fedd 	bl	1b020 <random_byte_get>
	if (byte < 0) {
   1b266:	2800      	cmp	r0, #0
   1b268:	db20      	blt.n	1b2ac <isr+0x4c>
	uint8_t last  = rngp->last;
   1b26a:	4b17      	ldr	r3, [pc, #92]	; (1b2c8 <isr+0x68>)
   1b26c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1b270:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1b274:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1b278:	1a51      	subs	r1, r2, r1
   1b27a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1b27e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1b280:	d10d      	bne.n	1b29e <isr+0x3e>
	uint8_t last  = rngp->last;
   1b282:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1b286:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1b28a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1b28e:	1a51      	subs	r1, r2, r1
   1b290:	ea34 0101 	bics.w	r1, r4, r1
   1b294:	d10b      	bne.n	1b2ae <isr+0x4e>
   1b296:	4b0d      	ldr	r3, [pc, #52]	; (1b2cc <isr+0x6c>)
   1b298:	2201      	movs	r2, #1
   1b29a:	601a      	str	r2, [r3, #0]
}
   1b29c:	e00e      	b.n	1b2bc <isr+0x5c>
	rngp->buffer[last] = byte;
   1b29e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1b2a0:	3201      	adds	r2, #1
   1b2a2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1b2a4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1b2a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1b2ac:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1b2ae:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1b2b0:	3201      	adds	r2, #1
   1b2b2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1b2b4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1b2b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1b2bc:	4804      	ldr	r0, [pc, #16]	; (1b2d0 <isr+0x70>)
}
   1b2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b2c2:	f001 bbd7 	b.w	1ca74 <z_impl_k_sem_give>
   1b2c6:	bf00      	nop
   1b2c8:	20002040 	.word	0x20002040
   1b2cc:	4000d004 	.word	0x4000d004
   1b2d0:	20002058 	.word	0x20002058

0001b2d4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1b2d4:	4602      	mov	r2, r0
   1b2d6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1b2d8:	4801      	ldr	r0, [pc, #4]	; (1b2e0 <multithreading_lock_acquire+0xc>)
   1b2da:	f001 bad9 	b.w	1c890 <z_impl_k_mutex_lock>
   1b2de:	bf00      	nop
   1b2e0:	20000734 	.word	0x20000734

0001b2e4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1b2e4:	4801      	ldr	r0, [pc, #4]	; (1b2ec <multithreading_lock_release+0x8>)
   1b2e6:	f001 bb4b 	b.w	1c980 <z_impl_k_mutex_unlock>
   1b2ea:	bf00      	nop
   1b2ec:	20000734 	.word	0x20000734

0001b2f0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1b2f0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1b2f2:	f7f5 fdd9 	bl	10ea8 <z_impl_log_panic>
   1b2f6:	4b06      	ldr	r3, [pc, #24]	; (1b310 <k_sys_fatal_error_handler+0x20>)
   1b2f8:	4906      	ldr	r1, [pc, #24]	; (1b314 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1b2fa:	4807      	ldr	r0, [pc, #28]	; (1b318 <k_sys_fatal_error_handler+0x28>)
   1b2fc:	1ac9      	subs	r1, r1, r3
   1b2fe:	08c9      	lsrs	r1, r1, #3
   1b300:	0189      	lsls	r1, r1, #6
   1b302:	f041 0101 	orr.w	r1, r1, #1
   1b306:	f003 f93c 	bl	1e582 <log_0>
		sys_arch_reboot(0);
   1b30a:	2000      	movs	r0, #0
   1b30c:	f7f7 feca 	bl	130a4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1b310:	0002353c 	.word	0x0002353c
   1b314:	000235c4 	.word	0x000235c4
   1b318:	00026048 	.word	0x00026048

0001b31c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1b31c:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1b31e:	4905      	ldr	r1, [pc, #20]	; (1b334 <rand_prio_low_vector_get_blocking+0x18>)
{
   1b320:	b410      	push	{r4}
   1b322:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1b324:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1b326:	6881      	ldr	r1, [r0, #8]
   1b328:	680c      	ldr	r4, [r1, #0]
   1b32a:	4619      	mov	r1, r3
   1b32c:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1b32e:	bc10      	pop	{r4}
   1b330:	4718      	bx	r3
   1b332:	bf00      	nop
   1b334:	20002094 	.word	0x20002094

0001b338 <sdc_assertion_handler>:
{
   1b338:	b538      	push	{r3, r4, r5, lr}
   1b33a:	4b0b      	ldr	r3, [pc, #44]	; (1b368 <sdc_assertion_handler+0x30>)
   1b33c:	4c0b      	ldr	r4, [pc, #44]	; (1b36c <sdc_assertion_handler+0x34>)
   1b33e:	1ae4      	subs	r4, r4, r3
   1b340:	460d      	mov	r5, r1
   1b342:	08e4      	lsrs	r4, r4, #3
   1b344:	f7f5 fc38 	bl	10bb8 <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1b348:	01a4      	lsls	r4, r4, #6
   1b34a:	f044 0401 	orr.w	r4, r4, #1
   1b34e:	4601      	mov	r1, r0
   1b350:	4623      	mov	r3, r4
   1b352:	4807      	ldr	r0, [pc, #28]	; (1b370 <sdc_assertion_handler+0x38>)
   1b354:	462a      	mov	r2, r5
   1b356:	f003 f935 	bl	1e5c4 <log_2>
	k_oops();
   1b35a:	4040      	eors	r0, r0
   1b35c:	f380 8811 	msr	BASEPRI, r0
   1b360:	f04f 0003 	mov.w	r0, #3
   1b364:	df02      	svc	2
}
   1b366:	bd38      	pop	{r3, r4, r5, pc}
   1b368:	0002353c 	.word	0x0002353c
   1b36c:	00023624 	.word	0x00023624
   1b370:	00026065 	.word	0x00026065

0001b374 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1b374:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1b376:	4804      	ldr	r0, [pc, #16]	; (1b388 <hci_driver_init+0x14>)
   1b378:	f7f9 fbf8 	bl	14b6c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1b37c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1b380:	4802      	ldr	r0, [pc, #8]	; (1b38c <hci_driver_init+0x18>)
   1b382:	f7e8 bca7 	b.w	3cd4 <sdc_init>
   1b386:	bf00      	nop
   1b388:	00023e88 	.word	0x00023e88
   1b38c:	0001b339 	.word	0x0001b339

0001b390 <rand_prio_low_vector_get>:
{
   1b390:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1b392:	4b08      	ldr	r3, [pc, #32]	; (1b3b4 <rand_prio_low_vector_get+0x24>)
{
   1b394:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1b396:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1b398:	6883      	ldr	r3, [r0, #8]
   1b39a:	685d      	ldr	r5, [r3, #4]
   1b39c:	460a      	mov	r2, r1
   1b39e:	b135      	cbz	r5, 1b3ae <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1b3a0:	2300      	movs	r3, #0
   1b3a2:	4621      	mov	r1, r4
   1b3a4:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1b3a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1b3aa:	b2c0      	uxtb	r0, r0
   1b3ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1b3ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b3b2:	e7f8      	b.n	1b3a6 <rand_prio_low_vector_get+0x16>
   1b3b4:	20002094 	.word	0x20002094

0001b3b8 <hci_driver_open>:
{
   1b3b8:	b570      	push	{r4, r5, r6, lr}
   1b3ba:	b092      	sub	sp, #72	; 0x48
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b3bc:	2200      	movs	r2, #0
   1b3be:	2300      	movs	r3, #0
   1b3c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b3c4:	2500      	movs	r5, #0
   1b3c6:	f06f 0309 	mvn.w	r3, #9
   1b3ca:	e9cd 3503 	strd	r3, r5, [sp, #12]
   1b3ce:	e9cd 5501 	strd	r5, r5, [sp, #4]
   1b3d2:	4b51      	ldr	r3, [pc, #324]	; (1b518 <hci_driver_open+0x160>)
   1b3d4:	4951      	ldr	r1, [pc, #324]	; (1b51c <hci_driver_open+0x164>)
   1b3d6:	9500      	str	r5, [sp, #0]
   1b3d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b3dc:	4850      	ldr	r0, [pc, #320]	; (1b520 <hci_driver_open+0x168>)
   1b3de:	f001 f9b7 	bl	1c750 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1b3e2:	4950      	ldr	r1, [pc, #320]	; (1b524 <hci_driver_open+0x16c>)
   1b3e4:	484e      	ldr	r0, [pc, #312]	; (1b520 <hci_driver_open+0x168>)
   1b3e6:	4c50      	ldr	r4, [pc, #320]	; (1b528 <hci_driver_open+0x170>)
   1b3e8:	f007 fa7a 	bl	228e0 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1b3ec:	a80d      	add	r0, sp, #52	; 0x34
   1b3ee:	f7e8 fc03 	bl	3bf8 <sdc_build_revision_get>
   1b3f2:	4b4e      	ldr	r3, [pc, #312]	; (1b52c <hci_driver_open+0x174>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1b3f4:	484e      	ldr	r0, [pc, #312]	; (1b530 <hci_driver_open+0x178>)
   1b3f6:	1ae4      	subs	r4, r4, r3
   1b3f8:	08e4      	lsrs	r4, r4, #3
   1b3fa:	01a4      	lsls	r4, r4, #6
   1b3fc:	f044 0303 	orr.w	r3, r4, #3
   1b400:	2214      	movs	r2, #20
   1b402:	a90d      	add	r1, sp, #52	; 0x34
   1b404:	f003 f91e 	bl	1e644 <log_hexdump>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b408:	aa09      	add	r2, sp, #36	; 0x24
   1b40a:	2101      	movs	r1, #1
   1b40c:	4628      	mov	r0, r5
	cfg.master_count.count = SDC_MASTER_COUNT;
   1b40e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b412:	f7e8 fbff 	bl	3c14 <sdc_cfg_set>
	if (required_memory < 0) {
   1b416:	2800      	cmp	r0, #0
   1b418:	db37      	blt.n	1b48a <hci_driver_open+0xd2>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1b41a:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b41c:	aa09      	add	r2, sp, #36	; 0x24
   1b41e:	2102      	movs	r1, #2
   1b420:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1b422:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b426:	f7e8 fbf5 	bl	3c14 <sdc_cfg_set>
	if (required_memory < 0) {
   1b42a:	2800      	cmp	r0, #0
   1b42c:	db2d      	blt.n	1b48a <hci_driver_open+0xd2>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1b42e:	4b41      	ldr	r3, [pc, #260]	; (1b534 <hci_driver_open+0x17c>)
   1b430:	9309      	str	r3, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b432:	aa09      	add	r2, sp, #36	; 0x24
   1b434:	2103      	movs	r1, #3
   1b436:	4628      	mov	r0, r5
   1b438:	f7e8 fbec 	bl	3c14 <sdc_cfg_set>
	if (required_memory < 0) {
   1b43c:	2800      	cmp	r0, #0
   1b43e:	db24      	blt.n	1b48a <hci_driver_open+0xd2>
	cfg.event_length.event_length_us =
   1b440:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b444:	aa09      	add	r2, sp, #36	; 0x24
   1b446:	2104      	movs	r1, #4
   1b448:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1b44a:	9309      	str	r3, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b44c:	f7e8 fbe2 	bl	3c14 <sdc_cfg_set>
	if (required_memory < 0) {
   1b450:	2800      	cmp	r0, #0
   1b452:	db1a      	blt.n	1b48a <hci_driver_open+0xd2>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b454:	aa09      	add	r2, sp, #36	; 0x24
   1b456:	2105      	movs	r1, #5
   1b458:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1b45a:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b45e:	f7e8 fbd9 	bl	3c14 <sdc_cfg_set>
	if (required_memory < 0) {
   1b462:	2800      	cmp	r0, #0
   1b464:	db11      	blt.n	1b48a <hci_driver_open+0xd2>
	if (required_memory > sizeof(sdc_mempool)) {
   1b466:	f240 61de 	movw	r1, #1758	; 0x6de
   1b46a:	4288      	cmp	r0, r1
   1b46c:	dd0f      	ble.n	1b48e <hci_driver_open+0xd6>
		BT_ERR("Allocated memory too low: %u < %u",
   1b46e:	4602      	mov	r2, r0
   1b470:	ea44 0306 	orr.w	r3, r4, r6
   1b474:	4830      	ldr	r0, [pc, #192]	; (1b538 <hci_driver_open+0x180>)
   1b476:	f003 f8a5 	bl	1e5c4 <log_2>
		k_panic();
   1b47a:	4040      	eors	r0, r0
   1b47c:	f380 8811 	msr	BASEPRI, r0
   1b480:	f04f 0004 	mov.w	r0, #4
   1b484:	df02      	svc	2
		return -ENOMEM;
   1b486:	f06f 000b 	mvn.w	r0, #11
}
   1b48a:	b012      	add	sp, #72	; 0x48
   1b48c:	bd70      	pop	{r4, r5, r6, pc}
   1b48e:	482b      	ldr	r0, [pc, #172]	; (1b53c <hci_driver_open+0x184>)
   1b490:	f000 ff8a 	bl	1c3a8 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b494:	4b2a      	ldr	r3, [pc, #168]	; (1b540 <hci_driver_open+0x188>)
   1b496:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1b498:	b938      	cbnz	r0, 1b4aa <hci_driver_open+0xf2>
		BT_ERR("An entropy source is required");
   1b49a:	482a      	ldr	r0, [pc, #168]	; (1b544 <hci_driver_open+0x18c>)
   1b49c:	f044 0101 	orr.w	r1, r4, #1
   1b4a0:	f003 f86f 	bl	1e582 <log_0>
		return -ENODEV;
   1b4a4:	f06f 0012 	mvn.w	r0, #18
   1b4a8:	e7ef      	b.n	1b48a <hci_driver_open+0xd2>
	sdc_rand_source_t rand_functions = {
   1b4aa:	4a27      	ldr	r2, [pc, #156]	; (1b548 <hci_driver_open+0x190>)
   1b4ac:	ca07      	ldmia	r2, {r0, r1, r2}
   1b4ae:	ab0a      	add	r3, sp, #40	; 0x28
   1b4b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1b4b4:	4618      	mov	r0, r3
   1b4b6:	f7e8 fd1b 	bl	3ef0 <sdc_rand_source_register>
	if (err) {
   1b4ba:	4601      	mov	r1, r0
   1b4bc:	b138      	cbz	r0, 1b4ce <hci_driver_open+0x116>
		BT_ERR("Failed to register rand source (%d)", err);
   1b4be:	4823      	ldr	r0, [pc, #140]	; (1b54c <hci_driver_open+0x194>)
   1b4c0:	f044 0201 	orr.w	r2, r4, #1
   1b4c4:	f003 f86a 	bl	1e59c <log_1>
		return -EINVAL;
   1b4c8:	f06f 0015 	mvn.w	r0, #21
   1b4cc:	e7dd      	b.n	1b48a <hci_driver_open+0xd2>
			err = sdc_support_adv();
   1b4ce:	f7e8 fc7b 	bl	3dc8 <sdc_support_adv>
			if (err) {
   1b4d2:	b110      	cbz	r0, 1b4da <hci_driver_open+0x122>
				return -ENOTSUP;
   1b4d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b4d8:	e7d7      	b.n	1b48a <hci_driver_open+0xd2>
		err = sdc_support_slave();
   1b4da:	f7e8 fc9f 	bl	3e1c <sdc_support_slave>
		if (err) {
   1b4de:	2800      	cmp	r0, #0
   1b4e0:	d1f8      	bne.n	1b4d4 <hci_driver_open+0x11c>
		err = sdc_support_dle();
   1b4e2:	f7e8 fc7f 	bl	3de4 <sdc_support_dle>
		if (err) {
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	d1f4      	bne.n	1b4d4 <hci_driver_open+0x11c>
		err = sdc_support_le_2m_phy();
   1b4ea:	f7e8 fc89 	bl	3e00 <sdc_support_le_2m_phy>
		if (err) {
   1b4ee:	2800      	cmp	r0, #0
   1b4f0:	d1f0      	bne.n	1b4d4 <hci_driver_open+0x11c>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1b4f2:	f04f 30ff 	mov.w	r0, #4294967295
   1b4f6:	f04f 31ff 	mov.w	r1, #4294967295
   1b4fa:	f7ff feeb 	bl	1b2d4 <multithreading_lock_acquire>
	if (!err) {
   1b4fe:	4604      	mov	r4, r0
   1b500:	b930      	cbnz	r0, 1b510 <hci_driver_open+0x158>
		err = sdc_enable(host_signal, sdc_mempool);
   1b502:	4913      	ldr	r1, [pc, #76]	; (1b550 <hci_driver_open+0x198>)
   1b504:	4813      	ldr	r0, [pc, #76]	; (1b554 <hci_driver_open+0x19c>)
   1b506:	f7e8 fbb7 	bl	3c78 <sdc_enable>
   1b50a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b50c:	f7ff feea 	bl	1b2e4 <multithreading_lock_release>
	if (err < 0) {
   1b510:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1b514:	e7b9      	b.n	1b48a <hci_driver_open+0xd2>
   1b516:	bf00      	nop
   1b518:	0001b559 	.word	0x0001b559
   1b51c:	200040e0 	.word	0x200040e0
   1b520:	20001ac8 	.word	0x20001ac8
   1b524:	0002608a 	.word	0x0002608a
   1b528:	00023624 	.word	0x00023624
   1b52c:	0002353c 	.word	0x0002353c
   1b530:	00026091 	.word	0x00026091
   1b534:	02031b1b 	.word	0x02031b1b
   1b538:	000260b8 	.word	0x000260b8
   1b53c:	00026044 	.word	0x00026044
   1b540:	20002094 	.word	0x20002094
   1b544:	000260da 	.word	0x000260da
   1b548:	000236f8 	.word	0x000236f8
   1b54c:	000260f8 	.word	0x000260f8
   1b550:	20002301 	.word	0x20002301
   1b554:	0001b675 	.word	0x0001b675

0001b558 <recv_thread>:
{
   1b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b55c:	4b3f      	ldr	r3, [pc, #252]	; (1b65c <recv_thread+0x104>)
   1b55e:	4e40      	ldr	r6, [pc, #256]	; (1b660 <recv_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   1b560:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1b670 <recv_thread+0x118>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1b564:	4d3f      	ldr	r5, [pc, #252]	; (1b664 <recv_thread+0x10c>)
   1b566:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1b568:	2700      	movs	r7, #0
   1b56a:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1b56c:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1b56e:	b93c      	cbnz	r4, 1b580 <recv_thread+0x28>
   1b570:	b937      	cbnz	r7, 1b580 <recv_thread+0x28>
   1b572:	f04f 32ff 	mov.w	r2, #4294967295
   1b576:	f04f 33ff 	mov.w	r3, #4294967295
   1b57a:	4640      	mov	r0, r8
   1b57c:	f001 faa0 	bl	1cac0 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b580:	f04f 30ff 	mov.w	r0, #4294967295
   1b584:	f04f 31ff 	mov.w	r1, #4294967295
   1b588:	f7ff fea4 	bl	1b2d4 <multithreading_lock_acquire>
	if (!errcode) {
   1b58c:	b160      	cbz	r0, 1b5a8 <recv_thread+0x50>
		return false;
   1b58e:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b590:	f04f 30ff 	mov.w	r0, #4294967295
   1b594:	f04f 31ff 	mov.w	r1, #4294967295
   1b598:	f7ff fe9c 	bl	1b2d4 <multithreading_lock_acquire>
	if (!errcode) {
   1b59c:	2800      	cmp	r0, #0
   1b59e:	d03a      	beq.n	1b616 <recv_thread+0xbe>
		return false;
   1b5a0:	2700      	movs	r7, #0
	z_impl_k_yield();
   1b5a2:	f001 ff39 	bl	1d418 <z_impl_k_yield>
}
   1b5a6:	e7e2      	b.n	1b56e <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1b5a8:	482e      	ldr	r0, [pc, #184]	; (1b664 <recv_thread+0x10c>)
   1b5aa:	f000 fbb5 	bl	1bd18 <hci_internal_evt_get>
   1b5ae:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b5b0:	f7ff fe98 	bl	1b2e4 <multithreading_lock_release>
	if (errcode) {
   1b5b4:	2c00      	cmp	r4, #0
   1b5b6:	d1ea      	bne.n	1b58e <recv_thread+0x36>
	switch (hdr->evt) {
   1b5b8:	7828      	ldrb	r0, [r5, #0]
   1b5ba:	283e      	cmp	r0, #62	; 0x3e
   1b5bc:	d007      	beq.n	1b5ce <recv_thread+0x76>
   1b5be:	28ff      	cmp	r0, #255	; 0xff
   1b5c0:	d01c      	beq.n	1b5fc <recv_thread+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1b5c2:	f04f 32ff 	mov.w	r2, #4294967295
   1b5c6:	f04f 33ff 	mov.w	r3, #4294967295
   1b5ca:	2400      	movs	r4, #0
   1b5cc:	e007      	b.n	1b5de <recv_thread+0x86>
		switch (me->subevent) {
   1b5ce:	78ab      	ldrb	r3, [r5, #2]
   1b5d0:	2b02      	cmp	r3, #2
   1b5d2:	d001      	beq.n	1b5d8 <recv_thread+0x80>
   1b5d4:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1b5d6:	d1f4      	bne.n	1b5c2 <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1b5d8:	2200      	movs	r2, #0
   1b5da:	2300      	movs	r3, #0
   1b5dc:	2401      	movs	r4, #1
   1b5de:	4621      	mov	r1, r4
   1b5e0:	f7f8 f934 	bl	1384c <bt_buf_get_evt>
	if (!evt_buf) {
   1b5e4:	4607      	mov	r7, r0
   1b5e6:	b960      	cbnz	r0, 1b602 <recv_thread+0xaa>
		if (discardable) {
   1b5e8:	2c00      	cmp	r4, #0
   1b5ea:	d1d1      	bne.n	1b590 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1b5ec:	01b1      	lsls	r1, r6, #6
   1b5ee:	481e      	ldr	r0, [pc, #120]	; (1b668 <recv_thread+0x110>)
   1b5f0:	f041 0101 	orr.w	r1, r1, #1
   1b5f4:	f002 ffc5 	bl	1e582 <log_0>
	return true;
   1b5f8:	2401      	movs	r4, #1
   1b5fa:	e7c9      	b.n	1b590 <recv_thread+0x38>
		switch (subevent) {
   1b5fc:	78ab      	ldrb	r3, [r5, #2]
   1b5fe:	2b80      	cmp	r3, #128	; 0x80
   1b600:	e7e9      	b.n	1b5d6 <recv_thread+0x7e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1b602:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b604:	4629      	mov	r1, r5
   1b606:	3202      	adds	r2, #2
   1b608:	3008      	adds	r0, #8
   1b60a:	f006 ff47 	bl	2249c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1b60e:	4638      	mov	r0, r7
   1b610:	f7f9 fa78 	bl	14b04 <bt_recv>
   1b614:	e7f0      	b.n	1b5f8 <recv_thread+0xa0>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1b616:	4813      	ldr	r0, [pc, #76]	; (1b664 <recv_thread+0x10c>)
   1b618:	f7f1 f96b 	bl	c8f2 <sdc_hci_data_get>
   1b61c:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1b61e:	f7ff fe61 	bl	1b2e4 <multithreading_lock_release>
	if (errcode) {
   1b622:	2f00      	cmp	r7, #0
   1b624:	d1bc      	bne.n	1b5a0 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1b626:	f04f 32ff 	mov.w	r2, #4294967295
   1b62a:	f04f 33ff 	mov.w	r3, #4294967295
   1b62e:	2003      	movs	r0, #3
   1b630:	f7f8 f8d6 	bl	137e0 <bt_buf_get_rx>
	if (!data_buf) {
   1b634:	4607      	mov	r7, r0
   1b636:	b938      	cbnz	r0, 1b648 <recv_thread+0xf0>
		BT_ERR("No data buffer available");
   1b638:	01b1      	lsls	r1, r6, #6
   1b63a:	480c      	ldr	r0, [pc, #48]	; (1b66c <recv_thread+0x114>)
   1b63c:	f041 0101 	orr.w	r1, r1, #1
   1b640:	f002 ff9f 	bl	1e582 <log_0>
	return true;
   1b644:	2701      	movs	r7, #1
   1b646:	e7ac      	b.n	1b5a2 <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1b648:	886a      	ldrh	r2, [r5, #2]
   1b64a:	4629      	mov	r1, r5
   1b64c:	3204      	adds	r2, #4
   1b64e:	3008      	adds	r0, #8
   1b650:	f006 ff24 	bl	2249c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1b654:	4638      	mov	r0, r7
   1b656:	f7f9 fa55 	bl	14b04 <bt_recv>
   1b65a:	e7f3      	b.n	1b644 <recv_thread+0xec>
   1b65c:	0002353c 	.word	0x0002353c
   1b660:	00023624 	.word	0x00023624
   1b664:	200022b8 	.word	0x200022b8
   1b668:	0002611c 	.word	0x0002611c
   1b66c:	00026136 	.word	0x00026136
   1b670:	200007a4 	.word	0x200007a4

0001b674 <host_signal>:
	z_impl_k_sem_give(sem);
   1b674:	4801      	ldr	r0, [pc, #4]	; (1b67c <host_signal+0x8>)
   1b676:	f001 b9fd 	b.w	1ca74 <z_impl_k_sem_give>
   1b67a:	bf00      	nop
   1b67c:	200007a4 	.word	0x200007a4

0001b680 <hci_driver_send>:
{
   1b680:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1b682:	8983      	ldrh	r3, [r0, #12]
{
   1b684:	4605      	mov	r5, r0
	if (!buf->len) {
   1b686:	b383      	cbz	r3, 1b6ea <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1b688:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1b68a:	b1ab      	cbz	r3, 1b6b8 <hci_driver_send+0x38>
   1b68c:	2b02      	cmp	r3, #2
   1b68e:	d12c      	bne.n	1b6ea <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b690:	f04f 30ff 	mov.w	r0, #4294967295
   1b694:	f04f 31ff 	mov.w	r1, #4294967295
   1b698:	f7ff fe1c 	bl	1b2d4 <multithreading_lock_acquire>
	if (!errcode) {
   1b69c:	4604      	mov	r4, r0
   1b69e:	b948      	cbnz	r0, 1b6b4 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1b6a0:	68a8      	ldr	r0, [r5, #8]
   1b6a2:	f7f1 f933 	bl	c90c <sdc_hci_data_put>
   1b6a6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b6a8:	f7ff fe1c 	bl	1b2e4 <multithreading_lock_release>
		if (errcode) {
   1b6ac:	b1c4      	cbz	r4, 1b6e0 <hci_driver_send+0x60>
   1b6ae:	4810      	ldr	r0, [pc, #64]	; (1b6f0 <hci_driver_send+0x70>)
   1b6b0:	f001 f9e0 	bl	1ca74 <z_impl_k_sem_give>
}
   1b6b4:	4620      	mov	r0, r4
   1b6b6:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b6b8:	f04f 30ff 	mov.w	r0, #4294967295
   1b6bc:	f04f 31ff 	mov.w	r1, #4294967295
   1b6c0:	f7ff fe08 	bl	1b2d4 <multithreading_lock_acquire>
	if (!errcode) {
   1b6c4:	4604      	mov	r4, r0
   1b6c6:	2800      	cmp	r0, #0
   1b6c8:	d1f4      	bne.n	1b6b4 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1b6ca:	68a8      	ldr	r0, [r5, #8]
   1b6cc:	f000 f812 	bl	1b6f4 <hci_internal_cmd_put>
   1b6d0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b6d2:	f7ff fe07 	bl	1b2e4 <multithreading_lock_release>
	if (errcode) {
   1b6d6:	2c00      	cmp	r4, #0
   1b6d8:	d1ec      	bne.n	1b6b4 <hci_driver_send+0x34>
   1b6da:	4805      	ldr	r0, [pc, #20]	; (1b6f0 <hci_driver_send+0x70>)
   1b6dc:	f001 f9ca 	bl	1ca74 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1b6e0:	4628      	mov	r0, r5
   1b6e2:	f7ff fa9b 	bl	1ac1c <net_buf_unref>
   1b6e6:	2400      	movs	r4, #0
   1b6e8:	e7e4      	b.n	1b6b4 <hci_driver_send+0x34>
	switch (type) {
   1b6ea:	f06f 0415 	mvn.w	r4, #21
   1b6ee:	e7e1      	b.n	1b6b4 <hci_driver_send+0x34>
   1b6f0:	200007a4 	.word	0x200007a4

0001b6f4 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1b6f4:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1b6f6:	4c8e      	ldr	r4, [pc, #568]	; (1b930 <hci_internal_cmd_put+0x23c>)
   1b6f8:	7823      	ldrb	r3, [r4, #0]
   1b6fa:	2b00      	cmp	r3, #0
   1b6fc:	f040 82f7 	bne.w	1bcee <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   1b700:	7843      	ldrb	r3, [r0, #1]
   1b702:	7805      	ldrb	r5, [r0, #0]
   1b704:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1b708:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1b70c:	b22e      	sxth	r6, r5
   1b70e:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1b712:	d20d      	bcs.n	1b730 <hci_internal_cmd_put+0x3c>
   1b714:	b17b      	cbz	r3, 1b736 <hci_internal_cmd_put+0x42>
   1b716:	3b01      	subs	r3, #1
   1b718:	2b07      	cmp	r3, #7
   1b71a:	d80c      	bhi.n	1b736 <hci_internal_cmd_put+0x42>
   1b71c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b720:	000b000e 	.word	0x000b000e
   1b724:	0060002c 	.word	0x0060002c
   1b728:	000b000b 	.word	0x000b000b
   1b72c:	010c000b 	.word	0x010c000b
   1b730:	2b3f      	cmp	r3, #63	; 0x3f
   1b732:	f000 8233 	beq.w	1bb9c <hci_internal_cmd_put+0x4a8>
   1b736:	2304      	movs	r3, #4
   1b738:	2001      	movs	r0, #1
   1b73a:	e26b      	b.n	1bc14 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   1b73c:	f240 4306 	movw	r3, #1030	; 0x406
   1b740:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b742:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1b746:	d005      	beq.n	1b754 <hci_internal_cmd_put+0x60>
   1b748:	f240 431d 	movw	r3, #1053	; 0x41d
   1b74c:	429e      	cmp	r6, r3
   1b74e:	d010      	beq.n	1b772 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1b750:	2001      	movs	r0, #1
   1b752:	e001      	b.n	1b758 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1b754:	f7f1 f9fc 	bl	cb50 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1b758:	230f      	movs	r3, #15
   1b75a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1b75c:	2304      	movs	r3, #4
   1b75e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1b760:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1b762:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1b764:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1b766:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1b76a:	2301      	movs	r3, #1
   1b76c:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1b76e:	2000      	movs	r0, #0
}
   1b770:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1b772:	f7f1 f9ef 	bl	cb54 <sdc_hci_cmd_lc_read_remote_version_information>
   1b776:	e7ef      	b.n	1b758 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1b778:	f640 4363 	movw	r3, #3171	; 0xc63
   1b77c:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b77e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1b782:	d025      	beq.n	1b7d0 <hci_internal_cmd_put+0xdc>
   1b784:	dc0f      	bgt.n	1b7a6 <hci_internal_cmd_put+0xb2>
   1b786:	f640 4303 	movw	r3, #3075	; 0xc03
   1b78a:	429e      	cmp	r6, r3
   1b78c:	d018      	beq.n	1b7c0 <hci_internal_cmd_put+0xcc>
   1b78e:	f640 432d 	movw	r3, #3117	; 0xc2d
   1b792:	429e      	cmp	r6, r3
   1b794:	d017      	beq.n	1b7c6 <hci_internal_cmd_put+0xd2>
   1b796:	f640 4301 	movw	r3, #3073	; 0xc01
   1b79a:	429e      	cmp	r6, r3
   1b79c:	d1d8      	bne.n	1b750 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1b79e:	f7f1 f8d1 	bl	c944 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1b7a2:	2304      	movs	r3, #4
   1b7a4:	e0b8      	b.n	1b918 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1b7a6:	f640 437b 	movw	r3, #3195	; 0xc7b
   1b7aa:	429e      	cmp	r6, r3
   1b7ac:	d013      	beq.n	1b7d6 <hci_internal_cmd_put+0xe2>
   1b7ae:	f640 437c 	movw	r3, #3196	; 0xc7c
   1b7b2:	429e      	cmp	r6, r3
   1b7b4:	d1cc      	bne.n	1b750 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1b7b6:	495f      	ldr	r1, [pc, #380]	; (1b934 <hci_internal_cmd_put+0x240>)
   1b7b8:	f7f1 f8ce 	bl	c958 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1b7bc:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1b7be:	e0ab      	b.n	1b918 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1b7c0:	f7e8 fc8c 	bl	40dc <sdc_hci_cmd_cb_reset>
   1b7c4:	e7ed      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1b7c6:	495b      	ldr	r1, [pc, #364]	; (1b934 <hci_internal_cmd_put+0x240>)
   1b7c8:	f7f1 f8ba 	bl	c940 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1b7cc:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1b7ce:	e0a3      	b.n	1b918 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1b7d0:	f7f1 f8bd 	bl	c94e <sdc_hci_cmd_cb_set_event_mask_page_2>
   1b7d4:	e7e5      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1b7d6:	4957      	ldr	r1, [pc, #348]	; (1b934 <hci_internal_cmd_put+0x240>)
   1b7d8:	f7f1 f8b0 	bl	c93c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1b7dc:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1b7de:	e09b      	b.n	1b918 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1b7e0:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1b7e4:	3e01      	subs	r6, #1
   1b7e6:	2e08      	cmp	r6, #8
   1b7e8:	d8b2      	bhi.n	1b750 <hci_internal_cmd_put+0x5c>
   1b7ea:	a301      	add	r3, pc, #4	; (adr r3, 1b7f0 <hci_internal_cmd_put+0xfc>)
   1b7ec:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b7f0:	0001b815 	.word	0x0001b815
   1b7f4:	0001b81f 	.word	0x0001b81f
   1b7f8:	0001b8f9 	.word	0x0001b8f9
   1b7fc:	0001b751 	.word	0x0001b751
   1b800:	0001b751 	.word	0x0001b751
   1b804:	0001b751 	.word	0x0001b751
   1b808:	0001b751 	.word	0x0001b751
   1b80c:	0001b751 	.word	0x0001b751
   1b810:	0001b911 	.word	0x0001b911
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1b814:	4847      	ldr	r0, [pc, #284]	; (1b934 <hci_internal_cmd_put+0x240>)
   1b816:	f7f1 f950 	bl	caba <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1b81a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1b81c:	e07c      	b.n	1b918 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1b81e:	4845      	ldr	r0, [pc, #276]	; (1b934 <hci_internal_cmd_put+0x240>)
   1b820:	222e      	movs	r2, #46	; 0x2e
   1b822:	2100      	movs	r1, #0
   1b824:	f004 fd32 	bl	2028c <memset>
	cmds->hci_disconnect = 1;
   1b828:	79e3      	ldrb	r3, [r4, #7]
   1b82a:	f043 0320 	orr.w	r3, r3, #32
   1b82e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1b830:	7a63      	ldrb	r3, [r4, #9]
   1b832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b836:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1b838:	7b23      	ldrb	r3, [r4, #12]
   1b83a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b83e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1b840:	7c63      	ldrb	r3, [r4, #17]
   1b842:	f043 0304 	orr.w	r3, r3, #4
   1b846:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1b848:	7d63      	ldrb	r3, [r4, #21]
   1b84a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1b84e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1b852:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1b854:	7da3      	ldrb	r3, [r4, #22]
   1b856:	f043 0302 	orr.w	r3, r3, #2
   1b85a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1b85c:	7f63      	ldrb	r3, [r4, #29]
   1b85e:	f043 0304 	orr.w	r3, r3, #4
   1b862:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1b864:	f894 3020 	ldrb.w	r3, [r4, #32]
   1b868:	f063 0308 	orn	r3, r3, #8
   1b86c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1b870:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1b874:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1b878:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1b87c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1b880:	f063 030c 	orn	r3, r3, #12
   1b884:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1b888:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1b88c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1b890:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1b894:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1b898:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1b89c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1b8a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1b8a4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1b8a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1b8ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b8b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1b8b4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1b8b8:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1b8bc:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1b8c0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1b8c4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1b8c8:	f063 0301 	orn	r3, r3, #1
   1b8cc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1b8d0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1b8d4:	f043 0301 	orr.w	r3, r3, #1
   1b8d8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1b8dc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1b8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b8e4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1b8e8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1b8ec:	f043 0304 	orr.w	r3, r3, #4
   1b8f0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1b8f4:	2344      	movs	r3, #68	; 0x44
   1b8f6:	e0de      	b.n	1bab6 <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   1b8f8:	480e      	ldr	r0, [pc, #56]	; (1b934 <hci_internal_cmd_put+0x240>)
   1b8fa:	2208      	movs	r2, #8
   1b8fc:	2100      	movs	r1, #0
   1b8fe:	f004 fcc5 	bl	2028c <memset>
	features->bdedr_not_supported = 1;
   1b902:	7ae3      	ldrb	r3, [r4, #11]
   1b904:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1b908:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1b90c:	72e3      	strb	r3, [r4, #11]
   1b90e:	e0d1      	b.n	1bab4 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1b910:	4808      	ldr	r0, [pc, #32]	; (1b934 <hci_internal_cmd_put+0x240>)
   1b912:	f7f1 f8d0 	bl	cab6 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1b916:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1b918:	2801      	cmp	r0, #1
   1b91a:	f43f af1d 	beq.w	1b758 <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1b91e:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1b920:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1b922:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1b924:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1b926:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1b928:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1b92a:	71a0      	strb	r0, [r4, #6]
}
   1b92c:	e71d      	b.n	1b76a <hci_internal_cmd_put+0x76>
   1b92e:	bf00      	nop
   1b930:	200029df 	.word	0x200029df
   1b934:	200029e6 	.word	0x200029e6
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b938:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1b93c:	3e01      	subs	r6, #1
   1b93e:	3003      	adds	r0, #3
	switch (opcode)	{
   1b940:	2e4d      	cmp	r6, #77	; 0x4d
   1b942:	f63f af05 	bhi.w	1b750 <hci_internal_cmd_put+0x5c>
   1b946:	a301      	add	r3, pc, #4	; (adr r3, 1b94c <hci_internal_cmd_put+0x258>)
   1b948:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b94c:	0001ba85 	.word	0x0001ba85
   1b950:	0001ba8b 	.word	0x0001ba8b
   1b954:	0001ba93 	.word	0x0001ba93
   1b958:	0001b751 	.word	0x0001b751
   1b95c:	0001babb 	.word	0x0001babb
   1b960:	0001bac1 	.word	0x0001bac1
   1b964:	0001bac7 	.word	0x0001bac7
   1b968:	0001bad1 	.word	0x0001bad1
   1b96c:	0001bad7 	.word	0x0001bad7
   1b970:	0001badd 	.word	0x0001badd
   1b974:	0001b751 	.word	0x0001b751
   1b978:	0001b751 	.word	0x0001b751
   1b97c:	0001b751 	.word	0x0001b751
   1b980:	0001b751 	.word	0x0001b751
   1b984:	0001bae3 	.word	0x0001bae3
   1b988:	0001baeb 	.word	0x0001baeb
   1b98c:	0001baf1 	.word	0x0001baf1
   1b990:	0001baf7 	.word	0x0001baf7
   1b994:	0001b751 	.word	0x0001b751
   1b998:	0001b751 	.word	0x0001b751
   1b99c:	0001bafd 	.word	0x0001bafd
   1b9a0:	0001bb07 	.word	0x0001bb07
   1b9a4:	0001bb0d 	.word	0x0001bb0d
   1b9a8:	0001bb17 	.word	0x0001bb17
   1b9ac:	0001b751 	.word	0x0001b751
   1b9b0:	0001bb1f 	.word	0x0001bb1f
   1b9b4:	0001bb27 	.word	0x0001bb27
   1b9b8:	0001bb2f 	.word	0x0001bb2f
   1b9bc:	0001b751 	.word	0x0001b751
   1b9c0:	0001b751 	.word	0x0001b751
   1b9c4:	0001b751 	.word	0x0001b751
   1b9c8:	0001b751 	.word	0x0001b751
   1b9cc:	0001b751 	.word	0x0001b751
   1b9d0:	0001bb37 	.word	0x0001bb37
   1b9d4:	0001bb3f 	.word	0x0001bb3f
   1b9d8:	0001bb47 	.word	0x0001bb47
   1b9dc:	0001b751 	.word	0x0001b751
   1b9e0:	0001b751 	.word	0x0001b751
   1b9e4:	0001bb4d 	.word	0x0001bb4d
   1b9e8:	0001bb53 	.word	0x0001bb53
   1b9ec:	0001bb59 	.word	0x0001bb59
   1b9f0:	0001bb5f 	.word	0x0001bb5f
   1b9f4:	0001b751 	.word	0x0001b751
   1b9f8:	0001b751 	.word	0x0001b751
   1b9fc:	0001bb67 	.word	0x0001bb67
   1ba00:	0001bb6d 	.word	0x0001bb6d
   1ba04:	0001bb73 	.word	0x0001bb73
   1ba08:	0001bb7b 	.word	0x0001bb7b
   1ba0c:	0001bb83 	.word	0x0001bb83
   1ba10:	0001bb89 	.word	0x0001bb89
   1ba14:	0001b751 	.word	0x0001b751
   1ba18:	0001b751 	.word	0x0001b751
   1ba1c:	0001b751 	.word	0x0001b751
   1ba20:	0001b751 	.word	0x0001b751
   1ba24:	0001b751 	.word	0x0001b751
   1ba28:	0001b751 	.word	0x0001b751
   1ba2c:	0001b751 	.word	0x0001b751
   1ba30:	0001b751 	.word	0x0001b751
   1ba34:	0001b751 	.word	0x0001b751
   1ba38:	0001b751 	.word	0x0001b751
   1ba3c:	0001b751 	.word	0x0001b751
   1ba40:	0001b751 	.word	0x0001b751
   1ba44:	0001b751 	.word	0x0001b751
   1ba48:	0001b751 	.word	0x0001b751
   1ba4c:	0001b751 	.word	0x0001b751
   1ba50:	0001b751 	.word	0x0001b751
   1ba54:	0001b751 	.word	0x0001b751
   1ba58:	0001b751 	.word	0x0001b751
   1ba5c:	0001b751 	.word	0x0001b751
   1ba60:	0001b751 	.word	0x0001b751
   1ba64:	0001b751 	.word	0x0001b751
   1ba68:	0001b751 	.word	0x0001b751
   1ba6c:	0001b751 	.word	0x0001b751
   1ba70:	0001b751 	.word	0x0001b751
   1ba74:	0001bb8f 	.word	0x0001bb8f
   1ba78:	0001b751 	.word	0x0001b751
   1ba7c:	0001b751 	.word	0x0001b751
   1ba80:	0001bb97 	.word	0x0001bb97
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1ba84:	f7f1 f853 	bl	cb2e <sdc_hci_cmd_le_set_event_mask>
   1ba88:	e68b      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1ba8a:	48a2      	ldr	r0, [pc, #648]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1ba8c:	f7f1 f82d 	bl	caea <sdc_hci_cmd_le_read_buffer_size>
   1ba90:	e69c      	b.n	1b7cc <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1ba92:	48a0      	ldr	r0, [pc, #640]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1ba94:	2205      	movs	r2, #5
   1ba96:	2100      	movs	r1, #0
   1ba98:	f004 fbf8 	bl	2028c <memset>
	features->le_encryption = 1;
   1ba9c:	79e3      	ldrb	r3, [r4, #7]
   1ba9e:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   1baa2:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   1baa6:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1baa8:	7a23      	ldrb	r3, [r4, #8]
   1baaa:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1baae:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1bab2:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1bab4:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1bab6:	2000      	movs	r0, #0
   1bab8:	e731      	b.n	1b91e <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1baba:	f7f1 f841 	bl	cb40 <sdc_hci_cmd_le_set_random_address>
   1babe:	e670      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1bac0:	f7f1 f82f 	bl	cb22 <sdc_hci_cmd_le_set_adv_params>
   1bac4:	e66d      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1bac6:	4893      	ldr	r0, [pc, #588]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bac8:	f7f1 f80d 	bl	cae6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1bacc:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1bace:	e723      	b.n	1b918 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1bad0:	f7f1 f823 	bl	cb1a <sdc_hci_cmd_le_set_adv_data>
   1bad4:	e665      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1bad6:	f7f1 f837 	bl	cb48 <sdc_hci_cmd_le_set_scan_response_data>
   1bada:	e662      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1badc:	f7f1 f81f 	bl	cb1e <sdc_hci_cmd_le_set_adv_enable>
   1bae0:	e65f      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1bae2:	488c      	ldr	r0, [pc, #560]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bae4:	f7f1 f811 	bl	cb0a <sdc_hci_cmd_le_read_white_list_size>
   1bae8:	e7f0      	b.n	1bacc <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   1baea:	f7f0 ffee 	bl	caca <sdc_hci_cmd_le_clear_white_list>
   1baee:	e658      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1baf0:	f7f0 ffe7 	bl	cac2 <sdc_hci_cmd_le_add_device_to_white_list>
   1baf4:	e655      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1baf6:	f7f1 f80c 	bl	cb12 <sdc_hci_cmd_le_remove_device_from_white_list>
   1bafa:	e652      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1bafc:	4985      	ldr	r1, [pc, #532]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bafe:	f7f0 fff6 	bl	caee <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1bb02:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1bb04:	e708      	b.n	1b918 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1bb06:	f7f0 fff8 	bl	cafa <sdc_hci_cmd_le_read_remote_features>
   1bb0a:	e625      	b.n	1b758 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1bb0c:	4981      	ldr	r1, [pc, #516]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb0e:	f7f0 ffde 	bl	cace <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1bb12:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1bb14:	e700      	b.n	1b918 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1bb16:	487f      	ldr	r0, [pc, #508]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb18:	f7f0 ffe3 	bl	cae2 <sdc_hci_cmd_le_rand>
   1bb1c:	e67d      	b.n	1b81a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1bb1e:	497d      	ldr	r1, [pc, #500]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb20:	f7f0 ffdb 	bl	cada <sdc_hci_cmd_le_long_term_key_request_reply>
   1bb24:	e64a      	b.n	1b7bc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1bb26:	497b      	ldr	r1, [pc, #492]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb28:	f7f0 ffd3 	bl	cad2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1bb2c:	e646      	b.n	1b7bc <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1bb2e:	238f      	movs	r3, #143	; 0x8f
   1bb30:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1bb32:	23c0      	movs	r3, #192	; 0xc0
   1bb34:	e6ea      	b.n	1b90c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1bb36:	4977      	ldr	r1, [pc, #476]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb38:	f7f0 fff5 	bl	cb26 <sdc_hci_cmd_le_set_data_length>
   1bb3c:	e63e      	b.n	1b7bc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1bb3e:	4875      	ldr	r0, [pc, #468]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb40:	f7f0 ffdf 	bl	cb02 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1bb44:	e64a      	b.n	1b7dc <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1bb46:	f7f1 f801 	bl	cb4c <sdc_hci_cmd_le_write_suggested_default_data_length>
   1bb4a:	e62a      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1bb4c:	f7f0 ffb7 	bl	cabe <sdc_hci_cmd_le_add_device_to_resolving_list>
   1bb50:	e627      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1bb52:	f7f0 ffdc 	bl	cb0e <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1bb56:	e624      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1bb58:	f7f0 ffb5 	bl	cac6 <sdc_hci_cmd_le_clear_resolving_list>
   1bb5c:	e621      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1bb5e:	486d      	ldr	r0, [pc, #436]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb60:	f7f0 ffcd 	bl	cafe <sdc_hci_cmd_le_read_resolving_list_size>
   1bb64:	e7b2      	b.n	1bacc <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1bb66:	f7f0 ffd6 	bl	cb16 <sdc_hci_cmd_le_set_address_resolution_enable>
   1bb6a:	e61a      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1bb6c:	f7f0 ffea 	bl	cb44 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1bb70:	e617      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1bb72:	4868      	ldr	r0, [pc, #416]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb74:	f7f0 ffbd 	bl	caf2 <sdc_hci_cmd_le_read_max_data_length>
   1bb78:	e64f      	b.n	1b81a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1bb7a:	4966      	ldr	r1, [pc, #408]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb7c:	f7f0 ffbb 	bl	caf6 <sdc_hci_cmd_le_read_phy>
   1bb80:	e62c      	b.n	1b7dc <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1bb82:	f7f0 ffd2 	bl	cb2a <sdc_hci_cmd_le_set_default_phy>
   1bb86:	e60c      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1bb88:	f7f0 ffd6 	bl	cb38 <sdc_hci_cmd_le_set_phy>
   1bb8c:	e5e4      	b.n	1b758 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1bb8e:	4861      	ldr	r0, [pc, #388]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bb90:	f7f0 ffb9 	bl	cb06 <sdc_hci_cmd_le_read_transmit_power>
   1bb94:	e612      	b.n	1b7bc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1bb96:	f7f0 ffd1 	bl	cb3c <sdc_hci_cmd_le_set_privacy_mode>
   1bb9a:	e602      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1bb9c:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1bba0:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1bba2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1bba6:	d821      	bhi.n	1bbec <hci_internal_cmd_put+0x4f8>
   1bba8:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1bbac:	f43f add0 	beq.w	1b750 <hci_internal_cmd_put+0x5c>
   1bbb0:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1bbb4:	3b01      	subs	r3, #1
   1bbb6:	2b09      	cmp	r3, #9
   1bbb8:	f63f adca 	bhi.w	1b750 <hci_internal_cmd_put+0x5c>
   1bbbc:	a201      	add	r2, pc, #4	; (adr r2, 1bbc4 <hci_internal_cmd_put+0x4d0>)
   1bbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bbc2:	bf00      	nop
   1bbc4:	0001bc0d 	.word	0x0001bc0d
   1bbc8:	0001bc3b 	.word	0x0001bc3b
   1bbcc:	0001b751 	.word	0x0001b751
   1bbd0:	0001b751 	.word	0x0001b751
   1bbd4:	0001b751 	.word	0x0001b751
   1bbd8:	0001bc87 	.word	0x0001bc87
   1bbdc:	0001b751 	.word	0x0001b751
   1bbe0:	0001b751 	.word	0x0001b751
   1bbe4:	0001bc73 	.word	0x0001bc73
   1bbe8:	0001bc7d 	.word	0x0001bc7d
   1bbec:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1bbf0:	b29b      	uxth	r3, r3
   1bbf2:	2b05      	cmp	r3, #5
   1bbf4:	f63f adac 	bhi.w	1b750 <hci_internal_cmd_put+0x5c>
   1bbf8:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1bbfc:	2b05      	cmp	r3, #5
   1bbfe:	f63f ada7 	bhi.w	1b750 <hci_internal_cmd_put+0x5c>
   1bc02:	e8df f003 	tbb	[pc, r3]
   1bc06:	5044      	.short	0x5044
   1bc08:	5c595653 	.word	0x5c595653
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1bc0c:	4841      	ldr	r0, [pc, #260]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bc0e:	f7e8 fa79 	bl	4104 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1bc12:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1bc14:	f242 0219 	movw	r2, #8217	; 0x2019
   1bc18:	4296      	cmp	r6, r2
   1bc1a:	dc60      	bgt.n	1bcde <hci_internal_cmd_put+0x5ea>
   1bc1c:	f242 020c 	movw	r2, #8204	; 0x200c
   1bc20:	4296      	cmp	r6, r2
   1bc22:	dc4f      	bgt.n	1bcc4 <hci_internal_cmd_put+0x5d0>
   1bc24:	f240 4206 	movw	r2, #1030	; 0x406
   1bc28:	4296      	cmp	r6, r2
   1bc2a:	f43f ad95 	beq.w	1b758 <hci_internal_cmd_put+0x64>
   1bc2e:	f240 421d 	movw	r2, #1053	; 0x41d
   1bc32:	4296      	cmp	r6, r2
   1bc34:	f43f ad90 	beq.w	1b758 <hci_internal_cmd_put+0x64>
   1bc38:	e66e      	b.n	1b918 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1bc3a:	4836      	ldr	r0, [pc, #216]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bc3c:	2202      	movs	r2, #2
   1bc3e:	2100      	movs	r1, #0
   1bc40:	f004 fb24 	bl	2028c <memset>
	cmds->read_version_info = 1;
   1bc44:	79e3      	ldrb	r3, [r4, #7]
   1bc46:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1bc4a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1bc4e:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1bc50:	7a23      	ldrb	r3, [r4, #8]
   1bc52:	f023 0307 	bic.w	r3, r3, #7
   1bc56:	f043 0307 	orr.w	r3, r3, #7
   1bc5a:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1bc5c:	f242 0319 	movw	r3, #8217	; 0x2019
   1bc60:	429e      	cmp	r6, r3
   1bc62:	dd47      	ble.n	1bcf4 <hci_internal_cmd_put+0x600>
   1bc64:	f242 0332 	movw	r3, #8242	; 0x2032
   1bc68:	429e      	cmp	r6, r3
   1bc6a:	d051      	beq.n	1bd10 <hci_internal_cmd_put+0x61c>
   1bc6c:	f242 0343 	movw	r3, #8259	; 0x2043
   1bc70:	e04b      	b.n	1bd0a <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1bc72:	4828      	ldr	r0, [pc, #160]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bc74:	f7f0 fed2 	bl	ca1c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1bc78:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1bc7a:	e7cb      	b.n	1bc14 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1bc7c:	4825      	ldr	r0, [pc, #148]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bc7e:	f7f0 fe80 	bl	c982 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1bc82:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1bc84:	e7c6      	b.n	1bc14 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1bc86:	f7f0 ff14 	bl	cab2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1bc8a:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1bc8c:	e7c2      	b.n	1bc14 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   1bc8e:	4821      	ldr	r0, [pc, #132]	; (1bd14 <hci_internal_cmd_put+0x620>)
   1bc90:	2201      	movs	r2, #1
   1bc92:	2100      	movs	r1, #0
   1bc94:	f004 fafa 	bl	2028c <memset>
	cmds->read_supported_vs_commands = 1;
   1bc98:	79e3      	ldrb	r3, [r4, #7]
   1bc9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1bc9e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1bca2:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1bca4:	e626      	b.n	1b8f4 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1bca6:	f7f0 fe65 	bl	c974 <sdc_hci_cmd_vs_llpm_mode_set>
   1bcaa:	e57a      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1bcac:	f7f0 fe5e 	bl	c96c <sdc_hci_cmd_vs_conn_update>
   1bcb0:	e577      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1bcb2:	f7f0 fe53 	bl	c95c <sdc_hci_cmd_vs_conn_event_extend>
   1bcb6:	e574      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1bcb8:	f7f0 fe5e 	bl	c978 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1bcbc:	e571      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1bcbe:	f7f0 fe57 	bl	c970 <sdc_hci_cmd_vs_event_length_set>
   1bcc2:	e56e      	b.n	1b7a2 <hci_internal_cmd_put+0xae>
   1bcc4:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1bcc8:	3a0d      	subs	r2, #13
   1bcca:	2101      	movs	r1, #1
   1bccc:	b292      	uxth	r2, r2
   1bcce:	fa01 f202 	lsl.w	r2, r1, r2
   1bcd2:	f241 2141 	movw	r1, #4673	; 0x1241
   1bcd6:	420a      	tst	r2, r1
   1bcd8:	f43f ae1e 	beq.w	1b918 <hci_internal_cmd_put+0x224>
   1bcdc:	e53c      	b.n	1b758 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1bcde:	f242 0232 	movw	r2, #8242	; 0x2032
   1bce2:	4296      	cmp	r6, r2
   1bce4:	f43f ad38 	beq.w	1b758 <hci_internal_cmd_put+0x64>
   1bce8:	f242 0243 	movw	r2, #8259	; 0x2043
   1bcec:	e7a1      	b.n	1bc32 <hci_internal_cmd_put+0x53e>
		return -NRF_EPERM;
   1bcee:	f04f 30ff 	mov.w	r0, #4294967295
   1bcf2:	e53d      	b.n	1b770 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   1bcf4:	f242 030c 	movw	r3, #8204	; 0x200c
   1bcf8:	429e      	cmp	r6, r3
   1bcfa:	f73f adfb 	bgt.w	1b8f4 <hci_internal_cmd_put+0x200>
   1bcfe:	f240 4306 	movw	r3, #1030	; 0x406
   1bd02:	429e      	cmp	r6, r3
   1bd04:	d004      	beq.n	1bd10 <hci_internal_cmd_put+0x61c>
   1bd06:	f240 431d 	movw	r3, #1053	; 0x41d
   1bd0a:	429e      	cmp	r6, r3
   1bd0c:	f47f adf2 	bne.w	1b8f4 <hci_internal_cmd_put+0x200>
   1bd10:	2000      	movs	r0, #0
   1bd12:	e521      	b.n	1b758 <hci_internal_cmd_put+0x64>
   1bd14:	200029e6 	.word	0x200029e6

0001bd18 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1bd18:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1bd1a:	4c07      	ldr	r4, [pc, #28]	; (1bd38 <hci_internal_evt_get+0x20>)
   1bd1c:	7823      	ldrb	r3, [r4, #0]
   1bd1e:	b13b      	cbz	r3, 1bd30 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1bd20:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1bd22:	1c61      	adds	r1, r4, #1
   1bd24:	3202      	adds	r2, #2
   1bd26:	f004 fa86 	bl	20236 <memcpy>
		cmd_complete_or_status.occurred = false;
   1bd2a:	2000      	movs	r0, #0
   1bd2c:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1bd2e:	bd10      	pop	{r4, pc}
   1bd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1bd34:	f7f0 bdf5 	b.w	c922 <sdc_hci_evt_get>
   1bd38:	200029df 	.word	0x200029df

0001bd3c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1bd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1bd40:	4c0b      	ldr	r4, [pc, #44]	; (1bd70 <bt_rand+0x34>)
   1bd42:	6823      	ldr	r3, [r4, #0]
{
   1bd44:	4605      	mov	r5, r0
   1bd46:	460e      	mov	r6, r1
   1bd48:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1bd4a:	b13b      	cbz	r3, 1bd5c <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1bd4c:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   1bd4e:	6883      	ldr	r3, [r0, #8]
   1bd50:	b2b2      	uxth	r2, r6
   1bd52:	4629      	mov	r1, r5
   1bd54:	681b      	ldr	r3, [r3, #0]
}
   1bd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bd5a:	4718      	bx	r3
   1bd5c:	4805      	ldr	r0, [pc, #20]	; (1bd74 <bt_rand+0x38>)
   1bd5e:	f000 fb23 	bl	1c3a8 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1bd62:	6020      	str	r0, [r4, #0]
		if (!dev) {
   1bd64:	2800      	cmp	r0, #0
   1bd66:	d1f1      	bne.n	1bd4c <bt_rand+0x10>
}
   1bd68:	f06f 0012 	mvn.w	r0, #18
   1bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd70:	20002098 	.word	0x20002098
   1bd74:	00026044 	.word	0x00026044

0001bd78 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1bd78:	b538      	push	{r3, r4, r5, lr}
   1bd7a:	4b0b      	ldr	r3, [pc, #44]	; (1bda8 <m_assert_handler+0x30>)
   1bd7c:	4c0b      	ldr	r4, [pc, #44]	; (1bdac <m_assert_handler+0x34>)
   1bd7e:	1ae4      	subs	r4, r4, r3
   1bd80:	460d      	mov	r5, r1
   1bd82:	08e4      	lsrs	r4, r4, #3
   1bd84:	f7f4 ff18 	bl	10bb8 <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1bd88:	01a4      	lsls	r4, r4, #6
   1bd8a:	f044 0401 	orr.w	r4, r4, #1
   1bd8e:	4601      	mov	r1, r0
   1bd90:	4623      	mov	r3, r4
   1bd92:	4807      	ldr	r0, [pc, #28]	; (1bdb0 <m_assert_handler+0x38>)
   1bd94:	462a      	mov	r2, r5
   1bd96:	f002 fc15 	bl	1e5c4 <log_2>
	k_oops();
   1bd9a:	4040      	eors	r0, r0
   1bd9c:	f380 8811 	msr	BASEPRI, r0
   1bda0:	f04f 0003 	mov.w	r0, #3
   1bda4:	df02      	svc	2
}
   1bda6:	bd38      	pop	{r3, r4, r5, pc}
   1bda8:	0002353c 	.word	0x0002353c
   1bdac:	000235f4 	.word	0x000235f4
   1bdb0:	00026190 	.word	0x00026190

0001bdb4 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1bdb4:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1bdb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1bdba:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1bdbe:	2300      	movs	r3, #0
   1bdc0:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1bdc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1bdc8:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bdcc:	4a11      	ldr	r2, [pc, #68]	; (1be14 <mpsl_lib_init+0x60>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1bdce:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bdd0:	2119      	movs	r1, #25
   1bdd2:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1bdd4:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bdd8:	f7e7 fd66 	bl	38a8 <mpsl_init>
	if (err) {
   1bddc:	4604      	mov	r4, r0
   1bdde:	b9b0      	cbnz	r0, 1be0e <mpsl_lib_init+0x5a>
		return err;
	}

	mpsl_fem_device_config_254_apply_set(
   1bde0:	f7e7 fed0 	bl	3b84 <mpsl_fem_device_config_254_apply_set>
		IS_ENABLED(CONFIG_MPSL_FEM_DEVICE_CONFIG_254));

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1bde4:	480c      	ldr	r0, [pc, #48]	; (1be18 <mpsl_lib_init+0x64>)
   1bde6:	2101      	movs	r1, #1
   1bde8:	f7f0 f81d 	bl	be26 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1bdec:	4604      	mov	r4, r0
   1bdee:	b970      	cbnz	r0, 1be0e <mpsl_lib_init+0x5a>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1bdf0:	4601      	mov	r1, r0
   1bdf2:	2201      	movs	r2, #1
   1bdf4:	2008      	movs	r0, #8
   1bdf6:	f7f6 fc9b 	bl	12730 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1bdfa:	2201      	movs	r2, #1
   1bdfc:	4621      	mov	r1, r4
   1bdfe:	200b      	movs	r0, #11
   1be00:	f7f6 fc96 	bl	12730 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1be04:	2201      	movs	r2, #1
   1be06:	4621      	mov	r1, r4
   1be08:	4610      	mov	r0, r2
   1be0a:	f7f6 fc91 	bl	12730 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1be0e:	4620      	mov	r0, r4
   1be10:	b002      	add	sp, #8
   1be12:	bd10      	pop	{r4, pc}
   1be14:	0001bd79 	.word	0x0001bd79
   1be18:	2000209c 	.word	0x2000209c

0001be1c <mpsl_low_prio_irq_handler>:
   1be1c:	4801      	ldr	r0, [pc, #4]	; (1be24 <mpsl_low_prio_irq_handler+0x8>)
   1be1e:	f000 be29 	b.w	1ca74 <z_impl_k_sem_give>
   1be22:	bf00      	nop
   1be24:	200007bc 	.word	0x200007bc

0001be28 <signal_thread>:
{
   1be28:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1be2a:	4c09      	ldr	r4, [pc, #36]	; (1be50 <signal_thread+0x28>)
   1be2c:	f04f 32ff 	mov.w	r2, #4294967295
   1be30:	f04f 33ff 	mov.w	r3, #4294967295
   1be34:	4620      	mov	r0, r4
   1be36:	f000 fe43 	bl	1cac0 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1be3a:	f04f 31ff 	mov.w	r1, #4294967295
   1be3e:	f04f 30ff 	mov.w	r0, #4294967295
   1be42:	f7ff fa47 	bl	1b2d4 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1be46:	f7f0 f905 	bl	c054 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1be4a:	f7ff fa4b 	bl	1b2e4 <multithreading_lock_release>
	while (true) {
   1be4e:	e7ed      	b.n	1be2c <signal_thread+0x4>
   1be50:	200007bc 	.word	0x200007bc

0001be54 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1be54:	b530      	push	{r4, r5, lr}
   1be56:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1be58:	4d0f      	ldr	r5, [pc, #60]	; (1be98 <mpsl_signal_thread_init+0x44>)
   1be5a:	4910      	ldr	r1, [pc, #64]	; (1be9c <mpsl_signal_thread_init+0x48>)
   1be5c:	2200      	movs	r2, #0
   1be5e:	2300      	movs	r3, #0
   1be60:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1be64:	2400      	movs	r4, #0
   1be66:	f06f 0309 	mvn.w	r3, #9
   1be6a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1be6e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1be72:	4b0b      	ldr	r3, [pc, #44]	; (1bea0 <mpsl_signal_thread_init+0x4c>)
   1be74:	9400      	str	r4, [sp, #0]
   1be76:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1be7a:	4628      	mov	r0, r5
   1be7c:	f000 fc68 	bl	1c750 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1be80:	4908      	ldr	r1, [pc, #32]	; (1bea4 <mpsl_signal_thread_init+0x50>)
   1be82:	4628      	mov	r0, r5
   1be84:	f006 fd2c 	bl	228e0 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1be88:	4622      	mov	r2, r4
   1be8a:	2104      	movs	r1, #4
   1be8c:	2019      	movs	r0, #25
   1be8e:	f7f6 fc4f 	bl	12730 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1be92:	4620      	mov	r0, r4
   1be94:	b009      	add	sp, #36	; 0x24
   1be96:	bd30      	pop	{r4, r5, pc}
   1be98:	20001b48 	.word	0x20001b48
   1be9c:	20004500 	.word	0x20004500
   1bea0:	0001be29 	.word	0x0001be29
   1bea4:	000261a4 	.word	0x000261a4

0001bea8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1bea8:	4b01      	ldr	r3, [pc, #4]	; (1beb0 <mpsl_hfclk_callback+0x8>)
   1beaa:	2000      	movs	r0, #0
   1beac:	681b      	ldr	r3, [r3, #0]
   1beae:	4718      	bx	r3
   1beb0:	200020c0 	.word	0x200020c0

0001beb4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1beb4:	b120      	cbz	r0, 1bec0 <nrfx_clock_start+0xc>
   1beb6:	2801      	cmp	r0, #1
   1beb8:	d106      	bne.n	1bec8 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1beba:	4804      	ldr	r0, [pc, #16]	; (1becc <nrfx_clock_start+0x18>)
   1bebc:	f7e7 bb54 	b.w	3568 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1bec0:	4b03      	ldr	r3, [pc, #12]	; (1bed0 <nrfx_clock_start+0x1c>)
   1bec2:	2001      	movs	r0, #1
   1bec4:	681b      	ldr	r3, [r3, #0]
   1bec6:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1bec8:	4770      	bx	lr
   1beca:	bf00      	nop
   1becc:	0001bea9 	.word	0x0001bea9
   1bed0:	200020c0 	.word	0x200020c0

0001bed4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1bed4:	4b01      	ldr	r3, [pc, #4]	; (1bedc <nrfx_clock_init+0x8>)
   1bed6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1bed8:	4801      	ldr	r0, [pc, #4]	; (1bee0 <nrfx_clock_init+0xc>)
   1beda:	4770      	bx	lr
   1bedc:	200020c0 	.word	0x200020c0
   1bee0:	0bad0000 	.word	0x0bad0000

0001bee4 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1bee4:	b538      	push	{r3, r4, r5, lr}
   1bee6:	4d1a      	ldr	r5, [pc, #104]	; (1bf50 <timeslot_callback+0x6c>)
   1bee8:	f3bf 8f5b 	dmb	ish
   1beec:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   1beee:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   1bef2:	bb5c      	cbnz	r4, 1bf4c <timeslot_callback+0x68>
		return NULL;
	}

	switch (signal) {
   1bef4:	2906      	cmp	r1, #6
   1bef6:	d804      	bhi.n	1bf02 <timeslot_callback+0x1e>
   1bef8:	2904      	cmp	r1, #4
   1befa:	d81f      	bhi.n	1bf3c <timeslot_callback+0x58>
   1befc:	b139      	cbz	r1, 1bf0e <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   1befe:	4620      	mov	r0, r4
   1bf00:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   1bf02:	2907      	cmp	r1, #7
   1bf04:	d1fb      	bne.n	1befe <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   1bf06:	4628      	mov	r0, r5
   1bf08:	f000 fdb4 	bl	1ca74 <z_impl_k_sem_give>
}
   1bf0c:	e7f7      	b.n	1befe <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   1bf0e:	6a2b      	ldr	r3, [r5, #32]
   1bf10:	e9d3 2000 	ldrd	r2, r0, [r3]
   1bf14:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1bf16:	2801      	cmp	r0, #1
   1bf18:	d005      	beq.n	1bf26 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   1bf1a:	462c      	mov	r4, r5
   1bf1c:	2302      	movs	r3, #2
   1bf1e:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1bf22:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1bf24:	e7eb      	b.n	1befe <timeslot_callback+0x1a>
			_context.return_param.callback_action =
   1bf26:	2303      	movs	r3, #3
   1bf28:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1bf2c:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   1bf30:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1bf34:	63ab      	str	r3, [r5, #56]	; 0x38
   1bf36:	f105 0434 	add.w	r4, r5, #52	; 0x34
   1bf3a:	e7e0      	b.n	1befe <timeslot_callback+0x1a>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1bf3c:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   1bf3e:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1bf42:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1bf46:	f7ef ff17 	bl	bd78 <mpsl_timeslot_request>
}
   1bf4a:	e7d8      	b.n	1befe <timeslot_callback+0x1a>
		return NULL;
   1bf4c:	2400      	movs	r4, #0
   1bf4e:	e7d6      	b.n	1befe <timeslot_callback+0x1a>
   1bf50:	200020c4 	.word	0x200020c4

0001bf54 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bf54:	4802      	ldr	r0, [pc, #8]	; (1bf60 <nrf_flash_sync_init+0xc>)
   1bf56:	2201      	movs	r2, #1
   1bf58:	2100      	movs	r1, #0
   1bf5a:	f006 bda3 	b.w	22aa4 <z_impl_k_sem_init>
   1bf5e:	bf00      	nop
   1bf60:	200020c4 	.word	0x200020c4

0001bf64 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1bf64:	4b01      	ldr	r3, [pc, #4]	; (1bf6c <nrf_flash_sync_set_context+0x8>)
   1bf66:	61d8      	str	r0, [r3, #28]
}
   1bf68:	4770      	bx	lr
   1bf6a:	bf00      	nop
   1bf6c:	200020c4 	.word	0x200020c4

0001bf70 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1bf70:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1bf72:	4c3d      	ldr	r4, [pc, #244]	; (1c068 <nrf_flash_sync_exe+0xf8>)
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bf74:	f04f 31ff 	mov.w	r1, #4294967295
{
   1bf78:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bf7a:	f04f 30ff 	mov.w	r0, #4294967295
   1bf7e:	f7ff f9a9 	bl	1b2d4 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1bf82:	f104 0118 	add.w	r1, r4, #24
   1bf86:	4839      	ldr	r0, [pc, #228]	; (1c06c <nrf_flash_sync_exe+0xfc>)
   1bf88:	f7e4 fa60 	bl	44c <mpsl_timeslot_session_open>
   1bf8c:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1bf8e:	f7ff f9a9 	bl	1b2e4 <multithreading_lock_release>

	if (ret < 0) {
   1bf92:	2d00      	cmp	r5, #0
   1bf94:	da0d      	bge.n	1bfb2 <nrf_flash_sync_exe+0x42>
   1bf96:	4b36      	ldr	r3, [pc, #216]	; (1c070 <nrf_flash_sync_exe+0x100>)
   1bf98:	4a36      	ldr	r2, [pc, #216]	; (1c074 <nrf_flash_sync_exe+0x104>)
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1bf9a:	4837      	ldr	r0, [pc, #220]	; (1c078 <nrf_flash_sync_exe+0x108>)
   1bf9c:	1ad2      	subs	r2, r2, r3
   1bf9e:	08d2      	lsrs	r2, r2, #3
   1bfa0:	0192      	lsls	r2, r2, #6
   1bfa2:	f042 0201 	orr.w	r2, r2, #1
   1bfa6:	4629      	mov	r1, r5
   1bfa8:	f002 faf8 	bl	1e59c <log_1>
		return -ENOMEM;
   1bfac:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1bfb0:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1bfb2:	f240 1301 	movw	r3, #257	; 0x101
   1bfb6:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1bfb8:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1bfba:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1bfbc:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1bfbe:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   1bfc0:	4b2e      	ldr	r3, [pc, #184]	; (1c07c <nrf_flash_sync_exe+0x10c>)
   1bfc2:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1bfc4:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   1bfc6:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1bfca:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   1bfce:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bfd0:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1bfd4:	f3bf 8f5b 	dmb	ish
   1bfd8:	e855 3f00 	ldrex	r3, [r5]
   1bfdc:	e845 2100 	strex	r1, r2, [r5]
   1bfe0:	2900      	cmp	r1, #0
   1bfe2:	d1f9      	bne.n	1bfd8 <nrf_flash_sync_exe+0x68>
   1bfe4:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bfe8:	f04f 31ff 	mov.w	r1, #4294967295
   1bfec:	f04f 30ff 	mov.w	r0, #4294967295
   1bff0:	f7ff f970 	bl	1b2d4 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1bff4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1bff8:	7e20      	ldrb	r0, [r4, #24]
   1bffa:	f7ef febd 	bl	bd78 <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   1bffe:	f7ff f971 	bl	1b2e4 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1c002:	4a1f      	ldr	r2, [pc, #124]	; (1c080 <nrf_flash_sync_exe+0x110>)
   1c004:	2300      	movs	r3, #0
   1c006:	4620      	mov	r0, r4
   1c008:	f000 fd5a 	bl	1cac0 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1c00c:	2800      	cmp	r0, #0
   1c00e:	da14      	bge.n	1c03a <nrf_flash_sync_exe+0xca>
   1c010:	4b17      	ldr	r3, [pc, #92]	; (1c070 <nrf_flash_sync_exe+0x100>)
   1c012:	4918      	ldr	r1, [pc, #96]	; (1c074 <nrf_flash_sync_exe+0x104>)
		LOG_ERR("timeout");
   1c014:	481b      	ldr	r0, [pc, #108]	; (1c084 <nrf_flash_sync_exe+0x114>)
   1c016:	1ac9      	subs	r1, r1, r3
   1c018:	08c9      	lsrs	r1, r1, #3
   1c01a:	0189      	lsls	r1, r1, #6
   1c01c:	f041 0101 	orr.w	r1, r1, #1
   1c020:	f002 faaf 	bl	1e582 <log_0>
   1c024:	f3bf 8f5b 	dmb	ish
   1c028:	2301      	movs	r3, #1
   1c02a:	e855 2f00 	ldrex	r2, [r5]
   1c02e:	e845 3100 	strex	r1, r3, [r5]
   1c032:	2900      	cmp	r1, #0
   1c034:	d1f9      	bne.n	1c02a <nrf_flash_sync_exe+0xba>
   1c036:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c03a:	f04f 31ff 	mov.w	r1, #4294967295
   1c03e:	f04f 30ff 	mov.w	r0, #4294967295
   1c042:	f7ff f947 	bl	1b2d4 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   1c046:	7e20      	ldrb	r0, [r4, #24]
   1c048:	f7ef fecf 	bl	bdea <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1c04c:	f7ff f94a 	bl	1b2e4 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c050:	f3bf 8f5b 	dmb	ish
   1c054:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c056:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1c05a:	b113      	cbz	r3, 1c062 <nrf_flash_sync_exe+0xf2>
	z_impl_k_sem_reset(sem);
   1c05c:	4802      	ldr	r0, [pc, #8]	; (1c068 <nrf_flash_sync_exe+0xf8>)
   1c05e:	f000 fd59 	bl	1cb14 <z_impl_k_sem_reset>
	return _context.status;
   1c062:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c064:	e7a4      	b.n	1bfb0 <nrf_flash_sync_exe+0x40>
   1c066:	bf00      	nop
   1c068:	200020c4 	.word	0x200020c4
   1c06c:	0001bee5 	.word	0x0001bee5
   1c070:	0002353c 	.word	0x0002353c
   1c074:	000235d4 	.word	0x000235d4
   1c078:	000261ba 	.word	0x000261ba
   1c07c:	07a11fff 	.word	0x07a11fff
   1c080:	000b7b44 	.word	0x000b7b44
   1c084:	0002556a 	.word	0x0002556a

0001c088 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c088:	4b07      	ldr	r3, [pc, #28]	; (1c0a8 <nrf_flash_sync_check_time_limit+0x20>)
   1c08a:	2201      	movs	r2, #1
   1c08c:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1c08e:	3b40      	subs	r3, #64	; 0x40
   1c090:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1c094:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1c098:	4418      	add	r0, r3
   1c09a:	4b04      	ldr	r3, [pc, #16]	; (1c0ac <nrf_flash_sync_check_time_limit+0x24>)
   1c09c:	69db      	ldr	r3, [r3, #28]
}
   1c09e:	4298      	cmp	r0, r3
   1c0a0:	bf34      	ite	cc
   1c0a2:	2000      	movcc	r0, #0
   1c0a4:	2001      	movcs	r0, #1
   1c0a6:	4770      	bx	lr
   1c0a8:	40008040 	.word	0x40008040
   1c0ac:	200020c4 	.word	0x200020c4

0001c0b0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1c0b0:	4b04      	ldr	r3, [pc, #16]	; (1c0c4 <nrf52_errata_108+0x14>)
   1c0b2:	6818      	ldr	r0, [r3, #0]
   1c0b4:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c0b6:	bf04      	itt	eq
   1c0b8:	4b03      	ldreq	r3, [pc, #12]	; (1c0c8 <nrf52_errata_108+0x18>)
   1c0ba:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   1c0bc:	1f83      	subs	r3, r0, #6
   1c0be:	4258      	negs	r0, r3
   1c0c0:	4158      	adcs	r0, r3
   1c0c2:	4770      	bx	lr
   1c0c4:	10000130 	.word	0x10000130
   1c0c8:	f0000fe0 	.word	0xf0000fe0

0001c0cc <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c0cc:	4b07      	ldr	r3, [pc, #28]	; (1c0ec <nrf52_errata_16+0x20>)
   1c0ce:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1c0d0:	2b06      	cmp	r3, #6
   1c0d2:	d109      	bne.n	1c0e8 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1c0d4:	4b06      	ldr	r3, [pc, #24]	; (1c0f0 <nrf52_errata_16+0x24>)
   1c0d6:	681b      	ldr	r3, [r3, #0]
   1c0d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1c0dc:	3b03      	subs	r3, #3
   1c0de:	2b04      	cmp	r3, #4
   1c0e0:	d802      	bhi.n	1c0e8 <nrf52_errata_16+0x1c>
   1c0e2:	4a04      	ldr	r2, [pc, #16]	; (1c0f4 <nrf52_errata_16+0x28>)
   1c0e4:	5cd0      	ldrb	r0, [r2, r3]
   1c0e6:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1c0e8:	2000      	movs	r0, #0
    #endif
}
   1c0ea:	4770      	bx	lr
   1c0ec:	f0000fe0 	.word	0xf0000fe0
   1c0f0:	f0000fe8 	.word	0xf0000fe8
   1c0f4:	000261ff 	.word	0x000261ff

0001c0f8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1c0f8:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1c0fa:	f7ff ffd9 	bl	1c0b0 <nrf52_errata_108>
   1c0fe:	b128      	cbz	r0, 1c10c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1c100:	4b6b      	ldr	r3, [pc, #428]	; (1c2b0 <SystemInit+0x1b8>)
   1c102:	4a6c      	ldr	r2, [pc, #432]	; (1c2b4 <SystemInit+0x1bc>)
   1c104:	681b      	ldr	r3, [r3, #0]
   1c106:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1c10a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1c10c:	f7ff ffde 	bl	1c0cc <nrf52_errata_16>
   1c110:	b110      	cbz	r0, 1c118 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1c112:	4b69      	ldr	r3, [pc, #420]	; (1c2b8 <SystemInit+0x1c0>)
   1c114:	4a69      	ldr	r2, [pc, #420]	; (1c2bc <SystemInit+0x1c4>)
   1c116:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1c118:	f7ff ffca 	bl	1c0b0 <nrf52_errata_108>
   1c11c:	b128      	cbz	r0, 1c12a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1c11e:	4b68      	ldr	r3, [pc, #416]	; (1c2c0 <SystemInit+0x1c8>)
   1c120:	4a68      	ldr	r2, [pc, #416]	; (1c2c4 <SystemInit+0x1cc>)
   1c122:	681b      	ldr	r3, [r3, #0]
   1c124:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1c128:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1c12a:	f7ff ffcf 	bl	1c0cc <nrf52_errata_16>
   1c12e:	b120      	cbz	r0, 1c13a <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1c130:	4a65      	ldr	r2, [pc, #404]	; (1c2c8 <SystemInit+0x1d0>)
   1c132:	68d3      	ldr	r3, [r2, #12]
   1c134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c138:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1c13a:	f7ff ffb9 	bl	1c0b0 <nrf52_errata_108>
   1c13e:	b140      	cbz	r0, 1c152 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1c140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c144:	2200      	movs	r2, #0
   1c146:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1c14a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1c14e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1c152:	f7ff ffbb 	bl	1c0cc <nrf52_errata_16>
   1c156:	b110      	cbz	r0, 1c15e <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1c158:	4b5c      	ldr	r3, [pc, #368]	; (1c2cc <SystemInit+0x1d4>)
   1c15a:	2203      	movs	r2, #3
   1c15c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1c15e:	f7ff ffb5 	bl	1c0cc <nrf52_errata_16>
   1c162:	b140      	cbz	r0, 1c176 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1c164:	4b5a      	ldr	r3, [pc, #360]	; (1c2d0 <SystemInit+0x1d8>)
   1c166:	2205      	movs	r2, #5
   1c168:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1c16a:	2201      	movs	r2, #1
   1c16c:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1c16e:	2200      	movs	r2, #0
   1c170:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1c172:	223f      	movs	r2, #63	; 0x3f
   1c174:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1c176:	4b57      	ldr	r3, [pc, #348]	; (1c2d4 <SystemInit+0x1dc>)
   1c178:	681a      	ldr	r2, [r3, #0]
   1c17a:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c17c:	bf0b      	itete	eq
   1c17e:	4b56      	ldreq	r3, [pc, #344]	; (1c2d8 <SystemInit+0x1e0>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1c180:	4b56      	ldrne	r3, [pc, #344]	; (1c2dc <SystemInit+0x1e4>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c182:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1c184:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1c186:	bf02      	ittt	eq
   1c188:	3308      	addeq	r3, #8
   1c18a:	681b      	ldreq	r3, [r3, #0]
   1c18c:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1c190:	2a06      	cmp	r2, #6
   1c192:	d14d      	bne.n	1c230 <SystemInit+0x138>
            {
                switch(var2)
   1c194:	3b03      	subs	r3, #3
   1c196:	2b04      	cmp	r3, #4
   1c198:	d803      	bhi.n	1c1a2 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1c19a:	4a51      	ldr	r2, [pc, #324]	; (1c2e0 <SystemInit+0x1e8>)
   1c19c:	5cd3      	ldrb	r3, [r2, r3]
   1c19e:	2b00      	cmp	r3, #0
   1c1a0:	d046      	beq.n	1c230 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1c1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c1a6:	4b4f      	ldr	r3, [pc, #316]	; (1c2e4 <SystemInit+0x1ec>)
   1c1a8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1c1ac:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1c1b0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1c1b4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1c1b8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1c1bc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1c1c0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1c1c4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1c1c8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1c1cc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1c1d0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1c1d4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1c1d8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1c1dc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1c1e0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1c1e4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1c1e8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1c1ec:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1c1f0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1c1f4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1c1f8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1c1fc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1c200:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1c204:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c208:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1c20c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c210:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1c214:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c218:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1c21c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c220:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1c224:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c228:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1c22c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1c230:	f7ff ff3e 	bl	1c0b0 <nrf52_errata_108>
   1c234:	b128      	cbz	r0, 1c242 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1c236:	4b2c      	ldr	r3, [pc, #176]	; (1c2e8 <SystemInit+0x1f0>)
   1c238:	4a2c      	ldr	r2, [pc, #176]	; (1c2ec <SystemInit+0x1f4>)
   1c23a:	681b      	ldr	r3, [r3, #0]
   1c23c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1c240:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1c242:	f7ff ff35 	bl	1c0b0 <nrf52_errata_108>
   1c246:	b148      	cbz	r0, 1c25c <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c24c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c250:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c252:	bf44      	itt	mi
   1c254:	f06f 0201 	mvnmi.w	r2, #1
   1c258:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c25c:	4b1d      	ldr	r3, [pc, #116]	; (1c2d4 <SystemInit+0x1dc>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1c25e:	681b      	ldr	r3, [r3, #0]
   1c260:	2b06      	cmp	r3, #6
   1c262:	d120      	bne.n	1c2a6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c264:	4b1d      	ldr	r3, [pc, #116]	; (1c2dc <SystemInit+0x1e4>)
   1c266:	681b      	ldr	r3, [r3, #0]
   1c268:	3b03      	subs	r3, #3
   1c26a:	2b04      	cmp	r3, #4
   1c26c:	d802      	bhi.n	1c274 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1c26e:	4a20      	ldr	r2, [pc, #128]	; (1c2f0 <SystemInit+0x1f8>)
   1c270:	5cd3      	ldrb	r3, [r2, r3]
   1c272:	b143      	cbz	r3, 1c286 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1c274:	4a1f      	ldr	r2, [pc, #124]	; (1c2f4 <SystemInit+0x1fc>)
   1c276:	6813      	ldr	r3, [r2, #0]
   1c278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1c27c:	6013      	str	r3, [r2, #0]
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c27e:	4b15      	ldr	r3, [pc, #84]	; (1c2d4 <SystemInit+0x1dc>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1c280:	681b      	ldr	r3, [r3, #0]
   1c282:	2b06      	cmp	r3, #6
   1c284:	d10f      	bne.n	1c2a6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c286:	4b15      	ldr	r3, [pc, #84]	; (1c2dc <SystemInit+0x1e4>)
   1c288:	681b      	ldr	r3, [r3, #0]
   1c28a:	3b03      	subs	r3, #3
   1c28c:	2b04      	cmp	r3, #4
   1c28e:	d802      	bhi.n	1c296 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1c290:	4a19      	ldr	r2, [pc, #100]	; (1c2f8 <SystemInit+0x200>)
   1c292:	5cd3      	ldrb	r3, [r2, r3]
   1c294:	b13b      	cbz	r3, 1c2a6 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1c296:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c29a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1c29e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c2a2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c2a6:	4b15      	ldr	r3, [pc, #84]	; (1c2fc <SystemInit+0x204>)
   1c2a8:	4a15      	ldr	r2, [pc, #84]	; (1c300 <SystemInit+0x208>)
   1c2aa:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c2ac:	bd08      	pop	{r3, pc}
   1c2ae:	bf00      	nop
   1c2b0:	10000324 	.word	0x10000324
   1c2b4:	40013540 	.word	0x40013540
   1c2b8:	4007c074 	.word	0x4007c074
   1c2bc:	baadf00d 	.word	0xbaadf00d
   1c2c0:	10000244 	.word	0x10000244
   1c2c4:	4000053c 	.word	0x4000053c
   1c2c8:	e000edf0 	.word	0xe000edf0
   1c2cc:	400005a0 	.word	0x400005a0
   1c2d0:	40005610 	.word	0x40005610
   1c2d4:	10000130 	.word	0x10000130
   1c2d8:	f0000fe0 	.word	0xf0000fe0
   1c2dc:	10000134 	.word	0x10000134
   1c2e0:	000261f0 	.word	0x000261f0
   1c2e4:	4000c000 	.word	0x4000c000
   1c2e8:	10000258 	.word	0x10000258
   1c2ec:	40000ee4 	.word	0x40000ee4
   1c2f0:	000261f5 	.word	0x000261f5
   1c2f4:	4000173c 	.word	0x4000173c
   1c2f8:	000261fa 	.word	0x000261fa
   1c2fc:	20000560 	.word	0x20000560
   1c300:	03d09000 	.word	0x03d09000

0001c304 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1c304:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c308:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   1c30a:	fbb0 f3f2 	udiv	r3, r0, r2
   1c30e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1c312:	b973      	cbnz	r3, 1c332 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1c314:	4b08      	ldr	r3, [pc, #32]	; (1c338 <nrfx_nvmc_page_erase+0x34>)
   1c316:	2202      	movs	r2, #2
   1c318:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1c31c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c320:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1c324:	07d2      	lsls	r2, r2, #31
   1c326:	d5fb      	bpl.n	1c320 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1c328:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1c32a:	4804      	ldr	r0, [pc, #16]	; (1c33c <nrfx_nvmc_page_erase+0x38>)
   1c32c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1c330:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1c332:	4803      	ldr	r0, [pc, #12]	; (1c340 <nrfx_nvmc_page_erase+0x3c>)
}
   1c334:	4770      	bx	lr
   1c336:	bf00      	nop
   1c338:	4001e000 	.word	0x4001e000
   1c33c:	0bad0000 	.word	0x0bad0000
   1c340:	0bad000a 	.word	0x0bad000a

0001c344 <nrfx_nvmc_word_write>:
   1c344:	4b07      	ldr	r3, [pc, #28]	; (1c364 <nrfx_nvmc_word_write+0x20>)
   1c346:	2201      	movs	r2, #1
   1c348:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c34c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1c350:	07d2      	lsls	r2, r2, #31
   1c352:	d5fb      	bpl.n	1c34c <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   1c354:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1c356:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   1c35a:	2200      	movs	r2, #0
   1c35c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   1c360:	4770      	bx	lr
   1c362:	bf00      	nop
   1c364:	4001e000 	.word	0x4001e000

0001c368 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c368:	4b0e      	ldr	r3, [pc, #56]	; (1c3a4 <z_sys_init_run_level+0x3c>)
{
   1c36a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c36c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1c370:	3001      	adds	r0, #1
   1c372:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1c376:	42a6      	cmp	r6, r4
   1c378:	d800      	bhi.n	1c37c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1c37a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1c37c:	e9d4 3500 	ldrd	r3, r5, [r4]
   1c380:	4628      	mov	r0, r5
   1c382:	4798      	blx	r3
		if (dev != NULL) {
   1c384:	b165      	cbz	r5, 1c3a0 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1c386:	68eb      	ldr	r3, [r5, #12]
   1c388:	b130      	cbz	r0, 1c398 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1c38a:	2800      	cmp	r0, #0
   1c38c:	bfb8      	it	lt
   1c38e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1c390:	28ff      	cmp	r0, #255	; 0xff
   1c392:	bfa8      	it	ge
   1c394:	20ff      	movge	r0, #255	; 0xff
   1c396:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1c398:	785a      	ldrb	r2, [r3, #1]
   1c39a:	f042 0201 	orr.w	r2, r2, #1
   1c39e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c3a0:	3408      	adds	r4, #8
   1c3a2:	e7e8      	b.n	1c376 <z_sys_init_run_level+0xe>
   1c3a4:	00023e9c 	.word	0x00023e9c

0001c3a8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1c3a8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1c3aa:	4605      	mov	r5, r0
   1c3ac:	b910      	cbnz	r0, 1c3b4 <z_impl_device_get_binding+0xc>
		return NULL;
   1c3ae:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1c3b0:	4620      	mov	r0, r4
   1c3b2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1c3b4:	7803      	ldrb	r3, [r0, #0]
   1c3b6:	2b00      	cmp	r3, #0
   1c3b8:	d0f9      	beq.n	1c3ae <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c3ba:	4a0f      	ldr	r2, [pc, #60]	; (1c3f8 <z_impl_device_get_binding+0x50>)
   1c3bc:	4c0f      	ldr	r4, [pc, #60]	; (1c3fc <z_impl_device_get_binding+0x54>)
   1c3be:	4616      	mov	r6, r2
   1c3c0:	4294      	cmp	r4, r2
   1c3c2:	d108      	bne.n	1c3d6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c3c4:	4c0d      	ldr	r4, [pc, #52]	; (1c3fc <z_impl_device_get_binding+0x54>)
   1c3c6:	42b4      	cmp	r4, r6
   1c3c8:	d0f1      	beq.n	1c3ae <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c3ca:	4620      	mov	r0, r4
   1c3cc:	f006 f9c9 	bl	22762 <z_device_ready>
   1c3d0:	b950      	cbnz	r0, 1c3e8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c3d2:	3418      	adds	r4, #24
   1c3d4:	e7f7      	b.n	1c3c6 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1c3d6:	4620      	mov	r0, r4
   1c3d8:	f006 f9c3 	bl	22762 <z_device_ready>
   1c3dc:	b110      	cbz	r0, 1c3e4 <z_impl_device_get_binding+0x3c>
   1c3de:	6823      	ldr	r3, [r4, #0]
   1c3e0:	42ab      	cmp	r3, r5
   1c3e2:	d0e5      	beq.n	1c3b0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c3e4:	3418      	adds	r4, #24
   1c3e6:	e7eb      	b.n	1c3c0 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c3e8:	6821      	ldr	r1, [r4, #0]
   1c3ea:	4628      	mov	r0, r5
   1c3ec:	f003 fef8 	bl	201e0 <strcmp>
   1c3f0:	2800      	cmp	r0, #0
   1c3f2:	d1ee      	bne.n	1c3d2 <z_impl_device_get_binding+0x2a>
   1c3f4:	e7dc      	b.n	1c3b0 <z_impl_device_get_binding+0x8>
   1c3f6:	bf00      	nop
   1c3f8:	200006a4 	.word	0x200006a4
   1c3fc:	2000062c 	.word	0x2000062c

0001c400 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1c400:	4b01      	ldr	r3, [pc, #4]	; (1c408 <z_impl_z_errno+0x8>)
   1c402:	6898      	ldr	r0, [r3, #8]
}
   1c404:	3064      	adds	r0, #100	; 0x64
   1c406:	4770      	bx	lr
   1c408:	20002108 	.word	0x20002108

0001c40c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c40c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c410:	4606      	mov	r6, r0
   1c412:	460f      	mov	r7, r1
	__asm__ volatile(
   1c414:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c418:	f3ef 8811 	mrs	r8, BASEPRI
   1c41c:	f383 8811 	msr	BASEPRI, r3
   1c420:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1c424:	f001 f86c 	bl	1d500 <z_impl_k_current_get>
   1c428:	4c1f      	ldr	r4, [pc, #124]	; (1c4a8 <z_fatal_error+0x9c>)
   1c42a:	4b20      	ldr	r3, [pc, #128]	; (1c4ac <z_fatal_error+0xa0>)
   1c42c:	1ae4      	subs	r4, r4, r3
   1c42e:	2e04      	cmp	r6, #4
   1c430:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1c434:	bf96      	itet	ls
   1c436:	4a1e      	ldrls	r2, [pc, #120]	; (1c4b0 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c438:	4a1e      	ldrhi	r2, [pc, #120]	; (1c4b4 <z_fatal_error+0xa8>)
   1c43a:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1c43e:	01a4      	lsls	r4, r4, #6
   1c440:	f044 0301 	orr.w	r3, r4, #1
   1c444:	4605      	mov	r5, r0
   1c446:	f8ad 3000 	strh.w	r3, [sp]
   1c44a:	481b      	ldr	r0, [pc, #108]	; (1c4b8 <z_fatal_error+0xac>)
   1c44c:	2300      	movs	r3, #0
   1c44e:	4631      	mov	r1, r6
   1c450:	f002 f8d1 	bl	1e5f6 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1c454:	b147      	cbz	r7, 1c468 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1c456:	69fb      	ldr	r3, [r7, #28]
   1c458:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1c45c:	b123      	cbz	r3, 1c468 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1c45e:	4817      	ldr	r0, [pc, #92]	; (1c4bc <z_fatal_error+0xb0>)
   1c460:	f044 0101 	orr.w	r1, r4, #1
   1c464:	f002 f88d 	bl	1e582 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1c468:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1c46c:	b12d      	cbz	r5, 1c47a <z_fatal_error+0x6e>
   1c46e:	4628      	mov	r0, r5
   1c470:	f006 fa39 	bl	228e6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1c474:	b108      	cbz	r0, 1c47a <z_fatal_error+0x6e>
   1c476:	7803      	ldrb	r3, [r0, #0]
   1c478:	b903      	cbnz	r3, 1c47c <z_fatal_error+0x70>
		thread_name = "unknown";
   1c47a:	4811      	ldr	r0, [pc, #68]	; (1c4c0 <z_fatal_error+0xb4>)
   1c47c:	f7f4 fb9c 	bl	10bb8 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1c480:	4623      	mov	r3, r4
   1c482:	4602      	mov	r2, r0
   1c484:	4629      	mov	r1, r5
   1c486:	480f      	ldr	r0, [pc, #60]	; (1c4c4 <z_fatal_error+0xb8>)
   1c488:	f002 f89c 	bl	1e5c4 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1c48c:	4639      	mov	r1, r7
   1c48e:	4630      	mov	r0, r6
   1c490:	f7fe ff2e 	bl	1b2f0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1c494:	f388 8811 	msr	BASEPRI, r8
   1c498:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1c49c:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1c49e:	b002      	add	sp, #8
   1c4a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c4a4:	f7f6 bd00 	b.w	12ea8 <z_impl_k_thread_abort>
   1c4a8:	0002360c 	.word	0x0002360c
   1c4ac:	0002353c 	.word	0x0002353c
   1c4b0:	00023eb4 	.word	0x00023eb4
   1c4b4:	00026204 	.word	0x00026204
   1c4b8:	00026212 	.word	0x00026212
   1c4bc:	0002623a 	.word	0x0002623a
   1c4c0:	00024a6e 	.word	0x00024a6e
   1c4c4:	0002625b 	.word	0x0002625b

0001c4c8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1c4c8:	4802      	ldr	r0, [pc, #8]	; (1c4d4 <z_bss_zero+0xc>)
   1c4ca:	4a03      	ldr	r2, [pc, #12]	; (1c4d8 <z_bss_zero+0x10>)
   1c4cc:	2100      	movs	r1, #0
   1c4ce:	1a12      	subs	r2, r2, r0
   1c4d0:	f003 bedc 	b.w	2028c <memset>
   1c4d4:	200008e0 	.word	0x200008e0
   1c4d8:	20002a28 	.word	0x20002a28

0001c4dc <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1c4dc:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1c4de:	4b0a      	ldr	r3, [pc, #40]	; (1c508 <bg_thread_main+0x2c>)
   1c4e0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c4e2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1c4e4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c4e6:	f7ff ff3f 	bl	1c368 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1c4ea:	f006 fee3 	bl	232b4 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1c4ee:	2003      	movs	r0, #3
   1c4f0:	f7ff ff3a 	bl	1c368 <z_sys_init_run_level>

	z_init_static_threads();
   1c4f4:	f000 f958 	bl	1c7a8 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   1c4f8:	f7f3 fd3e 	bl	ff78 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1c4fc:	4a03      	ldr	r2, [pc, #12]	; (1c50c <bg_thread_main+0x30>)
   1c4fe:	7b13      	ldrb	r3, [r2, #12]
   1c500:	f023 0301 	bic.w	r3, r3, #1
   1c504:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1c506:	bd08      	pop	{r3, pc}
   1c508:	20002a26 	.word	0x20002a26
   1c50c:	20001c48 	.word	0x20001c48

0001c510 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1c510:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1c514:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1c516:	f7f4 fa95 	bl	10a44 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1c51a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 1c61c <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1c51e:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1c522:	4d36      	ldr	r5, [pc, #216]	; (1c5fc <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1c524:	4e36      	ldr	r6, [pc, #216]	; (1c600 <z_cstart+0xf0>)
   1c526:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c528:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1c620 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
   1c52c:	4f35      	ldr	r7, [pc, #212]	; (1c604 <z_cstart+0xf4>)
   1c52e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1c532:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c534:	23e0      	movs	r3, #224	; 0xe0
   1c536:	2400      	movs	r4, #0
   1c538:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1c53c:	2320      	movs	r3, #32
   1c53e:	77eb      	strb	r3, [r5, #31]
   1c540:	762c      	strb	r4, [r5, #24]
   1c542:	766c      	strb	r4, [r5, #25]
   1c544:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1c546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c548:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1c54c:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1c54e:	f7f6 fc47 	bl	12de0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1c552:	f7f6 f961 	bl	12818 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1c556:	f04f 33ff 	mov.w	r3, #4294967295
   1c55a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1c55c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1c55e:	f7f6 fd5f 	bl	13020 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1c562:	4d29      	ldr	r5, [pc, #164]	; (1c608 <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1c564:	f7f6 fcb2 	bl	12ecc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c568:	f240 1301 	movw	r3, #257	; 0x101
   1c56c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1c570:	ab06      	add	r3, sp, #24
   1c572:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   1c574:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1c578:	f006 f8f2 	bl	22760 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1c57c:	4620      	mov	r0, r4
   1c57e:	f7ff fef3 	bl	1c368 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1c582:	2001      	movs	r0, #1
   1c584:	f7ff fef0 	bl	1c368 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c588:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1c58c:	f000 ff38 	bl	1d400 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c590:	4b1e      	ldr	r3, [pc, #120]	; (1c60c <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
   1c592:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c594:	491e      	ldr	r1, [pc, #120]	; (1c610 <z_cstart+0x100>)
   1c596:	9305      	str	r3, [sp, #20]
   1c598:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c59c:	4653      	mov	r3, sl
   1c59e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1c5a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1c5a6:	9400      	str	r4, [sp, #0]
   1c5a8:	4630      	mov	r0, r6
   1c5aa:	f000 f89f 	bl	1c6ec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c5ae:	7b73      	ldrb	r3, [r6, #13]
   1c5b0:	4680      	mov	r8, r0
   1c5b2:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1c5b6:	4630      	mov	r0, r6
   1c5b8:	7373      	strb	r3, [r6, #13]
   1c5ba:	f006 fbec 	bl	22d96 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1c5be:	230f      	movs	r3, #15
   1c5c0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1c5c4:	4913      	ldr	r1, [pc, #76]	; (1c614 <z_cstart+0x104>)
   1c5c6:	4b14      	ldr	r3, [pc, #80]	; (1c618 <z_cstart+0x108>)
   1c5c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1c5cc:	e9cd b404 	strd	fp, r4, [sp, #16]
   1c5d0:	e9cd 5400 	strd	r5, r4, [sp]
   1c5d4:	4638      	mov	r0, r7
   1c5d6:	f000 f889 	bl	1c6ec <z_setup_new_thread>
   1c5da:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1c5dc:	60ef      	str	r7, [r5, #12]
   1c5de:	f023 0304 	bic.w	r3, r3, #4
   1c5e2:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1c5e4:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1c5e8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1c5ec:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1c5ee:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c5f2:	4652      	mov	r2, sl
   1c5f4:	4641      	mov	r1, r8
   1c5f6:	4630      	mov	r0, r6
   1c5f8:	f7f6 f8f8 	bl	127ec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1c5fc:	e000ed00 	.word	0xe000ed00
   1c600:	20001c48 	.word	0x20001c48
   1c604:	20001bc8 	.word	0x20001bc8
   1c608:	20002108 	.word	0x20002108
   1c60c:	000262bd 	.word	0x000262bd
   1c610:	20004920 	.word	0x20004920
   1c614:	20004d40 	.word	0x20004d40
   1c618:	0001c865 	.word	0x0001c865
   1c61c:	200056c0 	.word	0x200056c0
   1c620:	0001c4dd 	.word	0x0001c4dd

0001c624 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1c624:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1c626:	4c06      	ldr	r4, [pc, #24]	; (1c640 <statics_init+0x1c>)
   1c628:	4d06      	ldr	r5, [pc, #24]	; (1c644 <statics_init+0x20>)
   1c62a:	42ac      	cmp	r4, r5
   1c62c:	d301      	bcc.n	1c632 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1c62e:	2000      	movs	r0, #0
   1c630:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1c632:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1c636:	4620      	mov	r0, r4
   1c638:	f006 f89c 	bl	22774 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1c63c:	3414      	adds	r4, #20
   1c63e:	e7f4      	b.n	1c62a <statics_init+0x6>
   1c640:	20000734 	.word	0x20000734
   1c644:	20000734 	.word	0x20000734

0001c648 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1c648:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c64a:	4b0e      	ldr	r3, [pc, #56]	; (1c684 <init_mem_slab_module+0x3c>)
   1c64c:	4c0e      	ldr	r4, [pc, #56]	; (1c688 <init_mem_slab_module+0x40>)
   1c64e:	42a3      	cmp	r3, r4
   1c650:	d301      	bcc.n	1c656 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1c652:	2000      	movs	r0, #0
	return rc;
}
   1c654:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1c656:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1c65a:	ea41 0200 	orr.w	r2, r1, r0
   1c65e:	f012 0203 	ands.w	r2, r2, #3
   1c662:	d10b      	bne.n	1c67c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1c664:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1c666:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c668:	42aa      	cmp	r2, r5
   1c66a:	d101      	bne.n	1c670 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c66c:	331c      	adds	r3, #28
   1c66e:	e7ee      	b.n	1c64e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1c670:	695e      	ldr	r6, [r3, #20]
   1c672:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c674:	3201      	adds	r2, #1
		slab->free_list = p;
   1c676:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1c678:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1c67a:	e7f5      	b.n	1c668 <init_mem_slab_module+0x20>
		return -EINVAL;
   1c67c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1c680:	e7e8      	b.n	1c654 <init_mem_slab_module+0xc>
   1c682:	bf00      	nop
   1c684:	200006e0 	.word	0x200006e0
   1c688:	20000734 	.word	0x20000734

0001c68c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c68c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1c68e:	460c      	mov	r4, r1
   1c690:	4616      	mov	r6, r2
   1c692:	461f      	mov	r7, r3
	__asm__ volatile(
   1c694:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c698:	f3ef 8111 	mrs	r1, BASEPRI
   1c69c:	f383 8811 	msr	BASEPRI, r3
   1c6a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1c6a4:	6943      	ldr	r3, [r0, #20]
   1c6a6:	b15b      	cbz	r3, 1c6c0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1c6a8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1c6aa:	681b      	ldr	r3, [r3, #0]
   1c6ac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1c6ae:	6983      	ldr	r3, [r0, #24]
   1c6b0:	3301      	adds	r3, #1
   1c6b2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1c6b4:	2000      	movs	r0, #0
	__asm__ volatile(
   1c6b6:	f381 8811 	msr	BASEPRI, r1
   1c6ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1c6be:	e011      	b.n	1c6e4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1c6c0:	ea56 0207 	orrs.w	r2, r6, r7
   1c6c4:	d103      	bne.n	1c6ce <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1c6c6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1c6c8:	f06f 000b 	mvn.w	r0, #11
   1c6cc:	e7f3      	b.n	1c6b6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1c6ce:	4602      	mov	r2, r0
   1c6d0:	e9cd 6700 	strd	r6, r7, [sp]
   1c6d4:	3008      	adds	r0, #8
   1c6d6:	f000 fcd5 	bl	1d084 <z_pend_curr>
		if (result == 0) {
   1c6da:	b918      	cbnz	r0, 1c6e4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1c6dc:	4b02      	ldr	r3, [pc, #8]	; (1c6e8 <k_mem_slab_alloc+0x5c>)
   1c6de:	689b      	ldr	r3, [r3, #8]
   1c6e0:	695b      	ldr	r3, [r3, #20]
   1c6e2:	6023      	str	r3, [r4, #0]
}
   1c6e4:	b002      	add	sp, #8
   1c6e6:	bdd0      	pop	{r4, r6, r7, pc}
   1c6e8:	20002108 	.word	0x20002108

0001c6ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1c6ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1c6f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1c6f2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1c6f4:	2604      	movs	r6, #4
   1c6f6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1c6f8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1c6fa:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1c6fc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1c700:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c702:	1dd6      	adds	r6, r2, #7
   1c704:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1c70a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c70c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1c710:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1c712:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1c716:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1c71a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1c71c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1c71e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c720:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c724:	9202      	str	r2, [sp, #8]
   1c726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c728:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1c72a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c72e:	9200      	str	r2, [sp, #0]
   1c730:	4642      	mov	r2, r8
{
   1c732:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c734:	f7f6 f824 	bl	12780 <arch_new_thread>
	if (!_current) {
   1c738:	4b04      	ldr	r3, [pc, #16]	; (1c74c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1c73a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1c73c:	689b      	ldr	r3, [r3, #8]
   1c73e:	b103      	cbz	r3, 1c742 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1c740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1c742:	6763      	str	r3, [r4, #116]	; 0x74
}
   1c744:	4640      	mov	r0, r8
   1c746:	b004      	add	sp, #16
   1c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c74c:	20002108 	.word	0x20002108

0001c750 <z_impl_k_thread_create>:
{
   1c750:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c752:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c754:	2500      	movs	r5, #0
   1c756:	9505      	str	r5, [sp, #20]
   1c758:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1c75a:	9504      	str	r5, [sp, #16]
   1c75c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1c75e:	9503      	str	r5, [sp, #12]
   1c760:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c762:	9502      	str	r5, [sp, #8]
{
   1c764:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c768:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c76a:	9501      	str	r5, [sp, #4]
   1c76c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1c76e:	9500      	str	r5, [sp, #0]
{
   1c770:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c772:	f7ff ffbb 	bl	1c6ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1c776:	1c7b      	adds	r3, r7, #1
   1c778:	bf08      	it	eq
   1c77a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1c77e:	d005      	beq.n	1c78c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c780:	ea56 0307 	orrs.w	r3, r6, r7
   1c784:	d105      	bne.n	1c792 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1c786:	4620      	mov	r0, r4
   1c788:	f000 fdd0 	bl	1d32c <z_sched_start>
}
   1c78c:	4620      	mov	r0, r4
   1c78e:	b007      	add	sp, #28
   1c790:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c792:	4904      	ldr	r1, [pc, #16]	; (1c7a4 <z_impl_k_thread_create+0x54>)
   1c794:	4632      	mov	r2, r6
   1c796:	463b      	mov	r3, r7
   1c798:	f104 0018 	add.w	r0, r4, #24
   1c79c:	f000 ffba 	bl	1d714 <z_add_timeout>
   1c7a0:	e7f4      	b.n	1c78c <z_impl_k_thread_create+0x3c>
   1c7a2:	bf00      	nop
   1c7a4:	00022db7 	.word	0x00022db7

0001c7a8 <z_init_static_threads>:
{
   1c7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1c7ac:	4e2a      	ldr	r6, [pc, #168]	; (1c858 <z_init_static_threads+0xb0>)
   1c7ae:	4d2b      	ldr	r5, [pc, #172]	; (1c85c <z_init_static_threads+0xb4>)
{
   1c7b0:	b086      	sub	sp, #24
   1c7b2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1c7b4:	42b5      	cmp	r5, r6
   1c7b6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1c7ba:	d310      	bcc.n	1c7de <z_init_static_threads+0x36>
	k_sched_lock();
   1c7bc:	f000 fbf0 	bl	1cfa0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c7c0:	4c26      	ldr	r4, [pc, #152]	; (1c85c <z_init_static_threads+0xb4>)
   1c7c2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1c860 <z_init_static_threads+0xb8>
			return (t * to_hz + off) / from_hz;
   1c7c6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1c7ca:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c7ce:	2700      	movs	r7, #0
   1c7d0:	4544      	cmp	r4, r8
   1c7d2:	d321      	bcc.n	1c818 <z_init_static_threads+0x70>
}
   1c7d4:	b006      	add	sp, #24
   1c7d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1c7da:	f000 bcd3 	b.w	1d184 <k_sched_unlock>
		z_setup_new_thread(
   1c7de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c7e2:	9305      	str	r3, [sp, #20]
   1c7e4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c7e8:	9304      	str	r3, [sp, #16]
   1c7ea:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c7ee:	9303      	str	r3, [sp, #12]
   1c7f0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1c7f4:	9302      	str	r3, [sp, #8]
   1c7f6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1c7fa:	9301      	str	r3, [sp, #4]
   1c7fc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1c800:	9300      	str	r3, [sp, #0]
   1c802:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1c806:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1c80a:	f7ff ff6f 	bl	1c6ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1c80e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1c812:	655d      	str	r5, [r3, #84]	; 0x54
   1c814:	4625      	mov	r5, r4
   1c816:	e7cd      	b.n	1c7b4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1c818:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c81a:	1c5a      	adds	r2, r3, #1
   1c81c:	d00d      	beq.n	1c83a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1c81e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c822:	4630      	mov	r0, r6
   1c824:	4639      	mov	r1, r7
   1c826:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c82a:	42b9      	cmp	r1, r7
   1c82c:	bf08      	it	eq
   1c82e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1c830:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c832:	d104      	bne.n	1c83e <z_init_static_threads+0x96>
	z_sched_start(thread);
   1c834:	4628      	mov	r0, r5
   1c836:	f000 fd79 	bl	1d32c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c83a:	3430      	adds	r4, #48	; 0x30
   1c83c:	e7c8      	b.n	1c7d0 <z_init_static_threads+0x28>
   1c83e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c842:	2300      	movs	r3, #0
   1c844:	f7e3 fc4c 	bl	e0 <__aeabi_uldivmod>
   1c848:	4602      	mov	r2, r0
   1c84a:	460b      	mov	r3, r1
   1c84c:	f105 0018 	add.w	r0, r5, #24
   1c850:	4651      	mov	r1, sl
   1c852:	f000 ff5f 	bl	1d714 <z_add_timeout>
   1c856:	e7f0      	b.n	1c83a <z_init_static_threads+0x92>
   1c858:	200006a4 	.word	0x200006a4
   1c85c:	200006a4 	.word	0x200006a4
   1c860:	00022db7 	.word	0x00022db7

0001c864 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1c864:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1c866:	4c09      	ldr	r4, [pc, #36]	; (1c88c <idle+0x28>)
	__asm__ volatile(
   1c868:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c86c:	f3ef 8311 	mrs	r3, BASEPRI
   1c870:	f382 8811 	msr	BASEPRI, r2
   1c874:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1c878:	f006 fb3f 	bl	22efa <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1c87c:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1c87e:	f7f5 fa7f 	bl	11d80 <pm_system_suspend>
   1c882:	2800      	cmp	r0, #0
   1c884:	d1f0      	bne.n	1c868 <idle+0x4>
	arch_cpu_idle();
   1c886:	f7f5 ffcd 	bl	12824 <arch_cpu_idle>
}
   1c88a:	e7ed      	b.n	1c868 <idle+0x4>
   1c88c:	20002108 	.word	0x20002108

0001c890 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1c890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c894:	4604      	mov	r4, r0
   1c896:	4616      	mov	r6, r2
   1c898:	461f      	mov	r7, r3
   1c89a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c89e:	f3ef 8811 	mrs	r8, BASEPRI
   1c8a2:	f383 8811 	msr	BASEPRI, r3
   1c8a6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1c8aa:	68c3      	ldr	r3, [r0, #12]
   1c8ac:	4a32      	ldr	r2, [pc, #200]	; (1c978 <z_impl_k_mutex_lock+0xe8>)
   1c8ae:	b16b      	cbz	r3, 1c8cc <z_impl_k_mutex_lock+0x3c>
   1c8b0:	6880      	ldr	r0, [r0, #8]
   1c8b2:	6891      	ldr	r1, [r2, #8]
   1c8b4:	4288      	cmp	r0, r1
   1c8b6:	d019      	beq.n	1c8ec <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1c8b8:	ea56 0307 	orrs.w	r3, r6, r7
   1c8bc:	d118      	bne.n	1c8f0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1c8be:	f388 8811 	msr	BASEPRI, r8
   1c8c2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1c8c6:	f06f 000f 	mvn.w	r0, #15
   1c8ca:	e00c      	b.n	1c8e6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1c8cc:	6891      	ldr	r1, [r2, #8]
   1c8ce:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1c8d2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1c8d4:	3301      	adds	r3, #1
   1c8d6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1c8d8:	6893      	ldr	r3, [r2, #8]
   1c8da:	60a3      	str	r3, [r4, #8]
   1c8dc:	f388 8811 	msr	BASEPRI, r8
   1c8e0:	f3bf 8f6f 	isb	sy
		return 0;
   1c8e4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1c8e6:	b002      	add	sp, #8
   1c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1c8ec:	6921      	ldr	r1, [r4, #16]
   1c8ee:	e7f0      	b.n	1c8d2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1c8f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c8f4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1c8f8:	4299      	cmp	r1, r3
   1c8fa:	bfa8      	it	ge
   1c8fc:	4619      	movge	r1, r3
   1c8fe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1c902:	428b      	cmp	r3, r1
   1c904:	dd2c      	ble.n	1c960 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1c906:	f000 fd2f 	bl	1d368 <z_set_prio>
   1c90a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1c90c:	e9cd 6700 	strd	r6, r7, [sp]
   1c910:	481a      	ldr	r0, [pc, #104]	; (1c97c <z_impl_k_mutex_lock+0xec>)
   1c912:	4622      	mov	r2, r4
   1c914:	4641      	mov	r1, r8
   1c916:	f000 fbb5 	bl	1d084 <z_pend_curr>
	if (got_mutex == 0) {
   1c91a:	2800      	cmp	r0, #0
   1c91c:	d0e3      	beq.n	1c8e6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1c91e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c922:	f3ef 8611 	mrs	r6, BASEPRI
   1c926:	f383 8811 	msr	BASEPRI, r3
   1c92a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1c92e:	6823      	ldr	r3, [r4, #0]
   1c930:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c932:	429c      	cmp	r4, r3
   1c934:	d007      	beq.n	1c946 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1c936:	b133      	cbz	r3, 1c946 <z_impl_k_mutex_lock+0xb6>
   1c938:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1c93c:	4299      	cmp	r1, r3
   1c93e:	bfa8      	it	ge
   1c940:	4619      	movge	r1, r3
   1c942:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c946:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c948:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c94c:	4299      	cmp	r1, r3
   1c94e:	d109      	bne.n	1c964 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1c950:	b16d      	cbz	r5, 1c96e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1c952:	480a      	ldr	r0, [pc, #40]	; (1c97c <z_impl_k_mutex_lock+0xec>)
   1c954:	4631      	mov	r1, r6
   1c956:	f000 fb11 	bl	1cf7c <z_reschedule>
	return -EAGAIN;
   1c95a:	f06f 000a 	mvn.w	r0, #10
   1c95e:	e7c2      	b.n	1c8e6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1c960:	2500      	movs	r5, #0
   1c962:	e7d3      	b.n	1c90c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1c964:	f000 fd00 	bl	1d368 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c968:	2800      	cmp	r0, #0
   1c96a:	d1f2      	bne.n	1c952 <z_impl_k_mutex_lock+0xc2>
   1c96c:	e7f0      	b.n	1c950 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1c96e:	f386 8811 	msr	BASEPRI, r6
   1c972:	f3bf 8f6f 	isb	sy
   1c976:	e7f0      	b.n	1c95a <z_impl_k_mutex_lock+0xca>
   1c978:	20002108 	.word	0x20002108
   1c97c:	20002a27 	.word	0x20002a27

0001c980 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1c980:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1c982:	6883      	ldr	r3, [r0, #8]
{
   1c984:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1c986:	2b00      	cmp	r3, #0
   1c988:	d036      	beq.n	1c9f8 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1c98a:	4a1e      	ldr	r2, [pc, #120]	; (1ca04 <z_impl_k_mutex_unlock+0x84>)
   1c98c:	6892      	ldr	r2, [r2, #8]
   1c98e:	4293      	cmp	r3, r2
   1c990:	d135      	bne.n	1c9fe <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1c992:	7bda      	ldrb	r2, [r3, #15]
   1c994:	3a01      	subs	r2, #1
   1c996:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1c998:	68c3      	ldr	r3, [r0, #12]
   1c99a:	2b01      	cmp	r3, #1
   1c99c:	d005      	beq.n	1c9aa <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1c99e:	3b01      	subs	r3, #1
   1c9a0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1c9a2:	f000 fbef 	bl	1d184 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1c9a6:	2000      	movs	r0, #0
}
   1c9a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c9aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c9ae:	f3ef 8511 	mrs	r5, BASEPRI
   1c9b2:	f383 8811 	msr	BASEPRI, r3
   1c9b6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1c9ba:	6901      	ldr	r1, [r0, #16]
   1c9bc:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c9be:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c9c2:	4299      	cmp	r1, r3
   1c9c4:	d001      	beq.n	1c9ca <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1c9c6:	f000 fccf 	bl	1d368 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1c9ca:	4620      	mov	r0, r4
   1c9cc:	f006 fa2a 	bl	22e24 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1c9d0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1c9d2:	b158      	cbz	r0, 1c9ec <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1c9d4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1c9d8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1c9da:	2200      	movs	r2, #0
   1c9dc:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1c9de:	f006 f9da 	bl	22d96 <z_ready_thread>
		z_reschedule(&lock, key);
   1c9e2:	4809      	ldr	r0, [pc, #36]	; (1ca08 <z_impl_k_mutex_unlock+0x88>)
   1c9e4:	4629      	mov	r1, r5
   1c9e6:	f000 fac9 	bl	1cf7c <z_reschedule>
   1c9ea:	e7da      	b.n	1c9a2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1c9ec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1c9ee:	f385 8811 	msr	BASEPRI, r5
   1c9f2:	f3bf 8f6f 	isb	sy
   1c9f6:	e7d4      	b.n	1c9a2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1c9f8:	f06f 0015 	mvn.w	r0, #21
   1c9fc:	e7d4      	b.n	1c9a8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1c9fe:	f04f 30ff 	mov.w	r0, #4294967295
   1ca02:	e7d1      	b.n	1c9a8 <z_impl_k_mutex_unlock+0x28>
   1ca04:	20002108 	.word	0x20002108
   1ca08:	20002a27 	.word	0x20002a27

0001ca0c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1ca0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ca0e:	4616      	mov	r6, r2
   1ca10:	461f      	mov	r7, r3
	__asm__ volatile(
   1ca12:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca16:	f3ef 8511 	mrs	r5, BASEPRI
   1ca1a:	f383 8811 	msr	BASEPRI, r3
   1ca1e:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1ca22:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1ca24:	b19c      	cbz	r4, 1ca4e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ca26:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ca28:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ca2a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ca2e:	4294      	cmp	r4, r2
	list->head = node;
   1ca30:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1ca32:	bf08      	it	eq
   1ca34:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ca36:	2101      	movs	r1, #1
   1ca38:	4620      	mov	r0, r4
   1ca3a:	f005 ffca 	bl	229d2 <z_queue_node_peek>
   1ca3e:	4604      	mov	r4, r0
	__asm__ volatile(
   1ca40:	f385 8811 	msr	BASEPRI, r5
   1ca44:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1ca48:	4620      	mov	r0, r4
   1ca4a:	b003      	add	sp, #12
   1ca4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ca4e:	ea56 0307 	orrs.w	r3, r6, r7
   1ca52:	d0f5      	beq.n	1ca40 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ca54:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1ca58:	e9cd 6700 	strd	r6, r7, [sp]
   1ca5c:	4629      	mov	r1, r5
   1ca5e:	4610      	mov	r0, r2
   1ca60:	f000 fb10 	bl	1d084 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1ca64:	2800      	cmp	r0, #0
   1ca66:	d1ef      	bne.n	1ca48 <z_impl_k_queue_get+0x3c>
   1ca68:	4b01      	ldr	r3, [pc, #4]	; (1ca70 <z_impl_k_queue_get+0x64>)
   1ca6a:	689b      	ldr	r3, [r3, #8]
   1ca6c:	695c      	ldr	r4, [r3, #20]
   1ca6e:	e7eb      	b.n	1ca48 <z_impl_k_queue_get+0x3c>
   1ca70:	20002108 	.word	0x20002108

0001ca74 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ca74:	b538      	push	{r3, r4, r5, lr}
   1ca76:	4604      	mov	r4, r0
	__asm__ volatile(
   1ca78:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca7c:	f3ef 8511 	mrs	r5, BASEPRI
   1ca80:	f383 8811 	msr	BASEPRI, r3
   1ca84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1ca88:	f006 f9cc 	bl	22e24 <z_unpend_first_thread>

	if (thread != NULL) {
   1ca8c:	b148      	cbz	r0, 1caa2 <z_impl_k_sem_give+0x2e>
   1ca8e:	2200      	movs	r2, #0
   1ca90:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1ca92:	f006 f980 	bl	22d96 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1ca96:	4629      	mov	r1, r5
   1ca98:	4808      	ldr	r0, [pc, #32]	; (1cabc <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1ca9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1ca9e:	f000 ba6d 	b.w	1cf7c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1caa2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1caa6:	429a      	cmp	r2, r3
   1caa8:	bf18      	it	ne
   1caaa:	3301      	addne	r3, #1
   1caac:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1caae:	2102      	movs	r1, #2
   1cab0:	f104 0010 	add.w	r0, r4, #16
   1cab4:	f006 fbe9 	bl	2328a <z_handle_obj_poll_events>
}
   1cab8:	e7ed      	b.n	1ca96 <z_impl_k_sem_give+0x22>
   1caba:	bf00      	nop
   1cabc:	20002a27 	.word	0x20002a27

0001cac0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1cac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cac2:	4614      	mov	r4, r2
   1cac4:	461d      	mov	r5, r3
   1cac6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1caca:	f3ef 8111 	mrs	r1, BASEPRI
   1cace:	f383 8811 	msr	BASEPRI, r3
   1cad2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1cad6:	6883      	ldr	r3, [r0, #8]
   1cad8:	b143      	cbz	r3, 1caec <z_impl_k_sem_take+0x2c>
		sem->count--;
   1cada:	3b01      	subs	r3, #1
   1cadc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1cade:	f381 8811 	msr	BASEPRI, r1
   1cae2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1cae6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1cae8:	b003      	add	sp, #12
   1caea:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1caec:	ea54 0305 	orrs.w	r3, r4, r5
   1caf0:	d106      	bne.n	1cb00 <z_impl_k_sem_take+0x40>
   1caf2:	f381 8811 	msr	BASEPRI, r1
   1caf6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1cafa:	f06f 000f 	mvn.w	r0, #15
   1cafe:	e7f3      	b.n	1cae8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1cb00:	4602      	mov	r2, r0
   1cb02:	e9cd 4500 	strd	r4, r5, [sp]
   1cb06:	4802      	ldr	r0, [pc, #8]	; (1cb10 <z_impl_k_sem_take+0x50>)
   1cb08:	f000 fabc 	bl	1d084 <z_pend_curr>
	return ret;
   1cb0c:	e7ec      	b.n	1cae8 <z_impl_k_sem_take+0x28>
   1cb0e:	bf00      	nop
   1cb10:	20002a27 	.word	0x20002a27

0001cb14 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   1cb14:	b570      	push	{r4, r5, r6, lr}
   1cb16:	4604      	mov	r4, r0
	__asm__ volatile(
   1cb18:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb1c:	f3ef 8511 	mrs	r5, BASEPRI
   1cb20:	f383 8811 	msr	BASEPRI, r3
   1cb24:	f3bf 8f6f 	isb	sy
   1cb28:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   1cb2c:	4620      	mov	r0, r4
   1cb2e:	f006 f979 	bl	22e24 <z_unpend_first_thread>
		if (thread == NULL) {
   1cb32:	b118      	cbz	r0, 1cb3c <z_impl_k_sem_reset+0x28>
   1cb34:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   1cb36:	f006 f92e 	bl	22d96 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   1cb3a:	e7f7      	b.n	1cb2c <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   1cb3c:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1cb3e:	2102      	movs	r1, #2
   1cb40:	f104 0010 	add.w	r0, r4, #16
   1cb44:	f006 fba1 	bl	2328a <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   1cb48:	4629      	mov	r1, r5
   1cb4a:	4802      	ldr	r0, [pc, #8]	; (1cb54 <z_impl_k_sem_reset+0x40>)
}
   1cb4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1cb50:	f000 ba14 	b.w	1cf7c <z_reschedule>
   1cb54:	20002a27 	.word	0x20002a27

0001cb58 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1cb58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1cb5a:	4b09      	ldr	r3, [pc, #36]	; (1cb80 <k_sys_work_q_init+0x28>)
   1cb5c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1cb5e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1cb60:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1cb62:	9300      	str	r3, [sp, #0]
   1cb64:	4907      	ldr	r1, [pc, #28]	; (1cb84 <k_sys_work_q_init+0x2c>)
   1cb66:	4808      	ldr	r0, [pc, #32]	; (1cb88 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1cb68:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1cb6c:	f04f 33ff 	mov.w	r3, #4294967295
   1cb70:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1cb74:	f000 f91c 	bl	1cdb0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1cb78:	4620      	mov	r0, r4
   1cb7a:	b004      	add	sp, #16
   1cb7c:	bd10      	pop	{r4, pc}
   1cb7e:	bf00      	nop
   1cb80:	000262c5 	.word	0x000262c5
   1cb84:	200056c0 	.word	0x200056c0
   1cb88:	20001cc8 	.word	0x20001cc8

0001cb8c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1cb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1cb90:	4e4b      	ldr	r6, [pc, #300]	; (1ccc0 <work_queue_main+0x134>)
{
   1cb92:	b085      	sub	sp, #20
   1cb94:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1cb96:	f04f 38ff 	mov.w	r8, #4294967295
   1cb9a:	f04f 39ff 	mov.w	r9, #4294967295
   1cb9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cba2:	f3ef 8711 	mrs	r7, BASEPRI
   1cba6:	f383 8811 	msr	BASEPRI, r3
   1cbaa:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1cbae:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1cbb2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1cbb6:	b985      	cbnz	r5, 1cbda <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   1cbb8:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1cbbc:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1cbbe:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1cbc2:	d433      	bmi.n	1cc2c <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1cbc4:	2300      	movs	r3, #0
   1cbc6:	e9cd 8900 	strd	r8, r9, [sp]
   1cbca:	9302      	str	r3, [sp, #8]
   1cbcc:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1cbd0:	4639      	mov	r1, r7
   1cbd2:	483c      	ldr	r0, [pc, #240]	; (1ccc4 <work_queue_main+0x138>)
   1cbd4:	f000 fcfc 	bl	1d5d0 <z_sched_wait>
			continue;
   1cbd8:	e7e1      	b.n	1cb9e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cbda:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1cbde:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1cbe0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cbe4:	4295      	cmp	r5, r2
   1cbe6:	d101      	bne.n	1cbec <work_queue_main+0x60>
	list->tail = node;
   1cbe8:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1cbec:	f043 0302 	orr.w	r3, r3, #2
   1cbf0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1cbf4:	68eb      	ldr	r3, [r5, #12]
   1cbf6:	f023 0304 	bic.w	r3, r3, #4
   1cbfa:	f043 0301 	orr.w	r3, r3, #1
   1cbfe:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1cc00:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1cc02:	f387 8811 	msr	BASEPRI, r7
   1cc06:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1cc0a:	4628      	mov	r0, r5
   1cc0c:	4798      	blx	r3
	__asm__ volatile(
   1cc0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc12:	f3ef 8b11 	mrs	fp, BASEPRI
   1cc16:	f383 8811 	msr	BASEPRI, r3
   1cc1a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1cc1e:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1cc20:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1cc22:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1cc26:	d40b      	bmi.n	1cc40 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1cc28:	60ea      	str	r2, [r5, #12]
   1cc2a:	e00e      	b.n	1cc4a <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1cc2c:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1cc30:	2200      	movs	r2, #0
   1cc32:	2101      	movs	r1, #1
   1cc34:	4628      	mov	r0, r5
   1cc36:	f006 f91d 	bl	22e74 <z_sched_wake>
   1cc3a:	2800      	cmp	r0, #0
   1cc3c:	d1f8      	bne.n	1cc30 <work_queue_main+0xa4>
   1cc3e:	e7c1      	b.n	1cbc4 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1cc40:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1cc42:	f023 0303 	bic.w	r3, r3, #3
   1cc46:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1cc48:	b970      	cbnz	r0, 1cc68 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1cc4a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1cc4e:	f023 0302 	bic.w	r3, r3, #2
   1cc52:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1cc56:	f38b 8811 	msr	BASEPRI, fp
   1cc5a:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1cc5e:	05d8      	lsls	r0, r3, #23
   1cc60:	d49d      	bmi.n	1cb9e <work_queue_main+0x12>
	z_impl_k_yield();
   1cc62:	f000 fbd9 	bl	1d418 <z_impl_k_yield>
}
   1cc66:	e79a      	b.n	1cb9e <work_queue_main+0x12>
	return node->next;
   1cc68:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cc6a:	f04f 0a00 	mov.w	sl, #0
   1cc6e:	2f00      	cmp	r7, #0
   1cc70:	bf38      	it	cc
   1cc72:	2700      	movcc	r7, #0
	parent->next = child;
   1cc74:	4653      	mov	r3, sl
		if (wc->work == work) {
   1cc76:	6842      	ldr	r2, [r0, #4]
   1cc78:	4295      	cmp	r5, r2
   1cc7a:	4601      	mov	r1, r0
   1cc7c:	d10e      	bne.n	1cc9c <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1cc7e:	6801      	ldr	r1, [r0, #0]
   1cc80:	f1ba 0f00 	cmp.w	sl, #0
   1cc84:	d114      	bne.n	1ccb0 <work_queue_main+0x124>
   1cc86:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1cc88:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc8a:	4290      	cmp	r0, r2
   1cc8c:	d100      	bne.n	1cc90 <work_queue_main+0x104>
	list->tail = node;
   1cc8e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1cc90:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1cc94:	f7ff feee 	bl	1ca74 <z_impl_k_sem_give>
}
   1cc98:	4651      	mov	r1, sl
   1cc9a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1cc9c:	2f00      	cmp	r7, #0
   1cc9e:	d0d4      	beq.n	1cc4a <work_queue_main+0xbe>
	return node->next;
   1cca0:	683a      	ldr	r2, [r7, #0]
   1cca2:	2a00      	cmp	r2, #0
   1cca4:	bf38      	it	cc
   1cca6:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cca8:	4638      	mov	r0, r7
   1ccaa:	468a      	mov	sl, r1
   1ccac:	4617      	mov	r7, r2
   1ccae:	e7e2      	b.n	1cc76 <work_queue_main+0xea>
	parent->next = child;
   1ccb0:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   1ccb4:	6872      	ldr	r2, [r6, #4]
   1ccb6:	4290      	cmp	r0, r2
	list->tail = node;
   1ccb8:	bf08      	it	eq
   1ccba:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1ccbe:	e7e7      	b.n	1cc90 <work_queue_main+0x104>
   1ccc0:	20002138 	.word	0x20002138
   1ccc4:	20002a27 	.word	0x20002a27

0001ccc8 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1ccc8:	68c3      	ldr	r3, [r0, #12]
{
   1ccca:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1cccc:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1ccd0:	079b      	lsls	r3, r3, #30
{
   1ccd2:	4605      	mov	r5, r0
   1ccd4:	460c      	mov	r4, r1
	if (ret) {
   1ccd6:	d50d      	bpl.n	1ccf4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ccd8:	2201      	movs	r2, #1
   1ccda:	2100      	movs	r1, #0
   1ccdc:	f104 0008 	add.w	r0, r4, #8
   1cce0:	f005 fee0 	bl	22aa4 <z_impl_k_sem_init>
	parent->next = child;
   1cce4:	2300      	movs	r3, #0
   1cce6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1cce8:	4b05      	ldr	r3, [pc, #20]	; (1cd00 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1ccea:	6065      	str	r5, [r4, #4]
   1ccec:	685a      	ldr	r2, [r3, #4]
   1ccee:	b91a      	cbnz	r2, 1ccf8 <cancel_sync_locked+0x30>
	list->head = node;
   1ccf0:	e9c3 4400 	strd	r4, r4, [r3]
}
   1ccf4:	4630      	mov	r0, r6
   1ccf6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1ccf8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1ccfa:	605c      	str	r4, [r3, #4]
}
   1ccfc:	e7fa      	b.n	1ccf4 <cancel_sync_locked+0x2c>
   1ccfe:	bf00      	nop
   1cd00:	20002138 	.word	0x20002138

0001cd04 <submit_to_queue_locked>:
{
   1cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1cd06:	68c3      	ldr	r3, [r0, #12]
   1cd08:	079a      	lsls	r2, r3, #30
{
   1cd0a:	4604      	mov	r4, r0
   1cd0c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1cd0e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1cd12:	d41f      	bmi.n	1cd54 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1cd14:	075f      	lsls	r7, r3, #29
   1cd16:	d41f      	bmi.n	1cd58 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1cd18:	680a      	ldr	r2, [r1, #0]
   1cd1a:	b90a      	cbnz	r2, 1cd20 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1cd1c:	6882      	ldr	r2, [r0, #8]
   1cd1e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1cd20:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1cd22:	bf44      	itt	mi
   1cd24:	68a3      	ldrmi	r3, [r4, #8]
   1cd26:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1cd28:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1cd2a:	bf4c      	ite	mi
   1cd2c:	2502      	movmi	r5, #2
		ret = 1;
   1cd2e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1cd30:	b37f      	cbz	r7, 1cd92 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1cd32:	4b1b      	ldr	r3, [pc, #108]	; (1cda0 <submit_to_queue_locked+0x9c>)
   1cd34:	689b      	ldr	r3, [r3, #8]
   1cd36:	42bb      	cmp	r3, r7
   1cd38:	d111      	bne.n	1cd5e <submit_to_queue_locked+0x5a>
   1cd3a:	f005 fdcb 	bl	228d4 <k_is_in_isr>
   1cd3e:	f080 0001 	eor.w	r0, r0, #1
   1cd42:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1cd44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1cd48:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1cd4a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1cd4e:	d523      	bpl.n	1cd98 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1cd50:	b13a      	cbz	r2, 1cd62 <submit_to_queue_locked+0x5e>
   1cd52:	b940      	cbnz	r0, 1cd66 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1cd54:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1cd58:	2300      	movs	r3, #0
   1cd5a:	6033      	str	r3, [r6, #0]
	return ret;
   1cd5c:	e013      	b.n	1cd86 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1cd5e:	2000      	movs	r0, #0
   1cd60:	e7f0      	b.n	1cd44 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1cd62:	071b      	lsls	r3, r3, #28
   1cd64:	d4f6      	bmi.n	1cd54 <submit_to_queue_locked+0x50>
	parent->next = child;
   1cd66:	2300      	movs	r3, #0
   1cd68:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1cd6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1cd6e:	b963      	cbnz	r3, 1cd8a <submit_to_queue_locked+0x86>
	list->head = node;
   1cd70:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1cd74:	4638      	mov	r0, r7
   1cd76:	f005 fea5 	bl	22ac4 <notify_queue_locked>
	*flagp |= BIT(bit);
   1cd7a:	68e3      	ldr	r3, [r4, #12]
   1cd7c:	f043 0304 	orr.w	r3, r3, #4
   1cd80:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1cd82:	6833      	ldr	r3, [r6, #0]
   1cd84:	60a3      	str	r3, [r4, #8]
}
   1cd86:	4628      	mov	r0, r5
   1cd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1cd8a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cd8c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1cd90:	e7f0      	b.n	1cd74 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1cd92:	f06f 0515 	mvn.w	r5, #21
   1cd96:	e7df      	b.n	1cd58 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1cd98:	f06f 0512 	mvn.w	r5, #18
   1cd9c:	e7dc      	b.n	1cd58 <submit_to_queue_locked+0x54>
   1cd9e:	bf00      	nop
   1cda0:	20002108 	.word	0x20002108

0001cda4 <k_work_submit>:
{
   1cda4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1cda6:	4801      	ldr	r0, [pc, #4]	; (1cdac <k_work_submit+0x8>)
   1cda8:	f005 befc 	b.w	22ba4 <k_work_submit_to_queue>
   1cdac:	20001cc8 	.word	0x20001cc8

0001cdb0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdb2:	b089      	sub	sp, #36	; 0x24
   1cdb4:	4604      	mov	r4, r0
	list->head = NULL;
   1cdb6:	2000      	movs	r0, #0
	list->tail = NULL;
   1cdb8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1cdbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1cdbe:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1cdc2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1cdc6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1cdca:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1cdce:	b31d      	cbz	r5, 1ce18 <k_work_queue_start+0x68>
   1cdd0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1cdd2:	2800      	cmp	r0, #0
   1cdd4:	f240 1001 	movw	r0, #257	; 0x101
   1cdd8:	bf08      	it	eq
   1cdda:	2001      	moveq	r0, #1
	*flagp = flags;
   1cddc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1cde0:	2000      	movs	r0, #0
   1cde2:	f04f 36ff 	mov.w	r6, #4294967295
   1cde6:	f04f 37ff 	mov.w	r7, #4294967295
   1cdea:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1cdee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1cdf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1cdf6:	4b09      	ldr	r3, [pc, #36]	; (1ce1c <k_work_queue_start+0x6c>)
   1cdf8:	9400      	str	r4, [sp, #0]
   1cdfa:	4620      	mov	r0, r4
   1cdfc:	f7ff fca8 	bl	1c750 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1ce00:	b125      	cbz	r5, 1ce0c <k_work_queue_start+0x5c>
   1ce02:	6829      	ldr	r1, [r5, #0]
   1ce04:	b111      	cbz	r1, 1ce0c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1ce06:	4620      	mov	r0, r4
   1ce08:	f005 fd6a 	bl	228e0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1ce0c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1ce0e:	b009      	add	sp, #36	; 0x24
   1ce10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ce14:	f005 bd69 	b.w	228ea <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1ce18:	2001      	movs	r0, #1
   1ce1a:	e7df      	b.n	1cddc <k_work_queue_start+0x2c>
   1ce1c:	0001cb8d 	.word	0x0001cb8d

0001ce20 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1ce20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ce22:	4614      	mov	r4, r2
   1ce24:	9001      	str	r0, [sp, #4]
   1ce26:	461d      	mov	r5, r3
   1ce28:	4608      	mov	r0, r1
	__asm__ volatile(
   1ce2a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1ce2e:	f3ef 8611 	mrs	r6, BASEPRI
   1ce32:	f381 8811 	msr	BASEPRI, r1
   1ce36:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1ce3a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1ce3c:	f011 0f0e 	tst.w	r1, #14
   1ce40:	d115      	bne.n	1ce6e <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ce42:	432c      	orrs	r4, r5
   1ce44:	d108      	bne.n	1ce58 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   1ce46:	a901      	add	r1, sp, #4
   1ce48:	f7ff ff5c 	bl	1cd04 <submit_to_queue_locked>
	__asm__ volatile(
   1ce4c:	f386 8811 	msr	BASEPRI, r6
   1ce50:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1ce54:	b002      	add	sp, #8
   1ce56:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   1ce58:	f041 0108 	orr.w	r1, r1, #8
   1ce5c:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1ce5e:	9901      	ldr	r1, [sp, #4]
   1ce60:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1ce62:	3010      	adds	r0, #16
   1ce64:	4903      	ldr	r1, [pc, #12]	; (1ce74 <k_work_schedule_for_queue+0x54>)
   1ce66:	f000 fc55 	bl	1d714 <z_add_timeout>
	return ret;
   1ce6a:	2001      	movs	r0, #1
   1ce6c:	e7ee      	b.n	1ce4c <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1ce6e:	2000      	movs	r0, #0
   1ce70:	e7ec      	b.n	1ce4c <k_work_schedule_for_queue+0x2c>
   1ce72:	bf00      	nop
   1ce74:	00022b55 	.word	0x00022b55

0001ce78 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1ce78:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1ce7a:	4801      	ldr	r0, [pc, #4]	; (1ce80 <k_work_schedule+0x8>)
   1ce7c:	f7ff bfd0 	b.w	1ce20 <k_work_schedule_for_queue>
   1ce80:	20001cc8 	.word	0x20001cc8

0001ce84 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1ce84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ce86:	460c      	mov	r4, r1
   1ce88:	9001      	str	r0, [sp, #4]
   1ce8a:	4616      	mov	r6, r2
   1ce8c:	461f      	mov	r7, r3
	__asm__ volatile(
   1ce8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce92:	f3ef 8511 	mrs	r5, BASEPRI
   1ce96:	f383 8811 	msr	BASEPRI, r3
   1ce9a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1ce9e:	4608      	mov	r0, r1
   1cea0:	f005 fe17 	bl	22ad2 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cea4:	ea56 0307 	orrs.w	r3, r6, r7
   1cea8:	d109      	bne.n	1cebe <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1ceaa:	a901      	add	r1, sp, #4
   1ceac:	4620      	mov	r0, r4
   1ceae:	f7ff ff29 	bl	1cd04 <submit_to_queue_locked>
	__asm__ volatile(
   1ceb2:	f385 8811 	msr	BASEPRI, r5
   1ceb6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1ceba:	b003      	add	sp, #12
   1cebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1cebe:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1cec0:	4906      	ldr	r1, [pc, #24]	; (1cedc <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1cec2:	f043 0308 	orr.w	r3, r3, #8
   1cec6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1cec8:	9b01      	ldr	r3, [sp, #4]
   1ceca:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1cecc:	f104 0010 	add.w	r0, r4, #16
   1ced0:	4632      	mov	r2, r6
   1ced2:	463b      	mov	r3, r7
   1ced4:	f000 fc1e 	bl	1d714 <z_add_timeout>
	return ret;
   1ced8:	2001      	movs	r0, #1
   1ceda:	e7ea      	b.n	1ceb2 <k_work_reschedule_for_queue+0x2e>
   1cedc:	00022b55 	.word	0x00022b55

0001cee0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1cee0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1cee2:	4801      	ldr	r0, [pc, #4]	; (1cee8 <k_work_reschedule+0x8>)
   1cee4:	f7ff bfce 	b.w	1ce84 <k_work_reschedule_for_queue>
   1cee8:	20001cc8 	.word	0x20001cc8

0001ceec <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1ceec:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1ceee:	4c08      	ldr	r4, [pc, #32]	; (1cf10 <z_reset_time_slice+0x24>)
   1cef0:	6823      	ldr	r3, [r4, #0]
   1cef2:	b15b      	cbz	r3, 1cf0c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1cef4:	f7f5 f9dc 	bl	122b0 <sys_clock_elapsed>
   1cef8:	4603      	mov	r3, r0
   1cefa:	6820      	ldr	r0, [r4, #0]
   1cefc:	4a05      	ldr	r2, [pc, #20]	; (1cf14 <z_reset_time_slice+0x28>)
   1cefe:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1cf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1cf04:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1cf06:	2100      	movs	r1, #0
   1cf08:	f006 b807 	b.w	22f1a <z_set_timeout_expiry>
}
   1cf0c:	bd10      	pop	{r4, pc}
   1cf0e:	bf00      	nop
   1cf10:	20002148 	.word	0x20002148
   1cf14:	20002108 	.word	0x20002108

0001cf18 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf1a:	4604      	mov	r4, r0
   1cf1c:	460d      	mov	r5, r1
	__asm__ volatile(
   1cf1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf22:	f3ef 8611 	mrs	r6, BASEPRI
   1cf26:	f383 8811 	msr	BASEPRI, r3
   1cf2a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1cf2e:	4b10      	ldr	r3, [pc, #64]	; (1cf70 <k_sched_time_slice_set+0x58>)
   1cf30:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1cf32:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1cf36:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cf3a:	2100      	movs	r1, #0
   1cf3c:	611a      	str	r2, [r3, #16]
   1cf3e:	fbe7 0104 	umlal	r0, r1, r7, r4
   1cf42:	2300      	movs	r3, #0
   1cf44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cf48:	f7e3 f8ca 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1cf4c:	2c00      	cmp	r4, #0
   1cf4e:	4b09      	ldr	r3, [pc, #36]	; (1cf74 <k_sched_time_slice_set+0x5c>)
   1cf50:	dc09      	bgt.n	1cf66 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1cf52:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1cf54:	4b08      	ldr	r3, [pc, #32]	; (1cf78 <k_sched_time_slice_set+0x60>)
   1cf56:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1cf58:	f7ff ffc8 	bl	1ceec <z_reset_time_slice>
	__asm__ volatile(
   1cf5c:	f386 8811 	msr	BASEPRI, r6
   1cf60:	f3bf 8f6f 	isb	sy
	}
}
   1cf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1cf66:	2802      	cmp	r0, #2
   1cf68:	bfb8      	it	lt
   1cf6a:	2002      	movlt	r0, #2
   1cf6c:	e7f1      	b.n	1cf52 <k_sched_time_slice_set+0x3a>
   1cf6e:	bf00      	nop
   1cf70:	20002108 	.word	0x20002108
   1cf74:	20002148 	.word	0x20002148
   1cf78:	20002144 	.word	0x20002144

0001cf7c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1cf7c:	b949      	cbnz	r1, 1cf92 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1cf7e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1cf82:	b930      	cbnz	r0, 1cf92 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1cf84:	4b05      	ldr	r3, [pc, #20]	; (1cf9c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1cf86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1cf88:	689b      	ldr	r3, [r3, #8]
   1cf8a:	429a      	cmp	r2, r3
   1cf8c:	d001      	beq.n	1cf92 <z_reschedule+0x16>
	ret = arch_swap(key);
   1cf8e:	f7f5 bb49 	b.w	12624 <arch_swap>
   1cf92:	f381 8811 	msr	BASEPRI, r1
   1cf96:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1cf9a:	4770      	bx	lr
   1cf9c:	20002108 	.word	0x20002108

0001cfa0 <k_sched_lock>:
	__asm__ volatile(
   1cfa0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cfa4:	f3ef 8111 	mrs	r1, BASEPRI
   1cfa8:	f383 8811 	msr	BASEPRI, r3
   1cfac:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1cfb0:	4b04      	ldr	r3, [pc, #16]	; (1cfc4 <k_sched_lock+0x24>)
   1cfb2:	689a      	ldr	r2, [r3, #8]
   1cfb4:	7bd3      	ldrb	r3, [r2, #15]
   1cfb6:	3b01      	subs	r3, #1
   1cfb8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1cfba:	f381 8811 	msr	BASEPRI, r1
   1cfbe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1cfc2:	4770      	bx	lr
   1cfc4:	20002108 	.word	0x20002108

0001cfc8 <update_cache>:
{
   1cfc8:	b538      	push	{r3, r4, r5, lr}
   1cfca:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1cfcc:	480c      	ldr	r0, [pc, #48]	; (1d000 <update_cache+0x38>)
   1cfce:	4d0d      	ldr	r5, [pc, #52]	; (1d004 <update_cache+0x3c>)
   1cfd0:	f005 feaa 	bl	22d28 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1cfd4:	4604      	mov	r4, r0
   1cfd6:	b900      	cbnz	r0, 1cfda <update_cache+0x12>
   1cfd8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1cfda:	68ab      	ldr	r3, [r5, #8]
   1cfdc:	b94a      	cbnz	r2, 1cff2 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1cfde:	7b5a      	ldrb	r2, [r3, #13]
   1cfe0:	06d2      	lsls	r2, r2, #27
   1cfe2:	d106      	bne.n	1cff2 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1cfe4:	69a2      	ldr	r2, [r4, #24]
   1cfe6:	b922      	cbnz	r2, 1cff2 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1cfe8:	89da      	ldrh	r2, [r3, #14]
   1cfea:	2a7f      	cmp	r2, #127	; 0x7f
   1cfec:	d901      	bls.n	1cff2 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1cfee:	626b      	str	r3, [r5, #36]	; 0x24
}
   1cff0:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1cff2:	429c      	cmp	r4, r3
   1cff4:	d001      	beq.n	1cffa <update_cache+0x32>
			z_reset_time_slice();
   1cff6:	f7ff ff79 	bl	1ceec <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1cffa:	626c      	str	r4, [r5, #36]	; 0x24
}
   1cffc:	e7f8      	b.n	1cff0 <update_cache+0x28>
   1cffe:	bf00      	nop
   1d000:	20002130 	.word	0x20002130
   1d004:	20002108 	.word	0x20002108

0001d008 <unready_thread>:
{
   1d008:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1d00a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d00e:	7b43      	ldrb	r3, [r0, #13]
   1d010:	2a00      	cmp	r2, #0
{
   1d012:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d014:	da04      	bge.n	1d020 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d01a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1d01c:	f005 fe2f 	bl	22c7e <sys_dlist_remove>
	update_cache(thread == _current);
   1d020:	4b04      	ldr	r3, [pc, #16]	; (1d034 <unready_thread+0x2c>)
   1d022:	6898      	ldr	r0, [r3, #8]
   1d024:	1a43      	subs	r3, r0, r1
   1d026:	4258      	negs	r0, r3
   1d028:	4158      	adcs	r0, r3
}
   1d02a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1d02e:	f7ff bfcb 	b.w	1cfc8 <update_cache>
   1d032:	bf00      	nop
   1d034:	20002108 	.word	0x20002108

0001d038 <pend>:
{
   1d038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d03c:	4606      	mov	r6, r0
   1d03e:	4614      	mov	r4, r2
   1d040:	461d      	mov	r5, r3
	__asm__ volatile(
   1d042:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d046:	f3ef 8711 	mrs	r7, BASEPRI
   1d04a:	f383 8811 	msr	BASEPRI, r3
   1d04e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1d052:	f005 fe73 	bl	22d3c <add_to_waitq_locked>
	__asm__ volatile(
   1d056:	f387 8811 	msr	BASEPRI, r7
   1d05a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d05e:	1c6b      	adds	r3, r5, #1
   1d060:	bf08      	it	eq
   1d062:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1d066:	d008      	beq.n	1d07a <pend+0x42>
   1d068:	4622      	mov	r2, r4
   1d06a:	462b      	mov	r3, r5
   1d06c:	f106 0018 	add.w	r0, r6, #24
   1d070:	4903      	ldr	r1, [pc, #12]	; (1d080 <pend+0x48>)
}
   1d072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d076:	f000 bb4d 	b.w	1d714 <z_add_timeout>
   1d07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d07e:	bf00      	nop
   1d080:	00022db7 	.word	0x00022db7

0001d084 <z_pend_curr>:
{
   1d084:	b510      	push	{r4, lr}
	pending_current = _current;
   1d086:	4b07      	ldr	r3, [pc, #28]	; (1d0a4 <z_pend_curr+0x20>)
   1d088:	6898      	ldr	r0, [r3, #8]
   1d08a:	4b07      	ldr	r3, [pc, #28]	; (1d0a8 <z_pend_curr+0x24>)
{
   1d08c:	460c      	mov	r4, r1
	pending_current = _current;
   1d08e:	6018      	str	r0, [r3, #0]
{
   1d090:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1d092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d096:	f7ff ffcf 	bl	1d038 <pend>
   1d09a:	4620      	mov	r0, r4
}
   1d09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d0a0:	f7f5 bac0 	b.w	12624 <arch_swap>
   1d0a4:	20002108 	.word	0x20002108
   1d0a8:	20002140 	.word	0x20002140

0001d0ac <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1d0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0b0:	4605      	mov	r5, r0
   1d0b2:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d0b4:	f005 ff4b 	bl	22f4e <sys_clock_tick_get_32>
   1d0b8:	4604      	mov	r4, r0
	__asm__ volatile(
   1d0ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0be:	f3ef 8811 	mrs	r8, BASEPRI
   1d0c2:	f383 8811 	msr	BASEPRI, r3
   1d0c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1d0ca:	4e12      	ldr	r6, [pc, #72]	; (1d114 <z_tick_sleep.part.0+0x68>)
   1d0cc:	4b12      	ldr	r3, [pc, #72]	; (1d118 <z_tick_sleep.part.0+0x6c>)
   1d0ce:	68b0      	ldr	r0, [r6, #8]
   1d0d0:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1d0d2:	f7ff ff99 	bl	1d008 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1d0d6:	68b0      	ldr	r0, [r6, #8]
   1d0d8:	4910      	ldr	r1, [pc, #64]	; (1d11c <z_tick_sleep.part.0+0x70>)
   1d0da:	462a      	mov	r2, r5
   1d0dc:	463b      	mov	r3, r7
   1d0de:	3018      	adds	r0, #24
   1d0e0:	f000 fb18 	bl	1d714 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1d0e4:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d0e6:	7b53      	ldrb	r3, [r2, #13]
   1d0e8:	f043 0310 	orr.w	r3, r3, #16
   1d0ec:	7353      	strb	r3, [r2, #13]
   1d0ee:	4640      	mov	r0, r8
   1d0f0:	f7f5 fa98 	bl	12624 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d0f4:	f005 ff2b 	bl	22f4e <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d0f8:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d0fa:	1a24      	subs	r4, r4, r0
   1d0fc:	f04f 0500 	mov.w	r5, #0
   1d100:	f165 0500 	sbc.w	r5, r5, #0
   1d104:	2c00      	cmp	r4, #0
   1d106:	f175 0300 	sbcs.w	r3, r5, #0
   1d10a:	bfb8      	it	lt
   1d10c:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1d10e:	4620      	mov	r0, r4
   1d110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d114:	20002108 	.word	0x20002108
   1d118:	20002140 	.word	0x20002140
   1d11c:	00022db7 	.word	0x00022db7

0001d120 <z_impl_k_thread_suspend>:
{
   1d120:	b570      	push	{r4, r5, r6, lr}
   1d122:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1d124:	3018      	adds	r0, #24
   1d126:	f005 fec2 	bl	22eae <z_abort_timeout>
   1d12a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d12e:	f3ef 8611 	mrs	r6, BASEPRI
   1d132:	f383 8811 	msr	BASEPRI, r3
   1d136:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1d13a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d13e:	7b63      	ldrb	r3, [r4, #13]
   1d140:	2a00      	cmp	r2, #0
   1d142:	da05      	bge.n	1d150 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d148:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d14a:	4620      	mov	r0, r4
   1d14c:	f005 fd97 	bl	22c7e <sys_dlist_remove>
		update_cache(thread == _current);
   1d150:	4d0b      	ldr	r5, [pc, #44]	; (1d180 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d152:	7b63      	ldrb	r3, [r4, #13]
   1d154:	68a8      	ldr	r0, [r5, #8]
   1d156:	f043 0310 	orr.w	r3, r3, #16
   1d15a:	7363      	strb	r3, [r4, #13]
   1d15c:	1b03      	subs	r3, r0, r4
   1d15e:	4258      	negs	r0, r3
   1d160:	4158      	adcs	r0, r3
   1d162:	f7ff ff31 	bl	1cfc8 <update_cache>
	__asm__ volatile(
   1d166:	f386 8811 	msr	BASEPRI, r6
   1d16a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1d16e:	68ab      	ldr	r3, [r5, #8]
   1d170:	42a3      	cmp	r3, r4
   1d172:	d103      	bne.n	1d17c <z_impl_k_thread_suspend+0x5c>
}
   1d174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1d178:	f005 bdcc 	b.w	22d14 <z_reschedule_unlocked>
}
   1d17c:	bd70      	pop	{r4, r5, r6, pc}
   1d17e:	bf00      	nop
   1d180:	20002108 	.word	0x20002108

0001d184 <k_sched_unlock>:
{
   1d184:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d186:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d18a:	f3ef 8411 	mrs	r4, BASEPRI
   1d18e:	f383 8811 	msr	BASEPRI, r3
   1d192:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1d196:	4b08      	ldr	r3, [pc, #32]	; (1d1b8 <k_sched_unlock+0x34>)
   1d198:	689a      	ldr	r2, [r3, #8]
   1d19a:	7bd3      	ldrb	r3, [r2, #15]
   1d19c:	3301      	adds	r3, #1
   1d19e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d1a0:	2000      	movs	r0, #0
   1d1a2:	f7ff ff11 	bl	1cfc8 <update_cache>
	__asm__ volatile(
   1d1a6:	f384 8811 	msr	BASEPRI, r4
   1d1aa:	f3bf 8f6f 	isb	sy
}
   1d1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1d1b2:	f005 bdaf 	b.w	22d14 <z_reschedule_unlocked>
   1d1b6:	bf00      	nop
   1d1b8:	20002108 	.word	0x20002108

0001d1bc <move_thread_to_end_of_prio_q>:
{
   1d1bc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1d1be:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d1c2:	7b43      	ldrb	r3, [r0, #13]
   1d1c4:	2a00      	cmp	r2, #0
{
   1d1c6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d1c8:	da04      	bge.n	1d1d4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d1ce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d1d0:	f005 fd55 	bl	22c7e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d1d4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1d1d6:	4a17      	ldr	r2, [pc, #92]	; (1d234 <move_thread_to_end_of_prio_q+0x78>)
   1d1d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d1dc:	4610      	mov	r0, r2
   1d1de:	734b      	strb	r3, [r1, #13]
   1d1e0:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d1e4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d1e6:	4283      	cmp	r3, r0
   1d1e8:	bf08      	it	eq
   1d1ea:	2300      	moveq	r3, #0
   1d1ec:	2b00      	cmp	r3, #0
   1d1ee:	bf38      	it	cc
   1d1f0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d1f2:	b1cb      	cbz	r3, 1d228 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1d1f4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1d1f8:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d1fc:	42a6      	cmp	r6, r4
   1d1fe:	d00f      	beq.n	1d220 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1d200:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d202:	2c00      	cmp	r4, #0
   1d204:	dd0c      	ble.n	1d220 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1d206:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1d208:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1d20c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1d20e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1d210:	6890      	ldr	r0, [r2, #8]
   1d212:	1a43      	subs	r3, r0, r1
   1d214:	4258      	negs	r0, r3
}
   1d216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1d21a:	4158      	adcs	r0, r3
   1d21c:	f7ff bed4 	b.w	1cfc8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1d220:	42ab      	cmp	r3, r5
   1d222:	d001      	beq.n	1d228 <move_thread_to_end_of_prio_q+0x6c>
   1d224:	681b      	ldr	r3, [r3, #0]
   1d226:	e7e4      	b.n	1d1f2 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1d228:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1d22c:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1d22e:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1d230:	e7ee      	b.n	1d210 <move_thread_to_end_of_prio_q+0x54>
   1d232:	bf00      	nop
   1d234:	20002108 	.word	0x20002108

0001d238 <z_time_slice>:
{
   1d238:	b570      	push	{r4, r5, r6, lr}
   1d23a:	4601      	mov	r1, r0
	__asm__ volatile(
   1d23c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d240:	f3ef 8411 	mrs	r4, BASEPRI
   1d244:	f383 8811 	msr	BASEPRI, r3
   1d248:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1d24c:	4b16      	ldr	r3, [pc, #88]	; (1d2a8 <z_time_slice+0x70>)
   1d24e:	4a17      	ldr	r2, [pc, #92]	; (1d2ac <z_time_slice+0x74>)
   1d250:	6898      	ldr	r0, [r3, #8]
   1d252:	6815      	ldr	r5, [r2, #0]
   1d254:	42a8      	cmp	r0, r5
   1d256:	461d      	mov	r5, r3
   1d258:	d106      	bne.n	1d268 <z_time_slice+0x30>
			z_reset_time_slice();
   1d25a:	f7ff fe47 	bl	1ceec <z_reset_time_slice>
	__asm__ volatile(
   1d25e:	f384 8811 	msr	BASEPRI, r4
   1d262:	f3bf 8f6f 	isb	sy
}
   1d266:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1d268:	2600      	movs	r6, #0
   1d26a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d26c:	4a10      	ldr	r2, [pc, #64]	; (1d2b0 <z_time_slice+0x78>)
   1d26e:	6812      	ldr	r2, [r2, #0]
   1d270:	b1ba      	cbz	r2, 1d2a2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1d272:	89c2      	ldrh	r2, [r0, #14]
   1d274:	2a7f      	cmp	r2, #127	; 0x7f
   1d276:	d814      	bhi.n	1d2a2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1d278:	7b42      	ldrb	r2, [r0, #13]
   1d27a:	06d2      	lsls	r2, r2, #27
   1d27c:	d111      	bne.n	1d2a2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d27e:	4a0d      	ldr	r2, [pc, #52]	; (1d2b4 <z_time_slice+0x7c>)
   1d280:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1d284:	6812      	ldr	r2, [r2, #0]
   1d286:	4296      	cmp	r6, r2
   1d288:	db0b      	blt.n	1d2a2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1d28a:	4a0b      	ldr	r2, [pc, #44]	; (1d2b8 <z_time_slice+0x80>)
   1d28c:	4290      	cmp	r0, r2
   1d28e:	d008      	beq.n	1d2a2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1d290:	691a      	ldr	r2, [r3, #16]
   1d292:	428a      	cmp	r2, r1
   1d294:	dc02      	bgt.n	1d29c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1d296:	f7ff ff91 	bl	1d1bc <move_thread_to_end_of_prio_q>
   1d29a:	e7de      	b.n	1d25a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1d29c:	1a52      	subs	r2, r2, r1
   1d29e:	611a      	str	r2, [r3, #16]
   1d2a0:	e7dd      	b.n	1d25e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1d2a2:	2300      	movs	r3, #0
   1d2a4:	612b      	str	r3, [r5, #16]
   1d2a6:	e7da      	b.n	1d25e <z_time_slice+0x26>
   1d2a8:	20002108 	.word	0x20002108
   1d2ac:	20002140 	.word	0x20002140
   1d2b0:	20002148 	.word	0x20002148
   1d2b4:	20002144 	.word	0x20002144
   1d2b8:	20001bc8 	.word	0x20001bc8

0001d2bc <ready_thread>:
{
   1d2bc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1d2be:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d2c2:	7b42      	ldrb	r2, [r0, #13]
   1d2c4:	2b00      	cmp	r3, #0
   1d2c6:	db2d      	blt.n	1d324 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d2c8:	06d3      	lsls	r3, r2, #27
   1d2ca:	d12b      	bne.n	1d324 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1d2cc:	6983      	ldr	r3, [r0, #24]
   1d2ce:	bb4b      	cbnz	r3, 1d324 <ready_thread+0x68>
	return list->head == list;
   1d2d0:	4915      	ldr	r1, [pc, #84]	; (1d328 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1d2d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d2d6:	7342      	strb	r2, [r0, #13]
   1d2d8:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d2da:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   1d2dc:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d2e0:	4294      	cmp	r4, r2
   1d2e2:	bf18      	it	ne
   1d2e4:	4623      	movne	r3, r4
   1d2e6:	2b00      	cmp	r3, #0
   1d2e8:	bf38      	it	cc
   1d2ea:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d2ec:	b1ab      	cbz	r3, 1d31a <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1d2ee:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1d2f2:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d2f6:	42a6      	cmp	r6, r4
   1d2f8:	d00b      	beq.n	1d312 <ready_thread+0x56>
		return b2 - b1;
   1d2fa:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d2fc:	2c00      	cmp	r4, #0
   1d2fe:	dd08      	ble.n	1d312 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1d300:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d302:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1d306:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1d308:	6058      	str	r0, [r3, #4]
}
   1d30a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1d30c:	2000      	movs	r0, #0
   1d30e:	f7ff be5b 	b.w	1cfc8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1d312:	42ab      	cmp	r3, r5
   1d314:	d001      	beq.n	1d31a <ready_thread+0x5e>
   1d316:	681b      	ldr	r3, [r3, #0]
   1d318:	e7e8      	b.n	1d2ec <ready_thread+0x30>
	node->prev = tail;
   1d31a:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1d31e:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1d320:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   1d322:	e7f2      	b.n	1d30a <ready_thread+0x4e>
}
   1d324:	bc70      	pop	{r4, r5, r6}
   1d326:	4770      	bx	lr
   1d328:	20002108 	.word	0x20002108

0001d32c <z_sched_start>:
{
   1d32c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d32e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d332:	f3ef 8411 	mrs	r4, BASEPRI
   1d336:	f382 8811 	msr	BASEPRI, r2
   1d33a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1d33e:	7b42      	ldrb	r2, [r0, #13]
   1d340:	0751      	lsls	r1, r2, #29
   1d342:	d404      	bmi.n	1d34e <z_sched_start+0x22>
	__asm__ volatile(
   1d344:	f384 8811 	msr	BASEPRI, r4
   1d348:	f3bf 8f6f 	isb	sy
}
   1d34c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d34e:	f022 0204 	bic.w	r2, r2, #4
   1d352:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1d354:	f7ff ffb2 	bl	1d2bc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d358:	4621      	mov	r1, r4
   1d35a:	4802      	ldr	r0, [pc, #8]	; (1d364 <z_sched_start+0x38>)
}
   1d35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1d360:	f7ff be0c 	b.w	1cf7c <z_reschedule>
   1d364:	20002a27 	.word	0x20002a27

0001d368 <z_set_prio>:
{
   1d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d36a:	4604      	mov	r4, r0
	__asm__ volatile(
   1d36c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d370:	f3ef 8611 	mrs	r6, BASEPRI
   1d374:	f383 8811 	msr	BASEPRI, r3
   1d378:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d37c:	7b43      	ldrb	r3, [r0, #13]
   1d37e:	06da      	lsls	r2, r3, #27
   1d380:	b249      	sxtb	r1, r1
   1d382:	d138      	bne.n	1d3f6 <z_set_prio+0x8e>
   1d384:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1d386:	2d00      	cmp	r5, #0
   1d388:	d135      	bne.n	1d3f6 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d38a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d38e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d390:	f005 fc75 	bl	22c7e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d394:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1d396:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d398:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d39c:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1d39e:	4817      	ldr	r0, [pc, #92]	; (1d3fc <z_set_prio+0x94>)
   1d3a0:	4603      	mov	r3, r0
   1d3a2:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d3a6:	429f      	cmp	r7, r3
   1d3a8:	bf18      	it	ne
   1d3aa:	463d      	movne	r5, r7
   1d3ac:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d3ae:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1d3b0:	461a      	mov	r2, r3
   1d3b2:	462b      	mov	r3, r5
   1d3b4:	bf38      	it	cc
   1d3b6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d3b8:	b1c3      	cbz	r3, 1d3ec <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1d3ba:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1d3be:	42a9      	cmp	r1, r5
   1d3c0:	d010      	beq.n	1d3e4 <z_set_prio+0x7c>
		return b2 - b1;
   1d3c2:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d3c4:	2d00      	cmp	r5, #0
   1d3c6:	dd0d      	ble.n	1d3e4 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1d3c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d3ca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1d3ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1d3d0:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1d3d2:	2001      	movs	r0, #1
   1d3d4:	f7ff fdf8 	bl	1cfc8 <update_cache>
   1d3d8:	2001      	movs	r0, #1
	__asm__ volatile(
   1d3da:	f386 8811 	msr	BASEPRI, r6
   1d3de:	f3bf 8f6f 	isb	sy
}
   1d3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1d3e4:	42bb      	cmp	r3, r7
   1d3e6:	d001      	beq.n	1d3ec <z_set_prio+0x84>
   1d3e8:	681b      	ldr	r3, [r3, #0]
   1d3ea:	e7e5      	b.n	1d3b8 <z_set_prio+0x50>
	node->prev = tail;
   1d3ec:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1d3f0:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1d3f2:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   1d3f4:	e7ed      	b.n	1d3d2 <z_set_prio+0x6a>
			thread->base.prio = prio;
   1d3f6:	73a1      	strb	r1, [r4, #14]
   1d3f8:	2000      	movs	r0, #0
   1d3fa:	e7ee      	b.n	1d3da <z_set_prio+0x72>
   1d3fc:	20002108 	.word	0x20002108

0001d400 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1d400:	4b04      	ldr	r3, [pc, #16]	; (1d414 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1d402:	2100      	movs	r1, #0
   1d404:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1d408:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1d40c:	4608      	mov	r0, r1
   1d40e:	f7ff bd83 	b.w	1cf18 <k_sched_time_slice_set>
   1d412:	bf00      	nop
   1d414:	20002108 	.word	0x20002108

0001d418 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   1d418:	4926      	ldr	r1, [pc, #152]	; (1d4b4 <z_impl_k_yield+0x9c>)
{
   1d41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1d41c:	688a      	ldr	r2, [r1, #8]
   1d41e:	4b26      	ldr	r3, [pc, #152]	; (1d4b8 <z_impl_k_yield+0xa0>)
   1d420:	429a      	cmp	r2, r3
   1d422:	d03d      	beq.n	1d4a0 <z_impl_k_yield+0x88>
	__asm__ volatile(
   1d424:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d428:	f3ef 8511 	mrs	r5, BASEPRI
   1d42c:	f383 8811 	msr	BASEPRI, r3
   1d430:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   1d434:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d436:	7b43      	ldrb	r3, [r0, #13]
   1d438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d43c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d43e:	f005 fc1e 	bl	22c7e <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   1d442:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d444:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1d446:	4608      	mov	r0, r1
   1d448:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d44c:	7353      	strb	r3, [r2, #13]
   1d44e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d452:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d454:	4283      	cmp	r3, r0
   1d456:	bf08      	it	eq
   1d458:	2300      	moveq	r3, #0
   1d45a:	2b00      	cmp	r3, #0
   1d45c:	bf38      	it	cc
   1d45e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d460:	b1cb      	cbz	r3, 1d496 <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   1d462:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1d466:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d46a:	42a7      	cmp	r7, r4
   1d46c:	d00f      	beq.n	1d48e <z_impl_k_yield+0x76>
		return b2 - b1;
   1d46e:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d470:	2c00      	cmp	r4, #0
   1d472:	dd0c      	ble.n	1d48e <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   1d474:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1d476:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1d47a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1d47c:	605a      	str	r2, [r3, #4]
		update_cache(1);
   1d47e:	2001      	movs	r0, #1
   1d480:	f7ff fda2 	bl	1cfc8 <update_cache>
   1d484:	4628      	mov	r0, r5
}
   1d486:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d48a:	f7f5 b8cb 	b.w	12624 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1d48e:	42b3      	cmp	r3, r6
   1d490:	d001      	beq.n	1d496 <z_impl_k_yield+0x7e>
   1d492:	681b      	ldr	r3, [r3, #0]
   1d494:	e7e4      	b.n	1d460 <z_impl_k_yield+0x48>
	node->prev = tail;
   1d496:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1d49a:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1d49c:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   1d49e:	e7ee      	b.n	1d47e <z_impl_k_yield+0x66>
   1d4a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d4a4:	f3ef 8011 	mrs	r0, BASEPRI
   1d4a8:	f383 8811 	msr	BASEPRI, r3
   1d4ac:	f3bf 8f6f 	isb	sy
   1d4b0:	e7e9      	b.n	1d486 <z_impl_k_yield+0x6e>
   1d4b2:	bf00      	nop
   1d4b4:	20002108 	.word	0x20002108
   1d4b8:	20001bc8 	.word	0x20001bc8

0001d4bc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d4bc:	f1b1 3fff 	cmp.w	r1, #4294967295
   1d4c0:	bf08      	it	eq
   1d4c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1d4c6:	b508      	push	{r3, lr}
   1d4c8:	4602      	mov	r2, r0
   1d4ca:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d4cc:	d106      	bne.n	1d4dc <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1d4ce:	4b0b      	ldr	r3, [pc, #44]	; (1d4fc <z_impl_k_sleep+0x40>)
   1d4d0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1d4d2:	f7ff fe25 	bl	1d120 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1d4d6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1d4da:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1d4dc:	4313      	orrs	r3, r2
   1d4de:	d10a      	bne.n	1d4f6 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1d4e0:	f7ff ff9a 	bl	1d418 <z_impl_k_yield>
		return 0;
   1d4e4:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   1d4e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d4ea:	fb80 2303 	smull	r2, r3, r0, r3
   1d4ee:	0bd0      	lsrs	r0, r2, #15
   1d4f0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1d4f4:	e7f1      	b.n	1d4da <z_impl_k_sleep+0x1e>
   1d4f6:	f7ff fdd9 	bl	1d0ac <z_tick_sleep.part.0>
   1d4fa:	e7f4      	b.n	1d4e6 <z_impl_k_sleep+0x2a>
   1d4fc:	20002108 	.word	0x20002108

0001d500 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1d500:	4b01      	ldr	r3, [pc, #4]	; (1d508 <z_impl_k_current_get+0x8>)
   1d502:	6898      	ldr	r0, [r3, #8]
   1d504:	4770      	bx	lr
   1d506:	bf00      	nop
   1d508:	20002108 	.word	0x20002108

0001d50c <z_impl_k_is_preempt_thread>:
   1d50c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1d510:	b93b      	cbnz	r3, 1d522 <z_impl_k_is_preempt_thread+0x16>
   1d512:	4b05      	ldr	r3, [pc, #20]	; (1d528 <z_impl_k_is_preempt_thread+0x1c>)
   1d514:	689b      	ldr	r3, [r3, #8]
   1d516:	89d8      	ldrh	r0, [r3, #14]
   1d518:	287f      	cmp	r0, #127	; 0x7f
   1d51a:	bf8c      	ite	hi
   1d51c:	2000      	movhi	r0, #0
   1d51e:	2001      	movls	r0, #1
   1d520:	4770      	bx	lr
   1d522:	2000      	movs	r0, #0
}
   1d524:	4770      	bx	lr
   1d526:	bf00      	nop
   1d528:	20002108 	.word	0x20002108

0001d52c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1d52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d530:	4604      	mov	r4, r0
   1d532:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d536:	f3ef 8611 	mrs	r6, BASEPRI
   1d53a:	f383 8811 	msr	BASEPRI, r3
   1d53e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1d542:	7b43      	ldrb	r3, [r0, #13]
   1d544:	071a      	lsls	r2, r3, #28
   1d546:	d505      	bpl.n	1d554 <z_thread_abort+0x28>
	__asm__ volatile(
   1d548:	f386 8811 	msr	BASEPRI, r6
   1d54c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1d550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d554:	f023 0220 	bic.w	r2, r3, #32
   1d558:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1d55c:	09d2      	lsrs	r2, r2, #7
   1d55e:	d120      	bne.n	1d5a2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d560:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1d562:	68a3      	ldr	r3, [r4, #8]
   1d564:	b113      	cbz	r3, 1d56c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1d566:	4620      	mov	r0, r4
   1d568:	f005 fb91 	bl	22c8e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1d56c:	f104 0018 	add.w	r0, r4, #24
   1d570:	f005 fc9d 	bl	22eae <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1d574:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1d578:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1d57c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d57e:	42bd      	cmp	r5, r7
   1d580:	d000      	beq.n	1d584 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d582:	b9b5      	cbnz	r5, 1d5b2 <z_thread_abort+0x86>
		update_cache(1);
   1d584:	2001      	movs	r0, #1
   1d586:	f7ff fd1f 	bl	1cfc8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1d58a:	4b10      	ldr	r3, [pc, #64]	; (1d5cc <z_thread_abort+0xa0>)
   1d58c:	689b      	ldr	r3, [r3, #8]
   1d58e:	42a3      	cmp	r3, r4
   1d590:	d1da      	bne.n	1d548 <z_thread_abort+0x1c>
   1d592:	f3ef 8305 	mrs	r3, IPSR
   1d596:	2b00      	cmp	r3, #0
   1d598:	d1d6      	bne.n	1d548 <z_thread_abort+0x1c>
   1d59a:	4630      	mov	r0, r6
   1d59c:	f7f5 f842 	bl	12624 <arch_swap>
	return ret;
   1d5a0:	e7d2      	b.n	1d548 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d5a2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1d5a6:	f043 0308 	orr.w	r3, r3, #8
   1d5aa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d5ac:	f005 fb67 	bl	22c7e <sys_dlist_remove>
}
   1d5b0:	e7d7      	b.n	1d562 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1d5b2:	4628      	mov	r0, r5
   1d5b4:	f005 fb6b 	bl	22c8e <unpend_thread_no_timeout>
   1d5b8:	f105 0018 	add.w	r0, r5, #24
   1d5bc:	f005 fc77 	bl	22eae <z_abort_timeout>
   1d5c0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1d5c4:	4628      	mov	r0, r5
   1d5c6:	f7ff fe79 	bl	1d2bc <ready_thread>
   1d5ca:	e7d7      	b.n	1d57c <z_thread_abort+0x50>
   1d5cc:	20002108 	.word	0x20002108

0001d5d0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1d5d0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d5d2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1d5d6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d5d8:	e9cd 6700 	strd	r6, r7, [sp]
   1d5dc:	f7ff fd52 	bl	1d084 <z_pend_curr>

	if (data != NULL) {
   1d5e0:	b11c      	cbz	r4, 1d5ea <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1d5e2:	4b03      	ldr	r3, [pc, #12]	; (1d5f0 <z_sched_wait+0x20>)
   1d5e4:	689b      	ldr	r3, [r3, #8]
   1d5e6:	695b      	ldr	r3, [r3, #20]
   1d5e8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1d5ea:	b002      	add	sp, #8
   1d5ec:	bdd0      	pop	{r4, r6, r7, pc}
   1d5ee:	bf00      	nop
   1d5f0:	20002108 	.word	0x20002108

0001d5f4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1d5f4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1d5f6:	4806      	ldr	r0, [pc, #24]	; (1d610 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1d5f8:	4a06      	ldr	r2, [pc, #24]	; (1d614 <z_data_copy+0x20>)
   1d5fa:	4907      	ldr	r1, [pc, #28]	; (1d618 <z_data_copy+0x24>)
   1d5fc:	1a12      	subs	r2, r2, r0
   1d5fe:	f002 fe1a 	bl	20236 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1d602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1d606:	4a05      	ldr	r2, [pc, #20]	; (1d61c <z_data_copy+0x28>)
   1d608:	4905      	ldr	r1, [pc, #20]	; (1d620 <z_data_copy+0x2c>)
   1d60a:	4806      	ldr	r0, [pc, #24]	; (1d624 <z_data_copy+0x30>)
   1d60c:	f002 be13 	b.w	20236 <memcpy>
   1d610:	20000000 	.word	0x20000000
   1d614:	200008dc 	.word	0x200008dc
   1d618:	000262d0 	.word	0x000262d0
   1d61c:	00000000 	.word	0x00000000
   1d620:	000262d0 	.word	0x000262d0
   1d624:	20000000 	.word	0x20000000

0001d628 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1d628:	4b03      	ldr	r3, [pc, #12]	; (1d638 <elapsed+0x10>)
   1d62a:	681b      	ldr	r3, [r3, #0]
   1d62c:	b90b      	cbnz	r3, 1d632 <elapsed+0xa>
   1d62e:	f7f4 be3f 	b.w	122b0 <sys_clock_elapsed>
}
   1d632:	2000      	movs	r0, #0
   1d634:	4770      	bx	lr
   1d636:	bf00      	nop
   1d638:	2000214c 	.word	0x2000214c

0001d63c <remove_timeout>:
{
   1d63c:	b530      	push	{r4, r5, lr}
   1d63e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d640:	b168      	cbz	r0, 1d65e <remove_timeout+0x22>
   1d642:	4a0a      	ldr	r2, [pc, #40]	; (1d66c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1d644:	6852      	ldr	r2, [r2, #4]
   1d646:	4290      	cmp	r0, r2
   1d648:	d009      	beq.n	1d65e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1d64a:	b143      	cbz	r3, 1d65e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1d64c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1d650:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1d654:	1912      	adds	r2, r2, r4
   1d656:	eb45 0101 	adc.w	r1, r5, r1
   1d65a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1d65e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1d660:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d662:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d664:	2300      	movs	r3, #0
	node->prev = NULL;
   1d666:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d66a:	bd30      	pop	{r4, r5, pc}
   1d66c:	20000564 	.word	0x20000564

0001d670 <next_timeout>:

static int32_t next_timeout(void)
{
   1d670:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1d672:	4b13      	ldr	r3, [pc, #76]	; (1d6c0 <next_timeout+0x50>)
   1d674:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d676:	429c      	cmp	r4, r3
   1d678:	bf08      	it	eq
   1d67a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1d67c:	f7ff ffd4 	bl	1d628 <elapsed>
   1d680:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1d682:	b1bc      	cbz	r4, 1d6b4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1d684:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1d688:	1b40      	subs	r0, r0, r5
   1d68a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1d68e:	2801      	cmp	r0, #1
   1d690:	f171 0300 	sbcs.w	r3, r1, #0
   1d694:	db11      	blt.n	1d6ba <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1d696:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1d69a:	2300      	movs	r3, #0
   1d69c:	4282      	cmp	r2, r0
   1d69e:	eb73 0401 	sbcs.w	r4, r3, r1
   1d6a2:	da00      	bge.n	1d6a6 <next_timeout+0x36>
   1d6a4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1d6a6:	4b07      	ldr	r3, [pc, #28]	; (1d6c4 <next_timeout+0x54>)
   1d6a8:	691b      	ldr	r3, [r3, #16]
   1d6aa:	b113      	cbz	r3, 1d6b2 <next_timeout+0x42>
   1d6ac:	4298      	cmp	r0, r3
   1d6ae:	bfa8      	it	ge
   1d6b0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1d6b2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1d6b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d6b8:	e7f5      	b.n	1d6a6 <next_timeout+0x36>
   1d6ba:	2000      	movs	r0, #0
   1d6bc:	e7f3      	b.n	1d6a6 <next_timeout+0x36>
   1d6be:	bf00      	nop
   1d6c0:	20000564 	.word	0x20000564
   1d6c4:	20002108 	.word	0x20002108

0001d6c8 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1d6c8:	6803      	ldr	r3, [r0, #0]
{
   1d6ca:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   1d6cc:	b1eb      	cbz	r3, 1d70a <timeout_rem+0x42>
	return list->head == list;
   1d6ce:	4a10      	ldr	r2, [pc, #64]	; (1d710 <timeout_rem+0x48>)
   1d6d0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d6d2:	4293      	cmp	r3, r2
   1d6d4:	d016      	beq.n	1d704 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d6d6:	6851      	ldr	r1, [r2, #4]
   1d6d8:	2400      	movs	r4, #0
   1d6da:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1d6dc:	b93b      	cbnz	r3, 1d6ee <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   1d6de:	f7ff ffa3 	bl	1d628 <elapsed>
   1d6e2:	1a24      	subs	r4, r4, r0
   1d6e4:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   1d6e8:	4620      	mov	r0, r4
   1d6ea:	4629      	mov	r1, r5
   1d6ec:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   1d6ee:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   1d6f2:	18a4      	adds	r4, r4, r2
   1d6f4:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   1d6f8:	4283      	cmp	r3, r0
   1d6fa:	d0f0      	beq.n	1d6de <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   1d6fc:	428b      	cmp	r3, r1
   1d6fe:	d0ee      	beq.n	1d6de <timeout_rem+0x16>
   1d700:	681b      	ldr	r3, [r3, #0]
   1d702:	e7eb      	b.n	1d6dc <timeout_rem+0x14>
   1d704:	2400      	movs	r4, #0
   1d706:	2500      	movs	r5, #0
   1d708:	e7e9      	b.n	1d6de <timeout_rem+0x16>
		return 0;
   1d70a:	2400      	movs	r4, #0
   1d70c:	2500      	movs	r5, #0
   1d70e:	e7eb      	b.n	1d6e8 <timeout_rem+0x20>
   1d710:	20000564 	.word	0x20000564

0001d714 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d714:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d718:	bf08      	it	eq
   1d71a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1d71e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d722:	4604      	mov	r4, r0
   1d724:	4692      	mov	sl, r2
   1d726:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d728:	d073      	beq.n	1d812 <z_add_timeout+0xfe>
	to->fn = fn;
   1d72a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1d72c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d730:	f3ef 8511 	mrs	r5, BASEPRI
   1d734:	f383 8811 	msr	BASEPRI, r3
   1d738:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1d73c:	f06f 0301 	mvn.w	r3, #1
   1d740:	ebb3 080a 	subs.w	r8, r3, sl
   1d744:	f04f 32ff 	mov.w	r2, #4294967295
   1d748:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1d74c:	f1b8 0f00 	cmp.w	r8, #0
   1d750:	f179 0100 	sbcs.w	r1, r9, #0
   1d754:	db1c      	blt.n	1d790 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1d756:	4830      	ldr	r0, [pc, #192]	; (1d818 <z_add_timeout+0x104>)
   1d758:	e9d0 1000 	ldrd	r1, r0, [r0]
   1d75c:	1a5b      	subs	r3, r3, r1
   1d75e:	eb62 0200 	sbc.w	r2, r2, r0
			to->dticks = MAX(1, ticks);
   1d762:	ebb3 060a 	subs.w	r6, r3, sl
   1d766:	eb62 070b 	sbc.w	r7, r2, fp
   1d76a:	2e01      	cmp	r6, #1
   1d76c:	f177 0300 	sbcs.w	r3, r7, #0
   1d770:	bfbc      	itt	lt
   1d772:	2601      	movlt	r6, #1
   1d774:	2700      	movlt	r7, #0
   1d776:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1d77a:	4a28      	ldr	r2, [pc, #160]	; (1d81c <z_add_timeout+0x108>)
   1d77c:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d780:	4293      	cmp	r3, r2
   1d782:	d11e      	bne.n	1d7c2 <z_add_timeout+0xae>
	node->prev = tail;
   1d784:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1d788:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1d78c:	6054      	str	r4, [r2, #4]
}
   1d78e:	e02d      	b.n	1d7ec <z_add_timeout+0xd8>
			to->dticks = timeout.ticks + 1 + elapsed();
   1d790:	f7ff ff4a 	bl	1d628 <elapsed>
   1d794:	f11a 0301 	adds.w	r3, sl, #1
   1d798:	9300      	str	r3, [sp, #0]
   1d79a:	f14b 0300 	adc.w	r3, fp, #0
   1d79e:	9301      	str	r3, [sp, #4]
   1d7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d7a4:	1812      	adds	r2, r2, r0
   1d7a6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1d7aa:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1d7ae:	e7e4      	b.n	1d77a <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   1d7b0:	ebb6 0008 	subs.w	r0, r6, r8
   1d7b4:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1d7b8:	4563      	cmp	r3, ip
   1d7ba:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1d7be:	d0e1      	beq.n	1d784 <z_add_timeout+0x70>
   1d7c0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1d7c2:	2b00      	cmp	r3, #0
   1d7c4:	d0de      	beq.n	1d784 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   1d7c6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1d7ca:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1d7ce:	4546      	cmp	r6, r8
   1d7d0:	eb77 0109 	sbcs.w	r1, r7, r9
   1d7d4:	daec      	bge.n	1d7b0 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   1d7d6:	ebb8 0006 	subs.w	r0, r8, r6
   1d7da:	eb69 0107 	sbc.w	r1, r9, r7
   1d7de:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1d7e2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1d7e4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1d7e8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1d7ea:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1d7ec:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d7ee:	4293      	cmp	r3, r2
   1d7f0:	d00b      	beq.n	1d80a <z_add_timeout+0xf6>
		if (to == first()) {
   1d7f2:	429c      	cmp	r4, r3
   1d7f4:	d109      	bne.n	1d80a <z_add_timeout+0xf6>
			int32_t next_time = next_timeout();
   1d7f6:	f7ff ff3b 	bl	1d670 <next_timeout>
			if (next_time == 0 ||
   1d7fa:	b118      	cbz	r0, 1d804 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   1d7fc:	4b08      	ldr	r3, [pc, #32]	; (1d820 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1d7fe:	691b      	ldr	r3, [r3, #16]
   1d800:	4283      	cmp	r3, r0
   1d802:	d002      	beq.n	1d80a <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   1d804:	2100      	movs	r1, #0
   1d806:	f7f4 fd21 	bl	1224c <sys_clock_set_timeout>
	__asm__ volatile(
   1d80a:	f385 8811 	msr	BASEPRI, r5
   1d80e:	f3bf 8f6f 	isb	sy
}
   1d812:	b003      	add	sp, #12
   1d814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d818:	20001d68 	.word	0x20001d68
   1d81c:	20000564 	.word	0x20000564
   1d820:	20002108 	.word	0x20002108

0001d824 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1d824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d828:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1d82a:	f7ff fd05 	bl	1d238 <z_time_slice>
	__asm__ volatile(
   1d82e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d832:	f3ef 8411 	mrs	r4, BASEPRI
   1d836:	f383 8811 	msr	BASEPRI, r3
   1d83a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1d83e:	4d2c      	ldr	r5, [pc, #176]	; (1d8f0 <sys_clock_announce+0xcc>)
   1d840:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1d8f4 <sys_clock_announce+0xd0>
	return list->head == list;
   1d844:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1d8f8 <sys_clock_announce+0xd4>
   1d848:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1d84a:	4651      	mov	r1, sl
   1d84c:	f8d5 c000 	ldr.w	ip, [r5]
   1d850:	f8db 0000 	ldr.w	r0, [fp]
   1d854:	4662      	mov	r2, ip
   1d856:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d858:	4558      	cmp	r0, fp
   1d85a:	e9da 8900 	ldrd	r8, r9, [sl]
   1d85e:	e9cd 2300 	strd	r2, r3, [sp]
   1d862:	d00d      	beq.n	1d880 <sys_clock_announce+0x5c>
   1d864:	b160      	cbz	r0, 1d880 <sys_clock_announce+0x5c>
   1d866:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1d86a:	45b4      	cmp	ip, r6
   1d86c:	41bb      	sbcs	r3, r7
   1d86e:	da1e      	bge.n	1d8ae <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1d870:	9b00      	ldr	r3, [sp, #0]
   1d872:	ebb6 0c03 	subs.w	ip, r6, r3
   1d876:	9b01      	ldr	r3, [sp, #4]
   1d878:	eb67 0603 	sbc.w	r6, r7, r3
   1d87c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1d880:	9b00      	ldr	r3, [sp, #0]
   1d882:	eb13 0208 	adds.w	r2, r3, r8
   1d886:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1d888:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1d88c:	eb43 0309 	adc.w	r3, r3, r9
   1d890:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1d894:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1d896:	f7ff feeb 	bl	1d670 <next_timeout>
   1d89a:	4631      	mov	r1, r6
   1d89c:	f7f4 fcd6 	bl	1224c <sys_clock_set_timeout>
	__asm__ volatile(
   1d8a0:	f384 8811 	msr	BASEPRI, r4
   1d8a4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1d8a8:	b003      	add	sp, #12
   1d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1d8ae:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1d8b2:	f04f 0200 	mov.w	r2, #0
   1d8b6:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1d8ba:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1d8be:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1d8c2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1d8c6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1d8ca:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1d8cc:	f7ff feb6 	bl	1d63c <remove_timeout>
   1d8d0:	f384 8811 	msr	BASEPRI, r4
   1d8d4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1d8d8:	6883      	ldr	r3, [r0, #8]
   1d8da:	4798      	blx	r3
	__asm__ volatile(
   1d8dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d8e0:	f3ef 8411 	mrs	r4, BASEPRI
   1d8e4:	f383 8811 	msr	BASEPRI, r3
   1d8e8:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1d8ec:	4901      	ldr	r1, [pc, #4]	; (1d8f4 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1d8ee:	e7ad      	b.n	1d84c <sys_clock_announce+0x28>
   1d8f0:	2000214c 	.word	0x2000214c
   1d8f4:	20001d68 	.word	0x20001d68
   1d8f8:	20000564 	.word	0x20000564

0001d8fc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1d8fc:	b510      	push	{r4, lr}
   1d8fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d902:	f3ef 8411 	mrs	r4, BASEPRI
   1d906:	f383 8811 	msr	BASEPRI, r3
   1d90a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1d90e:	f7f4 fccf 	bl	122b0 <sys_clock_elapsed>
   1d912:	4b06      	ldr	r3, [pc, #24]	; (1d92c <sys_clock_tick_get+0x30>)
   1d914:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d918:	1812      	adds	r2, r2, r0
   1d91a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1d91e:	f384 8811 	msr	BASEPRI, r4
   1d922:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1d926:	4610      	mov	r0, r2
   1d928:	4619      	mov	r1, r3
   1d92a:	bd10      	pop	{r4, pc}
   1d92c:	20001d68 	.word	0x20001d68

0001d930 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1d930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d932:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1d936:	1c56      	adds	r6, r2, #1
   1d938:	f143 0700 	adc.w	r7, r3, #0
   1d93c:	2f00      	cmp	r7, #0
   1d93e:	bf08      	it	eq
   1d940:	2e02      	cmpeq	r6, #2
{
   1d942:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d944:	d302      	bcc.n	1d94c <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d946:	490d      	ldr	r1, [pc, #52]	; (1d97c <z_timer_expiration_handler+0x4c>)
   1d948:	f7ff fee4 	bl	1d714 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1d94c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d94e:	3301      	adds	r3, #1
   1d950:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1d952:	6a23      	ldr	r3, [r4, #32]
   1d954:	b10b      	cbz	r3, 1d95a <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1d956:	4620      	mov	r0, r4
   1d958:	4798      	blx	r3
	return list->head == list;
   1d95a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d95e:	42a5      	cmp	r5, r4
   1d960:	d00a      	beq.n	1d978 <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1d962:	b14d      	cbz	r5, 1d978 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1d964:	4628      	mov	r0, r5
   1d966:	f005 f9a5 	bl	22cb4 <z_unpend_thread_no_timeout>
   1d96a:	2300      	movs	r3, #0
   1d96c:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1d96e:	4628      	mov	r0, r5
}
   1d970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1d974:	f005 ba0f 	b.w	22d96 <z_ready_thread>
}
   1d978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d97a:	bf00      	nop
   1d97c:	0001d931 	.word	0x0001d931

0001d980 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1d980:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1d984:	4619      	mov	r1, r3
   1d986:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d988:	1c4c      	adds	r4, r1, #1
{
   1d98a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d98c:	bf08      	it	eq
   1d98e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1d992:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d996:	4680      	mov	r8, r0
   1d998:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d99a:	d04c      	beq.n	1da36 <z_impl_k_timer_start+0xb6>
   1d99c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1d99e:	1c6b      	adds	r3, r5, #1
   1d9a0:	bf08      	it	eq
   1d9a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1d9a6:	4614      	mov	r4, r2
   1d9a8:	d019      	beq.n	1d9de <z_impl_k_timer_start+0x5e>
   1d9aa:	ea54 0305 	orrs.w	r3, r4, r5
   1d9ae:	d016      	beq.n	1d9de <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1d9b0:	f06f 0301 	mvn.w	r3, #1
   1d9b4:	ebb3 0a02 	subs.w	sl, r3, r2
   1d9b8:	f04f 33ff 	mov.w	r3, #4294967295
   1d9bc:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1d9c0:	f1ba 0f00 	cmp.w	sl, #0
   1d9c4:	f17b 0300 	sbcs.w	r3, fp, #0
   1d9c8:	da09      	bge.n	1d9de <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1d9ca:	f112 34ff 	adds.w	r4, r2, #4294967295
   1d9ce:	f145 35ff 	adc.w	r5, r5, #4294967295
   1d9d2:	2c01      	cmp	r4, #1
   1d9d4:	f175 0300 	sbcs.w	r3, r5, #0
   1d9d8:	bfbc      	itt	lt
   1d9da:	2401      	movlt	r4, #1
   1d9dc:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1d9de:	f06f 0301 	mvn.w	r3, #1
   1d9e2:	1a1b      	subs	r3, r3, r0
   1d9e4:	9300      	str	r3, [sp, #0]
   1d9e6:	f04f 33ff 	mov.w	r3, #4294967295
   1d9ea:	eb63 0301 	sbc.w	r3, r3, r1
   1d9ee:	9301      	str	r3, [sp, #4]
   1d9f0:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d9f4:	2a00      	cmp	r2, #0
   1d9f6:	f173 0300 	sbcs.w	r3, r3, #0
   1d9fa:	da0c      	bge.n	1da16 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1d9fc:	f110 38ff 	adds.w	r8, r0, #4294967295
   1da00:	f141 39ff 	adc.w	r9, r1, #4294967295
   1da04:	f1b8 0f00 	cmp.w	r8, #0
   1da08:	f179 0300 	sbcs.w	r3, r9, #0
   1da0c:	bfbc      	itt	lt
   1da0e:	f04f 0800 	movlt.w	r8, #0
   1da12:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1da16:	4630      	mov	r0, r6
   1da18:	f005 fa49 	bl	22eae <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1da1c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1da1e:	4907      	ldr	r1, [pc, #28]	; (1da3c <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1da20:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1da22:	4642      	mov	r2, r8
   1da24:	464b      	mov	r3, r9
   1da26:	4630      	mov	r0, r6
	timer->period = period;
   1da28:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1da2c:	b002      	add	sp, #8
   1da2e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1da32:	f7ff be6f 	b.w	1d714 <z_add_timeout>
}
   1da36:	b002      	add	sp, #8
   1da38:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1da3c:	0001d931 	.word	0x0001d931

0001da40 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1da40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1da44:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1da46:	4b29      	ldr	r3, [pc, #164]	; (1daec <z_impl_k_poll+0xac>)
   1da48:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1da4a:	2301      	movs	r3, #1
   1da4c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1da50:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1da54:	ea52 0307 	orrs.w	r3, r2, r7
{
   1da58:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1da5a:	bf0c      	ite	eq
   1da5c:	2301      	moveq	r3, #1
   1da5e:	2300      	movne	r3, #0
   1da60:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1da64:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1da66:	f005 fb2e 	bl	230c6 <register_events>
   1da6a:	4681      	mov	r9, r0
	__asm__ volatile(
   1da6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da70:	f3ef 8a11 	mrs	sl, BASEPRI
   1da74:	f383 8811 	msr	BASEPRI, r3
   1da78:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1da7c:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1da80:	b964      	cbnz	r4, 1da9c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1da82:	4601      	mov	r1, r0
   1da84:	4652      	mov	r2, sl
   1da86:	4640      	mov	r0, r8
   1da88:	f005 fabb 	bl	23002 <clear_event_registrations>
	__asm__ volatile(
   1da8c:	f38a 8811 	msr	BASEPRI, sl
   1da90:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1da94:	4620      	mov	r0, r4
   1da96:	b002      	add	sp, #8
   1da98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1da9c:	2300      	movs	r3, #0
   1da9e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1daa2:	ea56 0307 	orrs.w	r3, r6, r7
   1daa6:	d106      	bne.n	1dab6 <z_impl_k_poll+0x76>
   1daa8:	f38a 8811 	msr	BASEPRI, sl
   1daac:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1dab0:	f06f 040a 	mvn.w	r4, #10
   1dab4:	e7ee      	b.n	1da94 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1dab6:	e9cd 6700 	strd	r6, r7, [sp]
   1daba:	4a0d      	ldr	r2, [pc, #52]	; (1daf0 <z_impl_k_poll+0xb0>)
   1dabc:	480d      	ldr	r0, [pc, #52]	; (1daf4 <z_impl_k_poll+0xb4>)
   1dabe:	4651      	mov	r1, sl
   1dac0:	f7ff fae0 	bl	1d084 <z_pend_curr>
   1dac4:	4604      	mov	r4, r0
	__asm__ volatile(
   1dac6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1daca:	f3ef 8511 	mrs	r5, BASEPRI
   1dace:	f383 8811 	msr	BASEPRI, r3
   1dad2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1dad6:	462a      	mov	r2, r5
   1dad8:	4649      	mov	r1, r9
   1dada:	4640      	mov	r0, r8
   1dadc:	f005 fa91 	bl	23002 <clear_event_registrations>
	__asm__ volatile(
   1dae0:	f385 8811 	msr	BASEPRI, r5
   1dae4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1dae8:	e7d4      	b.n	1da94 <z_impl_k_poll+0x54>
   1daea:	bf00      	nop
   1daec:	20002108 	.word	0x20002108
   1daf0:	2000056c 	.word	0x2000056c
   1daf4:	20002a27 	.word	0x20002a27

0001daf8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1daf8:	b538      	push	{r3, r4, r5, lr}
   1dafa:	4603      	mov	r3, r0
	__asm__ volatile(
   1dafc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1db00:	f3ef 8511 	mrs	r5, BASEPRI
   1db04:	f382 8811 	msr	BASEPRI, r2
   1db08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1db0c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1db0e:	2101      	movs	r1, #1
   1db10:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1db12:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1db14:	4283      	cmp	r3, r0
   1db16:	d106      	bne.n	1db26 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1db18:	f385 8811 	msr	BASEPRI, r5
   1db1c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1db20:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1db22:	4620      	mov	r0, r4
   1db24:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1db26:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1db2a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1db2c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1db2e:	2300      	movs	r3, #0
	node->prev = NULL;
   1db30:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1db34:	f005 fb3e 	bl	231b4 <signal_poll_event>
	z_reschedule(&lock, key);
   1db38:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1db3a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1db3c:	4801      	ldr	r0, [pc, #4]	; (1db44 <z_impl_k_poll_signal_raise+0x4c>)
   1db3e:	f7ff fa1d 	bl	1cf7c <z_reschedule>
	return rc;
   1db42:	e7ee      	b.n	1db22 <z_impl_k_poll_signal_raise+0x2a>
   1db44:	20002a27 	.word	0x20002a27

0001db48 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1db48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1db4a:	4606      	mov	r6, r0
   1db4c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1db4e:	f004 fec1 	bl	228d4 <k_is_in_isr>
   1db52:	b980      	cbnz	r0, 1db76 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1db54:	4b0b      	ldr	r3, [pc, #44]	; (1db84 <z_thread_aligned_alloc+0x3c>)
   1db56:	689b      	ldr	r3, [r3, #8]
   1db58:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1db5a:	b184      	cbz	r4, 1db7e <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1db5c:	2204      	movs	r2, #4
   1db5e:	18aa      	adds	r2, r5, r2
   1db60:	d209      	bcs.n	1db76 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1db62:	2000      	movs	r0, #0
   1db64:	2100      	movs	r1, #0
   1db66:	e9cd 0100 	strd	r0, r1, [sp]
   1db6a:	f046 0104 	orr.w	r1, r6, #4
   1db6e:	4620      	mov	r0, r4
   1db70:	f004 fe08 	bl	22784 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1db74:	b908      	cbnz	r0, 1db7a <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1db76:	2400      	movs	r4, #0
	}

	return ret;
   1db78:	e001      	b.n	1db7e <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   1db7a:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1db7c:	1d04      	adds	r4, r0, #4
}
   1db7e:	4620      	mov	r0, r4
   1db80:	b002      	add	sp, #8
   1db82:	bd70      	pop	{r4, r5, r6, pc}
   1db84:	20002108 	.word	0x20002108

0001db88 <hrs_init>:
}
   1db88:	2000      	movs	r0, #0
   1db8a:	4770      	bx	lr

0001db8c <dclk_stop_cb>:
}
   1db8c:	4770      	bx	lr

0001db8e <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1db8e:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1db90:	f04f 0c0a 	mov.w	ip, #10
{
   1db94:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   1db96:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   1db98:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   1db9a:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   1db9c:	b111      	cbz	r1, 1dba4 <u8_to_dec+0x16>
   1db9e:	3e01      	subs	r6, #1
   1dba0:	d101      	bne.n	1dba6 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1dba2:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   1dba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1dba6:	42a2      	cmp	r2, r4
		digit = value / divisor;
   1dba8:	fbb2 f7f4 	udiv	r7, r2, r4
   1dbac:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1dbae:	d202      	bcs.n	1dbb6 <u8_to_dec+0x28>
   1dbb0:	2c01      	cmp	r4, #1
   1dbb2:	d000      	beq.n	1dbb6 <u8_to_dec+0x28>
   1dbb4:	b130      	cbz	r0, 1dbc4 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1dbb6:	3330      	adds	r3, #48	; 0x30
   1dbb8:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   1dbbc:	3901      	subs	r1, #1
			num_digits++;
   1dbbe:	1c43      	adds	r3, r0, #1
			buflen--;
   1dbc0:	b2c9      	uxtb	r1, r1
			num_digits++;
   1dbc2:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   1dbc4:	fb04 2217 	mls	r2, r4, r7, r2
   1dbc8:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1dbca:	fbb4 f4fc 	udiv	r4, r4, ip
   1dbce:	e7e5      	b.n	1db9c <u8_to_dec+0xe>

0001dbd0 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1dbd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1dbd4:	b2db      	uxtb	r3, r3
   1dbd6:	2b09      	cmp	r3, #9
   1dbd8:	d802      	bhi.n	1dbe0 <char2hex+0x10>
		*x = c - '0';
   1dbda:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1dbdc:	2000      	movs	r0, #0
   1dbde:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1dbe0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1dbe4:	2b05      	cmp	r3, #5
   1dbe6:	d802      	bhi.n	1dbee <char2hex+0x1e>
		*x = c - 'a' + 10;
   1dbe8:	3857      	subs	r0, #87	; 0x57
   1dbea:	7008      	strb	r0, [r1, #0]
   1dbec:	e7f6      	b.n	1dbdc <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1dbee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1dbf2:	2b05      	cmp	r3, #5
   1dbf4:	d801      	bhi.n	1dbfa <char2hex+0x2a>
		*x = c - 'A' + 10;
   1dbf6:	3837      	subs	r0, #55	; 0x37
   1dbf8:	e7f7      	b.n	1dbea <char2hex+0x1a>
		return -EINVAL;
   1dbfa:	f06f 0015 	mvn.w	r0, #21
}
   1dbfe:	4770      	bx	lr

0001dc00 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1dc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dc02:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1dc04:	f001 0001 	and.w	r0, r1, #1
   1dc08:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1dc0c:	429d      	cmp	r5, r3
   1dc0e:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1dc12:	d903      	bls.n	1dc1c <hex2bin+0x1c>
		return 0;
   1dc14:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1dc16:	4628      	mov	r0, r5
   1dc18:	b003      	add	sp, #12
   1dc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1dc1c:	b158      	cbz	r0, 1dc36 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1dc1e:	7820      	ldrb	r0, [r4, #0]
   1dc20:	f10d 0107 	add.w	r1, sp, #7
   1dc24:	f7ff ffd4 	bl	1dbd0 <char2hex>
   1dc28:	2800      	cmp	r0, #0
   1dc2a:	dbf3      	blt.n	1dc14 <hex2bin+0x14>
		buf[0] = dec;
   1dc2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc30:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   1dc34:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1dc36:	3401      	adds	r4, #1
   1dc38:	4416      	add	r6, r2
   1dc3a:	42b2      	cmp	r2, r6
   1dc3c:	d0eb      	beq.n	1dc16 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1dc3e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1dc42:	f10d 0107 	add.w	r1, sp, #7
   1dc46:	f7ff ffc3 	bl	1dbd0 <char2hex>
   1dc4a:	2800      	cmp	r0, #0
   1dc4c:	dbe2      	blt.n	1dc14 <hex2bin+0x14>
		buf[i] = dec << 4;
   1dc4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc52:	011b      	lsls	r3, r3, #4
   1dc54:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1dc56:	f814 0b02 	ldrb.w	r0, [r4], #2
   1dc5a:	f10d 0107 	add.w	r1, sp, #7
   1dc5e:	f7ff ffb7 	bl	1dbd0 <char2hex>
   1dc62:	2800      	cmp	r0, #0
   1dc64:	dbd6      	blt.n	1dc14 <hex2bin+0x14>
		buf[i] += dec;
   1dc66:	7813      	ldrb	r3, [r2, #0]
   1dc68:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1dc6c:	440b      	add	r3, r1
   1dc6e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1dc72:	e7e2      	b.n	1dc3a <hex2bin+0x3a>

0001dc74 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1dc74:	4603      	mov	r3, r0
   1dc76:	b140      	cbz	r0, 1dc8a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1dc78:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1dc7a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1dc7e:	2a02      	cmp	r2, #2
   1dc80:	d006      	beq.n	1dc90 <sys_notify_validate+0x1c>
   1dc82:	2a03      	cmp	r2, #3
   1dc84:	d004      	beq.n	1dc90 <sys_notify_validate+0x1c>
   1dc86:	2a01      	cmp	r2, #1
   1dc88:	d005      	beq.n	1dc96 <sys_notify_validate+0x22>
		return -EINVAL;
   1dc8a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1dc8e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1dc90:	681a      	ldr	r2, [r3, #0]
   1dc92:	2a00      	cmp	r2, #0
   1dc94:	d0f9      	beq.n	1dc8a <sys_notify_validate+0x16>
		notify->result = 0;
   1dc96:	2000      	movs	r0, #0
   1dc98:	6098      	str	r0, [r3, #8]
   1dc9a:	4770      	bx	lr

0001dc9c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1dc9c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1dc9e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1dca2:	2a02      	cmp	r2, #2
{
   1dca4:	b510      	push	{r4, lr}
   1dca6:	4603      	mov	r3, r0
	notify->result = res;
   1dca8:	6081      	str	r1, [r0, #8]
	switch (method) {
   1dcaa:	d00a      	beq.n	1dcc2 <sys_notify_finalize+0x26>
   1dcac:	2a03      	cmp	r2, #3
   1dcae:	d10b      	bne.n	1dcc8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1dcb0:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1dcb2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1dcb4:	2200      	movs	r2, #0
   1dcb6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1dcb8:	b108      	cbz	r0, 1dcbe <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1dcba:	f7ff ff1d 	bl	1daf8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1dcbe:	4620      	mov	r0, r4
   1dcc0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1dcc2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1dcc4:	2400      	movs	r4, #0
		break;
   1dcc6:	e7f5      	b.n	1dcb4 <sys_notify_finalize+0x18>
	switch (method) {
   1dcc8:	2400      	movs	r4, #0
   1dcca:	4620      	mov	r0, r4
   1dccc:	e7f2      	b.n	1dcb4 <sys_notify_finalize+0x18>

0001dcce <arch_printk_char_out>:
}
   1dcce:	2000      	movs	r0, #0
   1dcd0:	4770      	bx	lr

0001dcd2 <str_out>:
{
   1dcd2:	b530      	push	{r4, r5, lr}
   1dcd4:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1dcd6:	680c      	ldr	r4, [r1, #0]
   1dcd8:	1c55      	adds	r5, r2, #1
   1dcda:	b114      	cbz	r4, 1dce2 <str_out+0x10>
   1dcdc:	684b      	ldr	r3, [r1, #4]
   1dcde:	4293      	cmp	r3, r2
   1dce0:	dc01      	bgt.n	1dce6 <str_out+0x14>
		ctx->count++;
   1dce2:	608d      	str	r5, [r1, #8]
}
   1dce4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1dce6:	3b01      	subs	r3, #1
   1dce8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1dcea:	bf08      	it	eq
   1dcec:	2200      	moveq	r2, #0
   1dcee:	608d      	str	r5, [r1, #8]
   1dcf0:	bf0c      	ite	eq
   1dcf2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1dcf4:	54a0      	strbne	r0, [r4, r2]
   1dcf6:	e7f5      	b.n	1dce4 <str_out+0x12>

0001dcf8 <printk>:
{
   1dcf8:	b40f      	push	{r0, r1, r2, r3}
   1dcfa:	b507      	push	{r0, r1, r2, lr}
   1dcfc:	a904      	add	r1, sp, #16
   1dcfe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1dd02:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1dd04:	f7f2 f9a2 	bl	1004c <vprintk>
}
   1dd08:	b003      	add	sp, #12
   1dd0a:	f85d eb04 	ldr.w	lr, [sp], #4
   1dd0e:	b004      	add	sp, #16
   1dd10:	4770      	bx	lr

0001dd12 <snprintk>:
{
   1dd12:	b40c      	push	{r2, r3}
   1dd14:	b507      	push	{r0, r1, r2, lr}
   1dd16:	ab04      	add	r3, sp, #16
   1dd18:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1dd1c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1dd1e:	f7f2 f9a3 	bl	10068 <vsnprintk>
}
   1dd22:	b003      	add	sp, #12
   1dd24:	f85d eb04 	ldr.w	lr, [sp], #4
   1dd28:	b002      	add	sp, #8
   1dd2a:	4770      	bx	lr

0001dd2c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1dd2c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1dd2e:	f013 0307 	ands.w	r3, r3, #7
   1dd32:	d105      	bne.n	1dd40 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1dd34:	6803      	ldr	r3, [r0, #0]
   1dd36:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1dd38:	bf0c      	ite	eq
   1dd3a:	2000      	moveq	r0, #0
   1dd3c:	2003      	movne	r0, #3
   1dd3e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1dd40:	2b02      	cmp	r3, #2
   1dd42:	d105      	bne.n	1dd50 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1dd44:	8b43      	ldrh	r3, [r0, #26]
   1dd46:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1dd48:	bf14      	ite	ne
   1dd4a:	2000      	movne	r0, #0
   1dd4c:	2004      	moveq	r0, #4
   1dd4e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1dd50:	2b01      	cmp	r3, #1
   1dd52:	d105      	bne.n	1dd60 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1dd54:	6803      	ldr	r3, [r0, #0]
   1dd56:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1dd58:	bf0c      	ite	eq
   1dd5a:	2000      	moveq	r0, #0
   1dd5c:	2005      	movne	r0, #5
   1dd5e:	4770      	bx	lr
	int evt = EVT_NOP;
   1dd60:	2000      	movs	r0, #0
}
   1dd62:	4770      	bx	lr

0001dd64 <notify_one>:
{
   1dd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd68:	460d      	mov	r5, r1
   1dd6a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1dd6c:	4619      	mov	r1, r3
   1dd6e:	1d28      	adds	r0, r5, #4
{
   1dd70:	4690      	mov	r8, r2
   1dd72:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1dd74:	f7ff ff92 	bl	1dc9c <sys_notify_finalize>
	if (cb) {
   1dd78:	4604      	mov	r4, r0
   1dd7a:	b138      	cbz	r0, 1dd8c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1dd7c:	4633      	mov	r3, r6
   1dd7e:	4642      	mov	r2, r8
   1dd80:	4629      	mov	r1, r5
   1dd82:	4638      	mov	r0, r7
   1dd84:	46a4      	mov	ip, r4
}
   1dd86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1dd8a:	4760      	bx	ip
}
   1dd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dd90 <transition_complete>:
{
   1dd90:	b410      	push	{r4}
	__asm__ volatile(
   1dd92:	f04f 0440 	mov.w	r4, #64	; 0x40
   1dd96:	f3ef 8211 	mrs	r2, BASEPRI
   1dd9a:	f384 8811 	msr	BASEPRI, r4
   1dd9e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1dda2:	6141      	str	r1, [r0, #20]
}
   1dda4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1dda6:	2101      	movs	r1, #1
   1dda8:	f7f2 b972 	b.w	10090 <process_event>

0001ddac <validate_args>:
{
   1ddac:	b510      	push	{r4, lr}
   1ddae:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ddb0:	b140      	cbz	r0, 1ddc4 <validate_args+0x18>
   1ddb2:	b139      	cbz	r1, 1ddc4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ddb4:	1d08      	adds	r0, r1, #4
   1ddb6:	f7ff ff5d 	bl	1dc74 <sys_notify_validate>
	if ((rv == 0)
   1ddba:	b928      	cbnz	r0, 1ddc8 <validate_args+0x1c>
	    && ((cli->notify.flags
   1ddbc:	68a3      	ldr	r3, [r4, #8]
   1ddbe:	f033 0303 	bics.w	r3, r3, #3
   1ddc2:	d001      	beq.n	1ddc8 <validate_args+0x1c>
		rv = -EINVAL;
   1ddc4:	f06f 0015 	mvn.w	r0, #21
}
   1ddc8:	bd10      	pop	{r4, pc}

0001ddca <onoff_manager_init>:
{
   1ddca:	b538      	push	{r3, r4, r5, lr}
   1ddcc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ddce:	4605      	mov	r5, r0
   1ddd0:	b158      	cbz	r0, 1ddea <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ddd2:	b151      	cbz	r1, 1ddea <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ddd4:	680b      	ldr	r3, [r1, #0]
   1ddd6:	b143      	cbz	r3, 1ddea <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1ddd8:	684b      	ldr	r3, [r1, #4]
   1ddda:	b133      	cbz	r3, 1ddea <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1dddc:	221c      	movs	r2, #28
   1ddde:	2100      	movs	r1, #0
   1dde0:	f002 fa54 	bl	2028c <memset>
   1dde4:	612c      	str	r4, [r5, #16]
	return 0;
   1dde6:	2000      	movs	r0, #0
}
   1dde8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ddea:	f06f 0015 	mvn.w	r0, #21
   1ddee:	e7fb      	b.n	1dde8 <onoff_manager_init+0x1e>

0001ddf0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1ddf0:	b570      	push	{r4, r5, r6, lr}
   1ddf2:	4604      	mov	r4, r0
   1ddf4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1ddf6:	f7ff ffd9 	bl	1ddac <validate_args>

	if (rv < 0) {
   1ddfa:	1e05      	subs	r5, r0, #0
   1ddfc:	db31      	blt.n	1de62 <onoff_request+0x72>
   1ddfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de02:	f3ef 8111 	mrs	r1, BASEPRI
   1de06:	f383 8811 	msr	BASEPRI, r3
   1de0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1de0e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1de10:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1de12:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1de16:	42ab      	cmp	r3, r5
   1de18:	f000 0207 	and.w	r2, r0, #7
   1de1c:	d02e      	beq.n	1de7c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1de1e:	2a02      	cmp	r2, #2
   1de20:	d10e      	bne.n	1de40 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1de22:	3301      	adds	r3, #1
   1de24:	8363      	strh	r3, [r4, #26]
	rv = state;
   1de26:	4615      	mov	r5, r2
		notify = true;
   1de28:	2301      	movs	r3, #1
	__asm__ volatile(
   1de2a:	f381 8811 	msr	BASEPRI, r1
   1de2e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1de32:	b1b3      	cbz	r3, 1de62 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1de34:	2300      	movs	r3, #0
   1de36:	4631      	mov	r1, r6
   1de38:	4620      	mov	r0, r4
   1de3a:	f7ff ff93 	bl	1dd64 <notify_one>
   1de3e:	e010      	b.n	1de62 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1de40:	0783      	lsls	r3, r0, #30
   1de42:	d001      	beq.n	1de48 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1de44:	2a06      	cmp	r2, #6
   1de46:	d10e      	bne.n	1de66 <onoff_request+0x76>
	parent->next = child;
   1de48:	2300      	movs	r3, #0
   1de4a:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1de4c:	6863      	ldr	r3, [r4, #4]
   1de4e:	b993      	cbnz	r3, 1de76 <onoff_request+0x86>
	list->head = node;
   1de50:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1de54:	4615      	mov	r5, r2
   1de56:	b962      	cbnz	r2, 1de72 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1de58:	460a      	mov	r2, r1
   1de5a:	4620      	mov	r0, r4
   1de5c:	2102      	movs	r1, #2
   1de5e:	f7f2 f917 	bl	10090 <process_event>
		}
	}

	return rv;
}
   1de62:	4628      	mov	r0, r5
   1de64:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1de66:	2a05      	cmp	r2, #5
   1de68:	bf0c      	ite	eq
   1de6a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1de6e:	f06f 0504 	mvnne.w	r5, #4
   1de72:	2300      	movs	r3, #0
   1de74:	e7d9      	b.n	1de2a <onoff_request+0x3a>
	parent->next = child;
   1de76:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1de78:	6066      	str	r6, [r4, #4]
}
   1de7a:	e7eb      	b.n	1de54 <onoff_request+0x64>
		rv = -EAGAIN;
   1de7c:	f06f 050a 	mvn.w	r5, #10
   1de80:	e7f7      	b.n	1de72 <onoff_request+0x82>

0001de82 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1de82:	b510      	push	{r4, lr}
	__asm__ volatile(
   1de84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de88:	f3ef 8211 	mrs	r2, BASEPRI
   1de8c:	f383 8811 	msr	BASEPRI, r3
   1de90:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1de94:	8b04      	ldrh	r4, [r0, #24]
   1de96:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1de9a:	2c02      	cmp	r4, #2
   1de9c:	d00a      	beq.n	1deb4 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1de9e:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1dea0:	bf0c      	ite	eq
   1dea2:	f06f 0004 	mvneq.w	r0, #4
   1dea6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1deaa:	f382 8811 	msr	BASEPRI, r2
   1deae:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1deb2:	e008      	b.n	1dec6 <onoff_release+0x44>
	mgr->refs -= 1U;
   1deb4:	8b43      	ldrh	r3, [r0, #26]
   1deb6:	3b01      	subs	r3, #1
   1deb8:	b29b      	uxth	r3, r3
   1deba:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1debc:	b923      	cbnz	r3, 1dec8 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1debe:	4621      	mov	r1, r4
   1dec0:	f7f2 f8e6 	bl	10090 <process_event>
	int rv = state;
   1dec4:	4620      	mov	r0, r4
}
   1dec6:	bd10      	pop	{r4, pc}
	int rv = state;
   1dec8:	4620      	mov	r0, r4
   1deca:	e7ee      	b.n	1deaa <onoff_release+0x28>

0001decc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1decc:	4604      	mov	r4, r0
   1dece:	b508      	push	{r3, lr}
   1ded0:	4608      	mov	r0, r1
   1ded2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1ded4:	461a      	mov	r2, r3
   1ded6:	47a0      	blx	r4
	return z_impl_k_current_get();
   1ded8:	f7ff fb12 	bl	1d500 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1dedc:	f7f4 ffe4 	bl	12ea8 <z_impl_k_thread_abort>

0001dee0 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1dee0:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1dee2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1dee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1deea:	bf2c      	ite	cs
   1deec:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1def0:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1def4:	4770      	bx	lr

0001def6 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1def6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1defa:	6880      	ldr	r0, [r0, #8]
   1defc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1df00:	bf2c      	ite	cs
   1df02:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1df06:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1df0a:	4770      	bx	lr

0001df0c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1df0c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1df0e:	2201      	movs	r2, #1
   1df10:	f7ff ffe6 	bl	1dee0 <chunk_field>
}
   1df14:	0840      	lsrs	r0, r0, #1
   1df16:	bd08      	pop	{r3, pc}

0001df18 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1df18:	6883      	ldr	r3, [r0, #8]
   1df1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1df1e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1df22:	d308      	bcc.n	1df36 <set_chunk_used+0x1e>
		if (used) {
   1df24:	684b      	ldr	r3, [r1, #4]
   1df26:	b11a      	cbz	r2, 1df30 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1df28:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1df2c:	604b      	str	r3, [r1, #4]
   1df2e:	4770      	bx	lr
   1df30:	f023 0301 	bic.w	r3, r3, #1
   1df34:	e7fa      	b.n	1df2c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1df36:	884b      	ldrh	r3, [r1, #2]
   1df38:	b11a      	cbz	r2, 1df42 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1df3a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1df3e:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1df40:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1df42:	f023 0301 	bic.w	r3, r3, #1
   1df46:	e7fa      	b.n	1df3e <set_chunk_used+0x26>

0001df48 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1df48:	0053      	lsls	r3, r2, #1
   1df4a:	2201      	movs	r2, #1
   1df4c:	f7ff bfd3 	b.w	1def6 <chunk_set>

0001df50 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1df50:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1df52:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1df54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1df58:	bf2c      	ite	cs
   1df5a:	2002      	movcs	r0, #2
   1df5c:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1df5e:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1df60:	fab0 f080 	clz	r0, r0
}
   1df64:	f1c0 001f 	rsb	r0, r0, #31
   1df68:	4770      	bx	lr

0001df6a <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1df6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df6e:	4616      	mov	r6, r2
   1df70:	4604      	mov	r4, r0
   1df72:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1df74:	f7ff ffca 	bl	1df0c <chunk_size>
   1df78:	4631      	mov	r1, r6
   1df7a:	4605      	mov	r5, r0
   1df7c:	4620      	mov	r0, r4
   1df7e:	f7ff ffc5 	bl	1df0c <chunk_size>
   1df82:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1df84:	462a      	mov	r2, r5
   1df86:	4639      	mov	r1, r7
   1df88:	4620      	mov	r0, r4
   1df8a:	f7ff ffdd 	bl	1df48 <set_chunk_size>
	return c + chunk_size(h, c);
   1df8e:	4631      	mov	r1, r6
   1df90:	4620      	mov	r0, r4
   1df92:	f7ff ffbb 	bl	1df0c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1df96:	462b      	mov	r3, r5
   1df98:	1831      	adds	r1, r6, r0
   1df9a:	2200      	movs	r2, #0
   1df9c:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1df9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1dfa2:	f7ff bfa8 	b.w	1def6 <chunk_set>

0001dfa6 <split_chunks>:
{
   1dfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfaa:	4614      	mov	r4, r2
   1dfac:	4605      	mov	r5, r0
   1dfae:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1dfb0:	f7ff ffac 	bl	1df0c <chunk_size>
	chunksz_t lsz = rc - lc;
   1dfb4:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1dfb8:	1b37      	subs	r7, r6, r4
   1dfba:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1dfbc:	4642      	mov	r2, r8
   1dfbe:	4631      	mov	r1, r6
   1dfc0:	4628      	mov	r0, r5
   1dfc2:	f7ff ffc1 	bl	1df48 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1dfc6:	463a      	mov	r2, r7
   1dfc8:	4621      	mov	r1, r4
   1dfca:	4628      	mov	r0, r5
   1dfcc:	f7ff ffbc 	bl	1df48 <set_chunk_size>
   1dfd0:	4643      	mov	r3, r8
   1dfd2:	2200      	movs	r2, #0
   1dfd4:	4621      	mov	r1, r4
   1dfd6:	4628      	mov	r0, r5
   1dfd8:	f7ff ff8d 	bl	1def6 <chunk_set>
	return c + chunk_size(h, c);
   1dfdc:	4621      	mov	r1, r4
   1dfde:	4628      	mov	r0, r5
   1dfe0:	f7ff ff94 	bl	1df0c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1dfe4:	463b      	mov	r3, r7
   1dfe6:	1821      	adds	r1, r4, r0
   1dfe8:	2200      	movs	r2, #0
   1dfea:	4628      	mov	r0, r5
}
   1dfec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1dff0:	f7ff bf81 	b.w	1def6 <chunk_set>

0001dff4 <free_list_remove_bidx>:
{
   1dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dff8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1dffa:	2203      	movs	r2, #3
   1dffc:	460e      	mov	r6, r1
   1dffe:	4604      	mov	r4, r0
   1e000:	f7ff ff6e 	bl	1dee0 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1e004:	4286      	cmp	r6, r0
   1e006:	4605      	mov	r5, r0
   1e008:	f107 0804 	add.w	r8, r7, #4
   1e00c:	d10b      	bne.n	1e026 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1e00e:	2301      	movs	r3, #1
   1e010:	fa03 f707 	lsl.w	r7, r3, r7
   1e014:	68e3      	ldr	r3, [r4, #12]
   1e016:	ea23 0307 	bic.w	r3, r3, r7
   1e01a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1e01c:	2300      	movs	r3, #0
   1e01e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1e022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1e026:	4631      	mov	r1, r6
   1e028:	2202      	movs	r2, #2
   1e02a:	4620      	mov	r0, r4
   1e02c:	f7ff ff58 	bl	1dee0 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1e030:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1e032:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1e034:	4601      	mov	r1, r0
		b->next = second;
   1e036:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1e03a:	4620      	mov	r0, r4
   1e03c:	2203      	movs	r2, #3
   1e03e:	f7ff ff5a 	bl	1def6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e042:	4633      	mov	r3, r6
   1e044:	4629      	mov	r1, r5
   1e046:	4620      	mov	r0, r4
   1e048:	2202      	movs	r2, #2
}
   1e04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e04e:	f7ff bf52 	b.w	1def6 <chunk_set>

0001e052 <free_list_remove>:
{
   1e052:	b538      	push	{r3, r4, r5, lr}
   1e054:	4604      	mov	r4, r0
   1e056:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1e058:	f7ff ff58 	bl	1df0c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e05c:	68a3      	ldr	r3, [r4, #8]
   1e05e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e062:	4601      	mov	r1, r0
   1e064:	d301      	bcc.n	1e06a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1e066:	2801      	cmp	r0, #1
   1e068:	d009      	beq.n	1e07e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e06a:	4620      	mov	r0, r4
   1e06c:	f7ff ff70 	bl	1df50 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1e070:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e072:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1e074:	4620      	mov	r0, r4
}
   1e076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1e07a:	f7ff bfbb 	b.w	1dff4 <free_list_remove_bidx>
}
   1e07e:	bd38      	pop	{r3, r4, r5, pc}

0001e080 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1e080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e084:	4605      	mov	r5, r0
   1e086:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1e088:	f7ff ff62 	bl	1df50 <bucket_idx>
   1e08c:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1e090:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e092:	f8da 9010 	ldr.w	r9, [sl, #16]
   1e096:	f1b9 0f00 	cmp.w	r9, #0
   1e09a:	d01b      	beq.n	1e0d4 <alloc_chunk+0x54>
   1e09c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1e09e:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1e0a2:	4628      	mov	r0, r5
   1e0a4:	4621      	mov	r1, r4
   1e0a6:	f7ff ff31 	bl	1df0c <chunk_size>
   1e0aa:	4540      	cmp	r0, r8
   1e0ac:	d307      	bcc.n	1e0be <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1e0ae:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1e0b0:	4621      	mov	r1, r4
   1e0b2:	4628      	mov	r0, r5
   1e0b4:	f7ff ff9e 	bl	1dff4 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1e0b8:	4620      	mov	r0, r4
   1e0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1e0be:	2203      	movs	r2, #3
   1e0c0:	4621      	mov	r1, r4
   1e0c2:	4628      	mov	r0, r5
   1e0c4:	f7ff ff0c 	bl	1dee0 <chunk_field>
		} while (--i && b->next != first);
   1e0c8:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1e0ca:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1e0ce:	d001      	beq.n	1e0d4 <alloc_chunk+0x54>
   1e0d0:	4581      	cmp	r9, r0
   1e0d2:	d1e4      	bne.n	1e09e <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1e0d4:	68e9      	ldr	r1, [r5, #12]
   1e0d6:	3601      	adds	r6, #1
   1e0d8:	f04f 34ff 	mov.w	r4, #4294967295
   1e0dc:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1e0de:	400c      	ands	r4, r1
   1e0e0:	d0ea      	beq.n	1e0b8 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1e0e2:	fa94 f2a4 	rbit	r2, r4
   1e0e6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1e0ea:	1d13      	adds	r3, r2, #4
   1e0ec:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1e0f0:	e7de      	b.n	1e0b0 <alloc_chunk+0x30>

0001e0f2 <free_list_add>:
{
   1e0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0f6:	4604      	mov	r4, r0
   1e0f8:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1e0fa:	f7ff ff07 	bl	1df0c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e0fe:	68a3      	ldr	r3, [r4, #8]
   1e100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e104:	4601      	mov	r1, r0
   1e106:	d301      	bcc.n	1e10c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1e108:	2801      	cmp	r0, #1
   1e10a:	d035      	beq.n	1e178 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e10c:	4620      	mov	r0, r4
   1e10e:	f7ff ff1f 	bl	1df50 <bucket_idx>
	if (b->next == 0U) {
   1e112:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1e116:	6916      	ldr	r6, [r2, #16]
   1e118:	b99e      	cbnz	r6, 1e142 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1e11a:	2301      	movs	r3, #1
   1e11c:	fa03 f000 	lsl.w	r0, r3, r0
   1e120:	68e3      	ldr	r3, [r4, #12]
   1e122:	4303      	orrs	r3, r0
   1e124:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1e126:	4629      	mov	r1, r5
		b->next = c;
   1e128:	6115      	str	r5, [r2, #16]
   1e12a:	462b      	mov	r3, r5
   1e12c:	2202      	movs	r2, #2
   1e12e:	4620      	mov	r0, r4
   1e130:	f7ff fee1 	bl	1def6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e134:	2203      	movs	r2, #3
   1e136:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1e138:	4620      	mov	r0, r4
}
   1e13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e13e:	f7ff beda 	b.w	1def6 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1e142:	2202      	movs	r2, #2
   1e144:	4631      	mov	r1, r6
   1e146:	4620      	mov	r0, r4
   1e148:	f7ff feca 	bl	1dee0 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1e14c:	2202      	movs	r2, #2
   1e14e:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1e150:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1e152:	4629      	mov	r1, r5
   1e154:	4620      	mov	r0, r4
   1e156:	f7ff fece 	bl	1def6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e15a:	4633      	mov	r3, r6
   1e15c:	2203      	movs	r2, #3
   1e15e:	4629      	mov	r1, r5
   1e160:	4620      	mov	r0, r4
   1e162:	f7ff fec8 	bl	1def6 <chunk_set>
   1e166:	2203      	movs	r2, #3
   1e168:	4639      	mov	r1, r7
   1e16a:	462b      	mov	r3, r5
   1e16c:	4620      	mov	r0, r4
   1e16e:	f7ff fec2 	bl	1def6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e172:	2202      	movs	r2, #2
   1e174:	4631      	mov	r1, r6
   1e176:	e7df      	b.n	1e138 <free_list_add+0x46>
   1e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e17c <free_chunk>:
{
   1e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e17e:	460c      	mov	r4, r1
   1e180:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1e182:	f7ff fec3 	bl	1df0c <chunk_size>
   1e186:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e188:	2201      	movs	r2, #1
   1e18a:	4631      	mov	r1, r6
   1e18c:	4628      	mov	r0, r5
   1e18e:	f7ff fea7 	bl	1dee0 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1e192:	07c3      	lsls	r3, r0, #31
   1e194:	d40c      	bmi.n	1e1b0 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1e196:	4631      	mov	r1, r6
   1e198:	4628      	mov	r0, r5
   1e19a:	f7ff ff5a 	bl	1e052 <free_list_remove>
	return c + chunk_size(h, c);
   1e19e:	4621      	mov	r1, r4
   1e1a0:	4628      	mov	r0, r5
   1e1a2:	f7ff feb3 	bl	1df0c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1e1a6:	4621      	mov	r1, r4
   1e1a8:	1822      	adds	r2, r4, r0
   1e1aa:	4628      	mov	r0, r5
   1e1ac:	f7ff fedd 	bl	1df6a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e1b0:	2200      	movs	r2, #0
   1e1b2:	4621      	mov	r1, r4
   1e1b4:	4628      	mov	r0, r5
   1e1b6:	f7ff fe93 	bl	1dee0 <chunk_field>
   1e1ba:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e1bc:	2201      	movs	r2, #1
   1e1be:	4639      	mov	r1, r7
   1e1c0:	4628      	mov	r0, r5
   1e1c2:	f7ff fe8d 	bl	1dee0 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1e1c6:	f010 0601 	ands.w	r6, r0, #1
   1e1ca:	d113      	bne.n	1e1f4 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1e1cc:	4639      	mov	r1, r7
   1e1ce:	4628      	mov	r0, r5
   1e1d0:	f7ff ff3f 	bl	1e052 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e1d4:	4621      	mov	r1, r4
   1e1d6:	4632      	mov	r2, r6
   1e1d8:	4628      	mov	r0, r5
   1e1da:	f7ff fe81 	bl	1dee0 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1e1de:	4622      	mov	r2, r4
   1e1e0:	1a21      	subs	r1, r4, r0
   1e1e2:	4628      	mov	r0, r5
   1e1e4:	f7ff fec1 	bl	1df6a <merge_chunks>
   1e1e8:	4621      	mov	r1, r4
   1e1ea:	4632      	mov	r2, r6
   1e1ec:	4628      	mov	r0, r5
   1e1ee:	f7ff fe77 	bl	1dee0 <chunk_field>
   1e1f2:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1e1f4:	4621      	mov	r1, r4
   1e1f6:	4628      	mov	r0, r5
}
   1e1f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1e1fc:	f7ff bf79 	b.w	1e0f2 <free_list_add>

0001e200 <sys_heap_free>:
{
   1e200:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1e202:	b191      	cbz	r1, 1e22a <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1e204:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1e206:	6883      	ldr	r3, [r0, #8]
   1e208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e20c:	bf2c      	ite	cs
   1e20e:	2408      	movcs	r4, #8
   1e210:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e212:	1b0c      	subs	r4, r1, r4
   1e214:	1a24      	subs	r4, r4, r0
   1e216:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1e218:	4621      	mov	r1, r4
   1e21a:	2200      	movs	r2, #0
   1e21c:	f7ff fe7c 	bl	1df18 <set_chunk_used>
	free_chunk(h, c);
   1e220:	4621      	mov	r1, r4
}
   1e222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1e226:	f7ff bfa9 	b.w	1e17c <free_chunk>
}
   1e22a:	bd10      	pop	{r4, pc}

0001e22c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e22c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1e22e:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1e230:	b909      	cbnz	r1, 1e236 <sys_heap_alloc+0xa>
		return NULL;
   1e232:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1e234:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1e236:	68ab      	ldr	r3, [r5, #8]
   1e238:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1e23c:	d9f9      	bls.n	1e232 <sys_heap_alloc+0x6>
   1e23e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e242:	bf2c      	ite	cs
   1e244:	2208      	movcs	r2, #8
   1e246:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e248:	1dcc      	adds	r4, r1, #7
   1e24a:	4414      	add	r4, r2
   1e24c:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1e24e:	4621      	mov	r1, r4
   1e250:	4628      	mov	r0, r5
   1e252:	f7ff ff15 	bl	1e080 <alloc_chunk>
	if (c == 0U) {
   1e256:	4606      	mov	r6, r0
   1e258:	2800      	cmp	r0, #0
   1e25a:	d0ea      	beq.n	1e232 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1e25c:	4601      	mov	r1, r0
   1e25e:	4628      	mov	r0, r5
   1e260:	f7ff fe54 	bl	1df0c <chunk_size>
   1e264:	42a0      	cmp	r0, r4
   1e266:	d909      	bls.n	1e27c <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1e268:	4434      	add	r4, r6
   1e26a:	4631      	mov	r1, r6
   1e26c:	4628      	mov	r0, r5
   1e26e:	4622      	mov	r2, r4
   1e270:	f7ff fe99 	bl	1dfa6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1e274:	4621      	mov	r1, r4
   1e276:	4628      	mov	r0, r5
   1e278:	f7ff ff3b 	bl	1e0f2 <free_list_add>
	set_chunk_used(h, c, true);
   1e27c:	4628      	mov	r0, r5
   1e27e:	2201      	movs	r2, #1
   1e280:	4631      	mov	r1, r6
   1e282:	f7ff fe49 	bl	1df18 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1e286:	68ab      	ldr	r3, [r5, #8]
   1e288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e28c:	bf2c      	ite	cs
   1e28e:	2008      	movcs	r0, #8
   1e290:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e292:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1e296:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1e298:	e7cc      	b.n	1e234 <sys_heap_alloc+0x8>

0001e29a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1e29a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1e29e:	6806      	ldr	r6, [r0, #0]
{
   1e2a0:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1e2a2:	424a      	negs	r2, r1
   1e2a4:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1e2a8:	ea31 0202 	bics.w	r2, r1, r2
   1e2ac:	68b5      	ldr	r5, [r6, #8]
{
   1e2ae:	460b      	mov	r3, r1
	if (align != rew) {
   1e2b0:	d00f      	beq.n	1e2d2 <sys_heap_aligned_alloc+0x38>
   1e2b2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e2b6:	bf34      	ite	cc
   1e2b8:	2104      	movcc	r1, #4
   1e2ba:	2108      	movcs	r1, #8
   1e2bc:	42b9      	cmp	r1, r7
   1e2be:	460a      	mov	r2, r1
   1e2c0:	46b9      	mov	r9, r7
   1e2c2:	bf28      	it	cs
   1e2c4:	463a      	movcs	r2, r7
		align -= rew;
   1e2c6:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1e2c8:	b994      	cbnz	r4, 1e2f0 <sys_heap_aligned_alloc+0x56>
		return NULL;
   1e2ca:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1e2cc:	4628      	mov	r0, r5
   1e2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e2d2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e2d6:	bf34      	ite	cc
   1e2d8:	2204      	movcc	r2, #4
   1e2da:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1e2dc:	4291      	cmp	r1, r2
   1e2de:	d804      	bhi.n	1e2ea <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1e2e0:	4621      	mov	r1, r4
}
   1e2e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1e2e6:	f7ff bfa1 	b.w	1e22c <sys_heap_alloc>
		rew = 0;
   1e2ea:	f04f 0900 	mov.w	r9, #0
   1e2ee:	e7eb      	b.n	1e2c8 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1e2f0:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1e2f4:	d9e9      	bls.n	1e2ca <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1e2f6:	1de1      	adds	r1, r4, #7
   1e2f8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e2fc:	4439      	add	r1, r7
   1e2fe:	bf2c      	ite	cs
   1e300:	2308      	movcs	r3, #8
   1e302:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e304:	1a89      	subs	r1, r1, r2
   1e306:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1e308:	08c9      	lsrs	r1, r1, #3
   1e30a:	4630      	mov	r0, r6
   1e30c:	f7ff feb8 	bl	1e080 <alloc_chunk>
	if (c0 == 0) {
   1e310:	4680      	mov	r8, r0
   1e312:	2800      	cmp	r0, #0
   1e314:	d0d9      	beq.n	1e2ca <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1e316:	68b3      	ldr	r3, [r6, #8]
   1e318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e31c:	bf2c      	ite	cs
   1e31e:	2308      	movcs	r3, #8
   1e320:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1e322:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1e326:	441d      	add	r5, r3
   1e328:	1e7a      	subs	r2, r7, #1
   1e32a:	4435      	add	r5, r6
   1e32c:	427f      	negs	r7, r7
   1e32e:	4415      	add	r5, r2
   1e330:	403d      	ands	r5, r7
   1e332:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e336:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e338:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e33a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e33c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e33e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1e342:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1e344:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e348:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1e34c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1e350:	d208      	bcs.n	1e364 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1e352:	4601      	mov	r1, r0
   1e354:	463a      	mov	r2, r7
   1e356:	4630      	mov	r0, r6
   1e358:	f7ff fe25 	bl	1dfa6 <split_chunks>
		free_list_add(h, c0);
   1e35c:	4641      	mov	r1, r8
   1e35e:	4630      	mov	r0, r6
   1e360:	f7ff fec7 	bl	1e0f2 <free_list_add>
	return c + chunk_size(h, c);
   1e364:	4639      	mov	r1, r7
   1e366:	4630      	mov	r0, r6
   1e368:	f7ff fdd0 	bl	1df0c <chunk_size>
   1e36c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1e36e:	4284      	cmp	r4, r0
   1e370:	d208      	bcs.n	1e384 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1e372:	4639      	mov	r1, r7
   1e374:	4630      	mov	r0, r6
   1e376:	4622      	mov	r2, r4
   1e378:	f7ff fe15 	bl	1dfa6 <split_chunks>
		free_list_add(h, c_end);
   1e37c:	4621      	mov	r1, r4
   1e37e:	4630      	mov	r0, r6
   1e380:	f7ff feb7 	bl	1e0f2 <free_list_add>
	set_chunk_used(h, c, true);
   1e384:	2201      	movs	r2, #1
   1e386:	4639      	mov	r1, r7
   1e388:	4630      	mov	r0, r6
   1e38a:	f7ff fdc5 	bl	1df18 <set_chunk_used>
	return mem;
   1e38e:	e79d      	b.n	1e2cc <sys_heap_aligned_alloc+0x32>

0001e390 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1e390:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e396:	bf2c      	ite	cs
   1e398:	2508      	movcs	r5, #8
   1e39a:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1e39c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e39e:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e3a0:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e3a2:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e3a6:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1e3aa:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1e3ac:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1e3ae:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1e3b0:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1e3b2:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1e3b4:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1e3b6:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1e3b8:	4620      	mov	r0, r4
   1e3ba:	f7ff fdc9 	bl	1df50 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e3be:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e3c0:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1e3c2:	1c41      	adds	r1, r0, #1
   1e3c4:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1e3c6:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1e3ca:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1e3cc:	428b      	cmp	r3, r1
   1e3ce:	db2f      	blt.n	1e430 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1e3d0:	4632      	mov	r2, r6
   1e3d2:	4620      	mov	r0, r4
   1e3d4:	2100      	movs	r1, #0
   1e3d6:	f7ff fdb7 	bl	1df48 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e3da:	2300      	movs	r3, #0
   1e3dc:	461a      	mov	r2, r3
   1e3de:	4619      	mov	r1, r3
   1e3e0:	4620      	mov	r0, r4
   1e3e2:	f7ff fd88 	bl	1def6 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1e3e6:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1e3e8:	4620      	mov	r0, r4
   1e3ea:	2201      	movs	r2, #1
   1e3ec:	2100      	movs	r1, #0
   1e3ee:	f7ff fd93 	bl	1df18 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1e3f2:	463a      	mov	r2, r7
   1e3f4:	4631      	mov	r1, r6
   1e3f6:	f7ff fda7 	bl	1df48 <set_chunk_size>
   1e3fa:	4633      	mov	r3, r6
   1e3fc:	4631      	mov	r1, r6
   1e3fe:	4620      	mov	r0, r4
   1e400:	2200      	movs	r2, #0
   1e402:	f7ff fd78 	bl	1def6 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1e406:	4629      	mov	r1, r5
   1e408:	4620      	mov	r0, r4
   1e40a:	2200      	movs	r2, #0
   1e40c:	f7ff fd9c 	bl	1df48 <set_chunk_size>
   1e410:	463b      	mov	r3, r7
   1e412:	4629      	mov	r1, r5
   1e414:	4620      	mov	r0, r4
   1e416:	2200      	movs	r2, #0
   1e418:	f7ff fd6d 	bl	1def6 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1e41c:	4629      	mov	r1, r5
   1e41e:	4620      	mov	r0, r4
   1e420:	2201      	movs	r2, #1
   1e422:	f7ff fd79 	bl	1df18 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1e426:	4631      	mov	r1, r6
}
   1e428:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1e42c:	f7ff be61 	b.w	1e0f2 <free_list_add>
		h->buckets[i].next = 0;
   1e430:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1e434:	3301      	adds	r3, #1
   1e436:	e7c9      	b.n	1e3cc <sys_heap_init+0x3c>

0001e438 <encode_uint>:
{
   1e438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e43c:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1e43e:	78d3      	ldrb	r3, [r2, #3]
{
   1e440:	4614      	mov	r4, r2
	switch (specifier) {
   1e442:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e444:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1e448:	4606      	mov	r6, r0
   1e44a:	460f      	mov	r7, r1
   1e44c:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1e44e:	d02d      	beq.n	1e4ac <encode_uint+0x74>
   1e450:	d828      	bhi.n	1e4a4 <encode_uint+0x6c>
		return 16;
   1e452:	2b58      	cmp	r3, #88	; 0x58
   1e454:	bf14      	ite	ne
   1e456:	250a      	movne	r5, #10
   1e458:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1e45a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1e45e:	46aa      	mov	sl, r5
   1e460:	f04f 0b00 	mov.w	fp, #0
   1e464:	4652      	mov	r2, sl
   1e466:	465b      	mov	r3, fp
   1e468:	4630      	mov	r0, r6
   1e46a:	4639      	mov	r1, r7
   1e46c:	f7e1 fe38 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e470:	2a09      	cmp	r2, #9
   1e472:	b2d3      	uxtb	r3, r2
   1e474:	d81f      	bhi.n	1e4b6 <encode_uint+0x7e>
   1e476:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1e478:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e47a:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1e47c:	bf08      	it	eq
   1e47e:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e480:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1e484:	d301      	bcc.n	1e48a <encode_uint+0x52>
   1e486:	45c8      	cmp	r8, r9
   1e488:	d812      	bhi.n	1e4b0 <encode_uint+0x78>
	if (conv->flag_hash) {
   1e48a:	7823      	ldrb	r3, [r4, #0]
   1e48c:	069b      	lsls	r3, r3, #26
   1e48e:	d505      	bpl.n	1e49c <encode_uint+0x64>
		if (radix == 8) {
   1e490:	2d08      	cmp	r5, #8
   1e492:	d116      	bne.n	1e4c2 <encode_uint+0x8a>
			conv->altform_0 = true;
   1e494:	78a3      	ldrb	r3, [r4, #2]
   1e496:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1e49a:	70a3      	strb	r3, [r4, #2]
}
   1e49c:	4640      	mov	r0, r8
   1e49e:	b003      	add	sp, #12
   1e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1e4a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1e4a8:	2b70      	cmp	r3, #112	; 0x70
   1e4aa:	e7d3      	b.n	1e454 <encode_uint+0x1c>
	switch (specifier) {
   1e4ac:	2508      	movs	r5, #8
   1e4ae:	e7d4      	b.n	1e45a <encode_uint+0x22>
		value /= radix;
   1e4b0:	4606      	mov	r6, r0
   1e4b2:	460f      	mov	r7, r1
   1e4b4:	e7d6      	b.n	1e464 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e4b6:	9a01      	ldr	r2, [sp, #4]
   1e4b8:	2a19      	cmp	r2, #25
   1e4ba:	bf94      	ite	ls
   1e4bc:	3337      	addls	r3, #55	; 0x37
   1e4be:	3357      	addhi	r3, #87	; 0x57
   1e4c0:	e7da      	b.n	1e478 <encode_uint+0x40>
		} else if (radix == 16) {
   1e4c2:	2d10      	cmp	r5, #16
   1e4c4:	d1ea      	bne.n	1e49c <encode_uint+0x64>
			conv->altform_0c = true;
   1e4c6:	78a3      	ldrb	r3, [r4, #2]
   1e4c8:	f043 0310 	orr.w	r3, r3, #16
   1e4cc:	e7e5      	b.n	1e49a <encode_uint+0x62>

0001e4ce <outs>:
{
   1e4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e4d2:	4607      	mov	r7, r0
   1e4d4:	4688      	mov	r8, r1
   1e4d6:	4615      	mov	r5, r2
   1e4d8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e4da:	4614      	mov	r4, r2
   1e4dc:	42b4      	cmp	r4, r6
   1e4de:	eba4 0005 	sub.w	r0, r4, r5
   1e4e2:	d302      	bcc.n	1e4ea <outs+0x1c>
   1e4e4:	b93e      	cbnz	r6, 1e4f6 <outs+0x28>
   1e4e6:	7823      	ldrb	r3, [r4, #0]
   1e4e8:	b12b      	cbz	r3, 1e4f6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1e4ea:	f814 0b01 	ldrb.w	r0, [r4], #1
   1e4ee:	4641      	mov	r1, r8
   1e4f0:	47b8      	blx	r7
		if (rc < 0) {
   1e4f2:	2800      	cmp	r0, #0
   1e4f4:	daf2      	bge.n	1e4dc <outs+0xe>
}
   1e4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e4fa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1e4fa:	4770      	bx	lr

0001e4fc <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1e4fc:	2300      	movs	r3, #0
	list->head = NULL;
   1e4fe:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e502:	4770      	bx	lr

0001e504 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1e504:	6803      	ldr	r3, [r0, #0]
   1e506:	b923      	cbnz	r3, 1e512 <log_list_add_tail+0xe>
		list->head = msg;
   1e508:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1e50a:	2300      	movs	r3, #0
	list->tail = msg;
   1e50c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1e50e:	600b      	str	r3, [r1, #0]
}
   1e510:	4770      	bx	lr
		list->tail->next = msg;
   1e512:	6843      	ldr	r3, [r0, #4]
   1e514:	6019      	str	r1, [r3, #0]
   1e516:	e7f8      	b.n	1e50a <log_list_add_tail+0x6>

0001e518 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1e518:	6800      	ldr	r0, [r0, #0]
   1e51a:	4770      	bx	lr

0001e51c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1e51c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1e51e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1e520:	b108      	cbz	r0, 1e526 <log_list_head_get+0xa>
		list->head = list->head->next;
   1e522:	6802      	ldr	r2, [r0, #0]
   1e524:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1e526:	4770      	bx	lr

0001e528 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1e528:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1e52a:	f7f2 fd1d 	bl	10f68 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1e52e:	b118      	cbz	r0, 1e538 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1e530:	2301      	movs	r3, #1
   1e532:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1e534:	2300      	movs	r3, #0
   1e536:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1e538:	bd08      	pop	{r3, pc}

0001e53a <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1e53a:	f7f3 bec7 	b.w	122cc <sys_clock_cycle_get_32>

0001e53e <dummy_timestamp>:
   1e53e:	2000      	movs	r0, #0
   1e540:	4770      	bx	lr

0001e542 <z_log_get_s_mask>:
{
   1e542:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e544:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   1e546:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1e548:	4603      	mov	r3, r0
	bool arm = false;
   1e54a:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1e54c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1e54e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1e552:	b10c      	cbz	r4, 1e558 <z_log_get_s_mask+0x16>
   1e554:	428b      	cmp	r3, r1
   1e556:	d300      	bcc.n	1e55a <z_log_get_s_mask+0x18>
}
   1e558:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1e55a:	2c25      	cmp	r4, #37	; 0x25
   1e55c:	d102      	bne.n	1e564 <z_log_get_s_mask+0x22>
			arm = !arm;
   1e55e:	f082 0201 	eor.w	r2, r2, #1
   1e562:	e7f4      	b.n	1e54e <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1e564:	2a00      	cmp	r2, #0
   1e566:	d0f2      	beq.n	1e54e <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e568:	f044 0620 	orr.w	r6, r4, #32
   1e56c:	3e61      	subs	r6, #97	; 0x61
   1e56e:	2e19      	cmp	r6, #25
   1e570:	d8ed      	bhi.n	1e54e <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1e572:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1e574:	bf04      	itt	eq
   1e576:	fa07 f203 	lsleq.w	r2, r7, r3
   1e57a:	4310      	orreq	r0, r2
			arg++;
   1e57c:	3301      	adds	r3, #1
			arm = false;
   1e57e:	2200      	movs	r2, #0
   1e580:	e7e5      	b.n	1e54e <z_log_get_s_mask+0xc>

0001e582 <log_0>:
{
   1e582:	b538      	push	{r3, r4, r5, lr}
   1e584:	4605      	mov	r5, r0
   1e586:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1e588:	f7ff ffce 	bl	1e528 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e58c:	b128      	cbz	r0, 1e59a <log_0+0x18>
		msg->str = str;
   1e58e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1e590:	4621      	mov	r1, r4
}
   1e592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1e596:	f7f2 bc01 	b.w	10d9c <msg_finalize>
}
   1e59a:	bd38      	pop	{r3, r4, r5, pc}

0001e59c <log_1>:
{
   1e59c:	b570      	push	{r4, r5, r6, lr}
   1e59e:	4606      	mov	r6, r0
   1e5a0:	460d      	mov	r5, r1
   1e5a2:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e5a4:	f7ff ffc0 	bl	1e528 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e5a8:	b158      	cbz	r0, 1e5c2 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1e5aa:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1e5ac:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1e5ae:	2101      	movs	r1, #1
   1e5b0:	f361 1207 	bfi	r2, r1, #4, #4
   1e5b4:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1e5b6:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1e5b8:	4621      	mov	r1, r4
}
   1e5ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1e5be:	f7f2 bbed 	b.w	10d9c <msg_finalize>
}
   1e5c2:	bd70      	pop	{r4, r5, r6, pc}

0001e5c4 <log_2>:
{
   1e5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5c8:	4680      	mov	r8, r0
   1e5ca:	460f      	mov	r7, r1
   1e5cc:	4616      	mov	r6, r2
   1e5ce:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e5d0:	f7ff ffaa 	bl	1e528 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e5d4:	b168      	cbz	r0, 1e5f2 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1e5d6:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1e5d8:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1e5dc:	2202      	movs	r2, #2
   1e5de:	f362 1307 	bfi	r3, r2, #4, #4
   1e5e2:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1e5e4:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1e5e8:	4629      	mov	r1, r5
}
   1e5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1e5ee:	f7f2 bbd5 	b.w	10d9c <msg_finalize>
}
   1e5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e5f6 <log_3>:
{
   1e5f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e5fa:	4680      	mov	r8, r0
   1e5fc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1e600:	460f      	mov	r7, r1
   1e602:	4616      	mov	r6, r2
   1e604:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e606:	f7ff ff8f 	bl	1e528 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e60a:	b170      	cbz	r0, 1e62a <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1e60c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1e60e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1e612:	2203      	movs	r2, #3
   1e614:	f362 1307 	bfi	r3, r2, #4, #4
   1e618:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1e61a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1e61e:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1e620:	4649      	mov	r1, r9
}
   1e622:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1e626:	f7f2 bbb9 	b.w	10d9c <msg_finalize>
}
   1e62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e62e <log_n>:
{
   1e62e:	b510      	push	{r4, lr}
   1e630:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1e632:	f000 f849 	bl	1e6c8 <log_msg_create_n>
		if (msg == NULL) {
   1e636:	b120      	cbz	r0, 1e642 <log_n+0x14>
		msg_finalize(msg, src_level);
   1e638:	4621      	mov	r1, r4
}
   1e63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1e63e:	f7f2 bbad 	b.w	10d9c <msg_finalize>
}
   1e642:	bd10      	pop	{r4, pc}

0001e644 <log_hexdump>:
{
   1e644:	b510      	push	{r4, lr}
   1e646:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   1e648:	f000 f892 	bl	1e770 <log_msg_hexdump_create>
		if (msg == NULL) {
   1e64c:	b120      	cbz	r0, 1e658 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   1e64e:	4621      	mov	r1, r4
}
   1e650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1e654:	f7f2 bba2 	b.w	10d9c <msg_finalize>
}
   1e658:	bd10      	pop	{r4, pc}

0001e65a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1e65a:	7a40      	ldrb	r0, [r0, #9]
}
   1e65c:	0900      	lsrs	r0, r0, #4
   1e65e:	4770      	bx	lr

0001e660 <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1e660:	7a43      	ldrb	r3, [r0, #9]
   1e662:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1e666:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1e66a:	d216      	bcs.n	1e69a <log_msg_arg_get+0x3a>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e66c:	2a03      	cmp	r2, #3
   1e66e:	d803      	bhi.n	1e678 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1e670:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e674:	6948      	ldr	r0, [r1, #20]
   1e676:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1e678:	2901      	cmp	r1, #1
   1e67a:	d803      	bhi.n	1e684 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1e67c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e680:	6988      	ldr	r0, [r1, #24]
   1e682:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1e684:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e686:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1e688:	2906      	cmp	r1, #6
   1e68a:	d803      	bhi.n	1e694 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1e68c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1e690:	6848      	ldr	r0, [r1, #4]
   1e692:	4770      	bx	lr
		cont = cont->next;
   1e694:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1e696:	3907      	subs	r1, #7
		cont = cont->next;
   1e698:	e7f6      	b.n	1e688 <log_msg_arg_get+0x28>
		return 0;
   1e69a:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
   1e69c:	4770      	bx	lr

0001e69e <log_msg_put>:
{
   1e69e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e6a0:	1d02      	adds	r2, r0, #4
   1e6a2:	f3bf 8f5b 	dmb	ish
   1e6a6:	e852 1f00 	ldrex	r1, [r2]
   1e6aa:	3901      	subs	r1, #1
   1e6ac:	e842 1c00 	strex	ip, r1, [r2]
   1e6b0:	f1bc 0f00 	cmp.w	ip, #0
   1e6b4:	d1f7      	bne.n	1e6a6 <log_msg_put+0x8>
   1e6b6:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1e6ba:	685b      	ldr	r3, [r3, #4]
   1e6bc:	b90b      	cbnz	r3, 1e6c2 <log_msg_put+0x24>
		msg_free(msg);
   1e6be:	f7f2 bc67 	b.w	10f90 <msg_free>
}
   1e6c2:	4770      	bx	lr

0001e6c4 <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
   1e6c4:	6900      	ldr	r0, [r0, #16]
   1e6c6:	4770      	bx	lr

0001e6c8 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
   1e6c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6cc:	4681      	mov	r9, r0
   1e6ce:	4688      	mov	r8, r1
   1e6d0:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1e6d2:	f7f2 fc49 	bl	10f68 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1e6d6:	4604      	mov	r4, r0
   1e6d8:	b330      	cbz	r0, 1e728 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1e6da:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1e6dc:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e6de:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1e6e0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1e6e2:	8107      	strh	r7, [r0, #8]
   1e6e4:	d909      	bls.n	1e6fa <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1e6e6:	2202      	movs	r2, #2
   1e6e8:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e6ea:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1e6ee:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1e6f2:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1e6f4:	f1ba 0f00 	cmp.w	sl, #0
   1e6f8:	dc0e      	bgt.n	1e718 <log_msg_create_n+0x50>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1e6fa:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1e6fc:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1e700:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e704:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1e706:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e708:	d818      	bhi.n	1e73c <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1e70a:	00aa      	lsls	r2, r5, #2
   1e70c:	4641      	mov	r1, r8
   1e70e:	f104 0014 	add.w	r0, r4, #20
   1e712:	f001 fd90 	bl	20236 <memcpy>
	while (nargs != 0U) {
   1e716:	e007      	b.n	1e728 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1e718:	f7f2 fc26 	bl	10f68 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1e71c:	4606      	mov	r6, r0
   1e71e:	b930      	cbnz	r0, 1e72e <log_msg_create_n+0x66>
			msg_free(msg);
   1e720:	4620      	mov	r0, r4
   1e722:	f7f2 fc35 	bl	10f90 <msg_free>
			return NULL;
   1e726:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   1e728:	4620      	mov	r0, r4
   1e72a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1e72e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1e732:	f1aa 0a07 	sub.w	sl, sl, #7
   1e736:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1e738:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1e73a:	e7db      	b.n	1e6f4 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1e73c:	4641      	mov	r1, r8
   1e73e:	2208      	movs	r2, #8
   1e740:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1e744:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1e746:	f001 fd76 	bl	20236 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e74a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1e74c:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1e750:	2d07      	cmp	r5, #7
   1e752:	462e      	mov	r6, r5
   1e754:	bf28      	it	cs
   1e756:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1e758:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1e75c:	4641      	mov	r1, r8
   1e75e:	1d38      	adds	r0, r7, #4
   1e760:	464a      	mov	r2, r9
   1e762:	f001 fd68 	bl	20236 <memcpy>
	while (nargs != 0U) {
   1e766:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1e768:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1e76a:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1e76c:	d1f0      	bne.n	1e750 <log_msg_create_n+0x88>
   1e76e:	e7db      	b.n	1e728 <log_msg_create_n+0x60>

0001e770 <log_msg_hexdump_create>:

struct log_msg *log_msg_hexdump_create(const char *str,
				       const uint8_t *data,
				       uint32_t length)
{
   1e770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct log_msg_cont *cont;
	struct log_msg *msg;
	uint32_t chunk_length;

	/* Saturate length. */
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1e774:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1e778:	4295      	cmp	r5, r2
{
   1e77a:	4680      	mov	r8, r0
   1e77c:	460e      	mov	r6, r1
   1e77e:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1e780:	bf28      	it	cs
   1e782:	4615      	movcs	r5, r2
		 LOG_MSG_HEXDUMP_MAX_LENGTH : length;

	msg = (struct log_msg *)log_msg_chunk_alloc();
   1e784:	f7f2 fbf0 	bl	10f68 <log_msg_chunk_alloc>
	if (msg == NULL) {
   1e788:	4604      	mov	r4, r0
   1e78a:	b380      	cbz	r0, 1e7ee <log_msg_hexdump_create+0x7e>
		return NULL;
	}

	/* all fields reset to 0, reference counter to 1 */
	msg->hdr.ref_cnt = 1;
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1e78c:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.params.hexdump.length = length;
	msg->str = str;
   1e78e:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1e792:	2301      	movs	r3, #1
   1e794:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1e796:	00ab      	lsls	r3, r5, #2
   1e798:	f043 0301 	orr.w	r3, r3, #1
   1e79c:	f002 0202 	and.w	r2, r2, #2
   1e7a0:	4313      	orrs	r3, r2


	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1e7a2:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1e7a4:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1e7a6:	f100 0814 	add.w	r8, r0, #20
   1e7aa:	d917      	bls.n	1e7dc <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   1e7ac:	2208      	movs	r2, #8
   1e7ae:	4631      	mov	r1, r6
   1e7b0:	3018      	adds	r0, #24
   1e7b2:	f001 fd40 	bl	20236 <memcpy>
		       data,
		       LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK);
		msg->payload.ext.next = NULL;
		msg->hdr.params.generic.ext = 1;
   1e7b6:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   1e7b8:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   1e7ba:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   1e7be:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1e7c0:	7222      	strb	r2, [r4, #8]

		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1e7c2:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1e7c4:	3d08      	subs	r5, #8
		length = 0U;
	}

	prev_cont = &msg->payload.ext.next;

	while (length > 0) {
   1e7c6:	4699      	mov	r9, r3
   1e7c8:	b18d      	cbz	r5, 1e7ee <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1e7ca:	f7f2 fbcd 	bl	10f68 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1e7ce:	4607      	mov	r7, r0
   1e7d0:	b980      	cbnz	r0, 1e7f4 <log_msg_hexdump_create+0x84>
			msg_free(msg);
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	f7f2 fbdc 	bl	10f90 <msg_free>
			return NULL;
   1e7d8:	463c      	mov	r4, r7
   1e7da:	e008      	b.n	1e7ee <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1e7dc:	462a      	mov	r2, r5
   1e7de:	4631      	mov	r1, r6
   1e7e0:	4640      	mov	r0, r8
   1e7e2:	f001 fd28 	bl	20236 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1e7e6:	7a23      	ldrb	r3, [r4, #8]
   1e7e8:	f36f 0341 	bfc	r3, #1, #1
   1e7ec:	7223      	strb	r3, [r4, #8]
		data += chunk_length;
		length -= chunk_length;
	}

	return msg;
}
   1e7ee:	4620      	mov	r0, r4
   1e7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1e7f4:	2d1c      	cmp	r5, #28
   1e7f6:	462f      	mov	r7, r5
   1e7f8:	bf28      	it	cs
   1e7fa:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1e7fc:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1e800:	4631      	mov	r1, r6
		cont->next = NULL;
   1e802:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1e806:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1e808:	463a      	mov	r2, r7
   1e80a:	3004      	adds	r0, #4
   1e80c:	f001 fd13 	bl	20236 <memcpy>
		data += chunk_length;
   1e810:	443e      	add	r6, r7
		length -= chunk_length;
   1e812:	1bed      	subs	r5, r5, r7
   1e814:	e7d8      	b.n	1e7c8 <log_msg_hexdump_create+0x58>

0001e816 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1e816:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1e81a:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1e81e:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1e820:	4640      	mov	r0, r8
{
   1e822:	461f      	mov	r7, r3
   1e824:	460c      	mov	r4, r1
   1e826:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1e828:	f001 fcca 	bl	201c0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1e82c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1e830:	9300      	str	r3, [sp, #0]
   1e832:	b280      	uxth	r0, r0
   1e834:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1e838:	463b      	mov	r3, r7
   1e83a:	4632      	mov	r2, r6
   1e83c:	4621      	mov	r1, r4
   1e83e:	4628      	mov	r0, r5
   1e840:	f003 f886 	bl	21950 <bt_gatt_attr_read>
}
   1e844:	b004      	add	sp, #16
   1e846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e84a <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1e84a:	2000      	movs	r0, #0
   1e84c:	4770      	bx	lr

0001e84e <z_impl_flash_write>:
{
   1e84e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   1e852:	6886      	ldr	r6, [r0, #8]
{
   1e854:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   1e856:	68f3      	ldr	r3, [r6, #12]
{
   1e858:	4605      	mov	r5, r0
   1e85a:	460f      	mov	r7, r1
   1e85c:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   1e85e:	b95b      	cbnz	r3, 1e878 <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   1e860:	6874      	ldr	r4, [r6, #4]
   1e862:	464b      	mov	r3, r9
   1e864:	4642      	mov	r2, r8
   1e866:	4639      	mov	r1, r7
   1e868:	4628      	mov	r0, r5
   1e86a:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   1e86c:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   1e86e:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   1e870:	b943      	cbnz	r3, 1e884 <z_impl_flash_write+0x36>
}
   1e872:	4620      	mov	r0, r4
   1e874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   1e878:	2100      	movs	r1, #0
   1e87a:	4798      	blx	r3
		if (rc) {
   1e87c:	4604      	mov	r4, r0
   1e87e:	2800      	cmp	r0, #0
   1e880:	d0ee      	beq.n	1e860 <z_impl_flash_write+0x12>
   1e882:	e7f6      	b.n	1e872 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   1e884:	2101      	movs	r1, #1
   1e886:	4628      	mov	r0, r5
   1e888:	4798      	blx	r3
   1e88a:	e7f2      	b.n	1e872 <z_impl_flash_write+0x24>

0001e88c <nvs_flash_rd>:
{
   1e88c:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1e88e:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1e890:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   1e892:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1e894:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1e896:	fa16 f181 	uxtah	r1, r6, r1
   1e89a:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   1e89e:	6884      	ldr	r4, [r0, #8]
   1e8a0:	6824      	ldr	r4, [r4, #0]
   1e8a2:	46a4      	mov	ip, r4
}
   1e8a4:	bc70      	pop	{r4, r5, r6}
   1e8a6:	4760      	bx	ip

0001e8a8 <nvs_flash_block_cmp>:
{
   1e8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e8ac:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1e8ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1e8b0:	681d      	ldr	r5, [r3, #0]
   1e8b2:	426d      	negs	r5, r5
{
   1e8b4:	b089      	sub	sp, #36	; 0x24
   1e8b6:	4681      	mov	r9, r0
   1e8b8:	460e      	mov	r6, r1
   1e8ba:	4617      	mov	r7, r2
	block_size =
   1e8bc:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1e8c0:	b91c      	cbnz	r4, 1e8ca <nvs_flash_block_cmp+0x22>
	return 0;
   1e8c2:	4620      	mov	r0, r4
}
   1e8c4:	b009      	add	sp, #36	; 0x24
   1e8c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1e8ca:	42ac      	cmp	r4, r5
   1e8cc:	46a0      	mov	r8, r4
   1e8ce:	bf28      	it	cs
   1e8d0:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1e8d2:	4643      	mov	r3, r8
   1e8d4:	466a      	mov	r2, sp
   1e8d6:	4631      	mov	r1, r6
   1e8d8:	4648      	mov	r0, r9
   1e8da:	f7ff ffd7 	bl	1e88c <nvs_flash_rd>
		if (rc) {
   1e8de:	2800      	cmp	r0, #0
   1e8e0:	d1f0      	bne.n	1e8c4 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1e8e2:	4642      	mov	r2, r8
   1e8e4:	4669      	mov	r1, sp
   1e8e6:	4638      	mov	r0, r7
   1e8e8:	f001 fc95 	bl	20216 <memcmp>
		if (rc) {
   1e8ec:	b920      	cbnz	r0, 1e8f8 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   1e8ee:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1e8f2:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1e8f4:	4447      	add	r7, r8
   1e8f6:	e7e3      	b.n	1e8c0 <nvs_flash_block_cmp+0x18>
			return 1;
   1e8f8:	2001      	movs	r0, #1
   1e8fa:	e7e3      	b.n	1e8c4 <nvs_flash_block_cmp+0x1c>

0001e8fc <nvs_flash_cmp_const>:
{
   1e8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e900:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1e902:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1e904:	681d      	ldr	r5, [r3, #0]
   1e906:	426d      	negs	r5, r5
{
   1e908:	b088      	sub	sp, #32
	block_size =
   1e90a:	f005 0520 	and.w	r5, r5, #32
{
   1e90e:	4607      	mov	r7, r0
   1e910:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1e912:	4668      	mov	r0, sp
{
   1e914:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   1e916:	462a      	mov	r2, r5
   1e918:	f001 fcb8 	bl	2028c <memset>
	while (len) {
   1e91c:	b91c      	cbnz	r4, 1e926 <nvs_flash_cmp_const+0x2a>
	return 0;
   1e91e:	4620      	mov	r0, r4
}
   1e920:	b008      	add	sp, #32
   1e922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1e926:	42ac      	cmp	r4, r5
   1e928:	46a0      	mov	r8, r4
   1e92a:	bf28      	it	cs
   1e92c:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1e92e:	4643      	mov	r3, r8
   1e930:	466a      	mov	r2, sp
   1e932:	4631      	mov	r1, r6
   1e934:	4638      	mov	r0, r7
   1e936:	f7ff ffb7 	bl	1e8a8 <nvs_flash_block_cmp>
		if (rc) {
   1e93a:	2800      	cmp	r0, #0
   1e93c:	d1f0      	bne.n	1e920 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   1e93e:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1e942:	4446      	add	r6, r8
   1e944:	e7ea      	b.n	1e91c <nvs_flash_cmp_const+0x20>

0001e946 <nvs_flash_erase_sector>:
{
   1e946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1e94a:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   1e94e:	6806      	ldr	r6, [r0, #0]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1e950:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   1e952:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1e956:	0c09      	lsrs	r1, r1, #16
{
   1e958:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   1e95a:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1e95e:	fb0a 6601 	mla	r6, sl, r1, r6
	const struct flash_driver_api *api =
   1e962:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   1e966:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1e96a:	b9b3      	cbnz	r3, 1e99a <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   1e96c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1e970:	4652      	mov	r2, sl
   1e972:	4631      	mov	r1, r6
   1e974:	4638      	mov	r0, r7
   1e976:	4798      	blx	r3
	if (api->write_protection != NULL) {
   1e978:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   1e97c:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   1e97e:	b9ab      	cbnz	r3, 1e9ac <nvs_flash_erase_sector+0x66>
	if (rc) {
   1e980:	b98c      	cbnz	r4, 1e9a6 <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1e982:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1e984:	89ab      	ldrh	r3, [r5, #12]
   1e986:	7912      	ldrb	r2, [r2, #4]
   1e988:	4641      	mov	r1, r8
   1e98a:	4628      	mov	r0, r5
   1e98c:	f7ff ffb6 	bl	1e8fc <nvs_flash_cmp_const>
		rc = -ENXIO;
   1e990:	1e04      	subs	r4, r0, #0
   1e992:	bf18      	it	ne
   1e994:	f06f 0405 	mvnne.w	r4, #5
   1e998:	e005      	b.n	1e9a6 <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   1e99a:	2100      	movs	r1, #0
   1e99c:	4638      	mov	r0, r7
   1e99e:	4798      	blx	r3
		if (rc) {
   1e9a0:	4604      	mov	r4, r0
   1e9a2:	2800      	cmp	r0, #0
   1e9a4:	d0e2      	beq.n	1e96c <nvs_flash_erase_sector+0x26>
}
   1e9a6:	4620      	mov	r0, r4
   1e9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   1e9ac:	2101      	movs	r1, #1
   1e9ae:	4638      	mov	r0, r7
   1e9b0:	4798      	blx	r3
   1e9b2:	e7e5      	b.n	1e980 <nvs_flash_erase_sector+0x3a>

0001e9b4 <nvs_ate_crc8_update>:
{
   1e9b4:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1e9b6:	4601      	mov	r1, r0
{
   1e9b8:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1e9ba:	2207      	movs	r2, #7
   1e9bc:	20ff      	movs	r0, #255	; 0xff
   1e9be:	f7f1 fb25 	bl	1000c <crc8_ccitt>
	entry->crc8 = crc8;
   1e9c2:	71e0      	strb	r0, [r4, #7]
}
   1e9c4:	bd10      	pop	{r4, pc}

0001e9c6 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1e9c6:	7800      	ldrb	r0, [r0, #0]
   1e9c8:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1e9ca:	bf81      	itttt	hi
   1e9cc:	1809      	addhi	r1, r1, r0
   1e9ce:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1e9d2:	4240      	neghi	r0, r0
   1e9d4:	4001      	andhi	r1, r0
}
   1e9d6:	4608      	mov	r0, r1
   1e9d8:	4770      	bx	lr

0001e9da <nvs_ate_valid>:
{
   1e9da:	b570      	push	{r4, r5, r6, lr}
   1e9dc:	460c      	mov	r4, r1
   1e9de:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1e9e0:	2108      	movs	r1, #8
   1e9e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1e9e4:	f7ff ffef 	bl	1e9c6 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1e9e8:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1e9ea:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1e9ec:	4621      	mov	r1, r4
   1e9ee:	20ff      	movs	r0, #255	; 0xff
   1e9f0:	f7f1 fb0c 	bl	1000c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1e9f4:	79e3      	ldrb	r3, [r4, #7]
   1e9f6:	4283      	cmp	r3, r0
   1e9f8:	d107      	bne.n	1ea0a <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   1e9fa:	89a8      	ldrh	r0, [r5, #12]
   1e9fc:	8863      	ldrh	r3, [r4, #2]
   1e9fe:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   1ea00:	4283      	cmp	r3, r0
   1ea02:	bf2c      	ite	cs
   1ea04:	2000      	movcs	r0, #0
   1ea06:	2001      	movcc	r0, #1
}
   1ea08:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1ea0a:	2000      	movs	r0, #0
   1ea0c:	e7fc      	b.n	1ea08 <nvs_ate_valid+0x2e>

0001ea0e <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1ea0e:	680b      	ldr	r3, [r1, #0]
   1ea10:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1ea14:	0c1a      	lsrs	r2, r3, #16
   1ea16:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1ea1a:	bf08      	it	eq
   1ea1c:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1ea20:	600b      	str	r3, [r1, #0]
}
   1ea22:	4770      	bx	lr

0001ea24 <nvs_close_ate_valid>:
{
   1ea24:	b538      	push	{r3, r4, r5, lr}
   1ea26:	4605      	mov	r5, r0
   1ea28:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1ea2a:	f7ff ffd6 	bl	1e9da <nvs_ate_valid>
   1ea2e:	b1a0      	cbz	r0, 1ea5a <nvs_close_ate_valid+0x36>
   1ea30:	88a0      	ldrh	r0, [r4, #4]
   1ea32:	b998      	cbnz	r0, 1ea5c <nvs_close_ate_valid+0x38>
   1ea34:	8822      	ldrh	r2, [r4, #0]
   1ea36:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ea3a:	429a      	cmp	r2, r3
   1ea3c:	d10d      	bne.n	1ea5a <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1ea3e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1ea40:	2108      	movs	r1, #8
   1ea42:	f7ff ffc0 	bl	1e9c6 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   1ea46:	8862      	ldrh	r2, [r4, #2]
   1ea48:	89ab      	ldrh	r3, [r5, #12]
   1ea4a:	1a9b      	subs	r3, r3, r2
   1ea4c:	fbb3 f2f0 	udiv	r2, r3, r0
   1ea50:	fb02 3010 	mls	r0, r2, r0, r3
   1ea54:	fab0 f080 	clz	r0, r0
   1ea58:	0940      	lsrs	r0, r0, #5
}
   1ea5a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1ea5c:	2000      	movs	r0, #0
   1ea5e:	e7fc      	b.n	1ea5a <nvs_close_ate_valid+0x36>

0001ea60 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1ea60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ea64:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1ea66:	4605      	mov	r5, r0
	offset += addr & ADDR_OFFS_MASK;
   1ea68:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1ea6a:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ea6c:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1ea6e:	fa10 f181 	uxtah	r1, r0, r1
   1ea72:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1ea76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ea78:	681e      	ldr	r6, [r3, #0]
   1ea7a:	4276      	negs	r6, r6
	if (blen > 0) {
   1ea7c:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1ea7e:	b088      	sub	sp, #32
   1ea80:	4690      	mov	r8, r2
	if (blen > 0) {
   1ea82:	d008      	beq.n	1ea96 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1ea84:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   1ea86:	4633      	mov	r3, r6
   1ea88:	4639      	mov	r1, r7
   1ea8a:	f7ff fee0 	bl	1e84e <z_impl_flash_write>
		if (rc) {
   1ea8e:	b9b8      	cbnz	r0, 1eac0 <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   1ea90:	1ba4      	subs	r4, r4, r6
		offset += blen;
   1ea92:	4437      	add	r7, r6
		data8 += blen;
   1ea94:	44b0      	add	r8, r6
	if (len) {
   1ea96:	b1b4      	cbz	r4, 1eac6 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   1ea98:	4622      	mov	r2, r4
   1ea9a:	4641      	mov	r1, r8
   1ea9c:	4668      	mov	r0, sp
   1ea9e:	f001 fbca 	bl	20236 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   1eaa2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1eaa4:	681a      	ldr	r2, [r3, #0]
   1eaa6:	7919      	ldrb	r1, [r3, #4]
   1eaa8:	1b12      	subs	r2, r2, r4
   1eaaa:	eb0d 0004 	add.w	r0, sp, r4
   1eaae:	f001 fbed 	bl	2028c <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1eab2:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   1eab6:	681b      	ldr	r3, [r3, #0]
   1eab8:	466a      	mov	r2, sp
   1eaba:	4639      	mov	r1, r7
   1eabc:	f7ff fec7 	bl	1e84e <z_impl_flash_write>
}
   1eac0:	b008      	add	sp, #32
   1eac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   1eac6:	4620      	mov	r0, r4
   1eac8:	e7fa      	b.n	1eac0 <nvs_flash_al_wrt.part.0+0x60>

0001eaca <nvs_flash_ate_wrt>:
{
   1eaca:	b510      	push	{r4, lr}
   1eacc:	460a      	mov	r2, r1
	if (!len) {
   1eace:	2308      	movs	r3, #8
   1ead0:	6841      	ldr	r1, [r0, #4]
{
   1ead2:	4604      	mov	r4, r0
   1ead4:	f7ff ffc4 	bl	1ea60 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1ead8:	2108      	movs	r1, #8
   1eada:	4603      	mov	r3, r0
   1eadc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1eade:	f7ff ff72 	bl	1e9c6 <nvs_al_size.isra.0>
   1eae2:	6862      	ldr	r2, [r4, #4]
   1eae4:	1a12      	subs	r2, r2, r0
   1eae6:	6062      	str	r2, [r4, #4]
}
   1eae8:	4618      	mov	r0, r3
   1eaea:	bd10      	pop	{r4, pc}

0001eaec <nvs_prev_ate>:
{
   1eaec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1eaee:	4605      	mov	r5, r0
   1eaf0:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1eaf2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1eaf4:	2108      	movs	r1, #8
   1eaf6:	f7ff ff66 	bl	1e9c6 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1eafa:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1eafc:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1eafe:	2308      	movs	r3, #8
   1eb00:	4628      	mov	r0, r5
   1eb02:	f7ff fec3 	bl	1e88c <nvs_flash_rd>
	if (rc) {
   1eb06:	4604      	mov	r4, r0
   1eb08:	2800      	cmp	r0, #0
   1eb0a:	d138      	bne.n	1eb7e <nvs_prev_ate+0x92>
	*addr += ate_size;
   1eb0c:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1eb0e:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   1eb10:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1eb12:	b29a      	uxth	r2, r3
   1eb14:	1bc7      	subs	r7, r0, r7
   1eb16:	42ba      	cmp	r2, r7
	*addr += ate_size;
   1eb18:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1eb1a:	d130      	bne.n	1eb7e <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1eb1c:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1eb1e:	bf03      	ittte	eq
   1eb20:	89e9      	ldrheq	r1, [r5, #14]
   1eb22:	f101 31ff 	addeq.w	r1, r1, #4294967295
   1eb26:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   1eb2a:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   1eb2e:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1eb30:	2308      	movs	r3, #8
   1eb32:	466a      	mov	r2, sp
   1eb34:	4628      	mov	r0, r5
   1eb36:	f7ff fea9 	bl	1e88c <nvs_flash_rd>
	if (rc) {
   1eb3a:	4604      	mov	r4, r0
   1eb3c:	b9f8      	cbnz	r0, 1eb7e <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1eb3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1eb40:	466a      	mov	r2, sp
   1eb42:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1eb44:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1eb46:	f812 0b01 	ldrb.w	r0, [r2], #1
   1eb4a:	4281      	cmp	r1, r0
   1eb4c:	d10c      	bne.n	1eb68 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1eb4e:	3301      	adds	r3, #1
   1eb50:	2b08      	cmp	r3, #8
   1eb52:	d1f8      	bne.n	1eb46 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   1eb54:	686b      	ldr	r3, [r5, #4]
   1eb56:	e005      	b.n	1eb64 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   1eb58:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   1eb5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   1eb5e:	0c1b      	lsrs	r3, r3, #16
   1eb60:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   1eb62:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1eb64:	6033      	str	r3, [r6, #0]
		return 0;
   1eb66:	e00a      	b.n	1eb7e <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1eb68:	4669      	mov	r1, sp
   1eb6a:	4628      	mov	r0, r5
   1eb6c:	f7ff ff5a 	bl	1ea24 <nvs_close_ate_valid>
   1eb70:	2800      	cmp	r0, #0
   1eb72:	d1f1      	bne.n	1eb58 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   1eb74:	4631      	mov	r1, r6
   1eb76:	4628      	mov	r0, r5
   1eb78:	f7f2 fa8e 	bl	11098 <nvs_recover_last_ate>
   1eb7c:	4604      	mov	r4, r0
}
   1eb7e:	4620      	mov	r0, r4
   1eb80:	b003      	add	sp, #12
   1eb82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001eb84 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1eb84:	2300      	movs	r3, #0
   1eb86:	461a      	mov	r2, r3
   1eb88:	f7f2 bcfa 	b.w	11580 <nvs_write>

0001eb8c <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1eb8c:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1eb8e:	2400      	movs	r4, #0
   1eb90:	9400      	str	r4, [sp, #0]
   1eb92:	f7f2 fdd9 	bl	11748 <nvs_read_hist>
	return rc;
}
   1eb96:	b002      	add	sp, #8
   1eb98:	bd10      	pop	{r4, pc}

0001eb9a <device_get_binding>:
   1eb9a:	f7fd bc05 	b.w	1c3a8 <z_impl_device_get_binding>

0001eb9e <get_sectors_cb>:
{
   1eb9e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1eba0:	6802      	ldr	r2, [r0, #0]
   1eba2:	684c      	ldr	r4, [r1, #4]
   1eba4:	42a2      	cmp	r2, r4
   1eba6:	d316      	bcc.n	1ebd6 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1eba8:	688b      	ldr	r3, [r1, #8]
   1ebaa:	4423      	add	r3, r4
   1ebac:	429a      	cmp	r2, r3
   1ebae:	d206      	bcs.n	1ebbe <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1ebb0:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1ebb4:	42ab      	cmp	r3, r5
   1ebb6:	d304      	bcc.n	1ebc2 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1ebb8:	f06f 030b 	mvn.w	r3, #11
   1ebbc:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1ebbe:	2000      	movs	r0, #0
   1ebc0:	e00a      	b.n	1ebd8 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1ebc2:	68cd      	ldr	r5, [r1, #12]
   1ebc4:	1b12      	subs	r2, r2, r4
   1ebc6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   1ebca:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1ebce:	6842      	ldr	r2, [r0, #4]
   1ebd0:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1ebd2:	3301      	adds	r3, #1
   1ebd4:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1ebd6:	2001      	movs	r0, #1
}
   1ebd8:	bd70      	pop	{r4, r5, r6, pc}

0001ebda <settings_load>:
	return settings_load_subtree(NULL);
   1ebda:	2000      	movs	r0, #0
   1ebdc:	f7f2 beaa 	b.w	11934 <settings_load_subtree>

0001ebe0 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1ebe0:	2200      	movs	r2, #0
   1ebe2:	4611      	mov	r1, r2
   1ebe4:	f7f2 be6c 	b.w	118c0 <settings_save_one>

0001ebe8 <settings_name_steq>:
{
   1ebe8:	4603      	mov	r3, r0
   1ebea:	b530      	push	{r4, r5, lr}
   1ebec:	4608      	mov	r0, r1
	if (next) {
   1ebee:	b10a      	cbz	r2, 1ebf4 <settings_name_steq+0xc>
		*next = NULL;
   1ebf0:	2100      	movs	r1, #0
   1ebf2:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1ebf4:	b163      	cbz	r3, 1ec10 <settings_name_steq+0x28>
   1ebf6:	b190      	cbz	r0, 1ec1e <settings_name_steq+0x36>
   1ebf8:	1e41      	subs	r1, r0, #1
   1ebfa:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1ebfc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1ec00:	4604      	mov	r4, r0
   1ec02:	f810 3b01 	ldrb.w	r3, [r0], #1
   1ec06:	b15d      	cbz	r5, 1ec20 <settings_name_steq+0x38>
   1ec08:	429d      	cmp	r5, r3
   1ec0a:	d101      	bne.n	1ec10 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1ec0c:	2d3d      	cmp	r5, #61	; 0x3d
   1ec0e:	d1f5      	bne.n	1ebfc <settings_name_steq+0x14>
	return 0;
   1ec10:	2000      	movs	r0, #0
   1ec12:	e004      	b.n	1ec1e <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1ec14:	2b3d      	cmp	r3, #61	; 0x3d
   1ec16:	d008      	beq.n	1ec2a <settings_name_steq+0x42>
   1ec18:	fab3 f083 	clz	r0, r3
   1ec1c:	0940      	lsrs	r0, r0, #5
}
   1ec1e:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1ec20:	2b2f      	cmp	r3, #47	; 0x2f
   1ec22:	d1f7      	bne.n	1ec14 <settings_name_steq+0x2c>
		if (next) {
   1ec24:	b10a      	cbz	r2, 1ec2a <settings_name_steq+0x42>
			*next = name + 1;
   1ec26:	3401      	adds	r4, #1
   1ec28:	6014      	str	r4, [r2, #0]
		return 1;
   1ec2a:	2001      	movs	r0, #1
   1ec2c:	e7f7      	b.n	1ec1e <settings_name_steq+0x36>

0001ec2e <settings_name_next>:
{
   1ec2e:	b530      	push	{r4, r5, lr}
   1ec30:	4603      	mov	r3, r0
	if (next) {
   1ec32:	b109      	cbz	r1, 1ec38 <settings_name_next+0xa>
		*next = NULL;
   1ec34:	2200      	movs	r2, #0
   1ec36:	600a      	str	r2, [r1, #0]
	if (!name) {
   1ec38:	b16b      	cbz	r3, 1ec56 <settings_name_next+0x28>
   1ec3a:	461a      	mov	r2, r3
   1ec3c:	4614      	mov	r4, r2
   1ec3e:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1ec40:	f812 5b01 	ldrb.w	r5, [r2], #1
   1ec44:	b135      	cbz	r5, 1ec54 <settings_name_next+0x26>
   1ec46:	2d3d      	cmp	r5, #61	; 0x3d
   1ec48:	d004      	beq.n	1ec54 <settings_name_next+0x26>
   1ec4a:	2d2f      	cmp	r5, #47	; 0x2f
   1ec4c:	d1f6      	bne.n	1ec3c <settings_name_next+0xe>
		if (next) {
   1ec4e:	b109      	cbz	r1, 1ec54 <settings_name_next+0x26>
			*next = name + 1;
   1ec50:	3401      	adds	r4, #1
   1ec52:	600c      	str	r4, [r1, #0]
}
   1ec54:	bd30      	pop	{r4, r5, pc}
		return 0;
   1ec56:	4618      	mov	r0, r3
   1ec58:	e7fc      	b.n	1ec54 <settings_name_next+0x26>

0001ec5a <settings_nvs_read_fn>:
{
   1ec5a:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1ec5c:	4613      	mov	r3, r2
{
   1ec5e:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1ec60:	460a      	mov	r2, r1
   1ec62:	8881      	ldrh	r1, [r0, #4]
   1ec64:	6800      	ldr	r0, [r0, #0]
   1ec66:	f7ff ff91 	bl	1eb8c <nvs_read>
}
   1ec6a:	42a0      	cmp	r0, r4
   1ec6c:	bfa8      	it	ge
   1ec6e:	4620      	movge	r0, r4
   1ec70:	bd10      	pop	{r4, pc}

0001ec72 <settings_nvs_save>:
{
   1ec72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec76:	b097      	sub	sp, #92	; 0x5c
   1ec78:	4604      	mov	r4, r0
   1ec7a:	9201      	str	r2, [sp, #4]
   1ec7c:	469b      	mov	fp, r3
	if (!name) {
   1ec7e:	4689      	mov	r9, r1
   1ec80:	2900      	cmp	r1, #0
   1ec82:	d069      	beq.n	1ed58 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   1ec84:	b1da      	cbz	r2, 1ecbe <settings_nvs_save+0x4c>
   1ec86:	fabb f78b 	clz	r7, fp
   1ec8a:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   1ec8c:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   1ec8e:	3501      	adds	r5, #1
   1ec90:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1ec92:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1ec94:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   1ec98:	1e6e      	subs	r6, r5, #1
   1ec9a:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   1ec9c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1eca0:	d02e      	beq.n	1ed00 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1eca2:	234a      	movs	r3, #74	; 0x4a
   1eca4:	aa03      	add	r2, sp, #12
   1eca6:	4631      	mov	r1, r6
   1eca8:	4650      	mov	r0, sl
   1ecaa:	f7ff ff6f 	bl	1eb8c <nvs_read>
		if (rc < 0) {
   1ecae:	2800      	cmp	r0, #0
   1ecb0:	da07      	bge.n	1ecc2 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1ecb2:	f110 0f02 	cmn.w	r0, #2
   1ecb6:	bf08      	it	eq
   1ecb8:	46b0      	moveq	r8, r6
   1ecba:	4635      	mov	r5, r6
   1ecbc:	e7ec      	b.n	1ec98 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   1ecbe:	2701      	movs	r7, #1
   1ecc0:	e7e4      	b.n	1ec8c <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1ecc2:	ab16      	add	r3, sp, #88	; 0x58
   1ecc4:	4418      	add	r0, r3
   1ecc6:	2300      	movs	r3, #0
   1ecc8:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   1eccc:	a903      	add	r1, sp, #12
   1ecce:	4648      	mov	r0, r9
   1ecd0:	f001 fa86 	bl	201e0 <strcmp>
   1ecd4:	2800      	cmp	r0, #0
   1ecd6:	d1f0      	bne.n	1ecba <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1ecd8:	2f00      	cmp	r7, #0
   1ecda:	d03b      	beq.n	1ed54 <settings_nvs_save+0xe2>
   1ecdc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1ecde:	42b3      	cmp	r3, r6
   1ece0:	d142      	bne.n	1ed68 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   1ece2:	4622      	mov	r2, r4
   1ece4:	1e73      	subs	r3, r6, #1
   1ece6:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1ecea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1ecee:	2302      	movs	r3, #2
   1ecf0:	4650      	mov	r0, sl
   1ecf2:	f7f2 fc45 	bl	11580 <nvs_write>
			if (rc < 0) {
   1ecf6:	2800      	cmp	r0, #0
   1ecf8:	da36      	bge.n	1ed68 <settings_nvs_save+0xf6>
}
   1ecfa:	b017      	add	sp, #92	; 0x5c
   1ecfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   1ed00:	bb6f      	cbnz	r7, 1ed5e <settings_nvs_save+0xec>
	write_name = true;
   1ed02:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1ed04:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1ed08:	d02b      	beq.n	1ed62 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1ed0a:	f104 0508 	add.w	r5, r4, #8
   1ed0e:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1ed12:	9a01      	ldr	r2, [sp, #4]
   1ed14:	465b      	mov	r3, fp
   1ed16:	b289      	uxth	r1, r1
   1ed18:	4628      	mov	r0, r5
   1ed1a:	f7f2 fc31 	bl	11580 <nvs_write>
	if (rc < 0) {
   1ed1e:	2800      	cmp	r0, #0
   1ed20:	dbeb      	blt.n	1ecfa <settings_nvs_save+0x88>
	if (write_name) {
   1ed22:	b157      	cbz	r7, 1ed3a <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1ed24:	4648      	mov	r0, r9
   1ed26:	f001 fa4b 	bl	201c0 <strlen>
   1ed2a:	464a      	mov	r2, r9
   1ed2c:	4603      	mov	r3, r0
   1ed2e:	4641      	mov	r1, r8
   1ed30:	4628      	mov	r0, r5
   1ed32:	f7f2 fc25 	bl	11580 <nvs_write>
		if (rc < 0) {
   1ed36:	2800      	cmp	r0, #0
   1ed38:	dbdf      	blt.n	1ecfa <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   1ed3a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1ed3c:	4543      	cmp	r3, r8
   1ed3e:	d220      	bcs.n	1ed82 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   1ed40:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1ed42:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   1ed44:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1ed48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1ed4c:	4628      	mov	r0, r5
   1ed4e:	f7f2 fc17 	bl	11580 <nvs_write>
   1ed52:	e016      	b.n	1ed82 <settings_nvs_save+0x110>
   1ed54:	46b0      	mov	r8, r6
   1ed56:	e7d5      	b.n	1ed04 <settings_nvs_save+0x92>
		return -EINVAL;
   1ed58:	f06f 0015 	mvn.w	r0, #21
   1ed5c:	e7cd      	b.n	1ecfa <settings_nvs_save+0x88>
		return 0;
   1ed5e:	2000      	movs	r0, #0
   1ed60:	e7cb      	b.n	1ecfa <settings_nvs_save+0x88>
		return -ENOMEM;
   1ed62:	f06f 000b 	mvn.w	r0, #11
   1ed66:	e7c8      	b.n	1ecfa <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   1ed68:	4631      	mov	r1, r6
   1ed6a:	4650      	mov	r0, sl
   1ed6c:	f7ff ff0a 	bl	1eb84 <nvs_delete>
			if (rc >= 0) {
   1ed70:	2800      	cmp	r0, #0
   1ed72:	dbc2      	blt.n	1ecfa <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1ed74:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1ed78:	313f      	adds	r1, #63	; 0x3f
   1ed7a:	b289      	uxth	r1, r1
   1ed7c:	4650      	mov	r0, sl
   1ed7e:	f7ff ff01 	bl	1eb84 <nvs_delete>
	if (rc < 0) {
   1ed82:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1ed86:	e7b8      	b.n	1ecfa <settings_nvs_save+0x88>

0001ed88 <settings_nvs_backend_init>:
{
   1ed88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1ed8a:	f100 0608 	add.w	r6, r0, #8
   1ed8e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   1ed90:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1ed92:	4630      	mov	r0, r6
   1ed94:	f7f2 fa74 	bl	11280 <nvs_init>
	if (rc) {
   1ed98:	4605      	mov	r5, r0
   1ed9a:	b970      	cbnz	r0, 1edba <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1ed9c:	2302      	movs	r3, #2
   1ed9e:	f10d 0206 	add.w	r2, sp, #6
   1eda2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1eda6:	4630      	mov	r0, r6
   1eda8:	f7ff fef0 	bl	1eb8c <nvs_read>
	if (rc < 0) {
   1edac:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   1edae:	bfac      	ite	ge
   1edb0:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   1edb4:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   1edb8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   1edba:	4628      	mov	r0, r5
   1edbc:	b002      	add	sp, #8
   1edbe:	bd70      	pop	{r4, r5, r6, pc}

0001edc0 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1edc0:	2200      	movs	r2, #0
   1edc2:	e9c0 2200 	strd	r2, r2, [r0]
   1edc6:	6082      	str	r2, [r0, #8]
}
   1edc8:	4770      	bx	lr

0001edca <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1edca:	6902      	ldr	r2, [r0, #16]
   1edcc:	b2cb      	uxtb	r3, r1
   1edce:	210c      	movs	r1, #12
   1edd0:	fb03 2101 	mla	r1, r3, r1, r2
   1edd4:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1edd6:	f000 0007 	and.w	r0, r0, #7
   1edda:	4770      	bx	lr

0001eddc <set_off_state>:
	__asm__ volatile(
   1eddc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ede0:	f3ef 8211 	mrs	r2, BASEPRI
   1ede4:	f383 8811 	msr	BASEPRI, r3
   1ede8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1edec:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1edee:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1edf2:	d001      	beq.n	1edf8 <set_off_state+0x1c>
   1edf4:	428b      	cmp	r3, r1
   1edf6:	d107      	bne.n	1ee08 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1edf8:	2301      	movs	r3, #1
   1edfa:	6003      	str	r3, [r0, #0]
	int err = 0;
   1edfc:	2000      	movs	r0, #0
	__asm__ volatile(
   1edfe:	f382 8811 	msr	BASEPRI, r2
   1ee02:	f3bf 8f6f 	isb	sy
}
   1ee06:	4770      	bx	lr
		err = -EPERM;
   1ee08:	f04f 30ff 	mov.w	r0, #4294967295
   1ee0c:	e7f7      	b.n	1edfe <set_off_state+0x22>

0001ee0e <set_starting_state>:
{
   1ee0e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ee10:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ee14:	f3ef 8211 	mrs	r2, BASEPRI
   1ee18:	f383 8811 	msr	BASEPRI, r3
   1ee1c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ee20:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1ee22:	f003 0407 	and.w	r4, r3, #7
   1ee26:	2c01      	cmp	r4, #1
   1ee28:	d106      	bne.n	1ee38 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1ee2a:	6001      	str	r1, [r0, #0]
	int err = 0;
   1ee2c:	2000      	movs	r0, #0
	__asm__ volatile(
   1ee2e:	f382 8811 	msr	BASEPRI, r2
   1ee32:	f3bf 8f6f 	isb	sy
}
   1ee36:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1ee38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1ee3c:	428b      	cmp	r3, r1
		err = -EALREADY;
   1ee3e:	bf14      	ite	ne
   1ee40:	f04f 30ff 	movne.w	r0, #4294967295
   1ee44:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1ee48:	e7f1      	b.n	1ee2e <set_starting_state+0x20>

0001ee4a <set_on_state>:
	__asm__ volatile(
   1ee4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ee4e:	f3ef 8211 	mrs	r2, BASEPRI
   1ee52:	f383 8811 	msr	BASEPRI, r3
   1ee56:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1ee5a:	6803      	ldr	r3, [r0, #0]
   1ee5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ee60:	f043 0302 	orr.w	r3, r3, #2
   1ee64:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1ee66:	f382 8811 	msr	BASEPRI, r2
   1ee6a:	f3bf 8f6f 	isb	sy
}
   1ee6e:	4770      	bx	lr

0001ee70 <onoff_started_callback>:
	return &data->mgr[type];
   1ee70:	6900      	ldr	r0, [r0, #16]
{
   1ee72:	b410      	push	{r4}
	return &data->mgr[type];
   1ee74:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1ee76:	241c      	movs	r4, #28
   1ee78:	fb03 0004 	mla	r0, r3, r4, r0
   1ee7c:	2100      	movs	r1, #0
}
   1ee7e:	bc10      	pop	{r4}
	notify(mgr, 0);
   1ee80:	4710      	bx	r2

0001ee82 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ee82:	2000      	movs	r0, #0
   1ee84:	f003 bc52 	b.w	2272c <nrfx_clock_stop>

0001ee88 <blocking_start_callback>:
{
   1ee88:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1ee8a:	f7fd bdf3 	b.w	1ca74 <z_impl_k_sem_give>

0001ee8e <api_stop>:
{
   1ee8e:	b538      	push	{r3, r4, r5, lr}
   1ee90:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1ee92:	240c      	movs	r4, #12
   1ee94:	434c      	muls	r4, r1
{
   1ee96:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1ee98:	6900      	ldr	r0, [r0, #16]
   1ee9a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1ee9e:	2180      	movs	r1, #128	; 0x80
   1eea0:	4418      	add	r0, r3
   1eea2:	f7ff ff9b 	bl	1eddc <set_off_state>
	if (err < 0) {
   1eea6:	2800      	cmp	r0, #0
   1eea8:	db04      	blt.n	1eeb4 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1eeaa:	6869      	ldr	r1, [r5, #4]
   1eeac:	440c      	add	r4, r1
   1eeae:	6863      	ldr	r3, [r4, #4]
   1eeb0:	4798      	blx	r3
	return 0;
   1eeb2:	2000      	movs	r0, #0
}
   1eeb4:	bd38      	pop	{r3, r4, r5, pc}

0001eeb6 <api_start>:
{
   1eeb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eeba:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1eebc:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1eebe:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1eec0:	434c      	muls	r4, r1
{
   1eec2:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1eec4:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1eec8:	2180      	movs	r1, #128	; 0x80
   1eeca:	4428      	add	r0, r5
{
   1eecc:	4690      	mov	r8, r2
   1eece:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1eed0:	f7ff ff9d 	bl	1ee0e <set_starting_state>
	if (err < 0) {
   1eed4:	2800      	cmp	r0, #0
   1eed6:	db06      	blt.n	1eee6 <api_start+0x30>
	subdata->cb = cb;
   1eed8:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1eeda:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1eede:	6873      	ldr	r3, [r6, #4]
   1eee0:	591b      	ldr	r3, [r3, r4]
   1eee2:	4798      	blx	r3
	return 0;
   1eee4:	2000      	movs	r0, #0
}
   1eee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eeea <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1eeea:	4770      	bx	lr

0001eeec <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1eeec:	4770      	bx	lr

0001eeee <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1eeee:	b538      	push	{r3, r4, r5, lr}
   1eef0:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1eef2:	42ab      	cmp	r3, r5
{
   1eef4:	4611      	mov	r1, r2
   1eef6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1eef8:	d804      	bhi.n	1ef04 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1eefa:	461a      	mov	r2, r3
   1eefc:	f001 f99b 	bl	20236 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1ef00:	4620      	mov	r0, r4
   1ef02:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1ef04:	2400      	movs	r4, #0
   1ef06:	e7fb      	b.n	1ef00 <_copy+0x12>

0001ef08 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1ef08:	f001 b9c0 	b.w	2028c <memset>

0001ef0c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1ef0c:	09c3      	lsrs	r3, r0, #7
   1ef0e:	005a      	lsls	r2, r3, #1
   1ef10:	4413      	add	r3, r2
   1ef12:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1ef16:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1ef1a:	b2c0      	uxtb	r0, r0
   1ef1c:	4770      	bx	lr

0001ef1e <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1ef1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ef22:	4606      	mov	r6, r0
   1ef24:	b0a9      	sub	sp, #164	; 0xa4
   1ef26:	4688      	mov	r8, r1
   1ef28:	4614      	mov	r4, r2
   1ef2a:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1ef2c:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1ef30:	f7f3 f9e6 	bl	12300 <uECC_get_rng>
		if (!rng_function ||
   1ef34:	4603      	mov	r3, r0
   1ef36:	2800      	cmp	r0, #0
   1ef38:	d03e      	beq.n	1efb8 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1ef3a:	2140      	movs	r1, #64	; 0x40
   1ef3c:	a808      	add	r0, sp, #32
   1ef3e:	4798      	blx	r3
		if (!rng_function ||
   1ef40:	b3d0      	cbz	r0, 1efb8 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1ef42:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1ef46:	f112 031f 	adds.w	r3, r2, #31
   1ef4a:	bf48      	it	mi
   1ef4c:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1ef50:	466d      	mov	r5, sp
   1ef52:	464a      	mov	r2, r9
   1ef54:	a908      	add	r1, sp, #32
   1ef56:	4628      	mov	r0, r5
   1ef58:	f343 1347 	sbfx	r3, r3, #5, #8
   1ef5c:	f000 fa03 	bl	1f366 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1ef60:	4622      	mov	r2, r4
   1ef62:	4629      	mov	r1, r5
   1ef64:	a818      	add	r0, sp, #96	; 0x60
   1ef66:	f000 fe19 	bl	1fb9c <EccPoint_compute_public_key>
   1ef6a:	b318      	cbz	r0, 1efb4 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1ef6c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1ef70:	1dd9      	adds	r1, r3, #7
   1ef72:	bf48      	it	mi
   1ef74:	f103 010e 	addmi.w	r1, r3, #14
   1ef78:	462a      	mov	r2, r5
   1ef7a:	4640      	mov	r0, r8
   1ef7c:	10c9      	asrs	r1, r1, #3
   1ef7e:	f000 fe35 	bl	1fbec <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1ef82:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1ef86:	aa18      	add	r2, sp, #96	; 0x60
   1ef88:	4630      	mov	r0, r6
   1ef8a:	f000 fe2f 	bl	1fbec <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ef8e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1ef92:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ef96:	ab18      	add	r3, sp, #96	; 0x60
   1ef98:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1ef9c:	1870      	adds	r0, r6, r1
   1ef9e:	f000 fe25 	bl	1fbec <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1efa2:	2220      	movs	r2, #32
   1efa4:	2100      	movs	r1, #0
   1efa6:	4628      	mov	r0, r5
   1efa8:	f001 f970 	bl	2028c <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1efac:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1efae:	b029      	add	sp, #164	; 0xa4
   1efb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1efb4:	3f01      	subs	r7, #1
   1efb6:	d1bb      	bne.n	1ef30 <uECC_make_key+0x12>
        		return 0;
   1efb8:	2000      	movs	r0, #0
   1efba:	e7f8      	b.n	1efae <uECC_make_key+0x90>

0001efbc <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1efbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1efc0:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1efc2:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1efc6:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1efca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1efce:	b0a4      	sub	sp, #144	; 0x90
   1efd0:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1efd2:	1dda      	adds	r2, r3, #7
   1efd4:	bf48      	it	mi
   1efd6:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1efda:	ad04      	add	r5, sp, #16
{
   1efdc:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1efde:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1efe0:	4628      	mov	r0, r5
   1efe2:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1efe4:	9502      	str	r5, [sp, #8]
   1efe6:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1efe8:	f000 fe14 	bl	1fc14 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1efec:	463a      	mov	r2, r7
   1efee:	4649      	mov	r1, r9
   1eff0:	a814      	add	r0, sp, #80	; 0x50
   1eff2:	f000 fe0f 	bl	1fc14 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1eff6:	ab14      	add	r3, sp, #80	; 0x50
   1eff8:	eb09 0107 	add.w	r1, r9, r7
   1effc:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1f000:	463a      	mov	r2, r7
   1f002:	f000 fe07 	bl	1fc14 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1f006:	4623      	mov	r3, r4
   1f008:	4632      	mov	r2, r6
   1f00a:	4629      	mov	r1, r5
   1f00c:	4628      	mov	r0, r5
   1f00e:	f000 fd99 	bl	1fb44 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1f012:	fab0 f080 	clz	r0, r0
   1f016:	9401      	str	r4, [sp, #4]
   1f018:	ab24      	add	r3, sp, #144	; 0x90
   1f01a:	0940      	lsrs	r0, r0, #5
   1f01c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1f020:	8863      	ldrh	r3, [r4, #2]
   1f022:	3301      	adds	r3, #1
   1f024:	b21b      	sxth	r3, r3
   1f026:	9300      	str	r3, [sp, #0]
   1f028:	a914      	add	r1, sp, #80	; 0x50
   1f02a:	2300      	movs	r3, #0
   1f02c:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1f030:	4608      	mov	r0, r1
   1f032:	f000 fcb8 	bl	1f9a6 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1f036:	aa14      	add	r2, sp, #80	; 0x50
   1f038:	4639      	mov	r1, r7
   1f03a:	4640      	mov	r0, r8
   1f03c:	f000 fdd6 	bl	1fbec <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1f040:	4621      	mov	r1, r4
   1f042:	a814      	add	r0, sp, #80	; 0x50
   1f044:	f000 fc24 	bl	1f890 <EccPoint_isZero>
   1f048:	af02      	add	r7, sp, #8
   1f04a:	4604      	mov	r4, r0
   1f04c:	2208      	movs	r2, #8
   1f04e:	2100      	movs	r1, #0
   1f050:	4638      	mov	r0, r7
   1f052:	f001 f91b 	bl	2028c <memset>
   1f056:	2220      	movs	r2, #32
   1f058:	2100      	movs	r1, #0
   1f05a:	4630      	mov	r0, r6
   1f05c:	f001 f916 	bl	2028c <memset>
   1f060:	2220      	movs	r2, #32
   1f062:	2100      	movs	r1, #0
   1f064:	4628      	mov	r0, r5
   1f066:	f001 f911 	bl	2028c <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1f06a:	fab4 f084 	clz	r0, r4
   1f06e:	0940      	lsrs	r0, r0, #5
   1f070:	b024      	add	sp, #144	; 0x90
   1f072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f076 <uECC_vli_add>:
{
   1f076:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1f078:	2400      	movs	r4, #0
{
   1f07a:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1f07c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1f07e:	b265      	sxtb	r5, r4
   1f080:	42ab      	cmp	r3, r5
   1f082:	dc00      	bgt.n	1f086 <uECC_vli_add+0x10>
}
   1f084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1f086:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1f08a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1f08e:	443d      	add	r5, r7
   1f090:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1f092:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1f094:	bf8c      	ite	hi
   1f096:	2701      	movhi	r7, #1
   1f098:	2700      	movls	r7, #0
		result[i] = sum;
   1f09a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1f09e:	bf18      	it	ne
   1f0a0:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1f0a2:	3401      	adds	r4, #1
   1f0a4:	e7eb      	b.n	1f07e <uECC_vli_add+0x8>

0001f0a6 <uECC_vli_rshift1>:
	vli += num_words;
   1f0a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1f0aa:	2300      	movs	r3, #0
	while (vli-- > end) {
   1f0ac:	4288      	cmp	r0, r1
   1f0ae:	d300      	bcc.n	1f0b2 <uECC_vli_rshift1+0xc>
}
   1f0b0:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1f0b2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1f0b6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1f0ba:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1f0bc:	07d3      	lsls	r3, r2, #31
   1f0be:	e7f5      	b.n	1f0ac <uECC_vli_rshift1+0x6>

0001f0c0 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1f0c0:	6803      	ldr	r3, [r0, #0]
{
   1f0c2:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1f0c4:	f013 0601 	ands.w	r6, r3, #1
{
   1f0c8:	4605      	mov	r5, r0
   1f0ca:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1f0cc:	d005      	beq.n	1f0da <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1f0ce:	4613      	mov	r3, r2
   1f0d0:	460a      	mov	r2, r1
   1f0d2:	4601      	mov	r1, r0
   1f0d4:	f7ff ffcf 	bl	1f076 <uECC_vli_add>
   1f0d8:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1f0da:	4621      	mov	r1, r4
   1f0dc:	4628      	mov	r0, r5
   1f0de:	f7ff ffe2 	bl	1f0a6 <uECC_vli_rshift1>
	if (carry) {
   1f0e2:	b146      	cbz	r6, 1f0f6 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1f0e4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1f0e8:	3a01      	subs	r2, #1
   1f0ea:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1f0ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1f0f2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1f0f6:	bd70      	pop	{r4, r5, r6, pc}

0001f0f8 <uECC_vli_mult>:
{
   1f0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1f0fc:	2500      	movs	r5, #0
{
   1f0fe:	b087      	sub	sp, #28
   1f100:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1f104:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1f106:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1f108:	fa4f f885 	sxtb.w	r8, r5
   1f10c:	4543      	cmp	r3, r8
   1f10e:	dc16      	bgt.n	1f13e <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1f110:	f04f 35ff 	mov.w	r5, #4294967295
   1f114:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1f118:	9502      	str	r5, [sp, #8]
   1f11a:	f04f 0a00 	mov.w	sl, #0
   1f11e:	9e02      	ldr	r6, [sp, #8]
   1f120:	fa53 fe8a 	uxtab	lr, r3, sl
   1f124:	fa4f fe8e 	sxtb.w	lr, lr
   1f128:	45b6      	cmp	lr, r6
   1f12a:	fa5f f58a 	uxtb.w	r5, sl
   1f12e:	db2d      	blt.n	1f18c <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1f130:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1f134:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1f138:	b007      	add	sp, #28
   1f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f13e:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1f140:	f04f 0c00 	mov.w	ip, #0
   1f144:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1f148:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1f14a:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1f14e:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1f150:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1f154:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1f158:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1f15c:	fba7 ab06 	umull	sl, fp, r7, r6
   1f160:	eb1a 0601 	adds.w	r6, sl, r1
   1f164:	f10c 0c01 	add.w	ip, ip, #1
   1f168:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1f16c:	fa4f fa8c 	sxtb.w	sl, ip
   1f170:	bf2c      	ite	cs
   1f172:	2201      	movcs	r2, #1
   1f174:	2200      	movcc	r2, #0
   1f176:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1f178:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1f17a:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1f17c:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1f17e:	dde4      	ble.n	1f14a <uECC_vli_mult+0x52>
		result[k] = r0;
   1f180:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1f184:	463a      	mov	r2, r7
   1f186:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1f188:	4674      	mov	r4, lr
   1f18a:	e7bd      	b.n	1f108 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1f18c:	3501      	adds	r5, #1
   1f18e:	9900      	ldr	r1, [sp, #0]
   1f190:	9e01      	ldr	r6, [sp, #4]
   1f192:	fa4f fc85 	sxtb.w	ip, r5
   1f196:	ebae 0b0c 	sub.w	fp, lr, ip
   1f19a:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1f19e:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1f1a2:	4621      	mov	r1, r4
   1f1a4:	2400      	movs	r4, #0
   1f1a6:	459c      	cmp	ip, r3
   1f1a8:	db05      	blt.n	1f1b6 <uECC_vli_mult+0xbe>
		result[k] = r0;
   1f1aa:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1f1ae:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1f1b2:	460a      	mov	r2, r1
   1f1b4:	e7b3      	b.n	1f11e <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1f1b6:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1f1ba:	f855 7b04 	ldr.w	r7, [r5], #4
   1f1be:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1f1c2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1f1c6:	fba7 6706 	umull	r6, r7, r7, r6
   1f1ca:	eb16 0801 	adds.w	r8, r6, r1
   1f1ce:	eb57 0902 	adcs.w	r9, r7, r2
   1f1d2:	bf2c      	ite	cs
   1f1d4:	2201      	movcs	r2, #1
   1f1d6:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1f1d8:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1f1dc:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1f1de:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1f1e0:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1f1e2:	fa4f fc8c 	sxtb.w	ip, ip
   1f1e6:	e7de      	b.n	1f1a6 <uECC_vli_mult+0xae>

0001f1e8 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1f1e8:	2300      	movs	r3, #0
{
   1f1ea:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1f1ec:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1f1ee:	b25a      	sxtb	r2, r3
   1f1f0:	4291      	cmp	r1, r2
   1f1f2:	dc00      	bgt.n	1f1f6 <uECC_vli_clear+0xe>
}
   1f1f4:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1f1f6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1f1fa:	3301      	adds	r3, #1
   1f1fc:	e7f7      	b.n	1f1ee <uECC_vli_clear+0x6>

0001f1fe <uECC_vli_isZero>:
{
   1f1fe:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1f200:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1f202:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1f204:	b25c      	sxtb	r4, r3
   1f206:	42a1      	cmp	r1, r4
   1f208:	dc03      	bgt.n	1f212 <uECC_vli_isZero+0x14>
}
   1f20a:	fab2 f082 	clz	r0, r2
   1f20e:	0940      	lsrs	r0, r0, #5
   1f210:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1f212:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1f216:	3301      	adds	r3, #1
   1f218:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1f21a:	e7f3      	b.n	1f204 <uECC_vli_isZero+0x6>

0001f21c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f21c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1f21e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f220:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1f224:	f001 011f 	and.w	r1, r1, #31
   1f228:	fa03 f101 	lsl.w	r1, r3, r1
}
   1f22c:	4008      	ands	r0, r1
   1f22e:	4770      	bx	lr

0001f230 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1f230:	3901      	subs	r1, #1
   1f232:	b24b      	sxtb	r3, r1
{
   1f234:	4602      	mov	r2, r0
   1f236:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1f23a:	2b00      	cmp	r3, #0
   1f23c:	da03      	bge.n	1f246 <uECC_vli_numBits+0x16>
	return (i + 1);
   1f23e:	3301      	adds	r3, #1
   1f240:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1f242:	b938      	cbnz	r0, 1f254 <uECC_vli_numBits+0x24>
   1f244:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1f246:	f851 0904 	ldr.w	r0, [r1], #-4
   1f24a:	2800      	cmp	r0, #0
   1f24c:	d1f7      	bne.n	1f23e <uECC_vli_numBits+0xe>
   1f24e:	3b01      	subs	r3, #1
   1f250:	b25b      	sxtb	r3, r3
   1f252:	e7f2      	b.n	1f23a <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1f254:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1f258:	3b01      	subs	r3, #1
   1f25a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1f25e:	2300      	movs	r3, #0
   1f260:	b922      	cbnz	r2, 1f26c <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1f262:	3801      	subs	r0, #1
   1f264:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1f268:	b200      	sxth	r0, r0
}
   1f26a:	4770      	bx	lr
		digit >>= 1;
   1f26c:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1f26e:	3301      	adds	r3, #1
   1f270:	e7f6      	b.n	1f260 <uECC_vli_numBits+0x30>

0001f272 <uECC_vli_set>:
{
   1f272:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1f274:	2300      	movs	r3, #0
   1f276:	b25c      	sxtb	r4, r3
   1f278:	42a2      	cmp	r2, r4
   1f27a:	dc00      	bgt.n	1f27e <uECC_vli_set+0xc>
}
   1f27c:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1f27e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1f282:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1f286:	3301      	adds	r3, #1
   1f288:	e7f5      	b.n	1f276 <uECC_vli_set+0x4>

0001f28a <uECC_vli_cmp_unsafe>:
{
   1f28a:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1f28c:	3a01      	subs	r2, #1
   1f28e:	b253      	sxtb	r3, r2
   1f290:	009a      	lsls	r2, r3, #2
   1f292:	2b00      	cmp	r3, #0
   1f294:	da01      	bge.n	1f29a <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1f296:	2000      	movs	r0, #0
}
   1f298:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1f29a:	5885      	ldr	r5, [r0, r2]
   1f29c:	588c      	ldr	r4, [r1, r2]
   1f29e:	42a5      	cmp	r5, r4
   1f2a0:	d805      	bhi.n	1f2ae <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1f2a2:	f1a2 0204 	sub.w	r2, r2, #4
   1f2a6:	d304      	bcc.n	1f2b2 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1f2a8:	3b01      	subs	r3, #1
   1f2aa:	b25b      	sxtb	r3, r3
   1f2ac:	e7f1      	b.n	1f292 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1f2ae:	2001      	movs	r0, #1
   1f2b0:	e7f2      	b.n	1f298 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1f2b2:	f04f 30ff 	mov.w	r0, #4294967295
   1f2b6:	e7ef      	b.n	1f298 <uECC_vli_cmp_unsafe+0xe>

0001f2b8 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1f2b8:	3a01      	subs	r2, #1
   1f2ba:	b253      	sxtb	r3, r2
{
   1f2bc:	b570      	push	{r4, r5, r6, lr}
   1f2be:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1f2c0:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1f2c2:	2b00      	cmp	r3, #0
   1f2c4:	da03      	bge.n	1f2ce <uECC_vli_equal+0x16>
}
   1f2c6:	1e20      	subs	r0, r4, #0
   1f2c8:	bf18      	it	ne
   1f2ca:	2001      	movne	r0, #1
   1f2cc:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1f2ce:	5885      	ldr	r5, [r0, r2]
   1f2d0:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1f2d2:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1f2d4:	4075      	eors	r5, r6
   1f2d6:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1f2d8:	b25b      	sxtb	r3, r3
   1f2da:	3a04      	subs	r2, #4
   1f2dc:	e7f1      	b.n	1f2c2 <uECC_vli_equal+0xa>

0001f2de <uECC_vli_sub>:
{
   1f2de:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1f2e0:	2400      	movs	r4, #0
{
   1f2e2:	4606      	mov	r6, r0
   1f2e4:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1f2e6:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1f2e8:	b265      	sxtb	r5, r4
   1f2ea:	45ac      	cmp	ip, r5
   1f2ec:	dc00      	bgt.n	1f2f0 <uECC_vli_sub+0x12>
}
   1f2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1f2f0:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1f2f4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1f2f8:	1a3d      	subs	r5, r7, r0
   1f2fa:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1f2fc:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1f2fe:	bf34      	ite	cc
   1f300:	2701      	movcc	r7, #1
   1f302:	2700      	movcs	r7, #0
		result[i] = diff;
   1f304:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1f308:	bf18      	it	ne
   1f30a:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1f30c:	3401      	adds	r4, #1
   1f30e:	e7eb      	b.n	1f2e8 <uECC_vli_sub+0xa>

0001f310 <uECC_vli_modAdd>:
{
   1f310:	b570      	push	{r4, r5, r6, lr}
   1f312:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1f316:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1f318:	4633      	mov	r3, r6
{
   1f31a:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1f31c:	f7ff feab 	bl	1f076 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1f320:	b930      	cbnz	r0, 1f330 <uECC_vli_modAdd+0x20>
   1f322:	4632      	mov	r2, r6
   1f324:	4621      	mov	r1, r4
   1f326:	4628      	mov	r0, r5
   1f328:	f7ff ffaf 	bl	1f28a <uECC_vli_cmp_unsafe>
   1f32c:	2801      	cmp	r0, #1
   1f32e:	d007      	beq.n	1f340 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1f330:	4633      	mov	r3, r6
   1f332:	462a      	mov	r2, r5
   1f334:	4621      	mov	r1, r4
   1f336:	4620      	mov	r0, r4
}
   1f338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1f33c:	f7ff bfcf 	b.w	1f2de <uECC_vli_sub>
}
   1f340:	bd70      	pop	{r4, r5, r6, pc}

0001f342 <uECC_vli_modSub>:
{
   1f342:	b570      	push	{r4, r5, r6, lr}
   1f344:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1f348:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1f34a:	4633      	mov	r3, r6
{
   1f34c:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1f34e:	f7ff ffc6 	bl	1f2de <uECC_vli_sub>
	if (l_borrow) {
   1f352:	b138      	cbz	r0, 1f364 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1f354:	4633      	mov	r3, r6
   1f356:	462a      	mov	r2, r5
   1f358:	4621      	mov	r1, r4
   1f35a:	4620      	mov	r0, r4
}
   1f35c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1f360:	f7ff be89 	b.w	1f076 <uECC_vli_add>
}
   1f364:	bd70      	pop	{r4, r5, r6, pc}

0001f366 <uECC_vli_mmod>:
{
   1f366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f36a:	b0a5      	sub	sp, #148	; 0x94
   1f36c:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1f36e:	ab14      	add	r3, sp, #80	; 0x50
   1f370:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1f374:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1f376:	4629      	mov	r1, r5
   1f378:	4610      	mov	r0, r2
{
   1f37a:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1f37c:	f7ff ff58 	bl	1f230 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1f380:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1f384:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1f386:	2c00      	cmp	r4, #0
   1f388:	4621      	mov	r1, r4
   1f38a:	bfb8      	it	lt
   1f38c:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f390:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1f392:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f396:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1f39a:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f39c:	f004 071f 	and.w	r7, r4, #31
   1f3a0:	bf58      	it	pl
   1f3a2:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1f3a4:	f7ff ff20 	bl	1f1e8 <uECC_vli_clear>
	if (bit_shift > 0) {
   1f3a8:	2f00      	cmp	r7, #0
   1f3aa:	b208      	sxth	r0, r1
   1f3ac:	dd2b      	ble.n	1f406 <uECC_vli_mmod+0xa0>
   1f3ae:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1f3b0:	2200      	movs	r2, #0
   1f3b2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1f3b6:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f3ba:	4613      	mov	r3, r2
   1f3bc:	429d      	cmp	r5, r3
   1f3be:	d817      	bhi.n	1f3f0 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1f3c0:	006b      	lsls	r3, r5, #1
   1f3c2:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f3c4:	ab04      	add	r3, sp, #16
   1f3c6:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f3ca:	1e6f      	subs	r7, r5, #1
   1f3cc:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f3ce:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f3d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1f3d4:	2c00      	cmp	r4, #0
   1f3d6:	da54      	bge.n	1f482 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1f3d8:	ab24      	add	r3, sp, #144	; 0x90
   1f3da:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1f3de:	462a      	mov	r2, r5
   1f3e0:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1f3e4:	4640      	mov	r0, r8
   1f3e6:	f7ff ff44 	bl	1f272 <uECC_vli_set>
}
   1f3ea:	b025      	add	sp, #148	; 0x94
   1f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1f3f0:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1f3f4:	fa0c f007 	lsl.w	r0, ip, r7
   1f3f8:	4302      	orrs	r2, r0
   1f3fa:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f3fe:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1f400:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f404:	e7da      	b.n	1f3bc <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1f406:	ab04      	add	r3, sp, #16
   1f408:	462a      	mov	r2, r5
   1f40a:	4631      	mov	r1, r6
   1f40c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1f410:	f7ff ff2f 	bl	1f272 <uECC_vli_set>
   1f414:	e7d4      	b.n	1f3c0 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f416:	fa0f fe82 	sxth.w	lr, r2
   1f41a:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1f41e:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1f422:	ab24      	add	r3, sp, #144	; 0x90
   1f424:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1f428:	3001      	adds	r0, #1
   1f42a:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1f42e:	440b      	add	r3, r1
   1f430:	ebbb 0303 	subs.w	r3, fp, r3
   1f434:	bf34      	ite	cc
   1f436:	2201      	movcc	r2, #1
   1f438:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1f43a:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1f43c:	bf18      	it	ne
   1f43e:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1f440:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1f444:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1f448:	9b01      	ldr	r3, [sp, #4]
   1f44a:	b242      	sxtb	r2, r0
   1f44c:	429a      	cmp	r2, r3
   1f44e:	dbe2      	blt.n	1f416 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1f450:	1a73      	subs	r3, r6, r1
   1f452:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1f454:	4629      	mov	r1, r5
   1f456:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1f458:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1f45a:	f7ff fe24 	bl	1f0a6 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f45e:	ab24      	add	r3, sp, #144	; 0x90
   1f460:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f464:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f466:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1f46a:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f46e:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f470:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1f474:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f476:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1f47a:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f47c:	f7ff fe13 	bl	1f0a6 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1f480:	e7a8      	b.n	1f3d4 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f482:	ab24      	add	r3, sp, #144	; 0x90
   1f484:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1f486:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1f48a:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f48c:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1f490:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1f494:	e7d8      	b.n	1f448 <uECC_vli_mmod+0xe2>

0001f496 <uECC_vli_modMult_fast>:
{
   1f496:	b530      	push	{r4, r5, lr}
   1f498:	461c      	mov	r4, r3
   1f49a:	b091      	sub	sp, #68	; 0x44
   1f49c:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1f49e:	f993 3000 	ldrsb.w	r3, [r3]
   1f4a2:	4668      	mov	r0, sp
   1f4a4:	f7ff fe28 	bl	1f0f8 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1f4a8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1f4ac:	4669      	mov	r1, sp
   1f4ae:	4628      	mov	r0, r5
   1f4b0:	4798      	blx	r3
}
   1f4b2:	b011      	add	sp, #68	; 0x44
   1f4b4:	bd30      	pop	{r4, r5, pc}

0001f4b6 <uECC_vli_modSquare_fast>:
{
   1f4b6:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1f4b8:	460a      	mov	r2, r1
   1f4ba:	f7ff bfec 	b.w	1f496 <uECC_vli_modMult_fast>

0001f4be <double_jacobian_default>:
{
   1f4be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1f4c2:	f993 6000 	ldrsb.w	r6, [r3]
{
   1f4c6:	b092      	sub	sp, #72	; 0x48
   1f4c8:	4604      	mov	r4, r0
   1f4ca:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1f4cc:	4610      	mov	r0, r2
   1f4ce:	4631      	mov	r1, r6
{
   1f4d0:	4615      	mov	r5, r2
   1f4d2:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1f4d4:	f7ff fe93 	bl	1f1fe <uECC_vli_isZero>
   1f4d8:	2800      	cmp	r0, #0
   1f4da:	f040 8091 	bne.w	1f600 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1f4de:	463a      	mov	r2, r7
   1f4e0:	4649      	mov	r1, r9
   1f4e2:	a802      	add	r0, sp, #8
   1f4e4:	f7ff ffe7 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1f4e8:	463b      	mov	r3, r7
   1f4ea:	aa02      	add	r2, sp, #8
   1f4ec:	4621      	mov	r1, r4
   1f4ee:	a80a      	add	r0, sp, #40	; 0x28
   1f4f0:	f7ff ffd1 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1f4f4:	a902      	add	r1, sp, #8
   1f4f6:	4608      	mov	r0, r1
   1f4f8:	463a      	mov	r2, r7
   1f4fa:	f7ff ffdc 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1f4fe:	463b      	mov	r3, r7
   1f500:	462a      	mov	r2, r5
   1f502:	4649      	mov	r1, r9
   1f504:	4648      	mov	r0, r9
   1f506:	f7ff ffc6 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1f50a:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1f50e:	463a      	mov	r2, r7
   1f510:	4629      	mov	r1, r5
   1f512:	4628      	mov	r0, r5
   1f514:	f7ff ffcf 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1f518:	4643      	mov	r3, r8
   1f51a:	462a      	mov	r2, r5
   1f51c:	4621      	mov	r1, r4
   1f51e:	4620      	mov	r0, r4
   1f520:	9600      	str	r6, [sp, #0]
   1f522:	f7ff fef5 	bl	1f310 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1f526:	4643      	mov	r3, r8
   1f528:	462a      	mov	r2, r5
   1f52a:	4629      	mov	r1, r5
   1f52c:	4628      	mov	r0, r5
   1f52e:	9600      	str	r6, [sp, #0]
   1f530:	f7ff feee 	bl	1f310 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1f534:	4643      	mov	r3, r8
   1f536:	462a      	mov	r2, r5
   1f538:	4621      	mov	r1, r4
   1f53a:	4628      	mov	r0, r5
   1f53c:	9600      	str	r6, [sp, #0]
   1f53e:	f7ff ff00 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1f542:	463b      	mov	r3, r7
   1f544:	462a      	mov	r2, r5
   1f546:	4621      	mov	r1, r4
   1f548:	4620      	mov	r0, r4
   1f54a:	f7ff ffa4 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1f54e:	4643      	mov	r3, r8
   1f550:	4622      	mov	r2, r4
   1f552:	4621      	mov	r1, r4
   1f554:	4628      	mov	r0, r5
   1f556:	9600      	str	r6, [sp, #0]
   1f558:	f7ff feda 	bl	1f310 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1f55c:	4643      	mov	r3, r8
   1f55e:	9600      	str	r6, [sp, #0]
   1f560:	462a      	mov	r2, r5
   1f562:	4621      	mov	r1, r4
   1f564:	4620      	mov	r0, r4
   1f566:	f7ff fed3 	bl	1f310 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f56a:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1f56c:	07db      	lsls	r3, r3, #31
   1f56e:	d54a      	bpl.n	1f606 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1f570:	4633      	mov	r3, r6
   1f572:	4642      	mov	r2, r8
   1f574:	4621      	mov	r1, r4
   1f576:	4620      	mov	r0, r4
   1f578:	f7ff fd7d 	bl	1f076 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1f57c:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1f57e:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1f580:	4620      	mov	r0, r4
   1f582:	f7ff fd90 	bl	1f0a6 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1f586:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1f58a:	3b01      	subs	r3, #1
   1f58c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1f590:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1f594:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1f598:	463a      	mov	r2, r7
   1f59a:	4621      	mov	r1, r4
   1f59c:	4628      	mov	r0, r5
   1f59e:	f7ff ff8a 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1f5a2:	4643      	mov	r3, r8
   1f5a4:	aa0a      	add	r2, sp, #40	; 0x28
   1f5a6:	4629      	mov	r1, r5
   1f5a8:	4628      	mov	r0, r5
   1f5aa:	9600      	str	r6, [sp, #0]
   1f5ac:	f7ff fec9 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1f5b0:	4643      	mov	r3, r8
   1f5b2:	aa0a      	add	r2, sp, #40	; 0x28
   1f5b4:	4629      	mov	r1, r5
   1f5b6:	4628      	mov	r0, r5
   1f5b8:	9600      	str	r6, [sp, #0]
   1f5ba:	f7ff fec2 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1f5be:	a90a      	add	r1, sp, #40	; 0x28
   1f5c0:	4608      	mov	r0, r1
   1f5c2:	4643      	mov	r3, r8
   1f5c4:	462a      	mov	r2, r5
   1f5c6:	9600      	str	r6, [sp, #0]
   1f5c8:	f7ff febb 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1f5cc:	463b      	mov	r3, r7
   1f5ce:	aa0a      	add	r2, sp, #40	; 0x28
   1f5d0:	4621      	mov	r1, r4
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	f7ff ff5f 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1f5d8:	aa02      	add	r2, sp, #8
   1f5da:	4643      	mov	r3, r8
   1f5dc:	4610      	mov	r0, r2
   1f5de:	4621      	mov	r1, r4
   1f5e0:	9600      	str	r6, [sp, #0]
   1f5e2:	f7ff feae 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1f5e6:	4632      	mov	r2, r6
   1f5e8:	4629      	mov	r1, r5
   1f5ea:	4620      	mov	r0, r4
   1f5ec:	f7ff fe41 	bl	1f272 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1f5f0:	4649      	mov	r1, r9
   1f5f2:	4628      	mov	r0, r5
   1f5f4:	f7ff fe3d 	bl	1f272 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1f5f8:	a902      	add	r1, sp, #8
   1f5fa:	4648      	mov	r0, r9
   1f5fc:	f7ff fe39 	bl	1f272 <uECC_vli_set>
}
   1f600:	b012      	add	sp, #72	; 0x48
   1f602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1f606:	4631      	mov	r1, r6
   1f608:	4620      	mov	r0, r4
   1f60a:	f7ff fd4c 	bl	1f0a6 <uECC_vli_rshift1>
   1f60e:	e7c3      	b.n	1f598 <double_jacobian_default+0xda>

0001f610 <x_side_default>:
{
   1f610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f614:	4615      	mov	r5, r2
   1f616:	b08a      	sub	sp, #40	; 0x28
   1f618:	4604      	mov	r4, r0
   1f61a:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f61c:	221c      	movs	r2, #28
   1f61e:	2100      	movs	r1, #0
   1f620:	a803      	add	r0, sp, #12
   1f622:	f000 fe33 	bl	2028c <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1f626:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1f628:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f62c:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1f62e:	462a      	mov	r2, r5
   1f630:	4631      	mov	r1, r6
   1f632:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1f634:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1f636:	f7ff ff3e 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1f63a:	463b      	mov	r3, r7
   1f63c:	aa02      	add	r2, sp, #8
   1f63e:	4621      	mov	r1, r4
   1f640:	4620      	mov	r0, r4
   1f642:	f8cd 8000 	str.w	r8, [sp]
   1f646:	f7ff fe7c 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1f64a:	462b      	mov	r3, r5
   1f64c:	4632      	mov	r2, r6
   1f64e:	4621      	mov	r1, r4
   1f650:	4620      	mov	r0, r4
   1f652:	f7ff ff20 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1f656:	f8cd 8000 	str.w	r8, [sp]
   1f65a:	463b      	mov	r3, r7
   1f65c:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1f660:	4621      	mov	r1, r4
   1f662:	4620      	mov	r0, r4
   1f664:	f7ff fe54 	bl	1f310 <uECC_vli_modAdd>
}
   1f668:	b00a      	add	sp, #40	; 0x28
   1f66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f66e <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1f66e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f672:	b09a      	sub	sp, #104	; 0x68
   1f674:	4616      	mov	r6, r2
   1f676:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1f67a:	4644      	mov	r4, r8
{
   1f67c:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1f67e:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f682:	9500      	str	r5, [sp, #0]
{
   1f684:	4607      	mov	r7, r0
   1f686:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f688:	4623      	mov	r3, r4
   1f68a:	4602      	mov	r2, r0
   1f68c:	4631      	mov	r1, r6
   1f68e:	a802      	add	r0, sp, #8
   1f690:	f7ff fe57 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1f694:	a902      	add	r1, sp, #8
   1f696:	4642      	mov	r2, r8
   1f698:	4608      	mov	r0, r1
   1f69a:	f7ff ff0c 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1f69e:	4643      	mov	r3, r8
   1f6a0:	aa02      	add	r2, sp, #8
   1f6a2:	4639      	mov	r1, r7
   1f6a4:	4638      	mov	r0, r7
   1f6a6:	f7ff fef6 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1f6aa:	4643      	mov	r3, r8
   1f6ac:	aa02      	add	r2, sp, #8
   1f6ae:	4631      	mov	r1, r6
   1f6b0:	4630      	mov	r0, r6
   1f6b2:	f7ff fef0 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1f6b6:	4623      	mov	r3, r4
   1f6b8:	4652      	mov	r2, sl
   1f6ba:	4649      	mov	r1, r9
   1f6bc:	a802      	add	r0, sp, #8
   1f6be:	9500      	str	r5, [sp, #0]
   1f6c0:	f7ff fe26 	bl	1f310 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1f6c4:	4623      	mov	r3, r4
   1f6c6:	4652      	mov	r2, sl
   1f6c8:	4649      	mov	r1, r9
   1f6ca:	4648      	mov	r0, r9
   1f6cc:	9500      	str	r5, [sp, #0]
   1f6ce:	f7ff fe38 	bl	1f342 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1f6d2:	4623      	mov	r3, r4
   1f6d4:	463a      	mov	r2, r7
   1f6d6:	4631      	mov	r1, r6
   1f6d8:	a80a      	add	r0, sp, #40	; 0x28
   1f6da:	9500      	str	r5, [sp, #0]
   1f6dc:	f7ff fe31 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1f6e0:	4643      	mov	r3, r8
   1f6e2:	aa0a      	add	r2, sp, #40	; 0x28
   1f6e4:	4651      	mov	r1, sl
   1f6e6:	4650      	mov	r0, sl
   1f6e8:	f7ff fed5 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1f6ec:	4623      	mov	r3, r4
   1f6ee:	4632      	mov	r2, r6
   1f6f0:	4639      	mov	r1, r7
   1f6f2:	a80a      	add	r0, sp, #40	; 0x28
   1f6f4:	9500      	str	r5, [sp, #0]
   1f6f6:	f7ff fe0b 	bl	1f310 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1f6fa:	4642      	mov	r2, r8
   1f6fc:	4649      	mov	r1, r9
   1f6fe:	4630      	mov	r0, r6
   1f700:	f7ff fed9 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1f704:	4623      	mov	r3, r4
   1f706:	aa0a      	add	r2, sp, #40	; 0x28
   1f708:	4631      	mov	r1, r6
   1f70a:	4630      	mov	r0, r6
   1f70c:	9500      	str	r5, [sp, #0]
   1f70e:	f7ff fe18 	bl	1f342 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1f712:	4623      	mov	r3, r4
   1f714:	4632      	mov	r2, r6
   1f716:	4639      	mov	r1, r7
   1f718:	a812      	add	r0, sp, #72	; 0x48
   1f71a:	9500      	str	r5, [sp, #0]
   1f71c:	f7ff fe11 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1f720:	4643      	mov	r3, r8
   1f722:	aa12      	add	r2, sp, #72	; 0x48
   1f724:	4649      	mov	r1, r9
   1f726:	4648      	mov	r0, r9
   1f728:	f7ff feb5 	bl	1f496 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1f72c:	4623      	mov	r3, r4
   1f72e:	4652      	mov	r2, sl
   1f730:	4649      	mov	r1, r9
   1f732:	4648      	mov	r0, r9
   1f734:	9500      	str	r5, [sp, #0]
   1f736:	f7ff fe04 	bl	1f342 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1f73a:	4642      	mov	r2, r8
   1f73c:	a902      	add	r1, sp, #8
   1f73e:	a812      	add	r0, sp, #72	; 0x48
   1f740:	f7ff feb9 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1f744:	a912      	add	r1, sp, #72	; 0x48
   1f746:	4623      	mov	r3, r4
   1f748:	aa0a      	add	r2, sp, #40	; 0x28
   1f74a:	4608      	mov	r0, r1
   1f74c:	9500      	str	r5, [sp, #0]
   1f74e:	f7ff fdf8 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1f752:	4623      	mov	r3, r4
   1f754:	463a      	mov	r2, r7
   1f756:	a912      	add	r1, sp, #72	; 0x48
   1f758:	a80a      	add	r0, sp, #40	; 0x28
   1f75a:	9500      	str	r5, [sp, #0]
   1f75c:	f7ff fdf1 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1f760:	a90a      	add	r1, sp, #40	; 0x28
   1f762:	4643      	mov	r3, r8
   1f764:	aa02      	add	r2, sp, #8
   1f766:	4608      	mov	r0, r1
   1f768:	f7ff fe95 	bl	1f496 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1f76c:	4623      	mov	r3, r4
   1f76e:	4652      	mov	r2, sl
   1f770:	a90a      	add	r1, sp, #40	; 0x28
   1f772:	4650      	mov	r0, sl
   1f774:	9500      	str	r5, [sp, #0]
   1f776:	f7ff fde4 	bl	1f342 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1f77a:	462a      	mov	r2, r5
   1f77c:	a912      	add	r1, sp, #72	; 0x48
   1f77e:	4638      	mov	r0, r7
   1f780:	f7ff fd77 	bl	1f272 <uECC_vli_set>
}
   1f784:	b01a      	add	sp, #104	; 0x68
   1f786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f78a <uECC_vli_modInv>:
{
   1f78a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f78c:	460f      	mov	r7, r1
   1f78e:	b0a1      	sub	sp, #132	; 0x84
   1f790:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1f792:	4619      	mov	r1, r3
   1f794:	4638      	mov	r0, r7
{
   1f796:	4615      	mov	r5, r2
   1f798:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1f79a:	f7ff fd30 	bl	1f1fe <uECC_vli_isZero>
   1f79e:	b120      	cbz	r0, 1f7aa <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1f7a0:	4630      	mov	r0, r6
   1f7a2:	f7ff fd21 	bl	1f1e8 <uECC_vli_clear>
}
   1f7a6:	b021      	add	sp, #132	; 0x84
   1f7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1f7aa:	4622      	mov	r2, r4
   1f7ac:	4639      	mov	r1, r7
   1f7ae:	4668      	mov	r0, sp
   1f7b0:	f7ff fd5f 	bl	1f272 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1f7b4:	4629      	mov	r1, r5
   1f7b6:	a808      	add	r0, sp, #32
   1f7b8:	f7ff fd5b 	bl	1f272 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1f7bc:	a810      	add	r0, sp, #64	; 0x40
   1f7be:	4621      	mov	r1, r4
   1f7c0:	f7ff fd12 	bl	1f1e8 <uECC_vli_clear>
	u[0] = 1;
   1f7c4:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1f7c6:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1f7c8:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1f7ca:	f7ff fd0d 	bl	1f1e8 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1f7ce:	4622      	mov	r2, r4
   1f7d0:	a908      	add	r1, sp, #32
   1f7d2:	4668      	mov	r0, sp
   1f7d4:	f7ff fd59 	bl	1f28a <uECC_vli_cmp_unsafe>
   1f7d8:	b928      	cbnz	r0, 1f7e6 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1f7da:	4622      	mov	r2, r4
   1f7dc:	a910      	add	r1, sp, #64	; 0x40
   1f7de:	4630      	mov	r0, r6
   1f7e0:	f7ff fd47 	bl	1f272 <uECC_vli_set>
   1f7e4:	e7df      	b.n	1f7a6 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1f7e6:	9b00      	ldr	r3, [sp, #0]
   1f7e8:	07da      	lsls	r2, r3, #31
   1f7ea:	d409      	bmi.n	1f800 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1f7ec:	4621      	mov	r1, r4
   1f7ee:	4668      	mov	r0, sp
   1f7f0:	f7ff fc59 	bl	1f0a6 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1f7f4:	4622      	mov	r2, r4
   1f7f6:	4629      	mov	r1, r5
   1f7f8:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1f7fa:	f7ff fc61 	bl	1f0c0 <vli_modInv_update>
   1f7fe:	e7e6      	b.n	1f7ce <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1f800:	9b08      	ldr	r3, [sp, #32]
   1f802:	07db      	lsls	r3, r3, #31
   1f804:	d407      	bmi.n	1f816 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1f806:	4621      	mov	r1, r4
   1f808:	a808      	add	r0, sp, #32
   1f80a:	f7ff fc4c 	bl	1f0a6 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1f80e:	4622      	mov	r2, r4
   1f810:	4629      	mov	r1, r5
   1f812:	a818      	add	r0, sp, #96	; 0x60
   1f814:	e7f1      	b.n	1f7fa <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1f816:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1f818:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1f81a:	dd1c      	ble.n	1f856 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1f81c:	aa08      	add	r2, sp, #32
   1f81e:	4669      	mov	r1, sp
   1f820:	4668      	mov	r0, sp
   1f822:	f7ff fd5c 	bl	1f2de <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1f826:	4621      	mov	r1, r4
   1f828:	4668      	mov	r0, sp
   1f82a:	f7ff fc3c 	bl	1f0a6 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1f82e:	4622      	mov	r2, r4
   1f830:	a918      	add	r1, sp, #96	; 0x60
   1f832:	a810      	add	r0, sp, #64	; 0x40
   1f834:	f7ff fd29 	bl	1f28a <uECC_vli_cmp_unsafe>
   1f838:	2800      	cmp	r0, #0
   1f83a:	da05      	bge.n	1f848 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1f83c:	a910      	add	r1, sp, #64	; 0x40
   1f83e:	4623      	mov	r3, r4
   1f840:	462a      	mov	r2, r5
   1f842:	4608      	mov	r0, r1
   1f844:	f7ff fc17 	bl	1f076 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1f848:	a910      	add	r1, sp, #64	; 0x40
   1f84a:	4623      	mov	r3, r4
   1f84c:	aa18      	add	r2, sp, #96	; 0x60
   1f84e:	4608      	mov	r0, r1
   1f850:	f7ff fd45 	bl	1f2de <uECC_vli_sub>
   1f854:	e7ce      	b.n	1f7f4 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1f856:	a908      	add	r1, sp, #32
   1f858:	466a      	mov	r2, sp
   1f85a:	4608      	mov	r0, r1
   1f85c:	f7ff fd3f 	bl	1f2de <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1f860:	4621      	mov	r1, r4
   1f862:	a808      	add	r0, sp, #32
   1f864:	f7ff fc1f 	bl	1f0a6 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1f868:	4622      	mov	r2, r4
   1f86a:	a910      	add	r1, sp, #64	; 0x40
   1f86c:	a818      	add	r0, sp, #96	; 0x60
   1f86e:	f7ff fd0c 	bl	1f28a <uECC_vli_cmp_unsafe>
   1f872:	2800      	cmp	r0, #0
   1f874:	da05      	bge.n	1f882 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1f876:	a918      	add	r1, sp, #96	; 0x60
   1f878:	4623      	mov	r3, r4
   1f87a:	462a      	mov	r2, r5
   1f87c:	4608      	mov	r0, r1
   1f87e:	f7ff fbfa 	bl	1f076 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1f882:	a918      	add	r1, sp, #96	; 0x60
   1f884:	4623      	mov	r3, r4
   1f886:	aa10      	add	r2, sp, #64	; 0x40
   1f888:	4608      	mov	r0, r1
   1f88a:	f7ff fd28 	bl	1f2de <uECC_vli_sub>
   1f88e:	e7be      	b.n	1f80e <uECC_vli_modInv+0x84>

0001f890 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1f890:	7809      	ldrb	r1, [r1, #0]
   1f892:	0049      	lsls	r1, r1, #1
   1f894:	b249      	sxtb	r1, r1
   1f896:	f7ff bcb2 	b.w	1f1fe <uECC_vli_isZero>

0001f89a <apply_z>:
{
   1f89a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f89c:	4615      	mov	r5, r2
   1f89e:	b089      	sub	sp, #36	; 0x24
   1f8a0:	461c      	mov	r4, r3
   1f8a2:	4607      	mov	r7, r0
   1f8a4:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1f8a6:	461a      	mov	r2, r3
   1f8a8:	4629      	mov	r1, r5
   1f8aa:	4668      	mov	r0, sp
   1f8ac:	f7ff fe03 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1f8b0:	4623      	mov	r3, r4
   1f8b2:	466a      	mov	r2, sp
   1f8b4:	4639      	mov	r1, r7
   1f8b6:	4638      	mov	r0, r7
   1f8b8:	f7ff fded 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1f8bc:	4623      	mov	r3, r4
   1f8be:	462a      	mov	r2, r5
   1f8c0:	4669      	mov	r1, sp
   1f8c2:	4668      	mov	r0, sp
   1f8c4:	f7ff fde7 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1f8c8:	4623      	mov	r3, r4
   1f8ca:	466a      	mov	r2, sp
   1f8cc:	4631      	mov	r1, r6
   1f8ce:	4630      	mov	r0, r6
   1f8d0:	f7ff fde1 	bl	1f496 <uECC_vli_modMult_fast>
}
   1f8d4:	b009      	add	sp, #36	; 0x24
   1f8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f8d8 <XYcZ_add>:
{
   1f8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f8dc:	b08a      	sub	sp, #40	; 0x28
   1f8de:	4614      	mov	r4, r2
   1f8e0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1f8e4:	4655      	mov	r5, sl
{
   1f8e6:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1f8e8:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f8ec:	9600      	str	r6, [sp, #0]
{
   1f8ee:	4680      	mov	r8, r0
   1f8f0:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1f8f2:	462b      	mov	r3, r5
   1f8f4:	4602      	mov	r2, r0
   1f8f6:	4621      	mov	r1, r4
   1f8f8:	a802      	add	r0, sp, #8
   1f8fa:	f7ff fd22 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1f8fe:	a902      	add	r1, sp, #8
   1f900:	4652      	mov	r2, sl
   1f902:	4608      	mov	r0, r1
   1f904:	f7ff fdd7 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1f908:	4653      	mov	r3, sl
   1f90a:	aa02      	add	r2, sp, #8
   1f90c:	4641      	mov	r1, r8
   1f90e:	4640      	mov	r0, r8
   1f910:	f7ff fdc1 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1f914:	4653      	mov	r3, sl
   1f916:	aa02      	add	r2, sp, #8
   1f918:	4621      	mov	r1, r4
   1f91a:	4620      	mov	r0, r4
   1f91c:	f7ff fdbb 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1f920:	462b      	mov	r3, r5
   1f922:	464a      	mov	r2, r9
   1f924:	4639      	mov	r1, r7
   1f926:	4638      	mov	r0, r7
   1f928:	9600      	str	r6, [sp, #0]
   1f92a:	f7ff fd0a 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1f92e:	4652      	mov	r2, sl
   1f930:	4639      	mov	r1, r7
   1f932:	a802      	add	r0, sp, #8
   1f934:	f7ff fdbf 	bl	1f4b6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1f938:	a902      	add	r1, sp, #8
   1f93a:	462b      	mov	r3, r5
   1f93c:	4642      	mov	r2, r8
   1f93e:	4608      	mov	r0, r1
   1f940:	9600      	str	r6, [sp, #0]
   1f942:	f7ff fcfe 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1f946:	a902      	add	r1, sp, #8
   1f948:	462b      	mov	r3, r5
   1f94a:	4622      	mov	r2, r4
   1f94c:	4608      	mov	r0, r1
   1f94e:	9600      	str	r6, [sp, #0]
   1f950:	f7ff fcf7 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1f954:	462b      	mov	r3, r5
   1f956:	4642      	mov	r2, r8
   1f958:	4621      	mov	r1, r4
   1f95a:	4620      	mov	r0, r4
   1f95c:	9600      	str	r6, [sp, #0]
   1f95e:	f7ff fcf0 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1f962:	4653      	mov	r3, sl
   1f964:	4622      	mov	r2, r4
   1f966:	4649      	mov	r1, r9
   1f968:	4648      	mov	r0, r9
   1f96a:	f7ff fd94 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1f96e:	462b      	mov	r3, r5
   1f970:	aa02      	add	r2, sp, #8
   1f972:	4641      	mov	r1, r8
   1f974:	4620      	mov	r0, r4
   1f976:	9600      	str	r6, [sp, #0]
   1f978:	f7ff fce3 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1f97c:	4653      	mov	r3, sl
   1f97e:	4622      	mov	r2, r4
   1f980:	4639      	mov	r1, r7
   1f982:	4638      	mov	r0, r7
   1f984:	f7ff fd87 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1f988:	462b      	mov	r3, r5
   1f98a:	464a      	mov	r2, r9
   1f98c:	4639      	mov	r1, r7
   1f98e:	4638      	mov	r0, r7
   1f990:	9600      	str	r6, [sp, #0]
   1f992:	f7ff fcd6 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1f996:	4632      	mov	r2, r6
   1f998:	a902      	add	r1, sp, #8
   1f99a:	4620      	mov	r0, r4
   1f99c:	f7ff fc69 	bl	1f272 <uECC_vli_set>
}
   1f9a0:	b00a      	add	sp, #40	; 0x28
   1f9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f9a6 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1f9a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9aa:	b0b1      	sub	sp, #196	; 0xc4
   1f9ac:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1f9b0:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1f9b2:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1f9b6:	a818      	add	r0, sp, #96	; 0x60
{
   1f9b8:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1f9ba:	463a      	mov	r2, r7
{
   1f9bc:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1f9be:	f7ff fc58 	bl	1f272 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1f9c2:	00bb      	lsls	r3, r7, #2
   1f9c4:	9305      	str	r3, [sp, #20]
   1f9c6:	9b04      	ldr	r3, [sp, #16]
   1f9c8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1f9cc:	4619      	mov	r1, r3
   1f9ce:	a828      	add	r0, sp, #160	; 0xa0
   1f9d0:	9302      	str	r3, [sp, #8]
   1f9d2:	f7ff fc4e 	bl	1f272 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1f9d6:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1f9da:	2e00      	cmp	r6, #0
   1f9dc:	f000 8088 	beq.w	1faf0 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1f9e0:	462a      	mov	r2, r5
   1f9e2:	4631      	mov	r1, r6
   1f9e4:	a808      	add	r0, sp, #32
   1f9e6:	f7ff fc44 	bl	1f272 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1f9ea:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1f9ee:	462a      	mov	r2, r5
   1f9f0:	a918      	add	r1, sp, #96	; 0x60
   1f9f2:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1f9f4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1f9f8:	f7ff fc3b 	bl	1f272 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1f9fc:	a928      	add	r1, sp, #160	; 0xa0
   1f9fe:	4648      	mov	r0, r9
   1fa00:	f7ff fc37 	bl	1f272 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1fa04:	4623      	mov	r3, r4
   1fa06:	aa08      	add	r2, sp, #32
   1fa08:	a928      	add	r1, sp, #160	; 0xa0
   1fa0a:	a818      	add	r0, sp, #96	; 0x60
   1fa0c:	f7ff ff45 	bl	1f89a <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1fa10:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1fa14:	4623      	mov	r3, r4
   1fa16:	aa08      	add	r2, sp, #32
   1fa18:	a928      	add	r1, sp, #160	; 0xa0
   1fa1a:	a818      	add	r0, sp, #96	; 0x60
   1fa1c:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1fa1e:	4623      	mov	r3, r4
   1fa20:	aa08      	add	r2, sp, #32
   1fa22:	4649      	mov	r1, r9
   1fa24:	4640      	mov	r0, r8
   1fa26:	f7ff ff38 	bl	1f89a <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1fa2a:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1fa2e:	3d02      	subs	r5, #2
   1fa30:	b22d      	sxth	r5, r5
   1fa32:	2d00      	cmp	r5, #0
   1fa34:	dc63      	bgt.n	1fafe <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1fa36:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1fa3a:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1fa3c:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1fa40:	ab10      	add	r3, sp, #64	; 0x40
   1fa42:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1fa46:	43ed      	mvns	r5, r5
   1fa48:	ab20      	add	r3, sp, #128	; 0x80
   1fa4a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1fa4e:	f005 0501 	and.w	r5, r5, #1
   1fa52:	ab10      	add	r3, sp, #64	; 0x40
   1fa54:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1fa58:	ab20      	add	r3, sp, #128	; 0x80
   1fa5a:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1fa5e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1fa62:	462b      	mov	r3, r5
   1fa64:	464a      	mov	r2, r9
   1fa66:	4631      	mov	r1, r6
   1fa68:	4640      	mov	r0, r8
   1fa6a:	f7ff fe00 	bl	1f66e <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1fa6e:	4653      	mov	r3, sl
   1fa70:	aa10      	add	r2, sp, #64	; 0x40
   1fa72:	a918      	add	r1, sp, #96	; 0x60
   1fa74:	a808      	add	r0, sp, #32
   1fa76:	9700      	str	r7, [sp, #0]
   1fa78:	f7ff fc63 	bl	1f342 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1fa7c:	a908      	add	r1, sp, #32
   1fa7e:	4623      	mov	r3, r4
   1fa80:	4632      	mov	r2, r6
   1fa82:	4608      	mov	r0, r1
   1fa84:	f7ff fd07 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1fa88:	a908      	add	r1, sp, #32
   1fa8a:	9a04      	ldr	r2, [sp, #16]
   1fa8c:	4623      	mov	r3, r4
   1fa8e:	4608      	mov	r0, r1
   1fa90:	f7ff fd01 	bl	1f496 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1fa94:	a908      	add	r1, sp, #32
   1fa96:	463b      	mov	r3, r7
   1fa98:	4652      	mov	r2, sl
   1fa9a:	4608      	mov	r0, r1
   1fa9c:	f7ff fe75 	bl	1f78a <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1faa0:	a908      	add	r1, sp, #32
   1faa2:	9a02      	ldr	r2, [sp, #8]
   1faa4:	4623      	mov	r3, r4
   1faa6:	4608      	mov	r0, r1
   1faa8:	f7ff fcf5 	bl	1f496 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1faac:	a908      	add	r1, sp, #32
   1faae:	4623      	mov	r3, r4
   1fab0:	4642      	mov	r2, r8
   1fab2:	4608      	mov	r0, r1
   1fab4:	f7ff fcef 	bl	1f496 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1fab8:	9400      	str	r4, [sp, #0]
   1faba:	4633      	mov	r3, r6
   1fabc:	4642      	mov	r2, r8
   1fabe:	4629      	mov	r1, r5
   1fac0:	4648      	mov	r0, r9
   1fac2:	f7ff ff09 	bl	1f8d8 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1fac6:	4623      	mov	r3, r4
   1fac8:	aa08      	add	r2, sp, #32
   1faca:	a920      	add	r1, sp, #128	; 0x80
   1facc:	a810      	add	r0, sp, #64	; 0x40
   1face:	f7ff fee4 	bl	1f89a <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1fad2:	9803      	ldr	r0, [sp, #12]
   1fad4:	463a      	mov	r2, r7
   1fad6:	a910      	add	r1, sp, #64	; 0x40
   1fad8:	f7ff fbcb 	bl	1f272 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1fadc:	9b03      	ldr	r3, [sp, #12]
   1fade:	9c05      	ldr	r4, [sp, #20]
   1fae0:	4423      	add	r3, r4
   1fae2:	a920      	add	r1, sp, #128	; 0x80
   1fae4:	4618      	mov	r0, r3
   1fae6:	f7ff fbc4 	bl	1f272 <uECC_vli_set>
}
   1faea:	b031      	add	sp, #196	; 0xc4
   1faec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1faf0:	4629      	mov	r1, r5
   1faf2:	a808      	add	r0, sp, #32
   1faf4:	f7ff fb78 	bl	1f1e8 <uECC_vli_clear>
		z[0] = 1;
   1faf8:	2301      	movs	r3, #1
   1fafa:	9308      	str	r3, [sp, #32]
   1fafc:	e775      	b.n	1f9ea <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1fafe:	4629      	mov	r1, r5
   1fb00:	4650      	mov	r0, sl
   1fb02:	f7ff fb8b 	bl	1f21c <uECC_vli_testBit>
   1fb06:	fab0 f680 	clz	r6, r0
   1fb0a:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1fb0c:	f1c6 0101 	rsb	r1, r6, #1
   1fb10:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1fb14:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1fb18:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1fb1c:	4633      	mov	r3, r6
   1fb1e:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1fb22:	465a      	mov	r2, fp
   1fb24:	9400      	str	r4, [sp, #0]
   1fb26:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1fb2a:	f7ff fda0 	bl	1f66e <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1fb2e:	9907      	ldr	r1, [sp, #28]
   1fb30:	9806      	ldr	r0, [sp, #24]
   1fb32:	9400      	str	r4, [sp, #0]
   1fb34:	460b      	mov	r3, r1
   1fb36:	4602      	mov	r2, r0
   1fb38:	4631      	mov	r1, r6
   1fb3a:	4658      	mov	r0, fp
   1fb3c:	f7ff fecc 	bl	1f8d8 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1fb40:	3d01      	subs	r5, #1
   1fb42:	e775      	b.n	1fa30 <EccPoint_mult+0x8a>

0001fb44 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1fb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1fb48:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1fb4c:	f119 081f 	adds.w	r8, r9, #31
{
   1fb50:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1fb52:	bf48      	it	mi
   1fb54:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1fb58:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1fb5a:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1fb5e:	3524      	adds	r5, #36	; 0x24
   1fb60:	4601      	mov	r1, r0
{
   1fb62:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1fb64:	4643      	mov	r3, r8
   1fb66:	462a      	mov	r2, r5
   1fb68:	4630      	mov	r0, r6
   1fb6a:	f7ff fa84 	bl	1f076 <uECC_vli_add>
   1fb6e:	4604      	mov	r4, r0
   1fb70:	b990      	cbnz	r0, 1fb98 <regularize_k+0x54>
   1fb72:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1fb76:	da06      	bge.n	1fb86 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1fb78:	4649      	mov	r1, r9
   1fb7a:	4630      	mov	r0, r6
   1fb7c:	f7ff fb4e 	bl	1f21c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1fb80:	1e04      	subs	r4, r0, #0
   1fb82:	bf18      	it	ne
   1fb84:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1fb86:	4643      	mov	r3, r8
   1fb88:	462a      	mov	r2, r5
   1fb8a:	4631      	mov	r1, r6
   1fb8c:	4638      	mov	r0, r7
   1fb8e:	f7ff fa72 	bl	1f076 <uECC_vli_add>

	return carry;
}
   1fb92:	4620      	mov	r0, r4
   1fb94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1fb98:	2401      	movs	r4, #1
   1fb9a:	e7f4      	b.n	1fb86 <regularize_k+0x42>

0001fb9c <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1fb9c:	b530      	push	{r4, r5, lr}
   1fb9e:	4614      	mov	r4, r2
   1fba0:	b095      	sub	sp, #84	; 0x54
   1fba2:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1fba4:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1fba6:	4623      	mov	r3, r4
{
   1fba8:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1fbaa:	a904      	add	r1, sp, #16
   1fbac:	9102      	str	r1, [sp, #8]
   1fbae:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1fbb0:	f7ff ffc8 	bl	1fb44 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1fbb4:	fab0 f380 	clz	r3, r0
   1fbb8:	095b      	lsrs	r3, r3, #5
   1fbba:	aa14      	add	r2, sp, #80	; 0x50
   1fbbc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1fbc0:	8863      	ldrh	r3, [r4, #2]
   1fbc2:	9401      	str	r4, [sp, #4]
   1fbc4:	3301      	adds	r3, #1
   1fbc6:	b21b      	sxth	r3, r3
   1fbc8:	9300      	str	r3, [sp, #0]
   1fbca:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1fbce:	2300      	movs	r3, #0
   1fbd0:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1fbd4:	4628      	mov	r0, r5
   1fbd6:	f7ff fee6 	bl	1f9a6 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1fbda:	4621      	mov	r1, r4
   1fbdc:	4628      	mov	r0, r5
   1fbde:	f7ff fe57 	bl	1f890 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1fbe2:	fab0 f080 	clz	r0, r0
   1fbe6:	0940      	lsrs	r0, r0, #5
   1fbe8:	b015      	add	sp, #84	; 0x54
   1fbea:	bd30      	pop	{r4, r5, pc}

0001fbec <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1fbec:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1fbee:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1fbf0:	1e4f      	subs	r7, r1, #1
   1fbf2:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1fbf4:	428c      	cmp	r4, r1
   1fbf6:	f105 0501 	add.w	r5, r5, #1
   1fbfa:	db00      	blt.n	1fbfe <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1fbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1fbfe:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1fc00:	f023 0603 	bic.w	r6, r3, #3
   1fc04:	f003 0303 	and.w	r3, r3, #3
   1fc08:	5996      	ldr	r6, [r2, r6]
   1fc0a:	00db      	lsls	r3, r3, #3
   1fc0c:	fa26 f303 	lsr.w	r3, r6, r3
   1fc10:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1fc12:	e7ee      	b.n	1fbf2 <uECC_vli_nativeToBytes+0x6>

0001fc14 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc16:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1fc18:	1cd1      	adds	r1, r2, #3
   1fc1a:	bf48      	it	mi
   1fc1c:	1d91      	addmi	r1, r2, #6
   1fc1e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1fc22:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1fc24:	f7ff fae0 	bl	1f1e8 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1fc28:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1fc2a:	1e67      	subs	r7, r4, #1
   1fc2c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1fc2e:	42a2      	cmp	r2, r4
   1fc30:	f105 0501 	add.w	r5, r5, #1
   1fc34:	db00      	blt.n	1fc38 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1fc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1fc38:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1fc3a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1fc3e:	5cb2      	ldrb	r2, [r6, r2]
   1fc40:	f003 0303 	and.w	r3, r3, #3
   1fc44:	00db      	lsls	r3, r3, #3
   1fc46:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1fc4a:	5842      	ldr	r2, [r0, r1]
   1fc4c:	431a      	orrs	r2, r3
   1fc4e:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1fc50:	e7ec      	b.n	1fc2c <uECC_vli_bytesToNative+0x18>

0001fc52 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1fc52:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc54:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1fc56:	f991 6000 	ldrsb.w	r6, [r1]
{
   1fc5a:	4605      	mov	r5, r0
   1fc5c:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1fc5e:	f7ff fe17 	bl	1f890 <EccPoint_isZero>
   1fc62:	bb28      	cbnz	r0, 1fcb0 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1fc64:	1d27      	adds	r7, r4, #4
   1fc66:	4632      	mov	r2, r6
   1fc68:	4629      	mov	r1, r5
   1fc6a:	4638      	mov	r0, r7
   1fc6c:	f7ff fb0d 	bl	1f28a <uECC_vli_cmp_unsafe>
   1fc70:	2801      	cmp	r0, #1
   1fc72:	d120      	bne.n	1fcb6 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1fc74:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1fc78:	4632      	mov	r2, r6
   1fc7a:	4638      	mov	r0, r7
   1fc7c:	f7ff fb05 	bl	1f28a <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1fc80:	2801      	cmp	r0, #1
   1fc82:	d118      	bne.n	1fcb6 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1fc84:	4622      	mov	r2, r4
   1fc86:	4668      	mov	r0, sp
   1fc88:	f7ff fc15 	bl	1f4b6 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1fc8c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1fc90:	4622      	mov	r2, r4
   1fc92:	4629      	mov	r1, r5
   1fc94:	a808      	add	r0, sp, #32
   1fc96:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1fc98:	4632      	mov	r2, r6
   1fc9a:	a908      	add	r1, sp, #32
   1fc9c:	4668      	mov	r0, sp
   1fc9e:	f7ff fb0b 	bl	1f2b8 <uECC_vli_equal>
   1fca2:	2800      	cmp	r0, #0
		return -3;
   1fca4:	bf0c      	ite	eq
   1fca6:	2000      	moveq	r0, #0
   1fca8:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1fcac:	b011      	add	sp, #68	; 0x44
   1fcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1fcb0:	f04f 30ff 	mov.w	r0, #4294967295
   1fcb4:	e7fa      	b.n	1fcac <uECC_valid_point+0x5a>
		return -2;
   1fcb6:	f06f 0001 	mvn.w	r0, #1
   1fcba:	e7f7      	b.n	1fcac <uECC_valid_point+0x5a>

0001fcbc <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1fcbc:	b570      	push	{r4, r5, r6, lr}
   1fcbe:	460c      	mov	r4, r1
   1fcc0:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1fcc2:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1fcc4:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1fcc8:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1fcca:	4601      	mov	r1, r0
   1fccc:	4668      	mov	r0, sp
   1fcce:	f7ff ffa1 	bl	1fc14 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1fcd2:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1fcd6:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1fcda:	18a9      	adds	r1, r5, r2
   1fcdc:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1fce0:	f7ff ff98 	bl	1fc14 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1fce4:	2210      	movs	r2, #16
   1fce6:	4631      	mov	r1, r6
   1fce8:	4668      	mov	r0, sp
   1fcea:	f7ff face 	bl	1f28a <uECC_vli_cmp_unsafe>
   1fcee:	b128      	cbz	r0, 1fcfc <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1fcf0:	4621      	mov	r1, r4
   1fcf2:	4668      	mov	r0, sp
   1fcf4:	f7ff ffad 	bl	1fc52 <uECC_valid_point>
}
   1fcf8:	b010      	add	sp, #64	; 0x40
   1fcfa:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1fcfc:	f06f 0003 	mvn.w	r0, #3
   1fd00:	e7fa      	b.n	1fcf8 <uECC_valid_public_key+0x3c>

0001fd02 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1fd02:	78cb      	ldrb	r3, [r1, #3]
   1fd04:	7802      	ldrb	r2, [r0, #0]
   1fd06:	4053      	eors	r3, r2
   1fd08:	7003      	strb	r3, [r0, #0]
   1fd0a:	884b      	ldrh	r3, [r1, #2]
   1fd0c:	7842      	ldrb	r2, [r0, #1]
   1fd0e:	4053      	eors	r3, r2
   1fd10:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1fd12:	680a      	ldr	r2, [r1, #0]
   1fd14:	7883      	ldrb	r3, [r0, #2]
   1fd16:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fd1a:	7083      	strb	r3, [r0, #2]
   1fd1c:	680a      	ldr	r2, [r1, #0]
   1fd1e:	78c3      	ldrb	r3, [r0, #3]
   1fd20:	4053      	eors	r3, r2
   1fd22:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1fd24:	79cb      	ldrb	r3, [r1, #7]
   1fd26:	7902      	ldrb	r2, [r0, #4]
   1fd28:	4053      	eors	r3, r2
   1fd2a:	7103      	strb	r3, [r0, #4]
   1fd2c:	88cb      	ldrh	r3, [r1, #6]
   1fd2e:	7942      	ldrb	r2, [r0, #5]
   1fd30:	4053      	eors	r3, r2
   1fd32:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1fd34:	684a      	ldr	r2, [r1, #4]
   1fd36:	7983      	ldrb	r3, [r0, #6]
   1fd38:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fd3c:	7183      	strb	r3, [r0, #6]
   1fd3e:	684a      	ldr	r2, [r1, #4]
   1fd40:	79c3      	ldrb	r3, [r0, #7]
   1fd42:	4053      	eors	r3, r2
   1fd44:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1fd46:	7acb      	ldrb	r3, [r1, #11]
   1fd48:	7a02      	ldrb	r2, [r0, #8]
   1fd4a:	4053      	eors	r3, r2
   1fd4c:	7203      	strb	r3, [r0, #8]
   1fd4e:	7a42      	ldrb	r2, [r0, #9]
   1fd50:	894b      	ldrh	r3, [r1, #10]
   1fd52:	4053      	eors	r3, r2
   1fd54:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1fd56:	688a      	ldr	r2, [r1, #8]
   1fd58:	7a83      	ldrb	r3, [r0, #10]
   1fd5a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fd5e:	7283      	strb	r3, [r0, #10]
   1fd60:	688a      	ldr	r2, [r1, #8]
   1fd62:	7ac3      	ldrb	r3, [r0, #11]
   1fd64:	4053      	eors	r3, r2
   1fd66:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1fd68:	7bcb      	ldrb	r3, [r1, #15]
   1fd6a:	7b02      	ldrb	r2, [r0, #12]
   1fd6c:	4053      	eors	r3, r2
   1fd6e:	7303      	strb	r3, [r0, #12]
   1fd70:	89cb      	ldrh	r3, [r1, #14]
   1fd72:	7b42      	ldrb	r2, [r0, #13]
   1fd74:	4053      	eors	r3, r2
   1fd76:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1fd78:	68ca      	ldr	r2, [r1, #12]
   1fd7a:	7b83      	ldrb	r3, [r0, #14]
   1fd7c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fd80:	7383      	strb	r3, [r0, #14]
   1fd82:	68ca      	ldr	r2, [r1, #12]
   1fd84:	7bc3      	ldrb	r3, [r0, #15]
   1fd86:	4053      	eors	r3, r2
   1fd88:	73c3      	strb	r3, [r0, #15]
}
   1fd8a:	4770      	bx	lr

0001fd8c <shift_rows>:
{
   1fd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1fd8e:	7802      	ldrb	r2, [r0, #0]
   1fd90:	f88d 2000 	strb.w	r2, [sp]
   1fd94:	7942      	ldrb	r2, [r0, #5]
   1fd96:	f88d 2001 	strb.w	r2, [sp, #1]
   1fd9a:	7a82      	ldrb	r2, [r0, #10]
   1fd9c:	f88d 2002 	strb.w	r2, [sp, #2]
   1fda0:	7bc2      	ldrb	r2, [r0, #15]
   1fda2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1fda6:	7902      	ldrb	r2, [r0, #4]
   1fda8:	f88d 2004 	strb.w	r2, [sp, #4]
   1fdac:	7a42      	ldrb	r2, [r0, #9]
   1fdae:	f88d 2005 	strb.w	r2, [sp, #5]
   1fdb2:	7b82      	ldrb	r2, [r0, #14]
   1fdb4:	f88d 2006 	strb.w	r2, [sp, #6]
   1fdb8:	78c2      	ldrb	r2, [r0, #3]
   1fdba:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1fdbe:	7a02      	ldrb	r2, [r0, #8]
   1fdc0:	f88d 2008 	strb.w	r2, [sp, #8]
   1fdc4:	7b42      	ldrb	r2, [r0, #13]
   1fdc6:	f88d 2009 	strb.w	r2, [sp, #9]
   1fdca:	7882      	ldrb	r2, [r0, #2]
   1fdcc:	f88d 200a 	strb.w	r2, [sp, #10]
   1fdd0:	79c2      	ldrb	r2, [r0, #7]
   1fdd2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1fdd6:	7b02      	ldrb	r2, [r0, #12]
   1fdd8:	f88d 200c 	strb.w	r2, [sp, #12]
   1fddc:	7842      	ldrb	r2, [r0, #1]
   1fdde:	7ac3      	ldrb	r3, [r0, #11]
   1fde0:	f88d 200d 	strb.w	r2, [sp, #13]
   1fde4:	7982      	ldrb	r2, [r0, #6]
   1fde6:	f88d 200e 	strb.w	r2, [sp, #14]
   1fdea:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1fdee:	2310      	movs	r3, #16
   1fdf0:	466a      	mov	r2, sp
   1fdf2:	4619      	mov	r1, r3
   1fdf4:	f7ff f87b 	bl	1eeee <_copy>
}
   1fdf8:	b005      	add	sp, #20
   1fdfa:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdfe <mult_row_column>:
{
   1fdfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe00:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fe02:	7808      	ldrb	r0, [r1, #0]
{
   1fe04:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fe06:	f7ff f881 	bl	1ef0c <_double_byte>
   1fe0a:	4605      	mov	r5, r0
   1fe0c:	7860      	ldrb	r0, [r4, #1]
   1fe0e:	f7ff f87d 	bl	1ef0c <_double_byte>
   1fe12:	78a2      	ldrb	r2, [r4, #2]
   1fe14:	7863      	ldrb	r3, [r4, #1]
   1fe16:	4053      	eors	r3, r2
   1fe18:	78e2      	ldrb	r2, [r4, #3]
   1fe1a:	4053      	eors	r3, r2
   1fe1c:	405d      	eors	r5, r3
   1fe1e:	4045      	eors	r5, r0
   1fe20:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1fe22:	7860      	ldrb	r0, [r4, #1]
   1fe24:	7827      	ldrb	r7, [r4, #0]
   1fe26:	f7ff f871 	bl	1ef0c <_double_byte>
   1fe2a:	4605      	mov	r5, r0
   1fe2c:	78a0      	ldrb	r0, [r4, #2]
   1fe2e:	f7ff f86d 	bl	1ef0c <_double_byte>
   1fe32:	78a3      	ldrb	r3, [r4, #2]
   1fe34:	405f      	eors	r7, r3
   1fe36:	78e3      	ldrb	r3, [r4, #3]
   1fe38:	405f      	eors	r7, r3
   1fe3a:	407d      	eors	r5, r7
   1fe3c:	4045      	eors	r5, r0
   1fe3e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1fe40:	78a0      	ldrb	r0, [r4, #2]
   1fe42:	7865      	ldrb	r5, [r4, #1]
   1fe44:	7827      	ldrb	r7, [r4, #0]
   1fe46:	f7ff f861 	bl	1ef0c <_double_byte>
   1fe4a:	406f      	eors	r7, r5
   1fe4c:	4605      	mov	r5, r0
   1fe4e:	78e0      	ldrb	r0, [r4, #3]
   1fe50:	f7ff f85c 	bl	1ef0c <_double_byte>
   1fe54:	78e3      	ldrb	r3, [r4, #3]
   1fe56:	405f      	eors	r7, r3
   1fe58:	407d      	eors	r5, r7
   1fe5a:	4045      	eors	r5, r0
   1fe5c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1fe5e:	7820      	ldrb	r0, [r4, #0]
   1fe60:	f7ff f854 	bl	1ef0c <_double_byte>
   1fe64:	7863      	ldrb	r3, [r4, #1]
   1fe66:	7825      	ldrb	r5, [r4, #0]
   1fe68:	405d      	eors	r5, r3
   1fe6a:	78a3      	ldrb	r3, [r4, #2]
   1fe6c:	405d      	eors	r5, r3
   1fe6e:	4045      	eors	r5, r0
   1fe70:	78e0      	ldrb	r0, [r4, #3]
   1fe72:	f7ff f84b 	bl	1ef0c <_double_byte>
   1fe76:	b2ed      	uxtb	r5, r5
   1fe78:	4045      	eors	r5, r0
   1fe7a:	70f5      	strb	r5, [r6, #3]
}
   1fe7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fe7e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1fe7e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fe80:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1fe82:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fe84:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1fe88:	2b00      	cmp	r3, #0
   1fe8a:	bfb4      	ite	lt
   1fe8c:	2387      	movlt	r3, #135	; 0x87
   1fe8e:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1fe90:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1fe94:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1fe98:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1fe9a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1fe9e:	d002      	beq.n	1fea6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1fea0:	7813      	ldrb	r3, [r2, #0]
   1fea2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1fea4:	e7f4      	b.n	1fe90 <gf_double+0x12>
	}
}
   1fea6:	bd10      	pop	{r4, pc}

0001fea8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1fea8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1feaa:	b120      	cbz	r0, 1feb6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1feac:	2258      	movs	r2, #88	; 0x58
   1feae:	2100      	movs	r1, #0
   1feb0:	f7ff f82a 	bl	1ef08 <_set>
   1feb4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1feb6:	bd08      	pop	{r3, pc}

0001feb8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1feb8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1feba:	4604      	mov	r4, r0
   1febc:	b188      	cbz	r0, 1fee2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1febe:	2210      	movs	r2, #16
   1fec0:	2100      	movs	r1, #0
   1fec2:	f7ff f821 	bl	1ef08 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1fec6:	2210      	movs	r2, #16
   1fec8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fecc:	2100      	movs	r1, #0
   1fece:	f7ff f81b 	bl	1ef08 <_set>
	s->leftover_offset = 0;
   1fed2:	2300      	movs	r3, #0
   1fed4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1fed6:	2200      	movs	r2, #0
   1fed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fedc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1fee0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fee2:	bd10      	pop	{r4, pc}

0001fee4 <tc_cmac_setup>:
{
   1fee4:	b570      	push	{r4, r5, r6, lr}
   1fee6:	460d      	mov	r5, r1
   1fee8:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1feea:	4604      	mov	r4, r0
   1feec:	b310      	cbz	r0, 1ff34 <tc_cmac_setup+0x50>
   1feee:	b311      	cbz	r1, 1ff36 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1fef0:	2258      	movs	r2, #88	; 0x58
   1fef2:	2100      	movs	r1, #0
   1fef4:	f7ff f808 	bl	1ef08 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1fef8:	4629      	mov	r1, r5
	s->sched = sched;
   1fefa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1fefc:	4630      	mov	r0, r6
   1fefe:	f7f2 fad5 	bl	124ac <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ff02:	2210      	movs	r2, #16
   1ff04:	2100      	movs	r1, #0
   1ff06:	4620      	mov	r0, r4
   1ff08:	f7fe fffe 	bl	1ef08 <_set>
	gf_double (s->K1, s->iv);
   1ff0c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ff10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ff12:	4621      	mov	r1, r4
   1ff14:	4620      	mov	r0, r4
   1ff16:	f7f2 fb1b 	bl	12550 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1ff1a:	4621      	mov	r1, r4
   1ff1c:	4628      	mov	r0, r5
   1ff1e:	f7ff ffae 	bl	1fe7e <gf_double>
	gf_double (s->K2, s->K1);
   1ff22:	4629      	mov	r1, r5
   1ff24:	f104 0020 	add.w	r0, r4, #32
   1ff28:	f7ff ffa9 	bl	1fe7e <gf_double>
	tc_cmac_init(s);
   1ff2c:	4620      	mov	r0, r4
   1ff2e:	f7ff ffc3 	bl	1feb8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1ff32:	2001      	movs	r0, #1
}
   1ff34:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1ff36:	4608      	mov	r0, r1
   1ff38:	e7fc      	b.n	1ff34 <tc_cmac_setup+0x50>

0001ff3a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1ff3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff3e:	460d      	mov	r5, r1
   1ff40:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1ff42:	4604      	mov	r4, r0
   1ff44:	2800      	cmp	r0, #0
   1ff46:	d062      	beq.n	2000e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1ff48:	b912      	cbnz	r2, 1ff50 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1ff4a:	2001      	movs	r0, #1
}
   1ff4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1ff50:	2900      	cmp	r1, #0
   1ff52:	d05c      	beq.n	2000e <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1ff54:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1ff58:	ea50 0301 	orrs.w	r3, r0, r1
   1ff5c:	d057      	beq.n	2000e <tc_cmac_update+0xd4>
	s->countdown--;
   1ff5e:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1ff62:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1ff66:	f141 33ff 	adc.w	r3, r1, #4294967295
   1ff6a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1ff6e:	f1b8 0f00 	cmp.w	r8, #0
   1ff72:	d02a      	beq.n	1ffca <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1ff74:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1ff78:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1ff7c:	42be      	cmp	r6, r7
   1ff7e:	4420      	add	r0, r4
   1ff80:	d208      	bcs.n	1ff94 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1ff82:	462a      	mov	r2, r5
   1ff84:	4633      	mov	r3, r6
   1ff86:	4631      	mov	r1, r6
   1ff88:	f7fe ffb1 	bl	1eeee <_copy>
			s->leftover_offset += data_length;
   1ff8c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1ff8e:	4432      	add	r2, r6
   1ff90:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1ff92:	e7da      	b.n	1ff4a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1ff94:	463b      	mov	r3, r7
   1ff96:	462a      	mov	r2, r5
   1ff98:	4639      	mov	r1, r7
   1ff9a:	f7fe ffa8 	bl	1eeee <_copy>
		data_length -= remaining_space;
   1ff9e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1ffa0:	2300      	movs	r3, #0
   1ffa2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1ffa4:	4446      	add	r6, r8
		data += remaining_space;
   1ffa6:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ffa8:	1e63      	subs	r3, r4, #1
   1ffaa:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1ffae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ffb2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ffb6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1ffb8:	ea82 0200 	eor.w	r2, r2, r0
   1ffbc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ffbe:	d1f6      	bne.n	1ffae <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ffc0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ffc2:	4621      	mov	r1, r4
   1ffc4:	4620      	mov	r0, r4
   1ffc6:	f7f2 fac3 	bl	12550 <tc_aes_encrypt>
   1ffca:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1ffce:	2e10      	cmp	r6, #16
   1ffd0:	d80a      	bhi.n	1ffe8 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1ffd2:	2e00      	cmp	r6, #0
   1ffd4:	d0b9      	beq.n	1ff4a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1ffd6:	4633      	mov	r3, r6
   1ffd8:	462a      	mov	r2, r5
   1ffda:	4631      	mov	r1, r6
   1ffdc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ffe0:	f7fe ff85 	bl	1eeee <_copy>
		s->leftover_offset = data_length;
   1ffe4:	6466      	str	r6, [r4, #68]	; 0x44
   1ffe6:	e7b0      	b.n	1ff4a <tc_cmac_update+0x10>
   1ffe8:	1e63      	subs	r3, r4, #1
   1ffea:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1ffec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1fff0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fff4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1fff6:	ea82 0200 	eor.w	r2, r2, r0
   1fffa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fffc:	d1f6      	bne.n	1ffec <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fffe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20000:	4621      	mov	r1, r4
   20002:	4620      	mov	r0, r4
   20004:	f7f2 faa4 	bl	12550 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   20008:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2000a:	3e10      	subs	r6, #16
   2000c:	e7df      	b.n	1ffce <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   2000e:	2000      	movs	r0, #0
   20010:	e79c      	b.n	1ff4c <tc_cmac_update+0x12>

00020012 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   20012:	b570      	push	{r4, r5, r6, lr}
   20014:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   20016:	4605      	mov	r5, r0
   20018:	b1e8      	cbz	r0, 20056 <tc_cmac_final+0x44>
   2001a:	b369      	cbz	r1, 20078 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2001c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2001e:	2a10      	cmp	r2, #16
   20020:	d11a      	bne.n	20058 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   20022:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20024:	1e63      	subs	r3, r4, #1
   20026:	3901      	subs	r1, #1
   20028:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2002c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20030:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   20034:	4072      	eors	r2, r6
   20036:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2003a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2003c:	ea82 0206 	eor.w	r2, r2, r6
   20040:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20042:	d1f3      	bne.n	2002c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   20044:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20046:	4621      	mov	r1, r4
   20048:	4628      	mov	r0, r5
   2004a:	f7f2 fa81 	bl	12550 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2004e:	4620      	mov	r0, r4
   20050:	f7ff ff2a 	bl	1fea8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   20054:	2001      	movs	r0, #1
}
   20056:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20058:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2005c:	2100      	movs	r1, #0
   2005e:	f1c2 0210 	rsb	r2, r2, #16
   20062:	4420      	add	r0, r4
   20064:	f7fe ff50 	bl	1ef08 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20068:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2006a:	4423      	add	r3, r4
   2006c:	2280      	movs	r2, #128	; 0x80
   2006e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   20072:	f104 0120 	add.w	r1, r4, #32
   20076:	e7d5      	b.n	20024 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20078:	4608      	mov	r0, r1
   2007a:	e7ec      	b.n	20056 <tc_cmac_final+0x44>

0002007c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2007c:	2100      	movs	r1, #0
   2007e:	2001      	movs	r0, #1
   20080:	f7f2 bbe8 	b.w	12854 <z_arm_fatal_error>

00020084 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   20084:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   20086:	6800      	ldr	r0, [r0, #0]
   20088:	f7f2 bbe4 	b.w	12854 <z_arm_fatal_error>

0002008c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2008c:	b508      	push	{r3, lr}
	handler();
   2008e:	f7f2 fc19 	bl	128c4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   20092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   20096:	f7f2 beab 	b.w	12df0 <z_arm_exc_exit>

0002009a <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   2009a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2009e:	4684      	mov	ip, r0
   200a0:	4688      	mov	r8, r1
	register const char *s = nptr;
   200a2:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   200a4:	460c      	mov	r4, r1
   200a6:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   200aa:	2b20      	cmp	r3, #32
   200ac:	d033      	beq.n	20116 <strtol+0x7c>
   200ae:	f1a3 0009 	sub.w	r0, r3, #9
   200b2:	2804      	cmp	r0, #4
   200b4:	d92f      	bls.n	20116 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   200b6:	2b2d      	cmp	r3, #45	; 0x2d
   200b8:	d12f      	bne.n	2011a <strtol+0x80>
		neg = 1;
		c = *s++;
   200ba:	784b      	ldrb	r3, [r1, #1]
   200bc:	1c8c      	adds	r4, r1, #2
		neg = 1;
   200be:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   200c0:	2a00      	cmp	r2, #0
   200c2:	d05c      	beq.n	2017e <strtol+0xe4>
   200c4:	2a10      	cmp	r2, #16
   200c6:	d109      	bne.n	200dc <strtol+0x42>
   200c8:	2b30      	cmp	r3, #48	; 0x30
   200ca:	d107      	bne.n	200dc <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   200cc:	7823      	ldrb	r3, [r4, #0]
   200ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   200d2:	2b58      	cmp	r3, #88	; 0x58
   200d4:	d14e      	bne.n	20174 <strtol+0xda>
		c = s[1];
   200d6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   200d8:	2210      	movs	r2, #16
		s += 2;
   200da:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   200dc:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   200e0:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   200e2:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   200e4:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   200e8:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   200ea:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   200ee:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   200f2:	2d09      	cmp	r5, #9
   200f4:	d817      	bhi.n	20126 <strtol+0x8c>
			c -= '0';
   200f6:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   200f8:	429a      	cmp	r2, r3
   200fa:	dd24      	ble.n	20146 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   200fc:	1c75      	adds	r5, r6, #1
   200fe:	d007      	beq.n	20110 <strtol+0x76>
   20100:	4570      	cmp	r0, lr
   20102:	d81d      	bhi.n	20140 <strtol+0xa6>
   20104:	d101      	bne.n	2010a <strtol+0x70>
   20106:	454b      	cmp	r3, r9
   20108:	dc1a      	bgt.n	20140 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2010a:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2010e:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   20110:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   20114:	e7eb      	b.n	200ee <strtol+0x54>
{
   20116:	4621      	mov	r1, r4
   20118:	e7c4      	b.n	200a4 <strtol+0xa>
	} else if (c == '+') {
   2011a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2011c:	bf04      	itt	eq
   2011e:	784b      	ldrbeq	r3, [r1, #1]
   20120:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   20122:	2100      	movs	r1, #0
   20124:	e7cc      	b.n	200c0 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   20126:	f043 0520 	orr.w	r5, r3, #32
   2012a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2012c:	2d19      	cmp	r5, #25
   2012e:	d80a      	bhi.n	20146 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   20130:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   20134:	2d1a      	cmp	r5, #26
   20136:	bf34      	ite	cc
   20138:	2537      	movcc	r5, #55	; 0x37
   2013a:	2557      	movcs	r5, #87	; 0x57
   2013c:	1b5b      	subs	r3, r3, r5
   2013e:	e7db      	b.n	200f8 <strtol+0x5e>
			any = -1;
   20140:	f04f 36ff 	mov.w	r6, #4294967295
   20144:	e7e4      	b.n	20110 <strtol+0x76>
		}
	}

	if (any < 0) {
   20146:	1c73      	adds	r3, r6, #1
   20148:	d109      	bne.n	2015e <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2014a:	f7fc f959 	bl	1c400 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2014e:	2322      	movs	r3, #34	; 0x22
   20150:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   20152:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   20154:	f1b8 0f00 	cmp.w	r8, #0
   20158:	d107      	bne.n	2016a <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2015a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   2015e:	b101      	cbz	r1, 20162 <strtol+0xc8>
		acc = -acc;
   20160:	4240      	negs	r0, r0
	if (endptr != NULL) {
   20162:	f1b8 0f00 	cmp.w	r8, #0
   20166:	d0f8      	beq.n	2015a <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   20168:	b10e      	cbz	r6, 2016e <strtol+0xd4>
   2016a:	f104 3cff 	add.w	ip, r4, #4294967295
   2016e:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   20172:	e7f2      	b.n	2015a <strtol+0xc0>
	if (base == 0) {
   20174:	2330      	movs	r3, #48	; 0x30
   20176:	2a00      	cmp	r2, #0
   20178:	d1b0      	bne.n	200dc <strtol+0x42>
		base = c == '0' ? 8 : 10;
   2017a:	2208      	movs	r2, #8
   2017c:	e7ae      	b.n	200dc <strtol+0x42>
	if ((base == 0 || base == 16) &&
   2017e:	2b30      	cmp	r3, #48	; 0x30
   20180:	d0a4      	beq.n	200cc <strtol+0x32>
		base = c == '0' ? 8 : 10;
   20182:	220a      	movs	r2, #10
   20184:	e7aa      	b.n	200dc <strtol+0x42>

00020186 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   20186:	3901      	subs	r1, #1
   20188:	4603      	mov	r3, r0
   2018a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2018e:	b90a      	cbnz	r2, 20194 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   20190:	701a      	strb	r2, [r3, #0]

	return dest;
}
   20192:	4770      	bx	lr
		*d = *s;
   20194:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   20198:	e7f7      	b.n	2018a <strcpy+0x4>

0002019a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   2019a:	b570      	push	{r4, r5, r6, lr}
   2019c:	3901      	subs	r1, #1
   2019e:	4605      	mov	r5, r0
   201a0:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   201a2:	b142      	cbz	r2, 201b6 <strncpy+0x1c>
   201a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   201a8:	1e56      	subs	r6, r2, #1
   201aa:	b92b      	cbnz	r3, 201b8 <strncpy+0x1e>
   201ac:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   201ae:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   201b2:	42a2      	cmp	r2, r4
   201b4:	d1fb      	bne.n	201ae <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   201b6:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   201b8:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   201bc:	4632      	mov	r2, r6
   201be:	e7ef      	b.n	201a0 <strncpy+0x6>

000201c0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   201c0:	4603      	mov	r3, r0
	size_t n = 0;
   201c2:	2000      	movs	r0, #0

	while (*s != '\0') {
   201c4:	5c1a      	ldrb	r2, [r3, r0]
   201c6:	b902      	cbnz	r2, 201ca <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   201c8:	4770      	bx	lr
		n++;
   201ca:	3001      	adds	r0, #1
   201cc:	e7fa      	b.n	201c4 <strlen+0x4>

000201ce <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   201ce:	4603      	mov	r3, r0
	size_t n = 0;
   201d0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   201d2:	5c1a      	ldrb	r2, [r3, r0]
   201d4:	b10a      	cbz	r2, 201da <strnlen+0xc>
   201d6:	4288      	cmp	r0, r1
   201d8:	d100      	bne.n	201dc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   201da:	4770      	bx	lr
		n++;
   201dc:	3001      	adds	r0, #1
   201de:	e7f8      	b.n	201d2 <strnlen+0x4>

000201e0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   201e0:	1e43      	subs	r3, r0, #1
   201e2:	3901      	subs	r1, #1
   201e4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   201e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   201ec:	4282      	cmp	r2, r0
   201ee:	d101      	bne.n	201f4 <strcmp+0x14>
   201f0:	2a00      	cmp	r2, #0
   201f2:	d1f7      	bne.n	201e4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   201f4:	1a10      	subs	r0, r2, r0
   201f6:	4770      	bx	lr

000201f8 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   201f8:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   201fa:	2400      	movs	r4, #0
   201fc:	42a2      	cmp	r2, r4
   201fe:	d008      	beq.n	20212 <strncmp+0x1a>
   20200:	5d03      	ldrb	r3, [r0, r4]
   20202:	5d0d      	ldrb	r5, [r1, r4]
   20204:	42ab      	cmp	r3, r5
   20206:	d102      	bne.n	2020e <strncmp+0x16>
   20208:	3401      	adds	r4, #1
   2020a:	2b00      	cmp	r3, #0
   2020c:	d1f6      	bne.n	201fc <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2020e:	1b58      	subs	r0, r3, r5
   20210:	e000      	b.n	20214 <strncmp+0x1c>
   20212:	2000      	movs	r0, #0
}
   20214:	bd30      	pop	{r4, r5, pc}

00020216 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   20216:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   20218:	b15a      	cbz	r2, 20232 <memcmp+0x1c>
   2021a:	3901      	subs	r1, #1
   2021c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2021e:	f810 2b01 	ldrb.w	r2, [r0], #1
   20222:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   20226:	42a0      	cmp	r0, r4
   20228:	d001      	beq.n	2022e <memcmp+0x18>
   2022a:	429a      	cmp	r2, r3
   2022c:	d0f7      	beq.n	2021e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2022e:	1ad0      	subs	r0, r2, r3
}
   20230:	bd10      	pop	{r4, pc}
		return 0;
   20232:	4610      	mov	r0, r2
   20234:	e7fc      	b.n	20230 <memcmp+0x1a>

00020236 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   20236:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   20238:	ea81 0400 	eor.w	r4, r1, r0
   2023c:	07a5      	lsls	r5, r4, #30
   2023e:	4603      	mov	r3, r0
   20240:	d00b      	beq.n	2025a <memcpy+0x24>
   20242:	3b01      	subs	r3, #1
   20244:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   20246:	4291      	cmp	r1, r2
   20248:	d11b      	bne.n	20282 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   2024c:	2a00      	cmp	r2, #0
   2024e:	d0fc      	beq.n	2024a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   20250:	f811 4b01 	ldrb.w	r4, [r1], #1
   20254:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   20258:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   2025a:	079c      	lsls	r4, r3, #30
   2025c:	d1f6      	bne.n	2024c <memcpy+0x16>
   2025e:	f022 0403 	bic.w	r4, r2, #3
   20262:	1f1d      	subs	r5, r3, #4
   20264:	0896      	lsrs	r6, r2, #2
   20266:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   20268:	42b9      	cmp	r1, r7
   2026a:	d105      	bne.n	20278 <memcpy+0x42>
   2026c:	f06f 0503 	mvn.w	r5, #3
   20270:	fb05 2206 	mla	r2, r5, r6, r2
   20274:	4423      	add	r3, r4
   20276:	e7e4      	b.n	20242 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   20278:	f851 cb04 	ldr.w	ip, [r1], #4
   2027c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   20280:	e7f2      	b.n	20268 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   20282:	f811 4b01 	ldrb.w	r4, [r1], #1
   20286:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2028a:	e7dc      	b.n	20246 <memcpy+0x10>

0002028c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   2028c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2028e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   20290:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   20292:	079c      	lsls	r4, r3, #30
   20294:	d111      	bne.n	202ba <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   20296:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   2029a:	f022 0603 	bic.w	r6, r2, #3
   2029e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   202a2:	441e      	add	r6, r3
   202a4:	0894      	lsrs	r4, r2, #2
   202a6:	42b3      	cmp	r3, r6
   202a8:	d10d      	bne.n	202c6 <memset+0x3a>
   202aa:	f06f 0503 	mvn.w	r5, #3
   202ae:	fb05 2204 	mla	r2, r5, r4, r2
   202b2:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   202b4:	4293      	cmp	r3, r2
   202b6:	d109      	bne.n	202cc <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   202b8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   202ba:	2a00      	cmp	r2, #0
   202bc:	d0fc      	beq.n	202b8 <memset+0x2c>
		*(d_byte++) = c_byte;
   202be:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   202c2:	3a01      	subs	r2, #1
   202c4:	e7e5      	b.n	20292 <memset+0x6>
		*(d_word++) = c_word;
   202c6:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   202ca:	e7ec      	b.n	202a6 <memset+0x1a>
		*(d_byte++) = c_byte;
   202cc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   202d0:	e7f0      	b.n	202b4 <memset+0x28>

000202d2 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   202d2:	f7fb bf11 	b.w	1c0f8 <SystemInit>

000202d6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   202d6:	b084      	sub	sp, #16
   202d8:	ab04      	add	r3, sp, #16
   202da:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   202de:	f89d 3004 	ldrb.w	r3, [sp, #4]
   202e2:	2b06      	cmp	r3, #6
   202e4:	d108      	bne.n	202f8 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   202e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   202ea:	2201      	movs	r2, #1
   202ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   202f0:	f3bf 8f4f 	dsb	sy
        __WFE();
   202f4:	bf20      	wfe
    while (true)
   202f6:	e7fd      	b.n	202f4 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   202f8:	b004      	add	sp, #16
   202fa:	4770      	bx	lr

000202fc <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   202fc:	b084      	sub	sp, #16
   202fe:	ab04      	add	r3, sp, #16
   20300:	e903 0007 	stmdb	r3, {r0, r1, r2}
   20304:	2300      	movs	r3, #0
   20306:	f383 8811 	msr	BASEPRI, r3
   2030a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2030e:	b004      	add	sp, #16
   20310:	4770      	bx	lr

00020312 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   20312:	b530      	push	{r4, r5, lr}
   20314:	b085      	sub	sp, #20
   20316:	4604      	mov	r4, r0
   20318:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2031a:	4668      	mov	r0, sp
   2031c:	2203      	movs	r2, #3
   2031e:	f7ff ff8a 	bl	20236 <memcpy>
	(void)memset(res + 3, 0, 13);
   20322:	220d      	movs	r2, #13
   20324:	2100      	movs	r1, #0
   20326:	f10d 0003 	add.w	r0, sp, #3
   2032a:	f7ff ffaf 	bl	2028c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2032e:	4620      	mov	r0, r4
   20330:	466a      	mov	r2, sp
   20332:	4669      	mov	r1, sp
   20334:	f002 f998 	bl	22668 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   20338:	4604      	mov	r4, r0
   2033a:	b920      	cbnz	r0, 20346 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2033c:	2203      	movs	r2, #3
   2033e:	4669      	mov	r1, sp
   20340:	4628      	mov	r0, r5
   20342:	f7ff ff78 	bl	20236 <memcpy>

	return 0;
}
   20346:	4620      	mov	r0, r4
   20348:	b005      	add	sp, #20
   2034a:	bd30      	pop	{r4, r5, pc}

0002034c <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2034c:	b513      	push	{r0, r1, r4, lr}
   2034e:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   20350:	aa01      	add	r2, sp, #4
   20352:	3103      	adds	r1, #3
   20354:	f7ff ffdd 	bl	20312 <ah>
	if (err) {
   20358:	b948      	cbnz	r0, 2036e <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2035a:	2203      	movs	r2, #3
   2035c:	a901      	add	r1, sp, #4
   2035e:	4620      	mov	r0, r4
   20360:	f7ff ff59 	bl	20216 <memcmp>
   20364:	fab0 f080 	clz	r0, r0
   20368:	0940      	lsrs	r0, r0, #5
}
   2036a:	b002      	add	sp, #8
   2036c:	bd10      	pop	{r4, pc}
		return false;
   2036e:	2000      	movs	r0, #0
   20370:	e7fb      	b.n	2036a <bt_rpa_irk_matches+0x1e>

00020372 <send_cmd_status>:
{
   20372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   20376:	f04f 32ff 	mov.w	r2, #4294967295
{
   2037a:	4606      	mov	r6, r0
   2037c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2037e:	f04f 33ff 	mov.w	r3, #4294967295
   20382:	2100      	movs	r1, #0
   20384:	200f      	movs	r0, #15
   20386:	f7f3 fa61 	bl	1384c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2038a:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   2038c:	f100 0808 	add.w	r8, r0, #8
   20390:	4604      	mov	r4, r0
   20392:	7507      	strb	r7, [r0, #20]
   20394:	2102      	movs	r1, #2
   20396:	4640      	mov	r0, r8
   20398:	f002 f87a 	bl	22490 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2039c:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   2039e:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   203a0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   203a2:	7041      	strb	r1, [r0, #1]
   203a4:	4640      	mov	r0, r8
   203a6:	f002 f873 	bl	22490 <net_buf_simple_add>
	evt->ncmd = 1U;
   203aa:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   203ac:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   203ae:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   203b0:	4620      	mov	r0, r4
}
   203b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   203b6:	f7f4 bba5 	b.w	14b04 <bt_recv>

000203ba <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   203ba:	f101 0320 	add.w	r3, r1, #32
   203be:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   203c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   203c4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   203c8:	428b      	cmp	r3, r1
   203ca:	d1f9      	bne.n	203c0 <sys_memcpy_swap.constprop.0+0x6>
}
   203cc:	4770      	bx	lr

000203ce <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   203ce:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   203d2:	f043 0306 	orr.w	r3, r3, #6
   203d6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   203da:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   203de:	f043 0304 	orr.w	r3, r3, #4
   203e2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   203e6:	4770      	bx	lr

000203e8 <default_CSPRNG>:
{
   203e8:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   203ea:	f7fb fca7 	bl	1bd3c <bt_rand>
}
   203ee:	fab0 f080 	clz	r0, r0
   203f2:	0940      	lsrs	r0, r0, #5
   203f4:	bd08      	pop	{r3, pc}

000203f6 <bt_settings_decode_key>:
{
   203f6:	b570      	push	{r4, r5, r6, lr}
   203f8:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   203fa:	2100      	movs	r1, #0
{
   203fc:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   203fe:	f7fe fc16 	bl	1ec2e <settings_name_next>
   20402:	280d      	cmp	r0, #13
   20404:	d118      	bne.n	20438 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   20406:	7b23      	ldrb	r3, [r4, #12]
   20408:	2b30      	cmp	r3, #48	; 0x30
   2040a:	d111      	bne.n	20430 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   2040c:	2300      	movs	r3, #0
   2040e:	702b      	strb	r3, [r5, #0]
   20410:	f104 060c 	add.w	r6, r4, #12
   20414:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   20416:	462a      	mov	r2, r5
   20418:	4620      	mov	r0, r4
   2041a:	2301      	movs	r3, #1
   2041c:	2102      	movs	r1, #2
   2041e:	3402      	adds	r4, #2
   20420:	f7fd fbee 	bl	1dc00 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   20424:	42b4      	cmp	r4, r6
   20426:	f105 35ff 	add.w	r5, r5, #4294967295
   2042a:	d1f4      	bne.n	20416 <bt_settings_decode_key+0x20>
	return 0;
   2042c:	2000      	movs	r0, #0
}
   2042e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   20430:	2b31      	cmp	r3, #49	; 0x31
   20432:	d101      	bne.n	20438 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   20434:	2301      	movs	r3, #1
   20436:	e7ea      	b.n	2040e <bt_settings_decode_key+0x18>
		return -EINVAL;
   20438:	f06f 0015 	mvn.w	r0, #21
   2043c:	e7f7      	b.n	2042e <bt_settings_decode_key+0x38>

0002043e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2043e:	b510      	push	{r4, lr}
   20440:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   20442:	7801      	ldrb	r1, [r0, #0]
   20444:	7822      	ldrb	r2, [r4, #0]
   20446:	428a      	cmp	r2, r1
{
   20448:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2044a:	d00e      	beq.n	2046a <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2044c:	4669      	mov	r1, sp
   2044e:	f7f3 f989 	bl	13764 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20452:	a905      	add	r1, sp, #20
   20454:	4620      	mov	r0, r4
   20456:	f7f3 f985 	bl	13764 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2045a:	2210      	movs	r2, #16
   2045c:	f10d 0115 	add.w	r1, sp, #21
   20460:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20464:	f7ff fed7 	bl	20216 <memcmp>
   20468:	e007      	b.n	2047a <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   2046a:	2a01      	cmp	r2, #1
   2046c:	d007      	beq.n	2047e <bt_uuid_cmp+0x40>
   2046e:	2a02      	cmp	r2, #2
   20470:	d008      	beq.n	20484 <bt_uuid_cmp+0x46>
   20472:	b95a      	cbnz	r2, 2048c <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   20474:	8840      	ldrh	r0, [r0, #2]
   20476:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20478:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   2047a:	b00a      	add	sp, #40	; 0x28
   2047c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2047e:	6840      	ldr	r0, [r0, #4]
   20480:	6863      	ldr	r3, [r4, #4]
   20482:	e7f9      	b.n	20478 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20484:	2210      	movs	r2, #16
   20486:	1c61      	adds	r1, r4, #1
   20488:	3001      	adds	r0, #1
   2048a:	e7eb      	b.n	20464 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2048c:	f06f 0015 	mvn.w	r0, #21
   20490:	e7f3      	b.n	2047a <bt_uuid_cmp+0x3c>

00020492 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20492:	2a04      	cmp	r2, #4
{
   20494:	b538      	push	{r3, r4, r5, lr}
   20496:	460c      	mov	r4, r1
	switch (data_len) {
   20498:	d00d      	beq.n	204b6 <bt_uuid_create+0x24>
   2049a:	2a10      	cmp	r2, #16
   2049c:	d019      	beq.n	204d2 <bt_uuid_create+0x40>
   2049e:	2a02      	cmp	r2, #2
   204a0:	f04f 0300 	mov.w	r3, #0
   204a4:	d11b      	bne.n	204de <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   204a6:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   204a8:	784a      	ldrb	r2, [r1, #1]
   204aa:	780b      	ldrb	r3, [r1, #0]
   204ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   204b0:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   204b2:	2001      	movs	r0, #1
}
   204b4:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   204b6:	2301      	movs	r3, #1
   204b8:	7003      	strb	r3, [r0, #0]
   204ba:	78a2      	ldrb	r2, [r4, #2]
   204bc:	78c9      	ldrb	r1, [r1, #3]
   204be:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   204c0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   204c4:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   204c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   204ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   204ce:	6042      	str	r2, [r0, #4]
		break;
   204d0:	e7ef      	b.n	204b2 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   204d2:	2302      	movs	r3, #2
   204d4:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   204d8:	f7ff fead 	bl	20236 <memcpy>
		break;
   204dc:	e7e9      	b.n	204b2 <bt_uuid_create+0x20>
	switch (data_len) {
   204de:	4618      	mov	r0, r3
   204e0:	e7e8      	b.n	204b4 <bt_uuid_create+0x22>

000204e2 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   204e2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   204e4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   204e6:	2106      	movs	r1, #6
{
   204e8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   204ea:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   204ee:	f7fb fc25 	bl	1bd3c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   204f2:	b918      	cbnz	r0, 204fc <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   204f4:	79a3      	ldrb	r3, [r4, #6]
   204f6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   204fa:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   204fc:	bd10      	pop	{r4, pc}

000204fe <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   204fe:	280f      	cmp	r0, #15
   20500:	d806      	bhi.n	20510 <bt_hci_evt_get_flags+0x12>
   20502:	280d      	cmp	r0, #13
   20504:	d80b      	bhi.n	2051e <bt_hci_evt_get_flags+0x20>
   20506:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   20508:	bf14      	ite	ne
   2050a:	2002      	movne	r0, #2
   2050c:	2003      	moveq	r0, #3
   2050e:	4770      	bx	lr
	switch (evt) {
   20510:	2813      	cmp	r0, #19
   20512:	d004      	beq.n	2051e <bt_hci_evt_get_flags+0x20>
   20514:	281a      	cmp	r0, #26
   20516:	bf14      	ite	ne
   20518:	2002      	movne	r0, #2
   2051a:	2001      	moveq	r0, #1
   2051c:	4770      	bx	lr
   2051e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   20520:	4770      	bx	lr

00020522 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   20522:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   20526:	b193      	cbz	r3, 2054e <update_sec_level+0x2c>
   20528:	7b5a      	ldrb	r2, [r3, #13]
   2052a:	07d1      	lsls	r1, r2, #31
   2052c:	d50f      	bpl.n	2054e <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2052e:	06d2      	lsls	r2, r2, #27
   20530:	d50b      	bpl.n	2054a <update_sec_level+0x28>
   20532:	7b1b      	ldrb	r3, [r3, #12]
   20534:	2b10      	cmp	r3, #16
   20536:	d108      	bne.n	2054a <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   20538:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2053a:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2053c:	7a82      	ldrb	r2, [r0, #10]
   2053e:	7a40      	ldrb	r0, [r0, #9]
}
   20540:	4282      	cmp	r2, r0
   20542:	bf8c      	ite	hi
   20544:	2000      	movhi	r0, #0
   20546:	2001      	movls	r0, #1
   20548:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2054a:	2303      	movs	r3, #3
   2054c:	e7f5      	b.n	2053a <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2054e:	2302      	movs	r3, #2
   20550:	e7f3      	b.n	2053a <update_sec_level+0x18>

00020552 <atomic_or>:
{
   20552:	4603      	mov	r3, r0
}
   20554:	f3bf 8f5b 	dmb	ish
   20558:	e853 0f00 	ldrex	r0, [r3]
   2055c:	ea40 0201 	orr.w	r2, r0, r1
   20560:	e843 2c00 	strex	ip, r2, [r3]
   20564:	f1bc 0f00 	cmp.w	ip, #0
   20568:	d1f6      	bne.n	20558 <atomic_or+0x6>
   2056a:	f3bf 8f5b 	dmb	ish
   2056e:	4770      	bx	lr

00020570 <sys_put_le64>:
	dst[1] = val >> 8;
   20570:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   20574:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   20576:	0e00      	lsrs	r0, r0, #24
   20578:	7053      	strb	r3, [r2, #1]
   2057a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2057c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2057e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   20582:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   20584:	7093      	strb	r3, [r2, #2]
   20586:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   20588:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2058a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2058c:	71d1      	strb	r1, [r2, #7]
}
   2058e:	4770      	bx	lr

00020590 <bt_hci_disconnect>:
{
   20590:	b570      	push	{r4, r5, r6, lr}
   20592:	4606      	mov	r6, r0
   20594:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20596:	f240 4006 	movw	r0, #1030	; 0x406
   2059a:	2103      	movs	r1, #3
   2059c:	f7f3 fe68 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   205a0:	4604      	mov	r4, r0
   205a2:	b168      	cbz	r0, 205c0 <bt_hci_disconnect+0x30>
   205a4:	2103      	movs	r1, #3
   205a6:	3008      	adds	r0, #8
   205a8:	f001 ff72 	bl	22490 <net_buf_simple_add>
	disconn->reason = reason;
   205ac:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   205ae:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   205b0:	4621      	mov	r1, r4
   205b2:	2200      	movs	r2, #0
}
   205b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   205b8:	f240 4006 	movw	r0, #1030	; 0x406
   205bc:	f7f3 bfb4 	b.w	14528 <bt_hci_cmd_send_sync>
}
   205c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   205c4:	bd70      	pop	{r4, r5, r6, pc}

000205c6 <bt_le_set_data_len>:
{
   205c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205c8:	4607      	mov	r7, r0
   205ca:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   205cc:	f242 0022 	movw	r0, #8226	; 0x2022
   205d0:	2106      	movs	r1, #6
{
   205d2:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   205d4:	f7f3 fe4c 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   205d8:	4604      	mov	r4, r0
   205da:	b170      	cbz	r0, 205fa <bt_le_set_data_len+0x34>
   205dc:	2106      	movs	r1, #6
   205de:	3008      	adds	r0, #8
   205e0:	f001 ff56 	bl	22490 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   205e4:	883b      	ldrh	r3, [r7, #0]
   205e6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   205e8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   205ea:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   205ec:	4621      	mov	r1, r4
   205ee:	f242 0022 	movw	r0, #8226	; 0x2022
}
   205f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   205f6:	f7f3 be73 	b.w	142e0 <bt_hci_cmd_send>
}
   205fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   205fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020600 <bt_le_set_phy>:
{
   20600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20604:	4680      	mov	r8, r0
   20606:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20608:	f242 0032 	movw	r0, #8242	; 0x2032
   2060c:	2107      	movs	r1, #7
{
   2060e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20612:	4616      	mov	r6, r2
   20614:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20616:	f7f3 fe2b 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   2061a:	4604      	mov	r4, r0
   2061c:	b190      	cbz	r0, 20644 <bt_le_set_phy+0x44>
   2061e:	2107      	movs	r1, #7
   20620:	3008      	adds	r0, #8
   20622:	f001 ff35 	bl	22490 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20626:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2062a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2062c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2062e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20630:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   20632:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20636:	4621      	mov	r1, r4
   20638:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2063c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20640:	f7f3 be4e 	b.w	142e0 <bt_hci_cmd_send>
}
   20644:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002064c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2064c:	6880      	ldr	r0, [r0, #8]
   2064e:	f7f4 b8f3 	b.w	14838 <bt_hci_le_enh_conn_complete>

00020652 <le_legacy_conn_complete>:
{
   20652:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   20654:	6881      	ldr	r1, [r0, #8]
{
   20656:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   20658:	780b      	ldrb	r3, [r1, #0]
   2065a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2065e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   20662:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   20666:	78cb      	ldrb	r3, [r1, #3]
   20668:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2066c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   20670:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   20674:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   20678:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2067c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   20680:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   20684:	7c4b      	ldrb	r3, [r1, #17]
   20686:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   2068a:	2207      	movs	r2, #7
   2068c:	3104      	adds	r1, #4
   2068e:	a803      	add	r0, sp, #12
   20690:	f7ff fdd1 	bl	20236 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   20694:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   20696:	4669      	mov	r1, sp
   20698:	2206      	movs	r2, #6
   2069a:	f10d 0013 	add.w	r0, sp, #19
   2069e:	9400      	str	r4, [sp, #0]
   206a0:	f8ad 4004 	strh.w	r4, [sp, #4]
   206a4:	f7ff fdc7 	bl	20236 <memcpy>
   206a8:	2206      	movs	r2, #6
   206aa:	4669      	mov	r1, sp
   206ac:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   206b0:	9400      	str	r4, [sp, #0]
   206b2:	f8ad 4004 	strh.w	r4, [sp, #4]
   206b6:	f7ff fdbe 	bl	20236 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   206ba:	a802      	add	r0, sp, #8
   206bc:	f7f4 f8bc 	bl	14838 <bt_hci_le_enh_conn_complete>
}
   206c0:	b00a      	add	sp, #40	; 0x28
   206c2:	bd10      	pop	{r4, pc}

000206c4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   206c4:	8802      	ldrh	r2, [r0, #0]
   206c6:	8843      	ldrh	r3, [r0, #2]
   206c8:	429a      	cmp	r2, r3
{
   206ca:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   206cc:	d818      	bhi.n	20700 <bt_le_conn_params_valid+0x3c>
   206ce:	2a05      	cmp	r2, #5
   206d0:	d916      	bls.n	20700 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   206d2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   206d6:	d813      	bhi.n	20700 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   206d8:	8884      	ldrh	r4, [r0, #4]
   206da:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   206de:	d20f      	bcs.n	20700 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   206e0:	88c1      	ldrh	r1, [r0, #6]
   206e2:	f1a1 020a 	sub.w	r2, r1, #10
   206e6:	b292      	uxth	r2, r2
   206e8:	f640 4076 	movw	r0, #3190	; 0xc76
   206ec:	4282      	cmp	r2, r0
   206ee:	d807      	bhi.n	20700 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   206f0:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   206f4:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   206f8:	bf34      	ite	cc
   206fa:	2001      	movcc	r0, #1
   206fc:	2000      	movcs	r0, #0
}
   206fe:	bd10      	pop	{r4, pc}
		return false;
   20700:	2000      	movs	r0, #0
   20702:	e7fc      	b.n	206fe <bt_le_conn_params_valid+0x3a>

00020704 <bt_send>:
		return bt_hci_ecc_send(buf);
   20704:	f7f2 be88 	b.w	13418 <bt_hci_ecc_send>

00020708 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   20708:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2070a:	f7fa f8bf 	bl	1a88c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2070e:	b118      	cbz	r0, 20718 <bt_addr_le_is_bonded+0x10>
   20710:	89c0      	ldrh	r0, [r0, #14]
   20712:	3800      	subs	r0, #0
   20714:	bf18      	it	ne
   20716:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   20718:	bd08      	pop	{r3, pc}

0002071a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2071a:	2207      	movs	r2, #7
   2071c:	f7ff bd8b 	b.w	20236 <memcpy>

00020720 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20720:	f3bf 8f5b 	dmb	ish
   20724:	6800      	ldr	r0, [r0, #0]
   20726:	f3bf 8f5b 	dmb	ish
}
   2072a:	4770      	bx	lr

0002072c <addr_res_enable>:
{
   2072c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2072e:	2101      	movs	r1, #1
{
   20730:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   20732:	f242 002d 	movw	r0, #8237	; 0x202d
   20736:	f7f3 fd9b 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   2073a:	4604      	mov	r4, r0
   2073c:	b158      	cbz	r0, 20756 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2073e:	4629      	mov	r1, r5
   20740:	3008      	adds	r0, #8
   20742:	f001 feb4 	bl	224ae <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   20746:	4621      	mov	r1, r4
   20748:	2200      	movs	r2, #0
}
   2074a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2074e:	f242 002d 	movw	r0, #8237	; 0x202d
   20752:	f7f3 bee9 	b.w	14528 <bt_hci_cmd_send_sync>
}
   20756:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2075a:	bd38      	pop	{r3, r4, r5, pc}

0002075c <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   2075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2075e:	4607      	mov	r7, r0
   20760:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   20762:	f242 0027 	movw	r0, #8231	; 0x2027
   20766:	2127      	movs	r1, #39	; 0x27
   20768:	f7f3 fd82 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   2076c:	4604      	mov	r4, r0
   2076e:	b1d0      	cbz	r0, 207a6 <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   20770:	2127      	movs	r1, #39	; 0x27
   20772:	3008      	adds	r0, #8
   20774:	f001 fe8c 	bl	22490 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   20778:	4639      	mov	r1, r7
   2077a:	4605      	mov	r5, r0
   2077c:	f7ff ffcd 	bl	2071a <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   20780:	4631      	mov	r1, r6
   20782:	2210      	movs	r2, #16
   20784:	1de8      	adds	r0, r5, #7
   20786:	f7ff fd56 	bl	20236 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   2078a:	2210      	movs	r2, #16
   2078c:	2100      	movs	r1, #0
   2078e:	f105 0017 	add.w	r0, r5, #23
   20792:	f7ff fd7b 	bl	2028c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   20796:	4621      	mov	r1, r4
   20798:	2200      	movs	r2, #0
}
   2079a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2079e:	f242 0027 	movw	r0, #8231	; 0x2027
   207a2:	f7f3 bec1 	b.w	14528 <bt_hci_cmd_send_sync>
}
   207a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   207aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000207ac <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   207ac:	7a03      	ldrb	r3, [r0, #8]
   207ae:	075b      	lsls	r3, r3, #29
   207b0:	d504      	bpl.n	207bc <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   207b2:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   207b6:	3001      	adds	r0, #1
   207b8:	f7ff bfd0 	b.w	2075c <hci_id_add.isra.0>
}
   207bc:	4770      	bx	lr

000207be <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   207be:	f100 0310 	add.w	r3, r0, #16
   207c2:	f3bf 8f5b 	dmb	ish
   207c6:	e853 2f00 	ldrex	r2, [r3]
   207ca:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   207ce:	e843 1c00 	strex	ip, r1, [r3]
   207d2:	f1bc 0f00 	cmp.w	ip, #0
   207d6:	d1f6      	bne.n	207c6 <adv_unpause_enabled+0x8>
   207d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   207dc:	0493      	lsls	r3, r2, #18
   207de:	d502      	bpl.n	207e6 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   207e0:	2101      	movs	r1, #1
   207e2:	f000 b92c 	b.w	20a3e <bt_le_adv_set_enable>
}
   207e6:	4770      	bx	lr

000207e8 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   207e8:	f100 0210 	add.w	r2, r0, #16
{
   207ec:	b508      	push	{r3, lr}
   207ee:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   207f0:	4610      	mov	r0, r2
   207f2:	f7ff ff95 	bl	20720 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   207f6:	0641      	lsls	r1, r0, #25
   207f8:	d511      	bpl.n	2081e <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   207fa:	f3bf 8f5b 	dmb	ish
   207fe:	e852 1f00 	ldrex	r1, [r2]
   20802:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   20806:	e842 1000 	strex	r0, r1, [r2]
   2080a:	2800      	cmp	r0, #0
   2080c:	d1f7      	bne.n	207fe <adv_pause_enabled+0x16>
   2080e:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   20812:	4618      	mov	r0, r3
   20814:	2100      	movs	r1, #0
}
   20816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   2081a:	f000 b910 	b.w	20a3e <bt_le_adv_set_enable>
}
   2081e:	bd08      	pop	{r3, pc}

00020820 <bt_lookup_id_addr>:
{
   20820:	b510      	push	{r4, lr}
   20822:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   20824:	f7f9 fff8 	bl	1a818 <bt_keys_find_irk>
		if (keys) {
   20828:	b100      	cbz	r0, 2082c <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2082a:	1c44      	adds	r4, r0, #1
}
   2082c:	4620      	mov	r0, r4
   2082e:	bd10      	pop	{r4, pc}

00020830 <bt_id_set_adv_private_addr>:
{
   20830:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20832:	2106      	movs	r1, #6
   20834:	4668      	mov	r0, sp
   20836:	f7fb fa81 	bl	1bd3c <bt_rand>
	if (err) {
   2083a:	b940      	cbnz	r0, 2084e <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   2083c:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   20840:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20846:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2084a:	f7f4 fac9 	bl	14de0 <set_random_address>
}
   2084e:	b003      	add	sp, #12
   20850:	f85d fb04 	ldr.w	pc, [sp], #4

00020854 <bt_id_adv_random_addr_check>:
}
   20854:	2001      	movs	r0, #1
   20856:	4770      	bx	lr

00020858 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   20858:	7a03      	ldrb	r3, [r0, #8]
   2085a:	07d9      	lsls	r1, r3, #31
   2085c:	d504      	bpl.n	20868 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2085e:	f023 0301 	bic.w	r3, r3, #1
   20862:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   20864:	f7f4 bb38 	b.w	14ed8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   20868:	0799      	lsls	r1, r3, #30
   2086a:	d504      	bpl.n	20876 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2086c:	f023 0302 	bic.w	r3, r3, #2
   20870:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   20872:	f7f4 bc05 	b.w	15080 <bt_id_del>
}
   20876:	4770      	bx	lr

00020878 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   20878:	2000      	movs	r0, #0
   2087a:	4770      	bx	lr

0002087c <get_adv_channel_map>:
{
   2087c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2087e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   20882:	bf0c      	ite	eq
   20884:	2007      	moveq	r0, #7
   20886:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   20888:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2088a:	bf48      	it	mi
   2088c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   20890:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   20892:	bf48      	it	mi
   20894:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   20898:	4770      	bx	lr

0002089a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2089a:	f3bf 8f5b 	dmb	ish
   2089e:	6800      	ldr	r0, [r0, #0]
   208a0:	f3bf 8f5b 	dmb	ish
}
   208a4:	4770      	bx	lr

000208a6 <atomic_and>:
{
   208a6:	4603      	mov	r3, r0
}
   208a8:	f3bf 8f5b 	dmb	ish
   208ac:	e853 0f00 	ldrex	r0, [r3]
   208b0:	ea00 0201 	and.w	r2, r0, r1
   208b4:	e843 2c00 	strex	ip, r2, [r3]
   208b8:	f1bc 0f00 	cmp.w	ip, #0
   208bc:	d1f6      	bne.n	208ac <atomic_and+0x6>
   208be:	f3bf 8f5b 	dmb	ish
   208c2:	4770      	bx	lr

000208c4 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   208c4:	2301      	movs	r3, #1
{
   208c6:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   208c8:	fa03 f101 	lsl.w	r1, r3, r1
{
   208cc:	4604      	mov	r4, r0
	if (val) {
   208ce:	b162      	cbz	r2, 208ea <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   208d0:	f3bf 8f5b 	dmb	ish
   208d4:	e854 3f00 	ldrex	r3, [r4]
   208d8:	430b      	orrs	r3, r1
   208da:	e844 3200 	strex	r2, r3, [r4]
   208de:	2a00      	cmp	r2, #0
   208e0:	d1f8      	bne.n	208d4 <atomic_set_bit_to+0x10>
   208e2:	f3bf 8f5b 	dmb	ish
	}
}
   208e6:	bc10      	pop	{r4}
   208e8:	4770      	bx	lr
   208ea:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   208ec:	43c9      	mvns	r1, r1
   208ee:	f7ff bfda 	b.w	208a6 <atomic_and>

000208f2 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   208f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208f6:	b087      	sub	sp, #28
   208f8:	4605      	mov	r5, r0
   208fa:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   208fe:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   20902:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   20906:	460c      	mov	r4, r1
   20908:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   2090a:	2100      	movs	r1, #0
   2090c:	2210      	movs	r2, #16
   2090e:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   20910:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   20912:	f7ff fcbb 	bl	2028c <memset>
	if (use_name) {
   20916:	b187      	cbz	r7, 2093a <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   20918:	f7f4 fa44 	bl	14da4 <bt_get_name>
   2091c:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2091e:	2c00      	cmp	r4, #0
   20920:	d13e      	bne.n	209a0 <le_adv_update.constprop.0+0xae>
   20922:	2e00      	cmp	r6, #0
   20924:	d148      	bne.n	209b8 <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   20926:	4648      	mov	r0, r9
   20928:	f7ff fc4a 	bl	201c0 <strlen>
   2092c:	2209      	movs	r2, #9
   2092e:	f88d 2000 	strb.w	r2, [sp]
   20932:	f88d 0001 	strb.w	r0, [sp, #1]
   20936:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   2093a:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   2093e:	2f00      	cmp	r7, #0
   20940:	d03c      	beq.n	209bc <le_adv_update.constprop.0+0xca>
   20942:	f1ba 0f00 	cmp.w	sl, #0
   20946:	d002      	beq.n	2094e <le_adv_update.constprop.0+0x5c>
   20948:	f1b8 0f00 	cmp.w	r8, #0
   2094c:	d036      	beq.n	209bc <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   2094e:	2301      	movs	r3, #1
			d[1].data = &data;
   20950:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   20954:	9305      	str	r3, [sp, #20]
			d_len = 2;
   20956:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   20958:	a902      	add	r1, sp, #8
   2095a:	f242 0008 	movw	r0, #8200	; 0x2008
   2095e:	f7f4 fdf9 	bl	15554 <hci_set_ad>
		if (err) {
   20962:	4604      	mov	r4, r0
   20964:	b978      	cbnz	r0, 20986 <le_adv_update.constprop.0+0x94>
	if (scannable) {
   20966:	f1ba 0f00 	cmp.w	sl, #0
   2096a:	d129      	bne.n	209c0 <le_adv_update.constprop.0+0xce>
   2096c:	3510      	adds	r5, #16
   2096e:	f3bf 8f5b 	dmb	ish
   20972:	e855 3f00 	ldrex	r3, [r5]
   20976:	f043 0304 	orr.w	r3, r3, #4
   2097a:	e845 3200 	strex	r2, r3, [r5]
   2097e:	2a00      	cmp	r2, #0
   20980:	d1f7      	bne.n	20972 <le_adv_update.constprop.0+0x80>
   20982:	f3bf 8f5b 	dmb	ish
}
   20986:	4620      	mov	r0, r4
   20988:	b007      	add	sp, #28
   2098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2098e:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   20992:	3908      	subs	r1, #8
   20994:	2901      	cmp	r1, #1
   20996:	d92a      	bls.n	209ee <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   20998:	3201      	adds	r2, #1
   2099a:	4593      	cmp	fp, r2
   2099c:	d1f7      	bne.n	2098e <le_adv_update.constprop.0+0x9c>
   2099e:	e7c0      	b.n	20922 <le_adv_update.constprop.0+0x30>
   209a0:	2200      	movs	r2, #0
   209a2:	e7fa      	b.n	2099a <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   209a4:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   209a8:	3908      	subs	r1, #8
   209aa:	2901      	cmp	r1, #1
   209ac:	d91f      	bls.n	209ee <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   209ae:	3201      	adds	r2, #1
   209b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   209b2:	4293      	cmp	r3, r2
   209b4:	d1f6      	bne.n	209a4 <le_adv_update.constprop.0+0xb2>
   209b6:	e7b6      	b.n	20926 <le_adv_update.constprop.0+0x34>
   209b8:	2200      	movs	r2, #0
   209ba:	e7f9      	b.n	209b0 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   209bc:	2201      	movs	r2, #1
   209be:	e7cb      	b.n	20958 <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   209c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   209c2:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   209c4:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   209c6:	b187      	cbz	r7, 209ea <le_adv_update.constprop.0+0xf8>
   209c8:	f1b8 0f00 	cmp.w	r8, #0
   209cc:	d10d      	bne.n	209ea <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   209ce:	2301      	movs	r3, #1
			d[1].data = &data;
   209d0:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   209d4:	9305      	str	r3, [sp, #20]
			d_len = 2;
   209d6:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   209d8:	a902      	add	r1, sp, #8
   209da:	f242 0009 	movw	r0, #8201	; 0x2009
   209de:	f7f4 fdb9 	bl	15554 <hci_set_ad>
		if (err) {
   209e2:	2800      	cmp	r0, #0
   209e4:	d0c2      	beq.n	2096c <le_adv_update.constprop.0+0x7a>
   209e6:	4604      	mov	r4, r0
   209e8:	e7cd      	b.n	20986 <le_adv_update.constprop.0+0x94>
		d_len = 1;
   209ea:	2201      	movs	r2, #1
   209ec:	e7f4      	b.n	209d8 <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   209ee:	f06f 0415 	mvn.w	r4, #21
   209f2:	e7c8      	b.n	20986 <le_adv_update.constprop.0+0x94>

000209f4 <bt_le_adv_set_enable_legacy>:
{
   209f4:	b570      	push	{r4, r5, r6, lr}
   209f6:	4606      	mov	r6, r0
   209f8:	b086      	sub	sp, #24
   209fa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   209fc:	f242 000a 	movw	r0, #8202	; 0x200a
   20a00:	2101      	movs	r1, #1
   20a02:	f7f3 fc35 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   20a06:	4604      	mov	r4, r0
   20a08:	b1b0      	cbz	r0, 20a38 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   20a0a:	3008      	adds	r0, #8
   20a0c:	b195      	cbz	r5, 20a34 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   20a0e:	2101      	movs	r1, #1
   20a10:	f001 fd4d 	bl	224ae <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   20a14:	f106 0210 	add.w	r2, r6, #16
   20a18:	a903      	add	r1, sp, #12
   20a1a:	4620      	mov	r0, r4
   20a1c:	9500      	str	r5, [sp, #0]
   20a1e:	2306      	movs	r3, #6
   20a20:	f7f3 fc14 	bl	1424c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   20a24:	2200      	movs	r2, #0
   20a26:	4621      	mov	r1, r4
   20a28:	f242 000a 	movw	r0, #8202	; 0x200a
   20a2c:	f7f3 fd7c 	bl	14528 <bt_hci_cmd_send_sync>
}
   20a30:	b006      	add	sp, #24
   20a32:	bd70      	pop	{r4, r5, r6, pc}
   20a34:	4629      	mov	r1, r5
   20a36:	e7eb      	b.n	20a10 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   20a38:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20a3c:	e7f8      	b.n	20a30 <bt_le_adv_set_enable_legacy+0x3c>

00020a3e <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   20a3e:	f7ff bfd9 	b.w	209f4 <bt_le_adv_set_enable_legacy>

00020a42 <tx_notify>:
{
   20a42:	b570      	push	{r4, r5, r6, lr}
   20a44:	4604      	mov	r4, r0
	__asm__ volatile(
   20a46:	f04f 0240 	mov.w	r2, #64	; 0x40
   20a4a:	f3ef 8311 	mrs	r3, BASEPRI
   20a4e:	f382 8811 	msr	BASEPRI, r2
   20a52:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   20a56:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   20a58:	b920      	cbnz	r0, 20a64 <tx_notify+0x22>
	__asm__ volatile(
   20a5a:	f383 8811 	msr	BASEPRI, r3
   20a5e:	f3bf 8f6f 	isb	sy
}
   20a62:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a64:	6a61      	ldr	r1, [r4, #36]	; 0x24
   20a66:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20a68:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a6a:	4288      	cmp	r0, r1
	list->tail = node;
   20a6c:	bf08      	it	eq
   20a6e:	6262      	streq	r2, [r4, #36]	; 0x24
   20a70:	f383 8811 	msr	BASEPRI, r3
   20a74:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   20a78:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   20a7c:	f7f5 f906 	bl	15c8c <tx_free>
		cb(conn, user_data);
   20a80:	4631      	mov	r1, r6
   20a82:	4620      	mov	r0, r4
   20a84:	47a8      	blx	r5
	while (1) {
   20a86:	e7de      	b.n	20a46 <tx_notify+0x4>

00020a88 <tx_complete_work>:
	tx_notify(conn);
   20a88:	3828      	subs	r0, #40	; 0x28
   20a8a:	f7ff bfda 	b.w	20a42 <tx_notify>

00020a8e <bt_conn_new>:
{
   20a8e:	b538      	push	{r3, r4, r5, lr}
   20a90:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   20a92:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20a94:	2501      	movs	r5, #1
   20a96:	428b      	cmp	r3, r1
   20a98:	d102      	bne.n	20aa0 <bt_conn_new+0x12>
		return NULL;
   20a9a:	2400      	movs	r4, #0
}
   20a9c:	4620      	mov	r0, r4
   20a9e:	bd38      	pop	{r3, r4, r5, pc}
   20aa0:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   20aa4:	f3bf 8f5b 	dmb	ish
   20aa8:	e852 0f00 	ldrex	r0, [r2]
   20aac:	2800      	cmp	r0, #0
   20aae:	d104      	bne.n	20aba <bt_conn_new+0x2c>
   20ab0:	e842 5c00 	strex	ip, r5, [r2]
   20ab4:	f1bc 0f00 	cmp.w	ip, #0
   20ab8:	d1f6      	bne.n	20aa8 <bt_conn_new+0x1a>
   20aba:	f3bf 8f5b 	dmb	ish
   20abe:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   20ac2:	d002      	beq.n	20aca <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   20ac4:	3301      	adds	r3, #1
   20ac6:	4604      	mov	r4, r0
   20ac8:	e7e5      	b.n	20a96 <bt_conn_new+0x8>
	if (!conn) {
   20aca:	2c00      	cmp	r4, #0
   20acc:	d0e6      	beq.n	20a9c <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   20ace:	22b8      	movs	r2, #184	; 0xb8
   20ad0:	2100      	movs	r1, #0
   20ad2:	4620      	mov	r0, r4
   20ad4:	f7ff fbda 	bl	2028c <memset>
	return conn;
   20ad8:	e7e0      	b.n	20a9c <bt_conn_new+0xe>

00020ada <bt_conn_set_security>:
{
   20ada:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   20adc:	7b43      	ldrb	r3, [r0, #13]
   20ade:	2b07      	cmp	r3, #7
{
   20ae0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   20ae2:	d128      	bne.n	20b36 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   20ae4:	7a43      	ldrb	r3, [r0, #9]
   20ae6:	428b      	cmp	r3, r1
   20ae8:	d228      	bcs.n	20b3c <bt_conn_set_security+0x62>
   20aea:	7a83      	ldrb	r3, [r0, #10]
   20aec:	428b      	cmp	r3, r1
   20aee:	d225      	bcs.n	20b3c <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20af0:	f3bf 8f5b 	dmb	ish
	if (val) {
   20af4:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   20af6:	f100 0304 	add.w	r3, r0, #4
   20afa:	d513      	bpl.n	20b24 <bt_conn_set_security+0x4a>
   20afc:	e853 2f00 	ldrex	r2, [r3]
   20b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   20b04:	e843 2000 	strex	r0, r2, [r3]
   20b08:	2800      	cmp	r0, #0
   20b0a:	d1f7      	bne.n	20afc <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20b0c:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   20b10:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   20b14:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   20b16:	4620      	mov	r0, r4
   20b18:	f7f9 f940 	bl	19d9c <bt_smp_start_security>
	if (err) {
   20b1c:	b108      	cbz	r0, 20b22 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   20b1e:	7a63      	ldrb	r3, [r4, #9]
   20b20:	72a3      	strb	r3, [r4, #10]
}
   20b22:	bd10      	pop	{r4, pc}
   20b24:	e853 2f00 	ldrex	r2, [r3]
   20b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   20b2c:	e843 2000 	strex	r0, r2, [r3]
   20b30:	2800      	cmp	r0, #0
   20b32:	d0eb      	beq.n	20b0c <bt_conn_set_security+0x32>
   20b34:	e7f6      	b.n	20b24 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   20b36:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   20b3a:	e7f2      	b.n	20b22 <bt_conn_set_security+0x48>
		return 0;
   20b3c:	2000      	movs	r0, #0
   20b3e:	e7f0      	b.n	20b22 <bt_conn_set_security+0x48>

00020b40 <bt_conn_get_security>:
}
   20b40:	7a40      	ldrb	r0, [r0, #9]
   20b42:	4770      	bx	lr

00020b44 <bt_conn_reset_rx_state>:
{
   20b44:	b510      	push	{r4, lr}
   20b46:	4604      	mov	r4, r0
	if (!conn->rx) {
   20b48:	6900      	ldr	r0, [r0, #16]
   20b4a:	b118      	cbz	r0, 20b54 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   20b4c:	f7fa f866 	bl	1ac1c <net_buf_unref>
	conn->rx = NULL;
   20b50:	2300      	movs	r3, #0
   20b52:	6123      	str	r3, [r4, #16]
}
   20b54:	bd10      	pop	{r4, pc}

00020b56 <conn_cleanup>:
{
   20b56:	b570      	push	{r4, r5, r6, lr}
   20b58:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   20b5a:	f100 0638 	add.w	r6, r0, #56	; 0x38
   20b5e:	2200      	movs	r2, #0
   20b60:	2300      	movs	r3, #0
   20b62:	4630      	mov	r0, r6
   20b64:	f001 fc43 	bl	223ee <net_buf_get>
   20b68:	4605      	mov	r5, r0
   20b6a:	b950      	cbnz	r0, 20b82 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   20b6c:	4620      	mov	r0, r4
   20b6e:	f7ff ffe9 	bl	20b44 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20b72:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20b76:	2200      	movs	r2, #0
}
   20b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20b7c:	2300      	movs	r3, #0
   20b7e:	f7fc b9af 	b.w	1cee0 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   20b82:	6968      	ldr	r0, [r5, #20]
   20b84:	b108      	cbz	r0, 20b8a <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   20b86:	f7f5 f881 	bl	15c8c <tx_free>
		net_buf_unref(buf);
   20b8a:	4628      	mov	r0, r5
   20b8c:	f7fa f846 	bl	1ac1c <net_buf_unref>
   20b90:	e7e5      	b.n	20b5e <conn_cleanup+0x8>

00020b92 <bt_conn_connected>:
{
   20b92:	b510      	push	{r4, lr}
   20b94:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   20b96:	f7f5 fe97 	bl	168c8 <bt_l2cap_connected>
	notify_connected(conn);
   20b9a:	4620      	mov	r0, r4
}
   20b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   20ba0:	f7f5 b87e 	b.w	15ca0 <notify_connected>

00020ba4 <bt_conn_is_peer_addr_le>:
{
   20ba4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   20ba6:	7a03      	ldrb	r3, [r0, #8]
   20ba8:	428b      	cmp	r3, r1
{
   20baa:	4604      	mov	r4, r0
   20bac:	4615      	mov	r5, r2
	if (id != conn->id) {
   20bae:	d115      	bne.n	20bdc <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   20bb0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20bb4:	2207      	movs	r2, #7
   20bb6:	4628      	mov	r0, r5
   20bb8:	f7ff fb2d 	bl	20216 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   20bbc:	b180      	cbz	r0, 20be0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   20bbe:	78e3      	ldrb	r3, [r4, #3]
   20bc0:	2207      	movs	r2, #7
   20bc2:	b943      	cbnz	r3, 20bd6 <bt_conn_is_peer_addr_le+0x32>
   20bc4:	f104 0196 	add.w	r1, r4, #150	; 0x96
   20bc8:	4628      	mov	r0, r5
   20bca:	f7ff fb24 	bl	20216 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   20bce:	fab0 f080 	clz	r0, r0
   20bd2:	0940      	lsrs	r0, r0, #5
}
   20bd4:	bd38      	pop	{r3, r4, r5, pc}
   20bd6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   20bda:	e7f5      	b.n	20bc8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   20bdc:	2000      	movs	r0, #0
   20bde:	e7f9      	b.n	20bd4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   20be0:	2001      	movs	r0, #1
   20be2:	e7f7      	b.n	20bd4 <bt_conn_is_peer_addr_le+0x30>

00020be4 <bt_conn_ref>:
{
   20be4:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   20be6:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20bea:	f3bf 8f5b 	dmb	ish
   20bee:	6813      	ldr	r3, [r2, #0]
   20bf0:	f3bf 8f5b 	dmb	ish
		if (!old) {
   20bf4:	b17b      	cbz	r3, 20c16 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20bf6:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   20bfa:	1c59      	adds	r1, r3, #1
   20bfc:	e852 4f00 	ldrex	r4, [r2]
   20c00:	429c      	cmp	r4, r3
   20c02:	d104      	bne.n	20c0e <bt_conn_ref+0x2a>
   20c04:	e842 1c00 	strex	ip, r1, [r2]
   20c08:	f1bc 0f00 	cmp.w	ip, #0
   20c0c:	d1f6      	bne.n	20bfc <bt_conn_ref+0x18>
   20c0e:	f3bf 8f5b 	dmb	ish
   20c12:	d1ea      	bne.n	20bea <bt_conn_ref+0x6>
}
   20c14:	bd10      	pop	{r4, pc}
			return NULL;
   20c16:	4618      	mov	r0, r3
   20c18:	e7fc      	b.n	20c14 <bt_conn_ref+0x30>

00020c1a <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   20c1a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20c1e:	f3bf 8f5b 	dmb	ish
   20c22:	e853 2f00 	ldrex	r2, [r3]
   20c26:	3a01      	subs	r2, #1
   20c28:	e843 2100 	strex	r1, r2, [r3]
   20c2c:	2900      	cmp	r1, #0
   20c2e:	d1f8      	bne.n	20c22 <bt_conn_unref+0x8>
   20c30:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20c34:	f3bf 8f5b 	dmb	ish
   20c38:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   20c3c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   20c40:	b90b      	cbnz	r3, 20c46 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   20c42:	f7f4 be87 	b.w	15954 <bt_le_adv_resume>
}
   20c46:	4770      	bx	lr

00020c48 <conn_lookup_handle>:
{
   20c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20c4c:	4607      	mov	r7, r0
   20c4e:	460e      	mov	r6, r1
   20c50:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   20c52:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20c54:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   20c58:	42b4      	cmp	r4, r6
   20c5a:	d103      	bne.n	20c64 <conn_lookup_handle+0x1c>
	return NULL;
   20c5c:	2300      	movs	r3, #0
}
   20c5e:	4618      	mov	r0, r3
   20c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20c64:	fb09 7004 	mla	r0, r9, r4, r7
   20c68:	f7ff ffbc 	bl	20be4 <bt_conn_ref>
   20c6c:	4603      	mov	r3, r0
		if (!conn) {
   20c6e:	b158      	cbz	r0, 20c88 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   20c70:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   20c72:	2d01      	cmp	r5, #1
   20c74:	d002      	beq.n	20c7c <conn_lookup_handle+0x34>
   20c76:	3d07      	subs	r5, #7
   20c78:	2d01      	cmp	r5, #1
   20c7a:	d803      	bhi.n	20c84 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   20c7c:	881a      	ldrh	r2, [r3, #0]
   20c7e:	4542      	cmp	r2, r8
   20c80:	d0ed      	beq.n	20c5e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   20c82:	4618      	mov	r0, r3
   20c84:	f7ff ffc9 	bl	20c1a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   20c88:	3401      	adds	r4, #1
   20c8a:	e7e5      	b.n	20c58 <conn_lookup_handle+0x10>

00020c8c <bt_conn_get_dst>:
}
   20c8c:	3088      	adds	r0, #136	; 0x88
   20c8e:	4770      	bx	lr

00020c90 <bt_conn_disconnect>:
{
   20c90:	b538      	push	{r3, r4, r5, lr}
   20c92:	7b43      	ldrb	r3, [r0, #13]
   20c94:	3b02      	subs	r3, #2
   20c96:	4604      	mov	r4, r0
   20c98:	2b06      	cmp	r3, #6
   20c9a:	d805      	bhi.n	20ca8 <bt_conn_disconnect+0x18>
   20c9c:	e8df f003 	tbb	[pc, r3]
   20ca0:	04040408 	.word	0x04040408
   20ca4:	0e0c      	.short	0x0e0c
   20ca6:	0c          	.byte	0x0c
   20ca7:	00          	.byte	0x00
	switch (conn->state) {
   20ca8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   20cac:	4628      	mov	r0, r5
   20cae:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   20cb0:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20cb2:	2100      	movs	r1, #0
   20cb4:	f7f5 fa9c 	bl	161f0 <bt_conn_set_state>
		return 0;
   20cb8:	2500      	movs	r5, #0
   20cba:	e7f7      	b.n	20cac <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   20cbc:	8800      	ldrh	r0, [r0, #0]
   20cbe:	f7ff fc67 	bl	20590 <bt_hci_disconnect>
	if (err) {
   20cc2:	4605      	mov	r5, r0
   20cc4:	2800      	cmp	r0, #0
   20cc6:	d1f1      	bne.n	20cac <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   20cc8:	7b63      	ldrb	r3, [r4, #13]
   20cca:	2b07      	cmp	r3, #7
   20ccc:	d1ee      	bne.n	20cac <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   20cce:	2108      	movs	r1, #8
   20cd0:	4620      	mov	r0, r4
   20cd2:	f7f5 fa8d 	bl	161f0 <bt_conn_set_state>
   20cd6:	e7e9      	b.n	20cac <bt_conn_disconnect+0x1c>

00020cd8 <bt_conn_le_conn_update>:
{
   20cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cda:	4607      	mov	r7, r0
   20cdc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   20cde:	f242 0013 	movw	r0, #8211	; 0x2013
   20ce2:	210e      	movs	r1, #14
   20ce4:	f7f3 fac4 	bl	14270 <bt_hci_cmd_create>
	if (!buf) {
   20ce8:	4606      	mov	r6, r0
   20cea:	b1d0      	cbz	r0, 20d22 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   20cec:	210e      	movs	r1, #14
   20cee:	3008      	adds	r0, #8
   20cf0:	f001 fbce 	bl	22490 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20cf4:	220e      	movs	r2, #14
   20cf6:	4604      	mov	r4, r0
   20cf8:	2100      	movs	r1, #0
   20cfa:	f7ff fac7 	bl	2028c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   20cfe:	883b      	ldrh	r3, [r7, #0]
   20d00:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   20d02:	882b      	ldrh	r3, [r5, #0]
   20d04:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   20d06:	886b      	ldrh	r3, [r5, #2]
   20d08:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   20d0a:	88ab      	ldrh	r3, [r5, #4]
   20d0c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   20d0e:	88eb      	ldrh	r3, [r5, #6]
   20d10:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20d12:	4631      	mov	r1, r6
   20d14:	2200      	movs	r2, #0
}
   20d16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20d1a:	f242 0013 	movw	r0, #8211	; 0x2013
   20d1e:	f7f3 bc03 	b.w	14528 <bt_hci_cmd_send_sync>
}
   20d22:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020d28 <l2cap_connected>:
}
   20d28:	4770      	bx	lr

00020d2a <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   20d2a:	3010      	adds	r0, #16
   20d2c:	f001 bf63 	b.w	22bf6 <k_work_cancel_delayable>

00020d30 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20d30:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   20d32:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20d34:	b17b      	cbz	r3, 20d56 <bt_l2cap_chan_remove+0x26>
   20d36:	3b08      	subs	r3, #8
   20d38:	2200      	movs	r2, #0
   20d3a:	b163      	cbz	r3, 20d56 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   20d3c:	428b      	cmp	r3, r1
   20d3e:	f103 0408 	add.w	r4, r3, #8
   20d42:	d10f      	bne.n	20d64 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   20d44:	688b      	ldr	r3, [r1, #8]
   20d46:	b93a      	cbnz	r2, 20d58 <bt_l2cap_chan_remove+0x28>
   20d48:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   20d4a:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   20d4c:	4294      	cmp	r4, r2
   20d4e:	d100      	bne.n	20d52 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   20d50:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   20d52:	2300      	movs	r3, #0
   20d54:	608b      	str	r3, [r1, #8]
}
   20d56:	bd10      	pop	{r4, pc}
   20d58:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20d5a:	6d43      	ldr	r3, [r0, #84]	; 0x54
   20d5c:	429c      	cmp	r4, r3
	list->tail = node;
   20d5e:	bf08      	it	eq
   20d60:	6542      	streq	r2, [r0, #84]	; 0x54
}
   20d62:	e7f6      	b.n	20d52 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20d64:	2c00      	cmp	r4, #0
   20d66:	d0f6      	beq.n	20d56 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20d68:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20d6a:	2b00      	cmp	r3, #0
   20d6c:	d0f3      	beq.n	20d56 <bt_l2cap_chan_remove+0x26>
   20d6e:	3b08      	subs	r3, #8
   20d70:	4622      	mov	r2, r4
   20d72:	e7e2      	b.n	20d3a <bt_l2cap_chan_remove+0xa>

00020d74 <bt_l2cap_chan_del>:
{
   20d74:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   20d76:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   20d7a:	4604      	mov	r4, r0
	if (!chan->conn) {
   20d7c:	b123      	cbz	r3, 20d88 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   20d7e:	686b      	ldr	r3, [r5, #4]
   20d80:	b103      	cbz	r3, 20d84 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   20d82:	4798      	blx	r3
	chan->conn = NULL;
   20d84:	2300      	movs	r3, #0
   20d86:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   20d88:	68e3      	ldr	r3, [r4, #12]
   20d8a:	b10b      	cbz	r3, 20d90 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   20d8c:	4620      	mov	r0, r4
   20d8e:	4798      	blx	r3
	if (ops->released) {
   20d90:	69eb      	ldr	r3, [r5, #28]
   20d92:	b11b      	cbz	r3, 20d9c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   20d94:	4620      	mov	r0, r4
}
   20d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   20d9a:	4718      	bx	r3
}
   20d9c:	bd70      	pop	{r4, r5, r6, pc}

00020d9e <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20d9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   20da0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20da2:	b18b      	cbz	r3, 20dc8 <bt_l2cap_disconnected+0x2a>
   20da4:	f1b3 0008 	subs.w	r0, r3, #8
   20da8:	d00e      	beq.n	20dc8 <bt_l2cap_disconnected+0x2a>
   20daa:	681c      	ldr	r4, [r3, #0]
   20dac:	b104      	cbz	r4, 20db0 <bt_l2cap_disconnected+0x12>
   20dae:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   20db0:	f7ff ffe0 	bl	20d74 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20db4:	b144      	cbz	r4, 20dc8 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20db6:	f114 0308 	adds.w	r3, r4, #8
   20dba:	d002      	beq.n	20dc2 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20dbc:	68a3      	ldr	r3, [r4, #8]
   20dbe:	b103      	cbz	r3, 20dc2 <bt_l2cap_disconnected+0x24>
   20dc0:	3b08      	subs	r3, #8
{
   20dc2:	4620      	mov	r0, r4
   20dc4:	461c      	mov	r4, r3
   20dc6:	e7f3      	b.n	20db0 <bt_l2cap_disconnected+0x12>
}
   20dc8:	bd10      	pop	{r4, pc}

00020dca <bt_l2cap_security_changed>:
{
   20dca:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20dcc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   20dce:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20dd0:	b1a3      	cbz	r3, 20dfc <bt_l2cap_security_changed+0x32>
   20dd2:	f1b3 0008 	subs.w	r0, r3, #8
   20dd6:	d011      	beq.n	20dfc <bt_l2cap_security_changed+0x32>
   20dd8:	681c      	ldr	r4, [r3, #0]
   20dda:	b104      	cbz	r4, 20dde <bt_l2cap_security_changed+0x14>
   20ddc:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   20dde:	6843      	ldr	r3, [r0, #4]
   20de0:	689b      	ldr	r3, [r3, #8]
   20de2:	b10b      	cbz	r3, 20de8 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   20de4:	4629      	mov	r1, r5
   20de6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20de8:	b144      	cbz	r4, 20dfc <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20dea:	f114 0308 	adds.w	r3, r4, #8
   20dee:	d002      	beq.n	20df6 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20df0:	68a3      	ldr	r3, [r4, #8]
   20df2:	b103      	cbz	r3, 20df6 <bt_l2cap_security_changed+0x2c>
   20df4:	3b08      	subs	r3, #8
{
   20df6:	4620      	mov	r0, r4
   20df8:	461c      	mov	r4, r3
   20dfa:	e7f0      	b.n	20dde <bt_l2cap_security_changed+0x14>
}
   20dfc:	bd38      	pop	{r3, r4, r5, pc}

00020dfe <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   20dfe:	3104      	adds	r1, #4
   20e00:	f7f5 bbbe 	b.w	16580 <bt_conn_create_pdu_timeout>

00020e04 <bt_l2cap_send_cb>:
{
   20e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e08:	4614      	mov	r4, r2
   20e0a:	4605      	mov	r5, r0
   20e0c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   20e0e:	f102 0008 	add.w	r0, r2, #8
   20e12:	2104      	movs	r1, #4
   20e14:	461e      	mov	r6, r3
   20e16:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20e1a:	f001 fb50 	bl	224be <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20e1e:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   20e20:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20e22:	3a04      	subs	r2, #4
   20e24:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20e26:	4643      	mov	r3, r8
   20e28:	4632      	mov	r2, r6
   20e2a:	4621      	mov	r1, r4
   20e2c:	4628      	mov	r0, r5
}
   20e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20e32:	f7f5 b905 	b.w	16040 <bt_conn_send_cb>

00020e36 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20e36:	6d00      	ldr	r0, [r0, #80]	; 0x50
   20e38:	b160      	cbz	r0, 20e54 <bt_l2cap_le_lookup_tx_cid+0x1e>
   20e3a:	3808      	subs	r0, #8
   20e3c:	b900      	cbnz	r0, 20e40 <bt_l2cap_le_lookup_tx_cid+0xa>
   20e3e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   20e40:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   20e44:	428b      	cmp	r3, r1
   20e46:	d005      	beq.n	20e54 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20e48:	f110 0308 	adds.w	r3, r0, #8
   20e4c:	d001      	beq.n	20e52 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20e4e:	6880      	ldr	r0, [r0, #8]
   20e50:	e7f2      	b.n	20e38 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   20e52:	4618      	mov	r0, r3
}
   20e54:	4770      	bx	lr

00020e56 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20e56:	6d00      	ldr	r0, [r0, #80]	; 0x50
   20e58:	b160      	cbz	r0, 20e74 <bt_l2cap_le_lookup_rx_cid+0x1e>
   20e5a:	3808      	subs	r0, #8
   20e5c:	b900      	cbnz	r0, 20e60 <bt_l2cap_le_lookup_rx_cid+0xa>
   20e5e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20e60:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   20e64:	428b      	cmp	r3, r1
   20e66:	d005      	beq.n	20e74 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20e68:	f110 0308 	adds.w	r3, r0, #8
   20e6c:	d001      	beq.n	20e72 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20e6e:	6880      	ldr	r0, [r0, #8]
   20e70:	e7f2      	b.n	20e58 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   20e72:	4618      	mov	r0, r3
}
   20e74:	4770      	bx	lr

00020e76 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   20e76:	4770      	bx	lr

00020e78 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   20e78:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   20e7a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   20e7c:	b128      	cbz	r0, 20e8a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20e7e:	6859      	ldr	r1, [r3, #4]
   20e80:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20e82:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20e84:	4288      	cmp	r0, r1
	list->tail = node;
   20e86:	bf08      	it	eq
   20e88:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   20e8a:	4770      	bx	lr

00020e8c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20e8c:	4603      	mov	r3, r0
   20e8e:	6800      	ldr	r0, [r0, #0]
   20e90:	2200      	movs	r2, #0
   20e92:	b900      	cbnz	r0, 20e96 <sys_slist_find_and_remove+0xa>
   20e94:	4770      	bx	lr
   20e96:	4288      	cmp	r0, r1
   20e98:	d110      	bne.n	20ebc <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   20e9a:	6808      	ldr	r0, [r1, #0]
   20e9c:	b942      	cbnz	r2, 20eb0 <sys_slist_find_and_remove+0x24>
   20e9e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   20ea0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   20ea2:	4291      	cmp	r1, r2
   20ea4:	d100      	bne.n	20ea8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   20ea6:	6058      	str	r0, [r3, #4]
	parent->next = child;
   20ea8:	2300      	movs	r3, #0
   20eaa:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20eac:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   20eae:	4770      	bx	lr
	parent->next = child;
   20eb0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20eb2:	6858      	ldr	r0, [r3, #4]
   20eb4:	4281      	cmp	r1, r0
	list->tail = node;
   20eb6:	bf08      	it	eq
   20eb8:	605a      	streq	r2, [r3, #4]
}
   20eba:	e7f5      	b.n	20ea8 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20ebc:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20ebe:	6800      	ldr	r0, [r0, #0]
   20ec0:	e7e7      	b.n	20e92 <sys_slist_find_and_remove+0x6>

00020ec2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   20ec2:	4603      	mov	r3, r0
	size_t bytes = 0;
   20ec4:	2000      	movs	r0, #0

	while (buf) {
   20ec6:	b903      	cbnz	r3, 20eca <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   20ec8:	4770      	bx	lr
		bytes += buf->len;
   20eca:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   20ecc:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   20ece:	4410      	add	r0, r2
		buf = buf->frags;
   20ed0:	e7f9      	b.n	20ec6 <net_buf_frags_len+0x4>

00020ed2 <att_sent>:
	if (chan->ops->sent) {
   20ed2:	684b      	ldr	r3, [r1, #4]
   20ed4:	695b      	ldr	r3, [r3, #20]
{
   20ed6:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   20ed8:	b103      	cbz	r3, 20edc <att_sent+0xa>
		chan->ops->sent(chan);
   20eda:	4718      	bx	r3
}
   20edc:	4770      	bx	lr

00020ede <attr_read_type_cb>:
{
   20ede:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   20ee0:	68d4      	ldr	r4, [r2, #12]
   20ee2:	7823      	ldrb	r3, [r4, #0]
   20ee4:	3102      	adds	r1, #2
   20ee6:	b913      	cbnz	r3, 20eee <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   20ee8:	7021      	strb	r1, [r4, #0]
	return true;
   20eea:	2001      	movs	r0, #1
   20eec:	e006      	b.n	20efc <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   20eee:	428b      	cmp	r3, r1
   20ef0:	d0fb      	beq.n	20eea <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   20ef2:	8983      	ldrh	r3, [r0, #12]
   20ef4:	3b02      	subs	r3, #2
   20ef6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   20ef8:	2000      	movs	r0, #0
   20efa:	6110      	str	r0, [r2, #16]
}
   20efc:	bd10      	pop	{r4, pc}

00020efe <att_prepare_write_req>:
}
   20efe:	2006      	movs	r0, #6
   20f00:	4770      	bx	lr

00020f02 <att_op_get_type>:
	switch (op) {
   20f02:	281e      	cmp	r0, #30
   20f04:	d816      	bhi.n	20f34 <att_op_get_type+0x32>
   20f06:	b308      	cbz	r0, 20f4c <att_op_get_type+0x4a>
   20f08:	1e43      	subs	r3, r0, #1
   20f0a:	2b1d      	cmp	r3, #29
   20f0c:	d81e      	bhi.n	20f4c <att_op_get_type+0x4a>
   20f0e:	e8df f003 	tbb	[pc, r3]
   20f12:	2317      	.short	0x2317
   20f14:	23172317 	.word	0x23172317
   20f18:	23172317 	.word	0x23172317
   20f1c:	23172317 	.word	0x23172317
   20f20:	23172317 	.word	0x23172317
   20f24:	231d1d17 	.word	0x231d1d17
   20f28:	1d172317 	.word	0x1d172317
   20f2c:	0f1b1d19 	.word	0x0f1b1d19
   20f30:	2004      	movs	r0, #4
   20f32:	4770      	bx	lr
   20f34:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   20f38:	2b52      	cmp	r3, #82	; 0x52
   20f3a:	d107      	bne.n	20f4c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   20f3c:	2000      	movs	r0, #0
}
   20f3e:	4770      	bx	lr
		return ATT_RESPONSE;
   20f40:	2002      	movs	r0, #2
   20f42:	4770      	bx	lr
		return ATT_NOTIFICATION;
   20f44:	2003      	movs	r0, #3
   20f46:	4770      	bx	lr
		return ATT_INDICATION;
   20f48:	2005      	movs	r0, #5
   20f4a:	4770      	bx	lr
		return ATT_COMMAND;
   20f4c:	f010 0f40 	tst.w	r0, #64	; 0x40
   20f50:	bf0c      	ite	eq
   20f52:	2006      	moveq	r0, #6
   20f54:	2000      	movne	r0, #0
   20f56:	4770      	bx	lr
		return ATT_REQUEST;
   20f58:	2001      	movs	r0, #1
   20f5a:	4770      	bx	lr

00020f5c <bt_gatt_foreach_attr>:
{
   20f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20f5e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20f62:	2300      	movs	r3, #0
   20f64:	9300      	str	r3, [sp, #0]
   20f66:	461a      	mov	r2, r3
   20f68:	f7f7 fa62 	bl	18430 <bt_gatt_foreach_attr_type>
}
   20f6c:	b005      	add	sp, #20
   20f6e:	f85d fb04 	ldr.w	pc, [sp], #4

00020f72 <att_chan_read>:
{
   20f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f76:	4680      	mov	r8, r0
   20f78:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20f7a:	4610      	mov	r0, r2
{
   20f7c:	4699      	mov	r9, r3
   20f7e:	468b      	mov	fp, r1
   20f80:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20f82:	f7ff ff9e 	bl	20ec2 <net_buf_frags_len>
   20f86:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   20f8a:	4283      	cmp	r3, r0
   20f8c:	d97a      	bls.n	21084 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   20f8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20f92:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   20f94:	4630      	mov	r0, r6
   20f96:	f001 fa59 	bl	2244c <net_buf_frag_last>
	size_t len, total = 0;
   20f9a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   20f9e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20fa0:	4630      	mov	r0, r6
   20fa2:	f7ff ff8e 	bl	20ec2 <net_buf_frags_len>
   20fa6:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   20faa:	f105 0708 	add.w	r7, r5, #8
   20fae:	1a24      	subs	r4, r4, r0
   20fb0:	4638      	mov	r0, r7
   20fb2:	f001 faa8 	bl	22506 <net_buf_simple_tailroom>
   20fb6:	4284      	cmp	r4, r0
   20fb8:	d211      	bcs.n	20fde <att_chan_read+0x6c>
   20fba:	4630      	mov	r0, r6
   20fbc:	f7ff ff81 	bl	20ec2 <net_buf_frags_len>
   20fc0:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   20fc4:	1a24      	subs	r4, r4, r0
		if (!len) {
   20fc6:	bb34      	cbnz	r4, 21016 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   20fc8:	79b0      	ldrb	r0, [r6, #6]
   20fca:	f7f9 fd6b 	bl	1aaa4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   20fce:	2200      	movs	r2, #0
   20fd0:	2300      	movs	r3, #0
   20fd2:	f001 fa07 	bl	223e4 <net_buf_alloc_fixed>
			if (!frag) {
   20fd6:	4605      	mov	r5, r0
   20fd8:	b930      	cbnz	r0, 20fe8 <att_chan_read+0x76>
	return total;
   20fda:	4657      	mov	r7, sl
   20fdc:	e02c      	b.n	21038 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   20fde:	4638      	mov	r0, r7
   20fe0:	f001 fa91 	bl	22506 <net_buf_simple_tailroom>
   20fe4:	4604      	mov	r4, r0
   20fe6:	e7ee      	b.n	20fc6 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   20fe8:	4601      	mov	r1, r0
   20fea:	4630      	mov	r0, r6
   20fec:	f001 fa3f 	bl	2246e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20ff0:	4630      	mov	r0, r6
   20ff2:	f7ff ff66 	bl	20ec2 <net_buf_frags_len>
   20ff6:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   20ffa:	f105 0708 	add.w	r7, r5, #8
   20ffe:	1a24      	subs	r4, r4, r0
   21000:	4638      	mov	r0, r7
   21002:	f001 fa80 	bl	22506 <net_buf_simple_tailroom>
   21006:	4284      	cmp	r4, r0
   21008:	d21a      	bcs.n	21040 <att_chan_read+0xce>
   2100a:	4630      	mov	r0, r6
   2100c:	f7ff ff59 	bl	20ec2 <net_buf_frags_len>
   21010:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   21014:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   21016:	68a9      	ldr	r1, [r5, #8]
   21018:	89aa      	ldrh	r2, [r5, #12]
   2101a:	f8db 7004 	ldr.w	r7, [fp, #4]
   2101e:	9803      	ldr	r0, [sp, #12]
   21020:	f8cd 9000 	str.w	r9, [sp]
   21024:	440a      	add	r2, r1
   21026:	b2a3      	uxth	r3, r4
   21028:	4659      	mov	r1, fp
   2102a:	47b8      	blx	r7
		if (read < 0) {
   2102c:	1e07      	subs	r7, r0, #0
   2102e:	da0c      	bge.n	2104a <att_chan_read+0xd8>
				return total;
   21030:	f1ba 0f00 	cmp.w	sl, #0
   21034:	bf18      	it	ne
   21036:	4657      	movne	r7, sl
}
   21038:	4638      	mov	r0, r7
   2103a:	b005      	add	sp, #20
   2103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21040:	4638      	mov	r0, r7
   21042:	f001 fa60 	bl	22506 <net_buf_simple_tailroom>
   21046:	4604      	mov	r4, r0
   21048:	e7e5      	b.n	21016 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2104a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2104c:	b993      	cbnz	r3, 21074 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2104e:	4639      	mov	r1, r7
   21050:	f105 0008 	add.w	r0, r5, #8
   21054:	f001 fa1c 	bl	22490 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21058:	4630      	mov	r0, r6
   2105a:	f7ff ff32 	bl	20ec2 <net_buf_frags_len>
   2105e:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   21062:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21064:	4283      	cmp	r3, r0
		total += read;
   21066:	44ba      	add	sl, r7
		offset += read;
   21068:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2106c:	d9b5      	bls.n	20fda <att_chan_read+0x68>
   2106e:	42a7      	cmp	r7, r4
   21070:	d096      	beq.n	20fa0 <att_chan_read+0x2e>
   21072:	e7b2      	b.n	20fda <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   21074:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21078:	4639      	mov	r1, r7
   2107a:	4628      	mov	r0, r5
   2107c:	4798      	blx	r3
   2107e:	2800      	cmp	r0, #0
   21080:	d1e5      	bne.n	2104e <att_chan_read+0xdc>
   21082:	e7aa      	b.n	20fda <att_chan_read+0x68>
		return 0;
   21084:	2700      	movs	r7, #0
   21086:	e7d7      	b.n	21038 <att_chan_read+0xc6>

00021088 <find_info_cb>:
{
   21088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2108a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2108c:	6817      	ldr	r7, [r2, #0]
{
   2108e:	4605      	mov	r5, r0
   21090:	460e      	mov	r6, r1
   21092:	4614      	mov	r4, r2
	if (!data->rsp) {
   21094:	b963      	cbnz	r3, 210b0 <find_info_cb+0x28>
   21096:	6850      	ldr	r0, [r2, #4]
   21098:	2101      	movs	r1, #1
   2109a:	3008      	adds	r0, #8
   2109c:	f001 f9f8 	bl	22490 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   210a0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210a2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   210a4:	781b      	ldrb	r3, [r3, #0]
   210a6:	2b00      	cmp	r3, #0
   210a8:	bf0c      	ite	eq
   210aa:	2301      	moveq	r3, #1
   210ac:	2302      	movne	r3, #2
   210ae:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   210b0:	68a3      	ldr	r3, [r4, #8]
   210b2:	781b      	ldrb	r3, [r3, #0]
   210b4:	2b01      	cmp	r3, #1
   210b6:	d003      	beq.n	210c0 <find_info_cb+0x38>
   210b8:	2b02      	cmp	r3, #2
   210ba:	d019      	beq.n	210f0 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   210bc:	2000      	movs	r0, #0
   210be:	e016      	b.n	210ee <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   210c0:	682b      	ldr	r3, [r5, #0]
   210c2:	781b      	ldrb	r3, [r3, #0]
   210c4:	2b00      	cmp	r3, #0
   210c6:	d1f9      	bne.n	210bc <find_info_cb+0x34>
   210c8:	6860      	ldr	r0, [r4, #4]
   210ca:	2104      	movs	r1, #4
   210cc:	3008      	adds	r0, #8
   210ce:	f001 f9df 	bl	22490 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   210d2:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   210d4:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   210d6:	885b      	ldrh	r3, [r3, #2]
   210d8:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   210da:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   210dc:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   210de:	899b      	ldrh	r3, [r3, #12]
   210e0:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   210e4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   210e6:	2804      	cmp	r0, #4
   210e8:	bf94      	ite	ls
   210ea:	2000      	movls	r0, #0
   210ec:	2001      	movhi	r0, #1
}
   210ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   210f0:	682b      	ldr	r3, [r5, #0]
   210f2:	781b      	ldrb	r3, [r3, #0]
   210f4:	2b02      	cmp	r3, #2
   210f6:	d1e1      	bne.n	210bc <find_info_cb+0x34>
   210f8:	6860      	ldr	r0, [r4, #4]
   210fa:	2112      	movs	r1, #18
   210fc:	3008      	adds	r0, #8
   210fe:	f001 f9c7 	bl	22490 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21102:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   21104:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21106:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   21108:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2110c:	3101      	adds	r1, #1
   2110e:	f7ff f892 	bl	20236 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   21112:	6863      	ldr	r3, [r4, #4]
   21114:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   21118:	899b      	ldrh	r3, [r3, #12]
   2111a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2111c:	2812      	cmp	r0, #18
   2111e:	e7e3      	b.n	210e8 <find_info_cb+0x60>

00021120 <attr_read_group_cb>:
	if (!data->rsp->len) {
   21120:	68d0      	ldr	r0, [r2, #12]
   21122:	7803      	ldrb	r3, [r0, #0]
   21124:	3104      	adds	r1, #4
   21126:	b913      	cbnz	r3, 2112e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   21128:	7001      	strb	r1, [r0, #0]
	return true;
   2112a:	2001      	movs	r0, #1
}
   2112c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2112e:	428b      	cmp	r3, r1
   21130:	d0fb      	beq.n	2112a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   21132:	6891      	ldr	r1, [r2, #8]
   21134:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   21136:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   21138:	3b04      	subs	r3, #4
   2113a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2113c:	6110      	str	r0, [r2, #16]
		return false;
   2113e:	4770      	bx	lr

00021140 <chan_req_send>:
{
   21140:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21142:	688e      	ldr	r6, [r1, #8]
{
   21144:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21146:	4630      	mov	r0, r6
{
   21148:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2114a:	f7ff feba 	bl	20ec2 <net_buf_frags_len>
   2114e:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   21152:	4283      	cmp	r3, r0
   21154:	d30a      	bcc.n	2116c <chan_req_send+0x2c>
	req->buf = NULL;
   21156:	2200      	movs	r2, #0
	chan->req = req;
   21158:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   2115c:	4628      	mov	r0, r5
	req->buf = NULL;
   2115e:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   21160:	4631      	mov	r1, r6
   21162:	f7f5 fe6f 	bl	16e44 <chan_send>
	if (err) {
   21166:	b100      	cbz	r0, 2116a <chan_req_send+0x2a>
		req->buf = buf;
   21168:	60a6      	str	r6, [r4, #8]
}
   2116a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2116c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21170:	e7fb      	b.n	2116a <chan_req_send+0x2a>

00021172 <process_queue>:
{
   21172:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   21174:	2200      	movs	r2, #0
{
   21176:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   21178:	2300      	movs	r3, #0
   2117a:	4608      	mov	r0, r1
{
   2117c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2117e:	f001 f936 	bl	223ee <net_buf_get>
	if (buf) {
   21182:	4605      	mov	r5, r0
   21184:	b160      	cbz	r0, 211a0 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   21186:	4601      	mov	r1, r0
   21188:	2200      	movs	r2, #0
   2118a:	4620      	mov	r0, r4
   2118c:	f7f5 fe5a 	bl	16e44 <chan_send>
		if (err) {
   21190:	4604      	mov	r4, r0
   21192:	b118      	cbz	r0, 2119c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   21194:	4629      	mov	r1, r5
   21196:	4630      	mov	r0, r6
   21198:	f001 fc3e 	bl	22a18 <k_queue_prepend>
}
   2119c:	4620      	mov	r0, r4
   2119e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   211a0:	f06f 0401 	mvn.w	r4, #1
   211a4:	e7fa      	b.n	2119c <process_queue+0x2a>

000211a6 <chan_req_sent>:
	if (chan->req) {
   211a6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   211aa:	b133      	cbz	r3, 211ba <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   211ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   211b0:	2300      	movs	r3, #0
   211b2:	f500 7088 	add.w	r0, r0, #272	; 0x110
   211b6:	f7fb be93 	b.w	1cee0 <k_work_reschedule>
}
   211ba:	4770      	bx	lr

000211bc <att_exec_write_req>:
   211bc:	2006      	movs	r0, #6
   211be:	4770      	bx	lr

000211c0 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   211c0:	30f0      	adds	r0, #240	; 0xf0
   211c2:	f3bf 8f5b 	dmb	ish
   211c6:	e850 3f00 	ldrex	r3, [r0]
   211ca:	f023 0301 	bic.w	r3, r3, #1
   211ce:	e840 3200 	strex	r2, r3, [r0]
   211d2:	2a00      	cmp	r2, #0
   211d4:	d1f7      	bne.n	211c6 <chan_rsp_sent+0x6>
   211d6:	f3bf 8f5b 	dmb	ish
}
   211da:	4770      	bx	lr

000211dc <chan_cfm_sent>:
   211dc:	30f0      	adds	r0, #240	; 0xf0
   211de:	f3bf 8f5b 	dmb	ish
   211e2:	e850 3f00 	ldrex	r3, [r0]
   211e6:	f023 0302 	bic.w	r3, r3, #2
   211ea:	e840 3200 	strex	r2, r3, [r0]
   211ee:	2a00      	cmp	r2, #0
   211f0:	d1f7      	bne.n	211e2 <chan_cfm_sent+0x6>
   211f2:	f3bf 8f5b 	dmb	ish
}
   211f6:	4770      	bx	lr

000211f8 <bt_att_status>:
{
   211f8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   211fa:	f3bf 8f5b 	dmb	ish
   211fe:	680b      	ldr	r3, [r1, #0]
   21200:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21204:	07db      	lsls	r3, r3, #31
{
   21206:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21208:	d519      	bpl.n	2123e <bt_att_status+0x46>
	if (!chan->att) {
   2120a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2120e:	b1b0      	cbz	r0, 2123e <bt_att_status+0x46>
	if (chan->req) {
   21210:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   21214:	b99b      	cbnz	r3, 2123e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   21216:	3004      	adds	r0, #4
   21218:	f7ff fe2e 	bl	20e78 <sys_slist_get>
	if (!node) {
   2121c:	4604      	mov	r4, r0
   2121e:	b170      	cbz	r0, 2123e <bt_att_status+0x46>
	return chan_req_send(chan, req);
   21220:	4601      	mov	r1, r0
   21222:	f1a5 0008 	sub.w	r0, r5, #8
   21226:	f7ff ff8b 	bl	21140 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2122a:	2800      	cmp	r0, #0
   2122c:	da07      	bge.n	2123e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2122e:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   21232:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   21234:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21236:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   21238:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2123a:	b902      	cbnz	r2, 2123e <bt_att_status+0x46>
	list->tail = node;
   2123c:	609c      	str	r4, [r3, #8]
}
   2123e:	bd38      	pop	{r3, r4, r5, pc}

00021240 <att_req_send_process>:
{
   21240:	b570      	push	{r4, r5, r6, lr}
   21242:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   21244:	3004      	adds	r0, #4
   21246:	f7ff fe17 	bl	20e78 <sys_slist_get>
	if (!node) {
   2124a:	4606      	mov	r6, r0
   2124c:	b1c0      	cbz	r0, 21280 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2124e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21250:	b153      	cbz	r3, 21268 <att_req_send_process+0x28>
   21252:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   21256:	d007      	beq.n	21268 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21258:	681c      	ldr	r4, [r3, #0]
   2125a:	b10c      	cbz	r4, 21260 <att_req_send_process+0x20>
   2125c:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   21260:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   21264:	b13b      	cbz	r3, 21276 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21266:	b964      	cbnz	r4, 21282 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   21268:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2126a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2126c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2126e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   21270:	b933      	cbnz	r3, 21280 <att_req_send_process+0x40>
	list->tail = node;
   21272:	60ae      	str	r6, [r5, #8]
}
   21274:	e004      	b.n	21280 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   21276:	4631      	mov	r1, r6
   21278:	f7ff ff62 	bl	21140 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2127c:	2800      	cmp	r0, #0
   2127e:	dbf2      	blt.n	21266 <att_req_send_process+0x26>
}
   21280:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   21282:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   21286:	d004      	beq.n	21292 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21288:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2128c:	b10b      	cbz	r3, 21292 <att_req_send_process+0x52>
   2128e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   21292:	4620      	mov	r0, r4
   21294:	461c      	mov	r4, r3
   21296:	e7e3      	b.n	21260 <att_req_send_process+0x20>

00021298 <write_cb>:
{
   21298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2129a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2129c:	4601      	mov	r1, r0
{
   2129e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   212a0:	222a      	movs	r2, #42	; 0x2a
   212a2:	6820      	ldr	r0, [r4, #0]
   212a4:	f000 fbc4 	bl	21a30 <bt_gatt_check_perm>
   212a8:	4605      	mov	r5, r0
   212aa:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   212ac:	bb00      	cbnz	r0, 212f0 <write_cb+0x58>
	if (!data->req) {
   212ae:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   212b0:	68b7      	ldr	r7, [r6, #8]
   212b2:	68e2      	ldr	r2, [r4, #12]
   212b4:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   212b6:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   212b8:	bf14      	ite	ne
   212ba:	2300      	movne	r3, #0
   212bc:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   212be:	9301      	str	r3, [sp, #4]
   212c0:	8a63      	ldrh	r3, [r4, #18]
   212c2:	9300      	str	r3, [sp, #0]
   212c4:	4631      	mov	r1, r6
   212c6:	8a23      	ldrh	r3, [r4, #16]
   212c8:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   212ca:	1e03      	subs	r3, r0, #0
   212cc:	db05      	blt.n	212da <write_cb+0x42>
   212ce:	8a22      	ldrh	r2, [r4, #16]
   212d0:	4293      	cmp	r3, r2
   212d2:	d10b      	bne.n	212ec <write_cb+0x54>
	data->err = 0U;
   212d4:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   212d6:	2501      	movs	r5, #1
   212d8:	e005      	b.n	212e6 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   212da:	f113 0fff 	cmn.w	r3, #255	; 0xff
   212de:	d305      	bcc.n	212ec <write_cb+0x54>
		return -err;
   212e0:	425b      	negs	r3, r3
   212e2:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   212e4:	7523      	strb	r3, [r4, #20]
}
   212e6:	4628      	mov	r0, r5
   212e8:	b003      	add	sp, #12
   212ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   212ec:	230e      	movs	r3, #14
   212ee:	e7f9      	b.n	212e4 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   212f0:	2500      	movs	r5, #0
   212f2:	e7f8      	b.n	212e6 <write_cb+0x4e>

000212f4 <bt_att_sent>:
{
   212f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   212f6:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   212fa:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   212fe:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21300:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   21304:	b10b      	cbz	r3, 2130a <bt_att_sent+0x16>
		chan->sent(chan);
   21306:	4638      	mov	r0, r7
   21308:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2130a:	f3bf 8f5b 	dmb	ish
   2130e:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   21312:	e853 2f00 	ldrex	r2, [r3]
   21316:	f022 0210 	bic.w	r2, r2, #16
   2131a:	e843 2100 	strex	r1, r2, [r3]
   2131e:	2900      	cmp	r1, #0
   21320:	d1f7      	bne.n	21312 <bt_att_sent+0x1e>
   21322:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21326:	b30c      	cbz	r4, 2136c <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21328:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2132c:	b98b      	cbnz	r3, 21352 <bt_att_sent+0x5e>
   2132e:	6863      	ldr	r3, [r4, #4]
   21330:	b17b      	cbz	r3, 21352 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21332:	1d20      	adds	r0, r4, #4
   21334:	f7ff fda0 	bl	20e78 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21338:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2133a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2133c:	4638      	mov	r0, r7
   2133e:	f7ff feff 	bl	21140 <chan_req_send>
   21342:	2800      	cmp	r0, #0
   21344:	da12      	bge.n	2136c <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   21346:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   21348:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2134a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2134c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2134e:	b903      	cbnz	r3, 21352 <bt_att_sent+0x5e>
	list->tail = node;
   21350:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21352:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   21356:	4638      	mov	r0, r7
   21358:	f7ff ff0b 	bl	21172 <process_queue>
	if (!err) {
   2135c:	b130      	cbz	r0, 2136c <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2135e:	f104 010c 	add.w	r1, r4, #12
   21362:	4638      	mov	r0, r7
}
   21364:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   21368:	f7ff bf03 	b.w	21172 <process_queue>
}
   2136c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002136e <read_cb>:
{
   2136e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   21372:	f8d2 8000 	ldr.w	r8, [r2]
{
   21376:	4606      	mov	r6, r0
	data->err = 0x00;
   21378:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2137a:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2137e:	7317      	strb	r7, [r2, #12]
{
   21380:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21382:	4631      	mov	r1, r6
   21384:	2215      	movs	r2, #21
   21386:	f000 fb53 	bl	21a30 <bt_gatt_check_perm>
   2138a:	4604      	mov	r4, r0
   2138c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2138e:	b9a0      	cbnz	r0, 213ba <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   21390:	e9cd 0000 	strd	r0, r0, [sp]
   21394:	88ab      	ldrh	r3, [r5, #4]
   21396:	68aa      	ldr	r2, [r5, #8]
   21398:	4631      	mov	r1, r6
   2139a:	4640      	mov	r0, r8
   2139c:	f7ff fde9 	bl	20f72 <att_chan_read>
	if (ret < 0) {
   213a0:	1e03      	subs	r3, r0, #0
   213a2:	da0c      	bge.n	213be <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   213a4:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   213a8:	bf26      	itte	cs
   213aa:	425b      	negcs	r3, r3
   213ac:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   213ae:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   213b0:	732b      	strb	r3, [r5, #12]
}
   213b2:	4620      	mov	r0, r4
   213b4:	b002      	add	sp, #8
   213b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   213ba:	463c      	mov	r4, r7
   213bc:	e7f9      	b.n	213b2 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   213be:	2401      	movs	r4, #1
   213c0:	e7f7      	b.n	213b2 <read_cb+0x44>

000213c2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   213c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   213c6:	4688      	mov	r8, r1
   213c8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   213ca:	2101      	movs	r1, #1
   213cc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   213ce:	4605      	mov	r5, r0
   213d0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   213d2:	f7f5 fec5 	bl	17160 <bt_att_chan_create_pdu>
	if (!buf) {
   213d6:	4604      	mov	r4, r0
   213d8:	b170      	cbz	r0, 213f8 <send_err_rsp.part.0+0x36>
   213da:	2104      	movs	r1, #4
   213dc:	3008      	adds	r0, #8
   213de:	f001 f857 	bl	22490 <net_buf_simple_add>
	rsp->request = req;
   213e2:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   213e6:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   213e8:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   213ec:	4621      	mov	r1, r4
   213ee:	4628      	mov	r0, r5
}
   213f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   213f4:	f7f5 bdd4 	b.w	16fa0 <bt_att_chan_send_rsp.constprop.0>
}
   213f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000213fc <att_read_blob_req>:
{
   213fc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   213fe:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21400:	8813      	ldrh	r3, [r2, #0]
   21402:	8852      	ldrh	r2, [r2, #2]
   21404:	9200      	str	r2, [sp, #0]
   21406:	210c      	movs	r1, #12
   21408:	220d      	movs	r2, #13
   2140a:	f7f6 f8f3 	bl	175f4 <att_read_rsp>
}
   2140e:	b003      	add	sp, #12
   21410:	f85d fb04 	ldr.w	pc, [sp], #4

00021414 <att_read_req>:
{
   21414:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21416:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21418:	2200      	movs	r2, #0
   2141a:	881b      	ldrh	r3, [r3, #0]
   2141c:	9200      	str	r2, [sp, #0]
   2141e:	210a      	movs	r1, #10
   21420:	220b      	movs	r2, #11
   21422:	f7f6 f8e7 	bl	175f4 <att_read_rsp>
}
   21426:	b003      	add	sp, #12
   21428:	f85d fb04 	ldr.w	pc, [sp], #4

0002142c <att_mtu_req>:
{
   2142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   2142e:	6803      	ldr	r3, [r0, #0]
{
   21430:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   21432:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21434:	f3bf 8f5b 	dmb	ish
   21438:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   2143c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21440:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   21444:	071b      	lsls	r3, r3, #28
   21446:	d41d      	bmi.n	21484 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   21448:	688b      	ldr	r3, [r1, #8]
   2144a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2144c:	2e16      	cmp	r6, #22
   2144e:	d91b      	bls.n	21488 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   21450:	2202      	movs	r2, #2
   21452:	2103      	movs	r1, #3
   21454:	f7f5 ffd2 	bl	173fc <bt_att_create_pdu>
	if (!pdu) {
   21458:	4607      	mov	r7, r0
   2145a:	b1b8      	cbz	r0, 2148c <att_mtu_req+0x60>
   2145c:	2102      	movs	r1, #2
   2145e:	3008      	adds	r0, #8
   21460:	f001 f816 	bl	22490 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21464:	2341      	movs	r3, #65	; 0x41
   21466:	7003      	strb	r3, [r0, #0]
   21468:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2146a:	4639      	mov	r1, r7
   2146c:	4628      	mov	r0, r5
   2146e:	f7f5 fd97 	bl	16fa0 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21472:	2e41      	cmp	r6, #65	; 0x41
   21474:	bf28      	it	cs
   21476:	2641      	movcs	r6, #65	; 0x41
   21478:	f8a5 607a 	strh.w	r6, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2147c:	f8a5 6086 	strh.w	r6, [r5, #134]	; 0x86
	return 0;
   21480:	4620      	mov	r0, r4
}
   21482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   21484:	2006      	movs	r0, #6
   21486:	e7fc      	b.n	21482 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   21488:	2004      	movs	r0, #4
   2148a:	e7fa      	b.n	21482 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   2148c:	200e      	movs	r0, #14
   2148e:	e7f8      	b.n	21482 <att_mtu_req+0x56>

00021490 <bt_att_init>:
	bt_gatt_init();
   21490:	f7f6 bf48 	b.w	18324 <bt_gatt_init>

00021494 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21494:	898a      	ldrh	r2, [r1, #12]
   21496:	6889      	ldr	r1, [r1, #8]
   21498:	2300      	movs	r3, #0
   2149a:	f7f6 ba1d 	b.w	178d8 <att_handle_rsp>

0002149e <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2149e:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   214a2:	b570      	push	{r4, r5, r6, lr}
   214a4:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   214a6:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   214aa:	2b00      	cmp	r3, #0
   214ac:	d037      	beq.n	2151e <bt_att_encrypt_change+0x80>
	if (hci_status) {
   214ae:	b171      	cbz	r1, 214ce <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   214b0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   214b4:	2b00      	cmp	r3, #0
   214b6:	d032      	beq.n	2151e <bt_att_encrypt_change+0x80>
   214b8:	7c1b      	ldrb	r3, [r3, #16]
   214ba:	07da      	lsls	r2, r3, #31
   214bc:	d52f      	bpl.n	2151e <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   214be:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   214c0:	2200      	movs	r2, #0
   214c2:	4630      	mov	r0, r6
   214c4:	4611      	mov	r1, r2
}
   214c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   214ca:	f7f6 ba05 	b.w	178d8 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   214ce:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   214d0:	4628      	mov	r0, r5
   214d2:	f7f7 fc69 	bl	18da8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   214d6:	7a6b      	ldrb	r3, [r5, #9]
   214d8:	2b01      	cmp	r3, #1
   214da:	d020      	beq.n	2151e <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   214dc:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   214e0:	b1ec      	cbz	r4, 2151e <bt_att_encrypt_change+0x80>
   214e2:	7c23      	ldrb	r3, [r4, #16]
   214e4:	07db      	lsls	r3, r3, #31
   214e6:	d51a      	bpl.n	2151e <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   214e8:	68e3      	ldr	r3, [r4, #12]
   214ea:	2b00      	cmp	r3, #0
   214ec:	d0e7      	beq.n	214be <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   214ee:	6962      	ldr	r2, [r4, #20]
   214f0:	7c61      	ldrb	r1, [r4, #17]
   214f2:	4630      	mov	r0, r6
   214f4:	f7f5 fe34 	bl	17160 <bt_att_chan_create_pdu>
	if (!buf) {
   214f8:	4605      	mov	r5, r0
   214fa:	b140      	cbz	r0, 2150e <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   214fc:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   21500:	68e3      	ldr	r3, [r4, #12]
   21502:	4798      	blx	r3
   21504:	4602      	mov	r2, r0
   21506:	b120      	cbz	r0, 21512 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   21508:	4628      	mov	r0, r5
   2150a:	f7f9 fb87 	bl	1ac1c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2150e:	230e      	movs	r3, #14
   21510:	e7d6      	b.n	214c0 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   21512:	4629      	mov	r1, r5
   21514:	4630      	mov	r0, r6
   21516:	f7f5 fc95 	bl	16e44 <chan_send>
   2151a:	2800      	cmp	r0, #0
   2151c:	d1f4      	bne.n	21508 <bt_att_encrypt_change+0x6a>
}
   2151e:	bd70      	pop	{r4, r5, r6, pc}

00021520 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   21520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21524:	4607      	mov	r7, r0
   21526:	460d      	mov	r5, r1
   21528:	4616      	mov	r6, r2
   2152a:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2152c:	f7f5 fcf8 	bl	16f20 <att_get>
	if (!att) {
   21530:	4604      	mov	r4, r0
   21532:	b938      	cbnz	r0, 21544 <bt_att_send+0x24>
		net_buf_unref(buf);
   21534:	4628      	mov	r0, r5
   21536:	f7f9 fb71 	bl	1ac1c <net_buf_unref>
		return -ENOTCONN;
   2153a:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2153e:	b002      	add	sp, #8
   21540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21544:	b146      	cbz	r6, 21558 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21546:	f8cd 8000 	str.w	r8, [sp]
   2154a:	4633      	mov	r3, r6
   2154c:	462a      	mov	r2, r5
   2154e:	2104      	movs	r1, #4
   21550:	4638      	mov	r0, r7
   21552:	f7ff fc57 	bl	20e04 <bt_l2cap_send_cb>
   21556:	e7f2      	b.n	2153e <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   21558:	f100 060c 	add.w	r6, r0, #12
   2155c:	4629      	mov	r1, r5
   2155e:	4630      	mov	r0, r6
   21560:	f000 ff63 	bl	2242a <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   21564:	2200      	movs	r2, #0
   21566:	2300      	movs	r3, #0
   21568:	4630      	mov	r0, r6
   2156a:	f000 ff40 	bl	223ee <net_buf_get>
	if (!buf) {
   2156e:	4605      	mov	r5, r0
   21570:	b908      	cbnz	r0, 21576 <bt_att_send+0x56>
	return 0;
   21572:	2000      	movs	r0, #0
   21574:	e7e3      	b.n	2153e <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21576:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21578:	b1c3      	cbz	r3, 215ac <bt_att_send+0x8c>
   2157a:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   2157e:	d015      	beq.n	215ac <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21580:	681c      	ldr	r4, [r3, #0]
   21582:	b10c      	cbz	r4, 21588 <bt_att_send+0x68>
   21584:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   21588:	2200      	movs	r2, #0
   2158a:	4629      	mov	r1, r5
   2158c:	f7f5 fc5a 	bl	16e44 <chan_send>
		if (err >= 0) {
   21590:	2800      	cmp	r0, #0
   21592:	daee      	bge.n	21572 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21594:	b154      	cbz	r4, 215ac <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21596:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   2159a:	d004      	beq.n	215a6 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2159c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   215a0:	b10b      	cbz	r3, 215a6 <bt_att_send+0x86>
   215a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   215a6:	4620      	mov	r0, r4
   215a8:	461c      	mov	r4, r3
   215aa:	e7ed      	b.n	21588 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   215ac:	4629      	mov	r1, r5
   215ae:	4630      	mov	r0, r6
   215b0:	f001 fa32 	bl	22a18 <k_queue_prepend>
   215b4:	e7dd      	b.n	21572 <bt_att_send+0x52>

000215b6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   215b6:	b510      	push	{r4, lr}
   215b8:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   215ba:	f7f5 fcb1 	bl	16f20 <att_get>
	if (!att) {
   215be:	b160      	cbz	r0, 215da <bt_att_req_send+0x24>
	parent->next = child;
   215c0:	2300      	movs	r3, #0
   215c2:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   215c4:	6883      	ldr	r3, [r0, #8]
   215c6:	b92b      	cbnz	r3, 215d4 <bt_att_req_send+0x1e>
	list->head = node;
   215c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   215cc:	f7ff fe38 	bl	21240 <att_req_send_process>

	return 0;
   215d0:	2000      	movs	r0, #0
}
   215d2:	bd10      	pop	{r4, pc}
	parent->next = child;
   215d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   215d6:	6084      	str	r4, [r0, #8]
}
   215d8:	e7f8      	b.n	215cc <bt_att_req_send+0x16>
		return -ENOTCONN;
   215da:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   215de:	e7f8      	b.n	215d2 <bt_att_req_send+0x1c>

000215e0 <gatt_ccc_changed>:
{
   215e0:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   215e2:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   215e4:	895a      	ldrh	r2, [r3, #10]
   215e6:	428a      	cmp	r2, r1
   215e8:	d003      	beq.n	215f2 <gatt_ccc_changed+0x12>
		ccc->value = value;
   215ea:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   215ec:	68db      	ldr	r3, [r3, #12]
   215ee:	b103      	cbz	r3, 215f2 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   215f0:	4718      	bx	r3
}
   215f2:	4770      	bx	lr

000215f4 <gatt_indicate_rsp>:
{
   215f4:	b510      	push	{r4, lr}
   215f6:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   215f8:	68a3      	ldr	r3, [r4, #8]
{
   215fa:	460a      	mov	r2, r1
	if (params->func) {
   215fc:	b10b      	cbz	r3, 21602 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   215fe:	4621      	mov	r1, r4
   21600:	4798      	blx	r3
	params->_ref--;
   21602:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21604:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21606:	3b01      	subs	r3, #1
   21608:	b2db      	uxtb	r3, r3
   2160a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2160c:	b122      	cbz	r2, 21618 <gatt_indicate_rsp+0x24>
   2160e:	b91b      	cbnz	r3, 21618 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21610:	4620      	mov	r0, r4
}
   21612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21616:	4710      	bx	r2
}
   21618:	bd10      	pop	{r4, pc}

0002161a <match_uuid>:
	data->attr = attr;
   2161a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2161c:	8091      	strh	r1, [r2, #4]
}
   2161e:	2000      	movs	r0, #0
   21620:	4770      	bx	lr

00021622 <ccc_set_cb>:
}
   21622:	2000      	movs	r0, #0
   21624:	4770      	bx	lr

00021626 <atomic_get>:
   21626:	f3bf 8f5b 	dmb	ish
   2162a:	6800      	ldr	r0, [r0, #0]
   2162c:	f3bf 8f5b 	dmb	ish
}
   21630:	4770      	bx	lr

00021632 <gen_hash_m>:
{
   21632:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21634:	6807      	ldr	r7, [r0, #0]
   21636:	783d      	ldrb	r5, [r7, #0]
{
   21638:	b089      	sub	sp, #36	; 0x24
   2163a:	4606      	mov	r6, r0
   2163c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2163e:	b10d      	cbz	r5, 21644 <gen_hash_m+0x12>
	switch (u16->val) {
   21640:	2501      	movs	r5, #1
   21642:	e014      	b.n	2166e <gen_hash_m+0x3c>
   21644:	887b      	ldrh	r3, [r7, #2]
   21646:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2164a:	d004      	beq.n	21656 <gen_hash_m+0x24>
   2164c:	d812      	bhi.n	21674 <gen_hash_m+0x42>
   2164e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   21652:	2b03      	cmp	r3, #3
   21654:	d8f4      	bhi.n	21640 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21656:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2165a:	2202      	movs	r2, #2
   2165c:	f10d 010e 	add.w	r1, sp, #14
   21660:	4620      	mov	r0, r4
   21662:	f7fe fc6a 	bl	1ff3a <tc_cmac_update>
   21666:	b9e0      	cbnz	r0, 216a2 <gen_hash_m+0x70>
			state->err = -EINVAL;
   21668:	f06f 0315 	mvn.w	r3, #21
   2166c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2166e:	4628      	mov	r0, r5
   21670:	b009      	add	sp, #36	; 0x24
   21672:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   21674:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21678:	33ff      	adds	r3, #255	; 0xff
   2167a:	b29b      	uxth	r3, r3
   2167c:	2b04      	cmp	r3, #4
   2167e:	d8df      	bhi.n	21640 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21680:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21684:	2202      	movs	r2, #2
   21686:	f10d 010e 	add.w	r1, sp, #14
   2168a:	4620      	mov	r0, r4
   2168c:	f7fe fc55 	bl	1ff3a <tc_cmac_update>
   21690:	2800      	cmp	r0, #0
   21692:	d0e9      	beq.n	21668 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   21694:	887b      	ldrh	r3, [r7, #2]
   21696:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2169a:	2202      	movs	r2, #2
   2169c:	f10d 010e 	add.w	r1, sp, #14
   216a0:	e017      	b.n	216d2 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   216a2:	887b      	ldrh	r3, [r7, #2]
   216a4:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   216a8:	2202      	movs	r2, #2
   216aa:	f10d 010e 	add.w	r1, sp, #14
   216ae:	4620      	mov	r0, r4
   216b0:	f7fe fc43 	bl	1ff3a <tc_cmac_update>
   216b4:	2800      	cmp	r0, #0
   216b6:	d0d7      	beq.n	21668 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   216b8:	2000      	movs	r0, #0
   216ba:	2310      	movs	r3, #16
   216bc:	eb0d 0203 	add.w	r2, sp, r3
   216c0:	6877      	ldr	r7, [r6, #4]
   216c2:	9000      	str	r0, [sp, #0]
   216c4:	4631      	mov	r1, r6
   216c6:	47b8      	blx	r7
		if (len < 0) {
   216c8:	1e02      	subs	r2, r0, #0
   216ca:	da01      	bge.n	216d0 <gen_hash_m+0x9e>
			state->err = len;
   216cc:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   216ce:	e7ce      	b.n	2166e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   216d0:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   216d2:	4620      	mov	r0, r4
   216d4:	f7fe fc31 	bl	1ff3a <tc_cmac_update>
   216d8:	2800      	cmp	r0, #0
   216da:	d1b1      	bne.n	21640 <gen_hash_m+0xe>
   216dc:	e7c4      	b.n	21668 <gen_hash_m+0x36>

000216de <atomic_or>:
{
   216de:	4603      	mov	r3, r0
}
   216e0:	f3bf 8f5b 	dmb	ish
   216e4:	e853 0f00 	ldrex	r0, [r3]
   216e8:	ea40 0201 	orr.w	r2, r0, r1
   216ec:	e843 2c00 	strex	ip, r2, [r3]
   216f0:	f1bc 0f00 	cmp.w	ip, #0
   216f4:	d1f6      	bne.n	216e4 <atomic_or+0x6>
   216f6:	f3bf 8f5b 	dmb	ish
   216fa:	4770      	bx	lr

000216fc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   216fc:	2207      	movs	r2, #7
   216fe:	f7fe bd9a 	b.w	20236 <memcpy>

00021702 <clear_ccc_cfg>:
{
   21702:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21704:	2500      	movs	r5, #0
{
   21706:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21708:	4669      	mov	r1, sp
   2170a:	3001      	adds	r0, #1
   2170c:	9500      	str	r5, [sp, #0]
   2170e:	f8cd 5003 	str.w	r5, [sp, #3]
   21712:	f7ff fff3 	bl	216fc <bt_addr_le_copy>
	cfg->id = 0U;
   21716:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   21718:	8125      	strh	r5, [r4, #8]
}
   2171a:	b003      	add	sp, #12
   2171c:	bd30      	pop	{r4, r5, pc}

0002171e <atomic_and>:
{
   2171e:	4603      	mov	r3, r0
}
   21720:	f3bf 8f5b 	dmb	ish
   21724:	e853 0f00 	ldrex	r0, [r3]
   21728:	ea00 0201 	and.w	r2, r0, r1
   2172c:	e843 2c00 	strex	ip, r2, [r3]
   21730:	f1bc 0f00 	cmp.w	ip, #0
   21734:	d1f6      	bne.n	21724 <atomic_and+0x6>
   21736:	f3bf 8f5b 	dmb	ish
   2173a:	4770      	bx	lr

0002173c <clear_cf_cfg>:
{
   2173c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2173e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21740:	2500      	movs	r5, #0
   21742:	4669      	mov	r1, sp
   21744:	3001      	adds	r0, #1
   21746:	9500      	str	r5, [sp, #0]
   21748:	f8cd 5003 	str.w	r5, [sp, #3]
   2174c:	f7ff ffd6 	bl	216fc <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   21750:	f104 0008 	add.w	r0, r4, #8
   21754:	2201      	movs	r2, #1
   21756:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21758:	340c      	adds	r4, #12
   2175a:	f7fe fd97 	bl	2028c <memset>
   2175e:	f3bf 8f5b 	dmb	ish
   21762:	e854 3f00 	ldrex	r3, [r4]
   21766:	e844 5200 	strex	r2, r5, [r4]
   2176a:	2a00      	cmp	r2, #0
   2176c:	d1f9      	bne.n	21762 <clear_cf_cfg+0x26>
   2176e:	f3bf 8f5b 	dmb	ish
}
   21772:	b003      	add	sp, #12
   21774:	bd30      	pop	{r4, r5, pc}

00021776 <ccc_find_cfg>:
{
   21776:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   21778:	7803      	ldrb	r3, [r0, #0]
   2177a:	4293      	cmp	r3, r2
{
   2177c:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2177e:	d001      	beq.n	21784 <ccc_find_cfg+0xe>
	return NULL;
   21780:	2000      	movs	r0, #0
}
   21782:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   21784:	2207      	movs	r2, #7
   21786:	3001      	adds	r0, #1
   21788:	f7fe fd45 	bl	20216 <memcmp>
		if (id == ccc->cfg[i].id &&
   2178c:	2800      	cmp	r0, #0
   2178e:	d1f7      	bne.n	21780 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   21790:	4620      	mov	r0, r4
   21792:	e7f6      	b.n	21782 <ccc_find_cfg+0xc>

00021794 <find_ccc_cfg>:
{
   21794:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21796:	460c      	mov	r4, r1
   21798:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2179a:	b148      	cbz	r0, 217b0 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2179c:	7809      	ldrb	r1, [r1, #0]
   2179e:	462a      	mov	r2, r5
   217a0:	f7ff fa00 	bl	20ba4 <bt_conn_is_peer_addr_le>
   217a4:	2800      	cmp	r0, #0
	return NULL;
   217a6:	bf08      	it	eq
   217a8:	2400      	moveq	r4, #0
}
   217aa:	4620      	mov	r0, r4
   217ac:	b003      	add	sp, #12
   217ae:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   217b0:	9000      	str	r0, [sp, #0]
   217b2:	2207      	movs	r2, #7
   217b4:	f8cd 0003 	str.w	r0, [sp, #3]
   217b8:	4669      	mov	r1, sp
   217ba:	4628      	mov	r0, r5
   217bc:	f7fe fd2b 	bl	20216 <memcmp>
   217c0:	2800      	cmp	r0, #0
	return NULL;
   217c2:	bf18      	it	ne
   217c4:	2400      	movne	r4, #0
   217c6:	e7f0      	b.n	217aa <find_ccc_cfg+0x16>

000217c8 <sc_restore_rsp>:
{
   217c8:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   217ca:	f7f6 fbbd 	bl	17f48 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   217ce:	b140      	cbz	r0, 217e2 <sc_restore_rsp+0x1a>
   217d0:	7a03      	ldrb	r3, [r0, #8]
   217d2:	07db      	lsls	r3, r3, #31
   217d4:	d505      	bpl.n	217e2 <sc_restore_rsp+0x1a>
}
   217d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   217da:	2101      	movs	r1, #1
   217dc:	300c      	adds	r0, #12
   217de:	f7ff bf7e 	b.w	216de <atomic_or>
   217e2:	bd08      	pop	{r3, pc}

000217e4 <read_appearance>:
{
   217e4:	b513      	push	{r0, r1, r4, lr}
   217e6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   217ea:	4610      	mov	r0, r2
	if (offset > value_len) {
   217ec:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   217ee:	f240 3241 	movw	r2, #833	; 0x341
   217f2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   217f6:	d80d      	bhi.n	21814 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   217f8:	f1c1 0402 	rsb	r4, r1, #2
   217fc:	429c      	cmp	r4, r3
   217fe:	bfa8      	it	ge
   21800:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   21802:	f10d 0306 	add.w	r3, sp, #6
   21806:	4622      	mov	r2, r4
   21808:	4419      	add	r1, r3
   2180a:	f7fe fd14 	bl	20236 <memcpy>
}
   2180e:	4620      	mov	r0, r4
   21810:	b002      	add	sp, #8
   21812:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21814:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21818:	e7f9      	b.n	2180e <read_appearance+0x2a>

0002181a <read_name>:
{
   2181a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2181e:	4698      	mov	r8, r3
   21820:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   21824:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   21826:	f7f3 fabd 	bl	14da4 <bt_get_name>
   2182a:	4607      	mov	r7, r0
				 strlen(name));
   2182c:	f7fe fcc8 	bl	201c0 <strlen>
	if (offset > value_len) {
   21830:	b283      	uxth	r3, r0
   21832:	42b3      	cmp	r3, r6
   21834:	d30c      	bcc.n	21850 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   21836:	1b9c      	subs	r4, r3, r6
   21838:	4544      	cmp	r4, r8
   2183a:	bfa8      	it	ge
   2183c:	4644      	movge	r4, r8
   2183e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   21840:	4622      	mov	r2, r4
   21842:	19b9      	adds	r1, r7, r6
   21844:	4628      	mov	r0, r5
   21846:	f7fe fcf6 	bl	20236 <memcpy>
}
   2184a:	4620      	mov	r0, r4
   2184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21850:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21854:	e7f9      	b.n	2184a <read_name+0x30>

00021856 <bt_gatt_attr_read_ccc>:
{
   21856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   21858:	68c9      	ldr	r1, [r1, #12]
{
   2185a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2185e:	4615      	mov	r5, r2
   21860:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   21862:	f7ff ff97 	bl	21794 <find_ccc_cfg>
	if (cfg) {
   21866:	b100      	cbz	r0, 2186a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   21868:	8900      	ldrh	r0, [r0, #8]
   2186a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2186e:	2e02      	cmp	r6, #2
   21870:	d80e      	bhi.n	21890 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   21872:	f1c6 0402 	rsb	r4, r6, #2
   21876:	42bc      	cmp	r4, r7
   21878:	bfa8      	it	ge
   2187a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2187c:	f10d 0306 	add.w	r3, sp, #6
   21880:	4622      	mov	r2, r4
   21882:	1999      	adds	r1, r3, r6
   21884:	4628      	mov	r0, r5
   21886:	f7fe fcd6 	bl	20236 <memcpy>
}
   2188a:	4620      	mov	r0, r4
   2188c:	b003      	add	sp, #12
   2188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21890:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21894:	e7f9      	b.n	2188a <bt_gatt_attr_read_ccc+0x34>

00021896 <cf_read>:
{
   21896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21898:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2189a:	2300      	movs	r3, #0
{
   2189c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   218a0:	f88d 3004 	strb.w	r3, [sp, #4]
{
   218a4:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   218a6:	f7f6 fb4f 	bl	17f48 <find_cf_cfg>
	if (cfg) {
   218aa:	b128      	cbz	r0, 218b8 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   218ac:	f100 0108 	add.w	r1, r0, #8
   218b0:	2201      	movs	r2, #1
   218b2:	a801      	add	r0, sp, #4
   218b4:	f7fe fcbf 	bl	20236 <memcpy>
	if (offset > value_len) {
   218b8:	2e01      	cmp	r6, #1
   218ba:	d80d      	bhi.n	218d8 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   218bc:	f1c6 0401 	rsb	r4, r6, #1
   218c0:	42bc      	cmp	r4, r7
   218c2:	bfa8      	it	ge
   218c4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   218c6:	ab01      	add	r3, sp, #4
   218c8:	4622      	mov	r2, r4
   218ca:	1999      	adds	r1, r3, r6
   218cc:	4628      	mov	r0, r5
   218ce:	f7fe fcb2 	bl	20236 <memcpy>
}
   218d2:	4620      	mov	r0, r4
   218d4:	b003      	add	sp, #12
   218d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   218d8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   218dc:	e7f9      	b.n	218d2 <cf_read+0x3c>

000218de <bt_gatt_attr_read_service>:
{
   218de:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   218e0:	68c9      	ldr	r1, [r1, #12]
{
   218e2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   218e6:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   218e8:	780b      	ldrb	r3, [r1, #0]
{
   218ea:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   218ec:	b993      	cbnz	r3, 21914 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   218ee:	884b      	ldrh	r3, [r1, #2]
   218f0:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   218f4:	2d02      	cmp	r5, #2
   218f6:	d819      	bhi.n	2192c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   218f8:	f1c5 0202 	rsb	r2, r5, #2
   218fc:	4294      	cmp	r4, r2
   218fe:	bfa8      	it	ge
   21900:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21902:	f10d 0306 	add.w	r3, sp, #6
   21906:	4622      	mov	r2, r4
   21908:	1959      	adds	r1, r3, r5
   2190a:	f7fe fc94 	bl	20236 <memcpy>
}
   2190e:	4620      	mov	r0, r4
   21910:	b003      	add	sp, #12
   21912:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   21914:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   21916:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2191a:	d807      	bhi.n	2192c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2191c:	f1c5 0210 	rsb	r2, r5, #16
   21920:	4294      	cmp	r4, r2
   21922:	bfa8      	it	ge
   21924:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21926:	4622      	mov	r2, r4
   21928:	4429      	add	r1, r5
   2192a:	e7ee      	b.n	2190a <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2192c:	f06f 0406 	mvn.w	r4, #6
   21930:	e7ed      	b.n	2190e <bt_gatt_attr_read_service+0x30>

00021932 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   21932:	2a02      	cmp	r2, #2
{
   21934:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21936:	d108      	bne.n	2194a <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   21938:	2300      	movs	r3, #0
   2193a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2193e:	461a      	mov	r2, r3
   21940:	7a00      	ldrb	r0, [r0, #8]
   21942:	f7f6 fa17 	bl	17d74 <sc_save>
}
   21946:	2002      	movs	r0, #2
   21948:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2194a:	f7f6 fc79 	bl	18240 <sc_clear>
   2194e:	e7fa      	b.n	21946 <sc_ccc_cfg_write+0x14>

00021950 <bt_gatt_attr_read>:
{
   21950:	b538      	push	{r3, r4, r5, lr}
   21952:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21956:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2195a:	42a9      	cmp	r1, r5
{
   2195c:	4610      	mov	r0, r2
	if (offset > value_len) {
   2195e:	d80b      	bhi.n	21978 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   21960:	1a6d      	subs	r5, r5, r1
   21962:	429d      	cmp	r5, r3
   21964:	bfa8      	it	ge
   21966:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   21968:	9b05      	ldr	r3, [sp, #20]
   2196a:	b2ad      	uxth	r5, r5
   2196c:	462a      	mov	r2, r5
   2196e:	4419      	add	r1, r3
   21970:	f7fe fc61 	bl	20236 <memcpy>
}
   21974:	4628      	mov	r0, r5
   21976:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21978:	f06f 0506 	mvn.w	r5, #6
   2197c:	e7fa      	b.n	21974 <bt_gatt_attr_read+0x24>

0002197e <bt_gatt_attr_value_handle>:
{
   2197e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   21980:	4604      	mov	r4, r0
   21982:	b910      	cbnz	r0, 2198a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   21984:	2000      	movs	r0, #0
}
   21986:	b002      	add	sp, #8
   21988:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2198a:	2300      	movs	r3, #0
   2198c:	f88d 3004 	strb.w	r3, [sp, #4]
   21990:	6800      	ldr	r0, [r0, #0]
   21992:	f642 0303 	movw	r3, #10243	; 0x2803
   21996:	a901      	add	r1, sp, #4
   21998:	f8ad 3006 	strh.w	r3, [sp, #6]
   2199c:	f7fe fd4f 	bl	2043e <bt_uuid_cmp>
   219a0:	2800      	cmp	r0, #0
   219a2:	d1ef      	bne.n	21984 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   219a4:	68e3      	ldr	r3, [r4, #12]
   219a6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   219a8:	2800      	cmp	r0, #0
   219aa:	d1ec      	bne.n	21986 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   219ac:	4620      	mov	r0, r4
   219ae:	f7f6 fd0f 	bl	183d0 <bt_gatt_attr_get_handle>
   219b2:	3001      	adds	r0, #1
   219b4:	b280      	uxth	r0, r0
	return handle;
   219b6:	e7e6      	b.n	21986 <bt_gatt_attr_value_handle+0x8>

000219b8 <bt_gatt_attr_read_chrc>:
{
   219b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   219ba:	68cf      	ldr	r7, [r1, #12]
{
   219bc:	b087      	sub	sp, #28
   219be:	4608      	mov	r0, r1
   219c0:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   219c2:	79bb      	ldrb	r3, [r7, #6]
   219c4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   219c8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   219cc:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   219ce:	f7ff ffd6 	bl	2197e <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   219d2:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   219d4:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   219d8:	780b      	ldrb	r3, [r1, #0]
   219da:	b99b      	cbnz	r3, 21a04 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   219dc:	884b      	ldrh	r3, [r1, #2]
   219de:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   219e2:	2105      	movs	r1, #5
	if (offset > value_len) {
   219e4:	42b1      	cmp	r1, r6
   219e6:	d315      	bcc.n	21a14 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   219e8:	1b89      	subs	r1, r1, r6
   219ea:	42a1      	cmp	r1, r4
   219ec:	bfa8      	it	ge
   219ee:	4621      	movge	r1, r4
   219f0:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   219f2:	ab01      	add	r3, sp, #4
   219f4:	4622      	mov	r2, r4
   219f6:	1999      	adds	r1, r3, r6
   219f8:	4628      	mov	r0, r5
   219fa:	f7fe fc1c 	bl	20236 <memcpy>
}
   219fe:	4620      	mov	r0, r4
   21a00:	b007      	add	sp, #28
   21a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   21a04:	3101      	adds	r1, #1
   21a06:	2210      	movs	r2, #16
   21a08:	f10d 0007 	add.w	r0, sp, #7
   21a0c:	f7fe fc13 	bl	20236 <memcpy>
		value_len += 16U;
   21a10:	2113      	movs	r1, #19
   21a12:	e7e7      	b.n	219e4 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21a14:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   21a18:	e7f1      	b.n	219fe <bt_gatt_attr_read_chrc+0x46>

00021a1a <bt_gatt_foreach_attr>:
{
   21a1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21a1c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21a20:	2300      	movs	r3, #0
   21a22:	9300      	str	r3, [sp, #0]
   21a24:	461a      	mov	r2, r3
   21a26:	f7f6 fd03 	bl	18430 <bt_gatt_foreach_attr_type>
}
   21a2a:	b005      	add	sp, #20
   21a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00021a30 <bt_gatt_check_perm>:
{
   21a30:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   21a32:	07d4      	lsls	r4, r2, #31
{
   21a34:	4605      	mov	r5, r0
   21a36:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   21a38:	d504      	bpl.n	21a44 <bt_gatt_check_perm+0x14>
   21a3a:	f010 0f15 	tst.w	r0, #21
   21a3e:	d01e      	beq.n	21a7e <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   21a40:	684b      	ldr	r3, [r1, #4]
   21a42:	b1e3      	cbz	r3, 21a7e <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   21a44:	0793      	lsls	r3, r2, #30
   21a46:	d504      	bpl.n	21a52 <bt_gatt_check_perm+0x22>
   21a48:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   21a4c:	d019      	beq.n	21a82 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   21a4e:	688b      	ldr	r3, [r1, #8]
   21a50:	b1bb      	cbz	r3, 21a82 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   21a52:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   21a56:	f014 0f30 	tst.w	r4, #48	; 0x30
   21a5a:	d103      	bne.n	21a64 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   21a5c:	f014 000c 	ands.w	r0, r4, #12
   21a60:	d107      	bne.n	21a72 <bt_gatt_check_perm+0x42>
}
   21a62:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   21a64:	4628      	mov	r0, r5
   21a66:	f7ff f86b 	bl	20b40 <bt_conn_get_security>
   21a6a:	2802      	cmp	r0, #2
   21a6c:	d8f6      	bhi.n	21a5c <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   21a6e:	2005      	movs	r0, #5
   21a70:	e7f7      	b.n	21a62 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   21a72:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   21a74:	2b00      	cmp	r3, #0
   21a76:	bf14      	ite	ne
   21a78:	2000      	movne	r0, #0
   21a7a:	200f      	moveq	r0, #15
   21a7c:	e7f1      	b.n	21a62 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   21a7e:	2002      	movs	r0, #2
   21a80:	e7ef      	b.n	21a62 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   21a82:	2003      	movs	r0, #3
   21a84:	e7ed      	b.n	21a62 <bt_gatt_check_perm+0x32>

00021a86 <bt_gatt_change_aware>:
{
   21a86:	b538      	push	{r3, r4, r5, lr}
   21a88:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   21a8a:	f7f6 fa5d 	bl	17f48 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21a8e:	b910      	cbnz	r0, 21a96 <bt_gatt_change_aware+0x10>
		return true;
   21a90:	2501      	movs	r5, #1
}
   21a92:	4628      	mov	r0, r5
   21a94:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21a96:	7a03      	ldrb	r3, [r0, #8]
   21a98:	07d9      	lsls	r1, r3, #31
   21a9a:	d5f9      	bpl.n	21a90 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   21a9c:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   21aa0:	4620      	mov	r0, r4
   21aa2:	f7ff fdc0 	bl	21626 <atomic_get>
   21aa6:	07c2      	lsls	r2, r0, #31
   21aa8:	d4f2      	bmi.n	21a90 <bt_gatt_change_aware+0xa>
	if (!req) {
   21aaa:	2d00      	cmp	r5, #0
   21aac:	d0f1      	beq.n	21a92 <bt_gatt_change_aware+0xc>
   21aae:	4620      	mov	r0, r4
   21ab0:	f7ff fdb9 	bl	21626 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   21ab4:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21ab6:	f3c0 0540 	ubfx	r5, r0, #1, #1
   21aba:	d509      	bpl.n	21ad0 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21abc:	f06f 0102 	mvn.w	r1, #2
   21ac0:	4620      	mov	r0, r4
   21ac2:	f7ff fe2c 	bl	2171e <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   21ac6:	2101      	movs	r1, #1
   21ac8:	4620      	mov	r0, r4
   21aca:	f7ff fe08 	bl	216de <atomic_or>
}
   21ace:	e7e0      	b.n	21a92 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   21ad0:	2102      	movs	r1, #2
   21ad2:	e7f9      	b.n	21ac8 <bt_gatt_change_aware+0x42>

00021ad4 <sys_memcpy_swap>:
	psrc += length - 1;
   21ad4:	1e53      	subs	r3, r2, #1
   21ad6:	4419      	add	r1, r3
	for (; length > 0; length--) {
   21ad8:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   21ada:	f811 3901 	ldrb.w	r3, [r1], #-1
   21ade:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   21ae2:	4290      	cmp	r0, r2
   21ae4:	d1f9      	bne.n	21ada <sys_memcpy_swap+0x6>
}
   21ae6:	4770      	bx	lr

00021ae8 <smp_pairing_rsp>:
}
   21ae8:	2007      	movs	r0, #7
   21aea:	4770      	bx	lr

00021aec <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21aec:	2301      	movs	r3, #1
   21aee:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21af0:	f3bf 8f5b 	dmb	ish
   21af4:	e850 2f00 	ldrex	r2, [r0]
   21af8:	431a      	orrs	r2, r3
   21afa:	e840 2100 	strex	r1, r2, [r0]
   21afe:	2900      	cmp	r1, #0
   21b00:	d1f8      	bne.n	21af4 <atomic_set_bit+0x8>
   21b02:	f3bf 8f5b 	dmb	ish
}
   21b06:	4770      	bx	lr

00021b08 <smp_keypress_notif>:
{
   21b08:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   21b0a:	210e      	movs	r1, #14
   21b0c:	f7ff ffee 	bl	21aec <atomic_set_bit>
}
   21b10:	2000      	movs	r0, #0
   21b12:	bd08      	pop	{r3, pc}

00021b14 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21b14:	2301      	movs	r3, #1
   21b16:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21b18:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21b1a:	f3bf 8f5b 	dmb	ish
   21b1e:	e850 2f00 	ldrex	r2, [r0]
   21b22:	401a      	ands	r2, r3
   21b24:	e840 2100 	strex	r1, r2, [r0]
   21b28:	2900      	cmp	r1, #0
   21b2a:	d1f8      	bne.n	21b1e <atomic_clear_bit+0xa>
   21b2c:	f3bf 8f5b 	dmb	ish
}
   21b30:	4770      	bx	lr

00021b32 <bt_smp_aes_cmac>:
{
   21b32:	b570      	push	{r4, r5, r6, lr}
   21b34:	b0c2      	sub	sp, #264	; 0x108
   21b36:	460d      	mov	r5, r1
   21b38:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21b3a:	4601      	mov	r1, r0
   21b3c:	aa16      	add	r2, sp, #88	; 0x58
   21b3e:	4668      	mov	r0, sp
{
   21b40:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21b42:	f7fe f9cf 	bl	1fee4 <tc_cmac_setup>
   21b46:	b150      	cbz	r0, 21b5e <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   21b48:	4632      	mov	r2, r6
   21b4a:	4629      	mov	r1, r5
   21b4c:	4668      	mov	r0, sp
   21b4e:	f7fe f9f4 	bl	1ff3a <tc_cmac_update>
   21b52:	b120      	cbz	r0, 21b5e <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   21b54:	4669      	mov	r1, sp
   21b56:	4620      	mov	r0, r4
   21b58:	f7fe fa5b 	bl	20012 <tc_cmac_final>
   21b5c:	b918      	cbnz	r0, 21b66 <bt_smp_aes_cmac+0x34>
		return -EIO;
   21b5e:	f06f 0004 	mvn.w	r0, #4
}
   21b62:	b042      	add	sp, #264	; 0x108
   21b64:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   21b66:	2000      	movs	r0, #0
   21b68:	e7fb      	b.n	21b62 <bt_smp_aes_cmac+0x30>

00021b6a <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   21b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21b6c:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   21b6e:	2200      	movs	r2, #0
   21b70:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   21b72:	4604      	mov	r4, r0
   21b74:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   21b76:	460a      	mov	r2, r1
   21b78:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   21b7c:	2106      	movs	r1, #6
   21b7e:	f7ff f941 	bl	20e04 <bt_l2cap_send_cb>
   21b82:	b128      	cbz	r0, 21b90 <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   21b84:	4628      	mov	r0, r5
}
   21b86:	b003      	add	sp, #12
   21b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   21b8c:	f7f9 b846 	b.w	1ac1c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   21b90:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21b94:	2300      	movs	r3, #0
   21b96:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   21b9a:	b003      	add	sp, #12
   21b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   21ba0:	f7fb b99e 	b.w	1cee0 <k_work_reschedule>

00021ba4 <smp_security_request>:
   21ba4:	2007      	movs	r0, #7
   21ba6:	4770      	bx	lr

00021ba8 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   21ba8:	b510      	push	{r4, lr}
   21baa:	1e43      	subs	r3, r0, #1
   21bac:	f100 0210 	add.w	r2, r0, #16
   21bb0:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   21bb2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   21bb6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21bba:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   21bbc:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   21bbe:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   21bc0:	d1f7      	bne.n	21bb2 <sys_mem_swap.constprop.0+0xa>
	}
}
   21bc2:	bd10      	pop	{r4, pc}

00021bc4 <smp_f6>:
{
   21bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bc6:	b097      	sub	sp, #92	; 0x5c
   21bc8:	4605      	mov	r5, r0
   21bca:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   21bcc:	a805      	add	r0, sp, #20
   21bce:	2210      	movs	r2, #16
{
   21bd0:	461c      	mov	r4, r3
   21bd2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   21bd4:	f7ff ff7e 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   21bd8:	2210      	movs	r2, #16
   21bda:	4631      	mov	r1, r6
   21bdc:	a809      	add	r0, sp, #36	; 0x24
   21bde:	f7ff ff79 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   21be2:	4621      	mov	r1, r4
   21be4:	2210      	movs	r2, #16
   21be6:	a80d      	add	r0, sp, #52	; 0x34
   21be8:	f7ff ff74 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   21bec:	991c      	ldr	r1, [sp, #112]	; 0x70
   21bee:	2203      	movs	r2, #3
   21bf0:	a811      	add	r0, sp, #68	; 0x44
   21bf2:	f7ff ff6f 	bl	21ad4 <sys_memcpy_swap>
	m[51] = a1->type;
   21bf6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   21bf8:	f814 3b01 	ldrb.w	r3, [r4], #1
   21bfc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   21c00:	4621      	mov	r1, r4
   21c02:	2206      	movs	r2, #6
   21c04:	a812      	add	r0, sp, #72	; 0x48
   21c06:	f7fe fb16 	bl	20236 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   21c0a:	4621      	mov	r1, r4
   21c0c:	2206      	movs	r2, #6
   21c0e:	a812      	add	r0, sp, #72	; 0x48
   21c10:	f7ff ff60 	bl	21ad4 <sys_memcpy_swap>
	m[58] = a2->type;
   21c14:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   21c16:	f814 3b01 	ldrb.w	r3, [r4], #1
   21c1a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   21c1e:	4621      	mov	r1, r4
   21c20:	2206      	movs	r2, #6
   21c22:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21c26:	f7fe fb06 	bl	20236 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   21c2a:	4621      	mov	r1, r4
   21c2c:	2206      	movs	r2, #6
   21c2e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21c32:	f7ff ff4f 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   21c36:	2210      	movs	r2, #16
   21c38:	4629      	mov	r1, r5
   21c3a:	a801      	add	r0, sp, #4
   21c3c:	f7ff ff4a 	bl	21ad4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   21c40:	463b      	mov	r3, r7
   21c42:	2241      	movs	r2, #65	; 0x41
   21c44:	a905      	add	r1, sp, #20
   21c46:	a801      	add	r0, sp, #4
   21c48:	f7ff ff73 	bl	21b32 <bt_smp_aes_cmac>
	if (err) {
   21c4c:	4604      	mov	r4, r0
   21c4e:	b910      	cbnz	r0, 21c56 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   21c50:	4638      	mov	r0, r7
   21c52:	f7ff ffa9 	bl	21ba8 <sys_mem_swap.constprop.0>
}
   21c56:	4620      	mov	r0, r4
   21c58:	b017      	add	sp, #92	; 0x5c
   21c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021c5c <smp_f4>:
{
   21c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c5e:	b097      	sub	sp, #92	; 0x5c
   21c60:	4614      	mov	r4, r2
   21c62:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   21c64:	2220      	movs	r2, #32
   21c66:	4601      	mov	r1, r0
   21c68:	a805      	add	r0, sp, #20
{
   21c6a:	461d      	mov	r5, r3
   21c6c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   21c6e:	f7ff ff31 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   21c72:	2220      	movs	r2, #32
   21c74:	4631      	mov	r1, r6
   21c76:	a80d      	add	r0, sp, #52	; 0x34
   21c78:	f7ff ff2c 	bl	21ad4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   21c7c:	4621      	mov	r1, r4
   21c7e:	2210      	movs	r2, #16
   21c80:	a801      	add	r0, sp, #4
	m[64] = z;
   21c82:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   21c86:	f7ff ff25 	bl	21ad4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   21c8a:	463b      	mov	r3, r7
   21c8c:	2241      	movs	r2, #65	; 0x41
   21c8e:	a905      	add	r1, sp, #20
   21c90:	a801      	add	r0, sp, #4
   21c92:	f7ff ff4e 	bl	21b32 <bt_smp_aes_cmac>
	if (err) {
   21c96:	4604      	mov	r4, r0
   21c98:	b910      	cbnz	r0, 21ca0 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   21c9a:	4638      	mov	r0, r7
   21c9c:	f7ff ff84 	bl	21ba8 <sys_mem_swap.constprop.0>
}
   21ca0:	4620      	mov	r0, r4
   21ca2:	b017      	add	sp, #92	; 0x5c
   21ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021ca6 <smp_signing_info>:
   21ca6:	2007      	movs	r0, #7
   21ca8:	4770      	bx	lr

00021caa <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21caa:	f3bf 8f5b 	dmb	ish
   21cae:	6800      	ldr	r0, [r0, #0]
   21cb0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21cb4:	4108      	asrs	r0, r1
}
   21cb6:	f000 0001 	and.w	r0, r0, #1
   21cba:	4770      	bx	lr

00021cbc <update_keys_check>:
{
   21cbc:	b510      	push	{r4, lr}
   21cbe:	4603      	mov	r3, r0
	if (!keys ||
   21cc0:	b1d9      	cbz	r1, 21cfa <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   21cc2:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   21cc4:	f010 0f24 	tst.w	r0, #36	; 0x24
   21cc8:	d017      	beq.n	21cfa <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   21cca:	7d1a      	ldrb	r2, [r3, #20]
   21ccc:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   21cce:	7b09      	ldrb	r1, [r1, #12]
   21cd0:	42a2      	cmp	r2, r4
   21cd2:	bf28      	it	cs
   21cd4:	4622      	movcs	r2, r4
   21cd6:	4291      	cmp	r1, r2
   21cd8:	d901      	bls.n	21cde <update_keys_check+0x22>
		return false;
   21cda:	2000      	movs	r0, #0
}
   21cdc:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   21cde:	0682      	lsls	r2, r0, #26
   21ce0:	d404      	bmi.n	21cec <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   21ce2:	7a18      	ldrb	r0, [r3, #8]
   21ce4:	3800      	subs	r0, #0
   21ce6:	bf18      	it	ne
   21ce8:	2001      	movne	r0, #1
   21cea:	e7f7      	b.n	21cdc <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   21cec:	2105      	movs	r1, #5
   21cee:	1d18      	adds	r0, r3, #4
   21cf0:	f7ff ffdb 	bl	21caa <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   21cf4:	2800      	cmp	r0, #0
   21cf6:	d1f4      	bne.n	21ce2 <update_keys_check+0x26>
   21cf8:	e7ef      	b.n	21cda <update_keys_check+0x1e>
		return true;
   21cfa:	2001      	movs	r0, #1
   21cfc:	e7ee      	b.n	21cdc <update_keys_check+0x20>

00021cfe <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21cfe:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21d00:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21d02:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21d04:	4628      	mov	r0, r5
   21d06:	2104      	movs	r1, #4
   21d08:	f7ff ffcf 	bl	21caa <atomic_test_bit>
   21d0c:	b168      	cbz	r0, 21d2a <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   21d0e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   21d10:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   21d12:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   21d14:	4608      	mov	r0, r1
   21d16:	f7ff f872 	bl	20dfe <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   21d1a:	4604      	mov	r4, r0
   21d1c:	b940      	cbnz	r0, 21d30 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   21d1e:	2104      	movs	r1, #4
   21d20:	4628      	mov	r0, r5
   21d22:	f7ff fee3 	bl	21aec <atomic_set_bit>
}
   21d26:	4620      	mov	r0, r4
   21d28:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   21d2a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21d2e:	e7ef      	b.n	21d10 <smp_create_pdu.isra.0+0x12>
   21d30:	2101      	movs	r1, #1
   21d32:	3008      	adds	r0, #8
   21d34:	f000 fbac 	bl	22490 <net_buf_simple_add>
	hdr->code = op;
   21d38:	7006      	strb	r6, [r0, #0]
	return buf;
   21d3a:	e7f4      	b.n	21d26 <smp_create_pdu.isra.0+0x28>

00021d3c <smp_send_pairing_random>:
{
   21d3c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21d3e:	2104      	movs	r1, #4
{
   21d40:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21d42:	f7ff ffdc 	bl	21cfe <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   21d46:	4604      	mov	r4, r0
   21d48:	b178      	cbz	r0, 21d6a <smp_send_pairing_random+0x2e>
   21d4a:	2110      	movs	r1, #16
   21d4c:	3008      	adds	r0, #8
   21d4e:	f000 fb9f 	bl	22490 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   21d52:	2210      	movs	r2, #16
   21d54:	f105 0127 	add.w	r1, r5, #39	; 0x27
   21d58:	f7fe fa6d 	bl	20236 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   21d5c:	4628      	mov	r0, r5
   21d5e:	2200      	movs	r2, #0
   21d60:	4621      	mov	r1, r4
   21d62:	f7ff ff02 	bl	21b6a <smp_send.isra.0>
	return 0;
   21d66:	2000      	movs	r0, #0
}
   21d68:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   21d6a:	2008      	movs	r0, #8
   21d6c:	e7fc      	b.n	21d68 <smp_send_pairing_random+0x2c>

00021d6e <send_pairing_rsp>:
{
   21d6e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   21d70:	2102      	movs	r1, #2
{
   21d72:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   21d74:	f7ff ffc3 	bl	21cfe <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   21d78:	4604      	mov	r4, r0
   21d7a:	b178      	cbz	r0, 21d9c <send_pairing_rsp+0x2e>
   21d7c:	2106      	movs	r1, #6
   21d7e:	3008      	adds	r0, #8
   21d80:	f000 fb86 	bl	22490 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   21d84:	2206      	movs	r2, #6
   21d86:	f105 0111 	add.w	r1, r5, #17
   21d8a:	f7fe fa54 	bl	20236 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   21d8e:	4628      	mov	r0, r5
   21d90:	2200      	movs	r2, #0
   21d92:	4621      	mov	r1, r4
   21d94:	f7ff fee9 	bl	21b6a <smp_send.isra.0>
	return 0;
   21d98:	2000      	movs	r0, #0
}
   21d9a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   21d9c:	2008      	movs	r0, #8
   21d9e:	e7fc      	b.n	21d9a <send_pairing_rsp+0x2c>

00021da0 <smp_dhkey_check>:
{
   21da0:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   21da2:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   21da6:	78db      	ldrb	r3, [r3, #3]
   21da8:	2b01      	cmp	r3, #1
{
   21daa:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   21dac:	d114      	bne.n	21dd8 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   21dae:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   21db0:	1d05      	adds	r5, r0, #4
   21db2:	2110      	movs	r1, #16
   21db4:	4628      	mov	r0, r5
   21db6:	f7ff fead 	bl	21b14 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   21dba:	4631      	mov	r1, r6
   21dbc:	2210      	movs	r2, #16
   21dbe:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   21dc2:	f7fe fa38 	bl	20236 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   21dc6:	2107      	movs	r1, #7
   21dc8:	4628      	mov	r0, r5
   21dca:	f7ff ff6e 	bl	21caa <atomic_test_bit>
   21dce:	b128      	cbz	r0, 21ddc <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   21dd0:	2109      	movs	r1, #9
   21dd2:	4628      	mov	r0, r5
   21dd4:	f7ff fe8a 	bl	21aec <atomic_set_bit>
}
   21dd8:	2000      	movs	r0, #0
   21dda:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   21ddc:	210a      	movs	r1, #10
   21dde:	4628      	mov	r0, r5
   21de0:	f7ff ff63 	bl	21caa <atomic_test_bit>
   21de4:	2800      	cmp	r0, #0
   21de6:	d1f3      	bne.n	21dd0 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   21de8:	4620      	mov	r0, r4
}
   21dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   21dee:	f7f7 b9b5 	b.w	1915c <compute_and_check_and_send_slave_dhcheck>

00021df2 <atomic_test_and_clear_bit>:
{
   21df2:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   21df4:	2301      	movs	r3, #1
   21df6:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21dfa:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21dfc:	f3bf 8f5b 	dmb	ish
   21e00:	e850 3f00 	ldrex	r3, [r0]
   21e04:	ea03 0c02 	and.w	ip, r3, r2
   21e08:	e840 ce00 	strex	lr, ip, [r0]
   21e0c:	f1be 0f00 	cmp.w	lr, #0
   21e10:	d1f6      	bne.n	21e00 <atomic_test_and_clear_bit+0xe>
   21e12:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21e16:	420b      	tst	r3, r1
}
   21e18:	bf14      	ite	ne
   21e1a:	2001      	movne	r0, #1
   21e1c:	2000      	moveq	r0, #0
   21e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00021e22 <smp_reset>:
{
   21e22:	b538      	push	{r3, r4, r5, lr}
   21e24:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21e26:	1d03      	adds	r3, r0, #4
   21e28:	2500      	movs	r5, #0
   21e2a:	f3bf 8f5b 	dmb	ish
   21e2e:	e853 2f00 	ldrex	r2, [r3]
   21e32:	e843 5100 	strex	r1, r5, [r3]
   21e36:	2900      	cmp	r1, #0
   21e38:	d1f9      	bne.n	21e2e <smp_reset+0xc>
   21e3a:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   21e3e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   21e42:	f000 fed8 	bl	22bf6 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   21e46:	7225      	strb	r5, [r4, #8]
   21e48:	f3bf 8f5b 	dmb	ish
   21e4c:	e854 3f00 	ldrex	r3, [r4]
   21e50:	e844 5200 	strex	r2, r5, [r4]
   21e54:	2a00      	cmp	r2, #0
   21e56:	d1f9      	bne.n	21e4c <smp_reset+0x2a>
   21e58:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   21e5c:	4620      	mov	r0, r4
   21e5e:	2101      	movs	r1, #1
}
   21e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   21e64:	f7ff be42 	b.w	21aec <atomic_set_bit>

00021e68 <smp_c1>:
{
   21e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21e6c:	b089      	sub	sp, #36	; 0x24
   21e6e:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   21e72:	4699      	mov	r9, r3
	p1[0] = ia->type;
   21e74:	783b      	ldrb	r3, [r7, #0]
{
   21e76:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   21e78:	f88d 3000 	strb.w	r3, [sp]
{
   21e7c:	460c      	mov	r4, r1
	p1[1] = ra->type;
   21e7e:	f898 3000 	ldrb.w	r3, [r8]
   21e82:	f88d 3001 	strb.w	r3, [sp, #1]
{
   21e86:	4611      	mov	r1, r2
   21e88:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   21e8a:	2207      	movs	r2, #7
   21e8c:	f10d 0002 	add.w	r0, sp, #2
   21e90:	f7fe f9d1 	bl	20236 <memcpy>
	memcpy(p1 + 9, pres, 7);
   21e94:	2207      	movs	r2, #7
   21e96:	4649      	mov	r1, r9
   21e98:	f10d 0009 	add.w	r0, sp, #9
   21e9c:	f7fe f9cb 	bl	20236 <memcpy>
	while (len--) {
   21ea0:	f104 0010 	add.w	r0, r4, #16
   21ea4:	4629      	mov	r1, r5
   21ea6:	466a      	mov	r2, sp
   21ea8:	42a0      	cmp	r0, r4
   21eaa:	d127      	bne.n	21efc <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   21eac:	462a      	mov	r2, r5
   21eae:	4629      	mov	r1, r5
   21eb0:	4630      	mov	r0, r6
   21eb2:	f000 fbd9 	bl	22668 <bt_encrypt_le>
	if (err) {
   21eb6:	4604      	mov	r4, r0
   21eb8:	b9e0      	cbnz	r0, 21ef4 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   21eba:	2206      	movs	r2, #6
   21ebc:	f108 0101 	add.w	r1, r8, #1
   21ec0:	a804      	add	r0, sp, #16
   21ec2:	f7fe f9b8 	bl	20236 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   21ec6:	2206      	movs	r2, #6
   21ec8:	1c79      	adds	r1, r7, #1
   21eca:	f10d 0016 	add.w	r0, sp, #22
   21ece:	f7fe f9b2 	bl	20236 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   21ed2:	2204      	movs	r2, #4
   21ed4:	4621      	mov	r1, r4
   21ed6:	a807      	add	r0, sp, #28
   21ed8:	f7fe f9d8 	bl	2028c <memset>
	while (len--) {
   21edc:	f105 0010 	add.w	r0, r5, #16
   21ee0:	462a      	mov	r2, r5
   21ee2:	ab04      	add	r3, sp, #16
   21ee4:	4282      	cmp	r2, r0
   21ee6:	d112      	bne.n	21f0e <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   21ee8:	462a      	mov	r2, r5
   21eea:	4629      	mov	r1, r5
   21eec:	4630      	mov	r0, r6
   21eee:	f000 fbbb 	bl	22668 <bt_encrypt_le>
   21ef2:	4604      	mov	r4, r0
}
   21ef4:	4620      	mov	r0, r4
   21ef6:	b009      	add	sp, #36	; 0x24
   21ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   21efc:	f814 3b01 	ldrb.w	r3, [r4], #1
   21f00:	f812 cb01 	ldrb.w	ip, [r2], #1
   21f04:	ea83 030c 	eor.w	r3, r3, ip
   21f08:	f801 3b01 	strb.w	r3, [r1], #1
   21f0c:	e7cc      	b.n	21ea8 <smp_c1+0x40>
   21f0e:	f812 1b01 	ldrb.w	r1, [r2], #1
   21f12:	f813 4b01 	ldrb.w	r4, [r3], #1
   21f16:	4061      	eors	r1, r4
   21f18:	f802 1c01 	strb.w	r1, [r2, #-1]
   21f1c:	e7e2      	b.n	21ee4 <smp_c1+0x7c>

00021f1e <legacy_pairing_confirm>:
{
   21f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   21f20:	1d07      	adds	r7, r0, #4
{
   21f22:	b085      	sub	sp, #20
   21f24:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   21f26:	210a      	movs	r1, #10
   21f28:	4638      	mov	r0, r7
   21f2a:	f7ff febe 	bl	21caa <atomic_test_bit>
   21f2e:	bb88      	cbnz	r0, 21f94 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   21f30:	2104      	movs	r1, #4
   21f32:	4628      	mov	r0, r5
   21f34:	f7ff fdda 	bl	21aec <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   21f38:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   21f3a:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   21f3e:	f7ff fede 	bl	21cfe <smp_create_pdu.isra.0>
	if (!buf) {
   21f42:	4606      	mov	r6, r0
   21f44:	b1c0      	cbz	r0, 21f78 <legacy_pairing_confirm+0x5a>
   21f46:	2110      	movs	r1, #16
   21f48:	3008      	adds	r0, #8
   21f4a:	f000 faa1 	bl	22490 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   21f4e:	f104 0396 	add.w	r3, r4, #150	; 0x96
   21f52:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   21f54:	9002      	str	r0, [sp, #8]
   21f56:	9301      	str	r3, [sp, #4]
   21f58:	9400      	str	r4, [sp, #0]
   21f5a:	f105 0310 	add.w	r3, r5, #16
   21f5e:	f105 0209 	add.w	r2, r5, #9
   21f62:	f105 0127 	add.w	r1, r5, #39	; 0x27
   21f66:	f105 0047 	add.w	r0, r5, #71	; 0x47
   21f6a:	f7ff ff7d 	bl	21e68 <smp_c1>
   21f6e:	4604      	mov	r4, r0
   21f70:	b120      	cbz	r0, 21f7c <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   21f72:	4630      	mov	r0, r6
   21f74:	f7f8 fe52 	bl	1ac1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   21f78:	2008      	movs	r0, #8
   21f7a:	e009      	b.n	21f90 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   21f7c:	4602      	mov	r2, r0
   21f7e:	4631      	mov	r1, r6
   21f80:	4628      	mov	r0, r5
   21f82:	f7ff fdf2 	bl	21b6a <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   21f86:	4621      	mov	r1, r4
   21f88:	4638      	mov	r0, r7
   21f8a:	f7ff fdc3 	bl	21b14 <atomic_clear_bit>
	return 0;
   21f8e:	2000      	movs	r0, #0
}
   21f90:	b005      	add	sp, #20
   21f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   21f94:	2100      	movs	r1, #0
   21f96:	4638      	mov	r0, r7
   21f98:	f7ff fda8 	bl	21aec <atomic_set_bit>
   21f9c:	e7f7      	b.n	21f8e <legacy_pairing_confirm+0x70>

00021f9e <bt_smp_request_ltk>:
{
   21f9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21fa2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   21fa6:	e9cd 2300 	strd	r2, r3, [sp]
   21faa:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   21fac:	f7f7 f86c 	bl	19088 <smp_chan_get>
	if (!smp) {
   21fb0:	4605      	mov	r5, r0
   21fb2:	2800      	cmp	r0, #0
   21fb4:	f000 8090 	beq.w	220d8 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   21fb8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   21fbc:	1d07      	adds	r7, r0, #4
   21fbe:	f1b9 0f00 	cmp.w	r9, #0
   21fc2:	d12a      	bne.n	2201a <bt_smp_request_ltk+0x7c>
   21fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
   21fc8:	4313      	orrs	r3, r2
   21fca:	d126      	bne.n	2201a <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   21fcc:	2103      	movs	r1, #3
   21fce:	4638      	mov	r0, r7
   21fd0:	f7ff fe6b 	bl	21caa <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   21fd4:	b308      	cbz	r0, 2201a <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   21fd6:	2101      	movs	r1, #1
   21fd8:	4638      	mov	r0, r7
   21fda:	f7ff fe66 	bl	21caa <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   21fde:	4606      	mov	r6, r0
   21fe0:	b1d8      	cbz	r0, 2201a <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   21fe2:	7d2c      	ldrb	r4, [r5, #20]
   21fe4:	7b6b      	ldrb	r3, [r5, #13]
   21fe6:	429c      	cmp	r4, r3
   21fe8:	bf28      	it	cs
   21fea:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   21fec:	4622      	mov	r2, r4
   21fee:	f105 0147 	add.w	r1, r5, #71	; 0x47
   21ff2:	4640      	mov	r0, r8
   21ff4:	f7fe f91f 	bl	20236 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   21ff8:	2c0f      	cmp	r4, #15
   21ffa:	d806      	bhi.n	2200a <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   21ffc:	f1c4 0210 	rsb	r2, r4, #16
   22000:	4649      	mov	r1, r9
   22002:	eb08 0004 	add.w	r0, r8, r4
   22006:	f7fe f941 	bl	2028c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2200a:	2101      	movs	r1, #1
   2200c:	4638      	mov	r0, r7
   2200e:	f7ff fd6d 	bl	21aec <atomic_set_bit>
}
   22012:	4630      	mov	r0, r6
   22014:	b003      	add	sp, #12
   22016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2201a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2201e:	b983      	cbnz	r3, 22042 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   22020:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   22024:	7a21      	ldrb	r1, [r4, #8]
   22026:	4632      	mov	r2, r6
   22028:	2020      	movs	r0, #32
   2202a:	f7f8 fbdf 	bl	1a7ec <bt_keys_find>
   2202e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   22032:	b930      	cbnz	r0, 22042 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   22034:	7a21      	ldrb	r1, [r4, #8]
   22036:	4632      	mov	r2, r6
   22038:	2001      	movs	r0, #1
   2203a:	f7f8 fbd7 	bl	1a7ec <bt_keys_find>
   2203e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   22042:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   22046:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2204a:	b9ee      	cbnz	r6, 22088 <bt_smp_request_ltk+0xea>
   2204c:	e9dd 2300 	ldrd	r2, r3, [sp]
   22050:	4313      	orrs	r3, r2
   22052:	d119      	bne.n	22088 <bt_smp_request_ltk+0xea>
   22054:	b388      	cbz	r0, 220ba <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   22056:	89c3      	ldrh	r3, [r0, #14]
   22058:	069a      	lsls	r2, r3, #26
   2205a:	d516      	bpl.n	2208a <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2205c:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2205e:	f100 011a 	add.w	r1, r0, #26
   22062:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   22064:	4640      	mov	r0, r8
   22066:	f7fe f8e6 	bl	20236 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2206a:	2c0f      	cmp	r4, #15
   2206c:	d806      	bhi.n	2207c <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   2206e:	f1c4 0210 	rsb	r2, r4, #16
   22072:	4631      	mov	r1, r6
   22074:	eb08 0004 	add.w	r0, r8, r4
   22078:	f7fe f908 	bl	2028c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2207c:	2101      	movs	r1, #1
   2207e:	4638      	mov	r0, r7
   22080:	f7ff fd34 	bl	21aec <atomic_set_bit>
		return true;
   22084:	2601      	movs	r6, #1
   22086:	e7c4      	b.n	22012 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   22088:	b1b8      	cbz	r0, 220ba <bt_smp_request_ltk+0x11c>
   2208a:	89c3      	ldrh	r3, [r0, #14]
   2208c:	07db      	lsls	r3, r3, #31
   2208e:	d514      	bpl.n	220ba <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   22090:	2208      	movs	r2, #8
   22092:	4669      	mov	r1, sp
   22094:	3040      	adds	r0, #64	; 0x40
   22096:	f7fe f8be 	bl	20216 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2209a:	b970      	cbnz	r0, 220ba <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   2209c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   220a0:	2202      	movs	r2, #2
   220a2:	a90a      	add	r1, sp, #40	; 0x28
   220a4:	3048      	adds	r0, #72	; 0x48
   220a6:	f7fe f8b6 	bl	20216 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   220aa:	4606      	mov	r6, r0
   220ac:	b928      	cbnz	r0, 220ba <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   220ae:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   220b2:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   220b4:	314a      	adds	r1, #74	; 0x4a
   220b6:	4622      	mov	r2, r4
   220b8:	e7d4      	b.n	22064 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   220ba:	210f      	movs	r1, #15
   220bc:	4638      	mov	r0, r7
   220be:	f7ff fdf4 	bl	21caa <atomic_test_bit>
   220c2:	b120      	cbz	r0, 220ce <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   220c4:	2202      	movs	r2, #2
   220c6:	2106      	movs	r1, #6
   220c8:	4620      	mov	r0, r4
   220ca:	f7f3 ff11 	bl	15ef0 <bt_conn_security_changed>
	smp_reset(smp);
   220ce:	4628      	mov	r0, r5
   220d0:	f7ff fea7 	bl	21e22 <smp_reset>
	return false;
   220d4:	2600      	movs	r6, #0
   220d6:	e79c      	b.n	22012 <bt_smp_request_ltk+0x74>
		return false;
   220d8:	4606      	mov	r6, r0
   220da:	e79a      	b.n	22012 <bt_smp_request_ltk+0x74>

000220dc <bt_smp_sign>:
   220dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   220e0:	4770      	bx	lr

000220e2 <bt_smp_auth_pairing_confirm>:
{
   220e2:	b538      	push	{r3, r4, r5, lr}
	smp = smp_chan_get(conn);
   220e4:	f7f6 ffd0 	bl	19088 <smp_chan_get>
	if (!smp) {
   220e8:	4604      	mov	r4, r0
   220ea:	b910      	cbnz	r0, 220f2 <bt_smp_auth_pairing_confirm+0x10>
		return -EINVAL;
   220ec:	f06f 0015 	mvn.w	r0, #21
}
   220f0:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   220f2:	1d05      	adds	r5, r0, #4
   220f4:	210a      	movs	r1, #10
   220f6:	4628      	mov	r0, r5
   220f8:	f7ff fe7b 	bl	21df2 <atomic_test_and_clear_bit>
   220fc:	2800      	cmp	r0, #0
   220fe:	d0f5      	beq.n	220ec <bt_smp_auth_pairing_confirm+0xa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   22100:	2105      	movs	r1, #5
   22102:	4628      	mov	r0, r5
   22104:	f7ff fdd1 	bl	21caa <atomic_test_bit>
   22108:	b930      	cbnz	r0, 22118 <bt_smp_auth_pairing_confirm+0x36>
		atomic_set_bit(smp->allowed_cmds,
   2210a:	2103      	movs	r1, #3
   2210c:	4620      	mov	r0, r4
   2210e:	f7ff fced 	bl	21aec <atomic_set_bit>
		return send_pairing_rsp(smp);
   22112:	f7ff fe2c 	bl	21d6e <send_pairing_rsp>
   22116:	e7eb      	b.n	220f0 <bt_smp_auth_pairing_confirm+0xe>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   22118:	210c      	movs	r1, #12
   2211a:	4620      	mov	r0, r4
   2211c:	f7ff fce6 	bl	21aec <atomic_set_bit>
	if (send_pairing_rsp(smp)) {
   22120:	f7ff fe25 	bl	21d6e <send_pairing_rsp>
		return -EIO;
   22124:	2800      	cmp	r0, #0
   22126:	bf0c      	ite	eq
   22128:	2000      	moveq	r0, #0
   2212a:	f06f 0004 	mvnne.w	r0, #4
   2212e:	e7df      	b.n	220f0 <bt_smp_auth_pairing_confirm+0xe>

00022130 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   22130:	1d03      	adds	r3, r0, #4
{
   22132:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22134:	4605      	mov	r5, r0
   22136:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   22138:	4618      	mov	r0, r3
   2213a:	2103      	movs	r1, #3
   2213c:	f7ff fdb5 	bl	21caa <atomic_test_bit>
   22140:	b1f0      	cbz	r0, 22180 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   22142:	4631      	mov	r1, r6
   22144:	4628      	mov	r0, r5
   22146:	f7f7 feeb 	bl	19f20 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2214a:	2105      	movs	r1, #5
   2214c:	4628      	mov	r0, r5
   2214e:	f7ff fdd6 	bl	21cfe <smp_create_pdu.isra.0>
	if (!buf) {
   22152:	4604      	mov	r4, r0
   22154:	b308      	cbz	r0, 2219a <smp_error+0x6a>
   22156:	2101      	movs	r1, #1
   22158:	3008      	adds	r0, #8
   2215a:	f000 f999 	bl	22490 <net_buf_simple_add>
	rsp->reason = reason;
   2215e:	7006      	strb	r6, [r0, #0]
   22160:	2600      	movs	r6, #0
   22162:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   22166:	9600      	str	r6, [sp, #0]
   22168:	4633      	mov	r3, r6
   2216a:	4622      	mov	r2, r4
   2216c:	2106      	movs	r1, #6
   2216e:	f7fe fe49 	bl	20e04 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   22172:	b118      	cbz	r0, 2217c <smp_error+0x4c>
		net_buf_unref(buf);
   22174:	4620      	mov	r0, r4
   22176:	f7f8 fd51 	bl	1ac1c <net_buf_unref>
	return 0;
   2217a:	4630      	mov	r0, r6
}
   2217c:	b002      	add	sp, #8
   2217e:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22180:	2101      	movs	r1, #1
   22182:	4618      	mov	r0, r3
   22184:	f7ff fd91 	bl	21caa <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   22188:	2800      	cmp	r0, #0
   2218a:	d1da      	bne.n	22142 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2218c:	210f      	movs	r1, #15
   2218e:	4618      	mov	r0, r3
   22190:	f7ff fd8b 	bl	21caa <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22194:	2800      	cmp	r0, #0
   22196:	d1d4      	bne.n	22142 <smp_error+0x12>
   22198:	e7d7      	b.n	2214a <smp_error+0x1a>
		return -ENOBUFS;
   2219a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2219e:	e7ed      	b.n	2217c <smp_error+0x4c>

000221a0 <legacy_user_tk_entry>:
{
   221a0:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   221a2:	2100      	movs	r1, #0
{
   221a4:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   221a6:	3004      	adds	r0, #4
   221a8:	f7ff fe23 	bl	21df2 <atomic_test_and_clear_bit>
   221ac:	b178      	cbz	r0, 221ce <legacy_user_tk_entry+0x2e>
	if (legacy_pairing_confirm(smp)) {
   221ae:	4620      	mov	r0, r4
   221b0:	f7ff feb5 	bl	21f1e <legacy_pairing_confirm>
   221b4:	b128      	cbz	r0, 221c2 <legacy_user_tk_entry+0x22>
		smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   221b6:	4620      	mov	r0, r4
   221b8:	2101      	movs	r1, #1
}
   221ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   221be:	f7ff bfb7 	b.w	22130 <smp_error>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   221c2:	4620      	mov	r0, r4
   221c4:	2104      	movs	r1, #4
}
   221c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   221ca:	f7ff bc8f 	b.w	21aec <atomic_set_bit>
}
   221ce:	bd10      	pop	{r4, pc}

000221d0 <bt_smp_auth_passkey_entry>:
{
   221d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   221d2:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
   221d4:	f7f6 ff58 	bl	19088 <smp_chan_get>
	if (!smp) {
   221d8:	4604      	mov	r4, r0
   221da:	b918      	cbnz	r0, 221e4 <bt_smp_auth_passkey_entry+0x14>
		return -EINVAL;
   221dc:	f06f 0015 	mvn.w	r0, #21
}
   221e0:	b003      	add	sp, #12
   221e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   221e4:	1d07      	adds	r7, r0, #4
   221e6:	210a      	movs	r1, #10
   221e8:	4638      	mov	r0, r7
   221ea:	f7ff fe02 	bl	21df2 <atomic_test_and_clear_bit>
   221ee:	2800      	cmp	r0, #0
   221f0:	d0f4      	beq.n	221dc <bt_smp_auth_passkey_entry+0xc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   221f2:	2105      	movs	r1, #5
   221f4:	4638      	mov	r0, r7
   221f6:	f7ff fd58 	bl	21caa <atomic_test_bit>
   221fa:	b960      	cbnz	r0, 22216 <bt_smp_auth_passkey_entry+0x46>
	memcpy(smp->tk, &passkey, sizeof(passkey));
   221fc:	2204      	movs	r2, #4
   221fe:	eb0d 0102 	add.w	r1, sp, r2
   22202:	f104 0047 	add.w	r0, r4, #71	; 0x47
   22206:	9601      	str	r6, [sp, #4]
   22208:	f7fe f815 	bl	20236 <memcpy>
	legacy_user_tk_entry(smp);
   2220c:	4620      	mov	r0, r4
   2220e:	f7ff ffc7 	bl	221a0 <legacy_user_tk_entry>
			return 0;
   22212:	2000      	movs	r0, #0
   22214:	e7e4      	b.n	221e0 <bt_smp_auth_passkey_entry+0x10>
	smp->passkey = sys_cpu_to_le32(passkey);
   22216:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
	    atomic_test_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   2221a:	2100      	movs	r1, #0
   2221c:	4638      	mov	r0, r7
   2221e:	f7ff fd44 	bl	21caa <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   22222:	2800      	cmp	r0, #0
   22224:	d0f5      	beq.n	22212 <bt_smp_auth_passkey_entry+0x42>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   22226:	2104      	movs	r1, #4
   22228:	4620      	mov	r0, r4
   2222a:	f7ff fc5f 	bl	21aec <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   2222e:	f7f7 f8b1 	bl	19394 <smp_send_pairing_confirm>
		if (err) {
   22232:	2800      	cmp	r0, #0
   22234:	d0ed      	beq.n	22212 <bt_smp_auth_passkey_entry+0x42>
			smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   22236:	2101      	movs	r1, #1
   22238:	4620      	mov	r0, r4
   2223a:	f7ff ff79 	bl	22130 <smp_error>
   2223e:	e7e8      	b.n	22212 <bt_smp_auth_passkey_entry+0x42>

00022240 <bt_smp_auth_passkey_confirm>:
{
   22240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	smp = smp_chan_get(conn);
   22242:	f7f6 ff21 	bl	19088 <smp_chan_get>
	if (!smp) {
   22246:	4605      	mov	r5, r0
   22248:	b910      	cbnz	r0, 22250 <bt_smp_auth_passkey_confirm+0x10>
		return -EINVAL;
   2224a:	f06f 0015 	mvn.w	r0, #21
}
   2224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   22250:	1d06      	adds	r6, r0, #4
   22252:	210a      	movs	r1, #10
   22254:	4630      	mov	r0, r6
   22256:	f7ff fdcc 	bl	21df2 <atomic_test_and_clear_bit>
   2225a:	2800      	cmp	r0, #0
   2225c:	d0f5      	beq.n	2224a <bt_smp_auth_passkey_confirm+0xa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2225e:	2107      	movs	r1, #7
   22260:	4630      	mov	r0, r6
   22262:	f7ff fd22 	bl	21caa <atomic_test_bit>
   22266:	b128      	cbz	r0, 22274 <bt_smp_auth_passkey_confirm+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   22268:	2109      	movs	r1, #9
   2226a:	4630      	mov	r0, r6
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2226c:	f7ff fc3e 	bl	21aec <atomic_set_bit>
	return 0;
   22270:	2000      	movs	r0, #0
   22272:	e7ec      	b.n	2224e <bt_smp_auth_passkey_confirm+0xe>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   22274:	2110      	movs	r1, #16
   22276:	4630      	mov	r0, r6
   22278:	f7ff fd17 	bl	21caa <atomic_test_bit>
   2227c:	4604      	mov	r4, r0
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2227e:	2109      	movs	r1, #9
   22280:	4630      	mov	r0, r6
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   22282:	2c00      	cmp	r4, #0
   22284:	d1f2      	bne.n	2226c <bt_smp_auth_passkey_confirm+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   22286:	f7ff fd10 	bl	21caa <atomic_test_bit>
   2228a:	2800      	cmp	r0, #0
   2228c:	d0f0      	beq.n	22270 <bt_smp_auth_passkey_confirm+0x30>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   2228e:	4628      	mov	r0, r5
   22290:	f7f6 ff64 	bl	1915c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   22294:	4601      	mov	r1, r0
   22296:	2800      	cmp	r0, #0
   22298:	d0ea      	beq.n	22270 <bt_smp_auth_passkey_confirm+0x30>
			smp_error(smp, err);
   2229a:	4628      	mov	r0, r5
   2229c:	f7ff ff48 	bl	22130 <smp_error>
	return 0;
   222a0:	4620      	mov	r0, r4
   222a2:	e7d4      	b.n	2224e <bt_smp_auth_passkey_confirm+0xe>

000222a4 <bt_smp_dhkey_ready>:
{
   222a4:	b570      	push	{r4, r5, r6, lr}
   222a6:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   222a8:	2008      	movs	r0, #8
   222aa:	f7f6 ff49 	bl	19140 <smp_find>
	if (smp) {
   222ae:	4604      	mov	r4, r0
   222b0:	b1b8      	cbz	r0, 222e2 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   222b2:	1d05      	adds	r5, r0, #4
   222b4:	2108      	movs	r1, #8
   222b6:	4628      	mov	r0, r5
   222b8:	f7ff fc2c 	bl	21b14 <atomic_clear_bit>
	if (!dhkey) {
   222bc:	b38e      	cbz	r6, 22322 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   222be:	2107      	movs	r1, #7
   222c0:	f7ff fc28 	bl	21b14 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   222c4:	4631      	mov	r1, r6
   222c6:	2220      	movs	r2, #32
   222c8:	f104 0097 	add.w	r0, r4, #151	; 0x97
   222cc:	f7fd ffb3 	bl	20236 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   222d0:	210a      	movs	r1, #10
   222d2:	4628      	mov	r0, r5
   222d4:	f7ff fce9 	bl	21caa <atomic_test_bit>
   222d8:	b168      	cbz	r0, 222f6 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   222da:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   222dc:	4628      	mov	r0, r5
   222de:	f7ff fc05 	bl	21aec <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   222e2:	2007      	movs	r0, #7
   222e4:	f7f6 ff2c 	bl	19140 <smp_find>
		if (smp) {
   222e8:	4604      	mov	r4, r0
   222ea:	b118      	cbz	r0, 222f4 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   222ec:	f7f6 fe88 	bl	19000 <smp_dhkey_generate>
			if (err) {
   222f0:	4601      	mov	r1, r0
   222f2:	b990      	cbnz	r0, 2231a <bt_smp_dhkey_ready+0x76>
}
   222f4:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   222f6:	2110      	movs	r1, #16
   222f8:	4628      	mov	r0, r5
   222fa:	f7ff fcd6 	bl	21caa <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   222fe:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   22300:	2800      	cmp	r0, #0
   22302:	d1eb      	bne.n	222dc <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   22304:	4628      	mov	r0, r5
   22306:	f7ff fcd0 	bl	21caa <atomic_test_bit>
   2230a:	2800      	cmp	r0, #0
   2230c:	d0e9      	beq.n	222e2 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   2230e:	4620      	mov	r0, r4
   22310:	f7f6 ff24 	bl	1915c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   22314:	4601      	mov	r1, r0
   22316:	2800      	cmp	r0, #0
   22318:	d0e3      	beq.n	222e2 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2231a:	4620      	mov	r0, r4
   2231c:	f7ff ff08 	bl	22130 <smp_error>
   22320:	e7df      	b.n	222e2 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   22322:	210b      	movs	r1, #11
   22324:	e7f9      	b.n	2231a <bt_smp_dhkey_ready+0x76>

00022326 <bt_smp_disconnected>:
{
   22326:	b570      	push	{r4, r5, r6, lr}
   22328:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2232a:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2232e:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   22332:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   22334:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   22338:	f000 fc5d 	bl	22bf6 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2233c:	2103      	movs	r1, #3
   2233e:	4620      	mov	r0, r4
   22340:	f7ff fcb3 	bl	21caa <atomic_test_bit>
   22344:	b1a0      	cbz	r0, 22370 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   22346:	2108      	movs	r1, #8
   22348:	4630      	mov	r0, r6
   2234a:	f7f7 fde9 	bl	19f20 <smp_pairing_complete>
	if (keys) {
   2234e:	b13d      	cbz	r5, 22360 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   22350:	89eb      	ldrh	r3, [r5, #14]
   22352:	b113      	cbz	r3, 2235a <bt_smp_disconnected+0x34>
   22354:	7b6b      	ldrb	r3, [r5, #13]
   22356:	079b      	lsls	r3, r3, #30
   22358:	d502      	bpl.n	22360 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2235a:	4628      	mov	r0, r5
   2235c:	f7f8 faa6 	bl	1a8ac <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   22360:	4630      	mov	r0, r6
   22362:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   22366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2236a:	2100      	movs	r1, #0
   2236c:	f7fd bf8e 	b.w	2028c <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22370:	2101      	movs	r1, #1
   22372:	4620      	mov	r0, r4
   22374:	f7ff fc99 	bl	21caa <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   22378:	2800      	cmp	r0, #0
   2237a:	d1e4      	bne.n	22346 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2237c:	210f      	movs	r1, #15
   2237e:	4620      	mov	r0, r4
   22380:	f7ff fc93 	bl	21caa <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22384:	2800      	cmp	r0, #0
   22386:	d1de      	bne.n	22346 <bt_smp_disconnected+0x20>
   22388:	e7e1      	b.n	2234e <bt_smp_disconnected+0x28>

0002238a <smp_ident_sent>:
{
   2238a:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2238c:	7883      	ldrb	r3, [r0, #2]
   2238e:	2b01      	cmp	r3, #1
   22390:	d110      	bne.n	223b4 <smp_ident_sent+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   22392:	2106      	movs	r1, #6
   22394:	f7fe fd4f 	bl	20e36 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   22398:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   2239c:	f023 0301 	bic.w	r3, r3, #1
   223a0:	f800 3c08 	strb.w	r3, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   223a4:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   223a8:	b921      	cbnz	r1, 223b4 <smp_ident_sent+0x2a>
}
   223aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   223ae:	38f0      	subs	r0, #240	; 0xf0
   223b0:	f7f7 bdb6 	b.w	19f20 <smp_pairing_complete>
}
   223b4:	bd08      	pop	{r3, pc}

000223b6 <id_add>:
	bt_id_add(keys);
   223b6:	f7f2 bd8f 	b.w	14ed8 <bt_id_add>

000223ba <bt_keys_get_type>:
{
   223ba:	b570      	push	{r4, r5, r6, lr}
   223bc:	4604      	mov	r4, r0
   223be:	460d      	mov	r5, r1
   223c0:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   223c2:	f7f8 fa13 	bl	1a7ec <bt_keys_find>
	if (keys) {
   223c6:	b938      	cbnz	r0, 223d8 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   223c8:	4631      	mov	r1, r6
   223ca:	4628      	mov	r0, r5
   223cc:	f7f8 f9ce 	bl	1a76c <bt_keys_get_addr>
	if (!keys) {
   223d0:	b110      	cbz	r0, 223d8 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   223d2:	89c3      	ldrh	r3, [r0, #14]
   223d4:	431c      	orrs	r4, r3
   223d6:	81c4      	strh	r4, [r0, #14]
}
   223d8:	bd70      	pop	{r4, r5, r6, pc}

000223da <bt_keys_add_type>:
	keys->keys |= type;
   223da:	89c3      	ldrh	r3, [r0, #14]
   223dc:	4319      	orrs	r1, r3
   223de:	81c1      	strh	r1, [r0, #14]
}
   223e0:	4770      	bx	lr

000223e2 <fixed_data_unref>:
}
   223e2:	4770      	bx	lr

000223e4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   223e4:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   223e6:	6849      	ldr	r1, [r1, #4]
   223e8:	6809      	ldr	r1, [r1, #0]
   223ea:	f7f8 bb8b 	b.w	1ab04 <net_buf_alloc_len>

000223ee <net_buf_get>:
{
   223ee:	b570      	push	{r4, r5, r6, lr}
   223f0:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   223f2:	f7fa fb0b 	bl	1ca0c <z_impl_k_queue_get>
	if (!buf) {
   223f6:	4605      	mov	r5, r0
   223f8:	b128      	cbz	r0, 22406 <net_buf_get+0x18>
   223fa:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   223fc:	7963      	ldrb	r3, [r4, #5]
   223fe:	f013 0301 	ands.w	r3, r3, #1
   22402:	d102      	bne.n	2240a <net_buf_get+0x1c>
	frag->frags = NULL;
   22404:	6023      	str	r3, [r4, #0]
}
   22406:	4628      	mov	r0, r5
   22408:	bd70      	pop	{r4, r5, r6, pc}
   2240a:	2300      	movs	r3, #0
   2240c:	2200      	movs	r2, #0
   2240e:	4630      	mov	r0, r6
   22410:	f7fa fafc 	bl	1ca0c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   22414:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   22416:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   22418:	f023 0301 	bic.w	r3, r3, #1
   2241c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2241e:	4604      	mov	r4, r0
   22420:	e7ec      	b.n	223fc <net_buf_get+0xe>

00022422 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   22422:	6883      	ldr	r3, [r0, #8]
   22424:	440b      	add	r3, r1
   22426:	6003      	str	r3, [r0, #0]
}
   22428:	4770      	bx	lr

0002242a <net_buf_put>:
{
   2242a:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2242c:	460a      	mov	r2, r1
   2242e:	6814      	ldr	r4, [r2, #0]
   22430:	b914      	cbnz	r4, 22438 <net_buf_put+0xe>
}
   22432:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   22434:	f000 bafa 	b.w	22a2c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   22438:	7953      	ldrb	r3, [r2, #5]
   2243a:	f043 0301 	orr.w	r3, r3, #1
   2243e:	7153      	strb	r3, [r2, #5]
   22440:	4622      	mov	r2, r4
   22442:	e7f4      	b.n	2242e <net_buf_put+0x4>

00022444 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   22444:	7902      	ldrb	r2, [r0, #4]
   22446:	3201      	adds	r2, #1
   22448:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2244a:	4770      	bx	lr

0002244c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2244c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2244e:	4618      	mov	r0, r3
   22450:	681b      	ldr	r3, [r3, #0]
   22452:	2b00      	cmp	r3, #0
   22454:	d1fb      	bne.n	2244e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   22456:	4770      	bx	lr

00022458 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   22458:	6802      	ldr	r2, [r0, #0]
{
   2245a:	b510      	push	{r4, lr}
	if (parent->frags) {
   2245c:	b12a      	cbz	r2, 2246a <net_buf_frag_insert+0x12>
   2245e:	460b      	mov	r3, r1
	while (buf->frags) {
   22460:	461c      	mov	r4, r3
   22462:	681b      	ldr	r3, [r3, #0]
   22464:	2b00      	cmp	r3, #0
   22466:	d1fb      	bne.n	22460 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   22468:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2246a:	6001      	str	r1, [r0, #0]
}
   2246c:	bd10      	pop	{r4, pc}

0002246e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2246e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22470:	4604      	mov	r4, r0
   22472:	b920      	cbnz	r0, 2247e <net_buf_frag_add+0x10>
	buf->ref++;
   22474:	790b      	ldrb	r3, [r1, #4]
   22476:	3301      	adds	r3, #1
   22478:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2247a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2247c:	bd10      	pop	{r4, pc}
   2247e:	4603      	mov	r3, r0
	while (buf->frags) {
   22480:	4618      	mov	r0, r3
   22482:	681b      	ldr	r3, [r3, #0]
   22484:	2b00      	cmp	r3, #0
   22486:	d1fb      	bne.n	22480 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   22488:	f7ff ffe6 	bl	22458 <net_buf_frag_insert>
   2248c:	4620      	mov	r0, r4
   2248e:	e7f5      	b.n	2247c <net_buf_frag_add+0xe>

00022490 <net_buf_simple_add>:
	return buf->data + buf->len;
   22490:	8883      	ldrh	r3, [r0, #4]
   22492:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22494:	4419      	add	r1, r3
   22496:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22498:	18d0      	adds	r0, r2, r3
   2249a:	4770      	bx	lr

0002249c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2249c:	b430      	push	{r4, r5}
   2249e:	8884      	ldrh	r4, [r0, #4]
   224a0:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   224a2:	18a3      	adds	r3, r4, r2
   224a4:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   224a6:	1928      	adds	r0, r5, r4
}
   224a8:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   224aa:	f7fd bec4 	b.w	20236 <memcpy>

000224ae <net_buf_simple_add_u8>:
   224ae:	8883      	ldrh	r3, [r0, #4]
   224b0:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   224b2:	b510      	push	{r4, lr}
	buf->len += len;
   224b4:	1c5c      	adds	r4, r3, #1
   224b6:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   224b8:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   224ba:	18d0      	adds	r0, r2, r3
   224bc:	bd10      	pop	{r4, pc}

000224be <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   224be:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   224c0:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   224c2:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   224c4:	1a40      	subs	r0, r0, r1
	buf->len += len;
   224c6:	4411      	add	r1, r2
	buf->data -= len;
   224c8:	6018      	str	r0, [r3, #0]
	buf->len += len;
   224ca:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   224cc:	4770      	bx	lr

000224ce <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   224ce:	8882      	ldrh	r2, [r0, #4]
   224d0:	1a52      	subs	r2, r2, r1
{
   224d2:	4603      	mov	r3, r0
	buf->len -= len;
   224d4:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   224d6:	6800      	ldr	r0, [r0, #0]
   224d8:	4408      	add	r0, r1
   224da:	6018      	str	r0, [r3, #0]
}
   224dc:	4770      	bx	lr

000224de <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   224de:	4603      	mov	r3, r0
	void *data = buf->data;
   224e0:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   224e2:	889a      	ldrh	r2, [r3, #4]
   224e4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   224e6:	4401      	add	r1, r0
	buf->len -= len;
   224e8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   224ea:	6019      	str	r1, [r3, #0]

	return data;
}
   224ec:	4770      	bx	lr

000224ee <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   224ee:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   224f0:	6803      	ldr	r3, [r0, #0]
   224f2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   224f4:	2102      	movs	r1, #2
   224f6:	f7ff ffea 	bl	224ce <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   224fa:	4620      	mov	r0, r4
   224fc:	bd10      	pop	{r4, pc}

000224fe <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   224fe:	6802      	ldr	r2, [r0, #0]
   22500:	6880      	ldr	r0, [r0, #8]
}
   22502:	1a10      	subs	r0, r2, r0
   22504:	4770      	bx	lr

00022506 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   22506:	8883      	ldrh	r3, [r0, #4]
   22508:	88c2      	ldrh	r2, [r0, #6]
   2250a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2250c:	6803      	ldr	r3, [r0, #0]
   2250e:	6880      	ldr	r0, [r0, #8]
   22510:	1a18      	subs	r0, r3, r0
}
   22512:	1a10      	subs	r0, r2, r0
   22514:	4770      	bx	lr

00022516 <is_regular_addr_valid>:
{
   22516:	b538      	push	{r3, r4, r5, lr}
   22518:	4604      	mov	r4, r0
   2251a:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2251c:	f000 f912 	bl	22744 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   22520:	4284      	cmp	r4, r0
   22522:	d209      	bcs.n	22538 <is_regular_addr_valid+0x22>
   22524:	2c00      	cmp	r4, #0
   22526:	db07      	blt.n	22538 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   22528:	42a8      	cmp	r0, r5
   2252a:	d305      	bcc.n	22538 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2252c:	442c      	add	r4, r5
	    len > flash_size ||
   2252e:	4284      	cmp	r4, r0
   22530:	bf8c      	ite	hi
   22532:	2000      	movhi	r0, #0
   22534:	2001      	movls	r0, #1
}
   22536:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   22538:	2000      	movs	r0, #0
   2253a:	e7fc      	b.n	22536 <is_regular_addr_valid+0x20>

0002253c <erase_op>:
{
   2253c:	b570      	push	{r4, r5, r6, lr}
   2253e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   22540:	f000 f906 	bl	22750 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   22544:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   22546:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   22548:	b10b      	cbz	r3, 2254e <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   2254a:	f000 f8f9 	bl	22740 <nrf_flash_sync_get_timestamp_begin>
{
   2254e:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   22550:	6860      	ldr	r0, [r4, #4]
   22552:	f7f9 fed7 	bl	1c304 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   22556:	68a3      	ldr	r3, [r4, #8]
   22558:	1b5b      	subs	r3, r3, r5
   2255a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2255c:	6863      	ldr	r3, [r4, #4]
   2255e:	442b      	add	r3, r5
   22560:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   22562:	7b23      	ldrb	r3, [r4, #12]
		i++;
   22564:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   22566:	b93b      	cbnz	r3, 22578 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   22568:	68a3      	ldr	r3, [r4, #8]
   2256a:	2b00      	cmp	r3, #0
   2256c:	d1f0      	bne.n	22550 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2256e:	68a0      	ldr	r0, [r4, #8]
}
   22570:	3800      	subs	r0, #0
   22572:	bf18      	it	ne
   22574:	2001      	movne	r0, #1
   22576:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   22578:	4630      	mov	r0, r6
   2257a:	f7f9 fd85 	bl	1c088 <nrf_flash_sync_check_time_limit>
   2257e:	2800      	cmp	r0, #0
   22580:	d0f2      	beq.n	22568 <erase_op+0x2c>
   22582:	e7f4      	b.n	2256e <erase_op+0x32>

00022584 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   22584:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22588:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   2258a:	6883      	ldr	r3, [r0, #8]
{
   2258c:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   2258e:	695b      	ldr	r3, [r3, #20]
   22590:	4669      	mov	r1, sp
{
   22592:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   22594:	aa01      	add	r2, sp, #4
   22596:	4798      	blx	r3

	while (layout_size--) {
   22598:	e9dd 1000 	ldrd	r1, r0, [sp]
   2259c:	2300      	movs	r3, #0
   2259e:	f100 38ff 	add.w	r8, r0, #4294967295
	off_t end = 0;
   225a2:	461d      	mov	r5, r3
	off_t group_offs = 0;
   225a4:	469e      	mov	lr, r3
	size_t page_count = 0;
   225a6:	469c      	mov	ip, r3
	while (layout_size--) {
   225a8:	f1b8 3fff 	cmp.w	r8, #4294967295
   225ac:	d102      	bne.n	225b4 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   225ae:	f06f 0015 	mvn.w	r0, #21
   225b2:	e018      	b.n	225e6 <flash_get_page_info+0x62>
		if (use_addr) {
   225b4:	680a      	ldr	r2, [r1, #0]
   225b6:	b1cf      	cbz	r7, 225ec <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   225b8:	6848      	ldr	r0, [r1, #4]
   225ba:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   225be:	42a5      	cmp	r5, r4
   225c0:	f108 38ff 	add.w	r8, r8, #4294967295
   225c4:	dd17      	ble.n	225f6 <flash_get_page_info+0x72>
   225c6:	b103      	cbz	r3, 225ca <flash_get_page_info+0x46>
   225c8:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   225ca:	9b00      	ldr	r3, [sp, #0]
   225cc:	685b      	ldr	r3, [r3, #4]
   225ce:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   225d0:	b177      	cbz	r7, 225f0 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   225d2:	eba4 040e 	sub.w	r4, r4, lr
   225d6:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   225da:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   225de:	4464      	add	r4, ip
			info->start_offset = group_offs +
   225e0:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   225e2:	60b4      	str	r4, [r6, #8]
			return 0;
   225e4:	2000      	movs	r0, #0
}
   225e6:	b002      	add	sp, #8
   225e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   225ec:	4415      	add	r5, r2
   225ee:	e7e6      	b.n	225be <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   225f0:	eba4 040c 	sub.w	r4, r4, ip
   225f4:	e7f1      	b.n	225da <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   225f6:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   225f8:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   225fa:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   225fe:	3108      	adds	r1, #8
   22600:	2301      	movs	r3, #1
   22602:	e7d1      	b.n	225a8 <flash_get_page_info+0x24>

00022604 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   22604:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   22606:	2201      	movs	r2, #1
   22608:	f7ff bfbc 	b.w	22584 <flash_get_page_info>

0002260c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   22610:	6883      	ldr	r3, [r0, #8]
{
   22612:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   22614:	695b      	ldr	r3, [r3, #20]
{
   22616:	4688      	mov	r8, r1
   22618:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2261a:	a901      	add	r1, sp, #4
   2261c:	aa02      	add	r2, sp, #8
   2261e:	4798      	blx	r3
	off_t off = 0;
   22620:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   22622:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   22624:	4625      	mov	r5, r4
   22626:	9b02      	ldr	r3, [sp, #8]
   22628:	42ab      	cmp	r3, r5
   2262a:	d802      	bhi.n	22632 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2262c:	b006      	add	sp, #24
   2262e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   22632:	9f01      	ldr	r7, [sp, #4]
   22634:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   22638:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2263a:	687b      	ldr	r3, [r7, #4]
   2263c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2263e:	683a      	ldr	r2, [r7, #0]
   22640:	42b2      	cmp	r2, r6
   22642:	eb0a 0306 	add.w	r3, sl, r6
   22646:	d802      	bhi.n	2264e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   22648:	3501      	adds	r5, #1
   2264a:	469a      	mov	sl, r3
   2264c:	e7eb      	b.n	22626 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2264e:	4649      	mov	r1, r9
   22650:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   22652:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   22654:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   22656:	47c0      	blx	r8
   22658:	2800      	cmp	r0, #0
   2265a:	d0e7      	beq.n	2262c <flash_page_foreach+0x20>
			off += page_info.size;
   2265c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2265e:	3601      	adds	r6, #1
			off += page_info.size;
   22660:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   22662:	e7ec      	b.n	2263e <flash_page_foreach+0x32>

00022664 <rand_prio_high_vector_get>:
   22664:	f7f8 be94 	b.w	1b390 <rand_prio_low_vector_get>

00022668 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   22668:	b5f0      	push	{r4, r5, r6, r7, lr}
   2266a:	b08d      	sub	sp, #52	; 0x34
   2266c:	4615      	mov	r5, r2
   2266e:	466a      	mov	r2, sp
   22670:	f100 0310 	add.w	r3, r0, #16
   22674:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   22676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2267a:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   2267e:	4298      	cmp	r0, r3
   22680:	d1f9      	bne.n	22676 <bt_encrypt_le+0xe>
   22682:	aa04      	add	r2, sp, #16
   22684:	f101 0310 	add.w	r3, r1, #16
   22688:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   2268a:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2268e:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   22692:	428b      	cmp	r3, r1
   22694:	d1f9      	bne.n	2268a <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22696:	f04f 30ff 	mov.w	r0, #4294967295
   2269a:	f04f 31ff 	mov.w	r1, #4294967295
   2269e:	f7f8 fe19 	bl	1b2d4 <multithreading_lock_acquire>

	if (!errcode) {
   226a2:	4604      	mov	r4, r0
   226a4:	b990      	cbnz	r0, 226cc <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   226a6:	aa08      	add	r2, sp, #32
   226a8:	4639      	mov	r1, r7
   226aa:	4630      	mov	r0, r6
   226ac:	f7e9 fea9 	bl	c402 <sdc_soc_ecb_block_encrypt>
   226b0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   226b2:	f7f8 fe17 	bl	1b2e4 <multithreading_lock_release>
	}

	if (!errcode) {
   226b6:	b94c      	cbnz	r4, 226cc <bt_encrypt_le+0x64>
   226b8:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   226ba:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   226be:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   226c0:	f812 1901 	ldrb.w	r1, [r2], #-1
   226c4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   226c8:	429d      	cmp	r5, r3
   226ca:	d1f9      	bne.n	226c0 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   226cc:	4620      	mov	r0, r4
   226ce:	b00d      	add	sp, #52	; 0x34
   226d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000226d2 <mpsl_fem_init>:
#if IS_ENABLED(CONFIG_MPSL_FEM)
	return mpsl_fem_configure();
#else
	return 0;
#endif
}
   226d2:	2000      	movs	r0, #0
   226d4:	4770      	bx	lr

000226d6 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   226d6:	4668      	mov	r0, sp
   226d8:	f020 0107 	bic.w	r1, r0, #7
   226dc:	468d      	mov	sp, r1
   226de:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   226e0:	f7e0 f8f8 	bl	28d4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   226e4:	f7f0 f83e 	bl	12764 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   226e8:	f7f0 fb82 	bl	12df0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   226ec:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   226f0:	4685      	mov	sp, r0
   226f2:	4770      	bx	lr

000226f4 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   226f4:	4668      	mov	r0, sp
   226f6:	f020 0107 	bic.w	r1, r0, #7
   226fa:	468d      	mov	sp, r1
   226fc:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   226fe:	f7e0 f86b 	bl	27d8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   22702:	f7f0 f82f 	bl	12764 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   22706:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2270a:	4685      	mov	sp, r0
   2270c:	4770      	bx	lr

0002270e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2270e:	4668      	mov	r0, sp
   22710:	f020 0107 	bic.w	r1, r0, #7
   22714:	468d      	mov	sp, r1
   22716:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   22718:	f7e9 fbc4 	bl	bea4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2271c:	f7f0 f822 	bl	12764 <_arch_isr_direct_pm>
   22720:	f7f0 fb66 	bl	12df0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   22724:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   22728:	4685      	mov	sp, r0
   2272a:	4770      	bx	lr

0002272c <nrfx_clock_stop>:
	switch (domain) {
   2272c:	2801      	cmp	r0, #1
   2272e:	d101      	bne.n	22734 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   22730:	f7e0 bf0c 	b.w	354c <mpsl_clock_hfclk_release>
}
   22734:	4770      	bx	lr

00022736 <nrfx_clock_enable>:
}
   22736:	4770      	bx	lr

00022738 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   22738:	f7e0 bd26 	b.w	3188 <MPSL_IRQ_CLOCK_Handler>

0002273c <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2273c:	f7e1 b8e8 	b.w	3910 <mpsl_is_initialized>

00022740 <nrf_flash_sync_get_timestamp_begin>:
}
   22740:	4770      	bx	lr

00022742 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   22742:	4700      	bx	r0

00022744 <nrfx_nvmc_flash_size_get>:
   22744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22748:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2274a:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2274c:	4350      	muls	r0, r2
   2274e:	4770      	bx	lr

00022750 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   22750:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22754:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   22756:	4770      	bx	lr

00022758 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   22758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2275c:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2275e:	4770      	bx	lr

00022760 <z_device_state_init>:
}
   22760:	4770      	bx	lr

00022762 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   22762:	68c3      	ldr	r3, [r0, #12]
   22764:	8818      	ldrh	r0, [r3, #0]
   22766:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   2276a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2276e:	4258      	negs	r0, r3
   22770:	4158      	adcs	r0, r3
   22772:	4770      	bx	lr

00022774 <k_heap_init>:
{
   22774:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   22776:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2277a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2277e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   22780:	f7fb be06 	b.w	1e390 <sys_heap_init>

00022784 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   22784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22788:	b087      	sub	sp, #28
   2278a:	4604      	mov	r4, r0
   2278c:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2278e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   22792:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22794:	f000 fbe3 	bl	22f5e <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22798:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2279c:	4605      	mov	r5, r0
   2279e:	4688      	mov	r8, r1
	__asm__ volatile(
   227a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   227a4:	f3ef 8b11 	mrs	fp, BASEPRI
   227a8:	f383 8811 	msr	BASEPRI, r3
   227ac:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   227b0:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   227b4:	463a      	mov	r2, r7
   227b6:	4631      	mov	r1, r6
   227b8:	4620      	mov	r0, r4
   227ba:	f7fb fd6e 	bl	1e29a <sys_heap_aligned_alloc>
   227be:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   227c0:	f7fb f89c 	bl	1d8fc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   227c4:	9b05      	ldr	r3, [sp, #20]
   227c6:	b13b      	cbz	r3, 227d8 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   227c8:	f38b 8811 	msr	BASEPRI, fp
   227cc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   227d0:	4618      	mov	r0, r3
   227d2:	b007      	add	sp, #28
   227d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   227d8:	1a2a      	subs	r2, r5, r0
   227da:	9202      	str	r2, [sp, #8]
   227dc:	eb68 0201 	sbc.w	r2, r8, r1
   227e0:	9203      	str	r2, [sp, #12]
   227e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   227e6:	2901      	cmp	r1, #1
   227e8:	f172 0200 	sbcs.w	r2, r2, #0
   227ec:	dbec      	blt.n	227c8 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   227ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   227f2:	4659      	mov	r1, fp
   227f4:	e9cd 2300 	strd	r2, r3, [sp]
   227f8:	4648      	mov	r0, r9
   227fa:	4652      	mov	r2, sl
   227fc:	f7fa fc42 	bl	1d084 <z_pend_curr>
	__asm__ volatile(
   22800:	f04f 0340 	mov.w	r3, #64	; 0x40
   22804:	f3ef 8b11 	mrs	fp, BASEPRI
   22808:	f383 8811 	msr	BASEPRI, r3
   2280c:	f3bf 8f6f 	isb	sy
   22810:	e7d0      	b.n	227b4 <k_heap_aligned_alloc+0x30>

00022812 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   22812:	b538      	push	{r3, r4, r5, lr}
   22814:	4604      	mov	r4, r0
   22816:	f04f 0340 	mov.w	r3, #64	; 0x40
   2281a:	f3ef 8511 	mrs	r5, BASEPRI
   2281e:	f383 8811 	msr	BASEPRI, r3
   22822:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   22826:	f7fb fceb 	bl	1e200 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2282a:	f104 000c 	add.w	r0, r4, #12
   2282e:	f000 fb11 	bl	22e54 <z_unpend_all>
   22832:	b130      	cbz	r0, 22842 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   22834:	4629      	mov	r1, r5
   22836:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2283a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2283e:	f7fa bb9d 	b.w	1cf7c <z_reschedule>
	__asm__ volatile(
   22842:	f385 8811 	msr	BASEPRI, r5
   22846:	f3bf 8f6f 	isb	sy
}
   2284a:	bd38      	pop	{r3, r4, r5, pc}

0002284c <k_mem_slab_init>:
{
   2284c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2284e:	2400      	movs	r4, #0
   22850:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22852:	ea41 0402 	orr.w	r4, r1, r2
   22856:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2285a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2285e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22860:	d10c      	bne.n	2287c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   22862:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22864:	42a3      	cmp	r3, r4
   22866:	d103      	bne.n	22870 <k_mem_slab_init+0x24>
   22868:	e9c0 0000 	strd	r0, r0, [r0]
}
   2286c:	2000      	movs	r0, #0
}
   2286e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22870:	6945      	ldr	r5, [r0, #20]
   22872:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   22874:	3401      	adds	r4, #1
		slab->free_list = p;
   22876:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22878:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2287a:	e7f3      	b.n	22864 <k_mem_slab_init+0x18>
		return -EINVAL;
   2287c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22880:	e7f5      	b.n	2286e <k_mem_slab_init+0x22>

00022882 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   22882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22884:	4604      	mov	r4, r0
   22886:	460d      	mov	r5, r1
	__asm__ volatile(
   22888:	f04f 0340 	mov.w	r3, #64	; 0x40
   2288c:	f3ef 8611 	mrs	r6, BASEPRI
   22890:	f383 8811 	msr	BASEPRI, r3
   22894:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   22898:	6947      	ldr	r7, [r0, #20]
   2289a:	b977      	cbnz	r7, 228ba <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2289c:	f000 fac2 	bl	22e24 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   228a0:	b158      	cbz	r0, 228ba <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   228a2:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   228a4:	6142      	str	r2, [r0, #20]
   228a6:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   228a8:	f000 fa75 	bl	22d96 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   228ac:	4631      	mov	r1, r6
   228ae:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   228b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   228b6:	f7fa bb61 	b.w	1cf7c <z_reschedule>
	**(char ***) mem = slab->free_list;
   228ba:	682b      	ldr	r3, [r5, #0]
   228bc:	6962      	ldr	r2, [r4, #20]
   228be:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   228c0:	682b      	ldr	r3, [r5, #0]
   228c2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   228c4:	69a3      	ldr	r3, [r4, #24]
   228c6:	3b01      	subs	r3, #1
   228c8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   228ca:	f386 8811 	msr	BASEPRI, r6
   228ce:	f3bf 8f6f 	isb	sy
}
   228d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000228d4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   228d4:	f3ef 8005 	mrs	r0, IPSR
}
   228d8:	3800      	subs	r0, #0
   228da:	bf18      	it	ne
   228dc:	2001      	movne	r0, #1
   228de:	4770      	bx	lr

000228e0 <z_impl_k_thread_name_set>:
}
   228e0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   228e4:	4770      	bx	lr

000228e6 <k_thread_name_get>:
}
   228e6:	2000      	movs	r0, #0
   228e8:	4770      	bx	lr

000228ea <z_impl_k_thread_start>:
	z_sched_start(thread);
   228ea:	f7fa bd1f 	b.w	1d32c <z_sched_start>

000228ee <z_pm_save_idle_exit>:
{
   228ee:	b508      	push	{r3, lr}
	pm_system_resume();
   228f0:	f7ef fa30 	bl	11d54 <pm_system_resume>
}
   228f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   228f8:	f7fc baf8 	b.w	1eeec <sys_clock_idle_exit>

000228fc <z_impl_k_mutex_init>:
{
   228fc:	4603      	mov	r3, r0
	mutex->owner = NULL;
   228fe:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   22900:	e9c3 0002 	strd	r0, r0, [r3, #8]
   22904:	e9c3 3300 	strd	r3, r3, [r3]
}
   22908:	4770      	bx	lr

0002290a <queue_insert>:
{
   2290a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2290e:	4699      	mov	r9, r3
   22910:	4604      	mov	r4, r0
   22912:	f89d 3020 	ldrb.w	r3, [sp, #32]
   22916:	460d      	mov	r5, r1
   22918:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2291a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2291e:	f04f 0240 	mov.w	r2, #64	; 0x40
   22922:	f3ef 8711 	mrs	r7, BASEPRI
   22926:	f382 8811 	msr	BASEPRI, r2
   2292a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2292e:	b103      	cbz	r3, 22932 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   22930:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22932:	4630      	mov	r0, r6
   22934:	f000 fa76 	bl	22e24 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   22938:	b158      	cbz	r0, 22952 <queue_insert+0x48>
   2293a:	2400      	movs	r4, #0
   2293c:	67c4      	str	r4, [r0, #124]	; 0x7c
   2293e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   22942:	f000 fa28 	bl	22d96 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   22946:	4630      	mov	r0, r6
   22948:	4639      	mov	r1, r7
   2294a:	f7fa fb17 	bl	1cf7c <z_reschedule>
	return 0;
   2294e:	2000      	movs	r0, #0
   22950:	e00c      	b.n	2296c <queue_insert+0x62>
	if (alloc) {
   22952:	f1b9 0f00 	cmp.w	r9, #0
   22956:	d01b      	beq.n	22990 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   22958:	2108      	movs	r1, #8
   2295a:	f7fb f8f5 	bl	1db48 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2295e:	b938      	cbnz	r0, 22970 <queue_insert+0x66>
	__asm__ volatile(
   22960:	f387 8811 	msr	BASEPRI, r7
   22964:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   22968:	f06f 000b 	mvn.w	r0, #11
}
   2296c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   22970:	2301      	movs	r3, #1
		anode->data = data;
   22972:	f8c0 8004 	str.w	r8, [r0, #4]
   22976:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22978:	6803      	ldr	r3, [r0, #0]
   2297a:	f003 0203 	and.w	r2, r3, #3
   2297e:	b95d      	cbnz	r5, 22998 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22980:	6823      	ldr	r3, [r4, #0]
   22982:	4313      	orrs	r3, r2
   22984:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22986:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22988:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2298a:	b973      	cbnz	r3, 229aa <queue_insert+0xa0>
	list->tail = node;
   2298c:	6060      	str	r0, [r4, #4]
}
   2298e:	e00c      	b.n	229aa <queue_insert+0xa0>
	node->next_and_flags = flags;
   22990:	f8c8 9000 	str.w	r9, [r8]
}
   22994:	4640      	mov	r0, r8
   22996:	e7ef      	b.n	22978 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22998:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2299a:	f033 0303 	bics.w	r3, r3, #3
   2299e:	d110      	bne.n	229c2 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   229a0:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   229a2:	6862      	ldr	r2, [r4, #4]
   229a4:	b93a      	cbnz	r2, 229b6 <queue_insert+0xac>
	list->head = node;
   229a6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   229aa:	2104      	movs	r1, #4
   229ac:	f104 0010 	add.w	r0, r4, #16
   229b0:	f000 fc6b 	bl	2328a <z_handle_obj_poll_events>
   229b4:	e7c7      	b.n	22946 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   229b6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   229b8:	f003 0303 	and.w	r3, r3, #3
   229bc:	4303      	orrs	r3, r0
   229be:	6013      	str	r3, [r2, #0]
   229c0:	e7e4      	b.n	2298c <queue_insert+0x82>
   229c2:	4313      	orrs	r3, r2
   229c4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   229c6:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   229c8:	f003 0303 	and.w	r3, r3, #3
   229cc:	4303      	orrs	r3, r0
   229ce:	602b      	str	r3, [r5, #0]
}
   229d0:	e7eb      	b.n	229aa <queue_insert+0xa0>

000229d2 <z_queue_node_peek>:
{
   229d2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   229d4:	4604      	mov	r4, r0
   229d6:	b130      	cbz	r0, 229e6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   229d8:	6802      	ldr	r2, [r0, #0]
   229da:	0793      	lsls	r3, r2, #30
   229dc:	d003      	beq.n	229e6 <z_queue_node_peek+0x14>
		ret = anode->data;
   229de:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   229e0:	b109      	cbz	r1, 229e6 <z_queue_node_peek+0x14>
			k_free(anode);
   229e2:	f000 fc60 	bl	232a6 <k_free>
}
   229e6:	4620      	mov	r0, r4
   229e8:	bd10      	pop	{r4, pc}

000229ea <z_impl_k_queue_init>:
	list->head = NULL;
   229ea:	2300      	movs	r3, #0
	list->tail = NULL;
   229ec:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   229f0:	f100 0308 	add.w	r3, r0, #8
   229f4:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   229f8:	f100 0310 	add.w	r3, r0, #16
   229fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22a00:	4770      	bx	lr

00022a02 <k_queue_append>:
{
   22a02:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   22a04:	2301      	movs	r3, #1
   22a06:	9300      	str	r3, [sp, #0]
   22a08:	2300      	movs	r3, #0
{
   22a0a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   22a0c:	4619      	mov	r1, r3
   22a0e:	f7ff ff7c 	bl	2290a <queue_insert>
}
   22a12:	b003      	add	sp, #12
   22a14:	f85d fb04 	ldr.w	pc, [sp], #4

00022a18 <k_queue_prepend>:
{
   22a18:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   22a1a:	2300      	movs	r3, #0
{
   22a1c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   22a1e:	9300      	str	r3, [sp, #0]
   22a20:	4619      	mov	r1, r3
   22a22:	f7ff ff72 	bl	2290a <queue_insert>
}
   22a26:	b003      	add	sp, #12
   22a28:	f85d fb04 	ldr.w	pc, [sp], #4

00022a2c <k_queue_append_list>:
{
   22a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22a30:	4605      	mov	r5, r0
   22a32:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   22a34:	460c      	mov	r4, r1
   22a36:	b391      	cbz	r1, 22a9e <k_queue_append_list+0x72>
   22a38:	b38a      	cbz	r2, 22a9e <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22a3a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   22a3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a42:	f3ef 8811 	mrs	r8, BASEPRI
   22a46:	f383 8811 	msr	BASEPRI, r3
   22a4a:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   22a4e:	4638      	mov	r0, r7
   22a50:	f000 f9e8 	bl	22e24 <z_unpend_first_thread>
   22a54:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   22a58:	b920      	cbnz	r0, 22a64 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22a5a:	686b      	ldr	r3, [r5, #4]
   22a5c:	b9cb      	cbnz	r3, 22a92 <k_queue_append_list+0x66>
	list->head = node;
   22a5e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22a60:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22a62:	e00a      	b.n	22a7a <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   22a64:	6144      	str	r4, [r0, #20]
   22a66:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   22a6a:	f000 f994 	bl	22d96 <z_ready_thread>
		head = *(void **)head;
   22a6e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22a70:	4638      	mov	r0, r7
   22a72:	f000 f9d7 	bl	22e24 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22a76:	2c00      	cmp	r4, #0
   22a78:	d1ee      	bne.n	22a58 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22a7a:	2104      	movs	r1, #4
   22a7c:	f105 0010 	add.w	r0, r5, #16
   22a80:	f000 fc03 	bl	2328a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22a84:	4638      	mov	r0, r7
   22a86:	4641      	mov	r1, r8
   22a88:	f7fa fa78 	bl	1cf7c <z_reschedule>
	return 0;
   22a8c:	2000      	movs	r0, #0
}
   22a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22a92:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22a94:	f001 0103 	and.w	r1, r1, #3
   22a98:	430c      	orrs	r4, r1
   22a9a:	601c      	str	r4, [r3, #0]
}
   22a9c:	e7e0      	b.n	22a60 <k_queue_append_list+0x34>
		return -EINVAL;
   22a9e:	f06f 0015 	mvn.w	r0, #21
   22aa2:	e7f4      	b.n	22a8e <k_queue_append_list+0x62>

00022aa4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   22aa4:	b15a      	cbz	r2, 22abe <z_impl_k_sem_init+0x1a>
   22aa6:	428a      	cmp	r2, r1
   22aa8:	d309      	bcc.n	22abe <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22aaa:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22aae:	e9c0 1202 	strd	r1, r2, [r0, #8]
   22ab2:	e9c0 0000 	strd	r0, r0, [r0]
   22ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   22aba:	2000      	movs	r0, #0
   22abc:	4770      	bx	lr
		return -EINVAL;
   22abe:	f06f 0015 	mvn.w	r0, #21
}
   22ac2:	4770      	bx	lr

00022ac4 <notify_queue_locked>:
	if (queue != NULL) {
   22ac4:	b120      	cbz	r0, 22ad0 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   22ac6:	2200      	movs	r2, #0
   22ac8:	4611      	mov	r1, r2
   22aca:	3088      	adds	r0, #136	; 0x88
   22acc:	f000 b9d2 	b.w	22e74 <z_sched_wake>
}
   22ad0:	4770      	bx	lr

00022ad2 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   22ad2:	68c3      	ldr	r3, [r0, #12]
{
   22ad4:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   22ad6:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   22ada:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22ade:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   22ae0:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22ae2:	d502      	bpl.n	22aea <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   22ae4:	3010      	adds	r0, #16
   22ae6:	f000 f9e2 	bl	22eae <z_abort_timeout>
}
   22aea:	4620      	mov	r0, r4
   22aec:	bd10      	pop	{r4, pc}

00022aee <cancel_async_locked>:
{
   22aee:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22af0:	68c0      	ldr	r0, [r0, #12]
{
   22af2:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22af4:	0784      	lsls	r4, r0, #30
   22af6:	f3c0 0140 	ubfx	r1, r0, #1, #1
   22afa:	d416      	bmi.n	22b2a <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   22afc:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   22b00:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   22b02:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   22b04:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   22b06:	d510      	bpl.n	22b2a <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22b08:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   22b0c:	b168      	cbz	r0, 22b2a <cancel_async_locked+0x3c>
   22b0e:	4283      	cmp	r3, r0
   22b10:	d11d      	bne.n	22b4e <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   22b12:	6818      	ldr	r0, [r3, #0]
   22b14:	b999      	cbnz	r1, 22b3e <cancel_async_locked+0x50>
   22b16:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   22b1a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   22b1e:	428b      	cmp	r3, r1
   22b20:	d101      	bne.n	22b26 <cancel_async_locked+0x38>
	list->tail = node;
   22b22:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   22b26:	2200      	movs	r2, #0
   22b28:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   22b2a:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   22b2c:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   22b30:	bf1e      	ittt	ne
   22b32:	f042 0202 	orrne.w	r2, r2, #2
   22b36:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   22b38:	f002 000f 	andne.w	r0, r2, #15
}
   22b3c:	bd10      	pop	{r4, pc}
   22b3e:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22b40:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   22b44:	4283      	cmp	r3, r0
	list->tail = node;
   22b46:	bf08      	it	eq
   22b48:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   22b4c:	e7eb      	b.n	22b26 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22b4e:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22b50:	6800      	ldr	r0, [r0, #0]
   22b52:	e7db      	b.n	22b0c <cancel_async_locked+0x1e>

00022b54 <work_timeout>:
{
   22b54:	b513      	push	{r0, r1, r4, lr}
   22b56:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b5a:	f3ef 8411 	mrs	r4, BASEPRI
   22b5e:	f383 8811 	msr	BASEPRI, r3
   22b62:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   22b66:	2300      	movs	r3, #0
   22b68:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   22b6a:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   22b6e:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22b72:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   22b74:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22b78:	d505      	bpl.n	22b86 <work_timeout+0x32>
		queue = dw->queue;
   22b7a:	6983      	ldr	r3, [r0, #24]
   22b7c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   22b7e:	a901      	add	r1, sp, #4
   22b80:	3810      	subs	r0, #16
   22b82:	f7fa f8bf 	bl	1cd04 <submit_to_queue_locked>
	__asm__ volatile(
   22b86:	f384 8811 	msr	BASEPRI, r4
   22b8a:	f3bf 8f6f 	isb	sy
}
   22b8e:	b002      	add	sp, #8
   22b90:	bd10      	pop	{r4, pc}

00022b92 <k_work_init>:
{
   22b92:	b538      	push	{r3, r4, r5, lr}
   22b94:	4604      	mov	r4, r0
   22b96:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22b98:	2210      	movs	r2, #16
   22b9a:	2100      	movs	r1, #0
   22b9c:	f7fd fb76 	bl	2028c <memset>
   22ba0:	6065      	str	r5, [r4, #4]
}
   22ba2:	bd38      	pop	{r3, r4, r5, pc}

00022ba4 <k_work_submit_to_queue>:
{
   22ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22ba6:	9001      	str	r0, [sp, #4]
   22ba8:	4608      	mov	r0, r1
	__asm__ volatile(
   22baa:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bae:	f3ef 8511 	mrs	r5, BASEPRI
   22bb2:	f383 8811 	msr	BASEPRI, r3
   22bb6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   22bba:	a901      	add	r1, sp, #4
   22bbc:	f7fa f8a2 	bl	1cd04 <submit_to_queue_locked>
   22bc0:	4604      	mov	r4, r0
	__asm__ volatile(
   22bc2:	f385 8811 	msr	BASEPRI, r5
   22bc6:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   22bca:	2800      	cmp	r0, #0
   22bcc:	dd04      	ble.n	22bd8 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   22bce:	f7fa fc9d 	bl	1d50c <z_impl_k_is_preempt_thread>
   22bd2:	b108      	cbz	r0, 22bd8 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   22bd4:	f7fa fc20 	bl	1d418 <z_impl_k_yield>
}
   22bd8:	4620      	mov	r0, r4
   22bda:	b003      	add	sp, #12
   22bdc:	bd30      	pop	{r4, r5, pc}

00022bde <k_work_init_delayable>:
{
   22bde:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   22be0:	2230      	movs	r2, #48	; 0x30
{
   22be2:	4604      	mov	r4, r0
   22be4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   22be6:	2100      	movs	r1, #0
   22be8:	f7fd fb50 	bl	2028c <memset>
   22bec:	f44f 7380 	mov.w	r3, #256	; 0x100
   22bf0:	6065      	str	r5, [r4, #4]
   22bf2:	60e3      	str	r3, [r4, #12]
}
   22bf4:	bd38      	pop	{r3, r4, r5, pc}

00022bf6 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   22bf6:	b538      	push	{r3, r4, r5, lr}
   22bf8:	4604      	mov	r4, r0
	__asm__ volatile(
   22bfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bfe:	f3ef 8511 	mrs	r5, BASEPRI
   22c02:	f383 8811 	msr	BASEPRI, r3
   22c06:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   22c0a:	f7ff ff62 	bl	22ad2 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22c0e:	4620      	mov	r0, r4
   22c10:	f7ff ff6d 	bl	22aee <cancel_async_locked>
	__asm__ volatile(
   22c14:	f385 8811 	msr	BASEPRI, r5
   22c18:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   22c1c:	bd38      	pop	{r3, r4, r5, pc}

00022c1e <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   22c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c20:	4604      	mov	r4, r0
   22c22:	460d      	mov	r5, r1
	__asm__ volatile(
   22c24:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c28:	f3ef 8711 	mrs	r7, BASEPRI
   22c2c:	f383 8811 	msr	BASEPRI, r3
   22c30:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22c34:	f3bf 8f5b 	dmb	ish
   22c38:	68c3      	ldr	r3, [r0, #12]
   22c3a:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   22c3e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   22c42:	2b00      	cmp	r3, #0
   22c44:	bf14      	ite	ne
   22c46:	2601      	movne	r6, #1
   22c48:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   22c4a:	d009      	beq.n	22c60 <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   22c4c:	f7ff ff41 	bl	22ad2 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22c50:	4620      	mov	r0, r4
   22c52:	f7ff ff4c 	bl	22aee <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   22c56:	4629      	mov	r1, r5
   22c58:	4620      	mov	r0, r4
   22c5a:	f7fa f835 	bl	1ccc8 <cancel_sync_locked>
   22c5e:	4603      	mov	r3, r0
	__asm__ volatile(
   22c60:	f387 8811 	msr	BASEPRI, r7
   22c64:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   22c68:	b13b      	cbz	r3, 22c7a <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   22c6a:	f04f 32ff 	mov.w	r2, #4294967295
   22c6e:	f04f 33ff 	mov.w	r3, #4294967295
   22c72:	f105 0008 	add.w	r0, r5, #8
   22c76:	f7f9 ff23 	bl	1cac0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   22c7a:	4630      	mov	r0, r6
   22c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022c7e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   22c7e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22c82:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22c84:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22c86:	2300      	movs	r3, #0
	node->prev = NULL;
   22c88:	e9c0 3300 	strd	r3, r3, [r0]
}
   22c8c:	4770      	bx	lr

00022c8e <unpend_thread_no_timeout>:
{
   22c8e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   22c90:	f7ff fff5 	bl	22c7e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22c94:	7b43      	ldrb	r3, [r0, #13]
   22c96:	f023 0302 	bic.w	r3, r3, #2
   22c9a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   22c9c:	2300      	movs	r3, #0
   22c9e:	6083      	str	r3, [r0, #8]
}
   22ca0:	bd08      	pop	{r3, pc}

00022ca2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   22ca2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   22ca6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   22caa:	4283      	cmp	r3, r0
		return b2 - b1;
   22cac:	bf14      	ite	ne
   22cae:	1ac0      	subne	r0, r0, r3
	return 0;
   22cb0:	2000      	moveq	r0, #0
}
   22cb2:	4770      	bx	lr

00022cb4 <z_unpend_thread_no_timeout>:
{
   22cb4:	b508      	push	{r3, lr}
	__asm__ volatile(
   22cb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cba:	f3ef 8111 	mrs	r1, BASEPRI
   22cbe:	f383 8811 	msr	BASEPRI, r3
   22cc2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22cc6:	f7ff ffe2 	bl	22c8e <unpend_thread_no_timeout>
	__asm__ volatile(
   22cca:	f381 8811 	msr	BASEPRI, r1
   22cce:	f3bf 8f6f 	isb	sy
}
   22cd2:	bd08      	pop	{r3, pc}

00022cd4 <z_unpend_thread>:
{
   22cd4:	b510      	push	{r4, lr}
	__asm__ volatile(
   22cd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cda:	f3ef 8411 	mrs	r4, BASEPRI
   22cde:	f383 8811 	msr	BASEPRI, r3
   22ce2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22ce6:	f7ff ffd2 	bl	22c8e <unpend_thread_no_timeout>
	__asm__ volatile(
   22cea:	f384 8811 	msr	BASEPRI, r4
   22cee:	f3bf 8f6f 	isb	sy
}
   22cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22cf6:	3018      	adds	r0, #24
   22cf8:	f000 b8d9 	b.w	22eae <z_abort_timeout>

00022cfc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22cfc:	4603      	mov	r3, r0
   22cfe:	b920      	cbnz	r0, 22d0a <z_reschedule_irqlock+0xe>
   22d00:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   22d04:	b90a      	cbnz	r2, 22d0a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   22d06:	f7ef bc8d 	b.w	12624 <arch_swap>
   22d0a:	f383 8811 	msr	BASEPRI, r3
   22d0e:	f3bf 8f6f 	isb	sy
}
   22d12:	4770      	bx	lr

00022d14 <z_reschedule_unlocked>:
	__asm__ volatile(
   22d14:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d18:	f3ef 8011 	mrs	r0, BASEPRI
   22d1c:	f383 8811 	msr	BASEPRI, r3
   22d20:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22d24:	f7ff bfea 	b.w	22cfc <z_reschedule_irqlock>

00022d28 <z_priq_dumb_best>:
{
   22d28:	4603      	mov	r3, r0
	return list->head == list;
   22d2a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d2c:	4283      	cmp	r3, r0
   22d2e:	d003      	beq.n	22d38 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   22d30:	2800      	cmp	r0, #0
   22d32:	bf38      	it	cc
   22d34:	2000      	movcc	r0, #0
   22d36:	4770      	bx	lr
	struct k_thread *thread = NULL;
   22d38:	2000      	movs	r0, #0
}
   22d3a:	4770      	bx	lr

00022d3c <add_to_waitq_locked>:
{
   22d3c:	b538      	push	{r3, r4, r5, lr}
   22d3e:	4604      	mov	r4, r0
   22d40:	460d      	mov	r5, r1
	unready_thread(thread);
   22d42:	f7fa f961 	bl	1d008 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22d46:	7b63      	ldrb	r3, [r4, #13]
   22d48:	f043 0302 	orr.w	r3, r3, #2
   22d4c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22d4e:	b1b5      	cbz	r5, 22d7e <add_to_waitq_locked+0x42>
	return list->head == list;
   22d50:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   22d52:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d54:	429d      	cmp	r5, r3
   22d56:	bf08      	it	eq
   22d58:	2300      	moveq	r3, #0
   22d5a:	2b00      	cmp	r3, #0
   22d5c:	bf38      	it	cc
   22d5e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22d60:	b19b      	cbz	r3, 22d8a <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   22d62:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22d66:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   22d6a:	4291      	cmp	r1, r2
   22d6c:	d008      	beq.n	22d80 <add_to_waitq_locked+0x44>
		return b2 - b1;
   22d6e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   22d70:	2a00      	cmp	r2, #0
   22d72:	dd05      	ble.n	22d80 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   22d74:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22d76:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22d7a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22d7c:	605c      	str	r4, [r3, #4]
}
   22d7e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   22d80:	686a      	ldr	r2, [r5, #4]
   22d82:	4293      	cmp	r3, r2
   22d84:	d001      	beq.n	22d8a <add_to_waitq_locked+0x4e>
   22d86:	681b      	ldr	r3, [r3, #0]
   22d88:	e7ea      	b.n	22d60 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   22d8a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22d8c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22d90:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22d92:	606c      	str	r4, [r5, #4]
   22d94:	e7f3      	b.n	22d7e <add_to_waitq_locked+0x42>

00022d96 <z_ready_thread>:
{
   22d96:	b510      	push	{r4, lr}
   22d98:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d9c:	f3ef 8411 	mrs	r4, BASEPRI
   22da0:	f383 8811 	msr	BASEPRI, r3
   22da4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   22da8:	f7fa fa88 	bl	1d2bc <ready_thread>
	__asm__ volatile(
   22dac:	f384 8811 	msr	BASEPRI, r4
   22db0:	f3bf 8f6f 	isb	sy
}
   22db4:	bd10      	pop	{r4, pc}

00022db6 <z_thread_timeout>:
{
   22db6:	b510      	push	{r4, lr}
   22db8:	4601      	mov	r1, r0
	__asm__ volatile(
   22dba:	f04f 0340 	mov.w	r3, #64	; 0x40
   22dbe:	f3ef 8411 	mrs	r4, BASEPRI
   22dc2:	f383 8811 	msr	BASEPRI, r3
   22dc6:	f3bf 8f6f 	isb	sy
		if (!killed) {
   22dca:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   22dce:	f013 0f28 	tst.w	r3, #40	; 0x28
   22dd2:	d10d      	bne.n	22df0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   22dd4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   22dd8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   22dda:	b10b      	cbz	r3, 22de0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   22ddc:	f7ff ff57 	bl	22c8e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22de0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   22de4:	f023 0314 	bic.w	r3, r3, #20
   22de8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   22dec:	f7fa fa66 	bl	1d2bc <ready_thread>
	__asm__ volatile(
   22df0:	f384 8811 	msr	BASEPRI, r4
   22df4:	f3bf 8f6f 	isb	sy
}
   22df8:	bd10      	pop	{r4, pc}

00022dfa <z_unpend1_no_timeout>:
{
   22dfa:	b510      	push	{r4, lr}
	__asm__ volatile(
   22dfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e00:	f3ef 8411 	mrs	r4, BASEPRI
   22e04:	f383 8811 	msr	BASEPRI, r3
   22e08:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22e0c:	f7ff ff8c 	bl	22d28 <z_priq_dumb_best>
		if (thread != NULL) {
   22e10:	4601      	mov	r1, r0
   22e12:	b108      	cbz	r0, 22e18 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   22e14:	f7ff ff3b 	bl	22c8e <unpend_thread_no_timeout>
	__asm__ volatile(
   22e18:	f384 8811 	msr	BASEPRI, r4
   22e1c:	f3bf 8f6f 	isb	sy
}
   22e20:	4608      	mov	r0, r1
   22e22:	bd10      	pop	{r4, pc}

00022e24 <z_unpend_first_thread>:
{
   22e24:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22e26:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e2a:	f3ef 8511 	mrs	r5, BASEPRI
   22e2e:	f383 8811 	msr	BASEPRI, r3
   22e32:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22e36:	f7ff ff77 	bl	22d28 <z_priq_dumb_best>
		if (thread != NULL) {
   22e3a:	4604      	mov	r4, r0
   22e3c:	b120      	cbz	r0, 22e48 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   22e3e:	f7ff ff26 	bl	22c8e <unpend_thread_no_timeout>
   22e42:	3018      	adds	r0, #24
   22e44:	f000 f833 	bl	22eae <z_abort_timeout>
	__asm__ volatile(
   22e48:	f385 8811 	msr	BASEPRI, r5
   22e4c:	f3bf 8f6f 	isb	sy
}
   22e50:	4620      	mov	r0, r4
   22e52:	bd38      	pop	{r3, r4, r5, pc}

00022e54 <z_unpend_all>:
{
   22e54:	b538      	push	{r3, r4, r5, lr}
   22e56:	4605      	mov	r5, r0
	int need_sched = 0;
   22e58:	2000      	movs	r0, #0
	return list->head == list;
   22e5a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e5c:	42a5      	cmp	r5, r4
   22e5e:	d000      	beq.n	22e62 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22e60:	b904      	cbnz	r4, 22e64 <z_unpend_all+0x10>
}
   22e62:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   22e64:	4620      	mov	r0, r4
   22e66:	f7ff ff35 	bl	22cd4 <z_unpend_thread>
		z_ready_thread(thread);
   22e6a:	4620      	mov	r0, r4
   22e6c:	f7ff ff93 	bl	22d96 <z_ready_thread>
		need_sched = 1;
   22e70:	2001      	movs	r0, #1
   22e72:	e7f2      	b.n	22e5a <z_unpend_all+0x6>

00022e74 <z_sched_wake>:
{
   22e74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22e76:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e7a:	f3ef 8511 	mrs	r5, BASEPRI
   22e7e:	f383 8811 	msr	BASEPRI, r3
   22e82:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22e86:	f7ff ff4f 	bl	22d28 <z_priq_dumb_best>
		if (thread != NULL) {
   22e8a:	4604      	mov	r4, r0
   22e8c:	b150      	cbz	r0, 22ea4 <z_sched_wake+0x30>
   22e8e:	67c1      	str	r1, [r0, #124]	; 0x7c
   22e90:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   22e92:	f7ff fefc 	bl	22c8e <unpend_thread_no_timeout>
   22e96:	3018      	adds	r0, #24
   22e98:	f000 f809 	bl	22eae <z_abort_timeout>
			ready_thread(thread);
   22e9c:	4620      	mov	r0, r4
   22e9e:	f7fa fa0d 	bl	1d2bc <ready_thread>
			ret = true;
   22ea2:	2001      	movs	r0, #1
	__asm__ volatile(
   22ea4:	f385 8811 	msr	BASEPRI, r5
   22ea8:	f3bf 8f6f 	isb	sy
}
   22eac:	bd38      	pop	{r3, r4, r5, pc}

00022eae <z_abort_timeout>:
{
   22eae:	b510      	push	{r4, lr}
	__asm__ volatile(
   22eb0:	f04f 0240 	mov.w	r2, #64	; 0x40
   22eb4:	f3ef 8411 	mrs	r4, BASEPRI
   22eb8:	f382 8811 	msr	BASEPRI, r2
   22ebc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   22ec0:	6803      	ldr	r3, [r0, #0]
   22ec2:	b13b      	cbz	r3, 22ed4 <z_abort_timeout+0x26>
			remove_timeout(to);
   22ec4:	f7fa fbba 	bl	1d63c <remove_timeout>
			ret = 0;
   22ec8:	2000      	movs	r0, #0
	__asm__ volatile(
   22eca:	f384 8811 	msr	BASEPRI, r4
   22ece:	f3bf 8f6f 	isb	sy
}
   22ed2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22ed4:	f06f 0015 	mvn.w	r0, #21
   22ed8:	e7f7      	b.n	22eca <z_abort_timeout+0x1c>

00022eda <z_timeout_remaining>:
{
   22eda:	b510      	push	{r4, lr}
	__asm__ volatile(
   22edc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ee0:	f3ef 8411 	mrs	r4, BASEPRI
   22ee4:	f383 8811 	msr	BASEPRI, r3
   22ee8:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   22eec:	f7fa fbec 	bl	1d6c8 <timeout_rem>
	__asm__ volatile(
   22ef0:	f384 8811 	msr	BASEPRI, r4
   22ef4:	f3bf 8f6f 	isb	sy
}
   22ef8:	bd10      	pop	{r4, pc}

00022efa <z_get_next_timeout_expiry>:
{
   22efa:	b510      	push	{r4, lr}
	__asm__ volatile(
   22efc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f00:	f3ef 8411 	mrs	r4, BASEPRI
   22f04:	f383 8811 	msr	BASEPRI, r3
   22f08:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   22f0c:	f7fa fbb0 	bl	1d670 <next_timeout>
	__asm__ volatile(
   22f10:	f384 8811 	msr	BASEPRI, r4
   22f14:	f3bf 8f6f 	isb	sy
}
   22f18:	bd10      	pop	{r4, pc}

00022f1a <z_set_timeout_expiry>:
{
   22f1a:	b570      	push	{r4, r5, r6, lr}
   22f1c:	4604      	mov	r4, r0
   22f1e:	460d      	mov	r5, r1
	__asm__ volatile(
   22f20:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f24:	f3ef 8611 	mrs	r6, BASEPRI
   22f28:	f383 8811 	msr	BASEPRI, r3
   22f2c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   22f30:	f7fa fb9e 	bl	1d670 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22f34:	2801      	cmp	r0, #1
   22f36:	dd05      	ble.n	22f44 <z_set_timeout_expiry+0x2a>
   22f38:	42a0      	cmp	r0, r4
   22f3a:	db03      	blt.n	22f44 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   22f3c:	4629      	mov	r1, r5
   22f3e:	4620      	mov	r0, r4
   22f40:	f7ef f984 	bl	1224c <sys_clock_set_timeout>
	__asm__ volatile(
   22f44:	f386 8811 	msr	BASEPRI, r6
   22f48:	f3bf 8f6f 	isb	sy
}
   22f4c:	bd70      	pop	{r4, r5, r6, pc}

00022f4e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   22f4e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   22f50:	f7fa fcd4 	bl	1d8fc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   22f54:	bd08      	pop	{r3, pc}

00022f56 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   22f56:	b108      	cbz	r0, 22f5c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   22f58:	f7f0 b8ba 	b.w	130d0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   22f5c:	4770      	bx	lr

00022f5e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   22f5e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22f60:	1c4b      	adds	r3, r1, #1
   22f62:	bf08      	it	eq
   22f64:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   22f68:	4604      	mov	r4, r0
   22f6a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22f6c:	d013      	beq.n	22f96 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22f6e:	ea54 0105 	orrs.w	r1, r4, r5
   22f72:	d103      	bne.n	22f7c <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   22f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   22f78:	f7fa bcc0 	b.w	1d8fc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   22f7c:	f06f 0101 	mvn.w	r1, #1
   22f80:	1a0a      	subs	r2, r1, r0
   22f82:	f04f 31ff 	mov.w	r1, #4294967295
   22f86:	eb61 0305 	sbc.w	r3, r1, r5
   22f8a:	2a00      	cmp	r2, #0
   22f8c:	f173 0100 	sbcs.w	r1, r3, #0
   22f90:	db02      	blt.n	22f98 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   22f92:	4610      	mov	r0, r2
   22f94:	4619      	mov	r1, r3
}
   22f96:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   22f98:	f7fa fcb0 	bl	1d8fc <sys_clock_tick_get>
   22f9c:	2c01      	cmp	r4, #1
   22f9e:	f175 0300 	sbcs.w	r3, r5, #0
   22fa2:	bfbc      	itt	lt
   22fa4:	2401      	movlt	r4, #1
   22fa6:	2500      	movlt	r5, #0
   22fa8:	1820      	adds	r0, r4, r0
   22faa:	eb45 0101 	adc.w	r1, r5, r1
   22fae:	e7f2      	b.n	22f96 <sys_clock_timeout_end_calc+0x38>

00022fb0 <k_timer_init>:
	timer->status = 0U;
   22fb0:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   22fb2:	e9c0 1208 	strd	r1, r2, [r0, #32]
   22fb6:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   22fba:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   22fbe:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   22fc2:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   22fc4:	6343      	str	r3, [r0, #52]	; 0x34
}
   22fc6:	4770      	bx	lr

00022fc8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   22fc8:	b510      	push	{r4, lr}
   22fca:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   22fcc:	f7ff ff6f 	bl	22eae <z_abort_timeout>

	if (inactive) {
   22fd0:	b9b0      	cbnz	r0, 23000 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   22fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22fd4:	b10b      	cbz	r3, 22fda <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   22fd6:	4620      	mov	r0, r4
   22fd8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   22fda:	f104 0018 	add.w	r0, r4, #24
   22fde:	f7ff ff0c 	bl	22dfa <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   22fe2:	b168      	cbz	r0, 23000 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   22fe4:	f7ff fed7 	bl	22d96 <z_ready_thread>
	__asm__ volatile(
   22fe8:	f04f 0340 	mov.w	r3, #64	; 0x40
   22fec:	f3ef 8011 	mrs	r0, BASEPRI
   22ff0:	f383 8811 	msr	BASEPRI, r3
   22ff4:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   22ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   22ffc:	f7ff be7e 	b.w	22cfc <z_reschedule_irqlock>
   23000:	bd10      	pop	{r4, pc}

00023002 <clear_event_registrations>:
	while (num_events--) {
   23002:	2314      	movs	r3, #20
{
   23004:	b570      	push	{r4, r5, r6, lr}
   23006:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2300a:	2400      	movs	r4, #0
   2300c:	2601      	movs	r6, #1
	while (num_events--) {
   2300e:	4281      	cmp	r1, r0
   23010:	d100      	bne.n	23014 <clear_event_registrations+0x12>
}
   23012:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   23014:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   23018:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2301c:	f003 031f 	and.w	r3, r3, #31
   23020:	2b08      	cmp	r3, #8
   23022:	d80d      	bhi.n	23040 <clear_event_registrations+0x3e>
   23024:	fa06 f303 	lsl.w	r3, r6, r3
   23028:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2302c:	d008      	beq.n	23040 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2302e:	f851 3c14 	ldr.w	r3, [r1, #-20]
   23032:	b12b      	cbz	r3, 23040 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   23034:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   23038:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2303a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2303c:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   23040:	f382 8811 	msr	BASEPRI, r2
   23044:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23048:	f04f 0340 	mov.w	r3, #64	; 0x40
   2304c:	f3ef 8211 	mrs	r2, BASEPRI
   23050:	f383 8811 	msr	BASEPRI, r3
   23054:	f3bf 8f6f 	isb	sy
   23058:	3914      	subs	r1, #20
   2305a:	e7d8      	b.n	2300e <clear_event_registrations+0xc>

0002305c <add_event>:
{
   2305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2305e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   23060:	e9d0 2300 	ldrd	r2, r3, [r0]
   23064:	4290      	cmp	r0, r2
   23066:	4604      	mov	r4, r0
   23068:	460d      	mov	r5, r1
   2306a:	d105      	bne.n	23078 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2306c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2306e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   23072:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23074:	6065      	str	r5, [r4, #4]
}
   23076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   23078:	2b00      	cmp	r3, #0
   2307a:	d0f7      	beq.n	2306c <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2307c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2307e:	b100      	cbz	r0, 23082 <add_event+0x26>
   23080:	3860      	subs	r0, #96	; 0x60
   23082:	b107      	cbz	r7, 23086 <add_event+0x2a>
   23084:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23086:	4639      	mov	r1, r7
   23088:	f7ff fe0b 	bl	22ca2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2308c:	2800      	cmp	r0, #0
   2308e:	dced      	bgt.n	2306c <add_event+0x10>
	return list->head == list;
   23090:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23092:	42b4      	cmp	r4, r6
   23094:	d0ea      	beq.n	2306c <add_event+0x10>
   23096:	2e00      	cmp	r6, #0
   23098:	bf38      	it	cc
   2309a:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2309c:	2e00      	cmp	r6, #0
   2309e:	d0e5      	beq.n	2306c <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   230a0:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   230a2:	b101      	cbz	r1, 230a6 <add_event+0x4a>
   230a4:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   230a6:	4638      	mov	r0, r7
   230a8:	f7ff fdfb 	bl	22ca2 <z_sched_prio_cmp>
   230ac:	2800      	cmp	r0, #0
   230ae:	dd05      	ble.n	230bc <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   230b0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   230b2:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   230b6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   230b8:	6075      	str	r5, [r6, #4]
			return;
   230ba:	e7dc      	b.n	23076 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   230bc:	6863      	ldr	r3, [r4, #4]
   230be:	42b3      	cmp	r3, r6
   230c0:	d0d4      	beq.n	2306c <add_event+0x10>
   230c2:	6836      	ldr	r6, [r6, #0]
   230c4:	e7ea      	b.n	2309c <add_event+0x40>

000230c6 <register_events>:
{
   230c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   230ca:	2500      	movs	r5, #0
{
   230cc:	468b      	mov	fp, r1
   230ce:	4614      	mov	r4, r2
   230d0:	461f      	mov	r7, r3
   230d2:	4682      	mov	sl, r0
	int events_registered = 0;
   230d4:	462e      	mov	r6, r5
	event->poller = NULL;
   230d6:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   230d8:	455d      	cmp	r5, fp
   230da:	db02      	blt.n	230e2 <register_events+0x1c>
}
   230dc:	4630      	mov	r0, r6
   230de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   230e6:	f3ef 8911 	mrs	r9, BASEPRI
   230ea:	f383 8811 	msr	BASEPRI, r3
   230ee:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   230f2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   230f6:	f003 031f 	and.w	r3, r3, #31
   230fa:	3b01      	subs	r3, #1
   230fc:	2b07      	cmp	r3, #7
   230fe:	d80f      	bhi.n	23120 <register_events+0x5a>
   23100:	e8df f003 	tbb	[pc, r3]
   23104:	0a0e041e 	.word	0x0a0e041e
   23108:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2310c:	f8da 3010 	ldr.w	r3, [sl, #16]
   23110:	689b      	ldr	r3, [r3, #8]
   23112:	b12b      	cbz	r3, 23120 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   23114:	2302      	movs	r3, #2
   23116:	e020      	b.n	2315a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   23118:	f8da 3010 	ldr.w	r3, [sl, #16]
   2311c:	681b      	ldr	r3, [r3, #0]
   2311e:	bb8b      	cbnz	r3, 23184 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   23120:	bb47      	cbnz	r7, 23174 <register_events+0xae>
   23122:	7823      	ldrb	r3, [r4, #0]
   23124:	b333      	cbz	r3, 23174 <register_events+0xae>
	switch (event->type) {
   23126:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2312a:	f003 031f 	and.w	r3, r3, #31
   2312e:	3b01      	subs	r3, #1
   23130:	2b07      	cmp	r3, #7
   23132:	d830      	bhi.n	23196 <register_events+0xd0>
   23134:	e8df f003 	tbb	[pc, r3]
   23138:	282f2833 	.word	0x282f2833
   2313c:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   23140:	f8da 3010 	ldr.w	r3, [sl, #16]
   23144:	689b      	ldr	r3, [r3, #8]
   23146:	2b00      	cmp	r3, #0
   23148:	d0ea      	beq.n	23120 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2314a:	2301      	movs	r3, #1
   2314c:	e005      	b.n	2315a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2314e:	f8da 3010 	ldr.w	r3, [sl, #16]
   23152:	6a1b      	ldr	r3, [r3, #32]
   23154:	2b00      	cmp	r3, #0
   23156:	d0e3      	beq.n	23120 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   23158:	2310      	movs	r3, #16
	event->state |= state;
   2315a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2315e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   23162:	f3c2 3145 	ubfx	r1, r2, #13, #6
   23166:	430b      	orrs	r3, r1
   23168:	f363 3252 	bfi	r2, r3, #13, #6
   2316c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   23170:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   23174:	f389 8811 	msr	BASEPRI, r9
   23178:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2317c:	3501      	adds	r5, #1
   2317e:	f10a 0a14 	add.w	sl, sl, #20
   23182:	e7a9      	b.n	230d8 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23184:	2304      	movs	r3, #4
   23186:	e7e8      	b.n	2315a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   23188:	f8da 0010 	ldr.w	r0, [sl, #16]
   2318c:	4622      	mov	r2, r4
   2318e:	4651      	mov	r1, sl
   23190:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   23192:	f7ff ff63 	bl	2305c <add_event>
	event->poller = poller;
   23196:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2319a:	3601      	adds	r6, #1
   2319c:	e7ea      	b.n	23174 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2319e:	f8da 0010 	ldr.w	r0, [sl, #16]
   231a2:	4622      	mov	r2, r4
   231a4:	4651      	mov	r1, sl
   231a6:	e7f4      	b.n	23192 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   231a8:	f8da 0010 	ldr.w	r0, [sl, #16]
   231ac:	4622      	mov	r2, r4
   231ae:	4651      	mov	r1, sl
   231b0:	3024      	adds	r0, #36	; 0x24
   231b2:	e7ee      	b.n	23192 <register_events+0xcc>

000231b4 <signal_poll_event>:
{
   231b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   231b8:	6884      	ldr	r4, [r0, #8]
{
   231ba:	4605      	mov	r5, r0
   231bc:	460e      	mov	r6, r1
	if (poller != NULL) {
   231be:	b144      	cbz	r4, 231d2 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   231c0:	7863      	ldrb	r3, [r4, #1]
   231c2:	2b01      	cmp	r3, #1
   231c4:	d138      	bne.n	23238 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   231c6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   231ca:	f013 0302 	ands.w	r3, r3, #2
   231ce:	d10a      	bne.n	231e6 <signal_poll_event+0x32>
		poller->is_polling = false;
   231d0:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   231d2:	68eb      	ldr	r3, [r5, #12]
   231d4:	f3c3 3145 	ubfx	r1, r3, #13, #6
   231d8:	430e      	orrs	r6, r1
	event->poller = NULL;
   231da:	2000      	movs	r0, #0
	event->state |= state;
   231dc:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   231e0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   231e2:	60eb      	str	r3, [r5, #12]
	return retcode;
   231e4:	e00d      	b.n	23202 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   231e6:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   231ea:	f04f 31ff 	mov.w	r1, #4294967295
   231ee:	f06f 0001 	mvn.w	r0, #1
   231f2:	428b      	cmp	r3, r1
   231f4:	bf08      	it	eq
   231f6:	4282      	cmpeq	r2, r0
   231f8:	d105      	bne.n	23206 <signal_poll_event+0x52>
		poller->is_polling = false;
   231fa:	2300      	movs	r3, #0
   231fc:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   231fe:	f06f 000a 	mvn.w	r0, #10
}
   23202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23206:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2320a:	4640      	mov	r0, r8
   2320c:	f7ff fd62 	bl	22cd4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   23210:	2e08      	cmp	r6, #8
   23212:	bf0c      	ite	eq
   23214:	f06f 0303 	mvneq.w	r3, #3
   23218:	2300      	movne	r3, #0
   2321a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2321c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   23220:	06db      	lsls	r3, r3, #27
   23222:	d102      	bne.n	2322a <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   23224:	f854 7c48 	ldr.w	r7, [r4, #-72]
   23228:	b10f      	cbz	r7, 2322e <signal_poll_event+0x7a>
		poller->is_polling = false;
   2322a:	2300      	movs	r3, #0
   2322c:	e7d0      	b.n	231d0 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2322e:	4640      	mov	r0, r8
   23230:	f7ff fdb1 	bl	22d96 <z_ready_thread>
		poller->is_polling = false;
   23234:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   23236:	e7cc      	b.n	231d2 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   23238:	2b02      	cmp	r3, #2
   2323a:	d1f6      	bne.n	2322a <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2323c:	7823      	ldrb	r3, [r4, #0]
   2323e:	2b00      	cmp	r3, #0
   23240:	d0c7      	beq.n	231d2 <signal_poll_event+0x1e>
   23242:	f854 7c04 	ldr.w	r7, [r4, #-4]
   23246:	2f00      	cmp	r7, #0
   23248:	d0f4      	beq.n	23234 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2324a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2324e:	f1a4 0914 	sub.w	r9, r4, #20
   23252:	f104 0014 	add.w	r0, r4, #20
   23256:	f7ff fe2a 	bl	22eae <z_abort_timeout>
		twork->poll_result = 0;
   2325a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2325e:	4649      	mov	r1, r9
   23260:	4638      	mov	r0, r7
   23262:	f7ff fc9f 	bl	22ba4 <k_work_submit_to_queue>
		poller->is_polling = false;
   23266:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2326a:	e7b2      	b.n	231d2 <signal_poll_event+0x1e>

0002326c <k_poll_event_init>:
{
   2326c:	b510      	push	{r4, lr}
	event->type = type;
   2326e:	04d2      	lsls	r2, r2, #19
   23270:	0209      	lsls	r1, r1, #8
   23272:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   23276:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2327a:	430a      	orrs	r2, r1
   2327c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2327e:	2400      	movs	r4, #0
	event->type = type;
   23280:	430a      	orrs	r2, r1
	event->obj = obj;
   23282:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   23286:	6084      	str	r4, [r0, #8]
}
   23288:	bd10      	pop	{r4, pc}

0002328a <z_handle_obj_poll_events>:
{
   2328a:	4603      	mov	r3, r0
	return list->head == list;
   2328c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2328e:	4283      	cmp	r3, r0
   23290:	d008      	beq.n	232a4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   23292:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23296:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23298:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2329a:	2300      	movs	r3, #0
	node->prev = NULL;
   2329c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   232a0:	f7ff bf88 	b.w	231b4 <signal_poll_event>
}
   232a4:	4770      	bx	lr

000232a6 <k_free>:
	if (ptr != NULL) {
   232a6:	b120      	cbz	r0, 232b2 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   232a8:	1f01      	subs	r1, r0, #4
   232aa:	f850 0c04 	ldr.w	r0, [r0, #-4]
   232ae:	f7ff bab0 	b.w	22812 <k_heap_free>
}
   232b2:	4770      	bx	lr

000232b4 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   232b4:	4770      	bx	lr

000232b6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   232b6:	4770      	bx	lr
