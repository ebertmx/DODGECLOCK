
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20004760 	.word	0x20004760
}
   4:	00011679 	.word	0x00011679
   8:	0001d719 	.word	0x0001d719
   c:	000116cd 	.word	0x000116cd
  10:	000116cd 	.word	0x000116cd
  14:	000116cd 	.word	0x000116cd
  18:	000116cd 	.word	0x000116cd
	...
  2c:	000113e1 	.word	0x000113e1
  30:	000116cd 	.word	0x000116cd
  34:	00000000 	.word	0x00000000
  38:	0001138d 	.word	0x0001138d
  3c:	0001c577 	.word	0x0001c577

00000040 <_irq_vector_table>:
  40:	00011639 0001fac7 00011639 00011639     9.......9...9...
  50:	00011639 00011639 00011639 00011639     9...9...9...9...
  60:	0001fa8f 00011639 00011639 0001faad     ....9...9.......
  70:	00011639 00011639 00011639 00011639     9...9...9...9...
  80:	00011639 00011639 00011639 00011639     9...9...9...9...
  90:	00011639 00011639 00011639 00011639     9...9...9...9...
  a0:	00011639 00011639 00011639 00011639     9...9...9...9...
  b0:	00011639 00011639 00011639 00011639     9...9...9...9...
  c0:	00011639 00011639 00011639 00011639     9...9...9...9...
  d0:	00011639 00011639 00011639              9...9...9...

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b96c 	b.w	3d0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8082 	bne.w	226 <CONFIG_FLASH_SIZE+0x26>
     122:	428a      	cmp	r2, r1
     124:	4617      	mov	r7, r2
     126:	d946      	bls.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     128:	fab2 f282 	clz	r2, r2
     12c:	b14a      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa05 f302 	lsl.w	r3, r5, r2
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
     13c:	ea41 0e03 	orr.w	lr, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 4817 	mov.w	r8, r7, lsr #16
     146:	0c23      	lsrs	r3, r4, #16
     148:	fbbe fcf8 	udiv	ip, lr, r8
     14c:	b2b9      	uxth	r1, r7
     14e:	fb08 ee1c 	mls	lr, r8, ip, lr
     152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     156:	fb0c f001 	mul.w	r0, ip, r1
     15a:	4298      	cmp	r0, r3
     15c:	d90a      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15e:	18fb      	adds	r3, r7, r3
     160:	f10c 35ff 	add.w	r5, ip, #4294967295
     164:	f080 8116 	bcs.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x53>
     168:	4298      	cmp	r0, r3
     16a:	f240 8113 	bls.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x53>
     16e:	f1ac 0c02 	sub.w	ip, ip, #2
     172:	443b      	add	r3, r7
     174:	1a1b      	subs	r3, r3, r0
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f8 	udiv	r0, r3, r8
     17c:	fb08 3310 	mls	r3, r8, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f101 	mul.w	r1, r0, r1
     188:	42a1      	cmp	r1, r4
     18a:	d909      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     18c:	193c      	adds	r4, r7, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295
     192:	f080 8101 	bcs.w	398 <CONFIG_BT_DEVICE_APPEARANCE+0x57>
     196:	42a1      	cmp	r1, r4
     198:	f240 80fe 	bls.w	398 <CONFIG_BT_DEVICE_APPEARANCE+0x57>
     19c:	3802      	subs	r0, #2
     19e:	443c      	add	r4, r7
     1a0:	1a64      	subs	r4, r4, r1
     1a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a6:	2100      	movs	r1, #0
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c6 4300 	strd	r4, r3, [r6]
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b6:	b902      	cbnz	r2, 1ba <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x70>
     1b8:	deff      	udf	#255	; 0xff
     1ba:	fab2 f282 	clz	r2, r2
     1be:	2a00      	cmp	r2, #0
     1c0:	d14f      	bne.n	262 <CONFIG_FLASH_SIZE+0x62>
     1c2:	1bcb      	subs	r3, r1, r7
     1c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c8:	fa1f f887 	uxth.w	r8, r7
     1cc:	2101      	movs	r1, #1
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c25      	lsrs	r5, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1dc:	fb08 f30c 	mul.w	r3, r8, ip
     1e0:	42ab      	cmp	r3, r5
     1e2:	d907      	bls.n	1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>
     1e4:	197d      	adds	r5, r7, r5
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ea:	d202      	bcs.n	1f2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa8>
     1ec:	42ab      	cmp	r3, r5
     1ee:	f200 80e7 	bhi.w	3c0 <CONFIG_BT_DEVICE_APPEARANCE+0x7f>
     1f2:	4684      	mov	ip, r0
     1f4:	1aed      	subs	r5, r5, r3
     1f6:	b2a3      	uxth	r3, r4
     1f8:	fbb5 f0fe 	udiv	r0, r5, lr
     1fc:	fb0e 5510 	mls	r5, lr, r0, r5
     200:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     204:	fb08 f800 	mul.w	r8, r8, r0
     208:	45a0      	cmp	r8, r4
     20a:	d907      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     20c:	193c      	adds	r4, r7, r4
     20e:	f100 33ff 	add.w	r3, r0, #4294967295
     212:	d202      	bcs.n	21a <CONFIG_FLASH_SIZE+0x1a>
     214:	45a0      	cmp	r8, r4
     216:	f200 80d7 	bhi.w	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x87>
     21a:	4618      	mov	r0, r3
     21c:	eba4 0408 	sub.w	r4, r4, r8
     220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     224:	e7c0      	b.n	1a8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5e>
     226:	428b      	cmp	r3, r1
     228:	d908      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22a:	2e00      	cmp	r6, #0
     22c:	f000 80af 	beq.w	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     230:	2100      	movs	r1, #0
     232:	e9c6 0500 	strd	r0, r5, [r6]
     236:	4608      	mov	r0, r1
     238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23c:	fab3 f183 	clz	r1, r3
     240:	2900      	cmp	r1, #0
     242:	d14b      	bne.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     244:	42ab      	cmp	r3, r5
     246:	d302      	bcc.n	24e <CONFIG_FLASH_SIZE+0x4e>
     248:	4282      	cmp	r2, r0
     24a:	f200 80b7 	bhi.w	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     24e:	1a84      	subs	r4, r0, r2
     250:	eb65 0303 	sbc.w	r3, r5, r3
     254:	2001      	movs	r0, #1
     256:	469e      	mov	lr, r3
     258:	2e00      	cmp	r6, #0
     25a:	d0aa      	beq.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     25c:	e9c6 4e00 	strd	r4, lr, [r6]
     260:	e7a7      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     262:	f1c2 0c20 	rsb	ip, r2, #32
     266:	fa01 f302 	lsl.w	r3, r1, r2
     26a:	4097      	lsls	r7, r2
     26c:	fa20 f00c 	lsr.w	r0, r0, ip
     270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     274:	fa21 fc0c 	lsr.w	ip, r1, ip
     278:	4318      	orrs	r0, r3
     27a:	fbbc f1fe 	udiv	r1, ip, lr
     27e:	0c05      	lsrs	r5, r0, #16
     280:	fb0e cc11 	mls	ip, lr, r1, ip
     284:	fa1f f887 	uxth.w	r8, r7
     288:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     28c:	fb01 f308 	mul.w	r3, r1, r8
     290:	42ab      	cmp	r3, r5
     292:	fa04 f402 	lsl.w	r4, r4, r2
     296:	d909      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     298:	197d      	adds	r5, r7, r5
     29a:	f101 3cff 	add.w	ip, r1, #4294967295
     29e:	f080 808b 	bcs.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f240 8088 	bls.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     2a8:	3902      	subs	r1, #2
     2aa:	443d      	add	r5, r7
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	b285      	uxth	r5, r0
     2b0:	fbb3 f0fe 	udiv	r0, r3, lr
     2b4:	fb0e 3310 	mls	r3, lr, r0, r3
     2b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2bc:	fb00 f308 	mul.w	r3, r0, r8
     2c0:	42ab      	cmp	r3, r5
     2c2:	d907      	bls.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     2c4:	197d      	adds	r5, r7, r5
     2c6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ca:	d271      	bcs.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     2cc:	42ab      	cmp	r3, r5
     2ce:	d96f      	bls.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     2d0:	3802      	subs	r0, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2da:	e778      	b.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     2dc:	f1c1 0c20 	rsb	ip, r1, #32
     2e0:	408b      	lsls	r3, r1
     2e2:	fa22 f70c 	lsr.w	r7, r2, ip
     2e6:	431f      	orrs	r7, r3
     2e8:	fa20 f40c 	lsr.w	r4, r0, ip
     2ec:	fa05 f301 	lsl.w	r3, r5, r1
     2f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f4:	fa25 f50c 	lsr.w	r5, r5, ip
     2f8:	431c      	orrs	r4, r3
     2fa:	0c23      	lsrs	r3, r4, #16
     2fc:	fbb5 f9fe 	udiv	r9, r5, lr
     300:	fa1f f887 	uxth.w	r8, r7
     304:	fb0e 5519 	mls	r5, lr, r9, r5
     308:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     30c:	fb09 fa08 	mul.w	sl, r9, r8
     310:	45aa      	cmp	sl, r5
     312:	fa02 f201 	lsl.w	r2, r2, r1
     316:	fa00 f301 	lsl.w	r3, r0, r1
     31a:	d908      	bls.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     31c:	197d      	adds	r5, r7, r5
     31e:	f109 30ff 	add.w	r0, r9, #4294967295
     322:	d247      	bcs.n	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     324:	45aa      	cmp	sl, r5
     326:	d945      	bls.n	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     328:	f1a9 0902 	sub.w	r9, r9, #2
     32c:	443d      	add	r5, r7
     32e:	eba5 050a 	sub.w	r5, r5, sl
     332:	b2a4      	uxth	r4, r4
     334:	fbb5 f0fe 	udiv	r0, r5, lr
     338:	fb0e 5510 	mls	r5, lr, r0, r5
     33c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45a0      	cmp	r8, r4
     346:	d907      	bls.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     348:	193c      	adds	r4, r7, r4
     34a:	f100 35ff 	add.w	r5, r0, #4294967295
     34e:	d22d      	bcs.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     350:	45a0      	cmp	r8, r4
     352:	d92b      	bls.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454c      	cmp	r4, r9
     366:	46c6      	mov	lr, r8
     368:	464d      	mov	r5, r9
     36a:	d319      	bcc.n	3a0 <CONFIG_BT_DEVICE_APPEARANCE+0x5f>
     36c:	d016      	beq.n	39c <CONFIG_BT_DEVICE_APPEARANCE+0x5b>
     36e:	b15e      	cbz	r6, 388 <CONFIG_BT_DEVICE_APPEARANCE+0x47>
     370:	ebb3 020e 	subs.w	r2, r3, lr
     374:	eb64 0405 	sbc.w	r4, r4, r5
     378:	fa04 fc0c 	lsl.w	ip, r4, ip
     37c:	40ca      	lsrs	r2, r1
     37e:	ea4c 0202 	orr.w	r2, ip, r2
     382:	40cc      	lsrs	r4, r1
     384:	e9c6 2400 	strd	r2, r4, [r6]
     388:	2100      	movs	r1, #0
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	4631      	mov	r1, r6
     390:	4630      	mov	r0, r6
     392:	e70e      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     394:	46ac      	mov	ip, r5
     396:	e6ed      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     398:	4618      	mov	r0, r3
     39a:	e701      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     39c:	4543      	cmp	r3, r8
     39e:	d2e6      	bcs.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3a0:	ebb8 0e02 	subs.w	lr, r8, r2
     3a4:	eb69 0507 	sbc.w	r5, r9, r7
     3a8:	3801      	subs	r0, #1
     3aa:	e7e0      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3ac:	4628      	mov	r0, r5
     3ae:	e7d3      	b.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     3b0:	4660      	mov	r0, ip
     3b2:	e78f      	b.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     3b4:	4681      	mov	r9, r0
     3b6:	e7ba      	b.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     3b8:	4661      	mov	r1, ip
     3ba:	e777      	b.n	2ac <CONFIG_FLASH_SIZE+0xac>
     3bc:	4608      	mov	r0, r1
     3be:	e74b      	b.n	258 <CONFIG_FLASH_SIZE+0x58>
     3c0:	f1ac 0c02 	sub.w	ip, ip, #2
     3c4:	443d      	add	r5, r7
     3c6:	e715      	b.n	1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>
     3c8:	3802      	subs	r0, #2
     3ca:	443c      	add	r4, r7
     3cc:	e726      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     3d4:	4801      	ldr	r0, [pc, #4]	; (3dc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     3d6:	7800      	ldrb	r0, [r0, #0]
     3d8:	4770      	bx	lr
     3da:	0000      	.short	0x0000
     3dc:	20000000 	.word	0x20000000

000003e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     3e0:	4904      	ldr	r1, [pc, #16]	; (3f4 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xc>)
     3e2:	780a      	ldrb	r2, [r1, #0]
     3e4:	4290      	cmp	r0, r2
     3e6:	d301      	bcc.n	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     3e8:	2000      	movs	r0, #0
     3ea:	4770      	bx	lr
     3ec:	6849      	ldr	r1, [r1, #4]
     3ee:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     3f2:	4770      	bx	lr
     3f4:	20000000 	.word	0x20000000
     3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     3fc:	4615      	mov	r5, r2
     3fe:	4604      	mov	r4, r0
     400:	f100 0208 	add.w	r2, r0, #8
     404:	1cc8      	adds	r0, r1, #3
     406:	4241      	negs	r1, r0
     408:	f8df c09c 	ldr.w	ip, [pc, #156]	; 4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     40c:	461f      	mov	r7, r3
     40e:	1a28      	subs	r0, r5, r0
     410:	2300      	movs	r3, #0
     412:	9e08      	ldr	r6, [sp, #32]
     414:	ebbc 0c05 	subs.w	ip, ip, r5
     418:	419b      	sbcs	r3, r3
     41a:	d204      	bcs.n	426 <CONFIG_BT_RX_STACK_SIZE+0x26>
     41c:	f240 51f1 	movw	r1, #1521	; 0x5f1
     420:	2070      	movs	r0, #112	; 0x70
     422:	f003 f955 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     426:	4b21      	ldr	r3, [pc, #132]	; (4ac <CONFIG_BT_HCI_ECC_STACK_SIZE+0x38>)
     428:	4299      	cmp	r1, r3
     42a:	dd04      	ble.n	436 <CONFIG_BT_RX_STACK_SIZE+0x36>
     42c:	f240 51f2 	movw	r1, #1522	; 0x5f2
     430:	2070      	movs	r0, #112	; 0x70
     432:	f003 f94d 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     436:	4b1e      	ldr	r3, [pc, #120]	; (4b0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3c>)
     438:	4299      	cmp	r1, r3
     43a:	da04      	bge.n	446 <CONFIG_BT_RX_STACK_SIZE+0x46>
     43c:	f240 51f3 	movw	r1, #1523	; 0x5f3
     440:	2070      	movs	r0, #112	; 0x70
     442:	f003 f945 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     446:	491b      	ldr	r1, [pc, #108]	; (4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>)
     448:	4288      	cmp	r0, r1
     44a:	bfa8      	it	ge
     44c:	491a      	ldrge	r1, [pc, #104]	; (4b8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x44>)
     44e:	da03      	bge.n	458 <CONFIG_BT_RX_STACK_SIZE+0x58>
     450:	2800      	cmp	r0, #0
     452:	bfb8      	it	lt
     454:	4917      	ldrlt	r1, [pc, #92]	; (4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>)
     456:	da00      	bge.n	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     458:	1840      	adds	r0, r0, r1
     45a:	4621      	mov	r1, r4
     45c:	f002 fda0 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     460:	6820      	ldr	r0, [r4, #0]
     462:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     466:	19e8      	adds	r0, r5, r7
     468:	1cc0      	adds	r0, r0, #3
     46a:	6021      	str	r1, [r4, #0]
     46c:	2e00      	cmp	r6, #0
     46e:	bf08      	it	eq
     470:	307a      	addeq	r0, #122	; 0x7a
     472:	d008      	beq.n	486 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     474:	2e01      	cmp	r6, #1
     476:	bf08      	it	eq
     478:	3045      	addeq	r0, #69	; 0x45
     47a:	d004      	beq.n	486 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     47c:	f240 6199 	movw	r1, #1689	; 0x699
     480:	2070      	movs	r0, #112	; 0x70
     482:	f003 f925 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     486:	466a      	mov	r2, sp
     488:	1d21      	adds	r1, r4, #4
     48a:	f002 fd89 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     48e:	f99d 0000 	ldrsb.w	r0, [sp]
     492:	2800      	cmp	r0, #0
     494:	6860      	ldr	r0, [r4, #4]
     496:	bfc4      	itt	gt
     498:	1c40      	addgt	r0, r0, #1
     49a:	6060      	strgt	r0, [r4, #4]
     49c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4a0:	6060      	str	r0, [r4, #4]
     4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     4a6:	0000      	.short	0x0000
     4a8:	1e847fff 	.word	0x1e847fff
     4ac:	07a12000 	.word	0x07a12000
     4b0:	f85ee000 	.word	0xf85ee000
     4b4:	1e848000 	.word	0x1e848000
     4b8:	e17b8000 	.word	0xe17b8000
     4bc:	b570      	push	{r4, r5, r6, lr}
     4be:	4605      	mov	r5, r0
     4c0:	2a20      	cmp	r2, #32
     4c2:	d027      	beq.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
     4c4:	4819      	ldr	r0, [pc, #100]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4c6:	4c1a      	ldr	r4, [pc, #104]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     4c8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     4cc:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     4d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     4d4:	2920      	cmp	r1, #32
     4d6:	d022      	beq.n	51e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x36>
     4d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     4dc:	7840      	ldrb	r0, [r0, #1]
     4de:	784c      	ldrb	r4, [r1, #1]
     4e0:	7048      	strb	r0, [r1, #1]
     4e2:	4620      	mov	r0, r4
     4e4:	4601      	mov	r1, r0
     4e6:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     4ea:	4291      	cmp	r1, r2
     4ec:	7005      	strb	r5, [r0, #0]
     4ee:	7840      	ldrb	r0, [r0, #1]
     4f0:	d1f8      	bne.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x70>
     4f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     4f6:	2a20      	cmp	r2, #32
     4f8:	bf1a      	itte	ne
     4fa:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     4fe:	7054      	strbne	r4, [r2, #1]
     500:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     504:	2220      	movs	r2, #32
     506:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     50a:	f88c 2001 	strb.w	r2, [ip, #1]
     50e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     512:	bd70      	pop	{r4, r5, r6, pc}
     514:	f44f 7123 	mov.w	r1, #652	; 0x28c
     518:	2070      	movs	r0, #112	; 0x70
     51a:	f003 f8d9 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     51e:	f893 4020 	ldrb.w	r4, [r3, #32]
     522:	7840      	ldrb	r0, [r0, #1]
     524:	f883 0020 	strb.w	r0, [r3, #32]
     528:	e7db      	b.n	4e2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6e>
     52a:	0000      	.short	0x0000
     52c:	20000c94 	.word	0x20000c94
     530:	20000d14 	.word	0x20000d14
     534:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     538:	b087      	sub	sp, #28
     53a:	4604      	mov	r4, r0
     53c:	2000      	movs	r0, #0
     53e:	9002      	str	r0, [sp, #8]
     540:	489e      	ldr	r0, [pc, #632]	; (7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>)
     542:	9f08      	ldr	r7, [sp, #32]
     544:	4e9e      	ldr	r6, [pc, #632]	; (7c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c0>)
     546:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     54a:	9003      	str	r0, [sp, #12]
     54c:	f890 5020 	ldrb.w	r5, [r0, #32]
     550:	2020      	movs	r0, #32
     552:	46e9      	mov	r9, sp
     554:	f10d 0804 	add.w	r8, sp, #4
     558:	f88d 0000 	strb.w	r0, [sp]
     55c:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     560:	2d20      	cmp	r5, #32
     562:	bf18      	it	ne
     564:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     568:	d032      	beq.n	5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>
     56a:	bf00      	nop
     56c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     570:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     574:	1d01      	adds	r1, r0, #4
     576:	6880      	ldr	r0, [r0, #8]
     578:	6822      	ldr	r2, [r4, #0]
     57a:	1a10      	subs	r0, r2, r0
     57c:	0200      	lsls	r0, r0, #8
     57e:	17c2      	asrs	r2, r0, #31
     580:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     584:	1200      	asrs	r0, r0, #8
     586:	d423      	bmi.n	5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>
     588:	8960      	ldrh	r0, [r4, #10]
     58a:	b1d0      	cbz	r0, 5c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xda>
     58c:	8948      	ldrh	r0, [r1, #10]
     58e:	b9c0      	cbnz	r0, 5c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xda>
     590:	4608      	mov	r0, r1
     592:	f000 fcdb 	bl	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
     596:	aa05      	add	r2, sp, #20
     598:	a904      	add	r1, sp, #16
     59a:	f002 fd01 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     59e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     5a2:	2800      	cmp	r0, #0
     5a4:	bfcc      	ite	gt
     5a6:	2001      	movgt	r0, #1
     5a8:	2000      	movle	r0, #0
     5aa:	f100 0133 	add.w	r1, r0, #51	; 0x33
     5ae:	9804      	ldr	r0, [sp, #16]
     5b0:	6822      	ldr	r2, [r4, #0]
     5b2:	1a10      	subs	r0, r2, r0
     5b4:	0200      	lsls	r0, r0, #8
     5b6:	17c2      	asrs	r2, r0, #31
     5b8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5bc:	1200      	asrs	r0, r0, #8
     5be:	4288      	cmp	r0, r1
     5c0:	db06      	blt.n	5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>
     5c2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5c6:	f889 5000 	strb.w	r5, [r9]
     5ca:	7845      	ldrb	r5, [r0, #1]
     5cc:	2d20      	cmp	r5, #32
     5ce:	d1cd      	bne.n	56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>
     5d0:	f899 0000 	ldrb.w	r0, [r9]
     5d4:	f888 0000 	strb.w	r0, [r8]
     5d8:	46a1      	mov	r9, r4
     5da:	2d20      	cmp	r5, #32
     5dc:	bf1c      	itt	ne
     5de:	4879      	ldrne	r0, [pc, #484]	; (7c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c4>)
     5e0:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     5e4:	f000 80e5 	beq.w	7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     5e8:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     5ec:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     5f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
     5f4:	f8da 1004 	ldr.w	r1, [sl, #4]
     5f8:	4648      	mov	r0, r9
     5fa:	1a89      	subs	r1, r1, r2
     5fc:	0209      	lsls	r1, r1, #8
     5fe:	17ca      	asrs	r2, r1, #31
     600:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     604:	f10a 0704 	add.w	r7, sl, #4
     608:	1209      	asrs	r1, r1, #8
     60a:	d41f      	bmi.n	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     60c:	8979      	ldrh	r1, [r7, #10]
     60e:	2900      	cmp	r1, #0
     610:	f000 80cf 	beq.w	7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     614:	8941      	ldrh	r1, [r0, #10]
     616:	2900      	cmp	r1, #0
     618:	f040 80cb 	bne.w	7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     61c:	f000 fc96 	bl	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
     620:	aa05      	add	r2, sp, #20
     622:	a904      	add	r1, sp, #16
     624:	f002 fcbc 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     628:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     62c:	2800      	cmp	r0, #0
     62e:	bfcc      	ite	gt
     630:	2001      	movgt	r0, #1
     632:	2000      	movle	r0, #0
     634:	f100 0133 	add.w	r1, r0, #51	; 0x33
     638:	9804      	ldr	r0, [sp, #16]
     63a:	683a      	ldr	r2, [r7, #0]
     63c:	1a10      	subs	r0, r2, r0
     63e:	0200      	lsls	r0, r0, #8
     640:	17c2      	asrs	r2, r0, #31
     642:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     646:	1200      	asrs	r0, r0, #8
     648:	4288      	cmp	r0, r1
     64a:	da7d      	bge.n	748 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     64c:	f888 5000 	strb.w	r5, [r8]
     650:	f89a 0010 	ldrb.w	r0, [sl, #16]
     654:	f899 100c 	ldrb.w	r1, [r9, #12]
     658:	4288      	cmp	r0, r1
     65a:	d905      	bls.n	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     65c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     660:	7845      	ldrb	r5, [r0, #1]
     662:	2d20      	cmp	r5, #32
     664:	d1c0      	bne.n	5e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x100>
     666:	e0a4      	b.n	7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     668:	f89d 0004 	ldrb.w	r0, [sp, #4]
     66c:	e9d4 2100 	ldrd	r2, r1, [r4]
     670:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     674:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     678:	1a89      	subs	r1, r1, r2
     67a:	6880      	ldr	r0, [r0, #8]
     67c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     680:	4408      	add	r0, r1
     682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     686:	e9c4 2000 	strd	r2, r0, [r4]
     68a:	2001      	movs	r0, #1
     68c:	9002      	str	r0, [sp, #8]
     68e:	484b      	ldr	r0, [pc, #300]	; (7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>)
     690:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     694:	b118      	cbz	r0, 69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     696:	b009      	add	sp, #36	; 0x24
     698:	2000      	movs	r0, #0
     69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     69e:	9803      	ldr	r0, [sp, #12]
     6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6a4:	466f      	mov	r7, sp
     6a6:	f890 5020 	ldrb.w	r5, [r0, #32]
     6aa:	2020      	movs	r0, #32
     6ac:	f10d 0a04 	add.w	sl, sp, #4
     6b0:	f88d 0000 	strb.w	r0, [sp]
     6b4:	2d20      	cmp	r5, #32
     6b6:	bf1c      	itt	ne
     6b8:	4842      	ldrne	r0, [pc, #264]	; (7c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c4>)
     6ba:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6be:	d030      	beq.n	722 <CONFIG_BT_HCI_TX_STACK_SIZE+0x122>
     6c0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     6c4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     6c8:	1d01      	adds	r1, r0, #4
     6ca:	6880      	ldr	r0, [r0, #8]
     6cc:	6822      	ldr	r2, [r4, #0]
     6ce:	1a10      	subs	r0, r2, r0
     6d0:	0200      	lsls	r0, r0, #8
     6d2:	17c2      	asrs	r2, r0, #31
     6d4:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6d8:	1200      	asrs	r0, r0, #8
     6da:	d422      	bmi.n	722 <CONFIG_BT_HCI_TX_STACK_SIZE+0x122>
     6dc:	8960      	ldrh	r0, [r4, #10]
     6de:	b1d0      	cbz	r0, 716 <CONFIG_BT_HCI_TX_STACK_SIZE+0x116>
     6e0:	8948      	ldrh	r0, [r1, #10]
     6e2:	b9c0      	cbnz	r0, 716 <CONFIG_BT_HCI_TX_STACK_SIZE+0x116>
     6e4:	4608      	mov	r0, r1
     6e6:	f000 fc31 	bl	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
     6ea:	aa05      	add	r2, sp, #20
     6ec:	a904      	add	r1, sp, #16
     6ee:	f002 fc57 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     6f2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     6f6:	2800      	cmp	r0, #0
     6f8:	bfcc      	ite	gt
     6fa:	2001      	movgt	r0, #1
     6fc:	2000      	movle	r0, #0
     6fe:	f100 0133 	add.w	r1, r0, #51	; 0x33
     702:	9804      	ldr	r0, [sp, #16]
     704:	6822      	ldr	r2, [r4, #0]
     706:	1a10      	subs	r0, r2, r0
     708:	0200      	lsls	r0, r0, #8
     70a:	17c2      	asrs	r2, r0, #31
     70c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     710:	1200      	asrs	r0, r0, #8
     712:	4288      	cmp	r0, r1
     714:	db05      	blt.n	722 <CONFIG_BT_HCI_TX_STACK_SIZE+0x122>
     716:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     71a:	703d      	strb	r5, [r7, #0]
     71c:	7845      	ldrb	r5, [r0, #1]
     71e:	2d20      	cmp	r5, #32
     720:	d1ce      	bne.n	6c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc0>
     722:	7838      	ldrb	r0, [r7, #0]
     724:	f88a 0000 	strb.w	r0, [sl]
     728:	4627      	mov	r7, r4
     72a:	2d20      	cmp	r5, #32
     72c:	bf1c      	itt	ne
     72e:	4825      	ldrne	r0, [pc, #148]	; (7c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c4>)
     730:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     734:	d03d      	beq.n	7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     736:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     73a:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     73e:	4638      	mov	r0, r7
     740:	f109 0804 	add.w	r8, r9, #4
     744:	687a      	ldr	r2, [r7, #4]
     746:	e000      	b.n	74a <CONFIG_BT_HCI_TX_STACK_SIZE+0x14a>
     748:	e033      	b.n	7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     74a:	f8d9 1004 	ldr.w	r1, [r9, #4]
     74e:	1a89      	subs	r1, r1, r2
     750:	0209      	lsls	r1, r1, #8
     752:	17ca      	asrs	r2, r1, #31
     754:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     758:	1209      	asrs	r1, r1, #8
     75a:	d41d      	bmi.n	798 <CONFIG_BT_HCI_TX_STACK_SIZE+0x198>
     75c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     760:	b339      	cbz	r1, 7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     762:	8941      	ldrh	r1, [r0, #10]
     764:	bb29      	cbnz	r1, 7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     766:	f000 fbf1 	bl	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
     76a:	aa05      	add	r2, sp, #20
     76c:	a904      	add	r1, sp, #16
     76e:	f002 fc17 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     772:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     776:	2800      	cmp	r0, #0
     778:	bfcc      	ite	gt
     77a:	2001      	movgt	r0, #1
     77c:	2000      	movle	r0, #0
     77e:	f100 0133 	add.w	r1, r0, #51	; 0x33
     782:	9804      	ldr	r0, [sp, #16]
     784:	f8d8 2000 	ldr.w	r2, [r8]
     788:	1a10      	subs	r0, r2, r0
     78a:	0200      	lsls	r0, r0, #8
     78c:	17c2      	asrs	r2, r0, #31
     78e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     792:	1200      	asrs	r0, r0, #8
     794:	4288      	cmp	r0, r1
     796:	da0c      	bge.n	7b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b2>
     798:	f88a 5000 	strb.w	r5, [sl]
     79c:	f899 1010 	ldrb.w	r1, [r9, #16]
     7a0:	7b38      	ldrb	r0, [r7, #12]
     7a2:	4281      	cmp	r1, r0
     7a4:	f67f af60 	bls.w	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     7a8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     7ac:	7845      	ldrb	r5, [r0, #1]
     7ae:	2d20      	cmp	r5, #32
     7b0:	d1c1      	bne.n	736 <CONFIG_BT_HCI_TX_STACK_SIZE+0x136>
     7b2:	9802      	ldr	r0, [sp, #8]
     7b4:	b009      	add	sp, #36	; 0x24
     7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7ba:	0000      	.short	0x0000
     7bc:	20000d14 	.word	0x20000d14
     7c0:	20000a14 	.word	0x20000a14
     7c4:	20000c94 	.word	0x20000c94
     7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7cc:	4604      	mov	r4, r0
     7ce:	4847      	ldr	r0, [pc, #284]	; (8ec <CONFIG_ISR_STACK_SIZE+0xec>)
     7d0:	460e      	mov	r6, r1
     7d2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7d6:	4f46      	ldr	r7, [pc, #280]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     7d8:	f890 5020 	ldrb.w	r5, [r0, #32]
     7dc:	2020      	movs	r0, #32
     7de:	b083      	sub	sp, #12
     7e0:	4698      	mov	r8, r3
     7e2:	4692      	mov	sl, r2
     7e4:	7010      	strb	r0, [r2, #0]
     7e6:	f507 7920 	add.w	r9, r7, #640	; 0x280
     7ea:	2d20      	cmp	r5, #32
     7ec:	bf18      	it	ne
     7ee:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7f2:	d031      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     7f4:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     7f8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     7fc:	1d01      	adds	r1, r0, #4
     7fe:	6880      	ldr	r0, [r0, #8]
     800:	6822      	ldr	r2, [r4, #0]
     802:	1a10      	subs	r0, r2, r0
     804:	0200      	lsls	r0, r0, #8
     806:	17c2      	asrs	r2, r0, #31
     808:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     80c:	1200      	asrs	r0, r0, #8
     80e:	d423      	bmi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     810:	8960      	ldrh	r0, [r4, #10]
     812:	b1d0      	cbz	r0, 84a <CONFIG_ISR_STACK_SIZE+0x4a>
     814:	8948      	ldrh	r0, [r1, #10]
     816:	b9c0      	cbnz	r0, 84a <CONFIG_ISR_STACK_SIZE+0x4a>
     818:	4608      	mov	r0, r1
     81a:	f000 fb97 	bl	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
     81e:	aa01      	add	r2, sp, #4
     820:	4669      	mov	r1, sp
     822:	f002 fbbd 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     826:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     82a:	2800      	cmp	r0, #0
     82c:	bfcc      	ite	gt
     82e:	2001      	movgt	r0, #1
     830:	2000      	movle	r0, #0
     832:	f100 0133 	add.w	r1, r0, #51	; 0x33
     836:	9800      	ldr	r0, [sp, #0]
     838:	6822      	ldr	r2, [r4, #0]
     83a:	1a10      	subs	r0, r2, r0
     83c:	0200      	lsls	r0, r0, #8
     83e:	17c2      	asrs	r2, r0, #31
     840:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     844:	1200      	asrs	r0, r0, #8
     846:	4288      	cmp	r0, r1
     848:	db06      	blt.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     84a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     84e:	f88a 5000 	strb.w	r5, [sl]
     852:	7845      	ldrb	r5, [r0, #1]
     854:	2d20      	cmp	r5, #32
     856:	d1cd      	bne.n	7f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f4>
     858:	f89a 0000 	ldrb.w	r0, [sl]
     85c:	f888 0000 	strb.w	r0, [r8]
     860:	2d20      	cmp	r5, #32
     862:	bf18      	it	ne
     864:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     868:	d03c      	beq.n	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     86a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     86e:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     872:	6861      	ldr	r1, [r4, #4]
     874:	f8d9 2004 	ldr.w	r2, [r9, #4]
     878:	4620      	mov	r0, r4
     87a:	1a51      	subs	r1, r2, r1
     87c:	0209      	lsls	r1, r1, #8
     87e:	17ca      	asrs	r2, r1, #31
     880:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     884:	f109 0604 	add.w	r6, r9, #4
     888:	1209      	asrs	r1, r1, #8
     88a:	d41b      	bmi.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     88c:	8971      	ldrh	r1, [r6, #10]
     88e:	b349      	cbz	r1, 8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     890:	8941      	ldrh	r1, [r0, #10]
     892:	bb39      	cbnz	r1, 8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     894:	f000 fb5a 	bl	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
     898:	aa01      	add	r2, sp, #4
     89a:	4669      	mov	r1, sp
     89c:	f002 fb80 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     8a0:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     8a4:	2800      	cmp	r0, #0
     8a6:	bfcc      	ite	gt
     8a8:	2001      	movgt	r0, #1
     8aa:	2000      	movle	r0, #0
     8ac:	f100 0133 	add.w	r1, r0, #51	; 0x33
     8b0:	9800      	ldr	r0, [sp, #0]
     8b2:	6832      	ldr	r2, [r6, #0]
     8b4:	1a10      	subs	r0, r2, r0
     8b6:	0200      	lsls	r0, r0, #8
     8b8:	17c2      	asrs	r2, r0, #31
     8ba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     8be:	1200      	asrs	r0, r0, #8
     8c0:	4288      	cmp	r0, r1
     8c2:	da0f      	bge.n	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     8c4:	f888 5000 	strb.w	r5, [r8]
     8c8:	f899 0010 	ldrb.w	r0, [r9, #16]
     8cc:	7b21      	ldrb	r1, [r4, #12]
     8ce:	4288      	cmp	r0, r1
     8d0:	d803      	bhi.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
     8d2:	b003      	add	sp, #12
     8d4:	2000      	movs	r0, #0
     8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8da:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     8de:	7845      	ldrb	r5, [r0, #1]
     8e0:	2d20      	cmp	r5, #32
     8e2:	d1c2      	bne.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
     8e4:	b003      	add	sp, #12
     8e6:	2001      	movs	r0, #1
     8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ec:	20000d14 	.word	0x20000d14
     8f0:	20000a14 	.word	0x20000a14
     8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8f8:	f04f 0800 	mov.w	r8, #0
     8fc:	b098      	sub	sp, #96	; 0x60
     8fe:	4616      	mov	r6, r2
     900:	460d      	mov	r5, r1
     902:	46c3      	mov	fp, r8
     904:	f002 f8e8 	bl	2ad8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     908:	4604      	mov	r4, r0
     90a:	2d01      	cmp	r5, #1
     90c:	bf18      	it	ne
     90e:	2d02      	cmpne	r5, #2
     910:	d005      	beq.n	91e <CONFIG_ISR_STACK_SIZE+0x11e>
     912:	f640 117b 	movw	r1, #2427	; 0x97b
     916:	f04f 0070 	mov.w	r0, #112	; 0x70
     91a:	f002 fed9 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     91e:	49fe      	ldr	r1, [pc, #1016]	; (d18 <CONFIG_ISR_STACK_SIZE+0x518>)
     920:	2001      	movs	r0, #1
     922:	6008      	str	r0, [r1, #0]
     924:	49fd      	ldr	r1, [pc, #1012]	; (d1c <CONFIG_ISR_STACK_SIZE+0x51c>)
     926:	6889      	ldr	r1, [r1, #8]
     928:	6008      	str	r0, [r1, #0]
     92a:	2000      	movs	r0, #0
     92c:	9006      	str	r0, [sp, #24]
     92e:	1e40      	subs	r0, r0, #1
     930:	9008      	str	r0, [sp, #32]
     932:	49fb      	ldr	r1, [pc, #1004]	; (d20 <CONFIG_ISR_STACK_SIZE+0x520>)
     934:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     938:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     93c:	1d1b      	adds	r3, r3, #4
     93e:	af09      	add	r7, sp, #36	; 0x24
     940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     942:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     946:	a809      	add	r0, sp, #36	; 0x24
     948:	f000 fb00 	bl	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
     94c:	9007      	str	r0, [sp, #28]
     94e:	48f4      	ldr	r0, [pc, #976]	; (d20 <CONFIG_ISR_STACK_SIZE+0x520>)
     950:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     954:	f8b0 031c 	ldrh.w	r0, [r0, #796]	; 0x31c
     958:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     95c:	f1b9 0f00 	cmp.w	r9, #0
     960:	bf14      	ite	ne
     962:	f04f 0a01 	movne.w	sl, #1
     966:	f04f 0a00 	moveq.w	sl, #0
     96a:	9809      	ldr	r0, [sp, #36]	; 0x24
     96c:	9012      	str	r0, [sp, #72]	; 0x48
     96e:	f1ba 0f00 	cmp.w	sl, #0
     972:	d009      	beq.n	988 <CONFIG_ISR_STACK_SIZE+0x188>
     974:	48eb      	ldr	r0, [pc, #940]	; (d24 <CONFIG_ISR_STACK_SIZE+0x524>)
     976:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     97a:	b928      	cbnz	r0, 988 <CONFIG_ISR_STACK_SIZE+0x188>
     97c:	f002 fe44 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     980:	2800      	cmp	r0, #0
     982:	bf08      	it	eq
     984:	2701      	moveq	r7, #1
     986:	d000      	beq.n	98a <CONFIG_ISR_STACK_SIZE+0x18a>
     988:	2700      	movs	r7, #0
     98a:	48e7      	ldr	r0, [pc, #924]	; (d28 <CONFIG_ISR_STACK_SIZE+0x528>)
     98c:	2200      	movs	r2, #0
     98e:	9214      	str	r2, [sp, #80]	; 0x50
     990:	7800      	ldrb	r0, [r0, #0]
     992:	4616      	mov	r6, r2
     994:	2801      	cmp	r0, #1
     996:	bf18      	it	ne
     998:	2803      	cmpne	r0, #3
     99a:	d143      	bne.n	a24 <CONFIG_ISR_STACK_SIZE+0x224>
     99c:	48e2      	ldr	r0, [pc, #904]	; (d28 <CONFIG_ISR_STACK_SIZE+0x528>)
     99e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     9a2:	eba8 0009 	sub.w	r0, r8, r9
     9a6:	9014      	str	r0, [sp, #80]	; 0x50
     9a8:	45c1      	cmp	r9, r8
     9aa:	d23b      	bcs.n	a24 <CONFIG_ISR_STACK_SIZE+0x224>
     9ac:	a803      	add	r0, sp, #12
     9ae:	9005      	str	r0, [sp, #20]
     9b0:	a817      	add	r0, sp, #92	; 0x5c
     9b2:	9010      	str	r0, [sp, #64]	; 0x40
     9b4:	9907      	ldr	r1, [sp, #28]
     9b6:	f108 0003 	add.w	r0, r8, #3
     9ba:	4242      	negs	r2, r0
     9bc:	f8df c36c 	ldr.w	ip, [pc, #876]	; d2c <CONFIG_ISR_STACK_SIZE+0x52c>
     9c0:	1a08      	subs	r0, r1, r0
     9c2:	2300      	movs	r3, #0
     9c4:	ebbc 0101 	subs.w	r1, ip, r1
     9c8:	eb73 0103 	sbcs.w	r1, r3, r3
     9cc:	d204      	bcs.n	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
     9ce:	f240 51f1 	movw	r1, #1521	; 0x5f1
     9d2:	2070      	movs	r0, #112	; 0x70
     9d4:	f002 fe7c 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9d8:	49d5      	ldr	r1, [pc, #852]	; (d30 <CONFIG_ISR_STACK_SIZE+0x530>)
     9da:	428a      	cmp	r2, r1
     9dc:	dd04      	ble.n	9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
     9de:	f240 51f2 	movw	r1, #1522	; 0x5f2
     9e2:	2070      	movs	r0, #112	; 0x70
     9e4:	f002 fe74 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9e8:	49d2      	ldr	r1, [pc, #840]	; (d34 <CONFIG_ISR_STACK_SIZE+0x534>)
     9ea:	428a      	cmp	r2, r1
     9ec:	da04      	bge.n	9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
     9ee:	f240 51f3 	movw	r1, #1523	; 0x5f3
     9f2:	2070      	movs	r0, #112	; 0x70
     9f4:	f002 fe6c 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9f8:	49cf      	ldr	r1, [pc, #828]	; (d38 <CONFIG_ISR_STACK_SIZE+0x538>)
     9fa:	4288      	cmp	r0, r1
     9fc:	bfa8      	it	ge
     9fe:	49cf      	ldrge	r1, [pc, #828]	; (d3c <CONFIG_ISR_STACK_SIZE+0x53c>)
     a00:	da03      	bge.n	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
     a02:	2800      	cmp	r0, #0
     a04:	bfb8      	it	lt
     a06:	49cc      	ldrlt	r1, [pc, #816]	; (d38 <CONFIG_ISR_STACK_SIZE+0x538>)
     a08:	da00      	bge.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
     a0a:	1840      	adds	r0, r0, r1
     a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
     a0e:	9905      	ldr	r1, [sp, #20]
     a10:	f002 fac6 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     a14:	9803      	ldr	r0, [sp, #12]
     a16:	9909      	ldr	r1, [sp, #36]	; 0x24
     a18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a1c:	9003      	str	r0, [sp, #12]
     a1e:	1a08      	subs	r0, r1, r0
     a20:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     a24:	2f00      	cmp	r7, #0
     a26:	bf18      	it	ne
     a28:	2632      	movne	r6, #50	; 0x32
     a2a:	d104      	bne.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     a2c:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     a30:	2800      	cmp	r0, #0
     a32:	bf18      	it	ne
     a34:	2602      	movne	r6, #2
     a36:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a3a:	d008      	beq.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
     a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
     a3e:	1b00      	subs	r0, r0, r4
     a40:	0200      	lsls	r0, r0, #8
     a42:	17c1      	asrs	r1, r0, #31
     a44:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a48:	1200      	asrs	r0, r0, #8
     a4a:	2801      	cmp	r0, #1
     a4c:	da02      	bge.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
     a4e:	2004      	movs	r0, #4
     a50:	9918      	ldr	r1, [sp, #96]	; 0x60
     a52:	e00b      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     a54:	b147      	cbz	r7, a68 <CONFIG_ISR_STACK_SIZE+0x268>
     a56:	48b3      	ldr	r0, [pc, #716]	; (d24 <CONFIG_ISR_STACK_SIZE+0x524>)
     a58:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a5c:	b120      	cbz	r0, a68 <CONFIG_ISR_STACK_SIZE+0x268>
     a5e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     a62:	1c06      	adds	r6, r0, #0
     a64:	bf18      	it	ne
     a66:	2602      	movne	r6, #2
     a68:	4621      	mov	r1, r4
     a6a:	2001      	movs	r0, #1
     a6c:	f1b9 0f00 	cmp.w	r9, #0
     a70:	d002      	beq.n	a78 <CONFIG_ISR_STACK_SIZE+0x278>
     a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
     a74:	2b1e      	cmp	r3, #30
     a76:	da02      	bge.n	a7e <CONFIG_ISR_STACK_SIZE+0x27e>
     a78:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     a7c:	b113      	cbz	r3, a84 <CONFIG_ISR_STACK_SIZE+0x284>
     a7e:	f04f 0b01 	mov.w	fp, #1
     a82:	1e40      	subs	r0, r0, #1
     a84:	1983      	adds	r3, r0, r6
     a86:	48a8      	ldr	r0, [pc, #672]	; (d28 <CONFIG_ISR_STACK_SIZE+0x528>)
     a88:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     a8c:	7800      	ldrb	r0, [r0, #0]
     a8e:	9015      	str	r0, [sp, #84]	; 0x54
     a90:	9809      	ldr	r0, [sp, #36]	; 0x24
     a92:	1a80      	subs	r0, r0, r2
     a94:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     a98:	ebac 0001 	sub.w	r0, ip, r1
     a9c:	0200      	lsls	r0, r0, #8
     a9e:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     aa2:	eb00 601e 	add.w	r0, r0, lr, lsr #24
     aa6:	1200      	asrs	r0, r0, #8
     aa8:	4298      	cmp	r0, r3
     aaa:	db18      	blt.n	ade <CONFIG_ISR_STACK_SIZE+0x2de>
     aac:	2a00      	cmp	r2, #0
     aae:	bf18      	it	ne
     ab0:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
     ab4:	9e09      	ldr	r6, [sp, #36]	; 0x24
     ab6:	9710      	str	r7, [sp, #64]	; 0x40
     ab8:	2700      	movs	r7, #0
     aba:	f001 ff07 	bl	28cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     abe:	1a30      	subs	r0, r6, r0
     ac0:	0200      	lsls	r0, r0, #8
     ac2:	17c1      	asrs	r1, r0, #31
     ac4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     ac8:	1200      	asrs	r0, r0, #8
     aca:	283e      	cmp	r0, #62	; 0x3e
     acc:	da3e      	bge.n	b4c <CONFIG_ISR_STACK_SIZE+0x34c>
     ace:	2d01      	cmp	r5, #1
     ad0:	d01f      	beq.n	b12 <CONFIG_ISR_STACK_SIZE+0x312>
     ad2:	1e70      	subs	r0, r6, #1
     ad4:	9910      	ldr	r1, [sp, #64]	; 0x40
     ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ada:	b311      	cbz	r1, b22 <CONFIG_ISR_STACK_SIZE+0x322>
     adc:	e02c      	b.n	b38 <CONFIG_ISR_STACK_SIZE+0x338>
     ade:	b17a      	cbz	r2, b00 <CONFIG_ISR_STACK_SIZE+0x300>
     ae0:	2e00      	cmp	r6, #0
     ae2:	bf04      	itt	eq
     ae4:	9815      	ldreq	r0, [sp, #84]	; 0x54
     ae6:	2803      	cmpeq	r0, #3
     ae8:	d00a      	beq.n	b00 <CONFIG_ISR_STACK_SIZE+0x300>
     aea:	b927      	cbnz	r7, af6 <CONFIG_ISR_STACK_SIZE+0x2f6>
     aec:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     af0:	2800      	cmp	r0, #0
     af2:	bf18      	it	ne
     af4:	1e9b      	subne	r3, r3, #2
     af6:	2200      	movs	r2, #0
     af8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
     afc:	4690      	mov	r8, r2
     afe:	e7c7      	b.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
     b00:	bb07      	cbnz	r7, b44 <CONFIG_ISR_STACK_SIZE+0x344>
     b02:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b06:	b1e8      	cbz	r0, b44 <CONFIG_ISR_STACK_SIZE+0x344>
     b08:	2000      	movs	r0, #0
     b0a:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
     b0e:	1e9b      	subs	r3, r3, #2
     b10:	e7be      	b.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
     b12:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b16:	d120      	bne.n	b5a <CONFIG_ISR_STACK_SIZE+0x35a>
     b18:	f640 01f4 	movw	r1, #2292	; 0x8f4
     b1c:	2070      	movs	r0, #112	; 0x70
     b1e:	f002 fdd7 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b22:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b26:	d007      	beq.n	b38 <CONFIG_ISR_STACK_SIZE+0x338>
     b28:	1a21      	subs	r1, r4, r0
     b2a:	0209      	lsls	r1, r1, #8
     b2c:	17ca      	asrs	r2, r1, #31
     b2e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b32:	1209      	asrs	r1, r1, #8
     b34:	2904      	cmp	r1, #4
     b36:	dd03      	ble.n	b40 <CONFIG_ISR_STACK_SIZE+0x340>
     b38:	4604      	mov	r4, r0
     b3a:	f001 fecd 	bl	28d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b3e:	e00c      	b.n	b5a <CONFIG_ISR_STACK_SIZE+0x35a>
     b40:	2900      	cmp	r1, #0
     b42:	dd0a      	ble.n	b5a <CONFIG_ISR_STACK_SIZE+0x35a>
     b44:	b01b      	add	sp, #108	; 0x6c
     b46:	2000      	movs	r0, #0
     b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b4c:	1e70      	subs	r0, r6, #1
     b4e:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b52:	4620      	mov	r0, r4
     b54:	f001 fec0 	bl	28d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b58:	4657      	mov	r7, sl
     b5a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b5e:	d028      	beq.n	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
     b60:	9809      	ldr	r0, [sp, #36]	; 0x24
     b62:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
     b66:	1b00      	subs	r0, r0, r4
     b68:	f08b 0301 	eor.w	r3, fp, #1
     b6c:	4a74      	ldr	r2, [pc, #464]	; (d40 <CONFIG_ISR_STACK_SIZE+0x540>)
     b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b72:	ebac 0c04 	sub.w	ip, ip, r4
     b76:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     b7a:	4283      	cmp	r3, r0
     b7c:	bf98      	it	ls
     b7e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b82:	d2df      	bcs.n	b44 <CONFIG_ISR_STACK_SIZE+0x344>
     b84:	4562      	cmp	r2, ip
     b86:	d3dd      	bcc.n	b44 <CONFIG_ISR_STACK_SIZE+0x344>
     b88:	4620      	mov	r0, r4
     b8a:	f00a fe8a 	bl	b8a2 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     b8e:	4a67      	ldr	r2, [pc, #412]	; (d2c <CONFIG_ISR_STACK_SIZE+0x52c>)
     b90:	9907      	ldr	r1, [sp, #28]
     b92:	1c53      	adds	r3, r2, #1
     b94:	1a0e      	subs	r6, r1, r0
     b96:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b9a:	bf24      	itt	cs
     b9c:	eba0 0c01 	subcs.w	ip, r0, r1
     ba0:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     ba4:	d310      	bcc.n	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
     ba6:	42b2      	cmp	r2, r6
     ba8:	d208      	bcs.n	bbc <CONFIG_ISR_STACK_SIZE+0x3bc>
     baa:	1a10      	subs	r0, r2, r0
     bac:	4408      	add	r0, r1
     bae:	1c46      	adds	r6, r0, #1
     bb0:	e00a      	b.n	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
     bb2:	f640 2113 	movw	r1, #2579	; 0xa13
     bb6:	2070      	movs	r0, #112	; 0x70
     bb8:	f002 fd8a 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bbc:	4562      	cmp	r2, ip
     bbe:	d22c      	bcs.n	c1a <CONFIG_ISR_STACK_SIZE+0x41a>
     bc0:	1a51      	subs	r1, r2, r1
     bc2:	4408      	add	r0, r1
     bc4:	1c40      	adds	r0, r0, #1
     bc6:	4246      	negs	r6, r0
     bc8:	4856      	ldr	r0, [pc, #344]	; (d24 <CONFIG_ISR_STACK_SIZE+0x524>)
     bca:	7f80      	ldrb	r0, [r0, #30]
     bcc:	b350      	cbz	r0, c24 <CONFIG_ISR_STACK_SIZE+0x424>
     bce:	4628      	mov	r0, r5
     bd0:	4645      	mov	r5, r8
     bd2:	f04f 0b00 	mov.w	fp, #0
     bd6:	46d8      	mov	r8, fp
     bd8:	2801      	cmp	r0, #1
     bda:	d005      	beq.n	be8 <CONFIG_ISR_STACK_SIZE+0x3e8>
     bdc:	2002      	movs	r0, #2
     bde:	f002 f8c3 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     be2:	2001      	movs	r0, #1
     be4:	f002 f8c0 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     be8:	45a9      	cmp	r9, r5
     bea:	d22c      	bcs.n	c46 <CONFIG_ISR_STACK_SIZE+0x446>
     bec:	eba6 0105 	sub.w	r1, r6, r5
     bf0:	f04f 0301 	mov.w	r3, #1
     bf4:	f04f 0203 	mov.w	r2, #3
     bf8:	f04f 0002 	mov.w	r0, #2
     bfc:	f001 ffec 	bl	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c00:	2800      	cmp	r0, #0
     c02:	bf08      	it	eq
     c04:	f04f 0801 	moveq.w	r8, #1
     c08:	f1b9 0f00 	cmp.w	r9, #0
     c0c:	d035      	beq.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c0e:	2301      	movs	r3, #1
     c10:	eba6 0109 	sub.w	r1, r6, r9
     c14:	2203      	movs	r2, #3
     c16:	4618      	mov	r0, r3
     c18:	e023      	b.n	c62 <CONFIG_ISR_STACK_SIZE+0x462>
     c1a:	f640 21f3 	movw	r1, #2803	; 0xaf3
     c1e:	2070      	movs	r0, #112	; 0x70
     c20:	f002 fd56 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c24:	45c1      	cmp	r9, r8
     c26:	bf34      	ite	cc
     c28:	4640      	movcc	r0, r8
     c2a:	4648      	movcs	r0, r9
     c2c:	f1bb 0f00 	cmp.w	fp, #0
     c30:	bf14      	ite	ne
     c32:	2100      	movne	r1, #0
     c34:	211e      	moveq	r1, #30
     c36:	4408      	add	r0, r1
     c38:	42b0      	cmp	r0, r6
     c3a:	dbc8      	blt.n	bce <CONFIG_ISR_STACK_SIZE+0x3ce>
     c3c:	f640 2126 	movw	r1, #2598	; 0xa26
     c40:	2070      	movs	r0, #112	; 0x70
     c42:	f002 fd45 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c46:	d910      	bls.n	c6a <CONFIG_ISR_STACK_SIZE+0x46a>
     c48:	2301      	movs	r3, #1
     c4a:	eba6 0109 	sub.w	r1, r6, r9
     c4e:	2203      	movs	r2, #3
     c50:	4618      	mov	r0, r3
     c52:	f001 ffc1 	bl	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c56:	b328      	cbz	r0, ca4 <CONFIG_ISR_STACK_SIZE+0x4a4>
     c58:	b17d      	cbz	r5, c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c5a:	1b71      	subs	r1, r6, r5
     c5c:	2301      	movs	r3, #1
     c5e:	2203      	movs	r2, #3
     c60:	2002      	movs	r0, #2
     c62:	f001 ffb9 	bl	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c66:	b1e8      	cbz	r0, ca4 <CONFIG_ISR_STACK_SIZE+0x4a4>
     c68:	e007      	b.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c6a:	ea55 0009 	orrs.w	r0, r5, r9
     c6e:	d004      	beq.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c70:	f640 115e 	movw	r1, #2398	; 0x95e
     c74:	2070      	movs	r0, #112	; 0x70
     c76:	f002 fd2b 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c7a:	2301      	movs	r3, #1
     c7c:	2203      	movs	r2, #3
     c7e:	4631      	mov	r1, r6
     c80:	2000      	movs	r0, #0
     c82:	f001 ffa9 	bl	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c86:	b168      	cbz	r0, ca4 <CONFIG_ISR_STACK_SIZE+0x4a4>
     c88:	2501      	movs	r5, #1
     c8a:	f1b8 0f00 	cmp.w	r8, #0
     c8e:	d003      	beq.n	c98 <CONFIG_ISR_STACK_SIZE+0x498>
     c90:	9812      	ldr	r0, [sp, #72]	; 0x48
     c92:	9009      	str	r0, [sp, #36]	; 0x24
     c94:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
     c98:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d44 <CONFIG_ISR_STACK_SIZE+0x544>
     c9c:	f1ba 0f00 	cmp.w	sl, #0
     ca0:	d10e      	bne.n	cc0 <CONFIG_ISR_STACK_SIZE+0x4c0>
     ca2:	e009      	b.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     ca4:	2002      	movs	r0, #2
     ca6:	f002 f85f 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     caa:	2001      	movs	r0, #1
     cac:	f002 f85c 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cb0:	b01b      	add	sp, #108	; 0x6c
     cb2:	2000      	movs	r0, #0
     cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cb8:	481a      	ldr	r0, [pc, #104]	; (d24 <CONFIG_ISR_STACK_SIZE+0x524>)
     cba:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     cbe:	b100      	cbz	r0, cc2 <CONFIG_ISR_STACK_SIZE+0x4c2>
     cc0:	b34f      	cbz	r7, d16 <CONFIG_ISR_STACK_SIZE+0x516>
     cc2:	f8df a060 	ldr.w	sl, [pc, #96]	; d24 <CONFIG_ISR_STACK_SIZE+0x524>
     cc6:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     cca:	b118      	cbz	r0, cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
     ccc:	f002 fb46 	bl	335c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     cd0:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     cd4:	b3e7      	cbz	r7, d50 <CONFIG_ISR_STACK_SIZE+0x550>
     cd6:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     cda:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     cde:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     ce2:	f8c8 0000 	str.w	r0, [r8]
     ce6:	2300      	movs	r3, #0
     ce8:	2203      	movs	r2, #3
     cea:	2005      	movs	r0, #5
     cec:	f001 ff74 	bl	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cf0:	b378      	cbz	r0, d52 <CONFIG_ISR_STACK_SIZE+0x552>
     cf2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     cf6:	2005      	movs	r0, #5
     cf8:	f002 f8fc 	bl	2ef4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     cfc:	4912      	ldr	r1, [pc, #72]	; (d48 <CONFIG_ISR_STACK_SIZE+0x548>)
     cfe:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     d02:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     d06:	4911      	ldr	r1, [pc, #68]	; (d4c <CONFIG_ISR_STACK_SIZE+0x54c>)
     d08:	12e0      	asrs	r0, r4, #11
     d0a:	6008      	str	r0, [r1, #0]
     d0c:	4c05      	ldr	r4, [pc, #20]	; (d24 <CONFIG_ISR_STACK_SIZE+0x524>)
     d0e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d12:	b3e0      	cbz	r0, d8e <CONFIG_ISR_STACK_SIZE+0x58e>
     d14:	e05d      	b.n	dd2 <CONFIG_ISR_STACK_SIZE+0x5d2>
     d16:	e01d      	b.n	d54 <CONFIG_ISR_STACK_SIZE+0x554>
     d18:	40000508 	.word	0x40000508
     d1c:	20000008 	.word	0x20000008
     d20:	20000a14 	.word	0x20000a14
     d24:	20000d14 	.word	0x20000d14
     d28:	2000000a 	.word	0x2000000a
     d2c:	1e847fff 	.word	0x1e847fff
     d30:	07a12000 	.word	0x07a12000
     d34:	f85ee000 	.word	0xf85ee000
     d38:	1e848000 	.word	0x1e848000
     d3c:	e17b8000 	.word	0xe17b8000
     d40:	003fffff 	.word	0x003fffff
     d44:	4001f508 	.word	0x4001f508
     d48:	4001f098 	.word	0x4001f098
     d4c:	4001f504 	.word	0x4001f504
     d50:	e005      	b.n	d5e <CONFIG_ISR_STACK_SIZE+0x55e>
     d52:	e035      	b.n	dc0 <CONFIG_ISR_STACK_SIZE+0x5c0>
     d54:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e10 <CONFIG_ISR_STACK_SIZE+0x610>
     d58:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d5c:	b358      	cbz	r0, db6 <CONFIG_ISR_STACK_SIZE+0x5b6>
     d5e:	4c2c      	ldr	r4, [pc, #176]	; (e10 <CONFIG_ISR_STACK_SIZE+0x610>)
     d60:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d64:	b150      	cbz	r0, d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     d66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d6a:	f8c8 0000 	str.w	r0, [r8]
     d6e:	2005      	movs	r0, #5
     d70:	f001 fffa 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d74:	f002 fb5a 	bl	342c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d78:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d7c:	ac06      	add	r4, sp, #24
     d7e:	4825      	ldr	r0, [pc, #148]	; (e14 <CONFIG_ISR_STACK_SIZE+0x614>)
     d80:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d84:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
     d88:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
     d8c:	e000      	b.n	d90 <CONFIG_ISR_STACK_SIZE+0x590>
     d8e:	e01c      	b.n	dca <CONFIG_ISR_STACK_SIZE+0x5ca>
     d90:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
     d94:	f8c0 c30c 	str.w	ip, [r0, #780]	; 0x30c
     d98:	ac0a      	add	r4, sp, #40	; 0x28
     d9a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d9e:	f8c0 1310 	str.w	r1, [r0, #784]	; 0x310
     da2:	f8c0 2314 	str.w	r2, [r0, #788]	; 0x314
     da6:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
     daa:	f8c0 c31c 	str.w	ip, [r0, #796]	; 0x31c
     dae:	b01b      	add	sp, #108	; 0x6c
     db0:	2001      	movs	r0, #1
     db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     db6:	f002 faed 	bl	3394 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     dba:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     dbe:	e789      	b.n	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
     dc0:	f44f 7153 	mov.w	r1, #844	; 0x34c
     dc4:	2070      	movs	r0, #112	; 0x70
     dc6:	f002 fc83 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dca:	f002 fb21 	bl	3410 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     dce:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     dd2:	eba6 0009 	sub.w	r0, r6, r9
     dd6:	f1a0 0119 	sub.w	r1, r0, #25
     dda:	2900      	cmp	r1, #0
     ddc:	dc04      	bgt.n	de8 <CONFIG_ISR_STACK_SIZE+0x5e8>
     dde:	f44f 6125 	mov.w	r1, #2640	; 0xa50
     de2:	2070      	movs	r0, #112	; 0x70
     de4:	f002 fc74 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     de8:	2203      	movs	r2, #3
     dea:	2301      	movs	r3, #1
     dec:	4610      	mov	r0, r2
     dee:	f001 fef3 	bl	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     df2:	b138      	cbz	r0, e04 <CONFIG_ISR_STACK_SIZE+0x604>
     df4:	4808      	ldr	r0, [pc, #32]	; (e18 <CONFIG_ISR_STACK_SIZE+0x618>)
     df6:	6880      	ldr	r0, [r0, #8]
     df8:	f8c0 b000 	str.w	fp, [r0]
     dfc:	4807      	ldr	r0, [pc, #28]	; (e1c <CONFIG_ISR_STACK_SIZE+0x61c>)
     dfe:	f8c0 b000 	str.w	fp, [r0]
     e02:	e7bb      	b.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     e04:	f640 215b 	movw	r1, #2651	; 0xa5b
     e08:	2070      	movs	r0, #112	; 0x70
     e0a:	f002 fc61 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e0e:	0000      	.short	0x0000
     e10:	20000d14 	.word	0x20000d14
     e14:	20000a14 	.word	0x20000a14
     e18:	20000008 	.word	0x20000008
     e1c:	40000508 	.word	0x40000508
     e20:	b510      	push	{r4, lr}
     e22:	4c15      	ldr	r4, [pc, #84]	; (e78 <CONFIG_ISR_STACK_SIZE+0x678>)
     e24:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     e28:	2820      	cmp	r0, #32
     e2a:	bf18      	it	ne
     e2c:	bd10      	popne	{r4, pc}
     e2e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     e32:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     e36:	f890 1020 	ldrb.w	r1, [r0, #32]
     e3a:	2920      	cmp	r1, #32
     e3c:	d017      	beq.n	e6e <CONFIG_ISR_STACK_SIZE+0x66e>
     e3e:	f8df c03c 	ldr.w	ip, [pc, #60]	; e7c <CONFIG_ISR_STACK_SIZE+0x67c>
     e42:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     e46:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     e4a:	785b      	ldrb	r3, [r3, #1]
     e4c:	f880 3020 	strb.w	r3, [r0, #32]
     e50:	2301      	movs	r3, #1
     e52:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     e56:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     e5a:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     e5e:	2002      	movs	r0, #2
     e60:	f000 f8b2 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
     e64:	2000      	movs	r0, #0
     e66:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     e6a:	77a0      	strb	r0, [r4, #30]
     e6c:	bd10      	pop	{r4, pc}
     e6e:	f240 3199 	movw	r1, #921	; 0x399
     e72:	2070      	movs	r0, #112	; 0x70
     e74:	f002 fc2c 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e78:	20000d14 	.word	0x20000d14
     e7c:	20000c94 	.word	0x20000c94
     e80:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     e84:	f8df 80b4 	ldr.w	r8, [pc, #180]	; f3c <CONFIG_ISR_STACK_SIZE+0x73c>
     e88:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     e8c:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     e90:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     e94:	2c20      	cmp	r4, #32
     e96:	bf08      	it	eq
     e98:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     e9c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f40 <CONFIG_ISR_STACK_SIZE+0x740>
     ea0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f44 <CONFIG_ISR_STACK_SIZE+0x744>
     ea4:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
     ea8:	eb09 1785 	add.w	r7, r9, r5, lsl #6
     eac:	2607      	movs	r6, #7
     eae:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     eb2:	2801      	cmp	r0, #1
     eb4:	d00e      	beq.n	ed4 <CONFIG_ISR_STACK_SIZE+0x6d4>
     eb6:	2804      	cmp	r0, #4
     eb8:	bf08      	it	eq
     eba:	2602      	moveq	r6, #2
     ebc:	d00a      	beq.n	ed4 <CONFIG_ISR_STACK_SIZE+0x6d4>
     ebe:	2805      	cmp	r0, #5
     ec0:	bf0c      	ite	eq
     ec2:	2603      	moveq	r6, #3
     ec4:	2806      	cmpne	r0, #6
     ec6:	d005      	beq.n	ed4 <CONFIG_ISR_STACK_SIZE+0x6d4>
     ec8:	f640 01c1 	movw	r1, #2241	; 0x8c1
     ecc:	f04f 0070 	mov.w	r0, #112	; 0x70
     ed0:	f002 fbfe 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ed4:	f1ba 0f00 	cmp.w	sl, #0
     ed8:	bf18      	it	ne
     eda:	f3af 8000 	nopne.w
     ede:	f3ef 8010 	mrs	r0, PRIMASK
     ee2:	b672      	cpsid	i
     ee4:	eb07 0144 	add.w	r1, r7, r4, lsl #1
     ee8:	784a      	ldrb	r2, [r1, #1]
     eea:	eb08 0185 	add.w	r1, r8, r5, lsl #2
     eee:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
     ef2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
     ef6:	42a2      	cmp	r2, r4
     ef8:	bf04      	itt	eq
     efa:	2220      	moveq	r2, #32
     efc:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
     f00:	b1a8      	cbz	r0, f2e <CONFIG_ISR_STACK_SIZE+0x72e>
     f02:	462a      	mov	r2, r5
     f04:	4621      	mov	r1, r4
     f06:	2001      	movs	r0, #1
     f08:	f000 f85e 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
     f0c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
     f10:	4631      	mov	r1, r6
     f12:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
     f16:	4620      	mov	r0, r4
     f18:	4790      	blx	r2
     f1a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     f1e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     f22:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     f26:	2c20      	cmp	r4, #32
     f28:	d1be      	bne.n	ea8 <CONFIG_ISR_STACK_SIZE+0x6a8>
     f2a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     f2e:	4806      	ldr	r0, [pc, #24]	; (f48 <CONFIG_ISR_STACK_SIZE+0x748>)
     f30:	2800      	cmp	r0, #0
     f32:	bf18      	it	ne
     f34:	f3af 8000 	nopne.w
     f38:	b662      	cpsie	i
     f3a:	e7e2      	b.n	f02 <CONFIG_ISR_STACK_SIZE+0x702>
     f3c:	20000d14 	.word	0x20000d14
     f40:	00000000 	.word	0x00000000
     f44:	20000c94 	.word	0x20000c94
     f48:	00000000 	.word	0x00000000
     f4c:	b510      	push	{r4, lr}
     f4e:	4604      	mov	r4, r0
     f50:	6800      	ldr	r0, [r0, #0]
     f52:	f00a fca6 	bl	b8a2 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     f56:	4601      	mov	r1, r0
     f58:	8960      	ldrh	r0, [r4, #10]
     f5a:	f994 2008 	ldrsb.w	r2, [r4, #8]
     f5e:	f8df c054 	ldr.w	ip, [pc, #84]	; fb4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x14>
     f62:	4410      	add	r0, r2
     f64:	1cc2      	adds	r2, r0, #3
     f66:	1888      	adds	r0, r1, r2
     f68:	2300      	movs	r3, #0
     f6a:	ebbc 0101 	subs.w	r1, ip, r1
     f6e:	eb73 0103 	sbcs.w	r1, r3, r3
     f72:	d204      	bcs.n	f7e <CONFIG_ISR_STACK_SIZE+0x77e>
     f74:	f240 51f1 	movw	r1, #1521	; 0x5f1
     f78:	2070      	movs	r0, #112	; 0x70
     f7a:	f002 fba9 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f7e:	490e      	ldr	r1, [pc, #56]	; (fb8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x18>)
     f80:	428a      	cmp	r2, r1
     f82:	dd04      	ble.n	f8e <CONFIG_ISR_STACK_SIZE+0x78e>
     f84:	f240 51f2 	movw	r1, #1522	; 0x5f2
     f88:	2070      	movs	r0, #112	; 0x70
     f8a:	f002 fba1 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f8e:	490b      	ldr	r1, [pc, #44]	; (fbc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1c>)
     f90:	428a      	cmp	r2, r1
     f92:	da04      	bge.n	f9e <CONFIG_ISR_STACK_SIZE+0x79e>
     f94:	f240 51f3 	movw	r1, #1523	; 0x5f3
     f98:	2070      	movs	r0, #112	; 0x70
     f9a:	f002 fb99 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f9e:	4908      	ldr	r1, [pc, #32]	; (fc0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x20>)
     fa0:	4288      	cmp	r0, r1
     fa2:	bfa8      	it	ge
     fa4:	4907      	ldrge	r1, [pc, #28]	; (fc4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x24>)
     fa6:	da03      	bge.n	fb0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x10>
     fa8:	2800      	cmp	r0, #0
     faa:	bfb4      	ite	lt
     fac:	4904      	ldrlt	r1, [pc, #16]	; (fc0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x20>)
     fae:	bd10      	popge	{r4, pc}
     fb0:	1840      	adds	r0, r0, r1
     fb2:	bd10      	pop	{r4, pc}
     fb4:	1e847fff 	.word	0x1e847fff
     fb8:	07a12000 	.word	0x07a12000
     fbc:	f85ee000 	.word	0xf85ee000
     fc0:	1e848000 	.word	0x1e848000
     fc4:	e17b8000 	.word	0xe17b8000
     fc8:	f8df c054 	ldr.w	ip, [pc, #84]	; 1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
     fcc:	b510      	push	{r4, lr}
     fce:	2300      	movs	r3, #0
     fd0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
     fd4:	2807      	cmp	r0, #7
     fd6:	d21e      	bcs.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
     fd8:	e8df f000 	tbb	[pc, r0]
     fdc:	05050505 	.word	0x05050505
     fe0:	00040404 	.word	0x00040404
     fe4:	2301      	movs	r3, #1
     fe6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
     fea:	2b00      	cmp	r3, #0
     fec:	bf08      	it	eq
     fee:	bd10      	popeq	{r4, pc}
     ff0:	480c      	ldr	r0, [pc, #48]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     ff2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
     ff6:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
     ffa:	2820      	cmp	r0, #32
     ffc:	bf0e      	itee	eq
     ffe:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1002:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1006:	7041      	strbne	r1, [r0, #1]
    1008:	2020      	movs	r0, #32
    100a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    100e:	7058      	strb	r0, [r3, #1]
    1010:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1014:	bd10      	pop	{r4, pc}
    1016:	f240 2162 	movw	r1, #610	; 0x262
    101a:	2070      	movs	r0, #112	; 0x70
    101c:	f002 fb58 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1020:	20000c94 	.word	0x20000c94
    1024:	20000d14 	.word	0x20000d14
    1028:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    102c:	b083      	sub	sp, #12
    102e:	485c      	ldr	r0, [pc, #368]	; (11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>)
    1030:	9904      	ldr	r1, [sp, #16]
    1032:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1036:	9001      	str	r0, [sp, #4]
    1038:	f890 4020 	ldrb.w	r4, [r0, #32]
    103c:	9803      	ldr	r0, [sp, #12]
    103e:	4625      	mov	r5, r4
    1040:	2801      	cmp	r0, #1
    1042:	bf18      	it	ne
    1044:	2802      	cmpne	r0, #2
    1046:	d005      	beq.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    1048:	f640 2197 	movw	r1, #2711	; 0xa97
    104c:	f04f 0070 	mov.w	r0, #112	; 0x70
    1050:	f002 fb3e 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1054:	2700      	movs	r7, #0
    1056:	2d20      	cmp	r5, #32
    1058:	d04a      	beq.n	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
    105a:	4851      	ldr	r0, [pc, #324]	; (11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>)
    105c:	9100      	str	r1, [sp, #0]
    105e:	2600      	movs	r6, #0
    1060:	7f80      	ldrb	r0, [r0, #30]
    1062:	2800      	cmp	r0, #0
    1064:	bf08      	it	eq
    1066:	2602      	moveq	r6, #2
    1068:	f001 fc30 	bl	28cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    106c:	f8df a138 	ldr.w	sl, [pc, #312]	; 11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
    1070:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    1074:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    1078:	f8df 9128 	ldr.w	r9, [pc, #296]	; 11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    107c:	684a      	ldr	r2, [r1, #4]
    107e:	6889      	ldr	r1, [r1, #8]
    1080:	1a12      	subs	r2, r2, r0
    1082:	1a09      	subs	r1, r1, r0
    1084:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1088:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    108c:	4296      	cmp	r6, r2
    108e:	bf98      	it	ls
    1090:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    1094:	d201      	bcs.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    1096:	4589      	cmp	r9, r1
    1098:	d228      	bcs.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    109a:	4a44      	ldr	r2, [pc, #272]	; (11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>)
    109c:	9900      	ldr	r1, [sp, #0]
    109e:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    10a2:	4622      	mov	r2, r4
    10a4:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    10a8:	784c      	ldrb	r4, [r1, #1]
    10aa:	2c20      	cmp	r4, #32
    10ac:	d016      	beq.n	10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
    10ae:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    10b2:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    10b6:	f8dc 8004 	ldr.w	r8, [ip, #4]
    10ba:	f8dc c008 	ldr.w	ip, [ip, #8]
    10be:	eba8 0800 	sub.w	r8, r8, r0
    10c2:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    10c6:	ebac 0100 	sub.w	r1, ip, r0
    10ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    10ce:	4546      	cmp	r6, r8
    10d0:	bf98      	it	ls
    10d2:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    10d6:	d2e4      	bcs.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
    10d8:	4589      	cmp	r9, r1
    10da:	d3e2      	bcc.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
    10dc:	2a20      	cmp	r2, #32
    10de:	d005      	beq.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    10e0:	2120      	movs	r1, #32
    10e2:	2004      	movs	r0, #4
    10e4:	9b00      	ldr	r3, [sp, #0]
    10e6:	f7ff f9e9 	bl	4bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x48>
    10ea:	4604      	mov	r4, r0
    10ec:	42ac      	cmp	r4, r5
    10ee:	d115      	bne.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    10f0:	482f      	ldr	r0, [pc, #188]	; (11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>)
    10f2:	2800      	cmp	r0, #0
    10f4:	bf18      	it	ne
    10f6:	f3af 8000 	nopne.w
    10fa:	f001 fbe7 	bl	28cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    10fe:	4c28      	ldr	r4, [pc, #160]	; (11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>)
    1100:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1104:	2920      	cmp	r1, #32
    1106:	d00d      	beq.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    1108:	68e1      	ldr	r1, [r4, #12]
    110a:	1c82      	adds	r2, r0, #2
    110c:	1a51      	subs	r1, r2, r1
    110e:	0209      	lsls	r1, r1, #8
    1110:	17ca      	asrs	r2, r1, #31
    1112:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1116:	1209      	asrs	r1, r1, #8
    1118:	2900      	cmp	r1, #0
    111a:	dd03      	ble.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    111c:	b005      	add	sp, #20
    111e:	2000      	movs	r0, #0
    1120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1124:	2d20      	cmp	r5, #32
    1126:	d00d      	beq.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
    1128:	462a      	mov	r2, r5
    112a:	9903      	ldr	r1, [sp, #12]
    112c:	f7ff fbe2 	bl	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
    1130:	b358      	cbz	r0, 118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    1132:	9801      	ldr	r0, [sp, #4]
    1134:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1138:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    113c:	b005      	add	sp, #20
    113e:	2001      	movs	r0, #1
    1140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1144:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1148:	b118      	cbz	r0, 1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
    114a:	f002 f907 	bl	335c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    114e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1152:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1156:	b150      	cbz	r0, 116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1158:	4916      	ldr	r1, [pc, #88]	; (11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>)
    115a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    115e:	6008      	str	r0, [r1, #0]
    1160:	2005      	movs	r0, #5
    1162:	f001 fe01 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1166:	f002 f961 	bl	342c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    116a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    116e:	2004      	movs	r0, #4
    1170:	f001 fdfa 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1174:	f001 fe60 	bl	2e38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1178:	2020      	movs	r0, #32
    117a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    117e:	480e      	ldr	r0, [pc, #56]	; (11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>)
    1180:	6880      	ldr	r0, [r0, #8]
    1182:	6007      	str	r7, [r0, #0]
    1184:	480d      	ldr	r0, [pc, #52]	; (11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>)
    1186:	6007      	str	r7, [r0, #0]
    1188:	e7d8      	b.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    118a:	462a      	mov	r2, r5
    118c:	2120      	movs	r1, #32
    118e:	2004      	movs	r0, #4
    1190:	9b04      	ldr	r3, [sp, #16]
    1192:	f7ff f993 	bl	4bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x48>
    1196:	b005      	add	sp, #20
    1198:	2000      	movs	r0, #0
    119a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    119e:	0000      	.short	0x0000
    11a0:	20000d14 	.word	0x20000d14
    11a4:	003fffff 	.word	0x003fffff
    11a8:	20000a14 	.word	0x20000a14
    11ac:	20000c94 	.word	0x20000c94
    11b0:	00000000 	.word	0x00000000
    11b4:	4001f508 	.word	0x4001f508
    11b8:	20000008 	.word	0x20000008
    11bc:	40000508 	.word	0x40000508

000011c0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    11c0:	4906      	ldr	r1, [pc, #24]	; (11dc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    11c2:	b510      	push	{r4, lr}
    11c4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    11c8:	2a20      	cmp	r2, #32
    11ca:	bf1c      	itt	ne
    11cc:	7788      	strbne	r0, [r1, #30]
    11ce:	bd10      	popne	{r4, pc}
    11d0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    11d4:	2070      	movs	r0, #112	; 0x70
    11d6:	f002 fa7b 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11da:	0000      	.short	0x0000
    11dc:	20000d14 	.word	0x20000d14

000011e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    11e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11e4:	4e68      	ldr	r6, [pc, #416]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    11e6:	4607      	mov	r7, r0
    11e8:	b087      	sub	sp, #28
    11ea:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    11ee:	468a      	mov	sl, r1
    11f0:	2820      	cmp	r0, #32
    11f2:	d059      	beq.n	12a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc8>
    11f4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    11f8:	f106 040c 	add.w	r4, r6, #12
    11fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1200:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1204:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1208:	2020      	movs	r0, #32
    120a:	f88d 0000 	strb.w	r0, [sp]
    120e:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1212:	aa02      	add	r2, sp, #8
    1214:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1218:	a901      	add	r1, sp, #4
    121a:	f890 5020 	ldrb.w	r5, [r0, #32]
    121e:	6930      	ldr	r0, [r6, #16]
    1220:	9005      	str	r0, [sp, #20]
    1222:	6830      	ldr	r0, [r6, #0]
    1224:	4438      	add	r0, r7
    1226:	f001 febb 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    122a:	f99d 0008 	ldrsb.w	r0, [sp, #8]
    122e:	2800      	cmp	r0, #0
    1230:	dd02      	ble.n	1238 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    1232:	9801      	ldr	r0, [sp, #4]
    1234:	1c40      	adds	r0, r0, #1
    1236:	9001      	str	r0, [sp, #4]
    1238:	f8d8 0008 	ldr.w	r0, [r8, #8]
    123c:	9901      	ldr	r1, [sp, #4]
    123e:	2f64      	cmp	r7, #100	; 0x64
    1240:	4401      	add	r1, r0
    1242:	d336      	bcc.n	12b2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1244:	4b51      	ldr	r3, [pc, #324]	; (138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>)
    1246:	2000      	movs	r0, #0
    1248:	1bdb      	subs	r3, r3, r7
    124a:	4180      	sbcs	r0, r0
    124c:	d331      	bcc.n	12b2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    124e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    1252:	1a08      	subs	r0, r1, r0
    1254:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1258:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    125c:	d229      	bcs.n	12b2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    125e:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    1262:	6060      	str	r0, [r4, #4]
    1264:	4848      	ldr	r0, [pc, #288]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    1266:	f884 a00c 	strb.w	sl, [r4, #12]
    126a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    126e:	46ea      	mov	sl, sp
    1270:	2d20      	cmp	r5, #32
    1272:	bf1c      	itt	ne
    1274:	4946      	ldrne	r1, [pc, #280]	; (1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>)
    1276:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    127a:	d04a      	beq.n	1312 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x132>
    127c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    1280:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1284:	6860      	ldr	r0, [r4, #4]
    1286:	f8d8 2004 	ldr.w	r2, [r8, #4]
    128a:	4621      	mov	r1, r4
    128c:	1a10      	subs	r0, r2, r0
    128e:	0200      	lsls	r0, r0, #8
    1290:	17c2      	asrs	r2, r0, #31
    1292:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1296:	f108 0604 	add.w	r6, r8, #4
    129a:	1200      	asrs	r0, r0, #8
    129c:	d426      	bmi.n	12ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10c>
    129e:	8970      	ldrh	r0, [r6, #10]
    12a0:	b388      	cbz	r0, 1306 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x126>
    12a2:	8948      	ldrh	r0, [r1, #10]
    12a4:	b148      	cbz	r0, 12ba <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    12a6:	e034      	b.n	1312 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x132>
    12a8:	f640 316a 	movw	r1, #2922	; 0xb6a
    12ac:	2070      	movs	r0, #112	; 0x70
    12ae:	f002 fa0f 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12b2:	b007      	add	sp, #28
    12b4:	2001      	movs	r0, #1
    12b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ba:	4620      	mov	r0, r4
    12bc:	f7ff fe46 	bl	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
    12c0:	aa04      	add	r2, sp, #16
    12c2:	a903      	add	r1, sp, #12
    12c4:	f001 fe6c 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    12c8:	f99d 0010 	ldrsb.w	r0, [sp, #16]
    12cc:	2800      	cmp	r0, #0
    12ce:	bfcc      	ite	gt
    12d0:	2001      	movgt	r0, #1
    12d2:	2000      	movle	r0, #0
    12d4:	f100 0133 	add.w	r1, r0, #51	; 0x33
    12d8:	9803      	ldr	r0, [sp, #12]
    12da:	6832      	ldr	r2, [r6, #0]
    12dc:	1a10      	subs	r0, r2, r0
    12de:	0200      	lsls	r0, r0, #8
    12e0:	17c2      	asrs	r2, r0, #31
    12e2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12e6:	1200      	asrs	r0, r0, #8
    12e8:	4288      	cmp	r0, r1
    12ea:	da12      	bge.n	1312 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x132>
    12ec:	f88a 5000 	strb.w	r5, [sl]
    12f0:	f898 1010 	ldrb.w	r1, [r8, #16]
    12f4:	7b20      	ldrb	r0, [r4, #12]
    12f6:	4281      	cmp	r1, r0
    12f8:	d806      	bhi.n	1308 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    12fa:	9805      	ldr	r0, [sp, #20]
    12fc:	6060      	str	r0, [r4, #4]
    12fe:	b007      	add	sp, #28
    1300:	2002      	movs	r0, #2
    1302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1306:	e004      	b.n	1312 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x132>
    1308:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    130c:	7845      	ldrb	r5, [r0, #1]
    130e:	2d20      	cmp	r5, #32
    1310:	d1b4      	bne.n	127c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9c>
    1312:	2005      	movs	r0, #5
    1314:	f001 fd28 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1318:	4c1b      	ldr	r4, [pc, #108]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    131a:	f04f 30ff 	mov.w	r0, #4294967295
    131e:	60a0      	str	r0, [r4, #8]
    1320:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1324:	f89d 2000 	ldrb.w	r2, [sp]
    1328:	2120      	movs	r1, #32
    132a:	2a20      	cmp	r2, #32
    132c:	bf13      	iteet	ne
    132e:	2005      	movne	r0, #5
    1330:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1334:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1338:	f7ff f8c0 	blne	4bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x48>
    133c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1340:	4913      	ldr	r1, [pc, #76]	; (1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>)
    1342:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1346:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    134a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    134e:	7048      	strb	r0, [r1, #1]
    1350:	6820      	ldr	r0, [r4, #0]
    1352:	4438      	add	r0, r7
    1354:	6020      	str	r0, [r4, #0]
    1356:	2001      	movs	r0, #1
    1358:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    135c:	7e60      	ldrb	r0, [r4, #25]
    135e:	2801      	cmp	r0, #1
    1360:	d105      	bne.n	136e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x18e>
    1362:	6920      	ldr	r0, [r4, #16]
    1364:	1e40      	subs	r0, r0, #1
    1366:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    136a:	f001 fb4f 	bl	2a0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    136e:	f89d 0000 	ldrb.w	r0, [sp]
    1372:	2820      	cmp	r0, #32
    1374:	d003      	beq.n	137e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x19e>
    1376:	4807      	ldr	r0, [pc, #28]	; (1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>)
    1378:	7840      	ldrb	r0, [r0, #1]
    137a:	f002 fa79 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    137e:	b007      	add	sp, #28
    1380:	2000      	movs	r0, #0
    1382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1386:	0000      	.short	0x0000
    1388:	20000d14 	.word	0x20000d14
    138c:	07a11fff 	.word	0x07a11fff
    1390:	20000c94 	.word	0x20000c94
    1394:	20000008 	.word	0x20000008

00001398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1398:	4602      	mov	r2, r0
    139a:	f8df c054 	ldr.w	ip, [pc, #84]	; 13f0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    139e:	b510      	push	{r4, lr}
    13a0:	2300      	movs	r3, #0
    13a2:	ebbc 0202 	subs.w	r2, ip, r2
    13a6:	4408      	add	r0, r1
    13a8:	eb73 0203 	sbcs.w	r2, r3, r3
    13ac:	d204      	bcs.n	13b8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    13ae:	f240 51f1 	movw	r1, #1521	; 0x5f1
    13b2:	2070      	movs	r0, #112	; 0x70
    13b4:	f002 f98c 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13b8:	4a0e      	ldr	r2, [pc, #56]	; (13f4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    13ba:	4291      	cmp	r1, r2
    13bc:	dd04      	ble.n	13c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    13be:	f240 51f2 	movw	r1, #1522	; 0x5f2
    13c2:	2070      	movs	r0, #112	; 0x70
    13c4:	f002 f984 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13c8:	4a0b      	ldr	r2, [pc, #44]	; (13f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    13ca:	4291      	cmp	r1, r2
    13cc:	da04      	bge.n	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    13ce:	f240 51f3 	movw	r1, #1523	; 0x5f3
    13d2:	2070      	movs	r0, #112	; 0x70
    13d4:	f002 f97c 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13d8:	4908      	ldr	r1, [pc, #32]	; (13fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    13da:	4288      	cmp	r0, r1
    13dc:	bfa8      	it	ge
    13de:	4908      	ldrge	r1, [pc, #32]	; (1400 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    13e0:	da03      	bge.n	13ea <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    13e2:	2800      	cmp	r0, #0
    13e4:	bfb4      	ite	lt
    13e6:	4905      	ldrlt	r1, [pc, #20]	; (13fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    13e8:	bd10      	popge	{r4, pc}
    13ea:	1840      	adds	r0, r0, r1
    13ec:	bd10      	pop	{r4, pc}
    13ee:	0000      	.short	0x0000
    13f0:	1e847fff 	.word	0x1e847fff
    13f4:	07a12000 	.word	0x07a12000
    13f8:	f85ee000 	.word	0xf85ee000
    13fc:	1e848000 	.word	0x1e848000
    1400:	e17b8000 	.word	0xe17b8000

00001404 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1404:	4a10      	ldr	r2, [pc, #64]	; (1448 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1406:	1a0b      	subs	r3, r1, r0
    1408:	f102 0c01 	add.w	ip, r2, #1
    140c:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1410:	bf3c      	itt	cc
    1412:	4618      	movcc	r0, r3
    1414:	4770      	bxcc	lr
    1416:	b510      	push	{r4, lr}
    1418:	1a44      	subs	r4, r0, r1
    141a:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    141e:	bf3c      	itt	cc
    1420:	4618      	movcc	r0, r3
    1422:	bd10      	popcc	{r4, pc}
    1424:	429a      	cmp	r2, r3
    1426:	d203      	bcs.n	1430 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1428:	1a10      	subs	r0, r2, r0
    142a:	4408      	add	r0, r1
    142c:	1c40      	adds	r0, r0, #1
    142e:	bd10      	pop	{r4, pc}
    1430:	42a2      	cmp	r2, r4
    1432:	d204      	bcs.n	143e <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1434:	1a51      	subs	r1, r2, r1
    1436:	4408      	add	r0, r1
    1438:	1c40      	adds	r0, r0, #1
    143a:	4240      	negs	r0, r0
    143c:	bd10      	pop	{r4, pc}
    143e:	f640 21f3 	movw	r1, #2803	; 0xaf3
    1442:	2070      	movs	r0, #112	; 0x70
    1444:	f002 f944 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1448:	1e847fff 	.word	0x1e847fff

0000144c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    144c:	490b      	ldr	r1, [pc, #44]	; (147c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    144e:	b510      	push	{r4, lr}
    1450:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1454:	2820      	cmp	r0, #32
    1456:	d00c      	beq.n	1472 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    1458:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    145c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1460:	4a07      	ldr	r2, [pc, #28]	; (1480 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    1462:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1466:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    146a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    146e:	2104      	movs	r1, #4
    1470:	4710      	bx	r2
    1472:	f640 01a5 	movw	r1, #2213	; 0x8a5
    1476:	2070      	movs	r0, #112	; 0x70
    1478:	f002 f92a 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    147c:	20000d14 	.word	0x20000d14
    1480:	20000a14 	.word	0x20000a14

00001484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1484:	b570      	push	{r4, r5, r6, lr}
    1486:	4e60      	ldr	r6, [pc, #384]	; (1608 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>)
    1488:	4960      	ldr	r1, [pc, #384]	; (160c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>)
    148a:	2501      	movs	r5, #1
    148c:	f506 7440 	add.w	r4, r6, #768	; 0x300
    1490:	2808      	cmp	r0, #8
    1492:	d27c      	bcs.n	158e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    1494:	e8df f000 	tbb	[pc, r0]
    1498:	9a885704 	.word	0x9a885704
    149c:	a49f3eb2 	.word	0xa49f3eb2
    14a0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    14a4:	b918      	cbnz	r0, 14ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    14a6:	f001 ff75 	bl	3394 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    14aa:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    14ae:	8ae0      	ldrh	r0, [r4, #22]
    14b0:	b110      	cbz	r0, 14b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    14b2:	f002 f8a9 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    14b6:	b188      	cbz	r0, 14dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    14b8:	f7ff fcb2 	bl	e20 <CONFIG_ISR_STACK_SIZE+0x620>
    14bc:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    14c0:	68a1      	ldr	r1, [r4, #8]
    14c2:	f1b1 3fff 	cmp.w	r1, #4294967295
    14c6:	d005      	beq.n	14d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    14c8:	2301      	movs	r3, #1
    14ca:	2203      	movs	r2, #3
    14cc:	2005      	movs	r0, #5
    14ce:	f001 fb83 	bl	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    14d2:	b140      	cbz	r0, 14e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    14d4:	7e60      	ldrb	r0, [r4, #25]
    14d6:	2801      	cmp	r0, #1
    14d8:	d110      	bne.n	14fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    14da:	e009      	b.n	14f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    14dc:	f640 015d 	movw	r1, #2141	; 0x85d
    14e0:	2070      	movs	r0, #112	; 0x70
    14e2:	f002 f8f5 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14e6:	f640 0162 	movw	r1, #2146	; 0x862
    14ea:	2070      	movs	r0, #112	; 0x70
    14ec:	f002 f8f0 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f0:	6920      	ldr	r0, [r4, #16]
    14f2:	1e40      	subs	r0, r0, #1
    14f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14f8:	f001 fa88 	bl	2a0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    14fc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1500:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1504:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1508:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    150c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1510:	2101      	movs	r1, #1
    1512:	4710      	bx	r2
    1514:	f7ff fc84 	bl	e20 <CONFIG_ISR_STACK_SIZE+0x620>
    1518:	f04f 30ff 	mov.w	r0, #4294967295
    151c:	60a0      	str	r0, [r4, #8]
    151e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1522:	b158      	cbz	r0, 153c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb8>
    1524:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1528:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    152c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1530:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1538:	2106      	movs	r1, #6
    153a:	4710      	bx	r2
    153c:	f640 0172 	movw	r1, #2162	; 0x872
    1540:	2070      	movs	r0, #112	; 0x70
    1542:	f002 f8c5 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1546:	f7ff fc6b 	bl	e20 <CONFIG_ISR_STACK_SIZE+0x620>
    154a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    154e:	f002 f85b 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1552:	b118      	cbz	r0, 155c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1554:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1558:	b128      	cbz	r0, 1566 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe2>
    155a:	e008      	b.n	156e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xea>
    155c:	f640 0181 	movw	r1, #2177	; 0x881
    1560:	2070      	movs	r0, #112	; 0x70
    1562:	f002 f8b5 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1566:	f001 ff15 	bl	3394 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    156a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    156e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1572:	b158      	cbz	r0, 158c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x108>
    1574:	4926      	ldr	r1, [pc, #152]	; (1610 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x18c>)
    1576:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    157a:	6008      	str	r0, [r1, #0]
    157c:	2005      	movs	r0, #5
    157e:	f001 fbf3 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1582:	f001 ff53 	bl	342c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1586:	2000      	movs	r0, #0
    1588:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    158c:	e000      	b.n	1590 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    158e:	e035      	b.n	15fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x178>
    1590:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1594:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1598:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    159c:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    15a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15a4:	2100      	movs	r1, #0
    15a6:	4710      	bx	r2
    15a8:	f001 fc90 	bl	2ecc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    15ac:	8ae0      	ldrh	r0, [r4, #22]
    15ae:	b110      	cbz	r0, 15b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x132>
    15b0:	f002 f82a 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15b4:	b128      	cbz	r0, 15c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13e>
    15b6:	4817      	ldr	r0, [pc, #92]	; (1614 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x190>)
    15b8:	7800      	ldrb	r0, [r0, #0]
    15ba:	2803      	cmp	r0, #3
    15bc:	bf08      	it	eq
    15be:	7765      	strbeq	r5, [r4, #29]
    15c0:	bd70      	pop	{r4, r5, r6, pc}
    15c2:	f640 018b 	movw	r1, #2187	; 0x88b
    15c6:	2070      	movs	r0, #112	; 0x70
    15c8:	f002 f882 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15cc:	4812      	ldr	r0, [pc, #72]	; (1618 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    15ce:	6005      	str	r5, [r0, #0]
    15d0:	6888      	ldr	r0, [r1, #8]
    15d2:	6005      	str	r5, [r0, #0]
    15d4:	bd70      	pop	{r4, r5, r6, pc}
    15d6:	7808      	ldrb	r0, [r1, #0]
    15d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15dc:	f002 b948 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    15e0:	f7ff fc1e 	bl	e20 <CONFIG_ISR_STACK_SIZE+0x620>
    15e4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    15e8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    15ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    15f0:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    15f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15f8:	2105      	movs	r1, #5
    15fa:	4710      	bx	r2
    15fc:	f640 019d 	movw	r1, #2205	; 0x89d
    1600:	2070      	movs	r0, #112	; 0x70
    1602:	f002 f865 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1606:	0000      	.short	0x0000
    1608:	20000a14 	.word	0x20000a14
    160c:	20000008 	.word	0x20000008
    1610:	4001f508 	.word	0x4001f508
    1614:	2000000a 	.word	0x2000000a
    1618:	40000508 	.word	0x40000508

0000161c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    161c:	4803      	ldr	r0, [pc, #12]	; (162c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    161e:	b510      	push	{r4, lr}
    1620:	7840      	ldrb	r0, [r0, #1]
    1622:	f00a f93e 	bl	b8a2 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1626:	b280      	uxth	r0, r0
    1628:	bd10      	pop	{r4, pc}
    162a:	0000      	.short	0x0000
    162c:	2000000a 	.word	0x2000000a

00001630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1630:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1634:	48fe      	ldr	r0, [pc, #1016]	; (1a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>)
    1636:	b093      	sub	sp, #76	; 0x4c
    1638:	4688      	mov	r8, r1
    163a:	6800      	ldr	r0, [r0, #0]
    163c:	4dfd      	ldr	r5, [pc, #1012]	; (1a34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    163e:	05c0      	lsls	r0, r0, #23
    1640:	0dc0      	lsrs	r0, r0, #23
    1642:	d00e      	beq.n	1662 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1644:	3810      	subs	r0, #16
    1646:	b240      	sxtb	r0, r0
    1648:	2800      	cmp	r0, #0
    164a:	bfb8      	it	lt
    164c:	f000 000f 	andlt.w	r0, r0, #15
    1650:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1654:	bfac      	ite	ge
    1656:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    165a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    165e:	0940      	lsrs	r0, r0, #5
    1660:	d00d      	beq.n	167e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1662:	f898 0000 	ldrb.w	r0, [r8]
    1666:	f04f 0b00 	mov.w	fp, #0
    166a:	2800      	cmp	r0, #0
    166c:	bf18      	it	ne
    166e:	2801      	cmpne	r0, #1
    1670:	d018      	beq.n	16a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1672:	f240 714a 	movw	r1, #1866	; 0x74a
    1676:	f04f 0070 	mov.w	r0, #112	; 0x70
    167a:	f002 f829 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    167e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1682:	f04f 0b01 	mov.w	fp, #1
    1686:	2820      	cmp	r0, #32
    1688:	d007      	beq.n	169a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    168a:	f898 0000 	ldrb.w	r0, [r8]
    168e:	b148      	cbz	r0, 16a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1690:	f240 7146 	movw	r1, #1862	; 0x746
    1694:	2070      	movs	r0, #112	; 0x70
    1696:	f002 f81b 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    169a:	f240 7143 	movw	r1, #1859	; 0x743
    169e:	2070      	movs	r0, #112	; 0x70
    16a0:	f002 f816 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16a4:	4ce4      	ldr	r4, [pc, #912]	; (1a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    16a6:	b124      	cbz	r4, 16b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    16a8:	2100      	movs	r1, #0
    16aa:	f240 704d 	movw	r0, #1869	; 0x74d
    16ae:	f3af 8000 	nop.w
    16b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    16b4:	49e1      	ldr	r1, [pc, #900]	; (1a3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    16b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    16ba:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    16be:	f04f 0901 	mov.w	r9, #1
    16c2:	9001      	str	r0, [sp, #4]
    16c4:	b124      	cbz	r4, 16d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    16c6:	2100      	movs	r1, #0
    16c8:	f240 7055 	movw	r0, #1877	; 0x755
    16cc:	f3af 8000 	nop.w
    16d0:	f1b9 0f00 	cmp.w	r9, #0
    16d4:	d00a      	beq.n	16ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    16d6:	bf00      	nop
    16d8:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    16dc:	f04f 0a00 	mov.w	sl, #0
    16e0:	f885 a02b 	strb.w	sl, [r5, #43]	; 0x2b
    16e4:	f1bb 0f00 	cmp.w	fp, #0
    16e8:	d007      	beq.n	16fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    16ea:	e02e      	b.n	174a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    16ec:	48d4      	ldr	r0, [pc, #848]	; (1a40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    16ee:	2800      	cmp	r0, #0
    16f0:	bf18      	it	ne
    16f2:	f3af 8000 	nopne.w
    16f6:	b662      	cpsie	i
    16f8:	e7ee      	b.n	16d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    16fa:	4637      	mov	r7, r6
    16fc:	2001      	movs	r0, #1
    16fe:	ea20 0607 	bic.w	r6, r0, r7
    1702:	48d0      	ldr	r0, [pc, #832]	; (1a44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    1704:	2240      	movs	r2, #64	; 0x40
    1706:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    170a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    170e:	f00a fa36 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1712:	b124      	cbz	r4, 171e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    1714:	2100      	movs	r1, #0
    1716:	f240 50b5 	movw	r0, #1461	; 0x5b5
    171a:	f3af 8000 	nop.w
    171e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1722:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1726:	6a09      	ldr	r1, [r1, #32]
    1728:	6201      	str	r1, [r0, #32]
    172a:	b124      	cbz	r4, 1736 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    172c:	2100      	movs	r1, #0
    172e:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1732:	f3af 8000 	nop.w
    1736:	b124      	cbz	r4, 1742 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    1738:	2100      	movs	r1, #0
    173a:	f240 705f 	movw	r0, #1887	; 0x75f
    173e:	f3af 8000 	nop.w
    1742:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1746:	2800      	cmp	r0, #0
    1748:	d1bc      	bne.n	16c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    174a:	b124      	cbz	r4, 1756 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    174c:	2100      	movs	r1, #0
    174e:	f240 7069 	movw	r0, #1897	; 0x769
    1752:	f3af 8000 	nop.w
    1756:	f001 f8b9 	bl	28cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    175a:	4607      	mov	r7, r0
    175c:	f898 0000 	ldrb.w	r0, [r8]
    1760:	f88d 0016 	strb.w	r0, [sp, #22]
    1764:	f898 000b 	ldrb.w	r0, [r8, #11]
    1768:	f88d 0015 	strb.w	r0, [sp, #21]
    176c:	f898 100a 	ldrb.w	r1, [r8, #10]
    1770:	f88d 1014 	strb.w	r1, [sp, #20]
    1774:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1778:	f8ad 1012 	strh.w	r1, [sp, #18]
    177c:	f898 2000 	ldrb.w	r2, [r8]
    1780:	9000      	str	r0, [sp, #0]
    1782:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1786:	f10d 0908 	add.w	r9, sp, #8
    178a:	b19a      	cbz	r2, 17b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x184>
    178c:	2200      	movs	r2, #0
    178e:	4648      	mov	r0, r9
    1790:	f7fe fe32 	bl	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
    1794:	9707      	str	r7, [sp, #28]
    1796:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    179a:	aa0f      	add	r2, sp, #60	; 0x3c
    179c:	a90e      	add	r1, sp, #56	; 0x38
    179e:	f001 fbff 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    17a2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    17a6:	2820      	cmp	r0, #32
    17a8:	d00a      	beq.n	17c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x190>
    17aa:	6928      	ldr	r0, [r5, #16]
    17ac:	1d40      	adds	r0, r0, #5
    17ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17b2:	e01e      	b.n	17f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c2>
    17b4:	4648      	mov	r0, r9
    17b6:	f8d8 200c 	ldr.w	r2, [r8, #12]
    17ba:	f7fe fe1d 	bl	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
    17be:	e04b      	b.n	1858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x228>
    17c0:	9807      	ldr	r0, [sp, #28]
    17c2:	3009      	adds	r0, #9
    17c4:	9000      	str	r0, [sp, #0]
    17c6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    17ca:	b128      	cbz	r0, 17d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a8>
    17cc:	f001 ff1c 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17d0:	b910      	cbnz	r0, 17d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a8>
    17d2:	9800      	ldr	r0, [sp, #0]
    17d4:	3032      	adds	r0, #50	; 0x32
    17d6:	9000      	str	r0, [sp, #0]
    17d8:	489b      	ldr	r0, [pc, #620]	; (1a48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    17da:	7841      	ldrb	r1, [r0, #1]
    17dc:	980e      	ldr	r0, [sp, #56]	; 0x38
    17de:	4281      	cmp	r1, r0
    17e0:	bf98      	it	ls
    17e2:	9800      	ldrls	r0, [sp, #0]
    17e4:	d903      	bls.n	17ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1be>
    17e6:	1a09      	subs	r1, r1, r0
    17e8:	9800      	ldr	r0, [sp, #0]
    17ea:	4408      	add	r0, r1
    17ec:	9000      	str	r0, [sp, #0]
    17ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17f2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    17f6:	1a89      	subs	r1, r1, r2
    17f8:	9002      	str	r0, [sp, #8]
    17fa:	4408      	add	r0, r1
    17fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1800:	9003      	str	r0, [sp, #12]
    1802:	4631      	mov	r1, r6
    1804:	4648      	mov	r0, r9
    1806:	f7fe fe95 	bl	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
    180a:	f898 000b 	ldrb.w	r0, [r8, #11]
    180e:	9000      	str	r0, [sp, #0]
    1810:	46b9      	mov	r9, r7
    1812:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1816:	a80e      	add	r0, sp, #56	; 0x38
    1818:	f8d8 3004 	ldr.w	r3, [r8, #4]
    181c:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1820:	f7fe fdea 	bl	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
    1824:	9802      	ldr	r0, [sp, #8]
    1826:	9a03      	ldr	r2, [sp, #12]
    1828:	eba0 0009 	sub.w	r0, r0, r9
    182c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1830:	eba2 0209 	sub.w	r2, r2, r9
    1834:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1836:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    183a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    183e:	d201      	bcs.n	1844 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    1840:	4291      	cmp	r1, r2
    1842:	d209      	bcs.n	1858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x228>
    1844:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1848:	1a89      	subs	r1, r1, r2
    184a:	1878      	adds	r0, r7, r1
    184c:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    1850:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1854:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1858:	b124      	cbz	r4, 1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x234>
    185a:	2100      	movs	r1, #0
    185c:	f44f 60ee 	mov.w	r0, #1904	; 0x770
    1860:	f3af 8000 	nop.w
    1864:	4a77      	ldr	r2, [pc, #476]	; (1a44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    1866:	4639      	mov	r1, r7
    1868:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    186c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1870:	a802      	add	r0, sp, #8
    1872:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    1876:	2a01      	cmp	r2, #1
    1878:	bf18      	it	ne
    187a:	2a02      	cmpne	r2, #2
    187c:	d13c      	bne.n	18f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    187e:	9a02      	ldr	r2, [sp, #8]
    1880:	f8dd c00c 	ldr.w	ip, [sp, #12]
    1884:	eba2 0201 	sub.w	r2, r2, r1
    1888:	4b70      	ldr	r3, [pc, #448]	; (1a4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>)
    188a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    188e:	ebac 0101 	sub.w	r1, ip, r1
    1892:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1896:	2a02      	cmp	r2, #2
    1898:	d368      	bcc.n	196c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    189a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    189e:	d265      	bcs.n	196c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    18a0:	428b      	cmp	r3, r1
    18a2:	d363      	bcc.n	196c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    18a4:	f04f 0a01 	mov.w	sl, #1
    18a8:	ab0f      	add	r3, sp, #60	; 0x3c
    18aa:	aa0e      	add	r2, sp, #56	; 0x38
    18ac:	4631      	mov	r1, r6
    18ae:	f7fe ff8b 	bl	7c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c8>
    18b2:	b3e8      	cbz	r0, 1930 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    18b4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    18b8:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    18bc:	4633      	mov	r3, r6
    18be:	428a      	cmp	r2, r1
    18c0:	d060      	beq.n	1984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    18c2:	2005      	movs	r0, #5
    18c4:	f7fe fdfa 	bl	4bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x48>
    18c8:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    18cc:	7048      	strb	r0, [r1, #1]
    18ce:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    18d2:	2820      	cmp	r0, #32
    18d4:	bf03      	ittte	eq
    18d6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    18da:	f880 9020 	strbeq.w	r9, [r0, #32]
    18de:	f880 a023 	strbeq.w	sl, [r0, #35]	; 0x23
    18e2:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    18e6:	bf18      	it	ne
    18e8:	f880 9001 	strbne.w	r9, [r0, #1]
    18ec:	4632      	mov	r2, r6
    18ee:	4649      	mov	r1, r9
    18f0:	f05f 0003 	movs.w	r0, #3
    18f4:	f7ff fb68 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
    18f8:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    18fc:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1900:	b124      	cbz	r4, 190c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2dc>
    1902:	2100      	movs	r1, #0
    1904:	f240 7077 	movw	r0, #1911	; 0x777
    1908:	f3af 8000 	nop.w
    190c:	4850      	ldr	r0, [pc, #320]	; (1a50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    190e:	2800      	cmp	r0, #0
    1910:	bf18      	it	ne
    1912:	f3af 8000 	nopne.w
    1916:	f3ef 8910 	mrs	r9, PRIMASK
    191a:	b672      	cpsid	i
    191c:	b124      	cbz	r4, 1928 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    191e:	2100      	movs	r1, #0
    1920:	f240 707d 	movw	r0, #1917	; 0x77d
    1924:	f3af 8000 	nop.w
    1928:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    192c:	2800      	cmp	r0, #0
    192e:	e000      	b.n	1932 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x302>
    1930:	e024      	b.n	197c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    1932:	f47f aec7 	bne.w	16c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1936:	b124      	cbz	r4, 1942 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    1938:	2100      	movs	r1, #0
    193a:	f240 7085 	movw	r0, #1925	; 0x785
    193e:	f3af 8000 	nop.w
    1942:	f10d 0e04 	add.w	lr, sp, #4
    1946:	f1ba 0f00 	cmp.w	sl, #0
    194a:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    194e:	f100 0004 	add.w	r0, r0, #4
    1952:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1956:	d041      	beq.n	19dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ac>
    1958:	b124      	cbz	r4, 1964 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    195a:	2100      	movs	r1, #0
    195c:	f240 7092 	movw	r0, #1938	; 0x792
    1960:	f3af 8000 	nop.w
    1964:	f1bb 0f00 	cmp.w	fp, #0
    1968:	d12b      	bne.n	19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    196a:	e015      	b.n	1998 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    196c:	4632      	mov	r2, r6
    196e:	4649      	mov	r1, r9
    1970:	2004      	movs	r0, #4
    1972:	f7ff fb29 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
    1976:	f04f 0a01 	mov.w	sl, #1
    197a:	e7bd      	b.n	18f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    197c:	4632      	mov	r2, r6
    197e:	4649      	mov	r1, r9
    1980:	2004      	movs	r0, #4
    1982:	e7b7      	b.n	18f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1984:	2920      	cmp	r1, #32
    1986:	bf19      	ittee	ne
    1988:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    198c:	7840      	ldrbne	r0, [r0, #1]
    198e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1992:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1996:	e797      	b.n	18c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1998:	b19f      	cbz	r7, 19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    199a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    199e:	2820      	cmp	r0, #32
    19a0:	d10f      	bne.n	19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    19a2:	b124      	cbz	r4, 19ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    19a4:	2100      	movs	r1, #0
    19a6:	f240 7097 	movw	r0, #1943	; 0x797
    19aa:	f3af 8000 	nop.w
    19ae:	4631      	mov	r1, r6
    19b0:	2002      	movs	r0, #2
    19b2:	f7ff fb39 	bl	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    19b6:	b920      	cbnz	r0, 19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    19b8:	f898 0000 	ldrb.w	r0, [r8]
    19bc:	b3b8      	cbz	r0, 1a2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fe>
    19be:	2801      	cmp	r0, #1
    19c0:	d05d      	beq.n	1a7e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44e>
    19c2:	b124      	cbz	r4, 19ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39e>
    19c4:	2100      	movs	r1, #0
    19c6:	f240 70b4 	movw	r0, #1972	; 0x7b4
    19ca:	f3af 8000 	nop.w
    19ce:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    19d2:	2001      	movs	r0, #1
    19d4:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    19d8:	f04f 0a01 	mov.w	sl, #1
    19dc:	b124      	cbz	r4, 19e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    19de:	2100      	movs	r1, #0
    19e0:	f240 70bd 	movw	r0, #1981	; 0x7bd
    19e4:	f3af 8000 	nop.w
    19e8:	f1b9 0f00 	cmp.w	r9, #0
    19ec:	d050      	beq.n	1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    19ee:	b124      	cbz	r4, 19fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ca>
    19f0:	2100      	movs	r1, #0
    19f2:	f240 70c1 	movw	r0, #1985	; 0x7c1
    19f6:	f3af 8000 	nop.w
    19fa:	f1ba 0f00 	cmp.w	sl, #0
    19fe:	d011      	beq.n	1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1a00:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1a04:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1a08:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1a0c:	2820      	cmp	r0, #32
    1a0e:	d009      	beq.n	1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1a10:	b124      	cbz	r4, 1a1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    1a12:	2100      	movs	r1, #0
    1a14:	f44f 60f9 	mov.w	r0, #1992	; 0x7c8
    1a18:	f3af 8000 	nop.w
    1a1c:	480d      	ldr	r0, [pc, #52]	; (1a54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    1a1e:	7840      	ldrb	r0, [r0, #1]
    1a20:	f001 ff26 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1a24:	b1d4      	cbz	r4, 1a5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    1a26:	2100      	movs	r1, #0
    1a28:	f240 70cd 	movw	r0, #1997	; 0x7cd
    1a2c:	e014      	b.n	1a58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    1a2e:	e019      	b.n	1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    1a30:	e000ed04 	.word	0xe000ed04
    1a34:	20000d14 	.word	0x20000d14
    1a38:	00000000 	.word	0x00000000
    1a3c:	20000a14 	.word	0x20000a14
    1a40:	00000000 	.word	0x00000000
    1a44:	20000c94 	.word	0x20000c94
    1a48:	2000000a 	.word	0x2000000a
    1a4c:	003fffff 	.word	0x003fffff
    1a50:	00000000 	.word	0x00000000
    1a54:	20000008 	.word	0x20000008
    1a58:	f3af 8000 	nop.w
    1a5c:	b015      	add	sp, #84	; 0x54
    1a5e:	4650      	mov	r0, sl
    1a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a64:	b124      	cbz	r4, 1a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    1a66:	2100      	movs	r1, #0
    1a68:	f240 709f 	movw	r0, #1951	; 0x79f
    1a6c:	f3af 8000 	nop.w
    1a70:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1a74:	2004      	movs	r0, #4
    1a76:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a78:	f7ff faa6 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
    1a7c:	e7ac      	b.n	19d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    1a7e:	2c00      	cmp	r4, #0
    1a80:	f43f ae20 	beq.w	16c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1a84:	2100      	movs	r1, #0
    1a86:	f240 70aa 	movw	r0, #1962	; 0x7aa
    1a8a:	f3af 8000 	nop.w
    1a8e:	e619      	b.n	16c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1a90:	4803      	ldr	r0, [pc, #12]	; (1aa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x470>)
    1a92:	2800      	cmp	r0, #0
    1a94:	bf18      	it	ne
    1a96:	f3af 8000 	nopne.w
    1a9a:	b662      	cpsie	i
    1a9c:	e7a7      	b.n	19ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3be>
    1a9e:	0000      	.short	0x0000
    1aa0:	00000000 	.word	0x00000000

00001aa4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1aa8:	4605      	mov	r5, r0
    1aaa:	48e4      	ldr	r0, [pc, #912]	; (1e3c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1aac:	b08d      	sub	sp, #52	; 0x34
    1aae:	6800      	ldr	r0, [r0, #0]
    1ab0:	05c0      	lsls	r0, r0, #23
    1ab2:	0dc0      	lsrs	r0, r0, #23
    1ab4:	d011      	beq.n	1ada <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    1ab6:	3810      	subs	r0, #16
    1ab8:	b240      	sxtb	r0, r0
    1aba:	2800      	cmp	r0, #0
    1abc:	bfb8      	it	lt
    1abe:	f000 000f 	andlt.w	r0, r0, #15
    1ac2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1ac6:	bfac      	ite	ge
    1ac8:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1acc:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1ad0:	0940      	lsrs	r0, r0, #5
    1ad2:	bf08      	it	eq
    1ad4:	f04f 0b01 	moveq.w	fp, #1
    1ad8:	d001      	beq.n	1ade <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    1ada:	f04f 0b00 	mov.w	fp, #0
    1ade:	7828      	ldrb	r0, [r5, #0]
    1ae0:	2800      	cmp	r0, #0
    1ae2:	f04f 0000 	mov.w	r0, #0
    1ae6:	bf1c      	itt	ne
    1ae8:	b00d      	addne	sp, #52	; 0x34
    1aea:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aee:	f8df 8350 	ldr.w	r8, [pc, #848]	; 1e40 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>
    1af2:	4ed4      	ldr	r6, [pc, #848]	; (1e44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>)
    1af4:	f04f 0900 	mov.w	r9, #0
    1af8:	f8cd 0018 	str.w	r0, [sp, #24]
    1afc:	f1b8 0f00 	cmp.w	r8, #0
    1b00:	d004      	beq.n	1b0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    1b02:	2100      	movs	r1, #0
    1b04:	f44f 60c8 	mov.w	r0, #1600	; 0x640
    1b08:	f3af 8000 	nop.w
    1b0c:	f896 702e 	ldrb.w	r7, [r6, #46]	; 0x2e
    1b10:	f886 902b 	strb.w	r9, [r6, #43]	; 0x2b
    1b14:	f04f 0a00 	mov.w	sl, #0
    1b18:	f1b8 0f00 	cmp.w	r8, #0
    1b1c:	d004      	beq.n	1b28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    1b1e:	2100      	movs	r1, #0
    1b20:	f240 6045 	movw	r0, #1605	; 0x645
    1b24:	f3af 8000 	nop.w
    1b28:	f1bb 0f00 	cmp.w	fp, #0
    1b2c:	d121      	bne.n	1b72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1b2e:	463c      	mov	r4, r7
    1b30:	2001      	movs	r0, #1
    1b32:	ea20 0704 	bic.w	r7, r0, r4
    1b36:	48c4      	ldr	r0, [pc, #784]	; (1e48 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>)
    1b38:	2240      	movs	r2, #64	; 0x40
    1b3a:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    1b3e:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    1b42:	f00a f81c 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1b46:	f1b8 0f00 	cmp.w	r8, #0
    1b4a:	d004      	beq.n	1b56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    1b4c:	2100      	movs	r1, #0
    1b4e:	f240 50b5 	movw	r0, #1461	; 0x5b5
    1b52:	f3af 8000 	nop.w
    1b56:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    1b5a:	eb06 0087 	add.w	r0, r6, r7, lsl #2
    1b5e:	6a09      	ldr	r1, [r1, #32]
    1b60:	6201      	str	r1, [r0, #32]
    1b62:	f1b8 0f00 	cmp.w	r8, #0
    1b66:	d004      	beq.n	1b72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1b68:	2100      	movs	r1, #0
    1b6a:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1b6e:	f3af 8000 	nop.w
    1b72:	f1b8 0f00 	cmp.w	r8, #0
    1b76:	d004      	beq.n	1b82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    1b78:	2100      	movs	r1, #0
    1b7a:	f240 604d 	movw	r0, #1613	; 0x64d
    1b7e:	f3af 8000 	nop.w
    1b82:	f000 fea3 	bl	28cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1b86:	4604      	mov	r4, r0
    1b88:	a802      	add	r0, sp, #8
    1b8a:	9001      	str	r0, [sp, #4]
    1b8c:	7828      	ldrb	r0, [r5, #0]
    1b8e:	f88d 0016 	strb.w	r0, [sp, #22]
    1b92:	7ae8      	ldrb	r0, [r5, #11]
    1b94:	f88d 0015 	strb.w	r0, [sp, #21]
    1b98:	7aa9      	ldrb	r1, [r5, #10]
    1b9a:	f88d 1014 	strb.w	r1, [sp, #20]
    1b9e:	8929      	ldrh	r1, [r5, #8]
    1ba0:	f8ad 1012 	strh.w	r1, [sp, #18]
    1ba4:	782a      	ldrb	r2, [r5, #0]
    1ba6:	9000      	str	r0, [sp, #0]
    1ba8:	686b      	ldr	r3, [r5, #4]
    1baa:	b19a      	cbz	r2, 1bd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x130>
    1bac:	2200      	movs	r2, #0
    1bae:	9801      	ldr	r0, [sp, #4]
    1bb0:	f7fe fc22 	bl	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
    1bb4:	9400      	str	r4, [sp, #0]
    1bb6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1bba:	aa08      	add	r2, sp, #32
    1bbc:	a907      	add	r1, sp, #28
    1bbe:	f001 f9ef 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1bc2:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1bc6:	2820      	cmp	r0, #32
    1bc8:	d009      	beq.n	1bde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x13a>
    1bca:	6930      	ldr	r0, [r6, #16]
    1bcc:	1d40      	adds	r0, r0, #5
    1bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bd2:	e01d      	b.n	1c10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16c>
    1bd4:	68ea      	ldr	r2, [r5, #12]
    1bd6:	9801      	ldr	r0, [sp, #4]
    1bd8:	f7fe fc0e 	bl	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
    1bdc:	e046      	b.n	1c6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    1bde:	9800      	ldr	r0, [sp, #0]
    1be0:	3009      	adds	r0, #9
    1be2:	9000      	str	r0, [sp, #0]
    1be4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1be8:	b128      	cbz	r0, 1bf6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x152>
    1bea:	f001 fd0d 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1bee:	b910      	cbnz	r0, 1bf6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x152>
    1bf0:	9800      	ldr	r0, [sp, #0]
    1bf2:	3032      	adds	r0, #50	; 0x32
    1bf4:	9000      	str	r0, [sp, #0]
    1bf6:	4895      	ldr	r0, [pc, #596]	; (1e4c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1bf8:	9907      	ldr	r1, [sp, #28]
    1bfa:	7840      	ldrb	r0, [r0, #1]
    1bfc:	4288      	cmp	r0, r1
    1bfe:	bf98      	it	ls
    1c00:	9800      	ldrls	r0, [sp, #0]
    1c02:	d903      	bls.n	1c0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1c04:	1a41      	subs	r1, r0, r1
    1c06:	9800      	ldr	r0, [sp, #0]
    1c08:	4408      	add	r0, r1
    1c0a:	9000      	str	r0, [sp, #0]
    1c0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c10:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1c14:	1a89      	subs	r1, r1, r2
    1c16:	9002      	str	r0, [sp, #8]
    1c18:	4408      	add	r0, r1
    1c1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c1e:	9003      	str	r0, [sp, #12]
    1c20:	4639      	mov	r1, r7
    1c22:	9801      	ldr	r0, [sp, #4]
    1c24:	f7fe fc86 	bl	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
    1c28:	9401      	str	r4, [sp, #4]
    1c2a:	7ae8      	ldrb	r0, [r5, #11]
    1c2c:	9000      	str	r0, [sp, #0]
    1c2e:	8929      	ldrh	r1, [r5, #8]
    1c30:	a808      	add	r0, sp, #32
    1c32:	686b      	ldr	r3, [r5, #4]
    1c34:	68ea      	ldr	r2, [r5, #12]
    1c36:	f7fe fbdf 	bl	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
    1c3a:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    1c3e:	9a03      	ldr	r2, [sp, #12]
    1c40:	1ac0      	subs	r0, r0, r3
    1c42:	1ad2      	subs	r2, r2, r3
    1c44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c48:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1c4e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1c52:	d201      	bcs.n	1c58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    1c54:	4291      	cmp	r1, r2
    1c56:	d209      	bcs.n	1c6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    1c58:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1c5c:	1a89      	subs	r1, r1, r2
    1c5e:	1860      	adds	r0, r4, r1
    1c60:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    1c64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c68:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1c6c:	f1b8 0f00 	cmp.w	r8, #0
    1c70:	d004      	beq.n	1c7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d8>
    1c72:	2100      	movs	r1, #0
    1c74:	f240 6053 	movw	r0, #1619	; 0x653
    1c78:	f3af 8000 	nop.w
    1c7c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1c80:	2820      	cmp	r0, #32
    1c82:	d014      	beq.n	1cae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20a>
    1c84:	6930      	ldr	r0, [r6, #16]
    1c86:	9902      	ldr	r1, [sp, #8]
    1c88:	1a09      	subs	r1, r1, r0
    1c8a:	0209      	lsls	r1, r1, #8
    1c8c:	17ca      	asrs	r2, r1, #31
    1c8e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1c92:	1209      	asrs	r1, r1, #8
    1c94:	d50b      	bpl.n	1cae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20a>
    1c96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1c9a:	1a89      	subs	r1, r1, r2
    1c9c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1ca0:	4408      	add	r0, r1
    1ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ca6:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1caa:	f04f 0a01 	mov.w	sl, #1
    1cae:	f1b8 0f00 	cmp.w	r8, #0
    1cb2:	d009      	beq.n	1cc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x224>
    1cb4:	2100      	movs	r1, #0
    1cb6:	f240 605d 	movw	r0, #1629	; 0x65d
    1cba:	f3af 8000 	nop.w
    1cbe:	2100      	movs	r1, #0
    1cc0:	f240 6063 	movw	r0, #1635	; 0x663
    1cc4:	f3af 8000 	nop.w
    1cc8:	9902      	ldr	r1, [sp, #8]
    1cca:	9a03      	ldr	r2, [sp, #12]
    1ccc:	1b09      	subs	r1, r1, r4
    1cce:	1b12      	subs	r2, r2, r4
    1cd0:	485f      	ldr	r0, [pc, #380]	; (1e50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>)
    1cd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1cd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1cda:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1cde:	d205      	bcs.n	1cec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    1ce0:	4290      	cmp	r0, r2
    1ce2:	d303      	bcc.n	1cec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    1ce4:	f1bb 0f00 	cmp.w	fp, #0
    1ce8:	d10b      	bne.n	1d02 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    1cea:	e004      	b.n	1cf6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x252>
    1cec:	464f      	mov	r7, r9
    1cee:	f1bb 0f00 	cmp.w	fp, #0
    1cf2:	d03a      	beq.n	1d6a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1cf4:	e098      	b.n	1e28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1cf6:	4639      	mov	r1, r7
    1cf8:	a802      	add	r0, sp, #8
    1cfa:	f7fe fc1b 	bl	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
    1cfe:	ea4a 0a00 	orr.w	sl, sl, r0
    1d02:	f1ba 0f00 	cmp.w	sl, #0
    1d06:	d024      	beq.n	1d52 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d08:	9802      	ldr	r0, [sp, #8]
    1d0a:	f009 fdca 	bl	b8a2 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1d0e:	4601      	mov	r1, r0
    1d10:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1d14:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1d18:	f8df c138 	ldr.w	ip, [pc, #312]	; 1e54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>
    1d1c:	4410      	add	r0, r2
    1d1e:	1cc0      	adds	r0, r0, #3
    1d20:	180a      	adds	r2, r1, r0
    1d22:	2400      	movs	r4, #0
    1d24:	ebbc 0101 	subs.w	r1, ip, r1
    1d28:	eb74 0109 	sbcs.w	r1, r4, r9
    1d2c:	d346      	bcc.n	1dbc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>
    1d2e:	494a      	ldr	r1, [pc, #296]	; (1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>)
    1d30:	4288      	cmp	r0, r1
    1d32:	dc5e      	bgt.n	1df2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1d34:	4249      	negs	r1, r1
    1d36:	4288      	cmp	r0, r1
    1d38:	db63      	blt.n	1e02 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1d3a:	f10c 0001 	add.w	r0, ip, #1
    1d3e:	4282      	cmp	r2, r0
    1d40:	bfa8      	it	ge
    1d42:	4846      	ldrge	r0, [pc, #280]	; (1e5c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>)
    1d44:	da03      	bge.n	1d4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d46:	2a00      	cmp	r2, #0
    1d48:	bfb8      	it	lt
    1d4a:	4845      	ldrlt	r0, [pc, #276]	; (1e60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>)
    1d4c:	da00      	bge.n	1d50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d4e:	1812      	adds	r2, r2, r0
    1d50:	60ea      	str	r2, [r5, #12]
    1d52:	f04f 0001 	mov.w	r0, #1
    1d56:	9006      	str	r0, [sp, #24]
    1d58:	f1b8 0f00 	cmp.w	r8, #0
    1d5c:	d064      	beq.n	1e28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1d5e:	2100      	movs	r1, #0
    1d60:	f240 6076 	movw	r0, #1654	; 0x676
    1d64:	f3af 8000 	nop.w
    1d68:	e05e      	b.n	1e28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1d6a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1d6e:	aa01      	add	r2, sp, #4
    1d70:	4669      	mov	r1, sp
    1d72:	f001 f915 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1d76:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1d7a:	2820      	cmp	r0, #32
    1d7c:	d023      	beq.n	1dc6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1d7e:	6930      	ldr	r0, [r6, #16]
    1d80:	1d40      	adds	r0, r0, #5
    1d82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d86:	bf00      	nop
    1d88:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d8c:	1a89      	subs	r1, r1, r2
    1d8e:	4401      	add	r1, r0
    1d90:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1d98:	f009 fd83 	bl	b8a2 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1d9c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    1da0:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1da4:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 1e54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>
    1da8:	4411      	add	r1, r2
    1daa:	1cca      	adds	r2, r1, #3
    1dac:	4601      	mov	r1, r0
    1dae:	2300      	movs	r3, #0
    1db0:	ebbc 0101 	subs.w	r1, ip, r1
    1db4:	4410      	add	r0, r2
    1db6:	eb73 0107 	sbcs.w	r1, r3, r7
    1dba:	d217      	bcs.n	1dec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1dbc:	f240 51f1 	movw	r1, #1521	; 0x5f1
    1dc0:	2070      	movs	r0, #112	; 0x70
    1dc2:	f001 fc85 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dc6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1dca:	3409      	adds	r4, #9
    1dcc:	b120      	cbz	r0, 1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1dce:	f001 fc1b 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1dd2:	2800      	cmp	r0, #0
    1dd4:	bf08      	it	eq
    1dd6:	3432      	addeq	r4, #50	; 0x32
    1dd8:	481c      	ldr	r0, [pc, #112]	; (1e4c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1dda:	9900      	ldr	r1, [sp, #0]
    1ddc:	7840      	ldrb	r0, [r0, #1]
    1dde:	4288      	cmp	r0, r1
    1de0:	bf84      	itt	hi
    1de2:	1a40      	subhi	r0, r0, r1
    1de4:	4404      	addhi	r4, r0
    1de6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    1dea:	e7cd      	b.n	1d88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1dec:	491a      	ldr	r1, [pc, #104]	; (1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>)
    1dee:	428a      	cmp	r2, r1
    1df0:	dd04      	ble.n	1dfc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>
    1df2:	f240 51f2 	movw	r1, #1522	; 0x5f2
    1df6:	2070      	movs	r0, #112	; 0x70
    1df8:	f001 fc6a 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dfc:	4919      	ldr	r1, [pc, #100]	; (1e64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>)
    1dfe:	428a      	cmp	r2, r1
    1e00:	da04      	bge.n	1e0c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>
    1e02:	f240 51f3 	movw	r1, #1523	; 0x5f3
    1e06:	2070      	movs	r0, #112	; 0x70
    1e08:	f001 fc62 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e0c:	4914      	ldr	r1, [pc, #80]	; (1e60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>)
    1e0e:	4288      	cmp	r0, r1
    1e10:	bfa8      	it	ge
    1e12:	4912      	ldrge	r1, [pc, #72]	; (1e5c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>)
    1e14:	da03      	bge.n	1e1e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd2>
    1e16:	2800      	cmp	r0, #0
    1e18:	bfb8      	it	lt
    1e1a:	4911      	ldrlt	r1, [pc, #68]	; (1e60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>)
    1e1c:	da00      	bge.n	1e20 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>
    1e1e:	1840      	adds	r0, r0, r1
    1e20:	60e8      	str	r0, [r5, #12]
    1e22:	f04f 0001 	mov.w	r0, #1
    1e26:	9006      	str	r0, [sp, #24]
    1e28:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    1e2c:	2800      	cmp	r0, #0
    1e2e:	f47f ae65 	bne.w	1afc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1e32:	9806      	ldr	r0, [sp, #24]
    1e34:	b00d      	add	sp, #52	; 0x34
    1e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e3a:	0000      	.short	0x0000
    1e3c:	e000ed04 	.word	0xe000ed04
    1e40:	00000000 	.word	0x00000000
    1e44:	20000d14 	.word	0x20000d14
    1e48:	20000c94 	.word	0x20000c94
    1e4c:	2000000a 	.word	0x2000000a
    1e50:	003fffff 	.word	0x003fffff
    1e54:	1e847fff 	.word	0x1e847fff
    1e58:	07a12000 	.word	0x07a12000
    1e5c:	e17b8000 	.word	0xe17b8000
    1e60:	1e848000 	.word	0x1e848000
    1e64:	f85ee000 	.word	0xf85ee000

00001e68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1e68:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e6c:	4d80      	ldr	r5, [pc, #512]	; (2070 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    1e6e:	b08c      	sub	sp, #48	; 0x30
    1e70:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1e74:	2000      	movs	r0, #0
    1e76:	9009      	str	r0, [sp, #36]	; 0x24
    1e78:	2001      	movs	r0, #1
    1e7a:	4c7e      	ldr	r4, [pc, #504]	; (2074 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    1e7c:	f04f 0800 	mov.w	r8, #0
    1e80:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1e84:	4683      	mov	fp, r0
    1e86:	9008      	str	r0, [sp, #32]
    1e88:	b124      	cbz	r4, 1e94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1e8a:	2100      	movs	r1, #0
    1e8c:	f240 70dc 	movw	r0, #2012	; 0x7dc
    1e90:	f3af 8000 	nop.w
    1e94:	9808      	ldr	r0, [sp, #32]
    1e96:	b390      	cbz	r0, 1efe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1e98:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1e9c:	b124      	cbz	r4, 1ea8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1e9e:	2100      	movs	r1, #0
    1ea0:	f240 70e1 	movw	r0, #2017	; 0x7e1
    1ea4:	f3af 8000 	nop.w
    1ea8:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    1eac:	2240      	movs	r2, #64	; 0x40
    1eae:	ea2b 0609 	bic.w	r6, fp, r9
    1eb2:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1eb6:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1eba:	4682      	mov	sl, r0
    1ebc:	f009 fe5f 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ec0:	b124      	cbz	r4, 1ecc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1ec2:	2100      	movs	r1, #0
    1ec4:	f240 50b5 	movw	r0, #1461	; 0x5b5
    1ec8:	f3af 8000 	nop.w
    1ecc:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1ed0:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1ed4:	9000      	str	r0, [sp, #0]
    1ed6:	6a09      	ldr	r1, [r1, #32]
    1ed8:	6201      	str	r1, [r0, #32]
    1eda:	b124      	cbz	r4, 1ee6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1edc:	2100      	movs	r1, #0
    1ede:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1ee2:	f3af 8000 	nop.w
    1ee6:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1eea:	b180      	cbz	r0, 1f0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1eec:	2c00      	cmp	r4, #0
    1eee:	bf1c      	itt	ne
    1ef0:	2100      	movne	r1, #0
    1ef2:	f240 70e7 	movwne	r0, #2023	; 0x7e7
    1ef6:	d0c7      	beq.n	1e88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1ef8:	f3af 8000 	nop.w
    1efc:	e7c4      	b.n	1e88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1efe:	e7ff      	b.n	1f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1f00:	485d      	ldr	r0, [pc, #372]	; (2078 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1f02:	2800      	cmp	r0, #0
    1f04:	bf18      	it	ne
    1f06:	f3af 8000 	nopne.w
    1f0a:	b662      	cpsie	i
    1f0c:	e7c4      	b.n	1e98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1f0e:	b124      	cbz	r4, 1f1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1f10:	2100      	movs	r1, #0
    1f12:	f240 70eb 	movw	r0, #2027	; 0x7eb
    1f16:	f3af 8000 	nop.w
    1f1a:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f1c:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1f20:	2803      	cmp	r0, #3
    1f22:	d178      	bne.n	2016 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1f24:	f8dd 9000 	ldr.w	r9, [sp]
    1f28:	f8cd 9018 	str.w	r9, [sp, #24]
    1f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f2e:	f899 0020 	ldrb.w	r0, [r9, #32]
    1f32:	4288      	cmp	r0, r1
    1f34:	bf14      	ite	ne
    1f36:	f04f 0a00 	movne.w	sl, #0
    1f3a:	f04f 0a01 	moveq.w	sl, #1
    1f3e:	f109 0c20 	add.w	ip, r9, #32
    1f42:	4686      	mov	lr, r0
    1f44:	2220      	movs	r2, #32
    1f46:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1f4a:	e003      	b.n	1f54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1f4c:	4602      	mov	r2, r0
    1f4e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1f52:	7840      	ldrb	r0, [r0, #1]
    1f54:	4288      	cmp	r0, r1
    1f56:	d002      	beq.n	1f5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1f58:	2820      	cmp	r0, #32
    1f5a:	d00a      	beq.n	1f72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1f5c:	e7f6      	b.n	1f4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1f5e:	2820      	cmp	r0, #32
    1f60:	d007      	beq.n	1f72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1f62:	4586      	cmp	lr, r0
    1f64:	d107      	bne.n	1f76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1f66:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1f6a:	7840      	ldrb	r0, [r0, #1]
    1f6c:	f88c 0000 	strb.w	r0, [ip]
    1f70:	e007      	b.n	1f82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1f72:	4640      	mov	r0, r8
    1f74:	e00c      	b.n	1f90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    1f76:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1f7a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1f7e:	7840      	ldrb	r0, [r0, #1]
    1f80:	7048      	strb	r0, [r1, #1]
    1f82:	b124      	cbz	r4, 1f8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    1f84:	2100      	movs	r1, #0
    1f86:	f240 503a 	movw	r0, #1338	; 0x53a
    1f8a:	f3af 8000 	nop.w
    1f8e:	4658      	mov	r0, fp
    1f90:	ea10 0f0a 	tst.w	r0, sl
    1f94:	bf18      	it	ne
    1f96:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    1f9a:	b3e0      	cbz	r0, 2016 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1f9c:	b124      	cbz	r4, 1fa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    1f9e:	2100      	movs	r1, #0
    1fa0:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
    1fa4:	f3af 8000 	nop.w
    1fa8:	4632      	mov	r2, r6
    1faa:	2001      	movs	r0, #1
    1fac:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fae:	f7ff f80b 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
    1fb2:	9806      	ldr	r0, [sp, #24]
    1fb4:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    1fb8:	b124      	cbz	r4, 1fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    1fba:	2100      	movs	r1, #0
    1fbc:	f240 70fb 	movw	r0, #2043	; 0x7fb
    1fc0:	f3af 8000 	nop.w
    1fc4:	482d      	ldr	r0, [pc, #180]	; (207c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    1fc6:	2800      	cmp	r0, #0
    1fc8:	bf18      	it	ne
    1fca:	f3af 8000 	nopne.w
    1fce:	f3ef 8010 	mrs	r0, PRIMASK
    1fd2:	b672      	cpsid	i
    1fd4:	9008      	str	r0, [sp, #32]
    1fd6:	b124      	cbz	r4, 1fe2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    1fd8:	2100      	movs	r1, #0
    1fda:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1fde:	f3af 8000 	nop.w
    1fe2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1fe6:	b138      	cbz	r0, 1ff8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    1fe8:	2c00      	cmp	r4, #0
    1fea:	bf1c      	itt	ne
    1fec:	2100      	movne	r1, #0
    1fee:	f640 0004 	movwne	r0, #2052	; 0x804
    1ff2:	f43f af49 	beq.w	1e88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1ff6:	e77f      	b.n	1ef8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    1ff8:	f1b9 0f00 	cmp.w	r9, #0
    1ffc:	d008      	beq.n	2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    1ffe:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2002:	2820      	cmp	r0, #32
    2004:	d104      	bne.n	2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2006:	4631      	mov	r1, r6
    2008:	2002      	movs	r0, #2
    200a:	f7ff f80d 	bl	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    200e:	b1f8      	cbz	r0, 2050 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2010:	b134      	cbz	r4, 2020 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    2012:	2100      	movs	r1, #0
    2014:	e000      	b.n	2018 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    2016:	e009      	b.n	202c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    2018:	f640 0018 	movw	r0, #2072	; 0x818
    201c:	f3af 8000 	nop.w
    2020:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    2024:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    2028:	2001      	movs	r0, #1
    202a:	9009      	str	r0, [sp, #36]	; 0x24
    202c:	b124      	cbz	r4, 2038 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    202e:	2100      	movs	r1, #0
    2030:	f640 0021 	movw	r0, #2081	; 0x821
    2034:	f3af 8000 	nop.w
    2038:	9808      	ldr	r0, [sp, #32]
    203a:	b188      	cbz	r0, 2060 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    203c:	b124      	cbz	r4, 2048 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    203e:	2100      	movs	r1, #0
    2040:	f640 0025 	movw	r0, #2085	; 0x825
    2044:	f3af 8000 	nop.w
    2048:	9809      	ldr	r0, [sp, #36]	; 0x24
    204a:	b00d      	add	sp, #52	; 0x34
    204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2050:	2c00      	cmp	r4, #0
    2052:	d0f1      	beq.n	2038 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2054:	2100      	movs	r1, #0
    2056:	f640 0013 	movw	r0, #2067	; 0x813
    205a:	f3af 8000 	nop.w
    205e:	e7e6      	b.n	202e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2060:	4805      	ldr	r0, [pc, #20]	; (2078 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2062:	2800      	cmp	r0, #0
    2064:	bf18      	it	ne
    2066:	f3af 8000 	nopne.w
    206a:	b662      	cpsie	i
    206c:	e7e6      	b.n	203c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    206e:	0000      	.short	0x0000
    2070:	20000d14 	.word	0x20000d14
	...

00002080 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2080:	b510      	push	{r4, lr}
    2082:	2820      	cmp	r0, #32
    2084:	d211      	bcs.n	20aa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2086:	490e      	ldr	r1, [pc, #56]	; (20c0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2088:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    208c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2090:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2094:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2098:	b13b      	cbz	r3, 20aa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    209a:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    209e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    20a2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    20a6:	2a01      	cmp	r2, #1
    20a8:	d001      	beq.n	20ae <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    20aa:	2000      	movs	r0, #0
    20ac:	bd10      	pop	{r4, pc}
    20ae:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    20b2:	4601      	mov	r1, r0
    20b4:	2000      	movs	r0, #0
    20b6:	f7fe ff87 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
    20ba:	2001      	movs	r0, #1
    20bc:	bd10      	pop	{r4, pc}
    20be:	0000      	.short	0x0000
    20c0:	20000d14 	.word	0x20000d14

000020c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    20c4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    20c8:	4e7e      	ldr	r6, [pc, #504]	; (22c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    20ca:	4680      	mov	r8, r0
    20cc:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    20d0:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    20d4:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    20d8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    20dc:	2800      	cmp	r0, #0
    20de:	d065      	beq.n	21ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    20e0:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    20e4:	4d78      	ldr	r5, [pc, #480]	; (22c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    20e6:	b125      	cbz	r5, 20f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    20e8:	2100      	movs	r1, #0
    20ea:	f640 30b3 	movw	r0, #2995	; 0xbb3
    20ee:	f3af 8000 	nop.w
    20f2:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    20f6:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    20fa:	2801      	cmp	r0, #1
    20fc:	d018      	beq.n	2130 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    20fe:	b2c0      	uxtb	r0, r0
    2100:	2804      	cmp	r0, #4
    2102:	bf1c      	itt	ne
    2104:	2805      	cmpne	r0, #5
    2106:	2806      	cmpne	r0, #6
    2108:	d055      	beq.n	21b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    210a:	b12d      	cbz	r5, 2118 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    210c:	f04f 0100 	mov.w	r1, #0
    2110:	f640 30bf 	movw	r0, #3007	; 0xbbf
    2114:	f3af 8000 	nop.w
    2118:	f001 fc00 	bl	391c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    211c:	b125      	cbz	r5, 2128 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    211e:	2100      	movs	r1, #0
    2120:	f640 30c3 	movw	r0, #3011	; 0xbc3
    2124:	f3af 8000 	nop.w
    2128:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    212c:	2801      	cmp	r0, #1
    212e:	d1e6      	bne.n	20fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2130:	2401      	movs	r4, #1
    2132:	b125      	cbz	r5, 213e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2134:	2100      	movs	r1, #0
    2136:	f640 30ca 	movw	r0, #3018	; 0xbca
    213a:	f3af 8000 	nop.w
    213e:	b3a4      	cbz	r4, 21aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    2140:	2000      	movs	r0, #0
    2142:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2146:	b125      	cbz	r5, 2152 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    2148:	2100      	movs	r1, #0
    214a:	f640 30cf 	movw	r0, #3023	; 0xbcf
    214e:	f3af 8000 	nop.w
    2152:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2156:	2001      	movs	r0, #1
    2158:	ea20 090b 	bic.w	r9, r0, fp
    215c:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2160:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2164:	2240      	movs	r2, #64	; 0x40
    2166:	f009 fd0a 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    216a:	b125      	cbz	r5, 2176 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    216c:	2100      	movs	r1, #0
    216e:	f240 50b5 	movw	r0, #1461	; 0x5b5
    2172:	f3af 8000 	nop.w
    2176:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    217a:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    217e:	6a00      	ldr	r0, [r0, #32]
    2180:	f8ca 0020 	str.w	r0, [sl, #32]
    2184:	b125      	cbz	r5, 2190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    2186:	2100      	movs	r1, #0
    2188:	f240 50b9 	movw	r0, #1465	; 0x5b9
    218c:	f3af 8000 	nop.w
    2190:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2194:	b1e0      	cbz	r0, 21d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    2196:	2d00      	cmp	r5, #0
    2198:	bf1c      	itt	ne
    219a:	2100      	movne	r1, #0
    219c:	f640 30d5 	movwne	r0, #3029	; 0xbd5
    21a0:	d0c7      	beq.n	2132 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21a2:	bf00      	nop
    21a4:	f3af 8000 	nop.w
    21a8:	e7c3      	b.n	2132 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21aa:	e00a      	b.n	21c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    21ac:	f640 31aa 	movw	r1, #2986	; 0xbaa
    21b0:	2070      	movs	r0, #112	; 0x70
    21b2:	f001 fa8d 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21b6:	464a      	mov	r2, r9
    21b8:	4641      	mov	r1, r8
    21ba:	2001      	movs	r0, #1
    21bc:	f7fe ff04 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
    21c0:	e7ac      	b.n	211c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    21c2:	4842      	ldr	r0, [pc, #264]	; (22cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    21c4:	2800      	cmp	r0, #0
    21c6:	bf18      	it	ne
    21c8:	f3af 8000 	nopne.w
    21cc:	b662      	cpsie	i
    21ce:	e7b7      	b.n	2140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    21d0:	b125      	cbz	r5, 21dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    21d2:	2100      	movs	r1, #0
    21d4:	f640 30d9 	movw	r0, #3033	; 0xbd9
    21d8:	f3af 8000 	nop.w
    21dc:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    21e0:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    21e4:	4640      	mov	r0, r8
    21e6:	461c      	mov	r4, r3
    21e8:	f04f 0b20 	mov.w	fp, #32
    21ec:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    21f0:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    21f4:	e004      	b.n	2200 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    21f6:	46a3      	mov	fp, r4
    21f8:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    21fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2200:	4284      	cmp	r4, r0
    2202:	d002      	beq.n	220a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2204:	2c20      	cmp	r4, #32
    2206:	d02b      	beq.n	2260 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2208:	e7f5      	b.n	21f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    220a:	2c20      	cmp	r4, #32
    220c:	d028      	beq.n	2260 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    220e:	42a3      	cmp	r3, r4
    2210:	d104      	bne.n	221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    2212:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2216:	7840      	ldrb	r0, [r0, #1]
    2218:	7008      	strb	r0, [r1, #0]
    221a:	e005      	b.n	2228 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    221c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2220:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2224:	7840      	ldrb	r0, [r0, #1]
    2226:	7048      	strb	r0, [r1, #1]
    2228:	f1ba 0f00 	cmp.w	sl, #0
    222c:	d011      	beq.n	2252 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    222e:	b125      	cbz	r5, 223a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    2230:	2100      	movs	r1, #0
    2232:	f240 5032 	movw	r0, #1330	; 0x532
    2236:	f3af 8000 	nop.w
    223a:	f89a 0000 	ldrb.w	r0, [sl]
    223e:	42a0      	cmp	r0, r4
    2240:	d107      	bne.n	2252 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2242:	b125      	cbz	r5, 224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    2244:	2100      	movs	r1, #0
    2246:	f240 5035 	movw	r0, #1333	; 0x535
    224a:	f3af 8000 	nop.w
    224e:	f88a b000 	strb.w	fp, [sl]
    2252:	b15d      	cbz	r5, 226c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2254:	2100      	movs	r1, #0
    2256:	f240 503a 	movw	r0, #1338	; 0x53a
    225a:	f3af 8000 	nop.w
    225e:	e000      	b.n	2262 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2260:	b125      	cbz	r5, 226c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2262:	2100      	movs	r1, #0
    2264:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2268:	f3af 8000 	nop.w
    226c:	4818      	ldr	r0, [pc, #96]	; (22d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    226e:	2800      	cmp	r0, #0
    2270:	bf18      	it	ne
    2272:	f3af 8000 	nopne.w
    2276:	f3ef 8410 	mrs	r4, PRIMASK
    227a:	b672      	cpsid	i
    227c:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2280:	b138      	cbz	r0, 2292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    2282:	2d00      	cmp	r5, #0
    2284:	bf1c      	itt	ne
    2286:	2100      	movne	r1, #0
    2288:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    228c:	f43f af51 	beq.w	2132 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2290:	e788      	b.n	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    2292:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2296:	2001      	movs	r0, #1
    2298:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    229c:	b154      	cbz	r4, 22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    229e:	2d00      	cmp	r5, #0
    22a0:	bf08      	it	eq
    22a2:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    22a6:	2100      	movs	r1, #0
    22a8:	f44f 603f 	mov.w	r0, #3056	; 0xbf0
    22ac:	f3af 8000 	nop.w
    22b0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    22b4:	4805      	ldr	r0, [pc, #20]	; (22cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    22b6:	2800      	cmp	r0, #0
    22b8:	bf18      	it	ne
    22ba:	f3af 8000 	nopne.w
    22be:	b662      	cpsie	i
    22c0:	e7ed      	b.n	229e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    22c2:	0000      	.short	0x0000
    22c4:	20000d14 	.word	0x20000d14
	...

000022d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    22d4:	b570      	push	{r4, r5, r6, lr}
    22d6:	4605      	mov	r5, r0
    22d8:	f001 f984 	bl	35e4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    22dc:	480d      	ldr	r0, [pc, #52]	; (2314 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    22de:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    22e2:	2400      	movs	r4, #0
    22e4:	3880      	subs	r0, #128	; 0x80
    22e6:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    22ea:	bf00      	nop
    22ec:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    22f0:	b129      	cbz	r1, 22fe <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    22f2:	1c61      	adds	r1, r4, #1
    22f4:	b2cc      	uxtb	r4, r1
    22f6:	2c20      	cmp	r4, #32
    22f8:	d3f8      	bcc.n	22ec <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    22fa:	2020      	movs	r0, #32
    22fc:	bd70      	pop	{r4, r5, r6, pc}
    22fe:	4906      	ldr	r1, [pc, #24]	; (2318 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    2300:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2304:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
    2308:	4621      	mov	r1, r4
    230a:	2001      	movs	r0, #1
    230c:	f7fe fe5c 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
    2310:	4620      	mov	r0, r4
    2312:	bd70      	pop	{r4, r5, r6, pc}
    2314:	20000d14 	.word	0x20000d14
    2318:	20000a14 	.word	0x20000a14

0000231c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2320:	b083      	sub	sp, #12
    2322:	f000 fad3 	bl	28cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2326:	4605      	mov	r5, r0
    2328:	f000 fd86 	bl	2e38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    232c:	4c60      	ldr	r4, [pc, #384]	; (24b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    232e:	68a0      	ldr	r0, [r4, #8]
    2330:	f1b0 3fff 	cmp.w	r0, #4294967295
    2334:	bf1c      	itt	ne
    2336:	f04f 30ff 	movne.w	r0, #4294967295
    233a:	60a0      	strne	r0, [r4, #8]
    233c:	7fa0      	ldrb	r0, [r4, #30]
    233e:	f8df b174 	ldr.w	fp, [pc, #372]	; 24b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>
    2342:	b9a8      	cbnz	r0, 2370 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2344:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2348:	1a08      	subs	r0, r1, r0
    234a:	0200      	lsls	r0, r0, #8
    234c:	17c1      	asrs	r1, r0, #31
    234e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2352:	1200      	asrs	r0, r0, #8
    2354:	f44f 710c 	mov.w	r1, #560	; 0x230
    2358:	f009 fad0 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    235c:	6921      	ldr	r1, [r4, #16]
    235e:	4408      	add	r0, r1
    2360:	1a28      	subs	r0, r5, r0
    2362:	0200      	lsls	r0, r0, #8
    2364:	17c1      	asrs	r1, r0, #31
    2366:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    236a:	1200      	asrs	r0, r0, #8
    236c:	0fc0      	lsrs	r0, r0, #31
    236e:	d00b      	beq.n	2388 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2370:	7e60      	ldrb	r0, [r4, #25]
    2372:	b1c0      	cbz	r0, 23a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x8a>
    2374:	f000 fbb6 	bl	2ae4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2378:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    237c:	b1c8      	cbz	r0, 23b2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x96>
    237e:	f240 414e 	movw	r1, #1102	; 0x44e
    2382:	2070      	movs	r0, #112	; 0x70
    2384:	f001 f9a4 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2388:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    238c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2390:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2394:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
    2398:	2108      	movs	r1, #8
    239a:	4790      	blx	r2
    239c:	f240 413d 	movw	r1, #1085	; 0x43d
    23a0:	2070      	movs	r0, #112	; 0x70
    23a2:	f001 f995 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23a6:	1ce8      	adds	r0, r5, #3
    23a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23ac:	f000 fa94 	bl	28d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    23b0:	e7e2      	b.n	2378 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    23b2:	f04f 0a01 	mov.w	sl, #1
    23b6:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    23ba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23be:	2820      	cmp	r0, #32
    23c0:	d024      	beq.n	240c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf0>
    23c2:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    23c6:	2020      	movs	r0, #32
    23c8:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    23cc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    23d0:	2600      	movs	r6, #0
    23d2:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    23d6:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    23da:	4837      	ldr	r0, [pc, #220]	; (24b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>)
    23dc:	6026      	str	r6, [r4, #0]
    23de:	7800      	ldrb	r0, [r0, #0]
    23e0:	2802      	cmp	r0, #2
    23e2:	bf16      	itet	ne
    23e4:	2803      	cmpne	r0, #3
    23e6:	2001      	moveq	r0, #1
    23e8:	2000      	movne	r0, #0
    23ea:	7720      	strb	r0, [r4, #28]
    23ec:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    23f0:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    23f4:	f899 0020 	ldrb.w	r0, [r9, #32]
    23f8:	2820      	cmp	r0, #32
    23fa:	d030      	beq.n	245e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    23fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2400:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    2404:	7c81      	ldrb	r1, [r0, #18]
    2406:	2901      	cmp	r1, #1
    2408:	d005      	beq.n	2416 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    240a:	e028      	b.n	245e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    240c:	f240 4151 	movw	r1, #1105	; 0x451
    2410:	2070      	movs	r0, #112	; 0x70
    2412:	f001 f95d 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2416:	46ab      	mov	fp, r5
    2418:	1d05      	adds	r5, r0, #4
    241a:	89c0      	ldrh	r0, [r0, #14]
    241c:	aa01      	add	r2, sp, #4
    241e:	4669      	mov	r1, sp
    2420:	f000 fdbe 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2424:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2428:	2820      	cmp	r0, #32
    242a:	d004      	beq.n	2436 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x11a>
    242c:	6920      	ldr	r0, [r4, #16]
    242e:	1d40      	adds	r0, r0, #5
    2430:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2434:	e00b      	b.n	244e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    2436:	8968      	ldrh	r0, [r5, #10]
    2438:	f10b 0b09 	add.w	fp, fp, #9
    243c:	b128      	cbz	r0, 244a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12e>
    243e:	f001 f8e3 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2442:	2800      	cmp	r0, #0
    2444:	bf08      	it	eq
    2446:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    244a:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    244e:	e9d5 2100 	ldrd	r2, r1, [r5]
    2452:	1a89      	subs	r1, r1, r2
    2454:	6028      	str	r0, [r5, #0]
    2456:	4408      	add	r0, r1
    2458:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    245c:	6068      	str	r0, [r5, #4]
    245e:	4639      	mov	r1, r7
    2460:	2001      	movs	r0, #1
    2462:	f7fe fde1 	bl	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    2466:	2800      	cmp	r0, #0
    2468:	d0f9      	beq.n	245e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    246a:	4814      	ldr	r0, [pc, #80]	; (24bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    246c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2470:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2474:	2802      	cmp	r0, #2
    2476:	d104      	bne.n	2482 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x166>
    2478:	463a      	mov	r2, r7
    247a:	4641      	mov	r1, r8
    247c:	2006      	movs	r0, #6
    247e:	f7fe fda3 	bl	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
    2482:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2486:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    248a:	2820      	cmp	r0, #32
    248c:	d003      	beq.n	2496 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17a>
    248e:	480c      	ldr	r0, [pc, #48]	; (24c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>)
    2490:	7840      	ldrb	r0, [r0, #1]
    2492:	f001 f9ed 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2496:	7f20      	ldrb	r0, [r4, #28]
    2498:	2800      	cmp	r0, #0
    249a:	bf04      	itt	eq
    249c:	b003      	addeq	sp, #12
    249e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24a2:	f000 fd13 	bl	2ecc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    24a6:	7726      	strb	r6, [r4, #28]
    24a8:	7766      	strb	r6, [r4, #29]
    24aa:	b003      	add	sp, #12
    24ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b0:	20000d14 	.word	0x20000d14
    24b4:	20000a14 	.word	0x20000a14
    24b8:	2000000a 	.word	0x2000000a
    24bc:	20000c94 	.word	0x20000c94
    24c0:	20000008 	.word	0x20000008

000024c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    24c4:	b530      	push	{r4, r5, lr}
    24c6:	4c30      	ldr	r4, [pc, #192]	; (2588 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    24c8:	b083      	sub	sp, #12
    24ca:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24ce:	2920      	cmp	r1, #32
    24d0:	d008      	beq.n	24e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    24d2:	68a1      	ldr	r1, [r4, #8]
    24d4:	f1b1 3fff 	cmp.w	r1, #4294967295
    24d8:	d009      	beq.n	24ee <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    24da:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    24de:	2070      	movs	r0, #112	; 0x70
    24e0:	f001 f8f6 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24e4:	f640 21cf 	movw	r1, #2767	; 0xacf
    24e8:	2070      	movs	r0, #112	; 0x70
    24ea:	f001 f8f1 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24ee:	6861      	ldr	r1, [r4, #4]
    24f0:	f8df c098 	ldr.w	ip, [pc, #152]	; 258c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    24f4:	180b      	adds	r3, r1, r0
    24f6:	2200      	movs	r2, #0
    24f8:	ebbc 0101 	subs.w	r1, ip, r1
    24fc:	eb72 0102 	sbcs.w	r1, r2, r2
    2500:	d204      	bcs.n	250c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    2502:	f240 51f1 	movw	r1, #1521	; 0x5f1
    2506:	2070      	movs	r0, #112	; 0x70
    2508:	f001 f8e2 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    250c:	4920      	ldr	r1, [pc, #128]	; (2590 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    250e:	4288      	cmp	r0, r1
    2510:	dd04      	ble.n	251c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    2512:	f240 51f2 	movw	r1, #1522	; 0x5f2
    2516:	2070      	movs	r0, #112	; 0x70
    2518:	f001 f8da 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    251c:	491d      	ldr	r1, [pc, #116]	; (2594 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    251e:	4288      	cmp	r0, r1
    2520:	da04      	bge.n	252c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    2522:	f240 51f3 	movw	r1, #1523	; 0x5f3
    2526:	2070      	movs	r0, #112	; 0x70
    2528:	f001 f8d2 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    252c:	481a      	ldr	r0, [pc, #104]	; (2598 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    252e:	4283      	cmp	r3, r0
    2530:	bfa8      	it	ge
    2532:	481a      	ldrge	r0, [pc, #104]	; (259c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2534:	da03      	bge.n	253e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    2536:	2b00      	cmp	r3, #0
    2538:	bfb8      	it	lt
    253a:	4817      	ldrlt	r0, [pc, #92]	; (2598 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    253c:	da00      	bge.n	2540 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    253e:	181b      	adds	r3, r3, r0
    2540:	4618      	mov	r0, r3
    2542:	aa01      	add	r2, sp, #4
    2544:	4669      	mov	r1, sp
    2546:	f000 fd2b 	bl	2fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    254a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    254e:	280f      	cmp	r0, #15
    2550:	bfcc      	ite	gt
    2552:	2001      	movgt	r0, #1
    2554:	2000      	movle	r0, #0
    2556:	9900      	ldr	r1, [sp, #0]
    2558:	4408      	add	r0, r1
    255a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    255e:	60a1      	str	r1, [r4, #8]
    2560:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2564:	2800      	cmp	r0, #0
    2566:	bf04      	itt	eq
    2568:	b003      	addeq	sp, #12
    256a:	bd30      	popeq	{r4, r5, pc}
    256c:	2301      	movs	r3, #1
    256e:	2203      	movs	r2, #3
    2570:	2005      	movs	r0, #5
    2572:	f000 fb31 	bl	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2576:	2800      	cmp	r0, #0
    2578:	bf1c      	itt	ne
    257a:	b003      	addne	sp, #12
    257c:	bd30      	popne	{r4, r5, pc}
    257e:	f640 21d8 	movw	r1, #2776	; 0xad8
    2582:	2070      	movs	r0, #112	; 0x70
    2584:	f001 f8a4 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2588:	20000d14 	.word	0x20000d14
    258c:	1e847fff 	.word	0x1e847fff
    2590:	07a12000 	.word	0x07a12000
    2594:	f85ee000 	.word	0xf85ee000
    2598:	1e848000 	.word	0x1e848000
    259c:	e17b8000 	.word	0xe17b8000

000025a0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    25a0:	b570      	push	{r4, r5, r6, lr}
    25a2:	4c1e      	ldr	r4, [pc, #120]	; (261c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    25a4:	2120      	movs	r1, #32
    25a6:	f884 1020 	strb.w	r1, [r4, #32]
    25aa:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    25ae:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    25b2:	2000      	movs	r0, #0
    25b4:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    25b8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    25bc:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    25c0:	1e42      	subs	r2, r0, #1
    25c2:	60a2      	str	r2, [r4, #8]
    25c4:	6020      	str	r0, [r4, #0]
    25c6:	77a0      	strb	r0, [r4, #30]
    25c8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    25cc:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    25d0:	7720      	strb	r0, [r4, #28]
    25d2:	7760      	strb	r0, [r4, #29]
    25d4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    25d8:	4911      	ldr	r1, [pc, #68]	; (2620 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    25da:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    25de:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    25e2:	7008      	strb	r0, [r1, #0]
    25e4:	7048      	strb	r0, [r1, #1]
    25e6:	8048      	strh	r0, [r1, #2]
    25e8:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    25ec:	2210      	movs	r2, #16
    25ee:	7088      	strb	r0, [r1, #2]
    25f0:	f801 0f04 	strb.w	r0, [r1, #4]!
    25f4:	1e52      	subs	r2, r2, #1
    25f6:	d1fa      	bne.n	25ee <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    25f8:	4d0a      	ldr	r5, [pc, #40]	; (2624 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    25fa:	2601      	movs	r6, #1
    25fc:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2600:	20ff      	movs	r0, #255	; 0xff
    2602:	7028      	strb	r0, [r5, #0]
    2604:	4808      	ldr	r0, [pc, #32]	; (2628 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2606:	f001 f915 	bl	3834 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    260a:	7068      	strb	r0, [r5, #1]
    260c:	f001 f970 	bl	38f0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2610:	60a8      	str	r0, [r5, #8]
    2612:	f000 fc89 	bl	2f28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2616:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    261a:	bd70      	pop	{r4, r5, r6, pc}
    261c:	20000d14 	.word	0x20000d14
    2620:	2000000a 	.word	0x2000000a
    2624:	20000008 	.word	0x20000008
    2628:	00000e81 	.word	0x00000e81

0000262c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    262c:	b570      	push	{r4, r5, r6, lr}
    262e:	4604      	mov	r4, r0
    2630:	4615      	mov	r5, r2
    2632:	4608      	mov	r0, r1
    2634:	f009 f935 	bl	b8a2 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2638:	4a0f      	ldr	r2, [pc, #60]	; (2678 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    263a:	1b01      	subs	r1, r0, r4
    263c:	f102 0c01 	add.w	ip, r2, #1
    2640:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    2644:	bf24      	itt	cs
    2646:	1a23      	subcs	r3, r4, r0
    2648:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    264c:	d30b      	bcc.n	2666 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    264e:	428a      	cmp	r2, r1
    2650:	d203      	bcs.n	265a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    2652:	1b11      	subs	r1, r2, r4
    2654:	4408      	add	r0, r1
    2656:	1c41      	adds	r1, r0, #1
    2658:	e005      	b.n	2666 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    265a:	429a      	cmp	r2, r3
    265c:	d207      	bcs.n	266e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    265e:	1a10      	subs	r0, r2, r0
    2660:	4420      	add	r0, r4
    2662:	1c40      	adds	r0, r0, #1
    2664:	4241      	negs	r1, r0
    2666:	f101 000f 	add.w	r0, r1, #15
    266a:	1a28      	subs	r0, r5, r0
    266c:	bd70      	pop	{r4, r5, r6, pc}
    266e:	f640 21f3 	movw	r1, #2803	; 0xaf3
    2672:	2070      	movs	r0, #112	; 0x70
    2674:	f001 f82c 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2678:	1e847fff 	.word	0x1e847fff

0000267c <MPSL_IRQ_RTC0_Handler>:
    267c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2680:	4c38      	ldr	r4, [pc, #224]	; (2764 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2682:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2686:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2768 <MPSL_IRQ_RTC0_Handler+0xec>
    268a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    268e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2692:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2696:	f04f 0500 	mov.w	r5, #0
    269a:	bf1c      	itt	ne
    269c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    26a0:	2800      	cmpne	r0, #0
    26a2:	d017      	beq.n	26d4 <MPSL_IRQ_RTC0_Handler+0x58>
    26a4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26a8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26ac:	482f      	ldr	r0, [pc, #188]	; (276c <MPSL_IRQ_RTC0_Handler+0xf0>)
    26ae:	6800      	ldr	r0, [r0, #0]
    26b0:	f8d8 1000 	ldr.w	r1, [r8]
    26b4:	eba0 0001 	sub.w	r0, r0, r1
    26b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26bc:	2802      	cmp	r0, #2
    26be:	d302      	bcc.n	26c6 <MPSL_IRQ_RTC0_Handler+0x4a>
    26c0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    26c4:	d306      	bcc.n	26d4 <MPSL_IRQ_RTC0_Handler+0x58>
    26c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    26ca:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26ce:	2004      	movs	r0, #4
    26d0:	f7fe fed8 	bl	1484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26d4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26d8:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    26dc:	bf1c      	itt	ne
    26de:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    26e2:	2800      	cmpne	r0, #0
    26e4:	d017      	beq.n	2716 <MPSL_IRQ_RTC0_Handler+0x9a>
    26e6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    26ea:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26ee:	4820      	ldr	r0, [pc, #128]	; (2770 <MPSL_IRQ_RTC0_Handler+0xf4>)
    26f0:	6800      	ldr	r0, [r0, #0]
    26f2:	f8d8 1000 	ldr.w	r1, [r8]
    26f6:	eba0 0001 	sub.w	r0, r0, r1
    26fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26fe:	2802      	cmp	r0, #2
    2700:	d302      	bcc.n	2708 <MPSL_IRQ_RTC0_Handler+0x8c>
    2702:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2706:	d306      	bcc.n	2716 <MPSL_IRQ_RTC0_Handler+0x9a>
    2708:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    270c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2710:	2005      	movs	r0, #5
    2712:	f7fe feb7 	bl	1484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2716:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    271a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    271e:	bf1a      	itte	ne
    2720:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2724:	2800      	cmpne	r0, #0
    2726:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    272a:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    272e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2732:	4810      	ldr	r0, [pc, #64]	; (2774 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2734:	6800      	ldr	r0, [r0, #0]
    2736:	f8d8 1000 	ldr.w	r1, [r8]
    273a:	eba0 0001 	sub.w	r0, r0, r1
    273e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2742:	2802      	cmp	r0, #2
    2744:	d304      	bcc.n	2750 <MPSL_IRQ_RTC0_Handler+0xd4>
    2746:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    274a:	bf38      	it	cc
    274c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2750:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2754:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    275c:	2006      	movs	r0, #6
    275e:	f7fe be91 	b.w	1484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2762:	0000      	.short	0x0000
    2764:	4000b000 	.word	0x4000b000
    2768:	4000b504 	.word	0x4000b504
    276c:	4000b540 	.word	0x4000b540
    2770:	4000b544 	.word	0x4000b544
    2774:	4000b548 	.word	0x4000b548

00002778 <MPSL_IRQ_TIMER0_Handler>:
    2778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    277c:	4d3a      	ldr	r5, [pc, #232]	; (2868 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    277e:	7828      	ldrb	r0, [r5, #0]
    2780:	2804      	cmp	r0, #4
    2782:	d06c      	beq.n	285e <MPSL_IRQ_TIMER0_Handler+0xe6>
    2784:	1ce8      	adds	r0, r5, #3
    2786:	2201      	movs	r2, #1
    2788:	7801      	ldrb	r1, [r0, #0]
    278a:	b159      	cbz	r1, 27a4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    278c:	2901      	cmp	r1, #1
    278e:	bf08      	it	eq
    2790:	706a      	strbeq	r2, [r5, #1]
    2792:	d002      	beq.n	279a <MPSL_IRQ_TIMER0_Handler+0x22>
    2794:	7869      	ldrb	r1, [r5, #1]
    2796:	2900      	cmp	r1, #0
    2798:	d05c      	beq.n	2854 <MPSL_IRQ_TIMER0_Handler+0xdc>
    279a:	2102      	movs	r1, #2
    279c:	7001      	strb	r1, [r0, #0]
    279e:	7840      	ldrb	r0, [r0, #1]
    27a0:	f000 fae2 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27a4:	4c31      	ldr	r4, [pc, #196]	; (286c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    27a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27aa:	f04f 0800 	mov.w	r8, #0
    27ae:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    27b2:	f44f 7680 	mov.w	r6, #256	; 0x100
    27b6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27ba:	bf1c      	itt	ne
    27bc:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    27c0:	2800      	cmpne	r0, #0
    27c2:	d008      	beq.n	27d6 <MPSL_IRQ_TIMER0_Handler+0x5e>
    27c4:	f04f 0003 	mov.w	r0, #3
    27c8:	f000 face 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d0:	2003      	movs	r0, #3
    27d2:	f7fe fe57 	bl	1484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27da:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    27de:	bf1c      	itt	ne
    27e0:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    27e4:	2800      	cmpne	r0, #0
    27e6:	d008      	beq.n	27fa <MPSL_IRQ_TIMER0_Handler+0x82>
    27e8:	f04f 0002 	mov.w	r0, #2
    27ec:	f000 fabc 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27f4:	2002      	movs	r0, #2
    27f6:	f7fe fe45 	bl	1484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27fe:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2802:	bf1c      	itt	ne
    2804:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2808:	2800      	cmpne	r0, #0
    280a:	d008      	beq.n	281e <MPSL_IRQ_TIMER0_Handler+0xa6>
    280c:	f04f 0001 	mov.w	r0, #1
    2810:	f000 faaa 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2814:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2818:	2001      	movs	r0, #1
    281a:	f7fe fe33 	bl	1484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    281e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2822:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2826:	bf1a      	itte	ne
    2828:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    282c:	2800      	cmpne	r0, #0
    282e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2832:	f04f 0000 	mov.w	r0, #0
    2836:	f000 fa97 	bl	2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    283a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    283e:	2004      	movs	r0, #4
    2840:	7028      	strb	r0, [r5, #0]
    2842:	f8c5 8008 	str.w	r8, [r5, #8]
    2846:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    284a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    284e:	2000      	movs	r0, #0
    2850:	f7fe be18 	b.w	1484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2854:	f240 31c7 	movw	r1, #967	; 0x3c7
    2858:	206c      	movs	r0, #108	; 0x6c
    285a:	f000 ff39 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    285e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2862:	2007      	movs	r0, #7
    2864:	f7fe be0e 	b.w	1484 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2868:	20000014 	.word	0x20000014
    286c:	40008000 	.word	0x40008000
    2870:	2201      	movs	r2, #1
    2872:	0213      	lsls	r3, r2, #8
    2874:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2878:	2000      	movs	r0, #0
    287a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    287e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2882:	f3bf 8f4f 	dsb	sy
    2886:	f3bf 8f6f 	isb	sy
    288a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    288e:	490c      	ldr	r1, [pc, #48]	; (28c0 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2890:	604a      	str	r2, [r1, #4]
    2892:	1e43      	subs	r3, r0, #1
    2894:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2898:	4b0a      	ldr	r3, [pc, #40]	; (28c4 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    289a:	6018      	str	r0, [r3, #0]
    289c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    28a0:	1d1b      	adds	r3, r3, #4
    28a2:	6018      	str	r0, [r3, #0]
    28a4:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    28a8:	1d1b      	adds	r3, r3, #4
    28aa:	6018      	str	r0, [r3, #0]
    28ac:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    28b0:	1d1b      	adds	r3, r3, #4
    28b2:	6018      	str	r0, [r3, #0]
    28b4:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    28b8:	610a      	str	r2, [r1, #16]
    28ba:	4903      	ldr	r1, [pc, #12]	; (28c8 <MPSL_IRQ_TIMER0_Handler+0x150>)
    28bc:	7048      	strb	r0, [r1, #1]
    28be:	4770      	bx	lr
    28c0:	40008000 	.word	0x40008000
    28c4:	40008540 	.word	0x40008540
    28c8:	20000014 	.word	0x20000014

000028cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    28cc:	4801      	ldr	r0, [pc, #4]	; (28d4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    28ce:	6800      	ldr	r0, [r0, #0]
    28d0:	4770      	bx	lr
    28d2:	0000      	.short	0x0000
    28d4:	4000b504 	.word	0x4000b504

000028d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    28d8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    28dc:	4e41      	ldr	r6, [pc, #260]	; (29e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    28de:	4604      	mov	r4, r0
    28e0:	1ef7      	subs	r7, r6, #3
    28e2:	f896 c000 	ldrb.w	ip, [r6]
    28e6:	68f8      	ldr	r0, [r7, #12]
    28e8:	f1bc 0f01 	cmp.w	ip, #1
    28ec:	bf04      	itt	eq
    28ee:	42a0      	cmpeq	r0, r4
    28f0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    28f4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    28f8:	4a3b      	ldr	r2, [pc, #236]	; (29e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    28fa:	6011      	str	r1, [r2, #0]
    28fc:	493b      	ldr	r1, [pc, #236]	; (29ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    28fe:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2902:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2906:	4a3a      	ldr	r2, [pc, #232]	; (29f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2908:	f04f 0500 	mov.w	r5, #0
    290c:	f1bc 0f00 	cmp.w	ip, #0
    2910:	d057      	beq.n	29c2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2912:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2916:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    291a:	6015      	str	r5, [r2, #0]
    291c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2920:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2924:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2928:	f04f 0801 	mov.w	r8, #1
    292c:	2a00      	cmp	r2, #0
    292e:	bf04      	itt	eq
    2930:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2934:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    293c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2940:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2944:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2948:	4a2a      	ldr	r2, [pc, #168]	; (29f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    294a:	f8d2 a000 	ldr.w	sl, [r2]
    294e:	eba4 0a0a 	sub.w	sl, r4, sl
    2952:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2956:	f1bb 0f02 	cmp.w	fp, #2
    295a:	d33c      	bcc.n	29d6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    295c:	f04f 0a02 	mov.w	sl, #2
    2960:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2964:	d237      	bcs.n	29d6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2966:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    296a:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    296e:	f1bc 0f00 	cmp.w	ip, #0
    2972:	d005      	beq.n	2980 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2974:	6811      	ldr	r1, [r2, #0]
    2976:	1a41      	subs	r1, r0, r1
    2978:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    297c:	2902      	cmp	r1, #2
    297e:	d3f9      	bcc.n	2974 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2980:	f8c7 8008 	str.w	r8, [r7, #8]
    2984:	703d      	strb	r5, [r7, #0]
    2986:	f7ff ff73 	bl	2870 <MPSL_IRQ_TIMER0_Handler+0xf8>
    298a:	481b      	ldr	r0, [pc, #108]	; (29f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    298c:	6005      	str	r5, [r0, #0]
    298e:	1d00      	adds	r0, r0, #4
    2990:	f8c0 a000 	str.w	sl, [r0]
    2994:	4919      	ldr	r1, [pc, #100]	; (29fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2996:	2004      	movs	r0, #4
    2998:	6008      	str	r0, [r1, #0]
    299a:	4919      	ldr	r1, [pc, #100]	; (2a00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    299c:	f8c1 800c 	str.w	r8, [r1, #12]
    29a0:	68ba      	ldr	r2, [r7, #8]
    29a2:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    29a6:	0181      	lsls	r1, r0, #6
    29a8:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    29ac:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    29b0:	4a14      	ldr	r2, [pc, #80]	; (2a04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    29b2:	0741      	lsls	r1, r0, #29
    29b4:	6011      	str	r1, [r2, #0]
    29b6:	60fc      	str	r4, [r7, #12]
    29b8:	7070      	strb	r0, [r6, #1]
    29ba:	f886 8000 	strb.w	r8, [r6]
    29be:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    29c2:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    29c6:	4b10      	ldr	r3, [pc, #64]	; (2a08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    29c8:	601d      	str	r5, [r3, #0]
    29ca:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    29ce:	6015      	str	r5, [r2, #0]
    29d0:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    29d4:	e7a4      	b.n	2920 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    29d6:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    29da:	f240 11eb 	movw	r1, #491	; 0x1eb
    29de:	206c      	movs	r0, #108	; 0x6c
    29e0:	f000 fe76 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29e4:	20000017 	.word	0x20000017
    29e8:	4001f508 	.word	0x4001f508
    29ec:	4000b000 	.word	0x4000b000
    29f0:	4000b544 	.word	0x4000b544
    29f4:	4000b504 	.word	0x4000b504
    29f8:	40008504 	.word	0x40008504
    29fc:	40008510 	.word	0x40008510
    2a00:	40008000 	.word	0x40008000
    2a04:	4001f504 	.word	0x4001f504
    2a08:	4000b540 	.word	0x4000b540

00002a0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a10:	4c2b      	ldr	r4, [pc, #172]	; (2ac0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2a12:	68e1      	ldr	r1, [r4, #12]
    2a14:	4281      	cmp	r1, r0
    2a16:	bf14      	ite	ne
    2a18:	2201      	movne	r2, #1
    2a1a:	2200      	moveq	r2, #0
    2a1c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2ac4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2a20:	f89c 7000 	ldrb.w	r7, [ip]
    2a24:	2f02      	cmp	r7, #2
    2a26:	d002      	beq.n	2a2e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2a28:	2a00      	cmp	r2, #0
    2a2a:	d038      	beq.n	2a9e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2a2c:	e003      	b.n	2a36 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2a2e:	2a00      	cmp	r2, #0
    2a30:	bf08      	it	eq
    2a32:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a36:	7862      	ldrb	r2, [r4, #1]
    2a38:	b382      	cbz	r2, 2a9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2a3a:	4b23      	ldr	r3, [pc, #140]	; (2ac8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2a3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a40:	601a      	str	r2, [r3, #0]
    2a42:	4b22      	ldr	r3, [pc, #136]	; (2acc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2a44:	1395      	asrs	r5, r2, #14
    2a46:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2a4a:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2a4e:	2600      	movs	r6, #0
    2a50:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2a54:	4a1e      	ldr	r2, [pc, #120]	; (2ad0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2a56:	f8d2 8000 	ldr.w	r8, [r2]
    2a5a:	eba0 0808 	sub.w	r8, r0, r8
    2a5e:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2a62:	f1b8 0f02 	cmp.w	r8, #2
    2a66:	d324      	bcc.n	2ab2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a68:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2a6c:	d221      	bcs.n	2ab2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a6e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a72:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2a76:	b12f      	cbz	r7, 2a84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2a78:	6813      	ldr	r3, [r2, #0]
    2a7a:	1acb      	subs	r3, r1, r3
    2a7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a80:	2b02      	cmp	r3, #2
    2a82:	d3f9      	bcc.n	2a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2a84:	4b13      	ldr	r3, [pc, #76]	; (2ad4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2a86:	2102      	movs	r1, #2
    2a88:	074a      	lsls	r2, r1, #29
    2a8a:	601a      	str	r2, [r3, #0]
    2a8c:	60e0      	str	r0, [r4, #12]
    2a8e:	2004      	movs	r0, #4
    2a90:	f88c 0001 	strb.w	r0, [ip, #1]
    2a94:	f88c 1000 	strb.w	r1, [ip]
    2a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a9c:	e004      	b.n	2aa8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2a9e:	f240 11f9 	movw	r1, #505	; 0x1f9
    2aa2:	206c      	movs	r0, #108	; 0x6c
    2aa4:	f000 fe14 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aa8:	f240 11fd 	movw	r1, #509	; 0x1fd
    2aac:	206c      	movs	r0, #108	; 0x6c
    2aae:	f000 fe0f 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ab2:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2ab6:	f240 2109 	movw	r1, #521	; 0x209
    2aba:	206c      	movs	r0, #108	; 0x6c
    2abc:	f000 fe08 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ac0:	20000014 	.word	0x20000014
    2ac4:	20000017 	.word	0x20000017
    2ac8:	4001f508 	.word	0x4001f508
    2acc:	4000b000 	.word	0x4000b000
    2ad0:	4000b504 	.word	0x4000b504
    2ad4:	4001f504 	.word	0x4001f504

00002ad8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2ad8:	4801      	ldr	r0, [pc, #4]	; (2ae0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2ada:	68c0      	ldr	r0, [r0, #12]
    2adc:	4770      	bx	lr
    2ade:	0000      	.short	0x0000
    2ae0:	20000014 	.word	0x20000014

00002ae4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae8:	4833      	ldr	r0, [pc, #204]	; (2bb8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2aea:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2aee:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2af2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2bbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2af6:	4a32      	ldr	r2, [pc, #200]	; (2bc0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2af8:	2100      	movs	r1, #0
    2afa:	f89c 3000 	ldrb.w	r3, [ip]
    2afe:	b163      	cbz	r3, 2b1a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2b00:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2b04:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2b08:	6011      	str	r1, [r2, #0]
    2b0a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2b0e:	bf00      	nop
    2b10:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2b14:	2201      	movs	r2, #1
    2b16:	b980      	cbnz	r0, 2b3a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2b18:	e009      	b.n	2b2e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2b1a:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2b1e:	4c29      	ldr	r4, [pc, #164]	; (2bc4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2b20:	6021      	str	r1, [r4, #0]
    2b22:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2b26:	6011      	str	r1, [r2, #0]
    2b28:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2b2c:	e7f0      	b.n	2b10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2b2e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2b32:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2b36:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2b3a:	2b02      	cmp	r3, #2
    2b3c:	d004      	beq.n	2b48 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2b3e:	f240 2115 	movw	r1, #533	; 0x215
    2b42:	206c      	movs	r0, #108	; 0x6c
    2b44:	f000 fdc4 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b48:	4e1f      	ldr	r6, [pc, #124]	; (2bc8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2b4a:	6830      	ldr	r0, [r6, #0]
    2b4c:	4c1f      	ldr	r4, [pc, #124]	; (2bcc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2b4e:	1cc0      	adds	r0, r0, #3
    2b50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b54:	68e3      	ldr	r3, [r4, #12]
    2b56:	4d1e      	ldr	r5, [pc, #120]	; (2bd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2b58:	4298      	cmp	r0, r3
    2b5a:	d00b      	beq.n	2b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b5c:	6837      	ldr	r7, [r6, #0]
    2b5e:	1bdf      	subs	r7, r3, r7
    2b60:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2b64:	2f04      	cmp	r7, #4
    2b66:	d305      	bcc.n	2b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b68:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2b6c:	d202      	bcs.n	2b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b6e:	f7ff feb3 	bl	28d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b72:	e01b      	b.n	2bac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b74:	6830      	ldr	r0, [r6, #0]
    2b76:	1a18      	subs	r0, r3, r0
    2b78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b7c:	2802      	cmp	r0, #2
    2b7e:	d313      	bcc.n	2ba8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b80:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2b84:	d210      	bcs.n	2ba8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b86:	4b13      	ldr	r3, [pc, #76]	; (2bd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2b88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b8c:	6018      	str	r0, [r3, #0]
    2b8e:	60a2      	str	r2, [r4, #8]
    2b90:	7021      	strb	r1, [r4, #0]
    2b92:	606a      	str	r2, [r5, #4]
    2b94:	60ea      	str	r2, [r5, #12]
    2b96:	0040      	lsls	r0, r0, #1
    2b98:	1f19      	subs	r1, r3, #4
    2b9a:	6008      	str	r0, [r1, #0]
    2b9c:	2004      	movs	r0, #4
    2b9e:	f88c 0001 	strb.w	r0, [ip, #1]
    2ba2:	f88c 2000 	strb.w	r2, [ip]
    2ba6:	e001      	b.n	2bac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2ba8:	60a2      	str	r2, [r4, #8]
    2baa:	7021      	strb	r1, [r4, #0]
    2bac:	68a0      	ldr	r0, [r4, #8]
    2bae:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bb6:	0000      	.short	0x0000
    2bb8:	4000b000 	.word	0x4000b000
    2bbc:	20000017 	.word	0x20000017
    2bc0:	4000b544 	.word	0x4000b544
    2bc4:	4000b540 	.word	0x4000b540
    2bc8:	4000b504 	.word	0x4000b504
    2bcc:	20000014 	.word	0x20000014
    2bd0:	40008000 	.word	0x40008000
    2bd4:	4001f508 	.word	0x4001f508

00002bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2bdc:	f8df c174 	ldr.w	ip, [pc, #372]	; 2d54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2be0:	2701      	movs	r7, #1
    2be2:	f04f 0800 	mov.w	r8, #0
    2be6:	f89c 5000 	ldrb.w	r5, [ip]
    2bea:	f89c c001 	ldrb.w	ip, [ip, #1]
    2bee:	2807      	cmp	r0, #7
    2bf0:	d27e      	bcs.n	2cf0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2bf2:	e8df f000 	tbb	[pc, r0]
    2bf6:	0404      	.short	0x0404
    2bf8:	6a6a0404 	.word	0x6a6a0404
    2bfc:	006a      	.short	0x006a
    2bfe:	4c56      	ldr	r4, [pc, #344]	; (2d58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2c00:	68e6      	ldr	r6, [r4, #12]
    2c02:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2c06:	bf04      	itt	eq
    2c08:	7864      	ldrbeq	r4, [r4, #1]
    2c0a:	2c00      	cmpeq	r4, #0
    2c0c:	d002      	beq.n	2c14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2c0e:	2d02      	cmp	r5, #2
    2c10:	d005      	beq.n	2c1e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2c12:	e03c      	b.n	2c8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2c14:	f44f 7112 	mov.w	r1, #584	; 0x248
    2c18:	206c      	movs	r0, #108	; 0x6c
    2c1a:	f000 fd59 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c1e:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2c22:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2c26:	f1ac 0404 	sub.w	r4, ip, #4
    2c2a:	0624      	lsls	r4, r4, #24
    2c2c:	0da4      	lsrs	r4, r4, #22
    2c2e:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2c32:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2c36:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2c3a:	2400      	movs	r4, #0
    2c3c:	2d01      	cmp	r5, #1
    2c3e:	d002      	beq.n	2c46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2c40:	2d02      	cmp	r5, #2
    2c42:	d011      	beq.n	2c68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2c44:	e020      	b.n	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c46:	f1bc 0f04 	cmp.w	ip, #4
    2c4a:	d205      	bcs.n	2c58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2c4c:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c50:	f1ba 0f00 	cmp.w	sl, #0
    2c54:	d118      	bne.n	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c56:	e004      	b.n	2c62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2c58:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c5c:	f1ba 0f00 	cmp.w	sl, #0
    2c60:	d112      	bne.n	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c62:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2c66:	e00f      	b.n	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c68:	f1bc 0f04 	cmp.w	ip, #4
    2c6c:	d205      	bcs.n	2c7a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2c6e:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c72:	f1ba 0f00 	cmp.w	sl, #0
    2c76:	d107      	bne.n	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c78:	e004      	b.n	2c84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2c7a:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c7e:	f1ba 0f00 	cmp.w	sl, #0
    2c82:	d101      	bne.n	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c84:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2c88:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2c8c:	d1d5      	bne.n	2c3a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2c8e:	4c33      	ldr	r4, [pc, #204]	; (2d5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2c90:	f100 0c10 	add.w	ip, r0, #16
    2c94:	fa07 fc0c 	lsl.w	ip, r7, ip
    2c98:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2c9c:	0080      	lsls	r0, r0, #2
    2c9e:	4420      	add	r0, r4
    2ca0:	b152      	cbz	r2, 2cb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2ca2:	6407      	str	r7, [r0, #64]	; 0x40
    2ca4:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2ca8:	1b8d      	subs	r5, r1, r6
    2caa:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2cae:	42aa      	cmp	r2, r5
    2cb0:	bf98      	it	ls
    2cb2:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2cb6:	d243      	bcs.n	2d40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2cb8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2cbc:	2b01      	cmp	r3, #1
    2cbe:	bf08      	it	eq
    2cc0:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2cc4:	2001      	movs	r0, #1
    2cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cca:	b135      	cbz	r5, 2cda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2ccc:	4584      	cmp	ip, r0
    2cce:	d104      	bne.n	2cda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2cd0:	f240 216b 	movw	r1, #619	; 0x26b
    2cd4:	206c      	movs	r0, #108	; 0x6c
    2cd6:	f000 fcfb 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cda:	1f00      	subs	r0, r0, #4
    2cdc:	b2c0      	uxtb	r0, r0
    2cde:	2b01      	cmp	r3, #1
    2ce0:	bf0c      	ite	eq
    2ce2:	2401      	moveq	r4, #1
    2ce4:	2400      	movne	r4, #0
    2ce6:	2803      	cmp	r0, #3
    2ce8:	d306      	bcc.n	2cf8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2cea:	f240 1145 	movw	r1, #325	; 0x145
    2cee:	e000      	b.n	2cf2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2cf0:	e02b      	b.n	2d4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2cf2:	206c      	movs	r0, #108	; 0x6c
    2cf4:	f000 fcec 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cf8:	f8df c064 	ldr.w	ip, [pc, #100]	; 2d60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2cfc:	f100 0310 	add.w	r3, r0, #16
    2d00:	fa07 f303 	lsl.w	r3, r7, r3
    2d04:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2d08:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2d0c:	0080      	lsls	r0, r0, #2
    2d0e:	4460      	add	r0, ip
    2d10:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2d14:	b14a      	cbz	r2, 2d2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2d16:	4d13      	ldr	r5, [pc, #76]	; (2d64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2d18:	682e      	ldr	r6, [r5, #0]
    2d1a:	1b8d      	subs	r5, r1, r6
    2d1c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2d20:	42aa      	cmp	r2, r5
    2d22:	bf98      	it	ls
    2d24:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2d28:	d20a      	bcs.n	2d40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2d2a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2d2e:	2c00      	cmp	r4, #0
    2d30:	bf18      	it	ne
    2d32:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2d36:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2d3a:	2001      	movs	r0, #1
    2d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d40:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2d44:	2000      	movs	r0, #0
    2d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d4a:	f44f 711c 	mov.w	r1, #624	; 0x270
    2d4e:	206c      	movs	r0, #108	; 0x6c
    2d50:	f000 fcbe 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d54:	20000017 	.word	0x20000017
    2d58:	20000014 	.word	0x20000014
    2d5c:	40008000 	.word	0x40008000
    2d60:	4000b000 	.word	0x4000b000
    2d64:	4000b504 	.word	0x4000b504

00002d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d6a:	2701      	movs	r7, #1
    2d6c:	2400      	movs	r4, #0
    2d6e:	2807      	cmp	r0, #7
    2d70:	d24c      	bcs.n	2e0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2d72:	e8df f000 	tbb	[pc, r0]
    2d76:	0404      	.short	0x0404
    2d78:	16160404 	.word	0x16160404
    2d7c:	0016      	.short	0x0016
    2d7e:	4a26      	ldr	r2, [pc, #152]	; (2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2d80:	f100 0110 	add.w	r1, r0, #16
    2d84:	fa07 f101 	lsl.w	r1, r7, r1
    2d88:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2d8c:	0081      	lsls	r1, r0, #2
    2d8e:	4411      	add	r1, r2
    2d90:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2d94:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2d98:	4920      	ldr	r1, [pc, #128]	; (2e1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2d9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2d9e:	9000      	str	r0, [sp, #0]
    2da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2da2:	4d1f      	ldr	r5, [pc, #124]	; (2e20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2da4:	1f01      	subs	r1, r0, #4
    2da6:	b2ce      	uxtb	r6, r1
    2da8:	7829      	ldrb	r1, [r5, #0]
    2daa:	b179      	cbz	r1, 2dcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2dac:	786a      	ldrb	r2, [r5, #1]
    2dae:	4282      	cmp	r2, r0
    2db0:	d10c      	bne.n	2dcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2db2:	4a1c      	ldr	r2, [pc, #112]	; (2e24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2db4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2db8:	6010      	str	r0, [r2, #0]
    2dba:	2901      	cmp	r1, #1
    2dbc:	bf08      	it	eq
    2dbe:	f7ff fd57 	bleq	2870 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2dc2:	702c      	strb	r4, [r5, #0]
    2dc4:	4918      	ldr	r1, [pc, #96]	; (2e28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2dc6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2dca:	60c8      	str	r0, [r1, #12]
    2dcc:	f106 0010 	add.w	r0, r6, #16
    2dd0:	fa07 f100 	lsl.w	r1, r7, r0
    2dd4:	4815      	ldr	r0, [pc, #84]	; (2e2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2dd6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2dda:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2dde:	00b0      	lsls	r0, r6, #2
    2de0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2de4:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2de8:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2dec:	4a10      	ldr	r2, [pc, #64]	; (2e30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2dee:	6812      	ldr	r2, [r2, #0]
    2df0:	1a89      	subs	r1, r1, r2
    2df2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2df6:	2902      	cmp	r1, #2
    2df8:	bf24      	itt	cs
    2dfa:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2dfe:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2e02:	480c      	ldr	r0, [pc, #48]	; (2e34 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2e04:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2e08:	9000      	str	r0, [sp, #0]
    2e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e0c:	f240 21e9 	movw	r1, #745	; 0x2e9
    2e10:	206c      	movs	r0, #108	; 0x6c
    2e12:	f000 fc5d 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e16:	0000      	.short	0x0000
    2e18:	40008000 	.word	0x40008000
    2e1c:	40008140 	.word	0x40008140
    2e20:	20000017 	.word	0x20000017
    2e24:	4001f508 	.word	0x4001f508
    2e28:	20000014 	.word	0x20000014
    2e2c:	4000b000 	.word	0x4000b000
    2e30:	4000b504 	.word	0x4000b504
    2e34:	4000b140 	.word	0x4000b140

00002e38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2e38:	491e      	ldr	r1, [pc, #120]	; (2eb4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2e3a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2e3e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2e42:	481d      	ldr	r0, [pc, #116]	; (2eb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2e44:	4a1d      	ldr	r2, [pc, #116]	; (2ebc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2e46:	f890 c000 	ldrb.w	ip, [r0]
    2e4a:	2000      	movs	r0, #0
    2e4c:	f1bc 0f00 	cmp.w	ip, #0
    2e50:	d00a      	beq.n	2e68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2e52:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2e56:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e5a:	6010      	str	r0, [r2, #0]
    2e5c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e60:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2e64:	b981      	cbnz	r1, 2e88 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2e66:	e009      	b.n	2e7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2e68:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e6c:	4b14      	ldr	r3, [pc, #80]	; (2ec0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2e6e:	6018      	str	r0, [r3, #0]
    2e70:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e74:	6010      	str	r0, [r2, #0]
    2e76:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e7a:	e7f1      	b.n	2e60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2e7c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2e84:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2e88:	490e      	ldr	r1, [pc, #56]	; (2ec4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2e8a:	f04f 32ff 	mov.w	r2, #4294967295
    2e8e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e92:	4a0d      	ldr	r2, [pc, #52]	; (2ec8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2e94:	6010      	str	r0, [r2, #0]
    2e96:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e9a:	1d12      	adds	r2, r2, #4
    2e9c:	6010      	str	r0, [r2, #0]
    2e9e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2ea2:	1d12      	adds	r2, r2, #4
    2ea4:	6010      	str	r0, [r2, #0]
    2ea6:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2eaa:	1d12      	adds	r2, r2, #4
    2eac:	6010      	str	r0, [r2, #0]
    2eae:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2eb2:	4770      	bx	lr
    2eb4:	4000b000 	.word	0x4000b000
    2eb8:	20000017 	.word	0x20000017
    2ebc:	4000b544 	.word	0x4000b544
    2ec0:	4000b540 	.word	0x4000b540
    2ec4:	40008000 	.word	0x40008000
    2ec8:	40008540 	.word	0x40008540

00002ecc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2ecc:	4808      	ldr	r0, [pc, #32]	; (2ef0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2ece:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2ed2:	2800      	cmp	r0, #0
    2ed4:	bfb8      	it	lt
    2ed6:	4770      	bxlt	lr
    2ed8:	f000 011f 	and.w	r1, r0, #31
    2edc:	2201      	movs	r2, #1
    2ede:	fa02 f101 	lsl.w	r1, r2, r1
    2ee2:	0940      	lsrs	r0, r0, #5
    2ee4:	0080      	lsls	r0, r0, #2
    2ee6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2eea:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2eee:	4770      	bx	lr
    2ef0:	20000014 	.word	0x20000014

00002ef4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2ef4:	b510      	push	{r4, lr}
    2ef6:	2807      	cmp	r0, #7
    2ef8:	d20d      	bcs.n	2f16 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2efa:	e8df f000 	tbb	[pc, r0]
    2efe:	0404      	.short	0x0404
    2f00:	06060404 	.word	0x06060404
    2f04:	0006      	.short	0x0006
    2f06:	4906      	ldr	r1, [pc, #24]	; (2f20 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2f08:	e002      	b.n	2f10 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2f0a:	1f00      	subs	r0, r0, #4
    2f0c:	4905      	ldr	r1, [pc, #20]	; (2f24 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2f0e:	b2c0      	uxtb	r0, r0
    2f10:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2f14:	bd10      	pop	{r4, pc}
    2f16:	f44f 7125 	mov.w	r1, #660	; 0x294
    2f1a:	206c      	movs	r0, #108	; 0x6c
    2f1c:	f000 fbd8 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f20:	40008140 	.word	0x40008140
    2f24:	4000b140 	.word	0x4000b140

00002f28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2f28:	b570      	push	{r4, r5, r6, lr}
    2f2a:	4819      	ldr	r0, [pc, #100]	; (2f90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2f2c:	2400      	movs	r4, #0
    2f2e:	2104      	movs	r1, #4
    2f30:	7004      	strb	r4, [r0, #0]
    2f32:	1ec0      	subs	r0, r0, #3
    2f34:	7001      	strb	r1, [r0, #0]
    2f36:	0589      	lsls	r1, r1, #22
    2f38:	60c1      	str	r1, [r0, #12]
    2f3a:	f7ff fc99 	bl	2870 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2f3e:	2501      	movs	r5, #1
    2f40:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2f44:	02eb      	lsls	r3, r5, #11
    2f46:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2f4a:	f3bf 8f4f 	dsb	sy
    2f4e:	f3bf 8f6f 	isb	sy
    2f52:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2f56:	4a0f      	ldr	r2, [pc, #60]	; (2f94 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    2f58:	6055      	str	r5, [r2, #4]
    2f5a:	6095      	str	r5, [r2, #8]
    2f5c:	480e      	ldr	r0, [pc, #56]	; (2f98 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    2f5e:	6801      	ldr	r1, [r0, #0]
    2f60:	2900      	cmp	r1, #0
    2f62:	d1fc      	bne.n	2f5e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    2f64:	1e48      	subs	r0, r1, #1
    2f66:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2f6a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2f6e:	480b      	ldr	r0, [pc, #44]	; (2f9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    2f70:	6004      	str	r4, [r0, #0]
    2f72:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2f76:	1d00      	adds	r0, r0, #4
    2f78:	6004      	str	r4, [r0, #0]
    2f7a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2f7e:	1d00      	adds	r0, r0, #4
    2f80:	6004      	str	r4, [r0, #0]
    2f82:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    2f86:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2f8a:	6015      	str	r5, [r2, #0]
    2f8c:	bd70      	pop	{r4, r5, r6, pc}
    2f8e:	0000      	.short	0x0000
    2f90:	20000017 	.word	0x20000017
    2f94:	4000b000 	.word	0x4000b000
    2f98:	4000b504 	.word	0x4000b504
    2f9c:	4000b540 	.word	0x4000b540

00002fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    2fa0:	0b43      	lsrs	r3, r0, #13
    2fa2:	f248 6c37 	movw	ip, #34359	; 0x8637
    2fa6:	fb03 f30c 	mul.w	r3, r3, ip
    2faa:	0c1b      	lsrs	r3, r3, #16
    2fac:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    2fb0:	f8c1 c000 	str.w	ip, [r1]
    2fb4:	f8df c038 	ldr.w	ip, [pc, #56]	; 2ff0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    2fb8:	fb03 030c 	mla	r3, r3, ip, r0
    2fbc:	480d      	ldr	r0, [pc, #52]	; (2ff4 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    2fbe:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    2fc2:	4358      	muls	r0, r3
    2fc4:	0d40      	lsrs	r0, r0, #21
    2fc6:	fb10 fc0c 	smulbb	ip, r0, ip
    2fca:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    2fce:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2fd2:	125b      	asrs	r3, r3, #9
    2fd4:	7013      	strb	r3, [r2, #0]
    2fd6:	680b      	ldr	r3, [r1, #0]
    2fd8:	4418      	add	r0, r3
    2fda:	6008      	str	r0, [r1, #0]
    2fdc:	7810      	ldrb	r0, [r2, #0]
    2fde:	281f      	cmp	r0, #31
    2fe0:	bf18      	it	ne
    2fe2:	4770      	bxne	lr
    2fe4:	2000      	movs	r0, #0
    2fe6:	7010      	strb	r0, [r2, #0]
    2fe8:	6808      	ldr	r0, [r1, #0]
    2fea:	1c40      	adds	r0, r0, #1
    2fec:	6008      	str	r0, [r1, #0]
    2fee:	4770      	bx	lr
    2ff0:	ffffc2f7 	.word	0xffffc2f7
    2ff4:	00010c6f 	.word	0x00010c6f

00002ff8 <MPSL_IRQ_CLOCK_Handler>:
    2ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ffc:	4c16      	ldr	r4, [pc, #88]	; (3058 <MPSL_IRQ_CLOCK_Handler+0x60>)
    2ffe:	7a60      	ldrb	r0, [r4, #9]
    3000:	2800      	cmp	r0, #0
    3002:	d027      	beq.n	3054 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3004:	f44f 7180 	mov.w	r1, #256	; 0x100
    3008:	058d      	lsls	r5, r1, #22
    300a:	4628      	mov	r0, r5
    300c:	f008 fc9a 	bl	b944 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3010:	4680      	mov	r8, r0
    3012:	f44f 7182 	mov.w	r1, #260	; 0x104
    3016:	4628      	mov	r0, r5
    3018:	f008 fc94 	bl	b944 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    301c:	2600      	movs	r6, #0
    301e:	4607      	mov	r7, r0
    3020:	f1b8 0f00 	cmp.w	r8, #0
    3024:	d009      	beq.n	303a <MPSL_IRQ_CLOCK_Handler+0x42>
    3026:	2001      	movs	r0, #1
    3028:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    302c:	7920      	ldrb	r0, [r4, #4]
    302e:	b120      	cbz	r0, 303a <MPSL_IRQ_CLOCK_Handler+0x42>
    3030:	7126      	strb	r6, [r4, #4]
    3032:	69e0      	ldr	r0, [r4, #28]
    3034:	b108      	cbz	r0, 303a <MPSL_IRQ_CLOCK_Handler+0x42>
    3036:	4780      	blx	r0
    3038:	61e6      	str	r6, [r4, #28]
    303a:	b137      	cbz	r7, 304a <MPSL_IRQ_CLOCK_Handler+0x52>
    303c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3040:	2002      	movs	r0, #2
    3042:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3046:	f000 fa8b 	bl	3560 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    304a:	4640      	mov	r0, r8
    304c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3050:	f000 b85a 	b.w	3108 <MPSL_IRQ_CLOCK_Handler+0x110>
    3054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3058:	20000024 	.word	0x20000024
    305c:	b510      	push	{r4, lr}
    305e:	f008 fd1b 	bl	ba98 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3062:	b930      	cbnz	r0, 3072 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3064:	f008 fd39 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3068:	b918      	cbnz	r0, 3072 <MPSL_IRQ_CLOCK_Handler+0x7a>
    306a:	f008 fd6c 	bl	bb46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    306e:	2800      	cmp	r0, #0
    3070:	d002      	beq.n	3078 <MPSL_IRQ_CLOCK_Handler+0x80>
    3072:	4902      	ldr	r1, [pc, #8]	; (307c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3074:	2002      	movs	r0, #2
    3076:	6008      	str	r0, [r1, #0]
    3078:	bd10      	pop	{r4, pc}
    307a:	0000      	.short	0x0000
    307c:	40000c34 	.word	0x40000c34
    3080:	b570      	push	{r4, r5, r6, lr}
    3082:	f000 f987 	bl	3394 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3086:	f000 fabf 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    308a:	4c09      	ldr	r4, [pc, #36]	; (30b0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    308c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3090:	b130      	cbz	r0, 30a0 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3092:	f7ff ffe3 	bl	305c <MPSL_IRQ_CLOCK_Handler+0x64>
    3096:	2001      	movs	r0, #1
    3098:	6128      	str	r0, [r5, #16]
    309a:	2004      	movs	r0, #4
    309c:	72a0      	strb	r0, [r4, #10]
    309e:	e004      	b.n	30aa <MPSL_IRQ_CLOCK_Handler+0xb2>
    30a0:	2003      	movs	r0, #3
    30a2:	72a0      	strb	r0, [r4, #10]
    30a4:	2001      	movs	r0, #1
    30a6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    30aa:	2000      	movs	r0, #0
    30ac:	71e0      	strb	r0, [r4, #7]
    30ae:	bd70      	pop	{r4, r5, r6, pc}
    30b0:	20000024 	.word	0x20000024
    30b4:	b570      	push	{r4, r5, r6, lr}
    30b6:	4c13      	ldr	r4, [pc, #76]	; (3104 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    30b8:	79a0      	ldrb	r0, [r4, #6]
    30ba:	b1f0      	cbz	r0, 30fa <MPSL_IRQ_CLOCK_Handler+0x102>
    30bc:	2801      	cmp	r0, #1
    30be:	d003      	beq.n	30c8 <MPSL_IRQ_CLOCK_Handler+0xd0>
    30c0:	79e1      	ldrb	r1, [r4, #7]
    30c2:	1e40      	subs	r0, r0, #1
    30c4:	4281      	cmp	r1, r0
    30c6:	da18      	bge.n	30fa <MPSL_IRQ_CLOCK_Handler+0x102>
    30c8:	f000 fa9e 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    30cc:	4605      	mov	r5, r0
    30ce:	f000 fb6f 	bl	37b0 <mpsl_temperature_get>
    30d2:	79a1      	ldrb	r1, [r4, #6]
    30d4:	2901      	cmp	r1, #1
    30d6:	d902      	bls.n	30de <MPSL_IRQ_CLOCK_Handler+0xe6>
    30d8:	79e1      	ldrb	r1, [r4, #7]
    30da:	1c49      	adds	r1, r1, #1
    30dc:	71e1      	strb	r1, [r4, #7]
    30de:	b10d      	cbz	r5, 30e4 <MPSL_IRQ_CLOCK_Handler+0xec>
    30e0:	6961      	ldr	r1, [r4, #20]
    30e2:	e000      	b.n	30e6 <MPSL_IRQ_CLOCK_Handler+0xee>
    30e4:	6921      	ldr	r1, [r4, #16]
    30e6:	1a41      	subs	r1, r0, r1
    30e8:	2902      	cmp	r1, #2
    30ea:	da02      	bge.n	30f2 <MPSL_IRQ_CLOCK_Handler+0xfa>
    30ec:	f111 0f02 	cmn.w	r1, #2
    30f0:	dc07      	bgt.n	3102 <MPSL_IRQ_CLOCK_Handler+0x10a>
    30f2:	b10d      	cbz	r5, 30f8 <MPSL_IRQ_CLOCK_Handler+0x100>
    30f4:	6160      	str	r0, [r4, #20]
    30f6:	e000      	b.n	30fa <MPSL_IRQ_CLOCK_Handler+0x102>
    30f8:	6120      	str	r0, [r4, #16]
    30fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    30fe:	f7ff bfbf 	b.w	3080 <MPSL_IRQ_CLOCK_Handler+0x88>
    3102:	bd70      	pop	{r4, r5, r6, pc}
    3104:	20000024 	.word	0x20000024
    3108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    310c:	4606      	mov	r6, r0
    310e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3112:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3116:	4628      	mov	r0, r5
    3118:	f008 fc14 	bl	b944 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    311c:	4680      	mov	r8, r0
    311e:	f44f 7188 	mov.w	r1, #272	; 0x110
    3122:	4628      	mov	r0, r5
    3124:	f008 fc0e 	bl	b944 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3128:	4c27      	ldr	r4, [pc, #156]	; (31c8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    312a:	4682      	mov	sl, r0
    312c:	7827      	ldrb	r7, [r4, #0]
    312e:	f104 0008 	add.w	r0, r4, #8
    3132:	f008 fc7b 	bl	ba2c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3136:	b110      	cbz	r0, 313e <MPSL_IRQ_CLOCK_Handler+0x146>
    3138:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    313c:	e016      	b.n	316c <MPSL_IRQ_CLOCK_Handler+0x174>
    313e:	f04f 0901 	mov.w	r9, #1
    3142:	b146      	cbz	r6, 3156 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3144:	7aa0      	ldrb	r0, [r4, #10]
    3146:	2803      	cmp	r0, #3
    3148:	d105      	bne.n	3156 <MPSL_IRQ_CLOCK_Handler+0x15e>
    314a:	2004      	movs	r0, #4
    314c:	72a0      	strb	r0, [r4, #10]
    314e:	f7ff ff85 	bl	305c <MPSL_IRQ_CLOCK_Handler+0x64>
    3152:	f8c5 9010 	str.w	r9, [r5, #16]
    3156:	2600      	movs	r6, #0
    3158:	f1b8 0f00 	cmp.w	r8, #0
    315c:	d018      	beq.n	3190 <MPSL_IRQ_CLOCK_Handler+0x198>
    315e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3162:	7aa0      	ldrb	r0, [r4, #10]
    3164:	2804      	cmp	r0, #4
    3166:	d004      	beq.n	3172 <MPSL_IRQ_CLOCK_Handler+0x17a>
    3168:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    316c:	206d      	movs	r0, #109	; 0x6d
    316e:	f000 faaf 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3172:	f008 fc91 	bl	ba98 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3176:	b928      	cbnz	r0, 3184 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3178:	f008 fcaf 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    317c:	b910      	cbnz	r0, 3184 <MPSL_IRQ_CLOCK_Handler+0x18c>
    317e:	f008 fce2 	bl	bb46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3182:	b108      	cbz	r0, 3188 <MPSL_IRQ_CLOCK_Handler+0x190>
    3184:	4811      	ldr	r0, [pc, #68]	; (31cc <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3186:	6006      	str	r6, [r0, #0]
    3188:	2002      	movs	r0, #2
    318a:	72a0      	strb	r0, [r4, #10]
    318c:	f000 f8e6 	bl	335c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3190:	f1ba 0f00 	cmp.w	sl, #0
    3194:	d008      	beq.n	31a8 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3196:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    319a:	7aa0      	ldrb	r0, [r4, #10]
    319c:	2802      	cmp	r0, #2
    319e:	d101      	bne.n	31a4 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    31a0:	f7ff ff88 	bl	30b4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    31a4:	f8c5 9014 	str.w	r9, [r5, #20]
    31a8:	b13f      	cbz	r7, 31ba <MPSL_IRQ_CLOCK_Handler+0x1c2>
    31aa:	7026      	strb	r6, [r4, #0]
    31ac:	7aa0      	ldrb	r0, [r4, #10]
    31ae:	2802      	cmp	r0, #2
    31b0:	d101      	bne.n	31b6 <MPSL_IRQ_CLOCK_Handler+0x1be>
    31b2:	f7ff ff65 	bl	3080 <MPSL_IRQ_CLOCK_Handler+0x88>
    31b6:	f000 f8d1 	bl	335c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    31ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31be:	4802      	ldr	r0, [pc, #8]	; (31c8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    31c0:	3008      	adds	r0, #8
    31c2:	f008 bc4a 	b.w	ba5a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    31c6:	0000      	.short	0x0000
    31c8:	20000024 	.word	0x20000024
    31cc:	40000c34 	.word	0x40000c34
    31d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31d4:	4c5c      	ldr	r4, [pc, #368]	; (3348 <MPSL_IRQ_CLOCK_Handler+0x350>)
    31d6:	f04f 0800 	mov.w	r8, #0
    31da:	4606      	mov	r6, r0
    31dc:	f8c4 8018 	str.w	r8, [r4, #24]
    31e0:	7843      	ldrb	r3, [r0, #1]
    31e2:	7882      	ldrb	r2, [r0, #2]
    31e4:	7800      	ldrb	r0, [r0, #0]
    31e6:	72e0      	strb	r0, [r4, #11]
    31e8:	7163      	strb	r3, [r4, #5]
    31ea:	2701      	movs	r7, #1
    31ec:	71a2      	strb	r2, [r4, #6]
    31ee:	07bd      	lsls	r5, r7, #30
    31f0:	f884 8007 	strb.w	r8, [r4, #7]
    31f4:	2805      	cmp	r0, #5
    31f6:	d224      	bcs.n	3242 <MPSL_IRQ_CLOCK_Handler+0x24a>
    31f8:	e8df f000 	tbb	[pc, r0]
    31fc:	1f05030f 	.word	0x1f05030f
    3200:	0021      	.short	0x0021
    3202:	61a7      	str	r7, [r4, #24]
    3204:	e009      	b.n	321a <MPSL_IRQ_CLOCK_Handler+0x222>
    3206:	f000 f8c5 	bl	3394 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    320a:	2101      	movs	r1, #1
    320c:	4628      	mov	r0, r5
    320e:	f008 fb9e 	bl	b94e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3212:	2800      	cmp	r0, #0
    3214:	d0f9      	beq.n	320a <MPSL_IRQ_CLOCK_Handler+0x212>
    3216:	2002      	movs	r0, #2
    3218:	61a0      	str	r0, [r4, #24]
    321a:	f008 fbc4 	bl	b9a6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    321e:	b1b0      	cbz	r0, 324e <MPSL_IRQ_CLOCK_Handler+0x256>
    3220:	f000 fa0c 	bl	363c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3224:	7e21      	ldrb	r1, [r4, #24]
    3226:	f001 0103 	and.w	r1, r1, #3
    322a:	4288      	cmp	r0, r1
    322c:	d10f      	bne.n	324e <MPSL_IRQ_CLOCK_Handler+0x256>
    322e:	79b0      	ldrb	r0, [r6, #6]
    3230:	b150      	cbz	r0, 3248 <MPSL_IRQ_CLOCK_Handler+0x250>
    3232:	2002      	movs	r0, #2
    3234:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3238:	e06a      	b.n	3310 <MPSL_IRQ_CLOCK_Handler+0x318>
    323a:	4844      	ldr	r0, [pc, #272]	; (334c <MPSL_IRQ_CLOCK_Handler+0x354>)
    323c:	e7ec      	b.n	3218 <MPSL_IRQ_CLOCK_Handler+0x220>
    323e:	4844      	ldr	r0, [pc, #272]	; (3350 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3240:	e7ea      	b.n	3218 <MPSL_IRQ_CLOCK_Handler+0x220>
    3242:	f44f 714c 	mov.w	r1, #816	; 0x330
    3246:	e049      	b.n	32dc <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3248:	f000 f9cc 	bl	35e4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    324c:	e060      	b.n	3310 <MPSL_IRQ_CLOCK_Handler+0x318>
    324e:	60ef      	str	r7, [r5, #12]
    3250:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3254:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3258:	69a0      	ldr	r0, [r4, #24]
    325a:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    325e:	f008 fc07 	bl	ba70 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3262:	b940      	cbnz	r0, 3276 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3264:	f008 fc0e 	bl	ba84 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3268:	b928      	cbnz	r0, 3276 <MPSL_IRQ_CLOCK_Handler+0x27e>
    326a:	f008 fc22 	bl	bab2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    326e:	b910      	cbnz	r0, 3276 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3270:	f008 fc33 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3274:	b138      	cbz	r0, 3286 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3276:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    327a:	4836      	ldr	r0, [pc, #216]	; (3354 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    327c:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3280:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3284:	6001      	str	r1, [r0, #0]
    3286:	f008 fbf3 	bl	ba70 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    328a:	b940      	cbnz	r0, 329e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    328c:	f008 fbfa 	bl	ba84 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3290:	b928      	cbnz	r0, 329e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3292:	f008 fc0e 	bl	bab2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3296:	b910      	cbnz	r0, 329e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3298:	f008 fc1f 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    329c:	b110      	cbz	r0, 32a4 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    329e:	482d      	ldr	r0, [pc, #180]	; (3354 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    32a0:	3010      	adds	r0, #16
    32a2:	6007      	str	r7, [r0, #0]
    32a4:	60af      	str	r7, [r5, #8]
    32a6:	2002      	movs	r0, #2
    32a8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    32ac:	79b0      	ldrb	r0, [r6, #6]
    32ae:	bb78      	cbnz	r0, 3310 <MPSL_IRQ_CLOCK_Handler+0x318>
    32b0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    32b4:	f010 0f02 	tst.w	r0, #2
    32b8:	d00e      	beq.n	32d8 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    32ba:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3358 <MPSL_IRQ_CLOCK_Handler+0x360>
    32be:	f8d9 1000 	ldr.w	r1, [r9]
    32c2:	43c9      	mvns	r1, r1
    32c4:	f341 1700 	sbfx	r7, r1, #4, #1
    32c8:	f8d9 1000 	ldr.w	r1, [r9]
    32cc:	f041 0110 	orr.w	r1, r1, #16
    32d0:	f8c9 1000 	str.w	r1, [r9]
    32d4:	1c7f      	adds	r7, r7, #1
    32d6:	e007      	b.n	32e8 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    32d8:	f240 21f1 	movw	r1, #753	; 0x2f1
    32dc:	206d      	movs	r0, #109	; 0x6d
    32de:	f000 f9f7 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32e2:	bf00      	nop
    32e4:	f000 fb1a 	bl	391c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    32e8:	4651      	mov	r1, sl
    32ea:	4628      	mov	r0, r5
    32ec:	f008 fb2a 	bl	b944 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32f0:	2800      	cmp	r0, #0
    32f2:	d0f7      	beq.n	32e4 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    32f4:	f000 f976 	bl	35e4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    32f8:	b92f      	cbnz	r7, 3306 <MPSL_IRQ_CLOCK_Handler+0x30e>
    32fa:	f8d9 1000 	ldr.w	r1, [r9]
    32fe:	f021 0110 	bic.w	r1, r1, #16
    3302:	f8c9 1000 	str.w	r1, [r9]
    3306:	2002      	movs	r0, #2
    3308:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    330c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3310:	79a0      	ldrb	r0, [r4, #6]
    3312:	b170      	cbz	r0, 3332 <MPSL_IRQ_CLOCK_Handler+0x33a>
    3314:	7830      	ldrb	r0, [r6, #0]
    3316:	b960      	cbnz	r0, 3332 <MPSL_IRQ_CLOCK_Handler+0x33a>
    3318:	f000 f976 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    331c:	4606      	mov	r6, r0
    331e:	f000 fa47 	bl	37b0 <mpsl_temperature_get>
    3322:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3326:	b116      	cbz	r6, 332e <MPSL_IRQ_CLOCK_Handler+0x336>
    3328:	e9c4 2004 	strd	r2, r0, [r4, #16]
    332c:	e001      	b.n	3332 <MPSL_IRQ_CLOCK_Handler+0x33a>
    332e:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3332:	2101      	movs	r1, #1
    3334:	4628      	mov	r0, r5
    3336:	f008 fb0a 	bl	b94e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    333a:	b108      	cbz	r0, 3340 <MPSL_IRQ_CLOCK_Handler+0x348>
    333c:	f000 f95e 	bl	35fc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3340:	f884 800a 	strb.w	r8, [r4, #10]
    3344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3348:	20000024 	.word	0x20000024
    334c:	00020001 	.word	0x00020001
    3350:	00030001 	.word	0x00030001
    3354:	4000053c 	.word	0x4000053c
    3358:	e000ed10 	.word	0xe000ed10

0000335c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    335c:	b510      	push	{r4, lr}
    335e:	f3ef 8410 	mrs	r4, PRIMASK
    3362:	b672      	cpsid	i
    3364:	480a      	ldr	r0, [pc, #40]	; (3390 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3366:	7841      	ldrb	r1, [r0, #1]
    3368:	b129      	cbz	r1, 3376 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    336a:	7841      	ldrb	r1, [r0, #1]
    336c:	1e49      	subs	r1, r1, #1
    336e:	7041      	strb	r1, [r0, #1]
    3370:	7841      	ldrb	r1, [r0, #1]
    3372:	b129      	cbz	r1, 3380 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3374:	e008      	b.n	3388 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3376:	f240 110d 	movw	r1, #269	; 0x10d
    337a:	206d      	movs	r0, #109	; 0x6d
    337c:	f000 f9a8 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3380:	7880      	ldrb	r0, [r0, #2]
    3382:	b908      	cbnz	r0, 3388 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3384:	f000 f94e 	bl	3624 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3388:	2c00      	cmp	r4, #0
    338a:	d100      	bne.n	338e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    338c:	b662      	cpsie	i
    338e:	bd10      	pop	{r4, pc}
    3390:	20000024 	.word	0x20000024

00003394 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3394:	b510      	push	{r4, lr}
    3396:	f3ef 8410 	mrs	r4, PRIMASK
    339a:	b672      	cpsid	i
    339c:	4806      	ldr	r0, [pc, #24]	; (33b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    339e:	7841      	ldrb	r1, [r0, #1]
    33a0:	1c49      	adds	r1, r1, #1
    33a2:	7041      	strb	r1, [r0, #1]
    33a4:	7840      	ldrb	r0, [r0, #1]
    33a6:	2801      	cmp	r0, #1
    33a8:	d101      	bne.n	33ae <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    33aa:	f008 fae7 	bl	b97c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    33ae:	2c00      	cmp	r4, #0
    33b0:	d100      	bne.n	33b4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    33b2:	b662      	cpsie	i
    33b4:	bd10      	pop	{r4, pc}
    33b6:	0000      	.short	0x0000
    33b8:	20000024 	.word	0x20000024

000033bc <mpsl_clock_hfclk_release>:
    33bc:	4805      	ldr	r0, [pc, #20]	; (33d4 <mpsl_clock_hfclk_release+0x18>)
    33be:	b510      	push	{r4, lr}
    33c0:	78c1      	ldrb	r1, [r0, #3]
    33c2:	b121      	cbz	r1, 33ce <mpsl_clock_hfclk_release+0x12>
    33c4:	2100      	movs	r1, #0
    33c6:	7101      	strb	r1, [r0, #4]
    33c8:	70c1      	strb	r1, [r0, #3]
    33ca:	f7ff ffc7 	bl	335c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    33ce:	2000      	movs	r0, #0
    33d0:	bd10      	pop	{r4, pc}
    33d2:	0000      	.short	0x0000
    33d4:	20000024 	.word	0x20000024

000033d8 <mpsl_clock_hfclk_request>:
    33d8:	b570      	push	{r4, r5, r6, lr}
    33da:	4c0c      	ldr	r4, [pc, #48]	; (340c <mpsl_clock_hfclk_request+0x34>)
    33dc:	78e1      	ldrb	r1, [r4, #3]
    33de:	b961      	cbnz	r1, 33fa <mpsl_clock_hfclk_request+0x22>
    33e0:	2501      	movs	r5, #1
    33e2:	70e5      	strb	r5, [r4, #3]
    33e4:	61e0      	str	r0, [r4, #28]
    33e6:	f7ff ffd5 	bl	3394 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    33ea:	f000 f90d 	bl	3608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    33ee:	b130      	cbz	r0, 33fe <mpsl_clock_hfclk_request+0x26>
    33f0:	69e0      	ldr	r0, [r4, #28]
    33f2:	b110      	cbz	r0, 33fa <mpsl_clock_hfclk_request+0x22>
    33f4:	4780      	blx	r0
    33f6:	2000      	movs	r0, #0
    33f8:	61e0      	str	r0, [r4, #28]
    33fa:	2000      	movs	r0, #0
    33fc:	bd70      	pop	{r4, r5, r6, pc}
    33fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3402:	7125      	strb	r5, [r4, #4]
    3404:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3408:	e7f7      	b.n	33fa <mpsl_clock_hfclk_request+0x22>
    340a:	0000      	.short	0x0000
    340c:	20000024 	.word	0x20000024

00003410 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3410:	f3ef 8010 	mrs	r0, PRIMASK
    3414:	b672      	cpsid	i
    3416:	4904      	ldr	r1, [pc, #16]	; (3428 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3418:	788a      	ldrb	r2, [r1, #2]
    341a:	1c52      	adds	r2, r2, #1
    341c:	708a      	strb	r2, [r1, #2]
    341e:	2800      	cmp	r0, #0
    3420:	d100      	bne.n	3424 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3422:	b662      	cpsie	i
    3424:	4770      	bx	lr
    3426:	0000      	.short	0x0000
    3428:	20000024 	.word	0x20000024

0000342c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    342c:	b510      	push	{r4, lr}
    342e:	f3ef 8410 	mrs	r4, PRIMASK
    3432:	b672      	cpsid	i
    3434:	480a      	ldr	r0, [pc, #40]	; (3460 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3436:	7881      	ldrb	r1, [r0, #2]
    3438:	b129      	cbz	r1, 3446 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    343a:	7881      	ldrb	r1, [r0, #2]
    343c:	1e49      	subs	r1, r1, #1
    343e:	7081      	strb	r1, [r0, #2]
    3440:	7841      	ldrb	r1, [r0, #1]
    3442:	b129      	cbz	r1, 3450 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3444:	e008      	b.n	3458 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3446:	f240 1125 	movw	r1, #293	; 0x125
    344a:	206d      	movs	r0, #109	; 0x6d
    344c:	f000 f940 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3450:	7880      	ldrb	r0, [r0, #2]
    3452:	b908      	cbnz	r0, 3458 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3454:	f000 f8e6 	bl	3624 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3458:	2c00      	cmp	r4, #0
    345a:	d100      	bne.n	345e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    345c:	b662      	cpsie	i
    345e:	bd10      	pop	{r4, pc}
    3460:	20000024 	.word	0x20000024

00003464 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3468:	0004      	movs	r4, r0
    346a:	f06f 0015 	mvn.w	r0, #21
    346e:	d03c      	beq.n	34ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3470:	7821      	ldrb	r1, [r4, #0]
    3472:	2904      	cmp	r1, #4
    3474:	d839      	bhi.n	34ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3476:	2900      	cmp	r1, #0
    3478:	7861      	ldrb	r1, [r4, #1]
    347a:	d038      	beq.n	34ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    347c:	2900      	cmp	r1, #0
    347e:	d134      	bne.n	34ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3480:	78a1      	ldrb	r1, [r4, #2]
    3482:	2900      	cmp	r1, #0
    3484:	d131      	bne.n	34ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3486:	2000      	movs	r0, #0
    3488:	f008 fa27 	bl	b8da <MPSL_IRQ_RADIO_Handler+0x1e>
    348c:	2000      	movs	r0, #0
    348e:	f008 fa17 	bl	b8c0 <MPSL_IRQ_RADIO_Handler+0x4>
    3492:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3496:	f04f 31ff 	mov.w	r1, #4294967295
    349a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    349e:	2600      	movs	r6, #0
    34a0:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    34a4:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    34a8:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    34ac:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    34b0:	4f14      	ldr	r7, [pc, #80]	; (3504 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    34b2:	707e      	strb	r6, [r7, #1]
    34b4:	88a0      	ldrh	r0, [r4, #4]
    34b6:	81b8      	strh	r0, [r7, #12]
    34b8:	f008 fa57 	bl	b96a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    34bc:	2501      	movs	r5, #1
    34be:	b108      	cbz	r0, 34c4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    34c0:	70fd      	strb	r5, [r7, #3]
    34c2:	707d      	strb	r5, [r7, #1]
    34c4:	2101      	movs	r1, #1
    34c6:	4640      	mov	r0, r8
    34c8:	f008 fa41 	bl	b94e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    34cc:	b108      	cbz	r0, 34d2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    34ce:	f000 f895 	bl	35fc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    34d2:	4620      	mov	r0, r4
    34d4:	f7ff fe7c 	bl	31d0 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    34d8:	727d      	strb	r5, [r7, #9]
    34da:	2000      	movs	r0, #0
    34dc:	f008 f9f0 	bl	b8c0 <MPSL_IRQ_RADIO_Handler+0x4>
    34e0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    34e4:	4630      	mov	r0, r6
    34e6:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    34ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34ee:	2900      	cmp	r1, #0
    34f0:	d0fb      	beq.n	34ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34f2:	2920      	cmp	r1, #32
    34f4:	d8f9      	bhi.n	34ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34f6:	78a1      	ldrb	r1, [r4, #2]
    34f8:	2921      	cmp	r1, #33	; 0x21
    34fa:	d8f6      	bhi.n	34ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34fc:	2901      	cmp	r1, #1
    34fe:	d1c2      	bne.n	3486 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3500:	e7f3      	b.n	34ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3502:	0000      	.short	0x0000
    3504:	20000024 	.word	0x20000024

00003508 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3508:	4801      	ldr	r0, [pc, #4]	; (3510 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    350a:	8980      	ldrh	r0, [r0, #12]
    350c:	4770      	bx	lr
    350e:	0000      	.short	0x0000
    3510:	20000024 	.word	0x20000024

00003514 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3514:	b510      	push	{r4, lr}
    3516:	480d      	ldr	r0, [pc, #52]	; (354c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3518:	f008 fa88 	bl	ba2c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    351c:	490b      	ldr	r1, [pc, #44]	; (354c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    351e:	3908      	subs	r1, #8
    3520:	b148      	cbz	r0, 3536 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    3522:	2001      	movs	r0, #1
    3524:	7008      	strb	r0, [r1, #0]
    3526:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    352a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    352e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3532:	f7ff bf2f 	b.w	3394 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3536:	7a88      	ldrb	r0, [r1, #10]
    3538:	2802      	cmp	r0, #2
    353a:	d101      	bne.n	3540 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    353c:	f7ff fda0 	bl	3080 <MPSL_IRQ_CLOCK_Handler+0x88>
    3540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3544:	4801      	ldr	r0, [pc, #4]	; (354c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3546:	f008 ba88 	b.w	ba5a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    354a:	0000      	.short	0x0000
    354c:	2000002c 	.word	0x2000002c

00003550 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3550:	4802      	ldr	r0, [pc, #8]	; (355c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3552:	7a80      	ldrb	r0, [r0, #10]
    3554:	2800      	cmp	r0, #0
    3556:	d000      	beq.n	355a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3558:	2001      	movs	r0, #1
    355a:	4770      	bx	lr
    355c:	20000024 	.word	0x20000024

00003560 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3562:	4d1f      	ldr	r5, [pc, #124]	; (35e0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3564:	7ae8      	ldrb	r0, [r5, #11]
    3566:	2800      	cmp	r0, #0
    3568:	d10f      	bne.n	358a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    356a:	7e28      	ldrb	r0, [r5, #24]
    356c:	f000 0003 	and.w	r0, r0, #3
    3570:	f008 fa09 	bl	b986 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3574:	2800      	cmp	r0, #0
    3576:	d008      	beq.n	358a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3578:	f3ef 8110 	mrs	r1, PRIMASK
    357c:	b672      	cpsid	i
    357e:	f7ff ffe7 	bl	3550 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3582:	b118      	cbz	r0, 358c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3584:	2900      	cmp	r1, #0
    3586:	d100      	bne.n	358a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3588:	b662      	cpsie	i
    358a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    358c:	2601      	movs	r6, #1
    358e:	72ae      	strb	r6, [r5, #10]
    3590:	b901      	cbnz	r1, 3594 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3592:	b662      	cpsie	i
    3594:	2018      	movs	r0, #24
    3596:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    359a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    359e:	61a6      	str	r6, [r4, #24]
    35a0:	f44f 7020 	mov.w	r0, #640	; 0x280
    35a4:	f8ad 0000 	strh.w	r0, [sp]
    35a8:	f8bd 0000 	ldrh.w	r0, [sp]
    35ac:	1e41      	subs	r1, r0, #1
    35ae:	f8ad 1000 	strh.w	r1, [sp]
    35b2:	d2f9      	bcs.n	35a8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    35b4:	2700      	movs	r7, #0
    35b6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    35ba:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    35be:	4808      	ldr	r0, [pc, #32]	; (35e0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    35c0:	3008      	adds	r0, #8
    35c2:	f008 fa46 	bl	ba52 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    35c6:	702f      	strb	r7, [r5, #0]
    35c8:	f7ff fd5a 	bl	3080 <MPSL_IRQ_CLOCK_Handler+0x88>
    35cc:	6166      	str	r6, [r4, #20]
    35ce:	7968      	ldrb	r0, [r5, #5]
    35d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    35d4:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    35d8:	2018      	movs	r0, #24
    35da:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    35de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35e0:	20000024 	.word	0x20000024

000035e4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    35e4:	b510      	push	{r4, lr}
    35e6:	4c04      	ldr	r4, [pc, #16]	; (35f8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    35e8:	7e20      	ldrb	r0, [r4, #24]
    35ea:	f000 0003 	and.w	r0, r0, #3
    35ee:	f008 f9ca 	bl	b986 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    35f2:	2800      	cmp	r0, #0
    35f4:	d0f8      	beq.n	35e8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    35f6:	bd10      	pop	{r4, pc}
    35f8:	20000024 	.word	0x20000024

000035fc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    35fc:	4901      	ldr	r1, [pc, #4]	; (3604 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    35fe:	2001      	movs	r0, #1
    3600:	7008      	strb	r0, [r1, #0]
    3602:	4770      	bx	lr
    3604:	20000284 	.word	0x20000284

00003608 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3608:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    360c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3610:	b918      	cbnz	r0, 361a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3612:	4803      	ldr	r0, [pc, #12]	; (3620 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3614:	7800      	ldrb	r0, [r0, #0]
    3616:	2800      	cmp	r0, #0
    3618:	d000      	beq.n	361c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    361a:	2001      	movs	r0, #1
    361c:	4770      	bx	lr
    361e:	0000      	.short	0x0000
    3620:	20000284 	.word	0x20000284

00003624 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3624:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3628:	2101      	movs	r1, #1
    362a:	6041      	str	r1, [r0, #4]
    362c:	2100      	movs	r1, #0
    362e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3632:	4801      	ldr	r0, [pc, #4]	; (3638 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3634:	7001      	strb	r1, [r0, #0]
    3636:	4770      	bx	lr
    3638:	20000284 	.word	0x20000284

0000363c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    363c:	4802      	ldr	r0, [pc, #8]	; (3648 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    363e:	6800      	ldr	r0, [r0, #0]
    3640:	f000 0003 	and.w	r0, r0, #3
    3644:	4770      	bx	lr
    3646:	0000      	.short	0x0000
    3648:	4000041c 	.word	0x4000041c
    364c:	b510      	push	{r4, lr}
    364e:	b131      	cbz	r1, 365e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3650:	2901      	cmp	r1, #1
    3652:	d007      	beq.n	3664 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3654:	f44f 7142 	mov.w	r1, #776	; 0x308
    3658:	a005      	add	r0, pc, #20	; (adr r0, 3670 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    365a:	f000 f80f 	bl	367c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    365e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3662:	e001      	b.n	3668 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3664:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3668:	f000 0001 	and.w	r0, r0, #1
    366c:	bd10      	pop	{r4, pc}
    366e:	0000      	.short	0x0000
    3670:	5f66726e 	.word	0x5f66726e
    3674:	636f6c63 	.word	0x636f6c63
    3678:	00682e6b 	.word	0x00682e6b

0000367c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    367c:	4a02      	ldr	r2, [pc, #8]	; (3688 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    367e:	6852      	ldr	r2, [r2, #4]
    3680:	b102      	cbz	r2, 3684 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3682:	4710      	bx	r2
    3684:	e7fe      	b.n	3684 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3686:	0000      	.short	0x0000
    3688:	20000044 	.word	0x20000044
    368c:	4806      	ldr	r0, [pc, #24]	; (36a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    368e:	b510      	push	{r4, lr}
    3690:	2100      	movs	r1, #0
    3692:	6001      	str	r1, [r0, #0]
    3694:	2101      	movs	r1, #1
    3696:	6001      	str	r1, [r0, #0]
    3698:	4608      	mov	r0, r1
    369a:	f008 f99b 	bl	b9d4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    369e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36a2:	2001      	movs	r0, #1
    36a4:	f008 b989 	b.w	b9ba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    36a8:	40001ffc 	.word	0x40001ffc
    36ac:	4807      	ldr	r0, [pc, #28]	; (36cc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    36ae:	b510      	push	{r4, lr}
    36b0:	2101      	movs	r1, #1
    36b2:	6041      	str	r1, [r0, #4]
    36b4:	1e89      	subs	r1, r1, #2
    36b6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    36ba:	200c      	movs	r0, #12
    36bc:	f008 f98a 	bl	b9d4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    36c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36c4:	200c      	movs	r0, #12
    36c6:	f008 b978 	b.w	b9ba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    36ca:	0000      	.short	0x0000
    36cc:	4000c000 	.word	0x4000c000

000036d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    36d0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    36d2:	4a10      	ldr	r2, [pc, #64]	; (3714 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    36d4:	6855      	ldr	r5, [r2, #4]
    36d6:	b1e5      	cbz	r5, 3712 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    36d8:	2200      	movs	r2, #0
    36da:	4603      	mov	r3, r0
    36dc:	466e      	mov	r6, sp
    36de:	240a      	movs	r4, #10
    36e0:	e003      	b.n	36ea <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    36e2:	fbb0 f0f4 	udiv	r0, r0, r4
    36e6:	1c52      	adds	r2, r2, #1
    36e8:	b2d2      	uxtb	r2, r2
    36ea:	2800      	cmp	r0, #0
    36ec:	d1f9      	bne.n	36e2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    36ee:	54b0      	strb	r0, [r6, r2]
    36f0:	e00a      	b.n	3708 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    36f2:	bf00      	nop
    36f4:	fbb3 f0f4 	udiv	r0, r3, r4
    36f8:	fb04 3010 	mls	r0, r4, r0, r3
    36fc:	fbb3 f3f4 	udiv	r3, r3, r4
    3700:	1e52      	subs	r2, r2, #1
    3702:	b2d2      	uxtb	r2, r2
    3704:	3030      	adds	r0, #48	; 0x30
    3706:	54b0      	strb	r0, [r6, r2]
    3708:	2a00      	cmp	r2, #0
    370a:	d1f3      	bne.n	36f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    370c:	4630      	mov	r0, r6
    370e:	47a8      	blx	r5
    3710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3712:	e7fe      	b.n	3712 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3714:	20000044 	.word	0x20000044

00003718 <mpsl_init>:
    3718:	b570      	push	{r4, r5, r6, lr}
    371a:	4c17      	ldr	r4, [pc, #92]	; (3778 <mpsl_init+0x60>)
    371c:	4606      	mov	r6, r0
    371e:	460d      	mov	r5, r1
    3720:	7860      	ldrb	r0, [r4, #1]
    3722:	b110      	cbz	r0, 372a <mpsl_init+0x12>
    3724:	f04f 30ff 	mov.w	r0, #4294967295
    3728:	bd70      	pop	{r4, r5, r6, pc}
    372a:	b906      	cbnz	r6, 372e <mpsl_init+0x16>
    372c:	4e13      	ldr	r6, [pc, #76]	; (377c <mpsl_init+0x64>)
    372e:	6062      	str	r2, [r4, #4]
    3730:	7025      	strb	r5, [r4, #0]
    3732:	f7ff ffab 	bl	368c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    3736:	f7ff ffb9 	bl	36ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    373a:	4630      	mov	r0, r6
    373c:	f7ff fe92 	bl	3464 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3740:	0006      	movs	r6, r0
    3742:	d1f1      	bne.n	3728 <mpsl_init+0x10>
    3744:	f7fe ff2c 	bl	25a0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3748:	f7ff ff0a 	bl	3560 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    374c:	f008 f88f 	bl	b86e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3750:	4628      	mov	r0, r5
    3752:	f008 f932 	bl	b9ba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3756:	2001      	movs	r0, #1
    3758:	2d00      	cmp	r5, #0
    375a:	db09      	blt.n	3770 <mpsl_init+0x58>
    375c:	f005 011f 	and.w	r1, r5, #31
    3760:	fa00 f101 	lsl.w	r1, r0, r1
    3764:	096a      	lsrs	r2, r5, #5
    3766:	0092      	lsls	r2, r2, #2
    3768:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    376c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3770:	7060      	strb	r0, [r4, #1]
    3772:	4630      	mov	r0, r6
    3774:	bd70      	pop	{r4, r5, r6, pc}
    3776:	0000      	.short	0x0000
    3778:	20000044 	.word	0x20000044
    377c:	0000b9f6 	.word	0x0000b9f6

00003780 <mpsl_is_initialized>:
    3780:	4801      	ldr	r0, [pc, #4]	; (3788 <mpsl_is_initialized+0x8>)
    3782:	7840      	ldrb	r0, [r0, #1]
    3784:	4770      	bx	lr
    3786:	0000      	.short	0x0000
    3788:	20000044 	.word	0x20000044

0000378c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    378c:	4807      	ldr	r0, [pc, #28]	; (37ac <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    378e:	f990 0000 	ldrsb.w	r0, [r0]
    3792:	2800      	cmp	r0, #0
    3794:	db09      	blt.n	37aa <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3796:	f000 021f 	and.w	r2, r0, #31
    379a:	2101      	movs	r1, #1
    379c:	4091      	lsls	r1, r2
    379e:	0940      	lsrs	r0, r0, #5
    37a0:	0080      	lsls	r0, r0, #2
    37a2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    37a6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    37aa:	4770      	bx	lr
    37ac:	20000044 	.word	0x20000044

000037b0 <mpsl_temperature_get>:
    37b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37b4:	2601      	movs	r6, #1
    37b6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    37ba:	0331      	lsls	r1, r6, #12
    37bc:	f04f 0800 	mov.w	r8, #0
    37c0:	4640      	mov	r0, r8
    37c2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    37c6:	f3bf 8f4f 	dsb	sy
    37ca:	f3bf 8f6f 	isb	sy
    37ce:	4c16      	ldr	r4, [pc, #88]	; (3828 <mpsl_temperature_get+0x78>)
    37d0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    37d4:	200c      	movs	r0, #12
    37d6:	f008 f91c 	bl	ba12 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    37da:	4d14      	ldr	r5, [pc, #80]	; (382c <mpsl_temperature_get+0x7c>)
    37dc:	6828      	ldr	r0, [r5, #0]
    37de:	43c0      	mvns	r0, r0
    37e0:	f340 1700 	sbfx	r7, r0, #4, #1
    37e4:	6828      	ldr	r0, [r5, #0]
    37e6:	f040 0010 	orr.w	r0, r0, #16
    37ea:	6028      	str	r0, [r5, #0]
    37ec:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    37f0:	6026      	str	r6, [r4, #0]
    37f2:	1c7f      	adds	r7, r7, #1
    37f4:	e002      	b.n	37fc <mpsl_temperature_get+0x4c>
    37f6:	bf00      	nop
    37f8:	f000 f890 	bl	391c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    37fc:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3800:	2800      	cmp	r0, #0
    3802:	d0f9      	beq.n	37f8 <mpsl_temperature_get+0x48>
    3804:	b91f      	cbnz	r7, 380e <mpsl_temperature_get+0x5e>
    3806:	6828      	ldr	r0, [r5, #0]
    3808:	f020 0010 	bic.w	r0, r0, #16
    380c:	6028      	str	r0, [r5, #0]
    380e:	4808      	ldr	r0, [pc, #32]	; (3830 <mpsl_temperature_get+0x80>)
    3810:	6805      	ldr	r5, [r0, #0]
    3812:	6066      	str	r6, [r4, #4]
    3814:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3818:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    381c:	200c      	movs	r0, #12
    381e:	f008 f8f8 	bl	ba12 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3822:	4628      	mov	r0, r5
    3824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3828:	4000c000 	.word	0x4000c000
    382c:	e000ed10 	.word	0xe000ed10
    3830:	4000c508 	.word	0x4000c508

00003834 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3834:	b510      	push	{r4, lr}
    3836:	4602      	mov	r2, r0
    3838:	2005      	movs	r0, #5
    383a:	490c      	ldr	r1, [pc, #48]	; (386c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    383c:	e004      	b.n	3848 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    383e:	bf00      	nop
    3840:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3844:	791b      	ldrb	r3, [r3, #4]
    3846:	b133      	cbz	r3, 3856 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3848:	1e40      	subs	r0, r0, #1
    384a:	b2c0      	uxtb	r0, r0
    384c:	d2f8      	bcs.n	3840 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    384e:	214b      	movs	r1, #75	; 0x4b
    3850:	2069      	movs	r0, #105	; 0x69
    3852:	f7ff ff3d 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3856:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    385a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    385e:	2200      	movs	r2, #0
    3860:	714a      	strb	r2, [r1, #5]
    3862:	718a      	strb	r2, [r1, #6]
    3864:	2201      	movs	r2, #1
    3866:	710a      	strb	r2, [r1, #4]
    3868:	bd10      	pop	{r4, pc}
    386a:	0000      	.short	0x0000
    386c:	20000d48 	.word	0x20000d48

00003870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3870:	b510      	push	{r4, lr}
    3872:	2805      	cmp	r0, #5
    3874:	d301      	bcc.n	387a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3876:	215a      	movs	r1, #90	; 0x5a
    3878:	e006      	b.n	3888 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    387a:	490a      	ldr	r1, [pc, #40]	; (38a4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    387c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3880:	7901      	ldrb	r1, [r0, #4]
    3882:	2901      	cmp	r1, #1
    3884:	d003      	beq.n	388e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3886:	215b      	movs	r1, #91	; 0x5b
    3888:	2069      	movs	r0, #105	; 0x69
    388a:	f7ff ff21 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    388e:	7941      	ldrb	r1, [r0, #5]
    3890:	7982      	ldrb	r2, [r0, #6]
    3892:	1c49      	adds	r1, r1, #1
    3894:	b2c9      	uxtb	r1, r1
    3896:	428a      	cmp	r2, r1
    3898:	d000      	beq.n	389c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    389a:	7141      	strb	r1, [r0, #5]
    389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38a0:	f7ff bf74 	b.w	378c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    38a4:	20000d48 	.word	0x20000d48

000038a8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    38a8:	b570      	push	{r4, r5, r6, lr}
    38aa:	2505      	movs	r5, #5
    38ac:	4e0e      	ldr	r6, [pc, #56]	; (38e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    38ae:	4c0f      	ldr	r4, [pc, #60]	; (38ec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    38b0:	e016      	b.n	38e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    38b2:	7821      	ldrb	r1, [r4, #0]
    38b4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    38b8:	7902      	ldrb	r2, [r0, #4]
    38ba:	2a01      	cmp	r2, #1
    38bc:	d108      	bne.n	38d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    38be:	7942      	ldrb	r2, [r0, #5]
    38c0:	7983      	ldrb	r3, [r0, #6]
    38c2:	429a      	cmp	r2, r3
    38c4:	d004      	beq.n	38d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    38c6:	7942      	ldrb	r2, [r0, #5]
    38c8:	7182      	strb	r2, [r0, #6]
    38ca:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    38ce:	4780      	blx	r0
    38d0:	7820      	ldrb	r0, [r4, #0]
    38d2:	1c40      	adds	r0, r0, #1
    38d4:	b2c0      	uxtb	r0, r0
    38d6:	7020      	strb	r0, [r4, #0]
    38d8:	2805      	cmp	r0, #5
    38da:	d301      	bcc.n	38e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    38dc:	2000      	movs	r0, #0
    38de:	7020      	strb	r0, [r4, #0]
    38e0:	1e6d      	subs	r5, r5, #1
    38e2:	b2ed      	uxtb	r5, r5
    38e4:	d2e5      	bcs.n	38b2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    38e6:	bd70      	pop	{r4, r5, r6, pc}
    38e8:	20000d48 	.word	0x20000d48
    38ec:	20000285 	.word	0x20000285

000038f0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    38f0:	b500      	push	{lr}
    38f2:	f008 f8bd 	bl	ba70 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    38f6:	b940      	cbnz	r0, 390a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    38f8:	f008 f8c4 	bl	ba84 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    38fc:	b928      	cbnz	r0, 390a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    38fe:	f008 f8d8 	bl	bab2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3902:	b910      	cbnz	r0, 390a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3904:	f008 f8e9 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3908:	b108      	cbz	r0, 390e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    390a:	4802      	ldr	r0, [pc, #8]	; (3914 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    390c:	bd00      	pop	{pc}
    390e:	4802      	ldr	r0, [pc, #8]	; (3918 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3910:	bd00      	pop	{pc}
    3912:	0000      	.short	0x0000
    3914:	4000050c 	.word	0x4000050c
    3918:	4001e700 	.word	0x4001e700

0000391c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    391c:	b510      	push	{r4, lr}
    391e:	f008 f8dc 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3922:	b330      	cbz	r0, 3972 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3924:	f3ef 8010 	mrs	r0, PRIMASK
    3928:	b1c8      	cbz	r0, 395e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    392a:	2100      	movs	r1, #0
    392c:	b672      	cpsid	i
    392e:	4812      	ldr	r0, [pc, #72]	; (3978 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3930:	6802      	ldr	r2, [r0, #0]
    3932:	6803      	ldr	r3, [r0, #0]
    3934:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3938:	f043 0310 	orr.w	r3, r3, #16
    393c:	6003      	str	r3, [r0, #0]
    393e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3942:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3946:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    394a:	431c      	orrs	r4, r3
    394c:	d000      	beq.n	3950 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    394e:	bf40      	sev
    3950:	bf20      	wfe
    3952:	bf00      	nop
    3954:	bf00      	nop
    3956:	bf00      	nop
    3958:	bf00      	nop
    395a:	b112      	cbz	r2, 3962 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    395c:	e005      	b.n	396a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    395e:	2101      	movs	r1, #1
    3960:	e7e4      	b.n	392c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3962:	6802      	ldr	r2, [r0, #0]
    3964:	f022 0210 	bic.w	r2, r2, #16
    3968:	6002      	str	r2, [r0, #0]
    396a:	2900      	cmp	r1, #0
    396c:	d000      	beq.n	3970 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    396e:	b662      	cpsie	i
    3970:	bd10      	pop	{r4, pc}
    3972:	bf20      	wfe
    3974:	bd10      	pop	{r4, pc}
    3976:	0000      	.short	0x0000
    3978:	e000ed10 	.word	0xe000ed10

0000397c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    397c:	0000bd63 0000bd51 0000bd5d 0000bd4b     c...Q...]...K...
    398c:	0000bd49 0000bd47 0000bd69 0000bd57     I...G...i...W...
    399c:	0000bd41 0000bd39 0000bd3d 0000bd33     A...9...=...3...

000039ac <mpsl_fem_lna_configuration_clear>:
    39ac:	4801      	ldr	r0, [pc, #4]	; (39b4 <mpsl_fem_lna_configuration_clear+0x8>)
    39ae:	6800      	ldr	r0, [r0, #0]
    39b0:	68c0      	ldr	r0, [r0, #12]
    39b2:	4700      	bx	r0
    39b4:	2000004c 	.word	0x2000004c

000039b8 <mpsl_fem_lna_configuration_set>:
    39b8:	4a01      	ldr	r2, [pc, #4]	; (39c0 <mpsl_fem_lna_configuration_set+0x8>)
    39ba:	6812      	ldr	r2, [r2, #0]
    39bc:	6852      	ldr	r2, [r2, #4]
    39be:	4710      	bx	r2
    39c0:	2000004c 	.word	0x2000004c

000039c4 <mpsl_fem_pa_configuration_clear>:
    39c4:	4801      	ldr	r0, [pc, #4]	; (39cc <mpsl_fem_pa_configuration_clear+0x8>)
    39c6:	6800      	ldr	r0, [r0, #0]
    39c8:	6880      	ldr	r0, [r0, #8]
    39ca:	4700      	bx	r0
    39cc:	2000004c 	.word	0x2000004c

000039d0 <mpsl_fem_pa_configuration_set>:
    39d0:	4a01      	ldr	r2, [pc, #4]	; (39d8 <mpsl_fem_pa_configuration_set+0x8>)
    39d2:	6812      	ldr	r2, [r2, #0]
    39d4:	6812      	ldr	r2, [r2, #0]
    39d6:	4710      	bx	r2
    39d8:	2000004c 	.word	0x2000004c

000039dc <mpsl_fem_pa_is_configured>:
    39dc:	4901      	ldr	r1, [pc, #4]	; (39e4 <mpsl_fem_pa_is_configured+0x8>)
    39de:	6809      	ldr	r1, [r1, #0]
    39e0:	69c9      	ldr	r1, [r1, #28]
    39e2:	4708      	bx	r1
    39e4:	2000004c 	.word	0x2000004c

000039e8 <mpsl_fem_device_config_254_apply_get>:
    39e8:	4801      	ldr	r0, [pc, #4]	; (39f0 <mpsl_fem_device_config_254_apply_get+0x8>)
    39ea:	7800      	ldrb	r0, [r0, #0]
    39ec:	4770      	bx	lr
    39ee:	0000      	.short	0x0000
    39f0:	20000286 	.word	0x20000286

000039f4 <mpsl_fem_device_config_254_apply_set>:
    39f4:	4901      	ldr	r1, [pc, #4]	; (39fc <mpsl_fem_device_config_254_apply_set+0x8>)
    39f6:	7008      	strb	r0, [r1, #0]
    39f8:	4770      	bx	lr
    39fa:	0000      	.short	0x0000
    39fc:	20000286 	.word	0x20000286
    3a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a02:	4c17      	ldr	r4, [pc, #92]	; (3a60 <mpsl_fem_device_config_254_apply_set+0x6c>)
    3a04:	79a0      	ldrb	r0, [r4, #6]
    3a06:	2802      	cmp	r0, #2
    3a08:	d200      	bcs.n	3a0c <mpsl_fem_device_config_254_apply_set+0x18>
    3a0a:	2002      	movs	r0, #2
    3a0c:	f88d 0001 	strb.w	r0, [sp, #1]
    3a10:	7960      	ldrb	r0, [r4, #5]
    3a12:	2803      	cmp	r0, #3
    3a14:	d200      	bcs.n	3a18 <mpsl_fem_device_config_254_apply_set+0x24>
    3a16:	2003      	movs	r0, #3
    3a18:	f88d 0000 	strb.w	r0, [sp]
    3a1c:	7920      	ldrb	r0, [r4, #4]
    3a1e:	f8ad 0004 	strh.w	r0, [sp, #4]
    3a22:	78e0      	ldrb	r0, [r4, #3]
    3a24:	f8ad 0002 	strh.w	r0, [sp, #2]
    3a28:	4668      	mov	r0, sp
    3a2a:	f006 faaf 	bl	9f8c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3a2e:	b108      	cbz	r0, 3a34 <mpsl_fem_device_config_254_apply_set+0x40>
    3a30:	219f      	movs	r1, #159	; 0x9f
    3a32:	e010      	b.n	3a56 <mpsl_fem_device_config_254_apply_set+0x62>
    3a34:	68a0      	ldr	r0, [r4, #8]
    3a36:	9002      	str	r0, [sp, #8]
    3a38:	a802      	add	r0, sp, #8
    3a3a:	f006 fabd 	bl	9fb8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3a3e:	b108      	cbz	r0, 3a44 <mpsl_fem_device_config_254_apply_set+0x50>
    3a40:	21a3      	movs	r1, #163	; 0xa3
    3a42:	e008      	b.n	3a56 <mpsl_fem_device_config_254_apply_set+0x62>
    3a44:	4807      	ldr	r0, [pc, #28]	; (3a64 <mpsl_fem_device_config_254_apply_set+0x70>)
    3a46:	6800      	ldr	r0, [r0, #0]
    3a48:	9003      	str	r0, [sp, #12]
    3a4a:	a803      	add	r0, sp, #12
    3a4c:	f00a ff07 	bl	e85e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3a50:	2800      	cmp	r0, #0
    3a52:	d003      	beq.n	3a5c <mpsl_fem_device_config_254_apply_set+0x68>
    3a54:	21a7      	movs	r1, #167	; 0xa7
    3a56:	2003      	movs	r0, #3
    3a58:	f000 f8ba 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a5c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3a5e:	0000      	.short	0x0000
    3a60:	20000058 	.word	0x20000058
    3a64:	00003ca8 	.word	0x00003ca8

00003a68 <sdc_build_revision_get>:
    3a68:	b510      	push	{r4, lr}
    3a6a:	b128      	cbz	r0, 3a78 <sdc_build_revision_get+0x10>
    3a6c:	2214      	movs	r2, #20
    3a6e:	4904      	ldr	r1, [pc, #16]	; (3a80 <sdc_build_revision_get+0x18>)
    3a70:	f008 f885 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a74:	2000      	movs	r0, #0
    3a76:	bd10      	pop	{r4, pc}
    3a78:	f06f 0015 	mvn.w	r0, #21
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	0000      	.short	0x0000
    3a80:	00003cda 	.word	0x00003cda

00003a84 <sdc_cfg_set>:
    3a84:	b510      	push	{r4, lr}
    3a86:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3a8a:	bb40      	cbnz	r0, 3ade <sdc_cfg_set+0x5a>
    3a8c:	4b15      	ldr	r3, [pc, #84]	; (3ae4 <sdc_cfg_set+0x60>)
    3a8e:	7898      	ldrb	r0, [r3, #2]
    3a90:	b108      	cbz	r0, 3a96 <sdc_cfg_set+0x12>
    3a92:	11a0      	asrs	r0, r4, #6
    3a94:	bd10      	pop	{r4, pc}
    3a96:	b1c9      	cbz	r1, 3acc <sdc_cfg_set+0x48>
    3a98:	b132      	cbz	r2, 3aa8 <sdc_cfg_set+0x24>
    3a9a:	2906      	cmp	r1, #6
    3a9c:	d21f      	bcs.n	3ade <sdc_cfg_set+0x5a>
    3a9e:	e8df f001 	tbb	[pc, r1]
    3aa2:	061e      	.short	0x061e
    3aa4:	13100c09 	.word	0x13100c09
    3aa8:	f06f 0015 	mvn.w	r0, #21
    3aac:	bd10      	pop	{r4, pc}
    3aae:	7810      	ldrb	r0, [r2, #0]
    3ab0:	7218      	strb	r0, [r3, #8]
    3ab2:	e00b      	b.n	3acc <sdc_cfg_set+0x48>
    3ab4:	7810      	ldrb	r0, [r2, #0]
    3ab6:	7258      	strb	r0, [r3, #9]
    3ab8:	e008      	b.n	3acc <sdc_cfg_set+0x48>
    3aba:	6810      	ldr	r0, [r2, #0]
    3abc:	f8c3 000b 	str.w	r0, [r3, #11]
    3ac0:	e004      	b.n	3acc <sdc_cfg_set+0x48>
    3ac2:	6810      	ldr	r0, [r2, #0]
    3ac4:	6118      	str	r0, [r3, #16]
    3ac6:	e001      	b.n	3acc <sdc_cfg_set+0x48>
    3ac8:	7810      	ldrb	r0, [r2, #0]
    3aca:	7298      	strb	r0, [r3, #10]
    3acc:	4905      	ldr	r1, [pc, #20]	; (3ae4 <sdc_cfg_set+0x60>)
    3ace:	2201      	movs	r2, #1
    3ad0:	3108      	adds	r1, #8
    3ad2:	2000      	movs	r0, #0
    3ad4:	f008 f94a 	bl	bd6c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    3ad8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3adc:	dbe6      	blt.n	3aac <sdc_cfg_set+0x28>
    3ade:	4620      	mov	r0, r4
    3ae0:	bd10      	pop	{r4, pc}
    3ae2:	0000      	.short	0x0000
    3ae4:	20000050 	.word	0x20000050

00003ae8 <sdc_enable>:
    3ae8:	b538      	push	{r3, r4, r5, lr}
    3aea:	460d      	mov	r5, r1
    3aec:	0004      	movs	r4, r0
    3aee:	d020      	beq.n	3b32 <sdc_enable+0x4a>
    3af0:	b1fd      	cbz	r5, 3b32 <sdc_enable+0x4a>
    3af2:	f000 f927 	bl	3d44 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3af6:	b1f8      	cbz	r0, 3b38 <sdc_enable+0x50>
    3af8:	4620      	mov	r0, r4
    3afa:	f7ff fe9b 	bl	3834 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3afe:	4c10      	ldr	r4, [pc, #64]	; (3b40 <sdc_enable+0x58>)
    3b00:	2200      	movs	r2, #0
    3b02:	f104 0108 	add.w	r1, r4, #8
    3b06:	7020      	strb	r0, [r4, #0]
    3b08:	4628      	mov	r0, r5
    3b0a:	f008 f92f 	bl	bd6c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    3b0e:	f00b fa7f 	bl	f010 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3b12:	2100      	movs	r1, #0
    3b14:	7820      	ldrb	r0, [r4, #0]
    3b16:	f006 fcc9 	bl	a4ac <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3b1a:	7860      	ldrb	r0, [r4, #1]
    3b1c:	f88d 0000 	strb.w	r0, [sp]
    3b20:	4668      	mov	r0, sp
    3b22:	f00a fe90 	bl	e846 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3b26:	f7ff ff6b 	bl	3a00 <mpsl_fem_device_config_254_apply_set+0xc>
    3b2a:	2001      	movs	r0, #1
    3b2c:	70a0      	strb	r0, [r4, #2]
    3b2e:	2000      	movs	r0, #0
    3b30:	bd38      	pop	{r3, r4, r5, pc}
    3b32:	f06f 0015 	mvn.w	r0, #21
    3b36:	bd38      	pop	{r3, r4, r5, pc}
    3b38:	f04f 30ff 	mov.w	r0, #4294967295
    3b3c:	bd38      	pop	{r3, r4, r5, pc}
    3b3e:	0000      	.short	0x0000
    3b40:	20000050 	.word	0x20000050

00003b44 <sdc_init>:
    3b44:	b570      	push	{r4, r5, r6, lr}
    3b46:	0004      	movs	r4, r0
    3b48:	d00b      	beq.n	3b62 <sdc_init+0x1e>
    3b4a:	f7ff fe19 	bl	3780 <mpsl_is_initialized>
    3b4e:	f04f 35ff 	mov.w	r5, #4294967295
    3b52:	b120      	cbz	r0, 3b5e <sdc_init+0x1a>
    3b54:	f7ff fcd8 	bl	3508 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3b58:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3b5c:	d904      	bls.n	3b68 <sdc_init+0x24>
    3b5e:	4628      	mov	r0, r5
    3b60:	bd70      	pop	{r4, r5, r6, pc}
    3b62:	f06f 0015 	mvn.w	r0, #21
    3b66:	bd70      	pop	{r4, r5, r6, pc}
    3b68:	2200      	movs	r2, #0
    3b6a:	4b14      	ldr	r3, [pc, #80]	; (3bbc <sdc_init+0x78>)
    3b6c:	4611      	mov	r1, r2
    3b6e:	bf00      	nop
    3b70:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    3b74:	4285      	cmp	r5, r0
    3b76:	d303      	bcc.n	3b80 <sdc_init+0x3c>
    3b78:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3b7c:	7882      	ldrb	r2, [r0, #2]
    3b7e:	e003      	b.n	3b88 <sdc_init+0x44>
    3b80:	1c49      	adds	r1, r1, #1
    3b82:	b2c9      	uxtb	r1, r1
    3b84:	290c      	cmp	r1, #12
    3b86:	d3f3      	bcc.n	3b70 <sdc_init+0x2c>
    3b88:	480d      	ldr	r0, [pc, #52]	; (3bc0 <sdc_init+0x7c>)
    3b8a:	7042      	strb	r2, [r0, #1]
    3b8c:	6044      	str	r4, [r0, #4]
    3b8e:	480d      	ldr	r0, [pc, #52]	; (3bc4 <sdc_init+0x80>)
    3b90:	f000 f9ea 	bl	3f68 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3b94:	f3ef 8410 	mrs	r4, PRIMASK
    3b98:	b672      	cpsid	i
    3b9a:	480b      	ldr	r0, [pc, #44]	; (3bc8 <sdc_init+0x84>)
    3b9c:	f06f 010c 	mvn.w	r1, #12
    3ba0:	f000 fd18 	bl	45d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3ba4:	4809      	ldr	r0, [pc, #36]	; (3bcc <sdc_init+0x88>)
    3ba6:	f000 fdd9 	bl	475c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3baa:	b118      	cbz	r0, 3bb4 <sdc_init+0x70>
    3bac:	21b5      	movs	r1, #181	; 0xb5
    3bae:	2003      	movs	r0, #3
    3bb0:	f000 f80e 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bb4:	b904      	cbnz	r4, 3bb8 <sdc_init+0x74>
    3bb6:	b662      	cpsie	i
    3bb8:	2000      	movs	r0, #0
    3bba:	bd70      	pop	{r4, r5, r6, pc}
    3bbc:	00003caa 	.word	0x00003caa
    3bc0:	20000050 	.word	0x20000050
    3bc4:	00003a01 	.word	0x00003a01
    3bc8:	4000c000 	.word	0x4000c000
    3bcc:	00003d71 	.word	0x00003d71

00003bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3bd0:	b50e      	push	{r1, r2, r3, lr}
    3bd2:	b672      	cpsid	i
    3bd4:	4a15      	ldr	r2, [pc, #84]	; (3c2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3bd6:	6855      	ldr	r5, [r2, #4]
    3bd8:	b1d5      	cbz	r5, 3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3bda:	2200      	movs	r2, #0
    3bdc:	4603      	mov	r3, r0
    3bde:	466e      	mov	r6, sp
    3be0:	240a      	movs	r4, #10
    3be2:	e003      	b.n	3bec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3be4:	fbb0 f0f4 	udiv	r0, r0, r4
    3be8:	1c52      	adds	r2, r2, #1
    3bea:	b2d2      	uxtb	r2, r2
    3bec:	2800      	cmp	r0, #0
    3bee:	d1f9      	bne.n	3be4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3bf0:	54b0      	strb	r0, [r6, r2]
    3bf2:	e009      	b.n	3c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3bf4:	fbb3 f0f4 	udiv	r0, r3, r4
    3bf8:	fb04 3010 	mls	r0, r4, r0, r3
    3bfc:	fbb3 f3f4 	udiv	r3, r3, r4
    3c00:	1e52      	subs	r2, r2, #1
    3c02:	b2d2      	uxtb	r2, r2
    3c04:	3030      	adds	r0, #48	; 0x30
    3c06:	54b0      	strb	r0, [r6, r2]
    3c08:	2a00      	cmp	r2, #0
    3c0a:	d1f3      	bne.n	3bf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3c0c:	4630      	mov	r0, r6
    3c0e:	47a8      	blx	r5
    3c10:	f3bf 8f4f 	dsb	sy
    3c14:	4806      	ldr	r0, [pc, #24]	; (3c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3c16:	6801      	ldr	r1, [r0, #0]
    3c18:	4a06      	ldr	r2, [pc, #24]	; (3c34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3c1a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3c1e:	4311      	orrs	r1, r2
    3c20:	6001      	str	r1, [r0, #0]
    3c22:	f3bf 8f4f 	dsb	sy
    3c26:	bf00      	nop
    3c28:	e7fd      	b.n	3c26 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3c2a:	0000      	.short	0x0000
    3c2c:	20000050 	.word	0x20000050
    3c30:	e000ed0c 	.word	0xe000ed0c
    3c34:	05fa0004 	.word	0x05fa0004

00003c38 <sdc_support_adv>:
    3c38:	4805      	ldr	r0, [pc, #20]	; (3c50 <sdc_support_adv+0x18>)
    3c3a:	b510      	push	{r4, lr}
    3c3c:	7880      	ldrb	r0, [r0, #2]
    3c3e:	b110      	cbz	r0, 3c46 <sdc_support_adv+0xe>
    3c40:	f04f 30ff 	mov.w	r0, #4294967295
    3c44:	bd10      	pop	{r4, pc}
    3c46:	f006 fc51 	bl	a4ec <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3c4a:	2000      	movs	r0, #0
    3c4c:	bd10      	pop	{r4, pc}
    3c4e:	0000      	.short	0x0000
    3c50:	20000050 	.word	0x20000050

00003c54 <sdc_support_dle>:
    3c54:	4805      	ldr	r0, [pc, #20]	; (3c6c <sdc_support_dle+0x18>)
    3c56:	b510      	push	{r4, lr}
    3c58:	7880      	ldrb	r0, [r0, #2]
    3c5a:	b110      	cbz	r0, 3c62 <sdc_support_dle+0xe>
    3c5c:	f04f 30ff 	mov.w	r0, #4294967295
    3c60:	bd10      	pop	{r4, pc}
    3c62:	f006 f9c1 	bl	9fe8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3c66:	2000      	movs	r0, #0
    3c68:	bd10      	pop	{r4, pc}
    3c6a:	0000      	.short	0x0000
    3c6c:	20000050 	.word	0x20000050

00003c70 <sdc_support_le_2m_phy>:
    3c70:	4805      	ldr	r0, [pc, #20]	; (3c88 <sdc_support_le_2m_phy+0x18>)
    3c72:	b510      	push	{r4, lr}
    3c74:	7880      	ldrb	r0, [r0, #2]
    3c76:	b110      	cbz	r0, 3c7e <sdc_support_le_2m_phy+0xe>
    3c78:	f04f 30ff 	mov.w	r0, #4294967295
    3c7c:	bd10      	pop	{r4, pc}
    3c7e:	f00a ff3c 	bl	eafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3c82:	2000      	movs	r0, #0
    3c84:	bd10      	pop	{r4, pc}
    3c86:	0000      	.short	0x0000
    3c88:	20000050 	.word	0x20000050

00003c8c <sdc_support_slave>:
    3c8c:	4805      	ldr	r0, [pc, #20]	; (3ca4 <sdc_support_slave+0x18>)
    3c8e:	b510      	push	{r4, lr}
    3c90:	7880      	ldrb	r0, [r0, #2]
    3c92:	b110      	cbz	r0, 3c9a <sdc_support_slave+0xe>
    3c94:	f04f 30ff 	mov.w	r0, #4294967295
    3c98:	bd10      	pop	{r4, pc}
    3c9a:	f006 fc39 	bl	a510 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3c9e:	2000      	movs	r0, #0
    3ca0:	bd10      	pop	{r4, pc}
    3ca2:	0000      	.short	0x0000
    3ca4:	20000050 	.word	0x20000050
    3ca8:	00010001 	.word	0x00010001
    3cac:	0002000b 	.word	0x0002000b
    3cb0:	0005000a 	.word	0x0005000a
    3cb4:	000a0009 	.word	0x000a0009
    3cb8:	00140008 	.word	0x00140008
    3cbc:	001e0007 	.word	0x001e0007
    3cc0:	00320006 	.word	0x00320006
    3cc4:	004b0005 	.word	0x004b0005
    3cc8:	00640004 	.word	0x00640004
    3ccc:	00960003 	.word	0x00960003
    3cd0:	00fa0002 	.word	0x00fa0002
    3cd4:	01f40001 	.word	0x01f40001
    3cd8:	03ef0000 	.word	0x03ef0000
    3cdc:	96799c09 	.word	0x96799c09
    3ce0:	08cc7db6 	.word	0x08cc7db6
    3ce4:	0fcfb29d 	.word	0x0fcfb29d
    3ce8:	ce973cda 	.word	0xce973cda
    3cec:	0000780d 	.word	0x0000780d

00003cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3cf0:	4a05      	ldr	r2, [pc, #20]	; (3d08 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3cf2:	b510      	push	{r4, lr}
    3cf4:	6852      	ldr	r2, [r2, #4]
    3cf6:	b112      	cbz	r2, 3cfe <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cfc:	4710      	bx	r2
    3cfe:	2183      	movs	r1, #131	; 0x83
    3d00:	2004      	movs	r0, #4
    3d02:	f7ff ff65 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d06:	0000      	.short	0x0000
    3d08:	20000d70 	.word	0x20000d70

00003d0c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3d0c:	4a05      	ldr	r2, [pc, #20]	; (3d24 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3d0e:	b510      	push	{r4, lr}
    3d10:	6812      	ldr	r2, [r2, #0]
    3d12:	b112      	cbz	r2, 3d1a <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d18:	4710      	bx	r2
    3d1a:	217d      	movs	r1, #125	; 0x7d
    3d1c:	2004      	movs	r0, #4
    3d1e:	f7ff ff57 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d22:	0000      	.short	0x0000
    3d24:	20000d70 	.word	0x20000d70

00003d28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3d28:	4a05      	ldr	r2, [pc, #20]	; (3d40 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3d2a:	b510      	push	{r4, lr}
    3d2c:	6892      	ldr	r2, [r2, #8]
    3d2e:	b112      	cbz	r2, 3d36 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d34:	4710      	bx	r2
    3d36:	2189      	movs	r1, #137	; 0x89
    3d38:	2004      	movs	r0, #4
    3d3a:	f7ff ff49 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d3e:	0000      	.short	0x0000
    3d40:	20000d70 	.word	0x20000d70

00003d44 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3d44:	4805      	ldr	r0, [pc, #20]	; (3d5c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3d46:	6801      	ldr	r1, [r0, #0]
    3d48:	b129      	cbz	r1, 3d56 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d4a:	6841      	ldr	r1, [r0, #4]
    3d4c:	b119      	cbz	r1, 3d56 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d4e:	6880      	ldr	r0, [r0, #8]
    3d50:	b108      	cbz	r0, 3d56 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d52:	2001      	movs	r0, #1
    3d54:	4770      	bx	lr
    3d56:	2000      	movs	r0, #0
    3d58:	4770      	bx	lr
    3d5a:	0000      	.short	0x0000
    3d5c:	20000d70 	.word	0x20000d70

00003d60 <sdc_rand_source_register>:
    3d60:	4902      	ldr	r1, [pc, #8]	; (3d6c <sdc_rand_source_register+0xc>)
    3d62:	c80d      	ldmia	r0, {r0, r2, r3}
    3d64:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3d68:	2000      	movs	r0, #0
    3d6a:	4770      	bx	lr
    3d6c:	20000d70 	.word	0x20000d70

00003d70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d72:	4c12      	ldr	r4, [pc, #72]	; (3dbc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3d74:	2600      	movs	r6, #0
    3d76:	6825      	ldr	r5, [r4, #0]
    3d78:	e011      	b.n	3d9e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d7a:	9800      	ldr	r0, [sp, #0]
    3d7c:	2802      	cmp	r0, #2
    3d7e:	d002      	beq.n	3d86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3d80:	2803      	cmp	r0, #3
    3d82:	d10c      	bne.n	3d9e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d84:	e006      	b.n	3d94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3d86:	6820      	ldr	r0, [r4, #0]
    3d88:	b110      	cbz	r0, 3d90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3d8a:	2000      	movs	r0, #0
    3d8c:	6026      	str	r6, [r4, #0]
    3d8e:	e005      	b.n	3d9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3d90:	2128      	movs	r1, #40	; 0x28
    3d92:	e00c      	b.n	3dae <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3d94:	6820      	ldr	r0, [r4, #0]
    3d96:	b168      	cbz	r0, 3db4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3d98:	2001      	movs	r0, #1
    3d9a:	6026      	str	r6, [r4, #0]
    3d9c:	47a8      	blx	r5
    3d9e:	4668      	mov	r0, sp
    3da0:	f000 fcae 	bl	4700 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3da4:	2800      	cmp	r0, #0
    3da6:	d0e8      	beq.n	3d7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3da8:	2805      	cmp	r0, #5
    3daa:	d005      	beq.n	3db8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3dac:	2135      	movs	r1, #53	; 0x35
    3dae:	2004      	movs	r0, #4
    3db0:	f7ff ff0e 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3db4:	212d      	movs	r1, #45	; 0x2d
    3db6:	e7fa      	b.n	3dae <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dba:	0000      	.short	0x0000
    3dbc:	20000064 	.word	0x20000064
    3dc0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3dc2:	4d21      	ldr	r5, [pc, #132]	; (3e48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3dc4:	4606      	mov	r6, r0
    3dc6:	7828      	ldrb	r0, [r5, #0]
    3dc8:	b148      	cbz	r0, 3dde <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6e>
    3dca:	78ac      	ldrb	r4, [r5, #2]
    3dcc:	1c69      	adds	r1, r5, #1
    3dce:	1ca4      	adds	r4, r4, #2
    3dd0:	4622      	mov	r2, r4
    3dd2:	4630      	mov	r0, r6
    3dd4:	f007 fed3 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3dd8:	2000      	movs	r0, #0
    3dda:	7028      	strb	r0, [r5, #0]
    3ddc:	e024      	b.n	3e28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3dde:	481a      	ldr	r0, [pc, #104]	; (3e48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3de0:	3844      	subs	r0, #68	; 0x44
    3de2:	f006 f959 	bl	a098 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3de6:	2800      	cmp	r0, #0
    3de8:	d01f      	beq.n	3e2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3dea:	4c17      	ldr	r4, [pc, #92]	; (3e48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3dec:	3c44      	subs	r4, #68	; 0x44
    3dee:	7820      	ldrb	r0, [r4, #0]
    3df0:	2811      	cmp	r0, #17
    3df2:	d104      	bne.n	3dfe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8e>
    3df4:	210a      	movs	r1, #10
    3df6:	203e      	movs	r0, #62	; 0x3e
    3df8:	f008 f854 	bl	bea4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3dfc:	b118      	cbz	r0, 3e06 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3dfe:	7820      	ldrb	r0, [r4, #0]
    3e00:	2808      	cmp	r0, #8
    3e02:	d006      	beq.n	3e12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa2>
    3e04:	e00a      	b.n	3e1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    3e06:	4910      	ldr	r1, [pc, #64]	; (3e48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3e08:	4630      	mov	r0, r6
    3e0a:	3944      	subs	r1, #68	; 0x44
    3e0c:	f008 fa53 	bl	c2b6 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3e10:	e009      	b.n	3e26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb6>
    3e12:	2105      	movs	r1, #5
    3e14:	203e      	movs	r0, #62	; 0x3e
    3e16:	f008 f845 	bl	bea4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3e1a:	b138      	cbz	r0, 3e2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    3e1c:	490a      	ldr	r1, [pc, #40]	; (3e48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3e1e:	4630      	mov	r0, r6
    3e20:	3944      	subs	r1, #68	; 0x44
    3e22:	f008 f89d 	bl	bf60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3e26:	4604      	mov	r4, r0
    3e28:	4620      	mov	r0, r4
    3e2a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3e2c:	88a0      	ldrh	r0, [r4, #4]
    3e2e:	f8ad 0000 	strh.w	r0, [sp]
    3e32:	a901      	add	r1, sp, #4
    3e34:	4668      	mov	r0, sp
    3e36:	f008 fb58 	bl	c4ea <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3e3a:	b118      	cbz	r0, 3e44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>
    3e3c:	2197      	movs	r1, #151	; 0x97
    3e3e:	2008      	movs	r0, #8
    3e40:	f7ff fec6 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e44:	2400      	movs	r4, #0
    3e46:	e7ef      	b.n	3e28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3e48:	20000e54 	.word	0x20000e54
    3e4c:	b570      	push	{r4, r5, r6, lr}
    3e4e:	780a      	ldrb	r2, [r1, #0]
    3e50:	7082      	strb	r2, [r0, #2]
    3e52:	b33a      	cbz	r2, 3ea4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3e54:	2a01      	cmp	r2, #1
    3e56:	d825      	bhi.n	3ea4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3e58:	2313      	movs	r3, #19
    3e5a:	7003      	strb	r3, [r0, #0]
    3e5c:	2300      	movs	r3, #0
    3e5e:	e00a      	b.n	3e76 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    3e60:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3e64:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3e68:	78a6      	ldrb	r6, [r4, #2]
    3e6a:	70ee      	strb	r6, [r5, #3]
    3e6c:	8864      	ldrh	r4, [r4, #2]
    3e6e:	0a24      	lsrs	r4, r4, #8
    3e70:	1c5b      	adds	r3, r3, #1
    3e72:	712c      	strb	r4, [r5, #4]
    3e74:	b2db      	uxtb	r3, r3
    3e76:	4293      	cmp	r3, r2
    3e78:	d3f2      	bcc.n	3e60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    3e7a:	2300      	movs	r3, #0
    3e7c:	e00b      	b.n	3e96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    3e7e:	bf00      	nop
    3e80:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3e84:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3e88:	792e      	ldrb	r6, [r5, #4]
    3e8a:	7166      	strb	r6, [r4, #5]
    3e8c:	88ad      	ldrh	r5, [r5, #4]
    3e8e:	0a2d      	lsrs	r5, r5, #8
    3e90:	1c5b      	adds	r3, r3, #1
    3e92:	71a5      	strb	r5, [r4, #6]
    3e94:	b2db      	uxtb	r3, r3
    3e96:	4293      	cmp	r3, r2
    3e98:	d3f2      	bcc.n	3e80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    3e9a:	2101      	movs	r1, #1
    3e9c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3ea0:	b2c0      	uxtb	r0, r0
    3ea2:	bd70      	pop	{r4, r5, r6, pc}
    3ea4:	2000      	movs	r0, #0
    3ea6:	bd70      	pop	{r4, r5, r6, pc}

00003ea8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3ea8:	2101      	movs	r1, #1
    3eaa:	4a0c      	ldr	r2, [pc, #48]	; (3edc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3eac:	2840      	cmp	r0, #64	; 0x40
    3eae:	d20c      	bcs.n	3eca <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3eb0:	2820      	cmp	r0, #32
    3eb2:	d803      	bhi.n	3ebc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3eb4:	1e40      	subs	r0, r0, #1
    3eb6:	4081      	lsls	r1, r0
    3eb8:	6810      	ldr	r0, [r2, #0]
    3eba:	e002      	b.n	3ec2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3ebc:	3821      	subs	r0, #33	; 0x21
    3ebe:	4081      	lsls	r1, r0
    3ec0:	6850      	ldr	r0, [r2, #4]
    3ec2:	4201      	tst	r1, r0
    3ec4:	d107      	bne.n	3ed6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3ec6:	2000      	movs	r0, #0
    3ec8:	4770      	bx	lr
    3eca:	28ff      	cmp	r0, #255	; 0xff
    3ecc:	d003      	beq.n	3ed6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3ece:	3840      	subs	r0, #64	; 0x40
    3ed0:	4081      	lsls	r1, r0
    3ed2:	6890      	ldr	r0, [r2, #8]
    3ed4:	e7f5      	b.n	3ec2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3ed6:	2001      	movs	r0, #1
    3ed8:	4770      	bx	lr
    3eda:	0000      	.short	0x0000
    3edc:	20000068 	.word	0x20000068

00003ee0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3ee0:	2101      	movs	r1, #1
    3ee2:	1e40      	subs	r0, r0, #1
    3ee4:	4081      	lsls	r1, r0
    3ee6:	4804      	ldr	r0, [pc, #16]	; (3ef8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3ee8:	68c0      	ldr	r0, [r0, #12]
    3eea:	4201      	tst	r1, r0
    3eec:	d001      	beq.n	3ef2 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3eee:	2001      	movs	r0, #1
    3ef0:	4770      	bx	lr
    3ef2:	2000      	movs	r0, #0
    3ef4:	4770      	bx	lr
    3ef6:	0000      	.short	0x0000
    3ef8:	20000068 	.word	0x20000068

00003efc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3efc:	4901      	ldr	r1, [pc, #4]	; (3f04 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3efe:	6800      	ldr	r0, [r0, #0]
    3f00:	60c8      	str	r0, [r1, #12]
    3f02:	4770      	bx	lr
    3f04:	20000068 	.word	0x20000068

00003f08 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3f08:	4904      	ldr	r1, [pc, #16]	; (3f1c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3f0a:	6802      	ldr	r2, [r0, #0]
    3f0c:	6840      	ldr	r0, [r0, #4]
    3f0e:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3f12:	600a      	str	r2, [r1, #0]
    3f14:	4a02      	ldr	r2, [pc, #8]	; (3f20 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3f16:	4310      	orrs	r0, r2
    3f18:	6048      	str	r0, [r1, #4]
    3f1a:	4770      	bx	lr
    3f1c:	20000068 	.word	0x20000068
    3f20:	024007f8 	.word	0x024007f8

00003f24 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    3f24:	4901      	ldr	r1, [pc, #4]	; (3f2c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    3f26:	6800      	ldr	r0, [r0, #0]
    3f28:	6088      	str	r0, [r1, #8]
    3f2a:	4770      	bx	lr
    3f2c:	20000068 	.word	0x20000068

00003f30 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3f30:	4805      	ldr	r0, [pc, #20]	; (3f48 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3f32:	f04f 31ff 	mov.w	r1, #4294967295
    3f36:	6001      	str	r1, [r0, #0]
    3f38:	0cc9      	lsrs	r1, r1, #19
    3f3a:	6041      	str	r1, [r0, #4]
    3f3c:	2100      	movs	r1, #0
    3f3e:	6081      	str	r1, [r0, #8]
    3f40:	211f      	movs	r1, #31
    3f42:	60c1      	str	r1, [r0, #12]
    3f44:	4770      	bx	lr
    3f46:	0000      	.short	0x0000
    3f48:	20000068 	.word	0x20000068

00003f4c <sdc_hci_cmd_cb_reset>:
    3f4c:	b510      	push	{r4, lr}
    3f4e:	f7ff ffef 	bl	3f30 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3f52:	f00a fd49 	bl	e9e8 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3f56:	4604      	mov	r4, r0
    3f58:	4802      	ldr	r0, [pc, #8]	; (3f64 <sdc_hci_cmd_cb_reset+0x18>)
    3f5a:	6800      	ldr	r0, [r0, #0]
    3f5c:	b100      	cbz	r0, 3f60 <sdc_hci_cmd_cb_reset+0x14>
    3f5e:	4780      	blx	r0
    3f60:	4620      	mov	r0, r4
    3f62:	bd10      	pop	{r4, pc}
    3f64:	20000078 	.word	0x20000078

00003f68 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3f68:	4901      	ldr	r1, [pc, #4]	; (3f70 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3f6a:	6008      	str	r0, [r1, #0]
    3f6c:	4770      	bx	lr
    3f6e:	0000      	.short	0x0000
    3f70:	20000078 	.word	0x20000078

00003f74 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3f74:	2102      	movs	r1, #2
    3f76:	8001      	strh	r1, [r0, #0]
    3f78:	8041      	strh	r1, [r0, #2]
    3f7a:	2100      	movs	r1, #0
    3f7c:	7101      	strb	r1, [r0, #4]
    3f7e:	21ef      	movs	r1, #239	; 0xef
    3f80:	7141      	strb	r1, [r0, #5]
    3f82:	f640 1103 	movw	r1, #2307	; 0x903
    3f86:	80c1      	strh	r1, [r0, #6]
    3f88:	4901      	ldr	r1, [pc, #4]	; (3f90 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3f8a:	6081      	str	r1, [r0, #8]
    3f8c:	2000      	movs	r0, #0
    3f8e:	4770      	bx	lr
    3f90:	b696799c 	.word	0xb696799c

00003f94 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    3f94:	b510      	push	{r4, lr}
    3f96:	2802      	cmp	r0, #2
    3f98:	d304      	bcc.n	3fa4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    3f9a:	f240 116b 	movw	r1, #363	; 0x16b
    3f9e:	2017      	movs	r0, #23
    3fa0:	f7ff fe16 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fa4:	4901      	ldr	r1, [pc, #4]	; (3fac <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    3fa6:	5c08      	ldrb	r0, [r1, r0]
    3fa8:	bd10      	pop	{r4, pc}
    3faa:	0000      	.short	0x0000
    3fac:	20000d7c 	.word	0x20000d7c

00003fb0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    3fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fb2:	4605      	mov	r5, r0
    3fb4:	9000      	str	r0, [sp, #0]
    3fb6:	4291      	cmp	r1, r2
    3fb8:	d201      	bcs.n	3fbe <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    3fba:	4614      	mov	r4, r2
    3fbc:	e000      	b.n	3fc0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    3fbe:	460c      	mov	r4, r1
    3fc0:	b155      	cbz	r5, 3fd8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    3fc2:	2700      	movs	r7, #0
    3fc4:	1ce8      	adds	r0, r5, #3
    3fc6:	f020 0003 	bic.w	r0, r0, #3
    3fca:	42a8      	cmp	r0, r5
    3fcc:	d006      	beq.n	3fdc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    3fce:	f240 113f 	movw	r1, #319	; 0x13f
    3fd2:	2017      	movs	r0, #23
    3fd4:	f7ff fdfc 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fd8:	2701      	movs	r7, #1
    3fda:	e7f3      	b.n	3fc4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    3fdc:	4e12      	ldr	r6, [pc, #72]	; (4028 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    3fde:	4668      	mov	r0, sp
    3fe0:	7031      	strb	r1, [r6, #0]
    3fe2:	7072      	strb	r2, [r6, #1]
    3fe4:	4639      	mov	r1, r7
    3fe6:	f000 f8ed 	bl	41c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    3fea:	2000      	movs	r0, #0
    3fec:	4603      	mov	r3, r0
    3fee:	9900      	ldr	r1, [sp, #0]
    3ff0:	1cc9      	adds	r1, r1, #3
    3ff2:	f021 0103 	bic.w	r1, r1, #3
    3ff6:	9100      	str	r1, [sp, #0]
    3ff8:	b967      	cbnz	r7, 4014 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    3ffa:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    3ffe:	60d1      	str	r1, [r2, #12]
    4000:	2100      	movs	r1, #0
    4002:	e005      	b.n	4010 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4004:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4008:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    400c:	1c49      	adds	r1, r1, #1
    400e:	b2c9      	uxtb	r1, r1
    4010:	42a1      	cmp	r1, r4
    4012:	d3f7      	bcc.n	4004 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    4014:	9900      	ldr	r1, [sp, #0]
    4016:	1c40      	adds	r0, r0, #1
    4018:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    401c:	b2c0      	uxtb	r0, r0
    401e:	9100      	str	r1, [sp, #0]
    4020:	2802      	cmp	r0, #2
    4022:	d3e4      	bcc.n	3fee <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    4024:	1b48      	subs	r0, r1, r5
    4026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4028:	20000d7c 	.word	0x20000d7c

0000402c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    402c:	b570      	push	{r4, r5, r6, lr}
    402e:	4604      	mov	r4, r0
    4030:	f008 fe17 	bl	cc62 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4034:	b108      	cbz	r0, 403a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4036:	2010      	movs	r0, #16
    4038:	bd70      	pop	{r4, r5, r6, pc}
    403a:	7825      	ldrb	r5, [r4, #0]
    403c:	f000 f8fe 	bl	423c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4040:	4602      	mov	r2, r0
    4042:	480c      	ldr	r0, [pc, #48]	; (4074 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4044:	8861      	ldrh	r1, [r4, #2]
    4046:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    404a:	e00e      	b.n	406a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    404c:	68c3      	ldr	r3, [r0, #12]
    404e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4052:	b143      	cbz	r3, 4066 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4054:	1c4a      	adds	r2, r1, #1
    4056:	8062      	strh	r2, [r4, #2]
    4058:	80a1      	strh	r1, [r4, #4]
    405a:	68c0      	ldr	r0, [r0, #12]
    405c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4060:	60a0      	str	r0, [r4, #8]
    4062:	2000      	movs	r0, #0
    4064:	bd70      	pop	{r4, r5, r6, pc}
    4066:	1c49      	adds	r1, r1, #1
    4068:	b289      	uxth	r1, r1
    406a:	4291      	cmp	r1, r2
    406c:	d3ee      	bcc.n	404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    406e:	8061      	strh	r1, [r4, #2]
    4070:	2005      	movs	r0, #5
    4072:	bd70      	pop	{r4, r5, r6, pc}
    4074:	20000d7c 	.word	0x20000d7c

00004078 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    407c:	b121      	cbz	r1, 4088 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    407e:	2901      	cmp	r1, #1
    4080:	d002      	beq.n	4088 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4082:	2000      	movs	r0, #0
    4084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4088:	4c0f      	ldr	r4, [pc, #60]	; (40c8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    408a:	2700      	movs	r7, #0
    408c:	463b      	mov	r3, r7
    408e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4092:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4096:	f814 c001 	ldrb.w	ip, [r4, r1]
    409a:	e00a      	b.n	40b2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    409c:	19dc      	adds	r4, r3, r7
    409e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    40a2:	b2a4      	uxth	r4, r4
    40a4:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    40a8:	f1be 0f00 	cmp.w	lr, #0
    40ac:	d004      	beq.n	40b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    40ae:	1c5b      	adds	r3, r3, #1
    40b0:	b29b      	uxth	r3, r3
    40b2:	459c      	cmp	ip, r3
    40b4:	d8f2      	bhi.n	409c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    40b6:	4634      	mov	r4, r6
    40b8:	8004      	strh	r4, [r0, #0]
    40ba:	4620      	mov	r0, r4
    40bc:	42b4      	cmp	r4, r6
    40be:	d0e0      	beq.n	4082 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    40c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    40c4:	f000 b834 	b.w	4130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    40c8:	20000d7c 	.word	0x20000d7c

000040cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    40cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40d0:	4606      	mov	r6, r0
    40d2:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    40d6:	460c      	mov	r4, r1
    40d8:	f243 0702 	movw	r7, #12290	; 0x3002
    40dc:	38ff      	subs	r0, #255	; 0xff
    40de:	d020      	beq.n	4122 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    40e0:	2c02      	cmp	r4, #2
    40e2:	d302      	bcc.n	40ea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    40e4:	2007      	movs	r0, #7
    40e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40ea:	4630      	mov	r0, r6
    40ec:	f000 f85a 	bl	41a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    40f0:	0005      	movs	r5, r0
    40f2:	d016      	beq.n	4122 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    40f4:	480c      	ldr	r0, [pc, #48]	; (4128 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    40f6:	4629      	mov	r1, r5
    40f8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    40fc:	4630      	mov	r0, r6
    40fe:	4790      	blx	r2
    4100:	480a      	ldr	r0, [pc, #40]	; (412c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4102:	2100      	movs	r1, #0
    4104:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4108:	68f8      	ldr	r0, [r7, #12]
    410a:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    410e:	4620      	mov	r0, r4
    4110:	f000 f88a 	bl	4228 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4114:	4602      	mov	r2, r0
    4116:	4629      	mov	r1, r5
    4118:	6878      	ldr	r0, [r7, #4]
    411a:	f008 fd19 	bl	cb50 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    411e:	2000      	movs	r0, #0
    4120:	e7e1      	b.n	40e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4122:	4638      	mov	r0, r7
    4124:	e7df      	b.n	40e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4126:	0000      	.short	0x0000
    4128:	0000425c 	.word	0x0000425c
    412c:	20000d7c 	.word	0x20000d7c
    4130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4134:	4690      	mov	r8, r2
    4136:	460d      	mov	r5, r1
    4138:	4607      	mov	r7, r0
    413a:	f008 fd4d 	bl	cbd8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    413e:	b148      	cbz	r0, 4154 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4140:	4816      	ldr	r0, [pc, #88]	; (419c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4142:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4146:	68f0      	ldr	r0, [r6, #12]
    4148:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    414c:	b128      	cbz	r0, 415a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    414e:	f240 1109 	movw	r1, #265	; 0x109
    4152:	e015      	b.n	4180 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4154:	f44f 7184 	mov.w	r1, #264	; 0x108
    4158:	e012      	b.n	4180 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    415a:	6870      	ldr	r0, [r6, #4]
    415c:	2800      	cmp	r0, #0
    415e:	d01a      	beq.n	4196 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4160:	4628      	mov	r0, r5
    4162:	f000 f861 	bl	4228 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4166:	4601      	mov	r1, r0
    4168:	6870      	ldr	r0, [r6, #4]
    416a:	f008 fca3 	bl	cab4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    416e:	0004      	movs	r4, r0
    4170:	d010      	beq.n	4194 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4172:	68f0      	ldr	r0, [r6, #12]
    4174:	2d02      	cmp	r5, #2
    4176:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    417a:	d304      	bcc.n	4186 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    417c:	f44f 718a 	mov.w	r1, #276	; 0x114
    4180:	2017      	movs	r0, #23
    4182:	f7ff fd25 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4186:	4806      	ldr	r0, [pc, #24]	; (41a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4188:	4642      	mov	r2, r8
    418a:	4621      	mov	r1, r4
    418c:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4190:	4638      	mov	r0, r7
    4192:	4798      	blx	r3
    4194:	4620      	mov	r0, r4
    4196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    419a:	0000      	.short	0x0000
    419c:	20000d7c 	.word	0x20000d7c
    41a0:	00004254 	.word	0x00004254
    41a4:	b570      	push	{r4, r5, r6, lr}
    41a6:	460c      	mov	r4, r1
    41a8:	4605      	mov	r5, r0
    41aa:	f008 fd15 	bl	cbd8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    41ae:	2800      	cmp	r0, #0
    41b0:	d005      	beq.n	41be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    41b2:	4803      	ldr	r0, [pc, #12]	; (41c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    41b4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    41b8:	68c0      	ldr	r0, [r0, #12]
    41ba:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    41be:	bd70      	pop	{r4, r5, r6, pc}
    41c0:	20000d7c 	.word	0x20000d7c
    41c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41c8:	4e16      	ldr	r6, [pc, #88]	; (4224 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    41ca:	4688      	mov	r8, r1
    41cc:	4605      	mov	r5, r0
    41ce:	2400      	movs	r4, #0
    41d0:	6828      	ldr	r0, [r5, #0]
    41d2:	1cc0      	adds	r0, r0, #3
    41d4:	f020 0003 	bic.w	r0, r0, #3
    41d8:	6028      	str	r0, [r5, #0]
    41da:	4620      	mov	r0, r4
    41dc:	f000 f824 	bl	4228 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    41e0:	5d31      	ldrb	r1, [r6, r4]
    41e2:	4348      	muls	r0, r1
    41e4:	f1b8 0f00 	cmp.w	r8, #0
    41e8:	d001      	beq.n	41ee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    41ea:	2200      	movs	r2, #0
    41ec:	e000      	b.n	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    41ee:	682a      	ldr	r2, [r5, #0]
    41f0:	4601      	mov	r1, r0
    41f2:	9200      	str	r2, [sp, #0]
    41f4:	b132      	cbz	r2, 4204 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    41f6:	2700      	movs	r7, #0
    41f8:	ea4f 000d 	mov.w	r0, sp
    41fc:	f008 fc87 	bl	cb0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4200:	b11f      	cbz	r7, 420a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4202:	e006      	b.n	4212 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4204:	2701      	movs	r7, #1
    4206:	2000      	movs	r0, #0
    4208:	e7f8      	b.n	41fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    420a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    420e:	9a00      	ldr	r2, [sp, #0]
    4210:	604a      	str	r2, [r1, #4]
    4212:	6829      	ldr	r1, [r5, #0]
    4214:	1c64      	adds	r4, r4, #1
    4216:	4408      	add	r0, r1
    4218:	b2e4      	uxtb	r4, r4
    421a:	6028      	str	r0, [r5, #0]
    421c:	2c02      	cmp	r4, #2
    421e:	d3d7      	bcc.n	41d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4224:	20000d7c 	.word	0x20000d7c
    4228:	4903      	ldr	r1, [pc, #12]	; (4238 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    422a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    422e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4232:	1cc0      	adds	r0, r0, #3
    4234:	4008      	ands	r0, r1
    4236:	4770      	bx	lr
    4238:	00004250 	.word	0x00004250
    423c:	4803      	ldr	r0, [pc, #12]	; (424c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    423e:	7801      	ldrb	r1, [r0, #0]
    4240:	7840      	ldrb	r0, [r0, #1]
    4242:	4281      	cmp	r1, r0
    4244:	d300      	bcc.n	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    4246:	4608      	mov	r0, r1
    4248:	4770      	bx	lr
    424a:	0000      	.short	0x0000
    424c:	20000d7c 	.word	0x20000d7c
    4250:	00dc0210 	.word	0x00dc0210
    4254:	0000cbed 	.word	0x0000cbed
    4258:	0000cbed 	.word	0x0000cbed
    425c:	0000e0c7 	.word	0x0000e0c7
    4260:	0000d95f 	.word	0x0000d95f

00004264 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4264:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4268:	4c26      	ldr	r4, [pc, #152]	; (4304 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    426a:	4680      	mov	r8, r0
    426c:	b081      	sub	sp, #4
    426e:	6820      	ldr	r0, [r4, #0]
    4270:	469a      	mov	sl, r3
    4272:	4693      	mov	fp, r2
    4274:	b158      	cbz	r0, 428e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4276:	7a02      	ldrb	r2, [r0, #8]
    4278:	4542      	cmp	r2, r8
    427a:	d903      	bls.n	4284 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    427c:	6841      	ldr	r1, [r0, #4]
    427e:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4282:	b140      	cbz	r0, 4296 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4284:	f243 0002 	movw	r0, #12290	; 0x3002
    4288:	b005      	add	sp, #20
    428a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    428e:	21a5      	movs	r1, #165	; 0xa5
    4290:	2018      	movs	r0, #24
    4292:	f7ff fc9d 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4296:	4619      	mov	r1, r3
    4298:	9802      	ldr	r0, [sp, #8]
    429a:	f008 fcbf 	bl	cc1c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    429e:	b286      	uxth	r6, r0
    42a0:	4658      	mov	r0, fp
    42a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    42a4:	f008 fcb1 	bl	cc0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    42a8:	b285      	uxth	r5, r0
    42aa:	1970      	adds	r0, r6, r5
    42ac:	1d00      	adds	r0, r0, #4
    42ae:	b287      	uxth	r7, r0
    42b0:	6820      	ldr	r0, [r4, #0]
    42b2:	46a1      	mov	r9, r4
    42b4:	4639      	mov	r1, r7
    42b6:	6800      	ldr	r0, [r0, #0]
    42b8:	f008 fbfc 	bl	cab4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42bc:	0004      	movs	r4, r0
    42be:	d01f      	beq.n	4300 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    42c0:	8067      	strh	r7, [r4, #2]
    42c2:	8025      	strh	r5, [r4, #0]
    42c4:	4629      	mov	r1, r5
    42c6:	1d20      	adds	r0, r4, #4
    42c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    42ca:	4607      	mov	r7, r0
    42cc:	465a      	mov	r2, fp
    42ce:	2301      	movs	r3, #1
    42d0:	9500      	str	r5, [sp, #0]
    42d2:	f008 fb4e 	bl	c972 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    42d6:	8820      	ldrh	r0, [r4, #0]
    42d8:	4631      	mov	r1, r6
    42da:	4438      	add	r0, r7
    42dc:	2301      	movs	r3, #1
    42de:	9a02      	ldr	r2, [sp, #8]
    42e0:	f8cd a000 	str.w	sl, [sp]
    42e4:	f008 fb45 	bl	c972 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    42e8:	8820      	ldrh	r0, [r4, #0]
    42ea:	19c1      	adds	r1, r0, r7
    42ec:	4638      	mov	r0, r7
    42ee:	f008 fb71 	bl	c9d4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    42f2:	f8d9 0000 	ldr.w	r0, [r9]
    42f6:	6841      	ldr	r1, [r0, #4]
    42f8:	2000      	movs	r0, #0
    42fa:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    42fe:	e7c3      	b.n	4288 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4300:	2004      	movs	r0, #4
    4302:	e7c1      	b.n	4288 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4304:	2000007c 	.word	0x2000007c

00004308 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4308:	b570      	push	{r4, r5, r6, lr}
    430a:	4c14      	ldr	r4, [pc, #80]	; (435c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    430c:	6823      	ldr	r3, [r4, #0]
    430e:	b18b      	cbz	r3, 4334 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4310:	7a19      	ldrb	r1, [r3, #8]
    4312:	4281      	cmp	r1, r0
    4314:	d912      	bls.n	433c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4316:	685a      	ldr	r2, [r3, #4]
    4318:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    431c:	b171      	cbz	r1, 433c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    431e:	2500      	movs	r5, #0
    4320:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4324:	884a      	ldrh	r2, [r1, #2]
    4326:	6818      	ldr	r0, [r3, #0]
    4328:	f008 fc12 	bl	cb50 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    432c:	6821      	ldr	r1, [r4, #0]
    432e:	2000      	movs	r0, #0
    4330:	7a0a      	ldrb	r2, [r1, #8]
    4332:	e00c      	b.n	434e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4334:	21c8      	movs	r1, #200	; 0xc8
    4336:	2018      	movs	r0, #24
    4338:	f7ff fc4a 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    433c:	f243 0002 	movw	r0, #12290	; 0x3002
    4340:	bd70      	pop	{r4, r5, r6, pc}
    4342:	684b      	ldr	r3, [r1, #4]
    4344:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4348:	b933      	cbnz	r3, 4358 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    434a:	1c40      	adds	r0, r0, #1
    434c:	b2c0      	uxtb	r0, r0
    434e:	4282      	cmp	r2, r0
    4350:	d8f7      	bhi.n	4342 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4352:	6808      	ldr	r0, [r1, #0]
    4354:	f008 fbf1 	bl	cb3a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4358:	2000      	movs	r0, #0
    435a:	bd70      	pop	{r4, r5, r6, pc}
    435c:	2000007c 	.word	0x2000007c

00004360 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4364:	460d      	mov	r5, r1
    4366:	0004      	movs	r4, r0
    4368:	4690      	mov	r8, r2
    436a:	f04f 0600 	mov.w	r6, #0
    436e:	d009      	beq.n	4384 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4370:	2700      	movs	r7, #0
    4372:	1ce0      	adds	r0, r4, #3
    4374:	f020 0003 	bic.w	r0, r0, #3
    4378:	42a0      	cmp	r0, r4
    437a:	d005      	beq.n	4388 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    437c:	2186      	movs	r1, #134	; 0x86
    437e:	2018      	movs	r0, #24
    4380:	f7ff fc26 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4384:	2701      	movs	r7, #1
    4386:	e7f4      	b.n	4372 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4388:	b1cd      	cbz	r5, 43be <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    438a:	4611      	mov	r1, r2
    438c:	2000      	movs	r0, #0
    438e:	f008 fbbe 	bl	cb0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4392:	300c      	adds	r0, #12
    4394:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4398:	b98f      	cbnz	r7, 43be <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    439a:	4f0a      	ldr	r7, [pc, #40]	; (43c4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    439c:	f104 000c 	add.w	r0, r4, #12
    43a0:	00aa      	lsls	r2, r5, #2
    43a2:	603c      	str	r4, [r7, #0]
    43a4:	7225      	strb	r5, [r4, #8]
    43a6:	6060      	str	r0, [r4, #4]
    43a8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    43ac:	6020      	str	r0, [r4, #0]
    43ae:	2100      	movs	r1, #0
    43b0:	6860      	ldr	r0, [r4, #4]
    43b2:	f007 fc5e 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    43b6:	4641      	mov	r1, r8
    43b8:	6838      	ldr	r0, [r7, #0]
    43ba:	f008 fba8 	bl	cb0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    43be:	4630      	mov	r0, r6
    43c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43c4:	2000007c 	.word	0x2000007c

000043c8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    43c8:	b570      	push	{r4, r5, r6, lr}
    43ca:	4d08      	ldr	r5, [pc, #32]	; (43ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    43cc:	6828      	ldr	r0, [r5, #0]
    43ce:	2800      	cmp	r0, #0
    43d0:	d00a      	beq.n	43e8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    43d2:	2400      	movs	r4, #0
    43d4:	e004      	b.n	43e0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    43d6:	4620      	mov	r0, r4
    43d8:	f7ff ff96 	bl	4308 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    43dc:	1c64      	adds	r4, r4, #1
    43de:	b2e4      	uxtb	r4, r4
    43e0:	6828      	ldr	r0, [r5, #0]
    43e2:	7a00      	ldrb	r0, [r0, #8]
    43e4:	42a0      	cmp	r0, r4
    43e6:	d8f6      	bhi.n	43d6 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    43e8:	bd70      	pop	{r4, r5, r6, pc}
    43ea:	0000      	.short	0x0000
    43ec:	2000007c 	.word	0x2000007c

000043f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    43f0:	4909      	ldr	r1, [pc, #36]	; (4418 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    43f2:	b510      	push	{r4, lr}
    43f4:	4602      	mov	r2, r0
    43f6:	6809      	ldr	r1, [r1, #0]
    43f8:	2000      	movs	r0, #0
    43fa:	b149      	cbz	r1, 4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    43fc:	7a0b      	ldrb	r3, [r1, #8]
    43fe:	4293      	cmp	r3, r2
    4400:	d905      	bls.n	440e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4402:	6849      	ldr	r1, [r1, #4]
    4404:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4408:	2900      	cmp	r1, #0
    440a:	d000      	beq.n	440e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    440c:	1d08      	adds	r0, r1, #4
    440e:	bd10      	pop	{r4, pc}
    4410:	21ee      	movs	r1, #238	; 0xee
    4412:	2018      	movs	r0, #24
    4414:	f7ff fbdc 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4418:	2000007c 	.word	0x2000007c

0000441c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    441c:	490a      	ldr	r1, [pc, #40]	; (4448 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    441e:	b510      	push	{r4, lr}
    4420:	4602      	mov	r2, r0
    4422:	6809      	ldr	r1, [r1, #0]
    4424:	2000      	movs	r0, #0
    4426:	b159      	cbz	r1, 4440 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4428:	7a0b      	ldrb	r3, [r1, #8]
    442a:	4293      	cmp	r3, r2
    442c:	d907      	bls.n	443e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    442e:	6849      	ldr	r1, [r1, #4]
    4430:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4434:	2900      	cmp	r1, #0
    4436:	d002      	beq.n	443e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4438:	f831 0b04 	ldrh.w	r0, [r1], #4
    443c:	4408      	add	r0, r1
    443e:	bd10      	pop	{r4, pc}
    4440:	21fc      	movs	r1, #252	; 0xfc
    4442:	2018      	movs	r0, #24
    4444:	f7ff fbc4 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4448:	2000007c 	.word	0x2000007c

0000444c <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>:
    444c:	b510      	push	{r4, lr}
    444e:	4604      	mov	r4, r0
    4450:	2001      	movs	r0, #1
    4452:	f7ff fd9f 	bl	3f94 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    4456:	4284      	cmp	r4, r0
    4458:	d206      	bcs.n	4468 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY+0x1c>
    445a:	4904      	ldr	r1, [pc, #16]	; (446c <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY+0x20>)
    445c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    4460:	6809      	ldr	r1, [r1, #0]
    4462:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    4466:	bd10      	pop	{r4, pc}
    4468:	2000      	movs	r0, #0
    446a:	bd10      	pop	{r4, pc}
    446c:	20000080 	.word	0x20000080

00004470 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4470:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4472:	9800      	ldr	r0, [sp, #0]
    4474:	b158      	cbz	r0, 448e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4476:	2600      	movs	r6, #0
    4478:	ea4f 000d 	mov.w	r0, sp
    447c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4480:	0149      	lsls	r1, r1, #5
    4482:	460c      	mov	r4, r1
    4484:	f008 fb43 	bl	cb0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4488:	4605      	mov	r5, r0
    448a:	b11e      	cbz	r6, 4494 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    448c:	e00d      	b.n	44aa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3a>
    448e:	2601      	movs	r6, #1
    4490:	2000      	movs	r0, #0
    4492:	e7f3      	b.n	447c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    4494:	4621      	mov	r1, r4
    4496:	9800      	ldr	r0, [sp, #0]
    4498:	f008 fb0c 	bl	cab4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    449c:	4906      	ldr	r1, [pc, #24]	; (44b8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>)
    449e:	6008      	str	r0, [r1, #0]
    44a0:	b128      	cbz	r0, 44ae <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3e>
    44a2:	4622      	mov	r2, r4
    44a4:	2100      	movs	r1, #0
    44a6:	f007 fbe4 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    44aa:	4628      	mov	r0, r5
    44ac:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    44ae:	211e      	movs	r1, #30
    44b0:	2009      	movs	r0, #9
    44b2:	f7ff fb8d 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44b6:	0000      	.short	0x0000
    44b8:	20000080 	.word	0x20000080

000044bc <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI>:
    44bc:	b510      	push	{r4, lr}
    44be:	2001      	movs	r0, #1
    44c0:	f7ff fd68 	bl	3f94 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    44c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    44c8:	0142      	lsls	r2, r0, #5
    44ca:	4803      	ldr	r0, [pc, #12]	; (44d8 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x1c>)
    44cc:	2100      	movs	r1, #0
    44ce:	6800      	ldr	r0, [r0, #0]
    44d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44d4:	f007 bbcd 	b.w	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    44d8:	20000080 	.word	0x20000080
    44dc:	4909      	ldr	r1, [pc, #36]	; (4504 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x48>)
    44de:	b510      	push	{r4, lr}
    44e0:	4807      	ldr	r0, [pc, #28]	; (4500 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x44>)
    44e2:	6008      	str	r0, [r1, #0]
    44e4:	4b08      	ldr	r3, [pc, #32]	; (4508 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x4c>)
    44e6:	2011      	movs	r0, #17
    44e8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    44ec:	2200      	movs	r2, #0
    44ee:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    44f2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    44f6:	1c40      	adds	r0, r0, #1
    44f8:	b2c0      	uxtb	r0, r0
    44fa:	2814      	cmp	r0, #20
    44fc:	d3f4      	bcc.n	44e8 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x2c>
    44fe:	bd10      	pop	{r4, pc}
    4500:	fffe0000 	.word	0xfffe0000
    4504:	4001f508 	.word	0x4001f508
    4508:	4001f000 	.word	0x4001f000
    450c:	b570      	push	{r4, r5, r6, lr}
    450e:	2420      	movs	r4, #32
    4510:	2100      	movs	r1, #0
    4512:	2301      	movs	r3, #1
    4514:	fa20 f201 	lsr.w	r2, r0, r1
    4518:	07d2      	lsls	r2, r2, #31
    451a:	d020      	beq.n	455e <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xa2>
    451c:	b24a      	sxtb	r2, r1
    451e:	2a00      	cmp	r2, #0
    4520:	db10      	blt.n	4544 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x88>
    4522:	bf00      	nop
    4524:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4528:	ea4f 0686 	mov.w	r6, r6, lsl #2
    452c:	f002 051f 	and.w	r5, r2, #31
    4530:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4534:	fa03 f505 	lsl.w	r5, r3, r5
    4538:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    453c:	f3bf 8f4f 	dsb	sy
    4540:	f3bf 8f6f 	isb	sy
    4544:	db0b      	blt.n	455e <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xa2>
    4546:	f002 051f 	and.w	r5, r2, #31
    454a:	ea4f 1252 	mov.w	r2, r2, lsr #5
    454e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4552:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4556:	fa03 f505 	lsl.w	r5, r3, r5
    455a:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    455e:	f101 0101 	add.w	r1, r1, #1
    4562:	42a1      	cmp	r1, r4
    4564:	d3d6      	bcc.n	4514 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x58>
    4566:	bd70      	pop	{r4, r5, r6, pc}
    4568:	b570      	push	{r4, r5, r6, lr}
    456a:	0042      	lsls	r2, r0, #1
    456c:	f04f 0100 	mov.w	r1, #0
    4570:	d501      	bpl.n	4576 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xba>
    4572:	4a14      	ldr	r2, [pc, #80]	; (45c4 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x108>)
    4574:	6011      	str	r1, [r2, #0]
    4576:	f3c0 3280 	ubfx	r2, r0, #14, #1
    457a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    457e:	429a      	cmp	r2, r3
    4580:	d003      	beq.n	458a <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xce>
    4582:	2164      	movs	r1, #100	; 0x64
    4584:	201b      	movs	r0, #27
    4586:	f7ff fb23 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    458a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    458e:	d014      	beq.n	45ba <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xfe>
    4590:	4a0d      	ldr	r2, [pc, #52]	; (45c8 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x10c>)
    4592:	2001      	movs	r0, #1
    4594:	6050      	str	r0, [r2, #4]
    4596:	1e83      	subs	r3, r0, #2
    4598:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    459c:	4a0b      	ldr	r2, [pc, #44]	; (45cc <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x110>)
    459e:	6090      	str	r0, [r2, #8]
    45a0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    45a4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    45a8:	4c09      	ldr	r4, [pc, #36]	; (45d0 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x114>)
    45aa:	6021      	str	r1, [r4, #0]
    45ac:	1d25      	adds	r5, r4, #4
    45ae:	6028      	str	r0, [r5, #0]
    45b0:	6090      	str	r0, [r2, #8]
    45b2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    45b6:	6021      	str	r1, [r4, #0]
    45b8:	6028      	str	r0, [r5, #0]
    45ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45be:	f7ff bf8d 	b.w	44dc <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x20>
    45c2:	0000      	.short	0x0000
    45c4:	4001e504 	.word	0x4001e504
    45c8:	4000e000 	.word	0x4000e000
    45cc:	4000f000 	.word	0x4000f000
    45d0:	4000f500 	.word	0x4000f500

000045d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    45d4:	b570      	push	{r4, r5, r6, lr}
    45d6:	4c0a      	ldr	r4, [pc, #40]	; (4600 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    45d8:	460d      	mov	r5, r1
    45da:	6020      	str	r0, [r4, #0]
    45dc:	f7ff ffc4 	bl	4568 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xac>
    45e0:	6820      	ldr	r0, [r4, #0]
    45e2:	f7ff ff93 	bl	450c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x50>
    45e6:	f000 f877 	bl	46d8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    45ea:	f7ff ff77 	bl	44dc <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x20>
    45ee:	f008 fb2d 	bl	cc4c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    45f2:	4628      	mov	r0, r5
    45f4:	f000 f8aa 	bl	474c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    45f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45fc:	f000 b8c2 	b.w	4784 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4600:	20000084 	.word	0x20000084

00004604 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4604:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4608:	4e2f      	ldr	r6, [pc, #188]	; (46c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    460a:	4683      	mov	fp, r0
    460c:	6830      	ldr	r0, [r6, #0]
    460e:	9001      	str	r0, [sp, #4]
    4610:	2701      	movs	r7, #1
    4612:	482e      	ldr	r0, [pc, #184]	; (46cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4614:	f007 fa0a 	bl	ba2c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4618:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 46cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    461c:	b920      	cbnz	r0, 4628 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    461e:	2700      	movs	r7, #0
    4620:	f108 0001 	add.w	r0, r8, #1
    4624:	f007 fa19 	bl	ba5a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4628:	4c29      	ldr	r4, [pc, #164]	; (46d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    462a:	2500      	movs	r5, #0
    462c:	f04f 0903 	mov.w	r9, #3
    4630:	2001      	movs	r0, #1
    4632:	6060      	str	r0, [r4, #4]
    4634:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4638:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    463c:	f8c6 b000 	str.w	fp, [r6]
    4640:	6020      	str	r0, [r4, #0]
    4642:	f8df a090 	ldr.w	sl, [pc, #144]	; 46d4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    4646:	e017      	b.n	4678 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4648:	f8da 0000 	ldr.w	r0, [sl]
    464c:	06c0      	lsls	r0, r0, #27
    464e:	d513      	bpl.n	4678 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4650:	200e      	movs	r0, #14
    4652:	f008 faec 	bl	cc2e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4656:	f3ef 8010 	mrs	r0, PRIMASK
    465a:	9000      	str	r0, [sp, #0]
    465c:	b672      	cpsid	i
    465e:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    4662:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4666:	b920      	cbnz	r0, 4672 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4668:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    466c:	b908      	cbnz	r0, 4672 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    466e:	f7ff f955 	bl	391c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4672:	9800      	ldr	r0, [sp, #0]
    4674:	b900      	cbnz	r0, 4678 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4676:	b662      	cpsie	i
    4678:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    467c:	b918      	cbnz	r0, 4686 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    467e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4682:	2800      	cmp	r0, #0
    4684:	d0e0      	beq.n	4648 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4686:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    468a:	2800      	cmp	r0, #0
    468c:	d1d0      	bne.n	4630 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    468e:	b137      	cbz	r7, 469e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4690:	9801      	ldr	r0, [sp, #4]
    4692:	6030      	str	r0, [r6, #0]
    4694:	f108 0001 	add.w	r0, r8, #1
    4698:	f007 f9c8 	bl	ba2c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    469c:	e011      	b.n	46c2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    469e:	f108 0001 	add.w	r0, r8, #1
    46a2:	f007 f9c3 	bl	ba2c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    46a6:	2800      	cmp	r0, #0
    46a8:	d1ba      	bne.n	4620 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    46aa:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    46ae:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    46b2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    46b6:	200e      	movs	r0, #14
    46b8:	f008 fab9 	bl	cc2e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    46bc:	4803      	ldr	r0, [pc, #12]	; (46cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    46be:	f007 f9cc 	bl	ba5a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    46c2:	2000      	movs	r0, #0
    46c4:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    46c8:	4000e504 	.word	0x4000e504
    46cc:	20000287 	.word	0x20000287
    46d0:	4000e000 	.word	0x4000e000
    46d4:	e000ed10 	.word	0xe000ed10

000046d8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    46d8:	b510      	push	{r4, lr}
    46da:	4808      	ldr	r0, [pc, #32]	; (46fc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    46dc:	f007 f9b9 	bl	ba52 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    46e0:	b108      	cbz	r0, 46e6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    46e2:	2124      	movs	r1, #36	; 0x24
    46e4:	e006      	b.n	46f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    46e6:	4805      	ldr	r0, [pc, #20]	; (46fc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    46e8:	1c40      	adds	r0, r0, #1
    46ea:	f007 f9b2 	bl	ba52 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    46ee:	2800      	cmp	r0, #0
    46f0:	d003      	beq.n	46fa <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    46f2:	2128      	movs	r1, #40	; 0x28
    46f4:	201d      	movs	r0, #29
    46f6:	f7ff fa6b 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46fa:	bd10      	pop	{r4, pc}
    46fc:	20000287 	.word	0x20000287

00004700 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4700:	b570      	push	{r4, r5, r6, lr}
    4702:	4911      	ldr	r1, [pc, #68]	; (4748 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4704:	680a      	ldr	r2, [r1, #0]
    4706:	b1ea      	cbz	r2, 4744 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4708:	2300      	movs	r3, #0
    470a:	461d      	mov	r5, r3
    470c:	2401      	movs	r4, #1
    470e:	684a      	ldr	r2, [r1, #4]
    4710:	1c52      	adds	r2, r2, #1
    4712:	604a      	str	r2, [r1, #4]
    4714:	2a09      	cmp	r2, #9
    4716:	d300      	bcc.n	471a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4718:	604d      	str	r5, [r1, #4]
    471a:	790e      	ldrb	r6, [r1, #4]
    471c:	fa04 f206 	lsl.w	r2, r4, r6
    4720:	680e      	ldr	r6, [r1, #0]
    4722:	4216      	tst	r6, r2
    4724:	d00b      	beq.n	473e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4726:	f3ef 8310 	mrs	r3, PRIMASK
    472a:	b672      	cpsid	i
    472c:	680c      	ldr	r4, [r1, #0]
    472e:	4394      	bics	r4, r2
    4730:	600c      	str	r4, [r1, #0]
    4732:	b903      	cbnz	r3, 4736 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4734:	b662      	cpsie	i
    4736:	6849      	ldr	r1, [r1, #4]
    4738:	6001      	str	r1, [r0, #0]
    473a:	2000      	movs	r0, #0
    473c:	bd70      	pop	{r4, r5, r6, pc}
    473e:	1c5b      	adds	r3, r3, #1
    4740:	2b09      	cmp	r3, #9
    4742:	d3e4      	bcc.n	470e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4744:	2005      	movs	r0, #5
    4746:	bd70      	pop	{r4, r5, r6, pc}
    4748:	20000088 	.word	0x20000088

0000474c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    474c:	4802      	ldr	r0, [pc, #8]	; (4758 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    474e:	2100      	movs	r1, #0
    4750:	6001      	str	r1, [r0, #0]
    4752:	6041      	str	r1, [r0, #4]
    4754:	4770      	bx	lr
    4756:	0000      	.short	0x0000
    4758:	20000088 	.word	0x20000088

0000475c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    475c:	b510      	push	{r4, lr}
    475e:	4c08      	ldr	r4, [pc, #32]	; (4780 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4760:	7861      	ldrb	r1, [r4, #1]
    4762:	b109      	cbz	r1, 4768 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4764:	200f      	movs	r0, #15
    4766:	bd10      	pop	{r4, pc}
    4768:	f7ff f864 	bl	3834 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    476c:	7020      	strb	r0, [r4, #0]
    476e:	28ff      	cmp	r0, #255	; 0xff
    4770:	d001      	beq.n	4776 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4772:	2000      	movs	r0, #0
    4774:	bd10      	pop	{r4, pc}
    4776:	2176      	movs	r1, #118	; 0x76
    4778:	201f      	movs	r0, #31
    477a:	f7ff fa29 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    477e:	0000      	.short	0x0000
    4780:	20000090 	.word	0x20000090

00004784 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4784:	4901      	ldr	r1, [pc, #4]	; (478c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4786:	2000      	movs	r0, #0
    4788:	7048      	strb	r0, [r1, #1]
    478a:	4770      	bx	lr
    478c:	20000090 	.word	0x20000090

00004790 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4790:	4806      	ldr	r0, [pc, #24]	; (47ac <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4792:	4a07      	ldr	r2, [pc, #28]	; (47b0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4794:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4796:	8852      	ldrh	r2, [r2, #2]
    4798:	4291      	cmp	r1, r2
    479a:	d104      	bne.n	47a6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    479c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    47a0:	b108      	cbz	r0, 47a6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    47a2:	2000      	movs	r0, #0
    47a4:	4770      	bx	lr
    47a6:	2001      	movs	r0, #1
    47a8:	4770      	bx	lr
    47aa:	0000      	.short	0x0000
    47ac:	20000f56 	.word	0x20000f56
    47b0:	20000274 	.word	0x20000274

000047b4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    47b4:	4901      	ldr	r1, [pc, #4]	; (47bc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    47b6:	8048      	strh	r0, [r1, #2]
    47b8:	4770      	bx	lr
    47ba:	0000      	.short	0x0000
    47bc:	20000274 	.word	0x20000274

000047c0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    47c0:	4808      	ldr	r0, [pc, #32]	; (47e4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    47c2:	4a09      	ldr	r2, [pc, #36]	; (47e8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    47c4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    47c6:	8852      	ldrh	r2, [r2, #2]
    47c8:	4291      	cmp	r1, r2
    47ca:	d109      	bne.n	47e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    47cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    47d0:	8481      	strh	r1, [r0, #36]	; 0x24
    47d2:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    47d6:	b119      	cbz	r1, 47e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    47d8:	2100      	movs	r1, #0
    47da:	7001      	strb	r1, [r0, #0]
    47dc:	2001      	movs	r0, #1
    47de:	4770      	bx	lr
    47e0:	2000      	movs	r0, #0
    47e2:	4770      	bx	lr
    47e4:	20000f56 	.word	0x20000f56
    47e8:	20000274 	.word	0x20000274

000047ec <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    47ec:	4807      	ldr	r0, [pc, #28]	; (480c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    47ee:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    47f2:	2901      	cmp	r1, #1
    47f4:	d007      	beq.n	4806 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    47f6:	2101      	movs	r1, #1
    47f8:	7001      	strb	r1, [r0, #0]
    47fa:	4805      	ldr	r0, [pc, #20]	; (4810 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    47fc:	4903      	ldr	r1, [pc, #12]	; (480c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    47fe:	8800      	ldrh	r0, [r0, #0]
    4800:	8488      	strh	r0, [r1, #36]	; 0x24
    4802:	2001      	movs	r0, #1
    4804:	4770      	bx	lr
    4806:	2000      	movs	r0, #0
    4808:	4770      	bx	lr
    480a:	0000      	.short	0x0000
    480c:	20000f56 	.word	0x20000f56
    4810:	20000274 	.word	0x20000274

00004814 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4814:	4906      	ldr	r1, [pc, #24]	; (4830 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4816:	4b07      	ldr	r3, [pc, #28]	; (4834 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4818:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    481a:	885b      	ldrh	r3, [r3, #2]
    481c:	429a      	cmp	r2, r3
    481e:	d105      	bne.n	482c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4820:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4824:	b112      	cbz	r2, 482c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4826:	6001      	str	r1, [r0, #0]
    4828:	2001      	movs	r0, #1
    482a:	4770      	bx	lr
    482c:	2000      	movs	r0, #0
    482e:	4770      	bx	lr
    4830:	20000f56 	.word	0x20000f56
    4834:	20000274 	.word	0x20000274

00004838 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4838:	4909      	ldr	r1, [pc, #36]	; (4860 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    483a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    483c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4840:	3bff      	subs	r3, #255	; 0xff
    4842:	d002      	beq.n	484a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4844:	2100      	movs	r1, #0
    4846:	6001      	str	r1, [r0, #0]
    4848:	e007      	b.n	485a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    484a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    484e:	4904      	ldr	r1, [pc, #16]	; (4860 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4850:	2a01      	cmp	r2, #1
    4852:	d002      	beq.n	485a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4854:	6001      	str	r1, [r0, #0]
    4856:	2001      	movs	r0, #1
    4858:	4770      	bx	lr
    485a:	2000      	movs	r0, #0
    485c:	4770      	bx	lr
    485e:	0000      	.short	0x0000
    4860:	20000f56 	.word	0x20000f56

00004864 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4864:	4901      	ldr	r1, [pc, #4]	; (486c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4866:	8008      	strh	r0, [r1, #0]
    4868:	4770      	bx	lr
    486a:	0000      	.short	0x0000
    486c:	20000274 	.word	0x20000274

00004870 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4870:	4905      	ldr	r1, [pc, #20]	; (4888 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4872:	2000      	movs	r0, #0
    4874:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4878:	f64f 70ff 	movw	r0, #65535	; 0xffff
    487c:	8488      	strh	r0, [r1, #36]	; 0x24
    487e:	4903      	ldr	r1, [pc, #12]	; (488c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4880:	8008      	strh	r0, [r1, #0]
    4882:	8048      	strh	r0, [r1, #2]
    4884:	4770      	bx	lr
    4886:	0000      	.short	0x0000
    4888:	20000f56 	.word	0x20000f56
    488c:	20000274 	.word	0x20000274
    4890:	4905      	ldr	r1, [pc, #20]	; (48a8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4892:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4894:	4282      	cmp	r2, r0
    4896:	d105      	bne.n	48a4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4898:	2000      	movs	r0, #0
    489a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    489e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    48a2:	8488      	strh	r0, [r1, #36]	; 0x24
    48a4:	4770      	bx	lr
    48a6:	0000      	.short	0x0000
    48a8:	20000f56 	.word	0x20000f56

000048ac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    48ac:	4a0a      	ldr	r2, [pc, #40]	; (48d8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    48ae:	b110      	cbz	r0, 48b6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    48b0:	2801      	cmp	r0, #1
    48b2:	d007      	beq.n	48c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    48b4:	e00e      	b.n	48d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    48b6:	7850      	ldrb	r0, [r2, #1]
    48b8:	b160      	cbz	r0, 48d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    48ba:	f8d2 0002 	ldr.w	r0, [r2, #2]
    48be:	6008      	str	r0, [r1, #0]
    48c0:	88d0      	ldrh	r0, [r2, #6]
    48c2:	e004      	b.n	48ce <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    48c4:	7810      	ldrb	r0, [r2, #0]
    48c6:	b128      	cbz	r0, 48d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    48c8:	6890      	ldr	r0, [r2, #8]
    48ca:	6008      	str	r0, [r1, #0]
    48cc:	8990      	ldrh	r0, [r2, #12]
    48ce:	8088      	strh	r0, [r1, #4]
    48d0:	2001      	movs	r0, #1
    48d2:	4770      	bx	lr
    48d4:	2000      	movs	r0, #0
    48d6:	4770      	bx	lr
    48d8:	20000289 	.word	0x20000289

000048dc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    48dc:	4a08      	ldr	r2, [pc, #32]	; (4900 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    48de:	2301      	movs	r3, #1
    48e0:	b138      	cbz	r0, 48f2 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    48e2:	2801      	cmp	r0, #1
    48e4:	d104      	bne.n	48f0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    48e6:	7013      	strb	r3, [r2, #0]
    48e8:	6808      	ldr	r0, [r1, #0]
    48ea:	6090      	str	r0, [r2, #8]
    48ec:	8888      	ldrh	r0, [r1, #4]
    48ee:	8190      	strh	r0, [r2, #12]
    48f0:	4770      	bx	lr
    48f2:	7053      	strb	r3, [r2, #1]
    48f4:	6808      	ldr	r0, [r1, #0]
    48f6:	f8c2 0002 	str.w	r0, [r2, #2]
    48fa:	8888      	ldrh	r0, [r1, #4]
    48fc:	80d0      	strh	r0, [r2, #6]
    48fe:	4770      	bx	lr
    4900:	20000289 	.word	0x20000289

00004904 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4904:	4906      	ldr	r1, [pc, #24]	; (4920 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4906:	b110      	cbz	r0, 490e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4908:	2801      	cmp	r0, #1
    490a:	d002      	beq.n	4912 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    490c:	e005      	b.n	491a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    490e:	7848      	ldrb	r0, [r1, #1]
    4910:	e000      	b.n	4914 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4912:	7808      	ldrb	r0, [r1, #0]
    4914:	b108      	cbz	r0, 491a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4916:	2001      	movs	r0, #1
    4918:	4770      	bx	lr
    491a:	2000      	movs	r0, #0
    491c:	4770      	bx	lr
    491e:	0000      	.short	0x0000
    4920:	20000289 	.word	0x20000289

00004924 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4924:	4901      	ldr	r1, [pc, #4]	; (492c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4926:	7448      	strb	r0, [r1, #17]
    4928:	4770      	bx	lr
    492a:	0000      	.short	0x0000
    492c:	20000a02 	.word	0x20000a02

00004930 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4930:	4801      	ldr	r0, [pc, #4]	; (4938 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4932:	78c0      	ldrb	r0, [r0, #3]
    4934:	4770      	bx	lr
    4936:	0000      	.short	0x0000
    4938:	200000ac 	.word	0x200000ac

0000493c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    493c:	4801      	ldr	r0, [pc, #4]	; (4944 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    493e:	7900      	ldrb	r0, [r0, #4]
    4940:	4770      	bx	lr
    4942:	0000      	.short	0x0000
    4944:	200000ac 	.word	0x200000ac

00004948 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4948:	b578      	push	{r3, r4, r5, r6, lr}
    494a:	4913      	ldr	r1, [pc, #76]	; (4998 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    494c:	7c4a      	ldrb	r2, [r1, #17]
    494e:	b30a      	cbz	r2, 4994 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4950:	7c0a      	ldrb	r2, [r1, #16]
    4952:	f88d 2000 	strb.w	r2, [sp]
    4956:	9a00      	ldr	r2, [sp, #0]
    4958:	9200      	str	r2, [sp, #0]
    495a:	f89d 2000 	ldrb.w	r2, [sp]
    495e:	b1ca      	cbz	r2, 4994 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4960:	2300      	movs	r3, #0
    4962:	f101 0210 	add.w	r2, r1, #16
    4966:	241a      	movs	r4, #26
    4968:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    496c:	7c0e      	ldrb	r6, [r1, #16]
    496e:	f88d 6000 	strb.w	r6, [sp]
    4972:	9e00      	ldr	r6, [sp, #0]
    4974:	9600      	str	r6, [sp, #0]
    4976:	f89d 6000 	ldrb.w	r6, [sp]
    497a:	b14e      	cbz	r6, 4990 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    497c:	7013      	strb	r3, [r2, #0]
    497e:	7043      	strb	r3, [r0, #1]
    4980:	7004      	strb	r4, [r0, #0]
    4982:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4986:	6046      	str	r6, [r0, #4]
    4988:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    498c:	6086      	str	r6, [r0, #8]
    498e:	e7ed      	b.n	496c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4990:	2001      	movs	r0, #1
    4992:	bd78      	pop	{r3, r4, r5, r6, pc}
    4994:	2000      	movs	r0, #0
    4996:	bd78      	pop	{r3, r4, r5, r6, pc}
    4998:	20000a02 	.word	0x20000a02

0000499c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    499c:	b570      	push	{r4, r5, r6, lr}
    499e:	460c      	mov	r4, r1
    49a0:	4605      	mov	r5, r0
    49a2:	f000 f931 	bl	4c08 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    49a6:	b118      	cbz	r0, 49b0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    49a8:	21ab      	movs	r1, #171	; 0xab
    49aa:	2027      	movs	r0, #39	; 0x27
    49ac:	f7ff f910 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49b0:	4803      	ldr	r0, [pc, #12]	; (49c0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    49b2:	2101      	movs	r1, #1
    49b4:	f008 fd32 	bl	d41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    49b8:	4802      	ldr	r0, [pc, #8]	; (49c4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    49ba:	71c5      	strb	r5, [r0, #7]
    49bc:	62c4      	str	r4, [r0, #44]	; 0x2c
    49be:	bd70      	pop	{r4, r5, r6, pc}
    49c0:	200009e0 	.word	0x200009e0
    49c4:	200000ac 	.word	0x200000ac

000049c8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    49c8:	4901      	ldr	r1, [pc, #4]	; (49d0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    49ca:	2001      	movs	r0, #1
    49cc:	7188      	strb	r0, [r1, #6]
    49ce:	4770      	bx	lr
    49d0:	200000ac 	.word	0x200000ac

000049d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    49d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49d8:	4d4c      	ldr	r5, [pc, #304]	; (4b0c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x138>)
    49da:	b086      	sub	sp, #24
    49dc:	782e      	ldrb	r6, [r5, #0]
    49de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    49e0:	2e00      	cmp	r6, #0
    49e2:	d174      	bne.n	4ace <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    49e4:	2a00      	cmp	r2, #0
    49e6:	d072      	beq.n	4ace <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    49e8:	2b00      	cmp	r3, #0
    49ea:	d070      	beq.n	4ace <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    49ec:	2c00      	cmp	r4, #0
    49ee:	d06e      	beq.n	4ace <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    49f0:	f105 0714 	add.w	r7, r5, #20
    49f4:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    49f8:	e887 001c 	stmia.w	r7, {r2, r3, r4}
    49fc:	71ae      	strb	r6, [r5, #6]
    49fe:	716e      	strb	r6, [r5, #5]
    4a00:	70ee      	strb	r6, [r5, #3]
    4a02:	70ae      	strb	r6, [r5, #2]
    4a04:	712e      	strb	r6, [r5, #4]
    4a06:	81ae      	strh	r6, [r5, #12]
    4a08:	81ee      	strh	r6, [r5, #14]
    4a0a:	f000 f935 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4a0e:	4607      	mov	r7, r0
    4a10:	f000 f92c 	bl	4c6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4a14:	4604      	mov	r4, r0
    4a16:	f006 fa1b 	bl	ae50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4a1a:	f005 fef5 	bl	a808 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4a1e:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    4a22:	f006 fa9d 	bl	af60 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4a26:	f104 0016 	add.w	r0, r4, #22
    4a2a:	f006 fb87 	bl	b13c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4a2e:	f104 0012 	add.w	r0, r4, #18
    4a32:	f006 fb77 	bl	b124 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4a36:	7f38      	ldrb	r0, [r7, #28]
    4a38:	f006 fb9a 	bl	b170 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4a3c:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4a40:	6840      	ldr	r0, [r0, #4]
    4a42:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    4a46:	b108      	cbz	r0, 4a4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4a48:	f006 f952 	bl	acf0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4a4c:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4a50:	2001      	movs	r0, #1
    4a52:	f006 f87d 	bl	ab50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4a56:	2800      	cmp	r0, #0
    4a58:	d050      	beq.n	4afc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    4a5a:	46b0      	mov	r8, r6
    4a5c:	2001      	movs	r0, #1
    4a5e:	f006 f987 	bl	ad70 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4a62:	2214      	movs	r2, #20
    4a64:	492a      	ldr	r1, [pc, #168]	; (4b10 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13c>)
    4a66:	4668      	mov	r0, sp
    4a68:	f007 f889 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4a6c:	4668      	mov	r0, sp
    4a6e:	f006 f8eb 	bl	ac48 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4a72:	8820      	ldrh	r0, [r4, #0]
    4a74:	f7ff fcd2 	bl	441c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4a78:	6328      	str	r0, [r5, #48]	; 0x30
    4a7a:	8820      	ldrh	r0, [r4, #0]
    4a7c:	f7ff fcb8 	bl	43f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4a80:	6368      	str	r0, [r5, #52]	; 0x34
    4a82:	f107 0058 	add.w	r0, r7, #88	; 0x58
    4a86:	4e23      	ldr	r6, [pc, #140]	; (4b14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    4a88:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    4a8a:	f106 0c08 	add.w	ip, r6, #8
    4a8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    4a92:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4a94:	f8c6 0021 	str.w	r0, [r6, #33]	; 0x21
    4a98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    4a9a:	f8c6 0025 	str.w	r0, [r6, #37]	; 0x25
    4a9e:	20ff      	movs	r0, #255	; 0xff
    4aa0:	7268      	strb	r0, [r5, #9]
    4aa2:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    4aa4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    4aa6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    4aaa:	7cf8      	ldrb	r0, [r7, #19]
    4aac:	f008 f942 	bl	cd34 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4ab0:	7cf9      	ldrb	r1, [r7, #19]
    4ab2:	b101      	cbz	r1, 4ab6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe2>
    4ab4:	2104      	movs	r1, #4
    4ab6:	4408      	add	r0, r1
    4ab8:	b2c0      	uxtb	r0, r0
    4aba:	7228      	strb	r0, [r5, #8]
    4abc:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    4ac0:	1d09      	adds	r1, r1, #4
    4ac2:	4281      	cmp	r1, r0
    4ac4:	d205      	bcs.n	4ad2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4ac6:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    4aca:	e01c      	b.n	4b06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    4acc:	e7ff      	b.n	4ace <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4ace:	21d4      	movs	r1, #212	; 0xd4
    4ad0:	e019      	b.n	4b06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    4ad2:	4645      	mov	r5, r8
    4ad4:	2001      	movs	r0, #1
    4ad6:	f000 fb49 	bl	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    4ada:	480f      	ldr	r0, [pc, #60]	; (4b18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>)
    4adc:	6800      	ldr	r0, [r0, #0]
    4ade:	2803      	cmp	r0, #3
    4ae0:	d00f      	beq.n	4b02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    4ae2:	280b      	cmp	r0, #11
    4ae4:	d00d      	beq.n	4b02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    4ae6:	f846 5f52 	str.w	r5, [r6, #82]!
    4aea:	6075      	str	r5, [r6, #4]
    4aec:	4809      	ldr	r0, [pc, #36]	; (4b14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    4aee:	88b9      	ldrh	r1, [r7, #4]
    4af0:	3052      	adds	r0, #82	; 0x52
    4af2:	8041      	strh	r1, [r0, #2]
    4af4:	8821      	ldrh	r1, [r4, #0]
    4af6:	8001      	strh	r1, [r0, #0]
    4af8:	7f39      	ldrb	r1, [r7, #28]
    4afa:	7101      	strb	r1, [r0, #4]
    4afc:	b006      	add	sp, #24
    4afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b02:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    4b06:	2027      	movs	r0, #39	; 0x27
    4b08:	f7ff f862 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b0c:	200000ac 	.word	0x200000ac
    4b10:	000053b8 	.word	0x000053b8
    4b14:	200009b0 	.word	0x200009b0
    4b18:	40001550 	.word	0x40001550

00004b1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b20:	4606      	mov	r6, r0
    4b22:	f000 f8a9 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4b26:	4d33      	ldr	r5, [pc, #204]	; (4bf4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4b28:	4604      	mov	r4, r0
    4b2a:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4b2c:	7847      	ldrb	r7, [r0, #1]
    4b2e:	b10e      	cbz	r6, 4b34 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4b30:	2e01      	cmp	r6, #1
    4b32:	d103      	bne.n	4b3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4b34:	6b69      	ldr	r1, [r5, #52]	; 0x34
    4b36:	f007 f98d 	bl	be54 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4b3a:	7068      	strb	r0, [r5, #1]
    4b3c:	7868      	ldrb	r0, [r5, #1]
    4b3e:	f04f 0800 	mov.w	r8, #0
    4b42:	f04f 0901 	mov.w	r9, #1
    4b46:	b150      	cbz	r0, 4b5e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4b48:	2801      	cmp	r0, #1
    4b4a:	d01a      	beq.n	4b82 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4b4c:	2802      	cmp	r0, #2
    4b4e:	d034      	beq.n	4bba <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4b50:	2803      	cmp	r0, #3
    4b52:	d049      	beq.n	4be8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xcc>
    4b54:	f240 31cd 	movw	r1, #973	; 0x3cd
    4b58:	2027      	movs	r0, #39	; 0x27
    4b5a:	f7ff f839 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b5e:	2e01      	cmp	r6, #1
    4b60:	d032      	beq.n	4bc8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4b62:	f000 f8f3 	bl	4d4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4b66:	4639      	mov	r1, r7
    4b68:	2201      	movs	r2, #1
    4b6a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4b6c:	f007 fd96 	bl	c69c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4b70:	e028      	b.n	4bc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4b72:	bf00      	nop
    4b74:	f884 8008 	strb.w	r8, [r4, #8]
    4b78:	e031      	b.n	4bde <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4b7a:	bf00      	nop
    4b7c:	f884 9008 	strb.w	r9, [r4, #8]
    4b80:	e02d      	b.n	4bde <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4b82:	2e01      	cmp	r6, #1
    4b84:	d008      	beq.n	4b98 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4b86:	f000 f8e1 	bl	4d4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4b8a:	4639      	mov	r1, r7
    4b8c:	2200      	movs	r2, #0
    4b8e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4b90:	f007 fd84 	bl	c69c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4b94:	2e02      	cmp	r6, #2
    4b96:	d00b      	beq.n	4bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4b98:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    4b9c:	1c40      	adds	r0, r0, #1
    4b9e:	f141 0100 	adc.w	r1, r1, #0
    4ba2:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    4ba6:	7a20      	ldrb	r0, [r4, #8]
    4ba8:	2801      	cmp	r0, #1
    4baa:	d003      	beq.n	4bb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4bac:	f884 9008 	strb.w	r9, [r4, #8]
    4bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bb4:	f884 8008 	strb.w	r8, [r4, #8]
    4bb8:	e7fa      	b.n	4bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4bba:	2e01      	cmp	r6, #1
    4bbc:	d004      	beq.n	4bc8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4bbe:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4bc0:	f007 ff72 	bl	caa8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4bc4:	2e02      	cmp	r6, #2
    4bc6:	d0f3      	beq.n	4bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4bc8:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    4bcc:	1c40      	adds	r0, r0, #1
    4bce:	f141 0100 	adc.w	r1, r1, #0
    4bd2:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    4bd6:	7a20      	ldrb	r0, [r4, #8]
    4bd8:	2801      	cmp	r0, #1
    4bda:	d1cf      	bne.n	4b7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4bdc:	e7ca      	b.n	4b74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4bde:	79e8      	ldrb	r0, [r5, #7]
    4be0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4be4:	f7fe be44 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4be8:	2e01      	cmp	r6, #1
    4bea:	d0e1      	beq.n	4bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4bec:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4bee:	f007 ff5b 	bl	caa8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4bf2:	e7f4      	b.n	4bde <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4bf4:	200000ac 	.word	0x200000ac

00004bf8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4bf8:	4802      	ldr	r0, [pc, #8]	; (4c04 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4bfa:	89c0      	ldrh	r0, [r0, #14]
    4bfc:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4c00:	4770      	bx	lr
    4c02:	0000      	.short	0x0000
    4c04:	200000ac 	.word	0x200000ac

00004c08 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4c08:	4804      	ldr	r0, [pc, #16]	; (4c1c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4c0a:	7800      	ldrb	r0, [r0, #0]
    4c0c:	b108      	cbz	r0, 4c12 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4c0e:	200c      	movs	r0, #12
    4c10:	4770      	bx	lr
    4c12:	4903      	ldr	r1, [pc, #12]	; (4c20 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4c14:	2000      	movs	r0, #0
    4c16:	7448      	strb	r0, [r1, #17]
    4c18:	4770      	bx	lr
    4c1a:	0000      	.short	0x0000
    4c1c:	200000ac 	.word	0x200000ac
    4c20:	20000a02 	.word	0x20000a02

00004c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4c24:	480c      	ldr	r0, [pc, #48]	; (4c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4c26:	b510      	push	{r4, lr}
    4c28:	7801      	ldrb	r1, [r0, #0]
    4c2a:	b149      	cbz	r1, 4c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4c2c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4c30:	7800      	ldrb	r0, [r0, #0]
    4c32:	2802      	cmp	r0, #2
    4c34:	d008      	beq.n	4c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4c36:	f44f 71cb 	mov.w	r1, #406	; 0x196
    4c3a:	2027      	movs	r0, #39	; 0x27
    4c3c:	f7fe ffc8 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c44:	f000 b9a8 	b.w	4f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    4c48:	6848      	ldr	r0, [r1, #4]
    4c4a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c52:	f006 b801 	b.w	ac58 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4c56:	0000      	.short	0x0000
    4c58:	200000ac 	.word	0x200000ac
    4c5c:	4a02      	ldr	r2, [pc, #8]	; (4c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4c5e:	8993      	ldrh	r3, [r2, #12]
    4c60:	4303      	orrs	r3, r0
    4c62:	8193      	strh	r3, [r2, #12]
    4c64:	6952      	ldr	r2, [r2, #20]
    4c66:	4710      	bx	r2
    4c68:	200000ac 	.word	0x200000ac
    4c6c:	4801      	ldr	r0, [pc, #4]	; (4c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4c6e:	6840      	ldr	r0, [r0, #4]
    4c70:	4770      	bx	lr
    4c72:	0000      	.short	0x0000
    4c74:	200000e4 	.word	0x200000e4
    4c78:	4801      	ldr	r0, [pc, #4]	; (4c80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4c7a:	6840      	ldr	r0, [r0, #4]
    4c7c:	3070      	adds	r0, #112	; 0x70
    4c7e:	4770      	bx	lr
    4c80:	200000e4 	.word	0x200000e4
    4c84:	4a01      	ldr	r2, [pc, #4]	; (4c8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4c86:	2100      	movs	r1, #0
    4c88:	6952      	ldr	r2, [r2, #20]
    4c8a:	4710      	bx	r2
    4c8c:	200000ac 	.word	0x200000ac
    4c90:	b570      	push	{r4, r5, r6, lr}
    4c92:	f7ff fff1 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4c96:	4604      	mov	r4, r0
    4c98:	f7ff ffe8 	bl	4c6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4c9c:	4605      	mov	r5, r0
    4c9e:	4621      	mov	r1, r4
    4ca0:	f008 f9dd 	bl	d05e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4ca4:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    4ca8:	2901      	cmp	r1, #1
    4caa:	d117      	bne.n	4cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    4cac:	2800      	cmp	r0, #0
    4cae:	d015      	beq.n	4cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    4cb0:	480b      	ldr	r0, [pc, #44]	; (4ce0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    4cb2:	6842      	ldr	r2, [r0, #4]
    4cb4:	8828      	ldrh	r0, [r5, #0]
    4cb6:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    4cba:	7a60      	ldrb	r0, [r4, #9]
    4cbc:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    4cc0:	7aa0      	ldrb	r0, [r4, #10]
    4cc2:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    4cc6:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    4cca:	2001      	movs	r0, #1
    4ccc:	7010      	strb	r0, [r2, #0]
    4cce:	4804      	ldr	r0, [pc, #16]	; (4ce0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    4cd0:	3838      	subs	r0, #56	; 0x38
    4cd2:	79c0      	ldrb	r0, [r0, #7]
    4cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4cd8:	f7fe bdca 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4cdc:	bd70      	pop	{r4, r5, r6, pc}
    4cde:	0000      	.short	0x0000
    4ce0:	200000e4 	.word	0x200000e4
    4ce4:	b570      	push	{r4, r5, r6, lr}
    4ce6:	4c18      	ldr	r4, [pc, #96]	; (4d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    4ce8:	4605      	mov	r5, r0
    4cea:	b939      	cbnz	r1, 4cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    4cec:	2d01      	cmp	r5, #1
    4cee:	d105      	bne.n	4cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    4cf0:	78e0      	ldrb	r0, [r4, #3]
    4cf2:	1c40      	adds	r0, r0, #1
    4cf4:	b2c0      	uxtb	r0, r0
    4cf6:	70e0      	strb	r0, [r4, #3]
    4cf8:	2801      	cmp	r0, #1
    4cfa:	d818      	bhi.n	4d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4cfc:	69a1      	ldr	r1, [r4, #24]
    4cfe:	4628      	mov	r0, r5
    4d00:	4788      	blx	r1
    4d02:	b1a0      	cbz	r0, 4d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4d04:	7960      	ldrb	r0, [r4, #5]
    4d06:	b990      	cbnz	r0, 4d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4d08:	b9e5      	cbnz	r5, 4d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4d0a:	480f      	ldr	r0, [pc, #60]	; (4d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    4d0c:	3010      	adds	r0, #16
    4d0e:	7801      	ldrb	r1, [r0, #0]
    4d10:	06c8      	lsls	r0, r1, #27
    4d12:	d405      	bmi.n	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    4d14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4d16:	7800      	ldrb	r0, [r0, #0]
    4d18:	06c0      	lsls	r0, r0, #27
    4d1a:	d401      	bmi.n	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    4d1c:	2001      	movs	r0, #1
    4d1e:	e000      	b.n	4d22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4d20:	2000      	movs	r0, #0
    4d22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4d24:	b92a      	cbnz	r2, 4d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4d26:	8962      	ldrh	r2, [r4, #10]
    4d28:	b11a      	cbz	r2, 4d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4d2a:	06c9      	lsls	r1, r1, #27
    4d2c:	d401      	bmi.n	4d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4d2e:	2001      	movs	r0, #1
    4d30:	bd70      	pop	{r4, r5, r6, pc}
    4d32:	89a1      	ldrh	r1, [r4, #12]
    4d34:	078a      	lsls	r2, r1, #30
    4d36:	d503      	bpl.n	4d40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    4d38:	6a22      	ldr	r2, [r4, #32]
    4d3a:	78d2      	ldrb	r2, [r2, #3]
    4d3c:	2a02      	cmp	r2, #2
    4d3e:	d001      	beq.n	4d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4d40:	4308      	orrs	r0, r1
    4d42:	d1f4      	bne.n	4d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4d44:	2000      	movs	r0, #0
    4d46:	bd70      	pop	{r4, r5, r6, pc}
    4d48:	200000ac 	.word	0x200000ac
    4d4c:	b510      	push	{r4, lr}
    4d4e:	4c08      	ldr	r4, [pc, #32]	; (4d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>)
    4d50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4d52:	b138      	cbz	r0, 4d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x140>
    4d54:	8962      	ldrh	r2, [r4, #10]
    4d56:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4d58:	1cd2      	adds	r2, r2, #3
    4d5a:	f006 ff10 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4d5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4d60:	6260      	str	r0, [r4, #36]	; 0x24
    4d62:	bd10      	pop	{r4, pc}
    4d64:	f240 4114 	movw	r1, #1044	; 0x414
    4d68:	2027      	movs	r0, #39	; 0x27
    4d6a:	f7fe ff31 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d6e:	0000      	.short	0x0000
    4d70:	200000ac 	.word	0x200000ac
    4d74:	b510      	push	{r4, lr}
    4d76:	f7ff ff79 	bl	4c6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4d7a:	4604      	mov	r4, r0
    4d7c:	f7ff ff7c 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d80:	4601      	mov	r1, r0
    4d82:	7b42      	ldrb	r2, [r0, #13]
    4d84:	4815      	ldr	r0, [pc, #84]	; (4ddc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b8>)
    4d86:	2a24      	cmp	r2, #36	; 0x24
    4d88:	d00e      	beq.n	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    4d8a:	7b89      	ldrb	r1, [r1, #14]
    4d8c:	2924      	cmp	r1, #36	; 0x24
    4d8e:	d00b      	beq.n	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    4d90:	2a1f      	cmp	r2, #31
    4d92:	d00d      	beq.n	4db0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4d94:	2a20      	cmp	r2, #32
    4d96:	d00b      	beq.n	4db0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4d98:	2922      	cmp	r1, #34	; 0x22
    4d9a:	d00f      	beq.n	4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    4d9c:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    4da0:	2804      	cmp	r0, #4
    4da2:	d100      	bne.n	4da6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x182>
    4da4:	2008      	movs	r0, #8
    4da6:	bd10      	pop	{r4, pc}
    4da8:	6840      	ldr	r0, [r0, #4]
    4daa:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    4dae:	e00e      	b.n	4dce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    4db0:	2922      	cmp	r1, #34	; 0x22
    4db2:	d003      	beq.n	4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    4db4:	6840      	ldr	r0, [r0, #4]
    4db6:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    4dba:	e005      	b.n	4dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    4dbc:	6841      	ldr	r1, [r0, #4]
    4dbe:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    4dc2:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    4dc6:	4008      	ands	r0, r1
    4dc8:	f007 ff9c 	bl	cd04 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4dcc:	4601      	mov	r1, r0
    4dce:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    4dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dd6:	f007 bfc0 	b.w	cd5a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x5a>
    4dda:	0000      	.short	0x0000
    4ddc:	200000e4 	.word	0x200000e4
    4de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4de4:	4688      	mov	r8, r1
    4de6:	4606      	mov	r6, r0
    4de8:	f7ff ff46 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4dec:	4c45      	ldr	r4, [pc, #276]	; (4f04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    4dee:	2700      	movs	r7, #0
    4df0:	4605      	mov	r5, r0
    4df2:	f88d 7000 	strb.w	r7, [sp]
    4df6:	7820      	ldrb	r0, [r4, #0]
    4df8:	2802      	cmp	r0, #2
    4dfa:	d004      	beq.n	4e06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    4dfc:	f240 4166 	movw	r1, #1126	; 0x466
    4e00:	2027      	movs	r0, #39	; 0x27
    4e02:	f7fe fee5 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e06:	7ba0      	ldrb	r0, [r4, #14]
    4e08:	0640      	lsls	r0, r0, #25
    4e0a:	d406      	bmi.n	4e1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    4e0c:	2040      	movs	r0, #64	; 0x40
    4e0e:	f7ff ff39 	bl	4c84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4e12:	89e0      	ldrh	r0, [r4, #14]
    4e14:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4e18:	81e0      	strh	r0, [r4, #14]
    4e1a:	483b      	ldr	r0, [pc, #236]	; (4f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>)
    4e1c:	b3ee      	cbz	r6, 4e9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x276>
    4e1e:	7941      	ldrb	r1, [r0, #5]
    4e20:	1c49      	adds	r1, r1, #1
    4e22:	7141      	strb	r1, [r0, #5]
    4e24:	7ce8      	ldrb	r0, [r5, #19]
    4e26:	f005 fd67 	bl	a8f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4e2a:	f005 fd4b 	bl	a8c4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4e2e:	b968      	cbnz	r0, 4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4e30:	7ce8      	ldrb	r0, [r5, #19]
    4e32:	b158      	cbz	r0, 4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4e34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4e36:	7841      	ldrb	r1, [r0, #1]
    4e38:	b141      	cbz	r1, 4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4e3a:	7800      	ldrb	r0, [r0, #0]
    4e3c:	7a29      	ldrb	r1, [r5, #8]
    4e3e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4e42:	4288      	cmp	r0, r1
    4e44:	d102      	bne.n	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4e46:	2001      	movs	r0, #1
    4e48:	70a0      	strb	r0, [r4, #2]
    4e4a:	e043      	b.n	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    4e4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4e4e:	7841      	ldrb	r1, [r0, #1]
    4e50:	8161      	strh	r1, [r4, #10]
    4e52:	b121      	cbz	r1, 4e5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    4e54:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4e56:	f007 fdf4 	bl	ca42 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4e5a:	62a0      	str	r0, [r4, #40]	; 0x28
    4e5c:	e000      	b.n	4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    4e5e:	62a7      	str	r7, [r4, #40]	; 0x28
    4e60:	89e0      	ldrh	r0, [r4, #14]
    4e62:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4e66:	81e0      	strh	r0, [r4, #14]
    4e68:	70e7      	strb	r7, [r4, #3]
    4e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4e6c:	79e9      	ldrb	r1, [r5, #7]
    4e6e:	7800      	ldrb	r0, [r0, #0]
    4e70:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4e74:	4288      	cmp	r0, r1
    4e76:	d005      	beq.n	4e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    4e78:	f000 f92a 	bl	50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ac>
    4e7c:	89e0      	ldrh	r0, [r4, #14]
    4e7e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4e82:	81e0      	strh	r0, [r4, #14]
    4e84:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4e86:	7a29      	ldrb	r1, [r5, #8]
    4e88:	7800      	ldrb	r0, [r0, #0]
    4e8a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4e8e:	4288      	cmp	r0, r1
    4e90:	d10f      	bne.n	4eb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    4e92:	4668      	mov	r0, sp
    4e94:	f000 f8d8 	bl	5048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    4e98:	e00b      	b.n	4eb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    4e9a:	e7ff      	b.n	4e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    4e9c:	7981      	ldrb	r1, [r0, #6]
    4e9e:	1c49      	adds	r1, r1, #1
    4ea0:	7181      	strb	r1, [r0, #6]
    4ea2:	7ce8      	ldrb	r0, [r5, #19]
    4ea4:	b108      	cbz	r0, 4eaa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    4ea6:	f005 fd21 	bl	a8ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    4eaa:	89e0      	ldrh	r0, [r4, #14]
    4eac:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    4eb0:	81e0      	strh	r0, [r4, #14]
    4eb2:	f1b8 0f00 	cmp.w	r8, #0
    4eb6:	d104      	bne.n	4ec2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    4eb8:	4631      	mov	r1, r6
    4eba:	2001      	movs	r0, #1
    4ebc:	f7ff ff12 	bl	4ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    4ec0:	b160      	cbz	r0, 4edc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    4ec2:	f89d 0000 	ldrb.w	r0, [sp]
    4ec6:	b110      	cbz	r0, 4ece <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    4ec8:	2000      	movs	r0, #0
    4eca:	f7ff fe27 	bl	4b1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4ece:	b10e      	cbz	r6, 4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    4ed0:	f7ff fede 	bl	4c90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4ed4:	f000 f860 	bl	4f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    4ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4edc:	f89d 0000 	ldrb.w	r0, [sp]
    4ee0:	b110      	cbz	r0, 4ee8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    4ee2:	2001      	movs	r0, #1
    4ee4:	f7ff fe1a 	bl	4b1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4ee8:	2000      	movs	r0, #0
    4eea:	f000 f991 	bl	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    4eee:	f89d 0000 	ldrb.w	r0, [sp]
    4ef2:	b110      	cbz	r0, 4efa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d6>
    4ef4:	2002      	movs	r0, #2
    4ef6:	f7ff fe11 	bl	4b1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4efa:	2e00      	cmp	r6, #0
    4efc:	d0ec      	beq.n	4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    4efe:	f7ff fec7 	bl	4c90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f02:	e7e9      	b.n	4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    4f04:	200000ac 	.word	0x200000ac
    4f08:	20000a02 	.word	0x20000a02
    4f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f10:	460e      	mov	r6, r1
    4f12:	4680      	mov	r8, r0
    4f14:	f7ff feb0 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f18:	4d1e      	ldr	r5, [pc, #120]	; (4f94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>)
    4f1a:	4604      	mov	r4, r0
    4f1c:	7828      	ldrb	r0, [r5, #0]
    4f1e:	2801      	cmp	r0, #1
    4f20:	d004      	beq.n	4f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    4f22:	f240 4123 	movw	r1, #1059	; 0x423
    4f26:	2027      	movs	r0, #39	; 0x27
    4f28:	f7fe fe52 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f2c:	7860      	ldrb	r0, [r4, #1]
    4f2e:	2701      	movs	r7, #1
    4f30:	b130      	cbz	r0, 4f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    4f32:	2000      	movs	r0, #0
    4f34:	7060      	strb	r0, [r4, #1]
    4f36:	4601      	mov	r1, r0
    4f38:	2004      	movs	r0, #4
    4f3a:	f7ff fe8f 	bl	4c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    4f3e:	70e7      	strb	r7, [r4, #3]
    4f40:	6a29      	ldr	r1, [r5, #32]
    4f42:	7808      	ldrb	r0, [r1, #0]
    4f44:	43c0      	mvns	r0, r0
    4f46:	0780      	lsls	r0, r0, #30
    4f48:	d109      	bne.n	4f5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33a>
    4f4a:	79a0      	ldrb	r0, [r4, #6]
    4f4c:	b9d0      	cbnz	r0, 4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    4f4e:	2002      	movs	r0, #2
    4f50:	f7ff fe84 	bl	4c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    4f54:	6a28      	ldr	r0, [r5, #32]
    4f56:	7800      	ldrb	r0, [r0, #0]
    4f58:	43c0      	mvns	r0, r0
    4f5a:	0780      	lsls	r0, r0, #30
    4f5c:	d012      	beq.n	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    4f5e:	6a28      	ldr	r0, [r5, #32]
    4f60:	7840      	ldrb	r0, [r0, #1]
    4f62:	b110      	cbz	r0, 4f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    4f64:	2002      	movs	r0, #2
    4f66:	71a0      	strb	r0, [r4, #6]
    4f68:	e000      	b.n	4f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x348>
    4f6a:	71a7      	strb	r7, [r4, #6]
    4f6c:	ea36 0608 	bics.w	r6, r6, r8
    4f70:	d004      	beq.n	4f7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    4f72:	2101      	movs	r1, #1
    4f74:	2000      	movs	r0, #0
    4f76:	f7ff feb5 	bl	4ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    4f7a:	b128      	cbz	r0, 4f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    4f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f80:	f000 b80a 	b.w	4f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    4f84:	2003      	movs	r0, #3
    4f86:	e7ee      	b.n	4f66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    4f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f8c:	2000      	movs	r0, #0
    4f8e:	f000 b8ed 	b.w	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    4f92:	0000      	.short	0x0000
    4f94:	200000ac 	.word	0x200000ac
    4f98:	b510      	push	{r4, lr}
    4f9a:	f005 fd45 	bl	aa28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4f9e:	f005 fc33 	bl	a808 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4fa2:	4c0d      	ldr	r4, [pc, #52]	; (4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    4fa4:	89e0      	ldrh	r0, [r4, #14]
    4fa6:	f7ff fe6d 	bl	4c84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4faa:	69e2      	ldr	r2, [r4, #28]
    4fac:	7961      	ldrb	r1, [r4, #5]
    4fae:	78a0      	ldrb	r0, [r4, #2]
    4fb0:	4790      	blx	r2
    4fb2:	480a      	ldr	r0, [pc, #40]	; (4fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    4fb4:	7c40      	ldrb	r0, [r0, #17]
    4fb6:	b160      	cbz	r0, 4fd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ae>
    4fb8:	4808      	ldr	r0, [pc, #32]	; (4fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    4fba:	3852      	subs	r0, #82	; 0x52
    4fbc:	f850 1f52 	ldr.w	r1, [r0, #82]!
    4fc0:	6081      	str	r1, [r0, #8]
    4fc2:	6841      	ldr	r1, [r0, #4]
    4fc4:	60c1      	str	r1, [r0, #12]
    4fc6:	4805      	ldr	r0, [pc, #20]	; (4fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    4fc8:	2101      	movs	r1, #1
    4fca:	7401      	strb	r1, [r0, #16]
    4fcc:	79e0      	ldrb	r0, [r4, #7]
    4fce:	f7fe fc4f 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4fd2:	2000      	movs	r0, #0
    4fd4:	7020      	strb	r0, [r4, #0]
    4fd6:	bd10      	pop	{r4, pc}
    4fd8:	200000ac 	.word	0x200000ac
    4fdc:	20000a02 	.word	0x20000a02
    4fe0:	4808      	ldr	r0, [pc, #32]	; (5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    4fe2:	b510      	push	{r4, lr}
    4fe4:	7800      	ldrb	r0, [r0, #0]
    4fe6:	2802      	cmp	r0, #2
    4fe8:	d004      	beq.n	4ff4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>
    4fea:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    4fee:	2027      	movs	r0, #39	; 0x27
    4ff0:	f7fe fdee 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ff4:	4904      	ldr	r1, [pc, #16]	; (5008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>)
    4ff6:	2001      	movs	r0, #1
    4ff8:	71c8      	strb	r0, [r1, #7]
    4ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ffe:	f7ff bfcb 	b.w	4f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5002:	0000      	.short	0x0000
    5004:	200000ac 	.word	0x200000ac
    5008:	20000a02 	.word	0x20000a02
    500c:	b430      	push	{r4, r5}
    500e:	4b0d      	ldr	r3, [pc, #52]	; (5044 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    5010:	b94a      	cbnz	r2, 5026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    5012:	7a1a      	ldrb	r2, [r3, #8]
    5014:	7a5c      	ldrb	r4, [r3, #9]
    5016:	42a2      	cmp	r2, r4
    5018:	d105      	bne.n	5026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    501a:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    501e:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
    5022:	42a2      	cmp	r2, r4
    5024:	d00b      	beq.n	503e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41a>
    5026:	b131      	cbz	r1, 5036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x412>
    5028:	7a1a      	ldrb	r2, [r3, #8]
    502a:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    502e:	bc30      	pop	{r4, r5}
    5030:	4610      	mov	r0, r2
    5032:	f006 b88b 	b.w	b14c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5036:	7a5a      	ldrb	r2, [r3, #9]
    5038:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    503c:	e7f7      	b.n	502e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    503e:	bc30      	pop	{r4, r5}
    5040:	4770      	bx	lr
    5042:	0000      	.short	0x0000
    5044:	200000ac 	.word	0x200000ac
    5048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    504c:	4607      	mov	r7, r0
    504e:	f7ff fe13 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5052:	4604      	mov	r4, r0
    5054:	481d      	ldr	r0, [pc, #116]	; (50cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a8>)
    5056:	2600      	movs	r6, #0
    5058:	2501      	movs	r5, #1
    505a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    505c:	780a      	ldrb	r2, [r1, #0]
    505e:	f002 0203 	and.w	r2, r2, #3
    5062:	2a01      	cmp	r2, #1
    5064:	d015      	beq.n	5092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    5066:	2a02      	cmp	r2, #2
    5068:	d013      	beq.n	5092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    506a:	2a03      	cmp	r2, #3
    506c:	d003      	beq.n	5076 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x452>
    506e:	7941      	ldrb	r1, [r0, #5]
    5070:	f041 0104 	orr.w	r1, r1, #4
    5074:	e024      	b.n	50c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x49c>
    5076:	7065      	strb	r5, [r4, #1]
    5078:	89c2      	ldrh	r2, [r0, #14]
    507a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    507e:	81c2      	strh	r2, [r0, #14]
    5080:	2001      	movs	r0, #1
    5082:	f7ff fdeb 	bl	4c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5086:	e01d      	b.n	50c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    5088:	7226      	strb	r6, [r4, #8]
    508a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    508e:	7225      	strb	r5, [r4, #8]
    5090:	e7fb      	b.n	508a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5092:	7849      	ldrb	r1, [r1, #1]
    5094:	b1b1      	cbz	r1, 50c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    5096:	89c2      	ldrh	r2, [r0, #14]
    5098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    509c:	81c2      	strh	r2, [r0, #14]
    509e:	6a82      	ldr	r2, [r0, #40]	; 0x28
    50a0:	2a00      	cmp	r2, #0
    50a2:	d0f2      	beq.n	508a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    50a4:	29fb      	cmp	r1, #251	; 0xfb
    50a6:	d808      	bhi.n	50ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x496>
    50a8:	7980      	ldrb	r0, [r0, #6]
    50aa:	b120      	cbz	r0, 50b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x492>
    50ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    50b0:	2020      	movs	r0, #32
    50b2:	f7ff bde7 	b.w	4c84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    50b6:	703d      	strb	r5, [r7, #0]
    50b8:	e7e7      	b.n	508a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    50ba:	7941      	ldrb	r1, [r0, #5]
    50bc:	f041 0110 	orr.w	r1, r1, #16
    50c0:	7141      	strb	r1, [r0, #5]
    50c2:	e7e2      	b.n	508a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    50c4:	7a20      	ldrb	r0, [r4, #8]
    50c6:	2801      	cmp	r0, #1
    50c8:	d1e1      	bne.n	508e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46a>
    50ca:	e7dd      	b.n	5088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    50cc:	200000ac 	.word	0x200000ac
    50d0:	b570      	push	{r4, r5, r6, lr}
    50d2:	f7ff fdd1 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    50d6:	4604      	mov	r4, r0
    50d8:	7980      	ldrb	r0, [r0, #6]
    50da:	2800      	cmp	r0, #0
    50dc:	d02f      	beq.n	513e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51a>
    50de:	2802      	cmp	r0, #2
    50e0:	d10e      	bne.n	5100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    50e2:	4d1c      	ldr	r5, [pc, #112]	; (5154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x530>)
    50e4:	6b28      	ldr	r0, [r5, #48]	; 0x30
    50e6:	f007 fab2 	bl	c64e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    50ea:	b348      	cbz	r0, 5140 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    50ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    50f0:	1c40      	adds	r0, r0, #1
    50f2:	f141 0100 	adc.w	r1, r1, #0
    50f6:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    50fa:	79e8      	ldrb	r0, [r5, #7]
    50fc:	f7fe fbb8 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5100:	2500      	movs	r5, #0
    5102:	71a5      	strb	r5, [r4, #6]
    5104:	78e0      	ldrb	r0, [r4, #3]
    5106:	b120      	cbz	r0, 5112 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ee>
    5108:	70e5      	strb	r5, [r4, #3]
    510a:	2100      	movs	r1, #0
    510c:	2010      	movs	r0, #16
    510e:	f7ff fda5 	bl	4c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5112:	78a0      	ldrb	r0, [r4, #2]
    5114:	b170      	cbz	r0, 5134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    5116:	70a5      	strb	r5, [r4, #2]
    5118:	f7ff fb52 	bl	47c0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    511c:	b198      	cbz	r0, 5146 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    511e:	2100      	movs	r1, #0
    5120:	2008      	movs	r0, #8
    5122:	f7ff fd9b 	bl	4c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    512a:	1c40      	adds	r0, r0, #1
    512c:	f141 0100 	adc.w	r1, r1, #0
    5130:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    5134:	79e0      	ldrb	r0, [r4, #7]
    5136:	2801      	cmp	r0, #1
    5138:	d00a      	beq.n	5150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    513a:	2001      	movs	r0, #1
    513c:	71e0      	strb	r0, [r4, #7]
    513e:	bd70      	pop	{r4, r5, r6, pc}
    5140:	f44f 715a 	mov.w	r1, #872	; 0x368
    5144:	e001      	b.n	514a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x526>
    5146:	f44f 7160 	mov.w	r1, #896	; 0x380
    514a:	2027      	movs	r0, #39	; 0x27
    514c:	f7fe fd40 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5150:	71e5      	strb	r5, [r4, #7]
    5152:	bd70      	pop	{r4, r5, r6, pc}
    5154:	200000ac 	.word	0x200000ac
    5158:	4803      	ldr	r0, [pc, #12]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>)
    515a:	7800      	ldrb	r0, [r0, #0]
    515c:	2800      	cmp	r0, #0
    515e:	d001      	beq.n	5164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5160:	f7ff bf1a 	b.w	4f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5164:	4770      	bx	lr
    5166:	0000      	.short	0x0000
    5168:	200000ac 	.word	0x200000ac
    516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5170:	4681      	mov	r9, r0
    5172:	f7ff fd7b 	bl	4c6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5176:	4604      	mov	r4, r0
    5178:	f7ff fd7e 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    517c:	4607      	mov	r7, r0
    517e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    5180:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    5182:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    5186:	7cc0      	ldrb	r0, [r0, #19]
    5188:	f007 fdd4 	bl	cd34 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    518c:	4d1d      	ldr	r5, [pc, #116]	; (5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    518e:	4606      	mov	r6, r0
    5190:	464a      	mov	r2, r9
    5192:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5194:	6268      	str	r0, [r5, #36]	; 0x24
    5196:	2101      	movs	r1, #1
    5198:	4620      	mov	r0, r4
    519a:	f7ff ff37 	bl	500c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    519e:	7cf8      	ldrb	r0, [r7, #19]
    51a0:	f04f 0800 	mov.w	r8, #0
    51a4:	b1b8      	cbz	r0, 51d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    51a6:	4818      	ldr	r0, [pc, #96]	; (5208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    51a8:	f005 fee0 	bl	af6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    51ac:	4817      	ldr	r0, [pc, #92]	; (520c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>)
    51ae:	2101      	movs	r1, #1
    51b0:	7601      	strb	r1, [r0, #24]
    51b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    51b6:	e9c0 1204 	strd	r1, r2, [r0, #16]
    51ba:	4a13      	ldr	r2, [pc, #76]	; (5208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    51bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    51be:	f005 fb13 	bl	a7e8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    51c2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    51c6:	f007 fda7 	bl	cd18 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    51ca:	4602      	mov	r2, r0
    51cc:	4631      	mov	r1, r6
    51ce:	2001      	movs	r0, #1
    51d0:	f005 fb38 	bl	a844 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    51d4:	e004      	b.n	51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5bc>
    51d6:	6a68      	ldr	r0, [r5, #36]	; 0x24
    51d8:	f005 fec8 	bl	af6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    51dc:	f005 fb14 	bl	a808 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    51e0:	f1b9 0f00 	cmp.w	r9, #0
    51e4:	d102      	bne.n	51ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>
    51e6:	4640      	mov	r0, r8
    51e8:	f005 fd5a 	bl	aca0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    51ec:	2100      	movs	r1, #0
    51ee:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    51f2:	2201      	movs	r2, #1
    51f4:	4608      	mov	r0, r1
    51f6:	f005 ff43 	bl	b080 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    51fa:	2002      	movs	r0, #2
    51fc:	7028      	strb	r0, [r5, #0]
    51fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5202:	0000      	.short	0x0000
    5204:	200000ac 	.word	0x200000ac
    5208:	200008b0 	.word	0x200008b0
    520c:	200009b8 	.word	0x200009b8
    5210:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5214:	4604      	mov	r4, r0
    5216:	f7ff fd2f 	bl	4c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    521a:	4606      	mov	r6, r0
    521c:	f7ff fd26 	bl	4c6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5220:	4605      	mov	r5, r0
    5222:	f8df 9188 	ldr.w	r9, [pc, #392]	; 53ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x788>
    5226:	4622      	mov	r2, r4
    5228:	2100      	movs	r1, #0
    522a:	f7ff feef 	bl	500c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    522e:	79b0      	ldrb	r0, [r6, #6]
    5230:	2701      	movs	r7, #1
    5232:	f04f 0800 	mov.w	r8, #0
    5236:	f1a9 0420 	sub.w	r4, r9, #32
    523a:	b140      	cbz	r0, 524e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62a>
    523c:	2801      	cmp	r0, #1
    523e:	d028      	beq.n	5292 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
    5240:	2802      	cmp	r0, #2
    5242:	d039      	beq.n	52b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x694>
    5244:	2803      	cmp	r0, #3
    5246:	d045      	beq.n	52d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b0>
    5248:	f44f 711d 	mov.w	r1, #628	; 0x274
    524c:	e061      	b.n	5312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    524e:	f7ff fd91 	bl	4d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    5252:	4601      	mov	r1, r0
    5254:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    5256:	f007 fe6c 	bl	cf32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    525a:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    525c:	4281      	cmp	r1, r0
    525e:	d200      	bcs.n	5262 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x63e>
    5260:	4608      	mov	r0, r1
    5262:	214c      	movs	r1, #76	; 0x4c
    5264:	f8ad 0004 	strh.w	r0, [sp, #4]
    5268:	5348      	strh	r0, [r1, r5]
    526a:	4648      	mov	r0, r9
    526c:	f7ff fad2 	bl	4814 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5270:	b128      	cbz	r0, 527e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65a>
    5272:	2080      	movs	r0, #128	; 0x80
    5274:	6a21      	ldr	r1, [r4, #32]
    5276:	f7ff fcf1 	bl	4c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    527a:	70b7      	strb	r7, [r6, #2]
    527c:	e02e      	b.n	52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    527e:	466a      	mov	r2, sp
    5280:	a901      	add	r1, sp, #4
    5282:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5284:	f007 fd73 	bl	cd6e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    5288:	6220      	str	r0, [r4, #32]
    528a:	b110      	cbz	r0, 5292 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
    528c:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
    5290:	b111      	cbz	r1, 5298 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x674>
    5292:	4847      	ldr	r0, [pc, #284]	; (53b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78c>)
    5294:	6220      	str	r0, [r4, #32]
    5296:	e021      	b.n	52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5298:	f89d 1000 	ldrb.w	r1, [sp]
    529c:	b931      	cbnz	r1, 52ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x688>
    529e:	f8a0 8000 	strh.w	r8, [r0]
    52a2:	f880 8002 	strb.w	r8, [r0, #2]
    52a6:	2101      	movs	r1, #1
    52a8:	f008 f8b8 	bl	d41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    52ac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    52b0:	6a20      	ldr	r0, [r4, #32]
    52b2:	f008 f877 	bl	d3a4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    52b6:	e011      	b.n	52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    52b8:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    52bc:	f8ad 0004 	strh.w	r0, [sp, #4]
    52c0:	466a      	mov	r2, sp
    52c2:	a901      	add	r1, sp, #4
    52c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    52c6:	f007 fd52 	bl	cd6e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    52ca:	6220      	str	r0, [r4, #32]
    52cc:	b930      	cbnz	r0, 52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    52ce:	f240 2165 	movw	r1, #613	; 0x265
    52d2:	e01e      	b.n	5312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    52d4:	4648      	mov	r0, r9
    52d6:	f7ff fa9d 	bl	4814 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    52da:	b1c0      	cbz	r0, 530e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ea>
    52dc:	6a20      	ldr	r0, [r4, #32]
    52de:	2308      	movs	r3, #8
    52e0:	7801      	ldrb	r1, [r0, #0]
    52e2:	f021 0108 	bic.w	r1, r1, #8
    52e6:	7001      	strb	r1, [r0, #0]
    52e8:	79f2      	ldrb	r2, [r6, #7]
    52ea:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    52ee:	4311      	orrs	r1, r2
    52f0:	f021 0104 	bic.w	r1, r1, #4
    52f4:	7001      	strb	r1, [r0, #0]
    52f6:	7a32      	ldrb	r2, [r6, #8]
    52f8:	2304      	movs	r3, #4
    52fa:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    52fe:	4311      	orrs	r1, r2
    5300:	f021 0110 	bic.w	r1, r1, #16
    5304:	7001      	strb	r1, [r0, #0]
    5306:	43c9      	mvns	r1, r1
    5308:	0789      	lsls	r1, r1, #30
    530a:	d005      	beq.n	5318 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    530c:	e007      	b.n	531e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    530e:	f240 216e 	movw	r1, #622	; 0x26e
    5312:	2027      	movs	r0, #39	; 0x27
    5314:	f7fe fc5c 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5318:	78c0      	ldrb	r0, [r0, #3]
    531a:	2802      	cmp	r0, #2
    531c:	d00f      	beq.n	533e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    531e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5320:	f007 faba 	bl	c898 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5324:	b108      	cbz	r0, 532a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5326:	2101      	movs	r1, #1
    5328:	e00a      	b.n	5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    532a:	6a20      	ldr	r0, [r4, #32]
    532c:	7800      	ldrb	r0, [r0, #0]
    532e:	43c0      	mvns	r0, r0
    5330:	0780      	lsls	r0, r0, #30
    5332:	d004      	beq.n	533e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    5334:	f7ff fa2c 	bl	4790 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5338:	f080 0101 	eor.w	r1, r0, #1
    533c:	e000      	b.n	5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    533e:	2100      	movs	r1, #0
    5340:	6a20      	ldr	r0, [r4, #32]
    5342:	7802      	ldrb	r2, [r0, #0]
    5344:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5348:	7001      	strb	r1, [r0, #0]
    534a:	7cb1      	ldrb	r1, [r6, #18]
    534c:	b1d1      	cbz	r1, 5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    534e:	7841      	ldrb	r1, [r0, #1]
    5350:	b1c1      	cbz	r1, 5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5352:	4818      	ldr	r0, [pc, #96]	; (53b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>)
    5354:	f005 fe0a 	bl	af6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5358:	4815      	ldr	r0, [pc, #84]	; (53b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78c>)
    535a:	3828      	subs	r0, #40	; 0x28
    535c:	f880 8018 	strb.w	r8, [r0, #24]
    5360:	e9d6 1212 	ldrd	r1, r2, [r6, #72]	; 0x48
    5364:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5368:	4912      	ldr	r1, [pc, #72]	; (53b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>)
    536a:	6a22      	ldr	r2, [r4, #32]
    536c:	f005 fa3c 	bl	a7e8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5370:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    5374:	f007 fcd0 	bl	cd18 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5378:	4602      	mov	r2, r0
    537a:	21fb      	movs	r1, #251	; 0xfb
    537c:	2000      	movs	r0, #0
    537e:	f005 fa61 	bl	a844 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5382:	e003      	b.n	538c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    5384:	f005 fdf2 	bl	af6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5388:	f005 fa3e 	bl	a808 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    538c:	2201      	movs	r2, #1
    538e:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    5392:	4611      	mov	r1, r2
    5394:	2000      	movs	r0, #0
    5396:	f005 fe73 	bl	b080 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    539a:	7127      	strb	r7, [r4, #4]
    539c:	6a20      	ldr	r0, [r4, #32]
    539e:	8801      	ldrh	r1, [r0, #0]
    53a0:	8221      	strh	r1, [r4, #16]
    53a2:	7880      	ldrb	r0, [r0, #2]
    53a4:	74a0      	strb	r0, [r4, #18]
    53a6:	7027      	strb	r7, [r4, #0]
    53a8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    53ac:	200000cc 	.word	0x200000cc
    53b0:	200009e0 	.word	0x200009e0
    53b4:	200008b0 	.word	0x200008b0
    53b8:	00004fe1 	.word	0x00004fe1
    53bc:	00004de1 	.word	0x00004de1
    53c0:	00004f0d 	.word	0x00004f0d
    53c4:	00005159 	.word	0x00005159
    53c8:	00006fb5 	.word	0x00006fb5

000053cc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    53cc:	4800      	ldr	r0, [pc, #0]	; (53d0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    53ce:	4770      	bx	lr
    53d0:	200011bd 	.word	0x200011bd

000053d4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    53d4:	4904      	ldr	r1, [pc, #16]	; (53e8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    53d6:	788a      	ldrb	r2, [r1, #2]
    53d8:	4282      	cmp	r2, r0
    53da:	d903      	bls.n	53e4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    53dc:	4408      	add	r0, r1
    53de:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    53e2:	4770      	bx	lr
    53e4:	2000      	movs	r0, #0
    53e6:	4770      	bx	lr
    53e8:	20000fea 	.word	0x20000fea

000053ec <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    53ec:	4904      	ldr	r1, [pc, #16]	; (5400 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    53ee:	788a      	ldrb	r2, [r1, #2]
    53f0:	4282      	cmp	r2, r0
    53f2:	d903      	bls.n	53fc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    53f4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    53f8:	3083      	adds	r0, #131	; 0x83
    53fa:	4770      	bx	lr
    53fc:	2000      	movs	r0, #0
    53fe:	4770      	bx	lr
    5400:	20000fea 	.word	0x20000fea

00005404 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5404:	4a05      	ldr	r2, [pc, #20]	; (541c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5406:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    540a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    540e:	6802      	ldr	r2, [r0, #0]
    5410:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5414:	8880      	ldrh	r0, [r0, #4]
    5416:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    541a:	4770      	bx	lr
    541c:	20000fea 	.word	0x20000fea

00005420 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5424:	460e      	mov	r6, r1
    5426:	4607      	mov	r7, r0
    5428:	4615      	mov	r5, r2
    542a:	2106      	movs	r1, #6
    542c:	4630      	mov	r0, r6
    542e:	f007 fe9f 	bl	d170 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5432:	4c0d      	ldr	r4, [pc, #52]	; (5468 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5434:	b160      	cbz	r0, 5450 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    5436:	2000      	movs	r0, #0
    5438:	e004      	b.n	5444 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    543a:	1821      	adds	r1, r4, r0
    543c:	1c40      	adds	r0, r0, #1
    543e:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5442:	b2c0      	uxtb	r0, r0
    5444:	78a1      	ldrb	r1, [r4, #2]
    5446:	4281      	cmp	r1, r0
    5448:	d8f7      	bhi.n	543a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    544a:	2001      	movs	r0, #1
    544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5450:	4631      	mov	r1, r6
    5452:	4638      	mov	r0, r7
    5454:	f007 fc9a 	bl	cd8c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5458:	2808      	cmp	r0, #8
    545a:	d003      	beq.n	5464 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    545c:	4420      	add	r0, r4
    545e:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5462:	e7f2      	b.n	544a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5464:	2000      	movs	r0, #0
    5466:	e7f1      	b.n	544c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5468:	20000fea 	.word	0x20000fea

0000546c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    546c:	4904      	ldr	r1, [pc, #16]	; (5480 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    546e:	788a      	ldrb	r2, [r1, #2]
    5470:	4282      	cmp	r2, r0
    5472:	d903      	bls.n	547c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5474:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5478:	1cc0      	adds	r0, r0, #3
    547a:	4770      	bx	lr
    547c:	2000      	movs	r0, #0
    547e:	4770      	bx	lr
    5480:	20000fea 	.word	0x20000fea

00005484 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5484:	b510      	push	{r4, lr}
    5486:	f240 12d3 	movw	r2, #467	; 0x1d3
    548a:	2100      	movs	r1, #0
    548c:	4808      	ldr	r0, [pc, #32]	; (54b0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    548e:	f006 fbf0 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5492:	2208      	movs	r2, #8
    5494:	21ff      	movs	r1, #255	; 0xff
    5496:	4807      	ldr	r0, [pc, #28]	; (54b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5498:	f006 fbeb 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    549c:	4805      	ldr	r0, [pc, #20]	; (54b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    549e:	2100      	movs	r1, #0
    54a0:	1f00      	subs	r0, r0, #4
    54a2:	7001      	strb	r1, [r0, #0]
    54a4:	7041      	strb	r1, [r0, #1]
    54a6:	f44f 7161 	mov.w	r1, #900	; 0x384
    54aa:	8041      	strh	r1, [r0, #2]
    54ac:	bd10      	pop	{r4, pc}
    54ae:	0000      	.short	0x0000
    54b0:	20000fea 	.word	0x20000fea
    54b4:	2000027c 	.word	0x2000027c

000054b8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    54b8:	4901      	ldr	r1, [pc, #4]	; (54c0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    54ba:	7008      	strb	r0, [r1, #0]
    54bc:	4770      	bx	lr
    54be:	0000      	.short	0x0000
    54c0:	20000278 	.word	0x20000278

000054c4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    54c4:	4801      	ldr	r0, [pc, #4]	; (54cc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    54c6:	7800      	ldrb	r0, [r0, #0]
    54c8:	4770      	bx	lr
    54ca:	0000      	.short	0x0000
    54cc:	20000278 	.word	0x20000278

000054d0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    54d0:	4b0b      	ldr	r3, [pc, #44]	; (5500 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    54d2:	b510      	push	{r4, lr}
    54d4:	789c      	ldrb	r4, [r3, #2]
    54d6:	4284      	cmp	r4, r0
    54d8:	d90f      	bls.n	54fa <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    54da:	4418      	add	r0, r3
    54dc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    54e0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    54e4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    54e8:	700b      	strb	r3, [r1, #0]
    54ea:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    54ee:	6011      	str	r1, [r2, #0]
    54f0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    54f4:	8090      	strh	r0, [r2, #4]
    54f6:	2001      	movs	r0, #1
    54f8:	bd10      	pop	{r4, pc}
    54fa:	2000      	movs	r0, #0
    54fc:	bd10      	pop	{r4, pc}
    54fe:	0000      	.short	0x0000
    5500:	20000fea 	.word	0x20000fea

00005504 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5504:	4907      	ldr	r1, [pc, #28]	; (5524 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5506:	788a      	ldrb	r2, [r1, #2]
    5508:	4282      	cmp	r2, r0
    550a:	d909      	bls.n	5520 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    550c:	4408      	add	r0, r1
    550e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5512:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5516:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    551a:	f000 0001 	and.w	r0, r0, #1
    551e:	4770      	bx	lr
    5520:	2000      	movs	r0, #0
    5522:	4770      	bx	lr
    5524:	20000fea 	.word	0x20000fea

00005528 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    552c:	4698      	mov	r8, r3
    552e:	4691      	mov	r9, r2
    5530:	460c      	mov	r4, r1
    5532:	4605      	mov	r5, r0
    5534:	f000 f938 	bl	57a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    5538:	4606      	mov	r6, r0
    553a:	2810      	cmp	r0, #16
    553c:	d006      	beq.n	554c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    553e:	f000 f903 	bl	5748 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5542:	2810      	cmp	r0, #16
    5544:	d002      	beq.n	554c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5546:	2012      	movs	r0, #18
    5548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    554c:	4f18      	ldr	r7, [pc, #96]	; (55b0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    554e:	78b8      	ldrb	r0, [r7, #2]
    5550:	2808      	cmp	r0, #8
    5552:	d22a      	bcs.n	55aa <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5554:	2e10      	cmp	r6, #16
    5556:	d105      	bne.n	5564 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5558:	2200      	movs	r2, #0
    555a:	4621      	mov	r1, r4
    555c:	4628      	mov	r0, r5
    555e:	f000 f907 	bl	5770 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    5562:	4606      	mov	r6, r0
    5564:	78bc      	ldrb	r4, [r7, #2]
    5566:	2210      	movs	r2, #16
    5568:	1c60      	adds	r0, r4, #1
    556a:	70b8      	strb	r0, [r7, #2]
    556c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5570:	1ce8      	adds	r0, r5, #3
    5572:	4649      	mov	r1, r9
    5574:	f007 fd66 	bl	d044 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5578:	f105 0083 	add.w	r0, r5, #131	; 0x83
    557c:	2210      	movs	r2, #16
    557e:	4641      	mov	r1, r8
    5580:	f007 fd60 	bl	d044 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5584:	2110      	movs	r1, #16
    5586:	4640      	mov	r0, r8
    5588:	f007 fdf2 	bl	d170 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    558c:	443c      	add	r4, r7
    558e:	2110      	movs	r1, #16
    5590:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5594:	4648      	mov	r0, r9
    5596:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    559a:	f007 fde9 	bl	d170 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    559e:	77e0      	strb	r0, [r4, #31]
    55a0:	f804 6c29 	strb.w	r6, [r4, #-41]
    55a4:	2000      	movs	r0, #0
    55a6:	73e0      	strb	r0, [r4, #15]
    55a8:	e7ce      	b.n	5548 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    55aa:	2007      	movs	r0, #7
    55ac:	e7cc      	b.n	5548 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    55ae:	0000      	.short	0x0000
    55b0:	20000fea 	.word	0x20000fea

000055b4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    55b4:	4806      	ldr	r0, [pc, #24]	; (55d0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    55b6:	b510      	push	{r4, lr}
    55b8:	7880      	ldrb	r0, [r0, #2]
    55ba:	1e40      	subs	r0, r0, #1
    55bc:	b244      	sxtb	r4, r0
    55be:	e004      	b.n	55ca <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    55c0:	b2e0      	uxtb	r0, r4
    55c2:	f000 f939 	bl	5838 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    55c6:	1e64      	subs	r4, r4, #1
    55c8:	b264      	sxtb	r4, r4
    55ca:	2c00      	cmp	r4, #0
    55cc:	daf8      	bge.n	55c0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    55ce:	bd10      	pop	{r4, pc}
    55d0:	20000fea 	.word	0x20000fea

000055d4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    55d4:	4801      	ldr	r0, [pc, #4]	; (55dc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    55d6:	8840      	ldrh	r0, [r0, #2]
    55d8:	4770      	bx	lr
    55da:	0000      	.short	0x0000
    55dc:	20000278 	.word	0x20000278

000055e0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    55e0:	b138      	cbz	r0, 55f2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    55e2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    55e6:	4288      	cmp	r0, r1
    55e8:	d803      	bhi.n	55f2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    55ea:	4903      	ldr	r1, [pc, #12]	; (55f8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    55ec:	8048      	strh	r0, [r1, #2]
    55ee:	2001      	movs	r0, #1
    55f0:	4770      	bx	lr
    55f2:	2000      	movs	r0, #0
    55f4:	4770      	bx	lr
    55f6:	0000      	.short	0x0000
    55f8:	20000278 	.word	0x20000278

000055fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    55fc:	4905      	ldr	r1, [pc, #20]	; (5614 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    55fe:	788a      	ldrb	r2, [r1, #2]
    5600:	4282      	cmp	r2, r0
    5602:	d903      	bls.n	560c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5604:	4408      	add	r0, r1
    5606:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    560a:	b108      	cbz	r0, 5610 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    560c:	2000      	movs	r0, #0
    560e:	4770      	bx	lr
    5610:	2001      	movs	r0, #1
    5612:	4770      	bx	lr
    5614:	20000fea 	.word	0x20000fea

00005618 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5618:	b570      	push	{r4, r5, r6, lr}
    561a:	460d      	mov	r5, r1
    561c:	4606      	mov	r6, r0
    561e:	f000 f8c3 	bl	57a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    5622:	4c10      	ldr	r4, [pc, #64]	; (5664 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5624:	2810      	cmp	r0, #16
    5626:	d007      	beq.n	5638 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5628:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    562c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5630:	07c9      	lsls	r1, r1, #31
    5632:	d001      	beq.n	5638 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5634:	2001      	movs	r0, #1
    5636:	bd70      	pop	{r4, r5, r6, pc}
    5638:	7861      	ldrb	r1, [r4, #1]
    563a:	2908      	cmp	r1, #8
    563c:	d210      	bcs.n	5660 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    563e:	2810      	cmp	r0, #16
    5640:	d008      	beq.n	5654 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5642:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5646:	2101      	movs	r1, #1
    5648:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    564c:	7860      	ldrb	r0, [r4, #1]
    564e:	1c40      	adds	r0, r0, #1
    5650:	7060      	strb	r0, [r4, #1]
    5652:	e7ef      	b.n	5634 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5654:	2201      	movs	r2, #1
    5656:	4629      	mov	r1, r5
    5658:	4630      	mov	r0, r6
    565a:	f000 f889 	bl	5770 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    565e:	e7f5      	b.n	564c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5660:	2000      	movs	r0, #0
    5662:	bd70      	pop	{r4, r5, r6, pc}
    5664:	20000fea 	.word	0x20000fea

00005668 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5668:	b570      	push	{r4, r5, r6, lr}
    566a:	4d0b      	ldr	r5, [pc, #44]	; (5698 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    566c:	7828      	ldrb	r0, [r5, #0]
    566e:	1e40      	subs	r0, r0, #1
    5670:	b244      	sxtb	r4, r0
    5672:	e00a      	b.n	568a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5674:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5678:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    567c:	07c0      	lsls	r0, r0, #31
    567e:	d002      	beq.n	5686 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5680:	b2e0      	uxtb	r0, r4
    5682:	f000 f921 	bl	58c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    5686:	1e64      	subs	r4, r4, #1
    5688:	b264      	sxtb	r4, r4
    568a:	2c00      	cmp	r4, #0
    568c:	daf2      	bge.n	5674 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    568e:	4903      	ldr	r1, [pc, #12]	; (569c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5690:	2000      	movs	r0, #0
    5692:	7048      	strb	r0, [r1, #1]
    5694:	bd70      	pop	{r4, r5, r6, pc}
    5696:	0000      	.short	0x0000
    5698:	20000fea 	.word	0x20000fea
    569c:	20000278 	.word	0x20000278

000056a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    56a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56a4:	2400      	movs	r4, #0
    56a6:	4625      	mov	r5, r4
    56a8:	4e18      	ldr	r6, [pc, #96]	; (570c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    56aa:	e029      	b.n	5700 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    56ac:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    56b0:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    56b4:	07c0      	lsls	r0, r0, #31
    56b6:	d021      	beq.n	56fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    56b8:	4628      	mov	r0, r5
    56ba:	f000 f845 	bl	5748 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    56be:	4603      	mov	r3, r0
    56c0:	f7ff fed4 	bl	546c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    56c4:	4601      	mov	r1, r0
    56c6:	2000      	movs	r0, #0
    56c8:	2b10      	cmp	r3, #16
    56ca:	d009      	beq.n	56e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    56cc:	18f2      	adds	r2, r6, r3
    56ce:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    56d2:	f1bc 0f01 	cmp.w	ip, #1
    56d6:	d002      	beq.n	56de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    56d8:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    56dc:	b102      	cbz	r2, 56e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    56de:	2001      	movs	r0, #1
    56e0:	1e40      	subs	r0, r0, #1
    56e2:	4201      	tst	r1, r0
    56e4:	d10a      	bne.n	56fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    56e6:	480a      	ldr	r0, [pc, #40]	; (5710 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    56e8:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    56ec:	5503      	strb	r3, [r0, r4]
    56ee:	4620      	mov	r0, r4
    56f0:	1c64      	adds	r4, r4, #1
    56f2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    56f6:	b2e4      	uxtb	r4, r4
    56f8:	f005 fe38 	bl	b36c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    56fc:	1c6d      	adds	r5, r5, #1
    56fe:	b2ed      	uxtb	r5, r5
    5700:	7830      	ldrb	r0, [r6, #0]
    5702:	42a8      	cmp	r0, r5
    5704:	d8d2      	bhi.n	56ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    570a:	0000      	.short	0x0000
    570c:	20000fea 	.word	0x20000fea
    5710:	2000027c 	.word	0x2000027c
    5714:	b570      	push	{r4, r5, r6, lr}
    5716:	4b0a      	ldr	r3, [pc, #40]	; (5740 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5718:	781b      	ldrb	r3, [r3, #0]
    571a:	b173      	cbz	r3, 573a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    571c:	4b09      	ldr	r3, [pc, #36]	; (5744 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    571e:	789c      	ldrb	r4, [r3, #2]
    5720:	b15c      	cbz	r4, 573a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    5722:	1845      	adds	r5, r0, r1
    5724:	4621      	mov	r1, r4
    5726:	b10a      	cbz	r2, 572c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5728:	1cd8      	adds	r0, r3, #3
    572a:	e001      	b.n	5730 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    572c:	4805      	ldr	r0, [pc, #20]	; (5744 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    572e:	3083      	adds	r0, #131	; 0x83
    5730:	462a      	mov	r2, r5
    5732:	f004 ff7b 	bl	a62c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5736:	2001      	movs	r0, #1
    5738:	bd70      	pop	{r4, r5, r6, pc}
    573a:	2000      	movs	r0, #0
    573c:	bd70      	pop	{r4, r5, r6, pc}
    573e:	0000      	.short	0x0000
    5740:	20000278 	.word	0x20000278
    5744:	20000fea 	.word	0x20000fea
    5748:	4908      	ldr	r1, [pc, #32]	; (576c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    574a:	b510      	push	{r4, lr}
    574c:	4603      	mov	r3, r0
    574e:	2000      	movs	r0, #0
    5750:	788a      	ldrb	r2, [r1, #2]
    5752:	e006      	b.n	5762 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    5754:	180c      	adds	r4, r1, r0
    5756:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    575a:	429c      	cmp	r4, r3
    575c:	d004      	beq.n	5768 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    575e:	1c40      	adds	r0, r0, #1
    5760:	b2c0      	uxtb	r0, r0
    5762:	4282      	cmp	r2, r0
    5764:	d8f6      	bhi.n	5754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    5766:	2010      	movs	r0, #16
    5768:	bd10      	pop	{r4, pc}
    576a:	0000      	.short	0x0000
    576c:	20000fea 	.word	0x20000fea
    5770:	b570      	push	{r4, r5, r6, lr}
    5772:	4b0c      	ldr	r3, [pc, #48]	; (57a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    5774:	4604      	mov	r4, r0
    5776:	7818      	ldrb	r0, [r3, #0]
    5778:	1c45      	adds	r5, r0, #1
    577a:	701d      	strb	r5, [r3, #0]
    577c:	2810      	cmp	r0, #16
    577e:	d303      	bcc.n	5788 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    5780:	2146      	movs	r1, #70	; 0x46
    5782:	2028      	movs	r0, #40	; 0x28
    5784:	f7fe fa24 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5788:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    578c:	680d      	ldr	r5, [r1, #0]
    578e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5792:	8889      	ldrh	r1, [r1, #4]
    5794:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5798:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    579c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    57a0:	bd70      	pop	{r4, r5, r6, pc}
    57a2:	0000      	.short	0x0000
    57a4:	20000fea 	.word	0x20000fea
    57a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57ac:	460f      	mov	r7, r1
    57ae:	4606      	mov	r6, r0
    57b0:	2400      	movs	r4, #0
    57b2:	4d0d      	ldr	r5, [pc, #52]	; (57e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    57b4:	e00f      	b.n	57d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    57b6:	bf00      	nop
    57b8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    57bc:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    57c0:	42b1      	cmp	r1, r6
    57c2:	d106      	bne.n	57d2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    57c4:	2206      	movs	r2, #6
    57c6:	4639      	mov	r1, r7
    57c8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    57cc:	f006 f9c5 	bl	bb5a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    57d0:	b138      	cbz	r0, 57e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    57d2:	1c64      	adds	r4, r4, #1
    57d4:	b2e4      	uxtb	r4, r4
    57d6:	7828      	ldrb	r0, [r5, #0]
    57d8:	42a0      	cmp	r0, r4
    57da:	d8ed      	bhi.n	57b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    57dc:	2010      	movs	r0, #16
    57de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57e2:	4620      	mov	r0, r4
    57e4:	e7fb      	b.n	57de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    57e6:	0000      	.short	0x0000
    57e8:	20000fea 	.word	0x20000fea
    57ec:	b570      	push	{r4, r5, r6, lr}
    57ee:	4605      	mov	r5, r0
    57f0:	f7ff ffaa 	bl	5748 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    57f4:	2810      	cmp	r0, #16
    57f6:	d11c      	bne.n	5832 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    57f8:	4c0e      	ldr	r4, [pc, #56]	; (5834 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    57fa:	7820      	ldrb	r0, [r4, #0]
    57fc:	1e40      	subs	r0, r0, #1
    57fe:	b2c0      	uxtb	r0, r0
    5800:	7020      	strb	r0, [r4, #0]
    5802:	42a8      	cmp	r0, r5
    5804:	d015      	beq.n	5832 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5806:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    580a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    580e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5812:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5816:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    581a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    581e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5822:	7820      	ldrb	r0, [r4, #0]
    5824:	f7ff ff90 	bl	5748 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5828:	2810      	cmp	r0, #16
    582a:	d002      	beq.n	5832 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    582c:	4420      	add	r0, r4
    582e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5832:	bd70      	pop	{r4, r5, r6, pc}
    5834:	20000fea 	.word	0x20000fea
    5838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    583c:	4c21      	ldr	r4, [pc, #132]	; (58c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    583e:	4606      	mov	r6, r0
    5840:	19a7      	adds	r7, r4, r6
    5842:	78a0      	ldrb	r0, [r4, #2]
    5844:	1e40      	subs	r0, r0, #1
    5846:	b2c5      	uxtb	r5, r0
    5848:	70a5      	strb	r5, [r4, #2]
    584a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    584e:	42ae      	cmp	r6, r5
    5850:	d02a      	beq.n	58a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    5852:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5856:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    585a:	f10a 0103 	add.w	r1, sl, #3
    585e:	f109 0003 	add.w	r0, r9, #3
    5862:	2210      	movs	r2, #16
    5864:	f006 f98b 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5868:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    586c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5870:	2210      	movs	r2, #16
    5872:	f006 f984 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5876:	1960      	adds	r0, r4, r5
    5878:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    587c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5880:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5884:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5888:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    588c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5890:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5894:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5898:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    589c:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    58a0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    58a4:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    58a8:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    58ac:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    58b0:	07c0      	lsls	r0, r0, #31
    58b2:	d104      	bne.n	58be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    58b4:	4640      	mov	r0, r8
    58b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58ba:	f7ff bf97 	b.w	57ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    58be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58c2:	0000      	.short	0x0000
    58c4:	20000fea 	.word	0x20000fea
    58c8:	4905      	ldr	r1, [pc, #20]	; (58e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    58ca:	784a      	ldrb	r2, [r1, #1]
    58cc:	1e52      	subs	r2, r2, #1
    58ce:	704a      	strb	r2, [r1, #1]
    58d0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    58d4:	2200      	movs	r2, #0
    58d6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    58da:	f7ff bf87 	b.w	57ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    58de:	0000      	.short	0x0000
    58e0:	20000fea 	.word	0x20000fea

000058e4 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    58e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    58e6:	f06f 021f 	mvn.w	r2, #31
    58ea:	0c01      	lsrs	r1, r0, #16
    58ec:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    58f0:	251f      	movs	r5, #31
    58f2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    58f6:	3854      	subs	r0, #84	; 0x54
    58f8:	d00d      	beq.n	5916 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    58fa:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    58fe:	3855      	subs	r0, #85	; 0x55
    5900:	d009      	beq.n	5916 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5902:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5906:	38aa      	subs	r0, #170	; 0xaa
    5908:	d005      	beq.n	5916 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    590a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    590e:	38aa      	subs	r0, #170	; 0xaa
    5910:	d001      	beq.n	5916 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5912:	2001      	movs	r0, #1
    5914:	e000      	b.n	5918 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    5916:	2000      	movs	r0, #0
    5918:	2200      	movs	r2, #0
    591a:	4613      	mov	r3, r2
    591c:	ea4f 0402 	mov.w	r4, r2
    5920:	ea82 0701 	eor.w	r7, r2, r1
    5924:	43ff      	mvns	r7, r7
    5926:	431f      	orrs	r7, r3
    5928:	1c7f      	adds	r7, r7, #1
    592a:	d00f      	beq.n	594c <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    592c:	f006 0701 	and.w	r7, r6, #1
    5930:	0852      	lsrs	r2, r2, #1
    5932:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    5936:	f005 0701 	and.w	r7, r5, #1
    593a:	085b      	lsrs	r3, r3, #1
    593c:	0876      	lsrs	r6, r6, #1
    593e:	086d      	lsrs	r5, r5, #1
    5940:	1c64      	adds	r4, r4, #1
    5942:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    5946:	2c16      	cmp	r4, #22
    5948:	d3ea      	bcc.n	5920 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    594a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    594c:	2000      	movs	r0, #0
    594e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005950 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5954:	4604      	mov	r4, r0
    5956:	2601      	movs	r6, #1
    5958:	f100 0570 	add.w	r5, r0, #112	; 0x70
    595c:	b159      	cbz	r1, 5976 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x26>
    595e:	2901      	cmp	r1, #1
    5960:	d020      	beq.n	59a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x54>
    5962:	2902      	cmp	r1, #2
    5964:	d045      	beq.n	59f2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa2>
    5966:	2903      	cmp	r1, #3
    5968:	d11a      	bne.n	59a0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    596a:	4601      	mov	r1, r0
    596c:	4628      	mov	r0, r5
    596e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5972:	f007 bc63 	b.w	d23c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    5976:	f44f 7204 	mov.w	r2, #528	; 0x210
    597a:	2100      	movs	r1, #0
    597c:	f006 f979 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5980:	f004 fe44 	bl	a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5984:	f644 112b 	movw	r1, #18731	; 0x492b
    5988:	4008      	ands	r0, r1
    598a:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    598e:	0a00      	lsrs	r0, r0, #8
    5990:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    5994:	20fe      	movs	r0, #254	; 0xfe
    5996:	f885 0074 	strb.w	r0, [r5, #116]	; 0x74
    599a:	207f      	movs	r0, #127	; 0x7f
    599c:	7268      	strb	r0, [r5, #9]
    599e:	7466      	strb	r6, [r4, #17]
    59a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59a4:	2700      	movs	r7, #0
    59a6:	f8a4 7106 	strh.w	r7, [r4, #262]	; 0x106
    59aa:	f884 70fb 	strb.w	r7, [r4, #251]	; 0xfb
    59ae:	6861      	ldr	r1, [r4, #4]
    59b0:	4815      	ldr	r0, [pc, #84]	; (5a08 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb8>)
    59b2:	460a      	mov	r2, r1
    59b4:	4408      	add	r0, r1
    59b6:	fbb0 f0f1 	udiv	r0, r0, r1
    59ba:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    59be:	f640 30b8 	movw	r0, #3000	; 0xbb8
    59c2:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    59c6:	8963      	ldrh	r3, [r4, #10]
    59c8:	4628      	mov	r0, r5
    59ca:	f000 f899 	bl	5b00 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    59ce:	4621      	mov	r1, r4
    59d0:	4628      	mov	r0, r5
    59d2:	f007 fc33 	bl	d23c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    59d6:	f006 f89c 	bl	bb12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    59da:	b120      	cbz	r0, 59e6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x96>
    59dc:	f8d4 0012 	ldr.w	r0, [r4, #18]
    59e0:	f7ff ff80 	bl	58e4 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    59e4:	b110      	cbz	r0, 59ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9c>
    59e6:	f884 716c 	strb.w	r7, [r4, #364]	; 0x16c
    59ea:	e7d9      	b.n	59a0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    59ec:	f884 616c 	strb.w	r6, [r4, #364]	; 0x16c
    59f0:	e7d6      	b.n	59a0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    59f2:	6841      	ldr	r1, [r0, #4]
    59f4:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    59f8:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    59fc:	4628      	mov	r0, r5
    59fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a02:	f000 b87d 	b.w	5b00 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    5a06:	0000      	.short	0x0000
    5a08:	01c9c37f 	.word	0x01c9c37f

00005a0c <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA>:
    5a0c:	b510      	push	{r4, lr}
    5a0e:	2820      	cmp	r0, #32
    5a10:	d304      	bcc.n	5a1c <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA+0x10>
    5a12:	f240 117b 	movw	r1, #379	; 0x17b
    5a16:	2029      	movs	r0, #41	; 0x29
    5a18:	f7fe f8da 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a1c:	4901      	ldr	r1, [pc, #4]	; (5a24 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA+0x18>)
    5a1e:	5c08      	ldrb	r0, [r1, r0]
    5a20:	bd10      	pop	{r4, pc}
    5a22:	0000      	.short	0x0000
    5a24:	20000fbc 	.word	0x20000fbc

00005a28 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I>:
    5a28:	b510      	push	{r4, lr}
    5a2a:	2820      	cmp	r0, #32
    5a2c:	d304      	bcc.n	5a38 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I+0x10>
    5a2e:	f240 1181 	movw	r1, #385	; 0x181
    5a32:	2029      	movs	r0, #41	; 0x29
    5a34:	f7fe f8cc 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a38:	4a01      	ldr	r2, [pc, #4]	; (5a40 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I+0x18>)
    5a3a:	5411      	strb	r1, [r2, r0]
    5a3c:	bd10      	pop	{r4, pc}
    5a3e:	0000      	.short	0x0000
    5a40:	20000fbc 	.word	0x20000fbc

00005a44 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    5a44:	b510      	push	{r4, lr}
    5a46:	2820      	cmp	r0, #32
    5a48:	d304      	bcc.n	5a54 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x10>
    5a4a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    5a4e:	2029      	movs	r0, #41	; 0x29
    5a50:	f7fe f8be 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a54:	4901      	ldr	r1, [pc, #4]	; (5a5c <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    5a56:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5a5a:	bd10      	pop	{r4, pc}
    5a5c:	20000f7c 	.word	0x20000f7c

00005a60 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    5a60:	b510      	push	{r4, lr}
    5a62:	2820      	cmp	r0, #32
    5a64:	d304      	bcc.n	5a70 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x10>
    5a66:	f44f 71ba 	mov.w	r1, #372	; 0x174
    5a6a:	2029      	movs	r0, #41	; 0x29
    5a6c:	f7fe f8b0 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a70:	4a01      	ldr	r2, [pc, #4]	; (5a78 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    5a72:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
    5a76:	bd10      	pop	{r4, pc}
    5a78:	20000f7c 	.word	0x20000f7c
    5a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a7e:	7ec3      	ldrb	r3, [r0, #27]
    5a80:	f891 4020 	ldrb.w	r4, [r1, #32]
    5a84:	2501      	movs	r5, #1
    5a86:	fb04 3202 	mla	r2, r4, r2, r3
    5a8a:	2325      	movs	r3, #37	; 0x25
    5a8c:	fbb2 f4f3 	udiv	r4, r2, r3
    5a90:	fb03 2214 	mls	r2, r3, r4, r2
    5a94:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    5a98:	76c2      	strb	r2, [r0, #27]
    5a9a:	f002 0307 	and.w	r3, r2, #7
    5a9e:	7b24      	ldrb	r4, [r4, #12]
    5aa0:	fa05 f303 	lsl.w	r3, r5, r3
    5aa4:	421c      	tst	r4, r3
    5aa6:	d001      	beq.n	5aac <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x4c>
    5aa8:	7702      	strb	r2, [r0, #28]
    5aaa:	e01e      	b.n	5aea <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8a>
    5aac:	7e83      	ldrb	r3, [r0, #26]
    5aae:	fbb2 f4f3 	udiv	r4, r2, r3
    5ab2:	fb03 2214 	mls	r2, r3, r4, r2
    5ab6:	1c52      	adds	r2, r2, #1
    5ab8:	b2d2      	uxtb	r2, r2
    5aba:	2300      	movs	r3, #0
    5abc:	18c4      	adds	r4, r0, r3
    5abe:	7d64      	ldrb	r4, [r4, #21]
    5ac0:	4294      	cmp	r4, r2
    5ac2:	d314      	bcc.n	5aee <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8e>
    5ac4:	2400      	movs	r4, #0
    5ac6:	18ce      	adds	r6, r1, r3
    5ac8:	f896 600c 	ldrb.w	r6, [r6, #12]
    5acc:	fa05 f704 	lsl.w	r7, r5, r4
    5ad0:	423e      	tst	r6, r7
    5ad2:	d001      	beq.n	5ad8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x78>
    5ad4:	1e52      	subs	r2, r2, #1
    5ad6:	b2d2      	uxtb	r2, r2
    5ad8:	b122      	cbz	r2, 5ae4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x84>
    5ada:	1c64      	adds	r4, r4, #1
    5adc:	b2e4      	uxtb	r4, r4
    5ade:	2c08      	cmp	r4, #8
    5ae0:	d3f4      	bcc.n	5acc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x6c>
    5ae2:	e006      	b.n	5af2 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x92>
    5ae4:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    5ae8:	7701      	strb	r1, [r0, #28]
    5aea:	2000      	movs	r0, #0
    5aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aee:	1b12      	subs	r2, r2, r4
    5af0:	b2d2      	uxtb	r2, r2
    5af2:	1c5b      	adds	r3, r3, #1
    5af4:	b2db      	uxtb	r3, r3
    5af6:	2b05      	cmp	r3, #5
    5af8:	d3e0      	bcc.n	5abc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x5c>
    5afa:	201f      	movs	r0, #31
    5afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5afe:	0000      	movs	r0, r0
    5b00:	b530      	push	{r4, r5, lr}
    5b02:	2400      	movs	r4, #0
    5b04:	8584      	strh	r4, [r0, #44]	; 0x2c
    5b06:	8e04      	ldrh	r4, [r0, #48]	; 0x30
    5b08:	4d13      	ldr	r5, [pc, #76]	; (5b58 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xf8>)
    5b0a:	434c      	muls	r4, r1
    5b0c:	fbb4 f4f2 	udiv	r4, r4, r2
    5b10:	8604      	strh	r4, [r0, #48]	; 0x30
    5b12:	f242 7410 	movw	r4, #10000	; 0x2710
    5b16:	4363      	muls	r3, r4
    5b18:	fbb3 f3f2 	udiv	r3, r3, r2
    5b1c:	1c5b      	adds	r3, r3, #1
    5b1e:	b29b      	uxth	r3, r3
    5b20:	fb03 f402 	mul.w	r4, r3, r2
    5b24:	85c3      	strh	r3, [r0, #46]	; 0x2e
    5b26:	42ac      	cmp	r4, r5
    5b28:	d901      	bls.n	5b2e <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xce>
    5b2a:	1e5b      	subs	r3, r3, #1
    5b2c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    5b2e:	4b0b      	ldr	r3, [pc, #44]	; (5b5c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xfc>)
    5b30:	f240 2471 	movw	r4, #625	; 0x271
    5b34:	fbb3 f3f2 	udiv	r3, r3, r2
    5b38:	1c5b      	adds	r3, r3, #1
    5b3a:	8683      	strh	r3, [r0, #52]	; 0x34
    5b3c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    5b3e:	4363      	muls	r3, r4
    5b40:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5b44:	1e5b      	subs	r3, r3, #1
    5b46:	fbb3 f3f2 	udiv	r3, r3, r2
    5b4a:	6243      	str	r3, [r0, #36]	; 0x24
    5b4c:	6a03      	ldr	r3, [r0, #32]
    5b4e:	434b      	muls	r3, r1
    5b50:	fbb3 f1f2 	udiv	r1, r3, r2
    5b54:	6201      	str	r1, [r0, #32]
    5b56:	bd30      	pop	{r4, r5, pc}
    5b58:	01e84800 	.word	0x01e84800
    5b5c:	02625a00 	.word	0x02625a00

00005b60 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5b60:	7841      	ldrb	r1, [r0, #1]
    5b62:	b141      	cbz	r1, 5b76 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5b64:	78c0      	ldrb	r0, [r0, #3]
    5b66:	2819      	cmp	r0, #25
    5b68:	d203      	bcs.n	5b72 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5b6a:	4a04      	ldr	r2, [pc, #16]	; (5b7c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5b6c:	5c10      	ldrb	r0, [r2, r0]
    5b6e:	4288      	cmp	r0, r1
    5b70:	d101      	bne.n	5b76 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5b72:	2001      	movs	r0, #1
    5b74:	4770      	bx	lr
    5b76:	2000      	movs	r0, #0
    5b78:	4770      	bx	lr
    5b7a:	0000      	.short	0x0000
    5b7c:	0000f252 	.word	0x0000f252

00005b80 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5b80:	b50c      	push	{r2, r3, lr}
    5b82:	a20b      	add	r2, pc, #44	; (adr r2, 5bb0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5b84:	e9d2 1200 	ldrd	r1, r2, [r2]
    5b88:	e9cd 1200 	strd	r1, r2, [sp]
    5b8c:	7901      	ldrb	r1, [r0, #4]
    5b8e:	7940      	ldrb	r0, [r0, #5]
    5b90:	f001 0207 	and.w	r2, r1, #7
    5b94:	4669      	mov	r1, sp
    5b96:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5b9a:	2a01      	cmp	r2, #1
    5b9c:	d804      	bhi.n	5ba8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5b9e:	f000 0007 	and.w	r0, r0, #7
    5ba2:	5c08      	ldrb	r0, [r1, r0]
    5ba4:	2801      	cmp	r0, #1
    5ba6:	d901      	bls.n	5bac <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5ba8:	2000      	movs	r0, #0
    5baa:	bd0c      	pop	{r2, r3, pc}
    5bac:	2001      	movs	r0, #1
    5bae:	bd0c      	pop	{r2, r3, pc}
    5bb0:	02010100 	.word	0x02010100
    5bb4:	03020201 	.word	0x03020201

00005bb8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5bb8:	b510      	push	{r4, lr}
    5bba:	2201      	movs	r2, #1
    5bbc:	70c1      	strb	r1, [r0, #3]
    5bbe:	2919      	cmp	r1, #25
    5bc0:	d202      	bcs.n	5bc8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5bc2:	4a06      	ldr	r2, [pc, #24]	; (5bdc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5bc4:	5c52      	ldrb	r2, [r2, r1]
    5bc6:	e006      	b.n	5bd6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5bc8:	29ff      	cmp	r1, #255	; 0xff
    5bca:	d004      	beq.n	5bd6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5bcc:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    5bd0:	202a      	movs	r0, #42	; 0x2a
    5bd2:	f7fd fffd 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bd6:	7042      	strb	r2, [r0, #1]
    5bd8:	bd10      	pop	{r4, pc}
    5bda:	0000      	.short	0x0000
    5bdc:	0000f252 	.word	0x0000f252

00005be0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5be4:	ea5f 0900 	movs.w	r9, r0
    5be8:	d006      	beq.n	5bf8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5bea:	4d21      	ldr	r5, [pc, #132]	; (5c70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5bec:	f105 0010 	add.w	r0, r5, #16
    5bf0:	7b69      	ldrb	r1, [r5, #13]
    5bf2:	4682      	mov	sl, r0
    5bf4:	b119      	cbz	r1, 5bfe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5bf6:	e00b      	b.n	5c10 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5bf8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5bfc:	e005      	b.n	5c0a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5bfe:	2100      	movs	r1, #0
    5c00:	f007 fd0b 	bl	d61a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5c04:	b120      	cbz	r0, 5c10 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5c06:	f240 31d3 	movw	r1, #979	; 0x3d3
    5c0a:	202b      	movs	r0, #43	; 0x2b
    5c0c:	f7fd ffe0 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c10:	8a2e      	ldrh	r6, [r5, #16]
    5c12:	2000      	movs	r0, #0
    5c14:	f7fe f9be 	bl	3f94 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5c18:	4f16      	ldr	r7, [pc, #88]	; (5c74 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5c1a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5c78 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5c1e:	4604      	mov	r4, r0
    5c20:	6838      	ldr	r0, [r7, #0]
    5c22:	b158      	cbz	r0, 5c3c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5c24:	8a28      	ldrh	r0, [r5, #16]
    5c26:	42a0      	cmp	r0, r4
    5c28:	d308      	bcc.n	5c3c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5c2a:	1b00      	subs	r0, r0, r4
    5c2c:	b2c0      	uxtb	r0, r0
    5c2e:	2101      	movs	r1, #1
    5c30:	f006 ffb7 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5c34:	b148      	cbz	r0, 5c4a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5c36:	4649      	mov	r1, r9
    5c38:	683a      	ldr	r2, [r7, #0]
    5c3a:	e004      	b.n	5c46 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5c3c:	f8d8 2000 	ldr.w	r2, [r8]
    5c40:	b11a      	cbz	r2, 5c4a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5c42:	8a28      	ldrh	r0, [r5, #16]
    5c44:	4649      	mov	r1, r9
    5c46:	4790      	blx	r2
    5c48:	b968      	cbnz	r0, 5c66 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5c4a:	2100      	movs	r1, #0
    5c4c:	4650      	mov	r0, sl
    5c4e:	f007 fce4 	bl	d61a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5c52:	b910      	cbnz	r0, 5c5a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5c54:	8a28      	ldrh	r0, [r5, #16]
    5c56:	42b0      	cmp	r0, r6
    5c58:	d1e2      	bne.n	5c20 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5c5a:	4808      	ldr	r0, [pc, #32]	; (5c7c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5c5c:	6801      	ldr	r1, [r0, #0]
    5c5e:	b129      	cbz	r1, 5c6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5c60:	4648      	mov	r0, r9
    5c62:	4788      	blx	r1
    5c64:	b110      	cbz	r0, 5c6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5c66:	2001      	movs	r0, #1
    5c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c6c:	2000      	movs	r0, #0
    5c6e:	e7fb      	b.n	5c68 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5c70:	20000d90 	.word	0x20000d90
    5c74:	20000228 	.word	0x20000228
    5c78:	2000022c 	.word	0x2000022c
    5c7c:	20000234 	.word	0x20000234

00005c80 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5c80:	b570      	push	{r4, r5, r6, lr}
    5c82:	0005      	movs	r5, r0
    5c84:	460c      	mov	r4, r1
    5c86:	d02e      	beq.n	5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5c88:	4818      	ldr	r0, [pc, #96]	; (5cec <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5c8a:	6802      	ldr	r2, [r0, #0]
    5c8c:	b35a      	cbz	r2, 5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5c8e:	4628      	mov	r0, r5
    5c90:	4790      	blx	r2
    5c92:	b340      	cbz	r0, 5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5c94:	7820      	ldrb	r0, [r4, #0]
    5c96:	2811      	cmp	r0, #17
    5c98:	d002      	beq.n	5ca0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5c9a:	2814      	cmp	r0, #20
    5c9c:	d003      	beq.n	5ca6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    5c9e:	e020      	b.n	5ce2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ca0:	7920      	ldrb	r0, [r4, #4]
    5ca2:	b1f0      	cbz	r0, 5ce2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ca4:	e00a      	b.n	5cbc <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5ca6:	7920      	ldrb	r0, [r4, #4]
    5ca8:	b120      	cbz	r0, 5cb4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    5caa:	4628      	mov	r0, r5
    5cac:	f007 fe9c 	bl	d9e8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5cb0:	b120      	cbz	r0, 5cbc <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5cb2:	e016      	b.n	5ce2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cb4:	490e      	ldr	r1, [pc, #56]	; (5cf0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    5cb6:	2000      	movs	r0, #0
    5cb8:	7348      	strb	r0, [r1, #13]
    5cba:	e012      	b.n	5ce2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cbc:	88e4      	ldrh	r4, [r4, #6]
    5cbe:	2100      	movs	r1, #0
    5cc0:	4620      	mov	r0, r4
    5cc2:	f006 ff6e 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5cc6:	b160      	cbz	r0, 5ce2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cc8:	8800      	ldrh	r0, [r0, #0]
    5cca:	f006 ffcf 	bl	cc6c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5cce:	2100      	movs	r1, #0
    5cd0:	4620      	mov	r0, r4
    5cd2:	f7fe f9fb 	bl	40cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5cd6:	b120      	cbz	r0, 5ce2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cd8:	f44f 719a 	mov.w	r1, #308	; 0x134
    5cdc:	202b      	movs	r0, #43	; 0x2b
    5cde:	f7fd ff77 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ce2:	2001      	movs	r0, #1
    5ce4:	bd70      	pop	{r4, r5, r6, pc}
    5ce6:	2000      	movs	r0, #0
    5ce8:	bd70      	pop	{r4, r5, r6, pc}
    5cea:	0000      	.short	0x0000
    5cec:	20000224 	.word	0x20000224
    5cf0:	20000d90 	.word	0x20000d90

00005cf4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5cf4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cf8:	b087      	sub	sp, #28
    5cfa:	460c      	mov	r4, r1
    5cfc:	a902      	add	r1, sp, #8
    5cfe:	9807      	ldr	r0, [sp, #28]
    5d00:	f007 f887 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5d04:	2800      	cmp	r0, #0
    5d06:	d17c      	bne.n	5e02 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    5d08:	f8df 9118 	ldr.w	r9, [pc, #280]	; 5e24 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x130>
    5d0c:	f04f 0a01 	mov.w	sl, #1
    5d10:	4680      	mov	r8, r0
    5d12:	9803      	ldr	r0, [sp, #12]
    5d14:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    5d18:	2800      	cmp	r0, #0
    5d1a:	d00c      	beq.n	5d36 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5d1c:	f8d9 2000 	ldr.w	r2, [r9]
    5d20:	b162      	cbz	r2, 5d3c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5d22:	4621      	mov	r1, r4
    5d24:	9807      	ldr	r0, [sp, #28]
    5d26:	4790      	blx	r2
    5d28:	b140      	cbz	r0, 5d3c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5d2a:	4620      	mov	r0, r4
    5d2c:	f000 f916 	bl	5f5c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    5d30:	2800      	cmp	r0, #0
    5d32:	d1ee      	bne.n	5d12 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5d34:	2001      	movs	r0, #1
    5d36:	b009      	add	sp, #36	; 0x24
    5d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d3c:	9d03      	ldr	r5, [sp, #12]
    5d3e:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    5d42:	3570      	adds	r5, #112	; 0x70
    5d44:	b948      	cbnz	r0, 5d5a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x66>
    5d46:	7f68      	ldrb	r0, [r5, #29]
    5d48:	f88d 0004 	strb.w	r0, [sp, #4]
    5d4c:	9801      	ldr	r0, [sp, #4]
    5d4e:	9001      	str	r0, [sp, #4]
    5d50:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5d54:	b108      	cbz	r0, 5d5a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x66>
    5d56:	2001      	movs	r0, #1
    5d58:	e000      	b.n	5d5c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5d5a:	2000      	movs	r0, #0
    5d5c:	4683      	mov	fp, r0
    5d5e:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
    5d62:	b1c0      	cbz	r0, 5d96 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa2>
    5d64:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
    5d68:	0780      	lsls	r0, r0, #30
    5d6a:	d514      	bpl.n	5d96 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa2>
    5d6c:	f884 8001 	strb.w	r8, [r4, #1]
    5d70:	f884 a000 	strb.w	sl, [r4]
    5d74:	f884 8004 	strb.w	r8, [r4, #4]
    5d78:	9907      	ldr	r1, [sp, #28]
    5d7a:	f8a4 1005 	strh.w	r1, [r4, #5]
    5d7e:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
    5d82:	71e1      	strb	r1, [r4, #7]
    5d84:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
    5d88:	8121      	strh	r1, [r4, #8]
    5d8a:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
    5d8e:	8161      	strh	r1, [r4, #10]
    5d90:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
    5d94:	e7c9      	b.n	5d2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5d96:	9807      	ldr	r0, [sp, #28]
    5d98:	f7fe fb40 	bl	441c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5d9c:	0007      	movs	r7, r0
    5d9e:	d00d      	beq.n	5dbc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xc8>
    5da0:	f006 fd0d 	bl	c7be <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5da4:	0006      	movs	r6, r0
    5da6:	d015      	beq.n	5dd4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe0>
    5da8:	f884 8001 	strb.w	r8, [r4, #1]
    5dac:	200d      	movs	r0, #13
    5dae:	7020      	strb	r0, [r4, #0]
    5db0:	9807      	ldr	r0, [sp, #28]
    5db2:	80e0      	strh	r0, [r4, #6]
    5db4:	8126      	strh	r6, [r4, #8]
    5db6:	f884 a004 	strb.w	sl, [r4, #4]
    5dba:	e007      	b.n	5dcc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    5dbc:	f240 213a 	movw	r1, #570	; 0x23a
    5dc0:	e02b      	b.n	5e1a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    5dc2:	2100      	movs	r1, #0
    5dc4:	4638      	mov	r0, r7
    5dc6:	460a      	mov	r2, r1
    5dc8:	f006 fe07 	bl	c9da <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5dcc:	1e76      	subs	r6, r6, #1
    5dce:	b2b6      	uxth	r6, r6
    5dd0:	d2f7      	bcs.n	5dc2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xce>
    5dd2:	e7aa      	b.n	5d2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5dd4:	9807      	ldr	r0, [sp, #28]
    5dd6:	f7fe fb0b 	bl	43f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5dda:	b1e0      	cbz	r0, 5e16 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x122>
    5ddc:	f1bb 0f00 	cmp.w	fp, #0
    5de0:	d01e      	beq.n	5e20 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5de2:	f006 fc24 	bl	c62e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5de6:	b160      	cbz	r0, 5e02 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    5de8:	9807      	ldr	r0, [sp, #28]
    5dea:	f006 ff3f 	bl	cc6c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5dee:	2100      	movs	r1, #0
    5df0:	9807      	ldr	r0, [sp, #28]
    5df2:	f7fe f96b 	bl	40cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5df6:	f884 8001 	strb.w	r8, [r4, #1]
    5dfa:	210a      	movs	r1, #10
    5dfc:	4640      	mov	r0, r8
    5dfe:	7021      	strb	r1, [r4, #0]
    5e00:	e000      	b.n	5e04 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5e02:	e00d      	b.n	5e20 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5e04:	f884 8004 	strb.w	r8, [r4, #4]
    5e08:	9907      	ldr	r1, [sp, #28]
    5e0a:	f8a4 1005 	strh.w	r1, [r4, #5]
    5e0e:	7fa9      	ldrb	r1, [r5, #30]
    5e10:	71e1      	strb	r1, [r4, #7]
    5e12:	7768      	strb	r0, [r5, #29]
    5e14:	e789      	b.n	5d2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5e16:	f44f 7116 	mov.w	r1, #600	; 0x258
    5e1a:	202b      	movs	r0, #43	; 0x2b
    5e1c:	f7fd fed8 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e20:	2000      	movs	r0, #0
    5e22:	e788      	b.n	5d36 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5e24:	20000230 	.word	0x20000230

00005e28 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e2c:	4c12      	ldr	r4, [pc, #72]	; (5e78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e2e:	4607      	mov	r7, r0
    5e30:	460e      	mov	r6, r1
    5e32:	7de0      	ldrb	r0, [r4, #23]
    5e34:	b110      	cbz	r0, 5e3c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5e36:	8b20      	ldrh	r0, [r4, #24]
    5e38:	2800      	cmp	r0, #0
    5e3a:	d012      	beq.n	5e62 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e3c:	480e      	ldr	r0, [pc, #56]	; (5e78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e3e:	300e      	adds	r0, #14
    5e40:	4680      	mov	r8, r0
    5e42:	f007 fb94 	bl	d56e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e46:	b9a8      	cbnz	r0, 5e74 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e48:	89e5      	ldrh	r5, [r4, #14]
    5e4a:	89e0      	ldrh	r0, [r4, #14]
    5e4c:	4632      	mov	r2, r6
    5e4e:	4639      	mov	r1, r7
    5e50:	f007 fb9c 	bl	d58c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    5e54:	b138      	cbz	r0, 5e66 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5e56:	7de0      	ldrb	r0, [r4, #23]
    5e58:	b110      	cbz	r0, 5e60 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5e5a:	8b20      	ldrh	r0, [r4, #24]
    5e5c:	1e40      	subs	r0, r0, #1
    5e5e:	8320      	strh	r0, [r4, #24]
    5e60:	2001      	movs	r0, #1
    5e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e66:	4640      	mov	r0, r8
    5e68:	f007 fb81 	bl	d56e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e6c:	b910      	cbnz	r0, 5e74 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e6e:	89e0      	ldrh	r0, [r4, #14]
    5e70:	42a8      	cmp	r0, r5
    5e72:	d1ea      	bne.n	5e4a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5e74:	2000      	movs	r0, #0
    5e76:	e7f4      	b.n	5e62 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e78:	20000d90 	.word	0x20000d90

00005e7c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    5e7c:	b510      	push	{r4, lr}
    5e7e:	7901      	ldrb	r1, [r0, #4]
    5e80:	b119      	cbz	r1, 5e8a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    5e82:	2901      	cmp	r1, #1
    5e84:	d006      	beq.n	5e94 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    5e86:	2000      	movs	r0, #0
    5e88:	bd10      	pop	{r4, pc}
    5e8a:	8842      	ldrh	r2, [r0, #2]
    5e8c:	6883      	ldr	r3, [r0, #8]
    5e8e:	8800      	ldrh	r0, [r0, #0]
    5e90:	2102      	movs	r1, #2
    5e92:	e003      	b.n	5e9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    5e94:	8842      	ldrh	r2, [r0, #2]
    5e96:	6883      	ldr	r3, [r0, #8]
    5e98:	8800      	ldrh	r0, [r0, #0]
    5e9a:	2101      	movs	r1, #1
    5e9c:	f000 f808 	bl	5eb0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    5ea0:	b910      	cbnz	r0, 5ea8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    5ea2:	4902      	ldr	r1, [pc, #8]	; (5eac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    5ea4:	2001      	movs	r0, #1
    5ea6:	7008      	strb	r0, [r1, #0]
    5ea8:	2001      	movs	r0, #1
    5eaa:	bd10      	pop	{r4, pc}
    5eac:	20000d90 	.word	0x20000d90
    5eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5eb4:	468a      	mov	sl, r1
    5eb6:	4699      	mov	r9, r3
    5eb8:	4615      	mov	r5, r2
    5eba:	4604      	mov	r4, r0
    5ebc:	a901      	add	r1, sp, #4
    5ebe:	f006 ffa8 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5ec2:	bbe0      	cbnz	r0, 5f3e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    5ec4:	9f02      	ldr	r7, [sp, #8]
    5ec6:	f04f 0800 	mov.w	r8, #0
    5eca:	3770      	adds	r7, #112	; 0x70
    5ecc:	b18d      	cbz	r5, 5ef2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    5ece:	4620      	mov	r0, r4
    5ed0:	f7fe faa4 	bl	441c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5ed4:	0004      	movs	r4, r0
    5ed6:	d00f      	beq.n	5ef8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    5ed8:	4629      	mov	r1, r5
    5eda:	f006 fcaf 	bl	c83c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5ede:	0006      	movs	r6, r0
    5ee0:	d003      	beq.n	5eea <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    5ee2:	481d      	ldr	r0, [pc, #116]	; (5f58 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    5ee4:	8880      	ldrh	r0, [r0, #4]
    5ee6:	42a8      	cmp	r0, r5
    5ee8:	d208      	bcs.n	5efc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    5eea:	2000      	movs	r0, #0
    5eec:	b004      	add	sp, #16
    5eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ef2:	2001      	movs	r0, #1
    5ef4:	7538      	strb	r0, [r7, #20]
    5ef6:	e029      	b.n	5f4c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    5ef8:	2189      	movs	r1, #137	; 0x89
    5efa:	e02a      	b.n	5f52 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    5efc:	4620      	mov	r0, r4
    5efe:	4631      	mov	r1, r6
    5f00:	aa03      	add	r2, sp, #12
    5f02:	f006 fc94 	bl	c82e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    5f06:	9803      	ldr	r0, [sp, #12]
    5f08:	f8a0 8000 	strh.w	r8, [r0]
    5f0c:	f880 8002 	strb.w	r8, [r0, #2]
    5f10:	7d39      	ldrb	r1, [r7, #20]
    5f12:	b109      	cbz	r1, 5f18 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    5f14:	f04f 0a02 	mov.w	sl, #2
    5f18:	4651      	mov	r1, sl
    5f1a:	f007 fa7f 	bl	d41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5f1e:	4631      	mov	r1, r6
    5f20:	2603      	movs	r6, #3
    5f22:	4620      	mov	r0, r4
    5f24:	464a      	mov	r2, r9
    5f26:	462b      	mov	r3, r5
    5f28:	9600      	str	r6, [sp, #0]
    5f2a:	f006 fb69 	bl	c600 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    5f2e:	4620      	mov	r0, r4
    5f30:	4629      	mov	r1, r5
    5f32:	f006 fc20 	bl	c776 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    5f36:	b158      	cbz	r0, 5f50 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    5f38:	4644      	mov	r4, r8
    5f3a:	a801      	add	r0, sp, #4
    5f3c:	e000      	b.n	5f40 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    5f3e:	e005      	b.n	5f4c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    5f40:	f007 fb18 	bl	d574 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    5f44:	9802      	ldr	r0, [sp, #8]
    5f46:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    5f4a:	753c      	strb	r4, [r7, #20]
    5f4c:	2001      	movs	r0, #1
    5f4e:	e7cd      	b.n	5eec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    5f50:	219f      	movs	r1, #159	; 0x9f
    5f52:	202b      	movs	r0, #43	; 0x2b
    5f54:	f7fd fe3c 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f58:	20000d90 	.word	0x20000d90
    5f5c:	b510      	push	{r4, lr}
    5f5e:	492c      	ldr	r1, [pc, #176]	; (6010 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    5f60:	b086      	sub	sp, #24
    5f62:	7d8a      	ldrb	r2, [r1, #22]
    5f64:	7801      	ldrb	r1, [r0, #0]
    5f66:	07d3      	lsls	r3, r2, #31
    5f68:	d101      	bne.n	5f6e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    5f6a:	2919      	cmp	r1, #25
    5f6c:	d004      	beq.n	5f78 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    5f6e:	2918      	cmp	r1, #24
    5f70:	d01e      	beq.n	5fb0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    5f72:	2912      	cmp	r1, #18
    5f74:	d045      	beq.n	6002 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    5f76:	e049      	b.n	600c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    5f78:	8880      	ldrh	r0, [r0, #4]
    5f7a:	f8ad 0000 	strh.w	r0, [sp]
    5f7e:	a902      	add	r1, sp, #8
    5f80:	f006 ff47 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5f84:	b108      	cbz	r0, 5f8a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    5f86:	2158      	movs	r1, #88	; 0x58
    5f88:	e035      	b.n	5ff6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5f8a:	9803      	ldr	r0, [sp, #12]
    5f8c:	f810 1f62 	ldrb.w	r1, [r0, #98]!
    5f90:	f88d 1002 	strb.w	r1, [sp, #2]
    5f94:	7841      	ldrb	r1, [r0, #1]
    5f96:	f88d 1003 	strb.w	r1, [sp, #3]
    5f9a:	8840      	ldrh	r0, [r0, #2]
    5f9c:	f8ad 0004 	strh.w	r0, [sp, #4]
    5fa0:	2102      	movs	r1, #2
    5fa2:	4668      	mov	r0, sp
    5fa4:	f008 fd44 	bl	ea30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    5fa8:	b340      	cbz	r0, 5ffc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    5faa:	f240 114d 	movw	r1, #333	; 0x14d
    5fae:	e022      	b.n	5ff6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5fb0:	0791      	lsls	r1, r2, #30
    5fb2:	d42b      	bmi.n	600c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    5fb4:	8884      	ldrh	r4, [r0, #4]
    5fb6:	a903      	add	r1, sp, #12
    5fb8:	4620      	mov	r0, r4
    5fba:	f008 fc21 	bl	e800 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    5fbe:	b110      	cbz	r0, 5fc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    5fc0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    5fc4:	e017      	b.n	5ff6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5fc6:	f8ad 4000 	strh.w	r4, [sp]
    5fca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    5fce:	f8ad 0002 	strh.w	r0, [sp, #2]
    5fd2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    5fd6:	f8ad 0004 	strh.w	r0, [sp, #4]
    5fda:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    5fde:	f8ad 0006 	strh.w	r0, [sp, #6]
    5fe2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    5fe6:	f8ad 0008 	strh.w	r0, [sp, #8]
    5fea:	4668      	mov	r0, sp
    5fec:	f008 fc3f 	bl	e86e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    5ff0:	b120      	cbz	r0, 5ffc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    5ff2:	f240 115d 	movw	r1, #349	; 0x15d
    5ff6:	202b      	movs	r0, #43	; 0x2b
    5ff8:	f7fd fdea 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ffc:	2001      	movs	r0, #1
    5ffe:	b006      	add	sp, #24
    6000:	bd10      	pop	{r4, pc}
    6002:	0751      	lsls	r1, r2, #29
    6004:	d402      	bmi.n	600c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6006:	7b80      	ldrb	r0, [r0, #14]
    6008:	07c0      	lsls	r0, r0, #31
    600a:	d0f7      	beq.n	5ffc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    600c:	2000      	movs	r0, #0
    600e:	e7f6      	b.n	5ffe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    6010:	20000d90 	.word	0x20000d90

00006014 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6014:	b570      	push	{r4, r5, r6, lr}
    6016:	4604      	mov	r4, r0
    6018:	7c00      	ldrb	r0, [r0, #16]
    601a:	b300      	cbz	r0, 605e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    601c:	2802      	cmp	r0, #2
    601e:	d01e      	beq.n	605e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6020:	f05f 0001 	movs.w	r0, #1
    6024:	f104 0141 	add.w	r1, r4, #65	; 0x41
    6028:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    602c:	460d      	mov	r5, r1
    602e:	b1c0      	cbz	r0, 6062 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6030:	7de0      	ldrb	r0, [r4, #23]
    6032:	b1f0      	cbz	r0, 6072 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6034:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6038:	f8c4 0041 	str.w	r0, [r4, #65]	; 0x41
    603c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6040:	f8a4 0045 	strh.w	r0, [r4, #69]	; 0x45
    6044:	7c20      	ldrb	r0, [r4, #16]
    6046:	f007 fc50 	bl	d8ea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    604a:	7620      	strb	r0, [r4, #24]
    604c:	2008      	movs	r0, #8
    604e:	7660      	strb	r0, [r4, #25]
    6050:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6054:	4629      	mov	r1, r5
    6056:	f007 fc34 	bl	d8c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    605a:	b9a8      	cbnz	r0, 6088 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    605c:	e00e      	b.n	607c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    605e:	2000      	movs	r0, #0
    6060:	e7e0      	b.n	6024 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6062:	2000      	movs	r0, #0
    6064:	f7fe fc22 	bl	48ac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6068:	2800      	cmp	r0, #0
    606a:	d1eb      	bne.n	6044 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    606c:	f240 4172 	movw	r1, #1138	; 0x472
    6070:	e001      	b.n	6076 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6072:	f240 4176 	movw	r1, #1142	; 0x476
    6076:	202d      	movs	r0, #45	; 0x2d
    6078:	f7fd fdaa 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    607c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6080:	4629      	mov	r1, r5
    6082:	f007 fc27 	bl	d8d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6086:	b100      	cbz	r0, 608a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6088:	2001      	movs	r0, #1
    608a:	76a0      	strb	r0, [r4, #26]
    608c:	7e20      	ldrb	r0, [r4, #24]
    608e:	b910      	cbnz	r0, 6096 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    6090:	78a0      	ldrb	r0, [r4, #2]
    6092:	0740      	lsls	r0, r0, #29
    6094:	d506      	bpl.n	60a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6096:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    609a:	f104 0148 	add.w	r1, r4, #72	; 0x48
    609e:	f006 fe75 	bl	cd8c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    60a2:	7660      	strb	r0, [r4, #25]
    60a4:	2500      	movs	r5, #0
    60a6:	63a5      	str	r5, [r4, #56]	; 0x38
    60a8:	f005 fbf4 	bl	b894 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    60ac:	63e0      	str	r0, [r4, #60]	; 0x3c
    60ae:	2100      	movs	r1, #0
    60b0:	4620      	mov	r0, r4
    60b2:	f007 fd29 	bl	db08 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    60b6:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
    60ba:	78a0      	ldrb	r0, [r4, #2]
    60bc:	0740      	lsls	r0, r0, #29
    60be:	d508      	bpl.n	60d2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    60c0:	7e20      	ldrb	r0, [r4, #24]
    60c2:	2800      	cmp	r0, #0
    60c4:	d005      	beq.n	60d2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    60c6:	4620      	mov	r0, r4
    60c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60cc:	2100      	movs	r1, #0
    60ce:	f000 bdbb 	b.w	6c48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    60d2:	bd70      	pop	{r4, r5, r6, pc}

000060d4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    60d4:	b508      	push	{r3, lr}
    60d6:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
    60da:	f88d 2000 	strb.w	r2, [sp]
    60de:	9a00      	ldr	r2, [sp, #0]
    60e0:	9200      	str	r2, [sp, #0]
    60e2:	f89d 3000 	ldrb.w	r3, [sp]
    60e6:	2200      	movs	r2, #0
    60e8:	b163      	cbz	r3, 6104 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    60ea:	704a      	strb	r2, [r1, #1]
    60ec:	2317      	movs	r3, #23
    60ee:	700b      	strb	r3, [r1, #0]
    60f0:	f850 3f9d 	ldr.w	r3, [r0, #157]!
    60f4:	604b      	str	r3, [r1, #4]
    60f6:	6843      	ldr	r3, [r0, #4]
    60f8:	608b      	str	r3, [r1, #8]
    60fa:	7a03      	ldrb	r3, [r0, #8]
    60fc:	730b      	strb	r3, [r1, #12]
    60fe:	f800 2c01 	strb.w	r2, [r0, #-1]
    6102:	e03b      	b.n	617c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6104:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    6108:	f88d 3000 	strb.w	r3, [sp]
    610c:	9b00      	ldr	r3, [sp, #0]
    610e:	9300      	str	r3, [sp, #0]
    6110:	f89d 3000 	ldrb.w	r3, [sp]
    6114:	b143      	cbz	r3, 6128 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6116:	704a      	strb	r2, [r1, #1]
    6118:	2305      	movs	r3, #5
    611a:	700b      	strb	r3, [r1, #0]
    611c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    6120:	604b      	str	r3, [r1, #4]
    6122:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
    6126:	e029      	b.n	617c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6128:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    612c:	f88d 3000 	strb.w	r3, [sp]
    6130:	9b00      	ldr	r3, [sp, #0]
    6132:	9300      	str	r3, [sp, #0]
    6134:	f89d 3000 	ldrb.w	r3, [sp]
    6138:	b11b      	cbz	r3, 6142 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    613a:	bf00      	nop
    613c:	f007 fcbc 	bl	dab8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    6140:	e01c      	b.n	617c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6142:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    6146:	f88d 3000 	strb.w	r3, [sp]
    614a:	9b00      	ldr	r3, [sp, #0]
    614c:	9300      	str	r3, [sp, #0]
    614e:	f89d 3000 	ldrb.w	r3, [sp]
    6152:	b1ab      	cbz	r3, 6180 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6154:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    6158:	f88d 3000 	strb.w	r3, [sp]
    615c:	9b00      	ldr	r3, [sp, #0]
    615e:	9300      	str	r3, [sp, #0]
    6160:	f89d 3000 	ldrb.w	r3, [sp]
    6164:	2b00      	cmp	r3, #0
    6166:	d1e9      	bne.n	613c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6168:	704a      	strb	r2, [r1, #1]
    616a:	2314      	movs	r3, #20
    616c:	700b      	strb	r3, [r1, #0]
    616e:	f850 3f90 	ldr.w	r3, [r0, #144]!
    6172:	604b      	str	r3, [r1, #4]
    6174:	8883      	ldrh	r3, [r0, #4]
    6176:	810b      	strh	r3, [r1, #8]
    6178:	f800 2c02 	strb.w	r2, [r0, #-2]
    617c:	2001      	movs	r0, #1
    617e:	bd08      	pop	{r3, pc}
    6180:	2000      	movs	r0, #0
    6182:	bd08      	pop	{r3, pc}

00006184 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6184:	b530      	push	{r4, r5, lr}
    6186:	460c      	mov	r4, r1
    6188:	b08d      	sub	sp, #52	; 0x34
    618a:	4605      	mov	r5, r0
    618c:	4601      	mov	r1, r0
    618e:	2220      	movs	r2, #32
    6190:	a802      	add	r0, sp, #8
    6192:	f005 fcf4 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6196:	a80a      	add	r0, sp, #40	; 0x28
    6198:	f007 fd63 	bl	dc62 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    619c:	7aa0      	ldrb	r0, [r4, #10]
    619e:	f88d 0018 	strb.w	r0, [sp, #24]
    61a2:	7820      	ldrb	r0, [r4, #0]
    61a4:	f88d 0008 	strb.w	r0, [sp, #8]
    61a8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    61ac:	f8ad 0000 	strh.w	r0, [sp]
    61b0:	f89d 0000 	ldrb.w	r0, [sp]
    61b4:	f000 0101 	and.w	r1, r0, #1
    61b8:	f3c0 0240 	ubfx	r2, r0, #1, #1
    61bc:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    61c0:	f3c0 0280 	ubfx	r2, r0, #2, #1
    61c4:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    61c8:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    61cc:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    61d0:	f3c0 1200 	ubfx	r2, r0, #4, #1
    61d4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    61d8:	f3c0 1240 	ubfx	r2, r0, #5, #1
    61dc:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    61e0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    61e4:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    61e8:	f8ad 000a 	strh.w	r0, [sp, #10]
    61ec:	7d20      	ldrb	r0, [r4, #20]
    61ee:	2801      	cmp	r0, #1
    61f0:	d006      	beq.n	6200 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    61f2:	2802      	cmp	r0, #2
    61f4:	d004      	beq.n	6200 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    61f6:	f240 21af 	movw	r1, #687	; 0x2af
    61fa:	2006      	movs	r0, #6
    61fc:	f7fd fce8 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6200:	f88d 000c 	strb.w	r0, [sp, #12]
    6204:	7a61      	ldrb	r1, [r4, #9]
    6206:	a80a      	add	r0, sp, #40	; 0x28
    6208:	f007 fd12 	bl	dc30 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    620c:	7d20      	ldrb	r0, [r4, #20]
    620e:	2101      	movs	r1, #1
    6210:	2802      	cmp	r0, #2
    6212:	d102      	bne.n	621a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6214:	7d60      	ldrb	r0, [r4, #21]
    6216:	1c40      	adds	r0, r0, #1
    6218:	b2c1      	uxtb	r1, r0
    621a:	7ea0      	ldrb	r0, [r4, #26]
    621c:	1c40      	adds	r0, r0, #1
    621e:	b2c2      	uxtb	r2, r0
    6220:	a80a      	add	r0, sp, #40	; 0x28
    6222:	f007 fccc 	bl	dbbe <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6226:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    622a:	0700      	lsls	r0, r0, #28
    622c:	d501      	bpl.n	6232 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    622e:	2000      	movs	r0, #0
    6230:	e020      	b.n	6274 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6232:	a80a      	add	r0, sp, #40	; 0x28
    6234:	f007 fcd5 	bl	dbe2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6238:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    623c:	2228      	movs	r2, #40	; 0x28
    623e:	f000 fdab 	bl	6d98 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6242:	f240 2171 	movw	r1, #625	; 0x271
    6246:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    624a:	fbb0 f0f1 	udiv	r0, r0, r1
    624e:	4348      	muls	r0, r1
    6250:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6254:	f240 2371 	movw	r3, #625	; 0x271
    6258:	0a0a      	lsrs	r2, r1, #8
    625a:	f240 2171 	movw	r1, #625	; 0x271
    625e:	434a      	muls	r2, r1
    6260:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6264:	0a09      	lsrs	r1, r1, #8
    6266:	4359      	muls	r1, r3
    6268:	4290      	cmp	r0, r2
    626a:	d801      	bhi.n	6270 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    626c:	9204      	str	r2, [sp, #16]
    626e:	e004      	b.n	627a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6270:	4288      	cmp	r0, r1
    6272:	d801      	bhi.n	6278 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6274:	9004      	str	r0, [sp, #16]
    6276:	e000      	b.n	627a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6278:	9104      	str	r1, [sp, #16]
    627a:	7ca0      	ldrb	r0, [r4, #18]
    627c:	f88d 0017 	strb.w	r0, [sp, #23]
    6280:	7e20      	ldrb	r0, [r4, #24]
    6282:	2801      	cmp	r0, #1
    6284:	d000      	beq.n	6288 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6286:	2000      	movs	r0, #0
    6288:	f88d 0014 	strb.w	r0, [sp, #20]
    628c:	f895 0064 	ldrb.w	r0, [r5, #100]	; 0x64
    6290:	f895 0065 	ldrb.w	r0, [r5, #101]	; 0x65
    6294:	2220      	movs	r2, #32
    6296:	a902      	add	r1, sp, #8
    6298:	4628      	mov	r0, r5
    629a:	f005 fc70 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    629e:	980a      	ldr	r0, [sp, #40]	; 0x28
    62a0:	6228      	str	r0, [r5, #32]
    62a2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    62a6:	84a8      	strh	r0, [r5, #36]	; 0x24
    62a8:	7ae0      	ldrb	r0, [r4, #11]
    62aa:	b168      	cbz	r0, 62c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    62ac:	2802      	cmp	r0, #2
    62ae:	d00b      	beq.n	62c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    62b0:	f05f 0001 	movs.w	r0, #1
    62b4:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
    62b8:	68e0      	ldr	r0, [r4, #12]
    62ba:	64a8      	str	r0, [r5, #72]	; 0x48
    62bc:	8a20      	ldrh	r0, [r4, #16]
    62be:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    62c2:	b00d      	add	sp, #52	; 0x34
    62c4:	2000      	movs	r0, #0
    62c6:	bd30      	pop	{r4, r5, pc}
    62c8:	2000      	movs	r0, #0
    62ca:	e7f3      	b.n	62b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

000062cc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    62cc:	4a0a      	ldr	r2, [pc, #40]	; (62f8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    62ce:	b510      	push	{r4, lr}
    62d0:	2100      	movs	r1, #0
    62d2:	7011      	strb	r1, [r2, #0]
    62d4:	4c09      	ldr	r4, [pc, #36]	; (62fc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    62d6:	6060      	str	r0, [r4, #4]
    62d8:	f000 f822 	bl	6320 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    62dc:	b110      	cbz	r0, 62e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    62de:	f240 311e 	movw	r1, #798	; 0x31e
    62e2:	e004      	b.n	62ee <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    62e4:	68a0      	ldr	r0, [r4, #8]
    62e6:	2800      	cmp	r0, #0
    62e8:	d104      	bne.n	62f4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    62ea:	f240 3121 	movw	r1, #801	; 0x321
    62ee:	202d      	movs	r0, #45	; 0x2d
    62f0:	f7fd fc6e 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62f4:	bd10      	pop	{r4, pc}
    62f6:	0000      	.short	0x0000
    62f8:	20000dac 	.word	0x20000dac
    62fc:	200000ec 	.word	0x200000ec

00006300 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6300:	4902      	ldr	r1, [pc, #8]	; (630c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6302:	4801      	ldr	r0, [pc, #4]	; (6308 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6304:	6088      	str	r0, [r1, #8]
    6306:	4770      	bx	lr
    6308:	00006d80 	.word	0x00006d80
    630c:	200000ec 	.word	0x200000ec

00006310 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6310:	4902      	ldr	r1, [pc, #8]	; (631c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    6312:	6008      	str	r0, [r1, #0]
    6314:	6889      	ldr	r1, [r1, #8]
    6316:	6809      	ldr	r1, [r1, #0]
    6318:	4708      	bx	r1
    631a:	0000      	.short	0x0000
    631c:	200000ec 	.word	0x200000ec

00006320 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6320:	4808      	ldr	r0, [pc, #32]	; (6344 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6322:	b510      	push	{r4, lr}
    6324:	7801      	ldrb	r1, [r0, #0]
    6326:	b111      	cbz	r1, 632e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6328:	240c      	movs	r4, #12
    632a:	4620      	mov	r0, r4
    632c:	bd10      	pop	{r4, pc}
    632e:	2400      	movs	r4, #0
    6330:	6004      	str	r4, [r0, #0]
    6332:	6044      	str	r4, [r0, #4]
    6334:	6084      	str	r4, [r0, #8]
    6336:	60c4      	str	r4, [r0, #12]
    6338:	f004 fb4c 	bl	a9d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    633c:	f004 f98e 	bl	a65c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6340:	e7f3      	b.n	632a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    6342:	0000      	.short	0x0000
    6344:	20000dac 	.word	0x20000dac

00006348 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6348:	4904      	ldr	r1, [pc, #16]	; (635c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    634a:	b510      	push	{r4, lr}
    634c:	7809      	ldrb	r1, [r1, #0]
    634e:	2901      	cmp	r1, #1
    6350:	d101      	bne.n	6356 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    6352:	f000 fb65 	bl	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    6356:	2000      	movs	r0, #0
    6358:	bd10      	pop	{r4, pc}
    635a:	0000      	.short	0x0000
    635c:	20000dac 	.word	0x20000dac

00006360 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6360:	4902      	ldr	r1, [pc, #8]	; (636c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6362:	4801      	ldr	r0, [pc, #4]	; (6368 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6364:	6008      	str	r0, [r1, #0]
    6366:	4770      	bx	lr
    6368:	00006b6d 	.word	0x00006b6d
    636c:	200000f8 	.word	0x200000f8
    6370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6374:	000f      	movs	r7, r1
    6376:	4604      	mov	r4, r0
    6378:	d023      	beq.n	63c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    637a:	f104 0020 	add.w	r0, r4, #32
    637e:	4605      	mov	r5, r0
    6380:	f007 fc58 	bl	dc34 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6384:	b9b0      	cbnz	r0, 63b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6386:	78a0      	ldrb	r0, [r4, #2]
    6388:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    638c:	b350      	cbz	r0, 63e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    638e:	4628      	mov	r0, r5
    6390:	f007 fc27 	bl	dbe2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6394:	4606      	mov	r6, r0
    6396:	4628      	mov	r0, r5
    6398:	f007 fc4c 	bl	dc34 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    639c:	1a30      	subs	r0, r6, r0
    639e:	b2c0      	uxtb	r0, r0
    63a0:	f007 fc9d 	bl	dcde <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    63a4:	4601      	mov	r1, r0
    63a6:	4835      	ldr	r0, [pc, #212]	; (647c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    63a8:	6842      	ldr	r2, [r0, #4]
    63aa:	4411      	add	r1, r2
    63ac:	6041      	str	r1, [r0, #4]
    63ae:	4628      	mov	r0, r5
    63b0:	f007 fc5e 	bl	dc70 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    63b4:	4628      	mov	r0, r5
    63b6:	f007 fc20 	bl	dbfa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    63ba:	4601      	mov	r1, r0
    63bc:	4620      	mov	r0, r4
    63be:	f007 fbdf 	bl	db80 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    63c2:	4d2f      	ldr	r5, [pc, #188]	; (6480 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    63c4:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
    63c8:	2100      	movs	r1, #0
    63ca:	6868      	ldr	r0, [r5, #4]
    63cc:	8001      	strh	r1, [r0, #0]
    63ce:	f007 fbed 	bl	dbac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    63d2:	8860      	ldrh	r0, [r4, #2]
    63d4:	2813      	cmp	r0, #19
    63d6:	d013      	beq.n	6400 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    63d8:	dc09      	bgt.n	63ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    63da:	2810      	cmp	r0, #16
    63dc:	d036      	beq.n	644c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    63de:	2812      	cmp	r0, #18
    63e0:	d109      	bne.n	63f6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    63e2:	e031      	b.n	6448 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    63e4:	4620      	mov	r0, r4
    63e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    63ea:	f000 bb19 	b.w	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    63ee:	2815      	cmp	r0, #21
    63f0:	d00f      	beq.n	6412 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    63f2:	281d      	cmp	r0, #29
    63f4:	d00d      	beq.n	6412 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    63f6:	f240 616f 	movw	r1, #1647	; 0x66f
    63fa:	202d      	movs	r0, #45	; 0x2d
    63fc:	f7fd fbe8 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6400:	2100      	movs	r1, #0
    6402:	6868      	ldr	r0, [r5, #4]
    6404:	f007 f86c 	bl	d4e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6408:	2101      	movs	r1, #1
    640a:	6868      	ldr	r0, [r5, #4]
    640c:	f007 fbce 	bl	dbac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    6410:	e020      	b.n	6454 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6412:	2101      	movs	r1, #1
    6414:	6868      	ldr	r0, [r5, #4]
    6416:	f007 f863 	bl	d4e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    641a:	2101      	movs	r1, #1
    641c:	6868      	ldr	r0, [r5, #4]
    641e:	f007 fbc5 	bl	dbac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    6422:	b136      	cbz	r6, 6432 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6424:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6428:	6868      	ldr	r0, [r5, #4]
    642a:	f007 f874 	bl	d516 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    642e:	2101      	movs	r1, #1
    6430:	e006      	b.n	6440 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    6432:	f104 0148 	add.w	r1, r4, #72	; 0x48
    6436:	6868      	ldr	r0, [r5, #4]
    6438:	f007 f86d 	bl	d516 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    643c:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
    6440:	6868      	ldr	r0, [r5, #4]
    6442:	f007 f86e 	bl	d522 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6446:	e005      	b.n	6454 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6448:	2106      	movs	r1, #6
    644a:	e000      	b.n	644e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    644c:	2102      	movs	r1, #2
    644e:	6868      	ldr	r0, [r5, #4]
    6450:	f007 f846 	bl	d4e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6454:	4620      	mov	r0, r4
    6456:	f000 fc6b 	bl	6d30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    645a:	8860      	ldrh	r0, [r4, #2]
    645c:	281d      	cmp	r0, #29
    645e:	d006      	beq.n	646e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6460:	2815      	cmp	r0, #21
    6462:	d004      	beq.n	646e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6464:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    6466:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6468:	6868      	ldr	r0, [r5, #4]
    646a:	f007 f829 	bl	d4c0 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    646e:	4639      	mov	r1, r7
    6470:	4620      	mov	r0, r4
    6472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6476:	f000 b9d9 	b.w	682c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    647a:	0000      	.short	0x0000
    647c:	20000dac 	.word	0x20000dac
    6480:	200000ec 	.word	0x200000ec
    6484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6488:	4d28      	ldr	r5, [pc, #160]	; (652c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    648a:	4680      	mov	r8, r0
    648c:	7828      	ldrb	r0, [r5, #0]
    648e:	2802      	cmp	r0, #2
    6490:	d005      	beq.n	649e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6492:	7828      	ldrb	r0, [r5, #0]
    6494:	2803      	cmp	r0, #3
    6496:	d002      	beq.n	649e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6498:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    649c:	e01f      	b.n	64de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    649e:	4c24      	ldr	r4, [pc, #144]	; (6530 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    64a0:	6820      	ldr	r0, [r4, #0]
    64a2:	7b01      	ldrb	r1, [r0, #12]
    64a4:	b109      	cbz	r1, 64aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    64a6:	f007 fb76 	bl	db96 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11a>
    64aa:	6860      	ldr	r0, [r4, #4]
    64ac:	2700      	movs	r7, #0
    64ae:	f1b8 0f00 	cmp.w	r8, #0
    64b2:	7800      	ldrb	r0, [r0, #0]
    64b4:	f000 060f 	and.w	r6, r0, #15
    64b8:	d01f      	beq.n	64fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64ba:	f004 fc93 	bl	ade4 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    64be:	b1e0      	cbz	r0, 64fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64c0:	4639      	mov	r1, r7
    64c2:	6860      	ldr	r0, [r4, #4]
    64c4:	f006 ffc2 	bl	d44c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    64c8:	b1b8      	cbz	r0, 64fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64ca:	782a      	ldrb	r2, [r5, #0]
    64cc:	6820      	ldr	r0, [r4, #0]
    64ce:	4631      	mov	r1, r6
    64d0:	2a02      	cmp	r2, #2
    64d2:	d007      	beq.n	64e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    64d4:	782a      	ldrb	r2, [r5, #0]
    64d6:	2a03      	cmp	r2, #3
    64d8:	d004      	beq.n	64e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    64da:	f640 4159 	movw	r1, #3161	; 0xc59
    64de:	202d      	movs	r0, #45	; 0x2d
    64e0:	f7fd fb76 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64e4:	68a2      	ldr	r2, [r4, #8]
    64e6:	782b      	ldrb	r3, [r5, #0]
    64e8:	6952      	ldr	r2, [r2, #20]
    64ea:	f06f 0607 	mvn.w	r6, #7
    64ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    64f2:	58d2      	ldr	r2, [r2, r3]
    64f4:	4790      	blx	r2
    64f6:	4606      	mov	r6, r0
    64f8:	e000      	b.n	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    64fa:	2601      	movs	r6, #1
    64fc:	7ba8      	ldrb	r0, [r5, #14]
    64fe:	b118      	cbz	r0, 6508 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    6500:	f004 fa68 	bl	a9d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6504:	f004 f8aa 	bl	a65c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6508:	2e00      	cmp	r6, #0
    650a:	d00d      	beq.n	6528 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    650c:	6820      	ldr	r0, [r4, #0]
    650e:	f007 fbf9 	bl	dd04 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6512:	b120      	cbz	r0, 651e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    6514:	68a0      	ldr	r0, [r4, #8]
    6516:	6880      	ldr	r0, [r0, #8]
    6518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    651c:	4700      	bx	r0
    651e:	6820      	ldr	r0, [r4, #0]
    6520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6524:	f000 ba7c 	b.w	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    6528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    652c:	20000dac 	.word	0x20000dac
    6530:	200000ec 	.word	0x200000ec
    6534:	b510      	push	{r4, lr}
    6536:	2903      	cmp	r1, #3
    6538:	d002      	beq.n	6540 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    653a:	2905      	cmp	r1, #5
    653c:	d10a      	bne.n	6554 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    653e:	e002      	b.n	6546 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    6540:	f000 fb48 	bl	6bd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x568>
    6544:	e003      	b.n	654e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    6546:	4904      	ldr	r1, [pc, #16]	; (6558 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    6548:	6809      	ldr	r1, [r1, #0]
    654a:	b109      	cbz	r1, 6550 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    654c:	4788      	blx	r1
    654e:	b108      	cbz	r0, 6554 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    6550:	2000      	movs	r0, #0
    6552:	bd10      	pop	{r4, pc}
    6554:	2001      	movs	r0, #1
    6556:	bd10      	pop	{r4, pc}
    6558:	200000f8 	.word	0x200000f8
    655c:	4a09      	ldr	r2, [pc, #36]	; (6584 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    655e:	0003      	movs	r3, r0
    6560:	6810      	ldr	r0, [r2, #0]
    6562:	d001      	beq.n	6568 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6564:	f000 ba5c 	b.w	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    6568:	2900      	cmp	r1, #0
    656a:	d009      	beq.n	6580 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    656c:	6891      	ldr	r1, [r2, #8]
    656e:	4a06      	ldr	r2, [pc, #24]	; (6588 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    6570:	6909      	ldr	r1, [r1, #16]
    6572:	7812      	ldrb	r2, [r2, #0]
    6574:	f06f 030f 	mvn.w	r3, #15
    6578:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    657c:	5889      	ldr	r1, [r1, r2]
    657e:	4708      	bx	r1
    6580:	4770      	bx	lr
    6582:	0000      	.short	0x0000
    6584:	200000ec 	.word	0x200000ec
    6588:	20000dac 	.word	0x20000dac
    658c:	b570      	push	{r4, r5, r6, lr}
    658e:	4604      	mov	r4, r0
    6590:	8840      	ldrh	r0, [r0, #2]
    6592:	2500      	movs	r5, #0
    6594:	2810      	cmp	r0, #16
    6596:	d014      	beq.n	65c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    6598:	4e14      	ldr	r6, [pc, #80]	; (65ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    659a:	7bb0      	ldrb	r0, [r6, #14]
    659c:	b120      	cbz	r0, 65a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    659e:	f004 f87d 	bl	a69c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    65a2:	2040      	movs	r0, #64	; 0x40
    65a4:	f004 fa26 	bl	a9f4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    65a8:	4811      	ldr	r0, [pc, #68]	; (65f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    65aa:	6840      	ldr	r0, [r0, #4]
    65ac:	f004 fcde 	bl	af6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    65b0:	78a0      	ldrb	r0, [r4, #2]
    65b2:	0740      	lsls	r0, r0, #29
    65b4:	d413      	bmi.n	65de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    65b6:	7be0      	ldrb	r0, [r4, #15]
    65b8:	2801      	cmp	r0, #1
    65ba:	d008      	beq.n	65ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    65bc:	2803      	cmp	r0, #3
    65be:	d006      	beq.n	65ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    65c0:	e006      	b.n	65d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    65c2:	4620      	mov	r0, r4
    65c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65c8:	2101      	movs	r1, #1
    65ca:	f7ff bed1 	b.w	6370 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    65ce:	2510      	movs	r5, #16
    65d0:	2100      	movs	r1, #0
    65d2:	f045 020e 	orr.w	r2, r5, #14
    65d6:	7923      	ldrb	r3, [r4, #4]
    65d8:	4608      	mov	r0, r1
    65da:	f004 fd51 	bl	b080 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    65de:	2000      	movs	r0, #0
    65e0:	f004 fb5e 	bl	aca0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    65e4:	2002      	movs	r0, #2
    65e6:	7030      	strb	r0, [r6, #0]
    65e8:	bd70      	pop	{r4, r5, r6, pc}
    65ea:	0000      	.short	0x0000
    65ec:	20000dac 	.word	0x20000dac
    65f0:	200000ec 	.word	0x200000ec
    65f4:	b510      	push	{r4, lr}
    65f6:	4c12      	ldr	r4, [pc, #72]	; (6640 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    65f8:	6820      	ldr	r0, [r4, #0]
    65fa:	f000 f825 	bl	6648 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    65fe:	6820      	ldr	r0, [r4, #0]
    6600:	f007 fb80 	bl	dd04 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6604:	2800      	cmp	r0, #0
    6606:	6820      	ldr	r0, [r4, #0]
    6608:	d00b      	beq.n	6622 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    660a:	490e      	ldr	r1, [pc, #56]	; (6644 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    660c:	780a      	ldrb	r2, [r1, #0]
    660e:	2a02      	cmp	r2, #2
    6610:	d00b      	beq.n	662a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    6612:	780a      	ldrb	r2, [r1, #0]
    6614:	2a03      	cmp	r2, #3
    6616:	d008      	beq.n	662a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    6618:	f640 3194 	movw	r1, #2964	; 0xb94
    661c:	202d      	movs	r0, #45	; 0x2d
    661e:	f7fd fad7 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6626:	f000 b9fb 	b.w	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    662a:	68a2      	ldr	r2, [r4, #8]
    662c:	7809      	ldrb	r1, [r1, #0]
    662e:	68d2      	ldr	r2, [r2, #12]
    6630:	f06f 0307 	mvn.w	r3, #7
    6634:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6638:	5851      	ldr	r1, [r2, r1]
    663a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    663e:	4708      	bx	r1
    6640:	200000ec 	.word	0x200000ec
    6644:	20000dac 	.word	0x20000dac
    6648:	b510      	push	{r4, lr}
    664a:	7b01      	ldrb	r1, [r0, #12]
    664c:	b109      	cbz	r1, 6652 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    664e:	f007 faa2 	bl	db96 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11a>
    6652:	4805      	ldr	r0, [pc, #20]	; (6668 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    6654:	7b80      	ldrb	r0, [r0, #14]
    6656:	2800      	cmp	r0, #0
    6658:	d005      	beq.n	6666 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    665a:	f004 f9bb 	bl	a9d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    665e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6662:	f003 bffb 	b.w	a65c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6666:	bd10      	pop	{r4, pc}
    6668:	20000dac 	.word	0x20000dac

0000666c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6670:	4d54      	ldr	r5, [pc, #336]	; (67c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>)
    6672:	4604      	mov	r4, r0
    6674:	b086      	sub	sp, #24
    6676:	7828      	ldrb	r0, [r5, #0]
    6678:	bbf0      	cbnz	r0, 66f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    667a:	7820      	ldrb	r0, [r4, #0]
    667c:	28ff      	cmp	r0, #255	; 0xff
    667e:	d044      	beq.n	670a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e>
    6680:	2600      	movs	r6, #0
    6682:	81ae      	strh	r6, [r5, #12]
    6684:	606e      	str	r6, [r5, #4]
    6686:	706e      	strb	r6, [r5, #1]
    6688:	70ae      	strb	r6, [r5, #2]
    668a:	f884 6059 	strb.w	r6, [r4, #89]	; 0x59
    668e:	4630      	mov	r0, r6
    6690:	f004 fb6e 	bl	ad70 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    6694:	2214      	movs	r2, #20
    6696:	494c      	ldr	r1, [pc, #304]	; (67c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    6698:	4668      	mov	r0, sp
    669a:	f005 fa70 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    669e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 67cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x160>
    66a2:	f8d8 0008 	ldr.w	r0, [r8, #8]
    66a6:	6840      	ldr	r0, [r0, #4]
    66a8:	9003      	str	r0, [sp, #12]
    66aa:	4668      	mov	r0, sp
    66ac:	f004 facc 	bl	ac48 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    66b0:	f004 fbce 	bl	ae50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    66b4:	f004 f98e 	bl	a9d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    66b8:	f003 ffd0 	bl	a65c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    66bc:	4842      	ldr	r0, [pc, #264]	; (67c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    66be:	1f40      	subs	r0, r0, #5
    66c0:	f004 fd30 	bl	b124 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    66c4:	4840      	ldr	r0, [pc, #256]	; (67c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    66c6:	3808      	subs	r0, #8
    66c8:	f004 fd38 	bl	b13c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    66cc:	f104 0020 	add.w	r0, r4, #32
    66d0:	4607      	mov	r7, r0
    66d2:	f007 facd 	bl	dc70 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    66d6:	4638      	mov	r0, r7
    66d8:	f007 fa8f 	bl	dbfa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    66dc:	4601      	mov	r1, r0
    66de:	4620      	mov	r0, r4
    66e0:	f007 fa4e 	bl	db80 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    66e4:	f994 000e 	ldrsb.w	r0, [r4, #14]
    66e8:	f004 fc3a 	bl	af60 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    66ec:	7921      	ldrb	r1, [r4, #4]
    66ee:	2000      	movs	r0, #0
    66f0:	f004 fa2e 	bl	ab50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    66f4:	60a8      	str	r0, [r5, #8]
    66f6:	e000      	b.n	66fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    66f8:	e007      	b.n	670a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e>
    66fa:	b150      	cbz	r0, 6712 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    66fc:	210f      	movs	r1, #15
    66fe:	2005      	movs	r0, #5
    6700:	f004 f98c 	bl	aa1c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    6704:	7ea0      	ldrb	r0, [r4, #26]
    6706:	b960      	cbnz	r0, 6722 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    6708:	e006      	b.n	6718 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    670a:	200c      	movs	r0, #12
    670c:	b006      	add	sp, #24
    670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6712:	2001      	movs	r0, #1
    6714:	7028      	strb	r0, [r5, #0]
    6716:	e052      	b.n	67be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x152>
    6718:	7e20      	ldrb	r0, [r4, #24]
    671a:	b910      	cbnz	r0, 6722 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    671c:	78a0      	ldrb	r0, [r4, #2]
    671e:	0740      	lsls	r0, r0, #29
    6720:	d52b      	bpl.n	677a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    6722:	f005 f8b7 	bl	b894 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6726:	4682      	mov	sl, r0
    6728:	4651      	mov	r1, sl
    672a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    672c:	f7fa fe6a 	bl	1404 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6730:	f8df 909c 	ldr.w	r9, [pc, #156]	; 67d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    6734:	4607      	mov	r7, r0
    6736:	fb90 f1f9 	sdiv	r1, r0, r9
    673a:	fb09 7011 	mls	r0, r9, r1, r7
    673e:	4241      	negs	r1, r0
    6740:	4650      	mov	r0, sl
    6742:	f7fa fe29 	bl	1398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6746:	63e0      	str	r0, [r4, #60]	; 0x3c
    6748:	fb97 f0f9 	sdiv	r0, r7, r9
    674c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    674e:	4408      	add	r0, r1
    6750:	63a0      	str	r0, [r4, #56]	; 0x38
    6752:	f7fe ff3f 	bl	55d4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6756:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6758:	4288      	cmp	r0, r1
    675a:	d80e      	bhi.n	677a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    675c:	e9c4 6a0e 	strd	r6, sl, [r4, #56]	; 0x38
    6760:	2101      	movs	r1, #1
    6762:	4620      	mov	r0, r4
    6764:	f007 f9d0 	bl	db08 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    6768:	78a0      	ldrb	r0, [r4, #2]
    676a:	0740      	lsls	r0, r0, #29
    676c:	d505      	bpl.n	677a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    676e:	7e20      	ldrb	r0, [r4, #24]
    6770:	b118      	cbz	r0, 677a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    6772:	2101      	movs	r1, #1
    6774:	4620      	mov	r0, r4
    6776:	f000 fa67 	bl	6c48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    677a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    677e:	f104 0041 	add.w	r0, r4, #65	; 0x41
    6782:	f004 fcc3 	bl	b10c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    6786:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
    678a:	b130      	cbz	r0, 679a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12e>
    678c:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
    6790:	86a0      	strh	r0, [r4, #52]	; 0x34
    6792:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6794:	62e0      	str	r0, [r4, #44]	; 0x2c
    6796:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
    679a:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
    679e:	b130      	cbz	r0, 67ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    67a0:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    67a4:	86e0      	strh	r0, [r4, #54]	; 0x36
    67a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    67a8:	6320      	str	r0, [r4, #48]	; 0x30
    67aa:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
    67ae:	f7fe ff77 	bl	56a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    67b2:	2103      	movs	r1, #3
    67b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    67b8:	f006 fadb 	bl	cd72 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    67bc:	73a8      	strb	r0, [r5, #14]
    67be:	2000      	movs	r0, #0
    67c0:	e7a4      	b.n	670c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa0>
    67c2:	0000      	.short	0x0000
    67c4:	20000dac 	.word	0x20000dac
    67c8:	00006d5c 	.word	0x00006d5c
    67cc:	200000ec 	.word	0x200000ec
    67d0:	000f4240 	.word	0x000f4240
    67d4:	b510      	push	{r4, lr}
    67d6:	4604      	mov	r4, r0
    67d8:	f7ff ff48 	bl	666c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    67dc:	2800      	cmp	r0, #0
    67de:	d108      	bne.n	67f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x186>
    67e0:	4804      	ldr	r0, [pc, #16]	; (67f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    67e2:	7800      	ldrb	r0, [r0, #0]
    67e4:	2801      	cmp	r0, #1
    67e6:	d003      	beq.n	67f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>
    67e8:	2100      	movs	r1, #0
    67ea:	4620      	mov	r0, r4
    67ec:	f7ff fdc0 	bl	6370 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    67f0:	2000      	movs	r0, #0
    67f2:	bd10      	pop	{r4, pc}
    67f4:	20000dac 	.word	0x20000dac
    67f8:	480a      	ldr	r0, [pc, #40]	; (6824 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>)
    67fa:	b510      	push	{r4, lr}
    67fc:	490a      	ldr	r1, [pc, #40]	; (6828 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1bc>)
    67fe:	6804      	ldr	r4, [r0, #0]
    6800:	7808      	ldrb	r0, [r1, #0]
    6802:	2800      	cmp	r0, #0
    6804:	d00d      	beq.n	6822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b6>
    6806:	7808      	ldrb	r0, [r1, #0]
    6808:	2802      	cmp	r0, #2
    680a:	d002      	beq.n	6812 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a6>
    680c:	7808      	ldrb	r0, [r1, #0]
    680e:	2803      	cmp	r0, #3
    6810:	d102      	bne.n	6818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    6812:	4620      	mov	r0, r4
    6814:	f7ff ff18 	bl	6648 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    6818:	4620      	mov	r0, r4
    681a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    681e:	f000 b8ff 	b.w	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    6822:	bd10      	pop	{r4, pc}
    6824:	200000ec 	.word	0x200000ec
    6828:	20000dac 	.word	0x20000dac
    682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6830:	4604      	mov	r4, r0
    6832:	4824      	ldr	r0, [pc, #144]	; (68c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x258>)
    6834:	460e      	mov	r6, r1
    6836:	6840      	ldr	r0, [r0, #4]
    6838:	f004 fb98 	bl	af6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    683c:	4d22      	ldr	r5, [pc, #136]	; (68c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25c>)
    683e:	2004      	movs	r0, #4
    6840:	7028      	strb	r0, [r5, #0]
    6842:	b1f6      	cbz	r6, 6882 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x216>
    6844:	8860      	ldrh	r0, [r4, #2]
    6846:	2810      	cmp	r0, #16
    6848:	d024      	beq.n	6894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x228>
    684a:	f104 0020 	add.w	r0, r4, #32
    684e:	4680      	mov	r8, r0
    6850:	68ae      	ldr	r6, [r5, #8]
    6852:	f007 f9c6 	bl	dbe2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6856:	4607      	mov	r7, r0
    6858:	4640      	mov	r0, r8
    685a:	f007 f9eb 	bl	dc34 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    685e:	1a38      	subs	r0, r7, r0
    6860:	1e40      	subs	r0, r0, #1
    6862:	b2c0      	uxtb	r0, r0
    6864:	8861      	ldrh	r1, [r4, #2]
    6866:	2228      	movs	r2, #40	; 0x28
    6868:	f000 fab6 	bl	6dd8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    686c:	1981      	adds	r1, r0, r6
    686e:	78a0      	ldrb	r0, [r4, #2]
    6870:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6874:	b108      	cbz	r0, 687a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x20e>
    6876:	6868      	ldr	r0, [r5, #4]
    6878:	4401      	add	r1, r0
    687a:	7922      	ldrb	r2, [r4, #4]
    687c:	2000      	movs	r0, #0
    687e:	f004 fb83 	bl	af88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6882:	8860      	ldrh	r0, [r4, #2]
    6884:	2813      	cmp	r0, #19
    6886:	d013      	beq.n	68b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6888:	dc09      	bgt.n	689e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x232>
    688a:	2810      	cmp	r0, #16
    688c:	d018      	beq.n	68c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x254>
    688e:	2812      	cmp	r0, #18
    6890:	d109      	bne.n	68a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6892:	e00d      	b.n	68b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6894:	7921      	ldrb	r1, [r4, #4]
    6896:	2000      	movs	r0, #0
    6898:	f004 f90e 	bl	aab8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    689c:	e7f1      	b.n	6882 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x216>
    689e:	2815      	cmp	r0, #21
    68a0:	d006      	beq.n	68b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    68a2:	281d      	cmp	r0, #29
    68a4:	d004      	beq.n	68b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    68a6:	f640 510a 	movw	r1, #3338	; 0xd0a
    68aa:	202d      	movs	r0, #45	; 0x2d
    68ac:	f7fd f990 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68b0:	7923      	ldrb	r3, [r4, #4]
    68b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    68b6:	2201      	movs	r2, #1
    68b8:	4611      	mov	r1, r2
    68ba:	2000      	movs	r0, #0
    68bc:	f004 bbe0 	b.w	b080 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    68c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68c4:	200000ec 	.word	0x200000ec
    68c8:	20000dac 	.word	0x20000dac
    68cc:	b510      	push	{r4, lr}
    68ce:	4604      	mov	r4, r0
    68d0:	7800      	ldrb	r0, [r0, #0]
    68d2:	460b      	mov	r3, r1
    68d4:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    68d8:	29ff      	cmp	r1, #255	; 0xff
    68da:	d010      	beq.n	68fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x292>
    68dc:	f104 029f 	add.w	r2, r4, #159	; 0x9f
    68e0:	1e51      	subs	r1, r2, #1
    68e2:	4618      	mov	r0, r3
    68e4:	f7fe fdf4 	bl	54d0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    68e8:	b130      	cbz	r0, 68f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28c>
    68ea:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    68ee:	f040 0002 	orr.w	r0, r0, #2
    68f2:	f884 009e 	strb.w	r0, [r4, #158]	; 0x9e
    68f6:	e011      	b.n	691c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    68f8:	f640 7119 	movw	r1, #3865	; 0xf19
    68fc:	e01d      	b.n	693a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ce>
    68fe:	4810      	ldr	r0, [pc, #64]	; (6940 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>)
    6900:	6840      	ldr	r0, [r0, #4]
    6902:	7801      	ldrb	r1, [r0, #0]
    6904:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6908:	f884 109e 	strb.w	r1, [r4, #158]	; 0x9e
    690c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6910:	f8c4 109f 	str.w	r1, [r4, #159]	; 0x9f
    6914:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6918:	f8a4 00a3 	strh.w	r0, [r4, #163]	; 0xa3
    691c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6920:	287f      	cmp	r0, #127	; 0x7f
    6922:	d008      	beq.n	6936 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    6924:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    6928:	207f      	movs	r0, #127	; 0x7f
    692a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    692e:	3486      	adds	r4, #134	; 0x86
    6930:	2001      	movs	r0, #1
    6932:	75a0      	strb	r0, [r4, #22]
    6934:	bd10      	pop	{r4, pc}
    6936:	f640 51bb 	movw	r1, #3515	; 0xdbb
    693a:	202d      	movs	r0, #45	; 0x2d
    693c:	f7fd f948 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6940:	200000ec 	.word	0x200000ec
    6944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6948:	4604      	mov	r4, r0
    694a:	8840      	ldrh	r0, [r0, #2]
    694c:	4617      	mov	r7, r2
    694e:	4688      	mov	r8, r1
    6950:	2903      	cmp	r1, #3
    6952:	d006      	beq.n	6962 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    6954:	f000 0501 	and.w	r5, r0, #1
    6958:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    695c:	b118      	cbz	r0, 6966 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    695e:	2001      	movs	r0, #1
    6960:	e002      	b.n	6968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6962:	f3c0 0540 	ubfx	r5, r0, #1, #1
    6966:	2000      	movs	r0, #0
    6968:	4681      	mov	r9, r0
    696a:	f004 f851 	bl	aa10 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    696e:	4606      	mov	r6, r0
    6970:	f1b8 0f03 	cmp.w	r8, #3
    6974:	d025      	beq.n	69c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x356>
    6976:	2001      	movs	r0, #1
    6978:	4680      	mov	r8, r0
    697a:	ea35 0509 	bics.w	r5, r5, r9
    697e:	d046      	beq.n	6a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6980:	4825      	ldr	r0, [pc, #148]	; (6a18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>)
    6982:	7b80      	ldrb	r0, [r0, #14]
    6984:	b138      	cbz	r0, 6996 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    6986:	f006 f9f7 	bl	cd78 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    698a:	7038      	strb	r0, [r7, #0]
    698c:	28ff      	cmp	r0, #255	; 0xff
    698e:	d002      	beq.n	6996 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    6990:	f7fe fdb8 	bl	5504 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6994:	4306      	orrs	r6, r0
    6996:	4d21      	ldr	r5, [pc, #132]	; (6a1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b0>)
    6998:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    699c:	6868      	ldr	r0, [r5, #4]
    699e:	7801      	ldrb	r1, [r0, #0]
    69a0:	f3c1 1180 	ubfx	r1, r1, #6, #1
    69a4:	4291      	cmp	r1, r2
    69a6:	d106      	bne.n	69b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34a>
    69a8:	2206      	movs	r2, #6
    69aa:	f104 0148 	add.w	r1, r4, #72	; 0x48
    69ae:	1cc0      	adds	r0, r0, #3
    69b0:	f005 f8d3 	bl	bb5a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    69b4:	b138      	cbz	r0, 69c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35a>
    69b6:	2000      	movs	r0, #0
    69b8:	7839      	ldrb	r1, [r7, #0]
    69ba:	29ff      	cmp	r1, #255	; 0xff
    69bc:	d009      	beq.n	69d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x366>
    69be:	b9b8      	cbnz	r0, 69f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    69c0:	e003      	b.n	69ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    69c2:	2002      	movs	r0, #2
    69c4:	e7d8      	b.n	6978 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30c>
    69c6:	2001      	movs	r0, #1
    69c8:	e7f6      	b.n	69b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34c>
    69ca:	7e60      	ldrb	r0, [r4, #25]
    69cc:	4288      	cmp	r0, r1
    69ce:	d00f      	beq.n	69f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    69d0:	e008      	b.n	69e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    69d2:	b138      	cbz	r0, 69e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    69d4:	6869      	ldr	r1, [r5, #4]
    69d6:	f811 0b03 	ldrb.w	r0, [r1], #3
    69da:	f3c0 1080 	ubfx	r0, r0, #6, #1
    69de:	f007 f852 	bl	da86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    69e2:	b128      	cbz	r0, 69f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    69e4:	2000      	movs	r0, #0
    69e6:	78a1      	ldrb	r1, [r4, #2]
    69e8:	0749      	lsls	r1, r1, #29
    69ea:	d503      	bpl.n	69f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x388>
    69ec:	b990      	cbnz	r0, 6a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    69ee:	e00e      	b.n	6a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    69f0:	2001      	movs	r0, #1
    69f2:	e7f8      	b.n	69e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    69f4:	b976      	cbnz	r6, 6a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    69f6:	7be0      	ldrb	r0, [r4, #15]
    69f8:	b108      	cbz	r0, 69fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x392>
    69fa:	4540      	cmp	r0, r8
    69fc:	d107      	bne.n	6a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    69fe:	6869      	ldr	r1, [r5, #4]
    6a00:	f811 0b03 	ldrb.w	r0, [r1], #3
    6a04:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6a08:	f007 f83d 	bl	da86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6a0c:	b110      	cbz	r0, 6a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6a0e:	2000      	movs	r0, #0
    6a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a14:	2001      	movs	r0, #1
    6a16:	e7fb      	b.n	6a10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a4>
    6a18:	20000dac 	.word	0x20000dac
    6a1c:	200000ec 	.word	0x200000ec
    6a20:	b570      	push	{r4, r5, r6, lr}
    6a22:	4604      	mov	r4, r0
    6a24:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6a26:	4d10      	ldr	r5, [pc, #64]	; (6a68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3fc>)
    6a28:	1c40      	adds	r0, r0, #1
    6a2a:	62a0      	str	r0, [r4, #40]	; 0x28
    6a2c:	7ba8      	ldrb	r0, [r5, #14]
    6a2e:	2600      	movs	r6, #0
    6a30:	b120      	cbz	r0, 6a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>
    6a32:	f003 ffcf 	bl	a9d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a36:	f003 fe11 	bl	a65c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a3a:	73ae      	strb	r6, [r5, #14]
    6a3c:	702e      	strb	r6, [r5, #0]
    6a3e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    6a42:	b108      	cbz	r0, 6a48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    6a44:	2101      	movs	r1, #1
    6a46:	e00a      	b.n	6a5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f2>
    6a48:	7b60      	ldrb	r0, [r4, #13]
    6a4a:	b138      	cbz	r0, 6a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6a4c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6a4e:	4288      	cmp	r0, r1
    6a50:	d804      	bhi.n	6a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6a52:	2101      	movs	r1, #1
    6a54:	4620      	mov	r0, r4
    6a56:	f000 f9eb 	bl	6e30 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6a5a:	bd70      	pop	{r4, r5, r6, pc}
    6a5c:	2100      	movs	r1, #0
    6a5e:	4620      	mov	r0, r4
    6a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a64:	f000 b9e4 	b.w	6e30 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6a68:	20000dac 	.word	0x20000dac
    6a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a70:	4604      	mov	r4, r0
    6a72:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    6a76:	4616      	mov	r6, r2
    6a78:	460d      	mov	r5, r1
    6a7a:	f88d 0000 	strb.w	r0, [sp]
    6a7e:	9800      	ldr	r0, [sp, #0]
    6a80:	9000      	str	r0, [sp, #0]
    6a82:	f89d 0000 	ldrb.w	r0, [sp]
    6a86:	b110      	cbz	r0, 6a8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    6a88:	f640 31c8 	movw	r1, #3016	; 0xbc8
    6a8c:	e057      	b.n	6b3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d2>
    6a8e:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    6a92:	8828      	ldrh	r0, [r5, #0]
    6a94:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d162      	bne.n	6b62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f6>
    6a9c:	6868      	ldr	r0, [r5, #4]
    6a9e:	f006 f9c9 	bl	ce34 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6aa2:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    6aa6:	8928      	ldrh	r0, [r5, #8]
    6aa8:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    6aac:	8968      	ldrh	r0, [r5, #10]
    6aae:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    6ab2:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    6ab6:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    6aba:	7e21      	ldrb	r1, [r4, #24]
    6abc:	f104 0841 	add.w	r8, r4, #65	; 0x41
    6ac0:	2700      	movs	r7, #0
    6ac2:	b129      	cbz	r1, 6ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x464>
    6ac4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6ac8:	4641      	mov	r1, r8
    6aca:	f006 ff03 	bl	d8d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6ace:	b940      	cbnz	r0, 6ae2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    6ad0:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    6ad4:	b170      	cbz	r0, 6af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    6ad6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6ada:	4641      	mov	r1, r8
    6adc:	f006 fef1 	bl	d8c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6ae0:	b140      	cbz	r0, 6af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    6ae2:	f8d4 0041 	ldr.w	r0, [r4, #65]	; 0x41
    6ae6:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    6aea:	f8b4 0045 	ldrh.w	r0, [r4, #69]	; 0x45
    6aee:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    6af2:	e003      	b.n	6afc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    6af4:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    6af8:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    6afc:	481a      	ldr	r0, [pc, #104]	; (6b68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>)
    6afe:	2eff      	cmp	r6, #255	; 0xff
    6b00:	6841      	ldr	r1, [r0, #4]
    6b02:	7808      	ldrb	r0, [r1, #0]
    6b04:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6b08:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
    6b0c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6b10:	d018      	beq.n	6b44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
    6b12:	f851 0f03 	ldr.w	r0, [r1, #3]!
    6b16:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    6b1a:	8888      	ldrh	r0, [r1, #4]
    6b1c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    6b20:	f104 0274 	add.w	r2, r4, #116	; 0x74
    6b24:	1e51      	subs	r1, r2, #1
    6b26:	4630      	mov	r0, r6
    6b28:	f7fe fcd2 	bl	54d0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6b2c:	b128      	cbz	r0, 6b3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ce>
    6b2e:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    6b32:	f040 0002 	orr.w	r0, r0, #2
    6b36:	7020      	strb	r0, [r4, #0]
    6b38:	e00c      	b.n	6b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e8>
    6b3a:	f640 31e9 	movw	r1, #3049	; 0xbe9
    6b3e:	202d      	movs	r0, #45	; 0x2d
    6b40:	f7fd f846 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b44:	f851 2f03 	ldr.w	r2, [r1, #3]!
    6b48:	6762      	str	r2, [r4, #116]	; 0x74
    6b4a:	8889      	ldrh	r1, [r1, #4]
    6b4c:	f8a4 1078 	strh.w	r1, [r4, #120]	; 0x78
    6b50:	6007      	str	r7, [r0, #0]
    6b52:	8087      	strh	r7, [r0, #4]
    6b54:	8828      	ldrh	r0, [r5, #0]
    6b56:	f7fd fc4b 	bl	43f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b5e:	f005 bef6 	b.w	c94e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b66:	0000      	.short	0x0000
    6b68:	200000ec 	.word	0x200000ec
    6b6c:	b538      	push	{r3, r4, r5, lr}
    6b6e:	4604      	mov	r4, r0
    6b70:	20ff      	movs	r0, #255	; 0xff
    6b72:	f88d 0000 	strb.w	r0, [sp]
    6b76:	2501      	movs	r5, #1
    6b78:	466a      	mov	r2, sp
    6b7a:	2105      	movs	r1, #5
    6b7c:	4620      	mov	r0, r4
    6b7e:	f7ff fee1 	bl	6944 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d8>
    6b82:	b1f8      	cbz	r0, 6bc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x558>
    6b84:	4a11      	ldr	r2, [pc, #68]	; (6bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x560>)
    6b86:	69e0      	ldr	r0, [r4, #28]
    6b88:	6852      	ldr	r2, [r2, #4]
    6b8a:	7c41      	ldrb	r1, [r0, #17]
    6b8c:	7812      	ldrb	r2, [r2, #0]
    6b8e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6b92:	4011      	ands	r1, r2
    6b94:	7441      	strb	r1, [r0, #17]
    6b96:	2201      	movs	r2, #1
    6b98:	4620      	mov	r0, r4
    6b9a:	69e1      	ldr	r1, [r4, #28]
    6b9c:	f000 f882 	bl	6ca4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x638>
    6ba0:	2300      	movs	r3, #0
    6ba2:	f89d 2000 	ldrb.w	r2, [sp]
    6ba6:	4620      	mov	r0, r4
    6ba8:	69e1      	ldr	r1, [r4, #28]
    6baa:	f7ff ff5f 	bl	6a6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    6bae:	2001      	movs	r0, #1
    6bb0:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
    6bb4:	4a06      	ldr	r2, [pc, #24]	; (6bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x564>)
    6bb6:	2100      	movs	r1, #0
    6bb8:	69e0      	ldr	r0, [r4, #28]
    6bba:	7011      	strb	r1, [r2, #0]
    6bbc:	2105      	movs	r1, #5
    6bbe:	f000 fa43 	bl	7048 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6bc2:	e000      	b.n	6bc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55a>
    6bc4:	2500      	movs	r5, #0
    6bc6:	4628      	mov	r0, r5
    6bc8:	bd38      	pop	{r3, r4, r5, pc}
    6bca:	0000      	.short	0x0000
    6bcc:	200000ec 	.word	0x200000ec
    6bd0:	20000dac 	.word	0x20000dac
    6bd4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6bd6:	4604      	mov	r4, r0
    6bd8:	20ff      	movs	r0, #255	; 0xff
    6bda:	f88d 0000 	strb.w	r0, [sp]
    6bde:	2501      	movs	r5, #1
    6be0:	466a      	mov	r2, sp
    6be2:	2103      	movs	r1, #3
    6be4:	4620      	mov	r0, r4
    6be6:	f7ff fead 	bl	6944 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d8>
    6bea:	b328      	cbz	r0, 6c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    6bec:	7b20      	ldrb	r0, [r4, #12]
    6bee:	b168      	cbz	r0, 6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a0>
    6bf0:	f894 009c 	ldrb.w	r0, [r4, #156]	; 0x9c
    6bf4:	f88d 0004 	strb.w	r0, [sp, #4]
    6bf8:	9801      	ldr	r0, [sp, #4]
    6bfa:	9001      	str	r0, [sp, #4]
    6bfc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6c00:	b920      	cbnz	r0, 6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a0>
    6c02:	f89d 1000 	ldrb.w	r1, [sp]
    6c06:	4620      	mov	r0, r4
    6c08:	f7ff fe60 	bl	68cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    6c0c:	4e0c      	ldr	r6, [pc, #48]	; (6c40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>)
    6c0e:	2100      	movs	r1, #0
    6c10:	6870      	ldr	r0, [r6, #4]
    6c12:	8001      	strh	r1, [r0, #0]
    6c14:	2104      	movs	r1, #4
    6c16:	f006 fc63 	bl	d4e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6c1a:	4620      	mov	r0, r4
    6c1c:	f000 f888 	bl	6d30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    6c20:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    6c22:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6c24:	6870      	ldr	r0, [r6, #4]
    6c26:	f006 fc92 	bl	d54e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6c2a:	4906      	ldr	r1, [pc, #24]	; (6c44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>)
    6c2c:	2005      	movs	r0, #5
    6c2e:	7008      	strb	r0, [r1, #0]
    6c30:	6870      	ldr	r0, [r6, #4]
    6c32:	f004 f99b 	bl	af6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c36:	e000      	b.n	6c3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ce>
    6c38:	2500      	movs	r5, #0
    6c3a:	4628      	mov	r0, r5
    6c3c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6c3e:	0000      	.short	0x0000
    6c40:	200000ec 	.word	0x200000ec
    6c44:	20000dac 	.word	0x20000dac
    6c48:	b570      	push	{r4, r5, r6, lr}
    6c4a:	4604      	mov	r4, r0
    6c4c:	460e      	mov	r6, r1
    6c4e:	7e40      	ldrb	r0, [r0, #25]
    6c50:	f7fe fc0c 	bl	546c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6c54:	0005      	movs	r5, r0
    6c56:	d019      	beq.n	6c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6c58:	2110      	movs	r1, #16
    6c5a:	f006 fa89 	bl	d170 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6c5e:	2800      	cmp	r0, #0
    6c60:	d114      	bne.n	6c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6c62:	2001      	movs	r0, #1
    6c64:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    6c68:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6c6c:	4632      	mov	r2, r6
    6c6e:	460c      	mov	r4, r1
    6c70:	4628      	mov	r0, r5
    6c72:	f006 f810 	bl	cc96 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6c76:	4621      	mov	r1, r4
    6c78:	4c05      	ldr	r4, [pc, #20]	; (6c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>)
    6c7a:	6860      	ldr	r0, [r4, #4]
    6c7c:	f006 fc4b 	bl	d516 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6c80:	6860      	ldr	r0, [r4, #4]
    6c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c86:	2101      	movs	r1, #1
    6c88:	f006 bc4b 	b.w	d522 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6c8c:	bd70      	pop	{r4, r5, r6, pc}
    6c8e:	0000      	.short	0x0000
    6c90:	200000ec 	.word	0x200000ec
    6c94:	4802      	ldr	r0, [pc, #8]	; (6ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x634>)
    6c96:	2101      	movs	r1, #1
    6c98:	6800      	ldr	r0, [r0, #0]
    6c9a:	f7ff bb69 	b.w	6370 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6c9e:	0000      	.short	0x0000
    6ca0:	200000ec 	.word	0x200000ec
    6ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ca8:	4e20      	ldr	r6, [pc, #128]	; (6d2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c0>)
    6caa:	4680      	mov	r8, r0
    6cac:	460c      	mov	r4, r1
    6cae:	6870      	ldr	r0, [r6, #4]
    6cb0:	4615      	mov	r5, r2
    6cb2:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    6cb6:	f8c4 1012 	str.w	r1, [r4, #18]
    6cba:	8881      	ldrh	r1, [r0, #4]
    6cbc:	82e1      	strh	r1, [r4, #22]
    6cbe:	7981      	ldrb	r1, [r0, #6]
    6cc0:	7621      	strb	r1, [r4, #24]
    6cc2:	8940      	ldrh	r0, [r0, #10]
    6cc4:	f006 f8b2 	bl	ce2c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6cc8:	4607      	mov	r7, r0
    6cca:	6060      	str	r0, [r4, #4]
    6ccc:	6870      	ldr	r0, [r6, #4]
    6cce:	4639      	mov	r1, r7
    6cd0:	7d80      	ldrb	r0, [r0, #22]
    6cd2:	f006 fa48 	bl	d166 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6cd6:	8360      	strh	r0, [r4, #26]
    6cd8:	6870      	ldr	r0, [r6, #4]
    6cda:	4639      	mov	r1, r7
    6cdc:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    6ce0:	f006 fa3d 	bl	d15e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6ce4:	61e0      	str	r0, [r4, #28]
    6ce6:	6870      	ldr	r0, [r6, #4]
    6ce8:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    6cec:	8121      	strh	r1, [r4, #8]
    6cee:	8841      	ldrh	r1, [r0, #2]
    6cf0:	8161      	strh	r1, [r4, #10]
    6cf2:	6841      	ldr	r1, [r0, #4]
    6cf4:	60e1      	str	r1, [r4, #12]
    6cf6:	7a01      	ldrb	r1, [r0, #8]
    6cf8:	7421      	strb	r1, [r4, #16]
    6cfa:	7a41      	ldrb	r1, [r0, #9]
    6cfc:	f001 011f 	and.w	r1, r1, #31
    6d00:	f884 1020 	strb.w	r1, [r4, #32]
    6d04:	7a40      	ldrb	r0, [r0, #9]
    6d06:	0940      	lsrs	r0, r0, #5
    6d08:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    6d0c:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    6d10:	2101      	movs	r1, #1
    6d12:	7205      	strb	r5, [r0, #8]
    6d14:	7245      	strb	r5, [r0, #9]
    6d16:	7281      	strb	r1, [r0, #10]
    6d18:	2100      	movs	r1, #0
    6d1a:	3836      	subs	r0, #54	; 0x36
    6d1c:	f006 fd52 	bl	d7c4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6d20:	f898 000e 	ldrb.w	r0, [r8, #14]
    6d24:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    6d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d2c:	200000ec 	.word	0x200000ec
    6d30:	b570      	push	{r4, r5, r6, lr}
    6d32:	4d07      	ldr	r5, [pc, #28]	; (6d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e4>)
    6d34:	4604      	mov	r4, r0
    6d36:	f100 0141 	add.w	r1, r0, #65	; 0x41
    6d3a:	6868      	ldr	r0, [r5, #4]
    6d3c:	f006 fbf8 	bl	d530 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6d40:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    6d44:	6868      	ldr	r0, [r5, #4]
    6d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d4a:	f006 bbf7 	b.w	d53c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    6d4e:	0000      	.short	0x0000
    6d50:	200000ec 	.word	0x200000ec
    6d54:	d6555555 	.word	0xd6555555
    6d58:	008e89be 	.word	0x008e89be
    6d5c:	000065f5 	.word	0x000065f5
    6d60:	00006485 	.word	0x00006485
    6d64:	0000655d 	.word	0x0000655d
    6d68:	00000000 	.word	0x00000000
    6d6c:	00006fb5 	.word	0x00006fb5
    6d70:	00006535 	.word	0x00006535
    6d74:	0000658d 	.word	0x0000658d
    6d78:	0000daad 	.word	0x0000daad
    6d7c:	0000dab3 	.word	0x0000dab3
    6d80:	000067d5 	.word	0x000067d5
    6d84:	000067f9 	.word	0x000067f9
    6d88:	00006c95 	.word	0x00006c95
    6d8c:	00006d7c 	.word	0x00006d7c
    6d90:	00006d74 	.word	0x00006d74
    6d94:	00006d70 	.word	0x00006d70

00006d98 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    6d98:	b510      	push	{r4, lr}
    6d9a:	1e42      	subs	r2, r0, #1
    6d9c:	2a02      	cmp	r2, #2
    6d9e:	d901      	bls.n	6da4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    6da0:	21ca      	movs	r1, #202	; 0xca
    6da2:	e009      	b.n	6db8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    6da4:	1e40      	subs	r0, r0, #1
    6da6:	2910      	cmp	r1, #16
    6da8:	d009      	beq.n	6dbe <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    6daa:	2912      	cmp	r1, #18
    6dac:	d00c      	beq.n	6dc8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6dae:	2913      	cmp	r1, #19
    6db0:	d00a      	beq.n	6dc8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6db2:	2915      	cmp	r1, #21
    6db4:	d005      	beq.n	6dc2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    6db6:	21d8      	movs	r1, #216	; 0xd8
    6db8:	202f      	movs	r0, #47	; 0x2f
    6dba:	f7fc ff09 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dbe:	4905      	ldr	r1, [pc, #20]	; (6dd4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6dc0:	e004      	b.n	6dcc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6dc2:	4904      	ldr	r1, [pc, #16]	; (6dd4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6dc4:	1d89      	adds	r1, r1, #6
    6dc6:	e001      	b.n	6dcc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6dc8:	4902      	ldr	r1, [pc, #8]	; (6dd4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6dca:	1f89      	subs	r1, r1, #6
    6dcc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    6dd0:	bd10      	pop	{r4, pc}
    6dd2:	0000      	.short	0x0000
    6dd4:	0000dcf8 	.word	0x0000dcf8

00006dd8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    6dd8:	1e42      	subs	r2, r0, #1
    6dda:	b510      	push	{r4, lr}
    6ddc:	b2d2      	uxtb	r2, r2
    6dde:	2a01      	cmp	r2, #1
    6de0:	d903      	bls.n	6dea <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6de2:	291d      	cmp	r1, #29
    6de4:	d001      	beq.n	6dea <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6de6:	21ee      	movs	r1, #238	; 0xee
    6de8:	e00d      	b.n	6e06 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    6dea:	2913      	cmp	r1, #19
    6dec:	d013      	beq.n	6e16 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6dee:	dc04      	bgt.n	6dfa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    6df0:	2910      	cmp	r1, #16
    6df2:	d00b      	beq.n	6e0c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    6df4:	2912      	cmp	r1, #18
    6df6:	d104      	bne.n	6e02 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    6df8:	e00d      	b.n	6e16 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6dfa:	2915      	cmp	r1, #21
    6dfc:	d008      	beq.n	6e10 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    6dfe:	291d      	cmp	r1, #29
    6e00:	d00e      	beq.n	6e20 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    6e02:	f44f 7181 	mov.w	r1, #258	; 0x102
    6e06:	202f      	movs	r0, #47	; 0x2f
    6e08:	f7fc fee2 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e0c:	4807      	ldr	r0, [pc, #28]	; (6e2c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e0e:	e004      	b.n	6e1a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6e10:	4806      	ldr	r0, [pc, #24]	; (6e2c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e12:	3008      	adds	r0, #8
    6e14:	e001      	b.n	6e1a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6e16:	4805      	ldr	r0, [pc, #20]	; (6e2c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e18:	1d00      	adds	r0, r0, #4
    6e1a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    6e1e:	bd10      	pop	{r4, pc}
    6e20:	f240 315a 	movw	r1, #858	; 0x35a
    6e24:	fb10 f001 	smulbb	r0, r0, r1
    6e28:	bd10      	pop	{r4, pc}
    6e2a:	0000      	.short	0x0000
    6e2c:	0000dce6 	.word	0x0000dce6

00006e30 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    6e30:	b510      	push	{r4, lr}
    6e32:	b131      	cbz	r1, 6e42 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    6e34:	2901      	cmp	r1, #1
    6e36:	d008      	beq.n	6e4a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    6e38:	f240 71c1 	movw	r1, #1985	; 0x7c1
    6e3c:	2030      	movs	r0, #48	; 0x30
    6e3e:	f7fc fec7 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e46:	f000 bab1 	b.w	73ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    6e4a:	2100      	movs	r1, #0
    6e4c:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    6e50:	f007 f89b 	bl	df8a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    6e54:	4802      	ldr	r0, [pc, #8]	; (6e60 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x30>)
    6e56:	7940      	ldrb	r0, [r0, #5]
    6e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e5c:	f7fc bd08 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6e60:	200000fc 	.word	0x200000fc

00006e64 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    6e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e68:	4604      	mov	r4, r0
    6e6a:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    6e6e:	4615      	mov	r5, r2
    6e70:	460e      	mov	r6, r1
    6e72:	2800      	cmp	r0, #0
    6e74:	d15f      	bne.n	6f36 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd2>
    6e76:	4846      	ldr	r0, [pc, #280]	; (6f90 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    6e78:	f7fb fa2c 	bl	22d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    6e7c:	4607      	mov	r7, r0
    6e7e:	2820      	cmp	r0, #32
    6e80:	d059      	beq.n	6f36 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd2>
    6e82:	7821      	ldrb	r1, [r4, #0]
    6e84:	f7fe fdd0 	bl	5a28 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I>
    6e88:	2234      	movs	r2, #52	; 0x34
    6e8a:	2100      	movs	r1, #0
    6e8c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    6e90:	f004 feef 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6e94:	f884 70a8 	strb.w	r7, [r4, #168]	; 0xa8
    6e98:	2703      	movs	r7, #3
    6e9a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    6e9e:	f884 70b8 	strb.w	r7, [r4, #184]	; 0xb8
    6ea2:	b15e      	cbz	r6, 6ebc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x58>
    6ea4:	2101      	movs	r1, #1
    6ea6:	f506 708e 	add.w	r0, r6, #284	; 0x11c
    6eaa:	f7fc ff3d 	bl	3d28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    6eae:	f896 011c 	ldrb.w	r0, [r6, #284]	; 0x11c
    6eb2:	f000 0007 	and.w	r0, r0, #7
    6eb6:	1c40      	adds	r0, r0, #1
    6eb8:	f886 011c 	strb.w	r0, [r6, #284]	; 0x11c
    6ebc:	4620      	mov	r0, r4
    6ebe:	f007 f87f 	bl	dfc0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    6ec2:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    6ec6:	f884 70c6 	strb.w	r7, [r4, #198]	; 0xc6
    6eca:	2701      	movs	r7, #1
    6ecc:	f884 70c7 	strb.w	r7, [r4, #199]	; 0xc7
    6ed0:	2600      	movs	r6, #0
    6ed2:	f804 6fbc 	strb.w	r6, [r4, #188]!
    6ed6:	f7fa fba1 	bl	161c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    6eda:	8921      	ldrh	r1, [r4, #8]
    6edc:	3cbc      	subs	r4, #188	; 0xbc
    6ede:	4288      	cmp	r0, r1
    6ee0:	d800      	bhi.n	6ee4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x80>
    6ee2:	4608      	mov	r0, r1
    6ee4:	f200 60c3 	addw	r0, r0, #1731	; 0x6c3
    6ee8:	fa1f f880 	uxth.w	r8, r0
    6eec:	4620      	mov	r0, r4
    6eee:	f006 fd7b 	bl	d9e8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6ef2:	b318      	cbz	r0, 6f3c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd8>
    6ef4:	4827      	ldr	r0, [pc, #156]	; (6f94 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x130>)
    6ef6:	7800      	ldrb	r0, [r0, #0]
    6ef8:	f000 f8e2 	bl	70c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    6efc:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    6f00:	b281      	uxth	r1, r0
    6f02:	4628      	mov	r0, r5
    6f04:	f004 fcfa 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    6f08:	4428      	add	r0, r5
    6f0a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    6f0e:	34ac      	adds	r4, #172	; 0xac
    6f10:	f004 fcc0 	bl	b894 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f14:	4641      	mov	r1, r8
    6f16:	f7fa fa3f 	bl	1398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6f1a:	61e0      	str	r0, [r4, #28]
    6f1c:	f804 6c03 	strb.w	r6, [r4, #-3]
    6f20:	7127      	strb	r7, [r4, #4]
    6f22:	2001      	movs	r0, #1
    6f24:	f006 fedb 	bl	dcde <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6f28:	f200 100d 	addw	r0, r0, #269	; 0x10d
    6f2c:	1a28      	subs	r0, r5, r0
    6f2e:	62a6      	str	r6, [r4, #40]	; 0x28
    6f30:	60a0      	str	r0, [r4, #8]
    6f32:	3cac      	subs	r4, #172	; 0xac
    6f34:	e017      	b.n	6f66 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x102>
    6f36:	200c      	movs	r0, #12
    6f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f3c:	4620      	mov	r0, r4
    6f3e:	f006 ffed 	bl	df1c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    6f42:	f844 0fc0 	str.w	r0, [r4, #192]!
    6f46:	f804 7c17 	strb.w	r7, [r4, #-23]
    6f4a:	f004 fca3 	bl	b894 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f4e:	4607      	mov	r7, r0
    6f50:	2000      	movs	r0, #0
    6f52:	f007 f864 	bl	e01e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    6f56:	eb00 0108 	add.w	r1, r0, r8
    6f5a:	4638      	mov	r0, r7
    6f5c:	f7fa fa1c 	bl	1398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6f60:	6165      	str	r5, [r4, #20]
    6f62:	60a0      	str	r0, [r4, #8]
    6f64:	3cc0      	subs	r4, #192	; 0xc0
    6f66:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    6f6a:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    6f6e:	f007 f825 	bl	dfbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    6f72:	b138      	cbz	r0, 6f84 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x120>
    6f74:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
    6f78:	2100      	movs	r1, #0
    6f7a:	4620      	mov	r0, r4
    6f7c:	f006 fd69 	bl	da52 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    6f80:	2000      	movs	r0, #0
    6f82:	e7d9      	b.n	6f38 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd4>
    6f84:	f44f 7109 	mov.w	r1, #548	; 0x224
    6f88:	2030      	movs	r0, #48	; 0x30
    6f8a:	f7fc fe21 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f8e:	0000      	.short	0x0000
    6f90:	0000e049 	.word	0x0000e049
    6f94:	200000fc 	.word	0x200000fc

00006f98 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    6f98:	4905      	ldr	r1, [pc, #20]	; (6fb0 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x18>)
    6f9a:	7148      	strb	r0, [r1, #5]
    6f9c:	2000      	movs	r0, #0
    6f9e:	7088      	strb	r0, [r1, #2]
    6fa0:	2201      	movs	r2, #1
    6fa2:	700a      	strb	r2, [r1, #0]
    6fa4:	7048      	strb	r0, [r1, #1]
    6fa6:	710a      	strb	r2, [r1, #4]
    6fa8:	70c8      	strb	r0, [r1, #3]
    6faa:	f006 bef6 	b.w	dd9a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    6fae:	0000      	.short	0x0000
    6fb0:	200000fc 	.word	0x200000fc

00006fb4 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    6fb4:	4905      	ldr	r1, [pc, #20]	; (6fcc <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    6fb6:	788a      	ldrb	r2, [r1, #2]
    6fb8:	2a02      	cmp	r2, #2
    6fba:	d003      	beq.n	6fc4 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x10>
    6fbc:	6a09      	ldr	r1, [r1, #32]
    6fbe:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    6fc2:	4770      	bx	lr
    6fc4:	6949      	ldr	r1, [r1, #20]
    6fc6:	f8c1 0164 	str.w	r0, [r1, #356]	; 0x164
    6fca:	4770      	bx	lr
    6fcc:	200000fc 	.word	0x200000fc

00006fd0 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    6fd0:	4901      	ldr	r1, [pc, #4]	; (6fd8 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    6fd2:	7008      	strb	r0, [r1, #0]
    6fd4:	4770      	bx	lr
    6fd6:	0000      	.short	0x0000
    6fd8:	200000fc 	.word	0x200000fc

00006fdc <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    6fdc:	4901      	ldr	r1, [pc, #4]	; (6fe4 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    6fde:	7048      	strb	r0, [r1, #1]
    6fe0:	4770      	bx	lr
    6fe2:	0000      	.short	0x0000
    6fe4:	200000fc 	.word	0x200000fc

00006fe8 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    6fe8:	4905      	ldr	r1, [pc, #20]	; (7000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    6fea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6fee:	fbb1 f1f2 	udiv	r1, r1, r2
    6ff2:	b510      	push	{r4, lr}
    6ff4:	f201 2193 	addw	r1, r1, #659	; 0x293
    6ff8:	f006 fbfd 	bl	d7f6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    6ffc:	b280      	uxth	r0, r0
    6ffe:	bd10      	pop	{r4, pc}
    7000:	0001527d 	.word	0x0001527d

00007004 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7004:	b570      	push	{r4, r5, r6, lr}
    7006:	4c0f      	ldr	r4, [pc, #60]	; (7044 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x40>)
    7008:	f8d0 6164 	ldr.w	r6, [r0, #356]	; 0x164
    700c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    7010:	7860      	ldrb	r0, [r4, #1]
    7012:	b120      	cbz	r0, 701e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1a>
    7014:	4632      	mov	r2, r6
    7016:	4628      	mov	r0, r5
    7018:	f005 ff12 	bl	ce40 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    701c:	4605      	mov	r5, r0
    701e:	68a0      	ldr	r0, [r4, #8]
    7020:	4285      	cmp	r5, r0
    7022:	d005      	beq.n	7030 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2c>
    7024:	6921      	ldr	r1, [r4, #16]
    7026:	1a28      	subs	r0, r5, r0
    7028:	4408      	add	r0, r1
    702a:	6120      	str	r0, [r4, #16]
    702c:	f7fb fa4a 	bl	24c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7030:	60a5      	str	r5, [r4, #8]
    7032:	42ae      	cmp	r6, r5
    7034:	d801      	bhi.n	703a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x36>
    7036:	78e0      	ldrb	r0, [r4, #3]
    7038:	b108      	cbz	r0, 703e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    703a:	2000      	movs	r0, #0
    703c:	bd70      	pop	{r4, r5, r6, pc}
    703e:	2001      	movs	r0, #1
    7040:	bd70      	pop	{r4, r5, r6, pc}
    7042:	0000      	.short	0x0000
    7044:	200000fc 	.word	0x200000fc

00007048 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7048:	b570      	push	{r4, r5, r6, lr}
    704a:	4d1c      	ldr	r5, [pc, #112]	; (70bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>)
    704c:	4604      	mov	r4, r0
    704e:	2906      	cmp	r1, #6
    7050:	d22e      	bcs.n	70b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68>
    7052:	e8df f001 	tbb	[pc, r1]
    7056:	0b05      	.short	0x0b05
    7058:	250f0e03 	.word	0x250f0e03
    705c:	2100      	movs	r1, #0
    705e:	e000      	b.n	7062 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    7060:	2101      	movs	r1, #1
    7062:	4620      	mov	r0, r4
    7064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7068:	f000 ba1a 	b.w	74a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x458>
    706c:	2003      	movs	r0, #3
    706e:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7072:	bd70      	pop	{r4, r5, r6, pc}
    7074:	f003 feb0 	bl	add8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7078:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    707c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7080:	f008 f839 	bl	f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7084:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7088:	1a08      	subs	r0, r1, r0
    708a:	68a9      	ldr	r1, [r5, #8]
    708c:	4401      	add	r1, r0
    708e:	60a9      	str	r1, [r5, #8]
    7090:	68e9      	ldr	r1, [r5, #12]
    7092:	4408      	add	r0, r1
    7094:	60e8      	str	r0, [r5, #12]
    7096:	4620      	mov	r0, r4
    7098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    709c:	f000 b926 	b.w	72ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a4>
    70a0:	6a28      	ldr	r0, [r5, #32]
    70a2:	2200      	movs	r2, #0
    70a4:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    70a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70ac:	f000 b9be 	b.w	742c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e4>
    70b0:	f240 71af 	movw	r1, #1967	; 0x7af
    70b4:	2030      	movs	r0, #48	; 0x30
    70b6:	f7fc fd8b 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70ba:	0000      	.short	0x0000
    70bc:	200000fc 	.word	0x200000fc
    70c0:	b510      	push	{r4, lr}
    70c2:	280c      	cmp	r0, #12
    70c4:	d304      	bcc.n	70d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x88>
    70c6:	f240 312a 	movw	r1, #810	; 0x32a
    70ca:	2006      	movs	r0, #6
    70cc:	f7fc fd80 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70d0:	4901      	ldr	r1, [pc, #4]	; (70d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    70d2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    70d6:	bd10      	pop	{r4, pc}
    70d8:	0000e09a 	.word	0x0000e09a
    70dc:	b570      	push	{r4, r5, r6, lr}
    70de:	4604      	mov	r4, r0
    70e0:	2601      	movs	r6, #1
    70e2:	f006 ff6d 	bl	dfc0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    70e6:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    70ea:	2000      	movs	r0, #0
    70ec:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    70f0:	2001      	movs	r0, #1
    70f2:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    70f6:	f894 00b0 	ldrb.w	r0, [r4, #176]	; 0xb0
    70fa:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    70fe:	b160      	cbz	r0, 711a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd2>
    7100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7104:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    7108:	f7fa f946 	bl	1398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    710c:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    7110:	2100      	movs	r1, #0
    7112:	4628      	mov	r0, r5
    7114:	f005 ff73 	bl	cffe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7118:	e00f      	b.n	713a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf2>
    711a:	4620      	mov	r0, r4
    711c:	f006 fc44 	bl	d9a8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    7120:	4606      	mov	r6, r0
    7122:	4631      	mov	r1, r6
    7124:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    7128:	f7fa f936 	bl	1398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    712c:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    7130:	4631      	mov	r1, r6
    7132:	4628      	mov	r0, r5
    7134:	f005 ff63 	bl	cffe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7138:	1c46      	adds	r6, r0, #1
    713a:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    713e:	1c41      	adds	r1, r0, #1
    7140:	290a      	cmp	r1, #10
    7142:	d202      	bcs.n	714a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7144:	4430      	add	r0, r6
    7146:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
    714a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    714e:	b130      	cbz	r0, 715e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x116>
    7150:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    7154:	1c40      	adds	r0, r0, #1
    7156:	280a      	cmp	r0, #10
    7158:	d301      	bcc.n	715e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x116>
    715a:	2002      	movs	r0, #2
    715c:	e000      	b.n	7160 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    715e:	2003      	movs	r0, #3
    7160:	f884 00c6 	strb.w	r0, [r4, #198]	; 0xc6
    7164:	2100      	movs	r1, #0
    7166:	4620      	mov	r0, r4
    7168:	f006 fede 	bl	df28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd8>
    716c:	b140      	cbz	r0, 7180 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x138>
    716e:	4620      	mov	r0, r4
    7170:	f006 fecb 	bl	df0a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7174:	4809      	ldr	r0, [pc, #36]	; (719c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x154>)
    7176:	7940      	ldrb	r0, [r0, #5]
    7178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    717c:	f7fc bb78 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7180:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    7184:	4629      	mov	r1, r5
    7186:	f006 ff19 	bl	dfbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    718a:	2800      	cmp	r0, #0
    718c:	d104      	bne.n	7198 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    718e:	f240 61e4 	movw	r1, #1764	; 0x6e4
    7192:	2030      	movs	r0, #48	; 0x30
    7194:	f7fc fd1c 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7198:	bd70      	pop	{r4, r5, r6, pc}
    719a:	0000      	.short	0x0000
    719c:	200000fc 	.word	0x200000fc
    71a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    71a2:	4c18      	ldr	r4, [pc, #96]	; (7204 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
    71a4:	2001      	movs	r0, #1
    71a6:	70e0      	strb	r0, [r4, #3]
    71a8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    71ac:	e00b      	b.n	71c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x17e>
    71ae:	2100      	movs	r1, #0
    71b0:	f005 fcf7 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    71b4:	0006      	movs	r6, r0
    71b6:	d010      	beq.n	71da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x192>
    71b8:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    71bc:	f7fa ff82 	bl	20c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    71c0:	4630      	mov	r0, r6
    71c2:	f006 ff19 	bl	dff8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    71c6:	4669      	mov	r1, sp
    71c8:	2000      	movs	r0, #0
    71ca:	f005 fcf4 	bl	cbb6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    71ce:	b180      	cbz	r0, 71f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    71d0:	f240 1137 	movw	r1, #311	; 0x137
    71d4:	2030      	movs	r0, #48	; 0x30
    71d6:	f7fc fcfb 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71da:	f240 1157 	movw	r1, #343	; 0x157
    71de:	e7f9      	b.n	71d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18c>
    71e0:	9802      	ldr	r0, [sp, #8]
    71e2:	b130      	cbz	r0, 71f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    71e4:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    71e8:	b119      	cbz	r1, 71f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    71ea:	8800      	ldrh	r0, [r0, #0]
    71ec:	42a8      	cmp	r0, r5
    71ee:	d1de      	bne.n	71ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x166>
    71f0:	e004      	b.n	71fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b4>
    71f2:	4668      	mov	r0, sp
    71f4:	f7fc ff1a 	bl	402c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    71f8:	2800      	cmp	r0, #0
    71fa:	d0f1      	beq.n	71e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x198>
    71fc:	2000      	movs	r0, #0
    71fe:	70e0      	strb	r0, [r4, #3]
    7200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7202:	0000      	.short	0x0000
    7204:	200000fc 	.word	0x200000fc
    7208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    720c:	4604      	mov	r4, r0
    720e:	4836      	ldr	r0, [pc, #216]	; (72e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a0>)
    7210:	461e      	mov	r6, r3
    7212:	4690      	mov	r8, r2
    7214:	7900      	ldrb	r0, [r0, #4]
    7216:	4689      	mov	r9, r1
    7218:	2500      	movs	r5, #0
    721a:	b368      	cbz	r0, 7278 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    721c:	f7fc f998 	bl	3550 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7220:	b350      	cbz	r0, 7278 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    7222:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    7226:	2802      	cmp	r0, #2
    7228:	d326      	bcc.n	7278 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    722a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    722e:	2802      	cmp	r0, #2
    7230:	d022      	beq.n	7278 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    7232:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    7236:	b9f8      	cbnz	r0, 7278 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    7238:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    723c:	f7ff ff40 	bl	70c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7240:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7244:	b281      	uxth	r1, r0
    7246:	8031      	strh	r1, [r6, #0]
    7248:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    724c:	2700      	movs	r7, #0
    724e:	2801      	cmp	r0, #1
    7250:	d015      	beq.n	727e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x236>
    7252:	6860      	ldr	r0, [r4, #4]
    7254:	f004 fb52 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7258:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    725c:	b280      	uxth	r0, r0
    725e:	4442      	add	r2, r8
    7260:	eba2 0109 	sub.w	r1, r2, r9
    7264:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7268:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    726c:	1a82      	subs	r2, r0, r2
    726e:	fb01 7502 	mla	r5, r1, r2, r7
    7272:	2001      	movs	r0, #1
    7274:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    7278:	4628      	mov	r0, r5
    727a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    727e:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7282:	2803      	cmp	r0, #3
    7284:	d02c      	beq.n	72e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x298>
    7286:	2101      	movs	r1, #1
    7288:	2000      	movs	r0, #0
    728a:	f005 fea6 	bl	cfda <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    728e:	69e1      	ldr	r1, [r4, #28]
    7290:	1847      	adds	r7, r0, r1
    7292:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7296:	8831      	ldrh	r1, [r6, #0]
    7298:	34c8      	adds	r4, #200	; 0xc8
    729a:	f004 fb2f 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    729e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    72a0:	6e21      	ldr	r1, [r4, #96]	; 0x60
    72a2:	1a82      	subs	r2, r0, r2
    72a4:	fb01 5502 	mla	r5, r1, r2, r5
    72a8:	65a0      	str	r0, [r4, #88]	; 0x58
    72aa:	8831      	ldrh	r1, [r6, #0]
    72ac:	4638      	mov	r0, r7
    72ae:	f004 fb25 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    72b2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    72b4:	66a0      	str	r0, [r4, #104]	; 0x68
    72b6:	1a41      	subs	r1, r0, r1
    72b8:	440d      	add	r5, r1
    72ba:	8831      	ldrh	r1, [r6, #0]
    72bc:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    72c0:	f004 fb1c 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    72c4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    72c6:	4442      	add	r2, r8
    72c8:	eba2 0109 	sub.w	r1, r2, r9
    72cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    72ce:	1a89      	subs	r1, r1, r2
    72d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    72d2:	1e49      	subs	r1, r1, #1
    72d4:	1a82      	subs	r2, r0, r2
    72d6:	fb01 5502 	mla	r5, r1, r2, r5
    72da:	66e0      	str	r0, [r4, #108]	; 0x6c
    72dc:	3cc8      	subs	r4, #200	; 0xc8
    72de:	e7c8      	b.n	7272 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22a>
    72e0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    72e4:	e7d3      	b.n	728e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x246>
    72e6:	0000      	.short	0x0000
    72e8:	200000fc 	.word	0x200000fc
    72ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72f0:	4604      	mov	r4, r0
    72f2:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    72f6:	2800      	cmp	r0, #0
    72f8:	d053      	beq.n	73a2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    72fa:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    72fe:	2803      	cmp	r0, #3
    7300:	d14f      	bne.n	73a2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    7302:	4829      	ldr	r0, [pc, #164]	; (73a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x360>)
    7304:	f894 9067 	ldrb.w	r9, [r4, #103]	; 0x67
    7308:	7800      	ldrb	r0, [r0, #0]
    730a:	f7ff fed9 	bl	70c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    730e:	4605      	mov	r5, r0
    7310:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7314:	f7ff fed4 	bl	70c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7318:	4428      	add	r0, r5
    731a:	b286      	uxth	r6, r0
    731c:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7320:	f7ff fece 	bl	70c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7324:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7328:	fa1f f880 	uxth.w	r8, r0
    732c:	4648      	mov	r0, r9
    732e:	f007 fee2 	bl	f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7332:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7336:	1a0d      	subs	r5, r1, r0
    7338:	4648      	mov	r0, r9
    733a:	f007 feea 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    733e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    7342:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    7346:	fbb0 f0fa 	udiv	r0, r0, sl
    734a:	1a2d      	subs	r5, r5, r0
    734c:	4648      	mov	r0, r9
    734e:	f007 fed2 	bl	f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7352:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7356:	1a0f      	subs	r7, r1, r0
    7358:	4648      	mov	r0, r9
    735a:	f007 feda 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    735e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7362:	4401      	add	r1, r0
    7364:	fbb1 f0fa 	udiv	r0, r1, sl
    7368:	1a39      	subs	r1, r7, r0
    736a:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    736e:	4370      	muls	r0, r6
    7370:	fbb0 f2f8 	udiv	r2, r0, r8
    7374:	2029      	movs	r0, #41	; 0x29
    7376:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    737a:	3260      	adds	r2, #96	; 0x60
    737c:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    7380:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    7384:	42a9      	cmp	r1, r5
    7386:	d801      	bhi.n	738c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x344>
    7388:	4285      	cmp	r5, r0
    738a:	d901      	bls.n	7390 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x348>
    738c:	f7fc f8c2 	bl	3514 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    7390:	4631      	mov	r1, r6
    7392:	6860      	ldr	r0, [r4, #4]
    7394:	f004 fab2 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7398:	2100      	movs	r1, #0
    739a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    739e:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    73a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73a6:	0000      	.short	0x0000
    73a8:	200000fc 	.word	0x200000fc
    73ac:	b570      	push	{r4, r5, r6, lr}
    73ae:	4604      	mov	r4, r0
    73b0:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
    73b4:	2500      	movs	r5, #0
    73b6:	b118      	cbz	r0, 73c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x378>
    73b8:	2001      	movs	r0, #1
    73ba:	f006 fe30 	bl	e01e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    73be:	4605      	mov	r5, r0
    73c0:	4620      	mov	r0, r4
    73c2:	f006 faf1 	bl	d9a8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    73c6:	1941      	adds	r1, r0, r5
    73c8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    73cc:	34bc      	adds	r4, #188	; 0xbc
    73ce:	f7f9 ffe3 	bl	1398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    73d2:	2600      	movs	r6, #0
    73d4:	60e0      	str	r0, [r4, #12]
    73d6:	f804 6b0b 	strb.w	r6, [r4], #11
    73da:	2001      	movs	r0, #1
    73dc:	f804 0901 	strb.w	r0, [r4], #-1
    73e0:	2003      	movs	r0, #3
    73e2:	f804 09c6 	strb.w	r0, [r4], #-198
    73e6:	4620      	mov	r0, r4
    73e8:	f006 fdea 	bl	dfc0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    73ec:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    73f0:	4629      	mov	r1, r5
    73f2:	4620      	mov	r0, r4
    73f4:	f006 fd98 	bl	df28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd8>
    73f8:	b930      	cbnz	r0, 7408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3c0>
    73fa:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    73fe:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    7402:	f006 fddb 	bl	dfbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7406:	b148      	cbz	r0, 741c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3d4>
    7408:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
    740c:	f006 fdbd 	bl	df8a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    7410:	4805      	ldr	r0, [pc, #20]	; (7428 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e0>)
    7412:	7940      	ldrb	r0, [r0, #5]
    7414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7418:	f7fc ba2a 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    741c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
    7420:	2030      	movs	r0, #48	; 0x30
    7422:	f7fc fbd5 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7426:	0000      	.short	0x0000
    7428:	200000fc 	.word	0x200000fc
    742c:	b570      	push	{r4, r5, r6, lr}
    742e:	4604      	mov	r4, r0
    7430:	2000      	movs	r0, #0
    7432:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
    7436:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
    743a:	460e      	mov	r6, r1
    743c:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    7440:	2001      	movs	r0, #1
    7442:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7446:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    744a:	2101      	movs	r1, #1
    744c:	34a8      	adds	r4, #168	; 0xa8
    744e:	f7fe fa7f 	bl	5950 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7452:	6860      	ldr	r0, [r4, #4]
    7454:	f8c0 5154 	str.w	r5, [r0, #340]	; 0x154
    7458:	6861      	ldr	r1, [r4, #4]
    745a:	7820      	ldrb	r0, [r4, #0]
    745c:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    7460:	6860      	ldr	r0, [r4, #4]
    7462:	f8c0 6164 	str.w	r6, [r0, #356]	; 0x164
    7466:	6860      	ldr	r0, [r4, #4]
    7468:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
    746c:	6860      	ldr	r0, [r4, #4]
    746e:	8801      	ldrh	r1, [r0, #0]
    7470:	f890 0160 	ldrb.w	r0, [r0, #352]	; 0x160
    7474:	f7fe faf4 	bl	5a60 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    7478:	6860      	ldr	r0, [r4, #4]
    747a:	f006 fcc1 	bl	de00 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>
    747e:	b120      	cbz	r0, 748a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    7480:	f240 7159 	movw	r1, #1881	; 0x759
    7484:	2030      	movs	r0, #48	; 0x30
    7486:	f7fc fba3 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    748a:	f006 fd7e 	bl	df8a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    748e:	4803      	ldr	r0, [pc, #12]	; (749c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x454>)
    7490:	7940      	ldrb	r0, [r0, #5]
    7492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7496:	f7fc b9eb 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    749a:	0000      	.short	0x0000
    749c:	200000fc 	.word	0x200000fc
    74a0:	b538      	push	{r3, r4, r5, lr}
    74a2:	2500      	movs	r5, #0
    74a4:	4604      	mov	r4, r0
    74a6:	2901      	cmp	r1, #1
    74a8:	d102      	bne.n	74b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x468>
    74aa:	4810      	ldr	r0, [pc, #64]	; (74ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a4>)
    74ac:	78c0      	ldrb	r0, [r0, #3]
    74ae:	b170      	cbz	r0, 74ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x486>
    74b0:	2004      	movs	r0, #4
    74b2:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    74b6:	bf00      	nop
    74b8:	f006 fd67 	bl	df8a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    74bc:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    74c0:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    74c4:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    74c8:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    74cc:	bd38      	pop	{r3, r4, r5, pc}
    74ce:	9500      	str	r5, [sp, #0]
    74d0:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    74d4:	2301      	movs	r3, #1
    74d6:	2200      	movs	r2, #0
    74d8:	4620      	mov	r0, r4
    74da:	f000 f809 	bl	74f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    74de:	2800      	cmp	r0, #0
    74e0:	d0ea      	beq.n	74b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x470>
    74e2:	f240 710e 	movw	r1, #1806	; 0x70e
    74e6:	2030      	movs	r0, #48	; 0x30
    74e8:	f7fc fb72 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ec:	200000fc 	.word	0x200000fc
    74f0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74f4:	4604      	mov	r4, r0
    74f6:	b085      	sub	sp, #20
    74f8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    74fc:	f8df b424 	ldr.w	fp, [pc, #1060]	; 7924 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8dc>
    7500:	e9cd 3000 	strd	r3, r0, [sp]
    7504:	4699      	mov	r9, r3
    7506:	460f      	mov	r7, r1
    7508:	f89b 0000 	ldrb.w	r0, [fp]
    750c:	f7ff fdd8 	bl	70c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7510:	4605      	mov	r5, r0
    7512:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7516:	f7ff fdd3 	bl	70c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    751a:	4428      	add	r0, r5
    751c:	f8ad 0008 	strh.w	r0, [sp, #8]
    7520:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    7524:	280d      	cmp	r0, #13
    7526:	d004      	beq.n	7532 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ea>
    7528:	2000      	movs	r0, #0
    752a:	9003      	str	r0, [sp, #12]
    752c:	9807      	ldr	r0, [sp, #28]
    752e:	b110      	cbz	r0, 7536 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ee>
    7530:	e02e      	b.n	7590 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    7532:	2001      	movs	r0, #1
    7534:	e7f9      	b.n	752a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4e2>
    7536:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    753a:	2803      	cmp	r0, #3
    753c:	d128      	bne.n	7590 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    753e:	9803      	ldr	r0, [sp, #12]
    7540:	b330      	cbz	r0, 7590 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    7542:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7546:	42b8      	cmp	r0, r7
    7548:	d122      	bne.n	7590 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    754a:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    754e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    7552:	6860      	ldr	r0, [r4, #4]
    7554:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    7558:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    755c:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    7560:	4408      	add	r0, r1
    7562:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    7566:	4620      	mov	r0, r4
    7568:	f000 fb96 	bl	7c98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    756c:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    7570:	61e0      	str	r0, [r4, #28]
    7572:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    7576:	8360      	strh	r0, [r4, #26]
    7578:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    757c:	6060      	str	r0, [r4, #4]
    757e:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    7582:	8120      	strh	r0, [r4, #8]
    7584:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7588:	8160      	strh	r0, [r4, #10]
    758a:	2002      	movs	r0, #2
    758c:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7590:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7594:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    7598:	1a38      	subs	r0, r7, r0
    759a:	fa0f fa80 	sxth.w	sl, r0
    759e:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    75a2:	1a38      	subs	r0, r7, r0
    75a4:	fa0f f880 	sxth.w	r8, r0
    75a8:	f1b8 0f00 	cmp.w	r8, #0
    75ac:	da06      	bge.n	75bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x574>
    75ae:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    75b2:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    75b6:	2001      	movs	r0, #1
    75b8:	46d0      	mov	r8, sl
    75ba:	9000      	str	r0, [sp, #0]
    75bc:	ab02      	add	r3, sp, #8
    75be:	4652      	mov	r2, sl
    75c0:	4641      	mov	r1, r8
    75c2:	4620      	mov	r0, r4
    75c4:	f7ff fe20 	bl	7208 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>
    75c8:	9004      	str	r0, [sp, #16]
    75ca:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    75ce:	b140      	cbz	r0, 75e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x59a>
    75d0:	2801      	cmp	r0, #1
    75d2:	d07c      	beq.n	76ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x686>
    75d4:	2802      	cmp	r0, #2
    75d6:	d05a      	beq.n	768e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x646>
    75d8:	2803      	cmp	r0, #3
    75da:	d079      	beq.n	76d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x688>
    75dc:	f240 518e 	movw	r1, #1422	; 0x58e
    75e0:	e19c      	b.n	791c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    75e2:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    75e6:	b3e8      	cbz	r0, 7664 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x61c>
    75e8:	2101      	movs	r1, #1
    75ea:	2000      	movs	r0, #0
    75ec:	f005 fcf5 	bl	cfda <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    75f0:	4606      	mov	r6, r0
    75f2:	69e0      	ldr	r0, [r4, #28]
    75f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    75f8:	4430      	add	r0, r6
    75fa:	f004 f97f 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    75fe:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7602:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7606:	6860      	ldr	r0, [r4, #4]
    7608:	f004 f978 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    760c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7610:	a901      	add	r1, sp, #4
    7612:	4668      	mov	r0, sp
    7614:	f003 fb10 	bl	ac38 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7618:	e9dd 1200 	ldrd	r1, r2, [sp]
    761c:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7620:	f7fb f804 	bl	262c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7624:	4682      	mov	sl, r0
    7626:	4620      	mov	r0, r4
    7628:	f006 fca1 	bl	df6e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11e>
    762c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7630:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    7634:	f007 fd6d 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7638:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    763c:	4401      	add	r1, r0
    763e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7642:	fbb1 f0f0 	udiv	r0, r1, r0
    7646:	69e1      	ldr	r1, [r4, #28]
    7648:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    764c:	4431      	add	r1, r6
    764e:	1a08      	subs	r0, r1, r0
    7650:	1a81      	subs	r1, r0, r2
    7652:	4441      	add	r1, r8
    7654:	3920      	subs	r1, #32
    7656:	eba1 060a 	sub.w	r6, r1, sl
    765a:	0050      	lsls	r0, r2, #1
    765c:	8b61      	ldrh	r1, [r4, #26]
    765e:	3060      	adds	r0, #96	; 0x60
    7660:	4401      	add	r1, r0
    7662:	e000      	b.n	7666 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x61e>
    7664:	e010      	b.n	7688 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x640>
    7666:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    766a:	f006 fc95 	bl	df98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    766e:	3024      	adds	r0, #36	; 0x24
    7670:	f8cb 0018 	str.w	r0, [fp, #24]
    7674:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7678:	4659      	mov	r1, fp
    767a:	1a30      	subs	r0, r6, r0
    767c:	f5b0 7fdb 	cmp.w	r0, #438	; 0x1b6
    7680:	d85c      	bhi.n	773c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6f4>
    7682:	f240 5127 	movw	r1, #1319	; 0x527
    7686:	e149      	b.n	791c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    7688:	f240 5105 	movw	r1, #1285	; 0x505
    768c:	e146      	b.n	791c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    768e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    7692:	69e0      	ldr	r0, [r4, #28]
    7694:	4408      	add	r0, r1
    7696:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    769a:	f004 f92f 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    769e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    76a2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    76a6:	6860      	ldr	r0, [r4, #4]
    76a8:	f004 f928 	bl	b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    76ac:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    76b0:	4620      	mov	r0, r4
    76b2:	f006 fc5c 	bl	df6e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11e>
    76b6:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    76ba:	bb10      	cbnz	r0, 7702 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    76bc:	f1b9 0f00 	cmp.w	r9, #0
    76c0:	d01f      	beq.n	7702 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    76c2:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    76c6:	4640      	mov	r0, r8
    76c8:	f007 fd23 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    76cc:	e001      	b.n	76d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68a>
    76ce:	e036      	b.n	773e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6f6>
    76d0:	e052      	b.n	7778 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x730>
    76d2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    76d6:	4401      	add	r1, r0
    76d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    76dc:	fbb1 f0f0 	udiv	r0, r1, r0
    76e0:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    76e4:	69e2      	ldr	r2, [r4, #28]
    76e6:	4408      	add	r0, r1
    76e8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    76ec:	4411      	add	r1, r2
    76ee:	1a0e      	subs	r6, r1, r0
    76f0:	4640      	mov	r0, r8
    76f2:	f007 fd00 	bl	f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    76f6:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    76fa:	1a08      	subs	r0, r1, r0
    76fc:	4406      	add	r6, r0
    76fe:	3e20      	subs	r6, #32
    7700:	e006      	b.n	7710 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c8>
    7702:	69e1      	ldr	r1, [r4, #28]
    7704:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7708:	4408      	add	r0, r1
    770a:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    770e:	1a46      	subs	r6, r0, r1
    7710:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    7714:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    7718:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    771c:	fb01 0002 	mla	r0, r1, r2, r0
    7720:	0040      	lsls	r0, r0, #1
    7722:	8b61      	ldrh	r1, [r4, #26]
    7724:	3060      	adds	r0, #96	; 0x60
    7726:	4401      	add	r1, r0
    7728:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    772c:	f006 fc34 	bl	df98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    7730:	f8cb 0018 	str.w	r0, [fp, #24]
    7734:	2001      	movs	r0, #1
    7736:	4659      	mov	r1, fp
    7738:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    773c:	e066      	b.n	780c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7c4>
    773e:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7742:	6860      	ldr	r0, [r4, #4]
    7744:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7748:	1a46      	subs	r6, r0, r1
    774a:	eb02 000a 	add.w	r0, r2, sl
    774e:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    7752:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    7756:	1a80      	subs	r0, r0, r2
    7758:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    775c:	1e40      	subs	r0, r0, #1
    775e:	fb0c 3202 	mla	r2, ip, r2, r3
    7762:	fb00 2001 	mla	r0, r0, r1, r2
    7766:	0040      	lsls	r0, r0, #1
    7768:	8b61      	ldrh	r1, [r4, #26]
    776a:	3060      	adds	r0, #96	; 0x60
    776c:	4401      	add	r1, r0
    776e:	fb06 f608 	mul.w	r6, r6, r8
    7772:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7776:	e044      	b.n	7802 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ba>
    7778:	6860      	ldr	r0, [r4, #4]
    777a:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    777e:	fb00 f008 	mul.w	r0, r0, r8
    7782:	fb08 0611 	mls	r6, r8, r1, r0
    7786:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    778a:	2824      	cmp	r0, #36	; 0x24
    778c:	d003      	beq.n	7796 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74e>
    778e:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    7792:	2824      	cmp	r0, #36	; 0x24
    7794:	d109      	bne.n	77aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    7796:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    779a:	1a38      	subs	r0, r7, r0
    779c:	b200      	sxth	r0, r0
    779e:	2800      	cmp	r0, #0
    77a0:	db03      	blt.n	77aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    77a2:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    77a6:	b100      	cbz	r0, 77aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    77a8:	9001      	str	r0, [sp, #4]
    77aa:	9800      	ldr	r0, [sp, #0]
    77ac:	b1f8      	cbz	r0, 77ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a6>
    77ae:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    77b2:	b9e0      	cbnz	r0, 77ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a6>
    77b4:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    77b8:	2800      	cmp	r0, #0
    77ba:	d07d      	beq.n	78b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    77bc:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    77c0:	2800      	cmp	r0, #0
    77c2:	d079      	beq.n	78b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    77c4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    77c8:	f007 fca3 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    77cc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    77d0:	4401      	add	r1, r0
    77d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    77d6:	fbb1 f0f0 	udiv	r0, r1, r0
    77da:	1a36      	subs	r6, r6, r0
    77dc:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    77e0:	f007 fc89 	bl	f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    77e4:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    77e8:	1a08      	subs	r0, r1, r0
    77ea:	4406      	add	r6, r0
    77ec:	3e20      	subs	r6, #32
    77ee:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    77f2:	eb01 000a 	add.w	r0, r1, sl
    77f6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    77fa:	4348      	muls	r0, r1
    77fc:	0041      	lsls	r1, r0, #1
    77fe:	3160      	adds	r1, #96	; 0x60
    7800:	9801      	ldr	r0, [sp, #4]
    7802:	f006 fbc9 	bl	df98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    7806:	4659      	mov	r1, fp
    7808:	f8cb 0018 	str.w	r0, [fp, #24]
    780c:	9804      	ldr	r0, [sp, #16]
    780e:	6989      	ldr	r1, [r1, #24]
    7810:	1a33      	subs	r3, r6, r0
    7812:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    7816:	6860      	ldr	r0, [r4, #4]
    7818:	1b80      	subs	r0, r0, r6
    781a:	f2a0 2045 	subw	r0, r0, #581	; 0x245
    781e:	f8cb 001c 	str.w	r0, [fp, #28]
    7822:	4281      	cmp	r1, r0
    7824:	d800      	bhi.n	7828 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e0>
    7826:	4608      	mov	r0, r1
    7828:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    782c:	2000      	movs	r0, #0
    782e:	7028      	strb	r0, [r5, #0]
    7830:	2064      	movs	r0, #100	; 0x64
    7832:	8128      	strh	r0, [r5, #8]
    7834:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7838:	4619      	mov	r1, r3
    783a:	34dc      	adds	r4, #220	; 0xdc
    783c:	f7f9 fdac 	bl	1398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7840:	60e8      	str	r0, [r5, #12]
    7842:	f854 0cb0 	ldr.w	r0, [r4, #-176]
    7846:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7848:	4408      	add	r0, r1
    784a:	6068      	str	r0, [r5, #4]
    784c:	68e8      	ldr	r0, [r5, #12]
    784e:	67e0      	str	r0, [r4, #124]	; 0x7c
    7850:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    7854:	2001      	movs	r0, #1
    7856:	72a8      	strb	r0, [r5, #10]
    7858:	8aa1      	ldrh	r1, [r4, #20]
    785a:	3cdc      	subs	r4, #220	; 0xdc
    785c:	1bc9      	subs	r1, r1, r7
    785e:	b209      	sxth	r1, r1
    7860:	2900      	cmp	r1, #0
    7862:	dd01      	ble.n	7868 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x820>
    7864:	2103      	movs	r1, #3
    7866:	72a9      	strb	r1, [r5, #10]
    7868:	9903      	ldr	r1, [sp, #12]
    786a:	b331      	cbz	r1, 78ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x872>
    786c:	f1b9 0f00 	cmp.w	r9, #0
    7870:	d027      	beq.n	78c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7872:	bf00      	nop
    7874:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    7878:	b392      	cbz	r2, 78e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x898>
    787a:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    787e:	bf00      	nop
    7880:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    7884:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    7888:	1c49      	adds	r1, r1, #1
    788a:	434b      	muls	r3, r1
    788c:	4293      	cmp	r3, r2
    788e:	d218      	bcs.n	78c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7890:	7aa9      	ldrb	r1, [r5, #10]
    7892:	1e49      	subs	r1, r1, #1
    7894:	2900      	cmp	r1, #0
    7896:	dd14      	ble.n	78c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7898:	72a8      	strb	r0, [r5, #10]
    789a:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    789e:	2101      	movs	r1, #1
    78a0:	1c40      	adds	r0, r0, #1
    78a2:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    78a6:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    78aa:	f7fc fa21 	bl	3cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    78ae:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    78b2:	f000 0007 	and.w	r0, r0, #7
    78b6:	e001      	b.n	78bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x874>
    78b8:	e013      	b.n	78e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x89a>
    78ba:	e015      	b.n	78e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    78bc:	1c40      	adds	r0, r0, #1
    78be:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    78c2:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    78c6:	4629      	mov	r1, r5
    78c8:	f006 fb78 	bl	dfbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    78cc:	b320      	cbz	r0, 7918 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d0>
    78ce:	9807      	ldr	r0, [sp, #28]
    78d0:	f080 0001 	eor.w	r0, r0, #1
    78d4:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    78d8:	2000      	movs	r0, #0
    78da:	b009      	add	sp, #36	; 0x24
    78dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78e0:	e018      	b.n	7914 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8cc>
    78e2:	f240 5179 	movw	r1, #1401	; 0x579
    78e6:	e019      	b.n	791c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    78e8:	f1b9 0f00 	cmp.w	r9, #0
    78ec:	d1c2      	bne.n	7874 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x82c>
    78ee:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    78f2:	2800      	cmp	r0, #0
    78f4:	d0e5      	beq.n	78c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    78f6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    78fa:	6860      	ldr	r0, [r4, #4]
    78fc:	1a41      	subs	r1, r0, r1
    78fe:	4628      	mov	r0, r5
    7900:	f005 fb7d 	bl	cffe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7904:	0400      	lsls	r0, r0, #16
    7906:	0c00      	lsrs	r0, r0, #16
    7908:	d0db      	beq.n	78c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    790a:	9912      	ldr	r1, [sp, #72]	; 0x48
    790c:	b101      	cbz	r1, 7910 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c8>
    790e:	8008      	strh	r0, [r1, #0]
    7910:	2001      	movs	r0, #1
    7912:	e7e2      	b.n	78da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x892>
    7914:	2100      	movs	r1, #0
    7916:	e7b3      	b.n	7880 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x838>
    7918:	f240 51d9 	movw	r1, #1497	; 0x5d9
    791c:	2030      	movs	r0, #48	; 0x30
    791e:	f7fc f957 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7922:	0000      	.short	0x0000
    7924:	200000fc 	.word	0x200000fc
    7928:	b570      	push	{r4, r5, r6, lr}
    792a:	2909      	cmp	r1, #9
    792c:	d24e      	bcs.n	79cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x984>
    792e:	e8df f001 	tbb	[pc, r1]
    7932:	1a05      	.short	0x1a05
    7934:	4d3c4040 	.word	0x4d3c4040
    7938:	0048442e 	.word	0x0048442e
    793c:	4d25      	ldr	r5, [pc, #148]	; (79d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x98c>)
    793e:	4604      	mov	r4, r0
    7940:	6228      	str	r0, [r5, #32]
    7942:	2000      	movs	r0, #0
    7944:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7948:	4620      	mov	r0, r4
    794a:	f7fe fce1 	bl	6310 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    794e:	b110      	cbz	r0, 7956 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90e>
    7950:	f240 21b9 	movw	r1, #697	; 0x2b9
    7954:	e037      	b.n	79c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    7956:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    795a:	38fa      	subs	r0, #250	; 0xfa
    795c:	f7fa fdb2 	bl	24c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7960:	2003      	movs	r0, #3
    7962:	70a8      	strb	r0, [r5, #2]
    7964:	bd70      	pop	{r4, r5, r6, pc}
    7966:	4605      	mov	r5, r0
    7968:	f006 f83e 	bl	d9e8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    796c:	b9a8      	cbnz	r0, 799a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x952>
    796e:	4628      	mov	r0, r5
    7970:	f006 fad4 	bl	df1c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    7974:	4604      	mov	r4, r0
    7976:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    797a:	42a0      	cmp	r0, r4
    797c:	d20b      	bcs.n	7996 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94e>
    797e:	1a20      	subs	r0, r4, r0
    7980:	2104      	movs	r1, #4
    7982:	f7f9 fc2d 	bl	11e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    7986:	b130      	cbz	r0, 7996 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94e>
    7988:	4628      	mov	r0, r5
    798a:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
    798e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7992:	f006 b807 	b.w	d9a4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    7996:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
    799a:	4628      	mov	r0, r5
    799c:	f7fe fcd4 	bl	6348 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    79a0:	2800      	cmp	r0, #0
    79a2:	d0df      	beq.n	7964 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x91c>
    79a4:	f240 21ed 	movw	r1, #749	; 0x2ed
    79a8:	e00d      	b.n	79c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    79aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79ae:	f003 bbe5 	b.w	b17c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    79b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79b6:	f7ff bb91 	b.w	70dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    79ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79be:	f006 baa4 	b.w	df0a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    79c2:	f44f 7184 	mov.w	r1, #264	; 0x108
    79c6:	2030      	movs	r0, #48	; 0x30
    79c8:	f7fc f902 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79cc:	f44f 7186 	mov.w	r1, #268	; 0x10c
    79d0:	e7f9      	b.n	79c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    79d2:	0000      	.short	0x0000
    79d4:	200000fc 	.word	0x200000fc
    79d8:	b570      	push	{r4, r5, r6, lr}
    79da:	4d4f      	ldr	r5, [pc, #316]	; (7b18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xad0>)
    79dc:	4606      	mov	r6, r0
    79de:	2909      	cmp	r1, #9
    79e0:	d27e      	bcs.n	7ae0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa98>
    79e2:	e8df f001 	tbb	[pc, r1]
    79e6:	4a05      	.short	0x4a05
    79e8:	964e5252 	.word	0x964e5252
    79ec:	00927069 	.word	0x00927069
    79f0:	4630      	mov	r0, r6
    79f2:	f7fe f827 	bl	5a44 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    79f6:	2100      	movs	r1, #0
    79f8:	f005 f8d3 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    79fc:	0004      	movs	r4, r0
    79fe:	d007      	beq.n	7a10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9c8>
    7a00:	4630      	mov	r0, r6
    7a02:	f7fe f81f 	bl	5a44 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7a06:	8821      	ldrh	r1, [r4, #0]
    7a08:	4288      	cmp	r0, r1
    7a0a:	d003      	beq.n	7a14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9cc>
    7a0c:	21a9      	movs	r1, #169	; 0xa9
    7a0e:	e07d      	b.n	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7a10:	21a8      	movs	r1, #168	; 0xa8
    7a12:	e07b      	b.n	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7a14:	2100      	movs	r1, #0
    7a16:	616c      	str	r4, [r5, #20]
    7a18:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
    7a1c:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    7a20:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    7a24:	4620      	mov	r0, r4
    7a26:	b189      	cbz	r1, 7a4c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa04>
    7a28:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    7a2c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    7a30:	428a      	cmp	r2, r1
    7a32:	d106      	bne.n	7a42 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9fa>
    7a34:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    7a38:	1a51      	subs	r1, r2, r1
    7a3a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7a3e:	4611      	mov	r1, r2
    7a40:	e00d      	b.n	7a5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa16>
    7a42:	1a51      	subs	r1, r2, r1
    7a44:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7a48:	b291      	uxth	r1, r2
    7a4a:	e008      	b.n	7a5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa16>
    7a4c:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    7a50:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    7a54:	1a89      	subs	r1, r1, r2
    7a56:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7a5a:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    7a5e:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    7a62:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    7a66:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    7a6a:	f000 fb29 	bl	80c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    7a6e:	4620      	mov	r0, r4
    7a70:	f000 f854 	bl	7b1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xad4>
    7a74:	2002      	movs	r0, #2
    7a76:	70a8      	strb	r0, [r5, #2]
    7a78:	bd70      	pop	{r4, r5, r6, pc}
    7a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a7e:	f006 bb26 	b.w	e0ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    7a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a86:	f003 bb79 	b.w	b17c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7a8a:	4630      	mov	r0, r6
    7a8c:	f7fd ffda 	bl	5a44 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7a90:	2100      	movs	r1, #0
    7a92:	f005 f886 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7a96:	0004      	movs	r4, r0
    7a98:	d007      	beq.n	7aaa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa62>
    7a9a:	4630      	mov	r0, r6
    7a9c:	f7fd ffd2 	bl	5a44 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7aa0:	8821      	ldrh	r1, [r4, #0]
    7aa2:	4288      	cmp	r0, r1
    7aa4:	d003      	beq.n	7aae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa66>
    7aa6:	21c3      	movs	r1, #195	; 0xc3
    7aa8:	e030      	b.n	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7aaa:	21c2      	movs	r1, #194	; 0xc2
    7aac:	e02e      	b.n	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7aae:	4620      	mov	r0, r4
    7ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ab4:	f000 b866 	b.w	7b84 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb3c>
    7ab8:	2001      	movs	r0, #1
    7aba:	f7f9 fb81 	bl	11c0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    7abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ac2:	f005 b91d 	b.w	cd00 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    7ac6:	4630      	mov	r0, r6
    7ac8:	f7fd ffbc 	bl	5a44 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7acc:	2100      	movs	r1, #0
    7ace:	f005 f868 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7ad2:	0004      	movs	r4, r0
    7ad4:	d009      	beq.n	7aea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa2>
    7ad6:	4630      	mov	r0, r6
    7ad8:	f7fd ffb4 	bl	5a44 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7adc:	8821      	ldrh	r1, [r4, #0]
    7ade:	e000      	b.n	7ae2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa9a>
    7ae0:	e017      	b.n	7b12 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaca>
    7ae2:	4288      	cmp	r0, r1
    7ae4:	d003      	beq.n	7aee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa6>
    7ae6:	21d1      	movs	r1, #209	; 0xd1
    7ae8:	e010      	b.n	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7aea:	21d0      	movs	r1, #208	; 0xd0
    7aec:	e00e      	b.n	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7aee:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7af2:	2804      	cmp	r0, #4
    7af4:	d001      	beq.n	7afa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xab2>
    7af6:	21d3      	movs	r1, #211	; 0xd3
    7af8:	e008      	b.n	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7afa:	4620      	mov	r0, r4
    7afc:	f006 fa7c 	bl	dff8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7b00:	7968      	ldrb	r0, [r5, #5]
    7b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b06:	f7fb beb3 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7b0a:	21dc      	movs	r1, #220	; 0xdc
    7b0c:	2030      	movs	r0, #48	; 0x30
    7b0e:	f7fc f85f 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b12:	21e0      	movs	r1, #224	; 0xe0
    7b14:	e7fa      	b.n	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7b16:	0000      	.short	0x0000
    7b18:	200000fc 	.word	0x200000fc
    7b1c:	b570      	push	{r4, r5, r6, lr}
    7b1e:	4604      	mov	r4, r0
    7b20:	f7f9 fd7c 	bl	161c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7b24:	2864      	cmp	r0, #100	; 0x64
    7b26:	d901      	bls.n	7b2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae4>
    7b28:	4605      	mov	r5, r0
    7b2a:	e000      	b.n	7b2e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae6>
    7b2c:	2564      	movs	r5, #100	; 0x64
    7b2e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7b32:	2128      	movs	r1, #40	; 0x28
    7b34:	f006 f9e7 	bl	df06 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7b38:	1946      	adds	r6, r0, r5
    7b3a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7b3e:	2128      	movs	r1, #40	; 0x28
    7b40:	f206 263f 	addw	r6, r6, #575	; 0x23f
    7b44:	f006 f9df 	bl	df06 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7b48:	f200 22a3 	addw	r2, r0, #675	; 0x2a3
    7b4c:	4620      	mov	r0, r4
    7b4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7b50:	f005 fdc5 	bl	d6de <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7b54:	4605      	mov	r5, r0
    7b56:	4632      	mov	r2, r6
    7b58:	4620      	mov	r0, r4
    7b5a:	6861      	ldr	r1, [r4, #4]
    7b5c:	f005 fdbf 	bl	d6de <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7b60:	4907      	ldr	r1, [pc, #28]	; (7b80 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb38>)
    7b62:	4285      	cmp	r5, r0
    7b64:	60c8      	str	r0, [r1, #12]
    7b66:	d200      	bcs.n	7b6a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb22>
    7b68:	4628      	mov	r0, r5
    7b6a:	6088      	str	r0, [r1, #8]
    7b6c:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    7b70:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
    7b74:	6108      	str	r0, [r1, #16]
    7b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b7a:	f7fa bca3 	b.w	24c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7b7e:	0000      	.short	0x0000
    7b80:	200000fc 	.word	0x200000fc
    7b84:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7b86:	4604      	mov	r4, r0
    7b88:	f003 fe84 	bl	b894 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7b8c:	4601      	mov	r1, r0
    7b8e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7b92:	f7f9 fc37 	bl	1404 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7b96:	6861      	ldr	r1, [r4, #4]
    7b98:	b111      	cbz	r1, 7ba0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb58>
    7b9a:	fbb0 f0f1 	udiv	r0, r0, r1
    7b9e:	e000      	b.n	7ba2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb5a>
    7ba0:	2000      	movs	r0, #0
    7ba2:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    7ba6:	290d      	cmp	r1, #13
    7ba8:	d00c      	beq.n	7bc4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb7c>
    7baa:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    7bae:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7bb2:	1813      	adds	r3, r2, r0
    7bb4:	1acb      	subs	r3, r1, r3
    7bb6:	b21b      	sxth	r3, r3
    7bb8:	2b00      	cmp	r3, #0
    7bba:	db06      	blt.n	7bca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb82>
    7bbc:	1c49      	adds	r1, r1, #1
    7bbe:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    7bc2:	e006      	b.n	7bd2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb8a>
    7bc4:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7bc8:	e00c      	b.n	7be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb9c>
    7bca:	1c40      	adds	r0, r0, #1
    7bcc:	4410      	add	r0, r2
    7bce:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7bd2:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    7bd6:	b940      	cbnz	r0, 7bea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xba2>
    7bd8:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7bdc:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7be0:	4288      	cmp	r0, r1
    7be2:	d102      	bne.n	7bea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xba2>
    7be4:	1c40      	adds	r0, r0, #1
    7be6:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7bea:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7bee:	1c40      	adds	r0, r0, #1
    7bf0:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    7bf4:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    7bf8:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    7bfc:	1a40      	subs	r0, r0, r1
    7bfe:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    7c02:	1e40      	subs	r0, r0, #1
    7c04:	4408      	add	r0, r1
    7c06:	b285      	uxth	r5, r0
    7c08:	e026      	b.n	7c58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc10>
    7c0a:	a801      	add	r0, sp, #4
    7c0c:	2300      	movs	r3, #0
    7c0e:	9000      	str	r0, [sp, #0]
    7c10:	461a      	mov	r2, r3
    7c12:	4620      	mov	r0, r4
    7c14:	f7ff fc6c 	bl	74f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    7c18:	2800      	cmp	r0, #0
    7c1a:	d03a      	beq.n	7c92 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc4a>
    7c1c:	2801      	cmp	r0, #1
    7c1e:	d004      	beq.n	7c2a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe2>
    7c20:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    7c24:	2030      	movs	r0, #48	; 0x30
    7c26:	f7fb ffd3 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c2a:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7c2e:	f8b4 10f0 	ldrh.w	r1, [r4, #240]	; 0xf0
    7c32:	1a42      	subs	r2, r0, r1
    7c34:	b212      	sxth	r2, r2
    7c36:	2a00      	cmp	r2, #0
    7c38:	da09      	bge.n	7c4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc06>
    7c3a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c3e:	4402      	add	r2, r0
    7c40:	1aaa      	subs	r2, r5, r2
    7c42:	b212      	sxth	r2, r2
    7c44:	2a00      	cmp	r2, #0
    7c46:	da02      	bge.n	7c4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc06>
    7c48:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    7c4c:	e004      	b.n	7c58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc10>
    7c4e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7c52:	4408      	add	r0, r1
    7c54:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7c58:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7c5c:	1a68      	subs	r0, r5, r1
    7c5e:	b200      	sxth	r0, r0
    7c60:	2800      	cmp	r0, #0
    7c62:	dad2      	bge.n	7c0a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbc2>
    7c64:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7c68:	b188      	cbz	r0, 7c8e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc46>
    7c6a:	2008      	movs	r0, #8
    7c6c:	f884 008e 	strb.w	r0, [r4, #142]	; 0x8e
    7c70:	2001      	movs	r0, #1
    7c72:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    7c76:	4620      	mov	r0, r4
    7c78:	f006 fa2b 	bl	e0d2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    7c7c:	4620      	mov	r0, r4
    7c7e:	f006 f9bb 	bl	dff8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7c82:	4804      	ldr	r0, [pc, #16]	; (7c94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc4c>)
    7c84:	7940      	ldrb	r0, [r0, #5]
    7c86:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    7c8a:	f7fb bdf1 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7c8e:	203e      	movs	r0, #62	; 0x3e
    7c90:	e7ec      	b.n	7c6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc24>
    7c92:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7c94:	200000fc 	.word	0x200000fc

00007c98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    7c98:	b510      	push	{r4, lr}
    7c9a:	4604      	mov	r4, r0
    7c9c:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    7ca0:	6861      	ldr	r1, [r4, #4]
    7ca2:	4288      	cmp	r0, r1
    7ca4:	d109      	bne.n	7cba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    7ca6:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    7caa:	8922      	ldrh	r2, [r4, #8]
    7cac:	4291      	cmp	r1, r2
    7cae:	d104      	bne.n	7cba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    7cb0:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    7cb4:	8962      	ldrh	r2, [r4, #10]
    7cb6:	4291      	cmp	r1, r2
    7cb8:	d015      	beq.n	7ce6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    7cba:	8821      	ldrh	r1, [r4, #0]
    7cbc:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    7cc0:	f005 f8b8 	bl	ce34 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7cc4:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    7cc8:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    7ccc:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    7cd0:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7cd4:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    7cd8:	2001      	movs	r0, #1
    7cda:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    7cde:	4807      	ldr	r0, [pc, #28]	; (7cfc <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    7ce0:	7880      	ldrb	r0, [r0, #2]
    7ce2:	f7fb fdc5 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7ce6:	2102      	movs	r1, #2
    7ce8:	4620      	mov	r0, r4
    7cea:	f7fd fe31 	bl	5950 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7cee:	2000      	movs	r0, #0
    7cf0:	f804 0f7e 	strb.w	r0, [r4, #126]!
    7cf4:	2003      	movs	r0, #3
    7cf6:	70e0      	strb	r0, [r4, #3]
    7cf8:	bd10      	pop	{r4, pc}
    7cfa:	0000      	.short	0x0000
    7cfc:	20000120 	.word	0x20000120

00007d00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7d00:	4806      	ldr	r0, [pc, #24]	; (7d1c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7d02:	4905      	ldr	r1, [pc, #20]	; (7d18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7d04:	6501      	str	r1, [r0, #80]	; 0x50
    7d06:	4906      	ldr	r1, [pc, #24]	; (7d20 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7d08:	6541      	str	r1, [r0, #84]	; 0x54
    7d0a:	4807      	ldr	r0, [pc, #28]	; (7d28 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7d0c:	4905      	ldr	r1, [pc, #20]	; (7d24 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7d0e:	6501      	str	r1, [r0, #80]	; 0x50
    7d10:	4906      	ldr	r1, [pc, #24]	; (7d2c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7d12:	6541      	str	r1, [r0, #84]	; 0x54
    7d14:	4770      	bx	lr
    7d16:	0000      	.short	0x0000
    7d18:	000091b1 	.word	0x000091b1
    7d1c:	20000134 	.word	0x20000134
    7d20:	00009275 	.word	0x00009275
    7d24:	000098c9 	.word	0x000098c9
    7d28:	20000198 	.word	0x20000198
    7d2c:	000098f9 	.word	0x000098f9

00007d30 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d32:	460d      	mov	r5, r1
    7d34:	4607      	mov	r7, r0
    7d36:	2100      	movs	r1, #0
    7d38:	f004 ff33 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7d3c:	1e04      	subs	r4, r0, #0
    7d3e:	d04f      	beq.n	7de0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7d40:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    7d44:	2800      	cmp	r0, #0
    7d46:	d04b      	beq.n	7de0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7d48:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7d4c:	f88d 0000 	strb.w	r0, [sp]
    7d50:	9800      	ldr	r0, [sp, #0]
    7d52:	9000      	str	r0, [sp, #0]
    7d54:	f89d 0000 	ldrb.w	r0, [sp]
    7d58:	2600      	movs	r6, #0
    7d5a:	b1d8      	cbz	r0, 7d94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7d5c:	706e      	strb	r6, [r5, #1]
    7d5e:	2007      	movs	r0, #7
    7d60:	7028      	strb	r0, [r5, #0]
    7d62:	e00b      	b.n	7d7c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7d64:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    7d68:	8466      	strh	r6, [r4, #34]	; 0x22
    7d6a:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    7d6e:	6068      	str	r0, [r5, #4]
    7d70:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    7d74:	60a8      	str	r0, [r5, #8]
    7d76:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    7d7a:	81a8      	strh	r0, [r5, #12]
    7d7c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7d80:	f88d 0000 	strb.w	r0, [sp]
    7d84:	9800      	ldr	r0, [sp, #0]
    7d86:	9000      	str	r0, [sp, #0]
    7d88:	f89d 0000 	ldrb.w	r0, [sp]
    7d8c:	2800      	cmp	r0, #0
    7d8e:	d1e9      	bne.n	7d64 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7d90:	712e      	strb	r6, [r5, #4]
    7d92:	e10b      	b.n	7fac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d94:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7d98:	b3a0      	cbz	r0, 7e04 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7d9a:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7d9e:	280b      	cmp	r0, #11
    7da0:	d016      	beq.n	7dd0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7da2:	280c      	cmp	r0, #12
    7da4:	d004      	beq.n	7db0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7da6:	f640 21ce 	movw	r1, #2766	; 0xace
    7daa:	2031      	movs	r0, #49	; 0x31
    7dac:	f7fb ff10 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7db0:	8820      	ldrh	r0, [r4, #0]
    7db2:	f7fc fb1d 	bl	43f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7db6:	4607      	mov	r7, r0
    7db8:	f004 fdae 	bl	c918 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7dbc:	b978      	cbnz	r0, 7dde <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7dbe:	706e      	strb	r6, [r5, #1]
    7dc0:	200c      	movs	r0, #12
    7dc2:	7028      	strb	r0, [r5, #0]
    7dc4:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7dc8:	7128      	strb	r0, [r5, #4]
    7dca:	8820      	ldrh	r0, [r4, #0]
    7dcc:	80e8      	strh	r0, [r5, #6]
    7dce:	e013      	b.n	7df8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7dd0:	8820      	ldrh	r0, [r4, #0]
    7dd2:	f7fc fb0d 	bl	43f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7dd6:	4607      	mov	r7, r0
    7dd8:	f004 fd9e 	bl	c918 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7ddc:	b108      	cbz	r0, 7de2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7dde:	2000      	movs	r0, #0
    7de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7de2:	706e      	strb	r6, [r5, #1]
    7de4:	200b      	movs	r0, #11
    7de6:	7028      	strb	r0, [r5, #0]
    7de8:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7dec:	7128      	strb	r0, [r5, #4]
    7dee:	8820      	ldrh	r0, [r4, #0]
    7df0:	80e8      	strh	r0, [r5, #6]
    7df2:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    7df6:	7228      	strb	r0, [r5, #8]
    7df8:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    7dfc:	4638      	mov	r0, r7
    7dfe:	f004 fda0 	bl	c942 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7e02:	e0d3      	b.n	7fac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e04:	e7ff      	b.n	7e06 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7e06:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    7e0a:	f88d 0000 	strb.w	r0, [sp]
    7e0e:	9800      	ldr	r0, [sp, #0]
    7e10:	9000      	str	r0, [sp, #0]
    7e12:	f89d 0000 	ldrb.w	r0, [sp]
    7e16:	b130      	cbz	r0, 7e26 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7e18:	706e      	strb	r6, [r5, #1]
    7e1a:	200e      	movs	r0, #14
    7e1c:	7028      	strb	r0, [r5, #0]
    7e1e:	80af      	strh	r7, [r5, #4]
    7e20:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    7e24:	e0c2      	b.n	7fac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e26:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7e2a:	f88d 0000 	strb.w	r0, [sp]
    7e2e:	9800      	ldr	r0, [sp, #0]
    7e30:	9000      	str	r0, [sp, #0]
    7e32:	f89d 0000 	ldrb.w	r0, [sp]
    7e36:	b198      	cbz	r0, 7e60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7e38:	706e      	strb	r6, [r5, #1]
    7e3a:	2008      	movs	r0, #8
    7e3c:	7028      	strb	r0, [r5, #0]
    7e3e:	8820      	ldrh	r0, [r4, #0]
    7e40:	80a8      	strh	r0, [r5, #4]
    7e42:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    7e46:	f8c5 1006 	str.w	r1, [r5, #6]
    7e4a:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    7e4e:	f8c5 100a 	str.w	r1, [r5, #10]
    7e52:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    7e56:	81e8      	strh	r0, [r5, #14]
    7e58:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    7e5c:	7026      	strb	r6, [r4, #0]
    7e5e:	e0a5      	b.n	7fac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e60:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7e64:	f88d 0000 	strb.w	r0, [sp]
    7e68:	9800      	ldr	r0, [sp, #0]
    7e6a:	9000      	str	r0, [sp, #0]
    7e6c:	f89d 0000 	ldrb.w	r0, [sp]
    7e70:	b1a0      	cbz	r0, 7e9c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7e72:	706e      	strb	r6, [r5, #1]
    7e74:	2016      	movs	r0, #22
    7e76:	7028      	strb	r0, [r5, #0]
    7e78:	e005      	b.n	7e86 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7e7a:	bf00      	nop
    7e7c:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    7e80:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7e84:	6068      	str	r0, [r5, #4]
    7e86:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7e8a:	f88d 0000 	strb.w	r0, [sp]
    7e8e:	9800      	ldr	r0, [sp, #0]
    7e90:	9000      	str	r0, [sp, #0]
    7e92:	f89d 0000 	ldrb.w	r0, [sp]
    7e96:	2800      	cmp	r0, #0
    7e98:	d1f0      	bne.n	7e7c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7e9a:	e087      	b.n	7fac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e9c:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7ea0:	f88d 0000 	strb.w	r0, [sp]
    7ea4:	9800      	ldr	r0, [sp, #0]
    7ea6:	9000      	str	r0, [sp, #0]
    7ea8:	f89d 0000 	ldrb.w	r0, [sp]
    7eac:	b170      	cbz	r0, 7ecc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7eae:	706e      	strb	r6, [r5, #1]
    7eb0:	2006      	movs	r0, #6
    7eb2:	7028      	strb	r0, [r5, #0]
    7eb4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7eb8:	6068      	str	r0, [r5, #4]
    7eba:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    7ebe:	60a8      	str	r0, [r5, #8]
    7ec0:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7ec4:	60e8      	str	r0, [r5, #12]
    7ec6:	f504 7401 	add.w	r4, r4, #516	; 0x204
    7eca:	e03a      	b.n	7f42 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7ecc:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7ed0:	f88d 0000 	strb.w	r0, [sp]
    7ed4:	9800      	ldr	r0, [sp, #0]
    7ed6:	9000      	str	r0, [sp, #0]
    7ed8:	f89d 0000 	ldrb.w	r0, [sp]
    7edc:	b1d0      	cbz	r0, 7f14 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7ede:	706e      	strb	r6, [r5, #1]
    7ee0:	2012      	movs	r0, #18
    7ee2:	7028      	strb	r0, [r5, #0]
    7ee4:	e00b      	b.n	7efe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7ee6:	bf00      	nop
    7ee8:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    7eec:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    7ef0:	6068      	str	r0, [r5, #4]
    7ef2:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    7ef6:	60a8      	str	r0, [r5, #8]
    7ef8:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7efc:	60e8      	str	r0, [r5, #12]
    7efe:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7f02:	f88d 0000 	strb.w	r0, [sp]
    7f06:	9800      	ldr	r0, [sp, #0]
    7f08:	9000      	str	r0, [sp, #0]
    7f0a:	f89d 0000 	ldrb.w	r0, [sp]
    7f0e:	2800      	cmp	r0, #0
    7f10:	d1ea      	bne.n	7ee8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7f12:	e04b      	b.n	7fac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7f14:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    7f18:	f88d 0000 	strb.w	r0, [sp]
    7f1c:	9800      	ldr	r0, [sp, #0]
    7f1e:	9000      	str	r0, [sp, #0]
    7f20:	f89d 0000 	ldrb.w	r0, [sp]
    7f24:	b180      	cbz	r0, 7f48 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7f26:	706e      	strb	r6, [r5, #1]
    7f28:	2018      	movs	r0, #24
    7f2a:	7028      	strb	r0, [r5, #0]
    7f2c:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    7f30:	6068      	str	r0, [r5, #4]
    7f32:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    7f36:	60a8      	str	r0, [r5, #8]
    7f38:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    7f3c:	81a8      	strh	r0, [r5, #12]
    7f3e:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    7f42:	f804 6c02 	strb.w	r6, [r4, #-2]
    7f46:	e031      	b.n	7fac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7f48:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7f4c:	f88d 0000 	strb.w	r0, [sp]
    7f50:	9800      	ldr	r0, [sp, #0]
    7f52:	9000      	str	r0, [sp, #0]
    7f54:	f89d 0000 	ldrb.w	r0, [sp]
    7f58:	b138      	cbz	r0, 7f6a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7f5a:	2019      	movs	r0, #25
    7f5c:	7028      	strb	r0, [r5, #0]
    7f5e:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7f62:	6068      	str	r0, [r5, #4]
    7f64:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7f68:	e020      	b.n	7fac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7f6a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7f6e:	f88d 0000 	strb.w	r0, [sp]
    7f72:	9800      	ldr	r0, [sp, #0]
    7f74:	9000      	str	r0, [sp, #0]
    7f76:	f89d 0000 	ldrb.w	r0, [sp]
    7f7a:	2800      	cmp	r0, #0
    7f7c:	f43f af30 	beq.w	7de0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7f80:	706e      	strb	r6, [r5, #1]
    7f82:	2013      	movs	r0, #19
    7f84:	7028      	strb	r0, [r5, #0]
    7f86:	e007      	b.n	7f98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7f88:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7f8c:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    7f90:	6068      	str	r0, [r5, #4]
    7f92:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    7f96:	8128      	strh	r0, [r5, #8]
    7f98:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7f9c:	f88d 0000 	strb.w	r0, [sp]
    7fa0:	9800      	ldr	r0, [sp, #0]
    7fa2:	9000      	str	r0, [sp, #0]
    7fa4:	f89d 0000 	ldrb.w	r0, [sp]
    7fa8:	2800      	cmp	r0, #0
    7faa:	d1ed      	bne.n	7f88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7fac:	2001      	movs	r0, #1
    7fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007fb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7fb0:	491b      	ldr	r1, [pc, #108]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7fb2:	7088      	strb	r0, [r1, #2]
    7fb4:	481c      	ldr	r0, [pc, #112]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    7fb6:	491b      	ldr	r1, [pc, #108]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7fb8:	6081      	str	r1, [r0, #8]
    7fba:	491c      	ldr	r1, [pc, #112]	; (802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>)
    7fbc:	6041      	str	r1, [r0, #4]
    7fbe:	491c      	ldr	r1, [pc, #112]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7fc0:	6001      	str	r1, [r0, #0]
    7fc2:	491c      	ldr	r1, [pc, #112]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7fc4:	6281      	str	r1, [r0, #40]	; 0x28
    7fc6:	491c      	ldr	r1, [pc, #112]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7fc8:	62c1      	str	r1, [r0, #44]	; 0x2c
    7fca:	491c      	ldr	r1, [pc, #112]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    7fcc:	60c1      	str	r1, [r0, #12]
    7fce:	491c      	ldr	r1, [pc, #112]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    7fd0:	6181      	str	r1, [r0, #24]
    7fd2:	491c      	ldr	r1, [pc, #112]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7fd4:	6301      	str	r1, [r0, #48]	; 0x30
    7fd6:	491c      	ldr	r1, [pc, #112]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    7fd8:	6201      	str	r1, [r0, #32]
    7fda:	491c      	ldr	r1, [pc, #112]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    7fdc:	64c1      	str	r1, [r0, #76]	; 0x4c
    7fde:	491c      	ldr	r1, [pc, #112]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    7fe0:	6481      	str	r1, [r0, #72]	; 0x48
    7fe2:	491c      	ldr	r1, [pc, #112]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    7fe4:	6441      	str	r1, [r0, #68]	; 0x44
    7fe6:	491c      	ldr	r1, [pc, #112]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
    7fe8:	6341      	str	r1, [r0, #52]	; 0x34
    7fea:	491c      	ldr	r1, [pc, #112]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
    7fec:	61c1      	str	r1, [r0, #28]
    7fee:	481d      	ldr	r0, [pc, #116]	; (8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>)
    7ff0:	491b      	ldr	r1, [pc, #108]	; (8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>)
    7ff2:	6081      	str	r1, [r0, #8]
    7ff4:	491c      	ldr	r1, [pc, #112]	; (8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
    7ff6:	61c1      	str	r1, [r0, #28]
    7ff8:	491c      	ldr	r1, [pc, #112]	; (806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>)
    7ffa:	6241      	str	r1, [r0, #36]	; 0x24
    7ffc:	491c      	ldr	r1, [pc, #112]	; (8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>)
    7ffe:	62c1      	str	r1, [r0, #44]	; 0x2c
    8000:	491c      	ldr	r1, [pc, #112]	; (8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>)
    8002:	6101      	str	r1, [r0, #16]
    8004:	491c      	ldr	r1, [pc, #112]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    8006:	6141      	str	r1, [r0, #20]
    8008:	491c      	ldr	r1, [pc, #112]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
    800a:	6441      	str	r1, [r0, #68]	; 0x44
    800c:	6341      	str	r1, [r0, #52]	; 0x34
    800e:	491c      	ldr	r1, [pc, #112]	; (8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>)
    8010:	6181      	str	r1, [r0, #24]
    8012:	491c      	ldr	r1, [pc, #112]	; (8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>)
    8014:	6301      	str	r1, [r0, #48]	; 0x30
    8016:	491c      	ldr	r1, [pc, #112]	; (8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>)
    8018:	6481      	str	r1, [r0, #72]	; 0x48
    801a:	491c      	ldr	r1, [pc, #112]	; (808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>)
    801c:	64c1      	str	r1, [r0, #76]	; 0x4c
    801e:	4770      	bx	lr
    8020:	20000120 	.word	0x20000120
    8024:	00009619 	.word	0x00009619
    8028:	20000134 	.word	0x20000134
    802c:	00008f75 	.word	0x00008f75
    8030:	00008fd1 	.word	0x00008fd1
    8034:	0000933d 	.word	0x0000933d
    8038:	00009381 	.word	0x00009381
    803c:	0000907d 	.word	0x0000907d
    8040:	000095f1 	.word	0x000095f1
    8044:	00009735 	.word	0x00009735
    8048:	0000912d 	.word	0x0000912d
    804c:	00009311 	.word	0x00009311
    8050:	000092e5 	.word	0x000092e5
    8054:	000095b1 	.word	0x000095b1
    8058:	000095e1 	.word	0x000095e1
    805c:	0000964d 	.word	0x0000964d
    8060:	00009ab1 	.word	0x00009ab1
    8064:	20000198 	.word	0x20000198
    8068:	00009ad9 	.word	0x00009ad9
    806c:	00009899 	.word	0x00009899
    8070:	00009971 	.word	0x00009971
    8074:	0000986d 	.word	0x0000986d
    8078:	00009a19 	.word	0x00009a19
    807c:	000099f5 	.word	0x000099f5
    8080:	00009a3d 	.word	0x00009a3d
    8084:	00009b31 	.word	0x00009b31
    8088:	00009929 	.word	0x00009929
    808c:	00009959 	.word	0x00009959

00008090 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8090:	4806      	ldr	r0, [pc, #24]	; (80ac <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8092:	4905      	ldr	r1, [pc, #20]	; (80a8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8094:	6581      	str	r1, [r0, #88]	; 0x58
    8096:	4906      	ldr	r1, [pc, #24]	; (80b0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8098:	6601      	str	r1, [r0, #96]	; 0x60
    809a:	4807      	ldr	r0, [pc, #28]	; (80b8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    809c:	4905      	ldr	r1, [pc, #20]	; (80b4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    809e:	6581      	str	r1, [r0, #88]	; 0x58
    80a0:	4906      	ldr	r1, [pc, #24]	; (80bc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    80a2:	65c1      	str	r1, [r0, #92]	; 0x5c
    80a4:	4770      	bx	lr
    80a6:	0000      	.short	0x0000
    80a8:	000093a1 	.word	0x000093a1
    80ac:	20000134 	.word	0x20000134
    80b0:	0000946d 	.word	0x0000946d
    80b4:	0000999d 	.word	0x0000999d
    80b8:	20000198 	.word	0x20000198
    80bc:	000099cd 	.word	0x000099cd

000080c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    80c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    80c4:	2701      	movs	r7, #1
    80c6:	4c72      	ldr	r4, [pc, #456]	; (8290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0>)
    80c8:	2500      	movs	r5, #0
    80ca:	f367 0107 	bfi	r1, r7, #0, #8
    80ce:	80a5      	strh	r5, [r4, #4]
    80d0:	7065      	strb	r5, [r4, #1]
    80d2:	7025      	strb	r5, [r4, #0]
    80d4:	60a0      	str	r0, [r4, #8]
    80d6:	4689      	mov	r9, r1
    80d8:	4680      	mov	r8, r0
    80da:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    80de:	8800      	ldrh	r0, [r0, #0]
    80e0:	f7fc f99c 	bl	441c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    80e4:	b180      	cbz	r0, 8108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    80e6:	68a0      	ldr	r0, [r4, #8]
    80e8:	8800      	ldrh	r0, [r0, #0]
    80ea:	f7fc fbbb 	bl	4864 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    80ee:	68a0      	ldr	r0, [r4, #8]
    80f0:	8800      	ldrh	r0, [r0, #0]
    80f2:	f7fc fb5f 	bl	47b4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    80f6:	68a0      	ldr	r0, [r4, #8]
    80f8:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    80fc:	b1a9      	cbz	r1, 812a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    80fe:	3070      	adds	r0, #112	; 0x70
    8100:	f005 fff6 	bl	e0f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8104:	b128      	cbz	r0, 8112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    8106:	e010      	b.n	812a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8108:	f640 31ab 	movw	r1, #2987	; 0xbab
    810c:	2031      	movs	r0, #49	; 0x31
    810e:	f7fb fd5f 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8112:	68a0      	ldr	r0, [r4, #8]
    8114:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8118:	b139      	cbz	r1, 812a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    811a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    811e:	2301      	movs	r3, #1
    8120:	4619      	mov	r1, r3
    8122:	3070      	adds	r0, #112	; 0x70
    8124:	f004 fe9f 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8128:	b180      	cbz	r0, 814c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    812a:	68a0      	ldr	r0, [r4, #8]
    812c:	3070      	adds	r0, #112	; 0x70
    812e:	f005 ffdf 	bl	e0f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8132:	b128      	cbz	r0, 8140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    8134:	68a0      	ldr	r0, [r4, #8]
    8136:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    813a:	bf00      	nop
    813c:	f000 fb86 	bl	884c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    8140:	68a0      	ldr	r0, [r4, #8]
    8142:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    8146:	b189      	cbz	r1, 816c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    8148:	80e5      	strh	r5, [r4, #6]
    814a:	e01e      	b.n	818a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    814c:	68a0      	ldr	r0, [r4, #8]
    814e:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    8152:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8156:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    815a:	2100      	movs	r1, #0
    815c:	2002      	movs	r0, #2
    815e:	f000 fe03 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8162:	68a0      	ldr	r0, [r4, #8]
    8164:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8168:	2002      	movs	r0, #2
    816a:	e7e7      	b.n	813c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    816c:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8170:	f88d 1000 	strb.w	r1, [sp]
    8174:	9900      	ldr	r1, [sp, #0]
    8176:	9100      	str	r1, [sp, #0]
    8178:	f89d 1000 	ldrb.w	r1, [sp]
    817c:	b919      	cbnz	r1, 8186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    817e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    8180:	8902      	ldrh	r2, [r0, #8]
    8182:	4291      	cmp	r1, r2
    8184:	d800      	bhi.n	8188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    8186:	8901      	ldrh	r1, [r0, #8]
    8188:	80e1      	strh	r1, [r4, #6]
    818a:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    818e:	1e49      	subs	r1, r1, #1
    8190:	b28e      	uxth	r6, r1
    8192:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8196:	4431      	add	r1, r6
    8198:	f820 195c 	strh.w	r1, [r0], #-92
    819c:	8801      	ldrh	r1, [r0, #0]
    819e:	4431      	add	r1, r6
    81a0:	8001      	strh	r1, [r0, #0]
    81a2:	f001 fcf3 	bl	9b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    81a6:	b120      	cbz	r0, 81b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    81a8:	68a0      	ldr	r0, [r4, #8]
    81aa:	f850 1f90 	ldr.w	r1, [r0, #144]!
    81ae:	4431      	add	r1, r6
    81b0:	6001      	str	r1, [r0, #0]
    81b2:	68a0      	ldr	r0, [r4, #8]
    81b4:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    81b8:	2901      	cmp	r1, #1
    81ba:	d802      	bhi.n	81c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    81bc:	1c49      	adds	r1, r1, #1
    81be:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    81c2:	b10e      	cbz	r6, 81c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    81c4:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    81c8:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    81cc:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    81d0:	290b      	cmp	r1, #11
    81d2:	d001      	beq.n	81d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    81d4:	290c      	cmp	r1, #12
    81d6:	d116      	bne.n	8206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146>
    81d8:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    81dc:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    81e0:	1ad2      	subs	r2, r2, r3
    81e2:	b212      	sxth	r2, r2
    81e4:	2a00      	cmp	r2, #0
    81e6:	db0e      	blt.n	8206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146>
    81e8:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    81ec:	60c1      	str	r1, [r0, #12]
    81ee:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    81f2:	7401      	strb	r1, [r0, #16]
    81f4:	2103      	movs	r1, #3
    81f6:	f7fd fbab 	bl	5950 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    81fa:	68a0      	ldr	r0, [r4, #8]
    81fc:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8200:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    8204:	e024      	b.n	8250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8206:	2924      	cmp	r1, #36	; 0x24
    8208:	d10f      	bne.n	822a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    820a:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    820e:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    8212:	1a89      	subs	r1, r1, r2
    8214:	b209      	sxth	r1, r1
    8216:	2900      	cmp	r1, #0
    8218:	db07      	blt.n	822a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    821a:	f000 fe51 	bl	8ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    821e:	68a0      	ldr	r0, [r4, #8]
    8220:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8224:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    8228:	e012      	b.n	8250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    822a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    822e:	2924      	cmp	r1, #36	; 0x24
    8230:	d001      	beq.n	8236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176>
    8232:	2925      	cmp	r1, #37	; 0x25
    8234:	d10c      	bne.n	8250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8236:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    823a:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    823e:	1a08      	subs	r0, r1, r0
    8240:	b200      	sxth	r0, r0
    8242:	2800      	cmp	r0, #0
    8244:	db04      	blt.n	8250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8246:	f000 fe3b 	bl	8ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    824a:	68a0      	ldr	r0, [r4, #8]
    824c:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8250:	68a0      	ldr	r0, [r4, #8]
    8252:	4601      	mov	r1, r0
    8254:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    8258:	3070      	adds	r0, #112	; 0x70
    825a:	f004 fe9d 	bl	cf98 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    825e:	480d      	ldr	r0, [pc, #52]	; (8294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>)
    8260:	9000      	str	r0, [sp, #0]
    8262:	4b0d      	ldr	r3, [pc, #52]	; (8298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8>)
    8264:	4a0d      	ldr	r2, [pc, #52]	; (829c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>)
    8266:	4641      	mov	r1, r8
    8268:	4648      	mov	r0, r9
    826a:	f7fc fbb3 	bl	49d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    826e:	68a0      	ldr	r0, [r4, #8]
    8270:	2301      	movs	r3, #1
    8272:	2105      	movs	r1, #5
    8274:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8278:	3070      	adds	r0, #112	; 0x70
    827a:	f004 fdf4 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    827e:	2800      	cmp	r0, #0
    8280:	d003      	beq.n	828a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca>
    8282:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8286:	f7fc bb9f 	b.w	49c8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    828a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    828e:	0000      	.short	0x0000
    8290:	20000120 	.word	0x20000120
    8294:	000089fd 	.word	0x000089fd
    8298:	00008515 	.word	0x00008515
    829c:	00008e0d 	.word	0x00008e0d
    82a0:	b570      	push	{r4, r5, r6, lr}
    82a2:	4c0f      	ldr	r4, [pc, #60]	; (82e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>)
    82a4:	68a5      	ldr	r5, [r4, #8]
    82a6:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    82aa:	2920      	cmp	r1, #32
    82ac:	d002      	beq.n	82b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>
    82ae:	2926      	cmp	r1, #38	; 0x26
    82b0:	d003      	beq.n	82ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fa>
    82b2:	e011      	b.n	82d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    82b4:	f000 fe3a 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    82b8:	e008      	b.n	82cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    82ba:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    82be:	2301      	movs	r3, #1
    82c0:	210b      	movs	r1, #11
    82c2:	f105 0070 	add.w	r0, r5, #112	; 0x70
    82c6:	f004 fdce 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    82ca:	b138      	cbz	r0, 82dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    82cc:	68a1      	ldr	r1, [r4, #8]
    82ce:	2000      	movs	r0, #0
    82d0:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    82d4:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    82d8:	2000      	movs	r0, #0
    82da:	bd70      	pop	{r4, r5, r6, pc}
    82dc:	202a      	movs	r0, #42	; 0x2a
    82de:	e7e9      	b.n	82b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>
    82e0:	20000120 	.word	0x20000120
    82e4:	4804      	ldr	r0, [pc, #16]	; (82f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x238>)
    82e6:	2100      	movs	r1, #0
    82e8:	6880      	ldr	r0, [r0, #8]
    82ea:	f820 1fa8 	strh.w	r1, [r0, #168]!
    82ee:	7881      	ldrb	r1, [r0, #2]
    82f0:	1c49      	adds	r1, r1, #1
    82f2:	7081      	strb	r1, [r0, #2]
    82f4:	4770      	bx	lr
    82f6:	0000      	.short	0x0000
    82f8:	20000120 	.word	0x20000120
    82fc:	4807      	ldr	r0, [pc, #28]	; (831c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25c>)
    82fe:	b510      	push	{r4, lr}
    8300:	6881      	ldr	r1, [r0, #8]
    8302:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    8306:	1e40      	subs	r0, r0, #1
    8308:	b240      	sxtb	r0, r0
    830a:	7008      	strb	r0, [r1, #0]
    830c:	2800      	cmp	r0, #0
    830e:	da04      	bge.n	831a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25a>
    8310:	f240 118f 	movw	r1, #399	; 0x18f
    8314:	2031      	movs	r0, #49	; 0x31
    8316:	f7fb fc5b 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    831a:	bd10      	pop	{r4, pc}
    831c:	20000120 	.word	0x20000120
    8320:	4917      	ldr	r1, [pc, #92]	; (8380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>)
    8322:	b510      	push	{r4, lr}
    8324:	6889      	ldr	r1, [r1, #8]
    8326:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    832a:	b1b8      	cbz	r0, 835c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    832c:	2a10      	cmp	r2, #16
    832e:	d006      	beq.n	833e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    8330:	2a14      	cmp	r2, #20
    8332:	d007      	beq.n	8344 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>
    8334:	2a15      	cmp	r2, #21
    8336:	d008      	beq.n	834a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    8338:	2a1b      	cmp	r2, #27
    833a:	d11c      	bne.n	8376 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    833c:	e008      	b.n	8350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x290>
    833e:	2101      	movs	r1, #1
    8340:	200b      	movs	r0, #11
    8342:	e007      	b.n	8354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    8344:	f001 fa54 	bl	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1730>
    8348:	e006      	b.n	8358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    834a:	f000 fd2b 	bl	8da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    834e:	e003      	b.n	8358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    8350:	2101      	movs	r1, #1
    8352:	2006      	movs	r0, #6
    8354:	f000 fd08 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8358:	2001      	movs	r0, #1
    835a:	bd10      	pop	{r4, pc}
    835c:	2a21      	cmp	r2, #33	; 0x21
    835e:	d10a      	bne.n	8376 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    8360:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8364:	2802      	cmp	r0, #2
    8366:	d008      	beq.n	837a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8368:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    836c:	2801      	cmp	r0, #1
    836e:	d102      	bne.n	8376 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    8370:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8374:	b108      	cbz	r0, 837a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8376:	2000      	movs	r0, #0
    8378:	bd10      	pop	{r4, pc}
    837a:	2101      	movs	r1, #1
    837c:	2017      	movs	r0, #23
    837e:	e7e9      	b.n	8354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    8380:	20000120 	.word	0x20000120
    8384:	b510      	push	{r4, lr}
    8386:	bbe8      	cbnz	r0, 8404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    8388:	4c31      	ldr	r4, [pc, #196]	; (8450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>)
    838a:	68a0      	ldr	r0, [r4, #8]
    838c:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8390:	07ca      	lsls	r2, r1, #31
    8392:	d002      	beq.n	839a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    8394:	2101      	movs	r1, #1
    8396:	2009      	movs	r0, #9
    8398:	e052      	b.n	8440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    839a:	078a      	lsls	r2, r1, #30
    839c:	d50a      	bpl.n	83b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>
    839e:	2101      	movs	r1, #1
    83a0:	200c      	movs	r0, #12
    83a2:	f000 fce1 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    83a6:	68a0      	ldr	r0, [r4, #8]
    83a8:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    83ac:	f041 0101 	orr.w	r1, r1, #1
    83b0:	7001      	strb	r1, [r0, #0]
    83b2:	e047      	b.n	8444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    83b4:	074a      	lsls	r2, r1, #29
    83b6:	d502      	bpl.n	83be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2fe>
    83b8:	2101      	movs	r1, #1
    83ba:	2013      	movs	r0, #19
    83bc:	e040      	b.n	8440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    83be:	070a      	lsls	r2, r1, #28
    83c0:	d505      	bpl.n	83ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30e>
    83c2:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    83c6:	7141      	strb	r1, [r0, #5]
    83c8:	2101      	movs	r1, #1
    83ca:	2007      	movs	r0, #7
    83cc:	e038      	b.n	8440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    83ce:	f011 0f30 	tst.w	r1, #48	; 0x30
    83d2:	d03b      	beq.n	844c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    83d4:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    83d8:	b9a1      	cbnz	r1, 8404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    83da:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    83de:	b1e1      	cbz	r1, 841a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    83e0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    83e4:	2924      	cmp	r1, #36	; 0x24
    83e6:	d02f      	beq.n	8448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    83e8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    83ec:	2924      	cmp	r1, #36	; 0x24
    83ee:	d02b      	beq.n	8448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    83f0:	f05f 0300 	movs.w	r3, #0
    83f4:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    83f8:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    83fc:	f005 f961 	bl	d6c2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8400:	68a1      	ldr	r1, [r4, #8]
    8402:	e000      	b.n	8406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x346>
    8404:	e022      	b.n	844c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8406:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    840a:	f020 0020 	bic.w	r0, r0, #32
    840e:	f040 0010 	orr.w	r0, r0, #16
    8412:	7008      	strb	r0, [r1, #0]
    8414:	2000      	movs	r0, #0
    8416:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    841a:	68a0      	ldr	r0, [r4, #8]
    841c:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8420:	06c9      	lsls	r1, r1, #27
    8422:	d513      	bpl.n	844c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8424:	f005 f968 	bl	d6f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8428:	f000 f906 	bl	8638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    842c:	68a1      	ldr	r1, [r4, #8]
    842e:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8432:	8bc2      	ldrh	r2, [r0, #30]
    8434:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8438:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    843a:	8048      	strh	r0, [r1, #2]
    843c:	2101      	movs	r1, #1
    843e:	2015      	movs	r0, #21
    8440:	f000 fc92 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8444:	2001      	movs	r0, #1
    8446:	bd10      	pop	{r4, pc}
    8448:	2301      	movs	r3, #1
    844a:	e7d3      	b.n	83f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    844c:	2000      	movs	r0, #0
    844e:	bd10      	pop	{r4, pc}
    8450:	20000120 	.word	0x20000120
    8454:	b570      	push	{r4, r5, r6, lr}
    8456:	460d      	mov	r5, r1
    8458:	4606      	mov	r6, r0
    845a:	f004 ff7f 	bl	d35c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    845e:	4604      	mov	r4, r0
    8460:	4630      	mov	r0, r6
    8462:	f004 ff87 	bl	d374 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8466:	4629      	mov	r1, r5
    8468:	f000 f81e 	bl	84a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    846c:	b1b8      	cbz	r0, 849e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    846e:	4620      	mov	r0, r4
    8470:	f004 fda5 	bl	cfbe <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8474:	0001      	movs	r1, r0
    8476:	d00d      	beq.n	8494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8478:	480a      	ldr	r0, [pc, #40]	; (84a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>)
    847a:	6880      	ldr	r0, [r0, #8]
    847c:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    8480:	428a      	cmp	r2, r1
    8482:	d007      	beq.n	8494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8484:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8488:	2901      	cmp	r1, #1
    848a:	d005      	beq.n	8498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    848c:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    8490:	4220      	tst	r0, r4
    8492:	d004      	beq.n	849e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    8494:	2001      	movs	r0, #1
    8496:	bd70      	pop	{r4, r5, r6, pc}
    8498:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    849c:	e7f8      	b.n	8490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    849e:	2000      	movs	r0, #0
    84a0:	bd70      	pop	{r4, r5, r6, pc}
    84a2:	0000      	.short	0x0000
    84a4:	20000120 	.word	0x20000120
    84a8:	b570      	push	{r4, r5, r6, lr}
    84aa:	460d      	mov	r5, r1
    84ac:	4604      	mov	r4, r0
    84ae:	f004 fd86 	bl	cfbe <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    84b2:	b350      	cbz	r0, 850a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    84b4:	4916      	ldr	r1, [pc, #88]	; (8510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>)
    84b6:	6889      	ldr	r1, [r1, #8]
    84b8:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    84bc:	4282      	cmp	r2, r0
    84be:	d024      	beq.n	850a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    84c0:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    84c4:	2b01      	cmp	r3, #1
    84c6:	d005      	beq.n	84d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x414>
    84c8:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    84cc:	4223      	tst	r3, r4
    84ce:	d013      	beq.n	84f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    84d0:	b11d      	cbz	r5, 84da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41a>
    84d2:	e01a      	b.n	850a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    84d4:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    84d8:	e7f8      	b.n	84cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    84da:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    84de:	4221      	tst	r1, r4
    84e0:	d113      	bne.n	850a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    84e2:	b15a      	cbz	r2, 84fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    84e4:	2a04      	cmp	r2, #4
    84e6:	d00e      	beq.n	8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    84e8:	2804      	cmp	r0, #4
    84ea:	d00c      	beq.n	8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    84ec:	2a08      	cmp	r2, #8
    84ee:	d00a      	beq.n	8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    84f0:	2808      	cmp	r0, #8
    84f2:	d008      	beq.n	8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    84f4:	4282      	cmp	r2, r0
    84f6:	d908      	bls.n	850a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    84f8:	2000      	movs	r0, #0
    84fa:	bd70      	pop	{r4, r5, r6, pc}
    84fc:	f240 118f 	movw	r1, #399	; 0x18f
    8500:	2006      	movs	r0, #6
    8502:	f7fb fb65 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8506:	4282      	cmp	r2, r0
    8508:	d3f6      	bcc.n	84f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    850a:	2001      	movs	r0, #1
    850c:	bd70      	pop	{r4, r5, r6, pc}
    850e:	0000      	.short	0x0000
    8510:	20000120 	.word	0x20000120
    8514:	490c      	ldr	r1, [pc, #48]	; (8548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>)
    8516:	4602      	mov	r2, r0
    8518:	7848      	ldrb	r0, [r1, #1]
    851a:	b998      	cbnz	r0, 8544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    851c:	4608      	mov	r0, r1
    851e:	6880      	ldr	r0, [r0, #8]
    8520:	b142      	cbz	r2, 8534 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>
    8522:	7909      	ldrb	r1, [r1, #4]
    8524:	0709      	lsls	r1, r1, #28
    8526:	d503      	bpl.n	8530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    8528:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    852c:	2808      	cmp	r0, #8
    852e:	d009      	beq.n	8544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    8530:	2001      	movs	r0, #1
    8532:	4770      	bx	lr
    8534:	f100 0128 	add.w	r1, r0, #40	; 0x28
    8538:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    853a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    853c:	428a      	cmp	r2, r1
    853e:	d801      	bhi.n	8544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    8540:	f7fe bd60 	b.w	7004 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8544:	2000      	movs	r0, #0
    8546:	4770      	bx	lr
    8548:	20000120 	.word	0x20000120
    854c:	b570      	push	{r4, r5, r6, lr}
    854e:	4c39      	ldr	r4, [pc, #228]	; (8634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x574>)
    8550:	4605      	mov	r5, r0
    8552:	68a0      	ldr	r0, [r4, #8]
    8554:	3070      	adds	r0, #112	; 0x70
    8556:	f005 fdcb 	bl	e0f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    855a:	2800      	cmp	r0, #0
    855c:	d169      	bne.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    855e:	2d00      	cmp	r5, #0
    8560:	d167      	bne.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8562:	68a0      	ldr	r0, [r4, #8]
    8564:	2301      	movs	r3, #1
    8566:	4619      	mov	r1, r3
    8568:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    856c:	3070      	adds	r0, #112	; 0x70
    856e:	f004 fc7a 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8572:	2800      	cmp	r0, #0
    8574:	d15d      	bne.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8576:	68a0      	ldr	r0, [r4, #8]
    8578:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    857c:	b149      	cbz	r1, 8592 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d2>
    857e:	2100      	movs	r1, #0
    8580:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8584:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8588:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    858c:	2100      	movs	r1, #0
    858e:	2002      	movs	r0, #2
    8590:	e045      	b.n	861e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8592:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8596:	2301      	movs	r3, #1
    8598:	2104      	movs	r1, #4
    859a:	3070      	adds	r0, #112	; 0x70
    859c:	f004 fc63 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    85a0:	4605      	mov	r5, r0
    85a2:	f7ff feef 	bl	8384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    85a6:	2800      	cmp	r0, #0
    85a8:	d143      	bne.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    85aa:	4628      	mov	r0, r5
    85ac:	f7ff feb8 	bl	8320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>
    85b0:	2800      	cmp	r0, #0
    85b2:	d13e      	bne.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    85b4:	68a0      	ldr	r0, [r4, #8]
    85b6:	2301      	movs	r3, #1
    85b8:	2100      	movs	r1, #0
    85ba:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    85be:	3070      	adds	r0, #112	; 0x70
    85c0:	f004 fc51 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    85c4:	b178      	cbz	r0, 85e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    85c6:	68a0      	ldr	r0, [r4, #8]
    85c8:	2301      	movs	r3, #1
    85ca:	2104      	movs	r1, #4
    85cc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    85d0:	3070      	adds	r0, #112	; 0x70
    85d2:	f004 fc48 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    85d6:	b930      	cbnz	r0, 85e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    85d8:	68a0      	ldr	r0, [r4, #8]
    85da:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    85de:	b110      	cbz	r0, 85e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    85e0:	2100      	movs	r1, #0
    85e2:	2012      	movs	r0, #18
    85e4:	e01b      	b.n	861e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    85e6:	68a0      	ldr	r0, [r4, #8]
    85e8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    85ec:	290a      	cmp	r1, #10
    85ee:	d01a      	beq.n	8626 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x566>
    85f0:	2d00      	cmp	r5, #0
    85f2:	d11e      	bne.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    85f4:	f000 fb18 	bl	8c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>
    85f8:	2800      	cmp	r0, #0
    85fa:	d11a      	bne.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    85fc:	68a0      	ldr	r0, [r4, #8]
    85fe:	2301      	movs	r3, #1
    8600:	2100      	movs	r1, #0
    8602:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8606:	3070      	adds	r0, #112	; 0x70
    8608:	f004 fc2d 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    860c:	2800      	cmp	r0, #0
    860e:	d010      	beq.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8610:	68a0      	ldr	r0, [r4, #8]
    8612:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    8616:	2800      	cmp	r0, #0
    8618:	d00b      	beq.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    861a:	2100      	movs	r1, #0
    861c:	20ff      	movs	r0, #255	; 0xff
    861e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8622:	f000 bba1 	b.w	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8626:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    862a:	7101      	strb	r1, [r0, #4]
    862c:	2100      	movs	r1, #0
    862e:	2007      	movs	r0, #7
    8630:	e7f5      	b.n	861e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	20000120 	.word	0x20000120
    8638:	b510      	push	{r4, lr}
    863a:	4c0a      	ldr	r4, [pc, #40]	; (8664 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a4>)
    863c:	68a1      	ldr	r1, [r4, #8]
    863e:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    8642:	2801      	cmp	r0, #1
    8644:	d00a      	beq.n	865c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x59c>
    8646:	8808      	ldrh	r0, [r1, #0]
    8648:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    864c:	3128      	adds	r1, #40	; 0x28
    864e:	f005 f814 	bl	d67a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8652:	78a0      	ldrb	r0, [r4, #2]
    8654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8658:	f7fb b90a 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    865c:	2002      	movs	r0, #2
    865e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8662:	bd10      	pop	{r4, pc}
    8664:	20000120 	.word	0x20000120
    8668:	b570      	push	{r4, r5, r6, lr}
    866a:	4c25      	ldr	r4, [pc, #148]	; (8700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    866c:	0005      	movs	r5, r0
    866e:	d12f      	bne.n	86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    8670:	f000 f8a4 	bl	87bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fc>
    8674:	f000 f848 	bl	8708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x648>
    8678:	0005      	movs	r5, r0
    867a:	d129      	bne.n	86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    867c:	88a0      	ldrh	r0, [r4, #4]
    867e:	0741      	lsls	r1, r0, #29
    8680:	d506      	bpl.n	8690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    8682:	68a1      	ldr	r1, [r4, #8]
    8684:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    8688:	2907      	cmp	r1, #7
    868a:	d101      	bne.n	8690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    868c:	2101      	movs	r1, #1
    868e:	7021      	strb	r1, [r4, #0]
    8690:	0780      	lsls	r0, r0, #30
    8692:	d512      	bpl.n	86ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    8694:	68e0      	ldr	r0, [r4, #12]
    8696:	78c0      	ldrb	r0, [r0, #3]
    8698:	2819      	cmp	r0, #25
    869a:	d205      	bcs.n	86a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>
    869c:	4919      	ldr	r1, [pc, #100]	; (8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>)
    869e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    86a2:	b109      	cbz	r1, 86a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>
    86a4:	4788      	blx	r1
    86a6:	e008      	b.n	86ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    86a8:	28ff      	cmp	r0, #255	; 0xff
    86aa:	d004      	beq.n	86b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    86ac:	f240 713c 	movw	r1, #1852	; 0x73c
    86b0:	2031      	movs	r0, #49	; 0x31
    86b2:	f7fb fa8d 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86b6:	f001 f8cd 	bl	9854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1794>
    86ba:	7920      	ldrb	r0, [r4, #4]
    86bc:	06c0      	lsls	r0, r0, #27
    86be:	d507      	bpl.n	86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    86c0:	68a0      	ldr	r0, [r4, #8]
    86c2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    86c6:	290b      	cmp	r1, #11
    86c8:	d102      	bne.n	86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    86ca:	210c      	movs	r1, #12
    86cc:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    86d0:	7860      	ldrb	r0, [r4, #1]
    86d2:	0700      	lsls	r0, r0, #28
    86d4:	d511      	bpl.n	86fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63a>
    86d6:	68a0      	ldr	r0, [r4, #8]
    86d8:	2301      	movs	r3, #1
    86da:	2105      	movs	r1, #5
    86dc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    86e0:	3070      	adds	r0, #112	; 0x70
    86e2:	f004 fbc0 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    86e6:	b128      	cbz	r0, 86f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    86e8:	68a1      	ldr	r1, [r4, #8]
    86ea:	2508      	movs	r5, #8
    86ec:	2000      	movs	r0, #0
    86ee:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    86f2:	e002      	b.n	86fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63a>
    86f4:	2000      	movs	r0, #0
    86f6:	f7fc fa11 	bl	4b1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    86fa:	4628      	mov	r0, r5
    86fc:	bd70      	pop	{r4, r5, r6, pc}
    86fe:	0000      	.short	0x0000
    8700:	20000120 	.word	0x20000120
    8704:	20000198 	.word	0x20000198
    8708:	b570      	push	{r4, r5, r6, lr}
    870a:	4c2a      	ldr	r4, [pc, #168]	; (87b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f4>)
    870c:	2000      	movs	r0, #0
    870e:	7921      	ldrb	r1, [r4, #4]
    8710:	07c9      	lsls	r1, r1, #31
    8712:	d015      	beq.n	8740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    8714:	6920      	ldr	r0, [r4, #16]
    8716:	2301      	movs	r3, #1
    8718:	2105      	movs	r1, #5
    871a:	78c5      	ldrb	r5, [r0, #3]
    871c:	68a0      	ldr	r0, [r4, #8]
    871e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8722:	3070      	adds	r0, #112	; 0x70
    8724:	f004 fb9f 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8728:	b158      	cbz	r0, 8742 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    872a:	1ead      	subs	r5, r5, #2
    872c:	2d0a      	cmp	r5, #10
    872e:	d206      	bcs.n	873e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    8730:	e8df f005 	tbb	[pc, r5]
    8734:	05050707 	.word	0x05050707
    8738:	05050707 	.word	0x05050707
    873c:	0707      	.short	0x0707
    873e:	2008      	movs	r0, #8
    8740:	bd70      	pop	{r4, r5, r6, pc}
    8742:	6920      	ldr	r0, [r4, #16]
    8744:	f7fd fa0c 	bl	5b60 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8748:	b138      	cbz	r0, 875a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69a>
    874a:	6920      	ldr	r0, [r4, #16]
    874c:	78c5      	ldrb	r5, [r0, #3]
    874e:	b145      	cbz	r5, 8762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    8750:	2d01      	cmp	r5, #1
    8752:	d006      	beq.n	8762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    8754:	2d16      	cmp	r5, #22
    8756:	d118      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    8758:	e003      	b.n	8762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    875a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    875e:	f000 bd0f 	b.w	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    8762:	68a0      	ldr	r0, [r4, #8]
    8764:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    8768:	f004 fbcb 	bl	cf02 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    876c:	b168      	cbz	r0, 878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    876e:	68a1      	ldr	r1, [r4, #8]
    8770:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    8774:	281f      	cmp	r0, #31
    8776:	d008      	beq.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    8778:	2820      	cmp	r0, #32
    877a:	d003      	beq.n	8784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c4>
    877c:	2d16      	cmp	r5, #22
    877e:	d00c      	beq.n	879a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    8780:	2002      	movs	r0, #2
    8782:	bd70      	pop	{r4, r5, r6, pc}
    8784:	2026      	movs	r0, #38	; 0x26
    8786:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    878a:	2d19      	cmp	r5, #25
    878c:	d207      	bcs.n	879e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    878e:	480a      	ldr	r0, [pc, #40]	; (87b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f8>)
    8790:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8794:	b118      	cbz	r0, 879e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    8796:	4780      	blx	r0
    8798:	e003      	b.n	87a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    879a:	2020      	movs	r0, #32
    879c:	bd70      	pop	{r4, r5, r6, pc}
    879e:	f000 fcef 	bl	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    87a2:	68a2      	ldr	r2, [r4, #8]
    87a4:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    87a8:	1c49      	adds	r1, r1, #1
    87aa:	f143 0300 	adc.w	r3, r3, #0
    87ae:	e9c2 1300 	strd	r1, r3, [r2]
    87b2:	bd70      	pop	{r4, r5, r6, pc}
    87b4:	20000120 	.word	0x20000120
    87b8:	20000134 	.word	0x20000134
    87bc:	b570      	push	{r4, r5, r6, lr}
    87be:	4c22      	ldr	r4, [pc, #136]	; (8848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    87c0:	7920      	ldrb	r0, [r4, #4]
    87c2:	0700      	lsls	r0, r0, #28
    87c4:	d53e      	bpl.n	8844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    87c6:	68a0      	ldr	r0, [r4, #8]
    87c8:	3070      	adds	r0, #112	; 0x70
    87ca:	f005 fc91 	bl	e0f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    87ce:	b148      	cbz	r0, 87e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x724>
    87d0:	68a0      	ldr	r0, [r4, #8]
    87d2:	21fe      	movs	r1, #254	; 0xfe
    87d4:	2500      	movs	r5, #0
    87d6:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    87da:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    87de:	2919      	cmp	r1, #25
    87e0:	d10c      	bne.n	87fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73c>
    87e2:	e004      	b.n	87ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    87e4:	f240 7146 	movw	r1, #1862	; 0x746
    87e8:	2031      	movs	r0, #49	; 0x31
    87ea:	f7fb f9f1 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87ee:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    87f2:	f7ff fd83 	bl	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    87f6:	68a0      	ldr	r0, [r4, #8]
    87f8:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    87fc:	68a0      	ldr	r0, [r4, #8]
    87fe:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8802:	291f      	cmp	r1, #31
    8804:	d002      	beq.n	880c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>
    8806:	2927      	cmp	r1, #39	; 0x27
    8808:	d113      	bne.n	8832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x772>
    880a:	e00b      	b.n	8824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>
    880c:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8810:	f004 fb77 	bl	cf02 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8814:	b108      	cbz	r0, 881a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75a>
    8816:	2026      	movs	r0, #38	; 0x26
    8818:	e000      	b.n	881c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    881a:	2020      	movs	r0, #32
    881c:	68a1      	ldr	r1, [r4, #8]
    881e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8822:	e006      	b.n	8832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x772>
    8824:	2101      	movs	r1, #1
    8826:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    882a:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    882e:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    8832:	68a0      	ldr	r0, [r4, #8]
    8834:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    8838:	2908      	cmp	r1, #8
    883a:	d103      	bne.n	8844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    883c:	2102      	movs	r1, #2
    883e:	7021      	strb	r1, [r4, #0]
    8840:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    8844:	bd70      	pop	{r4, r5, r6, pc}
    8846:	0000      	.short	0x0000
    8848:	20000120 	.word	0x20000120
    884c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    884e:	4605      	mov	r5, r0
    8850:	4668      	mov	r0, sp
    8852:	f7fb fff1 	bl	4838 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8856:	b318      	cbz	r0, 88a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    8858:	2222      	movs	r2, #34	; 0x22
    885a:	2100      	movs	r1, #0
    885c:	9800      	ldr	r0, [sp, #0]
    885e:	f003 fa08 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8862:	2103      	movs	r1, #3
    8864:	9800      	ldr	r0, [sp, #0]
    8866:	f004 fdd9 	bl	d41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    886a:	9800      	ldr	r0, [sp, #0]
    886c:	7801      	ldrb	r1, [r0, #0]
    886e:	f021 0110 	bic.w	r1, r1, #16
    8872:	7001      	strb	r1, [r0, #0]
    8874:	4629      	mov	r1, r5
    8876:	f7fd f99f 	bl	5bb8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    887a:	2100      	movs	r1, #0
    887c:	4c5e      	ldr	r4, [pc, #376]	; (89f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>)
    887e:	f644 162f 	movw	r6, #18735	; 0x492f
    8882:	2d0e      	cmp	r5, #14
    8884:	d07e      	beq.n	8984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    8886:	dc0e      	bgt.n	88a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e6>
    8888:	f1a5 0502 	sub.w	r5, r5, #2
    888c:	2d0c      	cmp	r5, #12
    888e:	d21c      	bcs.n	88ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    8890:	e8df f005 	tbb	[pc, r5]
    8894:	a7451b1e 	.word	0xa7451b1e
    8898:	511b1ea7 	.word	0x511b1ea7
    889c:	3723a71b 	.word	0x3723a71b
    88a0:	f640 116b 	movw	r1, #2411	; 0x96b
    88a4:	e0a3      	b.n	89ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92e>
    88a6:	2d15      	cmp	r5, #21
    88a8:	d058      	beq.n	895c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    88aa:	dc08      	bgt.n	88be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fe>
    88ac:	2d11      	cmp	r5, #17
    88ae:	d01f      	beq.n	88f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x830>
    88b0:	2d12      	cmp	r5, #18
    88b2:	d01c      	beq.n	88ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x82e>
    88b4:	2d13      	cmp	r5, #19
    88b6:	d01a      	beq.n	88ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x82e>
    88b8:	2d14      	cmp	r5, #20
    88ba:	d106      	bne.n	88ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    88bc:	e04e      	b.n	895c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    88be:	2d16      	cmp	r5, #22
    88c0:	d023      	beq.n	890a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    88c2:	2d17      	cmp	r5, #23
    88c4:	d065      	beq.n	8992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    88c6:	2dff      	cmp	r5, #255	; 0xff
    88c8:	d07e      	beq.n	89c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x908>
    88ca:	f640 11dd 	movw	r1, #2525	; 0x9dd
    88ce:	e08e      	b.n	89ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92e>
    88d0:	68a1      	ldr	r1, [r4, #8]
    88d2:	9800      	ldr	r0, [sp, #0]
    88d4:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    88d8:	e015      	b.n	8906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x846>
    88da:	9800      	ldr	r0, [sp, #0]
    88dc:	220b      	movs	r2, #11
    88de:	7102      	strb	r2, [r0, #4]
    88e0:	2259      	movs	r2, #89	; 0x59
    88e2:	7142      	strb	r2, [r0, #5]
    88e4:	7181      	strb	r1, [r0, #6]
    88e6:	212b      	movs	r1, #43	; 0x2b
    88e8:	71c1      	strb	r1, [r0, #7]
    88ea:	2112      	movs	r1, #18
    88ec:	7201      	strb	r1, [r0, #8]
    88ee:	e078      	b.n	89e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    88f0:	2103      	movs	r1, #3
    88f2:	9800      	ldr	r0, [sp, #0]
    88f4:	f004 fd6e 	bl	d3d4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    88f8:	2106      	movs	r1, #6
    88fa:	9800      	ldr	r0, [sp, #0]
    88fc:	f004 fd6c 	bl	d3d8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    8900:	e06f      	b.n	89e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8902:	9800      	ldr	r0, [sp, #0]
    8904:	2106      	movs	r1, #6
    8906:	7101      	strb	r1, [r0, #4]
    8908:	e06b      	b.n	89e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    890a:	9800      	ldr	r0, [sp, #0]
    890c:	f8d4 1008 	ldr.w	r1, [r4, #8]
    8910:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    8914:	7102      	strb	r2, [r0, #4]
    8916:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    891a:	7141      	strb	r1, [r0, #5]
    891c:	e061      	b.n	89e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    891e:	68a1      	ldr	r1, [r4, #8]
    8920:	9800      	ldr	r0, [sp, #0]
    8922:	f501 7188 	add.w	r1, r1, #272	; 0x110
    8926:	f004 fd6a 	bl	d3fe <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    892a:	68a1      	ldr	r1, [r4, #8]
    892c:	9800      	ldr	r0, [sp, #0]
    892e:	31dc      	adds	r1, #220	; 0xdc
    8930:	f004 fd62 	bl	d3f8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    8934:	e055      	b.n	89e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8936:	9101      	str	r1, [sp, #4]
    8938:	9102      	str	r1, [sp, #8]
    893a:	f001 fe67 	bl	a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    893e:	68a1      	ldr	r1, [r4, #8]
    8940:	4030      	ands	r0, r6
    8942:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8946:	4001      	ands	r1, r0
    8948:	f88d 1004 	strb.w	r1, [sp, #4]
    894c:	0a00      	lsrs	r0, r0, #8
    894e:	f88d 0005 	strb.w	r0, [sp, #5]
    8952:	a901      	add	r1, sp, #4
    8954:	9800      	ldr	r0, [sp, #0]
    8956:	f004 fd5c 	bl	d412 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    895a:	e042      	b.n	89e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    895c:	68a0      	ldr	r0, [r4, #8]
    895e:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8962:	9800      	ldr	r0, [sp, #0]
    8964:	f004 fd62 	bl	d42c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8968:	68a0      	ldr	r0, [r4, #8]
    896a:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    896e:	9800      	ldr	r0, [sp, #0]
    8970:	f004 fd60 	bl	d434 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8974:	68a0      	ldr	r0, [r4, #8]
    8976:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    897a:	9800      	ldr	r0, [sp, #0]
    897c:	f004 fd5e 	bl	d43c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    8980:	68a0      	ldr	r0, [r4, #8]
    8982:	e000      	b.n	8986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c6>
    8984:	e010      	b.n	89a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8e8>
    8986:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    898a:	9800      	ldr	r0, [sp, #0]
    898c:	f004 fd5a 	bl	d444 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    8990:	e027      	b.n	89e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8992:	68a1      	ldr	r1, [r4, #8]
    8994:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8998:	2801      	cmp	r0, #1
    899a:	9800      	ldr	r0, [sp, #0]
    899c:	d0b8      	beq.n	8910 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x850>
    899e:	f811 2f62 	ldrb.w	r2, [r1, #98]!
    89a2:	7102      	strb	r2, [r0, #4]
    89a4:	7849      	ldrb	r1, [r1, #1]
    89a6:	e7b8      	b.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    89a8:	9101      	str	r1, [sp, #4]
    89aa:	9102      	str	r1, [sp, #8]
    89ac:	f001 fe2e 	bl	a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    89b0:	68a1      	ldr	r1, [r4, #8]
    89b2:	4030      	ands	r0, r6
    89b4:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    89b8:	4001      	ands	r1, r0
    89ba:	f88d 1004 	strb.w	r1, [sp, #4]
    89be:	0a00      	lsrs	r0, r0, #8
    89c0:	f88d 0005 	strb.w	r0, [sp, #5]
    89c4:	a901      	add	r1, sp, #4
    89c6:	e000      	b.n	89ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90a>
    89c8:	e003      	b.n	89d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x912>
    89ca:	9800      	ldr	r0, [sp, #0]
    89cc:	f004 fd1c 	bl	d408 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    89d0:	e007      	b.n	89e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    89d2:	68a0      	ldr	r0, [r4, #8]
    89d4:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    89d8:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    89dc:	9800      	ldr	r0, [sp, #0]
    89de:	f004 fcfd 	bl	d3dc <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    89e2:	f7fb ff03 	bl	47ec <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    89e6:	2800      	cmp	r0, #0
    89e8:	d104      	bne.n	89f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x934>
    89ea:	f640 11e1 	movw	r1, #2529	; 0x9e1
    89ee:	2031      	movs	r0, #49	; 0x31
    89f0:	f7fb f8ee 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    89f6:	0000      	.short	0x0000
    89f8:	20000120 	.word	0x20000120
    89fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a00:	4c88      	ldr	r4, [pc, #544]	; (8c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>)
    8a02:	4682      	mov	sl, r0
    8a04:	4689      	mov	r9, r1
    8a06:	68a0      	ldr	r0, [r4, #8]
    8a08:	8800      	ldrh	r0, [r0, #0]
    8a0a:	f7fb fd07 	bl	441c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8a0e:	0006      	movs	r6, r0
    8a10:	d00a      	beq.n	8a28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    8a12:	88a0      	ldrh	r0, [r4, #4]
    8a14:	f04f 0500 	mov.w	r5, #0
    8a18:	05c0      	lsls	r0, r0, #23
    8a1a:	68a0      	ldr	r0, [r4, #8]
    8a1c:	d509      	bpl.n	8a32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    8a1e:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    8a22:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8a26:	e008      	b.n	8a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8a28:	f640 517d 	movw	r1, #3453	; 0xd7d
    8a2c:	2031      	movs	r0, #49	; 0x31
    8a2e:	f7fb f8cf 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a32:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    8a36:	1c49      	adds	r1, r1, #1
    8a38:	8001      	strh	r1, [r0, #0]
    8a3a:	f001 f8a7 	bl	9b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    8a3e:	f04f 0801 	mov.w	r8, #1
    8a42:	b328      	cbz	r0, 8a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8a44:	88a0      	ldrh	r0, [r4, #4]
    8a46:	0500      	lsls	r0, r0, #20
    8a48:	d506      	bpl.n	8a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>
    8a4a:	68a0      	ldr	r0, [r4, #8]
    8a4c:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    8a50:	b111      	cbz	r1, 8a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>
    8a52:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8a56:	e01b      	b.n	8a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8a58:	68a0      	ldr	r0, [r4, #8]
    8a5a:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    8a5e:	1c49      	adds	r1, r1, #1
    8a60:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    8a64:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
    8a68:	428a      	cmp	r2, r1
    8a6a:	d301      	bcc.n	8a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b0>
    8a6c:	1a53      	subs	r3, r2, r1
    8a6e:	e000      	b.n	8a72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    8a70:	2300      	movs	r3, #0
    8a72:	88e7      	ldrh	r7, [r4, #6]
    8a74:	1d7f      	adds	r7, r7, #5
    8a76:	42bb      	cmp	r3, r7
    8a78:	d801      	bhi.n	8a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9be>
    8a7a:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    8a7e:	4291      	cmp	r1, r2
    8a80:	d306      	bcc.n	8a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8a82:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8a86:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    8a8a:	78a0      	ldrb	r0, [r4, #2]
    8a8c:	f7fa fef0 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8a90:	88a0      	ldrh	r0, [r4, #4]
    8a92:	f04f 0702 	mov.w	r7, #2
    8a96:	f410 7f40 	tst.w	r0, #768	; 0x300
    8a9a:	d00e      	beq.n	8aba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fa>
    8a9c:	68a0      	ldr	r0, [r4, #8]
    8a9e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8aa2:	b111      	cbz	r1, 8aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ea>
    8aa4:	2903      	cmp	r1, #3
    8aa6:	d108      	bne.n	8aba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fa>
    8aa8:	e002      	b.n	8ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f0>
    8aaa:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    8aae:	e001      	b.n	8ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8ab0:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8ab4:	2101      	movs	r1, #1
    8ab6:	f7fe fac7 	bl	7048 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8aba:	68a0      	ldr	r0, [r4, #8]
    8abc:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8ac0:	2901      	cmp	r1, #1
    8ac2:	d104      	bne.n	8ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8ac4:	88a1      	ldrh	r1, [r4, #4]
    8ac6:	0549      	lsls	r1, r1, #21
    8ac8:	d501      	bpl.n	8ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8aca:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8ace:	f1ba 0f00 	cmp.w	sl, #0
    8ad2:	d175      	bne.n	8bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb00>
    8ad4:	7921      	ldrb	r1, [r4, #4]
    8ad6:	0649      	lsls	r1, r1, #25
    8ad8:	d502      	bpl.n	8ae0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    8ada:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    8ade:	e004      	b.n	8aea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    8ae0:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    8ae4:	1c49      	adds	r1, r1, #1
    8ae6:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    8aea:	4648      	mov	r0, r9
    8aec:	f7ff fdbc 	bl	8668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    8af0:	ea40 0009 	orr.w	r0, r0, r9
    8af4:	4681      	mov	r9, r0
    8af6:	f7ff fd29 	bl	854c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    8afa:	68a7      	ldr	r7, [r4, #8]
    8afc:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    8b00:	1c40      	adds	r0, r0, #1
    8b02:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8b06:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    8b0a:	b128      	cbz	r0, 8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    8b0c:	f7fc f874 	bl	4bf8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8b10:	b1a8      	cbz	r0, 8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8b12:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    8b16:	e012      	b.n	8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8b18:	f7fb ff10 	bl	493c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8b1c:	b108      	cbz	r0, 8b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    8b1e:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    8b22:	f7fb ff05 	bl	4930 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8b26:	b150      	cbz	r0, 8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8b28:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    8b2c:	1c40      	adds	r0, r0, #1
    8b2e:	b2c0      	uxtb	r0, r0
    8b30:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    8b34:	2802      	cmp	r0, #2
    8b36:	d902      	bls.n	8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8b38:	f827 5ff8 	strh.w	r5, [r7, #248]!
    8b3c:	733d      	strb	r5, [r7, #12]
    8b3e:	68a0      	ldr	r0, [r4, #8]
    8b40:	2301      	movs	r3, #1
    8b42:	2100      	movs	r1, #0
    8b44:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8b48:	3070      	adds	r0, #112	; 0x70
    8b4a:	f004 f98c 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b4e:	b920      	cbnz	r0, 8b5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa9a>
    8b50:	68a0      	ldr	r0, [r4, #8]
    8b52:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8b56:	280c      	cmp	r0, #12
    8b58:	d149      	bne.n	8bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8b5a:	68a0      	ldr	r0, [r4, #8]
    8b5c:	2301      	movs	r3, #1
    8b5e:	2100      	movs	r1, #0
    8b60:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8b64:	3070      	adds	r0, #112	; 0x70
    8b66:	f004 f97e 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b6a:	b350      	cbz	r0, 8bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8b6c:	68a0      	ldr	r0, [r4, #8]
    8b6e:	2301      	movs	r3, #1
    8b70:	2100      	movs	r1, #0
    8b72:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8b76:	3070      	adds	r0, #112	; 0x70
    8b78:	f004 f975 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b7c:	b308      	cbz	r0, 8bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8b7e:	68a0      	ldr	r0, [r4, #8]
    8b80:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8b84:	2902      	cmp	r1, #2
    8b86:	d132      	bne.n	8bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8b88:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    8b8c:	b9c8      	cbnz	r0, 8bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8b8e:	4630      	mov	r0, r6
    8b90:	f003 fd4d 	bl	c62e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8b94:	b1a8      	cbz	r0, 8bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8b96:	68a0      	ldr	r0, [r4, #8]
    8b98:	3070      	adds	r0, #112	; 0x70
    8b9a:	f005 faa9 	bl	e0f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b9e:	b980      	cbnz	r0, 8bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8ba0:	68a2      	ldr	r2, [r4, #8]
    8ba2:	f8b2 00f2 	ldrh.w	r0, [r2, #242]	; 0xf2
    8ba6:	2801      	cmp	r0, #1
    8ba8:	d921      	bls.n	8bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8baa:	f882 80fa 	strb.w	r8, [r2, #250]	; 0xfa
    8bae:	f8b2 109e 	ldrh.w	r1, [r2, #158]	; 0x9e
    8bb2:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    8bb6:	1e8b      	subs	r3, r1, #2
    8bb8:	4298      	cmp	r0, r3
    8bba:	db03      	blt.n	8bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    8bbc:	2001      	movs	r0, #1
    8bbe:	e004      	b.n	8bca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    8bc0:	e021      	b.n	8c06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb46>
    8bc2:	e014      	b.n	8bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8bc4:	1a08      	subs	r0, r1, r0
    8bc6:	1e40      	subs	r0, r0, #1
    8bc8:	b280      	uxth	r0, r0
    8bca:	f8b2 10f8 	ldrh.w	r1, [r2, #248]	; 0xf8
    8bce:	88e3      	ldrh	r3, [r4, #6]
    8bd0:	4299      	cmp	r1, r3
    8bd2:	d301      	bcc.n	8bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    8bd4:	2101      	movs	r1, #1
    8bd6:	e002      	b.n	8bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb1e>
    8bd8:	1a59      	subs	r1, r3, r1
    8bda:	1c49      	adds	r1, r1, #1
    8bdc:	b289      	uxth	r1, r1
    8bde:	4288      	cmp	r0, r1
    8be0:	d900      	bls.n	8be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb24>
    8be2:	4608      	mov	r0, r1
    8be4:	2801      	cmp	r0, #1
    8be6:	d106      	bne.n	8bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb36>
    8be8:	f882 50fa 	strb.w	r5, [r2, #250]	; 0xfa
    8bec:	e003      	b.n	8bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb36>
    8bee:	68a1      	ldr	r1, [r4, #8]
    8bf0:	2001      	movs	r0, #1
    8bf2:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    8bf6:	68a1      	ldr	r1, [r4, #8]
    8bf8:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    8bfc:	4410      	add	r0, r2
    8bfe:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    8c02:	f001 f883 	bl	9d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c4c>
    8c06:	7920      	ldrb	r0, [r4, #4]
    8c08:	464a      	mov	r2, r9
    8c0a:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8c0e:	4650      	mov	r0, sl
    8c10:	f000 ffd0 	bl	9bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    8c14:	68a0      	ldr	r0, [r4, #8]
    8c16:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    8c1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c1e:	f7fb bdcf 	b.w	47c0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8c22:	0000      	.short	0x0000
    8c24:	20000120 	.word	0x20000120
    8c28:	b570      	push	{r4, r5, r6, lr}
    8c2a:	4c4e      	ldr	r4, [pc, #312]	; (8d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca4>)
    8c2c:	2301      	movs	r3, #1
    8c2e:	2100      	movs	r1, #0
    8c30:	68a0      	ldr	r0, [r4, #8]
    8c32:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8c36:	3070      	adds	r0, #112	; 0x70
    8c38:	f004 f915 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c3c:	2800      	cmp	r0, #0
    8c3e:	d076      	beq.n	8d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6e>
    8c40:	68a0      	ldr	r0, [r4, #8]
    8c42:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    8c46:	2500      	movs	r5, #0
    8c48:	b139      	cbz	r1, 8c5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9a>
    8c4a:	2100      	movs	r1, #0
    8c4c:	200e      	movs	r0, #14
    8c4e:	f000 f88b 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8c52:	68a0      	ldr	r0, [r4, #8]
    8c54:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    8c58:	e082      	b.n	8d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8c5a:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    8c5e:	b119      	cbz	r1, 8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    8c60:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    8c64:	0789      	lsls	r1, r1, #30
    8c66:	d00a      	beq.n	8c7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbe>
    8c68:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8c6c:	b111      	cbz	r1, 8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb4>
    8c6e:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8c72:	b189      	cbz	r1, 8c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd8>
    8c74:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8c78:	2901      	cmp	r1, #1
    8c7a:	d02f      	beq.n	8cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc1c>
    8c7c:	e06a      	b.n	8d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8c7e:	2100      	movs	r1, #0
    8c80:	200c      	movs	r0, #12
    8c82:	f000 f871 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8c86:	68a0      	ldr	r0, [r4, #8]
    8c88:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8c8c:	f041 0101 	orr.w	r1, r1, #1
    8c90:	7001      	strb	r1, [r0, #0]
    8c92:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8c96:	e063      	b.n	8d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8c98:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c9c:	2924      	cmp	r1, #36	; 0x24
    8c9e:	d01b      	beq.n	8cd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    8ca0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8ca4:	2924      	cmp	r1, #36	; 0x24
    8ca6:	d017      	beq.n	8cd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    8ca8:	f05f 0300 	movs.w	r3, #0
    8cac:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8cb0:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8cb4:	f004 fd05 	bl	d6c2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8cb8:	68a0      	ldr	r0, [r4, #8]
    8cba:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    8cbe:	2100      	movs	r1, #0
    8cc0:	2014      	movs	r0, #20
    8cc2:	f000 f851 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8cc6:	68a1      	ldr	r1, [r4, #8]
    8cc8:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8ccc:	8bc2      	ldrh	r2, [r0, #30]
    8cce:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8cd2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8cd4:	8048      	strh	r0, [r1, #2]
    8cd6:	e043      	b.n	8d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8cd8:	2301      	movs	r3, #1
    8cda:	e7e7      	b.n	8cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbec>
    8cdc:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    8ce0:	bb21      	cbnz	r1, 8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8ce2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ce6:	2301      	movs	r3, #1
    8ce8:	210b      	movs	r1, #11
    8cea:	3070      	adds	r0, #112	; 0x70
    8cec:	f004 f8bb 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cf0:	b9e0      	cbnz	r0, 8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8cf2:	68a0      	ldr	r0, [r4, #8]
    8cf4:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    8cf8:	f005 fa02 	bl	e100 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8cfc:	4605      	mov	r5, r0
    8cfe:	68a0      	ldr	r0, [r4, #8]
    8d00:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8d04:	f005 f9fc 	bl	e100 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8d08:	4606      	mov	r6, r0
    8d0a:	68a0      	ldr	r0, [r4, #8]
    8d0c:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    8d10:	4628      	mov	r0, r5
    8d12:	f005 fa00 	bl	e116 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8d16:	b158      	cbz	r0, 8d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    8d18:	68a0      	ldr	r0, [r4, #8]
    8d1a:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    8d1e:	4630      	mov	r0, r6
    8d20:	f005 f9f9 	bl	e116 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8d24:	b120      	cbz	r0, 8d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    8d26:	2000      	movs	r0, #0
    8d28:	f000 f900 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8d2c:	e012      	b.n	8d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8d2e:	e012      	b.n	8d56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc96>
    8d30:	68a0      	ldr	r0, [r4, #8]
    8d32:	2301      	movs	r3, #1
    8d34:	2103      	movs	r1, #3
    8d36:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8d3a:	3070      	adds	r0, #112	; 0x70
    8d3c:	f004 f893 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d40:	b940      	cbnz	r0, 8d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8d42:	68a0      	ldr	r0, [r4, #8]
    8d44:	2301      	movs	r3, #1
    8d46:	2102      	movs	r1, #2
    8d48:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8d4c:	3070      	adds	r0, #112	; 0x70
    8d4e:	f004 f88a 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d52:	b108      	cbz	r0, 8d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    8d54:	2000      	movs	r0, #0
    8d56:	bd70      	pop	{r4, r5, r6, pc}
    8d58:	2100      	movs	r1, #0
    8d5a:	2016      	movs	r0, #22
    8d5c:	f000 f804 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8d60:	2001      	movs	r0, #1
    8d62:	bd70      	pop	{r4, r5, r6, pc}
    8d64:	20000120 	.word	0x20000120
    8d68:	b570      	push	{r4, r5, r6, lr}
    8d6a:	4c0d      	ldr	r4, [pc, #52]	; (8da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>)
    8d6c:	4606      	mov	r6, r0
    8d6e:	460d      	mov	r5, r1
    8d70:	68a0      	ldr	r0, [r4, #8]
    8d72:	3070      	adds	r0, #112	; 0x70
    8d74:	f005 f9bc 	bl	e0f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8d78:	b120      	cbz	r0, 8d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc4>
    8d7a:	f640 11f4 	movw	r1, #2548	; 0x9f4
    8d7e:	2031      	movs	r0, #49	; 0x31
    8d80:	f7fa ff26 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d84:	68a2      	ldr	r2, [r4, #8]
    8d86:	2000      	movs	r0, #0
    8d88:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    8d8c:	b115      	cbz	r5, 8d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    8d8e:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    8d92:	bd70      	pop	{r4, r5, r6, pc}
    8d94:	f822 0fa2 	strh.w	r0, [r2, #162]!
    8d98:	2001      	movs	r0, #1
    8d9a:	7110      	strb	r0, [r2, #4]
    8d9c:	bd70      	pop	{r4, r5, r6, pc}
    8d9e:	0000      	.short	0x0000
    8da0:	20000120 	.word	0x20000120
    8da4:	b570      	push	{r4, r5, r6, lr}
    8da6:	4c18      	ldr	r4, [pc, #96]	; (8e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    8da8:	2500      	movs	r5, #0
    8daa:	68a0      	ldr	r0, [r4, #8]
    8dac:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    8db0:	2901      	cmp	r1, #1
    8db2:	d00a      	beq.n	8dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0a>
    8db4:	2902      	cmp	r1, #2
    8db6:	d125      	bne.n	8e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    8db8:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    8dbc:	b1a9      	cbz	r1, 8dea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2a>
    8dbe:	2106      	movs	r1, #6
    8dc0:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8dc4:	2101      	movs	r1, #1
    8dc6:	2002      	movs	r0, #2
    8dc8:	e017      	b.n	8dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    8dca:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    8dce:	2900      	cmp	r1, #0
    8dd0:	d118      	bne.n	8e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    8dd2:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    8dd6:	f500 7184 	add.w	r1, r0, #264	; 0x108
    8dda:	2200      	movs	r2, #0
    8ddc:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    8de0:	f003 fff9 	bl	cdd6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8de4:	2101      	movs	r1, #1
    8de6:	2005      	movs	r0, #5
    8de8:	e007      	b.n	8dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    8dea:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8dee:	0740      	lsls	r0, r0, #29
    8df0:	d501      	bpl.n	8df6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    8df2:	2011      	movs	r0, #17
    8df4:	e000      	b.n	8df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    8df6:	200d      	movs	r0, #13
    8df8:	2101      	movs	r1, #1
    8dfa:	f7ff ffb5 	bl	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8dfe:	68a0      	ldr	r0, [r4, #8]
    8e00:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    8e04:	bd70      	pop	{r4, r5, r6, pc}
    8e06:	0000      	.short	0x0000
    8e08:	20000120 	.word	0x20000120
    8e0c:	b570      	push	{r4, r5, r6, lr}
    8e0e:	4a2b      	ldr	r2, [pc, #172]	; (8ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfc>)
    8e10:	4603      	mov	r3, r0
    8e12:	8890      	ldrh	r0, [r2, #4]
    8e14:	4318      	orrs	r0, r3
    8e16:	8090      	strh	r0, [r2, #4]
    8e18:	4610      	mov	r0, r2
    8e1a:	2b40      	cmp	r3, #64	; 0x40
    8e1c:	6880      	ldr	r0, [r0, #8]
    8e1e:	d00d      	beq.n	8e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7c>
    8e20:	079e      	lsls	r6, r3, #30
    8e22:	f04f 0500 	mov.w	r5, #0
    8e26:	f04f 0401 	mov.w	r4, #1
    8e2a:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8e2e:	d50c      	bpl.n	8e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8a>
    8e30:	b14e      	cbz	r6, 8e46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd86>
    8e32:	f44f 614f 	mov.w	r1, #3312	; 0xcf0
    8e36:	2031      	movs	r0, #49	; 0x31
    8e38:	f7fa feca 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e40:	2104      	movs	r1, #4
    8e42:	f7fe b901 	b.w	7048 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8e46:	60d1      	str	r1, [r2, #12]
    8e48:	e01c      	b.n	8e84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    8e4a:	b1c6      	cbz	r6, 8e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8e4c:	6111      	str	r1, [r2, #16]
    8e4e:	78c9      	ldrb	r1, [r1, #3]
    8e50:	2906      	cmp	r1, #6
    8e52:	d002      	beq.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9a>
    8e54:	290b      	cmp	r1, #11
    8e56:	d112      	bne.n	8e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8e58:	e009      	b.n	8e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    8e5a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e5e:	2917      	cmp	r1, #23
    8e60:	d10d      	bne.n	8e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8e62:	2100      	movs	r1, #0
    8e64:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    8e68:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    8e6c:	e007      	b.n	8e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8e6e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e72:	2911      	cmp	r1, #17
    8e74:	d103      	bne.n	8e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8e76:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    8e7a:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    8e7e:	0799      	lsls	r1, r3, #30
    8e80:	d516      	bpl.n	8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    8e82:	68d1      	ldr	r1, [r2, #12]
    8e84:	78c9      	ldrb	r1, [r1, #3]
    8e86:	2905      	cmp	r1, #5
    8e88:	d002      	beq.n	8e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    8e8a:	290b      	cmp	r1, #11
    8e8c:	d110      	bne.n	8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    8e8e:	e009      	b.n	8ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde4>
    8e90:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e94:	2915      	cmp	r1, #21
    8e96:	d10b      	bne.n	8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    8e98:	2100      	movs	r1, #0
    8e9a:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    8e9e:	f800 4c3d 	strb.w	r4, [r0, #-61]
    8ea2:	e005      	b.n	8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    8ea4:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8ea8:	2910      	cmp	r1, #16
    8eaa:	d101      	bne.n	8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    8eac:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    8eb0:	0698      	lsls	r0, r3, #26
    8eb2:	d501      	bpl.n	8eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    8eb4:	2008      	movs	r0, #8
    8eb6:	7050      	strb	r0, [r2, #1]
    8eb8:	bd70      	pop	{r4, r5, r6, pc}
    8eba:	0000      	.short	0x0000
    8ebc:	20000120 	.word	0x20000120
    8ec0:	b570      	push	{r4, r5, r6, lr}
    8ec2:	4c19      	ldr	r4, [pc, #100]	; (8f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>)
    8ec4:	68a0      	ldr	r0, [r4, #8]
    8ec6:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    8eca:	b109      	cbz	r1, 8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    8ecc:	2601      	movs	r6, #1
    8ece:	e000      	b.n	8ed2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    8ed0:	2600      	movs	r6, #0
    8ed2:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    8ed6:	b10a      	cbz	r2, 8edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1c>
    8ed8:	2501      	movs	r5, #1
    8eda:	e000      	b.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    8edc:	2500      	movs	r5, #0
    8ede:	b90e      	cbnz	r6, 8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    8ee0:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    8ee4:	b90d      	cbnz	r5, 8eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2a>
    8ee6:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    8eea:	f100 035e 	add.w	r3, r0, #94	; 0x5e
    8eee:	7219      	strb	r1, [r3, #8]
    8ef0:	725a      	strb	r2, [r3, #9]
    8ef2:	2101      	movs	r1, #1
    8ef4:	7299      	strb	r1, [r3, #10]
    8ef6:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    8efa:	2801      	cmp	r0, #1
    8efc:	d001      	beq.n	8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    8efe:	b906      	cbnz	r6, 8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    8f00:	b115      	cbz	r5, 8f08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    8f02:	2000      	movs	r0, #0
    8f04:	f000 f812 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8f08:	68a0      	ldr	r0, [r4, #8]
    8f0a:	f004 fbf5 	bl	d6f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8f0e:	2800      	cmp	r0, #0
    8f10:	d008      	beq.n	8f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    8f12:	68a1      	ldr	r1, [r4, #8]
    8f14:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8f18:	8808      	ldrh	r0, [r1, #0]
    8f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f1e:	3128      	adds	r1, #40	; 0x28
    8f20:	f004 bbab 	b.w	d67a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8f24:	bd70      	pop	{r4, r5, r6, pc}
    8f26:	0000      	.short	0x0000
    8f28:	20000120 	.word	0x20000120
    8f2c:	b510      	push	{r4, lr}
    8f2e:	4c10      	ldr	r4, [pc, #64]	; (8f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb0>)
    8f30:	68a1      	ldr	r1, [r4, #8]
    8f32:	880a      	ldrh	r2, [r1, #0]
    8f34:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    8f38:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    8f3c:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    8f40:	f005 f8de 	bl	e100 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8f44:	68a1      	ldr	r1, [r4, #8]
    8f46:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    8f4a:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    8f4e:	f005 f8d7 	bl	e100 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8f52:	68a2      	ldr	r2, [r4, #8]
    8f54:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    8f58:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    8f5c:	2001      	movs	r0, #1
    8f5e:	7008      	strb	r0, [r1, #0]
    8f60:	2000      	movs	r0, #0
    8f62:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    8f66:	78a0      	ldrb	r0, [r4, #2]
    8f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f6c:	f7fa bc80 	b.w	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8f70:	20000120 	.word	0x20000120
    8f74:	b510      	push	{r4, lr}
    8f76:	4c15      	ldr	r4, [pc, #84]	; (8fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>)
    8f78:	2301      	movs	r3, #1
    8f7a:	2100      	movs	r1, #0
    8f7c:	68a0      	ldr	r0, [r4, #8]
    8f7e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f82:	3070      	adds	r0, #112	; 0x70
    8f84:	f003 ff6f 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f88:	b190      	cbz	r0, 8fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef0>
    8f8a:	6920      	ldr	r0, [r4, #16]
    8f8c:	f004 f9bf 	bl	d30e <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8f90:	68a1      	ldr	r1, [r4, #8]
    8f92:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8f96:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8f9a:	f005 f8ca 	bl	e132 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8f9e:	b148      	cbz	r0, 8fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    8fa0:	68a0      	ldr	r0, [r4, #8]
    8fa2:	2128      	movs	r1, #40	; 0x28
    8fa4:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    8fa8:	306f      	adds	r0, #111	; 0x6f
    8faa:	2101      	movs	r1, #1
    8fac:	7781      	strb	r1, [r0, #30]
    8fae:	e00b      	b.n	8fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    8fb0:	2001      	movs	r0, #1
    8fb2:	bd10      	pop	{r4, pc}
    8fb4:	68a1      	ldr	r1, [r4, #8]
    8fb6:	6920      	ldr	r0, [r4, #16]
    8fb8:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    8fbc:	f004 f9a2 	bl	d304 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8fc0:	68a1      	ldr	r1, [r4, #8]
    8fc2:	200b      	movs	r0, #11
    8fc4:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8fc8:	2000      	movs	r0, #0
    8fca:	bd10      	pop	{r4, pc}
    8fcc:	20000120 	.word	0x20000120
    8fd0:	b570      	push	{r4, r5, r6, lr}
    8fd2:	4c29      	ldr	r4, [pc, #164]	; (9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb8>)
    8fd4:	2301      	movs	r3, #1
    8fd6:	2100      	movs	r1, #0
    8fd8:	68a0      	ldr	r0, [r4, #8]
    8fda:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8fde:	3070      	adds	r0, #112	; 0x70
    8fe0:	f003 ff41 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fe4:	b1b8      	cbz	r0, 9016 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf56>
    8fe6:	2100      	movs	r1, #0
    8fe8:	6920      	ldr	r0, [r4, #16]
    8fea:	f004 f963 	bl	d2b4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8fee:	b1a0      	cbz	r0, 901a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    8ff0:	6920      	ldr	r0, [r4, #16]
    8ff2:	68a1      	ldr	r1, [r4, #8]
    8ff4:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8ff8:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8ffc:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9000:	f005 f897 	bl	e132 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9004:	b168      	cbz	r0, 9022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf62>
    9006:	68a0      	ldr	r0, [r4, #8]
    9008:	2128      	movs	r1, #40	; 0x28
    900a:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    900e:	306f      	adds	r0, #111	; 0x6f
    9010:	2101      	movs	r1, #1
    9012:	7781      	strb	r1, [r0, #30]
    9014:	e02e      	b.n	9074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb4>
    9016:	2001      	movs	r0, #1
    9018:	bd70      	pop	{r4, r5, r6, pc}
    901a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    901e:	f000 b8af 	b.w	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    9022:	6920      	ldr	r0, [r4, #16]
    9024:	f004 f976 	bl	d314 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9028:	f003 ff00 	bl	ce2c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    902c:	4605      	mov	r5, r0
    902e:	68a0      	ldr	r0, [r4, #8]
    9030:	4629      	mov	r1, r5
    9032:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    9036:	6920      	ldr	r0, [r4, #16]
    9038:	7900      	ldrb	r0, [r0, #4]
    903a:	f004 f894 	bl	d166 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    903e:	68a1      	ldr	r1, [r4, #8]
    9040:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    9044:	6920      	ldr	r0, [r4, #16]
    9046:	4629      	mov	r1, r5
    9048:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    904c:	f004 f887 	bl	d15e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9050:	68a1      	ldr	r1, [r4, #8]
    9052:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    9056:	6920      	ldr	r0, [r4, #16]
    9058:	f004 f95f 	bl	d31a <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    905c:	68a1      	ldr	r1, [r4, #8]
    905e:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    9062:	6920      	ldr	r0, [r4, #16]
    9064:	f004 f95c 	bl	d320 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9068:	68a1      	ldr	r1, [r4, #8]
    906a:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    906e:	200d      	movs	r0, #13
    9070:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9074:	2000      	movs	r0, #0
    9076:	bd70      	pop	{r4, r5, r6, pc}
    9078:	20000120 	.word	0x20000120
    907c:	b538      	push	{r3, r4, r5, lr}
    907e:	4c2a      	ldr	r4, [pc, #168]	; (9128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1068>)
    9080:	2301      	movs	r3, #1
    9082:	2100      	movs	r1, #0
    9084:	68a0      	ldr	r0, [r4, #8]
    9086:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    908a:	3070      	adds	r0, #112	; 0x70
    908c:	f003 feeb 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9090:	b970      	cbnz	r0, 90b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9092:	68a0      	ldr	r0, [r4, #8]
    9094:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9098:	2a12      	cmp	r2, #18
    909a:	d009      	beq.n	90b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    909c:	2301      	movs	r3, #1
    909e:	2105      	movs	r1, #5
    90a0:	3070      	adds	r0, #112	; 0x70
    90a2:	f003 fee0 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90a6:	b108      	cbz	r0, 90ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    90a8:	2008      	movs	r0, #8
    90aa:	bd38      	pop	{r3, r4, r5, pc}
    90ac:	2001      	movs	r0, #1
    90ae:	bd38      	pop	{r3, r4, r5, pc}
    90b0:	68a0      	ldr	r0, [r4, #8]
    90b2:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    90b6:	b908      	cbnz	r0, 90bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xffc>
    90b8:	f7ff f914 	bl	82e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    90bc:	68a1      	ldr	r1, [r4, #8]
    90be:	6920      	ldr	r0, [r4, #16]
    90c0:	f501 7184 	add.w	r1, r1, #264	; 0x108
    90c4:	f004 f93b 	bl	d33e <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    90c8:	68a1      	ldr	r1, [r4, #8]
    90ca:	6920      	ldr	r0, [r4, #16]
    90cc:	31d8      	adds	r1, #216	; 0xd8
    90ce:	f004 f92d 	bl	d32c <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    90d2:	68a1      	ldr	r1, [r4, #8]
    90d4:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    90d8:	f88d 0000 	strb.w	r0, [sp]
    90dc:	9800      	ldr	r0, [sp, #0]
    90de:	9000      	str	r0, [sp, #0]
    90e0:	f89d 0000 	ldrb.w	r0, [sp]
    90e4:	b120      	cbz	r0, 90f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1030>
    90e6:	f240 219d 	movw	r1, #669	; 0x29d
    90ea:	2031      	movs	r0, #49	; 0x31
    90ec:	f7fa fd70 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90f0:	8808      	ldrh	r0, [r1, #0]
    90f2:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    90f6:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    90fa:	6920      	ldr	r0, [r4, #16]
    90fc:	f004 f91a 	bl	d334 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9100:	68a1      	ldr	r1, [r4, #8]
    9102:	6920      	ldr	r0, [r4, #16]
    9104:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9108:	f004 f90d 	bl	d326 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    910c:	68a0      	ldr	r0, [r4, #8]
    910e:	4601      	mov	r1, r0
    9110:	2201      	movs	r2, #1
    9112:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    9116:	2014      	movs	r0, #20
    9118:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    911c:	78a0      	ldrb	r0, [r4, #2]
    911e:	f7fa fba7 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9122:	2000      	movs	r0, #0
    9124:	bd38      	pop	{r3, r4, r5, pc}
    9126:	0000      	.short	0x0000
    9128:	20000120 	.word	0x20000120
    912c:	b51c      	push	{r2, r3, r4, lr}
    912e:	4c13      	ldr	r4, [pc, #76]	; (917c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>)
    9130:	68a0      	ldr	r0, [r4, #8]
    9132:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9136:	07c0      	lsls	r0, r0, #31
    9138:	d001      	beq.n	913e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    913a:	2001      	movs	r0, #1
    913c:	bd1c      	pop	{r2, r3, r4, pc}
    913e:	4669      	mov	r1, sp
    9140:	6920      	ldr	r0, [r4, #16]
    9142:	f004 f902 	bl	d34a <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9146:	f001 fa61 	bl	a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    914a:	f644 112f 	movw	r1, #18735	; 0x492f
    914e:	4008      	ands	r0, r1
    9150:	f89d 2000 	ldrb.w	r2, [sp]
    9154:	68a1      	ldr	r1, [r4, #8]
    9156:	4002      	ands	r2, r0
    9158:	f801 2fb4 	strb.w	r2, [r1, #180]!
    915c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9160:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9164:	7048      	strb	r0, [r1, #1]
    9166:	f7ff f8bd 	bl	82e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    916a:	68a0      	ldr	r0, [r4, #8]
    916c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9170:	f041 0101 	orr.w	r1, r1, #1
    9174:	7001      	strb	r1, [r0, #0]
    9176:	2000      	movs	r0, #0
    9178:	bd1c      	pop	{r2, r3, r4, pc}
    917a:	0000      	.short	0x0000
    917c:	20000120 	.word	0x20000120
    9180:	4a0a      	ldr	r2, [pc, #40]	; (91ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>)
    9182:	b510      	push	{r4, lr}
    9184:	6890      	ldr	r0, [r2, #8]
    9186:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    918a:	070b      	lsls	r3, r1, #28
    918c:	d501      	bpl.n	9192 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d2>
    918e:	2001      	movs	r0, #1
    9190:	bd10      	pop	{r4, pc}
    9192:	f041 0108 	orr.w	r1, r1, #8
    9196:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    919a:	6911      	ldr	r1, [r2, #16]
    919c:	78c9      	ldrb	r1, [r1, #3]
    919e:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    91a2:	f7ff f89f 	bl	82e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    91a6:	2000      	movs	r0, #0
    91a8:	bd10      	pop	{r4, pc}
    91aa:	0000      	.short	0x0000
    91ac:	20000120 	.word	0x20000120
    91b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91b2:	4c2f      	ldr	r4, [pc, #188]	; (9270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11b0>)
    91b4:	68a0      	ldr	r0, [r4, #8]
    91b6:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    91ba:	f010 0f30 	tst.w	r0, #48	; 0x30
    91be:	d001      	beq.n	91c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    91c0:	2001      	movs	r0, #1
    91c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    91c4:	6920      	ldr	r0, [r4, #16]
    91c6:	f004 f8db 	bl	d380 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    91ca:	b350      	cbz	r0, 9222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1162>
    91cc:	6920      	ldr	r0, [r4, #16]
    91ce:	f004 f8c9 	bl	d364 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    91d2:	4607      	mov	r7, r0
    91d4:	6920      	ldr	r0, [r4, #16]
    91d6:	f004 f8c9 	bl	d36c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    91da:	4606      	mov	r6, r0
    91dc:	6920      	ldr	r0, [r4, #16]
    91de:	f004 f8bf 	bl	d360 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    91e2:	4605      	mov	r5, r0
    91e4:	6920      	ldr	r0, [r4, #16]
    91e6:	f004 f8bf 	bl	d368 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    91ea:	4601      	mov	r1, r0
    91ec:	9700      	str	r7, [sp, #0]
    91ee:	68a0      	ldr	r0, [r4, #8]
    91f0:	4633      	mov	r3, r6
    91f2:	462a      	mov	r2, r5
    91f4:	3028      	adds	r0, #40	; 0x28
    91f6:	f004 fb09 	bl	d80c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    91fa:	7920      	ldrb	r0, [r4, #4]
    91fc:	0780      	lsls	r0, r0, #30
    91fe:	d503      	bpl.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>
    9200:	68e0      	ldr	r0, [r4, #12]
    9202:	78c0      	ldrb	r0, [r0, #3]
    9204:	2814      	cmp	r0, #20
    9206:	d010      	beq.n	922a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116a>
    9208:	68a1      	ldr	r1, [r4, #8]
    920a:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    920e:	281c      	cmp	r0, #28
    9210:	d00b      	beq.n	922a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116a>
    9212:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    9216:	2801      	cmp	r0, #1
    9218:	d00f      	beq.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    921a:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    921e:	b960      	cbnz	r0, 923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    9220:	e008      	b.n	9234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    9222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9226:	f7ff bfab 	b.w	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    922a:	68a1      	ldr	r1, [r4, #8]
    922c:	2001      	movs	r0, #1
    922e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    9232:	e002      	b.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    9234:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    9238:	b130      	cbz	r0, 9248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1188>
    923a:	68a0      	ldr	r0, [r4, #8]
    923c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9240:	f041 0110 	orr.w	r1, r1, #16
    9244:	7001      	strb	r1, [r0, #0]
    9246:	e00e      	b.n	9266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a6>
    9248:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    924c:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    9250:	f040 0020 	orr.w	r0, r0, #32
    9254:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    9258:	f831 0b28 	ldrh.w	r0, [r1], #40
    925c:	f004 fadd 	bl	d81a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9260:	78a0      	ldrb	r0, [r4, #2]
    9262:	f7fa fb05 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9266:	f7ff f83d 	bl	82e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    926a:	2000      	movs	r0, #0
    926c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    926e:	0000      	.short	0x0000
    9270:	20000120 	.word	0x20000120
    9274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9276:	4c1a      	ldr	r4, [pc, #104]	; (92e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>)
    9278:	2301      	movs	r3, #1
    927a:	210a      	movs	r1, #10
    927c:	68a0      	ldr	r0, [r4, #8]
    927e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9282:	3070      	adds	r0, #112	; 0x70
    9284:	f003 fdef 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9288:	b338      	cbz	r0, 92da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x121a>
    928a:	6920      	ldr	r0, [r4, #16]
    928c:	f004 f878 	bl	d380 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9290:	b1c8      	cbz	r0, 92c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1206>
    9292:	6920      	ldr	r0, [r4, #16]
    9294:	f004 f866 	bl	d364 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9298:	4607      	mov	r7, r0
    929a:	6920      	ldr	r0, [r4, #16]
    929c:	f004 f866 	bl	d36c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    92a0:	4606      	mov	r6, r0
    92a2:	6920      	ldr	r0, [r4, #16]
    92a4:	f004 f85c 	bl	d360 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    92a8:	4605      	mov	r5, r0
    92aa:	6920      	ldr	r0, [r4, #16]
    92ac:	f004 f85c 	bl	d368 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    92b0:	4601      	mov	r1, r0
    92b2:	9700      	str	r7, [sp, #0]
    92b4:	68a0      	ldr	r0, [r4, #8]
    92b6:	4633      	mov	r3, r6
    92b8:	462a      	mov	r2, r5
    92ba:	3028      	adds	r0, #40	; 0x28
    92bc:	f004 faa6 	bl	d80c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    92c0:	68a0      	ldr	r0, [r4, #8]
    92c2:	f004 fa19 	bl	d6f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    92c6:	68a1      	ldr	r1, [r4, #8]
    92c8:	2000      	movs	r0, #0
    92ca:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    92ce:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    92d2:	f7ff f9b1 	bl	8638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    92d6:	2000      	movs	r0, #0
    92d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92da:	2001      	movs	r0, #1
    92dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92de:	0000      	.short	0x0000
    92e0:	20000120 	.word	0x20000120
    92e4:	b510      	push	{r4, lr}
    92e6:	4c09      	ldr	r4, [pc, #36]	; (930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124c>)
    92e8:	68a0      	ldr	r0, [r4, #8]
    92ea:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    92ee:	0740      	lsls	r0, r0, #29
    92f0:	d501      	bpl.n	92f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1236>
    92f2:	2001      	movs	r0, #1
    92f4:	bd10      	pop	{r4, pc}
    92f6:	f7fe fff5 	bl	82e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    92fa:	68a0      	ldr	r0, [r4, #8]
    92fc:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9300:	f041 0104 	orr.w	r1, r1, #4
    9304:	7001      	strb	r1, [r0, #0]
    9306:	2000      	movs	r0, #0
    9308:	bd10      	pop	{r4, pc}
    930a:	0000      	.short	0x0000
    930c:	20000120 	.word	0x20000120
    9310:	b510      	push	{r4, lr}
    9312:	4c09      	ldr	r4, [pc, #36]	; (9338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1278>)
    9314:	2301      	movs	r3, #1
    9316:	2109      	movs	r1, #9
    9318:	68a0      	ldr	r0, [r4, #8]
    931a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    931e:	3070      	adds	r0, #112	; 0x70
    9320:	f003 fda1 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9324:	2800      	cmp	r0, #0
    9326:	d006      	beq.n	9336 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    9328:	68a1      	ldr	r1, [r4, #8]
    932a:	2000      	movs	r0, #0
    932c:	f801 0f9a 	strb.w	r0, [r1, #154]!
    9330:	7308      	strb	r0, [r1, #12]
    9332:	f801 0c1d 	strb.w	r0, [r1, #-29]
    9336:	bd10      	pop	{r4, pc}
    9338:	20000120 	.word	0x20000120
    933c:	b510      	push	{r4, lr}
    933e:	4c0f      	ldr	r4, [pc, #60]	; (937c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12bc>)
    9340:	2301      	movs	r3, #1
    9342:	2100      	movs	r1, #0
    9344:	68a0      	ldr	r0, [r4, #8]
    9346:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    934a:	3070      	adds	r0, #112	; 0x70
    934c:	f003 fd8b 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9350:	b138      	cbz	r0, 9362 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a2>
    9352:	f7fe ffc7 	bl	82e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9356:	68a1      	ldr	r1, [r4, #8]
    9358:	2010      	movs	r0, #16
    935a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    935e:	2000      	movs	r0, #0
    9360:	bd10      	pop	{r4, pc}
    9362:	68a0      	ldr	r0, [r4, #8]
    9364:	2301      	movs	r3, #1
    9366:	2105      	movs	r1, #5
    9368:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    936c:	3070      	adds	r0, #112	; 0x70
    936e:	f003 fd7a 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9372:	b108      	cbz	r0, 9378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b8>
    9374:	2008      	movs	r0, #8
    9376:	bd10      	pop	{r4, pc}
    9378:	2001      	movs	r0, #1
    937a:	bd10      	pop	{r4, pc}
    937c:	20000120 	.word	0x20000120
    9380:	4806      	ldr	r0, [pc, #24]	; (939c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12dc>)
    9382:	6880      	ldr	r0, [r0, #8]
    9384:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9388:	2911      	cmp	r1, #17
    938a:	d001      	beq.n	9390 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    938c:	2002      	movs	r0, #2
    938e:	4770      	bx	lr
    9390:	2112      	movs	r1, #18
    9392:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9396:	2000      	movs	r0, #0
    9398:	4770      	bx	lr
    939a:	0000      	.short	0x0000
    939c:	20000120 	.word	0x20000120
    93a0:	b570      	push	{r4, r5, r6, lr}
    93a2:	4c31      	ldr	r4, [pc, #196]	; (9468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a8>)
    93a4:	2301      	movs	r3, #1
    93a6:	210b      	movs	r1, #11
    93a8:	68a0      	ldr	r0, [r4, #8]
    93aa:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    93ae:	3070      	adds	r0, #112	; 0x70
    93b0:	f003 fd59 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93b4:	bb48      	cbnz	r0, 940a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134a>
    93b6:	68a0      	ldr	r0, [r4, #8]
    93b8:	2301      	movs	r3, #1
    93ba:	2100      	movs	r1, #0
    93bc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    93c0:	3070      	adds	r0, #112	; 0x70
    93c2:	f003 fd50 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93c6:	b1f0      	cbz	r0, 9406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    93c8:	68a0      	ldr	r0, [r4, #8]
    93ca:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    93ce:	2824      	cmp	r0, #36	; 0x24
    93d0:	d01b      	beq.n	940a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134a>
    93d2:	6920      	ldr	r0, [r4, #16]
    93d4:	f003 fff0 	bl	d3b8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    93d8:	b1c8      	cbz	r0, 940e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    93da:	68a0      	ldr	r0, [r4, #8]
    93dc:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    93e0:	f041 0104 	orr.w	r1, r1, #4
    93e4:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    93e8:	6921      	ldr	r1, [r4, #16]
    93ea:	794a      	ldrb	r2, [r1, #5]
    93ec:	f002 0207 	and.w	r2, r2, #7
    93f0:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    93f4:	7909      	ldrb	r1, [r1, #4]
    93f6:	f001 0107 	and.w	r1, r1, #7
    93fa:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    93fe:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    9402:	bb43      	cbnz	r3, 9456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    9404:	e007      	b.n	9416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1356>
    9406:	2001      	movs	r0, #1
    9408:	bd70      	pop	{r4, r5, r6, pc}
    940a:	2020      	movs	r0, #32
    940c:	bd70      	pop	{r4, r5, r6, pc}
    940e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9412:	f7ff beb5 	b.w	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    9416:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    941a:	2b01      	cmp	r3, #1
    941c:	d01b      	beq.n	9456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    941e:	f100 0366 	add.w	r3, r0, #102	; 0x66
    9422:	2501      	movs	r5, #1
    9424:	785e      	ldrb	r6, [r3, #1]
    9426:	428e      	cmp	r6, r1
    9428:	d106      	bne.n	9438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1378>
    942a:	7819      	ldrb	r1, [r3, #0]
    942c:	4291      	cmp	r1, r2
    942e:	d103      	bne.n	9438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1378>
    9430:	2102      	movs	r1, #2
    9432:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    9436:	e00e      	b.n	9456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    9438:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    943c:	8802      	ldrh	r2, [r0, #0]
    943e:	f821 2902 	strh.w	r2, [r1], #-2
    9442:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    9446:	710a      	strb	r2, [r1, #4]
    9448:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    944c:	7148      	strb	r0, [r1, #5]
    944e:	700d      	strb	r5, [r1, #0]
    9450:	78a0      	ldrb	r0, [r4, #2]
    9452:	f7fa fa0d 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9456:	68a1      	ldr	r1, [r4, #8]
    9458:	2021      	movs	r0, #33	; 0x21
    945a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    945e:	f7fe ff41 	bl	82e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9462:	2000      	movs	r0, #0
    9464:	bd70      	pop	{r4, r5, r6, pc}
    9466:	0000      	.short	0x0000
    9468:	20000120 	.word	0x20000120
    946c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9470:	4c4e      	ldr	r4, [pc, #312]	; (95ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ec>)
    9472:	68a0      	ldr	r0, [r4, #8]
    9474:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9478:	2920      	cmp	r1, #32
    947a:	d009      	beq.n	9490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d0>
    947c:	f05f 0700 	movs.w	r7, #0
    9480:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9484:	2922      	cmp	r1, #34	; 0x22
    9486:	d005      	beq.n	9494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d4>
    9488:	b387      	cbz	r7, 94ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    948a:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    948e:	e003      	b.n	9498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d8>
    9490:	2701      	movs	r7, #1
    9492:	e7f5      	b.n	9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c0>
    9494:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    9498:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    949c:	f041 0104 	orr.w	r1, r1, #4
    94a0:	7001      	strb	r1, [r0, #0]
    94a2:	6920      	ldr	r0, [r4, #16]
    94a4:	f7fc fb6c 	bl	5b80 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    94a8:	f04f 0801 	mov.w	r8, #1
    94ac:	2600      	movs	r6, #0
    94ae:	b308      	cbz	r0, 94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    94b0:	4639      	mov	r1, r7
    94b2:	6920      	ldr	r0, [r4, #16]
    94b4:	f7fe ffce 	bl	8454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    94b8:	b1e0      	cbz	r0, 94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    94ba:	466a      	mov	r2, sp
    94bc:	6921      	ldr	r1, [r4, #16]
    94be:	68a0      	ldr	r0, [r4, #8]
    94c0:	f003 fe07 	bl	d0d2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    94c4:	b388      	cbz	r0, 952a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146a>
    94c6:	6920      	ldr	r0, [r4, #16]
    94c8:	f003 ff52 	bl	d370 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    94cc:	68a1      	ldr	r1, [r4, #8]
    94ce:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    94d2:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    94d6:	f004 fe2c 	bl	e132 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    94da:	b338      	cbz	r0, 952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146c>
    94dc:	68a0      	ldr	r0, [r4, #8]
    94de:	2128      	movs	r1, #40	; 0x28
    94e0:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    94e4:	306f      	adds	r0, #111	; 0x6f
    94e6:	f880 801e 	strb.w	r8, [r0, #30]
    94ea:	e053      	b.n	9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    94ec:	e7ff      	b.n	94ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142e>
    94ee:	2002      	movs	r0, #2
    94f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    94f4:	68a0      	ldr	r0, [r4, #8]
    94f6:	f04f 0900 	mov.w	r9, #0
    94fa:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    94fe:	2901      	cmp	r1, #1
    9500:	d015      	beq.n	952e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146e>
    9502:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9506:	b1f7      	cbz	r7, 9546 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1486>
    9508:	6920      	ldr	r0, [r4, #16]
    950a:	68a1      	ldr	r1, [r4, #8]
    950c:	78c0      	ldrb	r0, [r0, #3]
    950e:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    9512:	fa08 f200 	lsl.w	r2, r8, r0
    9516:	f3c2 6000 	ubfx	r0, r2, #24, #1
    951a:	b160      	cbz	r0, 9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1476>
    951c:	200a      	movs	r0, #10
    951e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9522:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    9526:	b9a0      	cbnz	r0, 9552 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    9528:	e008      	b.n	953c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x147c>
    952a:	e014      	b.n	9556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1496>
    952c:	e027      	b.n	957e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14be>
    952e:	201e      	movs	r0, #30
    9530:	f7ff fcfc 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9534:	e7e7      	b.n	9506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    9536:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    953a:	e001      	b.n	9540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    953c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    9540:	2031      	movs	r0, #49	; 0x31
    9542:	f7fa fb45 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9546:	702e      	strb	r6, [r5, #0]
    9548:	f7fe fed8 	bl	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    954c:	f7ff fe18 	bl	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    9550:	4681      	mov	r9, r0
    9552:	4648      	mov	r0, r9
    9554:	e7cc      	b.n	94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1430>
    9556:	68a0      	ldr	r0, [r4, #8]
    9558:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    955c:	2901      	cmp	r1, #1
    955e:	d009      	beq.n	9574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    9560:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9564:	68a0      	ldr	r0, [r4, #8]
    9566:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    956a:	428d      	cmp	r5, r1
    956c:	d112      	bne.n	9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    956e:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    9572:	e00f      	b.n	9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    9574:	2000      	movs	r0, #0
    9576:	f7ff fcd9 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    957a:	702e      	strb	r6, [r5, #0]
    957c:	e7f2      	b.n	9564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    957e:	68a0      	ldr	r0, [r4, #8]
    9580:	f89d 1000 	ldrb.w	r1, [sp]
    9584:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9588:	f89d 1001 	ldrb.w	r1, [sp, #1]
    958c:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    9590:	2024      	movs	r0, #36	; 0x24
    9592:	7028      	strb	r0, [r5, #0]
    9594:	68a0      	ldr	r0, [r4, #8]
    9596:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    959a:	428d      	cmp	r5, r1
    959c:	d102      	bne.n	95a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e4>
    959e:	f7fe fead 	bl	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    95a2:	e001      	b.n	95a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>
    95a4:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    95a8:	2000      	movs	r0, #0
    95aa:	e7a1      	b.n	94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1430>
    95ac:	20000120 	.word	0x20000120
    95b0:	b510      	push	{r4, lr}
    95b2:	4c0a      	ldr	r4, [pc, #40]	; (95dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151c>)
    95b4:	68a0      	ldr	r0, [r4, #8]
    95b6:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    95ba:	f041 0104 	orr.w	r1, r1, #4
    95be:	7001      	strb	r1, [r0, #0]
    95c0:	6920      	ldr	r0, [r4, #16]
    95c2:	f003 ff03 	bl	d3cc <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    95c6:	2816      	cmp	r0, #22
    95c8:	d001      	beq.n	95ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150e>
    95ca:	2000      	movs	r0, #0
    95cc:	bd10      	pop	{r4, pc}
    95ce:	6920      	ldr	r0, [r4, #16]
    95d0:	f003 fefe 	bl	d3d0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    95d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95d8:	f7fe be62 	b.w	82a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>
    95dc:	20000120 	.word	0x20000120
    95e0:	4802      	ldr	r0, [pc, #8]	; (95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x152c>)
    95e2:	6900      	ldr	r0, [r0, #16]
    95e4:	7900      	ldrb	r0, [r0, #4]
    95e6:	f7fe be5b 	b.w	82a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>
    95ea:	0000      	.short	0x0000
    95ec:	20000120 	.word	0x20000120
    95f0:	b510      	push	{r4, lr}
    95f2:	4c08      	ldr	r4, [pc, #32]	; (9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>)
    95f4:	68a0      	ldr	r0, [r4, #8]
    95f6:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    95fa:	2817      	cmp	r0, #23
    95fc:	d001      	beq.n	9602 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    95fe:	2002      	movs	r0, #2
    9600:	bd10      	pop	{r4, pc}
    9602:	f7fe fe7b 	bl	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9606:	68a1      	ldr	r1, [r4, #8]
    9608:	201b      	movs	r0, #27
    960a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    960e:	2000      	movs	r0, #0
    9610:	bd10      	pop	{r4, pc}
    9612:	0000      	.short	0x0000
    9614:	20000120 	.word	0x20000120
    9618:	b510      	push	{r4, lr}
    961a:	4c0b      	ldr	r4, [pc, #44]	; (9648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1588>)
    961c:	2301      	movs	r3, #1
    961e:	4619      	mov	r1, r3
    9620:	68a0      	ldr	r0, [r4, #8]
    9622:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9626:	3070      	adds	r0, #112	; 0x70
    9628:	f003 fc1d 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    962c:	b108      	cbz	r0, 9632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    962e:	2000      	movs	r0, #0
    9630:	bd10      	pop	{r4, pc}
    9632:	6920      	ldr	r0, [r4, #16]
    9634:	f003 fea0 	bl	d378 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9638:	68a1      	ldr	r1, [r4, #8]
    963a:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    963e:	2007      	movs	r0, #7
    9640:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9644:	e7f3      	b.n	962e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    9646:	0000      	.short	0x0000
    9648:	20000120 	.word	0x20000120
    964c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9650:	4c37      	ldr	r4, [pc, #220]	; (9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>)
    9652:	2600      	movs	r6, #0
    9654:	4620      	mov	r0, r4
    9656:	68a1      	ldr	r1, [r4, #8]
    9658:	6900      	ldr	r0, [r0, #16]
    965a:	2701      	movs	r7, #1
    965c:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    9660:	7900      	ldrb	r0, [r0, #4]
    9662:	2b0e      	cmp	r3, #14
    9664:	d101      	bne.n	966a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15aa>
    9666:	2812      	cmp	r0, #18
    9668:	d006      	beq.n	9678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    966a:	4a31      	ldr	r2, [pc, #196]	; (9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>)
    966c:	2500      	movs	r5, #0
    966e:	6892      	ldr	r2, [r2, #8]
    9670:	32b4      	adds	r2, #180	; 0xb4
    9672:	2b1c      	cmp	r3, #28
    9674:	d004      	beq.n	9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9676:	e005      	b.n	9684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    9678:	f7ff fe4a 	bl	9310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1250>
    967c:	4606      	mov	r6, r0
    967e:	e054      	b.n	972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9680:	2814      	cmp	r0, #20
    9682:	d002      	beq.n	968a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ca>
    9684:	2b04      	cmp	r3, #4
    9686:	d00b      	beq.n	96a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    9688:	e00c      	b.n	96a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e4>
    968a:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    968e:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    9692:	2105      	movs	r1, #5
    9694:	4610      	mov	r0, r2
    9696:	f004 fd0c 	bl	e0b2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    969a:	f7fe ffcd 	bl	8638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    969e:	e044      	b.n	972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    96a0:	280e      	cmp	r0, #14
    96a2:	d002      	beq.n	96aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    96a4:	2b20      	cmp	r3, #32
    96a6:	d010      	beq.n	96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160a>
    96a8:	e011      	b.n	96ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160e>
    96aa:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    96ae:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    96b2:	8808      	ldrh	r0, [r1, #0]
    96b4:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    96b8:	201a      	movs	r0, #26
    96ba:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    96be:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    96c2:	78a0      	ldrb	r0, [r4, #2]
    96c4:	f7fa f8d4 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    96c8:	e02f      	b.n	972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    96ca:	2816      	cmp	r0, #22
    96cc:	d006      	beq.n	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    96ce:	2b26      	cmp	r3, #38	; 0x26
    96d0:	d101      	bne.n	96d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1616>
    96d2:	2816      	cmp	r0, #22
    96d4:	d002      	beq.n	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    96d6:	2817      	cmp	r0, #23
    96d8:	d014      	beq.n	9704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    96da:	e026      	b.n	972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    96dc:	f801 5f7d 	strb.w	r5, [r1, #125]!
    96e0:	f881 5029 	strb.w	r5, [r1, #41]	; 0x29
    96e4:	7848      	ldrb	r0, [r1, #1]
    96e6:	2821      	cmp	r0, #33	; 0x21
    96e8:	d01f      	beq.n	972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    96ea:	2108      	movs	r1, #8
    96ec:	4610      	mov	r0, r2
    96ee:	f004 fce0 	bl	e0b2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    96f2:	68a0      	ldr	r0, [r4, #8]
    96f4:	210b      	movs	r1, #11
    96f6:	30b4      	adds	r0, #180	; 0xb4
    96f8:	f004 fcdb 	bl	e0b2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    96fc:	201a      	movs	r0, #26
    96fe:	f7ff fc15 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9702:	e012      	b.n	972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9704:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    9708:	2822      	cmp	r0, #34	; 0x22
    970a:	d10e      	bne.n	972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    970c:	f881 507e 	strb.w	r5, [r1, #126]	; 0x7e
    9710:	f7fe fdf4 	bl	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9714:	68a0      	ldr	r0, [r4, #8]
    9716:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    971a:	2801      	cmp	r0, #1
    971c:	d102      	bne.n	9724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>
    971e:	2000      	movs	r0, #0
    9720:	f7ff fc04 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9724:	68a0      	ldr	r0, [r4, #8]
    9726:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    972a:	4630      	mov	r0, r6
    972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9730:	20000120 	.word	0x20000120
    9734:	b570      	push	{r4, r5, r6, lr}
    9736:	4c2d      	ldr	r4, [pc, #180]	; (97ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x172c>)
    9738:	68a0      	ldr	r0, [r4, #8]
    973a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    973e:	0789      	lsls	r1, r1, #30
    9740:	d507      	bpl.n	9752 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1692>
    9742:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9746:	2301      	movs	r3, #1
    9748:	2108      	movs	r1, #8
    974a:	3070      	adds	r0, #112	; 0x70
    974c:	f003 fb8b 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9750:	b1e8      	cbz	r0, 978e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ce>
    9752:	68a0      	ldr	r0, [r4, #8]
    9754:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    9758:	0780      	lsls	r0, r0, #30
    975a:	d412      	bmi.n	9782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    975c:	6920      	ldr	r0, [r4, #16]
    975e:	f003 fe0d 	bl	d37c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    9762:	68a1      	ldr	r1, [r4, #8]
    9764:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    9768:	6920      	ldr	r0, [r4, #16]
    976a:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    976e:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    9772:	8840      	ldrh	r0, [r0, #2]
    9774:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    9778:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    977c:	f040 0002 	orr.w	r0, r0, #2
    9780:	7008      	strb	r0, [r1, #0]
    9782:	68a0      	ldr	r0, [r4, #8]
    9784:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9788:	07c9      	lsls	r1, r1, #31
    978a:	d002      	beq.n	9792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    978c:	e010      	b.n	97b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    978e:	2001      	movs	r0, #1
    9790:	bd70      	pop	{r4, r5, r6, pc}
    9792:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9796:	078a      	lsls	r2, r1, #30
    9798:	d504      	bpl.n	97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    979a:	f240 21d9 	movw	r1, #729	; 0x2d9
    979e:	2031      	movs	r0, #49	; 0x31
    97a0:	f7fa fa16 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97a4:	f041 0102 	orr.w	r1, r1, #2
    97a8:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    97ac:	f7fe fd9a 	bl	82e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    97b0:	68a0      	ldr	r0, [r4, #8]
    97b2:	2500      	movs	r5, #0
    97b4:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    97b8:	2906      	cmp	r1, #6
    97ba:	d106      	bne.n	97ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    97bc:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    97c0:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    97c4:	78a0      	ldrb	r0, [r4, #2]
    97c6:	f7fa f853 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    97ca:	68a0      	ldr	r0, [r4, #8]
    97cc:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    97d0:	b151      	cbz	r1, 97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    97d2:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    97d6:	78a0      	ldrb	r0, [r4, #2]
    97d8:	f7fa f84a 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    97dc:	68a0      	ldr	r0, [r4, #8]
    97de:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    97e2:	b909      	cbnz	r1, 97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    97e4:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    97e8:	2000      	movs	r0, #0
    97ea:	bd70      	pop	{r4, r5, r6, pc}
    97ec:	20000120 	.word	0x20000120
    97f0:	b510      	push	{r4, lr}
    97f2:	4c17      	ldr	r4, [pc, #92]	; (9850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1790>)
    97f4:	68a3      	ldr	r3, [r4, #8]
    97f6:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    97fa:	2808      	cmp	r0, #8
    97fc:	d20e      	bcs.n	981c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    97fe:	f100 0208 	add.w	r2, r0, #8
    9802:	f1c0 0008 	rsb	r0, r0, #8
    9806:	b2c1      	uxtb	r1, r0
    9808:	1898      	adds	r0, r3, r2
    980a:	f500 7084 	add.w	r0, r0, #264	; 0x108
    980e:	f7fa fa6f 	bl	3cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9812:	68a1      	ldr	r1, [r4, #8]
    9814:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    9818:	4410      	add	r0, r2
    981a:	7008      	strb	r0, [r1, #0]
    981c:	68a3      	ldr	r3, [r4, #8]
    981e:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    9822:	3808      	subs	r0, #8
    9824:	2804      	cmp	r0, #4
    9826:	d211      	bcs.n	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x178c>
    9828:	1d02      	adds	r2, r0, #4
    982a:	f1c0 0004 	rsb	r0, r0, #4
    982e:	b2c1      	uxtb	r1, r0
    9830:	1898      	adds	r0, r3, r2
    9832:	30d8      	adds	r0, #216	; 0xd8
    9834:	f7fa fa5c 	bl	3cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9838:	68a0      	ldr	r0, [r4, #8]
    983a:	2100      	movs	r1, #0
    983c:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    9840:	2101      	movs	r1, #1
    9842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9846:	2004      	movs	r0, #4
    9848:	f7ff ba8e 	b.w	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    984c:	bd10      	pop	{r4, pc}
    984e:	0000      	.short	0x0000
    9850:	20000120 	.word	0x20000120
    9854:	4804      	ldr	r0, [pc, #16]	; (9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a8>)
    9856:	2127      	movs	r1, #39	; 0x27
    9858:	6880      	ldr	r0, [r0, #8]
    985a:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    985e:	2100      	movs	r1, #0
    9860:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    9864:	4770      	bx	lr
    9866:	0000      	.short	0x0000
    9868:	20000120 	.word	0x20000120
    986c:	4809      	ldr	r0, [pc, #36]	; (9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>)
    986e:	b510      	push	{r4, lr}
    9870:	6880      	ldr	r0, [r0, #8]
    9872:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9876:	2914      	cmp	r1, #20
    9878:	d004      	beq.n	9884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>
    987a:	f240 6189 	movw	r1, #1673	; 0x689
    987e:	2031      	movs	r0, #49	; 0x31
    9880:	f7fa f9a6 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9884:	2101      	movs	r1, #1
    9886:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    988a:	2115      	movs	r1, #21
    988c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9890:	bd10      	pop	{r4, pc}
    9892:	0000      	.short	0x0000
    9894:	20000120 	.word	0x20000120
    9898:	b510      	push	{r4, lr}
    989a:	4c0a      	ldr	r4, [pc, #40]	; (98c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    989c:	68a0      	ldr	r0, [r4, #8]
    989e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    98a2:	07c0      	lsls	r0, r0, #31
    98a4:	d008      	beq.n	98b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f8>
    98a6:	f7fe fd29 	bl	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    98aa:	68a0      	ldr	r0, [r4, #8]
    98ac:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    98b0:	f021 0101 	bic.w	r1, r1, #1
    98b4:	7001      	strb	r1, [r0, #0]
    98b6:	bd10      	pop	{r4, pc}
    98b8:	f240 6172 	movw	r1, #1650	; 0x672
    98bc:	2031      	movs	r0, #49	; 0x31
    98be:	f7fa f987 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98c2:	0000      	.short	0x0000
    98c4:	20000120 	.word	0x20000120
    98c8:	b510      	push	{r4, lr}
    98ca:	4c0a      	ldr	r4, [pc, #40]	; (98f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>)
    98cc:	2301      	movs	r3, #1
    98ce:	2100      	movs	r1, #0
    98d0:	68a0      	ldr	r0, [r4, #8]
    98d2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    98d6:	3070      	adds	r0, #112	; 0x70
    98d8:	f003 fac5 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98dc:	b120      	cbz	r0, 98e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>
    98de:	68a1      	ldr	r1, [r4, #8]
    98e0:	201c      	movs	r0, #28
    98e2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    98e6:	bd10      	pop	{r4, pc}
    98e8:	f240 61f7 	movw	r1, #1783	; 0x6f7
    98ec:	2031      	movs	r0, #49	; 0x31
    98ee:	f7fa f96f 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98f2:	0000      	.short	0x0000
    98f4:	20000120 	.word	0x20000120
    98f8:	480a      	ldr	r0, [pc, #40]	; (9924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1864>)
    98fa:	b510      	push	{r4, lr}
    98fc:	6880      	ldr	r0, [r0, #8]
    98fe:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9902:	f3c1 1201 	ubfx	r2, r1, #4, #2
    9906:	2a01      	cmp	r2, #1
    9908:	d004      	beq.n	9914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    990a:	f240 61fe 	movw	r1, #1790	; 0x6fe
    990e:	2031      	movs	r0, #49	; 0x31
    9910:	f7fa f95e 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9914:	f021 0110 	bic.w	r1, r1, #16
    9918:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    991c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9920:	f7fe bcec 	b.w	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9924:	20000120 	.word	0x20000120
    9928:	b510      	push	{r4, lr}
    992a:	4c0a      	ldr	r4, [pc, #40]	; (9954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>)
    992c:	2301      	movs	r3, #1
    992e:	2100      	movs	r1, #0
    9930:	68a0      	ldr	r0, [r4, #8]
    9932:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9936:	3070      	adds	r0, #112	; 0x70
    9938:	f003 fa95 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    993c:	b120      	cbz	r0, 9948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>
    993e:	68a1      	ldr	r1, [r4, #8]
    9940:	200e      	movs	r0, #14
    9942:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9946:	bd10      	pop	{r4, pc}
    9948:	f240 61ea 	movw	r1, #1770	; 0x6ea
    994c:	2031      	movs	r0, #49	; 0x31
    994e:	f7fa f93f 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9952:	0000      	.short	0x0000
    9954:	20000120 	.word	0x20000120
    9958:	4804      	ldr	r0, [pc, #16]	; (996c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>)
    995a:	6880      	ldr	r0, [r0, #8]
    995c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9960:	f021 0104 	bic.w	r1, r1, #4
    9964:	7001      	strb	r1, [r0, #0]
    9966:	f7fe bcc9 	b.w	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    996a:	0000      	.short	0x0000
    996c:	20000120 	.word	0x20000120
    9970:	4809      	ldr	r0, [pc, #36]	; (9998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d8>)
    9972:	b510      	push	{r4, lr}
    9974:	6880      	ldr	r0, [r0, #8]
    9976:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    997a:	2910      	cmp	r1, #16
    997c:	d004      	beq.n	9988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    997e:	f240 6181 	movw	r1, #1665	; 0x681
    9982:	2031      	movs	r0, #49	; 0x31
    9984:	f7fa f924 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9988:	2101      	movs	r1, #1
    998a:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    998e:	2111      	movs	r1, #17
    9990:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9994:	bd10      	pop	{r4, pc}
    9996:	0000      	.short	0x0000
    9998:	20000120 	.word	0x20000120
    999c:	b510      	push	{r4, lr}
    999e:	4c0a      	ldr	r4, [pc, #40]	; (99c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1908>)
    99a0:	2301      	movs	r3, #1
    99a2:	2100      	movs	r1, #0
    99a4:	68a0      	ldr	r0, [r4, #8]
    99a6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    99aa:	3070      	adds	r0, #112	; 0x70
    99ac:	f003 fa5b 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99b0:	b120      	cbz	r0, 99bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>
    99b2:	68a1      	ldr	r1, [r4, #8]
    99b4:	201f      	movs	r0, #31
    99b6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    99ba:	bd10      	pop	{r4, pc}
    99bc:	f240 710a 	movw	r1, #1802	; 0x70a
    99c0:	2031      	movs	r0, #49	; 0x31
    99c2:	f7fa f905 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99c6:	0000      	.short	0x0000
    99c8:	20000120 	.word	0x20000120
    99cc:	4808      	ldr	r0, [pc, #32]	; (99f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1930>)
    99ce:	b510      	push	{r4, lr}
    99d0:	6880      	ldr	r0, [r0, #8]
    99d2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    99d6:	2921      	cmp	r1, #33	; 0x21
    99d8:	d005      	beq.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1926>
    99da:	b121      	cbz	r1, 99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1926>
    99dc:	f240 7111 	movw	r1, #1809	; 0x711
    99e0:	2031      	movs	r0, #49	; 0x31
    99e2:	f7fa f8f5 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99e6:	2122      	movs	r1, #34	; 0x22
    99e8:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    99ec:	bd10      	pop	{r4, pc}
    99ee:	0000      	.short	0x0000
    99f0:	20000120 	.word	0x20000120
    99f4:	4807      	ldr	r0, [pc, #28]	; (9a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1954>)
    99f6:	b510      	push	{r4, lr}
    99f8:	6880      	ldr	r0, [r0, #8]
    99fa:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    99fe:	2915      	cmp	r1, #21
    9a00:	d004      	beq.n	9a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    9a02:	f240 6196 	movw	r1, #1686	; 0x696
    9a06:	2031      	movs	r0, #49	; 0x31
    9a08:	f7fa f8e2 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a0c:	2119      	movs	r1, #25
    9a0e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9a12:	bd10      	pop	{r4, pc}
    9a14:	20000120 	.word	0x20000120
    9a18:	4807      	ldr	r0, [pc, #28]	; (9a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>)
    9a1a:	b510      	push	{r4, lr}
    9a1c:	6880      	ldr	r0, [r0, #8]
    9a1e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a22:	2915      	cmp	r1, #21
    9a24:	d004      	beq.n	9a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1970>
    9a26:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    9a2a:	2031      	movs	r0, #49	; 0x31
    9a2c:	f7fa f8d0 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a30:	2117      	movs	r1, #23
    9a32:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9a36:	bd10      	pop	{r4, pc}
    9a38:	20000120 	.word	0x20000120
    9a3c:	b570      	push	{r4, r5, r6, lr}
    9a3e:	4d1b      	ldr	r5, [pc, #108]	; (9aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>)
    9a40:	68a8      	ldr	r0, [r5, #8]
    9a42:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a46:	291b      	cmp	r1, #27
    9a48:	d002      	beq.n	9a50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1990>
    9a4a:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    9a4e:	e007      	b.n	9a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a0>
    9a50:	2400      	movs	r4, #0
    9a52:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    9a56:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    9a5a:	b121      	cbz	r1, 9a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9a5c:	f240 61b4 	movw	r1, #1716	; 0x6b4
    9a60:	2031      	movs	r0, #49	; 0x31
    9a62:	f7fa f8b5 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a66:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    9a6a:	b141      	cbz	r1, 9a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19be>
    9a6c:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    9a70:	8801      	ldrh	r1, [r0, #0]
    9a72:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    9a76:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9a7a:	210c      	movs	r1, #12
    9a7c:	e008      	b.n	9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>
    9a7e:	8801      	ldrh	r1, [r0, #0]
    9a80:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    9a84:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9a88:	2101      	movs	r1, #1
    9a8a:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    9a8e:	210b      	movs	r1, #11
    9a90:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    9a94:	8800      	ldrh	r0, [r0, #0]
    9a96:	f7fa fcab 	bl	43f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9a9a:	f002 ff58 	bl	c94e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9a9e:	78a8      	ldrb	r0, [r5, #2]
    9aa0:	f7f9 fee6 	bl	3870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9aa4:	68a8      	ldr	r0, [r5, #8]
    9aa6:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    9aaa:	bd70      	pop	{r4, r5, r6, pc}
    9aac:	20000120 	.word	0x20000120
    9ab0:	b510      	push	{r4, lr}
    9ab2:	4c08      	ldr	r4, [pc, #32]	; (9ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a14>)
    9ab4:	2301      	movs	r3, #1
    9ab6:	4619      	mov	r1, r3
    9ab8:	68a0      	ldr	r0, [r4, #8]
    9aba:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9abe:	3070      	adds	r0, #112	; 0x70
    9ac0:	f003 f9d1 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ac4:	2800      	cmp	r0, #0
    9ac6:	d103      	bne.n	9ad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    9ac8:	68a1      	ldr	r1, [r4, #8]
    9aca:	2008      	movs	r0, #8
    9acc:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9ad0:	bd10      	pop	{r4, pc}
    9ad2:	0000      	.short	0x0000
    9ad4:	20000120 	.word	0x20000120
    9ad8:	4814      	ldr	r0, [pc, #80]	; (9b2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9ada:	b510      	push	{r4, lr}
    9adc:	68c1      	ldr	r1, [r0, #12]
    9ade:	6880      	ldr	r0, [r0, #8]
    9ae0:	7909      	ldrb	r1, [r1, #4]
    9ae2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9ae6:	2a0a      	cmp	r2, #10
    9ae8:	d109      	bne.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3e>
    9aea:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    9aee:	428a      	cmp	r2, r1
    9af0:	d105      	bne.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3e>
    9af2:	2100      	movs	r1, #0
    9af4:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9af8:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9afc:	bd10      	pop	{r4, pc}
    9afe:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9b02:	0713      	lsls	r3, r2, #28
    9b04:	d507      	bpl.n	9b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    9b06:	f022 0108 	bic.w	r1, r2, #8
    9b0a:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b12:	f7fe bbf3 	b.w	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9b16:	29ff      	cmp	r1, #255	; 0xff
    9b18:	d004      	beq.n	9b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a64>
    9b1a:	f240 616c 	movw	r1, #1644	; 0x66c
    9b1e:	2031      	movs	r0, #49	; 0x31
    9b20:	f7fa f856 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b28:	f7ff be94 	b.w	9854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1794>
    9b2c:	20000120 	.word	0x20000120
    9b30:	b510      	push	{r4, lr}
    9b32:	4c15      	ldr	r4, [pc, #84]	; (9b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>)
    9b34:	68a0      	ldr	r0, [r4, #8]
    9b36:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9b3a:	0789      	lsls	r1, r1, #30
    9b3c:	d411      	bmi.n	9b62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa2>
    9b3e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9b42:	2301      	movs	r3, #1
    9b44:	2100      	movs	r1, #0
    9b46:	3070      	adds	r0, #112	; 0x70
    9b48:	f003 f98d 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b4c:	b120      	cbz	r0, 9b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9b4e:	68a1      	ldr	r1, [r4, #8]
    9b50:	2006      	movs	r0, #6
    9b52:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9b56:	e009      	b.n	9b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aac>
    9b58:	f240 61d6 	movw	r1, #1750	; 0x6d6
    9b5c:	2031      	movs	r0, #49	; 0x31
    9b5e:	f7fa f837 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b62:	2100      	movs	r1, #0
    9b64:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9b68:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    9b6c:	68a0      	ldr	r0, [r4, #8]
    9b6e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9b72:	0780      	lsls	r0, r0, #30
    9b74:	d507      	bpl.n	9b86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac6>
    9b76:	f7fe fbc1 	bl	82fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9b7a:	68a0      	ldr	r0, [r4, #8]
    9b7c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9b80:	f021 0102 	bic.w	r1, r1, #2
    9b84:	7001      	strb	r1, [r0, #0]
    9b86:	bd10      	pop	{r4, pc}
    9b88:	20000120 	.word	0x20000120
    9b8c:	4808      	ldr	r0, [pc, #32]	; (9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>)
    9b8e:	b510      	push	{r4, lr}
    9b90:	6880      	ldr	r0, [r0, #8]
    9b92:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    9b96:	b941      	cbnz	r1, 9baa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    9b98:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9b9c:	2301      	movs	r3, #1
    9b9e:	2106      	movs	r1, #6
    9ba0:	3070      	adds	r0, #112	; 0x70
    9ba2:	f003 f960 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ba6:	2800      	cmp	r0, #0
    9ba8:	d000      	beq.n	9bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aec>
    9baa:	2001      	movs	r0, #1
    9bac:	bd10      	pop	{r4, pc}
    9bae:	0000      	.short	0x0000
    9bb0:	20000120 	.word	0x20000120
    9bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bb6:	4c54      	ldr	r4, [pc, #336]	; (9d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c48>)
    9bb8:	4606      	mov	r6, r0
    9bba:	4615      	mov	r5, r2
    9bbc:	68a0      	ldr	r0, [r4, #8]
    9bbe:	b109      	cbz	r1, 9bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    9bc0:	2100      	movs	r1, #0
    9bc2:	e004      	b.n	9bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    9bc4:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    9bc8:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    9bcc:	4411      	add	r1, r2
    9bce:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9bd2:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    9bd6:	b939      	cbnz	r1, 9be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b28>
    9bd8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9bdc:	2301      	movs	r3, #1
    9bde:	4619      	mov	r1, r3
    9be0:	3070      	adds	r0, #112	; 0x70
    9be2:	f003 f940 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9be6:	b130      	cbz	r0, 9bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    9be8:	68a0      	ldr	r0, [r4, #8]
    9bea:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    9bee:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    9bf2:	4411      	add	r1, r2
    9bf4:	8001      	strh	r1, [r0, #0]
    9bf6:	68a0      	ldr	r0, [r4, #8]
    9bf8:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    9bfc:	b132      	cbz	r2, 9c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4c>
    9bfe:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    9c02:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9c06:	4419      	add	r1, r3
    9c08:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    9c0c:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    9c10:	2f00      	cmp	r7, #0
    9c12:	dd06      	ble.n	9c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b62>
    9c14:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    9c18:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9c1c:	4419      	add	r1, r3
    9c1e:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    9c22:	2101      	movs	r1, #1
    9c24:	233d      	movs	r3, #61	; 0x3d
    9c26:	b116      	cbz	r6, 9c2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b6e>
    9c28:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    9c2c:	e013      	b.n	9c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b96>
    9c2e:	7824      	ldrb	r4, [r4, #0]
    9c30:	2c02      	cmp	r4, #2
    9c32:	d00a      	beq.n	9c4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8a>
    9c34:	2c01      	cmp	r4, #1
    9c36:	d012      	beq.n	9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9e>
    9c38:	b345      	cbz	r5, 9c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bcc>
    9c3a:	f100 028d 	add.w	r2, r0, #141	; 0x8d
    9c3e:	7011      	strb	r1, [r2, #0]
    9c40:	f015 0f14 	tst.w	r5, #20
    9c44:	d00e      	beq.n	9c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    9c46:	211e      	movs	r1, #30
    9c48:	e018      	b.n	9c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    9c4a:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    9c4e:	2a06      	cmp	r2, #6
    9c50:	d03e      	beq.n	9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9c52:	2216      	movs	r2, #22
    9c54:	e03c      	b.n	9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9c56:	f100 028d 	add.w	r2, r0, #141	; 0x8d
    9c5a:	7011      	strb	r1, [r2, #0]
    9c5c:	e041      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9c5e:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    9c62:	e035      	b.n	9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9c64:	0729      	lsls	r1, r5, #28
    9c66:	d502      	bpl.n	9c6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bae>
    9c68:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    9c6c:	e039      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9c6e:	06a9      	lsls	r1, r5, #26
    9c70:	d501      	bpl.n	9c76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb6>
    9c72:	2123      	movs	r1, #35	; 0x23
    9c74:	e002      	b.n	9c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    9c76:	07a9      	lsls	r1, r5, #30
    9c78:	d003      	beq.n	9c82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc2>
    9c7a:	212a      	movs	r1, #42	; 0x2a
    9c7c:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9c80:	e02f      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9c82:	f640 419d 	movw	r1, #3229	; 0xc9d
    9c86:	2031      	movs	r0, #49	; 0x31
    9c88:	f7f9 ffa2 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c8c:	b12a      	cbz	r2, 9c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bda>
    9c8e:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    9c92:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9c96:	429a      	cmp	r2, r3
    9c98:	d210      	bcs.n	9cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    9c9a:	2f00      	cmp	r7, #0
    9c9c:	dd05      	ble.n	9caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    9c9e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    9ca2:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9ca6:	429a      	cmp	r2, r3
    9ca8:	d208      	bcs.n	9cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    9caa:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    9cae:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9cb2:	4293      	cmp	r3, r2
    9cb4:	d304      	bcc.n	9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    9cb6:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    9cba:	b10b      	cbz	r3, 9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    9cbc:	2222      	movs	r2, #34	; 0x22
    9cbe:	e007      	b.n	9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9cc0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    9cc4:	b13b      	cbz	r3, 9cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c16>
    9cc6:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    9cca:	4293      	cmp	r3, r2
    9ccc:	d309      	bcc.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9cce:	2208      	movs	r2, #8
    9cd0:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    9cd4:	e7bf      	b.n	9c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b96>
    9cd6:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    9cda:	2a06      	cmp	r2, #6
    9cdc:	d301      	bcc.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9cde:	223e      	movs	r2, #62	; 0x3e
    9ce0:	e7f6      	b.n	9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9ce2:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    9ce6:	f88d 1000 	strb.w	r1, [sp]
    9cea:	9900      	ldr	r1, [sp, #0]
    9cec:	9100      	str	r1, [sp, #0]
    9cee:	f89d 1000 	ldrb.w	r1, [sp]
    9cf2:	b119      	cbz	r1, 9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>
    9cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9cf8:	f004 b9eb 	b.w	e0d2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9cfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9d00:	2100      	movs	r1, #0
    9d02:	f7fd b9a1 	b.w	7048 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9d06:	0000      	.short	0x0000
    9d08:	20000120 	.word	0x20000120
    9d0c:	b570      	push	{r4, r5, r6, lr}
    9d0e:	4d2d      	ldr	r5, [pc, #180]	; (9dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d04>)
    9d10:	68a8      	ldr	r0, [r5, #8]
    9d12:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9d16:	b151      	cbz	r1, 9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9d18:	2901      	cmp	r1, #1
    9d1a:	d008      	beq.n	9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9d1c:	2902      	cmp	r1, #2
    9d1e:	d009      	beq.n	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c74>
    9d20:	2903      	cmp	r1, #3
    9d22:	d007      	beq.n	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c74>
    9d24:	f640 215f 	movw	r1, #2655	; 0xa5f
    9d28:	2031      	movs	r0, #49	; 0x31
    9d2a:	f7f9 ff51 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d2e:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9d32:	e035      	b.n	9da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce0>
    9d34:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9d38:	2908      	cmp	r1, #8
    9d3a:	d034      	beq.n	9da6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce6>
    9d3c:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9d40:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9d44:	2400      	movs	r4, #0
    9d46:	1c8b      	adds	r3, r1, #2
    9d48:	429a      	cmp	r2, r3
    9d4a:	d306      	bcc.n	9d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9a>
    9d4c:	1a51      	subs	r1, r2, r1
    9d4e:	1e89      	subs	r1, r1, #2
    9d50:	040c      	lsls	r4, r1, #16
    9d52:	0c24      	lsrs	r4, r4, #16
    9d54:	d001      	beq.n	9d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9a>
    9d56:	1e64      	subs	r4, r4, #1
    9d58:	b2a4      	uxth	r4, r4
    9d5a:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    9d5e:	b139      	cbz	r1, 9d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
    9d60:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9d64:	2301      	movs	r3, #1
    9d66:	2109      	movs	r1, #9
    9d68:	3070      	adds	r0, #112	; 0x70
    9d6a:	f003 f87c 	bl	ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d6e:	b330      	cbz	r0, 9dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    9d70:	f7ff ff0c 	bl	9b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    9d74:	b168      	cbz	r0, 9d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd2>
    9d76:	68a9      	ldr	r1, [r5, #8]
    9d78:	2000      	movs	r0, #0
    9d7a:	3190      	adds	r1, #144	; 0x90
    9d7c:	c906      	ldmia	r1, {r1, r2}
    9d7e:	1c8b      	adds	r3, r1, #2
    9d80:	429a      	cmp	r2, r3
    9d82:	d303      	bcc.n	9d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    9d84:	1a50      	subs	r0, r2, r1
    9d86:	1e80      	subs	r0, r0, #2
    9d88:	d000      	beq.n	9d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    9d8a:	1e40      	subs	r0, r0, #1
    9d8c:	42a0      	cmp	r0, r4
    9d8e:	d200      	bcs.n	9d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd2>
    9d90:	b284      	uxth	r4, r0
    9d92:	b10c      	cbz	r4, 9d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd8>
    9d94:	1e64      	subs	r4, r4, #1
    9d96:	b2a4      	uxth	r4, r4
    9d98:	68a8      	ldr	r0, [r5, #8]
    9d9a:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9d9e:	4421      	add	r1, r4
    9da0:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    9da4:	bd70      	pop	{r4, r5, r6, pc}
    9da6:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9daa:	2903      	cmp	r1, #3
    9dac:	d3bf      	bcc.n	9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9dae:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    9db2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    9db4:	4411      	add	r1, r2
    9db6:	1c49      	adds	r1, r1, #1
    9db8:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    9dbc:	bd70      	pop	{r4, r5, r6, pc}
    9dbe:	2400      	movs	r4, #0
    9dc0:	e7ea      	b.n	9d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd8>
    9dc2:	0000      	.short	0x0000
    9dc4:	20000120 	.word	0x20000120

00009dc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9dc8:	4903      	ldr	r1, [pc, #12]	; (9dd8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9dca:	888a      	ldrh	r2, [r1, #4]
    9dcc:	8002      	strh	r2, [r0, #0]
    9dce:	7889      	ldrb	r1, [r1, #2]
    9dd0:	7081      	strb	r1, [r0, #2]
    9dd2:	2000      	movs	r0, #0
    9dd4:	4770      	bx	lr
    9dd6:	0000      	.short	0x0000
    9dd8:	20000d90 	.word	0x20000d90

00009ddc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9ddc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9de0:	460d      	mov	r5, r1
    9de2:	4606      	mov	r6, r0
    9de4:	f000 fc12 	bl	a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9de8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9dec:	b1e0      	cbz	r0, 9e28 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    9dee:	8830      	ldrh	r0, [r6, #0]
    9df0:	4669      	mov	r1, sp
    9df2:	f003 f80e 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9df6:	2800      	cmp	r0, #0
    9df8:	d114      	bne.n	9e24 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9dfa:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9dfe:	2700      	movs	r7, #0
    9e00:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    9e04:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    9e08:	f004 fe93 	bl	eb32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9e0c:	70a8      	strb	r0, [r5, #2]
    9e0e:	7860      	ldrb	r0, [r4, #1]
    9e10:	f004 fe8f 	bl	eb32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9e14:	70e8      	strb	r0, [r5, #3]
    9e16:	78a0      	ldrb	r0, [r4, #2]
    9e18:	3c66      	subs	r4, #102	; 0x66
    9e1a:	2800      	cmp	r0, #0
    9e1c:	d1f0      	bne.n	9e00 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    9e1e:	8830      	ldrh	r0, [r6, #0]
    9e20:	8028      	strh	r0, [r5, #0]
    9e22:	2000      	movs	r0, #0
    9e24:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9e28:	2001      	movs	r0, #1
    9e2a:	e7fb      	b.n	9e24 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

00009e2c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9e2c:	b51c      	push	{r2, r3, r4, lr}
    9e2e:	8800      	ldrh	r0, [r0, #0]
    9e30:	4669      	mov	r1, sp
    9e32:	f002 ffee 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9e36:	2800      	cmp	r0, #0
    9e38:	d10b      	bne.n	9e52 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9e3a:	480b      	ldr	r0, [pc, #44]	; (9e68 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9e3c:	7800      	ldrb	r0, [r0, #0]
    9e3e:	b188      	cbz	r0, 9e64 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9e40:	9801      	ldr	r0, [sp, #4]
    9e42:	f004 fffd 	bl	ee40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x346>
    9e46:	b128      	cbz	r0, 9e54 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9e48:	9801      	ldr	r0, [sp, #4]
    9e4a:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    9e4e:	b118      	cbz	r0, 9e58 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9e50:	203a      	movs	r0, #58	; 0x3a
    9e52:	bd1c      	pop	{r2, r3, r4, pc}
    9e54:	2002      	movs	r0, #2
    9e56:	bd1c      	pop	{r2, r3, r4, pc}
    9e58:	9901      	ldr	r1, [sp, #4]
    9e5a:	2001      	movs	r0, #1
    9e5c:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    9e60:	2000      	movs	r0, #0
    9e62:	bd1c      	pop	{r2, r3, r4, pc}
    9e64:	2011      	movs	r0, #17
    9e66:	bd1c      	pop	{r2, r3, r4, pc}
    9e68:	200001fc 	.word	0x200001fc

00009e6c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9e6c:	b510      	push	{r4, lr}
    9e6e:	4604      	mov	r4, r0
    9e70:	f004 ffdd 	bl	ee2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    9e74:	b130      	cbz	r0, 9e84 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9e76:	4804      	ldr	r0, [pc, #16]	; (9e88 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9e78:	8941      	ldrh	r1, [r0, #10]
    9e7a:	8021      	strh	r1, [r4, #0]
    9e7c:	8980      	ldrh	r0, [r0, #12]
    9e7e:	8060      	strh	r0, [r4, #2]
    9e80:	2000      	movs	r0, #0
    9e82:	bd10      	pop	{r4, pc}
    9e84:	2001      	movs	r0, #1
    9e86:	bd10      	pop	{r4, pc}
    9e88:	20000fdc 	.word	0x20000fdc

00009e8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9e8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9e8e:	4605      	mov	r5, r0
    9e90:	f000 fbbc 	bl	a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9e94:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9e98:	b310      	cbz	r0, 9ee0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9e9a:	2400      	movs	r4, #0
    9e9c:	a802      	add	r0, sp, #8
    9e9e:	f88d 4004 	strb.w	r4, [sp, #4]
    9ea2:	f88d 4008 	strb.w	r4, [sp, #8]
    9ea6:	9000      	str	r0, [sp, #0]
    9ea8:	78aa      	ldrb	r2, [r5, #2]
    9eaa:	7869      	ldrb	r1, [r5, #1]
    9eac:	7828      	ldrb	r0, [r5, #0]
    9eae:	ab01      	add	r3, sp, #4
    9eb0:	f004 fffb 	bl	eeaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b0>
    9eb4:	2800      	cmp	r0, #0
    9eb6:	d112      	bne.n	9ede <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9eb8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9ebc:	f004 ff18 	bl	ecf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    9ec0:	b180      	cbz	r0, 9ee4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9ec2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9ec6:	f004 ff13 	bl	ecf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    9eca:	b158      	cbz	r0, 9ee4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9ecc:	4806      	ldr	r0, [pc, #24]	; (9ee8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9ece:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9ed2:	7481      	strb	r1, [r0, #18]
    9ed4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9ed8:	74c1      	strb	r1, [r0, #19]
    9eda:	8284      	strh	r4, [r0, #20]
    9edc:	2000      	movs	r0, #0
    9ede:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ee0:	2001      	movs	r0, #1
    9ee2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ee4:	2011      	movs	r0, #17
    9ee6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ee8:	20000d90 	.word	0x20000d90

00009eec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    9eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9eee:	460f      	mov	r7, r1
    9ef0:	4605      	mov	r5, r0
    9ef2:	7806      	ldrb	r6, [r0, #0]
    9ef4:	f004 feab 	bl	ec4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x154>
    9ef8:	2800      	cmp	r0, #0
    9efa:	d10a      	bne.n	9f12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x26>
    9efc:	4628      	mov	r0, r5
    9efe:	f004 fe8a 	bl	ec16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11c>
    9f02:	2800      	cmp	r0, #0
    9f04:	d105      	bne.n	9f12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x26>
    9f06:	2001      	movs	r0, #1
    9f08:	f7fa f844 	bl	3f94 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    9f0c:	4286      	cmp	r6, r0
    9f0e:	d301      	bcc.n	9f14 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9f10:	2007      	movs	r0, #7
    9f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f14:	2101      	movs	r1, #1
    9f16:	4630      	mov	r0, r6
    9f18:	f002 fe43 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9f1c:	0004      	movs	r4, r0
    9f1e:	d10c      	bne.n	9f3a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4e>
    9f20:	2200      	movs	r2, #0
    9f22:	2101      	movs	r1, #1
    9f24:	4630      	mov	r0, r6
    9f26:	f002 fe20 	bl	cb6a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    9f2a:	0004      	movs	r4, r0
    9f2c:	d00b      	beq.n	9f46 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    9f2e:	f003 fd19 	bl	d964 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    9f32:	4915      	ldr	r1, [pc, #84]	; (9f88 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9c>)
    9f34:	4620      	mov	r0, r4
    9f36:	f003 fcfb 	bl	d930 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    9f3a:	4620      	mov	r0, r4
    9f3c:	f003 ff27 	bl	dd8e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    9f40:	b130      	cbz	r0, 9f50 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x64>
    9f42:	200c      	movs	r0, #12
    9f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f46:	f241 213b 	movw	r1, #4667	; 0x123b
    9f4a:	2039      	movs	r0, #57	; 0x39
    9f4c:	f7f9 fe40 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f50:	4620      	mov	r0, r4
    9f52:	f003 fd53 	bl	d9fc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    9f56:	7038      	strb	r0, [r7, #0]
    9f58:	74e8      	strb	r0, [r5, #19]
    9f5a:	4629      	mov	r1, r5
    9f5c:	4620      	mov	r0, r4
    9f5e:	f7fc f911 	bl	6184 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    9f62:	4606      	mov	r6, r0
    9f64:	7e68      	ldrb	r0, [r5, #25]
    9f66:	b168      	cbz	r0, 9f84 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
    9f68:	b966      	cbnz	r6, 9f84 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
    9f6a:	20ff      	movs	r0, #255	; 0xff
    9f6c:	f88d 0000 	strb.w	r0, [sp]
    9f70:	466a      	mov	r2, sp
    9f72:	2100      	movs	r1, #0
    9f74:	4620      	mov	r0, r4
    9f76:	f003 fd59 	bl	da2c <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    9f7a:	466a      	mov	r2, sp
    9f7c:	2100      	movs	r1, #0
    9f7e:	4620      	mov	r0, r4
    9f80:	f003 fd5e 	bl	da40 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    9f84:	4630      	mov	r0, r6
    9f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f88:	20000fdd 	.word	0x20000fdd

00009f8c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9f8c:	7801      	ldrb	r1, [r0, #0]
    9f8e:	b179      	cbz	r1, 9fb0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9f90:	7841      	ldrb	r1, [r0, #1]
    9f92:	b169      	cbz	r1, 9fb0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9f94:	8841      	ldrh	r1, [r0, #2]
    9f96:	291b      	cmp	r1, #27
    9f98:	d30a      	bcc.n	9fb0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9f9a:	8881      	ldrh	r1, [r0, #4]
    9f9c:	291b      	cmp	r1, #27
    9f9e:	d307      	bcc.n	9fb0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9fa0:	4904      	ldr	r1, [pc, #16]	; (9fb4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9fa2:	6802      	ldr	r2, [r0, #0]
    9fa4:	f8c1 2002 	str.w	r2, [r1, #2]
    9fa8:	8880      	ldrh	r0, [r0, #4]
    9faa:	80c8      	strh	r0, [r1, #6]
    9fac:	2000      	movs	r0, #0
    9fae:	4770      	bx	lr
    9fb0:	2012      	movs	r0, #18
    9fb2:	4770      	bx	lr
    9fb4:	20000d90 	.word	0x20000d90

00009fb8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9fb8:	6800      	ldr	r0, [r0, #0]
    9fba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9fbe:	4288      	cmp	r0, r1
    9fc0:	d303      	bcc.n	9fca <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9fc2:	4903      	ldr	r1, [pc, #12]	; (9fd0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9fc4:	6088      	str	r0, [r1, #8]
    9fc6:	2000      	movs	r0, #0
    9fc8:	4770      	bx	lr
    9fca:	2012      	movs	r0, #18
    9fcc:	4770      	bx	lr
    9fce:	0000      	.short	0x0000
    9fd0:	20000d90 	.word	0x20000d90

00009fd4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9fd4:	4a03      	ldr	r2, [pc, #12]	; (9fe4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9fd6:	e9d2 1200 	ldrd	r1, r2, [r2]
    9fda:	6001      	str	r1, [r0, #0]
    9fdc:	6042      	str	r2, [r0, #4]
    9fde:	2000      	movs	r0, #0
    9fe0:	4770      	bx	lr
    9fe2:	0000      	.short	0x0000
    9fe4:	0000a48c 	.word	0x0000a48c

00009fe8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9fe8:	b510      	push	{r4, lr}
    9fea:	2005      	movs	r0, #5
    9fec:	f000 fb04 	bl	a5f8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9ff0:	f7fd fe86 	bl	7d00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9ff4:	4902      	ldr	r1, [pc, #8]	; (a000 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9ff6:	4801      	ldr	r0, [pc, #4]	; (9ffc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9ff8:	6048      	str	r0, [r1, #4]
    9ffa:	bd10      	pop	{r4, pc}
    9ffc:	0000a0cd 	.word	0x0000a0cd
    a000:	200001fc 	.word	0x200001fc

0000a004 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a004:	4901      	ldr	r1, [pc, #4]	; (a00c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    a006:	7048      	strb	r0, [r1, #1]
    a008:	f000 b802 	b.w	a010 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a00c:	200001fc 	.word	0x200001fc

0000a010 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a014:	f002 fe3e 	bl	cc94 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a018:	f7fb fa34 	bl	5484 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a01c:	4c1a      	ldr	r4, [pc, #104]	; (a088 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>)
    a01e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    a022:	2600      	movs	r6, #0
    a024:	81e0      	strh	r0, [r4, #14]
    a026:	8220      	strh	r0, [r4, #16]
    a028:	75e6      	strb	r6, [r4, #23]
    a02a:	8326      	strh	r6, [r4, #24]
    a02c:	8026      	strh	r6, [r4, #0]
    a02e:	f7fa fa45 	bl	44bc <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI>
    a032:	a016      	add	r0, pc, #88	; (adr r0, a08c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7c>)
    a034:	4d17      	ldr	r5, [pc, #92]	; (a094 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>)
    a036:	6801      	ldr	r1, [r0, #0]
    a038:	7900      	ldrb	r0, [r0, #4]
    a03a:	702e      	strb	r6, [r5, #0]
    a03c:	f8c5 1001 	str.w	r1, [r5, #1]
    a040:	7168      	strb	r0, [r5, #5]
    a042:	2101      	movs	r1, #1
    a044:	2000      	movs	r0, #0
    a046:	f002 fdac 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a04a:	0007      	movs	r7, r0
    a04c:	d005      	beq.n	a05a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a>
    a04e:	f003 fc89 	bl	d964 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a052:	1c69      	adds	r1, r5, #1
    a054:	4638      	mov	r0, r7
    a056:	f003 fc6b 	bl	d930 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    a05a:	201b      	movs	r0, #27
    a05c:	80e8      	strh	r0, [r5, #6]
    a05e:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a062:	8129      	strh	r1, [r5, #8]
    a064:	8168      	strh	r0, [r5, #10]
    a066:	81a9      	strh	r1, [r5, #12]
    a068:	74a6      	strb	r6, [r4, #18]
    a06a:	74e6      	strb	r6, [r4, #19]
    a06c:	2103      	movs	r1, #3
    a06e:	70a1      	strb	r1, [r4, #2]
    a070:	2102      	movs	r1, #2
    a072:	70e1      	strb	r1, [r4, #3]
    a074:	80a0      	strh	r0, [r4, #4]
    a076:	80e0      	strh	r0, [r4, #6]
    a078:	f640 60a6 	movw	r0, #3750	; 0xea6
    a07c:	60a0      	str	r0, [r4, #8]
    a07e:	75a6      	strb	r6, [r4, #22]
    a080:	7326      	strb	r6, [r4, #12]
    a082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a086:	0000      	.short	0x0000
    a088:	20000d90 	.word	0x20000d90
    a08c:	ffffffff 	.word	0xffffffff
    a090:	0000001f 	.word	0x0000001f
    a094:	20000fdc 	.word	0x20000fdc

0000a098 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    a098:	b510      	push	{r4, lr}
    a09a:	b158      	cbz	r0, a0b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    a09c:	490a      	ldr	r1, [pc, #40]	; (a0c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    a09e:	780a      	ldrb	r2, [r1, #0]
    a0a0:	b16a      	cbz	r2, a0be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    a0a2:	2200      	movs	r2, #0
    a0a4:	7042      	strb	r2, [r0, #1]
    a0a6:	2303      	movs	r3, #3
    a0a8:	7003      	strb	r3, [r0, #0]
    a0aa:	2301      	movs	r3, #1
    a0ac:	7103      	strb	r3, [r0, #4]
    a0ae:	700a      	strb	r2, [r1, #0]
    a0b0:	4618      	mov	r0, r3
    a0b2:	bd10      	pop	{r4, pc}
    a0b4:	f241 71be 	movw	r1, #6078	; 0x17be
    a0b8:	2039      	movs	r0, #57	; 0x39
    a0ba:	f7f9 fd89 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0c2:	f7fb bd8d 	b.w	5be0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    a0c6:	0000      	.short	0x0000
    a0c8:	20000d90 	.word	0x20000d90
    a0cc:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0d0:	4692      	mov	sl, r2
    a0d2:	460f      	mov	r7, r1
    a0d4:	4681      	mov	r9, r0
    a0d6:	f004 feaa 	bl	ee2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a0da:	2800      	cmp	r0, #0
    a0dc:	d063      	beq.n	a1a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a0de:	4933      	ldr	r1, [pc, #204]	; (a1ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    a0e0:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    a0e4:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    a0e8:	88c8      	ldrh	r0, [r1, #6]
    a0ea:	4290      	cmp	r0, r2
    a0ec:	d300      	bcc.n	a0f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    a0ee:	4610      	mov	r0, r2
    a0f0:	4680      	mov	r8, r0
    a0f2:	8948      	ldrh	r0, [r1, #10]
    a0f4:	42b0      	cmp	r0, r6
    a0f6:	d200      	bcs.n	a0fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    a0f8:	4606      	mov	r6, r0
    a0fa:	890c      	ldrh	r4, [r1, #8]
    a0fc:	f640 0048 	movw	r0, #2120	; 0x848
    a100:	4284      	cmp	r4, r0
    a102:	d300      	bcc.n	a106 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    a104:	4604      	mov	r4, r0
    a106:	898d      	ldrh	r5, [r1, #12]
    a108:	4285      	cmp	r5, r0
    a10a:	d300      	bcc.n	a10e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    a10c:	4605      	mov	r5, r0
    a10e:	4284      	cmp	r4, r0
    a110:	d300      	bcc.n	a114 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    a112:	4604      	mov	r4, r0
    a114:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a118:	2e1b      	cmp	r6, #27
    a11a:	d001      	beq.n	a120 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    a11c:	428d      	cmp	r5, r1
    a11e:	d104      	bne.n	a12a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    a120:	f1b8 0f1b 	cmp.w	r8, #27
    a124:	d03f      	beq.n	a1a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a126:	428c      	cmp	r4, r1
    a128:	d03d      	beq.n	a1a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a12a:	466a      	mov	r2, sp
    a12c:	4651      	mov	r1, sl
    a12e:	4648      	mov	r0, r9
    a130:	f004 fe01 	bl	ed36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    a134:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a138:	4641      	mov	r1, r8
    a13a:	4540      	cmp	r0, r8
    a13c:	d900      	bls.n	a140 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    a13e:	4608      	mov	r0, r1
    a140:	80f8      	strh	r0, [r7, #6]
    a142:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a146:	42a1      	cmp	r1, r4
    a148:	d800      	bhi.n	a14c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    a14a:	460c      	mov	r4, r1
    a14c:	813c      	strh	r4, [r7, #8]
    a14e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a152:	42b1      	cmp	r1, r6
    a154:	d800      	bhi.n	a158 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    a156:	460e      	mov	r6, r1
    a158:	807e      	strh	r6, [r7, #2]
    a15a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a15e:	42a9      	cmp	r1, r5
    a160:	d900      	bls.n	a164 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    a162:	4629      	mov	r1, r5
    a164:	80b9      	strh	r1, [r7, #4]
    a166:	2201      	movs	r2, #1
    a168:	703a      	strb	r2, [r7, #0]
    a16a:	381b      	subs	r0, #27
    a16c:	28e0      	cmp	r0, #224	; 0xe0
    a16e:	d902      	bls.n	a176 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    a170:	f640 41b6 	movw	r1, #3254	; 0xcb6
    a174:	e014      	b.n	a1a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a176:	3e1b      	subs	r6, #27
    a178:	2ee0      	cmp	r6, #224	; 0xe0
    a17a:	d902      	bls.n	a182 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    a17c:	f640 41b8 	movw	r1, #3256	; 0xcb8
    a180:	e00e      	b.n	a1a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a182:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a186:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a18a:	4284      	cmp	r4, r0
    a18c:	d902      	bls.n	a194 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    a18e:	f640 41ba 	movw	r1, #3258	; 0xcba
    a192:	e005      	b.n	a1a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a194:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    a198:	4281      	cmp	r1, r0
    a19a:	d904      	bls.n	a1a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a19c:	f640 41bc 	movw	r1, #3260	; 0xcbc
    a1a0:	2039      	movs	r0, #57	; 0x39
    a1a2:	f7f9 fd15 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1a6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1aa:	0000      	.short	0x0000
    a1ac:	20000fdc 	.word	0x20000fdc

0000a1b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1b4:	b088      	sub	sp, #32
    a1b6:	460c      	mov	r4, r1
    a1b8:	4606      	mov	r6, r0
    a1ba:	f003 fc22 	bl	da02 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a1be:	b198      	cbz	r0, a1e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a1c0:	4630      	mov	r0, r6
    a1c2:	f003 fc11 	bl	d9e8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a1c6:	b130      	cbz	r0, a1d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a1c8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a1cc:	2012      	movs	r0, #18
    a1ce:	2900      	cmp	r1, #0
    a1d0:	d00b      	beq.n	a1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a1d2:	2980      	cmp	r1, #128	; 0x80
    a1d4:	d809      	bhi.n	a1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a1d6:	4630      	mov	r0, r6
    a1d8:	f003 fbfe 	bl	d9d8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a1dc:	b140      	cbz	r0, a1f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a1de:	4630      	mov	r0, r6
    a1e0:	f003 fb8b 	bl	d8fa <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a1e4:	b130      	cbz	r0, a1f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    a1e6:	e009      	b.n	a1fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    a1e8:	2042      	movs	r0, #66	; 0x42
    a1ea:	b008      	add	sp, #32
    a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1f0:	200c      	movs	r0, #12
    a1f2:	e7fa      	b.n	a1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a1f4:	4630      	mov	r0, r6
    a1f6:	f003 fbf1 	bl	d9dc <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a1fa:	b3a8      	cbz	r0, a268 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    a1fc:	4630      	mov	r0, r6
    a1fe:	f003 fdc6 	bl	dd8e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    a202:	2800      	cmp	r0, #0
    a204:	d1f4      	bne.n	a1f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a206:	4630      	mov	r0, r6
    a208:	f003 fb93 	bl	d932 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a20c:	2800      	cmp	r0, #0
    a20e:	d1ef      	bne.n	a1f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a210:	4630      	mov	r0, r6
    a212:	f7fb feff 	bl	6014 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a216:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a21a:	f242 7110 	movw	r1, #10000	; 0x2710
    a21e:	fb00 f801 	mul.w	r8, r0, r1
    a222:	78e1      	ldrb	r1, [r4, #3]
    a224:	4630      	mov	r0, r6
    a226:	f003 fbce 	bl	d9c6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a22a:	4630      	mov	r0, r6
    a22c:	f003 fbd8 	bl	d9e0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a230:	b1e8      	cbz	r0, a26e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    a232:	2200      	movs	r2, #0
    a234:	4611      	mov	r1, r2
    a236:	a801      	add	r0, sp, #4
    a238:	f7f9 ff1e 	bl	4078 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a23c:	0004      	movs	r4, r0
    a23e:	d06a      	beq.n	a316 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a240:	2100      	movs	r1, #0
    a242:	f7fb fb85 	bl	5950 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a246:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a24a:	8020      	strh	r0, [r4, #0]
    a24c:	4621      	mov	r1, r4
    a24e:	4630      	mov	r0, r6
    a250:	f003 fbea 	bl	da28 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a254:	f004 fdeb 	bl	ee2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a258:	4d3a      	ldr	r5, [pc, #232]	; (a344 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    a25a:	2800      	cmp	r0, #0
    a25c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a260:	d00f      	beq.n	a282 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    a262:	88aa      	ldrh	r2, [r5, #4]
    a264:	88e9      	ldrh	r1, [r5, #6]
    a266:	e00e      	b.n	a286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    a268:	e7ff      	b.n	a26a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    a26a:	2012      	movs	r0, #18
    a26c:	e7bd      	b.n	a1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a26e:	4642      	mov	r2, r8
    a270:	2100      	movs	r1, #0
    a272:	4630      	mov	r0, r6
    a274:	f7fc fdf6 	bl	6e64 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a278:	2800      	cmp	r0, #0
    a27a:	d0b6      	beq.n	a1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a27c:	f241 4102 	movw	r1, #5122	; 0x1402
    a280:	e053      	b.n	a32a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a282:	221b      	movs	r2, #27
    a284:	4611      	mov	r1, r2
    a286:	84c2      	strh	r2, [r0, #38]	; 0x26
    a288:	8501      	strh	r1, [r0, #40]	; 0x28
    a28a:	68a8      	ldr	r0, [r5, #8]
    a28c:	62a0      	str	r0, [r4, #40]	; 0x28
    a28e:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a292:	4630      	mov	r0, r6
    a294:	f003 fbac 	bl	d9f0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a298:	b910      	cbnz	r0, a2a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a29a:	4630      	mov	r0, r6
    a29c:	f003 fbc2 	bl	da24 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a2a0:	6067      	str	r7, [r4, #4]
    a2a2:	8821      	ldrh	r1, [r4, #0]
    a2a4:	f8ad 1008 	strh.w	r1, [sp, #8]
    a2a8:	7ca9      	ldrb	r1, [r5, #18]
    a2aa:	f88d 100a 	strb.w	r1, [sp, #10]
    a2ae:	7ce9      	ldrb	r1, [r5, #19]
    a2b0:	f88d 100b 	strb.w	r1, [sp, #11]
    a2b4:	8aa9      	ldrh	r1, [r5, #20]
    a2b6:	f8ad 100c 	strh.w	r1, [sp, #12]
    a2ba:	a905      	add	r1, sp, #20
    a2bc:	9100      	str	r1, [sp, #0]
    a2be:	2001      	movs	r0, #1
    a2c0:	ab04      	add	r3, sp, #16
    a2c2:	aa02      	add	r2, sp, #8
    a2c4:	4621      	mov	r1, r4
    a2c6:	f004 fd73 	bl	edb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    a2ca:	b140      	cbz	r0, a2de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a2cc:	2100      	movs	r1, #0
    a2ce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a2d2:	f7f9 fefb 	bl	40cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a2d6:	b1f0      	cbz	r0, a316 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a2d8:	f241 414d 	movw	r1, #5197	; 0x144d
    a2dc:	e025      	b.n	a32a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a2de:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a2e2:	f88d 0018 	strb.w	r0, [sp, #24]
    a2e6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a2ea:	f88d 0019 	strb.w	r0, [sp, #25]
    a2ee:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a2f2:	f8ad 001a 	strh.w	r0, [sp, #26]
    a2f6:	a906      	add	r1, sp, #24
    a2f8:	4620      	mov	r0, r4
    a2fa:	f002 fe49 	bl	cf90 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a2fe:	78e8      	ldrb	r0, [r5, #3]
    a300:	9000      	str	r0, [sp, #0]
    a302:	78ab      	ldrb	r3, [r5, #2]
    a304:	88ea      	ldrh	r2, [r5, #6]
    a306:	88a9      	ldrh	r1, [r5, #4]
    a308:	8820      	ldrh	r0, [r4, #0]
    a30a:	f7f9 ffab 	bl	4264 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a30e:	b120      	cbz	r0, a31a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a310:	f241 4158 	movw	r1, #5208	; 0x1458
    a314:	e009      	b.n	a32a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a316:	2009      	movs	r0, #9
    a318:	e767      	b.n	a1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a31a:	4642      	mov	r2, r8
    a31c:	4621      	mov	r1, r4
    a31e:	4630      	mov	r0, r6
    a320:	f7fc fda0 	bl	6e64 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a324:	b120      	cbz	r0, a330 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a326:	f241 415a 	movw	r1, #5210	; 0x145a
    a32a:	2039      	movs	r0, #57	; 0x39
    a32c:	f7f9 fc50 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a330:	4805      	ldr	r0, [pc, #20]	; (a348 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a332:	6843      	ldr	r3, [r0, #4]
    a334:	b123      	cbz	r3, a340 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a336:	2200      	movs	r2, #0
    a338:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    a33c:	4620      	mov	r0, r4
    a33e:	4798      	blx	r3
    a340:	2000      	movs	r0, #0
    a342:	e752      	b.n	a1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a344:	20000d90 	.word	0x20000d90
    a348:	200001fc 	.word	0x200001fc
    a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a350:	b088      	sub	sp, #32
    a352:	4604      	mov	r4, r0
    a354:	8800      	ldrh	r0, [r0, #0]
    a356:	a906      	add	r1, sp, #24
    a358:	f002 fd5b 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a35c:	2800      	cmp	r0, #0
    a35e:	d147      	bne.n	a3f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a360:	9807      	ldr	r0, [sp, #28]
    a362:	2700      	movs	r7, #0
    a364:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    a368:	f88d 1008 	strb.w	r1, [sp, #8]
    a36c:	9902      	ldr	r1, [sp, #8]
    a36e:	9102      	str	r1, [sp, #8]
    a370:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a374:	f88d 100c 	strb.w	r1, [sp, #12]
    a378:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a37c:	3070      	adds	r0, #112	; 0x70
    a37e:	0689      	lsls	r1, r1, #26
    a380:	d502      	bpl.n	a388 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a382:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a386:	b149      	cbz	r1, a39c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a388:	f05f 0100 	movs.w	r1, #0
    a38c:	f88d 1004 	strb.w	r1, [sp, #4]
    a390:	2105      	movs	r1, #5
    a392:	3044      	adds	r0, #68	; 0x44
    a394:	f003 fed9 	bl	e14a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a398:	b110      	cbz	r0, a3a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a39a:	e004      	b.n	a3a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a39c:	2101      	movs	r1, #1
    a39e:	e7f5      	b.n	a38c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a3a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a3a4:	b318      	cbz	r0, a3ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a3a6:	8921      	ldrh	r1, [r4, #8]
    a3a8:	88e0      	ldrh	r0, [r4, #6]
    a3aa:	f004 fcb6 	bl	ed1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a3ae:	2800      	cmp	r0, #0
    a3b0:	d11e      	bne.n	a3f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a3b2:	88a1      	ldrh	r1, [r4, #4]
    a3b4:	8860      	ldrh	r0, [r4, #2]
    a3b6:	f004 fcb0 	bl	ed1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a3ba:	2800      	cmp	r0, #0
    a3bc:	d118      	bne.n	a3f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a3be:	8921      	ldrh	r1, [r4, #8]
    a3c0:	88e0      	ldrh	r0, [r4, #6]
    a3c2:	f004 fca0 	bl	ed06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20c>
    a3c6:	2800      	cmp	r0, #0
    a3c8:	d112      	bne.n	a3f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a3ca:	88a1      	ldrh	r1, [r4, #4]
    a3cc:	8860      	ldrh	r0, [r4, #2]
    a3ce:	f004 fc9a 	bl	ed06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20c>
    a3d2:	0006      	movs	r6, r0
    a3d4:	d10c      	bne.n	a3f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a3d6:	9807      	ldr	r0, [sp, #28]
    a3d8:	f04f 0801 	mov.w	r8, #1
    a3dc:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    a3e0:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    a3e4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a3e8:	b129      	cbz	r1, a3f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a3ea:	263a      	movs	r6, #58	; 0x3a
    a3ec:	e02f      	b.n	a44e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a3ee:	201a      	movs	r0, #26
    a3f0:	b008      	add	sp, #32
    a3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3f6:	4639      	mov	r1, r7
    a3f8:	aa03      	add	r2, sp, #12
    a3fa:	f004 fc9c 	bl	ed36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    a3fe:	8861      	ldrh	r1, [r4, #2]
    a400:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a404:	4281      	cmp	r1, r0
    a406:	d200      	bcs.n	a40a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a408:	4608      	mov	r0, r1
    a40a:	80e8      	strh	r0, [r5, #6]
    a40c:	88a1      	ldrh	r1, [r4, #4]
    a40e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a412:	4281      	cmp	r1, r0
    a414:	d200      	bcs.n	a418 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a416:	4608      	mov	r0, r1
    a418:	8128      	strh	r0, [r5, #8]
    a41a:	88e2      	ldrh	r2, [r4, #6]
    a41c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a420:	428a      	cmp	r2, r1
    a422:	d200      	bcs.n	a426 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a424:	4611      	mov	r1, r2
    a426:	8069      	strh	r1, [r5, #2]
    a428:	8922      	ldrh	r2, [r4, #8]
    a42a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a42e:	428a      	cmp	r2, r1
    a430:	d200      	bcs.n	a434 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a432:	4611      	mov	r1, r2
    a434:	f640 0248 	movw	r2, #2120	; 0x848
    a438:	80a9      	strh	r1, [r5, #4]
    a43a:	4291      	cmp	r1, r2
    a43c:	d300      	bcc.n	a440 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a43e:	4611      	mov	r1, r2
    a440:	80a9      	strh	r1, [r5, #4]
    a442:	4290      	cmp	r0, r2
    a444:	d200      	bcs.n	a448 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a446:	4602      	mov	r2, r0
    a448:	812a      	strh	r2, [r5, #8]
    a44a:	f885 8000 	strb.w	r8, [r5]
    a44e:	706f      	strb	r7, [r5, #1]
    a450:	4630      	mov	r0, r6
    a452:	e7cd      	b.n	a3f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a454:	b510      	push	{r4, lr}
    a456:	4604      	mov	r4, r0
    a458:	88c1      	ldrh	r1, [r0, #6]
    a45a:	8880      	ldrh	r0, [r0, #4]
    a45c:	f004 fc5d 	bl	ed1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a460:	2800      	cmp	r0, #0
    a462:	d10f      	bne.n	a484 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a464:	8861      	ldrh	r1, [r4, #2]
    a466:	8820      	ldrh	r0, [r4, #0]
    a468:	f004 fc57 	bl	ed1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a46c:	2800      	cmp	r0, #0
    a46e:	d109      	bne.n	a484 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a470:	4805      	ldr	r0, [pc, #20]	; (a488 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a472:	88a1      	ldrh	r1, [r4, #4]
    a474:	8141      	strh	r1, [r0, #10]
    a476:	8821      	ldrh	r1, [r4, #0]
    a478:	80c1      	strh	r1, [r0, #6]
    a47a:	88e1      	ldrh	r1, [r4, #6]
    a47c:	8181      	strh	r1, [r0, #12]
    a47e:	8861      	ldrh	r1, [r4, #2]
    a480:	8101      	strh	r1, [r0, #8]
    a482:	2000      	movs	r0, #0
    a484:	bd10      	pop	{r4, pc}
    a486:	0000      	.short	0x0000
    a488:	20000fdc 	.word	0x20000fdc
    a48c:	0b122b0b 	.word	0x0b122b0b
    a490:	122b0059 	.word	0x122b0059
    a494:	05060708 	.word	0x05060708
    a498:	00020304 	.word	0x00020304
    a49c:	f0f4f8fc 	.word	0xf0f4f8fc
    a4a0:	0304d8ec 	.word	0x0304d8ec
    a4a4:	f4f8fc00 	.word	0xf4f8fc00
    a4a8:	00d8ecf0 	.word	0x00d8ecf0

0000a4ac <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a4ac:	b510      	push	{r4, lr}
    a4ae:	4604      	mov	r4, r0
    a4b0:	4804      	ldr	r0, [pc, #16]	; (a4c4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a4b2:	7004      	strb	r4, [r0, #0]
    a4b4:	6840      	ldr	r0, [r0, #4]
    a4b6:	f004 fd85 	bl	efc4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a4ba:	4620      	mov	r0, r4
    a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4c0:	f7ff bda0 	b.w	a004 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a4c4:	20000204 	.word	0x20000204

0000a4c8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a4c8:	b510      	push	{r4, lr}
    a4ca:	4c07      	ldr	r4, [pc, #28]	; (a4e8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a4cc:	68a0      	ldr	r0, [r4, #8]
    a4ce:	f004 fd79 	bl	efc4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a4d2:	68e0      	ldr	r0, [r4, #12]
    a4d4:	f004 fd76 	bl	efc4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a4d8:	f002 fbdc 	bl	cc94 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a4dc:	f7fa ffd2 	bl	5484 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4e4:	f7ff bd94 	b.w	a010 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a4e8:	20000204 	.word	0x20000204

0000a4ec <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a4ec:	b500      	push	{lr}
    a4ee:	4905      	ldr	r1, [pc, #20]	; (a504 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a4f0:	4805      	ldr	r0, [pc, #20]	; (a508 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a4f2:	f004 fd33 	bl	ef5c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a4f6:	4804      	ldr	r0, [pc, #16]	; (a508 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a4f8:	4904      	ldr	r1, [pc, #16]	; (a50c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a4fa:	1d00      	adds	r0, r0, #4
    a4fc:	f85d eb04 	ldr.w	lr, [sp], #4
    a500:	f004 bd2c 	b.w	ef5c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a504:	20000214 	.word	0x20000214
    a508:	20000208 	.word	0x20000208
    a50c:	2000021c 	.word	0x2000021c

0000a510 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a510:	b500      	push	{lr}
    a512:	4908      	ldr	r1, [pc, #32]	; (a534 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a514:	4808      	ldr	r0, [pc, #32]	; (a538 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a516:	f004 fd21 	bl	ef5c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a51a:	4807      	ldr	r0, [pc, #28]	; (a538 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a51c:	4907      	ldr	r1, [pc, #28]	; (a53c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a51e:	1d00      	adds	r0, r0, #4
    a520:	f004 fd1c 	bl	ef5c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a524:	4804      	ldr	r0, [pc, #16]	; (a538 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a526:	4906      	ldr	r1, [pc, #24]	; (a540 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a528:	3008      	adds	r0, #8
    a52a:	f85d eb04 	ldr.w	lr, [sp], #4
    a52e:	f004 bd15 	b.w	ef5c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a532:	0000      	.short	0x0000
    a534:	20000240 	.word	0x20000240
    a538:	20000208 	.word	0x20000208
    a53c:	20000248 	.word	0x20000248
    a540:	20000238 	.word	0x20000238

0000a544 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a544:	4801      	ldr	r0, [pc, #4]	; (a54c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a546:	7840      	ldrb	r0, [r0, #1]
    a548:	4770      	bx	lr
    a54a:	0000      	.short	0x0000
    a54c:	20000204 	.word	0x20000204
    a550:	b510      	push	{r4, lr}
    a552:	f7fb fed5 	bl	6300 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a556:	480c      	ldr	r0, [pc, #48]	; (a588 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>)
    a558:	7800      	ldrb	r0, [r0, #0]
    a55a:	f7fc fd1d 	bl	6f98 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a55e:	480b      	ldr	r0, [pc, #44]	; (a58c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x48>)
    a560:	f7fb feb4 	bl	62cc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a564:	490b      	ldr	r1, [pc, #44]	; (a594 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a566:	480a      	ldr	r0, [pc, #40]	; (a590 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x4c>)
    a568:	2200      	movs	r2, #0
    a56a:	6008      	str	r0, [r1, #0]
    a56c:	490b      	ldr	r1, [pc, #44]	; (a59c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x58>)
    a56e:	480a      	ldr	r0, [pc, #40]	; (a598 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a570:	6008      	str	r0, [r1, #0]
    a572:	2101      	movs	r1, #1
    a574:	4610      	mov	r0, r2
    a576:	f002 faf8 	bl	cb6a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a57a:	2800      	cmp	r0, #0
    a57c:	d103      	bne.n	a586 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x42>
    a57e:	21d3      	movs	r1, #211	; 0xd3
    a580:	2001      	movs	r0, #1
    a582:	f7f9 fb25 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a586:	bd10      	pop	{r4, pc}
    a588:	20000204 	.word	0x20000204
    a58c:	200011cd 	.word	0x200011cd
    a590:	000060d5 	.word	0x000060d5
    a594:	20000224 	.word	0x20000224
    a598:	00005c81 	.word	0x00005c81
    a59c:	20000228 	.word	0x20000228
    a5a0:	b510      	push	{r4, lr}
    a5a2:	4c0d      	ldr	r4, [pc, #52]	; (a5d8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    a5a4:	2001      	movs	r0, #1
    a5a6:	7060      	strb	r0, [r4, #1]
    a5a8:	f7fb feda 	bl	6360 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a5ac:	7820      	ldrb	r0, [r4, #0]
    a5ae:	f7fd fcff 	bl	7fb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a5b2:	f002 fb5d 	bl	cc70 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a5b6:	4909      	ldr	r1, [pc, #36]	; (a5dc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    a5b8:	7820      	ldrb	r0, [r4, #0]
    a5ba:	f7fa f9ef 	bl	499c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a5be:	f004 fce9 	bl	ef94 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    a5c2:	4908      	ldr	r1, [pc, #32]	; (a5e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    a5c4:	4806      	ldr	r0, [pc, #24]	; (a5e0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    a5c6:	6008      	str	r0, [r1, #0]
    a5c8:	4908      	ldr	r1, [pc, #32]	; (a5ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa8>)
    a5ca:	4807      	ldr	r0, [pc, #28]	; (a5e8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    a5cc:	6008      	str	r0, [r1, #0]
    a5ce:	4909      	ldr	r1, [pc, #36]	; (a5f4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xb0>)
    a5d0:	4807      	ldr	r0, [pc, #28]	; (a5f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xac>)
    a5d2:	6008      	str	r0, [r1, #0]
    a5d4:	bd10      	pop	{r4, pc}
    a5d6:	0000      	.short	0x0000
    a5d8:	20000204 	.word	0x20000204
    a5dc:	200011cd 	.word	0x200011cd
    a5e0:	00004949 	.word	0x00004949
    a5e4:	20000234 	.word	0x20000234
    a5e8:	00007d31 	.word	0x00007d31
    a5ec:	20000230 	.word	0x20000230
    a5f0:	00005cf5 	.word	0x00005cf5
    a5f4:	2000022c 	.word	0x2000022c

0000a5f8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a5f8:	2101      	movs	r1, #1
    a5fa:	4081      	lsls	r1, r0
    a5fc:	4802      	ldr	r0, [pc, #8]	; (a608 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a5fe:	6802      	ldr	r2, [r0, #0]
    a600:	4311      	orrs	r1, r2
    a602:	6001      	str	r1, [r0, #0]
    a604:	4770      	bx	lr
    a606:	0000      	.short	0x0000
    a608:	20000250 	.word	0x20000250

0000a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a60c:	4801      	ldr	r0, [pc, #4]	; (a614 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a60e:	6800      	ldr	r0, [r0, #0]
    a610:	4770      	bx	lr
    a612:	0000      	.short	0x0000
    a614:	20000250 	.word	0x20000250

0000a618 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a618:	4803      	ldr	r0, [pc, #12]	; (a628 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a61a:	8800      	ldrh	r0, [r0, #0]
    a61c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a620:	0040      	lsls	r0, r0, #1
    a622:	1c40      	adds	r0, r0, #1
    a624:	4770      	bx	lr
    a626:	0000      	.short	0x0000
    a628:	20000250 	.word	0x20000250

0000a62c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a62c:	b570      	push	{r4, r5, r6, lr}
    a62e:	4605      	mov	r5, r0
    a630:	4616      	mov	r6, r2
    a632:	460c      	mov	r4, r1
    a634:	2002      	movs	r0, #2
    a636:	f000 f999 	bl	a96c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a63a:	4906      	ldr	r1, [pc, #24]	; (a654 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a63c:	2001      	movs	r0, #1
    a63e:	1ef6      	subs	r6, r6, #3
    a640:	7008      	strb	r0, [r1, #0]
    a642:	4805      	ldr	r0, [pc, #20]	; (a658 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a644:	6006      	str	r6, [r0, #0]
    a646:	4804      	ldr	r0, [pc, #16]	; (a658 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a648:	3808      	subs	r0, #8
    a64a:	6005      	str	r5, [r0, #0]
    a64c:	1f00      	subs	r0, r0, #4
    a64e:	6004      	str	r4, [r0, #0]
    a650:	bd70      	pop	{r4, r5, r6, pc}
    a652:	0000      	.short	0x0000
    a654:	20000297 	.word	0x20000297
    a658:	4000f510 	.word	0x4000f510

0000a65c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a65c:	b510      	push	{r4, lr}
    a65e:	4c0c      	ldr	r4, [pc, #48]	; (a690 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a660:	7820      	ldrb	r0, [r4, #0]
    a662:	b180      	cbz	r0, a686 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a664:	490b      	ldr	r1, [pc, #44]	; (a694 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a666:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a66a:	6008      	str	r0, [r1, #0]
    a66c:	f000 f86a 	bl	a744 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a670:	2100      	movs	r1, #0
    a672:	b120      	cbz	r0, a67e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a674:	2001      	movs	r0, #1
    a676:	7060      	strb	r0, [r4, #1]
    a678:	4807      	ldr	r0, [pc, #28]	; (a698 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a67a:	6800      	ldr	r0, [r0, #0]
    a67c:	e001      	b.n	a682 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a67e:	7061      	strb	r1, [r4, #1]
    a680:	2010      	movs	r0, #16
    a682:	70a0      	strb	r0, [r4, #2]
    a684:	7021      	strb	r1, [r4, #0]
    a686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a68a:	2000      	movs	r0, #0
    a68c:	f000 b96e 	b.w	a96c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a690:	20000297 	.word	0x20000297
    a694:	4001f508 	.word	0x4001f508
    a698:	4000f400 	.word	0x4000f400

0000a69c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a69c:	b510      	push	{r4, lr}
    a69e:	2002      	movs	r0, #2
    a6a0:	f000 f964 	bl	a96c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a6a4:	4904      	ldr	r1, [pc, #16]	; (a6b8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a6a6:	2001      	movs	r0, #1
    a6a8:	7008      	strb	r0, [r1, #0]
    a6aa:	f000 f859 	bl	a760 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a6ae:	4903      	ldr	r1, [pc, #12]	; (a6bc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a6b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a6b4:	6008      	str	r0, [r1, #0]
    a6b6:	bd10      	pop	{r4, pc}
    a6b8:	20000297 	.word	0x20000297
    a6bc:	4001f504 	.word	0x4001f504

0000a6c0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a6c0:	4803      	ldr	r0, [pc, #12]	; (a6d0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a6c2:	2100      	movs	r1, #0
    a6c4:	7001      	strb	r1, [r0, #0]
    a6c6:	7041      	strb	r1, [r0, #1]
    a6c8:	2110      	movs	r1, #16
    a6ca:	7081      	strb	r1, [r0, #2]
    a6cc:	4770      	bx	lr
    a6ce:	0000      	.short	0x0000
    a6d0:	20000297 	.word	0x20000297

0000a6d4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a6d4:	4807      	ldr	r0, [pc, #28]	; (a6f4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a6d6:	b510      	push	{r4, lr}
    a6d8:	7801      	ldrb	r1, [r0, #0]
    a6da:	b141      	cbz	r1, a6ee <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a6dc:	f000 f832 	bl	a744 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a6e0:	b118      	cbz	r0, a6ea <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a6e2:	4805      	ldr	r0, [pc, #20]	; (a6f8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a6e4:	6800      	ldr	r0, [r0, #0]
    a6e6:	b2c0      	uxtb	r0, r0
    a6e8:	bd10      	pop	{r4, pc}
    a6ea:	2010      	movs	r0, #16
    a6ec:	bd10      	pop	{r4, pc}
    a6ee:	7880      	ldrb	r0, [r0, #2]
    a6f0:	bd10      	pop	{r4, pc}
    a6f2:	0000      	.short	0x0000
    a6f4:	20000297 	.word	0x20000297
    a6f8:	4000f400 	.word	0x4000f400

0000a6fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a6fc:	4808      	ldr	r0, [pc, #32]	; (a720 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a6fe:	b510      	push	{r4, lr}
    a700:	7801      	ldrb	r1, [r0, #0]
    a702:	b159      	cbz	r1, a71c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a704:	4807      	ldr	r0, [pc, #28]	; (a724 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a706:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a70a:	b128      	cbz	r0, a718 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a70c:	f000 f80c 	bl	a728 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a710:	2800      	cmp	r0, #0
    a712:	d000      	beq.n	a716 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a714:	2001      	movs	r0, #1
    a716:	bd10      	pop	{r4, pc}
    a718:	2002      	movs	r0, #2
    a71a:	bd10      	pop	{r4, pc}
    a71c:	7840      	ldrb	r0, [r0, #1]
    a71e:	bd10      	pop	{r4, pc}
    a720:	20000297 	.word	0x20000297
    a724:	4000f000 	.word	0x4000f000
    a728:	4805      	ldr	r0, [pc, #20]	; (a740 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a72a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a72e:	b111      	cbz	r1, a736 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a730:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a734:	b108      	cbz	r0, a73a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a736:	2000      	movs	r0, #0
    a738:	4770      	bx	lr
    a73a:	2001      	movs	r0, #1
    a73c:	4770      	bx	lr
    a73e:	0000      	.short	0x0000
    a740:	4000f000 	.word	0x4000f000
    a744:	4805      	ldr	r0, [pc, #20]	; (a75c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a746:	b510      	push	{r4, lr}
    a748:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a74c:	b120      	cbz	r0, a758 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a74e:	f7ff ffeb 	bl	a728 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a752:	b108      	cbz	r0, a758 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a754:	2001      	movs	r0, #1
    a756:	bd10      	pop	{r4, pc}
    a758:	2000      	movs	r0, #0
    a75a:	bd10      	pop	{r4, pc}
    a75c:	4000f000 	.word	0x4000f000
    a760:	4804      	ldr	r0, [pc, #16]	; (a774 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a762:	2100      	movs	r1, #0
    a764:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a768:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a76c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a770:	4770      	bx	lr
    a772:	0000      	.short	0x0000
    a774:	4000f000 	.word	0x4000f000

0000a778 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a778:	4a08      	ldr	r2, [pc, #32]	; (a79c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a77a:	b510      	push	{r4, lr}
    a77c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a780:	4907      	ldr	r1, [pc, #28]	; (a7a0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a782:	4610      	mov	r0, r2
    a784:	f7f9 f918 	bl	39b8 <mpsl_fem_lna_configuration_set>
    a788:	2800      	cmp	r0, #0
    a78a:	d005      	beq.n	a798 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a78c:	1c40      	adds	r0, r0, #1
    a78e:	d003      	beq.n	a798 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a790:	2170      	movs	r1, #112	; 0x70
    a792:	2040      	movs	r0, #64	; 0x40
    a794:	f7f9 fa1c 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a798:	bd10      	pop	{r4, pc}
    a79a:	0000      	.short	0x0000
    a79c:	20000254 	.word	0x20000254
    a7a0:	0000a7d0 	.word	0x0000a7d0

0000a7a4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a7a4:	4a08      	ldr	r2, [pc, #32]	; (a7c8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a7a6:	b510      	push	{r4, lr}
    a7a8:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a7ac:	4907      	ldr	r1, [pc, #28]	; (a7cc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a7ae:	4610      	mov	r0, r2
    a7b0:	f7f9 f90e 	bl	39d0 <mpsl_fem_pa_configuration_set>
    a7b4:	2800      	cmp	r0, #0
    a7b6:	d005      	beq.n	a7c4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a7b8:	1c40      	adds	r0, r0, #1
    a7ba:	d003      	beq.n	a7c4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a7bc:	2165      	movs	r1, #101	; 0x65
    a7be:	2040      	movs	r0, #64	; 0x40
    a7c0:	f7f9 fa06 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7c4:	bd10      	pop	{r4, pc}
    a7c6:	0000      	.short	0x0000
    a7c8:	20000254 	.word	0x20000254
    a7cc:	0000a7d0 	.word	0x0000a7d0
    a7d0:	00000001 	.word	0x00000001
    a7d4:	40001110 	.word	0x40001110
	...

0000a7e8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    a7e8:	b570      	push	{r4, r5, r6, lr}
    a7ea:	4606      	mov	r6, r0
    a7ec:	4614      	mov	r4, r2
    a7ee:	460d      	mov	r5, r1
    a7f0:	2001      	movs	r0, #1
    a7f2:	f000 f8bb 	bl	a96c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a7f6:	4803      	ldr	r0, [pc, #12]	; (a804 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    a7f8:	6006      	str	r6, [r0, #0]
    a7fa:	1d00      	adds	r0, r0, #4
    a7fc:	6004      	str	r4, [r0, #0]
    a7fe:	1d00      	adds	r0, r0, #4
    a800:	6005      	str	r5, [r0, #0]
    a802:	bd70      	pop	{r4, r5, r6, pc}
    a804:	4000f508 	.word	0x4000f508

0000a808 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a808:	480a      	ldr	r0, [pc, #40]	; (a834 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    a80a:	7801      	ldrb	r1, [r0, #0]
    a80c:	b171      	cbz	r1, a82c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    a80e:	4a0a      	ldr	r2, [pc, #40]	; (a838 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a810:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    a814:	6011      	str	r1, [r2, #0]
    a816:	4909      	ldr	r1, [pc, #36]	; (a83c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a818:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    a81c:	2100      	movs	r1, #0
    a81e:	b11a      	cbz	r2, a828 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a820:	4a07      	ldr	r2, [pc, #28]	; (a840 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a822:	6812      	ldr	r2, [r2, #0]
    a824:	7042      	strb	r2, [r0, #1]
    a826:	e000      	b.n	a82a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a828:	7041      	strb	r1, [r0, #1]
    a82a:	7001      	strb	r1, [r0, #0]
    a82c:	2000      	movs	r0, #0
    a82e:	f000 b89d 	b.w	a96c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a832:	0000      	.short	0x0000
    a834:	2000029a 	.word	0x2000029a
    a838:	4001f508 	.word	0x4001f508
    a83c:	4000f000 	.word	0x4000f000
    a840:	4000f400 	.word	0x4000f400

0000a844 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    a844:	b570      	push	{r4, r5, r6, lr}
    a846:	4604      	mov	r4, r0
    a848:	4816      	ldr	r0, [pc, #88]	; (a8a4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    a84a:	460e      	mov	r6, r1
    a84c:	2501      	movs	r5, #1
    a84e:	7005      	strb	r5, [r0, #0]
    a850:	4915      	ldr	r1, [pc, #84]	; (a8a8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a852:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    a856:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a85a:	6008      	str	r0, [r1, #0]
    a85c:	f001 f93d 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a860:	b930      	cbnz	r0, a870 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    a862:	4811      	ldr	r0, [pc, #68]	; (a8a8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a864:	3014      	adds	r0, #20
    a866:	6801      	ldr	r1, [r0, #0]
    a868:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a86c:	4331      	orrs	r1, r6
    a86e:	6001      	str	r1, [r0, #0]
    a870:	490e      	ldr	r1, [pc, #56]	; (a8ac <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    a872:	2200      	movs	r2, #0
    a874:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    a878:	4b0d      	ldr	r3, [pc, #52]	; (a8b0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a87a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a87e:	6018      	str	r0, [r3, #0]
    a880:	b12c      	cbz	r4, a88e <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    a882:	2c01      	cmp	r4, #1
    a884:	d007      	beq.n	a896 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    a886:	2185      	movs	r1, #133	; 0x85
    a888:	203c      	movs	r0, #60	; 0x3c
    a88a:	f7f9 f9a1 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a88e:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    a892:	600d      	str	r5, [r1, #0]
    a894:	bd70      	pop	{r4, r5, r6, pc}
    a896:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    a89a:	600d      	str	r5, [r1, #0]
    a89c:	4904      	ldr	r1, [pc, #16]	; (a8b0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a89e:	1f09      	subs	r1, r1, #4
    a8a0:	6008      	str	r0, [r1, #0]
    a8a2:	bd70      	pop	{r4, r5, r6, pc}
    a8a4:	2000029a 	.word	0x2000029a
    a8a8:	4000f504 	.word	0x4000f504
    a8ac:	4000f000 	.word	0x4000f000
    a8b0:	4001f508 	.word	0x4001f508

0000a8b4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a8b4:	4802      	ldr	r0, [pc, #8]	; (a8c0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a8b6:	2100      	movs	r1, #0
    a8b8:	7001      	strb	r1, [r0, #0]
    a8ba:	7041      	strb	r1, [r0, #1]
    a8bc:	4770      	bx	lr
    a8be:	0000      	.short	0x0000
    a8c0:	2000029a 	.word	0x2000029a

0000a8c4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a8c4:	4806      	ldr	r0, [pc, #24]	; (a8e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a8c6:	7801      	ldrb	r1, [r0, #0]
    a8c8:	b141      	cbz	r1, a8dc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a8ca:	4806      	ldr	r0, [pc, #24]	; (a8e4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a8cc:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a8d0:	2800      	cmp	r0, #0
    a8d2:	d002      	beq.n	a8da <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a8d4:	4804      	ldr	r0, [pc, #16]	; (a8e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a8d6:	6800      	ldr	r0, [r0, #0]
    a8d8:	b2c0      	uxtb	r0, r0
    a8da:	4770      	bx	lr
    a8dc:	7840      	ldrb	r0, [r0, #1]
    a8de:	4770      	bx	lr
    a8e0:	2000029a 	.word	0x2000029a
    a8e4:	4000f000 	.word	0x4000f000
    a8e8:	4000f400 	.word	0x4000f400

0000a8ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a8ec:	4901      	ldr	r1, [pc, #4]	; (a8f4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a8ee:	2001      	movs	r0, #1
    a8f0:	6088      	str	r0, [r1, #8]
    a8f2:	4770      	bx	lr
    a8f4:	4000f000 	.word	0x4000f000

0000a8f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8fc:	2800      	cmp	r0, #0
    a8fe:	d02c      	beq.n	a95a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a900:	4817      	ldr	r0, [pc, #92]	; (a960 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    a902:	7800      	ldrb	r0, [r0, #0]
    a904:	b1b0      	cbz	r0, a934 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a906:	4d17      	ldr	r5, [pc, #92]	; (a964 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a908:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a90c:	2800      	cmp	r0, #0
    a90e:	d124      	bne.n	a95a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a910:	2702      	movs	r7, #2
    a912:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a916:	4c14      	ldr	r4, [pc, #80]	; (a968 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a918:	6820      	ldr	r0, [r4, #0]
    a91a:	43c0      	mvns	r0, r0
    a91c:	f340 1600 	sbfx	r6, r0, #4, #1
    a920:	6820      	ldr	r0, [r4, #0]
    a922:	f040 0010 	orr.w	r0, r0, #16
    a926:	6020      	str	r0, [r4, #0]
    a928:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a92c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a930:	1c76      	adds	r6, r6, #1
    a932:	e007      	b.n	a944 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    a934:	21fd      	movs	r1, #253	; 0xfd
    a936:	203c      	movs	r0, #60	; 0x3c
    a938:	f7f9 f94a 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a93c:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a940:	f7f8 ffec 	bl	391c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a944:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a948:	2800      	cmp	r0, #0
    a94a:	d0f7      	beq.n	a93c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    a94c:	b91e      	cbnz	r6, a956 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    a94e:	6820      	ldr	r0, [r4, #0]
    a950:	f020 0010 	bic.w	r0, r0, #16
    a954:	6020      	str	r0, [r4, #0]
    a956:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a95e:	0000      	.short	0x0000
    a960:	2000029a 	.word	0x2000029a
    a964:	4000f000 	.word	0x4000f000
    a968:	e000ed10 	.word	0xe000ed10

0000a96c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a96c:	b510      	push	{r4, lr}
    a96e:	4604      	mov	r4, r0
    a970:	f000 f822 	bl	a9b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a974:	2c00      	cmp	r4, #0
    a976:	d017      	beq.n	a9a8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a978:	4a0c      	ldr	r2, [pc, #48]	; (a9ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a97a:	480c      	ldr	r0, [pc, #48]	; (a9ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a97c:	490c      	ldr	r1, [pc, #48]	; (a9b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a97e:	3214      	adds	r2, #20
    a980:	4b0c      	ldr	r3, [pc, #48]	; (a9b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a982:	2c01      	cmp	r4, #1
    a984:	d005      	beq.n	a992 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a986:	2c02      	cmp	r4, #2
    a988:	d008      	beq.n	a99c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a98a:	217d      	movs	r1, #125	; 0x7d
    a98c:	203d      	movs	r0, #61	; 0x3d
    a98e:	f7f9 f91f 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a992:	2402      	movs	r4, #2
    a994:	6004      	str	r4, [r0, #0]
    a996:	6011      	str	r1, [r2, #0]
    a998:	0620      	lsls	r0, r4, #24
    a99a:	e004      	b.n	a9a6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a99c:	2403      	movs	r4, #3
    a99e:	6004      	str	r4, [r0, #0]
    a9a0:	6011      	str	r1, [r2, #0]
    a9a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a9a6:	6018      	str	r0, [r3, #0]
    a9a8:	bd10      	pop	{r4, pc}
    a9aa:	0000      	.short	0x0000
    a9ac:	4000f500 	.word	0x4000f500
    a9b0:	200012cf 	.word	0x200012cf
    a9b4:	4001f504 	.word	0x4001f504
    a9b8:	4804      	ldr	r0, [pc, #16]	; (a9cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a9ba:	2100      	movs	r1, #0
    a9bc:	6001      	str	r1, [r0, #0]
    a9be:	6001      	str	r1, [r0, #0]
    a9c0:	4903      	ldr	r1, [pc, #12]	; (a9d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a9c2:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a9c6:	6008      	str	r0, [r1, #0]
    a9c8:	4770      	bx	lr
    a9ca:	0000      	.short	0x0000
    a9cc:	4000f500 	.word	0x4000f500
    a9d0:	4001f508 	.word	0x4001f508

0000a9d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a9d4:	4805      	ldr	r0, [pc, #20]	; (a9ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a9d6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a9da:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a9de:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a9e2:	4903      	ldr	r1, [pc, #12]	; (a9f0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    a9e4:	2000      	movs	r0, #0
    a9e6:	6008      	str	r0, [r1, #0]
    a9e8:	4770      	bx	lr
    a9ea:	0000      	.short	0x0000
    a9ec:	40001000 	.word	0x40001000
    a9f0:	40001560 	.word	0x40001560

0000a9f4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a9f4:	4904      	ldr	r1, [pc, #16]	; (aa08 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a9f6:	6008      	str	r0, [r1, #0]
    a9f8:	4804      	ldr	r0, [pc, #16]	; (aa0c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    a9fa:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a9fe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    aa02:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    aa06:	4770      	bx	lr
    aa08:	40001560 	.word	0x40001560
    aa0c:	40001000 	.word	0x40001000

0000aa10 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    aa10:	4801      	ldr	r0, [pc, #4]	; (aa18 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    aa12:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    aa16:	4770      	bx	lr
    aa18:	20000dd0 	.word	0x20000dd0

0000aa1c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    aa1c:	4a01      	ldr	r2, [pc, #4]	; (aa24 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    aa1e:	7051      	strb	r1, [r2, #1]
    aa20:	7010      	strb	r0, [r2, #0]
    aa22:	4770      	bx	lr
    aa24:	20000dd0 	.word	0x20000dd0

0000aa28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa2a:	4c1e      	ldr	r4, [pc, #120]	; (aaa4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    aa2c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    aa30:	2710      	movs	r7, #16
    aa32:	f3c0 1600 	ubfx	r6, r0, #4, #1
    aa36:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    aa3a:	2002      	movs	r0, #2
    aa3c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    aa40:	4819      	ldr	r0, [pc, #100]	; (aaa8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    aa42:	2500      	movs	r5, #0
    aa44:	491a      	ldr	r1, [pc, #104]	; (aab0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    aa46:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    aa4a:	4818      	ldr	r0, [pc, #96]	; (aaac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    aa4c:	6008      	str	r0, [r1, #0]
    aa4e:	4819      	ldr	r0, [pc, #100]	; (aab4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    aa50:	6800      	ldr	r0, [r0, #0]
    aa52:	b1b0      	cbz	r0, aa82 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    aa54:	20ff      	movs	r0, #255	; 0xff
    aa56:	f88d 0000 	strb.w	r0, [sp]
    aa5a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    aa5e:	2001      	movs	r0, #1
    aa60:	6120      	str	r0, [r4, #16]
    aa62:	e004      	b.n	aa6e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    aa64:	f89d 0000 	ldrb.w	r0, [sp]
    aa68:	1e40      	subs	r0, r0, #1
    aa6a:	f88d 0000 	strb.w	r0, [sp]
    aa6e:	f89d 0000 	ldrb.w	r0, [sp]
    aa72:	b118      	cbz	r0, aa7c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    aa74:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    aa78:	2800      	cmp	r0, #0
    aa7a:	d0f3      	beq.n	aa64 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    aa7c:	f89d 0000 	ldrb.w	r0, [sp]
    aa80:	b150      	cbz	r0, aa98 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    aa82:	f000 fce9 	bl	b458 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    aa86:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    aa8a:	f000 fe73 	bl	b774 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    aa8e:	2e00      	cmp	r6, #0
    aa90:	d001      	beq.n	aa96 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    aa92:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    aa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa98:	f240 71a3 	movw	r1, #1955	; 0x7a3
    aa9c:	203e      	movs	r0, #62	; 0x3e
    aa9e:	f7f9 f897 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaa2:	0000      	.short	0x0000
    aaa4:	40001000 	.word	0x40001000
    aaa8:	20000dd0 	.word	0x20000dd0
    aaac:	0c0e0000 	.word	0x0c0e0000
    aab0:	4001f508 	.word	0x4001f508
    aab4:	40001550 	.word	0x40001550

0000aab8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    aab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aabc:	4c1f      	ldr	r4, [pc, #124]	; (ab3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    aabe:	4607      	mov	r7, r0
    aac0:	4688      	mov	r8, r1
    aac2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    aac6:	07c1      	lsls	r1, r0, #31
    aac8:	d018      	beq.n	aafc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    aaca:	4a1d      	ldr	r2, [pc, #116]	; (ab40 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    aacc:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    aad0:	6011      	str	r1, [r2, #0]
    aad2:	4d1c      	ldr	r5, [pc, #112]	; (ab44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    aad4:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    aad8:	f041 0101 	orr.w	r1, r1, #1
    aadc:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    aae0:	f040 0002 	orr.w	r0, r0, #2
    aae4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    aae8:	4640      	mov	r0, r8
    aaea:	f000 fea9 	bl	b840 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    aaee:	f000 fc81 	bl	b3f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    aaf2:	2601      	movs	r6, #1
    aaf4:	b13f      	cbz	r7, ab06 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    aaf6:	2f01      	cmp	r7, #1
    aaf8:	d00e      	beq.n	ab18 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    aafa:	e016      	b.n	ab2a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aafc:	f240 6135 	movw	r1, #1589	; 0x635
    ab00:	203e      	movs	r0, #62	; 0x3e
    ab02:	f7f9 f865 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab06:	4640      	mov	r0, r8
    ab08:	f000 fc94 	bl	b434 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ab0c:	4640      	mov	r0, r8
    ab0e:	f000 fc55 	bl	b3bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    ab12:	72e6      	strb	r6, [r4, #11]
    ab14:	602e      	str	r6, [r5, #0]
    ab16:	e008      	b.n	ab2a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    ab18:	f000 fc94 	bl	b444 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    ab1c:	f000 fe02 	bl	b724 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    ab20:	2002      	movs	r0, #2
    ab22:	72e0      	strb	r0, [r4, #11]
    ab24:	f000 fd0a 	bl	b53c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    ab28:	606e      	str	r6, [r5, #4]
    ab2a:	4807      	ldr	r0, [pc, #28]	; (ab48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    ab2c:	64c6      	str	r6, [r0, #76]	; 0x4c
    ab2e:	4807      	ldr	r0, [pc, #28]	; (ab4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    ab30:	6801      	ldr	r1, [r0, #0]
    ab32:	4638      	mov	r0, r7
    ab34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ab38:	f004 bafd 	b.w	f136 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ab3c:	20000dd0 	.word	0x20000dd0
    ab40:	4001f504 	.word	0x4001f504
    ab44:	40001000 	.word	0x40001000
    ab48:	40008000 	.word	0x40008000
    ab4c:	4000854c 	.word	0x4000854c

0000ab50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ab54:	4d35      	ldr	r5, [pc, #212]	; (ac2c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    ab56:	4606      	mov	r6, r0
    ab58:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ab5c:	4689      	mov	r9, r1
    ab5e:	6028      	str	r0, [r5, #0]
    ab60:	4c33      	ldr	r4, [pc, #204]	; (ac30 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    ab62:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    ab66:	f040 0002 	orr.w	r0, r0, #2
    ab6a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    ab6e:	4608      	mov	r0, r1
    ab70:	f000 fe66 	bl	b840 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ab74:	f000 fc3e 	bl	b3f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    ab78:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ac34 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    ab7c:	2700      	movs	r7, #0
    ab7e:	b116      	cbz	r6, ab86 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    ab80:	2e01      	cmp	r6, #1
    ab82:	d027      	beq.n	abd4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    ab84:	e03f      	b.n	ac06 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ab86:	4648      	mov	r0, r9
    ab88:	f000 fc54 	bl	b434 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ab8c:	7a60      	ldrb	r0, [r4, #9]
    ab8e:	2801      	cmp	r0, #1
    ab90:	d105      	bne.n	ab9e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    ab92:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ab96:	f041 0108 	orr.w	r1, r1, #8
    ab9a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ab9e:	4648      	mov	r0, r9
    aba0:	f000 fc0c 	bl	b3bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    aba4:	2001      	movs	r0, #1
    aba6:	72e0      	strb	r0, [r4, #11]
    aba8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    abaa:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    abae:	6320      	str	r0, [r4, #48]	; 0x30
    abb0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    abb4:	6028      	str	r0, [r5, #0]
    abb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    abba:	f1b9 0f02 	cmp.w	r9, #2
    abbe:	d007      	beq.n	abd0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    abc0:	f640 0034 	movw	r0, #2100	; 0x834
    abc4:	f649 72ec 	movw	r2, #40940	; 0x9fec
    abc8:	4410      	add	r0, r2
    abca:	fbb0 f7f1 	udiv	r7, r0, r1
    abce:	e01a      	b.n	ac06 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    abd0:	4608      	mov	r0, r1
    abd2:	e7f7      	b.n	abc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    abd4:	f000 fc36 	bl	b444 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    abd8:	f000 fda4 	bl	b724 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    abdc:	7a60      	ldrb	r0, [r4, #9]
    abde:	2801      	cmp	r0, #1
    abe0:	d105      	bne.n	abee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    abe2:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    abe6:	f041 0104 	orr.w	r1, r1, #4
    abea:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    abee:	2002      	movs	r0, #2
    abf0:	72e0      	strb	r0, [r4, #11]
    abf2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    abf4:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    abf8:	6320      	str	r0, [r4, #48]	; 0x30
    abfa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    abfe:	6028      	str	r0, [r5, #0]
    ac00:	2729      	movs	r7, #41	; 0x29
    ac02:	f000 fc9b 	bl	b53c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    ac06:	f000 fc85 	bl	b514 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    ac0a:	f000 fe40 	bl	b88e <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    ac0e:	6800      	ldr	r0, [r0, #0]
    ac10:	2801      	cmp	r0, #1
    ac12:	d006      	beq.n	ac22 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    ac14:	2100      	movs	r1, #0
    ac16:	4630      	mov	r0, r6
    ac18:	f004 fa8d 	bl	f136 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ac1c:	4638      	mov	r0, r7
    ac1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac22:	f7ff ff01 	bl	aa28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ac26:	2000      	movs	r0, #0
    ac28:	e7f9      	b.n	ac1e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    ac2a:	0000      	.short	0x0000
    ac2c:	4001f504 	.word	0x4001f504
    ac30:	20000dd0 	.word	0x20000dd0
    ac34:	40001000 	.word	0x40001000

0000ac38 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    ac38:	4a02      	ldr	r2, [pc, #8]	; (ac44 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    ac3a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    ac3c:	6003      	str	r3, [r0, #0]
    ac3e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    ac40:	6008      	str	r0, [r1, #0]
    ac42:	4770      	bx	lr
    ac44:	20000dd0 	.word	0x20000dd0

0000ac48 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    ac48:	4601      	mov	r1, r0
    ac4a:	2214      	movs	r2, #20
    ac4c:	4801      	ldr	r0, [pc, #4]	; (ac54 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    ac4e:	f000 bf96 	b.w	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ac52:	0000      	.short	0x0000
    ac54:	20000dbc 	.word	0x20000dbc

0000ac58 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ac58:	490e      	ldr	r1, [pc, #56]	; (ac94 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    ac5a:	b510      	push	{r4, lr}
    ac5c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    ac5e:	4282      	cmp	r2, r0
    ac60:	d302      	bcc.n	ac68 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ac62:	f640 0123 	movw	r1, #2083	; 0x823
    ac66:	e00a      	b.n	ac7e <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    ac68:	2201      	movs	r2, #1
    ac6a:	740a      	strb	r2, [r1, #16]
    ac6c:	6148      	str	r0, [r1, #20]
    ac6e:	490a      	ldr	r1, [pc, #40]	; (ac98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    ac70:	644a      	str	r2, [r1, #68]	; 0x44
    ac72:	4a0a      	ldr	r2, [pc, #40]	; (ac9c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ac74:	6813      	ldr	r3, [r2, #0]
    ac76:	4283      	cmp	r3, r0
    ac78:	d304      	bcc.n	ac84 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    ac7a:	f640 012c 	movw	r1, #2092	; 0x82c
    ac7e:	203e      	movs	r0, #62	; 0x3e
    ac80:	f7f8 ffa6 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac84:	2300      	movs	r3, #0
    ac86:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ac8a:	6010      	str	r0, [r2, #0]
    ac8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac90:	f000 bd56 	b.w	b740 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    ac94:	20000dd0 	.word	0x20000dd0
    ac98:	40008000 	.word	0x40008000
    ac9c:	40008544 	.word	0x40008544

0000aca0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    aca0:	b570      	push	{r4, r5, r6, lr}
    aca2:	4c10      	ldr	r4, [pc, #64]	; (ace4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    aca4:	4606      	mov	r6, r0
    aca6:	2002      	movs	r0, #2
    aca8:	7420      	strb	r0, [r4, #16]
    acaa:	2596      	movs	r5, #150	; 0x96
    acac:	f000 f866 	bl	ad7c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    acb0:	4602      	mov	r2, r0
    acb2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    acb6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    acba:	2801      	cmp	r0, #1
    acbc:	d00d      	beq.n	acda <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    acbe:	4628      	mov	r0, r5
    acc0:	f004 fa51 	bl	f166 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    acc4:	4908      	ldr	r1, [pc, #32]	; (ace8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    acc6:	6160      	str	r0, [r4, #20]
    acc8:	2000      	movs	r0, #0
    acca:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    acce:	6961      	ldr	r1, [r4, #20]
    acd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    acd2:	4408      	add	r0, r1
    acd4:	4905      	ldr	r1, [pc, #20]	; (acec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    acd6:	6008      	str	r0, [r1, #0]
    acd8:	bd70      	pop	{r4, r5, r6, pc}
    acda:	4633      	mov	r3, r6
    acdc:	4628      	mov	r0, r5
    acde:	f004 fa5e 	bl	f19e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ace2:	e7ef      	b.n	acc4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ace4:	20000dd0 	.word	0x20000dd0
    ace8:	40008000 	.word	0x40008000
    acec:	40008544 	.word	0x40008544

0000acf0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    acf0:	b510      	push	{r4, lr}
    acf2:	f000 ff0e 	bl	bb12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    acf6:	2800      	cmp	r0, #0
    acf8:	d006      	beq.n	ad08 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    acfa:	4804      	ldr	r0, [pc, #16]	; (ad0c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    acfc:	6801      	ldr	r1, [r0, #0]
    acfe:	f021 0101 	bic.w	r1, r1, #1
    ad02:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ad06:	6001      	str	r1, [r0, #0]
    ad08:	bd10      	pop	{r4, pc}
    ad0a:	0000      	.short	0x0000
    ad0c:	40001774 	.word	0x40001774

0000ad10 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ad10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad14:	2240      	movs	r2, #64	; 0x40
    ad16:	2100      	movs	r1, #0
    ad18:	4813      	ldr	r0, [pc, #76]	; (ad68 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    ad1a:	f000 ffaa 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ad1e:	f000 fd29 	bl	b774 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    ad22:	f000 feaf 	bl	ba84 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ad26:	4d11      	ldr	r5, [pc, #68]	; (ad6c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ad28:	4e10      	ldr	r6, [pc, #64]	; (ad6c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ad2a:	2400      	movs	r4, #0
    ad2c:	4f0f      	ldr	r7, [pc, #60]	; (ad6c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ad2e:	3508      	adds	r5, #8
    ad30:	3610      	adds	r6, #16
    ad32:	b928      	cbnz	r0, ad40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ad34:	f000 febd 	bl	bab2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ad38:	b910      	cbnz	r0, ad40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ad3a:	f000 fec4 	bl	bac6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ad3e:	b108      	cbz	r0, ad44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ad40:	2224      	movs	r2, #36	; 0x24
    ad42:	e006      	b.n	ad52 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ad44:	f000 feff 	bl	bb46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ad48:	b910      	cbnz	r0, ad50 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    ad4a:	f000 fef2 	bl	bb32 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ad4e:	b140      	cbz	r0, ad62 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    ad50:	2240      	movs	r2, #64	; 0x40
    ad52:	21ff      	movs	r1, #255	; 0xff
    ad54:	4638      	mov	r0, r7
    ad56:	f000 ff8c 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ad5a:	602c      	str	r4, [r5, #0]
    ad5c:	6034      	str	r4, [r6, #0]
    ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad62:	2238      	movs	r2, #56	; 0x38
    ad64:	e7f5      	b.n	ad52 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ad66:	0000      	.short	0x0000
    ad68:	20000dd0 	.word	0x20000dd0
    ad6c:	40000e00 	.word	0x40000e00

0000ad70 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    ad70:	4901      	ldr	r1, [pc, #4]	; (ad78 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    ad72:	7008      	strb	r0, [r1, #0]
    ad74:	4770      	bx	lr
    ad76:	0000      	.short	0x0000
    ad78:	2000026c 	.word	0x2000026c

0000ad7c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    ad7c:	4814      	ldr	r0, [pc, #80]	; (add0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    ad7e:	b510      	push	{r4, lr}
    ad80:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    ad84:	7ac0      	ldrb	r0, [r0, #11]
    ad86:	b141      	cbz	r1, ad9a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    ad88:	2902      	cmp	r1, #2
    ad8a:	d00b      	beq.n	ada4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    ad8c:	2802      	cmp	r0, #2
    ad8e:	d009      	beq.n	ada4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    ad90:	2901      	cmp	r1, #1
    ad92:	d00b      	beq.n	adac <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    ad94:	2801      	cmp	r0, #1
    ad96:	d009      	beq.n	adac <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    ad98:	e015      	b.n	adc6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    ad9a:	2800      	cmp	r0, #0
    ad9c:	d1f6      	bne.n	ad8c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    ad9e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    ada2:	e00d      	b.n	adc0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    ada4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ada8:	f000 bc56 	b.w	b658 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    adac:	4809      	ldr	r0, [pc, #36]	; (add4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    adae:	6800      	ldr	r0, [r0, #0]
    adb0:	f000 000f 	and.w	r0, r0, #15
    adb4:	2803      	cmp	r0, #3
    adb6:	d006      	beq.n	adc6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    adb8:	2804      	cmp	r0, #4
    adba:	d006      	beq.n	adca <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    adbc:	f240 210b 	movw	r1, #523	; 0x20b
    adc0:	203e      	movs	r0, #62	; 0x3e
    adc2:	f7f8 ff05 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adc6:	2001      	movs	r0, #1
    adc8:	bd10      	pop	{r4, pc}
    adca:	2002      	movs	r0, #2
    adcc:	bd10      	pop	{r4, pc}
    adce:	0000      	.short	0x0000
    add0:	20000dd0 	.word	0x20000dd0
    add4:	40001510 	.word	0x40001510

0000add8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    add8:	4801      	ldr	r0, [pc, #4]	; (ade0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    adda:	6a00      	ldr	r0, [r0, #32]
    addc:	4770      	bx	lr
    adde:	0000      	.short	0x0000
    ade0:	20000dd0 	.word	0x20000dd0

0000ade4 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    ade4:	4801      	ldr	r0, [pc, #4]	; (adec <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    ade6:	7f40      	ldrb	r0, [r0, #29]
    ade8:	4770      	bx	lr
    adea:	0000      	.short	0x0000
    adec:	20000dd0 	.word	0x20000dd0

0000adf0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    adf0:	4913      	ldr	r1, [pc, #76]	; (ae40 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    adf2:	b510      	push	{r4, lr}
    adf4:	6b08      	ldr	r0, [r1, #48]	; 0x30
    adf6:	4a13      	ldr	r2, [pc, #76]	; (ae44 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    adf8:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    adfc:	6010      	str	r0, [r2, #0]
    adfe:	2000      	movs	r0, #0
    ae00:	6308      	str	r0, [r1, #48]	; 0x30
    ae02:	7408      	strb	r0, [r1, #16]
    ae04:	6248      	str	r0, [r1, #36]	; 0x24
    ae06:	6208      	str	r0, [r1, #32]
    ae08:	490f      	ldr	r1, [pc, #60]	; (ae48 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    ae0a:	6008      	str	r0, [r1, #0]
    ae0c:	1f09      	subs	r1, r1, #4
    ae0e:	6008      	str	r0, [r1, #0]
    ae10:	1f09      	subs	r1, r1, #4
    ae12:	6008      	str	r0, [r1, #0]
    ae14:	490c      	ldr	r1, [pc, #48]	; (ae48 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    ae16:	1d09      	adds	r1, r1, #4
    ae18:	6008      	str	r0, [r1, #0]
    ae1a:	490c      	ldr	r1, [pc, #48]	; (ae4c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    ae1c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    ae20:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ae24:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    ae28:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    ae2c:	f7ff fdfc 	bl	aa28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ae30:	2001      	movs	r0, #1
    ae32:	f004 f94f 	bl	f0d4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ae36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae3a:	2001      	movs	r0, #1
    ae3c:	f004 b93d 	b.w	f0ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ae40:	20000dd0 	.word	0x20000dd0
    ae44:	4001f508 	.word	0x4001f508
    ae48:	40008548 	.word	0x40008548
    ae4c:	40008000 	.word	0x40008000

0000ae50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ae50:	b570      	push	{r4, r5, r6, lr}
    ae52:	2001      	movs	r0, #1
    ae54:	f004 f93e 	bl	f0d4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ae58:	4837      	ldr	r0, [pc, #220]	; (af38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ae5a:	2400      	movs	r4, #0
    ae5c:	6004      	str	r4, [r0, #0]
    ae5e:	2601      	movs	r6, #1
    ae60:	6006      	str	r6, [r0, #0]
    ae62:	f000 fe46 	bl	baf2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ae66:	4d35      	ldr	r5, [pc, #212]	; (af3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae68:	b118      	cbz	r0, ae72 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    ae6a:	6828      	ldr	r0, [r5, #0]
    ae6c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ae70:	6028      	str	r0, [r5, #0]
    ae72:	f000 fe32 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ae76:	b128      	cbz	r0, ae84 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    ae78:	6828      	ldr	r0, [r5, #0]
    ae7a:	4931      	ldr	r1, [pc, #196]	; (af40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ae7c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ae80:	4308      	orrs	r0, r1
    ae82:	6028      	str	r0, [r5, #0]
    ae84:	f000 fe45 	bl	bb12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ae88:	b138      	cbz	r0, ae9a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    ae8a:	482c      	ldr	r0, [pc, #176]	; (af3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae8c:	1d00      	adds	r0, r0, #4
    ae8e:	6801      	ldr	r1, [r0, #0]
    ae90:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ae94:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ae98:	6001      	str	r1, [r0, #0]
    ae9a:	4928      	ldr	r1, [pc, #160]	; (af3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae9c:	4829      	ldr	r0, [pc, #164]	; (af44 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ae9e:	313c      	adds	r1, #60	; 0x3c
    aea0:	6008      	str	r0, [r1, #0]
    aea2:	f7f8 fda1 	bl	39e8 <mpsl_fem_device_config_254_apply_get>
    aea6:	b140      	cbz	r0, aeba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    aea8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    aeac:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    aeb0:	1c41      	adds	r1, r0, #1
    aeb2:	d002      	beq.n	aeba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    aeb4:	4921      	ldr	r1, [pc, #132]	; (af3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aeb6:	3110      	adds	r1, #16
    aeb8:	6008      	str	r0, [r1, #0]
    aeba:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    aebe:	6e00      	ldr	r0, [r0, #96]	; 0x60
    aec0:	1c41      	adds	r1, r0, #1
    aec2:	d004      	beq.n	aece <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    aec4:	4920      	ldr	r1, [pc, #128]	; (af48 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aec6:	680a      	ldr	r2, [r1, #0]
    aec8:	f360 4217 	bfi	r2, r0, #16, #8
    aecc:	600a      	str	r2, [r1, #0]
    aece:	491e      	ldr	r1, [pc, #120]	; (af48 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aed0:	f240 605b 	movw	r0, #1627	; 0x65b
    aed4:	3954      	subs	r1, #84	; 0x54
    aed6:	6008      	str	r0, [r1, #0]
    aed8:	1f09      	subs	r1, r1, #4
    aeda:	f240 1003 	movw	r0, #259	; 0x103
    aede:	6008      	str	r0, [r1, #0]
    aee0:	1f08      	subs	r0, r1, #4
    aee2:	6006      	str	r6, [r0, #0]
    aee4:	2001      	movs	r0, #1
    aee6:	f000 fcab 	bl	b840 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    aeea:	4917      	ldr	r1, [pc, #92]	; (af48 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aeec:	f240 1001 	movw	r0, #257	; 0x101
    aef0:	31c4      	adds	r1, #196	; 0xc4
    aef2:	6008      	str	r0, [r1, #0]
    aef4:	4e15      	ldr	r6, [pc, #84]	; (af4c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    aef6:	2502      	movs	r5, #2
    aef8:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    aefc:	4915      	ldr	r1, [pc, #84]	; (af54 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    aefe:	4814      	ldr	r0, [pc, #80]	; (af50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    af00:	6008      	str	r0, [r1, #0]
    af02:	4815      	ldr	r0, [pc, #84]	; (af58 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    af04:	f506 7600 	add.w	r6, r6, #512	; 0x200
    af08:	8784      	strh	r4, [r0, #60]	; 0x3c
    af0a:	3014      	adds	r0, #20
    af0c:	6244      	str	r4, [r0, #36]	; 0x24
    af0e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    af12:	2001      	movs	r0, #1
    af14:	f004 f8d1 	bl	f0ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    af18:	2010      	movs	r0, #16
    af1a:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    af1e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    af22:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    af26:	480d      	ldr	r0, [pc, #52]	; (af5c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    af28:	6840      	ldr	r0, [r0, #4]
    af2a:	2800      	cmp	r0, #0
    af2c:	d002      	beq.n	af34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    af2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    af32:	4700      	bx	r0
    af34:	bd70      	pop	{r4, r5, r6, pc}
    af36:	0000      	.short	0x0000
    af38:	40001ffc 	.word	0x40001ffc
    af3c:	4000173c 	.word	0x4000173c
    af40:	80000096 	.word	0x80000096
    af44:	8900002c 	.word	0x8900002c
    af48:	4000158c 	.word	0x4000158c
    af4c:	40001000 	.word	0x40001000
    af50:	0c0e0000 	.word	0x0c0e0000
    af54:	4001f508 	.word	0x4001f508
    af58:	20000dbc 	.word	0x20000dbc
    af5c:	2000026c 	.word	0x2000026c

0000af60 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    af60:	4901      	ldr	r1, [pc, #4]	; (af68 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    af62:	7608      	strb	r0, [r1, #24]
    af64:	4770      	bx	lr
    af66:	0000      	.short	0x0000
    af68:	20000dd0 	.word	0x20000dd0

0000af6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    af6c:	4904      	ldr	r1, [pc, #16]	; (af80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    af6e:	6008      	str	r0, [r1, #0]
    af70:	4804      	ldr	r0, [pc, #16]	; (af84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    af72:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    af76:	f041 0101 	orr.w	r1, r1, #1
    af7a:	7001      	strb	r1, [r0, #0]
    af7c:	f000 ba92 	b.w	b4a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    af80:	40001504 	.word	0x40001504
    af84:	20000dd0 	.word	0x20000dd0

0000af88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af8c:	4e35      	ldr	r6, [pc, #212]	; (b064 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    af8e:	4607      	mov	r7, r0
    af90:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    af94:	468a      	mov	sl, r1
    af96:	4614      	mov	r4, r2
    af98:	6030      	str	r0, [r6, #0]
    af9a:	4610      	mov	r0, r2
    af9c:	f000 fc50 	bl	b840 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    afa0:	f000 fa28 	bl	b3f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    afa4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b068 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    afa8:	4d30      	ldr	r5, [pc, #192]	; (b06c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    afaa:	f04f 0801 	mov.w	r8, #1
    afae:	b127      	cbz	r7, afba <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    afb0:	2f01      	cmp	r7, #1
    afb2:	d01d      	beq.n	aff0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    afb4:	f240 7124 	movw	r1, #1828	; 0x724
    afb8:	e04a      	b.n	b050 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    afba:	4620      	mov	r0, r4
    afbc:	f000 fa3a 	bl	b434 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    afc0:	4620      	mov	r0, r4
    afc2:	f000 f9fb 	bl	b3bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    afc6:	2c02      	cmp	r4, #2
    afc8:	d00f      	beq.n	afea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    afca:	f640 0034 	movw	r0, #2100	; 0x834
    afce:	bf00      	nop
    afd0:	f649 51f8 	movw	r1, #40440	; 0x9df8
    afd4:	4401      	add	r1, r0
    afd6:	4650      	mov	r0, sl
    afd8:	f000 fbd6 	bl	b788 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    afdc:	4604      	mov	r4, r0
    afde:	4648      	mov	r0, r9
    afe0:	f000 fbbc 	bl	b75c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>
    afe4:	f885 800b 	strb.w	r8, [r5, #11]
    afe8:	e014      	b.n	b014 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    afea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    afee:	e7ef      	b.n	afd0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    aff0:	f000 fa28 	bl	b444 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    aff4:	f000 fb96 	bl	b724 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    aff8:	f000 faa0 	bl	b53c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    affc:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b000:	4650      	mov	r0, sl
    b002:	f000 fbc1 	bl	b788 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    b006:	4604      	mov	r4, r0
    b008:	4817      	ldr	r0, [pc, #92]	; (b068 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b00a:	1d00      	adds	r0, r0, #4
    b00c:	f000 fba6 	bl	b75c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>
    b010:	2002      	movs	r0, #2
    b012:	72e8      	strb	r0, [r5, #11]
    b014:	4816      	ldr	r0, [pc, #88]	; (b070 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b016:	6004      	str	r4, [r0, #0]
    b018:	4917      	ldr	r1, [pc, #92]	; (b078 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    b01a:	4816      	ldr	r0, [pc, #88]	; (b074 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    b01c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b020:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b022:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b026:	6328      	str	r0, [r5, #48]	; 0x30
    b028:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b02c:	6030      	str	r0, [r6, #0]
    b02e:	2110      	movs	r1, #16
    b030:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    b034:	1200      	asrs	r0, r0, #8
    b036:	6030      	str	r0, [r6, #0]
    b038:	f000 fa6c 	bl	b514 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    b03c:	490f      	ldr	r1, [pc, #60]	; (b07c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    b03e:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    b042:	480b      	ldr	r0, [pc, #44]	; (b070 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b044:	300c      	adds	r0, #12
    b046:	6800      	ldr	r0, [r0, #0]
    b048:	42a0      	cmp	r0, r4
    b04a:	d304      	bcc.n	b056 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    b04c:	f240 7149 	movw	r1, #1865	; 0x749
    b050:	203e      	movs	r0, #62	; 0x3e
    b052:	f7f8 fdbd 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b056:	4621      	mov	r1, r4
    b058:	4638      	mov	r0, r7
    b05a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b05e:	f004 b86a 	b.w	f136 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b062:	0000      	.short	0x0000
    b064:	4001f504 	.word	0x4001f504
    b068:	40001000 	.word	0x40001000
    b06c:	20000dd0 	.word	0x20000dd0
    b070:	40008540 	.word	0x40008540
    b074:	40008140 	.word	0x40008140
    b078:	4001f098 	.word	0x4001f098
    b07c:	40008000 	.word	0x40008000

0000b080 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b080:	b510      	push	{r4, lr}
    b082:	b14a      	cbz	r2, b098 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    b084:	4c12      	ldr	r4, [pc, #72]	; (b0d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    b086:	7260      	strb	r0, [r4, #9]
    b088:	7363      	strb	r3, [r4, #13]
    b08a:	07d0      	lsls	r0, r2, #31
    b08c:	d007      	beq.n	b09e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b08e:	2a01      	cmp	r2, #1
    b090:	d005      	beq.n	b09e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b092:	f640 111e 	movw	r1, #2334	; 0x91e
    b096:	e00c      	b.n	b0b2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b098:	f640 1117 	movw	r1, #2327	; 0x917
    b09c:	e009      	b.n	b0b2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b09e:	b159      	cbz	r1, b0b8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    b0a0:	2002      	movs	r0, #2
    b0a2:	72a0      	strb	r0, [r4, #10]
    b0a4:	7322      	strb	r2, [r4, #12]
    b0a6:	2801      	cmp	r0, #1
    b0a8:	d008      	beq.n	b0bc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    b0aa:	2802      	cmp	r0, #2
    b0ac:	d00f      	beq.n	b0ce <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    b0ae:	f640 1135 	movw	r1, #2357	; 0x935
    b0b2:	203e      	movs	r0, #62	; 0x3e
    b0b4:	f7f8 fd8c 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0b8:	2001      	movs	r0, #1
    b0ba:	e7f2      	b.n	b0a2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    b0bc:	7ae0      	ldrb	r0, [r4, #11]
    b0be:	2802      	cmp	r0, #2
    b0c0:	d105      	bne.n	b0ce <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    b0c2:	f000 f9bf 	bl	b444 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0ca:	f000 bb2b 	b.w	b724 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b0ce:	bd10      	pop	{r4, pc}
    b0d0:	20000dd0 	.word	0x20000dd0

0000b0d4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b0d4:	490a      	ldr	r1, [pc, #40]	; (b100 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    b0d6:	b508      	push	{r3, lr}
    b0d8:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    b0dc:	2a01      	cmp	r2, #1
    b0de:	d001      	beq.n	b0e4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    b0e0:	2000      	movs	r0, #0
    b0e2:	bd08      	pop	{r3, pc}
    b0e4:	4a07      	ldr	r2, [pc, #28]	; (b104 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    b0e6:	6812      	ldr	r2, [r2, #0]
    b0e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b0ec:	4252      	negs	r2, r2
    b0ee:	7002      	strb	r2, [r0, #0]
    b0f0:	2000      	movs	r0, #0
    b0f2:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    b0f6:	4804      	ldr	r0, [pc, #16]	; (b108 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    b0f8:	6800      	ldr	r0, [r0, #0]
    b0fa:	9000      	str	r0, [sp, #0]
    b0fc:	2001      	movs	r0, #1
    b0fe:	bd08      	pop	{r3, pc}
    b100:	40001000 	.word	0x40001000
    b104:	40001548 	.word	0x40001548
    b108:	4000111c 	.word	0x4000111c

0000b10c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    b10c:	4a04      	ldr	r2, [pc, #16]	; (b120 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    b10e:	6803      	ldr	r3, [r0, #0]
    b110:	f8c2 3016 	str.w	r3, [r2, #22]
    b114:	8880      	ldrh	r0, [r0, #4]
    b116:	8350      	strh	r0, [r2, #26]
    b118:	f102 0014 	add.w	r0, r2, #20
    b11c:	7201      	strb	r1, [r0, #8]
    b11e:	4770      	bx	lr
    b120:	20000dbc 	.word	0x20000dbc

0000b124 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b124:	4a04      	ldr	r2, [pc, #16]	; (b138 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    b126:	78c1      	ldrb	r1, [r0, #3]
    b128:	6011      	str	r1, [r2, #0]
    b12a:	6800      	ldr	r0, [r0, #0]
    b12c:	4902      	ldr	r1, [pc, #8]	; (b138 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    b12e:	0200      	lsls	r0, r0, #8
    b130:	3908      	subs	r1, #8
    b132:	6008      	str	r0, [r1, #0]
    b134:	4770      	bx	lr
    b136:	0000      	.short	0x0000
    b138:	40001524 	.word	0x40001524

0000b13c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b13c:	6800      	ldr	r0, [r0, #0]
    b13e:	4902      	ldr	r1, [pc, #8]	; (b148 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    b140:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b144:	6008      	str	r0, [r1, #0]
    b146:	4770      	bx	lr
    b148:	4000153c 	.word	0x4000153c

0000b14c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    b14c:	b510      	push	{r4, lr}
    b14e:	f000 fb53 	bl	b7f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48c>
    b152:	4806      	ldr	r0, [pc, #24]	; (b16c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    b154:	6800      	ldr	r0, [r0, #0]
    b156:	2803      	cmp	r0, #3
    b158:	d001      	beq.n	b15e <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    b15a:	280b      	cmp	r0, #11
    b15c:	d104      	bne.n	b168 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    b15e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    b162:	203e      	movs	r0, #62	; 0x3e
    b164:	f7f8 fd34 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b168:	bd10      	pop	{r4, pc}
    b16a:	0000      	.short	0x0000
    b16c:	40001550 	.word	0x40001550

0000b170 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b170:	4901      	ldr	r1, [pc, #4]	; (b178 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b172:	7648      	strb	r0, [r1, #25]
    b174:	4770      	bx	lr
    b176:	0000      	.short	0x0000
    b178:	20000dd0 	.word	0x20000dd0

0000b17c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b17c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b180:	4d71      	ldr	r5, [pc, #452]	; (b348 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    b182:	f04f 0801 	mov.w	r8, #1
    b186:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
    b18a:	4870      	ldr	r0, [pc, #448]	; (b34c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    b18c:	f8d0 b000 	ldr.w	fp, [r0]
    b190:	486f      	ldr	r0, [pc, #444]	; (b350 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>)
    b192:	6800      	ldr	r0, [r0, #0]
    b194:	4c6f      	ldr	r4, [pc, #444]	; (b354 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    b196:	e9c4 0b0e 	strd	r0, fp, [r4, #56]	; 0x38
    b19a:	486f      	ldr	r0, [pc, #444]	; (b358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    b19c:	7800      	ldrb	r0, [r0, #0]
    b19e:	2804      	cmp	r0, #4
    b1a0:	d302      	bcc.n	b1a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    b1a2:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    b1a6:	e0c3      	b.n	b330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    b1a8:	f000 f956 	bl	b458 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b1ac:	496b      	ldr	r1, [pc, #428]	; (b35c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    b1ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b1b0:	6008      	str	r0, [r1, #0]
    b1b2:	486b      	ldr	r0, [pc, #428]	; (b360 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b1b4:	2600      	movs	r6, #0
    b1b6:	6326      	str	r6, [r4, #48]	; 0x30
    b1b8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b1bc:	f240 121d 	movw	r2, #285	; 0x11d
    b1c0:	4391      	bics	r1, r2
    b1c2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b1c6:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b1ca:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    b1ce:	b908      	cbnz	r0, b1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    b1d0:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
    b1d4:	f000 f9c4 	bl	b560 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f4>
    b1d8:	4605      	mov	r5, r0
    b1da:	485c      	ldr	r0, [pc, #368]	; (b34c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    b1dc:	1f00      	subs	r0, r0, #4
    b1de:	6800      	ldr	r0, [r0, #0]
    b1e0:	6260      	str	r0, [r4, #36]	; 0x24
    b1e2:	f7ff fdcb 	bl	ad7c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b1e6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b1ea:	7ae0      	ldrb	r0, [r4, #11]
    b1ec:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b1f0:	46b2      	mov	sl, r6
    b1f2:	6226      	str	r6, [r4, #32]
    b1f4:	4e5b      	ldr	r6, [pc, #364]	; (b364 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b1f6:	2802      	cmp	r0, #2
    b1f8:	d107      	bne.n	b20a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    b1fa:	7860      	ldrb	r0, [r4, #1]
    b1fc:	b128      	cbz	r0, b20a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    b1fe:	6831      	ldr	r1, [r6, #0]
    b200:	7809      	ldrb	r1, [r1, #0]
    b202:	4001      	ands	r1, r0
    b204:	7820      	ldrb	r0, [r4, #0]
    b206:	4388      	bics	r0, r1
    b208:	d017      	beq.n	b23a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbe>
    b20a:	f884 a01c 	strb.w	sl, [r4, #28]
    b20e:	f8df 9158 	ldr.w	r9, [pc, #344]	; b368 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    b212:	07a8      	lsls	r0, r5, #30
    b214:	d502      	bpl.n	b21c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa0>
    b216:	f8d9 0000 	ldr.w	r0, [r9]
    b21a:	6220      	str	r0, [r4, #32]
    b21c:	0728      	lsls	r0, r5, #28
    b21e:	d502      	bpl.n	b226 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    b220:	f8d9 0000 	ldr.w	r0, [r9]
    b224:	6220      	str	r0, [r4, #32]
    b226:	4f4b      	ldr	r7, [pc, #300]	; (b354 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    b228:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b22a:	3f14      	subs	r7, #20
    b22c:	6939      	ldr	r1, [r7, #16]
    b22e:	4788      	blx	r1
    b230:	4849      	ldr	r0, [pc, #292]	; (b358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    b232:	7800      	ldrb	r0, [r0, #0]
    b234:	07c0      	lsls	r0, r0, #31
    b236:	d003      	beq.n	b240 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc4>
    b238:	e01b      	b.n	b272 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b23a:	f884 801c 	strb.w	r8, [r4, #28]
    b23e:	e7e6      	b.n	b20e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b240:	6836      	ldr	r6, [r6, #0]
    b242:	7830      	ldrb	r0, [r6, #0]
    b244:	f000 000f 	and.w	r0, r0, #15
    b248:	2807      	cmp	r0, #7
    b24a:	d210      	bcs.n	b26e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    b24c:	2206      	movs	r2, #6
    b24e:	f106 0109 	add.w	r1, r6, #9
    b252:	1ca0      	adds	r0, r4, #2
    b254:	f000 fc81 	bl	bb5a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    b258:	b930      	cbnz	r0, b268 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    b25a:	7a20      	ldrb	r0, [r4, #8]
    b25c:	7831      	ldrb	r1, [r6, #0]
    b25e:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    b262:	d101      	bne.n	b268 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    b264:	2001      	movs	r0, #1
    b266:	e000      	b.n	b26a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    b268:	2000      	movs	r0, #0
    b26a:	7760      	strb	r0, [r4, #29]
    b26c:	e001      	b.n	b272 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b26e:	f884 a01d 	strb.w	sl, [r4, #29]
    b272:	2600      	movs	r6, #0
    b274:	4659      	mov	r1, fp
    b276:	4628      	mov	r0, r5
    b278:	f000 fa02 	bl	b680 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>
    b27c:	b918      	cbnz	r0, b286 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10a>
    b27e:	4938      	ldr	r1, [pc, #224]	; (b360 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b280:	f8c1 8010 	str.w	r8, [r1, #16]
    b284:	2601      	movs	r6, #1
    b286:	07e8      	lsls	r0, r5, #31
    b288:	d002      	beq.n	b290 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x114>
    b28a:	6838      	ldr	r0, [r7, #0]
    b28c:	4780      	blx	r0
    b28e:	e032      	b.n	b2f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17a>
    b290:	07a8      	lsls	r0, r5, #30
    b292:	d527      	bpl.n	b2e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    b294:	0768      	lsls	r0, r5, #29
    b296:	d41f      	bmi.n	b2d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b298:	f000 fc3b 	bl	bb12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b29c:	b9e0      	cbnz	r0, b2d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b29e:	f000 fc28 	bl	baf2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b2a2:	b9c8      	cbnz	r0, b2d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b2a4:	482f      	ldr	r0, [pc, #188]	; (b364 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b2a6:	38b4      	subs	r0, #180	; 0xb4
    b2a8:	6800      	ldr	r0, [r0, #0]
    b2aa:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b2ae:	f3c0 6300 	ubfx	r3, r0, #24, #1
    b2b2:	f000 020f 	and.w	r2, r0, #15
    b2b6:	f3c0 1103 	ubfx	r1, r0, #4, #4
    b2ba:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b2be:	b15b      	cbz	r3, b2d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b2c0:	b10a      	cbz	r2, b2c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14a>
    b2c2:	b101      	cbz	r1, b2c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14a>
    b2c4:	b940      	cbnz	r0, b2d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b2c6:	4827      	ldr	r0, [pc, #156]	; (b364 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b2c8:	38b0      	subs	r0, #176	; 0xb0
    b2ca:	6800      	ldr	r0, [r0, #0]
    b2cc:	b120      	cbz	r0, b2d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b2ce:	f1bc 0f03 	cmp.w	ip, #3
    b2d2:	d201      	bcs.n	b2d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b2d4:	f045 0504 	orr.w	r5, r5, #4
    b2d8:	f345 0080 	sbfx	r0, r5, #2, #1
    b2dc:	4631      	mov	r1, r6
    b2de:	1c40      	adds	r0, r0, #1
    b2e0:	687a      	ldr	r2, [r7, #4]
    b2e2:	e007      	b.n	b2f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x178>
    b2e4:	f015 0f28 	tst.w	r5, #40	; 0x28
    b2e8:	d005      	beq.n	b2f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17a>
    b2ea:	f345 1140 	sbfx	r1, r5, #5, #1
    b2ee:	68ba      	ldr	r2, [r7, #8]
    b2f0:	4630      	mov	r0, r6
    b2f2:	1c49      	adds	r1, r1, #1
    b2f4:	4790      	blx	r2
    b2f6:	06e8      	lsls	r0, r5, #27
    b2f8:	d501      	bpl.n	b2fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x182>
    b2fa:	68f8      	ldr	r0, [r7, #12]
    b2fc:	4780      	blx	r0
    b2fe:	7ae0      	ldrb	r0, [r4, #11]
    b300:	2802      	cmp	r0, #2
    b302:	d11e      	bne.n	b342 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c6>
    b304:	7c20      	ldrb	r0, [r4, #16]
    b306:	2800      	cmp	r0, #0
    b308:	d01b      	beq.n	b342 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c6>
    b30a:	2802      	cmp	r0, #2
    b30c:	d004      	beq.n	b318 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    b30e:	2801      	cmp	r0, #1
    b310:	d008      	beq.n	b324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
    b312:	f640 314a 	movw	r1, #2890	; 0xb4a
    b316:	e00b      	b.n	b330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    b318:	6961      	ldr	r1, [r4, #20]
    b31a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b31c:	4401      	add	r1, r0
    b31e:	f8c9 1000 	str.w	r1, [r9]
    b322:	e00a      	b.n	b33a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1be>
    b324:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b326:	6960      	ldr	r0, [r4, #20]
    b328:	4288      	cmp	r0, r1
    b32a:	d804      	bhi.n	b336 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ba>
    b32c:	f640 314b 	movw	r1, #2891	; 0xb4b
    b330:	203e      	movs	r0, #62	; 0x3e
    b332:	f7f8 fc4d 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b336:	f8c9 0000 	str.w	r0, [r9]
    b33a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b33e:	f000 b9ff 	b.w	b740 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    b342:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b346:	0000      	.short	0x0000
    b348:	40008000 	.word	0x40008000
    b34c:	4000854c 	.word	0x4000854c
    b350:	4000b504 	.word	0x4000b504
    b354:	20000dd0 	.word	0x20000dd0
    b358:	2000026c 	.word	0x2000026c
    b35c:	4001f508 	.word	0x4001f508
    b360:	40001000 	.word	0x40001000
    b364:	40001504 	.word	0x40001504
    b368:	40008544 	.word	0x40008544

0000b36c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b36c:	b570      	push	{r4, r5, r6, lr}
    b36e:	4b11      	ldr	r3, [pc, #68]	; (b3b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    b370:	888c      	ldrh	r4, [r1, #4]
    b372:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b376:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    b37a:	780c      	ldrb	r4, [r1, #0]
    b37c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b380:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b384:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    b388:	4d0b      	ldr	r5, [pc, #44]	; (b3b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    b38a:	6829      	ldr	r1, [r5, #0]
    b38c:	f100 0608 	add.w	r6, r0, #8
    b390:	2401      	movs	r4, #1
    b392:	fa04 f306 	lsl.w	r3, r4, r6
    b396:	b132      	cbz	r2, b3a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b398:	2a01      	cmp	r2, #1
    b39a:	d006      	beq.n	b3aa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    b39c:	f240 41d1 	movw	r1, #1233	; 0x4d1
    b3a0:	203e      	movs	r0, #62	; 0x3e
    b3a2:	f7f8 fc15 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3a6:	4399      	bics	r1, r3
    b3a8:	e000      	b.n	b3ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    b3aa:	4319      	orrs	r1, r3
    b3ac:	4084      	lsls	r4, r0
    b3ae:	430c      	orrs	r4, r1
    b3b0:	602c      	str	r4, [r5, #0]
    b3b2:	bd70      	pop	{r4, r5, r6, pc}
    b3b4:	40001000 	.word	0x40001000
    b3b8:	40001640 	.word	0x40001640
    b3bc:	b510      	push	{r4, lr}
    b3be:	4604      	mov	r4, r0
    b3c0:	f000 fba7 	bl	bb12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b3c4:	2800      	cmp	r0, #0
    b3c6:	d00e      	beq.n	b3e6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    b3c8:	4a09      	ldr	r2, [pc, #36]	; (b3f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    b3ca:	6811      	ldr	r1, [r2, #0]
    b3cc:	0650      	lsls	r0, r2, #25
    b3ce:	2c02      	cmp	r4, #2
    b3d0:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b3d4:	d008      	beq.n	b3e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    b3d6:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b3da:	bf00      	nop
    b3dc:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b3e0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b3e4:	6010      	str	r0, [r2, #0]
    b3e6:	bd10      	pop	{r4, pc}
    b3e8:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b3ec:	e7f6      	b.n	b3dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    b3ee:	0000      	.short	0x0000
    b3f0:	40001588 	.word	0x40001588
    b3f4:	480d      	ldr	r0, [pc, #52]	; (b42c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    b3f6:	7e40      	ldrb	r0, [r0, #25]
    b3f8:	2825      	cmp	r0, #37	; 0x25
    b3fa:	d007      	beq.n	b40c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    b3fc:	2826      	cmp	r0, #38	; 0x26
    b3fe:	d007      	beq.n	b410 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    b400:	2827      	cmp	r0, #39	; 0x27
    b402:	d007      	beq.n	b414 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    b404:	280a      	cmp	r0, #10
    b406:	d807      	bhi.n	b418 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    b408:	2204      	movs	r2, #4
    b40a:	e006      	b.n	b41a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    b40c:	2102      	movs	r1, #2
    b40e:	e007      	b.n	b420 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b410:	211a      	movs	r1, #26
    b412:	e005      	b.n	b420 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b414:	2150      	movs	r1, #80	; 0x50
    b416:	e003      	b.n	b420 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b418:	2206      	movs	r2, #6
    b41a:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    b41e:	b2c9      	uxtb	r1, r1
    b420:	4a03      	ldr	r2, [pc, #12]	; (b430 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b422:	6011      	str	r1, [r2, #0]
    b424:	4902      	ldr	r1, [pc, #8]	; (b430 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b426:	314c      	adds	r1, #76	; 0x4c
    b428:	6008      	str	r0, [r1, #0]
    b42a:	4770      	bx	lr
    b42c:	20000dd0 	.word	0x20000dd0
    b430:	40001508 	.word	0x40001508
    b434:	4802      	ldr	r0, [pc, #8]	; (b440 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd4>)
    b436:	f990 0018 	ldrsb.w	r0, [r0, #24]
    b43a:	f000 b9fb 	b.w	b834 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b43e:	0000      	.short	0x0000
    b440:	20000dd0 	.word	0x20000dd0
    b444:	4803      	ldr	r0, [pc, #12]	; (b454 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>)
    b446:	7a81      	ldrb	r1, [r0, #10]
    b448:	2901      	cmp	r1, #1
    b44a:	d102      	bne.n	b452 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe6>
    b44c:	7b40      	ldrb	r0, [r0, #13]
    b44e:	f7ff bff1 	b.w	b434 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b452:	4770      	bx	lr
    b454:	20000dd0 	.word	0x20000dd0
    b458:	4805      	ldr	r0, [pc, #20]	; (b470 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x104>)
    b45a:	7ac0      	ldrb	r0, [r0, #11]
    b45c:	2801      	cmp	r0, #1
    b45e:	d003      	beq.n	b468 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfc>
    b460:	2802      	cmp	r0, #2
    b462:	d103      	bne.n	b46c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x100>
    b464:	f003 bdf1 	b.w	f04a <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b468:	f003 bdfb 	b.w	f062 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b46c:	4770      	bx	lr
    b46e:	0000      	.short	0x0000
    b470:	20000dd0 	.word	0x20000dd0
    b474:	4809      	ldr	r0, [pc, #36]	; (b49c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x130>)
    b476:	b508      	push	{r3, lr}
    b478:	2100      	movs	r1, #0
    b47a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b47e:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b482:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b486:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b48a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b48e:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b492:	4803      	ldr	r0, [pc, #12]	; (b4a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x134>)
    b494:	6800      	ldr	r0, [r0, #0]
    b496:	9000      	str	r0, [sp, #0]
    b498:	bd08      	pop	{r3, pc}
    b49a:	0000      	.short	0x0000
    b49c:	40001000 	.word	0x40001000
    b4a0:	40001118 	.word	0x40001118
    b4a4:	4816      	ldr	r0, [pc, #88]	; (b500 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x194>)
    b4a6:	b510      	push	{r4, lr}
    b4a8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    b4ac:	07c1      	lsls	r1, r0, #31
    b4ae:	d026      	beq.n	b4fe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b4b0:	0781      	lsls	r1, r0, #30
    b4b2:	d513      	bpl.n	b4dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>
    b4b4:	4813      	ldr	r0, [pc, #76]	; (b504 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    b4b6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b4ba:	f041 0101 	orr.w	r1, r1, #1
    b4be:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b4c2:	4811      	ldr	r0, [pc, #68]	; (b508 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x19c>)
    b4c4:	6800      	ldr	r0, [r0, #0]
    b4c6:	280b      	cmp	r0, #11
    b4c8:	d005      	beq.n	b4d6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b4ca:	280a      	cmp	r0, #10
    b4cc:	d003      	beq.n	b4d6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b4ce:	2803      	cmp	r0, #3
    b4d0:	d001      	beq.n	b4d6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b4d2:	2802      	cmp	r0, #2
    b4d4:	d113      	bne.n	b4fe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b4d6:	f240 512b 	movw	r1, #1323	; 0x52b
    b4da:	e00d      	b.n	b4f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x18c>
    b4dc:	0740      	lsls	r0, r0, #29
    b4de:	d50e      	bpl.n	b4fe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b4e0:	4808      	ldr	r0, [pc, #32]	; (b504 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    b4e2:	490a      	ldr	r1, [pc, #40]	; (b50c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a0>)
    b4e4:	3008      	adds	r0, #8
    b4e6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b4ea:	4809      	ldr	r0, [pc, #36]	; (b510 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a4>)
    b4ec:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b4f0:	2801      	cmp	r0, #1
    b4f2:	d104      	bne.n	b4fe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b4f4:	f240 5132 	movw	r1, #1330	; 0x532
    b4f8:	203e      	movs	r0, #62	; 0x3e
    b4fa:	f7f8 fb69 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4fe:	bd10      	pop	{r4, pc}
    b500:	20000dd0 	.word	0x20000dd0
    b504:	40001000 	.word	0x40001000
    b508:	40001550 	.word	0x40001550
    b50c:	4001f098 	.word	0x4001f098
    b510:	40008000 	.word	0x40008000
    b514:	4808      	ldr	r0, [pc, #32]	; (b538 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>)
    b516:	4601      	mov	r1, r0
    b518:	7a42      	ldrb	r2, [r0, #9]
    b51a:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    b51e:	b112      	cbz	r2, b526 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ba>
    b520:	2a01      	cmp	r2, #1
    b522:	d003      	beq.n	b52c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c0>
    b524:	e006      	b.n	b534 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c8>
    b526:	f041 0102 	orr.w	r1, r1, #2
    b52a:	e001      	b.n	b530 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c4>
    b52c:	f041 0104 	orr.w	r1, r1, #4
    b530:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    b534:	f7ff bfb6 	b.w	b4a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    b538:	20000dd0 	.word	0x20000dd0
    b53c:	b510      	push	{r4, lr}
    b53e:	f000 fae8 	bl	bb12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b542:	2800      	cmp	r0, #0
    b544:	d108      	bne.n	b558 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    b546:	f000 fad4 	bl	baf2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b54a:	2800      	cmp	r0, #0
    b54c:	d104      	bne.n	b558 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    b54e:	4803      	ldr	r0, [pc, #12]	; (b55c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f0>)
    b550:	6801      	ldr	r1, [r0, #0]
    b552:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b556:	6001      	str	r1, [r0, #0]
    b558:	bd10      	pop	{r4, pc}
    b55a:	0000      	.short	0x0000
    b55c:	40001568 	.word	0x40001568
    b560:	b538      	push	{r3, r4, r5, lr}
    b562:	4d36      	ldr	r5, [pc, #216]	; (b63c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d0>)
    b564:	2400      	movs	r4, #0
    b566:	7c28      	ldrb	r0, [r5, #16]
    b568:	b120      	cbz	r0, b574 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    b56a:	4835      	ldr	r0, [pc, #212]	; (b640 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>)
    b56c:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b570:	2801      	cmp	r0, #1
    b572:	d007      	beq.n	b584 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x218>
    b574:	2200      	movs	r2, #0
    b576:	7ae9      	ldrb	r1, [r5, #11]
    b578:	4832      	ldr	r0, [pc, #200]	; (b644 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d8>)
    b57a:	2901      	cmp	r1, #1
    b57c:	d004      	beq.n	b588 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x21c>
    b57e:	2902      	cmp	r1, #2
    b580:	d00a      	beq.n	b598 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b582:	e019      	b.n	b5b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b584:	2201      	movs	r2, #1
    b586:	e7f6      	b.n	b576 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20a>
    b588:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b58c:	2901      	cmp	r1, #1
    b58e:	d001      	beq.n	b594 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x228>
    b590:	2400      	movs	r4, #0
    b592:	e011      	b.n	b5b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b594:	2408      	movs	r4, #8
    b596:	e00f      	b.n	b5b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b598:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b59c:	2901      	cmp	r1, #1
    b59e:	d006      	beq.n	b5ae <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x242>
    b5a0:	2100      	movs	r1, #0
    b5a2:	4b29      	ldr	r3, [pc, #164]	; (b648 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    b5a4:	681b      	ldr	r3, [r3, #0]
    b5a6:	2b01      	cmp	r3, #1
    b5a8:	d003      	beq.n	b5b2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x246>
    b5aa:	2404      	movs	r4, #4
    b5ac:	e002      	b.n	b5b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    b5ae:	2102      	movs	r1, #2
    b5b0:	e7f7      	b.n	b5a2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x236>
    b5b2:	2400      	movs	r4, #0
    b5b4:	430c      	orrs	r4, r1
    b5b6:	4314      	orrs	r4, r2
    b5b8:	f014 0f0b 	tst.w	r4, #11
    b5bc:	d105      	bne.n	b5ca <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25e>
    b5be:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b5c2:	2901      	cmp	r1, #1
    b5c4:	d006      	beq.n	b5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    b5c6:	2100      	movs	r1, #0
    b5c8:	430c      	orrs	r4, r1
    b5ca:	4920      	ldr	r1, [pc, #128]	; (b64c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e0>)
    b5cc:	7809      	ldrb	r1, [r1, #0]
    b5ce:	07c9      	lsls	r1, r1, #31
    b5d0:	d002      	beq.n	b5d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    b5d2:	e023      	b.n	b61c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2b0>
    b5d4:	2110      	movs	r1, #16
    b5d6:	e7f7      	b.n	b5c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    b5d8:	491d      	ldr	r1, [pc, #116]	; (b650 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e4>)
    b5da:	6809      	ldr	r1, [r1, #0]
    b5dc:	f011 0fff 	tst.w	r1, #255	; 0xff
    b5e0:	d003      	beq.n	b5ea <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x27e>
    b5e2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b5e6:	2a01      	cmp	r2, #1
    b5e8:	d000      	beq.n	b5ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x280>
    b5ea:	2200      	movs	r2, #0
    b5ec:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    b5f0:	f011 0fff 	tst.w	r1, #255	; 0xff
    b5f4:	d003      	beq.n	b5fe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x292>
    b5f6:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b5fa:	2801      	cmp	r0, #1
    b5fc:	d000      	beq.n	b600 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x294>
    b5fe:	2000      	movs	r0, #0
    b600:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    b604:	4810      	ldr	r0, [pc, #64]	; (b648 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    b606:	3010      	adds	r0, #16
    b608:	6800      	ldr	r0, [r0, #0]
    b60a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b60e:	f7ff f875 	bl	a6fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    b612:	2801      	cmp	r0, #1
    b614:	d000      	beq.n	b618 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    b616:	2000      	movs	r0, #0
    b618:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    b61c:	f7ff ff2a 	bl	b474 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x108>
    b620:	06e0      	lsls	r0, r4, #27
    b622:	d506      	bpl.n	b632 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b624:	0720      	lsls	r0, r4, #28
    b626:	d404      	bmi.n	b632 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b628:	7ae8      	ldrb	r0, [r5, #11]
    b62a:	2801      	cmp	r0, #1
    b62c:	d101      	bne.n	b632 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b62e:	f044 0420 	orr.w	r4, r4, #32
    b632:	4808      	ldr	r0, [pc, #32]	; (b654 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e8>)
    b634:	6800      	ldr	r0, [r0, #0]
    b636:	9000      	str	r0, [sp, #0]
    b638:	4620      	mov	r0, r4
    b63a:	bd38      	pop	{r3, r4, r5, pc}
    b63c:	20000dd0 	.word	0x20000dd0
    b640:	40008000 	.word	0x40008000
    b644:	40001000 	.word	0x40001000
    b648:	40001400 	.word	0x40001400
    b64c:	2000026c 	.word	0x2000026c
    b650:	40001640 	.word	0x40001640
    b654:	40008144 	.word	0x40008144
    b658:	4808      	ldr	r0, [pc, #32]	; (b67c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    b65a:	b510      	push	{r4, lr}
    b65c:	6800      	ldr	r0, [r0, #0]
    b65e:	f000 000f 	and.w	r0, r0, #15
    b662:	2803      	cmp	r0, #3
    b664:	d006      	beq.n	b674 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x308>
    b666:	2804      	cmp	r0, #4
    b668:	d006      	beq.n	b678 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x30c>
    b66a:	f240 2136 	movw	r1, #566	; 0x236
    b66e:	203e      	movs	r0, #62	; 0x3e
    b670:	f7f8 faae 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b674:	2001      	movs	r0, #1
    b676:	bd10      	pop	{r4, pc}
    b678:	2002      	movs	r0, #2
    b67a:	bd10      	pop	{r4, pc}
    b67c:	40001510 	.word	0x40001510
    b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b684:	4c25      	ldr	r4, [pc, #148]	; (b71c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b0>)
    b686:	460d      	mov	r5, r1
    b688:	7aa2      	ldrb	r2, [r4, #10]
    b68a:	b19a      	cbz	r2, b6b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    b68c:	7b21      	ldrb	r1, [r4, #12]
    b68e:	078b      	lsls	r3, r1, #30
    b690:	d503      	bpl.n	b69a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    b692:	0783      	lsls	r3, r0, #30
    b694:	d501      	bpl.n	b69a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    b696:	0743      	lsls	r3, r0, #29
    b698:	d41c      	bmi.n	b6d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b69a:	06cb      	lsls	r3, r1, #27
    b69c:	d505      	bpl.n	b6aa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    b69e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    b6a2:	b113      	cbz	r3, b6aa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    b6a4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    b6a8:	b1a3      	cbz	r3, b6d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b6aa:	070b      	lsls	r3, r1, #28
    b6ac:	d50b      	bpl.n	b6c6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    b6ae:	7f23      	ldrb	r3, [r4, #28]
    b6b0:	b983      	cbnz	r3, b6d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b6b2:	e008      	b.n	b6c6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    b6b4:	491a      	ldr	r1, [pc, #104]	; (b720 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b4>)
    b6b6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b6ba:	6008      	str	r0, [r1, #0]
    b6bc:	f000 f85a 	bl	b774 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    b6c0:	2000      	movs	r0, #0
    b6c2:	7420      	strb	r0, [r4, #16]
    b6c4:	e028      	b.n	b718 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    b6c6:	0749      	lsls	r1, r1, #29
    b6c8:	d501      	bpl.n	b6ce <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x362>
    b6ca:	7f61      	ldrb	r1, [r4, #29]
    b6cc:	b111      	cbz	r1, b6d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b6ce:	f010 0f11 	tst.w	r0, #17
    b6d2:	d002      	beq.n	b6da <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b6d4:	f7ff f9a8 	bl	aa28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b6d8:	e01e      	b.n	b718 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    b6da:	2a01      	cmp	r2, #1
    b6dc:	d001      	beq.n	b6e2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x376>
    b6de:	2601      	movs	r6, #1
    b6e0:	e000      	b.n	b6e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x378>
    b6e2:	2600      	movs	r6, #0
    b6e4:	7a60      	ldrb	r0, [r4, #9]
    b6e6:	2801      	cmp	r0, #1
    b6e8:	d00e      	beq.n	b708 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39c>
    b6ea:	2700      	movs	r7, #0
    b6ec:	f000 f842 	bl	b774 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    b6f0:	2196      	movs	r1, #150	; 0x96
    b6f2:	4630      	mov	r0, r6
    b6f4:	f000 f856 	bl	b7a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x438>
    b6f8:	4601      	mov	r1, r0
    b6fa:	b14f      	cbz	r7, b710 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a4>
    b6fc:	353b      	adds	r5, #59	; 0x3b
    b6fe:	428d      	cmp	r5, r1
    b700:	d904      	bls.n	b70c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a0>
    b702:	2000      	movs	r0, #0
    b704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b708:	2701      	movs	r7, #1
    b70a:	e7ef      	b.n	b6ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x380>
    b70c:	2001      	movs	r0, #1
    b70e:	7260      	strb	r0, [r4, #9]
    b710:	7b62      	ldrb	r2, [r4, #13]
    b712:	4630      	mov	r0, r6
    b714:	f7ff fc38 	bl	af88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b718:	2001      	movs	r0, #1
    b71a:	e7f3      	b.n	b704 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x398>
    b71c:	20000dd0 	.word	0x20000dd0
    b720:	4001f508 	.word	0x4001f508
    b724:	4805      	ldr	r0, [pc, #20]	; (b73c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d0>)
    b726:	2100      	movs	r1, #0
    b728:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b72c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b730:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b734:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b738:	4770      	bx	lr
    b73a:	0000      	.short	0x0000
    b73c:	40001000 	.word	0x40001000
    b740:	4804      	ldr	r0, [pc, #16]	; (b754 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e8>)
    b742:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b744:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b748:	6301      	str	r1, [r0, #48]	; 0x30
    b74a:	4903      	ldr	r1, [pc, #12]	; (b758 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>)
    b74c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b750:	6008      	str	r0, [r1, #0]
    b752:	4770      	bx	lr
    b754:	20000dd0 	.word	0x20000dd0
    b758:	4001f504 	.word	0x4001f504
    b75c:	4903      	ldr	r1, [pc, #12]	; (b76c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x400>)
    b75e:	7a49      	ldrb	r1, [r1, #9]
    b760:	2900      	cmp	r1, #0
    b762:	d102      	bne.n	b76a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3fe>
    b764:	4902      	ldr	r1, [pc, #8]	; (b770 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x404>)
    b766:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b76a:	4770      	bx	lr
    b76c:	20000dd0 	.word	0x20000dd0
    b770:	4001f098 	.word	0x4001f098
    b774:	4803      	ldr	r0, [pc, #12]	; (b784 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x418>)
    b776:	2100      	movs	r1, #0
    b778:	7241      	strb	r1, [r0, #9]
    b77a:	7281      	strb	r1, [r0, #10]
    b77c:	72c1      	strb	r1, [r0, #11]
    b77e:	2101      	movs	r1, #1
    b780:	7301      	strb	r1, [r0, #12]
    b782:	4770      	bx	lr
    b784:	20000dd0 	.word	0x20000dd0
    b788:	4a05      	ldr	r2, [pc, #20]	; (b7a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x434>)
    b78a:	7a52      	ldrb	r2, [r2, #9]
    b78c:	2a01      	cmp	r2, #1
    b78e:	d006      	beq.n	b79e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x432>
    b790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b794:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b798:	fbb1 f1f2 	udiv	r1, r1, r2
    b79c:	1a40      	subs	r0, r0, r1
    b79e:	4770      	bx	lr
    b7a0:	20000dd0 	.word	0x20000dd0
    b7a4:	b570      	push	{r4, r5, r6, lr}
    b7a6:	4c13      	ldr	r4, [pc, #76]	; (b7f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x488>)
    b7a8:	4603      	mov	r3, r0
    b7aa:	460d      	mov	r5, r1
    b7ac:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    b7b0:	2000      	movs	r0, #0
    b7b2:	b15a      	cbz	r2, b7cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>
    b7b4:	4621      	mov	r1, r4
    b7b6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    b7ba:	b163      	cbz	r3, b7d6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46a>
    b7bc:	2b01      	cmp	r3, #1
    b7be:	d111      	bne.n	b7e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    b7c0:	2a01      	cmp	r2, #1
    b7c2:	4628      	mov	r0, r5
    b7c4:	d012      	beq.n	b7ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x480>
    b7c6:	f003 fd0e 	bl	f1e6 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b7ca:	e009      	b.n	b7e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b7cc:	f240 7166 	movw	r1, #1894	; 0x766
    b7d0:	203e      	movs	r0, #62	; 0x3e
    b7d2:	f7f8 f9fd 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7d6:	2a01      	cmp	r2, #1
    b7d8:	4628      	mov	r0, r5
    b7da:	d004      	beq.n	b7e6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x47a>
    b7dc:	f003 fd11 	bl	f202 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b7e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b7e2:	4408      	add	r0, r1
    b7e4:	bd70      	pop	{r4, r5, r6, pc}
    b7e6:	f003 fd26 	bl	f236 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b7ea:	e7f9      	b.n	b7e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b7ec:	f003 fd14 	bl	f218 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b7f0:	e7f6      	b.n	b7e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b7f2:	0000      	.short	0x0000
    b7f4:	20000dd0 	.word	0x20000dd0
    b7f8:	b510      	push	{r4, lr}
    b7fa:	2200      	movs	r2, #0
    b7fc:	2901      	cmp	r1, #1
    b7fe:	d008      	beq.n	b812 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a6>
    b800:	2902      	cmp	r1, #2
    b802:	d004      	beq.n	b80e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a2>
    b804:	f240 217f 	movw	r1, #639	; 0x27f
    b808:	203e      	movs	r0, #62	; 0x3e
    b80a:	f7f8 f9e1 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b80e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b812:	4905      	ldr	r1, [pc, #20]	; (b828 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>)
    b814:	430a      	orrs	r2, r1
    b816:	4905      	ldr	r1, [pc, #20]	; (b82c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c0>)
    b818:	600a      	str	r2, [r1, #0]
    b81a:	4905      	ldr	r1, [pc, #20]	; (b830 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c4>)
    b81c:	4308      	orrs	r0, r1
    b81e:	4903      	ldr	r1, [pc, #12]	; (b82c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c0>)
    b820:	1d09      	adds	r1, r1, #4
    b822:	6008      	str	r0, [r1, #0]
    b824:	bd10      	pop	{r4, pc}
    b826:	0000      	.short	0x0000
    b828:	00100108 	.word	0x00100108
    b82c:	40001514 	.word	0x40001514
    b830:	02030000 	.word	0x02030000

0000b834 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b834:	4901      	ldr	r1, [pc, #4]	; (b83c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b836:	b2c0      	uxtb	r0, r0
    b838:	6008      	str	r0, [r1, #0]
    b83a:	4770      	bx	lr
    b83c:	4000150c 	.word	0x4000150c

0000b840 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b840:	b510      	push	{r4, lr}
    b842:	4907      	ldr	r1, [pc, #28]	; (b860 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b844:	2801      	cmp	r0, #1
    b846:	d005      	beq.n	b854 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b848:	2802      	cmp	r0, #2
    b84a:	d005      	beq.n	b858 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b84c:	2197      	movs	r1, #151	; 0x97
    b84e:	203f      	movs	r0, #63	; 0x3f
    b850:	f7f8 f9be 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b854:	2003      	movs	r0, #3
    b856:	e000      	b.n	b85a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b858:	2004      	movs	r0, #4
    b85a:	6008      	str	r0, [r1, #0]
    b85c:	bd10      	pop	{r4, pc}
    b85e:	0000      	.short	0x0000
    b860:	40001510 	.word	0x40001510
    b864:	2100      	movs	r1, #0
    b866:	7081      	strb	r1, [r0, #2]
    b868:	7001      	strb	r1, [r0, #0]
    b86a:	7041      	strb	r1, [r0, #1]
    b86c:	4770      	bx	lr

0000b86e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    b86e:	b570      	push	{r4, r5, r6, lr}
    b870:	f7f4 fdb0 	bl	3d4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    b874:	4605      	mov	r5, r0
    b876:	2400      	movs	r4, #0
    b878:	e006      	b.n	b888 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    b87a:	4620      	mov	r0, r4
    b87c:	f7f4 fdb0 	bl	3e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b880:	f7ff fff0 	bl	b864 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24>
    b884:	1c64      	adds	r4, r4, #1
    b886:	b2e4      	uxtb	r4, r4
    b888:	42ac      	cmp	r4, r5
    b88a:	d3f6      	bcc.n	b87a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    b88c:	bd70      	pop	{r4, r5, r6, pc}

0000b88e <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    b88e:	2000      	movs	r0, #0
    b890:	f7f7 bb30 	b.w	2ef4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000b894 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    b894:	b510      	push	{r4, lr}
    b896:	f7f7 f819 	bl	28cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    b89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b89e:	f000 b800 	b.w	b8a2 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000b8a2 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    b8a2:	0a41      	lsrs	r1, r0, #9
    b8a4:	f643 5209 	movw	r2, #15625	; 0x3d09
    b8a8:	4351      	muls	r1, r2
    b8aa:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b8ae:	fb10 f002 	smulbb	r0, r0, r2
    b8b2:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b8b6:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    b8ba:	4770      	bx	lr

0000b8bc <MPSL_IRQ_RADIO_Handler>:
    b8bc:	f7f5 bdc6 	b.w	144c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    b8c0:	2800      	cmp	r0, #0
    b8c2:	db09      	blt.n	b8d8 <MPSL_IRQ_RADIO_Handler+0x1c>
    b8c4:	f000 021f 	and.w	r2, r0, #31
    b8c8:	2101      	movs	r1, #1
    b8ca:	4091      	lsls	r1, r2
    b8cc:	0940      	lsrs	r0, r0, #5
    b8ce:	0080      	lsls	r0, r0, #2
    b8d0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b8d4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b8d8:	4770      	bx	lr
    b8da:	2800      	cmp	r0, #0
    b8dc:	db0d      	blt.n	b8fa <MPSL_IRQ_RADIO_Handler+0x3e>
    b8de:	f000 021f 	and.w	r2, r0, #31
    b8e2:	2101      	movs	r1, #1
    b8e4:	4091      	lsls	r1, r2
    b8e6:	0940      	lsrs	r0, r0, #5
    b8e8:	0080      	lsls	r0, r0, #2
    b8ea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b8ee:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b8f2:	f3bf 8f4f 	dsb	sy
    b8f6:	f3bf 8f6f 	isb	sy
    b8fa:	4770      	bx	lr

0000b8fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    b8fc:	b570      	push	{r4, r5, r6, lr}
    b8fe:	4602      	mov	r2, r0
    b900:	2000      	movs	r0, #0
    b902:	2900      	cmp	r1, #0
    b904:	d01d      	beq.n	b942 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    b906:	fba2 0101 	umull	r0, r1, r2, r1
    b90a:	0a40      	lsrs	r0, r0, #9
    b90c:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    b910:	0a49      	lsrs	r1, r1, #9
    b912:	1c40      	adds	r0, r0, #1
    b914:	f141 0100 	adc.w	r1, r1, #0
    b918:	f240 72a1 	movw	r2, #1953	; 0x7a1
    b91c:	1883      	adds	r3, r0, r2
    b91e:	f141 0100 	adc.w	r1, r1, #0
    b922:	1c5b      	adds	r3, r3, #1
    b924:	f141 0400 	adc.w	r4, r1, #0
    b928:	2100      	movs	r1, #0
    b92a:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    b92e:	41a1      	sbcs	r1, r4
    b930:	d203      	bcs.n	b93a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    b932:	2171      	movs	r1, #113	; 0x71
    b934:	206d      	movs	r0, #109	; 0x6d
    b936:	f7f7 fecb 	bl	36d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b93a:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    b93e:	fbb0 f0f2 	udiv	r0, r0, r2
    b942:	bd70      	pop	{r4, r5, r6, pc}
    b944:	5840      	ldr	r0, [r0, r1]
    b946:	2800      	cmp	r0, #0
    b948:	d000      	beq.n	b94c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    b94a:	2001      	movs	r0, #1
    b94c:	4770      	bx	lr
    b94e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    b952:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    b956:	f002 0201 	and.w	r2, r2, #1
    b95a:	03c0      	lsls	r0, r0, #15
    b95c:	d503      	bpl.n	b966 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b95e:	428a      	cmp	r2, r1
    b960:	d101      	bne.n	b966 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b962:	2001      	movs	r0, #1
    b964:	4770      	bx	lr
    b966:	2000      	movs	r0, #0
    b968:	4770      	bx	lr

0000b96a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    b96a:	b510      	push	{r4, lr}
    b96c:	2101      	movs	r1, #1
    b96e:	0788      	lsls	r0, r1, #30
    b970:	f7f7 fe6c 	bl	364c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b974:	2800      	cmp	r0, #0
    b976:	d000      	beq.n	b97a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    b978:	2001      	movs	r0, #1
    b97a:	bd10      	pop	{r4, pc}

0000b97c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    b97c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b980:	2101      	movs	r1, #1
    b982:	6001      	str	r1, [r0, #0]
    b984:	4770      	bx	lr

0000b986 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    b986:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b98a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    b98e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    b992:	f002 0203 	and.w	r2, r2, #3
    b996:	03c9      	lsls	r1, r1, #15
    b998:	d503      	bpl.n	b9a2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b99a:	4282      	cmp	r2, r0
    b99c:	d101      	bne.n	b9a2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b99e:	2001      	movs	r0, #1
    b9a0:	4770      	bx	lr
    b9a2:	2000      	movs	r0, #0
    b9a4:	4770      	bx	lr

0000b9a6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    b9a6:	b510      	push	{r4, lr}
    b9a8:	2100      	movs	r1, #0
    b9aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b9ae:	f7f7 fe4d 	bl	364c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b9b2:	2800      	cmp	r0, #0
    b9b4:	d000      	beq.n	b9b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    b9b6:	2001      	movs	r0, #1
    b9b8:	bd10      	pop	{r4, pc}
    b9ba:	2800      	cmp	r0, #0
    b9bc:	db09      	blt.n	b9d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    b9be:	f000 021f 	and.w	r2, r0, #31
    b9c2:	2101      	movs	r1, #1
    b9c4:	4091      	lsls	r1, r2
    b9c6:	0940      	lsrs	r0, r0, #5
    b9c8:	0080      	lsls	r0, r0, #2
    b9ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b9ce:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b9d2:	4770      	bx	lr
    b9d4:	2800      	cmp	r0, #0
    b9d6:	db0d      	blt.n	b9f4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    b9d8:	f000 021f 	and.w	r2, r0, #31
    b9dc:	2101      	movs	r1, #1
    b9de:	4091      	lsls	r1, r2
    b9e0:	0940      	lsrs	r0, r0, #5
    b9e2:	0080      	lsls	r0, r0, #2
    b9e4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b9e8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b9ec:	f3bf 8f4f 	dsb	sy
    b9f0:	f3bf 8f6f 	isb	sy
    b9f4:	4770      	bx	lr
    b9f6:	1000      	.short	0x1000
    b9f8:	00fa0002 	.word	0x00fa0002
    b9fc:	ffdf0000 	.word	0xffdf0000
    ba00:	4707a0e7 	.word	0x4707a0e7
    ba04:	d67d016b 	.word	0xd67d016b
    ba08:	ce3a8a07 	.word	0xce3a8a07
    ba0c:	d057d4b6 	.word	0xd057d4b6
    ba10:	c542      	.short	0xc542
    ba12:	2800      	cmp	r0, #0
    ba14:	db09      	blt.n	ba2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    ba16:	f000 021f 	and.w	r2, r0, #31
    ba1a:	2101      	movs	r1, #1
    ba1c:	4091      	lsls	r1, r2
    ba1e:	0940      	lsrs	r0, r0, #5
    ba20:	0080      	lsls	r0, r0, #2
    ba22:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ba26:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ba2a:	4770      	bx	lr

0000ba2c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    ba2c:	f3ef 8110 	mrs	r1, PRIMASK
    ba30:	b672      	cpsid	i
    ba32:	7802      	ldrb	r2, [r0, #0]
    ba34:	2a01      	cmp	r2, #1
    ba36:	d001      	beq.n	ba3c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    ba38:	2201      	movs	r2, #1
    ba3a:	e000      	b.n	ba3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    ba3c:	2200      	movs	r2, #0
    ba3e:	2301      	movs	r3, #1
    ba40:	7003      	strb	r3, [r0, #0]
    ba42:	b901      	cbnz	r1, ba46 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    ba44:	b662      	cpsie	i
    ba46:	b10a      	cbz	r2, ba4c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    ba48:	2000      	movs	r0, #0
    ba4a:	4770      	bx	lr
    ba4c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ba50:	4770      	bx	lr

0000ba52 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    ba52:	2100      	movs	r1, #0
    ba54:	7001      	strb	r1, [r0, #0]
    ba56:	4608      	mov	r0, r1
    ba58:	4770      	bx	lr

0000ba5a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    ba5a:	f3ef 8110 	mrs	r1, PRIMASK
    ba5e:	b672      	cpsid	i
    ba60:	2200      	movs	r2, #0
    ba62:	7002      	strb	r2, [r0, #0]
    ba64:	b901      	cbnz	r1, ba68 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    ba66:	b662      	cpsie	i
    ba68:	2000      	movs	r0, #0
    ba6a:	4770      	bx	lr

0000ba6c <mpsl_low_priority_process>:
    ba6c:	f7f7 bf1c 	b.w	38a8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000ba70 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    ba70:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ba74:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ba78:	280f      	cmp	r0, #15
    ba7a:	d001      	beq.n	ba80 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    ba7c:	2000      	movs	r0, #0
    ba7e:	4770      	bx	lr
    ba80:	2001      	movs	r0, #1
    ba82:	4770      	bx	lr

0000ba84 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    ba84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ba88:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ba8c:	280a      	cmp	r0, #10
    ba8e:	d001      	beq.n	ba94 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    ba90:	2000      	movs	r0, #0
    ba92:	4770      	bx	lr
    ba94:	2001      	movs	r0, #1
    ba96:	4770      	bx	lr

0000ba98 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    ba98:	b500      	push	{lr}
    ba9a:	f7ff fff3 	bl	ba84 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ba9e:	b120      	cbz	r0, baaa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    baa0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    baa4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    baa8:	b108      	cbz	r0, baae <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    baaa:	2000      	movs	r0, #0
    baac:	bd00      	pop	{pc}
    baae:	2001      	movs	r0, #1
    bab0:	bd00      	pop	{pc}

0000bab2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    bab2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bab6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    baba:	280e      	cmp	r0, #14
    babc:	d001      	beq.n	bac2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    babe:	2000      	movs	r0, #0
    bac0:	4770      	bx	lr
    bac2:	2001      	movs	r0, #1
    bac4:	4770      	bx	lr

0000bac6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    bac6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    baca:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bace:	2810      	cmp	r0, #16
    bad0:	d001      	beq.n	bad6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    bad2:	2000      	movs	r0, #0
    bad4:	4770      	bx	lr
    bad6:	2001      	movs	r0, #1
    bad8:	4770      	bx	lr

0000bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    bada:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bade:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bae2:	2806      	cmp	r0, #6
    bae4:	d003      	beq.n	baee <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    bae6:	1c40      	adds	r0, r0, #1
    bae8:	d001      	beq.n	baee <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    baea:	2000      	movs	r0, #0
    baec:	4770      	bx	lr
    baee:	2001      	movs	r0, #1
    baf0:	4770      	bx	lr

0000baf2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    baf2:	b500      	push	{lr}
    baf4:	f7ff fff1 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    baf8:	b148      	cbz	r0, bb0e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bafa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bafe:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bb02:	2806      	cmp	r0, #6
    bb04:	d303      	bcc.n	bb0e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bb06:	1c40      	adds	r0, r0, #1
    bb08:	d001      	beq.n	bb0e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bb0a:	2001      	movs	r0, #1
    bb0c:	bd00      	pop	{pc}
    bb0e:	2000      	movs	r0, #0
    bb10:	bd00      	pop	{pc}

0000bb12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    bb12:	b500      	push	{lr}
    bb14:	f7ff ffe1 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bb18:	b138      	cbz	r0, bb2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    bb1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bb1e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bb22:	2806      	cmp	r0, #6
    bb24:	d303      	bcc.n	bb2e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    bb26:	1c40      	adds	r0, r0, #1
    bb28:	d001      	beq.n	bb2e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    bb2a:	2000      	movs	r0, #0
    bb2c:	bd00      	pop	{pc}
    bb2e:	2001      	movs	r0, #1
    bb30:	bd00      	pop	{pc}

0000bb32 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    bb32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bb36:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bb3a:	280d      	cmp	r0, #13
    bb3c:	d001      	beq.n	bb42 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    bb3e:	2000      	movs	r0, #0
    bb40:	4770      	bx	lr
    bb42:	2001      	movs	r0, #1
    bb44:	4770      	bx	lr

0000bb46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    bb46:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bb4a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bb4e:	2808      	cmp	r0, #8
    bb50:	d001      	beq.n	bb56 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    bb52:	2000      	movs	r0, #0
    bb54:	4770      	bx	lr
    bb56:	2001      	movs	r0, #1
    bb58:	4770      	bx	lr

0000bb5a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    bb5a:	2a00      	cmp	r2, #0
    bb5c:	bf04      	itt	eq
    bb5e:	2000      	moveq	r0, #0
    bb60:	4770      	bxeq	lr
    bb62:	1e52      	subs	r2, r2, #1
    bb64:	d007      	beq.n	bb76 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    bb66:	7803      	ldrb	r3, [r0, #0]
    bb68:	f891 c000 	ldrb.w	ip, [r1]
    bb6c:	4563      	cmp	r3, ip
    bb6e:	bf04      	itt	eq
    bb70:	1c40      	addeq	r0, r0, #1
    bb72:	1c49      	addeq	r1, r1, #1
    bb74:	d0f5      	beq.n	bb62 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    bb76:	7800      	ldrb	r0, [r0, #0]
    bb78:	7809      	ldrb	r1, [r1, #0]
    bb7a:	1a40      	subs	r0, r0, r1
    bb7c:	4770      	bx	lr

0000bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    bb7e:	b4f0      	push	{r4, r5, r6, r7}
    bb80:	ea80 0c01 	eor.w	ip, r0, r1
    bb84:	4603      	mov	r3, r0
    bb86:	f01c 0f03 	tst.w	ip, #3
    bb8a:	d13c      	bne.n	bc06 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bb8c:	f013 0f03 	tst.w	r3, #3
    bb90:	d00b      	beq.n	bbaa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    bb92:	2a00      	cmp	r2, #0
    bb94:	bf04      	itt	eq
    bb96:	bcf0      	popeq	{r4, r5, r6, r7}
    bb98:	4770      	bxeq	lr
    bb9a:	f811 cb01 	ldrb.w	ip, [r1], #1
    bb9e:	f803 cb01 	strb.w	ip, [r3], #1
    bba2:	1e52      	subs	r2, r2, #1
    bba4:	f013 0f03 	tst.w	r3, #3
    bba8:	d1f3      	bne.n	bb92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    bbaa:	2a03      	cmp	r2, #3
    bbac:	d94f      	bls.n	bc4e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bbae:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bbb2:	d24c      	bcs.n	bc4e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bbb4:	f1c2 0c00 	rsb	ip, r2, #0
    bbb8:	ea4f 74ec 	mov.w	r4, ip, asr #31
    bbbc:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    bbc0:	ea4f 0cac 	mov.w	ip, ip, asr #2
    bbc4:	f1cc 0c00 	rsb	ip, ip, #0
    bbc8:	f1bc 0f00 	cmp.w	ip, #0
    bbcc:	dd1b      	ble.n	bc06 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bbce:	1f0d      	subs	r5, r1, #4
    bbd0:	1f1c      	subs	r4, r3, #4
    bbd2:	f01c 0f01 	tst.w	ip, #1
    bbd6:	d003      	beq.n	bbe0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    bbd8:	f855 6f04 	ldr.w	r6, [r5, #4]!
    bbdc:	f844 6f04 	str.w	r6, [r4, #4]!
    bbe0:	ea5f 066c 	movs.w	r6, ip, asr #1
    bbe4:	d007      	beq.n	bbf6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    bbe6:	686f      	ldr	r7, [r5, #4]
    bbe8:	6067      	str	r7, [r4, #4]
    bbea:	f855 7f08 	ldr.w	r7, [r5, #8]!
    bbee:	f844 7f08 	str.w	r7, [r4, #8]!
    bbf2:	1e76      	subs	r6, r6, #1
    bbf4:	d1f7      	bne.n	bbe6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    bbf6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    bbfa:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    bbfe:	f1cc 0c00 	rsb	ip, ip, #0
    bc02:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    bc06:	2a00      	cmp	r2, #0
    bc08:	bf04      	itt	eq
    bc0a:	bcf0      	popeq	{r4, r5, r6, r7}
    bc0c:	4770      	bxeq	lr
    bc0e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bc12:	d226      	bcs.n	bc62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bc14:	2a00      	cmp	r2, #0
    bc16:	bfdc      	itt	le
    bc18:	bcf0      	pople	{r4, r5, r6, r7}
    bc1a:	4770      	bxle	lr
    bc1c:	1e49      	subs	r1, r1, #1
    bc1e:	1e5b      	subs	r3, r3, #1
    bc20:	f012 0f01 	tst.w	r2, #1
    bc24:	d003      	beq.n	bc2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    bc26:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    bc2a:	f803 cf01 	strb.w	ip, [r3, #1]!
    bc2e:	1052      	asrs	r2, r2, #1
    bc30:	bf04      	itt	eq
    bc32:	bcf0      	popeq	{r4, r5, r6, r7}
    bc34:	4770      	bxeq	lr
    bc36:	f891 c001 	ldrb.w	ip, [r1, #1]
    bc3a:	f883 c001 	strb.w	ip, [r3, #1]
    bc3e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    bc42:	f803 cf02 	strb.w	ip, [r3, #2]!
    bc46:	1e52      	subs	r2, r2, #1
    bc48:	d1f5      	bne.n	bc36 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    bc4a:	bcf0      	pop	{r4, r5, r6, r7}
    bc4c:	4770      	bx	lr
    bc4e:	2a04      	cmp	r2, #4
    bc50:	d3d9      	bcc.n	bc06 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bc52:	f851 cb04 	ldr.w	ip, [r1], #4
    bc56:	1f12      	subs	r2, r2, #4
    bc58:	f843 cb04 	str.w	ip, [r3], #4
    bc5c:	2a04      	cmp	r2, #4
    bc5e:	d2f8      	bcs.n	bc52 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    bc60:	e7d1      	b.n	bc06 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bc62:	f811 cb01 	ldrb.w	ip, [r1], #1
    bc66:	f803 cb01 	strb.w	ip, [r3], #1
    bc6a:	1e52      	subs	r2, r2, #1
    bc6c:	d1f9      	bne.n	bc62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bc6e:	bcf0      	pop	{r4, r5, r6, r7}
    bc70:	4770      	bx	lr

0000bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    bc72:	b470      	push	{r4, r5, r6}
    bc74:	4603      	mov	r3, r0
    bc76:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    bc7a:	f010 0f03 	tst.w	r0, #3
    bc7e:	d009      	beq.n	bc94 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    bc80:	2a00      	cmp	r2, #0
    bc82:	bf04      	itt	eq
    bc84:	bc70      	popeq	{r4, r5, r6}
    bc86:	4770      	bxeq	lr
    bc88:	f803 cb01 	strb.w	ip, [r3], #1
    bc8c:	1e52      	subs	r2, r2, #1
    bc8e:	f013 0f03 	tst.w	r3, #3
    bc92:	d1f5      	bne.n	bc80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    bc94:	b2c9      	uxtb	r1, r1
    bc96:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    bc9a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    bc9e:	2a03      	cmp	r2, #3
    bca0:	d939      	bls.n	bd16 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    bca2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bca6:	d236      	bcs.n	bd16 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    bca8:	4251      	negs	r1, r2
    bcaa:	17cc      	asrs	r4, r1, #31
    bcac:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    bcb0:	1089      	asrs	r1, r1, #2
    bcb2:	424e      	negs	r6, r1
    bcb4:	2e00      	cmp	r6, #0
    bcb6:	dd11      	ble.n	bcdc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bcb8:	1f19      	subs	r1, r3, #4
    bcba:	f016 0f01 	tst.w	r6, #1
    bcbe:	bf18      	it	ne
    bcc0:	f841 5f04 	strne.w	r5, [r1, #4]!
    bcc4:	1074      	asrs	r4, r6, #1
    bcc6:	d004      	beq.n	bcd2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    bcc8:	604d      	str	r5, [r1, #4]
    bcca:	f841 5f08 	str.w	r5, [r1, #8]!
    bcce:	1e64      	subs	r4, r4, #1
    bcd0:	d1fa      	bne.n	bcc8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    bcd2:	4271      	negs	r1, r6
    bcd4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    bcd8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    bcdc:	2a00      	cmp	r2, #0
    bcde:	bf04      	itt	eq
    bce0:	bc70      	popeq	{r4, r5, r6}
    bce2:	4770      	bxeq	lr
    bce4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bce8:	d21d      	bcs.n	bd26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    bcea:	2a00      	cmp	r2, #0
    bcec:	bfdc      	itt	le
    bcee:	bc70      	pople	{r4, r5, r6}
    bcf0:	4770      	bxle	lr
    bcf2:	1e59      	subs	r1, r3, #1
    bcf4:	f012 0f01 	tst.w	r2, #1
    bcf8:	bf18      	it	ne
    bcfa:	f801 cf01 	strbne.w	ip, [r1, #1]!
    bcfe:	1052      	asrs	r2, r2, #1
    bd00:	bf04      	itt	eq
    bd02:	bc70      	popeq	{r4, r5, r6}
    bd04:	4770      	bxeq	lr
    bd06:	f881 c001 	strb.w	ip, [r1, #1]
    bd0a:	f801 cf02 	strb.w	ip, [r1, #2]!
    bd0e:	1e52      	subs	r2, r2, #1
    bd10:	d1f9      	bne.n	bd06 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    bd12:	bc70      	pop	{r4, r5, r6}
    bd14:	4770      	bx	lr
    bd16:	2a04      	cmp	r2, #4
    bd18:	d3e0      	bcc.n	bcdc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bd1a:	1f12      	subs	r2, r2, #4
    bd1c:	f843 5b04 	str.w	r5, [r3], #4
    bd20:	2a04      	cmp	r2, #4
    bd22:	d2fa      	bcs.n	bd1a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    bd24:	e7da      	b.n	bcdc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bd26:	f803 cb01 	strb.w	ip, [r3], #1
    bd2a:	1e52      	subs	r2, r2, #1
    bd2c:	d1fb      	bne.n	bd26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    bd2e:	bc70      	pop	{r4, r5, r6}
    bd30:	4770      	bx	lr
    bd32:	f04f 30ff 	mov.w	r0, #4294967295
    bd36:	4770      	bx	lr
    bd38:	2000      	movs	r0, #0
    bd3a:	4770      	bx	lr
    bd3c:	2000      	movs	r0, #0
    bd3e:	4770      	bx	lr
    bd40:	f04f 30ff 	mov.w	r0, #4294967295
    bd44:	4770      	bx	lr
    bd46:	4770      	bx	lr
    bd48:	4770      	bx	lr
    bd4a:	f04f 30ff 	mov.w	r0, #4294967295
    bd4e:	4770      	bx	lr
    bd50:	f04f 30ff 	mov.w	r0, #4294967295
    bd54:	4770      	bx	lr
    bd56:	2100      	movs	r1, #0
    bd58:	7001      	strb	r1, [r0, #0]
    bd5a:	4770      	bx	lr
    bd5c:	f04f 30ff 	mov.w	r0, #4294967295
    bd60:	4770      	bx	lr
    bd62:	f04f 30ff 	mov.w	r0, #4294967295
    bd66:	4770      	bx	lr
    bd68:	2000      	movs	r0, #0
    bd6a:	4770      	bx	lr
    bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd6e:	4604      	mov	r4, r0
    bd70:	f100 0003 	add.w	r0, r0, #3
    bd74:	f020 0003 	bic.w	r0, r0, #3
    bd78:	0015      	movs	r5, r2
    bd7a:	9000      	str	r0, [sp, #0]
    bd7c:	460e      	mov	r6, r1
    bd7e:	788a      	ldrb	r2, [r1, #2]
    bd80:	7849      	ldrb	r1, [r1, #1]
    bd82:	d000      	beq.n	bd86 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x114>
    bd84:	2000      	movs	r0, #0
    bd86:	f7f8 f913 	bl	3fb0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    bd8a:	9900      	ldr	r1, [sp, #0]
    bd8c:	4408      	add	r0, r1
    bd8e:	9000      	str	r0, [sp, #0]
    bd90:	78b1      	ldrb	r1, [r6, #2]
    bd92:	b131      	cbz	r1, bda2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x130>
    bd94:	b105      	cbz	r5, bd98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x126>
    bd96:	2000      	movs	r0, #0
    bd98:	f7f8 fb6a 	bl	4470 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    bd9c:	9900      	ldr	r1, [sp, #0]
    bd9e:	4408      	add	r0, r1
    bda0:	9000      	str	r0, [sp, #0]
    bda2:	462a      	mov	r2, r5
    bda4:	4631      	mov	r1, r6
    bda6:	4668      	mov	r0, sp
    bda8:	f000 f807 	bl	bdba <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x148>
    bdac:	9800      	ldr	r0, [sp, #0]
    bdae:	1dc0      	adds	r0, r0, #7
    bdb0:	f020 0007 	bic.w	r0, r0, #7
    bdb4:	9000      	str	r0, [sp, #0]
    bdb6:	1b00      	subs	r0, r0, r4
    bdb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdbe:	4606      	mov	r6, r0
    bdc0:	460c      	mov	r4, r1
    bdc2:	7808      	ldrb	r0, [r1, #0]
    bdc4:	7849      	ldrb	r1, [r1, #1]
    bdc6:	2700      	movs	r7, #0
    bdc8:	4408      	add	r0, r1
    bdca:	4691      	mov	r9, r2
    bdcc:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    bdd0:	463d      	mov	r5, r7
    bdd2:	e00e      	b.n	bdf2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    bdd4:	79a3      	ldrb	r3, [r4, #6]
    bdd6:	2b02      	cmp	r3, #2
    bdd8:	d200      	bcs.n	bddc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x16a>
    bdda:	2302      	movs	r3, #2
    bddc:	7962      	ldrb	r2, [r4, #5]
    bdde:	2a03      	cmp	r2, #3
    bde0:	d200      	bcs.n	bde4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x172>
    bde2:	2203      	movs	r2, #3
    bde4:	7921      	ldrb	r1, [r4, #4]
    bde6:	78e0      	ldrb	r0, [r4, #3]
    bde8:	f000 ff01 	bl	cbee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    bdec:	1c6d      	adds	r5, r5, #1
    bdee:	4407      	add	r7, r0
    bdf0:	b2ed      	uxtb	r5, r5
    bdf2:	4545      	cmp	r5, r8
    bdf4:	d3ee      	bcc.n	bdd4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x162>
    bdf6:	6830      	ldr	r0, [r6, #0]
    bdf8:	1cc0      	adds	r0, r0, #3
    bdfa:	f020 0003 	bic.w	r0, r0, #3
    bdfe:	6030      	str	r0, [r6, #0]
    be00:	f1b9 0f00 	cmp.w	r9, #0
    be04:	d000      	beq.n	be08 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    be06:	2000      	movs	r0, #0
    be08:	463a      	mov	r2, r7
    be0a:	4641      	mov	r1, r8
    be0c:	f7f8 faa8 	bl	4360 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    be10:	6831      	ldr	r1, [r6, #0]
    be12:	4408      	add	r0, r1
    be14:	6030      	str	r0, [r6, #0]
    be16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000be1a <sdc_soc_ecb_block_encrypt>:
    be1a:	b530      	push	{r4, r5, lr}
    be1c:	460d      	mov	r5, r1
    be1e:	b08d      	sub	sp, #52	; 0x34
    be20:	4614      	mov	r4, r2
    be22:	4601      	mov	r1, r0
    be24:	2210      	movs	r2, #16
    be26:	4668      	mov	r0, sp
    be28:	f7ff fea9 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    be2c:	2210      	movs	r2, #16
    be2e:	4629      	mov	r1, r5
    be30:	a804      	add	r0, sp, #16
    be32:	f7ff fea4 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    be36:	4668      	mov	r0, sp
    be38:	f7f8 fbe4 	bl	4604 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    be3c:	b118      	cbz	r0, be46 <sdc_soc_ecb_block_encrypt+0x2c>
    be3e:	f06f 0015 	mvn.w	r0, #21
    be42:	b00d      	add	sp, #52	; 0x34
    be44:	bd30      	pop	{r4, r5, pc}
    be46:	2210      	movs	r2, #16
    be48:	4620      	mov	r0, r4
    be4a:	a908      	add	r1, sp, #32
    be4c:	f7ff fe97 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    be50:	2000      	movs	r0, #0
    be52:	e7f6      	b.n	be42 <sdc_soc_ecb_block_encrypt+0x28>

0000be54 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    be54:	2000      	movs	r0, #0
    be56:	4770      	bx	lr

0000be58 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    be58:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    be5a:	4604      	mov	r4, r0
    be5c:	1d01      	adds	r1, r0, #4
    be5e:	4668      	mov	r0, sp
    be60:	f7f9 ffe2 	bl	5e28 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    be64:	2800      	cmp	r0, #0
    be66:	d004      	beq.n	be72 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    be68:	4669      	mov	r1, sp
    be6a:	4620      	mov	r0, r4
    be6c:	f000 f848 	bl	bf00 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    be70:	2001      	movs	r0, #1
    be72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000be74 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    be74:	b50e      	push	{r1, r2, r3, lr}
    be76:	4601      	mov	r1, r0
    be78:	4668      	mov	r0, sp
    be7a:	f000 f827 	bl	becc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    be7e:	4668      	mov	r0, sp
    be80:	f7f9 fffc 	bl	5e7c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    be84:	bd0e      	pop	{r1, r2, r3, pc}

0000be86 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    be86:	b510      	push	{r4, lr}
    be88:	4604      	mov	r4, r0
    be8a:	4620      	mov	r0, r4
    be8c:	f7f7 ff98 	bl	3dc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    be90:	2800      	cmp	r0, #0
    be92:	d006      	beq.n	bea2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    be94:	78a1      	ldrb	r1, [r4, #2]
    be96:	7820      	ldrb	r0, [r4, #0]
    be98:	f000 f804 	bl	bea4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    be9c:	2800      	cmp	r0, #0
    be9e:	d0f4      	beq.n	be8a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    bea0:	2001      	movs	r0, #1
    bea2:	bd10      	pop	{r4, pc}
    bea4:	b570      	push	{r4, r5, r6, lr}
    bea6:	460c      	mov	r4, r1
    bea8:	4605      	mov	r5, r0
    beaa:	f7f7 fffd 	bl	3ea8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    beae:	2800      	cmp	r0, #0
    beb0:	d002      	beq.n	beb8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    beb2:	2d3e      	cmp	r5, #62	; 0x3e
    beb4:	d001      	beq.n	beba <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    beb6:	2001      	movs	r0, #1
    beb8:	bd70      	pop	{r4, r5, r6, pc}
    beba:	2c12      	cmp	r4, #18
    bebc:	d004      	beq.n	bec8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    bebe:	4620      	mov	r0, r4
    bec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bec4:	f7f8 b80c 	b.w	3ee0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    bec8:	2000      	movs	r0, #0
    beca:	bd70      	pop	{r4, r5, r6, pc}

0000becc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    becc:	880a      	ldrh	r2, [r1, #0]
    bece:	f3c2 020b 	ubfx	r2, r2, #0, #12
    bed2:	8002      	strh	r2, [r0, #0]
    bed4:	884a      	ldrh	r2, [r1, #2]
    bed6:	8042      	strh	r2, [r0, #2]
    bed8:	784a      	ldrb	r2, [r1, #1]
    beda:	0993      	lsrs	r3, r2, #6
    bedc:	2200      	movs	r2, #0
    bede:	7142      	strb	r2, [r0, #5]
    bee0:	784b      	ldrb	r3, [r1, #1]
    bee2:	f3c3 1301 	ubfx	r3, r3, #4, #2
    bee6:	b11b      	cbz	r3, bef0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    bee8:	2b01      	cmp	r3, #1
    beea:	d005      	beq.n	bef8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    beec:	2b02      	cmp	r3, #2
    beee:	d005      	beq.n	befc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    bef0:	7102      	strb	r2, [r0, #4]
    bef2:	1d09      	adds	r1, r1, #4
    bef4:	6081      	str	r1, [r0, #8]
    bef6:	4770      	bx	lr
    bef8:	2201      	movs	r2, #1
    befa:	e7f9      	b.n	bef0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    befc:	2202      	movs	r2, #2
    befe:	e7f7      	b.n	bef0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000bf00 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    bf00:	b510      	push	{r4, lr}
    bf02:	460c      	mov	r4, r1
    bf04:	7809      	ldrb	r1, [r1, #0]
    bf06:	7001      	strb	r1, [r0, #0]
    bf08:	7841      	ldrb	r1, [r0, #1]
    bf0a:	f021 010f 	bic.w	r1, r1, #15
    bf0e:	7041      	strb	r1, [r0, #1]
    bf10:	8822      	ldrh	r2, [r4, #0]
    bf12:	f3c2 2203 	ubfx	r2, r2, #8, #4
    bf16:	4311      	orrs	r1, r2
    bf18:	7041      	strb	r1, [r0, #1]
    bf1a:	78a2      	ldrb	r2, [r4, #2]
    bf1c:	7082      	strb	r2, [r0, #2]
    bf1e:	8862      	ldrh	r2, [r4, #2]
    bf20:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    bf24:	0a12      	lsrs	r2, r2, #8
    bf26:	70c2      	strb	r2, [r0, #3]
    bf28:	7041      	strb	r1, [r0, #1]
    bf2a:	7922      	ldrb	r2, [r4, #4]
    bf2c:	f002 0203 	and.w	r2, r2, #3
    bf30:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    bf34:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    bf38:	7041      	strb	r1, [r0, #1]
    bf3a:	7962      	ldrb	r2, [r4, #5]
    bf3c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    bf40:	7041      	strb	r1, [r0, #1]
    bf42:	68a1      	ldr	r1, [r4, #8]
    bf44:	1d02      	adds	r2, r0, #4
    bf46:	4291      	cmp	r1, r2
    bf48:	d006      	beq.n	bf58 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    bf4a:	8862      	ldrh	r2, [r4, #2]
    bf4c:	2afb      	cmp	r2, #251	; 0xfb
    bf4e:	d300      	bcc.n	bf52 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    bf50:	22fb      	movs	r2, #251	; 0xfb
    bf52:	1d00      	adds	r0, r0, #4
    bf54:	f7ff fe13 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    bf58:	78a0      	ldrb	r0, [r4, #2]
    bf5a:	1d00      	adds	r0, r0, #4
    bf5c:	b2c0      	uxtb	r0, r0
    bf5e:	bd10      	pop	{r4, pc}

0000bf60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    bf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf64:	4604      	mov	r4, r0
    bf66:	780f      	ldrb	r7, [r1, #0]
    bf68:	2000      	movs	r0, #0
    bf6a:	250c      	movs	r5, #12
    bf6c:	2605      	movs	r6, #5
    bf6e:	223e      	movs	r2, #62	; 0x3e
    bf70:	23ff      	movs	r3, #255	; 0xff
    bf72:	2f1b      	cmp	r7, #27
    bf74:	d27d      	bcs.n	c072 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    bf76:	e8df f007 	tbb	[pc, r7]
    bf7a:	0eeb      	.short	0x0eeb
    bf7c:	632d2725 	.word	0x632d2725
    bf80:	af9b816d 	.word	0xaf9b816d
    bf84:	e2c7bcb1 	.word	0xe2c7bcb1
    bf88:	31ebebf5 	.word	0x31ebebf5
    bf8c:	f2fed5d2 	.word	0xf2fed5d2
    bf90:	eeeff0f1 	.word	0xeeeff0f1
    bf94:	00ed      	.short	0x00ed
    bf96:	7025      	strb	r5, [r4, #0]
    bf98:	7908      	ldrb	r0, [r1, #4]
    bf9a:	70a0      	strb	r0, [r4, #2]
    bf9c:	7948      	ldrb	r0, [r1, #5]
    bf9e:	70e0      	strb	r0, [r4, #3]
    bfa0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    bfa4:	0a00      	lsrs	r0, r0, #8
    bfa6:	7120      	strb	r0, [r4, #4]
    bfa8:	79c8      	ldrb	r0, [r1, #7]
    bfaa:	7160      	strb	r0, [r4, #5]
    bfac:	7a08      	ldrb	r0, [r1, #8]
    bfae:	71a0      	strb	r0, [r4, #6]
    bfb0:	8908      	ldrh	r0, [r1, #8]
    bfb2:	0a00      	lsrs	r0, r0, #8
    bfb4:	71e0      	strb	r0, [r4, #7]
    bfb6:	7a88      	ldrb	r0, [r1, #10]
    bfb8:	7220      	strb	r0, [r4, #8]
    bfba:	8948      	ldrh	r0, [r1, #10]
    bfbc:	0a00      	lsrs	r0, r0, #8
    bfbe:	7260      	strb	r0, [r4, #9]
    bfc0:	2008      	movs	r0, #8
    bfc2:	e0c2      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bfc4:	2010      	movs	r0, #16
    bfc6:	e000      	b.n	bfca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    bfc8:	201a      	movs	r0, #26
    bfca:	7020      	strb	r0, [r4, #0]
    bfcc:	7908      	ldrb	r0, [r1, #4]
    bfce:	70a0      	strb	r0, [r4, #2]
    bfd0:	2001      	movs	r0, #1
    bfd2:	e0ba      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bfd4:	4620      	mov	r0, r4
    bfd6:	f000 f947 	bl	c268 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    bfda:	e0b4      	b.n	c146 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    bfdc:	7022      	strb	r2, [r4, #0]
    bfde:	200a      	movs	r0, #10
    bfe0:	70a0      	strb	r0, [r4, #2]
    bfe2:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    bfe6:	70e0      	strb	r0, [r4, #3]
    bfe8:	7888      	ldrb	r0, [r1, #2]
    bfea:	7120      	strb	r0, [r4, #4]
    bfec:	8848      	ldrh	r0, [r1, #2]
    bfee:	0a00      	lsrs	r0, r0, #8
    bff0:	7160      	strb	r0, [r4, #5]
    bff2:	7908      	ldrb	r0, [r1, #4]
    bff4:	71a0      	strb	r0, [r4, #6]
    bff6:	7948      	ldrb	r0, [r1, #5]
    bff8:	71e0      	strb	r0, [r4, #7]
    bffa:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bffe:	60a0      	str	r0, [r4, #8]
    c000:	8948      	ldrh	r0, [r1, #10]
    c002:	81a0      	strh	r0, [r4, #12]
    c004:	68c8      	ldr	r0, [r1, #12]
    c006:	f8c4 000e 	str.w	r0, [r4, #14]
    c00a:	8a08      	ldrh	r0, [r1, #16]
    c00c:	8260      	strh	r0, [r4, #18]
    c00e:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c012:	6160      	str	r0, [r4, #20]
    c014:	8ac8      	ldrh	r0, [r1, #22]
    c016:	8320      	strh	r0, [r4, #24]
    c018:	7e08      	ldrb	r0, [r1, #24]
    c01a:	76a0      	strb	r0, [r4, #26]
    c01c:	8b08      	ldrh	r0, [r1, #24]
    c01e:	0a00      	lsrs	r0, r0, #8
    c020:	76e0      	strb	r0, [r4, #27]
    c022:	7e88      	ldrb	r0, [r1, #26]
    c024:	7720      	strb	r0, [r4, #28]
    c026:	8b48      	ldrh	r0, [r1, #26]
    c028:	0a00      	lsrs	r0, r0, #8
    c02a:	7760      	strb	r0, [r4, #29]
    c02c:	7f08      	ldrb	r0, [r1, #28]
    c02e:	77a0      	strb	r0, [r4, #30]
    c030:	8b88      	ldrh	r0, [r1, #28]
    c032:	0a00      	lsrs	r0, r0, #8
    c034:	77e0      	strb	r0, [r4, #31]
    c036:	7f88      	ldrb	r0, [r1, #30]
    c038:	f884 0020 	strb.w	r0, [r4, #32]
    c03c:	201f      	movs	r0, #31
    c03e:	e084      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c040:	7022      	strb	r2, [r4, #0]
    c042:	2014      	movs	r0, #20
    c044:	70a0      	strb	r0, [r4, #2]
    c046:	7908      	ldrb	r0, [r1, #4]
    c048:	70e0      	strb	r0, [r4, #3]
    c04a:	8888      	ldrh	r0, [r1, #4]
    c04c:	0a00      	lsrs	r0, r0, #8
    c04e:	7120      	strb	r0, [r4, #4]
    c050:	7988      	ldrb	r0, [r1, #6]
    c052:	e0a8      	b.n	c1a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c054:	7022      	strb	r2, [r4, #0]
    c056:	2004      	movs	r0, #4
    c058:	70a0      	strb	r0, [r4, #2]
    c05a:	7908      	ldrb	r0, [r1, #4]
    c05c:	70e0      	strb	r0, [r4, #3]
    c05e:	7988      	ldrb	r0, [r1, #6]
    c060:	7120      	strb	r0, [r4, #4]
    c062:	88c8      	ldrh	r0, [r1, #6]
    c064:	0a00      	lsrs	r0, r0, #8
    c066:	7160      	strb	r0, [r4, #5]
    c068:	6888      	ldr	r0, [r1, #8]
    c06a:	f8c4 0006 	str.w	r0, [r4, #6]
    c06e:	68c8      	ldr	r0, [r1, #12]
    c070:	e000      	b.n	c074 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c072:	e06d      	b.n	c150 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c074:	f8c4 000a 	str.w	r0, [r4, #10]
    c078:	200c      	movs	r0, #12
    c07a:	e066      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c07c:	7022      	strb	r2, [r4, #0]
    c07e:	2003      	movs	r0, #3
    c080:	70a0      	strb	r0, [r4, #2]
    c082:	7908      	ldrb	r0, [r1, #4]
    c084:	70e0      	strb	r0, [r4, #3]
    c086:	7988      	ldrb	r0, [r1, #6]
    c088:	7120      	strb	r0, [r4, #4]
    c08a:	88c8      	ldrh	r0, [r1, #6]
    c08c:	0a00      	lsrs	r0, r0, #8
    c08e:	7160      	strb	r0, [r4, #5]
    c090:	7a08      	ldrb	r0, [r1, #8]
    c092:	71a0      	strb	r0, [r4, #6]
    c094:	8908      	ldrh	r0, [r1, #8]
    c096:	0a00      	lsrs	r0, r0, #8
    c098:	71e0      	strb	r0, [r4, #7]
    c09a:	7a88      	ldrb	r0, [r1, #10]
    c09c:	7220      	strb	r0, [r4, #8]
    c09e:	8948      	ldrh	r0, [r1, #10]
    c0a0:	0a00      	lsrs	r0, r0, #8
    c0a2:	7260      	strb	r0, [r4, #9]
    c0a4:	7b08      	ldrb	r0, [r1, #12]
    c0a6:	72a0      	strb	r0, [r4, #10]
    c0a8:	8988      	ldrh	r0, [r1, #12]
    c0aa:	0a00      	lsrs	r0, r0, #8
    c0ac:	72e0      	strb	r0, [r4, #11]
    c0ae:	e0d9      	b.n	c264 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c0b0:	7022      	strb	r2, [r4, #0]
    c0b2:	70a6      	strb	r6, [r4, #2]
    c0b4:	7908      	ldrb	r0, [r1, #4]
    c0b6:	70e0      	strb	r0, [r4, #3]
    c0b8:	8888      	ldrh	r0, [r1, #4]
    c0ba:	0a00      	lsrs	r0, r0, #8
    c0bc:	7120      	strb	r0, [r4, #4]
    c0be:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c0c2:	f8c4 0005 	str.w	r0, [r4, #5]
    c0c6:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c0ca:	f8c4 0009 	str.w	r0, [r4, #9]
    c0ce:	89c8      	ldrh	r0, [r1, #14]
    c0d0:	f8a4 000d 	strh.w	r0, [r4, #13]
    c0d4:	200d      	movs	r0, #13
    c0d6:	e038      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c0d8:	2011      	movs	r0, #17
    c0da:	e044      	b.n	c166 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    c0dc:	7026      	strb	r6, [r4, #0]
    c0de:	7908      	ldrb	r0, [r1, #4]
    c0e0:	70a0      	strb	r0, [r4, #2]
    c0e2:	7948      	ldrb	r0, [r1, #5]
    c0e4:	70e0      	strb	r0, [r4, #3]
    c0e6:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c0ea:	0a00      	lsrs	r0, r0, #8
    c0ec:	7120      	strb	r0, [r4, #4]
    c0ee:	79c8      	ldrb	r0, [r1, #7]
    c0f0:	e059      	b.n	c1a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c0f2:	2008      	movs	r0, #8
    c0f4:	7020      	strb	r0, [r4, #0]
    c0f6:	7908      	ldrb	r0, [r1, #4]
    c0f8:	70a0      	strb	r0, [r4, #2]
    c0fa:	7988      	ldrb	r0, [r1, #6]
    c0fc:	70e0      	strb	r0, [r4, #3]
    c0fe:	88c8      	ldrh	r0, [r1, #6]
    c100:	0a00      	lsrs	r0, r0, #8
    c102:	7120      	strb	r0, [r4, #4]
    c104:	7a08      	ldrb	r0, [r1, #8]
    c106:	e04e      	b.n	c1a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c108:	2030      	movs	r0, #48	; 0x30
    c10a:	7020      	strb	r0, [r4, #0]
    c10c:	7908      	ldrb	r0, [r1, #4]
    c10e:	70a0      	strb	r0, [r4, #2]
    c110:	7988      	ldrb	r0, [r1, #6]
    c112:	70e0      	strb	r0, [r4, #3]
    c114:	88c8      	ldrh	r0, [r1, #6]
    c116:	0a00      	lsrs	r0, r0, #8
    c118:	7120      	strb	r0, [r4, #4]
    c11a:	2003      	movs	r0, #3
    c11c:	e015      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c11e:	7022      	strb	r2, [r4, #0]
    c120:	2007      	movs	r0, #7
    c122:	e045      	b.n	c1b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c124:	7022      	strb	r2, [r4, #0]
    c126:	70a5      	strb	r5, [r4, #2]
    c128:	7908      	ldrb	r0, [r1, #4]
    c12a:	70e0      	strb	r0, [r4, #3]
    c12c:	7988      	ldrb	r0, [r1, #6]
    c12e:	7120      	strb	r0, [r4, #4]
    c130:	88c8      	ldrh	r0, [r1, #6]
    c132:	0a00      	lsrs	r0, r0, #8
    c134:	7160      	strb	r0, [r4, #5]
    c136:	7a08      	ldrb	r0, [r1, #8]
    c138:	71a0      	strb	r0, [r4, #6]
    c13a:	7a48      	ldrb	r0, [r1, #9]
    c13c:	e028      	b.n	c190 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    c13e:	4620      	mov	r0, r4
    c140:	1d09      	adds	r1, r1, #4
    c142:	f7f7 fe83 	bl	3e4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    c146:	2800      	cmp	r0, #0
    c148:	d002      	beq.n	c150 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c14a:	7060      	strb	r0, [r4, #1]
    c14c:	1c80      	adds	r0, r0, #2
    c14e:	b2c0      	uxtb	r0, r0
    c150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c154:	e073      	b.n	c23e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    c156:	e047      	b.n	c1e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c158:	e028      	b.n	c1ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    c15a:	e053      	b.n	c204 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    c15c:	e061      	b.n	c222 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    c15e:	e01a      	b.n	c196 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    c160:	e009      	b.n	c176 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    c162:	e7ff      	b.n	c164 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c164:	2057      	movs	r0, #87	; 0x57
    c166:	7020      	strb	r0, [r4, #0]
    c168:	7908      	ldrb	r0, [r1, #4]
    c16a:	70a0      	strb	r0, [r4, #2]
    c16c:	8888      	ldrh	r0, [r1, #4]
    c16e:	0a00      	lsrs	r0, r0, #8
    c170:	70e0      	strb	r0, [r4, #3]
    c172:	2002      	movs	r0, #2
    c174:	e7e9      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c176:	7022      	strb	r2, [r4, #0]
    c178:	2012      	movs	r0, #18
    c17a:	70a0      	strb	r0, [r4, #2]
    c17c:	7908      	ldrb	r0, [r1, #4]
    c17e:	70e0      	strb	r0, [r4, #3]
    c180:	7948      	ldrb	r0, [r1, #5]
    c182:	7120      	strb	r0, [r4, #4]
    c184:	7988      	ldrb	r0, [r1, #6]
    c186:	7160      	strb	r0, [r4, #5]
    c188:	88c8      	ldrh	r0, [r1, #6]
    c18a:	0a00      	lsrs	r0, r0, #8
    c18c:	71a0      	strb	r0, [r4, #6]
    c18e:	7a08      	ldrb	r0, [r1, #8]
    c190:	71e0      	strb	r0, [r4, #7]
    c192:	2006      	movs	r0, #6
    c194:	e7d9      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c196:	7023      	strb	r3, [r4, #0]
    c198:	20a1      	movs	r0, #161	; 0xa1
    c19a:	70a0      	strb	r0, [r4, #2]
    c19c:	7908      	ldrb	r0, [r1, #4]
    c19e:	70e0      	strb	r0, [r4, #3]
    c1a0:	7948      	ldrb	r0, [r1, #5]
    c1a2:	7120      	strb	r0, [r4, #4]
    c1a4:	2000      	movs	r0, #0
    c1a6:	7160      	strb	r0, [r4, #5]
    c1a8:	2004      	movs	r0, #4
    c1aa:	e7ce      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c1ac:	7023      	strb	r3, [r4, #0]
    c1ae:	20a2      	movs	r0, #162	; 0xa2
    c1b0:	70a0      	strb	r0, [r4, #2]
    c1b2:	7908      	ldrb	r0, [r1, #4]
    c1b4:	70e0      	strb	r0, [r4, #3]
    c1b6:	8888      	ldrh	r0, [r1, #4]
    c1b8:	0a00      	lsrs	r0, r0, #8
    c1ba:	7120      	strb	r0, [r4, #4]
    c1bc:	7988      	ldrb	r0, [r1, #6]
    c1be:	7160      	strb	r0, [r4, #5]
    c1c0:	88c8      	ldrh	r0, [r1, #6]
    c1c2:	0a00      	lsrs	r0, r0, #8
    c1c4:	71a0      	strb	r0, [r4, #6]
    c1c6:	7a08      	ldrb	r0, [r1, #8]
    c1c8:	71e0      	strb	r0, [r4, #7]
    c1ca:	8908      	ldrh	r0, [r1, #8]
    c1cc:	0a00      	lsrs	r0, r0, #8
    c1ce:	7220      	strb	r0, [r4, #8]
    c1d0:	7a88      	ldrb	r0, [r1, #10]
    c1d2:	7260      	strb	r0, [r4, #9]
    c1d4:	8948      	ldrh	r0, [r1, #10]
    c1d6:	0a00      	lsrs	r0, r0, #8
    c1d8:	72a0      	strb	r0, [r4, #10]
    c1da:	7b08      	ldrb	r0, [r1, #12]
    c1dc:	72e0      	strb	r0, [r4, #11]
    c1de:	8988      	ldrh	r0, [r1, #12]
    c1e0:	0a00      	lsrs	r0, r0, #8
    c1e2:	7320      	strb	r0, [r4, #12]
    c1e4:	200b      	movs	r0, #11
    c1e6:	e7b0      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c1e8:	7023      	strb	r3, [r4, #0]
    c1ea:	20a3      	movs	r0, #163	; 0xa3
    c1ec:	70a0      	strb	r0, [r4, #2]
    c1ee:	7908      	ldrb	r0, [r1, #4]
    c1f0:	70e0      	strb	r0, [r4, #3]
    c1f2:	8888      	ldrh	r0, [r1, #4]
    c1f4:	0a00      	lsrs	r0, r0, #8
    c1f6:	7120      	strb	r0, [r4, #4]
    c1f8:	7988      	ldrb	r0, [r1, #6]
    c1fa:	7160      	strb	r0, [r4, #5]
    c1fc:	79c8      	ldrb	r0, [r1, #7]
    c1fe:	71a0      	strb	r0, [r4, #6]
    c200:	2005      	movs	r0, #5
    c202:	e7a2      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c204:	7022      	strb	r2, [r4, #0]
    c206:	2013      	movs	r0, #19
    c208:	70a0      	strb	r0, [r4, #2]
    c20a:	7908      	ldrb	r0, [r1, #4]
    c20c:	70e0      	strb	r0, [r4, #3]
    c20e:	7948      	ldrb	r0, [r1, #5]
    c210:	7120      	strb	r0, [r4, #4]
    c212:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c216:	f8c4 0005 	str.w	r0, [r4, #5]
    c21a:	8948      	ldrh	r0, [r1, #10]
    c21c:	f8a4 0009 	strh.w	r0, [r4, #9]
    c220:	e020      	b.n	c264 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c222:	7023      	strb	r3, [r4, #0]
    c224:	20a4      	movs	r0, #164	; 0xa4
    c226:	70a0      	strb	r0, [r4, #2]
    c228:	7908      	ldrb	r0, [r1, #4]
    c22a:	70e0      	strb	r0, [r4, #3]
    c22c:	8888      	ldrh	r0, [r1, #4]
    c22e:	0a00      	lsrs	r0, r0, #8
    c230:	7120      	strb	r0, [r4, #4]
    c232:	7988      	ldrb	r0, [r1, #6]
    c234:	7160      	strb	r0, [r4, #5]
    c236:	79c8      	ldrb	r0, [r1, #7]
    c238:	71a0      	strb	r0, [r4, #6]
    c23a:	2007      	movs	r0, #7
    c23c:	e785      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c23e:	7023      	strb	r3, [r4, #0]
    c240:	2080      	movs	r0, #128	; 0x80
    c242:	70a0      	strb	r0, [r4, #2]
    c244:	888a      	ldrh	r2, [r1, #4]
    c246:	f8a4 2003 	strh.w	r2, [r4, #3]
    c24a:	88ca      	ldrh	r2, [r1, #6]
    c24c:	f8a4 2005 	strh.w	r2, [r4, #5]
    c250:	7a0a      	ldrb	r2, [r1, #8]
    c252:	71e2      	strb	r2, [r4, #7]
    c254:	7a4a      	ldrb	r2, [r1, #9]
    c256:	8122      	strh	r2, [r4, #8]
    c258:	7a8a      	ldrb	r2, [r1, #10]
    c25a:	72a2      	strb	r2, [r4, #10]
    c25c:	7ac9      	ldrb	r1, [r1, #11]
    c25e:	f001 0101 	and.w	r1, r1, #1
    c262:	72e1      	strb	r1, [r4, #11]
    c264:	200a      	movs	r0, #10
    c266:	e770      	b.n	c14a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c268 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c268:	223e      	movs	r2, #62	; 0x3e
    c26a:	7002      	strb	r2, [r0, #0]
    c26c:	2201      	movs	r2, #1
    c26e:	7082      	strb	r2, [r0, #2]
    c270:	790a      	ldrb	r2, [r1, #4]
    c272:	70c2      	strb	r2, [r0, #3]
    c274:	798a      	ldrb	r2, [r1, #6]
    c276:	7102      	strb	r2, [r0, #4]
    c278:	88ca      	ldrh	r2, [r1, #6]
    c27a:	0a12      	lsrs	r2, r2, #8
    c27c:	7142      	strb	r2, [r0, #5]
    c27e:	7a0a      	ldrb	r2, [r1, #8]
    c280:	7182      	strb	r2, [r0, #6]
    c282:	7a4a      	ldrb	r2, [r1, #9]
    c284:	71c2      	strb	r2, [r0, #7]
    c286:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c28a:	6082      	str	r2, [r0, #8]
    c28c:	89ca      	ldrh	r2, [r1, #14]
    c28e:	8182      	strh	r2, [r0, #12]
    c290:	7c0a      	ldrb	r2, [r1, #16]
    c292:	7382      	strb	r2, [r0, #14]
    c294:	8a0a      	ldrh	r2, [r1, #16]
    c296:	0a12      	lsrs	r2, r2, #8
    c298:	73c2      	strb	r2, [r0, #15]
    c29a:	7c8a      	ldrb	r2, [r1, #18]
    c29c:	7402      	strb	r2, [r0, #16]
    c29e:	8a4a      	ldrh	r2, [r1, #18]
    c2a0:	0a12      	lsrs	r2, r2, #8
    c2a2:	7442      	strb	r2, [r0, #17]
    c2a4:	7d0a      	ldrb	r2, [r1, #20]
    c2a6:	7482      	strb	r2, [r0, #18]
    c2a8:	8a8a      	ldrh	r2, [r1, #20]
    c2aa:	0a12      	lsrs	r2, r2, #8
    c2ac:	74c2      	strb	r2, [r0, #19]
    c2ae:	7d89      	ldrb	r1, [r1, #22]
    c2b0:	7501      	strb	r1, [r0, #20]
    c2b2:	2013      	movs	r0, #19
    c2b4:	4770      	bx	lr

0000c2b6 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c2b6:	223e      	movs	r2, #62	; 0x3e
    c2b8:	7002      	strb	r2, [r0, #0]
    c2ba:	2201      	movs	r2, #1
    c2bc:	7082      	strb	r2, [r0, #2]
    c2be:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c2c2:	70c2      	strb	r2, [r0, #3]
    c2c4:	788a      	ldrb	r2, [r1, #2]
    c2c6:	7102      	strb	r2, [r0, #4]
    c2c8:	884a      	ldrh	r2, [r1, #2]
    c2ca:	0a12      	lsrs	r2, r2, #8
    c2cc:	7142      	strb	r2, [r0, #5]
    c2ce:	790a      	ldrb	r2, [r1, #4]
    c2d0:	7182      	strb	r2, [r0, #6]
    c2d2:	794a      	ldrb	r2, [r1, #5]
    c2d4:	71c2      	strb	r2, [r0, #7]
    c2d6:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c2da:	6082      	str	r2, [r0, #8]
    c2dc:	894a      	ldrh	r2, [r1, #10]
    c2de:	8182      	strh	r2, [r0, #12]
    c2e0:	7e0a      	ldrb	r2, [r1, #24]
    c2e2:	7382      	strb	r2, [r0, #14]
    c2e4:	8b0a      	ldrh	r2, [r1, #24]
    c2e6:	0a12      	lsrs	r2, r2, #8
    c2e8:	73c2      	strb	r2, [r0, #15]
    c2ea:	7e8a      	ldrb	r2, [r1, #26]
    c2ec:	7402      	strb	r2, [r0, #16]
    c2ee:	8b4a      	ldrh	r2, [r1, #26]
    c2f0:	0a12      	lsrs	r2, r2, #8
    c2f2:	7442      	strb	r2, [r0, #17]
    c2f4:	7f0a      	ldrb	r2, [r1, #28]
    c2f6:	7482      	strb	r2, [r0, #18]
    c2f8:	8b8a      	ldrh	r2, [r1, #28]
    c2fa:	0a12      	lsrs	r2, r2, #8
    c2fc:	74c2      	strb	r2, [r0, #19]
    c2fe:	7f89      	ldrb	r1, [r1, #30]
    c300:	7501      	strb	r1, [r0, #20]
    c302:	2113      	movs	r1, #19
    c304:	7041      	strb	r1, [r0, #1]
    c306:	4608      	mov	r0, r1
    c308:	4770      	bx	lr

0000c30a <sdc_hci_data_get>:
    c30a:	b510      	push	{r4, lr}
    c30c:	b120      	cbz	r0, c318 <sdc_hci_data_get+0xe>
    c30e:	f7ff fda3 	bl	be58 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c312:	b120      	cbz	r0, c31e <sdc_hci_data_get+0x14>
    c314:	2000      	movs	r0, #0
    c316:	bd10      	pop	{r4, pc}
    c318:	f06f 0015 	mvn.w	r0, #21
    c31c:	bd10      	pop	{r4, pc}
    c31e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c322:	bd10      	pop	{r4, pc}

0000c324 <sdc_hci_data_put>:
    c324:	b510      	push	{r4, lr}
    c326:	f06f 0415 	mvn.w	r4, #21
    c32a:	b120      	cbz	r0, c336 <sdc_hci_data_put+0x12>
    c32c:	f7ff fda2 	bl	be74 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c330:	b108      	cbz	r0, c336 <sdc_hci_data_put+0x12>
    c332:	2000      	movs	r0, #0
    c334:	bd10      	pop	{r4, pc}
    c336:	4620      	mov	r0, r4
    c338:	bd10      	pop	{r4, pc}

0000c33a <sdc_hci_evt_get>:
    c33a:	b510      	push	{r4, lr}
    c33c:	b120      	cbz	r0, c348 <sdc_hci_evt_get+0xe>
    c33e:	f7ff fda2 	bl	be86 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c342:	b120      	cbz	r0, c34e <sdc_hci_evt_get+0x14>
    c344:	2000      	movs	r0, #0
    c346:	bd10      	pop	{r4, pc}
    c348:	f06f 0015 	mvn.w	r0, #21
    c34c:	bd10      	pop	{r4, pc}
    c34e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c352:	bd10      	pop	{r4, pc}

0000c354 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c354:	f002 baed 	b.w	e932 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c358 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c358:	f002 bb2f 	b.w	e9ba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c35c <sdc_hci_cmd_cb_set_event_mask>:
    c35c:	b510      	push	{r4, lr}
    c35e:	f7f7 fdd3 	bl	3f08 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c362:	2000      	movs	r0, #0
    c364:	bd10      	pop	{r4, pc}

0000c366 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c366:	b510      	push	{r4, lr}
    c368:	f7f7 fddc 	bl	3f24 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c36c:	2000      	movs	r0, #0
    c36e:	bd10      	pop	{r4, pc}

0000c370 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c370:	f002 bb3f 	b.w	e9f2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c374 <sdc_hci_cmd_vs_conn_event_extend>:
    c374:	b508      	push	{r3, lr}
    c376:	7800      	ldrb	r0, [r0, #0]
    c378:	f88d 0000 	strb.w	r0, [sp]
    c37c:	4668      	mov	r0, sp
    c37e:	f002 fa6e 	bl	e85e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c382:	bd08      	pop	{r3, pc}

0000c384 <sdc_hci_cmd_vs_conn_update>:
    c384:	2001      	movs	r0, #1
    c386:	4770      	bx	lr

0000c388 <sdc_hci_cmd_vs_event_length_set>:
    c388:	f7fd be16 	b.w	9fb8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c38c <sdc_hci_cmd_vs_llpm_mode_set>:
    c38c:	2001      	movs	r0, #1
    c38e:	4770      	bx	lr

0000c390 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c390:	7800      	ldrb	r0, [r0, #0]
    c392:	b100      	cbz	r0, c396 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c394:	2001      	movs	r0, #1
    c396:	f002 ba2e 	b.w	e7f6 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c39a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c39a:	b570      	push	{r4, r5, r6, lr}
    c39c:	4605      	mov	r5, r0
    c39e:	2210      	movs	r2, #16
    c3a0:	2100      	movs	r1, #0
    c3a2:	f7ff fc66 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c3a6:	2210      	movs	r2, #16
    c3a8:	2100      	movs	r1, #0
    c3aa:	f105 0010 	add.w	r0, r5, #16
    c3ae:	f7ff fc60 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c3b2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c3b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c3ba:	1c40      	adds	r0, r0, #1
    c3bc:	d10b      	bne.n	c3d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c3be:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c3c2:	1c40      	adds	r0, r0, #1
    c3c4:	d107      	bne.n	c3d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c3c6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c3ca:	1c40      	adds	r0, r0, #1
    c3cc:	d103      	bne.n	c3d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c3ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c3d2:	1c40      	adds	r0, r0, #1
    c3d4:	d00b      	beq.n	c3ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c3d6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c3da:	6128      	str	r0, [r5, #16]
    c3dc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c3e0:	6168      	str	r0, [r5, #20]
    c3e2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c3e6:	61a8      	str	r0, [r5, #24]
    c3e8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c3ec:	61e8      	str	r0, [r5, #28]
    c3ee:	2000      	movs	r0, #0
    c3f0:	f7f8 fa88 	bl	4904 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c3f4:	b918      	cbnz	r0, c3fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c3f6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c3fa:	07c0      	lsls	r0, r0, #31
    c3fc:	d118      	bne.n	c430 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c3fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c402:	1c40      	adds	r0, r0, #1
    c404:	d10b      	bne.n	c41e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c406:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c40a:	1c40      	adds	r0, r0, #1
    c40c:	d107      	bne.n	c41e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c40e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c412:	1c40      	adds	r0, r0, #1
    c414:	d103      	bne.n	c41e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c416:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c41a:	1c40      	adds	r0, r0, #1
    c41c:	d008      	beq.n	c430 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c41e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c422:	6028      	str	r0, [r5, #0]
    c424:	6860      	ldr	r0, [r4, #4]
    c426:	6068      	str	r0, [r5, #4]
    c428:	68a0      	ldr	r0, [r4, #8]
    c42a:	60a8      	str	r0, [r5, #8]
    c42c:	68e0      	ldr	r0, [r4, #12]
    c42e:	60e8      	str	r0, [r5, #12]
    c430:	2000      	movs	r0, #0
    c432:	bd70      	pop	{r4, r5, r6, pc}

0000c434 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c434:	b570      	push	{r4, r5, r6, lr}
    c436:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c43a:	4604      	mov	r4, r0
    c43c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c440:	1c40      	adds	r0, r0, #1
    c442:	d105      	bne.n	c450 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c444:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c448:	43c0      	mvns	r0, r0
    c44a:	0400      	lsls	r0, r0, #16
    c44c:	0c00      	lsrs	r0, r0, #16
    c44e:	d03a      	beq.n	c4c6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c450:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c454:	07c0      	lsls	r0, r0, #31
    c456:	d036      	beq.n	c4c6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c458:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c45c:	f8c4 0001 	str.w	r0, [r4, #1]
    c460:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c464:	f8a4 0005 	strh.w	r0, [r4, #5]
    c468:	79a0      	ldrb	r0, [r4, #6]
    c46a:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c46e:	71a0      	strb	r0, [r4, #6]
    c470:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c474:	1c40      	adds	r0, r0, #1
    c476:	d00f      	beq.n	c498 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c478:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c47c:	1c40      	adds	r0, r0, #1
    c47e:	d00b      	beq.n	c498 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c480:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c484:	1c40      	adds	r0, r0, #1
    c486:	d007      	beq.n	c498 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c488:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c48c:	1c40      	adds	r0, r0, #1
    c48e:	d003      	beq.n	c498 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c490:	2000      	movs	r0, #0
    c492:	f7f8 fa37 	bl	4904 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c496:	b140      	cbz	r0, c4aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c498:	2210      	movs	r2, #16
    c49a:	2100      	movs	r1, #0
    c49c:	1de0      	adds	r0, r4, #7
    c49e:	f7ff fbe8 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c4a2:	2001      	movs	r0, #1
    c4a4:	7020      	strb	r0, [r4, #0]
    c4a6:	2000      	movs	r0, #0
    c4a8:	bd70      	pop	{r4, r5, r6, pc}
    c4aa:	f855 0f90 	ldr.w	r0, [r5, #144]!
    c4ae:	f8c4 0007 	str.w	r0, [r4, #7]
    c4b2:	6868      	ldr	r0, [r5, #4]
    c4b4:	f8c4 000b 	str.w	r0, [r4, #11]
    c4b8:	68a8      	ldr	r0, [r5, #8]
    c4ba:	f8c4 000f 	str.w	r0, [r4, #15]
    c4be:	68e8      	ldr	r0, [r5, #12]
    c4c0:	f8c4 0013 	str.w	r0, [r4, #19]
    c4c4:	e7ed      	b.n	c4a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    c4c6:	2000      	movs	r0, #0
    c4c8:	e7ec      	b.n	c4a4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000c4ca <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c4ca:	f002 b9ae 	b.w	e82a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c4ce <sdc_hci_cmd_ip_read_bd_addr>:
    c4ce:	f002 ba41 	b.w	e954 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c4d2 <sdc_hci_cmd_ip_read_local_version_information>:
    c4d2:	f7fd bd7f 	b.w	9fd4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c4d6 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c4d6:	f001 be99 	b.w	e20c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c4da <sdc_hci_cmd_le_add_device_to_white_list>:
    c4da:	f001 beb2 	b.w	e242 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c4de <sdc_hci_cmd_le_clear_resolving_list>:
    c4de:	f001 bec7 	b.w	e270 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c4e2 <sdc_hci_cmd_le_clear_white_list>:
    c4e2:	f001 bed2 	b.w	e28a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c4e6 <sdc_hci_cmd_le_encrypt>:
    c4e6:	f001 beda 	b.w	e29e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c4ea <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c4ea:	8802      	ldrh	r2, [r0, #0]
    c4ec:	800a      	strh	r2, [r1, #0]
    c4ee:	f001 bedf 	b.w	e2b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c4f2 <sdc_hci_cmd_le_long_term_key_request_reply>:
    c4f2:	8802      	ldrh	r2, [r0, #0]
    c4f4:	800a      	strh	r2, [r1, #0]
    c4f6:	f001 bef4 	b.w	e2e2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c4fa <sdc_hci_cmd_le_rand>:
    c4fa:	f001 bf1c 	b.w	e336 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c4fe <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c4fe:	f001 bf20 	b.w	e342 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c502 <sdc_hci_cmd_le_read_buffer_size>:
    c502:	f7fd bc61 	b.w	9dc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c506 <sdc_hci_cmd_le_read_channel_map>:
    c506:	f001 bf2d 	b.w	e364 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c50a <sdc_hci_cmd_le_read_max_data_length>:
    c50a:	f001 bf4c 	b.w	e3a6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c50e <sdc_hci_cmd_le_read_phy>:
    c50e:	f7fd bc65 	b.w	9ddc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c512 <sdc_hci_cmd_le_read_remote_features>:
    c512:	f7fd bc8b 	b.w	9e2c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c516 <sdc_hci_cmd_le_read_resolving_list_size>:
    c516:	f001 bf56 	b.w	e3c6 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c51a <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c51a:	f7fd bca7 	b.w	9e6c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c51e <sdc_hci_cmd_le_read_transmit_power>:
    c51e:	f001 bf56 	b.w	e3ce <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c522 <sdc_hci_cmd_le_read_white_list_size>:
    c522:	f001 bf5d 	b.w	e3e0 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c526 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c526:	f001 bf5f 	b.w	e3e8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c52a <sdc_hci_cmd_le_remove_device_from_white_list>:
    c52a:	f001 bf76 	b.w	e41a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c52e <sdc_hci_cmd_le_set_address_resolution_enable>:
    c52e:	f001 bf89 	b.w	e444 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c532 <sdc_hci_cmd_le_set_adv_data>:
    c532:	f001 bf95 	b.w	e460 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c536 <sdc_hci_cmd_le_set_adv_enable>:
    c536:	f001 bfc9 	b.w	e4cc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c53a <sdc_hci_cmd_le_set_adv_params>:
    c53a:	f002 b801 	b.w	e540 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c53e <sdc_hci_cmd_le_set_data_length>:
    c53e:	f002 b897 	b.w	e670 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c542 <sdc_hci_cmd_le_set_default_phy>:
    c542:	f7fd bca3 	b.w	9e8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c546 <sdc_hci_cmd_le_set_event_mask>:
    c546:	b510      	push	{r4, lr}
    c548:	f7f7 fcd8 	bl	3efc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c54c:	2000      	movs	r0, #0
    c54e:	bd10      	pop	{r4, pc}

0000c550 <sdc_hci_cmd_le_set_phy>:
    c550:	f002 b8b5 	b.w	e6be <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c554 <sdc_hci_cmd_le_set_privacy_mode>:
    c554:	f002 b8d3 	b.w	e6fe <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c558 <sdc_hci_cmd_le_set_random_address>:
    c558:	f002 b8e7 	b.w	e72a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c55c <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c55c:	f002 b8f3 	b.w	e746 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c560 <sdc_hci_cmd_le_set_scan_response_data>:
    c560:	f002 b8fa 	b.w	e758 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c564 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c564:	f002 b930 	b.w	e7c8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c568 <sdc_hci_cmd_lc_disconnect>:
    c568:	f001 be00 	b.w	e16c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c56c <sdc_hci_cmd_lc_read_remote_version_information>:
    c56c:	f002 b9fe 	b.w	e96c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c570:	b570      	push	{r4, r5, r6, lr}
    c572:	880b      	ldrh	r3, [r1, #0]
    c574:	7f04      	ldrb	r4, [r0, #28]
    c576:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c57a:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c57e:	8802      	ldrh	r2, [r0, #0]
    c580:	4435      	add	r5, r6
    c582:	1da4      	adds	r4, r4, #6
    c584:	882d      	ldrh	r5, [r5, #0]
    c586:	4422      	add	r2, r4
    c588:	b292      	uxth	r2, r2
    c58a:	4425      	add	r5, r4
    c58c:	1e54      	subs	r4, r2, #1
    c58e:	442c      	add	r4, r5
    c590:	fb94 f4f2 	sdiv	r4, r4, r2
    c594:	fb02 6204 	mla	r2, r2, r4, r6
    c598:	8840      	ldrh	r0, [r0, #2]
    c59a:	b292      	uxth	r2, r2
    c59c:	4290      	cmp	r0, r2
    c59e:	d903      	bls.n	c5a8 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c5a0:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c5a4:	4310      	orrs	r0, r2
    c5a6:	e002      	b.n	c5ae <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c5a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c5ac:	4398      	bics	r0, r3
    c5ae:	8008      	strh	r0, [r1, #0]
    c5b0:	bd70      	pop	{r4, r5, r6, pc}
    c5b2:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c5b6:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c5ba:	429a      	cmp	r2, r3
    c5bc:	d107      	bne.n	c5ce <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c5be:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c5c2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c5c6:	4288      	cmp	r0, r1
    c5c8:	d001      	beq.n	c5ce <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c5ca:	2001      	movs	r0, #1
    c5cc:	4770      	bx	lr
    c5ce:	2000      	movs	r0, #0
    c5d0:	4770      	bx	lr

0000c5d2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c5d2:	b570      	push	{r4, r5, r6, lr}
    c5d4:	7f00      	ldrb	r0, [r0, #28]
    c5d6:	461c      	mov	r4, r3
    c5d8:	1d80      	adds	r0, r0, #6
    c5da:	4408      	add	r0, r1
    c5dc:	4613      	mov	r3, r2
    c5de:	8809      	ldrh	r1, [r1, #0]
    c5e0:	9a04      	ldr	r2, [sp, #16]
    c5e2:	1cc9      	adds	r1, r1, #3
    c5e4:	b289      	uxth	r1, r1
    c5e6:	1915      	adds	r5, r2, r4
    c5e8:	1ec0      	subs	r0, r0, #3
    c5ea:	428d      	cmp	r5, r1
    c5ec:	d805      	bhi.n	c5fa <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c5ee:	1881      	adds	r1, r0, r2
    c5f0:	4622      	mov	r2, r4
    c5f2:	4618      	mov	r0, r3
    c5f4:	f7ff fac3 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c5f8:	e000      	b.n	c5fc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c5fa:	2400      	movs	r4, #0
    c5fc:	4620      	mov	r0, r4
    c5fe:	bd70      	pop	{r4, r5, r6, pc}

0000c600 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c600:	b570      	push	{r4, r5, r6, lr}
    c602:	7f00      	ldrb	r0, [r0, #28]
    c604:	461c      	mov	r4, r3
    c606:	1d80      	adds	r0, r0, #6
    c608:	4408      	add	r0, r1
    c60a:	4613      	mov	r3, r2
    c60c:	8809      	ldrh	r1, [r1, #0]
    c60e:	9a04      	ldr	r2, [sp, #16]
    c610:	1cc9      	adds	r1, r1, #3
    c612:	b289      	uxth	r1, r1
    c614:	1915      	adds	r5, r2, r4
    c616:	1ec0      	subs	r0, r0, #3
    c618:	428d      	cmp	r5, r1
    c61a:	d805      	bhi.n	c628 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c61c:	4410      	add	r0, r2
    c61e:	4622      	mov	r2, r4
    c620:	4619      	mov	r1, r3
    c622:	f7ff faac 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c626:	e000      	b.n	c62a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c628:	2400      	movs	r4, #0
    c62a:	4620      	mov	r0, r4
    c62c:	bd70      	pop	{r4, r5, r6, pc}

0000c62e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c62e:	8881      	ldrh	r1, [r0, #4]
    c630:	88c0      	ldrh	r0, [r0, #6]
    c632:	4288      	cmp	r0, r1
    c634:	d101      	bne.n	c63a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c636:	2001      	movs	r0, #1
    c638:	4770      	bx	lr
    c63a:	2000      	movs	r0, #0
    c63c:	4770      	bx	lr

0000c63e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c63e:	8881      	ldrh	r1, [r0, #4]
    c640:	8900      	ldrh	r0, [r0, #8]
    c642:	4288      	cmp	r0, r1
    c644:	d101      	bne.n	c64a <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c646:	2001      	movs	r0, #1
    c648:	4770      	bx	lr
    c64a:	2000      	movs	r0, #0
    c64c:	4770      	bx	lr

0000c64e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c64e:	b570      	push	{r4, r5, r6, lr}
    c650:	4604      	mov	r4, r0
    c652:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c656:	8880      	ldrh	r0, [r0, #4]
    c658:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c65c:	4401      	add	r1, r0
    c65e:	8a20      	ldrh	r0, [r4, #16]
    c660:	2800      	cmp	r0, #0
    c662:	d01a      	beq.n	c69a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c664:	89a2      	ldrh	r2, [r4, #12]
    c666:	2500      	movs	r5, #0
    c668:	4410      	add	r0, r2
    c66a:	b280      	uxth	r0, r0
    c66c:	81a0      	strh	r0, [r4, #12]
    c66e:	880a      	ldrh	r2, [r1, #0]
    c670:	4290      	cmp	r0, r2
    c672:	d905      	bls.n	c680 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    c674:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    c678:	f04f 0014 	mov.w	r0, #20
    c67c:	f7f7 faa8 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c680:	d109      	bne.n	c696 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c682:	69a0      	ldr	r0, [r4, #24]
    c684:	b108      	cbz	r0, c68a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    c686:	7f40      	ldrb	r0, [r0, #29]
    c688:	7088      	strb	r0, [r1, #2]
    c68a:	f104 0104 	add.w	r1, r4, #4
    c68e:	4620      	mov	r0, r4
    c690:	f7ff ff6e 	bl	c570 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c694:	81a5      	strh	r5, [r4, #12]
    c696:	8225      	strh	r5, [r4, #16]
    c698:	2001      	movs	r0, #1
    c69a:	bd70      	pop	{r4, r5, r6, pc}

0000c69c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6a0:	4604      	mov	r4, r0
    c6a2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    c6a6:	88c0      	ldrh	r0, [r0, #6]
    c6a8:	460e      	mov	r6, r1
    c6aa:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c6ae:	8a60      	ldrh	r0, [r4, #18]
    c6b0:	19d9      	adds	r1, r3, r7
    c6b2:	b108      	cbz	r0, c6b8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    c6b4:	42b0      	cmp	r0, r6
    c6b6:	d202      	bcs.n	c6be <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    c6b8:	2000      	movs	r0, #0
    c6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6be:	89e0      	ldrh	r0, [r4, #14]
    c6c0:	2500      	movs	r5, #0
    c6c2:	b140      	cbz	r0, c6d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    c6c4:	f8b1 c000 	ldrh.w	ip, [r1]
    c6c8:	4560      	cmp	r0, ip
    c6ca:	d008      	beq.n	c6de <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    c6cc:	f240 211f 	movw	r1, #543	; 0x21f
    c6d0:	2014      	movs	r0, #20
    c6d2:	f7f7 fa7d 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6d6:	7f60      	ldrb	r0, [r4, #29]
    c6d8:	7088      	strb	r0, [r1, #2]
    c6da:	800d      	strh	r5, [r1, #0]
    c6dc:	e00e      	b.n	c6fc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    c6de:	f894 c01c 	ldrb.w	ip, [r4, #28]
    c6e2:	4418      	add	r0, r3
    c6e4:	f10c 0c06 	add.w	ip, ip, #6
    c6e8:	44bc      	add	ip, r7
    c6ea:	4460      	add	r0, ip
    c6ec:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    c6f0:	f820 cc03 	strh.w	ip, [r0, #-3]
    c6f4:	f894 c020 	ldrb.w	ip, [r4, #32]
    c6f8:	f800 cc01 	strb.w	ip, [r0, #-1]
    c6fc:	89e0      	ldrh	r0, [r4, #14]
    c6fe:	4430      	add	r0, r6
    c700:	81e0      	strh	r0, [r4, #14]
    c702:	8808      	ldrh	r0, [r1, #0]
    c704:	4430      	add	r0, r6
    c706:	8008      	strh	r0, [r1, #0]
    c708:	b16a      	cbz	r2, c726 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    c70a:	1da1      	adds	r1, r4, #6
    c70c:	4620      	mov	r0, r4
    c70e:	f7ff ff2f 	bl	c570 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c712:	81e5      	strh	r5, [r4, #14]
    c714:	7f60      	ldrb	r0, [r4, #29]
    c716:	1c40      	adds	r0, r0, #1
    c718:	7760      	strb	r0, [r4, #29]
    c71a:	7da0      	ldrb	r0, [r4, #22]
    c71c:	b108      	cbz	r0, c722 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    c71e:	88e0      	ldrh	r0, [r4, #6]
    c720:	82a0      	strh	r0, [r4, #20]
    c722:	75a5      	strb	r5, [r4, #22]
    c724:	e00b      	b.n	c73e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    c726:	7f20      	ldrb	r0, [r4, #28]
    c728:	89e1      	ldrh	r1, [r4, #14]
    c72a:	1d80      	adds	r0, r0, #6
    c72c:	4438      	add	r0, r7
    c72e:	4419      	add	r1, r3
    c730:	4408      	add	r0, r1
    c732:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    c736:	83e1      	strh	r1, [r4, #30]
    c738:	7880      	ldrb	r0, [r0, #2]
    c73a:	f884 0020 	strb.w	r0, [r4, #32]
    c73e:	8265      	strh	r5, [r4, #18]
    c740:	75e5      	strb	r5, [r4, #23]
    c742:	2001      	movs	r0, #1
    c744:	e7b9      	b.n	c6ba <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000c746 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    c746:	b510      	push	{r4, lr}
    c748:	4604      	mov	r4, r0
    c74a:	88c0      	ldrh	r0, [r0, #6]
    c74c:	88a1      	ldrh	r1, [r4, #4]
    c74e:	4281      	cmp	r1, r0
    c750:	d007      	beq.n	c762 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c752:	89a0      	ldrh	r0, [r4, #12]
    c754:	b928      	cbnz	r0, c762 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c756:	8a20      	ldrh	r0, [r4, #16]
    c758:	b918      	cbnz	r0, c762 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c75a:	88a0      	ldrh	r0, [r4, #4]
    c75c:	8aa1      	ldrh	r1, [r4, #20]
    c75e:	4288      	cmp	r0, r1
    c760:	d101      	bne.n	c766 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    c762:	2000      	movs	r0, #0
    c764:	bd10      	pop	{r4, pc}
    c766:	1d21      	adds	r1, r4, #4
    c768:	4620      	mov	r0, r4
    c76a:	f7ff ff01 	bl	c570 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c76e:	2000      	movs	r0, #0
    c770:	8220      	strh	r0, [r4, #16]
    c772:	2001      	movs	r0, #1
    c774:	bd10      	pop	{r4, pc}

0000c776 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    c776:	b510      	push	{r4, lr}
    c778:	4604      	mov	r4, r0
    c77a:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c77e:	88c0      	ldrh	r0, [r0, #6]
    c780:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c784:	4402      	add	r2, r0
    c786:	8820      	ldrh	r0, [r4, #0]
    c788:	2845      	cmp	r0, #69	; 0x45
    c78a:	d200      	bcs.n	c78e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    c78c:	2045      	movs	r0, #69	; 0x45
    c78e:	4288      	cmp	r0, r1
    c790:	d204      	bcs.n	c79c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    c792:	f44f 7180 	mov.w	r1, #256	; 0x100
    c796:	2014      	movs	r0, #20
    c798:	f7f7 fa1a 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c79c:	7de0      	ldrb	r0, [r4, #23]
    c79e:	2800      	cmp	r0, #0
    c7a0:	d003      	beq.n	c7aa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    c7a2:	8810      	ldrh	r0, [r2, #0]
    c7a4:	4288      	cmp	r0, r1
    c7a6:	d201      	bcs.n	c7ac <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    c7a8:	2000      	movs	r0, #0
    c7aa:	bd10      	pop	{r4, pc}
    c7ac:	8011      	strh	r1, [r2, #0]
    c7ae:	1da1      	adds	r1, r4, #6
    c7b0:	4620      	mov	r0, r4
    c7b2:	f7ff fedd 	bl	c570 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c7b6:	2000      	movs	r0, #0
    c7b8:	75e0      	strb	r0, [r4, #23]
    c7ba:	2001      	movs	r0, #1
    c7bc:	bd10      	pop	{r4, pc}

0000c7be <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    c7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7c2:	8941      	ldrh	r1, [r0, #10]
    c7c4:	8886      	ldrh	r6, [r0, #4]
    c7c6:	4604      	mov	r4, r0
    c7c8:	2500      	movs	r5, #0
    c7ca:	f100 070a 	add.w	r7, r0, #10
    c7ce:	e006      	b.n	c7de <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    c7d0:	4639      	mov	r1, r7
    c7d2:	4620      	mov	r0, r4
    c7d4:	f7ff fecc 	bl	c570 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c7d8:	1c6d      	adds	r5, r5, #1
    c7da:	8961      	ldrh	r1, [r4, #10]
    c7dc:	b2ad      	uxth	r5, r5
    c7de:	42b1      	cmp	r1, r6
    c7e0:	d1f6      	bne.n	c7d0 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    c7e2:	4628      	mov	r0, r5
    c7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c7e8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    c7e8:	b530      	push	{r4, r5, lr}
    c7ea:	88c4      	ldrh	r4, [r0, #6]
    c7ec:	8881      	ldrh	r1, [r0, #4]
    c7ee:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c7f2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c7f6:	4413      	add	r3, r2
    c7f8:	8882      	ldrh	r2, [r0, #4]
    c7fa:	8a85      	ldrh	r5, [r0, #20]
    c7fc:	42aa      	cmp	r2, r5
    c7fe:	d012      	beq.n	c826 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c800:	42a1      	cmp	r1, r4
    c802:	d010      	beq.n	c826 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c804:	8981      	ldrh	r1, [r0, #12]
    c806:	b971      	cbnz	r1, c826 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c808:	6982      	ldr	r2, [r0, #24]
    c80a:	b172      	cbz	r2, c82a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c80c:	4610      	mov	r0, r2
    c80e:	f7ff ff16 	bl	c63e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    c812:	b950      	cbnz	r0, c82a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c814:	8910      	ldrh	r0, [r2, #8]
    c816:	3224      	adds	r2, #36	; 0x24
    c818:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c81c:	4410      	add	r0, r2
    c81e:	7899      	ldrb	r1, [r3, #2]
    c820:	7880      	ldrb	r0, [r0, #2]
    c822:	4288      	cmp	r0, r1
    c824:	d101      	bne.n	c82a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c826:	2000      	movs	r0, #0
    c828:	bd30      	pop	{r4, r5, pc}
    c82a:	4618      	mov	r0, r3
    c82c:	bd30      	pop	{r4, r5, pc}

0000c82e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    c82e:	7f00      	ldrb	r0, [r0, #28]
    c830:	1d80      	adds	r0, r0, #6
    c832:	4408      	add	r0, r1
    c834:	1ec0      	subs	r0, r0, #3
    c836:	6010      	str	r0, [r2, #0]
    c838:	8808      	ldrh	r0, [r1, #0]
    c83a:	4770      	bx	lr

0000c83c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    c83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c840:	460e      	mov	r6, r1
    c842:	88c1      	ldrh	r1, [r0, #6]
    c844:	8902      	ldrh	r2, [r0, #8]
    c846:	4604      	mov	r4, r0
    c848:	f100 0824 	add.w	r8, r0, #36	; 0x24
    c84c:	8800      	ldrh	r0, [r0, #0]
    c84e:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    c852:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    c856:	2845      	cmp	r0, #69	; 0x45
    c858:	d200      	bcs.n	c85c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    c85a:	2045      	movs	r0, #69	; 0x45
    c85c:	42b0      	cmp	r0, r6
    c85e:	d203      	bcs.n	c868 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    c860:	21c2      	movs	r1, #194	; 0xc2
    c862:	2014      	movs	r0, #20
    c864:	f7f7 f9b4 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c868:	4610      	mov	r0, r2
    c86a:	f7ff fea2 	bl	c5b2 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c86e:	b110      	cbz	r0, c876 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    c870:	2000      	movs	r0, #0
    c872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c876:	42af      	cmp	r7, r5
    c878:	d908      	bls.n	c88c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c87a:	7f21      	ldrb	r1, [r4, #28]
    c87c:	1b78      	subs	r0, r7, r5
    c87e:	1a40      	subs	r0, r0, r1
    c880:	1f80      	subs	r0, r0, #6
    c882:	4286      	cmp	r6, r0
    c884:	dd02      	ble.n	c88c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c886:	2000      	movs	r0, #0
    c888:	75e0      	strb	r0, [r4, #23]
    c88a:	e7f1      	b.n	c870 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    c88c:	eb08 0005 	add.w	r0, r8, r5
    c890:	2101      	movs	r1, #1
    c892:	8006      	strh	r6, [r0, #0]
    c894:	75e1      	strb	r1, [r4, #23]
    c896:	e7ec      	b.n	c872 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000c898 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    c898:	b538      	push	{r3, r4, r5, lr}
    c89a:	88c4      	ldrh	r4, [r0, #6]
    c89c:	8881      	ldrh	r1, [r0, #4]
    c89e:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c8a2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c8a6:	441a      	add	r2, r3
    c8a8:	42a1      	cmp	r1, r4
    c8aa:	d010      	beq.n	c8ce <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c8ac:	8983      	ldrh	r3, [r0, #12]
    c8ae:	8a05      	ldrh	r5, [r0, #16]
    c8b0:	8812      	ldrh	r2, [r2, #0]
    c8b2:	442b      	add	r3, r5
    c8b4:	4293      	cmp	r3, r2
    c8b6:	d308      	bcc.n	c8ca <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    c8b8:	f8ad 1000 	strh.w	r1, [sp]
    c8bc:	4669      	mov	r1, sp
    c8be:	f7ff fe57 	bl	c570 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c8c2:	f8bd 0000 	ldrh.w	r0, [sp]
    c8c6:	42a0      	cmp	r0, r4
    c8c8:	d001      	beq.n	c8ce <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c8ca:	2001      	movs	r0, #1
    c8cc:	bd38      	pop	{r3, r4, r5, pc}
    c8ce:	2000      	movs	r0, #0
    c8d0:	bd38      	pop	{r3, r4, r5, pc}

0000c8d2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    c8d2:	b570      	push	{r4, r5, r6, lr}
    c8d4:	88c6      	ldrh	r6, [r0, #6]
    c8d6:	8885      	ldrh	r5, [r0, #4]
    c8d8:	4603      	mov	r3, r0
    c8da:	f100 0424 	add.w	r4, r0, #36	; 0x24
    c8de:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    c8e2:	4420      	add	r0, r4
    c8e4:	42b5      	cmp	r5, r6
    c8e6:	d102      	bne.n	c8ee <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    c8e8:	2000      	movs	r0, #0
    c8ea:	8218      	strh	r0, [r3, #16]
    c8ec:	bd70      	pop	{r4, r5, r6, pc}
    c8ee:	8804      	ldrh	r4, [r0, #0]
    c8f0:	899d      	ldrh	r5, [r3, #12]
    c8f2:	7f1e      	ldrb	r6, [r3, #28]
    c8f4:	1b64      	subs	r4, r4, r5
    c8f6:	4435      	add	r5, r6
    c8f8:	4428      	add	r0, r5
    c8fa:	880d      	ldrh	r5, [r1, #0]
    c8fc:	b2a4      	uxth	r4, r4
    c8fe:	1cc0      	adds	r0, r0, #3
    c900:	42a5      	cmp	r5, r4
    c902:	d900      	bls.n	c906 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    c904:	800c      	strh	r4, [r1, #0]
    c906:	899c      	ldrh	r4, [r3, #12]
    c908:	b124      	cbz	r4, c914 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    c90a:	2400      	movs	r4, #0
    c90c:	7014      	strb	r4, [r2, #0]
    c90e:	8809      	ldrh	r1, [r1, #0]
    c910:	8219      	strh	r1, [r3, #16]
    c912:	bd70      	pop	{r4, r5, r6, pc}
    c914:	2401      	movs	r4, #1
    c916:	e7f9      	b.n	c90c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000c918 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    c918:	b510      	push	{r4, lr}
    c91a:	8a81      	ldrh	r1, [r0, #20]
    c91c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c920:	3aff      	subs	r2, #255	; 0xff
    c922:	d002      	beq.n	c92a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    c924:	7d82      	ldrb	r2, [r0, #22]
    c926:	b952      	cbnz	r2, c93e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    c928:	e004      	b.n	c934 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    c92a:	f44f 7157 	mov.w	r1, #860	; 0x35c
    c92e:	2014      	movs	r0, #20
    c930:	f7f7 f94e 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c934:	8880      	ldrh	r0, [r0, #4]
    c936:	4281      	cmp	r1, r0
    c938:	d101      	bne.n	c93e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    c93a:	2000      	movs	r0, #0
    c93c:	bd10      	pop	{r4, pc}
    c93e:	2001      	movs	r0, #1
    c940:	bd10      	pop	{r4, pc}

0000c942 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    c942:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c946:	8281      	strh	r1, [r0, #20]
    c948:	2100      	movs	r1, #0
    c94a:	7581      	strb	r1, [r0, #22]
    c94c:	4770      	bx	lr

0000c94e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    c94e:	b510      	push	{r4, lr}
    c950:	8a81      	ldrh	r1, [r0, #20]
    c952:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c956:	3aff      	subs	r2, #255	; 0xff
    c958:	d004      	beq.n	c964 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    c95a:	f240 313f 	movw	r1, #831	; 0x33f
    c95e:	2014      	movs	r0, #20
    c960:	f7f7 f936 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c964:	88c1      	ldrh	r1, [r0, #6]
    c966:	8281      	strh	r1, [r0, #20]
    c968:	89c1      	ldrh	r1, [r0, #14]
    c96a:	b101      	cbz	r1, c96e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    c96c:	2101      	movs	r1, #1
    c96e:	7581      	strb	r1, [r0, #22]
    c970:	bd10      	pop	{r4, pc}

0000c972 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    c972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c976:	461d      	mov	r5, r3
    c978:	4616      	mov	r6, r2
    c97a:	9f06      	ldr	r7, [sp, #24]
    c97c:	460b      	mov	r3, r1
    c97e:	4604      	mov	r4, r0
    c980:	463a      	mov	r2, r7
    c982:	4629      	mov	r1, r5
    c984:	4630      	mov	r0, r6
    c986:	f000 f84f 	bl	ca28 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c98a:	4283      	cmp	r3, r0
    c98c:	d201      	bcs.n	c992 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    c98e:	21a1      	movs	r1, #161	; 0xa1
    c990:	e018      	b.n	c9c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c992:	1ce0      	adds	r0, r4, #3
    c994:	f020 0103 	bic.w	r1, r0, #3
    c998:	4620      	mov	r0, r4
    c99a:	42a1      	cmp	r1, r4
    c99c:	d001      	beq.n	c9a2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    c99e:	21a2      	movs	r1, #162	; 0xa2
    c9a0:	e010      	b.n	c9c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c9a2:	2224      	movs	r2, #36	; 0x24
    c9a4:	2100      	movs	r1, #0
    c9a6:	f7ff f964 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c9aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c9ae:	82a0      	strh	r0, [r4, #20]
    c9b0:	19a8      	adds	r0, r5, r6
    c9b2:	1d80      	adds	r0, r0, #6
    c9b4:	4378      	muls	r0, r7
    c9b6:	b280      	uxth	r0, r0
    c9b8:	7725      	strb	r5, [r4, #28]
    c9ba:	8060      	strh	r0, [r4, #2]
    c9bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    c9c0:	d903      	bls.n	c9ca <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    c9c2:	21a8      	movs	r1, #168	; 0xa8
    c9c4:	2014      	movs	r0, #20
    c9c6:	f7f7 f903 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9ca:	8026      	strh	r6, [r4, #0]
    c9cc:	2000      	movs	r0, #0
    c9ce:	7760      	strb	r0, [r4, #29]
    c9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c9d4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    c9d4:	6181      	str	r1, [r0, #24]
    c9d6:	6188      	str	r0, [r1, #24]
    c9d8:	4770      	bx	lr

0000c9da <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    c9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9de:	460b      	mov	r3, r1
    c9e0:	4604      	mov	r4, r0
    c9e2:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c9e6:	8905      	ldrh	r5, [r0, #8]
    c9e8:	8946      	ldrh	r6, [r0, #10]
    c9ea:	8880      	ldrh	r0, [r0, #4]
    c9ec:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    c9f0:	4439      	add	r1, r7
    c9f2:	460f      	mov	r7, r1
    c9f4:	4285      	cmp	r5, r0
    c9f6:	d102      	bne.n	c9fe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    c9f8:	2000      	movs	r0, #0
    c9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9fe:	b10a      	cbz	r2, ca04 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    ca00:	1cc8      	adds	r0, r1, #3
    ca02:	6010      	str	r0, [r2, #0]
    ca04:	b123      	cbz	r3, ca10 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    ca06:	7f22      	ldrb	r2, [r4, #28]
    ca08:	1cf9      	adds	r1, r7, #3
    ca0a:	4618      	mov	r0, r3
    ca0c:	f7ff f8b7 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca10:	883f      	ldrh	r7, [r7, #0]
    ca12:	f104 0108 	add.w	r1, r4, #8
    ca16:	4620      	mov	r0, r4
    ca18:	f7ff fdaa 	bl	c570 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ca1c:	42b5      	cmp	r5, r6
    ca1e:	d101      	bne.n	ca24 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    ca20:	8920      	ldrh	r0, [r4, #8]
    ca22:	8160      	strh	r0, [r4, #10]
    ca24:	4638      	mov	r0, r7
    ca26:	e7e8      	b.n	c9fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000ca28 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    ca28:	4401      	add	r1, r0
    ca2a:	1d89      	adds	r1, r1, #6
    ca2c:	4351      	muls	r1, r2
    ca2e:	b28a      	uxth	r2, r1
    ca30:	2100      	movs	r1, #0
    ca32:	2845      	cmp	r0, #69	; 0x45
    ca34:	d201      	bcs.n	ca3a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    ca36:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    ca3a:	3224      	adds	r2, #36	; 0x24
    ca3c:	1850      	adds	r0, r2, r1
    ca3e:	b280      	uxth	r0, r0
    ca40:	4770      	bx	lr

0000ca42 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    ca42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca46:	4688      	mov	r8, r1
    ca48:	88c1      	ldrh	r1, [r0, #6]
    ca4a:	4604      	mov	r4, r0
    ca4c:	8900      	ldrh	r0, [r0, #8]
    ca4e:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    ca52:	f104 0524 	add.w	r5, r4, #36	; 0x24
    ca56:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ca5a:	eb05 0906 	add.w	r9, r5, r6
    ca5e:	f7ff fda8 	bl	c5b2 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ca62:	2200      	movs	r2, #0
    ca64:	b998      	cbnz	r0, ca8e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    ca66:	8820      	ldrh	r0, [r4, #0]
    ca68:	2845      	cmp	r0, #69	; 0x45
    ca6a:	d200      	bcs.n	ca6e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    ca6c:	2045      	movs	r0, #69	; 0x45
    ca6e:	42b7      	cmp	r7, r6
    ca70:	d906      	bls.n	ca80 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ca72:	7f23      	ldrb	r3, [r4, #28]
    ca74:	1bb9      	subs	r1, r7, r6
    ca76:	1ac9      	subs	r1, r1, r3
    ca78:	1f89      	subs	r1, r1, #6
    ca7a:	4281      	cmp	r1, r0
    ca7c:	da00      	bge.n	ca80 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ca7e:	4608      	mov	r0, r1
    ca80:	89e1      	ldrh	r1, [r4, #14]
    ca82:	b111      	cbz	r1, ca8a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    ca84:	f8b9 3000 	ldrh.w	r3, [r9]
    ca88:	1ac0      	subs	r0, r0, r3
    ca8a:	4540      	cmp	r0, r8
    ca8c:	da03      	bge.n	ca96 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    ca8e:	8262      	strh	r2, [r4, #18]
    ca90:	2000      	movs	r0, #0
    ca92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca96:	7f20      	ldrb	r0, [r4, #28]
    ca98:	4429      	add	r1, r5
    ca9a:	1d80      	adds	r0, r0, #6
    ca9c:	4430      	add	r0, r6
    ca9e:	4408      	add	r0, r1
    caa0:	f8a4 8012 	strh.w	r8, [r4, #18]
    caa4:	1ec0      	subs	r0, r0, #3
    caa6:	e7f4      	b.n	ca92 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000caa8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    caa8:	2100      	movs	r1, #0
    caaa:	81c1      	strh	r1, [r0, #14]
    caac:	8241      	strh	r1, [r0, #18]
    caae:	75c1      	strb	r1, [r0, #23]
    cab0:	7581      	strb	r1, [r0, #22]
    cab2:	4770      	bx	lr

0000cab4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    cab4:	b570      	push	{r4, r5, r6, lr}
    cab6:	2300      	movs	r3, #0
    cab8:	2908      	cmp	r1, #8
    caba:	d204      	bcs.n	cac6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    cabc:	f240 11cb 	movw	r1, #459	; 0x1cb
    cac0:	2015      	movs	r0, #21
    cac2:	f7f7 f885 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cac6:	6802      	ldr	r2, [r0, #0]
    cac8:	b90a      	cbnz	r2, cace <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    caca:	e01e      	b.n	cb0a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    cacc:	4610      	mov	r0, r2
    cace:	6802      	ldr	r2, [r0, #0]
    cad0:	8893      	ldrh	r3, [r2, #4]
    cad2:	428b      	cmp	r3, r1
    cad4:	d002      	beq.n	cadc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    cad6:	6813      	ldr	r3, [r2, #0]
    cad8:	2b00      	cmp	r3, #0
    cada:	d1f7      	bne.n	cacc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    cadc:	8894      	ldrh	r4, [r2, #4]
    cade:	4613      	mov	r3, r2
    cae0:	428c      	cmp	r4, r1
    cae2:	d101      	bne.n	cae8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    cae4:	6811      	ldr	r1, [r2, #0]
    cae6:	e00d      	b.n	cb04 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    cae8:	f101 0508 	add.w	r5, r1, #8
    caec:	b2ae      	uxth	r6, r5
    caee:	2500      	movs	r5, #0
    caf0:	42b4      	cmp	r4, r6
    caf2:	d309      	bcc.n	cb08 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    caf4:	1a64      	subs	r4, r4, r1
    caf6:	4411      	add	r1, r2
    caf8:	600d      	str	r5, [r1, #0]
    cafa:	808c      	strh	r4, [r1, #4]
    cafc:	6802      	ldr	r2, [r0, #0]
    cafe:	6812      	ldr	r2, [r2, #0]
    cb00:	6002      	str	r2, [r0, #0]
    cb02:	600a      	str	r2, [r1, #0]
    cb04:	6001      	str	r1, [r0, #0]
    cb06:	e000      	b.n	cb0a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    cb08:	2300      	movs	r3, #0
    cb0a:	4618      	mov	r0, r3
    cb0c:	bd70      	pop	{r4, r5, r6, pc}

0000cb0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    cb0e:	b510      	push	{r4, lr}
    cb10:	000c      	movs	r4, r1
    cb12:	d006      	beq.n	cb22 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    cb14:	2c08      	cmp	r4, #8
    cb16:	d209      	bcs.n	cb2c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    cb18:	f240 1195 	movw	r1, #405	; 0x195
    cb1c:	2015      	movs	r0, #21
    cb1e:	f7f7 f857 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb22:	b108      	cbz	r0, cb28 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    cb24:	2100      	movs	r1, #0
    cb26:	6001      	str	r1, [r0, #0]
    cb28:	2000      	movs	r0, #0
    cb2a:	bd10      	pop	{r4, pc}
    cb2c:	b118      	cbz	r0, cb36 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    cb2e:	b2a1      	uxth	r1, r4
    cb30:	6800      	ldr	r0, [r0, #0]
    cb32:	f000 f814 	bl	cb5e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    cb36:	1d20      	adds	r0, r4, #4
    cb38:	bd10      	pop	{r4, pc}

0000cb3a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    cb3a:	2100      	movs	r1, #0
    cb3c:	6802      	ldr	r2, [r0, #0]
    cb3e:	e003      	b.n	cb48 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    cb40:	8893      	ldrh	r3, [r2, #4]
    cb42:	6812      	ldr	r2, [r2, #0]
    cb44:	4419      	add	r1, r3
    cb46:	b289      	uxth	r1, r1
    cb48:	2a00      	cmp	r2, #0
    cb4a:	d1f9      	bne.n	cb40 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    cb4c:	f000 b807 	b.w	cb5e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000cb50 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    cb50:	2300      	movs	r3, #0
    cb52:	600b      	str	r3, [r1, #0]
    cb54:	808a      	strh	r2, [r1, #4]
    cb56:	6802      	ldr	r2, [r0, #0]
    cb58:	600a      	str	r2, [r1, #0]
    cb5a:	6001      	str	r1, [r0, #0]
    cb5c:	4770      	bx	lr
    cb5e:	2300      	movs	r3, #0
    cb60:	6043      	str	r3, [r0, #4]
    cb62:	1d02      	adds	r2, r0, #4
    cb64:	8101      	strh	r1, [r0, #8]
    cb66:	6002      	str	r2, [r0, #0]
    cb68:	4770      	bx	lr

0000cb6a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    cb6a:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    cb6e:	3bff      	subs	r3, #255	; 0xff
    cb70:	d001      	beq.n	cb76 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    cb72:	2902      	cmp	r1, #2
    cb74:	d301      	bcc.n	cb7a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    cb76:	2000      	movs	r0, #0
    cb78:	4770      	bx	lr
    cb7a:	f7f7 bad9 	b.w	4130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000cb7e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    cb7e:	b50e      	push	{r1, r2, r3, lr}
    cb80:	4669      	mov	r1, sp
    cb82:	f000 f818 	bl	cbb6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    cb86:	b120      	cbz	r0, cb92 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    cb88:	f44f 71b2 	mov.w	r1, #356	; 0x164
    cb8c:	2017      	movs	r0, #23
    cb8e:	f7f7 f81f 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb92:	4668      	mov	r0, sp
    cb94:	f7f7 fa4a 	bl	402c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    cb98:	b108      	cbz	r0, cb9e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    cb9a:	2000      	movs	r0, #0
    cb9c:	bd0e      	pop	{r1, r2, r3, pc}
    cb9e:	2001      	movs	r0, #1
    cba0:	bd0e      	pop	{r1, r2, r3, pc}

0000cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    cba2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    cba6:	3aff      	subs	r2, #255	; 0xff
    cba8:	d001      	beq.n	cbae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    cbaa:	2902      	cmp	r1, #2
    cbac:	d301      	bcc.n	cbb2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    cbae:	2000      	movs	r0, #0
    cbb0:	4770      	bx	lr
    cbb2:	f7f7 baf7 	b.w	41a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000cbb6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    cbb6:	b570      	push	{r4, r5, r6, lr}
    cbb8:	4605      	mov	r5, r0
    cbba:	460c      	mov	r4, r1
    cbbc:	4608      	mov	r0, r1
    cbbe:	f000 f850 	bl	cc62 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    cbc2:	b108      	cbz	r0, cbc8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    cbc4:	2010      	movs	r0, #16
    cbc6:	bd70      	pop	{r4, r5, r6, pc}
    cbc8:	2d02      	cmp	r5, #2
    cbca:	d301      	bcc.n	cbd0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    cbcc:	2007      	movs	r0, #7
    cbce:	bd70      	pop	{r4, r5, r6, pc}
    cbd0:	7025      	strb	r5, [r4, #0]
    cbd2:	2000      	movs	r0, #0
    cbd4:	8060      	strh	r0, [r4, #2]
    cbd6:	bd70      	pop	{r4, r5, r6, pc}
    cbd8:	b510      	push	{r4, lr}
    cbda:	4604      	mov	r4, r0
    cbdc:	f7f7 fb2e 	bl	423c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    cbe0:	42a0      	cmp	r0, r4
    cbe2:	d901      	bls.n	cbe8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    cbe4:	2001      	movs	r0, #1
    cbe6:	bd10      	pop	{r4, pc}
    cbe8:	2000      	movs	r0, #0
    cbea:	bd10      	pop	{r4, pc}
    cbec:	4770      	bx	lr

0000cbee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    cbee:	b570      	push	{r4, r5, r6, lr}
    cbf0:	460e      	mov	r6, r1
    cbf2:	461d      	mov	r5, r3
    cbf4:	4611      	mov	r1, r2
    cbf6:	f000 f811 	bl	cc1c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    cbfa:	4604      	mov	r4, r0
    cbfc:	4629      	mov	r1, r5
    cbfe:	4630      	mov	r0, r6
    cc00:	f000 f803 	bl	cc0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    cc04:	4420      	add	r0, r4
    cc06:	1d00      	adds	r0, r0, #4
    cc08:	bd70      	pop	{r4, r5, r6, pc}
    cc0a:	b510      	push	{r4, lr}
    cc0c:	460a      	mov	r2, r1
    cc0e:	2101      	movs	r1, #1
    cc10:	f7ff ff0a 	bl	ca28 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cc14:	1cc0      	adds	r0, r0, #3
    cc16:	f020 0003 	bic.w	r0, r0, #3
    cc1a:	bd10      	pop	{r4, pc}
    cc1c:	b510      	push	{r4, lr}
    cc1e:	460a      	mov	r2, r1
    cc20:	2101      	movs	r1, #1
    cc22:	f7ff ff01 	bl	ca28 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cc26:	1cc0      	adds	r0, r0, #3
    cc28:	f020 0003 	bic.w	r0, r0, #3
    cc2c:	bd10      	pop	{r4, pc}
    cc2e:	2800      	cmp	r0, #0
    cc30:	db09      	blt.n	cc46 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    cc32:	f000 021f 	and.w	r2, r0, #31
    cc36:	2101      	movs	r1, #1
    cc38:	4091      	lsls	r1, r2
    cc3a:	0940      	lsrs	r0, r0, #5
    cc3c:	0080      	lsls	r0, r0, #2
    cc3e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cc42:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cc46:	4770      	bx	lr

0000cc48 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    cc48:	f7f7 bcdc 	b.w	4604 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000cc4c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    cc4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cc50:	2000      	movs	r0, #0
    cc52:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    cc56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cc5a:	2001      	movs	r0, #1
    cc5c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    cc60:	4770      	bx	lr

0000cc62 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    cc62:	b108      	cbz	r0, cc68 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    cc64:	2000      	movs	r0, #0
    cc66:	4770      	bx	lr
    cc68:	2001      	movs	r0, #1
    cc6a:	4770      	bx	lr

0000cc6c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    cc6c:	f7f7 be10 	b.w	4890 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000cc70 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    cc70:	f7f7 bdfe 	b.w	4870 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000cc74 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    cc74:	b510      	push	{r4, lr}
    cc76:	2900      	cmp	r1, #0
    cc78:	4604      	mov	r4, r0
    cc7a:	f04f 0106 	mov.w	r1, #6
    cc7e:	d002      	beq.n	cc86 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    cc80:	f7f7 f836 	bl	3cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cc84:	e001      	b.n	cc8a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    cc86:	f7f7 f84f 	bl	3d28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    cc8a:	7960      	ldrb	r0, [r4, #5]
    cc8c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    cc90:	7160      	strb	r0, [r4, #5]
    cc92:	bd10      	pop	{r4, pc}

0000cc94 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    cc94:	4770      	bx	lr

0000cc96 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    cc96:	b530      	push	{r4, r5, lr}
    cc98:	460c      	mov	r4, r1
    cc9a:	4605      	mov	r5, r0
    cc9c:	b08d      	sub	sp, #52	; 0x34
    cc9e:	f04f 0103 	mov.w	r1, #3
    cca2:	f104 0003 	add.w	r0, r4, #3
    cca6:	b112      	cbz	r2, ccae <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    cca8:	f7f7 f822 	bl	3cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ccac:	e001      	b.n	ccb2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    ccae:	f7f7 f83b 	bl	3d28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ccb2:	7960      	ldrb	r0, [r4, #5]
    ccb4:	220d      	movs	r2, #13
    ccb6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    ccba:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ccbe:	7160      	strb	r0, [r4, #5]
    ccc0:	2100      	movs	r1, #0
    ccc2:	a804      	add	r0, sp, #16
    ccc4:	f7fe ffd5 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ccc8:	78e0      	ldrb	r0, [r4, #3]
    ccca:	f88d 001f 	strb.w	r0, [sp, #31]
    ccce:	7920      	ldrb	r0, [r4, #4]
    ccd0:	f88d 001e 	strb.w	r0, [sp, #30]
    ccd4:	7960      	ldrb	r0, [r4, #5]
    ccd6:	f88d 001d 	strb.w	r0, [sp, #29]
    ccda:	2210      	movs	r2, #16
    ccdc:	4629      	mov	r1, r5
    ccde:	4668      	mov	r0, sp
    cce0:	f7fe ff4d 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cce4:	4668      	mov	r0, sp
    cce6:	f7ff ffaf 	bl	cc48 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ccea:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    ccee:	7020      	strb	r0, [r4, #0]
    ccf0:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    ccf4:	7060      	strb	r0, [r4, #1]
    ccf6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    ccfa:	70a0      	strb	r0, [r4, #2]
    ccfc:	b00d      	add	sp, #52	; 0x34
    ccfe:	bd30      	pop	{r4, r5, pc}

0000cd00 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    cd00:	f7f8 b94a 	b.w	4f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    cd04:	07c1      	lsls	r1, r0, #31
    cd06:	d001      	beq.n	cd0c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    cd08:	2001      	movs	r0, #1
    cd0a:	4770      	bx	lr
    cd0c:	0780      	lsls	r0, r0, #30
    cd0e:	d501      	bpl.n	cd14 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    cd10:	2002      	movs	r0, #2
    cd12:	4770      	bx	lr
    cd14:	2000      	movs	r0, #0
    cd16:	4770      	bx	lr
    cd18:	b510      	push	{r4, lr}
    cd1a:	2801      	cmp	r0, #1
    cd1c:	d008      	beq.n	cd30 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    cd1e:	2802      	cmp	r0, #2
    cd20:	d004      	beq.n	cd2c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    cd22:	f240 31c1 	movw	r1, #961	; 0x3c1
    cd26:	2006      	movs	r0, #6
    cd28:	f7f6 ff52 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd2c:	2001      	movs	r0, #1
    cd2e:	bd10      	pop	{r4, pc}
    cd30:	2000      	movs	r0, #0
    cd32:	bd10      	pop	{r4, pc}
    cd34:	b570      	push	{r4, r5, r6, lr}
    cd36:	460c      	mov	r4, r1
    cd38:	4605      	mov	r5, r0
    cd3a:	2b08      	cmp	r3, #8
    cd3c:	d001      	beq.n	cd42 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    cd3e:	4619      	mov	r1, r3
    cd40:	e000      	b.n	cd44 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    cd42:	2104      	movs	r1, #4
    cd44:	4610      	mov	r0, r2
    cd46:	f000 f8f4 	bl	cf32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    cd4a:	b90d      	cbnz	r5, cd50 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x50>
    cd4c:	1d00      	adds	r0, r0, #4
    cd4e:	b280      	uxth	r0, r0
    cd50:	4284      	cmp	r4, r0
    cd52:	d200      	bcs.n	cd56 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x56>
    cd54:	4620      	mov	r0, r4
    cd56:	b2c0      	uxtb	r0, r0
    cd58:	bd70      	pop	{r4, r5, r6, pc}
    cd5a:	2900      	cmp	r1, #0
    cd5c:	d004      	beq.n	cd68 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x68>
    cd5e:	2801      	cmp	r0, #1
    cd60:	d003      	beq.n	cd6a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    cd62:	2901      	cmp	r1, #1
    cd64:	d001      	beq.n	cd6a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    cd66:	2002      	movs	r0, #2
    cd68:	4770      	bx	lr
    cd6a:	2001      	movs	r0, #1
    cd6c:	4770      	bx	lr
    cd6e:	f7ff bdb0 	b.w	c8d2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000cd72 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    cd72:	2201      	movs	r2, #1
    cd74:	f7f8 bcce 	b.w	5714 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000cd78 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    cd78:	b510      	push	{r4, lr}
    cd7a:	f002 f954 	bl	f026 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    cd7e:	b118      	cbz	r0, cd88 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    cd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cd84:	f7fd bca6 	b.w	a6d4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    cd88:	20ff      	movs	r0, #255	; 0xff
    cd8a:	bd10      	pop	{r4, pc}

0000cd8c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    cd8c:	b510      	push	{r4, lr}
    cd8e:	f7f8 fd0b 	bl	57a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cd92:	2810      	cmp	r0, #16
    cd94:	d003      	beq.n	cd9e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    cd96:	f7f8 fcd7 	bl	5748 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    cd9a:	2810      	cmp	r0, #16
    cd9c:	d100      	bne.n	cda0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    cd9e:	2008      	movs	r0, #8
    cda0:	bd10      	pop	{r4, pc}

0000cda2 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    cda2:	b510      	push	{r4, lr}
    cda4:	f7f8 fd00 	bl	57a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cda8:	2810      	cmp	r0, #16
    cdaa:	d007      	beq.n	cdbc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cdac:	f7f8 fccc 	bl	5748 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    cdb0:	2810      	cmp	r0, #16
    cdb2:	d003      	beq.n	cdbc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cdb4:	f7f8 fd40 	bl	5838 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    cdb8:	2001      	movs	r0, #1
    cdba:	bd10      	pop	{r4, pc}
    cdbc:	2000      	movs	r0, #0
    cdbe:	bd10      	pop	{r4, pc}

0000cdc0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    cdc0:	b510      	push	{r4, lr}
    cdc2:	f7f8 fcf1 	bl	57a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cdc6:	2810      	cmp	r0, #16
    cdc8:	d003      	beq.n	cdd2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    cdca:	f7f8 fd7d 	bl	58c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    cdce:	2001      	movs	r0, #1
    cdd0:	bd10      	pop	{r4, pc}
    cdd2:	2000      	movs	r0, #0
    cdd4:	bd10      	pop	{r4, pc}

0000cdd6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    cdd6:	b570      	push	{r4, r5, r6, lr}
    cdd8:	460e      	mov	r6, r1
    cdda:	b08c      	sub	sp, #48	; 0x30
    cddc:	4614      	mov	r4, r2
    cdde:	4601      	mov	r1, r0
    cde0:	461d      	mov	r5, r3
    cde2:	2210      	movs	r2, #16
    cde4:	4668      	mov	r0, sp
    cde6:	f000 f92d 	bl	d044 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cdea:	2210      	movs	r2, #16
    cdec:	4631      	mov	r1, r6
    cdee:	a804      	add	r0, sp, #16
    cdf0:	f000 f928 	bl	d044 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cdf4:	4668      	mov	r0, sp
    cdf6:	f7ff ff27 	bl	cc48 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    cdfa:	a908      	add	r1, sp, #32
    cdfc:	f04f 0210 	mov.w	r2, #16
    ce00:	4628      	mov	r0, r5
    ce02:	b11c      	cbz	r4, ce0c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ce04:	f000 f91e 	bl	d044 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ce08:	b00c      	add	sp, #48	; 0x30
    ce0a:	bd70      	pop	{r4, r5, r6, pc}
    ce0c:	f7fe feb7 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce10:	e7fa      	b.n	ce08 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ce12:	b510      	push	{r4, lr}
    ce14:	460c      	mov	r4, r1
    ce16:	2100      	movs	r1, #0
    ce18:	f7ff fec3 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ce1c:	6060      	str	r0, [r4, #4]
    ce1e:	b118      	cbz	r0, ce28 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    ce20:	2001      	movs	r0, #1
    ce22:	7020      	strb	r0, [r4, #0]
    ce24:	2000      	movs	r0, #0
    ce26:	bd10      	pop	{r4, pc}
    ce28:	2002      	movs	r0, #2
    ce2a:	bd10      	pop	{r4, pc}

0000ce2c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ce2c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ce30:	4348      	muls	r0, r1
    ce32:	4770      	bx	lr

0000ce34 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ce34:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ce38:	fbb0 f0f1 	udiv	r0, r0, r1
    ce3c:	b280      	uxth	r0, r0
    ce3e:	4770      	bx	lr

0000ce40 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    ce40:	b570      	push	{r4, r5, r6, lr}
    ce42:	4604      	mov	r4, r0
    ce44:	4290      	cmp	r0, r2
    ce46:	d20b      	bcs.n	ce60 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    ce48:	1b10      	subs	r0, r2, r4
    ce4a:	2864      	cmp	r0, #100	; 0x64
    ce4c:	d200      	bcs.n	ce50 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    ce4e:	2064      	movs	r0, #100	; 0x64
    ce50:	1825      	adds	r5, r4, r0
    ce52:	428d      	cmp	r5, r1
    ce54:	d803      	bhi.n	ce5e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    ce56:	2104      	movs	r1, #4
    ce58:	f7f4 f9c2 	bl	11e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ce5c:	b108      	cbz	r0, ce62 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    ce5e:	4620      	mov	r0, r4
    ce60:	bd70      	pop	{r4, r5, r6, pc}
    ce62:	4628      	mov	r0, r5
    ce64:	bd70      	pop	{r4, r5, r6, pc}

0000ce66 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ce66:	b510      	push	{r4, lr}
    ce68:	f1a2 030f 	sub.w	r3, r2, #15
    ce6c:	290c      	cmp	r1, #12
    ce6e:	d244      	bcs.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce70:	e8df f001 	tbb	[pc, r1]
    ce74:	120d0806 	.word	0x120d0806
    ce78:	241c1815 	.word	0x241c1815
    ce7c:	312a4127 	.word	0x312a4127
    ce80:	b3c2      	cbz	r2, cef4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    ce82:	e03a      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce84:	2a07      	cmp	r2, #7
    ce86:	d03a      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce88:	2a08      	cmp	r2, #8
    ce8a:	d038      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce8c:	e035      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce8e:	2a0c      	cmp	r2, #12
    ce90:	d035      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce92:	2a0b      	cmp	r2, #11
    ce94:	d033      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce96:	e030      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce98:	2a0d      	cmp	r2, #13
    ce9a:	d030      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce9c:	e02d      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce9e:	2b0c      	cmp	r3, #12
    cea0:	d92d      	bls.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cea2:	e02a      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cea4:	3a10      	subs	r2, #16
    cea6:	2a0b      	cmp	r2, #11
    cea8:	d929      	bls.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceaa:	e026      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ceac:	2b03      	cmp	r3, #3
    ceae:	d926      	bls.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceb0:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    ceb4:	b308      	cbz	r0, cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ceb6:	2a1b      	cmp	r2, #27
    ceb8:	d921      	bls.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceba:	e01e      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cebc:	2a04      	cmp	r2, #4
    cebe:	d01e      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cec0:	e01b      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cec2:	2a06      	cmp	r2, #6
    cec4:	d01b      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cec6:	e018      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cec8:	2a1c      	cmp	r2, #28
    ceca:	d018      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cecc:	2a1d      	cmp	r2, #29
    cece:	d016      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ced0:	2a1e      	cmp	r2, #30
    ced2:	d014      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ced4:	e011      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ced6:	2a1f      	cmp	r2, #31
    ced8:	d011      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceda:	2a20      	cmp	r2, #32
    cedc:	d00f      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cede:	2a21      	cmp	r2, #33	; 0x21
    cee0:	d00d      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cee2:	2a22      	cmp	r2, #34	; 0x22
    cee4:	d00b      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cee6:	2a23      	cmp	r2, #35	; 0x23
    cee8:	d009      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceea:	2a24      	cmp	r2, #36	; 0x24
    ceec:	d007      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceee:	2a26      	cmp	r2, #38	; 0x26
    cef0:	d005      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cef2:	e002      	b.n	cefa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cef4:	e003      	b.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cef6:	2a0e      	cmp	r2, #14
    cef8:	d001      	beq.n	cefe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cefa:	2000      	movs	r0, #0
    cefc:	bd10      	pop	{r4, pc}
    cefe:	2001      	movs	r0, #1
    cf00:	bd10      	pop	{r4, pc}

0000cf02 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    cf02:	280c      	cmp	r0, #12
    cf04:	d013      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf06:	280b      	cmp	r0, #11
    cf08:	d011      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf0a:	280d      	cmp	r0, #13
    cf0c:	d00f      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf0e:	281f      	cmp	r0, #31
    cf10:	d00d      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf12:	2820      	cmp	r0, #32
    cf14:	d00b      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf16:	2821      	cmp	r0, #33	; 0x21
    cf18:	d009      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf1a:	2822      	cmp	r0, #34	; 0x22
    cf1c:	d007      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf1e:	2823      	cmp	r0, #35	; 0x23
    cf20:	d005      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf22:	2824      	cmp	r0, #36	; 0x24
    cf24:	d003      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf26:	2826      	cmp	r0, #38	; 0x26
    cf28:	d001      	beq.n	cf2e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf2a:	2000      	movs	r0, #0
    cf2c:	4770      	bx	lr
    cf2e:	2001      	movs	r0, #1
    cf30:	4770      	bx	lr

0000cf32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    cf32:	f011 0f0c 	tst.w	r1, #12
    cf36:	d016      	beq.n	cf66 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    cf38:	074a      	lsls	r2, r1, #29
    cf3a:	f44f 7116 	mov.w	r1, #600	; 0x258
    cf3e:	2a00      	cmp	r2, #0
    cf40:	da02      	bge.n	cf48 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    cf42:	f04f 0210 	mov.w	r2, #16
    cf46:	e001      	b.n	cf4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    cf48:	f04f 0240 	mov.w	r2, #64	; 0x40
    cf4c:	da01      	bge.n	cf52 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    cf4e:	f04f 0196 	mov.w	r1, #150	; 0x96
    cf52:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    cf56:	eba0 0301 	sub.w	r3, r0, r1
    cf5a:	4288      	cmp	r0, r1
    cf5c:	d910      	bls.n	cf80 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cf5e:	fb93 f0f2 	sdiv	r0, r3, r2
    cf62:	b280      	uxth	r0, r0
    cf64:	4770      	bx	lr
    cf66:	2902      	cmp	r1, #2
    cf68:	d002      	beq.n	cf70 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    cf6a:	2870      	cmp	r0, #112	; 0x70
    cf6c:	d80a      	bhi.n	cf84 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    cf6e:	e007      	b.n	cf80 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cf70:	283c      	cmp	r0, #60	; 0x3c
    cf72:	d905      	bls.n	cf80 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cf74:	383c      	subs	r0, #60	; 0x3c
    cf76:	17c1      	asrs	r1, r0, #31
    cf78:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cf7c:	1080      	asrs	r0, r0, #2
    cf7e:	e7f0      	b.n	cf62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cf80:	2000      	movs	r0, #0
    cf82:	e7ee      	b.n	cf62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cf84:	3870      	subs	r0, #112	; 0x70
    cf86:	17c1      	asrs	r1, r0, #31
    cf88:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    cf8c:	10c0      	asrs	r0, r0, #3
    cf8e:	e7e8      	b.n	cf62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000cf90 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    cf90:	6809      	ldr	r1, [r1, #0]
    cf92:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
    cf96:	4770      	bx	lr

0000cf98 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    cf98:	7e83      	ldrb	r3, [r0, #26]
    cf9a:	b10b      	cbz	r3, cfa0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x8>
    cf9c:	2b25      	cmp	r3, #37	; 0x25
    cf9e:	d901      	bls.n	cfa4 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    cfa0:	2012      	movs	r0, #18
    cfa2:	4770      	bx	lr
    cfa4:	b12a      	cbz	r2, cfb2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1a>
    cfa6:	7c4b      	ldrb	r3, [r1, #17]
    cfa8:	b12b      	cbz	r3, cfb6 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1e>
    cfaa:	2b01      	cmp	r3, #1
    cfac:	d005      	beq.n	cfba <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x22>
    cfae:	201f      	movs	r0, #31
    cfb0:	4770      	bx	lr
    cfb2:	2000      	movs	r0, #0
    cfb4:	4770      	bx	lr
    cfb6:	f7f8 bd61 	b.w	5a7c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x1c>
    cfba:	f000 b8e8 	b.w	d18e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>

0000cfbe <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    cfbe:	07c1      	lsls	r1, r0, #31
    cfc0:	d001      	beq.n	cfc6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    cfc2:	2001      	movs	r0, #1
    cfc4:	4770      	bx	lr
    cfc6:	0781      	lsls	r1, r0, #30
    cfc8:	d501      	bpl.n	cfce <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    cfca:	2002      	movs	r0, #2
    cfcc:	4770      	bx	lr
    cfce:	0740      	lsls	r0, r0, #29
    cfd0:	d501      	bpl.n	cfd6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    cfd2:	2008      	movs	r0, #8
    cfd4:	4770      	bx	lr
    cfd6:	2000      	movs	r0, #0
    cfd8:	4770      	bx	lr

0000cfda <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    cfda:	b510      	push	{r4, lr}
    cfdc:	f640 12c4 	movw	r2, #2500	; 0x9c4
    cfe0:	2901      	cmp	r1, #1
    cfe2:	d006      	beq.n	cff2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    cfe4:	2902      	cmp	r1, #2
    cfe6:	d005      	beq.n	cff4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    cfe8:	f240 512a 	movw	r1, #1322	; 0x52a
    cfec:	2029      	movs	r0, #41	; 0x29
    cfee:	f7f6 fdef 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cff2:	b108      	cbz	r0, cff8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    cff4:	4610      	mov	r0, r2
    cff6:	bd10      	pop	{r4, pc}
    cff8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    cffc:	bd10      	pop	{r4, pc}

0000cffe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    cffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d002:	460c      	mov	r4, r1
    d004:	4605      	mov	r5, r0
    d006:	68c6      	ldr	r6, [r0, #12]
    d008:	f7f4 fd4c 	bl	1aa4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d00c:	b198      	cbz	r0, d036 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d00e:	b1bc      	cbz	r4, d040 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d010:	4630      	mov	r0, r6
    d012:	68e9      	ldr	r1, [r5, #12]
    d014:	f7f4 f9f6 	bl	1404 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d018:	2800      	cmp	r0, #0
    d01a:	dd11      	ble.n	d040 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d01c:	4420      	add	r0, r4
    d01e:	1e40      	subs	r0, r0, #1
    d020:	fbb0 f7f4 	udiv	r7, r0, r4
    d024:	fb07 f104 	mul.w	r1, r7, r4
    d028:	4630      	mov	r0, r6
    d02a:	f7f4 f9b5 	bl	1398 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d02e:	60e8      	str	r0, [r5, #12]
    d030:	4638      	mov	r0, r7
    d032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d036:	f240 31af 	movw	r1, #943	; 0x3af
    d03a:	2029      	movs	r0, #41	; 0x29
    d03c:	f7f6 fdc8 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d040:	2000      	movs	r0, #0
    d042:	e7f6      	b.n	d032 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d044 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d044:	b530      	push	{r4, r5, lr}
    d046:	4613      	mov	r3, r2
    d048:	e006      	b.n	d058 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d04a:	18cc      	adds	r4, r1, r3
    d04c:	1ad5      	subs	r5, r2, r3
    d04e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d052:	1e5b      	subs	r3, r3, #1
    d054:	5544      	strb	r4, [r0, r5]
    d056:	b2db      	uxtb	r3, r3
    d058:	2b00      	cmp	r3, #0
    d05a:	d1f6      	bne.n	d04a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d05c:	bd30      	pop	{r4, r5, pc}

0000d05e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d05e:	b538      	push	{r3, r4, r5, lr}
    d060:	4605      	mov	r5, r0
    d062:	460c      	mov	r4, r1
    d064:	4668      	mov	r0, sp
    d066:	f7fe f835 	bl	b0d4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d06a:	b308      	cbz	r0, d0b0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    d06c:	f99d 0000 	ldrsb.w	r0, [sp]
    d070:	7260      	strb	r0, [r4, #9]
    d072:	7f21      	ldrb	r1, [r4, #28]
    d074:	72a1      	strb	r1, [r4, #10]
    d076:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d07a:	2200      	movs	r2, #0
    d07c:	1a41      	subs	r1, r0, r1
    d07e:	d500      	bpl.n	d082 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x24>
    d080:	4249      	negs	r1, r1
    d082:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    d086:	428b      	cmp	r3, r1
    d088:	dc10      	bgt.n	d0ac <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d08a:	2bff      	cmp	r3, #255	; 0xff
    d08c:	d00e      	beq.n	d0ac <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d08e:	7b21      	ldrb	r1, [r4, #12]
    d090:	1c49      	adds	r1, r1, #1
    d092:	b2c9      	uxtb	r1, r1
    d094:	7321      	strb	r1, [r4, #12]
    d096:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    d09a:	4299      	cmp	r1, r3
    d09c:	d802      	bhi.n	d0a4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    d09e:	7ae1      	ldrb	r1, [r4, #11]
    d0a0:	297f      	cmp	r1, #127	; 0x7f
    d0a2:	d103      	bne.n	d0ac <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d0a4:	72e0      	strb	r0, [r4, #11]
    d0a6:	2000      	movs	r0, #0
    d0a8:	7320      	strb	r0, [r4, #12]
    d0aa:	2201      	movs	r2, #1
    d0ac:	4610      	mov	r0, r2
    d0ae:	bd38      	pop	{r3, r4, r5, pc}
    d0b0:	207f      	movs	r0, #127	; 0x7f
    d0b2:	7260      	strb	r0, [r4, #9]
    d0b4:	2000      	movs	r0, #0
    d0b6:	bd38      	pop	{r3, r4, r5, pc}

0000d0b8 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d0b8:	2300      	movs	r3, #0
    d0ba:	6203      	str	r3, [r0, #32]
    d0bc:	8502      	strh	r2, [r0, #40]	; 0x28
    d0be:	f240 2371 	movw	r3, #625	; 0x271
    d0c2:	435a      	muls	r2, r3
    d0c4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d0c8:	1e52      	subs	r2, r2, #1
    d0ca:	fbb2 f1f1 	udiv	r1, r2, r1
    d0ce:	6241      	str	r1, [r0, #36]	; 0x24
    d0d0:	4770      	bx	lr

0000d0d2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d0d2:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d0d6:	4607      	mov	r7, r0
    d0d8:	4690      	mov	r8, r2
    d0da:	468b      	mov	fp, r1
    d0dc:	2601      	movs	r6, #1
    d0de:	4608      	mov	r0, r1
    d0e0:	f000 f93c 	bl	d35c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d0e4:	4682      	mov	sl, r0
    d0e6:	4658      	mov	r0, fp
    d0e8:	f000 f944 	bl	d374 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d0ec:	4681      	mov	r9, r0
    d0ee:	f7ff ff66 	bl	cfbe <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d0f2:	4604      	mov	r4, r0
    d0f4:	4650      	mov	r0, sl
    d0f6:	f7ff ff62 	bl	cfbe <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d0fa:	4605      	mov	r5, r0
    d0fc:	ea54 0005 	orrs.w	r0, r4, r5
    d100:	d100      	bne.n	d104 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d102:	2600      	movs	r6, #0
    d104:	f7fd fa88 	bl	a618 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d108:	ea10 0f09 	tst.w	r0, r9
    d10c:	d100      	bne.n	d110 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d10e:	2400      	movs	r4, #0
    d110:	f7fd fa82 	bl	a618 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d114:	ea10 0f0a 	tst.w	r0, sl
    d118:	d100      	bne.n	d11c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d11a:	2500      	movs	r5, #0
    d11c:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
    d120:	42a0      	cmp	r0, r4
    d122:	d100      	bne.n	d126 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d124:	2400      	movs	r4, #0
    d126:	f888 4000 	strb.w	r4, [r8]
    d12a:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
    d12e:	42a8      	cmp	r0, r5
    d130:	d100      	bne.n	d134 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d132:	2500      	movs	r5, #0
    d134:	f888 5001 	strb.w	r5, [r8, #1]
    d138:	b974      	cbnz	r4, d158 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d13a:	b96d      	cbnz	r5, d158 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d13c:	4658      	mov	r0, fp
    d13e:	f000 f917 	bl	d370 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d142:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    d146:	1a40      	subs	r0, r0, r1
    d148:	b200      	sxth	r0, r0
    d14a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d14e:	4288      	cmp	r0, r1
    d150:	dc01      	bgt.n	d156 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d152:	2800      	cmp	r0, #0
    d154:	dc00      	bgt.n	d158 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d156:	2600      	movs	r6, #0
    d158:	4630      	mov	r0, r6
    d15a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d15e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d15e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d162:	4348      	muls	r0, r1
    d164:	4770      	bx	lr

0000d166 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d166:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d16a:	fb10 f001 	smulbb	r0, r0, r1
    d16e:	4770      	bx	lr

0000d170 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d170:	b510      	push	{r4, lr}
    d172:	2300      	movs	r3, #0
    d174:	461a      	mov	r2, r3
    d176:	e003      	b.n	d180 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d178:	5c84      	ldrb	r4, [r0, r2]
    d17a:	4323      	orrs	r3, r4
    d17c:	1c52      	adds	r2, r2, #1
    d17e:	b2d2      	uxtb	r2, r2
    d180:	428a      	cmp	r2, r1
    d182:	d3f9      	bcc.n	d178 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d184:	b10b      	cbz	r3, d18a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d186:	2000      	movs	r0, #0
    d188:	bd10      	pop	{r4, pc}
    d18a:	2001      	movs	r0, #1
    d18c:	bd10      	pop	{r4, pc}
    d18e:	b5f0      	push	{r4, r5, r6, r7, lr}
    d190:	7d0c      	ldrb	r4, [r1, #20]
    d192:	7c8b      	ldrb	r3, [r1, #18]
    d194:	7ccd      	ldrb	r5, [r1, #19]
    d196:	405c      	eors	r4, r3
    d198:	7d4b      	ldrb	r3, [r1, #21]
    d19a:	8882      	ldrh	r2, [r0, #4]
    d19c:	406b      	eors	r3, r5
    d19e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    d1a2:	7e86      	ldrb	r6, [r0, #26]
    d1a4:	4062      	eors	r2, r4
    d1a6:	2300      	movs	r3, #0
    d1a8:	b2d5      	uxtb	r5, r2
    d1aa:	0a12      	lsrs	r2, r2, #8
    d1ac:	fa95 f5a5 	rbit	r5, r5
    d1b0:	fa92 f2a2 	rbit	r2, r2
    d1b4:	0e2d      	lsrs	r5, r5, #24
    d1b6:	0e12      	lsrs	r2, r2, #24
    d1b8:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
    d1bc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    d1c0:	1c5b      	adds	r3, r3, #1
    d1c2:	4422      	add	r2, r4
    d1c4:	b2db      	uxtb	r3, r3
    d1c6:	b292      	uxth	r2, r2
    d1c8:	2b03      	cmp	r3, #3
    d1ca:	d3ed      	bcc.n	d1a8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x38>
    d1cc:	4062      	eors	r2, r4
    d1ce:	2325      	movs	r3, #37	; 0x25
    d1d0:	fbb2 f4f3 	udiv	r4, r2, r3
    d1d4:	fb03 2314 	mls	r3, r3, r4, r2
    d1d8:	eb01 04d3 	add.w	r4, r1, r3, lsr #3
    d1dc:	76c3      	strb	r3, [r0, #27]
    d1de:	f003 0707 	and.w	r7, r3, #7
    d1e2:	7b24      	ldrb	r4, [r4, #12]
    d1e4:	2501      	movs	r5, #1
    d1e6:	fa05 f707 	lsl.w	r7, r5, r7
    d1ea:	423c      	tst	r4, r7
    d1ec:	d001      	beq.n	d1f2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x82>
    d1ee:	7703      	strb	r3, [r0, #28]
    d1f0:	e01a      	b.n	d228 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
    d1f2:	4356      	muls	r6, r2
    d1f4:	0c32      	lsrs	r2, r6, #16
    d1f6:	1c52      	adds	r2, r2, #1
    d1f8:	b2d2      	uxtb	r2, r2
    d1fa:	2400      	movs	r4, #0
    d1fc:	1903      	adds	r3, r0, r4
    d1fe:	7d5b      	ldrb	r3, [r3, #21]
    d200:	4293      	cmp	r3, r2
    d202:	d313      	bcc.n	d22c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xbc>
    d204:	2300      	movs	r3, #0
    d206:	190e      	adds	r6, r1, r4
    d208:	7b36      	ldrb	r6, [r6, #12]
    d20a:	fa05 f703 	lsl.w	r7, r5, r3
    d20e:	423e      	tst	r6, r7
    d210:	d001      	beq.n	d216 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xa6>
    d212:	1e52      	subs	r2, r2, #1
    d214:	b2d2      	uxtb	r2, r2
    d216:	b122      	cbz	r2, d222 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb2>
    d218:	1c5b      	adds	r3, r3, #1
    d21a:	b2db      	uxtb	r3, r3
    d21c:	2b08      	cmp	r3, #8
    d21e:	d3f4      	bcc.n	d20a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x9a>
    d220:	e006      	b.n	d230 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xc0>
    d222:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    d226:	7701      	strb	r1, [r0, #28]
    d228:	2000      	movs	r0, #0
    d22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d22c:	1ad2      	subs	r2, r2, r3
    d22e:	b2d2      	uxtb	r2, r2
    d230:	1c64      	adds	r4, r4, #1
    d232:	b2e4      	uxtb	r4, r4
    d234:	2c05      	cmp	r4, #5
    d236:	d3e1      	bcc.n	d1fc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8c>
    d238:	201f      	movs	r0, #31
    d23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d23c:	b570      	push	{r4, r5, r6, lr}
    d23e:	4605      	mov	r5, r0
    d240:	7c08      	ldrb	r0, [r1, #16]
    d242:	460e      	mov	r6, r1
    d244:	f000 001f 	and.w	r0, r0, #31
    d248:	7408      	strb	r0, [r1, #16]
    d24a:	2000      	movs	r0, #0
    d24c:	76a8      	strb	r0, [r5, #26]
    d24e:	4604      	mov	r4, r0
    d250:	1930      	adds	r0, r6, r4
    d252:	7b00      	ldrb	r0, [r0, #12]
    d254:	f000 f811 	bl	d27a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10a>
    d258:	1929      	adds	r1, r5, r4
    d25a:	1c64      	adds	r4, r4, #1
    d25c:	7548      	strb	r0, [r1, #21]
    d25e:	7ea9      	ldrb	r1, [r5, #26]
    d260:	b2e4      	uxtb	r4, r4
    d262:	4408      	add	r0, r1
    d264:	76a8      	strb	r0, [r5, #26]
    d266:	2c05      	cmp	r4, #5
    d268:	d3f2      	bcc.n	d250 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xe0>
    d26a:	b2c0      	uxtb	r0, r0
    d26c:	2825      	cmp	r0, #37	; 0x25
    d26e:	d903      	bls.n	d278 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x108>
    d270:	21bf      	movs	r1, #191	; 0xbf
    d272:	2029      	movs	r0, #41	; 0x29
    d274:	f7f6 fcac 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d278:	bd70      	pop	{r4, r5, r6, pc}
    d27a:	f000 0101 	and.w	r1, r0, #1
    d27e:	0840      	lsrs	r0, r0, #1
    d280:	f000 0201 	and.w	r2, r0, #1
    d284:	4411      	add	r1, r2
    d286:	0840      	lsrs	r0, r0, #1
    d288:	f000 0201 	and.w	r2, r0, #1
    d28c:	4411      	add	r1, r2
    d28e:	0840      	lsrs	r0, r0, #1
    d290:	f000 0201 	and.w	r2, r0, #1
    d294:	4411      	add	r1, r2
    d296:	0840      	lsrs	r0, r0, #1
    d298:	f000 0201 	and.w	r2, r0, #1
    d29c:	4411      	add	r1, r2
    d29e:	0840      	lsrs	r0, r0, #1
    d2a0:	f000 0201 	and.w	r2, r0, #1
    d2a4:	4411      	add	r1, r2
    d2a6:	0840      	lsrs	r0, r0, #1
    d2a8:	f000 0201 	and.w	r2, r0, #1
    d2ac:	4411      	add	r1, r2
    d2ae:	eb01 0050 	add.w	r0, r1, r0, lsr #1
    d2b2:	4770      	bx	lr

0000d2b4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d2b4:	b570      	push	{r4, r5, r6, lr}
    d2b6:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d2ba:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d2be:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d2c2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d2c6:	88c0      	ldrh	r0, [r0, #6]
    d2c8:	b131      	cbz	r1, d2d8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d2ca:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d2ce:	d903      	bls.n	d2d8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d2d0:	f640 5107 	movw	r1, #3335	; 0xd07
    d2d4:	428a      	cmp	r2, r1
    d2d6:	d90b      	bls.n	d2f0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d2d8:	1f91      	subs	r1, r2, #6
    d2da:	f640 467a 	movw	r6, #3194	; 0xc7a
    d2de:	42b1      	cmp	r1, r6
    d2e0:	d80e      	bhi.n	d300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2e2:	b16b      	cbz	r3, d300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2e4:	2b08      	cmp	r3, #8
    d2e6:	d80b      	bhi.n	d300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2e8:	4293      	cmp	r3, r2
    d2ea:	d209      	bcs.n	d300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2ec:	4294      	cmp	r4, r2
    d2ee:	d807      	bhi.n	d300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2f0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d2f4:	d204      	bcs.n	d300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2f6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d2fa:	d801      	bhi.n	d300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2fc:	2001      	movs	r0, #1
    d2fe:	bd70      	pop	{r4, r5, r6, pc}
    d300:	2000      	movs	r0, #0
    d302:	bd70      	pop	{r4, r5, r6, pc}

0000d304 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d304:	6842      	ldr	r2, [r0, #4]
    d306:	600a      	str	r2, [r1, #0]
    d308:	7a00      	ldrb	r0, [r0, #8]
    d30a:	7108      	strb	r0, [r1, #4]
    d30c:	4770      	bx	lr

0000d30e <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d30e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d312:	4770      	bx	lr

0000d314 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d314:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d318:	4770      	bx	lr

0000d31a <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d31a:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d31e:	4770      	bx	lr

0000d320 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d320:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d324:	4770      	bx	lr

0000d326 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d326:	8980      	ldrh	r0, [r0, #12]
    d328:	8008      	strh	r0, [r1, #0]
    d32a:	4770      	bx	lr

0000d32c <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d32c:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d330:	6008      	str	r0, [r1, #0]
    d332:	4770      	bx	lr

0000d334 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d334:	6842      	ldr	r2, [r0, #4]
    d336:	600a      	str	r2, [r1, #0]
    d338:	6880      	ldr	r0, [r0, #8]
    d33a:	6048      	str	r0, [r1, #4]
    d33c:	4770      	bx	lr

0000d33e <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d33e:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d342:	600a      	str	r2, [r1, #0]
    d344:	6840      	ldr	r0, [r0, #4]
    d346:	6048      	str	r0, [r1, #4]
    d348:	4770      	bx	lr

0000d34a <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d34a:	6842      	ldr	r2, [r0, #4]
    d34c:	600a      	str	r2, [r1, #0]
    d34e:	6880      	ldr	r0, [r0, #8]
    d350:	6048      	str	r0, [r1, #4]
    d352:	4770      	bx	lr

0000d354 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d354:	7800      	ldrb	r0, [r0, #0]
    d356:	f000 0003 	and.w	r0, r0, #3
    d35a:	4770      	bx	lr

0000d35c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d35c:	7900      	ldrb	r0, [r0, #4]
    d35e:	4770      	bx	lr

0000d360 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d360:	8880      	ldrh	r0, [r0, #4]
    d362:	4770      	bx	lr

0000d364 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d364:	88c0      	ldrh	r0, [r0, #6]
    d366:	4770      	bx	lr

0000d368 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d368:	8900      	ldrh	r0, [r0, #8]
    d36a:	4770      	bx	lr

0000d36c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d36c:	8940      	ldrh	r0, [r0, #10]
    d36e:	4770      	bx	lr

0000d370 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d370:	88c0      	ldrh	r0, [r0, #6]
    d372:	4770      	bx	lr

0000d374 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d374:	7940      	ldrb	r0, [r0, #5]
    d376:	4770      	bx	lr

0000d378 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d378:	7900      	ldrb	r0, [r0, #4]
    d37a:	4770      	bx	lr

0000d37c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d37c:	7900      	ldrb	r0, [r0, #4]
    d37e:	4770      	bx	lr

0000d380 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d380:	8901      	ldrh	r1, [r0, #8]
    d382:	291b      	cmp	r1, #27
    d384:	d30c      	bcc.n	d3a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d386:	8941      	ldrh	r1, [r0, #10]
    d388:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d38c:	4291      	cmp	r1, r2
    d38e:	d307      	bcc.n	d3a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d390:	8881      	ldrh	r1, [r0, #4]
    d392:	291b      	cmp	r1, #27
    d394:	d304      	bcc.n	d3a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d396:	88c0      	ldrh	r0, [r0, #6]
    d398:	4290      	cmp	r0, r2
    d39a:	d301      	bcc.n	d3a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d39c:	2001      	movs	r0, #1
    d39e:	4770      	bx	lr
    d3a0:	2000      	movs	r0, #0
    d3a2:	4770      	bx	lr

0000d3a4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d3a4:	b510      	push	{r4, lr}
    d3a6:	29fb      	cmp	r1, #251	; 0xfb
    d3a8:	d904      	bls.n	d3b4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d3aa:	f240 515b 	movw	r1, #1371	; 0x55b
    d3ae:	202a      	movs	r0, #42	; 0x2a
    d3b0:	f7f6 fc0e 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3b4:	7041      	strb	r1, [r0, #1]
    d3b6:	bd10      	pop	{r4, pc}

0000d3b8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d3b8:	7901      	ldrb	r1, [r0, #4]
    d3ba:	0749      	lsls	r1, r1, #29
    d3bc:	d004      	beq.n	d3c8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d3be:	7940      	ldrb	r0, [r0, #5]
    d3c0:	0740      	lsls	r0, r0, #29
    d3c2:	d001      	beq.n	d3c8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d3c4:	2001      	movs	r0, #1
    d3c6:	4770      	bx	lr
    d3c8:	2000      	movs	r0, #0
    d3ca:	4770      	bx	lr

0000d3cc <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d3cc:	7900      	ldrb	r0, [r0, #4]
    d3ce:	4770      	bx	lr

0000d3d0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d3d0:	7940      	ldrb	r0, [r0, #5]
    d3d2:	4770      	bx	lr

0000d3d4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d3d4:	7101      	strb	r1, [r0, #4]
    d3d6:	4770      	bx	lr

0000d3d8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d3d8:	7141      	strb	r1, [r0, #5]
    d3da:	4770      	bx	lr

0000d3dc <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d3dc:	b510      	push	{r4, lr}
    d3de:	2a1b      	cmp	r2, #27
    d3e0:	d904      	bls.n	d3ec <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d3e2:	f240 31c2 	movw	r1, #962	; 0x3c2
    d3e6:	202a      	movs	r0, #42	; 0x2a
    d3e8:	f7f6 fbf2 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3ec:	7042      	strb	r2, [r0, #1]
    d3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d3f2:	1cc0      	adds	r0, r0, #3
    d3f4:	f7fe bbc3 	b.w	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d3f8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d3f8:	6809      	ldr	r1, [r1, #0]
    d3fa:	60c1      	str	r1, [r0, #12]
    d3fc:	4770      	bx	lr

0000d3fe <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d3fe:	680a      	ldr	r2, [r1, #0]
    d400:	6042      	str	r2, [r0, #4]
    d402:	6849      	ldr	r1, [r1, #4]
    d404:	6081      	str	r1, [r0, #8]
    d406:	4770      	bx	lr

0000d408 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d408:	680a      	ldr	r2, [r1, #0]
    d40a:	6042      	str	r2, [r0, #4]
    d40c:	6849      	ldr	r1, [r1, #4]
    d40e:	6081      	str	r1, [r0, #8]
    d410:	4770      	bx	lr

0000d412 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d412:	680a      	ldr	r2, [r1, #0]
    d414:	6042      	str	r2, [r0, #4]
    d416:	6849      	ldr	r1, [r1, #4]
    d418:	6081      	str	r1, [r0, #8]
    d41a:	4770      	bx	lr

0000d41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d41c:	7802      	ldrb	r2, [r0, #0]
    d41e:	f001 0103 	and.w	r1, r1, #3
    d422:	f022 0203 	bic.w	r2, r2, #3
    d426:	430a      	orrs	r2, r1
    d428:	7002      	strb	r2, [r0, #0]
    d42a:	4770      	bx	lr

0000d42c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d42c:	7101      	strb	r1, [r0, #4]
    d42e:	0a09      	lsrs	r1, r1, #8
    d430:	7141      	strb	r1, [r0, #5]
    d432:	4770      	bx	lr

0000d434 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d434:	7181      	strb	r1, [r0, #6]
    d436:	0a09      	lsrs	r1, r1, #8
    d438:	71c1      	strb	r1, [r0, #7]
    d43a:	4770      	bx	lr

0000d43c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d43c:	7201      	strb	r1, [r0, #8]
    d43e:	0a09      	lsrs	r1, r1, #8
    d440:	7241      	strb	r1, [r0, #9]
    d442:	4770      	bx	lr

0000d444 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d444:	7281      	strb	r1, [r0, #10]
    d446:	0a09      	lsrs	r1, r1, #8
    d448:	72c1      	strb	r1, [r0, #11]
    d44a:	4770      	bx	lr

0000d44c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d44c:	b570      	push	{r4, r5, r6, lr}
    d44e:	7802      	ldrb	r2, [r0, #0]
    d450:	f002 020f 	and.w	r2, r2, #15
    d454:	2a03      	cmp	r2, #3
    d456:	d02c      	beq.n	d4b2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    d458:	2a05      	cmp	r2, #5
    d45a:	d12d      	bne.n	d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d45c:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d460:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d464:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d468:	7d83      	ldrb	r3, [r0, #22]
    d46a:	b141      	cbz	r1, d47e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d46c:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d470:	d905      	bls.n	d47e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d472:	f640 5107 	movw	r1, #3335	; 0xd07
    d476:	428a      	cmp	r2, r1
    d478:	d801      	bhi.n	d47e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d47a:	2101      	movs	r1, #1
    d47c:	e000      	b.n	d480 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    d47e:	2100      	movs	r1, #0
    d480:	7846      	ldrb	r6, [r0, #1]
    d482:	2e22      	cmp	r6, #34	; 0x22
    d484:	d118      	bne.n	d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d486:	b959      	cbnz	r1, d4a0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    d488:	1f91      	subs	r1, r2, #6
    d48a:	f640 467a 	movw	r6, #3194	; 0xc7a
    d48e:	42b1      	cmp	r1, r6
    d490:	d812      	bhi.n	d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d492:	b18b      	cbz	r3, d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d494:	2b08      	cmp	r3, #8
    d496:	d80f      	bhi.n	d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d498:	4293      	cmp	r3, r2
    d49a:	d20d      	bcs.n	d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d49c:	4294      	cmp	r4, r2
    d49e:	d80b      	bhi.n	d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d4a0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d4a4:	d208      	bcs.n	d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d4a6:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d4aa:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d4ae:	d905      	bls.n	d4bc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d4b0:	e002      	b.n	d4b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d4b2:	7840      	ldrb	r0, [r0, #1]
    d4b4:	280c      	cmp	r0, #12
    d4b6:	d001      	beq.n	d4bc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d4b8:	2000      	movs	r0, #0
    d4ba:	bd70      	pop	{r4, r5, r6, pc}
    d4bc:	2001      	movs	r0, #1
    d4be:	bd70      	pop	{r4, r5, r6, pc}

0000d4c0 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d4c0:	b570      	push	{r4, r5, r6, lr}
    d4c2:	4614      	mov	r4, r2
    d4c4:	4605      	mov	r5, r0
    d4c6:	2a1f      	cmp	r2, #31
    d4c8:	d903      	bls.n	d4d2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d4ca:	21b2      	movs	r1, #178	; 0xb2
    d4cc:	202a      	movs	r0, #42	; 0x2a
    d4ce:	f7f6 fb7f 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4d2:	f105 0009 	add.w	r0, r5, #9
    d4d6:	f7fe fb52 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d4da:	1da4      	adds	r4, r4, #6
    d4dc:	706c      	strb	r4, [r5, #1]
    d4de:	bd70      	pop	{r4, r5, r6, pc}

0000d4e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    d4e0:	b510      	push	{r4, lr}
    d4e2:	7802      	ldrb	r2, [r0, #0]
    d4e4:	f001 030f 	and.w	r3, r1, #15
    d4e8:	f022 020f 	bic.w	r2, r2, #15
    d4ec:	431a      	orrs	r2, r3
    d4ee:	7002      	strb	r2, [r0, #0]
    d4f0:	2907      	cmp	r1, #7
    d4f2:	d20c      	bcs.n	d50e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    d4f4:	e8df f001 	tbb	[pc, r1]
    d4f8:	06040604 	.word	0x06040604
    d4fc:	00040804 	.word	0x00040804
    d500:	2106      	movs	r1, #6
    d502:	e002      	b.n	d50a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d504:	210c      	movs	r1, #12
    d506:	e000      	b.n	d50a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d508:	2122      	movs	r1, #34	; 0x22
    d50a:	7041      	strb	r1, [r0, #1]
    d50c:	bd10      	pop	{r4, pc}
    d50e:	216e      	movs	r1, #110	; 0x6e
    d510:	202a      	movs	r0, #42	; 0x2a
    d512:	f7f6 fb5d 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d516 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    d516:	680a      	ldr	r2, [r1, #0]
    d518:	f840 2f09 	str.w	r2, [r0, #9]!
    d51c:	8889      	ldrh	r1, [r1, #4]
    d51e:	8081      	strh	r1, [r0, #4]
    d520:	4770      	bx	lr

0000d522 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    d522:	7802      	ldrb	r2, [r0, #0]
    d524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d528:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d52c:	7002      	strb	r2, [r0, #0]
    d52e:	4770      	bx	lr

0000d530 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    d530:	680a      	ldr	r2, [r1, #0]
    d532:	f840 2f03 	str.w	r2, [r0, #3]!
    d536:	8889      	ldrh	r1, [r1, #4]
    d538:	8081      	strh	r1, [r0, #4]
    d53a:	4770      	bx	lr

0000d53c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    d53c:	7802      	ldrb	r2, [r0, #0]
    d53e:	2340      	movs	r3, #64	; 0x40
    d540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    d544:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d548:	430a      	orrs	r2, r1
    d54a:	7002      	strb	r2, [r0, #0]
    d54c:	4770      	bx	lr

0000d54e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    d54e:	b570      	push	{r4, r5, r6, lr}
    d550:	4614      	mov	r4, r2
    d552:	4605      	mov	r5, r0
    d554:	2a1f      	cmp	r2, #31
    d556:	d903      	bls.n	d560 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    d558:	21d4      	movs	r1, #212	; 0xd4
    d55a:	202a      	movs	r0, #42	; 0x2a
    d55c:	f7f6 fb38 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d560:	f105 0009 	add.w	r0, r5, #9
    d564:	f7fe fb0b 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d568:	1da4      	adds	r4, r4, #6
    d56a:	706c      	strb	r4, [r5, #1]
    d56c:	bd70      	pop	{r4, r5, r6, pc}

0000d56e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    d56e:	2101      	movs	r1, #1
    d570:	f000 b853 	b.w	d61a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000d574 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    d574:	6841      	ldr	r1, [r0, #4]
    d576:	2200      	movs	r2, #0
    d578:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    d57c:	2b00      	cmp	r3, #0
    d57e:	d004      	beq.n	d58a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    d580:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    d584:	6840      	ldr	r0, [r0, #4]
    d586:	f000 bc63 	b.w	de50 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    d58a:	4770      	bx	lr
    d58c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d590:	460e      	mov	r6, r1
    d592:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    d596:	4617      	mov	r7, r2
    d598:	39ff      	subs	r1, #255	; 0xff
    d59a:	d014      	beq.n	d5c6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d59c:	8030      	strh	r0, [r6, #0]
    d59e:	2100      	movs	r1, #0
    d5a0:	7171      	strb	r1, [r6, #5]
    d5a2:	f7f6 ff25 	bl	43f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d5a6:	4604      	mov	r4, r0
    d5a8:	f7ff f91e 	bl	c7e8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    d5ac:	0005      	movs	r5, r0
    d5ae:	d00a      	beq.n	d5c6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d5b0:	4620      	mov	r0, r4
    d5b2:	4629      	mov	r1, r5
    d5b4:	aa01      	add	r2, sp, #4
    d5b6:	f7ff f93a 	bl	c82e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    d5ba:	8070      	strh	r0, [r6, #2]
    d5bc:	b130      	cbz	r0, d5cc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    d5be:	28fb      	cmp	r0, #251	; 0xfb
    d5c0:	d906      	bls.n	d5d0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    d5c2:	21c9      	movs	r1, #201	; 0xc9
    d5c4:	e026      	b.n	d614 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d5c6:	2000      	movs	r0, #0
    d5c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d5cc:	21c8      	movs	r1, #200	; 0xc8
    d5ce:	e021      	b.n	d614 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d5d0:	9801      	ldr	r0, [sp, #4]
    d5d2:	f7ff febf 	bl	d354 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    d5d6:	2801      	cmp	r0, #1
    d5d8:	d003      	beq.n	d5e2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d5da:	2802      	cmp	r0, #2
    d5dc:	d001      	beq.n	d5e2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d5de:	21d8      	movs	r1, #216	; 0xd8
    d5e0:	e018      	b.n	d614 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d5e2:	7130      	strb	r0, [r6, #4]
    d5e4:	4629      	mov	r1, r5
    d5e6:	8873      	ldrh	r3, [r6, #2]
    d5e8:	2503      	movs	r5, #3
    d5ea:	4620      	mov	r0, r4
    d5ec:	463a      	mov	r2, r7
    d5ee:	9500      	str	r5, [sp, #0]
    d5f0:	f7fe ffef 	bl	c5d2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    d5f4:	4620      	mov	r0, r4
    d5f6:	60b7      	str	r7, [r6, #8]
    d5f8:	f7ff f8a5 	bl	c746 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    d5fc:	b138      	cbz	r0, d60e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    d5fe:	2100      	movs	r1, #0
    d600:	4620      	mov	r0, r4
    d602:	460a      	mov	r2, r1
    d604:	f7ff f9e9 	bl	c9da <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    d608:	b118      	cbz	r0, d612 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    d60a:	2001      	movs	r0, #1
    d60c:	e7dc      	b.n	d5c8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    d60e:	21e8      	movs	r1, #232	; 0xe8
    d610:	e000      	b.n	d614 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d612:	21ed      	movs	r1, #237	; 0xed
    d614:	202b      	movs	r0, #43	; 0x2b
    d616:	f7f6 fadb 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d61a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d61e:	4604      	mov	r4, r0
    d620:	460e      	mov	r6, r1
    d622:	2000      	movs	r0, #0
    d624:	f7f6 fcb6 	bl	3f94 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d628:	4605      	mov	r5, r0
    d62a:	2000      	movs	r0, #0
    d62c:	b916      	cbnz	r6, d634 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    d62e:	2001      	movs	r0, #1
    d630:	f7f6 fcb0 	bl	3f94 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d634:	2600      	movs	r6, #0
    d636:	46b0      	mov	r8, r6
    d638:	182f      	adds	r7, r5, r0
    d63a:	e017      	b.n	d66c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    d63c:	8820      	ldrh	r0, [r4, #0]
    d63e:	1c40      	adds	r0, r0, #1
    d640:	b280      	uxth	r0, r0
    d642:	8020      	strh	r0, [r4, #0]
    d644:	42b8      	cmp	r0, r7
    d646:	d302      	bcc.n	d64e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    d648:	4640      	mov	r0, r8
    d64a:	f8a4 8000 	strh.w	r8, [r4]
    d64e:	b280      	uxth	r0, r0
    d650:	42a8      	cmp	r0, r5
    d652:	d304      	bcc.n	d65e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d654:	42b8      	cmp	r0, r7
    d656:	d202      	bcs.n	d65e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d658:	2000      	movs	r0, #0
    d65a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d65e:	4669      	mov	r1, sp
    d660:	f7ff fbd7 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d664:	2800      	cmp	r0, #0
    d666:	d0f8      	beq.n	d65a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    d668:	1c76      	adds	r6, r6, #1
    d66a:	b2f6      	uxtb	r6, r6
    d66c:	42b7      	cmp	r7, r6
    d66e:	d8e5      	bhi.n	d63c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    d670:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d674:	8020      	strh	r0, [r4, #0]
    d676:	2012      	movs	r0, #18
    d678:	e7ef      	b.n	d65a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000d67a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    d67a:	b570      	push	{r4, r5, r6, lr}
    d67c:	8050      	strh	r0, [r2, #2]
    d67e:	890c      	ldrh	r4, [r1, #8]
    d680:	8094      	strh	r4, [r2, #4]
    d682:	898b      	ldrh	r3, [r1, #12]
    d684:	80d3      	strh	r3, [r2, #6]
    d686:	8948      	ldrh	r0, [r1, #10]
    d688:	8110      	strh	r0, [r2, #8]
    d68a:	89cd      	ldrh	r5, [r1, #14]
    d68c:	8155      	strh	r5, [r2, #10]
    d68e:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    d690:	42ae      	cmp	r6, r5
    d692:	d108      	bne.n	d6a6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d694:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    d696:	4285      	cmp	r5, r0
    d698:	d105      	bne.n	d6a6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d69a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    d69c:	429d      	cmp	r5, r3
    d69e:	d102      	bne.n	d6a6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d6a0:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    d6a2:	42a3      	cmp	r3, r4
    d6a4:	d001      	beq.n	d6aa <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    d6a6:	2301      	movs	r3, #1
    d6a8:	e000      	b.n	d6ac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    d6aa:	2300      	movs	r3, #0
    d6ac:	7313      	strb	r3, [r2, #12]
    d6ae:	8548      	strh	r0, [r1, #42]	; 0x2a
    d6b0:	8950      	ldrh	r0, [r2, #10]
    d6b2:	85c8      	strh	r0, [r1, #46]	; 0x2e
    d6b4:	8890      	ldrh	r0, [r2, #4]
    d6b6:	8588      	strh	r0, [r1, #44]	; 0x2c
    d6b8:	88d0      	ldrh	r0, [r2, #6]
    d6ba:	8608      	strh	r0, [r1, #48]	; 0x30
    d6bc:	2001      	movs	r0, #1
    d6be:	7010      	strb	r0, [r2, #0]
    d6c0:	bd70      	pop	{r4, r5, r6, pc}

0000d6c2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    d6c2:	b510      	push	{r4, lr}
    d6c4:	888c      	ldrh	r4, [r1, #4]
    d6c6:	890a      	ldrh	r2, [r1, #8]
    d6c8:	884b      	ldrh	r3, [r1, #2]
    d6ca:	88c9      	ldrh	r1, [r1, #6]
    d6cc:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    d6d0:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    d6d4:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
    d6d8:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    d6dc:	bd10      	pop	{r4, pc}

0000d6de <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    d6de:	b570      	push	{r4, r5, r6, lr}
    d6e0:	4615      	mov	r5, r2
    d6e2:	460c      	mov	r4, r1
    d6e4:	f000 f8c3 	bl	d86e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    d6e8:	3096      	adds	r0, #150	; 0x96
    d6ea:	4428      	add	r0, r5
    d6ec:	42a0      	cmp	r0, r4
    d6ee:	d801      	bhi.n	d6f4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    d6f0:	1a20      	subs	r0, r4, r0
    d6f2:	bd70      	pop	{r4, r5, r6, pc}
    d6f4:	2000      	movs	r0, #0
    d6f6:	bd70      	pop	{r4, r5, r6, pc}

0000d6f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    d6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d6fc:	4604      	mov	r4, r0
    d6fe:	8e47      	ldrh	r7, [r0, #50]	; 0x32
    d700:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
    d702:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
    d706:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    d708:	4285      	cmp	r5, r0
    d70a:	d300      	bcc.n	d70e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    d70c:	4605      	mov	r5, r0
    d70e:	4620      	mov	r0, r4
    d710:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    d714:	f000 f89b 	bl	d84e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d718:	4601      	mov	r1, r0
    d71a:	8665      	strh	r5, [r4, #50]	; 0x32
    d71c:	86e1      	strh	r1, [r4, #54]	; 0x36
    d71e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    d720:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d724:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    d726:	4680      	mov	r8, r0
    d728:	42aa      	cmp	r2, r5
    d72a:	d200      	bcs.n	d72e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    d72c:	462a      	mov	r2, r5
    d72e:	428b      	cmp	r3, r1
    d730:	d200      	bcs.n	d734 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    d732:	460b      	mov	r3, r1
    d734:	8202      	strh	r2, [r0, #16]
    d736:	f8a8 3012 	strh.w	r3, [r8, #18]
    d73a:	42bd      	cmp	r5, r7
    d73c:	d101      	bne.n	d742 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    d73e:	42b1      	cmp	r1, r6
    d740:	d001      	beq.n	d746 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    d742:	2001      	movs	r0, #1
    d744:	e000      	b.n	d748 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    d746:	2000      	movs	r0, #0
    d748:	4681      	mov	r9, r0
    d74a:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
    d74e:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    d750:	8e27      	ldrh	r7, [r4, #48]	; 0x30
    d752:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    d754:	4285      	cmp	r5, r0
    d756:	d300      	bcc.n	d75a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    d758:	4605      	mov	r5, r0
    d75a:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    d75e:	4620      	mov	r0, r4
    d760:	f000 f87d 	bl	d85e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    d764:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    d768:	2902      	cmp	r1, #2
    d76a:	d108      	bne.n	d77e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    d76c:	42af      	cmp	r7, r5
    d76e:	d200      	bcs.n	d772 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    d770:	463d      	mov	r5, r7
    d772:	4286      	cmp	r6, r0
    d774:	d200      	bcs.n	d778 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    d776:	4630      	mov	r0, r6
    d778:	2100      	movs	r1, #0
    d77a:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    d77e:	f8a8 5008 	strh.w	r5, [r8, #8]
    d782:	f8a8 000c 	strh.w	r0, [r8, #12]
    d786:	42bd      	cmp	r5, r7
    d788:	d101      	bne.n	d78e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    d78a:	42b0      	cmp	r0, r6
    d78c:	d001      	beq.n	d792 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    d78e:	2001      	movs	r0, #1
    d790:	e000      	b.n	d794 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    d792:	2000      	movs	r0, #0
    d794:	ea40 0009 	orr.w	r0, r0, r9
    d798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d79c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    d79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7a0:	4616      	mov	r6, r2
    d7a2:	460f      	mov	r7, r1
    d7a4:	4604      	mov	r4, r0
    d7a6:	f000 f862 	bl	d86e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    d7aa:	4605      	mov	r5, r0
    d7ac:	463a      	mov	r2, r7
    d7ae:	6861      	ldr	r1, [r4, #4]
    d7b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    d7b2:	f000 f847 	bl	d844 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    d7b6:	19a9      	adds	r1, r5, r6
    d7b8:	4281      	cmp	r1, r0
    d7ba:	d300      	bcc.n	d7be <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    d7bc:	4608      	mov	r0, r1
    d7be:	62e0      	str	r0, [r4, #44]	; 0x2c
    d7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d7c4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    d7c4:	221b      	movs	r2, #27
    d7c6:	8402      	strh	r2, [r0, #32]
    d7c8:	8382      	strh	r2, [r0, #28]
    d7ca:	82c2      	strh	r2, [r0, #22]
    d7cc:	8282      	strh	r2, [r0, #20]
    d7ce:	8142      	strh	r2, [r0, #10]
    d7d0:	8202      	strh	r2, [r0, #16]
    d7d2:	8102      	strh	r2, [r0, #8]
    d7d4:	8542      	strh	r2, [r0, #42]	; 0x2a
    d7d6:	8582      	strh	r2, [r0, #44]	; 0x2c
    d7d8:	8482      	strh	r2, [r0, #36]	; 0x24
    d7da:	2900      	cmp	r1, #0
    d7dc:	d10a      	bne.n	d7f4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    d7de:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d7e2:	8441      	strh	r1, [r0, #34]	; 0x22
    d7e4:	83c1      	strh	r1, [r0, #30]
    d7e6:	8341      	strh	r1, [r0, #26]
    d7e8:	8301      	strh	r1, [r0, #24]
    d7ea:	81c1      	strh	r1, [r0, #14]
    d7ec:	8241      	strh	r1, [r0, #18]
    d7ee:	8181      	strh	r1, [r0, #12]
    d7f0:	85c1      	strh	r1, [r0, #46]	; 0x2e
    d7f2:	8601      	strh	r1, [r0, #48]	; 0x30
    d7f4:	4770      	bx	lr

0000d7f6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    d7f6:	6800      	ldr	r0, [r0, #0]
    d7f8:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    d7fc:	4290      	cmp	r0, r2
    d7fe:	d903      	bls.n	d808 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    d800:	1a40      	subs	r0, r0, r1
    d802:	389c      	subs	r0, #156	; 0x9c
    d804:	0840      	lsrs	r0, r0, #1
    d806:	4770      	bx	lr
    d808:	2000      	movs	r0, #0
    d80a:	4770      	bx	lr

0000d80c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    d80c:	b510      	push	{r4, lr}
    d80e:	9c02      	ldr	r4, [sp, #8]
    d810:	8281      	strh	r1, [r0, #20]
    d812:	82c2      	strh	r2, [r0, #22]
    d814:	8303      	strh	r3, [r0, #24]
    d816:	8344      	strh	r4, [r0, #26]
    d818:	bd10      	pop	{r4, pc}

0000d81a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    d81a:	8050      	strh	r0, [r2, #2]
    d81c:	8a88      	ldrh	r0, [r1, #20]
    d81e:	8090      	strh	r0, [r2, #4]
    d820:	8ac8      	ldrh	r0, [r1, #22]
    d822:	80d0      	strh	r0, [r2, #6]
    d824:	8b08      	ldrh	r0, [r1, #24]
    d826:	8110      	strh	r0, [r2, #8]
    d828:	8b48      	ldrh	r0, [r1, #26]
    d82a:	8150      	strh	r0, [r2, #10]
    d82c:	2001      	movs	r0, #1
    d82e:	7010      	strb	r0, [r2, #0]
    d830:	4770      	bx	lr
    d832:	2902      	cmp	r1, #2
    d834:	d003      	beq.n	d83e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    d836:	00c0      	lsls	r0, r0, #3
    d838:	3070      	adds	r0, #112	; 0x70
    d83a:	b280      	uxth	r0, r0
    d83c:	4770      	bx	lr
    d83e:	0080      	lsls	r0, r0, #2
    d840:	303c      	adds	r0, #60	; 0x3c
    d842:	e7fa      	b.n	d83a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    d844:	4288      	cmp	r0, r1
    d846:	d300      	bcc.n	d84a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    d848:	4608      	mov	r0, r1
    d84a:	1a80      	subs	r0, r0, r2
    d84c:	4770      	bx	lr
    d84e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    d852:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    d856:	4281      	cmp	r1, r0
    d858:	d200      	bcs.n	d85c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d85a:	4608      	mov	r0, r1
    d85c:	4770      	bx	lr
    d85e:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    d862:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
    d866:	4281      	cmp	r1, r0
    d868:	d200      	bcs.n	d86c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    d86a:	4608      	mov	r0, r1
    d86c:	4770      	bx	lr
    d86e:	2196      	movs	r1, #150	; 0x96
    d870:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    d874:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    d878:	f000 b800 	b.w	d87c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    d87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d880:	460d      	mov	r5, r1
    d882:	4606      	mov	r6, r0
    d884:	4698      	mov	r8, r3
    d886:	4617      	mov	r7, r2
    d888:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    d88a:	4611      	mov	r1, r2
    d88c:	f7ff ffd1 	bl	d832 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d890:	4604      	mov	r4, r0
    d892:	4639      	mov	r1, r7
    d894:	4630      	mov	r0, r6
    d896:	f7ff ffe2 	bl	d85e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    d89a:	42a0      	cmp	r0, r4
    d89c:	d200      	bcs.n	d8a0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    d89e:	4604      	mov	r4, r0
    d8a0:	8f30      	ldrh	r0, [r6, #56]	; 0x38
    d8a2:	4641      	mov	r1, r8
    d8a4:	f7ff ffc5 	bl	d832 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d8a8:	4607      	mov	r7, r0
    d8aa:	4641      	mov	r1, r8
    d8ac:	4630      	mov	r0, r6
    d8ae:	f7ff ffce 	bl	d84e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d8b2:	42b8      	cmp	r0, r7
    d8b4:	d300      	bcc.n	d8b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    d8b6:	4638      	mov	r0, r7
    d8b8:	4420      	add	r0, r4
    d8ba:	4428      	add	r0, r5
    d8bc:	1d80      	adds	r0, r0, #6
    d8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8c2:	2801      	cmp	r0, #1
    d8c4:	d102      	bne.n	d8cc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    d8c6:	7948      	ldrb	r0, [r1, #5]
    d8c8:	0980      	lsrs	r0, r0, #6
    d8ca:	d001      	beq.n	d8d0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    d8cc:	2000      	movs	r0, #0
    d8ce:	4770      	bx	lr
    d8d0:	2001      	movs	r0, #1
    d8d2:	4770      	bx	lr
    d8d4:	2801      	cmp	r0, #1
    d8d6:	d106      	bne.n	d8e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    d8d8:	7948      	ldrb	r0, [r1, #5]
    d8da:	2101      	movs	r1, #1
    d8dc:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    d8e0:	d101      	bne.n	d8e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    d8e2:	2001      	movs	r0, #1
    d8e4:	4770      	bx	lr
    d8e6:	2000      	movs	r0, #0
    d8e8:	4770      	bx	lr
    d8ea:	2802      	cmp	r0, #2
    d8ec:	d003      	beq.n	d8f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    d8ee:	2803      	cmp	r0, #3
    d8f0:	d001      	beq.n	d8f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    d8f2:	2000      	movs	r0, #0
    d8f4:	4770      	bx	lr
    d8f6:	2001      	movs	r0, #1
    d8f8:	4770      	bx	lr

0000d8fa <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    d8fa:	b510      	push	{r4, lr}
    d8fc:	4604      	mov	r4, r0
    d8fe:	7c00      	ldrb	r0, [r0, #16]
    d900:	f7ff fff3 	bl	d8ea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    d904:	b148      	cbz	r0, d91a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d906:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    d90a:	f104 0148 	add.w	r1, r4, #72	; 0x48
    d90e:	f7ff fa3d 	bl	cd8c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    d912:	2808      	cmp	r0, #8
    d914:	d001      	beq.n	d91a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d916:	2001      	movs	r0, #1
    d918:	bd10      	pop	{r4, pc}
    d91a:	7c20      	ldrb	r0, [r4, #16]
    d91c:	b118      	cbz	r0, d926 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d91e:	2802      	cmp	r0, #2
    d920:	d001      	beq.n	d926 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d922:	7de0      	ldrb	r0, [r4, #23]
    d924:	bd10      	pop	{r4, pc}
    d926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d92a:	2000      	movs	r0, #0
    d92c:	f7f6 bfea 	b.w	4904 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000d930 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>:
    d930:	4770      	bx	lr

0000d932 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    d932:	b508      	push	{r3, lr}
    d934:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    d938:	f88d 1000 	strb.w	r1, [sp]
    d93c:	9900      	ldr	r1, [sp, #0]
    d93e:	9100      	str	r1, [sp, #0]
    d940:	f89d 1000 	ldrb.w	r1, [sp]
    d944:	b109      	cbz	r1, d94a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    d946:	2001      	movs	r0, #1
    d948:	bd08      	pop	{r3, pc}
    d94a:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    d94e:	f88d 0000 	strb.w	r0, [sp]
    d952:	9800      	ldr	r0, [sp, #0]
    d954:	9000      	str	r0, [sp, #0]
    d956:	f89d 0000 	ldrb.w	r0, [sp]
    d95a:	2000      	movs	r0, #0
    d95c:	bd08      	pop	{r3, pc}

0000d95e <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    d95e:	20ff      	movs	r0, #255	; 0xff
    d960:	7008      	strb	r0, [r1, #0]
    d962:	4770      	bx	lr

0000d964 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    d964:	b510      	push	{r4, lr}
    d966:	4604      	mov	r4, r0
    d968:	22dc      	movs	r2, #220	; 0xdc
    d96a:	2100      	movs	r1, #0
    d96c:	f7fe f981 	bl	bc72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d970:	20ff      	movs	r0, #255	; 0xff
    d972:	7020      	strb	r0, [r4, #0]
    d974:	207f      	movs	r0, #127	; 0x7f
    d976:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d97a:	2013      	movs	r0, #19
    d97c:	8060      	strh	r0, [r4, #2]
    d97e:	2001      	movs	r0, #1
    d980:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    d984:	2000      	movs	r0, #0
    d986:	73a0      	strb	r0, [r4, #14]
    d988:	f104 0020 	add.w	r0, r4, #32
    d98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d990:	f000 b967 	b.w	dc62 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000d994 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    d994:	7880      	ldrb	r0, [r0, #2]
    d996:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d99a:	b108      	cbz	r0, d9a0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    d99c:	2000      	movs	r0, #0
    d99e:	4770      	bx	lr
    d9a0:	201f      	movs	r0, #31
    d9a2:	4770      	bx	lr

0000d9a4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    d9a4:	f7f9 b83c 	b.w	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>

0000d9a8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    d9a8:	6880      	ldr	r0, [r0, #8]
    d9aa:	4770      	bx	lr

0000d9ac <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    d9ac:	2001      	movs	r0, #1
    d9ae:	4770      	bx	lr

0000d9b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    d9b0:	b510      	push	{r4, lr}
    d9b2:	4604      	mov	r4, r0
    d9b4:	3020      	adds	r0, #32
    d9b6:	f000 f914 	bl	dbe2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    d9ba:	8861      	ldrh	r1, [r4, #2]
    d9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9c0:	2228      	movs	r2, #40	; 0x28
    d9c2:	f7f9 b9e9 	b.w	6d98 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000d9c6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    d9c6:	2200      	movs	r2, #0
    d9c8:	6282      	str	r2, [r0, #40]	; 0x28
    d9ca:	8843      	ldrh	r3, [r0, #2]
    d9cc:	2b1d      	cmp	r3, #29
    d9ce:	d001      	beq.n	d9d4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    d9d0:	7341      	strb	r1, [r0, #13]
    d9d2:	4770      	bx	lr
    d9d4:	7342      	strb	r2, [r0, #13]
    d9d6:	4770      	bx	lr

0000d9d8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    d9d8:	2001      	movs	r0, #1
    d9da:	4770      	bx	lr

0000d9dc <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    d9dc:	2000      	movs	r0, #0
    d9de:	4770      	bx	lr

0000d9e0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    d9e0:	7880      	ldrb	r0, [r0, #2]
    d9e2:	f000 0001 	and.w	r0, r0, #1
    d9e6:	4770      	bx	lr

0000d9e8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    d9e8:	7880      	ldrb	r0, [r0, #2]
    d9ea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d9ee:	4770      	bx	lr

0000d9f0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    d9f0:	2001      	movs	r0, #1
    d9f2:	4770      	bx	lr

0000d9f4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    d9f4:	7880      	ldrb	r0, [r0, #2]
    d9f6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    d9fa:	4770      	bx	lr

0000d9fc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    d9fc:	f990 000e 	ldrsb.w	r0, [r0, #14]
    da00:	4770      	bx	lr

0000da02 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    da02:	7800      	ldrb	r0, [r0, #0]
    da04:	28ff      	cmp	r0, #255	; 0xff
    da06:	d001      	beq.n	da0c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    da08:	2001      	movs	r0, #1
    da0a:	4770      	bx	lr
    da0c:	2000      	movs	r0, #0
    da0e:	4770      	bx	lr

0000da10 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    da10:	680a      	ldr	r2, [r1, #0]
    da12:	f840 2f11 	str.w	r2, [r0, #17]!
    da16:	8889      	ldrh	r1, [r1, #4]
    da18:	8081      	strh	r1, [r0, #4]
    da1a:	2101      	movs	r1, #1
    da1c:	7181      	strb	r1, [r0, #6]
    da1e:	4770      	bx	lr

0000da20 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    da20:	7b00      	ldrb	r0, [r0, #12]
    da22:	4770      	bx	lr

0000da24 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    da24:	2001      	movs	r0, #1
    da26:	4770      	bx	lr

0000da28 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    da28:	61c1      	str	r1, [r0, #28]
    da2a:	4770      	bx	lr

0000da2c <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    da2c:	2300      	movs	r3, #0
    da2e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    da32:	f8a0 1066 	strh.w	r1, [r0, #102]	; 0x66
    da36:	f840 2f5c 	str.w	r2, [r0, #92]!
    da3a:	2101      	movs	r1, #1
    da3c:	7201      	strb	r1, [r0, #8]
    da3e:	4770      	bx	lr

0000da40 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    da40:	2300      	movs	r3, #0
    da42:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    da46:	f840 2f60 	str.w	r2, [r0, #96]!
    da4a:	8101      	strh	r1, [r0, #8]
    da4c:	2101      	movs	r1, #1
    da4e:	7141      	strb	r1, [r0, #5]
    da50:	4770      	bx	lr

0000da52 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    da52:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
    da56:	4770      	bx	lr

0000da58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    da58:	b570      	push	{r4, r5, r6, lr}
    da5a:	4604      	mov	r4, r0
    da5c:	7880      	ldrb	r0, [r0, #2]
    da5e:	2501      	movs	r5, #1
    da60:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    da64:	b138      	cbz	r0, da76 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    da66:	233c      	movs	r3, #60	; 0x3c
    da68:	22ff      	movs	r2, #255	; 0xff
    da6a:	4620      	mov	r0, r4
    da6c:	69e1      	ldr	r1, [r4, #28]
    da6e:	f7f8 fffd 	bl	6a6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    da72:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
    da76:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
    da7a:	bd70      	pop	{r4, r5, r6, pc}

0000da7c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    da7c:	7bc0      	ldrb	r0, [r0, #15]
    da7e:	2800      	cmp	r0, #0
    da80:	d000      	beq.n	da84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    da82:	2001      	movs	r0, #1
    da84:	4770      	bx	lr
    da86:	b510      	push	{r4, lr}
    da88:	f7ff f980 	bl	cd8c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    da8c:	4604      	mov	r4, r0
    da8e:	f7f7 fdb5 	bl	55fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    da92:	b138      	cbz	r0, daa4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    da94:	4620      	mov	r0, r4
    da96:	f7f7 fce9 	bl	546c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    da9a:	b118      	cbz	r0, daa4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    da9c:	2110      	movs	r1, #16
    da9e:	f7ff fb67 	bl	d170 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    daa2:	b108      	cbz	r0, daa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    daa4:	2000      	movs	r0, #0
    daa6:	bd10      	pop	{r4, pc}
    daa8:	2001      	movs	r0, #1
    daaa:	bd10      	pop	{r4, pc}
    daac:	2101      	movs	r1, #1
    daae:	f7f8 bc5f 	b.w	6370 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dab2:	2101      	movs	r1, #1
    dab4:	f7f8 bc5c 	b.w	6370 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dabc:	4604      	mov	r4, r0
    dabe:	2700      	movs	r7, #0
    dac0:	704f      	strb	r7, [r1, #1]
    dac2:	2011      	movs	r0, #17
    dac4:	460d      	mov	r5, r1
    dac6:	7008      	strb	r0, [r1, #0]
    dac8:	2220      	movs	r2, #32
    daca:	f104 016e 	add.w	r1, r4, #110	; 0x6e
    dace:	1d28      	adds	r0, r5, #4
    dad0:	f7fe f855 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dad4:	2601      	movs	r6, #1
    dad6:	722e      	strb	r6, [r5, #8]
    dad8:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    dadc:	7928      	ldrb	r0, [r5, #4]
    dade:	2800      	cmp	r0, #0
    dae0:	d110      	bne.n	db04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    dae2:	88e8      	ldrh	r0, [r5, #6]
    dae4:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    dae8:	69e0      	ldr	r0, [r4, #28]
    daea:	7c41      	ldrb	r1, [r0, #17]
    daec:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    daf0:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
    daf4:	8800      	ldrh	r0, [r0, #0]
    daf6:	f7f6 fc7b 	bl	43f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    dafa:	f7fe ff22 	bl	c942 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    dafe:	69e0      	ldr	r0, [r4, #28]
    db00:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db0c:	4604      	mov	r4, r0
    db0e:	460f      	mov	r7, r1
    db10:	7e40      	ldrb	r0, [r0, #25]
    db12:	f7f7 fc6b 	bl	53ec <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    db16:	4606      	mov	r6, r0
    db18:	7e20      	ldrb	r0, [r4, #24]
    db1a:	f104 0541 	add.w	r5, r4, #65	; 0x41
    db1e:	b120      	cbz	r0, db2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    db20:	b11e      	cbz	r6, db2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    db22:	7e60      	ldrb	r0, [r4, #25]
    db24:	f7f7 fc56 	bl	53d4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    db28:	b1a0      	cbz	r0, db54 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xd8>
    db2a:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    db2e:	2800      	cmp	r0, #0
    db30:	d024      	beq.n	db7c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x100>
    db32:	7ea0      	ldrb	r0, [r4, #26]
    db34:	2800      	cmp	r0, #0
    db36:	d021      	beq.n	db7c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x100>
    db38:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    db3c:	4629      	mov	r1, r5
    db3e:	f7ff fec9 	bl	d8d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    db42:	b1a8      	cbz	r0, db70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf4>
    db44:	f7f7 fc42 	bl	53cc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    db48:	463a      	mov	r2, r7
    db4a:	4629      	mov	r1, r5
    db4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db50:	f7ff b8a1 	b.w	cc96 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    db54:	2001      	movs	r0, #1
    db56:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    db5a:	463a      	mov	r2, r7
    db5c:	4629      	mov	r1, r5
    db5e:	4630      	mov	r0, r6
    db60:	f7ff f899 	bl	cc96 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    db64:	7e61      	ldrb	r1, [r4, #25]
    db66:	4628      	mov	r0, r5
    db68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db6c:	f7f7 bc4a 	b.w	5404 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    db70:	4639      	mov	r1, r7
    db72:	4628      	mov	r0, r5
    db74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db78:	f7ff b87c 	b.w	cc74 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db80:	b510      	push	{r4, lr}
    db82:	4604      	mov	r4, r0
    db84:	4608      	mov	r0, r1
    db86:	f7fd faf3 	bl	b170 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    db8a:	7921      	ldrb	r1, [r4, #4]
    db8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db90:	2025      	movs	r0, #37	; 0x25
    db92:	f001 bace 	b.w	f132 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    db96:	b510      	push	{r4, lr}
    db98:	4604      	mov	r4, r0
    db9a:	3026      	adds	r0, #38	; 0x26
    db9c:	f7fd fa9a 	bl	b0d4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dba0:	2800      	cmp	r0, #0
    dba2:	d102      	bne.n	dbaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    dba4:	207f      	movs	r0, #127	; 0x7f
    dba6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    dbaa:	bd10      	pop	{r4, pc}
    dbac:	7802      	ldrb	r2, [r0, #0]
    dbae:	2320      	movs	r3, #32
    dbb0:	f022 0220 	bic.w	r2, r2, #32
    dbb4:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    dbb8:	430a      	orrs	r2, r1
    dbba:	7002      	strb	r2, [r0, #0]
    dbbc:	4770      	bx	lr

0000dbbe <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    dbbe:	b570      	push	{r4, r5, r6, lr}
    dbc0:	7001      	strb	r1, [r0, #0]
    dbc2:	7042      	strb	r2, [r0, #1]
    dbc4:	4614      	mov	r4, r2
    dbc6:	460d      	mov	r5, r1
    dbc8:	7880      	ldrb	r0, [r0, #2]
    dbca:	f000 f87f 	bl	dccc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dbce:	fb10 f005 	smulbb	r0, r0, r5
    dbd2:	4360      	muls	r0, r4
    dbd4:	28ff      	cmp	r0, #255	; 0xff
    dbd6:	d303      	bcc.n	dbe0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    dbd8:	215c      	movs	r1, #92	; 0x5c
    dbda:	202e      	movs	r0, #46	; 0x2e
    dbdc:	f7f5 fff8 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbe0:	bd70      	pop	{r4, r5, r6, pc}

0000dbe2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    dbe2:	b510      	push	{r4, lr}
    dbe4:	4604      	mov	r4, r0
    dbe6:	7880      	ldrb	r0, [r0, #2]
    dbe8:	f000 f870 	bl	dccc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dbec:	7861      	ldrb	r1, [r4, #1]
    dbee:	7822      	ldrb	r2, [r4, #0]
    dbf0:	fb11 f102 	smulbb	r1, r1, r2
    dbf4:	4348      	muls	r0, r1
    dbf6:	b2c0      	uxtb	r0, r0
    dbf8:	bd10      	pop	{r4, pc}

0000dbfa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    dbfa:	b510      	push	{r4, lr}
    dbfc:	4604      	mov	r4, r0
    dbfe:	f000 f84d 	bl	dc9c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    dc02:	7961      	ldrb	r1, [r4, #5]
    dc04:	1c49      	adds	r1, r1, #1
    dc06:	b2c9      	uxtb	r1, r1
    dc08:	7161      	strb	r1, [r4, #5]
    dc0a:	7862      	ldrb	r2, [r4, #1]
    dc0c:	4291      	cmp	r1, r2
    dc0e:	d10b      	bne.n	dc28 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    dc10:	2200      	movs	r2, #0
    dc12:	7162      	strb	r2, [r4, #5]
    dc14:	78e1      	ldrb	r1, [r4, #3]
    dc16:	4301      	orrs	r1, r0
    dc18:	70e1      	strb	r1, [r4, #3]
    dc1a:	78a3      	ldrb	r3, [r4, #2]
    dc1c:	4299      	cmp	r1, r3
    dc1e:	d103      	bne.n	dc28 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    dc20:	70e2      	strb	r2, [r4, #3]
    dc22:	7921      	ldrb	r1, [r4, #4]
    dc24:	1c49      	adds	r1, r1, #1
    dc26:	7121      	strb	r1, [r4, #4]
    dc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc2c:	f000 b825 	b.w	dc7a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000dc30 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    dc30:	7081      	strb	r1, [r0, #2]
    dc32:	4770      	bx	lr

0000dc34 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    dc34:	b570      	push	{r4, r5, r6, lr}
    dc36:	4604      	mov	r4, r0
    dc38:	7880      	ldrb	r0, [r0, #2]
    dc3a:	f000 f847 	bl	dccc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dc3e:	7861      	ldrb	r1, [r4, #1]
    dc40:	fb11 f500 	smulbb	r5, r1, r0
    dc44:	78e0      	ldrb	r0, [r4, #3]
    dc46:	f000 f841 	bl	dccc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dc4a:	7861      	ldrb	r1, [r4, #1]
    dc4c:	7962      	ldrb	r2, [r4, #5]
    dc4e:	fb10 2001 	smlabb	r0, r0, r1, r2
    dc52:	7821      	ldrb	r1, [r4, #0]
    dc54:	7922      	ldrb	r2, [r4, #4]
    dc56:	1a89      	subs	r1, r1, r2
    dc58:	fb11 f105 	smulbb	r1, r1, r5
    dc5c:	1a08      	subs	r0, r1, r0
    dc5e:	b2c0      	uxtb	r0, r0
    dc60:	bd70      	pop	{r4, r5, r6, pc}

0000dc62 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    dc62:	2100      	movs	r1, #0
    dc64:	6001      	str	r1, [r0, #0]
    dc66:	8081      	strh	r1, [r0, #4]
    dc68:	2101      	movs	r1, #1
    dc6a:	7041      	strb	r1, [r0, #1]
    dc6c:	7001      	strb	r1, [r0, #0]
    dc6e:	4770      	bx	lr

0000dc70 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    dc70:	2100      	movs	r1, #0
    dc72:	70c1      	strb	r1, [r0, #3]
    dc74:	7141      	strb	r1, [r0, #5]
    dc76:	7101      	strb	r1, [r0, #4]
    dc78:	4770      	bx	lr
    dc7a:	b510      	push	{r4, lr}
    dc7c:	2801      	cmp	r0, #1
    dc7e:	d007      	beq.n	dc90 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    dc80:	2802      	cmp	r0, #2
    dc82:	d007      	beq.n	dc94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    dc84:	2804      	cmp	r0, #4
    dc86:	d007      	beq.n	dc98 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    dc88:	2139      	movs	r1, #57	; 0x39
    dc8a:	202e      	movs	r0, #46	; 0x2e
    dc8c:	f7f5 ffa0 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc90:	2025      	movs	r0, #37	; 0x25
    dc92:	bd10      	pop	{r4, pc}
    dc94:	2026      	movs	r0, #38	; 0x26
    dc96:	bd10      	pop	{r4, pc}
    dc98:	2027      	movs	r0, #39	; 0x27
    dc9a:	bd10      	pop	{r4, pc}
    dc9c:	4601      	mov	r1, r0
    dc9e:	2000      	movs	r0, #0
    dca0:	788a      	ldrb	r2, [r1, #2]
    dca2:	07d3      	lsls	r3, r2, #31
    dca4:	d002      	beq.n	dcac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    dca6:	78cb      	ldrb	r3, [r1, #3]
    dca8:	07db      	lsls	r3, r3, #31
    dcaa:	d006      	beq.n	dcba <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    dcac:	0793      	lsls	r3, r2, #30
    dcae:	d506      	bpl.n	dcbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    dcb0:	78cb      	ldrb	r3, [r1, #3]
    dcb2:	079b      	lsls	r3, r3, #30
    dcb4:	d403      	bmi.n	dcbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    dcb6:	2002      	movs	r0, #2
    dcb8:	4770      	bx	lr
    dcba:	2001      	movs	r0, #1
    dcbc:	4770      	bx	lr
    dcbe:	0752      	lsls	r2, r2, #29
    dcc0:	d5fc      	bpl.n	dcbc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    dcc2:	78c9      	ldrb	r1, [r1, #3]
    dcc4:	0749      	lsls	r1, r1, #29
    dcc6:	d4f9      	bmi.n	dcbc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    dcc8:	2004      	movs	r0, #4
    dcca:	4770      	bx	lr
    dccc:	f3c0 0180 	ubfx	r1, r0, #2, #1
    dcd0:	f3c0 0240 	ubfx	r2, r0, #1, #1
    dcd4:	4411      	add	r1, r2
    dcd6:	f000 0001 	and.w	r0, r0, #1
    dcda:	4408      	add	r0, r1
    dcdc:	4770      	bx	lr

0000dcde <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    dcde:	f240 315a 	movw	r1, #858	; 0x35a
    dce2:	4348      	muls	r0, r1
    dce4:	4770      	bx	lr
    dce6:	020e      	.short	0x020e
    dce8:	0630041c 	.word	0x0630041c
    dcec:	035a0c60 	.word	0x035a0c60
    dcf0:	05c506b4 	.word	0x05c506b4
    dcf4:	12250bf5 	.word	0x12250bf5
    dcf8:	03b101a3 	.word	0x03b101a3
    dcfc:	02ef05bf 	.word	0x02ef05bf
    dd00:	09a30649 	.word	0x09a30649

0000dd04 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    dd04:	b510      	push	{r4, lr}
    dd06:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
    dd0a:	b109      	cbz	r1, dd10 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    dd0c:	2000      	movs	r0, #0
    dd0e:	bd10      	pop	{r4, pc}
    dd10:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    dd14:	b959      	cbnz	r1, dd2e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    dd16:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
    dd1a:	b141      	cbz	r1, dd2e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    dd1c:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
    dd20:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    dd24:	4291      	cmp	r1, r2
    dd26:	d902      	bls.n	dd2e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    dd28:	f7ff fe96 	bl	da58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    dd2c:	e7ee      	b.n	dd0c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    dd2e:	2001      	movs	r0, #1
    dd30:	bd10      	pop	{r4, pc}

0000dd32 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    dd32:	b510      	push	{r4, lr}
    dd34:	4604      	mov	r4, r0
    dd36:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    dd3a:	b170      	cbz	r0, dd5a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x28>
    dd3c:	2001      	movs	r0, #1
    dd3e:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    dd42:	4601      	mov	r1, r0
    dd44:	4620      	mov	r0, r4
    dd46:	f7ff fe84 	bl	da52 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    dd4a:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    dd4e:	2803      	cmp	r0, #3
    dd50:	d005      	beq.n	dd5e <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x2c>
    dd52:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
    dd56:	2800      	cmp	r0, #0
    dd58:	d000      	beq.n	dd5c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x2a>
    dd5a:	200c      	movs	r0, #12
    dd5c:	bd10      	pop	{r4, pc}
    dd5e:	f814 0fa8 	ldrb.w	r0, [r4, #168]!
    dd62:	f7f4 f881 	bl	1e68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    dd66:	7820      	ldrb	r0, [r4, #0]
    dd68:	f7f4 f9ac 	bl	20c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    dd6c:	f814 09a8 	ldrb.w	r0, [r4], #-168
    dd70:	f7f4 f986 	bl	2080 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    dd74:	b118      	cbz	r0, dd7e <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x4c>
    dd76:	2000      	movs	r0, #0
    dd78:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    dd7c:	bd10      	pop	{r4, pc}
    dd7e:	f240 2141 	movw	r1, #577	; 0x241
    dd82:	2030      	movs	r0, #48	; 0x30
    dd84:	f7f5 ff24 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dd88 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    dd88:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
    dd8c:	4770      	bx	lr

0000dd8e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    dd8e:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    dd92:	2800      	cmp	r0, #0
    dd94:	d000      	beq.n	dd98 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xa>
    dd96:	2001      	movs	r0, #1
    dd98:	4770      	bx	lr

0000dd9a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    dd9a:	b50e      	push	{r1, r2, r3, lr}
    dd9c:	4669      	mov	r1, sp
    dd9e:	2001      	movs	r0, #1
    dda0:	f7fe ff09 	bl	cbb6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    dda4:	b138      	cbz	r0, ddb6 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    dda6:	f240 116b 	movw	r1, #363	; 0x16b
    ddaa:	2030      	movs	r0, #48	; 0x30
    ddac:	f7f5 ff10 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddb0:	9802      	ldr	r0, [sp, #8]
    ddb2:	f7ff ffbe 	bl	dd32 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    ddb6:	4668      	mov	r0, sp
    ddb8:	f7f6 f938 	bl	402c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ddbc:	2800      	cmp	r0, #0
    ddbe:	d0f7      	beq.n	ddb0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    ddc0:	f7f9 f9ee 	bl	71a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x158>
    ddc4:	2000      	movs	r0, #0
    ddc6:	bd0e      	pop	{r1, r2, r3, pc}

0000ddc8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    ddc8:	b50e      	push	{r1, r2, r3, lr}
    ddca:	4669      	mov	r1, sp
    ddcc:	2001      	movs	r0, #1
    ddce:	f7fe fef2 	bl	cbb6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ddd2:	b150      	cbz	r0, ddea <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    ddd4:	f44f 61fb 	mov.w	r1, #2008	; 0x7d8
    ddd8:	2030      	movs	r0, #48	; 0x30
    ddda:	f7f5 fef9 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddde:	9802      	ldr	r0, [sp, #8]
    dde0:	f7ff ffd5 	bl	dd8e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    dde4:	b108      	cbz	r0, ddea <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    dde6:	2000      	movs	r0, #0
    dde8:	bd0e      	pop	{r1, r2, r3, pc}
    ddea:	4668      	mov	r0, sp
    ddec:	f7f6 f91e 	bl	402c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ddf0:	2800      	cmp	r0, #0
    ddf2:	d0f4      	beq.n	ddde <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    ddf4:	2000      	movs	r0, #0
    ddf6:	f7fe fec2 	bl	cb7e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    ddfa:	f080 0001 	eor.w	r0, r0, #1
    ddfe:	bd0e      	pop	{r1, r2, r3, pc}

0000de00 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>:
    de00:	b538      	push	{r3, r4, r5, lr}
    de02:	2500      	movs	r5, #0
    de04:	4604      	mov	r4, r0
    de06:	f880 512c 	strb.w	r5, [r0, #300]	; 0x12c
    de0a:	f8a0 515c 	strh.w	r5, [r0, #348]	; 0x15c
    de0e:	462b      	mov	r3, r5
    de10:	462a      	mov	r2, r5
    de12:	4629      	mov	r1, r5
    de14:	9500      	str	r5, [sp, #0]
    de16:	f7f9 fb6b 	bl	74f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    de1a:	b120      	cbz	r0, de26 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA+0x26>
    de1c:	f44f 7118 	mov.w	r1, #608	; 0x260
    de20:	2030      	movs	r0, #48	; 0x30
    de22:	f7f5 fed5 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de26:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    de2a:	2001      	movs	r0, #1
    de2c:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    de30:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    de34:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    de38:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    de3c:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    de40:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    de44:	1e40      	subs	r0, r0, #1
    de46:	f824 0bb4 	strh.w	r0, [r4], #180
    de4a:	2000      	movs	r0, #0
    de4c:	86e5      	strh	r5, [r4, #54]	; 0x36
    de4e:	bd38      	pop	{r3, r4, r5, pc}

0000de50 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    de50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    de52:	4604      	mov	r4, r0
    de54:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    de58:	2800      	cmp	r0, #0
    de5a:	d153      	bne.n	df04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    de5c:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    de60:	2803      	cmp	r0, #3
    de62:	d14f      	bne.n	df04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    de64:	f7fd fd16 	bl	b894 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    de68:	4601      	mov	r1, r0
    de6a:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    de6e:	f7f3 fac9 	bl	1404 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    de72:	2800      	cmp	r0, #0
    de74:	dd46      	ble.n	df04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    de76:	6861      	ldr	r1, [r4, #4]
    de78:	b111      	cbz	r1, de80 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    de7a:	fbb0 f0f1 	udiv	r0, r0, r1
    de7e:	e000      	b.n	de82 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    de80:	2000      	movs	r0, #0
    de82:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    de86:	1c40      	adds	r0, r0, #1
    de88:	4408      	add	r0, r1
    de8a:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    de8e:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    de92:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    de96:	1a08      	subs	r0, r1, r0
    de98:	b200      	sxth	r0, r0
    de9a:	2800      	cmp	r0, #0
    de9c:	dd32      	ble.n	df04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    de9e:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    dea2:	f7f3 ffe1 	bl	1e68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    dea6:	2800      	cmp	r0, #0
    dea8:	d02c      	beq.n	df04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    deaa:	2001      	movs	r0, #1
    deac:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    deb0:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    deb4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    deb8:	ae01      	add	r6, sp, #4
    deba:	1a40      	subs	r0, r0, r1
    debc:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    dec0:	1e40      	subs	r0, r0, #1
    dec2:	4408      	add	r0, r1
    dec4:	b285      	uxth	r5, r0
    dec6:	e017      	b.n	def8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    dec8:	9600      	str	r6, [sp, #0]
    deca:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    dece:	2300      	movs	r3, #0
    ded0:	2201      	movs	r2, #1
    ded2:	4620      	mov	r0, r4
    ded4:	f7f9 fb0c 	bl	74f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    ded8:	2800      	cmp	r0, #0
    deda:	d013      	beq.n	df04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dedc:	2801      	cmp	r0, #1
    dede:	d004      	beq.n	deea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    dee0:	f240 6143 	movw	r1, #1603	; 0x643
    dee4:	2030      	movs	r0, #48	; 0x30
    dee6:	f7f5 fe73 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    deea:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    deee:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    def2:	4408      	add	r0, r1
    def4:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    def8:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    defc:	1a28      	subs	r0, r5, r0
    defe:	b200      	sxth	r0, r0
    df00:	2800      	cmp	r0, #0
    df02:	dae1      	bge.n	dec8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    df04:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    df06:	2000      	movs	r0, #0
    df08:	4770      	bx	lr
    df0a:	b510      	push	{r4, lr}
    df0c:	4604      	mov	r4, r0
    df0e:	f814 0fa8 	ldrb.w	r0, [r4, #168]!
    df12:	f7f4 f8b5 	bl	2080 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    df16:	2000      	movs	r0, #0
    df18:	7420      	strb	r0, [r4, #16]
    df1a:	bd10      	pop	{r4, pc}
    df1c:	b510      	push	{r4, lr}
    df1e:	f7ff fd47 	bl	d9b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    df22:	f200 100d 	addw	r0, r0, #269	; 0x10d
    df26:	bd10      	pop	{r4, pc}
    df28:	b570      	push	{r4, r5, r6, lr}
    df2a:	4604      	mov	r4, r0
    df2c:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    df30:	460d      	mov	r5, r1
    df32:	b108      	cbz	r0, df38 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xe8>
    df34:	2001      	movs	r0, #1
    df36:	bd70      	pop	{r4, r5, r6, pc}
    df38:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    df3c:	b1a8      	cbz	r0, df6a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11a>
    df3e:	4620      	mov	r0, r4
    df40:	f7ff fd32 	bl	d9a8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    df44:	4405      	add	r5, r0
    df46:	4620      	mov	r0, r4
    df48:	f7ff ffe8 	bl	df1c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    df4c:	1941      	adds	r1, r0, r5
    df4e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    df52:	4288      	cmp	r0, r1
    df54:	d206      	bcs.n	df64 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x114>
    df56:	2001      	movs	r0, #1
    df58:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    df5c:	4620      	mov	r0, r4
    df5e:	f7ff fd7b 	bl	da58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    df62:	e7e7      	b.n	df34 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xe4>
    df64:	1b40      	subs	r0, r0, r5
    df66:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    df6a:	2000      	movs	r0, #0
    df6c:	bd70      	pop	{r4, r5, r6, pc}
    df6e:	b510      	push	{r4, lr}
    df70:	4604      	mov	r4, r0
    df72:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    df76:	f000 f883 	bl	e080 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x230>
    df7a:	4602      	mov	r2, r0
    df7c:	4620      	mov	r0, r4
    df7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df82:	f240 111b 	movw	r1, #283	; 0x11b
    df86:	f7ff bc09 	b.w	d79c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    df8a:	b510      	push	{r4, lr}
    df8c:	f7fc ff30 	bl	adf0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    df90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df94:	f7f4 b9c2 	b.w	231c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    df98:	b570      	push	{r4, r5, r6, lr}
    df9a:	460c      	mov	r4, r1
    df9c:	4605      	mov	r5, r0
    df9e:	f001 f8b8 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dfa2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    dfa6:	4408      	add	r0, r1
    dfa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dfac:	fbb0 f6f1 	udiv	r6, r0, r1
    dfb0:	4628      	mov	r0, r5
    dfb2:	f001 f8a0 	bl	f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    dfb6:	4430      	add	r0, r6
    dfb8:	4420      	add	r0, r4
    dfba:	bd70      	pop	{r4, r5, r6, pc}
    dfbc:	f7f3 bb38 	b.w	1630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    dfc0:	b510      	push	{r4, lr}
    dfc2:	4604      	mov	r4, r0
    dfc4:	f7ff fd14 	bl	d9f0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    dfc8:	b1a0      	cbz	r0, dff4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a4>
    dfca:	4620      	mov	r0, r4
    dfcc:	f7ff fd08 	bl	d9e0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    dfd0:	b918      	cbnz	r0, dfda <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18a>
    dfd2:	4620      	mov	r0, r4
    dfd4:	f7ff fd0e 	bl	d9f4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    dfd8:	b120      	cbz	r0, dfe4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x194>
    dfda:	2445      	movs	r4, #69	; 0x45
    dfdc:	f001 f857 	bl	f08e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    dfe0:	b928      	cbnz	r0, dfee <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    dfe2:	e001      	b.n	dfe8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x198>
    dfe4:	243e      	movs	r4, #62	; 0x3e
    dfe6:	e7f9      	b.n	dfdc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18c>
    dfe8:	f001 f847 	bl	f07a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    dfec:	b100      	cbz	r0, dff0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a0>
    dfee:	1de4      	adds	r4, r4, #7
    dff0:	4620      	mov	r0, r4
    dff2:	bd10      	pop	{r4, pc}
    dff4:	2067      	movs	r0, #103	; 0x67
    dff6:	bd10      	pop	{r4, pc}
    dff8:	b510      	push	{r4, lr}
    dffa:	4604      	mov	r4, r0
    dffc:	2000      	movs	r0, #0
    dffe:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e002:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e006:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e00a:	f204 1441 	addw	r4, r4, #321	; 0x141
    e00e:	f7f7 fd27 	bl	5a60 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    e012:	7fe0      	ldrb	r0, [r4, #31]
    e014:	f7f4 f834 	bl	2080 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e018:	2020      	movs	r0, #32
    e01a:	77e0      	strb	r0, [r4, #31]
    e01c:	bd10      	pop	{r4, pc}
    e01e:	b508      	push	{r3, lr}
    e020:	2800      	cmp	r0, #0
    e022:	f04f 0101 	mov.w	r1, #1
    e026:	4668      	mov	r0, sp
    e028:	d002      	beq.n	e030 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1e0>
    e02a:	f7f5 fe61 	bl	3cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e02e:	e001      	b.n	e034 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1e4>
    e030:	f7f5 fe6c 	bl	3d0c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    e034:	f89d 0000 	ldrb.w	r0, [sp]
    e038:	f242 7110 	movw	r1, #10000	; 0x2710
    e03c:	0200      	lsls	r0, r0, #8
    e03e:	fbb0 f2f1 	udiv	r2, r0, r1
    e042:	fb01 0012 	mls	r0, r1, r2, r0
    e046:	bd08      	pop	{r3, pc}
    e048:	b570      	push	{r4, r5, r6, lr}
    e04a:	460d      	mov	r5, r1
    e04c:	4604      	mov	r4, r0
    e04e:	f7f7 fcdd 	bl	5a0c <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA>
    e052:	2101      	movs	r1, #1
    e054:	f7fe fda5 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e058:	b160      	cbz	r0, e074 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e05a:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    e05e:	2903      	cmp	r1, #3
    e060:	d108      	bne.n	e074 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e062:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    e066:	42a1      	cmp	r1, r4
    e068:	d104      	bne.n	e074 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e06a:	4629      	mov	r1, r5
    e06c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e070:	f7f9 bc5a 	b.w	7928 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8e0>
    e074:	4629      	mov	r1, r5
    e076:	4620      	mov	r0, r4
    e078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e07c:	f7f9 bcac 	b.w	79d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x990>
    e080:	b510      	push	{r4, lr}
    e082:	f001 f846 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e086:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e08a:	4408      	add	r0, r1
    e08c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e090:	fbb0 f0f1 	udiv	r0, r0, r1
    e094:	f500 70bc 	add.w	r0, r0, #376	; 0x178
    e098:	bd10      	pop	{r4, pc}
    e09a:	01f4      	.short	0x01f4
    e09c:	009600fa 	.word	0x009600fa
    e0a0:	004b0064 	.word	0x004b0064
    e0a4:	001e0032 	.word	0x001e0032
    e0a8:	000a0014 	.word	0x000a0014
    e0ac:	00020005 	.word	0x00020005
    e0b0:	0001      	.short	0x0001
    e0b2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e0b6:	f001 0307 	and.w	r3, r1, #7
    e0ba:	7802      	ldrb	r2, [r0, #0]
    e0bc:	2101      	movs	r1, #1
    e0be:	4099      	lsls	r1, r3
    e0c0:	438a      	bics	r2, r1
    e0c2:	7002      	strb	r2, [r0, #0]
    e0c4:	4770      	bx	lr

0000e0c6 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e0c6:	f7f6 b91f 	b.w	4308 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e0ca <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e0ca:	2000      	movs	r0, #0
    e0cc:	4770      	bx	lr

0000e0ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e0ce:	f7f6 bda9 	b.w	4c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e0d2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e0d2:	2100      	movs	r1, #0
    e0d4:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    e0d8:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    e0dc:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    e0e0:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    e0e4:	b109      	cbz	r1, e0ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e0e6:	2102      	movs	r1, #2
    e0e8:	e000      	b.n	e0ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e0ea:	2103      	movs	r1, #3
    e0ec:	f7f8 bfac 	b.w	7048 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e0f0:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    e0f4:	28fe      	cmp	r0, #254	; 0xfe
    e0f6:	d001      	beq.n	e0fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e0f8:	2001      	movs	r0, #1
    e0fa:	4770      	bx	lr
    e0fc:	2000      	movs	r0, #0
    e0fe:	4770      	bx	lr
    e100:	b510      	push	{r4, lr}
    e102:	2801      	cmp	r0, #1
    e104:	d006      	beq.n	e114 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e106:	2802      	cmp	r0, #2
    e108:	d004      	beq.n	e114 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e10a:	f240 219d 	movw	r1, #669	; 0x29d
    e10e:	2006      	movs	r0, #6
    e110:	f7f5 fd5e 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e114:	bd10      	pop	{r4, pc}
    e116:	2801      	cmp	r0, #1
    e118:	d002      	beq.n	e120 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e11a:	2802      	cmp	r0, #2
    e11c:	d105      	bne.n	e12a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e11e:	e002      	b.n	e126 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e120:	2901      	cmp	r1, #1
    e122:	d004      	beq.n	e12e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e124:	e001      	b.n	e12a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e126:	2902      	cmp	r1, #2
    e128:	d001      	beq.n	e12e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e12a:	2000      	movs	r0, #0
    e12c:	4770      	bx	lr
    e12e:	2001      	movs	r0, #1
    e130:	4770      	bx	lr
    e132:	1a40      	subs	r0, r0, r1
    e134:	b200      	sxth	r0, r0
    e136:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e13a:	4288      	cmp	r0, r1
    e13c:	dc01      	bgt.n	e142 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e13e:	2800      	cmp	r0, #0
    e140:	dc01      	bgt.n	e146 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e142:	2001      	movs	r0, #1
    e144:	4770      	bx	lr
    e146:	2000      	movs	r0, #0
    e148:	4770      	bx	lr
    e14a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e14e:	f001 0107 	and.w	r1, r1, #7
    e152:	7800      	ldrb	r0, [r0, #0]
    e154:	2201      	movs	r2, #1
    e156:	408a      	lsls	r2, r1
    e158:	4010      	ands	r0, r2
    e15a:	40c8      	lsrs	r0, r1
    e15c:	4770      	bx	lr
    e15e:	b118      	cbz	r0, e168 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e160:	2802      	cmp	r0, #2
    e162:	d001      	beq.n	e168 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e164:	2001      	movs	r0, #1
    e166:	4770      	bx	lr
    e168:	2000      	movs	r0, #0
    e16a:	4770      	bx	lr

0000e16c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e16c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e170:	7881      	ldrb	r1, [r0, #2]
    e172:	4604      	mov	r4, r0
    e174:	291a      	cmp	r1, #26
    e176:	d025      	beq.n	e1c4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    e178:	dc0e      	bgt.n	e198 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    e17a:	2916      	cmp	r1, #22
    e17c:	d22e      	bcs.n	e1dc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e17e:	e8df f001 	tbb	[pc, r1]
    e182:	2d2d      	.short	0x2d2d
    e184:	212d2d2d 	.word	0x212d2d2d
    e188:	2d2d2d2d 	.word	0x2d2d2d2d
    e18c:	2d2d2d2d 	.word	0x2d2d2d2d
    e190:	2d2d2d2d 	.word	0x2d2d2d2d
    e194:	2121212d 	.word	0x2121212d
    e198:	292a      	cmp	r1, #42	; 0x2a
    e19a:	d01f      	beq.n	e1dc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e19c:	dc0b      	bgt.n	e1b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    e19e:	f1a1 011e 	sub.w	r1, r1, #30
    e1a2:	290c      	cmp	r1, #12
    e1a4:	d21a      	bcs.n	e1dc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e1a6:	e8df f001 	tbb	[pc, r1]
    e1aa:	1919      	.short	0x1919
    e1ac:	19191919 	.word	0x19191919
    e1b0:	19191919 	.word	0x19191919
    e1b4:	0d19      	.short	0x0d19
    e1b6:	393a      	subs	r1, #58	; 0x3a
    e1b8:	2904      	cmp	r1, #4
    e1ba:	d20f      	bcs.n	e1dc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e1bc:	e8df f001 	tbb	[pc, r1]
    e1c0:	020e020e 	.word	0x020e020e
    e1c4:	8820      	ldrh	r0, [r4, #0]
    e1c6:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e1ca:	d207      	bcs.n	e1dc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e1cc:	2701      	movs	r7, #1
    e1ce:	4669      	mov	r1, sp
    e1d0:	f7fe fe1f 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e1d4:	b120      	cbz	r0, e1e0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    e1d6:	2002      	movs	r0, #2
    e1d8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e1dc:	2012      	movs	r0, #18
    e1de:	e7fb      	b.n	e1d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e1e0:	9d01      	ldr	r5, [sp, #4]
    e1e2:	4668      	mov	r0, sp
    e1e4:	462e      	mov	r6, r5
    e1e6:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    e1ea:	f206 1671 	addw	r6, r6, #369	; 0x171
    e1ee:	f000 fe24 	bl	ee3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
    e1f2:	b108      	cbz	r0, e1f8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    e1f4:	7828      	ldrb	r0, [r5, #0]
    e1f6:	b108      	cbz	r0, e1fc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    e1f8:	200c      	movs	r0, #12
    e1fa:	e7ed      	b.n	e1d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e1fc:	702f      	strb	r7, [r5, #0]
    e1fe:	78a0      	ldrb	r0, [r4, #2]
    e200:	7030      	strb	r0, [r6, #0]
    e202:	4668      	mov	r0, sp
    e204:	f7ff f9b6 	bl	d574 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e208:	2000      	movs	r0, #0
    e20a:	e7e5      	b.n	e1d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000e20c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e20c:	b510      	push	{r4, lr}
    e20e:	4604      	mov	r4, r0
    e210:	7800      	ldrb	r0, [r0, #0]
    e212:	b118      	cbz	r0, e21c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e214:	2801      	cmp	r0, #1
    e216:	d001      	beq.n	e21c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e218:	2012      	movs	r0, #18
    e21a:	bd10      	pop	{r4, pc}
    e21c:	f000 fdc1 	bl	eda2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e220:	b120      	cbz	r0, e22c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e222:	f7f7 f94f 	bl	54c4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e226:	b108      	cbz	r0, e22c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e228:	200c      	movs	r0, #12
    e22a:	bd10      	pop	{r4, pc}
    e22c:	7820      	ldrb	r0, [r4, #0]
    e22e:	f7ff ff96 	bl	e15e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e232:	1de2      	adds	r2, r4, #7
    e234:	f104 0317 	add.w	r3, r4, #23
    e238:	1c61      	adds	r1, r4, #1
    e23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e23e:	f7f7 b973 	b.w	5528 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e242 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e242:	b510      	push	{r4, lr}
    e244:	4604      	mov	r4, r0
    e246:	f000 fe6c 	bl	ef22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    e24a:	b108      	cbz	r0, e250 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e24c:	200c      	movs	r0, #12
    e24e:	bd10      	pop	{r4, pc}
    e250:	7820      	ldrb	r0, [r4, #0]
    e252:	b118      	cbz	r0, e25c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e254:	2801      	cmp	r0, #1
    e256:	d001      	beq.n	e25c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e258:	2012      	movs	r0, #18
    e25a:	bd10      	pop	{r4, pc}
    e25c:	f7ff ff7f 	bl	e15e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e260:	1c61      	adds	r1, r4, #1
    e262:	f7f7 f9d9 	bl	5618 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e266:	b108      	cbz	r0, e26c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e268:	2000      	movs	r0, #0
    e26a:	bd10      	pop	{r4, pc}
    e26c:	2007      	movs	r0, #7
    e26e:	bd10      	pop	{r4, pc}

0000e270 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e270:	b510      	push	{r4, lr}
    e272:	f000 fd96 	bl	eda2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e276:	b120      	cbz	r0, e282 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e278:	f7f7 f924 	bl	54c4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e27c:	b108      	cbz	r0, e282 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e27e:	200c      	movs	r0, #12
    e280:	bd10      	pop	{r4, pc}
    e282:	f7f7 f997 	bl	55b4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e286:	2000      	movs	r0, #0
    e288:	bd10      	pop	{r4, pc}

0000e28a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e28a:	b510      	push	{r4, lr}
    e28c:	f000 fe49 	bl	ef22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    e290:	b108      	cbz	r0, e296 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e292:	200c      	movs	r0, #12
    e294:	bd10      	pop	{r4, pc}
    e296:	f7f7 f9e7 	bl	5668 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e29a:	2000      	movs	r0, #0
    e29c:	bd10      	pop	{r4, pc}

0000e29e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e29e:	b510      	push	{r4, lr}
    e2a0:	460b      	mov	r3, r1
    e2a2:	2201      	movs	r2, #1
    e2a4:	f100 0110 	add.w	r1, r0, #16
    e2a8:	f7fe fd95 	bl	cdd6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e2ac:	2000      	movs	r0, #0
    e2ae:	bd10      	pop	{r4, pc}

0000e2b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e2b0:	b510      	push	{r4, lr}
    e2b2:	8800      	ldrh	r0, [r0, #0]
    e2b4:	2100      	movs	r1, #0
    e2b6:	f7fe fc74 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e2ba:	b118      	cbz	r0, e2c4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e2bc:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    e2c0:	b111      	cbz	r1, e2c8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e2c2:	e007      	b.n	e2d4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e2c4:	2002      	movs	r0, #2
    e2c6:	bd10      	pop	{r4, pc}
    e2c8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    e2cc:	2914      	cmp	r1, #20
    e2ce:	d003      	beq.n	e2d8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e2d0:	2915      	cmp	r1, #21
    e2d2:	d001      	beq.n	e2d8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e2d4:	200c      	movs	r0, #12
    e2d6:	bd10      	pop	{r4, pc}
    e2d8:	2102      	movs	r1, #2
    e2da:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    e2de:	2000      	movs	r0, #0
    e2e0:	bd10      	pop	{r4, pc}

0000e2e2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e2e2:	b538      	push	{r3, r4, r5, lr}
    e2e4:	4605      	mov	r5, r0
    e2e6:	8800      	ldrh	r0, [r0, #0]
    e2e8:	2100      	movs	r1, #0
    e2ea:	f7fe fc5a 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e2ee:	0004      	movs	r4, r0
    e2f0:	d003      	beq.n	e2fa <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e2f2:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    e2f6:	b110      	cbz	r0, e2fe <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e2f8:	e010      	b.n	e31c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e2fa:	2002      	movs	r0, #2
    e2fc:	bd38      	pop	{r3, r4, r5, pc}
    e2fe:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    e302:	2814      	cmp	r0, #20
    e304:	d001      	beq.n	e30a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e306:	2815      	cmp	r0, #21
    e308:	d108      	bne.n	e31c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e30a:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    e30e:	f88d 0000 	strb.w	r0, [sp]
    e312:	9800      	ldr	r0, [sp, #0]
    e314:	9000      	str	r0, [sp, #0]
    e316:	f89d 0000 	ldrb.w	r0, [sp]
    e31a:	b108      	cbz	r0, e320 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e31c:	200c      	movs	r0, #12
    e31e:	bd38      	pop	{r3, r4, r5, pc}
    e320:	2210      	movs	r2, #16
    e322:	1ca9      	adds	r1, r5, #2
    e324:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    e328:	f7fd fc29 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e32c:	2001      	movs	r0, #1
    e32e:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    e332:	2000      	movs	r0, #0
    e334:	bd38      	pop	{r3, r4, r5, pc}

0000e336 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e336:	b510      	push	{r4, lr}
    e338:	2108      	movs	r1, #8
    e33a:	f7f5 fcf5 	bl	3d28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e33e:	2000      	movs	r0, #0
    e340:	bd10      	pop	{r4, pc}

0000e342 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e342:	b510      	push	{r4, lr}
    e344:	4604      	mov	r4, r0
    e346:	2101      	movs	r1, #1
    e348:	2000      	movs	r0, #0
    e34a:	f7fe fc2a 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e34e:	b120      	cbz	r0, e35a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>
    e350:	f7ff fb54 	bl	d9fc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e354:	7020      	strb	r0, [r4, #0]
    e356:	2000      	movs	r0, #0
    e358:	bd10      	pop	{r4, pc}
    e35a:	f240 51e4 	movw	r1, #1508	; 0x5e4
    e35e:	2039      	movs	r0, #57	; 0x39
    e360:	f7f5 fc36 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e364 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    e364:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e366:	460c      	mov	r4, r1
    e368:	4605      	mov	r5, r0
    e36a:	8800      	ldrh	r0, [r0, #0]
    e36c:	4669      	mov	r1, sp
    e36e:	f7fe fd50 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e372:	2200      	movs	r2, #0
    e374:	b128      	cbz	r0, e382 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    e376:	f8c4 2002 	str.w	r2, [r4, #2]
    e37a:	71a2      	strb	r2, [r4, #6]
    e37c:	8022      	strh	r2, [r4, #0]
    e37e:	2002      	movs	r0, #2
    e380:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e382:	9901      	ldr	r1, [sp, #4]
    e384:	4608      	mov	r0, r1
    e386:	3170      	adds	r1, #112	; 0x70
    e388:	f881 2046 	strb.w	r2, [r1, #70]	; 0x46
    e38c:	68c3      	ldr	r3, [r0, #12]
    e38e:	f8c4 3002 	str.w	r3, [r4, #2]
    e392:	7c03      	ldrb	r3, [r0, #16]
    e394:	71a3      	strb	r3, [r4, #6]
    e396:	882b      	ldrh	r3, [r5, #0]
    e398:	8023      	strh	r3, [r4, #0]
    e39a:	f891 3046 	ldrb.w	r3, [r1, #70]	; 0x46
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d1f2      	bne.n	e388 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    e3a2:	2000      	movs	r0, #0
    e3a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e3a6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e3a6:	b510      	push	{r4, lr}
    e3a8:	4604      	mov	r4, r0
    e3aa:	f000 fd40 	bl	ee2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    e3ae:	b140      	cbz	r0, e3c2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e3b0:	20fb      	movs	r0, #251	; 0xfb
    e3b2:	8020      	strh	r0, [r4, #0]
    e3b4:	f640 0148 	movw	r1, #2120	; 0x848
    e3b8:	8061      	strh	r1, [r4, #2]
    e3ba:	80a0      	strh	r0, [r4, #4]
    e3bc:	80e1      	strh	r1, [r4, #6]
    e3be:	2000      	movs	r0, #0
    e3c0:	bd10      	pop	{r4, pc}
    e3c2:	2001      	movs	r0, #1
    e3c4:	bd10      	pop	{r4, pc}

0000e3c6 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e3c6:	2108      	movs	r1, #8
    e3c8:	7001      	strb	r1, [r0, #0]
    e3ca:	2000      	movs	r0, #0
    e3cc:	4770      	bx	lr

0000e3ce <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e3ce:	b510      	push	{r4, lr}
    e3d0:	4604      	mov	r4, r0
    e3d2:	20d8      	movs	r0, #216	; 0xd8
    e3d4:	7020      	strb	r0, [r4, #0]
    e3d6:	f000 fd0b 	bl	edf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    e3da:	7060      	strb	r0, [r4, #1]
    e3dc:	2000      	movs	r0, #0
    e3de:	bd10      	pop	{r4, pc}

0000e3e0 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e3e0:	2108      	movs	r1, #8
    e3e2:	7001      	strb	r1, [r0, #0]
    e3e4:	2000      	movs	r0, #0
    e3e6:	4770      	bx	lr

0000e3e8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e3e8:	b510      	push	{r4, lr}
    e3ea:	4604      	mov	r4, r0
    e3ec:	7800      	ldrb	r0, [r0, #0]
    e3ee:	b108      	cbz	r0, e3f4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e3f0:	2801      	cmp	r0, #1
    e3f2:	d110      	bne.n	e416 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e3f4:	f000 fcd5 	bl	eda2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e3f8:	b120      	cbz	r0, e404 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e3fa:	f7f7 f863 	bl	54c4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e3fe:	b108      	cbz	r0, e404 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e400:	200c      	movs	r0, #12
    e402:	bd10      	pop	{r4, pc}
    e404:	7820      	ldrb	r0, [r4, #0]
    e406:	f7ff feaa 	bl	e15e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e40a:	1c61      	adds	r1, r4, #1
    e40c:	f7fe fcc9 	bl	cda2 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e410:	b108      	cbz	r0, e416 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e412:	2000      	movs	r0, #0
    e414:	bd10      	pop	{r4, pc}
    e416:	2012      	movs	r0, #18
    e418:	bd10      	pop	{r4, pc}

0000e41a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e41a:	b510      	push	{r4, lr}
    e41c:	4604      	mov	r4, r0
    e41e:	f000 fd80 	bl	ef22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    e422:	b108      	cbz	r0, e428 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    e424:	200c      	movs	r0, #12
    e426:	bd10      	pop	{r4, pc}
    e428:	7820      	ldrb	r0, [r4, #0]
    e42a:	b108      	cbz	r0, e430 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    e42c:	2801      	cmp	r0, #1
    e42e:	d107      	bne.n	e440 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e430:	f7ff fe95 	bl	e15e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e434:	1c61      	adds	r1, r4, #1
    e436:	f7fe fcc3 	bl	cdc0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    e43a:	b108      	cbz	r0, e440 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e43c:	2000      	movs	r0, #0
    e43e:	bd10      	pop	{r4, pc}
    e440:	2012      	movs	r0, #18
    e442:	bd10      	pop	{r4, pc}

0000e444 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    e444:	b510      	push	{r4, lr}
    e446:	4604      	mov	r4, r0
    e448:	f000 fcab 	bl	eda2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e44c:	b108      	cbz	r0, e452 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    e44e:	200c      	movs	r0, #12
    e450:	bd10      	pop	{r4, pc}
    e452:	7820      	ldrb	r0, [r4, #0]
    e454:	f000 0001 	and.w	r0, r0, #1
    e458:	f7f7 f82e 	bl	54b8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    e45c:	2000      	movs	r0, #0
    e45e:	bd10      	pop	{r4, pc}

0000e460 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    e460:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e462:	4605      	mov	r5, r0
    e464:	2000      	movs	r0, #0
    e466:	f7f5 fff1 	bl	444c <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>
    e46a:	0004      	movs	r4, r0
    e46c:	d01e      	beq.n	e4ac <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    e46e:	f104 0022 	add.w	r0, r4, #34	; 0x22
    e472:	6020      	str	r0, [r4, #0]
    e474:	301f      	adds	r0, #31
    e476:	60a0      	str	r0, [r4, #8]
    e478:	f894 0020 	ldrb.w	r0, [r4, #32]
    e47c:	2600      	movs	r6, #0
    e47e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e482:	221f      	movs	r2, #31
    e484:	8086      	strh	r6, [r0, #4]
    e486:	f894 0020 	ldrb.w	r0, [r4, #32]
    e48a:	1c40      	adds	r0, r0, #1
    e48c:	f000 0001 	and.w	r0, r0, #1
    e490:	f884 0020 	strb.w	r0, [r4, #32]
    e494:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    e498:	7829      	ldrb	r1, [r5, #0]
    e49a:	1c68      	adds	r0, r5, #1
    e49c:	f000 fb87 	bl	ebae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb4>
    e4a0:	b130      	cbz	r0, e4b0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x50>
    e4a2:	f241 5101 	movw	r1, #5377	; 0x1501
    e4a6:	2039      	movs	r0, #57	; 0x39
    e4a8:	f7f5 fb92 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4ac:	2007      	movs	r0, #7
    e4ae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e4b0:	f894 0020 	ldrb.w	r0, [r4, #32]
    e4b4:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    e4b8:	9001      	str	r0, [sp, #4]
    e4ba:	7828      	ldrb	r0, [r5, #0]
    e4bc:	f8ad 0002 	strh.w	r0, [sp, #2]
    e4c0:	f88d 6000 	strb.w	r6, [sp]
    e4c4:	4668      	mov	r0, sp
    e4c6:	f000 f9de 	bl	e886 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    e4ca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e4cc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    e4cc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e4ce:	4606      	mov	r6, r0
    e4d0:	2101      	movs	r1, #1
    e4d2:	2000      	movs	r0, #0
    e4d4:	f7fe fb65 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e4d8:	0005      	movs	r5, r0
    e4da:	d019      	beq.n	e510 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x44>
    e4dc:	7830      	ldrb	r0, [r6, #0]
    e4de:	2400      	movs	r4, #0
    e4e0:	b160      	cbz	r0, e4fc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
    e4e2:	f88d 4004 	strb.w	r4, [sp, #4]
    e4e6:	f10d 0105 	add.w	r1, sp, #5
    e4ea:	2001      	movs	r0, #1
    e4ec:	f7f6 f9de 	bl	48ac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e4f0:	b120      	cbz	r0, e4fc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
    e4f2:	a801      	add	r0, sp, #4
    e4f4:	f000 f89e 	bl	e634 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    e4f8:	2800      	cmp	r0, #0
    e4fa:	d117      	bne.n	e52c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x60>
    e4fc:	f88d 4000 	strb.w	r4, [sp]
    e500:	4628      	mov	r0, r5
    e502:	f7ff fa71 	bl	d9e8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e506:	b140      	cbz	r0, e51a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x4e>
    e508:	2080      	movs	r0, #128	; 0x80
    e50a:	f8ad 0001 	strh.w	r0, [sp, #1]
    e50e:	e006      	b.n	e51e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x52>
    e510:	f241 5185 	movw	r1, #5509	; 0x1585
    e514:	2039      	movs	r0, #57	; 0x39
    e516:	f7f5 fb5b 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e51a:	f8ad 4001 	strh.w	r4, [sp, #1]
    e51e:	f88d 4003 	strb.w	r4, [sp, #3]
    e522:	7830      	ldrb	r0, [r6, #0]
    e524:	2801      	cmp	r0, #1
    e526:	d002      	beq.n	e52e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x62>
    e528:	b130      	cbz	r0, e538 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x6c>
    e52a:	2012      	movs	r0, #18
    e52c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e52e:	4669      	mov	r1, sp
    e530:	4628      	mov	r0, r5
    e532:	f7fb fe3d 	bl	a1b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e538:	4628      	mov	r0, r5
    e53a:	f000 fc95 	bl	ee68 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36e>
    e53e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e540 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    e540:	b530      	push	{r4, r5, lr}
    e542:	4604      	mov	r4, r0
    e544:	b08b      	sub	sp, #44	; 0x2c
    e546:	2101      	movs	r1, #1
    e548:	2000      	movs	r0, #0
    e54a:	f7fe fb2a 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e54e:	0001      	movs	r1, r0
    e550:	d006      	beq.n	e560 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    e552:	8860      	ldrh	r0, [r4, #2]
    e554:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    e558:	d905      	bls.n	e566 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x26>
    e55a:	2012      	movs	r0, #18
    e55c:	b00b      	add	sp, #44	; 0x2c
    e55e:	bd30      	pop	{r4, r5, pc}
    e560:	f241 11d8 	movw	r1, #4568	; 0x11d8
    e564:	e063      	b.n	e62e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xee>
    e566:	2500      	movs	r5, #0
    e568:	f88d 5004 	strb.w	r5, [sp, #4]
    e56c:	7922      	ldrb	r2, [r4, #4]
    e56e:	9500      	str	r5, [sp, #0]
    e570:	f89d 0000 	ldrb.w	r0, [sp]
    e574:	2a05      	cmp	r2, #5
    e576:	f040 0010 	orr.w	r0, r0, #16
    e57a:	f88d 0000 	strb.w	r0, [sp]
    e57e:	d254      	bcs.n	e62a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xea>
    e580:	e8df f002 	tbb	[pc, r2]
    e584:	11050803 	.word	0x11050803
    e588:	000b      	.short	0x000b
    e58a:	f040 0001 	orr.w	r0, r0, #1
    e58e:	f040 0002 	orr.w	r0, r0, #2
    e592:	e006      	b.n	e5a2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x62>
    e594:	f040 0009 	orr.w	r0, r0, #9
    e598:	e001      	b.n	e59e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5e>
    e59a:	f040 0001 	orr.w	r0, r0, #1
    e59e:	f040 0004 	orr.w	r0, r0, #4
    e5a2:	f88d 0000 	strb.w	r0, [sp]
    e5a6:	f8bd 0000 	ldrh.w	r0, [sp]
    e5aa:	9000      	str	r0, [sp, #0]
    e5ac:	f8bd 0000 	ldrh.w	r0, [sp]
    e5b0:	f8ad 0005 	strh.w	r0, [sp, #5]
    e5b4:	8822      	ldrh	r2, [r4, #0]
    e5b6:	f8dd 0006 	ldr.w	r0, [sp, #6]
    e5ba:	f362 201f 	bfi	r0, r2, #8, #24
    e5be:	f8cd 0006 	str.w	r0, [sp, #6]
    e5c2:	8862      	ldrh	r2, [r4, #2]
    e5c4:	f8dd 0009 	ldr.w	r0, [sp, #9]
    e5c8:	f362 201f 	bfi	r0, r2, #8, #24
    e5cc:	f8cd 0009 	str.w	r0, [sp, #9]
    e5d0:	7b60      	ldrb	r0, [r4, #13]
    e5d2:	f88d 000d 	strb.w	r0, [sp, #13]
    e5d6:	7960      	ldrb	r0, [r4, #5]
    e5d8:	f88d 000e 	strb.w	r0, [sp, #14]
    e5dc:	79a0      	ldrb	r0, [r4, #6]
    e5de:	f88d 000f 	strb.w	r0, [sp, #15]
    e5e2:	f8d4 0007 	ldr.w	r0, [r4, #7]
    e5e6:	9004      	str	r0, [sp, #16]
    e5e8:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    e5ec:	f8ad 0014 	strh.w	r0, [sp, #20]
    e5f0:	7ba0      	ldrb	r0, [r4, #14]
    e5f2:	f88d 0016 	strb.w	r0, [sp, #22]
    e5f6:	207f      	movs	r0, #127	; 0x7f
    e5f8:	f88d 0017 	strb.w	r0, [sp, #23]
    e5fc:	2001      	movs	r0, #1
    e5fe:	f88d 0018 	strb.w	r0, [sp, #24]
    e602:	f88d 5019 	strb.w	r5, [sp, #25]
    e606:	f88d 001a 	strb.w	r0, [sp, #26]
    e60a:	f88d 501b 	strb.w	r5, [sp, #27]
    e60e:	4608      	mov	r0, r1
    e610:	f7ff fa06 	bl	da20 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    e614:	f88d 001c 	strb.w	r0, [sp, #28]
    e618:	f88d 501d 	strb.w	r5, [sp, #29]
    e61c:	f88d 501e 	strb.w	r5, [sp, #30]
    e620:	a909      	add	r1, sp, #36	; 0x24
    e622:	a801      	add	r0, sp, #4
    e624:	f7fb fc62 	bl	9eec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    e628:	e798      	b.n	e55c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    e62a:	f241 01bc 	movw	r1, #4284	; 0x10bc
    e62e:	2039      	movs	r0, #57	; 0x39
    e630:	f7f5 face 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e634 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    e634:	b570      	push	{r4, r5, r6, lr}
    e636:	4604      	mov	r4, r0
    e638:	7800      	ldrb	r0, [r0, #0]
    e63a:	2101      	movs	r1, #1
    e63c:	f7fe fab1 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e640:	0005      	movs	r5, r0
    e642:	d007      	beq.n	e654 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    e644:	f7ff fba3 	bl	dd8e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e648:	b160      	cbz	r0, e664 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    e64a:	4628      	mov	r0, r5
    e64c:	f7ff f9d2 	bl	d9f4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e650:	b110      	cbz	r0, e658 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    e652:	e005      	b.n	e660 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    e654:	2042      	movs	r0, #66	; 0x42
    e656:	bd70      	pop	{r4, r5, r6, pc}
    e658:	4628      	mov	r0, r5
    e65a:	f7ff f9c1 	bl	d9e0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e65e:	b108      	cbz	r0, e664 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    e660:	200c      	movs	r0, #12
    e662:	bd70      	pop	{r4, r5, r6, pc}
    e664:	1c61      	adds	r1, r4, #1
    e666:	4628      	mov	r0, r5
    e668:	f7ff f9d2 	bl	da10 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    e66c:	2000      	movs	r0, #0
    e66e:	bd70      	pop	{r4, r5, r6, pc}

0000e670 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    e670:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e672:	460d      	mov	r5, r1
    e674:	4604      	mov	r4, r0
    e676:	f000 fbda 	bl	ee2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    e67a:	b130      	cbz	r0, e68a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    e67c:	88a2      	ldrh	r2, [r4, #4]
    e67e:	f244 2090 	movw	r0, #17040	; 0x4290
    e682:	4282      	cmp	r2, r0
    e684:	d903      	bls.n	e68e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    e686:	2012      	movs	r0, #18
    e688:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e68a:	2001      	movs	r0, #1
    e68c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e68e:	f640 0048 	movw	r0, #2120	; 0x848
    e692:	4282      	cmp	r2, r0
    e694:	d300      	bcc.n	e698 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    e696:	4602      	mov	r2, r0
    e698:	8820      	ldrh	r0, [r4, #0]
    e69a:	f8ad 0000 	strh.w	r0, [sp]
    e69e:	8860      	ldrh	r0, [r4, #2]
    e6a0:	f8ad 0002 	strh.w	r0, [sp, #2]
    e6a4:	f8ad 2004 	strh.w	r2, [sp, #4]
    e6a8:	8860      	ldrh	r0, [r4, #2]
    e6aa:	f8ad 0006 	strh.w	r0, [sp, #6]
    e6ae:	f8ad 2008 	strh.w	r2, [sp, #8]
    e6b2:	8820      	ldrh	r0, [r4, #0]
    e6b4:	8028      	strh	r0, [r5, #0]
    e6b6:	4668      	mov	r0, sp
    e6b8:	f7fb fe48 	bl	a34c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    e6bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e6be <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    e6be:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e6c0:	4604      	mov	r4, r0
    e6c2:	f7fb ffa3 	bl	a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e6c6:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e6ca:	b1b0      	cbz	r0, e6fa <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    e6cc:	f10d 0007 	add.w	r0, sp, #7
    e6d0:	9000      	str	r0, [sp, #0]
    e6d2:	7922      	ldrb	r2, [r4, #4]
    e6d4:	78e1      	ldrb	r1, [r4, #3]
    e6d6:	78a0      	ldrb	r0, [r4, #2]
    e6d8:	f10d 0306 	add.w	r3, sp, #6
    e6dc:	f000 fbe5 	bl	eeaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b0>
    e6e0:	2800      	cmp	r0, #0
    e6e2:	d109      	bne.n	e6f8 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    e6e4:	8820      	ldrh	r0, [r4, #0]
    e6e6:	f8ad 0004 	strh.w	r0, [sp, #4]
    e6ea:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    e6ee:	f8ad 0008 	strh.w	r0, [sp, #8]
    e6f2:	a801      	add	r0, sp, #4
    e6f4:	f000 f903 	bl	e8fe <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    e6f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e6fa:	2001      	movs	r0, #1
    e6fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e6fe <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    e6fe:	b510      	push	{r4, lr}
    e700:	4604      	mov	r4, r0
    e702:	f000 fb4e 	bl	eda2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e706:	b120      	cbz	r0, e712 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e708:	f7f6 fedc 	bl	54c4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e70c:	b108      	cbz	r0, e712 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e70e:	200c      	movs	r0, #12
    e710:	bd10      	pop	{r4, pc}
    e712:	7820      	ldrb	r0, [r4, #0]
    e714:	f7ff fd23 	bl	e15e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e718:	79e2      	ldrb	r2, [r4, #7]
    e71a:	1c61      	adds	r1, r4, #1
    e71c:	f7f6 fe80 	bl	5420 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    e720:	b108      	cbz	r0, e726 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    e722:	2000      	movs	r0, #0
    e724:	bd10      	pop	{r4, pc}
    e726:	2002      	movs	r0, #2
    e728:	bd10      	pop	{r4, pc}

0000e72a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    e72a:	b510      	push	{r4, lr}
    e72c:	4604      	mov	r4, r0
    e72e:	2001      	movs	r0, #1
    e730:	f000 fa22 	bl	eb78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    e734:	b128      	cbz	r0, e742 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    e736:	4621      	mov	r1, r4
    e738:	2001      	movs	r0, #1
    e73a:	f7f6 f8cf 	bl	48dc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    e73e:	2000      	movs	r0, #0
    e740:	bd10      	pop	{r4, pc}
    e742:	200c      	movs	r0, #12
    e744:	bd10      	pop	{r4, pc}

0000e746 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    e746:	b510      	push	{r4, lr}
    e748:	8800      	ldrh	r0, [r0, #0]
    e74a:	f7f6 ff49 	bl	55e0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    e74e:	b108      	cbz	r0, e754 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    e750:	2000      	movs	r0, #0
    e752:	bd10      	pop	{r4, pc}
    e754:	2030      	movs	r0, #48	; 0x30
    e756:	bd10      	pop	{r4, pc}

0000e758 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    e758:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e75a:	4605      	mov	r5, r0
    e75c:	2000      	movs	r0, #0
    e75e:	f7f5 fe75 	bl	444c <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>
    e762:	0004      	movs	r4, r0
    e764:	d01f      	beq.n	e7a6 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4e>
    e766:	f104 0060 	add.w	r0, r4, #96	; 0x60
    e76a:	6120      	str	r0, [r4, #16]
    e76c:	301f      	adds	r0, #31
    e76e:	61a0      	str	r0, [r4, #24]
    e770:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    e774:	2600      	movs	r6, #0
    e776:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e77a:	221f      	movs	r2, #31
    e77c:	8286      	strh	r6, [r0, #20]
    e77e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    e782:	1c40      	adds	r0, r0, #1
    e784:	f000 0001 	and.w	r0, r0, #1
    e788:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    e78c:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    e790:	7829      	ldrb	r1, [r5, #0]
    e792:	1c68      	adds	r0, r5, #1
    e794:	3310      	adds	r3, #16
    e796:	f000 fa0a 	bl	ebae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb4>
    e79a:	b130      	cbz	r0, e7aa <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x52>
    e79c:	f241 3132 	movw	r1, #4914	; 0x1332
    e7a0:	2039      	movs	r0, #57	; 0x39
    e7a2:	f7f5 fa15 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7a6:	2007      	movs	r0, #7
    e7a8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e7aa:	f88d 6000 	strb.w	r6, [sp]
    e7ae:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    e7b2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e7b6:	6900      	ldr	r0, [r0, #16]
    e7b8:	9001      	str	r0, [sp, #4]
    e7ba:	7828      	ldrb	r0, [r5, #0]
    e7bc:	f8ad 0002 	strh.w	r0, [sp, #2]
    e7c0:	4668      	mov	r0, sp
    e7c2:	f000 f87e 	bl	e8c2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    e7c6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e7c8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    e7c8:	b51c      	push	{r2, r3, r4, lr}
    e7ca:	4604      	mov	r4, r0
    e7cc:	f000 fb2f 	bl	ee2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    e7d0:	b178      	cbz	r0, e7f2 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    e7d2:	8820      	ldrh	r0, [r4, #0]
    e7d4:	f8ad 0000 	strh.w	r0, [sp]
    e7d8:	8860      	ldrh	r0, [r4, #2]
    e7da:	f8ad 0002 	strh.w	r0, [sp, #2]
    e7de:	8820      	ldrh	r0, [r4, #0]
    e7e0:	f8ad 0004 	strh.w	r0, [sp, #4]
    e7e4:	8860      	ldrh	r0, [r4, #2]
    e7e6:	f8ad 0006 	strh.w	r0, [sp, #6]
    e7ea:	4668      	mov	r0, sp
    e7ec:	f7fb fe32 	bl	a454 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    e7f0:	bd1c      	pop	{r2, r3, r4, pc}
    e7f2:	2001      	movs	r0, #1
    e7f4:	bd1c      	pop	{r2, r3, r4, pc}

0000e7f6 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    e7f6:	b510      	push	{r4, lr}
    e7f8:	f7f6 f894 	bl	4924 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    e7fc:	2000      	movs	r0, #0
    e7fe:	bd10      	pop	{r4, pc}

0000e800 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    e800:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e802:	460c      	mov	r4, r1
    e804:	4605      	mov	r5, r0
    e806:	f000 fb12 	bl	ee2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    e80a:	b160      	cbz	r0, e826 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    e80c:	4669      	mov	r1, sp
    e80e:	4628      	mov	r0, r5
    e810:	f7fe faff 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e814:	2800      	cmp	r0, #0
    e816:	d105      	bne.n	e824 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    e818:	2100      	movs	r1, #0
    e81a:	4622      	mov	r2, r4
    e81c:	9801      	ldr	r0, [sp, #4]
    e81e:	f000 fa8a 	bl	ed36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    e822:	2000      	movs	r0, #0
    e824:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e826:	2001      	movs	r0, #1
    e828:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e82a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    e82a:	b510      	push	{r4, lr}
    e82c:	4604      	mov	r4, r0
    e82e:	2000      	movs	r0, #0
    e830:	f000 f9a2 	bl	eb78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    e834:	b128      	cbz	r0, e842 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    e836:	4621      	mov	r1, r4
    e838:	2000      	movs	r0, #0
    e83a:	f7f6 f84f 	bl	48dc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    e83e:	2000      	movs	r0, #0
    e840:	bd10      	pop	{r4, pc}
    e842:	200c      	movs	r0, #12
    e844:	bd10      	pop	{r4, pc}

0000e846 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    e846:	b510      	push	{r4, lr}
    e848:	4604      	mov	r4, r0
    e84a:	f7ff fabd 	bl	ddc8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    e84e:	b120      	cbz	r0, e85a <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    e850:	7820      	ldrb	r0, [r4, #0]
    e852:	f7f8 fbbd 	bl	6fd0 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    e856:	2000      	movs	r0, #0
    e858:	bd10      	pop	{r4, pc}
    e85a:	200c      	movs	r0, #12
    e85c:	bd10      	pop	{r4, pc}

0000e85e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    e85e:	b510      	push	{r4, lr}
    e860:	7800      	ldrb	r0, [r0, #0]
    e862:	f000 0001 	and.w	r0, r0, #1
    e866:	f7f8 fbb9 	bl	6fdc <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    e86a:	2000      	movs	r0, #0
    e86c:	bd10      	pop	{r4, pc}

0000e86e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    e86e:	b510      	push	{r4, lr}
    e870:	4604      	mov	r4, r0
    e872:	f000 fadc 	bl	ee2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    e876:	b120      	cbz	r0, e882 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    e878:	4620      	mov	r0, r4
    e87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e87e:	f7fb bd65 	b.w	a34c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    e882:	2001      	movs	r0, #1
    e884:	bd10      	pop	{r4, pc}

0000e886 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    e886:	b570      	push	{r4, r5, r6, lr}
    e888:	4604      	mov	r4, r0
    e88a:	7800      	ldrb	r0, [r0, #0]
    e88c:	2101      	movs	r1, #1
    e88e:	f7fe f988 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e892:	0005      	movs	r5, r0
    e894:	d013      	beq.n	e8be <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x38>
    e896:	2201      	movs	r2, #1
    e898:	8861      	ldrh	r1, [r4, #2]
    e89a:	f000 f99d 	bl	ebd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    e89e:	2800      	cmp	r0, #0
    e8a0:	d10c      	bne.n	e8bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x36>
    e8a2:	4628      	mov	r0, r5
    e8a4:	f7ff f876 	bl	d994 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    e8a8:	8861      	ldrh	r1, [r4, #2]
    e8aa:	4281      	cmp	r1, r0
    e8ac:	d800      	bhi.n	e8b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2a>
    e8ae:	4608      	mov	r0, r1
    e8b0:	4601      	mov	r1, r0
    e8b2:	4628      	mov	r0, r5
    e8b4:	6862      	ldr	r2, [r4, #4]
    e8b6:	f7ff f8b9 	bl	da2c <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e8ba:	2000      	movs	r0, #0
    e8bc:	bd70      	pop	{r4, r5, r6, pc}
    e8be:	2042      	movs	r0, #66	; 0x42
    e8c0:	bd70      	pop	{r4, r5, r6, pc}

0000e8c2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    e8c2:	b570      	push	{r4, r5, r6, lr}
    e8c4:	4604      	mov	r4, r0
    e8c6:	7800      	ldrb	r0, [r0, #0]
    e8c8:	2101      	movs	r1, #1
    e8ca:	f7fe f96a 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e8ce:	0005      	movs	r5, r0
    e8d0:	d00b      	beq.n	e8ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    e8d2:	2201      	movs	r2, #1
    e8d4:	8861      	ldrh	r1, [r4, #2]
    e8d6:	f000 f97f 	bl	ebd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    e8da:	2800      	cmp	r0, #0
    e8dc:	d106      	bne.n	e8ec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    e8de:	8866      	ldrh	r6, [r4, #2]
    e8e0:	4628      	mov	r0, r5
    e8e2:	f7ff f887 	bl	d9f4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e8e6:	b110      	cbz	r0, e8ee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    e8e8:	e002      	b.n	e8f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    e8ea:	2042      	movs	r0, #66	; 0x42
    e8ec:	bd70      	pop	{r4, r5, r6, pc}
    e8ee:	2600      	movs	r6, #0
    e8f0:	4631      	mov	r1, r6
    e8f2:	4628      	mov	r0, r5
    e8f4:	6862      	ldr	r2, [r4, #4]
    e8f6:	f7ff f8a3 	bl	da40 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e8fa:	2000      	movs	r0, #0
    e8fc:	bd70      	pop	{r4, r5, r6, pc}

0000e8fe <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    e8fe:	b510      	push	{r4, lr}
    e900:	4604      	mov	r4, r0
    e902:	8880      	ldrh	r0, [r0, #4]
    e904:	b128      	cbz	r0, e912 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e906:	2801      	cmp	r0, #1
    e908:	d003      	beq.n	e912 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e90a:	2802      	cmp	r0, #2
    e90c:	d001      	beq.n	e912 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e90e:	2012      	movs	r0, #18
    e910:	bd10      	pop	{r4, pc}
    e912:	78e0      	ldrb	r0, [r4, #3]
    e914:	f000 f9ec 	bl	ecf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    e918:	b148      	cbz	r0, e92e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    e91a:	78a0      	ldrb	r0, [r4, #2]
    e91c:	f000 f9e8 	bl	ecf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    e920:	b128      	cbz	r0, e92e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    e922:	4620      	mov	r0, r4
    e924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e928:	2101      	movs	r1, #1
    e92a:	f000 b881 	b.w	ea30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    e92e:	2011      	movs	r0, #17
    e930:	bd10      	pop	{r4, pc}

0000e932 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    e932:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e934:	460c      	mov	r4, r1
    e936:	4605      	mov	r5, r0
    e938:	8800      	ldrh	r0, [r0, #0]
    e93a:	4669      	mov	r1, sp
    e93c:	f7fe fa69 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e940:	2800      	cmp	r0, #0
    e942:	d106      	bne.n	e952 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    e944:	9801      	ldr	r0, [sp, #4]
    e946:	8829      	ldrh	r1, [r5, #0]
    e948:	8021      	strh	r1, [r4, #0]
    e94a:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    e94e:	8060      	strh	r0, [r4, #2]
    e950:	2000      	movs	r0, #0
    e952:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e954 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    e954:	b510      	push	{r4, lr}
    e956:	4604      	mov	r4, r0
    e958:	4601      	mov	r1, r0
    e95a:	2000      	movs	r0, #0
    e95c:	f7f5 ffa6 	bl	48ac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e960:	b910      	cbnz	r0, e968 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    e962:	2000      	movs	r0, #0
    e964:	6020      	str	r0, [r4, #0]
    e966:	80a0      	strh	r0, [r4, #4]
    e968:	2000      	movs	r0, #0
    e96a:	bd10      	pop	{r4, pc}

0000e96c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    e96c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e96e:	8800      	ldrh	r0, [r0, #0]
    e970:	4669      	mov	r1, sp
    e972:	f7fe fa4e 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e976:	b958      	cbnz	r0, e990 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    e978:	4668      	mov	r0, sp
    e97a:	f000 fa5e 	bl	ee3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
    e97e:	b138      	cbz	r0, e990 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    e980:	9c01      	ldr	r4, [sp, #4]
    e982:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    e986:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    e98a:	3470      	adds	r4, #112	; 0x70
    e98c:	b929      	cbnz	r1, e99a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    e98e:	e001      	b.n	e994 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    e990:	2002      	movs	r0, #2
    e992:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e994:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    e998:	b109      	cbz	r1, e99e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    e99a:	203a      	movs	r0, #58	; 0x3a
    e99c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e99e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    e9a2:	f04f 0501 	mov.w	r5, #1
    e9a6:	0789      	lsls	r1, r1, #30
    e9a8:	d103      	bne.n	e9b2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    e9aa:	7005      	strb	r5, [r0, #0]
    e9ac:	4668      	mov	r0, sp
    e9ae:	f7fe fde1 	bl	d574 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e9b2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    e9b6:	2000      	movs	r0, #0
    e9b8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e9ba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    e9ba:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e9bc:	460c      	mov	r4, r1
    e9be:	4605      	mov	r5, r0
    e9c0:	8800      	ldrh	r0, [r0, #0]
    e9c2:	4669      	mov	r1, sp
    e9c4:	f7fe fa25 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9c8:	b108      	cbz	r0, e9ce <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    e9ca:	2002      	movs	r0, #2
    e9cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e9ce:	78a8      	ldrb	r0, [r5, #2]
    e9d0:	b130      	cbz	r0, e9e0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    e9d2:	f000 fa0d 	bl	edf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    e9d6:	70a0      	strb	r0, [r4, #2]
    e9d8:	8828      	ldrh	r0, [r5, #0]
    e9da:	8020      	strh	r0, [r4, #0]
    e9dc:	2000      	movs	r0, #0
    e9de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e9e0:	9801      	ldr	r0, [sp, #4]
    e9e2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    e9e6:	e7f6      	b.n	e9d6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000e9e8 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    e9e8:	b510      	push	{r4, lr}
    e9ea:	f7fb fd6d 	bl	a4c8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    e9ee:	2000      	movs	r0, #0
    e9f0:	bd10      	pop	{r4, pc}

0000e9f2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    e9f2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e9f6:	4604      	mov	r4, r0
    e9f8:	8840      	ldrh	r0, [r0, #2]
    e9fa:	460d      	mov	r5, r1
    e9fc:	b1b0      	cbz	r0, ea2c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    e9fe:	8820      	ldrh	r0, [r4, #0]
    ea00:	4669      	mov	r1, sp
    ea02:	f7fe fa06 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ea06:	2800      	cmp	r0, #0
    ea08:	d10e      	bne.n	ea28 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    ea0a:	8820      	ldrh	r0, [r4, #0]
    ea0c:	8028      	strh	r0, [r5, #0]
    ea0e:	9e01      	ldr	r6, [sp, #4]
    ea10:	1d35      	adds	r5, r6, #4
    ea12:	3670      	adds	r6, #112	; 0x70
    ea14:	682f      	ldr	r7, [r5, #0]
    ea16:	8862      	ldrh	r2, [r4, #2]
    ea18:	4639      	mov	r1, r7
    ea1a:	4630      	mov	r0, r6
    ea1c:	f7fe fb4c 	bl	d0b8 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    ea20:	6828      	ldr	r0, [r5, #0]
    ea22:	42b8      	cmp	r0, r7
    ea24:	d1f6      	bne.n	ea14 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    ea26:	2000      	movs	r0, #0
    ea28:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ea2c:	2012      	movs	r0, #18
    ea2e:	e7fb      	b.n	ea28 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000ea30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    ea30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea34:	b086      	sub	sp, #24
    ea36:	468a      	mov	sl, r1
    ea38:	4606      	mov	r6, r0
    ea3a:	8800      	ldrh	r0, [r0, #0]
    ea3c:	a901      	add	r1, sp, #4
    ea3e:	f7fe f9e8 	bl	ce12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ea42:	2800      	cmp	r0, #0
    ea44:	d138      	bne.n	eab8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ea46:	9802      	ldr	r0, [sp, #8]
    ea48:	f04f 0800 	mov.w	r8, #0
    ea4c:	4601      	mov	r1, r0
    ea4e:	4689      	mov	r9, r1
    ea50:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    ea54:	f88d 1000 	strb.w	r1, [sp]
    ea58:	9900      	ldr	r1, [sp, #0]
    ea5a:	9100      	str	r1, [sp, #0]
    ea5c:	f89d 5000 	ldrb.w	r5, [sp]
    ea60:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    ea64:	3070      	adds	r0, #112	; 0x70
    ea66:	2921      	cmp	r1, #33	; 0x21
    ea68:	d100      	bne.n	ea6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ea6a:	b13d      	cbz	r5, ea7c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ea6c:	2400      	movs	r4, #0
    ea6e:	3044      	adds	r0, #68	; 0x44
    ea70:	2108      	movs	r1, #8
    ea72:	4607      	mov	r7, r0
    ea74:	f7ff fb69 	bl	e14a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ea78:	b110      	cbz	r0, ea80 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ea7a:	e007      	b.n	ea8c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ea7c:	2401      	movs	r4, #1
    ea7e:	e7f6      	b.n	ea6e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ea80:	210b      	movs	r1, #11
    ea82:	4638      	mov	r0, r7
    ea84:	f7ff fb61 	bl	e14a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ea88:	b900      	cbnz	r0, ea8c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ea8a:	b1a4      	cbz	r4, eab6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    ea8c:	a804      	add	r0, sp, #16
    ea8e:	9000      	str	r0, [sp, #0]
    ea90:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ea94:	ab03      	add	r3, sp, #12
    ea96:	4632      	mov	r2, r6
    ea98:	4649      	mov	r1, r9
    ea9a:	f000 f989 	bl	edb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    ea9e:	0007      	movs	r7, r0
    eaa0:	d10a      	bne.n	eab8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    eaa2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eaa6:	9c02      	ldr	r4, [sp, #8]
    eaa8:	b148      	cbz	r0, eabe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    eaaa:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    eaae:	2001      	movs	r0, #1
    eab0:	7060      	strb	r0, [r4, #1]
    eab2:	b94d      	cbnz	r5, eac8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    eab4:	e006      	b.n	eac4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    eab6:	201a      	movs	r0, #26
    eab8:	b006      	add	sp, #24
    eaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eabe:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    eac2:	e7f4      	b.n	eaae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    eac4:	7820      	ldrb	r0, [r4, #0]
    eac6:	b108      	cbz	r0, eacc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    eac8:	273a      	movs	r7, #58	; 0x3a
    eaca:	e012      	b.n	eaf2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    eacc:	f884 a000 	strb.w	sl, [r4]
    ead0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ead4:	70a0      	strb	r0, [r4, #2]
    ead6:	f89d 1010 	ldrb.w	r1, [sp, #16]
    eada:	70e1      	strb	r1, [r4, #3]
    eadc:	f88d 0000 	strb.w	r0, [sp]
    eae0:	f88d 1001 	strb.w	r1, [sp, #1]
    eae4:	88b0      	ldrh	r0, [r6, #4]
    eae6:	f8ad 0002 	strh.w	r0, [sp, #2]
    eaea:	4669      	mov	r1, sp
    eaec:	4648      	mov	r0, r9
    eaee:	f7fe fa4f 	bl	cf90 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    eaf2:	f884 8001 	strb.w	r8, [r4, #1]
    eaf6:	4638      	mov	r0, r7
    eaf8:	e7de      	b.n	eab8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000eafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    eafa:	b510      	push	{r4, lr}
    eafc:	2008      	movs	r0, #8
    eafe:	f7fb fd7b 	bl	a5f8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    eb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb06:	f7f9 bac3 	b.w	8090 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    eb0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    eb0e:	4288      	cmp	r0, r1
    eb10:	d303      	bcc.n	eb1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    eb12:	f640 0148 	movw	r1, #2120	; 0x848
    eb16:	4288      	cmp	r0, r1
    eb18:	d300      	bcc.n	eb1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    eb1a:	4608      	mov	r0, r1
    eb1c:	4770      	bx	lr
    eb1e:	07c1      	lsls	r1, r0, #31
    eb20:	d001      	beq.n	eb26 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    eb22:	2001      	movs	r0, #1
    eb24:	4770      	bx	lr
    eb26:	0780      	lsls	r0, r0, #30
    eb28:	d501      	bpl.n	eb2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    eb2a:	2002      	movs	r0, #2
    eb2c:	4770      	bx	lr
    eb2e:	2000      	movs	r0, #0
    eb30:	4770      	bx	lr
    eb32:	b510      	push	{r4, lr}
    eb34:	2801      	cmp	r0, #1
    eb36:	d006      	beq.n	eb46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    eb38:	2802      	cmp	r0, #2
    eb3a:	d004      	beq.n	eb46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    eb3c:	f240 219d 	movw	r1, #669	; 0x29d
    eb40:	2006      	movs	r0, #6
    eb42:	f7f5 f845 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb46:	bd10      	pop	{r4, pc}
    eb48:	b50e      	push	{r1, r2, r3, lr}
    eb4a:	4669      	mov	r1, sp
    eb4c:	2001      	movs	r0, #1
    eb4e:	f7fe f832 	bl	cbb6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eb52:	b150      	cbz	r0, eb6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    eb54:	f44f 719a 	mov.w	r1, #308	; 0x134
    eb58:	2039      	movs	r0, #57	; 0x39
    eb5a:	f7f5 f839 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb5e:	9802      	ldr	r0, [sp, #8]
    eb60:	f7ff f915 	bl	dd8e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    eb64:	b108      	cbz	r0, eb6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    eb66:	2001      	movs	r0, #1
    eb68:	bd0e      	pop	{r1, r2, r3, pc}
    eb6a:	4668      	mov	r0, sp
    eb6c:	f7f5 fa5e 	bl	402c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eb70:	2800      	cmp	r0, #0
    eb72:	d0f4      	beq.n	eb5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    eb74:	2000      	movs	r0, #0
    eb76:	bd0e      	pop	{r1, r2, r3, pc}
    eb78:	b510      	push	{r4, lr}
    eb7a:	f7ff ffe5 	bl	eb48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    eb7e:	b1a0      	cbz	r0, ebaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    eb80:	2101      	movs	r1, #1
    eb82:	2000      	movs	r0, #0
    eb84:	f7fe f80d 	bl	cba2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eb88:	0004      	movs	r4, r0
    eb8a:	d003      	beq.n	eb94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    eb8c:	f7fe ff32 	bl	d9f4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eb90:	b128      	cbz	r0, eb9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa4>
    eb92:	e008      	b.n	eba6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xac>
    eb94:	f44f 71be 	mov.w	r1, #380	; 0x17c
    eb98:	2039      	movs	r0, #57	; 0x39
    eb9a:	f7f5 f819 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb9e:	4620      	mov	r0, r4
    eba0:	f7fe ff1e 	bl	d9e0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eba4:	b108      	cbz	r0, ebaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    eba6:	2000      	movs	r0, #0
    eba8:	bd10      	pop	{r4, pc}
    ebaa:	2001      	movs	r0, #1
    ebac:	bd10      	pop	{r4, pc}
    ebae:	b570      	push	{r4, r5, r6, lr}
    ebb0:	460d      	mov	r5, r1
    ebb2:	8899      	ldrh	r1, [r3, #4]
    ebb4:	461c      	mov	r4, r3
    ebb6:	194b      	adds	r3, r1, r5
    ebb8:	4293      	cmp	r3, r2
    ebba:	d901      	bls.n	ebc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc6>
    ebbc:	2007      	movs	r0, #7
    ebbe:	bd70      	pop	{r4, r5, r6, pc}
    ebc0:	6822      	ldr	r2, [r4, #0]
    ebc2:	1853      	adds	r3, r2, r1
    ebc4:	4601      	mov	r1, r0
    ebc6:	462a      	mov	r2, r5
    ebc8:	4618      	mov	r0, r3
    ebca:	f7fc ffd8 	bl	bb7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ebce:	88a0      	ldrh	r0, [r4, #4]
    ebd0:	4428      	add	r0, r5
    ebd2:	80a0      	strh	r0, [r4, #4]
    ebd4:	2000      	movs	r0, #0
    ebd6:	bd70      	pop	{r4, r5, r6, pc}
    ebd8:	b570      	push	{r4, r5, r6, lr}
    ebda:	460c      	mov	r4, r1
    ebdc:	4605      	mov	r5, r0
    ebde:	b112      	cbz	r2, ebe6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    ebe0:	291f      	cmp	r1, #31
    ebe2:	d807      	bhi.n	ebf4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfa>
    ebe4:	e011      	b.n	ec0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    ebe6:	2cff      	cmp	r4, #255	; 0xff
    ebe8:	d804      	bhi.n	ebf4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfa>
    ebea:	f7fe ff01 	bl	d9f0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ebee:	b118      	cbz	r0, ebf8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    ebf0:	2c1f      	cmp	r4, #31
    ebf2:	d901      	bls.n	ebf8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    ebf4:	2012      	movs	r0, #18
    ebf6:	bd70      	pop	{r4, r5, r6, pc}
    ebf8:	4628      	mov	r0, r5
    ebfa:	f7fe ff02 	bl	da02 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ebfe:	b130      	cbz	r0, ec0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x114>
    ec00:	4621      	mov	r1, r4
    ec02:	4628      	mov	r0, r5
    ec04:	f7fe fed2 	bl	d9ac <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    ec08:	b118      	cbz	r0, ec12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x118>
    ec0a:	2000      	movs	r0, #0
    ec0c:	bd70      	pop	{r4, r5, r6, pc}
    ec0e:	2042      	movs	r0, #66	; 0x42
    ec10:	bd70      	pop	{r4, r5, r6, pc}
    ec12:	2045      	movs	r0, #69	; 0x45
    ec14:	bd70      	pop	{r4, r5, r6, pc}
    ec16:	b510      	push	{r4, lr}
    ec18:	4604      	mov	r4, r0
    ec1a:	7840      	ldrb	r0, [r0, #1]
    ec1c:	06c1      	lsls	r1, r0, #27
    ec1e:	d512      	bpl.n	ec46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    ec20:	07c0      	lsls	r0, r0, #31
    ec22:	d00b      	beq.n	ec3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    ec24:	f7fb fc8e 	bl	a544 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    ec28:	b168      	cbz	r0, ec46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    ec2a:	7860      	ldrb	r0, [r4, #1]
    ec2c:	06c1      	lsls	r1, r0, #27
    ec2e:	d405      	bmi.n	ec3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    ec30:	0700      	lsls	r0, r0, #28
    ec32:	d503      	bpl.n	ec3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    ec34:	7d20      	ldrb	r0, [r4, #20]
    ec36:	2802      	cmp	r0, #2
    ec38:	d105      	bne.n	ec46 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    ec3a:	e006      	b.n	ec4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    ec3c:	7d20      	ldrb	r0, [r4, #20]
    ec3e:	2802      	cmp	r0, #2
    ec40:	d003      	beq.n	ec4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    ec42:	7ea0      	ldrb	r0, [r4, #26]
    ec44:	b108      	cbz	r0, ec4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    ec46:	2011      	movs	r0, #17
    ec48:	bd10      	pop	{r4, pc}
    ec4a:	2000      	movs	r0, #0
    ec4c:	bd10      	pop	{r4, pc}
    ec4e:	b538      	push	{r3, r4, r5, lr}
    ec50:	4604      	mov	r4, r0
    ec52:	7800      	ldrb	r0, [r0, #0]
    ec54:	28ef      	cmp	r0, #239	; 0xef
    ec56:	d847      	bhi.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ec58:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ec5c:	f8ad 0000 	strh.w	r0, [sp]
    ec60:	9800      	ldr	r0, [sp, #0]
    ec62:	f000 f939 	bl	eed8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    ec66:	b3c0      	cbz	r0, ecda <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    ec68:	7861      	ldrb	r1, [r4, #1]
    ec6a:	0708      	lsls	r0, r1, #28
    ec6c:	d40f      	bmi.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x194>
    ec6e:	f8d4 2002 	ldr.w	r2, [r4, #2]
    ec72:	f8d4 0005 	ldr.w	r0, [r4, #5]
    ec76:	0a13      	lsrs	r3, r2, #8
    ec78:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    ec7c:	d834      	bhi.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ec7e:	2320      	movs	r3, #32
    ec80:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    ec84:	d830      	bhi.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ec86:	025a      	lsls	r2, r3, #9
    ec88:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    ec8c:	d32c      	bcc.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ec8e:	7a60      	ldrb	r0, [r4, #9]
    ec90:	b318      	cbz	r0, ecda <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    ec92:	2807      	cmp	r0, #7
    ec94:	d828      	bhi.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ec96:	7aa0      	ldrb	r0, [r4, #10]
    ec98:	b128      	cbz	r0, eca6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ec9a:	2801      	cmp	r0, #1
    ec9c:	d003      	beq.n	eca6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ec9e:	2802      	cmp	r0, #2
    eca0:	d001      	beq.n	eca6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    eca2:	2803      	cmp	r0, #3
    eca4:	d120      	bne.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    eca6:	074a      	lsls	r2, r1, #29
    eca8:	d403      	bmi.n	ecb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b8>
    ecaa:	2802      	cmp	r0, #2
    ecac:	d001      	beq.n	ecb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b8>
    ecae:	2803      	cmp	r0, #3
    ecb0:	d105      	bne.n	ecbe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c4>
    ecb2:	7ae0      	ldrb	r0, [r4, #11]
    ecb4:	b108      	cbz	r0, ecba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    ecb6:	2801      	cmp	r0, #1
    ecb8:	d116      	bne.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ecba:	0748      	lsls	r0, r1, #29
    ecbc:	d407      	bmi.n	ecce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    ecbe:	7ca0      	ldrb	r0, [r4, #18]
    ecc0:	b128      	cbz	r0, ecce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    ecc2:	2801      	cmp	r0, #1
    ecc4:	d003      	beq.n	ecce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    ecc6:	2802      	cmp	r0, #2
    ecc8:	d001      	beq.n	ecce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    ecca:	2803      	cmp	r0, #3
    eccc:	d10c      	bne.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ecce:	06c8      	lsls	r0, r1, #27
    ecd0:	7d20      	ldrb	r0, [r4, #20]
    ecd2:	d503      	bpl.n	ecdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    ecd4:	2801      	cmp	r0, #1
    ecd6:	d107      	bne.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ecd8:	e002      	b.n	ece0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    ecda:	e005      	b.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ecdc:	2802      	cmp	r0, #2
    ecde:	d003      	beq.n	ece8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    ece0:	7e20      	ldrb	r0, [r4, #24]
    ece2:	b118      	cbz	r0, ecec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    ece4:	2801      	cmp	r0, #1
    ece6:	d001      	beq.n	ecec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    ece8:	2012      	movs	r0, #18
    ecea:	bd38      	pop	{r3, r4, r5, pc}
    ecec:	2000      	movs	r0, #0
    ecee:	bd38      	pop	{r3, r4, r5, pc}
    ecf0:	b510      	push	{r4, lr}
    ecf2:	0004      	movs	r4, r0
    ecf4:	d005      	beq.n	ed02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x208>
    ecf6:	f7fb fc8f 	bl	a618 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ecfa:	4384      	bics	r4, r0
    ecfc:	d001      	beq.n	ed02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x208>
    ecfe:	2000      	movs	r0, #0
    ed00:	bd10      	pop	{r4, pc}
    ed02:	2001      	movs	r0, #1
    ed04:	bd10      	pop	{r4, pc}
    ed06:	28fb      	cmp	r0, #251	; 0xfb
    ed08:	d803      	bhi.n	ed12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x218>
    ed0a:	f640 0048 	movw	r0, #2120	; 0x848
    ed0e:	4281      	cmp	r1, r0
    ed10:	d901      	bls.n	ed16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x21c>
    ed12:	2011      	movs	r0, #17
    ed14:	4770      	bx	lr
    ed16:	2000      	movs	r0, #0
    ed18:	4770      	bx	lr
    ed1a:	381b      	subs	r0, #27
    ed1c:	28e1      	cmp	r0, #225	; 0xe1
    ed1e:	d206      	bcs.n	ed2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x234>
    ed20:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    ed24:	d303      	bcc.n	ed2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x234>
    ed26:	f244 2090 	movw	r0, #17040	; 0x4290
    ed2a:	4281      	cmp	r1, r0
    ed2c:	d901      	bls.n	ed32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x238>
    ed2e:	2012      	movs	r0, #18
    ed30:	4770      	bx	lr
    ed32:	2000      	movs	r0, #0
    ed34:	4770      	bx	lr
    ed36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed3a:	4606      	mov	r6, r0
    ed3c:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
    ed40:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
    ed44:	4615      	mov	r5, r2
    ed46:	3028      	adds	r0, #40	; 0x28
    ed48:	f7f8 f94e 	bl	6fe8 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    ed4c:	4680      	mov	r8, r0
    ed4e:	2102      	movs	r1, #2
    ed50:	f7fe f8ef 	bl	cf32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ed54:	4287      	cmp	r7, r0
    ed56:	d200      	bcs.n	ed5a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x260>
    ed58:	4638      	mov	r0, r7
    ed5a:	4607      	mov	r7, r0
    ed5c:	2102      	movs	r1, #2
    ed5e:	4640      	mov	r0, r8
    ed60:	f7fe f8e7 	bl	cf32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ed64:	4284      	cmp	r4, r0
    ed66:	d200      	bcs.n	ed6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x270>
    ed68:	4620      	mov	r0, r4
    ed6a:	8831      	ldrh	r1, [r6, #0]
    ed6c:	8029      	strh	r1, [r5, #0]
    ed6e:	2f1b      	cmp	r7, #27
    ed70:	d913      	bls.n	ed9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
    ed72:	2ffb      	cmp	r7, #251	; 0xfb
    ed74:	d300      	bcc.n	ed78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    ed76:	27fb      	movs	r7, #251	; 0xfb
    ed78:	806f      	strh	r7, [r5, #2]
    ed7a:	281b      	cmp	r0, #27
    ed7c:	d90f      	bls.n	ed9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    ed7e:	28fb      	cmp	r0, #251	; 0xfb
    ed80:	d300      	bcc.n	ed84 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28a>
    ed82:	20fb      	movs	r0, #251	; 0xfb
    ed84:	80e8      	strh	r0, [r5, #6]
    ed86:	4640      	mov	r0, r8
    ed88:	f7ff febf 	bl	eb0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    ed8c:	80a8      	strh	r0, [r5, #4]
    ed8e:	4640      	mov	r0, r8
    ed90:	f7ff febb 	bl	eb0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    ed94:	8128      	strh	r0, [r5, #8]
    ed96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed9a:	271b      	movs	r7, #27
    ed9c:	e7ec      	b.n	ed78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    ed9e:	201b      	movs	r0, #27
    eda0:	e7f0      	b.n	ed84 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28a>
    eda2:	b510      	push	{r4, lr}
    eda4:	f7ff fed0 	bl	eb48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    eda8:	2800      	cmp	r0, #0
    edaa:	d000      	beq.n	edae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b4>
    edac:	2001      	movs	r0, #1
    edae:	bd10      	pop	{r4, pc}
    edb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    edb4:	7890      	ldrb	r0, [r2, #2]
    edb6:	9e06      	ldr	r6, [sp, #24]
    edb8:	461d      	mov	r5, r3
    edba:	4614      	mov	r4, r2
    edbc:	b908      	cbnz	r0, edc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
    edbe:	f7fb fc2b 	bl	a618 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    edc2:	78e4      	ldrb	r4, [r4, #3]
    edc4:	4607      	mov	r7, r0
    edc6:	b914      	cbnz	r4, edce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d4>
    edc8:	f7fb fc26 	bl	a618 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    edcc:	4604      	mov	r4, r0
    edce:	b16f      	cbz	r7, edec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    edd0:	b164      	cbz	r4, edec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    edd2:	4638      	mov	r0, r7
    edd4:	f7ff fea3 	bl	eb1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    edd8:	4620      	mov	r0, r4
    edda:	f7ff fea0 	bl	eb1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    edde:	b12f      	cbz	r7, edec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    ede0:	b124      	cbz	r4, edec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    ede2:	702f      	strb	r7, [r5, #0]
    ede4:	7034      	strb	r4, [r6, #0]
    ede6:	2000      	movs	r0, #0
    ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edec:	2009      	movs	r0, #9
    edee:	e7fb      	b.n	ede8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ee>
    edf0:	b510      	push	{r4, lr}
    edf2:	f7fc fe68 	bl	bac6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    edf6:	b928      	cbnz	r0, ee04 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30a>
    edf8:	f7fc fe9b 	bl	bb32 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    edfc:	b910      	cbnz	r0, ee04 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30a>
    edfe:	f7fc fea2 	bl	bb46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ee02:	b108      	cbz	r0, ee08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    ee04:	2008      	movs	r0, #8
    ee06:	bd10      	pop	{r4, pc}
    ee08:	f7fc fe32 	bl	ba70 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ee0c:	b940      	cbnz	r0, ee20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    ee0e:	f7fc fe39 	bl	ba84 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ee12:	b928      	cbnz	r0, ee20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    ee14:	f7fc fe4d 	bl	bab2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ee18:	b910      	cbnz	r0, ee20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    ee1a:	f7fc fe5e 	bl	bada <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ee1e:	b108      	cbz	r0, ee24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32a>
    ee20:	2004      	movs	r0, #4
    ee22:	bd10      	pop	{r4, pc}
    ee24:	f240 51b4 	movw	r1, #1460	; 0x5b4
    ee28:	2039      	movs	r0, #57	; 0x39
    ee2a:	f7f4 fed1 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee2e:	b510      	push	{r4, lr}
    ee30:	f7fb fbec 	bl	a60c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ee34:	f3c0 1040 	ubfx	r0, r0, #5, #1
    ee38:	bd10      	pop	{r4, pc}
    ee3a:	6840      	ldr	r0, [r0, #4]
    ee3c:	f000 b800 	b.w	ee40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x346>
    ee40:	b508      	push	{r3, lr}
    ee42:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    ee46:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    ee4a:	f88d 0000 	strb.w	r0, [sp]
    ee4e:	9800      	ldr	r0, [sp, #0]
    ee50:	9000      	str	r0, [sp, #0]
    ee52:	f89d 0000 	ldrb.w	r0, [sp]
    ee56:	1e40      	subs	r0, r0, #1
    ee58:	4208      	tst	r0, r1
    ee5a:	d003      	beq.n	ee64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36a>
    ee5c:	2904      	cmp	r1, #4
    ee5e:	d001      	beq.n	ee64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36a>
    ee60:	2001      	movs	r0, #1
    ee62:	bd08      	pop	{r3, pc}
    ee64:	2000      	movs	r0, #0
    ee66:	bd08      	pop	{r3, pc}
    ee68:	b570      	push	{r4, r5, r6, lr}
    ee6a:	4605      	mov	r5, r0
    ee6c:	f7fe fdc9 	bl	da02 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ee70:	b148      	cbz	r0, ee86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    ee72:	4628      	mov	r0, r5
    ee74:	f7fe ff88 	bl	dd88 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    ee78:	4604      	mov	r4, r0
    ee7a:	4628      	mov	r0, r5
    ee7c:	f7fe ff59 	bl	dd32 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    ee80:	b118      	cbz	r0, ee8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x390>
    ee82:	200c      	movs	r0, #12
    ee84:	bd70      	pop	{r4, r5, r6, pc}
    ee86:	2042      	movs	r0, #66	; 0x42
    ee88:	bd70      	pop	{r4, r5, r6, pc}
    ee8a:	b164      	cbz	r4, eea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ac>
    ee8c:	8820      	ldrh	r0, [r4, #0]
    ee8e:	f7fd feed 	bl	cc6c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ee92:	8820      	ldrh	r0, [r4, #0]
    ee94:	2100      	movs	r1, #0
    ee96:	f7f5 f919 	bl	40cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ee9a:	b120      	cbz	r0, eea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ac>
    ee9c:	f241 417b 	movw	r1, #5243	; 0x147b
    eea0:	2039      	movs	r0, #57	; 0x39
    eea2:	f7f4 fe95 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eea6:	2000      	movs	r0, #0
    eea8:	bd70      	pop	{r4, r5, r6, pc}
    eeaa:	b530      	push	{r4, r5, lr}
    eeac:	f340 0400 	sbfx	r4, r0, #0, #1
    eeb0:	f340 0040 	sbfx	r0, r0, #1, #1
    eeb4:	1c40      	adds	r0, r0, #1
    eeb6:	9d03      	ldr	r5, [sp, #12]
    eeb8:	1c64      	adds	r4, r4, #1
    eeba:	d000      	beq.n	eebe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c4>
    eebc:	b119      	cbz	r1, eec6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3cc>
    eebe:	b100      	cbz	r0, eec2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c8>
    eec0:	b10a      	cbz	r2, eec6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3cc>
    eec2:	b91c      	cbnz	r4, eecc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d2>
    eec4:	e001      	b.n	eeca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d0>
    eec6:	2011      	movs	r0, #17
    eec8:	bd30      	pop	{r4, r5, pc}
    eeca:	2100      	movs	r1, #0
    eecc:	7019      	strb	r1, [r3, #0]
    eece:	b900      	cbnz	r0, eed2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    eed0:	2200      	movs	r2, #0
    eed2:	702a      	strb	r2, [r5, #0]
    eed4:	2000      	movs	r0, #0
    eed6:	bd30      	pop	{r4, r5, pc}
    eed8:	b2c0      	uxtb	r0, r0
    eeda:	06c1      	lsls	r1, r0, #27
    eedc:	d40c      	bmi.n	eef8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fe>
    eede:	0681      	lsls	r1, r0, #26
    eee0:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    eee4:	d503      	bpl.n	eeee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    eee6:	b9d1      	cbnz	r1, ef1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    eee8:	0781      	lsls	r1, r0, #30
    eeea:	d418      	bmi.n	ef1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    eeec:	e001      	b.n	eef2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    eeee:	2900      	cmp	r1, #0
    eef0:	d1fa      	bne.n	eee8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ee>
    eef2:	0700      	lsls	r0, r0, #28
    eef4:	d413      	bmi.n	ef1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    eef6:	e010      	b.n	ef1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    eef8:	0641      	lsls	r1, r0, #25
    eefa:	d410      	bmi.n	ef1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    eefc:	0681      	lsls	r1, r0, #26
    eefe:	d40e      	bmi.n	ef1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    ef00:	07c1      	lsls	r1, r0, #31
    ef02:	ea4f 7180 	mov.w	r1, r0, lsl #30
    ef06:	d004      	beq.n	ef12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x418>
    ef08:	2900      	cmp	r1, #0
    ef0a:	db02      	blt.n	ef12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x418>
    ef0c:	0740      	lsls	r0, r0, #29
    ef0e:	d404      	bmi.n	ef1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    ef10:	e005      	b.n	ef1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    ef12:	0701      	lsls	r1, r0, #28
    ef14:	d403      	bmi.n	ef1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    ef16:	0740      	lsls	r0, r0, #29
    ef18:	d401      	bmi.n	ef1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    ef1a:	2001      	movs	r0, #1
    ef1c:	4770      	bx	lr
    ef1e:	2000      	movs	r0, #0
    ef20:	4770      	bx	lr
    ef22:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ef24:	4669      	mov	r1, sp
    ef26:	2001      	movs	r0, #1
    ef28:	f7fd fe45 	bl	cbb6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ef2c:	b178      	cbz	r0, ef4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    ef2e:	f44f 71a9 	mov.w	r1, #338	; 0x152
    ef32:	2039      	movs	r0, #57	; 0x39
    ef34:	f7f4 fe4c 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef38:	9c02      	ldr	r4, [sp, #8]
    ef3a:	4620      	mov	r0, r4
    ef3c:	f7fe ff27 	bl	dd8e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ef40:	b128      	cbz	r0, ef4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    ef42:	4620      	mov	r0, r4
    ef44:	f7fe fd9a 	bl	da7c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    ef48:	b108      	cbz	r0, ef4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    ef4a:	2001      	movs	r0, #1
    ef4c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ef4e:	4668      	mov	r0, sp
    ef50:	f7f5 f86c 	bl	402c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ef54:	2800      	cmp	r0, #0
    ef56:	d0ef      	beq.n	ef38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43e>
    ef58:	2000      	movs	r0, #0
    ef5a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ef5c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    ef5c:	6802      	ldr	r2, [r0, #0]
    ef5e:	b912      	cbnz	r2, ef66 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    ef60:	6001      	str	r1, [r0, #0]
    ef62:	4770      	bx	lr
    ef64:	4602      	mov	r2, r0
    ef66:	6850      	ldr	r0, [r2, #4]
    ef68:	b108      	cbz	r0, ef6e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    ef6a:	428a      	cmp	r2, r1
    ef6c:	d1fa      	bne.n	ef64 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    ef6e:	428a      	cmp	r2, r1
    ef70:	d0f7      	beq.n	ef62 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    ef72:	6051      	str	r1, [r2, #4]
    ef74:	4770      	bx	lr
    ef76:	b510      	push	{r4, lr}
    ef78:	f7fe ff0f 	bl	dd9a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    ef7c:	b108      	cbz	r0, ef82 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    ef7e:	21ea      	movs	r1, #234	; 0xea
    ef80:	e004      	b.n	ef8c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x30>
    ef82:	f7f7 f9cd 	bl	6320 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ef86:	2800      	cmp	r0, #0
    ef88:	d003      	beq.n	ef92 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x36>
    ef8a:	21ef      	movs	r1, #239	; 0xef
    ef8c:	2001      	movs	r0, #1
    ef8e:	f7f4 fe1f 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef92:	bd10      	pop	{r4, pc}
    ef94:	b50e      	push	{r1, r2, r3, lr}
    ef96:	4669      	mov	r1, sp
    ef98:	2000      	movs	r0, #0
    ef9a:	f7fd fe0c 	bl	cbb6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ef9e:	b158      	cbz	r0, efb8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    efa0:	21a0      	movs	r1, #160	; 0xa0
    efa2:	e006      	b.n	efb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x56>
    efa4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    efa8:	2100      	movs	r1, #0
    efaa:	f7f5 f88f 	bl	40cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    efae:	b118      	cbz	r0, efb8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    efb0:	21a4      	movs	r1, #164	; 0xa4
    efb2:	2001      	movs	r0, #1
    efb4:	f7f4 fe0c 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efb8:	4668      	mov	r0, sp
    efba:	f7f5 f837 	bl	402c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    efbe:	2800      	cmp	r0, #0
    efc0:	d0f0      	beq.n	efa4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x48>
    efc2:	bd0e      	pop	{r1, r2, r3, pc}
    efc4:	b510      	push	{r4, lr}
    efc6:	4604      	mov	r4, r0
    efc8:	e002      	b.n	efd0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x74>
    efca:	6820      	ldr	r0, [r4, #0]
    efcc:	4780      	blx	r0
    efce:	6864      	ldr	r4, [r4, #4]
    efd0:	2c00      	cmp	r4, #0
    efd2:	d1fa      	bne.n	efca <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6e>
    efd4:	bd10      	pop	{r4, pc}
    efd6:	b510      	push	{r4, lr}
    efd8:	f7ff ffdc 	bl	ef94 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    efdc:	f7f5 f9f4 	bl	43c8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    efe0:	f7f5 fc46 	bl	4870 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    efe4:	f7f5 fe10 	bl	4c08 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    efe8:	2800      	cmp	r0, #0
    efea:	d003      	beq.n	eff4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    efec:	21c4      	movs	r1, #196	; 0xc4
    efee:	2001      	movs	r0, #1
    eff0:	f7f4 fdee 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eff4:	bd10      	pop	{r4, pc}
    eff6:	b510      	push	{r4, lr}
    eff8:	f7ff ffbd 	bl	ef76 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    effc:	f7ff f865 	bl	e0ca <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    f000:	2800      	cmp	r0, #0
    f002:	d004      	beq.n	f00e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xb2>
    f004:	f44f 7183 	mov.w	r1, #262	; 0x106
    f008:	2001      	movs	r0, #1
    f00a:	f7f4 fde1 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f00e:	bd10      	pop	{r4, pc}

0000f010 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f010:	b510      	push	{r4, lr}
    f012:	f7fb fe7d 	bl	ad10 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f016:	f000 f844 	bl	f0a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f01a:	f7fb fb51 	bl	a6c0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f022:	f7fb bc47 	b.w	a8b4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f026 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f026:	b510      	push	{r4, lr}
    f028:	24c8      	movs	r4, #200	; 0xc8
    f02a:	1e64      	subs	r4, r4, #1
    f02c:	b2e4      	uxtb	r4, r4
    f02e:	f7fb fb65 	bl	a6fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f032:	2802      	cmp	r0, #2
    f034:	d003      	beq.n	f03e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f036:	2801      	cmp	r0, #1
    f038:	d000      	beq.n	f03c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f03a:	2000      	movs	r0, #0
    f03c:	bd10      	pop	{r4, pc}
    f03e:	2c00      	cmp	r4, #0
    f040:	d1f3      	bne.n	f02a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f042:	218f      	movs	r1, #143	; 0x8f
    f044:	203b      	movs	r0, #59	; 0x3b
    f046:	f7f4 fdc3 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f04a <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f04a:	b510      	push	{r4, lr}
    f04c:	f7f4 fcae 	bl	39ac <mpsl_fem_lna_configuration_clear>
    f050:	2800      	cmp	r0, #0
    f052:	d005      	beq.n	f060 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f054:	1c40      	adds	r0, r0, #1
    f056:	d003      	beq.n	f060 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f058:	214a      	movs	r1, #74	; 0x4a
    f05a:	2040      	movs	r0, #64	; 0x40
    f05c:	f7f4 fdb8 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f060:	bd10      	pop	{r4, pc}

0000f062 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f062:	b510      	push	{r4, lr}
    f064:	f7f4 fcae 	bl	39c4 <mpsl_fem_pa_configuration_clear>
    f068:	2800      	cmp	r0, #0
    f06a:	d005      	beq.n	f078 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f06c:	1c40      	adds	r0, r0, #1
    f06e:	d003      	beq.n	f078 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f070:	2143      	movs	r1, #67	; 0x43
    f072:	2040      	movs	r0, #64	; 0x40
    f074:	f7f4 fdac 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f078:	bd10      	pop	{r4, pc}

0000f07a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f07a:	b510      	push	{r4, lr}
    f07c:	2100      	movs	r1, #0
    f07e:	4608      	mov	r0, r1
    f080:	f7f4 fc9a 	bl	39b8 <mpsl_fem_lna_configuration_set>
    f084:	b108      	cbz	r0, f08a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f086:	2000      	movs	r0, #0
    f088:	bd10      	pop	{r4, pc}
    f08a:	2001      	movs	r0, #1
    f08c:	bd10      	pop	{r4, pc}

0000f08e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f08e:	b508      	push	{r3, lr}
    f090:	4668      	mov	r0, sp
    f092:	f7f4 fca3 	bl	39dc <mpsl_fem_pa_is_configured>
    f096:	f89d 0000 	ldrb.w	r0, [sp]
    f09a:	2800      	cmp	r0, #0
    f09c:	d000      	beq.n	f0a0 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f09e:	2001      	movs	r0, #1
    f0a0:	bd08      	pop	{r3, pc}

0000f0a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f0a2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f0a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f0aa:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f0ae:	f3bf 8f4f 	dsb	sy
    f0b2:	f3bf 8f6f 	isb	sy
    f0b6:	f7fb bc7f 	b.w	a9b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f0ba:	2800      	cmp	r0, #0
    f0bc:	db09      	blt.n	f0d2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f0be:	f000 021f 	and.w	r2, r0, #31
    f0c2:	2101      	movs	r1, #1
    f0c4:	4091      	lsls	r1, r2
    f0c6:	0940      	lsrs	r0, r0, #5
    f0c8:	0080      	lsls	r0, r0, #2
    f0ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f0ce:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f0d2:	4770      	bx	lr
    f0d4:	2800      	cmp	r0, #0
    f0d6:	db0d      	blt.n	f0f4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f0d8:	f000 021f 	and.w	r2, r0, #31
    f0dc:	2101      	movs	r1, #1
    f0de:	4091      	lsls	r1, r2
    f0e0:	0940      	lsrs	r0, r0, #5
    f0e2:	0080      	lsls	r0, r0, #2
    f0e4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f0e8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f0ec:	f3bf 8f4f 	dsb	sy
    f0f0:	f3bf 8f6f 	isb	sy
    f0f4:	4770      	bx	lr

0000f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f0f6:	b510      	push	{r4, lr}
    f0f8:	2801      	cmp	r0, #1
    f0fa:	d006      	beq.n	f10a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f0fc:	2802      	cmp	r0, #2
    f0fe:	d006      	beq.n	f10e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f100:	f640 31a9 	movw	r1, #2985	; 0xba9
    f104:	203e      	movs	r0, #62	; 0x3e
    f106:	f7f4 fd63 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f10a:	2028      	movs	r0, #40	; 0x28
    f10c:	bd10      	pop	{r4, pc}
    f10e:	2018      	movs	r0, #24
    f110:	bd10      	pop	{r4, pc}

0000f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f112:	b510      	push	{r4, lr}
    f114:	2801      	cmp	r0, #1
    f116:	d006      	beq.n	f126 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f118:	2802      	cmp	r0, #2
    f11a:	d007      	beq.n	f12c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f11c:	f640 31bd 	movw	r1, #3005	; 0xbbd
    f120:	203e      	movs	r0, #62	; 0x3e
    f122:	f7f4 fd55 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f126:	f641 6014 	movw	r0, #7700	; 0x1e14
    f12a:	bd10      	pop	{r4, pc}
    f12c:	f241 1030 	movw	r0, #4400	; 0x1130
    f130:	bd10      	pop	{r4, pc}

0000f132 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f132:	f7fc bb61 	b.w	b7f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48c>
    f136:	b510      	push	{r4, lr}
    f138:	460a      	mov	r2, r1
    f13a:	b130      	cbz	r0, f14a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f13c:	2801      	cmp	r0, #1
    f13e:	d00b      	beq.n	f158 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f140:	f240 612f 	movw	r1, #1583	; 0x62f
    f144:	203e      	movs	r0, #62	; 0x3e
    f146:	f7f4 fd43 	bl	3bd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f14e:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f152:	4610      	mov	r0, r2
    f154:	f7fb bb26 	b.w	a7a4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f15c:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f160:	4610      	mov	r0, r2
    f162:	f7fb bb09 	b.w	a778 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f166 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f166:	b570      	push	{r4, r5, r6, lr}
    f168:	4605      	mov	r5, r0
    f16a:	4614      	mov	r4, r2
    f16c:	4608      	mov	r0, r1
    f16e:	f7ff ffd0 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f172:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f176:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f17a:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f17e:	4620      	mov	r0, r4
    f180:	f7ff ffc7 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f184:	4428      	add	r0, r5
    f186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f18a:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f18e:	fbb0 f5f1 	udiv	r5, r0, r1
    f192:	4620      	mov	r0, r4
    f194:	f7ff ffaf 	bl	f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f198:	4428      	add	r0, r5
    f19a:	1d40      	adds	r0, r0, #5
    f19c:	bd70      	pop	{r4, r5, r6, pc}

0000f19e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1a2:	4607      	mov	r7, r0
    f1a4:	461d      	mov	r5, r3
    f1a6:	460e      	mov	r6, r1
    f1a8:	4614      	mov	r4, r2
    f1aa:	4610      	mov	r0, r2
    f1ac:	f7ff ffb1 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1b0:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f1b4:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f1b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f1bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f1c0:	2e02      	cmp	r6, #2
    f1c2:	d00e      	beq.n	f1e2 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f1c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f1c8:	4411      	add	r1, r2
    f1ca:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f1ce:	fbb1 f6f0 	udiv	r6, r1, r0
    f1d2:	4620      	mov	r0, r4
    f1d4:	f7ff ff8f 	bl	f0f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f1d8:	4430      	add	r0, r6
    f1da:	4428      	add	r0, r5
    f1dc:	1d40      	adds	r0, r0, #5
    f1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1e2:	4602      	mov	r2, r0
    f1e4:	e7f0      	b.n	f1c8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f1e6 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f1e6:	b510      	push	{r4, lr}
    f1e8:	4604      	mov	r4, r0
    f1ea:	4608      	mov	r0, r1
    f1ec:	f7ff ff91 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f1f4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f1f8:	fbb0 f0f1 	udiv	r0, r0, r1
    f1fc:	1a20      	subs	r0, r4, r0
    f1fe:	1e80      	subs	r0, r0, #2
    f200:	bd10      	pop	{r4, pc}

0000f202 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f202:	b510      	push	{r4, lr}
    f204:	4604      	mov	r4, r0
    f206:	4608      	mov	r0, r1
    f208:	f7ff ff83 	bl	f112 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f20c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f210:	fbb0 f0f1 	udiv	r0, r0, r1
    f214:	1a20      	subs	r0, r4, r0
    f216:	bd10      	pop	{r4, pc}

0000f218 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f21c:	2902      	cmp	r1, #2
    f21e:	d008      	beq.n	f232 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f220:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f224:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f228:	fbb1 f1f2 	udiv	r1, r1, r2
    f22c:	4408      	add	r0, r1
    f22e:	1e80      	subs	r0, r0, #2
    f230:	4770      	bx	lr
    f232:	4611      	mov	r1, r2
    f234:	e7f6      	b.n	f224 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f236 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f236:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f23a:	2902      	cmp	r1, #2
    f23c:	d007      	beq.n	f24e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f23e:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f242:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f246:	fbb1 f1f2 	udiv	r1, r1, r2
    f24a:	4408      	add	r0, r1
    f24c:	4770      	bx	lr
    f24e:	4611      	mov	r1, r2
    f250:	e7f7      	b.n	f242 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f252:	080c      	.short	0x080c
    f254:	010d1702 	.word	0x010d1702
    f258:	09090201 	.word	0x09090201
    f25c:	02060101 	.word	0x02060101
    f260:	03181809 	.word	0x03181809
    f264:	09090101 	.word	0x09090101
    f268:	00050303 	.word	0x00050303
    f26c:	00000000 	.word	0x00000000

0000f270 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    f270:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f272:	4d43      	ldr	r5, [pc, #268]	; (f380 <hci_init+0x110>)
    f274:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    f278:	6899      	ldr	r1, [r3, #8]
    f27a:	f011 0101 	ands.w	r1, r1, #1
{
    f27e:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f280:	d121      	bne.n	f2c6 <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f282:	aa03      	add	r2, sp, #12
    f284:	f640 4003 	movw	r0, #3075	; 0xc03
    f288:	f003 fee0 	bl	1304c <bt_hci_cmd_send_sync>
		if (err) {
    f28c:	4604      	mov	r4, r0
    f28e:	2800      	cmp	r0, #0
    f290:	d173      	bne.n	f37a <hci_init+0x10a>
		hci_reset_complete(rsp);
    f292:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
    f294:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f296:	781b      	ldrb	r3, [r3, #0]
    f298:	b993      	cbnz	r3, f2c0 <hci_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f29a:	f3bf 8f5b 	dmb	ish
    f29e:	462b      	mov	r3, r5
    f2a0:	f853 2f98 	ldr.w	r2, [r3, #152]!
    f2a4:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f2a8:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f2ac:	f3bf 8f5b 	dmb	ish
    f2b0:	e853 1f00 	ldrex	r1, [r3]
    f2b4:	e843 2000 	strex	r0, r2, [r3]
    f2b8:	2800      	cmp	r0, #0
    f2ba:	d1f9      	bne.n	f2b0 <hci_init+0x40>
    f2bc:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    f2c0:	9803      	ldr	r0, [sp, #12]
    f2c2:	f009 fdaf 	bl	18e24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f2c6:	aa03      	add	r2, sp, #12
    f2c8:	2100      	movs	r1, #0
    f2ca:	f241 0003 	movw	r0, #4099	; 0x1003
    f2ce:	f003 febd 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f2d2:	4604      	mov	r4, r0
    f2d4:	2800      	cmp	r0, #0
    f2d6:	d150      	bne.n	f37a <hci_init+0x10a>
	read_local_features_complete(rsp);
    f2d8:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f2da:	482a      	ldr	r0, [pc, #168]	; (f384 <hci_init+0x114>)
    f2dc:	6899      	ldr	r1, [r3, #8]
    f2de:	2208      	movs	r2, #8
    f2e0:	3101      	adds	r1, #1
    f2e2:	f00e fa69 	bl	1d7b8 <memcpy>
	net_buf_unref(rsp);
    f2e6:	9803      	ldr	r0, [sp, #12]
    f2e8:	f009 fd9c 	bl	18e24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f2ec:	4621      	mov	r1, r4
    f2ee:	aa03      	add	r2, sp, #12
    f2f0:	f241 0001 	movw	r0, #4097	; 0x1001
    f2f4:	f003 feaa 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f2f8:	4604      	mov	r4, r0
    f2fa:	2800      	cmp	r0, #0
    f2fc:	d13d      	bne.n	f37a <hci_init+0x10a>
	read_local_ver_complete(rsp);
    f2fe:	9803      	ldr	r0, [sp, #12]
    f300:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f302:	785a      	ldrb	r2, [r3, #1]
    f304:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f308:	78d9      	ldrb	r1, [r3, #3]
    f30a:	789a      	ldrb	r2, [r3, #2]
    f30c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f310:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    f312:	791a      	ldrb	r2, [r3, #4]
    f314:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f318:	7a19      	ldrb	r1, [r3, #8]
    f31a:	79da      	ldrb	r2, [r3, #7]
    f31c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f320:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f322:	795a      	ldrb	r2, [r3, #5]
    f324:	799b      	ldrb	r3, [r3, #6]
    f326:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f32a:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    f32c:	f009 fd7a 	bl	18e24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f330:	4621      	mov	r1, r4
    f332:	aa03      	add	r2, sp, #12
    f334:	f241 0002 	movw	r0, #4098	; 0x1002
    f338:	f003 fe88 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f33c:	4604      	mov	r4, r0
    f33e:	b9e0      	cbnz	r0, f37a <hci_init+0x10a>
	read_supported_commands_complete(rsp);
    f340:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    f342:	4811      	ldr	r0, [pc, #68]	; (f388 <hci_init+0x118>)
    f344:	6899      	ldr	r1, [r3, #8]
    f346:	2240      	movs	r2, #64	; 0x40
    f348:	3101      	adds	r1, #1
    f34a:	f00e fa35 	bl	1d7b8 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    f34e:	480e      	ldr	r0, [pc, #56]	; (f388 <hci_init+0x118>)
    f350:	f00e fafe 	bl	1d950 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    f354:	9803      	ldr	r0, [sp, #12]
    f356:	f009 fd65 	bl	18e24 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f35a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f35e:	065a      	lsls	r2, r3, #25
    f360:	d41a      	bmi.n	f398 <hci_init+0x128>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    f362:	4b0a      	ldr	r3, [pc, #40]	; (f38c <hci_init+0x11c>)
    f364:	490a      	ldr	r1, [pc, #40]	; (f390 <hci_init+0x120>)
		BT_ERR("Non-LE capable controller detected!");
    f366:	480b      	ldr	r0, [pc, #44]	; (f394 <hci_init+0x124>)
    f368:	1ac9      	subs	r1, r1, r3
    f36a:	08c9      	lsrs	r1, r1, #3
    f36c:	0189      	lsls	r1, r1, #6
    f36e:	f041 0101 	orr.w	r1, r1, #1
    f372:	f00c ff05 	bl	1c180 <log_0>
		return -ENODEV;
    f376:	f06f 0412 	mvn.w	r4, #18
	if (err) {
		return err;
	}

	return 0;
}
    f37a:	4620      	mov	r0, r4
    f37c:	b008      	add	sp, #32
    f37e:	bd70      	pop	{r4, r5, r6, pc}
    f380:	200002a0 	.word	0x200002a0
    f384:	200002dc 	.word	0x200002dc
    f388:	200002e4 	.word	0x200002e4
    f38c:	00020854 	.word	0x00020854
    f390:	00020894 	.word	0x00020894
    f394:	00021e0c 	.word	0x00021e0c
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f398:	4621      	mov	r1, r4
    f39a:	aa03      	add	r2, sp, #12
    f39c:	f242 0003 	movw	r0, #8195	; 0x2003
    f3a0:	f003 fe54 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f3a4:	4604      	mov	r4, r0
    f3a6:	2800      	cmp	r0, #0
    f3a8:	d1e7      	bne.n	f37a <hci_init+0x10a>
	read_le_features_complete(rsp);
    f3aa:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f3ac:	48be      	ldr	r0, [pc, #760]	; (f6a8 <hci_init+0x438>)
    f3ae:	6899      	ldr	r1, [r3, #8]
    f3b0:	2208      	movs	r2, #8
    f3b2:	3101      	adds	r1, #1
    f3b4:	f00e fa00 	bl	1d7b8 <memcpy>
	net_buf_unref(rsp);
    f3b8:	9803      	ldr	r0, [sp, #12]
    f3ba:	f009 fd33 	bl	18e24 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f3be:	4621      	mov	r1, r4
    f3c0:	aa03      	add	r2, sp, #12
    f3c2:	f242 0002 	movw	r0, #8194	; 0x2002
    f3c6:	f003 fe41 	bl	1304c <bt_hci_cmd_send_sync>
		if (err) {
    f3ca:	4604      	mov	r4, r0
    f3cc:	2800      	cmp	r0, #0
    f3ce:	d1d4      	bne.n	f37a <hci_init+0x10a>
		le_read_buffer_size_complete(rsp);
    f3d0:	9b03      	ldr	r3, [sp, #12]
    f3d2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f3d4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f3d8:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    f3dc:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    f3de:	b121      	cbz	r1, f3ea <hci_init+0x17a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f3e0:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    f3e2:	48b2      	ldr	r0, [pc, #712]	; (f6ac <hci_init+0x43c>)
    f3e4:	4611      	mov	r1, r2
    f3e6:	f010 fd28 	bl	1fe3a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f3ea:	9803      	ldr	r0, [sp, #12]
    f3ec:	f009 fd1a 	bl	18e24 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f3f0:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    f3f4:	f016 0620 	ands.w	r6, r6, #32
    f3f8:	f000 80ea 	beq.w	f5d0 <hci_init+0x360>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f3fc:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    f400:	071b      	lsls	r3, r3, #28
    f402:	d511      	bpl.n	f428 <hci_init+0x1b8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f404:	aa03      	add	r2, sp, #12
    f406:	2100      	movs	r1, #0
    f408:	f242 001c 	movw	r0, #8220	; 0x201c
    f40c:	f003 fe1e 	bl	1304c <bt_hci_cmd_send_sync>
		if (err) {
    f410:	4604      	mov	r4, r0
    f412:	2800      	cmp	r0, #0
    f414:	d1b1      	bne.n	f37a <hci_init+0x10a>
		le_read_supp_states_complete(rsp);
    f416:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f418:	6883      	ldr	r3, [r0, #8]
    f41a:	f853 2f01 	ldr.w	r2, [r3, #1]!
    f41e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f420:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    f424:	f009 fcfe 	bl	18e24 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f428:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    f42c:	069e      	lsls	r6, r3, #26
    f42e:	d523      	bpl.n	f478 <hci_init+0x208>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f430:	a902      	add	r1, sp, #8
    f432:	f10d 0006 	add.w	r0, sp, #6
    f436:	f003 fe81 	bl	1313c <hci_le_read_max_data_len>
		if (err) {
    f43a:	4604      	mov	r4, r0
    f43c:	2800      	cmp	r0, #0
    f43e:	d19c      	bne.n	f37a <hci_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f440:	2104      	movs	r1, #4
    f442:	f242 0024 	movw	r0, #8228	; 0x2024
    f446:	f003 fca5 	bl	12d94 <bt_hci_cmd_create>
		if (!buf) {
    f44a:	4606      	mov	r6, r0
    f44c:	2800      	cmp	r0, #0
    f44e:	f000 80c6 	beq.w	f5de <hci_init+0x36e>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    f452:	2104      	movs	r1, #4
    f454:	3008      	adds	r0, #8
    f456:	f010 fa9e 	bl	1f996 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f45a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f45e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f460:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f464:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f466:	4622      	mov	r2, r4
    f468:	4631      	mov	r1, r6
    f46a:	f242 0024 	movw	r0, #8228	; 0x2024
    f46e:	f003 fded 	bl	1304c <bt_hci_cmd_send_sync>
		if (err) {
    f472:	4604      	mov	r4, r0
    f474:	2800      	cmp	r0, #0
    f476:	d180      	bne.n	f37a <hci_init+0x10a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    f478:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    f47c:	065c      	lsls	r4, r3, #25
    f47e:	d510      	bpl.n	f4a2 <hci_init+0x232>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    f480:	aa03      	add	r2, sp, #12
    f482:	2100      	movs	r1, #0
    f484:	f242 002a 	movw	r0, #8234	; 0x202a
    f488:	f003 fde0 	bl	1304c <bt_hci_cmd_send_sync>
		if (err) {
    f48c:	4604      	mov	r4, r0
    f48e:	2800      	cmp	r0, #0
    f490:	f47f af73 	bne.w	f37a <hci_init+0x10a>
		le_read_resolving_list_size_complete(rsp);
    f494:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
    f496:	6883      	ldr	r3, [r0, #8]
    f498:	785b      	ldrb	r3, [r3, #1]
    f49a:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
    f49e:	f009 fcc1 	bl	18e24 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f4a2:	2108      	movs	r1, #8
    f4a4:	f242 0001 	movw	r0, #8193	; 0x2001
    f4a8:	f003 fc74 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
    f4ac:	4604      	mov	r4, r0
    f4ae:	2800      	cmp	r0, #0
    f4b0:	f000 8095 	beq.w	f5de <hci_init+0x36e>
    f4b4:	2108      	movs	r1, #8
    f4b6:	4408      	add	r0, r1
    f4b8:	f010 fa6d 	bl	1f996 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    f4bc:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    f4c0:	f011 0f40 	tst.w	r1, #64	; 0x40
    f4c4:	4602      	mov	r2, r0
    f4c6:	f240 2302 	movw	r3, #514	; 0x202
    f4ca:	bf08      	it	eq
    f4cc:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f4ce:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    f4d0:	bf4c      	ite	mi
    f4d2:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    f4d6:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    f4da:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f4dc:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    f4e0:	bf48      	it	mi
    f4e2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f4e6:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    f4ea:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    f4ee:	bf18      	it	ne
    f4f0:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    f4f4:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    f4f8:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    f4fa:	bf48      	it	mi
    f4fc:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    f500:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    f502:	bf08      	it	eq
    f504:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    f508:	2100      	movs	r1, #0
    f50a:	f00e fabf 	bl	1da8c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f50e:	4621      	mov	r1, r4
    f510:	2200      	movs	r2, #0
    f512:	f242 0001 	movw	r0, #8193	; 0x2001
    f516:	f003 fd99 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f51a:	4604      	mov	r4, r0
    f51c:	2800      	cmp	r0, #0
    f51e:	f47f af2c 	bne.w	f37a <hci_init+0x10a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f522:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f526:	0698      	lsls	r0, r3, #26
    f528:	d41e      	bmi.n	f568 <hci_init+0x2f8>
	if (bt_dev.le.acl_mtu) {
    f52a:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    f52e:	b9d9      	cbnz	r1, f568 <hci_init+0x2f8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f530:	aa03      	add	r2, sp, #12
    f532:	f241 0005 	movw	r0, #4101	; 0x1005
    f536:	f003 fd89 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f53a:	4604      	mov	r4, r0
    f53c:	2800      	cmp	r0, #0
    f53e:	f47f af1c 	bne.w	f37a <hci_init+0x10a>
	if (bt_dev.le.acl_mtu) {
    f542:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    f546:	b963      	cbnz	r3, f562 <hci_init+0x2f2>
	read_buffer_size_complete(rsp);
    f548:	9b03      	ldr	r3, [sp, #12]
    f54a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f54c:	785a      	ldrb	r2, [r3, #1]
    f54e:	7899      	ldrb	r1, [r3, #2]
    f550:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f554:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f558:	889a      	ldrh	r2, [r3, #4]
    f55a:	4854      	ldr	r0, [pc, #336]	; (f6ac <hci_init+0x43c>)
    f55c:	4611      	mov	r1, r2
    f55e:	f010 fc6c 	bl	1fe3a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f562:	9803      	ldr	r0, [sp, #12]
    f564:	f009 fc5e 	bl	18e24 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f568:	2108      	movs	r1, #8
    f56a:	f640 4001 	movw	r0, #3073	; 0xc01
    f56e:	f003 fc11 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
    f572:	4604      	mov	r4, r0
    f574:	b398      	cbz	r0, f5de <hci_init+0x36e>
    f576:	2108      	movs	r1, #8
    f578:	4408      	add	r0, r1
    f57a:	f010 fa0c 	bl	1f996 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    f57e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    f582:	07d9      	lsls	r1, r3, #31
    f584:	4602      	mov	r2, r0
    f586:	d53f      	bpl.n	f608 <hci_init+0x398>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    f588:	a145      	add	r1, pc, #276	; (adr r1, f6a0 <hci_init+0x430>)
    f58a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    f58e:	f00e fa7d 	bl	1da8c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f592:	4621      	mov	r1, r4
    f594:	2200      	movs	r2, #0
    f596:	f640 4001 	movw	r0, #3073	; 0xc01
    f59a:	f003 fd57 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f59e:	4604      	mov	r4, r0
    f5a0:	2800      	cmp	r0, #0
    f5a2:	f47f aeea 	bne.w	f37a <hci_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f5a6:	4601      	mov	r1, r0
    f5a8:	aa02      	add	r2, sp, #8
    f5aa:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f5ae:	f003 fd4d 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f5b2:	4c3f      	ldr	r4, [pc, #252]	; (f6b0 <hci_init+0x440>)
    f5b4:	4b3f      	ldr	r3, [pc, #252]	; (f6b4 <hci_init+0x444>)
    f5b6:	1ae4      	subs	r4, r4, r3
    f5b8:	08e4      	lsrs	r4, r4, #3
    f5ba:	01a4      	lsls	r4, r4, #6
    f5bc:	b340      	cbz	r0, f610 <hci_init+0x3a0>
		BT_WARN("Vendor HCI extensions not available");
    f5be:	483e      	ldr	r0, [pc, #248]	; (f6b8 <hci_init+0x448>)
    f5c0:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
    f5c4:	f00c fddc 	bl	1c180 <log_0>
	err = bt_id_init();
    f5c8:	f004 fd44 	bl	14054 <bt_id_init>
    f5cc:	4604      	mov	r4, r0
	if (err) {
    f5ce:	e6d4      	b.n	f37a <hci_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f5d0:	2102      	movs	r1, #2
    f5d2:	f640 406d 	movw	r0, #3181	; 0xc6d
    f5d6:	f003 fbdd 	bl	12d94 <bt_hci_cmd_create>
		if (!buf) {
    f5da:	4604      	mov	r4, r0
    f5dc:	b910      	cbnz	r0, f5e4 <hci_init+0x374>
		return -ENOBUFS;
    f5de:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f5e2:	e6ca      	b.n	f37a <hci_init+0x10a>
    f5e4:	2102      	movs	r1, #2
    f5e6:	3008      	adds	r0, #8
    f5e8:	f010 f9d5 	bl	1f996 <net_buf_simple_add>
		cp_le->le = 0x01;
    f5ec:	2301      	movs	r3, #1
    f5ee:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f5f0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f5f2:	4621      	mov	r1, r4
    f5f4:	4632      	mov	r2, r6
    f5f6:	f640 406d 	movw	r0, #3181	; 0xc6d
    f5fa:	f003 fd27 	bl	1304c <bt_hci_cmd_send_sync>
		if (err) {
    f5fe:	4604      	mov	r4, r0
    f600:	2800      	cmp	r0, #0
    f602:	f43f aefb 	beq.w	f3fc <hci_init+0x18c>
    f606:	e6b8      	b.n	f37a <hci_init+0x10a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    f608:	482c      	ldr	r0, [pc, #176]	; (f6bc <hci_init+0x44c>)
    f60a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    f60e:	e7be      	b.n	f58e <hci_init+0x31e>
	rp.info = (void *)rsp->data;
    f610:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    f612:	482b      	ldr	r0, [pc, #172]	; (f6c0 <hci_init+0x450>)
	rp.info = (void *)rsp->data;
    f614:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    f616:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    f61a:	2a03      	cmp	r2, #3
		return plat_str[platform];
    f61c:	bf96      	itet	ls
    f61e:	4929      	ldrls	r1, [pc, #164]	; (f6c4 <hci_init+0x454>)
	return "unknown";
    f620:	4929      	ldrhi	r1, [pc, #164]	; (f6c8 <hci_init+0x458>)
		return plat_str[platform];
    f622:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    f626:	f044 0303 	orr.w	r3, r4, #3
    f62a:	f00c fdca 	bl	1c1c2 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    f62e:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    f632:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    f636:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    f638:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    f63c:	d12e      	bne.n	f69c <hci_init+0x42c>
	if (variant < ARRAY_SIZE(nordic_str)) {
    f63e:	2a03      	cmp	r2, #3
    f640:	d82c      	bhi.n	f69c <hci_init+0x42c>
		return nordic_str[variant];
    f642:	4922      	ldr	r1, [pc, #136]	; (f6cc <hci_init+0x45c>)
    f644:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    f648:	4821      	ldr	r0, [pc, #132]	; (f6d0 <hci_init+0x460>)
    f64a:	f00c fdba 	bl	1c1c2 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    f64e:	7972      	ldrb	r2, [r6, #5]
    f650:	4820      	ldr	r0, [pc, #128]	; (f6d4 <hci_init+0x464>)
	if (variant < ARRAY_SIZE(var_str)) {
    f652:	2a03      	cmp	r2, #3
		return var_str[variant];
    f654:	bf96      	itet	ls
    f656:	4920      	ldrls	r1, [pc, #128]	; (f6d8 <hci_init+0x468>)
	return "unknown";
    f658:	491b      	ldrhi	r1, [pc, #108]	; (f6c8 <hci_init+0x458>)
		return var_str[variant];
    f65a:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    f65e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    f662:	79b2      	ldrb	r2, [r6, #6]
    f664:	9205      	str	r2, [sp, #20]
    f666:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    f66a:	9206      	str	r2, [sp, #24]
    f66c:	f8d6 2009 	ldr.w	r2, [r6, #9]
    f670:	9207      	str	r2, [sp, #28]
    f672:	f044 0303 	orr.w	r3, r4, #3
    f676:	2205      	movs	r2, #5
    f678:	a903      	add	r1, sp, #12
    f67a:	f00c fdd7 	bl	1c22c <log_n>
	net_buf_unref(rsp);
    f67e:	9802      	ldr	r0, [sp, #8]
    f680:	f009 fbd0 	bl	18e24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f684:	aa02      	add	r2, sp, #8
    f686:	2100      	movs	r1, #0
    f688:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f68c:	f003 fcde 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
    f690:	4606      	mov	r6, r0
    f692:	b328      	cbz	r0, f6e0 <hci_init+0x470>
		BT_WARN("Failed to read supported vendor commands");
    f694:	4811      	ldr	r0, [pc, #68]	; (f6dc <hci_init+0x46c>)
    f696:	f044 0102 	orr.w	r1, r4, #2
    f69a:	e793      	b.n	f5c4 <hci_init+0x354>
		return "unknown";
    f69c:	490a      	ldr	r1, [pc, #40]	; (f6c8 <hci_init+0x458>)
    f69e:	e7d3      	b.n	f648 <hci_init+0x3d8>
    f6a0:	02008890 	.word	0x02008890
    f6a4:	20008000 	.word	0x20008000
    f6a8:	20000340 	.word	0x20000340
    f6ac:	20000370 	.word	0x20000370
    f6b0:	00020894 	.word	0x00020894
    f6b4:	00020854 	.word	0x00020854
    f6b8:	00021e30 	.word	0x00021e30
    f6bc:	02008810 	.word	0x02008810
    f6c0:	00021e54 	.word	0x00021e54
    f6c4:	00020de0 	.word	0x00020de0
    f6c8:	00021a61 	.word	0x00021a61
    f6cc:	00020da0 	.word	0x00020da0
    f6d0:	00021e6d 	.word	0x00021e6d
    f6d4:	00021e85 	.word	0x00021e85
    f6d8:	00020e18 	.word	0x00020e18
    f6dc:	00021eb2 	.word	0x00021eb2
	rp.cmds = (void *)rsp->data;
    f6e0:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f6e2:	4812      	ldr	r0, [pc, #72]	; (f72c <hci_init+0x4bc>)
    f6e4:	6899      	ldr	r1, [r3, #8]
    f6e6:	2202      	movs	r2, #2
    f6e8:	3101      	adds	r1, #1
    f6ea:	f00e f865 	bl	1d7b8 <memcpy>
	net_buf_unref(rsp);
    f6ee:	9802      	ldr	r0, [sp, #8]
    f6f0:	f009 fb98 	bl	18e24 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f6f4:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    f6f8:	075b      	lsls	r3, r3, #29
    f6fa:	f57f af65 	bpl.w	f5c8 <hci_init+0x358>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f6fe:	aa02      	add	r2, sp, #8
    f700:	4631      	mov	r1, r6
    f702:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f706:	f003 fca1 	bl	1304c <bt_hci_cmd_send_sync>
		if (err) {
    f70a:	b118      	cbz	r0, f714 <hci_init+0x4a4>
			BT_WARN("Failed to read supported vendor features");
    f70c:	4808      	ldr	r0, [pc, #32]	; (f730 <hci_init+0x4c0>)
    f70e:	f044 0102 	orr.w	r1, r4, #2
    f712:	e757      	b.n	f5c4 <hci_init+0x354>
		rp.feat = (void *)rsp->data;
    f714:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f716:	4807      	ldr	r0, [pc, #28]	; (f734 <hci_init+0x4c4>)
    f718:	6899      	ldr	r1, [r3, #8]
    f71a:	2201      	movs	r2, #1
    f71c:	4411      	add	r1, r2
    f71e:	f00e f84b 	bl	1d7b8 <memcpy>
		net_buf_unref(rsp);
    f722:	9802      	ldr	r0, [sp, #8]
    f724:	f009 fb7e 	bl	18e24 <net_buf_unref>
    f728:	e74e      	b.n	f5c8 <hci_init+0x358>
    f72a:	bf00      	nop
    f72c:	20000325 	.word	0x20000325
    f730:	00021edb 	.word	0x00021edb
    f734:	20000324 	.word	0x20000324

0000f738 <hrmc_ccc_cfg_changed>:
    f738:	4b07      	ldr	r3, [pc, #28]	; (f758 <__kernel_ram_size+0x8>)
    f73a:	4a08      	ldr	r2, [pc, #32]	; (f75c <__kernel_ram_size+0xc>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    f73c:	4808      	ldr	r0, [pc, #32]	; (f760 <__kernel_ram_size+0x10>)
    f73e:	1ad2      	subs	r2, r2, r3
    f740:	08d2      	lsrs	r2, r2, #3
    f742:	4b08      	ldr	r3, [pc, #32]	; (f764 <__kernel_ram_size+0x14>)
    f744:	0192      	lsls	r2, r2, #6
    f746:	2901      	cmp	r1, #1
    f748:	bf14      	ite	ne
    f74a:	4601      	movne	r1, r0
    f74c:	4619      	moveq	r1, r3
    f74e:	f042 0203 	orr.w	r2, r2, #3
    f752:	4805      	ldr	r0, [pc, #20]	; (f768 <__kernel_ram_size+0x18>)
    f754:	f00c bd21 	b.w	1c19a <log_1>
    f758:	00020854 	.word	0x00020854
    f75c:	000208dc 	.word	0x000208dc
    f760:	0002113c 	.word	0x0002113c
    f764:	00021134 	.word	0x00021134
    f768:	00021145 	.word	0x00021145

0000f76c <bt_dclk_notify>:

	return 0;
}

int bt_dclk_notify(uint16_t dclk_value, uint16_t dclk_state)
{
    f76c:	b510      	push	{r4, lr}
	int rc;
	static uint16_t hrm[2];

	hrm[0] = dclk_state; /* uint8, sensor contact */
    f76e:	4c0c      	ldr	r4, [pc, #48]	; (f7a0 <bt_dclk_notify+0x34>)
{
    f770:	b086      	sub	sp, #24
	hrm[0] = dclk_state; /* uint8, sensor contact */
    f772:	8021      	strh	r1, [r4, #0]
	hrm[1] = dclk_value;
    f774:	8060      	strh	r0, [r4, #2]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    f776:	2218      	movs	r2, #24
    f778:	2100      	movs	r1, #0
    f77a:	4668      	mov	r0, sp
    f77c:	f00e f847 	bl	1d80e <memset>

	params.attr = attr;
    f780:	4b08      	ldr	r3, [pc, #32]	; (f7a4 <bt_dclk_notify+0x38>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    f782:	4669      	mov	r1, sp
	params.data = data;
    f784:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    f788:	2000      	movs	r0, #0
	params.len = len;
    f78a:	2304      	movs	r3, #4
    f78c:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    f790:	f007 fbe6 	bl	16f60 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
}
    f794:	f110 0f80 	cmn.w	r0, #128	; 0x80
    f798:	bf08      	it	eq
    f79a:	2000      	moveq	r0, #0
    f79c:	b006      	add	sp, #24
    f79e:	bd10      	pop	{r4, pc}
    f7a0:	20002030 	.word	0x20002030
    f7a4:	00020a4c 	.word	0x00020a4c

0000f7a8 <passkey_display>:
	bt_conn_auth_passkey_entry(conn, 123456);
}

void passkey_display(struct bt_conn *conn, unsigned int passkey)
{
	printk("Controller passkey = %d", passkey);
    f7a8:	4801      	ldr	r0, [pc, #4]	; (f7b0 <passkey_display+0x8>)
    f7aa:	f00c b8a4 	b.w	1b8f6 <printk>
    f7ae:	bf00      	nop
    f7b0:	0002115e 	.word	0x0002115e

0000f7b4 <disconnected>:
	printk("Disconnected (reason 0x%02x)\n", reason);
    f7b4:	4801      	ldr	r0, [pc, #4]	; (f7bc <disconnected+0x8>)
    f7b6:	f00c b89e 	b.w	1b8f6 <printk>
    f7ba:	bf00      	nop
    f7bc:	00021176 	.word	0x00021176

0000f7c0 <connected>:
	if (err) {
    f7c0:	b111      	cbz	r1, f7c8 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    f7c2:	4803      	ldr	r0, [pc, #12]	; (f7d0 <connected+0x10>)
    f7c4:	f00c b897 	b.w	1b8f6 <printk>
		printk("Connected\n");
    f7c8:	4802      	ldr	r0, [pc, #8]	; (f7d4 <connected+0x14>)
    f7ca:	f00c b894 	b.w	1b8f6 <printk>
    f7ce:	bf00      	nop
    f7d0:	00021194 	.word	0x00021194
    f7d4:	000211b4 	.word	0x000211b4

0000f7d8 <passkey_confirm>:
}

void passkey_confirm(struct bt_conn *conn, unsigned int passkey)
{
    f7d8:	b510      	push	{r4, lr}
    f7da:	4604      	mov	r4, r0
	printk("Confirm Passkey = %d", passkey);
    f7dc:	4803      	ldr	r0, [pc, #12]	; (f7ec <passkey_confirm+0x14>)
    f7de:	f00c f88a 	bl	1b8f6 <printk>
	bt_conn_auth_passkey_confirm(conn);
    f7e2:	4620      	mov	r0, r4
}
    f7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_auth_passkey_confirm(conn);
    f7e8:	f005 bdb6 	b.w	15358 <bt_conn_auth_passkey_confirm>
    f7ec:	000211bf 	.word	0x000211bf

0000f7f0 <dclk_expire_cb>:


static void dclk_expire_cb(struct k_timer *timer_id)
{
	//dclk_start();
	dclk_state = EXPRIRE;
    f7f0:	4b03      	ldr	r3, [pc, #12]	; (f800 <dclk_expire_cb+0x10>)
    f7f2:	2103      	movs	r1, #3
    f7f4:	7019      	strb	r1, [r3, #0]
	dclk_value = 0;
    f7f6:	4b03      	ldr	r3, [pc, #12]	; (f804 <dclk_expire_cb+0x14>)
    f7f8:	2000      	movs	r0, #0
    f7fa:	6018      	str	r0, [r3, #0]
	bt_dclk_notify(dclk_value, dclk_state);
    f7fc:	f7ff bfb6 	b.w	f76c <bt_dclk_notify>
    f800:	20002050 	.word	0x20002050
    f804:	20001d30 	.word	0x20001d30

0000f808 <passkey_entry>:
{
    f808:	b538      	push	{r3, r4, r5, lr}
	printk("Sending entry passkey = %d", 123456);
    f80a:	4d06      	ldr	r5, [pc, #24]	; (f824 <passkey_entry+0x1c>)
{
    f80c:	4604      	mov	r4, r0
	printk("Sending entry passkey = %d", 123456);
    f80e:	4629      	mov	r1, r5
    f810:	4805      	ldr	r0, [pc, #20]	; (f828 <passkey_entry+0x20>)
    f812:	f00c f870 	bl	1b8f6 <printk>
	bt_conn_auth_passkey_entry(conn, 123456);
    f816:	4629      	mov	r1, r5
    f818:	4620      	mov	r0, r4
}
    f81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_auth_passkey_entry(conn, 123456);
    f81e:	f005 bd8b 	b.w	15338 <bt_conn_auth_passkey_entry>
    f822:	bf00      	nop
    f824:	0001e240 	.word	0x0001e240
    f828:	000211d4 	.word	0x000211d4

0000f82c <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    f82c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    f82e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    f830:	b08a      	sub	sp, #40	; 0x28
    f832:	4604      	mov	r4, r0
    f834:	460e      	mov	r6, r1
    f836:	ad07      	add	r5, sp, #28
    f838:	2b03      	cmp	r3, #3
    f83a:	d820      	bhi.n	f87e <bt_addr_le_to_str.constprop.0+0x52>
    f83c:	e8df f003 	tbb	[pc, r3]
    f840:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    f844:	4911      	ldr	r1, [pc, #68]	; (f88c <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    f846:	4628      	mov	r0, r5
    f848:	f00d ff6d 	bl	1d726 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    f84c:	7863      	ldrb	r3, [r4, #1]
    f84e:	9304      	str	r3, [sp, #16]
    f850:	78a3      	ldrb	r3, [r4, #2]
    f852:	9303      	str	r3, [sp, #12]
    f854:	78e3      	ldrb	r3, [r4, #3]
    f856:	9302      	str	r3, [sp, #8]
    f858:	7923      	ldrb	r3, [r4, #4]
    f85a:	9301      	str	r3, [sp, #4]
    f85c:	7963      	ldrb	r3, [r4, #5]
    f85e:	9300      	str	r3, [sp, #0]
    f860:	4a0b      	ldr	r2, [pc, #44]	; (f890 <bt_addr_le_to_str.constprop.0+0x64>)
    f862:	79a3      	ldrb	r3, [r4, #6]
    f864:	9505      	str	r5, [sp, #20]
    f866:	211e      	movs	r1, #30
    f868:	4630      	mov	r0, r6
    f86a:	f00c f851 	bl	1b910 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    f86e:	b00a      	add	sp, #40	; 0x28
    f870:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    f872:	4908      	ldr	r1, [pc, #32]	; (f894 <bt_addr_le_to_str.constprop.0+0x68>)
    f874:	e7e7      	b.n	f846 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    f876:	4908      	ldr	r1, [pc, #32]	; (f898 <bt_addr_le_to_str.constprop.0+0x6c>)
    f878:	e7e5      	b.n	f846 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    f87a:	4908      	ldr	r1, [pc, #32]	; (f89c <bt_addr_le_to_str.constprop.0+0x70>)
    f87c:	e7e3      	b.n	f846 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    f87e:	4a08      	ldr	r2, [pc, #32]	; (f8a0 <bt_addr_le_to_str.constprop.0+0x74>)
    f880:	210a      	movs	r1, #10
    f882:	4628      	mov	r0, r5
    f884:	f00c f844 	bl	1b910 <snprintk>
		break;
    f888:	e7e0      	b.n	f84c <bt_addr_le_to_str.constprop.0+0x20>
    f88a:	bf00      	nop
    f88c:	000211ef 	.word	0x000211ef
    f890:	00021211 	.word	0x00021211
    f894:	000211f6 	.word	0x000211f6
    f898:	000211fd 	.word	0x000211fd
    f89c:	00021207 	.word	0x00021207
    f8a0:	00022c74 	.word	0x00022c74

0000f8a4 <auth_cancel>:
{
    f8a4:	b500      	push	{lr}
    f8a6:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    f8a8:	f00e fc73 	bl	1e192 <bt_conn_get_dst>
    f8ac:	4669      	mov	r1, sp
    f8ae:	f7ff ffbd 	bl	f82c <bt_addr_le_to_str.constprop.0>
	printk("Pairing cancelled: %s\n", addr);
    f8b2:	4803      	ldr	r0, [pc, #12]	; (f8c0 <auth_cancel+0x1c>)
    f8b4:	4669      	mov	r1, sp
    f8b6:	f00c f81e 	bl	1b8f6 <printk>
}
    f8ba:	b009      	add	sp, #36	; 0x24
    f8bc:	f85d fb04 	ldr.w	pc, [sp], #4
    f8c0:	00021234 	.word	0x00021234

0000f8c4 <auth_pairing>:
{
    f8c4:	b510      	push	{r4, lr}
    f8c6:	b088      	sub	sp, #32
    f8c8:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    f8ca:	f00e fc62 	bl	1e192 <bt_conn_get_dst>
    f8ce:	4669      	mov	r1, sp
    f8d0:	f7ff ffac 	bl	f82c <bt_addr_le_to_str.constprop.0>
	int err = bt_conn_auth_pairing_confirm(conn);
    f8d4:	4620      	mov	r0, r4
    f8d6:	f005 fd4d 	bl	15374 <bt_conn_auth_pairing_confirm>
	printk("Pairing Authorized %d: %s\n", err, addr);
    f8da:	466a      	mov	r2, sp
	int err = bt_conn_auth_pairing_confirm(conn);
    f8dc:	4601      	mov	r1, r0
	printk("Pairing Authorized %d: %s\n", err, addr);
    f8de:	4802      	ldr	r0, [pc, #8]	; (f8e8 <auth_pairing+0x24>)
    f8e0:	f00c f809 	bl	1b8f6 <printk>
}
    f8e4:	b008      	add	sp, #32
    f8e6:	bd10      	pop	{r4, pc}
    f8e8:	0002124b 	.word	0x0002124b

0000f8ec <dclk_start>:
{
    f8ec:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    f8ee:	2200      	movs	r2, #0
    f8f0:	2300      	movs	r3, #0
    f8f2:	e9cd 2300 	strd	r2, r3, [sp]
    f8f6:	4806      	ldr	r0, [pc, #24]	; (f910 <dclk_start+0x24>)
    f8f8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f8fc:	2300      	movs	r3, #0
    f8fe:	f00b feb1 	bl	1b664 <z_impl_k_timer_start>
	dclk_state = RUN;
    f902:	4b04      	ldr	r3, [pc, #16]	; (f914 <dclk_start+0x28>)
    f904:	2200      	movs	r2, #0
    f906:	701a      	strb	r2, [r3, #0]
}
    f908:	b003      	add	sp, #12
    f90a:	f85d fb04 	ldr.w	pc, [sp], #4
    f90e:	bf00      	nop
    f910:	20000690 	.word	0x20000690
    f914:	20002050 	.word	0x20002050

0000f918 <dclk_notify>:
{
    f918:	b538      	push	{r3, r4, r5, lr}
	if (dclk_state != PAUSE)
    f91a:	4c0b      	ldr	r4, [pc, #44]	; (f948 <dclk_notify+0x30>)
    f91c:	4d0b      	ldr	r5, [pc, #44]	; (f94c <dclk_notify+0x34>)
    f91e:	7822      	ldrb	r2, [r4, #0]
    f920:	2a01      	cmp	r2, #1
    f922:	d00a      	beq.n	f93a <dclk_notify+0x22>
__syscall k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
				       const struct k_timer *timer)
{
	return z_timeout_remaining(&timer->timeout);
    f924:	480a      	ldr	r0, [pc, #40]	; (f950 <dclk_notify+0x38>)
    f926:	f010 fca3 	bl	20270 <z_timeout_remaining>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    f92a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f92e:	fba0 0103 	umull	r0, r1, r0, r3
    f932:	0bc3      	lsrs	r3, r0, #15
    f934:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
    f938:	602b      	str	r3, [r5, #0]
	bt_dclk_notify(dclk_value, dclk_state);
    f93a:	7821      	ldrb	r1, [r4, #0]
    f93c:	8828      	ldrh	r0, [r5, #0]
}
    f93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_dclk_notify(dclk_value, dclk_state);
    f942:	f7ff bf13 	b.w	f76c <bt_dclk_notify>
    f946:	bf00      	nop
    f948:	20002050 	.word	0x20002050
    f94c:	20001d30 	.word	0x20001d30
    f950:	20000690 	.word	0x20000690

0000f954 <main>:


const uint16_t UPDATE_PERIOD = 1000;

void main(void)
{
    f954:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_enable(NULL);
    f956:	2000      	movs	r0, #0
{
    f958:	b088      	sub	sp, #32
	err = bt_enable(NULL);
    f95a:	f003 ff4f 	bl	137fc <bt_enable>
	if (err) {
    f95e:	4606      	mov	r6, r0
    f960:	b128      	cbz	r0, f96e <main+0x1a>
		printk("Bluetooth init failed (err %d)\n", err);
    f962:	4601      	mov	r1, r0
    f964:	4816      	ldr	r0, [pc, #88]	; (f9c0 <main+0x6c>)
    f966:	f00b ffc6 	bl	1b8f6 <printk>
		//hrs_notify();

		/* Battery level simulation */
		//bas_notify();
	}
}
    f96a:	b008      	add	sp, #32
    f96c:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    f96e:	4d15      	ldr	r5, [pc, #84]	; (f9c4 <main+0x70>)
	printk("Bluetooth initialized\n");
    f970:	4815      	ldr	r0, [pc, #84]	; (f9c8 <main+0x74>)
    f972:	f00b ffc0 	bl	1b8f6 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    f976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f978:	ac03      	add	r4, sp, #12
    f97a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f97c:	682b      	ldr	r3, [r5, #0]
    f97e:	6023      	str	r3, [r4, #0]
    f980:	4912      	ldr	r1, [pc, #72]	; (f9cc <main+0x78>)
    f982:	9600      	str	r6, [sp, #0]
    f984:	4633      	mov	r3, r6
    f986:	2202      	movs	r2, #2
    f988:	a803      	add	r0, sp, #12
    f98a:	f004 fdcd 	bl	14528 <bt_le_adv_start>
	if (err) {
    f98e:	4601      	mov	r1, r0
    f990:	b190      	cbz	r0, f9b8 <main+0x64>
		printk("Advertising failed to start (err %d)\n", err);
    f992:	480f      	ldr	r0, [pc, #60]	; (f9d0 <main+0x7c>)
    f994:	f00b ffaf 	bl	1b8f6 <printk>
	bt_conn_cb_register(&conn_callbacks);
    f998:	480e      	ldr	r0, [pc, #56]	; (f9d4 <main+0x80>)
    f99a:	f005 f8b7 	bl	14b0c <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    f99e:	480e      	ldr	r0, [pc, #56]	; (f9d8 <main+0x84>)
    f9a0:	f005 fcae 	bl	15300 <bt_conn_auth_cb_register>
	dclk_start();
    f9a4:	f7ff ffa2 	bl	f8ec <dclk_start>
	return z_impl_k_sleep(timeout);
    f9a8:	2100      	movs	r1, #0
    f9aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f9ae:	f00b fbf7 	bl	1b1a0 <z_impl_k_sleep>
		dclk_notify();
    f9b2:	f7ff ffb1 	bl	f918 <dclk_notify>
	while (1) {
    f9b6:	e7f7      	b.n	f9a8 <main+0x54>
	printk("Advertising successfully started\n");
    f9b8:	4808      	ldr	r0, [pc, #32]	; (f9dc <main+0x88>)
    f9ba:	f00b ff9c 	bl	1b8f6 <printk>
    f9be:	e7eb      	b.n	f998 <main+0x44>
    f9c0:	00021266 	.word	0x00021266
    f9c4:	00020960 	.word	0x00020960
    f9c8:	00021286 	.word	0x00021286
    f9cc:	00020a88 	.word	0x00020a88
    f9d0:	0002129d 	.word	0x0002129d
    f9d4:	20000430 	.word	0x20000430
    f9d8:	2000040c 	.word	0x2000040c
    f9dc:	000212c3 	.word	0x000212c3

0000f9e0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    f9e0:	680b      	ldr	r3, [r1, #0]
    f9e2:	3301      	adds	r3, #1
    f9e4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    f9e6:	4b01      	ldr	r3, [pc, #4]	; (f9ec <char_out+0xc>)
    f9e8:	681b      	ldr	r3, [r3, #0]
    f9ea:	4718      	bx	r3
    f9ec:	2000044c 	.word	0x2000044c

0000f9f0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    f9f0:	b507      	push	{r0, r1, r2, lr}
    f9f2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    f9f4:	2100      	movs	r1, #0
{
    f9f6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    f9f8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    f9fa:	4803      	ldr	r0, [pc, #12]	; (fa08 <vprintk+0x18>)
    f9fc:	a901      	add	r1, sp, #4
    f9fe:	f000 f8ff 	bl	fc00 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    fa02:	b003      	add	sp, #12
    fa04:	f85d fb04 	ldr.w	pc, [sp], #4
    fa08:	0000f9e1 	.word	0x0000f9e1

0000fa0c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fa0c:	b530      	push	{r4, r5, lr}
    fa0e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    fa10:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    fa14:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    fa16:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    fa18:	a901      	add	r1, sp, #4
    fa1a:	4805      	ldr	r0, [pc, #20]	; (fa30 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    fa1c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    fa1e:	f000 f8ef 	bl	fc00 <cbvprintf>

	if (ctx.count < ctx.max) {
    fa22:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    fa26:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    fa28:	bfb8      	it	lt
    fa2a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    fa2c:	b005      	add	sp, #20
    fa2e:	bd30      	pop	{r4, r5, pc}
    fa30:	0001b8d1 	.word	0x0001b8d1

0000fa34 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    fa34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fa38:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    fa3c:	f019 0808 	ands.w	r8, r9, #8
{
    fa40:	4604      	mov	r4, r0
    fa42:	4693      	mov	fp, r2
	if (processing) {
    fa44:	d00d      	beq.n	fa62 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    fa46:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    fa48:	bf0c      	ite	eq
    fa4a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    fa4e:	f049 0920 	orrne.w	r9, r9, #32
    fa52:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fa56:	f38b 8811 	msr	BASEPRI, fp
    fa5a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    fa5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fa62:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    fa66:	2902      	cmp	r1, #2
    fa68:	d107      	bne.n	fa7a <process_event+0x46>
			evt = process_recheck(mgr);
    fa6a:	4620      	mov	r0, r4
    fa6c:	f00b ff5d 	bl	1b92a <process_recheck>
		if (evt == EVT_NOP) {
    fa70:	2800      	cmp	r0, #0
    fa72:	d0f0      	beq.n	fa56 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    fa74:	2801      	cmp	r0, #1
    fa76:	8b23      	ldrh	r3, [r4, #24]
    fa78:	d150      	bne.n	fb1c <process_event+0xe8>
			res = mgr->last_res;
    fa7a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fa7c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    fa7e:	2f00      	cmp	r7, #0
    fa80:	da15      	bge.n	faae <process_event+0x7a>
		*clients = mgr->clients;
    fa82:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fa84:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    fa88:	e9c4 8800 	strd	r8, r8, [r4]
    fa8c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fa90:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    fa92:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fa94:	8b21      	ldrh	r1, [r4, #24]
    fa96:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    fa9a:	45ca      	cmp	sl, r9
    fa9c:	d002      	beq.n	faa4 <process_event+0x70>
		if (do_monitors
    fa9e:	68a3      	ldr	r3, [r4, #8]
    faa0:	2b00      	cmp	r3, #0
    faa2:	d15c      	bne.n	fb5e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    faa4:	b90d      	cbnz	r5, faaa <process_event+0x76>
		    || (transit != NULL)) {
    faa6:	2e00      	cmp	r6, #0
    faa8:	d074      	beq.n	fb94 <process_event+0x160>
    faaa:	2300      	movs	r3, #0
    faac:	e058      	b.n	fb60 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    faae:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    fab2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    fab4:	2a01      	cmp	r2, #1
    fab6:	d820      	bhi.n	fafa <process_event+0xc6>
		*clients = mgr->clients;
    fab8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    fabc:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    fabe:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    fac0:	b289      	uxth	r1, r1
	list->tail = NULL;
    fac2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    fac6:	d10c      	bne.n	fae2 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    fac8:	2d00      	cmp	r5, #0
    faca:	462b      	mov	r3, r5
    facc:	bf38      	it	cc
    face:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fad0:	b12b      	cbz	r3, fade <process_event+0xaa>
				mgr->refs += 1U;
    fad2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fad4:	681b      	ldr	r3, [r3, #0]
    fad6:	3201      	adds	r2, #1
    fad8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fada:	2b00      	cmp	r3, #0
    fadc:	d1f8      	bne.n	fad0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fade:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    fae2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    fae4:	4620      	mov	r0, r4
    fae6:	f00b ff20 	bl	1b92a <process_recheck>
    faea:	4606      	mov	r6, r0
    faec:	2800      	cmp	r0, #0
    faee:	d0d1      	beq.n	fa94 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    faf0:	8b23      	ldrh	r3, [r4, #24]
    faf2:	f043 0320 	orr.w	r3, r3, #32
    faf6:	8323      	strh	r3, [r4, #24]
    faf8:	e7cb      	b.n	fa92 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    fafa:	2b04      	cmp	r3, #4
    fafc:	d10c      	bne.n	fb18 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fafe:	f021 0107 	bic.w	r1, r1, #7
    fb02:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fb04:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    fb06:	4620      	mov	r0, r4
    fb08:	f00b ff0f 	bl	1b92a <process_recheck>
    fb0c:	4605      	mov	r5, r0
    fb0e:	2800      	cmp	r0, #0
    fb10:	d0bf      	beq.n	fa92 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fb12:	f041 0120 	orr.w	r1, r1, #32
    fb16:	8321      	strh	r1, [r4, #24]
    fb18:	2500      	movs	r5, #0
    fb1a:	e7ba      	b.n	fa92 <process_event+0x5e>
		} else if (evt == EVT_START) {
    fb1c:	2803      	cmp	r0, #3
    fb1e:	d109      	bne.n	fb34 <process_event+0x100>
			transit = mgr->transitions->start;
    fb20:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fb22:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    fb26:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fb28:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    fb2c:	8323      	strh	r3, [r4, #24]
}
    fb2e:	2500      	movs	r5, #0
		res = 0;
    fb30:	462f      	mov	r7, r5
    fb32:	e7af      	b.n	fa94 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    fb34:	2804      	cmp	r0, #4
    fb36:	d106      	bne.n	fb46 <process_event+0x112>
			transit = mgr->transitions->stop;
    fb38:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fb3a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    fb3e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fb40:	f043 0304 	orr.w	r3, r3, #4
    fb44:	e7f2      	b.n	fb2c <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    fb46:	2805      	cmp	r0, #5
    fb48:	d106      	bne.n	fb58 <process_event+0x124>
			transit = mgr->transitions->reset;
    fb4a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fb4c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    fb50:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fb52:	f043 0305 	orr.w	r3, r3, #5
    fb56:	e7e9      	b.n	fb2c <process_event+0xf8>
    fb58:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    fb5a:	462e      	mov	r6, r5
    fb5c:	e7e8      	b.n	fb30 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    fb5e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    fb60:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    fb64:	8321      	strh	r1, [r4, #24]
    fb66:	f38b 8811 	msr	BASEPRI, fp
    fb6a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    fb6e:	bb03      	cbnz	r3, fbb2 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    fb70:	2d00      	cmp	r5, #0
    fb72:	d133      	bne.n	fbdc <process_event+0x1a8>
			if (transit != NULL) {
    fb74:	b116      	cbz	r6, fb7c <process_event+0x148>
				transit(mgr, transition_complete);
    fb76:	4921      	ldr	r1, [pc, #132]	; (fbfc <process_event+0x1c8>)
    fb78:	4620      	mov	r0, r4
    fb7a:	47b0      	blx	r6
	__asm__ volatile(
    fb7c:	f04f 0340 	mov.w	r3, #64	; 0x40
    fb80:	f3ef 8b11 	mrs	fp, BASEPRI
    fb84:	f383 8811 	msr	BASEPRI, r3
    fb88:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    fb8c:	8b23      	ldrh	r3, [r4, #24]
    fb8e:	f023 0308 	bic.w	r3, r3, #8
    fb92:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    fb94:	8b23      	ldrh	r3, [r4, #24]
    fb96:	06da      	lsls	r2, r3, #27
    fb98:	d528      	bpl.n	fbec <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    fb9a:	f023 0310 	bic.w	r3, r3, #16
    fb9e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    fba0:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    fba2:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    fba6:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    fbaa:	2900      	cmp	r1, #0
    fbac:	f47f af5b 	bne.w	fa66 <process_event+0x32>
out:
    fbb0:	e751      	b.n	fa56 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    fbb2:	68a1      	ldr	r1, [r4, #8]
    fbb4:	2900      	cmp	r1, #0
    fbb6:	d0db      	beq.n	fb70 <process_event+0x13c>
	return node->next;
    fbb8:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    fbba:	f8d1 b004 	ldr.w	fp, [r1, #4]
    fbbe:	2b00      	cmp	r3, #0
    fbc0:	bf38      	it	cc
    fbc2:	2300      	movcc	r3, #0
    fbc4:	4699      	mov	r9, r3
    fbc6:	4652      	mov	r2, sl
    fbc8:	463b      	mov	r3, r7
    fbca:	4620      	mov	r0, r4
    fbcc:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    fbce:	f1b9 0f00 	cmp.w	r9, #0
    fbd2:	d0cd      	beq.n	fb70 <process_event+0x13c>
    fbd4:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fbd8:	4649      	mov	r1, r9
    fbda:	e7ee      	b.n	fbba <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fbdc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    fbde:	463b      	mov	r3, r7
    fbe0:	4652      	mov	r2, sl
    fbe2:	4620      	mov	r0, r4
    fbe4:	682d      	ldr	r5, [r5, #0]
    fbe6:	f00b febc 	bl	1b962 <notify_one>
    fbea:	e7c1      	b.n	fb70 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    fbec:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    fbf0:	bf1e      	ittt	ne
    fbf2:	f023 0320 	bicne.w	r3, r3, #32
    fbf6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    fbf8:	2102      	movne	r1, #2
    fbfa:	e7d2      	b.n	fba2 <process_event+0x16e>
    fbfc:	0001b98f 	.word	0x0001b98f

0000fc00 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    fc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc04:	b091      	sub	sp, #68	; 0x44
    fc06:	468b      	mov	fp, r1
    fc08:	9002      	str	r0, [sp, #8]
    fc0a:	4692      	mov	sl, r2
    fc0c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    fc0e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    fc10:	f89a 0000 	ldrb.w	r0, [sl]
    fc14:	b908      	cbnz	r0, fc1a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    fc16:	4628      	mov	r0, r5
    fc18:	e35e      	b.n	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
		if (*fp != '%') {
    fc1a:	2825      	cmp	r0, #37	; 0x25
    fc1c:	f10a 0701 	add.w	r7, sl, #1
    fc20:	d007      	beq.n	fc32 <cbvprintf+0x32>
			OUTC('%');
    fc22:	9b02      	ldr	r3, [sp, #8]
    fc24:	4659      	mov	r1, fp
    fc26:	4798      	blx	r3
    fc28:	2800      	cmp	r0, #0
    fc2a:	f2c0 8355 	blt.w	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
    fc2e:	3501      	adds	r5, #1
			break;
    fc30:	e210      	b.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
		} state = {
    fc32:	2218      	movs	r2, #24
    fc34:	2100      	movs	r1, #0
    fc36:	a80a      	add	r0, sp, #40	; 0x28
    fc38:	f00d fde9 	bl	1d80e <memset>
	if (*sp == '%') {
    fc3c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    fc40:	2b25      	cmp	r3, #37	; 0x25
    fc42:	d078      	beq.n	fd36 <cbvprintf+0x136>
    fc44:	2200      	movs	r2, #0
    fc46:	4694      	mov	ip, r2
    fc48:	4616      	mov	r6, r2
    fc4a:	4696      	mov	lr, r2
    fc4c:	4610      	mov	r0, r2
    fc4e:	4639      	mov	r1, r7
		switch (*sp) {
    fc50:	f817 3b01 	ldrb.w	r3, [r7], #1
    fc54:	2b2b      	cmp	r3, #43	; 0x2b
    fc56:	f000 809d 	beq.w	fd94 <cbvprintf+0x194>
    fc5a:	f200 8094 	bhi.w	fd86 <cbvprintf+0x186>
    fc5e:	2b20      	cmp	r3, #32
    fc60:	f000 809b 	beq.w	fd9a <cbvprintf+0x19a>
    fc64:	2b23      	cmp	r3, #35	; 0x23
    fc66:	f000 809a 	beq.w	fd9e <cbvprintf+0x19e>
    fc6a:	b128      	cbz	r0, fc78 <cbvprintf+0x78>
    fc6c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fc70:	f040 0004 	orr.w	r0, r0, #4
    fc74:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fc78:	f1be 0f00 	cmp.w	lr, #0
    fc7c:	d005      	beq.n	fc8a <cbvprintf+0x8a>
    fc7e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fc82:	f040 0008 	orr.w	r0, r0, #8
    fc86:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fc8a:	b12e      	cbz	r6, fc98 <cbvprintf+0x98>
    fc8c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fc90:	f040 0010 	orr.w	r0, r0, #16
    fc94:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fc98:	f1bc 0f00 	cmp.w	ip, #0
    fc9c:	d005      	beq.n	fcaa <cbvprintf+0xaa>
    fc9e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fca2:	f040 0020 	orr.w	r0, r0, #32
    fca6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fcaa:	b12a      	cbz	r2, fcb8 <cbvprintf+0xb8>
    fcac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    fcb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fcb4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    fcb8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    fcbc:	f002 0044 	and.w	r0, r2, #68	; 0x44
    fcc0:	2844      	cmp	r0, #68	; 0x44
    fcc2:	d103      	bne.n	fccc <cbvprintf+0xcc>
		conv->flag_zero = false;
    fcc4:	f36f 1286 	bfc	r2, #6, #1
    fcc8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    fccc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    fcd0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    fcd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    fcd6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    fcda:	d17b      	bne.n	fdd4 <cbvprintf+0x1d4>
		conv->width_star = true;
    fcdc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    fce0:	f042 0201 	orr.w	r2, r2, #1
    fce4:	1c4b      	adds	r3, r1, #1
    fce6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    fcea:	781a      	ldrb	r2, [r3, #0]
    fcec:	2a2e      	cmp	r2, #46	; 0x2e
    fcee:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    fcf2:	bf0c      	ite	eq
    fcf4:	2101      	moveq	r1, #1
    fcf6:	2100      	movne	r1, #0
    fcf8:	f361 0241 	bfi	r2, r1, #1, #1
    fcfc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    fd00:	d174      	bne.n	fdec <cbvprintf+0x1ec>
	if (*sp == '*') {
    fd02:	785a      	ldrb	r2, [r3, #1]
    fd04:	2a2a      	cmp	r2, #42	; 0x2a
    fd06:	d06a      	beq.n	fdde <cbvprintf+0x1de>
    fd08:	3301      	adds	r3, #1
	size_t val = 0;
    fd0a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    fd0c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    fd0e:	4618      	mov	r0, r3
    fd10:	f810 2b01 	ldrb.w	r2, [r0], #1
    fd14:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    fd18:	2f09      	cmp	r7, #9
    fd1a:	f240 808e 	bls.w	fe3a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    fd1e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    fd22:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    fd24:	f3c2 0040 	ubfx	r0, r2, #1, #1
    fd28:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    fd2c:	f361 0241 	bfi	r2, r1, #1, #1
    fd30:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    fd34:	e05a      	b.n	fdec <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    fd36:	f10a 0702 	add.w	r7, sl, #2
    fd3a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    fd3e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    fd42:	07d9      	lsls	r1, r3, #31
    fd44:	f140 8149 	bpl.w	ffda <cbvprintf+0x3da>
			width = va_arg(ap, int);
    fd48:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    fd4c:	f1b9 0f00 	cmp.w	r9, #0
    fd50:	da07      	bge.n	fd62 <cbvprintf+0x162>
				conv->flag_dash = true;
    fd52:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    fd56:	f042 0204 	orr.w	r2, r2, #4
    fd5a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    fd5e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    fd62:	075a      	lsls	r2, r3, #29
    fd64:	f140 8142 	bpl.w	ffec <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    fd68:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    fd6c:	f1b8 0f00 	cmp.w	r8, #0
    fd70:	f280 8141 	bge.w	fff6 <cbvprintf+0x3f6>
				conv->prec_present = false;
    fd74:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    fd78:	f36f 0341 	bfc	r3, #1, #1
    fd7c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    fd80:	f04f 38ff 	mov.w	r8, #4294967295
    fd84:	e137      	b.n	fff6 <cbvprintf+0x3f6>
		switch (*sp) {
    fd86:	2b2d      	cmp	r3, #45	; 0x2d
    fd88:	d00c      	beq.n	fda4 <cbvprintf+0x1a4>
    fd8a:	2b30      	cmp	r3, #48	; 0x30
    fd8c:	f47f af6d 	bne.w	fc6a <cbvprintf+0x6a>
			conv->flag_zero = true;
    fd90:	2201      	movs	r2, #1
	} while (loop);
    fd92:	e75c      	b.n	fc4e <cbvprintf+0x4e>
			conv->flag_plus = true;
    fd94:	f04f 0e01 	mov.w	lr, #1
    fd98:	e759      	b.n	fc4e <cbvprintf+0x4e>
			conv->flag_space = true;
    fd9a:	2601      	movs	r6, #1
    fd9c:	e757      	b.n	fc4e <cbvprintf+0x4e>
			conv->flag_hash = true;
    fd9e:	f04f 0c01 	mov.w	ip, #1
    fda2:	e754      	b.n	fc4e <cbvprintf+0x4e>
		switch (*sp) {
    fda4:	2001      	movs	r0, #1
    fda6:	e752      	b.n	fc4e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    fda8:	fb0c 0202 	mla	r2, ip, r2, r0
    fdac:	3a30      	subs	r2, #48	; 0x30
    fdae:	4633      	mov	r3, r6
    fdb0:	461e      	mov	r6, r3
    fdb2:	f816 0b01 	ldrb.w	r0, [r6], #1
    fdb6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    fdba:	2f09      	cmp	r7, #9
    fdbc:	d9f4      	bls.n	fda8 <cbvprintf+0x1a8>
	if (sp != wp) {
    fdbe:	4299      	cmp	r1, r3
    fdc0:	d093      	beq.n	fcea <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    fdc2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    fdc6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    fdc8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    fdca:	f362 0141 	bfi	r1, r2, #1, #1
    fdce:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    fdd2:	e78a      	b.n	fcea <cbvprintf+0xea>
    fdd4:	460b      	mov	r3, r1
	size_t val = 0;
    fdd6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    fdd8:	f04f 0c0a 	mov.w	ip, #10
    fddc:	e7e8      	b.n	fdb0 <cbvprintf+0x1b0>
		conv->prec_star = true;
    fdde:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    fde2:	f042 0204 	orr.w	r2, r2, #4
    fde6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    fdea:	3302      	adds	r3, #2
	switch (*sp) {
    fdec:	461f      	mov	r7, r3
    fdee:	f817 2b01 	ldrb.w	r2, [r7], #1
    fdf2:	2a6c      	cmp	r2, #108	; 0x6c
    fdf4:	d041      	beq.n	fe7a <cbvprintf+0x27a>
    fdf6:	d825      	bhi.n	fe44 <cbvprintf+0x244>
    fdf8:	2a68      	cmp	r2, #104	; 0x68
    fdfa:	d02b      	beq.n	fe54 <cbvprintf+0x254>
    fdfc:	2a6a      	cmp	r2, #106	; 0x6a
    fdfe:	d046      	beq.n	fe8e <cbvprintf+0x28e>
    fe00:	2a4c      	cmp	r2, #76	; 0x4c
    fe02:	d04c      	beq.n	fe9e <cbvprintf+0x29e>
    fe04:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    fe06:	f817 2b01 	ldrb.w	r2, [r7], #1
    fe0a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    fe0e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    fe12:	2a78      	cmp	r2, #120	; 0x78
    fe14:	f200 80d9 	bhi.w	ffca <cbvprintf+0x3ca>
    fe18:	2a57      	cmp	r2, #87	; 0x57
    fe1a:	d84d      	bhi.n	feb8 <cbvprintf+0x2b8>
    fe1c:	2a41      	cmp	r2, #65	; 0x41
    fe1e:	d003      	beq.n	fe28 <cbvprintf+0x228>
    fe20:	3a45      	subs	r2, #69	; 0x45
    fe22:	2a02      	cmp	r2, #2
    fe24:	f200 80d1 	bhi.w	ffca <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    fe28:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    fe2c:	2204      	movs	r2, #4
    fe2e:	f362 0302 	bfi	r3, r2, #0, #3
    fe32:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    fe36:	2301      	movs	r3, #1
			break;
    fe38:	e09e      	b.n	ff78 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    fe3a:	fb06 2101 	mla	r1, r6, r1, r2
    fe3e:	3930      	subs	r1, #48	; 0x30
    fe40:	4603      	mov	r3, r0
    fe42:	e764      	b.n	fd0e <cbvprintf+0x10e>
	switch (*sp) {
    fe44:	2a74      	cmp	r2, #116	; 0x74
    fe46:	d026      	beq.n	fe96 <cbvprintf+0x296>
    fe48:	2a7a      	cmp	r2, #122	; 0x7a
    fe4a:	d1db      	bne.n	fe04 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    fe4c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    fe50:	2206      	movs	r2, #6
    fe52:	e00d      	b.n	fe70 <cbvprintf+0x270>
		if (*++sp == 'h') {
    fe54:	785a      	ldrb	r2, [r3, #1]
    fe56:	2a68      	cmp	r2, #104	; 0x68
    fe58:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    fe5c:	d106      	bne.n	fe6c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    fe5e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    fe60:	f361 02c6 	bfi	r2, r1, #3, #4
    fe64:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    fe68:	1c9f      	adds	r7, r3, #2
    fe6a:	e7cc      	b.n	fe06 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    fe6c:	4613      	mov	r3, r2
    fe6e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    fe70:	f362 03c6 	bfi	r3, r2, #3, #4
    fe74:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    fe78:	e7c5      	b.n	fe06 <cbvprintf+0x206>
		if (*++sp == 'l') {
    fe7a:	785a      	ldrb	r2, [r3, #1]
    fe7c:	2a6c      	cmp	r2, #108	; 0x6c
    fe7e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    fe82:	d101      	bne.n	fe88 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    fe84:	2104      	movs	r1, #4
    fe86:	e7eb      	b.n	fe60 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    fe88:	4613      	mov	r3, r2
    fe8a:	2203      	movs	r2, #3
    fe8c:	e7f0      	b.n	fe70 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    fe8e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    fe92:	2205      	movs	r2, #5
    fe94:	e7ec      	b.n	fe70 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    fe96:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    fe9a:	2207      	movs	r2, #7
    fe9c:	e7e8      	b.n	fe70 <cbvprintf+0x270>
		conv->unsupported = true;
    fe9e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    fea2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    fea6:	f023 0302 	bic.w	r3, r3, #2
    feaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    feae:	f043 0302 	orr.w	r3, r3, #2
    feb2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    feb6:	e7a6      	b.n	fe06 <cbvprintf+0x206>
    feb8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    febc:	2920      	cmp	r1, #32
    febe:	f200 8084 	bhi.w	ffca <cbvprintf+0x3ca>
    fec2:	a001      	add	r0, pc, #4	; (adr r0, fec8 <cbvprintf+0x2c8>)
    fec4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    fec8:	0000ff8d 	.word	0x0000ff8d
    fecc:	0000ffcb 	.word	0x0000ffcb
    fed0:	0000ffcb 	.word	0x0000ffcb
    fed4:	0000ffcb 	.word	0x0000ffcb
    fed8:	0000ffcb 	.word	0x0000ffcb
    fedc:	0000ffcb 	.word	0x0000ffcb
    fee0:	0000ffcb 	.word	0x0000ffcb
    fee4:	0000ffcb 	.word	0x0000ffcb
    fee8:	0000ffcb 	.word	0x0000ffcb
    feec:	0000fe29 	.word	0x0000fe29
    fef0:	0000ffcb 	.word	0x0000ffcb
    fef4:	0000ff8d 	.word	0x0000ff8d
    fef8:	0000ff4d 	.word	0x0000ff4d
    fefc:	0000fe29 	.word	0x0000fe29
    ff00:	0000fe29 	.word	0x0000fe29
    ff04:	0000fe29 	.word	0x0000fe29
    ff08:	0000ffcb 	.word	0x0000ffcb
    ff0c:	0000ff4d 	.word	0x0000ff4d
    ff10:	0000ffcb 	.word	0x0000ffcb
    ff14:	0000ffcb 	.word	0x0000ffcb
    ff18:	0000ffcb 	.word	0x0000ffcb
    ff1c:	0000ffcb 	.word	0x0000ffcb
    ff20:	0000ff95 	.word	0x0000ff95
    ff24:	0000ff8d 	.word	0x0000ff8d
    ff28:	0000ffb1 	.word	0x0000ffb1
    ff2c:	0000ffcb 	.word	0x0000ffcb
    ff30:	0000ffcb 	.word	0x0000ffcb
    ff34:	0000ffb1 	.word	0x0000ffb1
    ff38:	0000ffcb 	.word	0x0000ffcb
    ff3c:	0000ff8d 	.word	0x0000ff8d
    ff40:	0000ffcb 	.word	0x0000ffcb
    ff44:	0000ffcb 	.word	0x0000ffcb
    ff48:	0000ff8d 	.word	0x0000ff8d
		conv->specifier_cat = SPECIFIER_SINT;
    ff4c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    ff50:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    ff52:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ff56:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ff5a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ff5c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    ff60:	bf02      	ittt	eq
    ff62:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    ff66:	f041 0101 	orreq.w	r1, r1, #1
    ff6a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    ff6e:	2a63      	cmp	r2, #99	; 0x63
    ff70:	d131      	bne.n	ffd6 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ff72:	3b00      	subs	r3, #0
    ff74:	bf18      	it	ne
    ff76:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    ff78:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    ff7c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ff80:	430b      	orrs	r3, r1
    ff82:	f363 0241 	bfi	r2, r3, #1, #1
    ff86:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    ff8a:	e6d8      	b.n	fd3e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    ff8c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    ff90:	2002      	movs	r0, #2
    ff92:	e7de      	b.n	ff52 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    ff94:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ff98:	f003 0378 	and.w	r3, r3, #120	; 0x78
    ff9c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    ffa0:	2103      	movs	r1, #3
    ffa2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ffa6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    ffa8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ffac:	4143      	adcs	r3, r0
    ffae:	e7e3      	b.n	ff78 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    ffb0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    ffb4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    ffb6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ffba:	f361 0202 	bfi	r2, r1, #0, #3
    ffbe:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    ffc2:	bf14      	ite	ne
    ffc4:	2301      	movne	r3, #1
    ffc6:	2300      	moveq	r3, #0
    ffc8:	e7d6      	b.n	ff78 <cbvprintf+0x378>
		conv->invalid = true;
    ffca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    ffce:	f043 0301 	orr.w	r3, r3, #1
    ffd2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    ffd6:	2300      	movs	r3, #0
    ffd8:	e7ce      	b.n	ff78 <cbvprintf+0x378>
		} else if (conv->width_present) {
    ffda:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    ffde:	2a00      	cmp	r2, #0
			width = conv->width_value;
    ffe0:	bfb4      	ite	lt
    ffe2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    ffe6:	f04f 39ff 	movge.w	r9, #4294967295
    ffea:	e6ba      	b.n	fd62 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    ffec:	079b      	lsls	r3, r3, #30
    ffee:	f57f aec7 	bpl.w	fd80 <cbvprintf+0x180>
			precision = conv->prec_value;
    fff2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    fff6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    fffa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    fffc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   10000:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   10004:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10008:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1000a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1000e:	d136      	bne.n	1007e <CONFIG_PM_SRAM_SIZE+0x7e>
			switch (length_mod) {
   10010:	1ed3      	subs	r3, r2, #3
   10012:	2b04      	cmp	r3, #4
   10014:	d820      	bhi.n	10058 <CONFIG_PM_SRAM_SIZE+0x58>
   10016:	e8df f003 	tbb	[pc, r3]
   1001a:	0703      	.short	0x0703
   1001c:	1f07      	.short	0x1f07
   1001e:	1f          	.byte	0x1f
   1001f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   10020:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   10024:	17c1      	asrs	r1, r0, #31
   10026:	e004      	b.n	10032 <CONFIG_PM_SRAM_SIZE+0x32>
					(sint_value_type)va_arg(ap, intmax_t);
   10028:	3407      	adds	r4, #7
   1002a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1002e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   10032:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   10036:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1003a:	f013 0603 	ands.w	r6, r3, #3
   1003e:	d054      	beq.n	100ea <CONFIG_PM_SRAM_SIZE+0xea>
			OUTS(sp, fp);
   10040:	9802      	ldr	r0, [sp, #8]
   10042:	463b      	mov	r3, r7
   10044:	4652      	mov	r2, sl
   10046:	4659      	mov	r1, fp
   10048:	f00c f840 	bl	1c0cc <outs>
   1004c:	2800      	cmp	r0, #0
   1004e:	f2c0 8143 	blt.w	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
   10052:	4405      	add	r5, r0
			continue;
   10054:	46ba      	mov	sl, r7
   10056:	e5db      	b.n	fc10 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10058:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   1005c:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1005e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   10062:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   10066:	d105      	bne.n	10074 <CONFIG_PM_SRAM_SIZE+0x74>
				value->uint = (unsigned char)value->uint;
   10068:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   1006c:	930a      	str	r3, [sp, #40]	; 0x28
   1006e:	2300      	movs	r3, #0
   10070:	930b      	str	r3, [sp, #44]	; 0x2c
   10072:	e7e0      	b.n	10036 <CONFIG_PM_SRAM_SIZE+0x36>
			} else if (length_mod == LENGTH_H) {
   10074:	2a02      	cmp	r2, #2
   10076:	d1de      	bne.n	10036 <CONFIG_PM_SRAM_SIZE+0x36>
				value->sint = (short)value->sint;
   10078:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   1007c:	e7d2      	b.n	10024 <CONFIG_PM_SRAM_SIZE+0x24>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1007e:	2b02      	cmp	r3, #2
   10080:	d123      	bne.n	100ca <CONFIG_PM_SRAM_SIZE+0xca>
			switch (length_mod) {
   10082:	1ed3      	subs	r3, r2, #3
   10084:	2b04      	cmp	r3, #4
   10086:	d813      	bhi.n	100b0 <CONFIG_PM_SRAM_SIZE+0xb0>
   10088:	e8df f003 	tbb	[pc, r3]
   1008c:	120a0a03 	.word	0x120a0a03
   10090:	12          	.byte	0x12
   10091:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   10092:	6820      	ldr	r0, [r4, #0]
   10094:	900a      	str	r0, [sp, #40]	; 0x28
   10096:	2100      	movs	r1, #0
   10098:	1d23      	adds	r3, r4, #4
   1009a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   1009c:	461c      	mov	r4, r3
   1009e:	e7ca      	b.n	10036 <CONFIG_PM_SRAM_SIZE+0x36>
					(uint_value_type)va_arg(ap,
   100a0:	3407      	adds	r4, #7
   100a2:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   100a6:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   100aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   100ae:	e7f5      	b.n	1009c <CONFIG_PM_SRAM_SIZE+0x9c>
					(uint_value_type)va_arg(ap, size_t);
   100b0:	f854 3b04 	ldr.w	r3, [r4], #4
   100b4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   100b6:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   100b8:	f04f 0300 	mov.w	r3, #0
   100bc:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   100be:	d0d3      	beq.n	10068 <CONFIG_PM_SRAM_SIZE+0x68>
			} else if (length_mod == LENGTH_H) {
   100c0:	2a02      	cmp	r2, #2
   100c2:	d1b8      	bne.n	10036 <CONFIG_PM_SRAM_SIZE+0x36>
				value->uint = (unsigned short)value->uint;
   100c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   100c8:	e7d0      	b.n	1006c <CONFIG_PM_SRAM_SIZE+0x6c>
		} else if (specifier_cat == SPECIFIER_FP) {
   100ca:	2b04      	cmp	r3, #4
   100cc:	d107      	bne.n	100de <CONFIG_PM_SRAM_SIZE+0xde>
			if (length_mod == LENGTH_UPPER_L) {
   100ce:	3407      	adds	r4, #7
   100d0:	f024 0407 	bic.w	r4, r4, #7
   100d4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   100d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   100dc:	e7ab      	b.n	10036 <CONFIG_PM_SRAM_SIZE+0x36>
		} else if (specifier_cat == SPECIFIER_PTR) {
   100de:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   100e0:	bf04      	itt	eq
   100e2:	f854 3b04 	ldreq.w	r3, [r4], #4
   100e6:	930a      	streq	r3, [sp, #40]	; 0x28
   100e8:	e7a5      	b.n	10036 <CONFIG_PM_SRAM_SIZE+0x36>
		switch (conv->specifier) {
   100ea:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   100ee:	2878      	cmp	r0, #120	; 0x78
   100f0:	d8b0      	bhi.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
   100f2:	2862      	cmp	r0, #98	; 0x62
   100f4:	d822      	bhi.n	1013c <CONFIG_PM_SRAM_SIZE+0x13c>
   100f6:	2825      	cmp	r0, #37	; 0x25
   100f8:	f43f ad93 	beq.w	fc22 <cbvprintf+0x22>
   100fc:	2858      	cmp	r0, #88	; 0x58
   100fe:	d1a9      	bne.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
			bps = encode_uint(value->uint, conv, buf, bpe);
   10100:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10104:	9300      	str	r3, [sp, #0]
   10106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1010a:	ab04      	add	r3, sp, #16
   1010c:	aa0c      	add	r2, sp, #48	; 0x30
   1010e:	f00b ff92 	bl	1c036 <encode_uint>
   10112:	4682      	mov	sl, r0
			if (precision >= 0) {
   10114:	f1b8 0f00 	cmp.w	r8, #0
   10118:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1011c:	db0c      	blt.n	10138 <CONFIG_PM_SRAM_SIZE+0x138>
				conv->flag_zero = false;
   1011e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   10122:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   10126:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1012a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   1012c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   10130:	d902      	bls.n	10138 <CONFIG_PM_SRAM_SIZE+0x138>
					conv->pad0_value = precision - (int)len;
   10132:	eba8 0303 	sub.w	r3, r8, r3
   10136:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   10138:	4680      	mov	r8, r0
   1013a:	e03d      	b.n	101b8 <CONFIG_PM_SRAM_SIZE+0x1b8>
   1013c:	3863      	subs	r0, #99	; 0x63
   1013e:	2815      	cmp	r0, #21
   10140:	d888      	bhi.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
   10142:	a101      	add	r1, pc, #4	; (adr r1, 10148 <CONFIG_PM_SRAM_SIZE+0x148>)
   10144:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   10148:	000101c9 	.word	0x000101c9
   1014c:	0001022d 	.word	0x0001022d
   10150:	00010055 	.word	0x00010055
   10154:	00010055 	.word	0x00010055
   10158:	00010055 	.word	0x00010055
   1015c:	00010055 	.word	0x00010055
   10160:	0001022d 	.word	0x0001022d
   10164:	00010055 	.word	0x00010055
   10168:	00010055 	.word	0x00010055
   1016c:	00010055 	.word	0x00010055
   10170:	00010055 	.word	0x00010055
   10174:	0001028b 	.word	0x0001028b
   10178:	00010259 	.word	0x00010259
   1017c:	0001025d 	.word	0x0001025d
   10180:	00010055 	.word	0x00010055
   10184:	00010055 	.word	0x00010055
   10188:	000101a1 	.word	0x000101a1
   1018c:	00010055 	.word	0x00010055
   10190:	00010259 	.word	0x00010259
   10194:	00010055 	.word	0x00010055
   10198:	00010055 	.word	0x00010055
   1019c:	00010259 	.word	0x00010259
			if (precision >= 0) {
   101a0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   101a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   101a8:	db0a      	blt.n	101c0 <CONFIG_PM_SRAM_SIZE+0x1c0>
				len = strnlen(bps, precision);
   101aa:	4641      	mov	r1, r8
   101ac:	4650      	mov	r0, sl
   101ae:	f00d fade 	bl	1d76e <strnlen>
			bpe = bps + len;
   101b2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   101b6:	2600      	movs	r6, #0
		if (bps == NULL) {
   101b8:	f1ba 0f00 	cmp.w	sl, #0
   101bc:	d10c      	bne.n	101d8 <CONFIG_PM_SRAM_SIZE+0x1d8>
   101be:	e749      	b.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
				len = strlen(bps);
   101c0:	4650      	mov	r0, sl
   101c2:	f00d facd 	bl	1d760 <strlen>
   101c6:	e7f4      	b.n	101b2 <CONFIG_PM_SRAM_SIZE+0x1b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   101c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   101ca:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   101ce:	2600      	movs	r6, #0
			bpe = buf + 1;
   101d0:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   101d4:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   101d8:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   101dc:	b106      	cbz	r6, 101e0 <CONFIG_PM_SRAM_SIZE+0x1e0>
			nj_len += 1U;
   101de:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   101e0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   101e4:	06d0      	lsls	r0, r2, #27
   101e6:	d56b      	bpl.n	102c0 <CONFIG_PM_SRAM_SIZE+0x2c0>
			nj_len += 2U;
   101e8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   101ea:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   101ec:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   101ee:	bf48      	it	mi
   101f0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   101f2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   101f4:	bf48      	it	mi
   101f6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   101f8:	f1b9 0f00 	cmp.w	r9, #0
   101fc:	dd79      	ble.n	102f2 <CONFIG_PM_SRAM_SIZE+0x2f2>
			if (!conv->flag_dash) {
   101fe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   10202:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   10206:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1020a:	9303      	str	r3, [sp, #12]
   1020c:	0753      	lsls	r3, r2, #29
   1020e:	d470      	bmi.n	102f2 <CONFIG_PM_SRAM_SIZE+0x2f2>
				if (conv->flag_zero) {
   10210:	0650      	lsls	r0, r2, #25
   10212:	d564      	bpl.n	102de <CONFIG_PM_SRAM_SIZE+0x2de>
					if (sign != 0) {
   10214:	b146      	cbz	r6, 10228 <CONFIG_PM_SRAM_SIZE+0x228>
						OUTC(sign);
   10216:	9b02      	ldr	r3, [sp, #8]
   10218:	4659      	mov	r1, fp
   1021a:	4630      	mov	r0, r6
   1021c:	4798      	blx	r3
   1021e:	2800      	cmp	r0, #0
   10220:	db5a      	blt.n	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
						sign = 0;
   10222:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   10224:	3501      	adds	r5, #1
						sign = 0;
   10226:	461e      	mov	r6, r3
					pad = '0';
   10228:	2330      	movs	r3, #48	; 0x30
   1022a:	e059      	b.n	102e0 <CONFIG_PM_SRAM_SIZE+0x2e0>
			if (conv->flag_plus) {
   1022c:	071e      	lsls	r6, r3, #28
   1022e:	d411      	bmi.n	10254 <CONFIG_PM_SRAM_SIZE+0x254>
				sign = ' ';
   10230:	f013 0610 	ands.w	r6, r3, #16
   10234:	bf18      	it	ne
   10236:	2620      	movne	r6, #32
			sint = value->sint;
   10238:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   1023c:	2a00      	cmp	r2, #0
   1023e:	f173 0100 	sbcs.w	r1, r3, #0
   10242:	f6bf af5d 	bge.w	10100 <CONFIG_PM_SRAM_SIZE+0x100>
				value->uint = (uint_value_type)-sint;
   10246:	4252      	negs	r2, r2
   10248:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1024c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   10250:	262d      	movs	r6, #45	; 0x2d
   10252:	e755      	b.n	10100 <CONFIG_PM_SRAM_SIZE+0x100>
				sign = '+';
   10254:	262b      	movs	r6, #43	; 0x2b
   10256:	e7ef      	b.n	10238 <CONFIG_PM_SRAM_SIZE+0x238>
		switch (conv->specifier) {
   10258:	2600      	movs	r6, #0
   1025a:	e751      	b.n	10100 <CONFIG_PM_SRAM_SIZE+0x100>
			if (value->ptr != NULL) {
   1025c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1025e:	b348      	cbz	r0, 102b4 <CONFIG_PM_SRAM_SIZE+0x2b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10260:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10264:	9300      	str	r3, [sp, #0]
   10266:	aa0c      	add	r2, sp, #48	; 0x30
   10268:	ab04      	add	r3, sp, #16
   1026a:	2100      	movs	r1, #0
   1026c:	f00b fee3 	bl	1c036 <encode_uint>
				conv->altform_0c = true;
   10270:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   10274:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10278:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1027c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10280:	4682      	mov	sl, r0
				conv->altform_0c = true;
   10282:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   10286:	2600      	movs	r6, #0
				goto prec_int_pad0;
   10288:	e744      	b.n	10114 <CONFIG_PM_SRAM_SIZE+0x114>
				store_count(conv, value->ptr, count);
   1028a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   1028c:	2a07      	cmp	r2, #7
   1028e:	f63f aee1 	bhi.w	10054 <CONFIG_PM_SRAM_SIZE+0x54>
   10292:	e8df f002 	tbb	[pc, r2]
   10296:	040d      	.short	0x040d
   10298:	08080d06 	.word	0x08080d06
   1029c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1029e:	701d      	strb	r5, [r3, #0]
		break;
   102a0:	e6d8      	b.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
		*(short *)dp = (short)count;
   102a2:	801d      	strh	r5, [r3, #0]
		break;
   102a4:	e6d6      	b.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
		*(intmax_t *)dp = (intmax_t)count;
   102a6:	4628      	mov	r0, r5
   102a8:	17e9      	asrs	r1, r5, #31
   102aa:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   102ae:	e6d1      	b.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   102b0:	601d      	str	r5, [r3, #0]
		break;
   102b2:	e6cf      	b.n	10054 <CONFIG_PM_SRAM_SIZE+0x54>
			bpe = bps + 5;
   102b4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1037c <CONFIG_PM_SRAM_SIZE+0x37c>
   102b8:	4606      	mov	r6, r0
			bps = "(nil)";
   102ba:	f1a8 0a05 	sub.w	sl, r8, #5
   102be:	e78b      	b.n	101d8 <CONFIG_PM_SRAM_SIZE+0x1d8>
		} else if (conv->altform_0) {
   102c0:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   102c2:	bf48      	it	mi
   102c4:	3301      	addmi	r3, #1
   102c6:	e790      	b.n	101ea <CONFIG_PM_SRAM_SIZE+0x1ea>
					OUTC(pad);
   102c8:	4618      	mov	r0, r3
   102ca:	9303      	str	r3, [sp, #12]
   102cc:	4659      	mov	r1, fp
   102ce:	9b02      	ldr	r3, [sp, #8]
   102d0:	4798      	blx	r3
   102d2:	2800      	cmp	r0, #0
   102d4:	9b03      	ldr	r3, [sp, #12]
   102d6:	da04      	bge.n	102e2 <CONFIG_PM_SRAM_SIZE+0x2e2>
#undef OUTS
#undef OUTC
}
   102d8:	b011      	add	sp, #68	; 0x44
   102da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   102de:	2320      	movs	r3, #32
   102e0:	444d      	add	r5, r9
   102e2:	464a      	mov	r2, r9
				while (width-- > 0) {
   102e4:	2a00      	cmp	r2, #0
   102e6:	eba5 0109 	sub.w	r1, r5, r9
   102ea:	f109 39ff 	add.w	r9, r9, #4294967295
   102ee:	dceb      	bgt.n	102c8 <CONFIG_PM_SRAM_SIZE+0x2c8>
   102f0:	460d      	mov	r5, r1
		if (sign != 0) {
   102f2:	b136      	cbz	r6, 10302 <CONFIG_PM_SRAM_SIZE+0x302>
			OUTC(sign);
   102f4:	9b02      	ldr	r3, [sp, #8]
   102f6:	4659      	mov	r1, fp
   102f8:	4630      	mov	r0, r6
   102fa:	4798      	blx	r3
   102fc:	2800      	cmp	r0, #0
   102fe:	dbeb      	blt.n	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
   10300:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   10302:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10306:	06d9      	lsls	r1, r3, #27
   10308:	d401      	bmi.n	1030e <CONFIG_PM_SRAM_SIZE+0x30e>
   1030a:	071a      	lsls	r2, r3, #28
   1030c:	d506      	bpl.n	1031c <CONFIG_PM_SRAM_SIZE+0x31c>
				OUTC('0');
   1030e:	9b02      	ldr	r3, [sp, #8]
   10310:	4659      	mov	r1, fp
   10312:	2030      	movs	r0, #48	; 0x30
   10314:	4798      	blx	r3
   10316:	2800      	cmp	r0, #0
   10318:	dbde      	blt.n	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
   1031a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1031c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10320:	06db      	lsls	r3, r3, #27
   10322:	d507      	bpl.n	10334 <CONFIG_PM_SRAM_SIZE+0x334>
				OUTC(conv->specifier);
   10324:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   10328:	9b02      	ldr	r3, [sp, #8]
   1032a:	4659      	mov	r1, fp
   1032c:	4798      	blx	r3
   1032e:	2800      	cmp	r0, #0
   10330:	dbd2      	blt.n	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
   10332:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10334:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   10336:	442e      	add	r6, r5
   10338:	1b73      	subs	r3, r6, r5
   1033a:	2b00      	cmp	r3, #0
   1033c:	dc16      	bgt.n	1036c <CONFIG_PM_SRAM_SIZE+0x36c>
			OUTS(bps, bpe);
   1033e:	9802      	ldr	r0, [sp, #8]
   10340:	4643      	mov	r3, r8
   10342:	4652      	mov	r2, sl
   10344:	4659      	mov	r1, fp
   10346:	f00b fec1 	bl	1c0cc <outs>
   1034a:	2800      	cmp	r0, #0
   1034c:	dbc4      	blt.n	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
   1034e:	4405      	add	r5, r0
		while (width > 0) {
   10350:	44a9      	add	r9, r5
   10352:	eba9 0305 	sub.w	r3, r9, r5
   10356:	2b00      	cmp	r3, #0
   10358:	f77f ae7c 	ble.w	10054 <CONFIG_PM_SRAM_SIZE+0x54>
			OUTC(' ');
   1035c:	9b02      	ldr	r3, [sp, #8]
   1035e:	4659      	mov	r1, fp
   10360:	2020      	movs	r0, #32
   10362:	4798      	blx	r3
   10364:	2800      	cmp	r0, #0
   10366:	dbb7      	blt.n	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
   10368:	3501      	adds	r5, #1
			--width;
   1036a:	e7f2      	b.n	10352 <CONFIG_PM_SRAM_SIZE+0x352>
				OUTC('0');
   1036c:	9b02      	ldr	r3, [sp, #8]
   1036e:	4659      	mov	r1, fp
   10370:	2030      	movs	r0, #48	; 0x30
   10372:	4798      	blx	r3
   10374:	2800      	cmp	r0, #0
   10376:	dbaf      	blt.n	102d8 <CONFIG_PM_SRAM_SIZE+0x2d8>
   10378:	3501      	adds	r5, #1
   1037a:	e7dd      	b.n	10338 <CONFIG_PM_SRAM_SIZE+0x338>
   1037c:	000212ea 	.word	0x000212ea

00010380 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   10380:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   10382:	4910      	ldr	r1, [pc, #64]	; (103c4 <enable_logger+0x44>)
   10384:	4810      	ldr	r0, [pc, #64]	; (103c8 <enable_logger+0x48>)
{
   10386:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   10388:	2200      	movs	r2, #0
   1038a:	f00f ffdc 	bl	20346 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1038e:	4d0f      	ldr	r5, [pc, #60]	; (103cc <enable_logger+0x4c>)
   10390:	490f      	ldr	r1, [pc, #60]	; (103d0 <enable_logger+0x50>)
   10392:	2200      	movs	r2, #0
   10394:	2300      	movs	r3, #0
   10396:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1039a:	2400      	movs	r4, #0
   1039c:	230e      	movs	r3, #14
   1039e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   103a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   103a6:	4b0b      	ldr	r3, [pc, #44]	; (103d4 <enable_logger+0x54>)
   103a8:	9400      	str	r4, [sp, #0]
   103aa:	f44f 7240 	mov.w	r2, #768	; 0x300
   103ae:	4628      	mov	r0, r5
   103b0:	f00a f862 	bl	1a478 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   103b4:	4908      	ldr	r1, [pc, #32]	; (103d8 <enable_logger+0x58>)
   103b6:	4628      	mov	r0, r5
   103b8:	f00f fc5d 	bl	1fc76 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   103bc:	4620      	mov	r0, r4
   103be:	b009      	add	sp, #36	; 0x24
   103c0:	bd30      	pop	{r4, r5, pc}
   103c2:	bf00      	nop
   103c4:	000103dd 	.word	0x000103dd
   103c8:	200013e0 	.word	0x200013e0
   103cc:	20001418 	.word	0x20001418
   103d0:	20002920 	.word	0x20002920
   103d4:	00010805 	.word	0x00010805
   103d8:	000212eb 	.word	0x000212eb

000103dc <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   103dc:	4801      	ldr	r0, [pc, #4]	; (103e4 <log_process_thread_timer_expiry_fn+0x8>)
   103de:	f00a b9dd 	b.w	1a79c <z_impl_k_sem_give>
   103e2:	bf00      	nop
   103e4:	20000748 	.word	0x20000748

000103e8 <log_core_init>:
{
   103e8:	b510      	push	{r4, lr}
	panic_mode = false;
   103ea:	4b0b      	ldr	r3, [pc, #44]	; (10418 <log_core_init+0x30>)
   103ec:	2200      	movs	r2, #0
   103ee:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   103f0:	4b0a      	ldr	r3, [pc, #40]	; (1041c <log_core_init+0x34>)
   103f2:	4a0b      	ldr	r2, [pc, #44]	; (10420 <log_core_init+0x38>)
   103f4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   103f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   103fa:	f000 fad9 	bl	109b0 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   103fe:	f000 fa63 	bl	108c8 <log_msg_pool_init>
		log_list_init(&list);
   10402:	4808      	ldr	r0, [pc, #32]	; (10424 <log_core_init+0x3c>)
   10404:	f00b fe79 	bl	1c0fa <log_list_init>
}
   10408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   1040c:	4906      	ldr	r1, [pc, #24]	; (10428 <log_core_init+0x40>)
   1040e:	4807      	ldr	r0, [pc, #28]	; (1042c <log_core_init+0x44>)
   10410:	2308      	movs	r3, #8
   10412:	2248      	movs	r2, #72	; 0x48
   10414:	f00f bbe5 	b.w	1fbe2 <k_mem_slab_init>
   10418:	20002052 	.word	0x20002052
   1041c:	20000450 	.word	0x20000450
   10420:	0001c139 	.word	0x0001c139
   10424:	20001d40 	.word	0x20001d40
   10428:	20005a68 	.word	0x20005a68
   1042c:	20001d48 	.word	0x20001d48

00010430 <get_msg>:
{
   10430:	b510      	push	{r4, lr}
   10432:	f04f 0340 	mov.w	r3, #64	; 0x40
   10436:	f3ef 8411 	mrs	r4, BASEPRI
   1043a:	f383 8811 	msr	BASEPRI, r3
   1043e:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   10442:	4804      	ldr	r0, [pc, #16]	; (10454 <get_msg+0x24>)
   10444:	f00b fe69 	bl	1c11a <log_list_head_get>
	__asm__ volatile(
   10448:	f384 8811 	msr	BASEPRI, r4
   1044c:	f3bf 8f6f 	isb	sy
}
   10450:	bd10      	pop	{r4, pc}
   10452:	bf00      	nop
   10454:	20001d40 	.word	0x20001d40

00010458 <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10458:	4b06      	ldr	r3, [pc, #24]	; (10474 <z_log_dropped+0x1c>)
   1045a:	f3bf 8f5b 	dmb	ish
   1045e:	e853 2f00 	ldrex	r2, [r3]
   10462:	3201      	adds	r2, #1
   10464:	e843 2100 	strex	r1, r2, [r3]
   10468:	2900      	cmp	r1, #0
   1046a:	d1f8      	bne.n	1045e <z_log_dropped+0x6>
   1046c:	f3bf 8f5b 	dmb	ish
}
   10470:	4770      	bx	lr
   10472:	bf00      	nop
   10474:	20001d38 	.word	0x20001d38

00010478 <z_log_dropped_read_and_clear>:
}
   10478:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1047a:	4b06      	ldr	r3, [pc, #24]	; (10494 <z_log_dropped_read_and_clear+0x1c>)
   1047c:	f3bf 8f5b 	dmb	ish
   10480:	4602      	mov	r2, r0
   10482:	e853 0f00 	ldrex	r0, [r3]
   10486:	e843 2100 	strex	r1, r2, [r3]
   1048a:	2900      	cmp	r1, #0
   1048c:	d1f9      	bne.n	10482 <z_log_dropped_read_and_clear+0xa>
   1048e:	f3bf 8f5b 	dmb	ish
   10492:	4770      	bx	lr
   10494:	20001d38 	.word	0x20001d38

00010498 <dropped_notify>:
{
   10498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1049a:	f7ff ffed 	bl	10478 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1049e:	4c0a      	ldr	r4, [pc, #40]	; (104c8 <dropped_notify+0x30>)
   104a0:	4d0a      	ldr	r5, [pc, #40]	; (104cc <dropped_notify+0x34>)
   104a2:	1b2d      	subs	r5, r5, r4
   104a4:	4607      	mov	r7, r0
   104a6:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   104a8:	2600      	movs	r6, #0
   104aa:	42ae      	cmp	r6, r5
   104ac:	db00      	blt.n	104b0 <dropped_notify+0x18>
}
   104ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   104b0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   104b2:	795b      	ldrb	r3, [r3, #5]
   104b4:	b12b      	cbz	r3, 104c2 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   104b6:	6823      	ldr	r3, [r4, #0]
   104b8:	691b      	ldr	r3, [r3, #16]
   104ba:	b113      	cbz	r3, 104c2 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   104bc:	4639      	mov	r1, r7
   104be:	4620      	mov	r0, r4
   104c0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   104c2:	3601      	adds	r6, #1
   104c4:	3410      	adds	r4, #16
   104c6:	e7f0      	b.n	104aa <dropped_notify+0x12>
   104c8:	0002093c 	.word	0x0002093c
   104cc:	0002093c 	.word	0x0002093c

000104d0 <log_backend_enable>:
	id += backend - log_backend_get(0);
   104d0:	4b09      	ldr	r3, [pc, #36]	; (104f8 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   104d2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   104d4:	1ac3      	subs	r3, r0, r3
   104d6:	111b      	asrs	r3, r3, #4
   104d8:	3301      	adds	r3, #1
{
   104da:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   104dc:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
   104de:	6843      	ldr	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   104e0:	4c06      	ldr	r4, [pc, #24]	; (104fc <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
   104e2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   104e4:	2201      	movs	r2, #1
   104e6:	715a      	strb	r2, [r3, #5]
   104e8:	7822      	ldrb	r2, [r4, #0]
   104ea:	b912      	cbnz	r2, 104f2 <log_backend_enable+0x22>
   104ec:	4804      	ldr	r0, [pc, #16]	; (10500 <log_backend_enable+0x30>)
   104ee:	f00a f955 	bl	1a79c <z_impl_k_sem_give>
	backend_attached = true;
   104f2:	2301      	movs	r3, #1
   104f4:	7023      	strb	r3, [r4, #0]
}
   104f6:	bd10      	pop	{r4, pc}
   104f8:	0002093c 	.word	0x0002093c
   104fc:	20002051 	.word	0x20002051
   10500:	20000748 	.word	0x20000748

00010504 <log_init>:
{
   10504:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10506:	4b12      	ldr	r3, [pc, #72]	; (10550 <log_init+0x4c>)
   10508:	f3bf 8f5b 	dmb	ish
   1050c:	e853 5f00 	ldrex	r5, [r3]
   10510:	1c6a      	adds	r2, r5, #1
   10512:	e843 2100 	strex	r1, r2, [r3]
   10516:	2900      	cmp	r1, #0
   10518:	d1f8      	bne.n	1050c <log_init+0x8>
   1051a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   1051e:	b92d      	cbnz	r5, 1052c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
   10520:	4c0c      	ldr	r4, [pc, #48]	; (10554 <log_init+0x50>)
   10522:	4e0d      	ldr	r6, [pc, #52]	; (10558 <log_init+0x54>)
   10524:	1b36      	subs	r6, r6, r4
   10526:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   10528:	42b5      	cmp	r5, r6
   1052a:	db00      	blt.n	1052e <log_init+0x2a>
}
   1052c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1052e:	7b23      	ldrb	r3, [r4, #12]
   10530:	b153      	cbz	r3, 10548 <log_init+0x44>
			if (backend->api->init != NULL) {
   10532:	6823      	ldr	r3, [r4, #0]
   10534:	699b      	ldr	r3, [r3, #24]
   10536:	b10b      	cbz	r3, 1053c <log_init+0x38>
				backend->api->init(backend);
   10538:	4620      	mov	r0, r4
   1053a:	4798      	blx	r3
			log_backend_enable(backend,
   1053c:	6863      	ldr	r3, [r4, #4]
   1053e:	2204      	movs	r2, #4
   10540:	6819      	ldr	r1, [r3, #0]
   10542:	4620      	mov	r0, r4
   10544:	f7ff ffc4 	bl	104d0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10548:	3501      	adds	r5, #1
   1054a:	3410      	adds	r4, #16
   1054c:	e7ec      	b.n	10528 <log_init+0x24>
   1054e:	bf00      	nop
   10550:	20001d3c 	.word	0x20001d3c
   10554:	0002093c 	.word	0x0002093c
   10558:	0002093c 	.word	0x0002093c

0001055c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   1055c:	4b16      	ldr	r3, [pc, #88]	; (105b8 <z_log_strdup+0x5c>)
   1055e:	4298      	cmp	r0, r3
{
   10560:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10562:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   10564:	d302      	bcc.n	1056c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   10566:	4b15      	ldr	r3, [pc, #84]	; (105bc <z_log_strdup+0x60>)
   10568:	4298      	cmp	r0, r3
   1056a:	d320      	bcc.n	105ae <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   1056c:	4814      	ldr	r0, [pc, #80]	; (105c0 <z_log_strdup+0x64>)
   1056e:	2200      	movs	r2, #0
   10570:	2300      	movs	r3, #0
   10572:	a901      	add	r1, sp, #4
   10574:	f009 ff1e 	bl	1a3b4 <k_mem_slab_alloc>
	if (err != 0) {
   10578:	4605      	mov	r5, r0
   1057a:	b9d8      	cbnz	r0, 105b4 <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1057c:	2201      	movs	r2, #1
   1057e:	9b01      	ldr	r3, [sp, #4]
   10580:	f3bf 8f5b 	dmb	ish
   10584:	e853 1f00 	ldrex	r1, [r3]
   10588:	e843 2000 	strex	r0, r2, [r3]
   1058c:	2800      	cmp	r0, #0
   1058e:	d1f9      	bne.n	10584 <z_log_strdup+0x28>
   10590:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   10594:	9801      	ldr	r0, [sp, #4]
   10596:	4621      	mov	r1, r4
   10598:	2241      	movs	r2, #65	; 0x41
   1059a:	3004      	adds	r0, #4
   1059c:	f00d f8cd 	bl	1d73a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   105a0:	9c01      	ldr	r4, [sp, #4]
   105a2:	237e      	movs	r3, #126	; 0x7e
   105a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   105a8:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   105ac:	3404      	adds	r4, #4
}
   105ae:	4620      	mov	r0, r4
   105b0:	b003      	add	sp, #12
   105b2:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   105b4:	4c03      	ldr	r4, [pc, #12]	; (105c4 <z_log_strdup+0x68>)
   105b6:	e7fa      	b.n	105ae <z_log_strdup+0x52>
   105b8:	00020658 	.word	0x00020658
   105bc:	00023038 	.word	0x00023038
   105c0:	20001d48 	.word	0x20001d48
   105c4:	000212f3 	.word	0x000212f3

000105c8 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   105c8:	b150      	cbz	r0, 105e0 <log_is_strdup+0x18>
   105ca:	4b06      	ldr	r3, [pc, #24]	; (105e4 <log_is_strdup+0x1c>)
   105cc:	4298      	cmp	r0, r3
   105ce:	d306      	bcc.n	105de <log_is_strdup+0x16>
   105d0:	f503 7310 	add.w	r3, r3, #576	; 0x240
   105d4:	4298      	cmp	r0, r3
   105d6:	bf2c      	ite	cs
   105d8:	2000      	movcs	r0, #0
   105da:	2001      	movcc	r0, #1
   105dc:	4770      	bx	lr
   105de:	2000      	movs	r0, #0
}
   105e0:	4770      	bx	lr
   105e2:	bf00      	nop
   105e4:	20005a68 	.word	0x20005a68

000105e8 <z_impl_log_process>:
{
   105e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   105ec:	4b46      	ldr	r3, [pc, #280]	; (10708 <z_impl_log_process+0x120>)
   105ee:	781b      	ldrb	r3, [r3, #0]
{
   105f0:	b085      	sub	sp, #20
   105f2:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   105f4:	b903      	cbnz	r3, 105f8 <z_impl_log_process+0x10>
   105f6:	b300      	cbz	r0, 1063a <z_impl_log_process+0x52>
	msg = get_msg();
   105f8:	f7ff ff1a 	bl	10430 <get_msg>
	if (msg.msg) {
   105fc:	4605      	mov	r5, r0
   105fe:	b178      	cbz	r0, 10620 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10600:	f3bf 8f5b 	dmb	ish
   10604:	4b41      	ldr	r3, [pc, #260]	; (1070c <z_impl_log_process+0x124>)
   10606:	e853 2f00 	ldrex	r2, [r3]
   1060a:	3a01      	subs	r2, #1
   1060c:	e843 2100 	strex	r1, r2, [r3]
   10610:	2900      	cmp	r1, #0
   10612:	d1f8      	bne.n	10606 <z_impl_log_process+0x1e>
   10614:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   10618:	b19c      	cbz	r4, 10642 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
   1061a:	4628      	mov	r0, r5
   1061c:	f00b fe3e 	bl	1c29c <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   10620:	b92c      	cbnz	r4, 1062e <z_impl_log_process+0x46>
	return dropped_cnt > 0;
   10622:	4b3b      	ldr	r3, [pc, #236]	; (10710 <z_impl_log_process+0x128>)
	if (!bypass && z_log_dropped_pending()) {
   10624:	681b      	ldr	r3, [r3, #0]
   10626:	2b00      	cmp	r3, #0
   10628:	dd01      	ble.n	1062e <z_impl_log_process+0x46>
		dropped_notify();
   1062a:	f7ff ff35 	bl	10498 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1062e:	4839      	ldr	r0, [pc, #228]	; (10714 <z_impl_log_process+0x12c>)
   10630:	f00b fd71 	bl	1c116 <log_list_head_peek>
   10634:	1e04      	subs	r4, r0, #0
   10636:	bf18      	it	ne
   10638:	2401      	movne	r4, #1
}
   1063a:	4620      	mov	r0, r4
   1063c:	b005      	add	sp, #20
   1063e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   10642:	4b35      	ldr	r3, [pc, #212]	; (10718 <z_impl_log_process+0x130>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   10644:	781b      	ldrb	r3, [r3, #0]
   10646:	b9cb      	cbnz	r3, 1067c <z_impl_log_process+0x94>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10648:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   1064a:	07db      	lsls	r3, r3, #31
   1064c:	d416      	bmi.n	1067c <z_impl_log_process+0x94>
	msg_str = log_msg_str_get(msg);
   1064e:	f00b fe38 	bl	1c2c2 <log_msg_str_get>
   10652:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10654:	4628      	mov	r0, r5
   10656:	f00b fdff 	bl	1c258 <log_msg_nargs_get>
   1065a:	4601      	mov	r1, r0
   1065c:	4640      	mov	r0, r8
   1065e:	f00b fd6f 	bl	1c140 <z_log_get_s_mask>
   10662:	4f2e      	ldr	r7, [pc, #184]	; (1071c <z_impl_log_process+0x134>)
   10664:	4b2e      	ldr	r3, [pc, #184]	; (10720 <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10666:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1073c <z_impl_log_process+0x154>
   1066a:	1bdb      	subs	r3, r3, r7
   1066c:	08db      	lsrs	r3, r3, #3
   1066e:	9303      	str	r3, [sp, #12]
   10670:	4b2c      	ldr	r3, [pc, #176]	; (10724 <z_impl_log_process+0x13c>)
   10672:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10674:	4606      	mov	r6, r0
   10676:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   1067a:	b936      	cbnz	r6, 1068a <z_impl_log_process+0xa2>
   1067c:	4e2a      	ldr	r6, [pc, #168]	; (10728 <z_impl_log_process+0x140>)
   1067e:	4f2b      	ldr	r7, [pc, #172]	; (1072c <z_impl_log_process+0x144>)
   10680:	1bbf      	subs	r7, r7, r6
   10682:	113f      	asrs	r7, r7, #4
   10684:	f04f 0800 	mov.w	r8, #0
   10688:	e03a      	b.n	10700 <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
   1068a:	fab6 f186 	clz	r1, r6
   1068e:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   10692:	4649      	mov	r1, r9
   10694:	4628      	mov	r0, r5
   10696:	f00b fde2 	bl	1c25e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   1069a:	4b25      	ldr	r3, [pc, #148]	; (10730 <z_impl_log_process+0x148>)
   1069c:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   1069e:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   106a0:	d302      	bcc.n	106a8 <z_impl_log_process+0xc0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   106a2:	4b24      	ldr	r3, [pc, #144]	; (10734 <z_impl_log_process+0x14c>)
   106a4:	4298      	cmp	r0, r3
   106a6:	d31a      	bcc.n	106de <z_impl_log_process+0xf6>
   106a8:	4608      	mov	r0, r1
   106aa:	f7ff ff8d 	bl	105c8 <log_is_strdup>
   106ae:	4602      	mov	r2, r0
   106b0:	b9a8      	cbnz	r0, 106de <z_impl_log_process+0xf6>
   106b2:	4b21      	ldr	r3, [pc, #132]	; (10738 <z_impl_log_process+0x150>)
   106b4:	4299      	cmp	r1, r3
   106b6:	d012      	beq.n	106de <z_impl_log_process+0xf6>
	return msg->hdr.ids.source_id;
   106b8:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   106ba:	9903      	ldr	r1, [sp, #12]
   106bc:	f3c3 1389 	ubfx	r3, r3, #6, #10
   106c0:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   106c2:	bf38      	it	cc
   106c4:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   106c8:	ea4f 138a 	mov.w	r3, sl, lsl #6
   106cc:	f043 0301 	orr.w	r3, r3, #1
   106d0:	f8ad 3000 	strh.w	r3, [sp]
   106d4:	4649      	mov	r1, r9
   106d6:	4643      	mov	r3, r8
   106d8:	4658      	mov	r0, fp
   106da:	f00b fd8b 	bl	1c1f4 <log_3>
		mask &= ~BIT(idx);
   106de:	2101      	movs	r1, #1
   106e0:	fa01 f109 	lsl.w	r1, r1, r9
   106e4:	ea26 0601 	bic.w	r6, r6, r1
   106e8:	e7c7      	b.n	1067a <z_impl_log_process+0x92>
	return backend->cb->active;
   106ea:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   106ec:	795b      	ldrb	r3, [r3, #5]
   106ee:	b123      	cbz	r3, 106fa <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
   106f0:	6833      	ldr	r3, [r6, #0]
   106f2:	4629      	mov	r1, r5
   106f4:	685b      	ldr	r3, [r3, #4]
   106f6:	4630      	mov	r0, r6
   106f8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   106fa:	f108 0801 	add.w	r8, r8, #1
   106fe:	3610      	adds	r6, #16
   10700:	45b8      	cmp	r8, r7
   10702:	dbf2      	blt.n	106ea <z_impl_log_process+0x102>
   10704:	e789      	b.n	1061a <z_impl_log_process+0x32>
   10706:	bf00      	nop
   10708:	20002051 	.word	0x20002051
   1070c:	20001d34 	.word	0x20001d34
   10710:	20001d38 	.word	0x20001d38
   10714:	20001d40 	.word	0x20001d40
   10718:	20002052 	.word	0x20002052
   1071c:	00020854 	.word	0x00020854
   10720:	0002093c 	.word	0x0002093c
   10724:	000208e4 	.word	0x000208e4
   10728:	0002093c 	.word	0x0002093c
   1072c:	0002093c 	.word	0x0002093c
   10730:	00020658 	.word	0x00020658
   10734:	00023038 	.word	0x00023038
   10738:	000212f3 	.word	0x000212f3
   1073c:	0002130d 	.word	0x0002130d

00010740 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   10740:	4b29      	ldr	r3, [pc, #164]	; (107e8 <msg_finalize+0xa8>)
{
   10742:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   10744:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   10746:	8141      	strh	r1, [r0, #10]
{
   10748:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1074a:	4798      	blx	r3
   1074c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1074e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10752:	f3ef 8511 	mrs	r5, BASEPRI
   10756:	f383 8811 	msr	BASEPRI, r3
   1075a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1075e:	4823      	ldr	r0, [pc, #140]	; (107ec <msg_finalize+0xac>)
   10760:	4621      	mov	r1, r4
   10762:	f00b fcce 	bl	1c102 <log_list_add_tail>
	__asm__ volatile(
   10766:	f385 8811 	msr	BASEPRI, r5
   1076a:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1076e:	f3bf 8f5b 	dmb	ish
   10772:	4b1f      	ldr	r3, [pc, #124]	; (107f0 <msg_finalize+0xb0>)
   10774:	e853 2f00 	ldrex	r2, [r3]
   10778:	3201      	adds	r2, #1
   1077a:	e843 2100 	strex	r1, r2, [r3]
   1077e:	2900      	cmp	r1, #0
   10780:	d1f8      	bne.n	10774 <msg_finalize+0x34>
   10782:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   10786:	4a1b      	ldr	r2, [pc, #108]	; (107f4 <msg_finalize+0xb4>)
   10788:	7812      	ldrb	r2, [r2, #0]
   1078a:	b182      	cbz	r2, 107ae <msg_finalize+0x6e>
	__asm__ volatile(
   1078c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10790:	f3ef 8411 	mrs	r4, BASEPRI
   10794:	f383 8811 	msr	BASEPRI, r3
   10798:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   1079c:	2000      	movs	r0, #0
   1079e:	f7ff ff23 	bl	105e8 <z_impl_log_process>
	__asm__ volatile(
   107a2:	f384 8811 	msr	BASEPRI, r4
   107a6:	f3bf 8f6f 	isb	sy
}
   107aa:	b003      	add	sp, #12
   107ac:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   107ae:	4a12      	ldr	r2, [pc, #72]	; (107f8 <msg_finalize+0xb8>)
   107b0:	681b      	ldr	r3, [r3, #0]
   107b2:	6812      	ldr	r2, [r2, #0]
   107b4:	2a00      	cmp	r2, #0
   107b6:	d0f8      	beq.n	107aa <msg_finalize+0x6a>
   107b8:	2b01      	cmp	r3, #1
   107ba:	d10a      	bne.n	107d2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   107bc:	2200      	movs	r2, #0
   107be:	2300      	movs	r3, #0
   107c0:	e9cd 2300 	strd	r2, r3, [sp]
   107c4:	480d      	ldr	r0, [pc, #52]	; (107fc <msg_finalize+0xbc>)
   107c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   107ca:	2300      	movs	r3, #0
   107cc:	f00a ff4a 	bl	1b664 <z_impl_k_timer_start>
   107d0:	e7eb      	b.n	107aa <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   107d2:	2b0a      	cmp	r3, #10
   107d4:	d1e9      	bne.n	107aa <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   107d6:	4809      	ldr	r0, [pc, #36]	; (107fc <msg_finalize+0xbc>)
   107d8:	f00f fdc1 	bl	2035e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   107dc:	4808      	ldr	r0, [pc, #32]	; (10800 <msg_finalize+0xc0>)
}
   107de:	b003      	add	sp, #12
   107e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   107e4:	f009 bfda 	b.w	1a79c <z_impl_k_sem_give>
   107e8:	20000450 	.word	0x20000450
   107ec:	20001d40 	.word	0x20001d40
   107f0:	20001d34 	.word	0x20001d34
   107f4:	20002052 	.word	0x20002052
   107f8:	20001d64 	.word	0x20001d64
   107fc:	200013e0 	.word	0x200013e0
   10800:	20000748 	.word	0x20000748

00010804 <log_process_thread_func>:
{
   10804:	b510      	push	{r4, lr}
	log_init();
   10806:	f7ff fe7d 	bl	10504 <log_init>
	return z_impl_k_current_get();
   1080a:	f00a fceb 	bl	1b1e4 <z_impl_k_current_get>
	proc_tid = process_tid;
   1080e:	4b0c      	ldr	r3, [pc, #48]	; (10840 <log_process_thread_func+0x3c>)
   10810:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   10812:	b130      	cbz	r0, 10822 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   10814:	4b0b      	ldr	r3, [pc, #44]	; (10844 <log_process_thread_func+0x40>)
	    process_tid &&
   10816:	681b      	ldr	r3, [r3, #0]
   10818:	2b09      	cmp	r3, #9
   1081a:	dd02      	ble.n	10822 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   1081c:	480a      	ldr	r0, [pc, #40]	; (10848 <log_process_thread_func+0x44>)
   1081e:	f009 ffbd 	bl	1a79c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   10822:	4c09      	ldr	r4, [pc, #36]	; (10848 <log_process_thread_func+0x44>)
   10824:	2000      	movs	r0, #0
   10826:	f7ff fedf 	bl	105e8 <z_impl_log_process>
		if (log_process(false) == false) {
   1082a:	2800      	cmp	r0, #0
   1082c:	d1fa      	bne.n	10824 <log_process_thread_func+0x20>
   1082e:	f04f 32ff 	mov.w	r2, #4294967295
   10832:	f04f 33ff 	mov.w	r3, #4294967295
   10836:	4620      	mov	r0, r4
   10838:	f009 ffd6 	bl	1a7e8 <z_impl_k_sem_take>
   1083c:	e7f2      	b.n	10824 <log_process_thread_func+0x20>
   1083e:	bf00      	nop
   10840:	20001d64 	.word	0x20001d64
   10844:	20001d34 	.word	0x20001d34
   10848:	20000748 	.word	0x20000748

0001084c <z_impl_log_panic>:
{
   1084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1084e:	4f0e      	ldr	r7, [pc, #56]	; (10888 <z_impl_log_panic+0x3c>)
   10850:	783d      	ldrb	r5, [r7, #0]
   10852:	b975      	cbnz	r5, 10872 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   10854:	4c0d      	ldr	r4, [pc, #52]	; (1088c <z_impl_log_panic+0x40>)
   10856:	4e0e      	ldr	r6, [pc, #56]	; (10890 <z_impl_log_panic+0x44>)
	log_init();
   10858:	f7ff fe54 	bl	10504 <log_init>
   1085c:	1b36      	subs	r6, r6, r4
   1085e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   10860:	42b5      	cmp	r5, r6
   10862:	db07      	blt.n	10874 <z_impl_log_panic+0x28>
   10864:	2000      	movs	r0, #0
   10866:	f7ff febf 	bl	105e8 <z_impl_log_process>
		while (log_process(false) == true) {
   1086a:	2800      	cmp	r0, #0
   1086c:	d1fa      	bne.n	10864 <z_impl_log_panic+0x18>
	panic_mode = true;
   1086e:	2301      	movs	r3, #1
   10870:	703b      	strb	r3, [r7, #0]
}
   10872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   10874:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   10876:	795b      	ldrb	r3, [r3, #5]
   10878:	b11b      	cbz	r3, 10882 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   1087a:	6823      	ldr	r3, [r4, #0]
   1087c:	4620      	mov	r0, r4
   1087e:	695b      	ldr	r3, [r3, #20]
   10880:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   10882:	3501      	adds	r5, #1
   10884:	3410      	adds	r4, #16
   10886:	e7eb      	b.n	10860 <z_impl_log_panic+0x14>
   10888:	20002052 	.word	0x20002052
   1088c:	0002093c 	.word	0x0002093c
   10890:	0002093c 	.word	0x0002093c

00010894 <log_free>:
{
   10894:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   10896:	3804      	subs	r0, #4
   10898:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1089a:	f3bf 8f5b 	dmb	ish
   1089e:	e850 3f00 	ldrex	r3, [r0]
   108a2:	1e5a      	subs	r2, r3, #1
   108a4:	e840 2100 	strex	r1, r2, [r0]
   108a8:	2900      	cmp	r1, #0
   108aa:	d1f8      	bne.n	1089e <log_free+0xa>
   108ac:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   108b0:	2b01      	cmp	r3, #1
   108b2:	d103      	bne.n	108bc <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   108b4:	4803      	ldr	r0, [pc, #12]	; (108c4 <log_free+0x30>)
   108b6:	a901      	add	r1, sp, #4
   108b8:	f00f f9ae 	bl	1fc18 <k_mem_slab_free>
}
   108bc:	b003      	add	sp, #12
   108be:	f85d fb04 	ldr.w	pc, [sp], #4
   108c2:	bf00      	nop
   108c4:	20001d48 	.word	0x20001d48

000108c8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   108c8:	2320      	movs	r3, #32
   108ca:	4902      	ldr	r1, [pc, #8]	; (108d4 <log_msg_pool_init+0xc>)
   108cc:	4802      	ldr	r0, [pc, #8]	; (108d8 <log_msg_pool_init+0x10>)
   108ce:	461a      	mov	r2, r3
   108d0:	f00f b987 	b.w	1fbe2 <k_mem_slab_init>
   108d4:	20005ca8 	.word	0x20005ca8
   108d8:	20001d68 	.word	0x20001d68

000108dc <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   108dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   108de:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   108e0:	4d09      	ldr	r5, [pc, #36]	; (10908 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   108e2:	9301      	str	r3, [sp, #4]
   108e4:	2001      	movs	r0, #1
   108e6:	f7ff fe7f 	bl	105e8 <z_impl_log_process>
   108ea:	4604      	mov	r4, r0
			z_log_dropped();
   108ec:	f7ff fdb4 	bl	10458 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   108f0:	2200      	movs	r2, #0
   108f2:	2300      	movs	r3, #0
   108f4:	a901      	add	r1, sp, #4
   108f6:	4628      	mov	r0, r5
   108f8:	f009 fd5c 	bl	1a3b4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   108fc:	b108      	cbz	r0, 10902 <log_msg_no_space_handle+0x26>
   108fe:	2c00      	cmp	r4, #0
   10900:	d1f0      	bne.n	108e4 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   10902:	9801      	ldr	r0, [sp, #4]
   10904:	b003      	add	sp, #12
   10906:	bd30      	pop	{r4, r5, pc}
   10908:	20001d68 	.word	0x20001d68

0001090c <log_msg_chunk_alloc>:
{
   1090c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   1090e:	2300      	movs	r3, #0
   10910:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   10912:	4807      	ldr	r0, [pc, #28]	; (10930 <log_msg_chunk_alloc+0x24>)
   10914:	2200      	movs	r2, #0
   10916:	2300      	movs	r3, #0
   10918:	a901      	add	r1, sp, #4
   1091a:	f009 fd4b 	bl	1a3b4 <k_mem_slab_alloc>
	if (err != 0) {
   1091e:	b110      	cbz	r0, 10926 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   10920:	f7ff ffdc 	bl	108dc <log_msg_no_space_handle>
   10924:	9001      	str	r0, [sp, #4]
}
   10926:	9801      	ldr	r0, [sp, #4]
   10928:	b003      	add	sp, #12
   1092a:	f85d fb04 	ldr.w	pc, [sp], #4
   1092e:	bf00      	nop
   10930:	20001d68 	.word	0x20001d68

00010934 <msg_free>:
{
   10934:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10936:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   10938:	7a45      	ldrb	r5, [r0, #9]
{
   1093a:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   1093c:	092d      	lsrs	r5, r5, #4
{
   1093e:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   10940:	07d8      	lsls	r0, r3, #31
   10942:	d41c      	bmi.n	1097e <msg_free+0x4a>
   10944:	b1dd      	cbz	r5, 1097e <msg_free+0x4a>
		uint32_t smask = 0U;
   10946:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   10948:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   1094a:	9801      	ldr	r0, [sp, #4]
   1094c:	4631      	mov	r1, r6
   1094e:	f00b fc86 	bl	1c25e <log_msg_arg_get>
   10952:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   10954:	f7ff fe38 	bl	105c8 <log_is_strdup>
   10958:	b170      	cbz	r0, 10978 <msg_free+0x44>
				if (smask == 0U) {
   1095a:	b934      	cbnz	r4, 1096a <msg_free+0x36>
					smask = z_log_get_s_mask(
   1095c:	9b01      	ldr	r3, [sp, #4]
   1095e:	4629      	mov	r1, r5
   10960:	6918      	ldr	r0, [r3, #16]
   10962:	f00b fbed 	bl	1c140 <z_log_get_s_mask>
					if (smask == 0U) {
   10966:	4604      	mov	r4, r0
   10968:	b148      	cbz	r0, 1097e <msg_free+0x4a>
				if (smask & BIT(i)) {
   1096a:	fa24 f306 	lsr.w	r3, r4, r6
   1096e:	07d9      	lsls	r1, r3, #31
   10970:	d502      	bpl.n	10978 <msg_free+0x44>
					log_free(buf);
   10972:	4638      	mov	r0, r7
   10974:	f7ff ff8e 	bl	10894 <log_free>
		for (i = 0U; i < nargs; i++) {
   10978:	3601      	adds	r6, #1
   1097a:	42ae      	cmp	r6, r5
   1097c:	d3e5      	bcc.n	1094a <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   1097e:	9b01      	ldr	r3, [sp, #4]
   10980:	7a1a      	ldrb	r2, [r3, #8]
   10982:	0792      	lsls	r2, r2, #30
   10984:	d504      	bpl.n	10990 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   10986:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   10988:	4c08      	ldr	r4, [pc, #32]	; (109ac <msg_free+0x78>)
   1098a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   1098c:	9b03      	ldr	r3, [sp, #12]
   1098e:	b92b      	cbnz	r3, 1099c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   10990:	4806      	ldr	r0, [pc, #24]	; (109ac <msg_free+0x78>)
   10992:	a901      	add	r1, sp, #4
   10994:	f00f f940 	bl	1fc18 <k_mem_slab_free>
}
   10998:	b005      	add	sp, #20
   1099a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   1099c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1099e:	a903      	add	r1, sp, #12
   109a0:	4620      	mov	r0, r4
   109a2:	f00f f939 	bl	1fc18 <k_mem_slab_free>
		cont = next;
   109a6:	9503      	str	r5, [sp, #12]
   109a8:	e7f0      	b.n	1098c <msg_free+0x58>
   109aa:	bf00      	nop
   109ac:	20001d68 	.word	0x20001d68

000109b0 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   109b0:	4a08      	ldr	r2, [pc, #32]	; (109d4 <log_output_timestamp_freq_set+0x24>)
{
   109b2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   109b4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   109b6:	4c08      	ldr	r4, [pc, #32]	; (109d8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   109b8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   109ba:	2100      	movs	r1, #0
   109bc:	42a0      	cmp	r0, r4
   109be:	d804      	bhi.n	109ca <log_output_timestamp_freq_set+0x1a>
   109c0:	b101      	cbz	r1, 109c4 <log_output_timestamp_freq_set+0x14>
   109c2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   109c4:	4b05      	ldr	r3, [pc, #20]	; (109dc <log_output_timestamp_freq_set+0x2c>)
   109c6:	6018      	str	r0, [r3, #0]
}
   109c8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   109ca:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   109cc:	005b      	lsls	r3, r3, #1
   109ce:	2101      	movs	r1, #1
   109d0:	e7f4      	b.n	109bc <log_output_timestamp_freq_set+0xc>
   109d2:	bf00      	nop
   109d4:	20001d88 	.word	0x20001d88
   109d8:	000f4240 	.word	0x000f4240
   109dc:	20001d84 	.word	0x20001d84

000109e0 <blvl_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   109e0:	4b07      	ldr	r3, [pc, #28]	; (10a00 <blvl_ccc_cfg_changed+0x20>)
   109e2:	4a08      	ldr	r2, [pc, #32]	; (10a04 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   109e4:	4808      	ldr	r0, [pc, #32]	; (10a08 <blvl_ccc_cfg_changed+0x28>)
   109e6:	1ad2      	subs	r2, r2, r3
   109e8:	08d2      	lsrs	r2, r2, #3
   109ea:	4b08      	ldr	r3, [pc, #32]	; (10a0c <blvl_ccc_cfg_changed+0x2c>)
   109ec:	0192      	lsls	r2, r2, #6
   109ee:	2901      	cmp	r1, #1
   109f0:	bf14      	ite	ne
   109f2:	4601      	movne	r1, r0
   109f4:	4619      	moveq	r1, r3
   109f6:	f042 0203 	orr.w	r2, r2, #3
   109fa:	4805      	ldr	r0, [pc, #20]	; (10a10 <blvl_ccc_cfg_changed+0x30>)
   109fc:	f00b bbcd 	b.w	1c19a <log_1>
   10a00:	00020854 	.word	0x00020854
   10a04:	00020854 	.word	0x00020854
   10a08:	0002113c 	.word	0x0002113c
   10a0c:	00021134 	.word	0x00021134
   10a10:	00021372 	.word	0x00021372

00010a14 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   10a14:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   10a16:	4c08      	ldr	r4, [pc, #32]	; (10a38 <read_blvl+0x24>)
{
   10a18:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   10a1a:	7824      	ldrb	r4, [r4, #0]
   10a1c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   10a20:	2401      	movs	r4, #1
   10a22:	9402      	str	r4, [sp, #8]
   10a24:	f10d 0417 	add.w	r4, sp, #23
   10a28:	9401      	str	r4, [sp, #4]
   10a2a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   10a2e:	9400      	str	r4, [sp, #0]
   10a30:	f00e f9f8 	bl	1ee24 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   10a34:	b006      	add	sp, #24
   10a36:	bd10      	pop	{r4, pc}
   10a38:	20000627 	.word	0x20000627

00010a3c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a3e:	4605      	mov	r5, r0
	__asm__ volatile(
   10a40:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a44:	f3ef 8611 	mrs	r6, BASEPRI
   10a48:	f383 8811 	msr	BASEPRI, r3
   10a4c:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10a50:	4b0b      	ldr	r3, [pc, #44]	; (10a80 <pm_state_notify+0x44>)
   10a52:	681c      	ldr	r4, [r3, #0]
   10a54:	2c00      	cmp	r4, #0
   10a56:	bf38      	it	cc
   10a58:	2400      	movcc	r4, #0
   10a5a:	b15c      	cbz	r4, 10a74 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   10a5c:	4f09      	ldr	r7, [pc, #36]	; (10a84 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   10a5e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   10a62:	2d00      	cmp	r5, #0
   10a64:	bf08      	it	eq
   10a66:	4613      	moveq	r3, r2
		if (callback) {
   10a68:	b10b      	cbz	r3, 10a6e <pm_state_notify+0x32>
			callback(z_power_state.state);
   10a6a:	7838      	ldrb	r0, [r7, #0]
   10a6c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10a6e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10a70:	2c00      	cmp	r4, #0
   10a72:	d1f4      	bne.n	10a5e <pm_state_notify+0x22>
	__asm__ volatile(
   10a74:	f386 8811 	msr	BASEPRI, r6
   10a78:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a7e:	bf00      	nop
   10a80:	20001d8c 	.word	0x20001d8c
   10a84:	20001d94 	.word	0x20001d94

00010a88 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   10a88:	4b08      	ldr	r3, [pc, #32]	; (10aac <pm_system_resume+0x24>)
{
   10a8a:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   10a8c:	681c      	ldr	r4, [r3, #0]
   10a8e:	b95c      	cbnz	r4, 10aa8 <pm_system_resume+0x20>
		post_ops_done = 1;
   10a90:	2201      	movs	r2, #1
   10a92:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   10a94:	4b06      	ldr	r3, [pc, #24]	; (10ab0 <pm_system_resume+0x28>)
   10a96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10a9a:	f00c fef0 	bl	1d87e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   10a9e:	4620      	mov	r0, r4
	}
}
   10aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   10aa4:	f7ff bfca 	b.w	10a3c <pm_state_notify>
}
   10aa8:	bd10      	pop	{r4, pc}
   10aaa:	bf00      	nop
   10aac:	20000490 	.word	0x20000490
   10ab0:	20001d94 	.word	0x20001d94

00010ab4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   10ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ab6:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   10ab8:	466e      	mov	r6, sp
   10aba:	4601      	mov	r1, r0
{
   10abc:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   10abe:	4630      	mov	r0, r6
   10ac0:	f00b fcc4 	bl	1c44c <pm_policy_next_state>
   10ac4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10ac8:	4c14      	ldr	r4, [pc, #80]	; (10b1c <pm_system_suspend+0x68>)
   10aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   10ace:	7820      	ldrb	r0, [r4, #0]
   10ad0:	b308      	cbz	r0, 10b16 <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   10ad2:	4b13      	ldr	r3, [pc, #76]	; (10b20 <pm_system_suspend+0x6c>)
   10ad4:	2100      	movs	r1, #0
   10ad6:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   10ad8:	1c6b      	adds	r3, r5, #1
   10ada:	d00e      	beq.n	10afa <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10adc:	4811      	ldr	r0, [pc, #68]	; (10b24 <pm_system_suspend+0x70>)
   10ade:	4617      	mov	r7, r2
   10ae0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10ae4:	2100      	movs	r1, #0
   10ae6:	4a10      	ldr	r2, [pc, #64]	; (10b28 <pm_system_suspend+0x74>)
   10ae8:	2300      	movs	r3, #0
   10aea:	fbe6 0107 	umlal	r0, r1, r6, r7
   10aee:	f7ef faf7 	bl	e0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10af2:	2101      	movs	r1, #1
   10af4:	1a28      	subs	r0, r5, r0
   10af6:	f00f fbdb 	bl	202b0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10afa:	f00a f8c3 	bl	1ac84 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   10afe:	2001      	movs	r0, #1
   10b00:	f7ff ff9c 	bl	10a3c <pm_state_notify>
	pm_power_state_set(z_power_state);
   10b04:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   10b08:	f00c fea6 	bl	1d858 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   10b0c:	f7ff ffbc 	bl	10a88 <pm_system_resume>
	k_sched_unlock();
   10b10:	f00a f9aa 	bl	1ae68 <k_sched_unlock>

	return z_power_state.state;
   10b14:	7820      	ldrb	r0, [r4, #0]
}
   10b16:	b005      	add	sp, #20
   10b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b1a:	bf00      	nop
   10b1c:	20001d94 	.word	0x20001d94
   10b20:	20000490 	.word	0x20000490
   10b24:	000f423f 	.word	0x000f423f
   10b28:	000f4240 	.word	0x000f4240

00010b2c <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10b2c:	b570      	push	{r4, r5, r6, lr}
   10b2e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   10b30:	480d      	ldr	r0, [pc, #52]	; (10b68 <onoff_stop+0x3c>)
   10b32:	1a23      	subs	r3, r4, r0
   10b34:	109a      	asrs	r2, r3, #2
   10b36:	4b0d      	ldr	r3, [pc, #52]	; (10b6c <onoff_stop+0x40>)
   10b38:	4353      	muls	r3, r2
   10b3a:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   10b3c:	250c      	movs	r5, #12
   10b3e:	435d      	muls	r5, r3
   10b40:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   10b44:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   10b46:	4418      	add	r0, r3
   10b48:	2140      	movs	r1, #64	; 0x40
   10b4a:	f00b fc8d 	bl	1c468 <set_off_state>
	if (err < 0) {
   10b4e:	1e01      	subs	r1, r0, #0
   10b50:	db04      	blt.n	10b5c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   10b52:	4b07      	ldr	r3, [pc, #28]	; (10b70 <onoff_stop+0x44>)
   10b54:	442b      	add	r3, r5
   10b56:	685b      	ldr	r3, [r3, #4]
   10b58:	4798      	blx	r3
	return 0;
   10b5a:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   10b5c:	4620      	mov	r0, r4
   10b5e:	4633      	mov	r3, r6
}
   10b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   10b64:	4718      	bx	r3
   10b66:	bf00      	nop
   10b68:	20001db4 	.word	0x20001db4
   10b6c:	b6db6db7 	.word	0xb6db6db7
   10b70:	00020b60 	.word	0x00020b60

00010b74 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   10b78:	4c0f      	ldr	r4, [pc, #60]	; (10bb8 <onoff_start+0x44>)
   10b7a:	4d10      	ldr	r5, [pc, #64]	; (10bbc <onoff_start+0x48>)
   10b7c:	1b03      	subs	r3, r0, r4
   10b7e:	109b      	asrs	r3, r3, #2
   10b80:	435d      	muls	r5, r3
   10b82:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   10b84:	250c      	movs	r5, #12
   10b86:	435d      	muls	r5, r3
{
   10b88:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   10b8a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   10b8e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   10b90:	4420      	add	r0, r4
   10b92:	2140      	movs	r1, #64	; 0x40
   10b94:	f00b fc81 	bl	1c49a <set_starting_state>
	if (err < 0) {
   10b98:	1e01      	subs	r1, r0, #0
   10b9a:	db08      	blt.n	10bae <onoff_start+0x3a>
	subdata->cb = cb;
   10b9c:	4b08      	ldr	r3, [pc, #32]	; (10bc0 <onoff_start+0x4c>)
   10b9e:	442c      	add	r4, r5
	subdata->user_data = user_data;
   10ba0:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   10ba4:	4b07      	ldr	r3, [pc, #28]	; (10bc4 <onoff_start+0x50>)
   10ba6:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   10ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   10bac:	4718      	bx	r3
		notify(mgr, err);
   10bae:	4638      	mov	r0, r7
   10bb0:	4633      	mov	r3, r6
}
   10bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   10bb6:	4718      	bx	r3
   10bb8:	20001db4 	.word	0x20001db4
   10bbc:	b6db6db7 	.word	0xb6db6db7
   10bc0:	0001c4fd 	.word	0x0001c4fd
   10bc4:	00020b60 	.word	0x00020b60

00010bc8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10bc8:	2200      	movs	r2, #0
{
   10bca:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10bcc:	2101      	movs	r1, #1
{
   10bce:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10bd0:	4610      	mov	r0, r2
   10bd2:	f000 fc47 	bl	11464 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   10bd6:	2000      	movs	r0, #0
   10bd8:	f000 fc12 	bl	11400 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   10bdc:	480f      	ldr	r0, [pc, #60]	; (10c1c <clk_init+0x54>)
   10bde:	f009 f92b 	bl	19e38 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   10be2:	4b0f      	ldr	r3, [pc, #60]	; (10c20 <clk_init+0x58>)
   10be4:	4298      	cmp	r0, r3
   10be6:	d115      	bne.n	10c14 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   10be8:	f00e ff81 	bl	1faee <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   10bec:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   10bee:	490d      	ldr	r1, [pc, #52]	; (10c24 <clk_init+0x5c>)
   10bf0:	4630      	mov	r0, r6
   10bf2:	f00a fee9 	bl	1b9c8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   10bf6:	2800      	cmp	r0, #0
   10bf8:	db0b      	blt.n	10c12 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10bfa:	2501      	movs	r5, #1
   10bfc:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   10bfe:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   10c00:	4908      	ldr	r1, [pc, #32]	; (10c24 <clk_init+0x5c>)
   10c02:	f104 001c 	add.w	r0, r4, #28
   10c06:	f00a fedf 	bl	1b9c8 <onoff_manager_init>
		if (err < 0) {
   10c0a:	2800      	cmp	r0, #0
   10c0c:	db01      	blt.n	10c12 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10c0e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   10c10:	2000      	movs	r0, #0
}
   10c12:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   10c14:	f06f 0004 	mvn.w	r0, #4
   10c18:	e7fb      	b.n	10c12 <clk_init+0x4a>
   10c1a:	bf00      	nop
   10c1c:	00010c5d 	.word	0x00010c5d
   10c20:	0bad0000 	.word	0x0bad0000
   10c24:	00020b78 	.word	0x00020b78

00010c28 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   10c28:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   10c2a:	230c      	movs	r3, #12
   10c2c:	4809      	ldr	r0, [pc, #36]	; (10c54 <clkstarted_handle.constprop.0+0x2c>)
   10c2e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   10c30:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   10c32:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   10c34:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   10c38:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   10c3a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   10c3c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   10c3e:	4418      	add	r0, r3
   10c40:	f00b fc49 	bl	1c4d6 <set_on_state>
	if (callback) {
   10c44:	b12d      	cbz	r5, 10c52 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   10c46:	4632      	mov	r2, r6
   10c48:	462b      	mov	r3, r5
   10c4a:	4803      	ldr	r0, [pc, #12]	; (10c58 <clkstarted_handle.constprop.0+0x30>)
}
   10c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   10c50:	4718      	bx	r3
}
   10c52:	bd70      	pop	{r4, r5, r6, pc}
   10c54:	20001db4 	.word	0x20001db4
   10c58:	2000062c 	.word	0x2000062c

00010c5c <clock_event_handler>:
	switch (event) {
   10c5c:	b110      	cbz	r0, 10c64 <clock_event_handler+0x8>
   10c5e:	2801      	cmp	r0, #1
   10c60:	d004      	beq.n	10c6c <clock_event_handler+0x10>
   10c62:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   10c64:	4b03      	ldr	r3, [pc, #12]	; (10c74 <clock_event_handler+0x18>)
   10c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10c68:	075b      	lsls	r3, r3, #29
   10c6a:	d101      	bne.n	10c70 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   10c6c:	f7ff bfdc 	b.w	10c28 <clkstarted_handle.constprop.0>
}
   10c70:	4770      	bx	lr
   10c72:	bf00      	nop
   10c74:	20001db4 	.word	0x20001db4

00010c78 <generic_hfclk_start>:
{
   10c78:	b508      	push	{r3, lr}
	__asm__ volatile(
   10c7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   10c7e:	f3ef 8111 	mrs	r1, BASEPRI
   10c82:	f383 8811 	msr	BASEPRI, r3
   10c86:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   10c8a:	4a12      	ldr	r2, [pc, #72]	; (10cd4 <generic_hfclk_start+0x5c>)
   10c8c:	6813      	ldr	r3, [r2, #0]
   10c8e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   10c92:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   10c96:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   10c98:	d00c      	beq.n	10cb4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10c9e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10ca2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   10ca6:	f013 0301 	ands.w	r3, r3, #1
   10caa:	d003      	beq.n	10cb4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   10cac:	480a      	ldr	r0, [pc, #40]	; (10cd8 <generic_hfclk_start+0x60>)
   10cae:	f00b fc12 	bl	1c4d6 <set_on_state>
			already_started = true;
   10cb2:	2301      	movs	r3, #1
	__asm__ volatile(
   10cb4:	f381 8811 	msr	BASEPRI, r1
   10cb8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   10cbc:	b123      	cbz	r3, 10cc8 <generic_hfclk_start+0x50>
}
   10cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   10cc2:	2000      	movs	r0, #0
   10cc4:	f7ff bfb0 	b.w	10c28 <clkstarted_handle.constprop.0>
}
   10cc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   10ccc:	2001      	movs	r0, #1
   10cce:	f009 b8a3 	b.w	19e18 <nrfx_clock_start>
   10cd2:	bf00      	nop
   10cd4:	20001e04 	.word	0x20001e04
   10cd8:	20001df4 	.word	0x20001df4

00010cdc <lfclk_start>:
{
   10cdc:	b510      	push	{r4, lr}
	if (!once) {
   10cde:	4c07      	ldr	r4, [pc, #28]	; (10cfc <lfclk_start+0x20>)
   10ce0:	7823      	ldrb	r3, [r4, #0]
   10ce2:	b92b      	cbnz	r3, 10cf0 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   10ce4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   10ce8:	f00f fb00 	bl	202ec <z_impl_k_busy_wait>
		once = true;
   10cec:	2301      	movs	r3, #1
   10cee:	7023      	strb	r3, [r4, #0]
}
   10cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   10cf4:	2000      	movs	r0, #0
   10cf6:	f009 b88f 	b.w	19e18 <nrfx_clock_start>
   10cfa:	bf00      	nop
   10cfc:	20002053 	.word	0x20002053

00010d00 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d00:	4b09      	ldr	r3, [pc, #36]	; (10d28 <generic_hfclk_stop+0x28>)
   10d02:	f3bf 8f5b 	dmb	ish
   10d06:	e853 2f00 	ldrex	r2, [r3]
   10d0a:	f022 0102 	bic.w	r1, r2, #2
   10d0e:	e843 1000 	strex	r0, r1, [r3]
   10d12:	2800      	cmp	r0, #0
   10d14:	d1f7      	bne.n	10d06 <generic_hfclk_stop+0x6>
   10d16:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   10d1a:	07d3      	lsls	r3, r2, #31
   10d1c:	d402      	bmi.n	10d24 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   10d1e:	2001      	movs	r0, #1
   10d20:	f00e bee0 	b.w	1fae4 <nrfx_clock_stop>
}
   10d24:	4770      	bx	lr
   10d26:	bf00      	nop
   10d28:	20001e04 	.word	0x20001e04

00010d2c <api_blocking_start>:
{
   10d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10d2e:	2200      	movs	r2, #0
   10d30:	2301      	movs	r3, #1
   10d32:	e9cd 2302 	strd	r2, r3, [sp, #8]
   10d36:	ab04      	add	r3, sp, #16
   10d38:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10d3c:	4a09      	ldr	r2, [pc, #36]	; (10d64 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10d3e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10d42:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10d44:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10d48:	f00b fbfb 	bl	1c542 <api_start>
	if (err < 0) {
   10d4c:	2800      	cmp	r0, #0
   10d4e:	db05      	blt.n	10d5c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   10d50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10d54:	2300      	movs	r3, #0
   10d56:	4668      	mov	r0, sp
   10d58:	f009 fd46 	bl	1a7e8 <z_impl_k_sem_take>
}
   10d5c:	b007      	add	sp, #28
   10d5e:	f85d fb04 	ldr.w	pc, [sp], #4
   10d62:	bf00      	nop
   10d64:	0001c515 	.word	0x0001c515

00010d68 <z_nrf_clock_control_get_onoff>:
}
   10d68:	4a02      	ldr	r2, [pc, #8]	; (10d74 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   10d6a:	b2c3      	uxtb	r3, r0
}
   10d6c:	201c      	movs	r0, #28
   10d6e:	fb03 2000 	mla	r0, r3, r0, r2
   10d72:	4770      	bx	lr
   10d74:	20001db4 	.word	0x20001db4

00010d78 <z_nrf_clock_control_lf_on>:
{
   10d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10d7a:	4928      	ldr	r1, [pc, #160]	; (10e1c <z_nrf_clock_control_lf_on+0xa4>)
   10d7c:	f3bf 8f5b 	dmb	ish
   10d80:	4606      	mov	r6, r0
   10d82:	2201      	movs	r2, #1
   10d84:	e851 3f00 	ldrex	r3, [r1]
   10d88:	e841 2000 	strex	r0, r2, [r1]
   10d8c:	2800      	cmp	r0, #0
   10d8e:	d1f9      	bne.n	10d84 <z_nrf_clock_control_lf_on+0xc>
   10d90:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   10d94:	b933      	cbnz	r3, 10da4 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   10d96:	4922      	ldr	r1, [pc, #136]	; (10e20 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   10d98:	4822      	ldr	r0, [pc, #136]	; (10e24 <z_nrf_clock_control_lf_on+0xac>)
   10d9a:	604b      	str	r3, [r1, #4]
   10d9c:	60cb      	str	r3, [r1, #12]
   10d9e:	608a      	str	r2, [r1, #8]
   10da0:	f00a fe25 	bl	1b9ee <onoff_request>
	switch (start_mode) {
   10da4:	1e73      	subs	r3, r6, #1
   10da6:	2b01      	cmp	r3, #1
   10da8:	d820      	bhi.n	10dec <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10daa:	f00e ff5e 	bl	1fc6a <k_is_in_isr>
   10dae:	4604      	mov	r4, r0
   10db0:	b910      	cbnz	r0, 10db8 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   10db2:	4b1d      	ldr	r3, [pc, #116]	; (10e28 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   10db4:	781b      	ldrb	r3, [r3, #0]
   10db6:	bb53      	cbnz	r3, 10e0e <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   10db8:	f04f 0340 	mov.w	r3, #64	; 0x40
   10dbc:	f3ef 8511 	mrs	r5, BASEPRI
   10dc0:	f383 8811 	msr	BASEPRI, r3
   10dc4:	f3bf 8f6f 	isb	sy
   10dc8:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10dca:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   10dce:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10dd2:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   10dd6:	03d2      	lsls	r2, r2, #15
   10dd8:	d509      	bpl.n	10dee <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   10dda:	079b      	lsls	r3, r3, #30
   10ddc:	d001      	beq.n	10de2 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   10dde:	2e01      	cmp	r6, #1
   10de0:	d105      	bne.n	10dee <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   10de2:	b174      	cbz	r4, 10e02 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   10de4:	f385 8811 	msr	BASEPRI, r5
   10de8:	f3bf 8f6f 	isb	sy
}
   10dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   10dee:	b11c      	cbz	r4, 10df8 <z_nrf_clock_control_lf_on+0x80>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   10df0:	4628      	mov	r0, r5
   10df2:	f000 fbbf 	bl	11574 <arch_cpu_atomic_idle>
}
   10df6:	e7ea      	b.n	10dce <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   10df8:	2100      	movs	r1, #0
   10dfa:	2021      	movs	r0, #33	; 0x21
   10dfc:	f00a f9d0 	bl	1b1a0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10e00:	e7e5      	b.n	10dce <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   10e02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10e06:	2202      	movs	r2, #2
   10e08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   10e0c:	e7ee      	b.n	10dec <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   10e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10e12:	2202      	movs	r2, #2
   10e14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   10e18:	4605      	mov	r5, r0
}
   10e1a:	e7d6      	b.n	10dca <z_nrf_clock_control_lf_on+0x52>
   10e1c:	20001e08 	.word	0x20001e08
   10e20:	20001da4 	.word	0x20001da4
   10e24:	20001dd0 	.word	0x20001dd0
   10e28:	20002905 	.word	0x20002905

00010e2c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   10e2c:	4a04      	ldr	r2, [pc, #16]	; (10e40 <sys_clock_timeout_handler+0x14>)
   10e2e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   10e30:	1ac8      	subs	r0, r1, r3
   10e32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   10e36:	4403      	add	r3, r0
   10e38:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   10e3a:	f00a bb65 	b.w	1b508 <sys_clock_announce>
   10e3e:	bf00      	nop
   10e40:	20001e1c 	.word	0x20001e1c

00010e44 <set_absolute_alarm>:
{
   10e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10e48:	0086      	lsls	r6, r0, #2
   10e4a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   10e4e:	f100 0450 	add.w	r4, r0, #80	; 0x50
   10e52:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   10e56:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   10e58:	f8df 807c 	ldr.w	r8, [pc, #124]	; 10ed8 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   10e5c:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10e60:	b2a4      	uxth	r4, r4
   10e62:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10e66:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   10e6a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   10e6e:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10e72:	4087      	lsls	r7, r0
   10e74:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   10e76:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10e7a:	eba3 030a 	sub.w	r3, r3, sl
   10e7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   10e82:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   10e86:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   10e88:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   10e8c:	d102      	bne.n	10e94 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   10e8e:	2013      	movs	r0, #19
   10e90:	f00f fa2c 	bl	202ec <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   10e94:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   10e98:	1aab      	subs	r3, r5, r2
   10e9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   10e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   10ea2:	bf88      	it	hi
   10ea4:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10ea6:	2300      	movs	r3, #0
   10ea8:	6023      	str	r3, [r4, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   10eaa:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   10eac:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   10eb0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10eb4:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   10eb8:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   10ebc:	459a      	cmp	sl, r3
   10ebe:	d006      	beq.n	10ece <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   10ec0:	1aeb      	subs	r3, r5, r3
   10ec2:	3b02      	subs	r3, #2
   10ec4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   10ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   10ecc:	d801      	bhi.n	10ed2 <set_absolute_alarm+0x8e>
}
   10ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   10ed2:	462b      	mov	r3, r5
   10ed4:	e7cf      	b.n	10e76 <set_absolute_alarm+0x32>
   10ed6:	bf00      	nop
   10ed8:	40011000 	.word	0x40011000

00010edc <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   10edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   10ede:	4e10      	ldr	r6, [pc, #64]	; (10f20 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10ee0:	4f10      	ldr	r7, [pc, #64]	; (10f24 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   10ee2:	2500      	movs	r5, #0
   10ee4:	4b10      	ldr	r3, [pc, #64]	; (10f28 <rtc_nrf_isr+0x4c>)
   10ee6:	2000      	movs	r0, #0
   10ee8:	681c      	ldr	r4, [r3, #0]
   10eea:	461a      	mov	r2, r3
   10eec:	b105      	cbz	r5, 10ef0 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   10eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   10ef0:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   10ef4:	03c9      	lsls	r1, r1, #15
   10ef6:	d5fa      	bpl.n	10eee <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10ef8:	6839      	ldr	r1, [r7, #0]
   10efa:	2900      	cmp	r1, #0
   10efc:	d0f7      	beq.n	10eee <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10efe:	603d      	str	r5, [r7, #0]
   10f00:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   10f02:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10f06:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
   10f0a:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   10f0e:	2501      	movs	r5, #1
			if (handler) {
   10f10:	b11c      	cbz	r4, 10f1a <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
   10f12:	685a      	ldr	r2, [r3, #4]
   10f14:	6018      	str	r0, [r3, #0]
   10f16:	47a0      	blx	r4
   10f18:	e7e4      	b.n	10ee4 <rtc_nrf_isr+0x8>
   10f1a:	6014      	str	r4, [r2, #0]
}
   10f1c:	e7e7      	b.n	10eee <rtc_nrf_isr+0x12>
   10f1e:	bf00      	nop
   10f20:	40011000 	.word	0x40011000
   10f24:	40011140 	.word	0x40011140
   10f28:	20001e10 	.word	0x20001e10

00010f2c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   10f2c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   10f2e:	4d10      	ldr	r5, [pc, #64]	; (10f70 <sys_clock_driver_init+0x44>)
   10f30:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   10f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   10f36:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   10f3a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10f3e:	4b0d      	ldr	r3, [pc, #52]	; (10f74 <sys_clock_driver_init+0x48>)
   10f40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10f44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   10f48:	2101      	movs	r1, #1
   10f4a:	4622      	mov	r2, r4
   10f4c:	2011      	movs	r0, #17
   10f4e:	f000 fa89 	bl	11464 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   10f52:	2011      	movs	r0, #17
   10f54:	f000 fa54 	bl	11400 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   10f58:	4a07      	ldr	r2, [pc, #28]	; (10f78 <sys_clock_driver_init+0x4c>)
   10f5a:	2301      	movs	r3, #1
   10f5c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   10f5e:	4a07      	ldr	r2, [pc, #28]	; (10f7c <sys_clock_driver_init+0x50>)
   10f60:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   10f62:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   10f64:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   10f66:	f7ff ff07 	bl	10d78 <z_nrf_clock_control_lf_on>

	return 0;
}
   10f6a:	4620      	mov	r0, r4
   10f6c:	bd38      	pop	{r3, r4, r5, pc}
   10f6e:	bf00      	nop
   10f70:	40011000 	.word	0x40011000
   10f74:	e000e100 	.word	0xe000e100
   10f78:	40011008 	.word	0x40011008
   10f7c:	20001e18 	.word	0x20001e18

00010f80 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   10f80:	4b13      	ldr	r3, [pc, #76]	; (10fd0 <sys_clock_set_timeout+0x50>)
   10f82:	f1b0 3fff 	cmp.w	r0, #4294967295
   10f86:	bf08      	it	eq
   10f88:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   10f8a:	3801      	subs	r0, #1
   10f8c:	2800      	cmp	r0, #0
   10f8e:	dd1c      	ble.n	10fca <sys_clock_set_timeout+0x4a>
   10f90:	4298      	cmp	r0, r3
   10f92:	bfa8      	it	ge
   10f94:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   10f96:	4b0f      	ldr	r3, [pc, #60]	; (10fd4 <sys_clock_set_timeout+0x54>)
   10f98:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   10f9c:	4b0e      	ldr	r3, [pc, #56]	; (10fd8 <sys_clock_set_timeout+0x58>)
   10f9e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   10fa0:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   10fa2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   10fa6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   10faa:	bf18      	it	ne
   10fac:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   10fae:	4a0b      	ldr	r2, [pc, #44]	; (10fdc <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   10fb0:	3301      	adds	r3, #1
   10fb2:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   10fb4:	480a      	ldr	r0, [pc, #40]	; (10fe0 <sys_clock_set_timeout+0x60>)
   10fb6:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   10fb8:	2000      	movs	r0, #0
   10fba:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   10fbc:	4a04      	ldr	r2, [pc, #16]	; (10fd0 <sys_clock_set_timeout+0x50>)
   10fbe:	4293      	cmp	r3, r2
   10fc0:	bf94      	ite	ls
   10fc2:	18c9      	addls	r1, r1, r3
   10fc4:	1889      	addhi	r1, r1, r2
   10fc6:	f7ff bf3d 	b.w	10e44 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   10fca:	2000      	movs	r0, #0
   10fcc:	e7e3      	b.n	10f96 <sys_clock_set_timeout+0x16>
   10fce:	bf00      	nop
   10fd0:	007fffff 	.word	0x007fffff
   10fd4:	40011000 	.word	0x40011000
   10fd8:	20001e1c 	.word	0x20001e1c
   10fdc:	20001e10 	.word	0x20001e10
   10fe0:	00010e2d 	.word	0x00010e2d

00010fe4 <sys_clock_elapsed>:
   10fe4:	4b04      	ldr	r3, [pc, #16]	; (10ff8 <sys_clock_elapsed+0x14>)
   10fe6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   10fea:	4b04      	ldr	r3, [pc, #16]	; (10ffc <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   10fec:	681b      	ldr	r3, [r3, #0]
   10fee:	1ac0      	subs	r0, r0, r3
}
   10ff0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10ff4:	4770      	bx	lr
   10ff6:	bf00      	nop
   10ff8:	40011000 	.word	0x40011000
   10ffc:	20001e1c 	.word	0x20001e1c

00011000 <sys_clock_cycle_get_32>:
	__asm__ volatile(
   11000:	f04f 0340 	mov.w	r3, #64	; 0x40
   11004:	f3ef 8211 	mrs	r2, BASEPRI
   11008:	f383 8811 	msr	BASEPRI, r3
   1100c:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   11010:	4906      	ldr	r1, [pc, #24]	; (1102c <sys_clock_cycle_get_32+0x2c>)
   11012:	4b07      	ldr	r3, [pc, #28]	; (11030 <sys_clock_cycle_get_32+0x30>)
   11014:	6808      	ldr	r0, [r1, #0]
   11016:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   1101a:	f382 8811 	msr	BASEPRI, r2
   1101e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   11022:	1a1b      	subs	r3, r3, r0
   11024:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   11028:	4418      	add	r0, r3
   1102a:	4770      	bx	lr
   1102c:	20001e1c 	.word	0x20001e1c
   11030:	40011000 	.word	0x40011000

00011034 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   11034:	4b01      	ldr	r3, [pc, #4]	; (1103c <uECC_get_rng+0x8>)
   11036:	6818      	ldr	r0, [r3, #0]
   11038:	4770      	bx	lr
   1103a:	bf00      	nop
   1103c:	20000494 	.word	0x20000494

00011040 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   11040:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   11042:	2208      	movs	r2, #8
{
   11044:	b089      	sub	sp, #36	; 0x24
   11046:	460c      	mov	r4, r1
   11048:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1104a:	f00b fc58 	bl	1c8fe <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   1104e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   11050:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   11052:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   11054:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   11056:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   11058:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   1105a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   1105c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1105e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   11060:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   11062:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11064:	2308      	movs	r3, #8
   11066:	466a      	mov	r2, sp
   11068:	4669      	mov	r1, sp
   1106a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   1106c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   11070:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11072:	f00b fb46 	bl	1c702 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11076:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11078:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1107a:	466a      	mov	r2, sp
   1107c:	4631      	mov	r1, r6
   1107e:	4630      	mov	r0, r6
   11080:	f00b fb3f 	bl	1c702 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   11084:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11086:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   11088:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1108a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   1108c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1108e:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   11090:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11092:	4405      	add	r5, r0
	tmp[7] = 0;
   11094:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11098:	466a      	mov	r2, sp
   1109a:	2308      	movs	r3, #8
   1109c:	4669      	mov	r1, sp
   1109e:	4668      	mov	r0, sp
   110a0:	f00b fb2f 	bl	1c702 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   110a4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   110a6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   110a8:	2308      	movs	r3, #8
   110aa:	466a      	mov	r2, sp
   110ac:	4630      	mov	r0, r6
   110ae:	f00b fb28 	bl	1c702 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   110b2:	6a23      	ldr	r3, [r4, #32]
   110b4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   110b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   110b8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   110ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   110bc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   110be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   110c0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   110c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   110c4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   110c6:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   110c8:	2308      	movs	r3, #8
   110ca:	466a      	mov	r2, sp
   110cc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   110ce:	e9cd 7704 	strd	r7, r7, [sp, #16]
   110d2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   110d4:	f00b fb15 	bl	1c702 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   110d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   110da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   110dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   110de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   110e0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   110e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   110e4:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   110e6:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   110e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   110ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   110ec:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   110ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   110f2:	6a23      	ldr	r3, [r4, #32]
   110f4:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   110f6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   110f8:	2308      	movs	r3, #8
   110fa:	466a      	mov	r2, sp
   110fc:	4630      	mov	r0, r6
   110fe:	f00b fb00 	bl	1c702 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   11102:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11104:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   11106:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11108:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   1110a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1110c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   1110e:	6a23      	ldr	r3, [r4, #32]
   11110:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   11112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11114:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11116:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11118:	2308      	movs	r3, #8
   1111a:	466a      	mov	r2, sp
   1111c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   1111e:	e9cd 7704 	strd	r7, r7, [sp, #16]
   11122:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11124:	f00b fc21 	bl	1c96a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   11128:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1112a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   1112c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1112e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   11130:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11132:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   11134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11136:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   11138:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1113a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   1113c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1113e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11140:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11142:	2308      	movs	r3, #8
   11144:	466a      	mov	r2, sp
   11146:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   11148:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1114c:	f00b fc0d 	bl	1c96a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   11150:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11152:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   11154:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11156:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   11158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1115a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   1115c:	6a23      	ldr	r3, [r4, #32]
   1115e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   11160:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11162:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   11164:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   11166:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   1116a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1116c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1116e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11170:	2308      	movs	r3, #8
   11172:	466a      	mov	r2, sp
   11174:	4630      	mov	r0, r6
   11176:	f00b fbf8 	bl	1c96a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   1117a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1117c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   1117e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   11180:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   11184:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11186:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   11188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1118a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   1118c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   1118e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   11192:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11194:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11196:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11198:	2308      	movs	r3, #8
   1119a:	466a      	mov	r2, sp
   1119c:	4630      	mov	r0, r6
   1119e:	f00b fbe4 	bl	1c96a <uECC_vli_sub>

	if (carry < 0) {
   111a2:	1a2d      	subs	r5, r5, r0
   111a4:	d410      	bmi.n	111c8 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   111a6:	4c0d      	ldr	r4, [pc, #52]	; (111dc <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   111a8:	b935      	cbnz	r5, 111b8 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   111aa:	2208      	movs	r2, #8
   111ac:	4631      	mov	r1, r6
   111ae:	4620      	mov	r0, r4
   111b0:	f00b fbb1 	bl	1c916 <uECC_vli_cmp_unsafe>
		while (carry || 
   111b4:	2801      	cmp	r0, #1
   111b6:	d00f      	beq.n	111d8 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   111b8:	2308      	movs	r3, #8
   111ba:	4622      	mov	r2, r4
   111bc:	4631      	mov	r1, r6
   111be:	4630      	mov	r0, r6
   111c0:	f00b fbd3 	bl	1c96a <uECC_vli_sub>
   111c4:	1a2d      	subs	r5, r5, r0
   111c6:	e7ef      	b.n	111a8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   111c8:	4a04      	ldr	r2, [pc, #16]	; (111dc <vli_mmod_fast_secp256r1+0x19c>)
   111ca:	2308      	movs	r3, #8
   111cc:	4631      	mov	r1, r6
   111ce:	4630      	mov	r0, r6
   111d0:	f00b fa97 	bl	1c702 <uECC_vli_add>
		while (carry < 0);
   111d4:	182d      	adds	r5, r5, r0
   111d6:	d4f8      	bmi.n	111ca <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   111d8:	b009      	add	sp, #36	; 0x24
   111da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111dc:	00020b88 	.word	0x00020b88

000111e0 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   111e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   111e2:	4e26      	ldr	r6, [pc, #152]	; (1127c <tc_aes128_set_encrypt_key+0x9c>)
{
   111e4:	4607      	mov	r7, r0
   111e6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   111e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   111ea:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   111ec:	ad01      	add	r5, sp, #4
   111ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   111f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   111f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   111f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   111f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   111fc:	4638      	mov	r0, r7
   111fe:	2f00      	cmp	r7, #0
   11200:	d038      	beq.n	11274 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   11202:	2c00      	cmp	r4, #0
   11204:	d038      	beq.n	11278 <tc_aes128_set_encrypt_key+0x98>
   11206:	1f38      	subs	r0, r7, #4
   11208:	4621      	mov	r1, r4
   1120a:	4602      	mov	r2, r0
   1120c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1120e:	784b      	ldrb	r3, [r1, #1]
   11210:	780d      	ldrb	r5, [r1, #0]
   11212:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11214:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   11218:	78cd      	ldrb	r5, [r1, #3]
   1121a:	432b      	orrs	r3, r5
   1121c:	788d      	ldrb	r5, [r1, #2]
   1121e:	3104      	adds	r1, #4
   11220:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   11224:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11226:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1122a:	d1f0      	bne.n	1120e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1122c:	4c14      	ldr	r4, [pc, #80]	; (11280 <tc_aes128_set_encrypt_key+0xa0>)
   1122e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   11230:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   11232:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   11234:	d116      	bne.n	11264 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11236:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1123a:	5ca5      	ldrb	r5, [r4, r2]
   1123c:	0e1a      	lsrs	r2, r3, #24
   1123e:	5ca2      	ldrb	r2, [r4, r2]
   11240:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   11244:	f3c3 2507 	ubfx	r5, r3, #8, #8
   11248:	b2db      	uxtb	r3, r3
   1124a:	5d65      	ldrb	r5, [r4, r5]
   1124c:	5ce3      	ldrb	r3, [r4, r3]
   1124e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   11252:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   11256:	ad0c      	add	r5, sp, #48	; 0x30
   11258:	f021 0303 	bic.w	r3, r1, #3
   1125c:	442b      	add	r3, r5
   1125e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   11262:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   11264:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   11268:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1126a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   1126c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1126e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   11270:	d1de      	bne.n	11230 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   11272:	2001      	movs	r0, #1
}
   11274:	b00d      	add	sp, #52	; 0x34
   11276:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   11278:	4620      	mov	r0, r4
   1127a:	e7fb      	b.n	11274 <tc_aes128_set_encrypt_key+0x94>
   1127c:	00020974 	.word	0x00020974
   11280:	000213bb 	.word	0x000213bb

00011284 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   11284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11288:	4615      	mov	r5, r2
   1128a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1128c:	4606      	mov	r6, r0
   1128e:	2800      	cmp	r0, #0
   11290:	d058      	beq.n	11344 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   11292:	2900      	cmp	r1, #0
   11294:	d059      	beq.n	1134a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   11296:	2a00      	cmp	r2, #0
   11298:	d059      	beq.n	1134e <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1129a:	2310      	movs	r3, #16
   1129c:	460a      	mov	r2, r1
   1129e:	4668      	mov	r0, sp
   112a0:	4619      	mov	r1, r3
   112a2:	f00b f96a 	bl	1c57a <_copy>
	add_round_key(state, s->words);
   112a6:	4629      	mov	r1, r5
   112a8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   112aa:	4c2a      	ldr	r4, [pc, #168]	; (11354 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   112ac:	f00c f86f 	bl	1d38e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   112b0:	f105 0710 	add.w	r7, r5, #16
   112b4:	46a1      	mov	r9, r4
   112b6:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   112b8:	46e8      	mov	r8, sp
{
   112ba:	466a      	mov	r2, sp
   112bc:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   112be:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   112c0:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   112c2:	5c61      	ldrb	r1, [r4, r1]
   112c4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   112c8:	d1f9      	bne.n	112be <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   112ca:	4668      	mov	r0, sp
   112cc:	f00c f8a4 	bl	1d418 <shift_rows>
	mult_row_column(t, s);
   112d0:	4669      	mov	r1, sp
   112d2:	a804      	add	r0, sp, #16
   112d4:	f00c f8d9 	bl	1d48a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   112d8:	a901      	add	r1, sp, #4
   112da:	a805      	add	r0, sp, #20
   112dc:	f00c f8d5 	bl	1d48a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   112e0:	a902      	add	r1, sp, #8
   112e2:	a806      	add	r0, sp, #24
   112e4:	f00c f8d1 	bl	1d48a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   112e8:	a903      	add	r1, sp, #12
   112ea:	a807      	add	r0, sp, #28
   112ec:	f00c f8cd 	bl	1d48a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   112f0:	2310      	movs	r3, #16
   112f2:	4619      	mov	r1, r3
   112f4:	eb0d 0203 	add.w	r2, sp, r3
   112f8:	4668      	mov	r0, sp
   112fa:	f00b f93e 	bl	1c57a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   112fe:	4639      	mov	r1, r7
   11300:	4668      	mov	r0, sp
   11302:	3710      	adds	r7, #16
   11304:	f00c f843 	bl	1d38e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   11308:	42af      	cmp	r7, r5
   1130a:	d1d5      	bne.n	112b8 <tc_aes_encrypt+0x34>
   1130c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1130e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   11312:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   11314:	f819 3003 	ldrb.w	r3, [r9, r3]
   11318:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   1131c:	d1f7      	bne.n	1130e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1131e:	4668      	mov	r0, sp
   11320:	f00c f87a 	bl	1d418 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   11324:	4629      	mov	r1, r5
   11326:	4668      	mov	r0, sp
   11328:	f00c f831 	bl	1d38e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1132c:	2310      	movs	r3, #16
   1132e:	4619      	mov	r1, r3
   11330:	466a      	mov	r2, sp
   11332:	4630      	mov	r0, r6
   11334:	f00b f921 	bl	1c57a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   11338:	4668      	mov	r0, sp
   1133a:	2210      	movs	r2, #16
   1133c:	4621      	mov	r1, r4
   1133e:	f00b f929 	bl	1c594 <_set>

	return TC_CRYPTO_SUCCESS;
   11342:	2001      	movs	r0, #1
}
   11344:	b009      	add	sp, #36	; 0x24
   11346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1134a:	4608      	mov	r0, r1
   1134c:	e7fa      	b.n	11344 <tc_aes_encrypt+0xc0>
   1134e:	4610      	mov	r0, r2
   11350:	e7f8      	b.n	11344 <tc_aes_encrypt+0xc0>
   11352:	bf00      	nop
   11354:	000213bb 	.word	0x000213bb

00011358 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11358:	4a09      	ldr	r2, [pc, #36]	; (11380 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1135a:	490a      	ldr	r1, [pc, #40]	; (11384 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1135c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1135e:	6809      	ldr	r1, [r1, #0]
   11360:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11362:	4909      	ldr	r1, [pc, #36]	; (11388 <arch_swap+0x30>)
	_current->arch.basepri = key;
   11364:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11366:	684b      	ldr	r3, [r1, #4]
   11368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1136c:	604b      	str	r3, [r1, #4]
   1136e:	2300      	movs	r3, #0
   11370:	f383 8811 	msr	BASEPRI, r3
   11374:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11378:	6893      	ldr	r3, [r2, #8]
}
   1137a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1137c:	4770      	bx	lr
   1137e:	bf00      	nop
   11380:	20001fe8 	.word	0x20001fe8
   11384:	0002111c 	.word	0x0002111c
   11388:	e000ed00 	.word	0xe000ed00

0001138c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1138c:	4912      	ldr	r1, [pc, #72]	; (113d8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1138e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11390:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11394:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11396:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1139a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1139e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   113a0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   113a4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   113a8:	4f0c      	ldr	r7, [pc, #48]	; (113dc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   113aa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   113ae:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   113b0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   113b2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   113b4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   113b6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   113b8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   113ba:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   113be:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   113c0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   113c2:	f000 fc29 	bl	11c18 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   113c6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   113ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   113ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   113d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   113d6:	4770      	bx	lr
    ldr r1, =_kernel
   113d8:	20001fe8 	.word	0x20001fe8
    ldr v4, =_SCS_ICSR
   113dc:	e000ed04 	.word	0xe000ed04

000113e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   113e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   113e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   113e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   113ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   113ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   113f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   113f4:	2902      	cmp	r1, #2
    beq _oops
   113f6:	d0ff      	beq.n	113f8 <_oops>

000113f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   113f8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   113fa:	f00c f989 	bl	1d710 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   113fe:	bd01      	pop	{r0, pc}

00011400 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   11400:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11402:	2b00      	cmp	r3, #0
   11404:	db08      	blt.n	11418 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11406:	2201      	movs	r2, #1
   11408:	f000 001f 	and.w	r0, r0, #31
   1140c:	fa02 f000 	lsl.w	r0, r2, r0
   11410:	095b      	lsrs	r3, r3, #5
   11412:	4a02      	ldr	r2, [pc, #8]	; (1141c <arch_irq_enable+0x1c>)
   11414:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11418:	4770      	bx	lr
   1141a:	bf00      	nop
   1141c:	e000e100 	.word	0xe000e100

00011420 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11420:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11422:	2b00      	cmp	r3, #0
   11424:	db0d      	blt.n	11442 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11426:	2201      	movs	r2, #1
   11428:	095b      	lsrs	r3, r3, #5
   1142a:	f000 001f 	and.w	r0, r0, #31
   1142e:	fa02 f000 	lsl.w	r0, r2, r0
   11432:	3320      	adds	r3, #32
   11434:	4a03      	ldr	r2, [pc, #12]	; (11444 <arch_irq_disable+0x24>)
   11436:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1143a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1143e:	f3bf 8f6f 	isb	sy
}
   11442:	4770      	bx	lr
   11444:	e000e100 	.word	0xe000e100

00011448 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11448:	4b05      	ldr	r3, [pc, #20]	; (11460 <arch_irq_is_enabled+0x18>)
   1144a:	0942      	lsrs	r2, r0, #5
   1144c:	f000 001f 	and.w	r0, r0, #31
   11450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11454:	2301      	movs	r3, #1
   11456:	fa03 f000 	lsl.w	r0, r3, r0
}
   1145a:	4010      	ands	r0, r2
   1145c:	4770      	bx	lr
   1145e:	bf00      	nop
   11460:	e000e100 	.word	0xe000e100

00011464 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   11464:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11466:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   11468:	bf54      	ite	pl
   1146a:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1146c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1146e:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11470:	bfac      	ite	ge
   11472:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11476:	4a07      	ldrlt	r2, [pc, #28]	; (11494 <z_arm_irq_priority_set+0x30>)
   11478:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1147c:	bfac      	ite	ge
   1147e:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11482:	f000 000f 	andlt.w	r0, r0, #15
   11486:	b2db      	uxtb	r3, r3
   11488:	bfb4      	ite	lt
   1148a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1148c:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   11490:	4770      	bx	lr
   11492:	bf00      	nop
   11494:	e000ed14 	.word	0xe000ed14

00011498 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   11498:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1149a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1149c:	4b04      	ldr	r3, [pc, #16]	; (114b0 <_arch_isr_direct_pm+0x18>)
   1149e:	6a18      	ldr	r0, [r3, #32]
   114a0:	b118      	cbz	r0, 114aa <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   114a2:	2200      	movs	r2, #0
   114a4:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   114a6:	f00e fbed 	bl	1fc84 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   114aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   114ac:	bd08      	pop	{r3, pc}
   114ae:	bf00      	nop
   114b0:	20001fe8 	.word	0x20001fe8

000114b4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   114b4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   114b8:	9b00      	ldr	r3, [sp, #0]
   114ba:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   114be:	490a      	ldr	r1, [pc, #40]	; (114e8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   114c0:	9b01      	ldr	r3, [sp, #4]
   114c2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   114c6:	9b02      	ldr	r3, [sp, #8]
   114c8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   114cc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   114d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   114d4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   114d8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   114dc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   114de:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   114e0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   114e2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   114e4:	4770      	bx	lr
   114e6:	bf00      	nop
   114e8:	0001bacb 	.word	0x0001bacb

000114ec <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   114ec:	4a0b      	ldr	r2, [pc, #44]	; (1151c <z_check_thread_stack_fail+0x30>)
{
   114ee:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   114f0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   114f2:	b190      	cbz	r0, 1151a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   114f4:	f113 0f16 	cmn.w	r3, #22
   114f8:	6e80      	ldr	r0, [r0, #104]	; 0x68
   114fa:	d005      	beq.n	11508 <z_check_thread_stack_fail+0x1c>
   114fc:	f1a0 0220 	sub.w	r2, r0, #32
   11500:	429a      	cmp	r2, r3
   11502:	d806      	bhi.n	11512 <z_check_thread_stack_fail+0x26>
   11504:	4283      	cmp	r3, r0
   11506:	d204      	bcs.n	11512 <z_check_thread_stack_fail+0x26>
   11508:	4281      	cmp	r1, r0
   1150a:	bf2c      	ite	cs
   1150c:	2100      	movcs	r1, #0
   1150e:	2101      	movcc	r1, #1
   11510:	e000      	b.n	11514 <z_check_thread_stack_fail+0x28>
   11512:	2100      	movs	r1, #0
   11514:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   11516:	bf08      	it	eq
   11518:	2000      	moveq	r0, #0
}
   1151a:	4770      	bx	lr
   1151c:	20001fe8 	.word	0x20001fe8

00011520 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11520:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11522:	4b09      	ldr	r3, [pc, #36]	; (11548 <arch_switch_to_main_thread+0x28>)
   11524:	6098      	str	r0, [r3, #8]
{
   11526:	460d      	mov	r5, r1
   11528:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1152a:	f000 fb75 	bl	11c18 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1152e:	4620      	mov	r0, r4
   11530:	f385 8809 	msr	PSP, r5
   11534:	2100      	movs	r1, #0
   11536:	b663      	cpsie	if
   11538:	f381 8811 	msr	BASEPRI, r1
   1153c:	f3bf 8f6f 	isb	sy
   11540:	2200      	movs	r2, #0
   11542:	2300      	movs	r3, #0
   11544:	f00a fac1 	bl	1baca <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11548:	20001fe8 	.word	0x20001fe8

0001154c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1154c:	4901      	ldr	r1, [pc, #4]	; (11554 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1154e:	2210      	movs	r2, #16
	str	r2, [r1]
   11550:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11552:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11554:	e000ed10 	.word	0xe000ed10

00011558 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11558:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1155a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1155c:	f380 8811 	msr	BASEPRI, r0
	isb
   11560:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   11564:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11568:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1156a:	b662      	cpsie	i
	isb
   1156c:	f3bf 8f6f 	isb	sy

	bx	lr
   11570:	4770      	bx	lr
   11572:	bf00      	nop

00011574 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   11574:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   11576:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11578:	f381 8811 	msr	BASEPRI, r1

	wfe
   1157c:	bf20      	wfe

	msr	BASEPRI, r0
   1157e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   11582:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   11584:	4770      	bx	lr
   11586:	bf00      	nop

00011588 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11588:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1158a:	4606      	mov	r6, r0

	if (esf != NULL) {
   1158c:	460c      	mov	r4, r1
   1158e:	b301      	cbz	r1, 115d2 <z_arm_fatal_error+0x4a>
   11590:	4b13      	ldr	r3, [pc, #76]	; (115e0 <z_arm_fatal_error+0x58>)
   11592:	4d14      	ldr	r5, [pc, #80]	; (115e4 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   11594:	4814      	ldr	r0, [pc, #80]	; (115e8 <z_arm_fatal_error+0x60>)
   11596:	1aed      	subs	r5, r5, r3
   11598:	08ed      	lsrs	r5, r5, #3
   1159a:	01ad      	lsls	r5, r5, #6
   1159c:	f045 0501 	orr.w	r5, r5, #1
   115a0:	f8ad 5000 	strh.w	r5, [sp]
   115a4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   115a8:	6809      	ldr	r1, [r1, #0]
   115aa:	f00a fe23 	bl	1c1f4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   115ae:	f8ad 5000 	strh.w	r5, [sp]
   115b2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   115b6:	68e1      	ldr	r1, [r4, #12]
   115b8:	480c      	ldr	r0, [pc, #48]	; (115ec <z_arm_fatal_error+0x64>)
   115ba:	f00a fe1b 	bl	1c1f4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   115be:	69e1      	ldr	r1, [r4, #28]
   115c0:	480b      	ldr	r0, [pc, #44]	; (115f0 <z_arm_fatal_error+0x68>)
   115c2:	462a      	mov	r2, r5
   115c4:	f00a fde9 	bl	1c19a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   115c8:	69a1      	ldr	r1, [r4, #24]
   115ca:	480a      	ldr	r0, [pc, #40]	; (115f4 <z_arm_fatal_error+0x6c>)
   115cc:	462a      	mov	r2, r5
   115ce:	f00a fde4 	bl	1c19a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   115d2:	4621      	mov	r1, r4
   115d4:	4630      	mov	r0, r6
}
   115d6:	b002      	add	sp, #8
   115d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   115dc:	f008 bdaa 	b.w	1a134 <z_fatal_error>
   115e0:	00020854 	.word	0x00020854
   115e4:	00020904 	.word	0x00020904
   115e8:	000214bb 	.word	0x000214bb
   115ec:	000214ea 	.word	0x000214ea
   115f0:	00021519 	.word	0x00021519
   115f4:	00021528 	.word	0x00021528

000115f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   115f8:	bf30      	wfi
    b z_SysNmiOnReset
   115fa:	f7ff bffd 	b.w	115f8 <z_SysNmiOnReset>
   115fe:	bf00      	nop

00011600 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11600:	4a0b      	ldr	r2, [pc, #44]	; (11630 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   11602:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11604:	4b0b      	ldr	r3, [pc, #44]	; (11634 <z_arm_prep_c+0x34>)
   11606:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1160a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1160c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11610:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11614:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11618:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1161c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11620:	f008 fde6 	bl	1a1f0 <z_bss_zero>
	z_data_copy();
   11624:	f009 fe58 	bl	1b2d8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11628:	f000 facc 	bl	11bc4 <z_arm_interrupt_init>
	z_cstart();
   1162c:	f008 fe04 	bl	1a238 <z_cstart>
   11630:	00000000 	.word	0x00000000
   11634:	e000ed00 	.word	0xe000ed00

00011638 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11638:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1163a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1163c:	4a0b      	ldr	r2, [pc, #44]	; (1166c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1163e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   11640:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11642:	bf1e      	ittt	ne
	movne	r1, #0
   11644:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11646:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   11648:	f00e fb1c 	blne	1fc84 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1164c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1164e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11652:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11656:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1165a:	4905      	ldr	r1, [pc, #20]	; (11670 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1165c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1165e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11660:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11662:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11666:	4903      	ldr	r1, [pc, #12]	; (11674 <_isr_wrapper+0x3c>)
	bx r1
   11668:	4708      	bx	r1
   1166a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1166c:	20001fe8 	.word	0x20001fe8
	ldr r1, =_sw_isr_table
   11670:	000206d0 	.word	0x000206d0
	ldr r1, =z_arm_int_exit
   11674:	00011b25 	.word	0x00011b25

00011678 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11678:	2000      	movs	r0, #0
    msr CONTROL, r0
   1167a:	f380 8814 	msr	CONTROL, r0
    isb
   1167e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   11682:	f00c f8e7 	bl	1d854 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11686:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11688:	490d      	ldr	r1, [pc, #52]	; (116c0 <__start+0x48>)
    str r0, [r1]
   1168a:	6008      	str	r0, [r1, #0]
    dsb
   1168c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11690:	480c      	ldr	r0, [pc, #48]	; (116c4 <__start+0x4c>)
    msr msp, r0
   11692:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11696:	f000 fa63 	bl	11b60 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1169a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1169c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   116a0:	4809      	ldr	r0, [pc, #36]	; (116c8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   116a2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   116a6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   116a8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   116ac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   116b0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   116b2:	4308      	orrs	r0, r1
    msr CONTROL, r0
   116b4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   116b8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   116bc:	f7ff ffa0 	bl	11600 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   116c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   116c4:	20004760 	.word	0x20004760
    ldr r0, =z_interrupt_stacks
   116c8:	200048e0 	.word	0x200048e0

000116cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   116cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   116d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   116d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   116d6:	4672      	mov	r2, lr
	bl z_arm_fault
   116d8:	f000 f94e 	bl	11978 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   116dc:	bd01      	pop	{r0, pc}
   116de:	bf00      	nop

000116e0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   116e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   116e4:	4b35      	ldr	r3, [pc, #212]	; (117bc <mem_manage_fault+0xdc>)
   116e6:	4c36      	ldr	r4, [pc, #216]	; (117c0 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   116e8:	4d36      	ldr	r5, [pc, #216]	; (117c4 <mem_manage_fault+0xe4>)
   116ea:	1ae4      	subs	r4, r4, r3
   116ec:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   116ee:	01a4      	lsls	r4, r4, #6
   116f0:	f044 0901 	orr.w	r9, r4, #1
{
   116f4:	4607      	mov	r7, r0
   116f6:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   116f8:	4833      	ldr	r0, [pc, #204]	; (117c8 <mem_manage_fault+0xe8>)
   116fa:	4649      	mov	r1, r9
{
   116fc:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   116fe:	f00a fd3f 	bl	1c180 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11702:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11704:	06d3      	lsls	r3, r2, #27
   11706:	d503      	bpl.n	11710 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   11708:	4830      	ldr	r0, [pc, #192]	; (117cc <mem_manage_fault+0xec>)
   1170a:	4649      	mov	r1, r9
   1170c:	f00a fd38 	bl	1c180 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11710:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11712:	0718      	lsls	r0, r3, #28
   11714:	d504      	bpl.n	11720 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   11716:	482e      	ldr	r0, [pc, #184]	; (117d0 <mem_manage_fault+0xf0>)
   11718:	f044 0101 	orr.w	r1, r4, #1
   1171c:	f00a fd30 	bl	1c180 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11720:	4d28      	ldr	r5, [pc, #160]	; (117c4 <mem_manage_fault+0xe4>)
   11722:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11724:	0799      	lsls	r1, r3, #30
   11726:	d423      	bmi.n	11770 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   11728:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1172c:	4d25      	ldr	r5, [pc, #148]	; (117c4 <mem_manage_fault+0xe4>)
   1172e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11730:	07d3      	lsls	r3, r2, #31
   11732:	d504      	bpl.n	1173e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   11734:	4827      	ldr	r0, [pc, #156]	; (117d4 <mem_manage_fault+0xf4>)
   11736:	f044 0101 	orr.w	r1, r4, #1
   1173a:	f00a fd21 	bl	1c180 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1173e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11740:	0698      	lsls	r0, r3, #26
   11742:	d504      	bpl.n	1174e <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   11744:	4824      	ldr	r0, [pc, #144]	; (117d8 <mem_manage_fault+0xf8>)
   11746:	f044 0101 	orr.w	r1, r4, #1
   1174a:	f00a fd19 	bl	1c180 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1174e:	4b1d      	ldr	r3, [pc, #116]	; (117c4 <mem_manage_fault+0xe4>)
   11750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11752:	06d1      	lsls	r1, r2, #27
   11754:	d424      	bmi.n	117a0 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11758:	0792      	lsls	r2, r2, #30
   1175a:	d421      	bmi.n	117a0 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1175c:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1175e:	4a19      	ldr	r2, [pc, #100]	; (117c4 <mem_manage_fault+0xe4>)
   11760:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11762:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   11766:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   11768:	2300      	movs	r3, #0
   1176a:	7033      	strb	r3, [r6, #0]

	return reason;
}
   1176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   11770:	f044 0a01 	orr.w	sl, r4, #1
   11774:	4819      	ldr	r0, [pc, #100]	; (117dc <mem_manage_fault+0xfc>)
   11776:	4651      	mov	r1, sl
   11778:	f00a fd02 	bl	1c180 <log_0>
		uint32_t temp = SCB->MMFAR;
   1177c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11780:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11782:	061a      	lsls	r2, r3, #24
   11784:	d5d0      	bpl.n	11728 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   11786:	4816      	ldr	r0, [pc, #88]	; (117e0 <mem_manage_fault+0x100>)
   11788:	4652      	mov	r2, sl
   1178a:	4649      	mov	r1, r9
   1178c:	f00a fd05 	bl	1c19a <log_1>
			if (from_hard_fault != 0) {
   11790:	f1b8 0f00 	cmp.w	r8, #0
   11794:	d0ca      	beq.n	1172c <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11796:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1179c:	62ab      	str	r3, [r5, #40]	; 0x28
   1179e:	e7c5      	b.n	1172c <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   117a0:	685b      	ldr	r3, [r3, #4]
   117a2:	051b      	lsls	r3, r3, #20
   117a4:	d5da      	bpl.n	1175c <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   117a6:	4639      	mov	r1, r7
   117a8:	4648      	mov	r0, r9
   117aa:	f7ff fe9f 	bl	114ec <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   117ae:	2800      	cmp	r0, #0
   117b0:	d0d4      	beq.n	1175c <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   117b2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   117b6:	2002      	movs	r0, #2
   117b8:	e7d1      	b.n	1175e <mem_manage_fault+0x7e>
   117ba:	bf00      	nop
   117bc:	00020854 	.word	0x00020854
   117c0:	00020904 	.word	0x00020904
   117c4:	e000ed00 	.word	0xe000ed00
   117c8:	00021556 	.word	0x00021556
   117cc:	0002156c 	.word	0x0002156c
   117d0:	0002159f 	.word	0x0002159f
   117d4:	000215e0 	.word	0x000215e0
   117d8:	000215ff 	.word	0x000215ff
   117dc:	000215b2 	.word	0x000215b2
   117e0:	000215ca 	.word	0x000215ca

000117e4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   117e4:	b570      	push	{r4, r5, r6, lr}
   117e6:	4b23      	ldr	r3, [pc, #140]	; (11874 <usage_fault.isra.0+0x90>)
   117e8:	4c23      	ldr	r4, [pc, #140]	; (11878 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   117ea:	4d24      	ldr	r5, [pc, #144]	; (1187c <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   117ec:	4824      	ldr	r0, [pc, #144]	; (11880 <usage_fault.isra.0+0x9c>)
   117ee:	1ae4      	subs	r4, r4, r3
   117f0:	08e4      	lsrs	r4, r4, #3
   117f2:	01a4      	lsls	r4, r4, #6
   117f4:	f044 0601 	orr.w	r6, r4, #1
   117f8:	4631      	mov	r1, r6
   117fa:	f00a fcc1 	bl	1c180 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   117fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11800:	0193      	lsls	r3, r2, #6
   11802:	d503      	bpl.n	1180c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   11804:	481f      	ldr	r0, [pc, #124]	; (11884 <usage_fault.isra.0+0xa0>)
   11806:	4631      	mov	r1, r6
   11808:	f00a fcba 	bl	1c180 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1180c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1180e:	01dd      	lsls	r5, r3, #7
   11810:	d504      	bpl.n	1181c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   11812:	481d      	ldr	r0, [pc, #116]	; (11888 <usage_fault.isra.0+0xa4>)
   11814:	f044 0101 	orr.w	r1, r4, #1
   11818:	f00a fcb2 	bl	1c180 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1181c:	4d17      	ldr	r5, [pc, #92]	; (1187c <usage_fault.isra.0+0x98>)
   1181e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11820:	0310      	lsls	r0, r2, #12
   11822:	d504      	bpl.n	1182e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   11824:	4819      	ldr	r0, [pc, #100]	; (1188c <usage_fault.isra.0+0xa8>)
   11826:	f044 0101 	orr.w	r1, r4, #1
   1182a:	f00a fca9 	bl	1c180 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1182e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11830:	0359      	lsls	r1, r3, #13
   11832:	d504      	bpl.n	1183e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   11834:	4816      	ldr	r0, [pc, #88]	; (11890 <usage_fault.isra.0+0xac>)
   11836:	f044 0101 	orr.w	r1, r4, #1
   1183a:	f00a fca1 	bl	1c180 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1183e:	4d0f      	ldr	r5, [pc, #60]	; (1187c <usage_fault.isra.0+0x98>)
   11840:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11842:	0392      	lsls	r2, r2, #14
   11844:	d504      	bpl.n	11850 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   11846:	4813      	ldr	r0, [pc, #76]	; (11894 <usage_fault.isra.0+0xb0>)
   11848:	f044 0101 	orr.w	r1, r4, #1
   1184c:	f00a fc98 	bl	1c180 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11850:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11852:	03db      	lsls	r3, r3, #15
   11854:	d504      	bpl.n	11860 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11856:	4810      	ldr	r0, [pc, #64]	; (11898 <usage_fault.isra.0+0xb4>)
   11858:	f044 0101 	orr.w	r1, r4, #1
   1185c:	f00a fc90 	bl	1c180 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11860:	4a06      	ldr	r2, [pc, #24]	; (1187c <usage_fault.isra.0+0x98>)
   11862:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11864:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11868:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1186c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1186e:	2000      	movs	r0, #0
   11870:	bd70      	pop	{r4, r5, r6, pc}
   11872:	bf00      	nop
   11874:	00020854 	.word	0x00020854
   11878:	00020904 	.word	0x00020904
   1187c:	e000ed00 	.word	0xe000ed00
   11880:	0002162e 	.word	0x0002162e
   11884:	00021646 	.word	0x00021646
   11888:	00021659 	.word	0x00021659
   1188c:	00021673 	.word	0x00021673
   11890:	00021691 	.word	0x00021691
   11894:	000216b6 	.word	0x000216b6
   11898:	000216d0 	.word	0x000216d0

0001189c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1189c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118a0:	4b2a      	ldr	r3, [pc, #168]	; (1194c <bus_fault.isra.0+0xb0>)
   118a2:	4c2b      	ldr	r4, [pc, #172]	; (11950 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   118a4:	4d2b      	ldr	r5, [pc, #172]	; (11954 <bus_fault.isra.0+0xb8>)
   118a6:	1ae4      	subs	r4, r4, r3
   118a8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   118aa:	01a4      	lsls	r4, r4, #6
   118ac:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   118b0:	4607      	mov	r7, r0
   118b2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   118b4:	4828      	ldr	r0, [pc, #160]	; (11958 <bus_fault.isra.0+0xbc>)
   118b6:	4641      	mov	r1, r8
   118b8:	f00a fc62 	bl	1c180 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   118bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   118be:	04d1      	lsls	r1, r2, #19
   118c0:	d503      	bpl.n	118ca <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   118c2:	4826      	ldr	r0, [pc, #152]	; (1195c <bus_fault.isra.0+0xc0>)
   118c4:	4641      	mov	r1, r8
   118c6:	f00a fc5b 	bl	1c180 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   118ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   118cc:	051a      	lsls	r2, r3, #20
   118ce:	d504      	bpl.n	118da <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   118d0:	4823      	ldr	r0, [pc, #140]	; (11960 <bus_fault.isra.0+0xc4>)
   118d2:	f044 0101 	orr.w	r1, r4, #1
   118d6:	f00a fc53 	bl	1c180 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   118da:	4d1e      	ldr	r5, [pc, #120]	; (11954 <bus_fault.isra.0+0xb8>)
   118dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   118de:	059b      	lsls	r3, r3, #22
   118e0:	d512      	bpl.n	11908 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   118e2:	f044 0801 	orr.w	r8, r4, #1
   118e6:	481f      	ldr	r0, [pc, #124]	; (11964 <bus_fault.isra.0+0xc8>)
   118e8:	4641      	mov	r1, r8
   118ea:	f00a fc49 	bl	1c180 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   118ee:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   118f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   118f2:	0418      	lsls	r0, r3, #16
   118f4:	d508      	bpl.n	11908 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   118f6:	481c      	ldr	r0, [pc, #112]	; (11968 <bus_fault.isra.0+0xcc>)
   118f8:	4642      	mov	r2, r8
   118fa:	f00a fc4e 	bl	1c19a <log_1>
			if (from_hard_fault != 0) {
   118fe:	b11f      	cbz	r7, 11908 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11900:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11902:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   11906:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11908:	4d12      	ldr	r5, [pc, #72]	; (11954 <bus_fault.isra.0+0xb8>)
   1190a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1190c:	0559      	lsls	r1, r3, #21
   1190e:	d504      	bpl.n	1191a <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   11910:	4816      	ldr	r0, [pc, #88]	; (1196c <bus_fault.isra.0+0xd0>)
   11912:	f044 0101 	orr.w	r1, r4, #1
   11916:	f00a fc33 	bl	1c180 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1191a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1191c:	05da      	lsls	r2, r3, #23
   1191e:	d50d      	bpl.n	1193c <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   11920:	4813      	ldr	r0, [pc, #76]	; (11970 <bus_fault.isra.0+0xd4>)
   11922:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11926:	f00a fc2b 	bl	1c180 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1192a:	4a0a      	ldr	r2, [pc, #40]	; (11954 <bus_fault.isra.0+0xb8>)
   1192c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1192e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11930:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11934:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11936:	7030      	strb	r0, [r6, #0]
}
   11938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1193c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1193e:	049b      	lsls	r3, r3, #18
   11940:	d5f3      	bpl.n	1192a <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11942:	480c      	ldr	r0, [pc, #48]	; (11974 <bus_fault.isra.0+0xd8>)
   11944:	f044 0101 	orr.w	r1, r4, #1
   11948:	e7ed      	b.n	11926 <bus_fault.isra.0+0x8a>
   1194a:	bf00      	nop
   1194c:	00020854 	.word	0x00020854
   11950:	00020904 	.word	0x00020904
   11954:	e000ed00 	.word	0xe000ed00
   11958:	000216fb 	.word	0x000216fb
   1195c:	00021711 	.word	0x00021711
   11960:	0002159f 	.word	0x0002159f
   11964:	00021722 	.word	0x00021722
   11968:	0002173b 	.word	0x0002173b
   1196c:	00021750 	.word	0x00021750
   11970:	0002176b 	.word	0x0002176b
   11974:	000215ff 	.word	0x000215ff

00011978 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1197c:	4b57      	ldr	r3, [pc, #348]	; (11adc <z_arm_fault+0x164>)
   1197e:	685e      	ldr	r6, [r3, #4]
{
   11980:	b08a      	sub	sp, #40	; 0x28
   11982:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11984:	f3c6 0408 	ubfx	r4, r6, #0, #9
   11988:	2500      	movs	r5, #0
   1198a:	f385 8811 	msr	BASEPRI, r5
   1198e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11992:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11996:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1199a:	d10d      	bne.n	119b8 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1199c:	f002 030c 	and.w	r3, r2, #12
   119a0:	2b08      	cmp	r3, #8
   119a2:	d10b      	bne.n	119bc <z_arm_fault+0x44>
   119a4:	494e      	ldr	r1, [pc, #312]	; (11ae0 <z_arm_fault+0x168>)
   119a6:	4b4f      	ldr	r3, [pc, #316]	; (11ae4 <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   119a8:	484f      	ldr	r0, [pc, #316]	; (11ae8 <z_arm_fault+0x170>)
   119aa:	1ac9      	subs	r1, r1, r3
   119ac:	08c9      	lsrs	r1, r1, #3
   119ae:	0189      	lsls	r1, r1, #6
   119b0:	f041 0101 	orr.w	r1, r1, #1
   119b4:	f00a fbe4 	bl	1c180 <log_0>
		return NULL;
   119b8:	462f      	mov	r7, r5
   119ba:	e003      	b.n	119c4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   119bc:	0712      	lsls	r2, r2, #28
   119be:	d401      	bmi.n	119c4 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   119c0:	4607      	mov	r7, r0
			*nested_exc = true;
   119c2:	2501      	movs	r5, #1
	*recoverable = false;
   119c4:	2300      	movs	r3, #0
   119c6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   119ca:	1ee3      	subs	r3, r4, #3
   119cc:	2b09      	cmp	r3, #9
   119ce:	d86b      	bhi.n	11aa8 <z_arm_fault+0x130>
   119d0:	e8df f003 	tbb	[pc, r3]
   119d4:	3d5d5905 	.word	0x3d5d5905
   119d8:	6a6a6a6a 	.word	0x6a6a6a6a
   119dc:	616a      	.short	0x616a
   119de:	4b41      	ldr	r3, [pc, #260]	; (11ae4 <z_arm_fault+0x16c>)
   119e0:	4e3f      	ldr	r6, [pc, #252]	; (11ae0 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   119e2:	4842      	ldr	r0, [pc, #264]	; (11aec <z_arm_fault+0x174>)
   119e4:	1af6      	subs	r6, r6, r3
   119e6:	08f6      	lsrs	r6, r6, #3
   119e8:	01b6      	lsls	r6, r6, #6
   119ea:	f046 0601 	orr.w	r6, r6, #1
   119ee:	4631      	mov	r1, r6
   119f0:	f00a fbc6 	bl	1c180 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   119f4:	4b39      	ldr	r3, [pc, #228]	; (11adc <z_arm_fault+0x164>)
   119f6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   119f8:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   119fc:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   11a00:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11a04:	d005      	beq.n	11a12 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   11a06:	483a      	ldr	r0, [pc, #232]	; (11af0 <z_arm_fault+0x178>)
   11a08:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   11a0a:	f00a fbb9 	bl	1c180 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11a0e:	2400      	movs	r4, #0
}
   11a10:	e020      	b.n	11a54 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11a14:	005b      	lsls	r3, r3, #1
   11a16:	d51d      	bpl.n	11a54 <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
   11a18:	4836      	ldr	r0, [pc, #216]	; (11af4 <z_arm_fault+0x17c>)
   11a1a:	4631      	mov	r1, r6
   11a1c:	f00a fbb0 	bl	1c180 <log_0>
		if (SCB_MMFSR != 0) {
   11a20:	4b35      	ldr	r3, [pc, #212]	; (11af8 <z_arm_fault+0x180>)
   11a22:	781b      	ldrb	r3, [r3, #0]
   11a24:	b133      	cbz	r3, 11a34 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
   11a26:	f10d 0207 	add.w	r2, sp, #7
   11a2a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   11a2c:	4638      	mov	r0, r7
   11a2e:	f7ff fe57 	bl	116e0 <mem_manage_fault>
   11a32:	e00e      	b.n	11a52 <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
   11a34:	4b31      	ldr	r3, [pc, #196]	; (11afc <z_arm_fault+0x184>)
   11a36:	781b      	ldrb	r3, [r3, #0]
   11a38:	b12b      	cbz	r3, 11a46 <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
   11a3a:	f10d 0107 	add.w	r1, sp, #7
   11a3e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   11a40:	f7ff ff2c 	bl	1189c <bus_fault.isra.0>
   11a44:	e005      	b.n	11a52 <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
   11a46:	4b2e      	ldr	r3, [pc, #184]	; (11b00 <z_arm_fault+0x188>)
   11a48:	881b      	ldrh	r3, [r3, #0]
   11a4a:	b29b      	uxth	r3, r3
   11a4c:	b113      	cbz	r3, 11a54 <z_arm_fault+0xdc>
			reason = usage_fault(esf);
   11a4e:	f7ff fec9 	bl	117e4 <usage_fault.isra.0>
   11a52:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11a54:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11a58:	b993      	cbnz	r3, 11a80 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11a5a:	2220      	movs	r2, #32
   11a5c:	4639      	mov	r1, r7
   11a5e:	a802      	add	r0, sp, #8
   11a60:	f00b feaa 	bl	1d7b8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a66:	b39d      	cbz	r5, 11ad0 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11a6c:	b922      	cbnz	r2, 11a78 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11a6e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11a72:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11a76:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11a78:	a902      	add	r1, sp, #8
   11a7a:	4620      	mov	r0, r4
   11a7c:	f7ff fd84 	bl	11588 <z_arm_fatal_error>
}
   11a80:	b00a      	add	sp, #40	; 0x28
   11a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   11a86:	f10d 0207 	add.w	r2, sp, #7
   11a8a:	2100      	movs	r1, #0
   11a8c:	e7ce      	b.n	11a2c <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
   11a8e:	f10d 0107 	add.w	r1, sp, #7
   11a92:	2000      	movs	r0, #0
   11a94:	e7d4      	b.n	11a40 <z_arm_fault+0xc8>
   11a96:	4912      	ldr	r1, [pc, #72]	; (11ae0 <z_arm_fault+0x168>)
   11a98:	4b12      	ldr	r3, [pc, #72]	; (11ae4 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
   11a9a:	481a      	ldr	r0, [pc, #104]	; (11b04 <z_arm_fault+0x18c>)
   11a9c:	1ac9      	subs	r1, r1, r3
   11a9e:	08c9      	lsrs	r1, r1, #3
   11aa0:	0189      	lsls	r1, r1, #6
   11aa2:	f041 0101 	orr.w	r1, r1, #1
   11aa6:	e7b0      	b.n	11a0a <z_arm_fault+0x92>
   11aa8:	4a0e      	ldr	r2, [pc, #56]	; (11ae4 <z_arm_fault+0x16c>)
   11aaa:	4b0d      	ldr	r3, [pc, #52]	; (11ae0 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
   11aac:	4816      	ldr	r0, [pc, #88]	; (11b08 <z_arm_fault+0x190>)
   11aae:	4917      	ldr	r1, [pc, #92]	; (11b0c <z_arm_fault+0x194>)
   11ab0:	1a9b      	subs	r3, r3, r2
   11ab2:	08db      	lsrs	r3, r3, #3
   11ab4:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   11ab8:	ea4f 1383 	mov.w	r3, r3, lsl #6
   11abc:	bf18      	it	ne
   11abe:	4601      	movne	r1, r0
   11ac0:	f043 0301 	orr.w	r3, r3, #1
   11ac4:	4812      	ldr	r0, [pc, #72]	; (11b10 <z_arm_fault+0x198>)
   11ac6:	f1a4 0210 	sub.w	r2, r4, #16
   11aca:	f00a fb7a 	bl	1c1c2 <log_2>
   11ace:	e79e      	b.n	11a0e <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11ad0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11ad4:	f023 0301 	bic.w	r3, r3, #1
   11ad8:	e7cd      	b.n	11a76 <z_arm_fault+0xfe>
   11ada:	bf00      	nop
   11adc:	e000ed00 	.word	0xe000ed00
   11ae0:	00020904 	.word	0x00020904
   11ae4:	00020854 	.word	0x00020854
   11ae8:	00021783 	.word	0x00021783
   11aec:	000217ae 	.word	0x000217ae
   11af0:	000217c5 	.word	0x000217c5
   11af4:	000217e6 	.word	0x000217e6
   11af8:	e000ed28 	.word	0xe000ed28
   11afc:	e000ed29 	.word	0xe000ed29
   11b00:	e000ed2a 	.word	0xe000ed2a
   11b04:	00021805 	.word	0x00021805
   11b08:	0002183e 	.word	0x0002183e
   11b0c:	00021829 	.word	0x00021829
   11b10:	00021857 	.word	0x00021857

00011b14 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11b14:	4a02      	ldr	r2, [pc, #8]	; (11b20 <z_arm_fault_init+0xc>)
   11b16:	6953      	ldr	r3, [r2, #20]
   11b18:	f043 0310 	orr.w	r3, r3, #16
   11b1c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11b1e:	4770      	bx	lr
   11b20:	e000ed00 	.word	0xe000ed00

00011b24 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11b24:	4b04      	ldr	r3, [pc, #16]	; (11b38 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11b26:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11b28:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   11b2a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11b2c:	d003      	beq.n	11b36 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11b2e:	4903      	ldr	r1, [pc, #12]	; (11b3c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11b34:	600a      	str	r2, [r1, #0]

00011b36 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11b36:	4770      	bx	lr
	ldr r3, =_kernel
   11b38:	20001fe8 	.word	0x20001fe8
	ldr r1, =_SCS_ICSR
   11b3c:	e000ed04 	.word	0xe000ed04

00011b40 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11b40:	4a06      	ldr	r2, [pc, #24]	; (11b5c <z_arm_clear_arm_mpu_config+0x1c>)
   11b42:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   11b44:	2300      	movs	r3, #0
	int num_regions =
   11b46:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   11b4a:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   11b4c:	428b      	cmp	r3, r1
   11b4e:	d100      	bne.n	11b52 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   11b50:	4770      	bx	lr
  MPU->RNR = rnr;
   11b52:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   11b54:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   11b56:	3301      	adds	r3, #1
   11b58:	e7f8      	b.n	11b4c <z_arm_clear_arm_mpu_config+0xc>
   11b5a:	bf00      	nop
   11b5c:	e000ed90 	.word	0xe000ed90

00011b60 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11b60:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11b62:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11b64:	2300      	movs	r3, #0
   11b66:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11b6a:	f7ff ffe9 	bl	11b40 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11b6e:	4b14      	ldr	r3, [pc, #80]	; (11bc0 <z_arm_init_arch_hw_at_boot+0x60>)
   11b70:	f04f 32ff 	mov.w	r2, #4294967295
   11b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   11b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   11b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   11b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   11b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   11b88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   11b8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   11b90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11b94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11b98:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   11b9c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   11ba0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   11ba4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   11ba8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   11bac:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   11bb0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   11bb4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11bba:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11bbe:	bd08      	pop	{r3, pc}
   11bc0:	e000e100 	.word	0xe000e100

00011bc4 <z_arm_interrupt_init>:
   11bc4:	4804      	ldr	r0, [pc, #16]	; (11bd8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11bc6:	2300      	movs	r3, #0
   11bc8:	2140      	movs	r1, #64	; 0x40
   11bca:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11bcc:	3301      	adds	r3, #1
   11bce:	2b27      	cmp	r3, #39	; 0x27
   11bd0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11bd4:	d1f9      	bne.n	11bca <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11bd6:	4770      	bx	lr
   11bd8:	e000e100 	.word	0xe000e100

00011bdc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11bdc:	4b06      	ldr	r3, [pc, #24]	; (11bf8 <z_impl_k_thread_abort+0x1c>)
   11bde:	689b      	ldr	r3, [r3, #8]
   11be0:	4283      	cmp	r3, r0
   11be2:	d107      	bne.n	11bf4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11be4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11be8:	b123      	cbz	r3, 11bf4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11bea:	4a04      	ldr	r2, [pc, #16]	; (11bfc <z_impl_k_thread_abort+0x20>)
   11bec:	6853      	ldr	r3, [r2, #4]
   11bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11bf2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   11bf4:	f009 bb0c 	b.w	1b210 <z_thread_abort>
   11bf8:	20001fe8 	.word	0x20001fe8
   11bfc:	e000ed00 	.word	0xe000ed00

00011c00 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11c00:	4b02      	ldr	r3, [pc, #8]	; (11c0c <z_arm_configure_static_mpu_regions+0xc>)
   11c02:	4a03      	ldr	r2, [pc, #12]	; (11c10 <z_arm_configure_static_mpu_regions+0x10>)
   11c04:	4803      	ldr	r0, [pc, #12]	; (11c14 <z_arm_configure_static_mpu_regions+0x14>)
   11c06:	2101      	movs	r1, #1
   11c08:	f000 b884 	b.w	11d14 <arm_core_mpu_configure_static_mpu_regions>
   11c0c:	20010000 	.word	0x20010000
   11c10:	20000000 	.word	0x20000000
   11c14:	00020c34 	.word	0x00020c34

00011c18 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   11c18:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   11c1a:	4b05      	ldr	r3, [pc, #20]	; (11c30 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   11c1c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   11c1e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   11c20:	4a04      	ldr	r2, [pc, #16]	; (11c34 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   11c22:	2120      	movs	r1, #32
   11c24:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   11c28:	4618      	mov	r0, r3
   11c2a:	2101      	movs	r1, #1
   11c2c:	f000 b87c 	b.w	11d28 <arm_core_mpu_configure_dynamic_mpu_regions>
   11c30:	20001e20 	.word	0x20001e20
   11c34:	150b0000 	.word	0x150b0000

00011c38 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   11c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   11c3a:	4f28      	ldr	r7, [pc, #160]	; (11cdc <mpu_configure_regions+0xa4>)
   11c3c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11c3e:	2100      	movs	r1, #0
   11c40:	42b1      	cmp	r1, r6
   11c42:	da14      	bge.n	11c6e <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   11c44:	6844      	ldr	r4, [r0, #4]
   11c46:	2c00      	cmp	r4, #0
   11c48:	d045      	beq.n	11cd6 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   11c4a:	b1c3      	cbz	r3, 11c7e <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   11c4c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   11c50:	ea14 0f0c 	tst.w	r4, ip
   11c54:	d00d      	beq.n	11c72 <mpu_configure_regions+0x3a>
   11c56:	4a22      	ldr	r2, [pc, #136]	; (11ce0 <mpu_configure_regions+0xa8>)
   11c58:	4b22      	ldr	r3, [pc, #136]	; (11ce4 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   11c5a:	4823      	ldr	r0, [pc, #140]	; (11ce8 <mpu_configure_regions+0xb0>)
   11c5c:	1ad2      	subs	r2, r2, r3
   11c5e:	08d2      	lsrs	r2, r2, #3
   11c60:	0192      	lsls	r2, r2, #6
   11c62:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11c66:	f00a fa98 	bl	1c19a <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11c6a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   11c6e:	4610      	mov	r0, r2
   11c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   11c72:	2c1f      	cmp	r4, #31
   11c74:	d9ef      	bls.n	11c56 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   11c76:	6805      	ldr	r5, [r0, #0]
		&&
   11c78:	ea1c 0f05 	tst.w	ip, r5
   11c7c:	d1eb      	bne.n	11c56 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   11c7e:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11c80:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   11c82:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   11c86:	6802      	ldr	r2, [r0, #0]
   11c88:	d916      	bls.n	11cb8 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   11c8a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   11c8e:	d815      	bhi.n	11cbc <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   11c90:	3c01      	subs	r4, #1
   11c92:	fab4 f484 	clz	r4, r4
   11c96:	f1c4 041f 	rsb	r4, r4, #31
   11c9a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   11c9c:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11c9e:	ea4c 0404 	orr.w	r4, ip, r4
   11ca2:	d90d      	bls.n	11cc0 <mpu_configure_regions+0x88>
   11ca4:	4a0e      	ldr	r2, [pc, #56]	; (11ce0 <mpu_configure_regions+0xa8>)
   11ca6:	4b0f      	ldr	r3, [pc, #60]	; (11ce4 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11ca8:	4810      	ldr	r0, [pc, #64]	; (11cec <mpu_configure_regions+0xb4>)
   11caa:	1ad2      	subs	r2, r2, r3
   11cac:	08d2      	lsrs	r2, r2, #3
   11cae:	0192      	lsls	r2, r2, #6
   11cb0:	f042 0201 	orr.w	r2, r2, #1
   11cb4:	4629      	mov	r1, r5
   11cb6:	e7d6      	b.n	11c66 <mpu_configure_regions+0x2e>
		return REGION_32B;
   11cb8:	2408      	movs	r4, #8
   11cba:	e7ef      	b.n	11c9c <mpu_configure_regions+0x64>
		return REGION_4G;
   11cbc:	243e      	movs	r4, #62	; 0x3e
   11cbe:	e7ed      	b.n	11c9c <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11cc0:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   11cc4:	432a      	orrs	r2, r5
   11cc6:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11cca:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   11cce:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11cd0:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11cd2:	613c      	str	r4, [r7, #16]
		reg_index++;
   11cd4:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   11cd6:	3101      	adds	r1, #1
   11cd8:	300c      	adds	r0, #12
   11cda:	e7b1      	b.n	11c40 <mpu_configure_regions+0x8>
   11cdc:	e000ed90 	.word	0xe000ed90
   11ce0:	000208f4 	.word	0x000208f4
   11ce4:	00020854 	.word	0x00020854
   11ce8:	0002186e 	.word	0x0002186e
   11cec:	00021891 	.word	0x00021891

00011cf0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11cf0:	4b03      	ldr	r3, [pc, #12]	; (11d00 <arm_core_mpu_enable+0x10>)
   11cf2:	2205      	movs	r2, #5
   11cf4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11cf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11cfa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11cfe:	4770      	bx	lr
   11d00:	e000ed90 	.word	0xe000ed90

00011d04 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11d04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11d08:	4b01      	ldr	r3, [pc, #4]	; (11d10 <arm_core_mpu_disable+0xc>)
   11d0a:	2200      	movs	r2, #0
   11d0c:	605a      	str	r2, [r3, #4]
}
   11d0e:	4770      	bx	lr
   11d10:	e000ed90 	.word	0xe000ed90

00011d14 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11d14:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11d16:	4c03      	ldr	r4, [pc, #12]	; (11d24 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11d18:	2301      	movs	r3, #1
   11d1a:	7822      	ldrb	r2, [r4, #0]
   11d1c:	f7ff ff8c 	bl	11c38 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11d20:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   11d22:	bd10      	pop	{r4, pc}
   11d24:	20002054 	.word	0x20002054

00011d28 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   11d28:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   11d2a:	4a08      	ldr	r2, [pc, #32]	; (11d4c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   11d2c:	2300      	movs	r3, #0
   11d2e:	7812      	ldrb	r2, [r2, #0]
   11d30:	f7ff ff82 	bl	11c38 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   11d34:	f110 0f16 	cmn.w	r0, #22
   11d38:	d003      	beq.n	11d42 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   11d3a:	4b05      	ldr	r3, [pc, #20]	; (11d50 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   11d3c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11d3e:	2807      	cmp	r0, #7
   11d40:	dd00      	ble.n	11d44 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   11d42:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   11d44:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   11d46:	611a      	str	r2, [r3, #16]
   11d48:	3001      	adds	r0, #1
   11d4a:	e7f8      	b.n	11d3e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   11d4c:	20002054 	.word	0x20002054
   11d50:	e000ed90 	.word	0xe000ed90

00011d54 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11d54:	4913      	ldr	r1, [pc, #76]	; (11da4 <z_arm_mpu_init+0x50>)
   11d56:	6808      	ldr	r0, [r1, #0]
   11d58:	2808      	cmp	r0, #8
{
   11d5a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   11d5c:	d81e      	bhi.n	11d9c <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   11d5e:	f7ff ffd1 	bl	11d04 <arm_core_mpu_disable>
	MPU->RNR = index;
   11d62:	4c11      	ldr	r4, [pc, #68]	; (11da8 <z_arm_mpu_init+0x54>)
   11d64:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11d66:	2200      	movs	r2, #0
   11d68:	4290      	cmp	r0, r2
   11d6a:	f101 010c 	add.w	r1, r1, #12
   11d6e:	d105      	bne.n	11d7c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11d70:	4b0e      	ldr	r3, [pc, #56]	; (11dac <z_arm_mpu_init+0x58>)
   11d72:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   11d74:	f7ff ffbc 	bl	11cf0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   11d78:	2000      	movs	r0, #0
}
   11d7a:	bd10      	pop	{r4, pc}
   11d7c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11d7e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   11d82:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   11d86:	4313      	orrs	r3, r2
   11d88:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11d8c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   11d92:	f043 0301 	orr.w	r3, r3, #1
   11d96:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11d98:	3201      	adds	r2, #1
   11d9a:	e7e5      	b.n	11d68 <z_arm_mpu_init+0x14>
		return -1;
   11d9c:	f04f 30ff 	mov.w	r0, #4294967295
   11da0:	e7eb      	b.n	11d7a <z_arm_mpu_init+0x26>
   11da2:	bf00      	nop
   11da4:	00020c40 	.word	0x00020c40
   11da8:	e000ed90 	.word	0xe000ed90
   11dac:	20002054 	.word	0x20002054

00011db0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   11db0:	f04f 0240 	mov.w	r2, #64	; 0x40
   11db4:	f3ef 8311 	mrs	r3, BASEPRI
   11db8:	f382 8811 	msr	BASEPRI, r2
   11dbc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11dc0:	4a04      	ldr	r2, [pc, #16]	; (11dd4 <nordicsemi_nrf52_init+0x24>)
   11dc2:	2101      	movs	r1, #1
   11dc4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   11dc8:	f383 8811 	msr	BASEPRI, r3
   11dcc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11dd0:	2000      	movs	r0, #0
   11dd2:	4770      	bx	lr
   11dd4:	4001e000 	.word	0x4001e000

00011dd8 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   11dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11ddc:	b2c0      	uxtb	r0, r0
   11dde:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   11de2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11de6:	4905      	ldr	r1, [pc, #20]	; (11dfc <sys_arch_reboot+0x24>)
   11de8:	4b05      	ldr	r3, [pc, #20]	; (11e00 <sys_arch_reboot+0x28>)
   11dea:	68ca      	ldr	r2, [r1, #12]
   11dec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11df0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11df2:	60cb      	str	r3, [r1, #12]
   11df4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11df8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11dfa:	e7fd      	b.n	11df8 <sys_arch_reboot+0x20>
   11dfc:	e000ed00 	.word	0xe000ed00
   11e00:	05fa0004 	.word	0x05fa0004

00011e04 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11e04:	b120      	cbz	r0, 11e10 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   11e06:	4b03      	ldr	r3, [pc, #12]	; (11e14 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   11e08:	0180      	lsls	r0, r0, #6
   11e0a:	f043 0301 	orr.w	r3, r3, #1
   11e0e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11e10:	4770      	bx	lr
   11e12:	bf00      	nop
   11e14:	00020a30 	.word	0x00020a30

00011e18 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11e18:	4b0e      	ldr	r3, [pc, #56]	; (11e54 <bt_hex_real+0x3c>)
   11e1a:	2940      	cmp	r1, #64	; 0x40
{
   11e1c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   11e1e:	bf28      	it	cs
   11e20:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   11e22:	4c0d      	ldr	r4, [pc, #52]	; (11e58 <bt_hex_real+0x40>)
   11e24:	1846      	adds	r6, r0, r1
   11e26:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   11e28:	42b0      	cmp	r0, r6
   11e2a:	f103 0302 	add.w	r3, r3, #2
   11e2e:	d104      	bne.n	11e3a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11e30:	2300      	movs	r3, #0
   11e32:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11e36:	4807      	ldr	r0, [pc, #28]	; (11e54 <bt_hex_real+0x3c>)
   11e38:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   11e3a:	7802      	ldrb	r2, [r0, #0]
   11e3c:	0912      	lsrs	r2, r2, #4
   11e3e:	5ca2      	ldrb	r2, [r4, r2]
   11e40:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11e44:	f810 2b01 	ldrb.w	r2, [r0], #1
   11e48:	f002 020f 	and.w	r2, r2, #15
   11e4c:	5ca2      	ldrb	r2, [r4, r2]
   11e4e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   11e52:	e7e9      	b.n	11e28 <bt_hex_real+0x10>
   11e54:	20002055 	.word	0x20002055
   11e58:	000218ca 	.word	0x000218ca

00011e5c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   11e5c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   11e5e:	7803      	ldrb	r3, [r0, #0]
   11e60:	b08b      	sub	sp, #44	; 0x2c
   11e62:	4604      	mov	r4, r0
   11e64:	ad07      	add	r5, sp, #28
   11e66:	2b03      	cmp	r3, #3
   11e68:	d821      	bhi.n	11eae <bt_addr_le_str_real+0x52>
   11e6a:	e8df f003 	tbb	[pc, r3]
   11e6e:	1a02      	.short	0x1a02
   11e70:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   11e72:	4912      	ldr	r1, [pc, #72]	; (11ebc <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   11e74:	4628      	mov	r0, r5
   11e76:	f00b fc56 	bl	1d726 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11e7a:	7863      	ldrb	r3, [r4, #1]
   11e7c:	9304      	str	r3, [sp, #16]
   11e7e:	78a3      	ldrb	r3, [r4, #2]
   11e80:	9303      	str	r3, [sp, #12]
   11e82:	78e3      	ldrb	r3, [r4, #3]
   11e84:	9302      	str	r3, [sp, #8]
   11e86:	7923      	ldrb	r3, [r4, #4]
   11e88:	9301      	str	r3, [sp, #4]
   11e8a:	7963      	ldrb	r3, [r4, #5]
   11e8c:	9300      	str	r3, [sp, #0]
   11e8e:	4a0c      	ldr	r2, [pc, #48]	; (11ec0 <bt_addr_le_str_real+0x64>)
   11e90:	79a3      	ldrb	r3, [r4, #6]
   11e92:	9505      	str	r5, [sp, #20]
   11e94:	211e      	movs	r1, #30
   11e96:	480b      	ldr	r0, [pc, #44]	; (11ec4 <bt_addr_le_str_real+0x68>)
   11e98:	f009 fd3a 	bl	1b910 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11e9c:	4809      	ldr	r0, [pc, #36]	; (11ec4 <bt_addr_le_str_real+0x68>)
   11e9e:	b00b      	add	sp, #44	; 0x2c
   11ea0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   11ea2:	4909      	ldr	r1, [pc, #36]	; (11ec8 <bt_addr_le_str_real+0x6c>)
   11ea4:	e7e6      	b.n	11e74 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   11ea6:	4909      	ldr	r1, [pc, #36]	; (11ecc <bt_addr_le_str_real+0x70>)
   11ea8:	e7e4      	b.n	11e74 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   11eaa:	4909      	ldr	r1, [pc, #36]	; (11ed0 <bt_addr_le_str_real+0x74>)
   11eac:	e7e2      	b.n	11e74 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11eae:	4a09      	ldr	r2, [pc, #36]	; (11ed4 <bt_addr_le_str_real+0x78>)
   11eb0:	210a      	movs	r1, #10
   11eb2:	4628      	mov	r0, r5
   11eb4:	f009 fd2c 	bl	1b910 <snprintk>
		break;
   11eb8:	e7df      	b.n	11e7a <bt_addr_le_str_real+0x1e>
   11eba:	bf00      	nop
   11ebc:	000211ef 	.word	0x000211ef
   11ec0:	00021211 	.word	0x00021211
   11ec4:	200020d6 	.word	0x200020d6
   11ec8:	000211f6 	.word	0x000211f6
   11ecc:	000211fd 	.word	0x000211fd
   11ed0:	00021207 	.word	0x00021207
   11ed4:	00022c74 	.word	0x00022c74

00011ed8 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   11ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11edc:	4b6a      	ldr	r3, [pc, #424]	; (12088 <ecc_thread+0x1b0>)
   11ede:	4d6b      	ldr	r5, [pc, #428]	; (1208c <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11ee0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 120ac <ecc_thread+0x1d4>
	return z_impl_k_sem_take(sem, timeout);
   11ee4:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 120b0 <ecc_thread+0x1d8>
   11ee8:	1aed      	subs	r5, r5, r3
   11eea:	08ed      	lsrs	r5, r5, #3
   11eec:	4647      	mov	r7, r8
   11eee:	f04f 32ff 	mov.w	r2, #4294967295
   11ef2:	f04f 33ff 	mov.w	r3, #4294967295
   11ef6:	4648      	mov	r0, r9
   11ef8:	f008 fc76 	bl	1a7e8 <z_impl_k_sem_take>
   11efc:	f3bf 8f5b 	dmb	ish
   11f00:	f8d8 4000 	ldr.w	r4, [r8]
   11f04:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   11f08:	f014 0401 	ands.w	r4, r4, #1
   11f0c:	d05a      	beq.n	11fc4 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   11f0e:	f8df a194 	ldr.w	sl, [pc, #404]	; 120a4 <ecc_thread+0x1cc>
   11f12:	4c5f      	ldr	r4, [pc, #380]	; (12090 <ecc_thread+0x1b8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   11f14:	4e5f      	ldr	r6, [pc, #380]	; (12094 <ecc_thread+0x1bc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   11f16:	4860      	ldr	r0, [pc, #384]	; (12098 <ecc_thread+0x1c0>)
   11f18:	4652      	mov	r2, sl
   11f1a:	4621      	mov	r1, r4
   11f1c:	f00a fb45 	bl	1c5aa <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   11f20:	bbe8      	cbnz	r0, 11f9e <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
   11f22:	01a9      	lsls	r1, r5, #6
   11f24:	485d      	ldr	r0, [pc, #372]	; (1209c <ecc_thread+0x1c4>)
   11f26:	f041 0101 	orr.w	r1, r1, #1
   11f2a:	f00a f929 	bl	1c180 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   11f2e:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11f32:	f04f 32ff 	mov.w	r2, #4294967295
   11f36:	f04f 33ff 	mov.w	r3, #4294967295
   11f3a:	2001      	movs	r0, #1
   11f3c:	f000 f9d6 	bl	122ec <bt_buf_get_rx>
   11f40:	f100 0608 	add.w	r6, r0, #8
   11f44:	2102      	movs	r1, #2
   11f46:	4604      	mov	r4, r0
   11f48:	4630      	mov	r0, r6
   11f4a:	f00d fd24 	bl	1f996 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   11f4e:	233e      	movs	r3, #62	; 0x3e
   11f50:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   11f52:	2342      	movs	r3, #66	; 0x42
   11f54:	7043      	strb	r3, [r0, #1]
   11f56:	2101      	movs	r1, #1
   11f58:	4630      	mov	r0, r6
   11f5a:	f00d fd1c 	bl	1f996 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   11f5e:	2308      	movs	r3, #8
   11f60:	7003      	strb	r3, [r0, #0]
   11f62:	2141      	movs	r1, #65	; 0x41
   11f64:	4630      	mov	r0, r6
   11f66:	f00d fd16 	bl	1f996 <net_buf_simple_add>
   11f6a:	4606      	mov	r6, r0
	evt->status = status;
   11f6c:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
   11f70:	f1ba 0f00 	cmp.w	sl, #0
   11f74:	d01d      	beq.n	11fb2 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
   11f76:	2240      	movs	r2, #64	; 0x40
   11f78:	2100      	movs	r1, #0
   11f7a:	f00b fc48 	bl	1d80e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11f7e:	f3bf 8f5b 	dmb	ish
   11f82:	e857 3f00 	ldrex	r3, [r7]
   11f86:	f023 0301 	bic.w	r3, r3, #1
   11f8a:	e847 3200 	strex	r2, r3, [r7]
   11f8e:	2a00      	cmp	r2, #0
   11f90:	d1f7      	bne.n	11f82 <ecc_thread+0xaa>
   11f92:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   11f96:	4620      	mov	r0, r4
	bt_recv(buf);
   11f98:	f001 fb5c 	bl	13654 <bt_recv>
	while (true) {
   11f9c:	e7a7      	b.n	11eee <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   11f9e:	2220      	movs	r2, #32
   11fa0:	4631      	mov	r1, r6
   11fa2:	4620      	mov	r0, r4
   11fa4:	f00b fbf8 	bl	1d798 <memcmp>
   11fa8:	2800      	cmp	r0, #0
   11faa:	d0b4      	beq.n	11f16 <ecc_thread+0x3e>
	return 0;
   11fac:	f04f 0a00 	mov.w	sl, #0
   11fb0:	e7bf      	b.n	11f32 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
   11fb2:	4939      	ldr	r1, [pc, #228]	; (12098 <ecc_thread+0x1c0>)
   11fb4:	f00b fcc2 	bl	1d93c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
   11fb8:	4939      	ldr	r1, [pc, #228]	; (120a0 <ecc_thread+0x1c8>)
   11fba:	f106 0021 	add.w	r0, r6, #33	; 0x21
   11fbe:	f00b fcbd 	bl	1d93c <sys_memcpy_swap.constprop.0>
   11fc2:	e7dc      	b.n	11f7e <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11fc4:	f3bf 8f5b 	dmb	ish
   11fc8:	f8d8 3000 	ldr.w	r3, [r8]
   11fcc:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   11fd0:	079b      	lsls	r3, r3, #30
   11fd2:	d58c      	bpl.n	11eee <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   11fd4:	4933      	ldr	r1, [pc, #204]	; (120a4 <ecc_thread+0x1cc>)
   11fd6:	4830      	ldr	r0, [pc, #192]	; (12098 <ecc_thread+0x1c0>)
   11fd8:	f00b f9b6 	bl	1d348 <uECC_valid_public_key>
	if (ret < 0) {
   11fdc:	1e01      	subs	r1, r0, #0
   11fde:	da38      	bge.n	12052 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
   11fe0:	01aa      	lsls	r2, r5, #6
   11fe2:	4831      	ldr	r0, [pc, #196]	; (120a8 <ecc_thread+0x1d0>)
   11fe4:	f042 0201 	orr.w	r2, r2, #1
   11fe8:	f00a f8d7 	bl	1c19a <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11fec:	f04f 32ff 	mov.w	r2, #4294967295
   11ff0:	f04f 33ff 	mov.w	r3, #4294967295
   11ff4:	2001      	movs	r0, #1
   11ff6:	f000 f979 	bl	122ec <bt_buf_get_rx>
   11ffa:	f100 0a08 	add.w	sl, r0, #8
   11ffe:	2102      	movs	r1, #2
   12000:	4606      	mov	r6, r0
   12002:	4650      	mov	r0, sl
   12004:	f00d fcc7 	bl	1f996 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   12008:	233e      	movs	r3, #62	; 0x3e
   1200a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1200c:	2322      	movs	r3, #34	; 0x22
   1200e:	7043      	strb	r3, [r0, #1]
   12010:	2101      	movs	r1, #1
   12012:	4650      	mov	r0, sl
   12014:	f00d fcbf 	bl	1f996 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   12018:	2309      	movs	r3, #9
   1201a:	7003      	strb	r3, [r0, #0]
   1201c:	2121      	movs	r1, #33	; 0x21
   1201e:	4650      	mov	r0, sl
   12020:	f00d fcb9 	bl	1f996 <net_buf_simple_add>
   12024:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   12026:	3001      	adds	r0, #1
   12028:	bb3c      	cbnz	r4, 1207a <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   1202a:	221f      	movs	r2, #31
   1202c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1202e:	21ff      	movs	r1, #255	; 0xff
   12030:	2220      	movs	r2, #32
   12032:	f00b fbec 	bl	1d80e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12036:	f3bf 8f5b 	dmb	ish
   1203a:	e857 3f00 	ldrex	r3, [r7]
   1203e:	f023 0302 	bic.w	r3, r3, #2
   12042:	e847 3200 	strex	r2, r3, [r7]
   12046:	2a00      	cmp	r2, #0
   12048:	d1f7      	bne.n	1203a <ecc_thread+0x162>
   1204a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1204e:	4630      	mov	r0, r6
   12050:	e7a2      	b.n	11f98 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
   12052:	490f      	ldr	r1, [pc, #60]	; (12090 <ecc_thread+0x1b8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12054:	f3bf 8f5b 	dmb	ish
   12058:	f8d8 3000 	ldr.w	r3, [r8]
   1205c:	480d      	ldr	r0, [pc, #52]	; (12094 <ecc_thread+0x1bc>)
   1205e:	f3bf 8f5b 	dmb	ish
   12062:	f013 0f04 	tst.w	r3, #4
   12066:	f101 0220 	add.w	r2, r1, #32
   1206a:	4b0e      	ldr	r3, [pc, #56]	; (120a4 <ecc_thread+0x1cc>)
   1206c:	bf18      	it	ne
   1206e:	4601      	movne	r1, r0
   12070:	4610      	mov	r0, r2
   12072:	f00a fae9 	bl	1c648 <uECC_shared_secret>
   12076:	4604      	mov	r4, r0
   12078:	e7b8      	b.n	11fec <ecc_thread+0x114>
		evt->status = 0U;
   1207a:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   1207c:	4906      	ldr	r1, [pc, #24]	; (12098 <ecc_thread+0x1c0>)
		evt->status = 0U;
   1207e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   12080:	f00b fc5c 	bl	1d93c <sys_memcpy_swap.constprop.0>
   12084:	e7d7      	b.n	12036 <ecc_thread+0x15e>
   12086:	bf00      	nop
   12088:	00020854 	.word	0x00020854
   1208c:	0002089c 	.word	0x0002089c
   12090:	200020f4 	.word	0x200020f4
   12094:	0002193e 	.word	0x0002193e
   12098:	20002114 	.word	0x20002114
   1209c:	000218e2 	.word	0x000218e2
   120a0:	20002134 	.word	0x20002134
   120a4:	00020c60 	.word	0x00020c60
   120a8:	0002190b 	.word	0x0002190b
   120ac:	20001e2c 	.word	0x20001e2c
   120b0:	20000730 	.word	0x20000730

000120b4 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   120b4:	b570      	push	{r4, r5, r6, lr}
   120b6:	4c21      	ldr	r4, [pc, #132]	; (1213c <le_gen_dhkey+0x88>)
   120b8:	f3bf 8f5b 	dmb	ish
   120bc:	6823      	ldr	r3, [r4, #0]
   120be:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   120c2:	07da      	lsls	r2, r3, #31
{
   120c4:	4606      	mov	r6, r0
   120c6:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   120c8:	d501      	bpl.n	120ce <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   120ca:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   120cc:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   120ce:	2901      	cmp	r1, #1
   120d0:	d831      	bhi.n	12136 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   120d2:	f3bf 8f5b 	dmb	ish
   120d6:	e854 3f00 	ldrex	r3, [r4]
   120da:	f043 0202 	orr.w	r2, r3, #2
   120de:	e844 2100 	strex	r1, r2, [r4]
   120e2:	2900      	cmp	r1, #0
   120e4:	d1f7      	bne.n	120d6 <le_gen_dhkey+0x22>
   120e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   120ea:	079b      	lsls	r3, r3, #30
   120ec:	d4ed      	bmi.n	120ca <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
   120ee:	4814      	ldr	r0, [pc, #80]	; (12140 <le_gen_dhkey+0x8c>)
   120f0:	4631      	mov	r1, r6
   120f2:	f00b fc23 	bl	1d93c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
   120f6:	4813      	ldr	r0, [pc, #76]	; (12144 <le_gen_dhkey+0x90>)
   120f8:	f106 0120 	add.w	r1, r6, #32
   120fc:	f00b fc1e 	bl	1d93c <sys_memcpy_swap.constprop.0>
   12100:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   12104:	b175      	cbz	r5, 12124 <le_gen_dhkey+0x70>
   12106:	e854 3f00 	ldrex	r3, [r4]
   1210a:	f043 0304 	orr.w	r3, r3, #4
   1210e:	e844 3200 	strex	r2, r3, [r4]
   12112:	2a00      	cmp	r2, #0
   12114:	d1f7      	bne.n	12106 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12116:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   1211a:	480b      	ldr	r0, [pc, #44]	; (12148 <le_gen_dhkey+0x94>)
   1211c:	f008 fb3e 	bl	1a79c <z_impl_k_sem_give>
   12120:	2000      	movs	r0, #0
   12122:	e7d3      	b.n	120cc <le_gen_dhkey+0x18>
   12124:	e854 3f00 	ldrex	r3, [r4]
   12128:	f023 0304 	bic.w	r3, r3, #4
   1212c:	e844 3200 	strex	r2, r3, [r4]
   12130:	2a00      	cmp	r2, #0
   12132:	d0f0      	beq.n	12116 <le_gen_dhkey+0x62>
   12134:	e7f6      	b.n	12124 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   12136:	2012      	movs	r0, #18
   12138:	e7c8      	b.n	120cc <le_gen_dhkey+0x18>
   1213a:	bf00      	nop
   1213c:	20001e2c 	.word	0x20001e2c
   12140:	20002114 	.word	0x20002114
   12144:	20002134 	.word	0x20002134
   12148:	20000730 	.word	0x20000730

0001214c <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   1214c:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1214e:	7d06      	ldrb	r6, [r0, #20]
   12150:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   12152:	b976      	cbnz	r6, 12172 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   12154:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   12156:	881d      	ldrh	r5, [r3, #0]
   12158:	f242 0226 	movw	r2, #8230	; 0x2026
   1215c:	4295      	cmp	r5, r2
   1215e:	d045      	beq.n	121ec <bt_hci_ecc_send+0xa0>
   12160:	d80f      	bhi.n	12182 <bt_hci_ecc_send+0x36>
   12162:	f242 0201 	movw	r2, #8193	; 0x2001
   12166:	4295      	cmp	r5, r2
   12168:	d04f      	beq.n	1220a <bt_hci_ecc_send+0xbe>
   1216a:	f242 0325 	movw	r3, #8229	; 0x2025
   1216e:	429d      	cmp	r5, r3
   12170:	d013      	beq.n	1219a <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   12172:	4b2a      	ldr	r3, [pc, #168]	; (1221c <bt_hci_ecc_send+0xd0>)
   12174:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   12178:	4620      	mov	r0, r4
   1217a:	691b      	ldr	r3, [r3, #16]
}
   1217c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   12180:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   12182:	f242 035e 	movw	r3, #8286	; 0x205e
   12186:	429d      	cmp	r5, r3
   12188:	d1f3      	bne.n	12172 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   1218a:	2103      	movs	r1, #3
   1218c:	3008      	adds	r0, #8
   1218e:	f00d fc21 	bl	1f9d4 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   12192:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   12194:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   12198:	e02e      	b.n	121f8 <bt_hci_ecc_send+0xac>
   1219a:	2103      	movs	r1, #3
   1219c:	3008      	adds	r0, #8
   1219e:	f00d fc19 	bl	1f9d4 <net_buf_simple_pull>
	net_buf_unref(buf);
   121a2:	4620      	mov	r0, r4
   121a4:	f006 fe3e 	bl	18e24 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   121a8:	f3bf 8f5b 	dmb	ish
   121ac:	4b1c      	ldr	r3, [pc, #112]	; (12220 <bt_hci_ecc_send+0xd4>)
   121ae:	681a      	ldr	r2, [r3, #0]
   121b0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   121b4:	0792      	lsls	r2, r2, #30
   121b6:	d507      	bpl.n	121c8 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   121b8:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   121ba:	4631      	mov	r1, r6
   121bc:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   121c0:	f00b fb98 	bl	1d8f4 <send_cmd_status>
}
   121c4:	2000      	movs	r0, #0
   121c6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   121c8:	f3bf 8f5b 	dmb	ish
   121cc:	e853 2f00 	ldrex	r2, [r3]
   121d0:	f042 0101 	orr.w	r1, r2, #1
   121d4:	e843 1000 	strex	r0, r1, [r3]
   121d8:	2800      	cmp	r0, #0
   121da:	d1f7      	bne.n	121cc <bt_hci_ecc_send+0x80>
   121dc:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   121e0:	07d3      	lsls	r3, r2, #31
   121e2:	d4e9      	bmi.n	121b8 <bt_hci_ecc_send+0x6c>
   121e4:	480f      	ldr	r0, [pc, #60]	; (12224 <bt_hci_ecc_send+0xd8>)
   121e6:	f008 fad9 	bl	1a79c <z_impl_k_sem_give>
}
   121ea:	e7e6      	b.n	121ba <bt_hci_ecc_send+0x6e>
   121ec:	2103      	movs	r1, #3
   121ee:	3008      	adds	r0, #8
   121f0:	f00d fbf0 	bl	1f9d4 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   121f4:	68a0      	ldr	r0, [r4, #8]
   121f6:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   121f8:	f7ff ff5c 	bl	120b4 <le_gen_dhkey>
   121fc:	4606      	mov	r6, r0
	net_buf_unref(buf);
   121fe:	4620      	mov	r0, r4
   12200:	f006 fe10 	bl	18e24 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   12204:	4631      	mov	r1, r6
   12206:	4628      	mov	r0, r5
   12208:	e7da      	b.n	121c0 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   1220a:	78da      	ldrb	r2, [r3, #3]
   1220c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   12210:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   12212:	791a      	ldrb	r2, [r3, #4]
   12214:	f022 0201 	bic.w	r2, r2, #1
   12218:	711a      	strb	r2, [r3, #4]
}
   1221a:	e7aa      	b.n	12172 <bt_hci_ecc_send+0x26>
   1221c:	200002a0 	.word	0x200002a0
   12220:	20001e2c 	.word	0x20001e2c
   12224:	20000730 	.word	0x20000730

00012228 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   12228:	b510      	push	{r4, lr}
   1222a:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1222c:	4c0c      	ldr	r4, [pc, #48]	; (12260 <bt_hci_ecc_init+0x38>)
   1222e:	490d      	ldr	r1, [pc, #52]	; (12264 <bt_hci_ecc_init+0x3c>)
   12230:	2200      	movs	r2, #0
   12232:	2300      	movs	r3, #0
   12234:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12238:	2300      	movs	r3, #0
   1223a:	220a      	movs	r2, #10
   1223c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   12240:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12244:	9300      	str	r3, [sp, #0]
   12246:	f44f 628f 	mov.w	r2, #1144	; 0x478
   1224a:	4b07      	ldr	r3, [pc, #28]	; (12268 <bt_hci_ecc_init+0x40>)
   1224c:	4620      	mov	r0, r4
   1224e:	f008 f913 	bl	1a478 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12252:	4906      	ldr	r1, [pc, #24]	; (1226c <bt_hci_ecc_init+0x44>)
   12254:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   12256:	b008      	add	sp, #32
   12258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1225c:	f00d bd0b 	b.w	1fc76 <z_impl_k_thread_name_set>
   12260:	20001498 	.word	0x20001498
   12264:	20002c40 	.word	0x20002c40
   12268:	00011ed9 	.word	0x00011ed9
   1226c:	0002192c 	.word	0x0002192c

00012270 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   12270:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   12272:	7802      	ldrb	r2, [r0, #0]
   12274:	2a01      	cmp	r2, #1
{
   12276:	4604      	mov	r4, r0
   12278:	460b      	mov	r3, r1
	switch (src->type) {
   1227a:	d016      	beq.n	122aa <uuid_to_uuid128+0x3a>
   1227c:	2a02      	cmp	r2, #2
   1227e:	d02c      	beq.n	122da <uuid_to_uuid128+0x6a>
   12280:	b98a      	cbnz	r2, 122a6 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   12282:	4a19      	ldr	r2, [pc, #100]	; (122e8 <uuid_to_uuid128+0x78>)
   12284:	460d      	mov	r5, r1
   12286:	f102 0710 	add.w	r7, r2, #16
   1228a:	6810      	ldr	r0, [r2, #0]
   1228c:	6851      	ldr	r1, [r2, #4]
   1228e:	462e      	mov	r6, r5
   12290:	c603      	stmia	r6!, {r0, r1}
   12292:	3208      	adds	r2, #8
   12294:	42ba      	cmp	r2, r7
   12296:	4635      	mov	r5, r6
   12298:	d1f7      	bne.n	1228a <uuid_to_uuid128+0x1a>
   1229a:	7812      	ldrb	r2, [r2, #0]
   1229c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1229e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   122a0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   122a2:	0a12      	lsrs	r2, r2, #8
   122a4:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   122a6:	bcf0      	pop	{r4, r5, r6, r7}
   122a8:	4770      	bx	lr
		*dst = uuid128_base;
   122aa:	4a0f      	ldr	r2, [pc, #60]	; (122e8 <uuid_to_uuid128+0x78>)
   122ac:	460d      	mov	r5, r1
   122ae:	f102 0710 	add.w	r7, r2, #16
   122b2:	6810      	ldr	r0, [r2, #0]
   122b4:	6851      	ldr	r1, [r2, #4]
   122b6:	462e      	mov	r6, r5
   122b8:	c603      	stmia	r6!, {r0, r1}
   122ba:	3208      	adds	r2, #8
   122bc:	42ba      	cmp	r2, r7
   122be:	4635      	mov	r5, r6
   122c0:	d1f7      	bne.n	122b2 <uuid_to_uuid128+0x42>
   122c2:	7812      	ldrb	r2, [r2, #0]
   122c4:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   122c6:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   122c8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   122ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   122ce:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   122d0:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   122d2:	0a12      	lsrs	r2, r2, #8
   122d4:	7399      	strb	r1, [r3, #14]
   122d6:	741a      	strb	r2, [r3, #16]
}
   122d8:	e7e5      	b.n	122a6 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   122da:	4601      	mov	r1, r0
}
   122dc:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   122de:	2211      	movs	r2, #17
   122e0:	4618      	mov	r0, r3
   122e2:	f00b ba69 	b.w	1d7b8 <memcpy>
   122e6:	bf00      	nop
   122e8:	0002195e 	.word	0x0002195e

000122ec <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   122ec:	b538      	push	{r3, r4, r5, lr}
   122ee:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   122f0:	4805      	ldr	r0, [pc, #20]	; (12308 <bt_buf_get_rx+0x1c>)
   122f2:	f00d fafa 	bl	1f8ea <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   122f6:	4604      	mov	r4, r0
   122f8:	b120      	cbz	r0, 12304 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   122fa:	2100      	movs	r1, #0
   122fc:	3008      	adds	r0, #8
   122fe:	f00d fb13 	bl	1f928 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12302:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   12304:	4620      	mov	r0, r4
   12306:	bd38      	pop	{r3, r4, r5, pc}
   12308:	20000860 	.word	0x20000860

0001230c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1230c:	b570      	push	{r4, r5, r6, lr}
   1230e:	4602      	mov	r2, r0
   12310:	460b      	mov	r3, r1
	__asm__ volatile(
   12312:	f04f 0140 	mov.w	r1, #64	; 0x40
   12316:	f3ef 8511 	mrs	r5, BASEPRI
   1231a:	f381 8811 	msr	BASEPRI, r1
   1231e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   12322:	480c      	ldr	r0, [pc, #48]	; (12354 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   12324:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   12326:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   1232a:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
   1232e:	f385 8811 	msr	BASEPRI, r5
   12332:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   12336:	b924      	cbnz	r4, 12342 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   12338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1233c:	2001      	movs	r0, #1
   1233e:	f7ff bfd5 	b.w	122ec <bt_buf_get_rx>
   12342:	2301      	movs	r3, #1
   12344:	f104 0008 	add.w	r0, r4, #8
   12348:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   1234a:	81a1      	strh	r1, [r4, #12]
   1234c:	f00d faec 	bl	1f928 <net_buf_simple_reserve>
}
   12350:	4620      	mov	r0, r4
   12352:	bd70      	pop	{r4, r5, r6, pc}
   12354:	200002a0 	.word	0x200002a0

00012358 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   12358:	b570      	push	{r4, r5, r6, lr}
   1235a:	4604      	mov	r4, r0
	switch (evt) {
   1235c:	2c0f      	cmp	r4, #15
{
   1235e:	460d      	mov	r5, r1
   12360:	4610      	mov	r0, r2
   12362:	4619      	mov	r1, r3
	switch (evt) {
   12364:	d805      	bhi.n	12372 <bt_buf_get_evt+0x1a>
   12366:	2c0d      	cmp	r4, #13
   12368:	d912      	bls.n	12390 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1236a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1236e:	f7ff bfcd 	b.w	1230c <bt_buf_get_cmd_complete>
	switch (evt) {
   12372:	2c13      	cmp	r4, #19
   12374:	d10c      	bne.n	12390 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   12376:	480b      	ldr	r0, [pc, #44]	; (123a4 <bt_buf_get_evt+0x4c>)
   12378:	f00d fab7 	bl	1f8ea <net_buf_alloc_fixed>
			if (buf) {
   1237c:	4604      	mov	r4, r0
   1237e:	b128      	cbz	r0, 1238c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   12380:	2100      	movs	r1, #0
   12382:	3008      	adds	r0, #8
   12384:	f00d fad0 	bl	1f928 <net_buf_simple_reserve>
   12388:	2301      	movs	r3, #1
   1238a:	7523      	strb	r3, [r4, #20]
}
   1238c:	4620      	mov	r0, r4
   1238e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   12390:	4602      	mov	r2, r0
   12392:	460b      	mov	r3, r1
		if (discardable) {
   12394:	b10d      	cbz	r5, 1239a <bt_buf_get_evt+0x42>
   12396:	4804      	ldr	r0, [pc, #16]	; (123a8 <bt_buf_get_evt+0x50>)
   12398:	e7ee      	b.n	12378 <bt_buf_get_evt+0x20>
}
   1239a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1239e:	2001      	movs	r0, #1
   123a0:	f7ff bfa4 	b.w	122ec <bt_buf_get_rx>
   123a4:	20000888 	.word	0x20000888
   123a8:	200007e8 	.word	0x200007e8

000123ac <ver_str>:
{
   123ac:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   123ae:	4d0b      	ldr	r5, [pc, #44]	; (123dc <ver_str+0x30>)
{
   123b0:	4606      	mov	r6, r0
	const char * const str[] = {
   123b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   123b4:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
   123b6:	466c      	mov	r4, sp
   123b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   123ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   123bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   123be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   123c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   123c6:	2e0b      	cmp	r6, #11
		return str[ver];
   123c8:	bf9b      	ittet	ls
   123ca:	ab0c      	addls	r3, sp, #48	; 0x30
   123cc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   123d0:	4803      	ldrhi	r0, [pc, #12]	; (123e0 <ver_str+0x34>)
		return str[ver];
   123d2:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
   123d6:	b00c      	add	sp, #48	; 0x30
   123d8:	bd70      	pop	{r4, r5, r6, pc}
   123da:	bf00      	nop
   123dc:	000209a0 	.word	0x000209a0
   123e0:	00021a61 	.word	0x00021a61

000123e4 <hci_data_buf_overflow>:
   123e4:	4905      	ldr	r1, [pc, #20]	; (123fc <hci_data_buf_overflow+0x18>)
   123e6:	4a06      	ldr	r2, [pc, #24]	; (12400 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   123e8:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   123ea:	4806      	ldr	r0, [pc, #24]	; (12404 <hci_data_buf_overflow+0x20>)
   123ec:	1a52      	subs	r2, r2, r1
   123ee:	08d2      	lsrs	r2, r2, #3
   123f0:	0192      	lsls	r2, r2, #6
   123f2:	7819      	ldrb	r1, [r3, #0]
   123f4:	f042 0202 	orr.w	r2, r2, #2
   123f8:	f009 becf 	b.w	1c19a <log_1>
   123fc:	00020854 	.word	0x00020854
   12400:	00020894 	.word	0x00020894
   12404:	00021a69 	.word	0x00021a69

00012408 <hci_disconn_complete_prio>:
{
   12408:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1240a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1240c:	781a      	ldrb	r2, [r3, #0]
   1240e:	b972      	cbnz	r2, 1242e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12410:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   12414:	4620      	mov	r0, r4
   12416:	f002 fcd7 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   1241a:	4605      	mov	r5, r0
   1241c:	b940      	cbnz	r0, 12430 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1241e:	4b08      	ldr	r3, [pc, #32]	; (12440 <hci_disconn_complete_prio+0x38>)
   12420:	881a      	ldrh	r2, [r3, #0]
   12422:	b922      	cbnz	r2, 1242e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   12424:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   12428:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1242c:	8018      	strh	r0, [r3, #0]
}
   1242e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12430:	2101      	movs	r1, #1
   12432:	f002 fcd5 	bl	14de0 <bt_conn_set_state>
	bt_conn_unref(conn);
   12436:	4628      	mov	r0, r5
}
   12438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1243c:	f00b be70 	b.w	1e120 <bt_conn_unref>
   12440:	20002034 	.word	0x20002034

00012444 <hci_disconn_complete>:
{
   12444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12446:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   12448:	7835      	ldrb	r5, [r6, #0]
   1244a:	b9f5      	cbnz	r5, 1248a <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1244c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   12450:	4638      	mov	r0, r7
   12452:	f002 fcb9 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   12456:	4604      	mov	r4, r0
   12458:	b960      	cbnz	r0, 12474 <hci_disconn_complete+0x30>
   1245a:	4b0c      	ldr	r3, [pc, #48]	; (1248c <hci_disconn_complete+0x48>)
   1245c:	4a0c      	ldr	r2, [pc, #48]	; (12490 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   1245e:	480d      	ldr	r0, [pc, #52]	; (12494 <hci_disconn_complete+0x50>)
   12460:	1ad2      	subs	r2, r2, r3
   12462:	08d2      	lsrs	r2, r2, #3
   12464:	0192      	lsls	r2, r2, #6
   12466:	4639      	mov	r1, r7
   12468:	f042 0201 	orr.w	r2, r2, #1
}
   1246c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   12470:	f009 be93 	b.w	1c19a <log_1>
	conn->err = evt->reason;
   12474:	78f3      	ldrb	r3, [r6, #3]
   12476:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12478:	4629      	mov	r1, r5
   1247a:	f002 fcb1 	bl	14de0 <bt_conn_set_state>
	conn->handle = 0U;
   1247e:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   12480:	4620      	mov	r0, r4
}
   12482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   12486:	f00b be4b 	b.w	1e120 <bt_conn_unref>
}
   1248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1248c:	00020854 	.word	0x00020854
   12490:	00020894 	.word	0x00020894
   12494:	00021a91 	.word	0x00021a91

00012498 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12498:	6883      	ldr	r3, [r0, #8]
{
   1249a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1249c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1249e:	4620      	mov	r0, r4
   124a0:	f002 fc92 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   124a4:	b960      	cbnz	r0, 124c0 <le_data_len_change+0x28>
   124a6:	4a08      	ldr	r2, [pc, #32]	; (124c8 <le_data_len_change+0x30>)
   124a8:	4b08      	ldr	r3, [pc, #32]	; (124cc <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   124aa:	4809      	ldr	r0, [pc, #36]	; (124d0 <le_data_len_change+0x38>)
   124ac:	1ad2      	subs	r2, r2, r3
   124ae:	08d2      	lsrs	r2, r2, #3
   124b0:	0192      	lsls	r2, r2, #6
   124b2:	4621      	mov	r1, r4
   124b4:	f042 0201 	orr.w	r2, r2, #1
}
   124b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   124bc:	f009 be6d 	b.w	1c19a <log_1>
}
   124c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   124c4:	f00b be2c 	b.w	1e120 <bt_conn_unref>
   124c8:	00020894 	.word	0x00020894
   124cc:	00020854 	.word	0x00020854
   124d0:	00021ab7 	.word	0x00021ab7

000124d4 <hci_hardware_error>:
{
   124d4:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   124d6:	2101      	movs	r1, #1
   124d8:	3008      	adds	r0, #8
   124da:	f00d fa83 	bl	1f9e4 <net_buf_simple_pull_mem>
   124de:	4b06      	ldr	r3, [pc, #24]	; (124f8 <hci_hardware_error+0x24>)
   124e0:	4a06      	ldr	r2, [pc, #24]	; (124fc <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   124e2:	7801      	ldrb	r1, [r0, #0]
   124e4:	4806      	ldr	r0, [pc, #24]	; (12500 <hci_hardware_error+0x2c>)
   124e6:	1ad2      	subs	r2, r2, r3
   124e8:	08d2      	lsrs	r2, r2, #3
   124ea:	0192      	lsls	r2, r2, #6
}
   124ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   124f0:	f042 0201 	orr.w	r2, r2, #1
   124f4:	f009 be51 	b.w	1c19a <log_1>
   124f8:	00020854 	.word	0x00020854
   124fc:	00020894 	.word	0x00020894
   12500:	00021adb 	.word	0x00021adb

00012504 <hci_vendor_event>:
{
   12504:	b510      	push	{r4, lr}
   12506:	4a0a      	ldr	r2, [pc, #40]	; (12530 <hci_vendor_event+0x2c>)
   12508:	4c0a      	ldr	r4, [pc, #40]	; (12534 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   1250a:	8981      	ldrh	r1, [r0, #12]
   1250c:	6880      	ldr	r0, [r0, #8]
   1250e:	1aa4      	subs	r4, r4, r2
   12510:	f7ff fc82 	bl	11e18 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   12514:	f7fe f822 	bl	1055c <z_log_strdup>
   12518:	08e4      	lsrs	r4, r4, #3
   1251a:	01a4      	lsls	r4, r4, #6
   1251c:	f044 0402 	orr.w	r4, r4, #2
   12520:	4601      	mov	r1, r0
   12522:	4622      	mov	r2, r4
   12524:	4804      	ldr	r0, [pc, #16]	; (12538 <hci_vendor_event+0x34>)
}
   12526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   1252a:	f009 be36 	b.w	1c19a <log_1>
   1252e:	bf00      	nop
   12530:	00020854 	.word	0x00020854
   12534:	00020894 	.word	0x00020894
   12538:	00021afd 	.word	0x00021afd

0001253c <hci_encrypt_key_refresh_complete>:
{
   1253c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1253e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   12540:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   12544:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12546:	4630      	mov	r0, r6
   12548:	f002 fc3e 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   1254c:	4604      	mov	r4, r0
   1254e:	b960      	cbnz	r0, 1256a <hci_encrypt_key_refresh_complete+0x2e>
   12550:	4a1e      	ldr	r2, [pc, #120]	; (125cc <hci_encrypt_key_refresh_complete+0x90>)
   12552:	4b1f      	ldr	r3, [pc, #124]	; (125d0 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   12554:	481f      	ldr	r0, [pc, #124]	; (125d4 <hci_encrypt_key_refresh_complete+0x98>)
   12556:	1ad2      	subs	r2, r2, r3
   12558:	08d2      	lsrs	r2, r2, #3
   1255a:	0192      	lsls	r2, r2, #6
   1255c:	4631      	mov	r1, r6
   1255e:	f042 0201 	orr.w	r2, r2, #1
}
   12562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   12566:	f009 be18 	b.w	1c19a <log_1>
	if (status) {
   1256a:	b165      	cbz	r5, 12586 <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
   1256c:	2d29      	cmp	r5, #41	; 0x29
   1256e:	bf96      	itet	ls
   12570:	4b19      	ldrls	r3, [pc, #100]	; (125d8 <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
   12572:	2208      	movhi	r2, #8
   12574:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   12576:	4629      	mov	r1, r5
   12578:	f002 fab2 	bl	14ae0 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1257c:	4620      	mov	r0, r4
}
   1257e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   12582:	f00b bdcd 	b.w	1e120 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   12586:	7883      	ldrb	r3, [r0, #2]
   12588:	2b01      	cmp	r3, #1
   1258a:	d107      	bne.n	1259c <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
   1258c:	f006 fa56 	bl	18a3c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12590:	4620      	mov	r0, r4
   12592:	f00b fa63 	bl	1da5c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   12596:	2800      	cmp	r0, #0
   12598:	bf08      	it	eq
   1259a:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1259c:	4b0e      	ldr	r3, [pc, #56]	; (125d8 <hci_encrypt_key_refresh_complete+0x9c>)
   1259e:	4629      	mov	r1, r5
   125a0:	5d5a      	ldrb	r2, [r3, r5]
   125a2:	4620      	mov	r0, r4
   125a4:	f002 fa9c 	bl	14ae0 <bt_conn_security_changed>
	if (status) {
   125a8:	2d00      	cmp	r5, #0
   125aa:	d0e7      	beq.n	1257c <hci_encrypt_key_refresh_complete+0x40>
   125ac:	4b08      	ldr	r3, [pc, #32]	; (125d0 <hci_encrypt_key_refresh_complete+0x94>)
   125ae:	4907      	ldr	r1, [pc, #28]	; (125cc <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
   125b0:	480a      	ldr	r0, [pc, #40]	; (125dc <hci_encrypt_key_refresh_complete+0xa0>)
   125b2:	1ac9      	subs	r1, r1, r3
   125b4:	08c9      	lsrs	r1, r1, #3
   125b6:	0189      	lsls	r1, r1, #6
   125b8:	f041 0101 	orr.w	r1, r1, #1
   125bc:	f009 fde0 	bl	1c180 <log_0>
		bt_conn_disconnect(conn, status);
   125c0:	4629      	mov	r1, r5
   125c2:	4620      	mov	r0, r4
   125c4:	f00b fde7 	bl	1e196 <bt_conn_disconnect>
   125c8:	e7d8      	b.n	1257c <hci_encrypt_key_refresh_complete+0x40>
   125ca:	bf00      	nop
   125cc:	00020894 	.word	0x00020894
   125d0:	00020854 	.word	0x00020854
   125d4:	00021a91 	.word	0x00021a91
   125d8:	00022089 	.word	0x00022089
   125dc:	00021b21 	.word	0x00021b21

000125e0 <hci_encrypt_change>:
{
   125e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   125e2:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   125e4:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   125e8:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   125ea:	4638      	mov	r0, r7
   125ec:	f002 fbec 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   125f0:	4604      	mov	r4, r0
   125f2:	b960      	cbnz	r0, 1260e <hci_encrypt_change+0x2e>
   125f4:	4b1f      	ldr	r3, [pc, #124]	; (12674 <hci_encrypt_change+0x94>)
   125f6:	4a20      	ldr	r2, [pc, #128]	; (12678 <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   125f8:	4820      	ldr	r0, [pc, #128]	; (1267c <hci_encrypt_change+0x9c>)
   125fa:	1ad2      	subs	r2, r2, r3
   125fc:	08d2      	lsrs	r2, r2, #3
   125fe:	0192      	lsls	r2, r2, #6
   12600:	4639      	mov	r1, r7
   12602:	f042 0201 	orr.w	r2, r2, #1
}
   12606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1260a:	f009 bdc6 	b.w	1c19a <log_1>
	if (status) {
   1260e:	b165      	cbz	r5, 1262a <hci_encrypt_change+0x4a>
	switch (hci_err) {
   12610:	2d29      	cmp	r5, #41	; 0x29
   12612:	bf96      	itet	ls
   12614:	4b1a      	ldrls	r3, [pc, #104]	; (12680 <hci_encrypt_change+0xa0>)
	if (status) {
   12616:	2208      	movhi	r2, #8
   12618:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   1261a:	4629      	mov	r1, r5
   1261c:	f002 fa60 	bl	14ae0 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12620:	4620      	mov	r0, r4
}
   12622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   12626:	f00b bd7b 	b.w	1e120 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1262a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1262c:	78f3      	ldrb	r3, [r6, #3]
   1262e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   12630:	2a01      	cmp	r2, #1
   12632:	d108      	bne.n	12646 <hci_encrypt_change+0x66>
		if (conn->encrypt) {
   12634:	b10b      	cbz	r3, 1263a <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   12636:	f006 fa01 	bl	18a3c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1263a:	4620      	mov	r0, r4
   1263c:	f00b fa0e 	bl	1da5c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   12640:	2800      	cmp	r0, #0
   12642:	bf08      	it	eq
   12644:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12646:	4b0e      	ldr	r3, [pc, #56]	; (12680 <hci_encrypt_change+0xa0>)
   12648:	4629      	mov	r1, r5
   1264a:	5d5a      	ldrb	r2, [r3, r5]
   1264c:	4620      	mov	r0, r4
   1264e:	f002 fa47 	bl	14ae0 <bt_conn_security_changed>
	if (status) {
   12652:	2d00      	cmp	r5, #0
   12654:	d0e4      	beq.n	12620 <hci_encrypt_change+0x40>
   12656:	4b07      	ldr	r3, [pc, #28]	; (12674 <hci_encrypt_change+0x94>)
   12658:	4907      	ldr	r1, [pc, #28]	; (12678 <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
   1265a:	480a      	ldr	r0, [pc, #40]	; (12684 <hci_encrypt_change+0xa4>)
   1265c:	1ac9      	subs	r1, r1, r3
   1265e:	08c9      	lsrs	r1, r1, #3
   12660:	0189      	lsls	r1, r1, #6
   12662:	f041 0101 	orr.w	r1, r1, #1
   12666:	f009 fd8b 	bl	1c180 <log_0>
		bt_conn_disconnect(conn, status);
   1266a:	4629      	mov	r1, r5
   1266c:	4620      	mov	r0, r4
   1266e:	f00b fd92 	bl	1e196 <bt_conn_disconnect>
   12672:	e7d5      	b.n	12620 <hci_encrypt_change+0x40>
   12674:	00020854 	.word	0x00020854
   12678:	00020894 	.word	0x00020894
   1267c:	00021a91 	.word	0x00021a91
   12680:	00022089 	.word	0x00022089
   12684:	00021b21 	.word	0x00021b21

00012688 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12688:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1268a:	4c0c      	ldr	r4, [pc, #48]	; (126bc <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1268c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1268e:	2205      	movs	r2, #5
   12690:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   12694:	f002 fccc 	bl	15030 <bt_conn_lookup_state_le>
		if (!conn) {
   12698:	b970      	cbnz	r0, 126b8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   1269a:	4b09      	ldr	r3, [pc, #36]	; (126c0 <find_pending_connect.part.0+0x38>)
   1269c:	6818      	ldr	r0, [r3, #0]
   1269e:	889a      	ldrh	r2, [r3, #4]
   126a0:	9000      	str	r0, [sp, #0]
   126a2:	799b      	ldrb	r3, [r3, #6]
   126a4:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   126a8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
   126ac:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   126b0:	2204      	movs	r2, #4
   126b2:	4669      	mov	r1, sp
   126b4:	f002 fcbc 	bl	15030 <bt_conn_lookup_state_le>
}
   126b8:	b002      	add	sp, #8
   126ba:	bd10      	pop	{r4, pc}
   126bc:	200002a0 	.word	0x200002a0
   126c0:	000209d0 	.word	0x000209d0

000126c4 <hci_cmd_done>:
{
   126c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   126c8:	4607      	mov	r7, r0
   126ca:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   126cc:	7990      	ldrb	r0, [r2, #6]
   126ce:	4e43      	ldr	r6, [pc, #268]	; (127dc <hci_cmd_done+0x118>)
{
   126d0:	4688      	mov	r8, r1
   126d2:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   126d4:	f006 faea 	bl	18cac <net_buf_pool_get>
   126d8:	4286      	cmp	r6, r0
   126da:	d016      	beq.n	1270a <hci_cmd_done+0x46>
   126dc:	4b40      	ldr	r3, [pc, #256]	; (127e0 <hci_cmd_done+0x11c>)
   126de:	4d41      	ldr	r5, [pc, #260]	; (127e4 <hci_cmd_done+0x120>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   126e0:	79a0      	ldrb	r0, [r4, #6]
   126e2:	9700      	str	r7, [sp, #0]
   126e4:	1aed      	subs	r5, r5, r3
   126e6:	08ed      	lsrs	r5, r5, #3
   126e8:	9001      	str	r0, [sp, #4]
   126ea:	f006 fadf 	bl	18cac <net_buf_pool_get>
   126ee:	01ad      	lsls	r5, r5, #6
   126f0:	f045 0502 	orr.w	r5, r5, #2
   126f4:	e9cd 0602 	strd	r0, r6, [sp, #8]
   126f8:	462b      	mov	r3, r5
   126fa:	483b      	ldr	r0, [pc, #236]	; (127e8 <hci_cmd_done+0x124>)
   126fc:	2204      	movs	r2, #4
   126fe:	4669      	mov	r1, sp
   12700:	f009 fd94 	bl	1c22c <log_n>
}
   12704:	b005      	add	sp, #20
   12706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   1270a:	4620      	mov	r0, r4
   1270c:	f006 fad6 	bl	18cbc <net_buf_id>
   12710:	4d36      	ldr	r5, [pc, #216]	; (127ec <hci_cmd_done+0x128>)
   12712:	f04f 090c 	mov.w	r9, #12
   12716:	fb09 5300 	mla	r3, r9, r0, r5
   1271a:	885b      	ldrh	r3, [r3, #2]
   1271c:	42bb      	cmp	r3, r7
   1271e:	d011      	beq.n	12744 <hci_cmd_done+0x80>
   12720:	4b2f      	ldr	r3, [pc, #188]	; (127e0 <hci_cmd_done+0x11c>)
   12722:	4e30      	ldr	r6, [pc, #192]	; (127e4 <hci_cmd_done+0x120>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   12724:	4620      	mov	r0, r4
   12726:	1af6      	subs	r6, r6, r3
   12728:	f006 fac8 	bl	18cbc <net_buf_id>
   1272c:	08f6      	lsrs	r6, r6, #3
   1272e:	fb09 5000 	mla	r0, r9, r0, r5
   12732:	01b6      	lsls	r6, r6, #6
   12734:	f046 0602 	orr.w	r6, r6, #2
   12738:	8842      	ldrh	r2, [r0, #2]
   1273a:	482d      	ldr	r0, [pc, #180]	; (127f0 <hci_cmd_done+0x12c>)
   1273c:	4633      	mov	r3, r6
   1273e:	4639      	mov	r1, r7
   12740:	f009 fd3f 	bl	1c1c2 <log_2>
	if (cmd(buf)->state && !status) {
   12744:	4620      	mov	r0, r4
   12746:	f006 fab9 	bl	18cbc <net_buf_id>
   1274a:	260c      	movs	r6, #12
   1274c:	fb06 5000 	mla	r0, r6, r0, r5
   12750:	6843      	ldr	r3, [r0, #4]
   12752:	b1f3      	cbz	r3, 12792 <hci_cmd_done+0xce>
   12754:	f1b8 0f00 	cmp.w	r8, #0
   12758:	d11b      	bne.n	12792 <hci_cmd_done+0xce>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1275a:	4620      	mov	r0, r4
   1275c:	f006 faae 	bl	18cbc <net_buf_id>
   12760:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   12764:	2201      	movs	r2, #1
   12766:	6840      	ldr	r0, [r0, #4]
   12768:	e9d0 3100 	ldrd	r3, r1, [r0]
	if (val) {
   1276c:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1276e:	f001 061f 	and.w	r6, r1, #31
   12772:	40b2      	lsls	r2, r6
	if (val) {
   12774:	0949      	lsrs	r1, r1, #5
   12776:	b320      	cbz	r0, 127c2 <hci_cmd_done+0xfe>
   12778:	f3bf 8f5b 	dmb	ish
   1277c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12780:	e853 1f00 	ldrex	r1, [r3]
   12784:	4311      	orrs	r1, r2
   12786:	e843 1000 	strex	r0, r1, [r3]
   1278a:	2800      	cmp	r0, #0
   1278c:	d1f8      	bne.n	12780 <hci_cmd_done+0xbc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1278e:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   12792:	4620      	mov	r0, r4
   12794:	f006 fa92 	bl	18cbc <net_buf_id>
   12798:	260c      	movs	r6, #12
   1279a:	fb06 5000 	mla	r0, r6, r0, r5
   1279e:	6883      	ldr	r3, [r0, #8]
   127a0:	2b00      	cmp	r3, #0
   127a2:	d0af      	beq.n	12704 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   127a4:	4620      	mov	r0, r4
   127a6:	f006 fa89 	bl	18cbc <net_buf_id>
   127aa:	4370      	muls	r0, r6
   127ac:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   127b0:	4620      	mov	r0, r4
   127b2:	f006 fa83 	bl	18cbc <net_buf_id>
   127b6:	fb06 5500 	mla	r5, r6, r0, r5
   127ba:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   127bc:	f007 ffee 	bl	1a79c <z_impl_k_sem_give>
}
   127c0:	e7a0      	b.n	12704 <hci_cmd_done+0x40>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   127c2:	43d2      	mvns	r2, r2
   127c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   127c8:	f3bf 8f5b 	dmb	ish
   127cc:	e853 1f00 	ldrex	r1, [r3]
   127d0:	4011      	ands	r1, r2
   127d2:	e843 1000 	strex	r0, r1, [r3]
   127d6:	2800      	cmp	r0, #0
   127d8:	d0d9      	beq.n	1278e <hci_cmd_done+0xca>
   127da:	e7f7      	b.n	127cc <hci_cmd_done+0x108>
   127dc:	20000838 	.word	0x20000838
   127e0:	00020854 	.word	0x00020854
   127e4:	00020894 	.word	0x00020894
   127e8:	00021b47 	.word	0x00021b47
   127ec:	20001e30 	.word	0x20001e30
   127f0:	00021b7c 	.word	0x00021b7c

000127f4 <handle_event>:
{
   127f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   127f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   127fa:	4605      	mov	r5, r0
   127fc:	4608      	mov	r0, r1
		if (handler->event != event) {
   127fe:	7811      	ldrb	r1, [r2, #0]
   12800:	42a9      	cmp	r1, r5
   12802:	d01a      	beq.n	1283a <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   12804:	3208      	adds	r2, #8
   12806:	429a      	cmp	r2, r3
   12808:	d1f9      	bne.n	127fe <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   1280a:	8986      	ldrh	r6, [r0, #12]
   1280c:	4b16      	ldr	r3, [pc, #88]	; (12868 <handle_event+0x74>)
   1280e:	4c17      	ldr	r4, [pc, #92]	; (1286c <handle_event+0x78>)
   12810:	6880      	ldr	r0, [r0, #8]
   12812:	4631      	mov	r1, r6
   12814:	1ae4      	subs	r4, r4, r3
   12816:	f7ff faff 	bl	11e18 <bt_hex_real>
   1281a:	f7fd fe9f 	bl	1055c <z_log_strdup>
   1281e:	08e4      	lsrs	r4, r4, #3
   12820:	01a4      	lsls	r4, r4, #6
   12822:	f044 0402 	orr.w	r4, r4, #2
   12826:	4603      	mov	r3, r0
   12828:	f8ad 4000 	strh.w	r4, [sp]
   1282c:	4810      	ldr	r0, [pc, #64]	; (12870 <handle_event+0x7c>)
   1282e:	4632      	mov	r2, r6
   12830:	4629      	mov	r1, r5
   12832:	f009 fcdf 	bl	1c1f4 <log_3>
}
   12836:	b002      	add	sp, #8
   12838:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   1283a:	8981      	ldrh	r1, [r0, #12]
   1283c:	7853      	ldrb	r3, [r2, #1]
   1283e:	428b      	cmp	r3, r1
   12840:	d90d      	bls.n	1285e <handle_event+0x6a>
   12842:	4a09      	ldr	r2, [pc, #36]	; (12868 <handle_event+0x74>)
   12844:	4b09      	ldr	r3, [pc, #36]	; (1286c <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   12846:	480b      	ldr	r0, [pc, #44]	; (12874 <handle_event+0x80>)
   12848:	1a9b      	subs	r3, r3, r2
   1284a:	08db      	lsrs	r3, r3, #3
   1284c:	019b      	lsls	r3, r3, #6
   1284e:	f043 0301 	orr.w	r3, r3, #1
   12852:	462a      	mov	r2, r5
}
   12854:	b002      	add	sp, #8
   12856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1285a:	f009 bcb2 	b.w	1c1c2 <log_2>
		handler->handler(buf);
   1285e:	6853      	ldr	r3, [r2, #4]
}
   12860:	b002      	add	sp, #8
   12862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   12866:	4718      	bx	r3
   12868:	00020854 	.word	0x00020854
   1286c:	00020894 	.word	0x00020894
   12870:	00021bd1 	.word	0x00021bd1
   12874:	00021baf 	.word	0x00021baf

00012878 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   12878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1287c:	4b47      	ldr	r3, [pc, #284]	; (1299c <hci_rx_thread+0x124>)
   1287e:	4d48      	ldr	r5, [pc, #288]	; (129a0 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   12880:	f8df 813c 	ldr.w	r8, [pc, #316]	; 129c0 <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12884:	f8df 913c 	ldr.w	r9, [pc, #316]	; 129c4 <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   12888:	4f46      	ldr	r7, [pc, #280]	; (129a4 <hci_rx_thread+0x12c>)
   1288a:	1aed      	subs	r5, r5, r3
   1288c:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1288e:	f04f 32ff 	mov.w	r2, #4294967295
   12892:	f04f 33ff 	mov.w	r3, #4294967295
   12896:	4640      	mov	r0, r8
   12898:	f00d f82c 	bl	1f8f4 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1289c:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   1289e:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   128a0:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   128a2:	d046      	beq.n	12932 <hci_rx_thread+0xba>
   128a4:	2903      	cmp	r1, #3
   128a6:	d173      	bne.n	12990 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   128a8:	8983      	ldrh	r3, [r0, #12]
   128aa:	2b03      	cmp	r3, #3
   128ac:	d80c      	bhi.n	128c8 <hci_rx_thread+0x50>
   128ae:	493e      	ldr	r1, [pc, #248]	; (129a8 <hci_rx_thread+0x130>)
   128b0:	483e      	ldr	r0, [pc, #248]	; (129ac <hci_rx_thread+0x134>)
   128b2:	f240 1379 	movw	r3, #377	; 0x179
   128b6:	463a      	mov	r2, r7
   128b8:	f009 f81d 	bl	1b8f6 <printk>
   128bc:	4040      	eors	r0, r0
   128be:	f380 8811 	msr	BASEPRI, r0
   128c2:	f04f 0003 	mov.w	r0, #3
   128c6:	df02      	svc	2
   128c8:	2104      	movs	r1, #4
   128ca:	f104 0008 	add.w	r0, r4, #8
   128ce:	f00d f889 	bl	1f9e4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   128d2:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   128d4:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   128d6:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   128da:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   128dc:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   128e0:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   128e2:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   128e4:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   128e6:	d009      	beq.n	128fc <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   128e8:	01ab      	lsls	r3, r5, #6
   128ea:	4831      	ldr	r0, [pc, #196]	; (129b0 <hci_rx_thread+0x138>)
   128ec:	f043 0301 	orr.w	r3, r3, #1
   128f0:	f009 fc67 	bl	1c1c2 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   128f4:	4620      	mov	r0, r4
   128f6:	f006 fa95 	bl	18e24 <net_buf_unref>
			break;
   128fa:	e017      	b.n	1292c <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   128fc:	f002 fa64 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   12900:	4606      	mov	r6, r0
   12902:	b938      	cbnz	r0, 12914 <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   12904:	01aa      	lsls	r2, r5, #6
   12906:	8ae1      	ldrh	r1, [r4, #22]
   12908:	482a      	ldr	r0, [pc, #168]	; (129b4 <hci_rx_thread+0x13c>)
   1290a:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1290e:	f009 fc44 	bl	1c19a <log_1>
   12912:	e7ef      	b.n	128f4 <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   12914:	f002 fd3c 	bl	15390 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   12918:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   1291c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1291e:	4621      	mov	r1, r4
   12920:	4630      	mov	r0, r6
   12922:	f002 f8fb 	bl	14b1c <bt_conn_recv>
	bt_conn_unref(conn);
   12926:	4630      	mov	r0, r6
   12928:	f00b fbfa 	bl	1e120 <bt_conn_unref>
	z_impl_k_yield();
   1292c:	f008 fbe6 	bl	1b0fc <z_impl_k_yield>
	while (1) {
   12930:	e7ad      	b.n	1288e <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12932:	8983      	ldrh	r3, [r0, #12]
   12934:	2b01      	cmp	r3, #1
   12936:	d80c      	bhi.n	12952 <hci_rx_thread+0xda>
   12938:	491b      	ldr	r1, [pc, #108]	; (129a8 <hci_rx_thread+0x130>)
   1293a:	481c      	ldr	r0, [pc, #112]	; (129ac <hci_rx_thread+0x134>)
   1293c:	f640 03f9 	movw	r3, #2297	; 0x8f9
   12940:	463a      	mov	r2, r7
   12942:	f008 ffd8 	bl	1b8f6 <printk>
   12946:	4040      	eors	r0, r0
   12948:	f380 8811 	msr	BASEPRI, r0
   1294c:	f04f 0003 	mov.w	r0, #3
   12950:	df02      	svc	2
   12952:	2102      	movs	r1, #2
   12954:	f104 0008 	add.w	r0, r4, #8
   12958:	f00d f844 	bl	1f9e4 <net_buf_simple_pull_mem>
   1295c:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1295e:	7800      	ldrb	r0, [r0, #0]
   12960:	f00b f86a 	bl	1da38 <bt_hci_evt_get_flags>
   12964:	0783      	lsls	r3, r0, #30
   12966:	d40c      	bmi.n	12982 <hci_rx_thread+0x10a>
   12968:	4913      	ldr	r1, [pc, #76]	; (129b8 <hci_rx_thread+0x140>)
   1296a:	4810      	ldr	r0, [pc, #64]	; (129ac <hci_rx_thread+0x134>)
   1296c:	f640 03fd 	movw	r3, #2301	; 0x8fd
   12970:	463a      	mov	r2, r7
   12972:	f008 ffc0 	bl	1b8f6 <printk>
   12976:	4040      	eors	r0, r0
   12978:	f380 8811 	msr	BASEPRI, r0
   1297c:	f04f 0003 	mov.w	r0, #3
   12980:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12982:	7830      	ldrb	r0, [r6, #0]
   12984:	2306      	movs	r3, #6
   12986:	464a      	mov	r2, r9
   12988:	4621      	mov	r1, r4
   1298a:	f7ff ff33 	bl	127f4 <handle_event>
	net_buf_unref(buf);
   1298e:	e7b1      	b.n	128f4 <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12990:	01aa      	lsls	r2, r5, #6
   12992:	480a      	ldr	r0, [pc, #40]	; (129bc <hci_rx_thread+0x144>)
   12994:	f042 0201 	orr.w	r2, r2, #1
   12998:	e7b9      	b.n	1290e <hci_rx_thread+0x96>
   1299a:	bf00      	nop
   1299c:	00020854 	.word	0x00020854
   129a0:	00020894 	.word	0x00020894
   129a4:	00021bf3 	.word	0x00021bf3
   129a8:	00021c27 	.word	0x00021c27
   129ac:	00021c40 	.word	0x00021c40
   129b0:	00021c5d 	.word	0x00021c5d
   129b4:	00021c81 	.word	0x00021c81
   129b8:	00021ca3 	.word	0x00021ca3
   129bc:	00021cd1 	.word	0x00021cd1
   129c0:	200003ac 	.word	0x200003ac
   129c4:	00020db0 	.word	0x00020db0

000129c8 <hci_le_meta_event>:
{
   129c8:	b510      	push	{r4, lr}
   129ca:	2101      	movs	r1, #1
   129cc:	4604      	mov	r4, r0
   129ce:	3008      	adds	r0, #8
   129d0:	f00d f808 	bl	1f9e4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   129d4:	4621      	mov	r1, r4
   129d6:	4a03      	ldr	r2, [pc, #12]	; (129e4 <hci_le_meta_event+0x1c>)
   129d8:	7800      	ldrb	r0, [r0, #0]
}
   129da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   129de:	230a      	movs	r3, #10
   129e0:	f7ff bf08 	b.w	127f4 <handle_event>
   129e4:	00020d40 	.word	0x00020d40

000129e8 <hci_num_completed_packets>:
{
   129e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129ec:	4d39      	ldr	r5, [pc, #228]	; (12ad4 <hci_num_completed_packets+0xec>)
   129ee:	4b3a      	ldr	r3, [pc, #232]	; (12ad8 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   129f0:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   129f4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 12ae0 <hci_num_completed_packets+0xf8>
   129f8:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   129fa:	2600      	movs	r6, #0
   129fc:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   129fe:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   12a00:	f898 3000 	ldrb.w	r3, [r8]
   12a04:	429e      	cmp	r6, r3
   12a06:	db01      	blt.n	12a0c <hci_num_completed_packets+0x24>
}
   12a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   12a0c:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   12a10:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   12a14:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   12a18:	4658      	mov	r0, fp
   12a1a:	f002 f9d5 	bl	14dc8 <bt_conn_lookup_handle>
		if (!conn) {
   12a1e:	4604      	mov	r4, r0
   12a20:	b1d8      	cbz	r0, 12a5a <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   12a22:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   12a26:	2f00      	cmp	r7, #0
   12a28:	d033      	beq.n	12a92 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   12a2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   12a2e:	f3ef 8211 	mrs	r2, BASEPRI
   12a32:	f383 8811 	msr	BASEPRI, r3
   12a36:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   12a3a:	69e3      	ldr	r3, [r4, #28]
   12a3c:	b1b3      	cbz	r3, 12a6c <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   12a3e:	3b01      	subs	r3, #1
   12a40:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   12a42:	f382 8811 	msr	BASEPRI, r2
   12a46:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   12a4a:	4620      	mov	r0, r4
   12a4c:	f001 ffd2 	bl	149f4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   12a50:	3f01      	subs	r7, #1
   12a52:	f007 fea3 	bl	1a79c <z_impl_k_sem_give>
   12a56:	b2bf      	uxth	r7, r7
   12a58:	e7e5      	b.n	12a26 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   12a5a:	01aa      	lsls	r2, r5, #6
   12a5c:	481f      	ldr	r0, [pc, #124]	; (12adc <hci_num_completed_packets+0xf4>)
   12a5e:	f042 0201 	orr.w	r2, r2, #1
   12a62:	4659      	mov	r1, fp
   12a64:	f009 fb99 	bl	1c19a <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   12a68:	3601      	adds	r6, #1
   12a6a:	e7c9      	b.n	12a00 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   12a6c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   12a6e:	b12b      	cbz	r3, 12a7c <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12a70:	69a1      	ldr	r1, [r4, #24]
   12a72:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   12a74:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12a76:	428b      	cmp	r3, r1
	list->tail = node;
   12a78:	bf08      	it	eq
   12a7a:	61a0      	streq	r0, [r4, #24]
   12a7c:	f382 8811 	msr	BASEPRI, r2
   12a80:	f3bf 8f6f 	isb	sy
			if (!node) {
   12a84:	b94b      	cbnz	r3, 12a9a <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   12a86:	01a9      	lsls	r1, r5, #6
   12a88:	f041 0101 	orr.w	r1, r1, #1
   12a8c:	4650      	mov	r0, sl
   12a8e:	f009 fb77 	bl	1c180 <log_0>
		bt_conn_unref(conn);
   12a92:	4620      	mov	r0, r4
   12a94:	f00b fb44 	bl	1e120 <bt_conn_unref>
   12a98:	e7e6      	b.n	12a68 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   12a9a:	f04f 0240 	mov.w	r2, #64	; 0x40
   12a9e:	f3ef 8111 	mrs	r1, BASEPRI
   12aa2:	f382 8811 	msr	BASEPRI, r2
   12aa6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   12aaa:	68da      	ldr	r2, [r3, #12]
   12aac:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   12aae:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   12ab2:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   12ab4:	f8c3 900c 	str.w	r9, [r3, #12]
   12ab8:	b94a      	cbnz	r2, 12ace <hci_num_completed_packets+0xe6>
	list->head = node;
   12aba:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   12abe:	f381 8811 	msr	BASEPRI, r1
   12ac2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   12ac6:	4658      	mov	r0, fp
   12ac8:	f007 ffde 	bl	1aa88 <k_work_submit>
   12acc:	e7bd      	b.n	12a4a <hci_num_completed_packets+0x62>
	parent->next = child;
   12ace:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12ad0:	6263      	str	r3, [r4, #36]	; 0x24
}
   12ad2:	e7f4      	b.n	12abe <hci_num_completed_packets+0xd6>
   12ad4:	00020894 	.word	0x00020894
   12ad8:	00020854 	.word	0x00020854
   12adc:	00021ce5 	.word	0x00021ce5
   12ae0:	00021d01 	.word	0x00021d01

00012ae4 <hci_tx_thread>:
{
   12ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae8:	4d51      	ldr	r5, [pc, #324]	; (12c30 <hci_tx_thread+0x14c>)
   12aea:	4b52      	ldr	r3, [pc, #328]	; (12c34 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12aec:	f8df 914c 	ldr.w	r9, [pc, #332]	; 12c3c <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   12af0:	f8df a174 	ldr.w	sl, [pc, #372]	; 12c68 <hci_tx_thread+0x184>
   12af4:	1aed      	subs	r5, r5, r3
   12af6:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   12af8:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12afc:	484e      	ldr	r0, [pc, #312]	; (12c38 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12afe:	f36f 3352 	bfc	r3, #13, #6
   12b02:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12b06:	f002 f8f7 	bl	14cf8 <bt_conn_prepare_events>
   12b0a:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   12b0c:	484b      	ldr	r0, [pc, #300]	; (12c3c <hci_tx_thread+0x158>)
   12b0e:	f04f 32ff 	mov.w	r2, #4294967295
   12b12:	f04f 33ff 	mov.w	r3, #4294967295
   12b16:	4639      	mov	r1, r7
   12b18:	f008 fe04 	bl	1b724 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   12b1c:	b160      	cbz	r0, 12b38 <hci_tx_thread+0x54>
   12b1e:	4948      	ldr	r1, [pc, #288]	; (12c40 <hci_tx_thread+0x15c>)
   12b20:	4848      	ldr	r0, [pc, #288]	; (12c44 <hci_tx_thread+0x160>)
   12b22:	f640 136f 	movw	r3, #2415	; 0x96f
   12b26:	4652      	mov	r2, sl
   12b28:	f008 fee5 	bl	1b8f6 <printk>
   12b2c:	4040      	eors	r0, r0
   12b2e:	f380 8811 	msr	BASEPRI, r0
   12b32:	f04f 0003 	mov.w	r0, #3
   12b36:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12b38:	4e43      	ldr	r6, [pc, #268]	; (12c48 <hci_tx_thread+0x164>)
{
   12b3a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 12c3c <hci_tx_thread+0x158>
   12b3e:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
   12b42:	b917      	cbnz	r7, 12b4a <hci_tx_thread+0x66>
	z_impl_k_yield();
   12b44:	f008 fada 	bl	1b0fc <z_impl_k_yield>
	while (1) {
   12b48:	e7d6      	b.n	12af8 <hci_tx_thread+0x14>
		switch (ev->state) {
   12b4a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   12b4e:	f3c1 3145 	ubfx	r1, r1, #13, #6
   12b52:	2901      	cmp	r1, #1
   12b54:	d959      	bls.n	12c0a <hci_tx_thread+0x126>
   12b56:	2904      	cmp	r1, #4
   12b58:	d163      	bne.n	12c22 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12b5a:	f898 300c 	ldrb.w	r3, [r8, #12]
   12b5e:	2b00      	cmp	r3, #0
   12b60:	d157      	bne.n	12c12 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12b62:	483a      	ldr	r0, [pc, #232]	; (12c4c <hci_tx_thread+0x168>)
   12b64:	2200      	movs	r2, #0
   12b66:	2300      	movs	r3, #0
   12b68:	f00c fec4 	bl	1f8f4 <net_buf_get>
	BT_ASSERT(buf);
   12b6c:	4604      	mov	r4, r0
   12b6e:	b960      	cbnz	r0, 12b8a <hci_tx_thread+0xa6>
   12b70:	4937      	ldr	r1, [pc, #220]	; (12c50 <hci_tx_thread+0x16c>)
   12b72:	4834      	ldr	r0, [pc, #208]	; (12c44 <hci_tx_thread+0x160>)
   12b74:	f640 130c 	movw	r3, #2316	; 0x90c
   12b78:	4652      	mov	r2, sl
   12b7a:	f008 febc 	bl	1b8f6 <printk>
   12b7e:	4040      	eors	r0, r0
   12b80:	f380 8811 	msr	BASEPRI, r0
   12b84:	f04f 0003 	mov.w	r0, #3
   12b88:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12b8a:	f04f 33ff 	mov.w	r3, #4294967295
   12b8e:	f04f 32ff 	mov.w	r2, #4294967295
   12b92:	4658      	mov	r0, fp
   12b94:	f007 fe28 	bl	1a7e8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   12b98:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   12b9c:	b163      	cbz	r3, 12bb8 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   12b9e:	01a9      	lsls	r1, r5, #6
   12ba0:	482c      	ldr	r0, [pc, #176]	; (12c54 <hci_tx_thread+0x170>)
   12ba2:	f041 0101 	orr.w	r1, r1, #1
   12ba6:	f009 faeb 	bl	1c180 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   12baa:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   12bae:	f006 f939 	bl	18e24 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12bb2:	2300      	movs	r3, #0
   12bb4:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   12bb8:	4620      	mov	r0, r4
   12bba:	f00c fec6 	bl	1f94a <net_buf_ref>
   12bbe:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
		return bt_hci_ecc_send(buf);
   12bc2:	4620      	mov	r0, r4
   12bc4:	f7ff fac2 	bl	1214c <bt_hci_ecc_send>
	if (err) {
   12bc8:	4601      	mov	r1, r0
   12bca:	b1f0      	cbz	r0, 12c0a <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   12bcc:	01aa      	lsls	r2, r5, #6
   12bce:	4822      	ldr	r0, [pc, #136]	; (12c58 <hci_tx_thread+0x174>)
   12bd0:	f042 0201 	orr.w	r2, r2, #1
   12bd4:	f009 fae1 	bl	1c19a <log_1>
	z_impl_k_sem_give(sem);
   12bd8:	4820      	ldr	r0, [pc, #128]	; (12c5c <hci_tx_thread+0x178>)
   12bda:	f007 fddf 	bl	1a79c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12bde:	4620      	mov	r0, r4
   12be0:	f006 f86c 	bl	18cbc <net_buf_id>
   12be4:	4b1e      	ldr	r3, [pc, #120]	; (12c60 <hci_tx_thread+0x17c>)
   12be6:	220c      	movs	r2, #12
   12be8:	fb02 3000 	mla	r0, r2, r0, r3
   12bec:	211f      	movs	r1, #31
   12bee:	8840      	ldrh	r0, [r0, #2]
   12bf0:	4622      	mov	r2, r4
   12bf2:	f7ff fd67 	bl	126c4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   12bf6:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   12bfa:	f006 f913 	bl	18e24 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12bfe:	2300      	movs	r3, #0
		net_buf_unref(buf);
   12c00:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   12c02:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
   12c06:	f006 f90d 	bl	18e24 <net_buf_unref>
	for (; count; ev++, count--) {
   12c0a:	f108 0814 	add.w	r8, r8, #20
   12c0e:	3f01      	subs	r7, #1
   12c10:	e797      	b.n	12b42 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12c12:	2b01      	cmp	r3, #1
   12c14:	d1f9      	bne.n	12c0a <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   12c16:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   12c1a:	3838      	subs	r0, #56	; 0x38
   12c1c:	f002 fb08 	bl	15230 <bt_conn_process_tx>
   12c20:	e7f3      	b.n	12c0a <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   12c22:	01aa      	lsls	r2, r5, #6
   12c24:	480f      	ldr	r0, [pc, #60]	; (12c64 <hci_tx_thread+0x180>)
   12c26:	f042 0202 	orr.w	r2, r2, #2
   12c2a:	f009 fab6 	bl	1c19a <log_1>
   12c2e:	e7ec      	b.n	12c0a <hci_tx_thread+0x126>
   12c30:	00020894 	.word	0x00020894
   12c34:	00020854 	.word	0x00020854
   12c38:	200004ac 	.word	0x200004ac
   12c3c:	20000498 	.word	0x20000498
   12c40:	00021d18 	.word	0x00021d18
   12c44:	00021c40 	.word	0x00021c40
   12c48:	200002a0 	.word	0x200002a0
   12c4c:	200003c4 	.word	0x200003c4
   12c50:	00021972 	.word	0x00021972
   12c54:	00021d21 	.word	0x00021d21
   12c58:	00021d3c 	.word	0x00021d3c
   12c5c:	20000390 	.word	0x20000390
   12c60:	20001e30 	.word	0x20001e30
   12c64:	00021d5e 	.word	0x00021d5e
   12c68:	00021bf3 	.word	0x00021bf3

00012c6c <le_conn_update_complete>:
{
   12c6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   12c6e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   12c70:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12c74:	4630      	mov	r0, r6
   12c76:	f002 f8a7 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   12c7a:	4604      	mov	r4, r0
   12c7c:	b960      	cbnz	r0, 12c98 <le_conn_update_complete+0x2c>
   12c7e:	4a22      	ldr	r2, [pc, #136]	; (12d08 <le_conn_update_complete+0x9c>)
   12c80:	4b22      	ldr	r3, [pc, #136]	; (12d0c <le_conn_update_complete+0xa0>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12c82:	4823      	ldr	r0, [pc, #140]	; (12d10 <le_conn_update_complete+0xa4>)
   12c84:	1ad2      	subs	r2, r2, r3
   12c86:	08d2      	lsrs	r2, r2, #3
   12c88:	0192      	lsls	r2, r2, #6
   12c8a:	f042 0201 	orr.w	r2, r2, #1
   12c8e:	4631      	mov	r1, r6
   12c90:	f009 fa83 	bl	1c19a <log_1>
}
   12c94:	b002      	add	sp, #8
   12c96:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   12c98:	782b      	ldrb	r3, [r5, #0]
   12c9a:	b9bb      	cbnz	r3, 12ccc <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   12c9c:	792a      	ldrb	r2, [r5, #4]
   12c9e:	78eb      	ldrb	r3, [r5, #3]
   12ca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12ca4:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   12ca8:	79aa      	ldrb	r2, [r5, #6]
   12caa:	796b      	ldrb	r3, [r5, #5]
   12cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12cb0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12cb4:	79eb      	ldrb	r3, [r5, #7]
   12cb6:	7a2a      	ldrb	r2, [r5, #8]
   12cb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12cbc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   12cc0:	f001 fe9c 	bl	149fc <notify_le_param_updated>
	bt_conn_unref(conn);
   12cc4:	4620      	mov	r0, r4
   12cc6:	f00b fa2b 	bl	1e120 <bt_conn_unref>
   12cca:	e7e3      	b.n	12c94 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   12ccc:	2b1a      	cmp	r3, #26
   12cce:	d1f9      	bne.n	12cc4 <le_conn_update_complete+0x58>
   12cd0:	78c3      	ldrb	r3, [r0, #3]
   12cd2:	2b01      	cmp	r3, #1
   12cd4:	d1f6      	bne.n	12cc4 <le_conn_update_complete+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12cd6:	f3bf 8f5b 	dmb	ish
   12cda:	1d03      	adds	r3, r0, #4
   12cdc:	e853 2f00 	ldrex	r2, [r3]
   12ce0:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   12ce4:	e843 1500 	strex	r5, r1, [r3]
   12ce8:	2d00      	cmp	r5, #0
   12cea:	d1f7      	bne.n	12cdc <le_conn_update_complete+0x70>
   12cec:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
   12cf0:	0553      	lsls	r3, r2, #21
   12cf2:	d4e7      	bmi.n	12cc4 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   12cf4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   12cf8:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   12cfa:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   12cfc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   12d00:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   12d02:	f002 fce5 	bl	156d0 <bt_l2cap_update_conn_param>
   12d06:	e7dd      	b.n	12cc4 <le_conn_update_complete+0x58>
   12d08:	00020894 	.word	0x00020894
   12d0c:	00020854 	.word	0x00020854
   12d10:	00021ab7 	.word	0x00021ab7

00012d14 <hci_cmd_status>:
{
   12d14:	b538      	push	{r3, r4, r5, lr}
   12d16:	2104      	movs	r1, #4
   12d18:	4604      	mov	r4, r0
   12d1a:	3008      	adds	r0, #8
   12d1c:	f00c fe62 	bl	1f9e4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12d20:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   12d22:	7801      	ldrb	r1, [r0, #0]
   12d24:	8840      	ldrh	r0, [r0, #2]
   12d26:	4622      	mov	r2, r4
   12d28:	f7ff fccc 	bl	126c4 <hci_cmd_done>
	if (ncmd) {
   12d2c:	b125      	cbz	r5, 12d38 <hci_cmd_status+0x24>
   12d2e:	4803      	ldr	r0, [pc, #12]	; (12d3c <hci_cmd_status+0x28>)
}
   12d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12d34:	f007 bd32 	b.w	1a79c <z_impl_k_sem_give>
   12d38:	bd38      	pop	{r3, r4, r5, pc}
   12d3a:	bf00      	nop
   12d3c:	20000390 	.word	0x20000390

00012d40 <hci_cmd_complete>:
{
   12d40:	b538      	push	{r3, r4, r5, lr}
   12d42:	2103      	movs	r1, #3
   12d44:	4604      	mov	r4, r0
   12d46:	3008      	adds	r0, #8
   12d48:	f00c fe4c 	bl	1f9e4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   12d4c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   12d4e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12d50:	7819      	ldrb	r1, [r3, #0]
   12d52:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   12d56:	4622      	mov	r2, r4
   12d58:	f7ff fcb4 	bl	126c4 <hci_cmd_done>
	if (ncmd) {
   12d5c:	b125      	cbz	r5, 12d68 <hci_cmd_complete+0x28>
   12d5e:	4803      	ldr	r0, [pc, #12]	; (12d6c <hci_cmd_complete+0x2c>)
}
   12d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12d64:	f007 bd1a 	b.w	1a79c <z_impl_k_sem_give>
   12d68:	bd38      	pop	{r3, r4, r5, pc}
   12d6a:	bf00      	nop
   12d6c:	20000390 	.word	0x20000390

00012d70 <bt_hci_cmd_state_set_init>:
{
   12d70:	b510      	push	{r4, lr}
	state->bit = bit;
   12d72:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   12d76:	f89d 3008 	ldrb.w	r3, [sp, #8]
   12d7a:	720b      	strb	r3, [r1, #8]
{
   12d7c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   12d7e:	f005 ff9d 	bl	18cbc <net_buf_id>
   12d82:	4b03      	ldr	r3, [pc, #12]	; (12d90 <bt_hci_cmd_state_set_init+0x20>)
   12d84:	220c      	movs	r2, #12
   12d86:	fb02 3000 	mla	r0, r2, r0, r3
   12d8a:	6044      	str	r4, [r0, #4]
}
   12d8c:	bd10      	pop	{r4, pc}
   12d8e:	bf00      	nop
   12d90:	20001e30 	.word	0x20001e30

00012d94 <bt_hci_cmd_create>:
{
   12d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12d98:	f04f 32ff 	mov.w	r2, #4294967295
   12d9c:	f04f 33ff 	mov.w	r3, #4294967295
   12da0:	4605      	mov	r5, r0
   12da2:	4816      	ldr	r0, [pc, #88]	; (12dfc <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   12da4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12e00 <bt_hci_cmd_create+0x6c>
{
   12da8:	460e      	mov	r6, r1
   12daa:	f00c fd9e 	bl	1f8ea <net_buf_alloc_fixed>
   12dae:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   12db0:	f100 0b08 	add.w	fp, r0, #8
   12db4:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12db6:	2700      	movs	r7, #0
   12db8:	4658      	mov	r0, fp
   12dba:	f00c fdb5 	bl	1f928 <net_buf_simple_reserve>
   12dbe:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   12dc0:	4620      	mov	r0, r4
   12dc2:	f005 ff7b 	bl	18cbc <net_buf_id>
   12dc6:	f04f 0a0c 	mov.w	sl, #12
   12dca:	fb0a 8000 	mla	r0, sl, r0, r8
   12dce:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   12dd0:	4620      	mov	r0, r4
   12dd2:	f005 ff73 	bl	18cbc <net_buf_id>
   12dd6:	fb0a 8000 	mla	r0, sl, r0, r8
   12dda:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   12ddc:	4620      	mov	r0, r4
   12dde:	f005 ff6d 	bl	18cbc <net_buf_id>
   12de2:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   12de6:	2103      	movs	r1, #3
   12de8:	6047      	str	r7, [r0, #4]
   12dea:	4658      	mov	r0, fp
   12dec:	f00c fdd3 	bl	1f996 <net_buf_simple_add>
	hdr->param_len = param_len;
   12df0:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   12df2:	8005      	strh	r5, [r0, #0]
}
   12df4:	4620      	mov	r0, r4
   12df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dfa:	bf00      	nop
   12dfc:	20000838 	.word	0x20000838
   12e00:	20001e30 	.word	0x20001e30

00012e04 <bt_hci_cmd_send>:
{
   12e04:	b538      	push	{r3, r4, r5, lr}
   12e06:	4605      	mov	r5, r0
	if (!buf) {
   12e08:	460c      	mov	r4, r1
   12e0a:	b919      	cbnz	r1, 12e14 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   12e0c:	f7ff ffc2 	bl	12d94 <bt_hci_cmd_create>
		if (!buf) {
   12e10:	4604      	mov	r4, r0
   12e12:	b1f0      	cbz	r0, 12e52 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12e14:	f640 4335 	movw	r3, #3125	; 0xc35
   12e18:	429d      	cmp	r5, r3
   12e1a:	d114      	bne.n	12e46 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
   12e1c:	4620      	mov	r0, r4
   12e1e:	f7ff f995 	bl	1214c <bt_hci_ecc_send>
		if (err) {
   12e22:	4605      	mov	r5, r0
   12e24:	b168      	cbz	r0, 12e42 <bt_hci_cmd_send+0x3e>
   12e26:	4b0c      	ldr	r3, [pc, #48]	; (12e58 <bt_hci_cmd_send+0x54>)
   12e28:	4a0c      	ldr	r2, [pc, #48]	; (12e5c <bt_hci_cmd_send+0x58>)
   12e2a:	1ad2      	subs	r2, r2, r3
   12e2c:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   12e2e:	0192      	lsls	r2, r2, #6
   12e30:	4601      	mov	r1, r0
   12e32:	f042 0201 	orr.w	r2, r2, #1
   12e36:	480a      	ldr	r0, [pc, #40]	; (12e60 <bt_hci_cmd_send+0x5c>)
   12e38:	f009 f9af 	bl	1c19a <log_1>
			net_buf_unref(buf);
   12e3c:	4620      	mov	r0, r4
   12e3e:	f005 fff1 	bl	18e24 <net_buf_unref>
}
   12e42:	4628      	mov	r0, r5
   12e44:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12e46:	4807      	ldr	r0, [pc, #28]	; (12e64 <bt_hci_cmd_send+0x60>)
   12e48:	4621      	mov	r1, r4
   12e4a:	f00c fd71 	bl	1f930 <net_buf_put>
	return 0;
   12e4e:	2500      	movs	r5, #0
   12e50:	e7f7      	b.n	12e42 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   12e52:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12e56:	e7f4      	b.n	12e42 <bt_hci_cmd_send+0x3e>
   12e58:	00020854 	.word	0x00020854
   12e5c:	00020894 	.word	0x00020894
   12e60:	00021d3c 	.word	0x00021d3c
   12e64:	200003c4 	.word	0x200003c4

00012e68 <le_ltk_request>:
{
   12e68:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   12e6a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   12e6c:	882e      	ldrh	r6, [r5, #0]
   12e6e:	b2b7      	uxth	r7, r6
{
   12e70:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   12e72:	4638      	mov	r0, r7
   12e74:	f001 ffa8 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   12e78:	4604      	mov	r4, r0
   12e7a:	b960      	cbnz	r0, 12e96 <le_ltk_request+0x2e>
   12e7c:	4a26      	ldr	r2, [pc, #152]	; (12f18 <le_ltk_request+0xb0>)
   12e7e:	4b27      	ldr	r3, [pc, #156]	; (12f1c <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12e80:	4827      	ldr	r0, [pc, #156]	; (12f20 <le_ltk_request+0xb8>)
   12e82:	1ad2      	subs	r2, r2, r3
   12e84:	08d2      	lsrs	r2, r2, #3
   12e86:	0192      	lsls	r2, r2, #6
   12e88:	f042 0201 	orr.w	r2, r2, #1
   12e8c:	4639      	mov	r1, r7
   12e8e:	f009 f984 	bl	1c19a <log_1>
}
   12e92:	b007      	add	sp, #28
   12e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   12e96:	af02      	add	r7, sp, #8
   12e98:	f8d5 2002 	ldr.w	r2, [r5, #2]
   12e9c:	f8d5 3006 	ldr.w	r3, [r5, #6]
   12ea0:	9701      	str	r7, [sp, #4]
   12ea2:	8969      	ldrh	r1, [r5, #10]
   12ea4:	9100      	str	r1, [sp, #0]
   12ea6:	f00c faf1 	bl	1f48c <bt_smp_request_ltk>
   12eaa:	b320      	cbz	r0, 12ef6 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   12eac:	2112      	movs	r1, #18
   12eae:	f242 001a 	movw	r0, #8218	; 0x201a
   12eb2:	f7ff ff6f 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   12eb6:	4605      	mov	r5, r0
   12eb8:	b968      	cbnz	r0, 12ed6 <le_ltk_request+0x6e>
   12eba:	4917      	ldr	r1, [pc, #92]	; (12f18 <le_ltk_request+0xb0>)
   12ebc:	4b17      	ldr	r3, [pc, #92]	; (12f1c <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
   12ebe:	4819      	ldr	r0, [pc, #100]	; (12f24 <le_ltk_request+0xbc>)
   12ec0:	1ac9      	subs	r1, r1, r3
   12ec2:	08c9      	lsrs	r1, r1, #3
   12ec4:	0189      	lsls	r1, r1, #6
   12ec6:	f041 0101 	orr.w	r1, r1, #1
   12eca:	f009 f959 	bl	1c180 <log_0>
	bt_conn_unref(conn);
   12ece:	4620      	mov	r0, r4
   12ed0:	f00b f926 	bl	1e120 <bt_conn_unref>
   12ed4:	e7dd      	b.n	12e92 <le_ltk_request+0x2a>
   12ed6:	2112      	movs	r1, #18
   12ed8:	3008      	adds	r0, #8
   12eda:	f00c fd5c 	bl	1f996 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   12ede:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   12ee0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   12ee4:	2210      	movs	r2, #16
   12ee6:	f00a fc67 	bl	1d7b8 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   12eea:	4629      	mov	r1, r5
   12eec:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   12ef0:	f7ff ff88 	bl	12e04 <bt_hci_cmd_send>
   12ef4:	e7eb      	b.n	12ece <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   12ef6:	2102      	movs	r1, #2
   12ef8:	f242 001b 	movw	r0, #8219	; 0x201b
   12efc:	f7ff ff4a 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   12f00:	4605      	mov	r5, r0
   12f02:	2800      	cmp	r0, #0
   12f04:	d0d9      	beq.n	12eba <le_ltk_request+0x52>
   12f06:	2102      	movs	r1, #2
   12f08:	3008      	adds	r0, #8
   12f0a:	f00c fd44 	bl	1f996 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   12f0e:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   12f10:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   12f12:	f242 001b 	movw	r0, #8219	; 0x201b
   12f16:	e7eb      	b.n	12ef0 <le_ltk_request+0x88>
   12f18:	00020894 	.word	0x00020894
   12f1c:	00020854 	.word	0x00020854
   12f20:	00021ab7 	.word	0x00021ab7
   12f24:	00021d7f 	.word	0x00021d7f

00012f28 <le_conn_param_neg_reply>:
{
   12f28:	b570      	push	{r4, r5, r6, lr}
   12f2a:	4606      	mov	r6, r0
   12f2c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   12f2e:	f242 0021 	movw	r0, #8225	; 0x2021
   12f32:	2103      	movs	r1, #3
   12f34:	f7ff ff2e 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   12f38:	4604      	mov	r4, r0
   12f3a:	b958      	cbnz	r0, 12f54 <le_conn_param_neg_reply+0x2c>
   12f3c:	490c      	ldr	r1, [pc, #48]	; (12f70 <le_conn_param_neg_reply+0x48>)
   12f3e:	4b0d      	ldr	r3, [pc, #52]	; (12f74 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   12f40:	480d      	ldr	r0, [pc, #52]	; (12f78 <le_conn_param_neg_reply+0x50>)
   12f42:	1ac9      	subs	r1, r1, r3
   12f44:	08c9      	lsrs	r1, r1, #3
   12f46:	0189      	lsls	r1, r1, #6
}
   12f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   12f4c:	f041 0101 	orr.w	r1, r1, #1
   12f50:	f009 b916 	b.w	1c180 <log_0>
   12f54:	2103      	movs	r1, #3
   12f56:	3008      	adds	r0, #8
   12f58:	f00c fd1d 	bl	1f996 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   12f5c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   12f5e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   12f60:	4621      	mov	r1, r4
   12f62:	f242 0021 	movw	r0, #8225	; 0x2021
}
   12f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   12f6a:	f7ff bf4b 	b.w	12e04 <bt_hci_cmd_send>
   12f6e:	bf00      	nop
   12f70:	00020894 	.word	0x00020894
   12f74:	00020854 	.word	0x00020854
   12f78:	00021d96 	.word	0x00021d96

00012f7c <le_conn_param_req>:
{
   12f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   12f7e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12f80:	78d9      	ldrb	r1, [r3, #3]
   12f82:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   12f84:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12f86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12f8a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12f8e:	7959      	ldrb	r1, [r3, #5]
   12f90:	791a      	ldrb	r2, [r3, #4]
   12f92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12f96:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   12f9a:	799a      	ldrb	r2, [r3, #6]
   12f9c:	79d9      	ldrb	r1, [r3, #7]
   12f9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12fa2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12fa6:	7a1a      	ldrb	r2, [r3, #8]
   12fa8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   12faa:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12fac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   12fb0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12fb2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   12fb6:	f001 ff07 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   12fba:	4606      	mov	r6, r0
   12fbc:	b980      	cbnz	r0, 12fe0 <le_conn_param_req+0x64>
   12fbe:	4b20      	ldr	r3, [pc, #128]	; (13040 <le_conn_param_req+0xc4>)
   12fc0:	4a20      	ldr	r2, [pc, #128]	; (13044 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12fc2:	4821      	ldr	r0, [pc, #132]	; (13048 <le_conn_param_req+0xcc>)
   12fc4:	1ad2      	subs	r2, r2, r3
   12fc6:	08d2      	lsrs	r2, r2, #3
   12fc8:	0192      	lsls	r2, r2, #6
   12fca:	4621      	mov	r1, r4
   12fcc:	f042 0201 	orr.w	r2, r2, #1
   12fd0:	f009 f8e3 	bl	1c19a <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   12fd4:	2102      	movs	r1, #2
   12fd6:	4620      	mov	r0, r4
   12fd8:	f7ff ffa6 	bl	12f28 <le_conn_param_neg_reply>
}
   12fdc:	b003      	add	sp, #12
   12fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   12fe0:	4669      	mov	r1, sp
   12fe2:	f001 fd43 	bl	14a6c <le_param_req>
   12fe6:	b938      	cbnz	r0, 12ff8 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   12fe8:	211e      	movs	r1, #30
   12fea:	4620      	mov	r0, r4
   12fec:	f7ff ff9c 	bl	12f28 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   12ff0:	4630      	mov	r0, r6
   12ff2:	f00b f895 	bl	1e120 <bt_conn_unref>
   12ff6:	e7f1      	b.n	12fdc <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   12ff8:	210e      	movs	r1, #14
   12ffa:	f242 0020 	movw	r0, #8224	; 0x2020
   12ffe:	f7ff fec9 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   13002:	4605      	mov	r5, r0
   13004:	2800      	cmp	r0, #0
   13006:	d0f3      	beq.n	12ff0 <le_conn_param_req+0x74>
   13008:	210e      	movs	r1, #14
   1300a:	3008      	adds	r0, #8
   1300c:	f00c fcc3 	bl	1f996 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   13010:	220e      	movs	r2, #14
   13012:	4604      	mov	r4, r0
   13014:	2100      	movs	r1, #0
   13016:	f00a fbfa 	bl	1d80e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1301a:	f8bd 3000 	ldrh.w	r3, [sp]
   1301e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   13020:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   13024:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   13026:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1302a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1302c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   13030:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   13032:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   13034:	4629      	mov	r1, r5
   13036:	f242 0020 	movw	r0, #8224	; 0x2020
   1303a:	f7ff fee3 	bl	12e04 <bt_hci_cmd_send>
   1303e:	e7d7      	b.n	12ff0 <le_conn_param_req+0x74>
   13040:	00020854 	.word	0x00020854
   13044:	00020894 	.word	0x00020894
   13048:	00021ab7 	.word	0x00021ab7

0001304c <bt_hci_cmd_send_sync>:
{
   1304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13050:	4607      	mov	r7, r0
   13052:	b086      	sub	sp, #24
   13054:	4615      	mov	r5, r2
	if (!buf) {
   13056:	460c      	mov	r4, r1
   13058:	b921      	cbnz	r1, 13064 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   1305a:	f7ff fe9b 	bl	12d94 <bt_hci_cmd_create>
		if (!buf) {
   1305e:	4604      	mov	r4, r0
   13060:	2800      	cmp	r0, #0
   13062:	d055      	beq.n	13110 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13064:	2201      	movs	r2, #1
   13066:	2100      	movs	r1, #0
   13068:	4668      	mov	r0, sp
   1306a:	f00c fee6 	bl	1fe3a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1306e:	4620      	mov	r0, r4
   13070:	f005 fe24 	bl	18cbc <net_buf_id>
   13074:	4e28      	ldr	r6, [pc, #160]	; (13118 <bt_hci_cmd_send_sync+0xcc>)
   13076:	230c      	movs	r3, #12
   13078:	fb03 6000 	mla	r0, r3, r0, r6
   1307c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   13080:	4620      	mov	r0, r4
   13082:	f00c fc62 	bl	1f94a <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   13086:	4825      	ldr	r0, [pc, #148]	; (1311c <bt_hci_cmd_send_sync+0xd0>)
   13088:	4621      	mov	r1, r4
   1308a:	f00c fc51 	bl	1f930 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1308e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13092:	2300      	movs	r3, #0
   13094:	4668      	mov	r0, sp
   13096:	f007 fba7 	bl	1a7e8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1309a:	4680      	mov	r8, r0
   1309c:	b180      	cbz	r0, 130c0 <bt_hci_cmd_send_sync+0x74>
   1309e:	4a20      	ldr	r2, [pc, #128]	; (13120 <bt_hci_cmd_send_sync+0xd4>)
   130a0:	4920      	ldr	r1, [pc, #128]	; (13124 <bt_hci_cmd_send_sync+0xd8>)
   130a2:	4821      	ldr	r0, [pc, #132]	; (13128 <bt_hci_cmd_send_sync+0xdc>)
   130a4:	f240 1333 	movw	r3, #307	; 0x133
   130a8:	f008 fc25 	bl	1b8f6 <printk>
   130ac:	481f      	ldr	r0, [pc, #124]	; (1312c <bt_hci_cmd_send_sync+0xe0>)
   130ae:	4641      	mov	r1, r8
   130b0:	f008 fc21 	bl	1b8f6 <printk>
   130b4:	4040      	eors	r0, r0
   130b6:	f380 8811 	msr	BASEPRI, r0
   130ba:	f04f 0003 	mov.w	r0, #3
   130be:	df02      	svc	2
	status = cmd(buf)->status;
   130c0:	4620      	mov	r0, r4
   130c2:	f005 fdfb 	bl	18cbc <net_buf_id>
   130c6:	230c      	movs	r3, #12
   130c8:	4343      	muls	r3, r0
   130ca:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   130cc:	b1be      	cbz	r6, 130fe <bt_hci_cmd_send_sync+0xb2>
   130ce:	4a18      	ldr	r2, [pc, #96]	; (13130 <bt_hci_cmd_send_sync+0xe4>)
   130d0:	4b18      	ldr	r3, [pc, #96]	; (13134 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   130d2:	4819      	ldr	r0, [pc, #100]	; (13138 <bt_hci_cmd_send_sync+0xec>)
   130d4:	1a9b      	subs	r3, r3, r2
   130d6:	08db      	lsrs	r3, r3, #3
   130d8:	019b      	lsls	r3, r3, #6
   130da:	f043 0302 	orr.w	r3, r3, #2
   130de:	4632      	mov	r2, r6
   130e0:	4639      	mov	r1, r7
   130e2:	f009 f86e 	bl	1c1c2 <log_2>
		net_buf_unref(buf);
   130e6:	4620      	mov	r0, r4
   130e8:	f005 fe9c 	bl	18e24 <net_buf_unref>
			return -EIO;
   130ec:	2e09      	cmp	r6, #9
   130ee:	bf0c      	ite	eq
   130f0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   130f4:	f06f 0004 	mvnne.w	r0, #4
}
   130f8:	b006      	add	sp, #24
   130fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   130fe:	b115      	cbz	r5, 13106 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   13100:	602c      	str	r4, [r5, #0]
	return 0;
   13102:	4630      	mov	r0, r6
   13104:	e7f8      	b.n	130f8 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   13106:	4620      	mov	r0, r4
   13108:	f005 fe8c 	bl	18e24 <net_buf_unref>
	return 0;
   1310c:	4628      	mov	r0, r5
   1310e:	e7f3      	b.n	130f8 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   13110:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13114:	e7f0      	b.n	130f8 <bt_hci_cmd_send_sync+0xac>
   13116:	bf00      	nop
   13118:	20001e30 	.word	0x20001e30
   1311c:	200003c4 	.word	0x200003c4
   13120:	00021bf3 	.word	0x00021bf3
   13124:	00021d18 	.word	0x00021d18
   13128:	00021c40 	.word	0x00021c40
   1312c:	00021db0 	.word	0x00021db0
   13130:	00020854 	.word	0x00020854
   13134:	00020894 	.word	0x00020894
   13138:	00021dd0 	.word	0x00021dd0

0001313c <hci_le_read_max_data_len>:
{
   1313c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1313e:	4606      	mov	r6, r0
   13140:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   13142:	aa01      	add	r2, sp, #4
   13144:	2100      	movs	r1, #0
   13146:	f242 002f 	movw	r0, #8239	; 0x202f
   1314a:	f7ff ff7f 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   1314e:	4604      	mov	r4, r0
   13150:	b160      	cbz	r0, 1316c <hci_le_read_max_data_len+0x30>
   13152:	490c      	ldr	r1, [pc, #48]	; (13184 <hci_le_read_max_data_len+0x48>)
   13154:	4b0c      	ldr	r3, [pc, #48]	; (13188 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   13156:	480d      	ldr	r0, [pc, #52]	; (1318c <hci_le_read_max_data_len+0x50>)
   13158:	1ac9      	subs	r1, r1, r3
   1315a:	08c9      	lsrs	r1, r1, #3
   1315c:	0189      	lsls	r1, r1, #6
   1315e:	f041 0101 	orr.w	r1, r1, #1
   13162:	f009 f80d 	bl	1c180 <log_0>
}
   13166:	4620      	mov	r0, r4
   13168:	b002      	add	sp, #8
   1316a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1316c:	9801      	ldr	r0, [sp, #4]
   1316e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   13170:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   13174:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   13176:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1317a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1317c:	f005 fe52 	bl	18e24 <net_buf_unref>
	return 0;
   13180:	e7f1      	b.n	13166 <hci_le_read_max_data_len+0x2a>
   13182:	bf00      	nop
   13184:	00020894 	.word	0x00020894
   13188:	00020854 	.word	0x00020854
   1318c:	00021dec 	.word	0x00021dec

00013190 <conn_auto_initiate>:
{
   13190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   13192:	7b43      	ldrb	r3, [r0, #13]
   13194:	2b07      	cmp	r3, #7
{
   13196:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13198:	d121      	bne.n	131de <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1319a:	f3bf 8f5b 	dmb	ish
   1319e:	6843      	ldr	r3, [r0, #4]
   131a0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   131a4:	049b      	lsls	r3, r3, #18
   131a6:	f100 0604 	add.w	r6, r0, #4
   131aa:	d41a      	bmi.n	131e2 <conn_auto_initiate+0x52>
   131ac:	78c3      	ldrb	r3, [r0, #3]
   131ae:	b123      	cbz	r3, 131ba <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   131b0:	4b35      	ldr	r3, [pc, #212]	; (13288 <conn_auto_initiate+0xf8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   131b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   131b6:	071d      	lsls	r5, r3, #28
   131b8:	d513      	bpl.n	131e2 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   131ba:	2102      	movs	r1, #2
   131bc:	f242 0016 	movw	r0, #8214	; 0x2016
   131c0:	f7ff fde8 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   131c4:	4605      	mov	r5, r0
   131c6:	b160      	cbz	r0, 131e2 <conn_auto_initiate+0x52>
   131c8:	2102      	movs	r1, #2
   131ca:	3008      	adds	r0, #8
   131cc:	f00c fbe3 	bl	1f996 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   131d0:	8823      	ldrh	r3, [r4, #0]
   131d2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   131d4:	4629      	mov	r1, r5
   131d6:	f242 0016 	movw	r0, #8214	; 0x2016
   131da:	f7ff fe13 	bl	12e04 <bt_hci_cmd_send>
}
   131de:	b004      	add	sp, #16
   131e0:	bd70      	pop	{r4, r5, r6, pc}
   131e2:	f3bf 8f5b 	dmb	ish
   131e6:	6863      	ldr	r3, [r4, #4]
   131e8:	4d27      	ldr	r5, [pc, #156]	; (13288 <conn_auto_initiate+0xf8>)
   131ea:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   131ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   131f2:	f3c3 3100 	ubfx	r1, r3, #12, #1
   131f6:	d122      	bne.n	1323e <conn_auto_initiate+0xae>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   131f8:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   131fc:	07d8      	lsls	r0, r3, #31
   131fe:	d51e      	bpl.n	1323e <conn_auto_initiate+0xae>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   13200:	2302      	movs	r3, #2
   13202:	9100      	str	r1, [sp, #0]
   13204:	461a      	mov	r2, r3
   13206:	4620      	mov	r0, r4
   13208:	f00a fc88 	bl	1db1c <bt_le_set_phy>
		if (!err) {
   1320c:	4601      	mov	r1, r0
   1320e:	b960      	cbnz	r0, 1322a <conn_auto_initiate+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13210:	f3bf 8f5b 	dmb	ish
   13214:	e856 3f00 	ldrex	r3, [r6]
   13218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1321c:	e846 3200 	strex	r2, r3, [r6]
   13220:	2a00      	cmp	r2, #0
   13222:	d1f7      	bne.n	13214 <conn_auto_initiate+0x84>
   13224:	f3bf 8f5b 	dmb	ish
			return;
   13228:	e7d9      	b.n	131de <conn_auto_initiate+0x4e>
   1322a:	4a18      	ldr	r2, [pc, #96]	; (1328c <conn_auto_initiate+0xfc>)
   1322c:	4b18      	ldr	r3, [pc, #96]	; (13290 <conn_auto_initiate+0x100>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   1322e:	4819      	ldr	r0, [pc, #100]	; (13294 <conn_auto_initiate+0x104>)
   13230:	1ad2      	subs	r2, r2, r3
   13232:	08d2      	lsrs	r2, r2, #3
   13234:	0192      	lsls	r2, r2, #6
   13236:	f042 0201 	orr.w	r2, r2, #1
   1323a:	f008 ffae 	bl	1c19a <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1323e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   13242:	069a      	lsls	r2, r3, #26
   13244:	d5cb      	bpl.n	131de <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   13246:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   1324a:	689b      	ldr	r3, [r3, #8]
   1324c:	079b      	lsls	r3, r3, #30
   1324e:	d5c6      	bpl.n	131de <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   13250:	f10d 010e 	add.w	r1, sp, #14
   13254:	a803      	add	r0, sp, #12
   13256:	f7ff ff71 	bl	1313c <hci_le_read_max_data_len>
			if (!err) {
   1325a:	2800      	cmp	r0, #0
   1325c:	d1bf      	bne.n	131de <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   1325e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   13262:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   13266:	4620      	mov	r0, r4
   13268:	f00a fc3b 	bl	1dae2 <bt_le_set_data_len>
				if (err) {
   1326c:	4601      	mov	r1, r0
   1326e:	2800      	cmp	r0, #0
   13270:	d0b5      	beq.n	131de <conn_auto_initiate+0x4e>
   13272:	4b07      	ldr	r3, [pc, #28]	; (13290 <conn_auto_initiate+0x100>)
   13274:	4a05      	ldr	r2, [pc, #20]	; (1328c <conn_auto_initiate+0xfc>)
					BT_ERR("Failed to set data len (%d)", err);
   13276:	4808      	ldr	r0, [pc, #32]	; (13298 <conn_auto_initiate+0x108>)
   13278:	1ad2      	subs	r2, r2, r3
   1327a:	08d2      	lsrs	r2, r2, #3
   1327c:	0192      	lsls	r2, r2, #6
   1327e:	f042 0201 	orr.w	r2, r2, #1
   13282:	f008 ff8a 	bl	1c19a <log_1>
		}
   13286:	e7aa      	b.n	131de <conn_auto_initiate+0x4e>
   13288:	200002a0 	.word	0x200002a0
   1328c:	00020894 	.word	0x00020894
   13290:	00020854 	.word	0x00020854
   13294:	00021f04 	.word	0x00021f04
   13298:	00021f1e 	.word	0x00021f1e

0001329c <le_phy_update_complete>:
{
   1329c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1329e:	6883      	ldr	r3, [r0, #8]
   132a0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   132a4:	4628      	mov	r0, r5
   132a6:	f001 fd8f 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   132aa:	4604      	mov	r4, r0
   132ac:	b960      	cbnz	r0, 132c8 <le_phy_update_complete+0x2c>
   132ae:	4b17      	ldr	r3, [pc, #92]	; (1330c <le_phy_update_complete+0x70>)
   132b0:	4a17      	ldr	r2, [pc, #92]	; (13310 <le_phy_update_complete+0x74>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   132b2:	4818      	ldr	r0, [pc, #96]	; (13314 <le_phy_update_complete+0x78>)
   132b4:	1ad2      	subs	r2, r2, r3
   132b6:	08d2      	lsrs	r2, r2, #3
   132b8:	0192      	lsls	r2, r2, #6
   132ba:	4629      	mov	r1, r5
   132bc:	f042 0201 	orr.w	r2, r2, #1
}
   132c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   132c4:	f008 bf69 	b.w	1c19a <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   132c8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   132ca:	f3bf 8f5b 	dmb	ish
   132ce:	e853 2f00 	ldrex	r2, [r3]
   132d2:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   132d6:	e843 1500 	strex	r5, r1, [r3]
   132da:	2d00      	cmp	r5, #0
   132dc:	d1f7      	bne.n	132ce <le_phy_update_complete+0x32>
   132de:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   132e2:	0612      	lsls	r2, r2, #24
   132e4:	d50d      	bpl.n	13302 <le_phy_update_complete+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   132e6:	f3bf 8f5b 	dmb	ish
   132ea:	e853 2f00 	ldrex	r2, [r3]
   132ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   132f2:	e843 2100 	strex	r1, r2, [r3]
   132f6:	2900      	cmp	r1, #0
   132f8:	d1f7      	bne.n	132ea <le_phy_update_complete+0x4e>
   132fa:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   132fe:	f7ff ff47 	bl	13190 <conn_auto_initiate>
	bt_conn_unref(conn);
   13302:	4620      	mov	r0, r4
}
   13304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13308:	f00a bf0a 	b.w	1e120 <bt_conn_unref>
   1330c:	00020854 	.word	0x00020854
   13310:	00020894 	.word	0x00020894
   13314:	00021ab7 	.word	0x00021ab7

00013318 <le_remote_feat_complete>:
{
   13318:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1331a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1331c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   13320:	4630      	mov	r0, r6
   13322:	f001 fd51 	bl	14dc8 <bt_conn_lookup_handle>
	if (!conn) {
   13326:	4604      	mov	r4, r0
   13328:	b960      	cbnz	r0, 13344 <le_remote_feat_complete+0x2c>
   1332a:	4a14      	ldr	r2, [pc, #80]	; (1337c <le_remote_feat_complete+0x64>)
   1332c:	4b14      	ldr	r3, [pc, #80]	; (13380 <le_remote_feat_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1332e:	4815      	ldr	r0, [pc, #84]	; (13384 <le_remote_feat_complete+0x6c>)
   13330:	1ad2      	subs	r2, r2, r3
   13332:	08d2      	lsrs	r2, r2, #3
   13334:	0192      	lsls	r2, r2, #6
   13336:	4631      	mov	r1, r6
   13338:	f042 0201 	orr.w	r2, r2, #1
}
   1333c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13340:	f008 bf2b 	b.w	1c19a <log_1>
	if (!evt->status) {
   13344:	782b      	ldrb	r3, [r5, #0]
   13346:	b923      	cbnz	r3, 13352 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   13348:	2208      	movs	r2, #8
   1334a:	1ce9      	adds	r1, r5, #3
   1334c:	30ac      	adds	r0, #172	; 0xac
   1334e:	f00a fa33 	bl	1d7b8 <memcpy>
   13352:	f3bf 8f5b 	dmb	ish
   13356:	1d23      	adds	r3, r4, #4
   13358:	e853 2f00 	ldrex	r2, [r3]
   1335c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13360:	e843 2100 	strex	r1, r2, [r3]
   13364:	2900      	cmp	r1, #0
   13366:	d1f7      	bne.n	13358 <le_remote_feat_complete+0x40>
   13368:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1336c:	4620      	mov	r0, r4
   1336e:	f7ff ff0f 	bl	13190 <conn_auto_initiate>
	bt_conn_unref(conn);
   13372:	4620      	mov	r0, r4
}
   13374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   13378:	f00a bed2 	b.w	1e120 <bt_conn_unref>
   1337c:	00020894 	.word	0x00020894
   13380:	00020854 	.word	0x00020854
   13384:	00021ab7 	.word	0x00021ab7

00013388 <bt_hci_le_enh_conn_complete>:
{
   13388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1338c:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   13390:	4a7c      	ldr	r2, [pc, #496]	; (13584 <bt_hci_le_enh_conn_complete+0x1fc>)
	handle |= ~BT_ACL_HANDLE_MASK;
   13392:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   13396:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   13398:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   1339c:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   1339e:	b29b      	uxth	r3, r3
   133a0:	4299      	cmp	r1, r3
   133a2:	f04f 0800 	mov.w	r8, #0
{
   133a6:	b085      	sub	sp, #20
			disconnected_handles[i] = 0;
   133a8:	bf04      	itt	eq
   133aa:	f8a2 8000 	strheq.w	r8, [r2]
			return true;
   133ae:	f04f 0801 	moveq.w	r8, #1
	bt_id_pending_keys_update();
   133b2:	f000 fb39 	bl	13a28 <bt_id_pending_keys_update>
	if (evt->status) {
   133b6:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   133b8:	fa1f f789 	uxth.w	r7, r9
	if (evt->status) {
   133bc:	b3b4      	cbz	r4, 1342c <bt_hci_le_enh_conn_complete+0xa4>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   133be:	2c3c      	cmp	r4, #60	; 0x3c
   133c0:	d128      	bne.n	13414 <bt_hci_le_enh_conn_complete+0x8c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   133c2:	f000 ff7b 	bl	142bc <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133c6:	f3bf 8f5b 	dmb	ish
   133ca:	3010      	adds	r0, #16
   133cc:	e850 3f00 	ldrex	r3, [r0]
   133d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   133d4:	e840 3200 	strex	r2, r3, [r0]
   133d8:	2a00      	cmp	r2, #0
   133da:	d1f7      	bne.n	133cc <bt_hci_le_enh_conn_complete+0x44>
   133dc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   133e0:	2000      	movs	r0, #0
   133e2:	f7ff f951 	bl	12688 <find_pending_connect.part.0>
		if (!conn) {
   133e6:	4605      	mov	r5, r0
   133e8:	b960      	cbnz	r0, 13404 <bt_hci_le_enh_conn_complete+0x7c>
   133ea:	4967      	ldr	r1, [pc, #412]	; (13588 <bt_hci_le_enh_conn_complete+0x200>)
   133ec:	4b67      	ldr	r3, [pc, #412]	; (1358c <bt_hci_le_enh_conn_complete+0x204>)
			BT_ERR("No pending slave connection");
   133ee:	4868      	ldr	r0, [pc, #416]	; (13590 <bt_hci_le_enh_conn_complete+0x208>)
   133f0:	1ac9      	subs	r1, r1, r3
   133f2:	08c9      	lsrs	r1, r1, #3
   133f4:	0189      	lsls	r1, r1, #6
   133f6:	f041 0101 	orr.w	r1, r1, #1
   133fa:	f008 fec1 	bl	1c180 <log_0>
}
   133fe:	b005      	add	sp, #20
   13400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   13404:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13406:	2100      	movs	r1, #0
   13408:	f001 fcea 	bl	14de0 <bt_conn_set_state>
		bt_conn_unref(conn);
   1340c:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   1340e:	f00a fe87 	bl	1e120 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13412:	e7f4      	b.n	133fe <bt_hci_le_enh_conn_complete+0x76>
   13414:	4b5d      	ldr	r3, [pc, #372]	; (1358c <bt_hci_le_enh_conn_complete+0x204>)
   13416:	4a5c      	ldr	r2, [pc, #368]	; (13588 <bt_hci_le_enh_conn_complete+0x200>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   13418:	485e      	ldr	r0, [pc, #376]	; (13594 <bt_hci_le_enh_conn_complete+0x20c>)
   1341a:	1ad2      	subs	r2, r2, r3
   1341c:	08d2      	lsrs	r2, r2, #3
   1341e:	0192      	lsls	r2, r2, #6
   13420:	f042 0202 	orr.w	r2, r2, #2
   13424:	4621      	mov	r1, r4
   13426:	f008 feb8 	bl	1c19a <log_1>
		return;
   1342a:	e7e8      	b.n	133fe <bt_hci_le_enh_conn_complete+0x76>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1342c:	792b      	ldrb	r3, [r5, #4]
   1342e:	3b02      	subs	r3, #2
   13430:	2b01      	cmp	r3, #1
   13432:	f105 0604 	add.w	r6, r5, #4
   13436:	d843      	bhi.n	134c0 <bt_hci_le_enh_conn_complete+0x138>
	memcpy(dst, src, sizeof(*dst));
   13438:	2207      	movs	r2, #7
   1343a:	4631      	mov	r1, r6
   1343c:	a802      	add	r0, sp, #8
   1343e:	f00a f9bb 	bl	1d7b8 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13442:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   13446:	2206      	movs	r2, #6
   13448:	3b02      	subs	r3, #2
   1344a:	f105 0111 	add.w	r1, r5, #17
   1344e:	f10d 0001 	add.w	r0, sp, #1
   13452:	f88d 3008 	strb.w	r3, [sp, #8]
   13456:	f00a f9af 	bl	1d7b8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1345a:	2301      	movs	r3, #1
   1345c:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   13460:	78eb      	ldrb	r3, [r5, #3]
   13462:	2b01      	cmp	r3, #1
   13464:	d116      	bne.n	13494 <bt_hci_le_enh_conn_complete+0x10c>
   13466:	a802      	add	r0, sp, #8
   13468:	f7ff f90e 	bl	12688 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1346c:	78eb      	ldrb	r3, [r5, #3]
   1346e:	2b01      	cmp	r3, #1
   13470:	4604      	mov	r4, r0
   13472:	d10e      	bne.n	13492 <bt_hci_le_enh_conn_complete+0x10a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13474:	f000 ff22 	bl	142bc <bt_le_adv_lookup_legacy>
   13478:	f3bf 8f5b 	dmb	ish
   1347c:	3010      	adds	r0, #16
   1347e:	e850 3f00 	ldrex	r3, [r0]
   13482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13486:	e840 3200 	strex	r2, r3, [r0]
   1348a:	2a00      	cmp	r2, #0
   1348c:	d1f7      	bne.n	1347e <bt_hci_le_enh_conn_complete+0xf6>
   1348e:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   13492:	bb54      	cbnz	r4, 134ea <bt_hci_le_enh_conn_complete+0x162>
   13494:	4a3d      	ldr	r2, [pc, #244]	; (1358c <bt_hci_le_enh_conn_complete+0x204>)
   13496:	4c3c      	ldr	r4, [pc, #240]	; (13588 <bt_hci_le_enh_conn_complete+0x200>)
		BT_ERR("No pending conn for peer %s",
   13498:	4630      	mov	r0, r6
   1349a:	1aa4      	subs	r4, r4, r2
   1349c:	f7fe fcde 	bl	11e5c <bt_addr_le_str_real>
   134a0:	f7fd f85c 	bl	1055c <z_log_strdup>
   134a4:	08e4      	lsrs	r4, r4, #3
   134a6:	01a4      	lsls	r4, r4, #6
   134a8:	f044 0401 	orr.w	r4, r4, #1
   134ac:	4601      	mov	r1, r0
   134ae:	4622      	mov	r2, r4
   134b0:	4839      	ldr	r0, [pc, #228]	; (13598 <bt_hci_le_enh_conn_complete+0x210>)
   134b2:	f008 fe72 	bl	1c19a <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   134b6:	211f      	movs	r1, #31
   134b8:	4638      	mov	r0, r7
   134ba:	f00a faf7 	bl	1daac <bt_hci_disconnect>
		return;
   134be:	e79e      	b.n	133fe <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   134c0:	78eb      	ldrb	r3, [r5, #3]
   134c2:	2b01      	cmp	r3, #1
   134c4:	bf04      	itt	eq
   134c6:	4b35      	ldreq	r3, [pc, #212]	; (1359c <bt_hci_le_enh_conn_complete+0x214>)
   134c8:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   134cc:	4631      	mov	r1, r6
   134ce:	4620      	mov	r0, r4
   134d0:	f00a fc2b 	bl	1dd2a <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   134d4:	2207      	movs	r2, #7
   134d6:	4601      	mov	r1, r0
   134d8:	a802      	add	r0, sp, #8
   134da:	f00a f96d 	bl	1d7b8 <memcpy>
   134de:	2207      	movs	r2, #7
   134e0:	4631      	mov	r1, r6
   134e2:	4668      	mov	r0, sp
   134e4:	f00a f968 	bl	1d7b8 <memcpy>
}
   134e8:	e7ba      	b.n	13460 <bt_hci_le_enh_conn_complete+0xd8>
	conn->handle = handle;
   134ea:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   134ec:	2207      	movs	r2, #7
   134ee:	f820 9b88 	strh.w	r9, [r0], #136
   134f2:	a902      	add	r1, sp, #8
   134f4:	f00a f960 	bl	1d7b8 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   134f8:	7e2a      	ldrb	r2, [r5, #24]
   134fa:	7deb      	ldrb	r3, [r5, #23]
   134fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13500:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   13504:	7eaa      	ldrb	r2, [r5, #26]
   13506:	7e6b      	ldrb	r3, [r5, #25]
   13508:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1350c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13510:	7eeb      	ldrb	r3, [r5, #27]
   13512:	7f2a      	ldrb	r2, [r5, #28]
   13514:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13518:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1351c:	78eb      	ldrb	r3, [r5, #3]
   1351e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   13520:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13522:	2b01      	cmp	r3, #1
	conn->err = 0U;
   13524:	7325      	strb	r5, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13526:	d11a      	bne.n	1355e <bt_hci_le_enh_conn_complete+0x1d6>
   13528:	2207      	movs	r2, #7
   1352a:	4669      	mov	r1, sp
   1352c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   13530:	f00a f942 	bl	1d7b8 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13534:	f000 fec2 	bl	142bc <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   13538:	7a21      	ldrb	r1, [r4, #8]
   1353a:	4e18      	ldr	r6, [pc, #96]	; (1359c <bt_hci_le_enh_conn_complete+0x214>)
   1353c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   13540:	2207      	movs	r2, #7
   13542:	4431      	add	r1, r6
   13544:	f104 0096 	add.w	r0, r4, #150	; 0x96
   13548:	f00a f936 	bl	1d7b8 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   1354c:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   13550:	462a      	mov	r2, r5
   13552:	f001 0340 	and.w	r3, r1, #64	; 0x40
   13556:	4313      	orrs	r3, r2
   13558:	d001      	beq.n	1355e <bt_hci_le_enh_conn_complete+0x1d6>
			bt_le_adv_resume();
   1355a:	f000 fff3 	bl	14544 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1355e:	2107      	movs	r1, #7
   13560:	4620      	mov	r0, r4
   13562:	f001 fc3d 	bl	14de0 <bt_conn_set_state>
	if (is_disconnected) {
   13566:	f1b8 0f00 	cmp.w	r8, #0
   1356a:	d003      	beq.n	13574 <bt_hci_le_enh_conn_complete+0x1ec>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1356c:	2101      	movs	r1, #1
   1356e:	4620      	mov	r0, r4
   13570:	f001 fc36 	bl	14de0 <bt_conn_set_state>
	bt_conn_connected(conn);
   13574:	4620      	mov	r0, r4
   13576:	f00a fd8f 	bl	1e098 <bt_conn_connected>
	conn_auto_initiate(conn);
   1357a:	4620      	mov	r0, r4
   1357c:	f7ff fe08 	bl	13190 <conn_auto_initiate>
	bt_conn_unref(conn);
   13580:	4620      	mov	r0, r4
   13582:	e744      	b.n	1340e <bt_hci_le_enh_conn_complete+0x86>
   13584:	20002034 	.word	0x20002034
   13588:	00020894 	.word	0x00020894
   1358c:	00020854 	.word	0x00020854
   13590:	00021f3a 	.word	0x00021f3a
   13594:	00021f56 	.word	0x00021f56
   13598:	00021f6f 	.word	0x00021f6f
   1359c:	200002a0 	.word	0x200002a0

000135a0 <bt_security_err_get>:
	switch (hci_err) {
   135a0:	2829      	cmp	r0, #41	; 0x29
   135a2:	bf9a      	itte	ls
   135a4:	4b01      	ldrls	r3, [pc, #4]	; (135ac <bt_security_err_get+0xc>)
   135a6:	5c18      	ldrbls	r0, [r3, r0]
{
   135a8:	2008      	movhi	r0, #8
}
   135aa:	4770      	bx	lr
   135ac:	00022089 	.word	0x00022089

000135b0 <hci_event_prio>:
{
   135b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135b4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   135b6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   135ba:	4630      	mov	r0, r6
   135bc:	f00c fa22 	bl	1fa04 <net_buf_simple_headroom>
	state->len = buf->len;
   135c0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   135c4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   135c8:	4605      	mov	r5, r0
   135ca:	d80c      	bhi.n	135e6 <hci_event_prio+0x36>
   135cc:	4a1c      	ldr	r2, [pc, #112]	; (13640 <hci_event_prio+0x90>)
   135ce:	491d      	ldr	r1, [pc, #116]	; (13644 <hci_event_prio+0x94>)
   135d0:	481d      	ldr	r0, [pc, #116]	; (13648 <hci_event_prio+0x98>)
   135d2:	f640 43dc 	movw	r3, #3292	; 0xcdc
   135d6:	f008 f98e 	bl	1b8f6 <printk>
   135da:	4040      	eors	r0, r0
   135dc:	f380 8811 	msr	BASEPRI, r0
   135e0:	f04f 0003 	mov.w	r0, #3
   135e4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   135e6:	2102      	movs	r1, #2
   135e8:	4630      	mov	r0, r6
   135ea:	f00c f9fb 	bl	1f9e4 <net_buf_simple_pull_mem>
   135ee:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   135f0:	7800      	ldrb	r0, [r0, #0]
   135f2:	f00a fa21 	bl	1da38 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   135f6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   135f8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   135fa:	d40c      	bmi.n	13616 <hci_event_prio+0x66>
   135fc:	4a10      	ldr	r2, [pc, #64]	; (13640 <hci_event_prio+0x90>)
   135fe:	4913      	ldr	r1, [pc, #76]	; (1364c <hci_event_prio+0x9c>)
   13600:	4811      	ldr	r0, [pc, #68]	; (13648 <hci_event_prio+0x98>)
   13602:	f44f 634e 	mov.w	r3, #3296	; 0xce0
   13606:	f008 f976 	bl	1b8f6 <printk>
   1360a:	4040      	eors	r0, r0
   1360c:	f380 8811 	msr	BASEPRI, r0
   13610:	f04f 0003 	mov.w	r0, #3
   13614:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   13616:	2305      	movs	r3, #5
   13618:	4a0d      	ldr	r2, [pc, #52]	; (13650 <hci_event_prio+0xa0>)
   1361a:	7838      	ldrb	r0, [r7, #0]
   1361c:	4621      	mov	r1, r4
   1361e:	f7ff f8e9 	bl	127f4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13622:	07b3      	lsls	r3, r6, #30
   13624:	d507      	bpl.n	13636 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   13626:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   13628:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1362c:	fa10 f585 	uxtah	r5, r0, r5
   13630:	60a5      	str	r5, [r4, #8]
}
   13632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   13636:	4620      	mov	r0, r4
}
   13638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1363c:	f005 bbf2 	b.w	18e24 <net_buf_unref>
   13640:	00021bf3 	.word	0x00021bf3
   13644:	00021c27 	.word	0x00021c27
   13648:	00021c40 	.word	0x00021c40
   1364c:	00021f8b 	.word	0x00021f8b
   13650:	00020df0 	.word	0x00020df0

00013654 <bt_recv>:
{
   13654:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13656:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   13658:	2901      	cmp	r1, #1
{
   1365a:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1365c:	d007      	beq.n	1366e <bt_recv+0x1a>
   1365e:	2903      	cmp	r1, #3
   13660:	d113      	bne.n	1368a <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   13662:	4812      	ldr	r0, [pc, #72]	; (136ac <bt_recv+0x58>)
   13664:	4629      	mov	r1, r5
   13666:	f00c f963 	bl	1f930 <net_buf_put>
		return 0;
   1366a:	2000      	movs	r0, #0
   1366c:	e00c      	b.n	13688 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1366e:	6883      	ldr	r3, [r0, #8]
   13670:	7818      	ldrb	r0, [r3, #0]
   13672:	f00a f9e1 	bl	1da38 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13676:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13678:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1367a:	d502      	bpl.n	13682 <bt_recv+0x2e>
			hci_event_prio(buf);
   1367c:	4628      	mov	r0, r5
   1367e:	f7ff ff97 	bl	135b0 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13682:	f014 0002 	ands.w	r0, r4, #2
   13686:	d1ec      	bne.n	13662 <bt_recv+0xe>
}
   13688:	bd38      	pop	{r3, r4, r5, pc}
   1368a:	4b09      	ldr	r3, [pc, #36]	; (136b0 <bt_recv+0x5c>)
   1368c:	4a09      	ldr	r2, [pc, #36]	; (136b4 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1368e:	480a      	ldr	r0, [pc, #40]	; (136b8 <bt_recv+0x64>)
   13690:	1ad2      	subs	r2, r2, r3
   13692:	08d2      	lsrs	r2, r2, #3
   13694:	0192      	lsls	r2, r2, #6
   13696:	f042 0201 	orr.w	r2, r2, #1
   1369a:	f008 fd7e 	bl	1c19a <log_1>
		net_buf_unref(buf);
   1369e:	4628      	mov	r0, r5
   136a0:	f005 fbc0 	bl	18e24 <net_buf_unref>
		return -EINVAL;
   136a4:	f06f 0015 	mvn.w	r0, #21
   136a8:	e7ee      	b.n	13688 <bt_recv+0x34>
   136aa:	bf00      	nop
   136ac:	200003ac 	.word	0x200003ac
   136b0:	00020854 	.word	0x00020854
   136b4:	00020894 	.word	0x00020894
   136b8:	00021fa4 	.word	0x00021fa4

000136bc <bt_hci_driver_register>:
	if (bt_dev.drv) {
   136bc:	4a08      	ldr	r2, [pc, #32]	; (136e0 <bt_hci_driver_register+0x24>)
{
   136be:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   136c0:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   136c4:	b930      	cbnz	r0, 136d4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   136c6:	68d9      	ldr	r1, [r3, #12]
   136c8:	b139      	cbz	r1, 136da <bt_hci_driver_register+0x1e>
   136ca:	6919      	ldr	r1, [r3, #16]
   136cc:	b129      	cbz	r1, 136da <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   136ce:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   136d2:	4770      	bx	lr
		return -EALREADY;
   136d4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   136d8:	4770      	bx	lr
		return -EINVAL;
   136da:	f06f 0015 	mvn.w	r0, #21
}
   136de:	4770      	bx	lr
   136e0:	200002a0 	.word	0x200002a0

000136e4 <bt_finalize_init>:
{
   136e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   136e8:	4c30      	ldr	r4, [pc, #192]	; (137ac <bt_finalize_init+0xc8>)
   136ea:	f3bf 8f5b 	dmb	ish
   136ee:	b087      	sub	sp, #28
   136f0:	f104 0398 	add.w	r3, r4, #152	; 0x98
   136f4:	e853 2f00 	ldrex	r2, [r3]
   136f8:	f042 0202 	orr.w	r2, r2, #2
   136fc:	e843 2100 	strex	r1, r2, [r3]
   13700:	2900      	cmp	r1, #0
   13702:	d1f7      	bne.n	136f4 <bt_finalize_init+0x10>
   13704:	f3bf 8f5b 	dmb	ish
   13708:	4b29      	ldr	r3, [pc, #164]	; (137b0 <bt_finalize_init+0xcc>)
   1370a:	4d2a      	ldr	r5, [pc, #168]	; (137b4 <bt_finalize_init+0xd0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1370c:	492a      	ldr	r1, [pc, #168]	; (137b8 <bt_finalize_init+0xd4>)
   1370e:	4e2b      	ldr	r6, [pc, #172]	; (137bc <bt_finalize_init+0xd8>)
		BT_INFO("Identity[%d]: %s",
   13710:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 137cc <bt_finalize_init+0xe8>
   13714:	1aed      	subs	r5, r5, r3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   13716:	79e3      	ldrb	r3, [r4, #7]
   13718:	4620      	mov	r0, r4
   1371a:	2b01      	cmp	r3, #1
   1371c:	bf88      	it	hi
   1371e:	460e      	movhi	r6, r1
   13720:	f7fe fb9c 	bl	11e5c <bt_addr_le_str_real>
   13724:	f7fc ff1a 	bl	1055c <z_log_strdup>
   13728:	08ed      	lsrs	r5, r5, #3
   1372a:	01ad      	lsls	r5, r5, #6
   1372c:	f045 0703 	orr.w	r7, r5, #3
   13730:	4602      	mov	r2, r0
   13732:	4631      	mov	r1, r6
   13734:	4822      	ldr	r0, [pc, #136]	; (137c0 <bt_finalize_init+0xdc>)
   13736:	463b      	mov	r3, r7
   13738:	f008 fd43 	bl	1c1c2 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   1373c:	46a0      	mov	r8, r4
   1373e:	2601      	movs	r6, #1
   13740:	79e3      	ldrb	r3, [r4, #7]
   13742:	429e      	cmp	r6, r3
   13744:	f108 0807 	add.w	r8, r8, #7
   13748:	db22      	blt.n	13790 <bt_finalize_init+0xac>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   1374a:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
   1374e:	4630      	mov	r0, r6
   13750:	f7fe fe2c 	bl	123ac <ver_str>
   13754:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   13756:	9304      	str	r3, [sp, #16]
   13758:	f045 0503 	orr.w	r5, r5, #3
   1375c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   1375e:	9305      	str	r3, [sp, #20]
   13760:	e9cd 0602 	strd	r0, r6, [sp, #8]
   13764:	462b      	mov	r3, r5
   13766:	a902      	add	r1, sp, #8
   13768:	2204      	movs	r2, #4
   1376a:	4816      	ldr	r0, [pc, #88]	; (137c4 <bt_finalize_init+0xe0>)
   1376c:	f008 fd5e 	bl	1c22c <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   13770:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
   13774:	4630      	mov	r0, r6
   13776:	f7fe fe19 	bl	123ac <ver_str>
   1377a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1377c:	f8ad 5000 	strh.w	r5, [sp]
   13780:	4601      	mov	r1, r0
   13782:	4632      	mov	r2, r6
   13784:	4810      	ldr	r0, [pc, #64]	; (137c8 <bt_finalize_init+0xe4>)
   13786:	f008 fd35 	bl	1c1f4 <log_3>
}
   1378a:	b007      	add	sp, #28
   1378c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   13790:	4640      	mov	r0, r8
   13792:	f7fe fb63 	bl	11e5c <bt_addr_le_str_real>
   13796:	f7fc fee1 	bl	1055c <z_log_strdup>
   1379a:	4631      	mov	r1, r6
   1379c:	4602      	mov	r2, r0
   1379e:	463b      	mov	r3, r7
   137a0:	4648      	mov	r0, r9
   137a2:	f008 fd0e 	bl	1c1c2 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   137a6:	3601      	adds	r6, #1
   137a8:	e7ca      	b.n	13740 <bt_finalize_init+0x5c>
   137aa:	bf00      	nop
   137ac:	200002a0 	.word	0x200002a0
   137b0:	00020854 	.word	0x00020854
   137b4:	00020894 	.word	0x00020894
   137b8:	00021fb8 	.word	0x00021fb8
   137bc:	00021285 	.word	0x00021285
   137c0:	00021fbc 	.word	0x00021fbc
   137c4:	00021fdc 	.word	0x00021fdc
   137c8:	0002201a 	.word	0x0002201a
   137cc:	00021fcb 	.word	0x00021fcb

000137d0 <init_work>:
{
   137d0:	b510      	push	{r4, lr}
	err = hci_init();
   137d2:	f7fb fd4d 	bl	f270 <hci_init>
	if (err) {
   137d6:	4604      	mov	r4, r0
   137d8:	b928      	cbnz	r0, 137e6 <init_work+0x16>
		err = bt_conn_init();
   137da:	f001 fde5 	bl	153a8 <bt_conn_init>
		if (err) {
   137de:	4604      	mov	r4, r0
   137e0:	b908      	cbnz	r0, 137e6 <init_work+0x16>
	bt_finalize_init();
   137e2:	f7ff ff7f 	bl	136e4 <bt_finalize_init>
	if (ready_cb) {
   137e6:	4b04      	ldr	r3, [pc, #16]	; (137f8 <init_work+0x28>)
   137e8:	681b      	ldr	r3, [r3, #0]
   137ea:	b11b      	cbz	r3, 137f4 <init_work+0x24>
		ready_cb(err);
   137ec:	4620      	mov	r0, r4
}
   137ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   137f2:	4718      	bx	r3
}
   137f4:	bd10      	pop	{r4, pc}
   137f6:	bf00      	nop
   137f8:	20001e48 	.word	0x20001e48

000137fc <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   137fc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   13800:	4d3f      	ldr	r5, [pc, #252]	; (13900 <bt_enable+0x104>)
   13802:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   13806:	b088      	sub	sp, #32
   13808:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1380a:	b97b      	cbnz	r3, 1382c <bt_enable+0x30>
   1380c:	4b3d      	ldr	r3, [pc, #244]	; (13904 <bt_enable+0x108>)
   1380e:	493e      	ldr	r1, [pc, #248]	; (13908 <bt_enable+0x10c>)
		BT_ERR("No HCI driver registered");
   13810:	483e      	ldr	r0, [pc, #248]	; (1390c <bt_enable+0x110>)
   13812:	1ac9      	subs	r1, r1, r3
   13814:	08c9      	lsrs	r1, r1, #3
   13816:	0189      	lsls	r1, r1, #6
   13818:	f041 0101 	orr.w	r1, r1, #1
   1381c:	f008 fcb0 	bl	1c180 <log_0>
		return -ENODEV;
   13820:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   13824:	4620      	mov	r0, r4
   13826:	b008      	add	sp, #32
   13828:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1382c:	f105 0398 	add.w	r3, r5, #152	; 0x98
   13830:	f3bf 8f5b 	dmb	ish
   13834:	e853 4f00 	ldrex	r4, [r3]
   13838:	f044 0201 	orr.w	r2, r4, #1
   1383c:	e843 2100 	strex	r1, r2, [r3]
   13840:	2900      	cmp	r1, #0
   13842:	d1f7      	bne.n	13834 <bt_enable+0x38>
   13844:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13848:	f014 0401 	ands.w	r4, r4, #1
   1384c:	d154      	bne.n	138f8 <bt_enable+0xfc>
	ready_cb = cb;
   1384e:	4b30      	ldr	r3, [pc, #192]	; (13910 <bt_enable+0x114>)
   13850:	f04f 0800 	mov.w	r8, #0
   13854:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   13856:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1385a:	f06f 0308 	mvn.w	r3, #8
   1385e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13862:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13866:	e9cd 4400 	strd	r4, r4, [sp]
   1386a:	4b2a      	ldr	r3, [pc, #168]	; (13914 <bt_enable+0x118>)
   1386c:	492a      	ldr	r1, [pc, #168]	; (13918 <bt_enable+0x11c>)
   1386e:	9404      	str	r4, [sp, #16]
   13870:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   13874:	4829      	ldr	r0, [pc, #164]	; (1391c <bt_enable+0x120>)
   13876:	f006 fdff 	bl	1a478 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1387a:	4929      	ldr	r1, [pc, #164]	; (13920 <bt_enable+0x124>)
   1387c:	4827      	ldr	r0, [pc, #156]	; (1391c <bt_enable+0x120>)
   1387e:	f00c f9fa 	bl	1fc76 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13882:	f06f 0307 	mvn.w	r3, #7
   13886:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1388a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1388e:	e9cd 4400 	strd	r4, r4, [sp]
   13892:	4b24      	ldr	r3, [pc, #144]	; (13924 <bt_enable+0x128>)
   13894:	4924      	ldr	r1, [pc, #144]	; (13928 <bt_enable+0x12c>)
   13896:	9404      	str	r4, [sp, #16]
   13898:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1389c:	4823      	ldr	r0, [pc, #140]	; (1392c <bt_enable+0x130>)
   1389e:	f006 fdeb 	bl	1a478 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   138a2:	4923      	ldr	r1, [pc, #140]	; (13930 <bt_enable+0x134>)
   138a4:	4821      	ldr	r0, [pc, #132]	; (1392c <bt_enable+0x130>)
   138a6:	f00c f9e6 	bl	1fc76 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   138aa:	f7fe fcbd 	bl	12228 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   138ae:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   138b2:	68db      	ldr	r3, [r3, #12]
   138b4:	4798      	blx	r3
	if (err) {
   138b6:	4604      	mov	r4, r0
   138b8:	b158      	cbz	r0, 138d2 <bt_enable+0xd6>
   138ba:	4b12      	ldr	r3, [pc, #72]	; (13904 <bt_enable+0x108>)
   138bc:	4a12      	ldr	r2, [pc, #72]	; (13908 <bt_enable+0x10c>)
   138be:	1ad2      	subs	r2, r2, r3
   138c0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   138c2:	0192      	lsls	r2, r2, #6
   138c4:	4601      	mov	r1, r0
   138c6:	f042 0201 	orr.w	r2, r2, #1
   138ca:	481a      	ldr	r0, [pc, #104]	; (13934 <bt_enable+0x138>)
   138cc:	f008 fc65 	bl	1c19a <log_1>
		return err;
   138d0:	e7a8      	b.n	13824 <bt_enable+0x28>
	if (!cb) {
   138d2:	b966      	cbnz	r6, 138ee <bt_enable+0xf2>
	err = hci_init();
   138d4:	f7fb fccc 	bl	f270 <hci_init>
	if (err) {
   138d8:	4604      	mov	r4, r0
   138da:	2800      	cmp	r0, #0
   138dc:	d1a2      	bne.n	13824 <bt_enable+0x28>
		err = bt_conn_init();
   138de:	f001 fd63 	bl	153a8 <bt_conn_init>
		if (err) {
   138e2:	4604      	mov	r4, r0
   138e4:	2800      	cmp	r0, #0
   138e6:	d19d      	bne.n	13824 <bt_enable+0x28>
	bt_finalize_init();
   138e8:	f7ff fefc 	bl	136e4 <bt_finalize_init>
	return 0;
   138ec:	e79a      	b.n	13824 <bt_enable+0x28>
	k_work_submit(&bt_dev.init);
   138ee:	f105 0088 	add.w	r0, r5, #136	; 0x88
   138f2:	f007 f8c9 	bl	1aa88 <k_work_submit>
	return 0;
   138f6:	e795      	b.n	13824 <bt_enable+0x28>
		return -EALREADY;
   138f8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   138fc:	e792      	b.n	13824 <bt_enable+0x28>
   138fe:	bf00      	nop
   13900:	200002a0 	.word	0x200002a0
   13904:	00020854 	.word	0x00020854
   13908:	00020894 	.word	0x00020894
   1390c:	00022041 	.word	0x00022041
   13910:	20001e48 	.word	0x20001e48
   13914:	00012ae5 	.word	0x00012ae5
   13918:	20003500 	.word	0x20003500
   1391c:	20001598 	.word	0x20001598
   13920:	0002205a 	.word	0x0002205a
   13924:	00012879 	.word	0x00012879
   13928:	200030e0 	.word	0x200030e0
   1392c:	20001518 	.word	0x20001518
   13930:	00022060 	.word	0x00022060
   13934:	00022066 	.word	0x00022066

00013938 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13938:	4800      	ldr	r0, [pc, #0]	; (1393c <bt_get_name+0x4>)
   1393a:	4770      	bx	lr
   1393c:	00022082 	.word	0x00022082

00013940 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   13942:	4f0b      	ldr	r7, [pc, #44]	; (13970 <id_find+0x30>)
{
   13944:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   13946:	2500      	movs	r5, #0
   13948:	79fb      	ldrb	r3, [r7, #7]
   1394a:	b2ec      	uxtb	r4, r5
   1394c:	42a3      	cmp	r3, r4
   1394e:	d802      	bhi.n	13956 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13950:	f06f 0401 	mvn.w	r4, #1
   13954:	e009      	b.n	1396a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   13956:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1395a:	2207      	movs	r2, #7
   1395c:	4439      	add	r1, r7
   1395e:	4630      	mov	r0, r6
   13960:	f009 ff1a 	bl	1d798 <memcmp>
   13964:	3501      	adds	r5, #1
   13966:	2800      	cmp	r0, #0
   13968:	d1ee      	bne.n	13948 <id_find+0x8>
}
   1396a:	4620      	mov	r0, r4
   1396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1396e:	bf00      	nop
   13970:	200002a0 	.word	0x200002a0

00013974 <set_random_address>:
{
   13974:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   13976:	4914      	ldr	r1, [pc, #80]	; (139c8 <set_random_address+0x54>)
   13978:	2206      	movs	r2, #6
   1397a:	4605      	mov	r5, r0
   1397c:	f009 ff0c 	bl	1d798 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   13980:	4604      	mov	r4, r0
   13982:	b1e0      	cbz	r0, 139be <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13984:	2106      	movs	r1, #6
   13986:	f242 0005 	movw	r0, #8197	; 0x2005
   1398a:	f7ff fa03 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   1398e:	4604      	mov	r4, r0
   13990:	b1b8      	cbz	r0, 139c2 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13992:	2206      	movs	r2, #6
   13994:	4629      	mov	r1, r5
   13996:	3008      	adds	r0, #8
   13998:	f00c f803 	bl	1f9a2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1399c:	4621      	mov	r1, r4
   1399e:	2200      	movs	r2, #0
   139a0:	f242 0005 	movw	r0, #8197	; 0x2005
   139a4:	f7ff fb52 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   139a8:	4604      	mov	r4, r0
   139aa:	b940      	cbnz	r0, 139be <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   139ac:	2206      	movs	r2, #6
   139ae:	4806      	ldr	r0, [pc, #24]	; (139c8 <set_random_address+0x54>)
   139b0:	4629      	mov	r1, r5
   139b2:	f009 ff01 	bl	1d7b8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   139b6:	4b05      	ldr	r3, [pc, #20]	; (139cc <set_random_address+0x58>)
   139b8:	2201      	movs	r2, #1
   139ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   139be:	4620      	mov	r0, r4
   139c0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   139c2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   139c6:	e7fa      	b.n	139be <set_random_address+0x4a>
   139c8:	200002cd 	.word	0x200002cd
   139cc:	200002a0 	.word	0x200002a0

000139d0 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   139d0:	b530      	push	{r4, r5, lr}
   139d2:	4c14      	ldr	r4, [pc, #80]	; (13a24 <id_create.isra.0+0x54>)
   139d4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   139d8:	b085      	sub	sp, #20
   139da:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   139dc:	460d      	mov	r5, r1
   139de:	b179      	cbz	r1, 13a00 <id_create.isra.0+0x30>
   139e0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   139e2:	2207      	movs	r2, #7
   139e4:	4669      	mov	r1, sp
   139e6:	4628      	mov	r0, r5
   139e8:	9300      	str	r3, [sp, #0]
   139ea:	f8cd 3003 	str.w	r3, [sp, #3]
   139ee:	f009 fed3 	bl	1d798 <memcmp>
   139f2:	b128      	cbz	r0, 13a00 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   139f4:	4629      	mov	r1, r5
   139f6:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   139f8:	f00a f91d 	bl	1dc36 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   139fc:	b005      	add	sp, #20
   139fe:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   13a00:	a802      	add	r0, sp, #8
   13a02:	f00a f80b 	bl	1da1c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   13a06:	a802      	add	r0, sp, #8
   13a08:	f7ff ff9a 	bl	13940 <id_find>
   13a0c:	2800      	cmp	r0, #0
   13a0e:	daf7      	bge.n	13a00 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   13a10:	a902      	add	r1, sp, #8
   13a12:	4620      	mov	r0, r4
   13a14:	f00a f90f 	bl	1dc36 <bt_addr_le_copy>
		if (addr) {
   13a18:	2d00      	cmp	r5, #0
   13a1a:	d0ef      	beq.n	139fc <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13a1c:	4621      	mov	r1, r4
   13a1e:	4628      	mov	r0, r5
   13a20:	e7ea      	b.n	139f8 <id_create.isra.0+0x28>
   13a22:	bf00      	nop
   13a24:	200002a0 	.word	0x200002a0

00013a28 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a28:	4b0a      	ldr	r3, [pc, #40]	; (13a54 <bt_id_pending_keys_update+0x2c>)
   13a2a:	f3bf 8f5b 	dmb	ish
   13a2e:	e853 2f00 	ldrex	r2, [r3]
   13a32:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   13a36:	e843 1000 	strex	r0, r1, [r3]
   13a3a:	2800      	cmp	r0, #0
   13a3c:	d1f7      	bne.n	13a2e <bt_id_pending_keys_update+0x6>
   13a3e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   13a42:	0493      	lsls	r3, r2, #18
   13a44:	d504      	bpl.n	13a50 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   13a46:	4904      	ldr	r1, [pc, #16]	; (13a58 <bt_id_pending_keys_update+0x30>)
   13a48:	2200      	movs	r2, #0
   13a4a:	2002      	movs	r0, #2
   13a4c:	f005 b8c0 	b.w	18bd0 <bt_keys_foreach>
}
   13a50:	4770      	bx	lr
   13a52:	bf00      	nop
   13a54:	20000338 	.word	0x20000338
   13a58:	0001dd63 	.word	0x0001dd63

00013a5c <bt_id_add>:
{
   13a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13a5e:	4e5e      	ldr	r6, [pc, #376]	; (13bd8 <bt_id_add+0x17c>)
   13a60:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
   13a64:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
   13a68:	4604      	mov	r4, r0
   13a6a:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13a6c:	b10a      	cbz	r2, 13a72 <bt_id_add+0x16>
   13a6e:	429a      	cmp	r2, r3
   13a70:	d208      	bcs.n	13a84 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   13a72:	3301      	adds	r3, #1
   13a74:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   13a78:	7a23      	ldrb	r3, [r4, #8]
   13a7a:	f043 0304 	orr.w	r3, r3, #4
   13a7e:	7223      	strb	r3, [r4, #8]
}
   13a80:	b003      	add	sp, #12
   13a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   13a84:	2100      	movs	r1, #0
   13a86:	2206      	movs	r2, #6
   13a88:	4608      	mov	r0, r1
   13a8a:	f001 fad1 	bl	15030 <bt_conn_lookup_state_le>
	if (conn) {
   13a8e:	4607      	mov	r7, r0
   13a90:	b198      	cbz	r0, 13aba <bt_id_add+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13a92:	f3bf 8f5b 	dmb	ish
   13a96:	3698      	adds	r6, #152	; 0x98
   13a98:	e856 3f00 	ldrex	r3, [r6]
   13a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13aa0:	e846 3200 	strex	r2, r3, [r6]
   13aa4:	2a00      	cmp	r2, #0
   13aa6:	d1f7      	bne.n	13a98 <bt_id_add+0x3c>
   13aa8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   13aac:	7a23      	ldrb	r3, [r4, #8]
   13aae:	f043 0301 	orr.w	r3, r3, #1
   13ab2:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   13ab4:	f00a fb34 	bl	1e120 <bt_conn_unref>
		return;
   13ab8:	e7e2      	b.n	13a80 <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13aba:	4601      	mov	r1, r0
   13abc:	4847      	ldr	r0, [pc, #284]	; (13bdc <bt_id_add+0x180>)
   13abe:	f000 fbf7 	bl	142b0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   13ac2:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
   13ac6:	b173      	cbz	r3, 13ae6 <bt_id_add+0x8a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13ac8:	4638      	mov	r0, r7
   13aca:	f00a f8b7 	bl	1dc3c <addr_res_enable>
		if (err) {
   13ace:	b150      	cbz	r0, 13ae6 <bt_id_add+0x8a>
   13ad0:	4943      	ldr	r1, [pc, #268]	; (13be0 <bt_id_add+0x184>)
   13ad2:	4b44      	ldr	r3, [pc, #272]	; (13be4 <bt_id_add+0x188>)
			BT_WARN("Failed to disable address resolution");
   13ad4:	4844      	ldr	r0, [pc, #272]	; (13be8 <bt_id_add+0x18c>)
   13ad6:	1ac9      	subs	r1, r1, r3
   13ad8:	08c9      	lsrs	r1, r1, #3
   13ada:	0189      	lsls	r1, r1, #6
   13adc:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   13ae0:	f008 fb4e 	bl	1c180 <log_0>
	if (err) {
   13ae4:	e023      	b.n	13b2e <bt_id_add+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   13ae6:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   13aea:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   13aee:	429a      	cmp	r2, r3
   13af0:	d125      	bne.n	13b3e <bt_id_add+0xe2>
   13af2:	4b3c      	ldr	r3, [pc, #240]	; (13be4 <bt_id_add+0x188>)
   13af4:	4e3a      	ldr	r6, [pc, #232]	; (13be0 <bt_id_add+0x184>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   13af6:	483d      	ldr	r0, [pc, #244]	; (13bec <bt_id_add+0x190>)
   13af8:	1af6      	subs	r6, r6, r3
   13afa:	08f6      	lsrs	r6, r6, #3
   13afc:	01b6      	lsls	r6, r6, #6
   13afe:	f046 0102 	orr.w	r1, r6, #2
   13b02:	f008 fb3d 	bl	1c180 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   13b06:	2200      	movs	r2, #0
   13b08:	4611      	mov	r1, r2
   13b0a:	f242 0029 	movw	r0, #8233	; 0x2029
   13b0e:	f7ff fa9d 	bl	1304c <bt_hci_cmd_send_sync>
		if (err) {
   13b12:	b118      	cbz	r0, 13b1c <bt_id_add+0xc0>
			BT_ERR("Failed to clear resolution list");
   13b14:	4836      	ldr	r0, [pc, #216]	; (13bf0 <bt_id_add+0x194>)
   13b16:	f046 0101 	orr.w	r1, r6, #1
   13b1a:	e7e1      	b.n	13ae0 <bt_id_add+0x84>
		bt_dev.le.rl_entries++;
   13b1c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   13b20:	3301      	adds	r3, #1
   13b22:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   13b26:	7a23      	ldrb	r3, [r4, #8]
   13b28:	f043 0304 	orr.w	r3, r3, #4
   13b2c:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13b2e:	2001      	movs	r0, #1
   13b30:	f00a f884 	bl	1dc3c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13b34:	482f      	ldr	r0, [pc, #188]	; (13bf4 <bt_id_add+0x198>)
   13b36:	2100      	movs	r1, #0
   13b38:	f000 fbba 	bl	142b0 <bt_le_ext_adv_foreach>
   13b3c:	e7a0      	b.n	13a80 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   13b3e:	1c67      	adds	r7, r4, #1
   13b40:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   13b44:	4638      	mov	r0, r7
   13b46:	f00a f891 	bl	1dc6c <hci_id_add.isra.0>
	if (err) {
   13b4a:	4606      	mov	r6, r0
   13b4c:	b140      	cbz	r0, 13b60 <bt_id_add+0x104>
   13b4e:	4924      	ldr	r1, [pc, #144]	; (13be0 <bt_id_add+0x184>)
   13b50:	4b24      	ldr	r3, [pc, #144]	; (13be4 <bt_id_add+0x188>)
		BT_ERR("Failed to add IRK to controller");
   13b52:	4829      	ldr	r0, [pc, #164]	; (13bf8 <bt_id_add+0x19c>)
   13b54:	1ac9      	subs	r1, r1, r3
   13b56:	08c9      	lsrs	r1, r1, #3
   13b58:	0189      	lsls	r1, r1, #6
   13b5a:	f041 0101 	orr.w	r1, r1, #1
   13b5e:	e7bf      	b.n	13ae0 <bt_id_add+0x84>
	bt_dev.le.rl_entries++;
   13b60:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   13b64:	3301      	adds	r3, #1
   13b66:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   13b6a:	7a23      	ldrb	r3, [r4, #8]
   13b6c:	f043 0304 	orr.w	r3, r3, #4
   13b70:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   13b72:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
   13b76:	075b      	lsls	r3, r3, #29
   13b78:	d408      	bmi.n	13b8c <bt_id_add+0x130>
   13b7a:	4919      	ldr	r1, [pc, #100]	; (13be0 <bt_id_add+0x184>)
   13b7c:	4b19      	ldr	r3, [pc, #100]	; (13be4 <bt_id_add+0x188>)
		BT_WARN("Set privacy mode command is not supported");
   13b7e:	481f      	ldr	r0, [pc, #124]	; (13bfc <bt_id_add+0x1a0>)
   13b80:	1ac9      	subs	r1, r1, r3
   13b82:	08c9      	lsrs	r1, r1, #3
   13b84:	0189      	lsls	r1, r1, #6
   13b86:	f041 0102 	orr.w	r1, r1, #2
   13b8a:	e7a9      	b.n	13ae0 <bt_id_add+0x84>
	bt_addr_le_copy(&cp.id_addr, addr);
   13b8c:	4639      	mov	r1, r7
   13b8e:	4668      	mov	r0, sp
   13b90:	f00a f851 	bl	1dc36 <bt_addr_le_copy>
	cp.mode = mode;
   13b94:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13b96:	2108      	movs	r1, #8
   13b98:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   13b9c:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13ba0:	f7ff f8f8 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   13ba4:	4604      	mov	r4, r0
   13ba6:	b940      	cbnz	r0, 13bba <bt_id_add+0x15e>
   13ba8:	490d      	ldr	r1, [pc, #52]	; (13be0 <bt_id_add+0x184>)
   13baa:	4b0e      	ldr	r3, [pc, #56]	; (13be4 <bt_id_add+0x188>)
		BT_ERR("Failed to set privacy mode");
   13bac:	4814      	ldr	r0, [pc, #80]	; (13c00 <bt_id_add+0x1a4>)
   13bae:	1ac9      	subs	r1, r1, r3
   13bb0:	08c9      	lsrs	r1, r1, #3
   13bb2:	0189      	lsls	r1, r1, #6
   13bb4:	f041 0101 	orr.w	r1, r1, #1
   13bb8:	e792      	b.n	13ae0 <bt_id_add+0x84>
   13bba:	2208      	movs	r2, #8
   13bbc:	4669      	mov	r1, sp
   13bbe:	4410      	add	r0, r2
   13bc0:	f00b feef 	bl	1f9a2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   13bc4:	4632      	mov	r2, r6
   13bc6:	4621      	mov	r1, r4
   13bc8:	f242 004e 	movw	r0, #8270	; 0x204e
   13bcc:	f7ff fa3e 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   13bd0:	2800      	cmp	r0, #0
   13bd2:	d0ac      	beq.n	13b2e <bt_id_add+0xd2>
   13bd4:	e7e8      	b.n	13ba8 <bt_id_add+0x14c>
   13bd6:	bf00      	nop
   13bd8:	200002a0 	.word	0x200002a0
   13bdc:	0001dcf9 	.word	0x0001dcf9
   13be0:	000208a4 	.word	0x000208a4
   13be4:	00020854 	.word	0x00020854
   13be8:	000220b3 	.word	0x000220b3
   13bec:	000220d8 	.word	0x000220d8
   13bf0:	00022109 	.word	0x00022109
   13bf4:	0001dccf 	.word	0x0001dccf
   13bf8:	00022129 	.word	0x00022129
   13bfc:	00022149 	.word	0x00022149
   13c00:	00022173 	.word	0x00022173

00013c04 <bt_id_del>:
{
   13c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   13c08:	4e47      	ldr	r6, [pc, #284]	; (13d28 <bt_id_del+0x124>)
   13c0a:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
   13c0e:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
   13c12:	4604      	mov	r4, r0
   13c14:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
   13c16:	b112      	cbz	r2, 13c1e <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13c18:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   13c1a:	4293      	cmp	r3, r2
   13c1c:	dd08      	ble.n	13c30 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   13c1e:	3b01      	subs	r3, #1
   13c20:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   13c24:	7a23      	ldrb	r3, [r4, #8]
   13c26:	f023 0304 	bic.w	r3, r3, #4
   13c2a:	7223      	strb	r3, [r4, #8]
}
   13c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   13c30:	2100      	movs	r1, #0
   13c32:	2206      	movs	r2, #6
   13c34:	4608      	mov	r0, r1
   13c36:	f001 f9fb 	bl	15030 <bt_conn_lookup_state_le>
	if (conn) {
   13c3a:	4607      	mov	r7, r0
   13c3c:	b1a0      	cbz	r0, 13c68 <bt_id_del+0x64>
   13c3e:	f3bf 8f5b 	dmb	ish
   13c42:	3698      	adds	r6, #152	; 0x98
   13c44:	e856 3f00 	ldrex	r3, [r6]
   13c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13c4c:	e846 3200 	strex	r2, r3, [r6]
   13c50:	2a00      	cmp	r2, #0
   13c52:	d1f7      	bne.n	13c44 <bt_id_del+0x40>
   13c54:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   13c58:	7a23      	ldrb	r3, [r4, #8]
   13c5a:	f043 0302 	orr.w	r3, r3, #2
   13c5e:	7223      	strb	r3, [r4, #8]
}
   13c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   13c64:	f00a ba5c 	b.w	1e120 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13c68:	4601      	mov	r1, r0
   13c6a:	4830      	ldr	r0, [pc, #192]	; (13d2c <bt_id_del+0x128>)
   13c6c:	f000 fb20 	bl	142b0 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13c70:	4638      	mov	r0, r7
   13c72:	f009 ffe3 	bl	1dc3c <addr_res_enable>
	if (err) {
   13c76:	4606      	mov	r6, r0
   13c78:	b1b0      	cbz	r0, 13ca8 <bt_id_del+0xa4>
   13c7a:	4a2d      	ldr	r2, [pc, #180]	; (13d30 <bt_id_del+0x12c>)
   13c7c:	4b2d      	ldr	r3, [pc, #180]	; (13d34 <bt_id_del+0x130>)
   13c7e:	1ad2      	subs	r2, r2, r3
   13c80:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   13c82:	0192      	lsls	r2, r2, #6
   13c84:	4601      	mov	r1, r0
   13c86:	f042 0201 	orr.w	r2, r2, #1
   13c8a:	482b      	ldr	r0, [pc, #172]	; (13d38 <bt_id_del+0x134>)
   13c8c:	f008 fa85 	bl	1c19a <log_1>
	if (bt_dev.le.rl_entries) {
   13c90:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   13c94:	b113      	cbz	r3, 13c9c <bt_id_del+0x98>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13c96:	2001      	movs	r0, #1
   13c98:	f009 ffd0 	bl	1dc3c <addr_res_enable>
}
   13c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13ca0:	4826      	ldr	r0, [pc, #152]	; (13d3c <bt_id_del+0x138>)
   13ca2:	2100      	movs	r1, #0
   13ca4:	f000 bb04 	b.w	142b0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13ca8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   13cac:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   13cb0:	429a      	cmp	r2, r3
   13cb2:	d20c      	bcs.n	13cce <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
   13cb4:	3b01      	subs	r3, #1
   13cb6:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   13cba:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   13cbc:	4920      	ldr	r1, [pc, #128]	; (13d40 <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13cbe:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   13cc2:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13cc4:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   13cc6:	2002      	movs	r0, #2
   13cc8:	f004 ff82 	bl	18bd0 <bt_keys_foreach>
		goto done;
   13ccc:	e7e0      	b.n	13c90 <bt_id_del+0x8c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13cce:	2107      	movs	r1, #7
   13cd0:	f242 0028 	movw	r0, #8232	; 0x2028
   13cd4:	f7ff f85e 	bl	12d94 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13cd8:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   13cdc:	4607      	mov	r7, r0
   13cde:	b950      	cbnz	r0, 13cf6 <bt_id_del+0xf2>
   13ce0:	4b14      	ldr	r3, [pc, #80]	; (13d34 <bt_id_del+0x130>)
   13ce2:	4913      	ldr	r1, [pc, #76]	; (13d30 <bt_id_del+0x12c>)
		BT_ERR("Failed to remove IRK from controller");
   13ce4:	4817      	ldr	r0, [pc, #92]	; (13d44 <bt_id_del+0x140>)
   13ce6:	1ac9      	subs	r1, r1, r3
   13ce8:	08c9      	lsrs	r1, r1, #3
   13cea:	0189      	lsls	r1, r1, #6
   13cec:	f041 0101 	orr.w	r1, r1, #1
   13cf0:	f008 fa46 	bl	1c180 <log_0>
		goto done;
   13cf4:	e7cc      	b.n	13c90 <bt_id_del+0x8c>
	return net_buf_simple_add(&buf->b, len);
   13cf6:	2107      	movs	r1, #7
   13cf8:	3008      	adds	r0, #8
   13cfa:	f00b fe4c 	bl	1f996 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13cfe:	4641      	mov	r1, r8
   13d00:	f009 ff99 	bl	1dc36 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   13d04:	4632      	mov	r2, r6
   13d06:	4639      	mov	r1, r7
   13d08:	f242 0028 	movw	r0, #8232	; 0x2028
   13d0c:	f7ff f99e 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   13d10:	2800      	cmp	r0, #0
   13d12:	d1e5      	bne.n	13ce0 <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
   13d14:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   13d18:	3b01      	subs	r3, #1
   13d1a:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   13d1e:	7a23      	ldrb	r3, [r4, #8]
   13d20:	f023 0304 	bic.w	r3, r3, #4
   13d24:	7223      	strb	r3, [r4, #8]
   13d26:	e7b3      	b.n	13c90 <bt_id_del+0x8c>
   13d28:	200002a0 	.word	0x200002a0
   13d2c:	0001dcf9 	.word	0x0001dcf9
   13d30:	000208a4 	.word	0x000208a4
   13d34:	00020854 	.word	0x00020854
   13d38:	0002218e 	.word	0x0002218e
   13d3c:	0001dccf 	.word	0x0001dccf
   13d40:	0001dcbd 	.word	0x0001dcbd
   13d44:	000221bb 	.word	0x000221bb

00013d48 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13d48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13d4a:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13d4c:	4605      	mov	r5, r0
   13d4e:	b918      	cbnz	r0, 13d58 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13d50:	b34c      	cbz	r4, 13da6 <bt_id_create+0x5e>
		return -EINVAL;
   13d52:	f06f 0415 	mvn.w	r4, #21
   13d56:	e023      	b.n	13da0 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13d58:	2300      	movs	r3, #0
   13d5a:	2207      	movs	r2, #7
   13d5c:	4669      	mov	r1, sp
   13d5e:	9300      	str	r3, [sp, #0]
   13d60:	f8cd 3003 	str.w	r3, [sp, #3]
   13d64:	f009 fd18 	bl	1d798 <memcmp>
   13d68:	2800      	cmp	r0, #0
   13d6a:	d0f1      	beq.n	13d50 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13d6c:	782b      	ldrb	r3, [r5, #0]
   13d6e:	2b01      	cmp	r3, #1
   13d70:	d104      	bne.n	13d7c <bt_id_create+0x34>
   13d72:	79ab      	ldrb	r3, [r5, #6]
   13d74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13d78:	2bc0      	cmp	r3, #192	; 0xc0
   13d7a:	d00a      	beq.n	13d92 <bt_id_create+0x4a>
   13d7c:	4b1b      	ldr	r3, [pc, #108]	; (13dec <bt_id_create+0xa4>)
   13d7e:	491c      	ldr	r1, [pc, #112]	; (13df0 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
   13d80:	481c      	ldr	r0, [pc, #112]	; (13df4 <bt_id_create+0xac>)
   13d82:	1ac9      	subs	r1, r1, r3
   13d84:	08c9      	lsrs	r1, r1, #3
   13d86:	0189      	lsls	r1, r1, #6
   13d88:	f041 0101 	orr.w	r1, r1, #1
   13d8c:	f008 f9f8 	bl	1c180 <log_0>
			return -EINVAL;
   13d90:	e7df      	b.n	13d52 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   13d92:	4628      	mov	r0, r5
   13d94:	f7ff fdd4 	bl	13940 <id_find>
   13d98:	2800      	cmp	r0, #0
   13d9a:	dbd9      	blt.n	13d50 <bt_id_create+0x8>
			return -EALREADY;
   13d9c:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   13da0:	4620      	mov	r0, r4
   13da2:	b002      	add	sp, #8
   13da4:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13da6:	4e14      	ldr	r6, [pc, #80]	; (13df8 <bt_id_create+0xb0>)
   13da8:	79f3      	ldrb	r3, [r6, #7]
   13daa:	2b01      	cmp	r3, #1
   13dac:	d01b      	beq.n	13de6 <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13dae:	f3bf 8f5b 	dmb	ish
   13db2:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   13db6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13dba:	07db      	lsls	r3, r3, #31
   13dbc:	d40b      	bmi.n	13dd6 <bt_id_create+0x8e>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   13dbe:	2d00      	cmp	r5, #0
   13dc0:	d0c7      	beq.n	13d52 <bt_id_create+0xa>
   13dc2:	2207      	movs	r2, #7
   13dc4:	4669      	mov	r1, sp
   13dc6:	4628      	mov	r0, r5
   13dc8:	9400      	str	r4, [sp, #0]
   13dca:	f8cd 4003 	str.w	r4, [sp, #3]
   13dce:	f009 fce3 	bl	1d798 <memcmp>
   13dd2:	2800      	cmp	r0, #0
   13dd4:	d0bd      	beq.n	13d52 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   13dd6:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   13dd8:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   13dda:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   13ddc:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   13dde:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   13de0:	f7ff fdf6 	bl	139d0 <id_create.isra.0>
	return new_id;
   13de4:	e7dc      	b.n	13da0 <bt_id_create+0x58>
		return -ENOMEM;
   13de6:	f06f 040b 	mvn.w	r4, #11
   13dea:	e7d9      	b.n	13da0 <bt_id_create+0x58>
   13dec:	00020854 	.word	0x00020854
   13df0:	000208a4 	.word	0x000208a4
   13df4:	000221e0 	.word	0x000221e0
   13df8:	200002a0 	.word	0x200002a0

00013dfc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13dfc:	b570      	push	{r4, r5, r6, lr}
   13dfe:	b086      	sub	sp, #24
   13e00:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13e02:	aa01      	add	r2, sp, #4
   13e04:	2100      	movs	r1, #0
   13e06:	f241 0009 	movw	r0, #4105	; 0x1009
   13e0a:	f7ff f91f 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   13e0e:	4604      	mov	r4, r0
   13e10:	b160      	cbz	r0, 13e2c <bt_id_read_public_addr+0x30>
   13e12:	491a      	ldr	r1, [pc, #104]	; (13e7c <bt_id_read_public_addr+0x80>)
   13e14:	4b1a      	ldr	r3, [pc, #104]	; (13e80 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   13e16:	481b      	ldr	r0, [pc, #108]	; (13e84 <bt_id_read_public_addr+0x88>)
   13e18:	1ac9      	subs	r1, r1, r3
   13e1a:	08c9      	lsrs	r1, r1, #3
   13e1c:	0189      	lsls	r1, r1, #6
   13e1e:	f041 0102 	orr.w	r1, r1, #2
   13e22:	f008 f9ad 	bl	1c180 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   13e26:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13e28:	b006      	add	sp, #24
   13e2a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   13e2c:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13e2e:	9002      	str	r0, [sp, #8]
   13e30:	689d      	ldr	r5, [r3, #8]
   13e32:	f8ad 000c 	strh.w	r0, [sp, #12]
   13e36:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   13e38:	2206      	movs	r2, #6
   13e3a:	a902      	add	r1, sp, #8
   13e3c:	4628      	mov	r0, r5
   13e3e:	f009 fcab 	bl	1d798 <memcmp>
   13e42:	b918      	cbnz	r0, 13e4c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   13e44:	9801      	ldr	r0, [sp, #4]
   13e46:	f004 ffed 	bl	18e24 <net_buf_unref>
   13e4a:	e7ec      	b.n	13e26 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   13e4c:	f04f 33ff 	mov.w	r3, #4294967295
   13e50:	2206      	movs	r2, #6
   13e52:	a904      	add	r1, sp, #16
   13e54:	4628      	mov	r0, r5
   13e56:	9304      	str	r3, [sp, #16]
   13e58:	f8ad 3014 	strh.w	r3, [sp, #20]
   13e5c:	f009 fc9c 	bl	1d798 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13e60:	2800      	cmp	r0, #0
   13e62:	d0ef      	beq.n	13e44 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   13e64:	2206      	movs	r2, #6
   13e66:	4629      	mov	r1, r5
   13e68:	1c70      	adds	r0, r6, #1
   13e6a:	f009 fca5 	bl	1d7b8 <memcpy>
	net_buf_unref(rsp);
   13e6e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13e70:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   13e72:	f004 ffd7 	bl	18e24 <net_buf_unref>
	return 1U;
   13e76:	2001      	movs	r0, #1
   13e78:	e7d6      	b.n	13e28 <bt_id_read_public_addr+0x2c>
   13e7a:	bf00      	nop
   13e7c:	000208a4 	.word	0x000208a4
   13e80:	00020854 	.word	0x00020854
   13e84:	0002220e 	.word	0x0002220e

00013e88 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   13e88:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13e8a:	4668      	mov	r0, sp
   13e8c:	f7ff ffb6 	bl	13dfc <bt_id_read_public_addr>
   13e90:	4b04      	ldr	r3, [pc, #16]	; (13ea4 <bt_setup_public_id_addr+0x1c>)
   13e92:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13e94:	b118      	cbz	r0, 13e9e <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   13e96:	4669      	mov	r1, sp
   13e98:	2000      	movs	r0, #0
   13e9a:	f7ff fd99 	bl	139d0 <id_create.isra.0>
}
   13e9e:	b003      	add	sp, #12
   13ea0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ea4:	200002a0 	.word	0x200002a0

00013ea8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13eac:	4b25      	ldr	r3, [pc, #148]	; (13f44 <bt_read_static_addr+0x9c>)
   13eae:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   13eb2:	f014 0401 	ands.w	r4, r4, #1
{
   13eb6:	4607      	mov	r7, r0
   13eb8:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13eba:	d10a      	bne.n	13ed2 <bt_read_static_addr+0x2a>
   13ebc:	4922      	ldr	r1, [pc, #136]	; (13f48 <bt_read_static_addr+0xa0>)
   13ebe:	4b23      	ldr	r3, [pc, #140]	; (13f4c <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   13ec0:	4823      	ldr	r0, [pc, #140]	; (13f50 <bt_read_static_addr+0xa8>)
   13ec2:	1ac9      	subs	r1, r1, r3
   13ec4:	08c9      	lsrs	r1, r1, #3
   13ec6:	0189      	lsls	r1, r1, #6
   13ec8:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   13ecc:	f008 f958 	bl	1c180 <log_0>
   13ed0:	e012      	b.n	13ef8 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13ed2:	aa01      	add	r2, sp, #4
   13ed4:	2100      	movs	r1, #0
   13ed6:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13eda:	f7ff f8b7 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   13ede:	4605      	mov	r5, r0
   13ee0:	b170      	cbz	r0, 13f00 <bt_read_static_addr+0x58>
   13ee2:	4b1a      	ldr	r3, [pc, #104]	; (13f4c <bt_read_static_addr+0xa4>)
   13ee4:	4918      	ldr	r1, [pc, #96]	; (13f48 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   13ee6:	481b      	ldr	r0, [pc, #108]	; (13f54 <bt_read_static_addr+0xac>)
   13ee8:	1ac9      	subs	r1, r1, r3
   13eea:	08c9      	lsrs	r1, r1, #3
   13eec:	0189      	lsls	r1, r1, #6
   13eee:	f041 0102 	orr.w	r1, r1, #2
   13ef2:	f008 f945 	bl	1c180 <log_0>
		return 0;
   13ef6:	2400      	movs	r4, #0
	}

	return cnt;
}
   13ef8:	4620      	mov	r0, r4
   13efa:	b002      	add	sp, #8
   13efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   13f00:	9b01      	ldr	r3, [sp, #4]
   13f02:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   13f04:	785c      	ldrb	r4, [r3, #1]
   13f06:	42b4      	cmp	r4, r6
   13f08:	bf28      	it	cs
   13f0a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13f0c:	f04f 0816 	mov.w	r8, #22
   13f10:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   13f12:	42a5      	cmp	r5, r4
   13f14:	db0d      	blt.n	13f32 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   13f16:	9801      	ldr	r0, [sp, #4]
   13f18:	f004 ff84 	bl	18e24 <net_buf_unref>
	if (!cnt) {
   13f1c:	2c00      	cmp	r4, #0
   13f1e:	d1eb      	bne.n	13ef8 <bt_read_static_addr+0x50>
   13f20:	4909      	ldr	r1, [pc, #36]	; (13f48 <bt_read_static_addr+0xa0>)
   13f22:	4b0a      	ldr	r3, [pc, #40]	; (13f4c <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   13f24:	480c      	ldr	r0, [pc, #48]	; (13f58 <bt_read_static_addr+0xb0>)
   13f26:	1ac9      	subs	r1, r1, r3
   13f28:	08c9      	lsrs	r1, r1, #3
   13f2a:	0189      	lsls	r1, r1, #6
   13f2c:	f041 0102 	orr.w	r1, r1, #2
   13f30:	e7cc      	b.n	13ecc <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13f32:	fb08 7005 	mla	r0, r8, r5, r7
   13f36:	2216      	movs	r2, #22
   13f38:	4631      	mov	r1, r6
   13f3a:	f009 fc3d 	bl	1d7b8 <memcpy>
	for (i = 0; i < cnt; i++) {
   13f3e:	3501      	adds	r5, #1
   13f40:	e7e7      	b.n	13f12 <bt_read_static_addr+0x6a>
   13f42:	bf00      	nop
   13f44:	200002a0 	.word	0x200002a0
   13f48:	000208a4 	.word	0x000208a4
   13f4c:	00020854 	.word	0x00020854
   13f50:	0002222c 	.word	0x0002222c
   13f54:	00022258 	.word	0x00022258
   13f58:	00022278 	.word	0x00022278

00013f5c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13f5e:	4d14      	ldr	r5, [pc, #80]	; (13fb0 <bt_setup_random_id_addr+0x54>)
   13f60:	79ec      	ldrb	r4, [r5, #7]
{
   13f62:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   13f64:	b9f4      	cbnz	r4, 13fa4 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13f66:	2101      	movs	r1, #1
   13f68:	a802      	add	r0, sp, #8
   13f6a:	f7ff ff9d 	bl	13ea8 <bt_read_static_addr>
   13f6e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13f70:	b1c0      	cbz	r0, 13fa4 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13f72:	2716      	movs	r7, #22
   13f74:	e00f      	b.n	13f96 <bt_setup_random_id_addr+0x3a>
   13f76:	ab02      	add	r3, sp, #8
   13f78:	fb07 3106 	mla	r1, r7, r6, r3
   13f7c:	2206      	movs	r2, #6
   13f7e:	f10d 0001 	add.w	r0, sp, #1
   13f82:	f009 fc19 	bl	1d7b8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   13f86:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   13f88:	4669      	mov	r1, sp
   13f8a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   13f8c:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   13f90:	f7ff fd1e 	bl	139d0 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13f94:	3401      	adds	r4, #1
   13f96:	79eb      	ldrb	r3, [r5, #7]
   13f98:	b2e6      	uxtb	r6, r4
   13f9a:	42b3      	cmp	r3, r6
   13f9c:	d8eb      	bhi.n	13f76 <bt_setup_random_id_addr+0x1a>
			}

			return 0;
   13f9e:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   13fa0:	b009      	add	sp, #36	; 0x24
   13fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   13fa4:	2100      	movs	r1, #0
   13fa6:	4608      	mov	r0, r1
   13fa8:	f7ff fece 	bl	13d48 <bt_id_create>
   13fac:	e7f8      	b.n	13fa0 <bt_setup_random_id_addr+0x44>
   13fae:	bf00      	nop
   13fb0:	200002a0 	.word	0x200002a0

00013fb4 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13fb8:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   13fbc:	7805      	ldrb	r5, [r0, #0]
{
   13fbe:	460e      	mov	r6, r1
   13fc0:	4690      	mov	r8, r2
   13fc2:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13fc4:	d026      	beq.n	14014 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13fc6:	4c22      	ldr	r4, [pc, #136]	; (14050 <bt_id_set_adv_own_addr+0x9c>)
   13fc8:	b12a      	cbz	r2, 13fd6 <bt_id_set_adv_own_addr+0x22>
   13fca:	0688      	lsls	r0, r1, #26
   13fcc:	d503      	bpl.n	13fd6 <bt_id_set_adv_own_addr+0x22>
   13fce:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   13fd2:	0659      	lsls	r1, r3, #25
   13fd4:	d539      	bpl.n	1404a <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13fd6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   13fda:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   13fde:	5ce3      	ldrb	r3, [r4, r3]
   13fe0:	2b01      	cmp	r3, #1
   13fe2:	d008      	beq.n	13ff6 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13fe4:	eba9 0505 	sub.w	r5, r9, r5
   13fe8:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13fea:	f1b8 0f00 	cmp.w	r8, #0
   13fee:	d10c      	bne.n	1400a <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13ff0:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13ff2:	2000      	movs	r0, #0
   13ff4:	e007      	b.n	14006 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13ff6:	2007      	movs	r0, #7
   13ff8:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   13ffc:	4420      	add	r0, r4
   13ffe:	f7ff fcb9 	bl	13974 <set_random_address>
				if (err) {
   14002:	2800      	cmp	r0, #0
   14004:	d0ee      	beq.n	13fe4 <bt_id_set_adv_own_addr+0x30>
}
   14006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1400a:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1400c:	bf48      	it	mi
   1400e:	f043 0302 	orrmi.w	r3, r3, #2
   14012:	e7ed      	b.n	13ff0 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14014:	074b      	lsls	r3, r1, #29
   14016:	d514      	bpl.n	14042 <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14018:	4e0d      	ldr	r6, [pc, #52]	; (14050 <bt_id_set_adv_own_addr+0x9c>)
   1401a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1401e:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   14022:	5cf3      	ldrb	r3, [r6, r3]
   14024:	2b01      	cmp	r3, #1
   14026:	d10a      	bne.n	1403e <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14028:	2007      	movs	r0, #7
   1402a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   1402e:	4430      	add	r0, r6
   14030:	f7ff fca0 	bl	13974 <set_random_address>
			*own_addr_type = id_addr->type;
   14034:	eba8 0505 	sub.w	r5, r8, r5
   14038:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1403a:	703b      	strb	r3, [r7, #0]
		if (err) {
   1403c:	e7e3      	b.n	14006 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   1403e:	4620      	mov	r0, r4
   14040:	e7f8      	b.n	14034 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   14042:	f009 fe7a 	bl	1dd3a <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14046:	2301      	movs	r3, #1
   14048:	e7f7      	b.n	1403a <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   1404a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1404e:	e7da      	b.n	14006 <bt_id_set_adv_own_addr+0x52>
   14050:	200002a0 	.word	0x200002a0

00014054 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14054:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14056:	4d14      	ldr	r5, [pc, #80]	; (140a8 <bt_id_init+0x54>)
   14058:	79eb      	ldrb	r3, [r5, #7]
   1405a:	b113      	cbz	r3, 14062 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1405c:	2400      	movs	r4, #0
}
   1405e:	4620      	mov	r0, r4
   14060:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
   14062:	f7ff ff11 	bl	13e88 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14066:	79eb      	ldrb	r3, [r5, #7]
   14068:	2b00      	cmp	r3, #0
   1406a:	d1f7      	bne.n	1405c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1406c:	f7ff ff76 	bl	13f5c <bt_setup_random_id_addr>
		if (err) {
   14070:	4604      	mov	r4, r0
   14072:	b150      	cbz	r0, 1408a <bt_id_init+0x36>
   14074:	490d      	ldr	r1, [pc, #52]	; (140ac <bt_id_init+0x58>)
   14076:	4b0e      	ldr	r3, [pc, #56]	; (140b0 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
   14078:	480e      	ldr	r0, [pc, #56]	; (140b4 <bt_id_init+0x60>)
   1407a:	1ac9      	subs	r1, r1, r3
   1407c:	08c9      	lsrs	r1, r1, #3
   1407e:	0189      	lsls	r1, r1, #6
   14080:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   14084:	f008 f87c 	bl	1c180 <log_0>
			return err;
   14088:	e7e9      	b.n	1405e <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1408a:	1c68      	adds	r0, r5, #1
   1408c:	f7ff fc72 	bl	13974 <set_random_address>
		if (err) {
   14090:	4604      	mov	r4, r0
   14092:	2800      	cmp	r0, #0
   14094:	d0e3      	beq.n	1405e <bt_id_init+0xa>
   14096:	4905      	ldr	r1, [pc, #20]	; (140ac <bt_id_init+0x58>)
   14098:	4b05      	ldr	r3, [pc, #20]	; (140b0 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
   1409a:	4807      	ldr	r0, [pc, #28]	; (140b8 <bt_id_init+0x64>)
   1409c:	1ac9      	subs	r1, r1, r3
   1409e:	08c9      	lsrs	r1, r1, #3
   140a0:	0189      	lsls	r1, r1, #6
   140a2:	f041 0101 	orr.w	r1, r1, #1
   140a6:	e7ed      	b.n	14084 <bt_id_init+0x30>
   140a8:	200002a0 	.word	0x200002a0
   140ac:	000208a4 	.word	0x000208a4
   140b0:	00020854 	.word	0x00020854
   140b4:	000222a1 	.word	0x000222a1
   140b8:	000222c0 	.word	0x000222c0

000140bc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   140bc:	6843      	ldr	r3, [r0, #4]
{
   140be:	b537      	push	{r0, r1, r2, r4, r5, lr}
   140c0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   140c2:	0558      	lsls	r0, r3, #21
   140c4:	d502      	bpl.n	140cc <valid_adv_param+0x10>
		return false;
   140c6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   140c8:	b003      	add	sp, #12
   140ca:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   140cc:	6922      	ldr	r2, [r4, #16]
   140ce:	b10a      	cbz	r2, 140d4 <valid_adv_param+0x18>
   140d0:	07d9      	lsls	r1, r3, #31
   140d2:	d5f8      	bpl.n	140c6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   140d4:	4d1a      	ldr	r5, [pc, #104]	; (14140 <valid_adv_param+0x84>)
   140d6:	7820      	ldrb	r0, [r4, #0]
   140d8:	79eb      	ldrb	r3, [r5, #7]
   140da:	4283      	cmp	r3, r0
   140dc:	d9f3      	bls.n	140c6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   140de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   140e2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   140e4:	2207      	movs	r2, #7
   140e6:	4669      	mov	r1, sp
   140e8:	4428      	add	r0, r5
   140ea:	9300      	str	r3, [sp, #0]
   140ec:	f8cd 3003 	str.w	r3, [sp, #3]
   140f0:	f009 fb52 	bl	1d798 <memcmp>
	if (param->id >= bt_dev.id_count ||
   140f4:	2800      	cmp	r0, #0
   140f6:	d0e6      	beq.n	140c6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   140f8:	6860      	ldr	r0, [r4, #4]
   140fa:	07c2      	lsls	r2, r0, #31
   140fc:	d406      	bmi.n	1410c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   140fe:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   14102:	2b08      	cmp	r3, #8
   14104:	d802      	bhi.n	1410c <valid_adv_param+0x50>
   14106:	68a3      	ldr	r3, [r4, #8]
   14108:	2b9f      	cmp	r3, #159	; 0x9f
   1410a:	d9dc      	bls.n	140c6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1410c:	f010 0f30 	tst.w	r0, #48	; 0x30
   14110:	d002      	beq.n	14118 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   14112:	6923      	ldr	r3, [r4, #16]
   14114:	2b00      	cmp	r3, #0
   14116:	d0d6      	beq.n	140c6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14118:	06c3      	lsls	r3, r0, #27
   1411a:	d401      	bmi.n	14120 <valid_adv_param+0x64>
   1411c:	6923      	ldr	r3, [r4, #16]
   1411e:	b943      	cbnz	r3, 14132 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   14120:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14124:	429a      	cmp	r2, r3
   14126:	d8ce      	bhi.n	140c6 <valid_adv_param+0xa>
   14128:	2a1f      	cmp	r2, #31
   1412a:	d9cc      	bls.n	140c6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1412c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14130:	d8c9      	bhi.n	140c6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   14132:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14136:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1413a:	bf18      	it	ne
   1413c:	2001      	movne	r0, #1
   1413e:	e7c3      	b.n	140c8 <valid_adv_param+0xc>
   14140:	200002a0 	.word	0x200002a0

00014144 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   14144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14148:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1414a:	2120      	movs	r1, #32
{
   1414c:	4682      	mov	sl, r0
   1414e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   14150:	f7fe fe20 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   14154:	4606      	mov	r6, r0
   14156:	2800      	cmp	r0, #0
   14158:	d05c      	beq.n	14214 <hci_set_ad+0xd0>
   1415a:	2120      	movs	r1, #32
   1415c:	3008      	adds	r0, #8
   1415e:	f00b fc1a 	bl	1f996 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   14162:	2220      	movs	r2, #32
   14164:	2100      	movs	r1, #0
   14166:	4681      	mov	r9, r0
   14168:	f009 fb51 	bl	1d80e <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1416c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   14170:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   14174:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   14176:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   14178:	f8d4 8000 	ldr.w	r8, [r4]
   1417c:	2300      	movs	r3, #0
   1417e:	6862      	ldr	r2, [r4, #4]
   14180:	4293      	cmp	r3, r2
   14182:	d30d      	bcc.n	141a0 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   14184:	9b00      	ldr	r3, [sp, #0]
   14186:	3408      	adds	r4, #8
   14188:	429c      	cmp	r4, r3
   1418a:	d1f5      	bne.n	14178 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1418c:	2200      	movs	r2, #0
   1418e:	4631      	mov	r1, r6
   14190:	4650      	mov	r0, sl
	*data_len = set_data_len;
   14192:	f889 5000 	strb.w	r5, [r9]
}
   14196:	b003      	add	sp, #12
   14198:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1419c:	f7fe bf56 	b.w	1304c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   141a0:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   141a4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   141a8:	1ca8      	adds	r0, r5, #2
   141aa:	1881      	adds	r1, r0, r2
   141ac:	291f      	cmp	r1, #31
   141ae:	d91a      	bls.n	141e6 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   141b0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   141b4:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   141b8:	d101      	bne.n	141be <hci_set_ad+0x7a>
   141ba:	2a00      	cmp	r2, #0
   141bc:	dc11      	bgt.n	141e2 <hci_set_ad+0x9e>
   141be:	4b17      	ldr	r3, [pc, #92]	; (1421c <hci_set_ad+0xd8>)
   141c0:	4917      	ldr	r1, [pc, #92]	; (14220 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   141c2:	4818      	ldr	r0, [pc, #96]	; (14224 <hci_set_ad+0xe0>)
   141c4:	1ac9      	subs	r1, r1, r3
   141c6:	08c9      	lsrs	r1, r1, #3
   141c8:	0189      	lsls	r1, r1, #6
   141ca:	f041 0101 	orr.w	r1, r1, #1
   141ce:	f007 ffd7 	bl	1c180 <log_0>
		net_buf_unref(buf);
   141d2:	4630      	mov	r0, r6
   141d4:	f004 fe26 	bl	18e24 <net_buf_unref>
					return -EINVAL;
   141d8:	f06f 0015 	mvn.w	r0, #21
}
   141dc:	b003      	add	sp, #12
   141de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   141e2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   141e6:	b2d7      	uxtb	r7, r2
   141e8:	1c79      	adds	r1, r7, #1
   141ea:	f80b 1005 	strb.w	r1, [fp, r5]
   141ee:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   141f0:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   141f2:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   141f6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   141fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   141fe:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   14200:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   14202:	f009 fad9 	bl	1d7b8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   14206:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   14208:	443d      	add	r5, r7
   1420a:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1420c:	3301      	adds	r3, #1
   1420e:	f108 0808 	add.w	r8, r8, #8
   14212:	e7b4      	b.n	1417e <hci_set_ad+0x3a>
		return -ENOBUFS;
   14214:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14218:	e7e0      	b.n	141dc <hci_set_ad+0x98>
   1421a:	bf00      	nop
   1421c:	00020854 	.word	0x00020854
   14220:	0002085c 	.word	0x0002085c
   14224:	000222e3 	.word	0x000222e3

00014228 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14228:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1422a:	4606      	mov	r6, r0
   1422c:	4b1e      	ldr	r3, [pc, #120]	; (142a8 <le_adv_start_add_conn+0x80>)
   1422e:	f816 2b09 	ldrb.w	r2, [r6], #9
   14232:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{
   14236:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14238:	2300      	movs	r3, #0
{
   1423a:	4605      	mov	r5, r0
   1423c:	2207      	movs	r2, #7
   1423e:	460f      	mov	r7, r1
   14240:	4630      	mov	r0, r6
   14242:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14244:	9300      	str	r3, [sp, #0]
   14246:	f8cd 3003 	str.w	r3, [sp, #3]
   1424a:	f009 faa5 	bl	1d798 <memcmp>
   1424e:	782a      	ldrb	r2, [r5, #0]
   14250:	4604      	mov	r4, r0
   14252:	b9a8      	cbnz	r0, 14280 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14254:	4b15      	ldr	r3, [pc, #84]	; (142ac <le_adv_start_add_conn+0x84>)
   14256:	6818      	ldr	r0, [r3, #0]
   14258:	8899      	ldrh	r1, [r3, #4]
   1425a:	9002      	str	r0, [sp, #8]
   1425c:	799b      	ldrb	r3, [r3, #6]
   1425e:	f8ad 100c 	strh.w	r1, [sp, #12]
   14262:	4610      	mov	r0, r2
   14264:	a902      	add	r1, sp, #8
   14266:	f88d 300e 	strb.w	r3, [sp, #14]
   1426a:	f000 fd83 	bl	14d74 <bt_conn_add_le>
		if (!conn) {
   1426e:	4605      	mov	r5, r0
   14270:	b1b8      	cbz	r0, 142a2 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   14272:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14274:	f000 fdb4 	bl	14de0 <bt_conn_set_state>
	*out_conn = conn;
   14278:	603d      	str	r5, [r7, #0]
	return 0;
}
   1427a:	4620      	mov	r0, r4
   1427c:	b005      	add	sp, #20
   1427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14280:	4631      	mov	r1, r6
   14282:	4610      	mov	r0, r2
   14284:	f000 feae 	bl	14fe4 <bt_conn_exists_le>
   14288:	4604      	mov	r4, r0
   1428a:	b938      	cbnz	r0, 1429c <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1428c:	7828      	ldrb	r0, [r5, #0]
   1428e:	4631      	mov	r1, r6
   14290:	f000 fd70 	bl	14d74 <bt_conn_add_le>
	if (!conn) {
   14294:	4605      	mov	r5, r0
   14296:	b120      	cbz	r0, 142a2 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14298:	2105      	movs	r1, #5
   1429a:	e7eb      	b.n	14274 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   1429c:	f06f 0415 	mvn.w	r4, #21
   142a0:	e7eb      	b.n	1427a <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   142a2:	f06f 040b 	mvn.w	r4, #11
   142a6:	e7e8      	b.n	1427a <le_adv_start_add_conn+0x52>
   142a8:	200002a0 	.word	0x200002a0
   142ac:	000209ec 	.word	0x000209ec

000142b0 <bt_le_ext_adv_foreach>:
{
   142b0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   142b2:	4801      	ldr	r0, [pc, #4]	; (142b8 <bt_le_ext_adv_foreach+0x8>)
   142b4:	4718      	bx	r3
   142b6:	bf00      	nop
   142b8:	200002b8 	.word	0x200002b8

000142bc <bt_le_adv_lookup_legacy>:
}
   142bc:	4800      	ldr	r0, [pc, #0]	; (142c0 <bt_le_adv_lookup_legacy+0x4>)
   142be:	4770      	bx	lr
   142c0:	200002b8 	.word	0x200002b8

000142c4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   142c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   142c8:	690e      	ldr	r6, [r1, #16]
{
   142ca:	b08f      	sub	sp, #60	; 0x3c
   142cc:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   142ce:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   142d0:	ebb6 0b03 	subs.w	fp, r6, r3
{
   142d4:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   142d6:	488f      	ldr	r0, [pc, #572]	; (14514 <bt_le_adv_start_legacy+0x250>)
	struct bt_conn *conn = NULL;
   142d8:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   142da:	bf18      	it	ne
   142dc:	f04f 0b01 	movne.w	fp, #1
{
   142e0:	460c      	mov	r4, r1
   142e2:	4691      	mov	r9, r2
   142e4:	f009 fd5c 	bl	1dda0 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   142e8:	0787      	lsls	r7, r0, #30
   142ea:	f140 8108 	bpl.w	144fe <bt_le_adv_start_legacy+0x23a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   142ee:	4608      	mov	r0, r1
   142f0:	f7ff fee4 	bl	140bc <valid_adv_param>
   142f4:	b928      	cbnz	r0, 14302 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   142f6:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   142fa:	4658      	mov	r0, fp
   142fc:	b00f      	add	sp, #60	; 0x3c
   142fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   14302:	4620      	mov	r0, r4
   14304:	f009 fd2b 	bl	1dd5e <bt_id_adv_random_addr_check>
   14308:	4680      	mov	r8, r0
   1430a:	2800      	cmp	r0, #0
   1430c:	d0f3      	beq.n	142f6 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1430e:	f105 0710 	add.w	r7, r5, #16
   14312:	4638      	mov	r0, r7
   14314:	f009 fd44 	bl	1dda0 <atomic_get>
   14318:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1431c:	0640      	lsls	r0, r0, #25
   1431e:	f100 80f1 	bmi.w	14504 <bt_le_adv_start_legacy+0x240>
	(void)memset(&set_param, 0, sizeof(set_param));
   14322:	220f      	movs	r2, #15
   14324:	a80a      	add	r0, sp, #40	; 0x28
   14326:	9105      	str	r1, [sp, #20]
   14328:	f009 fa71 	bl	1d80e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1432c:	68a3      	ldr	r3, [r4, #8]
   1432e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   14332:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14334:	68e3      	ldr	r3, [r4, #12]
   14336:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1433a:	f009 fd22 	bl	1dd82 <get_adv_channel_map>
	if (adv->id != param->id) {
   1433e:	782a      	ldrb	r2, [r5, #0]
   14340:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   14342:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14344:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   14348:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1434a:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   1434e:	d004      	beq.n	1435a <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14350:	4870      	ldr	r0, [pc, #448]	; (14514 <bt_le_adv_start_legacy+0x250>)
   14352:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14356:	f009 fd29 	bl	1ddac <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1435a:	4a6f      	ldr	r2, [pc, #444]	; (14518 <bt_le_adv_start_legacy+0x254>)
	adv->id = param->id;
   1435c:	7823      	ldrb	r3, [r4, #0]
   1435e:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14360:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14364:	6861      	ldr	r1, [r4, #4]
   14366:	465a      	mov	r2, fp
   14368:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1436c:	4628      	mov	r0, r5
   1436e:	f7ff fe21 	bl	13fb4 <bt_id_set_adv_own_addr>
	if (err) {
   14372:	4683      	mov	fp, r0
   14374:	2800      	cmp	r0, #0
   14376:	d1c0      	bne.n	142fa <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   14378:	f105 0009 	add.w	r0, r5, #9
   1437c:	2e00      	cmp	r6, #0
   1437e:	d04d      	beq.n	1441c <bt_le_adv_start_legacy+0x158>
	memcpy(dst, src, sizeof(*dst));
   14380:	6921      	ldr	r1, [r4, #16]
   14382:	2207      	movs	r2, #7
   14384:	f009 fa18 	bl	1d7b8 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14388:	6860      	ldr	r0, [r4, #4]
   1438a:	07c1      	lsls	r1, r0, #31
   1438c:	d54f      	bpl.n	1442e <bt_le_adv_start_legacy+0x16a>
		if (dir_adv) {
   1438e:	2e00      	cmp	r6, #0
   14390:	d04a      	beq.n	14428 <bt_le_adv_start_legacy+0x164>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   14392:	f010 0f10 	tst.w	r0, #16
   14396:	bf14      	ite	ne
   14398:	2304      	movne	r3, #4
   1439a:	2301      	moveq	r3, #1
   1439c:	6921      	ldr	r1, [r4, #16]
   1439e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   143a2:	2207      	movs	r2, #7
   143a4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   143a8:	f009 fa06 	bl	1d7b8 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   143ac:	210f      	movs	r1, #15
   143ae:	f242 0006 	movw	r0, #8198	; 0x2006
   143b2:	f7fe fcef 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   143b6:	4683      	mov	fp, r0
   143b8:	2800      	cmp	r0, #0
   143ba:	f000 80a6 	beq.w	1450a <bt_le_adv_start_legacy+0x246>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   143be:	220f      	movs	r2, #15
   143c0:	a90a      	add	r1, sp, #40	; 0x28
   143c2:	3008      	adds	r0, #8
   143c4:	f00b faed 	bl	1f9a2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   143c8:	2200      	movs	r2, #0
   143ca:	4659      	mov	r1, fp
   143cc:	f242 0006 	movw	r0, #8198	; 0x2006
   143d0:	f7fe fe3c 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   143d4:	2800      	cmp	r0, #0
   143d6:	f040 809b 	bne.w	14510 <bt_le_adv_start_legacy+0x24c>
	if (!dir_adv) {
   143da:	2e00      	cmp	r6, #0
   143dc:	d033      	beq.n	14446 <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   143de:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   143e0:	07da      	lsls	r2, r3, #31
   143e2:	d444      	bmi.n	1446e <bt_le_adv_start_legacy+0x1aa>
	return bt_le_adv_set_enable_legacy(adv, enable);
   143e4:	2101      	movs	r1, #1
   143e6:	4628      	mov	r0, r5
   143e8:	f009 fd87 	bl	1defa <bt_le_adv_set_enable_legacy>
	if (err) {
   143ec:	4683      	mov	fp, r0
   143ee:	2800      	cmp	r0, #0
   143f0:	d07e      	beq.n	144f0 <bt_le_adv_start_legacy+0x22c>
   143f2:	4b4a      	ldr	r3, [pc, #296]	; (1451c <bt_le_adv_start_legacy+0x258>)
   143f4:	494a      	ldr	r1, [pc, #296]	; (14520 <bt_le_adv_start_legacy+0x25c>)
		BT_ERR("Failed to start advertiser");
   143f6:	484b      	ldr	r0, [pc, #300]	; (14524 <bt_le_adv_start_legacy+0x260>)
   143f8:	1ac9      	subs	r1, r1, r3
   143fa:	08c9      	lsrs	r1, r1, #3
   143fc:	0189      	lsls	r1, r1, #6
   143fe:	f041 0101 	orr.w	r1, r1, #1
   14402:	f007 febd 	bl	1c180 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14406:	9807      	ldr	r0, [sp, #28]
   14408:	2800      	cmp	r0, #0
   1440a:	f43f af76 	beq.w	142fa <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1440e:	2100      	movs	r1, #0
   14410:	f000 fce6 	bl	14de0 <bt_conn_set_state>
			bt_conn_unref(conn);
   14414:	9807      	ldr	r0, [sp, #28]
   14416:	f009 fe83 	bl	1e120 <bt_conn_unref>
   1441a:	e76e      	b.n	142fa <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1441c:	9608      	str	r6, [sp, #32]
   1441e:	2207      	movs	r2, #7
   14420:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   14424:	a908      	add	r1, sp, #32
   14426:	e7ad      	b.n	14384 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
   14428:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   1442c:	e7be      	b.n	143ac <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   1442e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14430:	b933      	cbnz	r3, 14440 <bt_le_adv_start_legacy+0x17c>
   14432:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   14436:	f1c8 0303 	rsb	r3, r8, #3
   1443a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1443e:	e7b5      	b.n	143ac <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   14440:	f04f 0801 	mov.w	r8, #1
   14444:	e7f7      	b.n	14436 <bt_le_adv_start_legacy+0x172>
   14446:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   14448:	f3c3 4280 	ubfx	r2, r3, #18, #1
   1444c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   14450:	e9cd 8301 	strd	r8, r3, [sp, #4]
   14454:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14456:	9203      	str	r2, [sp, #12]
   14458:	9300      	str	r3, [sp, #0]
   1445a:	4652      	mov	r2, sl
   1445c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1445e:	4649      	mov	r1, r9
   14460:	4628      	mov	r0, r5
   14462:	f009 fcc9 	bl	1ddf8 <le_adv_update.constprop.0>
		if (err) {
   14466:	4683      	mov	fp, r0
   14468:	2800      	cmp	r0, #0
   1446a:	d0b8      	beq.n	143de <bt_le_adv_start_legacy+0x11a>
   1446c:	e745      	b.n	142fa <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1446e:	a907      	add	r1, sp, #28
   14470:	4628      	mov	r0, r5
   14472:	f7ff fed9 	bl	14228 <le_adv_start_add_conn>
		if (err) {
   14476:	4683      	mov	fp, r0
   14478:	2800      	cmp	r0, #0
   1447a:	d0b3      	beq.n	143e4 <bt_le_adv_start_legacy+0x120>
			if (err == -ENOMEM && !dir_adv &&
   1447c:	f110 0f0c 	cmn.w	r0, #12
   14480:	f47f af3b 	bne.w	142fa <bt_le_adv_start_legacy+0x36>
   14484:	2e00      	cmp	r6, #0
   14486:	f47f af38 	bne.w	142fa <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1448a:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1448c:	079b      	lsls	r3, r3, #30
   1448e:	f53f af34 	bmi.w	142fa <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14492:	6860      	ldr	r0, [r4, #4]
   14494:	f080 0002 	eor.w	r0, r0, #2
   14498:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   1449c:	f00b 0201 	and.w	r2, fp, #1
   144a0:	210c      	movs	r1, #12
   144a2:	4638      	mov	r0, r7
   144a4:	f009 fc91 	bl	1ddca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   144a8:	6862      	ldr	r2, [r4, #4]
   144aa:	2107      	movs	r1, #7
   144ac:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   144b0:	4638      	mov	r0, r7
   144b2:	f009 fc8a 	bl	1ddca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   144b6:	6862      	ldr	r2, [r4, #4]
   144b8:	2112      	movs	r1, #18
   144ba:	f3c2 4280 	ubfx	r2, r2, #18, #1
   144be:	4638      	mov	r0, r7
   144c0:	f009 fc83 	bl	1ddca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   144c4:	6862      	ldr	r2, [r4, #4]
   144c6:	2108      	movs	r1, #8
   144c8:	f002 0201 	and.w	r2, r2, #1
   144cc:	4638      	mov	r0, r7
   144ce:	f009 fc7c 	bl	1ddca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   144d2:	4642      	mov	r2, r8
   144d4:	2109      	movs	r1, #9
   144d6:	4638      	mov	r0, r7
   144d8:	f009 fc77 	bl	1ddca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   144dc:	6862      	ldr	r2, [r4, #4]
   144de:	210b      	movs	r1, #11
   144e0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   144e4:	4638      	mov	r0, r7
   144e6:	f009 fc70 	bl	1ddca <atomic_set_bit_to>
	return 0;
   144ea:	f04f 0b00 	mov.w	fp, #0
   144ee:	e704      	b.n	142fa <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   144f0:	9807      	ldr	r0, [sp, #28]
   144f2:	b108      	cbz	r0, 144f8 <bt_le_adv_start_legacy+0x234>
		bt_conn_unref(conn);
   144f4:	f009 fe14 	bl	1e120 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   144f8:	2e00      	cmp	r6, #0
   144fa:	d1cf      	bne.n	1449c <bt_le_adv_start_legacy+0x1d8>
   144fc:	e7c9      	b.n	14492 <bt_le_adv_start_legacy+0x1ce>
		return -EAGAIN;
   144fe:	f06f 0b0a 	mvn.w	fp, #10
   14502:	e6fa      	b.n	142fa <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   14504:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   14508:	e6f7      	b.n	142fa <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1450a:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   1450e:	e6f4      	b.n	142fa <bt_le_adv_start_legacy+0x36>
   14510:	4683      	mov	fp, r0
   14512:	e6f2      	b.n	142fa <bt_le_adv_start_legacy+0x36>
   14514:	20000338 	.word	0x20000338
   14518:	200002a0 	.word	0x200002a0
   1451c:	00020854 	.word	0x00020854
   14520:	0002085c 	.word	0x0002085c
   14524:	000222fc 	.word	0x000222fc

00014528 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14528:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1452a:	9c04      	ldr	r4, [sp, #16]
   1452c:	e9cd 3400 	strd	r3, r4, [sp]
   14530:	4613      	mov	r3, r2
   14532:	460a      	mov	r2, r1
   14534:	4601      	mov	r1, r0
   14536:	4802      	ldr	r0, [pc, #8]	; (14540 <bt_le_adv_start+0x18>)
   14538:	f7ff fec4 	bl	142c4 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
   1453c:	b002      	add	sp, #8
   1453e:	bd10      	pop	{r4, pc}
   14540:	200002b8 	.word	0x200002b8

00014544 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   14544:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14546:	481e      	ldr	r0, [pc, #120]	; (145c0 <bt_le_adv_resume+0x7c>)
   14548:	4c1d      	ldr	r4, [pc, #116]	; (145c0 <bt_le_adv_resume+0x7c>)
   1454a:	f009 fc29 	bl	1dda0 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1454e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   14552:	d032      	beq.n	145ba <bt_le_adv_resume+0x76>
   14554:	4620      	mov	r0, r4
   14556:	f009 fc23 	bl	1dda0 <atomic_get>
   1455a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1455c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   14560:	d42b      	bmi.n	145ba <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14562:	4620      	mov	r0, r4
   14564:	f009 fc1c 	bl	1dda0 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14568:	05c3      	lsls	r3, r0, #23
   1456a:	d526      	bpl.n	145ba <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   1456c:	a901      	add	r1, sp, #4
   1456e:	f1a4 0010 	sub.w	r0, r4, #16
   14572:	f7ff fe59 	bl	14228 <le_adv_start_add_conn>
	if (err) {
   14576:	bb00      	cbnz	r0, 145ba <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14578:	2101      	movs	r1, #1
   1457a:	f1a4 0010 	sub.w	r0, r4, #16
   1457e:	f009 fcbc 	bl	1defa <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   14582:	b150      	cbz	r0, 1459a <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14584:	4629      	mov	r1, r5
   14586:	9801      	ldr	r0, [sp, #4]
   14588:	f000 fc2a 	bl	14de0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1458c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14590:	4620      	mov	r0, r4
   14592:	f009 fc0b 	bl	1ddac <atomic_and>
	return (old & mask) != 0;
   14596:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   1459a:	9801      	ldr	r0, [sp, #4]
   1459c:	f009 fdc0 	bl	1e120 <bt_conn_unref>
	if (persist_paused) {
   145a0:	b15d      	cbz	r5, 145ba <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   145a2:	f3bf 8f5b 	dmb	ish
   145a6:	e854 3f00 	ldrex	r3, [r4]
   145aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   145ae:	e844 3200 	strex	r2, r3, [r4]
   145b2:	2a00      	cmp	r2, #0
   145b4:	d1f7      	bne.n	145a6 <bt_le_adv_resume+0x62>
   145b6:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   145ba:	b003      	add	sp, #12
   145bc:	bd30      	pop	{r4, r5, pc}
   145be:	bf00      	nop
   145c0:	200002c8 	.word	0x200002c8

000145c4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   145c4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
   145c6:	4904      	ldr	r1, [pc, #16]	; (145d8 <bt_pub_key_is_debug+0x14>)
   145c8:	2240      	movs	r2, #64	; 0x40
   145ca:	f009 f8e5 	bl	1d798 <memcmp>
}
   145ce:	fab0 f080 	clz	r0, r0
   145d2:	0940      	lsrs	r0, r0, #5
   145d4:	bd08      	pop	{r3, pc}
   145d6:	bf00      	nop
   145d8:	000223ac 	.word	0x000223ac

000145dc <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   145dc:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   145de:	4b44      	ldr	r3, [pc, #272]	; (146f0 <bt_pub_key_gen+0x114>)
   145e0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   145e4:	f003 0306 	and.w	r3, r3, #6
   145e8:	2b06      	cmp	r3, #6
   145ea:	d00d      	beq.n	14608 <bt_pub_key_gen+0x2c>
   145ec:	4b41      	ldr	r3, [pc, #260]	; (146f4 <bt_pub_key_gen+0x118>)
   145ee:	4942      	ldr	r1, [pc, #264]	; (146f8 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   145f0:	4842      	ldr	r0, [pc, #264]	; (146fc <bt_pub_key_gen+0x120>)
   145f2:	1ac9      	subs	r1, r1, r3
   145f4:	08c9      	lsrs	r1, r1, #3
   145f6:	0189      	lsls	r1, r1, #6
   145f8:	f041 0102 	orr.w	r1, r1, #2
   145fc:	f007 fdc0 	bl	1c180 <log_0>
		return -ENOTSUP;
   14600:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   14604:	4630      	mov	r0, r6
   14606:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   14608:	2800      	cmp	r0, #0
   1460a:	d06d      	beq.n	146e8 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1460c:	4d3c      	ldr	r5, [pc, #240]	; (14700 <bt_pub_key_gen+0x124>)
   1460e:	682a      	ldr	r2, [r5, #0]
   14610:	b10a      	cbz	r2, 14616 <bt_pub_key_gen+0x3a>
   14612:	1f13      	subs	r3, r2, #4
   14614:	b9bb      	cbnz	r3, 14646 <bt_pub_key_gen+0x6a>
	parent->next = child;
   14616:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   14618:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1461a:	1d03      	adds	r3, r0, #4
	list->head = node;
   1461c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1461e:	b902      	cbnz	r2, 14622 <bt_pub_key_gen+0x46>
	list->tail = node;
   14620:	606b      	str	r3, [r5, #4]
   14622:	4c38      	ldr	r4, [pc, #224]	; (14704 <bt_pub_key_gen+0x128>)
   14624:	f3bf 8f5b 	dmb	ish
   14628:	e854 2f00 	ldrex	r2, [r4]
   1462c:	f042 0310 	orr.w	r3, r2, #16
   14630:	e844 3100 	strex	r1, r3, [r4]
   14634:	2900      	cmp	r1, #0
   14636:	d1f7      	bne.n	14628 <bt_pub_key_gen+0x4c>
   14638:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1463c:	f012 0210 	ands.w	r2, r2, #16
   14640:	d017      	beq.n	14672 <bt_pub_key_gen+0x96>
		return 0;
   14642:	2600      	movs	r6, #0
   14644:	e7de      	b.n	14604 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   14646:	4298      	cmp	r0, r3
   14648:	d10c      	bne.n	14664 <bt_pub_key_gen+0x88>
   1464a:	4b2a      	ldr	r3, [pc, #168]	; (146f4 <bt_pub_key_gen+0x118>)
   1464c:	492a      	ldr	r1, [pc, #168]	; (146f8 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
   1464e:	482e      	ldr	r0, [pc, #184]	; (14708 <bt_pub_key_gen+0x12c>)
   14650:	1ac9      	subs	r1, r1, r3
   14652:	08c9      	lsrs	r1, r1, #3
   14654:	0189      	lsls	r1, r1, #6
   14656:	f041 0102 	orr.w	r1, r1, #2
   1465a:	f007 fd91 	bl	1c180 <log_0>
			return -EALREADY;
   1465e:	f06f 0677 	mvn.w	r6, #119	; 0x77
   14662:	e7cf      	b.n	14604 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14664:	1d19      	adds	r1, r3, #4
   14666:	d0d6      	beq.n	14616 <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14668:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1466a:	2b00      	cmp	r3, #0
   1466c:	d0d3      	beq.n	14616 <bt_pub_key_gen+0x3a>
   1466e:	3b04      	subs	r3, #4
   14670:	e7d0      	b.n	14614 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14672:	f3bf 8f5b 	dmb	ish
   14676:	e854 3f00 	ldrex	r3, [r4]
   1467a:	f023 0308 	bic.w	r3, r3, #8
   1467e:	e844 3100 	strex	r1, r3, [r4]
   14682:	2900      	cmp	r1, #0
   14684:	d1f7      	bne.n	14676 <bt_pub_key_gen+0x9a>
   14686:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1468a:	4611      	mov	r1, r2
   1468c:	f242 0025 	movw	r0, #8229	; 0x2025
   14690:	f7fe fcdc 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   14694:	4606      	mov	r6, r0
   14696:	2800      	cmp	r0, #0
   14698:	d0d3      	beq.n	14642 <bt_pub_key_gen+0x66>
   1469a:	4b16      	ldr	r3, [pc, #88]	; (146f4 <bt_pub_key_gen+0x118>)
   1469c:	4916      	ldr	r1, [pc, #88]	; (146f8 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
   1469e:	481b      	ldr	r0, [pc, #108]	; (1470c <bt_pub_key_gen+0x130>)
   146a0:	1ac9      	subs	r1, r1, r3
   146a2:	08c9      	lsrs	r1, r1, #3
   146a4:	0189      	lsls	r1, r1, #6
   146a6:	f041 0101 	orr.w	r1, r1, #1
   146aa:	f007 fd69 	bl	1c180 <log_0>
   146ae:	f3bf 8f5b 	dmb	ish
   146b2:	e854 3f00 	ldrex	r3, [r4]
   146b6:	f023 0310 	bic.w	r3, r3, #16
   146ba:	e844 3200 	strex	r2, r3, [r4]
   146be:	2a00      	cmp	r2, #0
   146c0:	d1f7      	bne.n	146b2 <bt_pub_key_gen+0xd6>
   146c2:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   146c6:	682c      	ldr	r4, [r5, #0]
   146c8:	b91c      	cbnz	r4, 146d2 <bt_pub_key_gen+0xf6>
	list->head = NULL;
   146ca:	2300      	movs	r3, #0
	list->tail = NULL;
   146cc:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   146d0:	e798      	b.n	14604 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   146d2:	3c04      	subs	r4, #4
   146d4:	2c00      	cmp	r4, #0
   146d6:	d0f8      	beq.n	146ca <bt_pub_key_gen+0xee>
			if (cb->func) {
   146d8:	6823      	ldr	r3, [r4, #0]
   146da:	b10b      	cbz	r3, 146e0 <bt_pub_key_gen+0x104>
				cb->func(NULL);
   146dc:	2000      	movs	r0, #0
   146de:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   146e0:	1d23      	adds	r3, r4, #4
   146e2:	d0f2      	beq.n	146ca <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   146e4:	6864      	ldr	r4, [r4, #4]
	return node->next;
   146e6:	e7ef      	b.n	146c8 <bt_pub_key_gen+0xec>
		return -EINVAL;
   146e8:	f06f 0615 	mvn.w	r6, #21
   146ec:	e78a      	b.n	14604 <bt_pub_key_gen+0x28>
   146ee:	bf00      	nop
   146f0:	200002a0 	.word	0x200002a0
   146f4:	00020854 	.word	0x00020854
   146f8:	00020884 	.word	0x00020884
   146fc:	0002231e 	.word	0x0002231e
   14700:	20001e50 	.word	0x20001e50
   14704:	20000338 	.word	0x20000338
   14708:	0002233d 	.word	0x0002233d
   1470c:	00022359 	.word	0x00022359

00014710 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14710:	4b05      	ldr	r3, [pc, #20]	; (14728 <bt_pub_key_get+0x18>)
   14712:	f3bf 8f5b 	dmb	ish
   14716:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   14718:	4804      	ldr	r0, [pc, #16]	; (1472c <bt_pub_key_get+0x1c>)
   1471a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1471e:	f013 0f08 	tst.w	r3, #8
}
   14722:	bf08      	it	eq
   14724:	2000      	moveq	r0, #0
   14726:	4770      	bx	lr
   14728:	20000338 	.word	0x20000338
   1472c:	20002154 	.word	0x20002154

00014730 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   14730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   14732:	4d25      	ldr	r5, [pc, #148]	; (147c8 <bt_dh_key_gen+0x98>)
   14734:	682b      	ldr	r3, [r5, #0]
   14736:	428b      	cmp	r3, r1
{
   14738:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   1473a:	d03f      	beq.n	147bc <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1473c:	b11b      	cbz	r3, 14746 <bt_dh_key_gen+0x16>
		return -EBUSY;
   1473e:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   14742:	4620      	mov	r0, r4
   14744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14746:	4b21      	ldr	r3, [pc, #132]	; (147cc <bt_dh_key_gen+0x9c>)
   14748:	f3bf 8f5b 	dmb	ish
   1474c:	681a      	ldr	r2, [r3, #0]
   1474e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14752:	f3c2 1700 	ubfx	r7, r2, #4, #1
   14756:	06d2      	lsls	r2, r2, #27
   14758:	d4f1      	bmi.n	1473e <bt_dh_key_gen+0xe>
   1475a:	f3bf 8f5b 	dmb	ish
   1475e:	681b      	ldr	r3, [r3, #0]
   14760:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   14764:	071b      	lsls	r3, r3, #28
   14766:	d52c      	bpl.n	147c2 <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
   14768:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1476a:	f242 0026 	movw	r0, #8230	; 0x2026
   1476e:	2140      	movs	r1, #64	; 0x40
   14770:	f7fe fb10 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   14774:	4604      	mov	r4, r0
   14776:	b1f0      	cbz	r0, 147b6 <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
   14778:	2140      	movs	r1, #64	; 0x40
   1477a:	3008      	adds	r0, #8
   1477c:	f00b f90b 	bl	1f996 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   14780:	2240      	movs	r2, #64	; 0x40
   14782:	4631      	mov	r1, r6
   14784:	f009 f818 	bl	1d7b8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   14788:	4621      	mov	r1, r4
   1478a:	463a      	mov	r2, r7
   1478c:	f242 0026 	movw	r0, #8230	; 0x2026
   14790:	f7fe fc5c 	bl	1304c <bt_hci_cmd_send_sync>
	if (err) {
   14794:	4604      	mov	r4, r0
   14796:	2800      	cmp	r0, #0
   14798:	d0d3      	beq.n	14742 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1479a:	2300      	movs	r3, #0
   1479c:	602b      	str	r3, [r5, #0]
   1479e:	4a0c      	ldr	r2, [pc, #48]	; (147d0 <bt_dh_key_gen+0xa0>)
   147a0:	4b0c      	ldr	r3, [pc, #48]	; (147d4 <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   147a2:	480d      	ldr	r0, [pc, #52]	; (147d8 <bt_dh_key_gen+0xa8>)
   147a4:	1ad2      	subs	r2, r2, r3
   147a6:	08d2      	lsrs	r2, r2, #3
   147a8:	0192      	lsls	r2, r2, #6
   147aa:	f042 0202 	orr.w	r2, r2, #2
   147ae:	4621      	mov	r1, r4
   147b0:	f007 fcf3 	bl	1c19a <log_1>
		return err;
   147b4:	e7c5      	b.n	14742 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   147b6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   147ba:	e7ee      	b.n	1479a <bt_dh_key_gen+0x6a>
		return -EALREADY;
   147bc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   147c0:	e7bf      	b.n	14742 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   147c2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   147c6:	e7bc      	b.n	14742 <bt_dh_key_gen+0x12>
   147c8:	20001e4c 	.word	0x20001e4c
   147cc:	20000338 	.word	0x20000338
   147d0:	00020884 	.word	0x00020884
   147d4:	00020854 	.word	0x00020854
   147d8:	00022383 	.word	0x00022383

000147dc <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   147dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   147de:	4c1d      	ldr	r4, [pc, #116]	; (14854 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   147e0:	6886      	ldr	r6, [r0, #8]
   147e2:	f3bf 8f5b 	dmb	ish
   147e6:	e854 3f00 	ldrex	r3, [r4]
   147ea:	f023 0310 	bic.w	r3, r3, #16
   147ee:	e844 3200 	strex	r2, r3, [r4]
   147f2:	2a00      	cmp	r2, #0
   147f4:	d1f7      	bne.n	147e6 <bt_hci_evt_le_pkey_complete+0xa>
   147f6:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   147fa:	7833      	ldrb	r3, [r6, #0]
   147fc:	b983      	cbnz	r3, 14820 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, 64);
   147fe:	4816      	ldr	r0, [pc, #88]	; (14858 <bt_hci_evt_le_pkey_complete+0x7c>)
   14800:	2240      	movs	r2, #64	; 0x40
   14802:	1c71      	adds	r1, r6, #1
   14804:	f008 ffd8 	bl	1d7b8 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14808:	f3bf 8f5b 	dmb	ish
   1480c:	e854 3f00 	ldrex	r3, [r4]
   14810:	f043 0308 	orr.w	r3, r3, #8
   14814:	e844 3200 	strex	r2, r3, [r4]
   14818:	2a00      	cmp	r2, #0
   1481a:	d1f7      	bne.n	1480c <bt_hci_evt_le_pkey_complete+0x30>
   1481c:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14820:	4d0e      	ldr	r5, [pc, #56]	; (1485c <bt_hci_evt_le_pkey_complete+0x80>)
   14822:	682c      	ldr	r4, [r5, #0]
   14824:	b91c      	cbnz	r4, 1482e <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   14826:	2300      	movs	r3, #0
	list->tail = NULL;
   14828:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   1482e:	4f0a      	ldr	r7, [pc, #40]	; (14858 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14830:	3c04      	subs	r4, #4
   14832:	2c00      	cmp	r4, #0
   14834:	d0f7      	beq.n	14826 <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   14836:	6823      	ldr	r3, [r4, #0]
   14838:	b12b      	cbz	r3, 14846 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   1483a:	7832      	ldrb	r2, [r6, #0]
   1483c:	2a00      	cmp	r2, #0
   1483e:	bf0c      	ite	eq
   14840:	4638      	moveq	r0, r7
   14842:	2000      	movne	r0, #0
   14844:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   14846:	1d23      	adds	r3, r4, #4
   14848:	d0ed      	beq.n	14826 <bt_hci_evt_le_pkey_complete+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1484a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1484c:	2c00      	cmp	r4, #0
   1484e:	d0ea      	beq.n	14826 <bt_hci_evt_le_pkey_complete+0x4a>
   14850:	3c04      	subs	r4, #4
   14852:	e7ee      	b.n	14832 <bt_hci_evt_le_pkey_complete+0x56>
   14854:	20000338 	.word	0x20000338
   14858:	20002154 	.word	0x20002154
   1485c:	20001e50 	.word	0x20001e50

00014860 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   14860:	4905      	ldr	r1, [pc, #20]	; (14878 <bt_hci_evt_le_dhkey_complete+0x18>)
   14862:	680b      	ldr	r3, [r1, #0]
   14864:	b133      	cbz	r3, 14874 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   14866:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   14868:	2000      	movs	r0, #0
   1486a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1486c:	7811      	ldrb	r1, [r2, #0]
   1486e:	b901      	cbnz	r1, 14872 <bt_hci_evt_le_dhkey_complete+0x12>
   14870:	1c50      	adds	r0, r2, #1
   14872:	4718      	bx	r3
	}
}
   14874:	4770      	bx	lr
   14876:	bf00      	nop
   14878:	20001e4c 	.word	0x20001e4c

0001487c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   1487c:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1487e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   14882:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   14884:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   14886:	4801      	ldr	r0, [pc, #4]	; (1488c <tx_free+0x10>)
   14888:	f00b ba86 	b.w	1fd98 <k_queue_append>
   1488c:	200007a8 	.word	0x200007a8

00014890 <notify_connected>:
{
   14890:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   14892:	4b09      	ldr	r3, [pc, #36]	; (148b8 <notify_connected+0x28>)
   14894:	681d      	ldr	r5, [r3, #0]
{
   14896:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   14898:	7b21      	ldrb	r1, [r4, #12]
   1489a:	b92d      	cbnz	r5, 148a8 <notify_connected+0x18>
	if (!conn->err) {
   1489c:	b951      	cbnz	r1, 148b4 <notify_connected+0x24>
		bt_gatt_connected(conn);
   1489e:	4620      	mov	r0, r4
}
   148a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   148a4:	f002 bd04 	b.w	172b0 <bt_gatt_connected>
		if (cb->connected) {
   148a8:	682b      	ldr	r3, [r5, #0]
   148aa:	b10b      	cbz	r3, 148b0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   148ac:	4620      	mov	r0, r4
   148ae:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   148b0:	69ad      	ldr	r5, [r5, #24]
   148b2:	e7f1      	b.n	14898 <notify_connected+0x8>
}
   148b4:	bd38      	pop	{r3, r4, r5, pc}
   148b6:	bf00      	nop
   148b8:	20001e5c 	.word	0x20001e5c

000148bc <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   148bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   148c0:	694d      	ldr	r5, [r1, #20]
{
   148c2:	4604      	mov	r4, r0
   148c4:	460e      	mov	r6, r1
   148c6:	4691      	mov	r9, r2
   148c8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   148ca:	f04f 33ff 	mov.w	r3, #4294967295
   148ce:	4845      	ldr	r0, [pc, #276]	; (149e4 <send_frag+0x128>)
   148d0:	f04f 32ff 	mov.w	r2, #4294967295
   148d4:	f005 ff88 	bl	1a7e8 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   148d8:	7b63      	ldrb	r3, [r4, #13]
   148da:	2b07      	cmp	r3, #7
   148dc:	d151      	bne.n	14982 <send_frag+0xc6>
	__asm__ volatile(
   148de:	f04f 0340 	mov.w	r3, #64	; 0x40
   148e2:	f3ef 8211 	mrs	r2, BASEPRI
   148e6:	f383 8811 	msr	BASEPRI, r3
   148ea:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   148ee:	2d00      	cmp	r5, #0
   148f0:	d059      	beq.n	149a6 <send_frag+0xea>
	parent->next = child;
   148f2:	2300      	movs	r3, #0
   148f4:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   148f6:	69a3      	ldr	r3, [r4, #24]
   148f8:	2b00      	cmp	r3, #0
   148fa:	d151      	bne.n	149a0 <send_frag+0xe4>
	list->head = node;
   148fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14900:	f382 8811 	msr	BASEPRI, r2
   14904:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14908:	2104      	movs	r1, #4
   1490a:	f106 0008 	add.w	r0, r6, #8
   1490e:	f00b f859 	bl	1f9c4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14912:	8823      	ldrh	r3, [r4, #0]
   14914:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   14918:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1491c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1491e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14922:	3b04      	subs	r3, #4
   14924:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14926:	2302      	movs	r3, #2
   14928:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1492a:	4630      	mov	r0, r6
   1492c:	f009 f978 	bl	1dc20 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   14930:	4601      	mov	r1, r0
   14932:	2800      	cmp	r0, #0
   14934:	d053      	beq.n	149de <send_frag+0x122>
   14936:	4b2c      	ldr	r3, [pc, #176]	; (149e8 <send_frag+0x12c>)
   14938:	4a2c      	ldr	r2, [pc, #176]	; (149ec <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
   1493a:	482d      	ldr	r0, [pc, #180]	; (149f0 <send_frag+0x134>)
   1493c:	1ad2      	subs	r2, r2, r3
   1493e:	08d2      	lsrs	r2, r2, #3
   14940:	0192      	lsls	r2, r2, #6
   14942:	f042 0201 	orr.w	r2, r2, #1
   14946:	f007 fc28 	bl	1c19a <log_1>
	__asm__ volatile(
   1494a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1494e:	f3ef 8111 	mrs	r1, BASEPRI
   14952:	f383 8811 	msr	BASEPRI, r3
   14956:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   1495a:	2d00      	cmp	r5, #0
   1495c:	d039      	beq.n	149d2 <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1495e:	6963      	ldr	r3, [r4, #20]
   14960:	2200      	movs	r2, #0
   14962:	b153      	cbz	r3, 1497a <send_frag+0xbe>
   14964:	429d      	cmp	r5, r3
   14966:	d131      	bne.n	149cc <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   14968:	682b      	ldr	r3, [r5, #0]
   1496a:	bb4a      	cbnz	r2, 149c0 <send_frag+0x104>
   1496c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1496e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   14970:	4295      	cmp	r5, r2
   14972:	d100      	bne.n	14976 <send_frag+0xba>
	list->tail = node;
   14974:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   14976:	2300      	movs	r3, #0
   14978:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1497a:	f381 8811 	msr	BASEPRI, r1
   1497e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   14982:	4818      	ldr	r0, [pc, #96]	; (149e4 <send_frag+0x128>)
   14984:	f005 ff0a 	bl	1a79c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   14988:	b115      	cbz	r5, 14990 <send_frag+0xd4>
		tx_free(tx);
   1498a:	4628      	mov	r0, r5
   1498c:	f7ff ff76 	bl	1487c <tx_free>
	}

	if (always_consume) {
   14990:	b11f      	cbz	r7, 1499a <send_frag+0xde>
		net_buf_unref(buf);
   14992:	4630      	mov	r0, r6
   14994:	f004 fa46 	bl	18e24 <net_buf_unref>
	}
	return false;
   14998:	2700      	movs	r7, #0
}
   1499a:	4638      	mov	r0, r7
   1499c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   149a0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   149a2:	61a5      	str	r5, [r4, #24]
}
   149a4:	e7ac      	b.n	14900 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   149a6:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   149a8:	b133      	cbz	r3, 149b8 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   149aa:	f103 080c 	add.w	r8, r3, #12
   149ae:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   149b0:	3301      	adds	r3, #1
   149b2:	f8c8 3000 	str.w	r3, [r8]
   149b6:	e7a3      	b.n	14900 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   149b8:	69e3      	ldr	r3, [r4, #28]
   149ba:	f104 081c 	add.w	r8, r4, #28
   149be:	e7f7      	b.n	149b0 <send_frag+0xf4>
	parent->next = child;
   149c0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   149c2:	69a3      	ldr	r3, [r4, #24]
   149c4:	429d      	cmp	r5, r3
	list->tail = node;
   149c6:	bf08      	it	eq
   149c8:	61a2      	streq	r2, [r4, #24]
}
   149ca:	e7d4      	b.n	14976 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   149cc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   149ce:	681b      	ldr	r3, [r3, #0]
   149d0:	e7c7      	b.n	14962 <send_frag+0xa6>
			(*pending_no_cb)--;
   149d2:	f8d8 3000 	ldr.w	r3, [r8]
   149d6:	3b01      	subs	r3, #1
   149d8:	f8c8 3000 	str.w	r3, [r8]
   149dc:	e7cd      	b.n	1497a <send_frag+0xbe>
	return true;
   149de:	2701      	movs	r7, #1
   149e0:	e7db      	b.n	1499a <send_frag+0xde>
   149e2:	bf00      	nop
   149e4:	20000370 	.word	0x20000370
   149e8:	00020854 	.word	0x00020854
   149ec:	00020874 	.word	0x00020874
   149f0:	00021d3c 	.word	0x00021d3c

000149f4 <bt_conn_get_pkts>:
}
   149f4:	4800      	ldr	r0, [pc, #0]	; (149f8 <bt_conn_get_pkts+0x4>)
   149f6:	4770      	bx	lr
   149f8:	20000370 	.word	0x20000370

000149fc <notify_le_param_updated>:
{
   149fc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   149fe:	f3bf 8f5b 	dmb	ish
   14a02:	6842      	ldr	r2, [r0, #4]
   14a04:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   14a08:	0592      	lsls	r2, r2, #22
{
   14a0a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   14a0c:	f100 0304 	add.w	r3, r0, #4
   14a10:	d519      	bpl.n	14a46 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   14a12:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   14a16:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   14a1a:	4291      	cmp	r1, r2
   14a1c:	d813      	bhi.n	14a46 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   14a1e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   14a22:	4291      	cmp	r1, r2
   14a24:	d30f      	bcc.n	14a46 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
   14a26:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   14a2a:	4291      	cmp	r1, r2
   14a2c:	d10b      	bne.n	14a46 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14a2e:	f3bf 8f5b 	dmb	ish
   14a32:	e853 2f00 	ldrex	r2, [r3]
   14a36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   14a3a:	e843 2100 	strex	r1, r2, [r3]
   14a3e:	2900      	cmp	r1, #0
   14a40:	d1f7      	bne.n	14a32 <notify_le_param_updated+0x36>
   14a42:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   14a46:	4b08      	ldr	r3, [pc, #32]	; (14a68 <notify_le_param_updated+0x6c>)
   14a48:	681d      	ldr	r5, [r3, #0]
   14a4a:	b905      	cbnz	r5, 14a4e <notify_le_param_updated+0x52>
}
   14a4c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   14a4e:	68ee      	ldr	r6, [r5, #12]
   14a50:	b13e      	cbz	r6, 14a62 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   14a52:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   14a56:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   14a5a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   14a5e:	4620      	mov	r0, r4
   14a60:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   14a62:	69ad      	ldr	r5, [r5, #24]
   14a64:	e7f1      	b.n	14a4a <notify_le_param_updated+0x4e>
   14a66:	bf00      	nop
   14a68:	20001e5c 	.word	0x20001e5c

00014a6c <le_param_req>:
{
   14a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a6e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   14a70:	4608      	mov	r0, r1
{
   14a72:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   14a74:	f009 f8b4 	bl	1dbe0 <bt_le_conn_params_valid>
   14a78:	4604      	mov	r4, r0
   14a7a:	b910      	cbnz	r0, 14a82 <le_param_req+0x16>
		return false;
   14a7c:	2400      	movs	r4, #0
}
   14a7e:	4620      	mov	r0, r4
   14a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   14a82:	4b09      	ldr	r3, [pc, #36]	; (14aa8 <le_param_req+0x3c>)
   14a84:	681e      	ldr	r6, [r3, #0]
   14a86:	2e00      	cmp	r6, #0
   14a88:	d0f9      	beq.n	14a7e <le_param_req+0x12>
		if (!cb->le_param_req) {
   14a8a:	68b3      	ldr	r3, [r6, #8]
   14a8c:	b90b      	cbnz	r3, 14a92 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   14a8e:	69b6      	ldr	r6, [r6, #24]
   14a90:	e7f9      	b.n	14a86 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   14a92:	4629      	mov	r1, r5
   14a94:	4638      	mov	r0, r7
   14a96:	4798      	blx	r3
   14a98:	2800      	cmp	r0, #0
   14a9a:	d0ef      	beq.n	14a7c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   14a9c:	4628      	mov	r0, r5
   14a9e:	f009 f89f 	bl	1dbe0 <bt_le_conn_params_valid>
   14aa2:	2800      	cmp	r0, #0
   14aa4:	d1f3      	bne.n	14a8e <le_param_req+0x22>
   14aa6:	e7e9      	b.n	14a7c <le_param_req+0x10>
   14aa8:	20001e5c 	.word	0x20001e5c

00014aac <bt_conn_identity_resolved>:
{
   14aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   14aae:	78c3      	ldrb	r3, [r0, #3]
{
   14ab0:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   14ab2:	b93b      	cbnz	r3, 14ac4 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   14ab4:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   14ab8:	4b08      	ldr	r3, [pc, #32]	; (14adc <bt_conn_identity_resolved+0x30>)
   14aba:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14abc:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   14ac0:	b91d      	cbnz	r5, 14aca <bt_conn_identity_resolved+0x1e>
}
   14ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   14ac4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   14ac8:	e7f6      	b.n	14ab8 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   14aca:	692b      	ldr	r3, [r5, #16]
   14acc:	b11b      	cbz	r3, 14ad6 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14ace:	463a      	mov	r2, r7
   14ad0:	4631      	mov	r1, r6
   14ad2:	4620      	mov	r0, r4
   14ad4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14ad6:	69ad      	ldr	r5, [r5, #24]
   14ad8:	e7f2      	b.n	14ac0 <bt_conn_identity_resolved+0x14>
   14ada:	bf00      	nop
   14adc:	20001e5c 	.word	0x20001e5c

00014ae0 <bt_conn_security_changed>:
{
   14ae0:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   14ae2:	7a43      	ldrb	r3, [r0, #9]
   14ae4:	7283      	strb	r3, [r0, #10]
{
   14ae6:	4604      	mov	r4, r0
   14ae8:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   14aea:	f009 fbf1 	bl	1e2d0 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   14aee:	4b06      	ldr	r3, [pc, #24]	; (14b08 <bt_conn_security_changed+0x28>)
   14af0:	681d      	ldr	r5, [r3, #0]
   14af2:	b905      	cbnz	r5, 14af6 <bt_conn_security_changed+0x16>
}
   14af4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   14af6:	696b      	ldr	r3, [r5, #20]
   14af8:	b11b      	cbz	r3, 14b02 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   14afa:	7a61      	ldrb	r1, [r4, #9]
   14afc:	4632      	mov	r2, r6
   14afe:	4620      	mov	r0, r4
   14b00:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14b02:	69ad      	ldr	r5, [r5, #24]
   14b04:	e7f5      	b.n	14af2 <bt_conn_security_changed+0x12>
   14b06:	bf00      	nop
   14b08:	20001e5c 	.word	0x20001e5c

00014b0c <bt_conn_cb_register>:
	cb->_next = callback_list;
   14b0c:	4b02      	ldr	r3, [pc, #8]	; (14b18 <bt_conn_cb_register+0xc>)
   14b0e:	681a      	ldr	r2, [r3, #0]
   14b10:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   14b12:	6018      	str	r0, [r3, #0]
}
   14b14:	4770      	bx	lr
   14b16:	bf00      	nop
   14b18:	20001e5c 	.word	0x20001e5c

00014b1c <bt_conn_recv>:
{
   14b1c:	b570      	push	{r4, r5, r6, lr}
   14b1e:	4616      	mov	r6, r2
   14b20:	4604      	mov	r4, r0
   14b22:	460d      	mov	r5, r1
	tx_notify(conn);
   14b24:	f009 fa10 	bl	1df48 <tx_notify>
	switch (flags) {
   14b28:	2e01      	cmp	r6, #1
   14b2a:	d02e      	beq.n	14b8a <bt_conn_recv+0x6e>
   14b2c:	2e02      	cmp	r6, #2
   14b2e:	d15b      	bne.n	14be8 <bt_conn_recv+0xcc>
		if (conn->rx) {
   14b30:	6923      	ldr	r3, [r4, #16]
   14b32:	b163      	cbz	r3, 14b4e <bt_conn_recv+0x32>
   14b34:	4b37      	ldr	r3, [pc, #220]	; (14c14 <bt_conn_recv+0xf8>)
   14b36:	4938      	ldr	r1, [pc, #224]	; (14c18 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   14b38:	4838      	ldr	r0, [pc, #224]	; (14c1c <bt_conn_recv+0x100>)
   14b3a:	1ac9      	subs	r1, r1, r3
   14b3c:	08c9      	lsrs	r1, r1, #3
   14b3e:	0189      	lsls	r1, r1, #6
   14b40:	f041 0101 	orr.w	r1, r1, #1
   14b44:	f007 fb1c 	bl	1c180 <log_0>
			bt_conn_reset_rx_state(conn);
   14b48:	4620      	mov	r0, r4
   14b4a:	f009 fa7e 	bl	1e04a <bt_conn_reset_rx_state>
		conn->rx = buf;
   14b4e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14b50:	6923      	ldr	r3, [r4, #16]
   14b52:	8999      	ldrh	r1, [r3, #12]
   14b54:	2901      	cmp	r1, #1
   14b56:	d95b      	bls.n	14c10 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14b58:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   14b5a:	7845      	ldrb	r5, [r0, #1]
   14b5c:	7802      	ldrb	r2, [r0, #0]
   14b5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   14b62:	3204      	adds	r2, #4
   14b64:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   14b66:	4291      	cmp	r1, r2
   14b68:	d352      	bcc.n	14c10 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
   14b6a:	d949      	bls.n	14c00 <bt_conn_recv+0xe4>
   14b6c:	4829      	ldr	r0, [pc, #164]	; (14c14 <bt_conn_recv+0xf8>)
   14b6e:	4b2a      	ldr	r3, [pc, #168]	; (14c18 <bt_conn_recv+0xfc>)
   14b70:	1a1b      	subs	r3, r3, r0
   14b72:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   14b74:	019b      	lsls	r3, r3, #6
   14b76:	482a      	ldr	r0, [pc, #168]	; (14c20 <bt_conn_recv+0x104>)
   14b78:	f043 0301 	orr.w	r3, r3, #1
   14b7c:	f007 fb21 	bl	1c1c2 <log_2>
		bt_conn_reset_rx_state(conn);
   14b80:	4620      	mov	r0, r4
}
   14b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   14b86:	f009 ba60 	b.w	1e04a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   14b8a:	6920      	ldr	r0, [r4, #16]
   14b8c:	b968      	cbnz	r0, 14baa <bt_conn_recv+0x8e>
   14b8e:	4922      	ldr	r1, [pc, #136]	; (14c18 <bt_conn_recv+0xfc>)
   14b90:	4b20      	ldr	r3, [pc, #128]	; (14c14 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   14b92:	4824      	ldr	r0, [pc, #144]	; (14c24 <bt_conn_recv+0x108>)
   14b94:	1ac9      	subs	r1, r1, r3
   14b96:	08c9      	lsrs	r1, r1, #3
   14b98:	0189      	lsls	r1, r1, #6
   14b9a:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   14b9e:	f007 faef 	bl	1c180 <log_0>
			bt_conn_reset_rx_state(conn);
   14ba2:	4620      	mov	r0, r4
   14ba4:	f009 fa51 	bl	1e04a <bt_conn_reset_rx_state>
   14ba8:	e001      	b.n	14bae <bt_conn_recv+0x92>
		if (!buf->len) {
   14baa:	89ae      	ldrh	r6, [r5, #12]
   14bac:	b926      	cbnz	r6, 14bb8 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   14bae:	4628      	mov	r0, r5
}
   14bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   14bb4:	f004 b936 	b.w	18e24 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14bb8:	3008      	adds	r0, #8
   14bba:	f00a ff27 	bl	1fa0c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   14bbe:	4286      	cmp	r6, r0
   14bc0:	d908      	bls.n	14bd4 <bt_conn_recv+0xb8>
   14bc2:	4915      	ldr	r1, [pc, #84]	; (14c18 <bt_conn_recv+0xfc>)
   14bc4:	4b13      	ldr	r3, [pc, #76]	; (14c14 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   14bc6:	4818      	ldr	r0, [pc, #96]	; (14c28 <bt_conn_recv+0x10c>)
   14bc8:	1ac9      	subs	r1, r1, r3
   14bca:	08c9      	lsrs	r1, r1, #3
   14bcc:	0189      	lsls	r1, r1, #6
   14bce:	f041 0101 	orr.w	r1, r1, #1
   14bd2:	e7e4      	b.n	14b9e <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14bd4:	6920      	ldr	r0, [r4, #16]
   14bd6:	89aa      	ldrh	r2, [r5, #12]
   14bd8:	68a9      	ldr	r1, [r5, #8]
   14bda:	3008      	adds	r0, #8
   14bdc:	f00a fee1 	bl	1f9a2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14be0:	4628      	mov	r0, r5
   14be2:	f004 f91f 	bl	18e24 <net_buf_unref>
		break;
   14be6:	e7b3      	b.n	14b50 <bt_conn_recv+0x34>
   14be8:	4a0a      	ldr	r2, [pc, #40]	; (14c14 <bt_conn_recv+0xf8>)
   14bea:	4b0b      	ldr	r3, [pc, #44]	; (14c18 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   14bec:	480f      	ldr	r0, [pc, #60]	; (14c2c <bt_conn_recv+0x110>)
   14bee:	1a9b      	subs	r3, r3, r2
   14bf0:	08db      	lsrs	r3, r3, #3
   14bf2:	019b      	lsls	r3, r3, #6
   14bf4:	f043 0201 	orr.w	r2, r3, #1
   14bf8:	4631      	mov	r1, r6
   14bfa:	f007 face 	bl	1c19a <log_1>
		bt_conn_reset_rx_state(conn);
   14bfe:	e7d0      	b.n	14ba2 <bt_conn_recv+0x86>
	conn->rx = NULL;
   14c00:	2200      	movs	r2, #0
   14c02:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   14c04:	4620      	mov	r0, r4
   14c06:	4619      	mov	r1, r3
}
   14c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   14c0c:	f000 bd28 	b.w	15660 <bt_l2cap_recv>
}
   14c10:	bd70      	pop	{r4, r5, r6, pc}
   14c12:	bf00      	nop
   14c14:	00020854 	.word	0x00020854
   14c18:	00020874 	.word	0x00020874
   14c1c:	000223ec 	.word	0x000223ec
   14c20:	0002246c 	.word	0x0002246c
   14c24:	00022409 	.word	0x00022409
   14c28:	00022427 	.word	0x00022427
   14c2c:	0002244e 	.word	0x0002244e

00014c30 <bt_conn_send_cb>:
{
   14c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c34:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14c36:	7b43      	ldrb	r3, [r0, #13]
   14c38:	2b07      	cmp	r3, #7
{
   14c3a:	4605      	mov	r5, r0
   14c3c:	460e      	mov	r6, r1
   14c3e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   14c40:	d00c      	beq.n	14c5c <bt_conn_send_cb+0x2c>
   14c42:	4926      	ldr	r1, [pc, #152]	; (14cdc <bt_conn_send_cb+0xac>)
   14c44:	4b26      	ldr	r3, [pc, #152]	; (14ce0 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   14c46:	4827      	ldr	r0, [pc, #156]	; (14ce4 <bt_conn_send_cb+0xb4>)
   14c48:	1ac9      	subs	r1, r1, r3
   14c4a:	08c9      	lsrs	r1, r1, #3
   14c4c:	0189      	lsls	r1, r1, #6
   14c4e:	f041 0101 	orr.w	r1, r1, #1
   14c52:	f007 fa95 	bl	1c180 <log_0>
			return -ENOTCONN;
   14c56:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14c5a:	e01d      	b.n	14c98 <bt_conn_send_cb+0x68>
	if (cb) {
   14c5c:	2a00      	cmp	r2, #0
   14c5e:	d03a      	beq.n	14cd6 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   14c60:	f006 fac0 	bl	1b1e4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14c64:	4b20      	ldr	r3, [pc, #128]	; (14ce8 <bt_conn_send_cb+0xb8>)
   14c66:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14c68:	4820      	ldr	r0, [pc, #128]	; (14cec <bt_conn_send_cb+0xbc>)
   14c6a:	bf07      	ittee	eq
   14c6c:	2200      	moveq	r2, #0
   14c6e:	2300      	moveq	r3, #0
   14c70:	f04f 32ff 	movne.w	r2, #4294967295
   14c74:	f04f 33ff 	movne.w	r3, #4294967295
   14c78:	f005 fd5c 	bl	1a734 <z_impl_k_queue_get>
   14c7c:	4604      	mov	r4, r0
		if (!tx) {
   14c7e:	b968      	cbnz	r0, 14c9c <bt_conn_send_cb+0x6c>
   14c80:	4b17      	ldr	r3, [pc, #92]	; (14ce0 <bt_conn_send_cb+0xb0>)
   14c82:	4916      	ldr	r1, [pc, #88]	; (14cdc <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   14c84:	481a      	ldr	r0, [pc, #104]	; (14cf0 <bt_conn_send_cb+0xc0>)
   14c86:	1ac9      	subs	r1, r1, r3
   14c88:	08c9      	lsrs	r1, r1, #3
   14c8a:	0189      	lsls	r1, r1, #6
   14c8c:	f041 0101 	orr.w	r1, r1, #1
   14c90:	f007 fa76 	bl	1c180 <log_0>
			return -ENOBUFS;
   14c94:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14c9c:	7b6b      	ldrb	r3, [r5, #13]
   14c9e:	2b07      	cmp	r3, #7
   14ca0:	d00d      	beq.n	14cbe <bt_conn_send_cb+0x8e>
   14ca2:	4b0f      	ldr	r3, [pc, #60]	; (14ce0 <bt_conn_send_cb+0xb0>)
   14ca4:	490d      	ldr	r1, [pc, #52]	; (14cdc <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   14ca6:	4813      	ldr	r0, [pc, #76]	; (14cf4 <bt_conn_send_cb+0xc4>)
   14ca8:	1ac9      	subs	r1, r1, r3
   14caa:	08c9      	lsrs	r1, r1, #3
   14cac:	0189      	lsls	r1, r1, #6
   14cae:	f041 0102 	orr.w	r1, r1, #2
   14cb2:	f007 fa65 	bl	1c180 <log_0>
			tx_free(tx);
   14cb6:	4620      	mov	r0, r4
   14cb8:	f7ff fde0 	bl	1487c <tx_free>
   14cbc:	e7cb      	b.n	14c56 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   14cbe:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14cc0:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14cc4:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   14cc6:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   14cc8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14ccc:	4631      	mov	r1, r6
   14cce:	f00a fe2f 	bl	1f930 <net_buf_put>
	return 0;
   14cd2:	2000      	movs	r0, #0
   14cd4:	e7e0      	b.n	14c98 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   14cd6:	614a      	str	r2, [r1, #20]
   14cd8:	e7f6      	b.n	14cc8 <bt_conn_send_cb+0x98>
   14cda:	bf00      	nop
   14cdc:	00020874 	.word	0x00020874
   14ce0:	00020854 	.word	0x00020854
   14ce4:	00022487 	.word	0x00022487
   14ce8:	20001c88 	.word	0x20001c88
   14cec:	200007a8 	.word	0x200007a8
   14cf0:	00022496 	.word	0x00022496
   14cf4:	000224b4 	.word	0x000224b4

00014cf8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   14cf8:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   14cfa:	4b1b      	ldr	r3, [pc, #108]	; (14d68 <bt_conn_prepare_events+0x70>)
   14cfc:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14cfe:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   14d00:	609a      	str	r2, [r3, #8]
{
   14d02:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14d04:	f00b fc7d 	bl	20602 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14d08:	f3bf 8f5b 	dmb	ish
   14d0c:	4b17      	ldr	r3, [pc, #92]	; (14d6c <bt_conn_prepare_events+0x74>)
   14d0e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   14d12:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   14d16:	f104 0014 	add.w	r0, r4, #20
   14d1a:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   14d1c:	b90a      	cbnz	r2, 14d22 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   14d1e:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   14d20:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14d22:	7b5a      	ldrb	r2, [r3, #13]
   14d24:	b99a      	cbnz	r2, 14d4e <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14d26:	f3bf 8f5b 	dmb	ish
   14d2a:	1d1a      	adds	r2, r3, #4
   14d2c:	e852 5f00 	ldrex	r5, [r2]
   14d30:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   14d34:	e842 ce00 	strex	lr, ip, [r2]
   14d38:	f1be 0f00 	cmp.w	lr, #0
   14d3c:	d1f6      	bne.n	14d2c <bt_conn_prepare_events+0x34>
   14d3e:	f3bf 8f5b 	dmb	ish
   14d42:	066a      	lsls	r2, r5, #25
   14d44:	d503      	bpl.n	14d4e <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   14d46:	4618      	mov	r0, r3
   14d48:	f009 f988 	bl	1e05c <conn_cleanup>
   14d4c:	e7e7      	b.n	14d1e <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   14d4e:	7b4b      	ldrb	r3, [r1, #13]
   14d50:	2b07      	cmp	r3, #7
   14d52:	d1e4      	bne.n	14d1e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   14d54:	4b06      	ldr	r3, [pc, #24]	; (14d70 <bt_conn_prepare_events+0x78>)
   14d56:	2200      	movs	r2, #0
   14d58:	2104      	movs	r1, #4
   14d5a:	f00b fc52 	bl	20602 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14d5e:	2301      	movs	r3, #1
   14d60:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   14d64:	2002      	movs	r0, #2
	return ev_count;
   14d66:	e7db      	b.n	14d20 <bt_conn_prepare_events+0x28>
   14d68:	200004d4 	.word	0x200004d4
   14d6c:	20001618 	.word	0x20001618
   14d70:	20001650 	.word	0x20001650

00014d74 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   14d74:	b570      	push	{r4, r5, r6, lr}
   14d76:	4606      	mov	r6, r0
   14d78:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   14d7a:	480f      	ldr	r0, [pc, #60]	; (14db8 <bt_conn_add_le+0x44>)
   14d7c:	2101      	movs	r1, #1
   14d7e:	f009 f909 	bl	1df94 <bt_conn_new>
	if (!conn) {
   14d82:	4604      	mov	r4, r0
   14d84:	b1b0      	cbz	r0, 14db4 <bt_conn_add_le+0x40>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14d86:	490d      	ldr	r1, [pc, #52]	; (14dbc <bt_conn_add_le+0x48>)
   14d88:	3058      	adds	r0, #88	; 0x58
   14d8a:	f00b f8f3 	bl	1ff74 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14d8e:	490c      	ldr	r1, [pc, #48]	; (14dc0 <bt_conn_add_le+0x4c>)
   14d90:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14d94:	f00b f8c8 	bl	1ff28 <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   14d98:	7226      	strb	r6, [r4, #8]
   14d9a:	2207      	movs	r2, #7
   14d9c:	4629      	mov	r1, r5
   14d9e:	f104 0088 	add.w	r0, r4, #136	; 0x88
   14da2:	f008 fd09 	bl	1d7b8 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   14da6:	2301      	movs	r3, #1
   14da8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   14daa:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   14dac:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   14dae:	4b05      	ldr	r3, [pc, #20]	; (14dc4 <bt_conn_add_le+0x50>)
   14db0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   14db4:	4620      	mov	r0, r4
   14db6:	bd70      	pop	{r4, r5, r6, pc}
   14db8:	20001618 	.word	0x20001618
   14dbc:	000150d5 	.word	0x000150d5
   14dc0:	0001df8f 	.word	0x0001df8f
   14dc4:	00280018 	.word	0x00280018

00014dc8 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   14dc8:	4602      	mov	r2, r0
   14dca:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14dcc:	2101      	movs	r1, #1
   14dce:	4803      	ldr	r0, [pc, #12]	; (14ddc <bt_conn_lookup_handle+0x14>)
   14dd0:	f009 f9bd 	bl	1e14e <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   14dd4:	2800      	cmp	r0, #0
   14dd6:	bf38      	it	cc
   14dd8:	2000      	movcc	r0, #0
   14dda:	bd08      	pop	{r3, pc}
   14ddc:	20001618 	.word	0x20001618

00014de0 <bt_conn_set_state>:
{
   14de0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   14de2:	7b46      	ldrb	r6, [r0, #13]
   14de4:	428e      	cmp	r6, r1
{
   14de6:	4604      	mov	r4, r0
   14de8:	460d      	mov	r5, r1
	if (conn->state == state) {
   14dea:	d112      	bne.n	14e12 <bt_conn_set_state+0x32>
   14dec:	4b65      	ldr	r3, [pc, #404]	; (14f84 <bt_conn_set_state+0x1a4>)
   14dee:	4a66      	ldr	r2, [pc, #408]	; (14f88 <bt_conn_set_state+0x1a8>)
		BT_WARN("no transition %s", state2str(state));
   14df0:	4866      	ldr	r0, [pc, #408]	; (14f8c <bt_conn_set_state+0x1ac>)
   14df2:	2e08      	cmp	r6, #8
   14df4:	eba2 0203 	sub.w	r2, r2, r3
   14df8:	bf96      	itet	ls
   14dfa:	4b65      	ldrls	r3, [pc, #404]	; (14f90 <bt_conn_set_state+0x1b0>)
   14dfc:	4965      	ldrhi	r1, [pc, #404]	; (14f94 <bt_conn_set_state+0x1b4>)
   14dfe:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   14e02:	08d2      	lsrs	r2, r2, #3
   14e04:	0192      	lsls	r2, r2, #6
   14e06:	f042 0202 	orr.w	r2, r2, #2
}
   14e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   14e0e:	f007 b9c4 	b.w	1c19a <log_1>
	conn->state = state;
   14e12:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14e14:	b90e      	cbnz	r6, 14e1a <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
   14e16:	f009 f968 	bl	1e0ea <bt_conn_ref>
	switch (conn->state) {
   14e1a:	7b63      	ldrb	r3, [r4, #13]
   14e1c:	2b08      	cmp	r3, #8
   14e1e:	f200 80a6 	bhi.w	14f6e <bt_conn_set_state+0x18e>
   14e22:	e8df f003 	tbb	[pc, r3]
   14e26:	0537      	.short	0x0537
   14e28:	aeaeaeae 	.word	0xaeaeaeae
   14e2c:	1cae      	.short	0x1cae
   14e2e:	ae          	.byte	0xae
   14e2f:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   14e30:	4d59      	ldr	r5, [pc, #356]	; (14f98 <bt_conn_set_state+0x1b8>)
		tx->pending_no_cb = 0U;
   14e32:	2600      	movs	r6, #0
	__asm__ volatile(
   14e34:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e38:	f3ef 8211 	mrs	r2, BASEPRI
   14e3c:	f383 8811 	msr	BASEPRI, r3
   14e40:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14e44:	69e3      	ldr	r3, [r4, #28]
   14e46:	2b00      	cmp	r3, #0
   14e48:	d072      	beq.n	14f30 <bt_conn_set_state+0x150>
			conn->pending_no_cb--;
   14e4a:	3b01      	subs	r3, #1
   14e4c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14e4e:	f382 8811 	msr	BASEPRI, r2
   14e52:	f3bf 8f6f 	isb	sy
   14e56:	4628      	mov	r0, r5
   14e58:	f005 fca0 	bl	1a79c <z_impl_k_sem_give>
}
   14e5c:	e7ea      	b.n	14e34 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14e5e:	78a3      	ldrb	r3, [r4, #2]
   14e60:	2b04      	cmp	r3, #4
   14e62:	f000 808e 	beq.w	14f82 <bt_conn_set_state+0x1a2>
	z_impl_k_queue_init(queue);
   14e66:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14e6a:	f00a ff89 	bl	1fd80 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   14e6e:	484b      	ldr	r0, [pc, #300]	; (14f9c <bt_conn_set_state+0x1bc>)
   14e70:	2100      	movs	r1, #0
   14e72:	f006 fcb3 	bl	1b7dc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14e76:	2300      	movs	r3, #0
	list->tail = NULL;
   14e78:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14e7c:	78e3      	ldrb	r3, [r4, #3]
   14e7e:	2b01      	cmp	r3, #1
   14e80:	d17f      	bne.n	14f82 <bt_conn_set_state+0x1a2>
			k_work_schedule(&conn->deferred_work,
   14e82:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14e86:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   14e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   14e8e:	2300      	movs	r3, #0
   14e90:	f005 be64 	b.w	1ab5c <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14e94:	78a3      	ldrb	r3, [r4, #2]
   14e96:	2b04      	cmp	r3, #4
   14e98:	d104      	bne.n	14ea4 <bt_conn_set_state+0xc4>
			bt_conn_unref(conn);
   14e9a:	4620      	mov	r0, r4
}
   14e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   14ea0:	f009 b93e 	b.w	1e120 <bt_conn_unref>
		switch (old_state) {
   14ea4:	2e08      	cmp	r6, #8
   14ea6:	d86c      	bhi.n	14f82 <bt_conn_set_state+0x1a2>
   14ea8:	a301      	add	r3, pc, #4	; (adr r3, 14eb0 <bt_conn_set_state+0xd0>)
   14eaa:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   14eae:	bf00      	nop
   14eb0:	00014f1d 	.word	0x00014f1d
   14eb4:	00014ed5 	.word	0x00014ed5
   14eb8:	00014f0f 	.word	0x00014f0f
   14ebc:	00014e9b 	.word	0x00014e9b
   14ec0:	00014e9b 	.word	0x00014e9b
   14ec4:	00014f0f 	.word	0x00014f0f
   14ec8:	00014f0f 	.word	0x00014f0f
   14ecc:	00014f1d 	.word	0x00014f1d
   14ed0:	00014f1d 	.word	0x00014f1d
			tx_notify(conn);
   14ed4:	4620      	mov	r0, r4
   14ed6:	f009 f837 	bl	1df48 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   14eda:	78a3      	ldrb	r3, [r4, #2]
   14edc:	2b01      	cmp	r3, #1
   14ede:	d103      	bne.n	14ee8 <bt_conn_set_state+0x108>
				k_work_cancel_delayable(&conn->deferred_work);
   14ee0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14ee4:	f00b f852 	bl	1ff8c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14ee8:	f3bf 8f5b 	dmb	ish
   14eec:	3404      	adds	r4, #4
   14eee:	e854 3f00 	ldrex	r3, [r4]
   14ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14ef6:	e844 3200 	strex	r2, r3, [r4]
   14efa:	2a00      	cmp	r2, #0
   14efc:	d1f7      	bne.n	14eee <bt_conn_set_state+0x10e>
   14efe:	f3bf 8f5b 	dmb	ish
   14f02:	4826      	ldr	r0, [pc, #152]	; (14f9c <bt_conn_set_state+0x1bc>)
}
   14f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14f08:	2100      	movs	r1, #0
   14f0a:	f006 bc67 	b.w	1b7dc <z_impl_k_poll_signal_raise>
			if (conn->err) {
   14f0e:	7b23      	ldrb	r3, [r4, #12]
   14f10:	2b00      	cmp	r3, #0
   14f12:	d0c2      	beq.n	14e9a <bt_conn_set_state+0xba>
				notify_connected(conn);
   14f14:	4620      	mov	r0, r4
   14f16:	f7ff fcbb 	bl	14890 <notify_connected>
   14f1a:	e7be      	b.n	14e9a <bt_conn_set_state+0xba>
   14f1c:	4a1a      	ldr	r2, [pc, #104]	; (14f88 <bt_conn_set_state+0x1a8>)
   14f1e:	4b19      	ldr	r3, [pc, #100]	; (14f84 <bt_conn_set_state+0x1a4>)
			BT_WARN("Invalid (%u) old state", state);
   14f20:	481f      	ldr	r0, [pc, #124]	; (14fa0 <bt_conn_set_state+0x1c0>)
   14f22:	1ad2      	subs	r2, r2, r3
   14f24:	08d2      	lsrs	r2, r2, #3
   14f26:	0192      	lsls	r2, r2, #6
   14f28:	f042 0202 	orr.w	r2, r2, #2
   14f2c:	4629      	mov	r1, r5
   14f2e:	e76c      	b.n	14e0a <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   14f30:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14f32:	b128      	cbz	r0, 14f40 <bt_conn_set_state+0x160>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14f34:	69a1      	ldr	r1, [r4, #24]
   14f36:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   14f38:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14f3a:	4288      	cmp	r0, r1
	list->tail = node;
   14f3c:	bf08      	it	eq
   14f3e:	61a3      	streq	r3, [r4, #24]
   14f40:	f382 8811 	msr	BASEPRI, r2
   14f44:	f3bf 8f6f 	isb	sy
		if (!node) {
   14f48:	b1d8      	cbz	r0, 14f82 <bt_conn_set_state+0x1a2>
	__asm__ volatile(
   14f4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   14f4e:	f3ef 8311 	mrs	r3, BASEPRI
   14f52:	f382 8811 	msr	BASEPRI, r2
   14f56:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14f5a:	68c2      	ldr	r2, [r0, #12]
   14f5c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14f5e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   14f60:	f383 8811 	msr	BASEPRI, r3
   14f64:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   14f68:	f7ff fc88 	bl	1487c <tx_free>
   14f6c:	e773      	b.n	14e56 <bt_conn_set_state+0x76>
   14f6e:	4a06      	ldr	r2, [pc, #24]	; (14f88 <bt_conn_set_state+0x1a8>)
   14f70:	4b04      	ldr	r3, [pc, #16]	; (14f84 <bt_conn_set_state+0x1a4>)
		BT_WARN("no valid (%u) state was set", state);
   14f72:	480c      	ldr	r0, [pc, #48]	; (14fa4 <bt_conn_set_state+0x1c4>)
   14f74:	1ad2      	subs	r2, r2, r3
   14f76:	08d2      	lsrs	r2, r2, #3
   14f78:	0192      	lsls	r2, r2, #6
   14f7a:	f042 0202 	orr.w	r2, r2, #2
   14f7e:	4629      	mov	r1, r5
   14f80:	e743      	b.n	14e0a <bt_conn_set_state+0x2a>
}
   14f82:	bd70      	pop	{r4, r5, r6, pc}
   14f84:	00020854 	.word	0x00020854
   14f88:	00020874 	.word	0x00020874
   14f8c:	000224e4 	.word	0x000224e4
   14f90:	00020e28 	.word	0x00020e28
   14f94:	000224da 	.word	0x000224da
   14f98:	20000370 	.word	0x20000370
   14f9c:	200004d4 	.word	0x200004d4
   14fa0:	000224f5 	.word	0x000224f5
   14fa4:	0002250c 	.word	0x0002250c

00014fa8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   14fa8:	b570      	push	{r4, r5, r6, lr}
   14faa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14fac:	480c      	ldr	r0, [pc, #48]	; (14fe0 <bt_conn_lookup_addr_le+0x38>)
{
   14fae:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14fb0:	f009 f89b 	bl	1e0ea <bt_conn_ref>

		if (!conn) {
   14fb4:	4604      	mov	r4, r0
   14fb6:	b128      	cbz	r0, 14fc4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14fb8:	7883      	ldrb	r3, [r0, #2]
   14fba:	2b01      	cmp	r3, #1
   14fbc:	d004      	beq.n	14fc8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   14fbe:	f009 f8af 	bl	1e120 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   14fc2:	2400      	movs	r4, #0
}
   14fc4:	4620      	mov	r0, r4
   14fc6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   14fc8:	4629      	mov	r1, r5
   14fca:	4632      	mov	r2, r6
   14fcc:	f009 f86d 	bl	1e0aa <bt_conn_is_peer_addr_le>
   14fd0:	4605      	mov	r5, r0
   14fd2:	2800      	cmp	r0, #0
   14fd4:	d1f6      	bne.n	14fc4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   14fd6:	4620      	mov	r0, r4
   14fd8:	f009 f8a2 	bl	1e120 <bt_conn_unref>
	return NULL;
   14fdc:	462c      	mov	r4, r5
			continue;
   14fde:	e7f1      	b.n	14fc4 <bt_conn_lookup_addr_le+0x1c>
   14fe0:	20001618 	.word	0x20001618

00014fe4 <bt_conn_exists_le>:
{
   14fe4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   14fe6:	f7ff ffdf 	bl	14fa8 <bt_conn_lookup_addr_le>
	if (conn) {
   14fea:	4604      	mov	r4, r0
   14fec:	b1a0      	cbz	r0, 15018 <bt_conn_exists_le+0x34>
   14fee:	4b0b      	ldr	r3, [pc, #44]	; (1501c <bt_conn_exists_le+0x38>)
   14ff0:	4a0b      	ldr	r2, [pc, #44]	; (15020 <bt_conn_exists_le+0x3c>)
   14ff2:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   14ff4:	7b43      	ldrb	r3, [r0, #13]
   14ff6:	480b      	ldr	r0, [pc, #44]	; (15024 <bt_conn_exists_le+0x40>)
   14ff8:	2b08      	cmp	r3, #8
   14ffa:	bf96      	itet	ls
   14ffc:	490a      	ldrls	r1, [pc, #40]	; (15028 <bt_conn_exists_le+0x44>)
   14ffe:	490b      	ldrhi	r1, [pc, #44]	; (1502c <bt_conn_exists_le+0x48>)
   15000:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   15004:	08d2      	lsrs	r2, r2, #3
   15006:	0192      	lsls	r2, r2, #6
   15008:	f042 0202 	orr.w	r2, r2, #2
   1500c:	f007 f8c5 	bl	1c19a <log_1>
		bt_conn_unref(conn);
   15010:	4620      	mov	r0, r4
   15012:	f009 f885 	bl	1e120 <bt_conn_unref>
		return true;
   15016:	2001      	movs	r0, #1
}
   15018:	bd10      	pop	{r4, pc}
   1501a:	bf00      	nop
   1501c:	00020854 	.word	0x00020854
   15020:	00020874 	.word	0x00020874
   15024:	00022528 	.word	0x00022528
   15028:	00020e28 	.word	0x00020e28
   1502c:	000224da 	.word	0x000224da

00015030 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15032:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15034:	480e      	ldr	r0, [pc, #56]	; (15070 <bt_conn_lookup_state_le+0x40>)
{
   15036:	460e      	mov	r6, r1
   15038:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1503a:	f009 f856 	bl	1e0ea <bt_conn_ref>

		if (!conn) {
   1503e:	4604      	mov	r4, r0
   15040:	b1a0      	cbz	r0, 1506c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15042:	7883      	ldrb	r3, [r0, #2]
   15044:	2b01      	cmp	r3, #1
   15046:	d003      	beq.n	15050 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15048:	f009 f86a 	bl	1e120 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1504c:	2400      	movs	r4, #0
			continue;
   1504e:	e00d      	b.n	1506c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15050:	b136      	cbz	r6, 15060 <bt_conn_lookup_state_le+0x30>
   15052:	4632      	mov	r2, r6
   15054:	4629      	mov	r1, r5
   15056:	f009 f828 	bl	1e0aa <bt_conn_is_peer_addr_le>
   1505a:	b908      	cbnz	r0, 15060 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1505c:	4620      	mov	r0, r4
   1505e:	e7f3      	b.n	15048 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15060:	7b63      	ldrb	r3, [r4, #13]
   15062:	42bb      	cmp	r3, r7
   15064:	d1fa      	bne.n	1505c <bt_conn_lookup_state_le+0x2c>
   15066:	7a23      	ldrb	r3, [r4, #8]
   15068:	42ab      	cmp	r3, r5
   1506a:	d1f7      	bne.n	1505c <bt_conn_lookup_state_le+0x2c>
}
   1506c:	4620      	mov	r0, r4
   1506e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15070:	20001618 	.word	0x20001618

00015074 <send_conn_le_param_update>:
{
   15074:	b538      	push	{r3, r4, r5, lr}
   15076:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15078:	4608      	mov	r0, r1
{
   1507a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1507c:	f008 fdb0 	bl	1dbe0 <bt_le_conn_params_valid>
   15080:	b318      	cbz	r0, 150ca <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15082:	4b13      	ldr	r3, [pc, #76]	; (150d0 <send_conn_le_param_update+0x5c>)
   15084:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   15088:	0799      	lsls	r1, r3, #30
   1508a:	d407      	bmi.n	1509c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   1508c:	78e3      	ldrb	r3, [r4, #3]
   1508e:	b183      	cbz	r3, 150b2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   15090:	4629      	mov	r1, r5
   15092:	4620      	mov	r0, r4
}
   15094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15098:	f000 bb1a 	b.w	156d0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1509c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   150a0:	079a      	lsls	r2, r3, #30
   150a2:	d5f3      	bpl.n	1508c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   150a4:	f3bf 8f5b 	dmb	ish
   150a8:	6863      	ldr	r3, [r4, #4]
   150aa:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   150ae:	055b      	lsls	r3, r3, #21
   150b0:	d4ec      	bmi.n	1508c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   150b2:	4629      	mov	r1, r5
   150b4:	4620      	mov	r0, r4
   150b6:	f009 f892 	bl	1e1de <bt_conn_le_conn_update>
		if (rc == 0) {
   150ba:	b928      	cbnz	r0, 150c8 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   150bc:	88ab      	ldrh	r3, [r5, #4]
   150be:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   150c2:	88eb      	ldrh	r3, [r5, #6]
   150c4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   150c8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   150ca:	f06f 0015 	mvn.w	r0, #21
   150ce:	e7fb      	b.n	150c8 <send_conn_le_param_update+0x54>
   150d0:	200002a0 	.word	0x200002a0

000150d4 <deferred_work>:
{
   150d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   150d6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   150da:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   150dc:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   150e0:	b993      	cbnz	r3, 15108 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   150e2:	4630      	mov	r0, r6
   150e4:	f009 f8de 	bl	1e2a4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   150e8:	4b1f      	ldr	r3, [pc, #124]	; (15168 <deferred_work+0x94>)
   150ea:	681d      	ldr	r5, [r3, #0]
   150ec:	b925      	cbnz	r5, 150f8 <deferred_work+0x24>
		bt_conn_unref(conn);
   150ee:	4630      	mov	r0, r6
   150f0:	f009 f816 	bl	1e120 <bt_conn_unref>
}
   150f4:	b002      	add	sp, #8
   150f6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   150f8:	686b      	ldr	r3, [r5, #4]
   150fa:	b11b      	cbz	r3, 15104 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   150fc:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   15100:	4630      	mov	r0, r6
   15102:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15104:	69ad      	ldr	r5, [r5, #24]
   15106:	e7f1      	b.n	150ec <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   15108:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1510c:	2b01      	cmp	r3, #1
   1510e:	d1f1      	bne.n	150f4 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15110:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   15114:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   15118:	e855 3f00 	ldrex	r3, [r5]
   1511c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   15120:	e845 2100 	strex	r1, r2, [r5]
   15124:	2900      	cmp	r1, #0
   15126:	d1f7      	bne.n	15118 <deferred_work+0x44>
   15128:	f3bf 8f5b 	dmb	ish
   1512c:	059b      	lsls	r3, r3, #22
   1512e:	d514      	bpl.n	1515a <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15130:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15132:	9300      	str	r3, [sp, #0]
   15134:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15136:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   15138:	4669      	mov	r1, sp
   1513a:	4630      	mov	r0, r6
   1513c:	f7ff ff9a 	bl	15074 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15140:	f3bf 8f5b 	dmb	ish
   15144:	e855 3f00 	ldrex	r3, [r5]
   15148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1514c:	e845 3200 	strex	r2, r3, [r5]
   15150:	2a00      	cmp	r2, #0
   15152:	d1f7      	bne.n	15144 <deferred_work+0x70>
   15154:	f3bf 8f5b 	dmb	ish
   15158:	e7cc      	b.n	150f4 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   1515a:	4a04      	ldr	r2, [pc, #16]	; (1516c <deferred_work+0x98>)
   1515c:	6810      	ldr	r0, [r2, #0]
   1515e:	6851      	ldr	r1, [r2, #4]
   15160:	466b      	mov	r3, sp
   15162:	c303      	stmia	r3!, {r0, r1}
   15164:	e7e8      	b.n	15138 <deferred_work+0x64>
   15166:	bf00      	nop
   15168:	20001e5c 	.word	0x20001e5c
   1516c:	000209e4 	.word	0x000209e4

00015170 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   15170:	b538      	push	{r3, r4, r5, lr}
   15172:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   15174:	490c      	ldr	r1, [pc, #48]	; (151a8 <bt_conn_create_pdu_timeout+0x38>)
   15176:	2800      	cmp	r0, #0
   15178:	bf08      	it	eq
   1517a:	4608      	moveq	r0, r1
   1517c:	f00a fbb5 	bl	1f8ea <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   15180:	4604      	mov	r4, r0
   15182:	b958      	cbnz	r0, 1519c <bt_conn_create_pdu_timeout+0x2c>
   15184:	4909      	ldr	r1, [pc, #36]	; (151ac <bt_conn_create_pdu_timeout+0x3c>)
   15186:	4b0a      	ldr	r3, [pc, #40]	; (151b0 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   15188:	480a      	ldr	r0, [pc, #40]	; (151b4 <bt_conn_create_pdu_timeout+0x44>)
   1518a:	1ac9      	subs	r1, r1, r3
   1518c:	08c9      	lsrs	r1, r1, #3
   1518e:	0189      	lsls	r1, r1, #6
   15190:	f041 0102 	orr.w	r1, r1, #2
   15194:	f006 fff4 	bl	1c180 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   15198:	4620      	mov	r0, r4
   1519a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1519c:	1d29      	adds	r1, r5, #4
   1519e:	3008      	adds	r0, #8
   151a0:	f00a fbc2 	bl	1f928 <net_buf_simple_reserve>
	return buf;
   151a4:	e7f8      	b.n	15198 <bt_conn_create_pdu_timeout+0x28>
   151a6:	bf00      	nop
   151a8:	200007c0 	.word	0x200007c0
   151ac:	00020874 	.word	0x00020874
   151b0:	00020854 	.word	0x00020854
   151b4:	0002254b 	.word	0x0002254b

000151b8 <bt_conn_create_frag_timeout>:
{
   151b8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   151ba:	4801      	ldr	r0, [pc, #4]	; (151c0 <bt_conn_create_frag_timeout+0x8>)
   151bc:	f7ff bfd8 	b.w	15170 <bt_conn_create_pdu_timeout>
   151c0:	20000810 	.word	0x20000810

000151c4 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   151c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   151c8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   151ca:	f04f 33ff 	mov.w	r3, #4294967295
   151ce:	f04f 32ff 	mov.w	r2, #4294967295
   151d2:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   151d4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   151d6:	f7ff ffef 	bl	151b8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   151da:	7833      	ldrb	r3, [r6, #0]
   151dc:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   151de:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   151e0:	f04f 0600 	mov.w	r6, #0
   151e4:	d005      	beq.n	151f2 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   151e6:	f003 fe1d 	bl	18e24 <net_buf_unref>
		return NULL;
   151ea:	4635      	mov	r5, r6
}
   151ec:	4628      	mov	r0, r5
   151ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   151f2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   151f4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   151f8:	4e0c      	ldr	r6, [pc, #48]	; (1522c <create_frag.isra.0+0x68>)
   151fa:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   151fc:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   15200:	f00a fc04 	bl	1fa0c <net_buf_simple_tailroom>
   15204:	4580      	cmp	r8, r0
   15206:	d20c      	bcs.n	15222 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   15208:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1520c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   15210:	4632      	mov	r2, r6
   15212:	4638      	mov	r0, r7
   15214:	f00a fbc5 	bl	1f9a2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   15218:	4631      	mov	r1, r6
   1521a:	4620      	mov	r0, r4
   1521c:	f00a fbda 	bl	1f9d4 <net_buf_simple_pull>
   15220:	e7e4      	b.n	151ec <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   15222:	4638      	mov	r0, r7
   15224:	f00a fbf2 	bl	1fa0c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15228:	b286      	uxth	r6, r0
   1522a:	e7ef      	b.n	1520c <create_frag.isra.0+0x48>
   1522c:	200002a0 	.word	0x200002a0

00015230 <bt_conn_process_tx>:
{
   15230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15232:	7b43      	ldrb	r3, [r0, #13]
{
   15234:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15236:	b993      	cbnz	r3, 1525e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15238:	f3bf 8f5b 	dmb	ish
   1523c:	1d03      	adds	r3, r0, #4
   1523e:	e853 2f00 	ldrex	r2, [r3]
   15242:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   15246:	e843 1400 	strex	r4, r1, [r3]
   1524a:	2c00      	cmp	r4, #0
   1524c:	d1f7      	bne.n	1523e <bt_conn_process_tx+0xe>
   1524e:	f3bf 8f5b 	dmb	ish
   15252:	0653      	lsls	r3, r2, #25
   15254:	d503      	bpl.n	1525e <bt_conn_process_tx+0x2e>
}
   15256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   1525a:	f008 beff 	b.w	1e05c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1525e:	2200      	movs	r2, #0
   15260:	2300      	movs	r3, #0
   15262:	f105 0038 	add.w	r0, r5, #56	; 0x38
   15266:	f00a fb45 	bl	1f8f4 <net_buf_get>
	BT_ASSERT(buf);
   1526a:	4604      	mov	r4, r0
   1526c:	b960      	cbnz	r0, 15288 <bt_conn_process_tx+0x58>
   1526e:	4a20      	ldr	r2, [pc, #128]	; (152f0 <bt_conn_process_tx+0xc0>)
   15270:	4920      	ldr	r1, [pc, #128]	; (152f4 <bt_conn_process_tx+0xc4>)
   15272:	4821      	ldr	r0, [pc, #132]	; (152f8 <bt_conn_process_tx+0xc8>)
   15274:	f240 5357 	movw	r3, #1367	; 0x557
   15278:	f006 fb3d 	bl	1b8f6 <printk>
   1527c:	4040      	eors	r0, r0
   1527e:	f380 8811 	msr	BASEPRI, r0
   15282:	f04f 0003 	mov.w	r0, #3
   15286:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15288:	4f1c      	ldr	r7, [pc, #112]	; (152fc <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1528a:	89a1      	ldrh	r1, [r4, #12]
   1528c:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   15290:	4291      	cmp	r1, r2
   15292:	d807      	bhi.n	152a4 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15294:	2300      	movs	r3, #0
   15296:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15298:	4621      	mov	r1, r4
   1529a:	4628      	mov	r0, r5
   1529c:	f7ff fb0e 	bl	148bc <send_frag>
	if (!send_buf(conn, buf)) {
   152a0:	b140      	cbz	r0, 152b4 <bt_conn_process_tx+0x84>
}
   152a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   152a4:	f105 060d 	add.w	r6, r5, #13
   152a8:	4621      	mov	r1, r4
   152aa:	4630      	mov	r0, r6
   152ac:	f7ff ff8a 	bl	151c4 <create_frag.isra.0>
	if (!frag) {
   152b0:	4601      	mov	r1, r0
   152b2:	b920      	cbnz	r0, 152be <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   152b4:	4620      	mov	r0, r4
}
   152b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   152ba:	f003 bdb3 	b.w	18e24 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   152be:	2301      	movs	r3, #1
   152c0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   152c2:	4628      	mov	r0, r5
   152c4:	f7ff fafa 	bl	148bc <send_frag>
   152c8:	2800      	cmp	r0, #0
   152ca:	d0f3      	beq.n	152b4 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   152cc:	89a2      	ldrh	r2, [r4, #12]
   152ce:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   152d2:	429a      	cmp	r2, r3
   152d4:	d802      	bhi.n	152dc <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   152d6:	2300      	movs	r3, #0
   152d8:	2203      	movs	r2, #3
   152da:	e7dd      	b.n	15298 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   152dc:	4621      	mov	r1, r4
   152de:	4630      	mov	r0, r6
   152e0:	f7ff ff70 	bl	151c4 <create_frag.isra.0>
		if (!frag) {
   152e4:	4601      	mov	r1, r0
   152e6:	2800      	cmp	r0, #0
   152e8:	d0e4      	beq.n	152b4 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   152ea:	2301      	movs	r3, #1
   152ec:	461a      	mov	r2, r3
   152ee:	e7e8      	b.n	152c2 <bt_conn_process_tx+0x92>
   152f0:	00022574 	.word	0x00022574
   152f4:	00021972 	.word	0x00021972
   152f8:	00021c40 	.word	0x00021c40
   152fc:	200002a0 	.word	0x200002a0

00015300 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   15300:	4b0c      	ldr	r3, [pc, #48]	; (15334 <bt_conn_auth_cb_register+0x34>)
   15302:	b908      	cbnz	r0, 15308 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   15304:	6018      	str	r0, [r3, #0]
		return 0;
   15306:	4770      	bx	lr
	}

	if (bt_auth) {
   15308:	681a      	ldr	r2, [r3, #0]
   1530a:	b962      	cbnz	r2, 15326 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1530c:	6902      	ldr	r2, [r0, #16]
   1530e:	b93a      	cbnz	r2, 15320 <bt_conn_auth_cb_register+0x20>
   15310:	6802      	ldr	r2, [r0, #0]
   15312:	b95a      	cbnz	r2, 1532c <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   15314:	6842      	ldr	r2, [r0, #4]
   15316:	b94a      	cbnz	r2, 1532c <bt_conn_auth_cb_register+0x2c>
   15318:	6882      	ldr	r2, [r0, #8]
   1531a:	b93a      	cbnz	r2, 1532c <bt_conn_auth_cb_register+0x2c>
   1531c:	6942      	ldr	r2, [r0, #20]
   1531e:	b92a      	cbnz	r2, 1532c <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   15320:	6018      	str	r0, [r3, #0]
	return 0;
   15322:	2000      	movs	r0, #0
   15324:	4770      	bx	lr
		return -EALREADY;
   15326:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1532a:	4770      	bx	lr
		return -EINVAL;
   1532c:	f06f 0015 	mvn.w	r0, #21
}
   15330:	4770      	bx	lr
   15332:	bf00      	nop
   15334:	20001e58 	.word	0x20001e58

00015338 <bt_conn_auth_passkey_entry>:

int bt_conn_auth_passkey_entry(struct bt_conn *conn, unsigned int passkey)
{
	if (!bt_auth) {
   15338:	4a06      	ldr	r2, [pc, #24]	; (15354 <bt_conn_auth_passkey_entry+0x1c>)
   1533a:	6812      	ldr	r2, [r2, #0]
{
   1533c:	b508      	push	{r3, lr}
	if (!bt_auth) {
   1533e:	b132      	cbz	r2, 1534e <bt_conn_auth_passkey_entry+0x16>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) && conn->type == BT_CONN_TYPE_LE) {
   15340:	7883      	ldrb	r3, [r0, #2]
   15342:	2b01      	cmp	r3, #1
   15344:	d103      	bne.n	1534e <bt_conn_auth_passkey_entry+0x16>
		bt_smp_auth_passkey_entry(conn, passkey);
   15346:	f00a f9ba 	bl	1f6be <bt_smp_auth_passkey_entry>
		return 0;
   1534a:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_BREDR) && conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_entry(conn, passkey);
	}

	return -EINVAL;
}
   1534c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1534e:	f06f 0015 	mvn.w	r0, #21
   15352:	e7fb      	b.n	1534c <bt_conn_auth_passkey_entry+0x14>
   15354:	20001e58 	.word	0x20001e58

00015358 <bt_conn_auth_passkey_confirm>:

int bt_conn_auth_passkey_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   15358:	4a05      	ldr	r2, [pc, #20]	; (15370 <bt_conn_auth_passkey_confirm+0x18>)
   1535a:	6812      	ldr	r2, [r2, #0]
   1535c:	b122      	cbz	r2, 15368 <bt_conn_auth_passkey_confirm+0x10>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1535e:	7883      	ldrb	r3, [r0, #2]
   15360:	2b01      	cmp	r3, #1
   15362:	d101      	bne.n	15368 <bt_conn_auth_passkey_confirm+0x10>
	    conn->type == BT_CONN_TYPE_LE) {
		return bt_smp_auth_passkey_confirm(conn);
   15364:	f00a b9e3 	b.w	1f72e <bt_smp_auth_passkey_confirm>
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_confirm(conn);
	}

	return -EINVAL;
}
   15368:	f06f 0015 	mvn.w	r0, #21
   1536c:	4770      	bx	lr
   1536e:	bf00      	nop
   15370:	20001e58 	.word	0x20001e58

00015374 <bt_conn_auth_pairing_confirm>:
	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   15374:	4a05      	ldr	r2, [pc, #20]	; (1538c <bt_conn_auth_pairing_confirm+0x18>)
   15376:	6812      	ldr	r2, [r2, #0]
   15378:	b122      	cbz	r2, 15384 <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
   1537a:	7883      	ldrb	r3, [r0, #2]
   1537c:	2b01      	cmp	r3, #1
   1537e:	d101      	bne.n	15384 <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
   15380:	f00a b926 	b.w	1f5d0 <bt_smp_auth_pairing_confirm>
		return bt_ssp_auth_pairing_confirm(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
   15384:	f06f 0015 	mvn.w	r0, #21
   15388:	4770      	bx	lr
   1538a:	bf00      	nop
   1538c:	20001e58 	.word	0x20001e58

00015390 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   15390:	4b03      	ldr	r3, [pc, #12]	; (153a0 <bt_conn_index+0x10>)
   15392:	1ac0      	subs	r0, r0, r3
   15394:	4b03      	ldr	r3, [pc, #12]	; (153a4 <bt_conn_index+0x14>)
   15396:	1180      	asrs	r0, r0, #6
   15398:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   1539a:	b2c0      	uxtb	r0, r0
   1539c:	4770      	bx	lr
   1539e:	bf00      	nop
   153a0:	20001618 	.word	0x20001618
   153a4:	aaaaaaab 	.word	0xaaaaaaab

000153a8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   153a8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   153aa:	490b      	ldr	r1, [pc, #44]	; (153d8 <bt_conn_init+0x30>)
   153ac:	480b      	ldr	r0, [pc, #44]	; (153dc <bt_conn_init+0x34>)
   153ae:	f00a fcf3 	bl	1fd98 <k_queue_append>
   153b2:	490b      	ldr	r1, [pc, #44]	; (153e0 <bt_conn_init+0x38>)
   153b4:	4809      	ldr	r0, [pc, #36]	; (153dc <bt_conn_init+0x34>)
   153b6:	f00a fcef 	bl	1fd98 <k_queue_append>
   153ba:	490a      	ldr	r1, [pc, #40]	; (153e4 <bt_conn_init+0x3c>)
   153bc:	4807      	ldr	r0, [pc, #28]	; (153dc <bt_conn_init+0x34>)
   153be:	f00a fceb 	bl	1fd98 <k_queue_append>
	}

	bt_att_init();
   153c2:	f009 fae8 	bl	1e996 <bt_att_init>

	err = bt_smp_init();
   153c6:	f003 fbc5 	bl	18b54 <bt_smp_init>
	if (err) {
   153ca:	4604      	mov	r4, r0
   153cc:	b908      	cbnz	r0, 153d2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   153ce:	f008 ffd5 	bl	1e37c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   153d2:	4620      	mov	r0, r4
   153d4:	bd10      	pop	{r4, pc}
   153d6:	bf00      	nop
   153d8:	20001e60 	.word	0x20001e60
   153dc:	200007a8 	.word	0x200007a8
   153e0:	20001e70 	.word	0x20001e70
   153e4:	20001e80 	.word	0x20001e80

000153e8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   153e8:	4a0b      	ldr	r2, [pc, #44]	; (15418 <l2cap_accept+0x30>)
{
   153ea:	b508      	push	{r3, lr}
   153ec:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   153ee:	6810      	ldr	r0, [r2, #0]
   153f0:	b918      	cbnz	r0, 153fa <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   153f2:	4b0a      	ldr	r3, [pc, #40]	; (1541c <l2cap_accept+0x34>)
   153f4:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   153f6:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   153f8:	bd08      	pop	{r3, pc}
   153fa:	4909      	ldr	r1, [pc, #36]	; (15420 <l2cap_accept+0x38>)
   153fc:	4a09      	ldr	r2, [pc, #36]	; (15424 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   153fe:	480a      	ldr	r0, [pc, #40]	; (15428 <l2cap_accept+0x40>)
   15400:	1a52      	subs	r2, r2, r1
   15402:	08d2      	lsrs	r2, r2, #3
   15404:	0192      	lsls	r2, r2, #6
   15406:	f042 0201 	orr.w	r2, r2, #1
   1540a:	4619      	mov	r1, r3
   1540c:	f006 fec5 	bl	1c19a <log_1>
	return -ENOMEM;
   15410:	f06f 000b 	mvn.w	r0, #11
   15414:	e7f0      	b.n	153f8 <l2cap_accept+0x10>
   15416:	bf00      	nop
   15418:	200016d8 	.word	0x200016d8
   1541c:	00020e6c 	.word	0x00020e6c
   15420:	00020854 	.word	0x00020854
   15424:	000208b4 	.word	0x000208b4
   15428:	00022601 	.word	0x00022601

0001542c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1542e:	4605      	mov	r5, r0
   15430:	460f      	mov	r7, r1
   15432:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   15434:	2300      	movs	r3, #0
   15436:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1543a:	2104      	movs	r1, #4
   1543c:	2000      	movs	r0, #0
   1543e:	f7ff fe97 	bl	15170 <bt_conn_create_pdu_timeout>
	if (!buf) {
   15442:	4604      	mov	r4, r0
   15444:	b960      	cbnz	r0, 15460 <l2cap_create_le_sig_pdu.isra.0+0x34>
   15446:	4a0a      	ldr	r2, [pc, #40]	; (15470 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   15448:	4b0a      	ldr	r3, [pc, #40]	; (15474 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1544a:	480b      	ldr	r0, [pc, #44]	; (15478 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1544c:	1ad2      	subs	r2, r2, r3
   1544e:	08d2      	lsrs	r2, r2, #3
   15450:	0192      	lsls	r2, r2, #6
   15452:	f042 0201 	orr.w	r2, r2, #1
   15456:	4629      	mov	r1, r5
   15458:	f006 fe9f 	bl	1c19a <log_1>
}
   1545c:	4620      	mov	r0, r4
   1545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   15460:	2104      	movs	r1, #4
   15462:	3008      	adds	r0, #8
   15464:	f00a fa97 	bl	1f996 <net_buf_simple_add>
	hdr->code = code;
   15468:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1546a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1546c:	8046      	strh	r6, [r0, #2]
	return buf;
   1546e:	e7f5      	b.n	1545c <l2cap_create_le_sig_pdu.isra.0+0x30>
   15470:	000208b4 	.word	0x000208b4
   15474:	00020854 	.word	0x00020854
   15478:	00022628 	.word	0x00022628

0001547c <l2cap_rtx_timeout>:
{
   1547c:	b538      	push	{r3, r4, r5, lr}
   1547e:	4a0b      	ldr	r2, [pc, #44]	; (154ac <l2cap_rtx_timeout+0x30>)
   15480:	4b0b      	ldr	r3, [pc, #44]	; (154b0 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   15482:	4604      	mov	r4, r0
   15484:	1ad2      	subs	r2, r2, r3
   15486:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1548a:	480a      	ldr	r0, [pc, #40]	; (154b4 <l2cap_rtx_timeout+0x38>)
   1548c:	08d2      	lsrs	r2, r2, #3
   1548e:	0192      	lsls	r2, r2, #6
   15490:	4621      	mov	r1, r4
   15492:	f042 0201 	orr.w	r2, r2, #1
   15496:	f006 fe80 	bl	1c19a <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1549a:	4628      	mov	r0, r5
   1549c:	4621      	mov	r1, r4
   1549e:	f008 feca 	bl	1e236 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   154a2:	4620      	mov	r0, r4
}
   154a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   154a8:	f008 bee7 	b.w	1e27a <bt_l2cap_chan_del>
   154ac:	000208b4 	.word	0x000208b4
   154b0:	00020854 	.word	0x00020854
   154b4:	00022650 	.word	0x00022650

000154b8 <bt_l2cap_connected>:
{
   154b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   154bc:	4e29      	ldr	r6, [pc, #164]	; (15564 <bt_l2cap_connected+0xac>)
   154be:	4f2a      	ldr	r7, [pc, #168]	; (15568 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   154c0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1556c <bt_l2cap_connected+0xb4>
{
   154c4:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   154c6:	42be      	cmp	r6, r7
   154c8:	d302      	bcc.n	154d0 <bt_l2cap_connected+0x18>
}
   154ca:	b003      	add	sp, #12
   154cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   154d0:	6873      	ldr	r3, [r6, #4]
   154d2:	a901      	add	r1, sp, #4
   154d4:	4620      	mov	r0, r4
   154d6:	4798      	blx	r3
   154d8:	2800      	cmp	r0, #0
   154da:	db3d      	blt.n	15558 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   154dc:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   154de:	8833      	ldrh	r3, [r6, #0]
   154e0:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   154e4:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   154e8:	4641      	mov	r1, r8
   154ea:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   154ee:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   154f2:	f00a fd3f 	bl	1ff74 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   154f6:	f3bf 8f5b 	dmb	ish
   154fa:	f105 0368 	add.w	r3, r5, #104	; 0x68
   154fe:	2200      	movs	r2, #0
   15500:	e853 1f00 	ldrex	r1, [r3]
   15504:	e843 2000 	strex	r0, r2, [r3]
   15508:	2800      	cmp	r0, #0
   1550a:	d1f9      	bne.n	15500 <bt_l2cap_connected+0x48>
   1550c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   15510:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   15512:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   15514:	f105 0308 	add.w	r3, r5, #8
   15518:	bb02      	cbnz	r2, 1555c <bt_l2cap_connected+0xa4>
	list->head = node;
   1551a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   1551e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   15520:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   15522:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   15524:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   15528:	681b      	ldr	r3, [r3, #0]
   1552a:	b103      	cbz	r3, 1552e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   1552c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1552e:	9b01      	ldr	r3, [sp, #4]
   15530:	f3bf 8f5b 	dmb	ish
   15534:	3368      	adds	r3, #104	; 0x68
   15536:	e853 2f00 	ldrex	r2, [r3]
   1553a:	f042 0201 	orr.w	r2, r2, #1
   1553e:	e843 2100 	strex	r1, r2, [r3]
   15542:	2900      	cmp	r1, #0
   15544:	d1f7      	bne.n	15536 <bt_l2cap_connected+0x7e>
   15546:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1554a:	9801      	ldr	r0, [sp, #4]
   1554c:	6843      	ldr	r3, [r0, #4]
   1554e:	699b      	ldr	r3, [r3, #24]
   15550:	b113      	cbz	r3, 15558 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   15552:	f100 0168 	add.w	r1, r0, #104	; 0x68
   15556:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15558:	360c      	adds	r6, #12
   1555a:	e7b4      	b.n	154c6 <bt_l2cap_connected+0xe>
	parent->next = child;
   1555c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1555e:	6563      	str	r3, [r4, #84]	; 0x54
}
   15560:	e7dd      	b.n	1551e <bt_l2cap_connected+0x66>
   15562:	bf00      	nop
   15564:	00020808 	.word	0x00020808
   15568:	0002082c 	.word	0x0002082c
   1556c:	0001547d 	.word	0x0001547d

00015570 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   15570:	898b      	ldrh	r3, [r1, #12]
   15572:	2b03      	cmp	r3, #3
{
   15574:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15576:	4606      	mov	r6, r0
   15578:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1557a:	d80a      	bhi.n	15592 <l2cap_recv+0x22>
   1557c:	4931      	ldr	r1, [pc, #196]	; (15644 <l2cap_recv+0xd4>)
   1557e:	4b32      	ldr	r3, [pc, #200]	; (15648 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   15580:	4832      	ldr	r0, [pc, #200]	; (1564c <l2cap_recv+0xdc>)
   15582:	1ac9      	subs	r1, r1, r3
   15584:	08c9      	lsrs	r1, r1, #3
   15586:	0189      	lsls	r1, r1, #6
   15588:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   1558c:	f006 fdf8 	bl	1c180 <log_0>
		return 0;
   15590:	e013      	b.n	155ba <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   15592:	2104      	movs	r1, #4
   15594:	f105 0008 	add.w	r0, r5, #8
   15598:	f00a fa24 	bl	1f9e4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1559c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1559e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   155a0:	428a      	cmp	r2, r1
   155a2:	4604      	mov	r4, r0
   155a4:	d00c      	beq.n	155c0 <l2cap_recv+0x50>
   155a6:	4828      	ldr	r0, [pc, #160]	; (15648 <l2cap_recv+0xd8>)
   155a8:	4b26      	ldr	r3, [pc, #152]	; (15644 <l2cap_recv+0xd4>)
   155aa:	1a1b      	subs	r3, r3, r0
   155ac:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   155ae:	019b      	lsls	r3, r3, #6
   155b0:	4827      	ldr	r0, [pc, #156]	; (15650 <l2cap_recv+0xe0>)
   155b2:	f043 0301 	orr.w	r3, r3, #1
   155b6:	f006 fe04 	bl	1c1c2 <log_2>
}
   155ba:	2000      	movs	r0, #0
   155bc:	b002      	add	sp, #8
   155be:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   155c0:	7843      	ldrb	r3, [r0, #1]
   155c2:	b943      	cbnz	r3, 155d6 <l2cap_recv+0x66>
   155c4:	491f      	ldr	r1, [pc, #124]	; (15644 <l2cap_recv+0xd4>)
   155c6:	4b20      	ldr	r3, [pc, #128]	; (15648 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   155c8:	4822      	ldr	r0, [pc, #136]	; (15654 <l2cap_recv+0xe4>)
   155ca:	1ac9      	subs	r1, r1, r3
   155cc:	08c9      	lsrs	r1, r1, #3
   155ce:	0189      	lsls	r1, r1, #6
   155d0:	f041 0101 	orr.w	r1, r1, #1
   155d4:	e7da      	b.n	1558c <l2cap_recv+0x1c>
	switch (hdr->code) {
   155d6:	7801      	ldrb	r1, [r0, #0]
   155d8:	2901      	cmp	r1, #1
   155da:	d0ee      	beq.n	155ba <l2cap_recv+0x4a>
   155dc:	2913      	cmp	r1, #19
   155de:	d10a      	bne.n	155f6 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   155e0:	2a01      	cmp	r2, #1
   155e2:	d8ea      	bhi.n	155ba <l2cap_recv+0x4a>
   155e4:	4917      	ldr	r1, [pc, #92]	; (15644 <l2cap_recv+0xd4>)
   155e6:	4b18      	ldr	r3, [pc, #96]	; (15648 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   155e8:	481b      	ldr	r0, [pc, #108]	; (15658 <l2cap_recv+0xe8>)
   155ea:	1ac9      	subs	r1, r1, r3
   155ec:	08c9      	lsrs	r1, r1, #3
   155ee:	0189      	lsls	r1, r1, #6
   155f0:	f041 0101 	orr.w	r1, r1, #1
   155f4:	e7ca      	b.n	1558c <l2cap_recv+0x1c>
   155f6:	4b14      	ldr	r3, [pc, #80]	; (15648 <l2cap_recv+0xd8>)
   155f8:	4a12      	ldr	r2, [pc, #72]	; (15644 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   155fa:	4818      	ldr	r0, [pc, #96]	; (1565c <l2cap_recv+0xec>)
   155fc:	1ad2      	subs	r2, r2, r3
   155fe:	08d2      	lsrs	r2, r2, #3
   15600:	0192      	lsls	r2, r2, #6
   15602:	f042 0202 	orr.w	r2, r2, #2
   15606:	f006 fdc8 	bl	1c19a <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1560a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   1560c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1560e:	2202      	movs	r2, #2
   15610:	2001      	movs	r0, #1
   15612:	f7ff ff0b 	bl	1542c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   15616:	4604      	mov	r4, r0
   15618:	2800      	cmp	r0, #0
   1561a:	d0ce      	beq.n	155ba <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1561c:	2102      	movs	r1, #2
   1561e:	3008      	adds	r0, #8
   15620:	f00a f9b9 	bl	1f996 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   15624:	2300      	movs	r3, #0
   15626:	7003      	strb	r3, [r0, #0]
   15628:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1562a:	4622      	mov	r2, r4
   1562c:	9300      	str	r3, [sp, #0]
   1562e:	2105      	movs	r1, #5
   15630:	4628      	mov	r0, r5
   15632:	f008 fe6a 	bl	1e30a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   15636:	2800      	cmp	r0, #0
   15638:	d0bf      	beq.n	155ba <l2cap_recv+0x4a>
		net_buf_unref(buf);
   1563a:	4620      	mov	r0, r4
   1563c:	f003 fbf2 	bl	18e24 <net_buf_unref>
   15640:	e7bb      	b.n	155ba <l2cap_recv+0x4a>
   15642:	bf00      	nop
   15644:	000208b4 	.word	0x000208b4
   15648:	00020854 	.word	0x00020854
   1564c:	00022660 	.word	0x00022660
   15650:	0002267e 	.word	0x0002267e
   15654:	0002269f 	.word	0x0002269f
   15658:	000226c0 	.word	0x000226c0
   1565c:	000226dc 	.word	0x000226dc

00015660 <bt_l2cap_recv>:
{
   15660:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   15662:	898b      	ldrh	r3, [r1, #12]
   15664:	2b03      	cmp	r3, #3
{
   15666:	4605      	mov	r5, r0
   15668:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1566a:	d80e      	bhi.n	1568a <bt_l2cap_recv+0x2a>
   1566c:	4914      	ldr	r1, [pc, #80]	; (156c0 <bt_l2cap_recv+0x60>)
   1566e:	4b15      	ldr	r3, [pc, #84]	; (156c4 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   15670:	4815      	ldr	r0, [pc, #84]	; (156c8 <bt_l2cap_recv+0x68>)
   15672:	1ac9      	subs	r1, r1, r3
   15674:	08c9      	lsrs	r1, r1, #3
   15676:	0189      	lsls	r1, r1, #6
   15678:	f041 0101 	orr.w	r1, r1, #1
   1567c:	f006 fd80 	bl	1c180 <log_0>
	net_buf_unref(buf);
   15680:	4620      	mov	r0, r4
}
   15682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   15686:	f003 bbcd 	b.w	18e24 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1568a:	2104      	movs	r1, #4
   1568c:	f104 0008 	add.w	r0, r4, #8
   15690:	f00a f9a8 	bl	1f9e4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15694:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   15696:	4628      	mov	r0, r5
   15698:	f008 fe60 	bl	1e35c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1569c:	b950      	cbnz	r0, 156b4 <bt_l2cap_recv+0x54>
   1569e:	4b09      	ldr	r3, [pc, #36]	; (156c4 <bt_l2cap_recv+0x64>)
   156a0:	4a07      	ldr	r2, [pc, #28]	; (156c0 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   156a2:	480a      	ldr	r0, [pc, #40]	; (156cc <bt_l2cap_recv+0x6c>)
   156a4:	1ad2      	subs	r2, r2, r3
   156a6:	08d2      	lsrs	r2, r2, #3
   156a8:	0192      	lsls	r2, r2, #6
   156aa:	f042 0202 	orr.w	r2, r2, #2
   156ae:	f006 fd74 	bl	1c19a <log_1>
		net_buf_unref(buf);
   156b2:	e7e5      	b.n	15680 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   156b4:	6843      	ldr	r3, [r0, #4]
   156b6:	4621      	mov	r1, r4
   156b8:	691b      	ldr	r3, [r3, #16]
   156ba:	4798      	blx	r3
   156bc:	e7e0      	b.n	15680 <bt_l2cap_recv+0x20>
   156be:	bf00      	nop
   156c0:	000208b4 	.word	0x000208b4
   156c4:	00020854 	.word	0x00020854
   156c8:	000226fa 	.word	0x000226fa
   156cc:	00022717 	.word	0x00022717

000156d0 <bt_l2cap_update_conn_param>:
{
   156d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   156d2:	4b17      	ldr	r3, [pc, #92]	; (15730 <bt_l2cap_update_conn_param+0x60>)
   156d4:	781a      	ldrb	r2, [r3, #0]
   156d6:	3201      	adds	r2, #1
	if (!ident) {
   156d8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   156dc:	bf08      	it	eq
   156de:	2201      	moveq	r2, #1
   156e0:	701a      	strb	r2, [r3, #0]
{
   156e2:	4606      	mov	r6, r0
   156e4:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   156e6:	2208      	movs	r2, #8
   156e8:	7819      	ldrb	r1, [r3, #0]
   156ea:	2012      	movs	r0, #18
   156ec:	f7ff fe9e 	bl	1542c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   156f0:	4604      	mov	r4, r0
   156f2:	b1d0      	cbz	r0, 1572a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   156f4:	2108      	movs	r1, #8
   156f6:	4408      	add	r0, r1
   156f8:	f00a f94d 	bl	1f996 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   156fc:	882b      	ldrh	r3, [r5, #0]
   156fe:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15700:	886b      	ldrh	r3, [r5, #2]
   15702:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15704:	88ab      	ldrh	r3, [r5, #4]
   15706:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15708:	88eb      	ldrh	r3, [r5, #6]
   1570a:	80c3      	strh	r3, [r0, #6]
   1570c:	2300      	movs	r3, #0
   1570e:	9300      	str	r3, [sp, #0]
   15710:	4622      	mov	r2, r4
   15712:	2105      	movs	r1, #5
   15714:	4630      	mov	r0, r6
   15716:	f008 fdf8 	bl	1e30a <bt_l2cap_send_cb>
	if (err) {
   1571a:	4605      	mov	r5, r0
   1571c:	b110      	cbz	r0, 15724 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1571e:	4620      	mov	r0, r4
   15720:	f003 fb80 	bl	18e24 <net_buf_unref>
}
   15724:	4628      	mov	r0, r5
   15726:	b002      	add	sp, #8
   15728:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1572a:	f06f 050b 	mvn.w	r5, #11
   1572e:	e7f9      	b.n	15724 <bt_l2cap_update_conn_param+0x54>
   15730:	20002194 	.word	0x20002194

00015734 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   15734:	4b02      	ldr	r3, [pc, #8]	; (15740 <att_cfm_sent+0xc>)
   15736:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1573a:	f008 be4d 	b.w	1e3d8 <att_sent>
   1573e:	bf00      	nop
   15740:	0001e6e3 	.word	0x0001e6e3

00015744 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   15744:	4b02      	ldr	r3, [pc, #8]	; (15750 <att_rsp_sent+0xc>)
   15746:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1574a:	f008 be45 	b.w	1e3d8 <att_sent>
   1574e:	bf00      	nop
   15750:	0001e6c7 	.word	0x0001e6c7

00015754 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   15754:	4b02      	ldr	r3, [pc, #8]	; (15760 <att_req_sent+0xc>)
   15756:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1575a:	f008 be3d 	b.w	1e3d8 <att_sent>
   1575e:	bf00      	nop
   15760:	0001e6ad 	.word	0x0001e6ad

00015764 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15764:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15766:	3808      	subs	r0, #8
   15768:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1576a:	a901      	add	r1, sp, #4
   1576c:	4802      	ldr	r0, [pc, #8]	; (15778 <bt_att_released+0x14>)
   1576e:	f00a fa53 	bl	1fc18 <k_mem_slab_free>
}
   15772:	b003      	add	sp, #12
   15774:	f85d fb04 	ldr.w	pc, [sp], #4
   15778:	200006e4 	.word	0x200006e4

0001577c <read_group_cb>:
{
   1577c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15780:	4606      	mov	r6, r0
   15782:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15784:	f04f 0800 	mov.w	r8, #0
   15788:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1578c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1578e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15790:	f88d 8008 	strb.w	r8, [sp, #8]
   15794:	a902      	add	r1, sp, #8
{
   15796:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15798:	f8ad 300a 	strh.w	r3, [sp, #10]
   1579c:	f008 f8ec 	bl	1d978 <bt_uuid_cmp>
   157a0:	b1a0      	cbz	r0, 157cc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   157a2:	f642 0301 	movw	r3, #10241	; 0x2801
   157a6:	6830      	ldr	r0, [r6, #0]
   157a8:	f88d 800c 	strb.w	r8, [sp, #12]
   157ac:	a903      	add	r1, sp, #12
   157ae:	f8ad 300e 	strh.w	r3, [sp, #14]
   157b2:	f008 f8e1 	bl	1d978 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   157b6:	b148      	cbz	r0, 157cc <read_group_cb+0x50>
		if (data->group &&
   157b8:	6923      	ldr	r3, [r4, #16]
   157ba:	b11b      	cbz	r3, 157c4 <read_group_cb+0x48>
   157bc:	885a      	ldrh	r2, [r3, #2]
   157be:	42aa      	cmp	r2, r5
   157c0:	d200      	bcs.n	157c4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   157c2:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   157c4:	2001      	movs	r0, #1
}
   157c6:	b004      	add	sp, #16
   157c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   157cc:	6861      	ldr	r1, [r4, #4]
   157ce:	6830      	ldr	r0, [r6, #0]
   157d0:	f008 f8d2 	bl	1d978 <bt_uuid_cmp>
   157d4:	b110      	cbz	r0, 157dc <read_group_cb+0x60>
		data->group = NULL;
   157d6:	2300      	movs	r3, #0
   157d8:	6123      	str	r3, [r4, #16]
   157da:	e7f3      	b.n	157c4 <read_group_cb+0x48>
	if (data->rsp->len &&
   157dc:	68e3      	ldr	r3, [r4, #12]
   157de:	68a0      	ldr	r0, [r4, #8]
   157e0:	781a      	ldrb	r2, [r3, #0]
   157e2:	b13a      	cbz	r2, 157f4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   157e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   157e8:	8981      	ldrh	r1, [r0, #12]
   157ea:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   157ec:	4293      	cmp	r3, r2
   157ee:	da01      	bge.n	157f4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   157f0:	2000      	movs	r0, #0
   157f2:	e7e8      	b.n	157c6 <read_group_cb+0x4a>
   157f4:	2104      	movs	r1, #4
   157f6:	3008      	adds	r0, #8
   157f8:	f00a f8cd 	bl	1f996 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   157fc:	4b09      	ldr	r3, [pc, #36]	; (15824 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   157fe:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15800:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15802:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15804:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15806:	4631      	mov	r1, r6
   15808:	9300      	str	r3, [sp, #0]
   1580a:	9401      	str	r4, [sp, #4]
   1580c:	2300      	movs	r3, #0
   1580e:	4638      	mov	r0, r7
   15810:	f008 fe32 	bl	1e478 <att_chan_read>
	if (read < 0) {
   15814:	2800      	cmp	r0, #0
   15816:	dbeb      	blt.n	157f0 <read_group_cb+0x74>
	if (!data->group) {
   15818:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1581a:	3800      	subs	r0, #0
   1581c:	bf18      	it	ne
   1581e:	2001      	movne	r0, #1
   15820:	e7d1      	b.n	157c6 <read_group_cb+0x4a>
   15822:	bf00      	nop
   15824:	0001e627 	.word	0x0001e627

00015828 <read_type_cb>:
{
   15828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1582c:	f8d2 8000 	ldr.w	r8, [r2]
{
   15830:	4606      	mov	r6, r0
   15832:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15834:	6800      	ldr	r0, [r0, #0]
   15836:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   15838:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1583c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1583e:	f008 f89b 	bl	1d978 <bt_uuid_cmp>
   15842:	4607      	mov	r7, r0
   15844:	2800      	cmp	r0, #0
   15846:	d13e      	bne.n	158c6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15848:	4628      	mov	r0, r5
   1584a:	2215      	movs	r2, #21
   1584c:	4631      	mov	r1, r6
   1584e:	f009 fb5b 	bl	1ef08 <bt_gatt_check_perm>
   15852:	4605      	mov	r5, r0
   15854:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   15856:	b148      	cbz	r0, 1586c <read_type_cb+0x44>
		if (data->rsp->len) {
   15858:	68e3      	ldr	r3, [r4, #12]
   1585a:	781b      	ldrb	r3, [r3, #0]
   1585c:	b923      	cbnz	r3, 15868 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1585e:	2500      	movs	r5, #0
}
   15860:	4628      	mov	r0, r5
   15862:	b003      	add	sp, #12
   15864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   15868:	7527      	strb	r7, [r4, #20]
   1586a:	e7f8      	b.n	1585e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1586c:	68a0      	ldr	r0, [r4, #8]
   1586e:	f00a f870 	bl	1f952 <net_buf_frag_last>
   15872:	2102      	movs	r1, #2
   15874:	3008      	adds	r0, #8
   15876:	f00a f88e 	bl	1f996 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1587a:	4b14      	ldr	r3, [pc, #80]	; (158cc <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1587c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1587e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   15880:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15884:	4631      	mov	r1, r6
   15886:	9300      	str	r3, [sp, #0]
   15888:	9401      	str	r4, [sp, #4]
   1588a:	462b      	mov	r3, r5
   1588c:	4640      	mov	r0, r8
   1588e:	f008 fdf3 	bl	1e478 <att_chan_read>
	if (read < 0) {
   15892:	2800      	cmp	r0, #0
   15894:	da07      	bge.n	158a6 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15896:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1589a:	bf26      	itte	cs
   1589c:	4240      	negcs	r0, r0
   1589e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   158a0:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   158a2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   158a4:	e7dc      	b.n	15860 <read_type_cb+0x38>
	if (!data->item) {
   158a6:	6923      	ldr	r3, [r4, #16]
   158a8:	2b00      	cmp	r3, #0
   158aa:	d0d8      	beq.n	1585e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   158ac:	68a0      	ldr	r0, [r4, #8]
   158ae:	f008 fd8b 	bl	1e3c8 <net_buf_frags_len>
   158b2:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   158b6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   158b8:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   158ba:	7818      	ldrb	r0, [r3, #0]
   158bc:	4285      	cmp	r5, r0
   158be:	bf94      	ite	ls
   158c0:	2500      	movls	r5, #0
   158c2:	2501      	movhi	r5, #1
   158c4:	e7cc      	b.n	15860 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   158c6:	2501      	movs	r5, #1
   158c8:	e7ca      	b.n	15860 <read_type_cb+0x38>
   158ca:	bf00      	nop
   158cc:	0001e3e5 	.word	0x0001e3e5

000158d0 <find_type_cb>:
{
   158d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   158d4:	f8d2 9000 	ldr.w	r9, [r2]
{
   158d8:	b091      	sub	sp, #68	; 0x44
   158da:	4607      	mov	r7, r0
   158dc:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   158de:	2500      	movs	r5, #0
   158e0:	f642 0301 	movw	r3, #10241	; 0x2801
   158e4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   158e6:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   158ea:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   158ee:	a90b      	add	r1, sp, #44	; 0x2c
{
   158f0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   158f2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   158f6:	f008 f83f 	bl	1d978 <bt_uuid_cmp>
   158fa:	2800      	cmp	r0, #0
   158fc:	d066      	beq.n	159cc <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   158fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15902:	6838      	ldr	r0, [r7, #0]
   15904:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   15908:	a90b      	add	r1, sp, #44	; 0x2c
   1590a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1590e:	f008 f833 	bl	1d978 <bt_uuid_cmp>
   15912:	b138      	cbz	r0, 15924 <find_type_cb+0x54>
		if (data->group &&
   15914:	68a3      	ldr	r3, [r4, #8]
   15916:	b11b      	cbz	r3, 15920 <find_type_cb+0x50>
   15918:	885a      	ldrh	r2, [r3, #2]
   1591a:	42b2      	cmp	r2, r6
   1591c:	d200      	bcs.n	15920 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1591e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   15920:	2001      	movs	r0, #1
   15922:	e009      	b.n	15938 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15924:	6861      	ldr	r1, [r4, #4]
   15926:	4608      	mov	r0, r1
   15928:	f008 fd4e 	bl	1e3c8 <net_buf_frags_len>
   1592c:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   15930:	1a1b      	subs	r3, r3, r0
   15932:	2b03      	cmp	r3, #3
   15934:	d803      	bhi.n	1593e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   15936:	2000      	movs	r0, #0
}
   15938:	b011      	add	sp, #68	; 0x44
   1593a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1593e:	4608      	mov	r0, r1
   15940:	f00a f807 	bl	1f952 <net_buf_frag_last>
   15944:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15946:	6860      	ldr	r0, [r4, #4]
   15948:	f008 fd3e 	bl	1e3c8 <net_buf_frags_len>
   1594c:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   15950:	f105 0b08 	add.w	fp, r5, #8
   15954:	ebaa 0a00 	sub.w	sl, sl, r0
   15958:	4658      	mov	r0, fp
   1595a:	f00a f857 	bl	1fa0c <net_buf_simple_tailroom>
   1595e:	4582      	cmp	sl, r0
   15960:	d237      	bcs.n	159d2 <find_type_cb+0x102>
   15962:	6860      	ldr	r0, [r4, #4]
   15964:	f008 fd30 	bl	1e3c8 <net_buf_frags_len>
   15968:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1596c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1596e:	b970      	cbnz	r0, 1598e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15970:	6863      	ldr	r3, [r4, #4]
   15972:	7998      	ldrb	r0, [r3, #6]
   15974:	f003 f99a 	bl	18cac <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15978:	2200      	movs	r2, #0
   1597a:	2300      	movs	r3, #0
   1597c:	f009 ffb5 	bl	1f8ea <net_buf_alloc_fixed>
		if (!frag) {
   15980:	4605      	mov	r5, r0
   15982:	2800      	cmp	r0, #0
   15984:	d0d7      	beq.n	15936 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   15986:	4601      	mov	r1, r0
   15988:	6860      	ldr	r0, [r4, #4]
   1598a:	f009 fff3 	bl	1f974 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1598e:	2300      	movs	r3, #0
   15990:	9300      	str	r3, [sp, #0]
   15992:	f8d7 9004 	ldr.w	r9, [r7, #4]
   15996:	4639      	mov	r1, r7
   15998:	2310      	movs	r3, #16
   1599a:	aa02      	add	r2, sp, #8
   1599c:	4640      	mov	r0, r8
   1599e:	47c8      	blx	r9
	if (read < 0) {
   159a0:	1e07      	subs	r7, r0, #0
   159a2:	db13      	blt.n	159cc <find_type_cb+0xfc>
	if (read != data->value_len) {
   159a4:	7c22      	ldrb	r2, [r4, #16]
   159a6:	68e0      	ldr	r0, [r4, #12]
   159a8:	42ba      	cmp	r2, r7
   159aa:	d037      	beq.n	15a1c <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   159ac:	4601      	mov	r1, r0
   159ae:	a80b      	add	r0, sp, #44	; 0x2c
   159b0:	f008 f80c 	bl	1d9cc <bt_uuid_create>
   159b4:	b988      	cbnz	r0, 159da <find_type_cb+0x10a>
   159b6:	4a1b      	ldr	r2, [pc, #108]	; (15a24 <find_type_cb+0x154>)
   159b8:	4b1b      	ldr	r3, [pc, #108]	; (15a28 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   159ba:	7c21      	ldrb	r1, [r4, #16]
   159bc:	481b      	ldr	r0, [pc, #108]	; (15a2c <find_type_cb+0x15c>)
   159be:	1ad2      	subs	r2, r2, r3
   159c0:	08d2      	lsrs	r2, r2, #3
   159c2:	0192      	lsls	r2, r2, #6
   159c4:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   159c8:	f006 fbe7 	bl	1c19a <log_1>
	data->group = NULL;
   159cc:	2300      	movs	r3, #0
   159ce:	60a3      	str	r3, [r4, #8]
   159d0:	e7a6      	b.n	15920 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   159d2:	4658      	mov	r0, fp
   159d4:	f00a f81a 	bl	1fa0c <net_buf_simple_tailroom>
   159d8:	e7c9      	b.n	1596e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   159da:	b2fa      	uxtb	r2, r7
   159dc:	a902      	add	r1, sp, #8
   159de:	a806      	add	r0, sp, #24
   159e0:	f007 fff4 	bl	1d9cc <bt_uuid_create>
   159e4:	b948      	cbnz	r0, 159fa <find_type_cb+0x12a>
   159e6:	4a0f      	ldr	r2, [pc, #60]	; (15a24 <find_type_cb+0x154>)
   159e8:	4b0f      	ldr	r3, [pc, #60]	; (15a28 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   159ea:	4811      	ldr	r0, [pc, #68]	; (15a30 <find_type_cb+0x160>)
   159ec:	1ad2      	subs	r2, r2, r3
   159ee:	08d2      	lsrs	r2, r2, #3
   159f0:	0192      	lsls	r2, r2, #6
   159f2:	f042 0202 	orr.w	r2, r2, #2
   159f6:	4639      	mov	r1, r7
   159f8:	e7e6      	b.n	159c8 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   159fa:	a906      	add	r1, sp, #24
   159fc:	a80b      	add	r0, sp, #44	; 0x2c
   159fe:	f007 ffbb 	bl	1d978 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15a02:	2800      	cmp	r0, #0
   15a04:	d1e2      	bne.n	159cc <find_type_cb+0xfc>
	data->err = 0x00;
   15a06:	2300      	movs	r3, #0
   15a08:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   15a0a:	2104      	movs	r1, #4
   15a0c:	f105 0008 	add.w	r0, r5, #8
   15a10:	f009 ffc1 	bl	1f996 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15a14:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15a16:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15a18:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   15a1a:	e781      	b.n	15920 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   15a1c:	a902      	add	r1, sp, #8
   15a1e:	f007 febb 	bl	1d798 <memcmp>
   15a22:	e7ee      	b.n	15a02 <find_type_cb+0x132>
   15a24:	00020864 	.word	0x00020864
   15a28:	00020854 	.word	0x00020854
   15a2c:	00022753 	.word	0x00022753
   15a30:	00022772 	.word	0x00022772

00015a34 <chan_send>:
{
   15a34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15a38:	688b      	ldr	r3, [r1, #8]
   15a3a:	781b      	ldrb	r3, [r3, #0]
   15a3c:	2bd2      	cmp	r3, #210	; 0xd2
{
   15a3e:	4606      	mov	r6, r0
   15a40:	460c      	mov	r4, r1
   15a42:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15a44:	d116      	bne.n	15a74 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   15a46:	6803      	ldr	r3, [r0, #0]
   15a48:	6818      	ldr	r0, [r3, #0]
   15a4a:	f009 fdbe 	bl	1f5ca <bt_smp_sign>
		if (err) {
   15a4e:	4605      	mov	r5, r0
   15a50:	b180      	cbz	r0, 15a74 <chan_send+0x40>
   15a52:	4b24      	ldr	r3, [pc, #144]	; (15ae4 <chan_send+0xb0>)
   15a54:	4924      	ldr	r1, [pc, #144]	; (15ae8 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   15a56:	4825      	ldr	r0, [pc, #148]	; (15aec <chan_send+0xb8>)
   15a58:	1ac9      	subs	r1, r1, r3
   15a5a:	08c9      	lsrs	r1, r1, #3
   15a5c:	0189      	lsls	r1, r1, #6
   15a5e:	f041 0101 	orr.w	r1, r1, #1
   15a62:	f006 fb8d 	bl	1c180 <log_0>
			net_buf_unref(buf);
   15a66:	4620      	mov	r0, r4
   15a68:	f003 f9dc 	bl	18e24 <net_buf_unref>
}
   15a6c:	4628      	mov	r0, r5
   15a6e:	b003      	add	sp, #12
   15a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15a74:	f104 0008 	add.w	r0, r4, #8
   15a78:	f009 ffc4 	bl	1fa04 <net_buf_simple_headroom>
	state->len = buf->len;
   15a7c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   15a80:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   15a82:	b957      	cbnz	r7, 15a9a <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   15a84:	68a3      	ldr	r3, [r4, #8]
   15a86:	7818      	ldrb	r0, [r3, #0]
   15a88:	f008 fcbe 	bl	1e408 <att_op_get_type>
   15a8c:	1e43      	subs	r3, r0, #1
   15a8e:	b2db      	uxtb	r3, r3
   15a90:	2b04      	cmp	r3, #4
   15a92:	bf9c      	itt	ls
   15a94:	4a16      	ldrls	r2, [pc, #88]	; (15af0 <chan_send+0xbc>)
   15a96:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15a9a:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   15a9c:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15aa0:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   15aa2:	4b14      	ldr	r3, [pc, #80]	; (15af4 <chan_send+0xc0>)
   15aa4:	429f      	cmp	r7, r3
   15aa6:	d018      	beq.n	15ada <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   15aa8:	4b13      	ldr	r3, [pc, #76]	; (15af8 <chan_send+0xc4>)
   15aaa:	429f      	cmp	r7, r3
   15aac:	d017      	beq.n	15ade <chan_send+0xaa>
		return att_sent;
   15aae:	4913      	ldr	r1, [pc, #76]	; (15afc <chan_send+0xc8>)
   15ab0:	4b13      	ldr	r3, [pc, #76]	; (15b00 <chan_send+0xcc>)
   15ab2:	4a14      	ldr	r2, [pc, #80]	; (15b04 <chan_send+0xd0>)
   15ab4:	428f      	cmp	r7, r1
   15ab6:	bf18      	it	ne
   15ab8:	4613      	movne	r3, r2
			       &chan->chan.chan);
   15aba:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15abc:	9600      	str	r6, [sp, #0]
   15abe:	4622      	mov	r2, r4
   15ac0:	2104      	movs	r1, #4
   15ac2:	f008 fc22 	bl	1e30a <bt_l2cap_send_cb>
	if (err) {
   15ac6:	4605      	mov	r5, r0
   15ac8:	2800      	cmp	r0, #0
   15aca:	d0cf      	beq.n	15a6c <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   15acc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15ace:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15ad2:	fa10 f088 	uxtah	r0, r0, r8
   15ad6:	60a0      	str	r0, [r4, #8]
}
   15ad8:	e7c8      	b.n	15a6c <chan_send+0x38>
		return att_rsp_sent;
   15ada:	4b0b      	ldr	r3, [pc, #44]	; (15b08 <chan_send+0xd4>)
   15adc:	e7ed      	b.n	15aba <chan_send+0x86>
		return att_cfm_sent;
   15ade:	4b0b      	ldr	r3, [pc, #44]	; (15b0c <chan_send+0xd8>)
   15ae0:	e7eb      	b.n	15aba <chan_send+0x86>
   15ae2:	bf00      	nop
   15ae4:	00020854 	.word	0x00020854
   15ae8:	00020864 	.word	0x00020864
   15aec:	00022791 	.word	0x00022791
   15af0:	00020e8c 	.word	0x00020e8c
   15af4:	0001e6c7 	.word	0x0001e6c7
   15af8:	0001e6e3 	.word	0x0001e6e3
   15afc:	0001e6ad 	.word	0x0001e6ad
   15b00:	00015755 	.word	0x00015755
   15b04:	0001e3d9 	.word	0x0001e3d9
   15b08:	00015745 	.word	0x00015745
   15b0c:	00015735 	.word	0x00015735

00015b10 <att_get>:
{
   15b10:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15b12:	7b43      	ldrb	r3, [r0, #13]
   15b14:	2b07      	cmp	r3, #7
   15b16:	d00b      	beq.n	15b30 <att_get+0x20>
   15b18:	4918      	ldr	r1, [pc, #96]	; (15b7c <att_get+0x6c>)
   15b1a:	4b19      	ldr	r3, [pc, #100]	; (15b80 <att_get+0x70>)
		BT_WARN("Not connected");
   15b1c:	4819      	ldr	r0, [pc, #100]	; (15b84 <att_get+0x74>)
   15b1e:	1ac9      	subs	r1, r1, r3
   15b20:	08c9      	lsrs	r1, r1, #3
   15b22:	0189      	lsls	r1, r1, #6
   15b24:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   15b28:	f006 fb2a 	bl	1c180 <log_0>
		return NULL;
   15b2c:	2400      	movs	r4, #0
   15b2e:	e00e      	b.n	15b4e <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   15b30:	2104      	movs	r1, #4
   15b32:	f008 fc13 	bl	1e35c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15b36:	4604      	mov	r4, r0
   15b38:	b958      	cbnz	r0, 15b52 <att_get+0x42>
   15b3a:	4910      	ldr	r1, [pc, #64]	; (15b7c <att_get+0x6c>)
   15b3c:	4b10      	ldr	r3, [pc, #64]	; (15b80 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   15b3e:	4812      	ldr	r0, [pc, #72]	; (15b88 <att_get+0x78>)
   15b40:	1ac9      	subs	r1, r1, r3
   15b42:	08c9      	lsrs	r1, r1, #3
   15b44:	0189      	lsls	r1, r1, #6
   15b46:	f041 0101 	orr.w	r1, r1, #1
   15b4a:	f006 fb19 	bl	1c180 <log_0>
}
   15b4e:	4620      	mov	r0, r4
   15b50:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15b52:	f3bf 8f5b 	dmb	ish
   15b56:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   15b5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   15b5e:	075b      	lsls	r3, r3, #29
   15b60:	d508      	bpl.n	15b74 <att_get+0x64>
   15b62:	4906      	ldr	r1, [pc, #24]	; (15b7c <att_get+0x6c>)
   15b64:	4b06      	ldr	r3, [pc, #24]	; (15b80 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   15b66:	4809      	ldr	r0, [pc, #36]	; (15b8c <att_get+0x7c>)
   15b68:	1ac9      	subs	r1, r1, r3
   15b6a:	08c9      	lsrs	r1, r1, #3
   15b6c:	0189      	lsls	r1, r1, #6
   15b6e:	f041 0102 	orr.w	r1, r1, #2
   15b72:	e7d9      	b.n	15b28 <att_get+0x18>
	return att_chan->att;
   15b74:	f850 4c08 	ldr.w	r4, [r0, #-8]
   15b78:	e7e9      	b.n	15b4e <att_get+0x3e>
   15b7a:	bf00      	nop
   15b7c:	00020864 	.word	0x00020864
   15b80:	00020854 	.word	0x00020854
   15b84:	000227a4 	.word	0x000227a4
   15b88:	000227b2 	.word	0x000227b2
   15b8c:	000227cd 	.word	0x000227cd

00015b90 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15b90:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   15b92:	4a07      	ldr	r2, [pc, #28]	; (15bb0 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15b94:	4604      	mov	r4, r0
   15b96:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   15b98:	f7ff ff4c 	bl	15a34 <chan_send>
	if (err) {
   15b9c:	b130      	cbz	r0, 15bac <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   15b9e:	4629      	mov	r1, r5
   15ba0:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   15ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   15ba8:	f009 bec2 	b.w	1f930 <net_buf_put>
}
   15bac:	bd38      	pop	{r3, r4, r5, pc}
   15bae:	bf00      	nop
   15bb0:	0001e6c7 	.word	0x0001e6c7

00015bb4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15bb6:	2300      	movs	r3, #0
{
   15bb8:	4606      	mov	r6, r0
   15bba:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15bbc:	4828      	ldr	r0, [pc, #160]	; (15c60 <bt_att_accept+0xac>)
   15bbe:	2200      	movs	r2, #0
   15bc0:	4669      	mov	r1, sp
   15bc2:	f004 fbf7 	bl	1a3b4 <k_mem_slab_alloc>
   15bc6:	4604      	mov	r4, r0
   15bc8:	b178      	cbz	r0, 15bea <bt_att_accept+0x36>
   15bca:	4a26      	ldr	r2, [pc, #152]	; (15c64 <bt_att_accept+0xb0>)
   15bcc:	4b26      	ldr	r3, [pc, #152]	; (15c68 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
   15bce:	4827      	ldr	r0, [pc, #156]	; (15c6c <bt_att_accept+0xb8>)
   15bd0:	1ad2      	subs	r2, r2, r3
   15bd2:	08d2      	lsrs	r2, r2, #3
   15bd4:	0192      	lsls	r2, r2, #6
   15bd6:	f042 0201 	orr.w	r2, r2, #1
   15bda:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   15bdc:	f006 fadd 	bl	1c19a <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   15be0:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   15be4:	4620      	mov	r0, r4
   15be6:	b003      	add	sp, #12
   15be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   15bea:	4601      	mov	r1, r0
   15bec:	222c      	movs	r2, #44	; 0x2c
   15bee:	9800      	ldr	r0, [sp, #0]
   15bf0:	f007 fe0d 	bl	1d80e <memset>
	att->conn = conn;
   15bf4:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15bf6:	481e      	ldr	r0, [pc, #120]	; (15c70 <bt_att_accept+0xbc>)
	list->tail = NULL;
   15bf8:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   15bfa:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   15bfe:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   15c02:	2200      	movs	r2, #0
   15c04:	2300      	movs	r3, #0
   15c06:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15c08:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15c0a:	f004 fbd3 	bl	1a3b4 <k_mem_slab_alloc>
   15c0e:	4604      	mov	r4, r0
   15c10:	b148      	cbz	r0, 15c26 <bt_att_accept+0x72>
   15c12:	4a14      	ldr	r2, [pc, #80]	; (15c64 <bt_att_accept+0xb0>)
   15c14:	4b14      	ldr	r3, [pc, #80]	; (15c68 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   15c16:	6829      	ldr	r1, [r5, #0]
   15c18:	4816      	ldr	r0, [pc, #88]	; (15c74 <bt_att_accept+0xc0>)
   15c1a:	1ad2      	subs	r2, r2, r3
   15c1c:	08d2      	lsrs	r2, r2, #3
   15c1e:	0192      	lsls	r2, r2, #6
   15c20:	f042 0201 	orr.w	r2, r2, #1
   15c24:	e7da      	b.n	15bdc <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   15c26:	4601      	mov	r1, r0
   15c28:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15c2c:	9801      	ldr	r0, [sp, #4]
   15c2e:	f007 fdee 	bl	1d80e <memset>
	chan->chan.chan.ops = &ops;
   15c32:	9801      	ldr	r0, [sp, #4]
   15c34:	4b10      	ldr	r3, [pc, #64]	; (15c78 <bt_att_accept+0xc4>)
   15c36:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   15c38:	30f8      	adds	r0, #248	; 0xf8
   15c3a:	f00a f8a1 	bl	1fd80 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15c3e:	9b01      	ldr	r3, [sp, #4]
   15c40:	f3bf 8f5b 	dmb	ish
   15c44:	33f0      	adds	r3, #240	; 0xf0
   15c46:	e853 2f00 	ldrex	r2, [r3]
   15c4a:	e843 4100 	strex	r1, r4, [r3]
   15c4e:	2900      	cmp	r1, #0
   15c50:	d1f9      	bne.n	15c46 <bt_att_accept+0x92>
   15c52:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   15c56:	9b01      	ldr	r3, [sp, #4]
   15c58:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   15c5c:	603b      	str	r3, [r7, #0]
	return 0;
   15c5e:	e7c1      	b.n	15be4 <bt_att_accept+0x30>
   15c60:	200006c8 	.word	0x200006c8
   15c64:	00020864 	.word	0x00020864
   15c68:	00020854 	.word	0x00020854
   15c6c:	000227f1 	.word	0x000227f1
   15c70:	200006e4 	.word	0x200006e4
   15c74:	00022816 	.word	0x00022816
   15c78:	200004e4 	.word	0x200004e4

00015c7c <bt_att_connected>:
{
   15c7c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15c7e:	2104      	movs	r1, #4
{
   15c80:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15c82:	6800      	ldr	r0, [r0, #0]
   15c84:	f008 fb5a 	bl	1e33c <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   15c88:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   15c8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15c8e:	b91b      	cbnz	r3, 15c98 <bt_att_connected+0x1c>
   15c90:	f105 000c 	add.w	r0, r5, #12
   15c94:	f00a f874 	bl	1fd80 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   15c98:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   15c9a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   15c9e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15ca0:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   15ca4:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   15ca6:	b902      	cbnz	r2, 15caa <bt_att_connected+0x2e>
	list->tail = node;
   15ca8:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15caa:	f3bf 8f5b 	dmb	ish
   15cae:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15cb2:	4908      	ldr	r1, [pc, #32]	; (15cd4 <bt_att_connected+0x58>)
   15cb4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   15cb8:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15cba:	bf5e      	ittt	pl
   15cbc:	2317      	movpl	r3, #23
   15cbe:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15cc2:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15cc6:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   15cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15cce:	f00a b951 	b.w	1ff74 <k_work_init_delayable>
   15cd2:	bf00      	nop
   15cd4:	0001660d 	.word	0x0001660d

00015cd8 <att_write_cmd>:
{
   15cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15cda:	4604      	mov	r4, r0
   15cdc:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   15cde:	f101 0008 	add.w	r0, r1, #8
   15ce2:	460d      	mov	r5, r1
   15ce4:	f009 fe86 	bl	1f9f4 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15ce8:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   15cea:	68af      	ldr	r7, [r5, #8]
   15cec:	89ad      	ldrh	r5, [r5, #12]
   15cee:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15cf0:	2100      	movs	r1, #0
   15cf2:	6818      	ldr	r0, [r3, #0]
   15cf4:	f009 f933 	bl	1ef5e <bt_gatt_change_aware>
   15cf8:	b320      	cbz	r0, 15d44 <att_write_cmd+0x6c>
	if (!handle) {
   15cfa:	b32e      	cbz	r6, 15d48 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   15cfc:	2218      	movs	r2, #24
   15cfe:	2100      	movs	r1, #0
   15d00:	4668      	mov	r0, sp
   15d02:	f007 fd84 	bl	1d80e <memset>
	data.conn = chan->att->conn;
   15d06:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15d08:	4a10      	ldr	r2, [pc, #64]	; (15d4c <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   15d0a:	681b      	ldr	r3, [r3, #0]
   15d0c:	9300      	str	r3, [sp, #0]
	data.req = req;
   15d0e:	2300      	movs	r3, #0
   15d10:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   15d14:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15d18:	2301      	movs	r3, #1
   15d1a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15d1e:	4631      	mov	r1, r6
   15d20:	466b      	mov	r3, sp
   15d22:	4630      	mov	r0, r6
	data.value = value;
   15d24:	9703      	str	r7, [sp, #12]
	data.len = len;
   15d26:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15d2a:	f008 fb9a 	bl	1e462 <bt_gatt_foreach_attr>
	if (data.err) {
   15d2e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15d32:	b923      	cbnz	r3, 15d3e <att_write_cmd+0x66>
	if (data.buf) {
   15d34:	9901      	ldr	r1, [sp, #4]
   15d36:	b111      	cbz	r1, 15d3e <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15d38:	4620      	mov	r0, r4
   15d3a:	f7ff ff29 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
   15d3e:	2000      	movs	r0, #0
}
   15d40:	b007      	add	sp, #28
   15d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15d44:	2012      	movs	r0, #18
   15d46:	e7fb      	b.n	15d40 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   15d48:	2001      	movs	r0, #1
   15d4a:	e7f9      	b.n	15d40 <att_write_cmd+0x68>
   15d4c:	0001e79f 	.word	0x0001e79f

00015d50 <bt_att_chan_create_pdu>:
{
   15d50:	b538      	push	{r3, r4, r5, lr}
   15d52:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   15d54:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   15d58:	3201      	adds	r2, #1
   15d5a:	428a      	cmp	r2, r1
   15d5c:	d90c      	bls.n	15d78 <bt_att_chan_create_pdu+0x28>
   15d5e:	481a      	ldr	r0, [pc, #104]	; (15dc8 <bt_att_chan_create_pdu+0x78>)
   15d60:	4b1a      	ldr	r3, [pc, #104]	; (15dcc <bt_att_chan_create_pdu+0x7c>)
   15d62:	1a1b      	subs	r3, r3, r0
   15d64:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   15d66:	019b      	lsls	r3, r3, #6
   15d68:	4819      	ldr	r0, [pc, #100]	; (15dd0 <bt_att_chan_create_pdu+0x80>)
   15d6a:	f043 0302 	orr.w	r3, r3, #2
   15d6e:	f006 fa28 	bl	1c1c2 <log_2>
		return NULL;
   15d72:	2400      	movs	r4, #0
}
   15d74:	4620      	mov	r0, r4
   15d76:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   15d78:	4628      	mov	r0, r5
   15d7a:	f008 fb45 	bl	1e408 <att_op_get_type>
   15d7e:	2802      	cmp	r0, #2
   15d80:	d001      	beq.n	15d86 <bt_att_chan_create_pdu+0x36>
   15d82:	2804      	cmp	r0, #4
   15d84:	d114      	bne.n	15db0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   15d86:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15d8a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   15d8c:	2100      	movs	r1, #0
   15d8e:	4608      	mov	r0, r1
   15d90:	f008 fab8 	bl	1e304 <bt_l2cap_create_pdu_timeout>
   15d94:	4604      	mov	r4, r0
	if (!buf) {
   15d96:	b980      	cbnz	r0, 15dba <bt_att_chan_create_pdu+0x6a>
   15d98:	4b0b      	ldr	r3, [pc, #44]	; (15dc8 <bt_att_chan_create_pdu+0x78>)
   15d9a:	4a0c      	ldr	r2, [pc, #48]	; (15dcc <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   15d9c:	480d      	ldr	r0, [pc, #52]	; (15dd4 <bt_att_chan_create_pdu+0x84>)
   15d9e:	1ad2      	subs	r2, r2, r3
   15da0:	08d2      	lsrs	r2, r2, #3
   15da2:	0192      	lsls	r2, r2, #6
   15da4:	f042 0201 	orr.w	r2, r2, #1
   15da8:	4629      	mov	r1, r5
   15daa:	f006 f9f6 	bl	1c19a <log_1>
		return NULL;
   15dae:	e7e1      	b.n	15d74 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   15db0:	f04f 32ff 	mov.w	r2, #4294967295
   15db4:	f04f 33ff 	mov.w	r3, #4294967295
   15db8:	e7e8      	b.n	15d8c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   15dba:	2101      	movs	r1, #1
   15dbc:	3008      	adds	r0, #8
   15dbe:	f009 fdea 	bl	1f996 <net_buf_simple_add>
	hdr->code = op;
   15dc2:	7005      	strb	r5, [r0, #0]
	return buf;
   15dc4:	e7d6      	b.n	15d74 <bt_att_chan_create_pdu+0x24>
   15dc6:	bf00      	nop
   15dc8:	00020854 	.word	0x00020854
   15dcc:	00020864 	.word	0x00020864
   15dd0:	0002283b 	.word	0x0002283b
   15dd4:	00022628 	.word	0x00022628

00015dd8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   15dd8:	898b      	ldrh	r3, [r1, #12]
{
   15dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15dde:	4604      	mov	r4, r0
   15de0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   15de2:	b963      	cbnz	r3, 15dfe <bt_att_recv+0x26>
   15de4:	494c      	ldr	r1, [pc, #304]	; (15f18 <bt_att_recv+0x140>)
   15de6:	4b4d      	ldr	r3, [pc, #308]	; (15f1c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   15de8:	484d      	ldr	r0, [pc, #308]	; (15f20 <bt_att_recv+0x148>)
   15dea:	1ac9      	subs	r1, r1, r3
   15dec:	08c9      	lsrs	r1, r1, #3
   15dee:	0189      	lsls	r1, r1, #6
   15df0:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   15df4:	f006 f9c4 	bl	1c180 <log_0>
}
   15df8:	2000      	movs	r0, #0
   15dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15dfe:	2101      	movs	r1, #1
   15e00:	f108 0008 	add.w	r0, r8, #8
   15e04:	f009 fdee 	bl	1f9e4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15e08:	f854 3c08 	ldr.w	r3, [r4, #-8]
   15e0c:	4605      	mov	r5, r0
   15e0e:	2b00      	cmp	r3, #0
   15e10:	d0f2      	beq.n	15df8 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   15e12:	4a44      	ldr	r2, [pc, #272]	; (15f24 <bt_att_recv+0x14c>)
   15e14:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15e16:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15e1a:	2300      	movs	r3, #0
   15e1c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   15e1e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   15e22:	4288      	cmp	r0, r1
   15e24:	d11d      	bne.n	15e62 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   15e26:	00d8      	lsls	r0, r3, #3
   15e28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15e2c:	789f      	ldrb	r7, [r3, #2]
   15e2e:	2f01      	cmp	r7, #1
   15e30:	d132      	bne.n	15e98 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15e32:	f3bf 8f5b 	dmb	ish
   15e36:	34e8      	adds	r4, #232	; 0xe8
   15e38:	e854 3f00 	ldrex	r3, [r4]
   15e3c:	f043 0201 	orr.w	r2, r3, #1
   15e40:	e844 2100 	strex	r1, r2, [r4]
   15e44:	2900      	cmp	r1, #0
   15e46:	d1f7      	bne.n	15e38 <bt_att_recv+0x60>
   15e48:	f3bf 8f5b 	dmb	ish
   15e4c:	07da      	lsls	r2, r3, #31
   15e4e:	d53d      	bpl.n	15ecc <bt_att_recv+0xf4>
   15e50:	4931      	ldr	r1, [pc, #196]	; (15f18 <bt_att_recv+0x140>)
   15e52:	4b32      	ldr	r3, [pc, #200]	; (15f1c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   15e54:	4834      	ldr	r0, [pc, #208]	; (15f28 <bt_att_recv+0x150>)
   15e56:	1ac9      	subs	r1, r1, r3
   15e58:	08c9      	lsrs	r1, r1, #3
   15e5a:	0189      	lsls	r1, r1, #6
   15e5c:	f041 0102 	orr.w	r1, r1, #2
   15e60:	e7c8      	b.n	15df4 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15e62:	3301      	adds	r3, #1
   15e64:	2b0d      	cmp	r3, #13
   15e66:	d1da      	bne.n	15e1e <bt_att_recv+0x46>
   15e68:	4b2c      	ldr	r3, [pc, #176]	; (15f1c <bt_att_recv+0x144>)
   15e6a:	4a2b      	ldr	r2, [pc, #172]	; (15f18 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   15e6c:	482f      	ldr	r0, [pc, #188]	; (15f2c <bt_att_recv+0x154>)
   15e6e:	1ad2      	subs	r2, r2, r3
   15e70:	08d2      	lsrs	r2, r2, #3
   15e72:	0192      	lsls	r2, r2, #6
   15e74:	f042 0202 	orr.w	r2, r2, #2
   15e78:	f006 f98f 	bl	1c19a <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   15e7c:	7829      	ldrb	r1, [r5, #0]
   15e7e:	4608      	mov	r0, r1
   15e80:	f008 fac2 	bl	1e408 <att_op_get_type>
   15e84:	2800      	cmp	r0, #0
   15e86:	d0b7      	beq.n	15df8 <bt_att_recv+0x20>
	if (!req) {
   15e88:	2900      	cmp	r1, #0
   15e8a:	d0b5      	beq.n	15df8 <bt_att_recv+0x20>
   15e8c:	2306      	movs	r3, #6
   15e8e:	2200      	movs	r2, #0
   15e90:	4630      	mov	r0, r6
   15e92:	f008 fd19 	bl	1e8c8 <send_err_rsp.part.0>
   15e96:	e7af      	b.n	15df8 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   15e98:	2f05      	cmp	r7, #5
   15e9a:	d117      	bne.n	15ecc <bt_att_recv+0xf4>
   15e9c:	f3bf 8f5b 	dmb	ish
   15ea0:	34e8      	adds	r4, #232	; 0xe8
   15ea2:	e854 3f00 	ldrex	r3, [r4]
   15ea6:	f043 0202 	orr.w	r2, r3, #2
   15eaa:	e844 2100 	strex	r1, r2, [r4]
   15eae:	2900      	cmp	r1, #0
   15eb0:	d1f7      	bne.n	15ea2 <bt_att_recv+0xca>
   15eb2:	f3bf 8f5b 	dmb	ish
   15eb6:	079b      	lsls	r3, r3, #30
   15eb8:	d508      	bpl.n	15ecc <bt_att_recv+0xf4>
   15eba:	4917      	ldr	r1, [pc, #92]	; (15f18 <bt_att_recv+0x140>)
   15ebc:	4b17      	ldr	r3, [pc, #92]	; (15f1c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   15ebe:	481c      	ldr	r0, [pc, #112]	; (15f30 <bt_att_recv+0x158>)
   15ec0:	1ac9      	subs	r1, r1, r3
   15ec2:	08c9      	lsrs	r1, r1, #3
   15ec4:	0189      	lsls	r1, r1, #6
   15ec6:	f041 0102 	orr.w	r1, r1, #2
   15eca:	e793      	b.n	15df4 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   15ecc:	eb0c 0300 	add.w	r3, ip, r0
   15ed0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   15ed4:	785a      	ldrb	r2, [r3, #1]
   15ed6:	428a      	cmp	r2, r1
   15ed8:	d90e      	bls.n	15ef8 <bt_att_recv+0x120>
   15eda:	4a10      	ldr	r2, [pc, #64]	; (15f1c <bt_att_recv+0x144>)
   15edc:	4b0e      	ldr	r3, [pc, #56]	; (15f18 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   15ede:	4815      	ldr	r0, [pc, #84]	; (15f34 <bt_att_recv+0x15c>)
   15ee0:	1a9b      	subs	r3, r3, r2
   15ee2:	08db      	lsrs	r3, r3, #3
   15ee4:	019b      	lsls	r3, r3, #6
   15ee6:	782a      	ldrb	r2, [r5, #0]
   15ee8:	f043 0301 	orr.w	r3, r3, #1
   15eec:	f006 f969 	bl	1c1c2 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   15ef0:	2f01      	cmp	r7, #1
   15ef2:	d181      	bne.n	15df8 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   15ef4:	2304      	movs	r3, #4
   15ef6:	e00a      	b.n	15f0e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   15ef8:	685b      	ldr	r3, [r3, #4]
   15efa:	4641      	mov	r1, r8
   15efc:	4630      	mov	r0, r6
   15efe:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15f00:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   15f02:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   15f04:	f47f af78 	bne.w	15df8 <bt_att_recv+0x20>
   15f08:	2800      	cmp	r0, #0
   15f0a:	f43f af75 	beq.w	15df8 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15f0e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   15f10:	2900      	cmp	r1, #0
   15f12:	f43f af71 	beq.w	15df8 <bt_att_recv+0x20>
   15f16:	e7ba      	b.n	15e8e <bt_att_recv+0xb6>
   15f18:	00020864 	.word	0x00020864
   15f1c:	00020854 	.word	0x00020854
   15f20:	00022860 	.word	0x00022860
   15f24:	00020ea0 	.word	0x00020ea0
   15f28:	0002287b 	.word	0x0002287b
   15f2c:	000228d5 	.word	0x000228d5
   15f30:	00022897 	.word	0x00022897
   15f34:	000228b6 	.word	0x000228b6

00015f38 <att_write_req>:
{
   15f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15f3c:	4604      	mov	r4, r0
   15f3e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   15f40:	f101 0008 	add.w	r0, r1, #8
   15f44:	460d      	mov	r5, r1
   15f46:	f009 fd55 	bl	1f9f4 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15f4a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   15f4c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   15f50:	89ad      	ldrh	r5, [r5, #12]
   15f52:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15f54:	2101      	movs	r1, #1
   15f56:	6818      	ldr	r0, [r3, #0]
   15f58:	f009 f801 	bl	1ef5e <bt_gatt_change_aware>
   15f5c:	2800      	cmp	r0, #0
   15f5e:	d03f      	beq.n	15fe0 <att_write_req+0xa8>
	if (!handle) {
   15f60:	2e00      	cmp	r6, #0
   15f62:	d03f      	beq.n	15fe4 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   15f64:	2218      	movs	r2, #24
   15f66:	2100      	movs	r1, #0
   15f68:	4668      	mov	r0, sp
   15f6a:	f007 fc50 	bl	1d80e <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15f6e:	2200      	movs	r2, #0
   15f70:	2113      	movs	r1, #19
   15f72:	4620      	mov	r0, r4
   15f74:	f7ff feec 	bl	15d50 <bt_att_chan_create_pdu>
   15f78:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   15f7a:	b378      	cbz	r0, 15fdc <att_write_req+0xa4>
	data.conn = chan->att->conn;
   15f7c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15f7e:	4a1a      	ldr	r2, [pc, #104]	; (15fe8 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   15f80:	681b      	ldr	r3, [r3, #0]
   15f82:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15f84:	2301      	movs	r3, #1
   15f86:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   15f8a:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   15f8e:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15f90:	466b      	mov	r3, sp
   15f92:	4631      	mov	r1, r6
   15f94:	4630      	mov	r0, r6
	data.len = len;
   15f96:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   15f9a:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   15f9e:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   15fa2:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15fa6:	f008 fa5c 	bl	1e462 <bt_gatt_foreach_attr>
	if (data.err) {
   15faa:	f89d 5014 	ldrb.w	r5, [sp, #20]
   15fae:	b175      	cbz	r5, 15fce <att_write_req+0x96>
			net_buf_unref(data.buf);
   15fb0:	9801      	ldr	r0, [sp, #4]
   15fb2:	f002 ff37 	bl	18e24 <net_buf_unref>
	if (!req) {
   15fb6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15fba:	4632      	mov	r2, r6
   15fbc:	4641      	mov	r1, r8
   15fbe:	4620      	mov	r0, r4
   15fc0:	f008 fc82 	bl	1e8c8 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   15fc4:	463d      	mov	r5, r7
}
   15fc6:	4628      	mov	r0, r5
   15fc8:	b007      	add	sp, #28
   15fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   15fce:	9901      	ldr	r1, [sp, #4]
   15fd0:	2900      	cmp	r1, #0
   15fd2:	d0f8      	beq.n	15fc6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15fd4:	4620      	mov	r0, r4
   15fd6:	f7ff fddb 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
   15fda:	e7f4      	b.n	15fc6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   15fdc:	250e      	movs	r5, #14
   15fde:	e7f2      	b.n	15fc6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15fe0:	2512      	movs	r5, #18
   15fe2:	e7f0      	b.n	15fc6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   15fe4:	2501      	movs	r5, #1
   15fe6:	e7ee      	b.n	15fc6 <att_write_req+0x8e>
   15fe8:	0001e79f 	.word	0x0001e79f

00015fec <bt_att_create_pdu>:
{
   15fec:	b570      	push	{r4, r5, r6, lr}
   15fee:	460e      	mov	r6, r1
   15ff0:	4615      	mov	r5, r2
	att = att_get(conn);
   15ff2:	f7ff fd8d 	bl	15b10 <att_get>
	if (!att) {
   15ff6:	b1c0      	cbz	r0, 1602a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15ff8:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
   15ffa:	1c69      	adds	r1, r5, #1
   15ffc:	b15b      	cbz	r3, 16016 <bt_att_create_pdu+0x2a>
   15ffe:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   16002:	d008      	beq.n	16016 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16004:	681b      	ldr	r3, [r3, #0]
   16006:	b10b      	cbz	r3, 1600c <bt_att_create_pdu+0x20>
   16008:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1600c:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   16010:	4291      	cmp	r1, r2
   16012:	d90c      	bls.n	1602e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16014:	b98b      	cbnz	r3, 1603a <bt_att_create_pdu+0x4e>
   16016:	4a0e      	ldr	r2, [pc, #56]	; (16050 <bt_att_create_pdu+0x64>)
   16018:	4b0e      	ldr	r3, [pc, #56]	; (16054 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1601a:	480f      	ldr	r0, [pc, #60]	; (16058 <bt_att_create_pdu+0x6c>)
   1601c:	1ad2      	subs	r2, r2, r3
   1601e:	08d2      	lsrs	r2, r2, #3
   16020:	0192      	lsls	r2, r2, #6
   16022:	f042 0202 	orr.w	r2, r2, #2
   16026:	f006 f8b8 	bl	1c19a <log_1>
}
   1602a:	2000      	movs	r0, #0
   1602c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1602e:	462a      	mov	r2, r5
   16030:	4631      	mov	r1, r6
}
   16032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   16036:	f7ff be8b 	b.w	15d50 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1603a:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   1603e:	d004      	beq.n	1604a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16040:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16044:	b10c      	cbz	r4, 1604a <bt_att_create_pdu+0x5e>
   16046:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1604a:	4618      	mov	r0, r3
   1604c:	4623      	mov	r3, r4
   1604e:	e7dd      	b.n	1600c <bt_att_create_pdu+0x20>
   16050:	00020864 	.word	0x00020864
   16054:	00020854 	.word	0x00020854
   16058:	000228ef 	.word	0x000228ef

0001605c <att_read_group_req>:
{
   1605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16060:	7b0c      	ldrb	r4, [r1, #12]
   16062:	3c04      	subs	r4, #4
   16064:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   16066:	2c02      	cmp	r4, #2
{
   16068:	4605      	mov	r5, r0
   1606a:	b08c      	sub	sp, #48	; 0x30
   1606c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1606e:	d001      	beq.n	16074 <att_read_group_req+0x18>
   16070:	2c10      	cmp	r4, #16
   16072:	d16e      	bne.n	16152 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   16074:	2104      	movs	r1, #4
   16076:	3008      	adds	r0, #8
   16078:	f009 fcb4 	bl	1f9e4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1607c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16080:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16082:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16084:	1d01      	adds	r1, r0, #4
   16086:	4622      	mov	r2, r4
   16088:	4640      	mov	r0, r8
   1608a:	f007 fc9f 	bl	1d9cc <bt_uuid_create>
   1608e:	2800      	cmp	r0, #0
   16090:	d061      	beq.n	16156 <att_read_group_req+0xfa>
	if (!start || !end) {
   16092:	2e00      	cmp	r6, #0
   16094:	d03a      	beq.n	1610c <att_read_group_req+0xb0>
   16096:	2400      	movs	r4, #0
   16098:	2f00      	cmp	r7, #0
   1609a:	d036      	beq.n	1610a <att_read_group_req+0xae>
	if (start > end) {
   1609c:	42b7      	cmp	r7, r6
   1609e:	d335      	bcc.n	1610c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   160a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   160a4:	a901      	add	r1, sp, #4
   160a6:	4640      	mov	r0, r8
   160a8:	f88d 4004 	strb.w	r4, [sp, #4]
   160ac:	f8ad 3006 	strh.w	r3, [sp, #6]
   160b0:	f007 fc62 	bl	1d978 <bt_uuid_cmp>
   160b4:	2800      	cmp	r0, #0
   160b6:	d134      	bne.n	16122 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   160b8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   160ba:	2214      	movs	r2, #20
   160bc:	2100      	movs	r1, #0
   160be:	a807      	add	r0, sp, #28
   160c0:	f007 fba5 	bl	1d80e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   160c4:	2201      	movs	r2, #1
   160c6:	2111      	movs	r1, #17
   160c8:	4620      	mov	r0, r4
   160ca:	f7ff ff8f 	bl	15fec <bt_att_create_pdu>
   160ce:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   160d0:	2800      	cmp	r0, #0
   160d2:	d040      	beq.n	16156 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   160d4:	2101      	movs	r1, #1
   160d6:	3008      	adds	r0, #8
	data.uuid = uuid;
   160d8:	e9cd 5807 	strd	r5, r8, [sp, #28]
   160dc:	f009 fc5b 	bl	1f996 <net_buf_simple_add>
	data.rsp->len = 0U;
   160e0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   160e4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   160e6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   160e8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   160ec:	4a1b      	ldr	r2, [pc, #108]	; (1615c <att_read_group_req+0x100>)
	data.group = NULL;
   160ee:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   160f2:	4639      	mov	r1, r7
   160f4:	4630      	mov	r0, r6
   160f6:	f008 f9b4 	bl	1e462 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   160fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160fc:	781c      	ldrb	r4, [r3, #0]
   160fe:	bb1c      	cbnz	r4, 16148 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   16100:	9809      	ldr	r0, [sp, #36]	; 0x24
   16102:	f002 fe8f 	bl	18e24 <net_buf_unref>
	if (!req) {
   16106:	230a      	movs	r3, #10
   16108:	e018      	b.n	1613c <att_read_group_req+0xe0>
			*err = 0U;
   1610a:	463e      	mov	r6, r7
	if (!req) {
   1610c:	2301      	movs	r3, #1
   1610e:	4632      	mov	r2, r6
   16110:	2110      	movs	r1, #16
   16112:	4628      	mov	r0, r5
   16114:	f008 fbd8 	bl	1e8c8 <send_err_rsp.part.0>
		return 0;
   16118:	2400      	movs	r4, #0
}
   1611a:	4620      	mov	r0, r4
   1611c:	b00c      	add	sp, #48	; 0x30
   1611e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   16122:	f642 0301 	movw	r3, #10241	; 0x2801
   16126:	a907      	add	r1, sp, #28
   16128:	4640      	mov	r0, r8
   1612a:	f88d 401c 	strb.w	r4, [sp, #28]
   1612e:	f8ad 301e 	strh.w	r3, [sp, #30]
   16132:	f007 fc21 	bl	1d978 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16136:	2800      	cmp	r0, #0
   16138:	d0be      	beq.n	160b8 <att_read_group_req+0x5c>
	if (!req) {
   1613a:	2310      	movs	r3, #16
   1613c:	4632      	mov	r2, r6
   1613e:	2110      	movs	r1, #16
   16140:	4628      	mov	r0, r5
   16142:	f008 fbc1 	bl	1e8c8 <send_err_rsp.part.0>
		return 0;
   16146:	e7e8      	b.n	1611a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16148:	9909      	ldr	r1, [sp, #36]	; 0x24
   1614a:	4628      	mov	r0, r5
   1614c:	f7ff fd20 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   16150:	e7e2      	b.n	16118 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   16152:	2404      	movs	r4, #4
   16154:	e7e1      	b.n	1611a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   16156:	240e      	movs	r4, #14
   16158:	e7df      	b.n	1611a <att_read_group_req+0xbe>
   1615a:	bf00      	nop
   1615c:	0001577d 	.word	0x0001577d

00016160 <att_read_mult_req>:
{
   16160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16164:	6886      	ldr	r6, [r0, #8]
{
   16166:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   16168:	2210      	movs	r2, #16
{
   1616a:	4604      	mov	r4, r0
   1616c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   1616e:	4668      	mov	r0, sp
   16170:	2100      	movs	r1, #0
   16172:	f007 fb4c 	bl	1d80e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16176:	2200      	movs	r2, #0
   16178:	210f      	movs	r1, #15
   1617a:	4630      	mov	r0, r6
   1617c:	f7ff ff36 	bl	15fec <bt_att_create_pdu>
   16180:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16182:	b358      	cbz	r0, 161dc <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16184:	f8df 9058 	ldr.w	r9, [pc, #88]	; 161e0 <att_read_mult_req+0x80>
	data.chan = chan;
   16188:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1618a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1618e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   16192:	89ab      	ldrh	r3, [r5, #12]
   16194:	2b01      	cmp	r3, #1
   16196:	d804      	bhi.n	161a2 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16198:	9902      	ldr	r1, [sp, #8]
   1619a:	4620      	mov	r0, r4
   1619c:	f7ff fcf8 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
   161a0:	e018      	b.n	161d4 <att_read_mult_req+0x74>
   161a2:	4638      	mov	r0, r7
   161a4:	f009 fc26 	bl	1f9f4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   161a8:	466b      	mov	r3, sp
   161aa:	464a      	mov	r2, r9
   161ac:	4601      	mov	r1, r0
   161ae:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   161b0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   161b4:	f008 f955 	bl	1e462 <bt_gatt_foreach_attr>
		if (data.err) {
   161b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   161bc:	2b00      	cmp	r3, #0
   161be:	d0e8      	beq.n	16192 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   161c0:	9802      	ldr	r0, [sp, #8]
   161c2:	f002 fe2f 	bl	18e24 <net_buf_unref>
	if (!req) {
   161c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   161ca:	4632      	mov	r2, r6
   161cc:	210e      	movs	r1, #14
   161ce:	4620      	mov	r0, r4
   161d0:	f008 fb7a 	bl	1e8c8 <send_err_rsp.part.0>
	return 0;
   161d4:	2000      	movs	r0, #0
}
   161d6:	b005      	add	sp, #20
   161d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   161dc:	200e      	movs	r0, #14
   161de:	e7fa      	b.n	161d6 <att_read_mult_req+0x76>
   161e0:	0001e875 	.word	0x0001e875

000161e4 <att_read_rsp>:
{
   161e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   161e8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   161ec:	4605      	mov	r5, r0
   161ee:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   161f0:	4640      	mov	r0, r8
   161f2:	2101      	movs	r1, #1
{
   161f4:	4614      	mov	r4, r2
   161f6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   161f8:	f008 feb1 	bl	1ef5e <bt_gatt_change_aware>
   161fc:	b388      	cbz	r0, 16262 <att_read_rsp+0x7e>
	if (!handle) {
   161fe:	b396      	cbz	r6, 16266 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   16200:	2210      	movs	r2, #16
   16202:	2100      	movs	r1, #0
   16204:	4668      	mov	r0, sp
   16206:	f007 fb02 	bl	1d80e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1620a:	2200      	movs	r2, #0
   1620c:	4621      	mov	r1, r4
   1620e:	4640      	mov	r0, r8
   16210:	f7ff feec 	bl	15fec <bt_att_create_pdu>
   16214:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16216:	b340      	cbz	r0, 1626a <att_read_rsp+0x86>
	data.offset = offset;
   16218:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1621c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16220:	2301      	movs	r3, #1
   16222:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16226:	4a12      	ldr	r2, [pc, #72]	; (16270 <att_read_rsp+0x8c>)
	data.chan = chan;
   16228:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1622a:	466b      	mov	r3, sp
   1622c:	4631      	mov	r1, r6
   1622e:	4630      	mov	r0, r6
   16230:	f008 f917 	bl	1e462 <bt_gatt_foreach_attr>
	if (data.err) {
   16234:	f89d 400c 	ldrb.w	r4, [sp, #12]
   16238:	b174      	cbz	r4, 16258 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1623a:	9802      	ldr	r0, [sp, #8]
   1623c:	f002 fdf2 	bl	18e24 <net_buf_unref>
	if (!req) {
   16240:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16244:	4632      	mov	r2, r6
   16246:	4639      	mov	r1, r7
   16248:	4628      	mov	r0, r5
   1624a:	f008 fb3d 	bl	1e8c8 <send_err_rsp.part.0>
		return 0;
   1624e:	2400      	movs	r4, #0
}
   16250:	4620      	mov	r0, r4
   16252:	b004      	add	sp, #16
   16254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16258:	9902      	ldr	r1, [sp, #8]
   1625a:	4628      	mov	r0, r5
   1625c:	f7ff fc98 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   16260:	e7f6      	b.n	16250 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16262:	2412      	movs	r4, #18
   16264:	e7f4      	b.n	16250 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16266:	2401      	movs	r4, #1
   16268:	e7f2      	b.n	16250 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1626a:	240e      	movs	r4, #14
   1626c:	e7f0      	b.n	16250 <att_read_rsp+0x6c>
   1626e:	bf00      	nop
   16270:	0001e875 	.word	0x0001e875

00016274 <att_read_type_req>:
{
   16274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16278:	7b0c      	ldrb	r4, [r1, #12]
   1627a:	3c04      	subs	r4, #4
   1627c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1627e:	2c02      	cmp	r4, #2
{
   16280:	4605      	mov	r5, r0
   16282:	b08c      	sub	sp, #48	; 0x30
   16284:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16286:	d001      	beq.n	1628c <att_read_type_req+0x18>
   16288:	2c10      	cmp	r4, #16
   1628a:	d14f      	bne.n	1632c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1628c:	2104      	movs	r1, #4
   1628e:	3008      	adds	r0, #8
   16290:	f009 fba8 	bl	1f9e4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16294:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   16298:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1629a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1629c:	1d01      	adds	r1, r0, #4
   1629e:	4622      	mov	r2, r4
   162a0:	4640      	mov	r0, r8
   162a2:	f007 fb93 	bl	1d9cc <bt_uuid_create>
   162a6:	b188      	cbz	r0, 162cc <att_read_type_req+0x58>
	if (!start || !end) {
   162a8:	b19e      	cbz	r6, 162d2 <att_read_type_req+0x5e>
   162aa:	b18f      	cbz	r7, 162d0 <att_read_type_req+0x5c>
	if (start > end) {
   162ac:	42be      	cmp	r6, r7
   162ae:	d810      	bhi.n	162d2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   162b0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   162b2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   162b4:	2100      	movs	r1, #0
   162b6:	eb0d 0002 	add.w	r0, sp, r2
   162ba:	f007 faa8 	bl	1d80e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   162be:	2201      	movs	r2, #1
   162c0:	2109      	movs	r1, #9
   162c2:	4620      	mov	r0, r4
   162c4:	f7ff fe92 	bl	15fec <bt_att_create_pdu>
   162c8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   162ca:	b968      	cbnz	r0, 162e8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   162cc:	240e      	movs	r4, #14
   162ce:	e007      	b.n	162e0 <att_read_type_req+0x6c>
			*err = 0U;
   162d0:	463e      	mov	r6, r7
	if (!req) {
   162d2:	2301      	movs	r3, #1
   162d4:	4632      	mov	r2, r6
   162d6:	2108      	movs	r1, #8
   162d8:	4628      	mov	r0, r5
   162da:	f008 faf5 	bl	1e8c8 <send_err_rsp.part.0>
		return 0;
   162de:	2400      	movs	r4, #0
}
   162e0:	4620      	mov	r0, r4
   162e2:	b00c      	add	sp, #48	; 0x30
   162e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   162e8:	2101      	movs	r1, #1
   162ea:	3008      	adds	r0, #8
	data.uuid = uuid;
   162ec:	e9cd 5806 	strd	r5, r8, [sp, #24]
   162f0:	f009 fb51 	bl	1f996 <net_buf_simple_add>
	data.rsp->len = 0U;
   162f4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   162f8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   162fa:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   162fc:	4a0c      	ldr	r2, [pc, #48]	; (16330 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   162fe:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16302:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16304:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16308:	4630      	mov	r0, r6
   1630a:	ab06      	add	r3, sp, #24
   1630c:	f008 f8a9 	bl	1e462 <bt_gatt_foreach_attr>
	if (data.err) {
   16310:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   16314:	b12c      	cbz	r4, 16322 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   16316:	9808      	ldr	r0, [sp, #32]
   16318:	f002 fd84 	bl	18e24 <net_buf_unref>
	if (!req) {
   1631c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16320:	e7d8      	b.n	162d4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16322:	9908      	ldr	r1, [sp, #32]
   16324:	4628      	mov	r0, r5
   16326:	f7ff fc33 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1632a:	e7d9      	b.n	162e0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1632c:	2404      	movs	r4, #4
   1632e:	e7d7      	b.n	162e0 <att_read_type_req+0x6c>
   16330:	00015829 	.word	0x00015829

00016334 <att_find_type_req>:
{
   16334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16338:	4688      	mov	r8, r1
   1633a:	b086      	sub	sp, #24
   1633c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1633e:	2106      	movs	r1, #6
   16340:	f108 0008 	add.w	r0, r8, #8
   16344:	f009 fb4e 	bl	1f9e4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16348:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1634a:	b317      	cbz	r7, 16392 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1634c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   16350:	f1b9 0f00 	cmp.w	r9, #0
   16354:	d01c      	beq.n	16390 <att_find_type_req+0x5c>
	if (start > end) {
   16356:	45b9      	cmp	r9, r7
   16358:	d31b      	bcc.n	16392 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1635a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1635c:	f8ad 3002 	strh.w	r3, [sp, #2]
   16360:	2400      	movs	r4, #0
   16362:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16366:	a901      	add	r1, sp, #4
   16368:	4668      	mov	r0, sp
	value = buf->data;
   1636a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1636e:	f88d 4000 	strb.w	r4, [sp]
   16372:	f88d 4004 	strb.w	r4, [sp, #4]
   16376:	f8ad 3006 	strh.w	r3, [sp, #6]
   1637a:	f007 fafd 	bl	1d978 <bt_uuid_cmp>
   1637e:	4606      	mov	r6, r0
   16380:	b190      	cbz	r0, 163a8 <att_find_type_req+0x74>
	if (!req) {
   16382:	230a      	movs	r3, #10
   16384:	463a      	mov	r2, r7
   16386:	2106      	movs	r1, #6
   16388:	4628      	mov	r0, r5
   1638a:	f008 fa9d 	bl	1e8c8 <send_err_rsp.part.0>
		return 0;
   1638e:	e007      	b.n	163a0 <att_find_type_req+0x6c>
			*err = 0U;
   16390:	464f      	mov	r7, r9
	if (!req) {
   16392:	2301      	movs	r3, #1
   16394:	463a      	mov	r2, r7
   16396:	2106      	movs	r1, #6
   16398:	4628      	mov	r0, r5
   1639a:	f008 fa95 	bl	1e8c8 <send_err_rsp.part.0>
		return 0;
   1639e:	2400      	movs	r4, #0
}
   163a0:	4620      	mov	r0, r4
   163a2:	b006      	add	sp, #24
   163a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   163a8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   163ac:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   163b0:	4601      	mov	r1, r0
   163b2:	2214      	movs	r2, #20
   163b4:	a801      	add	r0, sp, #4
   163b6:	f007 fa2a 	bl	1d80e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   163ba:	4632      	mov	r2, r6
   163bc:	2107      	movs	r1, #7
   163be:	4640      	mov	r0, r8
   163c0:	f7ff fe14 	bl	15fec <bt_att_create_pdu>
   163c4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   163c6:	b1d8      	cbz	r0, 16400 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   163c8:	230a      	movs	r3, #10
   163ca:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   163ce:	4a0d      	ldr	r2, [pc, #52]	; (16404 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   163d0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   163d4:	ab01      	add	r3, sp, #4
   163d6:	4649      	mov	r1, r9
   163d8:	4638      	mov	r0, r7
	data.value = value;
   163da:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   163de:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   163e0:	f008 f83f 	bl	1e462 <bt_gatt_foreach_attr>
	if (data.err) {
   163e4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   163e8:	b12c      	cbz	r4, 163f6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   163ea:	9802      	ldr	r0, [sp, #8]
   163ec:	f002 fd1a 	bl	18e24 <net_buf_unref>
	if (!req) {
   163f0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   163f4:	e7ce      	b.n	16394 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   163f6:	9902      	ldr	r1, [sp, #8]
   163f8:	4628      	mov	r0, r5
   163fa:	f7ff fbc9 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   163fe:	e7cf      	b.n	163a0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   16400:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16402:	e7cd      	b.n	163a0 <att_find_type_req+0x6c>
   16404:	000158d1 	.word	0x000158d1

00016408 <att_find_info_req>:
{
   16408:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1640a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1640c:	881e      	ldrh	r6, [r3, #0]
{
   1640e:	b085      	sub	sp, #20
   16410:	4605      	mov	r5, r0
	if (!start || !end) {
   16412:	b19e      	cbz	r6, 1643c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16414:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   16416:	b184      	cbz	r4, 1643a <att_find_info_req+0x32>
	if (start > end) {
   16418:	42a6      	cmp	r6, r4
   1641a:	d80f      	bhi.n	1643c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1641c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1641e:	2210      	movs	r2, #16
   16420:	2100      	movs	r1, #0
   16422:	4668      	mov	r0, sp
   16424:	f007 f9f3 	bl	1d80e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16428:	2200      	movs	r2, #0
   1642a:	2105      	movs	r1, #5
   1642c:	4638      	mov	r0, r7
   1642e:	f7ff fddd 	bl	15fec <bt_att_create_pdu>
   16432:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16434:	b958      	cbnz	r0, 1644e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16436:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16438:	e007      	b.n	1644a <att_find_info_req+0x42>
			*err = 0U;
   1643a:	4626      	mov	r6, r4
	if (!req) {
   1643c:	2301      	movs	r3, #1
   1643e:	4632      	mov	r2, r6
   16440:	2104      	movs	r1, #4
   16442:	4628      	mov	r0, r5
   16444:	f008 fa40 	bl	1e8c8 <send_err_rsp.part.0>
	return 0;
   16448:	2000      	movs	r0, #0
}
   1644a:	b005      	add	sp, #20
   1644c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1644e:	4621      	mov	r1, r4
   16450:	4a08      	ldr	r2, [pc, #32]	; (16474 <att_find_info_req+0x6c>)
	data.chan = chan;
   16452:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16454:	466b      	mov	r3, sp
   16456:	4630      	mov	r0, r6
   16458:	f008 f803 	bl	1e462 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1645c:	9c02      	ldr	r4, [sp, #8]
   1645e:	b924      	cbnz	r4, 1646a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   16460:	9801      	ldr	r0, [sp, #4]
   16462:	f002 fcdf 	bl	18e24 <net_buf_unref>
	if (!req) {
   16466:	230a      	movs	r3, #10
   16468:	e7e9      	b.n	1643e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1646a:	9901      	ldr	r1, [sp, #4]
   1646c:	4628      	mov	r0, r5
   1646e:	f7ff fb8f 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
   16472:	e7e9      	b.n	16448 <att_find_info_req+0x40>
   16474:	0001e58f 	.word	0x0001e58f

00016478 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16478:	b513      	push	{r0, r1, r4, lr}
   1647a:	4602      	mov	r2, r0
   1647c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1647e:	4808      	ldr	r0, [pc, #32]	; (164a0 <bt_att_req_alloc+0x28>)
   16480:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   16482:	2400      	movs	r4, #0
   16484:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16486:	f003 ff95 	bl	1a3b4 <k_mem_slab_alloc>
   1648a:	4601      	mov	r1, r0
   1648c:	b930      	cbnz	r0, 1649c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1648e:	9801      	ldr	r0, [sp, #4]
   16490:	221c      	movs	r2, #28
   16492:	f007 f9bc 	bl	1d80e <memset>

	return req;
   16496:	9801      	ldr	r0, [sp, #4]
}
   16498:	b002      	add	sp, #8
   1649a:	bd10      	pop	{r4, pc}
		return NULL;
   1649c:	4620      	mov	r0, r4
   1649e:	e7fb      	b.n	16498 <bt_att_req_alloc+0x20>
   164a0:	20000700 	.word	0x20000700

000164a4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   164a4:	b507      	push	{r0, r1, r2, lr}
   164a6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   164a8:	6880      	ldr	r0, [r0, #8]
   164aa:	b120      	cbz	r0, 164b6 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   164ac:	f002 fcba 	bl	18e24 <net_buf_unref>
		req->buf = NULL;
   164b0:	9b01      	ldr	r3, [sp, #4]
   164b2:	2200      	movs	r2, #0
   164b4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   164b6:	4803      	ldr	r0, [pc, #12]	; (164c4 <bt_att_req_free+0x20>)
   164b8:	a901      	add	r1, sp, #4
   164ba:	f009 fbad 	bl	1fc18 <k_mem_slab_free>
}
   164be:	b003      	add	sp, #12
   164c0:	f85d fb04 	ldr.w	pc, [sp], #4
   164c4:	20000700 	.word	0x20000700

000164c8 <att_handle_rsp>:
{
   164c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164cc:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   164ce:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   164d2:	460f      	mov	r7, r1
   164d4:	4690      	mov	r8, r2
   164d6:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   164d8:	f009 fd58 	bl	1ff8c <k_work_cancel_delayable>
	if (!chan->req) {
   164dc:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   164e0:	b9e5      	cbnz	r5, 1651c <att_handle_rsp+0x54>
   164e2:	4919      	ldr	r1, [pc, #100]	; (16548 <att_handle_rsp+0x80>)
   164e4:	4819      	ldr	r0, [pc, #100]	; (1654c <att_handle_rsp+0x84>)
   164e6:	1a40      	subs	r0, r0, r1
   164e8:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   164ea:	0180      	lsls	r0, r0, #6
   164ec:	f040 0102 	orr.w	r1, r0, #2
   164f0:	4817      	ldr	r0, [pc, #92]	; (16550 <att_handle_rsp+0x88>)
   164f2:	f005 fe45 	bl	1c180 <log_0>
	bt_att_func_t func = NULL;
   164f6:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   164f8:	6820      	ldr	r0, [r4, #0]
   164fa:	f008 f924 	bl	1e746 <att_req_send_process>
	if (func) {
   164fe:	f1ba 0f00 	cmp.w	sl, #0
   16502:	d007      	beq.n	16514 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   16504:	6820      	ldr	r0, [r4, #0]
   16506:	f8cd 9000 	str.w	r9, [sp]
   1650a:	6800      	ldr	r0, [r0, #0]
   1650c:	4643      	mov	r3, r8
   1650e:	463a      	mov	r2, r7
   16510:	4631      	mov	r1, r6
   16512:	47d0      	blx	sl
}
   16514:	2000      	movs	r0, #0
   16516:	b003      	add	sp, #12
   16518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1651c:	4b0d      	ldr	r3, [pc, #52]	; (16554 <att_handle_rsp+0x8c>)
   1651e:	429d      	cmp	r5, r3
   16520:	f04f 0b00 	mov.w	fp, #0
   16524:	d103      	bne.n	1652e <att_handle_rsp+0x66>
		chan->req = NULL;
   16526:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   1652a:	46da      	mov	sl, fp
		goto process;
   1652c:	e7e4      	b.n	164f8 <att_handle_rsp+0x30>
	func = chan->req->func;
   1652e:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   16532:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   16536:	4628      	mov	r0, r5
	params = chan->req->user_data;
   16538:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   1653c:	f7ff ffb2 	bl	164a4 <bt_att_req_free>
	chan->req = NULL;
   16540:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
   16544:	e7d8      	b.n	164f8 <att_handle_rsp+0x30>
   16546:	bf00      	nop
   16548:	00020854 	.word	0x00020854
   1654c:	00020864 	.word	0x00020864
   16550:	0002290a 	.word	0x0002290a
   16554:	20001e90 	.word	0x20001e90

00016558 <bt_att_disconnected>:
{
   16558:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1655a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1655e:	b085      	sub	sp, #20
   16560:	4604      	mov	r4, r0
	if (!att_chan->att) {
   16562:	b385      	cbz	r5, 165c6 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16564:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   16568:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1656c:	f007 ff11 	bl	1e392 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16570:	f1a4 0608 	sub.w	r6, r4, #8
   16574:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   16578:	2200      	movs	r2, #0
   1657a:	2300      	movs	r3, #0
   1657c:	4638      	mov	r0, r7
   1657e:	f009 f9b9 	bl	1f8f4 <net_buf_get>
   16582:	4602      	mov	r2, r0
   16584:	bb08      	cbnz	r0, 165ca <bt_att_disconnected+0x72>
	if (chan->req) {
   16586:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1658a:	b123      	cbz	r3, 16596 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1658c:	4601      	mov	r1, r0
   1658e:	230e      	movs	r3, #14
   16590:	4630      	mov	r0, r6
   16592:	f7ff ff99 	bl	164c8 <att_handle_rsp>
	chan->att = NULL;
   16596:	2300      	movs	r3, #0
   16598:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   1659c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1659e:	b993      	cbnz	r3, 165c6 <bt_att_disconnected+0x6e>
	att_reset(att);
   165a0:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   165a2:	9803      	ldr	r0, [sp, #12]
   165a4:	2200      	movs	r2, #0
   165a6:	2300      	movs	r3, #0
   165a8:	300c      	adds	r0, #12
   165aa:	f009 f9a3 	bl	1f8f4 <net_buf_get>
   165ae:	b978      	cbnz	r0, 165d0 <bt_att_disconnected+0x78>
	att->conn = NULL;
   165b0:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   165b2:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   165b4:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   165b6:	b976      	cbnz	r6, 165d6 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   165b8:	4813      	ldr	r0, [pc, #76]	; (16608 <bt_att_disconnected+0xb0>)
   165ba:	a903      	add	r1, sp, #12
   165bc:	f009 fb2c 	bl	1fc18 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   165c0:	6820      	ldr	r0, [r4, #0]
   165c2:	f000 fed1 	bl	17368 <bt_gatt_disconnected>
}
   165c6:	b005      	add	sp, #20
   165c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   165ca:	f002 fc2b 	bl	18e24 <net_buf_unref>
   165ce:	e7d3      	b.n	16578 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   165d0:	f002 fc28 	bl	18e24 <net_buf_unref>
   165d4:	e7e5      	b.n	165a2 <bt_att_disconnected+0x4a>
	return node->next;
   165d6:	6835      	ldr	r5, [r6, #0]
   165d8:	2d00      	cmp	r5, #0
   165da:	bf38      	it	cc
   165dc:	2500      	movcc	r5, #0
		if (req->func) {
   165de:	6877      	ldr	r7, [r6, #4]
   165e0:	b137      	cbz	r7, 165f0 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   165e2:	69b3      	ldr	r3, [r6, #24]
   165e4:	9300      	str	r3, [sp, #0]
   165e6:	2300      	movs	r3, #0
   165e8:	461a      	mov	r2, r3
   165ea:	210e      	movs	r1, #14
   165ec:	4618      	mov	r0, r3
   165ee:	47b8      	blx	r7
		bt_att_req_free(req);
   165f0:	4630      	mov	r0, r6
   165f2:	f7ff ff57 	bl	164a4 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   165f6:	2d00      	cmp	r5, #0
   165f8:	d0de      	beq.n	165b8 <bt_att_disconnected+0x60>
   165fa:	682b      	ldr	r3, [r5, #0]
   165fc:	2b00      	cmp	r3, #0
   165fe:	bf38      	it	cc
   16600:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16602:	462e      	mov	r6, r5
   16604:	461d      	mov	r5, r3
   16606:	e7ea      	b.n	165de <bt_att_disconnected+0x86>
   16608:	200006c8 	.word	0x200006c8

0001660c <att_timeout>:
   1660c:	4b08      	ldr	r3, [pc, #32]	; (16630 <att_timeout+0x24>)
   1660e:	4909      	ldr	r1, [pc, #36]	; (16634 <att_timeout+0x28>)
{
   16610:	b510      	push	{r4, lr}
   16612:	1ac9      	subs	r1, r1, r3
   16614:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   16616:	0189      	lsls	r1, r1, #6
{
   16618:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1661a:	f041 0101 	orr.w	r1, r1, #1
   1661e:	4806      	ldr	r0, [pc, #24]	; (16638 <att_timeout+0x2c>)
   16620:	f005 fdae 	bl	1c180 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   16624:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   16628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1662c:	f7ff bf94 	b.w	16558 <bt_att_disconnected>
   16630:	00020854 	.word	0x00020854
   16634:	00020864 	.word	0x00020864
   16638:	00022921 	.word	0x00022921

0001663c <find_sc_cfg>:
	struct k_work_sync sync;
} db_hash;
#endif

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   1663c:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   1663e:	4c0e      	ldr	r4, [pc, #56]	; (16678 <find_sc_cfg+0x3c>)
   16640:	7823      	ldrb	r3, [r4, #0]
   16642:	4283      	cmp	r3, r0
{
   16644:	4605      	mov	r5, r0
   16646:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16648:	d00a      	beq.n	16660 <find_sc_cfg+0x24>
   1664a:	7b23      	ldrb	r3, [r4, #12]
   1664c:	42ab      	cmp	r3, r5
   1664e:	d111      	bne.n	16674 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   16650:	480a      	ldr	r0, [pc, #40]	; (1667c <find_sc_cfg+0x40>)
   16652:	2207      	movs	r2, #7
   16654:	4631      	mov	r1, r6
   16656:	f007 f89f 	bl	1d798 <memcmp>
   1665a:	b958      	cbnz	r0, 16674 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1665c:	2001      	movs	r0, #1
   1665e:	e005      	b.n	1666c <find_sc_cfg+0x30>
   16660:	2207      	movs	r2, #7
   16662:	1c60      	adds	r0, r4, #1
   16664:	f007 f898 	bl	1d798 <memcmp>
		if (id == sc_cfg[i].id &&
   16668:	2800      	cmp	r0, #0
   1666a:	d1ee      	bne.n	1664a <find_sc_cfg+0xe>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
   1666c:	230c      	movs	r3, #12
   1666e:	fb03 4000 	mla	r0, r3, r0, r4
   16672:	e000      	b.n	16676 <find_sc_cfg+0x3a>
		}
	}

	return NULL;
   16674:	2000      	movs	r0, #0
}
   16676:	bd70      	pop	{r4, r5, r6, pc}
   16678:	20002038 	.word	0x20002038
   1667c:	20002045 	.word	0x20002045

00016680 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16680:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16682:	4c16      	ldr	r4, [pc, #88]	; (166dc <find_cf_cfg+0x5c>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16684:	4605      	mov	r5, r0
   16686:	b140      	cbz	r0, 1669a <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16688:	4622      	mov	r2, r4
   1668a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1668e:	f007 fd0c 	bl	1e0aa <bt_conn_is_peer_addr_le>
   16692:	b1c0      	cbz	r0, 166c6 <find_cf_cfg+0x46>
			return cfg;
		}
	}

	return NULL;
}
   16694:	4620      	mov	r0, r4
   16696:	b003      	add	sp, #12
   16698:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1669a:	9000      	str	r0, [sp, #0]
   1669c:	2207      	movs	r2, #7
   1669e:	f8cd 0003 	str.w	r0, [sp, #3]
   166a2:	4669      	mov	r1, sp
   166a4:	1c60      	adds	r0, r4, #1
   166a6:	f007 f877 	bl	1d798 <memcmp>
   166aa:	2800      	cmp	r0, #0
   166ac:	d0f2      	beq.n	16694 <find_cf_cfg+0x14>
   166ae:	2207      	movs	r2, #7
   166b0:	4669      	mov	r1, sp
   166b2:	f104 0011 	add.w	r0, r4, #17
   166b6:	9500      	str	r5, [sp, #0]
   166b8:	f8cd 5003 	str.w	r5, [sp, #3]
   166bc:	f007 f86c 	bl	1d798 <memcmp>
   166c0:	b948      	cbnz	r0, 166d6 <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   166c2:	3410      	adds	r4, #16
   166c4:	e7e6      	b.n	16694 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   166c6:	7c21      	ldrb	r1, [r4, #16]
   166c8:	f104 0211 	add.w	r2, r4, #17
   166cc:	4628      	mov	r0, r5
   166ce:	f007 fcec 	bl	1e0aa <bt_conn_is_peer_addr_le>
   166d2:	2800      	cmp	r0, #0
   166d4:	d1f5      	bne.n	166c2 <find_cf_cfg+0x42>
	return NULL;
   166d6:	2400      	movs	r4, #0
   166d8:	e7dc      	b.n	16694 <find_cf_cfg+0x14>
   166da:	bf00      	nop
   166dc:	20001eac 	.word	0x20001eac

000166e0 <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   166e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   166e4:	4698      	mov	r8, r3
   166e6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
   166ea:	2b01      	cmp	r3, #1
{
   166ec:	4606      	mov	r6, r0
   166ee:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   166f0:	d83e      	bhi.n	16770 <cf_write+0x90>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
   166f2:	4443      	add	r3, r8
   166f4:	2b01      	cmp	r3, #1
   166f6:	4645      	mov	r5, r8
   166f8:	dc3d      	bgt.n	16776 <cf_write+0x96>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
   166fa:	f7ff ffc1 	bl	16680 <find_cf_cfg>
	if (!cfg) {
   166fe:	4604      	mov	r4, r0
   16700:	b990      	cbnz	r0, 16728 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   16702:	f7ff ffbd 	bl	16680 <find_cf_cfg>
	}

	if (!cfg) {
   16706:	4604      	mov	r4, r0
   16708:	b970      	cbnz	r0, 16728 <cf_write+0x48>
   1670a:	4b1e      	ldr	r3, [pc, #120]	; (16784 <cf_write+0xa4>)
   1670c:	491e      	ldr	r1, [pc, #120]	; (16788 <cf_write+0xa8>)
		BT_WARN("No space to store Client Supported Features");
   1670e:	481f      	ldr	r0, [pc, #124]	; (1678c <cf_write+0xac>)
   16710:	1ac9      	subs	r1, r1, r3
   16712:	08c9      	lsrs	r1, r1, #3
   16714:	0189      	lsls	r1, r1, #6
   16716:	f041 0102 	orr.w	r1, r1, #2
   1671a:	f005 fd31 	bl	1c180 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1671e:	f06f 0510 	mvn.w	r5, #16
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
	cfg->id = conn->id;
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);

	return len;
}
   16722:	4628      	mov	r0, r5
   16724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   16728:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1672a:	f1b8 0f00 	cmp.w	r8, #0
   1672e:	d10d      	bne.n	1674c <cf_write+0x6c>
	memcpy(dst, src, sizeof(*dst));
   16730:	f106 0188 	add.w	r1, r6, #136	; 0x88
   16734:	2207      	movs	r2, #7
   16736:	1c60      	adds	r0, r4, #1
   16738:	f007 f83e 	bl	1d7b8 <memcpy>
	cfg->id = conn->id;
   1673c:	4620      	mov	r0, r4
   1673e:	7a33      	ldrb	r3, [r6, #8]
   16740:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16744:	2100      	movs	r1, #0
   16746:	f008 fa67 	bl	1ec18 <atomic_set_bit>
	return len;
   1674a:	e7ea      	b.n	16722 <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1674c:	7a20      	ldrb	r0, [r4, #8]
   1674e:	fa20 f301 	lsr.w	r3, r0, r1
   16752:	07da      	lsls	r2, r3, #31
   16754:	d503      	bpl.n	1675e <cf_write+0x7e>
		    !(value[i / 8] & BIT(i % 8))) {
   16756:	783b      	ldrb	r3, [r7, #0]
   16758:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1675a:	07db      	lsls	r3, r3, #31
   1675c:	d50e      	bpl.n	1677c <cf_write+0x9c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1675e:	3101      	adds	r1, #1
   16760:	2903      	cmp	r1, #3
   16762:	d1e2      	bne.n	1672a <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   16764:	783b      	ldrb	r3, [r7, #0]
   16766:	f003 0307 	and.w	r3, r3, #7
   1676a:	4318      	orrs	r0, r3
   1676c:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1676e:	e7df      	b.n	16730 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16770:	f06f 0506 	mvn.w	r5, #6
   16774:	e7d5      	b.n	16722 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   16776:	f06f 050c 	mvn.w	r5, #12
   1677a:	e7d2      	b.n	16722 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1677c:	f06f 0512 	mvn.w	r5, #18
   16780:	e7cf      	b.n	16722 <cf_write+0x42>
   16782:	bf00      	nop
   16784:	00020854 	.word	0x00020854
   16788:	0002088c 	.word	0x0002088c
   1678c:	00022934 	.word	0x00022934

00016790 <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
   16790:	b510      	push	{r4, lr}
   16792:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16794:	4814      	ldr	r0, [pc, #80]	; (167e8 <sc_indicate_rsp+0x58>)
   16796:	f3bf 8f5b 	dmb	ish
   1679a:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1679e:	e853 2f00 	ldrex	r2, [r3]
   167a2:	f022 0202 	bic.w	r2, r2, #2
   167a6:	e843 2100 	strex	r1, r2, [r3]
   167aa:	2900      	cmp	r1, #0
   167ac:	d1f7      	bne.n	1679e <sc_indicate_rsp+0xe>
   167ae:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   167b2:	f3bf 8f5b 	dmb	ish
   167b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   167b8:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   167bc:	07da      	lsls	r2, r3, #31
   167be:	d504      	bpl.n	167ca <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   167c0:	2200      	movs	r2, #0
   167c2:	2300      	movs	r3, #0
   167c4:	3020      	adds	r0, #32
   167c6:	f004 f9fd 	bl	1abc4 <k_work_reschedule>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
   167ca:	4620      	mov	r0, r4
   167cc:	f7ff ff58 	bl	16680 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   167d0:	b140      	cbz	r0, 167e4 <sc_indicate_rsp+0x54>
   167d2:	7a03      	ldrb	r3, [r0, #8]
   167d4:	07db      	lsls	r3, r3, #31
   167d6:	d505      	bpl.n	167e4 <sc_indicate_rsp+0x54>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
   167d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   167dc:	2100      	movs	r1, #0
   167de:	300c      	adds	r0, #12
   167e0:	f008 ba1a 	b.w	1ec18 <atomic_set_bit>
}
   167e4:	bd10      	pop	{r4, pc}
   167e6:	bf00      	nop
   167e8:	20001828 	.word	0x20001828

000167ec <read_ppcp>:
{
   167ec:	b513      	push	{r0, r1, r4, lr}
   167ee:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   167f2:	4c0b      	ldr	r4, [pc, #44]	; (16820 <read_ppcp+0x34>)
{
   167f4:	4610      	mov	r0, r2
			  void *buf, uint16_t buf_len, uint16_t offset,
			  const void *value, uint16_t value_len)
{
	uint16_t len;

	if (offset > value_len) {
   167f6:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   167f8:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   167fc:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   16800:	d80b      	bhi.n	1681a <read_ppcp+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	len = MIN(buf_len, value_len - offset);
   16802:	f1c1 0408 	rsb	r4, r1, #8
   16806:	429c      	cmp	r4, r3
   16808:	bfa8      	it	ge
   1680a:	461c      	movge	r4, r3

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, (uint8_t *)value + offset, len);
   1680c:	4622      	mov	r2, r4
   1680e:	4469      	add	r1, sp
   16810:	f006 ffd2 	bl	1d7b8 <memcpy>
}
   16814:	4620      	mov	r0, r4
   16816:	b002      	add	sp, #8
   16818:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1681a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1681e:	e7f9      	b.n	16814 <read_ppcp+0x28>
   16820:	00280018 	.word	0x00280018

00016824 <sc_save>:
{
   16824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16828:	4680      	mov	r8, r0
   1682a:	460f      	mov	r7, r1
   1682c:	4616      	mov	r6, r2
   1682e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   16830:	f7ff ff04 	bl	1663c <find_sc_cfg>
	if (!cfg) {
   16834:	4604      	mov	r4, r0
   16836:	b9d0      	cbnz	r0, 1686e <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   16838:	4669      	mov	r1, sp
   1683a:	9000      	str	r0, [sp, #0]
   1683c:	f8cd 0003 	str.w	r0, [sp, #3]
   16840:	f7ff fefc 	bl	1663c <find_sc_cfg>
		if (!cfg) {
   16844:	4604      	mov	r4, r0
   16846:	b960      	cbnz	r0, 16862 <sc_save+0x3e>
   16848:	4910      	ldr	r1, [pc, #64]	; (1688c <sc_save+0x68>)
   1684a:	4b11      	ldr	r3, [pc, #68]	; (16890 <sc_save+0x6c>)
			BT_ERR("unable to save SC: no cfg left");
   1684c:	4811      	ldr	r0, [pc, #68]	; (16894 <sc_save+0x70>)
   1684e:	1ac9      	subs	r1, r1, r3
   16850:	08c9      	lsrs	r1, r1, #3
   16852:	0189      	lsls	r1, r1, #6
   16854:	f041 0101 	orr.w	r1, r1, #1
   16858:	f005 fc92 	bl	1c180 <log_0>
}
   1685c:	b002      	add	sp, #8
   1685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   16862:	f800 8b01 	strb.w	r8, [r0], #1
   16866:	2207      	movs	r2, #7
   16868:	4639      	mov	r1, r7
   1686a:	f006 ffa5 	bl	1d7b8 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   1686e:	8922      	ldrh	r2, [r4, #8]
   16870:	8963      	ldrh	r3, [r4, #10]
   16872:	b91a      	cbnz	r2, 1687c <sc_save+0x58>
   16874:	b923      	cbnz	r3, 16880 <sc_save+0x5c>
		cfg->data.start = start;
   16876:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   16878:	8165      	strh	r5, [r4, #10]
   1687a:	e7ef      	b.n	1685c <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   1687c:	4296      	cmp	r6, r2
   1687e:	d302      	bcc.n	16886 <sc_save+0x62>
   16880:	429d      	cmp	r5, r3
   16882:	d9eb      	bls.n	1685c <sc_save+0x38>
   16884:	e7f8      	b.n	16878 <sc_save+0x54>
		*start = new_start;
   16886:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   16888:	e7fa      	b.n	16880 <sc_save+0x5c>
   1688a:	bf00      	nop
   1688c:	0002088c 	.word	0x0002088c
   16890:	00020854 	.word	0x00020854
   16894:	00022960 	.word	0x00022960

00016898 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   16898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1689c:	461f      	mov	r7, r3
   1689e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   168a2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   168a6:	4606      	mov	r6, r0
   168a8:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	uint16_t value;

	if (offset) {
   168aa:	2b00      	cmp	r3, #0
   168ac:	d153      	bne.n	16956 <bt_gatt_attr_write_ccc+0xbe>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   168ae:	1e7b      	subs	r3, r7, #1
   168b0:	2b01      	cmp	r3, #1
   168b2:	d853      	bhi.n	1695c <bt_gatt_attr_write_ccc+0xc4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   168b4:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   168b6:	7815      	ldrb	r5, [r2, #0]
   168b8:	bf18      	it	ne
   168ba:	7853      	ldrbne	r3, [r2, #1]
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   168bc:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   168be:	bf0c      	ite	eq
   168c0:	b2ad      	uxtheq	r5, r5
   168c2:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   168c6:	f008 f9c3 	bl	1ec50 <find_ccc_cfg>
	if (!cfg) {
   168ca:	4604      	mov	r4, r0
   168cc:	b9f0      	cbnz	r0, 1690c <bt_gatt_attr_write_ccc+0x74>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behavioraly the same as no written CCC.
		 */
		if (!value) {
   168ce:	b91d      	cbnz	r5, 168d8 <bt_gatt_attr_write_ccc+0x40>
			return len;
   168d0:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   168d2:	b003      	add	sp, #12
   168d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   168d8:	4649      	mov	r1, r9
   168da:	f008 f9b9 	bl	1ec50 <find_ccc_cfg>
		if (!cfg) {
   168de:	4604      	mov	r4, r0
   168e0:	b960      	cbnz	r0, 168fc <bt_gatt_attr_write_ccc+0x64>
   168e2:	4b20      	ldr	r3, [pc, #128]	; (16964 <bt_gatt_attr_write_ccc+0xcc>)
   168e4:	4920      	ldr	r1, [pc, #128]	; (16968 <bt_gatt_attr_write_ccc+0xd0>)
			BT_WARN("No space to store CCC cfg");
   168e6:	4821      	ldr	r0, [pc, #132]	; (1696c <bt_gatt_attr_write_ccc+0xd4>)
   168e8:	1ac9      	subs	r1, r1, r3
   168ea:	08c9      	lsrs	r1, r1, #3
   168ec:	0189      	lsls	r1, r1, #6
   168ee:	f041 0102 	orr.w	r1, r1, #2
   168f2:	f005 fc45 	bl	1c180 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   168f6:	f06f 0010 	mvn.w	r0, #16
   168fa:	e7ea      	b.n	168d2 <bt_gatt_attr_write_ccc+0x3a>
   168fc:	2207      	movs	r2, #7
   168fe:	f106 0188 	add.w	r1, r6, #136	; 0x88
   16902:	3001      	adds	r0, #1
   16904:	f006 ff58 	bl	1d7b8 <memcpy>
		cfg->id = conn->id;
   16908:	7a33      	ldrb	r3, [r6, #8]
   1690a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1690c:	f8d9 301c 	ldr.w	r3, [r9, #28]
   16910:	b9ab      	cbnz	r3, 1693e <bt_gatt_attr_write_ccc+0xa6>
	if (cfg->value != ccc->value) {
   16912:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
   16916:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   16918:	42ab      	cmp	r3, r5
   1691a:	d003      	beq.n	16924 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   1691c:	4649      	mov	r1, r9
   1691e:	4640      	mov	r0, r8
   16920:	f008 f8e1 	bl	1eae6 <gatt_ccc_changed>
	if (!value) {
   16924:	2d00      	cmp	r5, #0
   16926:	d1d3      	bne.n	168d0 <bt_gatt_attr_write_ccc+0x38>
   16928:	2207      	movs	r2, #7
   1692a:	4669      	mov	r1, sp
   1692c:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1692e:	9500      	str	r5, [sp, #0]
   16930:	f8cd 5003 	str.w	r5, [sp, #3]
   16934:	f006 ff40 	bl	1d7b8 <memcpy>
	cfg->id = 0U;
   16938:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1693a:	8125      	strh	r5, [r4, #8]
}
   1693c:	e7c8      	b.n	168d0 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1693e:	462a      	mov	r2, r5
   16940:	4641      	mov	r1, r8
   16942:	4630      	mov	r0, r6
   16944:	4798      	blx	r3
		if (write < 0) {
   16946:	2800      	cmp	r0, #0
   16948:	dbc3      	blt.n	168d2 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1694a:	3801      	subs	r0, #1
   1694c:	2801      	cmp	r0, #1
   1694e:	d9e0      	bls.n	16912 <bt_gatt_attr_write_ccc+0x7a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   16950:	f06f 000d 	mvn.w	r0, #13
   16954:	e7bd      	b.n	168d2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16956:	f06f 0006 	mvn.w	r0, #6
   1695a:	e7ba      	b.n	168d2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1695c:	f06f 000c 	mvn.w	r0, #12
   16960:	e7b7      	b.n	168d2 <bt_gatt_attr_write_ccc+0x3a>
   16962:	bf00      	nop
   16964:	00020854 	.word	0x00020854
   16968:	0002088c 	.word	0x0002088c
   1696c:	0002297f 	.word	0x0002297f

00016970 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   16970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16974:	4b2c      	ldr	r3, [pc, #176]	; (16a28 <disconnected_cb+0xb8>)
{
   16976:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16978:	6882      	ldr	r2, [r0, #8]
   1697a:	429a      	cmp	r2, r3
{
   1697c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1697e:	d12f      	bne.n	169e0 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16980:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   16982:	8aab      	ldrh	r3, [r5, #20]
   16984:	b363      	cbz	r3, 169e0 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
   16986:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 16a2c <disconnected_cb+0xbc>
   1698a:	1c6c      	adds	r4, r5, #1
   1698c:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
   16990:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16994:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   16998:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1699c:	b19b      	cbz	r3, 169c6 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1699e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   169a2:	4622      	mov	r2, r4
   169a4:	4630      	mov	r0, r6
   169a6:	f007 fb80 	bl	1e0aa <bt_conn_is_peer_addr_le>
   169aa:	b9e8      	cbnz	r0, 169e8 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   169ac:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   169b0:	4621      	mov	r1, r4
   169b2:	f7fe faf9 	bl	14fa8 <bt_conn_lookup_addr_le>
			if (tmp) {
   169b6:	b130      	cbz	r0, 169c6 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   169b8:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   169ba:	2b07      	cmp	r3, #7
   169bc:	bf08      	it	eq
   169be:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   169c2:	f007 fbad 	bl	1e120 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   169c6:	340a      	adds	r4, #10
   169c8:	4554      	cmp	r4, sl
   169ca:	d1e5      	bne.n	16998 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   169cc:	f1b8 0f00 	cmp.w	r8, #0
   169d0:	d106      	bne.n	169e0 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   169d2:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   169d4:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   169d8:	b113      	cbz	r3, 169e0 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   169da:	4641      	mov	r1, r8
   169dc:	4638      	mov	r0, r7
   169de:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   169e0:	2001      	movs	r0, #1
   169e2:	b003      	add	sp, #12
   169e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   169e8:	7a30      	ldrb	r0, [r6, #8]
   169ea:	4649      	mov	r1, r9
   169ec:	f007 f91a 	bl	1dc24 <bt_addr_le_is_bonded>
   169f0:	b998      	cbnz	r0, 16a1a <disconnected_cb+0xaa>
				if (ccc == &sc_ccc) {
   169f2:	455d      	cmp	r5, fp
   169f4:	d102      	bne.n	169fc <disconnected_cb+0x8c>
					sc_clear(conn);
   169f6:	4630      	mov	r0, r6
   169f8:	f008 f9f1 	bl	1edde <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   169fc:	2300      	movs	r3, #0
   169fe:	2207      	movs	r2, #7
   16a00:	4669      	mov	r1, sp
   16a02:	4620      	mov	r0, r4
   16a04:	9300      	str	r3, [sp, #0]
   16a06:	f8cd 3003 	str.w	r3, [sp, #3]
   16a0a:	f006 fed5 	bl	1d7b8 <memcpy>
	cfg->id = 0U;
   16a0e:	2300      	movs	r3, #0
   16a10:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   16a14:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   16a18:	e7d5      	b.n	169c6 <disconnected_cb+0x56>
   16a1a:	2207      	movs	r2, #7
   16a1c:	4649      	mov	r1, r9
   16a1e:	4620      	mov	r0, r4
   16a20:	f006 feca 	bl	1d7b8 <memcpy>
}
   16a24:	e7cf      	b.n	169c6 <disconnected_cb+0x56>
   16a26:	bf00      	nop
   16a28:	00016899 	.word	0x00016899
   16a2c:	20000534 	.word	0x20000534

00016a30 <bt_gatt_init>:
{
   16a30:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16a32:	4b1e      	ldr	r3, [pc, #120]	; (16aac <bt_gatt_init+0x7c>)
   16a34:	f3bf 8f5b 	dmb	ish
   16a38:	2201      	movs	r2, #1
   16a3a:	e853 1f00 	ldrex	r1, [r3]
   16a3e:	2900      	cmp	r1, #0
   16a40:	d103      	bne.n	16a4a <bt_gatt_init+0x1a>
   16a42:	e843 2000 	strex	r0, r2, [r3]
   16a46:	2800      	cmp	r0, #0
   16a48:	d1f7      	bne.n	16a3a <bt_gatt_init+0xa>
   16a4a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   16a4e:	d12c      	bne.n	16aaa <bt_gatt_init+0x7a>
   16a50:	f3bf 8f5b 	dmb	ish
   16a54:	4b16      	ldr	r3, [pc, #88]	; (16ab0 <bt_gatt_init+0x80>)
   16a56:	e853 1f00 	ldrex	r1, [r3]
   16a5a:	2900      	cmp	r1, #0
   16a5c:	d103      	bne.n	16a66 <bt_gatt_init+0x36>
   16a5e:	e843 2000 	strex	r0, r2, [r3]
   16a62:	2800      	cmp	r0, #0
   16a64:	d1f7      	bne.n	16a56 <bt_gatt_init+0x26>
   16a66:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   16a6a:	d108      	bne.n	16a7e <bt_gatt_init+0x4e>
   16a6c:	4a11      	ldr	r2, [pc, #68]	; (16ab4 <bt_gatt_init+0x84>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a6e:	4912      	ldr	r1, [pc, #72]	; (16ab8 <bt_gatt_init+0x88>)
   16a70:	8813      	ldrh	r3, [r2, #0]
   16a72:	4c12      	ldr	r4, [pc, #72]	; (16abc <bt_gatt_init+0x8c>)
	if (!atomic_cas(&service_init, 0, 1)) {
   16a74:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a76:	42a1      	cmp	r1, r4
   16a78:	d311      	bcc.n	16a9e <bt_gatt_init+0x6e>
   16a7a:	b100      	cbz	r0, 16a7e <bt_gatt_init+0x4e>
   16a7c:	8013      	strh	r3, [r2, #0]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   16a7e:	4910      	ldr	r1, [pc, #64]	; (16ac0 <bt_gatt_init+0x90>)
   16a80:	4810      	ldr	r0, [pc, #64]	; (16ac4 <bt_gatt_init+0x94>)
   16a82:	f009 fa77 	bl	1ff74 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   16a86:	480f      	ldr	r0, [pc, #60]	; (16ac4 <bt_gatt_init+0x94>)
   16a88:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16a8c:	2300      	movs	r3, #0
   16a8e:	f004 f865 	bl	1ab5c <k_work_schedule>
}
   16a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   16a96:	490c      	ldr	r1, [pc, #48]	; (16ac8 <bt_gatt_init+0x98>)
   16a98:	480c      	ldr	r0, [pc, #48]	; (16acc <bt_gatt_init+0x9c>)
   16a9a:	f009 ba6b 	b.w	1ff74 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   16a9e:	6848      	ldr	r0, [r1, #4]
   16aa0:	4403      	add	r3, r0
   16aa2:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16aa4:	3108      	adds	r1, #8
   16aa6:	2001      	movs	r0, #1
   16aa8:	e7e5      	b.n	16a76 <bt_gatt_init+0x46>
}
   16aaa:	bd10      	pop	{r4, pc}
   16aac:	20001ecc 	.word	0x20001ecc
   16ab0:	20001ee8 	.word	0x20001ee8
   16ab4:	20002036 	.word	0x20002036
   16ab8:	0002082c 	.word	0x0002082c
   16abc:	00020854 	.word	0x00020854
   16ac0:	0001ef05 	.word	0x0001ef05
   16ac4:	200017d0 	.word	0x200017d0
   16ac8:	00016e59 	.word	0x00016e59
   16acc:	20001848 	.word	0x20001848

00016ad0 <bt_gatt_attr_get_handle>:
{
   16ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   16ad4:	4603      	mov	r3, r0
   16ad6:	b148      	cbz	r0, 16aec <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   16ad8:	8a00      	ldrh	r0, [r0, #16]
   16ada:	b938      	cbnz	r0, 16aec <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16adc:	4912      	ldr	r1, [pc, #72]	; (16b28 <bt_gatt_attr_get_handle+0x58>)
   16ade:	f8df e04c 	ldr.w	lr, [pc, #76]	; 16b2c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   16ae2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16ae4:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16ae8:	4571      	cmp	r1, lr
   16aea:	d301      	bcc.n	16af0 <bt_gatt_attr_get_handle+0x20>
}
   16aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   16af0:	e9d1 7600 	ldrd	r7, r6, [r1]
   16af4:	42bb      	cmp	r3, r7
   16af6:	d304      	bcc.n	16b02 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16af8:	fb0c 7206 	mla	r2, ip, r6, r7
   16afc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   16afe:	4293      	cmp	r3, r2
   16b00:	d90e      	bls.n	16b20 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   16b02:	19a2      	adds	r2, r4, r6
   16b04:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16b06:	3108      	adds	r1, #8
   16b08:	4614      	mov	r4, r2
   16b0a:	e7ed      	b.n	16ae8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16b0c:	fb0c 7805 	mla	r8, ip, r5, r7
   16b10:	4543      	cmp	r3, r8
   16b12:	d007      	beq.n	16b24 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16b14:	3501      	adds	r5, #1
   16b16:	1962      	adds	r2, r4, r5
   16b18:	42b5      	cmp	r5, r6
   16b1a:	b292      	uxth	r2, r2
   16b1c:	d1f6      	bne.n	16b0c <bt_gatt_attr_get_handle+0x3c>
   16b1e:	e7f2      	b.n	16b06 <bt_gatt_attr_get_handle+0x36>
   16b20:	2500      	movs	r5, #0
   16b22:	e7f8      	b.n	16b16 <bt_gatt_attr_get_handle+0x46>
   16b24:	4610      	mov	r0, r2
   16b26:	e7e1      	b.n	16aec <bt_gatt_attr_get_handle+0x1c>
   16b28:	0002082c 	.word	0x0002082c
   16b2c:	00020854 	.word	0x00020854

00016b30 <bt_gatt_foreach_attr_type>:
{
   16b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b34:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16b38:	9100      	str	r1, [sp, #0]
   16b3a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16b40:	2d00      	cmp	r5, #0
   16b42:	bf08      	it	eq
   16b44:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   16b46:	4b24      	ldr	r3, [pc, #144]	; (16bd8 <bt_gatt_foreach_attr_type+0xa8>)
   16b48:	881b      	ldrh	r3, [r3, #0]
   16b4a:	4283      	cmp	r3, r0
{
   16b4c:	4607      	mov	r7, r0
   16b4e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   16b50:	d23c      	bcs.n	16bcc <bt_gatt_foreach_attr_type+0x9c>
}
   16b52:	b003      	add	sp, #12
   16b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   16b58:	6873      	ldr	r3, [r6, #4]
   16b5a:	4423      	add	r3, r4
   16b5c:	42bb      	cmp	r3, r7
   16b5e:	d232      	bcs.n	16bc6 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   16b60:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16b62:	3608      	adds	r6, #8
   16b64:	4b1d      	ldr	r3, [pc, #116]	; (16bdc <bt_gatt_foreach_attr_type+0xac>)
   16b66:	429e      	cmp	r6, r3
   16b68:	d3f6      	bcc.n	16b58 <bt_gatt_foreach_attr_type+0x28>
   16b6a:	e7f2      	b.n	16b52 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16b6c:	5889      	ldr	r1, [r1, r2]
   16b6e:	9301      	str	r3, [sp, #4]
   16b70:	4640      	mov	r0, r8
   16b72:	f006 ff01 	bl	1d978 <bt_uuid_cmp>
   16b76:	9b01      	ldr	r3, [sp, #4]
   16b78:	b190      	cbz	r0, 16ba0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16b7a:	3401      	adds	r4, #1
   16b7c:	f10a 0a01 	add.w	sl, sl, #1
   16b80:	b2a4      	uxth	r4, r4
   16b82:	6873      	ldr	r3, [r6, #4]
   16b84:	4553      	cmp	r3, sl
   16b86:	d9ec      	bls.n	16b62 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   16b88:	9b00      	ldr	r3, [sp, #0]
   16b8a:	429c      	cmp	r4, r3
   16b8c:	d8e1      	bhi.n	16b52 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   16b8e:	42bc      	cmp	r4, r7
   16b90:	d3f3      	bcc.n	16b7a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16b92:	6831      	ldr	r1, [r6, #0]
   16b94:	fb0b f20a 	mul.w	r2, fp, sl
   16b98:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16b9a:	f1b8 0f00 	cmp.w	r8, #0
   16b9e:	d1e5      	bne.n	16b6c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   16ba0:	f1b9 0f00 	cmp.w	r9, #0
   16ba4:	d10b      	bne.n	16bbe <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   16ba6:	3d01      	subs	r5, #1
   16ba8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16baa:	4618      	mov	r0, r3
   16bac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16bb0:	4621      	mov	r1, r4
   16bb2:	4798      	blx	r3
	if (!*num_matches) {
   16bb4:	2d00      	cmp	r5, #0
   16bb6:	d0cc      	beq.n	16b52 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16bb8:	2800      	cmp	r0, #0
   16bba:	d1de      	bne.n	16b7a <bt_gatt_foreach_attr_type+0x4a>
   16bbc:	e7c9      	b.n	16b52 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   16bbe:	68da      	ldr	r2, [r3, #12]
   16bc0:	4591      	cmp	r9, r2
   16bc2:	d1da      	bne.n	16b7a <bt_gatt_foreach_attr_type+0x4a>
   16bc4:	e7ef      	b.n	16ba6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16bc6:	f04f 0a00 	mov.w	sl, #0
   16bca:	e7da      	b.n	16b82 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16bcc:	4e04      	ldr	r6, [pc, #16]	; (16be0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   16bce:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16bd0:	f04f 0b14 	mov.w	fp, #20
   16bd4:	e7c6      	b.n	16b64 <bt_gatt_foreach_attr_type+0x34>
   16bd6:	bf00      	nop
   16bd8:	20002036 	.word	0x20002036
   16bdc:	00020854 	.word	0x00020854
   16be0:	0002082c 	.word	0x0002082c

00016be4 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   16be4:	b510      	push	{r4, lr}
   16be6:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   16be8:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16bea:	aa1c      	add	r2, sp, #112	; 0x70
   16bec:	4669      	mov	r1, sp
   16bee:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   16bf0:	e9cd 4400 	strd	r4, r4, [sp]
   16bf4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16bf8:	f006 fcba 	bl	1d570 <tc_cmac_setup>
   16bfc:	b958      	cbnz	r0, 16c16 <db_hash_gen.isra.0+0x32>
   16bfe:	491d      	ldr	r1, [pc, #116]	; (16c74 <db_hash_gen.isra.0+0x90>)
   16c00:	4b1d      	ldr	r3, [pc, #116]	; (16c78 <db_hash_gen.isra.0+0x94>)
		BT_ERR("Unable to setup AES CMAC");
   16c02:	481e      	ldr	r0, [pc, #120]	; (16c7c <db_hash_gen.isra.0+0x98>)
   16c04:	1ac9      	subs	r1, r1, r3
   16c06:	08c9      	lsrs	r1, r1, #3
   16c08:	0189      	lsls	r1, r1, #6
   16c0a:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   16c0e:	f005 fab7 	bl	1c180 <log_0>
}
   16c12:	b048      	add	sp, #288	; 0x120
   16c14:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   16c16:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16c1a:	2001      	movs	r0, #1
   16c1c:	4a18      	ldr	r2, [pc, #96]	; (16c80 <db_hash_gen.isra.0+0x9c>)
   16c1e:	ab04      	add	r3, sp, #16
   16c20:	f008 f965 	bl	1eeee <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   16c24:	4817      	ldr	r0, [pc, #92]	; (16c84 <db_hash_gen.isra.0+0xa0>)
   16c26:	a904      	add	r1, sp, #16
   16c28:	f006 fd39 	bl	1d69e <tc_cmac_final>
   16c2c:	b940      	cbnz	r0, 16c40 <db_hash_gen.isra.0+0x5c>
   16c2e:	4911      	ldr	r1, [pc, #68]	; (16c74 <db_hash_gen.isra.0+0x90>)
   16c30:	4b11      	ldr	r3, [pc, #68]	; (16c78 <db_hash_gen.isra.0+0x94>)
		BT_ERR("Unable to calculate hash");
   16c32:	4815      	ldr	r0, [pc, #84]	; (16c88 <db_hash_gen.isra.0+0xa4>)
   16c34:	1ac9      	subs	r1, r1, r3
   16c36:	08c9      	lsrs	r1, r1, #3
   16c38:	0189      	lsls	r1, r1, #6
   16c3a:	f041 0101 	orr.w	r1, r1, #1
   16c3e:	e7e6      	b.n	16c0e <db_hash_gen.isra.0+0x2a>
   16c40:	4b10      	ldr	r3, [pc, #64]	; (16c84 <db_hash_gen.isra.0+0xa0>)
   16c42:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   16c46:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   16c48:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16c4a:	7810      	ldrb	r0, [r2, #0]
   16c4c:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   16c50:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16c52:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   16c56:	d1f6      	bne.n	16c46 <db_hash_gen.isra.0+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c58:	f3bf 8f5b 	dmb	ish
   16c5c:	4b0b      	ldr	r3, [pc, #44]	; (16c8c <db_hash_gen.isra.0+0xa8>)
   16c5e:	e853 2f00 	ldrex	r2, [r3]
   16c62:	f042 0204 	orr.w	r2, r2, #4
   16c66:	e843 2100 	strex	r1, r2, [r3]
   16c6a:	2900      	cmp	r1, #0
   16c6c:	d1f7      	bne.n	16c5e <db_hash_gen.isra.0+0x7a>
   16c6e:	f3bf 8f5b 	dmb	ish
   16c72:	e7ce      	b.n	16c12 <db_hash_gen.isra.0+0x2e>
   16c74:	0002088c 	.word	0x0002088c
   16c78:	00020854 	.word	0x00020854
   16c7c:	00022999 	.word	0x00022999
   16c80:	0001eb31 	.word	0x0001eb31
   16c84:	200017c0 	.word	0x200017c0
   16c88:	000229b2 	.word	0x000229b2
   16c8c:	20001878 	.word	0x20001878

00016c90 <gatt_indicate>:
{
   16c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c94:	4615      	mov	r5, r2
   16c96:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   16c98:	2214      	movs	r2, #20
   16c9a:	6869      	ldr	r1, [r5, #4]
{
   16c9c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   16c9e:	f008 f933 	bl	1ef08 <bt_gatt_check_perm>
   16ca2:	4607      	mov	r7, r0
   16ca4:	b170      	cbz	r0, 16cc4 <gatt_indicate+0x34>
   16ca6:	4b2a      	ldr	r3, [pc, #168]	; (16d50 <gatt_indicate+0xc0>)
   16ca8:	492a      	ldr	r1, [pc, #168]	; (16d54 <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   16caa:	482b      	ldr	r0, [pc, #172]	; (16d58 <gatt_indicate+0xc8>)
   16cac:	1ac9      	subs	r1, r1, r3
   16cae:	08c9      	lsrs	r1, r1, #3
   16cb0:	0189      	lsls	r1, r1, #6
   16cb2:	f041 0102 	orr.w	r1, r1, #2
   16cb6:	f005 fa63 	bl	1c180 <log_0>
		return -EPERM;
   16cba:	f04f 35ff 	mov.w	r5, #4294967295
}
   16cbe:	4628      	mov	r0, r5
   16cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16cc4:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16cc8:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16cca:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16ccc:	f7ff fbd4 	bl	16478 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16cd0:	3602      	adds	r6, #2
	if (!req) {
   16cd2:	4604      	mov	r4, r0
   16cd4:	b910      	cbnz	r0, 16cdc <gatt_indicate+0x4c>
		return -ENOMEM;
   16cd6:	f06f 050b 	mvn.w	r5, #11
   16cda:	e7f0      	b.n	16cbe <gatt_indicate+0x2e>
	req->func = func;
   16cdc:	4b1f      	ldr	r3, [pc, #124]	; (16d5c <gatt_indicate+0xcc>)
	req->len = len;
   16cde:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   16ce0:	211d      	movs	r1, #29
   16ce2:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   16ce4:	60c7      	str	r7, [r0, #12]
	req->func = func;
   16ce6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16ce8:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16cea:	4632      	mov	r2, r6
   16cec:	4640      	mov	r0, r8
   16cee:	f7ff f97d 	bl	15fec <bt_att_create_pdu>
	if (!buf) {
   16cf2:	4606      	mov	r6, r0
   16cf4:	b968      	cbnz	r0, 16d12 <gatt_indicate+0x82>
   16cf6:	4b16      	ldr	r3, [pc, #88]	; (16d50 <gatt_indicate+0xc0>)
   16cf8:	4916      	ldr	r1, [pc, #88]	; (16d54 <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   16cfa:	4819      	ldr	r0, [pc, #100]	; (16d60 <gatt_indicate+0xd0>)
   16cfc:	1ac9      	subs	r1, r1, r3
   16cfe:	08c9      	lsrs	r1, r1, #3
   16d00:	0189      	lsls	r1, r1, #6
   16d02:	f041 0102 	orr.w	r1, r1, #2
   16d06:	f005 fa3b 	bl	1c180 <log_0>
		bt_att_req_free(req);
   16d0a:	4620      	mov	r0, r4
   16d0c:	f7ff fbca 	bl	164a4 <bt_att_req_free>
   16d10:	e7e1      	b.n	16cd6 <gatt_indicate+0x46>
	return net_buf_simple_add(&buf->b, len);
   16d12:	f100 0a08 	add.w	sl, r0, #8
   16d16:	2102      	movs	r1, #2
   16d18:	4650      	mov	r0, sl
   16d1a:	f008 fe3c 	bl	1f996 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16d1e:	4607      	mov	r7, r0
   16d20:	8aa9      	ldrh	r1, [r5, #20]
   16d22:	f827 9b02 	strh.w	r9, [r7], #2
   16d26:	4650      	mov	r0, sl
   16d28:	f008 fe35 	bl	1f996 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   16d2c:	8aaa      	ldrh	r2, [r5, #20]
   16d2e:	6929      	ldr	r1, [r5, #16]
   16d30:	4638      	mov	r0, r7
   16d32:	f006 fd41 	bl	1d7b8 <memcpy>
	req->buf = buf;
   16d36:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16d38:	4621      	mov	r1, r4
   16d3a:	4640      	mov	r0, r8
   16d3c:	f007 febe 	bl	1eabc <bt_att_req_send>
	if (err) {
   16d40:	4605      	mov	r5, r0
   16d42:	2800      	cmp	r0, #0
   16d44:	d0bb      	beq.n	16cbe <gatt_indicate+0x2e>
		bt_att_req_free(req);
   16d46:	4620      	mov	r0, r4
   16d48:	f7ff fbac 	bl	164a4 <bt_att_req_free>
   16d4c:	e7b7      	b.n	16cbe <gatt_indicate+0x2e>
   16d4e:	bf00      	nop
   16d50:	00020854 	.word	0x00020854
   16d54:	0002088c 	.word	0x0002088c
   16d58:	000229cb 	.word	0x000229cb
   16d5c:	0001eb03 	.word	0x0001eb03
   16d60:	000229e1 	.word	0x000229e1

00016d64 <bt_gatt_indicate>:
{
   16d64:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d66:	4b39      	ldr	r3, [pc, #228]	; (16e4c <bt_gatt_indicate+0xe8>)
   16d68:	f3bf 8f5b 	dmb	ish
   16d6c:	681b      	ldr	r3, [r3, #0]
   16d6e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16d72:	079a      	lsls	r2, r3, #30
{
   16d74:	b08b      	sub	sp, #44	; 0x2c
   16d76:	4604      	mov	r4, r0
   16d78:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16d7a:	d561      	bpl.n	16e40 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   16d7c:	6848      	ldr	r0, [r1, #4]
   16d7e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16d80:	b114      	cbz	r4, 16d88 <bt_gatt_indicate+0x24>
   16d82:	7b63      	ldrb	r3, [r4, #13]
   16d84:	2b07      	cmp	r3, #7
   16d86:	d15e      	bne.n	16e46 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16d88:	f7ff fea2 	bl	16ad0 <bt_gatt_attr_get_handle>
   16d8c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   16d90:	b918      	cbnz	r0, 16d9a <bt_gatt_indicate+0x36>
		return -ENOENT;
   16d92:	f06f 0001 	mvn.w	r0, #1
}
   16d96:	b00b      	add	sp, #44	; 0x2c
   16d98:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   16d9a:	682a      	ldr	r2, [r5, #0]
   16d9c:	b9ba      	cbnz	r2, 16dce <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16d9e:	9b05      	ldr	r3, [sp, #20]
   16da0:	6818      	ldr	r0, [r3, #0]
   16da2:	2300      	movs	r3, #0
   16da4:	f88d 3010 	strb.w	r3, [sp, #16]
   16da8:	a904      	add	r1, sp, #16
   16daa:	f642 0303 	movw	r3, #10243	; 0x2803
   16dae:	f8ad 3012 	strh.w	r3, [sp, #18]
   16db2:	f006 fde1 	bl	1d978 <bt_uuid_cmp>
   16db6:	b1d0      	cbz	r0, 16dee <bt_gatt_indicate+0x8a>
	if (conn) {
   16db8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   16dbc:	b324      	cbz	r4, 16e08 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   16dbe:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16dc0:	4601      	mov	r1, r0
		params->_ref = 1;
   16dc2:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   16dc4:	462a      	mov	r2, r5
   16dc6:	4620      	mov	r0, r4
   16dc8:	f7ff ff62 	bl	16c90 <gatt_indicate>
   16dcc:	e7e3      	b.n	16d96 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16dce:	a905      	add	r1, sp, #20
   16dd0:	9102      	str	r1, [sp, #8]
   16dd2:	491f      	ldr	r1, [pc, #124]	; (16e50 <bt_gatt_indicate+0xec>)
   16dd4:	9101      	str	r1, [sp, #4]
   16dd6:	2101      	movs	r1, #1
	found->attr = NULL;
   16dd8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16dda:	9100      	str	r1, [sp, #0]
   16ddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16de0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16de2:	f7ff fea5 	bl	16b30 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16de6:	9b05      	ldr	r3, [sp, #20]
   16de8:	2b00      	cmp	r3, #0
   16dea:	d1d8      	bne.n	16d9e <bt_gatt_indicate+0x3a>
   16dec:	e7d1      	b.n	16d92 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16dee:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16df0:	68c3      	ldr	r3, [r0, #12]
   16df2:	799b      	ldrb	r3, [r3, #6]
   16df4:	069b      	lsls	r3, r3, #26
   16df6:	d402      	bmi.n	16dfe <bt_gatt_indicate+0x9a>
			return -EINVAL;
   16df8:	f06f 0015 	mvn.w	r0, #21
   16dfc:	e7cb      	b.n	16d96 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16dfe:	f008 f828 	bl	1ee52 <bt_gatt_attr_value_handle>
   16e02:	f8ad 0018 	strh.w	r0, [sp, #24]
   16e06:	e7d7      	b.n	16db8 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
   16e08:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16e0c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16e0e:	2302      	movs	r3, #2
   16e10:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16e14:	f642 1302 	movw	r3, #10498	; 0x2902
   16e18:	f8ad 3012 	strh.w	r3, [sp, #18]
   16e1c:	ab05      	add	r3, sp, #20
   16e1e:	9302      	str	r3, [sp, #8]
   16e20:	4b0c      	ldr	r3, [pc, #48]	; (16e54 <bt_gatt_indicate+0xf0>)
   16e22:	9301      	str	r3, [sp, #4]
   16e24:	2301      	movs	r3, #1
   16e26:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   16e28:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16e2a:	4623      	mov	r3, r4
   16e2c:	aa04      	add	r2, sp, #16
   16e2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   16e32:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16e34:	f88d 4010 	strb.w	r4, [sp, #16]
   16e38:	f7ff fe7a 	bl	16b30 <bt_gatt_foreach_attr_type>
	return data.err;
   16e3c:	9807      	ldr	r0, [sp, #28]
   16e3e:	e7aa      	b.n	16d96 <bt_gatt_indicate+0x32>
		return -EAGAIN;
   16e40:	f06f 000a 	mvn.w	r0, #10
   16e44:	e7a7      	b.n	16d96 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
   16e46:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16e4a:	e7a4      	b.n	16d96 <bt_gatt_indicate+0x32>
   16e4c:	20000338 	.word	0x20000338
   16e50:	0001eb29 	.word	0x0001eb29
   16e54:	0001704d 	.word	0x0001704d

00016e58 <sc_process>:
{
   16e58:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16e5a:	f850 2c08 	ldr.w	r2, [r0, #-8]
   16e5e:	9201      	str	r2, [sp, #4]
{
   16e60:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   16e62:	f1a0 0120 	sub.w	r1, r0, #32
   16e66:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16e6a:	f3bf 8f5b 	dmb	ish
   16e6e:	e854 2f00 	ldrex	r2, [r4]
   16e72:	f022 0201 	bic.w	r2, r2, #1
   16e76:	e844 2000 	strex	r0, r2, [r4]
   16e7a:	2800      	cmp	r0, #0
   16e7c:	d1f7      	bne.n	16e6e <sc_process+0x16>
   16e7e:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16e82:	4a0d      	ldr	r2, [pc, #52]	; (16eb8 <sc_process+0x60>)
   16e84:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   16e88:	4a0c      	ldr	r2, [pc, #48]	; (16ebc <sc_process+0x64>)
   16e8a:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16e8e:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   16e90:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16e92:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16e96:	2204      	movs	r2, #4
	sc->start = 0U;
   16e98:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   16e9c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   16ea0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16ea4:	f7ff ff5e 	bl	16d64 <bt_gatt_indicate>
   16ea8:	b918      	cbnz	r0, 16eb2 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16eaa:	2101      	movs	r1, #1
   16eac:	4620      	mov	r0, r4
   16eae:	f007 feb3 	bl	1ec18 <atomic_set_bit>
}
   16eb2:	b002      	add	sp, #8
   16eb4:	bd10      	pop	{r4, pc}
   16eb6:	bf00      	nop
   16eb8:	00020f30 	.word	0x00020f30
   16ebc:	00016791 	.word	0x00016791

00016ec0 <gatt_notify>:
{
   16ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ec4:	4614      	mov	r4, r2
   16ec6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   16ec8:	2214      	movs	r2, #20
   16eca:	6861      	ldr	r1, [r4, #4]
{
   16ecc:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   16ece:	f008 f81b 	bl	1ef08 <bt_gatt_check_perm>
   16ed2:	b168      	cbz	r0, 16ef0 <gatt_notify+0x30>
   16ed4:	4b1e      	ldr	r3, [pc, #120]	; (16f50 <gatt_notify+0x90>)
   16ed6:	491f      	ldr	r1, [pc, #124]	; (16f54 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   16ed8:	481f      	ldr	r0, [pc, #124]	; (16f58 <gatt_notify+0x98>)
   16eda:	1ac9      	subs	r1, r1, r3
   16edc:	08c9      	lsrs	r1, r1, #3
   16ede:	0189      	lsls	r1, r1, #6
   16ee0:	f041 0102 	orr.w	r1, r1, #2
   16ee4:	f005 f94c 	bl	1c180 <log_0>
		return -EPERM;
   16ee8:	f04f 30ff 	mov.w	r0, #4294967295
}
   16eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   16ef0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   16ef2:	211b      	movs	r1, #27
   16ef4:	3202      	adds	r2, #2
   16ef6:	4638      	mov	r0, r7
   16ef8:	f7ff f878 	bl	15fec <bt_att_create_pdu>
	if (!buf) {
   16efc:	4605      	mov	r5, r0
   16efe:	b960      	cbnz	r0, 16f1a <gatt_notify+0x5a>
   16f00:	4b13      	ldr	r3, [pc, #76]	; (16f50 <gatt_notify+0x90>)
   16f02:	4914      	ldr	r1, [pc, #80]	; (16f54 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   16f04:	4815      	ldr	r0, [pc, #84]	; (16f5c <gatt_notify+0x9c>)
   16f06:	1ac9      	subs	r1, r1, r3
   16f08:	08c9      	lsrs	r1, r1, #3
   16f0a:	0189      	lsls	r1, r1, #6
   16f0c:	f041 0102 	orr.w	r1, r1, #2
   16f10:	f005 f936 	bl	1c180 <log_0>
		return -ENOMEM;
   16f14:	f06f 000b 	mvn.w	r0, #11
   16f18:	e7e8      	b.n	16eec <gatt_notify+0x2c>
   16f1a:	f100 0908 	add.w	r9, r0, #8
   16f1e:	2102      	movs	r1, #2
   16f20:	4648      	mov	r0, r9
   16f22:	f008 fd38 	bl	1f996 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   16f26:	4606      	mov	r6, r0
   16f28:	89a1      	ldrh	r1, [r4, #12]
   16f2a:	f826 8b02 	strh.w	r8, [r6], #2
   16f2e:	4648      	mov	r0, r9
   16f30:	f008 fd31 	bl	1f996 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   16f34:	89a2      	ldrh	r2, [r4, #12]
   16f36:	68a1      	ldr	r1, [r4, #8]
   16f38:	4630      	mov	r0, r6
   16f3a:	f006 fc3d 	bl	1d7b8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   16f3e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   16f42:	4629      	mov	r1, r5
   16f44:	4638      	mov	r0, r7
}
   16f46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   16f4a:	f007 bd6c 	b.w	1ea26 <bt_att_send>
   16f4e:	bf00      	nop
   16f50:	00020854 	.word	0x00020854
   16f54:	0002088c 	.word	0x0002088c
   16f58:	000229cb 	.word	0x000229cb
   16f5c:	00022a08 	.word	0x00022a08

00016f60 <bt_gatt_notify_cb>:
{
   16f60:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16f62:	4b37      	ldr	r3, [pc, #220]	; (17040 <bt_gatt_notify_cb+0xe0>)
   16f64:	f3bf 8f5b 	dmb	ish
   16f68:	681b      	ldr	r3, [r3, #0]
   16f6a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16f6e:	079a      	lsls	r2, r3, #30
{
   16f70:	b08b      	sub	sp, #44	; 0x2c
   16f72:	4604      	mov	r4, r0
   16f74:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16f76:	d55d      	bpl.n	17034 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   16f78:	6848      	ldr	r0, [r1, #4]
   16f7a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16f7c:	b114      	cbz	r4, 16f84 <bt_gatt_notify_cb+0x24>
   16f7e:	7b63      	ldrb	r3, [r4, #13]
   16f80:	2b07      	cmp	r3, #7
   16f82:	d15a      	bne.n	1703a <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16f84:	f7ff fda4 	bl	16ad0 <bt_gatt_attr_get_handle>
   16f88:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   16f8c:	b918      	cbnz	r0, 16f96 <bt_gatt_notify_cb+0x36>
		return -ENOENT;
   16f8e:	f06f 0001 	mvn.w	r0, #1
}
   16f92:	b00b      	add	sp, #44	; 0x2c
   16f94:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   16f96:	682a      	ldr	r2, [r5, #0]
   16f98:	b9aa      	cbnz	r2, 16fc6 <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16f9a:	9b05      	ldr	r3, [sp, #20]
   16f9c:	6818      	ldr	r0, [r3, #0]
   16f9e:	2300      	movs	r3, #0
   16fa0:	f88d 3010 	strb.w	r3, [sp, #16]
   16fa4:	a904      	add	r1, sp, #16
   16fa6:	f642 0303 	movw	r3, #10243	; 0x2803
   16faa:	f8ad 3012 	strh.w	r3, [sp, #18]
   16fae:	f006 fce3 	bl	1d978 <bt_uuid_cmp>
   16fb2:	b1c0      	cbz	r0, 16fe6 <bt_gatt_notify_cb+0x86>
	if (conn) {
   16fb4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   16fb8:	b314      	cbz	r4, 17000 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   16fba:	4601      	mov	r1, r0
   16fbc:	462a      	mov	r2, r5
   16fbe:	4620      	mov	r0, r4
   16fc0:	f7ff ff7e 	bl	16ec0 <gatt_notify>
   16fc4:	e7e5      	b.n	16f92 <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16fc6:	a905      	add	r1, sp, #20
   16fc8:	9102      	str	r1, [sp, #8]
   16fca:	491e      	ldr	r1, [pc, #120]	; (17044 <bt_gatt_notify_cb+0xe4>)
   16fcc:	9101      	str	r1, [sp, #4]
   16fce:	2101      	movs	r1, #1
	found->attr = NULL;
   16fd0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16fd2:	9100      	str	r1, [sp, #0]
   16fd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16fd8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16fda:	f7ff fda9 	bl	16b30 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16fde:	9b05      	ldr	r3, [sp, #20]
   16fe0:	2b00      	cmp	r3, #0
   16fe2:	d1da      	bne.n	16f9a <bt_gatt_notify_cb+0x3a>
   16fe4:	e7d3      	b.n	16f8e <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16fe6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   16fe8:	68c3      	ldr	r3, [r0, #12]
   16fea:	799b      	ldrb	r3, [r3, #6]
   16fec:	06db      	lsls	r3, r3, #27
   16fee:	d402      	bmi.n	16ff6 <bt_gatt_notify_cb+0x96>
			return -EINVAL;
   16ff0:	f06f 0015 	mvn.w	r0, #21
   16ff4:	e7cd      	b.n	16f92 <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16ff6:	f007 ff2c 	bl	1ee52 <bt_gatt_attr_value_handle>
   16ffa:	f8ad 0018 	strh.w	r0, [sp, #24]
   16ffe:	e7d9      	b.n	16fb4 <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17000:	f642 1202 	movw	r2, #10498	; 0x2902
   17004:	f8ad 2012 	strh.w	r2, [sp, #18]
   17008:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1700a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1700e:	9202      	str	r2, [sp, #8]
   17010:	4a0d      	ldr	r2, [pc, #52]	; (17048 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   17012:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   17014:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17016:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1701a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1701e:	aa04      	add	r2, sp, #16
   17020:	4623      	mov	r3, r4
   17022:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   17026:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17028:	f88d 4010 	strb.w	r4, [sp, #16]
   1702c:	f7ff fd80 	bl	16b30 <bt_gatt_foreach_attr_type>
	return data.err;
   17030:	9807      	ldr	r0, [sp, #28]
   17032:	e7ae      	b.n	16f92 <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
   17034:	f06f 000a 	mvn.w	r0, #10
   17038:	e7ab      	b.n	16f92 <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
   1703a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1703e:	e7a8      	b.n	16f92 <bt_gatt_notify_cb+0x32>
   17040:	20000338 	.word	0x20000338
   17044:	0001eb29 	.word	0x0001eb29
   17048:	0001704d 	.word	0x0001704d

0001704c <notify_cb>:
{
   1704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17050:	4b45      	ldr	r3, [pc, #276]	; (17168 <notify_cb+0x11c>)
{
   17052:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17054:	6882      	ldr	r2, [r0, #8]
   17056:	429a      	cmp	r2, r3
{
   17058:	b085      	sub	sp, #20
   1705a:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1705c:	d005      	beq.n	1706a <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   1705e:	f04f 0801 	mov.w	r8, #1
}
   17062:	4640      	mov	r0, r8
   17064:	b005      	add	sp, #20
   17066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   1706a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1706e:	4b3f      	ldr	r3, [pc, #252]	; (1716c <notify_cb+0x120>)
   17070:	4599      	cmp	r9, r3
   17072:	d022      	beq.n	170ba <notify_cb+0x6e>
   17074:	4b3e      	ldr	r3, [pc, #248]	; (17170 <notify_cb+0x124>)
   17076:	4d3f      	ldr	r5, [pc, #252]	; (17174 <notify_cb+0x128>)
			BT_WARN("Link is not encrypted");
   17078:	f8df b100 	ldr.w	fp, [pc, #256]	; 1717c <notify_cb+0x130>
   1707c:	1aed      	subs	r5, r5, r3
   1707e:	08ed      	lsrs	r5, r5, #3
   17080:	01ad      	lsls	r5, r5, #6
   17082:	f045 0302 	orr.w	r3, r5, #2
   17086:	f109 0601 	add.w	r6, r9, #1
   1708a:	f109 0a15 	add.w	sl, r9, #21
   1708e:	9300      	str	r3, [sp, #0]
		if (cfg->value != data->type) {
   17090:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   17094:	89a3      	ldrh	r3, [r4, #12]
   17096:	429a      	cmp	r2, r3
   17098:	d10b      	bne.n	170b2 <notify_cb+0x66>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1709a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1709e:	4631      	mov	r1, r6
   170a0:	f7fd ff82 	bl	14fa8 <bt_conn_lookup_addr_le>
		if (!conn) {
   170a4:	4605      	mov	r5, r0
   170a6:	b120      	cbz	r0, 170b2 <notify_cb+0x66>
		if (conn->state != BT_CONN_CONNECTED) {
   170a8:	7b42      	ldrb	r2, [r0, #13]
   170aa:	2a07      	cmp	r2, #7
   170ac:	d02a      	beq.n	17104 <notify_cb+0xb8>
			bt_conn_unref(conn);
   170ae:	f007 f837 	bl	1e120 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   170b2:	360a      	adds	r6, #10
   170b4:	4556      	cmp	r6, sl
   170b6:	d0d2      	beq.n	1705e <notify_cb+0x12>
   170b8:	e7ea      	b.n	17090 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   170ba:	2600      	movs	r6, #0
   170bc:	4d2e      	ldr	r5, [pc, #184]	; (17178 <notify_cb+0x12c>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   170be:	46b0      	mov	r8, r6
	return memcmp(a, b, sizeof(*a));
   170c0:	2207      	movs	r2, #7
   170c2:	a902      	add	r1, sp, #8
   170c4:	4628      	mov	r0, r5
   170c6:	f8cd 8008 	str.w	r8, [sp, #8]
   170ca:	f8cd 800b 	str.w	r8, [sp, #11]
   170ce:	f006 fb63 	bl	1d798 <memcmp>
   170d2:	b178      	cbz	r0, 170f4 <notify_cb+0xa8>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   170d4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   170d8:	2207      	movs	r2, #7
   170da:	4629      	mov	r1, r5
   170dc:	f7fd ffa8 	bl	15030 <bt_conn_lookup_state_le>
			if (!conn) {
   170e0:	b968      	cbnz	r0, 170fe <notify_cb+0xb2>
				sc = (struct sc_data *)data->ind_params->data;
   170e2:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   170e4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   170e8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   170ea:	4629      	mov	r1, r5
   170ec:	8853      	ldrh	r3, [r2, #2]
   170ee:	8812      	ldrh	r2, [r2, #0]
   170f0:	f7ff fb98 	bl	16824 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   170f4:	350c      	adds	r5, #12
   170f6:	2e00      	cmp	r6, #0
   170f8:	d1bc      	bne.n	17074 <notify_cb+0x28>
   170fa:	2601      	movs	r6, #1
   170fc:	e7e0      	b.n	170c0 <notify_cb+0x74>
			bt_conn_unref(conn);
   170fe:	f007 f80f 	bl	1e120 <bt_conn_unref>
   17102:	e7f7      	b.n	170f4 <notify_cb+0xa8>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   17104:	f8d9 2020 	ldr.w	r2, [r9, #32]
   17108:	b122      	cbz	r2, 17114 <notify_cb+0xc8>
   1710a:	4639      	mov	r1, r7
   1710c:	4790      	blx	r2
   1710e:	b908      	cbnz	r0, 17114 <notify_cb+0xc8>
			bt_conn_unref(conn);
   17110:	4628      	mov	r0, r5
   17112:	e7cc      	b.n	170ae <notify_cb+0x62>
		if (bt_gatt_check_perm(conn, attr,
   17114:	2214      	movs	r2, #20
   17116:	4639      	mov	r1, r7
   17118:	4628      	mov	r0, r5
   1711a:	f007 fef5 	bl	1ef08 <bt_gatt_check_perm>
   1711e:	4680      	mov	r8, r0
   17120:	b128      	cbz	r0, 1712e <notify_cb+0xe2>
			BT_WARN("Link is not encrypted");
   17122:	f8bd 1000 	ldrh.w	r1, [sp]
   17126:	4658      	mov	r0, fp
   17128:	f005 f82a 	bl	1c180 <log_0>
			continue;
   1712c:	e7c1      	b.n	170b2 <notify_cb+0x66>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1712e:	89a0      	ldrh	r0, [r4, #12]
   17130:	88a1      	ldrh	r1, [r4, #4]
   17132:	6922      	ldr	r2, [r4, #16]
   17134:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
   17136:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   17138:	d111      	bne.n	1715e <notify_cb+0x112>
			err = gatt_indicate(conn, data->handle,
   1713a:	f7ff fda9 	bl	16c90 <gatt_indicate>
			if (err == 0) {
   1713e:	4602      	mov	r2, r0
   17140:	b918      	cbnz	r0, 1714a <notify_cb+0xfe>
				data->ind_params->_ref++;
   17142:	6920      	ldr	r0, [r4, #16]
   17144:	7d81      	ldrb	r1, [r0, #22]
   17146:	3101      	adds	r1, #1
   17148:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
   1714a:	4628      	mov	r0, r5
   1714c:	9201      	str	r2, [sp, #4]
   1714e:	f006 ffe7 	bl	1e120 <bt_conn_unref>
		if (err < 0) {
   17152:	9a01      	ldr	r2, [sp, #4]
   17154:	2a00      	cmp	r2, #0
   17156:	db84      	blt.n	17062 <notify_cb+0x16>
		data->err = 0;
   17158:	2300      	movs	r3, #0
   1715a:	60a3      	str	r3, [r4, #8]
   1715c:	e7a9      	b.n	170b2 <notify_cb+0x66>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1715e:	f7ff feaf 	bl	16ec0 <gatt_notify>
   17162:	4602      	mov	r2, r0
   17164:	e7f1      	b.n	1714a <notify_cb+0xfe>
   17166:	bf00      	nop
   17168:	00016899 	.word	0x00016899
   1716c:	20000534 	.word	0x20000534
   17170:	00020854 	.word	0x00020854
   17174:	0002088c 	.word	0x0002088c
   17178:	20002039 	.word	0x20002039
   1717c:	000229cb 	.word	0x000229cb

00017180 <update_ccc>:
{
   17180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17184:	6881      	ldr	r1, [r0, #8]
{
   17186:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17188:	4a40      	ldr	r2, [pc, #256]	; (1728c <update_ccc+0x10c>)
   1718a:	4291      	cmp	r1, r2
{
   1718c:	b085      	sub	sp, #20
   1718e:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17190:	d178      	bne.n	17284 <update_ccc+0x104>
   17192:	4c3f      	ldr	r4, [pc, #252]	; (17290 <update_ccc+0x110>)
   17194:	493f      	ldr	r1, [pc, #252]	; (17294 <update_ccc+0x114>)
	ccc = attr->user_data;
   17196:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   1719a:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
   1719c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 172ac <update_ccc+0x12c>
   171a0:	1a64      	subs	r4, r4, r1
   171a2:	08e4      	lsrs	r4, r4, #3
   171a4:	f108 0315 	add.w	r3, r8, #21
   171a8:	ea4f 1984 	mov.w	r9, r4, lsl #6
   171ac:	f108 0601 	add.w	r6, r8, #1
   171b0:	9300      	str	r3, [sp, #0]
   171b2:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
   171b6:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   171ba:	b19a      	cbz	r2, 171e4 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   171bc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   171c0:	4632      	mov	r2, r6
   171c2:	4628      	mov	r0, r5
   171c4:	f006 ff71 	bl	1e0aa <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   171c8:	b160      	cbz	r0, 171e4 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   171ca:	222a      	movs	r2, #42	; 0x2a
   171cc:	4651      	mov	r1, sl
   171ce:	4628      	mov	r0, r5
   171d0:	f007 fe9a 	bl	1ef08 <bt_gatt_check_perm>
		if (err) {
   171d4:	b1d8      	cbz	r0, 1720e <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   171d6:	2803      	cmp	r0, #3
   171d8:	d109      	bne.n	171ee <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
   171da:	464a      	mov	r2, r9
   171dc:	4651      	mov	r1, sl
   171de:	4658      	mov	r0, fp
   171e0:	f004 ffdb 	bl	1c19a <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   171e4:	9b00      	ldr	r3, [sp, #0]
   171e6:	360a      	adds	r6, #10
   171e8:	429e      	cmp	r6, r3
   171ea:	d04b      	beq.n	17284 <update_ccc+0x104>
   171ec:	e7e3      	b.n	171b6 <update_ccc+0x36>
				sec = BT_SECURITY_L3;
   171ee:	2805      	cmp	r0, #5
   171f0:	bf14      	ite	ne
   171f2:	2202      	movne	r2, #2
   171f4:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
   171f6:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
   171f8:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
   171fa:	f006 ff24 	bl	1e046 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   171fe:	9a01      	ldr	r2, [sp, #4]
   17200:	4282      	cmp	r2, r0
   17202:	d904      	bls.n	1720e <update_ccc+0x8e>
				if (data->sec < sec) {
   17204:	7939      	ldrb	r1, [r7, #4]
   17206:	4291      	cmp	r1, r2
   17208:	d2ec      	bcs.n	171e4 <update_ccc+0x64>
					data->sec = sec;
   1720a:	713a      	strb	r2, [r7, #4]
   1720c:	e7ea      	b.n	171e4 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
   1720e:	4641      	mov	r1, r8
   17210:	4650      	mov	r0, sl
   17212:	f007 fc68 	bl	1eae6 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17216:	4b20      	ldr	r3, [pc, #128]	; (17298 <update_ccc+0x118>)
   17218:	4598      	cmp	r8, r3
   1721a:	d133      	bne.n	17284 <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1721c:	7a28      	ldrb	r0, [r5, #8]
   1721e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   17222:	f7ff fa0b 	bl	1663c <find_sc_cfg>
	if (!cfg) {
   17226:	4606      	mov	r6, r0
   17228:	b360      	cbz	r0, 17284 <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
   1722a:	8902      	ldrh	r2, [r0, #8]
   1722c:	8943      	ldrh	r3, [r0, #10]
   1722e:	ea52 0103 	orrs.w	r1, r2, r3
   17232:	d027      	beq.n	17284 <update_ccc+0x104>
	index = bt_conn_index(conn);
   17234:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17236:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1723a:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
   1723e:	f7fe f8a7 	bl	15390 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17242:	4916      	ldr	r1, [pc, #88]	; (1729c <update_ccc+0x11c>)
   17244:	4a16      	ldr	r2, [pc, #88]	; (172a0 <update_ccc+0x120>)
   17246:	2318      	movs	r3, #24
   17248:	fb03 1300 	mla	r3, r3, r0, r1
   1724c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1724e:	4a15      	ldr	r2, [pc, #84]	; (172a4 <update_ccc+0x124>)
   17250:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17252:	aa03      	add	r2, sp, #12
   17254:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17256:	2204      	movs	r2, #4
   17258:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1725a:	b203      	sxth	r3, r0
   1725c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   17264:	4628      	mov	r0, r5
   17266:	f7ff fd7d 	bl	16d64 <bt_gatt_indicate>
   1726a:	b128      	cbz	r0, 17278 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
   1726c:	01a1      	lsls	r1, r4, #6
   1726e:	480e      	ldr	r0, [pc, #56]	; (172a8 <update_ccc+0x128>)
   17270:	f041 0101 	orr.w	r1, r1, #1
   17274:	f004 ff84 	bl	1c180 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   17278:	2204      	movs	r2, #4
   1727a:	2100      	movs	r1, #0
   1727c:	f106 0008 	add.w	r0, r6, #8
   17280:	f006 fac5 	bl	1d80e <memset>
}
   17284:	2001      	movs	r0, #1
   17286:	b005      	add	sp, #20
   17288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1728c:	00016899 	.word	0x00016899
   17290:	0002088c 	.word	0x0002088c
   17294:	00020854 	.word	0x00020854
   17298:	20000534 	.word	0x20000534
   1729c:	20001ed0 	.word	0x20001ed0
   172a0:	00020f30 	.word	0x00020f30
   172a4:	0001ec35 	.word	0x0001ec35
   172a8:	00022a45 	.word	0x00022a45
   172ac:	00022a31 	.word	0x00022a31

000172b0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   172b0:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   172b2:	4a0b      	ldr	r2, [pc, #44]	; (172e0 <bt_gatt_connected+0x30>)
	data.conn = conn;
   172b4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   172b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
   172ba:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   172bc:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   172be:	2001      	movs	r0, #1
   172c0:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   172c4:	f007 fe13 	bl	1eeee <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_MASTER ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   172c8:	4620      	mov	r0, r4
   172ca:	f006 febc 	bl	1e046 <bt_conn_get_security>
   172ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   172d2:	4288      	cmp	r0, r1
   172d4:	d202      	bcs.n	172dc <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
   172d6:	4620      	mov	r0, r4
   172d8:	f006 fe82 	bl	1dfe0 <bt_conn_set_security>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   172dc:	b002      	add	sp, #8
   172de:	bd10      	pop	{r4, pc}
   172e0:	00017181 	.word	0x00017181

000172e4 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   172e4:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   172e6:	4a06      	ldr	r2, [pc, #24]	; (17300 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   172e8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   172ea:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   172ec:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   172ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   172f2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   172f6:	f007 fdfa 	bl	1eeee <bt_gatt_foreach_attr>
}
   172fa:	b003      	add	sp, #12
   172fc:	f85d fb04 	ldr.w	pc, [sp], #4
   17300:	00017181 	.word	0x00017181

00017304 <db_hash_read>:
{
   17304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17306:	4915      	ldr	r1, [pc, #84]	; (1735c <db_hash_read+0x58>)
{
   17308:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1730c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1730e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17312:	461f      	mov	r7, r3
   17314:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17316:	f008 fe4d 	bl	1ffb4 <k_work_cancel_delayable_sync>
   1731a:	f3bf 8f5b 	dmb	ish
   1731e:	4b10      	ldr	r3, [pc, #64]	; (17360 <db_hash_read+0x5c>)
   17320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17322:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17326:	075b      	lsls	r3, r3, #29
   17328:	d401      	bmi.n	1732e <db_hash_read+0x2a>
		db_hash_gen(true);
   1732a:	f7ff fc5b 	bl	16be4 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   1732e:	2101      	movs	r1, #1
   17330:	4620      	mov	r0, r4
   17332:	f007 fe14 	bl	1ef5e <bt_gatt_change_aware>
	if (offset > value_len) {
   17336:	2e10      	cmp	r6, #16
   17338:	d80c      	bhi.n	17354 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
   1733a:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1733e:	4909      	ldr	r1, [pc, #36]	; (17364 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
   17340:	42bc      	cmp	r4, r7
   17342:	bfa8      	it	ge
   17344:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   17346:	4622      	mov	r2, r4
   17348:	4431      	add	r1, r6
   1734a:	4628      	mov	r0, r5
   1734c:	f006 fa34 	bl	1d7b8 <memcpy>
}
   17350:	4620      	mov	r0, r4
   17352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17354:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17358:	e7fa      	b.n	17350 <db_hash_read+0x4c>
   1735a:	bf00      	nop
   1735c:	20001800 	.word	0x20001800
   17360:	20001828 	.word	0x20001828
   17364:	200017c0 	.word	0x200017c0

00017368 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17368:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1736a:	4603      	mov	r3, r0
   1736c:	4a15      	ldr	r2, [pc, #84]	; (173c4 <bt_gatt_disconnected+0x5c>)
{
   1736e:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17370:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17374:	2001      	movs	r0, #1
   17376:	f007 fdba 	bl	1eeee <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1737a:	4628      	mov	r0, r5
   1737c:	f7ff f980 	bl	16680 <find_cf_cfg>
	if (!cfg) {
   17380:	4604      	mov	r4, r0
   17382:	b1e8      	cbz	r0, 173c0 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17384:	f105 0688 	add.w	r6, r5, #136	; 0x88
   17388:	7a28      	ldrb	r0, [r5, #8]
   1738a:	4631      	mov	r1, r6
   1738c:	f006 fc4a 	bl	1dc24 <bt_addr_le_is_bonded>
   17390:	b920      	cbnz	r0, 1739c <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   17392:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   17394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   17398:	f007 bc20 	b.w	1ebdc <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   1739c:	1c60      	adds	r0, r4, #1
   1739e:	2207      	movs	r2, #7
   173a0:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   173a2:	340c      	adds	r4, #12
   173a4:	f006 fa08 	bl	1d7b8 <memcpy>
   173a8:	f3bf 8f5b 	dmb	ish
   173ac:	e854 3f00 	ldrex	r3, [r4]
   173b0:	f023 0302 	bic.w	r3, r3, #2
   173b4:	e844 3200 	strex	r2, r3, [r4]
   173b8:	2a00      	cmp	r2, #0
   173ba:	d1f7      	bne.n	173ac <bt_gatt_disconnected+0x44>
   173bc:	f3bf 8f5b 	dmb	ish
}
   173c0:	bd70      	pop	{r4, r5, r6, pc}
   173c2:	bf00      	nop
   173c4:	00016971 	.word	0x00016971

000173c8 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   173c8:	4b10      	ldr	r3, [pc, #64]	; (1740c <get_io_capa+0x44>)
   173ca:	681b      	ldr	r3, [r3, #0]
   173cc:	b1bb      	cbz	r3, 173fe <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   173ce:	681a      	ldr	r2, [r3, #0]
   173d0:	b142      	cbz	r2, 173e4 <get_io_capa+0x1c>
   173d2:	6859      	ldr	r1, [r3, #4]
   173d4:	b131      	cbz	r1, 173e4 <get_io_capa+0x1c>
   173d6:	6899      	ldr	r1, [r3, #8]
   173d8:	b911      	cbnz	r1, 173e0 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   173da:	490d      	ldr	r1, [pc, #52]	; (17410 <get_io_capa+0x48>)
   173dc:	7809      	ldrb	r1, [r1, #0]
   173de:	b939      	cbnz	r1, 173f0 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   173e0:	2004      	movs	r0, #4
   173e2:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   173e4:	490a      	ldr	r1, [pc, #40]	; (17410 <get_io_capa+0x48>)
   173e6:	7809      	ldrb	r1, [r1, #0]
   173e8:	b111      	cbz	r1, 173f0 <get_io_capa+0x28>
   173ea:	b10a      	cbz	r2, 173f0 <get_io_capa+0x28>
   173ec:	6899      	ldr	r1, [r3, #8]
   173ee:	b941      	cbnz	r1, 17402 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   173f0:	685b      	ldr	r3, [r3, #4]
   173f2:	b943      	cbnz	r3, 17406 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   173f4:	2a00      	cmp	r2, #0
   173f6:	bf0c      	ite	eq
   173f8:	2003      	moveq	r0, #3
   173fa:	2000      	movne	r0, #0
   173fc:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   173fe:	2003      	movs	r0, #3
   17400:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   17402:	2001      	movs	r0, #1
   17404:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   17406:	2002      	movs	r0, #2
	}
}
   17408:	4770      	bx	lr
   1740a:	bf00      	nop
   1740c:	20001e58 	.word	0x20001e58
   17410:	20002196 	.word	0x20002196

00017414 <smp_dhkey_generate>:
}
#endif /* CONFIG_BT_PERIPHERAL */

static void bt_smp_dhkey_ready(const uint8_t *dhkey);
static uint8_t smp_dhkey_generate(struct bt_smp *smp)
{
   17414:	b538      	push	{r3, r4, r5, lr}
	int err;

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   17416:	1d05      	adds	r5, r0, #4
{
   17418:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1741a:	2108      	movs	r1, #8
   1741c:	4628      	mov	r0, r5
   1741e:	f007 fddc 	bl	1efda <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   17422:	490b      	ldr	r1, [pc, #44]	; (17450 <smp_dhkey_generate+0x3c>)
   17424:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17428:	f7fd f982 	bl	14730 <bt_dh_key_gen>
	if (err) {
   1742c:	b170      	cbz	r0, 1744c <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1742e:	2108      	movs	r1, #8
   17430:	4628      	mov	r0, r5
   17432:	f007 fde6 	bl	1f002 <atomic_clear_bit>
   17436:	4b07      	ldr	r3, [pc, #28]	; (17454 <smp_dhkey_generate+0x40>)
   17438:	4907      	ldr	r1, [pc, #28]	; (17458 <smp_dhkey_generate+0x44>)

		BT_ERR("Failed to generate DHKey");
   1743a:	4808      	ldr	r0, [pc, #32]	; (1745c <smp_dhkey_generate+0x48>)
   1743c:	1ac9      	subs	r1, r1, r3
   1743e:	08c9      	lsrs	r1, r1, #3
   17440:	0189      	lsls	r1, r1, #6
   17442:	f041 0101 	orr.w	r1, r1, #1
   17446:	f004 fe9b 	bl	1c180 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1744a:	2008      	movs	r0, #8
	}

	return 0;
}
   1744c:	bd38      	pop	{r3, r4, r5, pc}
   1744e:	bf00      	nop
   17450:	0001f793 	.word	0x0001f793
   17454:	00020854 	.word	0x00020854
   17458:	000208c4 	.word	0x000208c4
   1745c:	00022a71 	.word	0x00022a71

00017460 <get_auth.isra.0>:
	if (sc_supported) {
   17460:	4b0c      	ldr	r3, [pc, #48]	; (17494 <get_auth.isra.0+0x34>)
   17462:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   17464:	b510      	push	{r4, lr}
	if (sc_supported) {
   17466:	b17b      	cbz	r3, 17488 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   17468:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1746c:	f7ff ffac 	bl	173c8 <get_io_capa>
	if (bondable) {
   17470:	4b09      	ldr	r3, [pc, #36]	; (17498 <get_auth.isra.0+0x38>)
   17472:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   17474:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   17476:	bf0c      	ite	eq
   17478:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1747c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   17480:	b12b      	cbz	r3, 1748e <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   17482:	f044 0001 	orr.w	r0, r4, #1
}
   17486:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   17488:	f000 0407 	and.w	r4, r0, #7
   1748c:	e7ee      	b.n	1746c <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1748e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   17492:	e7f8      	b.n	17486 <get_auth.isra.0+0x26>
   17494:	20002196 	.word	0x20002196
   17498:	20000628 	.word	0x20000628

0001749c <smp_chan_get>:
{
   1749c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1749e:	2106      	movs	r1, #6
   174a0:	f006 ff5c 	bl	1e35c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   174a4:	4604      	mov	r4, r0
   174a6:	b958      	cbnz	r0, 174c0 <smp_chan_get+0x24>
   174a8:	4907      	ldr	r1, [pc, #28]	; (174c8 <smp_chan_get+0x2c>)
   174aa:	4b08      	ldr	r3, [pc, #32]	; (174cc <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   174ac:	4808      	ldr	r0, [pc, #32]	; (174d0 <smp_chan_get+0x34>)
   174ae:	1ac9      	subs	r1, r1, r3
   174b0:	08c9      	lsrs	r1, r1, #3
   174b2:	0189      	lsls	r1, r1, #6
   174b4:	f041 0101 	orr.w	r1, r1, #1
   174b8:	f004 fe62 	bl	1c180 <log_0>
}
   174bc:	4620      	mov	r0, r4
   174be:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   174c0:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   174c4:	e7fa      	b.n	174bc <smp_chan_get+0x20>
   174c6:	bf00      	nop
   174c8:	000208c4 	.word	0x000208c4
   174cc:	00020854 	.word	0x00020854
   174d0:	00022a8a 	.word	0x00022a8a

000174d4 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   174d4:	4b0c      	ldr	r3, [pc, #48]	; (17508 <bt_smp_accept+0x34>)
{
   174d6:	b510      	push	{r4, lr}
   174d8:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
   174da:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   174de:	b928      	cbnz	r0, 174ec <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   174e0:	4a0a      	ldr	r2, [pc, #40]	; (1750c <bt_smp_accept+0x38>)
   174e2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   174e6:	33f0      	adds	r3, #240	; 0xf0
   174e8:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   174ea:	bd10      	pop	{r4, pc}
   174ec:	4b08      	ldr	r3, [pc, #32]	; (17510 <bt_smp_accept+0x3c>)
   174ee:	4a09      	ldr	r2, [pc, #36]	; (17514 <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
   174f0:	4809      	ldr	r0, [pc, #36]	; (17518 <bt_smp_accept+0x44>)
   174f2:	1ad2      	subs	r2, r2, r3
   174f4:	08d2      	lsrs	r2, r2, #3
   174f6:	0192      	lsls	r2, r2, #6
   174f8:	f042 0201 	orr.w	r2, r2, #1
   174fc:	4621      	mov	r1, r4
   174fe:	f004 fe4c 	bl	1c19a <log_1>
	return -ENOMEM;
   17502:	f06f 000b 	mvn.w	r0, #11
   17506:	e7f0      	b.n	174ea <bt_smp_accept+0x16>
   17508:	20001880 	.word	0x20001880
   1750c:	000210ac 	.word	0x000210ac
   17510:	00020854 	.word	0x00020854
   17514:	000208c4 	.word	0x000208c4
   17518:	00022aa5 	.word	0x00022aa5

0001751c <smp_init>:
{
   1751c:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1751e:	22f0      	movs	r2, #240	; 0xf0
{
   17520:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   17522:	2100      	movs	r1, #0
   17524:	f006 f973 	bl	1d80e <memset>
	if (bt_rand(smp->prnd, 16)) {
   17528:	2110      	movs	r1, #16
   1752a:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1752e:	f002 fbbf 	bl	19cb0 <bt_rand>
   17532:	4604      	mov	r4, r0
   17534:	b948      	cbnz	r0, 1754a <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   17536:	2105      	movs	r1, #5
   17538:	4628      	mov	r0, r5
   1753a:	f007 fd4e 	bl	1efda <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1753e:	f7fd f8e7 	bl	14710 <bt_pub_key_get>
   17542:	4b03      	ldr	r3, [pc, #12]	; (17550 <smp_init+0x34>)
   17544:	6018      	str	r0, [r3, #0]
}
   17546:	4620      	mov	r0, r4
   17548:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1754a:	2408      	movs	r4, #8
   1754c:	e7fb      	b.n	17546 <smp_init+0x2a>
   1754e:	bf00      	nop
   17550:	20001eec 	.word	0x20001eec

00017554 <smp_find>:
{
   17554:	4601      	mov	r1, r0
   17556:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   17558:	4803      	ldr	r0, [pc, #12]	; (17568 <smp_find+0x14>)
   1755a:	f007 fe1d 	bl	1f198 <atomic_test_bit>
   1755e:	2800      	cmp	r0, #0
}
   17560:	4802      	ldr	r0, [pc, #8]	; (1756c <smp_find+0x18>)
   17562:	bf08      	it	eq
   17564:	2000      	moveq	r0, #0
   17566:	bd08      	pop	{r3, pc}
   17568:	20001884 	.word	0x20001884
   1756c:	20001880 	.word	0x20001880

00017570 <compute_and_check_and_send_slave_dhcheck>:
{
   17570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   17574:	2210      	movs	r2, #16
{
   17576:	b0a3      	sub	sp, #140	; 0x8c
   17578:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1757a:	2100      	movs	r1, #0
   1757c:	eb0d 0002 	add.w	r0, sp, r2
   17580:	f006 f945 	bl	1d80e <memset>
	switch (smp->method) {
   17584:	7a21      	ldrb	r1, [r4, #8]
   17586:	2905      	cmp	r1, #5
   17588:	f200 8099 	bhi.w	176be <compute_and_check_and_send_slave_dhcheck+0x14e>
   1758c:	e8df f001 	tbb	[pc, r1]
   17590:	09030309 	.word	0x09030309
   17594:	8e97      	.short	0x8e97
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   17596:	2204      	movs	r2, #4
   17598:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1759c:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1759e:	f006 f90b 	bl	1d7b8 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   175a2:	4b79      	ldr	r3, [pc, #484]	; (17788 <compute_and_check_and_send_slave_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
   175a4:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   175a8:	aa14      	add	r2, sp, #80	; 0x50
   175aa:	f103 0630 	add.w	r6, r3, #48	; 0x30
   175ae:	6818      	ldr	r0, [r3, #0]
   175b0:	6859      	ldr	r1, [r3, #4]
   175b2:	4615      	mov	r5, r2
   175b4:	c503      	stmia	r5!, {r0, r1}
   175b6:	3308      	adds	r3, #8
   175b8:	42b3      	cmp	r3, r6
   175ba:	462a      	mov	r2, r5
   175bc:	d1f7      	bne.n	175ae <compute_and_check_and_send_slave_dhcheck+0x3e>
   175be:	6818      	ldr	r0, [r3, #0]
   175c0:	791b      	ldrb	r3, [r3, #4]
   175c2:	6028      	str	r0, [r5, #0]
   175c4:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   175c6:	ad0c      	add	r5, sp, #48	; 0x30
   175c8:	2220      	movs	r2, #32
   175ca:	f104 0197 	add.w	r1, r4, #151	; 0x97
   175ce:	4628      	mov	r0, r5
   175d0:	f007 fcf7 	bl	1efc2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   175d4:	486d      	ldr	r0, [pc, #436]	; (1778c <compute_and_check_and_send_slave_dhcheck+0x21c>)
   175d6:	ab08      	add	r3, sp, #32
   175d8:	2220      	movs	r2, #32
   175da:	4629      	mov	r1, r5
   175dc:	f007 fd20 	bl	1f020 <bt_smp_aes_cmac>
	if (err) {
   175e0:	2800      	cmp	r0, #0
   175e2:	f040 80c7 	bne.w	17774 <compute_and_check_and_send_slave_dhcheck+0x204>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   175e6:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   175ea:	2210      	movs	r2, #16
   175ec:	4639      	mov	r1, r7
   175ee:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   175f2:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   175f6:	f007 fce4 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   175fa:	2210      	movs	r2, #16
   175fc:	4641      	mov	r1, r8
   175fe:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   17602:	f007 fcde 	bl	1efc2 <sys_memcpy_swap>
	m[37] = a1->type;
   17606:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   1760a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1760e:	2206      	movs	r2, #6
   17610:	f109 0190 	add.w	r1, r9, #144	; 0x90
   17614:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   17618:	f007 fcd3 	bl	1efc2 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1761c:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   17620:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   17624:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   17628:	2206      	movs	r2, #6
   1762a:	f109 0197 	add.w	r1, r9, #151	; 0x97
   1762e:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   17632:	f007 fcc6 	bl	1efc2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   17636:	4633      	mov	r3, r6
   17638:	2235      	movs	r2, #53	; 0x35
   1763a:	a914      	add	r1, sp, #80	; 0x50
   1763c:	a808      	add	r0, sp, #32
   1763e:	f007 fcef 	bl	1f020 <bt_smp_aes_cmac>
	if (err) {
   17642:	2800      	cmp	r0, #0
   17644:	f040 8096 	bne.w	17774 <compute_and_check_and_send_slave_dhcheck+0x204>
	sys_mem_swap(mackey, 16);
   17648:	4630      	mov	r0, r6
   1764a:	f007 fd24 	bl	1f096 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1764e:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   17652:	2301      	movs	r3, #1
   17654:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   17658:	2235      	movs	r2, #53	; 0x35
   1765a:	464b      	mov	r3, r9
   1765c:	a914      	add	r1, sp, #80	; 0x50
   1765e:	a808      	add	r0, sp, #32
   17660:	f007 fcde 	bl	1f020 <bt_smp_aes_cmac>
	if (err) {
   17664:	2800      	cmp	r0, #0
   17666:	f040 8085 	bne.w	17774 <compute_and_check_and_send_slave_dhcheck+0x204>
	sys_mem_swap(ltk, 16);
   1766a:	4648      	mov	r0, r9
   1766c:	f007 fd13 	bl	1f096 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   17670:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   17674:	aa14      	add	r2, sp, #80	; 0x50
   17676:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   17678:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   1767c:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1767e:	9301      	str	r3, [sp, #4]
   17680:	f104 0311 	add.w	r3, r4, #17
   17684:	9202      	str	r2, [sp, #8]
   17686:	9300      	str	r3, [sp, #0]
   17688:	463a      	mov	r2, r7
   1768a:	ab04      	add	r3, sp, #16
   1768c:	4641      	mov	r1, r8
   1768e:	4630      	mov	r0, r6
   17690:	f007 fd0f 	bl	1f0b2 <smp_f6>
   17694:	b1f8      	cbz	r0, 176d6 <compute_and_check_and_send_slave_dhcheck+0x166>
   17696:	493e      	ldr	r1, [pc, #248]	; (17790 <compute_and_check_and_send_slave_dhcheck+0x220>)
   17698:	4b3e      	ldr	r3, [pc, #248]	; (17794 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate local DHKey check failed");
   1769a:	483f      	ldr	r0, [pc, #252]	; (17798 <compute_and_check_and_send_slave_dhcheck+0x228>)
   1769c:	1ac9      	subs	r1, r1, r3
   1769e:	08c9      	lsrs	r1, r1, #3
   176a0:	0189      	lsls	r1, r1, #6
   176a2:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   176a6:	f004 fd6b 	bl	1c180 <log_0>
   176aa:	e012      	b.n	176d2 <compute_and_check_and_send_slave_dhcheck+0x162>
		if (smp->oobd_remote) {
   176ac:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   176b0:	2900      	cmp	r1, #0
   176b2:	f43f af76 	beq.w	175a2 <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   176b6:	2210      	movs	r2, #16
   176b8:	eb0d 0002 	add.w	r0, sp, r2
   176bc:	e76f      	b.n	1759e <compute_and_check_and_send_slave_dhcheck+0x2e>
   176be:	4a34      	ldr	r2, [pc, #208]	; (17790 <compute_and_check_and_send_slave_dhcheck+0x220>)
   176c0:	4b34      	ldr	r3, [pc, #208]	; (17794 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   176c2:	4836      	ldr	r0, [pc, #216]	; (1779c <compute_and_check_and_send_slave_dhcheck+0x22c>)
   176c4:	1ad2      	subs	r2, r2, r3
   176c6:	08d2      	lsrs	r2, r2, #3
   176c8:	0192      	lsls	r2, r2, #6
   176ca:	f042 0201 	orr.w	r2, r2, #1
   176ce:	f004 fd64 	bl	1c19a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   176d2:	2008      	movs	r0, #8
   176d4:	e049      	b.n	1776a <compute_and_check_and_send_slave_dhcheck+0x1fa>
	if (smp->method == LE_SC_OOB) {
   176d6:	7a23      	ldrb	r3, [r4, #8]
   176d8:	2b05      	cmp	r3, #5
   176da:	d107      	bne.n	176ec <compute_and_check_and_send_slave_dhcheck+0x17c>
		if (smp->oobd_local) {
   176dc:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   176e0:	2210      	movs	r2, #16
   176e2:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   176e6:	b1e1      	cbz	r1, 17722 <compute_and_check_and_send_slave_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   176e8:	f006 f866 	bl	1d7b8 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   176ec:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   176f0:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   176f2:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   176f6:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   176f8:	9301      	str	r3, [sp, #4]
   176fa:	f104 030a 	add.w	r3, r4, #10
   176fe:	9202      	str	r2, [sp, #8]
   17700:	9300      	str	r3, [sp, #0]
   17702:	4642      	mov	r2, r8
   17704:	ab04      	add	r3, sp, #16
   17706:	4639      	mov	r1, r7
   17708:	4630      	mov	r0, r6
   1770a:	f007 fcd2 	bl	1f0b2 <smp_f6>
   1770e:	b158      	cbz	r0, 17728 <compute_and_check_and_send_slave_dhcheck+0x1b8>
   17710:	491f      	ldr	r1, [pc, #124]	; (17790 <compute_and_check_and_send_slave_dhcheck+0x220>)
   17712:	4b20      	ldr	r3, [pc, #128]	; (17794 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate remote DHKey check failed");
   17714:	4822      	ldr	r0, [pc, #136]	; (177a0 <compute_and_check_and_send_slave_dhcheck+0x230>)
   17716:	1ac9      	subs	r1, r1, r3
   17718:	08c9      	lsrs	r1, r1, #3
   1771a:	0189      	lsls	r1, r1, #6
   1771c:	f041 0101 	orr.w	r1, r1, #1
   17720:	e7c1      	b.n	176a6 <compute_and_check_and_send_slave_dhcheck+0x136>
			memset(r, 0, sizeof(r));
   17722:	f006 f874 	bl	1d80e <memset>
   17726:	e7e1      	b.n	176ec <compute_and_check_and_send_slave_dhcheck+0x17c>
	if (memcmp(smp->e, re, 16)) {
   17728:	4629      	mov	r1, r5
   1772a:	2210      	movs	r2, #16
   1772c:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   17730:	f006 f832 	bl	1d798 <memcmp>
   17734:	4605      	mov	r5, r0
   17736:	b9d8      	cbnz	r0, 17770 <compute_and_check_and_send_slave_dhcheck+0x200>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   17738:	210d      	movs	r1, #13
   1773a:	4620      	mov	r0, r4
   1773c:	f007 fd56 	bl	1f1ec <smp_create_pdu.isra.0>
	if (!buf) {
   17740:	4606      	mov	r6, r0
   17742:	2800      	cmp	r0, #0
   17744:	d0c5      	beq.n	176d2 <compute_and_check_and_send_slave_dhcheck+0x162>
   17746:	2110      	movs	r1, #16
   17748:	3008      	adds	r0, #8
   1774a:	f008 f924 	bl	1f996 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1774e:	2210      	movs	r2, #16
   17750:	a914      	add	r1, sp, #80	; 0x50
   17752:	f006 f831 	bl	1d7b8 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   17756:	462a      	mov	r2, r5
   17758:	4631      	mov	r1, r6
   1775a:	4620      	mov	r0, r4
   1775c:	f007 fc7c 	bl	1f058 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17760:	1d20      	adds	r0, r4, #4
   17762:	2101      	movs	r1, #1
   17764:	f007 fc39 	bl	1efda <atomic_set_bit>
	return 0;
   17768:	4628      	mov	r0, r5
}
   1776a:	b023      	add	sp, #140	; 0x8c
   1776c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   17770:	200b      	movs	r0, #11
   17772:	e7fa      	b.n	1776a <compute_and_check_and_send_slave_dhcheck+0x1fa>
   17774:	4906      	ldr	r1, [pc, #24]	; (17790 <compute_and_check_and_send_slave_dhcheck+0x220>)
   17776:	4b07      	ldr	r3, [pc, #28]	; (17794 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate LTK failed");
   17778:	480a      	ldr	r0, [pc, #40]	; (177a4 <compute_and_check_and_send_slave_dhcheck+0x234>)
   1777a:	1ac9      	subs	r1, r1, r3
   1777c:	08c9      	lsrs	r1, r1, #3
   1777e:	0189      	lsls	r1, r1, #6
   17780:	f041 0101 	orr.w	r1, r1, #1
   17784:	e78f      	b.n	176a6 <compute_and_check_and_send_slave_dhcheck+0x136>
   17786:	bf00      	nop
   17788:	000209f3 	.word	0x000209f3
   1778c:	00022db0 	.word	0x00022db0
   17790:	000208c4 	.word	0x000208c4
   17794:	00020854 	.word	0x00020854
   17798:	00022ae6 	.word	0x00022ae6
   1779c:	00022aca 	.word	0x00022aca
   177a0:	00022b09 	.word	0x00022b09
   177a4:	00022b2d 	.word	0x00022b2d

000177a8 <smp_send_pairing_confirm>:
{
   177a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   177aa:	7a04      	ldrb	r4, [r0, #8]
   177ac:	2c02      	cmp	r4, #2
{
   177ae:	4605      	mov	r5, r0
	switch (smp->method) {
   177b0:	d824      	bhi.n	177fc <smp_send_pairing_confirm+0x54>
   177b2:	b14c      	cbz	r4, 177c8 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   177b4:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   177b8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   177bc:	40dc      	lsrs	r4, r3
   177be:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   177c2:	f064 047f 	orn	r4, r4, #127	; 0x7f
   177c6:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   177c8:	2103      	movs	r1, #3
   177ca:	4628      	mov	r0, r5
   177cc:	f007 fd0e 	bl	1f1ec <smp_create_pdu.isra.0>
	if (!buf) {
   177d0:	4606      	mov	r6, r0
   177d2:	b300      	cbz	r0, 17816 <smp_send_pairing_confirm+0x6e>
   177d4:	2110      	movs	r1, #16
   177d6:	3008      	adds	r0, #8
   177d8:	f008 f8dd 	bl	1f996 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   177dc:	9000      	str	r0, [sp, #0]
   177de:	4816      	ldr	r0, [pc, #88]	; (17838 <smp_send_pairing_confirm+0x90>)
   177e0:	4623      	mov	r3, r4
   177e2:	6800      	ldr	r0, [r0, #0]
   177e4:	f105 0227 	add.w	r2, r5, #39	; 0x27
   177e8:	f105 0157 	add.w	r1, r5, #87	; 0x57
   177ec:	f007 fcad 	bl	1f14a <smp_f4>
   177f0:	4604      	mov	r4, r0
   177f2:	b1a0      	cbz	r0, 1781e <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   177f4:	4630      	mov	r0, r6
   177f6:	f001 fb15 	bl	18e24 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   177fa:	e00c      	b.n	17816 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   177fc:	2c03      	cmp	r4, #3
   177fe:	d00c      	beq.n	1781a <smp_send_pairing_confirm+0x72>
   17800:	4a0e      	ldr	r2, [pc, #56]	; (1783c <smp_send_pairing_confirm+0x94>)
   17802:	4b0f      	ldr	r3, [pc, #60]	; (17840 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   17804:	480f      	ldr	r0, [pc, #60]	; (17844 <smp_send_pairing_confirm+0x9c>)
   17806:	1ad2      	subs	r2, r2, r3
   17808:	08d2      	lsrs	r2, r2, #3
   1780a:	0192      	lsls	r2, r2, #6
   1780c:	f042 0201 	orr.w	r2, r2, #1
   17810:	4621      	mov	r1, r4
   17812:	f004 fcc2 	bl	1c19a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   17816:	2008      	movs	r0, #8
   17818:	e00b      	b.n	17832 <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   1781a:	2400      	movs	r4, #0
   1781c:	e7d4      	b.n	177c8 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   1781e:	4602      	mov	r2, r0
   17820:	4631      	mov	r1, r6
   17822:	4628      	mov	r0, r5
   17824:	f007 fc18 	bl	1f058 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   17828:	1d28      	adds	r0, r5, #4
   1782a:	4621      	mov	r1, r4
   1782c:	f007 fbe9 	bl	1f002 <atomic_clear_bit>
	return 0;
   17830:	4620      	mov	r0, r4
}
   17832:	b002      	add	sp, #8
   17834:	bd70      	pop	{r4, r5, r6, pc}
   17836:	bf00      	nop
   17838:	20001eec 	.word	0x20001eec
   1783c:	000208c4 	.word	0x000208c4
   17840:	00020854 	.word	0x00020854
   17844:	00022aca 	.word	0x00022aca

00017848 <smp_public_key_slave>:
{
   17848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1784c:	1d06      	adds	r6, r0, #4
{
   1784e:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   17850:	210e      	movs	r1, #14
   17852:	4630      	mov	r0, r6
   17854:	f007 fca0 	bl	1f198 <atomic_test_bit>
   17858:	b998      	cbnz	r0, 17882 <smp_public_key_slave+0x3a>
	    memcmp(smp->pkey, sc_public_key, 32) == 0) {
   1785a:	4b4e      	ldr	r3, [pc, #312]	; (17994 <smp_public_key_slave+0x14c>)
   1785c:	2220      	movs	r2, #32
   1785e:	6819      	ldr	r1, [r3, #0]
   17860:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17864:	f005 ff98 	bl	1d798 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   17868:	b958      	cbnz	r0, 17882 <smp_public_key_slave+0x3a>
   1786a:	494b      	ldr	r1, [pc, #300]	; (17998 <smp_public_key_slave+0x150>)
   1786c:	4b4b      	ldr	r3, [pc, #300]	; (1799c <smp_public_key_slave+0x154>)
		BT_WARN("Remote public key rejected");
   1786e:	484c      	ldr	r0, [pc, #304]	; (179a0 <smp_public_key_slave+0x158>)
   17870:	1ac9      	subs	r1, r1, r3
   17872:	08c9      	lsrs	r1, r1, #3
   17874:	0189      	lsls	r1, r1, #6
   17876:	f041 0102 	orr.w	r1, r1, #2
   1787a:	f004 fc81 	bl	1c180 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1787e:	2008      	movs	r0, #8
   17880:	e02e      	b.n	178e0 <smp_public_key_slave+0x98>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   17882:	210c      	movs	r1, #12
   17884:	4620      	mov	r0, r4
   17886:	f007 fcb1 	bl	1f1ec <smp_create_pdu.isra.0>
	if (!req_buf) {
   1788a:	4605      	mov	r5, r0
   1788c:	2800      	cmp	r0, #0
   1788e:	d0f6      	beq.n	1787e <smp_public_key_slave+0x36>
   17890:	2140      	movs	r1, #64	; 0x40
   17892:	3008      	adds	r0, #8
   17894:	f008 f87f 	bl	1f996 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   17898:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 17994 <smp_public_key_slave+0x14c>
   1789c:	2220      	movs	r2, #32
   1789e:	f8d8 1000 	ldr.w	r1, [r8]
   178a2:	4607      	mov	r7, r0
   178a4:	f005 ff88 	bl	1d7b8 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   178a8:	f8d8 1000 	ldr.w	r1, [r8]
   178ac:	2220      	movs	r2, #32
   178ae:	4411      	add	r1, r2
   178b0:	18b8      	adds	r0, r7, r2
   178b2:	f005 ff81 	bl	1d7b8 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   178b6:	4629      	mov	r1, r5
   178b8:	2200      	movs	r2, #0
   178ba:	4620      	mov	r0, r4
   178bc:	f007 fbcc 	bl	1f058 <smp_send.isra.0>
	switch (smp->method) {
   178c0:	7a21      	ldrb	r1, [r4, #8]
   178c2:	2905      	cmp	r1, #5
   178c4:	d859      	bhi.n	1797a <smp_public_key_slave+0x132>
   178c6:	e8df f001 	tbb	[pc, r1]
   178ca:	3803      	.short	0x3803
   178cc:	5658030d 	.word	0x5658030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   178d0:	2104      	movs	r1, #4
   178d2:	4620      	mov	r0, r4
   178d4:	f007 fb81 	bl	1efda <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   178d8:	f7ff ff66 	bl	177a8 <smp_send_pairing_confirm>
		if (err) {
   178dc:	2800      	cmp	r0, #0
   178de:	d03d      	beq.n	1795c <smp_public_key_slave+0x114>
}
   178e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   178e4:	2104      	movs	r1, #4
   178e6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   178ea:	f002 f9e1 	bl	19cb0 <bt_rand>
   178ee:	2800      	cmp	r0, #0
   178f0:	d1c5      	bne.n	1787e <smp_public_key_slave+0x36>
		smp->passkey %= 1000000;
   178f2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   178f6:	4a2b      	ldr	r2, [pc, #172]	; (179a4 <smp_public_key_slave+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
   178f8:	4d2b      	ldr	r5, [pc, #172]	; (179a8 <smp_public_key_slave+0x160>)
		smp->passkey %= 1000000;
   178fa:	fbb1 f3f2 	udiv	r3, r1, r2
   178fe:	fb02 1313 	mls	r3, r2, r3, r1
   17902:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   17906:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   17908:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1790c:	b163      	cbz	r3, 17928 <smp_public_key_slave+0xe0>
   1790e:	681b      	ldr	r3, [r3, #0]
   17910:	b153      	cbz	r3, 17928 <smp_public_key_slave+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   17912:	210b      	movs	r1, #11
   17914:	4630      	mov	r0, r6
   17916:	f007 fb60 	bl	1efda <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1791a:	682b      	ldr	r3, [r5, #0]
   1791c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   17920:	681b      	ldr	r3, [r3, #0]
   17922:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   17926:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   17928:	2103      	movs	r1, #3
   1792a:	4620      	mov	r0, r4
   1792c:	f007 fb55 	bl	1efda <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   17930:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17932:	4620      	mov	r0, r4
   17934:	f007 fb51 	bl	1efda <atomic_set_bit>
		break;
   17938:	e010      	b.n	1795c <smp_public_key_slave+0x114>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1793a:	4620      	mov	r0, r4
   1793c:	2103      	movs	r1, #3
   1793e:	f007 fb4c 	bl	1efda <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   17942:	210e      	movs	r1, #14
   17944:	f007 fb49 	bl	1efda <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17948:	4630      	mov	r0, r6
   1794a:	210a      	movs	r1, #10
   1794c:	f007 fb45 	bl	1efda <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   17950:	4b15      	ldr	r3, [pc, #84]	; (179a8 <smp_public_key_slave+0x160>)
   17952:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   17956:	681b      	ldr	r3, [r3, #0]
   17958:	685b      	ldr	r3, [r3, #4]
   1795a:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1795c:	4630      	mov	r0, r6
   1795e:	2107      	movs	r1, #7
   17960:	f007 fb3b 	bl	1efda <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   17964:	2008      	movs	r0, #8
   17966:	f7ff fdf5 	bl	17554 <smp_find>
   1796a:	b988      	cbnz	r0, 17990 <smp_public_key_slave+0x148>
		return smp_dhkey_generate(smp);
   1796c:	4620      	mov	r0, r4
}
   1796e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   17972:	f7ff bd4f 	b.w	17414 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17976:	2104      	movs	r1, #4
   17978:	e7db      	b.n	17932 <smp_public_key_slave+0xea>
   1797a:	4b08      	ldr	r3, [pc, #32]	; (1799c <smp_public_key_slave+0x154>)
   1797c:	4a06      	ldr	r2, [pc, #24]	; (17998 <smp_public_key_slave+0x150>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1797e:	480b      	ldr	r0, [pc, #44]	; (179ac <smp_public_key_slave+0x164>)
   17980:	1ad2      	subs	r2, r2, r3
   17982:	08d2      	lsrs	r2, r2, #3
   17984:	0192      	lsls	r2, r2, #6
   17986:	f042 0201 	orr.w	r2, r2, #1
   1798a:	f004 fc06 	bl	1c19a <log_1>
   1798e:	e776      	b.n	1787e <smp_public_key_slave+0x36>
	return 0;
   17990:	2000      	movs	r0, #0
   17992:	e7a5      	b.n	178e0 <smp_public_key_slave+0x98>
   17994:	20001eec 	.word	0x20001eec
   17998:	000208c4 	.word	0x000208c4
   1799c:	00020854 	.word	0x00020854
   179a0:	00022b42 	.word	0x00022b42
   179a4:	000f4240 	.word	0x000f4240
   179a8:	20001e58 	.word	0x20001e58
   179ac:	00022aca 	.word	0x00022aca

000179b0 <smp_public_key>:
{
   179b0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   179b2:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   179b4:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   179b8:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
   179ba:	2220      	movs	r2, #32
   179bc:	4631      	mov	r1, r6
   179be:	4628      	mov	r0, r5
   179c0:	f005 fefa 	bl	1d7b8 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   179c4:	2220      	movs	r2, #32
   179c6:	18b1      	adds	r1, r6, r2
   179c8:	f104 0077 	add.w	r0, r4, #119	; 0x77
   179cc:	f005 fef4 	bl	1d7b8 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   179d0:	4628      	mov	r0, r5
   179d2:	f7fc fdf7 	bl	145c4 <bt_pub_key_is_debug>
   179d6:	b940      	cbnz	r0, 179ea <smp_public_key+0x3a>
	if (!sc_public_key) {
   179d8:	4b1a      	ldr	r3, [pc, #104]	; (17a44 <smp_public_key+0x94>)
   179da:	681d      	ldr	r5, [r3, #0]
   179dc:	bb6d      	cbnz	r5, 17a3a <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   179de:	1d20      	adds	r0, r4, #4
   179e0:	2106      	movs	r1, #6
   179e2:	f007 fafa 	bl	1efda <atomic_set_bit>
		return 0;
   179e6:	4628      	mov	r0, r5
   179e8:	e026      	b.n	17a38 <smp_public_key+0x88>
   179ea:	4b17      	ldr	r3, [pc, #92]	; (17a48 <smp_public_key+0x98>)
   179ec:	4917      	ldr	r1, [pc, #92]	; (17a4c <smp_public_key+0x9c>)
		BT_INFO("Remote is using Debug Public key");
   179ee:	4818      	ldr	r0, [pc, #96]	; (17a50 <smp_public_key+0xa0>)
   179f0:	1ac9      	subs	r1, r1, r3
   179f2:	08c9      	lsrs	r1, r1, #3
   179f4:	0189      	lsls	r1, r1, #6
   179f6:	f041 0103 	orr.w	r1, r1, #3
   179fa:	f004 fbc1 	bl	1c180 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   179fe:	210e      	movs	r1, #14
   17a00:	1d20      	adds	r0, r4, #4
   17a02:	f007 faea 	bl	1efda <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   17a06:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   17a0a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   17a0e:	b933      	cbnz	r3, 17a1e <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17a10:	7a28      	ldrb	r0, [r5, #8]
   17a12:	f105 0188 	add.w	r1, r5, #136	; 0x88
   17a16:	f001 f8b3 	bl	18b80 <bt_keys_get_addr>
   17a1a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   17a1e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   17a22:	2b00      	cmp	r3, #0
   17a24:	d0d8      	beq.n	179d8 <smp_public_key+0x28>
   17a26:	89da      	ldrh	r2, [r3, #14]
   17a28:	f002 0224 	and.w	r2, r2, #36	; 0x24
   17a2c:	2a00      	cmp	r2, #0
   17a2e:	d0d3      	beq.n	179d8 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   17a30:	7b5b      	ldrb	r3, [r3, #13]
   17a32:	079b      	lsls	r3, r3, #30
   17a34:	d4d0      	bmi.n	179d8 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   17a36:	2003      	movs	r0, #3
}
   17a38:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
   17a3a:	4620      	mov	r0, r4
}
   17a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
   17a40:	f7ff bf02 	b.w	17848 <smp_public_key_slave>
   17a44:	20001eec 	.word	0x20001eec
   17a48:	00020854 	.word	0x00020854
   17a4c:	000208c4 	.word	0x000208c4
   17a50:	00022b5d 	.word	0x00022b5d

00017a54 <smp_pairing_req>:
{
   17a54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   17a58:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   17a5a:	78eb      	ldrb	r3, [r5, #3]
   17a5c:	3b07      	subs	r3, #7
   17a5e:	2b09      	cmp	r3, #9
{
   17a60:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   17a62:	d904      	bls.n	17a6e <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   17a64:	2506      	movs	r5, #6
}
   17a66:	4628      	mov	r0, r5
   17a68:	b002      	add	sp, #8
   17a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   17a6e:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   17a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   17a76:	b15b      	cbz	r3, 17a90 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   17a78:	1d26      	adds	r6, r4, #4
   17a7a:	210f      	movs	r1, #15
   17a7c:	4630      	mov	r0, r6
   17a7e:	f007 fb8b 	bl	1f198 <atomic_test_bit>
   17a82:	b980      	cbnz	r0, 17aa6 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   17a84:	4620      	mov	r0, r4
   17a86:	f7ff fd49 	bl	1751c <smp_init>
		if (ret) {
   17a8a:	b160      	cbz	r0, 17aa6 <smp_pairing_req+0x52>
			return ret;
   17a8c:	b2c5      	uxtb	r5, r0
   17a8e:	e7ea      	b.n	17a66 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17a90:	7a38      	ldrb	r0, [r7, #8]
   17a92:	f107 0188 	add.w	r1, r7, #136	; 0x88
   17a96:	f001 f873 	bl	18b80 <bt_keys_get_addr>
   17a9a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   17a9e:	2800      	cmp	r0, #0
   17aa0:	d1ea      	bne.n	17a78 <smp_pairing_req+0x24>
	switch (sec) {
   17aa2:	2508      	movs	r5, #8
   17aa4:	e7df      	b.n	17a66 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   17aa6:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   17aa8:	2206      	movs	r2, #6
   17aaa:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   17aac:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   17aae:	f104 000a 	add.w	r0, r4, #10
   17ab2:	f005 fe81 	bl	1d7b8 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   17ab6:	2302      	movs	r3, #2
   17ab8:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   17aba:	78a8      	ldrb	r0, [r5, #2]
   17abc:	f7ff fcd0 	bl	17460 <get_auth.isra.0>
   17ac0:	74e0      	strb	r0, [r4, #19]
   17ac2:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   17ac4:	f7ff fc80 	bl	173c8 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   17ac8:	4ba4      	ldr	r3, [pc, #656]	; (17d5c <smp_pairing_req+0x308>)
	rsp->io_capability = get_io_capa();
   17aca:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   17acc:	781b      	ldrb	r3, [r3, #0]
   17ace:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   17ad0:	2310      	movs	r3, #16
   17ad2:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   17ad4:	792b      	ldrb	r3, [r5, #4]
   17ad6:	f003 0303 	and.w	r3, r3, #3
   17ada:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   17adc:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   17ade:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   17ae2:	f003 0301 	and.w	r3, r3, #1
   17ae6:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   17ae8:	d00c      	beq.n	17b04 <smp_pairing_req+0xb0>
   17aea:	78ab      	ldrb	r3, [r5, #2]
   17aec:	0719      	lsls	r1, r3, #28
   17aee:	d509      	bpl.n	17b04 <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   17af0:	2105      	movs	r1, #5
   17af2:	4630      	mov	r0, r6
   17af4:	f007 fa71 	bl	1efda <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   17af8:	7d63      	ldrb	r3, [r4, #21]
   17afa:	f003 0302 	and.w	r3, r3, #2
   17afe:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   17b00:	2300      	movs	r3, #0
   17b02:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   17b04:	7ce3      	ldrb	r3, [r4, #19]
   17b06:	069a      	lsls	r2, r3, #26
   17b08:	d506      	bpl.n	17b18 <smp_pairing_req+0xc4>
   17b0a:	78ab      	ldrb	r3, [r5, #2]
   17b0c:	069b      	lsls	r3, r3, #26
   17b0e:	d503      	bpl.n	17b18 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   17b10:	2114      	movs	r1, #20
   17b12:	4630      	mov	r0, r6
   17b14:	f007 fa61 	bl	1efda <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   17b18:	7da3      	ldrb	r3, [r4, #22]
   17b1a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   17b1e:	7d63      	ldrb	r3, [r4, #21]
   17b20:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   17b24:	7ce3      	ldrb	r3, [r4, #19]
   17b26:	07d8      	lsls	r0, r3, #31
   17b28:	d506      	bpl.n	17b38 <smp_pairing_req+0xe4>
   17b2a:	78ab      	ldrb	r3, [r5, #2]
   17b2c:	07d9      	lsls	r1, r3, #31
   17b2e:	d503      	bpl.n	17b38 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   17b30:	210d      	movs	r1, #13
   17b32:	4630      	mov	r0, r6
   17b34:	f007 fa51 	bl	1efda <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   17b38:	2103      	movs	r1, #3
   17b3a:	4630      	mov	r0, r6
   17b3c:	f007 fa4d 	bl	1efda <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17b40:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   17b42:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17b44:	f007 fb28 	bl	1f198 <atomic_test_bit>
   17b48:	bb28      	cbnz	r0, 17b96 <smp_pairing_req+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17b4a:	2d04      	cmp	r5, #4
   17b4c:	d81a      	bhi.n	17b84 <smp_pairing_req+0x130>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   17b4e:	7ca2      	ldrb	r2, [r4, #18]
   17b50:	7ae3      	ldrb	r3, [r4, #11]
   17b52:	4013      	ands	r3, r2
   17b54:	07da      	lsls	r2, r3, #31
   17b56:	d437      	bmi.n	17bc8 <smp_pairing_req+0x174>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   17b58:	7b20      	ldrb	r0, [r4, #12]
   17b5a:	7ce3      	ldrb	r3, [r4, #19]
   17b5c:	4318      	orrs	r0, r3
   17b5e:	f010 0004 	ands.w	r0, r0, #4
   17b62:	d00f      	beq.n	17b84 <smp_pairing_req+0x130>
	method = gen_method_legacy[remote_io][get_io_capa()];
   17b64:	f7ff fc30 	bl	173c8 <get_io_capa>
   17b68:	4b7d      	ldr	r3, [pc, #500]	; (17d60 <smp_pairing_req+0x30c>)
   17b6a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   17b6e:	441d      	add	r5, r3
   17b70:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   17b72:	2804      	cmp	r0, #4
   17b74:	d106      	bne.n	17b84 <smp_pairing_req+0x130>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   17b76:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   17b7a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   17b7c:	2b00      	cmp	r3, #0
   17b7e:	bf0c      	ite	eq
   17b80:	2002      	moveq	r0, #2
   17b82:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   17b84:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   17b86:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   17b8a:	4620      	mov	r0, r4
   17b8c:	f007 fb0d 	bl	1f1aa <update_keys_check>
   17b90:	bb00      	cbnz	r0, 17bd4 <smp_pairing_req+0x180>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   17b92:	2503      	movs	r5, #3
   17b94:	e767      	b.n	17a66 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   17b96:	7b20      	ldrb	r0, [r4, #12]
   17b98:	7ce2      	ldrb	r2, [r4, #19]
   17b9a:	ea00 0302 	and.w	r3, r0, r2
   17b9e:	071b      	lsls	r3, r3, #28
   17ba0:	d504      	bpl.n	17bac <smp_pairing_req+0x158>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   17ba2:	7ca1      	ldrb	r1, [r4, #18]
   17ba4:	7ae3      	ldrb	r3, [r4, #11]
   17ba6:	430b      	orrs	r3, r1
   17ba8:	07d9      	lsls	r1, r3, #31
   17baa:	d40f      	bmi.n	17bcc <smp_pairing_req+0x178>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17bac:	2d04      	cmp	r5, #4
   17bae:	d80f      	bhi.n	17bd0 <smp_pairing_req+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   17bb0:	4310      	orrs	r0, r2
   17bb2:	f010 0004 	ands.w	r0, r0, #4
   17bb6:	d0e5      	beq.n	17b84 <smp_pairing_req+0x130>
	return gen_method_sc[remote_io][get_io_capa()];
   17bb8:	f7ff fc06 	bl	173c8 <get_io_capa>
   17bbc:	4b69      	ldr	r3, [pc, #420]	; (17d64 <smp_pairing_req+0x310>)
   17bbe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   17bc2:	441d      	add	r5, r3
   17bc4:	5c28      	ldrb	r0, [r5, r0]
   17bc6:	e7dd      	b.n	17b84 <smp_pairing_req+0x130>
		return LEGACY_OOB;
   17bc8:	2006      	movs	r0, #6
   17bca:	e7db      	b.n	17b84 <smp_pairing_req+0x130>
			return LE_SC_OOB;
   17bcc:	2005      	movs	r0, #5
   17bce:	e7d9      	b.n	17b84 <smp_pairing_req+0x130>
		return JUST_WORKS;
   17bd0:	2000      	movs	r0, #0
   17bd2:	e7d7      	b.n	17b84 <smp_pairing_req+0x130>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   17bd4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   17bd8:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   17bda:	2b03      	cmp	r3, #3
   17bdc:	d034      	beq.n	17c48 <smp_pairing_req+0x1f4>
   17bde:	d822      	bhi.n	17c26 <smp_pairing_req+0x1d2>
   17be0:	3b01      	subs	r3, #1
   17be2:	2b01      	cmp	r3, #1
   17be4:	f63f af5d 	bhi.w	17aa2 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17be8:	2105      	movs	r1, #5
   17bea:	4630      	mov	r0, r6
   17bec:	f007 fad4 	bl	1f198 <atomic_test_bit>
   17bf0:	2800      	cmp	r0, #0
   17bf2:	f040 80c5 	bne.w	17d80 <smp_pairing_req+0x32c>
	struct bt_conn *conn = smp->chan.chan.conn;
   17bf6:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   17bfa:	f105 0188 	add.w	r1, r5, #136	; 0x88
   17bfe:	7a28      	ldrb	r0, [r5, #8]
   17c00:	f001 f844 	bl	18c8c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   17c04:	7a21      	ldrb	r1, [r4, #8]
   17c06:	b318      	cbz	r0, 17c50 <smp_pairing_req+0x1fc>
   17c08:	7b43      	ldrb	r3, [r0, #13]
   17c0a:	07db      	lsls	r3, r3, #31
   17c0c:	d520      	bpl.n	17c50 <smp_pairing_req+0x1fc>
   17c0e:	b9f9      	cbnz	r1, 17c50 <smp_pairing_req+0x1fc>
   17c10:	4b55      	ldr	r3, [pc, #340]	; (17d68 <smp_pairing_req+0x314>)
   17c12:	4956      	ldr	r1, [pc, #344]	; (17d6c <smp_pairing_req+0x318>)
		BT_ERR("JustWorks failed, authenticated keys present");
   17c14:	4856      	ldr	r0, [pc, #344]	; (17d70 <smp_pairing_req+0x31c>)
   17c16:	1ac9      	subs	r1, r1, r3
   17c18:	08c9      	lsrs	r1, r1, #3
   17c1a:	0189      	lsls	r1, r1, #6
   17c1c:	f041 0101 	orr.w	r1, r1, #1
   17c20:	f004 faae 	bl	1c180 <log_0>
	if (ret) {
   17c24:	e73d      	b.n	17aa2 <smp_pairing_req+0x4e>
	switch (sec) {
   17c26:	2b04      	cmp	r3, #4
   17c28:	f47f af3b 	bne.w	17aa2 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   17c2c:	7d23      	ldrb	r3, [r4, #20]
   17c2e:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   17c30:	4293      	cmp	r3, r2
   17c32:	bf28      	it	cs
   17c34:	4613      	movcs	r3, r2
   17c36:	2b10      	cmp	r3, #16
   17c38:	f47f af14 	bne.w	17a64 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17c3c:	2105      	movs	r1, #5
   17c3e:	4630      	mov	r0, r6
   17c40:	f007 faaa 	bl	1f198 <atomic_test_bit>
   17c44:	2800      	cmp	r0, #0
   17c46:	d0a4      	beq.n	17b92 <smp_pairing_req+0x13e>
		if (smp->method == JUST_WORKS) {
   17c48:	7a23      	ldrb	r3, [r4, #8]
   17c4a:	2b00      	cmp	r3, #0
   17c4c:	d1cc      	bne.n	17be8 <smp_pairing_req+0x194>
   17c4e:	e7a0      	b.n	17b92 <smp_pairing_req+0x13e>
	switch (smp->method) {
   17c50:	2906      	cmp	r1, #6
   17c52:	d869      	bhi.n	17d28 <smp_pairing_req+0x2d4>
   17c54:	e8df f001 	tbb	[pc, r1]
   17c58:	68335e1b 	.word	0x68335e1b
   17c5c:	6868      	.short	0x6868
   17c5e:	04          	.byte	0x04
   17c5f:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   17c60:	4d44      	ldr	r5, [pc, #272]	; (17d74 <smp_pairing_req+0x320>)
   17c62:	682b      	ldr	r3, [r5, #0]
   17c64:	2b00      	cmp	r3, #0
   17c66:	d06a      	beq.n	17d3e <smp_pairing_req+0x2ea>
   17c68:	68db      	ldr	r3, [r3, #12]
   17c6a:	2b00      	cmp	r3, #0
   17c6c:	d067      	beq.n	17d3e <smp_pairing_req+0x2ea>
			struct bt_conn_oob_info info = {
   17c6e:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17c70:	210a      	movs	r1, #10
   17c72:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   17c74:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17c78:	f007 f9af 	bl	1efda <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   17c7c:	682b      	ldr	r3, [r5, #0]
   17c7e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   17c82:	68db      	ldr	r3, [r3, #12]
   17c84:	a901      	add	r1, sp, #4
   17c86:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17c88:	7a23      	ldrb	r3, [r4, #8]
   17c8a:	2b00      	cmp	r3, #0
   17c8c:	d159      	bne.n	17d42 <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17c8e:	210f      	movs	r1, #15
   17c90:	4630      	mov	r0, r6
   17c92:	f007 fa81 	bl	1f198 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17c96:	4605      	mov	r5, r0
   17c98:	2800      	cmp	r0, #0
   17c9a:	d152      	bne.n	17d42 <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17c9c:	4f35      	ldr	r7, [pc, #212]	; (17d74 <smp_pairing_req+0x320>)
   17c9e:	683b      	ldr	r3, [r7, #0]
   17ca0:	2b00      	cmp	r3, #0
   17ca2:	d04e      	beq.n	17d42 <smp_pairing_req+0x2ee>
	    bt_auth && bt_auth->pairing_confirm) {
   17ca4:	695b      	ldr	r3, [r3, #20]
   17ca6:	2b00      	cmp	r3, #0
   17ca8:	d04b      	beq.n	17d42 <smp_pairing_req+0x2ee>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17caa:	4630      	mov	r0, r6
   17cac:	210a      	movs	r1, #10
   17cae:	f007 f994 	bl	1efda <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   17cb2:	683b      	ldr	r3, [r7, #0]
   17cb4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   17cb8:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   17cba:	4798      	blx	r3
		return 0;
   17cbc:	e6d3      	b.n	17a66 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   17cbe:	2104      	movs	r1, #4
   17cc0:	eb0d 0001 	add.w	r0, sp, r1
   17cc4:	f001 fff4 	bl	19cb0 <bt_rand>
   17cc8:	2800      	cmp	r0, #0
   17cca:	f47f aeea 	bne.w	17aa2 <smp_pairing_req+0x4e>
			passkey %= 1000000;
   17cce:	9901      	ldr	r1, [sp, #4]
   17cd0:	4a29      	ldr	r2, [pc, #164]	; (17d78 <smp_pairing_req+0x324>)
		if (bt_auth && bt_auth->passkey_display) {
   17cd2:	4f28      	ldr	r7, [pc, #160]	; (17d74 <smp_pairing_req+0x320>)
			passkey %= 1000000;
   17cd4:	fbb1 f3f2 	udiv	r3, r1, r2
   17cd8:	fb02 1313 	mls	r3, r2, r3, r1
   17cdc:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   17cde:	683b      	ldr	r3, [r7, #0]
   17ce0:	b153      	cbz	r3, 17cf8 <smp_pairing_req+0x2a4>
   17ce2:	681b      	ldr	r3, [r3, #0]
   17ce4:	b143      	cbz	r3, 17cf8 <smp_pairing_req+0x2a4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   17ce6:	210b      	movs	r1, #11
   17ce8:	4630      	mov	r0, r6
   17cea:	f007 f976 	bl	1efda <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   17cee:	683b      	ldr	r3, [r7, #0]
   17cf0:	9901      	ldr	r1, [sp, #4]
   17cf2:	681b      	ldr	r3, [r3, #0]
   17cf4:	4628      	mov	r0, r5
   17cf6:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   17cf8:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   17cfa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   17cfe:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   17d02:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   17d04:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   17d08:	0a1b      	lsrs	r3, r3, #8
   17d0a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   17d0e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   17d12:	e7b9      	b.n	17c88 <smp_pairing_req+0x234>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17d14:	4630      	mov	r0, r6
   17d16:	210a      	movs	r1, #10
   17d18:	f007 f95f 	bl	1efda <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   17d1c:	4b15      	ldr	r3, [pc, #84]	; (17d74 <smp_pairing_req+0x320>)
   17d1e:	681b      	ldr	r3, [r3, #0]
   17d20:	4628      	mov	r0, r5
   17d22:	685b      	ldr	r3, [r3, #4]
   17d24:	4798      	blx	r3
	if (ret) {
   17d26:	e7af      	b.n	17c88 <smp_pairing_req+0x234>
   17d28:	4b0f      	ldr	r3, [pc, #60]	; (17d68 <smp_pairing_req+0x314>)
   17d2a:	4a10      	ldr	r2, [pc, #64]	; (17d6c <smp_pairing_req+0x318>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   17d2c:	4813      	ldr	r0, [pc, #76]	; (17d7c <smp_pairing_req+0x328>)
   17d2e:	1ad2      	subs	r2, r2, r3
   17d30:	08d2      	lsrs	r2, r2, #3
   17d32:	0192      	lsls	r2, r2, #6
   17d34:	f042 0201 	orr.w	r2, r2, #1
   17d38:	f004 fa2f 	bl	1c19a <log_1>
	if (ret) {
   17d3c:	e6b1      	b.n	17aa2 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   17d3e:	2502      	movs	r5, #2
   17d40:	e691      	b.n	17a66 <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   17d42:	2103      	movs	r1, #3
   17d44:	4620      	mov	r0, r4
   17d46:	f007 f948 	bl	1efda <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   17d4a:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   17d4c:	4620      	mov	r0, r4
   17d4e:	f007 f944 	bl	1efda <atomic_set_bit>
	return send_pairing_rsp(smp);
   17d52:	f007 fa83 	bl	1f25c <send_pairing_rsp>
   17d56:	4605      	mov	r5, r0
   17d58:	e685      	b.n	17a66 <smp_pairing_req+0x12>
   17d5a:	bf00      	nop
   17d5c:	20002195 	.word	0x20002195
   17d60:	00022d7e 	.word	0x00022d7e
   17d64:	00022d97 	.word	0x00022d97
   17d68:	00020854 	.word	0x00020854
   17d6c:	000208c4 	.word	0x000208c4
   17d70:	00022b7e 	.word	0x00022b7e
   17d74:	20001e58 	.word	0x20001e58
   17d78:	000f4240 	.word	0x000f4240
   17d7c:	00022aca 	.word	0x00022aca
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17d80:	7a25      	ldrb	r5, [r4, #8]
   17d82:	b9a5      	cbnz	r5, 17dae <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17d84:	210f      	movs	r1, #15
   17d86:	4630      	mov	r0, r6
   17d88:	f007 fa06 	bl	1f198 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17d8c:	b978      	cbnz	r0, 17dae <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17d8e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 17db4 <smp_pairing_req+0x360>
   17d92:	f8d8 3000 	ldr.w	r3, [r8]
   17d96:	b153      	cbz	r3, 17dae <smp_pairing_req+0x35a>
	    bt_auth && bt_auth->pairing_confirm) {
   17d98:	695b      	ldr	r3, [r3, #20]
   17d9a:	b143      	cbz	r3, 17dae <smp_pairing_req+0x35a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17d9c:	4630      	mov	r0, r6
   17d9e:	210a      	movs	r1, #10
   17da0:	f007 f91b 	bl	1efda <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   17da4:	f8d8 3000 	ldr.w	r3, [r8]
   17da8:	4638      	mov	r0, r7
   17daa:	695b      	ldr	r3, [r3, #20]
   17dac:	e785      	b.n	17cba <smp_pairing_req+0x266>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   17dae:	210c      	movs	r1, #12
   17db0:	e7cc      	b.n	17d4c <smp_pairing_req+0x2f8>
   17db2:	bf00      	nop
   17db4:	20001e58 	.word	0x20001e58

00017db8 <smp_ident_info>:
{
   17db8:	b570      	push	{r4, r5, r6, lr}
   17dba:	460b      	mov	r3, r1
   17dbc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17dbe:	210d      	movs	r1, #13
   17dc0:	3004      	adds	r0, #4
   17dc2:	f007 f9e9 	bl	1f198 <atomic_test_bit>
   17dc6:	b310      	cbz	r0, 17e0e <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   17dc8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   17dca:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   17dce:	f103 0588 	add.w	r5, r3, #136	; 0x88
   17dd2:	7a19      	ldrb	r1, [r3, #8]
   17dd4:	462a      	mov	r2, r5
   17dd6:	2002      	movs	r0, #2
   17dd8:	f007 fd64 	bl	1f8a4 <bt_keys_get_type>
		if (!keys) {
   17ddc:	b990      	cbnz	r0, 17e04 <smp_ident_info+0x4c>
   17dde:	4a0f      	ldr	r2, [pc, #60]	; (17e1c <smp_ident_info+0x64>)
   17de0:	4c0f      	ldr	r4, [pc, #60]	; (17e20 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   17de2:	4628      	mov	r0, r5
   17de4:	1aa4      	subs	r4, r4, r2
   17de6:	f7fa f839 	bl	11e5c <bt_addr_le_str_real>
   17dea:	f7f8 fbb7 	bl	1055c <z_log_strdup>
   17dee:	08e4      	lsrs	r4, r4, #3
   17df0:	01a4      	lsls	r4, r4, #6
   17df2:	f044 0401 	orr.w	r4, r4, #1
   17df6:	4601      	mov	r1, r0
   17df8:	4622      	mov	r2, r4
   17dfa:	480a      	ldr	r0, [pc, #40]	; (17e24 <smp_ident_info+0x6c>)
   17dfc:	f004 f9cd 	bl	1c19a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   17e00:	2008      	movs	r0, #8
}
   17e02:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   17e04:	2210      	movs	r2, #16
   17e06:	4631      	mov	r1, r6
   17e08:	302a      	adds	r0, #42	; 0x2a
   17e0a:	f005 fcd5 	bl	1d7b8 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   17e0e:	4620      	mov	r0, r4
   17e10:	2109      	movs	r1, #9
   17e12:	f007 f8e2 	bl	1efda <atomic_set_bit>
	return 0;
   17e16:	2000      	movs	r0, #0
   17e18:	e7f3      	b.n	17e02 <smp_ident_info+0x4a>
   17e1a:	bf00      	nop
   17e1c:	00020854 	.word	0x00020854
   17e20:	000208c4 	.word	0x000208c4
   17e24:	00022bab 	.word	0x00022bab

00017e28 <smp_encrypt_info>:
{
   17e28:	b570      	push	{r4, r5, r6, lr}
   17e2a:	460b      	mov	r3, r1
   17e2c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17e2e:	210d      	movs	r1, #13
   17e30:	3004      	adds	r0, #4
   17e32:	f007 f9b1 	bl	1f198 <atomic_test_bit>
   17e36:	b310      	cbz	r0, 17e7e <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   17e38:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   17e3a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   17e3e:	f103 0588 	add.w	r5, r3, #136	; 0x88
   17e42:	7a19      	ldrb	r1, [r3, #8]
   17e44:	462a      	mov	r2, r5
   17e46:	2004      	movs	r0, #4
   17e48:	f007 fd2c 	bl	1f8a4 <bt_keys_get_type>
		if (!keys) {
   17e4c:	b990      	cbnz	r0, 17e74 <smp_encrypt_info+0x4c>
   17e4e:	4a0f      	ldr	r2, [pc, #60]	; (17e8c <smp_encrypt_info+0x64>)
   17e50:	4c0f      	ldr	r4, [pc, #60]	; (17e90 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   17e52:	4628      	mov	r0, r5
   17e54:	1aa4      	subs	r4, r4, r2
   17e56:	f7fa f801 	bl	11e5c <bt_addr_le_str_real>
   17e5a:	f7f8 fb7f 	bl	1055c <z_log_strdup>
   17e5e:	08e4      	lsrs	r4, r4, #3
   17e60:	01a4      	lsls	r4, r4, #6
   17e62:	f044 0401 	orr.w	r4, r4, #1
   17e66:	4601      	mov	r1, r0
   17e68:	4622      	mov	r2, r4
   17e6a:	480a      	ldr	r0, [pc, #40]	; (17e94 <smp_encrypt_info+0x6c>)
   17e6c:	f004 f995 	bl	1c19a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   17e70:	2008      	movs	r0, #8
}
   17e72:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   17e74:	2210      	movs	r2, #16
   17e76:	4631      	mov	r1, r6
   17e78:	301a      	adds	r0, #26
   17e7a:	f005 fc9d 	bl	1d7b8 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   17e7e:	4620      	mov	r0, r4
   17e80:	2107      	movs	r1, #7
   17e82:	f007 f8aa 	bl	1efda <atomic_set_bit>
	return 0;
   17e86:	2000      	movs	r0, #0
   17e88:	e7f3      	b.n	17e72 <smp_encrypt_info+0x4a>
   17e8a:	bf00      	nop
   17e8c:	00020854 	.word	0x00020854
   17e90:	000208c4 	.word	0x000208c4
   17e94:	00022bab 	.word	0x00022bab

00017e98 <bt_smp_connected>:
{
   17e98:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   17e9a:	4905      	ldr	r1, [pc, #20]	; (17eb0 <bt_smp_connected+0x18>)
   17e9c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   17ea0:	30e8      	adds	r0, #232	; 0xe8
   17ea2:	f008 f867 	bl	1ff74 <k_work_init_delayable>
	smp_reset(smp);
   17ea6:	4620      	mov	r0, r4
}
   17ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   17eac:	f007 ba30 	b.w	1f310 <smp_reset>
   17eb0:	00018a01 	.word	0x00018a01

00017eb4 <smp_pairing_confirm>:
{
   17eb4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   17eb6:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   17eb8:	1d05      	adds	r5, r0, #4
{
   17eba:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   17ebc:	210b      	movs	r1, #11
   17ebe:	4628      	mov	r0, r5
   17ec0:	f007 f89f 	bl	1f002 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   17ec4:	4631      	mov	r1, r6
   17ec6:	2210      	movs	r2, #16
   17ec8:	f104 0017 	add.w	r0, r4, #23
   17ecc:	f005 fc74 	bl	1d7b8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17ed0:	2105      	movs	r1, #5
   17ed2:	4628      	mov	r0, r5
   17ed4:	f007 f960 	bl	1f198 <atomic_test_bit>
   17ed8:	b920      	cbnz	r0, 17ee4 <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   17eda:	4620      	mov	r0, r4
}
   17edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   17ee0:	f007 ba94 	b.w	1f40c <legacy_pairing_confirm>
	switch (smp->method) {
   17ee4:	7a21      	ldrb	r1, [r4, #8]
   17ee6:	2901      	cmp	r1, #1
   17ee8:	d009      	beq.n	17efe <smp_pairing_confirm+0x4a>
   17eea:	2902      	cmp	r1, #2
   17eec:	d113      	bne.n	17f16 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17eee:	4620      	mov	r0, r4
   17ef0:	2104      	movs	r1, #4
   17ef2:	f007 f872 	bl	1efda <atomic_set_bit>
}
   17ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   17efa:	f7ff bc55 	b.w	177a8 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   17efe:	210a      	movs	r1, #10
   17f00:	4628      	mov	r0, r5
   17f02:	f007 f949 	bl	1f198 <atomic_test_bit>
   17f06:	2800      	cmp	r0, #0
   17f08:	d0f1      	beq.n	17eee <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   17f0a:	4628      	mov	r0, r5
   17f0c:	2100      	movs	r1, #0
   17f0e:	f007 f864 	bl	1efda <atomic_set_bit>
			return 0;
   17f12:	2000      	movs	r0, #0
}
   17f14:	bd70      	pop	{r4, r5, r6, pc}
   17f16:	4b06      	ldr	r3, [pc, #24]	; (17f30 <smp_pairing_confirm+0x7c>)
   17f18:	4a06      	ldr	r2, [pc, #24]	; (17f34 <smp_pairing_confirm+0x80>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   17f1a:	4807      	ldr	r0, [pc, #28]	; (17f38 <smp_pairing_confirm+0x84>)
   17f1c:	1ad2      	subs	r2, r2, r3
   17f1e:	08d2      	lsrs	r2, r2, #3
   17f20:	0192      	lsls	r2, r2, #6
   17f22:	f042 0201 	orr.w	r2, r2, #1
   17f26:	f004 f938 	bl	1c19a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   17f2a:	2008      	movs	r0, #8
   17f2c:	e7f2      	b.n	17f14 <smp_pairing_confirm+0x60>
   17f2e:	bf00      	nop
   17f30:	00020854 	.word	0x00020854
   17f34:	000208c4 	.word	0x000208c4
   17f38:	00022aca 	.word	0x00022aca

00017f3c <smp_pairing_random>:
{
   17f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f40:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   17f42:	f100 0737 	add.w	r7, r0, #55	; 0x37
   17f46:	6889      	ldr	r1, [r1, #8]
{
   17f48:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   17f4a:	2210      	movs	r2, #16
   17f4c:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17f4e:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   17f50:	f005 fc32 	bl	1d7b8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17f54:	2105      	movs	r1, #5
   17f56:	4630      	mov	r0, r6
   17f58:	f007 f91e 	bl	1f198 <atomic_test_bit>
   17f5c:	2800      	cmp	r0, #0
   17f5e:	d147      	bne.n	17ff0 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
   17f60:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17f64:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   17f68:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17f6c:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   17f6e:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17f70:	9201      	str	r2, [sp, #4]
   17f72:	9300      	str	r3, [sp, #0]
   17f74:	9502      	str	r5, [sp, #8]
   17f76:	f104 0310 	add.w	r3, r4, #16
   17f7a:	f104 0209 	add.w	r2, r4, #9
   17f7e:	4639      	mov	r1, r7
   17f80:	4640      	mov	r0, r8
   17f82:	f007 f9e8 	bl	1f356 <smp_c1>
	if (err) {
   17f86:	bb18      	cbnz	r0, 17fd0 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   17f88:	2210      	movs	r2, #16
   17f8a:	4629      	mov	r1, r5
   17f8c:	f104 0017 	add.w	r0, r4, #23
   17f90:	f005 fc02 	bl	1d798 <memcmp>
   17f94:	2800      	cmp	r0, #0
   17f96:	f040 8095 	bne.w	180c4 <smp_pairing_random+0x188>
	memcpy(out, r2, 8);
   17f9a:	2208      	movs	r2, #8
   17f9c:	4639      	mov	r1, r7
   17f9e:	4628      	mov	r0, r5
   17fa0:	f005 fc0a 	bl	1d7b8 <memcpy>
	memcpy(out + 8, r1, 8);
   17fa4:	2208      	movs	r2, #8
   17fa6:	f104 0127 	add.w	r1, r4, #39	; 0x27
   17faa:	a80c      	add	r0, sp, #48	; 0x30
   17fac:	f005 fc04 	bl	1d7b8 <memcpy>
	return bt_encrypt_le(k, out, out);
   17fb0:	462a      	mov	r2, r5
   17fb2:	4629      	mov	r1, r5
   17fb4:	4640      	mov	r0, r8
   17fb6:	f007 fd33 	bl	1fa20 <bt_encrypt_le>
		if (err) {
   17fba:	b158      	cbz	r0, 17fd4 <smp_pairing_random+0x98>
   17fbc:	4973      	ldr	r1, [pc, #460]	; (1818c <smp_pairing_random+0x250>)
   17fbe:	4b74      	ldr	r3, [pc, #464]	; (18190 <smp_pairing_random+0x254>)
			BT_ERR("Calculate STK failed");
   17fc0:	4874      	ldr	r0, [pc, #464]	; (18194 <smp_pairing_random+0x258>)
   17fc2:	1ac9      	subs	r1, r1, r3
   17fc4:	08c9      	lsrs	r1, r1, #3
   17fc6:	0189      	lsls	r1, r1, #6
   17fc8:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   17fcc:	f004 f8d8 	bl	1c180 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   17fd0:	2508      	movs	r5, #8
   17fd2:	e078      	b.n	180c6 <smp_pairing_random+0x18a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   17fd4:	4629      	mov	r1, r5
   17fd6:	2210      	movs	r2, #16
   17fd8:	4640      	mov	r0, r8
   17fda:	f005 fbed 	bl	1d7b8 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17fde:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17fe0:	4630      	mov	r0, r6
   17fe2:	f006 fffa 	bl	1efda <atomic_set_bit>
	return smp_send_pairing_random(smp);
   17fe6:	4620      	mov	r0, r4
   17fe8:	f007 f91f 	bl	1f22a <smp_send_pairing_random>
   17fec:	4605      	mov	r5, r0
   17fee:	e06a      	b.n	180c6 <smp_pairing_random+0x18a>
	switch (smp->method) {
   17ff0:	7a21      	ldrb	r1, [r4, #8]
   17ff2:	2905      	cmp	r1, #5
   17ff4:	f200 80a9 	bhi.w	1814a <smp_pairing_random+0x20e>
   17ff8:	e8df f001 	tbb	[pc, r1]
   17ffc:	0341413b 	.word	0x0341413b
   18000:	8ba7      	.short	0x8ba7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   18002:	4b65      	ldr	r3, [pc, #404]	; (18198 <smp_pairing_random+0x25c>)
   18004:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   18006:	2220      	movs	r2, #32
   18008:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1800c:	a80a      	add	r0, sp, #40	; 0x28
   1800e:	f006 ffd8 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   18012:	2220      	movs	r2, #32
   18014:	4629      	mov	r1, r5
   18016:	a812      	add	r0, sp, #72	; 0x48
   18018:	f006 ffd3 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1801c:	2210      	movs	r2, #16
   1801e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   18022:	a81a      	add	r0, sp, #104	; 0x68
   18024:	f006 ffcd 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   18028:	2210      	movs	r2, #16
   1802a:	4639      	mov	r1, r7
   1802c:	a806      	add	r0, sp, #24
   1802e:	f006 ffc8 	bl	1efc2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   18032:	ab06      	add	r3, sp, #24
   18034:	2250      	movs	r2, #80	; 0x50
   18036:	a90a      	add	r1, sp, #40	; 0x28
   18038:	4618      	mov	r0, r3
   1803a:	f006 fff1 	bl	1f020 <bt_smp_aes_cmac>
	if (err) {
   1803e:	2800      	cmp	r0, #0
   18040:	d1c6      	bne.n	17fd0 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
   18042:	2204      	movs	r2, #4
   18044:	a909      	add	r1, sp, #36	; 0x24
   18046:	a805      	add	r0, sp, #20
   18048:	f005 fbb6 	bl	1d7b8 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1804c:	9b05      	ldr	r3, [sp, #20]
   1804e:	4953      	ldr	r1, [pc, #332]	; (1819c <smp_pairing_random+0x260>)
   18050:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18052:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18054:	fbb3 f2f1 	udiv	r2, r3, r1
   18058:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1805c:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1805e:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18060:	f006 ffbb 	bl	1efda <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   18064:	4b4e      	ldr	r3, [pc, #312]	; (181a0 <smp_pairing_random+0x264>)
   18066:	9905      	ldr	r1, [sp, #20]
   18068:	681b      	ldr	r3, [r3, #0]
   1806a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1806e:	689b      	ldr	r3, [r3, #8]
   18070:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18072:	210d      	movs	r1, #13
   18074:	4620      	mov	r0, r4
   18076:	f006 ffb0 	bl	1efda <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1807a:	2110      	movs	r1, #16
   1807c:	e7b0      	b.n	17fe0 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1807e:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   18082:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18086:	4944      	ldr	r1, [pc, #272]	; (18198 <smp_pairing_random+0x25c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18088:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1808a:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1808c:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18090:	9500      	str	r5, [sp, #0]
   18092:	6809      	ldr	r1, [r1, #0]
   18094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18098:	463a      	mov	r2, r7
   1809a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1809e:	f007 f854 	bl	1f14a <smp_f4>
   180a2:	b140      	cbz	r0, 180b6 <smp_pairing_random+0x17a>
   180a4:	4939      	ldr	r1, [pc, #228]	; (1818c <smp_pairing_random+0x250>)
   180a6:	4b3a      	ldr	r3, [pc, #232]	; (18190 <smp_pairing_random+0x254>)
		BT_ERR("Calculate confirm failed");
   180a8:	483e      	ldr	r0, [pc, #248]	; (181a4 <smp_pairing_random+0x268>)
   180aa:	1ac9      	subs	r1, r1, r3
   180ac:	08c9      	lsrs	r1, r1, #3
   180ae:	0189      	lsls	r1, r1, #6
   180b0:	f041 0101 	orr.w	r1, r1, #1
   180b4:	e78a      	b.n	17fcc <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   180b6:	2210      	movs	r2, #16
   180b8:	4629      	mov	r1, r5
   180ba:	f104 0017 	add.w	r0, r4, #23
   180be:	f005 fb6b 	bl	1d798 <memcmp>
   180c2:	b120      	cbz	r0, 180ce <smp_pairing_random+0x192>
		return BT_SMP_ERR_CONFIRM_FAILED;
   180c4:	2504      	movs	r5, #4
}
   180c6:	4628      	mov	r0, r5
   180c8:	b01e      	add	sp, #120	; 0x78
   180ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   180ce:	2103      	movs	r1, #3
   180d0:	4620      	mov	r0, r4
   180d2:	f006 ff82 	bl	1efda <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   180d6:	f007 f8a8 	bl	1f22a <smp_send_pairing_random>
		if (err) {
   180da:	4605      	mov	r5, r0
   180dc:	2800      	cmp	r0, #0
   180de:	d1f2      	bne.n	180c6 <smp_pairing_random+0x18a>
		smp->passkey_round++;
   180e0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   180e4:	3301      	adds	r3, #1
   180e6:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   180e8:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   180ea:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   180ee:	d108      	bne.n	18102 <smp_pairing_random+0x1c6>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   180f0:	4620      	mov	r0, r4
   180f2:	210d      	movs	r1, #13
   180f4:	f006 ff71 	bl	1efda <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   180f8:	2110      	movs	r1, #16
   180fa:	4630      	mov	r0, r6
   180fc:	f006 ff6d 	bl	1efda <atomic_set_bit>
			return 0;
   18100:	e7e1      	b.n	180c6 <smp_pairing_random+0x18a>
		if (bt_rand(smp->prnd, 16)) {
   18102:	2110      	movs	r1, #16
   18104:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18108:	f001 fdd2 	bl	19cb0 <bt_rand>
   1810c:	2800      	cmp	r0, #0
   1810e:	d0da      	beq.n	180c6 <smp_pairing_random+0x18a>
   18110:	e75e      	b.n	17fd0 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
   18112:	2110      	movs	r1, #16
   18114:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18118:	f001 fdca 	bl	19cb0 <bt_rand>
   1811c:	2800      	cmp	r0, #0
   1811e:	f47f af57 	bne.w	17fd0 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
   18122:	4f1f      	ldr	r7, [pc, #124]	; (181a0 <smp_pairing_random+0x264>)
   18124:	683b      	ldr	r3, [r7, #0]
   18126:	b1db      	cbz	r3, 18160 <smp_pairing_random+0x224>
   18128:	68db      	ldr	r3, [r3, #12]
   1812a:	b1cb      	cbz	r3, 18160 <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   1812c:	4b1e      	ldr	r3, [pc, #120]	; (181a8 <smp_pairing_random+0x26c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1812e:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   18130:	881b      	ldrh	r3, [r3, #0]
   18132:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18136:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18138:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1813a:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1813e:	d411      	bmi.n	18164 <smp_pairing_random+0x228>
				     BT_CONN_OOB_BOTH_PEERS :
   18140:	2b00      	cmp	r3, #0
   18142:	bf0c      	ite	eq
   18144:	2003      	moveq	r0, #3
   18146:	2001      	movne	r0, #1
   18148:	e00f      	b.n	1816a <smp_pairing_random+0x22e>
   1814a:	4b11      	ldr	r3, [pc, #68]	; (18190 <smp_pairing_random+0x254>)
   1814c:	4a0f      	ldr	r2, [pc, #60]	; (1818c <smp_pairing_random+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1814e:	4817      	ldr	r0, [pc, #92]	; (181ac <smp_pairing_random+0x270>)
   18150:	1ad2      	subs	r2, r2, r3
   18152:	08d2      	lsrs	r2, r2, #3
   18154:	0192      	lsls	r2, r2, #6
   18156:	f042 0201 	orr.w	r2, r2, #1
   1815a:	f004 f81e 	bl	1c19a <log_1>
   1815e:	e737      	b.n	17fd0 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18160:	2502      	movs	r5, #2
   18162:	e7b0      	b.n	180c6 <smp_pairing_random+0x18a>
				     BT_CONN_OOB_BOTH_PEERS :
   18164:	2b00      	cmp	r3, #0
   18166:	bf18      	it	ne
   18168:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1816a:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1816c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   18170:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   18174:	4630      	mov	r0, r6
   18176:	210c      	movs	r1, #12
   18178:	f006 ff2f 	bl	1efda <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1817c:	683b      	ldr	r3, [r7, #0]
   1817e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   18182:	68db      	ldr	r3, [r3, #12]
   18184:	a90a      	add	r1, sp, #40	; 0x28
   18186:	4798      	blx	r3
			return 0;
   18188:	e79d      	b.n	180c6 <smp_pairing_random+0x18a>
   1818a:	bf00      	nop
   1818c:	000208c4 	.word	0x000208c4
   18190:	00020854 	.word	0x00020854
   18194:	00022bc5 	.word	0x00022bc5
   18198:	20001eec 	.word	0x20001eec
   1819c:	000f4240 	.word	0x000f4240
   181a0:	20001e58 	.word	0x20001e58
   181a4:	00022bda 	.word	0x00022bda
   181a8:	00020a28 	.word	0x00020a28
   181ac:	00022aca 	.word	0x00022aca

000181b0 <bt_smp_start_security>:
{
   181b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   181b4:	78c4      	ldrb	r4, [r0, #3]
   181b6:	2c01      	cmp	r4, #1
{
   181b8:	4605      	mov	r5, r0
	switch (conn->role) {
   181ba:	d005      	beq.n	181c8 <bt_smp_start_security+0x18>
		return -EINVAL;
   181bc:	f06f 0415 	mvn.w	r4, #21
}
   181c0:	4620      	mov	r0, r4
   181c2:	b003      	add	sp, #12
   181c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   181c8:	f7ff f968 	bl	1749c <smp_chan_get>
	if (!smp) {
   181cc:	4606      	mov	r6, r0
   181ce:	2800      	cmp	r0, #0
   181d0:	f000 80a5 	beq.w	1831e <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   181d4:	1d07      	adds	r7, r0, #4
   181d6:	2104      	movs	r1, #4
   181d8:	4638      	mov	r0, r7
   181da:	f006 ffdd 	bl	1f198 <atomic_test_bit>
   181de:	2800      	cmp	r0, #0
   181e0:	f040 80a0 	bne.w	18324 <bt_smp_start_security+0x174>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   181e4:	2103      	movs	r1, #3
   181e6:	4638      	mov	r0, r7
   181e8:	f006 ffd6 	bl	1f198 <atomic_test_bit>
   181ec:	b110      	cbz	r0, 181f4 <bt_smp_start_security+0x44>
		return -EBUSY;
   181ee:	f06f 040f 	mvn.w	r4, #15
   181f2:	e7e5      	b.n	181c0 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   181f4:	4621      	mov	r1, r4
   181f6:	4638      	mov	r0, r7
   181f8:	f006 ffce 	bl	1f198 <atomic_test_bit>
   181fc:	2800      	cmp	r0, #0
   181fe:	d1f6      	bne.n	181ee <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   18200:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   18202:	2b03      	cmp	r3, #3
   18204:	d03d      	beq.n	18282 <bt_smp_start_security+0xd2>
   18206:	d82c      	bhi.n	18262 <bt_smp_start_security+0xb2>
   18208:	3b01      	subs	r3, #1
   1820a:	2b01      	cmp	r3, #1
   1820c:	d947      	bls.n	1829e <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1820e:	210b      	movs	r1, #11
   18210:	1d28      	adds	r0, r5, #4
   18212:	f006 ffc1 	bl	1f198 <atomic_test_bit>
   18216:	2800      	cmp	r0, #0
   18218:	d1d0      	bne.n	181bc <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1821a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1821e:	b983      	cbnz	r3, 18242 <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   18220:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   18224:	7a29      	ldrb	r1, [r5, #8]
   18226:	4622      	mov	r2, r4
   18228:	2020      	movs	r0, #32
   1822a:	f000 fcdf 	bl	18bec <bt_keys_find>
   1822e:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   18232:	b930      	cbnz	r0, 18242 <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   18234:	7a29      	ldrb	r1, [r5, #8]
   18236:	4622      	mov	r2, r4
   18238:	2004      	movs	r0, #4
   1823a:	f000 fcd7 	bl	18bec <bt_keys_find>
   1823e:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   18242:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   18246:	2b00      	cmp	r3, #0
   18248:	d0b8      	beq.n	181bc <bt_smp_start_security+0xc>
   1824a:	89da      	ldrh	r2, [r3, #14]
   1824c:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18250:	2a00      	cmp	r2, #0
   18252:	d0b3      	beq.n	181bc <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   18254:	7aaa      	ldrb	r2, [r5, #10]
   18256:	2a02      	cmp	r2, #2
   18258:	d921      	bls.n	1829e <bt_smp_start_security+0xee>
   1825a:	7b5b      	ldrb	r3, [r3, #13]
   1825c:	07db      	lsls	r3, r3, #31
   1825e:	d5ad      	bpl.n	181bc <bt_smp_start_security+0xc>
   18260:	e01d      	b.n	1829e <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
   18262:	2b04      	cmp	r3, #4
   18264:	d1d3      	bne.n	1820e <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   18266:	f7ff f8af 	bl	173c8 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1826a:	2803      	cmp	r0, #3
   1826c:	d104      	bne.n	18278 <bt_smp_start_security+0xc8>
   1826e:	4b2f      	ldr	r3, [pc, #188]	; (1832c <bt_smp_start_security+0x17c>)
   18270:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   18272:	b1fb      	cbz	r3, 182b4 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   18274:	68dc      	ldr	r4, [r3, #12]
   18276:	b10c      	cbz	r4, 1827c <bt_smp_start_security+0xcc>
   18278:	4b2d      	ldr	r3, [pc, #180]	; (18330 <bt_smp_start_security+0x180>)
   1827a:	781c      	ldrb	r4, [r3, #0]
   1827c:	f004 0401 	and.w	r4, r4, #1
   18280:	e00b      	b.n	1829a <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   18282:	f7ff f8a1 	bl	173c8 <get_io_capa>
   18286:	2803      	cmp	r0, #3
   18288:	d107      	bne.n	1829a <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
   1828a:	4b28      	ldr	r3, [pc, #160]	; (1832c <bt_smp_start_security+0x17c>)
   1828c:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1828e:	2c00      	cmp	r4, #0
   18290:	d0bd      	beq.n	1820e <bt_smp_start_security+0x5e>
		       (bt_auth && bt_auth->oob_data_request);
   18292:	68e4      	ldr	r4, [r4, #12]
   18294:	3c00      	subs	r4, #0
   18296:	bf18      	it	ne
   18298:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1829a:	2c00      	cmp	r4, #0
   1829c:	d0b7      	beq.n	1820e <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   1829e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   182a2:	b14b      	cbz	r3, 182b8 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
   182a4:	4630      	mov	r0, r6
   182a6:	f7ff f939 	bl	1751c <smp_init>
   182aa:	4604      	mov	r4, r0
   182ac:	b180      	cbz	r0, 182d0 <bt_smp_start_security+0x120>
		return -ENOBUFS;
   182ae:	f06f 0468 	mvn.w	r4, #104	; 0x68
   182b2:	e785      	b.n	181c0 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   182b4:	2400      	movs	r4, #0
   182b6:	e7e1      	b.n	1827c <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   182b8:	7a28      	ldrb	r0, [r5, #8]
   182ba:	f105 0188 	add.w	r1, r5, #136	; 0x88
   182be:	f000 fc5f 	bl	18b80 <bt_keys_get_addr>
   182c2:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   182c6:	2800      	cmp	r0, #0
   182c8:	d1ec      	bne.n	182a4 <bt_smp_start_security+0xf4>
			return -ENOMEM;
   182ca:	f06f 040b 	mvn.w	r4, #11
   182ce:	e777      	b.n	181c0 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   182d0:	210b      	movs	r1, #11
   182d2:	4630      	mov	r0, r6
   182d4:	f006 ff8a 	bl	1f1ec <smp_create_pdu.isra.0>
	if (!req_buf) {
   182d8:	4680      	mov	r8, r0
   182da:	2800      	cmp	r0, #0
   182dc:	d0e7      	beq.n	182ae <bt_smp_start_security+0xfe>
   182de:	2101      	movs	r1, #1
   182e0:	3008      	adds	r0, #8
   182e2:	f007 fb58 	bl	1f996 <net_buf_simple_add>
   182e6:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   182e8:	2009      	movs	r0, #9
   182ea:	f7ff f8b9 	bl	17460 <get_auth.isra.0>
   182ee:	4623      	mov	r3, r4
   182f0:	f889 0000 	strb.w	r0, [r9]
   182f4:	4642      	mov	r2, r8
   182f6:	9400      	str	r4, [sp, #0]
   182f8:	2106      	movs	r1, #6
   182fa:	4628      	mov	r0, r5
   182fc:	f006 f805 	bl	1e30a <bt_l2cap_send_cb>
	if (err) {
   18300:	4604      	mov	r4, r0
   18302:	b118      	cbz	r0, 1830c <bt_smp_start_security+0x15c>
		net_buf_unref(req_buf);
   18304:	4640      	mov	r0, r8
   18306:	f000 fd8d 	bl	18e24 <net_buf_unref>
		return err;
   1830a:	e759      	b.n	181c0 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1830c:	4638      	mov	r0, r7
   1830e:	210f      	movs	r1, #15
   18310:	f006 fe63 	bl	1efda <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   18314:	2101      	movs	r1, #1
   18316:	4630      	mov	r0, r6
   18318:	f006 fe5f 	bl	1efda <atomic_set_bit>
	return 0;
   1831c:	e750      	b.n	181c0 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1831e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   18322:	e74d      	b.n	181c0 <bt_smp_start_security+0x10>
		return -EIO;
   18324:	f06f 0404 	mvn.w	r4, #4
   18328:	e74a      	b.n	181c0 <bt_smp_start_security+0x10>
   1832a:	bf00      	nop
   1832c:	20001e58 	.word	0x20001e58
   18330:	20002196 	.word	0x20002196

00018334 <smp_pairing_complete>:
{
   18334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   18338:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!status) {
   1833c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 183e8 <smp_pairing_complete+0xb4>
{
   18340:	4605      	mov	r5, r0
   18342:	1d07      	adds	r7, r0, #4
	if (!status) {
   18344:	b9b9      	cbnz	r1, 18376 <smp_pairing_complete+0x42>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18346:	210d      	movs	r1, #13
   18348:	4638      	mov	r0, r7
   1834a:	f006 ff25 	bl	1f198 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   1834e:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18352:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   18354:	b11b      	cbz	r3, 1835e <smp_pairing_complete+0x2a>
   18356:	699b      	ldr	r3, [r3, #24]
   18358:	b10b      	cbz	r3, 1835e <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
   1835a:	4620      	mov	r0, r4
   1835c:	4798      	blx	r3
	smp_reset(smp);
   1835e:	4628      	mov	r0, r5
   18360:	f006 ffd6 	bl	1f310 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   18364:	7a62      	ldrb	r2, [r4, #9]
   18366:	7aa3      	ldrb	r3, [r4, #10]
   18368:	429a      	cmp	r2, r3
   1836a:	d036      	beq.n	183da <smp_pairing_complete+0xa6>
		bt_smp_start_security(conn);
   1836c:	4620      	mov	r0, r4
}
   1836e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
   18372:	f7ff bf1d 	b.w	181b0 <bt_smp_start_security>
	switch (smp_err) {
   18376:	3901      	subs	r1, #1
   18378:	b2c9      	uxtb	r1, r1
   1837a:	290d      	cmp	r1, #13
   1837c:	bf9c      	itt	ls
   1837e:	4b18      	ldrls	r3, [pc, #96]	; (183e0 <smp_pairing_complete+0xac>)
   18380:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   18382:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   18386:	bf88      	it	hi
   18388:	2608      	movhi	r6, #8
		if (conn->le.keys &&
   1838a:	b143      	cbz	r3, 1839e <smp_pairing_complete+0x6a>
   1838c:	7b1b      	ldrb	r3, [r3, #12]
   1838e:	b9eb      	cbnz	r3, 183cc <smp_pairing_complete+0x98>
			bt_keys_clear(conn->le.keys);
   18390:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   18394:	f007 fa9a 	bl	1f8cc <bt_keys_clear>
			conn->le.keys = NULL;
   18398:	2300      	movs	r3, #0
   1839a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1839e:	2102      	movs	r1, #2
   183a0:	4638      	mov	r0, r7
   183a2:	f006 fef9 	bl	1f198 <atomic_test_bit>
   183a6:	b940      	cbnz	r0, 183ba <smp_pairing_complete+0x86>
	switch (err) {
   183a8:	2e08      	cmp	r6, #8
   183aa:	bf16      	itet	ne
   183ac:	4b0d      	ldrne	r3, [pc, #52]	; (183e4 <smp_pairing_complete+0xb0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   183ae:	211f      	moveq	r1, #31
   183b0:	5d99      	ldrbne	r1, [r3, r6]
			bt_conn_security_changed(conn,
   183b2:	4632      	mov	r2, r6
   183b4:	4620      	mov	r0, r4
   183b6:	f7fc fb93 	bl	14ae0 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   183ba:	f8d8 3000 	ldr.w	r3, [r8]
   183be:	2b00      	cmp	r3, #0
   183c0:	d0cd      	beq.n	1835e <smp_pairing_complete+0x2a>
   183c2:	69db      	ldr	r3, [r3, #28]
   183c4:	2b00      	cmp	r3, #0
   183c6:	d0ca      	beq.n	1835e <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
   183c8:	4631      	mov	r1, r6
   183ca:	e7c6      	b.n	1835a <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   183cc:	2102      	movs	r1, #2
   183ce:	4638      	mov	r0, r7
   183d0:	f006 fee2 	bl	1f198 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   183d4:	2800      	cmp	r0, #0
   183d6:	d1db      	bne.n	18390 <smp_pairing_complete+0x5c>
   183d8:	e7e1      	b.n	1839e <smp_pairing_complete+0x6a>
}
   183da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   183de:	bf00      	nop
   183e0:	00022d60 	.word	0x00022d60
   183e4:	00022d76 	.word	0x00022d76
   183e8:	20001e58 	.word	0x20001e58

000183ec <bt_smp_recv>:
{
   183ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   183ee:	898b      	ldrh	r3, [r1, #12]
{
   183f0:	4607      	mov	r7, r0
   183f2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   183f4:	b95b      	cbnz	r3, 1840e <bt_smp_recv+0x22>
   183f6:	493a      	ldr	r1, [pc, #232]	; (184e0 <bt_smp_recv+0xf4>)
   183f8:	4b3a      	ldr	r3, [pc, #232]	; (184e4 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   183fa:	483b      	ldr	r0, [pc, #236]	; (184e8 <bt_smp_recv+0xfc>)
   183fc:	1ac9      	subs	r1, r1, r3
   183fe:	08c9      	lsrs	r1, r1, #3
   18400:	0189      	lsls	r1, r1, #6
   18402:	f041 0101 	orr.w	r1, r1, #1
   18406:	f003 febb 	bl	1c180 <log_0>
}
   1840a:	2000      	movs	r0, #0
   1840c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1840e:	2101      	movs	r1, #1
   18410:	f105 0008 	add.w	r0, r5, #8
   18414:	f007 fae6 	bl	1f9e4 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18418:	2104      	movs	r1, #4
   1841a:	4606      	mov	r6, r0
   1841c:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   18420:	f006 feba 	bl	1f198 <atomic_test_bit>
   18424:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   18428:	7831      	ldrb	r1, [r6, #0]
   1842a:	b150      	cbz	r0, 18442 <bt_smp_recv+0x56>
   1842c:	4a2c      	ldr	r2, [pc, #176]	; (184e0 <bt_smp_recv+0xf4>)
   1842e:	4b2d      	ldr	r3, [pc, #180]	; (184e4 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   18430:	482e      	ldr	r0, [pc, #184]	; (184ec <bt_smp_recv+0x100>)
   18432:	1ad2      	subs	r2, r2, r3
   18434:	08d2      	lsrs	r2, r2, #3
   18436:	0192      	lsls	r2, r2, #6
   18438:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1843c:	f003 fead 	bl	1c19a <log_1>
		return 0;
   18440:	e7e3      	b.n	1840a <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   18442:	290e      	cmp	r1, #14
   18444:	d908      	bls.n	18458 <bt_smp_recv+0x6c>
   18446:	4a26      	ldr	r2, [pc, #152]	; (184e0 <bt_smp_recv+0xf4>)
   18448:	4b26      	ldr	r3, [pc, #152]	; (184e4 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1844a:	4829      	ldr	r0, [pc, #164]	; (184f0 <bt_smp_recv+0x104>)
   1844c:	1ad2      	subs	r2, r2, r3
   1844e:	08d2      	lsrs	r2, r2, #3
   18450:	0192      	lsls	r2, r2, #6
   18452:	f042 0202 	orr.w	r2, r2, #2
   18456:	e7f1      	b.n	1843c <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   18458:	4f26      	ldr	r7, [pc, #152]	; (184f4 <bt_smp_recv+0x108>)
   1845a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1845e:	b973      	cbnz	r3, 1847e <bt_smp_recv+0x92>
   18460:	4b20      	ldr	r3, [pc, #128]	; (184e4 <bt_smp_recv+0xf8>)
   18462:	4a1f      	ldr	r2, [pc, #124]	; (184e0 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   18464:	4824      	ldr	r0, [pc, #144]	; (184f8 <bt_smp_recv+0x10c>)
   18466:	1ad2      	subs	r2, r2, r3
   18468:	08d2      	lsrs	r2, r2, #3
   1846a:	0192      	lsls	r2, r2, #6
   1846c:	f042 0202 	orr.w	r2, r2, #2
   18470:	f003 fe93 	bl	1c19a <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   18474:	2107      	movs	r1, #7
		smp_error(smp, err);
   18476:	4620      	mov	r0, r4
   18478:	f007 f8d1 	bl	1f61e <smp_error>
   1847c:	e7c5      	b.n	1840a <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1847e:	4620      	mov	r0, r4
   18480:	f006 ff2e 	bl	1f2e0 <atomic_test_and_clear_bit>
   18484:	7831      	ldrb	r1, [r6, #0]
   18486:	b970      	cbnz	r0, 184a6 <bt_smp_recv+0xba>
   18488:	4b16      	ldr	r3, [pc, #88]	; (184e4 <bt_smp_recv+0xf8>)
   1848a:	4a15      	ldr	r2, [pc, #84]	; (184e0 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1848c:	481b      	ldr	r0, [pc, #108]	; (184fc <bt_smp_recv+0x110>)
   1848e:	1ad2      	subs	r2, r2, r3
   18490:	08d2      	lsrs	r2, r2, #3
   18492:	0192      	lsls	r2, r2, #6
   18494:	f042 0202 	orr.w	r2, r2, #2
   18498:	f003 fe7f 	bl	1c19a <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1849c:	7833      	ldrb	r3, [r6, #0]
   1849e:	2b05      	cmp	r3, #5
   184a0:	d0b3      	beq.n	1840a <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   184a2:	2108      	movs	r1, #8
   184a4:	e7e7      	b.n	18476 <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   184a6:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   184aa:	89a8      	ldrh	r0, [r5, #12]
   184ac:	791b      	ldrb	r3, [r3, #4]
   184ae:	4283      	cmp	r3, r0
   184b0:	d00d      	beq.n	184ce <bt_smp_recv+0xe2>
   184b2:	4a0c      	ldr	r2, [pc, #48]	; (184e4 <bt_smp_recv+0xf8>)
   184b4:	4b0a      	ldr	r3, [pc, #40]	; (184e0 <bt_smp_recv+0xf4>)
   184b6:	1a9b      	subs	r3, r3, r2
   184b8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   184ba:	019b      	lsls	r3, r3, #6
   184bc:	460a      	mov	r2, r1
   184be:	f043 0301 	orr.w	r3, r3, #1
   184c2:	4601      	mov	r1, r0
   184c4:	480e      	ldr	r0, [pc, #56]	; (18500 <bt_smp_recv+0x114>)
   184c6:	f003 fe7c 	bl	1c1c2 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   184ca:	210a      	movs	r1, #10
   184cc:	e7d3      	b.n	18476 <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   184ce:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   184d2:	4620      	mov	r0, r4
   184d4:	4629      	mov	r1, r5
   184d6:	4798      	blx	r3
	if (err) {
   184d8:	4601      	mov	r1, r0
   184da:	2800      	cmp	r0, #0
   184dc:	d095      	beq.n	1840a <bt_smp_recv+0x1e>
   184de:	e7ca      	b.n	18476 <bt_smp_recv+0x8a>
   184e0:	000208c4 	.word	0x000208c4
   184e4:	00020854 	.word	0x00020854
   184e8:	00022bf3 	.word	0x00022bf3
   184ec:	00022c0e 	.word	0x00022c0e
   184f0:	00022c3f 	.word	0x00022c3f
   184f4:	00021034 	.word	0x00021034
   184f8:	00022c61 	.word	0x00022c61
   184fc:	00022c7b 	.word	0x00022c7b
   18500:	000228b6 	.word	0x000228b6

00018504 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   18504:	4b12      	ldr	r3, [pc, #72]	; (18550 <bt_smp_pkey_ready+0x4c>)
{
   18506:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   18508:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1850a:	b958      	cbnz	r0, 18524 <bt_smp_pkey_ready+0x20>
   1850c:	4911      	ldr	r1, [pc, #68]	; (18554 <bt_smp_pkey_ready+0x50>)
   1850e:	4b12      	ldr	r3, [pc, #72]	; (18558 <bt_smp_pkey_ready+0x54>)
		BT_WARN("Public key not available");
   18510:	4812      	ldr	r0, [pc, #72]	; (1855c <bt_smp_pkey_ready+0x58>)
   18512:	1ac9      	subs	r1, r1, r3
   18514:	08c9      	lsrs	r1, r1, #3
   18516:	0189      	lsls	r1, r1, #6
}
   18518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1851c:	f041 0102 	orr.w	r1, r1, #2
   18520:	f003 be2e 	b.w	1c180 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18524:	4c0e      	ldr	r4, [pc, #56]	; (18560 <bt_smp_pkey_ready+0x5c>)
	z_impl_k_sem_give(sem);
   18526:	480f      	ldr	r0, [pc, #60]	; (18564 <bt_smp_pkey_ready+0x60>)
   18528:	f002 f938 	bl	1a79c <z_impl_k_sem_give>
   1852c:	f3bf 8f5b 	dmb	ish
   18530:	6863      	ldr	r3, [r4, #4]
   18532:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   18536:	065b      	lsls	r3, r3, #25
   18538:	d509      	bpl.n	1854e <bt_smp_pkey_ready+0x4a>
		err = smp_public_key_slave(smp);
   1853a:	4620      	mov	r0, r4
   1853c:	f7ff f984 	bl	17848 <smp_public_key_slave>
		if (err) {
   18540:	4601      	mov	r1, r0
   18542:	b120      	cbz	r0, 1854e <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   18544:	4620      	mov	r0, r4
}
   18546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1854a:	f007 b868 	b.w	1f61e <smp_error>
}
   1854e:	bd10      	pop	{r4, pc}
   18550:	20001eec 	.word	0x20001eec
   18554:	000208c4 	.word	0x000208c4
   18558:	00020854 	.word	0x00020854
   1855c:	00022c96 	.word	0x00022c96
   18560:	20001880 	.word	0x20001880
   18564:	20000760 	.word	0x20000760

00018568 <smp_ident_addr_info>:
{
   18568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1856c:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1856e:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   18572:	782b      	ldrb	r3, [r5, #0]
{
   18574:	4604      	mov	r4, r0
   18576:	f107 0688 	add.w	r6, r7, #136	; 0x88
   1857a:	b313      	cbz	r3, 185c2 <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1857c:	79ab      	ldrb	r3, [r5, #6]
   1857e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18582:	2bc0      	cmp	r3, #192	; 0xc0
   18584:	d01d      	beq.n	185c2 <smp_ident_addr_info+0x5a>
   18586:	4b4b      	ldr	r3, [pc, #300]	; (186b4 <smp_ident_addr_info+0x14c>)
   18588:	4c4b      	ldr	r4, [pc, #300]	; (186b8 <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1858a:	4628      	mov	r0, r5
   1858c:	1ae4      	subs	r4, r4, r3
   1858e:	f7f9 fc65 	bl	11e5c <bt_addr_le_str_real>
   18592:	f7f7 ffe3 	bl	1055c <z_log_strdup>
   18596:	08e4      	lsrs	r4, r4, #3
   18598:	01a4      	lsls	r4, r4, #6
   1859a:	f044 0401 	orr.w	r4, r4, #1
   1859e:	4601      	mov	r1, r0
   185a0:	4622      	mov	r2, r4
   185a2:	4846      	ldr	r0, [pc, #280]	; (186bc <smp_ident_addr_info+0x154>)
   185a4:	f003 fdf9 	bl	1c19a <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   185a8:	4630      	mov	r0, r6
   185aa:	f7f9 fc57 	bl	11e5c <bt_addr_le_str_real>
   185ae:	f7f7 ffd5 	bl	1055c <z_log_strdup>
   185b2:	4622      	mov	r2, r4
   185b4:	4601      	mov	r1, r0
   185b6:	4842      	ldr	r0, [pc, #264]	; (186c0 <smp_ident_addr_info+0x158>)
   185b8:	f003 fdef 	bl	1c19a <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   185bc:	200a      	movs	r0, #10
}
   185be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   185c2:	2207      	movs	r2, #7
   185c4:	4629      	mov	r1, r5
   185c6:	4630      	mov	r0, r6
   185c8:	f005 f8e6 	bl	1d798 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   185cc:	b168      	cbz	r0, 185ea <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   185ce:	7a38      	ldrb	r0, [r7, #8]
   185d0:	4629      	mov	r1, r5
   185d2:	f000 fb5b 	bl	18c8c <bt_keys_find_addr>
		if (keys) {
   185d6:	4680      	mov	r8, r0
   185d8:	b138      	cbz	r0, 185ea <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   185da:	4601      	mov	r1, r0
   185dc:	4620      	mov	r0, r4
   185de:	f006 fde4 	bl	1f1aa <update_keys_check>
   185e2:	b300      	cbz	r0, 18626 <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   185e4:	4640      	mov	r0, r8
   185e6:	f007 f971 	bl	1f8cc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   185ea:	210d      	movs	r1, #13
   185ec:	1d20      	adds	r0, r4, #4
   185ee:	f006 fdd3 	bl	1f198 <atomic_test_bit>
   185f2:	2800      	cmp	r0, #0
   185f4:	d046      	beq.n	18684 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   185f6:	7a39      	ldrb	r1, [r7, #8]
   185f8:	4632      	mov	r2, r6
   185fa:	2002      	movs	r0, #2
   185fc:	f007 f952 	bl	1f8a4 <bt_keys_get_type>
		if (!keys) {
   18600:	4680      	mov	r8, r0
   18602:	b990      	cbnz	r0, 1862a <smp_ident_addr_info+0xc2>
   18604:	4a2b      	ldr	r2, [pc, #172]	; (186b4 <smp_ident_addr_info+0x14c>)
   18606:	4c2c      	ldr	r4, [pc, #176]	; (186b8 <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
   18608:	4630      	mov	r0, r6
   1860a:	1aa4      	subs	r4, r4, r2
   1860c:	f7f9 fc26 	bl	11e5c <bt_addr_le_str_real>
   18610:	f7f7 ffa4 	bl	1055c <z_log_strdup>
   18614:	08e4      	lsrs	r4, r4, #3
   18616:	01a4      	lsls	r4, r4, #6
   18618:	f044 0401 	orr.w	r4, r4, #1
   1861c:	4601      	mov	r1, r0
   1861e:	4622      	mov	r2, r4
   18620:	4828      	ldr	r0, [pc, #160]	; (186c4 <smp_ident_addr_info+0x15c>)
   18622:	f003 fdba 	bl	1c19a <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   18626:	2008      	movs	r0, #8
   18628:	e7c9      	b.n	185be <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1862a:	78fb      	ldrb	r3, [r7, #3]
   1862c:	2b00      	cmp	r3, #0
   1862e:	d13e      	bne.n	186ae <smp_ident_addr_info+0x146>
			dst = &conn->le.resp_addr;
   18630:	f107 0196 	add.w	r1, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   18634:	780b      	ldrb	r3, [r1, #0]
   18636:	2b01      	cmp	r3, #1
   18638:	d121      	bne.n	1867e <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1863a:	798b      	ldrb	r3, [r1, #6]
   1863c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18640:	2b40      	cmp	r3, #64	; 0x40
   18642:	d11c      	bne.n	1867e <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   18644:	2206      	movs	r2, #6
   18646:	3101      	adds	r1, #1
   18648:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1864c:	f005 f8b4 	bl	1d7b8 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   18650:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
   18654:	b19b      	cbz	r3, 1867e <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   18656:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
   1865a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1865e:	2bc0      	cmp	r3, #192	; 0xc0
   18660:	d00d      	beq.n	1867e <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   18662:	2207      	movs	r2, #7
   18664:	4629      	mov	r1, r5
   18666:	f108 0001 	add.w	r0, r8, #1
   1866a:	f005 f8a5 	bl	1d7b8 <memcpy>
   1866e:	2207      	movs	r2, #7
   18670:	4629      	mov	r1, r5
   18672:	4630      	mov	r0, r6
   18674:	f005 f8a0 	bl	1d7b8 <memcpy>
				bt_conn_identity_resolved(conn);
   18678:	4638      	mov	r0, r7
   1867a:	f7fc fa17 	bl	14aac <bt_conn_identity_resolved>
		bt_id_add(keys);
   1867e:	4640      	mov	r0, r8
   18680:	f7fb f9ec 	bl	13a5c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   18684:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   18688:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1868c:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1868e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   18692:	d503      	bpl.n	1869c <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18694:	210a      	movs	r1, #10
   18696:	4620      	mov	r0, r4
   18698:	f006 fc9f 	bl	1efda <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1869c:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   186a0:	b91d      	cbnz	r5, 186aa <smp_ident_addr_info+0x142>
		smp_pairing_complete(smp, 0);
   186a2:	4629      	mov	r1, r5
   186a4:	4620      	mov	r0, r4
   186a6:	f7ff fe45 	bl	18334 <smp_pairing_complete>
	return 0;
   186aa:	2000      	movs	r0, #0
   186ac:	e787      	b.n	185be <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   186ae:	f107 018f 	add.w	r1, r7, #143	; 0x8f
   186b2:	e7bf      	b.n	18634 <smp_ident_addr_info+0xcc>
   186b4:	00020854 	.word	0x00020854
   186b8:	000208c4 	.word	0x000208c4
   186bc:	00022caf 	.word	0x00022caf
   186c0:	00022cdc 	.word	0x00022cdc
   186c4:	00022bab 	.word	0x00022bab

000186c8 <smp_master_ident>:
{
   186c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   186ca:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   186ce:	4604      	mov	r4, r0
   186d0:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   186d2:	3004      	adds	r0, #4
   186d4:	210d      	movs	r1, #13
   186d6:	f006 fd5f 	bl	1f198 <atomic_test_bit>
   186da:	b368      	cbz	r0, 18738 <smp_master_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   186dc:	f105 0788 	add.w	r7, r5, #136	; 0x88
   186e0:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   186e2:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   186e4:	463a      	mov	r2, r7
   186e6:	2004      	movs	r0, #4
   186e8:	f007 f8dc 	bl	1f8a4 <bt_keys_get_type>
		if (!keys) {
   186ec:	4605      	mov	r5, r0
   186ee:	b990      	cbnz	r0, 18716 <smp_master_ident+0x4e>
   186f0:	4a1c      	ldr	r2, [pc, #112]	; (18764 <smp_master_ident+0x9c>)
   186f2:	4c1d      	ldr	r4, [pc, #116]	; (18768 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
   186f4:	4638      	mov	r0, r7
   186f6:	1aa4      	subs	r4, r4, r2
   186f8:	f7f9 fbb0 	bl	11e5c <bt_addr_le_str_real>
   186fc:	f7f7 ff2e 	bl	1055c <z_log_strdup>
   18700:	08e4      	lsrs	r4, r4, #3
   18702:	01a4      	lsls	r4, r4, #6
   18704:	f044 0401 	orr.w	r4, r4, #1
   18708:	4601      	mov	r1, r0
   1870a:	4622      	mov	r2, r4
   1870c:	4817      	ldr	r0, [pc, #92]	; (1876c <smp_master_ident+0xa4>)
   1870e:	f003 fd44 	bl	1c19a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   18712:	2008      	movs	r0, #8
}
   18714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   18716:	2202      	movs	r2, #2
   18718:	4631      	mov	r1, r6
   1871a:	3018      	adds	r0, #24
   1871c:	f005 f84c 	bl	1d7b8 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   18720:	2208      	movs	r2, #8
   18722:	1cb1      	adds	r1, r6, #2
   18724:	f105 0010 	add.w	r0, r5, #16
   18728:	f005 f846 	bl	1d7b8 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1872c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   18730:	f023 0301 	bic.w	r3, r3, #1
   18734:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   18738:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1873c:	079a      	lsls	r2, r3, #30
   1873e:	d50c      	bpl.n	1875a <smp_master_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   18740:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18742:	4620      	mov	r0, r4
   18744:	f006 fc49 	bl	1efda <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   18748:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1874c:	b91d      	cbnz	r5, 18756 <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
   1874e:	4629      	mov	r1, r5
   18750:	4620      	mov	r0, r4
   18752:	f7ff fdef 	bl	18334 <smp_pairing_complete>
	return 0;
   18756:	2000      	movs	r0, #0
   18758:	e7dc      	b.n	18714 <smp_master_ident+0x4c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1875a:	075b      	lsls	r3, r3, #29
   1875c:	d5f4      	bpl.n	18748 <smp_master_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1875e:	210a      	movs	r1, #10
   18760:	e7ef      	b.n	18742 <smp_master_ident+0x7a>
   18762:	bf00      	nop
   18764:	00020854 	.word	0x00020854
   18768:	000208c4 	.word	0x000208c4
   1876c:	00022bab 	.word	0x00022bab

00018770 <smp_pairing_failed>:
{
   18770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18772:	4a15      	ldr	r2, [pc, #84]	; (187c8 <smp_pairing_failed+0x58>)
   18774:	4b15      	ldr	r3, [pc, #84]	; (187cc <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   18776:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   18778:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   1877c:	7829      	ldrb	r1, [r5, #0]
   1877e:	1ad2      	subs	r2, r2, r3
   18780:	08d2      	lsrs	r2, r2, #3
{
   18782:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   18784:	0192      	lsls	r2, r2, #6
   18786:	4812      	ldr	r0, [pc, #72]	; (187d0 <smp_pairing_failed+0x60>)
   18788:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1878c:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1878e:	f003 fd04 	bl	1c19a <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   18792:	210a      	movs	r1, #10
   18794:	4638      	mov	r0, r7
   18796:	f006 fda3 	bl	1f2e0 <atomic_test_and_clear_bit>
   1879a:	b140      	cbz	r0, 187ae <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   1879c:	4b0d      	ldr	r3, [pc, #52]	; (187d4 <smp_pairing_failed+0x64>)
   1879e:	681b      	ldr	r3, [r3, #0]
   187a0:	b963      	cbnz	r3, 187bc <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   187a2:	4620      	mov	r0, r4
   187a4:	7829      	ldrb	r1, [r5, #0]
   187a6:	f7ff fdc5 	bl	18334 <smp_pairing_complete>
}
   187aa:	2000      	movs	r0, #0
   187ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   187ae:	210b      	movs	r1, #11
   187b0:	4638      	mov	r0, r7
   187b2:	f006 fd95 	bl	1f2e0 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   187b6:	2800      	cmp	r0, #0
   187b8:	d1f0      	bne.n	1879c <smp_pairing_failed+0x2c>
   187ba:	e7f2      	b.n	187a2 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   187bc:	691b      	ldr	r3, [r3, #16]
   187be:	2b00      	cmp	r3, #0
   187c0:	d0ef      	beq.n	187a2 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   187c2:	4630      	mov	r0, r6
   187c4:	4798      	blx	r3
   187c6:	e7ec      	b.n	187a2 <smp_pairing_failed+0x32>
   187c8:	000208c4 	.word	0x000208c4
   187cc:	00020854 	.word	0x00020854
   187d0:	00022cc3 	.word	0x00022cc3
   187d4:	20001e58 	.word	0x20001e58

000187d8 <bt_smp_encrypt_change>:
{
   187d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   187dc:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   187de:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   187e2:	b088      	sub	sp, #32
   187e4:	4604      	mov	r4, r0
   187e6:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   187e8:	4630      	mov	r0, r6
   187ea:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   187ec:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   187f0:	f006 fd76 	bl	1f2e0 <atomic_test_and_clear_bit>
   187f4:	b318      	cbz	r0, 1883e <bt_smp_encrypt_change+0x66>
	if (hci_status) {
   187f6:	b1bf      	cbz	r7, 18828 <bt_smp_encrypt_change+0x50>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   187f8:	2103      	movs	r1, #3
   187fa:	4630      	mov	r0, r6
   187fc:	f006 fccc 	bl	1f198 <atomic_test_bit>
   18800:	b1e8      	cbz	r0, 1883e <bt_smp_encrypt_change+0x66>
			uint8_t smp_err = smp_err_get(
   18802:	4638      	mov	r0, r7
   18804:	f7fa fecc 	bl	135a0 <bt_security_err_get>
	switch (auth_err) {
   18808:	3801      	subs	r0, #1
   1880a:	b2c0      	uxtb	r0, r0
   1880c:	2807      	cmp	r0, #7
   1880e:	bf9a      	itte	ls
   18810:	4b73      	ldrls	r3, [pc, #460]	; (189e0 <bt_smp_encrypt_change+0x208>)
   18812:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   18814:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   18816:	2102      	movs	r1, #2
   18818:	4630      	mov	r0, r6
   1881a:	f006 fbde 	bl	1efda <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1881e:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   18820:	4628      	mov	r0, r5
   18822:	f7ff fd87 	bl	18334 <smp_pairing_complete>
   18826:	e00a      	b.n	1883e <bt_smp_encrypt_change+0x66>
	if (!conn->encrypt) {
   18828:	f898 300b 	ldrb.w	r3, [r8, #11]
   1882c:	b13b      	cbz	r3, 1883e <bt_smp_encrypt_change+0x66>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1882e:	2103      	movs	r1, #3
   18830:	4630      	mov	r0, r6
   18832:	f006 fcb1 	bl	1f198 <atomic_test_bit>
   18836:	b928      	cbnz	r0, 18844 <bt_smp_encrypt_change+0x6c>
		smp_reset(smp);
   18838:	4628      	mov	r0, r5
   1883a:	f006 fd69 	bl	1f310 <smp_reset>
}
   1883e:	b008      	add	sp, #32
   18840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18844:	2105      	movs	r1, #5
   18846:	4630      	mov	r0, r6
   18848:	f006 fca6 	bl	1f198 <atomic_test_bit>
   1884c:	b1b8      	cbz	r0, 1887e <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1884e:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   18852:	071b      	lsls	r3, r3, #28
   18854:	d507      	bpl.n	18866 <bt_smp_encrypt_change+0x8e>
   18856:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1885a:	071f      	lsls	r7, r3, #28
   1885c:	d503      	bpl.n	18866 <bt_smp_encrypt_change+0x8e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1885e:	2111      	movs	r1, #17
   18860:	4630      	mov	r0, r6
   18862:	f006 fbba 	bl	1efda <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   18866:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1886a:	f023 0308 	bic.w	r3, r3, #8
   1886e:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   18872:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   18876:	f023 0308 	bic.w	r3, r3, #8
   1887a:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1887e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   18882:	07d8      	lsls	r0, r3, #31
   18884:	d51d      	bpl.n	188c2 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   18886:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18888:	4628      	mov	r0, r5
   1888a:	f006 fba6 	bl	1efda <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1888e:	4630      	mov	r0, r6
   18890:	2102      	movs	r1, #2
   18892:	f006 fba2 	bl	1efda <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   18896:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
   18898:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1889c:	b9cb      	cbnz	r3, 188d2 <bt_smp_encrypt_change+0xfa>
   1889e:	4a51      	ldr	r2, [pc, #324]	; (189e4 <bt_smp_encrypt_change+0x20c>)
   188a0:	4c51      	ldr	r4, [pc, #324]	; (189e8 <bt_smp_encrypt_change+0x210>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   188a2:	3088      	adds	r0, #136	; 0x88
   188a4:	1aa4      	subs	r4, r4, r2
   188a6:	f7f9 fad9 	bl	11e5c <bt_addr_le_str_real>
   188aa:	f7f7 fe57 	bl	1055c <z_log_strdup>
   188ae:	08e4      	lsrs	r4, r4, #3
   188b0:	01a4      	lsls	r4, r4, #6
   188b2:	f044 0401 	orr.w	r4, r4, #1
   188b6:	4601      	mov	r1, r0
   188b8:	4622      	mov	r2, r4
   188ba:	484c      	ldr	r0, [pc, #304]	; (189ec <bt_smp_encrypt_change+0x214>)
   188bc:	f003 fc6d 	bl	1c19a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   188c0:	e7bd      	b.n	1883e <bt_smp_encrypt_change+0x66>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   188c2:	0799      	lsls	r1, r3, #30
   188c4:	d501      	bpl.n	188ca <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   188c6:	2108      	movs	r1, #8
   188c8:	e7de      	b.n	18888 <bt_smp_encrypt_change+0xb0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   188ca:	075a      	lsls	r2, r3, #29
   188cc:	d5df      	bpl.n	1888e <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   188ce:	210a      	movs	r1, #10
   188d0:	e7da      	b.n	18888 <bt_smp_encrypt_change+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   188d2:	2105      	movs	r1, #5
   188d4:	4630      	mov	r0, r6
   188d6:	f006 fc5f 	bl	1f198 <atomic_test_bit>
   188da:	b9b0      	cbnz	r0, 1890a <bt_smp_encrypt_change+0x132>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   188dc:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   188e0:	07db      	lsls	r3, r3, #31
   188e2:	d512      	bpl.n	1890a <bt_smp_encrypt_change+0x132>
	struct bt_keys *keys = conn->le.keys;
   188e4:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   188e6:	211a      	movs	r1, #26
   188e8:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   188ea:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   188ee:	f001 f9df 	bl	19cb0 <bt_rand>
   188f2:	4681      	mov	r9, r0
   188f4:	b170      	cbz	r0, 18914 <bt_smp_encrypt_change+0x13c>
   188f6:	493c      	ldr	r1, [pc, #240]	; (189e8 <bt_smp_encrypt_change+0x210>)
   188f8:	4b3a      	ldr	r3, [pc, #232]	; (189e4 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to get random bytes");
   188fa:	483d      	ldr	r0, [pc, #244]	; (189f0 <bt_smp_encrypt_change+0x218>)
   188fc:	1ac9      	subs	r1, r1, r3
   188fe:	08c9      	lsrs	r1, r1, #3
   18900:	0189      	lsls	r1, r1, #6
   18902:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
   18906:	f003 fc3b 	bl	1c180 <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
   1890a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1890e:	2900      	cmp	r1, #0
   18910:	d195      	bne.n	1883e <bt_smp_encrypt_change+0x66>
   18912:	e785      	b.n	18820 <bt_smp_encrypt_change+0x48>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   18914:	2106      	movs	r1, #6
   18916:	4628      	mov	r0, r5
   18918:	f006 fc68 	bl	1f1ec <smp_create_pdu.isra.0>
		if (!buf) {
   1891c:	4680      	mov	r8, r0
   1891e:	b940      	cbnz	r0, 18932 <bt_smp_encrypt_change+0x15a>
   18920:	4931      	ldr	r1, [pc, #196]	; (189e8 <bt_smp_encrypt_change+0x210>)
   18922:	4b30      	ldr	r3, [pc, #192]	; (189e4 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   18924:	4833      	ldr	r0, [pc, #204]	; (189f4 <bt_smp_encrypt_change+0x21c>)
   18926:	1ac9      	subs	r1, r1, r3
   18928:	08c9      	lsrs	r1, r1, #3
   1892a:	0189      	lsls	r1, r1, #6
   1892c:	f041 0101 	orr.w	r1, r1, #1
   18930:	e7e9      	b.n	18906 <bt_smp_encrypt_change+0x12e>
	return net_buf_simple_add(&buf->b, len);
   18932:	2110      	movs	r1, #16
   18934:	3008      	adds	r0, #8
   18936:	f007 f82e 	bl	1f996 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1893a:	7b3a      	ldrb	r2, [r7, #12]
   1893c:	a901      	add	r1, sp, #4
   1893e:	4682      	mov	sl, r0
   18940:	f004 ff3a 	bl	1d7b8 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   18944:	7b38      	ldrb	r0, [r7, #12]
   18946:	280f      	cmp	r0, #15
   18948:	d805      	bhi.n	18956 <bt_smp_encrypt_change+0x17e>
			(void)memset(info->ltk + keys->enc_size, 0,
   1894a:	f1c0 0210 	rsb	r2, r0, #16
   1894e:	4649      	mov	r1, r9
   18950:	4450      	add	r0, sl
   18952:	f004 ff5c 	bl	1d80e <memset>
		smp_send(smp, buf, NULL, NULL);
   18956:	4641      	mov	r1, r8
   18958:	2200      	movs	r2, #0
   1895a:	4628      	mov	r0, r5
   1895c:	f006 fb7c 	bl	1f058 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   18960:	2107      	movs	r1, #7
   18962:	4628      	mov	r0, r5
   18964:	f006 fc42 	bl	1f1ec <smp_create_pdu.isra.0>
		if (!buf) {
   18968:	4680      	mov	r8, r0
   1896a:	b940      	cbnz	r0, 1897e <bt_smp_encrypt_change+0x1a6>
   1896c:	491e      	ldr	r1, [pc, #120]	; (189e8 <bt_smp_encrypt_change+0x210>)
   1896e:	4b1d      	ldr	r3, [pc, #116]	; (189e4 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Master Ident buffer");
   18970:	4821      	ldr	r0, [pc, #132]	; (189f8 <bt_smp_encrypt_change+0x220>)
   18972:	1ac9      	subs	r1, r1, r3
   18974:	08c9      	lsrs	r1, r1, #3
   18976:	0189      	lsls	r1, r1, #6
   18978:	f041 0101 	orr.w	r1, r1, #1
   1897c:	e7c3      	b.n	18906 <bt_smp_encrypt_change+0x12e>
   1897e:	210a      	movs	r1, #10
   18980:	3008      	adds	r0, #8
   18982:	f007 f808 	bl	1f996 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   18986:	2208      	movs	r2, #8
   18988:	4681      	mov	r9, r0
   1898a:	a905      	add	r1, sp, #20
   1898c:	3002      	adds	r0, #2
   1898e:	f004 ff13 	bl	1d7b8 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   18992:	2202      	movs	r2, #2
   18994:	a907      	add	r1, sp, #28
   18996:	4648      	mov	r0, r9
   18998:	f004 ff0e 	bl	1d7b8 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1899c:	4641      	mov	r1, r8
   1899e:	4628      	mov	r0, r5
   189a0:	4a16      	ldr	r2, [pc, #88]	; (189fc <bt_smp_encrypt_change+0x224>)
   189a2:	f006 fb59 	bl	1f058 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   189a6:	210d      	movs	r1, #13
   189a8:	4630      	mov	r0, r6
   189aa:	f006 fbf5 	bl	1f198 <atomic_test_bit>
   189ae:	2800      	cmp	r0, #0
   189b0:	d0ab      	beq.n	1890a <bt_smp_encrypt_change+0x132>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   189b2:	4638      	mov	r0, r7
   189b4:	2101      	movs	r1, #1
   189b6:	f006 ff85 	bl	1f8c4 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   189ba:	a901      	add	r1, sp, #4
   189bc:	2210      	movs	r2, #16
   189be:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   189c2:	f004 fef9 	bl	1d7b8 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   189c6:	a905      	add	r1, sp, #20
   189c8:	2208      	movs	r2, #8
   189ca:	f107 0040 	add.w	r0, r7, #64	; 0x40
   189ce:	f004 fef3 	bl	1d7b8 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   189d2:	2202      	movs	r2, #2
   189d4:	a907      	add	r1, sp, #28
   189d6:	f107 0048 	add.w	r0, r7, #72	; 0x48
   189da:	f004 feed 	bl	1d7b8 <memcpy>
   189de:	e794      	b.n	1890a <bt_smp_encrypt_change+0x132>
   189e0:	00022d6e 	.word	0x00022d6e
   189e4:	00020854 	.word	0x00020854
   189e8:	000208c4 	.word	0x000208c4
   189ec:	00022ccf 	.word	0x00022ccf
   189f0:	00022ce4 	.word	0x00022ce4
   189f4:	00022cff 	.word	0x00022cff
   189f8:	00022d26 	.word	0x00022d26
   189fc:	0001f879 	.word	0x0001f879

00018a00 <smp_timeout>:
   18a00:	4b0b      	ldr	r3, [pc, #44]	; (18a30 <smp_timeout+0x30>)
   18a02:	490c      	ldr	r1, [pc, #48]	; (18a34 <smp_timeout+0x34>)
{
   18a04:	b510      	push	{r4, lr}
   18a06:	1ac9      	subs	r1, r1, r3
   18a08:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   18a0a:	0189      	lsls	r1, r1, #6
{
   18a0c:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   18a0e:	f041 0101 	orr.w	r1, r1, #1
   18a12:	4809      	ldr	r0, [pc, #36]	; (18a38 <smp_timeout+0x38>)
   18a14:	f003 fbb4 	bl	1c180 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   18a18:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
   18a1c:	2108      	movs	r1, #8
   18a1e:	f7ff fc89 	bl	18334 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   18a22:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   18a26:	2104      	movs	r1, #4
}
   18a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   18a2c:	f006 bad5 	b.w	1efda <atomic_set_bit>
   18a30:	00020854 	.word	0x00020854
   18a34:	000208c4 	.word	0x000208c4
   18a38:	00022d4d 	.word	0x00022d4d

00018a3c <bt_smp_update_keys>:
{
   18a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a3e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   18a40:	f7fe fd2c 	bl	1749c <smp_chan_get>
	if (!smp) {
   18a44:	4605      	mov	r5, r0
   18a46:	2800      	cmp	r0, #0
   18a48:	d07c      	beq.n	18b44 <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18a4a:	1d06      	adds	r6, r0, #4
   18a4c:	2103      	movs	r1, #3
   18a4e:	4630      	mov	r0, r6
   18a50:	f006 fba2 	bl	1f198 <atomic_test_bit>
   18a54:	2800      	cmp	r0, #0
   18a56:	d075      	beq.n	18b44 <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   18a58:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   18a5c:	b108      	cbz	r0, 18a62 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   18a5e:	f006 ff35 	bl	1f8cc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18a62:	f104 0788 	add.w	r7, r4, #136	; 0x88
   18a66:	7a20      	ldrb	r0, [r4, #8]
   18a68:	4639      	mov	r1, r7
   18a6a:	f000 f889 	bl	18b80 <bt_keys_get_addr>
   18a6e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   18a72:	b9b0      	cbnz	r0, 18aa2 <bt_smp_update_keys+0x66>
   18a74:	4a34      	ldr	r2, [pc, #208]	; (18b48 <bt_smp_update_keys+0x10c>)
   18a76:	4c35      	ldr	r4, [pc, #212]	; (18b4c <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
   18a78:	4638      	mov	r0, r7
   18a7a:	1aa4      	subs	r4, r4, r2
   18a7c:	f7f9 f9ee 	bl	11e5c <bt_addr_le_str_real>
   18a80:	f7f7 fd6c 	bl	1055c <z_log_strdup>
   18a84:	08e4      	lsrs	r4, r4, #3
   18a86:	01a4      	lsls	r4, r4, #6
   18a88:	f044 0401 	orr.w	r4, r4, #1
   18a8c:	4601      	mov	r1, r0
   18a8e:	4622      	mov	r2, r4
   18a90:	482f      	ldr	r0, [pc, #188]	; (18b50 <bt_smp_update_keys+0x114>)
   18a92:	f003 fb82 	bl	1c19a <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   18a96:	4628      	mov	r0, r5
   18a98:	2108      	movs	r1, #8
}
   18a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   18a9e:	f006 bdbe 	b.w	1f61e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   18aa2:	210e      	movs	r1, #14
   18aa4:	4630      	mov	r0, r6
   18aa6:	f006 fb77 	bl	1f198 <atomic_test_bit>
   18aaa:	b128      	cbz	r0, 18ab8 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   18aac:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   18ab0:	7b53      	ldrb	r3, [r2, #13]
   18ab2:	f043 0302 	orr.w	r3, r3, #2
   18ab6:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   18ab8:	7a2a      	ldrb	r2, [r5, #8]
   18aba:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   18abe:	2a03      	cmp	r2, #3
   18ac0:	7b4b      	ldrb	r3, [r1, #13]
   18ac2:	d836      	bhi.n	18b32 <bt_smp_update_keys+0xf6>
   18ac4:	b3c2      	cbz	r2, 18b38 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   18ac6:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   18aca:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   18acc:	7b6b      	ldrb	r3, [r5, #13]
   18ace:	7d2a      	ldrb	r2, [r5, #20]
   18ad0:	4293      	cmp	r3, r2
   18ad2:	bf28      	it	cs
   18ad4:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   18ad6:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18ad8:	4630      	mov	r0, r6
   18ada:	2105      	movs	r1, #5
   18adc:	f006 fb5c 	bl	1f198 <atomic_test_bit>
   18ae0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   18ae4:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18ae6:	b350      	cbz	r0, 18b3e <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   18ae8:	f042 0210 	orr.w	r2, r2, #16
   18aec:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18aee:	210d      	movs	r1, #13
   18af0:	4630      	mov	r0, r6
   18af2:	f006 fb51 	bl	1f198 <atomic_test_bit>
   18af6:	b328      	cbz	r0, 18b44 <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   18af8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   18afc:	2120      	movs	r1, #32
   18afe:	f006 fee1 	bl	1f8c4 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   18b02:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   18b06:	f105 0147 	add.w	r1, r5, #71	; 0x47
   18b0a:	2210      	movs	r2, #16
   18b0c:	301a      	adds	r0, #26
   18b0e:	f004 fe53 	bl	1d7b8 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   18b12:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   18b16:	2208      	movs	r2, #8
   18b18:	2100      	movs	r1, #0
   18b1a:	3010      	adds	r0, #16
   18b1c:	f004 fe77 	bl	1d80e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   18b20:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   18b24:	2202      	movs	r2, #2
}
   18b26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   18b2a:	2100      	movs	r1, #0
   18b2c:	3018      	adds	r0, #24
   18b2e:	f004 be6e 	b.w	1d80e <memset>
	switch (smp->method) {
   18b32:	3a05      	subs	r2, #5
   18b34:	2a01      	cmp	r2, #1
   18b36:	d9c6      	bls.n	18ac6 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   18b38:	f023 0301 	bic.w	r3, r3, #1
   18b3c:	e7c5      	b.n	18aca <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   18b3e:	f022 0210 	bic.w	r2, r2, #16
   18b42:	735a      	strb	r2, [r3, #13]
}
   18b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b46:	bf00      	nop
   18b48:	00020854 	.word	0x00020854
   18b4c:	000208c4 	.word	0x000208c4
   18b50:	00022bab 	.word	0x00022bab

00018b54 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   18b54:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18b56:	4b07      	ldr	r3, [pc, #28]	; (18b74 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   18b58:	4807      	ldr	r0, [pc, #28]	; (18b78 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18b5a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   18b5e:	f003 0306 	and.w	r3, r3, #6
   18b62:	1f9a      	subs	r2, r3, #6
   18b64:	4253      	negs	r3, r2
   18b66:	4153      	adcs	r3, r2
   18b68:	4a04      	ldr	r2, [pc, #16]	; (18b7c <bt_smp_init+0x28>)
   18b6a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   18b6c:	f7fb fd36 	bl	145dc <bt_pub_key_gen>
	}

	return smp_self_test();
}
   18b70:	2000      	movs	r0, #0
   18b72:	bd08      	pop	{r3, pc}
   18b74:	200002a0 	.word	0x200002a0
   18b78:	20000558 	.word	0x20000558
   18b7c:	20002196 	.word	0x20002196

00018b80 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   18b82:	4c11      	ldr	r4, [pc, #68]	; (18bc8 <bt_keys_get_addr+0x48>)
   18b84:	7823      	ldrb	r3, [r4, #0]
   18b86:	4283      	cmp	r3, r0
{
   18b88:	4605      	mov	r5, r0
   18b8a:	460e      	mov	r6, r1
   18b8c:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   18b8e:	d00b      	beq.n	18ba8 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   18b90:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   18b92:	480e      	ldr	r0, [pc, #56]	; (18bcc <bt_keys_get_addr+0x4c>)
   18b94:	9400      	str	r4, [sp, #0]
   18b96:	2207      	movs	r2, #7
   18b98:	4669      	mov	r1, sp
   18b9a:	f8cd 4003 	str.w	r4, [sp, #3]
   18b9e:	f004 fdfb 	bl	1d798 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   18ba2:	b140      	cbz	r0, 18bb6 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   18ba4:	4620      	mov	r0, r4
   18ba6:	e00d      	b.n	18bc4 <bt_keys_get_addr+0x44>
   18ba8:	2207      	movs	r2, #7
   18baa:	1c60      	adds	r0, r4, #1
   18bac:	f004 fdf4 	bl	1d798 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   18bb0:	2800      	cmp	r0, #0
   18bb2:	d1ed      	bne.n	18b90 <bt_keys_get_addr+0x10>
   18bb4:	e7f6      	b.n	18ba4 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   18bb6:	4805      	ldr	r0, [pc, #20]	; (18bcc <bt_keys_get_addr+0x4c>)
		keys->id = id;
   18bb8:	703d      	strb	r5, [r7, #0]
   18bba:	2207      	movs	r2, #7
   18bbc:	4631      	mov	r1, r6
   18bbe:	f004 fdfb 	bl	1d7b8 <memcpy>
		return keys;
   18bc2:	4801      	ldr	r0, [pc, #4]	; (18bc8 <bt_keys_get_addr+0x48>)
}
   18bc4:	b003      	add	sp, #12
   18bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18bc8:	20001ef0 	.word	0x20001ef0
   18bcc:	20001ef1 	.word	0x20001ef1

00018bd0 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   18bd0:	460b      	mov	r3, r1
   18bd2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   18bd4:	4a04      	ldr	r2, [pc, #16]	; (18be8 <bt_keys_foreach+0x18>)
{
   18bd6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   18bd8:	89d4      	ldrh	r4, [r2, #14]
   18bda:	4204      	tst	r4, r0
   18bdc:	d002      	beq.n	18be4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   18bde:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   18be0:	4610      	mov	r0, r2
   18be2:	4718      	bx	r3
}
   18be4:	bc10      	pop	{r4}
   18be6:	4770      	bx	lr
   18be8:	20001ef0 	.word	0x20001ef0

00018bec <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   18bec:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18bee:	4c09      	ldr	r4, [pc, #36]	; (18c14 <bt_keys_find+0x28>)
{
   18bf0:	460b      	mov	r3, r1
   18bf2:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18bf4:	89e2      	ldrh	r2, [r4, #14]
   18bf6:	4202      	tst	r2, r0
   18bf8:	d007      	beq.n	18c0a <bt_keys_find+0x1e>
   18bfa:	7822      	ldrb	r2, [r4, #0]
   18bfc:	429a      	cmp	r2, r3
   18bfe:	d104      	bne.n	18c0a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   18c00:	2207      	movs	r2, #7
   18c02:	1c60      	adds	r0, r4, #1
   18c04:	f004 fdc8 	bl	1d798 <memcmp>
   18c08:	b108      	cbz	r0, 18c0e <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   18c0a:	2000      	movs	r0, #0
}
   18c0c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   18c0e:	4620      	mov	r0, r4
   18c10:	e7fc      	b.n	18c0c <bt_keys_find+0x20>
   18c12:	bf00      	nop
   18c14:	20001ef0 	.word	0x20001ef0

00018c18 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   18c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   18c1a:	780b      	ldrb	r3, [r1, #0]
   18c1c:	2b01      	cmp	r3, #1
   18c1e:	4607      	mov	r7, r0
   18c20:	460c      	mov	r4, r1
   18c22:	d001      	beq.n	18c28 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   18c24:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   18c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   18c28:	798b      	ldrb	r3, [r1, #6]
   18c2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18c2e:	2b40      	cmp	r3, #64	; 0x40
   18c30:	d1f8      	bne.n	18c24 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18c32:	4d13      	ldr	r5, [pc, #76]	; (18c80 <bt_keys_find_irk+0x68>)
   18c34:	89eb      	ldrh	r3, [r5, #14]
   18c36:	f013 0f02 	tst.w	r3, #2
   18c3a:	462e      	mov	r6, r5
   18c3c:	d0f2      	beq.n	18c24 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   18c3e:	7833      	ldrb	r3, [r6, #0]
   18c40:	42bb      	cmp	r3, r7
   18c42:	d10b      	bne.n	18c5c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   18c44:	2206      	movs	r2, #6
   18c46:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   18c4a:	1c60      	adds	r0, r4, #1
   18c4c:	f004 fda4 	bl	1d798 <memcmp>
   18c50:	b908      	cbnz	r0, 18c56 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   18c52:	4628      	mov	r0, r5
   18c54:	e7e7      	b.n	18c26 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18c56:	89f3      	ldrh	r3, [r6, #14]
   18c58:	079b      	lsls	r3, r3, #30
   18c5a:	d5e3      	bpl.n	18c24 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   18c5c:	7833      	ldrb	r3, [r6, #0]
   18c5e:	42bb      	cmp	r3, r7
   18c60:	d1e0      	bne.n	18c24 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   18c62:	3401      	adds	r4, #1
   18c64:	4807      	ldr	r0, [pc, #28]	; (18c84 <bt_keys_find_irk+0x6c>)
   18c66:	4621      	mov	r1, r4
   18c68:	f004 fe31 	bl	1d8ce <bt_rpa_irk_matches>
   18c6c:	2800      	cmp	r0, #0
   18c6e:	d0d9      	beq.n	18c24 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   18c70:	4805      	ldr	r0, [pc, #20]	; (18c88 <bt_keys_find_irk+0x70>)
   18c72:	2206      	movs	r2, #6
   18c74:	4621      	mov	r1, r4
   18c76:	f004 fd9f 	bl	1d7b8 <memcpy>
			return &key_pool[i];
   18c7a:	4801      	ldr	r0, [pc, #4]	; (18c80 <bt_keys_find_irk+0x68>)
}
   18c7c:	e7d3      	b.n	18c26 <bt_keys_find_irk+0xe>
   18c7e:	bf00      	nop
   18c80:	20001ef0 	.word	0x20001ef0
   18c84:	20001f1a 	.word	0x20001f1a
   18c88:	20001f2a 	.word	0x20001f2a

00018c8c <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18c8c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   18c8e:	4c06      	ldr	r4, [pc, #24]	; (18ca8 <bt_keys_find_addr+0x1c>)
   18c90:	7823      	ldrb	r3, [r4, #0]
   18c92:	4283      	cmp	r3, r0
   18c94:	d104      	bne.n	18ca0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   18c96:	2207      	movs	r2, #7
   18c98:	1c60      	adds	r0, r4, #1
   18c9a:	f004 fd7d 	bl	1d798 <memcmp>
   18c9e:	b108      	cbz	r0, 18ca4 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   18ca0:	2000      	movs	r0, #0
}
   18ca2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   18ca4:	4620      	mov	r0, r4
   18ca6:	e7fc      	b.n	18ca2 <bt_keys_find_addr+0x16>
   18ca8:	20001ef0 	.word	0x20001ef0

00018cac <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18cac:	4b02      	ldr	r3, [pc, #8]	; (18cb8 <net_buf_pool_get+0xc>)
   18cae:	2228      	movs	r2, #40	; 0x28
   18cb0:	fb02 3000 	mla	r0, r2, r0, r3
   18cb4:	4770      	bx	lr
   18cb6:	bf00      	nop
   18cb8:	200007c0 	.word	0x200007c0

00018cbc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18cbc:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   18cbe:	4a05      	ldr	r2, [pc, #20]	; (18cd4 <net_buf_id+0x18>)
   18cc0:	2128      	movs	r1, #40	; 0x28
   18cc2:	fb01 2303 	mla	r3, r1, r3, r2
   18cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18cc8:	1ac0      	subs	r0, r0, r3
}
   18cca:	4b03      	ldr	r3, [pc, #12]	; (18cd8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   18ccc:	10c0      	asrs	r0, r0, #3
}
   18cce:	4358      	muls	r0, r3
   18cd0:	4770      	bx	lr
   18cd2:	bf00      	nop
   18cd4:	200007c0 	.word	0x200007c0
   18cd8:	aaaaaaab 	.word	0xaaaaaaab

00018cdc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   18cdc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18cde:	4a0a      	ldr	r2, [pc, #40]	; (18d08 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18ce0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18ce2:	2428      	movs	r4, #40	; 0x28
   18ce4:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   18ce8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18cea:	6a1b      	ldr	r3, [r3, #32]
   18cec:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   18cee:	6823      	ldr	r3, [r4, #0]
   18cf0:	429a      	cmp	r2, r3
   18cf2:	bf94      	ite	ls
   18cf4:	600a      	strls	r2, [r1, #0]
   18cf6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   18cf8:	f7ff ffe0 	bl	18cbc <net_buf_id>
   18cfc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   18d00:	fb02 3000 	mla	r0, r2, r0, r3
   18d04:	bd10      	pop	{r4, pc}
   18d06:	bf00      	nop
   18d08:	200007c0 	.word	0x200007c0

00018d0c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   18d0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18d10:	4605      	mov	r5, r0
   18d12:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18d14:	4610      	mov	r0, r2
   18d16:	4619      	mov	r1, r3
{
   18d18:	4616      	mov	r6, r2
   18d1a:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18d1c:	f007 faea 	bl	202f4 <sys_clock_timeout_end_calc>
   18d20:	4680      	mov	r8, r0
   18d22:	4689      	mov	r9, r1
	__asm__ volatile(
   18d24:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d28:	f3ef 8a11 	mrs	sl, BASEPRI
   18d2c:	f383 8811 	msr	BASEPRI, r3
   18d30:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   18d34:	8b6b      	ldrh	r3, [r5, #26]
   18d36:	2b00      	cmp	r3, #0
   18d38:	d054      	beq.n	18de4 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   18d3a:	8b2a      	ldrh	r2, [r5, #24]
   18d3c:	429a      	cmp	r2, r3
   18d3e:	d93d      	bls.n	18dbc <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   18d40:	2200      	movs	r2, #0
   18d42:	2300      	movs	r3, #0
   18d44:	4628      	mov	r0, r5
   18d46:	f001 fcf5 	bl	1a734 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   18d4a:	4604      	mov	r4, r0
   18d4c:	2800      	cmp	r0, #0
   18d4e:	d035      	beq.n	18dbc <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   18d50:	f38a 8811 	msr	BASEPRI, sl
   18d54:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   18d58:	9b01      	ldr	r3, [sp, #4]
   18d5a:	2b00      	cmp	r3, #0
   18d5c:	d052      	beq.n	18e04 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18d5e:	ea56 0307 	orrs.w	r3, r6, r7
   18d62:	d010      	beq.n	18d86 <net_buf_alloc_len+0x7a>
   18d64:	1c7b      	adds	r3, r7, #1
   18d66:	bf08      	it	eq
   18d68:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18d6c:	d00b      	beq.n	18d86 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   18d6e:	f002 fc37 	bl	1b5e0 <sys_clock_tick_get>
   18d72:	ebb8 0600 	subs.w	r6, r8, r0
   18d76:	eb69 0701 	sbc.w	r7, r9, r1
   18d7a:	2e00      	cmp	r6, #0
   18d7c:	f177 0300 	sbcs.w	r3, r7, #0
   18d80:	bfbc      	itt	lt
   18d82:	2600      	movlt	r6, #0
   18d84:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18d86:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   18d88:	f8df 8090 	ldr.w	r8, [pc, #144]	; 18e1c <net_buf_alloc_len+0x110>
   18d8c:	2228      	movs	r2, #40	; 0x28
   18d8e:	fb02 8303 	mla	r3, r2, r3, r8
   18d92:	a901      	add	r1, sp, #4
   18d94:	6a1b      	ldr	r3, [r3, #32]
   18d96:	681b      	ldr	r3, [r3, #0]
   18d98:	4632      	mov	r2, r6
   18d9a:	681d      	ldr	r5, [r3, #0]
   18d9c:	4620      	mov	r0, r4
   18d9e:	463b      	mov	r3, r7
   18da0:	47a8      	blx	r5
   18da2:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   18da4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   18da6:	bb70      	cbnz	r0, 18e06 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   18da8:	79a0      	ldrb	r0, [r4, #6]
   18daa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18dae:	4621      	mov	r1, r4
   18db0:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   18db4:	f006 fffb 	bl	1fdae <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   18db8:	462c      	mov	r4, r5
}
   18dba:	e01f      	b.n	18dfc <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   18dbc:	8b68      	ldrh	r0, [r5, #26]
   18dbe:	1e43      	subs	r3, r0, #1
   18dc0:	836b      	strh	r3, [r5, #26]
   18dc2:	f38a 8811 	msr	BASEPRI, sl
   18dc6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   18dca:	8b2c      	ldrh	r4, [r5, #24]
   18dcc:	1a24      	subs	r4, r4, r0
   18dce:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18dd0:	2318      	movs	r3, #24
   18dd2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   18dd6:	4811      	ldr	r0, [pc, #68]	; (18e1c <net_buf_alloc_len+0x110>)
   18dd8:	4b11      	ldr	r3, [pc, #68]	; (18e20 <net_buf_alloc_len+0x114>)
   18dda:	1a2d      	subs	r5, r5, r0
   18ddc:	10ed      	asrs	r5, r5, #3
   18dde:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   18de0:	71a5      	strb	r5, [r4, #6]
		goto success;
   18de2:	e7b9      	b.n	18d58 <net_buf_alloc_len+0x4c>
   18de4:	f38a 8811 	msr	BASEPRI, sl
   18de8:	f3bf 8f6f 	isb	sy
   18dec:	4632      	mov	r2, r6
   18dee:	463b      	mov	r3, r7
   18df0:	4628      	mov	r0, r5
   18df2:	f001 fc9f 	bl	1a734 <z_impl_k_queue_get>
	if (!buf) {
   18df6:	4604      	mov	r4, r0
   18df8:	2800      	cmp	r0, #0
   18dfa:	d1ad      	bne.n	18d58 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   18dfc:	4620      	mov	r0, r4
   18dfe:	b002      	add	sp, #8
   18e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   18e04:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   18e06:	2300      	movs	r3, #0
	buf->ref   = 1U;
   18e08:	2201      	movs	r2, #1
	buf->frags = NULL;
   18e0a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   18e0c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   18e0e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   18e10:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   18e12:	6923      	ldr	r3, [r4, #16]
   18e14:	81e2      	strh	r2, [r4, #14]
   18e16:	60a3      	str	r3, [r4, #8]
	return buf;
   18e18:	e7f0      	b.n	18dfc <net_buf_alloc_len+0xf0>
   18e1a:	bf00      	nop
   18e1c:	200007c0 	.word	0x200007c0
   18e20:	cccccccd 	.word	0xcccccccd

00018e24 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   18e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e28:	4d17      	ldr	r5, [pc, #92]	; (18e88 <net_buf_unref+0x64>)
   18e2a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   18e2c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   18e2e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   18e30:	b90c      	cbnz	r4, 18e36 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   18e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   18e36:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   18e38:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   18e3c:	3b01      	subs	r3, #1
   18e3e:	b2db      	uxtb	r3, r3
   18e40:	7123      	strb	r3, [r4, #4]
   18e42:	2b00      	cmp	r3, #0
   18e44:	d1f5      	bne.n	18e32 <net_buf_unref+0xe>
		if (buf->__buf) {
   18e46:	6921      	ldr	r1, [r4, #16]
   18e48:	b159      	cbz	r1, 18e62 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   18e4a:	7963      	ldrb	r3, [r4, #5]
   18e4c:	079b      	lsls	r3, r3, #30
   18e4e:	d407      	bmi.n	18e60 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   18e50:	79a3      	ldrb	r3, [r4, #6]
   18e52:	fb07 5303 	mla	r3, r7, r3, r5
   18e56:	4620      	mov	r0, r4
   18e58:	6a1b      	ldr	r3, [r3, #32]
   18e5a:	681b      	ldr	r3, [r3, #0]
   18e5c:	689b      	ldr	r3, [r3, #8]
   18e5e:	4798      	blx	r3
			buf->__buf = NULL;
   18e60:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   18e62:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   18e64:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   18e66:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   18e6a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   18e6c:	69db      	ldr	r3, [r3, #28]
   18e6e:	b11b      	cbz	r3, 18e78 <net_buf_unref+0x54>
			pool->destroy(buf);
   18e70:	4620      	mov	r0, r4
   18e72:	4798      	blx	r3
{
   18e74:	4644      	mov	r4, r8
   18e76:	e7db      	b.n	18e30 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   18e78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18e7c:	4621      	mov	r1, r4
   18e7e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   18e82:	f006 ff94 	bl	1fdae <k_queue_prepend>
}
   18e86:	e7f5      	b.n	18e74 <net_buf_unref+0x50>
   18e88:	200007c0 	.word	0x200007c0

00018e8c <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   18e8c:	4b01      	ldr	r3, [pc, #4]	; (18e94 <hfclk_on_callback+0x8>)
   18e8e:	2201      	movs	r2, #1
   18e90:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   18e92:	4770      	bx	lr
   18e94:	4000c000 	.word	0x4000c000

00018e98 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   18e98:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   18e9a:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   18e9c:	d10b      	bne.n	18eb6 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   18e9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   18ea0:	4b06      	ldr	r3, [pc, #24]	; (18ebc <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   18ea2:	4807      	ldr	r0, [pc, #28]	; (18ec0 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   18ea4:	4359      	muls	r1, r3
	val->val1 = uval / 1000000;
   18ea6:	fb91 f3f0 	sdiv	r3, r1, r0
   18eaa:	6013      	str	r3, [r2, #0]
	val->val2 = uval % 1000000;
   18eac:	fb00 1313 	mls	r3, r0, r3, r1
   18eb0:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   18eb2:	2000      	movs	r0, #0
   18eb4:	4770      	bx	lr
		return -ENOTSUP;
   18eb6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   18eba:	4770      	bx	lr
   18ebc:	0003d090 	.word	0x0003d090
   18ec0:	000f4240 	.word	0x000f4240

00018ec4 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18ec4:	4b03      	ldr	r3, [pc, #12]	; (18ed4 <temp_nrf5_isr+0x10>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   18ec6:	6900      	ldr	r0, [r0, #16]
   18ec8:	2200      	movs	r2, #0
   18eca:	601a      	str	r2, [r3, #0]
   18ecc:	681b      	ldr	r3, [r3, #0]
	z_impl_k_sem_give(sem);
   18ece:	f001 bc65 	b.w	1a79c <z_impl_k_sem_give>
   18ed2:	bf00      	nop
   18ed4:	4000c100 	.word	0x4000c100

00018ed8 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   18ed8:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   18eda:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   18edc:	2000      	movs	r0, #0
   18ede:	f7f7 ff43 	bl	10d68 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   18ee2:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   18ee4:	f04f 32ff 	mov.w	r2, #4294967295
   18ee8:	2100      	movs	r1, #0
   18eea:	4620      	mov	r0, r4
   18eec:	f006 ffa5 	bl	1fe3a <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   18ef0:	f104 0018 	add.w	r0, r4, #24
   18ef4:	f006 fecd 	bl	1fc92 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   18ef8:	2200      	movs	r2, #0
   18efa:	2101      	movs	r1, #1
   18efc:	200c      	movs	r0, #12
   18efe:	f7f8 fab1 	bl	11464 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   18f02:	200c      	movs	r0, #12
   18f04:	f7f8 fa7c 	bl	11400 <arch_irq_enable>
    p_reg->INTENSET = mask;
   18f08:	4b02      	ldr	r3, [pc, #8]	; (18f14 <temp_nrf5_init+0x3c>)
   18f0a:	2201      	movs	r2, #1
   18f0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   18f10:	2000      	movs	r0, #0
   18f12:	bd10      	pop	{r4, pc}
   18f14:	4000c000 	.word	0x4000c000

00018f18 <temp_nrf5_sample_fetch>:
{
   18f18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   18f1a:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   18f1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   18f1e:	b36b      	cbz	r3, 18f7c <temp_nrf5_sample_fetch+0x64>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   18f20:	2938      	cmp	r1, #56	; 0x38
   18f22:	d001      	beq.n	18f28 <temp_nrf5_sample_fetch+0x10>
   18f24:	290c      	cmp	r1, #12
   18f26:	d12c      	bne.n	18f82 <temp_nrf5_sample_fetch+0x6a>
	k_mutex_lock(&data->mutex, K_FOREVER);
   18f28:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   18f2c:	f04f 32ff 	mov.w	r2, #4294967295
   18f30:	f04f 33ff 	mov.w	r3, #4294967295
   18f34:	4630      	mov	r0, r6
   18f36:	f001 fb3f 	bl	1a5b8 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   18f3a:	4b13      	ldr	r3, [pc, #76]	; (18f88 <temp_nrf5_sample_fetch+0x70>)
   18f3c:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   18f3e:	6b28      	ldr	r0, [r5, #48]	; 0x30
   18f40:	2303      	movs	r3, #3
   18f42:	2400      	movs	r4, #0
   18f44:	4669      	mov	r1, sp
   18f46:	9403      	str	r4, [sp, #12]
   18f48:	9302      	str	r3, [sp, #8]
   18f4a:	f002 fd50 	bl	1b9ee <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   18f4e:	f04f 32ff 	mov.w	r2, #4294967295
   18f52:	f04f 33ff 	mov.w	r3, #4294967295
   18f56:	4628      	mov	r0, r5
   18f58:	f001 fc46 	bl	1a7e8 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   18f5c:	6b28      	ldr	r0, [r5, #48]	; 0x30
   18f5e:	f002 fd8f 	bl	1ba80 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   18f62:	4b0a      	ldr	r3, [pc, #40]	; (18f8c <temp_nrf5_sample_fetch+0x74>)
   18f64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   18f68:	62eb      	str	r3, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   18f6a:	4b09      	ldr	r3, [pc, #36]	; (18f90 <temp_nrf5_sample_fetch+0x78>)
   18f6c:	2201      	movs	r2, #1
   18f6e:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   18f70:	4630      	mov	r0, r6
   18f72:	f001 fb99 	bl	1a6a8 <z_impl_k_mutex_unlock>
	return 0;
   18f76:	4620      	mov	r0, r4
}
   18f78:	b004      	add	sp, #16
   18f7a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   18f7c:	f06f 000a 	mvn.w	r0, #10
   18f80:	e7fa      	b.n	18f78 <temp_nrf5_sample_fetch+0x60>
		return -ENOTSUP;
   18f82:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18f86:	e7f7      	b.n	18f78 <temp_nrf5_sample_fetch+0x60>
   18f88:	00018e8d 	.word	0x00018e8d
   18f8c:	4000c000 	.word	0x4000c000
   18f90:	4000c004 	.word	0x4000c004

00018f94 <random_byte_get>:
	__asm__ volatile(
   18f94:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f98:	f3ef 8211 	mrs	r2, BASEPRI
   18f9c:	f383 8811 	msr	BASEPRI, r3
   18fa0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18fa4:	4b08      	ldr	r3, [pc, #32]	; (18fc8 <random_byte_get+0x34>)
   18fa6:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   18fa8:	b159      	cbz	r1, 18fc2 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   18faa:	4908      	ldr	r1, [pc, #32]	; (18fcc <random_byte_get+0x38>)
   18fac:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18fb0:	2100      	movs	r1, #0
   18fb2:	6019      	str	r1, [r3, #0]
   18fb4:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   18fb6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18fb8:	f382 8811 	msr	BASEPRI, r2
   18fbc:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18fc0:	4770      	bx	lr
	int retval = -EAGAIN;
   18fc2:	f06f 000a 	mvn.w	r0, #10
   18fc6:	e7f7      	b.n	18fb8 <random_byte_get+0x24>
   18fc8:	4000d100 	.word	0x4000d100
   18fcc:	4000d000 	.word	0x4000d000

00018fd0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18fd2:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   18fd4:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   18fd6:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   18fd8:	f04f 0540 	mov.w	r5, #64	; 0x40
   18fdc:	f3ef 8011 	mrs	r0, BASEPRI
   18fe0:	f385 8811 	msr	BASEPRI, r5
   18fe4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18fe8:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18fea:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   18fee:	1ba4      	subs	r4, r4, r6
   18ff0:	403c      	ands	r4, r7
	if (available < len) {
   18ff2:	42a2      	cmp	r2, r4
		len = available;
   18ff4:	bf88      	it	hi
   18ff6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18ff8:	eb06 0c02 	add.w	ip, r6, r2
   18ffc:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   19000:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   19002:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   19006:	f380 8811 	msr	BASEPRI, r0
   1900a:	f3bf 8f6f 	isb	sy
   1900e:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   19010:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   19012:	4282      	cmp	r2, r0
   19014:	d119      	bne.n	1904a <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   19016:	4576      	cmp	r6, lr
   19018:	d10d      	bne.n	19036 <rng_pool_get+0x66>
	__asm__ volatile(
   1901a:	f04f 0540 	mov.w	r5, #64	; 0x40
   1901e:	f3ef 8211 	mrs	r2, BASEPRI
   19022:	f385 8811 	msr	BASEPRI, r5
   19026:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1902a:	781d      	ldrb	r5, [r3, #0]
   1902c:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1902e:	f382 8811 	msr	BASEPRI, r2
   19032:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   19036:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   19038:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1903a:	b288      	uxth	r0, r1
	available = available - len;
   1903c:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1903e:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19040:	bf22      	ittt	cs
   19042:	4b06      	ldrcs	r3, [pc, #24]	; (1905c <rng_pool_get+0x8c>)
   19044:	2201      	movcs	r2, #1
   19046:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   19048:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1904a:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1904e:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   19050:	f89c c005 	ldrb.w	ip, [ip, #5]
   19054:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   19058:	403d      	ands	r5, r7
   1905a:	e7da      	b.n	19012 <rng_pool_get+0x42>
   1905c:	4000d000 	.word	0x4000d000

00019060 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19060:	43db      	mvns	r3, r3
{
   19062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19066:	f013 0501 	ands.w	r5, r3, #1
{
   1906a:	460e      	mov	r6, r1
   1906c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1906e:	d004      	beq.n	1907a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   19070:	4821      	ldr	r0, [pc, #132]	; (190f8 <entropy_nrf5_get_entropy_isr+0x98>)
   19072:	f7ff ffad 	bl	18fd0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   19076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1907a:	2a00      	cmp	r2, #0
   1907c:	d033      	beq.n	190e6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1907e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19082:	f3ef 8811 	mrs	r8, BASEPRI
   19086:	f383 8811 	msr	BASEPRI, r3
   1908a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1908e:	200d      	movs	r0, #13
   19090:	f7f8 f9da 	bl	11448 <arch_irq_is_enabled>
   19094:	4607      	mov	r7, r0
		irq_disable(IRQN);
   19096:	200d      	movs	r0, #13
   19098:	f7f8 f9c2 	bl	11420 <arch_irq_disable>
	__asm__ volatile(
   1909c:	f388 8811 	msr	BASEPRI, r8
   190a0:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   190a4:	4a15      	ldr	r2, [pc, #84]	; (190fc <entropy_nrf5_get_entropy_isr+0x9c>)
   190a6:	6015      	str	r5, [r2, #0]
   190a8:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   190aa:	4b15      	ldr	r3, [pc, #84]	; (19100 <entropy_nrf5_get_entropy_isr+0xa0>)
   190ac:	2101      	movs	r1, #1
   190ae:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   190b0:	4914      	ldr	r1, [pc, #80]	; (19104 <entropy_nrf5_get_entropy_isr+0xa4>)
   190b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   190b6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   190ba:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   190bc:	4691      	mov	r9, r2
   190be:	468a      	mov	sl, r1
   190c0:	4698      	mov	r8, r3
   190c2:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   190c6:	b183      	cbz	r3, 190ea <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   190c8:	f7ff ff64 	bl	18f94 <random_byte_get>
			if (byte < 0) {
   190cc:	1e03      	subs	r3, r0, #0
   190ce:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   190d2:	dbf6      	blt.n	190c2 <entropy_nrf5_get_entropy_isr+0x62>
   190d4:	3d01      	subs	r5, #1
   190d6:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   190d8:	5573      	strb	r3, [r6, r5]
		} while (len);
   190da:	2d00      	cmp	r5, #0
   190dc:	d1f1      	bne.n	190c2 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   190de:	b117      	cbz	r7, 190e6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   190e0:	200d      	movs	r0, #13
   190e2:	f7f8 f98d 	bl	11400 <arch_irq_enable>
	return cnt;
   190e6:	4620      	mov	r0, r4
   190e8:	e7c5      	b.n	19076 <entropy_nrf5_get_entropy_isr+0x16>
   190ea:	f3bf 8f4f 	dsb	sy
				__WFE();
   190ee:	bf20      	wfe
				__SEV();
   190f0:	bf40      	sev
				__WFE();
   190f2:	bf20      	wfe
   190f4:	e7e5      	b.n	190c2 <entropy_nrf5_get_entropy_isr+0x62>
   190f6:	bf00      	nop
   190f8:	20001fb8 	.word	0x20001fb8
   190fc:	4000d100 	.word	0x4000d100
   19100:	4000d000 	.word	0x4000d000
   19104:	e000e100 	.word	0xe000e100

00019108 <entropy_nrf5_get_entropy>:
{
   19108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1910c:	4f13      	ldr	r7, [pc, #76]	; (1915c <entropy_nrf5_get_entropy+0x54>)
   1910e:	460d      	mov	r5, r1
   19110:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19112:	f107 0845 	add.w	r8, r7, #69	; 0x45
   19116:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1911a:	b914      	cbnz	r4, 19122 <entropy_nrf5_get_entropy+0x1a>
}
   1911c:	4620      	mov	r0, r4
   1911e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19122:	f04f 33ff 	mov.w	r3, #4294967295
   19126:	f04f 32ff 	mov.w	r2, #4294967295
   1912a:	4638      	mov	r0, r7
   1912c:	f001 fb5c 	bl	1a7e8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19130:	4622      	mov	r2, r4
   19132:	4629      	mov	r1, r5
   19134:	4640      	mov	r0, r8
   19136:	f7ff ff4b 	bl	18fd0 <rng_pool_get>
   1913a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1913c:	4638      	mov	r0, r7
   1913e:	f001 fb2d 	bl	1a79c <z_impl_k_sem_give>
		if (bytes == 0U) {
   19142:	b93e      	cbnz	r6, 19154 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   19144:	f04f 32ff 	mov.w	r2, #4294967295
   19148:	f04f 33ff 	mov.w	r3, #4294967295
   1914c:	4648      	mov	r0, r9
   1914e:	f001 fb4b 	bl	1a7e8 <z_impl_k_sem_take>
			continue;
   19152:	e7e2      	b.n	1911a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   19154:	1ba4      	subs	r4, r4, r6
   19156:	b2a4      	uxth	r4, r4
		buf += bytes;
   19158:	4435      	add	r5, r6
   1915a:	e7de      	b.n	1911a <entropy_nrf5_get_entropy+0x12>
   1915c:	20001f88 	.word	0x20001f88

00019160 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   19160:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   19162:	4c19      	ldr	r4, [pc, #100]	; (191c8 <entropy_nrf5_init+0x68>)
   19164:	2201      	movs	r2, #1
   19166:	4611      	mov	r1, r2
   19168:	4620      	mov	r0, r4
   1916a:	f006 fe66 	bl	1fe3a <z_impl_k_sem_init>
   1916e:	2201      	movs	r2, #1
   19170:	2100      	movs	r1, #0
   19172:	f104 0018 	add.w	r0, r4, #24
   19176:	f006 fe60 	bl	1fe3a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1917a:	f240 4307 	movw	r3, #1031	; 0x407
   1917e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   19182:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19186:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   19188:	230c      	movs	r3, #12
   1918a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1918e:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   19190:	4b0e      	ldr	r3, [pc, #56]	; (191cc <entropy_nrf5_init+0x6c>)
   19192:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   19196:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1919a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1919e:	f022 0201 	bic.w	r2, r2, #1
   191a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   191a6:	4a0a      	ldr	r2, [pc, #40]	; (191d0 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   191a8:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   191aa:	6015      	str	r5, [r2, #0]
   191ac:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   191ae:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   191b2:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   191b4:	6019      	str	r1, [r3, #0]
   191b6:	200d      	movs	r0, #13
   191b8:	f7f8 f954 	bl	11464 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   191bc:	200d      	movs	r0, #13
   191be:	f7f8 f91f 	bl	11400 <arch_irq_enable>

	return 0;
}
   191c2:	4628      	mov	r0, r5
   191c4:	bd38      	pop	{r3, r4, r5, pc}
   191c6:	bf00      	nop
   191c8:	20001f88 	.word	0x20001f88
   191cc:	4000d000 	.word	0x4000d000
   191d0:	4000d100 	.word	0x4000d100

000191d4 <isr>:
{
   191d4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   191d6:	f7ff fedd 	bl	18f94 <random_byte_get>
	if (byte < 0) {
   191da:	2800      	cmp	r0, #0
   191dc:	db20      	blt.n	19220 <isr+0x4c>
	uint8_t last  = rngp->last;
   191de:	4b17      	ldr	r3, [pc, #92]	; (1923c <isr+0x68>)
   191e0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   191e4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   191e8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   191ec:	1a51      	subs	r1, r2, r1
   191ee:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   191f2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   191f4:	d10d      	bne.n	19212 <isr+0x3e>
	uint8_t last  = rngp->last;
   191f6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   191fa:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   191fe:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   19202:	1a51      	subs	r1, r2, r1
   19204:	ea34 0101 	bics.w	r1, r4, r1
   19208:	d10b      	bne.n	19222 <isr+0x4e>
   1920a:	4b0d      	ldr	r3, [pc, #52]	; (19240 <isr+0x6c>)
   1920c:	2201      	movs	r2, #1
   1920e:	601a      	str	r2, [r3, #0]
}
   19210:	e00e      	b.n	19230 <isr+0x5c>
	rngp->buffer[last] = byte;
   19212:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   19214:	3201      	adds	r2, #1
   19216:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   19218:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1921c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   19220:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   19222:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   19224:	3201      	adds	r2, #1
   19226:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   19228:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1922c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   19230:	4804      	ldr	r0, [pc, #16]	; (19244 <isr+0x70>)
}
   19232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19236:	f001 bab1 	b.w	1a79c <z_impl_k_sem_give>
   1923a:	bf00      	nop
   1923c:	20001f88 	.word	0x20001f88
   19240:	4000d004 	.word	0x4000d004
   19244:	20001fa0 	.word	0x20001fa0

00019248 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19248:	4602      	mov	r2, r0
   1924a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1924c:	4801      	ldr	r0, [pc, #4]	; (19254 <multithreading_lock_acquire+0xc>)
   1924e:	f001 b9b3 	b.w	1a5b8 <z_impl_k_mutex_lock>
   19252:	bf00      	nop
   19254:	2000071c 	.word	0x2000071c

00019258 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   19258:	4801      	ldr	r0, [pc, #4]	; (19260 <multithreading_lock_release+0x8>)
   1925a:	f001 ba25 	b.w	1a6a8 <z_impl_k_mutex_unlock>
   1925e:	bf00      	nop
   19260:	2000071c 	.word	0x2000071c

00019264 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   19264:	b508      	push	{r3, lr}
	z_impl_log_panic();
   19266:	f7f7 faf1 	bl	1084c <z_impl_log_panic>
   1926a:	4b06      	ldr	r3, [pc, #24]	; (19284 <k_sys_fatal_error_handler+0x20>)
   1926c:	4906      	ldr	r1, [pc, #24]	; (19288 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1926e:	4807      	ldr	r0, [pc, #28]	; (1928c <k_sys_fatal_error_handler+0x28>)
   19270:	1ac9      	subs	r1, r1, r3
   19272:	08c9      	lsrs	r1, r1, #3
   19274:	0189      	lsls	r1, r1, #6
   19276:	f041 0101 	orr.w	r1, r1, #1
   1927a:	f002 ff81 	bl	1c180 <log_0>
		sys_arch_reboot(0);
   1927e:	2000      	movs	r0, #0
   19280:	f7f8 fdaa 	bl	11dd8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   19284:	00020854 	.word	0x00020854
   19288:	000208d4 	.word	0x000208d4
   1928c:	00022de5 	.word	0x00022de5

00019290 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   19290:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   19292:	4905      	ldr	r1, [pc, #20]	; (192a8 <rand_prio_low_vector_get_blocking+0x18>)
{
   19294:	b410      	push	{r4}
   19296:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   19298:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1929a:	6881      	ldr	r1, [r0, #8]
   1929c:	680c      	ldr	r4, [r1, #0]
   1929e:	4619      	mov	r1, r3
   192a0:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   192a2:	bc10      	pop	{r4}
   192a4:	4718      	bx	r3
   192a6:	bf00      	nop
   192a8:	20001fdc 	.word	0x20001fdc

000192ac <sdc_assertion_handler>:
{
   192ac:	b538      	push	{r3, r4, r5, lr}
   192ae:	4b0b      	ldr	r3, [pc, #44]	; (192dc <sdc_assertion_handler+0x30>)
   192b0:	4c0b      	ldr	r4, [pc, #44]	; (192e0 <sdc_assertion_handler+0x34>)
   192b2:	1ae4      	subs	r4, r4, r3
   192b4:	460d      	mov	r5, r1
   192b6:	08e4      	lsrs	r4, r4, #3
   192b8:	f7f7 f950 	bl	1055c <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   192bc:	01a4      	lsls	r4, r4, #6
   192be:	f044 0401 	orr.w	r4, r4, #1
   192c2:	4601      	mov	r1, r0
   192c4:	4623      	mov	r3, r4
   192c6:	4807      	ldr	r0, [pc, #28]	; (192e4 <sdc_assertion_handler+0x38>)
   192c8:	462a      	mov	r2, r5
   192ca:	f002 ff7a 	bl	1c1c2 <log_2>
	k_oops();
   192ce:	4040      	eors	r0, r0
   192d0:	f380 8811 	msr	BASEPRI, r0
   192d4:	f04f 0003 	mov.w	r0, #3
   192d8:	df02      	svc	2
}
   192da:	bd38      	pop	{r3, r4, r5, pc}
   192dc:	00020854 	.word	0x00020854
   192e0:	0002091c 	.word	0x0002091c
   192e4:	00022e02 	.word	0x00022e02

000192e8 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   192e8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   192ea:	4804      	ldr	r0, [pc, #16]	; (192fc <hci_driver_init+0x14>)
   192ec:	f7fa f9e6 	bl	136bc <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   192f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   192f4:	4802      	ldr	r0, [pc, #8]	; (19300 <hci_driver_init+0x18>)
   192f6:	f7ea bc25 	b.w	3b44 <sdc_init>
   192fa:	bf00      	nop
   192fc:	000210f4 	.word	0x000210f4
   19300:	000192ad 	.word	0x000192ad

00019304 <rand_prio_low_vector_get>:
{
   19304:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   19306:	4b08      	ldr	r3, [pc, #32]	; (19328 <rand_prio_low_vector_get+0x24>)
{
   19308:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1930a:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1930c:	6883      	ldr	r3, [r0, #8]
   1930e:	685d      	ldr	r5, [r3, #4]
   19310:	460a      	mov	r2, r1
   19312:	b135      	cbz	r5, 19322 <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   19314:	2300      	movs	r3, #0
   19316:	4621      	mov	r1, r4
   19318:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1931a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1931e:	b2c0      	uxtb	r0, r0
   19320:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   19322:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19326:	e7f8      	b.n	1931a <rand_prio_low_vector_get+0x16>
   19328:	20001fdc 	.word	0x20001fdc

0001932c <hci_driver_open>:
{
   1932c:	b570      	push	{r4, r5, r6, lr}
   1932e:	b092      	sub	sp, #72	; 0x48
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19330:	2200      	movs	r2, #0
   19332:	2300      	movs	r3, #0
   19334:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19338:	2500      	movs	r5, #0
   1933a:	f06f 0309 	mvn.w	r3, #9
   1933e:	e9cd 3503 	strd	r3, r5, [sp, #12]
   19342:	e9cd 5501 	strd	r5, r5, [sp, #4]
   19346:	4b51      	ldr	r3, [pc, #324]	; (1948c <hci_driver_open+0x160>)
   19348:	4951      	ldr	r1, [pc, #324]	; (19490 <hci_driver_open+0x164>)
   1934a:	9500      	str	r5, [sp, #0]
   1934c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19350:	4850      	ldr	r0, [pc, #320]	; (19494 <hci_driver_open+0x168>)
   19352:	f001 f891 	bl	1a478 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19356:	4950      	ldr	r1, [pc, #320]	; (19498 <hci_driver_open+0x16c>)
   19358:	484e      	ldr	r0, [pc, #312]	; (19494 <hci_driver_open+0x168>)
   1935a:	4c50      	ldr	r4, [pc, #320]	; (1949c <hci_driver_open+0x170>)
   1935c:	f006 fc8b 	bl	1fc76 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   19360:	a80d      	add	r0, sp, #52	; 0x34
   19362:	f7ea fb81 	bl	3a68 <sdc_build_revision_get>
   19366:	4b4e      	ldr	r3, [pc, #312]	; (194a0 <hci_driver_open+0x174>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   19368:	484e      	ldr	r0, [pc, #312]	; (194a4 <hci_driver_open+0x178>)
   1936a:	1ae4      	subs	r4, r4, r3
   1936c:	08e4      	lsrs	r4, r4, #3
   1936e:	01a4      	lsls	r4, r4, #6
   19370:	f044 0303 	orr.w	r3, r4, #3
   19374:	2214      	movs	r2, #20
   19376:	a90d      	add	r1, sp, #52	; 0x34
   19378:	f002 ff63 	bl	1c242 <log_hexdump>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1937c:	aa09      	add	r2, sp, #36	; 0x24
   1937e:	2101      	movs	r1, #1
   19380:	4628      	mov	r0, r5
	cfg.master_count.count = SDC_MASTER_COUNT;
   19382:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19386:	f7ea fb7d 	bl	3a84 <sdc_cfg_set>
	if (required_memory < 0) {
   1938a:	2800      	cmp	r0, #0
   1938c:	db37      	blt.n	193fe <hci_driver_open+0xd2>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1938e:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19390:	aa09      	add	r2, sp, #36	; 0x24
   19392:	2102      	movs	r1, #2
   19394:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   19396:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1939a:	f7ea fb73 	bl	3a84 <sdc_cfg_set>
	if (required_memory < 0) {
   1939e:	2800      	cmp	r0, #0
   193a0:	db2d      	blt.n	193fe <hci_driver_open+0xd2>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   193a2:	4b41      	ldr	r3, [pc, #260]	; (194a8 <hci_driver_open+0x17c>)
   193a4:	9309      	str	r3, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   193a6:	aa09      	add	r2, sp, #36	; 0x24
   193a8:	2103      	movs	r1, #3
   193aa:	4628      	mov	r0, r5
   193ac:	f7ea fb6a 	bl	3a84 <sdc_cfg_set>
	if (required_memory < 0) {
   193b0:	2800      	cmp	r0, #0
   193b2:	db24      	blt.n	193fe <hci_driver_open+0xd2>
	cfg.event_length.event_length_us =
   193b4:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   193b8:	aa09      	add	r2, sp, #36	; 0x24
   193ba:	2104      	movs	r1, #4
   193bc:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   193be:	9309      	str	r3, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   193c0:	f7ea fb60 	bl	3a84 <sdc_cfg_set>
	if (required_memory < 0) {
   193c4:	2800      	cmp	r0, #0
   193c6:	db1a      	blt.n	193fe <hci_driver_open+0xd2>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   193c8:	aa09      	add	r2, sp, #36	; 0x24
   193ca:	2105      	movs	r1, #5
   193cc:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   193ce:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   193d2:	f7ea fb57 	bl	3a84 <sdc_cfg_set>
	if (required_memory < 0) {
   193d6:	2800      	cmp	r0, #0
   193d8:	db11      	blt.n	193fe <hci_driver_open+0xd2>
	if (required_memory > sizeof(sdc_mempool)) {
   193da:	f240 61de 	movw	r1, #1758	; 0x6de
   193de:	4288      	cmp	r0, r1
   193e0:	dd0f      	ble.n	19402 <hci_driver_open+0xd6>
		BT_ERR("Allocated memory too low: %u < %u",
   193e2:	4602      	mov	r2, r0
   193e4:	ea44 0306 	orr.w	r3, r4, r6
   193e8:	4830      	ldr	r0, [pc, #192]	; (194ac <hci_driver_open+0x180>)
   193ea:	f002 feea 	bl	1c1c2 <log_2>
		k_panic();
   193ee:	4040      	eors	r0, r0
   193f0:	f380 8811 	msr	BASEPRI, r0
   193f4:	f04f 0004 	mov.w	r0, #4
   193f8:	df02      	svc	2
		return -ENOMEM;
   193fa:	f06f 000b 	mvn.w	r0, #11
}
   193fe:	b012      	add	sp, #72	; 0x48
   19400:	bd70      	pop	{r4, r5, r6, pc}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   19402:	482b      	ldr	r0, [pc, #172]	; (194b0 <hci_driver_open+0x184>)
   19404:	f000 fe6a 	bl	1a0dc <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19408:	4b2a      	ldr	r3, [pc, #168]	; (194b4 <hci_driver_open+0x188>)
   1940a:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1940c:	b938      	cbnz	r0, 1941e <hci_driver_open+0xf2>
		BT_ERR("An entropy source is required");
   1940e:	482a      	ldr	r0, [pc, #168]	; (194b8 <hci_driver_open+0x18c>)
   19410:	f044 0101 	orr.w	r1, r4, #1
   19414:	f002 feb4 	bl	1c180 <log_0>
		return -ENODEV;
   19418:	f06f 0012 	mvn.w	r0, #18
   1941c:	e7ef      	b.n	193fe <hci_driver_open+0xd2>
	sdc_rand_source_t rand_functions = {
   1941e:	4a27      	ldr	r2, [pc, #156]	; (194bc <hci_driver_open+0x190>)
   19420:	ca07      	ldmia	r2, {r0, r1, r2}
   19422:	ab0a      	add	r3, sp, #40	; 0x28
   19424:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   19428:	4618      	mov	r0, r3
   1942a:	f7ea fc99 	bl	3d60 <sdc_rand_source_register>
	if (err) {
   1942e:	4601      	mov	r1, r0
   19430:	b138      	cbz	r0, 19442 <hci_driver_open+0x116>
		BT_ERR("Failed to register rand source (%d)", err);
   19432:	4823      	ldr	r0, [pc, #140]	; (194c0 <hci_driver_open+0x194>)
   19434:	f044 0201 	orr.w	r2, r4, #1
   19438:	f002 feaf 	bl	1c19a <log_1>
		return -EINVAL;
   1943c:	f06f 0015 	mvn.w	r0, #21
   19440:	e7dd      	b.n	193fe <hci_driver_open+0xd2>
			err = sdc_support_adv();
   19442:	f7ea fbf9 	bl	3c38 <sdc_support_adv>
			if (err) {
   19446:	b110      	cbz	r0, 1944e <hci_driver_open+0x122>
				return -ENOTSUP;
   19448:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1944c:	e7d7      	b.n	193fe <hci_driver_open+0xd2>
		err = sdc_support_slave();
   1944e:	f7ea fc1d 	bl	3c8c <sdc_support_slave>
		if (err) {
   19452:	2800      	cmp	r0, #0
   19454:	d1f8      	bne.n	19448 <hci_driver_open+0x11c>
		err = sdc_support_dle();
   19456:	f7ea fbfd 	bl	3c54 <sdc_support_dle>
		if (err) {
   1945a:	2800      	cmp	r0, #0
   1945c:	d1f4      	bne.n	19448 <hci_driver_open+0x11c>
		err = sdc_support_le_2m_phy();
   1945e:	f7ea fc07 	bl	3c70 <sdc_support_le_2m_phy>
		if (err) {
   19462:	2800      	cmp	r0, #0
   19464:	d1f0      	bne.n	19448 <hci_driver_open+0x11c>
	err = MULTITHREADING_LOCK_ACQUIRE();
   19466:	f04f 30ff 	mov.w	r0, #4294967295
   1946a:	f04f 31ff 	mov.w	r1, #4294967295
   1946e:	f7ff feeb 	bl	19248 <multithreading_lock_acquire>
	if (!err) {
   19472:	4604      	mov	r4, r0
   19474:	b930      	cbnz	r0, 19484 <hci_driver_open+0x158>
		err = sdc_enable(host_signal, sdc_mempool);
   19476:	4913      	ldr	r1, [pc, #76]	; (194c4 <hci_driver_open+0x198>)
   19478:	4813      	ldr	r0, [pc, #76]	; (194c8 <hci_driver_open+0x19c>)
   1947a:	f7ea fb35 	bl	3ae8 <sdc_enable>
   1947e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   19480:	f7ff feea 	bl	19258 <multithreading_lock_release>
	if (err < 0) {
   19484:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   19488:	e7b9      	b.n	193fe <hci_driver_open+0xd2>
   1948a:	bf00      	nop
   1948c:	000194cd 	.word	0x000194cd
   19490:	20003b20 	.word	0x20003b20
   19494:	20001a88 	.word	0x20001a88
   19498:	00022e27 	.word	0x00022e27
   1949c:	0002091c 	.word	0x0002091c
   194a0:	00020854 	.word	0x00020854
   194a4:	00022e2e 	.word	0x00022e2e
   194a8:	02031b1b 	.word	0x02031b1b
   194ac:	00022e55 	.word	0x00022e55
   194b0:	00022de1 	.word	0x00022de1
   194b4:	20001fdc 	.word	0x20001fdc
   194b8:	00022e77 	.word	0x00022e77
   194bc:	000209d8 	.word	0x000209d8
   194c0:	00022e95 	.word	0x00022e95
   194c4:	200021e0 	.word	0x200021e0
   194c8:	000195e9 	.word	0x000195e9

000194cc <recv_thread>:
{
   194cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194d0:	4b3f      	ldr	r3, [pc, #252]	; (195d0 <recv_thread+0x104>)
   194d2:	4e40      	ldr	r6, [pc, #256]	; (195d4 <recv_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   194d4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 195e4 <recv_thread+0x118>
		errcode = hci_internal_evt_get(p_hci_buffer);
   194d8:	4d3f      	ldr	r5, [pc, #252]	; (195d8 <recv_thread+0x10c>)
   194da:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   194dc:	2700      	movs	r7, #0
   194de:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   194e0:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   194e2:	b93c      	cbnz	r4, 194f4 <recv_thread+0x28>
   194e4:	b937      	cbnz	r7, 194f4 <recv_thread+0x28>
   194e6:	f04f 32ff 	mov.w	r2, #4294967295
   194ea:	f04f 33ff 	mov.w	r3, #4294967295
   194ee:	4640      	mov	r0, r8
   194f0:	f001 f97a 	bl	1a7e8 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   194f4:	f04f 30ff 	mov.w	r0, #4294967295
   194f8:	f04f 31ff 	mov.w	r1, #4294967295
   194fc:	f7ff fea4 	bl	19248 <multithreading_lock_acquire>
	if (!errcode) {
   19500:	b160      	cbz	r0, 1951c <recv_thread+0x50>
		return false;
   19502:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   19504:	f04f 30ff 	mov.w	r0, #4294967295
   19508:	f04f 31ff 	mov.w	r1, #4294967295
   1950c:	f7ff fe9c 	bl	19248 <multithreading_lock_acquire>
	if (!errcode) {
   19510:	2800      	cmp	r0, #0
   19512:	d03a      	beq.n	1958a <recv_thread+0xbe>
		return false;
   19514:	2700      	movs	r7, #0
	z_impl_k_yield();
   19516:	f001 fdf1 	bl	1b0fc <z_impl_k_yield>
}
   1951a:	e7e2      	b.n	194e2 <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1951c:	482e      	ldr	r0, [pc, #184]	; (195d8 <recv_thread+0x10c>)
   1951e:	f000 fbb5 	bl	19c8c <hci_internal_evt_get>
   19522:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   19524:	f7ff fe98 	bl	19258 <multithreading_lock_release>
	if (errcode) {
   19528:	2c00      	cmp	r4, #0
   1952a:	d1ea      	bne.n	19502 <recv_thread+0x36>
	switch (hdr->evt) {
   1952c:	7828      	ldrb	r0, [r5, #0]
   1952e:	283e      	cmp	r0, #62	; 0x3e
   19530:	d007      	beq.n	19542 <recv_thread+0x76>
   19532:	28ff      	cmp	r0, #255	; 0xff
   19534:	d01c      	beq.n	19570 <recv_thread+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19536:	f04f 32ff 	mov.w	r2, #4294967295
   1953a:	f04f 33ff 	mov.w	r3, #4294967295
   1953e:	2400      	movs	r4, #0
   19540:	e007      	b.n	19552 <recv_thread+0x86>
		switch (me->subevent) {
   19542:	78ab      	ldrb	r3, [r5, #2]
   19544:	2b02      	cmp	r3, #2
   19546:	d001      	beq.n	1954c <recv_thread+0x80>
   19548:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1954a:	d1f4      	bne.n	19536 <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1954c:	2200      	movs	r2, #0
   1954e:	2300      	movs	r3, #0
   19550:	2401      	movs	r4, #1
   19552:	4621      	mov	r1, r4
   19554:	f7f8 ff00 	bl	12358 <bt_buf_get_evt>
	if (!evt_buf) {
   19558:	4607      	mov	r7, r0
   1955a:	b960      	cbnz	r0, 19576 <recv_thread+0xaa>
		if (discardable) {
   1955c:	2c00      	cmp	r4, #0
   1955e:	d1d1      	bne.n	19504 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   19560:	01b1      	lsls	r1, r6, #6
   19562:	481e      	ldr	r0, [pc, #120]	; (195dc <recv_thread+0x110>)
   19564:	f041 0101 	orr.w	r1, r1, #1
   19568:	f002 fe0a 	bl	1c180 <log_0>
	return true;
   1956c:	2401      	movs	r4, #1
   1956e:	e7c9      	b.n	19504 <recv_thread+0x38>
		switch (subevent) {
   19570:	78ab      	ldrb	r3, [r5, #2]
   19572:	2b80      	cmp	r3, #128	; 0x80
   19574:	e7e9      	b.n	1954a <recv_thread+0x7e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   19576:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19578:	4629      	mov	r1, r5
   1957a:	3202      	adds	r2, #2
   1957c:	3008      	adds	r0, #8
   1957e:	f006 fa10 	bl	1f9a2 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   19582:	4638      	mov	r0, r7
   19584:	f7fa f866 	bl	13654 <bt_recv>
   19588:	e7f0      	b.n	1956c <recv_thread+0xa0>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1958a:	4813      	ldr	r0, [pc, #76]	; (195d8 <recv_thread+0x10c>)
   1958c:	f7f2 febd 	bl	c30a <sdc_hci_data_get>
   19590:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   19592:	f7ff fe61 	bl	19258 <multithreading_lock_release>
	if (errcode) {
   19596:	2f00      	cmp	r7, #0
   19598:	d1bc      	bne.n	19514 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1959a:	f04f 32ff 	mov.w	r2, #4294967295
   1959e:	f04f 33ff 	mov.w	r3, #4294967295
   195a2:	2003      	movs	r0, #3
   195a4:	f7f8 fea2 	bl	122ec <bt_buf_get_rx>
	if (!data_buf) {
   195a8:	4607      	mov	r7, r0
   195aa:	b938      	cbnz	r0, 195bc <recv_thread+0xf0>
		BT_ERR("No data buffer available");
   195ac:	01b1      	lsls	r1, r6, #6
   195ae:	480c      	ldr	r0, [pc, #48]	; (195e0 <recv_thread+0x114>)
   195b0:	f041 0101 	orr.w	r1, r1, #1
   195b4:	f002 fde4 	bl	1c180 <log_0>
	return true;
   195b8:	2701      	movs	r7, #1
   195ba:	e7ac      	b.n	19516 <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   195bc:	886a      	ldrh	r2, [r5, #2]
   195be:	4629      	mov	r1, r5
   195c0:	3204      	adds	r2, #4
   195c2:	3008      	adds	r0, #8
   195c4:	f006 f9ed 	bl	1f9a2 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   195c8:	4638      	mov	r0, r7
   195ca:	f7fa f843 	bl	13654 <bt_recv>
   195ce:	e7f3      	b.n	195b8 <recv_thread+0xec>
   195d0:	00020854 	.word	0x00020854
   195d4:	0002091c 	.word	0x0002091c
   195d8:	20002197 	.word	0x20002197
   195dc:	00022eb9 	.word	0x00022eb9
   195e0:	00022ed3 	.word	0x00022ed3
   195e4:	20000778 	.word	0x20000778

000195e8 <host_signal>:
	z_impl_k_sem_give(sem);
   195e8:	4801      	ldr	r0, [pc, #4]	; (195f0 <host_signal+0x8>)
   195ea:	f001 b8d7 	b.w	1a79c <z_impl_k_sem_give>
   195ee:	bf00      	nop
   195f0:	20000778 	.word	0x20000778

000195f4 <hci_driver_send>:
{
   195f4:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   195f6:	8983      	ldrh	r3, [r0, #12]
{
   195f8:	4605      	mov	r5, r0
	if (!buf->len) {
   195fa:	b383      	cbz	r3, 1965e <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   195fc:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   195fe:	b1ab      	cbz	r3, 1962c <hci_driver_send+0x38>
   19600:	2b02      	cmp	r3, #2
   19602:	d12c      	bne.n	1965e <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   19604:	f04f 30ff 	mov.w	r0, #4294967295
   19608:	f04f 31ff 	mov.w	r1, #4294967295
   1960c:	f7ff fe1c 	bl	19248 <multithreading_lock_acquire>
	if (!errcode) {
   19610:	4604      	mov	r4, r0
   19612:	b948      	cbnz	r0, 19628 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   19614:	68a8      	ldr	r0, [r5, #8]
   19616:	f7f2 fe85 	bl	c324 <sdc_hci_data_put>
   1961a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1961c:	f7ff fe1c 	bl	19258 <multithreading_lock_release>
		if (errcode) {
   19620:	b1c4      	cbz	r4, 19654 <hci_driver_send+0x60>
   19622:	4810      	ldr	r0, [pc, #64]	; (19664 <hci_driver_send+0x70>)
   19624:	f001 f8ba 	bl	1a79c <z_impl_k_sem_give>
}
   19628:	4620      	mov	r0, r4
   1962a:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1962c:	f04f 30ff 	mov.w	r0, #4294967295
   19630:	f04f 31ff 	mov.w	r1, #4294967295
   19634:	f7ff fe08 	bl	19248 <multithreading_lock_acquire>
	if (!errcode) {
   19638:	4604      	mov	r4, r0
   1963a:	2800      	cmp	r0, #0
   1963c:	d1f4      	bne.n	19628 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1963e:	68a8      	ldr	r0, [r5, #8]
   19640:	f000 f812 	bl	19668 <hci_internal_cmd_put>
   19644:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   19646:	f7ff fe07 	bl	19258 <multithreading_lock_release>
	if (errcode) {
   1964a:	2c00      	cmp	r4, #0
   1964c:	d1ec      	bne.n	19628 <hci_driver_send+0x34>
   1964e:	4805      	ldr	r0, [pc, #20]	; (19664 <hci_driver_send+0x70>)
   19650:	f001 f8a4 	bl	1a79c <z_impl_k_sem_give>
		net_buf_unref(buf);
   19654:	4628      	mov	r0, r5
   19656:	f7ff fbe5 	bl	18e24 <net_buf_unref>
   1965a:	2400      	movs	r4, #0
   1965c:	e7e4      	b.n	19628 <hci_driver_send+0x34>
	switch (type) {
   1965e:	f06f 0415 	mvn.w	r4, #21
   19662:	e7e1      	b.n	19628 <hci_driver_send+0x34>
   19664:	20000778 	.word	0x20000778

00019668 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   19668:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1966a:	4c8e      	ldr	r4, [pc, #568]	; (198a4 <hci_internal_cmd_put+0x23c>)
   1966c:	7823      	ldrb	r3, [r4, #0]
   1966e:	2b00      	cmp	r3, #0
   19670:	f040 82f7 	bne.w	19c62 <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   19674:	7843      	ldrb	r3, [r0, #1]
   19676:	7805      	ldrb	r5, [r0, #0]
   19678:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1967c:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   19680:	b22e      	sxth	r6, r5
   19682:	ea4f 2395 	mov.w	r3, r5, lsr #10
   19686:	d20d      	bcs.n	196a4 <hci_internal_cmd_put+0x3c>
   19688:	b17b      	cbz	r3, 196aa <hci_internal_cmd_put+0x42>
   1968a:	3b01      	subs	r3, #1
   1968c:	2b07      	cmp	r3, #7
   1968e:	d80c      	bhi.n	196aa <hci_internal_cmd_put+0x42>
   19690:	e8df f013 	tbh	[pc, r3, lsl #1]
   19694:	000b000e 	.word	0x000b000e
   19698:	0060002c 	.word	0x0060002c
   1969c:	000b000b 	.word	0x000b000b
   196a0:	010c000b 	.word	0x010c000b
   196a4:	2b3f      	cmp	r3, #63	; 0x3f
   196a6:	f000 8233 	beq.w	19b10 <hci_internal_cmd_put+0x4a8>
   196aa:	2304      	movs	r3, #4
   196ac:	2001      	movs	r0, #1
   196ae:	e26b      	b.n	19b88 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   196b0:	f240 4306 	movw	r3, #1030	; 0x406
   196b4:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   196b6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   196ba:	d005      	beq.n	196c8 <hci_internal_cmd_put+0x60>
   196bc:	f240 431d 	movw	r3, #1053	; 0x41d
   196c0:	429e      	cmp	r6, r3
   196c2:	d010      	beq.n	196e6 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   196c4:	2001      	movs	r0, #1
   196c6:	e001      	b.n	196cc <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   196c8:	f7f2 ff4e 	bl	c568 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   196cc:	230f      	movs	r3, #15
   196ce:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   196d0:	2304      	movs	r3, #4
   196d2:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   196d4:	2301      	movs	r3, #1
	evt_data->status = status_code;
   196d6:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   196d8:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   196da:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   196de:	2301      	movs	r3, #1
   196e0:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   196e2:	2000      	movs	r0, #0
}
   196e4:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   196e6:	f7f2 ff41 	bl	c56c <sdc_hci_cmd_lc_read_remote_version_information>
   196ea:	e7ef      	b.n	196cc <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   196ec:	f640 4363 	movw	r3, #3171	; 0xc63
   196f0:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   196f2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   196f6:	d025      	beq.n	19744 <hci_internal_cmd_put+0xdc>
   196f8:	dc0f      	bgt.n	1971a <hci_internal_cmd_put+0xb2>
   196fa:	f640 4303 	movw	r3, #3075	; 0xc03
   196fe:	429e      	cmp	r6, r3
   19700:	d018      	beq.n	19734 <hci_internal_cmd_put+0xcc>
   19702:	f640 432d 	movw	r3, #3117	; 0xc2d
   19706:	429e      	cmp	r6, r3
   19708:	d017      	beq.n	1973a <hci_internal_cmd_put+0xd2>
   1970a:	f640 4301 	movw	r3, #3073	; 0xc01
   1970e:	429e      	cmp	r6, r3
   19710:	d1d8      	bne.n	196c4 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   19712:	f7f2 fe23 	bl	c35c <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   19716:	2304      	movs	r3, #4
   19718:	e0b8      	b.n	1988c <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1971a:	f640 437b 	movw	r3, #3195	; 0xc7b
   1971e:	429e      	cmp	r6, r3
   19720:	d013      	beq.n	1974a <hci_internal_cmd_put+0xe2>
   19722:	f640 437c 	movw	r3, #3196	; 0xc7c
   19726:	429e      	cmp	r6, r3
   19728:	d1cc      	bne.n	196c4 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1972a:	495f      	ldr	r1, [pc, #380]	; (198a8 <hci_internal_cmd_put+0x240>)
   1972c:	f7f2 fe20 	bl	c370 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   19730:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19732:	e0ab      	b.n	1988c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   19734:	f7ea fc0a 	bl	3f4c <sdc_hci_cmd_cb_reset>
   19738:	e7ed      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1973a:	495b      	ldr	r1, [pc, #364]	; (198a8 <hci_internal_cmd_put+0x240>)
   1973c:	f7f2 fe0c 	bl	c358 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   19740:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   19742:	e0a3      	b.n	1988c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   19744:	f7f2 fe0f 	bl	c366 <sdc_hci_cmd_cb_set_event_mask_page_2>
   19748:	e7e5      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1974a:	4957      	ldr	r1, [pc, #348]	; (198a8 <hci_internal_cmd_put+0x240>)
   1974c:	f7f2 fe02 	bl	c354 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   19750:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   19752:	e09b      	b.n	1988c <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   19754:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   19758:	3e01      	subs	r6, #1
   1975a:	2e08      	cmp	r6, #8
   1975c:	d8b2      	bhi.n	196c4 <hci_internal_cmd_put+0x5c>
   1975e:	a301      	add	r3, pc, #4	; (adr r3, 19764 <hci_internal_cmd_put+0xfc>)
   19760:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19764:	00019789 	.word	0x00019789
   19768:	00019793 	.word	0x00019793
   1976c:	0001986d 	.word	0x0001986d
   19770:	000196c5 	.word	0x000196c5
   19774:	000196c5 	.word	0x000196c5
   19778:	000196c5 	.word	0x000196c5
   1977c:	000196c5 	.word	0x000196c5
   19780:	000196c5 	.word	0x000196c5
   19784:	00019885 	.word	0x00019885
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   19788:	4847      	ldr	r0, [pc, #284]	; (198a8 <hci_internal_cmd_put+0x240>)
   1978a:	f7f2 fea2 	bl	c4d2 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1978e:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   19790:	e07c      	b.n	1988c <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   19792:	4845      	ldr	r0, [pc, #276]	; (198a8 <hci_internal_cmd_put+0x240>)
   19794:	222e      	movs	r2, #46	; 0x2e
   19796:	2100      	movs	r1, #0
   19798:	f004 f839 	bl	1d80e <memset>
	cmds->hci_disconnect = 1;
   1979c:	79e3      	ldrb	r3, [r4, #7]
   1979e:	f043 0320 	orr.w	r3, r3, #32
   197a2:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   197a4:	7a63      	ldrb	r3, [r4, #9]
   197a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   197aa:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   197ac:	7b23      	ldrb	r3, [r4, #12]
   197ae:	f063 033f 	orn	r3, r3, #63	; 0x3f
   197b2:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   197b4:	7c63      	ldrb	r3, [r4, #17]
   197b6:	f043 0304 	orr.w	r3, r3, #4
   197ba:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   197bc:	7d63      	ldrb	r3, [r4, #21]
   197be:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   197c2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   197c6:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   197c8:	7da3      	ldrb	r3, [r4, #22]
   197ca:	f043 0302 	orr.w	r3, r3, #2
   197ce:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   197d0:	7f63      	ldrb	r3, [r4, #29]
   197d2:	f043 0304 	orr.w	r3, r3, #4
   197d6:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   197d8:	f894 3020 	ldrb.w	r3, [r4, #32]
   197dc:	f063 0308 	orn	r3, r3, #8
   197e0:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   197e4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   197e8:	f063 033c 	orn	r3, r3, #60	; 0x3c
   197ec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   197f0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   197f4:	f063 030c 	orn	r3, r3, #12
   197f8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   197fc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   19800:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   19804:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   19808:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1980c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   19810:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   19814:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   19818:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1981c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19820:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19824:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   19828:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1982c:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   19830:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   19834:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   19838:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1983c:	f063 0301 	orn	r3, r3, #1
   19840:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   19844:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   19848:	f043 0301 	orr.w	r3, r3, #1
   1984c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   19850:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   19854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19858:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1985c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   19860:	f043 0304 	orr.w	r3, r3, #4
   19864:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   19868:	2344      	movs	r3, #68	; 0x44
   1986a:	e0de      	b.n	19a2a <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   1986c:	480e      	ldr	r0, [pc, #56]	; (198a8 <hci_internal_cmd_put+0x240>)
   1986e:	2208      	movs	r2, #8
   19870:	2100      	movs	r1, #0
   19872:	f003 ffcc 	bl	1d80e <memset>
	features->bdedr_not_supported = 1;
   19876:	7ae3      	ldrb	r3, [r4, #11]
   19878:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1987c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   19880:	72e3      	strb	r3, [r4, #11]
   19882:	e0d1      	b.n	19a28 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   19884:	4808      	ldr	r0, [pc, #32]	; (198a8 <hci_internal_cmd_put+0x240>)
   19886:	f7f2 fe22 	bl	c4ce <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1988a:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1988c:	2801      	cmp	r0, #1
   1988e:	f43f af1d 	beq.w	196cc <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19892:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   19894:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   19896:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   19898:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1989a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1989c:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1989e:	71a0      	strb	r0, [r4, #6]
}
   198a0:	e71d      	b.n	196de <hci_internal_cmd_put+0x76>
   198a2:	bf00      	nop
   198a4:	200028be 	.word	0x200028be
   198a8:	200028c5 	.word	0x200028c5
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   198ac:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   198b0:	3e01      	subs	r6, #1
   198b2:	3003      	adds	r0, #3
	switch (opcode)	{
   198b4:	2e4d      	cmp	r6, #77	; 0x4d
   198b6:	f63f af05 	bhi.w	196c4 <hci_internal_cmd_put+0x5c>
   198ba:	a301      	add	r3, pc, #4	; (adr r3, 198c0 <hci_internal_cmd_put+0x258>)
   198bc:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   198c0:	000199f9 	.word	0x000199f9
   198c4:	000199ff 	.word	0x000199ff
   198c8:	00019a07 	.word	0x00019a07
   198cc:	000196c5 	.word	0x000196c5
   198d0:	00019a2f 	.word	0x00019a2f
   198d4:	00019a35 	.word	0x00019a35
   198d8:	00019a3b 	.word	0x00019a3b
   198dc:	00019a45 	.word	0x00019a45
   198e0:	00019a4b 	.word	0x00019a4b
   198e4:	00019a51 	.word	0x00019a51
   198e8:	000196c5 	.word	0x000196c5
   198ec:	000196c5 	.word	0x000196c5
   198f0:	000196c5 	.word	0x000196c5
   198f4:	000196c5 	.word	0x000196c5
   198f8:	00019a57 	.word	0x00019a57
   198fc:	00019a5f 	.word	0x00019a5f
   19900:	00019a65 	.word	0x00019a65
   19904:	00019a6b 	.word	0x00019a6b
   19908:	000196c5 	.word	0x000196c5
   1990c:	000196c5 	.word	0x000196c5
   19910:	00019a71 	.word	0x00019a71
   19914:	00019a7b 	.word	0x00019a7b
   19918:	00019a81 	.word	0x00019a81
   1991c:	00019a8b 	.word	0x00019a8b
   19920:	000196c5 	.word	0x000196c5
   19924:	00019a93 	.word	0x00019a93
   19928:	00019a9b 	.word	0x00019a9b
   1992c:	00019aa3 	.word	0x00019aa3
   19930:	000196c5 	.word	0x000196c5
   19934:	000196c5 	.word	0x000196c5
   19938:	000196c5 	.word	0x000196c5
   1993c:	000196c5 	.word	0x000196c5
   19940:	000196c5 	.word	0x000196c5
   19944:	00019aab 	.word	0x00019aab
   19948:	00019ab3 	.word	0x00019ab3
   1994c:	00019abb 	.word	0x00019abb
   19950:	000196c5 	.word	0x000196c5
   19954:	000196c5 	.word	0x000196c5
   19958:	00019ac1 	.word	0x00019ac1
   1995c:	00019ac7 	.word	0x00019ac7
   19960:	00019acd 	.word	0x00019acd
   19964:	00019ad3 	.word	0x00019ad3
   19968:	000196c5 	.word	0x000196c5
   1996c:	000196c5 	.word	0x000196c5
   19970:	00019adb 	.word	0x00019adb
   19974:	00019ae1 	.word	0x00019ae1
   19978:	00019ae7 	.word	0x00019ae7
   1997c:	00019aef 	.word	0x00019aef
   19980:	00019af7 	.word	0x00019af7
   19984:	00019afd 	.word	0x00019afd
   19988:	000196c5 	.word	0x000196c5
   1998c:	000196c5 	.word	0x000196c5
   19990:	000196c5 	.word	0x000196c5
   19994:	000196c5 	.word	0x000196c5
   19998:	000196c5 	.word	0x000196c5
   1999c:	000196c5 	.word	0x000196c5
   199a0:	000196c5 	.word	0x000196c5
   199a4:	000196c5 	.word	0x000196c5
   199a8:	000196c5 	.word	0x000196c5
   199ac:	000196c5 	.word	0x000196c5
   199b0:	000196c5 	.word	0x000196c5
   199b4:	000196c5 	.word	0x000196c5
   199b8:	000196c5 	.word	0x000196c5
   199bc:	000196c5 	.word	0x000196c5
   199c0:	000196c5 	.word	0x000196c5
   199c4:	000196c5 	.word	0x000196c5
   199c8:	000196c5 	.word	0x000196c5
   199cc:	000196c5 	.word	0x000196c5
   199d0:	000196c5 	.word	0x000196c5
   199d4:	000196c5 	.word	0x000196c5
   199d8:	000196c5 	.word	0x000196c5
   199dc:	000196c5 	.word	0x000196c5
   199e0:	000196c5 	.word	0x000196c5
   199e4:	000196c5 	.word	0x000196c5
   199e8:	00019b03 	.word	0x00019b03
   199ec:	000196c5 	.word	0x000196c5
   199f0:	000196c5 	.word	0x000196c5
   199f4:	00019b0b 	.word	0x00019b0b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   199f8:	f7f2 fda5 	bl	c546 <sdc_hci_cmd_le_set_event_mask>
   199fc:	e68b      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   199fe:	48a2      	ldr	r0, [pc, #648]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a00:	f7f2 fd7f 	bl	c502 <sdc_hci_cmd_le_read_buffer_size>
   19a04:	e69c      	b.n	19740 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   19a06:	48a0      	ldr	r0, [pc, #640]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a08:	2205      	movs	r2, #5
   19a0a:	2100      	movs	r1, #0
   19a0c:	f003 feff 	bl	1d80e <memset>
	features->le_encryption = 1;
   19a10:	79e3      	ldrb	r3, [r4, #7]
   19a12:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   19a16:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   19a1a:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   19a1c:	7a23      	ldrb	r3, [r4, #8]
   19a1e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   19a22:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   19a26:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   19a28:	230c      	movs	r3, #12
	switch (hci_opcode) {
   19a2a:	2000      	movs	r0, #0
   19a2c:	e731      	b.n	19892 <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   19a2e:	f7f2 fd93 	bl	c558 <sdc_hci_cmd_le_set_random_address>
   19a32:	e670      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   19a34:	f7f2 fd81 	bl	c53a <sdc_hci_cmd_le_set_adv_params>
   19a38:	e66d      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   19a3a:	4893      	ldr	r0, [pc, #588]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a3c:	f7f2 fd5f 	bl	c4fe <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   19a40:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19a42:	e723      	b.n	1988c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   19a44:	f7f2 fd75 	bl	c532 <sdc_hci_cmd_le_set_adv_data>
   19a48:	e665      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   19a4a:	f7f2 fd89 	bl	c560 <sdc_hci_cmd_le_set_scan_response_data>
   19a4e:	e662      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   19a50:	f7f2 fd71 	bl	c536 <sdc_hci_cmd_le_set_adv_enable>
   19a54:	e65f      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   19a56:	488c      	ldr	r0, [pc, #560]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a58:	f7f2 fd63 	bl	c522 <sdc_hci_cmd_le_read_white_list_size>
   19a5c:	e7f0      	b.n	19a40 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   19a5e:	f7f2 fd40 	bl	c4e2 <sdc_hci_cmd_le_clear_white_list>
   19a62:	e658      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   19a64:	f7f2 fd39 	bl	c4da <sdc_hci_cmd_le_add_device_to_white_list>
   19a68:	e655      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   19a6a:	f7f2 fd5e 	bl	c52a <sdc_hci_cmd_le_remove_device_from_white_list>
   19a6e:	e652      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   19a70:	4985      	ldr	r1, [pc, #532]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a72:	f7f2 fd48 	bl	c506 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   19a76:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   19a78:	e708      	b.n	1988c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   19a7a:	f7f2 fd4a 	bl	c512 <sdc_hci_cmd_le_read_remote_features>
   19a7e:	e625      	b.n	196cc <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19a80:	4981      	ldr	r1, [pc, #516]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a82:	f7f2 fd30 	bl	c4e6 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   19a86:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19a88:	e700      	b.n	1988c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   19a8a:	487f      	ldr	r0, [pc, #508]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a8c:	f7f2 fd35 	bl	c4fa <sdc_hci_cmd_le_rand>
   19a90:	e67d      	b.n	1978e <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   19a92:	497d      	ldr	r1, [pc, #500]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a94:	f7f2 fd2d 	bl	c4f2 <sdc_hci_cmd_le_long_term_key_request_reply>
   19a98:	e64a      	b.n	19730 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   19a9a:	497b      	ldr	r1, [pc, #492]	; (19c88 <hci_internal_cmd_put+0x620>)
   19a9c:	f7f2 fd25 	bl	c4ea <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   19aa0:	e646      	b.n	19730 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   19aa2:	238f      	movs	r3, #143	; 0x8f
   19aa4:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   19aa6:	23c0      	movs	r3, #192	; 0xc0
   19aa8:	e6ea      	b.n	19880 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   19aaa:	4977      	ldr	r1, [pc, #476]	; (19c88 <hci_internal_cmd_put+0x620>)
   19aac:	f7f2 fd47 	bl	c53e <sdc_hci_cmd_le_set_data_length>
   19ab0:	e63e      	b.n	19730 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   19ab2:	4875      	ldr	r0, [pc, #468]	; (19c88 <hci_internal_cmd_put+0x620>)
   19ab4:	f7f2 fd31 	bl	c51a <sdc_hci_cmd_le_read_suggested_default_data_length>
   19ab8:	e64a      	b.n	19750 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   19aba:	f7f2 fd53 	bl	c564 <sdc_hci_cmd_le_write_suggested_default_data_length>
   19abe:	e62a      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   19ac0:	f7f2 fd09 	bl	c4d6 <sdc_hci_cmd_le_add_device_to_resolving_list>
   19ac4:	e627      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   19ac6:	f7f2 fd2e 	bl	c526 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   19aca:	e624      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   19acc:	f7f2 fd07 	bl	c4de <sdc_hci_cmd_le_clear_resolving_list>
   19ad0:	e621      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19ad2:	486d      	ldr	r0, [pc, #436]	; (19c88 <hci_internal_cmd_put+0x620>)
   19ad4:	f7f2 fd1f 	bl	c516 <sdc_hci_cmd_le_read_resolving_list_size>
   19ad8:	e7b2      	b.n	19a40 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   19ada:	f7f2 fd28 	bl	c52e <sdc_hci_cmd_le_set_address_resolution_enable>
   19ade:	e61a      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   19ae0:	f7f2 fd3c 	bl	c55c <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   19ae4:	e617      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   19ae6:	4868      	ldr	r0, [pc, #416]	; (19c88 <hci_internal_cmd_put+0x620>)
   19ae8:	f7f2 fd0f 	bl	c50a <sdc_hci_cmd_le_read_max_data_length>
   19aec:	e64f      	b.n	1978e <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   19aee:	4966      	ldr	r1, [pc, #408]	; (19c88 <hci_internal_cmd_put+0x620>)
   19af0:	f7f2 fd0d 	bl	c50e <sdc_hci_cmd_le_read_phy>
   19af4:	e62c      	b.n	19750 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   19af6:	f7f2 fd24 	bl	c542 <sdc_hci_cmd_le_set_default_phy>
   19afa:	e60c      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   19afc:	f7f2 fd28 	bl	c550 <sdc_hci_cmd_le_set_phy>
   19b00:	e5e4      	b.n	196cc <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19b02:	4861      	ldr	r0, [pc, #388]	; (19c88 <hci_internal_cmd_put+0x620>)
   19b04:	f7f2 fd0b 	bl	c51e <sdc_hci_cmd_le_read_transmit_power>
   19b08:	e612      	b.n	19730 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   19b0a:	f7f2 fd23 	bl	c554 <sdc_hci_cmd_le_set_privacy_mode>
   19b0e:	e602      	b.n	19716 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   19b10:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   19b14:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19b16:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   19b1a:	d821      	bhi.n	19b60 <hci_internal_cmd_put+0x4f8>
   19b1c:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   19b20:	f43f add0 	beq.w	196c4 <hci_internal_cmd_put+0x5c>
   19b24:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   19b28:	3b01      	subs	r3, #1
   19b2a:	2b09      	cmp	r3, #9
   19b2c:	f63f adca 	bhi.w	196c4 <hci_internal_cmd_put+0x5c>
   19b30:	a201      	add	r2, pc, #4	; (adr r2, 19b38 <hci_internal_cmd_put+0x4d0>)
   19b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19b36:	bf00      	nop
   19b38:	00019b81 	.word	0x00019b81
   19b3c:	00019baf 	.word	0x00019baf
   19b40:	000196c5 	.word	0x000196c5
   19b44:	000196c5 	.word	0x000196c5
   19b48:	000196c5 	.word	0x000196c5
   19b4c:	00019bfb 	.word	0x00019bfb
   19b50:	000196c5 	.word	0x000196c5
   19b54:	000196c5 	.word	0x000196c5
   19b58:	00019be7 	.word	0x00019be7
   19b5c:	00019bf1 	.word	0x00019bf1
   19b60:	f505 7340 	add.w	r3, r5, #768	; 0x300
   19b64:	b29b      	uxth	r3, r3
   19b66:	2b05      	cmp	r3, #5
   19b68:	f63f adac 	bhi.w	196c4 <hci_internal_cmd_put+0x5c>
   19b6c:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   19b70:	2b05      	cmp	r3, #5
   19b72:	f63f ada7 	bhi.w	196c4 <hci_internal_cmd_put+0x5c>
   19b76:	e8df f003 	tbb	[pc, r3]
   19b7a:	5044      	.short	0x5044
   19b7c:	5c595653 	.word	0x5c595653
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   19b80:	4841      	ldr	r0, [pc, #260]	; (19c88 <hci_internal_cmd_put+0x620>)
   19b82:	f7ea f9f7 	bl	3f74 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   19b86:	2310      	movs	r3, #16
	switch (hci_opcode) {
   19b88:	f242 0219 	movw	r2, #8217	; 0x2019
   19b8c:	4296      	cmp	r6, r2
   19b8e:	dc60      	bgt.n	19c52 <hci_internal_cmd_put+0x5ea>
   19b90:	f242 020c 	movw	r2, #8204	; 0x200c
   19b94:	4296      	cmp	r6, r2
   19b96:	dc4f      	bgt.n	19c38 <hci_internal_cmd_put+0x5d0>
   19b98:	f240 4206 	movw	r2, #1030	; 0x406
   19b9c:	4296      	cmp	r6, r2
   19b9e:	f43f ad95 	beq.w	196cc <hci_internal_cmd_put+0x64>
   19ba2:	f240 421d 	movw	r2, #1053	; 0x41d
   19ba6:	4296      	cmp	r6, r2
   19ba8:	f43f ad90 	beq.w	196cc <hci_internal_cmd_put+0x64>
   19bac:	e66e      	b.n	1988c <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   19bae:	4836      	ldr	r0, [pc, #216]	; (19c88 <hci_internal_cmd_put+0x620>)
   19bb0:	2202      	movs	r2, #2
   19bb2:	2100      	movs	r1, #0
   19bb4:	f003 fe2b 	bl	1d80e <memset>
	cmds->read_version_info = 1;
   19bb8:	79e3      	ldrb	r3, [r4, #7]
   19bba:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   19bbe:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   19bc2:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   19bc4:	7a23      	ldrb	r3, [r4, #8]
   19bc6:	f023 0307 	bic.w	r3, r3, #7
   19bca:	f043 0307 	orr.w	r3, r3, #7
   19bce:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   19bd0:	f242 0319 	movw	r3, #8217	; 0x2019
   19bd4:	429e      	cmp	r6, r3
   19bd6:	dd47      	ble.n	19c68 <hci_internal_cmd_put+0x600>
   19bd8:	f242 0332 	movw	r3, #8242	; 0x2032
   19bdc:	429e      	cmp	r6, r3
   19bde:	d051      	beq.n	19c84 <hci_internal_cmd_put+0x61c>
   19be0:	f242 0343 	movw	r3, #8259	; 0x2043
   19be4:	e04b      	b.n	19c7e <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   19be6:	4828      	ldr	r0, [pc, #160]	; (19c88 <hci_internal_cmd_put+0x620>)
   19be8:	f7f2 fc24 	bl	c434 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   19bec:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   19bee:	e7cb      	b.n	19b88 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   19bf0:	4825      	ldr	r0, [pc, #148]	; (19c88 <hci_internal_cmd_put+0x620>)
   19bf2:	f7f2 fbd2 	bl	c39a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   19bf6:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   19bf8:	e7c6      	b.n	19b88 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19bfa:	f7f2 fc66 	bl	c4ca <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   19bfe:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19c00:	e7c2      	b.n	19b88 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   19c02:	4821      	ldr	r0, [pc, #132]	; (19c88 <hci_internal_cmd_put+0x620>)
   19c04:	2201      	movs	r2, #1
   19c06:	2100      	movs	r1, #0
   19c08:	f003 fe01 	bl	1d80e <memset>
	cmds->read_supported_vs_commands = 1;
   19c0c:	79e3      	ldrb	r3, [r4, #7]
   19c0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   19c12:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   19c16:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   19c18:	e626      	b.n	19868 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   19c1a:	f7f2 fbb7 	bl	c38c <sdc_hci_cmd_vs_llpm_mode_set>
   19c1e:	e57a      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   19c20:	f7f2 fbb0 	bl	c384 <sdc_hci_cmd_vs_conn_update>
   19c24:	e577      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   19c26:	f7f2 fba5 	bl	c374 <sdc_hci_cmd_vs_conn_event_extend>
   19c2a:	e574      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   19c2c:	f7f2 fbb0 	bl	c390 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   19c30:	e571      	b.n	19716 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   19c32:	f7f2 fba9 	bl	c388 <sdc_hci_cmd_vs_event_length_set>
   19c36:	e56e      	b.n	19716 <hci_internal_cmd_put+0xae>
   19c38:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   19c3c:	3a0d      	subs	r2, #13
   19c3e:	2101      	movs	r1, #1
   19c40:	b292      	uxth	r2, r2
   19c42:	fa01 f202 	lsl.w	r2, r1, r2
   19c46:	f241 2141 	movw	r1, #4673	; 0x1241
   19c4a:	420a      	tst	r2, r1
   19c4c:	f43f ae1e 	beq.w	1988c <hci_internal_cmd_put+0x224>
   19c50:	e53c      	b.n	196cc <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   19c52:	f242 0232 	movw	r2, #8242	; 0x2032
   19c56:	4296      	cmp	r6, r2
   19c58:	f43f ad38 	beq.w	196cc <hci_internal_cmd_put+0x64>
   19c5c:	f242 0243 	movw	r2, #8259	; 0x2043
   19c60:	e7a1      	b.n	19ba6 <hci_internal_cmd_put+0x53e>
		return -NRF_EPERM;
   19c62:	f04f 30ff 	mov.w	r0, #4294967295
   19c66:	e53d      	b.n	196e4 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   19c68:	f242 030c 	movw	r3, #8204	; 0x200c
   19c6c:	429e      	cmp	r6, r3
   19c6e:	f73f adfb 	bgt.w	19868 <hci_internal_cmd_put+0x200>
   19c72:	f240 4306 	movw	r3, #1030	; 0x406
   19c76:	429e      	cmp	r6, r3
   19c78:	d004      	beq.n	19c84 <hci_internal_cmd_put+0x61c>
   19c7a:	f240 431d 	movw	r3, #1053	; 0x41d
   19c7e:	429e      	cmp	r6, r3
   19c80:	f47f adf2 	bne.w	19868 <hci_internal_cmd_put+0x200>
   19c84:	2000      	movs	r0, #0
   19c86:	e521      	b.n	196cc <hci_internal_cmd_put+0x64>
   19c88:	200028c5 	.word	0x200028c5

00019c8c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   19c8c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   19c8e:	4c07      	ldr	r4, [pc, #28]	; (19cac <hci_internal_evt_get+0x20>)
   19c90:	7823      	ldrb	r3, [r4, #0]
   19c92:	b13b      	cbz	r3, 19ca4 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   19c94:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   19c96:	1c61      	adds	r1, r4, #1
   19c98:	3202      	adds	r2, #2
   19c9a:	f003 fd8d 	bl	1d7b8 <memcpy>
		cmd_complete_or_status.occurred = false;
   19c9e:	2000      	movs	r0, #0
   19ca0:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   19ca2:	bd10      	pop	{r4, pc}
   19ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   19ca8:	f7f2 bb47 	b.w	c33a <sdc_hci_evt_get>
   19cac:	200028be 	.word	0x200028be

00019cb0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   19cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   19cb4:	4c0b      	ldr	r4, [pc, #44]	; (19ce4 <bt_rand+0x34>)
   19cb6:	6823      	ldr	r3, [r4, #0]
{
   19cb8:	4605      	mov	r5, r0
   19cba:	460e      	mov	r6, r1
   19cbc:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   19cbe:	b13b      	cbz	r3, 19cd0 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   19cc0:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   19cc2:	6883      	ldr	r3, [r0, #8]
   19cc4:	b2b2      	uxth	r2, r6
   19cc6:	4629      	mov	r1, r5
   19cc8:	681b      	ldr	r3, [r3, #0]
}
   19cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19cce:	4718      	bx	r3
   19cd0:	4805      	ldr	r0, [pc, #20]	; (19ce8 <bt_rand+0x38>)
   19cd2:	f000 fa03 	bl	1a0dc <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19cd6:	6020      	str	r0, [r4, #0]
		if (!dev) {
   19cd8:	2800      	cmp	r0, #0
   19cda:	d1f1      	bne.n	19cc0 <bt_rand+0x10>
}
   19cdc:	f06f 0012 	mvn.w	r0, #18
   19ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ce4:	20001fe0 	.word	0x20001fe0
   19ce8:	00022de1 	.word	0x00022de1

00019cec <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   19cec:	b538      	push	{r3, r4, r5, lr}
   19cee:	4b0b      	ldr	r3, [pc, #44]	; (19d1c <m_assert_handler+0x30>)
   19cf0:	4c0b      	ldr	r4, [pc, #44]	; (19d20 <m_assert_handler+0x34>)
   19cf2:	1ae4      	subs	r4, r4, r3
   19cf4:	460d      	mov	r5, r1
   19cf6:	08e4      	lsrs	r4, r4, #3
   19cf8:	f7f6 fc30 	bl	1055c <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   19cfc:	01a4      	lsls	r4, r4, #6
   19cfe:	f044 0401 	orr.w	r4, r4, #1
   19d02:	4601      	mov	r1, r0
   19d04:	4623      	mov	r3, r4
   19d06:	4807      	ldr	r0, [pc, #28]	; (19d24 <m_assert_handler+0x38>)
   19d08:	462a      	mov	r2, r5
   19d0a:	f002 fa5a 	bl	1c1c2 <log_2>
	k_oops();
   19d0e:	4040      	eors	r0, r0
   19d10:	f380 8811 	msr	BASEPRI, r0
   19d14:	f04f 0003 	mov.w	r0, #3
   19d18:	df02      	svc	2
}
   19d1a:	bd38      	pop	{r3, r4, r5, pc}
   19d1c:	00020854 	.word	0x00020854
   19d20:	000208ec 	.word	0x000208ec
   19d24:	00022f2d 	.word	0x00022f2d

00019d28 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   19d28:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   19d2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   19d2e:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   19d32:	2300      	movs	r3, #0
   19d34:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   19d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19d3c:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19d40:	4a0e      	ldr	r2, [pc, #56]	; (19d7c <mpsl_lib_init+0x54>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   19d42:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19d44:	2119      	movs	r1, #25
   19d46:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   19d48:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19d4c:	f7e9 fce4 	bl	3718 <mpsl_init>
	if (err) {
   19d50:	4604      	mov	r4, r0
   19d52:	b980      	cbnz	r0, 19d76 <mpsl_lib_init+0x4e>
		return err;
	}

	mpsl_fem_device_config_254_apply_set(
   19d54:	f7e9 fe4e 	bl	39f4 <mpsl_fem_device_config_254_apply_set>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19d58:	2201      	movs	r2, #1
   19d5a:	4621      	mov	r1, r4
   19d5c:	2008      	movs	r0, #8
   19d5e:	f7f7 fb81 	bl	11464 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19d62:	2201      	movs	r2, #1
   19d64:	4621      	mov	r1, r4
   19d66:	200b      	movs	r0, #11
   19d68:	f7f7 fb7c 	bl	11464 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19d6c:	2201      	movs	r2, #1
   19d6e:	4621      	mov	r1, r4
   19d70:	4610      	mov	r0, r2
   19d72:	f7f7 fb77 	bl	11464 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   19d76:	4620      	mov	r0, r4
   19d78:	b002      	add	sp, #8
   19d7a:	bd10      	pop	{r4, pc}
   19d7c:	00019ced 	.word	0x00019ced

00019d80 <mpsl_low_prio_irq_handler>:
   19d80:	4801      	ldr	r0, [pc, #4]	; (19d88 <mpsl_low_prio_irq_handler+0x8>)
   19d82:	f000 bd0b 	b.w	1a79c <z_impl_k_sem_give>
   19d86:	bf00      	nop
   19d88:	20000790 	.word	0x20000790

00019d8c <signal_thread>:
{
   19d8c:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   19d8e:	4c09      	ldr	r4, [pc, #36]	; (19db4 <signal_thread+0x28>)
   19d90:	f04f 32ff 	mov.w	r2, #4294967295
   19d94:	f04f 33ff 	mov.w	r3, #4294967295
   19d98:	4620      	mov	r0, r4
   19d9a:	f000 fd25 	bl	1a7e8 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   19d9e:	f04f 31ff 	mov.w	r1, #4294967295
   19da2:	f04f 30ff 	mov.w	r0, #4294967295
   19da6:	f7ff fa4f 	bl	19248 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   19daa:	f7f1 fe5f 	bl	ba6c <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   19dae:	f7ff fa53 	bl	19258 <multithreading_lock_release>
	while (true) {
   19db2:	e7ed      	b.n	19d90 <signal_thread+0x4>
   19db4:	20000790 	.word	0x20000790

00019db8 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   19db8:	b530      	push	{r4, r5, lr}
   19dba:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19dbc:	4d0f      	ldr	r5, [pc, #60]	; (19dfc <mpsl_signal_thread_init+0x44>)
   19dbe:	4910      	ldr	r1, [pc, #64]	; (19e00 <mpsl_signal_thread_init+0x48>)
   19dc0:	2200      	movs	r2, #0
   19dc2:	2300      	movs	r3, #0
   19dc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19dc8:	2400      	movs	r4, #0
   19dca:	f06f 0309 	mvn.w	r3, #9
   19dce:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19dd2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19dd6:	4b0b      	ldr	r3, [pc, #44]	; (19e04 <mpsl_signal_thread_init+0x4c>)
   19dd8:	9400      	str	r4, [sp, #0]
   19dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19dde:	4628      	mov	r0, r5
   19de0:	f000 fb4a 	bl	1a478 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19de4:	4908      	ldr	r1, [pc, #32]	; (19e08 <mpsl_signal_thread_init+0x50>)
   19de6:	4628      	mov	r0, r5
   19de8:	f005 ff45 	bl	1fc76 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   19dec:	4622      	mov	r2, r4
   19dee:	2104      	movs	r1, #4
   19df0:	2019      	movs	r0, #25
   19df2:	f7f7 fb37 	bl	11464 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   19df6:	4620      	mov	r0, r4
   19df8:	b009      	add	sp, #36	; 0x24
   19dfa:	bd30      	pop	{r4, r5, pc}
   19dfc:	20001b08 	.word	0x20001b08
   19e00:	20003f40 	.word	0x20003f40
   19e04:	00019d8d 	.word	0x00019d8d
   19e08:	00022f41 	.word	0x00022f41

00019e0c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   19e0c:	4b01      	ldr	r3, [pc, #4]	; (19e14 <mpsl_hfclk_callback+0x8>)
   19e0e:	2000      	movs	r0, #0
   19e10:	681b      	ldr	r3, [r3, #0]
   19e12:	4718      	bx	r3
   19e14:	20001fe4 	.word	0x20001fe4

00019e18 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   19e18:	b120      	cbz	r0, 19e24 <nrfx_clock_start+0xc>
   19e1a:	2801      	cmp	r0, #1
   19e1c:	d106      	bne.n	19e2c <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   19e1e:	4804      	ldr	r0, [pc, #16]	; (19e30 <nrfx_clock_start+0x18>)
   19e20:	f7e9 bada 	b.w	33d8 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19e24:	4b03      	ldr	r3, [pc, #12]	; (19e34 <nrfx_clock_start+0x1c>)
   19e26:	2001      	movs	r0, #1
   19e28:	681b      	ldr	r3, [r3, #0]
   19e2a:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   19e2c:	4770      	bx	lr
   19e2e:	bf00      	nop
   19e30:	00019e0d 	.word	0x00019e0d
   19e34:	20001fe4 	.word	0x20001fe4

00019e38 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   19e38:	4b01      	ldr	r3, [pc, #4]	; (19e40 <nrfx_clock_init+0x8>)
   19e3a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   19e3c:	4801      	ldr	r0, [pc, #4]	; (19e44 <nrfx_clock_init+0xc>)
   19e3e:	4770      	bx	lr
   19e40:	20001fe4 	.word	0x20001fe4
   19e44:	0bad0000 	.word	0x0bad0000

00019e48 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   19e48:	4b04      	ldr	r3, [pc, #16]	; (19e5c <nrf52_errata_108+0x14>)
   19e4a:	6818      	ldr	r0, [r3, #0]
   19e4c:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19e4e:	bf04      	itt	eq
   19e50:	4b03      	ldreq	r3, [pc, #12]	; (19e60 <nrf52_errata_108+0x18>)
   19e52:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   19e54:	1f83      	subs	r3, r0, #6
   19e56:	4258      	negs	r0, r3
   19e58:	4158      	adcs	r0, r3
   19e5a:	4770      	bx	lr
   19e5c:	10000130 	.word	0x10000130
   19e60:	f0000fe0 	.word	0xf0000fe0

00019e64 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19e64:	4b07      	ldr	r3, [pc, #28]	; (19e84 <nrf52_errata_16+0x20>)
   19e66:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19e68:	2b06      	cmp	r3, #6
   19e6a:	d109      	bne.n	19e80 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   19e6c:	4b06      	ldr	r3, [pc, #24]	; (19e88 <nrf52_errata_16+0x24>)
   19e6e:	681b      	ldr	r3, [r3, #0]
   19e70:	f3c3 1303 	ubfx	r3, r3, #4, #4
   19e74:	3b03      	subs	r3, #3
   19e76:	2b04      	cmp	r3, #4
   19e78:	d802      	bhi.n	19e80 <nrf52_errata_16+0x1c>
   19e7a:	4a04      	ldr	r2, [pc, #16]	; (19e8c <nrf52_errata_16+0x28>)
   19e7c:	5cd0      	ldrb	r0, [r2, r3]
   19e7e:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19e80:	2000      	movs	r0, #0
    #endif
}
   19e82:	4770      	bx	lr
   19e84:	f0000fe0 	.word	0xf0000fe0
   19e88:	f0000fe8 	.word	0xf0000fe8
   19e8c:	00022f66 	.word	0x00022f66

00019e90 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19e90:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   19e92:	f7ff ffd9 	bl	19e48 <nrf52_errata_108>
   19e96:	b128      	cbz	r0, 19ea4 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   19e98:	4b6b      	ldr	r3, [pc, #428]	; (1a048 <SystemInit+0x1b8>)
   19e9a:	4a6c      	ldr	r2, [pc, #432]	; (1a04c <SystemInit+0x1bc>)
   19e9c:	681b      	ldr	r3, [r3, #0]
   19e9e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   19ea2:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   19ea4:	f7ff ffde 	bl	19e64 <nrf52_errata_16>
   19ea8:	b110      	cbz	r0, 19eb0 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   19eaa:	4b69      	ldr	r3, [pc, #420]	; (1a050 <SystemInit+0x1c0>)
   19eac:	4a69      	ldr	r2, [pc, #420]	; (1a054 <SystemInit+0x1c4>)
   19eae:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   19eb0:	f7ff ffca 	bl	19e48 <nrf52_errata_108>
   19eb4:	b128      	cbz	r0, 19ec2 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   19eb6:	4b68      	ldr	r3, [pc, #416]	; (1a058 <SystemInit+0x1c8>)
   19eb8:	4a68      	ldr	r2, [pc, #416]	; (1a05c <SystemInit+0x1cc>)
   19eba:	681b      	ldr	r3, [r3, #0]
   19ebc:	f3c3 3342 	ubfx	r3, r3, #13, #3
   19ec0:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   19ec2:	f7ff ffcf 	bl	19e64 <nrf52_errata_16>
   19ec6:	b120      	cbz	r0, 19ed2 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   19ec8:	4a65      	ldr	r2, [pc, #404]	; (1a060 <SystemInit+0x1d0>)
   19eca:	68d3      	ldr	r3, [r2, #12]
   19ecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19ed0:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19ed2:	f7ff ffb9 	bl	19e48 <nrf52_errata_108>
   19ed6:	b140      	cbz	r0, 19eea <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19edc:	2200      	movs	r2, #0
   19ede:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19ee2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19ee6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   19eea:	f7ff ffbb 	bl	19e64 <nrf52_errata_16>
   19eee:	b110      	cbz	r0, 19ef6 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   19ef0:	4b5c      	ldr	r3, [pc, #368]	; (1a064 <SystemInit+0x1d4>)
   19ef2:	2203      	movs	r2, #3
   19ef4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   19ef6:	f7ff ffb5 	bl	19e64 <nrf52_errata_16>
   19efa:	b140      	cbz	r0, 19f0e <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   19efc:	4b5a      	ldr	r3, [pc, #360]	; (1a068 <SystemInit+0x1d8>)
   19efe:	2205      	movs	r2, #5
   19f00:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   19f02:	2201      	movs	r2, #1
   19f04:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   19f06:	2200      	movs	r2, #0
   19f08:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   19f0a:	223f      	movs	r2, #63	; 0x3f
   19f0c:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   19f0e:	4b57      	ldr	r3, [pc, #348]	; (1a06c <SystemInit+0x1dc>)
   19f10:	681a      	ldr	r2, [r3, #0]
   19f12:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19f14:	bf0b      	itete	eq
   19f16:	4b56      	ldreq	r3, [pc, #344]	; (1a070 <SystemInit+0x1e0>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   19f18:	4b56      	ldrne	r3, [pc, #344]	; (1a074 <SystemInit+0x1e4>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19f1a:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   19f1c:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   19f1e:	bf02      	ittt	eq
   19f20:	3308      	addeq	r3, #8
   19f22:	681b      	ldreq	r3, [r3, #0]
   19f24:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19f28:	2a06      	cmp	r2, #6
   19f2a:	d14d      	bne.n	19fc8 <SystemInit+0x138>
            {
                switch(var2)
   19f2c:	3b03      	subs	r3, #3
   19f2e:	2b04      	cmp	r3, #4
   19f30:	d803      	bhi.n	19f3a <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   19f32:	4a51      	ldr	r2, [pc, #324]	; (1a078 <SystemInit+0x1e8>)
   19f34:	5cd3      	ldrb	r3, [r2, r3]
   19f36:	2b00      	cmp	r3, #0
   19f38:	d046      	beq.n	19fc8 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19f3e:	4b4f      	ldr	r3, [pc, #316]	; (1a07c <SystemInit+0x1ec>)
   19f40:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   19f44:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19f48:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19f4c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19f50:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   19f54:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19f58:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19f5c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19f60:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19f64:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19f68:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19f6c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19f70:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19f74:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   19f78:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   19f7c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19f80:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19f84:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19f88:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   19f8c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19f90:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19f94:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19f98:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   19f9c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19fa0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19fa4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19fa8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19fac:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19fb0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19fb4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19fb8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   19fbc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19fc0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19fc4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   19fc8:	f7ff ff3e 	bl	19e48 <nrf52_errata_108>
   19fcc:	b128      	cbz	r0, 19fda <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   19fce:	4b2c      	ldr	r3, [pc, #176]	; (1a080 <SystemInit+0x1f0>)
   19fd0:	4a2c      	ldr	r2, [pc, #176]	; (1a084 <SystemInit+0x1f4>)
   19fd2:	681b      	ldr	r3, [r3, #0]
   19fd4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   19fd8:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19fda:	f7ff ff35 	bl	19e48 <nrf52_errata_108>
   19fde:	b148      	cbz	r0, 19ff4 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19fe4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   19fe8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19fea:	bf44      	itt	mi
   19fec:	f06f 0201 	mvnmi.w	r2, #1
   19ff0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19ff4:	4b1d      	ldr	r3, [pc, #116]	; (1a06c <SystemInit+0x1dc>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19ff6:	681b      	ldr	r3, [r3, #0]
   19ff8:	2b06      	cmp	r3, #6
   19ffa:	d120      	bne.n	1a03e <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19ffc:	4b1d      	ldr	r3, [pc, #116]	; (1a074 <SystemInit+0x1e4>)
   19ffe:	681b      	ldr	r3, [r3, #0]
   1a000:	3b03      	subs	r3, #3
   1a002:	2b04      	cmp	r3, #4
   1a004:	d802      	bhi.n	1a00c <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1a006:	4a20      	ldr	r2, [pc, #128]	; (1a088 <SystemInit+0x1f8>)
   1a008:	5cd3      	ldrb	r3, [r2, r3]
   1a00a:	b143      	cbz	r3, 1a01e <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1a00c:	4a1f      	ldr	r2, [pc, #124]	; (1a08c <SystemInit+0x1fc>)
   1a00e:	6813      	ldr	r3, [r2, #0]
   1a010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1a014:	6013      	str	r3, [r2, #0]
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a016:	4b15      	ldr	r3, [pc, #84]	; (1a06c <SystemInit+0x1dc>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1a018:	681b      	ldr	r3, [r3, #0]
   1a01a:	2b06      	cmp	r3, #6
   1a01c:	d10f      	bne.n	1a03e <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a01e:	4b15      	ldr	r3, [pc, #84]	; (1a074 <SystemInit+0x1e4>)
   1a020:	681b      	ldr	r3, [r3, #0]
   1a022:	3b03      	subs	r3, #3
   1a024:	2b04      	cmp	r3, #4
   1a026:	d802      	bhi.n	1a02e <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1a028:	4a19      	ldr	r2, [pc, #100]	; (1a090 <SystemInit+0x200>)
   1a02a:	5cd3      	ldrb	r3, [r2, r3]
   1a02c:	b13b      	cbz	r3, 1a03e <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1a02e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a032:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1a036:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a03a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1a03e:	4b15      	ldr	r3, [pc, #84]	; (1a094 <SystemInit+0x204>)
   1a040:	4a15      	ldr	r2, [pc, #84]	; (1a098 <SystemInit+0x208>)
   1a042:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1a044:	bd08      	pop	{r3, pc}
   1a046:	bf00      	nop
   1a048:	10000324 	.word	0x10000324
   1a04c:	40013540 	.word	0x40013540
   1a050:	4007c074 	.word	0x4007c074
   1a054:	baadf00d 	.word	0xbaadf00d
   1a058:	10000244 	.word	0x10000244
   1a05c:	4000053c 	.word	0x4000053c
   1a060:	e000edf0 	.word	0xe000edf0
   1a064:	400005a0 	.word	0x400005a0
   1a068:	40005610 	.word	0x40005610
   1a06c:	10000130 	.word	0x10000130
   1a070:	f0000fe0 	.word	0xf0000fe0
   1a074:	10000134 	.word	0x10000134
   1a078:	00022f57 	.word	0x00022f57
   1a07c:	4000c000 	.word	0x4000c000
   1a080:	10000258 	.word	0x10000258
   1a084:	40000ee4 	.word	0x40000ee4
   1a088:	00022f5c 	.word	0x00022f5c
   1a08c:	4000173c 	.word	0x4000173c
   1a090:	00022f61 	.word	0x00022f61
   1a094:	20000560 	.word	0x20000560
   1a098:	03d09000 	.word	0x03d09000

0001a09c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a09c:	4b0e      	ldr	r3, [pc, #56]	; (1a0d8 <z_sys_init_run_level+0x3c>)
{
   1a09e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a0a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a0a4:	3001      	adds	r0, #1
   1a0a6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1a0aa:	42a6      	cmp	r6, r4
   1a0ac:	d800      	bhi.n	1a0b0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1a0ae:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1a0b0:	e9d4 3500 	ldrd	r3, r5, [r4]
   1a0b4:	4628      	mov	r0, r5
   1a0b6:	4798      	blx	r3
		if (dev != NULL) {
   1a0b8:	b165      	cbz	r5, 1a0d4 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1a0ba:	68eb      	ldr	r3, [r5, #12]
   1a0bc:	b130      	cbz	r0, 1a0cc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1a0be:	2800      	cmp	r0, #0
   1a0c0:	bfb8      	it	lt
   1a0c2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1a0c4:	28ff      	cmp	r0, #255	; 0xff
   1a0c6:	bfa8      	it	ge
   1a0c8:	20ff      	movge	r0, #255	; 0xff
   1a0ca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1a0cc:	785a      	ldrb	r2, [r3, #1]
   1a0ce:	f042 0201 	orr.w	r2, r2, #1
   1a0d2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a0d4:	3408      	adds	r4, #8
   1a0d6:	e7e8      	b.n	1a0aa <z_sys_init_run_level+0xe>
   1a0d8:	00021108 	.word	0x00021108

0001a0dc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1a0dc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1a0de:	4605      	mov	r5, r0
   1a0e0:	b910      	cbnz	r0, 1a0e8 <z_impl_device_get_binding+0xc>
		return NULL;
   1a0e2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1a0e4:	4620      	mov	r0, r4
   1a0e6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1a0e8:	7803      	ldrb	r3, [r0, #0]
   1a0ea:	2b00      	cmp	r3, #0
   1a0ec:	d0f9      	beq.n	1a0e2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a0ee:	4a0f      	ldr	r2, [pc, #60]	; (1a12c <z_impl_device_get_binding+0x50>)
   1a0f0:	4c0f      	ldr	r4, [pc, #60]	; (1a130 <z_impl_device_get_binding+0x54>)
   1a0f2:	4616      	mov	r6, r2
   1a0f4:	4294      	cmp	r4, r2
   1a0f6:	d108      	bne.n	1a10a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a0f8:	4c0d      	ldr	r4, [pc, #52]	; (1a130 <z_impl_device_get_binding+0x54>)
   1a0fa:	42b4      	cmp	r4, r6
   1a0fc:	d0f1      	beq.n	1a0e2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a0fe:	4620      	mov	r0, r4
   1a100:	f005 fcfa 	bl	1faf8 <z_device_ready>
   1a104:	b950      	cbnz	r0, 1a11c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a106:	3418      	adds	r4, #24
   1a108:	e7f7      	b.n	1a0fa <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1a10a:	4620      	mov	r0, r4
   1a10c:	f005 fcf4 	bl	1faf8 <z_device_ready>
   1a110:	b110      	cbz	r0, 1a118 <z_impl_device_get_binding+0x3c>
   1a112:	6823      	ldr	r3, [r4, #0]
   1a114:	42ab      	cmp	r3, r5
   1a116:	d0e5      	beq.n	1a0e4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a118:	3418      	adds	r4, #24
   1a11a:	e7eb      	b.n	1a0f4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a11c:	6821      	ldr	r1, [r4, #0]
   1a11e:	4628      	mov	r0, r5
   1a120:	f003 fb2e 	bl	1d780 <strcmp>
   1a124:	2800      	cmp	r0, #0
   1a126:	d1ee      	bne.n	1a106 <z_impl_device_get_binding+0x2a>
   1a128:	e7dc      	b.n	1a0e4 <z_impl_device_get_binding+0x8>
   1a12a:	bf00      	nop
   1a12c:	2000068c 	.word	0x2000068c
   1a130:	2000062c 	.word	0x2000062c

0001a134 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a134:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a138:	4606      	mov	r6, r0
   1a13a:	460f      	mov	r7, r1
	__asm__ volatile(
   1a13c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a140:	f3ef 8811 	mrs	r8, BASEPRI
   1a144:	f383 8811 	msr	BASEPRI, r3
   1a148:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1a14c:	f001 f84a 	bl	1b1e4 <z_impl_k_current_get>
   1a150:	4c1f      	ldr	r4, [pc, #124]	; (1a1d0 <z_fatal_error+0x9c>)
   1a152:	4b20      	ldr	r3, [pc, #128]	; (1a1d4 <z_fatal_error+0xa0>)
   1a154:	1ae4      	subs	r4, r4, r3
   1a156:	2e04      	cmp	r6, #4
   1a158:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1a15c:	bf96      	itet	ls
   1a15e:	4a1e      	ldrls	r2, [pc, #120]	; (1a1d8 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1a160:	4a1e      	ldrhi	r2, [pc, #120]	; (1a1dc <z_fatal_error+0xa8>)
   1a162:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1a166:	01a4      	lsls	r4, r4, #6
   1a168:	f044 0301 	orr.w	r3, r4, #1
   1a16c:	4605      	mov	r5, r0
   1a16e:	f8ad 3000 	strh.w	r3, [sp]
   1a172:	481b      	ldr	r0, [pc, #108]	; (1a1e0 <z_fatal_error+0xac>)
   1a174:	2300      	movs	r3, #0
   1a176:	4631      	mov	r1, r6
   1a178:	f002 f83c 	bl	1c1f4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1a17c:	b147      	cbz	r7, 1a190 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1a17e:	69fb      	ldr	r3, [r7, #28]
   1a180:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1a184:	b123      	cbz	r3, 1a190 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1a186:	4817      	ldr	r0, [pc, #92]	; (1a1e4 <z_fatal_error+0xb0>)
   1a188:	f044 0101 	orr.w	r1, r4, #1
   1a18c:	f001 fff8 	bl	1c180 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1a190:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1a194:	b12d      	cbz	r5, 1a1a2 <z_fatal_error+0x6e>
   1a196:	4628      	mov	r0, r5
   1a198:	f005 fd70 	bl	1fc7c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1a19c:	b108      	cbz	r0, 1a1a2 <z_fatal_error+0x6e>
   1a19e:	7803      	ldrb	r3, [r0, #0]
   1a1a0:	b903      	cbnz	r3, 1a1a4 <z_fatal_error+0x70>
		thread_name = "unknown";
   1a1a2:	4811      	ldr	r0, [pc, #68]	; (1a1e8 <z_fatal_error+0xb4>)
   1a1a4:	f7f6 f9da 	bl	1055c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1a1a8:	4623      	mov	r3, r4
   1a1aa:	4602      	mov	r2, r0
   1a1ac:	4629      	mov	r1, r5
   1a1ae:	480f      	ldr	r0, [pc, #60]	; (1a1ec <z_fatal_error+0xb8>)
   1a1b0:	f002 f807 	bl	1c1c2 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1a1b4:	4639      	mov	r1, r7
   1a1b6:	4630      	mov	r0, r6
   1a1b8:	f7ff f854 	bl	19264 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1a1bc:	f388 8811 	msr	BASEPRI, r8
   1a1c0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1a1c4:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1a1c6:	b002      	add	sp, #8
   1a1c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a1cc:	f7f7 bd06 	b.w	11bdc <z_impl_k_thread_abort>
   1a1d0:	00020904 	.word	0x00020904
   1a1d4:	00020854 	.word	0x00020854
   1a1d8:	00021120 	.word	0x00021120
   1a1dc:	00022f6b 	.word	0x00022f6b
   1a1e0:	00022f79 	.word	0x00022f79
   1a1e4:	00022fa1 	.word	0x00022fa1
   1a1e8:	00021a61 	.word	0x00021a61
   1a1ec:	00022fc2 	.word	0x00022fc2

0001a1f0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1a1f0:	4802      	ldr	r0, [pc, #8]	; (1a1fc <z_bss_zero+0xc>)
   1a1f2:	4a03      	ldr	r2, [pc, #12]	; (1a200 <z_bss_zero+0x10>)
   1a1f4:	2100      	movs	r1, #0
   1a1f6:	1a12      	subs	r2, r2, r0
   1a1f8:	f003 bb09 	b.w	1d80e <memset>
   1a1fc:	200008b0 	.word	0x200008b0
   1a200:	20002908 	.word	0x20002908

0001a204 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1a204:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1a206:	4b0a      	ldr	r3, [pc, #40]	; (1a230 <bg_thread_main+0x2c>)
   1a208:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a20a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1a20c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a20e:	f7ff ff45 	bl	1a09c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1a212:	f006 fa1a 	bl	2064a <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1a216:	2003      	movs	r0, #3
   1a218:	f7ff ff40 	bl	1a09c <z_sys_init_run_level>

	z_init_static_threads();
   1a21c:	f000 f958 	bl	1a4d0 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   1a220:	f7f5 fb98 	bl	f954 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1a224:	4a03      	ldr	r2, [pc, #12]	; (1a234 <bg_thread_main+0x30>)
   1a226:	7b13      	ldrb	r3, [r2, #12]
   1a228:	f023 0301 	bic.w	r3, r3, #1
   1a22c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1a22e:	bd08      	pop	{r3, pc}
   1a230:	20002905 	.word	0x20002905
   1a234:	20001c08 	.word	0x20001c08

0001a238 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1a238:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1a23c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1a23e:	f7f6 f8d3 	bl	103e8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1a242:	f8df 9100 	ldr.w	r9, [pc, #256]	; 1a344 <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1a246:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1a24a:	4d36      	ldr	r5, [pc, #216]	; (1a324 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1a24c:	4e36      	ldr	r6, [pc, #216]	; (1a328 <z_cstart+0xf0>)
   1a24e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a250:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1a348 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
   1a254:	4f35      	ldr	r7, [pc, #212]	; (1a32c <z_cstart+0xf4>)
   1a256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a25a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a25c:	23e0      	movs	r3, #224	; 0xe0
   1a25e:	2400      	movs	r4, #0
   1a260:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1a264:	2320      	movs	r3, #32
   1a266:	77eb      	strb	r3, [r5, #31]
   1a268:	762c      	strb	r4, [r5, #24]
   1a26a:	766c      	strb	r4, [r5, #25]
   1a26c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1a26e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a270:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1a274:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1a276:	f7f7 fc4d 	bl	11b14 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1a27a:	f7f7 f967 	bl	1154c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1a27e:	f04f 33ff 	mov.w	r3, #4294967295
   1a282:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1a284:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1a286:	f7f7 fd65 	bl	11d54 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1a28a:	4d29      	ldr	r5, [pc, #164]	; (1a330 <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1a28c:	f7f7 fcb8 	bl	11c00 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1a290:	f240 1301 	movw	r3, #257	; 0x101
   1a294:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1a298:	ab06      	add	r3, sp, #24
   1a29a:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   1a29c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1a2a0:	f005 fc29 	bl	1faf6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1a2a4:	4620      	mov	r0, r4
   1a2a6:	f7ff fef9 	bl	1a09c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1a2aa:	2001      	movs	r0, #1
   1a2ac:	f7ff fef6 	bl	1a09c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a2b0:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1a2b4:	f000 ff16 	bl	1b0e4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a2b8:	4b1e      	ldr	r3, [pc, #120]	; (1a334 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
   1a2ba:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a2bc:	491e      	ldr	r1, [pc, #120]	; (1a338 <z_cstart+0x100>)
   1a2be:	9305      	str	r3, [sp, #20]
   1a2c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a2c4:	4653      	mov	r3, sl
   1a2c6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1a2ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a2ce:	9400      	str	r4, [sp, #0]
   1a2d0:	4630      	mov	r0, r6
   1a2d2:	f000 f89f 	bl	1a414 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a2d6:	7b73      	ldrb	r3, [r6, #13]
   1a2d8:	4680      	mov	r8, r0
   1a2da:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1a2de:	4630      	mov	r0, r6
   1a2e0:	7373      	strb	r3, [r6, #13]
   1a2e2:	f005 ff23 	bl	2012c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1a2e6:	230f      	movs	r3, #15
   1a2e8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1a2ec:	4913      	ldr	r1, [pc, #76]	; (1a33c <z_cstart+0x104>)
   1a2ee:	4b14      	ldr	r3, [pc, #80]	; (1a340 <z_cstart+0x108>)
   1a2f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1a2f4:	e9cd b404 	strd	fp, r4, [sp, #16]
   1a2f8:	e9cd 5400 	strd	r5, r4, [sp]
   1a2fc:	4638      	mov	r0, r7
   1a2fe:	f000 f889 	bl	1a414 <z_setup_new_thread>
   1a302:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1a304:	60ef      	str	r7, [r5, #12]
   1a306:	f023 0304 	bic.w	r3, r3, #4
   1a30a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1a30c:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1a310:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1a314:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1a316:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1a31a:	4652      	mov	r2, sl
   1a31c:	4641      	mov	r1, r8
   1a31e:	4630      	mov	r0, r6
   1a320:	f7f7 f8fe 	bl	11520 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1a324:	e000ed00 	.word	0xe000ed00
   1a328:	20001c08 	.word	0x20001c08
   1a32c:	20001b88 	.word	0x20001b88
   1a330:	20001fe8 	.word	0x20001fe8
   1a334:	00023024 	.word	0x00023024
   1a338:	20004360 	.word	0x20004360
   1a33c:	20004780 	.word	0x20004780
   1a340:	0001a58d 	.word	0x0001a58d
   1a344:	20005100 	.word	0x20005100
   1a348:	0001a205 	.word	0x0001a205

0001a34c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1a34c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a34e:	4c06      	ldr	r4, [pc, #24]	; (1a368 <statics_init+0x1c>)
   1a350:	4d06      	ldr	r5, [pc, #24]	; (1a36c <statics_init+0x20>)
   1a352:	42ac      	cmp	r4, r5
   1a354:	d301      	bcc.n	1a35a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1a356:	2000      	movs	r0, #0
   1a358:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1a35a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1a35e:	4620      	mov	r0, r4
   1a360:	f005 fbd3 	bl	1fb0a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a364:	3414      	adds	r4, #20
   1a366:	e7f4      	b.n	1a352 <statics_init+0x6>
   1a368:	2000071c 	.word	0x2000071c
   1a36c:	2000071c 	.word	0x2000071c

0001a370 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1a370:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a372:	4b0e      	ldr	r3, [pc, #56]	; (1a3ac <init_mem_slab_module+0x3c>)
   1a374:	4c0e      	ldr	r4, [pc, #56]	; (1a3b0 <init_mem_slab_module+0x40>)
   1a376:	42a3      	cmp	r3, r4
   1a378:	d301      	bcc.n	1a37e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1a37a:	2000      	movs	r0, #0
	return rc;
}
   1a37c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a37e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1a382:	ea41 0200 	orr.w	r2, r1, r0
   1a386:	f012 0203 	ands.w	r2, r2, #3
   1a38a:	d10b      	bne.n	1a3a4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1a38c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1a38e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a390:	42aa      	cmp	r2, r5
   1a392:	d101      	bne.n	1a398 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a394:	331c      	adds	r3, #28
   1a396:	e7ee      	b.n	1a376 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1a398:	695e      	ldr	r6, [r3, #20]
   1a39a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a39c:	3201      	adds	r2, #1
		slab->free_list = p;
   1a39e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1a3a0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1a3a2:	e7f5      	b.n	1a390 <init_mem_slab_module+0x20>
		return -EINVAL;
   1a3a4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1a3a8:	e7e8      	b.n	1a37c <init_mem_slab_module+0xc>
   1a3aa:	bf00      	nop
   1a3ac:	200006c8 	.word	0x200006c8
   1a3b0:	2000071c 	.word	0x2000071c

0001a3b4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1a3b4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1a3b6:	460c      	mov	r4, r1
   1a3b8:	4616      	mov	r6, r2
   1a3ba:	461f      	mov	r7, r3
	__asm__ volatile(
   1a3bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a3c0:	f3ef 8111 	mrs	r1, BASEPRI
   1a3c4:	f383 8811 	msr	BASEPRI, r3
   1a3c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1a3cc:	6943      	ldr	r3, [r0, #20]
   1a3ce:	b15b      	cbz	r3, 1a3e8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1a3d0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1a3d2:	681b      	ldr	r3, [r3, #0]
   1a3d4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1a3d6:	6983      	ldr	r3, [r0, #24]
   1a3d8:	3301      	adds	r3, #1
   1a3da:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1a3dc:	2000      	movs	r0, #0
	__asm__ volatile(
   1a3de:	f381 8811 	msr	BASEPRI, r1
   1a3e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1a3e6:	e011      	b.n	1a40c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1a3e8:	ea56 0207 	orrs.w	r2, r6, r7
   1a3ec:	d103      	bne.n	1a3f6 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1a3ee:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1a3f0:	f06f 000b 	mvn.w	r0, #11
   1a3f4:	e7f3      	b.n	1a3de <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1a3f6:	4602      	mov	r2, r0
   1a3f8:	e9cd 6700 	strd	r6, r7, [sp]
   1a3fc:	3008      	adds	r0, #8
   1a3fe:	f000 fcb3 	bl	1ad68 <z_pend_curr>
		if (result == 0) {
   1a402:	b918      	cbnz	r0, 1a40c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1a404:	4b02      	ldr	r3, [pc, #8]	; (1a410 <k_mem_slab_alloc+0x5c>)
   1a406:	689b      	ldr	r3, [r3, #8]
   1a408:	695b      	ldr	r3, [r3, #20]
   1a40a:	6023      	str	r3, [r4, #0]
}
   1a40c:	b002      	add	sp, #8
   1a40e:	bdd0      	pop	{r4, r6, r7, pc}
   1a410:	20001fe8 	.word	0x20001fe8

0001a414 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1a414:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1a418:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1a41a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1a41c:	2604      	movs	r6, #4
   1a41e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1a420:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1a422:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1a424:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1a428:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a42a:	1dd6      	adds	r6, r2, #7
   1a42c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1a432:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a434:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1a438:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1a43a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1a43e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1a442:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1a444:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1a446:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a448:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a44c:	9202      	str	r2, [sp, #8]
   1a44e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a450:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1a452:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a456:	9200      	str	r2, [sp, #0]
   1a458:	4642      	mov	r2, r8
{
   1a45a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a45c:	f7f7 f82a 	bl	114b4 <arch_new_thread>
	if (!_current) {
   1a460:	4b04      	ldr	r3, [pc, #16]	; (1a474 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1a462:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1a464:	689b      	ldr	r3, [r3, #8]
   1a466:	b103      	cbz	r3, 1a46a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1a468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1a46a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1a46c:	4640      	mov	r0, r8
   1a46e:	b004      	add	sp, #16
   1a470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a474:	20001fe8 	.word	0x20001fe8

0001a478 <z_impl_k_thread_create>:
{
   1a478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a47a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a47c:	2500      	movs	r5, #0
   1a47e:	9505      	str	r5, [sp, #20]
   1a480:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1a482:	9504      	str	r5, [sp, #16]
   1a484:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1a486:	9503      	str	r5, [sp, #12]
   1a488:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a48a:	9502      	str	r5, [sp, #8]
{
   1a48c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a490:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1a492:	9501      	str	r5, [sp, #4]
   1a494:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1a496:	9500      	str	r5, [sp, #0]
{
   1a498:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a49a:	f7ff ffbb 	bl	1a414 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1a49e:	1c7b      	adds	r3, r7, #1
   1a4a0:	bf08      	it	eq
   1a4a2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1a4a6:	d005      	beq.n	1a4b4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a4a8:	ea56 0307 	orrs.w	r3, r6, r7
   1a4ac:	d105      	bne.n	1a4ba <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1a4ae:	4620      	mov	r0, r4
   1a4b0:	f000 fdae 	bl	1b010 <z_sched_start>
}
   1a4b4:	4620      	mov	r0, r4
   1a4b6:	b007      	add	sp, #28
   1a4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a4ba:	4904      	ldr	r1, [pc, #16]	; (1a4cc <z_impl_k_thread_create+0x54>)
   1a4bc:	4632      	mov	r2, r6
   1a4be:	463b      	mov	r3, r7
   1a4c0:	f104 0018 	add.w	r0, r4, #24
   1a4c4:	f000 ff98 	bl	1b3f8 <z_add_timeout>
   1a4c8:	e7f4      	b.n	1a4b4 <z_impl_k_thread_create+0x3c>
   1a4ca:	bf00      	nop
   1a4cc:	0002014d 	.word	0x0002014d

0001a4d0 <z_init_static_threads>:
{
   1a4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1a4d4:	4e2a      	ldr	r6, [pc, #168]	; (1a580 <z_init_static_threads+0xb0>)
   1a4d6:	4d2b      	ldr	r5, [pc, #172]	; (1a584 <z_init_static_threads+0xb4>)
{
   1a4d8:	b086      	sub	sp, #24
   1a4da:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1a4dc:	42b5      	cmp	r5, r6
   1a4de:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1a4e2:	d310      	bcc.n	1a506 <z_init_static_threads+0x36>
	k_sched_lock();
   1a4e4:	f000 fbce 	bl	1ac84 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a4e8:	4c26      	ldr	r4, [pc, #152]	; (1a584 <z_init_static_threads+0xb4>)
   1a4ea:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a588 <z_init_static_threads+0xb8>
			return (t * to_hz + off) / from_hz;
   1a4ee:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1a4f2:	f240 36e7 	movw	r6, #999	; 0x3e7
   1a4f6:	2700      	movs	r7, #0
   1a4f8:	4544      	cmp	r4, r8
   1a4fa:	d321      	bcc.n	1a540 <z_init_static_threads+0x70>
}
   1a4fc:	b006      	add	sp, #24
   1a4fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1a502:	f000 bcb1 	b.w	1ae68 <k_sched_unlock>
		z_setup_new_thread(
   1a506:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a50a:	9305      	str	r3, [sp, #20]
   1a50c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a510:	9304      	str	r3, [sp, #16]
   1a512:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a516:	9303      	str	r3, [sp, #12]
   1a518:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a51c:	9302      	str	r3, [sp, #8]
   1a51e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a522:	9301      	str	r3, [sp, #4]
   1a524:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1a528:	9300      	str	r3, [sp, #0]
   1a52a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1a52e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1a532:	f7ff ff6f 	bl	1a414 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1a536:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1a53a:	655d      	str	r5, [r3, #84]	; 0x54
   1a53c:	4625      	mov	r5, r4
   1a53e:	e7cd      	b.n	1a4dc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1a540:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a542:	1c5a      	adds	r2, r3, #1
   1a544:	d00d      	beq.n	1a562 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1a546:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a54a:	4630      	mov	r0, r6
   1a54c:	4639      	mov	r1, r7
   1a54e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a552:	42b9      	cmp	r1, r7
   1a554:	bf08      	it	eq
   1a556:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1a558:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a55a:	d104      	bne.n	1a566 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1a55c:	4628      	mov	r0, r5
   1a55e:	f000 fd57 	bl	1b010 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a562:	3430      	adds	r4, #48	; 0x30
   1a564:	e7c8      	b.n	1a4f8 <z_init_static_threads+0x28>
   1a566:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a56a:	2300      	movs	r3, #0
   1a56c:	f7e5 fdb8 	bl	e0 <__aeabi_uldivmod>
   1a570:	4602      	mov	r2, r0
   1a572:	460b      	mov	r3, r1
   1a574:	f105 0018 	add.w	r0, r5, #24
   1a578:	4651      	mov	r1, sl
   1a57a:	f000 ff3d 	bl	1b3f8 <z_add_timeout>
   1a57e:	e7f0      	b.n	1a562 <z_init_static_threads+0x92>
   1a580:	2000068c 	.word	0x2000068c
   1a584:	2000068c 	.word	0x2000068c
   1a588:	0002014d 	.word	0x0002014d

0001a58c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1a58c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1a58e:	4c09      	ldr	r4, [pc, #36]	; (1a5b4 <idle+0x28>)
	__asm__ volatile(
   1a590:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a594:	f3ef 8311 	mrs	r3, BASEPRI
   1a598:	f382 8811 	msr	BASEPRI, r2
   1a59c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1a5a0:	f005 fe76 	bl	20290 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1a5a4:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1a5a6:	f7f6 fa85 	bl	10ab4 <pm_system_suspend>
   1a5aa:	2800      	cmp	r0, #0
   1a5ac:	d1f0      	bne.n	1a590 <idle+0x4>
	arch_cpu_idle();
   1a5ae:	f7f6 ffd3 	bl	11558 <arch_cpu_idle>
}
   1a5b2:	e7ed      	b.n	1a590 <idle+0x4>
   1a5b4:	20001fe8 	.word	0x20001fe8

0001a5b8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1a5b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a5bc:	4604      	mov	r4, r0
   1a5be:	4616      	mov	r6, r2
   1a5c0:	461f      	mov	r7, r3
   1a5c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a5c6:	f3ef 8811 	mrs	r8, BASEPRI
   1a5ca:	f383 8811 	msr	BASEPRI, r3
   1a5ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1a5d2:	68c3      	ldr	r3, [r0, #12]
   1a5d4:	4a32      	ldr	r2, [pc, #200]	; (1a6a0 <z_impl_k_mutex_lock+0xe8>)
   1a5d6:	b16b      	cbz	r3, 1a5f4 <z_impl_k_mutex_lock+0x3c>
   1a5d8:	6880      	ldr	r0, [r0, #8]
   1a5da:	6891      	ldr	r1, [r2, #8]
   1a5dc:	4288      	cmp	r0, r1
   1a5de:	d019      	beq.n	1a614 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1a5e0:	ea56 0307 	orrs.w	r3, r6, r7
   1a5e4:	d118      	bne.n	1a618 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1a5e6:	f388 8811 	msr	BASEPRI, r8
   1a5ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1a5ee:	f06f 000f 	mvn.w	r0, #15
   1a5f2:	e00c      	b.n	1a60e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1a5f4:	6891      	ldr	r1, [r2, #8]
   1a5f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1a5fa:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1a5fc:	3301      	adds	r3, #1
   1a5fe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1a600:	6893      	ldr	r3, [r2, #8]
   1a602:	60a3      	str	r3, [r4, #8]
   1a604:	f388 8811 	msr	BASEPRI, r8
   1a608:	f3bf 8f6f 	isb	sy
		return 0;
   1a60c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1a60e:	b002      	add	sp, #8
   1a610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1a614:	6921      	ldr	r1, [r4, #16]
   1a616:	e7f0      	b.n	1a5fa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a618:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a61c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a620:	4299      	cmp	r1, r3
   1a622:	bfa8      	it	ge
   1a624:	4619      	movge	r1, r3
   1a626:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a62a:	428b      	cmp	r3, r1
   1a62c:	dd2c      	ble.n	1a688 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1a62e:	f000 fd0d 	bl	1b04c <z_set_prio>
   1a632:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a634:	e9cd 6700 	strd	r6, r7, [sp]
   1a638:	481a      	ldr	r0, [pc, #104]	; (1a6a4 <z_impl_k_mutex_lock+0xec>)
   1a63a:	4622      	mov	r2, r4
   1a63c:	4641      	mov	r1, r8
   1a63e:	f000 fb93 	bl	1ad68 <z_pend_curr>
	if (got_mutex == 0) {
   1a642:	2800      	cmp	r0, #0
   1a644:	d0e3      	beq.n	1a60e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1a646:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a64a:	f3ef 8611 	mrs	r6, BASEPRI
   1a64e:	f383 8811 	msr	BASEPRI, r3
   1a652:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a656:	6823      	ldr	r3, [r4, #0]
   1a658:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a65a:	429c      	cmp	r4, r3
   1a65c:	d007      	beq.n	1a66e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a65e:	b133      	cbz	r3, 1a66e <z_impl_k_mutex_lock+0xb6>
   1a660:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a664:	4299      	cmp	r1, r3
   1a666:	bfa8      	it	ge
   1a668:	4619      	movge	r1, r3
   1a66a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a66e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1a670:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a674:	4299      	cmp	r1, r3
   1a676:	d109      	bne.n	1a68c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1a678:	b16d      	cbz	r5, 1a696 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1a67a:	480a      	ldr	r0, [pc, #40]	; (1a6a4 <z_impl_k_mutex_lock+0xec>)
   1a67c:	4631      	mov	r1, r6
   1a67e:	f000 faef 	bl	1ac60 <z_reschedule>
	return -EAGAIN;
   1a682:	f06f 000a 	mvn.w	r0, #10
   1a686:	e7c2      	b.n	1a60e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1a688:	2500      	movs	r5, #0
   1a68a:	e7d3      	b.n	1a634 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1a68c:	f000 fcde 	bl	1b04c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a690:	2800      	cmp	r0, #0
   1a692:	d1f2      	bne.n	1a67a <z_impl_k_mutex_lock+0xc2>
   1a694:	e7f0      	b.n	1a678 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1a696:	f386 8811 	msr	BASEPRI, r6
   1a69a:	f3bf 8f6f 	isb	sy
   1a69e:	e7f0      	b.n	1a682 <z_impl_k_mutex_lock+0xca>
   1a6a0:	20001fe8 	.word	0x20001fe8
   1a6a4:	20002906 	.word	0x20002906

0001a6a8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a6a8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1a6aa:	6883      	ldr	r3, [r0, #8]
{
   1a6ac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1a6ae:	2b00      	cmp	r3, #0
   1a6b0:	d036      	beq.n	1a720 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a6b2:	4a1e      	ldr	r2, [pc, #120]	; (1a72c <z_impl_k_mutex_unlock+0x84>)
   1a6b4:	6892      	ldr	r2, [r2, #8]
   1a6b6:	4293      	cmp	r3, r2
   1a6b8:	d135      	bne.n	1a726 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1a6ba:	7bda      	ldrb	r2, [r3, #15]
   1a6bc:	3a01      	subs	r2, #1
   1a6be:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1a6c0:	68c3      	ldr	r3, [r0, #12]
   1a6c2:	2b01      	cmp	r3, #1
   1a6c4:	d005      	beq.n	1a6d2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1a6c6:	3b01      	subs	r3, #1
   1a6c8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1a6ca:	f000 fbcd 	bl	1ae68 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1a6ce:	2000      	movs	r0, #0
}
   1a6d0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a6d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a6d6:	f3ef 8511 	mrs	r5, BASEPRI
   1a6da:	f383 8811 	msr	BASEPRI, r3
   1a6de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a6e2:	6901      	ldr	r1, [r0, #16]
   1a6e4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1a6e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a6ea:	4299      	cmp	r1, r3
   1a6ec:	d001      	beq.n	1a6f2 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1a6ee:	f000 fcad 	bl	1b04c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a6f2:	4620      	mov	r0, r4
   1a6f4:	f005 fd61 	bl	201ba <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a6f8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a6fa:	b158      	cbz	r0, 1a714 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a6fc:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a700:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a702:	2200      	movs	r2, #0
   1a704:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1a706:	f005 fd11 	bl	2012c <z_ready_thread>
		z_reschedule(&lock, key);
   1a70a:	4809      	ldr	r0, [pc, #36]	; (1a730 <z_impl_k_mutex_unlock+0x88>)
   1a70c:	4629      	mov	r1, r5
   1a70e:	f000 faa7 	bl	1ac60 <z_reschedule>
   1a712:	e7da      	b.n	1a6ca <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1a714:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1a716:	f385 8811 	msr	BASEPRI, r5
   1a71a:	f3bf 8f6f 	isb	sy
   1a71e:	e7d4      	b.n	1a6ca <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1a720:	f06f 0015 	mvn.w	r0, #21
   1a724:	e7d4      	b.n	1a6d0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1a726:	f04f 30ff 	mov.w	r0, #4294967295
   1a72a:	e7d1      	b.n	1a6d0 <z_impl_k_mutex_unlock+0x28>
   1a72c:	20001fe8 	.word	0x20001fe8
   1a730:	20002906 	.word	0x20002906

0001a734 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a736:	4616      	mov	r6, r2
   1a738:	461f      	mov	r7, r3
	__asm__ volatile(
   1a73a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a73e:	f3ef 8511 	mrs	r5, BASEPRI
   1a742:	f383 8811 	msr	BASEPRI, r3
   1a746:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1a74a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a74c:	b19c      	cbz	r4, 1a776 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a74e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a750:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a752:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a756:	4294      	cmp	r4, r2
	list->head = node;
   1a758:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1a75a:	bf08      	it	eq
   1a75c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a75e:	2101      	movs	r1, #1
   1a760:	4620      	mov	r0, r4
   1a762:	f005 fb01 	bl	1fd68 <z_queue_node_peek>
   1a766:	4604      	mov	r4, r0
	__asm__ volatile(
   1a768:	f385 8811 	msr	BASEPRI, r5
   1a76c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a770:	4620      	mov	r0, r4
   1a772:	b003      	add	sp, #12
   1a774:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a776:	ea56 0307 	orrs.w	r3, r6, r7
   1a77a:	d0f5      	beq.n	1a768 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a77c:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a780:	e9cd 6700 	strd	r6, r7, [sp]
   1a784:	4629      	mov	r1, r5
   1a786:	4610      	mov	r0, r2
   1a788:	f000 faee 	bl	1ad68 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a78c:	2800      	cmp	r0, #0
   1a78e:	d1ef      	bne.n	1a770 <z_impl_k_queue_get+0x3c>
   1a790:	4b01      	ldr	r3, [pc, #4]	; (1a798 <z_impl_k_queue_get+0x64>)
   1a792:	689b      	ldr	r3, [r3, #8]
   1a794:	695c      	ldr	r4, [r3, #20]
   1a796:	e7eb      	b.n	1a770 <z_impl_k_queue_get+0x3c>
   1a798:	20001fe8 	.word	0x20001fe8

0001a79c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a79c:	b538      	push	{r3, r4, r5, lr}
   1a79e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a7a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a7a4:	f3ef 8511 	mrs	r5, BASEPRI
   1a7a8:	f383 8811 	msr	BASEPRI, r3
   1a7ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1a7b0:	f005 fd03 	bl	201ba <z_unpend_first_thread>

	if (thread != NULL) {
   1a7b4:	b148      	cbz	r0, 1a7ca <z_impl_k_sem_give+0x2e>
   1a7b6:	2200      	movs	r2, #0
   1a7b8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1a7ba:	f005 fcb7 	bl	2012c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1a7be:	4629      	mov	r1, r5
   1a7c0:	4808      	ldr	r0, [pc, #32]	; (1a7e4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1a7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1a7c6:	f000 ba4b 	b.w	1ac60 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a7ca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a7ce:	429a      	cmp	r2, r3
   1a7d0:	bf18      	it	ne
   1a7d2:	3301      	addne	r3, #1
   1a7d4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a7d6:	2102      	movs	r1, #2
   1a7d8:	f104 0010 	add.w	r0, r4, #16
   1a7dc:	f005 ff20 	bl	20620 <z_handle_obj_poll_events>
}
   1a7e0:	e7ed      	b.n	1a7be <z_impl_k_sem_give+0x22>
   1a7e2:	bf00      	nop
   1a7e4:	20002906 	.word	0x20002906

0001a7e8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1a7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a7ea:	4614      	mov	r4, r2
   1a7ec:	461d      	mov	r5, r3
   1a7ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a7f2:	f3ef 8111 	mrs	r1, BASEPRI
   1a7f6:	f383 8811 	msr	BASEPRI, r3
   1a7fa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1a7fe:	6883      	ldr	r3, [r0, #8]
   1a800:	b143      	cbz	r3, 1a814 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1a802:	3b01      	subs	r3, #1
   1a804:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1a806:	f381 8811 	msr	BASEPRI, r1
   1a80a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a80e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1a810:	b003      	add	sp, #12
   1a812:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a814:	ea54 0305 	orrs.w	r3, r4, r5
   1a818:	d106      	bne.n	1a828 <z_impl_k_sem_take+0x40>
   1a81a:	f381 8811 	msr	BASEPRI, r1
   1a81e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a822:	f06f 000f 	mvn.w	r0, #15
   1a826:	e7f3      	b.n	1a810 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a828:	4602      	mov	r2, r0
   1a82a:	e9cd 4500 	strd	r4, r5, [sp]
   1a82e:	4802      	ldr	r0, [pc, #8]	; (1a838 <z_impl_k_sem_take+0x50>)
   1a830:	f000 fa9a 	bl	1ad68 <z_pend_curr>
	return ret;
   1a834:	e7ec      	b.n	1a810 <z_impl_k_sem_take+0x28>
   1a836:	bf00      	nop
   1a838:	20002906 	.word	0x20002906

0001a83c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1a83c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1a83e:	4b09      	ldr	r3, [pc, #36]	; (1a864 <k_sys_work_q_init+0x28>)
   1a840:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1a842:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1a844:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1a846:	9300      	str	r3, [sp, #0]
   1a848:	4907      	ldr	r1, [pc, #28]	; (1a868 <k_sys_work_q_init+0x2c>)
   1a84a:	4808      	ldr	r0, [pc, #32]	; (1a86c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1a84c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1a850:	f04f 33ff 	mov.w	r3, #4294967295
   1a854:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a858:	f000 f91c 	bl	1aa94 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1a85c:	4620      	mov	r0, r4
   1a85e:	b004      	add	sp, #16
   1a860:	bd10      	pop	{r4, pc}
   1a862:	bf00      	nop
   1a864:	0002302c 	.word	0x0002302c
   1a868:	20005100 	.word	0x20005100
   1a86c:	20001c88 	.word	0x20001c88

0001a870 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a874:	4e4b      	ldr	r6, [pc, #300]	; (1a9a4 <work_queue_main+0x134>)
{
   1a876:	b085      	sub	sp, #20
   1a878:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1a87a:	f04f 38ff 	mov.w	r8, #4294967295
   1a87e:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1a882:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a886:	f3ef 8711 	mrs	r7, BASEPRI
   1a88a:	f383 8811 	msr	BASEPRI, r3
   1a88e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1a892:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1a896:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1a89a:	b985      	cbnz	r5, 1a8be <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   1a89c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1a8a0:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1a8a2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1a8a6:	d433      	bmi.n	1a910 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1a8a8:	2300      	movs	r3, #0
   1a8aa:	e9cd 8900 	strd	r8, r9, [sp]
   1a8ae:	9302      	str	r3, [sp, #8]
   1a8b0:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1a8b4:	4639      	mov	r1, r7
   1a8b6:	483c      	ldr	r0, [pc, #240]	; (1a9a8 <work_queue_main+0x138>)
   1a8b8:	f000 fcfc 	bl	1b2b4 <z_sched_wait>
			continue;
   1a8bc:	e7e1      	b.n	1a882 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a8be:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1a8c2:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1a8c4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a8c8:	4295      	cmp	r5, r2
   1a8ca:	d101      	bne.n	1a8d0 <work_queue_main+0x60>
	list->tail = node;
   1a8cc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1a8d0:	f043 0302 	orr.w	r3, r3, #2
   1a8d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1a8d8:	68eb      	ldr	r3, [r5, #12]
   1a8da:	f023 0304 	bic.w	r3, r3, #4
   1a8de:	f043 0301 	orr.w	r3, r3, #1
   1a8e2:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1a8e4:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1a8e6:	f387 8811 	msr	BASEPRI, r7
   1a8ea:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1a8ee:	4628      	mov	r0, r5
   1a8f0:	4798      	blx	r3
	__asm__ volatile(
   1a8f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a8f6:	f3ef 8b11 	mrs	fp, BASEPRI
   1a8fa:	f383 8811 	msr	BASEPRI, r3
   1a8fe:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1a902:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a904:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1a906:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a90a:	d40b      	bmi.n	1a924 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1a90c:	60ea      	str	r2, [r5, #12]
   1a90e:	e00e      	b.n	1a92e <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1a910:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1a914:	2200      	movs	r2, #0
   1a916:	2101      	movs	r1, #1
   1a918:	4628      	mov	r0, r5
   1a91a:	f005 fc76 	bl	2020a <z_sched_wake>
   1a91e:	2800      	cmp	r0, #0
   1a920:	d1f8      	bne.n	1a914 <work_queue_main+0xa4>
   1a922:	e7c1      	b.n	1a8a8 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a924:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1a926:	f023 0303 	bic.w	r3, r3, #3
   1a92a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a92c:	b970      	cbnz	r0, 1a94c <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1a92e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a932:	f023 0302 	bic.w	r3, r3, #2
   1a936:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1a93a:	f38b 8811 	msr	BASEPRI, fp
   1a93e:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1a942:	05d8      	lsls	r0, r3, #23
   1a944:	d49d      	bmi.n	1a882 <work_queue_main+0x12>
	z_impl_k_yield();
   1a946:	f000 fbd9 	bl	1b0fc <z_impl_k_yield>
}
   1a94a:	e79a      	b.n	1a882 <work_queue_main+0x12>
	return node->next;
   1a94c:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a94e:	f04f 0a00 	mov.w	sl, #0
   1a952:	2f00      	cmp	r7, #0
   1a954:	bf38      	it	cc
   1a956:	2700      	movcc	r7, #0
	parent->next = child;
   1a958:	4653      	mov	r3, sl
		if (wc->work == work) {
   1a95a:	6842      	ldr	r2, [r0, #4]
   1a95c:	4295      	cmp	r5, r2
   1a95e:	4601      	mov	r1, r0
   1a960:	d10e      	bne.n	1a980 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1a962:	6801      	ldr	r1, [r0, #0]
   1a964:	f1ba 0f00 	cmp.w	sl, #0
   1a968:	d114      	bne.n	1a994 <work_queue_main+0x124>
   1a96a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1a96c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a96e:	4290      	cmp	r0, r2
   1a970:	d100      	bne.n	1a974 <work_queue_main+0x104>
	list->tail = node;
   1a972:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1a974:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1a978:	f7ff ff10 	bl	1a79c <z_impl_k_sem_give>
}
   1a97c:	4651      	mov	r1, sl
   1a97e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a980:	2f00      	cmp	r7, #0
   1a982:	d0d4      	beq.n	1a92e <work_queue_main+0xbe>
	return node->next;
   1a984:	683a      	ldr	r2, [r7, #0]
   1a986:	2a00      	cmp	r2, #0
   1a988:	bf38      	it	cc
   1a98a:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a98c:	4638      	mov	r0, r7
   1a98e:	468a      	mov	sl, r1
   1a990:	4617      	mov	r7, r2
   1a992:	e7e2      	b.n	1a95a <work_queue_main+0xea>
	parent->next = child;
   1a994:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   1a998:	6872      	ldr	r2, [r6, #4]
   1a99a:	4290      	cmp	r0, r2
	list->tail = node;
   1a99c:	bf08      	it	eq
   1a99e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1a9a2:	e7e7      	b.n	1a974 <work_queue_main+0x104>
   1a9a4:	20002018 	.word	0x20002018
   1a9a8:	20002906 	.word	0x20002906

0001a9ac <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1a9ac:	68c3      	ldr	r3, [r0, #12]
{
   1a9ae:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a9b0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1a9b4:	079b      	lsls	r3, r3, #30
{
   1a9b6:	4605      	mov	r5, r0
   1a9b8:	460c      	mov	r4, r1
	if (ret) {
   1a9ba:	d50d      	bpl.n	1a9d8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a9bc:	2201      	movs	r2, #1
   1a9be:	2100      	movs	r1, #0
   1a9c0:	f104 0008 	add.w	r0, r4, #8
   1a9c4:	f005 fa39 	bl	1fe3a <z_impl_k_sem_init>
	parent->next = child;
   1a9c8:	2300      	movs	r3, #0
   1a9ca:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1a9cc:	4b05      	ldr	r3, [pc, #20]	; (1a9e4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1a9ce:	6065      	str	r5, [r4, #4]
   1a9d0:	685a      	ldr	r2, [r3, #4]
   1a9d2:	b91a      	cbnz	r2, 1a9dc <cancel_sync_locked+0x30>
	list->head = node;
   1a9d4:	e9c3 4400 	strd	r4, r4, [r3]
}
   1a9d8:	4630      	mov	r0, r6
   1a9da:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1a9dc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1a9de:	605c      	str	r4, [r3, #4]
}
   1a9e0:	e7fa      	b.n	1a9d8 <cancel_sync_locked+0x2c>
   1a9e2:	bf00      	nop
   1a9e4:	20002018 	.word	0x20002018

0001a9e8 <submit_to_queue_locked>:
{
   1a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a9ea:	68c3      	ldr	r3, [r0, #12]
   1a9ec:	079a      	lsls	r2, r3, #30
{
   1a9ee:	4604      	mov	r4, r0
   1a9f0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a9f2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1a9f6:	d41f      	bmi.n	1aa38 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1a9f8:	075f      	lsls	r7, r3, #29
   1a9fa:	d41f      	bmi.n	1aa3c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1a9fc:	680a      	ldr	r2, [r1, #0]
   1a9fe:	b90a      	cbnz	r2, 1aa04 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1aa00:	6882      	ldr	r2, [r0, #8]
   1aa02:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1aa04:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1aa06:	bf44      	itt	mi
   1aa08:	68a3      	ldrmi	r3, [r4, #8]
   1aa0a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1aa0c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1aa0e:	bf4c      	ite	mi
   1aa10:	2502      	movmi	r5, #2
		ret = 1;
   1aa12:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1aa14:	b37f      	cbz	r7, 1aa76 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1aa16:	4b1b      	ldr	r3, [pc, #108]	; (1aa84 <submit_to_queue_locked+0x9c>)
   1aa18:	689b      	ldr	r3, [r3, #8]
   1aa1a:	42bb      	cmp	r3, r7
   1aa1c:	d111      	bne.n	1aa42 <submit_to_queue_locked+0x5a>
   1aa1e:	f005 f924 	bl	1fc6a <k_is_in_isr>
   1aa22:	f080 0001 	eor.w	r0, r0, #1
   1aa26:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1aa28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1aa2c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1aa2e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1aa32:	d523      	bpl.n	1aa7c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1aa34:	b13a      	cbz	r2, 1aa46 <submit_to_queue_locked+0x5e>
   1aa36:	b940      	cbnz	r0, 1aa4a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1aa38:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1aa3c:	2300      	movs	r3, #0
   1aa3e:	6033      	str	r3, [r6, #0]
	return ret;
   1aa40:	e013      	b.n	1aa6a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1aa42:	2000      	movs	r0, #0
   1aa44:	e7f0      	b.n	1aa28 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1aa46:	071b      	lsls	r3, r3, #28
   1aa48:	d4f6      	bmi.n	1aa38 <submit_to_queue_locked+0x50>
	parent->next = child;
   1aa4a:	2300      	movs	r3, #0
   1aa4c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1aa4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1aa52:	b963      	cbnz	r3, 1aa6e <submit_to_queue_locked+0x86>
	list->head = node;
   1aa54:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1aa58:	4638      	mov	r0, r7
   1aa5a:	f005 f9fe 	bl	1fe5a <notify_queue_locked>
	*flagp |= BIT(bit);
   1aa5e:	68e3      	ldr	r3, [r4, #12]
   1aa60:	f043 0304 	orr.w	r3, r3, #4
   1aa64:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1aa66:	6833      	ldr	r3, [r6, #0]
   1aa68:	60a3      	str	r3, [r4, #8]
}
   1aa6a:	4628      	mov	r0, r5
   1aa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1aa6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1aa70:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1aa74:	e7f0      	b.n	1aa58 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1aa76:	f06f 0515 	mvn.w	r5, #21
   1aa7a:	e7df      	b.n	1aa3c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1aa7c:	f06f 0512 	mvn.w	r5, #18
   1aa80:	e7dc      	b.n	1aa3c <submit_to_queue_locked+0x54>
   1aa82:	bf00      	nop
   1aa84:	20001fe8 	.word	0x20001fe8

0001aa88 <k_work_submit>:
{
   1aa88:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1aa8a:	4801      	ldr	r0, [pc, #4]	; (1aa90 <k_work_submit+0x8>)
   1aa8c:	f005 ba55 	b.w	1ff3a <k_work_submit_to_queue>
   1aa90:	20001c88 	.word	0x20001c88

0001aa94 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa96:	b089      	sub	sp, #36	; 0x24
   1aa98:	4604      	mov	r4, r0
	list->head = NULL;
   1aa9a:	2000      	movs	r0, #0
	list->tail = NULL;
   1aa9c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1aaa0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1aaa2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1aaa6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1aaaa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1aaae:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1aab2:	b31d      	cbz	r5, 1aafc <k_work_queue_start+0x68>
   1aab4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1aab6:	2800      	cmp	r0, #0
   1aab8:	f240 1001 	movw	r0, #257	; 0x101
   1aabc:	bf08      	it	eq
   1aabe:	2001      	moveq	r0, #1
	*flagp = flags;
   1aac0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1aac4:	2000      	movs	r0, #0
   1aac6:	f04f 36ff 	mov.w	r6, #4294967295
   1aaca:	f04f 37ff 	mov.w	r7, #4294967295
   1aace:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1aad2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1aad6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1aada:	4b09      	ldr	r3, [pc, #36]	; (1ab00 <k_work_queue_start+0x6c>)
   1aadc:	9400      	str	r4, [sp, #0]
   1aade:	4620      	mov	r0, r4
   1aae0:	f7ff fcca 	bl	1a478 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1aae4:	b125      	cbz	r5, 1aaf0 <k_work_queue_start+0x5c>
   1aae6:	6829      	ldr	r1, [r5, #0]
   1aae8:	b111      	cbz	r1, 1aaf0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1aaea:	4620      	mov	r0, r4
   1aaec:	f005 f8c3 	bl	1fc76 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1aaf0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1aaf2:	b009      	add	sp, #36	; 0x24
   1aaf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1aaf8:	f005 b8c2 	b.w	1fc80 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1aafc:	2001      	movs	r0, #1
   1aafe:	e7df      	b.n	1aac0 <k_work_queue_start+0x2c>
   1ab00:	0001a871 	.word	0x0001a871

0001ab04 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1ab04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ab06:	4614      	mov	r4, r2
   1ab08:	9001      	str	r0, [sp, #4]
   1ab0a:	461d      	mov	r5, r3
   1ab0c:	4608      	mov	r0, r1
	__asm__ volatile(
   1ab0e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1ab12:	f3ef 8611 	mrs	r6, BASEPRI
   1ab16:	f381 8811 	msr	BASEPRI, r1
   1ab1a:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1ab1e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1ab20:	f011 0f0e 	tst.w	r1, #14
   1ab24:	d115      	bne.n	1ab52 <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ab26:	432c      	orrs	r4, r5
   1ab28:	d108      	bne.n	1ab3c <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   1ab2a:	a901      	add	r1, sp, #4
   1ab2c:	f7ff ff5c 	bl	1a9e8 <submit_to_queue_locked>
	__asm__ volatile(
   1ab30:	f386 8811 	msr	BASEPRI, r6
   1ab34:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1ab38:	b002      	add	sp, #8
   1ab3a:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   1ab3c:	f041 0108 	orr.w	r1, r1, #8
   1ab40:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1ab42:	9901      	ldr	r1, [sp, #4]
   1ab44:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1ab46:	3010      	adds	r0, #16
   1ab48:	4903      	ldr	r1, [pc, #12]	; (1ab58 <k_work_schedule_for_queue+0x54>)
   1ab4a:	f000 fc55 	bl	1b3f8 <z_add_timeout>
	return ret;
   1ab4e:	2001      	movs	r0, #1
   1ab50:	e7ee      	b.n	1ab30 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1ab52:	2000      	movs	r0, #0
   1ab54:	e7ec      	b.n	1ab30 <k_work_schedule_for_queue+0x2c>
   1ab56:	bf00      	nop
   1ab58:	0001feeb 	.word	0x0001feeb

0001ab5c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1ab5c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1ab5e:	4801      	ldr	r0, [pc, #4]	; (1ab64 <k_work_schedule+0x8>)
   1ab60:	f7ff bfd0 	b.w	1ab04 <k_work_schedule_for_queue>
   1ab64:	20001c88 	.word	0x20001c88

0001ab68 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1ab68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab6a:	460c      	mov	r4, r1
   1ab6c:	9001      	str	r0, [sp, #4]
   1ab6e:	4616      	mov	r6, r2
   1ab70:	461f      	mov	r7, r3
	__asm__ volatile(
   1ab72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab76:	f3ef 8511 	mrs	r5, BASEPRI
   1ab7a:	f383 8811 	msr	BASEPRI, r3
   1ab7e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1ab82:	4608      	mov	r0, r1
   1ab84:	f005 f970 	bl	1fe68 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ab88:	ea56 0307 	orrs.w	r3, r6, r7
   1ab8c:	d109      	bne.n	1aba2 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1ab8e:	a901      	add	r1, sp, #4
   1ab90:	4620      	mov	r0, r4
   1ab92:	f7ff ff29 	bl	1a9e8 <submit_to_queue_locked>
	__asm__ volatile(
   1ab96:	f385 8811 	msr	BASEPRI, r5
   1ab9a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1ab9e:	b003      	add	sp, #12
   1aba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1aba2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1aba4:	4906      	ldr	r1, [pc, #24]	; (1abc0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1aba6:	f043 0308 	orr.w	r3, r3, #8
   1abaa:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1abac:	9b01      	ldr	r3, [sp, #4]
   1abae:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1abb0:	f104 0010 	add.w	r0, r4, #16
   1abb4:	4632      	mov	r2, r6
   1abb6:	463b      	mov	r3, r7
   1abb8:	f000 fc1e 	bl	1b3f8 <z_add_timeout>
	return ret;
   1abbc:	2001      	movs	r0, #1
   1abbe:	e7ea      	b.n	1ab96 <k_work_reschedule_for_queue+0x2e>
   1abc0:	0001feeb 	.word	0x0001feeb

0001abc4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1abc4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1abc6:	4801      	ldr	r0, [pc, #4]	; (1abcc <k_work_reschedule+0x8>)
   1abc8:	f7ff bfce 	b.w	1ab68 <k_work_reschedule_for_queue>
   1abcc:	20001c88 	.word	0x20001c88

0001abd0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1abd0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1abd2:	4c08      	ldr	r4, [pc, #32]	; (1abf4 <z_reset_time_slice+0x24>)
   1abd4:	6823      	ldr	r3, [r4, #0]
   1abd6:	b15b      	cbz	r3, 1abf0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1abd8:	f7f6 fa04 	bl	10fe4 <sys_clock_elapsed>
   1abdc:	4603      	mov	r3, r0
   1abde:	6820      	ldr	r0, [r4, #0]
   1abe0:	4a05      	ldr	r2, [pc, #20]	; (1abf8 <z_reset_time_slice+0x28>)
   1abe2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1abe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1abe8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1abea:	2100      	movs	r1, #0
   1abec:	f005 bb60 	b.w	202b0 <z_set_timeout_expiry>
}
   1abf0:	bd10      	pop	{r4, pc}
   1abf2:	bf00      	nop
   1abf4:	20002028 	.word	0x20002028
   1abf8:	20001fe8 	.word	0x20001fe8

0001abfc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abfe:	4604      	mov	r4, r0
   1ac00:	460d      	mov	r5, r1
	__asm__ volatile(
   1ac02:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ac06:	f3ef 8611 	mrs	r6, BASEPRI
   1ac0a:	f383 8811 	msr	BASEPRI, r3
   1ac0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1ac12:	4b10      	ldr	r3, [pc, #64]	; (1ac54 <k_sched_time_slice_set+0x58>)
   1ac14:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ac16:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1ac1a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ac1e:	2100      	movs	r1, #0
   1ac20:	611a      	str	r2, [r3, #16]
   1ac22:	fbe7 0104 	umlal	r0, r1, r7, r4
   1ac26:	2300      	movs	r3, #0
   1ac28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ac2c:	f7e5 fa58 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1ac30:	2c00      	cmp	r4, #0
   1ac32:	4b09      	ldr	r3, [pc, #36]	; (1ac58 <k_sched_time_slice_set+0x5c>)
   1ac34:	dc09      	bgt.n	1ac4a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1ac36:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1ac38:	4b08      	ldr	r3, [pc, #32]	; (1ac5c <k_sched_time_slice_set+0x60>)
   1ac3a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1ac3c:	f7ff ffc8 	bl	1abd0 <z_reset_time_slice>
	__asm__ volatile(
   1ac40:	f386 8811 	msr	BASEPRI, r6
   1ac44:	f3bf 8f6f 	isb	sy
	}
}
   1ac48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1ac4a:	2802      	cmp	r0, #2
   1ac4c:	bfb8      	it	lt
   1ac4e:	2002      	movlt	r0, #2
   1ac50:	e7f1      	b.n	1ac36 <k_sched_time_slice_set+0x3a>
   1ac52:	bf00      	nop
   1ac54:	20001fe8 	.word	0x20001fe8
   1ac58:	20002028 	.word	0x20002028
   1ac5c:	20002024 	.word	0x20002024

0001ac60 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ac60:	b949      	cbnz	r1, 1ac76 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ac62:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1ac66:	b930      	cbnz	r0, 1ac76 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1ac68:	4b05      	ldr	r3, [pc, #20]	; (1ac80 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1ac6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1ac6c:	689b      	ldr	r3, [r3, #8]
   1ac6e:	429a      	cmp	r2, r3
   1ac70:	d001      	beq.n	1ac76 <z_reschedule+0x16>
	ret = arch_swap(key);
   1ac72:	f7f6 bb71 	b.w	11358 <arch_swap>
   1ac76:	f381 8811 	msr	BASEPRI, r1
   1ac7a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1ac7e:	4770      	bx	lr
   1ac80:	20001fe8 	.word	0x20001fe8

0001ac84 <k_sched_lock>:
	__asm__ volatile(
   1ac84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ac88:	f3ef 8111 	mrs	r1, BASEPRI
   1ac8c:	f383 8811 	msr	BASEPRI, r3
   1ac90:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1ac94:	4b04      	ldr	r3, [pc, #16]	; (1aca8 <k_sched_lock+0x24>)
   1ac96:	689a      	ldr	r2, [r3, #8]
   1ac98:	7bd3      	ldrb	r3, [r2, #15]
   1ac9a:	3b01      	subs	r3, #1
   1ac9c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1ac9e:	f381 8811 	msr	BASEPRI, r1
   1aca2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1aca6:	4770      	bx	lr
   1aca8:	20001fe8 	.word	0x20001fe8

0001acac <update_cache>:
{
   1acac:	b538      	push	{r3, r4, r5, lr}
   1acae:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1acb0:	480c      	ldr	r0, [pc, #48]	; (1ace4 <update_cache+0x38>)
   1acb2:	4d0d      	ldr	r5, [pc, #52]	; (1ace8 <update_cache+0x3c>)
   1acb4:	f005 fa03 	bl	200be <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1acb8:	4604      	mov	r4, r0
   1acba:	b900      	cbnz	r0, 1acbe <update_cache+0x12>
   1acbc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1acbe:	68ab      	ldr	r3, [r5, #8]
   1acc0:	b94a      	cbnz	r2, 1acd6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1acc2:	7b5a      	ldrb	r2, [r3, #13]
   1acc4:	06d2      	lsls	r2, r2, #27
   1acc6:	d106      	bne.n	1acd6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1acc8:	69a2      	ldr	r2, [r4, #24]
   1acca:	b922      	cbnz	r2, 1acd6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1accc:	89da      	ldrh	r2, [r3, #14]
   1acce:	2a7f      	cmp	r2, #127	; 0x7f
   1acd0:	d901      	bls.n	1acd6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1acd2:	626b      	str	r3, [r5, #36]	; 0x24
}
   1acd4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1acd6:	429c      	cmp	r4, r3
   1acd8:	d001      	beq.n	1acde <update_cache+0x32>
			z_reset_time_slice();
   1acda:	f7ff ff79 	bl	1abd0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1acde:	626c      	str	r4, [r5, #36]	; 0x24
}
   1ace0:	e7f8      	b.n	1acd4 <update_cache+0x28>
   1ace2:	bf00      	nop
   1ace4:	20002010 	.word	0x20002010
   1ace8:	20001fe8 	.word	0x20001fe8

0001acec <unready_thread>:
{
   1acec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1acee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1acf2:	7b43      	ldrb	r3, [r0, #13]
   1acf4:	2a00      	cmp	r2, #0
{
   1acf6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1acf8:	da04      	bge.n	1ad04 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1acfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1acfe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ad00:	f005 f988 	bl	20014 <sys_dlist_remove>
	update_cache(thread == _current);
   1ad04:	4b04      	ldr	r3, [pc, #16]	; (1ad18 <unready_thread+0x2c>)
   1ad06:	6898      	ldr	r0, [r3, #8]
   1ad08:	1a43      	subs	r3, r0, r1
   1ad0a:	4258      	negs	r0, r3
   1ad0c:	4158      	adcs	r0, r3
}
   1ad0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ad12:	f7ff bfcb 	b.w	1acac <update_cache>
   1ad16:	bf00      	nop
   1ad18:	20001fe8 	.word	0x20001fe8

0001ad1c <pend>:
{
   1ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad20:	4606      	mov	r6, r0
   1ad22:	4614      	mov	r4, r2
   1ad24:	461d      	mov	r5, r3
	__asm__ volatile(
   1ad26:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad2a:	f3ef 8711 	mrs	r7, BASEPRI
   1ad2e:	f383 8811 	msr	BASEPRI, r3
   1ad32:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ad36:	f005 f9cc 	bl	200d2 <add_to_waitq_locked>
	__asm__ volatile(
   1ad3a:	f387 8811 	msr	BASEPRI, r7
   1ad3e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ad42:	1c6b      	adds	r3, r5, #1
   1ad44:	bf08      	it	eq
   1ad46:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1ad4a:	d008      	beq.n	1ad5e <pend+0x42>
   1ad4c:	4622      	mov	r2, r4
   1ad4e:	462b      	mov	r3, r5
   1ad50:	f106 0018 	add.w	r0, r6, #24
   1ad54:	4903      	ldr	r1, [pc, #12]	; (1ad64 <pend+0x48>)
}
   1ad56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad5a:	f000 bb4d 	b.w	1b3f8 <z_add_timeout>
   1ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad62:	bf00      	nop
   1ad64:	0002014d 	.word	0x0002014d

0001ad68 <z_pend_curr>:
{
   1ad68:	b510      	push	{r4, lr}
	pending_current = _current;
   1ad6a:	4b07      	ldr	r3, [pc, #28]	; (1ad88 <z_pend_curr+0x20>)
   1ad6c:	6898      	ldr	r0, [r3, #8]
   1ad6e:	4b07      	ldr	r3, [pc, #28]	; (1ad8c <z_pend_curr+0x24>)
{
   1ad70:	460c      	mov	r4, r1
	pending_current = _current;
   1ad72:	6018      	str	r0, [r3, #0]
{
   1ad74:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1ad76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ad7a:	f7ff ffcf 	bl	1ad1c <pend>
   1ad7e:	4620      	mov	r0, r4
}
   1ad80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad84:	f7f6 bae8 	b.w	11358 <arch_swap>
   1ad88:	20001fe8 	.word	0x20001fe8
   1ad8c:	20002020 	.word	0x20002020

0001ad90 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad94:	4605      	mov	r5, r0
   1ad96:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1ad98:	f005 faa4 	bl	202e4 <sys_clock_tick_get_32>
   1ad9c:	4604      	mov	r4, r0
	__asm__ volatile(
   1ad9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ada2:	f3ef 8811 	mrs	r8, BASEPRI
   1ada6:	f383 8811 	msr	BASEPRI, r3
   1adaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1adae:	4e12      	ldr	r6, [pc, #72]	; (1adf8 <z_tick_sleep.part.0+0x68>)
   1adb0:	4b12      	ldr	r3, [pc, #72]	; (1adfc <z_tick_sleep.part.0+0x6c>)
   1adb2:	68b0      	ldr	r0, [r6, #8]
   1adb4:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1adb6:	f7ff ff99 	bl	1acec <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1adba:	68b0      	ldr	r0, [r6, #8]
   1adbc:	4910      	ldr	r1, [pc, #64]	; (1ae00 <z_tick_sleep.part.0+0x70>)
   1adbe:	462a      	mov	r2, r5
   1adc0:	463b      	mov	r3, r7
   1adc2:	3018      	adds	r0, #24
   1adc4:	f000 fb18 	bl	1b3f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1adc8:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1adca:	7b53      	ldrb	r3, [r2, #13]
   1adcc:	f043 0310 	orr.w	r3, r3, #16
   1add0:	7353      	strb	r3, [r2, #13]
   1add2:	4640      	mov	r0, r8
   1add4:	f7f6 fac0 	bl	11358 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1add8:	f005 fa84 	bl	202e4 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1addc:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1adde:	1a24      	subs	r4, r4, r0
   1ade0:	f04f 0500 	mov.w	r5, #0
   1ade4:	f165 0500 	sbc.w	r5, r5, #0
   1ade8:	2c00      	cmp	r4, #0
   1adea:	f175 0300 	sbcs.w	r3, r5, #0
   1adee:	bfb8      	it	lt
   1adf0:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1adf2:	4620      	mov	r0, r4
   1adf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1adf8:	20001fe8 	.word	0x20001fe8
   1adfc:	20002020 	.word	0x20002020
   1ae00:	0002014d 	.word	0x0002014d

0001ae04 <z_impl_k_thread_suspend>:
{
   1ae04:	b570      	push	{r4, r5, r6, lr}
   1ae06:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ae08:	3018      	adds	r0, #24
   1ae0a:	f005 fa1b 	bl	20244 <z_abort_timeout>
   1ae0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae12:	f3ef 8611 	mrs	r6, BASEPRI
   1ae16:	f383 8811 	msr	BASEPRI, r3
   1ae1a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1ae1e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1ae22:	7b63      	ldrb	r3, [r4, #13]
   1ae24:	2a00      	cmp	r2, #0
   1ae26:	da05      	bge.n	1ae34 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ae28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ae2c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ae2e:	4620      	mov	r0, r4
   1ae30:	f005 f8f0 	bl	20014 <sys_dlist_remove>
		update_cache(thread == _current);
   1ae34:	4d0b      	ldr	r5, [pc, #44]	; (1ae64 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ae36:	7b63      	ldrb	r3, [r4, #13]
   1ae38:	68a8      	ldr	r0, [r5, #8]
   1ae3a:	f043 0310 	orr.w	r3, r3, #16
   1ae3e:	7363      	strb	r3, [r4, #13]
   1ae40:	1b03      	subs	r3, r0, r4
   1ae42:	4258      	negs	r0, r3
   1ae44:	4158      	adcs	r0, r3
   1ae46:	f7ff ff31 	bl	1acac <update_cache>
	__asm__ volatile(
   1ae4a:	f386 8811 	msr	BASEPRI, r6
   1ae4e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1ae52:	68ab      	ldr	r3, [r5, #8]
   1ae54:	42a3      	cmp	r3, r4
   1ae56:	d103      	bne.n	1ae60 <z_impl_k_thread_suspend+0x5c>
}
   1ae58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1ae5c:	f005 b925 	b.w	200aa <z_reschedule_unlocked>
}
   1ae60:	bd70      	pop	{r4, r5, r6, pc}
   1ae62:	bf00      	nop
   1ae64:	20001fe8 	.word	0x20001fe8

0001ae68 <k_sched_unlock>:
{
   1ae68:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ae6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae6e:	f3ef 8411 	mrs	r4, BASEPRI
   1ae72:	f383 8811 	msr	BASEPRI, r3
   1ae76:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1ae7a:	4b08      	ldr	r3, [pc, #32]	; (1ae9c <k_sched_unlock+0x34>)
   1ae7c:	689a      	ldr	r2, [r3, #8]
   1ae7e:	7bd3      	ldrb	r3, [r2, #15]
   1ae80:	3301      	adds	r3, #1
   1ae82:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1ae84:	2000      	movs	r0, #0
   1ae86:	f7ff ff11 	bl	1acac <update_cache>
	__asm__ volatile(
   1ae8a:	f384 8811 	msr	BASEPRI, r4
   1ae8e:	f3bf 8f6f 	isb	sy
}
   1ae92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1ae96:	f005 b908 	b.w	200aa <z_reschedule_unlocked>
   1ae9a:	bf00      	nop
   1ae9c:	20001fe8 	.word	0x20001fe8

0001aea0 <move_thread_to_end_of_prio_q>:
{
   1aea0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1aea2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1aea6:	7b43      	ldrb	r3, [r0, #13]
   1aea8:	2a00      	cmp	r2, #0
{
   1aeaa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1aeac:	da04      	bge.n	1aeb8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1aeae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1aeb2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1aeb4:	f005 f8ae 	bl	20014 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1aeb8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1aeba:	4a17      	ldr	r2, [pc, #92]	; (1af18 <move_thread_to_end_of_prio_q+0x78>)
   1aebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1aec0:	4610      	mov	r0, r2
   1aec2:	734b      	strb	r3, [r1, #13]
   1aec4:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1aec8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aeca:	4283      	cmp	r3, r0
   1aecc:	bf08      	it	eq
   1aece:	2300      	moveq	r3, #0
   1aed0:	2b00      	cmp	r3, #0
   1aed2:	bf38      	it	cc
   1aed4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aed6:	b1cb      	cbz	r3, 1af0c <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1aed8:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1aedc:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1aee0:	42a6      	cmp	r6, r4
   1aee2:	d00f      	beq.n	1af04 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1aee4:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1aee6:	2c00      	cmp	r4, #0
   1aee8:	dd0c      	ble.n	1af04 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1aeea:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1aeec:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1aef0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1aef2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1aef4:	6890      	ldr	r0, [r2, #8]
   1aef6:	1a43      	subs	r3, r0, r1
   1aef8:	4258      	negs	r0, r3
}
   1aefa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1aefe:	4158      	adcs	r0, r3
   1af00:	f7ff bed4 	b.w	1acac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1af04:	42ab      	cmp	r3, r5
   1af06:	d001      	beq.n	1af0c <move_thread_to_end_of_prio_q+0x6c>
   1af08:	681b      	ldr	r3, [r3, #0]
   1af0a:	e7e4      	b.n	1aed6 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1af0c:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1af10:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1af12:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1af14:	e7ee      	b.n	1aef4 <move_thread_to_end_of_prio_q+0x54>
   1af16:	bf00      	nop
   1af18:	20001fe8 	.word	0x20001fe8

0001af1c <z_time_slice>:
{
   1af1c:	b570      	push	{r4, r5, r6, lr}
   1af1e:	4601      	mov	r1, r0
	__asm__ volatile(
   1af20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af24:	f3ef 8411 	mrs	r4, BASEPRI
   1af28:	f383 8811 	msr	BASEPRI, r3
   1af2c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1af30:	4b16      	ldr	r3, [pc, #88]	; (1af8c <z_time_slice+0x70>)
   1af32:	4a17      	ldr	r2, [pc, #92]	; (1af90 <z_time_slice+0x74>)
   1af34:	6898      	ldr	r0, [r3, #8]
   1af36:	6815      	ldr	r5, [r2, #0]
   1af38:	42a8      	cmp	r0, r5
   1af3a:	461d      	mov	r5, r3
   1af3c:	d106      	bne.n	1af4c <z_time_slice+0x30>
			z_reset_time_slice();
   1af3e:	f7ff fe47 	bl	1abd0 <z_reset_time_slice>
	__asm__ volatile(
   1af42:	f384 8811 	msr	BASEPRI, r4
   1af46:	f3bf 8f6f 	isb	sy
}
   1af4a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1af4c:	2600      	movs	r6, #0
   1af4e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1af50:	4a10      	ldr	r2, [pc, #64]	; (1af94 <z_time_slice+0x78>)
   1af52:	6812      	ldr	r2, [r2, #0]
   1af54:	b1ba      	cbz	r2, 1af86 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1af56:	89c2      	ldrh	r2, [r0, #14]
   1af58:	2a7f      	cmp	r2, #127	; 0x7f
   1af5a:	d814      	bhi.n	1af86 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1af5c:	7b42      	ldrb	r2, [r0, #13]
   1af5e:	06d2      	lsls	r2, r2, #27
   1af60:	d111      	bne.n	1af86 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1af62:	4a0d      	ldr	r2, [pc, #52]	; (1af98 <z_time_slice+0x7c>)
   1af64:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1af68:	6812      	ldr	r2, [r2, #0]
   1af6a:	4296      	cmp	r6, r2
   1af6c:	db0b      	blt.n	1af86 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1af6e:	4a0b      	ldr	r2, [pc, #44]	; (1af9c <z_time_slice+0x80>)
   1af70:	4290      	cmp	r0, r2
   1af72:	d008      	beq.n	1af86 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1af74:	691a      	ldr	r2, [r3, #16]
   1af76:	428a      	cmp	r2, r1
   1af78:	dc02      	bgt.n	1af80 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1af7a:	f7ff ff91 	bl	1aea0 <move_thread_to_end_of_prio_q>
   1af7e:	e7de      	b.n	1af3e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1af80:	1a52      	subs	r2, r2, r1
   1af82:	611a      	str	r2, [r3, #16]
   1af84:	e7dd      	b.n	1af42 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1af86:	2300      	movs	r3, #0
   1af88:	612b      	str	r3, [r5, #16]
   1af8a:	e7da      	b.n	1af42 <z_time_slice+0x26>
   1af8c:	20001fe8 	.word	0x20001fe8
   1af90:	20002020 	.word	0x20002020
   1af94:	20002028 	.word	0x20002028
   1af98:	20002024 	.word	0x20002024
   1af9c:	20001b88 	.word	0x20001b88

0001afa0 <ready_thread>:
{
   1afa0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1afa2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1afa6:	7b42      	ldrb	r2, [r0, #13]
   1afa8:	2b00      	cmp	r3, #0
   1afaa:	db2d      	blt.n	1b008 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1afac:	06d3      	lsls	r3, r2, #27
   1afae:	d12b      	bne.n	1b008 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1afb0:	6983      	ldr	r3, [r0, #24]
   1afb2:	bb4b      	cbnz	r3, 1b008 <ready_thread+0x68>
	return list->head == list;
   1afb4:	4915      	ldr	r1, [pc, #84]	; (1b00c <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1afb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1afba:	7342      	strb	r2, [r0, #13]
   1afbc:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1afbe:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   1afc0:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1afc4:	4294      	cmp	r4, r2
   1afc6:	bf18      	it	ne
   1afc8:	4623      	movne	r3, r4
   1afca:	2b00      	cmp	r3, #0
   1afcc:	bf38      	it	cc
   1afce:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1afd0:	b1ab      	cbz	r3, 1affe <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1afd2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1afd6:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1afda:	42a6      	cmp	r6, r4
   1afdc:	d00b      	beq.n	1aff6 <ready_thread+0x56>
		return b2 - b1;
   1afde:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1afe0:	2c00      	cmp	r4, #0
   1afe2:	dd08      	ble.n	1aff6 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1afe4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1afe6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1afea:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1afec:	6058      	str	r0, [r3, #4]
}
   1afee:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1aff0:	2000      	movs	r0, #0
   1aff2:	f7ff be5b 	b.w	1acac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1aff6:	42ab      	cmp	r3, r5
   1aff8:	d001      	beq.n	1affe <ready_thread+0x5e>
   1affa:	681b      	ldr	r3, [r3, #0]
   1affc:	e7e8      	b.n	1afd0 <ready_thread+0x30>
	node->prev = tail;
   1affe:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1b002:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1b004:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   1b006:	e7f2      	b.n	1afee <ready_thread+0x4e>
}
   1b008:	bc70      	pop	{r4, r5, r6}
   1b00a:	4770      	bx	lr
   1b00c:	20001fe8 	.word	0x20001fe8

0001b010 <z_sched_start>:
{
   1b010:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b012:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b016:	f3ef 8411 	mrs	r4, BASEPRI
   1b01a:	f382 8811 	msr	BASEPRI, r2
   1b01e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1b022:	7b42      	ldrb	r2, [r0, #13]
   1b024:	0751      	lsls	r1, r2, #29
   1b026:	d404      	bmi.n	1b032 <z_sched_start+0x22>
	__asm__ volatile(
   1b028:	f384 8811 	msr	BASEPRI, r4
   1b02c:	f3bf 8f6f 	isb	sy
}
   1b030:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b032:	f022 0204 	bic.w	r2, r2, #4
   1b036:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b038:	f7ff ffb2 	bl	1afa0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b03c:	4621      	mov	r1, r4
   1b03e:	4802      	ldr	r0, [pc, #8]	; (1b048 <z_sched_start+0x38>)
}
   1b040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b044:	f7ff be0c 	b.w	1ac60 <z_reschedule>
   1b048:	20002906 	.word	0x20002906

0001b04c <z_set_prio>:
{
   1b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b04e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b050:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b054:	f3ef 8611 	mrs	r6, BASEPRI
   1b058:	f383 8811 	msr	BASEPRI, r3
   1b05c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b060:	7b43      	ldrb	r3, [r0, #13]
   1b062:	06da      	lsls	r2, r3, #27
   1b064:	b249      	sxtb	r1, r1
   1b066:	d138      	bne.n	1b0da <z_set_prio+0x8e>
   1b068:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1b06a:	2d00      	cmp	r5, #0
   1b06c:	d135      	bne.n	1b0da <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b072:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b074:	f004 ffce 	bl	20014 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b078:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1b07a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b07c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b080:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1b082:	4817      	ldr	r0, [pc, #92]	; (1b0e0 <z_set_prio+0x94>)
   1b084:	4603      	mov	r3, r0
   1b086:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b08a:	429f      	cmp	r7, r3
   1b08c:	bf18      	it	ne
   1b08e:	463d      	movne	r5, r7
   1b090:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b092:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1b094:	461a      	mov	r2, r3
   1b096:	462b      	mov	r3, r5
   1b098:	bf38      	it	cc
   1b09a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b09c:	b1c3      	cbz	r3, 1b0d0 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1b09e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1b0a2:	42a9      	cmp	r1, r5
   1b0a4:	d010      	beq.n	1b0c8 <z_set_prio+0x7c>
		return b2 - b1;
   1b0a6:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b0a8:	2d00      	cmp	r5, #0
   1b0aa:	dd0d      	ble.n	1b0c8 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1b0ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b0ae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b0b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b0b4:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b0b6:	2001      	movs	r0, #1
   1b0b8:	f7ff fdf8 	bl	1acac <update_cache>
   1b0bc:	2001      	movs	r0, #1
	__asm__ volatile(
   1b0be:	f386 8811 	msr	BASEPRI, r6
   1b0c2:	f3bf 8f6f 	isb	sy
}
   1b0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b0c8:	42bb      	cmp	r3, r7
   1b0ca:	d001      	beq.n	1b0d0 <z_set_prio+0x84>
   1b0cc:	681b      	ldr	r3, [r3, #0]
   1b0ce:	e7e5      	b.n	1b09c <z_set_prio+0x50>
	node->prev = tail;
   1b0d0:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1b0d4:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1b0d6:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   1b0d8:	e7ed      	b.n	1b0b6 <z_set_prio+0x6a>
			thread->base.prio = prio;
   1b0da:	73a1      	strb	r1, [r4, #14]
   1b0dc:	2000      	movs	r0, #0
   1b0de:	e7ee      	b.n	1b0be <z_set_prio+0x72>
   1b0e0:	20001fe8 	.word	0x20001fe8

0001b0e4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b0e4:	4b04      	ldr	r3, [pc, #16]	; (1b0f8 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b0e6:	2100      	movs	r1, #0
   1b0e8:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1b0ec:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1b0f0:	4608      	mov	r0, r1
   1b0f2:	f7ff bd83 	b.w	1abfc <k_sched_time_slice_set>
   1b0f6:	bf00      	nop
   1b0f8:	20001fe8 	.word	0x20001fe8

0001b0fc <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   1b0fc:	4926      	ldr	r1, [pc, #152]	; (1b198 <z_impl_k_yield+0x9c>)
{
   1b0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1b100:	688a      	ldr	r2, [r1, #8]
   1b102:	4b26      	ldr	r3, [pc, #152]	; (1b19c <z_impl_k_yield+0xa0>)
   1b104:	429a      	cmp	r2, r3
   1b106:	d03d      	beq.n	1b184 <z_impl_k_yield+0x88>
	__asm__ volatile(
   1b108:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b10c:	f3ef 8511 	mrs	r5, BASEPRI
   1b110:	f383 8811 	msr	BASEPRI, r3
   1b114:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   1b118:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b11a:	7b43      	ldrb	r3, [r0, #13]
   1b11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b120:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b122:	f004 ff77 	bl	20014 <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   1b126:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b128:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1b12a:	4608      	mov	r0, r1
   1b12c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b130:	7353      	strb	r3, [r2, #13]
   1b132:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b136:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b138:	4283      	cmp	r3, r0
   1b13a:	bf08      	it	eq
   1b13c:	2300      	moveq	r3, #0
   1b13e:	2b00      	cmp	r3, #0
   1b140:	bf38      	it	cc
   1b142:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b144:	b1cb      	cbz	r3, 1b17a <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   1b146:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1b14a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1b14e:	42a7      	cmp	r7, r4
   1b150:	d00f      	beq.n	1b172 <z_impl_k_yield+0x76>
		return b2 - b1;
   1b152:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b154:	2c00      	cmp	r4, #0
   1b156:	dd0c      	ble.n	1b172 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   1b158:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b15a:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1b15e:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1b160:	605a      	str	r2, [r3, #4]
		update_cache(1);
   1b162:	2001      	movs	r0, #1
   1b164:	f7ff fda2 	bl	1acac <update_cache>
   1b168:	4628      	mov	r0, r5
}
   1b16a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b16e:	f7f6 b8f3 	b.w	11358 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b172:	42b3      	cmp	r3, r6
   1b174:	d001      	beq.n	1b17a <z_impl_k_yield+0x7e>
   1b176:	681b      	ldr	r3, [r3, #0]
   1b178:	e7e4      	b.n	1b144 <z_impl_k_yield+0x48>
	node->prev = tail;
   1b17a:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1b17e:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1b180:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   1b182:	e7ee      	b.n	1b162 <z_impl_k_yield+0x66>
   1b184:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b188:	f3ef 8011 	mrs	r0, BASEPRI
   1b18c:	f383 8811 	msr	BASEPRI, r3
   1b190:	f3bf 8f6f 	isb	sy
   1b194:	e7e9      	b.n	1b16a <z_impl_k_yield+0x6e>
   1b196:	bf00      	nop
   1b198:	20001fe8 	.word	0x20001fe8
   1b19c:	20001b88 	.word	0x20001b88

0001b1a0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b1a0:	f1b1 3fff 	cmp.w	r1, #4294967295
   1b1a4:	bf08      	it	eq
   1b1a6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1b1aa:	b508      	push	{r3, lr}
   1b1ac:	4602      	mov	r2, r0
   1b1ae:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b1b0:	d106      	bne.n	1b1c0 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1b1b2:	4b0b      	ldr	r3, [pc, #44]	; (1b1e0 <z_impl_k_sleep+0x40>)
   1b1b4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b1b6:	f7ff fe25 	bl	1ae04 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b1ba:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b1be:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1b1c0:	4313      	orrs	r3, r2
   1b1c2:	d10a      	bne.n	1b1da <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1b1c4:	f7ff ff9a 	bl	1b0fc <z_impl_k_yield>
		return 0;
   1b1c8:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   1b1ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b1ce:	fb80 2303 	smull	r2, r3, r0, r3
   1b1d2:	0bd0      	lsrs	r0, r2, #15
   1b1d4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1b1d8:	e7f1      	b.n	1b1be <z_impl_k_sleep+0x1e>
   1b1da:	f7ff fdd9 	bl	1ad90 <z_tick_sleep.part.0>
   1b1de:	e7f4      	b.n	1b1ca <z_impl_k_sleep+0x2a>
   1b1e0:	20001fe8 	.word	0x20001fe8

0001b1e4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b1e4:	4b01      	ldr	r3, [pc, #4]	; (1b1ec <z_impl_k_current_get+0x8>)
   1b1e6:	6898      	ldr	r0, [r3, #8]
   1b1e8:	4770      	bx	lr
   1b1ea:	bf00      	nop
   1b1ec:	20001fe8 	.word	0x20001fe8

0001b1f0 <z_impl_k_is_preempt_thread>:
   1b1f0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1b1f4:	b93b      	cbnz	r3, 1b206 <z_impl_k_is_preempt_thread+0x16>
   1b1f6:	4b05      	ldr	r3, [pc, #20]	; (1b20c <z_impl_k_is_preempt_thread+0x1c>)
   1b1f8:	689b      	ldr	r3, [r3, #8]
   1b1fa:	89d8      	ldrh	r0, [r3, #14]
   1b1fc:	287f      	cmp	r0, #127	; 0x7f
   1b1fe:	bf8c      	ite	hi
   1b200:	2000      	movhi	r0, #0
   1b202:	2001      	movls	r0, #1
   1b204:	4770      	bx	lr
   1b206:	2000      	movs	r0, #0
}
   1b208:	4770      	bx	lr
   1b20a:	bf00      	nop
   1b20c:	20001fe8 	.word	0x20001fe8

0001b210 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1b210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b214:	4604      	mov	r4, r0
   1b216:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b21a:	f3ef 8611 	mrs	r6, BASEPRI
   1b21e:	f383 8811 	msr	BASEPRI, r3
   1b222:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1b226:	7b43      	ldrb	r3, [r0, #13]
   1b228:	071a      	lsls	r2, r3, #28
   1b22a:	d505      	bpl.n	1b238 <z_thread_abort+0x28>
	__asm__ volatile(
   1b22c:	f386 8811 	msr	BASEPRI, r6
   1b230:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1b234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b238:	f023 0220 	bic.w	r2, r3, #32
   1b23c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1b240:	09d2      	lsrs	r2, r2, #7
   1b242:	d120      	bne.n	1b286 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b244:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1b246:	68a3      	ldr	r3, [r4, #8]
   1b248:	b113      	cbz	r3, 1b250 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1b24a:	4620      	mov	r0, r4
   1b24c:	f004 feea 	bl	20024 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1b250:	f104 0018 	add.w	r0, r4, #24
   1b254:	f004 fff6 	bl	20244 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b258:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1b25c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1b260:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b262:	42bd      	cmp	r5, r7
   1b264:	d000      	beq.n	1b268 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b266:	b9b5      	cbnz	r5, 1b296 <z_thread_abort+0x86>
		update_cache(1);
   1b268:	2001      	movs	r0, #1
   1b26a:	f7ff fd1f 	bl	1acac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1b26e:	4b10      	ldr	r3, [pc, #64]	; (1b2b0 <z_thread_abort+0xa0>)
   1b270:	689b      	ldr	r3, [r3, #8]
   1b272:	42a3      	cmp	r3, r4
   1b274:	d1da      	bne.n	1b22c <z_thread_abort+0x1c>
   1b276:	f3ef 8305 	mrs	r3, IPSR
   1b27a:	2b00      	cmp	r3, #0
   1b27c:	d1d6      	bne.n	1b22c <z_thread_abort+0x1c>
   1b27e:	4630      	mov	r0, r6
   1b280:	f7f6 f86a 	bl	11358 <arch_swap>
	return ret;
   1b284:	e7d2      	b.n	1b22c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b286:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1b28a:	f043 0308 	orr.w	r3, r3, #8
   1b28e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b290:	f004 fec0 	bl	20014 <sys_dlist_remove>
}
   1b294:	e7d7      	b.n	1b246 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1b296:	4628      	mov	r0, r5
   1b298:	f004 fec4 	bl	20024 <unpend_thread_no_timeout>
   1b29c:	f105 0018 	add.w	r0, r5, #24
   1b2a0:	f004 ffd0 	bl	20244 <z_abort_timeout>
   1b2a4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1b2a8:	4628      	mov	r0, r5
   1b2aa:	f7ff fe79 	bl	1afa0 <ready_thread>
   1b2ae:	e7d7      	b.n	1b260 <z_thread_abort+0x50>
   1b2b0:	20001fe8 	.word	0x20001fe8

0001b2b4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1b2b4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b2b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1b2ba:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b2bc:	e9cd 6700 	strd	r6, r7, [sp]
   1b2c0:	f7ff fd52 	bl	1ad68 <z_pend_curr>

	if (data != NULL) {
   1b2c4:	b11c      	cbz	r4, 1b2ce <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1b2c6:	4b03      	ldr	r3, [pc, #12]	; (1b2d4 <z_sched_wait+0x20>)
   1b2c8:	689b      	ldr	r3, [r3, #8]
   1b2ca:	695b      	ldr	r3, [r3, #20]
   1b2cc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1b2ce:	b002      	add	sp, #8
   1b2d0:	bdd0      	pop	{r4, r6, r7, pc}
   1b2d2:	bf00      	nop
   1b2d4:	20001fe8 	.word	0x20001fe8

0001b2d8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1b2d8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1b2da:	4806      	ldr	r0, [pc, #24]	; (1b2f4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1b2dc:	4a06      	ldr	r2, [pc, #24]	; (1b2f8 <z_data_copy+0x20>)
   1b2de:	4907      	ldr	r1, [pc, #28]	; (1b2fc <z_data_copy+0x24>)
   1b2e0:	1a12      	subs	r2, r2, r0
   1b2e2:	f002 fa69 	bl	1d7b8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b2e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1b2ea:	4a05      	ldr	r2, [pc, #20]	; (1b300 <z_data_copy+0x28>)
   1b2ec:	4905      	ldr	r1, [pc, #20]	; (1b304 <z_data_copy+0x2c>)
   1b2ee:	4806      	ldr	r0, [pc, #24]	; (1b308 <z_data_copy+0x30>)
   1b2f0:	f002 ba62 	b.w	1d7b8 <memcpy>
   1b2f4:	20000000 	.word	0x20000000
   1b2f8:	200008b0 	.word	0x200008b0
   1b2fc:	00023038 	.word	0x00023038
   1b300:	00000000 	.word	0x00000000
   1b304:	00023038 	.word	0x00023038
   1b308:	20000000 	.word	0x20000000

0001b30c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1b30c:	4b03      	ldr	r3, [pc, #12]	; (1b31c <elapsed+0x10>)
   1b30e:	681b      	ldr	r3, [r3, #0]
   1b310:	b90b      	cbnz	r3, 1b316 <elapsed+0xa>
   1b312:	f7f5 be67 	b.w	10fe4 <sys_clock_elapsed>
}
   1b316:	2000      	movs	r0, #0
   1b318:	4770      	bx	lr
   1b31a:	bf00      	nop
   1b31c:	2000202c 	.word	0x2000202c

0001b320 <remove_timeout>:
{
   1b320:	b530      	push	{r4, r5, lr}
   1b322:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b324:	b168      	cbz	r0, 1b342 <remove_timeout+0x22>
   1b326:	4a0a      	ldr	r2, [pc, #40]	; (1b350 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1b328:	6852      	ldr	r2, [r2, #4]
   1b32a:	4290      	cmp	r0, r2
   1b32c:	d009      	beq.n	1b342 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1b32e:	b143      	cbz	r3, 1b342 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1b330:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1b334:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b338:	1912      	adds	r2, r2, r4
   1b33a:	eb45 0101 	adc.w	r1, r5, r1
   1b33e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1b342:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1b344:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b346:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b348:	2300      	movs	r3, #0
	node->prev = NULL;
   1b34a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b34e:	bd30      	pop	{r4, r5, pc}
   1b350:	20000564 	.word	0x20000564

0001b354 <next_timeout>:

static int32_t next_timeout(void)
{
   1b354:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1b356:	4b13      	ldr	r3, [pc, #76]	; (1b3a4 <next_timeout+0x50>)
   1b358:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b35a:	429c      	cmp	r4, r3
   1b35c:	bf08      	it	eq
   1b35e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1b360:	f7ff ffd4 	bl	1b30c <elapsed>
   1b364:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1b366:	b1bc      	cbz	r4, 1b398 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1b368:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1b36c:	1b40      	subs	r0, r0, r5
   1b36e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1b372:	2801      	cmp	r0, #1
   1b374:	f171 0300 	sbcs.w	r3, r1, #0
   1b378:	db11      	blt.n	1b39e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1b37a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b37e:	2300      	movs	r3, #0
   1b380:	4282      	cmp	r2, r0
   1b382:	eb73 0401 	sbcs.w	r4, r3, r1
   1b386:	da00      	bge.n	1b38a <next_timeout+0x36>
   1b388:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1b38a:	4b07      	ldr	r3, [pc, #28]	; (1b3a8 <next_timeout+0x54>)
   1b38c:	691b      	ldr	r3, [r3, #16]
   1b38e:	b113      	cbz	r3, 1b396 <next_timeout+0x42>
   1b390:	4298      	cmp	r0, r3
   1b392:	bfa8      	it	ge
   1b394:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1b396:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1b398:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b39c:	e7f5      	b.n	1b38a <next_timeout+0x36>
   1b39e:	2000      	movs	r0, #0
   1b3a0:	e7f3      	b.n	1b38a <next_timeout+0x36>
   1b3a2:	bf00      	nop
   1b3a4:	20000564 	.word	0x20000564
   1b3a8:	20001fe8 	.word	0x20001fe8

0001b3ac <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1b3ac:	6803      	ldr	r3, [r0, #0]
{
   1b3ae:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   1b3b0:	b1eb      	cbz	r3, 1b3ee <timeout_rem+0x42>
	return list->head == list;
   1b3b2:	4a10      	ldr	r2, [pc, #64]	; (1b3f4 <timeout_rem+0x48>)
   1b3b4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b3b6:	4293      	cmp	r3, r2
   1b3b8:	d016      	beq.n	1b3e8 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b3ba:	6851      	ldr	r1, [r2, #4]
   1b3bc:	2400      	movs	r4, #0
   1b3be:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1b3c0:	b93b      	cbnz	r3, 1b3d2 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   1b3c2:	f7ff ffa3 	bl	1b30c <elapsed>
   1b3c6:	1a24      	subs	r4, r4, r0
   1b3c8:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   1b3cc:	4620      	mov	r0, r4
   1b3ce:	4629      	mov	r1, r5
   1b3d0:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   1b3d2:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   1b3d6:	18a4      	adds	r4, r4, r2
   1b3d8:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   1b3dc:	4283      	cmp	r3, r0
   1b3de:	d0f0      	beq.n	1b3c2 <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   1b3e0:	428b      	cmp	r3, r1
   1b3e2:	d0ee      	beq.n	1b3c2 <timeout_rem+0x16>
   1b3e4:	681b      	ldr	r3, [r3, #0]
   1b3e6:	e7eb      	b.n	1b3c0 <timeout_rem+0x14>
   1b3e8:	2400      	movs	r4, #0
   1b3ea:	2500      	movs	r5, #0
   1b3ec:	e7e9      	b.n	1b3c2 <timeout_rem+0x16>
		return 0;
   1b3ee:	2400      	movs	r4, #0
   1b3f0:	2500      	movs	r5, #0
   1b3f2:	e7eb      	b.n	1b3cc <timeout_rem+0x20>
   1b3f4:	20000564 	.word	0x20000564

0001b3f8 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b3fc:	bf08      	it	eq
   1b3fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1b402:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b406:	4604      	mov	r4, r0
   1b408:	4692      	mov	sl, r2
   1b40a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b40c:	d073      	beq.n	1b4f6 <z_add_timeout+0xfe>
	to->fn = fn;
   1b40e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1b410:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b414:	f3ef 8511 	mrs	r5, BASEPRI
   1b418:	f383 8811 	msr	BASEPRI, r3
   1b41c:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1b420:	f06f 0301 	mvn.w	r3, #1
   1b424:	ebb3 080a 	subs.w	r8, r3, sl
   1b428:	f04f 32ff 	mov.w	r2, #4294967295
   1b42c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1b430:	f1b8 0f00 	cmp.w	r8, #0
   1b434:	f179 0100 	sbcs.w	r1, r9, #0
   1b438:	db1c      	blt.n	1b474 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1b43a:	4830      	ldr	r0, [pc, #192]	; (1b4fc <z_add_timeout+0x104>)
   1b43c:	e9d0 1000 	ldrd	r1, r0, [r0]
   1b440:	1a5b      	subs	r3, r3, r1
   1b442:	eb62 0200 	sbc.w	r2, r2, r0
			to->dticks = MAX(1, ticks);
   1b446:	ebb3 060a 	subs.w	r6, r3, sl
   1b44a:	eb62 070b 	sbc.w	r7, r2, fp
   1b44e:	2e01      	cmp	r6, #1
   1b450:	f177 0300 	sbcs.w	r3, r7, #0
   1b454:	bfbc      	itt	lt
   1b456:	2601      	movlt	r6, #1
   1b458:	2700      	movlt	r7, #0
   1b45a:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1b45e:	4a28      	ldr	r2, [pc, #160]	; (1b500 <z_add_timeout+0x108>)
   1b460:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b464:	4293      	cmp	r3, r2
   1b466:	d11e      	bne.n	1b4a6 <z_add_timeout+0xae>
	node->prev = tail;
   1b468:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1b46c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1b470:	6054      	str	r4, [r2, #4]
}
   1b472:	e02d      	b.n	1b4d0 <z_add_timeout+0xd8>
			to->dticks = timeout.ticks + 1 + elapsed();
   1b474:	f7ff ff4a 	bl	1b30c <elapsed>
   1b478:	f11a 0301 	adds.w	r3, sl, #1
   1b47c:	9300      	str	r3, [sp, #0]
   1b47e:	f14b 0300 	adc.w	r3, fp, #0
   1b482:	9301      	str	r3, [sp, #4]
   1b484:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b488:	1812      	adds	r2, r2, r0
   1b48a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1b48e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1b492:	e7e4      	b.n	1b45e <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   1b494:	ebb6 0008 	subs.w	r0, r6, r8
   1b498:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1b49c:	4563      	cmp	r3, ip
   1b49e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1b4a2:	d0e1      	beq.n	1b468 <z_add_timeout+0x70>
   1b4a4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1b4a6:	2b00      	cmp	r3, #0
   1b4a8:	d0de      	beq.n	1b468 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   1b4aa:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1b4ae:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1b4b2:	4546      	cmp	r6, r8
   1b4b4:	eb77 0109 	sbcs.w	r1, r7, r9
   1b4b8:	daec      	bge.n	1b494 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   1b4ba:	ebb8 0006 	subs.w	r0, r8, r6
   1b4be:	eb69 0107 	sbc.w	r1, r9, r7
   1b4c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1b4c6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b4c8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1b4cc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b4ce:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1b4d0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b4d2:	4293      	cmp	r3, r2
   1b4d4:	d00b      	beq.n	1b4ee <z_add_timeout+0xf6>
		if (to == first()) {
   1b4d6:	429c      	cmp	r4, r3
   1b4d8:	d109      	bne.n	1b4ee <z_add_timeout+0xf6>
			int32_t next_time = next_timeout();
   1b4da:	f7ff ff3b 	bl	1b354 <next_timeout>
			if (next_time == 0 ||
   1b4de:	b118      	cbz	r0, 1b4e8 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   1b4e0:	4b08      	ldr	r3, [pc, #32]	; (1b504 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1b4e2:	691b      	ldr	r3, [r3, #16]
   1b4e4:	4283      	cmp	r3, r0
   1b4e6:	d002      	beq.n	1b4ee <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   1b4e8:	2100      	movs	r1, #0
   1b4ea:	f7f5 fd49 	bl	10f80 <sys_clock_set_timeout>
	__asm__ volatile(
   1b4ee:	f385 8811 	msr	BASEPRI, r5
   1b4f2:	f3bf 8f6f 	isb	sy
}
   1b4f6:	b003      	add	sp, #12
   1b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4fc:	20001d28 	.word	0x20001d28
   1b500:	20000564 	.word	0x20000564
   1b504:	20001fe8 	.word	0x20001fe8

0001b508 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1b508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b50c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1b50e:	f7ff fd05 	bl	1af1c <z_time_slice>
	__asm__ volatile(
   1b512:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b516:	f3ef 8411 	mrs	r4, BASEPRI
   1b51a:	f383 8811 	msr	BASEPRI, r3
   1b51e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1b522:	4d2c      	ldr	r5, [pc, #176]	; (1b5d4 <sys_clock_announce+0xcc>)
   1b524:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1b5d8 <sys_clock_announce+0xd0>
	return list->head == list;
   1b528:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1b5dc <sys_clock_announce+0xd4>
   1b52c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1b52e:	4651      	mov	r1, sl
   1b530:	f8d5 c000 	ldr.w	ip, [r5]
   1b534:	f8db 0000 	ldr.w	r0, [fp]
   1b538:	4662      	mov	r2, ip
   1b53a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b53c:	4558      	cmp	r0, fp
   1b53e:	e9da 8900 	ldrd	r8, r9, [sl]
   1b542:	e9cd 2300 	strd	r2, r3, [sp]
   1b546:	d00d      	beq.n	1b564 <sys_clock_announce+0x5c>
   1b548:	b160      	cbz	r0, 1b564 <sys_clock_announce+0x5c>
   1b54a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1b54e:	45b4      	cmp	ip, r6
   1b550:	41bb      	sbcs	r3, r7
   1b552:	da1e      	bge.n	1b592 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1b554:	9b00      	ldr	r3, [sp, #0]
   1b556:	ebb6 0c03 	subs.w	ip, r6, r3
   1b55a:	9b01      	ldr	r3, [sp, #4]
   1b55c:	eb67 0603 	sbc.w	r6, r7, r3
   1b560:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1b564:	9b00      	ldr	r3, [sp, #0]
   1b566:	eb13 0208 	adds.w	r2, r3, r8
   1b56a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1b56c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1b570:	eb43 0309 	adc.w	r3, r3, r9
   1b574:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1b578:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1b57a:	f7ff feeb 	bl	1b354 <next_timeout>
   1b57e:	4631      	mov	r1, r6
   1b580:	f7f5 fcfe 	bl	10f80 <sys_clock_set_timeout>
	__asm__ volatile(
   1b584:	f384 8811 	msr	BASEPRI, r4
   1b588:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1b58c:	b003      	add	sp, #12
   1b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1b592:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1b596:	f04f 0200 	mov.w	r2, #0
   1b59a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1b59e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1b5a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1b5a6:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1b5aa:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1b5ae:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1b5b0:	f7ff feb6 	bl	1b320 <remove_timeout>
   1b5b4:	f384 8811 	msr	BASEPRI, r4
   1b5b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1b5bc:	6883      	ldr	r3, [r0, #8]
   1b5be:	4798      	blx	r3
	__asm__ volatile(
   1b5c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5c4:	f3ef 8411 	mrs	r4, BASEPRI
   1b5c8:	f383 8811 	msr	BASEPRI, r3
   1b5cc:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1b5d0:	4901      	ldr	r1, [pc, #4]	; (1b5d8 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1b5d2:	e7ad      	b.n	1b530 <sys_clock_announce+0x28>
   1b5d4:	2000202c 	.word	0x2000202c
   1b5d8:	20001d28 	.word	0x20001d28
   1b5dc:	20000564 	.word	0x20000564

0001b5e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1b5e0:	b510      	push	{r4, lr}
   1b5e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5e6:	f3ef 8411 	mrs	r4, BASEPRI
   1b5ea:	f383 8811 	msr	BASEPRI, r3
   1b5ee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1b5f2:	f7f5 fcf7 	bl	10fe4 <sys_clock_elapsed>
   1b5f6:	4b06      	ldr	r3, [pc, #24]	; (1b610 <sys_clock_tick_get+0x30>)
   1b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b5fc:	1812      	adds	r2, r2, r0
   1b5fe:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1b602:	f384 8811 	msr	BASEPRI, r4
   1b606:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1b60a:	4610      	mov	r0, r2
   1b60c:	4619      	mov	r1, r3
   1b60e:	bd10      	pop	{r4, pc}
   1b610:	20001d28 	.word	0x20001d28

0001b614 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1b616:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1b61a:	1c56      	adds	r6, r2, #1
   1b61c:	f143 0700 	adc.w	r7, r3, #0
   1b620:	2f00      	cmp	r7, #0
   1b622:	bf08      	it	eq
   1b624:	2e02      	cmpeq	r6, #2
{
   1b626:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1b628:	d302      	bcc.n	1b630 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b62a:	490d      	ldr	r1, [pc, #52]	; (1b660 <z_timer_expiration_handler+0x4c>)
   1b62c:	f7ff fee4 	bl	1b3f8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1b630:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b632:	3301      	adds	r3, #1
   1b634:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1b636:	6a23      	ldr	r3, [r4, #32]
   1b638:	b10b      	cbz	r3, 1b63e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1b63a:	4620      	mov	r0, r4
   1b63c:	4798      	blx	r3
	return list->head == list;
   1b63e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b642:	42a5      	cmp	r5, r4
   1b644:	d00a      	beq.n	1b65c <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1b646:	b14d      	cbz	r5, 1b65c <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1b648:	4628      	mov	r0, r5
   1b64a:	f004 fcfe 	bl	2004a <z_unpend_thread_no_timeout>
   1b64e:	2300      	movs	r3, #0
   1b650:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1b652:	4628      	mov	r0, r5
}
   1b654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1b658:	f004 bd68 	b.w	2012c <z_ready_thread>
}
   1b65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b65e:	bf00      	nop
   1b660:	0001b615 	.word	0x0001b615

0001b664 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1b664:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1b668:	4619      	mov	r1, r3
   1b66a:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b66c:	1c4c      	adds	r4, r1, #1
{
   1b66e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b670:	bf08      	it	eq
   1b672:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1b676:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1b67a:	4680      	mov	r8, r0
   1b67c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b67e:	d04c      	beq.n	1b71a <z_impl_k_timer_start+0xb6>
   1b680:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1b682:	1c6b      	adds	r3, r5, #1
   1b684:	bf08      	it	eq
   1b686:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1b68a:	4614      	mov	r4, r2
   1b68c:	d019      	beq.n	1b6c2 <z_impl_k_timer_start+0x5e>
   1b68e:	ea54 0305 	orrs.w	r3, r4, r5
   1b692:	d016      	beq.n	1b6c2 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1b694:	f06f 0301 	mvn.w	r3, #1
   1b698:	ebb3 0a02 	subs.w	sl, r3, r2
   1b69c:	f04f 33ff 	mov.w	r3, #4294967295
   1b6a0:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1b6a4:	f1ba 0f00 	cmp.w	sl, #0
   1b6a8:	f17b 0300 	sbcs.w	r3, fp, #0
   1b6ac:	da09      	bge.n	1b6c2 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1b6ae:	f112 34ff 	adds.w	r4, r2, #4294967295
   1b6b2:	f145 35ff 	adc.w	r5, r5, #4294967295
   1b6b6:	2c01      	cmp	r4, #1
   1b6b8:	f175 0300 	sbcs.w	r3, r5, #0
   1b6bc:	bfbc      	itt	lt
   1b6be:	2401      	movlt	r4, #1
   1b6c0:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1b6c2:	f06f 0301 	mvn.w	r3, #1
   1b6c6:	1a1b      	subs	r3, r3, r0
   1b6c8:	9300      	str	r3, [sp, #0]
   1b6ca:	f04f 33ff 	mov.w	r3, #4294967295
   1b6ce:	eb63 0301 	sbc.w	r3, r3, r1
   1b6d2:	9301      	str	r3, [sp, #4]
   1b6d4:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b6d8:	2a00      	cmp	r2, #0
   1b6da:	f173 0300 	sbcs.w	r3, r3, #0
   1b6de:	da0c      	bge.n	1b6fa <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1b6e0:	f110 38ff 	adds.w	r8, r0, #4294967295
   1b6e4:	f141 39ff 	adc.w	r9, r1, #4294967295
   1b6e8:	f1b8 0f00 	cmp.w	r8, #0
   1b6ec:	f179 0300 	sbcs.w	r3, r9, #0
   1b6f0:	bfbc      	itt	lt
   1b6f2:	f04f 0800 	movlt.w	r8, #0
   1b6f6:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1b6fa:	4630      	mov	r0, r6
   1b6fc:	f004 fda2 	bl	20244 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1b700:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b702:	4907      	ldr	r1, [pc, #28]	; (1b720 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1b704:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b706:	4642      	mov	r2, r8
   1b708:	464b      	mov	r3, r9
   1b70a:	4630      	mov	r0, r6
	timer->period = period;
   1b70c:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1b710:	b002      	add	sp, #8
   1b712:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b716:	f7ff be6f 	b.w	1b3f8 <z_add_timeout>
}
   1b71a:	b002      	add	sp, #8
   1b71c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1b720:	0001b615 	.word	0x0001b615

0001b724 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1b724:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b728:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1b72a:	4b29      	ldr	r3, [pc, #164]	; (1b7d0 <z_impl_k_poll+0xac>)
   1b72c:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1b72e:	2301      	movs	r3, #1
   1b730:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1b734:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1b738:	ea52 0307 	orrs.w	r3, r2, r7
{
   1b73c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1b73e:	bf0c      	ite	eq
   1b740:	2301      	moveq	r3, #1
   1b742:	2300      	movne	r3, #0
   1b744:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1b748:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1b74a:	f004 fe87 	bl	2045c <register_events>
   1b74e:	4681      	mov	r9, r0
	__asm__ volatile(
   1b750:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b754:	f3ef 8a11 	mrs	sl, BASEPRI
   1b758:	f383 8811 	msr	BASEPRI, r3
   1b75c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1b760:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1b764:	b964      	cbnz	r4, 1b780 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1b766:	4601      	mov	r1, r0
   1b768:	4652      	mov	r2, sl
   1b76a:	4640      	mov	r0, r8
   1b76c:	f004 fe14 	bl	20398 <clear_event_registrations>
	__asm__ volatile(
   1b770:	f38a 8811 	msr	BASEPRI, sl
   1b774:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1b778:	4620      	mov	r0, r4
   1b77a:	b002      	add	sp, #8
   1b77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1b780:	2300      	movs	r3, #0
   1b782:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b786:	ea56 0307 	orrs.w	r3, r6, r7
   1b78a:	d106      	bne.n	1b79a <z_impl_k_poll+0x76>
   1b78c:	f38a 8811 	msr	BASEPRI, sl
   1b790:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1b794:	f06f 040a 	mvn.w	r4, #10
   1b798:	e7ee      	b.n	1b778 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1b79a:	e9cd 6700 	strd	r6, r7, [sp]
   1b79e:	4a0d      	ldr	r2, [pc, #52]	; (1b7d4 <z_impl_k_poll+0xb0>)
   1b7a0:	480d      	ldr	r0, [pc, #52]	; (1b7d8 <z_impl_k_poll+0xb4>)
   1b7a2:	4651      	mov	r1, sl
   1b7a4:	f7ff fae0 	bl	1ad68 <z_pend_curr>
   1b7a8:	4604      	mov	r4, r0
	__asm__ volatile(
   1b7aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7ae:	f3ef 8511 	mrs	r5, BASEPRI
   1b7b2:	f383 8811 	msr	BASEPRI, r3
   1b7b6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1b7ba:	462a      	mov	r2, r5
   1b7bc:	4649      	mov	r1, r9
   1b7be:	4640      	mov	r0, r8
   1b7c0:	f004 fdea 	bl	20398 <clear_event_registrations>
	__asm__ volatile(
   1b7c4:	f385 8811 	msr	BASEPRI, r5
   1b7c8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1b7cc:	e7d4      	b.n	1b778 <z_impl_k_poll+0x54>
   1b7ce:	bf00      	nop
   1b7d0:	20001fe8 	.word	0x20001fe8
   1b7d4:	2000056c 	.word	0x2000056c
   1b7d8:	20002906 	.word	0x20002906

0001b7dc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1b7dc:	b538      	push	{r3, r4, r5, lr}
   1b7de:	4603      	mov	r3, r0
	__asm__ volatile(
   1b7e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b7e4:	f3ef 8511 	mrs	r5, BASEPRI
   1b7e8:	f382 8811 	msr	BASEPRI, r2
   1b7ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1b7f0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1b7f2:	2101      	movs	r1, #1
   1b7f4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1b7f6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1b7f8:	4283      	cmp	r3, r0
   1b7fa:	d106      	bne.n	1b80a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1b7fc:	f385 8811 	msr	BASEPRI, r5
   1b800:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1b804:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1b806:	4620      	mov	r0, r4
   1b808:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1b80a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1b80e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b810:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b812:	2300      	movs	r3, #0
	node->prev = NULL;
   1b814:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b818:	f004 fe97 	bl	2054a <signal_poll_event>
	z_reschedule(&lock, key);
   1b81c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b81e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1b820:	4801      	ldr	r0, [pc, #4]	; (1b828 <z_impl_k_poll_signal_raise+0x4c>)
   1b822:	f7ff fa1d 	bl	1ac60 <z_reschedule>
	return rc;
   1b826:	e7ee      	b.n	1b806 <z_impl_k_poll_signal_raise+0x2a>
   1b828:	20002906 	.word	0x20002906

0001b82c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1b82c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b82e:	4606      	mov	r6, r0
   1b830:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1b832:	f004 fa1a 	bl	1fc6a <k_is_in_isr>
   1b836:	b980      	cbnz	r0, 1b85a <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1b838:	4b0b      	ldr	r3, [pc, #44]	; (1b868 <z_thread_aligned_alloc+0x3c>)
   1b83a:	689b      	ldr	r3, [r3, #8]
   1b83c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1b83e:	b184      	cbz	r4, 1b862 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1b840:	2204      	movs	r2, #4
   1b842:	18aa      	adds	r2, r5, r2
   1b844:	d209      	bcs.n	1b85a <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1b846:	2000      	movs	r0, #0
   1b848:	2100      	movs	r1, #0
   1b84a:	e9cd 0100 	strd	r0, r1, [sp]
   1b84e:	f046 0104 	orr.w	r1, r6, #4
   1b852:	4620      	mov	r0, r4
   1b854:	f004 f961 	bl	1fb1a <k_heap_aligned_alloc>
	if (mem == NULL) {
   1b858:	b908      	cbnz	r0, 1b85e <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1b85a:	2400      	movs	r4, #0
	}

	return ret;
   1b85c:	e001      	b.n	1b862 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   1b85e:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1b860:	1d04      	adds	r4, r0, #4
}
   1b862:	4620      	mov	r0, r4
   1b864:	b002      	add	sp, #8
   1b866:	bd70      	pop	{r4, r5, r6, pc}
   1b868:	20001fe8 	.word	0x20001fe8

0001b86c <hrs_init>:
}
   1b86c:	2000      	movs	r0, #0
   1b86e:	4770      	bx	lr

0001b870 <dclk_stop_cb>:
}
   1b870:	4770      	bx	lr

0001b872 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1b872:	4603      	mov	r3, r0
   1b874:	b140      	cbz	r0, 1b888 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b876:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b878:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1b87c:	2a02      	cmp	r2, #2
   1b87e:	d006      	beq.n	1b88e <sys_notify_validate+0x1c>
   1b880:	2a03      	cmp	r2, #3
   1b882:	d004      	beq.n	1b88e <sys_notify_validate+0x1c>
   1b884:	2a01      	cmp	r2, #1
   1b886:	d005      	beq.n	1b894 <sys_notify_validate+0x22>
		return -EINVAL;
   1b888:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1b88c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1b88e:	681a      	ldr	r2, [r3, #0]
   1b890:	2a00      	cmp	r2, #0
   1b892:	d0f9      	beq.n	1b888 <sys_notify_validate+0x16>
		notify->result = 0;
   1b894:	2000      	movs	r0, #0
   1b896:	6098      	str	r0, [r3, #8]
   1b898:	4770      	bx	lr

0001b89a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b89a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b89c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1b8a0:	2a02      	cmp	r2, #2
{
   1b8a2:	b510      	push	{r4, lr}
   1b8a4:	4603      	mov	r3, r0
	notify->result = res;
   1b8a6:	6081      	str	r1, [r0, #8]
	switch (method) {
   1b8a8:	d00a      	beq.n	1b8c0 <sys_notify_finalize+0x26>
   1b8aa:	2a03      	cmp	r2, #3
   1b8ac:	d10b      	bne.n	1b8c6 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1b8ae:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1b8b0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1b8b2:	2200      	movs	r2, #0
   1b8b4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1b8b6:	b108      	cbz	r0, 1b8bc <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1b8b8:	f7ff ff90 	bl	1b7dc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1b8bc:	4620      	mov	r0, r4
   1b8be:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1b8c0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1b8c2:	2400      	movs	r4, #0
		break;
   1b8c4:	e7f5      	b.n	1b8b2 <sys_notify_finalize+0x18>
	switch (method) {
   1b8c6:	2400      	movs	r4, #0
   1b8c8:	4620      	mov	r0, r4
   1b8ca:	e7f2      	b.n	1b8b2 <sys_notify_finalize+0x18>

0001b8cc <arch_printk_char_out>:
}
   1b8cc:	2000      	movs	r0, #0
   1b8ce:	4770      	bx	lr

0001b8d0 <str_out>:
{
   1b8d0:	b530      	push	{r4, r5, lr}
   1b8d2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1b8d4:	680c      	ldr	r4, [r1, #0]
   1b8d6:	1c55      	adds	r5, r2, #1
   1b8d8:	b114      	cbz	r4, 1b8e0 <str_out+0x10>
   1b8da:	684b      	ldr	r3, [r1, #4]
   1b8dc:	4293      	cmp	r3, r2
   1b8de:	dc01      	bgt.n	1b8e4 <str_out+0x14>
		ctx->count++;
   1b8e0:	608d      	str	r5, [r1, #8]
}
   1b8e2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1b8e4:	3b01      	subs	r3, #1
   1b8e6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1b8e8:	bf08      	it	eq
   1b8ea:	2200      	moveq	r2, #0
   1b8ec:	608d      	str	r5, [r1, #8]
   1b8ee:	bf0c      	ite	eq
   1b8f0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1b8f2:	54a0      	strbne	r0, [r4, r2]
   1b8f4:	e7f5      	b.n	1b8e2 <str_out+0x12>

0001b8f6 <printk>:
{
   1b8f6:	b40f      	push	{r0, r1, r2, r3}
   1b8f8:	b507      	push	{r0, r1, r2, lr}
   1b8fa:	a904      	add	r1, sp, #16
   1b8fc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1b900:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1b902:	f7f4 f875 	bl	f9f0 <vprintk>
}
   1b906:	b003      	add	sp, #12
   1b908:	f85d eb04 	ldr.w	lr, [sp], #4
   1b90c:	b004      	add	sp, #16
   1b90e:	4770      	bx	lr

0001b910 <snprintk>:
{
   1b910:	b40c      	push	{r2, r3}
   1b912:	b507      	push	{r0, r1, r2, lr}
   1b914:	ab04      	add	r3, sp, #16
   1b916:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1b91a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1b91c:	f7f4 f876 	bl	fa0c <vsnprintk>
}
   1b920:	b003      	add	sp, #12
   1b922:	f85d eb04 	ldr.w	lr, [sp], #4
   1b926:	b002      	add	sp, #8
   1b928:	4770      	bx	lr

0001b92a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b92a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1b92c:	f013 0307 	ands.w	r3, r3, #7
   1b930:	d105      	bne.n	1b93e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1b932:	6803      	ldr	r3, [r0, #0]
   1b934:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1b936:	bf0c      	ite	eq
   1b938:	2000      	moveq	r0, #0
   1b93a:	2003      	movne	r0, #3
   1b93c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1b93e:	2b02      	cmp	r3, #2
   1b940:	d105      	bne.n	1b94e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1b942:	8b43      	ldrh	r3, [r0, #26]
   1b944:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1b946:	bf14      	ite	ne
   1b948:	2000      	movne	r0, #0
   1b94a:	2004      	moveq	r0, #4
   1b94c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1b94e:	2b01      	cmp	r3, #1
   1b950:	d105      	bne.n	1b95e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1b952:	6803      	ldr	r3, [r0, #0]
   1b954:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1b956:	bf0c      	ite	eq
   1b958:	2000      	moveq	r0, #0
   1b95a:	2005      	movne	r0, #5
   1b95c:	4770      	bx	lr
	int evt = EVT_NOP;
   1b95e:	2000      	movs	r0, #0
}
   1b960:	4770      	bx	lr

0001b962 <notify_one>:
{
   1b962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b966:	460d      	mov	r5, r1
   1b968:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b96a:	4619      	mov	r1, r3
   1b96c:	1d28      	adds	r0, r5, #4
{
   1b96e:	4690      	mov	r8, r2
   1b970:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b972:	f7ff ff92 	bl	1b89a <sys_notify_finalize>
	if (cb) {
   1b976:	4604      	mov	r4, r0
   1b978:	b138      	cbz	r0, 1b98a <notify_one+0x28>
		cb(mgr, cli, state, res);
   1b97a:	4633      	mov	r3, r6
   1b97c:	4642      	mov	r2, r8
   1b97e:	4629      	mov	r1, r5
   1b980:	4638      	mov	r0, r7
   1b982:	46a4      	mov	ip, r4
}
   1b984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1b988:	4760      	bx	ip
}
   1b98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b98e <transition_complete>:
{
   1b98e:	b410      	push	{r4}
	__asm__ volatile(
   1b990:	f04f 0440 	mov.w	r4, #64	; 0x40
   1b994:	f3ef 8211 	mrs	r2, BASEPRI
   1b998:	f384 8811 	msr	BASEPRI, r4
   1b99c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1b9a0:	6141      	str	r1, [r0, #20]
}
   1b9a2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1b9a4:	2101      	movs	r1, #1
   1b9a6:	f7f4 b845 	b.w	fa34 <process_event>

0001b9aa <validate_args>:
{
   1b9aa:	b510      	push	{r4, lr}
   1b9ac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1b9ae:	b140      	cbz	r0, 1b9c2 <validate_args+0x18>
   1b9b0:	b139      	cbz	r1, 1b9c2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1b9b2:	1d08      	adds	r0, r1, #4
   1b9b4:	f7ff ff5d 	bl	1b872 <sys_notify_validate>
	if ((rv == 0)
   1b9b8:	b928      	cbnz	r0, 1b9c6 <validate_args+0x1c>
	    && ((cli->notify.flags
   1b9ba:	68a3      	ldr	r3, [r4, #8]
   1b9bc:	f033 0303 	bics.w	r3, r3, #3
   1b9c0:	d001      	beq.n	1b9c6 <validate_args+0x1c>
		rv = -EINVAL;
   1b9c2:	f06f 0015 	mvn.w	r0, #21
}
   1b9c6:	bd10      	pop	{r4, pc}

0001b9c8 <onoff_manager_init>:
{
   1b9c8:	b538      	push	{r3, r4, r5, lr}
   1b9ca:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1b9cc:	4605      	mov	r5, r0
   1b9ce:	b158      	cbz	r0, 1b9e8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1b9d0:	b151      	cbz	r1, 1b9e8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1b9d2:	680b      	ldr	r3, [r1, #0]
   1b9d4:	b143      	cbz	r3, 1b9e8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1b9d6:	684b      	ldr	r3, [r1, #4]
   1b9d8:	b133      	cbz	r3, 1b9e8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b9da:	221c      	movs	r2, #28
   1b9dc:	2100      	movs	r1, #0
   1b9de:	f001 ff16 	bl	1d80e <memset>
   1b9e2:	612c      	str	r4, [r5, #16]
	return 0;
   1b9e4:	2000      	movs	r0, #0
}
   1b9e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b9e8:	f06f 0015 	mvn.w	r0, #21
   1b9ec:	e7fb      	b.n	1b9e6 <onoff_manager_init+0x1e>

0001b9ee <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1b9ee:	b570      	push	{r4, r5, r6, lr}
   1b9f0:	4604      	mov	r4, r0
   1b9f2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1b9f4:	f7ff ffd9 	bl	1b9aa <validate_args>

	if (rv < 0) {
   1b9f8:	1e05      	subs	r5, r0, #0
   1b9fa:	db31      	blt.n	1ba60 <onoff_request+0x72>
   1b9fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba00:	f3ef 8111 	mrs	r1, BASEPRI
   1ba04:	f383 8811 	msr	BASEPRI, r3
   1ba08:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ba0c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ba0e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ba10:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1ba14:	42ab      	cmp	r3, r5
   1ba16:	f000 0207 	and.w	r2, r0, #7
   1ba1a:	d02e      	beq.n	1ba7a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1ba1c:	2a02      	cmp	r2, #2
   1ba1e:	d10e      	bne.n	1ba3e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1ba20:	3301      	adds	r3, #1
   1ba22:	8363      	strh	r3, [r4, #26]
	rv = state;
   1ba24:	4615      	mov	r5, r2
		notify = true;
   1ba26:	2301      	movs	r3, #1
	__asm__ volatile(
   1ba28:	f381 8811 	msr	BASEPRI, r1
   1ba2c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1ba30:	b1b3      	cbz	r3, 1ba60 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1ba32:	2300      	movs	r3, #0
   1ba34:	4631      	mov	r1, r6
   1ba36:	4620      	mov	r0, r4
   1ba38:	f7ff ff93 	bl	1b962 <notify_one>
   1ba3c:	e010      	b.n	1ba60 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1ba3e:	0783      	lsls	r3, r0, #30
   1ba40:	d001      	beq.n	1ba46 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1ba42:	2a06      	cmp	r2, #6
   1ba44:	d10e      	bne.n	1ba64 <onoff_request+0x76>
	parent->next = child;
   1ba46:	2300      	movs	r3, #0
   1ba48:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1ba4a:	6863      	ldr	r3, [r4, #4]
   1ba4c:	b993      	cbnz	r3, 1ba74 <onoff_request+0x86>
	list->head = node;
   1ba4e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1ba52:	4615      	mov	r5, r2
   1ba54:	b962      	cbnz	r2, 1ba70 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1ba56:	460a      	mov	r2, r1
   1ba58:	4620      	mov	r0, r4
   1ba5a:	2102      	movs	r1, #2
   1ba5c:	f7f3 ffea 	bl	fa34 <process_event>
		}
	}

	return rv;
}
   1ba60:	4628      	mov	r0, r5
   1ba62:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1ba64:	2a05      	cmp	r2, #5
   1ba66:	bf0c      	ite	eq
   1ba68:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1ba6c:	f06f 0504 	mvnne.w	r5, #4
   1ba70:	2300      	movs	r3, #0
   1ba72:	e7d9      	b.n	1ba28 <onoff_request+0x3a>
	parent->next = child;
   1ba74:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1ba76:	6066      	str	r6, [r4, #4]
}
   1ba78:	e7eb      	b.n	1ba52 <onoff_request+0x64>
		rv = -EAGAIN;
   1ba7a:	f06f 050a 	mvn.w	r5, #10
   1ba7e:	e7f7      	b.n	1ba70 <onoff_request+0x82>

0001ba80 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1ba80:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ba82:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba86:	f3ef 8211 	mrs	r2, BASEPRI
   1ba8a:	f383 8811 	msr	BASEPRI, r3
   1ba8e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ba92:	8b04      	ldrh	r4, [r0, #24]
   1ba94:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1ba98:	2c02      	cmp	r4, #2
   1ba9a:	d00a      	beq.n	1bab2 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1ba9c:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1ba9e:	bf0c      	ite	eq
   1baa0:	f06f 0004 	mvneq.w	r0, #4
   1baa4:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1baa8:	f382 8811 	msr	BASEPRI, r2
   1baac:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1bab0:	e008      	b.n	1bac4 <onoff_release+0x44>
	mgr->refs -= 1U;
   1bab2:	8b43      	ldrh	r3, [r0, #26]
   1bab4:	3b01      	subs	r3, #1
   1bab6:	b29b      	uxth	r3, r3
   1bab8:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1baba:	b923      	cbnz	r3, 1bac6 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1babc:	4621      	mov	r1, r4
   1babe:	f7f3 ffb9 	bl	fa34 <process_event>
	int rv = state;
   1bac2:	4620      	mov	r0, r4
}
   1bac4:	bd10      	pop	{r4, pc}
	int rv = state;
   1bac6:	4620      	mov	r0, r4
   1bac8:	e7ee      	b.n	1baa8 <onoff_release+0x28>

0001baca <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1baca:	4604      	mov	r4, r0
   1bacc:	b508      	push	{r3, lr}
   1bace:	4608      	mov	r0, r1
   1bad0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1bad2:	461a      	mov	r2, r3
   1bad4:	47a0      	blx	r4
	return z_impl_k_current_get();
   1bad6:	f7ff fb85 	bl	1b1e4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1bada:	f7f6 f87f 	bl	11bdc <z_impl_k_thread_abort>

0001bade <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1bade:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1bae0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1bae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1bae8:	bf2c      	ite	cs
   1baea:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1baee:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1baf2:	4770      	bx	lr

0001baf4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1baf4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1baf8:	6880      	ldr	r0, [r0, #8]
   1bafa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1bafe:	bf2c      	ite	cs
   1bb00:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1bb04:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1bb08:	4770      	bx	lr

0001bb0a <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1bb0a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1bb0c:	2201      	movs	r2, #1
   1bb0e:	f7ff ffe6 	bl	1bade <chunk_field>
}
   1bb12:	0840      	lsrs	r0, r0, #1
   1bb14:	bd08      	pop	{r3, pc}

0001bb16 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1bb16:	6883      	ldr	r3, [r0, #8]
   1bb18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1bb1c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1bb20:	d308      	bcc.n	1bb34 <set_chunk_used+0x1e>
		if (used) {
   1bb22:	684b      	ldr	r3, [r1, #4]
   1bb24:	b11a      	cbz	r2, 1bb2e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1bb26:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1bb2a:	604b      	str	r3, [r1, #4]
   1bb2c:	4770      	bx	lr
   1bb2e:	f023 0301 	bic.w	r3, r3, #1
   1bb32:	e7fa      	b.n	1bb2a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1bb34:	884b      	ldrh	r3, [r1, #2]
   1bb36:	b11a      	cbz	r2, 1bb40 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1bb38:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1bb3c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1bb3e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1bb40:	f023 0301 	bic.w	r3, r3, #1
   1bb44:	e7fa      	b.n	1bb3c <set_chunk_used+0x26>

0001bb46 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1bb46:	0053      	lsls	r3, r2, #1
   1bb48:	2201      	movs	r2, #1
   1bb4a:	f7ff bfd3 	b.w	1baf4 <chunk_set>

0001bb4e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1bb4e:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1bb50:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1bb52:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1bb56:	bf2c      	ite	cs
   1bb58:	2002      	movcs	r0, #2
   1bb5a:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1bb5c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1bb5e:	fab0 f080 	clz	r0, r0
}
   1bb62:	f1c0 001f 	rsb	r0, r0, #31
   1bb66:	4770      	bx	lr

0001bb68 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb6c:	4616      	mov	r6, r2
   1bb6e:	4604      	mov	r4, r0
   1bb70:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1bb72:	f7ff ffca 	bl	1bb0a <chunk_size>
   1bb76:	4631      	mov	r1, r6
   1bb78:	4605      	mov	r5, r0
   1bb7a:	4620      	mov	r0, r4
   1bb7c:	f7ff ffc5 	bl	1bb0a <chunk_size>
   1bb80:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1bb82:	462a      	mov	r2, r5
   1bb84:	4639      	mov	r1, r7
   1bb86:	4620      	mov	r0, r4
   1bb88:	f7ff ffdd 	bl	1bb46 <set_chunk_size>
	return c + chunk_size(h, c);
   1bb8c:	4631      	mov	r1, r6
   1bb8e:	4620      	mov	r0, r4
   1bb90:	f7ff ffbb 	bl	1bb0a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1bb94:	462b      	mov	r3, r5
   1bb96:	1831      	adds	r1, r6, r0
   1bb98:	2200      	movs	r2, #0
   1bb9a:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1bb9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bba0:	f7ff bfa8 	b.w	1baf4 <chunk_set>

0001bba4 <split_chunks>:
{
   1bba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bba8:	4614      	mov	r4, r2
   1bbaa:	4605      	mov	r5, r0
   1bbac:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1bbae:	f7ff ffac 	bl	1bb0a <chunk_size>
	chunksz_t lsz = rc - lc;
   1bbb2:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1bbb6:	1b37      	subs	r7, r6, r4
   1bbb8:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1bbba:	4642      	mov	r2, r8
   1bbbc:	4631      	mov	r1, r6
   1bbbe:	4628      	mov	r0, r5
   1bbc0:	f7ff ffc1 	bl	1bb46 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1bbc4:	463a      	mov	r2, r7
   1bbc6:	4621      	mov	r1, r4
   1bbc8:	4628      	mov	r0, r5
   1bbca:	f7ff ffbc 	bl	1bb46 <set_chunk_size>
   1bbce:	4643      	mov	r3, r8
   1bbd0:	2200      	movs	r2, #0
   1bbd2:	4621      	mov	r1, r4
   1bbd4:	4628      	mov	r0, r5
   1bbd6:	f7ff ff8d 	bl	1baf4 <chunk_set>
	return c + chunk_size(h, c);
   1bbda:	4621      	mov	r1, r4
   1bbdc:	4628      	mov	r0, r5
   1bbde:	f7ff ff94 	bl	1bb0a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1bbe2:	463b      	mov	r3, r7
   1bbe4:	1821      	adds	r1, r4, r0
   1bbe6:	2200      	movs	r2, #0
   1bbe8:	4628      	mov	r0, r5
}
   1bbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bbee:	f7ff bf81 	b.w	1baf4 <chunk_set>

0001bbf2 <free_list_remove_bidx>:
{
   1bbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbf6:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1bbf8:	2203      	movs	r2, #3
   1bbfa:	460e      	mov	r6, r1
   1bbfc:	4604      	mov	r4, r0
   1bbfe:	f7ff ff6e 	bl	1bade <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1bc02:	4286      	cmp	r6, r0
   1bc04:	4605      	mov	r5, r0
   1bc06:	f107 0804 	add.w	r8, r7, #4
   1bc0a:	d10b      	bne.n	1bc24 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1bc0c:	2301      	movs	r3, #1
   1bc0e:	fa03 f707 	lsl.w	r7, r3, r7
   1bc12:	68e3      	ldr	r3, [r4, #12]
   1bc14:	ea23 0307 	bic.w	r3, r3, r7
   1bc18:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1bc1a:	2300      	movs	r3, #0
   1bc1c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1bc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1bc24:	4631      	mov	r1, r6
   1bc26:	2202      	movs	r2, #2
   1bc28:	4620      	mov	r0, r4
   1bc2a:	f7ff ff58 	bl	1bade <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1bc2e:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1bc30:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1bc32:	4601      	mov	r1, r0
		b->next = second;
   1bc34:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1bc38:	4620      	mov	r0, r4
   1bc3a:	2203      	movs	r2, #3
   1bc3c:	f7ff ff5a 	bl	1baf4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1bc40:	4633      	mov	r3, r6
   1bc42:	4629      	mov	r1, r5
   1bc44:	4620      	mov	r0, r4
   1bc46:	2202      	movs	r2, #2
}
   1bc48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bc4c:	f7ff bf52 	b.w	1baf4 <chunk_set>

0001bc50 <free_list_remove>:
{
   1bc50:	b538      	push	{r3, r4, r5, lr}
   1bc52:	4604      	mov	r4, r0
   1bc54:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1bc56:	f7ff ff58 	bl	1bb0a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1bc5a:	68a3      	ldr	r3, [r4, #8]
   1bc5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bc60:	4601      	mov	r1, r0
   1bc62:	d301      	bcc.n	1bc68 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1bc64:	2801      	cmp	r0, #1
   1bc66:	d009      	beq.n	1bc7c <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1bc68:	4620      	mov	r0, r4
   1bc6a:	f7ff ff70 	bl	1bb4e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1bc6e:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1bc70:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1bc72:	4620      	mov	r0, r4
}
   1bc74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1bc78:	f7ff bfbb 	b.w	1bbf2 <free_list_remove_bidx>
}
   1bc7c:	bd38      	pop	{r3, r4, r5, pc}

0001bc7e <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1bc7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc82:	4605      	mov	r5, r0
   1bc84:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1bc86:	f7ff ff62 	bl	1bb4e <bucket_idx>
   1bc8a:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1bc8e:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1bc90:	f8da 9010 	ldr.w	r9, [sl, #16]
   1bc94:	f1b9 0f00 	cmp.w	r9, #0
   1bc98:	d01b      	beq.n	1bcd2 <alloc_chunk+0x54>
   1bc9a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1bc9c:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1bca0:	4628      	mov	r0, r5
   1bca2:	4621      	mov	r1, r4
   1bca4:	f7ff ff31 	bl	1bb0a <chunk_size>
   1bca8:	4540      	cmp	r0, r8
   1bcaa:	d307      	bcc.n	1bcbc <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1bcac:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1bcae:	4621      	mov	r1, r4
   1bcb0:	4628      	mov	r0, r5
   1bcb2:	f7ff ff9e 	bl	1bbf2 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1bcb6:	4620      	mov	r0, r4
   1bcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1bcbc:	2203      	movs	r2, #3
   1bcbe:	4621      	mov	r1, r4
   1bcc0:	4628      	mov	r0, r5
   1bcc2:	f7ff ff0c 	bl	1bade <chunk_field>
		} while (--i && b->next != first);
   1bcc6:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1bcc8:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1bccc:	d001      	beq.n	1bcd2 <alloc_chunk+0x54>
   1bcce:	4581      	cmp	r9, r0
   1bcd0:	d1e4      	bne.n	1bc9c <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1bcd2:	68e9      	ldr	r1, [r5, #12]
   1bcd4:	3601      	adds	r6, #1
   1bcd6:	f04f 34ff 	mov.w	r4, #4294967295
   1bcda:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1bcdc:	400c      	ands	r4, r1
   1bcde:	d0ea      	beq.n	1bcb6 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1bce0:	fa94 f2a4 	rbit	r2, r4
   1bce4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1bce8:	1d13      	adds	r3, r2, #4
   1bcea:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1bcee:	e7de      	b.n	1bcae <alloc_chunk+0x30>

0001bcf0 <free_list_add>:
{
   1bcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bcf4:	4604      	mov	r4, r0
   1bcf6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1bcf8:	f7ff ff07 	bl	1bb0a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1bcfc:	68a3      	ldr	r3, [r4, #8]
   1bcfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bd02:	4601      	mov	r1, r0
   1bd04:	d301      	bcc.n	1bd0a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1bd06:	2801      	cmp	r0, #1
   1bd08:	d035      	beq.n	1bd76 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	f7ff ff1f 	bl	1bb4e <bucket_idx>
	if (b->next == 0U) {
   1bd10:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1bd14:	6916      	ldr	r6, [r2, #16]
   1bd16:	b99e      	cbnz	r6, 1bd40 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1bd18:	2301      	movs	r3, #1
   1bd1a:	fa03 f000 	lsl.w	r0, r3, r0
   1bd1e:	68e3      	ldr	r3, [r4, #12]
   1bd20:	4303      	orrs	r3, r0
   1bd22:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1bd24:	4629      	mov	r1, r5
		b->next = c;
   1bd26:	6115      	str	r5, [r2, #16]
   1bd28:	462b      	mov	r3, r5
   1bd2a:	2202      	movs	r2, #2
   1bd2c:	4620      	mov	r0, r4
   1bd2e:	f7ff fee1 	bl	1baf4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1bd32:	2203      	movs	r2, #3
   1bd34:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1bd36:	4620      	mov	r0, r4
}
   1bd38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bd3c:	f7ff beda 	b.w	1baf4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1bd40:	2202      	movs	r2, #2
   1bd42:	4631      	mov	r1, r6
   1bd44:	4620      	mov	r0, r4
   1bd46:	f7ff feca 	bl	1bade <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1bd4a:	2202      	movs	r2, #2
   1bd4c:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1bd4e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1bd50:	4629      	mov	r1, r5
   1bd52:	4620      	mov	r0, r4
   1bd54:	f7ff fece 	bl	1baf4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1bd58:	4633      	mov	r3, r6
   1bd5a:	2203      	movs	r2, #3
   1bd5c:	4629      	mov	r1, r5
   1bd5e:	4620      	mov	r0, r4
   1bd60:	f7ff fec8 	bl	1baf4 <chunk_set>
   1bd64:	2203      	movs	r2, #3
   1bd66:	4639      	mov	r1, r7
   1bd68:	462b      	mov	r3, r5
   1bd6a:	4620      	mov	r0, r4
   1bd6c:	f7ff fec2 	bl	1baf4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1bd70:	2202      	movs	r2, #2
   1bd72:	4631      	mov	r1, r6
   1bd74:	e7df      	b.n	1bd36 <free_list_add+0x46>
   1bd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bd7a <free_chunk>:
{
   1bd7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd7c:	460c      	mov	r4, r1
   1bd7e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1bd80:	f7ff fec3 	bl	1bb0a <chunk_size>
   1bd84:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1bd86:	2201      	movs	r2, #1
   1bd88:	4631      	mov	r1, r6
   1bd8a:	4628      	mov	r0, r5
   1bd8c:	f7ff fea7 	bl	1bade <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1bd90:	07c3      	lsls	r3, r0, #31
   1bd92:	d40c      	bmi.n	1bdae <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1bd94:	4631      	mov	r1, r6
   1bd96:	4628      	mov	r0, r5
   1bd98:	f7ff ff5a 	bl	1bc50 <free_list_remove>
	return c + chunk_size(h, c);
   1bd9c:	4621      	mov	r1, r4
   1bd9e:	4628      	mov	r0, r5
   1bda0:	f7ff feb3 	bl	1bb0a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1bda4:	4621      	mov	r1, r4
   1bda6:	1822      	adds	r2, r4, r0
   1bda8:	4628      	mov	r0, r5
   1bdaa:	f7ff fedd 	bl	1bb68 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1bdae:	2200      	movs	r2, #0
   1bdb0:	4621      	mov	r1, r4
   1bdb2:	4628      	mov	r0, r5
   1bdb4:	f7ff fe93 	bl	1bade <chunk_field>
   1bdb8:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1bdba:	2201      	movs	r2, #1
   1bdbc:	4639      	mov	r1, r7
   1bdbe:	4628      	mov	r0, r5
   1bdc0:	f7ff fe8d 	bl	1bade <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1bdc4:	f010 0601 	ands.w	r6, r0, #1
   1bdc8:	d113      	bne.n	1bdf2 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1bdca:	4639      	mov	r1, r7
   1bdcc:	4628      	mov	r0, r5
   1bdce:	f7ff ff3f 	bl	1bc50 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1bdd2:	4621      	mov	r1, r4
   1bdd4:	4632      	mov	r2, r6
   1bdd6:	4628      	mov	r0, r5
   1bdd8:	f7ff fe81 	bl	1bade <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1bddc:	4622      	mov	r2, r4
   1bdde:	1a21      	subs	r1, r4, r0
   1bde0:	4628      	mov	r0, r5
   1bde2:	f7ff fec1 	bl	1bb68 <merge_chunks>
   1bde6:	4621      	mov	r1, r4
   1bde8:	4632      	mov	r2, r6
   1bdea:	4628      	mov	r0, r5
   1bdec:	f7ff fe77 	bl	1bade <chunk_field>
   1bdf0:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1bdf2:	4621      	mov	r1, r4
   1bdf4:	4628      	mov	r0, r5
}
   1bdf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1bdfa:	f7ff bf79 	b.w	1bcf0 <free_list_add>

0001bdfe <sys_heap_free>:
{
   1bdfe:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1be00:	b191      	cbz	r1, 1be28 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1be02:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1be04:	6883      	ldr	r3, [r0, #8]
   1be06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1be0a:	bf2c      	ite	cs
   1be0c:	2408      	movcs	r4, #8
   1be0e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1be10:	1b0c      	subs	r4, r1, r4
   1be12:	1a24      	subs	r4, r4, r0
   1be14:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1be16:	4621      	mov	r1, r4
   1be18:	2200      	movs	r2, #0
   1be1a:	f7ff fe7c 	bl	1bb16 <set_chunk_used>
	free_chunk(h, c);
   1be1e:	4621      	mov	r1, r4
}
   1be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1be24:	f7ff bfa9 	b.w	1bd7a <free_chunk>
}
   1be28:	bd10      	pop	{r4, pc}

0001be2a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1be2a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1be2c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1be2e:	b909      	cbnz	r1, 1be34 <sys_heap_alloc+0xa>
		return NULL;
   1be30:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1be32:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1be34:	68ab      	ldr	r3, [r5, #8]
   1be36:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1be3a:	d9f9      	bls.n	1be30 <sys_heap_alloc+0x6>
   1be3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1be40:	bf2c      	ite	cs
   1be42:	2208      	movcs	r2, #8
   1be44:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1be46:	1dcc      	adds	r4, r1, #7
   1be48:	4414      	add	r4, r2
   1be4a:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1be4c:	4621      	mov	r1, r4
   1be4e:	4628      	mov	r0, r5
   1be50:	f7ff ff15 	bl	1bc7e <alloc_chunk>
	if (c == 0U) {
   1be54:	4606      	mov	r6, r0
   1be56:	2800      	cmp	r0, #0
   1be58:	d0ea      	beq.n	1be30 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1be5a:	4601      	mov	r1, r0
   1be5c:	4628      	mov	r0, r5
   1be5e:	f7ff fe54 	bl	1bb0a <chunk_size>
   1be62:	42a0      	cmp	r0, r4
   1be64:	d909      	bls.n	1be7a <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1be66:	4434      	add	r4, r6
   1be68:	4631      	mov	r1, r6
   1be6a:	4628      	mov	r0, r5
   1be6c:	4622      	mov	r2, r4
   1be6e:	f7ff fe99 	bl	1bba4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1be72:	4621      	mov	r1, r4
   1be74:	4628      	mov	r0, r5
   1be76:	f7ff ff3b 	bl	1bcf0 <free_list_add>
	set_chunk_used(h, c, true);
   1be7a:	4628      	mov	r0, r5
   1be7c:	2201      	movs	r2, #1
   1be7e:	4631      	mov	r1, r6
   1be80:	f7ff fe49 	bl	1bb16 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1be84:	68ab      	ldr	r3, [r5, #8]
   1be86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1be8a:	bf2c      	ite	cs
   1be8c:	2008      	movcs	r0, #8
   1be8e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1be90:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1be94:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1be96:	e7cc      	b.n	1be32 <sys_heap_alloc+0x8>

0001be98 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1be9c:	6806      	ldr	r6, [r0, #0]
{
   1be9e:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1bea0:	424a      	negs	r2, r1
   1bea2:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1bea6:	ea31 0202 	bics.w	r2, r1, r2
   1beaa:	68b5      	ldr	r5, [r6, #8]
{
   1beac:	460b      	mov	r3, r1
	if (align != rew) {
   1beae:	d00f      	beq.n	1bed0 <sys_heap_aligned_alloc+0x38>
   1beb0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1beb4:	bf34      	ite	cc
   1beb6:	2104      	movcc	r1, #4
   1beb8:	2108      	movcs	r1, #8
   1beba:	42b9      	cmp	r1, r7
   1bebc:	460a      	mov	r2, r1
   1bebe:	46b9      	mov	r9, r7
   1bec0:	bf28      	it	cs
   1bec2:	463a      	movcs	r2, r7
		align -= rew;
   1bec4:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1bec6:	b994      	cbnz	r4, 1beee <sys_heap_aligned_alloc+0x56>
		return NULL;
   1bec8:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1beca:	4628      	mov	r0, r5
   1becc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bed0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1bed4:	bf34      	ite	cc
   1bed6:	2204      	movcc	r2, #4
   1bed8:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1beda:	4291      	cmp	r1, r2
   1bedc:	d804      	bhi.n	1bee8 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1bede:	4621      	mov	r1, r4
}
   1bee0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1bee4:	f7ff bfa1 	b.w	1be2a <sys_heap_alloc>
		rew = 0;
   1bee8:	f04f 0900 	mov.w	r9, #0
   1beec:	e7eb      	b.n	1bec6 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1beee:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1bef2:	d9e9      	bls.n	1bec8 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1bef4:	1de1      	adds	r1, r4, #7
   1bef6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1befa:	4439      	add	r1, r7
   1befc:	bf2c      	ite	cs
   1befe:	2308      	movcs	r3, #8
   1bf00:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1bf02:	1a89      	subs	r1, r1, r2
   1bf04:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1bf06:	08c9      	lsrs	r1, r1, #3
   1bf08:	4630      	mov	r0, r6
   1bf0a:	f7ff feb8 	bl	1bc7e <alloc_chunk>
	if (c0 == 0) {
   1bf0e:	4680      	mov	r8, r0
   1bf10:	2800      	cmp	r0, #0
   1bf12:	d0d9      	beq.n	1bec8 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1bf14:	68b3      	ldr	r3, [r6, #8]
   1bf16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bf1a:	bf2c      	ite	cs
   1bf1c:	2308      	movcs	r3, #8
   1bf1e:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1bf20:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1bf24:	441d      	add	r5, r3
   1bf26:	1e7a      	subs	r2, r7, #1
   1bf28:	4435      	add	r5, r6
   1bf2a:	427f      	negs	r7, r7
   1bf2c:	4415      	add	r5, r2
   1bf2e:	403d      	ands	r5, r7
   1bf30:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1bf34:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1bf36:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1bf38:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1bf3a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1bf3c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1bf40:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1bf42:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1bf46:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1bf4a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1bf4e:	d208      	bcs.n	1bf62 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1bf50:	4601      	mov	r1, r0
   1bf52:	463a      	mov	r2, r7
   1bf54:	4630      	mov	r0, r6
   1bf56:	f7ff fe25 	bl	1bba4 <split_chunks>
		free_list_add(h, c0);
   1bf5a:	4641      	mov	r1, r8
   1bf5c:	4630      	mov	r0, r6
   1bf5e:	f7ff fec7 	bl	1bcf0 <free_list_add>
	return c + chunk_size(h, c);
   1bf62:	4639      	mov	r1, r7
   1bf64:	4630      	mov	r0, r6
   1bf66:	f7ff fdd0 	bl	1bb0a <chunk_size>
   1bf6a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1bf6c:	4284      	cmp	r4, r0
   1bf6e:	d208      	bcs.n	1bf82 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1bf70:	4639      	mov	r1, r7
   1bf72:	4630      	mov	r0, r6
   1bf74:	4622      	mov	r2, r4
   1bf76:	f7ff fe15 	bl	1bba4 <split_chunks>
		free_list_add(h, c_end);
   1bf7a:	4621      	mov	r1, r4
   1bf7c:	4630      	mov	r0, r6
   1bf7e:	f7ff feb7 	bl	1bcf0 <free_list_add>
	set_chunk_used(h, c, true);
   1bf82:	2201      	movs	r2, #1
   1bf84:	4639      	mov	r1, r7
   1bf86:	4630      	mov	r0, r6
   1bf88:	f7ff fdc5 	bl	1bb16 <set_chunk_used>
	return mem;
   1bf8c:	e79d      	b.n	1beca <sys_heap_aligned_alloc+0x32>

0001bf8e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1bf8e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1bf92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf94:	bf2c      	ite	cs
   1bf96:	2508      	movcs	r5, #8
   1bf98:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1bf9a:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1bf9c:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1bf9e:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1bfa0:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1bfa4:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1bfa8:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1bfaa:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1bfac:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1bfae:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1bfb0:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1bfb2:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1bfb4:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1bfb6:	4620      	mov	r0, r4
   1bfb8:	f7ff fdc9 	bl	1bb4e <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1bfbc:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1bfbe:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1bfc0:	1c41      	adds	r1, r0, #1
   1bfc2:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1bfc4:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1bfc8:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1bfca:	428b      	cmp	r3, r1
   1bfcc:	db2f      	blt.n	1c02e <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1bfce:	4632      	mov	r2, r6
   1bfd0:	4620      	mov	r0, r4
   1bfd2:	2100      	movs	r1, #0
   1bfd4:	f7ff fdb7 	bl	1bb46 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1bfd8:	2300      	movs	r3, #0
   1bfda:	461a      	mov	r2, r3
   1bfdc:	4619      	mov	r1, r3
   1bfde:	4620      	mov	r0, r4
   1bfe0:	f7ff fd88 	bl	1baf4 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1bfe4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1bfe6:	4620      	mov	r0, r4
   1bfe8:	2201      	movs	r2, #1
   1bfea:	2100      	movs	r1, #0
   1bfec:	f7ff fd93 	bl	1bb16 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1bff0:	463a      	mov	r2, r7
   1bff2:	4631      	mov	r1, r6
   1bff4:	f7ff fda7 	bl	1bb46 <set_chunk_size>
   1bff8:	4633      	mov	r3, r6
   1bffa:	4631      	mov	r1, r6
   1bffc:	4620      	mov	r0, r4
   1bffe:	2200      	movs	r2, #0
   1c000:	f7ff fd78 	bl	1baf4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1c004:	4629      	mov	r1, r5
   1c006:	4620      	mov	r0, r4
   1c008:	2200      	movs	r2, #0
   1c00a:	f7ff fd9c 	bl	1bb46 <set_chunk_size>
   1c00e:	463b      	mov	r3, r7
   1c010:	4629      	mov	r1, r5
   1c012:	4620      	mov	r0, r4
   1c014:	2200      	movs	r2, #0
   1c016:	f7ff fd6d 	bl	1baf4 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1c01a:	4629      	mov	r1, r5
   1c01c:	4620      	mov	r0, r4
   1c01e:	2201      	movs	r2, #1
   1c020:	f7ff fd79 	bl	1bb16 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1c024:	4631      	mov	r1, r6
}
   1c026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1c02a:	f7ff be61 	b.w	1bcf0 <free_list_add>
		h->buckets[i].next = 0;
   1c02e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1c032:	3301      	adds	r3, #1
   1c034:	e7c9      	b.n	1bfca <sys_heap_init+0x3c>

0001c036 <encode_uint>:
{
   1c036:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c03a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1c03c:	78d3      	ldrb	r3, [r2, #3]
{
   1c03e:	4614      	mov	r4, r2
	switch (specifier) {
   1c040:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1c042:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1c046:	4606      	mov	r6, r0
   1c048:	460f      	mov	r7, r1
   1c04a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1c04c:	d02d      	beq.n	1c0aa <encode_uint+0x74>
   1c04e:	d828      	bhi.n	1c0a2 <encode_uint+0x6c>
		return 16;
   1c050:	2b58      	cmp	r3, #88	; 0x58
   1c052:	bf14      	ite	ne
   1c054:	250a      	movne	r5, #10
   1c056:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1c058:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1c05c:	46aa      	mov	sl, r5
   1c05e:	f04f 0b00 	mov.w	fp, #0
   1c062:	4652      	mov	r2, sl
   1c064:	465b      	mov	r3, fp
   1c066:	4630      	mov	r0, r6
   1c068:	4639      	mov	r1, r7
   1c06a:	f7e4 f839 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c06e:	2a09      	cmp	r2, #9
   1c070:	b2d3      	uxtb	r3, r2
   1c072:	d81f      	bhi.n	1c0b4 <encode_uint+0x7e>
   1c074:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1c076:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c078:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1c07a:	bf08      	it	eq
   1c07c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c07e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1c082:	d301      	bcc.n	1c088 <encode_uint+0x52>
   1c084:	45c8      	cmp	r8, r9
   1c086:	d812      	bhi.n	1c0ae <encode_uint+0x78>
	if (conv->flag_hash) {
   1c088:	7823      	ldrb	r3, [r4, #0]
   1c08a:	069b      	lsls	r3, r3, #26
   1c08c:	d505      	bpl.n	1c09a <encode_uint+0x64>
		if (radix == 8) {
   1c08e:	2d08      	cmp	r5, #8
   1c090:	d116      	bne.n	1c0c0 <encode_uint+0x8a>
			conv->altform_0 = true;
   1c092:	78a3      	ldrb	r3, [r4, #2]
   1c094:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1c098:	70a3      	strb	r3, [r4, #2]
}
   1c09a:	4640      	mov	r0, r8
   1c09c:	b003      	add	sp, #12
   1c09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1c0a2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1c0a6:	2b70      	cmp	r3, #112	; 0x70
   1c0a8:	e7d3      	b.n	1c052 <encode_uint+0x1c>
	switch (specifier) {
   1c0aa:	2508      	movs	r5, #8
   1c0ac:	e7d4      	b.n	1c058 <encode_uint+0x22>
		value /= radix;
   1c0ae:	4606      	mov	r6, r0
   1c0b0:	460f      	mov	r7, r1
   1c0b2:	e7d6      	b.n	1c062 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c0b4:	9a01      	ldr	r2, [sp, #4]
   1c0b6:	2a19      	cmp	r2, #25
   1c0b8:	bf94      	ite	ls
   1c0ba:	3337      	addls	r3, #55	; 0x37
   1c0bc:	3357      	addhi	r3, #87	; 0x57
   1c0be:	e7da      	b.n	1c076 <encode_uint+0x40>
		} else if (radix == 16) {
   1c0c0:	2d10      	cmp	r5, #16
   1c0c2:	d1ea      	bne.n	1c09a <encode_uint+0x64>
			conv->altform_0c = true;
   1c0c4:	78a3      	ldrb	r3, [r4, #2]
   1c0c6:	f043 0310 	orr.w	r3, r3, #16
   1c0ca:	e7e5      	b.n	1c098 <encode_uint+0x62>

0001c0cc <outs>:
{
   1c0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0d0:	4607      	mov	r7, r0
   1c0d2:	4688      	mov	r8, r1
   1c0d4:	4615      	mov	r5, r2
   1c0d6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c0d8:	4614      	mov	r4, r2
   1c0da:	42b4      	cmp	r4, r6
   1c0dc:	eba4 0005 	sub.w	r0, r4, r5
   1c0e0:	d302      	bcc.n	1c0e8 <outs+0x1c>
   1c0e2:	b93e      	cbnz	r6, 1c0f4 <outs+0x28>
   1c0e4:	7823      	ldrb	r3, [r4, #0]
   1c0e6:	b12b      	cbz	r3, 1c0f4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1c0e8:	f814 0b01 	ldrb.w	r0, [r4], #1
   1c0ec:	4641      	mov	r1, r8
   1c0ee:	47b8      	blx	r7
		if (rc < 0) {
   1c0f0:	2800      	cmp	r0, #0
   1c0f2:	daf2      	bge.n	1c0da <outs+0xe>
}
   1c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c0f8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1c0f8:	4770      	bx	lr

0001c0fa <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1c0fa:	2300      	movs	r3, #0
	list->head = NULL;
   1c0fc:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c100:	4770      	bx	lr

0001c102 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1c102:	6803      	ldr	r3, [r0, #0]
   1c104:	b923      	cbnz	r3, 1c110 <log_list_add_tail+0xe>
		list->head = msg;
   1c106:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1c108:	2300      	movs	r3, #0
	list->tail = msg;
   1c10a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1c10c:	600b      	str	r3, [r1, #0]
}
   1c10e:	4770      	bx	lr
		list->tail->next = msg;
   1c110:	6843      	ldr	r3, [r0, #4]
   1c112:	6019      	str	r1, [r3, #0]
   1c114:	e7f8      	b.n	1c108 <log_list_add_tail+0x6>

0001c116 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1c116:	6800      	ldr	r0, [r0, #0]
   1c118:	4770      	bx	lr

0001c11a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1c11a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1c11c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1c11e:	b108      	cbz	r0, 1c124 <log_list_head_get+0xa>
		list->head = list->head->next;
   1c120:	6802      	ldr	r2, [r0, #0]
   1c122:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1c124:	4770      	bx	lr

0001c126 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1c126:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c128:	f7f4 fbf0 	bl	1090c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1c12c:	b118      	cbz	r0, 1c136 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1c12e:	2301      	movs	r3, #1
   1c130:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c132:	2300      	movs	r3, #0
   1c134:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1c136:	bd08      	pop	{r3, pc}

0001c138 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1c138:	f7f4 bf62 	b.w	11000 <sys_clock_cycle_get_32>

0001c13c <dummy_timestamp>:
   1c13c:	2000      	movs	r0, #0
   1c13e:	4770      	bx	lr

0001c140 <z_log_get_s_mask>:
{
   1c140:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c142:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   1c144:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1c146:	4603      	mov	r3, r0
	bool arm = false;
   1c148:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1c14a:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1c14c:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c150:	b10c      	cbz	r4, 1c156 <z_log_get_s_mask+0x16>
   1c152:	428b      	cmp	r3, r1
   1c154:	d300      	bcc.n	1c158 <z_log_get_s_mask+0x18>
}
   1c156:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1c158:	2c25      	cmp	r4, #37	; 0x25
   1c15a:	d102      	bne.n	1c162 <z_log_get_s_mask+0x22>
			arm = !arm;
   1c15c:	f082 0201 	eor.w	r2, r2, #1
   1c160:	e7f4      	b.n	1c14c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1c162:	2a00      	cmp	r2, #0
   1c164:	d0f2      	beq.n	1c14c <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1c166:	f044 0620 	orr.w	r6, r4, #32
   1c16a:	3e61      	subs	r6, #97	; 0x61
   1c16c:	2e19      	cmp	r6, #25
   1c16e:	d8ed      	bhi.n	1c14c <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1c170:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1c172:	bf04      	itt	eq
   1c174:	fa07 f203 	lsleq.w	r2, r7, r3
   1c178:	4310      	orreq	r0, r2
			arg++;
   1c17a:	3301      	adds	r3, #1
			arm = false;
   1c17c:	2200      	movs	r2, #0
   1c17e:	e7e5      	b.n	1c14c <z_log_get_s_mask+0xc>

0001c180 <log_0>:
{
   1c180:	b538      	push	{r3, r4, r5, lr}
   1c182:	4605      	mov	r5, r0
   1c184:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1c186:	f7ff ffce 	bl	1c126 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c18a:	b128      	cbz	r0, 1c198 <log_0+0x18>
		msg->str = str;
   1c18c:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1c18e:	4621      	mov	r1, r4
}
   1c190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1c194:	f7f4 bad4 	b.w	10740 <msg_finalize>
}
   1c198:	bd38      	pop	{r3, r4, r5, pc}

0001c19a <log_1>:
{
   1c19a:	b570      	push	{r4, r5, r6, lr}
   1c19c:	4606      	mov	r6, r0
   1c19e:	460d      	mov	r5, r1
   1c1a0:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c1a2:	f7ff ffc0 	bl	1c126 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c1a6:	b158      	cbz	r0, 1c1c0 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1c1a8:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1c1aa:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1c1ac:	2101      	movs	r1, #1
   1c1ae:	f361 1207 	bfi	r2, r1, #4, #4
   1c1b2:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1c1b4:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1c1b6:	4621      	mov	r1, r4
}
   1c1b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1c1bc:	f7f4 bac0 	b.w	10740 <msg_finalize>
}
   1c1c0:	bd70      	pop	{r4, r5, r6, pc}

0001c1c2 <log_2>:
{
   1c1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1c6:	4680      	mov	r8, r0
   1c1c8:	460f      	mov	r7, r1
   1c1ca:	4616      	mov	r6, r2
   1c1cc:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c1ce:	f7ff ffaa 	bl	1c126 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c1d2:	b168      	cbz	r0, 1c1f0 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c1d4:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1c1d6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1c1da:	2202      	movs	r2, #2
   1c1dc:	f362 1307 	bfi	r3, r2, #4, #4
   1c1e0:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c1e2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1c1e6:	4629      	mov	r1, r5
}
   1c1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c1ec:	f7f4 baa8 	b.w	10740 <msg_finalize>
}
   1c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c1f4 <log_3>:
{
   1c1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c1f8:	4680      	mov	r8, r0
   1c1fa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1c1fe:	460f      	mov	r7, r1
   1c200:	4616      	mov	r6, r2
   1c202:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c204:	f7ff ff8f 	bl	1c126 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c208:	b170      	cbz	r0, 1c228 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c20a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1c20c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1c210:	2203      	movs	r2, #3
   1c212:	f362 1307 	bfi	r3, r2, #4, #4
   1c216:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c218:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1c21c:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1c21e:	4649      	mov	r1, r9
}
   1c220:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1c224:	f7f4 ba8c 	b.w	10740 <msg_finalize>
}
   1c228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c22c <log_n>:
{
   1c22c:	b510      	push	{r4, lr}
   1c22e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1c230:	f000 f849 	bl	1c2c6 <log_msg_create_n>
		if (msg == NULL) {
   1c234:	b120      	cbz	r0, 1c240 <log_n+0x14>
		msg_finalize(msg, src_level);
   1c236:	4621      	mov	r1, r4
}
   1c238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c23c:	f7f4 ba80 	b.w	10740 <msg_finalize>
}
   1c240:	bd10      	pop	{r4, pc}

0001c242 <log_hexdump>:
{
   1c242:	b510      	push	{r4, lr}
   1c244:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   1c246:	f000 f892 	bl	1c36e <log_msg_hexdump_create>
		if (msg == NULL) {
   1c24a:	b120      	cbz	r0, 1c256 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   1c24c:	4621      	mov	r1, r4
}
   1c24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c252:	f7f4 ba75 	b.w	10740 <msg_finalize>
}
   1c256:	bd10      	pop	{r4, pc}

0001c258 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1c258:	7a40      	ldrb	r0, [r0, #9]
}
   1c25a:	0900      	lsrs	r0, r0, #4
   1c25c:	4770      	bx	lr

0001c25e <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1c25e:	7a43      	ldrb	r3, [r0, #9]
   1c260:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1c264:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1c268:	d216      	bcs.n	1c298 <log_msg_arg_get+0x3a>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c26a:	2a03      	cmp	r2, #3
   1c26c:	d803      	bhi.n	1c276 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1c26e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c272:	6948      	ldr	r0, [r1, #20]
   1c274:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1c276:	2901      	cmp	r1, #1
   1c278:	d803      	bhi.n	1c282 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1c27a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c27e:	6988      	ldr	r0, [r1, #24]
   1c280:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1c282:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c284:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1c286:	2906      	cmp	r1, #6
   1c288:	d803      	bhi.n	1c292 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1c28a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c28e:	6848      	ldr	r0, [r1, #4]
   1c290:	4770      	bx	lr
		cont = cont->next;
   1c292:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1c294:	3907      	subs	r1, #7
		cont = cont->next;
   1c296:	e7f6      	b.n	1c286 <log_msg_arg_get+0x28>
		return 0;
   1c298:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
   1c29a:	4770      	bx	lr

0001c29c <log_msg_put>:
{
   1c29c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c29e:	1d02      	adds	r2, r0, #4
   1c2a0:	f3bf 8f5b 	dmb	ish
   1c2a4:	e852 1f00 	ldrex	r1, [r2]
   1c2a8:	3901      	subs	r1, #1
   1c2aa:	e842 1c00 	strex	ip, r1, [r2]
   1c2ae:	f1bc 0f00 	cmp.w	ip, #0
   1c2b2:	d1f7      	bne.n	1c2a4 <log_msg_put+0x8>
   1c2b4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1c2b8:	685b      	ldr	r3, [r3, #4]
   1c2ba:	b90b      	cbnz	r3, 1c2c0 <log_msg_put+0x24>
		msg_free(msg);
   1c2bc:	f7f4 bb3a 	b.w	10934 <msg_free>
}
   1c2c0:	4770      	bx	lr

0001c2c2 <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
   1c2c2:	6900      	ldr	r0, [r0, #16]
   1c2c4:	4770      	bx	lr

0001c2c6 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
   1c2c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2ca:	4681      	mov	r9, r0
   1c2cc:	4688      	mov	r8, r1
   1c2ce:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c2d0:	f7f4 fb1c 	bl	1090c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1c2d4:	4604      	mov	r4, r0
   1c2d6:	b330      	cbz	r0, 1c326 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1c2d8:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1c2da:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c2dc:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1c2de:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c2e0:	8107      	strh	r7, [r0, #8]
   1c2e2:	d909      	bls.n	1c2f8 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1c2e4:	2202      	movs	r2, #2
   1c2e6:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c2e8:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1c2ec:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1c2f0:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1c2f2:	f1ba 0f00 	cmp.w	sl, #0
   1c2f6:	dc0e      	bgt.n	1c316 <log_msg_create_n+0x50>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1c2f8:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1c2fa:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1c2fe:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c302:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1c304:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c306:	d818      	bhi.n	1c33a <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1c308:	00aa      	lsls	r2, r5, #2
   1c30a:	4641      	mov	r1, r8
   1c30c:	f104 0014 	add.w	r0, r4, #20
   1c310:	f001 fa52 	bl	1d7b8 <memcpy>
	while (nargs != 0U) {
   1c314:	e007      	b.n	1c326 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1c316:	f7f4 faf9 	bl	1090c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1c31a:	4606      	mov	r6, r0
   1c31c:	b930      	cbnz	r0, 1c32c <log_msg_create_n+0x66>
			msg_free(msg);
   1c31e:	4620      	mov	r0, r4
   1c320:	f7f4 fb08 	bl	10934 <msg_free>
			return NULL;
   1c324:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   1c326:	4620      	mov	r0, r4
   1c328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1c32c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1c330:	f1aa 0a07 	sub.w	sl, sl, #7
   1c334:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1c336:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1c338:	e7db      	b.n	1c2f2 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1c33a:	4641      	mov	r1, r8
   1c33c:	2208      	movs	r2, #8
   1c33e:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1c342:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1c344:	f001 fa38 	bl	1d7b8 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c348:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1c34a:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1c34e:	2d07      	cmp	r5, #7
   1c350:	462e      	mov	r6, r5
   1c352:	bf28      	it	cs
   1c354:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1c356:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1c35a:	4641      	mov	r1, r8
   1c35c:	1d38      	adds	r0, r7, #4
   1c35e:	464a      	mov	r2, r9
   1c360:	f001 fa2a 	bl	1d7b8 <memcpy>
	while (nargs != 0U) {
   1c364:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1c366:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1c368:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1c36a:	d1f0      	bne.n	1c34e <log_msg_create_n+0x88>
   1c36c:	e7db      	b.n	1c326 <log_msg_create_n+0x60>

0001c36e <log_msg_hexdump_create>:

struct log_msg *log_msg_hexdump_create(const char *str,
				       const uint8_t *data,
				       uint32_t length)
{
   1c36e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct log_msg_cont *cont;
	struct log_msg *msg;
	uint32_t chunk_length;

	/* Saturate length. */
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1c372:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1c376:	4295      	cmp	r5, r2
{
   1c378:	4680      	mov	r8, r0
   1c37a:	460e      	mov	r6, r1
   1c37c:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1c37e:	bf28      	it	cs
   1c380:	4615      	movcs	r5, r2
		 LOG_MSG_HEXDUMP_MAX_LENGTH : length;

	msg = (struct log_msg *)log_msg_chunk_alloc();
   1c382:	f7f4 fac3 	bl	1090c <log_msg_chunk_alloc>
	if (msg == NULL) {
   1c386:	4604      	mov	r4, r0
   1c388:	b380      	cbz	r0, 1c3ec <log_msg_hexdump_create+0x7e>
		return NULL;
	}

	/* all fields reset to 0, reference counter to 1 */
	msg->hdr.ref_cnt = 1;
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1c38a:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.params.hexdump.length = length;
	msg->str = str;
   1c38c:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1c390:	2301      	movs	r3, #1
   1c392:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1c394:	00ab      	lsls	r3, r5, #2
   1c396:	f043 0301 	orr.w	r3, r3, #1
   1c39a:	f002 0202 	and.w	r2, r2, #2
   1c39e:	4313      	orrs	r3, r2


	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c3a0:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1c3a2:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c3a4:	f100 0814 	add.w	r8, r0, #20
   1c3a8:	d917      	bls.n	1c3da <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   1c3aa:	2208      	movs	r2, #8
   1c3ac:	4631      	mov	r1, r6
   1c3ae:	3018      	adds	r0, #24
   1c3b0:	f001 fa02 	bl	1d7b8 <memcpy>
		       data,
		       LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK);
		msg->payload.ext.next = NULL;
		msg->hdr.params.generic.ext = 1;
   1c3b4:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   1c3b6:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   1c3b8:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   1c3bc:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1c3be:	7222      	strb	r2, [r4, #8]

		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c3c0:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c3c2:	3d08      	subs	r5, #8
		length = 0U;
	}

	prev_cont = &msg->payload.ext.next;

	while (length > 0) {
   1c3c4:	4699      	mov	r9, r3
   1c3c6:	b18d      	cbz	r5, 1c3ec <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1c3c8:	f7f4 faa0 	bl	1090c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1c3cc:	4607      	mov	r7, r0
   1c3ce:	b980      	cbnz	r0, 1c3f2 <log_msg_hexdump_create+0x84>
			msg_free(msg);
   1c3d0:	4620      	mov	r0, r4
   1c3d2:	f7f4 faaf 	bl	10934 <msg_free>
			return NULL;
   1c3d6:	463c      	mov	r4, r7
   1c3d8:	e008      	b.n	1c3ec <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1c3da:	462a      	mov	r2, r5
   1c3dc:	4631      	mov	r1, r6
   1c3de:	4640      	mov	r0, r8
   1c3e0:	f001 f9ea 	bl	1d7b8 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1c3e4:	7a23      	ldrb	r3, [r4, #8]
   1c3e6:	f36f 0341 	bfc	r3, #1, #1
   1c3ea:	7223      	strb	r3, [r4, #8]
		data += chunk_length;
		length -= chunk_length;
	}

	return msg;
}
   1c3ec:	4620      	mov	r0, r4
   1c3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1c3f2:	2d1c      	cmp	r5, #28
   1c3f4:	462f      	mov	r7, r5
   1c3f6:	bf28      	it	cs
   1c3f8:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1c3fa:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1c3fe:	4631      	mov	r1, r6
		cont->next = NULL;
   1c400:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1c404:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1c406:	463a      	mov	r2, r7
   1c408:	3004      	adds	r0, #4
   1c40a:	f001 f9d5 	bl	1d7b8 <memcpy>
		data += chunk_length;
   1c40e:	443e      	add	r6, r7
		length -= chunk_length;
   1c410:	1bed      	subs	r5, r5, r7
   1c412:	e7d8      	b.n	1c3c6 <log_msg_hexdump_create+0x58>

0001c414 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1c414:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1c418:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1c41c:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1c41e:	4640      	mov	r0, r8
{
   1c420:	461f      	mov	r7, r3
   1c422:	460c      	mov	r4, r1
   1c424:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1c426:	f001 f99b 	bl	1d760 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1c42a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c42e:	9300      	str	r3, [sp, #0]
   1c430:	b280      	uxth	r0, r0
   1c432:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1c436:	463b      	mov	r3, r7
   1c438:	4632      	mov	r2, r6
   1c43a:	4621      	mov	r1, r4
   1c43c:	4628      	mov	r0, r5
   1c43e:	f002 fcf1 	bl	1ee24 <bt_gatt_attr_read>
}
   1c442:	b004      	add	sp, #16
   1c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c448 <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1c448:	2000      	movs	r0, #0
   1c44a:	4770      	bx	lr

0001c44c <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1c44c:	2200      	movs	r2, #0
   1c44e:	e9c0 2200 	strd	r2, r2, [r0]
   1c452:	6082      	str	r2, [r0, #8]
}
   1c454:	4770      	bx	lr

0001c456 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c456:	6902      	ldr	r2, [r0, #16]
   1c458:	b2cb      	uxtb	r3, r1
   1c45a:	210c      	movs	r1, #12
   1c45c:	fb03 2101 	mla	r1, r3, r1, r2
   1c460:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1c462:	f000 0007 	and.w	r0, r0, #7
   1c466:	4770      	bx	lr

0001c468 <set_off_state>:
	__asm__ volatile(
   1c468:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c46c:	f3ef 8211 	mrs	r2, BASEPRI
   1c470:	f383 8811 	msr	BASEPRI, r3
   1c474:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c478:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c47a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1c47e:	d001      	beq.n	1c484 <set_off_state+0x1c>
   1c480:	428b      	cmp	r3, r1
   1c482:	d107      	bne.n	1c494 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c484:	2301      	movs	r3, #1
   1c486:	6003      	str	r3, [r0, #0]
	int err = 0;
   1c488:	2000      	movs	r0, #0
	__asm__ volatile(
   1c48a:	f382 8811 	msr	BASEPRI, r2
   1c48e:	f3bf 8f6f 	isb	sy
}
   1c492:	4770      	bx	lr
		err = -EPERM;
   1c494:	f04f 30ff 	mov.w	r0, #4294967295
   1c498:	e7f7      	b.n	1c48a <set_off_state+0x22>

0001c49a <set_starting_state>:
{
   1c49a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c49c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4a0:	f3ef 8211 	mrs	r2, BASEPRI
   1c4a4:	f383 8811 	msr	BASEPRI, r3
   1c4a8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c4ac:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1c4ae:	f003 0407 	and.w	r4, r3, #7
   1c4b2:	2c01      	cmp	r4, #1
   1c4b4:	d106      	bne.n	1c4c4 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1c4b6:	6001      	str	r1, [r0, #0]
	int err = 0;
   1c4b8:	2000      	movs	r0, #0
	__asm__ volatile(
   1c4ba:	f382 8811 	msr	BASEPRI, r2
   1c4be:	f3bf 8f6f 	isb	sy
}
   1c4c2:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1c4c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1c4c8:	428b      	cmp	r3, r1
		err = -EALREADY;
   1c4ca:	bf14      	ite	ne
   1c4cc:	f04f 30ff 	movne.w	r0, #4294967295
   1c4d0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1c4d4:	e7f1      	b.n	1c4ba <set_starting_state+0x20>

0001c4d6 <set_on_state>:
	__asm__ volatile(
   1c4d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4da:	f3ef 8211 	mrs	r2, BASEPRI
   1c4de:	f383 8811 	msr	BASEPRI, r3
   1c4e2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1c4e6:	6803      	ldr	r3, [r0, #0]
   1c4e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c4ec:	f043 0302 	orr.w	r3, r3, #2
   1c4f0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1c4f2:	f382 8811 	msr	BASEPRI, r2
   1c4f6:	f3bf 8f6f 	isb	sy
}
   1c4fa:	4770      	bx	lr

0001c4fc <onoff_started_callback>:
	return &data->mgr[type];
   1c4fc:	6900      	ldr	r0, [r0, #16]
{
   1c4fe:	b410      	push	{r4}
	return &data->mgr[type];
   1c500:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1c502:	241c      	movs	r4, #28
   1c504:	fb03 0004 	mla	r0, r3, r4, r0
   1c508:	2100      	movs	r1, #0
}
   1c50a:	bc10      	pop	{r4}
	notify(mgr, 0);
   1c50c:	4710      	bx	r2

0001c50e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1c50e:	2000      	movs	r0, #0
   1c510:	f003 bae8 	b.w	1fae4 <nrfx_clock_stop>

0001c514 <blocking_start_callback>:
{
   1c514:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1c516:	f7fe b941 	b.w	1a79c <z_impl_k_sem_give>

0001c51a <api_stop>:
{
   1c51a:	b538      	push	{r3, r4, r5, lr}
   1c51c:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1c51e:	240c      	movs	r4, #12
   1c520:	434c      	muls	r4, r1
{
   1c522:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1c524:	6900      	ldr	r0, [r0, #16]
   1c526:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1c52a:	2180      	movs	r1, #128	; 0x80
   1c52c:	4418      	add	r0, r3
   1c52e:	f7ff ff9b 	bl	1c468 <set_off_state>
	if (err < 0) {
   1c532:	2800      	cmp	r0, #0
   1c534:	db04      	blt.n	1c540 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1c536:	6869      	ldr	r1, [r5, #4]
   1c538:	440c      	add	r4, r1
   1c53a:	6863      	ldr	r3, [r4, #4]
   1c53c:	4798      	blx	r3
	return 0;
   1c53e:	2000      	movs	r0, #0
}
   1c540:	bd38      	pop	{r3, r4, r5, pc}

0001c542 <api_start>:
{
   1c542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c546:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1c548:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1c54a:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1c54c:	434c      	muls	r4, r1
{
   1c54e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1c550:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1c554:	2180      	movs	r1, #128	; 0x80
   1c556:	4428      	add	r0, r5
{
   1c558:	4690      	mov	r8, r2
   1c55a:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1c55c:	f7ff ff9d 	bl	1c49a <set_starting_state>
	if (err < 0) {
   1c560:	2800      	cmp	r0, #0
   1c562:	db06      	blt.n	1c572 <api_start+0x30>
	subdata->cb = cb;
   1c564:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1c566:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1c56a:	6873      	ldr	r3, [r6, #4]
   1c56c:	591b      	ldr	r3, [r3, r4]
   1c56e:	4798      	blx	r3
	return 0;
   1c570:	2000      	movs	r0, #0
}
   1c572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c576 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1c576:	4770      	bx	lr

0001c578 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1c578:	4770      	bx	lr

0001c57a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1c57a:	b538      	push	{r3, r4, r5, lr}
   1c57c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1c57e:	42ab      	cmp	r3, r5
{
   1c580:	4611      	mov	r1, r2
   1c582:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1c584:	d804      	bhi.n	1c590 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1c586:	461a      	mov	r2, r3
   1c588:	f001 f916 	bl	1d7b8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1c58c:	4620      	mov	r0, r4
   1c58e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1c590:	2400      	movs	r4, #0
   1c592:	e7fb      	b.n	1c58c <_copy+0x12>

0001c594 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1c594:	f001 b93b 	b.w	1d80e <memset>

0001c598 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1c598:	09c3      	lsrs	r3, r0, #7
   1c59a:	005a      	lsls	r2, r3, #1
   1c59c:	4413      	add	r3, r2
   1c59e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1c5a2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1c5a6:	b2c0      	uxtb	r0, r0
   1c5a8:	4770      	bx	lr

0001c5aa <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1c5aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c5ae:	4606      	mov	r6, r0
   1c5b0:	b0a9      	sub	sp, #164	; 0xa4
   1c5b2:	4688      	mov	r8, r1
   1c5b4:	4614      	mov	r4, r2
   1c5b6:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1c5b8:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1c5bc:	f7f4 fd3a 	bl	11034 <uECC_get_rng>
		if (!rng_function ||
   1c5c0:	4603      	mov	r3, r0
   1c5c2:	2800      	cmp	r0, #0
   1c5c4:	d03e      	beq.n	1c644 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1c5c6:	2140      	movs	r1, #64	; 0x40
   1c5c8:	a808      	add	r0, sp, #32
   1c5ca:	4798      	blx	r3
		if (!rng_function ||
   1c5cc:	b3d0      	cbz	r0, 1c644 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1c5ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1c5d2:	f112 031f 	adds.w	r3, r2, #31
   1c5d6:	bf48      	it	mi
   1c5d8:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1c5dc:	466d      	mov	r5, sp
   1c5de:	464a      	mov	r2, r9
   1c5e0:	a908      	add	r1, sp, #32
   1c5e2:	4628      	mov	r0, r5
   1c5e4:	f343 1347 	sbfx	r3, r3, #5, #8
   1c5e8:	f000 fa03 	bl	1c9f2 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1c5ec:	4622      	mov	r2, r4
   1c5ee:	4629      	mov	r1, r5
   1c5f0:	a818      	add	r0, sp, #96	; 0x60
   1c5f2:	f000 fe19 	bl	1d228 <EccPoint_compute_public_key>
   1c5f6:	b318      	cbz	r0, 1c640 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1c5f8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1c5fc:	1dd9      	adds	r1, r3, #7
   1c5fe:	bf48      	it	mi
   1c600:	f103 010e 	addmi.w	r1, r3, #14
   1c604:	462a      	mov	r2, r5
   1c606:	4640      	mov	r0, r8
   1c608:	10c9      	asrs	r1, r1, #3
   1c60a:	f000 fe35 	bl	1d278 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1c60e:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1c612:	aa18      	add	r2, sp, #96	; 0x60
   1c614:	4630      	mov	r0, r6
   1c616:	f000 fe2f 	bl	1d278 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1c61a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1c61e:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1c622:	ab18      	add	r3, sp, #96	; 0x60
   1c624:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1c628:	1870      	adds	r0, r6, r1
   1c62a:	f000 fe25 	bl	1d278 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1c62e:	2220      	movs	r2, #32
   1c630:	2100      	movs	r1, #0
   1c632:	4628      	mov	r0, r5
   1c634:	f001 f8eb 	bl	1d80e <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1c638:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1c63a:	b029      	add	sp, #164	; 0xa4
   1c63c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1c640:	3f01      	subs	r7, #1
   1c642:	d1bb      	bne.n	1c5bc <uECC_make_key+0x12>
        		return 0;
   1c644:	2000      	movs	r0, #0
   1c646:	e7f8      	b.n	1c63a <uECC_make_key+0x90>

0001c648 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1c648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c64c:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1c64e:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1c652:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1c656:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1c65a:	b0a4      	sub	sp, #144	; 0x90
   1c65c:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1c65e:	1dda      	adds	r2, r3, #7
   1c660:	bf48      	it	mi
   1c662:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1c666:	ad04      	add	r5, sp, #16
{
   1c668:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1c66a:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1c66c:	4628      	mov	r0, r5
   1c66e:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1c670:	9502      	str	r5, [sp, #8]
   1c672:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1c674:	f000 fe14 	bl	1d2a0 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1c678:	463a      	mov	r2, r7
   1c67a:	4649      	mov	r1, r9
   1c67c:	a814      	add	r0, sp, #80	; 0x50
   1c67e:	f000 fe0f 	bl	1d2a0 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1c682:	ab14      	add	r3, sp, #80	; 0x50
   1c684:	eb09 0107 	add.w	r1, r9, r7
   1c688:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1c68c:	463a      	mov	r2, r7
   1c68e:	f000 fe07 	bl	1d2a0 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1c692:	4623      	mov	r3, r4
   1c694:	4632      	mov	r2, r6
   1c696:	4629      	mov	r1, r5
   1c698:	4628      	mov	r0, r5
   1c69a:	f000 fd99 	bl	1d1d0 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1c69e:	fab0 f080 	clz	r0, r0
   1c6a2:	9401      	str	r4, [sp, #4]
   1c6a4:	ab24      	add	r3, sp, #144	; 0x90
   1c6a6:	0940      	lsrs	r0, r0, #5
   1c6a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1c6ac:	8863      	ldrh	r3, [r4, #2]
   1c6ae:	3301      	adds	r3, #1
   1c6b0:	b21b      	sxth	r3, r3
   1c6b2:	9300      	str	r3, [sp, #0]
   1c6b4:	a914      	add	r1, sp, #80	; 0x50
   1c6b6:	2300      	movs	r3, #0
   1c6b8:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1c6bc:	4608      	mov	r0, r1
   1c6be:	f000 fcb8 	bl	1d032 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1c6c2:	aa14      	add	r2, sp, #80	; 0x50
   1c6c4:	4639      	mov	r1, r7
   1c6c6:	4640      	mov	r0, r8
   1c6c8:	f000 fdd6 	bl	1d278 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1c6cc:	4621      	mov	r1, r4
   1c6ce:	a814      	add	r0, sp, #80	; 0x50
   1c6d0:	f000 fc24 	bl	1cf1c <EccPoint_isZero>
   1c6d4:	af02      	add	r7, sp, #8
   1c6d6:	4604      	mov	r4, r0
   1c6d8:	2208      	movs	r2, #8
   1c6da:	2100      	movs	r1, #0
   1c6dc:	4638      	mov	r0, r7
   1c6de:	f001 f896 	bl	1d80e <memset>
   1c6e2:	2220      	movs	r2, #32
   1c6e4:	2100      	movs	r1, #0
   1c6e6:	4630      	mov	r0, r6
   1c6e8:	f001 f891 	bl	1d80e <memset>
   1c6ec:	2220      	movs	r2, #32
   1c6ee:	2100      	movs	r1, #0
   1c6f0:	4628      	mov	r0, r5
   1c6f2:	f001 f88c 	bl	1d80e <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1c6f6:	fab4 f084 	clz	r0, r4
   1c6fa:	0940      	lsrs	r0, r0, #5
   1c6fc:	b024      	add	sp, #144	; 0x90
   1c6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c702 <uECC_vli_add>:
{
   1c702:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1c704:	2400      	movs	r4, #0
{
   1c706:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1c708:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1c70a:	b265      	sxtb	r5, r4
   1c70c:	42ab      	cmp	r3, r5
   1c70e:	dc00      	bgt.n	1c712 <uECC_vli_add+0x10>
}
   1c710:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1c712:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1c716:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1c71a:	443d      	add	r5, r7
   1c71c:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1c71e:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1c720:	bf8c      	ite	hi
   1c722:	2701      	movhi	r7, #1
   1c724:	2700      	movls	r7, #0
		result[i] = sum;
   1c726:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1c72a:	bf18      	it	ne
   1c72c:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1c72e:	3401      	adds	r4, #1
   1c730:	e7eb      	b.n	1c70a <uECC_vli_add+0x8>

0001c732 <uECC_vli_rshift1>:
	vli += num_words;
   1c732:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1c736:	2300      	movs	r3, #0
	while (vli-- > end) {
   1c738:	4288      	cmp	r0, r1
   1c73a:	d300      	bcc.n	1c73e <uECC_vli_rshift1+0xc>
}
   1c73c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1c73e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1c742:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1c746:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1c748:	07d3      	lsls	r3, r2, #31
   1c74a:	e7f5      	b.n	1c738 <uECC_vli_rshift1+0x6>

0001c74c <vli_modInv_update>:
	if (!EVEN(uv)) {
   1c74c:	6803      	ldr	r3, [r0, #0]
{
   1c74e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1c750:	f013 0601 	ands.w	r6, r3, #1
{
   1c754:	4605      	mov	r5, r0
   1c756:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1c758:	d005      	beq.n	1c766 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1c75a:	4613      	mov	r3, r2
   1c75c:	460a      	mov	r2, r1
   1c75e:	4601      	mov	r1, r0
   1c760:	f7ff ffcf 	bl	1c702 <uECC_vli_add>
   1c764:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1c766:	4621      	mov	r1, r4
   1c768:	4628      	mov	r0, r5
   1c76a:	f7ff ffe2 	bl	1c732 <uECC_vli_rshift1>
	if (carry) {
   1c76e:	b146      	cbz	r6, 1c782 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1c770:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1c774:	3a01      	subs	r2, #1
   1c776:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1c77a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c77e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1c782:	bd70      	pop	{r4, r5, r6, pc}

0001c784 <uECC_vli_mult>:
{
   1c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1c788:	2500      	movs	r5, #0
{
   1c78a:	b087      	sub	sp, #28
   1c78c:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1c790:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1c792:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1c794:	fa4f f885 	sxtb.w	r8, r5
   1c798:	4543      	cmp	r3, r8
   1c79a:	dc16      	bgt.n	1c7ca <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1c79c:	f04f 35ff 	mov.w	r5, #4294967295
   1c7a0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1c7a4:	9502      	str	r5, [sp, #8]
   1c7a6:	f04f 0a00 	mov.w	sl, #0
   1c7aa:	9e02      	ldr	r6, [sp, #8]
   1c7ac:	fa53 fe8a 	uxtab	lr, r3, sl
   1c7b0:	fa4f fe8e 	sxtb.w	lr, lr
   1c7b4:	45b6      	cmp	lr, r6
   1c7b6:	fa5f f58a 	uxtb.w	r5, sl
   1c7ba:	db2d      	blt.n	1c818 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1c7bc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1c7c0:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1c7c4:	b007      	add	sp, #28
   1c7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7ca:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1c7cc:	f04f 0c00 	mov.w	ip, #0
   1c7d0:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1c7d4:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1c7d6:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c7da:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1c7dc:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c7e0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1c7e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1c7e8:	fba7 ab06 	umull	sl, fp, r7, r6
   1c7ec:	eb1a 0601 	adds.w	r6, sl, r1
   1c7f0:	f10c 0c01 	add.w	ip, ip, #1
   1c7f4:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1c7f8:	fa4f fa8c 	sxtb.w	sl, ip
   1c7fc:	bf2c      	ite	cs
   1c7fe:	2201      	movcs	r2, #1
   1c800:	2200      	movcc	r2, #0
   1c802:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1c804:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1c806:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1c808:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1c80a:	dde4      	ble.n	1c7d6 <uECC_vli_mult+0x52>
		result[k] = r0;
   1c80c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1c810:	463a      	mov	r2, r7
   1c812:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1c814:	4674      	mov	r4, lr
   1c816:	e7bd      	b.n	1c794 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1c818:	3501      	adds	r5, #1
   1c81a:	9900      	ldr	r1, [sp, #0]
   1c81c:	9e01      	ldr	r6, [sp, #4]
   1c81e:	fa4f fc85 	sxtb.w	ip, r5
   1c822:	ebae 0b0c 	sub.w	fp, lr, ip
   1c826:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1c82a:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1c82e:	4621      	mov	r1, r4
   1c830:	2400      	movs	r4, #0
   1c832:	459c      	cmp	ip, r3
   1c834:	db05      	blt.n	1c842 <uECC_vli_mult+0xbe>
		result[k] = r0;
   1c836:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1c83a:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1c83e:	460a      	mov	r2, r1
   1c840:	e7b3      	b.n	1c7aa <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1c842:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1c846:	f855 7b04 	ldr.w	r7, [r5], #4
   1c84a:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1c84e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c852:	fba7 6706 	umull	r6, r7, r7, r6
   1c856:	eb16 0801 	adds.w	r8, r6, r1
   1c85a:	eb57 0902 	adcs.w	r9, r7, r2
   1c85e:	bf2c      	ite	cs
   1c860:	2201      	movcs	r2, #1
   1c862:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1c864:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1c868:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1c86a:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1c86c:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1c86e:	fa4f fc8c 	sxtb.w	ip, ip
   1c872:	e7de      	b.n	1c832 <uECC_vli_mult+0xae>

0001c874 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1c874:	2300      	movs	r3, #0
{
   1c876:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1c878:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1c87a:	b25a      	sxtb	r2, r3
   1c87c:	4291      	cmp	r1, r2
   1c87e:	dc00      	bgt.n	1c882 <uECC_vli_clear+0xe>
}
   1c880:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1c882:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1c886:	3301      	adds	r3, #1
   1c888:	e7f7      	b.n	1c87a <uECC_vli_clear+0x6>

0001c88a <uECC_vli_isZero>:
{
   1c88a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1c88c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1c88e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1c890:	b25c      	sxtb	r4, r3
   1c892:	42a1      	cmp	r1, r4
   1c894:	dc03      	bgt.n	1c89e <uECC_vli_isZero+0x14>
}
   1c896:	fab2 f082 	clz	r0, r2
   1c89a:	0940      	lsrs	r0, r0, #5
   1c89c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1c89e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1c8a2:	3301      	adds	r3, #1
   1c8a4:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1c8a6:	e7f3      	b.n	1c890 <uECC_vli_isZero+0x6>

0001c8a8 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c8a8:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1c8aa:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c8ac:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1c8b0:	f001 011f 	and.w	r1, r1, #31
   1c8b4:	fa03 f101 	lsl.w	r1, r3, r1
}
   1c8b8:	4008      	ands	r0, r1
   1c8ba:	4770      	bx	lr

0001c8bc <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1c8bc:	3901      	subs	r1, #1
   1c8be:	b24b      	sxtb	r3, r1
{
   1c8c0:	4602      	mov	r2, r0
   1c8c2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1c8c6:	2b00      	cmp	r3, #0
   1c8c8:	da03      	bge.n	1c8d2 <uECC_vli_numBits+0x16>
	return (i + 1);
   1c8ca:	3301      	adds	r3, #1
   1c8cc:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1c8ce:	b938      	cbnz	r0, 1c8e0 <uECC_vli_numBits+0x24>
   1c8d0:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1c8d2:	f851 0904 	ldr.w	r0, [r1], #-4
   1c8d6:	2800      	cmp	r0, #0
   1c8d8:	d1f7      	bne.n	1c8ca <uECC_vli_numBits+0xe>
   1c8da:	3b01      	subs	r3, #1
   1c8dc:	b25b      	sxtb	r3, r3
   1c8de:	e7f2      	b.n	1c8c6 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1c8e0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1c8e4:	3b01      	subs	r3, #1
   1c8e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1c8ea:	2300      	movs	r3, #0
   1c8ec:	b922      	cbnz	r2, 1c8f8 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1c8ee:	3801      	subs	r0, #1
   1c8f0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1c8f4:	b200      	sxth	r0, r0
}
   1c8f6:	4770      	bx	lr
		digit >>= 1;
   1c8f8:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1c8fa:	3301      	adds	r3, #1
   1c8fc:	e7f6      	b.n	1c8ec <uECC_vli_numBits+0x30>

0001c8fe <uECC_vli_set>:
{
   1c8fe:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1c900:	2300      	movs	r3, #0
   1c902:	b25c      	sxtb	r4, r3
   1c904:	42a2      	cmp	r2, r4
   1c906:	dc00      	bgt.n	1c90a <uECC_vli_set+0xc>
}
   1c908:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1c90a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1c90e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1c912:	3301      	adds	r3, #1
   1c914:	e7f5      	b.n	1c902 <uECC_vli_set+0x4>

0001c916 <uECC_vli_cmp_unsafe>:
{
   1c916:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1c918:	3a01      	subs	r2, #1
   1c91a:	b253      	sxtb	r3, r2
   1c91c:	009a      	lsls	r2, r3, #2
   1c91e:	2b00      	cmp	r3, #0
   1c920:	da01      	bge.n	1c926 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1c922:	2000      	movs	r0, #0
}
   1c924:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1c926:	5885      	ldr	r5, [r0, r2]
   1c928:	588c      	ldr	r4, [r1, r2]
   1c92a:	42a5      	cmp	r5, r4
   1c92c:	d805      	bhi.n	1c93a <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1c92e:	f1a2 0204 	sub.w	r2, r2, #4
   1c932:	d304      	bcc.n	1c93e <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1c934:	3b01      	subs	r3, #1
   1c936:	b25b      	sxtb	r3, r3
   1c938:	e7f1      	b.n	1c91e <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1c93a:	2001      	movs	r0, #1
   1c93c:	e7f2      	b.n	1c924 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1c93e:	f04f 30ff 	mov.w	r0, #4294967295
   1c942:	e7ef      	b.n	1c924 <uECC_vli_cmp_unsafe+0xe>

0001c944 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1c944:	3a01      	subs	r2, #1
   1c946:	b253      	sxtb	r3, r2
{
   1c948:	b570      	push	{r4, r5, r6, lr}
   1c94a:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1c94c:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1c94e:	2b00      	cmp	r3, #0
   1c950:	da03      	bge.n	1c95a <uECC_vli_equal+0x16>
}
   1c952:	1e20      	subs	r0, r4, #0
   1c954:	bf18      	it	ne
   1c956:	2001      	movne	r0, #1
   1c958:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1c95a:	5885      	ldr	r5, [r0, r2]
   1c95c:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1c95e:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1c960:	4075      	eors	r5, r6
   1c962:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1c964:	b25b      	sxtb	r3, r3
   1c966:	3a04      	subs	r2, #4
   1c968:	e7f1      	b.n	1c94e <uECC_vli_equal+0xa>

0001c96a <uECC_vli_sub>:
{
   1c96a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1c96c:	2400      	movs	r4, #0
{
   1c96e:	4606      	mov	r6, r0
   1c970:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1c972:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1c974:	b265      	sxtb	r5, r4
   1c976:	45ac      	cmp	ip, r5
   1c978:	dc00      	bgt.n	1c97c <uECC_vli_sub+0x12>
}
   1c97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1c97c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1c980:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1c984:	1a3d      	subs	r5, r7, r0
   1c986:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1c988:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1c98a:	bf34      	ite	cc
   1c98c:	2701      	movcc	r7, #1
   1c98e:	2700      	movcs	r7, #0
		result[i] = diff;
   1c990:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1c994:	bf18      	it	ne
   1c996:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1c998:	3401      	adds	r4, #1
   1c99a:	e7eb      	b.n	1c974 <uECC_vli_sub+0xa>

0001c99c <uECC_vli_modAdd>:
{
   1c99c:	b570      	push	{r4, r5, r6, lr}
   1c99e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1c9a2:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1c9a4:	4633      	mov	r3, r6
{
   1c9a6:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1c9a8:	f7ff feab 	bl	1c702 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1c9ac:	b930      	cbnz	r0, 1c9bc <uECC_vli_modAdd+0x20>
   1c9ae:	4632      	mov	r2, r6
   1c9b0:	4621      	mov	r1, r4
   1c9b2:	4628      	mov	r0, r5
   1c9b4:	f7ff ffaf 	bl	1c916 <uECC_vli_cmp_unsafe>
   1c9b8:	2801      	cmp	r0, #1
   1c9ba:	d007      	beq.n	1c9cc <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1c9bc:	4633      	mov	r3, r6
   1c9be:	462a      	mov	r2, r5
   1c9c0:	4621      	mov	r1, r4
   1c9c2:	4620      	mov	r0, r4
}
   1c9c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1c9c8:	f7ff bfcf 	b.w	1c96a <uECC_vli_sub>
}
   1c9cc:	bd70      	pop	{r4, r5, r6, pc}

0001c9ce <uECC_vli_modSub>:
{
   1c9ce:	b570      	push	{r4, r5, r6, lr}
   1c9d0:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1c9d4:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1c9d6:	4633      	mov	r3, r6
{
   1c9d8:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1c9da:	f7ff ffc6 	bl	1c96a <uECC_vli_sub>
	if (l_borrow) {
   1c9de:	b138      	cbz	r0, 1c9f0 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1c9e0:	4633      	mov	r3, r6
   1c9e2:	462a      	mov	r2, r5
   1c9e4:	4621      	mov	r1, r4
   1c9e6:	4620      	mov	r0, r4
}
   1c9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1c9ec:	f7ff be89 	b.w	1c702 <uECC_vli_add>
}
   1c9f0:	bd70      	pop	{r4, r5, r6, pc}

0001c9f2 <uECC_vli_mmod>:
{
   1c9f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9f6:	b0a5      	sub	sp, #148	; 0x94
   1c9f8:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1c9fa:	ab14      	add	r3, sp, #80	; 0x50
   1c9fc:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1ca00:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1ca02:	4629      	mov	r1, r5
   1ca04:	4610      	mov	r0, r2
{
   1ca06:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1ca08:	f7ff ff58 	bl	1c8bc <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1ca0c:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1ca10:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1ca12:	2c00      	cmp	r4, #0
   1ca14:	4621      	mov	r1, r4
   1ca16:	bfb8      	it	lt
   1ca18:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1ca1c:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1ca1e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1ca22:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1ca26:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1ca28:	f004 071f 	and.w	r7, r4, #31
   1ca2c:	bf58      	it	pl
   1ca2e:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1ca30:	f7ff ff20 	bl	1c874 <uECC_vli_clear>
	if (bit_shift > 0) {
   1ca34:	2f00      	cmp	r7, #0
   1ca36:	b208      	sxth	r0, r1
   1ca38:	dd2b      	ble.n	1ca92 <uECC_vli_mmod+0xa0>
   1ca3a:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1ca3c:	2200      	movs	r2, #0
   1ca3e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1ca42:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1ca46:	4613      	mov	r3, r2
   1ca48:	429d      	cmp	r5, r3
   1ca4a:	d817      	bhi.n	1ca7c <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1ca4c:	006b      	lsls	r3, r5, #1
   1ca4e:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ca50:	ab04      	add	r3, sp, #16
   1ca52:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ca56:	1e6f      	subs	r7, r5, #1
   1ca58:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ca5a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ca5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1ca60:	2c00      	cmp	r4, #0
   1ca62:	da54      	bge.n	1cb0e <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1ca64:	ab24      	add	r3, sp, #144	; 0x90
   1ca66:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1ca6a:	462a      	mov	r2, r5
   1ca6c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1ca70:	4640      	mov	r0, r8
   1ca72:	f7ff ff44 	bl	1c8fe <uECC_vli_set>
}
   1ca76:	b025      	add	sp, #148	; 0x94
   1ca78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1ca7c:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1ca80:	fa0c f007 	lsl.w	r0, ip, r7
   1ca84:	4302      	orrs	r2, r0
   1ca86:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1ca8a:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1ca8c:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1ca90:	e7da      	b.n	1ca48 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1ca92:	ab04      	add	r3, sp, #16
   1ca94:	462a      	mov	r2, r5
   1ca96:	4631      	mov	r1, r6
   1ca98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ca9c:	f7ff ff2f 	bl	1c8fe <uECC_vli_set>
   1caa0:	e7d4      	b.n	1ca4c <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1caa2:	fa0f fe82 	sxth.w	lr, r2
   1caa6:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1caaa:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1caae:	ab24      	add	r3, sp, #144	; 0x90
   1cab0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1cab4:	3001      	adds	r0, #1
   1cab6:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1caba:	440b      	add	r3, r1
   1cabc:	ebbb 0303 	subs.w	r3, fp, r3
   1cac0:	bf34      	ite	cc
   1cac2:	2201      	movcc	r2, #1
   1cac4:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1cac6:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1cac8:	bf18      	it	ne
   1caca:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1cacc:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1cad0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1cad4:	9b01      	ldr	r3, [sp, #4]
   1cad6:	b242      	sxtb	r2, r0
   1cad8:	429a      	cmp	r2, r3
   1cada:	dbe2      	blt.n	1caa2 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1cadc:	1a73      	subs	r3, r6, r1
   1cade:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1cae0:	4629      	mov	r1, r5
   1cae2:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1cae4:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1cae6:	f7ff fe24 	bl	1c732 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1caea:	ab24      	add	r3, sp, #144	; 0x90
   1caec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1caf0:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1caf2:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1caf6:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1cafa:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1cafc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1cb00:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1cb02:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1cb06:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1cb08:	f7ff fe13 	bl	1c732 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1cb0c:	e7a8      	b.n	1ca60 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1cb0e:	ab24      	add	r3, sp, #144	; 0x90
   1cb10:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1cb12:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1cb16:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1cb18:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1cb1c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1cb20:	e7d8      	b.n	1cad4 <uECC_vli_mmod+0xe2>

0001cb22 <uECC_vli_modMult_fast>:
{
   1cb22:	b530      	push	{r4, r5, lr}
   1cb24:	461c      	mov	r4, r3
   1cb26:	b091      	sub	sp, #68	; 0x44
   1cb28:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1cb2a:	f993 3000 	ldrsb.w	r3, [r3]
   1cb2e:	4668      	mov	r0, sp
   1cb30:	f7ff fe28 	bl	1c784 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1cb34:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1cb38:	4669      	mov	r1, sp
   1cb3a:	4628      	mov	r0, r5
   1cb3c:	4798      	blx	r3
}
   1cb3e:	b011      	add	sp, #68	; 0x44
   1cb40:	bd30      	pop	{r4, r5, pc}

0001cb42 <uECC_vli_modSquare_fast>:
{
   1cb42:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1cb44:	460a      	mov	r2, r1
   1cb46:	f7ff bfec 	b.w	1cb22 <uECC_vli_modMult_fast>

0001cb4a <double_jacobian_default>:
{
   1cb4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1cb4e:	f993 6000 	ldrsb.w	r6, [r3]
{
   1cb52:	b092      	sub	sp, #72	; 0x48
   1cb54:	4604      	mov	r4, r0
   1cb56:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1cb58:	4610      	mov	r0, r2
   1cb5a:	4631      	mov	r1, r6
{
   1cb5c:	4615      	mov	r5, r2
   1cb5e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1cb60:	f7ff fe93 	bl	1c88a <uECC_vli_isZero>
   1cb64:	2800      	cmp	r0, #0
   1cb66:	f040 8091 	bne.w	1cc8c <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1cb6a:	463a      	mov	r2, r7
   1cb6c:	4649      	mov	r1, r9
   1cb6e:	a802      	add	r0, sp, #8
   1cb70:	f7ff ffe7 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1cb74:	463b      	mov	r3, r7
   1cb76:	aa02      	add	r2, sp, #8
   1cb78:	4621      	mov	r1, r4
   1cb7a:	a80a      	add	r0, sp, #40	; 0x28
   1cb7c:	f7ff ffd1 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1cb80:	a902      	add	r1, sp, #8
   1cb82:	4608      	mov	r0, r1
   1cb84:	463a      	mov	r2, r7
   1cb86:	f7ff ffdc 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1cb8a:	463b      	mov	r3, r7
   1cb8c:	462a      	mov	r2, r5
   1cb8e:	4649      	mov	r1, r9
   1cb90:	4648      	mov	r0, r9
   1cb92:	f7ff ffc6 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1cb96:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1cb9a:	463a      	mov	r2, r7
   1cb9c:	4629      	mov	r1, r5
   1cb9e:	4628      	mov	r0, r5
   1cba0:	f7ff ffcf 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1cba4:	4643      	mov	r3, r8
   1cba6:	462a      	mov	r2, r5
   1cba8:	4621      	mov	r1, r4
   1cbaa:	4620      	mov	r0, r4
   1cbac:	9600      	str	r6, [sp, #0]
   1cbae:	f7ff fef5 	bl	1c99c <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1cbb2:	4643      	mov	r3, r8
   1cbb4:	462a      	mov	r2, r5
   1cbb6:	4629      	mov	r1, r5
   1cbb8:	4628      	mov	r0, r5
   1cbba:	9600      	str	r6, [sp, #0]
   1cbbc:	f7ff feee 	bl	1c99c <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1cbc0:	4643      	mov	r3, r8
   1cbc2:	462a      	mov	r2, r5
   1cbc4:	4621      	mov	r1, r4
   1cbc6:	4628      	mov	r0, r5
   1cbc8:	9600      	str	r6, [sp, #0]
   1cbca:	f7ff ff00 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1cbce:	463b      	mov	r3, r7
   1cbd0:	462a      	mov	r2, r5
   1cbd2:	4621      	mov	r1, r4
   1cbd4:	4620      	mov	r0, r4
   1cbd6:	f7ff ffa4 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1cbda:	4643      	mov	r3, r8
   1cbdc:	4622      	mov	r2, r4
   1cbde:	4621      	mov	r1, r4
   1cbe0:	4628      	mov	r0, r5
   1cbe2:	9600      	str	r6, [sp, #0]
   1cbe4:	f7ff feda 	bl	1c99c <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1cbe8:	4643      	mov	r3, r8
   1cbea:	9600      	str	r6, [sp, #0]
   1cbec:	462a      	mov	r2, r5
   1cbee:	4621      	mov	r1, r4
   1cbf0:	4620      	mov	r0, r4
   1cbf2:	f7ff fed3 	bl	1c99c <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1cbf6:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1cbf8:	07db      	lsls	r3, r3, #31
   1cbfa:	d54a      	bpl.n	1cc92 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1cbfc:	4633      	mov	r3, r6
   1cbfe:	4642      	mov	r2, r8
   1cc00:	4621      	mov	r1, r4
   1cc02:	4620      	mov	r0, r4
   1cc04:	f7ff fd7d 	bl	1c702 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1cc08:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1cc0a:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1cc0c:	4620      	mov	r0, r4
   1cc0e:	f7ff fd90 	bl	1c732 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1cc12:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1cc16:	3b01      	subs	r3, #1
   1cc18:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1cc1c:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1cc20:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1cc24:	463a      	mov	r2, r7
   1cc26:	4621      	mov	r1, r4
   1cc28:	4628      	mov	r0, r5
   1cc2a:	f7ff ff8a 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1cc2e:	4643      	mov	r3, r8
   1cc30:	aa0a      	add	r2, sp, #40	; 0x28
   1cc32:	4629      	mov	r1, r5
   1cc34:	4628      	mov	r0, r5
   1cc36:	9600      	str	r6, [sp, #0]
   1cc38:	f7ff fec9 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1cc3c:	4643      	mov	r3, r8
   1cc3e:	aa0a      	add	r2, sp, #40	; 0x28
   1cc40:	4629      	mov	r1, r5
   1cc42:	4628      	mov	r0, r5
   1cc44:	9600      	str	r6, [sp, #0]
   1cc46:	f7ff fec2 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1cc4a:	a90a      	add	r1, sp, #40	; 0x28
   1cc4c:	4608      	mov	r0, r1
   1cc4e:	4643      	mov	r3, r8
   1cc50:	462a      	mov	r2, r5
   1cc52:	9600      	str	r6, [sp, #0]
   1cc54:	f7ff febb 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1cc58:	463b      	mov	r3, r7
   1cc5a:	aa0a      	add	r2, sp, #40	; 0x28
   1cc5c:	4621      	mov	r1, r4
   1cc5e:	4620      	mov	r0, r4
   1cc60:	f7ff ff5f 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1cc64:	aa02      	add	r2, sp, #8
   1cc66:	4643      	mov	r3, r8
   1cc68:	4610      	mov	r0, r2
   1cc6a:	4621      	mov	r1, r4
   1cc6c:	9600      	str	r6, [sp, #0]
   1cc6e:	f7ff feae 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1cc72:	4632      	mov	r2, r6
   1cc74:	4629      	mov	r1, r5
   1cc76:	4620      	mov	r0, r4
   1cc78:	f7ff fe41 	bl	1c8fe <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1cc7c:	4649      	mov	r1, r9
   1cc7e:	4628      	mov	r0, r5
   1cc80:	f7ff fe3d 	bl	1c8fe <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1cc84:	a902      	add	r1, sp, #8
   1cc86:	4648      	mov	r0, r9
   1cc88:	f7ff fe39 	bl	1c8fe <uECC_vli_set>
}
   1cc8c:	b012      	add	sp, #72	; 0x48
   1cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1cc92:	4631      	mov	r1, r6
   1cc94:	4620      	mov	r0, r4
   1cc96:	f7ff fd4c 	bl	1c732 <uECC_vli_rshift1>
   1cc9a:	e7c3      	b.n	1cc24 <double_jacobian_default+0xda>

0001cc9c <x_side_default>:
{
   1cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cca0:	4615      	mov	r5, r2
   1cca2:	b08a      	sub	sp, #40	; 0x28
   1cca4:	4604      	mov	r4, r0
   1cca6:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1cca8:	221c      	movs	r2, #28
   1ccaa:	2100      	movs	r1, #0
   1ccac:	a803      	add	r0, sp, #12
   1ccae:	f000 fdae 	bl	1d80e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1ccb2:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1ccb4:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1ccb8:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1ccba:	462a      	mov	r2, r5
   1ccbc:	4631      	mov	r1, r6
   1ccbe:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1ccc0:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1ccc2:	f7ff ff3e 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1ccc6:	463b      	mov	r3, r7
   1ccc8:	aa02      	add	r2, sp, #8
   1ccca:	4621      	mov	r1, r4
   1cccc:	4620      	mov	r0, r4
   1ccce:	f8cd 8000 	str.w	r8, [sp]
   1ccd2:	f7ff fe7c 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1ccd6:	462b      	mov	r3, r5
   1ccd8:	4632      	mov	r2, r6
   1ccda:	4621      	mov	r1, r4
   1ccdc:	4620      	mov	r0, r4
   1ccde:	f7ff ff20 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1cce2:	f8cd 8000 	str.w	r8, [sp]
   1cce6:	463b      	mov	r3, r7
   1cce8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1ccec:	4621      	mov	r1, r4
   1ccee:	4620      	mov	r0, r4
   1ccf0:	f7ff fe54 	bl	1c99c <uECC_vli_modAdd>
}
   1ccf4:	b00a      	add	sp, #40	; 0x28
   1ccf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ccfa <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1ccfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ccfe:	b09a      	sub	sp, #104	; 0x68
   1cd00:	4616      	mov	r6, r2
   1cd02:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1cd06:	4644      	mov	r4, r8
{
   1cd08:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1cd0a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1cd0e:	9500      	str	r5, [sp, #0]
{
   1cd10:	4607      	mov	r7, r0
   1cd12:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1cd14:	4623      	mov	r3, r4
   1cd16:	4602      	mov	r2, r0
   1cd18:	4631      	mov	r1, r6
   1cd1a:	a802      	add	r0, sp, #8
   1cd1c:	f7ff fe57 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1cd20:	a902      	add	r1, sp, #8
   1cd22:	4642      	mov	r2, r8
   1cd24:	4608      	mov	r0, r1
   1cd26:	f7ff ff0c 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1cd2a:	4643      	mov	r3, r8
   1cd2c:	aa02      	add	r2, sp, #8
   1cd2e:	4639      	mov	r1, r7
   1cd30:	4638      	mov	r0, r7
   1cd32:	f7ff fef6 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1cd36:	4643      	mov	r3, r8
   1cd38:	aa02      	add	r2, sp, #8
   1cd3a:	4631      	mov	r1, r6
   1cd3c:	4630      	mov	r0, r6
   1cd3e:	f7ff fef0 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1cd42:	4623      	mov	r3, r4
   1cd44:	4652      	mov	r2, sl
   1cd46:	4649      	mov	r1, r9
   1cd48:	a802      	add	r0, sp, #8
   1cd4a:	9500      	str	r5, [sp, #0]
   1cd4c:	f7ff fe26 	bl	1c99c <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1cd50:	4623      	mov	r3, r4
   1cd52:	4652      	mov	r2, sl
   1cd54:	4649      	mov	r1, r9
   1cd56:	4648      	mov	r0, r9
   1cd58:	9500      	str	r5, [sp, #0]
   1cd5a:	f7ff fe38 	bl	1c9ce <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1cd5e:	4623      	mov	r3, r4
   1cd60:	463a      	mov	r2, r7
   1cd62:	4631      	mov	r1, r6
   1cd64:	a80a      	add	r0, sp, #40	; 0x28
   1cd66:	9500      	str	r5, [sp, #0]
   1cd68:	f7ff fe31 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1cd6c:	4643      	mov	r3, r8
   1cd6e:	aa0a      	add	r2, sp, #40	; 0x28
   1cd70:	4651      	mov	r1, sl
   1cd72:	4650      	mov	r0, sl
   1cd74:	f7ff fed5 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1cd78:	4623      	mov	r3, r4
   1cd7a:	4632      	mov	r2, r6
   1cd7c:	4639      	mov	r1, r7
   1cd7e:	a80a      	add	r0, sp, #40	; 0x28
   1cd80:	9500      	str	r5, [sp, #0]
   1cd82:	f7ff fe0b 	bl	1c99c <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1cd86:	4642      	mov	r2, r8
   1cd88:	4649      	mov	r1, r9
   1cd8a:	4630      	mov	r0, r6
   1cd8c:	f7ff fed9 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1cd90:	4623      	mov	r3, r4
   1cd92:	aa0a      	add	r2, sp, #40	; 0x28
   1cd94:	4631      	mov	r1, r6
   1cd96:	4630      	mov	r0, r6
   1cd98:	9500      	str	r5, [sp, #0]
   1cd9a:	f7ff fe18 	bl	1c9ce <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1cd9e:	4623      	mov	r3, r4
   1cda0:	4632      	mov	r2, r6
   1cda2:	4639      	mov	r1, r7
   1cda4:	a812      	add	r0, sp, #72	; 0x48
   1cda6:	9500      	str	r5, [sp, #0]
   1cda8:	f7ff fe11 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1cdac:	4643      	mov	r3, r8
   1cdae:	aa12      	add	r2, sp, #72	; 0x48
   1cdb0:	4649      	mov	r1, r9
   1cdb2:	4648      	mov	r0, r9
   1cdb4:	f7ff feb5 	bl	1cb22 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1cdb8:	4623      	mov	r3, r4
   1cdba:	4652      	mov	r2, sl
   1cdbc:	4649      	mov	r1, r9
   1cdbe:	4648      	mov	r0, r9
   1cdc0:	9500      	str	r5, [sp, #0]
   1cdc2:	f7ff fe04 	bl	1c9ce <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1cdc6:	4642      	mov	r2, r8
   1cdc8:	a902      	add	r1, sp, #8
   1cdca:	a812      	add	r0, sp, #72	; 0x48
   1cdcc:	f7ff feb9 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1cdd0:	a912      	add	r1, sp, #72	; 0x48
   1cdd2:	4623      	mov	r3, r4
   1cdd4:	aa0a      	add	r2, sp, #40	; 0x28
   1cdd6:	4608      	mov	r0, r1
   1cdd8:	9500      	str	r5, [sp, #0]
   1cdda:	f7ff fdf8 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1cdde:	4623      	mov	r3, r4
   1cde0:	463a      	mov	r2, r7
   1cde2:	a912      	add	r1, sp, #72	; 0x48
   1cde4:	a80a      	add	r0, sp, #40	; 0x28
   1cde6:	9500      	str	r5, [sp, #0]
   1cde8:	f7ff fdf1 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1cdec:	a90a      	add	r1, sp, #40	; 0x28
   1cdee:	4643      	mov	r3, r8
   1cdf0:	aa02      	add	r2, sp, #8
   1cdf2:	4608      	mov	r0, r1
   1cdf4:	f7ff fe95 	bl	1cb22 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1cdf8:	4623      	mov	r3, r4
   1cdfa:	4652      	mov	r2, sl
   1cdfc:	a90a      	add	r1, sp, #40	; 0x28
   1cdfe:	4650      	mov	r0, sl
   1ce00:	9500      	str	r5, [sp, #0]
   1ce02:	f7ff fde4 	bl	1c9ce <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1ce06:	462a      	mov	r2, r5
   1ce08:	a912      	add	r1, sp, #72	; 0x48
   1ce0a:	4638      	mov	r0, r7
   1ce0c:	f7ff fd77 	bl	1c8fe <uECC_vli_set>
}
   1ce10:	b01a      	add	sp, #104	; 0x68
   1ce12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ce16 <uECC_vli_modInv>:
{
   1ce16:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce18:	460f      	mov	r7, r1
   1ce1a:	b0a1      	sub	sp, #132	; 0x84
   1ce1c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1ce1e:	4619      	mov	r1, r3
   1ce20:	4638      	mov	r0, r7
{
   1ce22:	4615      	mov	r5, r2
   1ce24:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1ce26:	f7ff fd30 	bl	1c88a <uECC_vli_isZero>
   1ce2a:	b120      	cbz	r0, 1ce36 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1ce2c:	4630      	mov	r0, r6
   1ce2e:	f7ff fd21 	bl	1c874 <uECC_vli_clear>
}
   1ce32:	b021      	add	sp, #132	; 0x84
   1ce34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1ce36:	4622      	mov	r2, r4
   1ce38:	4639      	mov	r1, r7
   1ce3a:	4668      	mov	r0, sp
   1ce3c:	f7ff fd5f 	bl	1c8fe <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1ce40:	4629      	mov	r1, r5
   1ce42:	a808      	add	r0, sp, #32
   1ce44:	f7ff fd5b 	bl	1c8fe <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1ce48:	a810      	add	r0, sp, #64	; 0x40
   1ce4a:	4621      	mov	r1, r4
   1ce4c:	f7ff fd12 	bl	1c874 <uECC_vli_clear>
	u[0] = 1;
   1ce50:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1ce52:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1ce54:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1ce56:	f7ff fd0d 	bl	1c874 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1ce5a:	4622      	mov	r2, r4
   1ce5c:	a908      	add	r1, sp, #32
   1ce5e:	4668      	mov	r0, sp
   1ce60:	f7ff fd59 	bl	1c916 <uECC_vli_cmp_unsafe>
   1ce64:	b928      	cbnz	r0, 1ce72 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1ce66:	4622      	mov	r2, r4
   1ce68:	a910      	add	r1, sp, #64	; 0x40
   1ce6a:	4630      	mov	r0, r6
   1ce6c:	f7ff fd47 	bl	1c8fe <uECC_vli_set>
   1ce70:	e7df      	b.n	1ce32 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1ce72:	9b00      	ldr	r3, [sp, #0]
   1ce74:	07da      	lsls	r2, r3, #31
   1ce76:	d409      	bmi.n	1ce8c <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1ce78:	4621      	mov	r1, r4
   1ce7a:	4668      	mov	r0, sp
   1ce7c:	f7ff fc59 	bl	1c732 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1ce80:	4622      	mov	r2, r4
   1ce82:	4629      	mov	r1, r5
   1ce84:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1ce86:	f7ff fc61 	bl	1c74c <vli_modInv_update>
   1ce8a:	e7e6      	b.n	1ce5a <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1ce8c:	9b08      	ldr	r3, [sp, #32]
   1ce8e:	07db      	lsls	r3, r3, #31
   1ce90:	d407      	bmi.n	1cea2 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1ce92:	4621      	mov	r1, r4
   1ce94:	a808      	add	r0, sp, #32
   1ce96:	f7ff fc4c 	bl	1c732 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1ce9a:	4622      	mov	r2, r4
   1ce9c:	4629      	mov	r1, r5
   1ce9e:	a818      	add	r0, sp, #96	; 0x60
   1cea0:	e7f1      	b.n	1ce86 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1cea2:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1cea4:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1cea6:	dd1c      	ble.n	1cee2 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1cea8:	aa08      	add	r2, sp, #32
   1ceaa:	4669      	mov	r1, sp
   1ceac:	4668      	mov	r0, sp
   1ceae:	f7ff fd5c 	bl	1c96a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1ceb2:	4621      	mov	r1, r4
   1ceb4:	4668      	mov	r0, sp
   1ceb6:	f7ff fc3c 	bl	1c732 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1ceba:	4622      	mov	r2, r4
   1cebc:	a918      	add	r1, sp, #96	; 0x60
   1cebe:	a810      	add	r0, sp, #64	; 0x40
   1cec0:	f7ff fd29 	bl	1c916 <uECC_vli_cmp_unsafe>
   1cec4:	2800      	cmp	r0, #0
   1cec6:	da05      	bge.n	1ced4 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1cec8:	a910      	add	r1, sp, #64	; 0x40
   1ceca:	4623      	mov	r3, r4
   1cecc:	462a      	mov	r2, r5
   1cece:	4608      	mov	r0, r1
   1ced0:	f7ff fc17 	bl	1c702 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1ced4:	a910      	add	r1, sp, #64	; 0x40
   1ced6:	4623      	mov	r3, r4
   1ced8:	aa18      	add	r2, sp, #96	; 0x60
   1ceda:	4608      	mov	r0, r1
   1cedc:	f7ff fd45 	bl	1c96a <uECC_vli_sub>
   1cee0:	e7ce      	b.n	1ce80 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1cee2:	a908      	add	r1, sp, #32
   1cee4:	466a      	mov	r2, sp
   1cee6:	4608      	mov	r0, r1
   1cee8:	f7ff fd3f 	bl	1c96a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1ceec:	4621      	mov	r1, r4
   1ceee:	a808      	add	r0, sp, #32
   1cef0:	f7ff fc1f 	bl	1c732 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1cef4:	4622      	mov	r2, r4
   1cef6:	a910      	add	r1, sp, #64	; 0x40
   1cef8:	a818      	add	r0, sp, #96	; 0x60
   1cefa:	f7ff fd0c 	bl	1c916 <uECC_vli_cmp_unsafe>
   1cefe:	2800      	cmp	r0, #0
   1cf00:	da05      	bge.n	1cf0e <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1cf02:	a918      	add	r1, sp, #96	; 0x60
   1cf04:	4623      	mov	r3, r4
   1cf06:	462a      	mov	r2, r5
   1cf08:	4608      	mov	r0, r1
   1cf0a:	f7ff fbfa 	bl	1c702 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1cf0e:	a918      	add	r1, sp, #96	; 0x60
   1cf10:	4623      	mov	r3, r4
   1cf12:	aa10      	add	r2, sp, #64	; 0x40
   1cf14:	4608      	mov	r0, r1
   1cf16:	f7ff fd28 	bl	1c96a <uECC_vli_sub>
   1cf1a:	e7be      	b.n	1ce9a <uECC_vli_modInv+0x84>

0001cf1c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1cf1c:	7809      	ldrb	r1, [r1, #0]
   1cf1e:	0049      	lsls	r1, r1, #1
   1cf20:	b249      	sxtb	r1, r1
   1cf22:	f7ff bcb2 	b.w	1c88a <uECC_vli_isZero>

0001cf26 <apply_z>:
{
   1cf26:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf28:	4615      	mov	r5, r2
   1cf2a:	b089      	sub	sp, #36	; 0x24
   1cf2c:	461c      	mov	r4, r3
   1cf2e:	4607      	mov	r7, r0
   1cf30:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1cf32:	461a      	mov	r2, r3
   1cf34:	4629      	mov	r1, r5
   1cf36:	4668      	mov	r0, sp
   1cf38:	f7ff fe03 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1cf3c:	4623      	mov	r3, r4
   1cf3e:	466a      	mov	r2, sp
   1cf40:	4639      	mov	r1, r7
   1cf42:	4638      	mov	r0, r7
   1cf44:	f7ff fded 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1cf48:	4623      	mov	r3, r4
   1cf4a:	462a      	mov	r2, r5
   1cf4c:	4669      	mov	r1, sp
   1cf4e:	4668      	mov	r0, sp
   1cf50:	f7ff fde7 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1cf54:	4623      	mov	r3, r4
   1cf56:	466a      	mov	r2, sp
   1cf58:	4631      	mov	r1, r6
   1cf5a:	4630      	mov	r0, r6
   1cf5c:	f7ff fde1 	bl	1cb22 <uECC_vli_modMult_fast>
}
   1cf60:	b009      	add	sp, #36	; 0x24
   1cf62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cf64 <XYcZ_add>:
{
   1cf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf68:	b08a      	sub	sp, #40	; 0x28
   1cf6a:	4614      	mov	r4, r2
   1cf6c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1cf70:	4655      	mov	r5, sl
{
   1cf72:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1cf74:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1cf78:	9600      	str	r6, [sp, #0]
{
   1cf7a:	4680      	mov	r8, r0
   1cf7c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1cf7e:	462b      	mov	r3, r5
   1cf80:	4602      	mov	r2, r0
   1cf82:	4621      	mov	r1, r4
   1cf84:	a802      	add	r0, sp, #8
   1cf86:	f7ff fd22 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1cf8a:	a902      	add	r1, sp, #8
   1cf8c:	4652      	mov	r2, sl
   1cf8e:	4608      	mov	r0, r1
   1cf90:	f7ff fdd7 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1cf94:	4653      	mov	r3, sl
   1cf96:	aa02      	add	r2, sp, #8
   1cf98:	4641      	mov	r1, r8
   1cf9a:	4640      	mov	r0, r8
   1cf9c:	f7ff fdc1 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1cfa0:	4653      	mov	r3, sl
   1cfa2:	aa02      	add	r2, sp, #8
   1cfa4:	4621      	mov	r1, r4
   1cfa6:	4620      	mov	r0, r4
   1cfa8:	f7ff fdbb 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1cfac:	462b      	mov	r3, r5
   1cfae:	464a      	mov	r2, r9
   1cfb0:	4639      	mov	r1, r7
   1cfb2:	4638      	mov	r0, r7
   1cfb4:	9600      	str	r6, [sp, #0]
   1cfb6:	f7ff fd0a 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1cfba:	4652      	mov	r2, sl
   1cfbc:	4639      	mov	r1, r7
   1cfbe:	a802      	add	r0, sp, #8
   1cfc0:	f7ff fdbf 	bl	1cb42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1cfc4:	a902      	add	r1, sp, #8
   1cfc6:	462b      	mov	r3, r5
   1cfc8:	4642      	mov	r2, r8
   1cfca:	4608      	mov	r0, r1
   1cfcc:	9600      	str	r6, [sp, #0]
   1cfce:	f7ff fcfe 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1cfd2:	a902      	add	r1, sp, #8
   1cfd4:	462b      	mov	r3, r5
   1cfd6:	4622      	mov	r2, r4
   1cfd8:	4608      	mov	r0, r1
   1cfda:	9600      	str	r6, [sp, #0]
   1cfdc:	f7ff fcf7 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1cfe0:	462b      	mov	r3, r5
   1cfe2:	4642      	mov	r2, r8
   1cfe4:	4621      	mov	r1, r4
   1cfe6:	4620      	mov	r0, r4
   1cfe8:	9600      	str	r6, [sp, #0]
   1cfea:	f7ff fcf0 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1cfee:	4653      	mov	r3, sl
   1cff0:	4622      	mov	r2, r4
   1cff2:	4649      	mov	r1, r9
   1cff4:	4648      	mov	r0, r9
   1cff6:	f7ff fd94 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1cffa:	462b      	mov	r3, r5
   1cffc:	aa02      	add	r2, sp, #8
   1cffe:	4641      	mov	r1, r8
   1d000:	4620      	mov	r0, r4
   1d002:	9600      	str	r6, [sp, #0]
   1d004:	f7ff fce3 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1d008:	4653      	mov	r3, sl
   1d00a:	4622      	mov	r2, r4
   1d00c:	4639      	mov	r1, r7
   1d00e:	4638      	mov	r0, r7
   1d010:	f7ff fd87 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1d014:	462b      	mov	r3, r5
   1d016:	464a      	mov	r2, r9
   1d018:	4639      	mov	r1, r7
   1d01a:	4638      	mov	r0, r7
   1d01c:	9600      	str	r6, [sp, #0]
   1d01e:	f7ff fcd6 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1d022:	4632      	mov	r2, r6
   1d024:	a902      	add	r1, sp, #8
   1d026:	4620      	mov	r0, r4
   1d028:	f7ff fc69 	bl	1c8fe <uECC_vli_set>
}
   1d02c:	b00a      	add	sp, #40	; 0x28
   1d02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d032 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1d032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d036:	b0b1      	sub	sp, #196	; 0xc4
   1d038:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1d03c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1d03e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1d042:	a818      	add	r0, sp, #96	; 0x60
{
   1d044:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1d046:	463a      	mov	r2, r7
{
   1d048:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1d04a:	f7ff fc58 	bl	1c8fe <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1d04e:	00bb      	lsls	r3, r7, #2
   1d050:	9305      	str	r3, [sp, #20]
   1d052:	9b04      	ldr	r3, [sp, #16]
   1d054:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1d058:	4619      	mov	r1, r3
   1d05a:	a828      	add	r0, sp, #160	; 0xa0
   1d05c:	9302      	str	r3, [sp, #8]
   1d05e:	f7ff fc4e 	bl	1c8fe <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1d062:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1d066:	2e00      	cmp	r6, #0
   1d068:	f000 8088 	beq.w	1d17c <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1d06c:	462a      	mov	r2, r5
   1d06e:	4631      	mov	r1, r6
   1d070:	a808      	add	r0, sp, #32
   1d072:	f7ff fc44 	bl	1c8fe <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1d076:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1d07a:	462a      	mov	r2, r5
   1d07c:	a918      	add	r1, sp, #96	; 0x60
   1d07e:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1d080:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1d084:	f7ff fc3b 	bl	1c8fe <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1d088:	a928      	add	r1, sp, #160	; 0xa0
   1d08a:	4648      	mov	r0, r9
   1d08c:	f7ff fc37 	bl	1c8fe <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1d090:	4623      	mov	r3, r4
   1d092:	aa08      	add	r2, sp, #32
   1d094:	a928      	add	r1, sp, #160	; 0xa0
   1d096:	a818      	add	r0, sp, #96	; 0x60
   1d098:	f7ff ff45 	bl	1cf26 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1d09c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1d0a0:	4623      	mov	r3, r4
   1d0a2:	aa08      	add	r2, sp, #32
   1d0a4:	a928      	add	r1, sp, #160	; 0xa0
   1d0a6:	a818      	add	r0, sp, #96	; 0x60
   1d0a8:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1d0aa:	4623      	mov	r3, r4
   1d0ac:	aa08      	add	r2, sp, #32
   1d0ae:	4649      	mov	r1, r9
   1d0b0:	4640      	mov	r0, r8
   1d0b2:	f7ff ff38 	bl	1cf26 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1d0b6:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1d0ba:	3d02      	subs	r5, #2
   1d0bc:	b22d      	sxth	r5, r5
   1d0be:	2d00      	cmp	r5, #0
   1d0c0:	dc63      	bgt.n	1d18a <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d0c2:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d0c6:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d0c8:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d0cc:	ab10      	add	r3, sp, #64	; 0x40
   1d0ce:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1d0d2:	43ed      	mvns	r5, r5
   1d0d4:	ab20      	add	r3, sp, #128	; 0x80
   1d0d6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1d0da:	f005 0501 	and.w	r5, r5, #1
   1d0de:	ab10      	add	r3, sp, #64	; 0x40
   1d0e0:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1d0e4:	ab20      	add	r3, sp, #128	; 0x80
   1d0e6:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d0ea:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d0ee:	462b      	mov	r3, r5
   1d0f0:	464a      	mov	r2, r9
   1d0f2:	4631      	mov	r1, r6
   1d0f4:	4640      	mov	r0, r8
   1d0f6:	f7ff fe00 	bl	1ccfa <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d0fa:	4653      	mov	r3, sl
   1d0fc:	aa10      	add	r2, sp, #64	; 0x40
   1d0fe:	a918      	add	r1, sp, #96	; 0x60
   1d100:	a808      	add	r0, sp, #32
   1d102:	9700      	str	r7, [sp, #0]
   1d104:	f7ff fc63 	bl	1c9ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1d108:	a908      	add	r1, sp, #32
   1d10a:	4623      	mov	r3, r4
   1d10c:	4632      	mov	r2, r6
   1d10e:	4608      	mov	r0, r1
   1d110:	f7ff fd07 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1d114:	a908      	add	r1, sp, #32
   1d116:	9a04      	ldr	r2, [sp, #16]
   1d118:	4623      	mov	r3, r4
   1d11a:	4608      	mov	r0, r1
   1d11c:	f7ff fd01 	bl	1cb22 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1d120:	a908      	add	r1, sp, #32
   1d122:	463b      	mov	r3, r7
   1d124:	4652      	mov	r2, sl
   1d126:	4608      	mov	r0, r1
   1d128:	f7ff fe75 	bl	1ce16 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1d12c:	a908      	add	r1, sp, #32
   1d12e:	9a02      	ldr	r2, [sp, #8]
   1d130:	4623      	mov	r3, r4
   1d132:	4608      	mov	r0, r1
   1d134:	f7ff fcf5 	bl	1cb22 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1d138:	a908      	add	r1, sp, #32
   1d13a:	4623      	mov	r3, r4
   1d13c:	4642      	mov	r2, r8
   1d13e:	4608      	mov	r0, r1
   1d140:	f7ff fcef 	bl	1cb22 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d144:	9400      	str	r4, [sp, #0]
   1d146:	4633      	mov	r3, r6
   1d148:	4642      	mov	r2, r8
   1d14a:	4629      	mov	r1, r5
   1d14c:	4648      	mov	r0, r9
   1d14e:	f7ff ff09 	bl	1cf64 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1d152:	4623      	mov	r3, r4
   1d154:	aa08      	add	r2, sp, #32
   1d156:	a920      	add	r1, sp, #128	; 0x80
   1d158:	a810      	add	r0, sp, #64	; 0x40
   1d15a:	f7ff fee4 	bl	1cf26 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1d15e:	9803      	ldr	r0, [sp, #12]
   1d160:	463a      	mov	r2, r7
   1d162:	a910      	add	r1, sp, #64	; 0x40
   1d164:	f7ff fbcb 	bl	1c8fe <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1d168:	9b03      	ldr	r3, [sp, #12]
   1d16a:	9c05      	ldr	r4, [sp, #20]
   1d16c:	4423      	add	r3, r4
   1d16e:	a920      	add	r1, sp, #128	; 0x80
   1d170:	4618      	mov	r0, r3
   1d172:	f7ff fbc4 	bl	1c8fe <uECC_vli_set>
}
   1d176:	b031      	add	sp, #196	; 0xc4
   1d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1d17c:	4629      	mov	r1, r5
   1d17e:	a808      	add	r0, sp, #32
   1d180:	f7ff fb78 	bl	1c874 <uECC_vli_clear>
		z[0] = 1;
   1d184:	2301      	movs	r3, #1
   1d186:	9308      	str	r3, [sp, #32]
   1d188:	e775      	b.n	1d076 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1d18a:	4629      	mov	r1, r5
   1d18c:	4650      	mov	r0, sl
   1d18e:	f7ff fb8b 	bl	1c8a8 <uECC_vli_testBit>
   1d192:	fab0 f680 	clz	r6, r0
   1d196:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d198:	f1c6 0101 	rsb	r1, r6, #1
   1d19c:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1d1a0:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1d1a4:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1d1a8:	4633      	mov	r3, r6
   1d1aa:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1d1ae:	465a      	mov	r2, fp
   1d1b0:	9400      	str	r4, [sp, #0]
   1d1b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d1b6:	f7ff fda0 	bl	1ccfa <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d1ba:	9907      	ldr	r1, [sp, #28]
   1d1bc:	9806      	ldr	r0, [sp, #24]
   1d1be:	9400      	str	r4, [sp, #0]
   1d1c0:	460b      	mov	r3, r1
   1d1c2:	4602      	mov	r2, r0
   1d1c4:	4631      	mov	r1, r6
   1d1c6:	4658      	mov	r0, fp
   1d1c8:	f7ff fecc 	bl	1cf64 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1d1cc:	3d01      	subs	r5, #1
   1d1ce:	e775      	b.n	1d0bc <EccPoint_mult+0x8a>

0001d1d0 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1d1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d1d4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1d1d8:	f119 081f 	adds.w	r8, r9, #31
{
   1d1dc:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d1de:	bf48      	it	mi
   1d1e0:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1d1e4:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d1e6:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d1ea:	3524      	adds	r5, #36	; 0x24
   1d1ec:	4601      	mov	r1, r0
{
   1d1ee:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d1f0:	4643      	mov	r3, r8
   1d1f2:	462a      	mov	r2, r5
   1d1f4:	4630      	mov	r0, r6
   1d1f6:	f7ff fa84 	bl	1c702 <uECC_vli_add>
   1d1fa:	4604      	mov	r4, r0
   1d1fc:	b990      	cbnz	r0, 1d224 <regularize_k+0x54>
   1d1fe:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1d202:	da06      	bge.n	1d212 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1d204:	4649      	mov	r1, r9
   1d206:	4630      	mov	r0, r6
   1d208:	f7ff fb4e 	bl	1c8a8 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1d20c:	1e04      	subs	r4, r0, #0
   1d20e:	bf18      	it	ne
   1d210:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1d212:	4643      	mov	r3, r8
   1d214:	462a      	mov	r2, r5
   1d216:	4631      	mov	r1, r6
   1d218:	4638      	mov	r0, r7
   1d21a:	f7ff fa72 	bl	1c702 <uECC_vli_add>

	return carry;
}
   1d21e:	4620      	mov	r0, r4
   1d220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d224:	2401      	movs	r4, #1
   1d226:	e7f4      	b.n	1d212 <regularize_k+0x42>

0001d228 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1d228:	b530      	push	{r4, r5, lr}
   1d22a:	4614      	mov	r4, r2
   1d22c:	b095      	sub	sp, #84	; 0x54
   1d22e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1d230:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1d232:	4623      	mov	r3, r4
{
   1d234:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1d236:	a904      	add	r1, sp, #16
   1d238:	9102      	str	r1, [sp, #8]
   1d23a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1d23c:	f7ff ffc8 	bl	1d1d0 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1d240:	fab0 f380 	clz	r3, r0
   1d244:	095b      	lsrs	r3, r3, #5
   1d246:	aa14      	add	r2, sp, #80	; 0x50
   1d248:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1d24c:	8863      	ldrh	r3, [r4, #2]
   1d24e:	9401      	str	r4, [sp, #4]
   1d250:	3301      	adds	r3, #1
   1d252:	b21b      	sxth	r3, r3
   1d254:	9300      	str	r3, [sp, #0]
   1d256:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1d25a:	2300      	movs	r3, #0
   1d25c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1d260:	4628      	mov	r0, r5
   1d262:	f7ff fee6 	bl	1d032 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1d266:	4621      	mov	r1, r4
   1d268:	4628      	mov	r0, r5
   1d26a:	f7ff fe57 	bl	1cf1c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1d26e:	fab0 f080 	clz	r0, r0
   1d272:	0940      	lsrs	r0, r0, #5
   1d274:	b015      	add	sp, #84	; 0x54
   1d276:	bd30      	pop	{r4, r5, pc}

0001d278 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1d278:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1d27a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1d27c:	1e4f      	subs	r7, r1, #1
   1d27e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1d280:	428c      	cmp	r4, r1
   1d282:	f105 0501 	add.w	r5, r5, #1
   1d286:	db00      	blt.n	1d28a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1d288:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1d28a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1d28c:	f023 0603 	bic.w	r6, r3, #3
   1d290:	f003 0303 	and.w	r3, r3, #3
   1d294:	5996      	ldr	r6, [r2, r6]
   1d296:	00db      	lsls	r3, r3, #3
   1d298:	fa26 f303 	lsr.w	r3, r6, r3
   1d29c:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1d29e:	e7ee      	b.n	1d27e <uECC_vli_nativeToBytes+0x6>

0001d2a0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2a2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1d2a4:	1cd1      	adds	r1, r2, #3
   1d2a6:	bf48      	it	mi
   1d2a8:	1d91      	addmi	r1, r2, #6
   1d2aa:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1d2ae:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1d2b0:	f7ff fae0 	bl	1c874 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1d2b4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1d2b6:	1e67      	subs	r7, r4, #1
   1d2b8:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1d2ba:	42a2      	cmp	r2, r4
   1d2bc:	f105 0501 	add.w	r5, r5, #1
   1d2c0:	db00      	blt.n	1d2c4 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1d2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1d2c4:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1d2c6:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1d2ca:	5cb2      	ldrb	r2, [r6, r2]
   1d2cc:	f003 0303 	and.w	r3, r3, #3
   1d2d0:	00db      	lsls	r3, r3, #3
   1d2d2:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1d2d6:	5842      	ldr	r2, [r0, r1]
   1d2d8:	431a      	orrs	r2, r3
   1d2da:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1d2dc:	e7ec      	b.n	1d2b8 <uECC_vli_bytesToNative+0x18>

0001d2de <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1d2de:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d2e0:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1d2e2:	f991 6000 	ldrsb.w	r6, [r1]
{
   1d2e6:	4605      	mov	r5, r0
   1d2e8:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1d2ea:	f7ff fe17 	bl	1cf1c <EccPoint_isZero>
   1d2ee:	bb28      	cbnz	r0, 1d33c <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1d2f0:	1d27      	adds	r7, r4, #4
   1d2f2:	4632      	mov	r2, r6
   1d2f4:	4629      	mov	r1, r5
   1d2f6:	4638      	mov	r0, r7
   1d2f8:	f7ff fb0d 	bl	1c916 <uECC_vli_cmp_unsafe>
   1d2fc:	2801      	cmp	r0, #1
   1d2fe:	d120      	bne.n	1d342 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1d300:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1d304:	4632      	mov	r2, r6
   1d306:	4638      	mov	r0, r7
   1d308:	f7ff fb05 	bl	1c916 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1d30c:	2801      	cmp	r0, #1
   1d30e:	d118      	bne.n	1d342 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1d310:	4622      	mov	r2, r4
   1d312:	4668      	mov	r0, sp
   1d314:	f7ff fc15 	bl	1cb42 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1d318:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1d31c:	4622      	mov	r2, r4
   1d31e:	4629      	mov	r1, r5
   1d320:	a808      	add	r0, sp, #32
   1d322:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1d324:	4632      	mov	r2, r6
   1d326:	a908      	add	r1, sp, #32
   1d328:	4668      	mov	r0, sp
   1d32a:	f7ff fb0b 	bl	1c944 <uECC_vli_equal>
   1d32e:	2800      	cmp	r0, #0
		return -3;
   1d330:	bf0c      	ite	eq
   1d332:	2000      	moveq	r0, #0
   1d334:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1d338:	b011      	add	sp, #68	; 0x44
   1d33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1d33c:	f04f 30ff 	mov.w	r0, #4294967295
   1d340:	e7fa      	b.n	1d338 <uECC_valid_point+0x5a>
		return -2;
   1d342:	f06f 0001 	mvn.w	r0, #1
   1d346:	e7f7      	b.n	1d338 <uECC_valid_point+0x5a>

0001d348 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1d348:	b570      	push	{r4, r5, r6, lr}
   1d34a:	460c      	mov	r4, r1
   1d34c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1d34e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1d350:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1d354:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1d356:	4601      	mov	r1, r0
   1d358:	4668      	mov	r0, sp
   1d35a:	f7ff ffa1 	bl	1d2a0 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1d35e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1d362:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1d366:	18a9      	adds	r1, r5, r2
   1d368:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1d36c:	f7ff ff98 	bl	1d2a0 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1d370:	2210      	movs	r2, #16
   1d372:	4631      	mov	r1, r6
   1d374:	4668      	mov	r0, sp
   1d376:	f7ff face 	bl	1c916 <uECC_vli_cmp_unsafe>
   1d37a:	b128      	cbz	r0, 1d388 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1d37c:	4621      	mov	r1, r4
   1d37e:	4668      	mov	r0, sp
   1d380:	f7ff ffad 	bl	1d2de <uECC_valid_point>
}
   1d384:	b010      	add	sp, #64	; 0x40
   1d386:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1d388:	f06f 0003 	mvn.w	r0, #3
   1d38c:	e7fa      	b.n	1d384 <uECC_valid_public_key+0x3c>

0001d38e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d38e:	78cb      	ldrb	r3, [r1, #3]
   1d390:	7802      	ldrb	r2, [r0, #0]
   1d392:	4053      	eors	r3, r2
   1d394:	7003      	strb	r3, [r0, #0]
   1d396:	884b      	ldrh	r3, [r1, #2]
   1d398:	7842      	ldrb	r2, [r0, #1]
   1d39a:	4053      	eors	r3, r2
   1d39c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d39e:	680a      	ldr	r2, [r1, #0]
   1d3a0:	7883      	ldrb	r3, [r0, #2]
   1d3a2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d3a6:	7083      	strb	r3, [r0, #2]
   1d3a8:	680a      	ldr	r2, [r1, #0]
   1d3aa:	78c3      	ldrb	r3, [r0, #3]
   1d3ac:	4053      	eors	r3, r2
   1d3ae:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d3b0:	79cb      	ldrb	r3, [r1, #7]
   1d3b2:	7902      	ldrb	r2, [r0, #4]
   1d3b4:	4053      	eors	r3, r2
   1d3b6:	7103      	strb	r3, [r0, #4]
   1d3b8:	88cb      	ldrh	r3, [r1, #6]
   1d3ba:	7942      	ldrb	r2, [r0, #5]
   1d3bc:	4053      	eors	r3, r2
   1d3be:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d3c0:	684a      	ldr	r2, [r1, #4]
   1d3c2:	7983      	ldrb	r3, [r0, #6]
   1d3c4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d3c8:	7183      	strb	r3, [r0, #6]
   1d3ca:	684a      	ldr	r2, [r1, #4]
   1d3cc:	79c3      	ldrb	r3, [r0, #7]
   1d3ce:	4053      	eors	r3, r2
   1d3d0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d3d2:	7acb      	ldrb	r3, [r1, #11]
   1d3d4:	7a02      	ldrb	r2, [r0, #8]
   1d3d6:	4053      	eors	r3, r2
   1d3d8:	7203      	strb	r3, [r0, #8]
   1d3da:	7a42      	ldrb	r2, [r0, #9]
   1d3dc:	894b      	ldrh	r3, [r1, #10]
   1d3de:	4053      	eors	r3, r2
   1d3e0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d3e2:	688a      	ldr	r2, [r1, #8]
   1d3e4:	7a83      	ldrb	r3, [r0, #10]
   1d3e6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d3ea:	7283      	strb	r3, [r0, #10]
   1d3ec:	688a      	ldr	r2, [r1, #8]
   1d3ee:	7ac3      	ldrb	r3, [r0, #11]
   1d3f0:	4053      	eors	r3, r2
   1d3f2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d3f4:	7bcb      	ldrb	r3, [r1, #15]
   1d3f6:	7b02      	ldrb	r2, [r0, #12]
   1d3f8:	4053      	eors	r3, r2
   1d3fa:	7303      	strb	r3, [r0, #12]
   1d3fc:	89cb      	ldrh	r3, [r1, #14]
   1d3fe:	7b42      	ldrb	r2, [r0, #13]
   1d400:	4053      	eors	r3, r2
   1d402:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d404:	68ca      	ldr	r2, [r1, #12]
   1d406:	7b83      	ldrb	r3, [r0, #14]
   1d408:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d40c:	7383      	strb	r3, [r0, #14]
   1d40e:	68ca      	ldr	r2, [r1, #12]
   1d410:	7bc3      	ldrb	r3, [r0, #15]
   1d412:	4053      	eors	r3, r2
   1d414:	73c3      	strb	r3, [r0, #15]
}
   1d416:	4770      	bx	lr

0001d418 <shift_rows>:
{
   1d418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d41a:	7802      	ldrb	r2, [r0, #0]
   1d41c:	f88d 2000 	strb.w	r2, [sp]
   1d420:	7942      	ldrb	r2, [r0, #5]
   1d422:	f88d 2001 	strb.w	r2, [sp, #1]
   1d426:	7a82      	ldrb	r2, [r0, #10]
   1d428:	f88d 2002 	strb.w	r2, [sp, #2]
   1d42c:	7bc2      	ldrb	r2, [r0, #15]
   1d42e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d432:	7902      	ldrb	r2, [r0, #4]
   1d434:	f88d 2004 	strb.w	r2, [sp, #4]
   1d438:	7a42      	ldrb	r2, [r0, #9]
   1d43a:	f88d 2005 	strb.w	r2, [sp, #5]
   1d43e:	7b82      	ldrb	r2, [r0, #14]
   1d440:	f88d 2006 	strb.w	r2, [sp, #6]
   1d444:	78c2      	ldrb	r2, [r0, #3]
   1d446:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d44a:	7a02      	ldrb	r2, [r0, #8]
   1d44c:	f88d 2008 	strb.w	r2, [sp, #8]
   1d450:	7b42      	ldrb	r2, [r0, #13]
   1d452:	f88d 2009 	strb.w	r2, [sp, #9]
   1d456:	7882      	ldrb	r2, [r0, #2]
   1d458:	f88d 200a 	strb.w	r2, [sp, #10]
   1d45c:	79c2      	ldrb	r2, [r0, #7]
   1d45e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d462:	7b02      	ldrb	r2, [r0, #12]
   1d464:	f88d 200c 	strb.w	r2, [sp, #12]
   1d468:	7842      	ldrb	r2, [r0, #1]
   1d46a:	7ac3      	ldrb	r3, [r0, #11]
   1d46c:	f88d 200d 	strb.w	r2, [sp, #13]
   1d470:	7982      	ldrb	r2, [r0, #6]
   1d472:	f88d 200e 	strb.w	r2, [sp, #14]
   1d476:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d47a:	2310      	movs	r3, #16
   1d47c:	466a      	mov	r2, sp
   1d47e:	4619      	mov	r1, r3
   1d480:	f7ff f87b 	bl	1c57a <_copy>
}
   1d484:	b005      	add	sp, #20
   1d486:	f85d fb04 	ldr.w	pc, [sp], #4

0001d48a <mult_row_column>:
{
   1d48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d48c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d48e:	7808      	ldrb	r0, [r1, #0]
{
   1d490:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d492:	f7ff f881 	bl	1c598 <_double_byte>
   1d496:	4605      	mov	r5, r0
   1d498:	7860      	ldrb	r0, [r4, #1]
   1d49a:	f7ff f87d 	bl	1c598 <_double_byte>
   1d49e:	78a2      	ldrb	r2, [r4, #2]
   1d4a0:	7863      	ldrb	r3, [r4, #1]
   1d4a2:	4053      	eors	r3, r2
   1d4a4:	78e2      	ldrb	r2, [r4, #3]
   1d4a6:	4053      	eors	r3, r2
   1d4a8:	405d      	eors	r5, r3
   1d4aa:	4045      	eors	r5, r0
   1d4ac:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d4ae:	7860      	ldrb	r0, [r4, #1]
   1d4b0:	7827      	ldrb	r7, [r4, #0]
   1d4b2:	f7ff f871 	bl	1c598 <_double_byte>
   1d4b6:	4605      	mov	r5, r0
   1d4b8:	78a0      	ldrb	r0, [r4, #2]
   1d4ba:	f7ff f86d 	bl	1c598 <_double_byte>
   1d4be:	78a3      	ldrb	r3, [r4, #2]
   1d4c0:	405f      	eors	r7, r3
   1d4c2:	78e3      	ldrb	r3, [r4, #3]
   1d4c4:	405f      	eors	r7, r3
   1d4c6:	407d      	eors	r5, r7
   1d4c8:	4045      	eors	r5, r0
   1d4ca:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d4cc:	78a0      	ldrb	r0, [r4, #2]
   1d4ce:	7865      	ldrb	r5, [r4, #1]
   1d4d0:	7827      	ldrb	r7, [r4, #0]
   1d4d2:	f7ff f861 	bl	1c598 <_double_byte>
   1d4d6:	406f      	eors	r7, r5
   1d4d8:	4605      	mov	r5, r0
   1d4da:	78e0      	ldrb	r0, [r4, #3]
   1d4dc:	f7ff f85c 	bl	1c598 <_double_byte>
   1d4e0:	78e3      	ldrb	r3, [r4, #3]
   1d4e2:	405f      	eors	r7, r3
   1d4e4:	407d      	eors	r5, r7
   1d4e6:	4045      	eors	r5, r0
   1d4e8:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d4ea:	7820      	ldrb	r0, [r4, #0]
   1d4ec:	f7ff f854 	bl	1c598 <_double_byte>
   1d4f0:	7863      	ldrb	r3, [r4, #1]
   1d4f2:	7825      	ldrb	r5, [r4, #0]
   1d4f4:	405d      	eors	r5, r3
   1d4f6:	78a3      	ldrb	r3, [r4, #2]
   1d4f8:	405d      	eors	r5, r3
   1d4fa:	4045      	eors	r5, r0
   1d4fc:	78e0      	ldrb	r0, [r4, #3]
   1d4fe:	f7ff f84b 	bl	1c598 <_double_byte>
   1d502:	b2ed      	uxtb	r5, r5
   1d504:	4045      	eors	r5, r0
   1d506:	70f5      	strb	r5, [r6, #3]
}
   1d508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d50a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1d50a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d50c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1d50e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d510:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1d514:	2b00      	cmp	r3, #0
   1d516:	bfb4      	ite	lt
   1d518:	2387      	movlt	r3, #135	; 0x87
   1d51a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d51c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d520:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d524:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d526:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d52a:	d002      	beq.n	1d532 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d52c:	7813      	ldrb	r3, [r2, #0]
   1d52e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d530:	e7f4      	b.n	1d51c <gf_double+0x12>
	}
}
   1d532:	bd10      	pop	{r4, pc}

0001d534 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d534:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d536:	b120      	cbz	r0, 1d542 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d538:	2258      	movs	r2, #88	; 0x58
   1d53a:	2100      	movs	r1, #0
   1d53c:	f7ff f82a 	bl	1c594 <_set>
   1d540:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d542:	bd08      	pop	{r3, pc}

0001d544 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d544:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d546:	4604      	mov	r4, r0
   1d548:	b188      	cbz	r0, 1d56e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d54a:	2210      	movs	r2, #16
   1d54c:	2100      	movs	r1, #0
   1d54e:	f7ff f821 	bl	1c594 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d552:	2210      	movs	r2, #16
   1d554:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d558:	2100      	movs	r1, #0
   1d55a:	f7ff f81b 	bl	1c594 <_set>
	s->leftover_offset = 0;
   1d55e:	2300      	movs	r3, #0
   1d560:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d562:	2200      	movs	r2, #0
   1d564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d568:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1d56c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d56e:	bd10      	pop	{r4, pc}

0001d570 <tc_cmac_setup>:
{
   1d570:	b570      	push	{r4, r5, r6, lr}
   1d572:	460d      	mov	r5, r1
   1d574:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d576:	4604      	mov	r4, r0
   1d578:	b310      	cbz	r0, 1d5c0 <tc_cmac_setup+0x50>
   1d57a:	b311      	cbz	r1, 1d5c2 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d57c:	2258      	movs	r2, #88	; 0x58
   1d57e:	2100      	movs	r1, #0
   1d580:	f7ff f808 	bl	1c594 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d584:	4629      	mov	r1, r5
	s->sched = sched;
   1d586:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d588:	4630      	mov	r0, r6
   1d58a:	f7f3 fe29 	bl	111e0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d58e:	2210      	movs	r2, #16
   1d590:	2100      	movs	r1, #0
   1d592:	4620      	mov	r0, r4
   1d594:	f7fe fffe 	bl	1c594 <_set>
	gf_double (s->K1, s->iv);
   1d598:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d59c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d59e:	4621      	mov	r1, r4
   1d5a0:	4620      	mov	r0, r4
   1d5a2:	f7f3 fe6f 	bl	11284 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d5a6:	4621      	mov	r1, r4
   1d5a8:	4628      	mov	r0, r5
   1d5aa:	f7ff ffae 	bl	1d50a <gf_double>
	gf_double (s->K2, s->K1);
   1d5ae:	4629      	mov	r1, r5
   1d5b0:	f104 0020 	add.w	r0, r4, #32
   1d5b4:	f7ff ffa9 	bl	1d50a <gf_double>
	tc_cmac_init(s);
   1d5b8:	4620      	mov	r0, r4
   1d5ba:	f7ff ffc3 	bl	1d544 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d5be:	2001      	movs	r0, #1
}
   1d5c0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d5c2:	4608      	mov	r0, r1
   1d5c4:	e7fc      	b.n	1d5c0 <tc_cmac_setup+0x50>

0001d5c6 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5ca:	460d      	mov	r5, r1
   1d5cc:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d5ce:	4604      	mov	r4, r0
   1d5d0:	2800      	cmp	r0, #0
   1d5d2:	d062      	beq.n	1d69a <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d5d4:	b912      	cbnz	r2, 1d5dc <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1d5d6:	2001      	movs	r0, #1
}
   1d5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1d5dc:	2900      	cmp	r1, #0
   1d5de:	d05c      	beq.n	1d69a <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1d5e0:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1d5e4:	ea50 0301 	orrs.w	r3, r0, r1
   1d5e8:	d057      	beq.n	1d69a <tc_cmac_update+0xd4>
	s->countdown--;
   1d5ea:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1d5ee:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1d5f2:	f141 33ff 	adc.w	r3, r1, #4294967295
   1d5f6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d5fa:	f1b8 0f00 	cmp.w	r8, #0
   1d5fe:	d02a      	beq.n	1d656 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d600:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1d604:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1d608:	42be      	cmp	r6, r7
   1d60a:	4420      	add	r0, r4
   1d60c:	d208      	bcs.n	1d620 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d60e:	462a      	mov	r2, r5
   1d610:	4633      	mov	r3, r6
   1d612:	4631      	mov	r1, r6
   1d614:	f7fe ffb1 	bl	1c57a <_copy>
			s->leftover_offset += data_length;
   1d618:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1d61a:	4432      	add	r2, r6
   1d61c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1d61e:	e7da      	b.n	1d5d6 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1d620:	463b      	mov	r3, r7
   1d622:	462a      	mov	r2, r5
   1d624:	4639      	mov	r1, r7
   1d626:	f7fe ffa8 	bl	1c57a <_copy>
		data_length -= remaining_space;
   1d62a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1d62c:	2300      	movs	r3, #0
   1d62e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1d630:	4446      	add	r6, r8
		data += remaining_space;
   1d632:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d634:	1e63      	subs	r3, r4, #1
   1d636:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1d63a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d63e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d642:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1d644:	ea82 0200 	eor.w	r2, r2, r0
   1d648:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d64a:	d1f6      	bne.n	1d63a <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d64c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d64e:	4621      	mov	r1, r4
   1d650:	4620      	mov	r0, r4
   1d652:	f7f3 fe17 	bl	11284 <tc_aes_encrypt>
   1d656:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1d65a:	2e10      	cmp	r6, #16
   1d65c:	d80a      	bhi.n	1d674 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1d65e:	2e00      	cmp	r6, #0
   1d660:	d0b9      	beq.n	1d5d6 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1d662:	4633      	mov	r3, r6
   1d664:	462a      	mov	r2, r5
   1d666:	4631      	mov	r1, r6
   1d668:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d66c:	f7fe ff85 	bl	1c57a <_copy>
		s->leftover_offset = data_length;
   1d670:	6466      	str	r6, [r4, #68]	; 0x44
   1d672:	e7b0      	b.n	1d5d6 <tc_cmac_update+0x10>
   1d674:	1e63      	subs	r3, r4, #1
   1d676:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1d678:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d67c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d680:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1d682:	ea82 0200 	eor.w	r2, r2, r0
   1d686:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d688:	d1f6      	bne.n	1d678 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d68a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d68c:	4621      	mov	r1, r4
   1d68e:	4620      	mov	r0, r4
   1d690:	f7f3 fdf8 	bl	11284 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1d694:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1d696:	3e10      	subs	r6, #16
   1d698:	e7df      	b.n	1d65a <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1d69a:	2000      	movs	r0, #0
   1d69c:	e79c      	b.n	1d5d8 <tc_cmac_update+0x12>

0001d69e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1d69e:	b570      	push	{r4, r5, r6, lr}
   1d6a0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d6a2:	4605      	mov	r5, r0
   1d6a4:	b1e8      	cbz	r0, 1d6e2 <tc_cmac_final+0x44>
   1d6a6:	b369      	cbz	r1, 1d704 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1d6a8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1d6aa:	2a10      	cmp	r2, #16
   1d6ac:	d11a      	bne.n	1d6e4 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1d6ae:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d6b0:	1e63      	subs	r3, r4, #1
   1d6b2:	3901      	subs	r1, #1
   1d6b4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d6b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d6bc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1d6c0:	4072      	eors	r2, r6
   1d6c2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d6c6:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d6c8:	ea82 0206 	eor.w	r2, r2, r6
   1d6cc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d6ce:	d1f3      	bne.n	1d6b8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1d6d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d6d2:	4621      	mov	r1, r4
   1d6d4:	4628      	mov	r0, r5
   1d6d6:	f7f3 fdd5 	bl	11284 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1d6da:	4620      	mov	r0, r4
   1d6dc:	f7ff ff2a 	bl	1d534 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1d6e0:	2001      	movs	r0, #1
}
   1d6e2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1d6e4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1d6e8:	2100      	movs	r1, #0
   1d6ea:	f1c2 0210 	rsb	r2, r2, #16
   1d6ee:	4420      	add	r0, r4
   1d6f0:	f7fe ff50 	bl	1c594 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d6f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d6f6:	4423      	add	r3, r4
   1d6f8:	2280      	movs	r2, #128	; 0x80
   1d6fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1d6fe:	f104 0120 	add.w	r1, r4, #32
   1d702:	e7d5      	b.n	1d6b0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1d704:	4608      	mov	r0, r1
   1d706:	e7ec      	b.n	1d6e2 <tc_cmac_final+0x44>

0001d708 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1d708:	2100      	movs	r1, #0
   1d70a:	2001      	movs	r0, #1
   1d70c:	f7f3 bf3c 	b.w	11588 <z_arm_fatal_error>

0001d710 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d710:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1d712:	6800      	ldr	r0, [r0, #0]
   1d714:	f7f3 bf38 	b.w	11588 <z_arm_fatal_error>

0001d718 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d718:	b508      	push	{r3, lr}
	handler();
   1d71a:	f7f3 ff6d 	bl	115f8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1d71e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1d722:	f7f4 b9ff 	b.w	11b24 <z_arm_exc_exit>

0001d726 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1d726:	3901      	subs	r1, #1
   1d728:	4603      	mov	r3, r0
   1d72a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d72e:	b90a      	cbnz	r2, 1d734 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1d730:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1d732:	4770      	bx	lr
		*d = *s;
   1d734:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1d738:	e7f7      	b.n	1d72a <strcpy+0x4>

0001d73a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1d73a:	b570      	push	{r4, r5, r6, lr}
   1d73c:	3901      	subs	r1, #1
   1d73e:	4605      	mov	r5, r0
   1d740:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1d742:	b142      	cbz	r2, 1d756 <strncpy+0x1c>
   1d744:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1d748:	1e56      	subs	r6, r2, #1
   1d74a:	b92b      	cbnz	r3, 1d758 <strncpy+0x1e>
   1d74c:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1d74e:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1d752:	42a2      	cmp	r2, r4
   1d754:	d1fb      	bne.n	1d74e <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1d756:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1d758:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1d75c:	4632      	mov	r2, r6
   1d75e:	e7ef      	b.n	1d740 <strncpy+0x6>

0001d760 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1d760:	4603      	mov	r3, r0
	size_t n = 0;
   1d762:	2000      	movs	r0, #0

	while (*s != '\0') {
   1d764:	5c1a      	ldrb	r2, [r3, r0]
   1d766:	b902      	cbnz	r2, 1d76a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d768:	4770      	bx	lr
		n++;
   1d76a:	3001      	adds	r0, #1
   1d76c:	e7fa      	b.n	1d764 <strlen+0x4>

0001d76e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1d76e:	4603      	mov	r3, r0
	size_t n = 0;
   1d770:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1d772:	5c1a      	ldrb	r2, [r3, r0]
   1d774:	b10a      	cbz	r2, 1d77a <strnlen+0xc>
   1d776:	4288      	cmp	r0, r1
   1d778:	d100      	bne.n	1d77c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1d77a:	4770      	bx	lr
		n++;
   1d77c:	3001      	adds	r0, #1
   1d77e:	e7f8      	b.n	1d772 <strnlen+0x4>

0001d780 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d780:	1e43      	subs	r3, r0, #1
   1d782:	3901      	subs	r1, #1
   1d784:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d788:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1d78c:	4282      	cmp	r2, r0
   1d78e:	d101      	bne.n	1d794 <strcmp+0x14>
   1d790:	2a00      	cmp	r2, #0
   1d792:	d1f7      	bne.n	1d784 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d794:	1a10      	subs	r0, r2, r0
   1d796:	4770      	bx	lr

0001d798 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d798:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d79a:	b15a      	cbz	r2, 1d7b4 <memcmp+0x1c>
   1d79c:	3901      	subs	r1, #1
   1d79e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d7a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d7a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1d7a8:	42a0      	cmp	r0, r4
   1d7aa:	d001      	beq.n	1d7b0 <memcmp+0x18>
   1d7ac:	429a      	cmp	r2, r3
   1d7ae:	d0f7      	beq.n	1d7a0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d7b0:	1ad0      	subs	r0, r2, r3
}
   1d7b2:	bd10      	pop	{r4, pc}
		return 0;
   1d7b4:	4610      	mov	r0, r2
   1d7b6:	e7fc      	b.n	1d7b2 <memcmp+0x1a>

0001d7b8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d7ba:	ea81 0400 	eor.w	r4, r1, r0
   1d7be:	07a5      	lsls	r5, r4, #30
   1d7c0:	4603      	mov	r3, r0
   1d7c2:	d00b      	beq.n	1d7dc <memcpy+0x24>
   1d7c4:	3b01      	subs	r3, #1
   1d7c6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d7c8:	4291      	cmp	r1, r2
   1d7ca:	d11b      	bne.n	1d804 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d7ce:	2a00      	cmp	r2, #0
   1d7d0:	d0fc      	beq.n	1d7cc <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d7d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d7d6:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1d7da:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1d7dc:	079c      	lsls	r4, r3, #30
   1d7de:	d1f6      	bne.n	1d7ce <memcpy+0x16>
   1d7e0:	f022 0403 	bic.w	r4, r2, #3
   1d7e4:	1f1d      	subs	r5, r3, #4
   1d7e6:	0896      	lsrs	r6, r2, #2
   1d7e8:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d7ea:	42b9      	cmp	r1, r7
   1d7ec:	d105      	bne.n	1d7fa <memcpy+0x42>
   1d7ee:	f06f 0503 	mvn.w	r5, #3
   1d7f2:	fb05 2206 	mla	r2, r5, r6, r2
   1d7f6:	4423      	add	r3, r4
   1d7f8:	e7e4      	b.n	1d7c4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d7fa:	f851 cb04 	ldr.w	ip, [r1], #4
   1d7fe:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1d802:	e7f2      	b.n	1d7ea <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1d804:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d808:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d80c:	e7dc      	b.n	1d7c8 <memcpy+0x10>

0001d80e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1d80e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1d810:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1d812:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d814:	079c      	lsls	r4, r3, #30
   1d816:	d111      	bne.n	1d83c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d818:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d81c:	f022 0603 	bic.w	r6, r2, #3
   1d820:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d824:	441e      	add	r6, r3
   1d826:	0894      	lsrs	r4, r2, #2
   1d828:	42b3      	cmp	r3, r6
   1d82a:	d10d      	bne.n	1d848 <memset+0x3a>
   1d82c:	f06f 0503 	mvn.w	r5, #3
   1d830:	fb05 2204 	mla	r2, r5, r4, r2
   1d834:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d836:	4293      	cmp	r3, r2
   1d838:	d109      	bne.n	1d84e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d83a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d83c:	2a00      	cmp	r2, #0
   1d83e:	d0fc      	beq.n	1d83a <memset+0x2c>
		*(d_byte++) = c_byte;
   1d840:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d844:	3a01      	subs	r2, #1
   1d846:	e7e5      	b.n	1d814 <memset+0x6>
		*(d_word++) = c_word;
   1d848:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1d84c:	e7ec      	b.n	1d828 <memset+0x1a>
		*(d_byte++) = c_byte;
   1d84e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d852:	e7f0      	b.n	1d836 <memset+0x28>

0001d854 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1d854:	f7fc bb1c 	b.w	19e90 <SystemInit>

0001d858 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   1d858:	b084      	sub	sp, #16
   1d85a:	ab04      	add	r3, sp, #16
   1d85c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1d860:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d864:	2b06      	cmp	r3, #6
   1d866:	d108      	bne.n	1d87a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1d868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d86c:	2201      	movs	r2, #1
   1d86e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1d872:	f3bf 8f4f 	dsb	sy
        __WFE();
   1d876:	bf20      	wfe
    while (true)
   1d878:	e7fd      	b.n	1d876 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1d87a:	b004      	add	sp, #16
   1d87c:	4770      	bx	lr

0001d87e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1d87e:	b084      	sub	sp, #16
   1d880:	ab04      	add	r3, sp, #16
   1d882:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1d886:	2300      	movs	r3, #0
   1d888:	f383 8811 	msr	BASEPRI, r3
   1d88c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1d890:	b004      	add	sp, #16
   1d892:	4770      	bx	lr

0001d894 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1d894:	b530      	push	{r4, r5, lr}
   1d896:	b085      	sub	sp, #20
   1d898:	4604      	mov	r4, r0
   1d89a:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1d89c:	4668      	mov	r0, sp
   1d89e:	2203      	movs	r2, #3
   1d8a0:	f7ff ff8a 	bl	1d7b8 <memcpy>
	(void)memset(res + 3, 0, 13);
   1d8a4:	220d      	movs	r2, #13
   1d8a6:	2100      	movs	r1, #0
   1d8a8:	f10d 0003 	add.w	r0, sp, #3
   1d8ac:	f7ff ffaf 	bl	1d80e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1d8b0:	4620      	mov	r0, r4
   1d8b2:	466a      	mov	r2, sp
   1d8b4:	4669      	mov	r1, sp
   1d8b6:	f002 f8b3 	bl	1fa20 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1d8ba:	4604      	mov	r4, r0
   1d8bc:	b920      	cbnz	r0, 1d8c8 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1d8be:	2203      	movs	r2, #3
   1d8c0:	4669      	mov	r1, sp
   1d8c2:	4628      	mov	r0, r5
   1d8c4:	f7ff ff78 	bl	1d7b8 <memcpy>

	return 0;
}
   1d8c8:	4620      	mov	r0, r4
   1d8ca:	b005      	add	sp, #20
   1d8cc:	bd30      	pop	{r4, r5, pc}

0001d8ce <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1d8ce:	b513      	push	{r0, r1, r4, lr}
   1d8d0:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1d8d2:	aa01      	add	r2, sp, #4
   1d8d4:	3103      	adds	r1, #3
   1d8d6:	f7ff ffdd 	bl	1d894 <ah>
	if (err) {
   1d8da:	b948      	cbnz	r0, 1d8f0 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1d8dc:	2203      	movs	r2, #3
   1d8de:	a901      	add	r1, sp, #4
   1d8e0:	4620      	mov	r0, r4
   1d8e2:	f7ff ff59 	bl	1d798 <memcmp>
   1d8e6:	fab0 f080 	clz	r0, r0
   1d8ea:	0940      	lsrs	r0, r0, #5
}
   1d8ec:	b002      	add	sp, #8
   1d8ee:	bd10      	pop	{r4, pc}
		return false;
   1d8f0:	2000      	movs	r0, #0
   1d8f2:	e7fb      	b.n	1d8ec <bt_rpa_irk_matches+0x1e>

0001d8f4 <send_cmd_status>:
{
   1d8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1d8f8:	f04f 32ff 	mov.w	r2, #4294967295
{
   1d8fc:	4606      	mov	r6, r0
   1d8fe:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1d900:	f04f 33ff 	mov.w	r3, #4294967295
   1d904:	2100      	movs	r1, #0
   1d906:	200f      	movs	r0, #15
   1d908:	f7f4 fd26 	bl	12358 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1d90c:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   1d90e:	f100 0808 	add.w	r8, r0, #8
   1d912:	4604      	mov	r4, r0
   1d914:	7507      	strb	r7, [r0, #20]
   1d916:	2102      	movs	r1, #2
   1d918:	4640      	mov	r0, r8
   1d91a:	f002 f83c 	bl	1f996 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d91e:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1d920:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d922:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1d924:	7041      	strb	r1, [r0, #1]
   1d926:	4640      	mov	r0, r8
   1d928:	f002 f835 	bl	1f996 <net_buf_simple_add>
	evt->ncmd = 1U;
   1d92c:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1d92e:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1d930:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   1d932:	4620      	mov	r0, r4
}
   1d934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   1d938:	f7f5 be8c 	b.w	13654 <bt_recv>

0001d93c <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1d93c:	f101 0320 	add.w	r3, r1, #32
   1d940:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1d942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1d946:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1d94a:	428b      	cmp	r3, r1
   1d94c:	d1f9      	bne.n	1d942 <sys_memcpy_swap.constprop.0+0x6>
}
   1d94e:	4770      	bx	lr

0001d950 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   1d950:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1d954:	f043 0306 	orr.w	r3, r3, #6
   1d958:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   1d95c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1d960:	f043 0304 	orr.w	r3, r3, #4
   1d964:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   1d968:	4770      	bx	lr

0001d96a <default_CSPRNG>:
{
   1d96a:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1d96c:	f7fc f9a0 	bl	19cb0 <bt_rand>
}
   1d970:	fab0 f080 	clz	r0, r0
   1d974:	0940      	lsrs	r0, r0, #5
   1d976:	bd08      	pop	{r3, pc}

0001d978 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1d978:	b510      	push	{r4, lr}
   1d97a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1d97c:	7801      	ldrb	r1, [r0, #0]
   1d97e:	7822      	ldrb	r2, [r4, #0]
   1d980:	428a      	cmp	r2, r1
{
   1d982:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1d984:	d00e      	beq.n	1d9a4 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1d986:	4669      	mov	r1, sp
   1d988:	f7f4 fc72 	bl	12270 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1d98c:	a905      	add	r1, sp, #20
   1d98e:	4620      	mov	r0, r4
   1d990:	f7f4 fc6e 	bl	12270 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1d994:	2210      	movs	r2, #16
   1d996:	f10d 0115 	add.w	r1, sp, #21
   1d99a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1d99e:	f7ff fefb 	bl	1d798 <memcmp>
   1d9a2:	e007      	b.n	1d9b4 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1d9a4:	2a01      	cmp	r2, #1
   1d9a6:	d007      	beq.n	1d9b8 <bt_uuid_cmp+0x40>
   1d9a8:	2a02      	cmp	r2, #2
   1d9aa:	d008      	beq.n	1d9be <bt_uuid_cmp+0x46>
   1d9ac:	b95a      	cbnz	r2, 1d9c6 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1d9ae:	8840      	ldrh	r0, [r0, #2]
   1d9b0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1d9b2:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1d9b4:	b00a      	add	sp, #40	; 0x28
   1d9b6:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1d9b8:	6840      	ldr	r0, [r0, #4]
   1d9ba:	6863      	ldr	r3, [r4, #4]
   1d9bc:	e7f9      	b.n	1d9b2 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1d9be:	2210      	movs	r2, #16
   1d9c0:	1c61      	adds	r1, r4, #1
   1d9c2:	3001      	adds	r0, #1
   1d9c4:	e7eb      	b.n	1d99e <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1d9c6:	f06f 0015 	mvn.w	r0, #21
   1d9ca:	e7f3      	b.n	1d9b4 <bt_uuid_cmp+0x3c>

0001d9cc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1d9cc:	2a04      	cmp	r2, #4
{
   1d9ce:	b538      	push	{r3, r4, r5, lr}
   1d9d0:	460c      	mov	r4, r1
	switch (data_len) {
   1d9d2:	d00d      	beq.n	1d9f0 <bt_uuid_create+0x24>
   1d9d4:	2a10      	cmp	r2, #16
   1d9d6:	d019      	beq.n	1da0c <bt_uuid_create+0x40>
   1d9d8:	2a02      	cmp	r2, #2
   1d9da:	f04f 0300 	mov.w	r3, #0
   1d9de:	d11b      	bne.n	1da18 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1d9e0:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1d9e2:	784a      	ldrb	r2, [r1, #1]
   1d9e4:	780b      	ldrb	r3, [r1, #0]
   1d9e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1d9ea:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1d9ec:	2001      	movs	r0, #1
}
   1d9ee:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1d9f0:	2301      	movs	r3, #1
   1d9f2:	7003      	strb	r3, [r0, #0]
   1d9f4:	78a2      	ldrb	r2, [r4, #2]
   1d9f6:	78c9      	ldrb	r1, [r1, #3]
   1d9f8:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1d9fa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1d9fe:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1da00:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1da04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1da08:	6042      	str	r2, [r0, #4]
		break;
   1da0a:	e7ef      	b.n	1d9ec <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1da0c:	2302      	movs	r3, #2
   1da0e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1da12:	f7ff fed1 	bl	1d7b8 <memcpy>
		break;
   1da16:	e7e9      	b.n	1d9ec <bt_uuid_create+0x20>
	switch (data_len) {
   1da18:	4618      	mov	r0, r3
   1da1a:	e7e8      	b.n	1d9ee <bt_uuid_create+0x22>

0001da1c <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1da1c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1da1e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1da20:	2106      	movs	r1, #6
{
   1da22:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1da24:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1da28:	f7fc f942 	bl	19cb0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1da2c:	b918      	cbnz	r0, 1da36 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1da2e:	79a3      	ldrb	r3, [r4, #6]
   1da30:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1da34:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1da36:	bd10      	pop	{r4, pc}

0001da38 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1da38:	280f      	cmp	r0, #15
   1da3a:	d806      	bhi.n	1da4a <bt_hci_evt_get_flags+0x12>
   1da3c:	280d      	cmp	r0, #13
   1da3e:	d80b      	bhi.n	1da58 <bt_hci_evt_get_flags+0x20>
   1da40:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1da42:	bf14      	ite	ne
   1da44:	2002      	movne	r0, #2
   1da46:	2003      	moveq	r0, #3
   1da48:	4770      	bx	lr
	switch (evt) {
   1da4a:	2813      	cmp	r0, #19
   1da4c:	d004      	beq.n	1da58 <bt_hci_evt_get_flags+0x20>
   1da4e:	281a      	cmp	r0, #26
   1da50:	bf14      	ite	ne
   1da52:	2002      	movne	r0, #2
   1da54:	2001      	moveq	r0, #1
   1da56:	4770      	bx	lr
   1da58:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1da5a:	4770      	bx	lr

0001da5c <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1da5c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1da60:	b193      	cbz	r3, 1da88 <update_sec_level+0x2c>
   1da62:	7b5a      	ldrb	r2, [r3, #13]
   1da64:	07d1      	lsls	r1, r2, #31
   1da66:	d50f      	bpl.n	1da88 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1da68:	06d2      	lsls	r2, r2, #27
   1da6a:	d50b      	bpl.n	1da84 <update_sec_level+0x28>
   1da6c:	7b1b      	ldrb	r3, [r3, #12]
   1da6e:	2b10      	cmp	r3, #16
   1da70:	d108      	bne.n	1da84 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   1da72:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1da74:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1da76:	7a82      	ldrb	r2, [r0, #10]
   1da78:	7a40      	ldrb	r0, [r0, #9]
}
   1da7a:	4282      	cmp	r2, r0
   1da7c:	bf8c      	ite	hi
   1da7e:	2000      	movhi	r0, #0
   1da80:	2001      	movls	r0, #1
   1da82:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   1da84:	2303      	movs	r3, #3
   1da86:	e7f5      	b.n	1da74 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   1da88:	2302      	movs	r3, #2
   1da8a:	e7f3      	b.n	1da74 <update_sec_level+0x18>

0001da8c <sys_put_le64>:
	dst[1] = val >> 8;
   1da8c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1da90:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1da92:	0e00      	lsrs	r0, r0, #24
   1da94:	7053      	strb	r3, [r2, #1]
   1da96:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1da98:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1da9a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1da9e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1daa0:	7093      	strb	r3, [r2, #2]
   1daa2:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1daa4:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1daa6:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1daa8:	71d1      	strb	r1, [r2, #7]
}
   1daaa:	4770      	bx	lr

0001daac <bt_hci_disconnect>:
{
   1daac:	b570      	push	{r4, r5, r6, lr}
   1daae:	4606      	mov	r6, r0
   1dab0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1dab2:	f240 4006 	movw	r0, #1030	; 0x406
   1dab6:	2103      	movs	r1, #3
   1dab8:	f7f5 f96c 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   1dabc:	4604      	mov	r4, r0
   1dabe:	b168      	cbz	r0, 1dadc <bt_hci_disconnect+0x30>
   1dac0:	2103      	movs	r1, #3
   1dac2:	3008      	adds	r0, #8
   1dac4:	f001 ff67 	bl	1f996 <net_buf_simple_add>
	disconn->reason = reason;
   1dac8:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1daca:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dacc:	4621      	mov	r1, r4
   1dace:	2200      	movs	r2, #0
}
   1dad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dad4:	f240 4006 	movw	r0, #1030	; 0x406
   1dad8:	f7f5 bab8 	b.w	1304c <bt_hci_cmd_send_sync>
}
   1dadc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dae0:	bd70      	pop	{r4, r5, r6, pc}

0001dae2 <bt_le_set_data_len>:
{
   1dae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dae4:	4607      	mov	r7, r0
   1dae6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1dae8:	f242 0022 	movw	r0, #8226	; 0x2022
   1daec:	2106      	movs	r1, #6
{
   1daee:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1daf0:	f7f5 f950 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   1daf4:	4604      	mov	r4, r0
   1daf6:	b170      	cbz	r0, 1db16 <bt_le_set_data_len+0x34>
   1daf8:	2106      	movs	r1, #6
   1dafa:	3008      	adds	r0, #8
   1dafc:	f001 ff4b 	bl	1f996 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1db00:	883b      	ldrh	r3, [r7, #0]
   1db02:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1db04:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1db06:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1db08:	4621      	mov	r1, r4
   1db0a:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1db0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1db12:	f7f5 b977 	b.w	12e04 <bt_hci_cmd_send>
}
   1db16:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1db1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001db1c <bt_le_set_phy>:
{
   1db1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1db20:	4680      	mov	r8, r0
   1db22:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1db24:	f242 0032 	movw	r0, #8242	; 0x2032
   1db28:	2107      	movs	r1, #7
{
   1db2a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1db2e:	4616      	mov	r6, r2
   1db30:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1db32:	f7f5 f92f 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   1db36:	4604      	mov	r4, r0
   1db38:	b190      	cbz	r0, 1db60 <bt_le_set_phy+0x44>
   1db3a:	2107      	movs	r1, #7
   1db3c:	3008      	adds	r0, #8
   1db3e:	f001 ff2a 	bl	1f996 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1db42:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1db46:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1db48:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1db4a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1db4c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1db4e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1db52:	4621      	mov	r1, r4
   1db54:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1db58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1db5c:	f7f5 b952 	b.w	12e04 <bt_hci_cmd_send>
}
   1db60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1db64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001db68 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1db68:	6880      	ldr	r0, [r0, #8]
   1db6a:	f7f5 bc0d 	b.w	13388 <bt_hci_le_enh_conn_complete>

0001db6e <le_legacy_conn_complete>:
{
   1db6e:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1db70:	6881      	ldr	r1, [r0, #8]
{
   1db72:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1db74:	780b      	ldrb	r3, [r1, #0]
   1db76:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1db7a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1db7e:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1db82:	78cb      	ldrb	r3, [r1, #3]
   1db84:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1db88:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1db8c:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1db90:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1db94:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1db98:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1db9c:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1dba0:	7c4b      	ldrb	r3, [r1, #17]
   1dba2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   1dba6:	2207      	movs	r2, #7
   1dba8:	3104      	adds	r1, #4
   1dbaa:	a803      	add	r0, sp, #12
   1dbac:	f7ff fe04 	bl	1d7b8 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1dbb0:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1dbb2:	4669      	mov	r1, sp
   1dbb4:	2206      	movs	r2, #6
   1dbb6:	f10d 0013 	add.w	r0, sp, #19
   1dbba:	9400      	str	r4, [sp, #0]
   1dbbc:	f8ad 4004 	strh.w	r4, [sp, #4]
   1dbc0:	f7ff fdfa 	bl	1d7b8 <memcpy>
   1dbc4:	2206      	movs	r2, #6
   1dbc6:	4669      	mov	r1, sp
   1dbc8:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1dbcc:	9400      	str	r4, [sp, #0]
   1dbce:	f8ad 4004 	strh.w	r4, [sp, #4]
   1dbd2:	f7ff fdf1 	bl	1d7b8 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1dbd6:	a802      	add	r0, sp, #8
   1dbd8:	f7f5 fbd6 	bl	13388 <bt_hci_le_enh_conn_complete>
}
   1dbdc:	b00a      	add	sp, #40	; 0x28
   1dbde:	bd10      	pop	{r4, pc}

0001dbe0 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1dbe0:	8802      	ldrh	r2, [r0, #0]
   1dbe2:	8843      	ldrh	r3, [r0, #2]
   1dbe4:	429a      	cmp	r2, r3
{
   1dbe6:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1dbe8:	d818      	bhi.n	1dc1c <bt_le_conn_params_valid+0x3c>
   1dbea:	2a05      	cmp	r2, #5
   1dbec:	d916      	bls.n	1dc1c <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1dbee:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1dbf2:	d813      	bhi.n	1dc1c <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1dbf4:	8884      	ldrh	r4, [r0, #4]
   1dbf6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1dbfa:	d20f      	bcs.n	1dc1c <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1dbfc:	88c1      	ldrh	r1, [r0, #6]
   1dbfe:	f1a1 020a 	sub.w	r2, r1, #10
   1dc02:	b292      	uxth	r2, r2
   1dc04:	f640 4076 	movw	r0, #3190	; 0xc76
   1dc08:	4282      	cmp	r2, r0
   1dc0a:	d807      	bhi.n	1dc1c <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1dc0c:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1dc10:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1dc14:	bf34      	ite	cc
   1dc16:	2001      	movcc	r0, #1
   1dc18:	2000      	movcs	r0, #0
}
   1dc1a:	bd10      	pop	{r4, pc}
		return false;
   1dc1c:	2000      	movs	r0, #0
   1dc1e:	e7fc      	b.n	1dc1a <bt_le_conn_params_valid+0x3a>

0001dc20 <bt_send>:
		return bt_hci_ecc_send(buf);
   1dc20:	f7f4 ba94 	b.w	1214c <bt_hci_ecc_send>

0001dc24 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   1dc24:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1dc26:	f7fb f831 	bl	18c8c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   1dc2a:	b118      	cbz	r0, 1dc34 <bt_addr_le_is_bonded+0x10>
   1dc2c:	89c0      	ldrh	r0, [r0, #14]
   1dc2e:	3800      	subs	r0, #0
   1dc30:	bf18      	it	ne
   1dc32:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   1dc34:	bd08      	pop	{r3, pc}

0001dc36 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1dc36:	2207      	movs	r2, #7
   1dc38:	f7ff bdbe 	b.w	1d7b8 <memcpy>

0001dc3c <addr_res_enable>:
{
   1dc3c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1dc3e:	2101      	movs	r1, #1
{
   1dc40:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1dc42:	f242 002d 	movw	r0, #8237	; 0x202d
   1dc46:	f7f5 f8a5 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   1dc4a:	4604      	mov	r4, r0
   1dc4c:	b158      	cbz	r0, 1dc66 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1dc4e:	4629      	mov	r1, r5
   1dc50:	3008      	adds	r0, #8
   1dc52:	f001 feaf 	bl	1f9b4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1dc56:	4621      	mov	r1, r4
   1dc58:	2200      	movs	r2, #0
}
   1dc5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1dc5e:	f242 002d 	movw	r0, #8237	; 0x202d
   1dc62:	f7f5 b9f3 	b.w	1304c <bt_hci_cmd_send_sync>
}
   1dc66:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dc6a:	bd38      	pop	{r3, r4, r5, pc}

0001dc6c <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1dc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc6e:	4607      	mov	r7, r0
   1dc70:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1dc72:	f242 0027 	movw	r0, #8231	; 0x2027
   1dc76:	2127      	movs	r1, #39	; 0x27
   1dc78:	f7f5 f88c 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   1dc7c:	4604      	mov	r4, r0
   1dc7e:	b1d0      	cbz	r0, 1dcb6 <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1dc80:	2127      	movs	r1, #39	; 0x27
   1dc82:	3008      	adds	r0, #8
   1dc84:	f001 fe87 	bl	1f996 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1dc88:	4639      	mov	r1, r7
   1dc8a:	4605      	mov	r5, r0
   1dc8c:	f7ff ffd3 	bl	1dc36 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1dc90:	4631      	mov	r1, r6
   1dc92:	2210      	movs	r2, #16
   1dc94:	1de8      	adds	r0, r5, #7
   1dc96:	f7ff fd8f 	bl	1d7b8 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1dc9a:	2210      	movs	r2, #16
   1dc9c:	2100      	movs	r1, #0
   1dc9e:	f105 0017 	add.w	r0, r5, #23
   1dca2:	f7ff fdb4 	bl	1d80e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1dca6:	4621      	mov	r1, r4
   1dca8:	2200      	movs	r2, #0
}
   1dcaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1dcae:	f242 0027 	movw	r0, #8231	; 0x2027
   1dcb2:	f7f5 b9cb 	b.w	1304c <bt_hci_cmd_send_sync>
}
   1dcb6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dcbc <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1dcbc:	7a03      	ldrb	r3, [r0, #8]
   1dcbe:	075b      	lsls	r3, r3, #29
   1dcc0:	d504      	bpl.n	1dccc <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1dcc2:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1dcc6:	3001      	adds	r0, #1
   1dcc8:	f7ff bfd0 	b.w	1dc6c <hci_id_add.isra.0>
}
   1dccc:	4770      	bx	lr

0001dcce <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dcce:	f100 0310 	add.w	r3, r0, #16
   1dcd2:	f3bf 8f5b 	dmb	ish
   1dcd6:	e853 2f00 	ldrex	r2, [r3]
   1dcda:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   1dcde:	e843 1c00 	strex	ip, r1, [r3]
   1dce2:	f1bc 0f00 	cmp.w	ip, #0
   1dce6:	d1f6      	bne.n	1dcd6 <adv_unpause_enabled+0x8>
   1dce8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1dcec:	0493      	lsls	r3, r2, #18
   1dcee:	d502      	bpl.n	1dcf6 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   1dcf0:	2101      	movs	r1, #1
   1dcf2:	f000 b927 	b.w	1df44 <bt_le_adv_set_enable>
}
   1dcf6:	4770      	bx	lr

0001dcf8 <adv_pause_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dcf8:	f3bf 8f5b 	dmb	ish
   1dcfc:	6903      	ldr	r3, [r0, #16]
   1dcfe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1dd02:	065b      	lsls	r3, r3, #25
   1dd04:	f100 0210 	add.w	r2, r0, #16
   1dd08:	d50e      	bpl.n	1dd28 <adv_pause_enabled+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dd0a:	f3bf 8f5b 	dmb	ish
   1dd0e:	e852 3f00 	ldrex	r3, [r2]
   1dd12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1dd16:	e842 3100 	strex	r1, r3, [r2]
   1dd1a:	2900      	cmp	r1, #0
   1dd1c:	d1f7      	bne.n	1dd0e <adv_pause_enabled+0x16>
   1dd1e:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   1dd22:	2100      	movs	r1, #0
   1dd24:	f000 b90e 	b.w	1df44 <bt_le_adv_set_enable>
}
   1dd28:	4770      	bx	lr

0001dd2a <bt_lookup_id_addr>:
{
   1dd2a:	b510      	push	{r4, lr}
   1dd2c:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1dd2e:	f7fa ff73 	bl	18c18 <bt_keys_find_irk>
		if (keys) {
   1dd32:	b100      	cbz	r0, 1dd36 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1dd34:	1c44      	adds	r4, r0, #1
}
   1dd36:	4620      	mov	r0, r4
   1dd38:	bd10      	pop	{r4, pc}

0001dd3a <bt_id_set_adv_private_addr>:
{
   1dd3a:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1dd3c:	2106      	movs	r1, #6
   1dd3e:	4668      	mov	r0, sp
   1dd40:	f7fb ffb6 	bl	19cb0 <bt_rand>
	if (err) {
   1dd44:	b940      	cbnz	r0, 1dd58 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1dd46:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1dd4a:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1dd4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1dd50:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1dd54:	f7f5 fe0e 	bl	13974 <set_random_address>
}
   1dd58:	b003      	add	sp, #12
   1dd5a:	f85d fb04 	ldr.w	pc, [sp], #4

0001dd5e <bt_id_adv_random_addr_check>:
}
   1dd5e:	2001      	movs	r0, #1
   1dd60:	4770      	bx	lr

0001dd62 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1dd62:	7a03      	ldrb	r3, [r0, #8]
   1dd64:	07d9      	lsls	r1, r3, #31
   1dd66:	d504      	bpl.n	1dd72 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1dd68:	f023 0301 	bic.w	r3, r3, #1
   1dd6c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1dd6e:	f7f5 be75 	b.w	13a5c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1dd72:	0799      	lsls	r1, r3, #30
   1dd74:	d504      	bpl.n	1dd80 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1dd76:	f023 0302 	bic.w	r3, r3, #2
   1dd7a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1dd7c:	f7f5 bf42 	b.w	13c04 <bt_id_del>
}
   1dd80:	4770      	bx	lr

0001dd82 <get_adv_channel_map>:
{
   1dd82:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1dd84:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1dd88:	bf0c      	ite	eq
   1dd8a:	2007      	moveq	r0, #7
   1dd8c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1dd8e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1dd90:	bf48      	it	mi
   1dd92:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1dd96:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1dd98:	bf48      	it	mi
   1dd9a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1dd9e:	4770      	bx	lr

0001dda0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dda0:	f3bf 8f5b 	dmb	ish
   1dda4:	6800      	ldr	r0, [r0, #0]
   1dda6:	f3bf 8f5b 	dmb	ish
}
   1ddaa:	4770      	bx	lr

0001ddac <atomic_and>:
{
   1ddac:	4603      	mov	r3, r0
}
   1ddae:	f3bf 8f5b 	dmb	ish
   1ddb2:	e853 0f00 	ldrex	r0, [r3]
   1ddb6:	ea00 0201 	and.w	r2, r0, r1
   1ddba:	e843 2c00 	strex	ip, r2, [r3]
   1ddbe:	f1bc 0f00 	cmp.w	ip, #0
   1ddc2:	d1f6      	bne.n	1ddb2 <atomic_and+0x6>
   1ddc4:	f3bf 8f5b 	dmb	ish
   1ddc8:	4770      	bx	lr

0001ddca <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ddca:	2301      	movs	r3, #1
{
   1ddcc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ddce:	fa03 f101 	lsl.w	r1, r3, r1
{
   1ddd2:	4604      	mov	r4, r0
	if (val) {
   1ddd4:	b162      	cbz	r2, 1ddf0 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ddd6:	f3bf 8f5b 	dmb	ish
   1ddda:	e854 3f00 	ldrex	r3, [r4]
   1ddde:	430b      	orrs	r3, r1
   1dde0:	e844 3200 	strex	r2, r3, [r4]
   1dde4:	2a00      	cmp	r2, #0
   1dde6:	d1f8      	bne.n	1ddda <atomic_set_bit_to+0x10>
   1dde8:	f3bf 8f5b 	dmb	ish
	}
}
   1ddec:	bc10      	pop	{r4}
   1ddee:	4770      	bx	lr
   1ddf0:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ddf2:	43c9      	mvns	r1, r1
   1ddf4:	f7ff bfda 	b.w	1ddac <atomic_and>

0001ddf8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ddfc:	b087      	sub	sp, #28
   1ddfe:	4605      	mov	r5, r0
   1de00:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   1de04:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1de08:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   1de0c:	460c      	mov	r4, r1
   1de0e:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   1de10:	2100      	movs	r1, #0
   1de12:	2210      	movs	r2, #16
   1de14:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1de16:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   1de18:	f7ff fcf9 	bl	1d80e <memset>
	if (use_name) {
   1de1c:	b187      	cbz	r7, 1de40 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1de1e:	f7f5 fd8b 	bl	13938 <bt_get_name>
   1de22:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1de24:	2c00      	cmp	r4, #0
   1de26:	d13e      	bne.n	1dea6 <le_adv_update.constprop.0+0xae>
   1de28:	2e00      	cmp	r6, #0
   1de2a:	d148      	bne.n	1debe <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   1de2c:	4648      	mov	r0, r9
   1de2e:	f7ff fc97 	bl	1d760 <strlen>
   1de32:	2209      	movs	r2, #9
   1de34:	f88d 2000 	strb.w	r2, [sp]
   1de38:	f88d 0001 	strb.w	r0, [sp, #1]
   1de3c:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   1de40:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   1de44:	2f00      	cmp	r7, #0
   1de46:	d03c      	beq.n	1dec2 <le_adv_update.constprop.0+0xca>
   1de48:	f1ba 0f00 	cmp.w	sl, #0
   1de4c:	d002      	beq.n	1de54 <le_adv_update.constprop.0+0x5c>
   1de4e:	f1b8 0f00 	cmp.w	r8, #0
   1de52:	d036      	beq.n	1dec2 <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   1de54:	2301      	movs	r3, #1
			d[1].data = &data;
   1de56:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1de5a:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1de5c:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1de5e:	a902      	add	r1, sp, #8
   1de60:	f242 0008 	movw	r0, #8200	; 0x2008
   1de64:	f7f6 f96e 	bl	14144 <hci_set_ad>
		if (err) {
   1de68:	4604      	mov	r4, r0
   1de6a:	b978      	cbnz	r0, 1de8c <le_adv_update.constprop.0+0x94>
	if (scannable) {
   1de6c:	f1ba 0f00 	cmp.w	sl, #0
   1de70:	d129      	bne.n	1dec6 <le_adv_update.constprop.0+0xce>
   1de72:	3510      	adds	r5, #16
   1de74:	f3bf 8f5b 	dmb	ish
   1de78:	e855 3f00 	ldrex	r3, [r5]
   1de7c:	f043 0304 	orr.w	r3, r3, #4
   1de80:	e845 3200 	strex	r2, r3, [r5]
   1de84:	2a00      	cmp	r2, #0
   1de86:	d1f7      	bne.n	1de78 <le_adv_update.constprop.0+0x80>
   1de88:	f3bf 8f5b 	dmb	ish
}
   1de8c:	4620      	mov	r0, r4
   1de8e:	b007      	add	sp, #28
   1de90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1de94:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   1de98:	3908      	subs	r1, #8
   1de9a:	2901      	cmp	r1, #1
   1de9c:	d92a      	bls.n	1def4 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1de9e:	3201      	adds	r2, #1
   1dea0:	4593      	cmp	fp, r2
   1dea2:	d1f7      	bne.n	1de94 <le_adv_update.constprop.0+0x9c>
   1dea4:	e7c0      	b.n	1de28 <le_adv_update.constprop.0+0x30>
   1dea6:	2200      	movs	r2, #0
   1dea8:	e7fa      	b.n	1dea0 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1deaa:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   1deae:	3908      	subs	r1, #8
   1deb0:	2901      	cmp	r1, #1
   1deb2:	d91f      	bls.n	1def4 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1deb4:	3201      	adds	r2, #1
   1deb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1deb8:	4293      	cmp	r3, r2
   1deba:	d1f6      	bne.n	1deaa <le_adv_update.constprop.0+0xb2>
   1debc:	e7b6      	b.n	1de2c <le_adv_update.constprop.0+0x34>
   1debe:	2200      	movs	r2, #0
   1dec0:	e7f9      	b.n	1deb6 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   1dec2:	2201      	movs	r2, #1
   1dec4:	e7cb      	b.n	1de5e <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   1dec6:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   1dec8:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1deca:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   1decc:	b187      	cbz	r7, 1def0 <le_adv_update.constprop.0+0xf8>
   1dece:	f1b8 0f00 	cmp.w	r8, #0
   1ded2:	d10d      	bne.n	1def0 <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   1ded4:	2301      	movs	r3, #1
			d[1].data = &data;
   1ded6:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1deda:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1dedc:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1dede:	a902      	add	r1, sp, #8
   1dee0:	f242 0009 	movw	r0, #8201	; 0x2009
   1dee4:	f7f6 f92e 	bl	14144 <hci_set_ad>
		if (err) {
   1dee8:	2800      	cmp	r0, #0
   1deea:	d0c2      	beq.n	1de72 <le_adv_update.constprop.0+0x7a>
   1deec:	4604      	mov	r4, r0
   1deee:	e7cd      	b.n	1de8c <le_adv_update.constprop.0+0x94>
		d_len = 1;
   1def0:	2201      	movs	r2, #1
   1def2:	e7f4      	b.n	1dede <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   1def4:	f06f 0415 	mvn.w	r4, #21
   1def8:	e7c8      	b.n	1de8c <le_adv_update.constprop.0+0x94>

0001defa <bt_le_adv_set_enable_legacy>:
{
   1defa:	b570      	push	{r4, r5, r6, lr}
   1defc:	4606      	mov	r6, r0
   1defe:	b086      	sub	sp, #24
   1df00:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1df02:	f242 000a 	movw	r0, #8202	; 0x200a
   1df06:	2101      	movs	r1, #1
   1df08:	f7f4 ff44 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   1df0c:	4604      	mov	r4, r0
   1df0e:	b1b0      	cbz	r0, 1df3e <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   1df10:	3008      	adds	r0, #8
   1df12:	b195      	cbz	r5, 1df3a <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1df14:	2101      	movs	r1, #1
   1df16:	f001 fd4d 	bl	1f9b4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1df1a:	f106 0210 	add.w	r2, r6, #16
   1df1e:	a903      	add	r1, sp, #12
   1df20:	4620      	mov	r0, r4
   1df22:	9500      	str	r5, [sp, #0]
   1df24:	2306      	movs	r3, #6
   1df26:	f7f4 ff23 	bl	12d70 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1df2a:	2200      	movs	r2, #0
   1df2c:	4621      	mov	r1, r4
   1df2e:	f242 000a 	movw	r0, #8202	; 0x200a
   1df32:	f7f5 f88b 	bl	1304c <bt_hci_cmd_send_sync>
}
   1df36:	b006      	add	sp, #24
   1df38:	bd70      	pop	{r4, r5, r6, pc}
   1df3a:	4629      	mov	r1, r5
   1df3c:	e7eb      	b.n	1df16 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1df3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1df42:	e7f8      	b.n	1df36 <bt_le_adv_set_enable_legacy+0x3c>

0001df44 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   1df44:	f7ff bfd9 	b.w	1defa <bt_le_adv_set_enable_legacy>

0001df48 <tx_notify>:
{
   1df48:	b570      	push	{r4, r5, r6, lr}
   1df4a:	4604      	mov	r4, r0
	__asm__ volatile(
   1df4c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1df50:	f3ef 8311 	mrs	r3, BASEPRI
   1df54:	f382 8811 	msr	BASEPRI, r2
   1df58:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1df5c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1df5e:	b920      	cbnz	r0, 1df6a <tx_notify+0x22>
	__asm__ volatile(
   1df60:	f383 8811 	msr	BASEPRI, r3
   1df64:	f3bf 8f6f 	isb	sy
}
   1df68:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1df6c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1df6e:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df70:	4288      	cmp	r0, r1
	list->tail = node;
   1df72:	bf08      	it	eq
   1df74:	6262      	streq	r2, [r4, #36]	; 0x24
   1df76:	f383 8811 	msr	BASEPRI, r3
   1df7a:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1df7e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1df82:	f7f6 fc7b 	bl	1487c <tx_free>
		cb(conn, user_data);
   1df86:	4631      	mov	r1, r6
   1df88:	4620      	mov	r0, r4
   1df8a:	47a8      	blx	r5
	while (1) {
   1df8c:	e7de      	b.n	1df4c <tx_notify+0x4>

0001df8e <tx_complete_work>:
	tx_notify(conn);
   1df8e:	3828      	subs	r0, #40	; 0x28
   1df90:	f7ff bfda 	b.w	1df48 <tx_notify>

0001df94 <bt_conn_new>:
{
   1df94:	b538      	push	{r3, r4, r5, lr}
   1df96:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1df98:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1df9a:	2501      	movs	r5, #1
   1df9c:	428b      	cmp	r3, r1
   1df9e:	d102      	bne.n	1dfa6 <bt_conn_new+0x12>
		return NULL;
   1dfa0:	2400      	movs	r4, #0
}
   1dfa2:	4620      	mov	r0, r4
   1dfa4:	bd38      	pop	{r3, r4, r5, pc}
   1dfa6:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1dfaa:	f3bf 8f5b 	dmb	ish
   1dfae:	e852 0f00 	ldrex	r0, [r2]
   1dfb2:	2800      	cmp	r0, #0
   1dfb4:	d104      	bne.n	1dfc0 <bt_conn_new+0x2c>
   1dfb6:	e842 5c00 	strex	ip, r5, [r2]
   1dfba:	f1bc 0f00 	cmp.w	ip, #0
   1dfbe:	d1f6      	bne.n	1dfae <bt_conn_new+0x1a>
   1dfc0:	f3bf 8f5b 	dmb	ish
   1dfc4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1dfc8:	d002      	beq.n	1dfd0 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1dfca:	3301      	adds	r3, #1
   1dfcc:	4604      	mov	r4, r0
   1dfce:	e7e5      	b.n	1df9c <bt_conn_new+0x8>
	if (!conn) {
   1dfd0:	2c00      	cmp	r4, #0
   1dfd2:	d0e6      	beq.n	1dfa2 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1dfd4:	22b8      	movs	r2, #184	; 0xb8
   1dfd6:	2100      	movs	r1, #0
   1dfd8:	4620      	mov	r0, r4
   1dfda:	f7ff fc18 	bl	1d80e <memset>
	return conn;
   1dfde:	e7e0      	b.n	1dfa2 <bt_conn_new+0xe>

0001dfe0 <bt_conn_set_security>:
{
   1dfe0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1dfe2:	7b43      	ldrb	r3, [r0, #13]
   1dfe4:	2b07      	cmp	r3, #7
{
   1dfe6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1dfe8:	d128      	bne.n	1e03c <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1dfea:	7a43      	ldrb	r3, [r0, #9]
   1dfec:	428b      	cmp	r3, r1
   1dfee:	d228      	bcs.n	1e042 <bt_conn_set_security+0x62>
   1dff0:	7a83      	ldrb	r3, [r0, #10]
   1dff2:	428b      	cmp	r3, r1
   1dff4:	d225      	bcs.n	1e042 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dff6:	f3bf 8f5b 	dmb	ish
	if (val) {
   1dffa:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1dffc:	f100 0304 	add.w	r3, r0, #4
   1e000:	d513      	bpl.n	1e02a <bt_conn_set_security+0x4a>
   1e002:	e853 2f00 	ldrex	r2, [r3]
   1e006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1e00a:	e843 2000 	strex	r0, r2, [r3]
   1e00e:	2800      	cmp	r0, #0
   1e010:	d1f7      	bne.n	1e002 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e012:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1e016:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1e01a:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   1e01c:	4620      	mov	r0, r4
   1e01e:	f7fa f8c7 	bl	181b0 <bt_smp_start_security>
	if (err) {
   1e022:	b108      	cbz	r0, 1e028 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   1e024:	7a63      	ldrb	r3, [r4, #9]
   1e026:	72a3      	strb	r3, [r4, #10]
}
   1e028:	bd10      	pop	{r4, pc}
   1e02a:	e853 2f00 	ldrex	r2, [r3]
   1e02e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1e032:	e843 2000 	strex	r0, r2, [r3]
   1e036:	2800      	cmp	r0, #0
   1e038:	d0eb      	beq.n	1e012 <bt_conn_set_security+0x32>
   1e03a:	e7f6      	b.n	1e02a <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   1e03c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e040:	e7f2      	b.n	1e028 <bt_conn_set_security+0x48>
		return 0;
   1e042:	2000      	movs	r0, #0
   1e044:	e7f0      	b.n	1e028 <bt_conn_set_security+0x48>

0001e046 <bt_conn_get_security>:
}
   1e046:	7a40      	ldrb	r0, [r0, #9]
   1e048:	4770      	bx	lr

0001e04a <bt_conn_reset_rx_state>:
{
   1e04a:	b510      	push	{r4, lr}
   1e04c:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e04e:	6900      	ldr	r0, [r0, #16]
   1e050:	b118      	cbz	r0, 1e05a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e052:	f7fa fee7 	bl	18e24 <net_buf_unref>
	conn->rx = NULL;
   1e056:	2300      	movs	r3, #0
   1e058:	6123      	str	r3, [r4, #16]
}
   1e05a:	bd10      	pop	{r4, pc}

0001e05c <conn_cleanup>:
{
   1e05c:	b570      	push	{r4, r5, r6, lr}
   1e05e:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1e060:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1e064:	2200      	movs	r2, #0
   1e066:	2300      	movs	r3, #0
   1e068:	4630      	mov	r0, r6
   1e06a:	f001 fc43 	bl	1f8f4 <net_buf_get>
   1e06e:	4605      	mov	r5, r0
   1e070:	b950      	cbnz	r0, 1e088 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1e072:	4620      	mov	r0, r4
   1e074:	f7ff ffe9 	bl	1e04a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e078:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1e07c:	2200      	movs	r2, #0
}
   1e07e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e082:	2300      	movs	r3, #0
   1e084:	f7fc bd9e 	b.w	1abc4 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1e088:	6968      	ldr	r0, [r5, #20]
   1e08a:	b108      	cbz	r0, 1e090 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1e08c:	f7f6 fbf6 	bl	1487c <tx_free>
		net_buf_unref(buf);
   1e090:	4628      	mov	r0, r5
   1e092:	f7fa fec7 	bl	18e24 <net_buf_unref>
   1e096:	e7e5      	b.n	1e064 <conn_cleanup+0x8>

0001e098 <bt_conn_connected>:
{
   1e098:	b510      	push	{r4, lr}
   1e09a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1e09c:	f7f7 fa0c 	bl	154b8 <bt_l2cap_connected>
	notify_connected(conn);
   1e0a0:	4620      	mov	r0, r4
}
   1e0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1e0a6:	f7f6 bbf3 	b.w	14890 <notify_connected>

0001e0aa <bt_conn_is_peer_addr_le>:
{
   1e0aa:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e0ac:	7a03      	ldrb	r3, [r0, #8]
   1e0ae:	428b      	cmp	r3, r1
{
   1e0b0:	4604      	mov	r4, r0
   1e0b2:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e0b4:	d115      	bne.n	1e0e2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e0b6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e0ba:	2207      	movs	r2, #7
   1e0bc:	4628      	mov	r0, r5
   1e0be:	f7ff fb6b 	bl	1d798 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e0c2:	b180      	cbz	r0, 1e0e6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1e0c4:	78e3      	ldrb	r3, [r4, #3]
   1e0c6:	2207      	movs	r2, #7
   1e0c8:	b943      	cbnz	r3, 1e0dc <bt_conn_is_peer_addr_le+0x32>
   1e0ca:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e0ce:	4628      	mov	r0, r5
   1e0d0:	f7ff fb62 	bl	1d798 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e0d4:	fab0 f080 	clz	r0, r0
   1e0d8:	0940      	lsrs	r0, r0, #5
}
   1e0da:	bd38      	pop	{r3, r4, r5, pc}
   1e0dc:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e0e0:	e7f5      	b.n	1e0ce <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e0e2:	2000      	movs	r0, #0
   1e0e4:	e7f9      	b.n	1e0da <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e0e6:	2001      	movs	r0, #1
   1e0e8:	e7f7      	b.n	1e0da <bt_conn_is_peer_addr_le+0x30>

0001e0ea <bt_conn_ref>:
{
   1e0ea:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1e0ec:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e0f0:	f3bf 8f5b 	dmb	ish
   1e0f4:	6813      	ldr	r3, [r2, #0]
   1e0f6:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1e0fa:	b17b      	cbz	r3, 1e11c <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e0fc:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e100:	1c59      	adds	r1, r3, #1
   1e102:	e852 4f00 	ldrex	r4, [r2]
   1e106:	429c      	cmp	r4, r3
   1e108:	d104      	bne.n	1e114 <bt_conn_ref+0x2a>
   1e10a:	e842 1c00 	strex	ip, r1, [r2]
   1e10e:	f1bc 0f00 	cmp.w	ip, #0
   1e112:	d1f6      	bne.n	1e102 <bt_conn_ref+0x18>
   1e114:	f3bf 8f5b 	dmb	ish
   1e118:	d1ea      	bne.n	1e0f0 <bt_conn_ref+0x6>
}
   1e11a:	bd10      	pop	{r4, pc}
			return NULL;
   1e11c:	4618      	mov	r0, r3
   1e11e:	e7fc      	b.n	1e11a <bt_conn_ref+0x30>

0001e120 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   1e120:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e124:	f3bf 8f5b 	dmb	ish
   1e128:	e853 2f00 	ldrex	r2, [r3]
   1e12c:	3a01      	subs	r2, #1
   1e12e:	e843 2100 	strex	r1, r2, [r3]
   1e132:	2900      	cmp	r1, #0
   1e134:	d1f8      	bne.n	1e128 <bt_conn_unref+0x8>
   1e136:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e13a:	f3bf 8f5b 	dmb	ish
   1e13e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e142:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1e146:	b90b      	cbnz	r3, 1e14c <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   1e148:	f7f6 b9fc 	b.w	14544 <bt_le_adv_resume>
}
   1e14c:	4770      	bx	lr

0001e14e <conn_lookup_handle>:
{
   1e14e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e152:	4607      	mov	r7, r0
   1e154:	460e      	mov	r6, r1
   1e156:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e158:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e15a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1e15e:	42b4      	cmp	r4, r6
   1e160:	d103      	bne.n	1e16a <conn_lookup_handle+0x1c>
	return NULL;
   1e162:	2300      	movs	r3, #0
}
   1e164:	4618      	mov	r0, r3
   1e166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e16a:	fb09 7004 	mla	r0, r9, r4, r7
   1e16e:	f7ff ffbc 	bl	1e0ea <bt_conn_ref>
   1e172:	4603      	mov	r3, r0
		if (!conn) {
   1e174:	b158      	cbz	r0, 1e18e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e176:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e178:	2d01      	cmp	r5, #1
   1e17a:	d002      	beq.n	1e182 <conn_lookup_handle+0x34>
   1e17c:	3d07      	subs	r5, #7
   1e17e:	2d01      	cmp	r5, #1
   1e180:	d803      	bhi.n	1e18a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e182:	881a      	ldrh	r2, [r3, #0]
   1e184:	4542      	cmp	r2, r8
   1e186:	d0ed      	beq.n	1e164 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e188:	4618      	mov	r0, r3
   1e18a:	f7ff ffc9 	bl	1e120 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e18e:	3401      	adds	r4, #1
   1e190:	e7e5      	b.n	1e15e <conn_lookup_handle+0x10>

0001e192 <bt_conn_get_dst>:
}
   1e192:	3088      	adds	r0, #136	; 0x88
   1e194:	4770      	bx	lr

0001e196 <bt_conn_disconnect>:
{
   1e196:	b538      	push	{r3, r4, r5, lr}
   1e198:	7b43      	ldrb	r3, [r0, #13]
   1e19a:	3b02      	subs	r3, #2
   1e19c:	4604      	mov	r4, r0
   1e19e:	2b06      	cmp	r3, #6
   1e1a0:	d805      	bhi.n	1e1ae <bt_conn_disconnect+0x18>
   1e1a2:	e8df f003 	tbb	[pc, r3]
   1e1a6:	0408      	.short	0x0408
   1e1a8:	0e0c0404 	.word	0x0e0c0404
   1e1ac:	0c          	.byte	0x0c
   1e1ad:	00          	.byte	0x00
	switch (conn->state) {
   1e1ae:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   1e1b2:	4628      	mov	r0, r5
   1e1b4:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1e1b6:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1e1b8:	2100      	movs	r1, #0
   1e1ba:	f7f6 fe11 	bl	14de0 <bt_conn_set_state>
		return 0;
   1e1be:	2500      	movs	r5, #0
   1e1c0:	e7f7      	b.n	1e1b2 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1e1c2:	8800      	ldrh	r0, [r0, #0]
   1e1c4:	f7ff fc72 	bl	1daac <bt_hci_disconnect>
	if (err) {
   1e1c8:	4605      	mov	r5, r0
   1e1ca:	2800      	cmp	r0, #0
   1e1cc:	d1f1      	bne.n	1e1b2 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   1e1ce:	7b63      	ldrb	r3, [r4, #13]
   1e1d0:	2b07      	cmp	r3, #7
   1e1d2:	d1ee      	bne.n	1e1b2 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1e1d4:	2108      	movs	r1, #8
   1e1d6:	4620      	mov	r0, r4
   1e1d8:	f7f6 fe02 	bl	14de0 <bt_conn_set_state>
   1e1dc:	e7e9      	b.n	1e1b2 <bt_conn_disconnect+0x1c>

0001e1de <bt_conn_le_conn_update>:
{
   1e1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1e0:	4607      	mov	r7, r0
   1e1e2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e1e4:	f242 0013 	movw	r0, #8211	; 0x2013
   1e1e8:	210e      	movs	r1, #14
   1e1ea:	f7f4 fdd3 	bl	12d94 <bt_hci_cmd_create>
	if (!buf) {
   1e1ee:	4606      	mov	r6, r0
   1e1f0:	b1d0      	cbz	r0, 1e228 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e1f2:	210e      	movs	r1, #14
   1e1f4:	3008      	adds	r0, #8
   1e1f6:	f001 fbce 	bl	1f996 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e1fa:	220e      	movs	r2, #14
   1e1fc:	4604      	mov	r4, r0
   1e1fe:	2100      	movs	r1, #0
   1e200:	f7ff fb05 	bl	1d80e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e204:	883b      	ldrh	r3, [r7, #0]
   1e206:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e208:	882b      	ldrh	r3, [r5, #0]
   1e20a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e20c:	886b      	ldrh	r3, [r5, #2]
   1e20e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e210:	88ab      	ldrh	r3, [r5, #4]
   1e212:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e214:	88eb      	ldrh	r3, [r5, #6]
   1e216:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e218:	4631      	mov	r1, r6
   1e21a:	2200      	movs	r2, #0
}
   1e21c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e220:	f242 0013 	movw	r0, #8211	; 0x2013
   1e224:	f7f4 bf12 	b.w	1304c <bt_hci_cmd_send_sync>
}
   1e228:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e22e <l2cap_connected>:
}
   1e22e:	4770      	bx	lr

0001e230 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1e230:	3010      	adds	r0, #16
   1e232:	f001 beab 	b.w	1ff8c <k_work_cancel_delayable>

0001e236 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e236:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e238:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e23a:	b17b      	cbz	r3, 1e25c <bt_l2cap_chan_remove+0x26>
   1e23c:	3b08      	subs	r3, #8
   1e23e:	2200      	movs	r2, #0
   1e240:	b163      	cbz	r3, 1e25c <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e242:	428b      	cmp	r3, r1
   1e244:	f103 0408 	add.w	r4, r3, #8
   1e248:	d10f      	bne.n	1e26a <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1e24a:	688b      	ldr	r3, [r1, #8]
   1e24c:	b93a      	cbnz	r2, 1e25e <bt_l2cap_chan_remove+0x28>
   1e24e:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   1e250:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1e252:	4294      	cmp	r4, r2
   1e254:	d100      	bne.n	1e258 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e256:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   1e258:	2300      	movs	r3, #0
   1e25a:	608b      	str	r3, [r1, #8]
}
   1e25c:	bd10      	pop	{r4, pc}
   1e25e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e260:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1e262:	429c      	cmp	r4, r3
	list->tail = node;
   1e264:	bf08      	it	eq
   1e266:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1e268:	e7f6      	b.n	1e258 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e26a:	2c00      	cmp	r4, #0
   1e26c:	d0f6      	beq.n	1e25c <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e26e:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e270:	2b00      	cmp	r3, #0
   1e272:	d0f3      	beq.n	1e25c <bt_l2cap_chan_remove+0x26>
   1e274:	3b08      	subs	r3, #8
   1e276:	4622      	mov	r2, r4
   1e278:	e7e2      	b.n	1e240 <bt_l2cap_chan_remove+0xa>

0001e27a <bt_l2cap_chan_del>:
{
   1e27a:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1e27c:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1e280:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e282:	b123      	cbz	r3, 1e28e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e284:	686b      	ldr	r3, [r5, #4]
   1e286:	b103      	cbz	r3, 1e28a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e288:	4798      	blx	r3
	chan->conn = NULL;
   1e28a:	2300      	movs	r3, #0
   1e28c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e28e:	68e3      	ldr	r3, [r4, #12]
   1e290:	b10b      	cbz	r3, 1e296 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e292:	4620      	mov	r0, r4
   1e294:	4798      	blx	r3
	if (ops->released) {
   1e296:	69eb      	ldr	r3, [r5, #28]
   1e298:	b11b      	cbz	r3, 1e2a2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e29a:	4620      	mov	r0, r4
}
   1e29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e2a0:	4718      	bx	r3
}
   1e2a2:	bd70      	pop	{r4, r5, r6, pc}

0001e2a4 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e2a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e2a6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e2a8:	b18b      	cbz	r3, 1e2ce <bt_l2cap_disconnected+0x2a>
   1e2aa:	f1b3 0008 	subs.w	r0, r3, #8
   1e2ae:	d00e      	beq.n	1e2ce <bt_l2cap_disconnected+0x2a>
   1e2b0:	681c      	ldr	r4, [r3, #0]
   1e2b2:	b104      	cbz	r4, 1e2b6 <bt_l2cap_disconnected+0x12>
   1e2b4:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e2b6:	f7ff ffe0 	bl	1e27a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e2ba:	b144      	cbz	r4, 1e2ce <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e2bc:	f114 0308 	adds.w	r3, r4, #8
   1e2c0:	d002      	beq.n	1e2c8 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e2c2:	68a3      	ldr	r3, [r4, #8]
   1e2c4:	b103      	cbz	r3, 1e2c8 <bt_l2cap_disconnected+0x24>
   1e2c6:	3b08      	subs	r3, #8
{
   1e2c8:	4620      	mov	r0, r4
   1e2ca:	461c      	mov	r4, r3
   1e2cc:	e7f3      	b.n	1e2b6 <bt_l2cap_disconnected+0x12>
}
   1e2ce:	bd10      	pop	{r4, pc}

0001e2d0 <bt_l2cap_security_changed>:
{
   1e2d0:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e2d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e2d4:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e2d6:	b1a3      	cbz	r3, 1e302 <bt_l2cap_security_changed+0x32>
   1e2d8:	f1b3 0008 	subs.w	r0, r3, #8
   1e2dc:	d011      	beq.n	1e302 <bt_l2cap_security_changed+0x32>
   1e2de:	681c      	ldr	r4, [r3, #0]
   1e2e0:	b104      	cbz	r4, 1e2e4 <bt_l2cap_security_changed+0x14>
   1e2e2:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1e2e4:	6843      	ldr	r3, [r0, #4]
   1e2e6:	689b      	ldr	r3, [r3, #8]
   1e2e8:	b10b      	cbz	r3, 1e2ee <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1e2ea:	4629      	mov	r1, r5
   1e2ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e2ee:	b144      	cbz	r4, 1e302 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e2f0:	f114 0308 	adds.w	r3, r4, #8
   1e2f4:	d002      	beq.n	1e2fc <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e2f6:	68a3      	ldr	r3, [r4, #8]
   1e2f8:	b103      	cbz	r3, 1e2fc <bt_l2cap_security_changed+0x2c>
   1e2fa:	3b08      	subs	r3, #8
{
   1e2fc:	4620      	mov	r0, r4
   1e2fe:	461c      	mov	r4, r3
   1e300:	e7f0      	b.n	1e2e4 <bt_l2cap_security_changed+0x14>
}
   1e302:	bd38      	pop	{r3, r4, r5, pc}

0001e304 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e304:	3104      	adds	r1, #4
   1e306:	f7f6 bf33 	b.w	15170 <bt_conn_create_pdu_timeout>

0001e30a <bt_l2cap_send_cb>:
{
   1e30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e30e:	4614      	mov	r4, r2
   1e310:	4605      	mov	r5, r0
   1e312:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1e314:	f102 0008 	add.w	r0, r2, #8
   1e318:	2104      	movs	r1, #4
   1e31a:	461e      	mov	r6, r3
   1e31c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e320:	f001 fb50 	bl	1f9c4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e324:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e326:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e328:	3a04      	subs	r2, #4
   1e32a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e32c:	4643      	mov	r3, r8
   1e32e:	4632      	mov	r2, r6
   1e330:	4621      	mov	r1, r4
   1e332:	4628      	mov	r0, r5
}
   1e334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e338:	f7f6 bc7a 	b.w	14c30 <bt_conn_send_cb>

0001e33c <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e33c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1e33e:	b160      	cbz	r0, 1e35a <bt_l2cap_le_lookup_tx_cid+0x1e>
   1e340:	3808      	subs	r0, #8
   1e342:	b900      	cbnz	r0, 1e346 <bt_l2cap_le_lookup_tx_cid+0xa>
   1e344:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e346:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   1e34a:	428b      	cmp	r3, r1
   1e34c:	d005      	beq.n	1e35a <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e34e:	f110 0308 	adds.w	r3, r0, #8
   1e352:	d001      	beq.n	1e358 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e354:	6880      	ldr	r0, [r0, #8]
   1e356:	e7f2      	b.n	1e33e <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1e358:	4618      	mov	r0, r3
}
   1e35a:	4770      	bx	lr

0001e35c <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e35c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1e35e:	b160      	cbz	r0, 1e37a <bt_l2cap_le_lookup_rx_cid+0x1e>
   1e360:	3808      	subs	r0, #8
   1e362:	b900      	cbnz	r0, 1e366 <bt_l2cap_le_lookup_rx_cid+0xa>
   1e364:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e366:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1e36a:	428b      	cmp	r3, r1
   1e36c:	d005      	beq.n	1e37a <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e36e:	f110 0308 	adds.w	r3, r0, #8
   1e372:	d001      	beq.n	1e378 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e374:	6880      	ldr	r0, [r0, #8]
   1e376:	e7f2      	b.n	1e35e <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1e378:	4618      	mov	r0, r3
}
   1e37a:	4770      	bx	lr

0001e37c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1e37c:	4770      	bx	lr

0001e37e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1e37e:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1e380:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1e382:	b128      	cbz	r0, 1e390 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e384:	6859      	ldr	r1, [r3, #4]
   1e386:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e388:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e38a:	4288      	cmp	r0, r1
	list->tail = node;
   1e38c:	bf08      	it	eq
   1e38e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1e390:	4770      	bx	lr

0001e392 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e392:	4603      	mov	r3, r0
   1e394:	6800      	ldr	r0, [r0, #0]
   1e396:	2200      	movs	r2, #0
   1e398:	b900      	cbnz	r0, 1e39c <sys_slist_find_and_remove+0xa>
   1e39a:	4770      	bx	lr
   1e39c:	4288      	cmp	r0, r1
   1e39e:	d110      	bne.n	1e3c2 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1e3a0:	6808      	ldr	r0, [r1, #0]
   1e3a2:	b942      	cbnz	r2, 1e3b6 <sys_slist_find_and_remove+0x24>
   1e3a4:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1e3a6:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e3a8:	4291      	cmp	r1, r2
   1e3aa:	d100      	bne.n	1e3ae <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1e3ac:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1e3ae:	2300      	movs	r3, #0
   1e3b0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e3b2:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1e3b4:	4770      	bx	lr
	parent->next = child;
   1e3b6:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e3b8:	6858      	ldr	r0, [r3, #4]
   1e3ba:	4281      	cmp	r1, r0
	list->tail = node;
   1e3bc:	bf08      	it	eq
   1e3be:	605a      	streq	r2, [r3, #4]
}
   1e3c0:	e7f5      	b.n	1e3ae <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e3c2:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e3c4:	6800      	ldr	r0, [r0, #0]
   1e3c6:	e7e7      	b.n	1e398 <sys_slist_find_and_remove+0x6>

0001e3c8 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1e3c8:	4603      	mov	r3, r0
	size_t bytes = 0;
   1e3ca:	2000      	movs	r0, #0

	while (buf) {
   1e3cc:	b903      	cbnz	r3, 1e3d0 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1e3ce:	4770      	bx	lr
		bytes += buf->len;
   1e3d0:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e3d2:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e3d4:	4410      	add	r0, r2
		buf = buf->frags;
   1e3d6:	e7f9      	b.n	1e3cc <net_buf_frags_len+0x4>

0001e3d8 <att_sent>:
	if (chan->ops->sent) {
   1e3d8:	684b      	ldr	r3, [r1, #4]
   1e3da:	695b      	ldr	r3, [r3, #20]
{
   1e3dc:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1e3de:	b103      	cbz	r3, 1e3e2 <att_sent+0xa>
		chan->ops->sent(chan);
   1e3e0:	4718      	bx	r3
}
   1e3e2:	4770      	bx	lr

0001e3e4 <attr_read_type_cb>:
{
   1e3e4:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1e3e6:	68d4      	ldr	r4, [r2, #12]
   1e3e8:	7823      	ldrb	r3, [r4, #0]
   1e3ea:	3102      	adds	r1, #2
   1e3ec:	b913      	cbnz	r3, 1e3f4 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1e3ee:	7021      	strb	r1, [r4, #0]
	return true;
   1e3f0:	2001      	movs	r0, #1
   1e3f2:	e006      	b.n	1e402 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1e3f4:	428b      	cmp	r3, r1
   1e3f6:	d0fb      	beq.n	1e3f0 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1e3f8:	8983      	ldrh	r3, [r0, #12]
   1e3fa:	3b02      	subs	r3, #2
   1e3fc:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1e3fe:	2000      	movs	r0, #0
   1e400:	6110      	str	r0, [r2, #16]
}
   1e402:	bd10      	pop	{r4, pc}

0001e404 <att_prepare_write_req>:
}
   1e404:	2006      	movs	r0, #6
   1e406:	4770      	bx	lr

0001e408 <att_op_get_type>:
	switch (op) {
   1e408:	281e      	cmp	r0, #30
   1e40a:	d816      	bhi.n	1e43a <att_op_get_type+0x32>
   1e40c:	b308      	cbz	r0, 1e452 <att_op_get_type+0x4a>
   1e40e:	1e43      	subs	r3, r0, #1
   1e410:	2b1d      	cmp	r3, #29
   1e412:	d81e      	bhi.n	1e452 <att_op_get_type+0x4a>
   1e414:	e8df f003 	tbb	[pc, r3]
   1e418:	23172317 	.word	0x23172317
   1e41c:	23172317 	.word	0x23172317
   1e420:	23172317 	.word	0x23172317
   1e424:	23172317 	.word	0x23172317
   1e428:	1d172317 	.word	0x1d172317
   1e42c:	2317231d 	.word	0x2317231d
   1e430:	1d191d17 	.word	0x1d191d17
   1e434:	0f1b      	.short	0x0f1b
   1e436:	2004      	movs	r0, #4
   1e438:	4770      	bx	lr
   1e43a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1e43e:	2b52      	cmp	r3, #82	; 0x52
   1e440:	d107      	bne.n	1e452 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1e442:	2000      	movs	r0, #0
}
   1e444:	4770      	bx	lr
		return ATT_RESPONSE;
   1e446:	2002      	movs	r0, #2
   1e448:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1e44a:	2003      	movs	r0, #3
   1e44c:	4770      	bx	lr
		return ATT_INDICATION;
   1e44e:	2005      	movs	r0, #5
   1e450:	4770      	bx	lr
		return ATT_COMMAND;
   1e452:	f010 0f40 	tst.w	r0, #64	; 0x40
   1e456:	bf0c      	ite	eq
   1e458:	2006      	moveq	r0, #6
   1e45a:	2000      	movne	r0, #0
   1e45c:	4770      	bx	lr
		return ATT_REQUEST;
   1e45e:	2001      	movs	r0, #1
   1e460:	4770      	bx	lr

0001e462 <bt_gatt_foreach_attr>:
{
   1e462:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1e464:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1e468:	2300      	movs	r3, #0
   1e46a:	9300      	str	r3, [sp, #0]
   1e46c:	461a      	mov	r2, r3
   1e46e:	f7f8 fb5f 	bl	16b30 <bt_gatt_foreach_attr_type>
}
   1e472:	b005      	add	sp, #20
   1e474:	f85d fb04 	ldr.w	pc, [sp], #4

0001e478 <att_chan_read>:
{
   1e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e47c:	4680      	mov	r8, r0
   1e47e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e480:	4610      	mov	r0, r2
{
   1e482:	4699      	mov	r9, r3
   1e484:	468b      	mov	fp, r1
   1e486:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e488:	f7ff ff9e 	bl	1e3c8 <net_buf_frags_len>
   1e48c:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1e490:	4283      	cmp	r3, r0
   1e492:	d97a      	bls.n	1e58a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1e494:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e498:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1e49a:	4630      	mov	r0, r6
   1e49c:	f001 fa59 	bl	1f952 <net_buf_frag_last>
	size_t len, total = 0;
   1e4a0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1e4a4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e4a6:	4630      	mov	r0, r6
   1e4a8:	f7ff ff8e 	bl	1e3c8 <net_buf_frags_len>
   1e4ac:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1e4b0:	f105 0708 	add.w	r7, r5, #8
   1e4b4:	1a24      	subs	r4, r4, r0
   1e4b6:	4638      	mov	r0, r7
   1e4b8:	f001 faa8 	bl	1fa0c <net_buf_simple_tailroom>
   1e4bc:	4284      	cmp	r4, r0
   1e4be:	d211      	bcs.n	1e4e4 <att_chan_read+0x6c>
   1e4c0:	4630      	mov	r0, r6
   1e4c2:	f7ff ff81 	bl	1e3c8 <net_buf_frags_len>
   1e4c6:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e4ca:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e4cc:	bb34      	cbnz	r4, 1e51c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e4ce:	79b0      	ldrb	r0, [r6, #6]
   1e4d0:	f7fa fbec 	bl	18cac <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e4d4:	2200      	movs	r2, #0
   1e4d6:	2300      	movs	r3, #0
   1e4d8:	f001 fa07 	bl	1f8ea <net_buf_alloc_fixed>
			if (!frag) {
   1e4dc:	4605      	mov	r5, r0
   1e4de:	b930      	cbnz	r0, 1e4ee <att_chan_read+0x76>
	return total;
   1e4e0:	4657      	mov	r7, sl
   1e4e2:	e02c      	b.n	1e53e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e4e4:	4638      	mov	r0, r7
   1e4e6:	f001 fa91 	bl	1fa0c <net_buf_simple_tailroom>
   1e4ea:	4604      	mov	r4, r0
   1e4ec:	e7ee      	b.n	1e4cc <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1e4ee:	4601      	mov	r1, r0
   1e4f0:	4630      	mov	r0, r6
   1e4f2:	f001 fa3f 	bl	1f974 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e4f6:	4630      	mov	r0, r6
   1e4f8:	f7ff ff66 	bl	1e3c8 <net_buf_frags_len>
   1e4fc:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e500:	f105 0708 	add.w	r7, r5, #8
   1e504:	1a24      	subs	r4, r4, r0
   1e506:	4638      	mov	r0, r7
   1e508:	f001 fa80 	bl	1fa0c <net_buf_simple_tailroom>
   1e50c:	4284      	cmp	r4, r0
   1e50e:	d21a      	bcs.n	1e546 <att_chan_read+0xce>
   1e510:	4630      	mov	r0, r6
   1e512:	f7ff ff59 	bl	1e3c8 <net_buf_frags_len>
   1e516:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e51a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1e51c:	68a9      	ldr	r1, [r5, #8]
   1e51e:	89aa      	ldrh	r2, [r5, #12]
   1e520:	f8db 7004 	ldr.w	r7, [fp, #4]
   1e524:	9803      	ldr	r0, [sp, #12]
   1e526:	f8cd 9000 	str.w	r9, [sp]
   1e52a:	440a      	add	r2, r1
   1e52c:	b2a3      	uxth	r3, r4
   1e52e:	4659      	mov	r1, fp
   1e530:	47b8      	blx	r7
		if (read < 0) {
   1e532:	1e07      	subs	r7, r0, #0
   1e534:	da0c      	bge.n	1e550 <att_chan_read+0xd8>
				return total;
   1e536:	f1ba 0f00 	cmp.w	sl, #0
   1e53a:	bf18      	it	ne
   1e53c:	4657      	movne	r7, sl
}
   1e53e:	4638      	mov	r0, r7
   1e540:	b005      	add	sp, #20
   1e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e546:	4638      	mov	r0, r7
   1e548:	f001 fa60 	bl	1fa0c <net_buf_simple_tailroom>
   1e54c:	4604      	mov	r4, r0
   1e54e:	e7e5      	b.n	1e51c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1e550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e552:	b993      	cbnz	r3, 1e57a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1e554:	4639      	mov	r1, r7
   1e556:	f105 0008 	add.w	r0, r5, #8
   1e55a:	f001 fa1c 	bl	1f996 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e55e:	4630      	mov	r0, r6
   1e560:	f7ff ff32 	bl	1e3c8 <net_buf_frags_len>
   1e564:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   1e568:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e56a:	4283      	cmp	r3, r0
		total += read;
   1e56c:	44ba      	add	sl, r7
		offset += read;
   1e56e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e572:	d9b5      	bls.n	1e4e0 <att_chan_read+0x68>
   1e574:	42a7      	cmp	r7, r4
   1e576:	d096      	beq.n	1e4a6 <att_chan_read+0x2e>
   1e578:	e7b2      	b.n	1e4e0 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1e57a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e57c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e57e:	4639      	mov	r1, r7
   1e580:	4628      	mov	r0, r5
   1e582:	4798      	blx	r3
   1e584:	2800      	cmp	r0, #0
   1e586:	d1e5      	bne.n	1e554 <att_chan_read+0xdc>
   1e588:	e7aa      	b.n	1e4e0 <att_chan_read+0x68>
		return 0;
   1e58a:	2700      	movs	r7, #0
   1e58c:	e7d7      	b.n	1e53e <att_chan_read+0xc6>

0001e58e <find_info_cb>:
{
   1e58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e590:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1e592:	6817      	ldr	r7, [r2, #0]
{
   1e594:	4605      	mov	r5, r0
   1e596:	460e      	mov	r6, r1
   1e598:	4614      	mov	r4, r2
	if (!data->rsp) {
   1e59a:	b963      	cbnz	r3, 1e5b6 <find_info_cb+0x28>
   1e59c:	6850      	ldr	r0, [r2, #4]
   1e59e:	2101      	movs	r1, #1
   1e5a0:	3008      	adds	r0, #8
   1e5a2:	f001 f9f8 	bl	1f996 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e5a6:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e5a8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e5aa:	781b      	ldrb	r3, [r3, #0]
   1e5ac:	2b00      	cmp	r3, #0
   1e5ae:	bf0c      	ite	eq
   1e5b0:	2301      	moveq	r3, #1
   1e5b2:	2302      	movne	r3, #2
   1e5b4:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e5b6:	68a3      	ldr	r3, [r4, #8]
   1e5b8:	781b      	ldrb	r3, [r3, #0]
   1e5ba:	2b01      	cmp	r3, #1
   1e5bc:	d003      	beq.n	1e5c6 <find_info_cb+0x38>
   1e5be:	2b02      	cmp	r3, #2
   1e5c0:	d019      	beq.n	1e5f6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1e5c2:	2000      	movs	r0, #0
   1e5c4:	e016      	b.n	1e5f4 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e5c6:	682b      	ldr	r3, [r5, #0]
   1e5c8:	781b      	ldrb	r3, [r3, #0]
   1e5ca:	2b00      	cmp	r3, #0
   1e5cc:	d1f9      	bne.n	1e5c2 <find_info_cb+0x34>
   1e5ce:	6860      	ldr	r0, [r4, #4]
   1e5d0:	2104      	movs	r1, #4
   1e5d2:	3008      	adds	r0, #8
   1e5d4:	f001 f9df 	bl	1f996 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e5d8:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e5da:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e5dc:	885b      	ldrh	r3, [r3, #2]
   1e5de:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e5e0:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e5e2:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1e5e4:	899b      	ldrh	r3, [r3, #12]
   1e5e6:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1e5ea:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e5ec:	2804      	cmp	r0, #4
   1e5ee:	bf94      	ite	ls
   1e5f0:	2000      	movls	r0, #0
   1e5f2:	2001      	movhi	r0, #1
}
   1e5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e5f6:	682b      	ldr	r3, [r5, #0]
   1e5f8:	781b      	ldrb	r3, [r3, #0]
   1e5fa:	2b02      	cmp	r3, #2
   1e5fc:	d1e1      	bne.n	1e5c2 <find_info_cb+0x34>
   1e5fe:	6860      	ldr	r0, [r4, #4]
   1e600:	2112      	movs	r1, #18
   1e602:	3008      	adds	r0, #8
   1e604:	f001 f9c7 	bl	1f996 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e608:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e60a:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e60c:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1e60e:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e612:	3101      	adds	r1, #1
   1e614:	f7ff f8d0 	bl	1d7b8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1e618:	6863      	ldr	r3, [r4, #4]
   1e61a:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1e61e:	899b      	ldrh	r3, [r3, #12]
   1e620:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e622:	2812      	cmp	r0, #18
   1e624:	e7e3      	b.n	1e5ee <find_info_cb+0x60>

0001e626 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e626:	68d0      	ldr	r0, [r2, #12]
   1e628:	7803      	ldrb	r3, [r0, #0]
   1e62a:	3104      	adds	r1, #4
   1e62c:	b913      	cbnz	r3, 1e634 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e62e:	7001      	strb	r1, [r0, #0]
	return true;
   1e630:	2001      	movs	r0, #1
}
   1e632:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e634:	428b      	cmp	r3, r1
   1e636:	d0fb      	beq.n	1e630 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1e638:	6891      	ldr	r1, [r2, #8]
   1e63a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1e63c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e63e:	3b04      	subs	r3, #4
   1e640:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e642:	6110      	str	r0, [r2, #16]
		return false;
   1e644:	4770      	bx	lr

0001e646 <chan_req_send>:
{
   1e646:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e648:	688e      	ldr	r6, [r1, #8]
{
   1e64a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e64c:	4630      	mov	r0, r6
{
   1e64e:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e650:	f7ff feba 	bl	1e3c8 <net_buf_frags_len>
   1e654:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1e658:	4283      	cmp	r3, r0
   1e65a:	d30a      	bcc.n	1e672 <chan_req_send+0x2c>
	req->buf = NULL;
   1e65c:	2200      	movs	r2, #0
	chan->req = req;
   1e65e:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1e662:	4628      	mov	r0, r5
	req->buf = NULL;
   1e664:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1e666:	4631      	mov	r1, r6
   1e668:	f7f7 f9e4 	bl	15a34 <chan_send>
	if (err) {
   1e66c:	b100      	cbz	r0, 1e670 <chan_req_send+0x2a>
		req->buf = buf;
   1e66e:	60a6      	str	r6, [r4, #8]
}
   1e670:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1e672:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e676:	e7fb      	b.n	1e670 <chan_req_send+0x2a>

0001e678 <process_queue>:
{
   1e678:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1e67a:	2200      	movs	r2, #0
{
   1e67c:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1e67e:	2300      	movs	r3, #0
   1e680:	4608      	mov	r0, r1
{
   1e682:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1e684:	f001 f936 	bl	1f8f4 <net_buf_get>
	if (buf) {
   1e688:	4605      	mov	r5, r0
   1e68a:	b160      	cbz	r0, 1e6a6 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1e68c:	4601      	mov	r1, r0
   1e68e:	2200      	movs	r2, #0
   1e690:	4620      	mov	r0, r4
   1e692:	f7f7 f9cf 	bl	15a34 <chan_send>
		if (err) {
   1e696:	4604      	mov	r4, r0
   1e698:	b118      	cbz	r0, 1e6a2 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1e69a:	4629      	mov	r1, r5
   1e69c:	4630      	mov	r0, r6
   1e69e:	f001 fb86 	bl	1fdae <k_queue_prepend>
}
   1e6a2:	4620      	mov	r0, r4
   1e6a4:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e6a6:	f06f 0401 	mvn.w	r4, #1
   1e6aa:	e7fa      	b.n	1e6a2 <process_queue+0x2a>

0001e6ac <chan_req_sent>:
	if (chan->req) {
   1e6ac:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1e6b0:	b133      	cbz	r3, 1e6c0 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1e6b2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e6b6:	2300      	movs	r3, #0
   1e6b8:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1e6bc:	f7fc ba82 	b.w	1abc4 <k_work_reschedule>
}
   1e6c0:	4770      	bx	lr

0001e6c2 <att_exec_write_req>:
   1e6c2:	2006      	movs	r0, #6
   1e6c4:	4770      	bx	lr

0001e6c6 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e6c6:	30f0      	adds	r0, #240	; 0xf0
   1e6c8:	f3bf 8f5b 	dmb	ish
   1e6cc:	e850 3f00 	ldrex	r3, [r0]
   1e6d0:	f023 0301 	bic.w	r3, r3, #1
   1e6d4:	e840 3200 	strex	r2, r3, [r0]
   1e6d8:	2a00      	cmp	r2, #0
   1e6da:	d1f7      	bne.n	1e6cc <chan_rsp_sent+0x6>
   1e6dc:	f3bf 8f5b 	dmb	ish
}
   1e6e0:	4770      	bx	lr

0001e6e2 <chan_cfm_sent>:
   1e6e2:	30f0      	adds	r0, #240	; 0xf0
   1e6e4:	f3bf 8f5b 	dmb	ish
   1e6e8:	e850 3f00 	ldrex	r3, [r0]
   1e6ec:	f023 0302 	bic.w	r3, r3, #2
   1e6f0:	e840 3200 	strex	r2, r3, [r0]
   1e6f4:	2a00      	cmp	r2, #0
   1e6f6:	d1f7      	bne.n	1e6e8 <chan_cfm_sent+0x6>
   1e6f8:	f3bf 8f5b 	dmb	ish
}
   1e6fc:	4770      	bx	lr

0001e6fe <bt_att_status>:
{
   1e6fe:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e700:	f3bf 8f5b 	dmb	ish
   1e704:	680b      	ldr	r3, [r1, #0]
   1e706:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e70a:	07db      	lsls	r3, r3, #31
{
   1e70c:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e70e:	d519      	bpl.n	1e744 <bt_att_status+0x46>
	if (!chan->att) {
   1e710:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e714:	b1b0      	cbz	r0, 1e744 <bt_att_status+0x46>
	if (chan->req) {
   1e716:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1e71a:	b99b      	cbnz	r3, 1e744 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1e71c:	3004      	adds	r0, #4
   1e71e:	f7ff fe2e 	bl	1e37e <sys_slist_get>
	if (!node) {
   1e722:	4604      	mov	r4, r0
   1e724:	b170      	cbz	r0, 1e744 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1e726:	4601      	mov	r1, r0
   1e728:	f1a5 0008 	sub.w	r0, r5, #8
   1e72c:	f7ff ff8b 	bl	1e646 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e730:	2800      	cmp	r0, #0
   1e732:	da07      	bge.n	1e744 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1e734:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1e738:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1e73a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e73c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1e73e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e740:	b902      	cbnz	r2, 1e744 <bt_att_status+0x46>
	list->tail = node;
   1e742:	609c      	str	r4, [r3, #8]
}
   1e744:	bd38      	pop	{r3, r4, r5, pc}

0001e746 <att_req_send_process>:
{
   1e746:	b570      	push	{r4, r5, r6, lr}
   1e748:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1e74a:	3004      	adds	r0, #4
   1e74c:	f7ff fe17 	bl	1e37e <sys_slist_get>
	if (!node) {
   1e750:	4606      	mov	r6, r0
   1e752:	b1c0      	cbz	r0, 1e786 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e754:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e756:	b153      	cbz	r3, 1e76e <att_req_send_process+0x28>
   1e758:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1e75c:	d007      	beq.n	1e76e <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e75e:	681c      	ldr	r4, [r3, #0]
   1e760:	b10c      	cbz	r4, 1e766 <att_req_send_process+0x20>
   1e762:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1e766:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1e76a:	b13b      	cbz	r3, 1e77c <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e76c:	b964      	cbnz	r4, 1e788 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   1e76e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1e770:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e772:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1e774:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e776:	b933      	cbnz	r3, 1e786 <att_req_send_process+0x40>
	list->tail = node;
   1e778:	60ae      	str	r6, [r5, #8]
}
   1e77a:	e004      	b.n	1e786 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1e77c:	4631      	mov	r1, r6
   1e77e:	f7ff ff62 	bl	1e646 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e782:	2800      	cmp	r0, #0
   1e784:	dbf2      	blt.n	1e76c <att_req_send_process+0x26>
}
   1e786:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e788:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1e78c:	d004      	beq.n	1e798 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e78e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e792:	b10b      	cbz	r3, 1e798 <att_req_send_process+0x52>
   1e794:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1e798:	4620      	mov	r0, r4
   1e79a:	461c      	mov	r4, r3
   1e79c:	e7e3      	b.n	1e766 <att_req_send_process+0x20>

0001e79e <write_cb>:
{
   1e79e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e7a0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e7a2:	4601      	mov	r1, r0
{
   1e7a4:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e7a6:	222a      	movs	r2, #42	; 0x2a
   1e7a8:	6820      	ldr	r0, [r4, #0]
   1e7aa:	f000 fbad 	bl	1ef08 <bt_gatt_check_perm>
   1e7ae:	4605      	mov	r5, r0
   1e7b0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e7b2:	bb00      	cbnz	r0, 1e7f6 <write_cb+0x58>
	if (!data->req) {
   1e7b4:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1e7b6:	68b7      	ldr	r7, [r6, #8]
   1e7b8:	68e2      	ldr	r2, [r4, #12]
   1e7ba:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1e7bc:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e7be:	bf14      	ite	ne
   1e7c0:	2300      	movne	r3, #0
   1e7c2:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e7c4:	9301      	str	r3, [sp, #4]
   1e7c6:	8a63      	ldrh	r3, [r4, #18]
   1e7c8:	9300      	str	r3, [sp, #0]
   1e7ca:	4631      	mov	r1, r6
   1e7cc:	8a23      	ldrh	r3, [r4, #16]
   1e7ce:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1e7d0:	1e03      	subs	r3, r0, #0
   1e7d2:	db05      	blt.n	1e7e0 <write_cb+0x42>
   1e7d4:	8a22      	ldrh	r2, [r4, #16]
   1e7d6:	4293      	cmp	r3, r2
   1e7d8:	d10b      	bne.n	1e7f2 <write_cb+0x54>
	data->err = 0U;
   1e7da:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e7dc:	2501      	movs	r5, #1
   1e7de:	e005      	b.n	1e7ec <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1e7e0:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1e7e4:	d305      	bcc.n	1e7f2 <write_cb+0x54>
		return -err;
   1e7e6:	425b      	negs	r3, r3
   1e7e8:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1e7ea:	7523      	strb	r3, [r4, #20]
}
   1e7ec:	4628      	mov	r0, r5
   1e7ee:	b003      	add	sp, #12
   1e7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e7f2:	230e      	movs	r3, #14
   1e7f4:	e7f9      	b.n	1e7ea <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1e7f6:	2500      	movs	r5, #0
   1e7f8:	e7f8      	b.n	1e7ec <write_cb+0x4e>

0001e7fa <bt_att_sent>:
{
   1e7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1e7fc:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1e800:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1e804:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1e806:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1e80a:	b10b      	cbz	r3, 1e810 <bt_att_sent+0x16>
		chan->sent(chan);
   1e80c:	4638      	mov	r0, r7
   1e80e:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e810:	f3bf 8f5b 	dmb	ish
   1e814:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1e818:	e853 2f00 	ldrex	r2, [r3]
   1e81c:	f022 0210 	bic.w	r2, r2, #16
   1e820:	e843 2100 	strex	r1, r2, [r3]
   1e824:	2900      	cmp	r1, #0
   1e826:	d1f7      	bne.n	1e818 <bt_att_sent+0x1e>
   1e828:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1e82c:	b30c      	cbz	r4, 1e872 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1e82e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1e832:	b98b      	cbnz	r3, 1e858 <bt_att_sent+0x5e>
   1e834:	6863      	ldr	r3, [r4, #4]
   1e836:	b17b      	cbz	r3, 1e858 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e838:	1d20      	adds	r0, r4, #4
   1e83a:	f7ff fda0 	bl	1e37e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e83e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e840:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e842:	4638      	mov	r0, r7
   1e844:	f7ff feff 	bl	1e646 <chan_req_send>
   1e848:	2800      	cmp	r0, #0
   1e84a:	da12      	bge.n	1e872 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   1e84c:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1e84e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e850:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1e852:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e854:	b903      	cbnz	r3, 1e858 <bt_att_sent+0x5e>
	list->tail = node;
   1e856:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1e858:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1e85c:	4638      	mov	r0, r7
   1e85e:	f7ff ff0b 	bl	1e678 <process_queue>
	if (!err) {
   1e862:	b130      	cbz	r0, 1e872 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1e864:	f104 010c 	add.w	r1, r4, #12
   1e868:	4638      	mov	r0, r7
}
   1e86a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1e86e:	f7ff bf03 	b.w	1e678 <process_queue>
}
   1e872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e874 <read_cb>:
{
   1e874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1e878:	f8d2 8000 	ldr.w	r8, [r2]
{
   1e87c:	4606      	mov	r6, r0
	data->err = 0x00;
   1e87e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1e880:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1e884:	7317      	strb	r7, [r2, #12]
{
   1e886:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e888:	4631      	mov	r1, r6
   1e88a:	2215      	movs	r2, #21
   1e88c:	f000 fb3c 	bl	1ef08 <bt_gatt_check_perm>
   1e890:	4604      	mov	r4, r0
   1e892:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1e894:	b9a0      	cbnz	r0, 1e8c0 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1e896:	e9cd 0000 	strd	r0, r0, [sp]
   1e89a:	88ab      	ldrh	r3, [r5, #4]
   1e89c:	68aa      	ldr	r2, [r5, #8]
   1e89e:	4631      	mov	r1, r6
   1e8a0:	4640      	mov	r0, r8
   1e8a2:	f7ff fde9 	bl	1e478 <att_chan_read>
	if (ret < 0) {
   1e8a6:	1e03      	subs	r3, r0, #0
   1e8a8:	da0c      	bge.n	1e8c4 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1e8aa:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1e8ae:	bf26      	itte	cs
   1e8b0:	425b      	negcs	r3, r3
   1e8b2:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1e8b4:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1e8b6:	732b      	strb	r3, [r5, #12]
}
   1e8b8:	4620      	mov	r0, r4
   1e8ba:	b002      	add	sp, #8
   1e8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1e8c0:	463c      	mov	r4, r7
   1e8c2:	e7f9      	b.n	1e8b8 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1e8c4:	2401      	movs	r4, #1
   1e8c6:	e7f7      	b.n	1e8b8 <read_cb+0x44>

0001e8c8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1e8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8cc:	4688      	mov	r8, r1
   1e8ce:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1e8d0:	2101      	movs	r1, #1
   1e8d2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1e8d4:	4605      	mov	r5, r0
   1e8d6:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1e8d8:	f7f7 fa3a 	bl	15d50 <bt_att_chan_create_pdu>
	if (!buf) {
   1e8dc:	4604      	mov	r4, r0
   1e8de:	b170      	cbz	r0, 1e8fe <send_err_rsp.part.0+0x36>
   1e8e0:	2104      	movs	r1, #4
   1e8e2:	3008      	adds	r0, #8
   1e8e4:	f001 f857 	bl	1f996 <net_buf_simple_add>
	rsp->request = req;
   1e8e8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1e8ec:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1e8ee:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1e8f2:	4621      	mov	r1, r4
   1e8f4:	4628      	mov	r0, r5
}
   1e8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1e8fa:	f7f7 b949 	b.w	15b90 <bt_att_chan_send_rsp.constprop.0>
}
   1e8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e902 <att_read_blob_req>:
{
   1e902:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1e904:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1e906:	8813      	ldrh	r3, [r2, #0]
   1e908:	8852      	ldrh	r2, [r2, #2]
   1e90a:	9200      	str	r2, [sp, #0]
   1e90c:	210c      	movs	r1, #12
   1e90e:	220d      	movs	r2, #13
   1e910:	f7f7 fc68 	bl	161e4 <att_read_rsp>
}
   1e914:	b003      	add	sp, #12
   1e916:	f85d fb04 	ldr.w	pc, [sp], #4

0001e91a <att_read_req>:
{
   1e91a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1e91c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1e91e:	2200      	movs	r2, #0
   1e920:	881b      	ldrh	r3, [r3, #0]
   1e922:	9200      	str	r2, [sp, #0]
   1e924:	210a      	movs	r1, #10
   1e926:	220b      	movs	r2, #11
   1e928:	f7f7 fc5c 	bl	161e4 <att_read_rsp>
}
   1e92c:	b003      	add	sp, #12
   1e92e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e932 <att_mtu_req>:
{
   1e932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1e934:	6803      	ldr	r3, [r0, #0]
{
   1e936:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1e938:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e93a:	f3bf 8f5b 	dmb	ish
   1e93e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   1e942:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1e946:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1e94a:	071b      	lsls	r3, r3, #28
   1e94c:	d41d      	bmi.n	1e98a <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1e94e:	688b      	ldr	r3, [r1, #8]
   1e950:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1e952:	2e16      	cmp	r6, #22
   1e954:	d91b      	bls.n	1e98e <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1e956:	2202      	movs	r2, #2
   1e958:	2103      	movs	r1, #3
   1e95a:	f7f7 fb47 	bl	15fec <bt_att_create_pdu>
	if (!pdu) {
   1e95e:	4607      	mov	r7, r0
   1e960:	b1b8      	cbz	r0, 1e992 <att_mtu_req+0x60>
   1e962:	2102      	movs	r1, #2
   1e964:	3008      	adds	r0, #8
   1e966:	f001 f816 	bl	1f996 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1e96a:	2341      	movs	r3, #65	; 0x41
   1e96c:	7003      	strb	r3, [r0, #0]
   1e96e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1e970:	4639      	mov	r1, r7
   1e972:	4628      	mov	r0, r5
   1e974:	f7f7 f90c 	bl	15b90 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1e978:	2e41      	cmp	r6, #65	; 0x41
   1e97a:	bf28      	it	cs
   1e97c:	2641      	movcs	r6, #65	; 0x41
   1e97e:	f8a5 607a 	strh.w	r6, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1e982:	f8a5 6086 	strh.w	r6, [r5, #134]	; 0x86
	return 0;
   1e986:	4620      	mov	r0, r4
}
   1e988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1e98a:	2006      	movs	r0, #6
   1e98c:	e7fc      	b.n	1e988 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   1e98e:	2004      	movs	r0, #4
   1e990:	e7fa      	b.n	1e988 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   1e992:	200e      	movs	r0, #14
   1e994:	e7f8      	b.n	1e988 <att_mtu_req+0x56>

0001e996 <bt_att_init>:
	bt_gatt_init();
   1e996:	f7f8 b84b 	b.w	16a30 <bt_gatt_init>

0001e99a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1e99a:	898a      	ldrh	r2, [r1, #12]
   1e99c:	6889      	ldr	r1, [r1, #8]
   1e99e:	2300      	movs	r3, #0
   1e9a0:	f7f7 bd92 	b.w	164c8 <att_handle_rsp>

0001e9a4 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   1e9a4:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   1e9a8:	b570      	push	{r4, r5, r6, lr}
   1e9aa:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1e9ac:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   1e9b0:	2b00      	cmp	r3, #0
   1e9b2:	d037      	beq.n	1ea24 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   1e9b4:	b171      	cbz	r1, 1e9d4 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   1e9b6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   1e9ba:	2b00      	cmp	r3, #0
   1e9bc:	d032      	beq.n	1ea24 <bt_att_encrypt_change+0x80>
   1e9be:	7c1b      	ldrb	r3, [r3, #16]
   1e9c0:	07da      	lsls	r2, r3, #31
   1e9c2:	d52f      	bpl.n	1ea24 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   1e9c4:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   1e9c6:	2200      	movs	r2, #0
   1e9c8:	4630      	mov	r0, r6
   1e9ca:	4611      	mov	r1, r2
}
   1e9cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   1e9d0:	f7f7 bd7a 	b.w	164c8 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   1e9d4:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1e9d6:	4628      	mov	r0, r5
   1e9d8:	f7f8 fc84 	bl	172e4 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1e9dc:	7a6b      	ldrb	r3, [r5, #9]
   1e9de:	2b01      	cmp	r3, #1
   1e9e0:	d020      	beq.n	1ea24 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1e9e2:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   1e9e6:	b1ec      	cbz	r4, 1ea24 <bt_att_encrypt_change+0x80>
   1e9e8:	7c23      	ldrb	r3, [r4, #16]
   1e9ea:	07db      	lsls	r3, r3, #31
   1e9ec:	d51a      	bpl.n	1ea24 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   1e9ee:	68e3      	ldr	r3, [r4, #12]
   1e9f0:	2b00      	cmp	r3, #0
   1e9f2:	d0e7      	beq.n	1e9c4 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1e9f4:	6962      	ldr	r2, [r4, #20]
   1e9f6:	7c61      	ldrb	r1, [r4, #17]
   1e9f8:	4630      	mov	r0, r6
   1e9fa:	f7f7 f9a9 	bl	15d50 <bt_att_chan_create_pdu>
	if (!buf) {
   1e9fe:	4605      	mov	r5, r0
   1ea00:	b140      	cbz	r0, 1ea14 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   1ea02:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   1ea06:	68e3      	ldr	r3, [r4, #12]
   1ea08:	4798      	blx	r3
   1ea0a:	4602      	mov	r2, r0
   1ea0c:	b120      	cbz	r0, 1ea18 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   1ea0e:	4628      	mov	r0, r5
   1ea10:	f7fa fa08 	bl	18e24 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1ea14:	230e      	movs	r3, #14
   1ea16:	e7d6      	b.n	1e9c6 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   1ea18:	4629      	mov	r1, r5
   1ea1a:	4630      	mov	r0, r6
   1ea1c:	f7f7 f80a 	bl	15a34 <chan_send>
   1ea20:	2800      	cmp	r0, #0
   1ea22:	d1f4      	bne.n	1ea0e <bt_att_encrypt_change+0x6a>
}
   1ea24:	bd70      	pop	{r4, r5, r6, pc}

0001ea26 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1ea26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ea2a:	4607      	mov	r7, r0
   1ea2c:	460d      	mov	r5, r1
   1ea2e:	4616      	mov	r6, r2
   1ea30:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1ea32:	f7f7 f86d 	bl	15b10 <att_get>
	if (!att) {
   1ea36:	4604      	mov	r4, r0
   1ea38:	b938      	cbnz	r0, 1ea4a <bt_att_send+0x24>
		net_buf_unref(buf);
   1ea3a:	4628      	mov	r0, r5
   1ea3c:	f7fa f9f2 	bl	18e24 <net_buf_unref>
		return -ENOTCONN;
   1ea40:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1ea44:	b002      	add	sp, #8
   1ea46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1ea4a:	b146      	cbz	r6, 1ea5e <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1ea4c:	f8cd 8000 	str.w	r8, [sp]
   1ea50:	4633      	mov	r3, r6
   1ea52:	462a      	mov	r2, r5
   1ea54:	2104      	movs	r1, #4
   1ea56:	4638      	mov	r0, r7
   1ea58:	f7ff fc57 	bl	1e30a <bt_l2cap_send_cb>
   1ea5c:	e7f2      	b.n	1ea44 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1ea5e:	f100 060c 	add.w	r6, r0, #12
   1ea62:	4629      	mov	r1, r5
   1ea64:	4630      	mov	r0, r6
   1ea66:	f000 ff63 	bl	1f930 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1ea6a:	2200      	movs	r2, #0
   1ea6c:	2300      	movs	r3, #0
   1ea6e:	4630      	mov	r0, r6
   1ea70:	f000 ff40 	bl	1f8f4 <net_buf_get>
	if (!buf) {
   1ea74:	4605      	mov	r5, r0
   1ea76:	b908      	cbnz	r0, 1ea7c <bt_att_send+0x56>
	return 0;
   1ea78:	2000      	movs	r0, #0
   1ea7a:	e7e3      	b.n	1ea44 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ea7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ea7e:	b1c3      	cbz	r3, 1eab2 <bt_att_send+0x8c>
   1ea80:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1ea84:	d015      	beq.n	1eab2 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ea86:	681c      	ldr	r4, [r3, #0]
   1ea88:	b10c      	cbz	r4, 1ea8e <bt_att_send+0x68>
   1ea8a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1ea8e:	2200      	movs	r2, #0
   1ea90:	4629      	mov	r1, r5
   1ea92:	f7f6 ffcf 	bl	15a34 <chan_send>
		if (err >= 0) {
   1ea96:	2800      	cmp	r0, #0
   1ea98:	daee      	bge.n	1ea78 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ea9a:	b154      	cbz	r4, 1eab2 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea9c:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1eaa0:	d004      	beq.n	1eaac <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eaa2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1eaa6:	b10b      	cbz	r3, 1eaac <bt_att_send+0x86>
   1eaa8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1eaac:	4620      	mov	r0, r4
   1eaae:	461c      	mov	r4, r3
   1eab0:	e7ed      	b.n	1ea8e <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1eab2:	4629      	mov	r1, r5
   1eab4:	4630      	mov	r0, r6
   1eab6:	f001 f97a 	bl	1fdae <k_queue_prepend>
   1eaba:	e7dd      	b.n	1ea78 <bt_att_send+0x52>

0001eabc <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1eabc:	b510      	push	{r4, lr}
   1eabe:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1eac0:	f7f7 f826 	bl	15b10 <att_get>
	if (!att) {
   1eac4:	b160      	cbz	r0, 1eae0 <bt_att_req_send+0x24>
	parent->next = child;
   1eac6:	2300      	movs	r3, #0
   1eac8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1eaca:	6883      	ldr	r3, [r0, #8]
   1eacc:	b92b      	cbnz	r3, 1eada <bt_att_req_send+0x1e>
	list->head = node;
   1eace:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1ead2:	f7ff fe38 	bl	1e746 <att_req_send_process>

	return 0;
   1ead6:	2000      	movs	r0, #0
}
   1ead8:	bd10      	pop	{r4, pc}
	parent->next = child;
   1eada:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1eadc:	6084      	str	r4, [r0, #8]
}
   1eade:	e7f8      	b.n	1ead2 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1eae0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1eae4:	e7f8      	b.n	1ead8 <bt_att_req_send+0x1c>

0001eae6 <gatt_ccc_changed>:
{
   1eae6:	460b      	mov	r3, r1
   1eae8:	8909      	ldrh	r1, [r1, #8]
   1eaea:	8a5a      	ldrh	r2, [r3, #18]
   1eaec:	4291      	cmp	r1, r2
   1eaee:	bf38      	it	cc
   1eaf0:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1eaf2:	8a9a      	ldrh	r2, [r3, #20]
   1eaf4:	428a      	cmp	r2, r1
   1eaf6:	d003      	beq.n	1eb00 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1eaf8:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1eafa:	699b      	ldr	r3, [r3, #24]
   1eafc:	b103      	cbz	r3, 1eb00 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1eafe:	4718      	bx	r3
}
   1eb00:	4770      	bx	lr

0001eb02 <gatt_indicate_rsp>:
{
   1eb02:	b510      	push	{r4, lr}
   1eb04:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1eb06:	68a3      	ldr	r3, [r4, #8]
{
   1eb08:	460a      	mov	r2, r1
	if (params->func) {
   1eb0a:	b10b      	cbz	r3, 1eb10 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1eb0c:	4621      	mov	r1, r4
   1eb0e:	4798      	blx	r3
	params->_ref--;
   1eb10:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1eb12:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1eb14:	3b01      	subs	r3, #1
   1eb16:	b2db      	uxtb	r3, r3
   1eb18:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1eb1a:	b122      	cbz	r2, 1eb26 <gatt_indicate_rsp+0x24>
   1eb1c:	b91b      	cbnz	r3, 1eb26 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1eb1e:	4620      	mov	r0, r4
}
   1eb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1eb24:	4710      	bx	r2
}
   1eb26:	bd10      	pop	{r4, pc}

0001eb28 <match_uuid>:
	data->attr = attr;
   1eb28:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1eb2a:	8091      	strh	r1, [r2, #4]
}
   1eb2c:	2000      	movs	r0, #0
   1eb2e:	4770      	bx	lr

0001eb30 <gen_hash_m>:
{
   1eb30:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1eb32:	6807      	ldr	r7, [r0, #0]
   1eb34:	783d      	ldrb	r5, [r7, #0]
{
   1eb36:	b089      	sub	sp, #36	; 0x24
   1eb38:	4606      	mov	r6, r0
   1eb3a:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1eb3c:	b10d      	cbz	r5, 1eb42 <gen_hash_m+0x12>
	switch (u16->val) {
   1eb3e:	2501      	movs	r5, #1
   1eb40:	e014      	b.n	1eb6c <gen_hash_m+0x3c>
   1eb42:	887b      	ldrh	r3, [r7, #2]
   1eb44:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1eb48:	d004      	beq.n	1eb54 <gen_hash_m+0x24>
   1eb4a:	d812      	bhi.n	1eb72 <gen_hash_m+0x42>
   1eb4c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1eb50:	2b03      	cmp	r3, #3
   1eb52:	d8f4      	bhi.n	1eb3e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1eb54:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1eb58:	2202      	movs	r2, #2
   1eb5a:	f10d 010e 	add.w	r1, sp, #14
   1eb5e:	4620      	mov	r0, r4
   1eb60:	f7fe fd31 	bl	1d5c6 <tc_cmac_update>
   1eb64:	b9e0      	cbnz	r0, 1eba0 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1eb66:	f06f 0315 	mvn.w	r3, #21
   1eb6a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1eb6c:	4628      	mov	r0, r5
   1eb6e:	b009      	add	sp, #36	; 0x24
   1eb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1eb72:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1eb76:	33ff      	adds	r3, #255	; 0xff
   1eb78:	b29b      	uxth	r3, r3
   1eb7a:	2b04      	cmp	r3, #4
   1eb7c:	d8df      	bhi.n	1eb3e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1eb7e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1eb82:	2202      	movs	r2, #2
   1eb84:	f10d 010e 	add.w	r1, sp, #14
   1eb88:	4620      	mov	r0, r4
   1eb8a:	f7fe fd1c 	bl	1d5c6 <tc_cmac_update>
   1eb8e:	2800      	cmp	r0, #0
   1eb90:	d0e9      	beq.n	1eb66 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1eb92:	887b      	ldrh	r3, [r7, #2]
   1eb94:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1eb98:	2202      	movs	r2, #2
   1eb9a:	f10d 010e 	add.w	r1, sp, #14
   1eb9e:	e017      	b.n	1ebd0 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1eba0:	887b      	ldrh	r3, [r7, #2]
   1eba2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1eba6:	2202      	movs	r2, #2
   1eba8:	f10d 010e 	add.w	r1, sp, #14
   1ebac:	4620      	mov	r0, r4
   1ebae:	f7fe fd0a 	bl	1d5c6 <tc_cmac_update>
   1ebb2:	2800      	cmp	r0, #0
   1ebb4:	d0d7      	beq.n	1eb66 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ebb6:	2000      	movs	r0, #0
   1ebb8:	2310      	movs	r3, #16
   1ebba:	eb0d 0203 	add.w	r2, sp, r3
   1ebbe:	6877      	ldr	r7, [r6, #4]
   1ebc0:	9000      	str	r0, [sp, #0]
   1ebc2:	4631      	mov	r1, r6
   1ebc4:	47b8      	blx	r7
		if (len < 0) {
   1ebc6:	1e02      	subs	r2, r0, #0
   1ebc8:	da01      	bge.n	1ebce <gen_hash_m+0x9e>
			state->err = len;
   1ebca:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1ebcc:	e7ce      	b.n	1eb6c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1ebce:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ebd0:	4620      	mov	r0, r4
   1ebd2:	f7fe fcf8 	bl	1d5c6 <tc_cmac_update>
   1ebd6:	2800      	cmp	r0, #0
   1ebd8:	d1b1      	bne.n	1eb3e <gen_hash_m+0xe>
   1ebda:	e7c4      	b.n	1eb66 <gen_hash_m+0x36>

0001ebdc <clear_cf_cfg>:
{
   1ebdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ebde:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ebe0:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   1ebe2:	2207      	movs	r2, #7
   1ebe4:	4669      	mov	r1, sp
   1ebe6:	3001      	adds	r0, #1
   1ebe8:	9500      	str	r5, [sp, #0]
   1ebea:	f8cd 5003 	str.w	r5, [sp, #3]
   1ebee:	f7fe fde3 	bl	1d7b8 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1ebf2:	f104 0008 	add.w	r0, r4, #8
   1ebf6:	2201      	movs	r2, #1
   1ebf8:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ebfa:	340c      	adds	r4, #12
   1ebfc:	f7fe fe07 	bl	1d80e <memset>
   1ec00:	f3bf 8f5b 	dmb	ish
   1ec04:	e854 3f00 	ldrex	r3, [r4]
   1ec08:	e844 5200 	strex	r2, r5, [r4]
   1ec0c:	2a00      	cmp	r2, #0
   1ec0e:	d1f9      	bne.n	1ec04 <clear_cf_cfg+0x28>
   1ec10:	f3bf 8f5b 	dmb	ish
}
   1ec14:	b003      	add	sp, #12
   1ec16:	bd30      	pop	{r4, r5, pc}

0001ec18 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ec18:	2301      	movs	r3, #1
   1ec1a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ec1c:	f3bf 8f5b 	dmb	ish
   1ec20:	e850 2f00 	ldrex	r2, [r0]
   1ec24:	431a      	orrs	r2, r3
   1ec26:	e840 2100 	strex	r1, r2, [r0]
   1ec2a:	2900      	cmp	r1, #0
   1ec2c:	d1f8      	bne.n	1ec20 <atomic_set_bit+0x8>
   1ec2e:	f3bf 8f5b 	dmb	ish
}
   1ec32:	4770      	bx	lr

0001ec34 <sc_restore_rsp>:
{
   1ec34:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1ec36:	f7f7 fd23 	bl	16680 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ec3a:	b140      	cbz	r0, 1ec4e <sc_restore_rsp+0x1a>
   1ec3c:	7a03      	ldrb	r3, [r0, #8]
   1ec3e:	07db      	lsls	r3, r3, #31
   1ec40:	d505      	bpl.n	1ec4e <sc_restore_rsp+0x1a>
}
   1ec42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ec46:	2100      	movs	r1, #0
   1ec48:	300c      	adds	r0, #12
   1ec4a:	f7ff bfe5 	b.w	1ec18 <atomic_set_bit>
}
   1ec4e:	bd08      	pop	{r3, pc}

0001ec50 <find_ccc_cfg>:
{
   1ec50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ec52:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ec54:	1c4c      	adds	r4, r1, #1
   1ec56:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1ec5a:	1e67      	subs	r7, r4, #1
		if (conn) {
   1ec5c:	b14e      	cbz	r6, 1ec72 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ec5e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1ec62:	4622      	mov	r2, r4
   1ec64:	4630      	mov	r0, r6
   1ec66:	f7ff fa20 	bl	1e0aa <bt_conn_is_peer_addr_le>
   1ec6a:	b160      	cbz	r0, 1ec86 <find_ccc_cfg+0x36>
}
   1ec6c:	4638      	mov	r0, r7
   1ec6e:	b003      	add	sp, #12
   1ec70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   1ec72:	2207      	movs	r2, #7
   1ec74:	4669      	mov	r1, sp
   1ec76:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ec78:	9600      	str	r6, [sp, #0]
   1ec7a:	f8cd 6003 	str.w	r6, [sp, #3]
   1ec7e:	f7fe fd8b 	bl	1d798 <memcmp>
   1ec82:	2800      	cmp	r0, #0
   1ec84:	d0f2      	beq.n	1ec6c <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ec86:	340a      	adds	r4, #10
   1ec88:	42ac      	cmp	r4, r5
   1ec8a:	d1e6      	bne.n	1ec5a <find_ccc_cfg+0xa>
	return NULL;
   1ec8c:	2700      	movs	r7, #0
   1ec8e:	e7ed      	b.n	1ec6c <find_ccc_cfg+0x1c>

0001ec90 <read_appearance>:
{
   1ec90:	b513      	push	{r0, r1, r4, lr}
   1ec92:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ec96:	4610      	mov	r0, r2
	if (offset > value_len) {
   1ec98:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ec9a:	f240 3241 	movw	r2, #833	; 0x341
   1ec9e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1eca2:	d80d      	bhi.n	1ecc0 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1eca4:	f1c1 0402 	rsb	r4, r1, #2
   1eca8:	429c      	cmp	r4, r3
   1ecaa:	bfa8      	it	ge
   1ecac:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1ecae:	f10d 0306 	add.w	r3, sp, #6
   1ecb2:	4622      	mov	r2, r4
   1ecb4:	4419      	add	r1, r3
   1ecb6:	f7fe fd7f 	bl	1d7b8 <memcpy>
}
   1ecba:	4620      	mov	r0, r4
   1ecbc:	b002      	add	sp, #8
   1ecbe:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ecc0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1ecc4:	e7f9      	b.n	1ecba <read_appearance+0x2a>

0001ecc6 <read_name>:
{
   1ecc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ecca:	4698      	mov	r8, r3
   1eccc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1ecd0:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1ecd2:	f7f4 fe31 	bl	13938 <bt_get_name>
   1ecd6:	4607      	mov	r7, r0
				 strlen(name));
   1ecd8:	f7fe fd42 	bl	1d760 <strlen>
	if (offset > value_len) {
   1ecdc:	b283      	uxth	r3, r0
   1ecde:	42b3      	cmp	r3, r6
   1ece0:	d30c      	bcc.n	1ecfc <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1ece2:	1b9c      	subs	r4, r3, r6
   1ece4:	4544      	cmp	r4, r8
   1ece6:	bfa8      	it	ge
   1ece8:	4644      	movge	r4, r8
   1ecea:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1ecec:	4622      	mov	r2, r4
   1ecee:	19b9      	adds	r1, r7, r6
   1ecf0:	4628      	mov	r0, r5
   1ecf2:	f7fe fd61 	bl	1d7b8 <memcpy>
}
   1ecf6:	4620      	mov	r0, r4
   1ecf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ecfc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1ed00:	e7f9      	b.n	1ecf6 <read_name+0x30>

0001ed02 <cf_read>:
{
   1ed02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ed04:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1ed06:	2300      	movs	r3, #0
{
   1ed08:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1ed0c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ed10:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1ed12:	f7f7 fcb5 	bl	16680 <find_cf_cfg>
	if (cfg) {
   1ed16:	b128      	cbz	r0, 1ed24 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1ed18:	f100 0108 	add.w	r1, r0, #8
   1ed1c:	2201      	movs	r2, #1
   1ed1e:	a801      	add	r0, sp, #4
   1ed20:	f7fe fd4a 	bl	1d7b8 <memcpy>
	if (offset > value_len) {
   1ed24:	2e01      	cmp	r6, #1
   1ed26:	d80d      	bhi.n	1ed44 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1ed28:	f1c6 0401 	rsb	r4, r6, #1
   1ed2c:	42bc      	cmp	r4, r7
   1ed2e:	bfa8      	it	ge
   1ed30:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ed32:	ab01      	add	r3, sp, #4
   1ed34:	4622      	mov	r2, r4
   1ed36:	1999      	adds	r1, r3, r6
   1ed38:	4628      	mov	r0, r5
   1ed3a:	f7fe fd3d 	bl	1d7b8 <memcpy>
}
   1ed3e:	4620      	mov	r0, r4
   1ed40:	b003      	add	sp, #12
   1ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ed44:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1ed48:	e7f9      	b.n	1ed3e <cf_read+0x3c>

0001ed4a <bt_gatt_attr_read_ccc>:
{
   1ed4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1ed4c:	68c9      	ldr	r1, [r1, #12]
{
   1ed4e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1ed52:	4615      	mov	r5, r2
   1ed54:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1ed56:	f7ff ff7b 	bl	1ec50 <find_ccc_cfg>
	if (cfg) {
   1ed5a:	b100      	cbz	r0, 1ed5e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1ed5c:	8900      	ldrh	r0, [r0, #8]
   1ed5e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1ed62:	2e02      	cmp	r6, #2
   1ed64:	d80e      	bhi.n	1ed84 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1ed66:	f1c6 0402 	rsb	r4, r6, #2
   1ed6a:	42bc      	cmp	r4, r7
   1ed6c:	bfa8      	it	ge
   1ed6e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ed70:	f10d 0306 	add.w	r3, sp, #6
   1ed74:	4622      	mov	r2, r4
   1ed76:	1999      	adds	r1, r3, r6
   1ed78:	4628      	mov	r0, r5
   1ed7a:	f7fe fd1d 	bl	1d7b8 <memcpy>
}
   1ed7e:	4620      	mov	r0, r4
   1ed80:	b003      	add	sp, #12
   1ed82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ed84:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1ed88:	e7f9      	b.n	1ed7e <bt_gatt_attr_read_ccc+0x34>

0001ed8a <bt_gatt_attr_read_service>:
{
   1ed8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1ed8c:	68c9      	ldr	r1, [r1, #12]
{
   1ed8e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1ed92:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1ed94:	780b      	ldrb	r3, [r1, #0]
{
   1ed96:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1ed98:	b993      	cbnz	r3, 1edc0 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1ed9a:	884b      	ldrh	r3, [r1, #2]
   1ed9c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1eda0:	2d02      	cmp	r5, #2
   1eda2:	d819      	bhi.n	1edd8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1eda4:	f1c5 0202 	rsb	r2, r5, #2
   1eda8:	4294      	cmp	r4, r2
   1edaa:	bfa8      	it	ge
   1edac:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1edae:	f10d 0306 	add.w	r3, sp, #6
   1edb2:	4622      	mov	r2, r4
   1edb4:	1959      	adds	r1, r3, r5
   1edb6:	f7fe fcff 	bl	1d7b8 <memcpy>
}
   1edba:	4620      	mov	r0, r4
   1edbc:	b003      	add	sp, #12
   1edbe:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1edc0:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1edc2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1edc6:	d807      	bhi.n	1edd8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1edc8:	f1c5 0210 	rsb	r2, r5, #16
   1edcc:	4294      	cmp	r4, r2
   1edce:	bfa8      	it	ge
   1edd0:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1edd2:	4622      	mov	r2, r4
   1edd4:	4429      	add	r1, r5
   1edd6:	e7ee      	b.n	1edb6 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1edd8:	f06f 0406 	mvn.w	r4, #6
   1eddc:	e7ed      	b.n	1edba <bt_gatt_attr_read_service+0x30>

0001edde <sc_clear>:
{
   1edde:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ede0:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1ede4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ede6:	4631      	mov	r1, r6
   1ede8:	7a00      	ldrb	r0, [r0, #8]
   1edea:	f7fe ff1b 	bl	1dc24 <bt_addr_le_is_bonded>
   1edee:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1edf0:	4631      	mov	r1, r6
   1edf2:	f7f7 fc23 	bl	1663c <find_sc_cfg>
	if (!cfg) {
   1edf6:	b128      	cbz	r0, 1ee04 <sc_clear+0x26>
}
   1edf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1edfc:	220c      	movs	r2, #12
   1edfe:	2100      	movs	r1, #0
   1ee00:	f7fe bd05 	b.w	1d80e <memset>
}
   1ee04:	bd70      	pop	{r4, r5, r6, pc}

0001ee06 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1ee06:	2a02      	cmp	r2, #2
{
   1ee08:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1ee0a:	d108      	bne.n	1ee1e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1ee0c:	2300      	movs	r3, #0
   1ee0e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ee12:	461a      	mov	r2, r3
   1ee14:	7a00      	ldrb	r0, [r0, #8]
   1ee16:	f7f7 fd05 	bl	16824 <sc_save>
}
   1ee1a:	2002      	movs	r0, #2
   1ee1c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1ee1e:	f7ff ffde 	bl	1edde <sc_clear>
   1ee22:	e7fa      	b.n	1ee1a <sc_ccc_cfg_write+0x14>

0001ee24 <bt_gatt_attr_read>:
{
   1ee24:	b538      	push	{r3, r4, r5, lr}
   1ee26:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ee2a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1ee2e:	42a9      	cmp	r1, r5
{
   1ee30:	4610      	mov	r0, r2
	if (offset > value_len) {
   1ee32:	d80b      	bhi.n	1ee4c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1ee34:	1a6d      	subs	r5, r5, r1
   1ee36:	429d      	cmp	r5, r3
   1ee38:	bfa8      	it	ge
   1ee3a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1ee3c:	9b05      	ldr	r3, [sp, #20]
   1ee3e:	b2ad      	uxth	r5, r5
   1ee40:	462a      	mov	r2, r5
   1ee42:	4419      	add	r1, r3
   1ee44:	f7fe fcb8 	bl	1d7b8 <memcpy>
}
   1ee48:	4628      	mov	r0, r5
   1ee4a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ee4c:	f06f 0506 	mvn.w	r5, #6
   1ee50:	e7fa      	b.n	1ee48 <bt_gatt_attr_read+0x24>

0001ee52 <bt_gatt_attr_value_handle>:
{
   1ee52:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ee54:	4604      	mov	r4, r0
   1ee56:	b910      	cbnz	r0, 1ee5e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1ee58:	2000      	movs	r0, #0
}
   1ee5a:	b002      	add	sp, #8
   1ee5c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ee5e:	2300      	movs	r3, #0
   1ee60:	f88d 3004 	strb.w	r3, [sp, #4]
   1ee64:	6800      	ldr	r0, [r0, #0]
   1ee66:	f642 0303 	movw	r3, #10243	; 0x2803
   1ee6a:	a901      	add	r1, sp, #4
   1ee6c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ee70:	f7fe fd82 	bl	1d978 <bt_uuid_cmp>
   1ee74:	2800      	cmp	r0, #0
   1ee76:	d1ef      	bne.n	1ee58 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1ee78:	68e3      	ldr	r3, [r4, #12]
   1ee7a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1ee7c:	2800      	cmp	r0, #0
   1ee7e:	d1ec      	bne.n	1ee5a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1ee80:	4620      	mov	r0, r4
   1ee82:	f7f7 fe25 	bl	16ad0 <bt_gatt_attr_get_handle>
   1ee86:	3001      	adds	r0, #1
   1ee88:	b280      	uxth	r0, r0
	return handle;
   1ee8a:	e7e6      	b.n	1ee5a <bt_gatt_attr_value_handle+0x8>

0001ee8c <bt_gatt_attr_read_chrc>:
{
   1ee8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1ee8e:	68cf      	ldr	r7, [r1, #12]
{
   1ee90:	b087      	sub	sp, #28
   1ee92:	4608      	mov	r0, r1
   1ee94:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1ee96:	79bb      	ldrb	r3, [r7, #6]
   1ee98:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ee9c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1eea0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1eea2:	f7ff ffd6 	bl	1ee52 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1eea6:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1eea8:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1eeac:	780b      	ldrb	r3, [r1, #0]
   1eeae:	b99b      	cbnz	r3, 1eed8 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1eeb0:	884b      	ldrh	r3, [r1, #2]
   1eeb2:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1eeb6:	2105      	movs	r1, #5
	if (offset > value_len) {
   1eeb8:	42b1      	cmp	r1, r6
   1eeba:	d315      	bcc.n	1eee8 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1eebc:	1b89      	subs	r1, r1, r6
   1eebe:	42a1      	cmp	r1, r4
   1eec0:	bfa8      	it	ge
   1eec2:	4621      	movge	r1, r4
   1eec4:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1eec6:	ab01      	add	r3, sp, #4
   1eec8:	4622      	mov	r2, r4
   1eeca:	1999      	adds	r1, r3, r6
   1eecc:	4628      	mov	r0, r5
   1eece:	f7fe fc73 	bl	1d7b8 <memcpy>
}
   1eed2:	4620      	mov	r0, r4
   1eed4:	b007      	add	sp, #28
   1eed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1eed8:	3101      	adds	r1, #1
   1eeda:	2210      	movs	r2, #16
   1eedc:	f10d 0007 	add.w	r0, sp, #7
   1eee0:	f7fe fc6a 	bl	1d7b8 <memcpy>
		value_len += 16U;
   1eee4:	2113      	movs	r1, #19
   1eee6:	e7e7      	b.n	1eeb8 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eee8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1eeec:	e7f1      	b.n	1eed2 <bt_gatt_attr_read_chrc+0x46>

0001eeee <bt_gatt_foreach_attr>:
{
   1eeee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1eef0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1eef4:	2300      	movs	r3, #0
   1eef6:	9300      	str	r3, [sp, #0]
   1eef8:	461a      	mov	r2, r3
   1eefa:	f7f7 fe19 	bl	16b30 <bt_gatt_foreach_attr_type>
}
   1eefe:	b005      	add	sp, #20
   1ef00:	f85d fb04 	ldr.w	pc, [sp], #4

0001ef04 <db_hash_process>:
	db_hash_gen(true);
   1ef04:	f7f7 be6e 	b.w	16be4 <db_hash_gen.isra.0>

0001ef08 <bt_gatt_check_perm>:
{
   1ef08:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1ef0a:	07d4      	lsls	r4, r2, #31
{
   1ef0c:	4605      	mov	r5, r0
   1ef0e:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ef10:	d504      	bpl.n	1ef1c <bt_gatt_check_perm+0x14>
   1ef12:	f010 0f15 	tst.w	r0, #21
   1ef16:	d01e      	beq.n	1ef56 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ef18:	684b      	ldr	r3, [r1, #4]
   1ef1a:	b1e3      	cbz	r3, 1ef56 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ef1c:	0793      	lsls	r3, r2, #30
   1ef1e:	d504      	bpl.n	1ef2a <bt_gatt_check_perm+0x22>
   1ef20:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1ef24:	d019      	beq.n	1ef5a <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ef26:	688b      	ldr	r3, [r1, #8]
   1ef28:	b1bb      	cbz	r3, 1ef5a <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1ef2a:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1ef2e:	f014 0f30 	tst.w	r4, #48	; 0x30
   1ef32:	d103      	bne.n	1ef3c <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1ef34:	f014 000c 	ands.w	r0, r4, #12
   1ef38:	d107      	bne.n	1ef4a <bt_gatt_check_perm+0x42>
}
   1ef3a:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1ef3c:	4628      	mov	r0, r5
   1ef3e:	f7ff f882 	bl	1e046 <bt_conn_get_security>
   1ef42:	2802      	cmp	r0, #2
   1ef44:	d8f6      	bhi.n	1ef34 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1ef46:	2005      	movs	r0, #5
   1ef48:	e7f7      	b.n	1ef3a <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1ef4a:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1ef4c:	2b00      	cmp	r3, #0
   1ef4e:	bf14      	ite	ne
   1ef50:	2000      	movne	r0, #0
   1ef52:	200f      	moveq	r0, #15
   1ef54:	e7f1      	b.n	1ef3a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1ef56:	2002      	movs	r0, #2
   1ef58:	e7ef      	b.n	1ef3a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1ef5a:	2003      	movs	r0, #3
   1ef5c:	e7ed      	b.n	1ef3a <bt_gatt_check_perm+0x32>

0001ef5e <bt_gatt_change_aware>:
{
   1ef5e:	b510      	push	{r4, lr}
   1ef60:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1ef62:	f7f7 fb8d 	bl	16680 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ef66:	4603      	mov	r3, r0
   1ef68:	b910      	cbnz	r0, 1ef70 <bt_gatt_change_aware+0x12>
		return true;
   1ef6a:	2401      	movs	r4, #1
}
   1ef6c:	4620      	mov	r0, r4
   1ef6e:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ef70:	7a02      	ldrb	r2, [r0, #8]
   1ef72:	07d2      	lsls	r2, r2, #31
   1ef74:	d5f9      	bpl.n	1ef6a <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ef76:	f3bf 8f5b 	dmb	ish
   1ef7a:	68d9      	ldr	r1, [r3, #12]
   1ef7c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1ef80:	f011 0101 	ands.w	r1, r1, #1
   1ef84:	f100 000c 	add.w	r0, r0, #12
   1ef88:	d1ef      	bne.n	1ef6a <bt_gatt_change_aware+0xc>
	if (!req) {
   1ef8a:	2c00      	cmp	r4, #0
   1ef8c:	d0ee      	beq.n	1ef6c <bt_gatt_change_aware+0xe>
   1ef8e:	f3bf 8f5b 	dmb	ish
   1ef92:	68db      	ldr	r3, [r3, #12]
   1ef94:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ef98:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1ef9c:	079b      	lsls	r3, r3, #30
   1ef9e:	d50e      	bpl.n	1efbe <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1efa0:	f3bf 8f5b 	dmb	ish
   1efa4:	e850 3f00 	ldrex	r3, [r0]
   1efa8:	f023 0302 	bic.w	r3, r3, #2
   1efac:	e840 3200 	strex	r2, r3, [r0]
   1efb0:	2a00      	cmp	r2, #0
   1efb2:	d1f7      	bne.n	1efa4 <bt_gatt_change_aware+0x46>
   1efb4:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1efb8:	f7ff fe2e 	bl	1ec18 <atomic_set_bit>
	return false;
   1efbc:	e7d6      	b.n	1ef6c <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1efbe:	2101      	movs	r1, #1
   1efc0:	e7fa      	b.n	1efb8 <bt_gatt_change_aware+0x5a>

0001efc2 <sys_memcpy_swap>:
	psrc += length - 1;
   1efc2:	1e53      	subs	r3, r2, #1
   1efc4:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1efc6:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1efc8:	f811 3901 	ldrb.w	r3, [r1], #-1
   1efcc:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1efd0:	4290      	cmp	r0, r2
   1efd2:	d1f9      	bne.n	1efc8 <sys_memcpy_swap+0x6>
}
   1efd4:	4770      	bx	lr

0001efd6 <smp_pairing_rsp>:
}
   1efd6:	2007      	movs	r0, #7
   1efd8:	4770      	bx	lr

0001efda <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1efda:	2301      	movs	r3, #1
   1efdc:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1efde:	f3bf 8f5b 	dmb	ish
   1efe2:	e850 2f00 	ldrex	r2, [r0]
   1efe6:	431a      	orrs	r2, r3
   1efe8:	e840 2100 	strex	r1, r2, [r0]
   1efec:	2900      	cmp	r1, #0
   1efee:	d1f8      	bne.n	1efe2 <atomic_set_bit+0x8>
   1eff0:	f3bf 8f5b 	dmb	ish
}
   1eff4:	4770      	bx	lr

0001eff6 <smp_keypress_notif>:
{
   1eff6:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1eff8:	210e      	movs	r1, #14
   1effa:	f7ff ffee 	bl	1efda <atomic_set_bit>
}
   1effe:	2000      	movs	r0, #0
   1f000:	bd08      	pop	{r3, pc}

0001f002 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f002:	2301      	movs	r3, #1
   1f004:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f006:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f008:	f3bf 8f5b 	dmb	ish
   1f00c:	e850 2f00 	ldrex	r2, [r0]
   1f010:	401a      	ands	r2, r3
   1f012:	e840 2100 	strex	r1, r2, [r0]
   1f016:	2900      	cmp	r1, #0
   1f018:	d1f8      	bne.n	1f00c <atomic_clear_bit+0xa>
   1f01a:	f3bf 8f5b 	dmb	ish
}
   1f01e:	4770      	bx	lr

0001f020 <bt_smp_aes_cmac>:
{
   1f020:	b570      	push	{r4, r5, r6, lr}
   1f022:	b0c2      	sub	sp, #264	; 0x108
   1f024:	460d      	mov	r5, r1
   1f026:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f028:	4601      	mov	r1, r0
   1f02a:	aa16      	add	r2, sp, #88	; 0x58
   1f02c:	4668      	mov	r0, sp
{
   1f02e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f030:	f7fe fa9e 	bl	1d570 <tc_cmac_setup>
   1f034:	b150      	cbz	r0, 1f04c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1f036:	4632      	mov	r2, r6
   1f038:	4629      	mov	r1, r5
   1f03a:	4668      	mov	r0, sp
   1f03c:	f7fe fac3 	bl	1d5c6 <tc_cmac_update>
   1f040:	b120      	cbz	r0, 1f04c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1f042:	4669      	mov	r1, sp
   1f044:	4620      	mov	r0, r4
   1f046:	f7fe fb2a 	bl	1d69e <tc_cmac_final>
   1f04a:	b918      	cbnz	r0, 1f054 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1f04c:	f06f 0004 	mvn.w	r0, #4
}
   1f050:	b042      	add	sp, #264	; 0x108
   1f052:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1f054:	2000      	movs	r0, #0
   1f056:	e7fb      	b.n	1f050 <bt_smp_aes_cmac+0x30>

0001f058 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1f058:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f05a:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1f05c:	2200      	movs	r2, #0
   1f05e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1f060:	4604      	mov	r4, r0
   1f062:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1f064:	460a      	mov	r2, r1
   1f066:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   1f06a:	2106      	movs	r1, #6
   1f06c:	f7ff f94d 	bl	1e30a <bt_l2cap_send_cb>
   1f070:	b128      	cbz	r0, 1f07e <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   1f072:	4628      	mov	r0, r5
}
   1f074:	b003      	add	sp, #12
   1f076:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1f07a:	f7f9 bed3 	b.w	18e24 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1f07e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f082:	2300      	movs	r3, #0
   1f084:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   1f088:	b003      	add	sp, #12
   1f08a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1f08e:	f7fb bd99 	b.w	1abc4 <k_work_reschedule>

0001f092 <smp_security_request>:
   1f092:	2007      	movs	r0, #7
   1f094:	4770      	bx	lr

0001f096 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1f096:	b510      	push	{r4, lr}
   1f098:	1e43      	subs	r3, r0, #1
   1f09a:	f100 0210 	add.w	r2, r0, #16
   1f09e:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1f0a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1f0a4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1f0a8:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1f0aa:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1f0ac:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1f0ae:	d1f7      	bne.n	1f0a0 <sys_mem_swap.constprop.0+0xa>
	}
}
   1f0b0:	bd10      	pop	{r4, pc}

0001f0b2 <smp_f6>:
{
   1f0b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f0b4:	b097      	sub	sp, #92	; 0x5c
   1f0b6:	4605      	mov	r5, r0
   1f0b8:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1f0ba:	a805      	add	r0, sp, #20
   1f0bc:	2210      	movs	r2, #16
{
   1f0be:	461c      	mov	r4, r3
   1f0c0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1f0c2:	f7ff ff7e 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1f0c6:	2210      	movs	r2, #16
   1f0c8:	4631      	mov	r1, r6
   1f0ca:	a809      	add	r0, sp, #36	; 0x24
   1f0cc:	f7ff ff79 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1f0d0:	4621      	mov	r1, r4
   1f0d2:	2210      	movs	r2, #16
   1f0d4:	a80d      	add	r0, sp, #52	; 0x34
   1f0d6:	f7ff ff74 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1f0da:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f0dc:	2203      	movs	r2, #3
   1f0de:	a811      	add	r0, sp, #68	; 0x44
   1f0e0:	f7ff ff6f 	bl	1efc2 <sys_memcpy_swap>
	m[51] = a1->type;
   1f0e4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1f0e6:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f0ea:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1f0ee:	4621      	mov	r1, r4
   1f0f0:	2206      	movs	r2, #6
   1f0f2:	a812      	add	r0, sp, #72	; 0x48
   1f0f4:	f7fe fb60 	bl	1d7b8 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1f0f8:	4621      	mov	r1, r4
   1f0fa:	2206      	movs	r2, #6
   1f0fc:	a812      	add	r0, sp, #72	; 0x48
   1f0fe:	f7ff ff60 	bl	1efc2 <sys_memcpy_swap>
	m[58] = a2->type;
   1f102:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1f104:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f108:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1f10c:	4621      	mov	r1, r4
   1f10e:	2206      	movs	r2, #6
   1f110:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1f114:	f7fe fb50 	bl	1d7b8 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1f118:	4621      	mov	r1, r4
   1f11a:	2206      	movs	r2, #6
   1f11c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1f120:	f7ff ff4f 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1f124:	2210      	movs	r2, #16
   1f126:	4629      	mov	r1, r5
   1f128:	a801      	add	r0, sp, #4
   1f12a:	f7ff ff4a 	bl	1efc2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1f12e:	463b      	mov	r3, r7
   1f130:	2241      	movs	r2, #65	; 0x41
   1f132:	a905      	add	r1, sp, #20
   1f134:	a801      	add	r0, sp, #4
   1f136:	f7ff ff73 	bl	1f020 <bt_smp_aes_cmac>
	if (err) {
   1f13a:	4604      	mov	r4, r0
   1f13c:	b910      	cbnz	r0, 1f144 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1f13e:	4638      	mov	r0, r7
   1f140:	f7ff ffa9 	bl	1f096 <sys_mem_swap.constprop.0>
}
   1f144:	4620      	mov	r0, r4
   1f146:	b017      	add	sp, #92	; 0x5c
   1f148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f14a <smp_f4>:
{
   1f14a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f14c:	b097      	sub	sp, #92	; 0x5c
   1f14e:	4614      	mov	r4, r2
   1f150:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1f152:	2220      	movs	r2, #32
   1f154:	4601      	mov	r1, r0
   1f156:	a805      	add	r0, sp, #20
{
   1f158:	461d      	mov	r5, r3
   1f15a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1f15c:	f7ff ff31 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1f160:	2220      	movs	r2, #32
   1f162:	4631      	mov	r1, r6
   1f164:	a80d      	add	r0, sp, #52	; 0x34
   1f166:	f7ff ff2c 	bl	1efc2 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1f16a:	4621      	mov	r1, r4
   1f16c:	2210      	movs	r2, #16
   1f16e:	a801      	add	r0, sp, #4
	m[64] = z;
   1f170:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1f174:	f7ff ff25 	bl	1efc2 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1f178:	463b      	mov	r3, r7
   1f17a:	2241      	movs	r2, #65	; 0x41
   1f17c:	a905      	add	r1, sp, #20
   1f17e:	a801      	add	r0, sp, #4
   1f180:	f7ff ff4e 	bl	1f020 <bt_smp_aes_cmac>
	if (err) {
   1f184:	4604      	mov	r4, r0
   1f186:	b910      	cbnz	r0, 1f18e <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1f188:	4638      	mov	r0, r7
   1f18a:	f7ff ff84 	bl	1f096 <sys_mem_swap.constprop.0>
}
   1f18e:	4620      	mov	r0, r4
   1f190:	b017      	add	sp, #92	; 0x5c
   1f192:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f194 <smp_signing_info>:
   1f194:	2007      	movs	r0, #7
   1f196:	4770      	bx	lr

0001f198 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f198:	f3bf 8f5b 	dmb	ish
   1f19c:	6800      	ldr	r0, [r0, #0]
   1f19e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f1a2:	4108      	asrs	r0, r1
}
   1f1a4:	f000 0001 	and.w	r0, r0, #1
   1f1a8:	4770      	bx	lr

0001f1aa <update_keys_check>:
{
   1f1aa:	b510      	push	{r4, lr}
   1f1ac:	4603      	mov	r3, r0
	if (!keys ||
   1f1ae:	b1d9      	cbz	r1, 1f1e8 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1f1b0:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1f1b2:	f010 0f24 	tst.w	r0, #36	; 0x24
   1f1b6:	d017      	beq.n	1f1e8 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f1b8:	7d1a      	ldrb	r2, [r3, #20]
   1f1ba:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1f1bc:	7b09      	ldrb	r1, [r1, #12]
   1f1be:	42a2      	cmp	r2, r4
   1f1c0:	bf28      	it	cs
   1f1c2:	4622      	movcs	r2, r4
   1f1c4:	4291      	cmp	r1, r2
   1f1c6:	d901      	bls.n	1f1cc <update_keys_check+0x22>
		return false;
   1f1c8:	2000      	movs	r0, #0
}
   1f1ca:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1f1cc:	0682      	lsls	r2, r0, #26
   1f1ce:	d404      	bmi.n	1f1da <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f1d0:	7a18      	ldrb	r0, [r3, #8]
   1f1d2:	3800      	subs	r0, #0
   1f1d4:	bf18      	it	ne
   1f1d6:	2001      	movne	r0, #1
   1f1d8:	e7f7      	b.n	1f1ca <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f1da:	2105      	movs	r1, #5
   1f1dc:	1d18      	adds	r0, r3, #4
   1f1de:	f7ff ffdb 	bl	1f198 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1f1e2:	2800      	cmp	r0, #0
   1f1e4:	d1f4      	bne.n	1f1d0 <update_keys_check+0x26>
   1f1e6:	e7ef      	b.n	1f1c8 <update_keys_check+0x1e>
		return true;
   1f1e8:	2001      	movs	r0, #1
   1f1ea:	e7ee      	b.n	1f1ca <update_keys_check+0x20>

0001f1ec <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1f1ec:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f1ee:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1f1f0:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f1f2:	4628      	mov	r0, r5
   1f1f4:	2104      	movs	r1, #4
   1f1f6:	f7ff ffcf 	bl	1f198 <atomic_test_bit>
   1f1fa:	b168      	cbz	r0, 1f218 <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   1f1fc:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1f1fe:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1f200:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1f202:	4608      	mov	r0, r1
   1f204:	f7ff f87e 	bl	1e304 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1f208:	4604      	mov	r4, r0
   1f20a:	b940      	cbnz	r0, 1f21e <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f20c:	2104      	movs	r1, #4
   1f20e:	4628      	mov	r0, r5
   1f210:	f7ff fee3 	bl	1efda <atomic_set_bit>
}
   1f214:	4620      	mov	r0, r4
   1f216:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1f218:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f21c:	e7ef      	b.n	1f1fe <smp_create_pdu.isra.0+0x12>
   1f21e:	2101      	movs	r1, #1
   1f220:	3008      	adds	r0, #8
   1f222:	f000 fbb8 	bl	1f996 <net_buf_simple_add>
	hdr->code = op;
   1f226:	7006      	strb	r6, [r0, #0]
	return buf;
   1f228:	e7f4      	b.n	1f214 <smp_create_pdu.isra.0+0x28>

0001f22a <smp_send_pairing_random>:
{
   1f22a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1f22c:	2104      	movs	r1, #4
{
   1f22e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1f230:	f7ff ffdc 	bl	1f1ec <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1f234:	4604      	mov	r4, r0
   1f236:	b178      	cbz	r0, 1f258 <smp_send_pairing_random+0x2e>
   1f238:	2110      	movs	r1, #16
   1f23a:	3008      	adds	r0, #8
   1f23c:	f000 fbab 	bl	1f996 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1f240:	2210      	movs	r2, #16
   1f242:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1f246:	f7fe fab7 	bl	1d7b8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1f24a:	4628      	mov	r0, r5
   1f24c:	2200      	movs	r2, #0
   1f24e:	4621      	mov	r1, r4
   1f250:	f7ff ff02 	bl	1f058 <smp_send.isra.0>
	return 0;
   1f254:	2000      	movs	r0, #0
}
   1f256:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1f258:	2008      	movs	r0, #8
   1f25a:	e7fc      	b.n	1f256 <smp_send_pairing_random+0x2c>

0001f25c <send_pairing_rsp>:
{
   1f25c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1f25e:	2102      	movs	r1, #2
{
   1f260:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1f262:	f7ff ffc3 	bl	1f1ec <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1f266:	4604      	mov	r4, r0
   1f268:	b178      	cbz	r0, 1f28a <send_pairing_rsp+0x2e>
   1f26a:	2106      	movs	r1, #6
   1f26c:	3008      	adds	r0, #8
   1f26e:	f000 fb92 	bl	1f996 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1f272:	2206      	movs	r2, #6
   1f274:	f105 0111 	add.w	r1, r5, #17
   1f278:	f7fe fa9e 	bl	1d7b8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1f27c:	4628      	mov	r0, r5
   1f27e:	2200      	movs	r2, #0
   1f280:	4621      	mov	r1, r4
   1f282:	f7ff fee9 	bl	1f058 <smp_send.isra.0>
	return 0;
   1f286:	2000      	movs	r0, #0
}
   1f288:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1f28a:	2008      	movs	r0, #8
   1f28c:	e7fc      	b.n	1f288 <send_pairing_rsp+0x2c>

0001f28e <smp_dhkey_check>:
{
   1f28e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1f290:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1f294:	78db      	ldrb	r3, [r3, #3]
   1f296:	2b01      	cmp	r3, #1
{
   1f298:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1f29a:	d114      	bne.n	1f2c6 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1f29c:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f29e:	1d05      	adds	r5, r0, #4
   1f2a0:	2110      	movs	r1, #16
   1f2a2:	4628      	mov	r0, r5
   1f2a4:	f7ff fead 	bl	1f002 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1f2a8:	4631      	mov	r1, r6
   1f2aa:	2210      	movs	r2, #16
   1f2ac:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1f2b0:	f7fe fa82 	bl	1d7b8 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1f2b4:	2107      	movs	r1, #7
   1f2b6:	4628      	mov	r0, r5
   1f2b8:	f7ff ff6e 	bl	1f198 <atomic_test_bit>
   1f2bc:	b128      	cbz	r0, 1f2ca <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f2be:	2109      	movs	r1, #9
   1f2c0:	4628      	mov	r0, r5
   1f2c2:	f7ff fe8a 	bl	1efda <atomic_set_bit>
}
   1f2c6:	2000      	movs	r0, #0
   1f2c8:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f2ca:	210a      	movs	r1, #10
   1f2cc:	4628      	mov	r0, r5
   1f2ce:	f7ff ff63 	bl	1f198 <atomic_test_bit>
   1f2d2:	2800      	cmp	r0, #0
   1f2d4:	d1f3      	bne.n	1f2be <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   1f2d6:	4620      	mov	r0, r4
}
   1f2d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1f2dc:	f7f8 b948 	b.w	17570 <compute_and_check_and_send_slave_dhcheck>

0001f2e0 <atomic_test_and_clear_bit>:
{
   1f2e0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f2e2:	2301      	movs	r3, #1
   1f2e4:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f2e8:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f2ea:	f3bf 8f5b 	dmb	ish
   1f2ee:	e850 3f00 	ldrex	r3, [r0]
   1f2f2:	ea03 0c02 	and.w	ip, r3, r2
   1f2f6:	e840 ce00 	strex	lr, ip, [r0]
   1f2fa:	f1be 0f00 	cmp.w	lr, #0
   1f2fe:	d1f6      	bne.n	1f2ee <atomic_test_and_clear_bit+0xe>
   1f300:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1f304:	420b      	tst	r3, r1
}
   1f306:	bf14      	ite	ne
   1f308:	2001      	movne	r0, #1
   1f30a:	2000      	moveq	r0, #0
   1f30c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f310 <smp_reset>:
{
   1f310:	b538      	push	{r3, r4, r5, lr}
   1f312:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f314:	1d03      	adds	r3, r0, #4
   1f316:	2500      	movs	r5, #0
   1f318:	f3bf 8f5b 	dmb	ish
   1f31c:	e853 2f00 	ldrex	r2, [r3]
   1f320:	e843 5100 	strex	r1, r5, [r3]
   1f324:	2900      	cmp	r1, #0
   1f326:	d1f9      	bne.n	1f31c <smp_reset+0xc>
   1f328:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   1f32c:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   1f330:	f000 fe2c 	bl	1ff8c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   1f334:	7225      	strb	r5, [r4, #8]
   1f336:	f3bf 8f5b 	dmb	ish
   1f33a:	e854 3f00 	ldrex	r3, [r4]
   1f33e:	e844 5200 	strex	r2, r5, [r4]
   1f342:	2a00      	cmp	r2, #0
   1f344:	d1f9      	bne.n	1f33a <smp_reset+0x2a>
   1f346:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f34a:	4620      	mov	r0, r4
   1f34c:	2101      	movs	r1, #1
}
   1f34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f352:	f7ff be42 	b.w	1efda <atomic_set_bit>

0001f356 <smp_c1>:
{
   1f356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f35a:	b089      	sub	sp, #36	; 0x24
   1f35c:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1f360:	4699      	mov	r9, r3
	p1[0] = ia->type;
   1f362:	783b      	ldrb	r3, [r7, #0]
{
   1f364:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   1f366:	f88d 3000 	strb.w	r3, [sp]
{
   1f36a:	460c      	mov	r4, r1
	p1[1] = ra->type;
   1f36c:	f898 3000 	ldrb.w	r3, [r8]
   1f370:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1f374:	4611      	mov	r1, r2
   1f376:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1f378:	2207      	movs	r2, #7
   1f37a:	f10d 0002 	add.w	r0, sp, #2
   1f37e:	f7fe fa1b 	bl	1d7b8 <memcpy>
	memcpy(p1 + 9, pres, 7);
   1f382:	2207      	movs	r2, #7
   1f384:	4649      	mov	r1, r9
   1f386:	f10d 0009 	add.w	r0, sp, #9
   1f38a:	f7fe fa15 	bl	1d7b8 <memcpy>
	while (len--) {
   1f38e:	f104 0010 	add.w	r0, r4, #16
   1f392:	4629      	mov	r1, r5
   1f394:	466a      	mov	r2, sp
   1f396:	42a0      	cmp	r0, r4
   1f398:	d127      	bne.n	1f3ea <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1f39a:	462a      	mov	r2, r5
   1f39c:	4629      	mov	r1, r5
   1f39e:	4630      	mov	r0, r6
   1f3a0:	f000 fb3e 	bl	1fa20 <bt_encrypt_le>
	if (err) {
   1f3a4:	4604      	mov	r4, r0
   1f3a6:	b9e0      	cbnz	r0, 1f3e2 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   1f3a8:	2206      	movs	r2, #6
   1f3aa:	f108 0101 	add.w	r1, r8, #1
   1f3ae:	a804      	add	r0, sp, #16
   1f3b0:	f7fe fa02 	bl	1d7b8 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1f3b4:	2206      	movs	r2, #6
   1f3b6:	1c79      	adds	r1, r7, #1
   1f3b8:	f10d 0016 	add.w	r0, sp, #22
   1f3bc:	f7fe f9fc 	bl	1d7b8 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1f3c0:	2204      	movs	r2, #4
   1f3c2:	4621      	mov	r1, r4
   1f3c4:	a807      	add	r0, sp, #28
   1f3c6:	f7fe fa22 	bl	1d80e <memset>
	while (len--) {
   1f3ca:	f105 0010 	add.w	r0, r5, #16
   1f3ce:	462a      	mov	r2, r5
   1f3d0:	ab04      	add	r3, sp, #16
   1f3d2:	4282      	cmp	r2, r0
   1f3d4:	d112      	bne.n	1f3fc <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   1f3d6:	462a      	mov	r2, r5
   1f3d8:	4629      	mov	r1, r5
   1f3da:	4630      	mov	r0, r6
   1f3dc:	f000 fb20 	bl	1fa20 <bt_encrypt_le>
   1f3e0:	4604      	mov	r4, r0
}
   1f3e2:	4620      	mov	r0, r4
   1f3e4:	b009      	add	sp, #36	; 0x24
   1f3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   1f3ea:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f3ee:	f812 cb01 	ldrb.w	ip, [r2], #1
   1f3f2:	ea83 030c 	eor.w	r3, r3, ip
   1f3f6:	f801 3b01 	strb.w	r3, [r1], #1
   1f3fa:	e7cc      	b.n	1f396 <smp_c1+0x40>
   1f3fc:	f812 1b01 	ldrb.w	r1, [r2], #1
   1f400:	f813 4b01 	ldrb.w	r4, [r3], #1
   1f404:	4061      	eors	r1, r4
   1f406:	f802 1c01 	strb.w	r1, [r2, #-1]
   1f40a:	e7e2      	b.n	1f3d2 <smp_c1+0x7c>

0001f40c <legacy_pairing_confirm>:
{
   1f40c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f40e:	1d07      	adds	r7, r0, #4
{
   1f410:	b085      	sub	sp, #20
   1f412:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f414:	210a      	movs	r1, #10
   1f416:	4638      	mov	r0, r7
   1f418:	f7ff febe 	bl	1f198 <atomic_test_bit>
   1f41c:	bb88      	cbnz	r0, 1f482 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   1f41e:	2104      	movs	r1, #4
   1f420:	4628      	mov	r0, r5
   1f422:	f7ff fdda 	bl	1efda <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1f426:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   1f428:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1f42c:	f7ff fede 	bl	1f1ec <smp_create_pdu.isra.0>
	if (!buf) {
   1f430:	4606      	mov	r6, r0
   1f432:	b1c0      	cbz	r0, 1f466 <legacy_pairing_confirm+0x5a>
   1f434:	2110      	movs	r1, #16
   1f436:	3008      	adds	r0, #8
   1f438:	f000 faad 	bl	1f996 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1f43c:	f104 0396 	add.w	r3, r4, #150	; 0x96
   1f440:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1f442:	9002      	str	r0, [sp, #8]
   1f444:	9301      	str	r3, [sp, #4]
   1f446:	9400      	str	r4, [sp, #0]
   1f448:	f105 0310 	add.w	r3, r5, #16
   1f44c:	f105 0209 	add.w	r2, r5, #9
   1f450:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1f454:	f105 0047 	add.w	r0, r5, #71	; 0x47
   1f458:	f7ff ff7d 	bl	1f356 <smp_c1>
   1f45c:	4604      	mov	r4, r0
   1f45e:	b120      	cbz	r0, 1f46a <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   1f460:	4630      	mov	r0, r6
   1f462:	f7f9 fcdf 	bl	18e24 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1f466:	2008      	movs	r0, #8
   1f468:	e009      	b.n	1f47e <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   1f46a:	4602      	mov	r2, r0
   1f46c:	4631      	mov	r1, r6
   1f46e:	4628      	mov	r0, r5
   1f470:	f7ff fdf2 	bl	1f058 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f474:	4621      	mov	r1, r4
   1f476:	4638      	mov	r0, r7
   1f478:	f7ff fdc3 	bl	1f002 <atomic_clear_bit>
	return 0;
   1f47c:	2000      	movs	r0, #0
}
   1f47e:	b005      	add	sp, #20
   1f480:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f482:	2100      	movs	r1, #0
   1f484:	4638      	mov	r0, r7
   1f486:	f7ff fda8 	bl	1efda <atomic_set_bit>
   1f48a:	e7f7      	b.n	1f47c <legacy_pairing_confirm+0x70>

0001f48c <bt_smp_request_ltk>:
{
   1f48c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f490:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1f494:	e9cd 2300 	strd	r2, r3, [sp]
   1f498:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f49a:	f7f7 ffff 	bl	1749c <smp_chan_get>
	if (!smp) {
   1f49e:	4605      	mov	r5, r0
   1f4a0:	2800      	cmp	r0, #0
   1f4a2:	f000 8090 	beq.w	1f5c6 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   1f4a6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   1f4aa:	1d07      	adds	r7, r0, #4
   1f4ac:	f1b9 0f00 	cmp.w	r9, #0
   1f4b0:	d12a      	bne.n	1f508 <bt_smp_request_ltk+0x7c>
   1f4b2:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f4b6:	4313      	orrs	r3, r2
   1f4b8:	d126      	bne.n	1f508 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f4ba:	2103      	movs	r1, #3
   1f4bc:	4638      	mov	r0, r7
   1f4be:	f7ff fe6b 	bl	1f198 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1f4c2:	b308      	cbz	r0, 1f508 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f4c4:	2101      	movs	r1, #1
   1f4c6:	4638      	mov	r0, r7
   1f4c8:	f7ff fe66 	bl	1f198 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f4cc:	4606      	mov	r6, r0
   1f4ce:	b1d8      	cbz	r0, 1f508 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f4d0:	7d2c      	ldrb	r4, [r5, #20]
   1f4d2:	7b6b      	ldrb	r3, [r5, #13]
   1f4d4:	429c      	cmp	r4, r3
   1f4d6:	bf28      	it	cs
   1f4d8:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1f4da:	4622      	mov	r2, r4
   1f4dc:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1f4e0:	4640      	mov	r0, r8
   1f4e2:	f7fe f969 	bl	1d7b8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f4e6:	2c0f      	cmp	r4, #15
   1f4e8:	d806      	bhi.n	1f4f8 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   1f4ea:	f1c4 0210 	rsb	r2, r4, #16
   1f4ee:	4649      	mov	r1, r9
   1f4f0:	eb08 0004 	add.w	r0, r8, r4
   1f4f4:	f7fe f98b 	bl	1d80e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f4f8:	2101      	movs	r1, #1
   1f4fa:	4638      	mov	r0, r7
   1f4fc:	f7ff fd6d 	bl	1efda <atomic_set_bit>
}
   1f500:	4630      	mov	r0, r6
   1f502:	b003      	add	sp, #12
   1f504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1f508:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1f50c:	b983      	cbnz	r3, 1f530 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   1f50e:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1f512:	7a21      	ldrb	r1, [r4, #8]
   1f514:	4632      	mov	r2, r6
   1f516:	2020      	movs	r0, #32
   1f518:	f7f9 fb68 	bl	18bec <bt_keys_find>
   1f51c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1f520:	b930      	cbnz	r0, 1f530 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   1f522:	7a21      	ldrb	r1, [r4, #8]
   1f524:	4632      	mov	r2, r6
   1f526:	2001      	movs	r0, #1
   1f528:	f7f9 fb60 	bl	18bec <bt_keys_find>
   1f52c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1f530:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   1f534:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f538:	b9ee      	cbnz	r6, 1f576 <bt_smp_request_ltk+0xea>
   1f53a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f53e:	4313      	orrs	r3, r2
   1f540:	d119      	bne.n	1f576 <bt_smp_request_ltk+0xea>
   1f542:	b388      	cbz	r0, 1f5a8 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1f544:	89c3      	ldrh	r3, [r0, #14]
   1f546:	069a      	lsls	r2, r3, #26
   1f548:	d516      	bpl.n	1f578 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   1f54a:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1f54c:	f100 011a 	add.w	r1, r0, #26
   1f550:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1f552:	4640      	mov	r0, r8
   1f554:	f7fe f930 	bl	1d7b8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f558:	2c0f      	cmp	r4, #15
   1f55a:	d806      	bhi.n	1f56a <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   1f55c:	f1c4 0210 	rsb	r2, r4, #16
   1f560:	4631      	mov	r1, r6
   1f562:	eb08 0004 	add.w	r0, r8, r4
   1f566:	f7fe f952 	bl	1d80e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f56a:	2101      	movs	r1, #1
   1f56c:	4638      	mov	r0, r7
   1f56e:	f7ff fd34 	bl	1efda <atomic_set_bit>
		return true;
   1f572:	2601      	movs	r6, #1
   1f574:	e7c4      	b.n	1f500 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1f576:	b1b8      	cbz	r0, 1f5a8 <bt_smp_request_ltk+0x11c>
   1f578:	89c3      	ldrh	r3, [r0, #14]
   1f57a:	07db      	lsls	r3, r3, #31
   1f57c:	d514      	bpl.n	1f5a8 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1f57e:	2208      	movs	r2, #8
   1f580:	4669      	mov	r1, sp
   1f582:	3040      	adds	r0, #64	; 0x40
   1f584:	f7fe f908 	bl	1d798 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1f588:	b970      	cbnz	r0, 1f5a8 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   1f58a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f58e:	2202      	movs	r2, #2
   1f590:	a90a      	add	r1, sp, #40	; 0x28
   1f592:	3048      	adds	r0, #72	; 0x48
   1f594:	f7fe f900 	bl	1d798 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1f598:	4606      	mov	r6, r0
   1f59a:	b928      	cbnz	r0, 1f5a8 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   1f59c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1f5a0:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1f5a2:	314a      	adds	r1, #74	; 0x4a
   1f5a4:	4622      	mov	r2, r4
   1f5a6:	e7d4      	b.n	1f552 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f5a8:	210f      	movs	r1, #15
   1f5aa:	4638      	mov	r0, r7
   1f5ac:	f7ff fdf4 	bl	1f198 <atomic_test_bit>
   1f5b0:	b120      	cbz	r0, 1f5bc <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1f5b2:	2202      	movs	r2, #2
   1f5b4:	2106      	movs	r1, #6
   1f5b6:	4620      	mov	r0, r4
   1f5b8:	f7f5 fa92 	bl	14ae0 <bt_conn_security_changed>
	smp_reset(smp);
   1f5bc:	4628      	mov	r0, r5
   1f5be:	f7ff fea7 	bl	1f310 <smp_reset>
	return false;
   1f5c2:	2600      	movs	r6, #0
   1f5c4:	e79c      	b.n	1f500 <bt_smp_request_ltk+0x74>
		return false;
   1f5c6:	4606      	mov	r6, r0
   1f5c8:	e79a      	b.n	1f500 <bt_smp_request_ltk+0x74>

0001f5ca <bt_smp_sign>:
   1f5ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f5ce:	4770      	bx	lr

0001f5d0 <bt_smp_auth_pairing_confirm>:
{
   1f5d0:	b538      	push	{r3, r4, r5, lr}
	smp = smp_chan_get(conn);
   1f5d2:	f7f7 ff63 	bl	1749c <smp_chan_get>
	if (!smp) {
   1f5d6:	4604      	mov	r4, r0
   1f5d8:	b910      	cbnz	r0, 1f5e0 <bt_smp_auth_pairing_confirm+0x10>
		return -EINVAL;
   1f5da:	f06f 0015 	mvn.w	r0, #21
}
   1f5de:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   1f5e0:	1d05      	adds	r5, r0, #4
   1f5e2:	210a      	movs	r1, #10
   1f5e4:	4628      	mov	r0, r5
   1f5e6:	f7ff fe7b 	bl	1f2e0 <atomic_test_and_clear_bit>
   1f5ea:	2800      	cmp	r0, #0
   1f5ec:	d0f5      	beq.n	1f5da <bt_smp_auth_pairing_confirm+0xa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f5ee:	2105      	movs	r1, #5
   1f5f0:	4628      	mov	r0, r5
   1f5f2:	f7ff fdd1 	bl	1f198 <atomic_test_bit>
   1f5f6:	b930      	cbnz	r0, 1f606 <bt_smp_auth_pairing_confirm+0x36>
		atomic_set_bit(smp->allowed_cmds,
   1f5f8:	2103      	movs	r1, #3
   1f5fa:	4620      	mov	r0, r4
   1f5fc:	f7ff fced 	bl	1efda <atomic_set_bit>
		return send_pairing_rsp(smp);
   1f600:	f7ff fe2c 	bl	1f25c <send_pairing_rsp>
   1f604:	e7eb      	b.n	1f5de <bt_smp_auth_pairing_confirm+0xe>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f606:	210c      	movs	r1, #12
   1f608:	4620      	mov	r0, r4
   1f60a:	f7ff fce6 	bl	1efda <atomic_set_bit>
	if (send_pairing_rsp(smp)) {
   1f60e:	f7ff fe25 	bl	1f25c <send_pairing_rsp>
		return -EIO;
   1f612:	2800      	cmp	r0, #0
   1f614:	bf0c      	ite	eq
   1f616:	2000      	moveq	r0, #0
   1f618:	f06f 0004 	mvnne.w	r0, #4
   1f61c:	e7df      	b.n	1f5de <bt_smp_auth_pairing_confirm+0xe>

0001f61e <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f61e:	1d03      	adds	r3, r0, #4
{
   1f620:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f622:	4605      	mov	r5, r0
   1f624:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f626:	4618      	mov	r0, r3
   1f628:	2103      	movs	r1, #3
   1f62a:	f7ff fdb5 	bl	1f198 <atomic_test_bit>
   1f62e:	b1f0      	cbz	r0, 1f66e <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   1f630:	4631      	mov	r1, r6
   1f632:	4628      	mov	r0, r5
   1f634:	f7f8 fe7e 	bl	18334 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1f638:	2105      	movs	r1, #5
   1f63a:	4628      	mov	r0, r5
   1f63c:	f7ff fdd6 	bl	1f1ec <smp_create_pdu.isra.0>
	if (!buf) {
   1f640:	4604      	mov	r4, r0
   1f642:	b308      	cbz	r0, 1f688 <smp_error+0x6a>
   1f644:	2101      	movs	r1, #1
   1f646:	3008      	adds	r0, #8
   1f648:	f000 f9a5 	bl	1f996 <net_buf_simple_add>
	rsp->reason = reason;
   1f64c:	7006      	strb	r6, [r0, #0]
   1f64e:	2600      	movs	r6, #0
   1f650:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   1f654:	9600      	str	r6, [sp, #0]
   1f656:	4633      	mov	r3, r6
   1f658:	4622      	mov	r2, r4
   1f65a:	2106      	movs	r1, #6
   1f65c:	f7fe fe55 	bl	1e30a <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1f660:	b118      	cbz	r0, 1f66a <smp_error+0x4c>
		net_buf_unref(buf);
   1f662:	4620      	mov	r0, r4
   1f664:	f7f9 fbde 	bl	18e24 <net_buf_unref>
	return 0;
   1f668:	4630      	mov	r0, r6
}
   1f66a:	b002      	add	sp, #8
   1f66c:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f66e:	2101      	movs	r1, #1
   1f670:	4618      	mov	r0, r3
   1f672:	f7ff fd91 	bl	1f198 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f676:	2800      	cmp	r0, #0
   1f678:	d1da      	bne.n	1f630 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f67a:	210f      	movs	r1, #15
   1f67c:	4618      	mov	r0, r3
   1f67e:	f7ff fd8b 	bl	1f198 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f682:	2800      	cmp	r0, #0
   1f684:	d1d4      	bne.n	1f630 <smp_error+0x12>
   1f686:	e7d7      	b.n	1f638 <smp_error+0x1a>
		return -ENOBUFS;
   1f688:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f68c:	e7ed      	b.n	1f66a <smp_error+0x4c>

0001f68e <legacy_user_tk_entry>:
{
   1f68e:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   1f690:	2100      	movs	r1, #0
{
   1f692:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   1f694:	3004      	adds	r0, #4
   1f696:	f7ff fe23 	bl	1f2e0 <atomic_test_and_clear_bit>
   1f69a:	b178      	cbz	r0, 1f6bc <legacy_user_tk_entry+0x2e>
	if (legacy_pairing_confirm(smp)) {
   1f69c:	4620      	mov	r0, r4
   1f69e:	f7ff feb5 	bl	1f40c <legacy_pairing_confirm>
   1f6a2:	b128      	cbz	r0, 1f6b0 <legacy_user_tk_entry+0x22>
		smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   1f6a4:	4620      	mov	r0, r4
   1f6a6:	2101      	movs	r1, #1
}
   1f6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   1f6ac:	f7ff bfb7 	b.w	1f61e <smp_error>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f6b0:	4620      	mov	r0, r4
   1f6b2:	2104      	movs	r1, #4
}
   1f6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f6b8:	f7ff bc8f 	b.w	1efda <atomic_set_bit>
}
   1f6bc:	bd10      	pop	{r4, pc}

0001f6be <bt_smp_auth_passkey_entry>:
{
   1f6be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f6c0:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
   1f6c2:	f7f7 feeb 	bl	1749c <smp_chan_get>
	if (!smp) {
   1f6c6:	4604      	mov	r4, r0
   1f6c8:	b918      	cbnz	r0, 1f6d2 <bt_smp_auth_passkey_entry+0x14>
		return -EINVAL;
   1f6ca:	f06f 0015 	mvn.w	r0, #21
}
   1f6ce:	b003      	add	sp, #12
   1f6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   1f6d2:	1d07      	adds	r7, r0, #4
   1f6d4:	210a      	movs	r1, #10
   1f6d6:	4638      	mov	r0, r7
   1f6d8:	f7ff fe02 	bl	1f2e0 <atomic_test_and_clear_bit>
   1f6dc:	2800      	cmp	r0, #0
   1f6de:	d0f4      	beq.n	1f6ca <bt_smp_auth_passkey_entry+0xc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f6e0:	2105      	movs	r1, #5
   1f6e2:	4638      	mov	r0, r7
   1f6e4:	f7ff fd58 	bl	1f198 <atomic_test_bit>
   1f6e8:	b960      	cbnz	r0, 1f704 <bt_smp_auth_passkey_entry+0x46>
	memcpy(smp->tk, &passkey, sizeof(passkey));
   1f6ea:	2204      	movs	r2, #4
   1f6ec:	eb0d 0102 	add.w	r1, sp, r2
   1f6f0:	f104 0047 	add.w	r0, r4, #71	; 0x47
   1f6f4:	9601      	str	r6, [sp, #4]
   1f6f6:	f7fe f85f 	bl	1d7b8 <memcpy>
	legacy_user_tk_entry(smp);
   1f6fa:	4620      	mov	r0, r4
   1f6fc:	f7ff ffc7 	bl	1f68e <legacy_user_tk_entry>
			return 0;
   1f700:	2000      	movs	r0, #0
   1f702:	e7e4      	b.n	1f6ce <bt_smp_auth_passkey_entry+0x10>
	smp->passkey = sys_cpu_to_le32(passkey);
   1f704:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
	    atomic_test_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   1f708:	2100      	movs	r1, #0
   1f70a:	4638      	mov	r0, r7
   1f70c:	f7ff fd44 	bl	1f198 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1f710:	2800      	cmp	r0, #0
   1f712:	d0f5      	beq.n	1f700 <bt_smp_auth_passkey_entry+0x42>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f714:	2104      	movs	r1, #4
   1f716:	4620      	mov	r0, r4
   1f718:	f7ff fc5f 	bl	1efda <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1f71c:	f7f8 f844 	bl	177a8 <smp_send_pairing_confirm>
		if (err) {
   1f720:	2800      	cmp	r0, #0
   1f722:	d0ed      	beq.n	1f700 <bt_smp_auth_passkey_entry+0x42>
			smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   1f724:	2101      	movs	r1, #1
   1f726:	4620      	mov	r0, r4
   1f728:	f7ff ff79 	bl	1f61e <smp_error>
   1f72c:	e7e8      	b.n	1f700 <bt_smp_auth_passkey_entry+0x42>

0001f72e <bt_smp_auth_passkey_confirm>:
{
   1f72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	smp = smp_chan_get(conn);
   1f730:	f7f7 feb4 	bl	1749c <smp_chan_get>
	if (!smp) {
   1f734:	4605      	mov	r5, r0
   1f736:	b910      	cbnz	r0, 1f73e <bt_smp_auth_passkey_confirm+0x10>
		return -EINVAL;
   1f738:	f06f 0015 	mvn.w	r0, #21
}
   1f73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   1f73e:	1d06      	adds	r6, r0, #4
   1f740:	210a      	movs	r1, #10
   1f742:	4630      	mov	r0, r6
   1f744:	f7ff fdcc 	bl	1f2e0 <atomic_test_and_clear_bit>
   1f748:	2800      	cmp	r0, #0
   1f74a:	d0f5      	beq.n	1f738 <bt_smp_auth_passkey_confirm+0xa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1f74c:	2107      	movs	r1, #7
   1f74e:	4630      	mov	r0, r6
   1f750:	f7ff fd22 	bl	1f198 <atomic_test_bit>
   1f754:	b128      	cbz	r0, 1f762 <bt_smp_auth_passkey_confirm+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f756:	2109      	movs	r1, #9
   1f758:	4630      	mov	r0, r6
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f75a:	f7ff fc3e 	bl	1efda <atomic_set_bit>
	return 0;
   1f75e:	2000      	movs	r0, #0
   1f760:	e7ec      	b.n	1f73c <bt_smp_auth_passkey_confirm+0xe>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1f762:	2110      	movs	r1, #16
   1f764:	4630      	mov	r0, r6
   1f766:	f7ff fd17 	bl	1f198 <atomic_test_bit>
   1f76a:	4604      	mov	r4, r0
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f76c:	2109      	movs	r1, #9
   1f76e:	4630      	mov	r0, r6
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1f770:	2c00      	cmp	r4, #0
   1f772:	d1f2      	bne.n	1f75a <bt_smp_auth_passkey_confirm+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1f774:	f7ff fd10 	bl	1f198 <atomic_test_bit>
   1f778:	2800      	cmp	r0, #0
   1f77a:	d0f0      	beq.n	1f75e <bt_smp_auth_passkey_confirm+0x30>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   1f77c:	4628      	mov	r0, r5
   1f77e:	f7f7 fef7 	bl	17570 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   1f782:	4601      	mov	r1, r0
   1f784:	2800      	cmp	r0, #0
   1f786:	d0ea      	beq.n	1f75e <bt_smp_auth_passkey_confirm+0x30>
			smp_error(smp, err);
   1f788:	4628      	mov	r0, r5
   1f78a:	f7ff ff48 	bl	1f61e <smp_error>
	return 0;
   1f78e:	4620      	mov	r0, r4
   1f790:	e7d4      	b.n	1f73c <bt_smp_auth_passkey_confirm+0xe>

0001f792 <bt_smp_dhkey_ready>:
{
   1f792:	b570      	push	{r4, r5, r6, lr}
   1f794:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1f796:	2008      	movs	r0, #8
   1f798:	f7f7 fedc 	bl	17554 <smp_find>
	if (smp) {
   1f79c:	4604      	mov	r4, r0
   1f79e:	b1b8      	cbz	r0, 1f7d0 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1f7a0:	1d05      	adds	r5, r0, #4
   1f7a2:	2108      	movs	r1, #8
   1f7a4:	4628      	mov	r0, r5
   1f7a6:	f7ff fc2c 	bl	1f002 <atomic_clear_bit>
	if (!dhkey) {
   1f7aa:	b38e      	cbz	r6, 1f810 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1f7ac:	2107      	movs	r1, #7
   1f7ae:	f7ff fc28 	bl	1f002 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   1f7b2:	4631      	mov	r1, r6
   1f7b4:	2220      	movs	r2, #32
   1f7b6:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1f7ba:	f7fd fffd 	bl	1d7b8 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f7be:	210a      	movs	r1, #10
   1f7c0:	4628      	mov	r0, r5
   1f7c2:	f7ff fce9 	bl	1f198 <atomic_test_bit>
   1f7c6:	b168      	cbz	r0, 1f7e4 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f7c8:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f7ca:	4628      	mov	r0, r5
   1f7cc:	f7ff fc05 	bl	1efda <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1f7d0:	2007      	movs	r0, #7
   1f7d2:	f7f7 febf 	bl	17554 <smp_find>
		if (smp) {
   1f7d6:	4604      	mov	r4, r0
   1f7d8:	b118      	cbz	r0, 1f7e2 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   1f7da:	f7f7 fe1b 	bl	17414 <smp_dhkey_generate>
			if (err) {
   1f7de:	4601      	mov	r1, r0
   1f7e0:	b990      	cbnz	r0, 1f808 <bt_smp_dhkey_ready+0x76>
}
   1f7e2:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1f7e4:	2110      	movs	r1, #16
   1f7e6:	4628      	mov	r0, r5
   1f7e8:	f7ff fcd6 	bl	1f198 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f7ec:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1f7ee:	2800      	cmp	r0, #0
   1f7f0:	d1eb      	bne.n	1f7ca <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1f7f2:	4628      	mov	r0, r5
   1f7f4:	f7ff fcd0 	bl	1f198 <atomic_test_bit>
   1f7f8:	2800      	cmp	r0, #0
   1f7fa:	d0e9      	beq.n	1f7d0 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   1f7fc:	4620      	mov	r0, r4
   1f7fe:	f7f7 feb7 	bl	17570 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   1f802:	4601      	mov	r1, r0
   1f804:	2800      	cmp	r0, #0
   1f806:	d0e3      	beq.n	1f7d0 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   1f808:	4620      	mov	r0, r4
   1f80a:	f7ff ff08 	bl	1f61e <smp_error>
   1f80e:	e7df      	b.n	1f7d0 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1f810:	210b      	movs	r1, #11
   1f812:	e7f9      	b.n	1f808 <bt_smp_dhkey_ready+0x76>

0001f814 <bt_smp_disconnected>:
{
   1f814:	b570      	push	{r4, r5, r6, lr}
   1f816:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1f818:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   1f81c:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f820:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   1f822:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   1f826:	f000 fbb1 	bl	1ff8c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f82a:	2103      	movs	r1, #3
   1f82c:	4620      	mov	r0, r4
   1f82e:	f7ff fcb3 	bl	1f198 <atomic_test_bit>
   1f832:	b1a0      	cbz	r0, 1f85e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f834:	2108      	movs	r1, #8
   1f836:	4630      	mov	r0, r6
   1f838:	f7f8 fd7c 	bl	18334 <smp_pairing_complete>
	if (keys) {
   1f83c:	b13d      	cbz	r5, 1f84e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1f83e:	89eb      	ldrh	r3, [r5, #14]
   1f840:	b113      	cbz	r3, 1f848 <bt_smp_disconnected+0x34>
   1f842:	7b6b      	ldrb	r3, [r5, #13]
   1f844:	079b      	lsls	r3, r3, #30
   1f846:	d502      	bpl.n	1f84e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   1f848:	4628      	mov	r0, r5
   1f84a:	f000 f83f 	bl	1f8cc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1f84e:	4630      	mov	r0, r6
   1f850:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   1f854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1f858:	2100      	movs	r1, #0
   1f85a:	f7fd bfd8 	b.w	1d80e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f85e:	2101      	movs	r1, #1
   1f860:	4620      	mov	r0, r4
   1f862:	f7ff fc99 	bl	1f198 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f866:	2800      	cmp	r0, #0
   1f868:	d1e4      	bne.n	1f834 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f86a:	210f      	movs	r1, #15
   1f86c:	4620      	mov	r0, r4
   1f86e:	f7ff fc93 	bl	1f198 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f872:	2800      	cmp	r0, #0
   1f874:	d1de      	bne.n	1f834 <bt_smp_disconnected+0x20>
   1f876:	e7e1      	b.n	1f83c <bt_smp_disconnected+0x28>

0001f878 <smp_ident_sent>:
{
   1f878:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1f87a:	7883      	ldrb	r3, [r0, #2]
   1f87c:	2b01      	cmp	r3, #1
   1f87e:	d110      	bne.n	1f8a2 <smp_ident_sent+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1f880:	2106      	movs	r1, #6
   1f882:	f7fe fd5b 	bl	1e33c <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1f886:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   1f88a:	f023 0301 	bic.w	r3, r3, #1
   1f88e:	f800 3c08 	strb.w	r3, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   1f892:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   1f896:	b921      	cbnz	r1, 1f8a2 <smp_ident_sent+0x2a>
}
   1f898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1f89c:	38f0      	subs	r0, #240	; 0xf0
   1f89e:	f7f8 bd49 	b.w	18334 <smp_pairing_complete>
}
   1f8a2:	bd08      	pop	{r3, pc}

0001f8a4 <bt_keys_get_type>:
{
   1f8a4:	b570      	push	{r4, r5, r6, lr}
   1f8a6:	4604      	mov	r4, r0
   1f8a8:	460d      	mov	r5, r1
   1f8aa:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1f8ac:	f7f9 f99e 	bl	18bec <bt_keys_find>
	if (keys) {
   1f8b0:	b938      	cbnz	r0, 1f8c2 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1f8b2:	4631      	mov	r1, r6
   1f8b4:	4628      	mov	r0, r5
   1f8b6:	f7f9 f963 	bl	18b80 <bt_keys_get_addr>
	if (!keys) {
   1f8ba:	b110      	cbz	r0, 1f8c2 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   1f8bc:	89c3      	ldrh	r3, [r0, #14]
   1f8be:	431c      	orrs	r4, r3
   1f8c0:	81c4      	strh	r4, [r0, #14]
}
   1f8c2:	bd70      	pop	{r4, r5, r6, pc}

0001f8c4 <bt_keys_add_type>:
	keys->keys |= type;
   1f8c4:	89c3      	ldrh	r3, [r0, #14]
   1f8c6:	4319      	orrs	r1, r3
   1f8c8:	81c1      	strh	r1, [r0, #14]
}
   1f8ca:	4770      	bx	lr

0001f8cc <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1f8cc:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1f8ce:	7a03      	ldrb	r3, [r0, #8]
   1f8d0:	075b      	lsls	r3, r3, #29
{
   1f8d2:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1f8d4:	d501      	bpl.n	1f8da <bt_keys_clear+0xe>
		bt_id_del(keys);
   1f8d6:	f7f4 f995 	bl	13c04 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1f8da:	4620      	mov	r0, r4
   1f8dc:	225c      	movs	r2, #92	; 0x5c
}
   1f8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1f8e2:	2100      	movs	r1, #0
   1f8e4:	f7fd bf93 	b.w	1d80e <memset>

0001f8e8 <fixed_data_unref>:
}
   1f8e8:	4770      	bx	lr

0001f8ea <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f8ea:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1f8ec:	6849      	ldr	r1, [r1, #4]
   1f8ee:	6809      	ldr	r1, [r1, #0]
   1f8f0:	f7f9 ba0c 	b.w	18d0c <net_buf_alloc_len>

0001f8f4 <net_buf_get>:
{
   1f8f4:	b570      	push	{r4, r5, r6, lr}
   1f8f6:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1f8f8:	f7fa ff1c 	bl	1a734 <z_impl_k_queue_get>
	if (!buf) {
   1f8fc:	4605      	mov	r5, r0
   1f8fe:	b128      	cbz	r0, 1f90c <net_buf_get+0x18>
   1f900:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f902:	7963      	ldrb	r3, [r4, #5]
   1f904:	f013 0301 	ands.w	r3, r3, #1
   1f908:	d102      	bne.n	1f910 <net_buf_get+0x1c>
	frag->frags = NULL;
   1f90a:	6023      	str	r3, [r4, #0]
}
   1f90c:	4628      	mov	r0, r5
   1f90e:	bd70      	pop	{r4, r5, r6, pc}
   1f910:	2300      	movs	r3, #0
   1f912:	2200      	movs	r2, #0
   1f914:	4630      	mov	r0, r6
   1f916:	f7fa ff0d 	bl	1a734 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1f91a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1f91c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1f91e:	f023 0301 	bic.w	r3, r3, #1
   1f922:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f924:	4604      	mov	r4, r0
   1f926:	e7ec      	b.n	1f902 <net_buf_get+0xe>

0001f928 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1f928:	6883      	ldr	r3, [r0, #8]
   1f92a:	440b      	add	r3, r1
   1f92c:	6003      	str	r3, [r0, #0]
}
   1f92e:	4770      	bx	lr

0001f930 <net_buf_put>:
{
   1f930:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1f932:	460a      	mov	r2, r1
   1f934:	6814      	ldr	r4, [r2, #0]
   1f936:	b914      	cbnz	r4, 1f93e <net_buf_put+0xe>
}
   1f938:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1f93a:	f000 ba42 	b.w	1fdc2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1f93e:	7953      	ldrb	r3, [r2, #5]
   1f940:	f043 0301 	orr.w	r3, r3, #1
   1f944:	7153      	strb	r3, [r2, #5]
   1f946:	4622      	mov	r2, r4
   1f948:	e7f4      	b.n	1f934 <net_buf_put+0x4>

0001f94a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1f94a:	7902      	ldrb	r2, [r0, #4]
   1f94c:	3201      	adds	r2, #1
   1f94e:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1f950:	4770      	bx	lr

0001f952 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1f952:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1f954:	4618      	mov	r0, r3
   1f956:	681b      	ldr	r3, [r3, #0]
   1f958:	2b00      	cmp	r3, #0
   1f95a:	d1fb      	bne.n	1f954 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1f95c:	4770      	bx	lr

0001f95e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1f95e:	6802      	ldr	r2, [r0, #0]
{
   1f960:	b510      	push	{r4, lr}
	if (parent->frags) {
   1f962:	b12a      	cbz	r2, 1f970 <net_buf_frag_insert+0x12>
   1f964:	460b      	mov	r3, r1
	while (buf->frags) {
   1f966:	461c      	mov	r4, r3
   1f968:	681b      	ldr	r3, [r3, #0]
   1f96a:	2b00      	cmp	r3, #0
   1f96c:	d1fb      	bne.n	1f966 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1f96e:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1f970:	6001      	str	r1, [r0, #0]
}
   1f972:	bd10      	pop	{r4, pc}

0001f974 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1f974:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1f976:	4604      	mov	r4, r0
   1f978:	b920      	cbnz	r0, 1f984 <net_buf_frag_add+0x10>
	buf->ref++;
   1f97a:	790b      	ldrb	r3, [r1, #4]
   1f97c:	3301      	adds	r3, #1
   1f97e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1f980:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1f982:	bd10      	pop	{r4, pc}
   1f984:	4603      	mov	r3, r0
	while (buf->frags) {
   1f986:	4618      	mov	r0, r3
   1f988:	681b      	ldr	r3, [r3, #0]
   1f98a:	2b00      	cmp	r3, #0
   1f98c:	d1fb      	bne.n	1f986 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1f98e:	f7ff ffe6 	bl	1f95e <net_buf_frag_insert>
   1f992:	4620      	mov	r0, r4
   1f994:	e7f5      	b.n	1f982 <net_buf_frag_add+0xe>

0001f996 <net_buf_simple_add>:
	return buf->data + buf->len;
   1f996:	8883      	ldrh	r3, [r0, #4]
   1f998:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1f99a:	4419      	add	r1, r3
   1f99c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1f99e:	18d0      	adds	r0, r2, r3
   1f9a0:	4770      	bx	lr

0001f9a2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1f9a2:	b430      	push	{r4, r5}
   1f9a4:	8884      	ldrh	r4, [r0, #4]
   1f9a6:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1f9a8:	18a3      	adds	r3, r4, r2
   1f9aa:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f9ac:	1928      	adds	r0, r5, r4
}
   1f9ae:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f9b0:	f7fd bf02 	b.w	1d7b8 <memcpy>

0001f9b4 <net_buf_simple_add_u8>:
   1f9b4:	8883      	ldrh	r3, [r0, #4]
   1f9b6:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1f9b8:	b510      	push	{r4, lr}
	buf->len += len;
   1f9ba:	1c5c      	adds	r4, r3, #1
   1f9bc:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1f9be:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1f9c0:	18d0      	adds	r0, r2, r3
   1f9c2:	bd10      	pop	{r4, pc}

0001f9c4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1f9c4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1f9c6:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1f9c8:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1f9ca:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1f9cc:	4411      	add	r1, r2
	buf->data -= len;
   1f9ce:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1f9d0:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1f9d2:	4770      	bx	lr

0001f9d4 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1f9d4:	8882      	ldrh	r2, [r0, #4]
   1f9d6:	1a52      	subs	r2, r2, r1
{
   1f9d8:	4603      	mov	r3, r0
	buf->len -= len;
   1f9da:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1f9dc:	6800      	ldr	r0, [r0, #0]
   1f9de:	4408      	add	r0, r1
   1f9e0:	6018      	str	r0, [r3, #0]
}
   1f9e2:	4770      	bx	lr

0001f9e4 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1f9e4:	4603      	mov	r3, r0
	void *data = buf->data;
   1f9e6:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1f9e8:	889a      	ldrh	r2, [r3, #4]
   1f9ea:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1f9ec:	4401      	add	r1, r0
	buf->len -= len;
   1f9ee:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1f9f0:	6019      	str	r1, [r3, #0]

	return data;
}
   1f9f2:	4770      	bx	lr

0001f9f4 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1f9f4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1f9f6:	6803      	ldr	r3, [r0, #0]
   1f9f8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f9fa:	2102      	movs	r1, #2
   1f9fc:	f7ff ffea 	bl	1f9d4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1fa00:	4620      	mov	r0, r4
   1fa02:	bd10      	pop	{r4, pc}

0001fa04 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1fa04:	6802      	ldr	r2, [r0, #0]
   1fa06:	6880      	ldr	r0, [r0, #8]
}
   1fa08:	1a10      	subs	r0, r2, r0
   1fa0a:	4770      	bx	lr

0001fa0c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1fa0c:	8883      	ldrh	r3, [r0, #4]
   1fa0e:	88c2      	ldrh	r2, [r0, #6]
   1fa10:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1fa12:	6803      	ldr	r3, [r0, #0]
   1fa14:	6880      	ldr	r0, [r0, #8]
   1fa16:	1a18      	subs	r0, r3, r0
}
   1fa18:	1a10      	subs	r0, r2, r0
   1fa1a:	4770      	bx	lr

0001fa1c <rand_prio_high_vector_get>:
   1fa1c:	f7f9 bc72 	b.w	19304 <rand_prio_low_vector_get>

0001fa20 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   1fa20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa22:	b08d      	sub	sp, #52	; 0x34
   1fa24:	4615      	mov	r5, r2
   1fa26:	466a      	mov	r2, sp
   1fa28:	f100 0310 	add.w	r3, r0, #16
   1fa2c:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   1fa2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1fa32:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   1fa36:	4298      	cmp	r0, r3
   1fa38:	d1f9      	bne.n	1fa2e <bt_encrypt_le+0xe>
   1fa3a:	aa04      	add	r2, sp, #16
   1fa3c:	f101 0310 	add.w	r3, r1, #16
   1fa40:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   1fa42:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1fa46:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1fa4a:	428b      	cmp	r3, r1
   1fa4c:	d1f9      	bne.n	1fa42 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fa4e:	f04f 30ff 	mov.w	r0, #4294967295
   1fa52:	f04f 31ff 	mov.w	r1, #4294967295
   1fa56:	f7f9 fbf7 	bl	19248 <multithreading_lock_acquire>

	if (!errcode) {
   1fa5a:	4604      	mov	r4, r0
   1fa5c:	b990      	cbnz	r0, 1fa84 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   1fa5e:	aa08      	add	r2, sp, #32
   1fa60:	4639      	mov	r1, r7
   1fa62:	4630      	mov	r0, r6
   1fa64:	f7ec f9d9 	bl	be1a <sdc_soc_ecb_block_encrypt>
   1fa68:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1fa6a:	f7f9 fbf5 	bl	19258 <multithreading_lock_release>
	}

	if (!errcode) {
   1fa6e:	b94c      	cbnz	r4, 1fa84 <bt_encrypt_le+0x64>
   1fa70:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   1fa72:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   1fa76:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   1fa78:	f812 1901 	ldrb.w	r1, [r2], #-1
   1fa7c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1fa80:	429d      	cmp	r5, r3
   1fa82:	d1f9      	bne.n	1fa78 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   1fa84:	4620      	mov	r0, r4
   1fa86:	b00d      	add	sp, #52	; 0x34
   1fa88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fa8a <mpsl_fem_init>:
#if IS_ENABLED(CONFIG_MPSL_FEM)
	return mpsl_fem_configure();
#else
	return 0;
#endif
}
   1fa8a:	2000      	movs	r0, #0
   1fa8c:	4770      	bx	lr

0001fa8e <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1fa8e:	4668      	mov	r0, sp
   1fa90:	f020 0107 	bic.w	r1, r0, #7
   1fa94:	468d      	mov	sp, r1
   1fa96:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1fa98:	f7e2 fe6e 	bl	2778 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1fa9c:	f7f1 fcfc 	bl	11498 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1faa0:	f7f2 f840 	bl	11b24 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1faa4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1faa8:	4685      	mov	sp, r0
   1faaa:	4770      	bx	lr

0001faac <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1faac:	4668      	mov	r0, sp
   1faae:	f020 0107 	bic.w	r1, r0, #7
   1fab2:	468d      	mov	sp, r1
   1fab4:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1fab6:	f7e2 fde1 	bl	267c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1faba:	f7f1 fced 	bl	11498 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1fabe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fac2:	4685      	mov	sp, r0
   1fac4:	4770      	bx	lr

0001fac6 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fac6:	4668      	mov	r0, sp
   1fac8:	f020 0107 	bic.w	r1, r0, #7
   1facc:	468d      	mov	sp, r1
   1face:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1fad0:	f7eb fef4 	bl	b8bc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1fad4:	f7f1 fce0 	bl	11498 <_arch_isr_direct_pm>
   1fad8:	f7f2 f824 	bl	11b24 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fadc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fae0:	4685      	mov	sp, r0
   1fae2:	4770      	bx	lr

0001fae4 <nrfx_clock_stop>:
	switch (domain) {
   1fae4:	2801      	cmp	r0, #1
   1fae6:	d101      	bne.n	1faec <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1fae8:	f7e3 bc68 	b.w	33bc <mpsl_clock_hfclk_release>
}
   1faec:	4770      	bx	lr

0001faee <nrfx_clock_enable>:
}
   1faee:	4770      	bx	lr

0001faf0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1faf0:	f7e3 ba82 	b.w	2ff8 <MPSL_IRQ_CLOCK_Handler>

0001faf4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1faf4:	4700      	bx	r0

0001faf6 <z_device_state_init>:
}
   1faf6:	4770      	bx	lr

0001faf8 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   1faf8:	68c3      	ldr	r3, [r0, #12]
   1fafa:	8818      	ldrh	r0, [r3, #0]
   1fafc:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   1fb00:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1fb04:	4258      	negs	r0, r3
   1fb06:	4158      	adcs	r0, r3
   1fb08:	4770      	bx	lr

0001fb0a <k_heap_init>:
{
   1fb0a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1fb0c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1fb10:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1fb14:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1fb16:	f7fc ba3a 	b.w	1bf8e <sys_heap_init>

0001fb1a <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1fb1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb1e:	b087      	sub	sp, #28
   1fb20:	4604      	mov	r4, r0
   1fb22:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fb24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   1fb28:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fb2a:	f000 fbe3 	bl	202f4 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fb2e:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fb32:	4605      	mov	r5, r0
   1fb34:	4688      	mov	r8, r1
	__asm__ volatile(
   1fb36:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb3a:	f3ef 8b11 	mrs	fp, BASEPRI
   1fb3e:	f383 8811 	msr	BASEPRI, r3
   1fb42:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fb46:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1fb4a:	463a      	mov	r2, r7
   1fb4c:	4631      	mov	r1, r6
   1fb4e:	4620      	mov	r0, r4
   1fb50:	f7fc f9a2 	bl	1be98 <sys_heap_aligned_alloc>
   1fb54:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   1fb56:	f7fb fd43 	bl	1b5e0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1fb5a:	9b05      	ldr	r3, [sp, #20]
   1fb5c:	b13b      	cbz	r3, 1fb6e <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1fb5e:	f38b 8811 	msr	BASEPRI, fp
   1fb62:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1fb66:	4618      	mov	r0, r3
   1fb68:	b007      	add	sp, #28
   1fb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1fb6e:	1a2a      	subs	r2, r5, r0
   1fb70:	9202      	str	r2, [sp, #8]
   1fb72:	eb68 0201 	sbc.w	r2, r8, r1
   1fb76:	9203      	str	r2, [sp, #12]
   1fb78:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1fb7c:	2901      	cmp	r1, #1
   1fb7e:	f172 0200 	sbcs.w	r2, r2, #0
   1fb82:	dbec      	blt.n	1fb5e <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fb84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1fb88:	4659      	mov	r1, fp
   1fb8a:	e9cd 2300 	strd	r2, r3, [sp]
   1fb8e:	4648      	mov	r0, r9
   1fb90:	4652      	mov	r2, sl
   1fb92:	f7fb f8e9 	bl	1ad68 <z_pend_curr>
	__asm__ volatile(
   1fb96:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb9a:	f3ef 8b11 	mrs	fp, BASEPRI
   1fb9e:	f383 8811 	msr	BASEPRI, r3
   1fba2:	f3bf 8f6f 	isb	sy
   1fba6:	e7d0      	b.n	1fb4a <k_heap_aligned_alloc+0x30>

0001fba8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1fba8:	b538      	push	{r3, r4, r5, lr}
   1fbaa:	4604      	mov	r4, r0
   1fbac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fbb0:	f3ef 8511 	mrs	r5, BASEPRI
   1fbb4:	f383 8811 	msr	BASEPRI, r3
   1fbb8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1fbbc:	f7fc f91f 	bl	1bdfe <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1fbc0:	f104 000c 	add.w	r0, r4, #12
   1fbc4:	f000 fb11 	bl	201ea <z_unpend_all>
   1fbc8:	b130      	cbz	r0, 1fbd8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1fbca:	4629      	mov	r1, r5
   1fbcc:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1fbd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1fbd4:	f7fb b844 	b.w	1ac60 <z_reschedule>
	__asm__ volatile(
   1fbd8:	f385 8811 	msr	BASEPRI, r5
   1fbdc:	f3bf 8f6f 	isb	sy
}
   1fbe0:	bd38      	pop	{r3, r4, r5, pc}

0001fbe2 <k_mem_slab_init>:
{
   1fbe2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1fbe4:	2400      	movs	r4, #0
   1fbe6:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1fbe8:	ea41 0402 	orr.w	r4, r1, r2
   1fbec:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1fbf0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1fbf4:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1fbf6:	d10c      	bne.n	1fc12 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1fbf8:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fbfa:	42a3      	cmp	r3, r4
   1fbfc:	d103      	bne.n	1fc06 <k_mem_slab_init+0x24>
   1fbfe:	e9c0 0000 	strd	r0, r0, [r0]
}
   1fc02:	2000      	movs	r0, #0
}
   1fc04:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1fc06:	6945      	ldr	r5, [r0, #20]
   1fc08:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc0a:	3401      	adds	r4, #1
		slab->free_list = p;
   1fc0c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1fc0e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc10:	e7f3      	b.n	1fbfa <k_mem_slab_init+0x18>
		return -EINVAL;
   1fc12:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1fc16:	e7f5      	b.n	1fc04 <k_mem_slab_init+0x22>

0001fc18 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1fc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc1a:	4604      	mov	r4, r0
   1fc1c:	460d      	mov	r5, r1
	__asm__ volatile(
   1fc1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fc22:	f3ef 8611 	mrs	r6, BASEPRI
   1fc26:	f383 8811 	msr	BASEPRI, r3
   1fc2a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1fc2e:	6947      	ldr	r7, [r0, #20]
   1fc30:	b977      	cbnz	r7, 1fc50 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1fc32:	f000 fac2 	bl	201ba <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1fc36:	b158      	cbz	r0, 1fc50 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1fc38:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1fc3a:	6142      	str	r2, [r0, #20]
   1fc3c:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1fc3e:	f000 fa75 	bl	2012c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1fc42:	4631      	mov	r1, r6
   1fc44:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1fc48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1fc4c:	f7fb b808 	b.w	1ac60 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1fc50:	682b      	ldr	r3, [r5, #0]
   1fc52:	6962      	ldr	r2, [r4, #20]
   1fc54:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1fc56:	682b      	ldr	r3, [r5, #0]
   1fc58:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1fc5a:	69a3      	ldr	r3, [r4, #24]
   1fc5c:	3b01      	subs	r3, #1
   1fc5e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1fc60:	f386 8811 	msr	BASEPRI, r6
   1fc64:	f3bf 8f6f 	isb	sy
}
   1fc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fc6a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fc6a:	f3ef 8005 	mrs	r0, IPSR
}
   1fc6e:	3800      	subs	r0, #0
   1fc70:	bf18      	it	ne
   1fc72:	2001      	movne	r0, #1
   1fc74:	4770      	bx	lr

0001fc76 <z_impl_k_thread_name_set>:
}
   1fc76:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1fc7a:	4770      	bx	lr

0001fc7c <k_thread_name_get>:
}
   1fc7c:	2000      	movs	r0, #0
   1fc7e:	4770      	bx	lr

0001fc80 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1fc80:	f7fb b9c6 	b.w	1b010 <z_sched_start>

0001fc84 <z_pm_save_idle_exit>:
{
   1fc84:	b508      	push	{r3, lr}
	pm_system_resume();
   1fc86:	f7f0 feff 	bl	10a88 <pm_system_resume>
}
   1fc8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1fc8e:	f7fc bc73 	b.w	1c578 <sys_clock_idle_exit>

0001fc92 <z_impl_k_mutex_init>:
{
   1fc92:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1fc94:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1fc96:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1fc9a:	e9c3 3300 	strd	r3, r3, [r3]
}
   1fc9e:	4770      	bx	lr

0001fca0 <queue_insert>:
{
   1fca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fca4:	4699      	mov	r9, r3
   1fca6:	4604      	mov	r4, r0
   1fca8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1fcac:	460d      	mov	r5, r1
   1fcae:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fcb0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1fcb4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fcb8:	f3ef 8711 	mrs	r7, BASEPRI
   1fcbc:	f382 8811 	msr	BASEPRI, r2
   1fcc0:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1fcc4:	b103      	cbz	r3, 1fcc8 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1fcc6:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1fcc8:	4630      	mov	r0, r6
   1fcca:	f000 fa76 	bl	201ba <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1fcce:	b158      	cbz	r0, 1fce8 <queue_insert+0x48>
   1fcd0:	2400      	movs	r4, #0
   1fcd2:	67c4      	str	r4, [r0, #124]	; 0x7c
   1fcd4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1fcd8:	f000 fa28 	bl	2012c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1fcdc:	4630      	mov	r0, r6
   1fcde:	4639      	mov	r1, r7
   1fce0:	f7fa ffbe 	bl	1ac60 <z_reschedule>
	return 0;
   1fce4:	2000      	movs	r0, #0
   1fce6:	e00c      	b.n	1fd02 <queue_insert+0x62>
	if (alloc) {
   1fce8:	f1b9 0f00 	cmp.w	r9, #0
   1fcec:	d01b      	beq.n	1fd26 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1fcee:	2108      	movs	r1, #8
   1fcf0:	f7fb fd9c 	bl	1b82c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1fcf4:	b938      	cbnz	r0, 1fd06 <queue_insert+0x66>
	__asm__ volatile(
   1fcf6:	f387 8811 	msr	BASEPRI, r7
   1fcfa:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1fcfe:	f06f 000b 	mvn.w	r0, #11
}
   1fd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1fd06:	2301      	movs	r3, #1
		anode->data = data;
   1fd08:	f8c0 8004 	str.w	r8, [r0, #4]
   1fd0c:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fd0e:	6803      	ldr	r3, [r0, #0]
   1fd10:	f003 0203 	and.w	r2, r3, #3
   1fd14:	b95d      	cbnz	r5, 1fd2e <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd16:	6823      	ldr	r3, [r4, #0]
   1fd18:	4313      	orrs	r3, r2
   1fd1a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fd1c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1fd1e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fd20:	b973      	cbnz	r3, 1fd40 <queue_insert+0xa0>
	list->tail = node;
   1fd22:	6060      	str	r0, [r4, #4]
}
   1fd24:	e00c      	b.n	1fd40 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1fd26:	f8c8 9000 	str.w	r9, [r8]
}
   1fd2a:	4640      	mov	r0, r8
   1fd2c:	e7ef      	b.n	1fd0e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fd2e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fd30:	f033 0303 	bics.w	r3, r3, #3
   1fd34:	d110      	bne.n	1fd58 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd36:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1fd38:	6862      	ldr	r2, [r4, #4]
   1fd3a:	b93a      	cbnz	r2, 1fd4c <queue_insert+0xac>
	list->head = node;
   1fd3c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fd40:	2104      	movs	r1, #4
   1fd42:	f104 0010 	add.w	r0, r4, #16
   1fd46:	f000 fc6b 	bl	20620 <z_handle_obj_poll_events>
   1fd4a:	e7c7      	b.n	1fcdc <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fd4c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd4e:	f003 0303 	and.w	r3, r3, #3
   1fd52:	4303      	orrs	r3, r0
   1fd54:	6013      	str	r3, [r2, #0]
   1fd56:	e7e4      	b.n	1fd22 <queue_insert+0x82>
   1fd58:	4313      	orrs	r3, r2
   1fd5a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fd5c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd5e:	f003 0303 	and.w	r3, r3, #3
   1fd62:	4303      	orrs	r3, r0
   1fd64:	602b      	str	r3, [r5, #0]
}
   1fd66:	e7eb      	b.n	1fd40 <queue_insert+0xa0>

0001fd68 <z_queue_node_peek>:
{
   1fd68:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1fd6a:	4604      	mov	r4, r0
   1fd6c:	b130      	cbz	r0, 1fd7c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fd6e:	6802      	ldr	r2, [r0, #0]
   1fd70:	0793      	lsls	r3, r2, #30
   1fd72:	d003      	beq.n	1fd7c <z_queue_node_peek+0x14>
		ret = anode->data;
   1fd74:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1fd76:	b109      	cbz	r1, 1fd7c <z_queue_node_peek+0x14>
			k_free(anode);
   1fd78:	f000 fc60 	bl	2063c <k_free>
}
   1fd7c:	4620      	mov	r0, r4
   1fd7e:	bd10      	pop	{r4, pc}

0001fd80 <z_impl_k_queue_init>:
	list->head = NULL;
   1fd80:	2300      	movs	r3, #0
	list->tail = NULL;
   1fd82:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   1fd86:	f100 0308 	add.w	r3, r0, #8
   1fd8a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1fd8e:	f100 0310 	add.w	r3, r0, #16
   1fd92:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1fd96:	4770      	bx	lr

0001fd98 <k_queue_append>:
{
   1fd98:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1fd9a:	2301      	movs	r3, #1
   1fd9c:	9300      	str	r3, [sp, #0]
   1fd9e:	2300      	movs	r3, #0
{
   1fda0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1fda2:	4619      	mov	r1, r3
   1fda4:	f7ff ff7c 	bl	1fca0 <queue_insert>
}
   1fda8:	b003      	add	sp, #12
   1fdaa:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdae <k_queue_prepend>:
{
   1fdae:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1fdb0:	2300      	movs	r3, #0
{
   1fdb2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1fdb4:	9300      	str	r3, [sp, #0]
   1fdb6:	4619      	mov	r1, r3
   1fdb8:	f7ff ff72 	bl	1fca0 <queue_insert>
}
   1fdbc:	b003      	add	sp, #12
   1fdbe:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdc2 <k_queue_append_list>:
{
   1fdc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fdc6:	4605      	mov	r5, r0
   1fdc8:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1fdca:	460c      	mov	r4, r1
   1fdcc:	b391      	cbz	r1, 1fe34 <k_queue_append_list+0x72>
   1fdce:	b38a      	cbz	r2, 1fe34 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fdd0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1fdd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fdd8:	f3ef 8811 	mrs	r8, BASEPRI
   1fddc:	f383 8811 	msr	BASEPRI, r3
   1fde0:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1fde4:	4638      	mov	r0, r7
   1fde6:	f000 f9e8 	bl	201ba <z_unpend_first_thread>
   1fdea:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1fdee:	b920      	cbnz	r0, 1fdfa <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1fdf0:	686b      	ldr	r3, [r5, #4]
   1fdf2:	b9cb      	cbnz	r3, 1fe28 <k_queue_append_list+0x66>
	list->head = node;
   1fdf4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1fdf6:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1fdf8:	e00a      	b.n	1fe10 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1fdfa:	6144      	str	r4, [r0, #20]
   1fdfc:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1fe00:	f000 f994 	bl	2012c <z_ready_thread>
		head = *(void **)head;
   1fe04:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1fe06:	4638      	mov	r0, r7
   1fe08:	f000 f9d7 	bl	201ba <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1fe0c:	2c00      	cmp	r4, #0
   1fe0e:	d1ee      	bne.n	1fdee <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fe10:	2104      	movs	r1, #4
   1fe12:	f105 0010 	add.w	r0, r5, #16
   1fe16:	f000 fc03 	bl	20620 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1fe1a:	4638      	mov	r0, r7
   1fe1c:	4641      	mov	r1, r8
   1fe1e:	f7fa ff1f 	bl	1ac60 <z_reschedule>
	return 0;
   1fe22:	2000      	movs	r0, #0
}
   1fe24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fe28:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe2a:	f001 0103 	and.w	r1, r1, #3
   1fe2e:	430c      	orrs	r4, r1
   1fe30:	601c      	str	r4, [r3, #0]
}
   1fe32:	e7e0      	b.n	1fdf6 <k_queue_append_list+0x34>
		return -EINVAL;
   1fe34:	f06f 0015 	mvn.w	r0, #21
   1fe38:	e7f4      	b.n	1fe24 <k_queue_append_list+0x62>

0001fe3a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1fe3a:	b15a      	cbz	r2, 1fe54 <z_impl_k_sem_init+0x1a>
   1fe3c:	428a      	cmp	r2, r1
   1fe3e:	d309      	bcc.n	1fe54 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1fe40:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1fe44:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1fe48:	e9c0 0000 	strd	r0, r0, [r0]
   1fe4c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1fe50:	2000      	movs	r0, #0
   1fe52:	4770      	bx	lr
		return -EINVAL;
   1fe54:	f06f 0015 	mvn.w	r0, #21
}
   1fe58:	4770      	bx	lr

0001fe5a <notify_queue_locked>:
	if (queue != NULL) {
   1fe5a:	b120      	cbz	r0, 1fe66 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1fe5c:	2200      	movs	r2, #0
   1fe5e:	4611      	mov	r1, r2
   1fe60:	3088      	adds	r0, #136	; 0x88
   1fe62:	f000 b9d2 	b.w	2020a <z_sched_wake>
}
   1fe66:	4770      	bx	lr

0001fe68 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   1fe68:	68c3      	ldr	r3, [r0, #12]
{
   1fe6a:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   1fe6c:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   1fe70:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1fe74:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1fe76:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1fe78:	d502      	bpl.n	1fe80 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1fe7a:	3010      	adds	r0, #16
   1fe7c:	f000 f9e2 	bl	20244 <z_abort_timeout>
}
   1fe80:	4620      	mov	r0, r4
   1fe82:	bd10      	pop	{r4, pc}

0001fe84 <cancel_async_locked>:
{
   1fe84:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fe86:	68c0      	ldr	r0, [r0, #12]
{
   1fe88:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fe8a:	0784      	lsls	r4, r0, #30
   1fe8c:	f3c0 0140 	ubfx	r1, r0, #1, #1
   1fe90:	d416      	bmi.n	1fec0 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   1fe92:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1fe96:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   1fe98:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   1fe9a:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1fe9c:	d510      	bpl.n	1fec0 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fe9e:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1fea2:	b168      	cbz	r0, 1fec0 <cancel_async_locked+0x3c>
   1fea4:	4283      	cmp	r3, r0
   1fea6:	d11d      	bne.n	1fee4 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   1fea8:	6818      	ldr	r0, [r3, #0]
   1feaa:	b999      	cbnz	r1, 1fed4 <cancel_async_locked+0x50>
   1feac:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   1feb0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1feb4:	428b      	cmp	r3, r1
   1feb6:	d101      	bne.n	1febc <cancel_async_locked+0x38>
	list->tail = node;
   1feb8:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   1febc:	2200      	movs	r2, #0
   1febe:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   1fec0:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   1fec2:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   1fec6:	bf1e      	ittt	ne
   1fec8:	f042 0202 	orrne.w	r2, r2, #2
   1fecc:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1fece:	f002 000f 	andne.w	r0, r2, #15
}
   1fed2:	bd10      	pop	{r4, pc}
   1fed4:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fed6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1feda:	4283      	cmp	r3, r0
	list->tail = node;
   1fedc:	bf08      	it	eq
   1fede:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   1fee2:	e7eb      	b.n	1febc <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fee4:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fee6:	6800      	ldr	r0, [r0, #0]
   1fee8:	e7db      	b.n	1fea2 <cancel_async_locked+0x1e>

0001feea <work_timeout>:
{
   1feea:	b513      	push	{r0, r1, r4, lr}
   1feec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fef0:	f3ef 8411 	mrs	r4, BASEPRI
   1fef4:	f383 8811 	msr	BASEPRI, r3
   1fef8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1fefc:	2300      	movs	r3, #0
   1fefe:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   1ff00:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   1ff04:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ff08:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1ff0a:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ff0e:	d505      	bpl.n	1ff1c <work_timeout+0x32>
		queue = dw->queue;
   1ff10:	6983      	ldr	r3, [r0, #24]
   1ff12:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1ff14:	a901      	add	r1, sp, #4
   1ff16:	3810      	subs	r0, #16
   1ff18:	f7fa fd66 	bl	1a9e8 <submit_to_queue_locked>
	__asm__ volatile(
   1ff1c:	f384 8811 	msr	BASEPRI, r4
   1ff20:	f3bf 8f6f 	isb	sy
}
   1ff24:	b002      	add	sp, #8
   1ff26:	bd10      	pop	{r4, pc}

0001ff28 <k_work_init>:
{
   1ff28:	b538      	push	{r3, r4, r5, lr}
   1ff2a:	4604      	mov	r4, r0
   1ff2c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1ff2e:	2210      	movs	r2, #16
   1ff30:	2100      	movs	r1, #0
   1ff32:	f7fd fc6c 	bl	1d80e <memset>
   1ff36:	6065      	str	r5, [r4, #4]
}
   1ff38:	bd38      	pop	{r3, r4, r5, pc}

0001ff3a <k_work_submit_to_queue>:
{
   1ff3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ff3c:	9001      	str	r0, [sp, #4]
   1ff3e:	4608      	mov	r0, r1
	__asm__ volatile(
   1ff40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ff44:	f3ef 8511 	mrs	r5, BASEPRI
   1ff48:	f383 8811 	msr	BASEPRI, r3
   1ff4c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1ff50:	a901      	add	r1, sp, #4
   1ff52:	f7fa fd49 	bl	1a9e8 <submit_to_queue_locked>
   1ff56:	4604      	mov	r4, r0
	__asm__ volatile(
   1ff58:	f385 8811 	msr	BASEPRI, r5
   1ff5c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1ff60:	2800      	cmp	r0, #0
   1ff62:	dd04      	ble.n	1ff6e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1ff64:	f7fb f944 	bl	1b1f0 <z_impl_k_is_preempt_thread>
   1ff68:	b108      	cbz	r0, 1ff6e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1ff6a:	f7fb f8c7 	bl	1b0fc <z_impl_k_yield>
}
   1ff6e:	4620      	mov	r0, r4
   1ff70:	b003      	add	sp, #12
   1ff72:	bd30      	pop	{r4, r5, pc}

0001ff74 <k_work_init_delayable>:
{
   1ff74:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1ff76:	2230      	movs	r2, #48	; 0x30
{
   1ff78:	4604      	mov	r4, r0
   1ff7a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1ff7c:	2100      	movs	r1, #0
   1ff7e:	f7fd fc46 	bl	1d80e <memset>
   1ff82:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ff86:	6065      	str	r5, [r4, #4]
   1ff88:	60e3      	str	r3, [r4, #12]
}
   1ff8a:	bd38      	pop	{r3, r4, r5, pc}

0001ff8c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1ff8c:	b538      	push	{r3, r4, r5, lr}
   1ff8e:	4604      	mov	r4, r0
	__asm__ volatile(
   1ff90:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ff94:	f3ef 8511 	mrs	r5, BASEPRI
   1ff98:	f383 8811 	msr	BASEPRI, r3
   1ff9c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1ffa0:	f7ff ff62 	bl	1fe68 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1ffa4:	4620      	mov	r0, r4
   1ffa6:	f7ff ff6d 	bl	1fe84 <cancel_async_locked>
	__asm__ volatile(
   1ffaa:	f385 8811 	msr	BASEPRI, r5
   1ffae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1ffb2:	bd38      	pop	{r3, r4, r5, pc}

0001ffb4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ffb6:	4604      	mov	r4, r0
   1ffb8:	460d      	mov	r5, r1
	__asm__ volatile(
   1ffba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ffbe:	f3ef 8711 	mrs	r7, BASEPRI
   1ffc2:	f383 8811 	msr	BASEPRI, r3
   1ffc6:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ffca:	f3bf 8f5b 	dmb	ish
   1ffce:	68c3      	ldr	r3, [r0, #12]
   1ffd0:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1ffd4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1ffd8:	2b00      	cmp	r3, #0
   1ffda:	bf14      	ite	ne
   1ffdc:	2601      	movne	r6, #1
   1ffde:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1ffe0:	d009      	beq.n	1fff6 <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   1ffe2:	f7ff ff41 	bl	1fe68 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1ffe6:	4620      	mov	r0, r4
   1ffe8:	f7ff ff4c 	bl	1fe84 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1ffec:	4629      	mov	r1, r5
   1ffee:	4620      	mov	r0, r4
   1fff0:	f7fa fcdc 	bl	1a9ac <cancel_sync_locked>
   1fff4:	4603      	mov	r3, r0
	__asm__ volatile(
   1fff6:	f387 8811 	msr	BASEPRI, r7
   1fffa:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1fffe:	b13b      	cbz	r3, 20010 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   20000:	f04f 32ff 	mov.w	r2, #4294967295
   20004:	f04f 33ff 	mov.w	r3, #4294967295
   20008:	f105 0008 	add.w	r0, r5, #8
   2000c:	f7fa fbec 	bl	1a7e8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20010:	4630      	mov	r0, r6
   20012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020014 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   20014:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20018:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2001a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2001c:	2300      	movs	r3, #0
	node->prev = NULL;
   2001e:	e9c0 3300 	strd	r3, r3, [r0]
}
   20022:	4770      	bx	lr

00020024 <unpend_thread_no_timeout>:
{
   20024:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   20026:	f7ff fff5 	bl	20014 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2002a:	7b43      	ldrb	r3, [r0, #13]
   2002c:	f023 0302 	bic.w	r3, r3, #2
   20030:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   20032:	2300      	movs	r3, #0
   20034:	6083      	str	r3, [r0, #8]
}
   20036:	bd08      	pop	{r3, pc}

00020038 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   20038:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2003c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   20040:	4283      	cmp	r3, r0
		return b2 - b1;
   20042:	bf14      	ite	ne
   20044:	1ac0      	subne	r0, r0, r3
	return 0;
   20046:	2000      	moveq	r0, #0
}
   20048:	4770      	bx	lr

0002004a <z_unpend_thread_no_timeout>:
{
   2004a:	b508      	push	{r3, lr}
	__asm__ volatile(
   2004c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20050:	f3ef 8111 	mrs	r1, BASEPRI
   20054:	f383 8811 	msr	BASEPRI, r3
   20058:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2005c:	f7ff ffe2 	bl	20024 <unpend_thread_no_timeout>
	__asm__ volatile(
   20060:	f381 8811 	msr	BASEPRI, r1
   20064:	f3bf 8f6f 	isb	sy
}
   20068:	bd08      	pop	{r3, pc}

0002006a <z_unpend_thread>:
{
   2006a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2006c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20070:	f3ef 8411 	mrs	r4, BASEPRI
   20074:	f383 8811 	msr	BASEPRI, r3
   20078:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2007c:	f7ff ffd2 	bl	20024 <unpend_thread_no_timeout>
	__asm__ volatile(
   20080:	f384 8811 	msr	BASEPRI, r4
   20084:	f3bf 8f6f 	isb	sy
}
   20088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2008c:	3018      	adds	r0, #24
   2008e:	f000 b8d9 	b.w	20244 <z_abort_timeout>

00020092 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20092:	4603      	mov	r3, r0
   20094:	b920      	cbnz	r0, 200a0 <z_reschedule_irqlock+0xe>
   20096:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2009a:	b90a      	cbnz	r2, 200a0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2009c:	f7f1 b95c 	b.w	11358 <arch_swap>
   200a0:	f383 8811 	msr	BASEPRI, r3
   200a4:	f3bf 8f6f 	isb	sy
}
   200a8:	4770      	bx	lr

000200aa <z_reschedule_unlocked>:
	__asm__ volatile(
   200aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   200ae:	f3ef 8011 	mrs	r0, BASEPRI
   200b2:	f383 8811 	msr	BASEPRI, r3
   200b6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   200ba:	f7ff bfea 	b.w	20092 <z_reschedule_irqlock>

000200be <z_priq_dumb_best>:
{
   200be:	4603      	mov	r3, r0
	return list->head == list;
   200c0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   200c2:	4283      	cmp	r3, r0
   200c4:	d003      	beq.n	200ce <z_priq_dumb_best+0x10>
	if (n != NULL) {
   200c6:	2800      	cmp	r0, #0
   200c8:	bf38      	it	cc
   200ca:	2000      	movcc	r0, #0
   200cc:	4770      	bx	lr
	struct k_thread *thread = NULL;
   200ce:	2000      	movs	r0, #0
}
   200d0:	4770      	bx	lr

000200d2 <add_to_waitq_locked>:
{
   200d2:	b538      	push	{r3, r4, r5, lr}
   200d4:	4604      	mov	r4, r0
   200d6:	460d      	mov	r5, r1
	unready_thread(thread);
   200d8:	f7fa fe08 	bl	1acec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   200dc:	7b63      	ldrb	r3, [r4, #13]
   200de:	f043 0302 	orr.w	r3, r3, #2
   200e2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   200e4:	b1b5      	cbz	r5, 20114 <add_to_waitq_locked+0x42>
	return list->head == list;
   200e6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   200e8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   200ea:	429d      	cmp	r5, r3
   200ec:	bf08      	it	eq
   200ee:	2300      	moveq	r3, #0
   200f0:	2b00      	cmp	r3, #0
   200f2:	bf38      	it	cc
   200f4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   200f6:	b19b      	cbz	r3, 20120 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   200f8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   200fc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   20100:	4291      	cmp	r1, r2
   20102:	d008      	beq.n	20116 <add_to_waitq_locked+0x44>
		return b2 - b1;
   20104:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   20106:	2a00      	cmp	r2, #0
   20108:	dd05      	ble.n	20116 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   2010a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2010c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   20110:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20112:	605c      	str	r4, [r3, #4]
}
   20114:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   20116:	686a      	ldr	r2, [r5, #4]
   20118:	4293      	cmp	r3, r2
   2011a:	d001      	beq.n	20120 <add_to_waitq_locked+0x4e>
   2011c:	681b      	ldr	r3, [r3, #0]
   2011e:	e7ea      	b.n	200f6 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   20120:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   20122:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   20126:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20128:	606c      	str	r4, [r5, #4]
   2012a:	e7f3      	b.n	20114 <add_to_waitq_locked+0x42>

0002012c <z_ready_thread>:
{
   2012c:	b510      	push	{r4, lr}
   2012e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20132:	f3ef 8411 	mrs	r4, BASEPRI
   20136:	f383 8811 	msr	BASEPRI, r3
   2013a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2013e:	f7fa ff2f 	bl	1afa0 <ready_thread>
	__asm__ volatile(
   20142:	f384 8811 	msr	BASEPRI, r4
   20146:	f3bf 8f6f 	isb	sy
}
   2014a:	bd10      	pop	{r4, pc}

0002014c <z_thread_timeout>:
{
   2014c:	b510      	push	{r4, lr}
   2014e:	4601      	mov	r1, r0
	__asm__ volatile(
   20150:	f04f 0340 	mov.w	r3, #64	; 0x40
   20154:	f3ef 8411 	mrs	r4, BASEPRI
   20158:	f383 8811 	msr	BASEPRI, r3
   2015c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   20160:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   20164:	f013 0f28 	tst.w	r3, #40	; 0x28
   20168:	d10d      	bne.n	20186 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2016a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2016e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   20170:	b10b      	cbz	r3, 20176 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   20172:	f7ff ff57 	bl	20024 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20176:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2017a:	f023 0314 	bic.w	r3, r3, #20
   2017e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   20182:	f7fa ff0d 	bl	1afa0 <ready_thread>
	__asm__ volatile(
   20186:	f384 8811 	msr	BASEPRI, r4
   2018a:	f3bf 8f6f 	isb	sy
}
   2018e:	bd10      	pop	{r4, pc}

00020190 <z_unpend1_no_timeout>:
{
   20190:	b510      	push	{r4, lr}
	__asm__ volatile(
   20192:	f04f 0340 	mov.w	r3, #64	; 0x40
   20196:	f3ef 8411 	mrs	r4, BASEPRI
   2019a:	f383 8811 	msr	BASEPRI, r3
   2019e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   201a2:	f7ff ff8c 	bl	200be <z_priq_dumb_best>
		if (thread != NULL) {
   201a6:	4601      	mov	r1, r0
   201a8:	b108      	cbz	r0, 201ae <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   201aa:	f7ff ff3b 	bl	20024 <unpend_thread_no_timeout>
	__asm__ volatile(
   201ae:	f384 8811 	msr	BASEPRI, r4
   201b2:	f3bf 8f6f 	isb	sy
}
   201b6:	4608      	mov	r0, r1
   201b8:	bd10      	pop	{r4, pc}

000201ba <z_unpend_first_thread>:
{
   201ba:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   201bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   201c0:	f3ef 8511 	mrs	r5, BASEPRI
   201c4:	f383 8811 	msr	BASEPRI, r3
   201c8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   201cc:	f7ff ff77 	bl	200be <z_priq_dumb_best>
		if (thread != NULL) {
   201d0:	4604      	mov	r4, r0
   201d2:	b120      	cbz	r0, 201de <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   201d4:	f7ff ff26 	bl	20024 <unpend_thread_no_timeout>
   201d8:	3018      	adds	r0, #24
   201da:	f000 f833 	bl	20244 <z_abort_timeout>
	__asm__ volatile(
   201de:	f385 8811 	msr	BASEPRI, r5
   201e2:	f3bf 8f6f 	isb	sy
}
   201e6:	4620      	mov	r0, r4
   201e8:	bd38      	pop	{r3, r4, r5, pc}

000201ea <z_unpend_all>:
{
   201ea:	b538      	push	{r3, r4, r5, lr}
   201ec:	4605      	mov	r5, r0
	int need_sched = 0;
   201ee:	2000      	movs	r0, #0
	return list->head == list;
   201f0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   201f2:	42a5      	cmp	r5, r4
   201f4:	d000      	beq.n	201f8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   201f6:	b904      	cbnz	r4, 201fa <z_unpend_all+0x10>
}
   201f8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   201fa:	4620      	mov	r0, r4
   201fc:	f7ff ff35 	bl	2006a <z_unpend_thread>
		z_ready_thread(thread);
   20200:	4620      	mov	r0, r4
   20202:	f7ff ff93 	bl	2012c <z_ready_thread>
		need_sched = 1;
   20206:	2001      	movs	r0, #1
   20208:	e7f2      	b.n	201f0 <z_unpend_all+0x6>

0002020a <z_sched_wake>:
{
   2020a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2020c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20210:	f3ef 8511 	mrs	r5, BASEPRI
   20214:	f383 8811 	msr	BASEPRI, r3
   20218:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2021c:	f7ff ff4f 	bl	200be <z_priq_dumb_best>
		if (thread != NULL) {
   20220:	4604      	mov	r4, r0
   20222:	b150      	cbz	r0, 2023a <z_sched_wake+0x30>
   20224:	67c1      	str	r1, [r0, #124]	; 0x7c
   20226:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   20228:	f7ff fefc 	bl	20024 <unpend_thread_no_timeout>
   2022c:	3018      	adds	r0, #24
   2022e:	f000 f809 	bl	20244 <z_abort_timeout>
			ready_thread(thread);
   20232:	4620      	mov	r0, r4
   20234:	f7fa feb4 	bl	1afa0 <ready_thread>
			ret = true;
   20238:	2001      	movs	r0, #1
	__asm__ volatile(
   2023a:	f385 8811 	msr	BASEPRI, r5
   2023e:	f3bf 8f6f 	isb	sy
}
   20242:	bd38      	pop	{r3, r4, r5, pc}

00020244 <z_abort_timeout>:
{
   20244:	b510      	push	{r4, lr}
	__asm__ volatile(
   20246:	f04f 0240 	mov.w	r2, #64	; 0x40
   2024a:	f3ef 8411 	mrs	r4, BASEPRI
   2024e:	f382 8811 	msr	BASEPRI, r2
   20252:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20256:	6803      	ldr	r3, [r0, #0]
   20258:	b13b      	cbz	r3, 2026a <z_abort_timeout+0x26>
			remove_timeout(to);
   2025a:	f7fb f861 	bl	1b320 <remove_timeout>
			ret = 0;
   2025e:	2000      	movs	r0, #0
	__asm__ volatile(
   20260:	f384 8811 	msr	BASEPRI, r4
   20264:	f3bf 8f6f 	isb	sy
}
   20268:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2026a:	f06f 0015 	mvn.w	r0, #21
   2026e:	e7f7      	b.n	20260 <z_abort_timeout+0x1c>

00020270 <z_timeout_remaining>:
{
   20270:	b510      	push	{r4, lr}
	__asm__ volatile(
   20272:	f04f 0340 	mov.w	r3, #64	; 0x40
   20276:	f3ef 8411 	mrs	r4, BASEPRI
   2027a:	f383 8811 	msr	BASEPRI, r3
   2027e:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   20282:	f7fb f893 	bl	1b3ac <timeout_rem>
	__asm__ volatile(
   20286:	f384 8811 	msr	BASEPRI, r4
   2028a:	f3bf 8f6f 	isb	sy
}
   2028e:	bd10      	pop	{r4, pc}

00020290 <z_get_next_timeout_expiry>:
{
   20290:	b510      	push	{r4, lr}
	__asm__ volatile(
   20292:	f04f 0340 	mov.w	r3, #64	; 0x40
   20296:	f3ef 8411 	mrs	r4, BASEPRI
   2029a:	f383 8811 	msr	BASEPRI, r3
   2029e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   202a2:	f7fb f857 	bl	1b354 <next_timeout>
	__asm__ volatile(
   202a6:	f384 8811 	msr	BASEPRI, r4
   202aa:	f3bf 8f6f 	isb	sy
}
   202ae:	bd10      	pop	{r4, pc}

000202b0 <z_set_timeout_expiry>:
{
   202b0:	b570      	push	{r4, r5, r6, lr}
   202b2:	4604      	mov	r4, r0
   202b4:	460d      	mov	r5, r1
	__asm__ volatile(
   202b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   202ba:	f3ef 8611 	mrs	r6, BASEPRI
   202be:	f383 8811 	msr	BASEPRI, r3
   202c2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   202c6:	f7fb f845 	bl	1b354 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   202ca:	2801      	cmp	r0, #1
   202cc:	dd05      	ble.n	202da <z_set_timeout_expiry+0x2a>
   202ce:	42a0      	cmp	r0, r4
   202d0:	db03      	blt.n	202da <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   202d2:	4629      	mov	r1, r5
   202d4:	4620      	mov	r0, r4
   202d6:	f7f0 fe53 	bl	10f80 <sys_clock_set_timeout>
	__asm__ volatile(
   202da:	f386 8811 	msr	BASEPRI, r6
   202de:	f3bf 8f6f 	isb	sy
}
   202e2:	bd70      	pop	{r4, r5, r6, pc}

000202e4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   202e4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   202e6:	f7fb f97b 	bl	1b5e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   202ea:	bd08      	pop	{r3, pc}

000202ec <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   202ec:	b108      	cbz	r0, 202f2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   202ee:	f7f1 bd89 	b.w	11e04 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   202f2:	4770      	bx	lr

000202f4 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   202f4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   202f6:	1c4b      	adds	r3, r1, #1
   202f8:	bf08      	it	eq
   202fa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   202fe:	4604      	mov	r4, r0
   20300:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20302:	d013      	beq.n	2032c <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20304:	ea54 0105 	orrs.w	r1, r4, r5
   20308:	d103      	bne.n	20312 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2030a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2030e:	f7fb b967 	b.w	1b5e0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   20312:	f06f 0101 	mvn.w	r1, #1
   20316:	1a0a      	subs	r2, r1, r0
   20318:	f04f 31ff 	mov.w	r1, #4294967295
   2031c:	eb61 0305 	sbc.w	r3, r1, r5
   20320:	2a00      	cmp	r2, #0
   20322:	f173 0100 	sbcs.w	r1, r3, #0
   20326:	db02      	blt.n	2032e <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   20328:	4610      	mov	r0, r2
   2032a:	4619      	mov	r1, r3
}
   2032c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2032e:	f7fb f957 	bl	1b5e0 <sys_clock_tick_get>
   20332:	2c01      	cmp	r4, #1
   20334:	f175 0300 	sbcs.w	r3, r5, #0
   20338:	bfbc      	itt	lt
   2033a:	2401      	movlt	r4, #1
   2033c:	2500      	movlt	r5, #0
   2033e:	1820      	adds	r0, r4, r0
   20340:	eb45 0101 	adc.w	r1, r5, r1
   20344:	e7f2      	b.n	2032c <sys_clock_timeout_end_calc+0x38>

00020346 <k_timer_init>:
	timer->status = 0U;
   20346:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   20348:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2034c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   20350:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   20354:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   20358:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2035a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2035c:	4770      	bx	lr

0002035e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2035e:	b510      	push	{r4, lr}
   20360:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   20362:	f7ff ff6f 	bl	20244 <z_abort_timeout>

	if (inactive) {
   20366:	b9b0      	cbnz	r0, 20396 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   20368:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2036a:	b10b      	cbz	r3, 20370 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2036c:	4620      	mov	r0, r4
   2036e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   20370:	f104 0018 	add.w	r0, r4, #24
   20374:	f7ff ff0c 	bl	20190 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   20378:	b168      	cbz	r0, 20396 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2037a:	f7ff fed7 	bl	2012c <z_ready_thread>
	__asm__ volatile(
   2037e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20382:	f3ef 8011 	mrs	r0, BASEPRI
   20386:	f383 8811 	msr	BASEPRI, r3
   2038a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2038e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   20392:	f7ff be7e 	b.w	20092 <z_reschedule_irqlock>
   20396:	bd10      	pop	{r4, pc}

00020398 <clear_event_registrations>:
	while (num_events--) {
   20398:	2314      	movs	r3, #20
{
   2039a:	b570      	push	{r4, r5, r6, lr}
   2039c:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   203a0:	2400      	movs	r4, #0
   203a2:	2601      	movs	r6, #1
	while (num_events--) {
   203a4:	4281      	cmp	r1, r0
   203a6:	d100      	bne.n	203aa <clear_event_registrations+0x12>
}
   203a8:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   203aa:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   203ae:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   203b2:	f003 031f 	and.w	r3, r3, #31
   203b6:	2b08      	cmp	r3, #8
   203b8:	d80d      	bhi.n	203d6 <clear_event_registrations+0x3e>
   203ba:	fa06 f303 	lsl.w	r3, r6, r3
   203be:	f413 7f8b 	tst.w	r3, #278	; 0x116
   203c2:	d008      	beq.n	203d6 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   203c4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   203c8:	b12b      	cbz	r3, 203d6 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   203ca:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   203ce:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   203d0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   203d2:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   203d6:	f382 8811 	msr	BASEPRI, r2
   203da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   203de:	f04f 0340 	mov.w	r3, #64	; 0x40
   203e2:	f3ef 8211 	mrs	r2, BASEPRI
   203e6:	f383 8811 	msr	BASEPRI, r3
   203ea:	f3bf 8f6f 	isb	sy
   203ee:	3914      	subs	r1, #20
   203f0:	e7d8      	b.n	203a4 <clear_event_registrations+0xc>

000203f2 <add_event>:
{
   203f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203f4:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   203f6:	e9d0 2300 	ldrd	r2, r3, [r0]
   203fa:	4290      	cmp	r0, r2
   203fc:	4604      	mov	r4, r0
   203fe:	460d      	mov	r5, r1
   20400:	d105      	bne.n	2040e <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   20402:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   20404:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   20408:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2040a:	6065      	str	r5, [r4, #4]
}
   2040c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2040e:	2b00      	cmp	r3, #0
   20410:	d0f7      	beq.n	20402 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20412:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20414:	b100      	cbz	r0, 20418 <add_event+0x26>
   20416:	3860      	subs	r0, #96	; 0x60
   20418:	b107      	cbz	r7, 2041c <add_event+0x2a>
   2041a:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2041c:	4639      	mov	r1, r7
   2041e:	f7ff fe0b 	bl	20038 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   20422:	2800      	cmp	r0, #0
   20424:	dced      	bgt.n	20402 <add_event+0x10>
	return list->head == list;
   20426:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20428:	42b4      	cmp	r4, r6
   2042a:	d0ea      	beq.n	20402 <add_event+0x10>
   2042c:	2e00      	cmp	r6, #0
   2042e:	bf38      	it	cc
   20430:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20432:	2e00      	cmp	r6, #0
   20434:	d0e5      	beq.n	20402 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   20436:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20438:	b101      	cbz	r1, 2043c <add_event+0x4a>
   2043a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2043c:	4638      	mov	r0, r7
   2043e:	f7ff fdfb 	bl	20038 <z_sched_prio_cmp>
   20442:	2800      	cmp	r0, #0
   20444:	dd05      	ble.n	20452 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   20446:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   20448:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2044c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2044e:	6075      	str	r5, [r6, #4]
			return;
   20450:	e7dc      	b.n	2040c <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   20452:	6863      	ldr	r3, [r4, #4]
   20454:	42b3      	cmp	r3, r6
   20456:	d0d4      	beq.n	20402 <add_event+0x10>
   20458:	6836      	ldr	r6, [r6, #0]
   2045a:	e7ea      	b.n	20432 <add_event+0x40>

0002045c <register_events>:
{
   2045c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   20460:	2500      	movs	r5, #0
{
   20462:	468b      	mov	fp, r1
   20464:	4614      	mov	r4, r2
   20466:	461f      	mov	r7, r3
   20468:	4682      	mov	sl, r0
	int events_registered = 0;
   2046a:	462e      	mov	r6, r5
	event->poller = NULL;
   2046c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2046e:	455d      	cmp	r5, fp
   20470:	db02      	blt.n	20478 <register_events+0x1c>
}
   20472:	4630      	mov	r0, r6
   20474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20478:	f04f 0340 	mov.w	r3, #64	; 0x40
   2047c:	f3ef 8911 	mrs	r9, BASEPRI
   20480:	f383 8811 	msr	BASEPRI, r3
   20484:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   20488:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2048c:	f003 031f 	and.w	r3, r3, #31
   20490:	3b01      	subs	r3, #1
   20492:	2b07      	cmp	r3, #7
   20494:	d80f      	bhi.n	204b6 <register_events+0x5a>
   20496:	e8df f003 	tbb	[pc, r3]
   2049a:	041e      	.short	0x041e
   2049c:	0e0e0a0e 	.word	0x0e0e0a0e
   204a0:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   204a2:	f8da 3010 	ldr.w	r3, [sl, #16]
   204a6:	689b      	ldr	r3, [r3, #8]
   204a8:	b12b      	cbz	r3, 204b6 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   204aa:	2302      	movs	r3, #2
   204ac:	e020      	b.n	204f0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   204ae:	f8da 3010 	ldr.w	r3, [sl, #16]
   204b2:	681b      	ldr	r3, [r3, #0]
   204b4:	bb8b      	cbnz	r3, 2051a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   204b6:	bb47      	cbnz	r7, 2050a <register_events+0xae>
   204b8:	7823      	ldrb	r3, [r4, #0]
   204ba:	b333      	cbz	r3, 2050a <register_events+0xae>
	switch (event->type) {
   204bc:	f89a 300d 	ldrb.w	r3, [sl, #13]
   204c0:	f003 031f 	and.w	r3, r3, #31
   204c4:	3b01      	subs	r3, #1
   204c6:	2b07      	cmp	r3, #7
   204c8:	d830      	bhi.n	2052c <register_events+0xd0>
   204ca:	e8df f003 	tbb	[pc, r3]
   204ce:	2833      	.short	0x2833
   204d0:	2f2f282f 	.word	0x2f2f282f
   204d4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   204d6:	f8da 3010 	ldr.w	r3, [sl, #16]
   204da:	689b      	ldr	r3, [r3, #8]
   204dc:	2b00      	cmp	r3, #0
   204de:	d0ea      	beq.n	204b6 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   204e0:	2301      	movs	r3, #1
   204e2:	e005      	b.n	204f0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   204e4:	f8da 3010 	ldr.w	r3, [sl, #16]
   204e8:	6a1b      	ldr	r3, [r3, #32]
   204ea:	2b00      	cmp	r3, #0
   204ec:	d0e3      	beq.n	204b6 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   204ee:	2310      	movs	r3, #16
	event->state |= state;
   204f0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   204f4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   204f8:	f3c2 3145 	ubfx	r1, r2, #13, #6
   204fc:	430b      	orrs	r3, r1
   204fe:	f363 3252 	bfi	r2, r3, #13, #6
   20502:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   20506:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2050a:	f389 8811 	msr	BASEPRI, r9
   2050e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20512:	3501      	adds	r5, #1
   20514:	f10a 0a14 	add.w	sl, sl, #20
   20518:	e7a9      	b.n	2046e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2051a:	2304      	movs	r3, #4
   2051c:	e7e8      	b.n	204f0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2051e:	f8da 0010 	ldr.w	r0, [sl, #16]
   20522:	4622      	mov	r2, r4
   20524:	4651      	mov	r1, sl
   20526:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   20528:	f7ff ff63 	bl	203f2 <add_event>
	event->poller = poller;
   2052c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   20530:	3601      	adds	r6, #1
   20532:	e7ea      	b.n	2050a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   20534:	f8da 0010 	ldr.w	r0, [sl, #16]
   20538:	4622      	mov	r2, r4
   2053a:	4651      	mov	r1, sl
   2053c:	e7f4      	b.n	20528 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2053e:	f8da 0010 	ldr.w	r0, [sl, #16]
   20542:	4622      	mov	r2, r4
   20544:	4651      	mov	r1, sl
   20546:	3024      	adds	r0, #36	; 0x24
   20548:	e7ee      	b.n	20528 <register_events+0xcc>

0002054a <signal_poll_event>:
{
   2054a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2054e:	6884      	ldr	r4, [r0, #8]
{
   20550:	4605      	mov	r5, r0
   20552:	460e      	mov	r6, r1
	if (poller != NULL) {
   20554:	b144      	cbz	r4, 20568 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   20556:	7863      	ldrb	r3, [r4, #1]
   20558:	2b01      	cmp	r3, #1
   2055a:	d138      	bne.n	205ce <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   2055c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   20560:	f013 0302 	ands.w	r3, r3, #2
   20564:	d10a      	bne.n	2057c <signal_poll_event+0x32>
		poller->is_polling = false;
   20566:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   20568:	68eb      	ldr	r3, [r5, #12]
   2056a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2056e:	430e      	orrs	r6, r1
	event->poller = NULL;
   20570:	2000      	movs	r0, #0
	event->state |= state;
   20572:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   20576:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   20578:	60eb      	str	r3, [r5, #12]
	return retcode;
   2057a:	e00d      	b.n	20598 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2057c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   20580:	f04f 31ff 	mov.w	r1, #4294967295
   20584:	f06f 0001 	mvn.w	r0, #1
   20588:	428b      	cmp	r3, r1
   2058a:	bf08      	it	eq
   2058c:	4282      	cmpeq	r2, r0
   2058e:	d105      	bne.n	2059c <signal_poll_event+0x52>
		poller->is_polling = false;
   20590:	2300      	movs	r3, #0
   20592:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   20594:	f06f 000a 	mvn.w	r0, #10
}
   20598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2059c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   205a0:	4640      	mov	r0, r8
   205a2:	f7ff fd62 	bl	2006a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   205a6:	2e08      	cmp	r6, #8
   205a8:	bf0c      	ite	eq
   205aa:	f06f 0303 	mvneq.w	r3, #3
   205ae:	2300      	movne	r3, #0
   205b0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   205b2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   205b6:	06db      	lsls	r3, r3, #27
   205b8:	d102      	bne.n	205c0 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   205ba:	f854 7c48 	ldr.w	r7, [r4, #-72]
   205be:	b10f      	cbz	r7, 205c4 <signal_poll_event+0x7a>
		poller->is_polling = false;
   205c0:	2300      	movs	r3, #0
   205c2:	e7d0      	b.n	20566 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   205c4:	4640      	mov	r0, r8
   205c6:	f7ff fdb1 	bl	2012c <z_ready_thread>
		poller->is_polling = false;
   205ca:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   205cc:	e7cc      	b.n	20568 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   205ce:	2b02      	cmp	r3, #2
   205d0:	d1f6      	bne.n	205c0 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   205d2:	7823      	ldrb	r3, [r4, #0]
   205d4:	2b00      	cmp	r3, #0
   205d6:	d0c7      	beq.n	20568 <signal_poll_event+0x1e>
   205d8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   205dc:	2f00      	cmp	r7, #0
   205de:	d0f4      	beq.n	205ca <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   205e0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   205e4:	f1a4 0914 	sub.w	r9, r4, #20
   205e8:	f104 0014 	add.w	r0, r4, #20
   205ec:	f7ff fe2a 	bl	20244 <z_abort_timeout>
		twork->poll_result = 0;
   205f0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   205f4:	4649      	mov	r1, r9
   205f6:	4638      	mov	r0, r7
   205f8:	f7ff fc9f 	bl	1ff3a <k_work_submit_to_queue>
		poller->is_polling = false;
   205fc:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20600:	e7b2      	b.n	20568 <signal_poll_event+0x1e>

00020602 <k_poll_event_init>:
{
   20602:	b510      	push	{r4, lr}
	event->type = type;
   20604:	04d2      	lsls	r2, r2, #19
   20606:	0209      	lsls	r1, r1, #8
   20608:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2060c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   20610:	430a      	orrs	r2, r1
   20612:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   20614:	2400      	movs	r4, #0
	event->type = type;
   20616:	430a      	orrs	r2, r1
	event->obj = obj;
   20618:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2061c:	6084      	str	r4, [r0, #8]
}
   2061e:	bd10      	pop	{r4, pc}

00020620 <z_handle_obj_poll_events>:
{
   20620:	4603      	mov	r3, r0
	return list->head == list;
   20622:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20624:	4283      	cmp	r3, r0
   20626:	d008      	beq.n	2063a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   20628:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2062c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2062e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20630:	2300      	movs	r3, #0
	node->prev = NULL;
   20632:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20636:	f7ff bf88 	b.w	2054a <signal_poll_event>
}
   2063a:	4770      	bx	lr

0002063c <k_free>:
	if (ptr != NULL) {
   2063c:	b120      	cbz	r0, 20648 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2063e:	1f01      	subs	r1, r0, #4
   20640:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20644:	f7ff bab0 	b.w	1fba8 <k_heap_free>
}
   20648:	4770      	bx	lr

0002064a <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2064a:	4770      	bx	lr

0002064c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2064c:	4770      	bx	lr
