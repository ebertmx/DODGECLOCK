
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20007160 	.word	0x20007160
   4:	00013841 	.word	0x00013841
   8:	0002203f 	.word	0x0002203f
   c:	00013895 	.word	0x00013895
  10:	00013895 	.word	0x00013895
  14:	00013895 	.word	0x00013895
  18:	00013895 	.word	0x00013895
	...
  2c:	000135a9 	.word	0x000135a9
  30:	00013895 	.word	0x00013895
  34:	00000000 	.word	0x00000000
  38:	00013555 	.word	0x00013555
  3c:	00020e9d 	.word	0x00020e9d

00000040 <_irq_vector_table>:
  40:	00013801 000247ed 00013801 00013801     .8...G...8...8..
  50:	00013801 00013801 00013801 00013801     .8...8...8...8..
  60:	000247b5 00013801 00013801 000247d3     .G...8...8...G..
  70:	00013801 00013801 00013801 00013801     .8...8...8...8..
  80:	00013801 00013801 00013801 00013801     .8...8...8...8..
  90:	00013801 00013801 00013801 00013801     .8...8...8...8..
  a0:	00013801 00013801 00013801 00013801     .8...8...8...8..
  b0:	00013801 00013801 00013801 00013801     .8...8...8...8..
  c0:	00013801 00013801 00013801 00013801     .8...8...8...8..
  d0:	00013801 00013801 00013801              .8...8...8..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0xe>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0x2c>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0x42>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_LOG_BUFFER_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_LOG_BUFFER_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0x42>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0x42>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     87a:	e712      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>

0000087c <__aeabi_d2uiz>:
     87c:	004a      	lsls	r2, r1, #1
     87e:	d211      	bcs.n	8a4 <CONFIG_BT_RX_STACK_SIZE+0xc>
     880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     884:	d211      	bcs.n	8aa <CONFIG_BT_RX_STACK_SIZE+0x12>
     886:	d50d      	bpl.n	8a4 <CONFIG_BT_RX_STACK_SIZE+0xc>
     888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     88c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     890:	d40e      	bmi.n	8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>
     892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     89a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     89e:	fa23 f002 	lsr.w	r0, r3, r2
     8a2:	4770      	bx	lr
     8a4:	f04f 0000 	mov.w	r0, #0
     8a8:	4770      	bx	lr
     8aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8ae:	d102      	bne.n	8b6 <CONFIG_BT_RX_STACK_SIZE+0x1e>
     8b0:	f04f 30ff 	mov.w	r0, #4294967295
     8b4:	4770      	bx	lr
     8b6:	f04f 0000 	mov.w	r0, #0
     8ba:	4770      	bx	lr

000008bc <__aeabi_uldivmod>:
     8bc:	b953      	cbnz	r3, 8d4 <__aeabi_uldivmod+0x18>
     8be:	b94a      	cbnz	r2, 8d4 <__aeabi_uldivmod+0x18>
     8c0:	2900      	cmp	r1, #0
     8c2:	bf08      	it	eq
     8c4:	2800      	cmpeq	r0, #0
     8c6:	bf1c      	itt	ne
     8c8:	f04f 31ff 	movne.w	r1, #4294967295
     8cc:	f04f 30ff 	movne.w	r0, #4294967295
     8d0:	f000 b96c 	b.w	bac <__aeabi_idiv0>
     8d4:	f1ad 0c08 	sub.w	ip, sp, #8
     8d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8dc:	f000 f806 	bl	8ec <__udivmoddi4>
     8e0:	f8dd e004 	ldr.w	lr, [sp, #4]
     8e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8e8:	b004      	add	sp, #16
     8ea:	4770      	bx	lr

000008ec <__udivmoddi4>:
     8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     8f0:	9e08      	ldr	r6, [sp, #32]
     8f2:	460d      	mov	r5, r1
     8f4:	4604      	mov	r4, r0
     8f6:	468e      	mov	lr, r1
     8f8:	2b00      	cmp	r3, #0
     8fa:	f040 8082 	bne.w	a02 <__udivmoddi4+0x116>
     8fe:	428a      	cmp	r2, r1
     900:	4617      	mov	r7, r2
     902:	d946      	bls.n	992 <__udivmoddi4+0xa6>
     904:	fab2 f282 	clz	r2, r2
     908:	b14a      	cbz	r2, 91e <__udivmoddi4+0x32>
     90a:	f1c2 0120 	rsb	r1, r2, #32
     90e:	fa05 f302 	lsl.w	r3, r5, r2
     912:	fa20 f101 	lsr.w	r1, r0, r1
     916:	4097      	lsls	r7, r2
     918:	ea41 0e03 	orr.w	lr, r1, r3
     91c:	4094      	lsls	r4, r2
     91e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     922:	0c23      	lsrs	r3, r4, #16
     924:	fbbe fcf8 	udiv	ip, lr, r8
     928:	b2b9      	uxth	r1, r7
     92a:	fb08 ee1c 	mls	lr, r8, ip, lr
     92e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     932:	fb0c f001 	mul.w	r0, ip, r1
     936:	4298      	cmp	r0, r3
     938:	d90a      	bls.n	950 <__udivmoddi4+0x64>
     93a:	18fb      	adds	r3, r7, r3
     93c:	f10c 35ff 	add.w	r5, ip, #4294967295
     940:	f080 8116 	bcs.w	b70 <__udivmoddi4+0x284>
     944:	4298      	cmp	r0, r3
     946:	f240 8113 	bls.w	b70 <__udivmoddi4+0x284>
     94a:	f1ac 0c02 	sub.w	ip, ip, #2
     94e:	443b      	add	r3, r7
     950:	1a1b      	subs	r3, r3, r0
     952:	b2a4      	uxth	r4, r4
     954:	fbb3 f0f8 	udiv	r0, r3, r8
     958:	fb08 3310 	mls	r3, r8, r0, r3
     95c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     960:	fb00 f101 	mul.w	r1, r0, r1
     964:	42a1      	cmp	r1, r4
     966:	d909      	bls.n	97c <__udivmoddi4+0x90>
     968:	193c      	adds	r4, r7, r4
     96a:	f100 33ff 	add.w	r3, r0, #4294967295
     96e:	f080 8101 	bcs.w	b74 <__udivmoddi4+0x288>
     972:	42a1      	cmp	r1, r4
     974:	f240 80fe 	bls.w	b74 <__udivmoddi4+0x288>
     978:	3802      	subs	r0, #2
     97a:	443c      	add	r4, r7
     97c:	1a64      	subs	r4, r4, r1
     97e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     982:	2100      	movs	r1, #0
     984:	b11e      	cbz	r6, 98e <__udivmoddi4+0xa2>
     986:	40d4      	lsrs	r4, r2
     988:	2300      	movs	r3, #0
     98a:	e9c6 4300 	strd	r4, r3, [r6]
     98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     992:	b902      	cbnz	r2, 996 <__udivmoddi4+0xaa>
     994:	deff      	udf	#255	; 0xff
     996:	fab2 f282 	clz	r2, r2
     99a:	2a00      	cmp	r2, #0
     99c:	d14f      	bne.n	a3e <__udivmoddi4+0x152>
     99e:	1bcb      	subs	r3, r1, r7
     9a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     9a4:	fa1f f887 	uxth.w	r8, r7
     9a8:	2101      	movs	r1, #1
     9aa:	fbb3 fcfe 	udiv	ip, r3, lr
     9ae:	0c25      	lsrs	r5, r4, #16
     9b0:	fb0e 331c 	mls	r3, lr, ip, r3
     9b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     9b8:	fb08 f30c 	mul.w	r3, r8, ip
     9bc:	42ab      	cmp	r3, r5
     9be:	d907      	bls.n	9d0 <__udivmoddi4+0xe4>
     9c0:	197d      	adds	r5, r7, r5
     9c2:	f10c 30ff 	add.w	r0, ip, #4294967295
     9c6:	d202      	bcs.n	9ce <__udivmoddi4+0xe2>
     9c8:	42ab      	cmp	r3, r5
     9ca:	f200 80e7 	bhi.w	b9c <__udivmoddi4+0x2b0>
     9ce:	4684      	mov	ip, r0
     9d0:	1aed      	subs	r5, r5, r3
     9d2:	b2a3      	uxth	r3, r4
     9d4:	fbb5 f0fe 	udiv	r0, r5, lr
     9d8:	fb0e 5510 	mls	r5, lr, r0, r5
     9dc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     9e0:	fb08 f800 	mul.w	r8, r8, r0
     9e4:	45a0      	cmp	r8, r4
     9e6:	d907      	bls.n	9f8 <__udivmoddi4+0x10c>
     9e8:	193c      	adds	r4, r7, r4
     9ea:	f100 33ff 	add.w	r3, r0, #4294967295
     9ee:	d202      	bcs.n	9f6 <__udivmoddi4+0x10a>
     9f0:	45a0      	cmp	r8, r4
     9f2:	f200 80d7 	bhi.w	ba4 <__udivmoddi4+0x2b8>
     9f6:	4618      	mov	r0, r3
     9f8:	eba4 0408 	sub.w	r4, r4, r8
     9fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a00:	e7c0      	b.n	984 <__udivmoddi4+0x98>
     a02:	428b      	cmp	r3, r1
     a04:	d908      	bls.n	a18 <__udivmoddi4+0x12c>
     a06:	2e00      	cmp	r6, #0
     a08:	f000 80af 	beq.w	b6a <__udivmoddi4+0x27e>
     a0c:	2100      	movs	r1, #0
     a0e:	e9c6 0500 	strd	r0, r5, [r6]
     a12:	4608      	mov	r0, r1
     a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a18:	fab3 f183 	clz	r1, r3
     a1c:	2900      	cmp	r1, #0
     a1e:	d14b      	bne.n	ab8 <__udivmoddi4+0x1cc>
     a20:	42ab      	cmp	r3, r5
     a22:	d302      	bcc.n	a2a <__udivmoddi4+0x13e>
     a24:	4282      	cmp	r2, r0
     a26:	f200 80b7 	bhi.w	b98 <__udivmoddi4+0x2ac>
     a2a:	1a84      	subs	r4, r0, r2
     a2c:	eb65 0303 	sbc.w	r3, r5, r3
     a30:	2001      	movs	r0, #1
     a32:	469e      	mov	lr, r3
     a34:	2e00      	cmp	r6, #0
     a36:	d0aa      	beq.n	98e <__udivmoddi4+0xa2>
     a38:	e9c6 4e00 	strd	r4, lr, [r6]
     a3c:	e7a7      	b.n	98e <__udivmoddi4+0xa2>
     a3e:	f1c2 0c20 	rsb	ip, r2, #32
     a42:	fa01 f302 	lsl.w	r3, r1, r2
     a46:	4097      	lsls	r7, r2
     a48:	fa20 f00c 	lsr.w	r0, r0, ip
     a4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a50:	fa21 fc0c 	lsr.w	ip, r1, ip
     a54:	4318      	orrs	r0, r3
     a56:	fbbc f1fe 	udiv	r1, ip, lr
     a5a:	0c05      	lsrs	r5, r0, #16
     a5c:	fb0e cc11 	mls	ip, lr, r1, ip
     a60:	fa1f f887 	uxth.w	r8, r7
     a64:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     a68:	fb01 f308 	mul.w	r3, r1, r8
     a6c:	42ab      	cmp	r3, r5
     a6e:	fa04 f402 	lsl.w	r4, r4, r2
     a72:	d909      	bls.n	a88 <__udivmoddi4+0x19c>
     a74:	197d      	adds	r5, r7, r5
     a76:	f101 3cff 	add.w	ip, r1, #4294967295
     a7a:	f080 808b 	bcs.w	b94 <__udivmoddi4+0x2a8>
     a7e:	42ab      	cmp	r3, r5
     a80:	f240 8088 	bls.w	b94 <__udivmoddi4+0x2a8>
     a84:	3902      	subs	r1, #2
     a86:	443d      	add	r5, r7
     a88:	1aeb      	subs	r3, r5, r3
     a8a:	b285      	uxth	r5, r0
     a8c:	fbb3 f0fe 	udiv	r0, r3, lr
     a90:	fb0e 3310 	mls	r3, lr, r0, r3
     a94:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     a98:	fb00 f308 	mul.w	r3, r0, r8
     a9c:	42ab      	cmp	r3, r5
     a9e:	d907      	bls.n	ab0 <__udivmoddi4+0x1c4>
     aa0:	197d      	adds	r5, r7, r5
     aa2:	f100 3cff 	add.w	ip, r0, #4294967295
     aa6:	d271      	bcs.n	b8c <__udivmoddi4+0x2a0>
     aa8:	42ab      	cmp	r3, r5
     aaa:	d96f      	bls.n	b8c <__udivmoddi4+0x2a0>
     aac:	3802      	subs	r0, #2
     aae:	443d      	add	r5, r7
     ab0:	1aeb      	subs	r3, r5, r3
     ab2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     ab6:	e778      	b.n	9aa <__udivmoddi4+0xbe>
     ab8:	f1c1 0c20 	rsb	ip, r1, #32
     abc:	408b      	lsls	r3, r1
     abe:	fa22 f70c 	lsr.w	r7, r2, ip
     ac2:	431f      	orrs	r7, r3
     ac4:	fa20 f40c 	lsr.w	r4, r0, ip
     ac8:	fa05 f301 	lsl.w	r3, r5, r1
     acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ad0:	fa25 f50c 	lsr.w	r5, r5, ip
     ad4:	431c      	orrs	r4, r3
     ad6:	0c23      	lsrs	r3, r4, #16
     ad8:	fbb5 f9fe 	udiv	r9, r5, lr
     adc:	fa1f f887 	uxth.w	r8, r7
     ae0:	fb0e 5519 	mls	r5, lr, r9, r5
     ae4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     ae8:	fb09 fa08 	mul.w	sl, r9, r8
     aec:	45aa      	cmp	sl, r5
     aee:	fa02 f201 	lsl.w	r2, r2, r1
     af2:	fa00 f301 	lsl.w	r3, r0, r1
     af6:	d908      	bls.n	b0a <__udivmoddi4+0x21e>
     af8:	197d      	adds	r5, r7, r5
     afa:	f109 30ff 	add.w	r0, r9, #4294967295
     afe:	d247      	bcs.n	b90 <__udivmoddi4+0x2a4>
     b00:	45aa      	cmp	sl, r5
     b02:	d945      	bls.n	b90 <__udivmoddi4+0x2a4>
     b04:	f1a9 0902 	sub.w	r9, r9, #2
     b08:	443d      	add	r5, r7
     b0a:	eba5 050a 	sub.w	r5, r5, sl
     b0e:	b2a4      	uxth	r4, r4
     b10:	fbb5 f0fe 	udiv	r0, r5, lr
     b14:	fb0e 5510 	mls	r5, lr, r0, r5
     b18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b1c:	fb00 f808 	mul.w	r8, r0, r8
     b20:	45a0      	cmp	r8, r4
     b22:	d907      	bls.n	b34 <__udivmoddi4+0x248>
     b24:	193c      	adds	r4, r7, r4
     b26:	f100 35ff 	add.w	r5, r0, #4294967295
     b2a:	d22d      	bcs.n	b88 <__udivmoddi4+0x29c>
     b2c:	45a0      	cmp	r8, r4
     b2e:	d92b      	bls.n	b88 <__udivmoddi4+0x29c>
     b30:	3802      	subs	r0, #2
     b32:	443c      	add	r4, r7
     b34:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     b38:	eba4 0408 	sub.w	r4, r4, r8
     b3c:	fba0 8902 	umull	r8, r9, r0, r2
     b40:	454c      	cmp	r4, r9
     b42:	46c6      	mov	lr, r8
     b44:	464d      	mov	r5, r9
     b46:	d319      	bcc.n	b7c <__udivmoddi4+0x290>
     b48:	d016      	beq.n	b78 <__udivmoddi4+0x28c>
     b4a:	b15e      	cbz	r6, b64 <__udivmoddi4+0x278>
     b4c:	ebb3 020e 	subs.w	r2, r3, lr
     b50:	eb64 0405 	sbc.w	r4, r4, r5
     b54:	fa04 fc0c 	lsl.w	ip, r4, ip
     b58:	40ca      	lsrs	r2, r1
     b5a:	ea4c 0202 	orr.w	r2, ip, r2
     b5e:	40cc      	lsrs	r4, r1
     b60:	e9c6 2400 	strd	r2, r4, [r6]
     b64:	2100      	movs	r1, #0
     b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b6a:	4631      	mov	r1, r6
     b6c:	4630      	mov	r0, r6
     b6e:	e70e      	b.n	98e <__udivmoddi4+0xa2>
     b70:	46ac      	mov	ip, r5
     b72:	e6ed      	b.n	950 <__udivmoddi4+0x64>
     b74:	4618      	mov	r0, r3
     b76:	e701      	b.n	97c <__udivmoddi4+0x90>
     b78:	4543      	cmp	r3, r8
     b7a:	d2e6      	bcs.n	b4a <__udivmoddi4+0x25e>
     b7c:	ebb8 0e02 	subs.w	lr, r8, r2
     b80:	eb69 0507 	sbc.w	r5, r9, r7
     b84:	3801      	subs	r0, #1
     b86:	e7e0      	b.n	b4a <__udivmoddi4+0x25e>
     b88:	4628      	mov	r0, r5
     b8a:	e7d3      	b.n	b34 <__udivmoddi4+0x248>
     b8c:	4660      	mov	r0, ip
     b8e:	e78f      	b.n	ab0 <__udivmoddi4+0x1c4>
     b90:	4681      	mov	r9, r0
     b92:	e7ba      	b.n	b0a <__udivmoddi4+0x21e>
     b94:	4661      	mov	r1, ip
     b96:	e777      	b.n	a88 <__udivmoddi4+0x19c>
     b98:	4608      	mov	r0, r1
     b9a:	e74b      	b.n	a34 <__udivmoddi4+0x148>
     b9c:	f1ac 0c02 	sub.w	ip, ip, #2
     ba0:	443d      	add	r5, r7
     ba2:	e715      	b.n	9d0 <__udivmoddi4+0xe4>
     ba4:	3802      	subs	r0, #2
     ba6:	443c      	add	r4, r7
     ba8:	e726      	b.n	9f8 <__udivmoddi4+0x10c>
     baa:	bf00      	nop

00000bac <__aeabi_idiv0>:
     bac:	4770      	bx	lr
     bae:	bf00      	nop
     bb0:	2800      	cmp	r0, #0
     bb2:	d019      	beq.n	be8 <__aeabi_idiv0+0x3c>
     bb4:	7803      	ldrb	r3, [r0, #0]
     bb6:	4913      	ldr	r1, [pc, #76]	; (c04 <__aeabi_idiv0+0x58>)
     bb8:	4a13      	ldr	r2, [pc, #76]	; (c08 <__aeabi_idiv0+0x5c>)
     bba:	b113      	cbz	r3, bc2 <__aeabi_idiv0+0x16>
     bbc:	2b01      	cmp	r3, #1
     bbe:	d00e      	beq.n	bde <__aeabi_idiv0+0x32>
     bc0:	e011      	b.n	be6 <__aeabi_idiv0+0x3a>
     bc2:	7903      	ldrb	r3, [r0, #4]
     bc4:	2b01      	cmp	r3, #1
     bc6:	d000      	beq.n	bca <__aeabi_idiv0+0x1e>
     bc8:	b96b      	cbnz	r3, be6 <__aeabi_idiv0+0x3a>
     bca:	7943      	ldrb	r3, [r0, #5]
     bcc:	b10b      	cbz	r3, bd2 <__aeabi_idiv0+0x26>
     bce:	2b01      	cmp	r3, #1
     bd0:	d109      	bne.n	be6 <__aeabi_idiv0+0x3a>
     bd2:	6883      	ldr	r3, [r0, #8]
     bd4:	3b64      	subs	r3, #100	; 0x64
     bd6:	428b      	cmp	r3, r1
     bd8:	d205      	bcs.n	be6 <__aeabi_idiv0+0x3a>
     bda:	68c0      	ldr	r0, [r0, #12]
     bdc:	e00e      	b.n	bfc <__aeabi_idiv0+0x50>
     bde:	7903      	ldrb	r3, [r0, #4]
     be0:	2b01      	cmp	r3, #1
     be2:	d002      	beq.n	bea <__aeabi_idiv0+0x3e>
     be4:	b10b      	cbz	r3, bea <__aeabi_idiv0+0x3e>
     be6:	2000      	movs	r0, #0
     be8:	4770      	bx	lr
     bea:	7943      	ldrb	r3, [r0, #5]
     bec:	b10b      	cbz	r3, bf2 <__aeabi_idiv0+0x46>
     bee:	2b01      	cmp	r3, #1
     bf0:	d1f9      	bne.n	be6 <__aeabi_idiv0+0x3a>
     bf2:	68c3      	ldr	r3, [r0, #12]
     bf4:	3b64      	subs	r3, #100	; 0x64
     bf6:	428b      	cmp	r3, r1
     bf8:	d2f5      	bcs.n	be6 <__aeabi_idiv0+0x3a>
     bfa:	6880      	ldr	r0, [r0, #8]
     bfc:	4290      	cmp	r0, r2
     bfe:	d8f2      	bhi.n	be6 <__aeabi_idiv0+0x3a>
     c00:	2001      	movs	r0, #1
     c02:	4770      	bx	lr
     c04:	0001863d 	.word	0x0001863d
     c08:	07a11fff 	.word	0x07a11fff
     c0c:	b510      	push	{r4, lr}
     c0e:	4c05      	ldr	r4, [pc, #20]	; (c24 <__aeabi_idiv0+0x78>)
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	b110      	cbz	r0, c1a <__aeabi_idiv0+0x6e>
     c14:	4780      	blx	r0
     c16:	2000      	movs	r0, #0
     c18:	6020      	str	r0, [r4, #0]
     c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c1e:	f002 b819 	b.w	2c54 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     c22:	0000      	.short	0x0000
     c24:	20000000 	.word	0x20000000

00000c28 <mpsl_timeslot_session_open>:
     c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c2c:	460e      	mov	r6, r1
     c2e:	0005      	movs	r5, r0
     c30:	d004      	beq.n	c3c <mpsl_timeslot_session_open+0x14>
     c32:	f000 f841 	bl	cb8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     c36:	4607      	mov	r7, r0
     c38:	2400      	movs	r4, #0
     c3a:	e00a      	b.n	c52 <mpsl_timeslot_session_open+0x2a>
     c3c:	f06f 0015 	mvn.w	r0, #21
     c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c44:	4620      	mov	r0, r4
     c46:	f000 f83d 	bl	cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     c4a:	7880      	ldrb	r0, [r0, #2]
     c4c:	b138      	cbz	r0, c5e <mpsl_timeslot_session_open+0x36>
     c4e:	1c64      	adds	r4, r4, #1
     c50:	b2e4      	uxtb	r4, r4
     c52:	42bc      	cmp	r4, r7
     c54:	d3f6      	bcc.n	c44 <mpsl_timeslot_session_open+0x1c>
     c56:	bf00      	nop
     c58:	f06f 000b 	mvn.w	r0, #11
     c5c:	e7f0      	b.n	c40 <mpsl_timeslot_session_open+0x18>
     c5e:	4627      	mov	r7, r4
     c60:	2cff      	cmp	r4, #255	; 0xff
     c62:	d0f9      	beq.n	c58 <mpsl_timeslot_session_open+0x30>
     c64:	4620      	mov	r0, r4
     c66:	f000 f82d 	bl	cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     c6a:	4604      	mov	r4, r0
     c6c:	f00b fc5d 	bl	c52a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
     c70:	4807      	ldr	r0, [pc, #28]	; (c90 <mpsl_timeslot_session_open+0x68>)
     c72:	f001 ffcb 	bl	2c0c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     c76:	70e0      	strb	r0, [r4, #3]
     c78:	2820      	cmp	r0, #32
     c7a:	d005      	beq.n	c88 <mpsl_timeslot_session_open+0x60>
     c7c:	2001      	movs	r0, #1
     c7e:	6065      	str	r5, [r4, #4]
     c80:	70a0      	strb	r0, [r4, #2]
     c82:	7037      	strb	r7, [r6, #0]
     c84:	2000      	movs	r0, #0
     c86:	e7db      	b.n	c40 <mpsl_timeslot_session_open+0x18>
     c88:	f06f 0022 	mvn.w	r0, #34	; 0x22
     c8c:	e7d8      	b.n	c40 <mpsl_timeslot_session_open+0x18>
     c8e:	0000      	.short	0x0000
     c90:	0000c271 	.word	0x0000c271

00000c94 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     c94:	b510      	push	{r4, lr}
     c96:	0782      	lsls	r2, r0, #30
     c98:	d002      	beq.n	ca0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     c9a:	f06f 000d 	mvn.w	r0, #13
     c9e:	bd10      	pop	{r4, pc}
     ca0:	4a04      	ldr	r2, [pc, #16]	; (cb4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>)
     ca2:	7011      	strb	r1, [r2, #0]
     ca4:	6050      	str	r0, [r2, #4]
     ca6:	b118      	cbz	r0, cb0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x1c>
     ca8:	014a      	lsls	r2, r1, #5
     caa:	2100      	movs	r1, #0
     cac:	f00b fec3 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     cb0:	2000      	movs	r0, #0
     cb2:	bd10      	pop	{r4, pc}
     cb4:	20000004 	.word	0x20000004

00000cb8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     cb8:	4801      	ldr	r0, [pc, #4]	; (cc0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     cba:	7800      	ldrb	r0, [r0, #0]
     cbc:	4770      	bx	lr
     cbe:	0000      	.short	0x0000
     cc0:	20000004 	.word	0x20000004

00000cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     cc4:	4904      	ldr	r1, [pc, #16]	; (cd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
     cc6:	780a      	ldrb	r2, [r1, #0]
     cc8:	4290      	cmp	r0, r2
     cca:	d301      	bcc.n	cd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     ccc:	2000      	movs	r0, #0
     cce:	4770      	bx	lr
     cd0:	6849      	ldr	r1, [r1, #4]
     cd2:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     cd6:	4770      	bx	lr
     cd8:	20000004 	.word	0x20000004

00000cdc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY>:
     cdc:	4909      	ldr	r1, [pc, #36]	; (d04 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x28>)
     cde:	b510      	push	{r4, lr}
     ce0:	4603      	mov	r3, r0
     ce2:	684a      	ldr	r2, [r1, #4]
     ce4:	2000      	movs	r0, #0
     ce6:	7809      	ldrb	r1, [r1, #0]
     ce8:	e007      	b.n	cfa <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x1e>
     cea:	bf00      	nop
     cec:	eb02 1440 	add.w	r4, r2, r0, lsl #5
     cf0:	78e4      	ldrb	r4, [r4, #3]
     cf2:	429c      	cmp	r4, r3
     cf4:	d004      	beq.n	d00 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x24>
     cf6:	1c40      	adds	r0, r0, #1
     cf8:	b2c0      	uxtb	r0, r0
     cfa:	4288      	cmp	r0, r1
     cfc:	d3f6      	bcc.n	cec <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x10>
     cfe:	20ff      	movs	r0, #255	; 0xff
     d00:	bd10      	pop	{r4, pc}
     d02:	0000      	.short	0x0000
     d04:	20000004 	.word	0x20000004
     d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     d0c:	4615      	mov	r5, r2
     d0e:	4604      	mov	r4, r0
     d10:	f100 0208 	add.w	r2, r0, #8
     d14:	1cc8      	adds	r0, r1, #3
     d16:	4241      	negs	r1, r0
     d18:	f8df c09c 	ldr.w	ip, [pc, #156]	; db8 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xdc>
     d1c:	461f      	mov	r7, r3
     d1e:	1a28      	subs	r0, r5, r0
     d20:	2300      	movs	r3, #0
     d22:	9e08      	ldr	r6, [sp, #32]
     d24:	ebbc 0c05 	subs.w	ip, ip, r5
     d28:	419b      	sbcs	r3, r3
     d2a:	d204      	bcs.n	d36 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x5a>
     d2c:	f240 51f1 	movw	r1, #1521	; 0x5f1
     d30:	2070      	movs	r0, #112	; 0x70
     d32:	f003 f983 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d36:	4b21      	ldr	r3, [pc, #132]	; (dbc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe0>)
     d38:	4299      	cmp	r1, r3
     d3a:	dd04      	ble.n	d46 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x6a>
     d3c:	f240 51f2 	movw	r1, #1522	; 0x5f2
     d40:	2070      	movs	r0, #112	; 0x70
     d42:	f003 f97b 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d46:	4b1e      	ldr	r3, [pc, #120]	; (dc0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe4>)
     d48:	4299      	cmp	r1, r3
     d4a:	da04      	bge.n	d56 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x7a>
     d4c:	f240 51f3 	movw	r1, #1523	; 0x5f3
     d50:	2070      	movs	r0, #112	; 0x70
     d52:	f003 f973 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d56:	491b      	ldr	r1, [pc, #108]	; (dc4 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe8>)
     d58:	4288      	cmp	r0, r1
     d5a:	bfa8      	it	ge
     d5c:	491a      	ldrge	r1, [pc, #104]	; (dc8 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xec>)
     d5e:	da03      	bge.n	d68 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x8c>
     d60:	2800      	cmp	r0, #0
     d62:	bfb8      	it	lt
     d64:	4917      	ldrlt	r1, [pc, #92]	; (dc4 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe8>)
     d66:	da00      	bge.n	d6a <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x8e>
     d68:	1840      	adds	r0, r0, r1
     d6a:	4621      	mov	r1, r4
     d6c:	f002 fdce 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     d70:	6820      	ldr	r0, [r4, #0]
     d72:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d76:	19e8      	adds	r0, r5, r7
     d78:	1cc0      	adds	r0, r0, #3
     d7a:	6021      	str	r1, [r4, #0]
     d7c:	2e00      	cmp	r6, #0
     d7e:	bf08      	it	eq
     d80:	307a      	addeq	r0, #122	; 0x7a
     d82:	d008      	beq.n	d96 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xba>
     d84:	2e01      	cmp	r6, #1
     d86:	bf08      	it	eq
     d88:	3045      	addeq	r0, #69	; 0x45
     d8a:	d004      	beq.n	d96 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xba>
     d8c:	f240 6199 	movw	r1, #1689	; 0x699
     d90:	2070      	movs	r0, #112	; 0x70
     d92:	f003 f953 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d96:	466a      	mov	r2, sp
     d98:	1d21      	adds	r1, r4, #4
     d9a:	f002 fdb7 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     d9e:	f99d 0000 	ldrsb.w	r0, [sp]
     da2:	2800      	cmp	r0, #0
     da4:	6860      	ldr	r0, [r4, #4]
     da6:	bfc4      	itt	gt
     da8:	1c40      	addgt	r0, r0, #1
     daa:	6060      	strgt	r0, [r4, #4]
     dac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     db0:	6060      	str	r0, [r4, #4]
     db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     db6:	0000      	.short	0x0000
     db8:	1e847fff 	.word	0x1e847fff
     dbc:	07a12000 	.word	0x07a12000
     dc0:	f85ee000 	.word	0xf85ee000
     dc4:	1e848000 	.word	0x1e848000
     dc8:	e17b8000 	.word	0xe17b8000
     dcc:	b570      	push	{r4, r5, r6, lr}
     dce:	4605      	mov	r5, r0
     dd0:	2a20      	cmp	r2, #32
     dd2:	d027      	beq.n	e24 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x148>
     dd4:	4819      	ldr	r0, [pc, #100]	; (e3c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x160>)
     dd6:	4c1a      	ldr	r4, [pc, #104]	; (e40 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x164>)
     dd8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     ddc:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     de0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     de4:	2920      	cmp	r1, #32
     de6:	d022      	beq.n	e2e <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x152>
     de8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     dec:	7840      	ldrb	r0, [r0, #1]
     dee:	784c      	ldrb	r4, [r1, #1]
     df0:	7048      	strb	r0, [r1, #1]
     df2:	4620      	mov	r0, r4
     df4:	4601      	mov	r1, r0
     df6:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     dfa:	4291      	cmp	r1, r2
     dfc:	7005      	strb	r5, [r0, #0]
     dfe:	7840      	ldrb	r0, [r0, #1]
     e00:	d1f8      	bne.n	df4 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x118>
     e02:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     e06:	2a20      	cmp	r2, #32
     e08:	bf1a      	itte	ne
     e0a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     e0e:	7054      	strbne	r4, [r2, #1]
     e10:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     e14:	2220      	movs	r2, #32
     e16:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     e1a:	f88c 2001 	strb.w	r2, [ip, #1]
     e1e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     e22:	bd70      	pop	{r4, r5, r6, pc}
     e24:	f44f 7123 	mov.w	r1, #652	; 0x28c
     e28:	2070      	movs	r0, #112	; 0x70
     e2a:	f003 f907 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e2e:	f893 4020 	ldrb.w	r4, [r3, #32]
     e32:	7840      	ldrb	r0, [r0, #1]
     e34:	f883 0020 	strb.w	r0, [r3, #32]
     e38:	e7db      	b.n	df2 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x116>
     e3a:	0000      	.short	0x0000
     e3c:	20000dbc 	.word	0x20000dbc
     e40:	20000e3c 	.word	0x20000e3c
     e44:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e48:	b087      	sub	sp, #28
     e4a:	4604      	mov	r4, r0
     e4c:	2000      	movs	r0, #0
     e4e:	9002      	str	r0, [sp, #8]
     e50:	489e      	ldr	r0, [pc, #632]	; (10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>)
     e52:	9f08      	ldr	r7, [sp, #32]
     e54:	4e9e      	ldr	r6, [pc, #632]	; (10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
     e56:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     e5a:	9003      	str	r0, [sp, #12]
     e5c:	f890 5020 	ldrb.w	r5, [r0, #32]
     e60:	2020      	movs	r0, #32
     e62:	46e9      	mov	r9, sp
     e64:	f10d 0804 	add.w	r8, sp, #4
     e68:	f88d 0000 	strb.w	r0, [sp]
     e6c:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     e70:	2d20      	cmp	r5, #32
     e72:	bf18      	it	ne
     e74:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     e78:	d032      	beq.n	ee0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x204>
     e7a:	bf00      	nop
     e7c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     e80:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     e84:	1d01      	adds	r1, r0, #4
     e86:	6880      	ldr	r0, [r0, #8]
     e88:	6822      	ldr	r2, [r4, #0]
     e8a:	1a10      	subs	r0, r2, r0
     e8c:	0200      	lsls	r0, r0, #8
     e8e:	17c2      	asrs	r2, r0, #31
     e90:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e94:	1200      	asrs	r0, r0, #8
     e96:	d423      	bmi.n	ee0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x204>
     e98:	8960      	ldrh	r0, [r4, #10]
     e9a:	b1d0      	cbz	r0, ed2 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x1f6>
     e9c:	8948      	ldrh	r0, [r1, #10]
     e9e:	b9c0      	cbnz	r0, ed2 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x1f6>
     ea0:	4608      	mov	r0, r1
     ea2:	f000 fcdb 	bl	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
     ea6:	aa05      	add	r2, sp, #20
     ea8:	a904      	add	r1, sp, #16
     eaa:	f002 fd2f 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     eae:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     eb2:	2800      	cmp	r0, #0
     eb4:	bfcc      	ite	gt
     eb6:	2001      	movgt	r0, #1
     eb8:	2000      	movle	r0, #0
     eba:	f100 0133 	add.w	r1, r0, #51	; 0x33
     ebe:	9804      	ldr	r0, [sp, #16]
     ec0:	6822      	ldr	r2, [r4, #0]
     ec2:	1a10      	subs	r0, r2, r0
     ec4:	0200      	lsls	r0, r0, #8
     ec6:	17c2      	asrs	r2, r0, #31
     ec8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ecc:	1200      	asrs	r0, r0, #8
     ece:	4288      	cmp	r0, r1
     ed0:	db06      	blt.n	ee0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x204>
     ed2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     ed6:	f889 5000 	strb.w	r5, [r9]
     eda:	7845      	ldrb	r5, [r0, #1]
     edc:	2d20      	cmp	r5, #32
     ede:	d1cd      	bne.n	e7c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x1a0>
     ee0:	f899 0000 	ldrb.w	r0, [r9]
     ee4:	f888 0000 	strb.w	r0, [r8]
     ee8:	46a1      	mov	r9, r4
     eea:	2d20      	cmp	r5, #32
     eec:	bf1c      	itt	ne
     eee:	4879      	ldrne	r0, [pc, #484]	; (10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
     ef0:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     ef4:	f000 80e5 	beq.w	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
     ef8:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     efc:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     f00:	f8d9 2004 	ldr.w	r2, [r9, #4]
     f04:	f8da 1004 	ldr.w	r1, [sl, #4]
     f08:	4648      	mov	r0, r9
     f0a:	1a89      	subs	r1, r1, r2
     f0c:	0209      	lsls	r1, r1, #8
     f0e:	17ca      	asrs	r2, r1, #31
     f10:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     f14:	f10a 0704 	add.w	r7, sl, #4
     f18:	1209      	asrs	r1, r1, #8
     f1a:	d41f      	bmi.n	f5c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x280>
     f1c:	8979      	ldrh	r1, [r7, #10]
     f1e:	2900      	cmp	r1, #0
     f20:	f000 80cf 	beq.w	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
     f24:	8941      	ldrh	r1, [r0, #10]
     f26:	2900      	cmp	r1, #0
     f28:	f040 80cb 	bne.w	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
     f2c:	f000 fc96 	bl	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
     f30:	aa05      	add	r2, sp, #20
     f32:	a904      	add	r1, sp, #16
     f34:	f002 fcea 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     f38:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     f3c:	2800      	cmp	r0, #0
     f3e:	bfcc      	ite	gt
     f40:	2001      	movgt	r0, #1
     f42:	2000      	movle	r0, #0
     f44:	f100 0133 	add.w	r1, r0, #51	; 0x33
     f48:	9804      	ldr	r0, [sp, #16]
     f4a:	683a      	ldr	r2, [r7, #0]
     f4c:	1a10      	subs	r0, r2, r0
     f4e:	0200      	lsls	r0, r0, #8
     f50:	17c2      	asrs	r2, r0, #31
     f52:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     f56:	1200      	asrs	r0, r0, #8
     f58:	4288      	cmp	r0, r1
     f5a:	da7d      	bge.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
     f5c:	f888 5000 	strb.w	r5, [r8]
     f60:	f89a 0010 	ldrb.w	r0, [sl, #16]
     f64:	f899 100c 	ldrb.w	r1, [r9, #12]
     f68:	4288      	cmp	r0, r1
     f6a:	d905      	bls.n	f78 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x29c>
     f6c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     f70:	7845      	ldrb	r5, [r0, #1]
     f72:	2d20      	cmp	r5, #32
     f74:	d1c0      	bne.n	ef8 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x21c>
     f76:	e0a4      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
     f78:	f89d 0004 	ldrb.w	r0, [sp, #4]
     f7c:	e9d4 2100 	ldrd	r2, r1, [r4]
     f80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     f84:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     f88:	1a89      	subs	r1, r1, r2
     f8a:	6880      	ldr	r0, [r0, #8]
     f8c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     f90:	4408      	add	r0, r1
     f92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f96:	e9c4 2000 	strd	r2, r0, [r4]
     f9a:	2001      	movs	r0, #1
     f9c:	9002      	str	r0, [sp, #8]
     f9e:	484b      	ldr	r0, [pc, #300]	; (10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>)
     fa0:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     fa4:	b118      	cbz	r0, fae <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xe>
     fa6:	b009      	add	sp, #36	; 0x24
     fa8:	2000      	movs	r0, #0
     faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fae:	9803      	ldr	r0, [sp, #12]
     fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
     fb4:	466f      	mov	r7, sp
     fb6:	f890 5020 	ldrb.w	r5, [r0, #32]
     fba:	2020      	movs	r0, #32
     fbc:	f10d 0a04 	add.w	sl, sp, #4
     fc0:	f88d 0000 	strb.w	r0, [sp]
     fc4:	2d20      	cmp	r5, #32
     fc6:	bf1c      	itt	ne
     fc8:	4842      	ldrne	r0, [pc, #264]	; (10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
     fca:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     fce:	d030      	beq.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
     fd0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     fd4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     fd8:	1d01      	adds	r1, r0, #4
     fda:	6880      	ldr	r0, [r0, #8]
     fdc:	6822      	ldr	r2, [r4, #0]
     fde:	1a10      	subs	r0, r2, r0
     fe0:	0200      	lsls	r0, r0, #8
     fe2:	17c2      	asrs	r2, r0, #31
     fe4:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     fe8:	1200      	asrs	r0, r0, #8
     fea:	d422      	bmi.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
     fec:	8960      	ldrh	r0, [r4, #10]
     fee:	b1d0      	cbz	r0, 1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
     ff0:	8948      	ldrh	r0, [r1, #10]
     ff2:	b9c0      	cbnz	r0, 1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
     ff4:	4608      	mov	r0, r1
     ff6:	f000 fc31 	bl	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
     ffa:	aa05      	add	r2, sp, #20
     ffc:	a904      	add	r1, sp, #16
     ffe:	f002 fc85 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1002:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    1006:	2800      	cmp	r0, #0
    1008:	bfcc      	ite	gt
    100a:	2001      	movgt	r0, #1
    100c:	2000      	movle	r0, #0
    100e:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1012:	9804      	ldr	r0, [sp, #16]
    1014:	6822      	ldr	r2, [r4, #0]
    1016:	1a10      	subs	r0, r2, r0
    1018:	0200      	lsls	r0, r0, #8
    101a:	17c2      	asrs	r2, r0, #31
    101c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1020:	1200      	asrs	r0, r0, #8
    1022:	4288      	cmp	r0, r1
    1024:	db05      	blt.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
    1026:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    102a:	703d      	strb	r5, [r7, #0]
    102c:	7845      	ldrb	r5, [r0, #1]
    102e:	2d20      	cmp	r5, #32
    1030:	d1ce      	bne.n	fd0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30>
    1032:	7838      	ldrb	r0, [r7, #0]
    1034:	f88a 0000 	strb.w	r0, [sl]
    1038:	4627      	mov	r7, r4
    103a:	2d20      	cmp	r5, #32
    103c:	bf1c      	itt	ne
    103e:	4825      	ldrne	r0, [pc, #148]	; (10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    1040:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1044:	d03d      	beq.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    1046:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    104a:	eb06 0981 	add.w	r9, r6, r1, lsl #2
    104e:	4638      	mov	r0, r7
    1050:	f109 0804 	add.w	r8, r9, #4
    1054:	687a      	ldr	r2, [r7, #4]
    1056:	e000      	b.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    1058:	e033      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    105a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    105e:	1a89      	subs	r1, r1, r2
    1060:	0209      	lsls	r1, r1, #8
    1062:	17ca      	asrs	r2, r1, #31
    1064:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1068:	1209      	asrs	r1, r1, #8
    106a:	d41d      	bmi.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    106c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1070:	b339      	cbz	r1, 10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    1072:	8941      	ldrh	r1, [r0, #10]
    1074:	bb29      	cbnz	r1, 10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    1076:	f000 fbf1 	bl	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
    107a:	aa05      	add	r2, sp, #20
    107c:	a904      	add	r1, sp, #16
    107e:	f002 fc45 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1082:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    1086:	2800      	cmp	r0, #0
    1088:	bfcc      	ite	gt
    108a:	2001      	movgt	r0, #1
    108c:	2000      	movle	r0, #0
    108e:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1092:	9804      	ldr	r0, [sp, #16]
    1094:	f8d8 2000 	ldr.w	r2, [r8]
    1098:	1a10      	subs	r0, r2, r0
    109a:	0200      	lsls	r0, r0, #8
    109c:	17c2      	asrs	r2, r0, #31
    109e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    10a2:	1200      	asrs	r0, r0, #8
    10a4:	4288      	cmp	r0, r1
    10a6:	da0c      	bge.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    10a8:	f88a 5000 	strb.w	r5, [sl]
    10ac:	f899 1010 	ldrb.w	r1, [r9, #16]
    10b0:	7b38      	ldrb	r0, [r7, #12]
    10b2:	4281      	cmp	r1, r0
    10b4:	f67f af60 	bls.w	f78 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x29c>
    10b8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    10bc:	7845      	ldrb	r5, [r0, #1]
    10be:	2d20      	cmp	r5, #32
    10c0:	d1c1      	bne.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    10c2:	9802      	ldr	r0, [sp, #8]
    10c4:	b009      	add	sp, #36	; 0x24
    10c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10ca:	0000      	.short	0x0000
    10cc:	20000e3c 	.word	0x20000e3c
    10d0:	20000b3c 	.word	0x20000b3c
    10d4:	20000dbc 	.word	0x20000dbc
    10d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10dc:	4604      	mov	r4, r0
    10de:	4847      	ldr	r0, [pc, #284]	; (11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>)
    10e0:	460e      	mov	r6, r1
    10e2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    10e6:	4f46      	ldr	r7, [pc, #280]	; (1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    10e8:	f890 5020 	ldrb.w	r5, [r0, #32]
    10ec:	2020      	movs	r0, #32
    10ee:	b083      	sub	sp, #12
    10f0:	4698      	mov	r8, r3
    10f2:	4692      	mov	sl, r2
    10f4:	7010      	strb	r0, [r2, #0]
    10f6:	f507 7920 	add.w	r9, r7, #640	; 0x280
    10fa:	2d20      	cmp	r5, #32
    10fc:	bf18      	it	ne
    10fe:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1102:	d031      	beq.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    1104:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    1108:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    110c:	1d01      	adds	r1, r0, #4
    110e:	6880      	ldr	r0, [r0, #8]
    1110:	6822      	ldr	r2, [r4, #0]
    1112:	1a10      	subs	r0, r2, r0
    1114:	0200      	lsls	r0, r0, #8
    1116:	17c2      	asrs	r2, r0, #31
    1118:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    111c:	1200      	asrs	r0, r0, #8
    111e:	d423      	bmi.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    1120:	8960      	ldrh	r0, [r4, #10]
    1122:	b1d0      	cbz	r0, 115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
    1124:	8948      	ldrh	r0, [r1, #10]
    1126:	b9c0      	cbnz	r0, 115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
    1128:	4608      	mov	r0, r1
    112a:	f000 fb97 	bl	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
    112e:	aa01      	add	r2, sp, #4
    1130:	4669      	mov	r1, sp
    1132:	f002 fbeb 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1136:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    113a:	2800      	cmp	r0, #0
    113c:	bfcc      	ite	gt
    113e:	2001      	movgt	r0, #1
    1140:	2000      	movle	r0, #0
    1142:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1146:	9800      	ldr	r0, [sp, #0]
    1148:	6822      	ldr	r2, [r4, #0]
    114a:	1a10      	subs	r0, r2, r0
    114c:	0200      	lsls	r0, r0, #8
    114e:	17c2      	asrs	r2, r0, #31
    1150:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1154:	1200      	asrs	r0, r0, #8
    1156:	4288      	cmp	r0, r1
    1158:	db06      	blt.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    115a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    115e:	f88a 5000 	strb.w	r5, [sl]
    1162:	7845      	ldrb	r5, [r0, #1]
    1164:	2d20      	cmp	r5, #32
    1166:	d1cd      	bne.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    1168:	f89a 0000 	ldrb.w	r0, [sl]
    116c:	f888 0000 	strb.w	r0, [r8]
    1170:	2d20      	cmp	r5, #32
    1172:	bf18      	it	ne
    1174:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1178:	d03c      	beq.n	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    117a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    117e:	eb07 0981 	add.w	r9, r7, r1, lsl #2
    1182:	6861      	ldr	r1, [r4, #4]
    1184:	f8d9 2004 	ldr.w	r2, [r9, #4]
    1188:	4620      	mov	r0, r4
    118a:	1a51      	subs	r1, r2, r1
    118c:	0209      	lsls	r1, r1, #8
    118e:	17ca      	asrs	r2, r1, #31
    1190:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1194:	f109 0604 	add.w	r6, r9, #4
    1198:	1209      	asrs	r1, r1, #8
    119a:	d41b      	bmi.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
    119c:	8971      	ldrh	r1, [r6, #10]
    119e:	b349      	cbz	r1, 11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    11a0:	8941      	ldrh	r1, [r0, #10]
    11a2:	bb39      	cbnz	r1, 11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    11a4:	f000 fb5a 	bl	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
    11a8:	aa01      	add	r2, sp, #4
    11aa:	4669      	mov	r1, sp
    11ac:	f002 fbae 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    11b0:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    11b4:	2800      	cmp	r0, #0
    11b6:	bfcc      	ite	gt
    11b8:	2001      	movgt	r0, #1
    11ba:	2000      	movle	r0, #0
    11bc:	f100 0133 	add.w	r1, r0, #51	; 0x33
    11c0:	9800      	ldr	r0, [sp, #0]
    11c2:	6832      	ldr	r2, [r6, #0]
    11c4:	1a10      	subs	r0, r2, r0
    11c6:	0200      	lsls	r0, r0, #8
    11c8:	17c2      	asrs	r2, r0, #31
    11ca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    11ce:	1200      	asrs	r0, r0, #8
    11d0:	4288      	cmp	r0, r1
    11d2:	da0f      	bge.n	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    11d4:	f888 5000 	strb.w	r5, [r8]
    11d8:	f899 0010 	ldrb.w	r0, [r9, #16]
    11dc:	7b21      	ldrb	r1, [r4, #12]
    11de:	4288      	cmp	r0, r1
    11e0:	d803      	bhi.n	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    11e2:	b003      	add	sp, #12
    11e4:	2000      	movs	r0, #0
    11e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ea:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    11ee:	7845      	ldrb	r5, [r0, #1]
    11f0:	2d20      	cmp	r5, #32
    11f2:	d1c2      	bne.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    11f4:	b003      	add	sp, #12
    11f6:	2001      	movs	r0, #1
    11f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11fc:	20000e3c 	.word	0x20000e3c
    1200:	20000b3c 	.word	0x20000b3c
    1204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1208:	f04f 0800 	mov.w	r8, #0
    120c:	b098      	sub	sp, #96	; 0x60
    120e:	4616      	mov	r6, r2
    1210:	460d      	mov	r5, r1
    1212:	46c3      	mov	fp, r8
    1214:	f002 f8fc 	bl	3410 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1218:	4604      	mov	r4, r0
    121a:	2d01      	cmp	r5, #1
    121c:	bf18      	it	ne
    121e:	2d02      	cmpne	r5, #2
    1220:	d005      	beq.n	122e <CONFIG_FPROTECT_BLOCK_SIZE+0x22e>
    1222:	f640 117b 	movw	r1, #2427	; 0x97b
    1226:	f04f 0070 	mov.w	r0, #112	; 0x70
    122a:	f002 ff07 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    122e:	49fe      	ldr	r1, [pc, #1016]	; (1628 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a0>)
    1230:	2001      	movs	r0, #1
    1232:	6008      	str	r0, [r1, #0]
    1234:	49fd      	ldr	r1, [pc, #1012]	; (162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>)
    1236:	6889      	ldr	r1, [r1, #8]
    1238:	6008      	str	r0, [r1, #0]
    123a:	2000      	movs	r0, #0
    123c:	9006      	str	r0, [sp, #24]
    123e:	1e40      	subs	r0, r0, #1
    1240:	9008      	str	r0, [sp, #32]
    1242:	49fb      	ldr	r1, [pc, #1004]	; (1630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a8>)
    1244:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    1248:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    124c:	1d1b      	adds	r3, r3, #4
    124e:	af09      	add	r7, sp, #36	; 0x24
    1250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1252:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1256:	a809      	add	r0, sp, #36	; 0x24
    1258:	f000 fb00 	bl	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
    125c:	9007      	str	r0, [sp, #28]
    125e:	48f4      	ldr	r0, [pc, #976]	; (1630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a8>)
    1260:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
    1264:	f8b0 031c 	ldrh.w	r0, [r0, #796]	; 0x31c
    1268:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    126c:	f1b9 0f00 	cmp.w	r9, #0
    1270:	bf14      	ite	ne
    1272:	f04f 0a01 	movne.w	sl, #1
    1276:	f04f 0a00 	moveq.w	sl, #0
    127a:	9809      	ldr	r0, [sp, #36]	; 0x24
    127c:	9012      	str	r0, [sp, #72]	; 0x48
    127e:	f1ba 0f00 	cmp.w	sl, #0
    1282:	d009      	beq.n	1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>
    1284:	48eb      	ldr	r0, [pc, #940]	; (1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>)
    1286:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    128a:	b928      	cbnz	r0, 1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>
    128c:	f002 fe72 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1290:	2800      	cmp	r0, #0
    1292:	bf08      	it	eq
    1294:	2701      	moveq	r7, #1
    1296:	d000      	beq.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
    1298:	2700      	movs	r7, #0
    129a:	48e7      	ldr	r0, [pc, #924]	; (1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>)
    129c:	2200      	movs	r2, #0
    129e:	9214      	str	r2, [sp, #80]	; 0x50
    12a0:	7800      	ldrb	r0, [r0, #0]
    12a2:	4616      	mov	r6, r2
    12a4:	2801      	cmp	r0, #1
    12a6:	bf18      	it	ne
    12a8:	2803      	cmpne	r0, #3
    12aa:	d143      	bne.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    12ac:	48e2      	ldr	r0, [pc, #904]	; (1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>)
    12ae:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    12b2:	eba8 0009 	sub.w	r0, r8, r9
    12b6:	9014      	str	r0, [sp, #80]	; 0x50
    12b8:	45c1      	cmp	r9, r8
    12ba:	d23b      	bcs.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    12bc:	a803      	add	r0, sp, #12
    12be:	9005      	str	r0, [sp, #20]
    12c0:	a817      	add	r0, sp, #92	; 0x5c
    12c2:	9010      	str	r0, [sp, #64]	; 0x40
    12c4:	9907      	ldr	r1, [sp, #28]
    12c6:	f108 0003 	add.w	r0, r8, #3
    12ca:	4242      	negs	r2, r0
    12cc:	f8df c36c 	ldr.w	ip, [pc, #876]	; 163c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b4>
    12d0:	1a08      	subs	r0, r1, r0
    12d2:	2300      	movs	r3, #0
    12d4:	ebbc 0101 	subs.w	r1, ip, r1
    12d8:	eb73 0103 	sbcs.w	r1, r3, r3
    12dc:	d204      	bcs.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    12de:	f240 51f1 	movw	r1, #1521	; 0x5f1
    12e2:	2070      	movs	r0, #112	; 0x70
    12e4:	f002 feaa 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12e8:	49d5      	ldr	r1, [pc, #852]	; (1640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b8>)
    12ea:	428a      	cmp	r2, r1
    12ec:	dd04      	ble.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
    12ee:	f240 51f2 	movw	r1, #1522	; 0x5f2
    12f2:	2070      	movs	r0, #112	; 0x70
    12f4:	f002 fea2 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12f8:	49d2      	ldr	r1, [pc, #840]	; (1644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2bc>)
    12fa:	428a      	cmp	r2, r1
    12fc:	da04      	bge.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    12fe:	f240 51f3 	movw	r1, #1523	; 0x5f3
    1302:	2070      	movs	r0, #112	; 0x70
    1304:	f002 fe9a 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1308:	49cf      	ldr	r1, [pc, #828]	; (1648 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c0>)
    130a:	4288      	cmp	r0, r1
    130c:	bfa8      	it	ge
    130e:	49cf      	ldrge	r1, [pc, #828]	; (164c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c4>)
    1310:	da03      	bge.n	131a <CONFIG_FPROTECT_BLOCK_SIZE+0x31a>
    1312:	2800      	cmp	r0, #0
    1314:	bfb8      	it	lt
    1316:	49cc      	ldrlt	r1, [pc, #816]	; (1648 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c0>)
    1318:	da00      	bge.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
    131a:	1840      	adds	r0, r0, r1
    131c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    131e:	9905      	ldr	r1, [sp, #20]
    1320:	f002 faf4 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1324:	9803      	ldr	r0, [sp, #12]
    1326:	9909      	ldr	r1, [sp, #36]	; 0x24
    1328:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    132c:	9003      	str	r0, [sp, #12]
    132e:	1a08      	subs	r0, r1, r0
    1330:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1334:	2f00      	cmp	r7, #0
    1336:	bf18      	it	ne
    1338:	2632      	movne	r6, #50	; 0x32
    133a:	d104      	bne.n	1346 <CONFIG_FPROTECT_BLOCK_SIZE+0x346>
    133c:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1340:	2800      	cmp	r0, #0
    1342:	bf18      	it	ne
    1344:	2602      	movne	r6, #2
    1346:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    134a:	d008      	beq.n	135e <CONFIG_FPROTECT_BLOCK_SIZE+0x35e>
    134c:	9809      	ldr	r0, [sp, #36]	; 0x24
    134e:	1b00      	subs	r0, r0, r4
    1350:	0200      	lsls	r0, r0, #8
    1352:	17c1      	asrs	r1, r0, #31
    1354:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1358:	1200      	asrs	r0, r0, #8
    135a:	2801      	cmp	r0, #1
    135c:	da02      	bge.n	1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>
    135e:	2004      	movs	r0, #4
    1360:	9918      	ldr	r1, [sp, #96]	; 0x60
    1362:	e00b      	b.n	137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>
    1364:	b147      	cbz	r7, 1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    1366:	48b3      	ldr	r0, [pc, #716]	; (1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>)
    1368:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    136c:	b120      	cbz	r0, 1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    136e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1372:	1c06      	adds	r6, r0, #0
    1374:	bf18      	it	ne
    1376:	2602      	movne	r6, #2
    1378:	4621      	mov	r1, r4
    137a:	2001      	movs	r0, #1
    137c:	f1b9 0f00 	cmp.w	r9, #0
    1380:	d002      	beq.n	1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
    1382:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1384:	2b1e      	cmp	r3, #30
    1386:	da02      	bge.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    1388:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    138c:	b113      	cbz	r3, 1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>
    138e:	f04f 0b01 	mov.w	fp, #1
    1392:	1e40      	subs	r0, r0, #1
    1394:	1983      	adds	r3, r0, r6
    1396:	48a8      	ldr	r0, [pc, #672]	; (1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>)
    1398:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
    139c:	7800      	ldrb	r0, [r0, #0]
    139e:	9015      	str	r0, [sp, #84]	; 0x54
    13a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    13a2:	1a80      	subs	r0, r0, r2
    13a4:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    13a8:	ebac 0001 	sub.w	r0, ip, r1
    13ac:	0200      	lsls	r0, r0, #8
    13ae:	ea4f 7ee0 	mov.w	lr, r0, asr #31
    13b2:	eb00 601e 	add.w	r0, r0, lr, lsr #24
    13b6:	1200      	asrs	r0, r0, #8
    13b8:	4298      	cmp	r0, r3
    13ba:	db18      	blt.n	13ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66>
    13bc:	2a00      	cmp	r2, #0
    13be:	bf18      	it	ne
    13c0:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
    13c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    13c6:	9710      	str	r7, [sp, #64]	; 0x40
    13c8:	2700      	movs	r7, #0
    13ca:	f001 ff1b 	bl	3204 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    13ce:	1a30      	subs	r0, r6, r0
    13d0:	0200      	lsls	r0, r0, #8
    13d2:	17c1      	asrs	r1, r0, #31
    13d4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    13d8:	1200      	asrs	r0, r0, #8
    13da:	283e      	cmp	r0, #62	; 0x3e
    13dc:	da3e      	bge.n	145c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd4>
    13de:	2d01      	cmp	r5, #1
    13e0:	d01f      	beq.n	1422 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a>
    13e2:	1e70      	subs	r0, r6, #1
    13e4:	9910      	ldr	r1, [sp, #64]	; 0x40
    13e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13ea:	b311      	cbz	r1, 1432 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa>
    13ec:	e02c      	b.n	1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>
    13ee:	b17a      	cbz	r2, 1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>
    13f0:	2e00      	cmp	r6, #0
    13f2:	bf04      	itt	eq
    13f4:	9815      	ldreq	r0, [sp, #84]	; 0x54
    13f6:	2803      	cmpeq	r0, #3
    13f8:	d00a      	beq.n	1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>
    13fa:	b927      	cbnz	r7, 1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13fc:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1400:	2800      	cmp	r0, #0
    1402:	bf18      	it	ne
    1404:	1e9b      	subne	r3, r3, #2
    1406:	2200      	movs	r2, #0
    1408:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    140c:	4690      	mov	r8, r2
    140e:	e7c7      	b.n	13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>
    1410:	bb07      	cbnz	r7, 1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
    1412:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1416:	b1e8      	cbz	r0, 1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
    1418:	2000      	movs	r0, #0
    141a:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    141e:	1e9b      	subs	r3, r3, #2
    1420:	e7be      	b.n	13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>
    1422:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1426:	d120      	bne.n	146a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe2>
    1428:	f640 01f4 	movw	r1, #2292	; 0x8f4
    142c:	2070      	movs	r0, #112	; 0x70
    142e:	f002 fe05 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1432:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1436:	d007      	beq.n	1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>
    1438:	1a21      	subs	r1, r4, r0
    143a:	0209      	lsls	r1, r1, #8
    143c:	17ca      	asrs	r2, r1, #31
    143e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1442:	1209      	asrs	r1, r1, #8
    1444:	2904      	cmp	r1, #4
    1446:	dd03      	ble.n	1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
    1448:	4604      	mov	r4, r0
    144a:	f001 fee1 	bl	3210 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    144e:	e00c      	b.n	146a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe2>
    1450:	2900      	cmp	r1, #0
    1452:	dd0a      	ble.n	146a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe2>
    1454:	b01b      	add	sp, #108	; 0x6c
    1456:	2000      	movs	r0, #0
    1458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    145c:	1e70      	subs	r0, r6, #1
    145e:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1462:	4620      	mov	r0, r4
    1464:	f001 fed4 	bl	3210 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1468:	4657      	mov	r7, sl
    146a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    146e:	d028      	beq.n	14c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13a>
    1470:	9809      	ldr	r0, [sp, #36]	; 0x24
    1472:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    1476:	1b00      	subs	r0, r0, r4
    1478:	f08b 0301 	eor.w	r3, fp, #1
    147c:	4a74      	ldr	r2, [pc, #464]	; (1650 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c8>)
    147e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1482:	ebac 0c04 	sub.w	ip, ip, r4
    1486:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    148a:	4283      	cmp	r3, r0
    148c:	bf98      	it	ls
    148e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1492:	d2df      	bcs.n	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
    1494:	4562      	cmp	r2, ip
    1496:	d3dd      	bcc.n	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
    1498:	4620      	mov	r0, r4
    149a:	f00b f8e4 	bl	c666 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    149e:	4a67      	ldr	r2, [pc, #412]	; (163c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b4>)
    14a0:	9907      	ldr	r1, [sp, #28]
    14a2:	1c53      	adds	r3, r2, #1
    14a4:	1a0e      	subs	r6, r1, r0
    14a6:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    14aa:	bf24      	itt	cs
    14ac:	eba0 0c01 	subcs.w	ip, r0, r1
    14b0:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    14b4:	d310      	bcc.n	14d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x150>
    14b6:	42b2      	cmp	r2, r6
    14b8:	d208      	bcs.n	14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>
    14ba:	1a10      	subs	r0, r2, r0
    14bc:	4408      	add	r0, r1
    14be:	1c46      	adds	r6, r0, #1
    14c0:	e00a      	b.n	14d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x150>
    14c2:	f640 2113 	movw	r1, #2579	; 0xa13
    14c6:	2070      	movs	r0, #112	; 0x70
    14c8:	f002 fdb8 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14cc:	4562      	cmp	r2, ip
    14ce:	d22c      	bcs.n	152a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a2>
    14d0:	1a51      	subs	r1, r2, r1
    14d2:	4408      	add	r0, r1
    14d4:	1c40      	adds	r0, r0, #1
    14d6:	4246      	negs	r6, r0
    14d8:	4856      	ldr	r0, [pc, #344]	; (1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>)
    14da:	7f80      	ldrb	r0, [r0, #30]
    14dc:	b350      	cbz	r0, 1534 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ac>
    14de:	4628      	mov	r0, r5
    14e0:	4645      	mov	r5, r8
    14e2:	f04f 0b00 	mov.w	fp, #0
    14e6:	46d8      	mov	r8, fp
    14e8:	2801      	cmp	r0, #1
    14ea:	d005      	beq.n	14f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x170>
    14ec:	2002      	movs	r0, #2
    14ee:	f002 f8d7 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    14f2:	2001      	movs	r0, #1
    14f4:	f002 f8d4 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    14f8:	45a9      	cmp	r9, r5
    14fa:	d22c      	bcs.n	1556 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ce>
    14fc:	eba6 0105 	sub.w	r1, r6, r5
    1500:	f04f 0301 	mov.w	r3, #1
    1504:	f04f 0203 	mov.w	r2, #3
    1508:	f04f 0002 	mov.w	r0, #2
    150c:	f002 f800 	bl	3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1510:	2800      	cmp	r0, #0
    1512:	bf08      	it	eq
    1514:	f04f 0801 	moveq.w	r8, #1
    1518:	f1b9 0f00 	cmp.w	r9, #0
    151c:	d035      	beq.n	158a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x202>
    151e:	2301      	movs	r3, #1
    1520:	eba6 0109 	sub.w	r1, r6, r9
    1524:	2203      	movs	r2, #3
    1526:	4618      	mov	r0, r3
    1528:	e023      	b.n	1572 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ea>
    152a:	f640 21f3 	movw	r1, #2803	; 0xaf3
    152e:	2070      	movs	r0, #112	; 0x70
    1530:	f002 fd84 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1534:	45c1      	cmp	r9, r8
    1536:	bf34      	ite	cc
    1538:	4640      	movcc	r0, r8
    153a:	4648      	movcs	r0, r9
    153c:	f1bb 0f00 	cmp.w	fp, #0
    1540:	bf14      	ite	ne
    1542:	2100      	movne	r1, #0
    1544:	211e      	moveq	r1, #30
    1546:	4408      	add	r0, r1
    1548:	42b0      	cmp	r0, r6
    154a:	dbc8      	blt.n	14de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156>
    154c:	f640 2126 	movw	r1, #2598	; 0xa26
    1550:	2070      	movs	r0, #112	; 0x70
    1552:	f002 fd73 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1556:	d910      	bls.n	157a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f2>
    1558:	2301      	movs	r3, #1
    155a:	eba6 0109 	sub.w	r1, r6, r9
    155e:	2203      	movs	r2, #3
    1560:	4618      	mov	r0, r3
    1562:	f001 ffd5 	bl	3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1566:	b328      	cbz	r0, 15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
    1568:	b17d      	cbz	r5, 158a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x202>
    156a:	1b71      	subs	r1, r6, r5
    156c:	2301      	movs	r3, #1
    156e:	2203      	movs	r2, #3
    1570:	2002      	movs	r0, #2
    1572:	f001 ffcd 	bl	3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1576:	b1e8      	cbz	r0, 15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
    1578:	e007      	b.n	158a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x202>
    157a:	ea55 0009 	orrs.w	r0, r5, r9
    157e:	d004      	beq.n	158a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x202>
    1580:	f640 115e 	movw	r1, #2398	; 0x95e
    1584:	2070      	movs	r0, #112	; 0x70
    1586:	f002 fd59 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    158a:	2301      	movs	r3, #1
    158c:	2203      	movs	r2, #3
    158e:	4631      	mov	r1, r6
    1590:	2000      	movs	r0, #0
    1592:	f001 ffbd 	bl	3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1596:	b168      	cbz	r0, 15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
    1598:	2501      	movs	r5, #1
    159a:	f1b8 0f00 	cmp.w	r8, #0
    159e:	d003      	beq.n	15a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x220>
    15a0:	9812      	ldr	r0, [sp, #72]	; 0x48
    15a2:	9009      	str	r0, [sp, #36]	; 0x24
    15a4:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
    15a8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2cc>
    15ac:	f1ba 0f00 	cmp.w	sl, #0
    15b0:	d10e      	bne.n	15d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x248>
    15b2:	e009      	b.n	15c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x240>
    15b4:	2002      	movs	r0, #2
    15b6:	f002 f873 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    15ba:	2001      	movs	r0, #1
    15bc:	f002 f870 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    15c0:	b01b      	add	sp, #108	; 0x6c
    15c2:	2000      	movs	r0, #0
    15c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15c8:	481a      	ldr	r0, [pc, #104]	; (1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>)
    15ca:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    15ce:	b100      	cbz	r0, 15d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24a>
    15d0:	b34f      	cbz	r7, 1626 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29e>
    15d2:	f8df a060 	ldr.w	sl, [pc, #96]	; 1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>
    15d6:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    15da:	b118      	cbz	r0, 15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    15dc:	f002 fb74 	bl	3cc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    15e0:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    15e4:	b3e7      	cbz	r7, 1660 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d8>
    15e6:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    15ea:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    15ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    15f2:	f8c8 0000 	str.w	r0, [r8]
    15f6:	2300      	movs	r3, #0
    15f8:	2203      	movs	r2, #3
    15fa:	2005      	movs	r0, #5
    15fc:	f001 ff88 	bl	3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1600:	b378      	cbz	r0, 1662 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2da>
    1602:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1606:	2005      	movs	r0, #5
    1608:	f002 f92a 	bl	3860 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    160c:	4912      	ldr	r1, [pc, #72]	; (1658 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d0>)
    160e:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1612:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1616:	4911      	ldr	r1, [pc, #68]	; (165c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d4>)
    1618:	12e0      	asrs	r0, r4, #11
    161a:	6008      	str	r0, [r1, #0]
    161c:	4c05      	ldr	r4, [pc, #20]	; (1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>)
    161e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1622:	b3e0      	cbz	r0, 169e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x316>
    1624:	e05d      	b.n	16e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x35a>
    1626:	e01d      	b.n	1664 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2dc>
    1628:	40000508 	.word	0x40000508
    162c:	2000000c 	.word	0x2000000c
    1630:	20000b3c 	.word	0x20000b3c
    1634:	20000e3c 	.word	0x20000e3c
    1638:	2000000e 	.word	0x2000000e
    163c:	1e847fff 	.word	0x1e847fff
    1640:	07a12000 	.word	0x07a12000
    1644:	f85ee000 	.word	0xf85ee000
    1648:	1e848000 	.word	0x1e848000
    164c:	e17b8000 	.word	0xe17b8000
    1650:	003fffff 	.word	0x003fffff
    1654:	4001f508 	.word	0x4001f508
    1658:	4001f098 	.word	0x4001f098
    165c:	4001f504 	.word	0x4001f504
    1660:	e005      	b.n	166e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e6>
    1662:	e035      	b.n	16d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x348>
    1664:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1720 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x398>
    1668:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    166c:	b358      	cbz	r0, 16c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33e>
    166e:	4c2c      	ldr	r4, [pc, #176]	; (1720 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x398>)
    1670:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1674:	b150      	cbz	r0, 168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>
    1676:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    167a:	f8c8 0000 	str.w	r0, [r8]
    167e:	2005      	movs	r0, #5
    1680:	f002 f80e 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1684:	f002 fb88 	bl	3d98 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1688:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    168c:	ac06      	add	r4, sp, #24
    168e:	4825      	ldr	r0, [pc, #148]	; (1724 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39c>)
    1690:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1694:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    1698:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    169c:	e000      	b.n	16a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x318>
    169e:	e01c      	b.n	16da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x352>
    16a0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    16a4:	f8c0 c30c 	str.w	ip, [r0, #780]	; 0x30c
    16a8:	ac0a      	add	r4, sp, #40	; 0x28
    16aa:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    16ae:	f8c0 1310 	str.w	r1, [r0, #784]	; 0x310
    16b2:	f8c0 2314 	str.w	r2, [r0, #788]	; 0x314
    16b6:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
    16ba:	f8c0 c31c 	str.w	ip, [r0, #796]	; 0x31c
    16be:	b01b      	add	sp, #108	; 0x6c
    16c0:	2001      	movs	r0, #1
    16c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16c6:	f002 fb1b 	bl	3d00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16ca:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    16ce:	e789      	b.n	15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    16d0:	f44f 7153 	mov.w	r1, #844	; 0x34c
    16d4:	2070      	movs	r0, #112	; 0x70
    16d6:	f002 fcb1 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16da:	f002 fb4f 	bl	3d7c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    16de:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    16e2:	eba6 0009 	sub.w	r0, r6, r9
    16e6:	f1a0 0119 	sub.w	r1, r0, #25
    16ea:	2900      	cmp	r1, #0
    16ec:	dc04      	bgt.n	16f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x370>
    16ee:	f44f 6125 	mov.w	r1, #2640	; 0xa50
    16f2:	2070      	movs	r0, #112	; 0x70
    16f4:	f002 fca2 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16f8:	2203      	movs	r2, #3
    16fa:	2301      	movs	r3, #1
    16fc:	4610      	mov	r0, r2
    16fe:	f001 ff07 	bl	3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1702:	b138      	cbz	r0, 1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1704:	4808      	ldr	r0, [pc, #32]	; (1728 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a0>)
    1706:	6880      	ldr	r0, [r0, #8]
    1708:	f8c0 b000 	str.w	fp, [r0]
    170c:	4807      	ldr	r0, [pc, #28]	; (172c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a4>)
    170e:	f8c0 b000 	str.w	fp, [r0]
    1712:	e7bb      	b.n	168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>
    1714:	f640 215b 	movw	r1, #2651	; 0xa5b
    1718:	2070      	movs	r0, #112	; 0x70
    171a:	f002 fc8f 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    171e:	0000      	.short	0x0000
    1720:	20000e3c 	.word	0x20000e3c
    1724:	20000b3c 	.word	0x20000b3c
    1728:	2000000c 	.word	0x2000000c
    172c:	40000508 	.word	0x40000508
    1730:	b510      	push	{r4, lr}
    1732:	4c15      	ldr	r4, [pc, #84]	; (1788 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x400>)
    1734:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1738:	2820      	cmp	r0, #32
    173a:	bf18      	it	ne
    173c:	bd10      	popne	{r4, pc}
    173e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1742:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1746:	f890 1020 	ldrb.w	r1, [r0, #32]
    174a:	2920      	cmp	r1, #32
    174c:	d017      	beq.n	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
    174e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 178c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x404>
    1752:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1756:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    175a:	785b      	ldrb	r3, [r3, #1]
    175c:	f880 3020 	strb.w	r3, [r0, #32]
    1760:	2301      	movs	r3, #1
    1762:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1766:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    176a:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    176e:	2002      	movs	r0, #2
    1770:	f000 f8b2 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    1774:	2000      	movs	r0, #0
    1776:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    177a:	77a0      	strb	r0, [r4, #30]
    177c:	bd10      	pop	{r4, pc}
    177e:	f240 3199 	movw	r1, #921	; 0x399
    1782:	2070      	movs	r0, #112	; 0x70
    1784:	f002 fc5a 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1788:	20000e3c 	.word	0x20000e3c
    178c:	20000dbc 	.word	0x20000dbc
    1790:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1794:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>
    1798:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    179c:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    17a0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    17a4:	2c20      	cmp	r4, #32
    17a6:	bf08      	it	eq
    17a8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    17ac:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1850 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c8>
    17b0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1854 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4cc>
    17b4:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
    17b8:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    17bc:	2607      	movs	r6, #7
    17be:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    17c2:	2801      	cmp	r0, #1
    17c4:	d00e      	beq.n	17e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45c>
    17c6:	2804      	cmp	r0, #4
    17c8:	bf08      	it	eq
    17ca:	2602      	moveq	r6, #2
    17cc:	d00a      	beq.n	17e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45c>
    17ce:	2805      	cmp	r0, #5
    17d0:	bf0c      	ite	eq
    17d2:	2603      	moveq	r6, #3
    17d4:	2806      	cmpne	r0, #6
    17d6:	d005      	beq.n	17e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45c>
    17d8:	f640 01c1 	movw	r1, #2241	; 0x8c1
    17dc:	f04f 0070 	mov.w	r0, #112	; 0x70
    17e0:	f002 fc2c 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17e4:	f1ba 0f00 	cmp.w	sl, #0
    17e8:	bf18      	it	ne
    17ea:	f3af 8000 	nopne.w
    17ee:	f3ef 8010 	mrs	r0, PRIMASK
    17f2:	b672      	cpsid	i
    17f4:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    17f8:	784a      	ldrb	r2, [r1, #1]
    17fa:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    17fe:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1802:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1806:	42a2      	cmp	r2, r4
    1808:	bf04      	itt	eq
    180a:	2220      	moveq	r2, #32
    180c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1810:	b1a8      	cbz	r0, 183e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b6>
    1812:	462a      	mov	r2, r5
    1814:	4621      	mov	r1, r4
    1816:	2001      	movs	r0, #1
    1818:	f000 f85e 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    181c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    1820:	4631      	mov	r1, r6
    1822:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
    1826:	4620      	mov	r0, r4
    1828:	4790      	blx	r2
    182a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    182e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1832:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1836:	2c20      	cmp	r4, #32
    1838:	d1be      	bne.n	17b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x430>
    183a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    183e:	4806      	ldr	r0, [pc, #24]	; (1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>)
    1840:	2800      	cmp	r0, #0
    1842:	bf18      	it	ne
    1844:	f3af 8000 	nopne.w
    1848:	b662      	cpsie	i
    184a:	e7e2      	b.n	1812 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48a>
    184c:	20000e3c 	.word	0x20000e3c
    1850:	00000000 	.word	0x00000000
    1854:	20000dbc 	.word	0x20000dbc
    1858:	00000000 	.word	0x00000000
    185c:	b510      	push	{r4, lr}
    185e:	4604      	mov	r4, r0
    1860:	6800      	ldr	r0, [r0, #0]
    1862:	f00a ff00 	bl	c666 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1866:	4601      	mov	r1, r0
    1868:	8960      	ldrh	r0, [r4, #10]
    186a:	f994 2008 	ldrsb.w	r2, [r4, #8]
    186e:	f8df c054 	ldr.w	ip, [pc, #84]	; 18c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x53c>
    1872:	4410      	add	r0, r2
    1874:	1cc2      	adds	r2, r0, #3
    1876:	1888      	adds	r0, r1, r2
    1878:	2300      	movs	r3, #0
    187a:	ebbc 0101 	subs.w	r1, ip, r1
    187e:	eb73 0103 	sbcs.w	r1, r3, r3
    1882:	d204      	bcs.n	188e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x506>
    1884:	f240 51f1 	movw	r1, #1521	; 0x5f1
    1888:	2070      	movs	r0, #112	; 0x70
    188a:	f002 fbd7 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    188e:	490e      	ldr	r1, [pc, #56]	; (18c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x540>)
    1890:	428a      	cmp	r2, r1
    1892:	dd04      	ble.n	189e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x516>
    1894:	f240 51f2 	movw	r1, #1522	; 0x5f2
    1898:	2070      	movs	r0, #112	; 0x70
    189a:	f002 fbcf 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    189e:	490b      	ldr	r1, [pc, #44]	; (18cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x544>)
    18a0:	428a      	cmp	r2, r1
    18a2:	da04      	bge.n	18ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x526>
    18a4:	f240 51f3 	movw	r1, #1523	; 0x5f3
    18a8:	2070      	movs	r0, #112	; 0x70
    18aa:	f002 fbc7 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ae:	4908      	ldr	r1, [pc, #32]	; (18d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x548>)
    18b0:	4288      	cmp	r0, r1
    18b2:	bfa8      	it	ge
    18b4:	4907      	ldrge	r1, [pc, #28]	; (18d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54c>)
    18b6:	da03      	bge.n	18c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x538>
    18b8:	2800      	cmp	r0, #0
    18ba:	bfb4      	ite	lt
    18bc:	4904      	ldrlt	r1, [pc, #16]	; (18d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x548>)
    18be:	bd10      	popge	{r4, pc}
    18c0:	1840      	adds	r0, r0, r1
    18c2:	bd10      	pop	{r4, pc}
    18c4:	1e847fff 	.word	0x1e847fff
    18c8:	07a12000 	.word	0x07a12000
    18cc:	f85ee000 	.word	0xf85ee000
    18d0:	1e848000 	.word	0x1e848000
    18d4:	e17b8000 	.word	0xe17b8000
    18d8:	f8df c054 	ldr.w	ip, [pc, #84]	; 1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>
    18dc:	b510      	push	{r4, lr}
    18de:	2300      	movs	r3, #0
    18e0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    18e4:	2807      	cmp	r0, #7
    18e6:	d21e      	bcs.n	1926 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x59e>
    18e8:	e8df f000 	tbb	[pc, r0]
    18ec:	05050505 	.word	0x05050505
    18f0:	00040404 	.word	0x00040404
    18f4:	2301      	movs	r3, #1
    18f6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    18fa:	2b00      	cmp	r3, #0
    18fc:	bf08      	it	eq
    18fe:	bd10      	popeq	{r4, pc}
    1900:	480c      	ldr	r0, [pc, #48]	; (1934 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ac>)
    1902:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1906:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    190a:	2820      	cmp	r0, #32
    190c:	bf0e      	itee	eq
    190e:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1912:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1916:	7041      	strbne	r1, [r0, #1]
    1918:	2020      	movs	r0, #32
    191a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    191e:	7058      	strb	r0, [r3, #1]
    1920:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1924:	bd10      	pop	{r4, pc}
    1926:	f240 2162 	movw	r1, #610	; 0x262
    192a:	2070      	movs	r0, #112	; 0x70
    192c:	f002 fb86 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1930:	20000dbc 	.word	0x20000dbc
    1934:	20000e3c 	.word	0x20000e3c
    1938:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    193c:	b083      	sub	sp, #12
    193e:	485c      	ldr	r0, [pc, #368]	; (1ab0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x728>)
    1940:	9904      	ldr	r1, [sp, #16]
    1942:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1946:	9001      	str	r0, [sp, #4]
    1948:	f890 4020 	ldrb.w	r4, [r0, #32]
    194c:	9803      	ldr	r0, [sp, #12]
    194e:	4625      	mov	r5, r4
    1950:	2801      	cmp	r0, #1
    1952:	bf18      	it	ne
    1954:	2802      	cmpne	r0, #2
    1956:	d005      	beq.n	1964 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5dc>
    1958:	f640 2197 	movw	r1, #2711	; 0xa97
    195c:	f04f 0070 	mov.w	r0, #112	; 0x70
    1960:	f002 fb6c 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1964:	2700      	movs	r7, #0
    1966:	2d20      	cmp	r5, #32
    1968:	d04a      	beq.n	1a00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x678>
    196a:	4851      	ldr	r0, [pc, #324]	; (1ab0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x728>)
    196c:	9100      	str	r1, [sp, #0]
    196e:	2600      	movs	r6, #0
    1970:	7f80      	ldrb	r0, [r0, #30]
    1972:	2800      	cmp	r0, #0
    1974:	bf08      	it	eq
    1976:	2602      	moveq	r6, #2
    1978:	f001 fc44 	bl	3204 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    197c:	f8df a138 	ldr.w	sl, [pc, #312]	; 1ab8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x730>
    1980:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    1984:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    1988:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1ab4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72c>
    198c:	684a      	ldr	r2, [r1, #4]
    198e:	6889      	ldr	r1, [r1, #8]
    1990:	1a12      	subs	r2, r2, r0
    1992:	1a09      	subs	r1, r1, r0
    1994:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1998:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    199c:	4296      	cmp	r6, r2
    199e:	bf98      	it	ls
    19a0:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    19a4:	d201      	bcs.n	19aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x622>
    19a6:	4589      	cmp	r9, r1
    19a8:	d228      	bcs.n	19fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x674>
    19aa:	4a44      	ldr	r2, [pc, #272]	; (1abc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x734>)
    19ac:	9900      	ldr	r1, [sp, #0]
    19ae:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    19b2:	4622      	mov	r2, r4
    19b4:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    19b8:	784c      	ldrb	r4, [r1, #1]
    19ba:	2c20      	cmp	r4, #32
    19bc:	d016      	beq.n	19ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x664>
    19be:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    19c2:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    19c6:	f8dc 8004 	ldr.w	r8, [ip, #4]
    19ca:	f8dc c008 	ldr.w	ip, [ip, #8]
    19ce:	eba8 0800 	sub.w	r8, r8, r0
    19d2:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    19d6:	ebac 0100 	sub.w	r1, ip, r0
    19da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19de:	4546      	cmp	r6, r8
    19e0:	bf98      	it	ls
    19e2:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    19e6:	d2e4      	bcs.n	19b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62a>
    19e8:	4589      	cmp	r9, r1
    19ea:	d3e2      	bcc.n	19b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62a>
    19ec:	2a20      	cmp	r2, #32
    19ee:	d005      	beq.n	19fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x674>
    19f0:	2120      	movs	r1, #32
    19f2:	2004      	movs	r0, #4
    19f4:	9b00      	ldr	r3, [sp, #0]
    19f6:	f7ff f9e9 	bl	dcc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    19fa:	4604      	mov	r4, r0
    19fc:	42ac      	cmp	r4, r5
    19fe:	d115      	bne.n	1a2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a4>
    1a00:	482f      	ldr	r0, [pc, #188]	; (1ac0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x738>)
    1a02:	2800      	cmp	r0, #0
    1a04:	bf18      	it	ne
    1a06:	f3af 8000 	nopne.w
    1a0a:	f001 fbfb 	bl	3204 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a0e:	4c28      	ldr	r4, [pc, #160]	; (1ab0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x728>)
    1a10:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1a14:	2920      	cmp	r1, #32
    1a16:	d00d      	beq.n	1a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ac>
    1a18:	68e1      	ldr	r1, [r4, #12]
    1a1a:	1c82      	adds	r2, r0, #2
    1a1c:	1a51      	subs	r1, r2, r1
    1a1e:	0209      	lsls	r1, r1, #8
    1a20:	17ca      	asrs	r2, r1, #31
    1a22:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1a26:	1209      	asrs	r1, r1, #8
    1a28:	2900      	cmp	r1, #0
    1a2a:	dd03      	ble.n	1a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ac>
    1a2c:	b005      	add	sp, #20
    1a2e:	2000      	movs	r0, #0
    1a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a34:	2d20      	cmp	r5, #32
    1a36:	d00d      	beq.n	1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>
    1a38:	462a      	mov	r2, r5
    1a3a:	9903      	ldr	r1, [sp, #12]
    1a3c:	f7ff fbe2 	bl	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    1a40:	b358      	cbz	r0, 1a9a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x712>
    1a42:	9801      	ldr	r0, [sp, #4]
    1a44:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1a48:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1a4c:	b005      	add	sp, #20
    1a4e:	2001      	movs	r0, #1
    1a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a54:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1a58:	b118      	cbz	r0, 1a62 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6da>
    1a5a:	f002 f935 	bl	3cc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1a5e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1a62:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1a66:	b150      	cbz	r0, 1a7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f6>
    1a68:	4916      	ldr	r1, [pc, #88]	; (1ac4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73c>)
    1a6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1a6e:	6008      	str	r0, [r1, #0]
    1a70:	2005      	movs	r0, #5
    1a72:	f001 fe15 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a76:	f002 f98f 	bl	3d98 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1a7a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1a7e:	2004      	movs	r0, #4
    1a80:	f001 fe0e 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a84:	f001 fe74 	bl	3770 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1a88:	2020      	movs	r0, #32
    1a8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    1a8e:	480e      	ldr	r0, [pc, #56]	; (1ac8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x740>)
    1a90:	6880      	ldr	r0, [r0, #8]
    1a92:	6007      	str	r7, [r0, #0]
    1a94:	480d      	ldr	r0, [pc, #52]	; (1acc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x744>)
    1a96:	6007      	str	r7, [r0, #0]
    1a98:	e7d8      	b.n	1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>
    1a9a:	462a      	mov	r2, r5
    1a9c:	2120      	movs	r1, #32
    1a9e:	2004      	movs	r0, #4
    1aa0:	9b04      	ldr	r3, [sp, #16]
    1aa2:	f7ff f993 	bl	dcc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    1aa6:	b005      	add	sp, #20
    1aa8:	2000      	movs	r0, #0
    1aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aae:	0000      	.short	0x0000
    1ab0:	20000e3c 	.word	0x20000e3c
    1ab4:	003fffff 	.word	0x003fffff
    1ab8:	20000b3c 	.word	0x20000b3c
    1abc:	20000dbc 	.word	0x20000dbc
    1ac0:	00000000 	.word	0x00000000
    1ac4:	4001f508 	.word	0x4001f508
    1ac8:	2000000c 	.word	0x2000000c
    1acc:	40000508 	.word	0x40000508

00001ad0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1ad0:	4906      	ldr	r1, [pc, #24]	; (1aec <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1ad2:	b510      	push	{r4, lr}
    1ad4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1ad8:	2a20      	cmp	r2, #32
    1ada:	bf1c      	itt	ne
    1adc:	7788      	strbne	r0, [r1, #30]
    1ade:	bd10      	popne	{r4, pc}
    1ae0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    1ae4:	2070      	movs	r0, #112	; 0x70
    1ae6:	f002 faa9 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1aea:	0000      	.short	0x0000
    1aec:	20000e3c 	.word	0x20000e3c

00001af0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1af4:	4e68      	ldr	r6, [pc, #416]	; (1c98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a8>)
    1af6:	4607      	mov	r7, r0
    1af8:	b087      	sub	sp, #28
    1afa:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1afe:	468a      	mov	sl, r1
    1b00:	2820      	cmp	r0, #32
    1b02:	d059      	beq.n	1bb8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc8>
    1b04:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1b08:	f106 040c 	add.w	r4, r6, #12
    1b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1b10:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1b14:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1b18:	2020      	movs	r0, #32
    1b1a:	f88d 0000 	strb.w	r0, [sp]
    1b1e:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1b22:	aa02      	add	r2, sp, #8
    1b24:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1b28:	a901      	add	r1, sp, #4
    1b2a:	f890 5020 	ldrb.w	r5, [r0, #32]
    1b2e:	6930      	ldr	r0, [r6, #16]
    1b30:	9005      	str	r0, [sp, #20]
    1b32:	6830      	ldr	r0, [r6, #0]
    1b34:	4438      	add	r0, r7
    1b36:	f001 fee9 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1b3a:	f99d 0008 	ldrsb.w	r0, [sp, #8]
    1b3e:	2800      	cmp	r0, #0
    1b40:	dd02      	ble.n	1b48 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    1b42:	9801      	ldr	r0, [sp, #4]
    1b44:	1c40      	adds	r0, r0, #1
    1b46:	9001      	str	r0, [sp, #4]
    1b48:	f8d8 0008 	ldr.w	r0, [r8, #8]
    1b4c:	9901      	ldr	r1, [sp, #4]
    1b4e:	2f64      	cmp	r7, #100	; 0x64
    1b50:	4401      	add	r1, r0
    1b52:	d336      	bcc.n	1bc2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1b54:	4b51      	ldr	r3, [pc, #324]	; (1c9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1b56:	2000      	movs	r0, #0
    1b58:	1bdb      	subs	r3, r3, r7
    1b5a:	4180      	sbcs	r0, r0
    1b5c:	d331      	bcc.n	1bc2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1b5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    1b62:	1a08      	subs	r0, r1, r0
    1b64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b68:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1b6c:	d229      	bcs.n	1bc2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1b6e:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    1b72:	6060      	str	r0, [r4, #4]
    1b74:	4848      	ldr	r0, [pc, #288]	; (1c98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a8>)
    1b76:	f884 a00c 	strb.w	sl, [r4, #12]
    1b7a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    1b7e:	46ea      	mov	sl, sp
    1b80:	2d20      	cmp	r5, #32
    1b82:	bf1c      	itt	ne
    1b84:	4946      	ldrne	r1, [pc, #280]	; (1ca0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1b86:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1b8a:	d04a      	beq.n	1c22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x132>
    1b8c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    1b90:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1b94:	6860      	ldr	r0, [r4, #4]
    1b96:	f8d8 2004 	ldr.w	r2, [r8, #4]
    1b9a:	4621      	mov	r1, r4
    1b9c:	1a10      	subs	r0, r2, r0
    1b9e:	0200      	lsls	r0, r0, #8
    1ba0:	17c2      	asrs	r2, r0, #31
    1ba2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1ba6:	f108 0604 	add.w	r6, r8, #4
    1baa:	1200      	asrs	r0, r0, #8
    1bac:	d426      	bmi.n	1bfc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10c>
    1bae:	8970      	ldrh	r0, [r6, #10]
    1bb0:	b388      	cbz	r0, 1c16 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x126>
    1bb2:	8948      	ldrh	r0, [r1, #10]
    1bb4:	b148      	cbz	r0, 1bca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    1bb6:	e034      	b.n	1c22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x132>
    1bb8:	f640 316a 	movw	r1, #2922	; 0xb6a
    1bbc:	2070      	movs	r0, #112	; 0x70
    1bbe:	f002 fa3d 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bc2:	b007      	add	sp, #28
    1bc4:	2001      	movs	r0, #1
    1bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bca:	4620      	mov	r0, r4
    1bcc:	f7ff fe46 	bl	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
    1bd0:	aa04      	add	r2, sp, #16
    1bd2:	a903      	add	r1, sp, #12
    1bd4:	f001 fe9a 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1bd8:	f99d 0010 	ldrsb.w	r0, [sp, #16]
    1bdc:	2800      	cmp	r0, #0
    1bde:	bfcc      	ite	gt
    1be0:	2001      	movgt	r0, #1
    1be2:	2000      	movle	r0, #0
    1be4:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1be8:	9803      	ldr	r0, [sp, #12]
    1bea:	6832      	ldr	r2, [r6, #0]
    1bec:	1a10      	subs	r0, r2, r0
    1bee:	0200      	lsls	r0, r0, #8
    1bf0:	17c2      	asrs	r2, r0, #31
    1bf2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1bf6:	1200      	asrs	r0, r0, #8
    1bf8:	4288      	cmp	r0, r1
    1bfa:	da12      	bge.n	1c22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x132>
    1bfc:	f88a 5000 	strb.w	r5, [sl]
    1c00:	f898 1010 	ldrb.w	r1, [r8, #16]
    1c04:	7b20      	ldrb	r0, [r4, #12]
    1c06:	4281      	cmp	r1, r0
    1c08:	d806      	bhi.n	1c18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    1c0a:	9805      	ldr	r0, [sp, #20]
    1c0c:	6060      	str	r0, [r4, #4]
    1c0e:	b007      	add	sp, #28
    1c10:	2002      	movs	r0, #2
    1c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c16:	e004      	b.n	1c22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x132>
    1c18:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1c1c:	7845      	ldrb	r5, [r0, #1]
    1c1e:	2d20      	cmp	r5, #32
    1c20:	d1b4      	bne.n	1b8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9c>
    1c22:	2005      	movs	r0, #5
    1c24:	f001 fd3c 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c28:	4c1b      	ldr	r4, [pc, #108]	; (1c98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a8>)
    1c2a:	f04f 30ff 	mov.w	r0, #4294967295
    1c2e:	60a0      	str	r0, [r4, #8]
    1c30:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1c34:	f89d 2000 	ldrb.w	r2, [sp]
    1c38:	2120      	movs	r1, #32
    1c3a:	2a20      	cmp	r2, #32
    1c3c:	bf13      	iteet	ne
    1c3e:	2005      	movne	r0, #5
    1c40:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1c44:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1c48:	f7ff f8c0 	blne	dcc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    1c4c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1c50:	4913      	ldr	r1, [pc, #76]	; (1ca0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1c52:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1c56:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1c5a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1c5e:	7048      	strb	r0, [r1, #1]
    1c60:	6820      	ldr	r0, [r4, #0]
    1c62:	4438      	add	r0, r7
    1c64:	6020      	str	r0, [r4, #0]
    1c66:	2001      	movs	r0, #1
    1c68:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1c6c:	7e60      	ldrb	r0, [r4, #25]
    1c6e:	2801      	cmp	r0, #1
    1c70:	d105      	bne.n	1c7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x18e>
    1c72:	6920      	ldr	r0, [r4, #16]
    1c74:	1e40      	subs	r0, r0, #1
    1c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c7a:	f001 fb63 	bl	3344 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1c7e:	f89d 0000 	ldrb.w	r0, [sp]
    1c82:	2820      	cmp	r0, #32
    1c84:	d003      	beq.n	1c8e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x19e>
    1c86:	4807      	ldr	r0, [pc, #28]	; (1ca4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1c88:	7840      	ldrb	r0, [r0, #1]
    1c8a:	f002 faa7 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c8e:	b007      	add	sp, #28
    1c90:	2000      	movs	r0, #0
    1c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c96:	0000      	.short	0x0000
    1c98:	20000e3c 	.word	0x20000e3c
    1c9c:	07a11fff 	.word	0x07a11fff
    1ca0:	20000dbc 	.word	0x20000dbc
    1ca4:	2000000c 	.word	0x2000000c

00001ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1ca8:	4602      	mov	r2, r0
    1caa:	f8df c054 	ldr.w	ip, [pc, #84]	; 1d00 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    1cae:	b510      	push	{r4, lr}
    1cb0:	2300      	movs	r3, #0
    1cb2:	ebbc 0202 	subs.w	r2, ip, r2
    1cb6:	4408      	add	r0, r1
    1cb8:	eb73 0203 	sbcs.w	r2, r3, r3
    1cbc:	d204      	bcs.n	1cc8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    1cbe:	f240 51f1 	movw	r1, #1521	; 0x5f1
    1cc2:	2070      	movs	r0, #112	; 0x70
    1cc4:	f002 f9ba 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cc8:	4a0e      	ldr	r2, [pc, #56]	; (1d04 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1cca:	4291      	cmp	r1, r2
    1ccc:	dd04      	ble.n	1cd8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    1cce:	f240 51f2 	movw	r1, #1522	; 0x5f2
    1cd2:	2070      	movs	r0, #112	; 0x70
    1cd4:	f002 f9b2 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cd8:	4a0b      	ldr	r2, [pc, #44]	; (1d08 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1cda:	4291      	cmp	r1, r2
    1cdc:	da04      	bge.n	1ce8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    1cde:	f240 51f3 	movw	r1, #1523	; 0x5f3
    1ce2:	2070      	movs	r0, #112	; 0x70
    1ce4:	f002 f9aa 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ce8:	4908      	ldr	r1, [pc, #32]	; (1d0c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1cea:	4288      	cmp	r0, r1
    1cec:	bfa8      	it	ge
    1cee:	4908      	ldrge	r1, [pc, #32]	; (1d10 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    1cf0:	da03      	bge.n	1cfa <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    1cf2:	2800      	cmp	r0, #0
    1cf4:	bfb4      	ite	lt
    1cf6:	4905      	ldrlt	r1, [pc, #20]	; (1d0c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1cf8:	bd10      	popge	{r4, pc}
    1cfa:	1840      	adds	r0, r0, r1
    1cfc:	bd10      	pop	{r4, pc}
    1cfe:	0000      	.short	0x0000
    1d00:	1e847fff 	.word	0x1e847fff
    1d04:	07a12000 	.word	0x07a12000
    1d08:	f85ee000 	.word	0xf85ee000
    1d0c:	1e848000 	.word	0x1e848000
    1d10:	e17b8000 	.word	0xe17b8000

00001d14 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1d14:	4a10      	ldr	r2, [pc, #64]	; (1d58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1d16:	1a0b      	subs	r3, r1, r0
    1d18:	f102 0c01 	add.w	ip, r2, #1
    1d1c:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1d20:	bf3c      	itt	cc
    1d22:	4618      	movcc	r0, r3
    1d24:	4770      	bxcc	lr
    1d26:	b510      	push	{r4, lr}
    1d28:	1a44      	subs	r4, r0, r1
    1d2a:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1d2e:	bf3c      	itt	cc
    1d30:	4618      	movcc	r0, r3
    1d32:	bd10      	popcc	{r4, pc}
    1d34:	429a      	cmp	r2, r3
    1d36:	d203      	bcs.n	1d40 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1d38:	1a10      	subs	r0, r2, r0
    1d3a:	4408      	add	r0, r1
    1d3c:	1c40      	adds	r0, r0, #1
    1d3e:	bd10      	pop	{r4, pc}
    1d40:	42a2      	cmp	r2, r4
    1d42:	d204      	bcs.n	1d4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d44:	1a51      	subs	r1, r2, r1
    1d46:	4408      	add	r0, r1
    1d48:	1c40      	adds	r0, r0, #1
    1d4a:	4240      	negs	r0, r0
    1d4c:	bd10      	pop	{r4, pc}
    1d4e:	f640 21f3 	movw	r1, #2803	; 0xaf3
    1d52:	2070      	movs	r0, #112	; 0x70
    1d54:	f002 f972 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d58:	1e847fff 	.word	0x1e847fff

00001d5c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1d5c:	4907      	ldr	r1, [pc, #28]	; (1d7c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    1d5e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1d62:	4282      	cmp	r2, r0
    1d64:	bf04      	itt	eq
    1d66:	6848      	ldreq	r0, [r1, #4]
    1d68:	4770      	bxeq	lr
    1d6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1d6e:	4904      	ldr	r1, [pc, #16]	; (1d80 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1d70:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1d74:	1d00      	adds	r0, r0, #4
    1d76:	f7ff bd71 	b.w	185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>
    1d7a:	0000      	.short	0x0000
    1d7c:	20000e3c 	.word	0x20000e3c
    1d80:	20000b3c 	.word	0x20000b3c

00001d84 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1d84:	490b      	ldr	r1, [pc, #44]	; (1db4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    1d86:	b510      	push	{r4, lr}
    1d88:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1d8c:	2820      	cmp	r0, #32
    1d8e:	d00c      	beq.n	1daa <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    1d90:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1d94:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1d98:	4a07      	ldr	r2, [pc, #28]	; (1db8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    1d9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1d9e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    1da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1da6:	2104      	movs	r1, #4
    1da8:	4710      	bx	r2
    1daa:	f640 01a5 	movw	r1, #2213	; 0x8a5
    1dae:	2070      	movs	r0, #112	; 0x70
    1db0:	f002 f944 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1db4:	20000e3c 	.word	0x20000e3c
    1db8:	20000b3c 	.word	0x20000b3c

00001dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1dbc:	b570      	push	{r4, r5, r6, lr}
    1dbe:	4e60      	ldr	r6, [pc, #384]	; (1f40 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>)
    1dc0:	4960      	ldr	r1, [pc, #384]	; (1f44 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>)
    1dc2:	2501      	movs	r5, #1
    1dc4:	f506 7440 	add.w	r4, r6, #768	; 0x300
    1dc8:	2808      	cmp	r0, #8
    1dca:	d27c      	bcs.n	1ec6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    1dcc:	e8df f000 	tbb	[pc, r0]
    1dd0:	9a885704 	.word	0x9a885704
    1dd4:	a49f3eb2 	.word	0xa49f3eb2
    1dd8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1ddc:	b918      	cbnz	r0, 1de6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1dde:	f001 ff8f 	bl	3d00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1de2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    1de6:	8ae0      	ldrh	r0, [r4, #22]
    1de8:	b110      	cbz	r0, 1df0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1dea:	f002 f8c3 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1dee:	b188      	cbz	r0, 1e14 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1df0:	f7ff fc9e 	bl	1730 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a8>
    1df4:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    1df8:	68a1      	ldr	r1, [r4, #8]
    1dfa:	f1b1 3fff 	cmp.w	r1, #4294967295
    1dfe:	d005      	beq.n	1e0c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1e00:	2301      	movs	r3, #1
    1e02:	2203      	movs	r2, #3
    1e04:	2005      	movs	r0, #5
    1e06:	f001 fb83 	bl	3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1e0a:	b140      	cbz	r0, 1e1e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1e0c:	7e60      	ldrb	r0, [r4, #25]
    1e0e:	2801      	cmp	r0, #1
    1e10:	d110      	bne.n	1e34 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1e12:	e009      	b.n	1e28 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1e14:	f640 015d 	movw	r1, #2141	; 0x85d
    1e18:	2070      	movs	r0, #112	; 0x70
    1e1a:	f002 f90f 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e1e:	f640 0162 	movw	r1, #2146	; 0x862
    1e22:	2070      	movs	r0, #112	; 0x70
    1e24:	f002 f90a 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e28:	6920      	ldr	r0, [r4, #16]
    1e2a:	1e40      	subs	r0, r0, #1
    1e2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e30:	f001 fa88 	bl	3344 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1e34:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1e38:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1e3c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1e40:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e48:	2101      	movs	r1, #1
    1e4a:	4710      	bx	r2
    1e4c:	f7ff fc70 	bl	1730 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a8>
    1e50:	f04f 30ff 	mov.w	r0, #4294967295
    1e54:	60a0      	str	r0, [r4, #8]
    1e56:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1e5a:	b158      	cbz	r0, 1e74 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb8>
    1e5c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1e60:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1e64:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1e68:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e70:	2106      	movs	r1, #6
    1e72:	4710      	bx	r2
    1e74:	f640 0172 	movw	r1, #2162	; 0x872
    1e78:	2070      	movs	r0, #112	; 0x70
    1e7a:	f002 f8df 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e7e:	f7ff fc57 	bl	1730 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a8>
    1e82:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    1e86:	f002 f875 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e8a:	b118      	cbz	r0, 1e94 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1e8c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1e90:	b128      	cbz	r0, 1e9e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe2>
    1e92:	e008      	b.n	1ea6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xea>
    1e94:	f640 0181 	movw	r1, #2177	; 0x881
    1e98:	2070      	movs	r0, #112	; 0x70
    1e9a:	f002 f8cf 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e9e:	f001 ff2f 	bl	3d00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1ea2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    1ea6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1eaa:	b158      	cbz	r0, 1ec4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x108>
    1eac:	4926      	ldr	r1, [pc, #152]	; (1f48 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x18c>)
    1eae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1eb2:	6008      	str	r0, [r1, #0]
    1eb4:	2005      	movs	r0, #5
    1eb6:	f001 fbf3 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1eba:	f001 ff6d 	bl	3d98 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1ebe:	2000      	movs	r0, #0
    1ec0:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1ec4:	e000      	b.n	1ec8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1ec6:	e035      	b.n	1f34 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x178>
    1ec8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1ecc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1ed0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1ed4:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1edc:	2100      	movs	r1, #0
    1ede:	4710      	bx	r2
    1ee0:	f001 fc90 	bl	3804 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1ee4:	8ae0      	ldrh	r0, [r4, #22]
    1ee6:	b110      	cbz	r0, 1eee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x132>
    1ee8:	f002 f844 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1eec:	b128      	cbz	r0, 1efa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13e>
    1eee:	4817      	ldr	r0, [pc, #92]	; (1f4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x190>)
    1ef0:	7800      	ldrb	r0, [r0, #0]
    1ef2:	2803      	cmp	r0, #3
    1ef4:	bf08      	it	eq
    1ef6:	7765      	strbeq	r5, [r4, #29]
    1ef8:	bd70      	pop	{r4, r5, r6, pc}
    1efa:	f640 018b 	movw	r1, #2187	; 0x88b
    1efe:	2070      	movs	r0, #112	; 0x70
    1f00:	f002 f89c 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f04:	4812      	ldr	r0, [pc, #72]	; (1f50 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    1f06:	6005      	str	r5, [r0, #0]
    1f08:	6888      	ldr	r0, [r1, #8]
    1f0a:	6005      	str	r5, [r0, #0]
    1f0c:	bd70      	pop	{r4, r5, r6, pc}
    1f0e:	7808      	ldrb	r0, [r1, #0]
    1f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f14:	f002 b962 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1f18:	f7ff fc0a 	bl	1730 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a8>
    1f1c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f20:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1f24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1f28:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f30:	2105      	movs	r1, #5
    1f32:	4710      	bx	r2
    1f34:	f640 019d 	movw	r1, #2205	; 0x89d
    1f38:	2070      	movs	r0, #112	; 0x70
    1f3a:	f002 f87f 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f3e:	0000      	.short	0x0000
    1f40:	20000b3c 	.word	0x20000b3c
    1f44:	2000000c 	.word	0x2000000c
    1f48:	4001f508 	.word	0x4001f508
    1f4c:	2000000e 	.word	0x2000000e
    1f50:	40000508 	.word	0x40000508

00001f54 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1f54:	4803      	ldr	r0, [pc, #12]	; (1f64 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1f56:	b510      	push	{r4, lr}
    1f58:	7840      	ldrb	r0, [r0, #1]
    1f5a:	f00a fb84 	bl	c666 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1f5e:	b280      	uxth	r0, r0
    1f60:	bd10      	pop	{r4, pc}
    1f62:	0000      	.short	0x0000
    1f64:	2000000e 	.word	0x2000000e

00001f68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1f68:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f6c:	48fe      	ldr	r0, [pc, #1016]	; (2368 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x368>)
    1f6e:	b093      	sub	sp, #76	; 0x4c
    1f70:	4688      	mov	r8, r1
    1f72:	6800      	ldr	r0, [r0, #0]
    1f74:	4dfd      	ldr	r5, [pc, #1012]	; (236c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x36c>)
    1f76:	05c0      	lsls	r0, r0, #23
    1f78:	0dc0      	lsrs	r0, r0, #23
    1f7a:	d00e      	beq.n	1f9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1f7c:	3810      	subs	r0, #16
    1f7e:	b240      	sxtb	r0, r0
    1f80:	2800      	cmp	r0, #0
    1f82:	bfb8      	it	lt
    1f84:	f000 000f 	andlt.w	r0, r0, #15
    1f88:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1f8c:	bfac      	ite	ge
    1f8e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1f92:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1f96:	0940      	lsrs	r0, r0, #5
    1f98:	d00d      	beq.n	1fb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1f9a:	f898 0000 	ldrb.w	r0, [r8]
    1f9e:	f04f 0b00 	mov.w	fp, #0
    1fa2:	2800      	cmp	r0, #0
    1fa4:	bf18      	it	ne
    1fa6:	2801      	cmpne	r0, #1
    1fa8:	d018      	beq.n	1fdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1faa:	f240 714a 	movw	r1, #1866	; 0x74a
    1fae:	f04f 0070 	mov.w	r0, #112	; 0x70
    1fb2:	f002 f843 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fb6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1fba:	f04f 0b01 	mov.w	fp, #1
    1fbe:	2820      	cmp	r0, #32
    1fc0:	d007      	beq.n	1fd2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1fc2:	f898 0000 	ldrb.w	r0, [r8]
    1fc6:	b148      	cbz	r0, 1fdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1fc8:	f240 7146 	movw	r1, #1862	; 0x746
    1fcc:	2070      	movs	r0, #112	; 0x70
    1fce:	f002 f835 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fd2:	f240 7143 	movw	r1, #1859	; 0x743
    1fd6:	2070      	movs	r0, #112	; 0x70
    1fd8:	f002 f830 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fdc:	4ce4      	ldr	r4, [pc, #912]	; (2370 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x370>)
    1fde:	b124      	cbz	r4, 1fea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1fe0:	2100      	movs	r1, #0
    1fe2:	f240 704d 	movw	r0, #1869	; 0x74d
    1fe6:	f3af 8000 	nop.w
    1fea:	9813      	ldr	r0, [sp, #76]	; 0x4c
    1fec:	49e1      	ldr	r1, [pc, #900]	; (2374 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x374>)
    1fee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1ff2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1ff6:	f04f 0901 	mov.w	r9, #1
    1ffa:	9001      	str	r0, [sp, #4]
    1ffc:	b124      	cbz	r4, 2008 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8>
    1ffe:	2100      	movs	r1, #0
    2000:	f240 7055 	movw	r0, #1877	; 0x755
    2004:	f3af 8000 	nop.w
    2008:	f1b9 0f00 	cmp.w	r9, #0
    200c:	d00a      	beq.n	2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    200e:	bf00      	nop
    2010:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2014:	f04f 0a00 	mov.w	sl, #0
    2018:	f885 a02b 	strb.w	sl, [r5, #43]	; 0x2b
    201c:	f1bb 0f00 	cmp.w	fp, #0
    2020:	d007      	beq.n	2032 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x32>
    2022:	e02e      	b.n	2082 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x82>
    2024:	48d4      	ldr	r0, [pc, #848]	; (2378 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x378>)
    2026:	2800      	cmp	r0, #0
    2028:	bf18      	it	ne
    202a:	f3af 8000 	nopne.w
    202e:	b662      	cpsie	i
    2030:	e7ee      	b.n	2010 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x10>
    2032:	4637      	mov	r7, r6
    2034:	2001      	movs	r0, #1
    2036:	ea20 0607 	bic.w	r6, r0, r7
    203a:	48d0      	ldr	r0, [pc, #832]	; (237c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x37c>)
    203c:	2240      	movs	r2, #64	; 0x40
    203e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2042:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2046:	f00a fc7c 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    204a:	b124      	cbz	r4, 2056 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x56>
    204c:	2100      	movs	r1, #0
    204e:	f240 50b5 	movw	r0, #1461	; 0x5b5
    2052:	f3af 8000 	nop.w
    2056:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    205a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    205e:	6a09      	ldr	r1, [r1, #32]
    2060:	6201      	str	r1, [r0, #32]
    2062:	b124      	cbz	r4, 206e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6e>
    2064:	2100      	movs	r1, #0
    2066:	f240 50b9 	movw	r0, #1465	; 0x5b9
    206a:	f3af 8000 	nop.w
    206e:	b124      	cbz	r4, 207a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7a>
    2070:	2100      	movs	r1, #0
    2072:	f240 705f 	movw	r0, #1887	; 0x75f
    2076:	f3af 8000 	nop.w
    207a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    207e:	2800      	cmp	r0, #0
    2080:	d1bc      	bne.n	1ffc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    2082:	b124      	cbz	r4, 208e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8e>
    2084:	2100      	movs	r1, #0
    2086:	f240 7069 	movw	r0, #1897	; 0x769
    208a:	f3af 8000 	nop.w
    208e:	f001 f8b9 	bl	3204 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2092:	4607      	mov	r7, r0
    2094:	f898 0000 	ldrb.w	r0, [r8]
    2098:	f88d 0016 	strb.w	r0, [sp, #22]
    209c:	f898 000b 	ldrb.w	r0, [r8, #11]
    20a0:	f88d 0015 	strb.w	r0, [sp, #21]
    20a4:	f898 100a 	ldrb.w	r1, [r8, #10]
    20a8:	f88d 1014 	strb.w	r1, [sp, #20]
    20ac:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    20b0:	f8ad 1012 	strh.w	r1, [sp, #18]
    20b4:	f898 2000 	ldrb.w	r2, [r8]
    20b8:	9000      	str	r0, [sp, #0]
    20ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
    20be:	f10d 0908 	add.w	r9, sp, #8
    20c2:	b19a      	cbz	r2, 20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
    20c4:	2200      	movs	r2, #0
    20c6:	4648      	mov	r0, r9
    20c8:	f7fe fe1e 	bl	d08 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    20cc:	9707      	str	r7, [sp, #28]
    20ce:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    20d2:	aa0f      	add	r2, sp, #60	; 0x3c
    20d4:	a90e      	add	r1, sp, #56	; 0x38
    20d6:	f001 fc19 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    20da:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    20de:	2820      	cmp	r0, #32
    20e0:	d00a      	beq.n	20f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf8>
    20e2:	6928      	ldr	r0, [r5, #16]
    20e4:	1d40      	adds	r0, r0, #5
    20e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    20ea:	e01e      	b.n	212a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x12a>
    20ec:	4648      	mov	r0, r9
    20ee:	f8d8 200c 	ldr.w	r2, [r8, #12]
    20f2:	f7fe fe09 	bl	d08 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    20f6:	e04b      	b.n	2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    20f8:	9807      	ldr	r0, [sp, #28]
    20fa:	3009      	adds	r0, #9
    20fc:	9000      	str	r0, [sp, #0]
    20fe:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2102:	b128      	cbz	r0, 2110 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x110>
    2104:	f001 ff36 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2108:	b910      	cbnz	r0, 2110 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x110>
    210a:	9800      	ldr	r0, [sp, #0]
    210c:	3032      	adds	r0, #50	; 0x32
    210e:	9000      	str	r0, [sp, #0]
    2110:	489b      	ldr	r0, [pc, #620]	; (2380 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x380>)
    2112:	7841      	ldrb	r1, [r0, #1]
    2114:	980e      	ldr	r0, [sp, #56]	; 0x38
    2116:	4281      	cmp	r1, r0
    2118:	bf98      	it	ls
    211a:	9800      	ldrls	r0, [sp, #0]
    211c:	d903      	bls.n	2126 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x126>
    211e:	1a09      	subs	r1, r1, r0
    2120:	9800      	ldr	r0, [sp, #0]
    2122:	4408      	add	r0, r1
    2124:	9000      	str	r0, [sp, #0]
    2126:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    212a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    212e:	1a89      	subs	r1, r1, r2
    2130:	9002      	str	r0, [sp, #8]
    2132:	4408      	add	r0, r1
    2134:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2138:	9003      	str	r0, [sp, #12]
    213a:	4631      	mov	r1, r6
    213c:	4648      	mov	r0, r9
    213e:	f7fe fe81 	bl	e44 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x168>
    2142:	f898 000b 	ldrb.w	r0, [r8, #11]
    2146:	9000      	str	r0, [sp, #0]
    2148:	46b9      	mov	r9, r7
    214a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    214e:	a80e      	add	r0, sp, #56	; 0x38
    2150:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2154:	f8d8 200c 	ldr.w	r2, [r8, #12]
    2158:	f7fe fdd6 	bl	d08 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    215c:	9802      	ldr	r0, [sp, #8]
    215e:	9a03      	ldr	r2, [sp, #12]
    2160:	eba0 0009 	sub.w	r0, r0, r9
    2164:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2168:	eba2 0209 	sub.w	r2, r2, r9
    216c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    216e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2172:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2176:	d201      	bcs.n	217c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x17c>
    2178:	4291      	cmp	r1, r2
    217a:	d209      	bcs.n	2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    217c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2180:	1a89      	subs	r1, r1, r2
    2182:	1878      	adds	r0, r7, r1
    2184:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    2188:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    218c:	e9cd 2002 	strd	r2, r0, [sp, #8]
    2190:	b124      	cbz	r4, 219c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x19c>
    2192:	2100      	movs	r1, #0
    2194:	f44f 60ee 	mov.w	r0, #1904	; 0x770
    2198:	f3af 8000 	nop.w
    219c:	4a77      	ldr	r2, [pc, #476]	; (237c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x37c>)
    219e:	4639      	mov	r1, r7
    21a0:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    21a4:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    21a8:	a802      	add	r0, sp, #8
    21aa:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    21ae:	2a01      	cmp	r2, #1
    21b0:	bf18      	it	ne
    21b2:	2a02      	cmpne	r2, #2
    21b4:	d13c      	bne.n	2230 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x230>
    21b6:	9a02      	ldr	r2, [sp, #8]
    21b8:	f8dd c00c 	ldr.w	ip, [sp, #12]
    21bc:	eba2 0201 	sub.w	r2, r2, r1
    21c0:	4b70      	ldr	r3, [pc, #448]	; (2384 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x384>)
    21c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    21c6:	ebac 0101 	sub.w	r1, ip, r1
    21ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21ce:	2a02      	cmp	r2, #2
    21d0:	d368      	bcc.n	22a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a4>
    21d2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    21d6:	d265      	bcs.n	22a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a4>
    21d8:	428b      	cmp	r3, r1
    21da:	d363      	bcc.n	22a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a4>
    21dc:	f04f 0a01 	mov.w	sl, #1
    21e0:	ab0f      	add	r3, sp, #60	; 0x3c
    21e2:	aa0e      	add	r2, sp, #56	; 0x38
    21e4:	4631      	mov	r1, r6
    21e6:	f7fe ff77 	bl	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    21ea:	b3e8      	cbz	r0, 2268 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x268>
    21ec:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    21f0:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    21f4:	4633      	mov	r3, r6
    21f6:	428a      	cmp	r2, r1
    21f8:	d060      	beq.n	22bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2bc>
    21fa:	2005      	movs	r0, #5
    21fc:	f7fe fde6 	bl	dcc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    2200:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    2204:	7048      	strb	r0, [r1, #1]
    2206:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    220a:	2820      	cmp	r0, #32
    220c:	bf03      	ittte	eq
    220e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2212:	f880 9020 	strbeq.w	r9, [r0, #32]
    2216:	f880 a023 	strbeq.w	sl, [r0, #35]	; 0x23
    221a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    221e:	bf18      	it	ne
    2220:	f880 9001 	strbne.w	r9, [r0, #1]
    2224:	4632      	mov	r2, r6
    2226:	4649      	mov	r1, r9
    2228:	f05f 0003 	movs.w	r0, #3
    222c:	f7ff fb54 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    2230:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2234:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    2238:	b124      	cbz	r4, 2244 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x244>
    223a:	2100      	movs	r1, #0
    223c:	f240 7077 	movw	r0, #1911	; 0x777
    2240:	f3af 8000 	nop.w
    2244:	4850      	ldr	r0, [pc, #320]	; (2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>)
    2246:	2800      	cmp	r0, #0
    2248:	bf18      	it	ne
    224a:	f3af 8000 	nopne.w
    224e:	f3ef 8910 	mrs	r9, PRIMASK
    2252:	b672      	cpsid	i
    2254:	b124      	cbz	r4, 2260 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x260>
    2256:	2100      	movs	r1, #0
    2258:	f240 707d 	movw	r0, #1917	; 0x77d
    225c:	f3af 8000 	nop.w
    2260:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2264:	2800      	cmp	r0, #0
    2266:	e000      	b.n	226a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x26a>
    2268:	e024      	b.n	22b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b4>
    226a:	f47f aec7 	bne.w	1ffc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    226e:	b124      	cbz	r4, 227a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x27a>
    2270:	2100      	movs	r1, #0
    2272:	f240 7085 	movw	r0, #1925	; 0x785
    2276:	f3af 8000 	nop.w
    227a:	f10d 0e04 	add.w	lr, sp, #4
    227e:	f1ba 0f00 	cmp.w	sl, #0
    2282:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    2286:	f100 0004 	add.w	r0, r0, #4
    228a:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    228e:	d041      	beq.n	2314 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x314>
    2290:	b124      	cbz	r4, 229c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x29c>
    2292:	2100      	movs	r1, #0
    2294:	f240 7092 	movw	r0, #1938	; 0x792
    2298:	f3af 8000 	nop.w
    229c:	f1bb 0f00 	cmp.w	fp, #0
    22a0:	d12b      	bne.n	22fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2fa>
    22a2:	e015      	b.n	22d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2d0>
    22a4:	4632      	mov	r2, r6
    22a6:	4649      	mov	r1, r9
    22a8:	2004      	movs	r0, #4
    22aa:	f7ff fb15 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    22ae:	f04f 0a01 	mov.w	sl, #1
    22b2:	e7bd      	b.n	2230 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x230>
    22b4:	4632      	mov	r2, r6
    22b6:	4649      	mov	r1, r9
    22b8:	2004      	movs	r0, #4
    22ba:	e7b7      	b.n	222c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x22c>
    22bc:	2920      	cmp	r1, #32
    22be:	bf19      	ittee	ne
    22c0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    22c4:	7840      	ldrbne	r0, [r0, #1]
    22c6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    22ca:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    22ce:	e797      	b.n	2200 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x200>
    22d0:	b19f      	cbz	r7, 22fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2fa>
    22d2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    22d6:	2820      	cmp	r0, #32
    22d8:	d10f      	bne.n	22fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2fa>
    22da:	b124      	cbz	r4, 22e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e6>
    22dc:	2100      	movs	r1, #0
    22de:	f240 7097 	movw	r0, #1943	; 0x797
    22e2:	f3af 8000 	nop.w
    22e6:	4631      	mov	r1, r6
    22e8:	2002      	movs	r0, #2
    22ea:	f7ff fb25 	bl	1938 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b0>
    22ee:	b920      	cbnz	r0, 22fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2fa>
    22f0:	f898 0000 	ldrb.w	r0, [r8]
    22f4:	b3b8      	cbz	r0, 2366 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x366>
    22f6:	2801      	cmp	r0, #1
    22f8:	d05d      	beq.n	23b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3b6>
    22fa:	b124      	cbz	r4, 2306 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x306>
    22fc:	2100      	movs	r1, #0
    22fe:	f240 70b4 	movw	r0, #1972	; 0x7b4
    2302:	f3af 8000 	nop.w
    2306:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    230a:	2001      	movs	r0, #1
    230c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2310:	f04f 0a01 	mov.w	sl, #1
    2314:	b124      	cbz	r4, 2320 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x320>
    2316:	2100      	movs	r1, #0
    2318:	f240 70bd 	movw	r0, #1981	; 0x7bd
    231c:	f3af 8000 	nop.w
    2320:	f1b9 0f00 	cmp.w	r9, #0
    2324:	d050      	beq.n	23c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3c8>
    2326:	b124      	cbz	r4, 2332 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x332>
    2328:	2100      	movs	r1, #0
    232a:	f240 70c1 	movw	r0, #1985	; 0x7c1
    232e:	f3af 8000 	nop.w
    2332:	f1ba 0f00 	cmp.w	sl, #0
    2336:	d011      	beq.n	235c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x35c>
    2338:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    233c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2340:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2344:	2820      	cmp	r0, #32
    2346:	d009      	beq.n	235c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x35c>
    2348:	b124      	cbz	r4, 2354 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x354>
    234a:	2100      	movs	r1, #0
    234c:	f44f 60f9 	mov.w	r0, #1992	; 0x7c8
    2350:	f3af 8000 	nop.w
    2354:	480d      	ldr	r0, [pc, #52]	; (238c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x38c>)
    2356:	7840      	ldrb	r0, [r0, #1]
    2358:	f001 ff40 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    235c:	b1d4      	cbz	r4, 2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>
    235e:	2100      	movs	r1, #0
    2360:	f240 70cd 	movw	r0, #1997	; 0x7cd
    2364:	e014      	b.n	2390 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x390>
    2366:	e019      	b.n	239c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x39c>
    2368:	e000ed04 	.word	0xe000ed04
    236c:	20000e3c 	.word	0x20000e3c
    2370:	00000000 	.word	0x00000000
    2374:	20000b3c 	.word	0x20000b3c
    2378:	00000000 	.word	0x00000000
    237c:	20000dbc 	.word	0x20000dbc
    2380:	2000000e 	.word	0x2000000e
    2384:	003fffff 	.word	0x003fffff
    2388:	00000000 	.word	0x00000000
    238c:	2000000c 	.word	0x2000000c
    2390:	f3af 8000 	nop.w
    2394:	b015      	add	sp, #84	; 0x54
    2396:	4650      	mov	r0, sl
    2398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    239c:	b124      	cbz	r4, 23a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a8>
    239e:	2100      	movs	r1, #0
    23a0:	f240 709f 	movw	r0, #1951	; 0x79f
    23a4:	f3af 8000 	nop.w
    23a8:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    23ac:	2004      	movs	r0, #4
    23ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
    23b0:	f7ff fa92 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    23b4:	e7ac      	b.n	2310 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x310>
    23b6:	2c00      	cmp	r4, #0
    23b8:	f43f ae20 	beq.w	1ffc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    23bc:	2100      	movs	r1, #0
    23be:	f240 70aa 	movw	r0, #1962	; 0x7aa
    23c2:	f3af 8000 	nop.w
    23c6:	e619      	b.n	1ffc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    23c8:	4803      	ldr	r0, [pc, #12]	; (23d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3d8>)
    23ca:	2800      	cmp	r0, #0
    23cc:	bf18      	it	ne
    23ce:	f3af 8000 	nopne.w
    23d2:	b662      	cpsie	i
    23d4:	e7a7      	b.n	2326 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x326>
    23d6:	0000      	.short	0x0000
    23d8:	00000000 	.word	0x00000000

000023dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    23dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23e0:	4605      	mov	r5, r0
    23e2:	48e4      	ldr	r0, [pc, #912]	; (2774 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x398>)
    23e4:	b08d      	sub	sp, #52	; 0x34
    23e6:	6800      	ldr	r0, [r0, #0]
    23e8:	05c0      	lsls	r0, r0, #23
    23ea:	0dc0      	lsrs	r0, r0, #23
    23ec:	d011      	beq.n	2412 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    23ee:	3810      	subs	r0, #16
    23f0:	b240      	sxtb	r0, r0
    23f2:	2800      	cmp	r0, #0
    23f4:	bfb8      	it	lt
    23f6:	f000 000f 	andlt.w	r0, r0, #15
    23fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    23fe:	bfac      	ite	ge
    2400:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2404:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2408:	0940      	lsrs	r0, r0, #5
    240a:	bf08      	it	eq
    240c:	f04f 0b01 	moveq.w	fp, #1
    2410:	d001      	beq.n	2416 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    2412:	f04f 0b00 	mov.w	fp, #0
    2416:	7828      	ldrb	r0, [r5, #0]
    2418:	2800      	cmp	r0, #0
    241a:	f04f 0000 	mov.w	r0, #0
    241e:	bf1c      	itt	ne
    2420:	b00d      	addne	sp, #52	; 0x34
    2422:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2426:	f8df 8350 	ldr.w	r8, [pc, #848]	; 2778 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x39c>
    242a:	4ed4      	ldr	r6, [pc, #848]	; (277c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a0>)
    242c:	f04f 0900 	mov.w	r9, #0
    2430:	f8cd 0018 	str.w	r0, [sp, #24]
    2434:	f1b8 0f00 	cmp.w	r8, #0
    2438:	d004      	beq.n	2444 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    243a:	2100      	movs	r1, #0
    243c:	f44f 60c8 	mov.w	r0, #1600	; 0x640
    2440:	f3af 8000 	nop.w
    2444:	f896 702e 	ldrb.w	r7, [r6, #46]	; 0x2e
    2448:	f886 902b 	strb.w	r9, [r6, #43]	; 0x2b
    244c:	f04f 0a00 	mov.w	sl, #0
    2450:	f1b8 0f00 	cmp.w	r8, #0
    2454:	d004      	beq.n	2460 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    2456:	2100      	movs	r1, #0
    2458:	f240 6045 	movw	r0, #1605	; 0x645
    245c:	f3af 8000 	nop.w
    2460:	f1bb 0f00 	cmp.w	fp, #0
    2464:	d121      	bne.n	24aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    2466:	463c      	mov	r4, r7
    2468:	2001      	movs	r0, #1
    246a:	ea20 0704 	bic.w	r7, r0, r4
    246e:	48c4      	ldr	r0, [pc, #784]	; (2780 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a4>)
    2470:	2240      	movs	r2, #64	; 0x40
    2472:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    2476:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    247a:	f00a fa62 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    247e:	f1b8 0f00 	cmp.w	r8, #0
    2482:	d004      	beq.n	248e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    2484:	2100      	movs	r1, #0
    2486:	f240 50b5 	movw	r0, #1461	; 0x5b5
    248a:	f3af 8000 	nop.w
    248e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    2492:	eb06 0087 	add.w	r0, r6, r7, lsl #2
    2496:	6a09      	ldr	r1, [r1, #32]
    2498:	6201      	str	r1, [r0, #32]
    249a:	f1b8 0f00 	cmp.w	r8, #0
    249e:	d004      	beq.n	24aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    24a0:	2100      	movs	r1, #0
    24a2:	f240 50b9 	movw	r0, #1465	; 0x5b9
    24a6:	f3af 8000 	nop.w
    24aa:	f1b8 0f00 	cmp.w	r8, #0
    24ae:	d004      	beq.n	24ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    24b0:	2100      	movs	r1, #0
    24b2:	f240 604d 	movw	r0, #1613	; 0x64d
    24b6:	f3af 8000 	nop.w
    24ba:	f000 fea3 	bl	3204 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    24be:	4604      	mov	r4, r0
    24c0:	a802      	add	r0, sp, #8
    24c2:	9001      	str	r0, [sp, #4]
    24c4:	7828      	ldrb	r0, [r5, #0]
    24c6:	f88d 0016 	strb.w	r0, [sp, #22]
    24ca:	7ae8      	ldrb	r0, [r5, #11]
    24cc:	f88d 0015 	strb.w	r0, [sp, #21]
    24d0:	7aa9      	ldrb	r1, [r5, #10]
    24d2:	f88d 1014 	strb.w	r1, [sp, #20]
    24d6:	8929      	ldrh	r1, [r5, #8]
    24d8:	f8ad 1012 	strh.w	r1, [sp, #18]
    24dc:	782a      	ldrb	r2, [r5, #0]
    24de:	9000      	str	r0, [sp, #0]
    24e0:	686b      	ldr	r3, [r5, #4]
    24e2:	b19a      	cbz	r2, 250c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x130>
    24e4:	2200      	movs	r2, #0
    24e6:	9801      	ldr	r0, [sp, #4]
    24e8:	f7fe fc0e 	bl	d08 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    24ec:	9400      	str	r4, [sp, #0]
    24ee:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    24f2:	aa08      	add	r2, sp, #32
    24f4:	a907      	add	r1, sp, #28
    24f6:	f001 fa09 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    24fa:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    24fe:	2820      	cmp	r0, #32
    2500:	d009      	beq.n	2516 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x13a>
    2502:	6930      	ldr	r0, [r6, #16]
    2504:	1d40      	adds	r0, r0, #5
    2506:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    250a:	e01d      	b.n	2548 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16c>
    250c:	68ea      	ldr	r2, [r5, #12]
    250e:	9801      	ldr	r0, [sp, #4]
    2510:	f7fe fbfa 	bl	d08 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    2514:	e046      	b.n	25a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2516:	9800      	ldr	r0, [sp, #0]
    2518:	3009      	adds	r0, #9
    251a:	9000      	str	r0, [sp, #0]
    251c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2520:	b128      	cbz	r0, 252e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x152>
    2522:	f001 fd27 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2526:	b910      	cbnz	r0, 252e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x152>
    2528:	9800      	ldr	r0, [sp, #0]
    252a:	3032      	adds	r0, #50	; 0x32
    252c:	9000      	str	r0, [sp, #0]
    252e:	4895      	ldr	r0, [pc, #596]	; (2784 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a8>)
    2530:	9907      	ldr	r1, [sp, #28]
    2532:	7840      	ldrb	r0, [r0, #1]
    2534:	4288      	cmp	r0, r1
    2536:	bf98      	it	ls
    2538:	9800      	ldrls	r0, [sp, #0]
    253a:	d903      	bls.n	2544 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    253c:	1a41      	subs	r1, r0, r1
    253e:	9800      	ldr	r0, [sp, #0]
    2540:	4408      	add	r0, r1
    2542:	9000      	str	r0, [sp, #0]
    2544:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2548:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    254c:	1a89      	subs	r1, r1, r2
    254e:	9002      	str	r0, [sp, #8]
    2550:	4408      	add	r0, r1
    2552:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2556:	9003      	str	r0, [sp, #12]
    2558:	4639      	mov	r1, r7
    255a:	9801      	ldr	r0, [sp, #4]
    255c:	f7fe fc72 	bl	e44 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x168>
    2560:	9401      	str	r4, [sp, #4]
    2562:	7ae8      	ldrb	r0, [r5, #11]
    2564:	9000      	str	r0, [sp, #0]
    2566:	8929      	ldrh	r1, [r5, #8]
    2568:	a808      	add	r0, sp, #32
    256a:	686b      	ldr	r3, [r5, #4]
    256c:	68ea      	ldr	r2, [r5, #12]
    256e:	f7fe fbcb 	bl	d08 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    2572:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    2576:	9a03      	ldr	r2, [sp, #12]
    2578:	1ac0      	subs	r0, r0, r3
    257a:	1ad2      	subs	r2, r2, r3
    257c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2580:	9909      	ldr	r1, [sp, #36]	; 0x24
    2582:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2586:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    258a:	d201      	bcs.n	2590 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    258c:	4291      	cmp	r1, r2
    258e:	d209      	bcs.n	25a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2590:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2594:	1a89      	subs	r1, r1, r2
    2596:	1860      	adds	r0, r4, r1
    2598:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    259c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25a0:	e9cd 2002 	strd	r2, r0, [sp, #8]
    25a4:	f1b8 0f00 	cmp.w	r8, #0
    25a8:	d004      	beq.n	25b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d8>
    25aa:	2100      	movs	r1, #0
    25ac:	f240 6053 	movw	r0, #1619	; 0x653
    25b0:	f3af 8000 	nop.w
    25b4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    25b8:	2820      	cmp	r0, #32
    25ba:	d014      	beq.n	25e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20a>
    25bc:	6930      	ldr	r0, [r6, #16]
    25be:	9902      	ldr	r1, [sp, #8]
    25c0:	1a09      	subs	r1, r1, r0
    25c2:	0209      	lsls	r1, r1, #8
    25c4:	17ca      	asrs	r2, r1, #31
    25c6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    25ca:	1209      	asrs	r1, r1, #8
    25cc:	d50b      	bpl.n	25e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20a>
    25ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    25d2:	1a89      	subs	r1, r1, r2
    25d4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    25d8:	4408      	add	r0, r1
    25da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25de:	e9cd 2002 	strd	r2, r0, [sp, #8]
    25e2:	f04f 0a01 	mov.w	sl, #1
    25e6:	f1b8 0f00 	cmp.w	r8, #0
    25ea:	d009      	beq.n	2600 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x224>
    25ec:	2100      	movs	r1, #0
    25ee:	f240 605d 	movw	r0, #1629	; 0x65d
    25f2:	f3af 8000 	nop.w
    25f6:	2100      	movs	r1, #0
    25f8:	f240 6063 	movw	r0, #1635	; 0x663
    25fc:	f3af 8000 	nop.w
    2600:	9902      	ldr	r1, [sp, #8]
    2602:	9a03      	ldr	r2, [sp, #12]
    2604:	1b09      	subs	r1, r1, r4
    2606:	1b12      	subs	r2, r2, r4
    2608:	485f      	ldr	r0, [pc, #380]	; (2788 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3ac>)
    260a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    260e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2612:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    2616:	d205      	bcs.n	2624 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    2618:	4290      	cmp	r0, r2
    261a:	d303      	bcc.n	2624 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    261c:	f1bb 0f00 	cmp.w	fp, #0
    2620:	d10b      	bne.n	263a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2622:	e004      	b.n	262e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x252>
    2624:	464f      	mov	r7, r9
    2626:	f1bb 0f00 	cmp.w	fp, #0
    262a:	d03a      	beq.n	26a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c6>
    262c:	e098      	b.n	2760 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x384>
    262e:	4639      	mov	r1, r7
    2630:	a802      	add	r0, sp, #8
    2632:	f7fe fc07 	bl	e44 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x168>
    2636:	ea4a 0a00 	orr.w	sl, sl, r0
    263a:	f1ba 0f00 	cmp.w	sl, #0
    263e:	d024      	beq.n	268a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ae>
    2640:	9802      	ldr	r0, [sp, #8]
    2642:	f00a f810 	bl	c666 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2646:	4601      	mov	r1, r0
    2648:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    264c:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    2650:	f8df c138 	ldr.w	ip, [pc, #312]	; 278c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>
    2654:	4410      	add	r0, r2
    2656:	1cc0      	adds	r0, r0, #3
    2658:	180a      	adds	r2, r1, r0
    265a:	2400      	movs	r4, #0
    265c:	ebbc 0101 	subs.w	r1, ip, r1
    2660:	eb74 0109 	sbcs.w	r1, r4, r9
    2664:	d346      	bcc.n	26f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x318>
    2666:	494a      	ldr	r1, [pc, #296]	; (2790 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b4>)
    2668:	4288      	cmp	r0, r1
    266a:	dc5e      	bgt.n	272a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34e>
    266c:	4249      	negs	r1, r1
    266e:	4288      	cmp	r0, r1
    2670:	db63      	blt.n	273a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35e>
    2672:	f10c 0001 	add.w	r0, ip, #1
    2676:	4282      	cmp	r2, r0
    2678:	bfa8      	it	ge
    267a:	4846      	ldrge	r0, [pc, #280]	; (2794 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b8>)
    267c:	da03      	bge.n	2686 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    267e:	2a00      	cmp	r2, #0
    2680:	bfb8      	it	lt
    2682:	4845      	ldrlt	r0, [pc, #276]	; (2798 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3bc>)
    2684:	da00      	bge.n	2688 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>
    2686:	1812      	adds	r2, r2, r0
    2688:	60ea      	str	r2, [r5, #12]
    268a:	f04f 0001 	mov.w	r0, #1
    268e:	9006      	str	r0, [sp, #24]
    2690:	f1b8 0f00 	cmp.w	r8, #0
    2694:	d064      	beq.n	2760 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x384>
    2696:	2100      	movs	r1, #0
    2698:	f240 6076 	movw	r0, #1654	; 0x676
    269c:	f3af 8000 	nop.w
    26a0:	e05e      	b.n	2760 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x384>
    26a2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    26a6:	aa01      	add	r2, sp, #4
    26a8:	4669      	mov	r1, sp
    26aa:	f001 f92f 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    26ae:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    26b2:	2820      	cmp	r0, #32
    26b4:	d023      	beq.n	26fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x322>
    26b6:	6930      	ldr	r0, [r6, #16]
    26b8:	1d40      	adds	r0, r0, #5
    26ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26be:	bf00      	nop
    26c0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    26c4:	1a89      	subs	r1, r1, r2
    26c6:	4401      	add	r1, r0
    26c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    26cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    26d0:	f009 ffc9 	bl	c666 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    26d4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    26d8:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    26dc:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 278c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>
    26e0:	4411      	add	r1, r2
    26e2:	1cca      	adds	r2, r1, #3
    26e4:	4601      	mov	r1, r0
    26e6:	2300      	movs	r3, #0
    26e8:	ebbc 0101 	subs.w	r1, ip, r1
    26ec:	4410      	add	r0, r2
    26ee:	eb73 0107 	sbcs.w	r1, r3, r7
    26f2:	d217      	bcs.n	2724 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>
    26f4:	f240 51f1 	movw	r1, #1521	; 0x5f1
    26f8:	2070      	movs	r0, #112	; 0x70
    26fa:	f001 fc9f 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26fe:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2702:	3409      	adds	r4, #9
    2704:	b120      	cbz	r0, 2710 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>
    2706:	f001 fc35 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    270a:	2800      	cmp	r0, #0
    270c:	bf08      	it	eq
    270e:	3432      	addeq	r4, #50	; 0x32
    2710:	481c      	ldr	r0, [pc, #112]	; (2784 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a8>)
    2712:	9900      	ldr	r1, [sp, #0]
    2714:	7840      	ldrb	r0, [r0, #1]
    2716:	4288      	cmp	r0, r1
    2718:	bf84      	itt	hi
    271a:	1a40      	subhi	r0, r0, r1
    271c:	4404      	addhi	r4, r0
    271e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    2722:	e7cd      	b.n	26c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2e4>
    2724:	491a      	ldr	r1, [pc, #104]	; (2790 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b4>)
    2726:	428a      	cmp	r2, r1
    2728:	dd04      	ble.n	2734 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x358>
    272a:	f240 51f2 	movw	r1, #1522	; 0x5f2
    272e:	2070      	movs	r0, #112	; 0x70
    2730:	f001 fc84 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2734:	4919      	ldr	r1, [pc, #100]	; (279c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c0>)
    2736:	428a      	cmp	r2, r1
    2738:	da04      	bge.n	2744 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>
    273a:	f240 51f3 	movw	r1, #1523	; 0x5f3
    273e:	2070      	movs	r0, #112	; 0x70
    2740:	f001 fc7c 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2744:	4914      	ldr	r1, [pc, #80]	; (2798 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3bc>)
    2746:	4288      	cmp	r0, r1
    2748:	bfa8      	it	ge
    274a:	4912      	ldrge	r1, [pc, #72]	; (2794 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b8>)
    274c:	da03      	bge.n	2756 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x37a>
    274e:	2800      	cmp	r0, #0
    2750:	bfb8      	it	lt
    2752:	4911      	ldrlt	r1, [pc, #68]	; (2798 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3bc>)
    2754:	da00      	bge.n	2758 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x37c>
    2756:	1840      	adds	r0, r0, r1
    2758:	60e8      	str	r0, [r5, #12]
    275a:	f04f 0001 	mov.w	r0, #1
    275e:	9006      	str	r0, [sp, #24]
    2760:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2764:	2800      	cmp	r0, #0
    2766:	f47f ae65 	bne.w	2434 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    276a:	9806      	ldr	r0, [sp, #24]
    276c:	b00d      	add	sp, #52	; 0x34
    276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2772:	0000      	.short	0x0000
    2774:	e000ed04 	.word	0xe000ed04
    2778:	00000000 	.word	0x00000000
    277c:	20000e3c 	.word	0x20000e3c
    2780:	20000dbc 	.word	0x20000dbc
    2784:	2000000e 	.word	0x2000000e
    2788:	003fffff 	.word	0x003fffff
    278c:	1e847fff 	.word	0x1e847fff
    2790:	07a12000 	.word	0x07a12000
    2794:	e17b8000 	.word	0xe17b8000
    2798:	1e848000 	.word	0x1e848000
    279c:	f85ee000 	.word	0xf85ee000

000027a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    27a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27a4:	4d80      	ldr	r5, [pc, #512]	; (29a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    27a6:	b08c      	sub	sp, #48	; 0x30
    27a8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    27ac:	2000      	movs	r0, #0
    27ae:	9009      	str	r0, [sp, #36]	; 0x24
    27b0:	2001      	movs	r0, #1
    27b2:	4c7e      	ldr	r4, [pc, #504]	; (29ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    27b4:	f04f 0800 	mov.w	r8, #0
    27b8:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    27bc:	4683      	mov	fp, r0
    27be:	9008      	str	r0, [sp, #32]
    27c0:	b124      	cbz	r4, 27cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    27c2:	2100      	movs	r1, #0
    27c4:	f240 70dc 	movw	r0, #2012	; 0x7dc
    27c8:	f3af 8000 	nop.w
    27cc:	9808      	ldr	r0, [sp, #32]
    27ce:	b390      	cbz	r0, 2836 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    27d0:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    27d4:	b124      	cbz	r4, 27e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    27d6:	2100      	movs	r1, #0
    27d8:	f240 70e1 	movw	r0, #2017	; 0x7e1
    27dc:	f3af 8000 	nop.w
    27e0:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    27e4:	2240      	movs	r2, #64	; 0x40
    27e6:	ea2b 0609 	bic.w	r6, fp, r9
    27ea:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    27ee:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    27f2:	4682      	mov	sl, r0
    27f4:	f00a f8a5 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    27f8:	b124      	cbz	r4, 2804 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    27fa:	2100      	movs	r1, #0
    27fc:	f240 50b5 	movw	r0, #1461	; 0x5b5
    2800:	f3af 8000 	nop.w
    2804:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2808:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    280c:	9000      	str	r0, [sp, #0]
    280e:	6a09      	ldr	r1, [r1, #32]
    2810:	6201      	str	r1, [r0, #32]
    2812:	b124      	cbz	r4, 281e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    2814:	2100      	movs	r1, #0
    2816:	f240 50b9 	movw	r0, #1465	; 0x5b9
    281a:	f3af 8000 	nop.w
    281e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2822:	b180      	cbz	r0, 2846 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    2824:	2c00      	cmp	r4, #0
    2826:	bf1c      	itt	ne
    2828:	2100      	movne	r1, #0
    282a:	f240 70e7 	movwne	r0, #2023	; 0x7e7
    282e:	d0c7      	beq.n	27c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2830:	f3af 8000 	nop.w
    2834:	e7c4      	b.n	27c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2836:	e7ff      	b.n	2838 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    2838:	485d      	ldr	r0, [pc, #372]	; (29b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    283a:	2800      	cmp	r0, #0
    283c:	bf18      	it	ne
    283e:	f3af 8000 	nopne.w
    2842:	b662      	cpsie	i
    2844:	e7c4      	b.n	27d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    2846:	b124      	cbz	r4, 2852 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    2848:	2100      	movs	r1, #0
    284a:	f240 70eb 	movw	r0, #2027	; 0x7eb
    284e:	f3af 8000 	nop.w
    2852:	980c      	ldr	r0, [sp, #48]	; 0x30
    2854:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    2858:	2803      	cmp	r0, #3
    285a:	d178      	bne.n	294e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    285c:	f8dd 9000 	ldr.w	r9, [sp]
    2860:	f8cd 9018 	str.w	r9, [sp, #24]
    2864:	990c      	ldr	r1, [sp, #48]	; 0x30
    2866:	f899 0020 	ldrb.w	r0, [r9, #32]
    286a:	4288      	cmp	r0, r1
    286c:	bf14      	ite	ne
    286e:	f04f 0a00 	movne.w	sl, #0
    2872:	f04f 0a01 	moveq.w	sl, #1
    2876:	f109 0c20 	add.w	ip, r9, #32
    287a:	4686      	mov	lr, r0
    287c:	2220      	movs	r2, #32
    287e:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2882:	e003      	b.n	288c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    2884:	4602      	mov	r2, r0
    2886:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    288a:	7840      	ldrb	r0, [r0, #1]
    288c:	4288      	cmp	r0, r1
    288e:	d002      	beq.n	2896 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2890:	2820      	cmp	r0, #32
    2892:	d00a      	beq.n	28aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2894:	e7f6      	b.n	2884 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    2896:	2820      	cmp	r0, #32
    2898:	d007      	beq.n	28aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    289a:	4586      	cmp	lr, r0
    289c:	d107      	bne.n	28ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    289e:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    28a2:	7840      	ldrb	r0, [r0, #1]
    28a4:	f88c 0000 	strb.w	r0, [ip]
    28a8:	e007      	b.n	28ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    28aa:	4640      	mov	r0, r8
    28ac:	e00c      	b.n	28c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    28ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    28b2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    28b6:	7840      	ldrb	r0, [r0, #1]
    28b8:	7048      	strb	r0, [r1, #1]
    28ba:	b124      	cbz	r4, 28c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    28bc:	2100      	movs	r1, #0
    28be:	f240 503a 	movw	r0, #1338	; 0x53a
    28c2:	f3af 8000 	nop.w
    28c6:	4658      	mov	r0, fp
    28c8:	ea10 0f0a 	tst.w	r0, sl
    28cc:	bf18      	it	ne
    28ce:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    28d2:	b3e0      	cbz	r0, 294e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    28d4:	b124      	cbz	r4, 28e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    28d6:	2100      	movs	r1, #0
    28d8:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
    28dc:	f3af 8000 	nop.w
    28e0:	4632      	mov	r2, r6
    28e2:	2001      	movs	r0, #1
    28e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    28e6:	f7fe fff7 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    28ea:	9806      	ldr	r0, [sp, #24]
    28ec:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    28f0:	b124      	cbz	r4, 28fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    28f2:	2100      	movs	r1, #0
    28f4:	f240 70fb 	movw	r0, #2043	; 0x7fb
    28f8:	f3af 8000 	nop.w
    28fc:	482d      	ldr	r0, [pc, #180]	; (29b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    28fe:	2800      	cmp	r0, #0
    2900:	bf18      	it	ne
    2902:	f3af 8000 	nopne.w
    2906:	f3ef 8010 	mrs	r0, PRIMASK
    290a:	b672      	cpsid	i
    290c:	9008      	str	r0, [sp, #32]
    290e:	b124      	cbz	r4, 291a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    2910:	2100      	movs	r1, #0
    2912:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2916:	f3af 8000 	nop.w
    291a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    291e:	b138      	cbz	r0, 2930 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    2920:	2c00      	cmp	r4, #0
    2922:	bf1c      	itt	ne
    2924:	2100      	movne	r1, #0
    2926:	f640 0004 	movwne	r0, #2052	; 0x804
    292a:	f43f af49 	beq.w	27c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    292e:	e77f      	b.n	2830 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2930:	f1b9 0f00 	cmp.w	r9, #0
    2934:	d008      	beq.n	2948 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2936:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    293a:	2820      	cmp	r0, #32
    293c:	d104      	bne.n	2948 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    293e:	4631      	mov	r1, r6
    2940:	2002      	movs	r0, #2
    2942:	f7fe fff9 	bl	1938 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b0>
    2946:	b1f8      	cbz	r0, 2988 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2948:	b134      	cbz	r4, 2958 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    294a:	2100      	movs	r1, #0
    294c:	e000      	b.n	2950 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    294e:	e009      	b.n	2964 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    2950:	f640 0018 	movw	r0, #2072	; 0x818
    2954:	f3af 8000 	nop.w
    2958:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    295c:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    2960:	2001      	movs	r0, #1
    2962:	9009      	str	r0, [sp, #36]	; 0x24
    2964:	b124      	cbz	r4, 2970 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2966:	2100      	movs	r1, #0
    2968:	f640 0021 	movw	r0, #2081	; 0x821
    296c:	f3af 8000 	nop.w
    2970:	9808      	ldr	r0, [sp, #32]
    2972:	b188      	cbz	r0, 2998 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    2974:	b124      	cbz	r4, 2980 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    2976:	2100      	movs	r1, #0
    2978:	f640 0025 	movw	r0, #2085	; 0x825
    297c:	f3af 8000 	nop.w
    2980:	9809      	ldr	r0, [sp, #36]	; 0x24
    2982:	b00d      	add	sp, #52	; 0x34
    2984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2988:	2c00      	cmp	r4, #0
    298a:	d0f1      	beq.n	2970 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    298c:	2100      	movs	r1, #0
    298e:	f640 0013 	movw	r0, #2067	; 0x813
    2992:	f3af 8000 	nop.w
    2996:	e7e6      	b.n	2966 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2998:	4805      	ldr	r0, [pc, #20]	; (29b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    299a:	2800      	cmp	r0, #0
    299c:	bf18      	it	ne
    299e:	f3af 8000 	nopne.w
    29a2:	b662      	cpsie	i
    29a4:	e7e6      	b.n	2974 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    29a6:	0000      	.short	0x0000
    29a8:	20000e3c 	.word	0x20000e3c
	...

000029b8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    29b8:	b510      	push	{r4, lr}
    29ba:	2820      	cmp	r0, #32
    29bc:	d211      	bcs.n	29e2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    29be:	490e      	ldr	r1, [pc, #56]	; (29f8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    29c0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    29c4:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    29c8:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    29cc:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    29d0:	b13b      	cbz	r3, 29e2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    29d2:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    29d6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    29da:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    29de:	2a01      	cmp	r2, #1
    29e0:	d001      	beq.n	29e6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    29e2:	2000      	movs	r0, #0
    29e4:	bd10      	pop	{r4, pc}
    29e6:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    29ea:	4601      	mov	r1, r0
    29ec:	2000      	movs	r0, #0
    29ee:	f7fe ff73 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    29f2:	2001      	movs	r0, #1
    29f4:	bd10      	pop	{r4, pc}
    29f6:	0000      	.short	0x0000
    29f8:	20000e3c 	.word	0x20000e3c

000029fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    29fc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a00:	4e7e      	ldr	r6, [pc, #504]	; (2bfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2a02:	4680      	mov	r8, r0
    2a04:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2a08:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2a0c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2a10:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2a14:	2800      	cmp	r0, #0
    2a16:	d065      	beq.n	2ae4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2a18:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2a1c:	4d78      	ldr	r5, [pc, #480]	; (2c00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2a1e:	b125      	cbz	r5, 2a2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2a20:	2100      	movs	r1, #0
    2a22:	f640 30b3 	movw	r0, #2995	; 0xbb3
    2a26:	f3af 8000 	nop.w
    2a2a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2a2e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2a32:	2801      	cmp	r0, #1
    2a34:	d018      	beq.n	2a68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2a36:	b2c0      	uxtb	r0, r0
    2a38:	2804      	cmp	r0, #4
    2a3a:	bf1c      	itt	ne
    2a3c:	2805      	cmpne	r0, #5
    2a3e:	2806      	cmpne	r0, #6
    2a40:	d055      	beq.n	2aee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2a42:	b12d      	cbz	r5, 2a50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2a44:	f04f 0100 	mov.w	r1, #0
    2a48:	f640 30bf 	movw	r0, #3007	; 0xbbf
    2a4c:	f3af 8000 	nop.w
    2a50:	f001 fc1a 	bl	4288 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2a54:	b125      	cbz	r5, 2a60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2a56:	2100      	movs	r1, #0
    2a58:	f640 30c3 	movw	r0, #3011	; 0xbc3
    2a5c:	f3af 8000 	nop.w
    2a60:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2a64:	2801      	cmp	r0, #1
    2a66:	d1e6      	bne.n	2a36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2a68:	2401      	movs	r4, #1
    2a6a:	b125      	cbz	r5, 2a76 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2a6c:	2100      	movs	r1, #0
    2a6e:	f640 30ca 	movw	r0, #3018	; 0xbca
    2a72:	f3af 8000 	nop.w
    2a76:	b3a4      	cbz	r4, 2ae2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    2a78:	2000      	movs	r0, #0
    2a7a:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2a7e:	b125      	cbz	r5, 2a8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    2a80:	2100      	movs	r1, #0
    2a82:	f640 30cf 	movw	r0, #3023	; 0xbcf
    2a86:	f3af 8000 	nop.w
    2a8a:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2a8e:	2001      	movs	r0, #1
    2a90:	ea20 090b 	bic.w	r9, r0, fp
    2a94:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2a98:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2a9c:	2240      	movs	r2, #64	; 0x40
    2a9e:	f009 ff50 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2aa2:	b125      	cbz	r5, 2aae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    2aa4:	2100      	movs	r1, #0
    2aa6:	f240 50b5 	movw	r0, #1461	; 0x5b5
    2aaa:	f3af 8000 	nop.w
    2aae:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2ab2:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2ab6:	6a00      	ldr	r0, [r0, #32]
    2ab8:	f8ca 0020 	str.w	r0, [sl, #32]
    2abc:	b125      	cbz	r5, 2ac8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    2abe:	2100      	movs	r1, #0
    2ac0:	f240 50b9 	movw	r0, #1465	; 0x5b9
    2ac4:	f3af 8000 	nop.w
    2ac8:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2acc:	b1e0      	cbz	r0, 2b08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    2ace:	2d00      	cmp	r5, #0
    2ad0:	bf1c      	itt	ne
    2ad2:	2100      	movne	r1, #0
    2ad4:	f640 30d5 	movwne	r0, #3029	; 0xbd5
    2ad8:	d0c7      	beq.n	2a6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2ada:	bf00      	nop
    2adc:	f3af 8000 	nop.w
    2ae0:	e7c3      	b.n	2a6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2ae2:	e00a      	b.n	2afa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2ae4:	f640 31aa 	movw	r1, #2986	; 0xbaa
    2ae8:	2070      	movs	r0, #112	; 0x70
    2aea:	f001 faa7 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aee:	464a      	mov	r2, r9
    2af0:	4641      	mov	r1, r8
    2af2:	2001      	movs	r0, #1
    2af4:	f7fe fef0 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    2af8:	e7ac      	b.n	2a54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2afa:	4842      	ldr	r0, [pc, #264]	; (2c04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2afc:	2800      	cmp	r0, #0
    2afe:	bf18      	it	ne
    2b00:	f3af 8000 	nopne.w
    2b04:	b662      	cpsie	i
    2b06:	e7b7      	b.n	2a78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2b08:	b125      	cbz	r5, 2b14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    2b0a:	2100      	movs	r1, #0
    2b0c:	f640 30d9 	movw	r0, #3033	; 0xbd9
    2b10:	f3af 8000 	nop.w
    2b14:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2b18:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2b1c:	4640      	mov	r0, r8
    2b1e:	461c      	mov	r4, r3
    2b20:	f04f 0b20 	mov.w	fp, #32
    2b24:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2b28:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2b2c:	e004      	b.n	2b38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2b2e:	46a3      	mov	fp, r4
    2b30:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2b34:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2b38:	4284      	cmp	r4, r0
    2b3a:	d002      	beq.n	2b42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2b3c:	2c20      	cmp	r4, #32
    2b3e:	d02b      	beq.n	2b98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2b40:	e7f5      	b.n	2b2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2b42:	2c20      	cmp	r4, #32
    2b44:	d028      	beq.n	2b98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2b46:	42a3      	cmp	r3, r4
    2b48:	d104      	bne.n	2b54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    2b4a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2b4e:	7840      	ldrb	r0, [r0, #1]
    2b50:	7008      	strb	r0, [r1, #0]
    2b52:	e005      	b.n	2b60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    2b54:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2b58:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2b5c:	7840      	ldrb	r0, [r0, #1]
    2b5e:	7048      	strb	r0, [r1, #1]
    2b60:	f1ba 0f00 	cmp.w	sl, #0
    2b64:	d011      	beq.n	2b8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2b66:	b125      	cbz	r5, 2b72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    2b68:	2100      	movs	r1, #0
    2b6a:	f240 5032 	movw	r0, #1330	; 0x532
    2b6e:	f3af 8000 	nop.w
    2b72:	f89a 0000 	ldrb.w	r0, [sl]
    2b76:	42a0      	cmp	r0, r4
    2b78:	d107      	bne.n	2b8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2b7a:	b125      	cbz	r5, 2b86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    2b7c:	2100      	movs	r1, #0
    2b7e:	f240 5035 	movw	r0, #1333	; 0x535
    2b82:	f3af 8000 	nop.w
    2b86:	f88a b000 	strb.w	fp, [sl]
    2b8a:	b15d      	cbz	r5, 2ba4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2b8c:	2100      	movs	r1, #0
    2b8e:	f240 503a 	movw	r0, #1338	; 0x53a
    2b92:	f3af 8000 	nop.w
    2b96:	e000      	b.n	2b9a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2b98:	b125      	cbz	r5, 2ba4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2b9a:	2100      	movs	r1, #0
    2b9c:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2ba0:	f3af 8000 	nop.w
    2ba4:	4818      	ldr	r0, [pc, #96]	; (2c08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2ba6:	2800      	cmp	r0, #0
    2ba8:	bf18      	it	ne
    2baa:	f3af 8000 	nopne.w
    2bae:	f3ef 8410 	mrs	r4, PRIMASK
    2bb2:	b672      	cpsid	i
    2bb4:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2bb8:	b138      	cbz	r0, 2bca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    2bba:	2d00      	cmp	r5, #0
    2bbc:	bf1c      	itt	ne
    2bbe:	2100      	movne	r1, #0
    2bc0:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2bc4:	f43f af51 	beq.w	2a6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2bc8:	e788      	b.n	2adc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    2bca:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2bce:	2001      	movs	r0, #1
    2bd0:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2bd4:	b154      	cbz	r4, 2bec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    2bd6:	2d00      	cmp	r5, #0
    2bd8:	bf08      	it	eq
    2bda:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2bde:	2100      	movs	r1, #0
    2be0:	f44f 603f 	mov.w	r0, #3056	; 0xbf0
    2be4:	f3af 8000 	nop.w
    2be8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2bec:	4805      	ldr	r0, [pc, #20]	; (2c04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2bee:	2800      	cmp	r0, #0
    2bf0:	bf18      	it	ne
    2bf2:	f3af 8000 	nopne.w
    2bf6:	b662      	cpsie	i
    2bf8:	e7ed      	b.n	2bd6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    2bfa:	0000      	.short	0x0000
    2bfc:	20000e3c 	.word	0x20000e3c
	...

00002c0c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2c0c:	b570      	push	{r4, r5, r6, lr}
    2c0e:	4605      	mov	r5, r0
    2c10:	f001 f99e 	bl	3f50 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2c14:	480d      	ldr	r0, [pc, #52]	; (2c4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    2c16:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2c1a:	2400      	movs	r4, #0
    2c1c:	3880      	subs	r0, #128	; 0x80
    2c1e:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2c22:	bf00      	nop
    2c24:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2c28:	b129      	cbz	r1, 2c36 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2c2a:	1c61      	adds	r1, r4, #1
    2c2c:	b2cc      	uxtb	r4, r1
    2c2e:	2c20      	cmp	r4, #32
    2c30:	d3f8      	bcc.n	2c24 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2c32:	2020      	movs	r0, #32
    2c34:	bd70      	pop	{r4, r5, r6, pc}
    2c36:	4906      	ldr	r1, [pc, #24]	; (2c50 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    2c38:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2c3c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
    2c40:	4621      	mov	r1, r4
    2c42:	2001      	movs	r0, #1
    2c44:	f7fe fe48 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    2c48:	4620      	mov	r0, r4
    2c4a:	bd70      	pop	{r4, r5, r6, pc}
    2c4c:	20000e3c 	.word	0x20000e3c
    2c50:	20000b3c 	.word	0x20000b3c

00002c54 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c58:	b083      	sub	sp, #12
    2c5a:	f000 fad3 	bl	3204 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2c5e:	4605      	mov	r5, r0
    2c60:	f000 fd86 	bl	3770 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2c64:	4c60      	ldr	r4, [pc, #384]	; (2de8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    2c66:	68a0      	ldr	r0, [r4, #8]
    2c68:	f1b0 3fff 	cmp.w	r0, #4294967295
    2c6c:	bf1c      	itt	ne
    2c6e:	f04f 30ff 	movne.w	r0, #4294967295
    2c72:	60a0      	strne	r0, [r4, #8]
    2c74:	7fa0      	ldrb	r0, [r4, #30]
    2c76:	f8df b174 	ldr.w	fp, [pc, #372]	; 2dec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>
    2c7a:	b9a8      	cbnz	r0, 2ca8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2c7c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2c80:	1a08      	subs	r0, r1, r0
    2c82:	0200      	lsls	r0, r0, #8
    2c84:	17c1      	asrs	r1, r0, #31
    2c86:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2c8a:	1200      	asrs	r0, r0, #8
    2c8c:	f44f 710c 	mov.w	r1, #560	; 0x230
    2c90:	f009 fd16 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2c94:	6921      	ldr	r1, [r4, #16]
    2c96:	4408      	add	r0, r1
    2c98:	1a28      	subs	r0, r5, r0
    2c9a:	0200      	lsls	r0, r0, #8
    2c9c:	17c1      	asrs	r1, r0, #31
    2c9e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2ca2:	1200      	asrs	r0, r0, #8
    2ca4:	0fc0      	lsrs	r0, r0, #31
    2ca6:	d00b      	beq.n	2cc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2ca8:	7e60      	ldrb	r0, [r4, #25]
    2caa:	b1c0      	cbz	r0, 2cde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x8a>
    2cac:	f000 fbb6 	bl	341c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2cb0:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2cb4:	b1c8      	cbz	r0, 2cea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x96>
    2cb6:	f240 414e 	movw	r1, #1102	; 0x44e
    2cba:	2070      	movs	r0, #112	; 0x70
    2cbc:	f001 f9be 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cc0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2cc4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2cc8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2ccc:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
    2cd0:	2108      	movs	r1, #8
    2cd2:	4790      	blx	r2
    2cd4:	f240 413d 	movw	r1, #1085	; 0x43d
    2cd8:	2070      	movs	r0, #112	; 0x70
    2cda:	f001 f9af 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cde:	1ce8      	adds	r0, r5, #3
    2ce0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ce4:	f000 fa94 	bl	3210 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2ce8:	e7e2      	b.n	2cb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    2cea:	f04f 0a01 	mov.w	sl, #1
    2cee:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2cf2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2cf6:	2820      	cmp	r0, #32
    2cf8:	d024      	beq.n	2d44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf0>
    2cfa:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2cfe:	2020      	movs	r0, #32
    2d00:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2d04:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2d08:	2600      	movs	r6, #0
    2d0a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2d0e:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2d12:	4837      	ldr	r0, [pc, #220]	; (2df0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>)
    2d14:	6026      	str	r6, [r4, #0]
    2d16:	7800      	ldrb	r0, [r0, #0]
    2d18:	2802      	cmp	r0, #2
    2d1a:	bf16      	itet	ne
    2d1c:	2803      	cmpne	r0, #3
    2d1e:	2001      	moveq	r0, #1
    2d20:	2000      	movne	r0, #0
    2d22:	7720      	strb	r0, [r4, #28]
    2d24:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2d28:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2d2c:	f899 0020 	ldrb.w	r0, [r9, #32]
    2d30:	2820      	cmp	r0, #32
    2d32:	d030      	beq.n	2d96 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    2d34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2d38:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    2d3c:	7c81      	ldrb	r1, [r0, #18]
    2d3e:	2901      	cmp	r1, #1
    2d40:	d005      	beq.n	2d4e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2d42:	e028      	b.n	2d96 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    2d44:	f240 4151 	movw	r1, #1105	; 0x451
    2d48:	2070      	movs	r0, #112	; 0x70
    2d4a:	f001 f977 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d4e:	46ab      	mov	fp, r5
    2d50:	1d05      	adds	r5, r0, #4
    2d52:	89c0      	ldrh	r0, [r0, #14]
    2d54:	aa01      	add	r2, sp, #4
    2d56:	4669      	mov	r1, sp
    2d58:	f000 fdd8 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2d5c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2d60:	2820      	cmp	r0, #32
    2d62:	d004      	beq.n	2d6e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x11a>
    2d64:	6920      	ldr	r0, [r4, #16]
    2d66:	1d40      	adds	r0, r0, #5
    2d68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d6c:	e00b      	b.n	2d86 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    2d6e:	8968      	ldrh	r0, [r5, #10]
    2d70:	f10b 0b09 	add.w	fp, fp, #9
    2d74:	b128      	cbz	r0, 2d82 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12e>
    2d76:	f001 f8fd 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2d7a:	2800      	cmp	r0, #0
    2d7c:	bf08      	it	eq
    2d7e:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    2d82:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2d86:	e9d5 2100 	ldrd	r2, r1, [r5]
    2d8a:	1a89      	subs	r1, r1, r2
    2d8c:	6028      	str	r0, [r5, #0]
    2d8e:	4408      	add	r0, r1
    2d90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d94:	6068      	str	r0, [r5, #4]
    2d96:	4639      	mov	r1, r7
    2d98:	2001      	movs	r0, #1
    2d9a:	f7fe fdcd 	bl	1938 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b0>
    2d9e:	2800      	cmp	r0, #0
    2da0:	d0f9      	beq.n	2d96 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    2da2:	4814      	ldr	r0, [pc, #80]	; (2df4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    2da4:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2da8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2dac:	2802      	cmp	r0, #2
    2dae:	d104      	bne.n	2dba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x166>
    2db0:	463a      	mov	r2, r7
    2db2:	4641      	mov	r1, r8
    2db4:	2006      	movs	r0, #6
    2db6:	f7fe fd8f 	bl	18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>
    2dba:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2dbe:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2dc2:	2820      	cmp	r0, #32
    2dc4:	d003      	beq.n	2dce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17a>
    2dc6:	480c      	ldr	r0, [pc, #48]	; (2df8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>)
    2dc8:	7840      	ldrb	r0, [r0, #1]
    2dca:	f001 fa07 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2dce:	7f20      	ldrb	r0, [r4, #28]
    2dd0:	2800      	cmp	r0, #0
    2dd2:	bf04      	itt	eq
    2dd4:	b003      	addeq	sp, #12
    2dd6:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dda:	f000 fd13 	bl	3804 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2dde:	7726      	strb	r6, [r4, #28]
    2de0:	7766      	strb	r6, [r4, #29]
    2de2:	b003      	add	sp, #12
    2de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2de8:	20000e3c 	.word	0x20000e3c
    2dec:	20000b3c 	.word	0x20000b3c
    2df0:	2000000e 	.word	0x2000000e
    2df4:	20000dbc 	.word	0x20000dbc
    2df8:	2000000c 	.word	0x2000000c

00002dfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2dfc:	b530      	push	{r4, r5, lr}
    2dfe:	4c30      	ldr	r4, [pc, #192]	; (2ec0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    2e00:	b083      	sub	sp, #12
    2e02:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2e06:	2920      	cmp	r1, #32
    2e08:	d008      	beq.n	2e1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2e0a:	68a1      	ldr	r1, [r4, #8]
    2e0c:	f1b1 3fff 	cmp.w	r1, #4294967295
    2e10:	d009      	beq.n	2e26 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2e12:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    2e16:	2070      	movs	r0, #112	; 0x70
    2e18:	f001 f910 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e1c:	f640 21cf 	movw	r1, #2767	; 0xacf
    2e20:	2070      	movs	r0, #112	; 0x70
    2e22:	f001 f90b 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e26:	6861      	ldr	r1, [r4, #4]
    2e28:	f8df c098 	ldr.w	ip, [pc, #152]	; 2ec4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    2e2c:	180b      	adds	r3, r1, r0
    2e2e:	2200      	movs	r2, #0
    2e30:	ebbc 0101 	subs.w	r1, ip, r1
    2e34:	eb72 0102 	sbcs.w	r1, r2, r2
    2e38:	d204      	bcs.n	2e44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    2e3a:	f240 51f1 	movw	r1, #1521	; 0x5f1
    2e3e:	2070      	movs	r0, #112	; 0x70
    2e40:	f001 f8fc 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e44:	4920      	ldr	r1, [pc, #128]	; (2ec8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2e46:	4288      	cmp	r0, r1
    2e48:	dd04      	ble.n	2e54 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    2e4a:	f240 51f2 	movw	r1, #1522	; 0x5f2
    2e4e:	2070      	movs	r0, #112	; 0x70
    2e50:	f001 f8f4 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e54:	491d      	ldr	r1, [pc, #116]	; (2ecc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2e56:	4288      	cmp	r0, r1
    2e58:	da04      	bge.n	2e64 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    2e5a:	f240 51f3 	movw	r1, #1523	; 0x5f3
    2e5e:	2070      	movs	r0, #112	; 0x70
    2e60:	f001 f8ec 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e64:	481a      	ldr	r0, [pc, #104]	; (2ed0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2e66:	4283      	cmp	r3, r0
    2e68:	bfa8      	it	ge
    2e6a:	481a      	ldrge	r0, [pc, #104]	; (2ed4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2e6c:	da03      	bge.n	2e76 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    2e6e:	2b00      	cmp	r3, #0
    2e70:	bfb8      	it	lt
    2e72:	4817      	ldrlt	r0, [pc, #92]	; (2ed0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2e74:	da00      	bge.n	2e78 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2e76:	181b      	adds	r3, r3, r0
    2e78:	4618      	mov	r0, r3
    2e7a:	aa01      	add	r2, sp, #4
    2e7c:	4669      	mov	r1, sp
    2e7e:	f000 fd45 	bl	390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2e82:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    2e86:	280f      	cmp	r0, #15
    2e88:	bfcc      	ite	gt
    2e8a:	2001      	movgt	r0, #1
    2e8c:	2000      	movle	r0, #0
    2e8e:	9900      	ldr	r1, [sp, #0]
    2e90:	4408      	add	r0, r1
    2e92:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2e96:	60a1      	str	r1, [r4, #8]
    2e98:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2e9c:	2800      	cmp	r0, #0
    2e9e:	bf04      	itt	eq
    2ea0:	b003      	addeq	sp, #12
    2ea2:	bd30      	popeq	{r4, r5, pc}
    2ea4:	2301      	movs	r3, #1
    2ea6:	2203      	movs	r2, #3
    2ea8:	2005      	movs	r0, #5
    2eaa:	f000 fb31 	bl	3510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2eae:	2800      	cmp	r0, #0
    2eb0:	bf1c      	itt	ne
    2eb2:	b003      	addne	sp, #12
    2eb4:	bd30      	popne	{r4, r5, pc}
    2eb6:	f640 21d8 	movw	r1, #2776	; 0xad8
    2eba:	2070      	movs	r0, #112	; 0x70
    2ebc:	f001 f8be 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ec0:	20000e3c 	.word	0x20000e3c
    2ec4:	1e847fff 	.word	0x1e847fff
    2ec8:	07a12000 	.word	0x07a12000
    2ecc:	f85ee000 	.word	0xf85ee000
    2ed0:	1e848000 	.word	0x1e848000
    2ed4:	e17b8000 	.word	0xe17b8000

00002ed8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2ed8:	b570      	push	{r4, r5, r6, lr}
    2eda:	4c1e      	ldr	r4, [pc, #120]	; (2f54 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2edc:	2120      	movs	r1, #32
    2ede:	f884 1020 	strb.w	r1, [r4, #32]
    2ee2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2ee6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2eea:	2000      	movs	r0, #0
    2eec:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2ef0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2ef4:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2ef8:	1e42      	subs	r2, r0, #1
    2efa:	60a2      	str	r2, [r4, #8]
    2efc:	6020      	str	r0, [r4, #0]
    2efe:	77a0      	strb	r0, [r4, #30]
    2f00:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2f04:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2f08:	7720      	strb	r0, [r4, #28]
    2f0a:	7760      	strb	r0, [r4, #29]
    2f0c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2f10:	4911      	ldr	r1, [pc, #68]	; (2f58 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2f12:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2f16:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2f1a:	7008      	strb	r0, [r1, #0]
    2f1c:	7048      	strb	r0, [r1, #1]
    2f1e:	8048      	strh	r0, [r1, #2]
    2f20:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2f24:	2210      	movs	r2, #16
    2f26:	7088      	strb	r0, [r1, #2]
    2f28:	f801 0f04 	strb.w	r0, [r1, #4]!
    2f2c:	1e52      	subs	r2, r2, #1
    2f2e:	d1fa      	bne.n	2f26 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2f30:	4d0a      	ldr	r5, [pc, #40]	; (2f5c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2f32:	2601      	movs	r6, #1
    2f34:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2f38:	20ff      	movs	r0, #255	; 0xff
    2f3a:	7028      	strb	r0, [r5, #0]
    2f3c:	4808      	ldr	r0, [pc, #32]	; (2f60 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2f3e:	f001 f92f 	bl	41a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2f42:	7068      	strb	r0, [r5, #1]
    2f44:	f001 f98a 	bl	425c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2f48:	60a8      	str	r0, [r5, #8]
    2f4a:	f000 fca3 	bl	3894 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2f4e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2f52:	bd70      	pop	{r4, r5, r6, pc}
    2f54:	20000e3c 	.word	0x20000e3c
    2f58:	2000000e 	.word	0x2000000e
    2f5c:	2000000c 	.word	0x2000000c
    2f60:	00001791 	.word	0x00001791

00002f64 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2f64:	b570      	push	{r4, r5, r6, lr}
    2f66:	4604      	mov	r4, r0
    2f68:	4615      	mov	r5, r2
    2f6a:	4608      	mov	r0, r1
    2f6c:	f009 fb7b 	bl	c666 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2f70:	4a0f      	ldr	r2, [pc, #60]	; (2fb0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2f72:	1b01      	subs	r1, r0, r4
    2f74:	f102 0c01 	add.w	ip, r2, #1
    2f78:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    2f7c:	bf24      	itt	cs
    2f7e:	1a23      	subcs	r3, r4, r0
    2f80:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    2f84:	d30b      	bcc.n	2f9e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2f86:	428a      	cmp	r2, r1
    2f88:	d203      	bcs.n	2f92 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    2f8a:	1b11      	subs	r1, r2, r4
    2f8c:	4408      	add	r0, r1
    2f8e:	1c41      	adds	r1, r0, #1
    2f90:	e005      	b.n	2f9e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2f92:	429a      	cmp	r2, r3
    2f94:	d207      	bcs.n	2fa6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    2f96:	1a10      	subs	r0, r2, r0
    2f98:	4420      	add	r0, r4
    2f9a:	1c40      	adds	r0, r0, #1
    2f9c:	4241      	negs	r1, r0
    2f9e:	f101 000f 	add.w	r0, r1, #15
    2fa2:	1a28      	subs	r0, r5, r0
    2fa4:	bd70      	pop	{r4, r5, r6, pc}
    2fa6:	f640 21f3 	movw	r1, #2803	; 0xaf3
    2faa:	2070      	movs	r0, #112	; 0x70
    2fac:	f001 f846 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fb0:	1e847fff 	.word	0x1e847fff

00002fb4 <MPSL_IRQ_RTC0_Handler>:
    2fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fb8:	4c38      	ldr	r4, [pc, #224]	; (309c <MPSL_IRQ_RTC0_Handler+0xe8>)
    2fba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2fbe:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 30a0 <MPSL_IRQ_RTC0_Handler+0xec>
    2fc2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2fc6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2fca:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2fce:	f04f 0500 	mov.w	r5, #0
    2fd2:	bf1c      	itt	ne
    2fd4:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2fd8:	2800      	cmpne	r0, #0
    2fda:	d017      	beq.n	300c <MPSL_IRQ_RTC0_Handler+0x58>
    2fdc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2fe0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fe4:	482f      	ldr	r0, [pc, #188]	; (30a4 <MPSL_IRQ_RTC0_Handler+0xf0>)
    2fe6:	6800      	ldr	r0, [r0, #0]
    2fe8:	f8d8 1000 	ldr.w	r1, [r8]
    2fec:	eba0 0001 	sub.w	r0, r0, r1
    2ff0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ff4:	2802      	cmp	r0, #2
    2ff6:	d302      	bcc.n	2ffe <MPSL_IRQ_RTC0_Handler+0x4a>
    2ff8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2ffc:	d306      	bcc.n	300c <MPSL_IRQ_RTC0_Handler+0x58>
    2ffe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3002:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3006:	2004      	movs	r0, #4
    3008:	f7fe fed8 	bl	1dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    300c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3010:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3014:	bf1c      	itt	ne
    3016:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    301a:	2800      	cmpne	r0, #0
    301c:	d017      	beq.n	304e <MPSL_IRQ_RTC0_Handler+0x9a>
    301e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    3022:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3026:	4820      	ldr	r0, [pc, #128]	; (30a8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3028:	6800      	ldr	r0, [r0, #0]
    302a:	f8d8 1000 	ldr.w	r1, [r8]
    302e:	eba0 0001 	sub.w	r0, r0, r1
    3032:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3036:	2802      	cmp	r0, #2
    3038:	d302      	bcc.n	3040 <MPSL_IRQ_RTC0_Handler+0x8c>
    303a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    303e:	d306      	bcc.n	304e <MPSL_IRQ_RTC0_Handler+0x9a>
    3040:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3044:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3048:	2005      	movs	r0, #5
    304a:	f7fe feb7 	bl	1dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    304e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3052:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3056:	bf1a      	itte	ne
    3058:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    305c:	2800      	cmpne	r0, #0
    305e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3062:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3066:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    306a:	4810      	ldr	r0, [pc, #64]	; (30ac <MPSL_IRQ_RTC0_Handler+0xf8>)
    306c:	6800      	ldr	r0, [r0, #0]
    306e:	f8d8 1000 	ldr.w	r1, [r8]
    3072:	eba0 0001 	sub.w	r0, r0, r1
    3076:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    307a:	2802      	cmp	r0, #2
    307c:	d304      	bcc.n	3088 <MPSL_IRQ_RTC0_Handler+0xd4>
    307e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3082:	bf38      	it	cc
    3084:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    3088:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    308c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3094:	2006      	movs	r0, #6
    3096:	f7fe be91 	b.w	1dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    309a:	0000      	.short	0x0000
    309c:	4000b000 	.word	0x4000b000
    30a0:	4000b504 	.word	0x4000b504
    30a4:	4000b540 	.word	0x4000b540
    30a8:	4000b544 	.word	0x4000b544
    30ac:	4000b548 	.word	0x4000b548

000030b0 <MPSL_IRQ_TIMER0_Handler>:
    30b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30b4:	4d3a      	ldr	r5, [pc, #232]	; (31a0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    30b6:	7828      	ldrb	r0, [r5, #0]
    30b8:	2804      	cmp	r0, #4
    30ba:	d06c      	beq.n	3196 <MPSL_IRQ_TIMER0_Handler+0xe6>
    30bc:	1ce8      	adds	r0, r5, #3
    30be:	2201      	movs	r2, #1
    30c0:	7801      	ldrb	r1, [r0, #0]
    30c2:	b159      	cbz	r1, 30dc <MPSL_IRQ_TIMER0_Handler+0x2c>
    30c4:	2901      	cmp	r1, #1
    30c6:	bf08      	it	eq
    30c8:	706a      	strbeq	r2, [r5, #1]
    30ca:	d002      	beq.n	30d2 <MPSL_IRQ_TIMER0_Handler+0x22>
    30cc:	7869      	ldrb	r1, [r5, #1]
    30ce:	2900      	cmp	r1, #0
    30d0:	d05c      	beq.n	318c <MPSL_IRQ_TIMER0_Handler+0xdc>
    30d2:	2102      	movs	r1, #2
    30d4:	7001      	strb	r1, [r0, #0]
    30d6:	7840      	ldrb	r0, [r0, #1]
    30d8:	f000 fae2 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30dc:	4c31      	ldr	r4, [pc, #196]	; (31a4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    30de:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30e2:	f04f 0800 	mov.w	r8, #0
    30e6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    30ea:	f44f 7680 	mov.w	r6, #256	; 0x100
    30ee:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    30f2:	bf1c      	itt	ne
    30f4:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    30f8:	2800      	cmpne	r0, #0
    30fa:	d008      	beq.n	310e <MPSL_IRQ_TIMER0_Handler+0x5e>
    30fc:	f04f 0003 	mov.w	r0, #3
    3100:	f000 face 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3104:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3108:	2003      	movs	r0, #3
    310a:	f7fe fe57 	bl	1dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    310e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3112:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3116:	bf1c      	itt	ne
    3118:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    311c:	2800      	cmpne	r0, #0
    311e:	d008      	beq.n	3132 <MPSL_IRQ_TIMER0_Handler+0x82>
    3120:	f04f 0002 	mov.w	r0, #2
    3124:	f000 fabc 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3128:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    312c:	2002      	movs	r0, #2
    312e:	f7fe fe45 	bl	1dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3132:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3136:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    313a:	bf1c      	itt	ne
    313c:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    3140:	2800      	cmpne	r0, #0
    3142:	d008      	beq.n	3156 <MPSL_IRQ_TIMER0_Handler+0xa6>
    3144:	f04f 0001 	mov.w	r0, #1
    3148:	f000 faaa 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    314c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3150:	2001      	movs	r0, #1
    3152:	f7fe fe33 	bl	1dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3156:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    315a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    315e:	bf1a      	itte	ne
    3160:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    3164:	2800      	cmpne	r0, #0
    3166:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    316a:	f04f 0000 	mov.w	r0, #0
    316e:	f000 fa97 	bl	36a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3172:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3176:	2004      	movs	r0, #4
    3178:	7028      	strb	r0, [r5, #0]
    317a:	f8c5 8008 	str.w	r8, [r5, #8]
    317e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3186:	2000      	movs	r0, #0
    3188:	f7fe be18 	b.w	1dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    318c:	f240 31c7 	movw	r1, #967	; 0x3c7
    3190:	206c      	movs	r0, #108	; 0x6c
    3192:	f000 ff53 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    319a:	2007      	movs	r0, #7
    319c:	f7fe be0e 	b.w	1dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    31a0:	20000018 	.word	0x20000018
    31a4:	40008000 	.word	0x40008000
    31a8:	2201      	movs	r2, #1
    31aa:	0213      	lsls	r3, r2, #8
    31ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    31b0:	2000      	movs	r0, #0
    31b2:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    31b6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    31ba:	f3bf 8f4f 	dsb	sy
    31be:	f3bf 8f6f 	isb	sy
    31c2:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    31c6:	490c      	ldr	r1, [pc, #48]	; (31f8 <MPSL_IRQ_TIMER0_Handler+0x148>)
    31c8:	604a      	str	r2, [r1, #4]
    31ca:	1e43      	subs	r3, r0, #1
    31cc:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    31d0:	4b0a      	ldr	r3, [pc, #40]	; (31fc <MPSL_IRQ_TIMER0_Handler+0x14c>)
    31d2:	6018      	str	r0, [r3, #0]
    31d4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    31d8:	1d1b      	adds	r3, r3, #4
    31da:	6018      	str	r0, [r3, #0]
    31dc:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    31e0:	1d1b      	adds	r3, r3, #4
    31e2:	6018      	str	r0, [r3, #0]
    31e4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    31e8:	1d1b      	adds	r3, r3, #4
    31ea:	6018      	str	r0, [r3, #0]
    31ec:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    31f0:	610a      	str	r2, [r1, #16]
    31f2:	4903      	ldr	r1, [pc, #12]	; (3200 <MPSL_IRQ_TIMER0_Handler+0x150>)
    31f4:	7048      	strb	r0, [r1, #1]
    31f6:	4770      	bx	lr
    31f8:	40008000 	.word	0x40008000
    31fc:	40008540 	.word	0x40008540
    3200:	20000018 	.word	0x20000018

00003204 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3204:	4801      	ldr	r0, [pc, #4]	; (320c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3206:	6800      	ldr	r0, [r0, #0]
    3208:	4770      	bx	lr
    320a:	0000      	.short	0x0000
    320c:	4000b504 	.word	0x4000b504

00003210 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3210:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3214:	4e41      	ldr	r6, [pc, #260]	; (331c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    3216:	4604      	mov	r4, r0
    3218:	1ef7      	subs	r7, r6, #3
    321a:	f896 c000 	ldrb.w	ip, [r6]
    321e:	68f8      	ldr	r0, [r7, #12]
    3220:	f1bc 0f01 	cmp.w	ip, #1
    3224:	bf04      	itt	eq
    3226:	42a0      	cmpeq	r0, r4
    3228:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    322c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3230:	4a3b      	ldr	r2, [pc, #236]	; (3320 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    3232:	6011      	str	r1, [r2, #0]
    3234:	493b      	ldr	r1, [pc, #236]	; (3324 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    3236:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    323a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    323e:	4a3a      	ldr	r2, [pc, #232]	; (3328 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    3240:	f04f 0500 	mov.w	r5, #0
    3244:	f1bc 0f00 	cmp.w	ip, #0
    3248:	d057      	beq.n	32fa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    324a:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    324e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3252:	6015      	str	r5, [r2, #0]
    3254:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3258:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    325c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3260:	f04f 0801 	mov.w	r8, #1
    3264:	2a00      	cmp	r2, #0
    3266:	bf04      	itt	eq
    3268:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    326c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    3270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3274:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3278:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    327c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3280:	4a2a      	ldr	r2, [pc, #168]	; (332c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    3282:	f8d2 a000 	ldr.w	sl, [r2]
    3286:	eba4 0a0a 	sub.w	sl, r4, sl
    328a:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    328e:	f1bb 0f02 	cmp.w	fp, #2
    3292:	d33c      	bcc.n	330e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3294:	f04f 0a02 	mov.w	sl, #2
    3298:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    329c:	d237      	bcs.n	330e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    329e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    32a2:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    32a6:	f1bc 0f00 	cmp.w	ip, #0
    32aa:	d005      	beq.n	32b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    32ac:	6811      	ldr	r1, [r2, #0]
    32ae:	1a41      	subs	r1, r0, r1
    32b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    32b4:	2902      	cmp	r1, #2
    32b6:	d3f9      	bcc.n	32ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    32b8:	f8c7 8008 	str.w	r8, [r7, #8]
    32bc:	703d      	strb	r5, [r7, #0]
    32be:	f7ff ff73 	bl	31a8 <MPSL_IRQ_TIMER0_Handler+0xf8>
    32c2:	481b      	ldr	r0, [pc, #108]	; (3330 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    32c4:	6005      	str	r5, [r0, #0]
    32c6:	1d00      	adds	r0, r0, #4
    32c8:	f8c0 a000 	str.w	sl, [r0]
    32cc:	4919      	ldr	r1, [pc, #100]	; (3334 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    32ce:	2004      	movs	r0, #4
    32d0:	6008      	str	r0, [r1, #0]
    32d2:	4919      	ldr	r1, [pc, #100]	; (3338 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    32d4:	f8c1 800c 	str.w	r8, [r1, #12]
    32d8:	68ba      	ldr	r2, [r7, #8]
    32da:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    32de:	0181      	lsls	r1, r0, #6
    32e0:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    32e4:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    32e8:	4a14      	ldr	r2, [pc, #80]	; (333c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    32ea:	0741      	lsls	r1, r0, #29
    32ec:	6011      	str	r1, [r2, #0]
    32ee:	60fc      	str	r4, [r7, #12]
    32f0:	7070      	strb	r0, [r6, #1]
    32f2:	f886 8000 	strb.w	r8, [r6]
    32f6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    32fa:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    32fe:	4b10      	ldr	r3, [pc, #64]	; (3340 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3300:	601d      	str	r5, [r3, #0]
    3302:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3306:	6015      	str	r5, [r2, #0]
    3308:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    330c:	e7a4      	b.n	3258 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    330e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    3312:	f240 11eb 	movw	r1, #491	; 0x1eb
    3316:	206c      	movs	r0, #108	; 0x6c
    3318:	f000 fe90 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    331c:	2000001b 	.word	0x2000001b
    3320:	4001f508 	.word	0x4001f508
    3324:	4000b000 	.word	0x4000b000
    3328:	4000b544 	.word	0x4000b544
    332c:	4000b504 	.word	0x4000b504
    3330:	40008504 	.word	0x40008504
    3334:	40008510 	.word	0x40008510
    3338:	40008000 	.word	0x40008000
    333c:	4001f504 	.word	0x4001f504
    3340:	4000b540 	.word	0x4000b540

00003344 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3348:	4c2b      	ldr	r4, [pc, #172]	; (33f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    334a:	68e1      	ldr	r1, [r4, #12]
    334c:	4281      	cmp	r1, r0
    334e:	bf14      	ite	ne
    3350:	2201      	movne	r2, #1
    3352:	2200      	moveq	r2, #0
    3354:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 33fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3358:	f89c 7000 	ldrb.w	r7, [ip]
    335c:	2f02      	cmp	r7, #2
    335e:	d002      	beq.n	3366 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    3360:	2a00      	cmp	r2, #0
    3362:	d038      	beq.n	33d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3364:	e003      	b.n	336e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    3366:	2a00      	cmp	r2, #0
    3368:	bf08      	it	eq
    336a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    336e:	7862      	ldrb	r2, [r4, #1]
    3370:	b382      	cbz	r2, 33d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    3372:	4b23      	ldr	r3, [pc, #140]	; (3400 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3378:	601a      	str	r2, [r3, #0]
    337a:	4b22      	ldr	r3, [pc, #136]	; (3404 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    337c:	1395      	asrs	r5, r2, #14
    337e:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    3382:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    3386:	2600      	movs	r6, #0
    3388:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    338c:	4a1e      	ldr	r2, [pc, #120]	; (3408 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    338e:	f8d2 8000 	ldr.w	r8, [r2]
    3392:	eba0 0808 	sub.w	r8, r0, r8
    3396:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    339a:	f1b8 0f02 	cmp.w	r8, #2
    339e:	d324      	bcc.n	33ea <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    33a0:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    33a4:	d221      	bcs.n	33ea <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    33a6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    33aa:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    33ae:	b12f      	cbz	r7, 33bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    33b0:	6813      	ldr	r3, [r2, #0]
    33b2:	1acb      	subs	r3, r1, r3
    33b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    33b8:	2b02      	cmp	r3, #2
    33ba:	d3f9      	bcc.n	33b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    33bc:	4b13      	ldr	r3, [pc, #76]	; (340c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    33be:	2102      	movs	r1, #2
    33c0:	074a      	lsls	r2, r1, #29
    33c2:	601a      	str	r2, [r3, #0]
    33c4:	60e0      	str	r0, [r4, #12]
    33c6:	2004      	movs	r0, #4
    33c8:	f88c 0001 	strb.w	r0, [ip, #1]
    33cc:	f88c 1000 	strb.w	r1, [ip]
    33d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33d4:	e004      	b.n	33e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    33d6:	f240 11f9 	movw	r1, #505	; 0x1f9
    33da:	206c      	movs	r0, #108	; 0x6c
    33dc:	f000 fe2e 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33e0:	f240 11fd 	movw	r1, #509	; 0x1fd
    33e4:	206c      	movs	r0, #108	; 0x6c
    33e6:	f000 fe29 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33ea:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    33ee:	f240 2109 	movw	r1, #521	; 0x209
    33f2:	206c      	movs	r0, #108	; 0x6c
    33f4:	f000 fe22 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33f8:	20000018 	.word	0x20000018
    33fc:	2000001b 	.word	0x2000001b
    3400:	4001f508 	.word	0x4001f508
    3404:	4000b000 	.word	0x4000b000
    3408:	4000b504 	.word	0x4000b504
    340c:	4001f504 	.word	0x4001f504

00003410 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3410:	4801      	ldr	r0, [pc, #4]	; (3418 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3412:	68c0      	ldr	r0, [r0, #12]
    3414:	4770      	bx	lr
    3416:	0000      	.short	0x0000
    3418:	20000018 	.word	0x20000018

0000341c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    341c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3420:	4833      	ldr	r0, [pc, #204]	; (34f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    3422:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3426:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    342a:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 34f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    342e:	4a32      	ldr	r2, [pc, #200]	; (34f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3430:	2100      	movs	r1, #0
    3432:	f89c 3000 	ldrb.w	r3, [ip]
    3436:	b163      	cbz	r3, 3452 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3438:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    343c:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3440:	6011      	str	r1, [r2, #0]
    3442:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3446:	bf00      	nop
    3448:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    344c:	2201      	movs	r2, #1
    344e:	b980      	cbnz	r0, 3472 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    3450:	e009      	b.n	3466 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    3452:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3456:	4c29      	ldr	r4, [pc, #164]	; (34fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3458:	6021      	str	r1, [r4, #0]
    345a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    345e:	6011      	str	r1, [r2, #0]
    3460:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3464:	e7f0      	b.n	3448 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    3466:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    346a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    346e:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3472:	2b02      	cmp	r3, #2
    3474:	d004      	beq.n	3480 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    3476:	f240 2115 	movw	r1, #533	; 0x215
    347a:	206c      	movs	r0, #108	; 0x6c
    347c:	f000 fdde 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3480:	4e1f      	ldr	r6, [pc, #124]	; (3500 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3482:	6830      	ldr	r0, [r6, #0]
    3484:	4c1f      	ldr	r4, [pc, #124]	; (3504 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3486:	1cc0      	adds	r0, r0, #3
    3488:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    348c:	68e3      	ldr	r3, [r4, #12]
    348e:	4d1e      	ldr	r5, [pc, #120]	; (3508 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3490:	4298      	cmp	r0, r3
    3492:	d00b      	beq.n	34ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3494:	6837      	ldr	r7, [r6, #0]
    3496:	1bdf      	subs	r7, r3, r7
    3498:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    349c:	2f04      	cmp	r7, #4
    349e:	d305      	bcc.n	34ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    34a0:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    34a4:	d202      	bcs.n	34ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    34a6:	f7ff feb3 	bl	3210 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    34aa:	e01b      	b.n	34e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    34ac:	6830      	ldr	r0, [r6, #0]
    34ae:	1a18      	subs	r0, r3, r0
    34b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34b4:	2802      	cmp	r0, #2
    34b6:	d313      	bcc.n	34e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    34b8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    34bc:	d210      	bcs.n	34e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    34be:	4b13      	ldr	r3, [pc, #76]	; (350c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    34c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    34c4:	6018      	str	r0, [r3, #0]
    34c6:	60a2      	str	r2, [r4, #8]
    34c8:	7021      	strb	r1, [r4, #0]
    34ca:	606a      	str	r2, [r5, #4]
    34cc:	60ea      	str	r2, [r5, #12]
    34ce:	0040      	lsls	r0, r0, #1
    34d0:	1f19      	subs	r1, r3, #4
    34d2:	6008      	str	r0, [r1, #0]
    34d4:	2004      	movs	r0, #4
    34d6:	f88c 0001 	strb.w	r0, [ip, #1]
    34da:	f88c 2000 	strb.w	r2, [ip]
    34de:	e001      	b.n	34e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    34e0:	60a2      	str	r2, [r4, #8]
    34e2:	7021      	strb	r1, [r4, #0]
    34e4:	68a0      	ldr	r0, [r4, #8]
    34e6:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    34ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34ee:	0000      	.short	0x0000
    34f0:	4000b000 	.word	0x4000b000
    34f4:	2000001b 	.word	0x2000001b
    34f8:	4000b544 	.word	0x4000b544
    34fc:	4000b540 	.word	0x4000b540
    3500:	4000b504 	.word	0x4000b504
    3504:	20000018 	.word	0x20000018
    3508:	40008000 	.word	0x40008000
    350c:	4001f508 	.word	0x4001f508

00003510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3514:	f8df c174 	ldr.w	ip, [pc, #372]	; 368c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    3518:	2701      	movs	r7, #1
    351a:	f04f 0800 	mov.w	r8, #0
    351e:	f89c 5000 	ldrb.w	r5, [ip]
    3522:	f89c c001 	ldrb.w	ip, [ip, #1]
    3526:	2807      	cmp	r0, #7
    3528:	d27e      	bcs.n	3628 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    352a:	e8df f000 	tbb	[pc, r0]
    352e:	0404      	.short	0x0404
    3530:	6a6a0404 	.word	0x6a6a0404
    3534:	006a      	.short	0x006a
    3536:	4c56      	ldr	r4, [pc, #344]	; (3690 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    3538:	68e6      	ldr	r6, [r4, #12]
    353a:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    353e:	bf04      	itt	eq
    3540:	7864      	ldrbeq	r4, [r4, #1]
    3542:	2c00      	cmpeq	r4, #0
    3544:	d002      	beq.n	354c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3546:	2d02      	cmp	r5, #2
    3548:	d005      	beq.n	3556 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    354a:	e03c      	b.n	35c6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    354c:	f44f 7112 	mov.w	r1, #584	; 0x248
    3550:	206c      	movs	r0, #108	; 0x6c
    3552:	f000 fd73 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3556:	ea4f 048c 	mov.w	r4, ip, lsl #2
    355a:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    355e:	f1ac 0404 	sub.w	r4, ip, #4
    3562:	0624      	lsls	r4, r4, #24
    3564:	0da4      	lsrs	r4, r4, #22
    3566:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    356a:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    356e:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    3572:	2400      	movs	r4, #0
    3574:	2d01      	cmp	r5, #1
    3576:	d002      	beq.n	357e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    3578:	2d02      	cmp	r5, #2
    357a:	d011      	beq.n	35a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    357c:	e020      	b.n	35c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    357e:	f1bc 0f04 	cmp.w	ip, #4
    3582:	d205      	bcs.n	3590 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    3584:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3588:	f1ba 0f00 	cmp.w	sl, #0
    358c:	d118      	bne.n	35c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    358e:	e004      	b.n	359a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3590:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3594:	f1ba 0f00 	cmp.w	sl, #0
    3598:	d112      	bne.n	35c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    359a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    359e:	e00f      	b.n	35c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    35a0:	f1bc 0f04 	cmp.w	ip, #4
    35a4:	d205      	bcs.n	35b2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    35a6:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    35aa:	f1ba 0f00 	cmp.w	sl, #0
    35ae:	d107      	bne.n	35c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    35b0:	e004      	b.n	35bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    35b2:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    35b6:	f1ba 0f00 	cmp.w	sl, #0
    35ba:	d101      	bne.n	35c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    35bc:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    35c0:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    35c4:	d1d5      	bne.n	3572 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    35c6:	4c33      	ldr	r4, [pc, #204]	; (3694 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    35c8:	f100 0c10 	add.w	ip, r0, #16
    35cc:	fa07 fc0c 	lsl.w	ip, r7, ip
    35d0:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    35d4:	0080      	lsls	r0, r0, #2
    35d6:	4420      	add	r0, r4
    35d8:	b152      	cbz	r2, 35f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    35da:	6407      	str	r7, [r0, #64]	; 0x40
    35dc:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    35e0:	1b8d      	subs	r5, r1, r6
    35e2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    35e6:	42aa      	cmp	r2, r5
    35e8:	bf98      	it	ls
    35ea:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    35ee:	d243      	bcs.n	3678 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    35f0:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35f4:	2b01      	cmp	r3, #1
    35f6:	bf08      	it	eq
    35f8:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    35fc:	2001      	movs	r0, #1
    35fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3602:	b135      	cbz	r5, 3612 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3604:	4584      	cmp	ip, r0
    3606:	d104      	bne.n	3612 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3608:	f240 216b 	movw	r1, #619	; 0x26b
    360c:	206c      	movs	r0, #108	; 0x6c
    360e:	f000 fd15 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3612:	1f00      	subs	r0, r0, #4
    3614:	b2c0      	uxtb	r0, r0
    3616:	2b01      	cmp	r3, #1
    3618:	bf0c      	ite	eq
    361a:	2401      	moveq	r4, #1
    361c:	2400      	movne	r4, #0
    361e:	2803      	cmp	r0, #3
    3620:	d306      	bcc.n	3630 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    3622:	f240 1145 	movw	r1, #325	; 0x145
    3626:	e000      	b.n	362a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3628:	e02b      	b.n	3682 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    362a:	206c      	movs	r0, #108	; 0x6c
    362c:	f000 fd06 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3630:	f8df c064 	ldr.w	ip, [pc, #100]	; 3698 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3634:	f100 0310 	add.w	r3, r0, #16
    3638:	fa07 f303 	lsl.w	r3, r7, r3
    363c:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3640:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3644:	0080      	lsls	r0, r0, #2
    3646:	4460      	add	r0, ip
    3648:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    364c:	b14a      	cbz	r2, 3662 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    364e:	4d13      	ldr	r5, [pc, #76]	; (369c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3650:	682e      	ldr	r6, [r5, #0]
    3652:	1b8d      	subs	r5, r1, r6
    3654:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3658:	42aa      	cmp	r2, r5
    365a:	bf98      	it	ls
    365c:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3660:	d20a      	bcs.n	3678 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3662:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3666:	2c00      	cmp	r4, #0
    3668:	bf18      	it	ne
    366a:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    366e:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3672:	2001      	movs	r0, #1
    3674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3678:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    367c:	2000      	movs	r0, #0
    367e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3682:	f44f 711c 	mov.w	r1, #624	; 0x270
    3686:	206c      	movs	r0, #108	; 0x6c
    3688:	f000 fcd8 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    368c:	2000001b 	.word	0x2000001b
    3690:	20000018 	.word	0x20000018
    3694:	40008000 	.word	0x40008000
    3698:	4000b000 	.word	0x4000b000
    369c:	4000b504 	.word	0x4000b504

000036a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    36a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36a2:	2701      	movs	r7, #1
    36a4:	2400      	movs	r4, #0
    36a6:	2807      	cmp	r0, #7
    36a8:	d24c      	bcs.n	3744 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    36aa:	e8df f000 	tbb	[pc, r0]
    36ae:	0404      	.short	0x0404
    36b0:	16160404 	.word	0x16160404
    36b4:	0016      	.short	0x0016
    36b6:	4a26      	ldr	r2, [pc, #152]	; (3750 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    36b8:	f100 0110 	add.w	r1, r0, #16
    36bc:	fa07 f101 	lsl.w	r1, r7, r1
    36c0:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    36c4:	0081      	lsls	r1, r0, #2
    36c6:	4411      	add	r1, r2
    36c8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    36cc:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    36d0:	4920      	ldr	r1, [pc, #128]	; (3754 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    36d2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    36d6:	9000      	str	r0, [sp, #0]
    36d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36da:	4d1f      	ldr	r5, [pc, #124]	; (3758 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    36dc:	1f01      	subs	r1, r0, #4
    36de:	b2ce      	uxtb	r6, r1
    36e0:	7829      	ldrb	r1, [r5, #0]
    36e2:	b179      	cbz	r1, 3704 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    36e4:	786a      	ldrb	r2, [r5, #1]
    36e6:	4282      	cmp	r2, r0
    36e8:	d10c      	bne.n	3704 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    36ea:	4a1c      	ldr	r2, [pc, #112]	; (375c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    36ec:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    36f0:	6010      	str	r0, [r2, #0]
    36f2:	2901      	cmp	r1, #1
    36f4:	bf08      	it	eq
    36f6:	f7ff fd57 	bleq	31a8 <MPSL_IRQ_TIMER0_Handler+0xf8>
    36fa:	702c      	strb	r4, [r5, #0]
    36fc:	4918      	ldr	r1, [pc, #96]	; (3760 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    36fe:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3702:	60c8      	str	r0, [r1, #12]
    3704:	f106 0010 	add.w	r0, r6, #16
    3708:	fa07 f100 	lsl.w	r1, r7, r0
    370c:	4815      	ldr	r0, [pc, #84]	; (3764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    370e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3712:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3716:	00b0      	lsls	r0, r6, #2
    3718:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    371c:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3720:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3724:	4a10      	ldr	r2, [pc, #64]	; (3768 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3726:	6812      	ldr	r2, [r2, #0]
    3728:	1a89      	subs	r1, r1, r2
    372a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    372e:	2902      	cmp	r1, #2
    3730:	bf24      	itt	cs
    3732:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    3736:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    373a:	480c      	ldr	r0, [pc, #48]	; (376c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    373c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3740:	9000      	str	r0, [sp, #0]
    3742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3744:	f240 21e9 	movw	r1, #745	; 0x2e9
    3748:	206c      	movs	r0, #108	; 0x6c
    374a:	f000 fc77 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    374e:	0000      	.short	0x0000
    3750:	40008000 	.word	0x40008000
    3754:	40008140 	.word	0x40008140
    3758:	2000001b 	.word	0x2000001b
    375c:	4001f508 	.word	0x4001f508
    3760:	20000018 	.word	0x20000018
    3764:	4000b000 	.word	0x4000b000
    3768:	4000b504 	.word	0x4000b504
    376c:	4000b140 	.word	0x4000b140

00003770 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3770:	491e      	ldr	r1, [pc, #120]	; (37ec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3772:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3776:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    377a:	481d      	ldr	r0, [pc, #116]	; (37f0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    377c:	4a1d      	ldr	r2, [pc, #116]	; (37f4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    377e:	f890 c000 	ldrb.w	ip, [r0]
    3782:	2000      	movs	r0, #0
    3784:	f1bc 0f00 	cmp.w	ip, #0
    3788:	d00a      	beq.n	37a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    378a:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    378e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3792:	6010      	str	r0, [r2, #0]
    3794:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3798:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    379c:	b981      	cbnz	r1, 37c0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    379e:	e009      	b.n	37b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    37a0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    37a4:	4b14      	ldr	r3, [pc, #80]	; (37f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    37a6:	6018      	str	r0, [r3, #0]
    37a8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    37ac:	6010      	str	r0, [r2, #0]
    37ae:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    37b2:	e7f1      	b.n	3798 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    37b4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    37b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    37bc:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    37c0:	490e      	ldr	r1, [pc, #56]	; (37fc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    37c2:	f04f 32ff 	mov.w	r2, #4294967295
    37c6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    37ca:	4a0d      	ldr	r2, [pc, #52]	; (3800 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    37cc:	6010      	str	r0, [r2, #0]
    37ce:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    37d2:	1d12      	adds	r2, r2, #4
    37d4:	6010      	str	r0, [r2, #0]
    37d6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    37da:	1d12      	adds	r2, r2, #4
    37dc:	6010      	str	r0, [r2, #0]
    37de:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    37e2:	1d12      	adds	r2, r2, #4
    37e4:	6010      	str	r0, [r2, #0]
    37e6:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    37ea:	4770      	bx	lr
    37ec:	4000b000 	.word	0x4000b000
    37f0:	2000001b 	.word	0x2000001b
    37f4:	4000b544 	.word	0x4000b544
    37f8:	4000b540 	.word	0x4000b540
    37fc:	40008000 	.word	0x40008000
    3800:	40008540 	.word	0x40008540

00003804 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3804:	4808      	ldr	r0, [pc, #32]	; (3828 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3806:	f990 0002 	ldrsb.w	r0, [r0, #2]
    380a:	2800      	cmp	r0, #0
    380c:	bfb8      	it	lt
    380e:	4770      	bxlt	lr
    3810:	f000 011f 	and.w	r1, r0, #31
    3814:	2201      	movs	r2, #1
    3816:	fa02 f101 	lsl.w	r1, r2, r1
    381a:	0940      	lsrs	r0, r0, #5
    381c:	0080      	lsls	r0, r0, #2
    381e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3822:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3826:	4770      	bx	lr
    3828:	20000018 	.word	0x20000018

0000382c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    382c:	b510      	push	{r4, lr}
    382e:	2807      	cmp	r0, #7
    3830:	d20d      	bcs.n	384e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3832:	e8df f000 	tbb	[pc, r0]
    3836:	0404      	.short	0x0404
    3838:	06060404 	.word	0x06060404
    383c:	0006      	.short	0x0006
    383e:	4906      	ldr	r1, [pc, #24]	; (3858 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3840:	e002      	b.n	3848 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3842:	1f00      	subs	r0, r0, #4
    3844:	4905      	ldr	r1, [pc, #20]	; (385c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3846:	b2c0      	uxtb	r0, r0
    3848:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    384c:	bd10      	pop	{r4, pc}
    384e:	f44f 7125 	mov.w	r1, #660	; 0x294
    3852:	206c      	movs	r0, #108	; 0x6c
    3854:	f000 fbf2 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3858:	40008140 	.word	0x40008140
    385c:	4000b140 	.word	0x4000b140

00003860 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3860:	b510      	push	{r4, lr}
    3862:	2807      	cmp	r0, #7
    3864:	d20d      	bcs.n	3882 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3866:	e8df f000 	tbb	[pc, r0]
    386a:	0404      	.short	0x0404
    386c:	06060404 	.word	0x06060404
    3870:	0006      	.short	0x0006
    3872:	4906      	ldr	r1, [pc, #24]	; (388c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3874:	e002      	b.n	387c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3876:	1f00      	subs	r0, r0, #4
    3878:	4905      	ldr	r1, [pc, #20]	; (3890 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    387a:	b2c0      	uxtb	r0, r0
    387c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3880:	bd10      	pop	{r4, pc}
    3882:	f44f 7125 	mov.w	r1, #660	; 0x294
    3886:	206c      	movs	r0, #108	; 0x6c
    3888:	f000 fbd8 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    388c:	40008140 	.word	0x40008140
    3890:	4000b140 	.word	0x4000b140

00003894 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3894:	b570      	push	{r4, r5, r6, lr}
    3896:	4819      	ldr	r0, [pc, #100]	; (38fc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    3898:	2400      	movs	r4, #0
    389a:	2104      	movs	r1, #4
    389c:	7004      	strb	r4, [r0, #0]
    389e:	1ec0      	subs	r0, r0, #3
    38a0:	7001      	strb	r1, [r0, #0]
    38a2:	0589      	lsls	r1, r1, #22
    38a4:	60c1      	str	r1, [r0, #12]
    38a6:	f7ff fc7f 	bl	31a8 <MPSL_IRQ_TIMER0_Handler+0xf8>
    38aa:	2501      	movs	r5, #1
    38ac:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    38b0:	02eb      	lsls	r3, r5, #11
    38b2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    38b6:	f3bf 8f4f 	dsb	sy
    38ba:	f3bf 8f6f 	isb	sy
    38be:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    38c2:	4a0f      	ldr	r2, [pc, #60]	; (3900 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    38c4:	6055      	str	r5, [r2, #4]
    38c6:	6095      	str	r5, [r2, #8]
    38c8:	480e      	ldr	r0, [pc, #56]	; (3904 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    38ca:	6801      	ldr	r1, [r0, #0]
    38cc:	2900      	cmp	r1, #0
    38ce:	d1fc      	bne.n	38ca <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    38d0:	1e48      	subs	r0, r1, #1
    38d2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    38d6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    38da:	480b      	ldr	r0, [pc, #44]	; (3908 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    38dc:	6004      	str	r4, [r0, #0]
    38de:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    38e2:	1d00      	adds	r0, r0, #4
    38e4:	6004      	str	r4, [r0, #0]
    38e6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    38ea:	1d00      	adds	r0, r0, #4
    38ec:	6004      	str	r4, [r0, #0]
    38ee:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    38f2:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    38f6:	6015      	str	r5, [r2, #0]
    38f8:	bd70      	pop	{r4, r5, r6, pc}
    38fa:	0000      	.short	0x0000
    38fc:	2000001b 	.word	0x2000001b
    3900:	4000b000 	.word	0x4000b000
    3904:	4000b504 	.word	0x4000b504
    3908:	4000b540 	.word	0x4000b540

0000390c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    390c:	0b43      	lsrs	r3, r0, #13
    390e:	f248 6c37 	movw	ip, #34359	; 0x8637
    3912:	fb03 f30c 	mul.w	r3, r3, ip
    3916:	0c1b      	lsrs	r3, r3, #16
    3918:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    391c:	f8c1 c000 	str.w	ip, [r1]
    3920:	f8df c038 	ldr.w	ip, [pc, #56]	; 395c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    3924:	fb03 030c 	mla	r3, r3, ip, r0
    3928:	480d      	ldr	r0, [pc, #52]	; (3960 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    392a:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    392e:	4358      	muls	r0, r3
    3930:	0d40      	lsrs	r0, r0, #21
    3932:	fb10 fc0c 	smulbb	ip, r0, ip
    3936:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    393a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    393e:	125b      	asrs	r3, r3, #9
    3940:	7013      	strb	r3, [r2, #0]
    3942:	680b      	ldr	r3, [r1, #0]
    3944:	4418      	add	r0, r3
    3946:	6008      	str	r0, [r1, #0]
    3948:	7810      	ldrb	r0, [r2, #0]
    394a:	281f      	cmp	r0, #31
    394c:	bf18      	it	ne
    394e:	4770      	bxne	lr
    3950:	2000      	movs	r0, #0
    3952:	7010      	strb	r0, [r2, #0]
    3954:	6808      	ldr	r0, [r1, #0]
    3956:	1c40      	adds	r0, r0, #1
    3958:	6008      	str	r0, [r1, #0]
    395a:	4770      	bx	lr
    395c:	ffffc2f7 	.word	0xffffc2f7
    3960:	00010c6f 	.word	0x00010c6f

00003964 <MPSL_IRQ_CLOCK_Handler>:
    3964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3968:	4c16      	ldr	r4, [pc, #88]	; (39c4 <MPSL_IRQ_CLOCK_Handler+0x60>)
    396a:	7a60      	ldrb	r0, [r4, #9]
    396c:	2800      	cmp	r0, #0
    396e:	d027      	beq.n	39c0 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3970:	f44f 7180 	mov.w	r1, #256	; 0x100
    3974:	058d      	lsls	r5, r1, #22
    3976:	4628      	mov	r0, r5
    3978:	f008 fec6 	bl	c708 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    397c:	4680      	mov	r8, r0
    397e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3982:	4628      	mov	r0, r5
    3984:	f008 fec0 	bl	c708 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3988:	2600      	movs	r6, #0
    398a:	4607      	mov	r7, r0
    398c:	f1b8 0f00 	cmp.w	r8, #0
    3990:	d009      	beq.n	39a6 <MPSL_IRQ_CLOCK_Handler+0x42>
    3992:	2001      	movs	r0, #1
    3994:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3998:	7920      	ldrb	r0, [r4, #4]
    399a:	b120      	cbz	r0, 39a6 <MPSL_IRQ_CLOCK_Handler+0x42>
    399c:	7126      	strb	r6, [r4, #4]
    399e:	69e0      	ldr	r0, [r4, #28]
    39a0:	b108      	cbz	r0, 39a6 <MPSL_IRQ_CLOCK_Handler+0x42>
    39a2:	4780      	blx	r0
    39a4:	61e6      	str	r6, [r4, #28]
    39a6:	b137      	cbz	r7, 39b6 <MPSL_IRQ_CLOCK_Handler+0x52>
    39a8:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    39ac:	2002      	movs	r0, #2
    39ae:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    39b2:	f000 fa8b 	bl	3ecc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    39b6:	4640      	mov	r0, r8
    39b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39bc:	f000 b85a 	b.w	3a74 <MPSL_IRQ_CLOCK_Handler+0x110>
    39c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39c4:	20000028 	.word	0x20000028
    39c8:	b510      	push	{r4, lr}
    39ca:	f008 ff47 	bl	c85c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    39ce:	b930      	cbnz	r0, 39de <MPSL_IRQ_CLOCK_Handler+0x7a>
    39d0:	f008 ff65 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39d4:	b918      	cbnz	r0, 39de <MPSL_IRQ_CLOCK_Handler+0x7a>
    39d6:	f008 ff98 	bl	c90a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    39da:	2800      	cmp	r0, #0
    39dc:	d002      	beq.n	39e4 <MPSL_IRQ_CLOCK_Handler+0x80>
    39de:	4902      	ldr	r1, [pc, #8]	; (39e8 <MPSL_IRQ_CLOCK_Handler+0x84>)
    39e0:	2002      	movs	r0, #2
    39e2:	6008      	str	r0, [r1, #0]
    39e4:	bd10      	pop	{r4, pc}
    39e6:	0000      	.short	0x0000
    39e8:	40000c34 	.word	0x40000c34
    39ec:	b570      	push	{r4, r5, r6, lr}
    39ee:	f000 f987 	bl	3d00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    39f2:	f000 fabf 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    39f6:	4c09      	ldr	r4, [pc, #36]	; (3a1c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    39f8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    39fc:	b130      	cbz	r0, 3a0c <MPSL_IRQ_CLOCK_Handler+0xa8>
    39fe:	f7ff ffe3 	bl	39c8 <MPSL_IRQ_CLOCK_Handler+0x64>
    3a02:	2001      	movs	r0, #1
    3a04:	6128      	str	r0, [r5, #16]
    3a06:	2004      	movs	r0, #4
    3a08:	72a0      	strb	r0, [r4, #10]
    3a0a:	e004      	b.n	3a16 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3a0c:	2003      	movs	r0, #3
    3a0e:	72a0      	strb	r0, [r4, #10]
    3a10:	2001      	movs	r0, #1
    3a12:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3a16:	2000      	movs	r0, #0
    3a18:	71e0      	strb	r0, [r4, #7]
    3a1a:	bd70      	pop	{r4, r5, r6, pc}
    3a1c:	20000028 	.word	0x20000028
    3a20:	b570      	push	{r4, r5, r6, lr}
    3a22:	4c13      	ldr	r4, [pc, #76]	; (3a70 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3a24:	79a0      	ldrb	r0, [r4, #6]
    3a26:	b1f0      	cbz	r0, 3a66 <MPSL_IRQ_CLOCK_Handler+0x102>
    3a28:	2801      	cmp	r0, #1
    3a2a:	d003      	beq.n	3a34 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3a2c:	79e1      	ldrb	r1, [r4, #7]
    3a2e:	1e40      	subs	r0, r0, #1
    3a30:	4281      	cmp	r1, r0
    3a32:	da18      	bge.n	3a66 <MPSL_IRQ_CLOCK_Handler+0x102>
    3a34:	f000 fa9e 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3a38:	4605      	mov	r5, r0
    3a3a:	f000 fb6f 	bl	411c <mpsl_temperature_get>
    3a3e:	79a1      	ldrb	r1, [r4, #6]
    3a40:	2901      	cmp	r1, #1
    3a42:	d902      	bls.n	3a4a <MPSL_IRQ_CLOCK_Handler+0xe6>
    3a44:	79e1      	ldrb	r1, [r4, #7]
    3a46:	1c49      	adds	r1, r1, #1
    3a48:	71e1      	strb	r1, [r4, #7]
    3a4a:	b10d      	cbz	r5, 3a50 <MPSL_IRQ_CLOCK_Handler+0xec>
    3a4c:	6961      	ldr	r1, [r4, #20]
    3a4e:	e000      	b.n	3a52 <MPSL_IRQ_CLOCK_Handler+0xee>
    3a50:	6921      	ldr	r1, [r4, #16]
    3a52:	1a41      	subs	r1, r0, r1
    3a54:	2902      	cmp	r1, #2
    3a56:	da02      	bge.n	3a5e <MPSL_IRQ_CLOCK_Handler+0xfa>
    3a58:	f111 0f02 	cmn.w	r1, #2
    3a5c:	dc07      	bgt.n	3a6e <MPSL_IRQ_CLOCK_Handler+0x10a>
    3a5e:	b10d      	cbz	r5, 3a64 <MPSL_IRQ_CLOCK_Handler+0x100>
    3a60:	6160      	str	r0, [r4, #20]
    3a62:	e000      	b.n	3a66 <MPSL_IRQ_CLOCK_Handler+0x102>
    3a64:	6120      	str	r0, [r4, #16]
    3a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a6a:	f7ff bfbf 	b.w	39ec <MPSL_IRQ_CLOCK_Handler+0x88>
    3a6e:	bd70      	pop	{r4, r5, r6, pc}
    3a70:	20000028 	.word	0x20000028
    3a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a78:	4606      	mov	r6, r0
    3a7a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3a7e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3a82:	4628      	mov	r0, r5
    3a84:	f008 fe40 	bl	c708 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a88:	4680      	mov	r8, r0
    3a8a:	f44f 7188 	mov.w	r1, #272	; 0x110
    3a8e:	4628      	mov	r0, r5
    3a90:	f008 fe3a 	bl	c708 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a94:	4c27      	ldr	r4, [pc, #156]	; (3b34 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3a96:	4682      	mov	sl, r0
    3a98:	7827      	ldrb	r7, [r4, #0]
    3a9a:	f104 0008 	add.w	r0, r4, #8
    3a9e:	f008 fea7 	bl	c7f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3aa2:	b110      	cbz	r0, 3aaa <MPSL_IRQ_CLOCK_Handler+0x146>
    3aa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3aa8:	e016      	b.n	3ad8 <MPSL_IRQ_CLOCK_Handler+0x174>
    3aaa:	f04f 0901 	mov.w	r9, #1
    3aae:	b146      	cbz	r6, 3ac2 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3ab0:	7aa0      	ldrb	r0, [r4, #10]
    3ab2:	2803      	cmp	r0, #3
    3ab4:	d105      	bne.n	3ac2 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3ab6:	2004      	movs	r0, #4
    3ab8:	72a0      	strb	r0, [r4, #10]
    3aba:	f7ff ff85 	bl	39c8 <MPSL_IRQ_CLOCK_Handler+0x64>
    3abe:	f8c5 9010 	str.w	r9, [r5, #16]
    3ac2:	2600      	movs	r6, #0
    3ac4:	f1b8 0f00 	cmp.w	r8, #0
    3ac8:	d018      	beq.n	3afc <MPSL_IRQ_CLOCK_Handler+0x198>
    3aca:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3ace:	7aa0      	ldrb	r0, [r4, #10]
    3ad0:	2804      	cmp	r0, #4
    3ad2:	d004      	beq.n	3ade <MPSL_IRQ_CLOCK_Handler+0x17a>
    3ad4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3ad8:	206d      	movs	r0, #109	; 0x6d
    3ada:	f000 faaf 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ade:	f008 febd 	bl	c85c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3ae2:	b928      	cbnz	r0, 3af0 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3ae4:	f008 fedb 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3ae8:	b910      	cbnz	r0, 3af0 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3aea:	f008 ff0e 	bl	c90a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3aee:	b108      	cbz	r0, 3af4 <MPSL_IRQ_CLOCK_Handler+0x190>
    3af0:	4811      	ldr	r0, [pc, #68]	; (3b38 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3af2:	6006      	str	r6, [r0, #0]
    3af4:	2002      	movs	r0, #2
    3af6:	72a0      	strb	r0, [r4, #10]
    3af8:	f000 f8e6 	bl	3cc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3afc:	f1ba 0f00 	cmp.w	sl, #0
    3b00:	d008      	beq.n	3b14 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3b02:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3b06:	7aa0      	ldrb	r0, [r4, #10]
    3b08:	2802      	cmp	r0, #2
    3b0a:	d101      	bne.n	3b10 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3b0c:	f7ff ff88 	bl	3a20 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3b10:	f8c5 9014 	str.w	r9, [r5, #20]
    3b14:	b13f      	cbz	r7, 3b26 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3b16:	7026      	strb	r6, [r4, #0]
    3b18:	7aa0      	ldrb	r0, [r4, #10]
    3b1a:	2802      	cmp	r0, #2
    3b1c:	d101      	bne.n	3b22 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3b1e:	f7ff ff65 	bl	39ec <MPSL_IRQ_CLOCK_Handler+0x88>
    3b22:	f000 f8d1 	bl	3cc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3b26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b2a:	4802      	ldr	r0, [pc, #8]	; (3b34 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3b2c:	3008      	adds	r0, #8
    3b2e:	f008 be76 	b.w	c81e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3b32:	0000      	.short	0x0000
    3b34:	20000028 	.word	0x20000028
    3b38:	40000c34 	.word	0x40000c34
    3b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b40:	4c5c      	ldr	r4, [pc, #368]	; (3cb4 <MPSL_IRQ_CLOCK_Handler+0x350>)
    3b42:	f04f 0800 	mov.w	r8, #0
    3b46:	4606      	mov	r6, r0
    3b48:	f8c4 8018 	str.w	r8, [r4, #24]
    3b4c:	7843      	ldrb	r3, [r0, #1]
    3b4e:	7882      	ldrb	r2, [r0, #2]
    3b50:	7800      	ldrb	r0, [r0, #0]
    3b52:	72e0      	strb	r0, [r4, #11]
    3b54:	7163      	strb	r3, [r4, #5]
    3b56:	2701      	movs	r7, #1
    3b58:	71a2      	strb	r2, [r4, #6]
    3b5a:	07bd      	lsls	r5, r7, #30
    3b5c:	f884 8007 	strb.w	r8, [r4, #7]
    3b60:	2805      	cmp	r0, #5
    3b62:	d224      	bcs.n	3bae <MPSL_IRQ_CLOCK_Handler+0x24a>
    3b64:	e8df f000 	tbb	[pc, r0]
    3b68:	1f05030f 	.word	0x1f05030f
    3b6c:	0021      	.short	0x0021
    3b6e:	61a7      	str	r7, [r4, #24]
    3b70:	e009      	b.n	3b86 <MPSL_IRQ_CLOCK_Handler+0x222>
    3b72:	f000 f8c5 	bl	3d00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3b76:	2101      	movs	r1, #1
    3b78:	4628      	mov	r0, r5
    3b7a:	f008 fdca 	bl	c712 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3b7e:	2800      	cmp	r0, #0
    3b80:	d0f9      	beq.n	3b76 <MPSL_IRQ_CLOCK_Handler+0x212>
    3b82:	2002      	movs	r0, #2
    3b84:	61a0      	str	r0, [r4, #24]
    3b86:	f008 fdf0 	bl	c76a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3b8a:	b1b0      	cbz	r0, 3bba <MPSL_IRQ_CLOCK_Handler+0x256>
    3b8c:	f000 fa0c 	bl	3fa8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3b90:	7e21      	ldrb	r1, [r4, #24]
    3b92:	f001 0103 	and.w	r1, r1, #3
    3b96:	4288      	cmp	r0, r1
    3b98:	d10f      	bne.n	3bba <MPSL_IRQ_CLOCK_Handler+0x256>
    3b9a:	79b0      	ldrb	r0, [r6, #6]
    3b9c:	b150      	cbz	r0, 3bb4 <MPSL_IRQ_CLOCK_Handler+0x250>
    3b9e:	2002      	movs	r0, #2
    3ba0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3ba4:	e06a      	b.n	3c7c <MPSL_IRQ_CLOCK_Handler+0x318>
    3ba6:	4844      	ldr	r0, [pc, #272]	; (3cb8 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3ba8:	e7ec      	b.n	3b84 <MPSL_IRQ_CLOCK_Handler+0x220>
    3baa:	4844      	ldr	r0, [pc, #272]	; (3cbc <MPSL_IRQ_CLOCK_Handler+0x358>)
    3bac:	e7ea      	b.n	3b84 <MPSL_IRQ_CLOCK_Handler+0x220>
    3bae:	f44f 714c 	mov.w	r1, #816	; 0x330
    3bb2:	e049      	b.n	3c48 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3bb4:	f000 f9cc 	bl	3f50 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3bb8:	e060      	b.n	3c7c <MPSL_IRQ_CLOCK_Handler+0x318>
    3bba:	60ef      	str	r7, [r5, #12]
    3bbc:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3bc0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3bc4:	69a0      	ldr	r0, [r4, #24]
    3bc6:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3bca:	f008 fe33 	bl	c834 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3bce:	b940      	cbnz	r0, 3be2 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3bd0:	f008 fe3a 	bl	c848 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3bd4:	b928      	cbnz	r0, 3be2 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3bd6:	f008 fe4e 	bl	c876 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3bda:	b910      	cbnz	r0, 3be2 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3bdc:	f008 fe5f 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3be0:	b138      	cbz	r0, 3bf2 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3be2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3be6:	4836      	ldr	r0, [pc, #216]	; (3cc0 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3be8:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3bec:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3bf0:	6001      	str	r1, [r0, #0]
    3bf2:	f008 fe1f 	bl	c834 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3bf6:	b940      	cbnz	r0, 3c0a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3bf8:	f008 fe26 	bl	c848 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3bfc:	b928      	cbnz	r0, 3c0a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3bfe:	f008 fe3a 	bl	c876 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3c02:	b910      	cbnz	r0, 3c0a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3c04:	f008 fe4b 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3c08:	b110      	cbz	r0, 3c10 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3c0a:	482d      	ldr	r0, [pc, #180]	; (3cc0 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3c0c:	3010      	adds	r0, #16
    3c0e:	6007      	str	r7, [r0, #0]
    3c10:	60af      	str	r7, [r5, #8]
    3c12:	2002      	movs	r0, #2
    3c14:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3c18:	79b0      	ldrb	r0, [r6, #6]
    3c1a:	bb78      	cbnz	r0, 3c7c <MPSL_IRQ_CLOCK_Handler+0x318>
    3c1c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3c20:	f010 0f02 	tst.w	r0, #2
    3c24:	d00e      	beq.n	3c44 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3c26:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3cc4 <MPSL_IRQ_CLOCK_Handler+0x360>
    3c2a:	f8d9 1000 	ldr.w	r1, [r9]
    3c2e:	43c9      	mvns	r1, r1
    3c30:	f341 1700 	sbfx	r7, r1, #4, #1
    3c34:	f8d9 1000 	ldr.w	r1, [r9]
    3c38:	f041 0110 	orr.w	r1, r1, #16
    3c3c:	f8c9 1000 	str.w	r1, [r9]
    3c40:	1c7f      	adds	r7, r7, #1
    3c42:	e007      	b.n	3c54 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3c44:	f240 21f1 	movw	r1, #753	; 0x2f1
    3c48:	206d      	movs	r0, #109	; 0x6d
    3c4a:	f000 f9f7 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c4e:	bf00      	nop
    3c50:	f000 fb1a 	bl	4288 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3c54:	4651      	mov	r1, sl
    3c56:	4628      	mov	r0, r5
    3c58:	f008 fd56 	bl	c708 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3c5c:	2800      	cmp	r0, #0
    3c5e:	d0f7      	beq.n	3c50 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3c60:	f000 f976 	bl	3f50 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3c64:	b92f      	cbnz	r7, 3c72 <MPSL_IRQ_CLOCK_Handler+0x30e>
    3c66:	f8d9 1000 	ldr.w	r1, [r9]
    3c6a:	f021 0110 	bic.w	r1, r1, #16
    3c6e:	f8c9 1000 	str.w	r1, [r9]
    3c72:	2002      	movs	r0, #2
    3c74:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3c78:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3c7c:	79a0      	ldrb	r0, [r4, #6]
    3c7e:	b170      	cbz	r0, 3c9e <MPSL_IRQ_CLOCK_Handler+0x33a>
    3c80:	7830      	ldrb	r0, [r6, #0]
    3c82:	b960      	cbnz	r0, 3c9e <MPSL_IRQ_CLOCK_Handler+0x33a>
    3c84:	f000 f976 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3c88:	4606      	mov	r6, r0
    3c8a:	f000 fa47 	bl	411c <mpsl_temperature_get>
    3c8e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3c92:	b116      	cbz	r6, 3c9a <MPSL_IRQ_CLOCK_Handler+0x336>
    3c94:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3c98:	e001      	b.n	3c9e <MPSL_IRQ_CLOCK_Handler+0x33a>
    3c9a:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3c9e:	2101      	movs	r1, #1
    3ca0:	4628      	mov	r0, r5
    3ca2:	f008 fd36 	bl	c712 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3ca6:	b108      	cbz	r0, 3cac <MPSL_IRQ_CLOCK_Handler+0x348>
    3ca8:	f000 f95e 	bl	3f68 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3cac:	f884 800a 	strb.w	r8, [r4, #10]
    3cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3cb4:	20000028 	.word	0x20000028
    3cb8:	00020001 	.word	0x00020001
    3cbc:	00030001 	.word	0x00030001
    3cc0:	4000053c 	.word	0x4000053c
    3cc4:	e000ed10 	.word	0xe000ed10

00003cc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3cc8:	b510      	push	{r4, lr}
    3cca:	f3ef 8410 	mrs	r4, PRIMASK
    3cce:	b672      	cpsid	i
    3cd0:	480a      	ldr	r0, [pc, #40]	; (3cfc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3cd2:	7841      	ldrb	r1, [r0, #1]
    3cd4:	b129      	cbz	r1, 3ce2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3cd6:	7841      	ldrb	r1, [r0, #1]
    3cd8:	1e49      	subs	r1, r1, #1
    3cda:	7041      	strb	r1, [r0, #1]
    3cdc:	7841      	ldrb	r1, [r0, #1]
    3cde:	b129      	cbz	r1, 3cec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3ce0:	e008      	b.n	3cf4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3ce2:	f240 110d 	movw	r1, #269	; 0x10d
    3ce6:	206d      	movs	r0, #109	; 0x6d
    3ce8:	f000 f9a8 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cec:	7880      	ldrb	r0, [r0, #2]
    3cee:	b908      	cbnz	r0, 3cf4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3cf0:	f000 f94e 	bl	3f90 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3cf4:	2c00      	cmp	r4, #0
    3cf6:	d100      	bne.n	3cfa <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3cf8:	b662      	cpsie	i
    3cfa:	bd10      	pop	{r4, pc}
    3cfc:	20000028 	.word	0x20000028

00003d00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3d00:	b510      	push	{r4, lr}
    3d02:	f3ef 8410 	mrs	r4, PRIMASK
    3d06:	b672      	cpsid	i
    3d08:	4806      	ldr	r0, [pc, #24]	; (3d24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3d0a:	7841      	ldrb	r1, [r0, #1]
    3d0c:	1c49      	adds	r1, r1, #1
    3d0e:	7041      	strb	r1, [r0, #1]
    3d10:	7840      	ldrb	r0, [r0, #1]
    3d12:	2801      	cmp	r0, #1
    3d14:	d101      	bne.n	3d1a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3d16:	f008 fd13 	bl	c740 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3d1a:	2c00      	cmp	r4, #0
    3d1c:	d100      	bne.n	3d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3d1e:	b662      	cpsie	i
    3d20:	bd10      	pop	{r4, pc}
    3d22:	0000      	.short	0x0000
    3d24:	20000028 	.word	0x20000028

00003d28 <mpsl_clock_hfclk_release>:
    3d28:	4805      	ldr	r0, [pc, #20]	; (3d40 <mpsl_clock_hfclk_release+0x18>)
    3d2a:	b510      	push	{r4, lr}
    3d2c:	78c1      	ldrb	r1, [r0, #3]
    3d2e:	b121      	cbz	r1, 3d3a <mpsl_clock_hfclk_release+0x12>
    3d30:	2100      	movs	r1, #0
    3d32:	7101      	strb	r1, [r0, #4]
    3d34:	70c1      	strb	r1, [r0, #3]
    3d36:	f7ff ffc7 	bl	3cc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3d3a:	2000      	movs	r0, #0
    3d3c:	bd10      	pop	{r4, pc}
    3d3e:	0000      	.short	0x0000
    3d40:	20000028 	.word	0x20000028

00003d44 <mpsl_clock_hfclk_request>:
    3d44:	b570      	push	{r4, r5, r6, lr}
    3d46:	4c0c      	ldr	r4, [pc, #48]	; (3d78 <mpsl_clock_hfclk_request+0x34>)
    3d48:	78e1      	ldrb	r1, [r4, #3]
    3d4a:	b961      	cbnz	r1, 3d66 <mpsl_clock_hfclk_request+0x22>
    3d4c:	2501      	movs	r5, #1
    3d4e:	70e5      	strb	r5, [r4, #3]
    3d50:	61e0      	str	r0, [r4, #28]
    3d52:	f7ff ffd5 	bl	3d00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3d56:	f000 f90d 	bl	3f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3d5a:	b130      	cbz	r0, 3d6a <mpsl_clock_hfclk_request+0x26>
    3d5c:	69e0      	ldr	r0, [r4, #28]
    3d5e:	b110      	cbz	r0, 3d66 <mpsl_clock_hfclk_request+0x22>
    3d60:	4780      	blx	r0
    3d62:	2000      	movs	r0, #0
    3d64:	61e0      	str	r0, [r4, #28]
    3d66:	2000      	movs	r0, #0
    3d68:	bd70      	pop	{r4, r5, r6, pc}
    3d6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d6e:	7125      	strb	r5, [r4, #4]
    3d70:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3d74:	e7f7      	b.n	3d66 <mpsl_clock_hfclk_request+0x22>
    3d76:	0000      	.short	0x0000
    3d78:	20000028 	.word	0x20000028

00003d7c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3d7c:	f3ef 8010 	mrs	r0, PRIMASK
    3d80:	b672      	cpsid	i
    3d82:	4904      	ldr	r1, [pc, #16]	; (3d94 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3d84:	788a      	ldrb	r2, [r1, #2]
    3d86:	1c52      	adds	r2, r2, #1
    3d88:	708a      	strb	r2, [r1, #2]
    3d8a:	2800      	cmp	r0, #0
    3d8c:	d100      	bne.n	3d90 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3d8e:	b662      	cpsie	i
    3d90:	4770      	bx	lr
    3d92:	0000      	.short	0x0000
    3d94:	20000028 	.word	0x20000028

00003d98 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3d98:	b510      	push	{r4, lr}
    3d9a:	f3ef 8410 	mrs	r4, PRIMASK
    3d9e:	b672      	cpsid	i
    3da0:	480a      	ldr	r0, [pc, #40]	; (3dcc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3da2:	7881      	ldrb	r1, [r0, #2]
    3da4:	b129      	cbz	r1, 3db2 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3da6:	7881      	ldrb	r1, [r0, #2]
    3da8:	1e49      	subs	r1, r1, #1
    3daa:	7081      	strb	r1, [r0, #2]
    3dac:	7841      	ldrb	r1, [r0, #1]
    3dae:	b129      	cbz	r1, 3dbc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3db0:	e008      	b.n	3dc4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3db2:	f240 1125 	movw	r1, #293	; 0x125
    3db6:	206d      	movs	r0, #109	; 0x6d
    3db8:	f000 f940 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dbc:	7880      	ldrb	r0, [r0, #2]
    3dbe:	b908      	cbnz	r0, 3dc4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3dc0:	f000 f8e6 	bl	3f90 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3dc4:	2c00      	cmp	r4, #0
    3dc6:	d100      	bne.n	3dca <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3dc8:	b662      	cpsie	i
    3dca:	bd10      	pop	{r4, pc}
    3dcc:	20000028 	.word	0x20000028

00003dd0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3dd4:	0004      	movs	r4, r0
    3dd6:	f06f 0015 	mvn.w	r0, #21
    3dda:	d03c      	beq.n	3e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3ddc:	7821      	ldrb	r1, [r4, #0]
    3dde:	2904      	cmp	r1, #4
    3de0:	d839      	bhi.n	3e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3de2:	2900      	cmp	r1, #0
    3de4:	7861      	ldrb	r1, [r4, #1]
    3de6:	d038      	beq.n	3e5a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3de8:	2900      	cmp	r1, #0
    3dea:	d134      	bne.n	3e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3dec:	78a1      	ldrb	r1, [r4, #2]
    3dee:	2900      	cmp	r1, #0
    3df0:	d131      	bne.n	3e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3df2:	2000      	movs	r0, #0
    3df4:	f008 fc53 	bl	c69e <MPSL_IRQ_RADIO_Handler+0x1e>
    3df8:	2000      	movs	r0, #0
    3dfa:	f008 fc43 	bl	c684 <MPSL_IRQ_RADIO_Handler+0x4>
    3dfe:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3e02:	f04f 31ff 	mov.w	r1, #4294967295
    3e06:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3e0a:	2600      	movs	r6, #0
    3e0c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3e10:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3e14:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3e18:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3e1c:	4f14      	ldr	r7, [pc, #80]	; (3e70 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3e1e:	707e      	strb	r6, [r7, #1]
    3e20:	88a0      	ldrh	r0, [r4, #4]
    3e22:	81b8      	strh	r0, [r7, #12]
    3e24:	f008 fc83 	bl	c72e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3e28:	2501      	movs	r5, #1
    3e2a:	b108      	cbz	r0, 3e30 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3e2c:	70fd      	strb	r5, [r7, #3]
    3e2e:	707d      	strb	r5, [r7, #1]
    3e30:	2101      	movs	r1, #1
    3e32:	4640      	mov	r0, r8
    3e34:	f008 fc6d 	bl	c712 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3e38:	b108      	cbz	r0, 3e3e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3e3a:	f000 f895 	bl	3f68 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3e3e:	4620      	mov	r0, r4
    3e40:	f7ff fe7c 	bl	3b3c <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3e44:	727d      	strb	r5, [r7, #9]
    3e46:	2000      	movs	r0, #0
    3e48:	f008 fc1c 	bl	c684 <MPSL_IRQ_RADIO_Handler+0x4>
    3e4c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3e50:	4630      	mov	r0, r6
    3e52:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e5a:	2900      	cmp	r1, #0
    3e5c:	d0fb      	beq.n	3e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3e5e:	2920      	cmp	r1, #32
    3e60:	d8f9      	bhi.n	3e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3e62:	78a1      	ldrb	r1, [r4, #2]
    3e64:	2921      	cmp	r1, #33	; 0x21
    3e66:	d8f6      	bhi.n	3e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3e68:	2901      	cmp	r1, #1
    3e6a:	d1c2      	bne.n	3df2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3e6c:	e7f3      	b.n	3e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3e6e:	0000      	.short	0x0000
    3e70:	20000028 	.word	0x20000028

00003e74 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3e74:	4801      	ldr	r0, [pc, #4]	; (3e7c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3e76:	8980      	ldrh	r0, [r0, #12]
    3e78:	4770      	bx	lr
    3e7a:	0000      	.short	0x0000
    3e7c:	20000028 	.word	0x20000028

00003e80 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3e80:	b510      	push	{r4, lr}
    3e82:	480d      	ldr	r0, [pc, #52]	; (3eb8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3e84:	f008 fcb4 	bl	c7f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3e88:	490b      	ldr	r1, [pc, #44]	; (3eb8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3e8a:	3908      	subs	r1, #8
    3e8c:	b148      	cbz	r0, 3ea2 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    3e8e:	2001      	movs	r0, #1
    3e90:	7008      	strb	r0, [r1, #0]
    3e92:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3e96:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e9e:	f7ff bf2f 	b.w	3d00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3ea2:	7a88      	ldrb	r0, [r1, #10]
    3ea4:	2802      	cmp	r0, #2
    3ea6:	d101      	bne.n	3eac <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3ea8:	f7ff fda0 	bl	39ec <MPSL_IRQ_CLOCK_Handler+0x88>
    3eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3eb0:	4801      	ldr	r0, [pc, #4]	; (3eb8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3eb2:	f008 bcb4 	b.w	c81e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3eb6:	0000      	.short	0x0000
    3eb8:	20000030 	.word	0x20000030

00003ebc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3ebc:	4802      	ldr	r0, [pc, #8]	; (3ec8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3ebe:	7a80      	ldrb	r0, [r0, #10]
    3ec0:	2800      	cmp	r0, #0
    3ec2:	d000      	beq.n	3ec6 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3ec4:	2001      	movs	r0, #1
    3ec6:	4770      	bx	lr
    3ec8:	20000028 	.word	0x20000028

00003ecc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ece:	4d1f      	ldr	r5, [pc, #124]	; (3f4c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3ed0:	7ae8      	ldrb	r0, [r5, #11]
    3ed2:	2800      	cmp	r0, #0
    3ed4:	d10f      	bne.n	3ef6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3ed6:	7e28      	ldrb	r0, [r5, #24]
    3ed8:	f000 0003 	and.w	r0, r0, #3
    3edc:	f008 fc35 	bl	c74a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3ee0:	2800      	cmp	r0, #0
    3ee2:	d008      	beq.n	3ef6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3ee4:	f3ef 8110 	mrs	r1, PRIMASK
    3ee8:	b672      	cpsid	i
    3eea:	f7ff ffe7 	bl	3ebc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3eee:	b118      	cbz	r0, 3ef8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3ef0:	2900      	cmp	r1, #0
    3ef2:	d100      	bne.n	3ef6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3ef4:	b662      	cpsie	i
    3ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ef8:	2601      	movs	r6, #1
    3efa:	72ae      	strb	r6, [r5, #10]
    3efc:	b901      	cbnz	r1, 3f00 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3efe:	b662      	cpsie	i
    3f00:	2018      	movs	r0, #24
    3f02:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3f06:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3f0a:	61a6      	str	r6, [r4, #24]
    3f0c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3f10:	f8ad 0000 	strh.w	r0, [sp]
    3f14:	f8bd 0000 	ldrh.w	r0, [sp]
    3f18:	1e41      	subs	r1, r0, #1
    3f1a:	f8ad 1000 	strh.w	r1, [sp]
    3f1e:	d2f9      	bcs.n	3f14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3f20:	2700      	movs	r7, #0
    3f22:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3f26:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3f2a:	4808      	ldr	r0, [pc, #32]	; (3f4c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3f2c:	3008      	adds	r0, #8
    3f2e:	f008 fc72 	bl	c816 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3f32:	702f      	strb	r7, [r5, #0]
    3f34:	f7ff fd5a 	bl	39ec <MPSL_IRQ_CLOCK_Handler+0x88>
    3f38:	6166      	str	r6, [r4, #20]
    3f3a:	7968      	ldrb	r0, [r5, #5]
    3f3c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3f40:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3f44:	2018      	movs	r0, #24
    3f46:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f4c:	20000028 	.word	0x20000028

00003f50 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3f50:	b510      	push	{r4, lr}
    3f52:	4c04      	ldr	r4, [pc, #16]	; (3f64 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3f54:	7e20      	ldrb	r0, [r4, #24]
    3f56:	f000 0003 	and.w	r0, r0, #3
    3f5a:	f008 fbf6 	bl	c74a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3f5e:	2800      	cmp	r0, #0
    3f60:	d0f8      	beq.n	3f54 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3f62:	bd10      	pop	{r4, pc}
    3f64:	20000028 	.word	0x20000028

00003f68 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3f68:	4901      	ldr	r1, [pc, #4]	; (3f70 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3f6a:	2001      	movs	r0, #1
    3f6c:	7008      	strb	r0, [r1, #0]
    3f6e:	4770      	bx	lr
    3f70:	20000288 	.word	0x20000288

00003f74 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3f74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3f78:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3f7c:	b918      	cbnz	r0, 3f86 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3f7e:	4803      	ldr	r0, [pc, #12]	; (3f8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3f80:	7800      	ldrb	r0, [r0, #0]
    3f82:	2800      	cmp	r0, #0
    3f84:	d000      	beq.n	3f88 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3f86:	2001      	movs	r0, #1
    3f88:	4770      	bx	lr
    3f8a:	0000      	.short	0x0000
    3f8c:	20000288 	.word	0x20000288

00003f90 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3f90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3f94:	2101      	movs	r1, #1
    3f96:	6041      	str	r1, [r0, #4]
    3f98:	2100      	movs	r1, #0
    3f9a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3f9e:	4801      	ldr	r0, [pc, #4]	; (3fa4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3fa0:	7001      	strb	r1, [r0, #0]
    3fa2:	4770      	bx	lr
    3fa4:	20000288 	.word	0x20000288

00003fa8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3fa8:	4802      	ldr	r0, [pc, #8]	; (3fb4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3faa:	6800      	ldr	r0, [r0, #0]
    3fac:	f000 0003 	and.w	r0, r0, #3
    3fb0:	4770      	bx	lr
    3fb2:	0000      	.short	0x0000
    3fb4:	4000041c 	.word	0x4000041c
    3fb8:	b510      	push	{r4, lr}
    3fba:	b131      	cbz	r1, 3fca <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3fbc:	2901      	cmp	r1, #1
    3fbe:	d007      	beq.n	3fd0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3fc0:	f44f 7142 	mov.w	r1, #776	; 0x308
    3fc4:	a005      	add	r0, pc, #20	; (adr r0, 3fdc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3fc6:	f000 f80f 	bl	3fe8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3fca:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3fce:	e001      	b.n	3fd4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3fd0:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3fd4:	f000 0001 	and.w	r0, r0, #1
    3fd8:	bd10      	pop	{r4, pc}
    3fda:	0000      	.short	0x0000
    3fdc:	5f66726e 	.word	0x5f66726e
    3fe0:	636f6c63 	.word	0x636f6c63
    3fe4:	00682e6b 	.word	0x00682e6b

00003fe8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3fe8:	4a02      	ldr	r2, [pc, #8]	; (3ff4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    3fea:	6852      	ldr	r2, [r2, #4]
    3fec:	b102      	cbz	r2, 3ff0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3fee:	4710      	bx	r2
    3ff0:	e7fe      	b.n	3ff0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3ff2:	0000      	.short	0x0000
    3ff4:	20000048 	.word	0x20000048
    3ff8:	4806      	ldr	r0, [pc, #24]	; (4014 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    3ffa:	b510      	push	{r4, lr}
    3ffc:	2100      	movs	r1, #0
    3ffe:	6001      	str	r1, [r0, #0]
    4000:	2101      	movs	r1, #1
    4002:	6001      	str	r1, [r0, #0]
    4004:	4608      	mov	r0, r1
    4006:	f008 fbc7 	bl	c798 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    400a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    400e:	2001      	movs	r0, #1
    4010:	f008 bbb5 	b.w	c77e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4014:	40001ffc 	.word	0x40001ffc
    4018:	4807      	ldr	r0, [pc, #28]	; (4038 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    401a:	b510      	push	{r4, lr}
    401c:	2101      	movs	r1, #1
    401e:	6041      	str	r1, [r0, #4]
    4020:	1e89      	subs	r1, r1, #2
    4022:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4026:	200c      	movs	r0, #12
    4028:	f008 fbb6 	bl	c798 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    402c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4030:	200c      	movs	r0, #12
    4032:	f008 bba4 	b.w	c77e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4036:	0000      	.short	0x0000
    4038:	4000c000 	.word	0x4000c000

0000403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    403c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    403e:	4a10      	ldr	r2, [pc, #64]	; (4080 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4040:	6855      	ldr	r5, [r2, #4]
    4042:	b1e5      	cbz	r5, 407e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    4044:	2200      	movs	r2, #0
    4046:	4603      	mov	r3, r0
    4048:	466e      	mov	r6, sp
    404a:	240a      	movs	r4, #10
    404c:	e003      	b.n	4056 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    404e:	fbb0 f0f4 	udiv	r0, r0, r4
    4052:	1c52      	adds	r2, r2, #1
    4054:	b2d2      	uxtb	r2, r2
    4056:	2800      	cmp	r0, #0
    4058:	d1f9      	bne.n	404e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    405a:	54b0      	strb	r0, [r6, r2]
    405c:	e00a      	b.n	4074 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    405e:	bf00      	nop
    4060:	fbb3 f0f4 	udiv	r0, r3, r4
    4064:	fb04 3010 	mls	r0, r4, r0, r3
    4068:	fbb3 f3f4 	udiv	r3, r3, r4
    406c:	1e52      	subs	r2, r2, #1
    406e:	b2d2      	uxtb	r2, r2
    4070:	3030      	adds	r0, #48	; 0x30
    4072:	54b0      	strb	r0, [r6, r2]
    4074:	2a00      	cmp	r2, #0
    4076:	d1f3      	bne.n	4060 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4078:	4630      	mov	r0, r6
    407a:	47a8      	blx	r5
    407c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    407e:	e7fe      	b.n	407e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    4080:	20000048 	.word	0x20000048

00004084 <mpsl_init>:
    4084:	b570      	push	{r4, r5, r6, lr}
    4086:	4c17      	ldr	r4, [pc, #92]	; (40e4 <mpsl_init+0x60>)
    4088:	4606      	mov	r6, r0
    408a:	460d      	mov	r5, r1
    408c:	7860      	ldrb	r0, [r4, #1]
    408e:	b110      	cbz	r0, 4096 <mpsl_init+0x12>
    4090:	f04f 30ff 	mov.w	r0, #4294967295
    4094:	bd70      	pop	{r4, r5, r6, pc}
    4096:	b906      	cbnz	r6, 409a <mpsl_init+0x16>
    4098:	4e13      	ldr	r6, [pc, #76]	; (40e8 <mpsl_init+0x64>)
    409a:	6062      	str	r2, [r4, #4]
    409c:	7025      	strb	r5, [r4, #0]
    409e:	f7ff ffab 	bl	3ff8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    40a2:	f7ff ffb9 	bl	4018 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    40a6:	4630      	mov	r0, r6
    40a8:	f7ff fe92 	bl	3dd0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    40ac:	0006      	movs	r6, r0
    40ae:	d1f1      	bne.n	4094 <mpsl_init+0x10>
    40b0:	f7fe ff12 	bl	2ed8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    40b4:	f7ff ff0a 	bl	3ecc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    40b8:	f008 fa3c 	bl	c534 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    40bc:	4628      	mov	r0, r5
    40be:	f008 fb5e 	bl	c77e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    40c2:	2001      	movs	r0, #1
    40c4:	2d00      	cmp	r5, #0
    40c6:	db09      	blt.n	40dc <mpsl_init+0x58>
    40c8:	f005 011f 	and.w	r1, r5, #31
    40cc:	fa00 f101 	lsl.w	r1, r0, r1
    40d0:	096a      	lsrs	r2, r5, #5
    40d2:	0092      	lsls	r2, r2, #2
    40d4:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    40d8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    40dc:	7060      	strb	r0, [r4, #1]
    40de:	4630      	mov	r0, r6
    40e0:	bd70      	pop	{r4, r5, r6, pc}
    40e2:	0000      	.short	0x0000
    40e4:	20000048 	.word	0x20000048
    40e8:	0000c7ba 	.word	0x0000c7ba

000040ec <mpsl_is_initialized>:
    40ec:	4801      	ldr	r0, [pc, #4]	; (40f4 <mpsl_is_initialized+0x8>)
    40ee:	7840      	ldrb	r0, [r0, #1]
    40f0:	4770      	bx	lr
    40f2:	0000      	.short	0x0000
    40f4:	20000048 	.word	0x20000048

000040f8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    40f8:	4807      	ldr	r0, [pc, #28]	; (4118 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    40fa:	f990 0000 	ldrsb.w	r0, [r0]
    40fe:	2800      	cmp	r0, #0
    4100:	db09      	blt.n	4116 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4102:	f000 021f 	and.w	r2, r0, #31
    4106:	2101      	movs	r1, #1
    4108:	4091      	lsls	r1, r2
    410a:	0940      	lsrs	r0, r0, #5
    410c:	0080      	lsls	r0, r0, #2
    410e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4112:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4116:	4770      	bx	lr
    4118:	20000048 	.word	0x20000048

0000411c <mpsl_temperature_get>:
    411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4120:	2601      	movs	r6, #1
    4122:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4126:	0331      	lsls	r1, r6, #12
    4128:	f04f 0800 	mov.w	r8, #0
    412c:	4640      	mov	r0, r8
    412e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4132:	f3bf 8f4f 	dsb	sy
    4136:	f3bf 8f6f 	isb	sy
    413a:	4c16      	ldr	r4, [pc, #88]	; (4194 <mpsl_temperature_get+0x78>)
    413c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4140:	200c      	movs	r0, #12
    4142:	f008 fb48 	bl	c7d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4146:	4d14      	ldr	r5, [pc, #80]	; (4198 <mpsl_temperature_get+0x7c>)
    4148:	6828      	ldr	r0, [r5, #0]
    414a:	43c0      	mvns	r0, r0
    414c:	f340 1700 	sbfx	r7, r0, #4, #1
    4150:	6828      	ldr	r0, [r5, #0]
    4152:	f040 0010 	orr.w	r0, r0, #16
    4156:	6028      	str	r0, [r5, #0]
    4158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    415c:	6026      	str	r6, [r4, #0]
    415e:	1c7f      	adds	r7, r7, #1
    4160:	e002      	b.n	4168 <mpsl_temperature_get+0x4c>
    4162:	bf00      	nop
    4164:	f000 f890 	bl	4288 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4168:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    416c:	2800      	cmp	r0, #0
    416e:	d0f9      	beq.n	4164 <mpsl_temperature_get+0x48>
    4170:	b91f      	cbnz	r7, 417a <mpsl_temperature_get+0x5e>
    4172:	6828      	ldr	r0, [r5, #0]
    4174:	f020 0010 	bic.w	r0, r0, #16
    4178:	6028      	str	r0, [r5, #0]
    417a:	4808      	ldr	r0, [pc, #32]	; (419c <mpsl_temperature_get+0x80>)
    417c:	6805      	ldr	r5, [r0, #0]
    417e:	6066      	str	r6, [r4, #4]
    4180:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4184:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4188:	200c      	movs	r0, #12
    418a:	f008 fb24 	bl	c7d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    418e:	4628      	mov	r0, r5
    4190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4194:	4000c000 	.word	0x4000c000
    4198:	e000ed10 	.word	0xe000ed10
    419c:	4000c508 	.word	0x4000c508

000041a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    41a0:	b510      	push	{r4, lr}
    41a2:	4602      	mov	r2, r0
    41a4:	2005      	movs	r0, #5
    41a6:	490c      	ldr	r1, [pc, #48]	; (41d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    41a8:	e004      	b.n	41b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    41aa:	bf00      	nop
    41ac:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    41b0:	791b      	ldrb	r3, [r3, #4]
    41b2:	b133      	cbz	r3, 41c2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    41b4:	1e40      	subs	r0, r0, #1
    41b6:	b2c0      	uxtb	r0, r0
    41b8:	d2f8      	bcs.n	41ac <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    41ba:	214b      	movs	r1, #75	; 0x4b
    41bc:	2069      	movs	r0, #105	; 0x69
    41be:	f7ff ff3d 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    41c2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    41c6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    41ca:	2200      	movs	r2, #0
    41cc:	714a      	strb	r2, [r1, #5]
    41ce:	718a      	strb	r2, [r1, #6]
    41d0:	2201      	movs	r2, #1
    41d2:	710a      	strb	r2, [r1, #4]
    41d4:	bd10      	pop	{r4, pc}
    41d6:	0000      	.short	0x0000
    41d8:	20000e70 	.word	0x20000e70

000041dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    41dc:	b510      	push	{r4, lr}
    41de:	2805      	cmp	r0, #5
    41e0:	d301      	bcc.n	41e6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    41e2:	215a      	movs	r1, #90	; 0x5a
    41e4:	e006      	b.n	41f4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    41e6:	490a      	ldr	r1, [pc, #40]	; (4210 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    41e8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    41ec:	7901      	ldrb	r1, [r0, #4]
    41ee:	2901      	cmp	r1, #1
    41f0:	d003      	beq.n	41fa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    41f2:	215b      	movs	r1, #91	; 0x5b
    41f4:	2069      	movs	r0, #105	; 0x69
    41f6:	f7ff ff21 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    41fa:	7941      	ldrb	r1, [r0, #5]
    41fc:	7982      	ldrb	r2, [r0, #6]
    41fe:	1c49      	adds	r1, r1, #1
    4200:	b2c9      	uxtb	r1, r1
    4202:	428a      	cmp	r2, r1
    4204:	d000      	beq.n	4208 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4206:	7141      	strb	r1, [r0, #5]
    4208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    420c:	f7ff bf74 	b.w	40f8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4210:	20000e70 	.word	0x20000e70

00004214 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4214:	b570      	push	{r4, r5, r6, lr}
    4216:	2505      	movs	r5, #5
    4218:	4e0e      	ldr	r6, [pc, #56]	; (4254 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    421a:	4c0f      	ldr	r4, [pc, #60]	; (4258 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    421c:	e016      	b.n	424c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    421e:	7821      	ldrb	r1, [r4, #0]
    4220:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4224:	7902      	ldrb	r2, [r0, #4]
    4226:	2a01      	cmp	r2, #1
    4228:	d108      	bne.n	423c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    422a:	7942      	ldrb	r2, [r0, #5]
    422c:	7983      	ldrb	r3, [r0, #6]
    422e:	429a      	cmp	r2, r3
    4230:	d004      	beq.n	423c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4232:	7942      	ldrb	r2, [r0, #5]
    4234:	7182      	strb	r2, [r0, #6]
    4236:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    423a:	4780      	blx	r0
    423c:	7820      	ldrb	r0, [r4, #0]
    423e:	1c40      	adds	r0, r0, #1
    4240:	b2c0      	uxtb	r0, r0
    4242:	7020      	strb	r0, [r4, #0]
    4244:	2805      	cmp	r0, #5
    4246:	d301      	bcc.n	424c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4248:	2000      	movs	r0, #0
    424a:	7020      	strb	r0, [r4, #0]
    424c:	1e6d      	subs	r5, r5, #1
    424e:	b2ed      	uxtb	r5, r5
    4250:	d2e5      	bcs.n	421e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4252:	bd70      	pop	{r4, r5, r6, pc}
    4254:	20000e70 	.word	0x20000e70
    4258:	20000289 	.word	0x20000289

0000425c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    425c:	b500      	push	{lr}
    425e:	f008 fae9 	bl	c834 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4262:	b940      	cbnz	r0, 4276 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4264:	f008 faf0 	bl	c848 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4268:	b928      	cbnz	r0, 4276 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    426a:	f008 fb04 	bl	c876 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    426e:	b910      	cbnz	r0, 4276 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4270:	f008 fb15 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4274:	b108      	cbz	r0, 427a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4276:	4802      	ldr	r0, [pc, #8]	; (4280 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4278:	bd00      	pop	{pc}
    427a:	4802      	ldr	r0, [pc, #8]	; (4284 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    427c:	bd00      	pop	{pc}
    427e:	0000      	.short	0x0000
    4280:	4000050c 	.word	0x4000050c
    4284:	4001e700 	.word	0x4001e700

00004288 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4288:	b510      	push	{r4, lr}
    428a:	f008 fb08 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    428e:	b330      	cbz	r0, 42de <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4290:	f3ef 8010 	mrs	r0, PRIMASK
    4294:	b1c8      	cbz	r0, 42ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4296:	2100      	movs	r1, #0
    4298:	b672      	cpsid	i
    429a:	4812      	ldr	r0, [pc, #72]	; (42e4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    429c:	6802      	ldr	r2, [r0, #0]
    429e:	6803      	ldr	r3, [r0, #0]
    42a0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    42a4:	f043 0310 	orr.w	r3, r3, #16
    42a8:	6003      	str	r3, [r0, #0]
    42aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    42ae:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    42b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    42b6:	431c      	orrs	r4, r3
    42b8:	d000      	beq.n	42bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    42ba:	bf40      	sev
    42bc:	bf20      	wfe
    42be:	bf00      	nop
    42c0:	bf00      	nop
    42c2:	bf00      	nop
    42c4:	bf00      	nop
    42c6:	b112      	cbz	r2, 42ce <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    42c8:	e005      	b.n	42d6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    42ca:	2101      	movs	r1, #1
    42cc:	e7e4      	b.n	4298 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    42ce:	6802      	ldr	r2, [r0, #0]
    42d0:	f022 0210 	bic.w	r2, r2, #16
    42d4:	6002      	str	r2, [r0, #0]
    42d6:	2900      	cmp	r1, #0
    42d8:	d000      	beq.n	42dc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    42da:	b662      	cpsie	i
    42dc:	bd10      	pop	{r4, pc}
    42de:	bf20      	wfe
    42e0:	bd10      	pop	{r4, pc}
    42e2:	0000      	.short	0x0000
    42e4:	e000ed10 	.word	0xe000ed10

000042e8 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    42e8:	0000cb27 0000cb15 0000cb21 0000cb0f     '.......!.......
    42f8:	0000cb0d 0000cb0b 0000cb2d 0000cb1b     ........-.......
    4308:	0000cb05 0000cafd 0000cb01 0000caf7     ................

00004318 <mpsl_fem_lna_configuration_clear>:
    4318:	4801      	ldr	r0, [pc, #4]	; (4320 <mpsl_fem_lna_configuration_clear+0x8>)
    431a:	6800      	ldr	r0, [r0, #0]
    431c:	68c0      	ldr	r0, [r0, #12]
    431e:	4700      	bx	r0
    4320:	20000050 	.word	0x20000050

00004324 <mpsl_fem_lna_configuration_set>:
    4324:	4a01      	ldr	r2, [pc, #4]	; (432c <mpsl_fem_lna_configuration_set+0x8>)
    4326:	6812      	ldr	r2, [r2, #0]
    4328:	6852      	ldr	r2, [r2, #4]
    432a:	4710      	bx	r2
    432c:	20000050 	.word	0x20000050

00004330 <mpsl_fem_pa_configuration_clear>:
    4330:	4801      	ldr	r0, [pc, #4]	; (4338 <mpsl_fem_pa_configuration_clear+0x8>)
    4332:	6800      	ldr	r0, [r0, #0]
    4334:	6880      	ldr	r0, [r0, #8]
    4336:	4700      	bx	r0
    4338:	20000050 	.word	0x20000050

0000433c <mpsl_fem_pa_configuration_set>:
    433c:	4a01      	ldr	r2, [pc, #4]	; (4344 <mpsl_fem_pa_configuration_set+0x8>)
    433e:	6812      	ldr	r2, [r2, #0]
    4340:	6812      	ldr	r2, [r2, #0]
    4342:	4710      	bx	r2
    4344:	20000050 	.word	0x20000050

00004348 <mpsl_fem_pa_is_configured>:
    4348:	4901      	ldr	r1, [pc, #4]	; (4350 <mpsl_fem_pa_is_configured+0x8>)
    434a:	6809      	ldr	r1, [r1, #0]
    434c:	69c9      	ldr	r1, [r1, #28]
    434e:	4708      	bx	r1
    4350:	20000050 	.word	0x20000050

00004354 <mpsl_fem_device_config_254_apply_get>:
    4354:	4801      	ldr	r0, [pc, #4]	; (435c <mpsl_fem_device_config_254_apply_get+0x8>)
    4356:	7800      	ldrb	r0, [r0, #0]
    4358:	4770      	bx	lr
    435a:	0000      	.short	0x0000
    435c:	2000028a 	.word	0x2000028a

00004360 <mpsl_fem_device_config_254_apply_set>:
    4360:	4901      	ldr	r1, [pc, #4]	; (4368 <mpsl_fem_device_config_254_apply_set+0x8>)
    4362:	7008      	strb	r0, [r1, #0]
    4364:	4770      	bx	lr
    4366:	0000      	.short	0x0000
    4368:	2000028a 	.word	0x2000028a
    436c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    436e:	4c17      	ldr	r4, [pc, #92]	; (43cc <mpsl_fem_device_config_254_apply_set+0x6c>)
    4370:	79a0      	ldrb	r0, [r4, #6]
    4372:	2802      	cmp	r0, #2
    4374:	d200      	bcs.n	4378 <mpsl_fem_device_config_254_apply_set+0x18>
    4376:	2002      	movs	r0, #2
    4378:	f88d 0001 	strb.w	r0, [sp, #1]
    437c:	7960      	ldrb	r0, [r4, #5]
    437e:	2803      	cmp	r0, #3
    4380:	d200      	bcs.n	4384 <mpsl_fem_device_config_254_apply_set+0x24>
    4382:	2003      	movs	r0, #3
    4384:	f88d 0000 	strb.w	r0, [sp]
    4388:	7920      	ldrb	r0, [r4, #4]
    438a:	f8ad 0004 	strh.w	r0, [sp, #4]
    438e:	78e0      	ldrb	r0, [r4, #3]
    4390:	f8ad 0002 	strh.w	r0, [sp, #2]
    4394:	4668      	mov	r0, sp
    4396:	f006 faaf 	bl	a8f8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    439a:	b108      	cbz	r0, 43a0 <mpsl_fem_device_config_254_apply_set+0x40>
    439c:	219f      	movs	r1, #159	; 0x9f
    439e:	e010      	b.n	43c2 <mpsl_fem_device_config_254_apply_set+0x62>
    43a0:	68a0      	ldr	r0, [r4, #8]
    43a2:	9002      	str	r0, [sp, #8]
    43a4:	a802      	add	r0, sp, #8
    43a6:	f006 fabd 	bl	a924 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    43aa:	b108      	cbz	r0, 43b0 <mpsl_fem_device_config_254_apply_set+0x50>
    43ac:	21a3      	movs	r1, #163	; 0xa3
    43ae:	e008      	b.n	43c2 <mpsl_fem_device_config_254_apply_set+0x62>
    43b0:	4807      	ldr	r0, [pc, #28]	; (43d0 <mpsl_fem_device_config_254_apply_set+0x70>)
    43b2:	6800      	ldr	r0, [r0, #0]
    43b4:	9003      	str	r0, [sp, #12]
    43b6:	a803      	add	r0, sp, #12
    43b8:	f00b f933 	bl	f622 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    43bc:	2800      	cmp	r0, #0
    43be:	d003      	beq.n	43c8 <mpsl_fem_device_config_254_apply_set+0x68>
    43c0:	21a7      	movs	r1, #167	; 0xa7
    43c2:	2003      	movs	r0, #3
    43c4:	f000 f8ba 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43c8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    43ca:	0000      	.short	0x0000
    43cc:	2000005c 	.word	0x2000005c
    43d0:	00004614 	.word	0x00004614

000043d4 <sdc_build_revision_get>:
    43d4:	b510      	push	{r4, lr}
    43d6:	b128      	cbz	r0, 43e4 <sdc_build_revision_get+0x10>
    43d8:	2214      	movs	r2, #20
    43da:	4904      	ldr	r1, [pc, #16]	; (43ec <sdc_build_revision_get+0x18>)
    43dc:	f008 fab1 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43e0:	2000      	movs	r0, #0
    43e2:	bd10      	pop	{r4, pc}
    43e4:	f06f 0015 	mvn.w	r0, #21
    43e8:	bd10      	pop	{r4, pc}
    43ea:	0000      	.short	0x0000
    43ec:	00004646 	.word	0x00004646

000043f0 <sdc_cfg_set>:
    43f0:	b510      	push	{r4, lr}
    43f2:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    43f6:	bb40      	cbnz	r0, 444a <sdc_cfg_set+0x5a>
    43f8:	4b15      	ldr	r3, [pc, #84]	; (4450 <sdc_cfg_set+0x60>)
    43fa:	7898      	ldrb	r0, [r3, #2]
    43fc:	b108      	cbz	r0, 4402 <sdc_cfg_set+0x12>
    43fe:	11a0      	asrs	r0, r4, #6
    4400:	bd10      	pop	{r4, pc}
    4402:	b1c9      	cbz	r1, 4438 <sdc_cfg_set+0x48>
    4404:	b132      	cbz	r2, 4414 <sdc_cfg_set+0x24>
    4406:	2906      	cmp	r1, #6
    4408:	d21f      	bcs.n	444a <sdc_cfg_set+0x5a>
    440a:	e8df f001 	tbb	[pc, r1]
    440e:	061e      	.short	0x061e
    4410:	13100c09 	.word	0x13100c09
    4414:	f06f 0015 	mvn.w	r0, #21
    4418:	bd10      	pop	{r4, pc}
    441a:	7810      	ldrb	r0, [r2, #0]
    441c:	7218      	strb	r0, [r3, #8]
    441e:	e00b      	b.n	4438 <sdc_cfg_set+0x48>
    4420:	7810      	ldrb	r0, [r2, #0]
    4422:	7258      	strb	r0, [r3, #9]
    4424:	e008      	b.n	4438 <sdc_cfg_set+0x48>
    4426:	6810      	ldr	r0, [r2, #0]
    4428:	f8c3 000b 	str.w	r0, [r3, #11]
    442c:	e004      	b.n	4438 <sdc_cfg_set+0x48>
    442e:	6810      	ldr	r0, [r2, #0]
    4430:	6118      	str	r0, [r3, #16]
    4432:	e001      	b.n	4438 <sdc_cfg_set+0x48>
    4434:	7810      	ldrb	r0, [r2, #0]
    4436:	7298      	strb	r0, [r3, #10]
    4438:	4905      	ldr	r1, [pc, #20]	; (4450 <sdc_cfg_set+0x60>)
    443a:	2201      	movs	r2, #1
    443c:	3108      	adds	r1, #8
    443e:	2000      	movs	r0, #0
    4440:	f008 fb76 	bl	cb30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    4444:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4448:	dbe6      	blt.n	4418 <sdc_cfg_set+0x28>
    444a:	4620      	mov	r0, r4
    444c:	bd10      	pop	{r4, pc}
    444e:	0000      	.short	0x0000
    4450:	20000054 	.word	0x20000054

00004454 <sdc_enable>:
    4454:	b538      	push	{r3, r4, r5, lr}
    4456:	460d      	mov	r5, r1
    4458:	0004      	movs	r4, r0
    445a:	d020      	beq.n	449e <sdc_enable+0x4a>
    445c:	b1fd      	cbz	r5, 449e <sdc_enable+0x4a>
    445e:	f000 f927 	bl	46b0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4462:	b1f8      	cbz	r0, 44a4 <sdc_enable+0x50>
    4464:	4620      	mov	r0, r4
    4466:	f7ff fe9b 	bl	41a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    446a:	4c10      	ldr	r4, [pc, #64]	; (44ac <sdc_enable+0x58>)
    446c:	2200      	movs	r2, #0
    446e:	f104 0108 	add.w	r1, r4, #8
    4472:	7020      	strb	r0, [r4, #0]
    4474:	4628      	mov	r0, r5
    4476:	f008 fb5b 	bl	cb30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    447a:	f00b fcab 	bl	fdd4 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    447e:	2100      	movs	r1, #0
    4480:	7820      	ldrb	r0, [r4, #0]
    4482:	f006 fcc9 	bl	ae18 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4486:	7860      	ldrb	r0, [r4, #1]
    4488:	f88d 0000 	strb.w	r0, [sp]
    448c:	4668      	mov	r0, sp
    448e:	f00b f8bc 	bl	f60a <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    4492:	f7ff ff6b 	bl	436c <mpsl_fem_device_config_254_apply_set+0xc>
    4496:	2001      	movs	r0, #1
    4498:	70a0      	strb	r0, [r4, #2]
    449a:	2000      	movs	r0, #0
    449c:	bd38      	pop	{r3, r4, r5, pc}
    449e:	f06f 0015 	mvn.w	r0, #21
    44a2:	bd38      	pop	{r3, r4, r5, pc}
    44a4:	f04f 30ff 	mov.w	r0, #4294967295
    44a8:	bd38      	pop	{r3, r4, r5, pc}
    44aa:	0000      	.short	0x0000
    44ac:	20000054 	.word	0x20000054

000044b0 <sdc_init>:
    44b0:	b570      	push	{r4, r5, r6, lr}
    44b2:	0004      	movs	r4, r0
    44b4:	d00b      	beq.n	44ce <sdc_init+0x1e>
    44b6:	f7ff fe19 	bl	40ec <mpsl_is_initialized>
    44ba:	f04f 35ff 	mov.w	r5, #4294967295
    44be:	b120      	cbz	r0, 44ca <sdc_init+0x1a>
    44c0:	f7ff fcd8 	bl	3e74 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    44c4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    44c8:	d904      	bls.n	44d4 <sdc_init+0x24>
    44ca:	4628      	mov	r0, r5
    44cc:	bd70      	pop	{r4, r5, r6, pc}
    44ce:	f06f 0015 	mvn.w	r0, #21
    44d2:	bd70      	pop	{r4, r5, r6, pc}
    44d4:	2200      	movs	r2, #0
    44d6:	4b14      	ldr	r3, [pc, #80]	; (4528 <sdc_init+0x78>)
    44d8:	4611      	mov	r1, r2
    44da:	bf00      	nop
    44dc:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    44e0:	4285      	cmp	r5, r0
    44e2:	d303      	bcc.n	44ec <sdc_init+0x3c>
    44e4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    44e8:	7882      	ldrb	r2, [r0, #2]
    44ea:	e003      	b.n	44f4 <sdc_init+0x44>
    44ec:	1c49      	adds	r1, r1, #1
    44ee:	b2c9      	uxtb	r1, r1
    44f0:	290c      	cmp	r1, #12
    44f2:	d3f3      	bcc.n	44dc <sdc_init+0x2c>
    44f4:	480d      	ldr	r0, [pc, #52]	; (452c <sdc_init+0x7c>)
    44f6:	7042      	strb	r2, [r0, #1]
    44f8:	6044      	str	r4, [r0, #4]
    44fa:	480d      	ldr	r0, [pc, #52]	; (4530 <sdc_init+0x80>)
    44fc:	f000 f9ea 	bl	48d4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4500:	f3ef 8410 	mrs	r4, PRIMASK
    4504:	b672      	cpsid	i
    4506:	480b      	ldr	r0, [pc, #44]	; (4534 <sdc_init+0x84>)
    4508:	f06f 010c 	mvn.w	r1, #12
    450c:	f000 fd18 	bl	4f40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4510:	4809      	ldr	r0, [pc, #36]	; (4538 <sdc_init+0x88>)
    4512:	f000 fdd9 	bl	50c8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4516:	b118      	cbz	r0, 4520 <sdc_init+0x70>
    4518:	21b5      	movs	r1, #181	; 0xb5
    451a:	2003      	movs	r0, #3
    451c:	f000 f80e 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4520:	b904      	cbnz	r4, 4524 <sdc_init+0x74>
    4522:	b662      	cpsie	i
    4524:	2000      	movs	r0, #0
    4526:	bd70      	pop	{r4, r5, r6, pc}
    4528:	00004616 	.word	0x00004616
    452c:	20000054 	.word	0x20000054
    4530:	0000436d 	.word	0x0000436d
    4534:	4000c000 	.word	0x4000c000
    4538:	000046dd 	.word	0x000046dd

0000453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    453c:	b50e      	push	{r1, r2, r3, lr}
    453e:	b672      	cpsid	i
    4540:	4a15      	ldr	r2, [pc, #84]	; (4598 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4542:	6855      	ldr	r5, [r2, #4]
    4544:	b1d5      	cbz	r5, 457c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4546:	2200      	movs	r2, #0
    4548:	4603      	mov	r3, r0
    454a:	466e      	mov	r6, sp
    454c:	240a      	movs	r4, #10
    454e:	e003      	b.n	4558 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4550:	fbb0 f0f4 	udiv	r0, r0, r4
    4554:	1c52      	adds	r2, r2, #1
    4556:	b2d2      	uxtb	r2, r2
    4558:	2800      	cmp	r0, #0
    455a:	d1f9      	bne.n	4550 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    455c:	54b0      	strb	r0, [r6, r2]
    455e:	e009      	b.n	4574 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4560:	fbb3 f0f4 	udiv	r0, r3, r4
    4564:	fb04 3010 	mls	r0, r4, r0, r3
    4568:	fbb3 f3f4 	udiv	r3, r3, r4
    456c:	1e52      	subs	r2, r2, #1
    456e:	b2d2      	uxtb	r2, r2
    4570:	3030      	adds	r0, #48	; 0x30
    4572:	54b0      	strb	r0, [r6, r2]
    4574:	2a00      	cmp	r2, #0
    4576:	d1f3      	bne.n	4560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4578:	4630      	mov	r0, r6
    457a:	47a8      	blx	r5
    457c:	f3bf 8f4f 	dsb	sy
    4580:	4806      	ldr	r0, [pc, #24]	; (459c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4582:	6801      	ldr	r1, [r0, #0]
    4584:	4a06      	ldr	r2, [pc, #24]	; (45a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4586:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    458a:	4311      	orrs	r1, r2
    458c:	6001      	str	r1, [r0, #0]
    458e:	f3bf 8f4f 	dsb	sy
    4592:	bf00      	nop
    4594:	e7fd      	b.n	4592 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4596:	0000      	.short	0x0000
    4598:	20000054 	.word	0x20000054
    459c:	e000ed0c 	.word	0xe000ed0c
    45a0:	05fa0004 	.word	0x05fa0004

000045a4 <sdc_support_adv>:
    45a4:	4805      	ldr	r0, [pc, #20]	; (45bc <sdc_support_adv+0x18>)
    45a6:	b510      	push	{r4, lr}
    45a8:	7880      	ldrb	r0, [r0, #2]
    45aa:	b110      	cbz	r0, 45b2 <sdc_support_adv+0xe>
    45ac:	f04f 30ff 	mov.w	r0, #4294967295
    45b0:	bd10      	pop	{r4, pc}
    45b2:	f006 fc51 	bl	ae58 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    45b6:	2000      	movs	r0, #0
    45b8:	bd10      	pop	{r4, pc}
    45ba:	0000      	.short	0x0000
    45bc:	20000054 	.word	0x20000054

000045c0 <sdc_support_dle>:
    45c0:	4805      	ldr	r0, [pc, #20]	; (45d8 <sdc_support_dle+0x18>)
    45c2:	b510      	push	{r4, lr}
    45c4:	7880      	ldrb	r0, [r0, #2]
    45c6:	b110      	cbz	r0, 45ce <sdc_support_dle+0xe>
    45c8:	f04f 30ff 	mov.w	r0, #4294967295
    45cc:	bd10      	pop	{r4, pc}
    45ce:	f006 f9c1 	bl	a954 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    45d2:	2000      	movs	r0, #0
    45d4:	bd10      	pop	{r4, pc}
    45d6:	0000      	.short	0x0000
    45d8:	20000054 	.word	0x20000054

000045dc <sdc_support_le_2m_phy>:
    45dc:	4805      	ldr	r0, [pc, #20]	; (45f4 <sdc_support_le_2m_phy+0x18>)
    45de:	b510      	push	{r4, lr}
    45e0:	7880      	ldrb	r0, [r0, #2]
    45e2:	b110      	cbz	r0, 45ea <sdc_support_le_2m_phy+0xe>
    45e4:	f04f 30ff 	mov.w	r0, #4294967295
    45e8:	bd10      	pop	{r4, pc}
    45ea:	f00b f968 	bl	f8be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    45ee:	2000      	movs	r0, #0
    45f0:	bd10      	pop	{r4, pc}
    45f2:	0000      	.short	0x0000
    45f4:	20000054 	.word	0x20000054

000045f8 <sdc_support_slave>:
    45f8:	4805      	ldr	r0, [pc, #20]	; (4610 <sdc_support_slave+0x18>)
    45fa:	b510      	push	{r4, lr}
    45fc:	7880      	ldrb	r0, [r0, #2]
    45fe:	b110      	cbz	r0, 4606 <sdc_support_slave+0xe>
    4600:	f04f 30ff 	mov.w	r0, #4294967295
    4604:	bd10      	pop	{r4, pc}
    4606:	f006 fc39 	bl	ae7c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    460a:	2000      	movs	r0, #0
    460c:	bd10      	pop	{r4, pc}
    460e:	0000      	.short	0x0000
    4610:	20000054 	.word	0x20000054
    4614:	00010001 	.word	0x00010001
    4618:	0002000b 	.word	0x0002000b
    461c:	0005000a 	.word	0x0005000a
    4620:	000a0009 	.word	0x000a0009
    4624:	00140008 	.word	0x00140008
    4628:	001e0007 	.word	0x001e0007
    462c:	00320006 	.word	0x00320006
    4630:	004b0005 	.word	0x004b0005
    4634:	00640004 	.word	0x00640004
    4638:	00960003 	.word	0x00960003
    463c:	00fa0002 	.word	0x00fa0002
    4640:	01f40001 	.word	0x01f40001
    4644:	03ef0000 	.word	0x03ef0000
    4648:	96799c09 	.word	0x96799c09
    464c:	08cc7db6 	.word	0x08cc7db6
    4650:	0fcfb29d 	.word	0x0fcfb29d
    4654:	ce973cda 	.word	0xce973cda
    4658:	0000780d 	.word	0x0000780d

0000465c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    465c:	4a05      	ldr	r2, [pc, #20]	; (4674 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    465e:	b510      	push	{r4, lr}
    4660:	6852      	ldr	r2, [r2, #4]
    4662:	b112      	cbz	r2, 466a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4668:	4710      	bx	r2
    466a:	2183      	movs	r1, #131	; 0x83
    466c:	2004      	movs	r0, #4
    466e:	f7ff ff65 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4672:	0000      	.short	0x0000
    4674:	20000e98 	.word	0x20000e98

00004678 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4678:	4a05      	ldr	r2, [pc, #20]	; (4690 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    467a:	b510      	push	{r4, lr}
    467c:	6812      	ldr	r2, [r2, #0]
    467e:	b112      	cbz	r2, 4686 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4684:	4710      	bx	r2
    4686:	217d      	movs	r1, #125	; 0x7d
    4688:	2004      	movs	r0, #4
    468a:	f7ff ff57 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    468e:	0000      	.short	0x0000
    4690:	20000e98 	.word	0x20000e98

00004694 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4694:	4a05      	ldr	r2, [pc, #20]	; (46ac <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4696:	b510      	push	{r4, lr}
    4698:	6892      	ldr	r2, [r2, #8]
    469a:	b112      	cbz	r2, 46a2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46a0:	4710      	bx	r2
    46a2:	2189      	movs	r1, #137	; 0x89
    46a4:	2004      	movs	r0, #4
    46a6:	f7ff ff49 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46aa:	0000      	.short	0x0000
    46ac:	20000e98 	.word	0x20000e98

000046b0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    46b0:	4805      	ldr	r0, [pc, #20]	; (46c8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    46b2:	6801      	ldr	r1, [r0, #0]
    46b4:	b129      	cbz	r1, 46c2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46b6:	6841      	ldr	r1, [r0, #4]
    46b8:	b119      	cbz	r1, 46c2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46ba:	6880      	ldr	r0, [r0, #8]
    46bc:	b108      	cbz	r0, 46c2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46be:	2001      	movs	r0, #1
    46c0:	4770      	bx	lr
    46c2:	2000      	movs	r0, #0
    46c4:	4770      	bx	lr
    46c6:	0000      	.short	0x0000
    46c8:	20000e98 	.word	0x20000e98

000046cc <sdc_rand_source_register>:
    46cc:	4902      	ldr	r1, [pc, #8]	; (46d8 <sdc_rand_source_register+0xc>)
    46ce:	c80d      	ldmia	r0, {r0, r2, r3}
    46d0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    46d4:	2000      	movs	r0, #0
    46d6:	4770      	bx	lr
    46d8:	20000e98 	.word	0x20000e98

000046dc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    46dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46de:	4c12      	ldr	r4, [pc, #72]	; (4728 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    46e0:	2600      	movs	r6, #0
    46e2:	6825      	ldr	r5, [r4, #0]
    46e4:	e011      	b.n	470a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    46e6:	9800      	ldr	r0, [sp, #0]
    46e8:	2802      	cmp	r0, #2
    46ea:	d002      	beq.n	46f2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    46ec:	2803      	cmp	r0, #3
    46ee:	d10c      	bne.n	470a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    46f0:	e006      	b.n	4700 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    46f2:	6820      	ldr	r0, [r4, #0]
    46f4:	b110      	cbz	r0, 46fc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    46f6:	2000      	movs	r0, #0
    46f8:	6026      	str	r6, [r4, #0]
    46fa:	e005      	b.n	4708 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    46fc:	2128      	movs	r1, #40	; 0x28
    46fe:	e00c      	b.n	471a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4700:	6820      	ldr	r0, [r4, #0]
    4702:	b168      	cbz	r0, 4720 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4704:	2001      	movs	r0, #1
    4706:	6026      	str	r6, [r4, #0]
    4708:	47a8      	blx	r5
    470a:	4668      	mov	r0, sp
    470c:	f000 fcae 	bl	506c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4710:	2800      	cmp	r0, #0
    4712:	d0e8      	beq.n	46e6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4714:	2805      	cmp	r0, #5
    4716:	d005      	beq.n	4724 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4718:	2135      	movs	r1, #53	; 0x35
    471a:	2004      	movs	r0, #4
    471c:	f7ff ff0e 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4720:	212d      	movs	r1, #45	; 0x2d
    4722:	e7fa      	b.n	471a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4726:	0000      	.short	0x0000
    4728:	20000068 	.word	0x20000068
    472c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    472e:	4d21      	ldr	r5, [pc, #132]	; (47b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4730:	4606      	mov	r6, r0
    4732:	7828      	ldrb	r0, [r5, #0]
    4734:	b148      	cbz	r0, 474a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6e>
    4736:	78ac      	ldrb	r4, [r5, #2]
    4738:	1c69      	adds	r1, r5, #1
    473a:	1ca4      	adds	r4, r4, #2
    473c:	4622      	mov	r2, r4
    473e:	4630      	mov	r0, r6
    4740:	f008 f8ff 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4744:	2000      	movs	r0, #0
    4746:	7028      	strb	r0, [r5, #0]
    4748:	e024      	b.n	4794 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    474a:	481a      	ldr	r0, [pc, #104]	; (47b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    474c:	3844      	subs	r0, #68	; 0x44
    474e:	f006 f959 	bl	aa04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4752:	2800      	cmp	r0, #0
    4754:	d01f      	beq.n	4796 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    4756:	4c17      	ldr	r4, [pc, #92]	; (47b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4758:	3c44      	subs	r4, #68	; 0x44
    475a:	7820      	ldrb	r0, [r4, #0]
    475c:	2811      	cmp	r0, #17
    475e:	d104      	bne.n	476a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8e>
    4760:	210a      	movs	r1, #10
    4762:	203e      	movs	r0, #62	; 0x3e
    4764:	f008 fa80 	bl	cc68 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4768:	b118      	cbz	r0, 4772 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    476a:	7820      	ldrb	r0, [r4, #0]
    476c:	2808      	cmp	r0, #8
    476e:	d006      	beq.n	477e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa2>
    4770:	e00a      	b.n	4788 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    4772:	4910      	ldr	r1, [pc, #64]	; (47b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    4774:	4630      	mov	r0, r6
    4776:	3944      	subs	r1, #68	; 0x44
    4778:	f008 fc7f 	bl	d07a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    477c:	e009      	b.n	4792 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb6>
    477e:	2105      	movs	r1, #5
    4780:	203e      	movs	r0, #62	; 0x3e
    4782:	f008 fa71 	bl	cc68 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4786:	b138      	cbz	r0, 4798 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    4788:	490a      	ldr	r1, [pc, #40]	; (47b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    478a:	4630      	mov	r0, r6
    478c:	3944      	subs	r1, #68	; 0x44
    478e:	f008 fac9 	bl	cd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4792:	4604      	mov	r4, r0
    4794:	4620      	mov	r0, r4
    4796:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4798:	88a0      	ldrh	r0, [r4, #4]
    479a:	f8ad 0000 	strh.w	r0, [sp]
    479e:	a901      	add	r1, sp, #4
    47a0:	4668      	mov	r0, sp
    47a2:	f008 fd84 	bl	d2ae <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    47a6:	b118      	cbz	r0, 47b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>
    47a8:	2197      	movs	r1, #151	; 0x97
    47aa:	2008      	movs	r0, #8
    47ac:	f7ff fec6 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47b0:	2400      	movs	r4, #0
    47b2:	e7ef      	b.n	4794 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    47b4:	20000f7c 	.word	0x20000f7c
    47b8:	b570      	push	{r4, r5, r6, lr}
    47ba:	780a      	ldrb	r2, [r1, #0]
    47bc:	7082      	strb	r2, [r0, #2]
    47be:	b33a      	cbz	r2, 4810 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    47c0:	2a01      	cmp	r2, #1
    47c2:	d825      	bhi.n	4810 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    47c4:	2313      	movs	r3, #19
    47c6:	7003      	strb	r3, [r0, #0]
    47c8:	2300      	movs	r3, #0
    47ca:	e00a      	b.n	47e2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    47cc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    47d0:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    47d4:	78a6      	ldrb	r6, [r4, #2]
    47d6:	70ee      	strb	r6, [r5, #3]
    47d8:	8864      	ldrh	r4, [r4, #2]
    47da:	0a24      	lsrs	r4, r4, #8
    47dc:	1c5b      	adds	r3, r3, #1
    47de:	712c      	strb	r4, [r5, #4]
    47e0:	b2db      	uxtb	r3, r3
    47e2:	4293      	cmp	r3, r2
    47e4:	d3f2      	bcc.n	47cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    47e6:	2300      	movs	r3, #0
    47e8:	e00b      	b.n	4802 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    47ea:	bf00      	nop
    47ec:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    47f0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    47f4:	792e      	ldrb	r6, [r5, #4]
    47f6:	7166      	strb	r6, [r4, #5]
    47f8:	88ad      	ldrh	r5, [r5, #4]
    47fa:	0a2d      	lsrs	r5, r5, #8
    47fc:	1c5b      	adds	r3, r3, #1
    47fe:	71a5      	strb	r5, [r4, #6]
    4800:	b2db      	uxtb	r3, r3
    4802:	4293      	cmp	r3, r2
    4804:	d3f2      	bcc.n	47ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    4806:	2101      	movs	r1, #1
    4808:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    480c:	b2c0      	uxtb	r0, r0
    480e:	bd70      	pop	{r4, r5, r6, pc}
    4810:	2000      	movs	r0, #0
    4812:	bd70      	pop	{r4, r5, r6, pc}

00004814 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4814:	2101      	movs	r1, #1
    4816:	4a0c      	ldr	r2, [pc, #48]	; (4848 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4818:	2840      	cmp	r0, #64	; 0x40
    481a:	d20c      	bcs.n	4836 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    481c:	2820      	cmp	r0, #32
    481e:	d803      	bhi.n	4828 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4820:	1e40      	subs	r0, r0, #1
    4822:	4081      	lsls	r1, r0
    4824:	6810      	ldr	r0, [r2, #0]
    4826:	e002      	b.n	482e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4828:	3821      	subs	r0, #33	; 0x21
    482a:	4081      	lsls	r1, r0
    482c:	6850      	ldr	r0, [r2, #4]
    482e:	4201      	tst	r1, r0
    4830:	d107      	bne.n	4842 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4832:	2000      	movs	r0, #0
    4834:	4770      	bx	lr
    4836:	28ff      	cmp	r0, #255	; 0xff
    4838:	d003      	beq.n	4842 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    483a:	3840      	subs	r0, #64	; 0x40
    483c:	4081      	lsls	r1, r0
    483e:	6890      	ldr	r0, [r2, #8]
    4840:	e7f5      	b.n	482e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4842:	2001      	movs	r0, #1
    4844:	4770      	bx	lr
    4846:	0000      	.short	0x0000
    4848:	2000006c 	.word	0x2000006c

0000484c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    484c:	2101      	movs	r1, #1
    484e:	1e40      	subs	r0, r0, #1
    4850:	4081      	lsls	r1, r0
    4852:	4804      	ldr	r0, [pc, #16]	; (4864 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4854:	68c0      	ldr	r0, [r0, #12]
    4856:	4201      	tst	r1, r0
    4858:	d001      	beq.n	485e <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    485a:	2001      	movs	r0, #1
    485c:	4770      	bx	lr
    485e:	2000      	movs	r0, #0
    4860:	4770      	bx	lr
    4862:	0000      	.short	0x0000
    4864:	2000006c 	.word	0x2000006c

00004868 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4868:	4901      	ldr	r1, [pc, #4]	; (4870 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    486a:	6800      	ldr	r0, [r0, #0]
    486c:	60c8      	str	r0, [r1, #12]
    486e:	4770      	bx	lr
    4870:	2000006c 	.word	0x2000006c

00004874 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4874:	4904      	ldr	r1, [pc, #16]	; (4888 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4876:	6802      	ldr	r2, [r0, #0]
    4878:	6840      	ldr	r0, [r0, #4]
    487a:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    487e:	600a      	str	r2, [r1, #0]
    4880:	4a02      	ldr	r2, [pc, #8]	; (488c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4882:	4310      	orrs	r0, r2
    4884:	6048      	str	r0, [r1, #4]
    4886:	4770      	bx	lr
    4888:	2000006c 	.word	0x2000006c
    488c:	024007f8 	.word	0x024007f8

00004890 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4890:	4901      	ldr	r1, [pc, #4]	; (4898 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4892:	6800      	ldr	r0, [r0, #0]
    4894:	6088      	str	r0, [r1, #8]
    4896:	4770      	bx	lr
    4898:	2000006c 	.word	0x2000006c

0000489c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    489c:	4805      	ldr	r0, [pc, #20]	; (48b4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    489e:	f04f 31ff 	mov.w	r1, #4294967295
    48a2:	6001      	str	r1, [r0, #0]
    48a4:	0cc9      	lsrs	r1, r1, #19
    48a6:	6041      	str	r1, [r0, #4]
    48a8:	2100      	movs	r1, #0
    48aa:	6081      	str	r1, [r0, #8]
    48ac:	211f      	movs	r1, #31
    48ae:	60c1      	str	r1, [r0, #12]
    48b0:	4770      	bx	lr
    48b2:	0000      	.short	0x0000
    48b4:	2000006c 	.word	0x2000006c

000048b8 <sdc_hci_cmd_cb_reset>:
    48b8:	b510      	push	{r4, lr}
    48ba:	f7ff ffef 	bl	489c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    48be:	f00a ff75 	bl	f7ac <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    48c2:	4604      	mov	r4, r0
    48c4:	4802      	ldr	r0, [pc, #8]	; (48d0 <sdc_hci_cmd_cb_reset+0x18>)
    48c6:	6800      	ldr	r0, [r0, #0]
    48c8:	b100      	cbz	r0, 48cc <sdc_hci_cmd_cb_reset+0x14>
    48ca:	4780      	blx	r0
    48cc:	4620      	mov	r0, r4
    48ce:	bd10      	pop	{r4, pc}
    48d0:	2000007c 	.word	0x2000007c

000048d4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    48d4:	4901      	ldr	r1, [pc, #4]	; (48dc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    48d6:	6008      	str	r0, [r1, #0]
    48d8:	4770      	bx	lr
    48da:	0000      	.short	0x0000
    48dc:	2000007c 	.word	0x2000007c

000048e0 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    48e0:	2102      	movs	r1, #2
    48e2:	8001      	strh	r1, [r0, #0]
    48e4:	8041      	strh	r1, [r0, #2]
    48e6:	2100      	movs	r1, #0
    48e8:	7101      	strb	r1, [r0, #4]
    48ea:	21ef      	movs	r1, #239	; 0xef
    48ec:	7141      	strb	r1, [r0, #5]
    48ee:	f640 1103 	movw	r1, #2307	; 0x903
    48f2:	80c1      	strh	r1, [r0, #6]
    48f4:	4901      	ldr	r1, [pc, #4]	; (48fc <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    48f6:	6081      	str	r1, [r0, #8]
    48f8:	2000      	movs	r0, #0
    48fa:	4770      	bx	lr
    48fc:	b696799c 	.word	0xb696799c

00004900 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4900:	b510      	push	{r4, lr}
    4902:	2802      	cmp	r0, #2
    4904:	d304      	bcc.n	4910 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4906:	f240 116b 	movw	r1, #363	; 0x16b
    490a:	2017      	movs	r0, #23
    490c:	f7ff fe16 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4910:	4901      	ldr	r1, [pc, #4]	; (4918 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4912:	5c08      	ldrb	r0, [r1, r0]
    4914:	bd10      	pop	{r4, pc}
    4916:	0000      	.short	0x0000
    4918:	20000ea4 	.word	0x20000ea4

0000491c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    491e:	4605      	mov	r5, r0
    4920:	9000      	str	r0, [sp, #0]
    4922:	4291      	cmp	r1, r2
    4924:	d201      	bcs.n	492a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    4926:	4614      	mov	r4, r2
    4928:	e000      	b.n	492c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    492a:	460c      	mov	r4, r1
    492c:	b155      	cbz	r5, 4944 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    492e:	2700      	movs	r7, #0
    4930:	1ce8      	adds	r0, r5, #3
    4932:	f020 0003 	bic.w	r0, r0, #3
    4936:	42a8      	cmp	r0, r5
    4938:	d006      	beq.n	4948 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    493a:	f240 113f 	movw	r1, #319	; 0x13f
    493e:	2017      	movs	r0, #23
    4940:	f7ff fdfc 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4944:	2701      	movs	r7, #1
    4946:	e7f3      	b.n	4930 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4948:	4e12      	ldr	r6, [pc, #72]	; (4994 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    494a:	4668      	mov	r0, sp
    494c:	7031      	strb	r1, [r6, #0]
    494e:	7072      	strb	r2, [r6, #1]
    4950:	4639      	mov	r1, r7
    4952:	f000 f8ed 	bl	4b30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4956:	2000      	movs	r0, #0
    4958:	4603      	mov	r3, r0
    495a:	9900      	ldr	r1, [sp, #0]
    495c:	1cc9      	adds	r1, r1, #3
    495e:	f021 0103 	bic.w	r1, r1, #3
    4962:	9100      	str	r1, [sp, #0]
    4964:	b967      	cbnz	r7, 4980 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4966:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    496a:	60d1      	str	r1, [r2, #12]
    496c:	2100      	movs	r1, #0
    496e:	e005      	b.n	497c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4970:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4974:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4978:	1c49      	adds	r1, r1, #1
    497a:	b2c9      	uxtb	r1, r1
    497c:	42a1      	cmp	r1, r4
    497e:	d3f7      	bcc.n	4970 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    4980:	9900      	ldr	r1, [sp, #0]
    4982:	1c40      	adds	r0, r0, #1
    4984:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4988:	b2c0      	uxtb	r0, r0
    498a:	9100      	str	r1, [sp, #0]
    498c:	2802      	cmp	r0, #2
    498e:	d3e4      	bcc.n	495a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    4990:	1b48      	subs	r0, r1, r5
    4992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4994:	20000ea4 	.word	0x20000ea4

00004998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4998:	b570      	push	{r4, r5, r6, lr}
    499a:	4604      	mov	r4, r0
    499c:	f009 f843 	bl	da26 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    49a0:	b108      	cbz	r0, 49a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    49a2:	2010      	movs	r0, #16
    49a4:	bd70      	pop	{r4, r5, r6, pc}
    49a6:	7825      	ldrb	r5, [r4, #0]
    49a8:	f000 f8fe 	bl	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    49ac:	4602      	mov	r2, r0
    49ae:	480c      	ldr	r0, [pc, #48]	; (49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    49b0:	8861      	ldrh	r1, [r4, #2]
    49b2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    49b6:	e00e      	b.n	49d6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    49b8:	68c3      	ldr	r3, [r0, #12]
    49ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    49be:	b143      	cbz	r3, 49d2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    49c0:	1c4a      	adds	r2, r1, #1
    49c2:	8062      	strh	r2, [r4, #2]
    49c4:	80a1      	strh	r1, [r4, #4]
    49c6:	68c0      	ldr	r0, [r0, #12]
    49c8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    49cc:	60a0      	str	r0, [r4, #8]
    49ce:	2000      	movs	r0, #0
    49d0:	bd70      	pop	{r4, r5, r6, pc}
    49d2:	1c49      	adds	r1, r1, #1
    49d4:	b289      	uxth	r1, r1
    49d6:	4291      	cmp	r1, r2
    49d8:	d3ee      	bcc.n	49b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    49da:	8061      	strh	r1, [r4, #2]
    49dc:	2005      	movs	r0, #5
    49de:	bd70      	pop	{r4, r5, r6, pc}
    49e0:	20000ea4 	.word	0x20000ea4

000049e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    49e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49e8:	b121      	cbz	r1, 49f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    49ea:	2901      	cmp	r1, #1
    49ec:	d002      	beq.n	49f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    49ee:	2000      	movs	r0, #0
    49f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49f4:	4c0f      	ldr	r4, [pc, #60]	; (4a34 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    49f6:	2700      	movs	r7, #0
    49f8:	463b      	mov	r3, r7
    49fa:	f64f 76ff 	movw	r6, #65535	; 0xffff
    49fe:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4a02:	f814 c001 	ldrb.w	ip, [r4, r1]
    4a06:	e00a      	b.n	4a1e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4a08:	19dc      	adds	r4, r3, r7
    4a0a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4a0e:	b2a4      	uxth	r4, r4
    4a10:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4a14:	f1be 0f00 	cmp.w	lr, #0
    4a18:	d004      	beq.n	4a24 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    4a1a:	1c5b      	adds	r3, r3, #1
    4a1c:	b29b      	uxth	r3, r3
    4a1e:	459c      	cmp	ip, r3
    4a20:	d8f2      	bhi.n	4a08 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4a22:	4634      	mov	r4, r6
    4a24:	8004      	strh	r4, [r0, #0]
    4a26:	4620      	mov	r0, r4
    4a28:	42b4      	cmp	r4, r6
    4a2a:	d0e0      	beq.n	49ee <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4a30:	f000 b834 	b.w	4a9c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4a34:	20000ea4 	.word	0x20000ea4

00004a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a3c:	4606      	mov	r6, r0
    4a3e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4a42:	460c      	mov	r4, r1
    4a44:	f243 0702 	movw	r7, #12290	; 0x3002
    4a48:	38ff      	subs	r0, #255	; 0xff
    4a4a:	d020      	beq.n	4a8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4a4c:	2c02      	cmp	r4, #2
    4a4e:	d302      	bcc.n	4a56 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4a50:	2007      	movs	r0, #7
    4a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a56:	4630      	mov	r0, r6
    4a58:	f000 f85a 	bl	4b10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4a5c:	0005      	movs	r5, r0
    4a5e:	d016      	beq.n	4a8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4a60:	480c      	ldr	r0, [pc, #48]	; (4a94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4a62:	4629      	mov	r1, r5
    4a64:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4a68:	4630      	mov	r0, r6
    4a6a:	4790      	blx	r2
    4a6c:	480a      	ldr	r0, [pc, #40]	; (4a98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4a6e:	2100      	movs	r1, #0
    4a70:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4a74:	68f8      	ldr	r0, [r7, #12]
    4a76:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4a7a:	4620      	mov	r0, r4
    4a7c:	f000 f88a 	bl	4b94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4a80:	4602      	mov	r2, r0
    4a82:	4629      	mov	r1, r5
    4a84:	6878      	ldr	r0, [r7, #4]
    4a86:	f008 ff45 	bl	d914 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4a8a:	2000      	movs	r0, #0
    4a8c:	e7e1      	b.n	4a52 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4a8e:	4638      	mov	r0, r7
    4a90:	e7df      	b.n	4a52 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4a92:	0000      	.short	0x0000
    4a94:	00004bc8 	.word	0x00004bc8
    4a98:	20000ea4 	.word	0x20000ea4
    4a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4aa0:	4690      	mov	r8, r2
    4aa2:	460d      	mov	r5, r1
    4aa4:	4607      	mov	r7, r0
    4aa6:	f008 ff79 	bl	d99c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4aaa:	b148      	cbz	r0, 4ac0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4aac:	4816      	ldr	r0, [pc, #88]	; (4b08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4aae:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4ab2:	68f0      	ldr	r0, [r6, #12]
    4ab4:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4ab8:	b128      	cbz	r0, 4ac6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4aba:	f240 1109 	movw	r1, #265	; 0x109
    4abe:	e015      	b.n	4aec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4ac0:	f44f 7184 	mov.w	r1, #264	; 0x108
    4ac4:	e012      	b.n	4aec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4ac6:	6870      	ldr	r0, [r6, #4]
    4ac8:	2800      	cmp	r0, #0
    4aca:	d01a      	beq.n	4b02 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4acc:	4628      	mov	r0, r5
    4ace:	f000 f861 	bl	4b94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4ad2:	4601      	mov	r1, r0
    4ad4:	6870      	ldr	r0, [r6, #4]
    4ad6:	f008 fecf 	bl	d878 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4ada:	0004      	movs	r4, r0
    4adc:	d010      	beq.n	4b00 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4ade:	68f0      	ldr	r0, [r6, #12]
    4ae0:	2d02      	cmp	r5, #2
    4ae2:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4ae6:	d304      	bcc.n	4af2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4ae8:	f44f 718a 	mov.w	r1, #276	; 0x114
    4aec:	2017      	movs	r0, #23
    4aee:	f7ff fd25 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4af2:	4806      	ldr	r0, [pc, #24]	; (4b0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4af4:	4642      	mov	r2, r8
    4af6:	4621      	mov	r1, r4
    4af8:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4afc:	4638      	mov	r0, r7
    4afe:	4798      	blx	r3
    4b00:	4620      	mov	r0, r4
    4b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b06:	0000      	.short	0x0000
    4b08:	20000ea4 	.word	0x20000ea4
    4b0c:	00004bc0 	.word	0x00004bc0
    4b10:	b570      	push	{r4, r5, r6, lr}
    4b12:	460c      	mov	r4, r1
    4b14:	4605      	mov	r5, r0
    4b16:	f008 ff41 	bl	d99c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4b1a:	2800      	cmp	r0, #0
    4b1c:	d005      	beq.n	4b2a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4b1e:	4803      	ldr	r0, [pc, #12]	; (4b2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4b20:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4b24:	68c0      	ldr	r0, [r0, #12]
    4b26:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4b2a:	bd70      	pop	{r4, r5, r6, pc}
    4b2c:	20000ea4 	.word	0x20000ea4
    4b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b34:	4e16      	ldr	r6, [pc, #88]	; (4b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4b36:	4688      	mov	r8, r1
    4b38:	4605      	mov	r5, r0
    4b3a:	2400      	movs	r4, #0
    4b3c:	6828      	ldr	r0, [r5, #0]
    4b3e:	1cc0      	adds	r0, r0, #3
    4b40:	f020 0003 	bic.w	r0, r0, #3
    4b44:	6028      	str	r0, [r5, #0]
    4b46:	4620      	mov	r0, r4
    4b48:	f000 f824 	bl	4b94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4b4c:	5d31      	ldrb	r1, [r6, r4]
    4b4e:	4348      	muls	r0, r1
    4b50:	f1b8 0f00 	cmp.w	r8, #0
    4b54:	d001      	beq.n	4b5a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4b56:	2200      	movs	r2, #0
    4b58:	e000      	b.n	4b5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4b5a:	682a      	ldr	r2, [r5, #0]
    4b5c:	4601      	mov	r1, r0
    4b5e:	9200      	str	r2, [sp, #0]
    4b60:	b132      	cbz	r2, 4b70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4b62:	2700      	movs	r7, #0
    4b64:	ea4f 000d 	mov.w	r0, sp
    4b68:	f008 feb3 	bl	d8d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b6c:	b11f      	cbz	r7, 4b76 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4b6e:	e006      	b.n	4b7e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4b70:	2701      	movs	r7, #1
    4b72:	2000      	movs	r0, #0
    4b74:	e7f8      	b.n	4b68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4b76:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4b7a:	9a00      	ldr	r2, [sp, #0]
    4b7c:	604a      	str	r2, [r1, #4]
    4b7e:	6829      	ldr	r1, [r5, #0]
    4b80:	1c64      	adds	r4, r4, #1
    4b82:	4408      	add	r0, r1
    4b84:	b2e4      	uxtb	r4, r4
    4b86:	6028      	str	r0, [r5, #0]
    4b88:	2c02      	cmp	r4, #2
    4b8a:	d3d7      	bcc.n	4b3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b90:	20000ea4 	.word	0x20000ea4
    4b94:	4903      	ldr	r1, [pc, #12]	; (4ba4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    4b96:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4b9a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4b9e:	1cc0      	adds	r0, r0, #3
    4ba0:	4008      	ands	r0, r1
    4ba2:	4770      	bx	lr
    4ba4:	00004bbc 	.word	0x00004bbc
    4ba8:	4803      	ldr	r0, [pc, #12]	; (4bb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    4baa:	7801      	ldrb	r1, [r0, #0]
    4bac:	7840      	ldrb	r0, [r0, #1]
    4bae:	4281      	cmp	r1, r0
    4bb0:	d300      	bcc.n	4bb4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    4bb2:	4608      	mov	r0, r1
    4bb4:	4770      	bx	lr
    4bb6:	0000      	.short	0x0000
    4bb8:	20000ea4 	.word	0x20000ea4
    4bbc:	00dc0210 	.word	0x00dc0210
    4bc0:	0000d9b1 	.word	0x0000d9b1
    4bc4:	0000d9b1 	.word	0x0000d9b1
    4bc8:	0000ee8b 	.word	0x0000ee8b
    4bcc:	0000e723 	.word	0x0000e723

00004bd0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4bd0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bd4:	4c26      	ldr	r4, [pc, #152]	; (4c70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4bd6:	4680      	mov	r8, r0
    4bd8:	b081      	sub	sp, #4
    4bda:	6820      	ldr	r0, [r4, #0]
    4bdc:	469a      	mov	sl, r3
    4bde:	4693      	mov	fp, r2
    4be0:	b158      	cbz	r0, 4bfa <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4be2:	7a02      	ldrb	r2, [r0, #8]
    4be4:	4542      	cmp	r2, r8
    4be6:	d903      	bls.n	4bf0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4be8:	6841      	ldr	r1, [r0, #4]
    4bea:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4bee:	b140      	cbz	r0, 4c02 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4bf0:	f243 0002 	movw	r0, #12290	; 0x3002
    4bf4:	b005      	add	sp, #20
    4bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bfa:	21a5      	movs	r1, #165	; 0xa5
    4bfc:	2018      	movs	r0, #24
    4bfe:	f7ff fc9d 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c02:	4619      	mov	r1, r3
    4c04:	9802      	ldr	r0, [sp, #8]
    4c06:	f008 feeb 	bl	d9e0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    4c0a:	b286      	uxth	r6, r0
    4c0c:	4658      	mov	r0, fp
    4c0e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4c10:	f008 fedd 	bl	d9ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4c14:	b285      	uxth	r5, r0
    4c16:	1970      	adds	r0, r6, r5
    4c18:	1d00      	adds	r0, r0, #4
    4c1a:	b287      	uxth	r7, r0
    4c1c:	6820      	ldr	r0, [r4, #0]
    4c1e:	46a1      	mov	r9, r4
    4c20:	4639      	mov	r1, r7
    4c22:	6800      	ldr	r0, [r0, #0]
    4c24:	f008 fe28 	bl	d878 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4c28:	0004      	movs	r4, r0
    4c2a:	d01f      	beq.n	4c6c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4c2c:	8067      	strh	r7, [r4, #2]
    4c2e:	8025      	strh	r5, [r4, #0]
    4c30:	4629      	mov	r1, r5
    4c32:	1d20      	adds	r0, r4, #4
    4c34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4c36:	4607      	mov	r7, r0
    4c38:	465a      	mov	r2, fp
    4c3a:	2301      	movs	r3, #1
    4c3c:	9500      	str	r5, [sp, #0]
    4c3e:	f008 fd7a 	bl	d736 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c42:	8820      	ldrh	r0, [r4, #0]
    4c44:	4631      	mov	r1, r6
    4c46:	4438      	add	r0, r7
    4c48:	2301      	movs	r3, #1
    4c4a:	9a02      	ldr	r2, [sp, #8]
    4c4c:	f8cd a000 	str.w	sl, [sp]
    4c50:	f008 fd71 	bl	d736 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c54:	8820      	ldrh	r0, [r4, #0]
    4c56:	19c1      	adds	r1, r0, r7
    4c58:	4638      	mov	r0, r7
    4c5a:	f008 fd9d 	bl	d798 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4c5e:	f8d9 0000 	ldr.w	r0, [r9]
    4c62:	6841      	ldr	r1, [r0, #4]
    4c64:	2000      	movs	r0, #0
    4c66:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4c6a:	e7c3      	b.n	4bf4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c6c:	2004      	movs	r0, #4
    4c6e:	e7c1      	b.n	4bf4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c70:	20000080 	.word	0x20000080

00004c74 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4c74:	b570      	push	{r4, r5, r6, lr}
    4c76:	4c14      	ldr	r4, [pc, #80]	; (4cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4c78:	6823      	ldr	r3, [r4, #0]
    4c7a:	b18b      	cbz	r3, 4ca0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4c7c:	7a19      	ldrb	r1, [r3, #8]
    4c7e:	4281      	cmp	r1, r0
    4c80:	d912      	bls.n	4ca8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c82:	685a      	ldr	r2, [r3, #4]
    4c84:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4c88:	b171      	cbz	r1, 4ca8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c8a:	2500      	movs	r5, #0
    4c8c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4c90:	884a      	ldrh	r2, [r1, #2]
    4c92:	6818      	ldr	r0, [r3, #0]
    4c94:	f008 fe3e 	bl	d914 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4c98:	6821      	ldr	r1, [r4, #0]
    4c9a:	2000      	movs	r0, #0
    4c9c:	7a0a      	ldrb	r2, [r1, #8]
    4c9e:	e00c      	b.n	4cba <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4ca0:	21c8      	movs	r1, #200	; 0xc8
    4ca2:	2018      	movs	r0, #24
    4ca4:	f7ff fc4a 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ca8:	f243 0002 	movw	r0, #12290	; 0x3002
    4cac:	bd70      	pop	{r4, r5, r6, pc}
    4cae:	684b      	ldr	r3, [r1, #4]
    4cb0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4cb4:	b933      	cbnz	r3, 4cc4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4cb6:	1c40      	adds	r0, r0, #1
    4cb8:	b2c0      	uxtb	r0, r0
    4cba:	4282      	cmp	r2, r0
    4cbc:	d8f7      	bhi.n	4cae <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4cbe:	6808      	ldr	r0, [r1, #0]
    4cc0:	f008 fe1d 	bl	d8fe <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4cc4:	2000      	movs	r0, #0
    4cc6:	bd70      	pop	{r4, r5, r6, pc}
    4cc8:	20000080 	.word	0x20000080

00004ccc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cd0:	460d      	mov	r5, r1
    4cd2:	0004      	movs	r4, r0
    4cd4:	4690      	mov	r8, r2
    4cd6:	f04f 0600 	mov.w	r6, #0
    4cda:	d009      	beq.n	4cf0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4cdc:	2700      	movs	r7, #0
    4cde:	1ce0      	adds	r0, r4, #3
    4ce0:	f020 0003 	bic.w	r0, r0, #3
    4ce4:	42a0      	cmp	r0, r4
    4ce6:	d005      	beq.n	4cf4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4ce8:	2186      	movs	r1, #134	; 0x86
    4cea:	2018      	movs	r0, #24
    4cec:	f7ff fc26 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cf0:	2701      	movs	r7, #1
    4cf2:	e7f4      	b.n	4cde <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4cf4:	b1cd      	cbz	r5, 4d2a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4cf6:	4611      	mov	r1, r2
    4cf8:	2000      	movs	r0, #0
    4cfa:	f008 fdea 	bl	d8d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4cfe:	300c      	adds	r0, #12
    4d00:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4d04:	b98f      	cbnz	r7, 4d2a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4d06:	4f0a      	ldr	r7, [pc, #40]	; (4d30 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4d08:	f104 000c 	add.w	r0, r4, #12
    4d0c:	00aa      	lsls	r2, r5, #2
    4d0e:	603c      	str	r4, [r7, #0]
    4d10:	7225      	strb	r5, [r4, #8]
    4d12:	6060      	str	r0, [r4, #4]
    4d14:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4d18:	6020      	str	r0, [r4, #0]
    4d1a:	2100      	movs	r1, #0
    4d1c:	6860      	ldr	r0, [r4, #4]
    4d1e:	f007 fe8a 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4d22:	4641      	mov	r1, r8
    4d24:	6838      	ldr	r0, [r7, #0]
    4d26:	f008 fdd4 	bl	d8d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d2a:	4630      	mov	r0, r6
    4d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d30:	20000080 	.word	0x20000080

00004d34 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4d34:	b570      	push	{r4, r5, r6, lr}
    4d36:	4d08      	ldr	r5, [pc, #32]	; (4d58 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4d38:	6828      	ldr	r0, [r5, #0]
    4d3a:	2800      	cmp	r0, #0
    4d3c:	d00a      	beq.n	4d54 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4d3e:	2400      	movs	r4, #0
    4d40:	e004      	b.n	4d4c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4d42:	4620      	mov	r0, r4
    4d44:	f7ff ff96 	bl	4c74 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4d48:	1c64      	adds	r4, r4, #1
    4d4a:	b2e4      	uxtb	r4, r4
    4d4c:	6828      	ldr	r0, [r5, #0]
    4d4e:	7a00      	ldrb	r0, [r0, #8]
    4d50:	42a0      	cmp	r0, r4
    4d52:	d8f6      	bhi.n	4d42 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4d54:	bd70      	pop	{r4, r5, r6, pc}
    4d56:	0000      	.short	0x0000
    4d58:	20000080 	.word	0x20000080

00004d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4d5c:	4909      	ldr	r1, [pc, #36]	; (4d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4d5e:	b510      	push	{r4, lr}
    4d60:	4602      	mov	r2, r0
    4d62:	6809      	ldr	r1, [r1, #0]
    4d64:	2000      	movs	r0, #0
    4d66:	b149      	cbz	r1, 4d7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4d68:	7a0b      	ldrb	r3, [r1, #8]
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d905      	bls.n	4d7a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d6e:	6849      	ldr	r1, [r1, #4]
    4d70:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4d74:	2900      	cmp	r1, #0
    4d76:	d000      	beq.n	4d7a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d78:	1d08      	adds	r0, r1, #4
    4d7a:	bd10      	pop	{r4, pc}
    4d7c:	21ee      	movs	r1, #238	; 0xee
    4d7e:	2018      	movs	r0, #24
    4d80:	f7ff fbdc 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d84:	20000080 	.word	0x20000080

00004d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4d88:	490a      	ldr	r1, [pc, #40]	; (4db4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4d8a:	b510      	push	{r4, lr}
    4d8c:	4602      	mov	r2, r0
    4d8e:	6809      	ldr	r1, [r1, #0]
    4d90:	2000      	movs	r0, #0
    4d92:	b159      	cbz	r1, 4dac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4d94:	7a0b      	ldrb	r3, [r1, #8]
    4d96:	4293      	cmp	r3, r2
    4d98:	d907      	bls.n	4daa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4d9a:	6849      	ldr	r1, [r1, #4]
    4d9c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4da0:	2900      	cmp	r1, #0
    4da2:	d002      	beq.n	4daa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4da4:	f831 0b04 	ldrh.w	r0, [r1], #4
    4da8:	4408      	add	r0, r1
    4daa:	bd10      	pop	{r4, pc}
    4dac:	21fc      	movs	r1, #252	; 0xfc
    4dae:	2018      	movs	r0, #24
    4db0:	f7ff fbc4 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4db4:	20000080 	.word	0x20000080

00004db8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>:
    4db8:	b510      	push	{r4, lr}
    4dba:	4604      	mov	r4, r0
    4dbc:	2001      	movs	r0, #1
    4dbe:	f7ff fd9f 	bl	4900 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    4dc2:	4284      	cmp	r4, r0
    4dc4:	d206      	bcs.n	4dd4 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY+0x1c>
    4dc6:	4904      	ldr	r1, [pc, #16]	; (4dd8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY+0x20>)
    4dc8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    4dcc:	6809      	ldr	r1, [r1, #0]
    4dce:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    4dd2:	bd10      	pop	{r4, pc}
    4dd4:	2000      	movs	r0, #0
    4dd6:	bd10      	pop	{r4, pc}
    4dd8:	20000084 	.word	0x20000084

00004ddc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4dde:	9800      	ldr	r0, [sp, #0]
    4de0:	b158      	cbz	r0, 4dfa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4de2:	2600      	movs	r6, #0
    4de4:	ea4f 000d 	mov.w	r0, sp
    4de8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4dec:	0149      	lsls	r1, r1, #5
    4dee:	460c      	mov	r4, r1
    4df0:	f008 fd6f 	bl	d8d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4df4:	4605      	mov	r5, r0
    4df6:	b11e      	cbz	r6, 4e00 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    4df8:	e00d      	b.n	4e16 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3a>
    4dfa:	2601      	movs	r6, #1
    4dfc:	2000      	movs	r0, #0
    4dfe:	e7f3      	b.n	4de8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    4e00:	4621      	mov	r1, r4
    4e02:	9800      	ldr	r0, [sp, #0]
    4e04:	f008 fd38 	bl	d878 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4e08:	4906      	ldr	r1, [pc, #24]	; (4e24 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>)
    4e0a:	6008      	str	r0, [r1, #0]
    4e0c:	b128      	cbz	r0, 4e1a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3e>
    4e0e:	4622      	mov	r2, r4
    4e10:	2100      	movs	r1, #0
    4e12:	f007 fe10 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4e16:	4628      	mov	r0, r5
    4e18:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4e1a:	211e      	movs	r1, #30
    4e1c:	2009      	movs	r0, #9
    4e1e:	f7ff fb8d 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e22:	0000      	.short	0x0000
    4e24:	20000084 	.word	0x20000084

00004e28 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI>:
    4e28:	b510      	push	{r4, lr}
    4e2a:	2001      	movs	r0, #1
    4e2c:	f7ff fd68 	bl	4900 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    4e30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4e34:	0142      	lsls	r2, r0, #5
    4e36:	4803      	ldr	r0, [pc, #12]	; (4e44 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x1c>)
    4e38:	2100      	movs	r1, #0
    4e3a:	6800      	ldr	r0, [r0, #0]
    4e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e40:	f007 bdf9 	b.w	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4e44:	20000084 	.word	0x20000084
    4e48:	4909      	ldr	r1, [pc, #36]	; (4e70 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x48>)
    4e4a:	b510      	push	{r4, lr}
    4e4c:	4807      	ldr	r0, [pc, #28]	; (4e6c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x44>)
    4e4e:	6008      	str	r0, [r1, #0]
    4e50:	4b08      	ldr	r3, [pc, #32]	; (4e74 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x4c>)
    4e52:	2011      	movs	r0, #17
    4e54:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4e58:	2200      	movs	r2, #0
    4e5a:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4e5e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4e62:	1c40      	adds	r0, r0, #1
    4e64:	b2c0      	uxtb	r0, r0
    4e66:	2814      	cmp	r0, #20
    4e68:	d3f4      	bcc.n	4e54 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x2c>
    4e6a:	bd10      	pop	{r4, pc}
    4e6c:	fffe0000 	.word	0xfffe0000
    4e70:	4001f508 	.word	0x4001f508
    4e74:	4001f000 	.word	0x4001f000
    4e78:	b570      	push	{r4, r5, r6, lr}
    4e7a:	2420      	movs	r4, #32
    4e7c:	2100      	movs	r1, #0
    4e7e:	2301      	movs	r3, #1
    4e80:	fa20 f201 	lsr.w	r2, r0, r1
    4e84:	07d2      	lsls	r2, r2, #31
    4e86:	d020      	beq.n	4eca <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xa2>
    4e88:	b24a      	sxtb	r2, r1
    4e8a:	2a00      	cmp	r2, #0
    4e8c:	db10      	blt.n	4eb0 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x88>
    4e8e:	bf00      	nop
    4e90:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4e94:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4e98:	f002 051f 	and.w	r5, r2, #31
    4e9c:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4ea0:	fa03 f505 	lsl.w	r5, r3, r5
    4ea4:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4ea8:	f3bf 8f4f 	dsb	sy
    4eac:	f3bf 8f6f 	isb	sy
    4eb0:	db0b      	blt.n	4eca <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xa2>
    4eb2:	f002 051f 	and.w	r5, r2, #31
    4eb6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4eba:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4ebe:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4ec2:	fa03 f505 	lsl.w	r5, r3, r5
    4ec6:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4eca:	f101 0101 	add.w	r1, r1, #1
    4ece:	42a1      	cmp	r1, r4
    4ed0:	d3d6      	bcc.n	4e80 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x58>
    4ed2:	bd70      	pop	{r4, r5, r6, pc}
    4ed4:	b570      	push	{r4, r5, r6, lr}
    4ed6:	0042      	lsls	r2, r0, #1
    4ed8:	f04f 0100 	mov.w	r1, #0
    4edc:	d501      	bpl.n	4ee2 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xba>
    4ede:	4a14      	ldr	r2, [pc, #80]	; (4f30 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x108>)
    4ee0:	6011      	str	r1, [r2, #0]
    4ee2:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4ee6:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4eea:	429a      	cmp	r2, r3
    4eec:	d003      	beq.n	4ef6 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xce>
    4eee:	2164      	movs	r1, #100	; 0x64
    4ef0:	201b      	movs	r0, #27
    4ef2:	f7ff fb23 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ef6:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4efa:	d014      	beq.n	4f26 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xfe>
    4efc:	4a0d      	ldr	r2, [pc, #52]	; (4f34 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x10c>)
    4efe:	2001      	movs	r0, #1
    4f00:	6050      	str	r0, [r2, #4]
    4f02:	1e83      	subs	r3, r0, #2
    4f04:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4f08:	4a0b      	ldr	r2, [pc, #44]	; (4f38 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x110>)
    4f0a:	6090      	str	r0, [r2, #8]
    4f0c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4f10:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4f14:	4c09      	ldr	r4, [pc, #36]	; (4f3c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x114>)
    4f16:	6021      	str	r1, [r4, #0]
    4f18:	1d25      	adds	r5, r4, #4
    4f1a:	6028      	str	r0, [r5, #0]
    4f1c:	6090      	str	r0, [r2, #8]
    4f1e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4f22:	6021      	str	r1, [r4, #0]
    4f24:	6028      	str	r0, [r5, #0]
    4f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f2a:	f7ff bf8d 	b.w	4e48 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x20>
    4f2e:	0000      	.short	0x0000
    4f30:	4001e504 	.word	0x4001e504
    4f34:	4000e000 	.word	0x4000e000
    4f38:	4000f000 	.word	0x4000f000
    4f3c:	4000f500 	.word	0x4000f500

00004f40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4f40:	b570      	push	{r4, r5, r6, lr}
    4f42:	4c0a      	ldr	r4, [pc, #40]	; (4f6c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4f44:	460d      	mov	r5, r1
    4f46:	6020      	str	r0, [r4, #0]
    4f48:	f7ff ffc4 	bl	4ed4 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xac>
    4f4c:	6820      	ldr	r0, [r4, #0]
    4f4e:	f7ff ff93 	bl	4e78 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x50>
    4f52:	f000 f877 	bl	5044 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4f56:	f7ff ff77 	bl	4e48 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x20>
    4f5a:	f008 fd59 	bl	da10 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4f5e:	4628      	mov	r0, r5
    4f60:	f000 f8aa 	bl	50b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f68:	f000 b8c2 	b.w	50f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4f6c:	20000088 	.word	0x20000088

00004f70 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4f70:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4f74:	4e2f      	ldr	r6, [pc, #188]	; (5034 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    4f76:	4683      	mov	fp, r0
    4f78:	6830      	ldr	r0, [r6, #0]
    4f7a:	9001      	str	r0, [sp, #4]
    4f7c:	2701      	movs	r7, #1
    4f7e:	482e      	ldr	r0, [pc, #184]	; (5038 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4f80:	f007 fc36 	bl	c7f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4f84:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 5038 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    4f88:	b920      	cbnz	r0, 4f94 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4f8a:	2700      	movs	r7, #0
    4f8c:	f108 0001 	add.w	r0, r8, #1
    4f90:	f007 fc45 	bl	c81e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4f94:	4c29      	ldr	r4, [pc, #164]	; (503c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    4f96:	2500      	movs	r5, #0
    4f98:	f04f 0903 	mov.w	r9, #3
    4f9c:	2001      	movs	r0, #1
    4f9e:	6060      	str	r0, [r4, #4]
    4fa0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4fa4:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4fa8:	f8c6 b000 	str.w	fp, [r6]
    4fac:	6020      	str	r0, [r4, #0]
    4fae:	f8df a090 	ldr.w	sl, [pc, #144]	; 5040 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    4fb2:	e017      	b.n	4fe4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4fb4:	f8da 0000 	ldr.w	r0, [sl]
    4fb8:	06c0      	lsls	r0, r0, #27
    4fba:	d513      	bpl.n	4fe4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4fbc:	200e      	movs	r0, #14
    4fbe:	f008 fd18 	bl	d9f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4fc2:	f3ef 8010 	mrs	r0, PRIMASK
    4fc6:	9000      	str	r0, [sp, #0]
    4fc8:	b672      	cpsid	i
    4fca:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    4fce:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4fd2:	b920      	cbnz	r0, 4fde <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4fd4:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4fd8:	b908      	cbnz	r0, 4fde <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4fda:	f7ff f955 	bl	4288 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4fde:	9800      	ldr	r0, [sp, #0]
    4fe0:	b900      	cbnz	r0, 4fe4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4fe2:	b662      	cpsie	i
    4fe4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4fe8:	b918      	cbnz	r0, 4ff2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4fea:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4fee:	2800      	cmp	r0, #0
    4ff0:	d0e0      	beq.n	4fb4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4ff2:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4ff6:	2800      	cmp	r0, #0
    4ff8:	d1d0      	bne.n	4f9c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    4ffa:	b137      	cbz	r7, 500a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4ffc:	9801      	ldr	r0, [sp, #4]
    4ffe:	6030      	str	r0, [r6, #0]
    5000:	f108 0001 	add.w	r0, r8, #1
    5004:	f007 fbf4 	bl	c7f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5008:	e011      	b.n	502e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    500a:	f108 0001 	add.w	r0, r8, #1
    500e:	f007 fbef 	bl	c7f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5012:	2800      	cmp	r0, #0
    5014:	d1ba      	bne.n	4f8c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    5016:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    501a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    501e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    5022:	200e      	movs	r0, #14
    5024:	f008 fce5 	bl	d9f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    5028:	4803      	ldr	r0, [pc, #12]	; (5038 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    502a:	f007 fbf8 	bl	c81e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    502e:	2000      	movs	r0, #0
    5030:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5034:	4000e504 	.word	0x4000e504
    5038:	2000028b 	.word	0x2000028b
    503c:	4000e000 	.word	0x4000e000
    5040:	e000ed10 	.word	0xe000ed10

00005044 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5044:	b510      	push	{r4, lr}
    5046:	4808      	ldr	r0, [pc, #32]	; (5068 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5048:	f007 fbe5 	bl	c816 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    504c:	b108      	cbz	r0, 5052 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    504e:	2124      	movs	r1, #36	; 0x24
    5050:	e006      	b.n	5060 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    5052:	4805      	ldr	r0, [pc, #20]	; (5068 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5054:	1c40      	adds	r0, r0, #1
    5056:	f007 fbde 	bl	c816 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    505a:	2800      	cmp	r0, #0
    505c:	d003      	beq.n	5066 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    505e:	2128      	movs	r1, #40	; 0x28
    5060:	201d      	movs	r0, #29
    5062:	f7ff fa6b 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5066:	bd10      	pop	{r4, pc}
    5068:	2000028b 	.word	0x2000028b

0000506c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    506c:	b570      	push	{r4, r5, r6, lr}
    506e:	4911      	ldr	r1, [pc, #68]	; (50b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5070:	680a      	ldr	r2, [r1, #0]
    5072:	b1ea      	cbz	r2, 50b0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5074:	2300      	movs	r3, #0
    5076:	461d      	mov	r5, r3
    5078:	2401      	movs	r4, #1
    507a:	684a      	ldr	r2, [r1, #4]
    507c:	1c52      	adds	r2, r2, #1
    507e:	604a      	str	r2, [r1, #4]
    5080:	2a09      	cmp	r2, #9
    5082:	d300      	bcc.n	5086 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5084:	604d      	str	r5, [r1, #4]
    5086:	790e      	ldrb	r6, [r1, #4]
    5088:	fa04 f206 	lsl.w	r2, r4, r6
    508c:	680e      	ldr	r6, [r1, #0]
    508e:	4216      	tst	r6, r2
    5090:	d00b      	beq.n	50aa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5092:	f3ef 8310 	mrs	r3, PRIMASK
    5096:	b672      	cpsid	i
    5098:	680c      	ldr	r4, [r1, #0]
    509a:	4394      	bics	r4, r2
    509c:	600c      	str	r4, [r1, #0]
    509e:	b903      	cbnz	r3, 50a2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    50a0:	b662      	cpsie	i
    50a2:	6849      	ldr	r1, [r1, #4]
    50a4:	6001      	str	r1, [r0, #0]
    50a6:	2000      	movs	r0, #0
    50a8:	bd70      	pop	{r4, r5, r6, pc}
    50aa:	1c5b      	adds	r3, r3, #1
    50ac:	2b09      	cmp	r3, #9
    50ae:	d3e4      	bcc.n	507a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    50b0:	2005      	movs	r0, #5
    50b2:	bd70      	pop	{r4, r5, r6, pc}
    50b4:	2000008c 	.word	0x2000008c

000050b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    50b8:	4802      	ldr	r0, [pc, #8]	; (50c4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    50ba:	2100      	movs	r1, #0
    50bc:	6001      	str	r1, [r0, #0]
    50be:	6041      	str	r1, [r0, #4]
    50c0:	4770      	bx	lr
    50c2:	0000      	.short	0x0000
    50c4:	2000008c 	.word	0x2000008c

000050c8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    50c8:	b510      	push	{r4, lr}
    50ca:	4c08      	ldr	r4, [pc, #32]	; (50ec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    50cc:	7861      	ldrb	r1, [r4, #1]
    50ce:	b109      	cbz	r1, 50d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    50d0:	200f      	movs	r0, #15
    50d2:	bd10      	pop	{r4, pc}
    50d4:	f7ff f864 	bl	41a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    50d8:	7020      	strb	r0, [r4, #0]
    50da:	28ff      	cmp	r0, #255	; 0xff
    50dc:	d001      	beq.n	50e2 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    50de:	2000      	movs	r0, #0
    50e0:	bd10      	pop	{r4, pc}
    50e2:	2176      	movs	r1, #118	; 0x76
    50e4:	201f      	movs	r0, #31
    50e6:	f7ff fa29 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50ea:	0000      	.short	0x0000
    50ec:	20000094 	.word	0x20000094

000050f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    50f0:	4901      	ldr	r1, [pc, #4]	; (50f8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    50f2:	2000      	movs	r0, #0
    50f4:	7048      	strb	r0, [r1, #1]
    50f6:	4770      	bx	lr
    50f8:	20000094 	.word	0x20000094

000050fc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    50fc:	4806      	ldr	r0, [pc, #24]	; (5118 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    50fe:	4a07      	ldr	r2, [pc, #28]	; (511c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5100:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5102:	8852      	ldrh	r2, [r2, #2]
    5104:	4291      	cmp	r1, r2
    5106:	d104      	bne.n	5112 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5108:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    510c:	b108      	cbz	r0, 5112 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    510e:	2000      	movs	r0, #0
    5110:	4770      	bx	lr
    5112:	2001      	movs	r0, #1
    5114:	4770      	bx	lr
    5116:	0000      	.short	0x0000
    5118:	2000107e 	.word	0x2000107e
    511c:	20000278 	.word	0x20000278

00005120 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5120:	4901      	ldr	r1, [pc, #4]	; (5128 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5122:	8048      	strh	r0, [r1, #2]
    5124:	4770      	bx	lr
    5126:	0000      	.short	0x0000
    5128:	20000278 	.word	0x20000278

0000512c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    512c:	4808      	ldr	r0, [pc, #32]	; (5150 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    512e:	4a09      	ldr	r2, [pc, #36]	; (5154 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5130:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5132:	8852      	ldrh	r2, [r2, #2]
    5134:	4291      	cmp	r1, r2
    5136:	d109      	bne.n	514c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5138:	f64f 71ff 	movw	r1, #65535	; 0xffff
    513c:	8481      	strh	r1, [r0, #36]	; 0x24
    513e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5142:	b119      	cbz	r1, 514c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5144:	2100      	movs	r1, #0
    5146:	7001      	strb	r1, [r0, #0]
    5148:	2001      	movs	r0, #1
    514a:	4770      	bx	lr
    514c:	2000      	movs	r0, #0
    514e:	4770      	bx	lr
    5150:	2000107e 	.word	0x2000107e
    5154:	20000278 	.word	0x20000278

00005158 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5158:	4807      	ldr	r0, [pc, #28]	; (5178 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    515a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    515e:	2901      	cmp	r1, #1
    5160:	d007      	beq.n	5172 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    5162:	2101      	movs	r1, #1
    5164:	7001      	strb	r1, [r0, #0]
    5166:	4805      	ldr	r0, [pc, #20]	; (517c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5168:	4903      	ldr	r1, [pc, #12]	; (5178 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    516a:	8800      	ldrh	r0, [r0, #0]
    516c:	8488      	strh	r0, [r1, #36]	; 0x24
    516e:	2001      	movs	r0, #1
    5170:	4770      	bx	lr
    5172:	2000      	movs	r0, #0
    5174:	4770      	bx	lr
    5176:	0000      	.short	0x0000
    5178:	2000107e 	.word	0x2000107e
    517c:	20000278 	.word	0x20000278

00005180 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5180:	4906      	ldr	r1, [pc, #24]	; (519c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    5182:	4b07      	ldr	r3, [pc, #28]	; (51a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5184:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5186:	885b      	ldrh	r3, [r3, #2]
    5188:	429a      	cmp	r2, r3
    518a:	d105      	bne.n	5198 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    518c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5190:	b112      	cbz	r2, 5198 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5192:	6001      	str	r1, [r0, #0]
    5194:	2001      	movs	r0, #1
    5196:	4770      	bx	lr
    5198:	2000      	movs	r0, #0
    519a:	4770      	bx	lr
    519c:	2000107e 	.word	0x2000107e
    51a0:	20000278 	.word	0x20000278

000051a4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    51a4:	4909      	ldr	r1, [pc, #36]	; (51cc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    51a6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    51a8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    51ac:	3bff      	subs	r3, #255	; 0xff
    51ae:	d002      	beq.n	51b6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    51b0:	2100      	movs	r1, #0
    51b2:	6001      	str	r1, [r0, #0]
    51b4:	e007      	b.n	51c6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    51b6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    51ba:	4904      	ldr	r1, [pc, #16]	; (51cc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    51bc:	2a01      	cmp	r2, #1
    51be:	d002      	beq.n	51c6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    51c0:	6001      	str	r1, [r0, #0]
    51c2:	2001      	movs	r0, #1
    51c4:	4770      	bx	lr
    51c6:	2000      	movs	r0, #0
    51c8:	4770      	bx	lr
    51ca:	0000      	.short	0x0000
    51cc:	2000107e 	.word	0x2000107e

000051d0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    51d0:	4901      	ldr	r1, [pc, #4]	; (51d8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    51d2:	8008      	strh	r0, [r1, #0]
    51d4:	4770      	bx	lr
    51d6:	0000      	.short	0x0000
    51d8:	20000278 	.word	0x20000278

000051dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    51dc:	4905      	ldr	r1, [pc, #20]	; (51f4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    51de:	2000      	movs	r0, #0
    51e0:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    51e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    51e8:	8488      	strh	r0, [r1, #36]	; 0x24
    51ea:	4903      	ldr	r1, [pc, #12]	; (51f8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    51ec:	8008      	strh	r0, [r1, #0]
    51ee:	8048      	strh	r0, [r1, #2]
    51f0:	4770      	bx	lr
    51f2:	0000      	.short	0x0000
    51f4:	2000107e 	.word	0x2000107e
    51f8:	20000278 	.word	0x20000278
    51fc:	4905      	ldr	r1, [pc, #20]	; (5214 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    51fe:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5200:	4282      	cmp	r2, r0
    5202:	d105      	bne.n	5210 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5204:	2000      	movs	r0, #0
    5206:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    520a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    520e:	8488      	strh	r0, [r1, #36]	; 0x24
    5210:	4770      	bx	lr
    5212:	0000      	.short	0x0000
    5214:	2000107e 	.word	0x2000107e

00005218 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5218:	4a0a      	ldr	r2, [pc, #40]	; (5244 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    521a:	b110      	cbz	r0, 5222 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    521c:	2801      	cmp	r0, #1
    521e:	d007      	beq.n	5230 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5220:	e00e      	b.n	5240 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5222:	7850      	ldrb	r0, [r2, #1]
    5224:	b160      	cbz	r0, 5240 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5226:	f8d2 0002 	ldr.w	r0, [r2, #2]
    522a:	6008      	str	r0, [r1, #0]
    522c:	88d0      	ldrh	r0, [r2, #6]
    522e:	e004      	b.n	523a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5230:	7810      	ldrb	r0, [r2, #0]
    5232:	b128      	cbz	r0, 5240 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5234:	6890      	ldr	r0, [r2, #8]
    5236:	6008      	str	r0, [r1, #0]
    5238:	8990      	ldrh	r0, [r2, #12]
    523a:	8088      	strh	r0, [r1, #4]
    523c:	2001      	movs	r0, #1
    523e:	4770      	bx	lr
    5240:	2000      	movs	r0, #0
    5242:	4770      	bx	lr
    5244:	2000028d 	.word	0x2000028d

00005248 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5248:	4a08      	ldr	r2, [pc, #32]	; (526c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    524a:	2301      	movs	r3, #1
    524c:	b138      	cbz	r0, 525e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    524e:	2801      	cmp	r0, #1
    5250:	d104      	bne.n	525c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5252:	7013      	strb	r3, [r2, #0]
    5254:	6808      	ldr	r0, [r1, #0]
    5256:	6090      	str	r0, [r2, #8]
    5258:	8888      	ldrh	r0, [r1, #4]
    525a:	8190      	strh	r0, [r2, #12]
    525c:	4770      	bx	lr
    525e:	7053      	strb	r3, [r2, #1]
    5260:	6808      	ldr	r0, [r1, #0]
    5262:	f8c2 0002 	str.w	r0, [r2, #2]
    5266:	8888      	ldrh	r0, [r1, #4]
    5268:	80d0      	strh	r0, [r2, #6]
    526a:	4770      	bx	lr
    526c:	2000028d 	.word	0x2000028d

00005270 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5270:	4906      	ldr	r1, [pc, #24]	; (528c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5272:	b110      	cbz	r0, 527a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5274:	2801      	cmp	r0, #1
    5276:	d002      	beq.n	527e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5278:	e005      	b.n	5286 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    527a:	7848      	ldrb	r0, [r1, #1]
    527c:	e000      	b.n	5280 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    527e:	7808      	ldrb	r0, [r1, #0]
    5280:	b108      	cbz	r0, 5286 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5282:	2001      	movs	r0, #1
    5284:	4770      	bx	lr
    5286:	2000      	movs	r0, #0
    5288:	4770      	bx	lr
    528a:	0000      	.short	0x0000
    528c:	2000028d 	.word	0x2000028d

00005290 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5290:	4901      	ldr	r1, [pc, #4]	; (5298 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5292:	7448      	strb	r0, [r1, #17]
    5294:	4770      	bx	lr
    5296:	0000      	.short	0x0000
    5298:	20000b2a 	.word	0x20000b2a

0000529c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    529c:	4801      	ldr	r0, [pc, #4]	; (52a4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    529e:	78c0      	ldrb	r0, [r0, #3]
    52a0:	4770      	bx	lr
    52a2:	0000      	.short	0x0000
    52a4:	200000b0 	.word	0x200000b0

000052a8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    52a8:	4801      	ldr	r0, [pc, #4]	; (52b0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    52aa:	7900      	ldrb	r0, [r0, #4]
    52ac:	4770      	bx	lr
    52ae:	0000      	.short	0x0000
    52b0:	200000b0 	.word	0x200000b0

000052b4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    52b4:	b578      	push	{r3, r4, r5, r6, lr}
    52b6:	4913      	ldr	r1, [pc, #76]	; (5304 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    52b8:	7c4a      	ldrb	r2, [r1, #17]
    52ba:	b30a      	cbz	r2, 5300 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    52bc:	7c0a      	ldrb	r2, [r1, #16]
    52be:	f88d 2000 	strb.w	r2, [sp]
    52c2:	9a00      	ldr	r2, [sp, #0]
    52c4:	9200      	str	r2, [sp, #0]
    52c6:	f89d 2000 	ldrb.w	r2, [sp]
    52ca:	b1ca      	cbz	r2, 5300 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    52cc:	2300      	movs	r3, #0
    52ce:	f101 0210 	add.w	r2, r1, #16
    52d2:	241a      	movs	r4, #26
    52d4:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    52d8:	7c0e      	ldrb	r6, [r1, #16]
    52da:	f88d 6000 	strb.w	r6, [sp]
    52de:	9e00      	ldr	r6, [sp, #0]
    52e0:	9600      	str	r6, [sp, #0]
    52e2:	f89d 6000 	ldrb.w	r6, [sp]
    52e6:	b14e      	cbz	r6, 52fc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    52e8:	7013      	strb	r3, [r2, #0]
    52ea:	7043      	strb	r3, [r0, #1]
    52ec:	7004      	strb	r4, [r0, #0]
    52ee:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    52f2:	6046      	str	r6, [r0, #4]
    52f4:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    52f8:	6086      	str	r6, [r0, #8]
    52fa:	e7ed      	b.n	52d8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    52fc:	2001      	movs	r0, #1
    52fe:	bd78      	pop	{r3, r4, r5, r6, pc}
    5300:	2000      	movs	r0, #0
    5302:	bd78      	pop	{r3, r4, r5, r6, pc}
    5304:	20000b2a 	.word	0x20000b2a

00005308 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5308:	b570      	push	{r4, r5, r6, lr}
    530a:	460c      	mov	r4, r1
    530c:	4605      	mov	r5, r0
    530e:	f000 f931 	bl	5574 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5312:	b118      	cbz	r0, 531c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    5314:	21ab      	movs	r1, #171	; 0xab
    5316:	2027      	movs	r0, #39	; 0x27
    5318:	f7ff f910 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    531c:	4803      	ldr	r0, [pc, #12]	; (532c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    531e:	2101      	movs	r1, #1
    5320:	f008 ff5e 	bl	e1e0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5324:	4802      	ldr	r0, [pc, #8]	; (5330 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    5326:	71c5      	strb	r5, [r0, #7]
    5328:	62c4      	str	r4, [r0, #44]	; 0x2c
    532a:	bd70      	pop	{r4, r5, r6, pc}
    532c:	20000b08 	.word	0x20000b08
    5330:	200000b0 	.word	0x200000b0

00005334 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5334:	4901      	ldr	r1, [pc, #4]	; (533c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5336:	2001      	movs	r0, #1
    5338:	7188      	strb	r0, [r1, #6]
    533a:	4770      	bx	lr
    533c:	200000b0 	.word	0x200000b0

00005340 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5344:	4d4c      	ldr	r5, [pc, #304]	; (5478 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x138>)
    5346:	b086      	sub	sp, #24
    5348:	782e      	ldrb	r6, [r5, #0]
    534a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    534c:	2e00      	cmp	r6, #0
    534e:	d174      	bne.n	543a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    5350:	2a00      	cmp	r2, #0
    5352:	d072      	beq.n	543a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    5354:	2b00      	cmp	r3, #0
    5356:	d070      	beq.n	543a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    5358:	2c00      	cmp	r4, #0
    535a:	d06e      	beq.n	543a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    535c:	f105 0714 	add.w	r7, r5, #20
    5360:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5364:	e887 001c 	stmia.w	r7, {r2, r3, r4}
    5368:	71ae      	strb	r6, [r5, #6]
    536a:	716e      	strb	r6, [r5, #5]
    536c:	70ee      	strb	r6, [r5, #3]
    536e:	70ae      	strb	r6, [r5, #2]
    5370:	712e      	strb	r6, [r5, #4]
    5372:	81ae      	strh	r6, [r5, #12]
    5374:	81ee      	strh	r6, [r5, #14]
    5376:	f000 f935 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    537a:	4607      	mov	r7, r0
    537c:	f000 f92c 	bl	55d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5380:	4604      	mov	r4, r0
    5382:	f006 fa1b 	bl	b7bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5386:	f005 fef5 	bl	b174 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    538a:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    538e:	f006 fa9d 	bl	b8cc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5392:	f104 0016 	add.w	r0, r4, #22
    5396:	f006 fb87 	bl	baa8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    539a:	f104 0012 	add.w	r0, r4, #18
    539e:	f006 fb77 	bl	ba90 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    53a2:	7f38      	ldrb	r0, [r7, #28]
    53a4:	f006 fb9a 	bl	badc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    53a8:	f105 0038 	add.w	r0, r5, #56	; 0x38
    53ac:	6840      	ldr	r0, [r0, #4]
    53ae:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    53b2:	b108      	cbz	r0, 53b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    53b4:	f006 f952 	bl	b65c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    53b8:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    53bc:	2001      	movs	r0, #1
    53be:	f006 f87d 	bl	b4bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    53c2:	2800      	cmp	r0, #0
    53c4:	d050      	beq.n	5468 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    53c6:	46b0      	mov	r8, r6
    53c8:	2001      	movs	r0, #1
    53ca:	f006 f987 	bl	b6dc <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    53ce:	2214      	movs	r2, #20
    53d0:	492a      	ldr	r1, [pc, #168]	; (547c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13c>)
    53d2:	4668      	mov	r0, sp
    53d4:	f007 fab5 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    53d8:	4668      	mov	r0, sp
    53da:	f006 f8eb 	bl	b5b4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    53de:	8820      	ldrh	r0, [r4, #0]
    53e0:	f7ff fcd2 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    53e4:	6328      	str	r0, [r5, #48]	; 0x30
    53e6:	8820      	ldrh	r0, [r4, #0]
    53e8:	f7ff fcb8 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    53ec:	6368      	str	r0, [r5, #52]	; 0x34
    53ee:	f107 0058 	add.w	r0, r7, #88	; 0x58
    53f2:	4e23      	ldr	r6, [pc, #140]	; (5480 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    53f4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    53f6:	f106 0c08 	add.w	ip, r6, #8
    53fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    53fe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    5400:	f8c6 0021 	str.w	r0, [r6, #33]	; 0x21
    5404:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    5406:	f8c6 0025 	str.w	r0, [r6, #37]	; 0x25
    540a:	20ff      	movs	r0, #255	; 0xff
    540c:	7268      	strb	r0, [r5, #9]
    540e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    5410:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    5412:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    5416:	7cf8      	ldrb	r0, [r7, #19]
    5418:	f008 fb6e 	bl	daf8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    541c:	7cf9      	ldrb	r1, [r7, #19]
    541e:	b101      	cbz	r1, 5422 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe2>
    5420:	2104      	movs	r1, #4
    5422:	4408      	add	r0, r1
    5424:	b2c0      	uxtb	r0, r0
    5426:	7228      	strb	r0, [r5, #8]
    5428:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    542c:	1d09      	adds	r1, r1, #4
    542e:	4281      	cmp	r1, r0
    5430:	d205      	bcs.n	543e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5432:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    5436:	e01c      	b.n	5472 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    5438:	e7ff      	b.n	543a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    543a:	21d4      	movs	r1, #212	; 0xd4
    543c:	e019      	b.n	5472 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    543e:	4645      	mov	r5, r8
    5440:	2001      	movs	r0, #1
    5442:	f000 fb49 	bl	5ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    5446:	480f      	ldr	r0, [pc, #60]	; (5484 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>)
    5448:	6800      	ldr	r0, [r0, #0]
    544a:	2803      	cmp	r0, #3
    544c:	d00f      	beq.n	546e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    544e:	280b      	cmp	r0, #11
    5450:	d00d      	beq.n	546e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    5452:	f846 5f52 	str.w	r5, [r6, #82]!
    5456:	6075      	str	r5, [r6, #4]
    5458:	4809      	ldr	r0, [pc, #36]	; (5480 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    545a:	88b9      	ldrh	r1, [r7, #4]
    545c:	3052      	adds	r0, #82	; 0x52
    545e:	8041      	strh	r1, [r0, #2]
    5460:	8821      	ldrh	r1, [r4, #0]
    5462:	8001      	strh	r1, [r0, #0]
    5464:	7f39      	ldrb	r1, [r7, #28]
    5466:	7101      	strb	r1, [r0, #4]
    5468:	b006      	add	sp, #24
    546a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    546e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    5472:	2027      	movs	r0, #39	; 0x27
    5474:	f7ff f862 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5478:	200000b0 	.word	0x200000b0
    547c:	00005d24 	.word	0x00005d24
    5480:	20000ad8 	.word	0x20000ad8
    5484:	40001550 	.word	0x40001550

00005488 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    548c:	4606      	mov	r6, r0
    548e:	f000 f8a9 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5492:	4d33      	ldr	r5, [pc, #204]	; (5560 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5494:	4604      	mov	r4, r0
    5496:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5498:	7847      	ldrb	r7, [r0, #1]
    549a:	b10e      	cbz	r6, 54a0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    549c:	2e01      	cmp	r6, #1
    549e:	d103      	bne.n	54a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    54a0:	6b69      	ldr	r1, [r5, #52]	; 0x34
    54a2:	f007 fbb9 	bl	cc18 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    54a6:	7068      	strb	r0, [r5, #1]
    54a8:	7868      	ldrb	r0, [r5, #1]
    54aa:	f04f 0800 	mov.w	r8, #0
    54ae:	f04f 0901 	mov.w	r9, #1
    54b2:	b150      	cbz	r0, 54ca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    54b4:	2801      	cmp	r0, #1
    54b6:	d01a      	beq.n	54ee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    54b8:	2802      	cmp	r0, #2
    54ba:	d034      	beq.n	5526 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    54bc:	2803      	cmp	r0, #3
    54be:	d049      	beq.n	5554 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xcc>
    54c0:	f240 31cd 	movw	r1, #973	; 0x3cd
    54c4:	2027      	movs	r0, #39	; 0x27
    54c6:	f7ff f839 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54ca:	2e01      	cmp	r6, #1
    54cc:	d032      	beq.n	5534 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    54ce:	f000 f8f3 	bl	56b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    54d2:	4639      	mov	r1, r7
    54d4:	2201      	movs	r2, #1
    54d6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    54d8:	f007 ffc2 	bl	d460 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    54dc:	e028      	b.n	5530 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    54de:	bf00      	nop
    54e0:	f884 8008 	strb.w	r8, [r4, #8]
    54e4:	e031      	b.n	554a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    54e6:	bf00      	nop
    54e8:	f884 9008 	strb.w	r9, [r4, #8]
    54ec:	e02d      	b.n	554a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    54ee:	2e01      	cmp	r6, #1
    54f0:	d008      	beq.n	5504 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    54f2:	f000 f8e1 	bl	56b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    54f6:	4639      	mov	r1, r7
    54f8:	2200      	movs	r2, #0
    54fa:	6b68      	ldr	r0, [r5, #52]	; 0x34
    54fc:	f007 ffb0 	bl	d460 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5500:	2e02      	cmp	r6, #2
    5502:	d00b      	beq.n	551c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5504:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5508:	1c40      	adds	r0, r0, #1
    550a:	f141 0100 	adc.w	r1, r1, #0
    550e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5512:	7a20      	ldrb	r0, [r4, #8]
    5514:	2801      	cmp	r0, #1
    5516:	d003      	beq.n	5520 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5518:	f884 9008 	strb.w	r9, [r4, #8]
    551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5520:	f884 8008 	strb.w	r8, [r4, #8]
    5524:	e7fa      	b.n	551c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5526:	2e01      	cmp	r6, #1
    5528:	d004      	beq.n	5534 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    552a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    552c:	f008 f99e 	bl	d86c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5530:	2e02      	cmp	r6, #2
    5532:	d0f3      	beq.n	551c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5534:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5538:	1c40      	adds	r0, r0, #1
    553a:	f141 0100 	adc.w	r1, r1, #0
    553e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5542:	7a20      	ldrb	r0, [r4, #8]
    5544:	2801      	cmp	r0, #1
    5546:	d1cf      	bne.n	54e8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5548:	e7ca      	b.n	54e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    554a:	79e8      	ldrb	r0, [r5, #7]
    554c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5550:	f7fe be44 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5554:	2e01      	cmp	r6, #1
    5556:	d0e1      	beq.n	551c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5558:	6b68      	ldr	r0, [r5, #52]	; 0x34
    555a:	f008 f987 	bl	d86c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    555e:	e7f4      	b.n	554a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5560:	200000b0 	.word	0x200000b0

00005564 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5564:	4802      	ldr	r0, [pc, #8]	; (5570 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5566:	89c0      	ldrh	r0, [r0, #14]
    5568:	f3c0 2080 	ubfx	r0, r0, #10, #1
    556c:	4770      	bx	lr
    556e:	0000      	.short	0x0000
    5570:	200000b0 	.word	0x200000b0

00005574 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5574:	4804      	ldr	r0, [pc, #16]	; (5588 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5576:	7800      	ldrb	r0, [r0, #0]
    5578:	b108      	cbz	r0, 557e <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    557a:	200c      	movs	r0, #12
    557c:	4770      	bx	lr
    557e:	4903      	ldr	r1, [pc, #12]	; (558c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5580:	2000      	movs	r0, #0
    5582:	7448      	strb	r0, [r1, #17]
    5584:	4770      	bx	lr
    5586:	0000      	.short	0x0000
    5588:	200000b0 	.word	0x200000b0
    558c:	20000b2a 	.word	0x20000b2a

00005590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5590:	480c      	ldr	r0, [pc, #48]	; (55c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5592:	b510      	push	{r4, lr}
    5594:	7801      	ldrb	r1, [r0, #0]
    5596:	b149      	cbz	r1, 55ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5598:	f100 0138 	add.w	r1, r0, #56	; 0x38
    559c:	7800      	ldrb	r0, [r0, #0]
    559e:	2802      	cmp	r0, #2
    55a0:	d008      	beq.n	55b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    55a2:	f44f 71cb 	mov.w	r1, #406	; 0x196
    55a6:	2027      	movs	r0, #39	; 0x27
    55a8:	f7fe ffc8 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55b0:	f000 b9a8 	b.w	5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    55b4:	6848      	ldr	r0, [r1, #4]
    55b6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    55ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55be:	f006 b801 	b.w	b5c4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    55c2:	0000      	.short	0x0000
    55c4:	200000b0 	.word	0x200000b0
    55c8:	4a02      	ldr	r2, [pc, #8]	; (55d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    55ca:	8993      	ldrh	r3, [r2, #12]
    55cc:	4303      	orrs	r3, r0
    55ce:	8193      	strh	r3, [r2, #12]
    55d0:	6952      	ldr	r2, [r2, #20]
    55d2:	4710      	bx	r2
    55d4:	200000b0 	.word	0x200000b0
    55d8:	4801      	ldr	r0, [pc, #4]	; (55e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    55da:	6840      	ldr	r0, [r0, #4]
    55dc:	4770      	bx	lr
    55de:	0000      	.short	0x0000
    55e0:	200000e8 	.word	0x200000e8
    55e4:	4801      	ldr	r0, [pc, #4]	; (55ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    55e6:	6840      	ldr	r0, [r0, #4]
    55e8:	3070      	adds	r0, #112	; 0x70
    55ea:	4770      	bx	lr
    55ec:	200000e8 	.word	0x200000e8
    55f0:	4a01      	ldr	r2, [pc, #4]	; (55f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    55f2:	2100      	movs	r1, #0
    55f4:	6952      	ldr	r2, [r2, #20]
    55f6:	4710      	bx	r2
    55f8:	200000b0 	.word	0x200000b0
    55fc:	b570      	push	{r4, r5, r6, lr}
    55fe:	f7ff fff1 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5602:	4604      	mov	r4, r0
    5604:	f7ff ffe8 	bl	55d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5608:	4605      	mov	r5, r0
    560a:	4621      	mov	r1, r4
    560c:	f008 fc09 	bl	de22 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5610:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    5614:	2901      	cmp	r1, #1
    5616:	d117      	bne.n	5648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5618:	2800      	cmp	r0, #0
    561a:	d015      	beq.n	5648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    561c:	480b      	ldr	r0, [pc, #44]	; (564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    561e:	6842      	ldr	r2, [r0, #4]
    5620:	8828      	ldrh	r0, [r5, #0]
    5622:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    5626:	7a60      	ldrb	r0, [r4, #9]
    5628:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    562c:	7aa0      	ldrb	r0, [r4, #10]
    562e:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    5632:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    5636:	2001      	movs	r0, #1
    5638:	7010      	strb	r0, [r2, #0]
    563a:	4804      	ldr	r0, [pc, #16]	; (564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    563c:	3838      	subs	r0, #56	; 0x38
    563e:	79c0      	ldrb	r0, [r0, #7]
    5640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5644:	f7fe bdca 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5648:	bd70      	pop	{r4, r5, r6, pc}
    564a:	0000      	.short	0x0000
    564c:	200000e8 	.word	0x200000e8
    5650:	b570      	push	{r4, r5, r6, lr}
    5652:	4c18      	ldr	r4, [pc, #96]	; (56b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    5654:	4605      	mov	r5, r0
    5656:	b939      	cbnz	r1, 5668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    5658:	2d01      	cmp	r5, #1
    565a:	d105      	bne.n	5668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    565c:	78e0      	ldrb	r0, [r4, #3]
    565e:	1c40      	adds	r0, r0, #1
    5660:	b2c0      	uxtb	r0, r0
    5662:	70e0      	strb	r0, [r4, #3]
    5664:	2801      	cmp	r0, #1
    5666:	d818      	bhi.n	569a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    5668:	69a1      	ldr	r1, [r4, #24]
    566a:	4628      	mov	r0, r5
    566c:	4788      	blx	r1
    566e:	b1a0      	cbz	r0, 569a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    5670:	7960      	ldrb	r0, [r4, #5]
    5672:	b990      	cbnz	r0, 569a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    5674:	b9e5      	cbnz	r5, 56b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5676:	480f      	ldr	r0, [pc, #60]	; (56b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    5678:	3010      	adds	r0, #16
    567a:	7801      	ldrb	r1, [r0, #0]
    567c:	06c8      	lsls	r0, r1, #27
    567e:	d405      	bmi.n	568c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    5680:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5682:	7800      	ldrb	r0, [r0, #0]
    5684:	06c0      	lsls	r0, r0, #27
    5686:	d401      	bmi.n	568c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    5688:	2001      	movs	r0, #1
    568a:	e000      	b.n	568e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    568c:	2000      	movs	r0, #0
    568e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5690:	b92a      	cbnz	r2, 569e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    5692:	8962      	ldrh	r2, [r4, #10]
    5694:	b11a      	cbz	r2, 569e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    5696:	06c9      	lsls	r1, r1, #27
    5698:	d401      	bmi.n	569e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    569a:	2001      	movs	r0, #1
    569c:	bd70      	pop	{r4, r5, r6, pc}
    569e:	89a1      	ldrh	r1, [r4, #12]
    56a0:	078a      	lsls	r2, r1, #30
    56a2:	d503      	bpl.n	56ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    56a4:	6a22      	ldr	r2, [r4, #32]
    56a6:	78d2      	ldrb	r2, [r2, #3]
    56a8:	2a02      	cmp	r2, #2
    56aa:	d001      	beq.n	56b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    56ac:	4308      	orrs	r0, r1
    56ae:	d1f4      	bne.n	569a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    56b0:	2000      	movs	r0, #0
    56b2:	bd70      	pop	{r4, r5, r6, pc}
    56b4:	200000b0 	.word	0x200000b0
    56b8:	b510      	push	{r4, lr}
    56ba:	4c08      	ldr	r4, [pc, #32]	; (56dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>)
    56bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    56be:	b138      	cbz	r0, 56d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x140>
    56c0:	8962      	ldrh	r2, [r4, #10]
    56c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    56c4:	1cd2      	adds	r2, r2, #3
    56c6:	f007 f93c 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    56ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    56cc:	6260      	str	r0, [r4, #36]	; 0x24
    56ce:	bd10      	pop	{r4, pc}
    56d0:	f240 4114 	movw	r1, #1044	; 0x414
    56d4:	2027      	movs	r0, #39	; 0x27
    56d6:	f7fe ff31 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56da:	0000      	.short	0x0000
    56dc:	200000b0 	.word	0x200000b0
    56e0:	b510      	push	{r4, lr}
    56e2:	f7ff ff79 	bl	55d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    56e6:	4604      	mov	r4, r0
    56e8:	f7ff ff7c 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    56ec:	4601      	mov	r1, r0
    56ee:	7b42      	ldrb	r2, [r0, #13]
    56f0:	4815      	ldr	r0, [pc, #84]	; (5748 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b8>)
    56f2:	2a24      	cmp	r2, #36	; 0x24
    56f4:	d00e      	beq.n	5714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    56f6:	7b89      	ldrb	r1, [r1, #14]
    56f8:	2924      	cmp	r1, #36	; 0x24
    56fa:	d00b      	beq.n	5714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    56fc:	2a1f      	cmp	r2, #31
    56fe:	d00d      	beq.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5700:	2a20      	cmp	r2, #32
    5702:	d00b      	beq.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5704:	2922      	cmp	r1, #34	; 0x22
    5706:	d00f      	beq.n	5728 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5708:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    570c:	2804      	cmp	r0, #4
    570e:	d100      	bne.n	5712 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x182>
    5710:	2008      	movs	r0, #8
    5712:	bd10      	pop	{r4, pc}
    5714:	6840      	ldr	r0, [r0, #4]
    5716:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    571a:	e00e      	b.n	573a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    571c:	2922      	cmp	r1, #34	; 0x22
    571e:	d003      	beq.n	5728 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5720:	6840      	ldr	r0, [r0, #4]
    5722:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    5726:	e005      	b.n	5734 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    5728:	6841      	ldr	r1, [r0, #4]
    572a:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    572e:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    5732:	4008      	ands	r0, r1
    5734:	f008 f9c8 	bl	dac8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5738:	4601      	mov	r1, r0
    573a:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    573e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5742:	f008 b9ec 	b.w	db1e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x5a>
    5746:	0000      	.short	0x0000
    5748:	200000e8 	.word	0x200000e8
    574c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5750:	4688      	mov	r8, r1
    5752:	4606      	mov	r6, r0
    5754:	f7ff ff46 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5758:	4c45      	ldr	r4, [pc, #276]	; (5870 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    575a:	2700      	movs	r7, #0
    575c:	4605      	mov	r5, r0
    575e:	f88d 7000 	strb.w	r7, [sp]
    5762:	7820      	ldrb	r0, [r4, #0]
    5764:	2802      	cmp	r0, #2
    5766:	d004      	beq.n	5772 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    5768:	f240 4166 	movw	r1, #1126	; 0x466
    576c:	2027      	movs	r0, #39	; 0x27
    576e:	f7fe fee5 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5772:	7ba0      	ldrb	r0, [r4, #14]
    5774:	0640      	lsls	r0, r0, #25
    5776:	d406      	bmi.n	5786 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    5778:	2040      	movs	r0, #64	; 0x40
    577a:	f7ff ff39 	bl	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    577e:	89e0      	ldrh	r0, [r4, #14]
    5780:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5784:	81e0      	strh	r0, [r4, #14]
    5786:	483b      	ldr	r0, [pc, #236]	; (5874 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>)
    5788:	b3ee      	cbz	r6, 5806 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x276>
    578a:	7941      	ldrb	r1, [r0, #5]
    578c:	1c49      	adds	r1, r1, #1
    578e:	7141      	strb	r1, [r0, #5]
    5790:	7ce8      	ldrb	r0, [r5, #19]
    5792:	f005 fd67 	bl	b264 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5796:	f005 fd4b 	bl	b230 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    579a:	b968      	cbnz	r0, 57b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    579c:	7ce8      	ldrb	r0, [r5, #19]
    579e:	b158      	cbz	r0, 57b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    57a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57a2:	7841      	ldrb	r1, [r0, #1]
    57a4:	b141      	cbz	r1, 57b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    57a6:	7800      	ldrb	r0, [r0, #0]
    57a8:	7a29      	ldrb	r1, [r5, #8]
    57aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    57ae:	4288      	cmp	r0, r1
    57b0:	d102      	bne.n	57b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    57b2:	2001      	movs	r0, #1
    57b4:	70a0      	strb	r0, [r4, #2]
    57b6:	e043      	b.n	5840 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    57b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57ba:	7841      	ldrb	r1, [r0, #1]
    57bc:	8161      	strh	r1, [r4, #10]
    57be:	b121      	cbz	r1, 57ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    57c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    57c2:	f008 f820 	bl	d806 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    57c6:	62a0      	str	r0, [r4, #40]	; 0x28
    57c8:	e000      	b.n	57cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    57ca:	62a7      	str	r7, [r4, #40]	; 0x28
    57cc:	89e0      	ldrh	r0, [r4, #14]
    57ce:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    57d2:	81e0      	strh	r0, [r4, #14]
    57d4:	70e7      	strb	r7, [r4, #3]
    57d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57d8:	79e9      	ldrb	r1, [r5, #7]
    57da:	7800      	ldrb	r0, [r0, #0]
    57dc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    57e0:	4288      	cmp	r0, r1
    57e2:	d005      	beq.n	57f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    57e4:	f000 f92a 	bl	5a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ac>
    57e8:	89e0      	ldrh	r0, [r4, #14]
    57ea:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    57ee:	81e0      	strh	r0, [r4, #14]
    57f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57f2:	7a29      	ldrb	r1, [r5, #8]
    57f4:	7800      	ldrb	r0, [r0, #0]
    57f6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    57fa:	4288      	cmp	r0, r1
    57fc:	d10f      	bne.n	581e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    57fe:	4668      	mov	r0, sp
    5800:	f000 f8d8 	bl	59b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    5804:	e00b      	b.n	581e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5806:	e7ff      	b.n	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    5808:	7981      	ldrb	r1, [r0, #6]
    580a:	1c49      	adds	r1, r1, #1
    580c:	7181      	strb	r1, [r0, #6]
    580e:	7ce8      	ldrb	r0, [r5, #19]
    5810:	b108      	cbz	r0, 5816 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    5812:	f005 fd21 	bl	b258 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5816:	89e0      	ldrh	r0, [r4, #14]
    5818:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    581c:	81e0      	strh	r0, [r4, #14]
    581e:	f1b8 0f00 	cmp.w	r8, #0
    5822:	d104      	bne.n	582e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5824:	4631      	mov	r1, r6
    5826:	2001      	movs	r0, #1
    5828:	f7ff ff12 	bl	5650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    582c:	b160      	cbz	r0, 5848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    582e:	f89d 0000 	ldrb.w	r0, [sp]
    5832:	b110      	cbz	r0, 583a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    5834:	2000      	movs	r0, #0
    5836:	f7ff fe27 	bl	5488 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    583a:	b10e      	cbz	r6, 5840 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    583c:	f7ff fede 	bl	55fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5840:	f000 f860 	bl	5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5848:	f89d 0000 	ldrb.w	r0, [sp]
    584c:	b110      	cbz	r0, 5854 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    584e:	2001      	movs	r0, #1
    5850:	f7ff fe1a 	bl	5488 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5854:	2000      	movs	r0, #0
    5856:	f000 f991 	bl	5b7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    585a:	f89d 0000 	ldrb.w	r0, [sp]
    585e:	b110      	cbz	r0, 5866 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d6>
    5860:	2002      	movs	r0, #2
    5862:	f7ff fe11 	bl	5488 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5866:	2e00      	cmp	r6, #0
    5868:	d0ec      	beq.n	5844 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    586a:	f7ff fec7 	bl	55fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    586e:	e7e9      	b.n	5844 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    5870:	200000b0 	.word	0x200000b0
    5874:	20000b2a 	.word	0x20000b2a
    5878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    587c:	460e      	mov	r6, r1
    587e:	4680      	mov	r8, r0
    5880:	f7ff feb0 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5884:	4d1e      	ldr	r5, [pc, #120]	; (5900 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>)
    5886:	4604      	mov	r4, r0
    5888:	7828      	ldrb	r0, [r5, #0]
    588a:	2801      	cmp	r0, #1
    588c:	d004      	beq.n	5898 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    588e:	f240 4123 	movw	r1, #1059	; 0x423
    5892:	2027      	movs	r0, #39	; 0x27
    5894:	f7fe fe52 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5898:	7860      	ldrb	r0, [r4, #1]
    589a:	2701      	movs	r7, #1
    589c:	b130      	cbz	r0, 58ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    589e:	2000      	movs	r0, #0
    58a0:	7060      	strb	r0, [r4, #1]
    58a2:	4601      	mov	r1, r0
    58a4:	2004      	movs	r0, #4
    58a6:	f7ff fe8f 	bl	55c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    58aa:	70e7      	strb	r7, [r4, #3]
    58ac:	6a29      	ldr	r1, [r5, #32]
    58ae:	7808      	ldrb	r0, [r1, #0]
    58b0:	43c0      	mvns	r0, r0
    58b2:	0780      	lsls	r0, r0, #30
    58b4:	d109      	bne.n	58ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33a>
    58b6:	79a0      	ldrb	r0, [r4, #6]
    58b8:	b9d0      	cbnz	r0, 58f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    58ba:	2002      	movs	r0, #2
    58bc:	f7ff fe84 	bl	55c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    58c0:	6a28      	ldr	r0, [r5, #32]
    58c2:	7800      	ldrb	r0, [r0, #0]
    58c4:	43c0      	mvns	r0, r0
    58c6:	0780      	lsls	r0, r0, #30
    58c8:	d012      	beq.n	58f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    58ca:	6a28      	ldr	r0, [r5, #32]
    58cc:	7840      	ldrb	r0, [r0, #1]
    58ce:	b110      	cbz	r0, 58d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    58d0:	2002      	movs	r0, #2
    58d2:	71a0      	strb	r0, [r4, #6]
    58d4:	e000      	b.n	58d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x348>
    58d6:	71a7      	strb	r7, [r4, #6]
    58d8:	ea36 0608 	bics.w	r6, r6, r8
    58dc:	d004      	beq.n	58e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    58de:	2101      	movs	r1, #1
    58e0:	2000      	movs	r0, #0
    58e2:	f7ff feb5 	bl	5650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    58e6:	b128      	cbz	r0, 58f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    58e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    58ec:	f000 b80a 	b.w	5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    58f0:	2003      	movs	r0, #3
    58f2:	e7ee      	b.n	58d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    58f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    58f8:	2000      	movs	r0, #0
    58fa:	f000 b8ed 	b.w	5ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    58fe:	0000      	.short	0x0000
    5900:	200000b0 	.word	0x200000b0
    5904:	b510      	push	{r4, lr}
    5906:	f005 fd45 	bl	b394 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    590a:	f005 fc33 	bl	b174 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    590e:	4c0d      	ldr	r4, [pc, #52]	; (5944 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5910:	89e0      	ldrh	r0, [r4, #14]
    5912:	f7ff fe6d 	bl	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5916:	69e2      	ldr	r2, [r4, #28]
    5918:	7961      	ldrb	r1, [r4, #5]
    591a:	78a0      	ldrb	r0, [r4, #2]
    591c:	4790      	blx	r2
    591e:	480a      	ldr	r0, [pc, #40]	; (5948 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5920:	7c40      	ldrb	r0, [r0, #17]
    5922:	b160      	cbz	r0, 593e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ae>
    5924:	4808      	ldr	r0, [pc, #32]	; (5948 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5926:	3852      	subs	r0, #82	; 0x52
    5928:	f850 1f52 	ldr.w	r1, [r0, #82]!
    592c:	6081      	str	r1, [r0, #8]
    592e:	6841      	ldr	r1, [r0, #4]
    5930:	60c1      	str	r1, [r0, #12]
    5932:	4805      	ldr	r0, [pc, #20]	; (5948 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5934:	2101      	movs	r1, #1
    5936:	7401      	strb	r1, [r0, #16]
    5938:	79e0      	ldrb	r0, [r4, #7]
    593a:	f7fe fc4f 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    593e:	2000      	movs	r0, #0
    5940:	7020      	strb	r0, [r4, #0]
    5942:	bd10      	pop	{r4, pc}
    5944:	200000b0 	.word	0x200000b0
    5948:	20000b2a 	.word	0x20000b2a
    594c:	4808      	ldr	r0, [pc, #32]	; (5970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    594e:	b510      	push	{r4, lr}
    5950:	7800      	ldrb	r0, [r0, #0]
    5952:	2802      	cmp	r0, #2
    5954:	d004      	beq.n	5960 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>
    5956:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    595a:	2027      	movs	r0, #39	; 0x27
    595c:	f7fe fdee 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5960:	4904      	ldr	r1, [pc, #16]	; (5974 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>)
    5962:	2001      	movs	r0, #1
    5964:	71c8      	strb	r0, [r1, #7]
    5966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    596a:	f7ff bfcb 	b.w	5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    596e:	0000      	.short	0x0000
    5970:	200000b0 	.word	0x200000b0
    5974:	20000b2a 	.word	0x20000b2a
    5978:	b430      	push	{r4, r5}
    597a:	4b0d      	ldr	r3, [pc, #52]	; (59b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    597c:	b94a      	cbnz	r2, 5992 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    597e:	7a1a      	ldrb	r2, [r3, #8]
    5980:	7a5c      	ldrb	r4, [r3, #9]
    5982:	42a2      	cmp	r2, r4
    5984:	d105      	bne.n	5992 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    5986:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    598a:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
    598e:	42a2      	cmp	r2, r4
    5990:	d00b      	beq.n	59aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41a>
    5992:	b131      	cbz	r1, 59a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x412>
    5994:	7a1a      	ldrb	r2, [r3, #8]
    5996:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    599a:	bc30      	pop	{r4, r5}
    599c:	4610      	mov	r0, r2
    599e:	f006 b88b 	b.w	bab8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    59a2:	7a5a      	ldrb	r2, [r3, #9]
    59a4:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    59a8:	e7f7      	b.n	599a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    59aa:	bc30      	pop	{r4, r5}
    59ac:	4770      	bx	lr
    59ae:	0000      	.short	0x0000
    59b0:	200000b0 	.word	0x200000b0
    59b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59b8:	4607      	mov	r7, r0
    59ba:	f7ff fe13 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    59be:	4604      	mov	r4, r0
    59c0:	481d      	ldr	r0, [pc, #116]	; (5a38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a8>)
    59c2:	2600      	movs	r6, #0
    59c4:	2501      	movs	r5, #1
    59c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    59c8:	780a      	ldrb	r2, [r1, #0]
    59ca:	f002 0203 	and.w	r2, r2, #3
    59ce:	2a01      	cmp	r2, #1
    59d0:	d015      	beq.n	59fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    59d2:	2a02      	cmp	r2, #2
    59d4:	d013      	beq.n	59fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    59d6:	2a03      	cmp	r2, #3
    59d8:	d003      	beq.n	59e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x452>
    59da:	7941      	ldrb	r1, [r0, #5]
    59dc:	f041 0104 	orr.w	r1, r1, #4
    59e0:	e024      	b.n	5a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x49c>
    59e2:	7065      	strb	r5, [r4, #1]
    59e4:	89c2      	ldrh	r2, [r0, #14]
    59e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    59ea:	81c2      	strh	r2, [r0, #14]
    59ec:	2001      	movs	r0, #1
    59ee:	f7ff fdeb 	bl	55c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    59f2:	e01d      	b.n	5a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    59f4:	7226      	strb	r6, [r4, #8]
    59f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59fa:	7225      	strb	r5, [r4, #8]
    59fc:	e7fb      	b.n	59f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    59fe:	7849      	ldrb	r1, [r1, #1]
    5a00:	b1b1      	cbz	r1, 5a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    5a02:	89c2      	ldrh	r2, [r0, #14]
    5a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5a08:	81c2      	strh	r2, [r0, #14]
    5a0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    5a0c:	2a00      	cmp	r2, #0
    5a0e:	d0f2      	beq.n	59f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5a10:	29fb      	cmp	r1, #251	; 0xfb
    5a12:	d808      	bhi.n	5a26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x496>
    5a14:	7980      	ldrb	r0, [r0, #6]
    5a16:	b120      	cbz	r0, 5a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x492>
    5a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a1c:	2020      	movs	r0, #32
    5a1e:	f7ff bde7 	b.w	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5a22:	703d      	strb	r5, [r7, #0]
    5a24:	e7e7      	b.n	59f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5a26:	7941      	ldrb	r1, [r0, #5]
    5a28:	f041 0110 	orr.w	r1, r1, #16
    5a2c:	7141      	strb	r1, [r0, #5]
    5a2e:	e7e2      	b.n	59f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5a30:	7a20      	ldrb	r0, [r4, #8]
    5a32:	2801      	cmp	r0, #1
    5a34:	d1e1      	bne.n	59fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46a>
    5a36:	e7dd      	b.n	59f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    5a38:	200000b0 	.word	0x200000b0
    5a3c:	b570      	push	{r4, r5, r6, lr}
    5a3e:	f7ff fdd1 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5a42:	4604      	mov	r4, r0
    5a44:	7980      	ldrb	r0, [r0, #6]
    5a46:	2800      	cmp	r0, #0
    5a48:	d02f      	beq.n	5aaa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51a>
    5a4a:	2802      	cmp	r0, #2
    5a4c:	d10e      	bne.n	5a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    5a4e:	4d1c      	ldr	r5, [pc, #112]	; (5ac0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x530>)
    5a50:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5a52:	f007 fcde 	bl	d412 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5a56:	b348      	cbz	r0, 5aac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    5a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    5a5c:	1c40      	adds	r0, r0, #1
    5a5e:	f141 0100 	adc.w	r1, r1, #0
    5a62:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    5a66:	79e8      	ldrb	r0, [r5, #7]
    5a68:	f7fe fbb8 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5a6c:	2500      	movs	r5, #0
    5a6e:	71a5      	strb	r5, [r4, #6]
    5a70:	78e0      	ldrb	r0, [r4, #3]
    5a72:	b120      	cbz	r0, 5a7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ee>
    5a74:	70e5      	strb	r5, [r4, #3]
    5a76:	2100      	movs	r1, #0
    5a78:	2010      	movs	r0, #16
    5a7a:	f7ff fda5 	bl	55c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5a7e:	78a0      	ldrb	r0, [r4, #2]
    5a80:	b170      	cbz	r0, 5aa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    5a82:	70a5      	strb	r5, [r4, #2]
    5a84:	f7ff fb52 	bl	512c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5a88:	b198      	cbz	r0, 5ab2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    5a8a:	2100      	movs	r1, #0
    5a8c:	2008      	movs	r0, #8
    5a8e:	f7ff fd9b 	bl	55c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    5a96:	1c40      	adds	r0, r0, #1
    5a98:	f141 0100 	adc.w	r1, r1, #0
    5a9c:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    5aa0:	79e0      	ldrb	r0, [r4, #7]
    5aa2:	2801      	cmp	r0, #1
    5aa4:	d00a      	beq.n	5abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    5aa6:	2001      	movs	r0, #1
    5aa8:	71e0      	strb	r0, [r4, #7]
    5aaa:	bd70      	pop	{r4, r5, r6, pc}
    5aac:	f44f 715a 	mov.w	r1, #872	; 0x368
    5ab0:	e001      	b.n	5ab6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x526>
    5ab2:	f44f 7160 	mov.w	r1, #896	; 0x380
    5ab6:	2027      	movs	r0, #39	; 0x27
    5ab8:	f7fe fd40 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5abc:	71e5      	strb	r5, [r4, #7]
    5abe:	bd70      	pop	{r4, r5, r6, pc}
    5ac0:	200000b0 	.word	0x200000b0
    5ac4:	4803      	ldr	r0, [pc, #12]	; (5ad4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>)
    5ac6:	7800      	ldrb	r0, [r0, #0]
    5ac8:	2800      	cmp	r0, #0
    5aca:	d001      	beq.n	5ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5acc:	f7ff bf1a 	b.w	5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5ad0:	4770      	bx	lr
    5ad2:	0000      	.short	0x0000
    5ad4:	200000b0 	.word	0x200000b0
    5ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5adc:	4681      	mov	r9, r0
    5ade:	f7ff fd7b 	bl	55d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5ae2:	4604      	mov	r4, r0
    5ae4:	f7ff fd7e 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ae8:	4607      	mov	r7, r0
    5aea:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    5aec:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    5aee:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    5af2:	7cc0      	ldrb	r0, [r0, #19]
    5af4:	f008 f800 	bl	daf8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5af8:	4d1d      	ldr	r5, [pc, #116]	; (5b70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5afa:	4606      	mov	r6, r0
    5afc:	464a      	mov	r2, r9
    5afe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5b00:	6268      	str	r0, [r5, #36]	; 0x24
    5b02:	2101      	movs	r1, #1
    5b04:	4620      	mov	r0, r4
    5b06:	f7ff ff37 	bl	5978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    5b0a:	7cf8      	ldrb	r0, [r7, #19]
    5b0c:	f04f 0800 	mov.w	r8, #0
    5b10:	b1b8      	cbz	r0, 5b42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    5b12:	4818      	ldr	r0, [pc, #96]	; (5b74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5b14:	f005 fee0 	bl	b8d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5b18:	4817      	ldr	r0, [pc, #92]	; (5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>)
    5b1a:	2101      	movs	r1, #1
    5b1c:	7601      	strb	r1, [r0, #24]
    5b1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    5b22:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5b26:	4a13      	ldr	r2, [pc, #76]	; (5b74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5b28:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5b2a:	f005 fb13 	bl	b154 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5b2e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5b32:	f007 ffd3 	bl	dadc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5b36:	4602      	mov	r2, r0
    5b38:	4631      	mov	r1, r6
    5b3a:	2001      	movs	r0, #1
    5b3c:	f005 fb38 	bl	b1b0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5b40:	e004      	b.n	5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5bc>
    5b42:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5b44:	f005 fec8 	bl	b8d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5b48:	f005 fb14 	bl	b174 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5b4c:	f1b9 0f00 	cmp.w	r9, #0
    5b50:	d102      	bne.n	5b58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>
    5b52:	4640      	mov	r0, r8
    5b54:	f005 fd5a 	bl	b60c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5b58:	2100      	movs	r1, #0
    5b5a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    5b5e:	2201      	movs	r2, #1
    5b60:	4608      	mov	r0, r1
    5b62:	f005 ff43 	bl	b9ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5b66:	2002      	movs	r0, #2
    5b68:	7028      	strb	r0, [r5, #0]
    5b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b6e:	0000      	.short	0x0000
    5b70:	200000b0 	.word	0x200000b0
    5b74:	200009d8 	.word	0x200009d8
    5b78:	20000ae0 	.word	0x20000ae0
    5b7c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5b80:	4604      	mov	r4, r0
    5b82:	f7ff fd2f 	bl	55e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5b86:	4606      	mov	r6, r0
    5b88:	f7ff fd26 	bl	55d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5b8c:	4605      	mov	r5, r0
    5b8e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 5d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x788>
    5b92:	4622      	mov	r2, r4
    5b94:	2100      	movs	r1, #0
    5b96:	f7ff feef 	bl	5978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    5b9a:	79b0      	ldrb	r0, [r6, #6]
    5b9c:	2701      	movs	r7, #1
    5b9e:	f04f 0800 	mov.w	r8, #0
    5ba2:	f1a9 0420 	sub.w	r4, r9, #32
    5ba6:	b140      	cbz	r0, 5bba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62a>
    5ba8:	2801      	cmp	r0, #1
    5baa:	d028      	beq.n	5bfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
    5bac:	2802      	cmp	r0, #2
    5bae:	d039      	beq.n	5c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x694>
    5bb0:	2803      	cmp	r0, #3
    5bb2:	d045      	beq.n	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b0>
    5bb4:	f44f 711d 	mov.w	r1, #628	; 0x274
    5bb8:	e061      	b.n	5c7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    5bba:	f7ff fd91 	bl	56e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    5bbe:	4601      	mov	r1, r0
    5bc0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    5bc2:	f008 f898 	bl	dcf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5bc6:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    5bc8:	4281      	cmp	r1, r0
    5bca:	d200      	bcs.n	5bce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x63e>
    5bcc:	4608      	mov	r0, r1
    5bce:	214c      	movs	r1, #76	; 0x4c
    5bd0:	f8ad 0004 	strh.w	r0, [sp, #4]
    5bd4:	5348      	strh	r0, [r1, r5]
    5bd6:	4648      	mov	r0, r9
    5bd8:	f7ff fad2 	bl	5180 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5bdc:	b128      	cbz	r0, 5bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65a>
    5bde:	2080      	movs	r0, #128	; 0x80
    5be0:	6a21      	ldr	r1, [r4, #32]
    5be2:	f7ff fcf1 	bl	55c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5be6:	70b7      	strb	r7, [r6, #2]
    5be8:	e02e      	b.n	5c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5bea:	466a      	mov	r2, sp
    5bec:	a901      	add	r1, sp, #4
    5bee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5bf0:	f007 ff9f 	bl	db32 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    5bf4:	6220      	str	r0, [r4, #32]
    5bf6:	b110      	cbz	r0, 5bfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
    5bf8:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
    5bfc:	b111      	cbz	r1, 5c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x674>
    5bfe:	4847      	ldr	r0, [pc, #284]	; (5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78c>)
    5c00:	6220      	str	r0, [r4, #32]
    5c02:	e021      	b.n	5c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5c04:	f89d 1000 	ldrb.w	r1, [sp]
    5c08:	b931      	cbnz	r1, 5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x688>
    5c0a:	f8a0 8000 	strh.w	r8, [r0]
    5c0e:	f880 8002 	strb.w	r8, [r0, #2]
    5c12:	2101      	movs	r1, #1
    5c14:	f008 fae4 	bl	e1e0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5c18:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5c1c:	6a20      	ldr	r0, [r4, #32]
    5c1e:	f008 faa3 	bl	e168 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5c22:	e011      	b.n	5c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5c24:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    5c28:	f8ad 0004 	strh.w	r0, [sp, #4]
    5c2c:	466a      	mov	r2, sp
    5c2e:	a901      	add	r1, sp, #4
    5c30:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5c32:	f007 ff7e 	bl	db32 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    5c36:	6220      	str	r0, [r4, #32]
    5c38:	b930      	cbnz	r0, 5c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5c3a:	f240 2165 	movw	r1, #613	; 0x265
    5c3e:	e01e      	b.n	5c7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    5c40:	4648      	mov	r0, r9
    5c42:	f7ff fa9d 	bl	5180 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5c46:	b1c0      	cbz	r0, 5c7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ea>
    5c48:	6a20      	ldr	r0, [r4, #32]
    5c4a:	2308      	movs	r3, #8
    5c4c:	7801      	ldrb	r1, [r0, #0]
    5c4e:	f021 0108 	bic.w	r1, r1, #8
    5c52:	7001      	strb	r1, [r0, #0]
    5c54:	79f2      	ldrb	r2, [r6, #7]
    5c56:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5c5a:	4311      	orrs	r1, r2
    5c5c:	f021 0104 	bic.w	r1, r1, #4
    5c60:	7001      	strb	r1, [r0, #0]
    5c62:	7a32      	ldrb	r2, [r6, #8]
    5c64:	2304      	movs	r3, #4
    5c66:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5c6a:	4311      	orrs	r1, r2
    5c6c:	f021 0110 	bic.w	r1, r1, #16
    5c70:	7001      	strb	r1, [r0, #0]
    5c72:	43c9      	mvns	r1, r1
    5c74:	0789      	lsls	r1, r1, #30
    5c76:	d005      	beq.n	5c84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    5c78:	e007      	b.n	5c8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    5c7a:	f240 216e 	movw	r1, #622	; 0x26e
    5c7e:	2027      	movs	r0, #39	; 0x27
    5c80:	f7fe fc5c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c84:	78c0      	ldrb	r0, [r0, #3]
    5c86:	2802      	cmp	r0, #2
    5c88:	d00f      	beq.n	5caa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    5c8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5c8c:	f007 fce6 	bl	d65c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5c90:	b108      	cbz	r0, 5c96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5c92:	2101      	movs	r1, #1
    5c94:	e00a      	b.n	5cac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    5c96:	6a20      	ldr	r0, [r4, #32]
    5c98:	7800      	ldrb	r0, [r0, #0]
    5c9a:	43c0      	mvns	r0, r0
    5c9c:	0780      	lsls	r0, r0, #30
    5c9e:	d004      	beq.n	5caa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    5ca0:	f7ff fa2c 	bl	50fc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5ca4:	f080 0101 	eor.w	r1, r0, #1
    5ca8:	e000      	b.n	5cac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    5caa:	2100      	movs	r1, #0
    5cac:	6a20      	ldr	r0, [r4, #32]
    5cae:	7802      	ldrb	r2, [r0, #0]
    5cb0:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5cb4:	7001      	strb	r1, [r0, #0]
    5cb6:	7cb1      	ldrb	r1, [r6, #18]
    5cb8:	b1d1      	cbz	r1, 5cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5cba:	7841      	ldrb	r1, [r0, #1]
    5cbc:	b1c1      	cbz	r1, 5cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5cbe:	4818      	ldr	r0, [pc, #96]	; (5d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>)
    5cc0:	f005 fe0a 	bl	b8d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5cc4:	4815      	ldr	r0, [pc, #84]	; (5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78c>)
    5cc6:	3828      	subs	r0, #40	; 0x28
    5cc8:	f880 8018 	strb.w	r8, [r0, #24]
    5ccc:	e9d6 1212 	ldrd	r1, r2, [r6, #72]	; 0x48
    5cd0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5cd4:	4912      	ldr	r1, [pc, #72]	; (5d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>)
    5cd6:	6a22      	ldr	r2, [r4, #32]
    5cd8:	f005 fa3c 	bl	b154 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5cdc:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    5ce0:	f007 fefc 	bl	dadc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5ce4:	4602      	mov	r2, r0
    5ce6:	21fb      	movs	r1, #251	; 0xfb
    5ce8:	2000      	movs	r0, #0
    5cea:	f005 fa61 	bl	b1b0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5cee:	e003      	b.n	5cf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    5cf0:	f005 fdf2 	bl	b8d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5cf4:	f005 fa3e 	bl	b174 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5cf8:	2201      	movs	r2, #1
    5cfa:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    5cfe:	4611      	mov	r1, r2
    5d00:	2000      	movs	r0, #0
    5d02:	f005 fe73 	bl	b9ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5d06:	7127      	strb	r7, [r4, #4]
    5d08:	6a20      	ldr	r0, [r4, #32]
    5d0a:	8801      	ldrh	r1, [r0, #0]
    5d0c:	8221      	strh	r1, [r4, #16]
    5d0e:	7880      	ldrb	r0, [r0, #2]
    5d10:	74a0      	strb	r0, [r4, #18]
    5d12:	7027      	strb	r7, [r4, #0]
    5d14:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5d18:	200000d0 	.word	0x200000d0
    5d1c:	20000b08 	.word	0x20000b08
    5d20:	200009d8 	.word	0x200009d8
    5d24:	0000594d 	.word	0x0000594d
    5d28:	0000574d 	.word	0x0000574d
    5d2c:	00005879 	.word	0x00005879
    5d30:	00005ac5 	.word	0x00005ac5
    5d34:	00007921 	.word	0x00007921

00005d38 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5d38:	4800      	ldr	r0, [pc, #0]	; (5d3c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5d3a:	4770      	bx	lr
    5d3c:	200012e5 	.word	0x200012e5

00005d40 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5d40:	4904      	ldr	r1, [pc, #16]	; (5d54 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5d42:	788a      	ldrb	r2, [r1, #2]
    5d44:	4282      	cmp	r2, r0
    5d46:	d903      	bls.n	5d50 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5d48:	4408      	add	r0, r1
    5d4a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5d4e:	4770      	bx	lr
    5d50:	2000      	movs	r0, #0
    5d52:	4770      	bx	lr
    5d54:	20001112 	.word	0x20001112

00005d58 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5d58:	4904      	ldr	r1, [pc, #16]	; (5d6c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5d5a:	788a      	ldrb	r2, [r1, #2]
    5d5c:	4282      	cmp	r2, r0
    5d5e:	d903      	bls.n	5d68 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5d60:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5d64:	3083      	adds	r0, #131	; 0x83
    5d66:	4770      	bx	lr
    5d68:	2000      	movs	r0, #0
    5d6a:	4770      	bx	lr
    5d6c:	20001112 	.word	0x20001112

00005d70 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5d70:	4a05      	ldr	r2, [pc, #20]	; (5d88 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5d72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5d76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5d7a:	6802      	ldr	r2, [r0, #0]
    5d7c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5d80:	8880      	ldrh	r0, [r0, #4]
    5d82:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5d86:	4770      	bx	lr
    5d88:	20001112 	.word	0x20001112

00005d8c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d90:	460e      	mov	r6, r1
    5d92:	4607      	mov	r7, r0
    5d94:	4615      	mov	r5, r2
    5d96:	2106      	movs	r1, #6
    5d98:	4630      	mov	r0, r6
    5d9a:	f008 f8cb 	bl	df34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5d9e:	4c0d      	ldr	r4, [pc, #52]	; (5dd4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5da0:	b160      	cbz	r0, 5dbc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    5da2:	2000      	movs	r0, #0
    5da4:	e004      	b.n	5db0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5da6:	1821      	adds	r1, r4, r0
    5da8:	1c40      	adds	r0, r0, #1
    5daa:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5dae:	b2c0      	uxtb	r0, r0
    5db0:	78a1      	ldrb	r1, [r4, #2]
    5db2:	4281      	cmp	r1, r0
    5db4:	d8f7      	bhi.n	5da6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5db6:	2001      	movs	r0, #1
    5db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dbc:	4631      	mov	r1, r6
    5dbe:	4638      	mov	r0, r7
    5dc0:	f007 fec6 	bl	db50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5dc4:	2808      	cmp	r0, #8
    5dc6:	d003      	beq.n	5dd0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5dc8:	4420      	add	r0, r4
    5dca:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5dce:	e7f2      	b.n	5db6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5dd0:	2000      	movs	r0, #0
    5dd2:	e7f1      	b.n	5db8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5dd4:	20001112 	.word	0x20001112

00005dd8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5dd8:	4904      	ldr	r1, [pc, #16]	; (5dec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5dda:	788a      	ldrb	r2, [r1, #2]
    5ddc:	4282      	cmp	r2, r0
    5dde:	d903      	bls.n	5de8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5de0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5de4:	1cc0      	adds	r0, r0, #3
    5de6:	4770      	bx	lr
    5de8:	2000      	movs	r0, #0
    5dea:	4770      	bx	lr
    5dec:	20001112 	.word	0x20001112

00005df0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5df0:	b510      	push	{r4, lr}
    5df2:	f240 12d3 	movw	r2, #467	; 0x1d3
    5df6:	2100      	movs	r1, #0
    5df8:	4808      	ldr	r0, [pc, #32]	; (5e1c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5dfa:	f006 fe1c 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5dfe:	2208      	movs	r2, #8
    5e00:	21ff      	movs	r1, #255	; 0xff
    5e02:	4807      	ldr	r0, [pc, #28]	; (5e20 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e04:	f006 fe17 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e08:	4805      	ldr	r0, [pc, #20]	; (5e20 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e0a:	2100      	movs	r1, #0
    5e0c:	1f00      	subs	r0, r0, #4
    5e0e:	7001      	strb	r1, [r0, #0]
    5e10:	7041      	strb	r1, [r0, #1]
    5e12:	f44f 7161 	mov.w	r1, #900	; 0x384
    5e16:	8041      	strh	r1, [r0, #2]
    5e18:	bd10      	pop	{r4, pc}
    5e1a:	0000      	.short	0x0000
    5e1c:	20001112 	.word	0x20001112
    5e20:	20000280 	.word	0x20000280

00005e24 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5e24:	4901      	ldr	r1, [pc, #4]	; (5e2c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5e26:	7008      	strb	r0, [r1, #0]
    5e28:	4770      	bx	lr
    5e2a:	0000      	.short	0x0000
    5e2c:	2000027c 	.word	0x2000027c

00005e30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5e30:	4801      	ldr	r0, [pc, #4]	; (5e38 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5e32:	7800      	ldrb	r0, [r0, #0]
    5e34:	4770      	bx	lr
    5e36:	0000      	.short	0x0000
    5e38:	2000027c 	.word	0x2000027c

00005e3c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5e3c:	4b0b      	ldr	r3, [pc, #44]	; (5e6c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5e3e:	b510      	push	{r4, lr}
    5e40:	789c      	ldrb	r4, [r3, #2]
    5e42:	4284      	cmp	r4, r0
    5e44:	d90f      	bls.n	5e66 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5e46:	4418      	add	r0, r3
    5e48:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e4c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5e50:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5e54:	700b      	strb	r3, [r1, #0]
    5e56:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5e5a:	6011      	str	r1, [r2, #0]
    5e5c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5e60:	8090      	strh	r0, [r2, #4]
    5e62:	2001      	movs	r0, #1
    5e64:	bd10      	pop	{r4, pc}
    5e66:	2000      	movs	r0, #0
    5e68:	bd10      	pop	{r4, pc}
    5e6a:	0000      	.short	0x0000
    5e6c:	20001112 	.word	0x20001112

00005e70 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5e70:	4907      	ldr	r1, [pc, #28]	; (5e90 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5e72:	788a      	ldrb	r2, [r1, #2]
    5e74:	4282      	cmp	r2, r0
    5e76:	d909      	bls.n	5e8c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5e78:	4408      	add	r0, r1
    5e7a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e7e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5e82:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5e86:	f000 0001 	and.w	r0, r0, #1
    5e8a:	4770      	bx	lr
    5e8c:	2000      	movs	r0, #0
    5e8e:	4770      	bx	lr
    5e90:	20001112 	.word	0x20001112

00005e94 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e98:	4698      	mov	r8, r3
    5e9a:	4691      	mov	r9, r2
    5e9c:	460c      	mov	r4, r1
    5e9e:	4605      	mov	r5, r0
    5ea0:	f000 f938 	bl	6114 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    5ea4:	4606      	mov	r6, r0
    5ea6:	2810      	cmp	r0, #16
    5ea8:	d006      	beq.n	5eb8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5eaa:	f000 f903 	bl	60b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5eae:	2810      	cmp	r0, #16
    5eb0:	d002      	beq.n	5eb8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5eb2:	2012      	movs	r0, #18
    5eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5eb8:	4f18      	ldr	r7, [pc, #96]	; (5f1c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5eba:	78b8      	ldrb	r0, [r7, #2]
    5ebc:	2808      	cmp	r0, #8
    5ebe:	d22a      	bcs.n	5f16 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5ec0:	2e10      	cmp	r6, #16
    5ec2:	d105      	bne.n	5ed0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5ec4:	2200      	movs	r2, #0
    5ec6:	4621      	mov	r1, r4
    5ec8:	4628      	mov	r0, r5
    5eca:	f000 f907 	bl	60dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    5ece:	4606      	mov	r6, r0
    5ed0:	78bc      	ldrb	r4, [r7, #2]
    5ed2:	2210      	movs	r2, #16
    5ed4:	1c60      	adds	r0, r4, #1
    5ed6:	70b8      	strb	r0, [r7, #2]
    5ed8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5edc:	1ce8      	adds	r0, r5, #3
    5ede:	4649      	mov	r1, r9
    5ee0:	f007 ff92 	bl	de08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5ee4:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5ee8:	2210      	movs	r2, #16
    5eea:	4641      	mov	r1, r8
    5eec:	f007 ff8c 	bl	de08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5ef0:	2110      	movs	r1, #16
    5ef2:	4640      	mov	r0, r8
    5ef4:	f008 f81e 	bl	df34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5ef8:	443c      	add	r4, r7
    5efa:	2110      	movs	r1, #16
    5efc:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5f00:	4648      	mov	r0, r9
    5f02:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5f06:	f008 f815 	bl	df34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5f0a:	77e0      	strb	r0, [r4, #31]
    5f0c:	f804 6c29 	strb.w	r6, [r4, #-41]
    5f10:	2000      	movs	r0, #0
    5f12:	73e0      	strb	r0, [r4, #15]
    5f14:	e7ce      	b.n	5eb4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5f16:	2007      	movs	r0, #7
    5f18:	e7cc      	b.n	5eb4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5f1a:	0000      	.short	0x0000
    5f1c:	20001112 	.word	0x20001112

00005f20 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5f20:	4806      	ldr	r0, [pc, #24]	; (5f3c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5f22:	b510      	push	{r4, lr}
    5f24:	7880      	ldrb	r0, [r0, #2]
    5f26:	1e40      	subs	r0, r0, #1
    5f28:	b244      	sxtb	r4, r0
    5f2a:	e004      	b.n	5f36 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5f2c:	b2e0      	uxtb	r0, r4
    5f2e:	f000 f939 	bl	61a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    5f32:	1e64      	subs	r4, r4, #1
    5f34:	b264      	sxtb	r4, r4
    5f36:	2c00      	cmp	r4, #0
    5f38:	daf8      	bge.n	5f2c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    5f3a:	bd10      	pop	{r4, pc}
    5f3c:	20001112 	.word	0x20001112

00005f40 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5f40:	4801      	ldr	r0, [pc, #4]	; (5f48 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5f42:	8840      	ldrh	r0, [r0, #2]
    5f44:	4770      	bx	lr
    5f46:	0000      	.short	0x0000
    5f48:	2000027c 	.word	0x2000027c

00005f4c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5f4c:	b138      	cbz	r0, 5f5e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5f4e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5f52:	4288      	cmp	r0, r1
    5f54:	d803      	bhi.n	5f5e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5f56:	4903      	ldr	r1, [pc, #12]	; (5f64 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5f58:	8048      	strh	r0, [r1, #2]
    5f5a:	2001      	movs	r0, #1
    5f5c:	4770      	bx	lr
    5f5e:	2000      	movs	r0, #0
    5f60:	4770      	bx	lr
    5f62:	0000      	.short	0x0000
    5f64:	2000027c 	.word	0x2000027c

00005f68 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5f68:	4905      	ldr	r1, [pc, #20]	; (5f80 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    5f6a:	788a      	ldrb	r2, [r1, #2]
    5f6c:	4282      	cmp	r2, r0
    5f6e:	d903      	bls.n	5f78 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5f70:	4408      	add	r0, r1
    5f72:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5f76:	b108      	cbz	r0, 5f7c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5f78:	2000      	movs	r0, #0
    5f7a:	4770      	bx	lr
    5f7c:	2001      	movs	r0, #1
    5f7e:	4770      	bx	lr
    5f80:	20001112 	.word	0x20001112

00005f84 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5f84:	b570      	push	{r4, r5, r6, lr}
    5f86:	460d      	mov	r5, r1
    5f88:	4606      	mov	r6, r0
    5f8a:	f000 f8c3 	bl	6114 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    5f8e:	4c10      	ldr	r4, [pc, #64]	; (5fd0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5f90:	2810      	cmp	r0, #16
    5f92:	d007      	beq.n	5fa4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5f94:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5f98:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5f9c:	07c9      	lsls	r1, r1, #31
    5f9e:	d001      	beq.n	5fa4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5fa0:	2001      	movs	r0, #1
    5fa2:	bd70      	pop	{r4, r5, r6, pc}
    5fa4:	7861      	ldrb	r1, [r4, #1]
    5fa6:	2908      	cmp	r1, #8
    5fa8:	d210      	bcs.n	5fcc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5faa:	2810      	cmp	r0, #16
    5fac:	d008      	beq.n	5fc0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5fae:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5fb2:	2101      	movs	r1, #1
    5fb4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5fb8:	7860      	ldrb	r0, [r4, #1]
    5fba:	1c40      	adds	r0, r0, #1
    5fbc:	7060      	strb	r0, [r4, #1]
    5fbe:	e7ef      	b.n	5fa0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5fc0:	2201      	movs	r2, #1
    5fc2:	4629      	mov	r1, r5
    5fc4:	4630      	mov	r0, r6
    5fc6:	f000 f889 	bl	60dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    5fca:	e7f5      	b.n	5fb8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5fcc:	2000      	movs	r0, #0
    5fce:	bd70      	pop	{r4, r5, r6, pc}
    5fd0:	20001112 	.word	0x20001112

00005fd4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5fd4:	b570      	push	{r4, r5, r6, lr}
    5fd6:	4d0b      	ldr	r5, [pc, #44]	; (6004 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5fd8:	7828      	ldrb	r0, [r5, #0]
    5fda:	1e40      	subs	r0, r0, #1
    5fdc:	b244      	sxtb	r4, r0
    5fde:	e00a      	b.n	5ff6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5fe0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5fe4:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5fe8:	07c0      	lsls	r0, r0, #31
    5fea:	d002      	beq.n	5ff2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5fec:	b2e0      	uxtb	r0, r4
    5fee:	f000 f921 	bl	6234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    5ff2:	1e64      	subs	r4, r4, #1
    5ff4:	b264      	sxtb	r4, r4
    5ff6:	2c00      	cmp	r4, #0
    5ff8:	daf2      	bge.n	5fe0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5ffa:	4903      	ldr	r1, [pc, #12]	; (6008 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5ffc:	2000      	movs	r0, #0
    5ffe:	7048      	strb	r0, [r1, #1]
    6000:	bd70      	pop	{r4, r5, r6, pc}
    6002:	0000      	.short	0x0000
    6004:	20001112 	.word	0x20001112
    6008:	2000027c 	.word	0x2000027c

0000600c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    600c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6010:	2400      	movs	r4, #0
    6012:	4625      	mov	r5, r4
    6014:	4e18      	ldr	r6, [pc, #96]	; (6078 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    6016:	e029      	b.n	606c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6018:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    601c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6020:	07c0      	lsls	r0, r0, #31
    6022:	d021      	beq.n	6068 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6024:	4628      	mov	r0, r5
    6026:	f000 f845 	bl	60b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    602a:	4603      	mov	r3, r0
    602c:	f7ff fed4 	bl	5dd8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6030:	4601      	mov	r1, r0
    6032:	2000      	movs	r0, #0
    6034:	2b10      	cmp	r3, #16
    6036:	d009      	beq.n	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6038:	18f2      	adds	r2, r6, r3
    603a:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    603e:	f1bc 0f01 	cmp.w	ip, #1
    6042:	d002      	beq.n	604a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6044:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6048:	b102      	cbz	r2, 604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    604a:	2001      	movs	r0, #1
    604c:	1e40      	subs	r0, r0, #1
    604e:	4201      	tst	r1, r0
    6050:	d10a      	bne.n	6068 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6052:	480a      	ldr	r0, [pc, #40]	; (607c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6054:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6058:	5503      	strb	r3, [r0, r4]
    605a:	4620      	mov	r0, r4
    605c:	1c64      	adds	r4, r4, #1
    605e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6062:	b2e4      	uxtb	r4, r4
    6064:	f005 fe38 	bl	bcd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6068:	1c6d      	adds	r5, r5, #1
    606a:	b2ed      	uxtb	r5, r5
    606c:	7830      	ldrb	r0, [r6, #0]
    606e:	42a8      	cmp	r0, r5
    6070:	d8d2      	bhi.n	6018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6076:	0000      	.short	0x0000
    6078:	20001112 	.word	0x20001112
    607c:	20000280 	.word	0x20000280
    6080:	b570      	push	{r4, r5, r6, lr}
    6082:	4b0a      	ldr	r3, [pc, #40]	; (60ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	b173      	cbz	r3, 60a6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    6088:	4b09      	ldr	r3, [pc, #36]	; (60b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    608a:	789c      	ldrb	r4, [r3, #2]
    608c:	b15c      	cbz	r4, 60a6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    608e:	1845      	adds	r5, r0, r1
    6090:	4621      	mov	r1, r4
    6092:	b10a      	cbz	r2, 6098 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6094:	1cd8      	adds	r0, r3, #3
    6096:	e001      	b.n	609c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6098:	4805      	ldr	r0, [pc, #20]	; (60b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    609a:	3083      	adds	r0, #131	; 0x83
    609c:	462a      	mov	r2, r5
    609e:	f004 ff7b 	bl	af98 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    60a2:	2001      	movs	r0, #1
    60a4:	bd70      	pop	{r4, r5, r6, pc}
    60a6:	2000      	movs	r0, #0
    60a8:	bd70      	pop	{r4, r5, r6, pc}
    60aa:	0000      	.short	0x0000
    60ac:	2000027c 	.word	0x2000027c
    60b0:	20001112 	.word	0x20001112
    60b4:	4908      	ldr	r1, [pc, #32]	; (60d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    60b6:	b510      	push	{r4, lr}
    60b8:	4603      	mov	r3, r0
    60ba:	2000      	movs	r0, #0
    60bc:	788a      	ldrb	r2, [r1, #2]
    60be:	e006      	b.n	60ce <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    60c0:	180c      	adds	r4, r1, r0
    60c2:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    60c6:	429c      	cmp	r4, r3
    60c8:	d004      	beq.n	60d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    60ca:	1c40      	adds	r0, r0, #1
    60cc:	b2c0      	uxtb	r0, r0
    60ce:	4282      	cmp	r2, r0
    60d0:	d8f6      	bhi.n	60c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    60d2:	2010      	movs	r0, #16
    60d4:	bd10      	pop	{r4, pc}
    60d6:	0000      	.short	0x0000
    60d8:	20001112 	.word	0x20001112
    60dc:	b570      	push	{r4, r5, r6, lr}
    60de:	4b0c      	ldr	r3, [pc, #48]	; (6110 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    60e0:	4604      	mov	r4, r0
    60e2:	7818      	ldrb	r0, [r3, #0]
    60e4:	1c45      	adds	r5, r0, #1
    60e6:	701d      	strb	r5, [r3, #0]
    60e8:	2810      	cmp	r0, #16
    60ea:	d303      	bcc.n	60f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    60ec:	2146      	movs	r1, #70	; 0x46
    60ee:	2028      	movs	r0, #40	; 0x28
    60f0:	f7fe fa24 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60f4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    60f8:	680d      	ldr	r5, [r1, #0]
    60fa:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    60fe:	8889      	ldrh	r1, [r1, #4]
    6100:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6104:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6108:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    610c:	bd70      	pop	{r4, r5, r6, pc}
    610e:	0000      	.short	0x0000
    6110:	20001112 	.word	0x20001112
    6114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6118:	460f      	mov	r7, r1
    611a:	4606      	mov	r6, r0
    611c:	2400      	movs	r4, #0
    611e:	4d0d      	ldr	r5, [pc, #52]	; (6154 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    6120:	e00f      	b.n	6142 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    6122:	bf00      	nop
    6124:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6128:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    612c:	42b1      	cmp	r1, r6
    612e:	d106      	bne.n	613e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    6130:	2206      	movs	r2, #6
    6132:	4639      	mov	r1, r7
    6134:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6138:	f006 fbf1 	bl	c91e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    613c:	b138      	cbz	r0, 614e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    613e:	1c64      	adds	r4, r4, #1
    6140:	b2e4      	uxtb	r4, r4
    6142:	7828      	ldrb	r0, [r5, #0]
    6144:	42a0      	cmp	r0, r4
    6146:	d8ed      	bhi.n	6124 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    6148:	2010      	movs	r0, #16
    614a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    614e:	4620      	mov	r0, r4
    6150:	e7fb      	b.n	614a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    6152:	0000      	.short	0x0000
    6154:	20001112 	.word	0x20001112
    6158:	b570      	push	{r4, r5, r6, lr}
    615a:	4605      	mov	r5, r0
    615c:	f7ff ffaa 	bl	60b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    6160:	2810      	cmp	r0, #16
    6162:	d11c      	bne.n	619e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    6164:	4c0e      	ldr	r4, [pc, #56]	; (61a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    6166:	7820      	ldrb	r0, [r4, #0]
    6168:	1e40      	subs	r0, r0, #1
    616a:	b2c0      	uxtb	r0, r0
    616c:	7020      	strb	r0, [r4, #0]
    616e:	42a8      	cmp	r0, r5
    6170:	d015      	beq.n	619e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    6172:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6176:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    617a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    617e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6182:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6186:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    618a:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    618e:	7820      	ldrb	r0, [r4, #0]
    6190:	f7ff ff90 	bl	60b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    6194:	2810      	cmp	r0, #16
    6196:	d002      	beq.n	619e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    6198:	4420      	add	r0, r4
    619a:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    619e:	bd70      	pop	{r4, r5, r6, pc}
    61a0:	20001112 	.word	0x20001112
    61a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    61a8:	4c21      	ldr	r4, [pc, #132]	; (6230 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    61aa:	4606      	mov	r6, r0
    61ac:	19a7      	adds	r7, r4, r6
    61ae:	78a0      	ldrb	r0, [r4, #2]
    61b0:	1e40      	subs	r0, r0, #1
    61b2:	b2c5      	uxtb	r5, r0
    61b4:	70a5      	strb	r5, [r4, #2]
    61b6:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    61ba:	42ae      	cmp	r6, r5
    61bc:	d02a      	beq.n	6214 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    61be:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    61c2:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    61c6:	f10a 0103 	add.w	r1, sl, #3
    61ca:	f109 0003 	add.w	r0, r9, #3
    61ce:	2210      	movs	r2, #16
    61d0:	f006 fbb7 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    61d4:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    61d8:	f109 0083 	add.w	r0, r9, #131	; 0x83
    61dc:	2210      	movs	r2, #16
    61de:	f006 fbb0 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    61e2:	1960      	adds	r0, r4, r5
    61e4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    61e8:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    61ec:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    61f0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    61f4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    61f8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    61fc:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6200:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6204:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6208:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    620c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6210:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6214:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6218:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    621c:	07c0      	lsls	r0, r0, #31
    621e:	d104      	bne.n	622a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    6220:	4640      	mov	r0, r8
    6222:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6226:	f7ff bf97 	b.w	6158 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    622e:	0000      	.short	0x0000
    6230:	20001112 	.word	0x20001112
    6234:	4905      	ldr	r1, [pc, #20]	; (624c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    6236:	784a      	ldrb	r2, [r1, #1]
    6238:	1e52      	subs	r2, r2, #1
    623a:	704a      	strb	r2, [r1, #1]
    623c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6240:	2200      	movs	r2, #0
    6242:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6246:	f7ff bf87 	b.w	6158 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    624a:	0000      	.short	0x0000
    624c:	20001112 	.word	0x20001112

00006250 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    6250:	b5f0      	push	{r4, r5, r6, r7, lr}
    6252:	f06f 021f 	mvn.w	r2, #31
    6256:	0c01      	lsrs	r1, r0, #16
    6258:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    625c:	251f      	movs	r5, #31
    625e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6262:	3854      	subs	r0, #84	; 0x54
    6264:	d00d      	beq.n	6282 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    6266:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    626a:	3855      	subs	r0, #85	; 0x55
    626c:	d009      	beq.n	6282 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    626e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6272:	38aa      	subs	r0, #170	; 0xaa
    6274:	d005      	beq.n	6282 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    6276:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    627a:	38aa      	subs	r0, #170	; 0xaa
    627c:	d001      	beq.n	6282 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    627e:	2001      	movs	r0, #1
    6280:	e000      	b.n	6284 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    6282:	2000      	movs	r0, #0
    6284:	2200      	movs	r2, #0
    6286:	4613      	mov	r3, r2
    6288:	ea4f 0402 	mov.w	r4, r2
    628c:	ea82 0701 	eor.w	r7, r2, r1
    6290:	43ff      	mvns	r7, r7
    6292:	431f      	orrs	r7, r3
    6294:	1c7f      	adds	r7, r7, #1
    6296:	d00f      	beq.n	62b8 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    6298:	f006 0701 	and.w	r7, r6, #1
    629c:	0852      	lsrs	r2, r2, #1
    629e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    62a2:	f005 0701 	and.w	r7, r5, #1
    62a6:	085b      	lsrs	r3, r3, #1
    62a8:	0876      	lsrs	r6, r6, #1
    62aa:	086d      	lsrs	r5, r5, #1
    62ac:	1c64      	adds	r4, r4, #1
    62ae:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    62b2:	2c16      	cmp	r4, #22
    62b4:	d3ea      	bcc.n	628c <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    62b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62b8:	2000      	movs	r0, #0
    62ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000062bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    62bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62c0:	4604      	mov	r4, r0
    62c2:	2601      	movs	r6, #1
    62c4:	f100 0570 	add.w	r5, r0, #112	; 0x70
    62c8:	b159      	cbz	r1, 62e2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x26>
    62ca:	2901      	cmp	r1, #1
    62cc:	d020      	beq.n	6310 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x54>
    62ce:	2902      	cmp	r1, #2
    62d0:	d045      	beq.n	635e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa2>
    62d2:	2903      	cmp	r1, #3
    62d4:	d11a      	bne.n	630c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    62d6:	4601      	mov	r1, r0
    62d8:	4628      	mov	r0, r5
    62da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    62de:	f007 be8f 	b.w	e000 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    62e2:	f44f 7204 	mov.w	r2, #528	; 0x210
    62e6:	2100      	movs	r1, #0
    62e8:	f006 fba5 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    62ec:	f004 fe44 	bl	af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    62f0:	f644 112b 	movw	r1, #18731	; 0x492b
    62f4:	4008      	ands	r0, r1
    62f6:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    62fa:	0a00      	lsrs	r0, r0, #8
    62fc:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    6300:	20fe      	movs	r0, #254	; 0xfe
    6302:	f885 0074 	strb.w	r0, [r5, #116]	; 0x74
    6306:	207f      	movs	r0, #127	; 0x7f
    6308:	7268      	strb	r0, [r5, #9]
    630a:	7466      	strb	r6, [r4, #17]
    630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6310:	2700      	movs	r7, #0
    6312:	f8a4 7106 	strh.w	r7, [r4, #262]	; 0x106
    6316:	f884 70fb 	strb.w	r7, [r4, #251]	; 0xfb
    631a:	6861      	ldr	r1, [r4, #4]
    631c:	4815      	ldr	r0, [pc, #84]	; (6374 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb8>)
    631e:	460a      	mov	r2, r1
    6320:	4408      	add	r0, r1
    6322:	fbb0 f0f1 	udiv	r0, r0, r1
    6326:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    632a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    632e:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    6332:	8963      	ldrh	r3, [r4, #10]
    6334:	4628      	mov	r0, r5
    6336:	f000 f899 	bl	646c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    633a:	4621      	mov	r1, r4
    633c:	4628      	mov	r0, r5
    633e:	f007 fe5f 	bl	e000 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    6342:	f006 fac8 	bl	c8d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6346:	b120      	cbz	r0, 6352 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x96>
    6348:	f8d4 0012 	ldr.w	r0, [r4, #18]
    634c:	f7ff ff80 	bl	6250 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    6350:	b110      	cbz	r0, 6358 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9c>
    6352:	f884 716c 	strb.w	r7, [r4, #364]	; 0x16c
    6356:	e7d9      	b.n	630c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    6358:	f884 616c 	strb.w	r6, [r4, #364]	; 0x16c
    635c:	e7d6      	b.n	630c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    635e:	6841      	ldr	r1, [r0, #4]
    6360:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    6364:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    6368:	4628      	mov	r0, r5
    636a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    636e:	f000 b87d 	b.w	646c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    6372:	0000      	.short	0x0000
    6374:	01c9c37f 	.word	0x01c9c37f

00006378 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA>:
    6378:	b510      	push	{r4, lr}
    637a:	2820      	cmp	r0, #32
    637c:	d304      	bcc.n	6388 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA+0x10>
    637e:	f240 117b 	movw	r1, #379	; 0x17b
    6382:	2029      	movs	r0, #41	; 0x29
    6384:	f7fe f8da 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6388:	4901      	ldr	r1, [pc, #4]	; (6390 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA+0x18>)
    638a:	5c08      	ldrb	r0, [r1, r0]
    638c:	bd10      	pop	{r4, pc}
    638e:	0000      	.short	0x0000
    6390:	200010e4 	.word	0x200010e4

00006394 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I>:
    6394:	b510      	push	{r4, lr}
    6396:	2820      	cmp	r0, #32
    6398:	d304      	bcc.n	63a4 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I+0x10>
    639a:	f240 1181 	movw	r1, #385	; 0x181
    639e:	2029      	movs	r0, #41	; 0x29
    63a0:	f7fe f8cc 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63a4:	4a01      	ldr	r2, [pc, #4]	; (63ac <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I+0x18>)
    63a6:	5411      	strb	r1, [r2, r0]
    63a8:	bd10      	pop	{r4, pc}
    63aa:	0000      	.short	0x0000
    63ac:	200010e4 	.word	0x200010e4

000063b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    63b0:	b510      	push	{r4, lr}
    63b2:	2820      	cmp	r0, #32
    63b4:	d304      	bcc.n	63c0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x10>
    63b6:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    63ba:	2029      	movs	r0, #41	; 0x29
    63bc:	f7fe f8be 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63c0:	4901      	ldr	r1, [pc, #4]	; (63c8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    63c2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    63c6:	bd10      	pop	{r4, pc}
    63c8:	200010a4 	.word	0x200010a4

000063cc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    63cc:	b510      	push	{r4, lr}
    63ce:	2820      	cmp	r0, #32
    63d0:	d304      	bcc.n	63dc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x10>
    63d2:	f44f 71ba 	mov.w	r1, #372	; 0x174
    63d6:	2029      	movs	r0, #41	; 0x29
    63d8:	f7fe f8b0 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63dc:	4a01      	ldr	r2, [pc, #4]	; (63e4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    63de:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
    63e2:	bd10      	pop	{r4, pc}
    63e4:	200010a4 	.word	0x200010a4
    63e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ea:	7ec3      	ldrb	r3, [r0, #27]
    63ec:	f891 4020 	ldrb.w	r4, [r1, #32]
    63f0:	2501      	movs	r5, #1
    63f2:	fb04 3202 	mla	r2, r4, r2, r3
    63f6:	2325      	movs	r3, #37	; 0x25
    63f8:	fbb2 f4f3 	udiv	r4, r2, r3
    63fc:	fb03 2214 	mls	r2, r3, r4, r2
    6400:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    6404:	76c2      	strb	r2, [r0, #27]
    6406:	f002 0307 	and.w	r3, r2, #7
    640a:	7b24      	ldrb	r4, [r4, #12]
    640c:	fa05 f303 	lsl.w	r3, r5, r3
    6410:	421c      	tst	r4, r3
    6412:	d001      	beq.n	6418 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x4c>
    6414:	7702      	strb	r2, [r0, #28]
    6416:	e01e      	b.n	6456 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8a>
    6418:	7e83      	ldrb	r3, [r0, #26]
    641a:	fbb2 f4f3 	udiv	r4, r2, r3
    641e:	fb03 2214 	mls	r2, r3, r4, r2
    6422:	1c52      	adds	r2, r2, #1
    6424:	b2d2      	uxtb	r2, r2
    6426:	2300      	movs	r3, #0
    6428:	18c4      	adds	r4, r0, r3
    642a:	7d64      	ldrb	r4, [r4, #21]
    642c:	4294      	cmp	r4, r2
    642e:	d314      	bcc.n	645a <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8e>
    6430:	2400      	movs	r4, #0
    6432:	18ce      	adds	r6, r1, r3
    6434:	f896 600c 	ldrb.w	r6, [r6, #12]
    6438:	fa05 f704 	lsl.w	r7, r5, r4
    643c:	423e      	tst	r6, r7
    643e:	d001      	beq.n	6444 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x78>
    6440:	1e52      	subs	r2, r2, #1
    6442:	b2d2      	uxtb	r2, r2
    6444:	b122      	cbz	r2, 6450 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x84>
    6446:	1c64      	adds	r4, r4, #1
    6448:	b2e4      	uxtb	r4, r4
    644a:	2c08      	cmp	r4, #8
    644c:	d3f4      	bcc.n	6438 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x6c>
    644e:	e006      	b.n	645e <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x92>
    6450:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    6454:	7701      	strb	r1, [r0, #28]
    6456:	2000      	movs	r0, #0
    6458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    645a:	1b12      	subs	r2, r2, r4
    645c:	b2d2      	uxtb	r2, r2
    645e:	1c5b      	adds	r3, r3, #1
    6460:	b2db      	uxtb	r3, r3
    6462:	2b05      	cmp	r3, #5
    6464:	d3e0      	bcc.n	6428 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x5c>
    6466:	201f      	movs	r0, #31
    6468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    646a:	0000      	movs	r0, r0
    646c:	b530      	push	{r4, r5, lr}
    646e:	2400      	movs	r4, #0
    6470:	8584      	strh	r4, [r0, #44]	; 0x2c
    6472:	8e04      	ldrh	r4, [r0, #48]	; 0x30
    6474:	4d13      	ldr	r5, [pc, #76]	; (64c4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xf8>)
    6476:	434c      	muls	r4, r1
    6478:	fbb4 f4f2 	udiv	r4, r4, r2
    647c:	8604      	strh	r4, [r0, #48]	; 0x30
    647e:	f242 7410 	movw	r4, #10000	; 0x2710
    6482:	4363      	muls	r3, r4
    6484:	fbb3 f3f2 	udiv	r3, r3, r2
    6488:	1c5b      	adds	r3, r3, #1
    648a:	b29b      	uxth	r3, r3
    648c:	fb03 f402 	mul.w	r4, r3, r2
    6490:	85c3      	strh	r3, [r0, #46]	; 0x2e
    6492:	42ac      	cmp	r4, r5
    6494:	d901      	bls.n	649a <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xce>
    6496:	1e5b      	subs	r3, r3, #1
    6498:	85c3      	strh	r3, [r0, #46]	; 0x2e
    649a:	4b0b      	ldr	r3, [pc, #44]	; (64c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xfc>)
    649c:	f240 2471 	movw	r4, #625	; 0x271
    64a0:	fbb3 f3f2 	udiv	r3, r3, r2
    64a4:	1c5b      	adds	r3, r3, #1
    64a6:	8683      	strh	r3, [r0, #52]	; 0x34
    64a8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    64aa:	4363      	muls	r3, r4
    64ac:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    64b0:	1e5b      	subs	r3, r3, #1
    64b2:	fbb3 f3f2 	udiv	r3, r3, r2
    64b6:	6243      	str	r3, [r0, #36]	; 0x24
    64b8:	6a03      	ldr	r3, [r0, #32]
    64ba:	434b      	muls	r3, r1
    64bc:	fbb3 f1f2 	udiv	r1, r3, r2
    64c0:	6201      	str	r1, [r0, #32]
    64c2:	bd30      	pop	{r4, r5, pc}
    64c4:	01e84800 	.word	0x01e84800
    64c8:	02625a00 	.word	0x02625a00

000064cc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    64cc:	7841      	ldrb	r1, [r0, #1]
    64ce:	b141      	cbz	r1, 64e2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    64d0:	78c0      	ldrb	r0, [r0, #3]
    64d2:	2819      	cmp	r0, #25
    64d4:	d203      	bcs.n	64de <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    64d6:	4a04      	ldr	r2, [pc, #16]	; (64e8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    64d8:	5c10      	ldrb	r0, [r2, r0]
    64da:	4288      	cmp	r0, r1
    64dc:	d101      	bne.n	64e2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    64de:	2001      	movs	r0, #1
    64e0:	4770      	bx	lr
    64e2:	2000      	movs	r0, #0
    64e4:	4770      	bx	lr
    64e6:	0000      	.short	0x0000
    64e8:	00010016 	.word	0x00010016

000064ec <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    64ec:	b50c      	push	{r2, r3, lr}
    64ee:	a20b      	add	r2, pc, #44	; (adr r2, 651c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    64f0:	e9d2 1200 	ldrd	r1, r2, [r2]
    64f4:	e9cd 1200 	strd	r1, r2, [sp]
    64f8:	7901      	ldrb	r1, [r0, #4]
    64fa:	7940      	ldrb	r0, [r0, #5]
    64fc:	f001 0207 	and.w	r2, r1, #7
    6500:	4669      	mov	r1, sp
    6502:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6506:	2a01      	cmp	r2, #1
    6508:	d804      	bhi.n	6514 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    650a:	f000 0007 	and.w	r0, r0, #7
    650e:	5c08      	ldrb	r0, [r1, r0]
    6510:	2801      	cmp	r0, #1
    6512:	d901      	bls.n	6518 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    6514:	2000      	movs	r0, #0
    6516:	bd0c      	pop	{r2, r3, pc}
    6518:	2001      	movs	r0, #1
    651a:	bd0c      	pop	{r2, r3, pc}
    651c:	02010100 	.word	0x02010100
    6520:	03020201 	.word	0x03020201

00006524 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6524:	b510      	push	{r4, lr}
    6526:	2201      	movs	r2, #1
    6528:	70c1      	strb	r1, [r0, #3]
    652a:	2919      	cmp	r1, #25
    652c:	d202      	bcs.n	6534 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    652e:	4a06      	ldr	r2, [pc, #24]	; (6548 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6530:	5c52      	ldrb	r2, [r2, r1]
    6532:	e006      	b.n	6542 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6534:	29ff      	cmp	r1, #255	; 0xff
    6536:	d004      	beq.n	6542 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6538:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    653c:	202a      	movs	r0, #42	; 0x2a
    653e:	f7fd fffd 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6542:	7042      	strb	r2, [r0, #1]
    6544:	bd10      	pop	{r4, pc}
    6546:	0000      	.short	0x0000
    6548:	00010016 	.word	0x00010016

0000654c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6550:	ea5f 0900 	movs.w	r9, r0
    6554:	d006      	beq.n	6564 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    6556:	4d21      	ldr	r5, [pc, #132]	; (65dc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    6558:	f105 0010 	add.w	r0, r5, #16
    655c:	7b69      	ldrb	r1, [r5, #13]
    655e:	4682      	mov	sl, r0
    6560:	b119      	cbz	r1, 656a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    6562:	e00b      	b.n	657c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6564:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6568:	e005      	b.n	6576 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    656a:	2100      	movs	r1, #0
    656c:	f007 ff37 	bl	e3de <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    6570:	b120      	cbz	r0, 657c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6572:	f240 31d3 	movw	r1, #979	; 0x3d3
    6576:	202b      	movs	r0, #43	; 0x2b
    6578:	f7fd ffe0 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    657c:	8a2e      	ldrh	r6, [r5, #16]
    657e:	2000      	movs	r0, #0
    6580:	f7fe f9be 	bl	4900 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6584:	4f16      	ldr	r7, [pc, #88]	; (65e0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    6586:	f8df 805c 	ldr.w	r8, [pc, #92]	; 65e4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    658a:	4604      	mov	r4, r0
    658c:	6838      	ldr	r0, [r7, #0]
    658e:	b158      	cbz	r0, 65a8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6590:	8a28      	ldrh	r0, [r5, #16]
    6592:	42a0      	cmp	r0, r4
    6594:	d308      	bcc.n	65a8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6596:	1b00      	subs	r0, r0, r4
    6598:	b2c0      	uxtb	r0, r0
    659a:	2101      	movs	r1, #1
    659c:	f007 f9e3 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    65a0:	b148      	cbz	r0, 65b6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    65a2:	4649      	mov	r1, r9
    65a4:	683a      	ldr	r2, [r7, #0]
    65a6:	e004      	b.n	65b2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    65a8:	f8d8 2000 	ldr.w	r2, [r8]
    65ac:	b11a      	cbz	r2, 65b6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    65ae:	8a28      	ldrh	r0, [r5, #16]
    65b0:	4649      	mov	r1, r9
    65b2:	4790      	blx	r2
    65b4:	b968      	cbnz	r0, 65d2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    65b6:	2100      	movs	r1, #0
    65b8:	4650      	mov	r0, sl
    65ba:	f007 ff10 	bl	e3de <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    65be:	b910      	cbnz	r0, 65c6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    65c0:	8a28      	ldrh	r0, [r5, #16]
    65c2:	42b0      	cmp	r0, r6
    65c4:	d1e2      	bne.n	658c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    65c6:	4808      	ldr	r0, [pc, #32]	; (65e8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    65c8:	6801      	ldr	r1, [r0, #0]
    65ca:	b129      	cbz	r1, 65d8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    65cc:	4648      	mov	r0, r9
    65ce:	4788      	blx	r1
    65d0:	b110      	cbz	r0, 65d8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    65d2:	2001      	movs	r0, #1
    65d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65d8:	2000      	movs	r0, #0
    65da:	e7fb      	b.n	65d4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    65dc:	20000eb8 	.word	0x20000eb8
    65e0:	2000022c 	.word	0x2000022c
    65e4:	20000230 	.word	0x20000230
    65e8:	20000238 	.word	0x20000238

000065ec <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    65ec:	b570      	push	{r4, r5, r6, lr}
    65ee:	0005      	movs	r5, r0
    65f0:	460c      	mov	r4, r1
    65f2:	d02e      	beq.n	6652 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    65f4:	4818      	ldr	r0, [pc, #96]	; (6658 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    65f6:	6802      	ldr	r2, [r0, #0]
    65f8:	b35a      	cbz	r2, 6652 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    65fa:	4628      	mov	r0, r5
    65fc:	4790      	blx	r2
    65fe:	b340      	cbz	r0, 6652 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    6600:	7820      	ldrb	r0, [r4, #0]
    6602:	2811      	cmp	r0, #17
    6604:	d002      	beq.n	660c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    6606:	2814      	cmp	r0, #20
    6608:	d003      	beq.n	6612 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    660a:	e020      	b.n	664e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    660c:	7920      	ldrb	r0, [r4, #4]
    660e:	b1f0      	cbz	r0, 664e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6610:	e00a      	b.n	6628 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    6612:	7920      	ldrb	r0, [r4, #4]
    6614:	b120      	cbz	r0, 6620 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    6616:	4628      	mov	r0, r5
    6618:	f008 f8c8 	bl	e7ac <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    661c:	b120      	cbz	r0, 6628 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    661e:	e016      	b.n	664e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6620:	490e      	ldr	r1, [pc, #56]	; (665c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    6622:	2000      	movs	r0, #0
    6624:	7348      	strb	r0, [r1, #13]
    6626:	e012      	b.n	664e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6628:	88e4      	ldrh	r4, [r4, #6]
    662a:	2100      	movs	r1, #0
    662c:	4620      	mov	r0, r4
    662e:	f007 f99a 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6632:	b160      	cbz	r0, 664e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6634:	8800      	ldrh	r0, [r0, #0]
    6636:	f007 f9fb 	bl	da30 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    663a:	2100      	movs	r1, #0
    663c:	4620      	mov	r0, r4
    663e:	f7fe f9fb 	bl	4a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6642:	b120      	cbz	r0, 664e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6644:	f44f 719a 	mov.w	r1, #308	; 0x134
    6648:	202b      	movs	r0, #43	; 0x2b
    664a:	f7fd ff77 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    664e:	2001      	movs	r0, #1
    6650:	bd70      	pop	{r4, r5, r6, pc}
    6652:	2000      	movs	r0, #0
    6654:	bd70      	pop	{r4, r5, r6, pc}
    6656:	0000      	.short	0x0000
    6658:	20000228 	.word	0x20000228
    665c:	20000eb8 	.word	0x20000eb8

00006660 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6660:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6664:	b087      	sub	sp, #28
    6666:	460c      	mov	r4, r1
    6668:	a902      	add	r1, sp, #8
    666a:	9807      	ldr	r0, [sp, #28]
    666c:	f007 fab3 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6670:	2800      	cmp	r0, #0
    6672:	d17c      	bne.n	676e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    6674:	f8df 9118 	ldr.w	r9, [pc, #280]	; 6790 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x130>
    6678:	f04f 0a01 	mov.w	sl, #1
    667c:	4680      	mov	r8, r0
    667e:	9803      	ldr	r0, [sp, #12]
    6680:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    6684:	2800      	cmp	r0, #0
    6686:	d00c      	beq.n	66a2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6688:	f8d9 2000 	ldr.w	r2, [r9]
    668c:	b162      	cbz	r2, 66a8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    668e:	4621      	mov	r1, r4
    6690:	9807      	ldr	r0, [sp, #28]
    6692:	4790      	blx	r2
    6694:	b140      	cbz	r0, 66a8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6696:	4620      	mov	r0, r4
    6698:	f000 f916 	bl	68c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    669c:	2800      	cmp	r0, #0
    669e:	d1ee      	bne.n	667e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    66a0:	2001      	movs	r0, #1
    66a2:	b009      	add	sp, #36	; 0x24
    66a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66a8:	9d03      	ldr	r5, [sp, #12]
    66aa:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    66ae:	3570      	adds	r5, #112	; 0x70
    66b0:	b948      	cbnz	r0, 66c6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x66>
    66b2:	7f68      	ldrb	r0, [r5, #29]
    66b4:	f88d 0004 	strb.w	r0, [sp, #4]
    66b8:	9801      	ldr	r0, [sp, #4]
    66ba:	9001      	str	r0, [sp, #4]
    66bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    66c0:	b108      	cbz	r0, 66c6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x66>
    66c2:	2001      	movs	r0, #1
    66c4:	e000      	b.n	66c8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    66c6:	2000      	movs	r0, #0
    66c8:	4683      	mov	fp, r0
    66ca:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
    66ce:	b1c0      	cbz	r0, 6702 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa2>
    66d0:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
    66d4:	0780      	lsls	r0, r0, #30
    66d6:	d514      	bpl.n	6702 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa2>
    66d8:	f884 8001 	strb.w	r8, [r4, #1]
    66dc:	f884 a000 	strb.w	sl, [r4]
    66e0:	f884 8004 	strb.w	r8, [r4, #4]
    66e4:	9907      	ldr	r1, [sp, #28]
    66e6:	f8a4 1005 	strh.w	r1, [r4, #5]
    66ea:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
    66ee:	71e1      	strb	r1, [r4, #7]
    66f0:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
    66f4:	8121      	strh	r1, [r4, #8]
    66f6:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
    66fa:	8161      	strh	r1, [r4, #10]
    66fc:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
    6700:	e7c9      	b.n	6696 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6702:	9807      	ldr	r0, [sp, #28]
    6704:	f7fe fb40 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6708:	0007      	movs	r7, r0
    670a:	d00d      	beq.n	6728 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xc8>
    670c:	f006 ff39 	bl	d582 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6710:	0006      	movs	r6, r0
    6712:	d015      	beq.n	6740 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe0>
    6714:	f884 8001 	strb.w	r8, [r4, #1]
    6718:	200d      	movs	r0, #13
    671a:	7020      	strb	r0, [r4, #0]
    671c:	9807      	ldr	r0, [sp, #28]
    671e:	80e0      	strh	r0, [r4, #6]
    6720:	8126      	strh	r6, [r4, #8]
    6722:	f884 a004 	strb.w	sl, [r4, #4]
    6726:	e007      	b.n	6738 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    6728:	f240 213a 	movw	r1, #570	; 0x23a
    672c:	e02b      	b.n	6786 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    672e:	2100      	movs	r1, #0
    6730:	4638      	mov	r0, r7
    6732:	460a      	mov	r2, r1
    6734:	f007 f833 	bl	d79e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6738:	1e76      	subs	r6, r6, #1
    673a:	b2b6      	uxth	r6, r6
    673c:	d2f7      	bcs.n	672e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xce>
    673e:	e7aa      	b.n	6696 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6740:	9807      	ldr	r0, [sp, #28]
    6742:	f7fe fb0b 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6746:	b1e0      	cbz	r0, 6782 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x122>
    6748:	f1bb 0f00 	cmp.w	fp, #0
    674c:	d01e      	beq.n	678c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    674e:	f006 fe50 	bl	d3f2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6752:	b160      	cbz	r0, 676e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    6754:	9807      	ldr	r0, [sp, #28]
    6756:	f007 f96b 	bl	da30 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    675a:	2100      	movs	r1, #0
    675c:	9807      	ldr	r0, [sp, #28]
    675e:	f7fe f96b 	bl	4a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6762:	f884 8001 	strb.w	r8, [r4, #1]
    6766:	210a      	movs	r1, #10
    6768:	4640      	mov	r0, r8
    676a:	7021      	strb	r1, [r4, #0]
    676c:	e000      	b.n	6770 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    676e:	e00d      	b.n	678c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    6770:	f884 8004 	strb.w	r8, [r4, #4]
    6774:	9907      	ldr	r1, [sp, #28]
    6776:	f8a4 1005 	strh.w	r1, [r4, #5]
    677a:	7fa9      	ldrb	r1, [r5, #30]
    677c:	71e1      	strb	r1, [r4, #7]
    677e:	7768      	strb	r0, [r5, #29]
    6780:	e789      	b.n	6696 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6782:	f44f 7116 	mov.w	r1, #600	; 0x258
    6786:	202b      	movs	r0, #43	; 0x2b
    6788:	f7fd fed8 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    678c:	2000      	movs	r0, #0
    678e:	e788      	b.n	66a2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6790:	20000234 	.word	0x20000234

00006794 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6798:	4c12      	ldr	r4, [pc, #72]	; (67e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    679a:	4607      	mov	r7, r0
    679c:	460e      	mov	r6, r1
    679e:	7de0      	ldrb	r0, [r4, #23]
    67a0:	b110      	cbz	r0, 67a8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    67a2:	8b20      	ldrh	r0, [r4, #24]
    67a4:	2800      	cmp	r0, #0
    67a6:	d012      	beq.n	67ce <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    67a8:	480e      	ldr	r0, [pc, #56]	; (67e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    67aa:	300e      	adds	r0, #14
    67ac:	4680      	mov	r8, r0
    67ae:	f007 fdc0 	bl	e332 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    67b2:	b9a8      	cbnz	r0, 67e0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    67b4:	89e5      	ldrh	r5, [r4, #14]
    67b6:	89e0      	ldrh	r0, [r4, #14]
    67b8:	4632      	mov	r2, r6
    67ba:	4639      	mov	r1, r7
    67bc:	f007 fdc8 	bl	e350 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    67c0:	b138      	cbz	r0, 67d2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    67c2:	7de0      	ldrb	r0, [r4, #23]
    67c4:	b110      	cbz	r0, 67cc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    67c6:	8b20      	ldrh	r0, [r4, #24]
    67c8:	1e40      	subs	r0, r0, #1
    67ca:	8320      	strh	r0, [r4, #24]
    67cc:	2001      	movs	r0, #1
    67ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67d2:	4640      	mov	r0, r8
    67d4:	f007 fdad 	bl	e332 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    67d8:	b910      	cbnz	r0, 67e0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    67da:	89e0      	ldrh	r0, [r4, #14]
    67dc:	42a8      	cmp	r0, r5
    67de:	d1ea      	bne.n	67b6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    67e0:	2000      	movs	r0, #0
    67e2:	e7f4      	b.n	67ce <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    67e4:	20000eb8 	.word	0x20000eb8

000067e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    67e8:	b510      	push	{r4, lr}
    67ea:	7901      	ldrb	r1, [r0, #4]
    67ec:	b119      	cbz	r1, 67f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    67ee:	2901      	cmp	r1, #1
    67f0:	d006      	beq.n	6800 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    67f2:	2000      	movs	r0, #0
    67f4:	bd10      	pop	{r4, pc}
    67f6:	8842      	ldrh	r2, [r0, #2]
    67f8:	6883      	ldr	r3, [r0, #8]
    67fa:	8800      	ldrh	r0, [r0, #0]
    67fc:	2102      	movs	r1, #2
    67fe:	e003      	b.n	6808 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6800:	8842      	ldrh	r2, [r0, #2]
    6802:	6883      	ldr	r3, [r0, #8]
    6804:	8800      	ldrh	r0, [r0, #0]
    6806:	2101      	movs	r1, #1
    6808:	f000 f808 	bl	681c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    680c:	b910      	cbnz	r0, 6814 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    680e:	4902      	ldr	r1, [pc, #8]	; (6818 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6810:	2001      	movs	r0, #1
    6812:	7008      	strb	r0, [r1, #0]
    6814:	2001      	movs	r0, #1
    6816:	bd10      	pop	{r4, pc}
    6818:	20000eb8 	.word	0x20000eb8
    681c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6820:	468a      	mov	sl, r1
    6822:	4699      	mov	r9, r3
    6824:	4615      	mov	r5, r2
    6826:	4604      	mov	r4, r0
    6828:	a901      	add	r1, sp, #4
    682a:	f007 f9d4 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    682e:	bbe0      	cbnz	r0, 68aa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6830:	9f02      	ldr	r7, [sp, #8]
    6832:	f04f 0800 	mov.w	r8, #0
    6836:	3770      	adds	r7, #112	; 0x70
    6838:	b18d      	cbz	r5, 685e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    683a:	4620      	mov	r0, r4
    683c:	f7fe faa4 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6840:	0004      	movs	r4, r0
    6842:	d00f      	beq.n	6864 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    6844:	4629      	mov	r1, r5
    6846:	f006 fedb 	bl	d600 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    684a:	0006      	movs	r6, r0
    684c:	d003      	beq.n	6856 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    684e:	481d      	ldr	r0, [pc, #116]	; (68c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6850:	8880      	ldrh	r0, [r0, #4]
    6852:	42a8      	cmp	r0, r5
    6854:	d208      	bcs.n	6868 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6856:	2000      	movs	r0, #0
    6858:	b004      	add	sp, #16
    685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    685e:	2001      	movs	r0, #1
    6860:	7538      	strb	r0, [r7, #20]
    6862:	e029      	b.n	68b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6864:	2189      	movs	r1, #137	; 0x89
    6866:	e02a      	b.n	68be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    6868:	4620      	mov	r0, r4
    686a:	4631      	mov	r1, r6
    686c:	aa03      	add	r2, sp, #12
    686e:	f006 fec0 	bl	d5f2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6872:	9803      	ldr	r0, [sp, #12]
    6874:	f8a0 8000 	strh.w	r8, [r0]
    6878:	f880 8002 	strb.w	r8, [r0, #2]
    687c:	7d39      	ldrb	r1, [r7, #20]
    687e:	b109      	cbz	r1, 6884 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    6880:	f04f 0a02 	mov.w	sl, #2
    6884:	4651      	mov	r1, sl
    6886:	f007 fcab 	bl	e1e0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    688a:	4631      	mov	r1, r6
    688c:	2603      	movs	r6, #3
    688e:	4620      	mov	r0, r4
    6890:	464a      	mov	r2, r9
    6892:	462b      	mov	r3, r5
    6894:	9600      	str	r6, [sp, #0]
    6896:	f006 fd95 	bl	d3c4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    689a:	4620      	mov	r0, r4
    689c:	4629      	mov	r1, r5
    689e:	f006 fe4c 	bl	d53a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    68a2:	b158      	cbz	r0, 68bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    68a4:	4644      	mov	r4, r8
    68a6:	a801      	add	r0, sp, #4
    68a8:	e000      	b.n	68ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    68aa:	e005      	b.n	68b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    68ac:	f007 fd44 	bl	e338 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    68b0:	9802      	ldr	r0, [sp, #8]
    68b2:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    68b6:	753c      	strb	r4, [r7, #20]
    68b8:	2001      	movs	r0, #1
    68ba:	e7cd      	b.n	6858 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    68bc:	219f      	movs	r1, #159	; 0x9f
    68be:	202b      	movs	r0, #43	; 0x2b
    68c0:	f7fd fe3c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68c4:	20000eb8 	.word	0x20000eb8
    68c8:	b510      	push	{r4, lr}
    68ca:	492c      	ldr	r1, [pc, #176]	; (697c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    68cc:	b086      	sub	sp, #24
    68ce:	7d8a      	ldrb	r2, [r1, #22]
    68d0:	7801      	ldrb	r1, [r0, #0]
    68d2:	07d3      	lsls	r3, r2, #31
    68d4:	d101      	bne.n	68da <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    68d6:	2919      	cmp	r1, #25
    68d8:	d004      	beq.n	68e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    68da:	2918      	cmp	r1, #24
    68dc:	d01e      	beq.n	691c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    68de:	2912      	cmp	r1, #18
    68e0:	d045      	beq.n	696e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    68e2:	e049      	b.n	6978 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    68e4:	8880      	ldrh	r0, [r0, #4]
    68e6:	f8ad 0000 	strh.w	r0, [sp]
    68ea:	a902      	add	r1, sp, #8
    68ec:	f007 f973 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    68f0:	b108      	cbz	r0, 68f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    68f2:	2158      	movs	r1, #88	; 0x58
    68f4:	e035      	b.n	6962 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    68f6:	9803      	ldr	r0, [sp, #12]
    68f8:	f810 1f62 	ldrb.w	r1, [r0, #98]!
    68fc:	f88d 1002 	strb.w	r1, [sp, #2]
    6900:	7841      	ldrb	r1, [r0, #1]
    6902:	f88d 1003 	strb.w	r1, [sp, #3]
    6906:	8840      	ldrh	r0, [r0, #2]
    6908:	f8ad 0004 	strh.w	r0, [sp, #4]
    690c:	2102      	movs	r1, #2
    690e:	4668      	mov	r0, sp
    6910:	f008 ff70 	bl	f7f4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6914:	b340      	cbz	r0, 6968 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6916:	f240 114d 	movw	r1, #333	; 0x14d
    691a:	e022      	b.n	6962 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    691c:	0791      	lsls	r1, r2, #30
    691e:	d42b      	bmi.n	6978 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6920:	8884      	ldrh	r4, [r0, #4]
    6922:	a903      	add	r1, sp, #12
    6924:	4620      	mov	r0, r4
    6926:	f008 fe4d 	bl	f5c4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    692a:	b110      	cbz	r0, 6932 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    692c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6930:	e017      	b.n	6962 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6932:	f8ad 4000 	strh.w	r4, [sp]
    6936:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    693a:	f8ad 0002 	strh.w	r0, [sp, #2]
    693e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6942:	f8ad 0004 	strh.w	r0, [sp, #4]
    6946:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    694a:	f8ad 0006 	strh.w	r0, [sp, #6]
    694e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6952:	f8ad 0008 	strh.w	r0, [sp, #8]
    6956:	4668      	mov	r0, sp
    6958:	f008 fe6b 	bl	f632 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    695c:	b120      	cbz	r0, 6968 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    695e:	f240 115d 	movw	r1, #349	; 0x15d
    6962:	202b      	movs	r0, #43	; 0x2b
    6964:	f7fd fdea 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6968:	2001      	movs	r0, #1
    696a:	b006      	add	sp, #24
    696c:	bd10      	pop	{r4, pc}
    696e:	0751      	lsls	r1, r2, #29
    6970:	d402      	bmi.n	6978 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6972:	7b80      	ldrb	r0, [r0, #14]
    6974:	07c0      	lsls	r0, r0, #31
    6976:	d0f7      	beq.n	6968 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6978:	2000      	movs	r0, #0
    697a:	e7f6      	b.n	696a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    697c:	20000eb8 	.word	0x20000eb8

00006980 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6980:	b570      	push	{r4, r5, r6, lr}
    6982:	4604      	mov	r4, r0
    6984:	7c00      	ldrb	r0, [r0, #16]
    6986:	b300      	cbz	r0, 69ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6988:	2802      	cmp	r0, #2
    698a:	d01e      	beq.n	69ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    698c:	f05f 0001 	movs.w	r0, #1
    6990:	f104 0141 	add.w	r1, r4, #65	; 0x41
    6994:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6998:	460d      	mov	r5, r1
    699a:	b1c0      	cbz	r0, 69ce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    699c:	7de0      	ldrb	r0, [r4, #23]
    699e:	b1f0      	cbz	r0, 69de <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    69a0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    69a4:	f8c4 0041 	str.w	r0, [r4, #65]	; 0x41
    69a8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    69ac:	f8a4 0045 	strh.w	r0, [r4, #69]	; 0x45
    69b0:	7c20      	ldrb	r0, [r4, #16]
    69b2:	f007 fe7c 	bl	e6ae <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    69b6:	7620      	strb	r0, [r4, #24]
    69b8:	2008      	movs	r0, #8
    69ba:	7660      	strb	r0, [r4, #25]
    69bc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    69c0:	4629      	mov	r1, r5
    69c2:	f007 fe60 	bl	e686 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    69c6:	b9a8      	cbnz	r0, 69f4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    69c8:	e00e      	b.n	69e8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    69ca:	2000      	movs	r0, #0
    69cc:	e7e0      	b.n	6990 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    69ce:	2000      	movs	r0, #0
    69d0:	f7fe fc22 	bl	5218 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    69d4:	2800      	cmp	r0, #0
    69d6:	d1eb      	bne.n	69b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    69d8:	f240 4172 	movw	r1, #1138	; 0x472
    69dc:	e001      	b.n	69e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    69de:	f240 4176 	movw	r1, #1142	; 0x476
    69e2:	202d      	movs	r0, #45	; 0x2d
    69e4:	f7fd fdaa 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69e8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    69ec:	4629      	mov	r1, r5
    69ee:	f007 fe53 	bl	e698 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    69f2:	b100      	cbz	r0, 69f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    69f4:	2001      	movs	r0, #1
    69f6:	76a0      	strb	r0, [r4, #26]
    69f8:	7e20      	ldrb	r0, [r4, #24]
    69fa:	b910      	cbnz	r0, 6a02 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    69fc:	78a0      	ldrb	r0, [r4, #2]
    69fe:	0740      	lsls	r0, r0, #29
    6a00:	d506      	bpl.n	6a10 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6a02:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    6a06:	f104 0148 	add.w	r1, r4, #72	; 0x48
    6a0a:	f007 f8a1 	bl	db50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6a0e:	7660      	strb	r0, [r4, #25]
    6a10:	2500      	movs	r5, #0
    6a12:	63a5      	str	r5, [r4, #56]	; 0x38
    6a14:	f005 fe20 	bl	c658 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6a18:	63e0      	str	r0, [r4, #60]	; 0x3c
    6a1a:	2100      	movs	r1, #0
    6a1c:	4620      	mov	r0, r4
    6a1e:	f007 ff55 	bl	e8cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    6a22:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
    6a26:	78a0      	ldrb	r0, [r4, #2]
    6a28:	0740      	lsls	r0, r0, #29
    6a2a:	d508      	bpl.n	6a3e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6a2c:	7e20      	ldrb	r0, [r4, #24]
    6a2e:	2800      	cmp	r0, #0
    6a30:	d005      	beq.n	6a3e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6a32:	4620      	mov	r0, r4
    6a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a38:	2100      	movs	r1, #0
    6a3a:	f000 bdbb 	b.w	75b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b4>
    6a3e:	bd70      	pop	{r4, r5, r6, pc}

00006a40 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6a40:	b508      	push	{r3, lr}
    6a42:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
    6a46:	f88d 2000 	strb.w	r2, [sp]
    6a4a:	9a00      	ldr	r2, [sp, #0]
    6a4c:	9200      	str	r2, [sp, #0]
    6a4e:	f89d 3000 	ldrb.w	r3, [sp]
    6a52:	2200      	movs	r2, #0
    6a54:	b163      	cbz	r3, 6a70 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    6a56:	704a      	strb	r2, [r1, #1]
    6a58:	2317      	movs	r3, #23
    6a5a:	700b      	strb	r3, [r1, #0]
    6a5c:	f850 3f9d 	ldr.w	r3, [r0, #157]!
    6a60:	604b      	str	r3, [r1, #4]
    6a62:	6843      	ldr	r3, [r0, #4]
    6a64:	608b      	str	r3, [r1, #8]
    6a66:	7a03      	ldrb	r3, [r0, #8]
    6a68:	730b      	strb	r3, [r1, #12]
    6a6a:	f800 2c01 	strb.w	r2, [r0, #-1]
    6a6e:	e03b      	b.n	6ae8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6a70:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    6a74:	f88d 3000 	strb.w	r3, [sp]
    6a78:	9b00      	ldr	r3, [sp, #0]
    6a7a:	9300      	str	r3, [sp, #0]
    6a7c:	f89d 3000 	ldrb.w	r3, [sp]
    6a80:	b143      	cbz	r3, 6a94 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6a82:	704a      	strb	r2, [r1, #1]
    6a84:	2305      	movs	r3, #5
    6a86:	700b      	strb	r3, [r1, #0]
    6a88:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    6a8c:	604b      	str	r3, [r1, #4]
    6a8e:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
    6a92:	e029      	b.n	6ae8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6a94:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    6a98:	f88d 3000 	strb.w	r3, [sp]
    6a9c:	9b00      	ldr	r3, [sp, #0]
    6a9e:	9300      	str	r3, [sp, #0]
    6aa0:	f89d 3000 	ldrb.w	r3, [sp]
    6aa4:	b11b      	cbz	r3, 6aae <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    6aa6:	bf00      	nop
    6aa8:	f007 fee8 	bl	e87c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    6aac:	e01c      	b.n	6ae8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6aae:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    6ab2:	f88d 3000 	strb.w	r3, [sp]
    6ab6:	9b00      	ldr	r3, [sp, #0]
    6ab8:	9300      	str	r3, [sp, #0]
    6aba:	f89d 3000 	ldrb.w	r3, [sp]
    6abe:	b1ab      	cbz	r3, 6aec <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6ac0:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    6ac4:	f88d 3000 	strb.w	r3, [sp]
    6ac8:	9b00      	ldr	r3, [sp, #0]
    6aca:	9300      	str	r3, [sp, #0]
    6acc:	f89d 3000 	ldrb.w	r3, [sp]
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d1e9      	bne.n	6aa8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6ad4:	704a      	strb	r2, [r1, #1]
    6ad6:	2314      	movs	r3, #20
    6ad8:	700b      	strb	r3, [r1, #0]
    6ada:	f850 3f90 	ldr.w	r3, [r0, #144]!
    6ade:	604b      	str	r3, [r1, #4]
    6ae0:	8883      	ldrh	r3, [r0, #4]
    6ae2:	810b      	strh	r3, [r1, #8]
    6ae4:	f800 2c02 	strb.w	r2, [r0, #-2]
    6ae8:	2001      	movs	r0, #1
    6aea:	bd08      	pop	{r3, pc}
    6aec:	2000      	movs	r0, #0
    6aee:	bd08      	pop	{r3, pc}

00006af0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6af0:	b530      	push	{r4, r5, lr}
    6af2:	460c      	mov	r4, r1
    6af4:	b08d      	sub	sp, #52	; 0x34
    6af6:	4605      	mov	r5, r0
    6af8:	4601      	mov	r1, r0
    6afa:	2220      	movs	r2, #32
    6afc:	a802      	add	r0, sp, #8
    6afe:	f005 ff20 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6b02:	a80a      	add	r0, sp, #40	; 0x28
    6b04:	f007 ff8f 	bl	ea26 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6b08:	7aa0      	ldrb	r0, [r4, #10]
    6b0a:	f88d 0018 	strb.w	r0, [sp, #24]
    6b0e:	7820      	ldrb	r0, [r4, #0]
    6b10:	f88d 0008 	strb.w	r0, [sp, #8]
    6b14:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6b18:	f8ad 0000 	strh.w	r0, [sp]
    6b1c:	f89d 0000 	ldrb.w	r0, [sp]
    6b20:	f000 0101 	and.w	r1, r0, #1
    6b24:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6b28:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6b2c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6b30:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6b34:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6b38:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6b3c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6b40:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6b44:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6b48:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6b4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6b50:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6b54:	f8ad 000a 	strh.w	r0, [sp, #10]
    6b58:	7d20      	ldrb	r0, [r4, #20]
    6b5a:	2801      	cmp	r0, #1
    6b5c:	d006      	beq.n	6b6c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6b5e:	2802      	cmp	r0, #2
    6b60:	d004      	beq.n	6b6c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6b62:	f240 21af 	movw	r1, #687	; 0x2af
    6b66:	2006      	movs	r0, #6
    6b68:	f7fd fce8 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b6c:	f88d 000c 	strb.w	r0, [sp, #12]
    6b70:	7a61      	ldrb	r1, [r4, #9]
    6b72:	a80a      	add	r0, sp, #40	; 0x28
    6b74:	f007 ff3e 	bl	e9f4 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6b78:	7d20      	ldrb	r0, [r4, #20]
    6b7a:	2101      	movs	r1, #1
    6b7c:	2802      	cmp	r0, #2
    6b7e:	d102      	bne.n	6b86 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6b80:	7d60      	ldrb	r0, [r4, #21]
    6b82:	1c40      	adds	r0, r0, #1
    6b84:	b2c1      	uxtb	r1, r0
    6b86:	7ea0      	ldrb	r0, [r4, #26]
    6b88:	1c40      	adds	r0, r0, #1
    6b8a:	b2c2      	uxtb	r2, r0
    6b8c:	a80a      	add	r0, sp, #40	; 0x28
    6b8e:	f007 fef8 	bl	e982 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6b92:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6b96:	0700      	lsls	r0, r0, #28
    6b98:	d501      	bpl.n	6b9e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6b9a:	2000      	movs	r0, #0
    6b9c:	e020      	b.n	6be0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6b9e:	a80a      	add	r0, sp, #40	; 0x28
    6ba0:	f007 ff01 	bl	e9a6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6ba4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6ba8:	2228      	movs	r2, #40	; 0x28
    6baa:	f000 fdab 	bl	7704 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6bae:	f240 2171 	movw	r1, #625	; 0x271
    6bb2:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    6bb6:	fbb0 f0f1 	udiv	r0, r0, r1
    6bba:	4348      	muls	r0, r1
    6bbc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6bc0:	f240 2371 	movw	r3, #625	; 0x271
    6bc4:	0a0a      	lsrs	r2, r1, #8
    6bc6:	f240 2171 	movw	r1, #625	; 0x271
    6bca:	434a      	muls	r2, r1
    6bcc:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6bd0:	0a09      	lsrs	r1, r1, #8
    6bd2:	4359      	muls	r1, r3
    6bd4:	4290      	cmp	r0, r2
    6bd6:	d801      	bhi.n	6bdc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    6bd8:	9204      	str	r2, [sp, #16]
    6bda:	e004      	b.n	6be6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6bdc:	4288      	cmp	r0, r1
    6bde:	d801      	bhi.n	6be4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6be0:	9004      	str	r0, [sp, #16]
    6be2:	e000      	b.n	6be6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6be4:	9104      	str	r1, [sp, #16]
    6be6:	7ca0      	ldrb	r0, [r4, #18]
    6be8:	f88d 0017 	strb.w	r0, [sp, #23]
    6bec:	7e20      	ldrb	r0, [r4, #24]
    6bee:	2801      	cmp	r0, #1
    6bf0:	d000      	beq.n	6bf4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6bf2:	2000      	movs	r0, #0
    6bf4:	f88d 0014 	strb.w	r0, [sp, #20]
    6bf8:	f895 0064 	ldrb.w	r0, [r5, #100]	; 0x64
    6bfc:	f895 0065 	ldrb.w	r0, [r5, #101]	; 0x65
    6c00:	2220      	movs	r2, #32
    6c02:	a902      	add	r1, sp, #8
    6c04:	4628      	mov	r0, r5
    6c06:	f005 fe9c 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6c0a:	980a      	ldr	r0, [sp, #40]	; 0x28
    6c0c:	6228      	str	r0, [r5, #32]
    6c0e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    6c12:	84a8      	strh	r0, [r5, #36]	; 0x24
    6c14:	7ae0      	ldrb	r0, [r4, #11]
    6c16:	b168      	cbz	r0, 6c34 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    6c18:	2802      	cmp	r0, #2
    6c1a:	d00b      	beq.n	6c34 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    6c1c:	f05f 0001 	movs.w	r0, #1
    6c20:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
    6c24:	68e0      	ldr	r0, [r4, #12]
    6c26:	64a8      	str	r0, [r5, #72]	; 0x48
    6c28:	8a20      	ldrh	r0, [r4, #16]
    6c2a:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    6c2e:	b00d      	add	sp, #52	; 0x34
    6c30:	2000      	movs	r0, #0
    6c32:	bd30      	pop	{r4, r5, pc}
    6c34:	2000      	movs	r0, #0
    6c36:	e7f3      	b.n	6c20 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

00006c38 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6c38:	4a0a      	ldr	r2, [pc, #40]	; (6c64 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    6c3a:	b510      	push	{r4, lr}
    6c3c:	2100      	movs	r1, #0
    6c3e:	7011      	strb	r1, [r2, #0]
    6c40:	4c09      	ldr	r4, [pc, #36]	; (6c68 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6c42:	6060      	str	r0, [r4, #4]
    6c44:	f000 f822 	bl	6c8c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6c48:	b110      	cbz	r0, 6c50 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    6c4a:	f240 311e 	movw	r1, #798	; 0x31e
    6c4e:	e004      	b.n	6c5a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6c50:	68a0      	ldr	r0, [r4, #8]
    6c52:	2800      	cmp	r0, #0
    6c54:	d104      	bne.n	6c60 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6c56:	f240 3121 	movw	r1, #801	; 0x321
    6c5a:	202d      	movs	r0, #45	; 0x2d
    6c5c:	f7fd fc6e 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c60:	bd10      	pop	{r4, pc}
    6c62:	0000      	.short	0x0000
    6c64:	20000ed4 	.word	0x20000ed4
    6c68:	200000f0 	.word	0x200000f0

00006c6c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6c6c:	4902      	ldr	r1, [pc, #8]	; (6c78 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6c6e:	4801      	ldr	r0, [pc, #4]	; (6c74 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6c70:	6088      	str	r0, [r1, #8]
    6c72:	4770      	bx	lr
    6c74:	000076ec 	.word	0x000076ec
    6c78:	200000f0 	.word	0x200000f0

00006c7c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6c7c:	4902      	ldr	r1, [pc, #8]	; (6c88 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    6c7e:	6008      	str	r0, [r1, #0]
    6c80:	6889      	ldr	r1, [r1, #8]
    6c82:	6809      	ldr	r1, [r1, #0]
    6c84:	4708      	bx	r1
    6c86:	0000      	.short	0x0000
    6c88:	200000f0 	.word	0x200000f0

00006c8c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6c8c:	4808      	ldr	r0, [pc, #32]	; (6cb0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6c8e:	b510      	push	{r4, lr}
    6c90:	7801      	ldrb	r1, [r0, #0]
    6c92:	b111      	cbz	r1, 6c9a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6c94:	240c      	movs	r4, #12
    6c96:	4620      	mov	r0, r4
    6c98:	bd10      	pop	{r4, pc}
    6c9a:	2400      	movs	r4, #0
    6c9c:	6004      	str	r4, [r0, #0]
    6c9e:	6044      	str	r4, [r0, #4]
    6ca0:	6084      	str	r4, [r0, #8]
    6ca2:	60c4      	str	r4, [r0, #12]
    6ca4:	f004 fb4c 	bl	b340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6ca8:	f004 f98e 	bl	afc8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6cac:	e7f3      	b.n	6c96 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    6cae:	0000      	.short	0x0000
    6cb0:	20000ed4 	.word	0x20000ed4

00006cb4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6cb4:	4904      	ldr	r1, [pc, #16]	; (6cc8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6cb6:	b510      	push	{r4, lr}
    6cb8:	7809      	ldrb	r1, [r1, #0]
    6cba:	2901      	cmp	r1, #1
    6cbc:	d101      	bne.n	6cc2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    6cbe:	f000 fb65 	bl	738c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    6cc2:	2000      	movs	r0, #0
    6cc4:	bd10      	pop	{r4, pc}
    6cc6:	0000      	.short	0x0000
    6cc8:	20000ed4 	.word	0x20000ed4

00006ccc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6ccc:	4902      	ldr	r1, [pc, #8]	; (6cd8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6cce:	4801      	ldr	r0, [pc, #4]	; (6cd4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6cd0:	6008      	str	r0, [r1, #0]
    6cd2:	4770      	bx	lr
    6cd4:	000074d9 	.word	0x000074d9
    6cd8:	200000fc 	.word	0x200000fc
    6cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ce0:	000f      	movs	r7, r1
    6ce2:	4604      	mov	r4, r0
    6ce4:	d023      	beq.n	6d2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6ce6:	f104 0020 	add.w	r0, r4, #32
    6cea:	4605      	mov	r5, r0
    6cec:	f007 fe84 	bl	e9f8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6cf0:	b9b0      	cbnz	r0, 6d20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6cf2:	78a0      	ldrb	r0, [r4, #2]
    6cf4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6cf8:	b350      	cbz	r0, 6d50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    6cfa:	4628      	mov	r0, r5
    6cfc:	f007 fe53 	bl	e9a6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6d00:	4606      	mov	r6, r0
    6d02:	4628      	mov	r0, r5
    6d04:	f007 fe78 	bl	e9f8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6d08:	1a30      	subs	r0, r6, r0
    6d0a:	b2c0      	uxtb	r0, r0
    6d0c:	f007 fec9 	bl	eaa2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6d10:	4601      	mov	r1, r0
    6d12:	4835      	ldr	r0, [pc, #212]	; (6de8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6d14:	6842      	ldr	r2, [r0, #4]
    6d16:	4411      	add	r1, r2
    6d18:	6041      	str	r1, [r0, #4]
    6d1a:	4628      	mov	r0, r5
    6d1c:	f007 fe8a 	bl	ea34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6d20:	4628      	mov	r0, r5
    6d22:	f007 fe4c 	bl	e9be <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6d26:	4601      	mov	r1, r0
    6d28:	4620      	mov	r0, r4
    6d2a:	f007 fe0b 	bl	e944 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    6d2e:	4d2f      	ldr	r5, [pc, #188]	; (6dec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6d30:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
    6d34:	2100      	movs	r1, #0
    6d36:	6868      	ldr	r0, [r5, #4]
    6d38:	8001      	strh	r1, [r0, #0]
    6d3a:	f007 fe19 	bl	e970 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    6d3e:	8860      	ldrh	r0, [r4, #2]
    6d40:	2813      	cmp	r0, #19
    6d42:	d013      	beq.n	6d6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6d44:	dc09      	bgt.n	6d5a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6d46:	2810      	cmp	r0, #16
    6d48:	d036      	beq.n	6db8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    6d4a:	2812      	cmp	r0, #18
    6d4c:	d109      	bne.n	6d62 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6d4e:	e031      	b.n	6db4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6d50:	4620      	mov	r0, r4
    6d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d56:	f000 bb19 	b.w	738c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    6d5a:	2815      	cmp	r0, #21
    6d5c:	d00f      	beq.n	6d7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6d5e:	281d      	cmp	r0, #29
    6d60:	d00d      	beq.n	6d7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6d62:	f240 616f 	movw	r1, #1647	; 0x66f
    6d66:	202d      	movs	r0, #45	; 0x2d
    6d68:	f7fd fbe8 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d6c:	2100      	movs	r1, #0
    6d6e:	6868      	ldr	r0, [r5, #4]
    6d70:	f007 fa98 	bl	e2a4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6d74:	2101      	movs	r1, #1
    6d76:	6868      	ldr	r0, [r5, #4]
    6d78:	f007 fdfa 	bl	e970 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    6d7c:	e020      	b.n	6dc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6d7e:	2101      	movs	r1, #1
    6d80:	6868      	ldr	r0, [r5, #4]
    6d82:	f007 fa8f 	bl	e2a4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6d86:	2101      	movs	r1, #1
    6d88:	6868      	ldr	r0, [r5, #4]
    6d8a:	f007 fdf1 	bl	e970 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    6d8e:	b136      	cbz	r6, 6d9e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6d90:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6d94:	6868      	ldr	r0, [r5, #4]
    6d96:	f007 faa0 	bl	e2da <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6d9a:	2101      	movs	r1, #1
    6d9c:	e006      	b.n	6dac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    6d9e:	f104 0148 	add.w	r1, r4, #72	; 0x48
    6da2:	6868      	ldr	r0, [r5, #4]
    6da4:	f007 fa99 	bl	e2da <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6da8:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
    6dac:	6868      	ldr	r0, [r5, #4]
    6dae:	f007 fa9a 	bl	e2e6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6db2:	e005      	b.n	6dc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6db4:	2106      	movs	r1, #6
    6db6:	e000      	b.n	6dba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6db8:	2102      	movs	r1, #2
    6dba:	6868      	ldr	r0, [r5, #4]
    6dbc:	f007 fa72 	bl	e2a4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6dc0:	4620      	mov	r0, r4
    6dc2:	f000 fc6b 	bl	769c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69c>
    6dc6:	8860      	ldrh	r0, [r4, #2]
    6dc8:	281d      	cmp	r0, #29
    6dca:	d006      	beq.n	6dda <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6dcc:	2815      	cmp	r0, #21
    6dce:	d004      	beq.n	6dda <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6dd0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    6dd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6dd4:	6868      	ldr	r0, [r5, #4]
    6dd6:	f007 fa55 	bl	e284 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    6dda:	4639      	mov	r1, r7
    6ddc:	4620      	mov	r0, r4
    6dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6de2:	f000 b9d9 	b.w	7198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    6de6:	0000      	.short	0x0000
    6de8:	20000ed4 	.word	0x20000ed4
    6dec:	200000f0 	.word	0x200000f0
    6df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6df4:	4d28      	ldr	r5, [pc, #160]	; (6e98 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    6df6:	4680      	mov	r8, r0
    6df8:	7828      	ldrb	r0, [r5, #0]
    6dfa:	2802      	cmp	r0, #2
    6dfc:	d005      	beq.n	6e0a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6dfe:	7828      	ldrb	r0, [r5, #0]
    6e00:	2803      	cmp	r0, #3
    6e02:	d002      	beq.n	6e0a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6e04:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    6e08:	e01f      	b.n	6e4a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    6e0a:	4c24      	ldr	r4, [pc, #144]	; (6e9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    6e0c:	6820      	ldr	r0, [r4, #0]
    6e0e:	7b01      	ldrb	r1, [r0, #12]
    6e10:	b109      	cbz	r1, 6e16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6e12:	f007 fda2 	bl	e95a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11a>
    6e16:	6860      	ldr	r0, [r4, #4]
    6e18:	2700      	movs	r7, #0
    6e1a:	f1b8 0f00 	cmp.w	r8, #0
    6e1e:	7800      	ldrb	r0, [r0, #0]
    6e20:	f000 060f 	and.w	r6, r0, #15
    6e24:	d01f      	beq.n	6e66 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6e26:	f004 fc93 	bl	b750 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    6e2a:	b1e0      	cbz	r0, 6e66 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6e2c:	4639      	mov	r1, r7
    6e2e:	6860      	ldr	r0, [r4, #4]
    6e30:	f007 f9ee 	bl	e210 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6e34:	b1b8      	cbz	r0, 6e66 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6e36:	782a      	ldrb	r2, [r5, #0]
    6e38:	6820      	ldr	r0, [r4, #0]
    6e3a:	4631      	mov	r1, r6
    6e3c:	2a02      	cmp	r2, #2
    6e3e:	d007      	beq.n	6e50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6e40:	782a      	ldrb	r2, [r5, #0]
    6e42:	2a03      	cmp	r2, #3
    6e44:	d004      	beq.n	6e50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6e46:	f640 4159 	movw	r1, #3161	; 0xc59
    6e4a:	202d      	movs	r0, #45	; 0x2d
    6e4c:	f7fd fb76 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e50:	68a2      	ldr	r2, [r4, #8]
    6e52:	782b      	ldrb	r3, [r5, #0]
    6e54:	6952      	ldr	r2, [r2, #20]
    6e56:	f06f 0607 	mvn.w	r6, #7
    6e5a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6e5e:	58d2      	ldr	r2, [r2, r3]
    6e60:	4790      	blx	r2
    6e62:	4606      	mov	r6, r0
    6e64:	e000      	b.n	6e68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    6e66:	2601      	movs	r6, #1
    6e68:	7ba8      	ldrb	r0, [r5, #14]
    6e6a:	b118      	cbz	r0, 6e74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    6e6c:	f004 fa68 	bl	b340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6e70:	f004 f8aa 	bl	afc8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6e74:	2e00      	cmp	r6, #0
    6e76:	d00d      	beq.n	6e94 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    6e78:	6820      	ldr	r0, [r4, #0]
    6e7a:	f007 fe25 	bl	eac8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6e7e:	b120      	cbz	r0, 6e8a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    6e80:	68a0      	ldr	r0, [r4, #8]
    6e82:	6880      	ldr	r0, [r0, #8]
    6e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e88:	4700      	bx	r0
    6e8a:	6820      	ldr	r0, [r4, #0]
    6e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e90:	f000 ba7c 	b.w	738c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    6e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e98:	20000ed4 	.word	0x20000ed4
    6e9c:	200000f0 	.word	0x200000f0
    6ea0:	b510      	push	{r4, lr}
    6ea2:	2903      	cmp	r1, #3
    6ea4:	d002      	beq.n	6eac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    6ea6:	2905      	cmp	r1, #5
    6ea8:	d10a      	bne.n	6ec0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    6eaa:	e002      	b.n	6eb2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    6eac:	f000 fb48 	bl	7540 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x540>
    6eb0:	e003      	b.n	6eba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    6eb2:	4904      	ldr	r1, [pc, #16]	; (6ec4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    6eb4:	6809      	ldr	r1, [r1, #0]
    6eb6:	b109      	cbz	r1, 6ebc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    6eb8:	4788      	blx	r1
    6eba:	b108      	cbz	r0, 6ec0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    6ebc:	2000      	movs	r0, #0
    6ebe:	bd10      	pop	{r4, pc}
    6ec0:	2001      	movs	r0, #1
    6ec2:	bd10      	pop	{r4, pc}
    6ec4:	200000fc 	.word	0x200000fc
    6ec8:	4a09      	ldr	r2, [pc, #36]	; (6ef0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    6eca:	0003      	movs	r3, r0
    6ecc:	6810      	ldr	r0, [r2, #0]
    6ece:	d001      	beq.n	6ed4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6ed0:	f000 ba5c 	b.w	738c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    6ed4:	2900      	cmp	r1, #0
    6ed6:	d009      	beq.n	6eec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6ed8:	6891      	ldr	r1, [r2, #8]
    6eda:	4a06      	ldr	r2, [pc, #24]	; (6ef4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    6edc:	6909      	ldr	r1, [r1, #16]
    6ede:	7812      	ldrb	r2, [r2, #0]
    6ee0:	f06f 030f 	mvn.w	r3, #15
    6ee4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6ee8:	5889      	ldr	r1, [r1, r2]
    6eea:	4708      	bx	r1
    6eec:	4770      	bx	lr
    6eee:	0000      	.short	0x0000
    6ef0:	200000f0 	.word	0x200000f0
    6ef4:	20000ed4 	.word	0x20000ed4
    6ef8:	b570      	push	{r4, r5, r6, lr}
    6efa:	4604      	mov	r4, r0
    6efc:	8840      	ldrh	r0, [r0, #2]
    6efe:	2500      	movs	r5, #0
    6f00:	2810      	cmp	r0, #16
    6f02:	d014      	beq.n	6f2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    6f04:	4e14      	ldr	r6, [pc, #80]	; (6f58 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    6f06:	7bb0      	ldrb	r0, [r6, #14]
    6f08:	b120      	cbz	r0, 6f14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    6f0a:	f004 f87d 	bl	b008 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6f0e:	2040      	movs	r0, #64	; 0x40
    6f10:	f004 fa26 	bl	b360 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6f14:	4811      	ldr	r0, [pc, #68]	; (6f5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6f16:	6840      	ldr	r0, [r0, #4]
    6f18:	f004 fcde 	bl	b8d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6f1c:	78a0      	ldrb	r0, [r4, #2]
    6f1e:	0740      	lsls	r0, r0, #29
    6f20:	d413      	bmi.n	6f4a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    6f22:	7be0      	ldrb	r0, [r4, #15]
    6f24:	2801      	cmp	r0, #1
    6f26:	d008      	beq.n	6f3a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    6f28:	2803      	cmp	r0, #3
    6f2a:	d006      	beq.n	6f3a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    6f2c:	e006      	b.n	6f3c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    6f2e:	4620      	mov	r0, r4
    6f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f34:	2101      	movs	r1, #1
    6f36:	f7ff bed1 	b.w	6cdc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6f3a:	2510      	movs	r5, #16
    6f3c:	2100      	movs	r1, #0
    6f3e:	f045 020e 	orr.w	r2, r5, #14
    6f42:	7923      	ldrb	r3, [r4, #4]
    6f44:	4608      	mov	r0, r1
    6f46:	f004 fd51 	bl	b9ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6f4a:	2000      	movs	r0, #0
    6f4c:	f004 fb5e 	bl	b60c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6f50:	2002      	movs	r0, #2
    6f52:	7030      	strb	r0, [r6, #0]
    6f54:	bd70      	pop	{r4, r5, r6, pc}
    6f56:	0000      	.short	0x0000
    6f58:	20000ed4 	.word	0x20000ed4
    6f5c:	200000f0 	.word	0x200000f0
    6f60:	b510      	push	{r4, lr}
    6f62:	4c12      	ldr	r4, [pc, #72]	; (6fac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    6f64:	6820      	ldr	r0, [r4, #0]
    6f66:	f000 f825 	bl	6fb4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    6f6a:	6820      	ldr	r0, [r4, #0]
    6f6c:	f007 fdac 	bl	eac8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6f70:	2800      	cmp	r0, #0
    6f72:	6820      	ldr	r0, [r4, #0]
    6f74:	d00b      	beq.n	6f8e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    6f76:	490e      	ldr	r1, [pc, #56]	; (6fb0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6f78:	780a      	ldrb	r2, [r1, #0]
    6f7a:	2a02      	cmp	r2, #2
    6f7c:	d00b      	beq.n	6f96 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    6f7e:	780a      	ldrb	r2, [r1, #0]
    6f80:	2a03      	cmp	r2, #3
    6f82:	d008      	beq.n	6f96 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    6f84:	f640 3194 	movw	r1, #2964	; 0xb94
    6f88:	202d      	movs	r0, #45	; 0x2d
    6f8a:	f7fd fad7 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6f92:	f000 b9fb 	b.w	738c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    6f96:	68a2      	ldr	r2, [r4, #8]
    6f98:	7809      	ldrb	r1, [r1, #0]
    6f9a:	68d2      	ldr	r2, [r2, #12]
    6f9c:	f06f 0307 	mvn.w	r3, #7
    6fa0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6fa4:	5851      	ldr	r1, [r2, r1]
    6fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6faa:	4708      	bx	r1
    6fac:	200000f0 	.word	0x200000f0
    6fb0:	20000ed4 	.word	0x20000ed4
    6fb4:	b510      	push	{r4, lr}
    6fb6:	7b01      	ldrb	r1, [r0, #12]
    6fb8:	b109      	cbz	r1, 6fbe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    6fba:	f007 fcce 	bl	e95a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11a>
    6fbe:	4805      	ldr	r0, [pc, #20]	; (6fd4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    6fc0:	7b80      	ldrb	r0, [r0, #14]
    6fc2:	2800      	cmp	r0, #0
    6fc4:	d005      	beq.n	6fd2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    6fc6:	f004 f9bb 	bl	b340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6fce:	f003 bffb 	b.w	afc8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6fd2:	bd10      	pop	{r4, pc}
    6fd4:	20000ed4 	.word	0x20000ed4

00006fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6fdc:	4d54      	ldr	r5, [pc, #336]	; (7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    6fde:	4604      	mov	r4, r0
    6fe0:	b086      	sub	sp, #24
    6fe2:	7828      	ldrb	r0, [r5, #0]
    6fe4:	bbf0      	cbnz	r0, 7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    6fe6:	7820      	ldrb	r0, [r4, #0]
    6fe8:	28ff      	cmp	r0, #255	; 0xff
    6fea:	d044      	beq.n	7076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
    6fec:	2600      	movs	r6, #0
    6fee:	81ae      	strh	r6, [r5, #12]
    6ff0:	606e      	str	r6, [r5, #4]
    6ff2:	706e      	strb	r6, [r5, #1]
    6ff4:	70ae      	strb	r6, [r5, #2]
    6ff6:	f884 6059 	strb.w	r6, [r4, #89]	; 0x59
    6ffa:	4630      	mov	r0, r6
    6ffc:	f004 fb6e 	bl	b6dc <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    7000:	2214      	movs	r2, #20
    7002:	494c      	ldr	r1, [pc, #304]	; (7134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    7004:	4668      	mov	r0, sp
    7006:	f005 fc9c 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    700a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 7138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>
    700e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    7012:	6840      	ldr	r0, [r0, #4]
    7014:	9003      	str	r0, [sp, #12]
    7016:	4668      	mov	r0, sp
    7018:	f004 facc 	bl	b5b4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    701c:	f004 fbce 	bl	b7bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7020:	f004 f98e 	bl	b340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7024:	f003 ffd0 	bl	afc8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7028:	4842      	ldr	r0, [pc, #264]	; (7134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    702a:	1f40      	subs	r0, r0, #5
    702c:	f004 fd30 	bl	ba90 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7030:	4840      	ldr	r0, [pc, #256]	; (7134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    7032:	3808      	subs	r0, #8
    7034:	f004 fd38 	bl	baa8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7038:	f104 0020 	add.w	r0, r4, #32
    703c:	4607      	mov	r7, r0
    703e:	f007 fcf9 	bl	ea34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7042:	4638      	mov	r0, r7
    7044:	f007 fcbb 	bl	e9be <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7048:	4601      	mov	r1, r0
    704a:	4620      	mov	r0, r4
    704c:	f007 fc7a 	bl	e944 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    7050:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7054:	f004 fc3a 	bl	b8cc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7058:	7921      	ldrb	r1, [r4, #4]
    705a:	2000      	movs	r0, #0
    705c:	f004 fa2e 	bl	b4bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7060:	60a8      	str	r0, [r5, #8]
    7062:	e000      	b.n	7066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
    7064:	e007      	b.n	7076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
    7066:	b150      	cbz	r0, 707e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
    7068:	210f      	movs	r1, #15
    706a:	2005      	movs	r0, #5
    706c:	f004 f98c 	bl	b388 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    7070:	7ea0      	ldrb	r0, [r4, #26]
    7072:	b960      	cbnz	r0, 708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
    7074:	e006      	b.n	7084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>
    7076:	200c      	movs	r0, #12
    7078:	b006      	add	sp, #24
    707a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    707e:	2001      	movs	r0, #1
    7080:	7028      	strb	r0, [r5, #0]
    7082:	e052      	b.n	712a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12a>
    7084:	7e20      	ldrb	r0, [r4, #24]
    7086:	b910      	cbnz	r0, 708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
    7088:	78a0      	ldrb	r0, [r4, #2]
    708a:	0740      	lsls	r0, r0, #29
    708c:	d52b      	bpl.n	70e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    708e:	f005 fae3 	bl	c658 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7092:	4682      	mov	sl, r0
    7094:	4651      	mov	r1, sl
    7096:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    7098:	f7fa fe3c 	bl	1d14 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    709c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 713c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    70a0:	4607      	mov	r7, r0
    70a2:	fb90 f1f9 	sdiv	r1, r0, r9
    70a6:	fb09 7011 	mls	r0, r9, r1, r7
    70aa:	4241      	negs	r1, r0
    70ac:	4650      	mov	r0, sl
    70ae:	f7fa fdfb 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    70b2:	63e0      	str	r0, [r4, #60]	; 0x3c
    70b4:	fb97 f0f9 	sdiv	r0, r7, r9
    70b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    70ba:	4408      	add	r0, r1
    70bc:	63a0      	str	r0, [r4, #56]	; 0x38
    70be:	f7fe ff3f 	bl	5f40 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    70c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    70c4:	4288      	cmp	r0, r1
    70c6:	d80e      	bhi.n	70e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    70c8:	e9c4 6a0e 	strd	r6, sl, [r4, #56]	; 0x38
    70cc:	2101      	movs	r1, #1
    70ce:	4620      	mov	r0, r4
    70d0:	f007 fbfc 	bl	e8cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    70d4:	78a0      	ldrb	r0, [r4, #2]
    70d6:	0740      	lsls	r0, r0, #29
    70d8:	d505      	bpl.n	70e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    70da:	7e20      	ldrb	r0, [r4, #24]
    70dc:	b118      	cbz	r0, 70e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    70de:	2101      	movs	r1, #1
    70e0:	4620      	mov	r0, r4
    70e2:	f000 fa67 	bl	75b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b4>
    70e6:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    70ea:	f104 0041 	add.w	r0, r4, #65	; 0x41
    70ee:	f004 fcc3 	bl	ba78 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    70f2:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
    70f6:	b130      	cbz	r0, 7106 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x106>
    70f8:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
    70fc:	86a0      	strh	r0, [r4, #52]	; 0x34
    70fe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7100:	62e0      	str	r0, [r4, #44]	; 0x2c
    7102:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
    7106:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
    710a:	b130      	cbz	r0, 711a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11a>
    710c:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    7110:	86e0      	strh	r0, [r4, #54]	; 0x36
    7112:	6e20      	ldr	r0, [r4, #96]	; 0x60
    7114:	6320      	str	r0, [r4, #48]	; 0x30
    7116:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
    711a:	f7fe ff77 	bl	600c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    711e:	2103      	movs	r1, #3
    7120:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7124:	f006 fd07 	bl	db36 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7128:	73a8      	strb	r0, [r5, #14]
    712a:	2000      	movs	r0, #0
    712c:	e7a4      	b.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    712e:	0000      	.short	0x0000
    7130:	20000ed4 	.word	0x20000ed4
    7134:	000076c8 	.word	0x000076c8
    7138:	200000f0 	.word	0x200000f0
    713c:	000f4240 	.word	0x000f4240
    7140:	b510      	push	{r4, lr}
    7142:	4604      	mov	r4, r0
    7144:	f7ff ff48 	bl	6fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7148:	2800      	cmp	r0, #0
    714a:	d108      	bne.n	715e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e>
    714c:	4804      	ldr	r0, [pc, #16]	; (7160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>)
    714e:	7800      	ldrb	r0, [r0, #0]
    7150:	2801      	cmp	r0, #1
    7152:	d003      	beq.n	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    7154:	2100      	movs	r1, #0
    7156:	4620      	mov	r0, r4
    7158:	f7ff fdc0 	bl	6cdc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    715c:	2000      	movs	r0, #0
    715e:	bd10      	pop	{r4, pc}
    7160:	20000ed4 	.word	0x20000ed4
    7164:	480a      	ldr	r0, [pc, #40]	; (7190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    7166:	b510      	push	{r4, lr}
    7168:	490a      	ldr	r1, [pc, #40]	; (7194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>)
    716a:	6804      	ldr	r4, [r0, #0]
    716c:	7808      	ldrb	r0, [r1, #0]
    716e:	2800      	cmp	r0, #0
    7170:	d00d      	beq.n	718e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18e>
    7172:	7808      	ldrb	r0, [r1, #0]
    7174:	2802      	cmp	r0, #2
    7176:	d002      	beq.n	717e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e>
    7178:	7808      	ldrb	r0, [r1, #0]
    717a:	2803      	cmp	r0, #3
    717c:	d102      	bne.n	7184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>
    717e:	4620      	mov	r0, r4
    7180:	f7ff ff18 	bl	6fb4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    7184:	4620      	mov	r0, r4
    7186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    718a:	f000 b8ff 	b.w	738c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>
    718e:	bd10      	pop	{r4, pc}
    7190:	200000f0 	.word	0x200000f0
    7194:	20000ed4 	.word	0x20000ed4
    7198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    719c:	4604      	mov	r4, r0
    719e:	4824      	ldr	r0, [pc, #144]	; (7230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>)
    71a0:	460e      	mov	r6, r1
    71a2:	6840      	ldr	r0, [r0, #4]
    71a4:	f004 fb98 	bl	b8d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    71a8:	4d22      	ldr	r5, [pc, #136]	; (7234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>)
    71aa:	2004      	movs	r0, #4
    71ac:	7028      	strb	r0, [r5, #0]
    71ae:	b1f6      	cbz	r6, 71ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ee>
    71b0:	8860      	ldrh	r0, [r4, #2]
    71b2:	2810      	cmp	r0, #16
    71b4:	d024      	beq.n	7200 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x200>
    71b6:	f104 0020 	add.w	r0, r4, #32
    71ba:	4680      	mov	r8, r0
    71bc:	68ae      	ldr	r6, [r5, #8]
    71be:	f007 fbf2 	bl	e9a6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    71c2:	4607      	mov	r7, r0
    71c4:	4640      	mov	r0, r8
    71c6:	f007 fc17 	bl	e9f8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    71ca:	1a38      	subs	r0, r7, r0
    71cc:	1e40      	subs	r0, r0, #1
    71ce:	b2c0      	uxtb	r0, r0
    71d0:	8861      	ldrh	r1, [r4, #2]
    71d2:	2228      	movs	r2, #40	; 0x28
    71d4:	f000 fab6 	bl	7744 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    71d8:	1981      	adds	r1, r0, r6
    71da:	78a0      	ldrb	r0, [r4, #2]
    71dc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    71e0:	b108      	cbz	r0, 71e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e6>
    71e2:	6868      	ldr	r0, [r5, #4]
    71e4:	4401      	add	r1, r0
    71e6:	7922      	ldrb	r2, [r4, #4]
    71e8:	2000      	movs	r0, #0
    71ea:	f004 fb83 	bl	b8f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    71ee:	8860      	ldrh	r0, [r4, #2]
    71f0:	2813      	cmp	r0, #19
    71f2:	d013      	beq.n	721c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    71f4:	dc09      	bgt.n	720a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20a>
    71f6:	2810      	cmp	r0, #16
    71f8:	d018      	beq.n	722c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>
    71fa:	2812      	cmp	r0, #18
    71fc:	d109      	bne.n	7212 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x212>
    71fe:	e00d      	b.n	721c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    7200:	7921      	ldrb	r1, [r4, #4]
    7202:	2000      	movs	r0, #0
    7204:	f004 f90e 	bl	b424 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7208:	e7f1      	b.n	71ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ee>
    720a:	2815      	cmp	r0, #21
    720c:	d006      	beq.n	721c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    720e:	281d      	cmp	r0, #29
    7210:	d004      	beq.n	721c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    7212:	f640 510a 	movw	r1, #3338	; 0xd0a
    7216:	202d      	movs	r0, #45	; 0x2d
    7218:	f7fd f990 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    721c:	7923      	ldrb	r3, [r4, #4]
    721e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7222:	2201      	movs	r2, #1
    7224:	4611      	mov	r1, r2
    7226:	2000      	movs	r0, #0
    7228:	f004 bbe0 	b.w	b9ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7230:	200000f0 	.word	0x200000f0
    7234:	20000ed4 	.word	0x20000ed4
    7238:	b510      	push	{r4, lr}
    723a:	4604      	mov	r4, r0
    723c:	7800      	ldrb	r0, [r0, #0]
    723e:	460b      	mov	r3, r1
    7240:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    7244:	29ff      	cmp	r1, #255	; 0xff
    7246:	d010      	beq.n	726a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26a>
    7248:	f104 029f 	add.w	r2, r4, #159	; 0x9f
    724c:	1e51      	subs	r1, r2, #1
    724e:	4618      	mov	r0, r3
    7250:	f7fe fdf4 	bl	5e3c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7254:	b130      	cbz	r0, 7264 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x264>
    7256:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    725a:	f040 0002 	orr.w	r0, r0, #2
    725e:	f884 009e 	strb.w	r0, [r4, #158]	; 0x9e
    7262:	e011      	b.n	7288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x288>
    7264:	f640 7119 	movw	r1, #3865	; 0xf19
    7268:	e01d      	b.n	72a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a6>
    726a:	4810      	ldr	r0, [pc, #64]	; (72ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ac>)
    726c:	6840      	ldr	r0, [r0, #4]
    726e:	7801      	ldrb	r1, [r0, #0]
    7270:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7274:	f884 109e 	strb.w	r1, [r4, #158]	; 0x9e
    7278:	f8d0 1003 	ldr.w	r1, [r0, #3]
    727c:	f8c4 109f 	str.w	r1, [r4, #159]	; 0x9f
    7280:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7284:	f8a4 00a3 	strh.w	r0, [r4, #163]	; 0xa3
    7288:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    728c:	287f      	cmp	r0, #127	; 0x7f
    728e:	d008      	beq.n	72a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a2>
    7290:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    7294:	207f      	movs	r0, #127	; 0x7f
    7296:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    729a:	3486      	adds	r4, #134	; 0x86
    729c:	2001      	movs	r0, #1
    729e:	75a0      	strb	r0, [r4, #22]
    72a0:	bd10      	pop	{r4, pc}
    72a2:	f640 51bb 	movw	r1, #3515	; 0xdbb
    72a6:	202d      	movs	r0, #45	; 0x2d
    72a8:	f7fd f948 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72ac:	200000f0 	.word	0x200000f0
    72b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72b4:	4604      	mov	r4, r0
    72b6:	8840      	ldrh	r0, [r0, #2]
    72b8:	4617      	mov	r7, r2
    72ba:	4688      	mov	r8, r1
    72bc:	2903      	cmp	r1, #3
    72be:	d006      	beq.n	72ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ce>
    72c0:	f000 0501 	and.w	r5, r0, #1
    72c4:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    72c8:	b118      	cbz	r0, 72d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    72ca:	2001      	movs	r0, #1
    72cc:	e002      	b.n	72d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d4>
    72ce:	f3c0 0540 	ubfx	r5, r0, #1, #1
    72d2:	2000      	movs	r0, #0
    72d4:	4681      	mov	r9, r0
    72d6:	f004 f851 	bl	b37c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    72da:	4606      	mov	r6, r0
    72dc:	f1b8 0f03 	cmp.w	r8, #3
    72e0:	d025      	beq.n	732e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32e>
    72e2:	2001      	movs	r0, #1
    72e4:	4680      	mov	r8, r0
    72e6:	ea35 0509 	bics.w	r5, r5, r9
    72ea:	d046      	beq.n	737a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37a>
    72ec:	4825      	ldr	r0, [pc, #148]	; (7384 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x384>)
    72ee:	7b80      	ldrb	r0, [r0, #14]
    72f0:	b138      	cbz	r0, 7302 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x302>
    72f2:	f006 fc23 	bl	db3c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    72f6:	7038      	strb	r0, [r7, #0]
    72f8:	28ff      	cmp	r0, #255	; 0xff
    72fa:	d002      	beq.n	7302 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x302>
    72fc:	f7fe fdb8 	bl	5e70 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7300:	4306      	orrs	r6, r0
    7302:	4d21      	ldr	r5, [pc, #132]	; (7388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>)
    7304:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    7308:	6868      	ldr	r0, [r5, #4]
    730a:	7801      	ldrb	r1, [r0, #0]
    730c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7310:	4291      	cmp	r1, r2
    7312:	d106      	bne.n	7322 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x322>
    7314:	2206      	movs	r2, #6
    7316:	f104 0148 	add.w	r1, r4, #72	; 0x48
    731a:	1cc0      	adds	r0, r0, #3
    731c:	f005 faff 	bl	c91e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7320:	b138      	cbz	r0, 7332 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x332>
    7322:	2000      	movs	r0, #0
    7324:	7839      	ldrb	r1, [r7, #0]
    7326:	29ff      	cmp	r1, #255	; 0xff
    7328:	d009      	beq.n	733e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33e>
    732a:	b9b8      	cbnz	r0, 735c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35c>
    732c:	e003      	b.n	7336 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x336>
    732e:	2002      	movs	r0, #2
    7330:	e7d8      	b.n	72e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    7332:	2001      	movs	r0, #1
    7334:	e7f6      	b.n	7324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>
    7336:	7e60      	ldrb	r0, [r4, #25]
    7338:	4288      	cmp	r0, r1
    733a:	d00f      	beq.n	735c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35c>
    733c:	e008      	b.n	7350 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x350>
    733e:	b138      	cbz	r0, 7350 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x350>
    7340:	6869      	ldr	r1, [r5, #4]
    7342:	f811 0b03 	ldrb.w	r0, [r1], #3
    7346:	f3c0 1080 	ubfx	r0, r0, #6, #1
    734a:	f007 fa7e 	bl	e84a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    734e:	b128      	cbz	r0, 735c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35c>
    7350:	2000      	movs	r0, #0
    7352:	78a1      	ldrb	r1, [r4, #2]
    7354:	0749      	lsls	r1, r1, #29
    7356:	d503      	bpl.n	7360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    7358:	b990      	cbnz	r0, 7380 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x380>
    735a:	e00e      	b.n	737a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37a>
    735c:	2001      	movs	r0, #1
    735e:	e7f8      	b.n	7352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    7360:	b976      	cbnz	r6, 7380 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x380>
    7362:	7be0      	ldrb	r0, [r4, #15]
    7364:	b108      	cbz	r0, 736a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36a>
    7366:	4540      	cmp	r0, r8
    7368:	d107      	bne.n	737a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37a>
    736a:	6869      	ldr	r1, [r5, #4]
    736c:	f811 0b03 	ldrb.w	r0, [r1], #3
    7370:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7374:	f007 fa69 	bl	e84a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7378:	b110      	cbz	r0, 7380 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x380>
    737a:	2000      	movs	r0, #0
    737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7380:	2001      	movs	r0, #1
    7382:	e7fb      	b.n	737c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    7384:	20000ed4 	.word	0x20000ed4
    7388:	200000f0 	.word	0x200000f0
    738c:	b570      	push	{r4, r5, r6, lr}
    738e:	4604      	mov	r4, r0
    7390:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7392:	4d10      	ldr	r5, [pc, #64]	; (73d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d4>)
    7394:	1c40      	adds	r0, r0, #1
    7396:	62a0      	str	r0, [r4, #40]	; 0x28
    7398:	7ba8      	ldrb	r0, [r5, #14]
    739a:	2600      	movs	r6, #0
    739c:	b120      	cbz	r0, 73a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a8>
    739e:	f003 ffcf 	bl	b340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    73a2:	f003 fe11 	bl	afc8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    73a6:	73ae      	strb	r6, [r5, #14]
    73a8:	702e      	strb	r6, [r5, #0]
    73aa:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    73ae:	b108      	cbz	r0, 73b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b4>
    73b0:	2101      	movs	r1, #1
    73b2:	e00a      	b.n	73ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ca>
    73b4:	7b60      	ldrb	r0, [r4, #13]
    73b6:	b138      	cbz	r0, 73c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    73b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    73ba:	4288      	cmp	r0, r1
    73bc:	d804      	bhi.n	73c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    73be:	2101      	movs	r1, #1
    73c0:	4620      	mov	r0, r4
    73c2:	f000 f9eb 	bl	779c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    73c6:	bd70      	pop	{r4, r5, r6, pc}
    73c8:	2100      	movs	r1, #0
    73ca:	4620      	mov	r0, r4
    73cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    73d0:	f000 b9e4 	b.w	779c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    73d4:	20000ed4 	.word	0x20000ed4
    73d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    73dc:	4604      	mov	r4, r0
    73de:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    73e2:	4616      	mov	r6, r2
    73e4:	460d      	mov	r5, r1
    73e6:	f88d 0000 	strb.w	r0, [sp]
    73ea:	9800      	ldr	r0, [sp, #0]
    73ec:	9000      	str	r0, [sp, #0]
    73ee:	f89d 0000 	ldrb.w	r0, [sp]
    73f2:	b110      	cbz	r0, 73fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fa>
    73f4:	f640 31c8 	movw	r1, #3016	; 0xbc8
    73f8:	e057      	b.n	74aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4aa>
    73fa:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    73fe:	8828      	ldrh	r0, [r5, #0]
    7400:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    7404:	2b00      	cmp	r3, #0
    7406:	d162      	bne.n	74ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ce>
    7408:	6868      	ldr	r0, [r5, #4]
    740a:	f006 fbf5 	bl	dbf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    740e:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    7412:	8928      	ldrh	r0, [r5, #8]
    7414:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    7418:	8968      	ldrh	r0, [r5, #10]
    741a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    741e:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    7422:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    7426:	7e21      	ldrb	r1, [r4, #24]
    7428:	f104 0841 	add.w	r8, r4, #65	; 0x41
    742c:	2700      	movs	r7, #0
    742e:	b129      	cbz	r1, 743c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43c>
    7430:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    7434:	4641      	mov	r1, r8
    7436:	f007 f92f 	bl	e698 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    743a:	b940      	cbnz	r0, 744e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44e>
    743c:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    7440:	b170      	cbz	r0, 7460 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x460>
    7442:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    7446:	4641      	mov	r1, r8
    7448:	f007 f91d 	bl	e686 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    744c:	b140      	cbz	r0, 7460 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x460>
    744e:	f8d4 0041 	ldr.w	r0, [r4, #65]	; 0x41
    7452:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    7456:	f8b4 0045 	ldrh.w	r0, [r4, #69]	; 0x45
    745a:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    745e:	e003      	b.n	7468 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x468>
    7460:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    7464:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    7468:	481a      	ldr	r0, [pc, #104]	; (74d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d4>)
    746a:	2eff      	cmp	r6, #255	; 0xff
    746c:	6841      	ldr	r1, [r0, #4]
    746e:	7808      	ldrb	r0, [r1, #0]
    7470:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7474:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
    7478:	f104 0080 	add.w	r0, r4, #128	; 0x80
    747c:	d018      	beq.n	74b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b0>
    747e:	f851 0f03 	ldr.w	r0, [r1, #3]!
    7482:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    7486:	8888      	ldrh	r0, [r1, #4]
    7488:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    748c:	f104 0274 	add.w	r2, r4, #116	; 0x74
    7490:	1e51      	subs	r1, r2, #1
    7492:	4630      	mov	r0, r6
    7494:	f7fe fcd2 	bl	5e3c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7498:	b128      	cbz	r0, 74a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a6>
    749a:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    749e:	f040 0002 	orr.w	r0, r0, #2
    74a2:	7020      	strb	r0, [r4, #0]
    74a4:	e00c      	b.n	74c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c0>
    74a6:	f640 31e9 	movw	r1, #3049	; 0xbe9
    74aa:	202d      	movs	r0, #45	; 0x2d
    74ac:	f7fd f846 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74b0:	f851 2f03 	ldr.w	r2, [r1, #3]!
    74b4:	6762      	str	r2, [r4, #116]	; 0x74
    74b6:	8889      	ldrh	r1, [r1, #4]
    74b8:	f8a4 1078 	strh.w	r1, [r4, #120]	; 0x78
    74bc:	6007      	str	r7, [r0, #0]
    74be:	8087      	strh	r7, [r0, #4]
    74c0:	8828      	ldrh	r0, [r5, #0]
    74c2:	f7fd fc4b 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    74c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    74ca:	f006 b922 	b.w	d712 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    74ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    74d2:	0000      	.short	0x0000
    74d4:	200000f0 	.word	0x200000f0
    74d8:	b538      	push	{r3, r4, r5, lr}
    74da:	4604      	mov	r4, r0
    74dc:	20ff      	movs	r0, #255	; 0xff
    74de:	f88d 0000 	strb.w	r0, [sp]
    74e2:	2501      	movs	r5, #1
    74e4:	466a      	mov	r2, sp
    74e6:	2105      	movs	r1, #5
    74e8:	4620      	mov	r0, r4
    74ea:	f7ff fee1 	bl	72b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>
    74ee:	b1f8      	cbz	r0, 7530 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x530>
    74f0:	4a11      	ldr	r2, [pc, #68]	; (7538 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x538>)
    74f2:	69e0      	ldr	r0, [r4, #28]
    74f4:	6852      	ldr	r2, [r2, #4]
    74f6:	7c41      	ldrb	r1, [r0, #17]
    74f8:	7812      	ldrb	r2, [r2, #0]
    74fa:	f3c2 1240 	ubfx	r2, r2, #5, #1
    74fe:	4011      	ands	r1, r2
    7500:	7441      	strb	r1, [r0, #17]
    7502:	2201      	movs	r2, #1
    7504:	4620      	mov	r0, r4
    7506:	69e1      	ldr	r1, [r4, #28]
    7508:	f000 f882 	bl	7610 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x610>
    750c:	2300      	movs	r3, #0
    750e:	f89d 2000 	ldrb.w	r2, [sp]
    7512:	4620      	mov	r0, r4
    7514:	69e1      	ldr	r1, [r4, #28]
    7516:	f7ff ff5f 	bl	73d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    751a:	2001      	movs	r0, #1
    751c:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
    7520:	4a06      	ldr	r2, [pc, #24]	; (753c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x53c>)
    7522:	2100      	movs	r1, #0
    7524:	69e0      	ldr	r0, [r4, #28]
    7526:	7011      	strb	r1, [r2, #0]
    7528:	2105      	movs	r1, #5
    752a:	f000 fa43 	bl	79b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    752e:	e000      	b.n	7532 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x532>
    7530:	2500      	movs	r5, #0
    7532:	4628      	mov	r0, r5
    7534:	bd38      	pop	{r3, r4, r5, pc}
    7536:	0000      	.short	0x0000
    7538:	200000f0 	.word	0x200000f0
    753c:	20000ed4 	.word	0x20000ed4
    7540:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7542:	4604      	mov	r4, r0
    7544:	20ff      	movs	r0, #255	; 0xff
    7546:	f88d 0000 	strb.w	r0, [sp]
    754a:	2501      	movs	r5, #1
    754c:	466a      	mov	r2, sp
    754e:	2103      	movs	r1, #3
    7550:	4620      	mov	r0, r4
    7552:	f7ff fead 	bl	72b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>
    7556:	b328      	cbz	r0, 75a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>
    7558:	7b20      	ldrb	r0, [r4, #12]
    755a:	b168      	cbz	r0, 7578 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x578>
    755c:	f894 009c 	ldrb.w	r0, [r4, #156]	; 0x9c
    7560:	f88d 0004 	strb.w	r0, [sp, #4]
    7564:	9801      	ldr	r0, [sp, #4]
    7566:	9001      	str	r0, [sp, #4]
    7568:	f89d 0004 	ldrb.w	r0, [sp, #4]
    756c:	b920      	cbnz	r0, 7578 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x578>
    756e:	f89d 1000 	ldrb.w	r1, [sp]
    7572:	4620      	mov	r0, r4
    7574:	f7ff fe60 	bl	7238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    7578:	4e0c      	ldr	r6, [pc, #48]	; (75ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ac>)
    757a:	2100      	movs	r1, #0
    757c:	6870      	ldr	r0, [r6, #4]
    757e:	8001      	strh	r1, [r0, #0]
    7580:	2104      	movs	r1, #4
    7582:	f006 fe8f 	bl	e2a4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7586:	4620      	mov	r0, r4
    7588:	f000 f888 	bl	769c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69c>
    758c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    758e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7590:	6870      	ldr	r0, [r6, #4]
    7592:	f006 febe 	bl	e312 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7596:	4906      	ldr	r1, [pc, #24]	; (75b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b0>)
    7598:	2005      	movs	r0, #5
    759a:	7008      	strb	r0, [r1, #0]
    759c:	6870      	ldr	r0, [r6, #4]
    759e:	f004 f99b 	bl	b8d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    75a2:	e000      	b.n	75a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a6>
    75a4:	2500      	movs	r5, #0
    75a6:	4628      	mov	r0, r5
    75a8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    75aa:	0000      	.short	0x0000
    75ac:	200000f0 	.word	0x200000f0
    75b0:	20000ed4 	.word	0x20000ed4
    75b4:	b570      	push	{r4, r5, r6, lr}
    75b6:	4604      	mov	r4, r0
    75b8:	460e      	mov	r6, r1
    75ba:	7e40      	ldrb	r0, [r0, #25]
    75bc:	f7fe fc0c 	bl	5dd8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    75c0:	0005      	movs	r5, r0
    75c2:	d019      	beq.n	75f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f8>
    75c4:	2110      	movs	r1, #16
    75c6:	f006 fcb5 	bl	df34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    75ca:	2800      	cmp	r0, #0
    75cc:	d114      	bne.n	75f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f8>
    75ce:	2001      	movs	r0, #1
    75d0:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    75d4:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    75d8:	4632      	mov	r2, r6
    75da:	460c      	mov	r4, r1
    75dc:	4628      	mov	r0, r5
    75de:	f006 fa3c 	bl	da5a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    75e2:	4621      	mov	r1, r4
    75e4:	4c05      	ldr	r4, [pc, #20]	; (75fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>)
    75e6:	6860      	ldr	r0, [r4, #4]
    75e8:	f006 fe77 	bl	e2da <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    75ec:	6860      	ldr	r0, [r4, #4]
    75ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    75f2:	2101      	movs	r1, #1
    75f4:	f006 be77 	b.w	e2e6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    75f8:	bd70      	pop	{r4, r5, r6, pc}
    75fa:	0000      	.short	0x0000
    75fc:	200000f0 	.word	0x200000f0
    7600:	4802      	ldr	r0, [pc, #8]	; (760c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60c>)
    7602:	2101      	movs	r1, #1
    7604:	6800      	ldr	r0, [r0, #0]
    7606:	f7ff bb69 	b.w	6cdc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    760a:	0000      	.short	0x0000
    760c:	200000f0 	.word	0x200000f0
    7610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7614:	4e20      	ldr	r6, [pc, #128]	; (7698 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x698>)
    7616:	4680      	mov	r8, r0
    7618:	460c      	mov	r4, r1
    761a:	6870      	ldr	r0, [r6, #4]
    761c:	4615      	mov	r5, r2
    761e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7622:	f8c4 1012 	str.w	r1, [r4, #18]
    7626:	8881      	ldrh	r1, [r0, #4]
    7628:	82e1      	strh	r1, [r4, #22]
    762a:	7981      	ldrb	r1, [r0, #6]
    762c:	7621      	strb	r1, [r4, #24]
    762e:	8940      	ldrh	r0, [r0, #10]
    7630:	f006 fade 	bl	dbf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7634:	4607      	mov	r7, r0
    7636:	6060      	str	r0, [r4, #4]
    7638:	6870      	ldr	r0, [r6, #4]
    763a:	4639      	mov	r1, r7
    763c:	7d80      	ldrb	r0, [r0, #22]
    763e:	f006 fc74 	bl	df2a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7642:	8360      	strh	r0, [r4, #26]
    7644:	6870      	ldr	r0, [r6, #4]
    7646:	4639      	mov	r1, r7
    7648:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    764c:	f006 fc69 	bl	df22 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7650:	61e0      	str	r0, [r4, #28]
    7652:	6870      	ldr	r0, [r6, #4]
    7654:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7658:	8121      	strh	r1, [r4, #8]
    765a:	8841      	ldrh	r1, [r0, #2]
    765c:	8161      	strh	r1, [r4, #10]
    765e:	6841      	ldr	r1, [r0, #4]
    7660:	60e1      	str	r1, [r4, #12]
    7662:	7a01      	ldrb	r1, [r0, #8]
    7664:	7421      	strb	r1, [r4, #16]
    7666:	7a41      	ldrb	r1, [r0, #9]
    7668:	f001 011f 	and.w	r1, r1, #31
    766c:	f884 1020 	strb.w	r1, [r4, #32]
    7670:	7a40      	ldrb	r0, [r0, #9]
    7672:	0940      	lsrs	r0, r0, #5
    7674:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    7678:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    767c:	2101      	movs	r1, #1
    767e:	7205      	strb	r5, [r0, #8]
    7680:	7245      	strb	r5, [r0, #9]
    7682:	7281      	strb	r1, [r0, #10]
    7684:	2100      	movs	r1, #0
    7686:	3836      	subs	r0, #54	; 0x36
    7688:	f006 ff7e 	bl	e588 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    768c:	f898 000e 	ldrb.w	r0, [r8, #14]
    7690:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    7694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7698:	200000f0 	.word	0x200000f0
    769c:	b570      	push	{r4, r5, r6, lr}
    769e:	4d07      	ldr	r5, [pc, #28]	; (76bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6bc>)
    76a0:	4604      	mov	r4, r0
    76a2:	f100 0141 	add.w	r1, r0, #65	; 0x41
    76a6:	6868      	ldr	r0, [r5, #4]
    76a8:	f006 fe24 	bl	e2f4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    76ac:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    76b0:	6868      	ldr	r0, [r5, #4]
    76b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    76b6:	f006 be23 	b.w	e300 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    76ba:	0000      	.short	0x0000
    76bc:	200000f0 	.word	0x200000f0
    76c0:	d6555555 	.word	0xd6555555
    76c4:	008e89be 	.word	0x008e89be
    76c8:	00006f61 	.word	0x00006f61
    76cc:	00006df1 	.word	0x00006df1
    76d0:	00006ec9 	.word	0x00006ec9
    76d4:	00000000 	.word	0x00000000
    76d8:	00007921 	.word	0x00007921
    76dc:	00006ea1 	.word	0x00006ea1
    76e0:	00006ef9 	.word	0x00006ef9
    76e4:	0000e871 	.word	0x0000e871
    76e8:	0000e877 	.word	0x0000e877
    76ec:	00007141 	.word	0x00007141
    76f0:	00007165 	.word	0x00007165
    76f4:	00007601 	.word	0x00007601
    76f8:	000076e8 	.word	0x000076e8
    76fc:	000076e0 	.word	0x000076e0
    7700:	000076dc 	.word	0x000076dc

00007704 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7704:	b510      	push	{r4, lr}
    7706:	1e42      	subs	r2, r0, #1
    7708:	2a02      	cmp	r2, #2
    770a:	d901      	bls.n	7710 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    770c:	21ca      	movs	r1, #202	; 0xca
    770e:	e009      	b.n	7724 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7710:	1e40      	subs	r0, r0, #1
    7712:	2910      	cmp	r1, #16
    7714:	d009      	beq.n	772a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7716:	2912      	cmp	r1, #18
    7718:	d00c      	beq.n	7734 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    771a:	2913      	cmp	r1, #19
    771c:	d00a      	beq.n	7734 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    771e:	2915      	cmp	r1, #21
    7720:	d005      	beq.n	772e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7722:	21d8      	movs	r1, #216	; 0xd8
    7724:	202f      	movs	r0, #47	; 0x2f
    7726:	f7fc ff09 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    772a:	4905      	ldr	r1, [pc, #20]	; (7740 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    772c:	e004      	b.n	7738 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    772e:	4904      	ldr	r1, [pc, #16]	; (7740 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7730:	1d89      	adds	r1, r1, #6
    7732:	e001      	b.n	7738 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7734:	4902      	ldr	r1, [pc, #8]	; (7740 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7736:	1f89      	subs	r1, r1, #6
    7738:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    773c:	bd10      	pop	{r4, pc}
    773e:	0000      	.short	0x0000
    7740:	0000eabc 	.word	0x0000eabc

00007744 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7744:	1e42      	subs	r2, r0, #1
    7746:	b510      	push	{r4, lr}
    7748:	b2d2      	uxtb	r2, r2
    774a:	2a01      	cmp	r2, #1
    774c:	d903      	bls.n	7756 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    774e:	291d      	cmp	r1, #29
    7750:	d001      	beq.n	7756 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7752:	21ee      	movs	r1, #238	; 0xee
    7754:	e00d      	b.n	7772 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7756:	2913      	cmp	r1, #19
    7758:	d013      	beq.n	7782 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    775a:	dc04      	bgt.n	7766 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    775c:	2910      	cmp	r1, #16
    775e:	d00b      	beq.n	7778 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7760:	2912      	cmp	r1, #18
    7762:	d104      	bne.n	776e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7764:	e00d      	b.n	7782 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7766:	2915      	cmp	r1, #21
    7768:	d008      	beq.n	777c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    776a:	291d      	cmp	r1, #29
    776c:	d00e      	beq.n	778c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    776e:	f44f 7181 	mov.w	r1, #258	; 0x102
    7772:	202f      	movs	r0, #47	; 0x2f
    7774:	f7fc fee2 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7778:	4807      	ldr	r0, [pc, #28]	; (7798 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    777a:	e004      	b.n	7786 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    777c:	4806      	ldr	r0, [pc, #24]	; (7798 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    777e:	3008      	adds	r0, #8
    7780:	e001      	b.n	7786 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7782:	4805      	ldr	r0, [pc, #20]	; (7798 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7784:	1d00      	adds	r0, r0, #4
    7786:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    778a:	bd10      	pop	{r4, pc}
    778c:	f240 315a 	movw	r1, #858	; 0x35a
    7790:	fb10 f001 	smulbb	r0, r0, r1
    7794:	bd10      	pop	{r4, pc}
    7796:	0000      	.short	0x0000
    7798:	0000eaaa 	.word	0x0000eaaa

0000779c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    779c:	b510      	push	{r4, lr}
    779e:	b131      	cbz	r1, 77ae <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    77a0:	2901      	cmp	r1, #1
    77a2:	d008      	beq.n	77b6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    77a4:	f240 71c1 	movw	r1, #1985	; 0x7c1
    77a8:	2030      	movs	r0, #48	; 0x30
    77aa:	f7fc fec7 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77b2:	f000 bab1 	b.w	7d18 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    77b6:	2100      	movs	r1, #0
    77b8:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    77bc:	f007 fac7 	bl	ed4e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    77c0:	4802      	ldr	r0, [pc, #8]	; (77cc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x30>)
    77c2:	7940      	ldrb	r0, [r0, #5]
    77c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77c8:	f7fc bd08 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    77cc:	20000100 	.word	0x20000100

000077d0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    77d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77d4:	4604      	mov	r4, r0
    77d6:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    77da:	4615      	mov	r5, r2
    77dc:	460e      	mov	r6, r1
    77de:	2800      	cmp	r0, #0
    77e0:	d15f      	bne.n	78a2 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd2>
    77e2:	4846      	ldr	r0, [pc, #280]	; (78fc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    77e4:	f7fb fa12 	bl	2c0c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    77e8:	4607      	mov	r7, r0
    77ea:	2820      	cmp	r0, #32
    77ec:	d059      	beq.n	78a2 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd2>
    77ee:	7821      	ldrb	r1, [r4, #0]
    77f0:	f7fe fdd0 	bl	6394 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I>
    77f4:	2234      	movs	r2, #52	; 0x34
    77f6:	2100      	movs	r1, #0
    77f8:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    77fc:	f005 f91b 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7800:	f884 70a8 	strb.w	r7, [r4, #168]	; 0xa8
    7804:	2703      	movs	r7, #3
    7806:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    780a:	f884 70b8 	strb.w	r7, [r4, #184]	; 0xb8
    780e:	b15e      	cbz	r6, 7828 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x58>
    7810:	2101      	movs	r1, #1
    7812:	f506 708e 	add.w	r0, r6, #284	; 0x11c
    7816:	f7fc ff3d 	bl	4694 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    781a:	f896 011c 	ldrb.w	r0, [r6, #284]	; 0x11c
    781e:	f000 0007 	and.w	r0, r0, #7
    7822:	1c40      	adds	r0, r0, #1
    7824:	f886 011c 	strb.w	r0, [r6, #284]	; 0x11c
    7828:	4620      	mov	r0, r4
    782a:	f007 faab 	bl	ed84 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    782e:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    7832:	f884 70c6 	strb.w	r7, [r4, #198]	; 0xc6
    7836:	2701      	movs	r7, #1
    7838:	f884 70c7 	strb.w	r7, [r4, #199]	; 0xc7
    783c:	2600      	movs	r6, #0
    783e:	f804 6fbc 	strb.w	r6, [r4, #188]!
    7842:	f7fa fb87 	bl	1f54 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7846:	8921      	ldrh	r1, [r4, #8]
    7848:	3cbc      	subs	r4, #188	; 0xbc
    784a:	4288      	cmp	r0, r1
    784c:	d800      	bhi.n	7850 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x80>
    784e:	4608      	mov	r0, r1
    7850:	f200 60c3 	addw	r0, r0, #1731	; 0x6c3
    7854:	fa1f f880 	uxth.w	r8, r0
    7858:	4620      	mov	r0, r4
    785a:	f006 ffa7 	bl	e7ac <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    785e:	b318      	cbz	r0, 78a8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd8>
    7860:	4827      	ldr	r0, [pc, #156]	; (7900 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x130>)
    7862:	7800      	ldrb	r0, [r0, #0]
    7864:	f000 f8e2 	bl	7a2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7868:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    786c:	b281      	uxth	r1, r0
    786e:	4628      	mov	r0, r5
    7870:	f004 ff26 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7874:	4428      	add	r0, r5
    7876:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    787a:	34ac      	adds	r4, #172	; 0xac
    787c:	f004 feec 	bl	c658 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7880:	4641      	mov	r1, r8
    7882:	f7fa fa11 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7886:	61e0      	str	r0, [r4, #28]
    7888:	f804 6c03 	strb.w	r6, [r4, #-3]
    788c:	7127      	strb	r7, [r4, #4]
    788e:	2001      	movs	r0, #1
    7890:	f007 f907 	bl	eaa2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7894:	f200 100d 	addw	r0, r0, #269	; 0x10d
    7898:	1a28      	subs	r0, r5, r0
    789a:	62a6      	str	r6, [r4, #40]	; 0x28
    789c:	60a0      	str	r0, [r4, #8]
    789e:	3cac      	subs	r4, #172	; 0xac
    78a0:	e017      	b.n	78d2 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x102>
    78a2:	200c      	movs	r0, #12
    78a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78a8:	4620      	mov	r0, r4
    78aa:	f007 fa19 	bl	ece0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    78ae:	f844 0fc0 	str.w	r0, [r4, #192]!
    78b2:	f804 7c17 	strb.w	r7, [r4, #-23]
    78b6:	f004 fecf 	bl	c658 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    78ba:	4607      	mov	r7, r0
    78bc:	2000      	movs	r0, #0
    78be:	f007 fa90 	bl	ede2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    78c2:	eb00 0108 	add.w	r1, r0, r8
    78c6:	4638      	mov	r0, r7
    78c8:	f7fa f9ee 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    78cc:	6165      	str	r5, [r4, #20]
    78ce:	60a0      	str	r0, [r4, #8]
    78d0:	3cc0      	subs	r4, #192	; 0xc0
    78d2:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    78d6:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    78da:	f007 fa51 	bl	ed80 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    78de:	b138      	cbz	r0, 78f0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x120>
    78e0:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
    78e4:	2100      	movs	r1, #0
    78e6:	4620      	mov	r0, r4
    78e8:	f006 ff95 	bl	e816 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    78ec:	2000      	movs	r0, #0
    78ee:	e7d9      	b.n	78a4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd4>
    78f0:	f44f 7109 	mov.w	r1, #548	; 0x224
    78f4:	2030      	movs	r0, #48	; 0x30
    78f6:	f7fc fe21 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78fa:	0000      	.short	0x0000
    78fc:	0000ee0d 	.word	0x0000ee0d
    7900:	20000100 	.word	0x20000100

00007904 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7904:	4905      	ldr	r1, [pc, #20]	; (791c <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x18>)
    7906:	7148      	strb	r0, [r1, #5]
    7908:	2000      	movs	r0, #0
    790a:	7088      	strb	r0, [r1, #2]
    790c:	2201      	movs	r2, #1
    790e:	700a      	strb	r2, [r1, #0]
    7910:	7048      	strb	r0, [r1, #1]
    7912:	710a      	strb	r2, [r1, #4]
    7914:	70c8      	strb	r0, [r1, #3]
    7916:	f007 b922 	b.w	eb5e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    791a:	0000      	.short	0x0000
    791c:	20000100 	.word	0x20000100

00007920 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    7920:	4905      	ldr	r1, [pc, #20]	; (7938 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    7922:	788a      	ldrb	r2, [r1, #2]
    7924:	2a02      	cmp	r2, #2
    7926:	d003      	beq.n	7930 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x10>
    7928:	6a09      	ldr	r1, [r1, #32]
    792a:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    792e:	4770      	bx	lr
    7930:	6949      	ldr	r1, [r1, #20]
    7932:	f8c1 0164 	str.w	r0, [r1, #356]	; 0x164
    7936:	4770      	bx	lr
    7938:	20000100 	.word	0x20000100

0000793c <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    793c:	4901      	ldr	r1, [pc, #4]	; (7944 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    793e:	7008      	strb	r0, [r1, #0]
    7940:	4770      	bx	lr
    7942:	0000      	.short	0x0000
    7944:	20000100 	.word	0x20000100

00007948 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    7948:	4901      	ldr	r1, [pc, #4]	; (7950 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    794a:	7048      	strb	r0, [r1, #1]
    794c:	4770      	bx	lr
    794e:	0000      	.short	0x0000
    7950:	20000100 	.word	0x20000100

00007954 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    7954:	4905      	ldr	r1, [pc, #20]	; (796c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    7956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    795a:	fbb1 f1f2 	udiv	r1, r1, r2
    795e:	b510      	push	{r4, lr}
    7960:	f201 2193 	addw	r1, r1, #659	; 0x293
    7964:	f006 fe29 	bl	e5ba <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7968:	b280      	uxth	r0, r0
    796a:	bd10      	pop	{r4, pc}
    796c:	0001527d 	.word	0x0001527d

00007970 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7970:	b570      	push	{r4, r5, r6, lr}
    7972:	4c0f      	ldr	r4, [pc, #60]	; (79b0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x40>)
    7974:	f8d0 6164 	ldr.w	r6, [r0, #356]	; 0x164
    7978:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    797c:	7860      	ldrb	r0, [r4, #1]
    797e:	b120      	cbz	r0, 798a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1a>
    7980:	4632      	mov	r2, r6
    7982:	4628      	mov	r0, r5
    7984:	f006 f93e 	bl	dc04 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7988:	4605      	mov	r5, r0
    798a:	68a0      	ldr	r0, [r4, #8]
    798c:	4285      	cmp	r5, r0
    798e:	d005      	beq.n	799c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2c>
    7990:	6921      	ldr	r1, [r4, #16]
    7992:	1a28      	subs	r0, r5, r0
    7994:	4408      	add	r0, r1
    7996:	6120      	str	r0, [r4, #16]
    7998:	f7fb fa30 	bl	2dfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    799c:	60a5      	str	r5, [r4, #8]
    799e:	42ae      	cmp	r6, r5
    79a0:	d801      	bhi.n	79a6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x36>
    79a2:	78e0      	ldrb	r0, [r4, #3]
    79a4:	b108      	cbz	r0, 79aa <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    79a6:	2000      	movs	r0, #0
    79a8:	bd70      	pop	{r4, r5, r6, pc}
    79aa:	2001      	movs	r0, #1
    79ac:	bd70      	pop	{r4, r5, r6, pc}
    79ae:	0000      	.short	0x0000
    79b0:	20000100 	.word	0x20000100

000079b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    79b4:	b570      	push	{r4, r5, r6, lr}
    79b6:	4d1c      	ldr	r5, [pc, #112]	; (7a28 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>)
    79b8:	4604      	mov	r4, r0
    79ba:	2906      	cmp	r1, #6
    79bc:	d22e      	bcs.n	7a1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68>
    79be:	e8df f001 	tbb	[pc, r1]
    79c2:	0b05      	.short	0x0b05
    79c4:	250f0e03 	.word	0x250f0e03
    79c8:	2100      	movs	r1, #0
    79ca:	e000      	b.n	79ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    79cc:	2101      	movs	r1, #1
    79ce:	4620      	mov	r0, r4
    79d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79d4:	f000 ba1a 	b.w	7e0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x458>
    79d8:	2003      	movs	r0, #3
    79da:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    79de:	bd70      	pop	{r4, r5, r6, pc}
    79e0:	f003 feb0 	bl	b744 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    79e4:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    79e8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    79ec:	f008 fa65 	bl	feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    79f0:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    79f4:	1a08      	subs	r0, r1, r0
    79f6:	68a9      	ldr	r1, [r5, #8]
    79f8:	4401      	add	r1, r0
    79fa:	60a9      	str	r1, [r5, #8]
    79fc:	68e9      	ldr	r1, [r5, #12]
    79fe:	4408      	add	r0, r1
    7a00:	60e8      	str	r0, [r5, #12]
    7a02:	4620      	mov	r0, r4
    7a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a08:	f000 b926 	b.w	7c58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a4>
    7a0c:	6a28      	ldr	r0, [r5, #32]
    7a0e:	2200      	movs	r2, #0
    7a10:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    7a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a18:	f000 b9be 	b.w	7d98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e4>
    7a1c:	f240 71af 	movw	r1, #1967	; 0x7af
    7a20:	2030      	movs	r0, #48	; 0x30
    7a22:	f7fc fd8b 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a26:	0000      	.short	0x0000
    7a28:	20000100 	.word	0x20000100
    7a2c:	b510      	push	{r4, lr}
    7a2e:	280c      	cmp	r0, #12
    7a30:	d304      	bcc.n	7a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x88>
    7a32:	f240 312a 	movw	r1, #810	; 0x32a
    7a36:	2006      	movs	r0, #6
    7a38:	f7fc fd80 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a3c:	4901      	ldr	r1, [pc, #4]	; (7a44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    7a3e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7a42:	bd10      	pop	{r4, pc}
    7a44:	0000ee5e 	.word	0x0000ee5e
    7a48:	b570      	push	{r4, r5, r6, lr}
    7a4a:	4604      	mov	r4, r0
    7a4c:	2601      	movs	r6, #1
    7a4e:	f007 f999 	bl	ed84 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    7a52:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    7a56:	2000      	movs	r0, #0
    7a58:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    7a5c:	2001      	movs	r0, #1
    7a5e:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    7a62:	f894 00b0 	ldrb.w	r0, [r4, #176]	; 0xb0
    7a66:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    7a6a:	b160      	cbz	r0, 7a86 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd2>
    7a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7a70:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    7a74:	f7fa f918 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7a78:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    7a7c:	2100      	movs	r1, #0
    7a7e:	4628      	mov	r0, r5
    7a80:	f006 f99f 	bl	ddc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7a84:	e00f      	b.n	7aa6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf2>
    7a86:	4620      	mov	r0, r4
    7a88:	f006 fe70 	bl	e76c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    7a8c:	4606      	mov	r6, r0
    7a8e:	4631      	mov	r1, r6
    7a90:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    7a94:	f7fa f908 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7a98:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    7a9c:	4631      	mov	r1, r6
    7a9e:	4628      	mov	r0, r5
    7aa0:	f006 f98f 	bl	ddc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7aa4:	1c46      	adds	r6, r0, #1
    7aa6:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    7aaa:	1c41      	adds	r1, r0, #1
    7aac:	290a      	cmp	r1, #10
    7aae:	d202      	bcs.n	7ab6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7ab0:	4430      	add	r0, r6
    7ab2:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
    7ab6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    7aba:	b130      	cbz	r0, 7aca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x116>
    7abc:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    7ac0:	1c40      	adds	r0, r0, #1
    7ac2:	280a      	cmp	r0, #10
    7ac4:	d301      	bcc.n	7aca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x116>
    7ac6:	2002      	movs	r0, #2
    7ac8:	e000      	b.n	7acc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    7aca:	2003      	movs	r0, #3
    7acc:	f884 00c6 	strb.w	r0, [r4, #198]	; 0xc6
    7ad0:	2100      	movs	r1, #0
    7ad2:	4620      	mov	r0, r4
    7ad4:	f007 f90a 	bl	ecec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd8>
    7ad8:	b140      	cbz	r0, 7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x138>
    7ada:	4620      	mov	r0, r4
    7adc:	f007 f8f7 	bl	ecce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7ae0:	4809      	ldr	r0, [pc, #36]	; (7b08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x154>)
    7ae2:	7940      	ldrb	r0, [r0, #5]
    7ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ae8:	f7fc bb78 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7aec:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    7af0:	4629      	mov	r1, r5
    7af2:	f007 f945 	bl	ed80 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7af6:	2800      	cmp	r0, #0
    7af8:	d104      	bne.n	7b04 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    7afa:	f240 61e4 	movw	r1, #1764	; 0x6e4
    7afe:	2030      	movs	r0, #48	; 0x30
    7b00:	f7fc fd1c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b04:	bd70      	pop	{r4, r5, r6, pc}
    7b06:	0000      	.short	0x0000
    7b08:	20000100 	.word	0x20000100
    7b0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7b0e:	4c18      	ldr	r4, [pc, #96]	; (7b70 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
    7b10:	2001      	movs	r0, #1
    7b12:	70e0      	strb	r0, [r4, #3]
    7b14:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7b18:	e00b      	b.n	7b32 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x17e>
    7b1a:	2100      	movs	r1, #0
    7b1c:	f005 ff23 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7b20:	0006      	movs	r6, r0
    7b22:	d010      	beq.n	7b46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x192>
    7b24:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    7b28:	f7fa ff68 	bl	29fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7b2c:	4630      	mov	r0, r6
    7b2e:	f007 f945 	bl	edbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7b32:	4669      	mov	r1, sp
    7b34:	2000      	movs	r0, #0
    7b36:	f005 ff20 	bl	d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7b3a:	b180      	cbz	r0, 7b5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    7b3c:	f240 1137 	movw	r1, #311	; 0x137
    7b40:	2030      	movs	r0, #48	; 0x30
    7b42:	f7fc fcfb 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b46:	f240 1157 	movw	r1, #343	; 0x157
    7b4a:	e7f9      	b.n	7b40 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18c>
    7b4c:	9802      	ldr	r0, [sp, #8]
    7b4e:	b130      	cbz	r0, 7b5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    7b50:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    7b54:	b119      	cbz	r1, 7b5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    7b56:	8800      	ldrh	r0, [r0, #0]
    7b58:	42a8      	cmp	r0, r5
    7b5a:	d1de      	bne.n	7b1a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x166>
    7b5c:	e004      	b.n	7b68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b4>
    7b5e:	4668      	mov	r0, sp
    7b60:	f7fc ff1a 	bl	4998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7b64:	2800      	cmp	r0, #0
    7b66:	d0f1      	beq.n	7b4c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x198>
    7b68:	2000      	movs	r0, #0
    7b6a:	70e0      	strb	r0, [r4, #3]
    7b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7b6e:	0000      	.short	0x0000
    7b70:	20000100 	.word	0x20000100
    7b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b78:	4604      	mov	r4, r0
    7b7a:	4836      	ldr	r0, [pc, #216]	; (7c54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a0>)
    7b7c:	461e      	mov	r6, r3
    7b7e:	4690      	mov	r8, r2
    7b80:	7900      	ldrb	r0, [r0, #4]
    7b82:	4689      	mov	r9, r1
    7b84:	2500      	movs	r5, #0
    7b86:	b368      	cbz	r0, 7be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    7b88:	f7fc f998 	bl	3ebc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7b8c:	b350      	cbz	r0, 7be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    7b8e:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    7b92:	2802      	cmp	r0, #2
    7b94:	d326      	bcc.n	7be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    7b96:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7b9a:	2802      	cmp	r0, #2
    7b9c:	d022      	beq.n	7be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    7b9e:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    7ba2:	b9f8      	cbnz	r0, 7be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    7ba4:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7ba8:	f7ff ff40 	bl	7a2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7bac:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7bb0:	b281      	uxth	r1, r0
    7bb2:	8031      	strh	r1, [r6, #0]
    7bb4:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7bb8:	2700      	movs	r7, #0
    7bba:	2801      	cmp	r0, #1
    7bbc:	d015      	beq.n	7bea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x236>
    7bbe:	6860      	ldr	r0, [r4, #4]
    7bc0:	f004 fd7e 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7bc4:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7bc8:	b280      	uxth	r0, r0
    7bca:	4442      	add	r2, r8
    7bcc:	eba2 0109 	sub.w	r1, r2, r9
    7bd0:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7bd4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7bd8:	1a82      	subs	r2, r0, r2
    7bda:	fb01 7502 	mla	r5, r1, r2, r7
    7bde:	2001      	movs	r0, #1
    7be0:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    7be4:	4628      	mov	r0, r5
    7be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bea:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7bee:	2803      	cmp	r0, #3
    7bf0:	d02c      	beq.n	7c4c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x298>
    7bf2:	2101      	movs	r1, #1
    7bf4:	2000      	movs	r0, #0
    7bf6:	f006 f8d2 	bl	dd9e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7bfa:	69e1      	ldr	r1, [r4, #28]
    7bfc:	1847      	adds	r7, r0, r1
    7bfe:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7c02:	8831      	ldrh	r1, [r6, #0]
    7c04:	34c8      	adds	r4, #200	; 0xc8
    7c06:	f004 fd5b 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c0a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7c0c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7c0e:	1a82      	subs	r2, r0, r2
    7c10:	fb01 5502 	mla	r5, r1, r2, r5
    7c14:	65a0      	str	r0, [r4, #88]	; 0x58
    7c16:	8831      	ldrh	r1, [r6, #0]
    7c18:	4638      	mov	r0, r7
    7c1a:	f004 fd51 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c1e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7c20:	66a0      	str	r0, [r4, #104]	; 0x68
    7c22:	1a41      	subs	r1, r0, r1
    7c24:	440d      	add	r5, r1
    7c26:	8831      	ldrh	r1, [r6, #0]
    7c28:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    7c2c:	f004 fd48 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c30:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    7c32:	4442      	add	r2, r8
    7c34:	eba2 0109 	sub.w	r1, r2, r9
    7c38:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7c3a:	1a89      	subs	r1, r1, r2
    7c3c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7c3e:	1e49      	subs	r1, r1, #1
    7c40:	1a82      	subs	r2, r0, r2
    7c42:	fb01 5502 	mla	r5, r1, r2, r5
    7c46:	66e0      	str	r0, [r4, #108]	; 0x6c
    7c48:	3cc8      	subs	r4, #200	; 0xc8
    7c4a:	e7c8      	b.n	7bde <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22a>
    7c4c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7c50:	e7d3      	b.n	7bfa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x246>
    7c52:	0000      	.short	0x0000
    7c54:	20000100 	.word	0x20000100
    7c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c5c:	4604      	mov	r4, r0
    7c5e:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    7c62:	2800      	cmp	r0, #0
    7c64:	d053      	beq.n	7d0e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    7c66:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7c6a:	2803      	cmp	r0, #3
    7c6c:	d14f      	bne.n	7d0e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    7c6e:	4829      	ldr	r0, [pc, #164]	; (7d14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x360>)
    7c70:	f894 9067 	ldrb.w	r9, [r4, #103]	; 0x67
    7c74:	7800      	ldrb	r0, [r0, #0]
    7c76:	f7ff fed9 	bl	7a2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7c7a:	4605      	mov	r5, r0
    7c7c:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7c80:	f7ff fed4 	bl	7a2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7c84:	4428      	add	r0, r5
    7c86:	b286      	uxth	r6, r0
    7c88:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7c8c:	f7ff fece 	bl	7a2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7c90:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7c94:	fa1f f880 	uxth.w	r8, r0
    7c98:	4648      	mov	r0, r9
    7c9a:	f008 f90e 	bl	feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7c9e:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7ca2:	1a0d      	subs	r5, r1, r0
    7ca4:	4648      	mov	r0, r9
    7ca6:	f008 f916 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7caa:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    7cae:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    7cb2:	fbb0 f0fa 	udiv	r0, r0, sl
    7cb6:	1a2d      	subs	r5, r5, r0
    7cb8:	4648      	mov	r0, r9
    7cba:	f008 f8fe 	bl	feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7cbe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7cc2:	1a0f      	subs	r7, r1, r0
    7cc4:	4648      	mov	r0, r9
    7cc6:	f008 f906 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7cca:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7cce:	4401      	add	r1, r0
    7cd0:	fbb1 f0fa 	udiv	r0, r1, sl
    7cd4:	1a39      	subs	r1, r7, r0
    7cd6:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    7cda:	4370      	muls	r0, r6
    7cdc:	fbb0 f2f8 	udiv	r2, r0, r8
    7ce0:	2029      	movs	r0, #41	; 0x29
    7ce2:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    7ce6:	3260      	adds	r2, #96	; 0x60
    7ce8:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    7cec:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    7cf0:	42a9      	cmp	r1, r5
    7cf2:	d801      	bhi.n	7cf8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x344>
    7cf4:	4285      	cmp	r5, r0
    7cf6:	d901      	bls.n	7cfc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x348>
    7cf8:	f7fc f8c2 	bl	3e80 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    7cfc:	4631      	mov	r1, r6
    7cfe:	6860      	ldr	r0, [r4, #4]
    7d00:	f004 fcde 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7d04:	2100      	movs	r1, #0
    7d06:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7d0a:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    7d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d12:	0000      	.short	0x0000
    7d14:	20000100 	.word	0x20000100
    7d18:	b570      	push	{r4, r5, r6, lr}
    7d1a:	4604      	mov	r4, r0
    7d1c:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
    7d20:	2500      	movs	r5, #0
    7d22:	b118      	cbz	r0, 7d2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x378>
    7d24:	2001      	movs	r0, #1
    7d26:	f007 f85c 	bl	ede2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    7d2a:	4605      	mov	r5, r0
    7d2c:	4620      	mov	r0, r4
    7d2e:	f006 fd1d 	bl	e76c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    7d32:	1941      	adds	r1, r0, r5
    7d34:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    7d38:	34bc      	adds	r4, #188	; 0xbc
    7d3a:	f7f9 ffb5 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7d3e:	2600      	movs	r6, #0
    7d40:	60e0      	str	r0, [r4, #12]
    7d42:	f804 6b0b 	strb.w	r6, [r4], #11
    7d46:	2001      	movs	r0, #1
    7d48:	f804 0901 	strb.w	r0, [r4], #-1
    7d4c:	2003      	movs	r0, #3
    7d4e:	f804 09c6 	strb.w	r0, [r4], #-198
    7d52:	4620      	mov	r0, r4
    7d54:	f007 f816 	bl	ed84 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    7d58:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    7d5c:	4629      	mov	r1, r5
    7d5e:	4620      	mov	r0, r4
    7d60:	f006 ffc4 	bl	ecec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd8>
    7d64:	b930      	cbnz	r0, 7d74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3c0>
    7d66:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    7d6a:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    7d6e:	f007 f807 	bl	ed80 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7d72:	b148      	cbz	r0, 7d88 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3d4>
    7d74:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
    7d78:	f006 ffe9 	bl	ed4e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    7d7c:	4805      	ldr	r0, [pc, #20]	; (7d94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e0>)
    7d7e:	7940      	ldrb	r0, [r0, #5]
    7d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d84:	f7fc ba2a 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7d88:	f44f 61e6 	mov.w	r1, #1840	; 0x730
    7d8c:	2030      	movs	r0, #48	; 0x30
    7d8e:	f7fc fbd5 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d92:	0000      	.short	0x0000
    7d94:	20000100 	.word	0x20000100
    7d98:	b570      	push	{r4, r5, r6, lr}
    7d9a:	4604      	mov	r4, r0
    7d9c:	2000      	movs	r0, #0
    7d9e:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
    7da2:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
    7da6:	460e      	mov	r6, r1
    7da8:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    7dac:	2001      	movs	r0, #1
    7dae:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7db2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    7db6:	2101      	movs	r1, #1
    7db8:	34a8      	adds	r4, #168	; 0xa8
    7dba:	f7fe fa7f 	bl	62bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7dbe:	6860      	ldr	r0, [r4, #4]
    7dc0:	f8c0 5154 	str.w	r5, [r0, #340]	; 0x154
    7dc4:	6861      	ldr	r1, [r4, #4]
    7dc6:	7820      	ldrb	r0, [r4, #0]
    7dc8:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    7dcc:	6860      	ldr	r0, [r4, #4]
    7dce:	f8c0 6164 	str.w	r6, [r0, #356]	; 0x164
    7dd2:	6860      	ldr	r0, [r4, #4]
    7dd4:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
    7dd8:	6860      	ldr	r0, [r4, #4]
    7dda:	8801      	ldrh	r1, [r0, #0]
    7ddc:	f890 0160 	ldrb.w	r0, [r0, #352]	; 0x160
    7de0:	f7fe faf4 	bl	63cc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    7de4:	6860      	ldr	r0, [r4, #4]
    7de6:	f006 feed 	bl	ebc4 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>
    7dea:	b120      	cbz	r0, 7df6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    7dec:	f240 7159 	movw	r1, #1881	; 0x759
    7df0:	2030      	movs	r0, #48	; 0x30
    7df2:	f7fc fba3 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7df6:	f006 ffaa 	bl	ed4e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    7dfa:	4803      	ldr	r0, [pc, #12]	; (7e08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x454>)
    7dfc:	7940      	ldrb	r0, [r0, #5]
    7dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e02:	f7fc b9eb 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7e06:	0000      	.short	0x0000
    7e08:	20000100 	.word	0x20000100
    7e0c:	b538      	push	{r3, r4, r5, lr}
    7e0e:	2500      	movs	r5, #0
    7e10:	4604      	mov	r4, r0
    7e12:	2901      	cmp	r1, #1
    7e14:	d102      	bne.n	7e1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x468>
    7e16:	4810      	ldr	r0, [pc, #64]	; (7e58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a4>)
    7e18:	78c0      	ldrb	r0, [r0, #3]
    7e1a:	b170      	cbz	r0, 7e3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x486>
    7e1c:	2004      	movs	r0, #4
    7e1e:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7e22:	bf00      	nop
    7e24:	f006 ff93 	bl	ed4e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    7e28:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    7e2c:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7e30:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7e34:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    7e38:	bd38      	pop	{r3, r4, r5, pc}
    7e3a:	9500      	str	r5, [sp, #0]
    7e3c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7e40:	2301      	movs	r3, #1
    7e42:	2200      	movs	r2, #0
    7e44:	4620      	mov	r0, r4
    7e46:	f000 f809 	bl	7e5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    7e4a:	2800      	cmp	r0, #0
    7e4c:	d0ea      	beq.n	7e24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x470>
    7e4e:	f240 710e 	movw	r1, #1806	; 0x70e
    7e52:	2030      	movs	r0, #48	; 0x30
    7e54:	f7fc fb72 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e58:	20000100 	.word	0x20000100
    7e5c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e60:	4604      	mov	r4, r0
    7e62:	b085      	sub	sp, #20
    7e64:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7e68:	f8df b424 	ldr.w	fp, [pc, #1060]	; 8290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x290>
    7e6c:	e9cd 3000 	strd	r3, r0, [sp]
    7e70:	4699      	mov	r9, r3
    7e72:	460f      	mov	r7, r1
    7e74:	f89b 0000 	ldrb.w	r0, [fp]
    7e78:	f7ff fdd8 	bl	7a2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7e7c:	4605      	mov	r5, r0
    7e7e:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7e82:	f7ff fdd3 	bl	7a2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7e86:	4428      	add	r0, r5
    7e88:	f8ad 0008 	strh.w	r0, [sp, #8]
    7e8c:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    7e90:	280d      	cmp	r0, #13
    7e92:	d004      	beq.n	7e9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ea>
    7e94:	2000      	movs	r0, #0
    7e96:	9003      	str	r0, [sp, #12]
    7e98:	9807      	ldr	r0, [sp, #28]
    7e9a:	b110      	cbz	r0, 7ea2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ee>
    7e9c:	e02e      	b.n	7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    7e9e:	2001      	movs	r0, #1
    7ea0:	e7f9      	b.n	7e96 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4e2>
    7ea2:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7ea6:	2803      	cmp	r0, #3
    7ea8:	d128      	bne.n	7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    7eaa:	9803      	ldr	r0, [sp, #12]
    7eac:	b330      	cbz	r0, 7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    7eae:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7eb2:	42b8      	cmp	r0, r7
    7eb4:	d122      	bne.n	7efc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    7eb6:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    7eba:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    7ebe:	6860      	ldr	r0, [r4, #4]
    7ec0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    7ec4:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7ec8:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    7ecc:	4408      	add	r0, r1
    7ece:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    7ed2:	4620      	mov	r0, r4
    7ed4:	f000 fb96 	bl	8604 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7ed8:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    7edc:	61e0      	str	r0, [r4, #28]
    7ede:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    7ee2:	8360      	strh	r0, [r4, #26]
    7ee4:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    7ee8:	6060      	str	r0, [r4, #4]
    7eea:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    7eee:	8120      	strh	r0, [r4, #8]
    7ef0:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7ef4:	8160      	strh	r0, [r4, #10]
    7ef6:	2002      	movs	r0, #2
    7ef8:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7efc:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7f00:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    7f04:	1a38      	subs	r0, r7, r0
    7f06:	fa0f fa80 	sxth.w	sl, r0
    7f0a:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    7f0e:	1a38      	subs	r0, r7, r0
    7f10:	fa0f f880 	sxth.w	r8, r0
    7f14:	f1b8 0f00 	cmp.w	r8, #0
    7f18:	da06      	bge.n	7f28 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x574>
    7f1a:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7f1e:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    7f22:	2001      	movs	r0, #1
    7f24:	46d0      	mov	r8, sl
    7f26:	9000      	str	r0, [sp, #0]
    7f28:	ab02      	add	r3, sp, #8
    7f2a:	4652      	mov	r2, sl
    7f2c:	4641      	mov	r1, r8
    7f2e:	4620      	mov	r0, r4
    7f30:	f7ff fe20 	bl	7b74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>
    7f34:	9004      	str	r0, [sp, #16]
    7f36:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7f3a:	b140      	cbz	r0, 7f4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x59a>
    7f3c:	2801      	cmp	r0, #1
    7f3e:	d07c      	beq.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    7f40:	2802      	cmp	r0, #2
    7f42:	d05a      	beq.n	7ffa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x646>
    7f44:	2803      	cmp	r0, #3
    7f46:	d079      	beq.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
    7f48:	f240 518e 	movw	r1, #1422	; 0x58e
    7f4c:	e19c      	b.n	8288 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x288>
    7f4e:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7f52:	b3e8      	cbz	r0, 7fd0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x61c>
    7f54:	2101      	movs	r1, #1
    7f56:	2000      	movs	r0, #0
    7f58:	f005 ff21 	bl	dd9e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7f5c:	4606      	mov	r6, r0
    7f5e:	69e0      	ldr	r0, [r4, #28]
    7f60:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7f64:	4430      	add	r0, r6
    7f66:	f004 fbab 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7f6a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7f6e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7f72:	6860      	ldr	r0, [r4, #4]
    7f74:	f004 fba4 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7f78:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7f7c:	a901      	add	r1, sp, #4
    7f7e:	4668      	mov	r0, sp
    7f80:	f003 fb10 	bl	b5a4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7f84:	e9dd 1200 	ldrd	r1, r2, [sp]
    7f88:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7f8c:	f7fa ffea 	bl	2f64 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7f90:	4682      	mov	sl, r0
    7f92:	4620      	mov	r0, r4
    7f94:	f006 fecd 	bl	ed32 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11e>
    7f98:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7f9c:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    7fa0:	f007 ff99 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7fa4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7fa8:	4401      	add	r1, r0
    7faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7fae:	fbb1 f0f0 	udiv	r0, r1, r0
    7fb2:	69e1      	ldr	r1, [r4, #28]
    7fb4:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7fb8:	4431      	add	r1, r6
    7fba:	1a08      	subs	r0, r1, r0
    7fbc:	1a81      	subs	r1, r0, r2
    7fbe:	4441      	add	r1, r8
    7fc0:	3920      	subs	r1, #32
    7fc2:	eba1 060a 	sub.w	r6, r1, sl
    7fc6:	0050      	lsls	r0, r2, #1
    7fc8:	8b61      	ldrh	r1, [r4, #26]
    7fca:	3060      	adds	r0, #96	; 0x60
    7fcc:	4401      	add	r1, r0
    7fce:	e000      	b.n	7fd2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x61e>
    7fd0:	e010      	b.n	7ff4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x640>
    7fd2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7fd6:	f006 fec1 	bl	ed5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    7fda:	3024      	adds	r0, #36	; 0x24
    7fdc:	f8cb 0018 	str.w	r0, [fp, #24]
    7fe0:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7fe4:	4659      	mov	r1, fp
    7fe6:	1a30      	subs	r0, r6, r0
    7fe8:	f5b0 7fdb 	cmp.w	r0, #438	; 0x1b6
    7fec:	d85c      	bhi.n	80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
    7fee:	f240 5127 	movw	r1, #1319	; 0x527
    7ff2:	e149      	b.n	8288 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x288>
    7ff4:	f240 5105 	movw	r1, #1285	; 0x505
    7ff8:	e146      	b.n	8288 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x288>
    7ffa:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    7ffe:	69e0      	ldr	r0, [r4, #28]
    8000:	4408      	add	r0, r1
    8002:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8006:	f004 fb5b 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    800a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    800e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8012:	6860      	ldr	r0, [r4, #4]
    8014:	f004 fb54 	bl	c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8018:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    801c:	4620      	mov	r0, r4
    801e:	f006 fe88 	bl	ed32 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11e>
    8022:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    8026:	bb10      	cbnz	r0, 806e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e>
    8028:	f1b9 0f00 	cmp.w	r9, #0
    802c:	d01f      	beq.n	806e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e>
    802e:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    8032:	4640      	mov	r0, r8
    8034:	f007 ff4f 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8038:	e001      	b.n	803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
    803a:	e036      	b.n	80aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa>
    803c:	e052      	b.n	80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>
    803e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8042:	4401      	add	r1, r0
    8044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8048:	fbb1 f0f0 	udiv	r0, r1, r0
    804c:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    8050:	69e2      	ldr	r2, [r4, #28]
    8052:	4408      	add	r0, r1
    8054:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    8058:	4411      	add	r1, r2
    805a:	1a0e      	subs	r6, r1, r0
    805c:	4640      	mov	r0, r8
    805e:	f007 ff2c 	bl	feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8062:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    8066:	1a08      	subs	r0, r1, r0
    8068:	4406      	add	r6, r0
    806a:	3e20      	subs	r6, #32
    806c:	e006      	b.n	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
    806e:	69e1      	ldr	r1, [r4, #28]
    8070:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    8074:	4408      	add	r0, r1
    8076:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    807a:	1a46      	subs	r6, r0, r1
    807c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    8080:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    8084:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    8088:	fb01 0002 	mla	r0, r1, r2, r0
    808c:	0040      	lsls	r0, r0, #1
    808e:	8b61      	ldrh	r1, [r4, #26]
    8090:	3060      	adds	r0, #96	; 0x60
    8092:	4401      	add	r1, r0
    8094:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    8098:	f006 fe60 	bl	ed5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    809c:	f8cb 0018 	str.w	r0, [fp, #24]
    80a0:	2001      	movs	r0, #1
    80a2:	4659      	mov	r1, fp
    80a4:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    80a8:	e066      	b.n	8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
    80aa:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    80ae:	6860      	ldr	r0, [r4, #4]
    80b0:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    80b4:	1a46      	subs	r6, r0, r1
    80b6:	eb02 000a 	add.w	r0, r2, sl
    80ba:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    80be:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    80c2:	1a80      	subs	r0, r0, r2
    80c4:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    80c8:	1e40      	subs	r0, r0, #1
    80ca:	fb0c 3202 	mla	r2, ip, r2, r3
    80ce:	fb00 2001 	mla	r0, r0, r1, r2
    80d2:	0040      	lsls	r0, r0, #1
    80d4:	8b61      	ldrh	r1, [r4, #26]
    80d6:	3060      	adds	r0, #96	; 0x60
    80d8:	4401      	add	r1, r0
    80da:	fb06 f608 	mul.w	r6, r6, r8
    80de:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    80e2:	e044      	b.n	816e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e>
    80e4:	6860      	ldr	r0, [r4, #4]
    80e6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    80ea:	fb00 f008 	mul.w	r0, r0, r8
    80ee:	fb08 0611 	mls	r6, r8, r1, r0
    80f2:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    80f6:	2824      	cmp	r0, #36	; 0x24
    80f8:	d003      	beq.n	8102 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102>
    80fa:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    80fe:	2824      	cmp	r0, #36	; 0x24
    8100:	d109      	bne.n	8116 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116>
    8102:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    8106:	1a38      	subs	r0, r7, r0
    8108:	b200      	sxth	r0, r0
    810a:	2800      	cmp	r0, #0
    810c:	db03      	blt.n	8116 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116>
    810e:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    8112:	b100      	cbz	r0, 8116 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116>
    8114:	9001      	str	r0, [sp, #4]
    8116:	9800      	ldr	r0, [sp, #0]
    8118:	b1f8      	cbz	r0, 815a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15a>
    811a:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    811e:	b9e0      	cbnz	r0, 815a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15a>
    8120:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    8124:	2800      	cmp	r0, #0
    8126:	d07d      	beq.n	8224 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x224>
    8128:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    812c:	2800      	cmp	r0, #0
    812e:	d079      	beq.n	8224 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x224>
    8130:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    8134:	f007 fecf 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8138:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    813c:	4401      	add	r1, r0
    813e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8142:	fbb1 f0f0 	udiv	r0, r1, r0
    8146:	1a36      	subs	r6, r6, r0
    8148:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    814c:	f007 feb5 	bl	feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8150:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    8154:	1a08      	subs	r0, r1, r0
    8156:	4406      	add	r6, r0
    8158:	3e20      	subs	r6, #32
    815a:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    815e:	eb01 000a 	add.w	r0, r1, sl
    8162:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    8166:	4348      	muls	r0, r1
    8168:	0041      	lsls	r1, r0, #1
    816a:	3160      	adds	r1, #96	; 0x60
    816c:	9801      	ldr	r0, [sp, #4]
    816e:	f006 fdf5 	bl	ed5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    8172:	4659      	mov	r1, fp
    8174:	f8cb 0018 	str.w	r0, [fp, #24]
    8178:	9804      	ldr	r0, [sp, #16]
    817a:	6989      	ldr	r1, [r1, #24]
    817c:	1a33      	subs	r3, r6, r0
    817e:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    8182:	6860      	ldr	r0, [r4, #4]
    8184:	1b80      	subs	r0, r0, r6
    8186:	f2a0 2045 	subw	r0, r0, #581	; 0x245
    818a:	f8cb 001c 	str.w	r0, [fp, #28]
    818e:	4281      	cmp	r1, r0
    8190:	d800      	bhi.n	8194 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194>
    8192:	4608      	mov	r0, r1
    8194:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    8198:	2000      	movs	r0, #0
    819a:	7028      	strb	r0, [r5, #0]
    819c:	2064      	movs	r0, #100	; 0x64
    819e:	8128      	strh	r0, [r5, #8]
    81a0:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    81a4:	4619      	mov	r1, r3
    81a6:	34dc      	adds	r4, #220	; 0xdc
    81a8:	f7f9 fd7e 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    81ac:	60e8      	str	r0, [r5, #12]
    81ae:	f854 0cb0 	ldr.w	r0, [r4, #-176]
    81b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    81b4:	4408      	add	r0, r1
    81b6:	6068      	str	r0, [r5, #4]
    81b8:	68e8      	ldr	r0, [r5, #12]
    81ba:	67e0      	str	r0, [r4, #124]	; 0x7c
    81bc:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    81c0:	2001      	movs	r0, #1
    81c2:	72a8      	strb	r0, [r5, #10]
    81c4:	8aa1      	ldrh	r1, [r4, #20]
    81c6:	3cdc      	subs	r4, #220	; 0xdc
    81c8:	1bc9      	subs	r1, r1, r7
    81ca:	b209      	sxth	r1, r1
    81cc:	2900      	cmp	r1, #0
    81ce:	dd01      	ble.n	81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>
    81d0:	2103      	movs	r1, #3
    81d2:	72a9      	strb	r1, [r5, #10]
    81d4:	9903      	ldr	r1, [sp, #12]
    81d6:	b331      	cbz	r1, 8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
    81d8:	f1b9 0f00 	cmp.w	r9, #0
    81dc:	d027      	beq.n	822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
    81de:	bf00      	nop
    81e0:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    81e4:	b392      	cbz	r2, 824c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24c>
    81e6:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    81ea:	bf00      	nop
    81ec:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    81f0:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    81f4:	1c49      	adds	r1, r1, #1
    81f6:	434b      	muls	r3, r1
    81f8:	4293      	cmp	r3, r2
    81fa:	d218      	bcs.n	822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
    81fc:	7aa9      	ldrb	r1, [r5, #10]
    81fe:	1e49      	subs	r1, r1, #1
    8200:	2900      	cmp	r1, #0
    8202:	dd14      	ble.n	822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
    8204:	72a8      	strb	r0, [r5, #10]
    8206:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    820a:	2101      	movs	r1, #1
    820c:	1c40      	adds	r0, r0, #1
    820e:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    8212:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    8216:	f7fc fa21 	bl	465c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    821a:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    821e:	f000 0007 	and.w	r0, r0, #7
    8222:	e001      	b.n	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
    8224:	e013      	b.n	824e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24e>
    8226:	e015      	b.n	8254 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x254>
    8228:	1c40      	adds	r0, r0, #1
    822a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    822e:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    8232:	4629      	mov	r1, r5
    8234:	f006 fda4 	bl	ed80 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    8238:	b320      	cbz	r0, 8284 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x284>
    823a:	9807      	ldr	r0, [sp, #28]
    823c:	f080 0001 	eor.w	r0, r0, #1
    8240:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    8244:	2000      	movs	r0, #0
    8246:	b009      	add	sp, #36	; 0x24
    8248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    824c:	e018      	b.n	8280 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x280>
    824e:	f240 5179 	movw	r1, #1401	; 0x579
    8252:	e019      	b.n	8288 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x288>
    8254:	f1b9 0f00 	cmp.w	r9, #0
    8258:	d1c2      	bne.n	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
    825a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    825e:	2800      	cmp	r0, #0
    8260:	d0e5      	beq.n	822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
    8262:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    8266:	6860      	ldr	r0, [r4, #4]
    8268:	1a41      	subs	r1, r0, r1
    826a:	4628      	mov	r0, r5
    826c:	f005 fda9 	bl	ddc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8270:	0400      	lsls	r0, r0, #16
    8272:	0c00      	lsrs	r0, r0, #16
    8274:	d0db      	beq.n	822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
    8276:	9912      	ldr	r1, [sp, #72]	; 0x48
    8278:	b101      	cbz	r1, 827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>
    827a:	8008      	strh	r0, [r1, #0]
    827c:	2001      	movs	r0, #1
    827e:	e7e2      	b.n	8246 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x246>
    8280:	2100      	movs	r1, #0
    8282:	e7b3      	b.n	81ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ec>
    8284:	f240 51d9 	movw	r1, #1497	; 0x5d9
    8288:	2030      	movs	r0, #48	; 0x30
    828a:	f7fc f957 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    828e:	0000      	.short	0x0000
    8290:	20000100 	.word	0x20000100
    8294:	b570      	push	{r4, r5, r6, lr}
    8296:	2909      	cmp	r1, #9
    8298:	d24e      	bcs.n	8338 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x338>
    829a:	e8df f001 	tbb	[pc, r1]
    829e:	1a05      	.short	0x1a05
    82a0:	4d3c4040 	.word	0x4d3c4040
    82a4:	0048442e 	.word	0x0048442e
    82a8:	4d25      	ldr	r5, [pc, #148]	; (8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>)
    82aa:	4604      	mov	r4, r0
    82ac:	6228      	str	r0, [r5, #32]
    82ae:	2000      	movs	r0, #0
    82b0:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    82b4:	4620      	mov	r0, r4
    82b6:	f7fe fce1 	bl	6c7c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    82ba:	b110      	cbz	r0, 82c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c2>
    82bc:	f240 21b9 	movw	r1, #697	; 0x2b9
    82c0:	e037      	b.n	8332 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x332>
    82c2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    82c6:	38fa      	subs	r0, #250	; 0xfa
    82c8:	f7fa fd98 	bl	2dfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    82cc:	2003      	movs	r0, #3
    82ce:	70a8      	strb	r0, [r5, #2]
    82d0:	bd70      	pop	{r4, r5, r6, pc}
    82d2:	4605      	mov	r5, r0
    82d4:	f006 fa6a 	bl	e7ac <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    82d8:	b9a8      	cbnz	r0, 8306 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x306>
    82da:	4628      	mov	r0, r5
    82dc:	f006 fd00 	bl	ece0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    82e0:	4604      	mov	r4, r0
    82e2:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    82e6:	42a0      	cmp	r0, r4
    82e8:	d20b      	bcs.n	8302 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x302>
    82ea:	1a20      	subs	r0, r4, r0
    82ec:	2104      	movs	r1, #4
    82ee:	f7f9 fbff 	bl	1af0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    82f2:	b130      	cbz	r0, 8302 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x302>
    82f4:	4628      	mov	r0, r5
    82f6:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
    82fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82fe:	f006 ba33 	b.w	e768 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    8302:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
    8306:	4628      	mov	r0, r5
    8308:	f7fe fcd4 	bl	6cb4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    830c:	2800      	cmp	r0, #0
    830e:	d0df      	beq.n	82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>
    8310:	f240 21ed 	movw	r1, #749	; 0x2ed
    8314:	e00d      	b.n	8332 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x332>
    8316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    831a:	f003 bbe5 	b.w	bae8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    831e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8322:	f7ff bb91 	b.w	7a48 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    8326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    832a:	f006 bcd0 	b.w	ecce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    832e:	f44f 7184 	mov.w	r1, #264	; 0x108
    8332:	2030      	movs	r0, #48	; 0x30
    8334:	f7fc f902 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8338:	f44f 7186 	mov.w	r1, #268	; 0x10c
    833c:	e7f9      	b.n	8332 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x332>
    833e:	0000      	.short	0x0000
    8340:	20000100 	.word	0x20000100
    8344:	b570      	push	{r4, r5, r6, lr}
    8346:	4d4f      	ldr	r5, [pc, #316]	; (8484 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x484>)
    8348:	4606      	mov	r6, r0
    834a:	2909      	cmp	r1, #9
    834c:	d27e      	bcs.n	844c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44c>
    834e:	e8df f001 	tbb	[pc, r1]
    8352:	4a05      	.short	0x4a05
    8354:	964e5252 	.word	0x964e5252
    8358:	00927069 	.word	0x00927069
    835c:	4630      	mov	r0, r6
    835e:	f7fe f827 	bl	63b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    8362:	2100      	movs	r1, #0
    8364:	f005 faff 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8368:	0004      	movs	r4, r0
    836a:	d007      	beq.n	837c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37c>
    836c:	4630      	mov	r0, r6
    836e:	f7fe f81f 	bl	63b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    8372:	8821      	ldrh	r1, [r4, #0]
    8374:	4288      	cmp	r0, r1
    8376:	d003      	beq.n	8380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x380>
    8378:	21a9      	movs	r1, #169	; 0xa9
    837a:	e07d      	b.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    837c:	21a8      	movs	r1, #168	; 0xa8
    837e:	e07b      	b.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8380:	2100      	movs	r1, #0
    8382:	616c      	str	r4, [r5, #20]
    8384:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
    8388:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    838c:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    8390:	4620      	mov	r0, r4
    8392:	b189      	cbz	r1, 83b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b8>
    8394:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    8398:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    839c:	428a      	cmp	r2, r1
    839e:	d106      	bne.n	83ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ae>
    83a0:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    83a4:	1a51      	subs	r1, r2, r1
    83a6:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    83aa:	4611      	mov	r1, r2
    83ac:	e00d      	b.n	83ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ca>
    83ae:	1a51      	subs	r1, r2, r1
    83b0:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    83b4:	b291      	uxth	r1, r2
    83b6:	e008      	b.n	83ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ca>
    83b8:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    83bc:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    83c0:	1a89      	subs	r1, r1, r2
    83c2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    83c6:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    83ca:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    83ce:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    83d2:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    83d6:	f000 fb29 	bl	8a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    83da:	4620      	mov	r0, r4
    83dc:	f000 f854 	bl	8488 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x488>
    83e0:	2002      	movs	r0, #2
    83e2:	70a8      	strb	r0, [r5, #2]
    83e4:	bd70      	pop	{r4, r5, r6, pc}
    83e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    83ea:	f006 bd52 	b.w	ee92 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    83ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    83f2:	f003 bb79 	b.w	bae8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    83f6:	4630      	mov	r0, r6
    83f8:	f7fd ffda 	bl	63b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    83fc:	2100      	movs	r1, #0
    83fe:	f005 fab2 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8402:	0004      	movs	r4, r0
    8404:	d007      	beq.n	8416 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x416>
    8406:	4630      	mov	r0, r6
    8408:	f7fd ffd2 	bl	63b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    840c:	8821      	ldrh	r1, [r4, #0]
    840e:	4288      	cmp	r0, r1
    8410:	d003      	beq.n	841a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41a>
    8412:	21c3      	movs	r1, #195	; 0xc3
    8414:	e030      	b.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8416:	21c2      	movs	r1, #194	; 0xc2
    8418:	e02e      	b.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    841a:	4620      	mov	r0, r4
    841c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8420:	f000 b866 	b.w	84f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f0>
    8424:	2001      	movs	r0, #1
    8426:	f7f9 fb53 	bl	1ad0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    842a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    842e:	f005 bb49 	b.w	dac4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    8432:	4630      	mov	r0, r6
    8434:	f7fd ffbc 	bl	63b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    8438:	2100      	movs	r1, #0
    843a:	f005 fa94 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    843e:	0004      	movs	r4, r0
    8440:	d009      	beq.n	8456 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x456>
    8442:	4630      	mov	r0, r6
    8444:	f7fd ffb4 	bl	63b0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    8448:	8821      	ldrh	r1, [r4, #0]
    844a:	e000      	b.n	844e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44e>
    844c:	e017      	b.n	847e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47e>
    844e:	4288      	cmp	r0, r1
    8450:	d003      	beq.n	845a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x45a>
    8452:	21d1      	movs	r1, #209	; 0xd1
    8454:	e010      	b.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8456:	21d0      	movs	r1, #208	; 0xd0
    8458:	e00e      	b.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    845a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    845e:	2804      	cmp	r0, #4
    8460:	d001      	beq.n	8466 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x466>
    8462:	21d3      	movs	r1, #211	; 0xd3
    8464:	e008      	b.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8466:	4620      	mov	r0, r4
    8468:	f006 fca8 	bl	edbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    846c:	7968      	ldrb	r0, [r5, #5]
    846e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8472:	f7fb beb3 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8476:	21dc      	movs	r1, #220	; 0xdc
    8478:	2030      	movs	r0, #48	; 0x30
    847a:	f7fc f85f 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    847e:	21e0      	movs	r1, #224	; 0xe0
    8480:	e7fa      	b.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8482:	0000      	.short	0x0000
    8484:	20000100 	.word	0x20000100
    8488:	b570      	push	{r4, r5, r6, lr}
    848a:	4604      	mov	r4, r0
    848c:	f7f9 fd62 	bl	1f54 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8490:	2864      	cmp	r0, #100	; 0x64
    8492:	d901      	bls.n	8498 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x498>
    8494:	4605      	mov	r5, r0
    8496:	e000      	b.n	849a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x49a>
    8498:	2564      	movs	r5, #100	; 0x64
    849a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    849e:	2128      	movs	r1, #40	; 0x28
    84a0:	f006 fc13 	bl	ecca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    84a4:	1946      	adds	r6, r0, r5
    84a6:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    84aa:	2128      	movs	r1, #40	; 0x28
    84ac:	f206 263f 	addw	r6, r6, #575	; 0x23f
    84b0:	f006 fc0b 	bl	ecca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    84b4:	f200 22a3 	addw	r2, r0, #675	; 0x2a3
    84b8:	4620      	mov	r0, r4
    84ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    84bc:	f005 fff1 	bl	e4a2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    84c0:	4605      	mov	r5, r0
    84c2:	4632      	mov	r2, r6
    84c4:	4620      	mov	r0, r4
    84c6:	6861      	ldr	r1, [r4, #4]
    84c8:	f005 ffeb 	bl	e4a2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    84cc:	4907      	ldr	r1, [pc, #28]	; (84ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ec>)
    84ce:	4285      	cmp	r5, r0
    84d0:	60c8      	str	r0, [r1, #12]
    84d2:	d200      	bcs.n	84d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d6>
    84d4:	4628      	mov	r0, r5
    84d6:	6088      	str	r0, [r1, #8]
    84d8:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    84dc:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
    84e0:	6108      	str	r0, [r1, #16]
    84e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84e6:	f7fa bc89 	b.w	2dfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    84ea:	0000      	.short	0x0000
    84ec:	20000100 	.word	0x20000100
    84f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    84f2:	4604      	mov	r4, r0
    84f4:	f004 f8b0 	bl	c658 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    84f8:	4601      	mov	r1, r0
    84fa:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    84fe:	f7f9 fc09 	bl	1d14 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8502:	6861      	ldr	r1, [r4, #4]
    8504:	b111      	cbz	r1, 850c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50c>
    8506:	fbb0 f0f1 	udiv	r0, r0, r1
    850a:	e000      	b.n	850e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50e>
    850c:	2000      	movs	r0, #0
    850e:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    8512:	290d      	cmp	r1, #13
    8514:	d00c      	beq.n	8530 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x530>
    8516:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    851a:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    851e:	1813      	adds	r3, r2, r0
    8520:	1acb      	subs	r3, r1, r3
    8522:	b21b      	sxth	r3, r3
    8524:	2b00      	cmp	r3, #0
    8526:	db06      	blt.n	8536 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x536>
    8528:	1c49      	adds	r1, r1, #1
    852a:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    852e:	e006      	b.n	853e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x53e>
    8530:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    8534:	e00c      	b.n	8550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x550>
    8536:	1c40      	adds	r0, r0, #1
    8538:	4410      	add	r0, r2
    853a:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    853e:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    8542:	b940      	cbnz	r0, 8556 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x556>
    8544:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    8548:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    854c:	4288      	cmp	r0, r1
    854e:	d102      	bne.n	8556 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x556>
    8550:	1c40      	adds	r0, r0, #1
    8552:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    8556:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    855a:	1c40      	adds	r0, r0, #1
    855c:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    8560:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    8564:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    8568:	1a40      	subs	r0, r0, r1
    856a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    856e:	1e40      	subs	r0, r0, #1
    8570:	4408      	add	r0, r1
    8572:	b285      	uxth	r5, r0
    8574:	e026      	b.n	85c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c4>
    8576:	a801      	add	r0, sp, #4
    8578:	2300      	movs	r3, #0
    857a:	9000      	str	r0, [sp, #0]
    857c:	461a      	mov	r2, r3
    857e:	4620      	mov	r0, r4
    8580:	f7ff fc6c 	bl	7e5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    8584:	2800      	cmp	r0, #0
    8586:	d03a      	beq.n	85fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5fe>
    8588:	2801      	cmp	r0, #1
    858a:	d004      	beq.n	8596 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x596>
    858c:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    8590:	2030      	movs	r0, #48	; 0x30
    8592:	f7fb ffd3 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8596:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    859a:	f8b4 10f0 	ldrh.w	r1, [r4, #240]	; 0xf0
    859e:	1a42      	subs	r2, r0, r1
    85a0:	b212      	sxth	r2, r2
    85a2:	2a00      	cmp	r2, #0
    85a4:	da09      	bge.n	85ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ba>
    85a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    85aa:	4402      	add	r2, r0
    85ac:	1aaa      	subs	r2, r5, r2
    85ae:	b212      	sxth	r2, r2
    85b0:	2a00      	cmp	r2, #0
    85b2:	da02      	bge.n	85ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ba>
    85b4:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    85b8:	e004      	b.n	85c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c4>
    85ba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    85be:	4408      	add	r0, r1
    85c0:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    85c4:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    85c8:	1a68      	subs	r0, r5, r1
    85ca:	b200      	sxth	r0, r0
    85cc:	2800      	cmp	r0, #0
    85ce:	dad2      	bge.n	8576 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x576>
    85d0:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    85d4:	b188      	cbz	r0, 85fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5fa>
    85d6:	2008      	movs	r0, #8
    85d8:	f884 008e 	strb.w	r0, [r4, #142]	; 0x8e
    85dc:	2001      	movs	r0, #1
    85de:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    85e2:	4620      	mov	r0, r4
    85e4:	f006 fc57 	bl	ee96 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    85e8:	4620      	mov	r0, r4
    85ea:	f006 fbe7 	bl	edbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    85ee:	4804      	ldr	r0, [pc, #16]	; (8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>)
    85f0:	7940      	ldrb	r0, [r0, #5]
    85f2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    85f6:	f7fb bdf1 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    85fa:	203e      	movs	r0, #62	; 0x3e
    85fc:	e7ec      	b.n	85d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5d8>
    85fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8600:	20000100 	.word	0x20000100

00008604 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    8604:	b510      	push	{r4, lr}
    8606:	4604      	mov	r4, r0
    8608:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    860c:	6861      	ldr	r1, [r4, #4]
    860e:	4288      	cmp	r0, r1
    8610:	d109      	bne.n	8626 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    8612:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    8616:	8922      	ldrh	r2, [r4, #8]
    8618:	4291      	cmp	r1, r2
    861a:	d104      	bne.n	8626 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    861c:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    8620:	8962      	ldrh	r2, [r4, #10]
    8622:	4291      	cmp	r1, r2
    8624:	d015      	beq.n	8652 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    8626:	8821      	ldrh	r1, [r4, #0]
    8628:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    862c:	f005 fae4 	bl	dbf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    8630:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    8634:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    8638:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    863c:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    8640:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    8644:	2001      	movs	r0, #1
    8646:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    864a:	4807      	ldr	r0, [pc, #28]	; (8668 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    864c:	7880      	ldrb	r0, [r0, #2]
    864e:	f7fb fdc5 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8652:	2102      	movs	r1, #2
    8654:	4620      	mov	r0, r4
    8656:	f7fd fe31 	bl	62bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    865a:	2000      	movs	r0, #0
    865c:	f804 0f7e 	strb.w	r0, [r4, #126]!
    8660:	2003      	movs	r0, #3
    8662:	70e0      	strb	r0, [r4, #3]
    8664:	bd10      	pop	{r4, pc}
    8666:	0000      	.short	0x0000
    8668:	20000124 	.word	0x20000124

0000866c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    866c:	4806      	ldr	r0, [pc, #24]	; (8688 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    866e:	4905      	ldr	r1, [pc, #20]	; (8684 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8670:	6501      	str	r1, [r0, #80]	; 0x50
    8672:	4906      	ldr	r1, [pc, #24]	; (868c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8674:	6541      	str	r1, [r0, #84]	; 0x54
    8676:	4807      	ldr	r0, [pc, #28]	; (8694 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8678:	4905      	ldr	r1, [pc, #20]	; (8690 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    867a:	6501      	str	r1, [r0, #80]	; 0x50
    867c:	4906      	ldr	r1, [pc, #24]	; (8698 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    867e:	6541      	str	r1, [r0, #84]	; 0x54
    8680:	4770      	bx	lr
    8682:	0000      	.short	0x0000
    8684:	00009b1d 	.word	0x00009b1d
    8688:	20000138 	.word	0x20000138
    868c:	00009be1 	.word	0x00009be1
    8690:	0000a235 	.word	0x0000a235
    8694:	2000019c 	.word	0x2000019c
    8698:	0000a265 	.word	0x0000a265

0000869c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    869e:	460d      	mov	r5, r1
    86a0:	4607      	mov	r7, r0
    86a2:	2100      	movs	r1, #0
    86a4:	f005 f95f 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    86a8:	1e04      	subs	r4, r0, #0
    86aa:	d04f      	beq.n	874c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    86ac:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    86b0:	2800      	cmp	r0, #0
    86b2:	d04b      	beq.n	874c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    86b4:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    86b8:	f88d 0000 	strb.w	r0, [sp]
    86bc:	9800      	ldr	r0, [sp, #0]
    86be:	9000      	str	r0, [sp, #0]
    86c0:	f89d 0000 	ldrb.w	r0, [sp]
    86c4:	2600      	movs	r6, #0
    86c6:	b1d8      	cbz	r0, 8700 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    86c8:	706e      	strb	r6, [r5, #1]
    86ca:	2007      	movs	r0, #7
    86cc:	7028      	strb	r0, [r5, #0]
    86ce:	e00b      	b.n	86e8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    86d0:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    86d4:	8466      	strh	r6, [r4, #34]	; 0x22
    86d6:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    86da:	6068      	str	r0, [r5, #4]
    86dc:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    86e0:	60a8      	str	r0, [r5, #8]
    86e2:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    86e6:	81a8      	strh	r0, [r5, #12]
    86e8:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    86ec:	f88d 0000 	strb.w	r0, [sp]
    86f0:	9800      	ldr	r0, [sp, #0]
    86f2:	9000      	str	r0, [sp, #0]
    86f4:	f89d 0000 	ldrb.w	r0, [sp]
    86f8:	2800      	cmp	r0, #0
    86fa:	d1e9      	bne.n	86d0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    86fc:	712e      	strb	r6, [r5, #4]
    86fe:	e10b      	b.n	8918 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8700:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    8704:	b3a0      	cbz	r0, 8770 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    8706:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    870a:	280b      	cmp	r0, #11
    870c:	d016      	beq.n	873c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    870e:	280c      	cmp	r0, #12
    8710:	d004      	beq.n	871c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    8712:	f640 21ce 	movw	r1, #2766	; 0xace
    8716:	2031      	movs	r0, #49	; 0x31
    8718:	f7fb ff10 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    871c:	8820      	ldrh	r0, [r4, #0]
    871e:	f7fc fb1d 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8722:	4607      	mov	r7, r0
    8724:	f004 ffda 	bl	d6dc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8728:	b978      	cbnz	r0, 874a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    872a:	706e      	strb	r6, [r5, #1]
    872c:	200c      	movs	r0, #12
    872e:	7028      	strb	r0, [r5, #0]
    8730:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    8734:	7128      	strb	r0, [r5, #4]
    8736:	8820      	ldrh	r0, [r4, #0]
    8738:	80e8      	strh	r0, [r5, #6]
    873a:	e013      	b.n	8764 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    873c:	8820      	ldrh	r0, [r4, #0]
    873e:	f7fc fb0d 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8742:	4607      	mov	r7, r0
    8744:	f004 ffca 	bl	d6dc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8748:	b108      	cbz	r0, 874e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    874a:	2000      	movs	r0, #0
    874c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    874e:	706e      	strb	r6, [r5, #1]
    8750:	200b      	movs	r0, #11
    8752:	7028      	strb	r0, [r5, #0]
    8754:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    8758:	7128      	strb	r0, [r5, #4]
    875a:	8820      	ldrh	r0, [r4, #0]
    875c:	80e8      	strh	r0, [r5, #6]
    875e:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    8762:	7228      	strb	r0, [r5, #8]
    8764:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    8768:	4638      	mov	r0, r7
    876a:	f004 ffcc 	bl	d706 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    876e:	e0d3      	b.n	8918 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8770:	e7ff      	b.n	8772 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    8772:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    8776:	f88d 0000 	strb.w	r0, [sp]
    877a:	9800      	ldr	r0, [sp, #0]
    877c:	9000      	str	r0, [sp, #0]
    877e:	f89d 0000 	ldrb.w	r0, [sp]
    8782:	b130      	cbz	r0, 8792 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    8784:	706e      	strb	r6, [r5, #1]
    8786:	200e      	movs	r0, #14
    8788:	7028      	strb	r0, [r5, #0]
    878a:	80af      	strh	r7, [r5, #4]
    878c:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    8790:	e0c2      	b.n	8918 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8792:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8796:	f88d 0000 	strb.w	r0, [sp]
    879a:	9800      	ldr	r0, [sp, #0]
    879c:	9000      	str	r0, [sp, #0]
    879e:	f89d 0000 	ldrb.w	r0, [sp]
    87a2:	b198      	cbz	r0, 87cc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    87a4:	706e      	strb	r6, [r5, #1]
    87a6:	2008      	movs	r0, #8
    87a8:	7028      	strb	r0, [r5, #0]
    87aa:	8820      	ldrh	r0, [r4, #0]
    87ac:	80a8      	strh	r0, [r5, #4]
    87ae:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    87b2:	f8c5 1006 	str.w	r1, [r5, #6]
    87b6:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    87ba:	f8c5 100a 	str.w	r1, [r5, #10]
    87be:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    87c2:	81e8      	strh	r0, [r5, #14]
    87c4:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    87c8:	7026      	strb	r6, [r4, #0]
    87ca:	e0a5      	b.n	8918 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    87cc:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    87d0:	f88d 0000 	strb.w	r0, [sp]
    87d4:	9800      	ldr	r0, [sp, #0]
    87d6:	9000      	str	r0, [sp, #0]
    87d8:	f89d 0000 	ldrb.w	r0, [sp]
    87dc:	b1a0      	cbz	r0, 8808 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    87de:	706e      	strb	r6, [r5, #1]
    87e0:	2016      	movs	r0, #22
    87e2:	7028      	strb	r0, [r5, #0]
    87e4:	e005      	b.n	87f2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    87e6:	bf00      	nop
    87e8:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    87ec:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    87f0:	6068      	str	r0, [r5, #4]
    87f2:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    87f6:	f88d 0000 	strb.w	r0, [sp]
    87fa:	9800      	ldr	r0, [sp, #0]
    87fc:	9000      	str	r0, [sp, #0]
    87fe:	f89d 0000 	ldrb.w	r0, [sp]
    8802:	2800      	cmp	r0, #0
    8804:	d1f0      	bne.n	87e8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    8806:	e087      	b.n	8918 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8808:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    880c:	f88d 0000 	strb.w	r0, [sp]
    8810:	9800      	ldr	r0, [sp, #0]
    8812:	9000      	str	r0, [sp, #0]
    8814:	f89d 0000 	ldrb.w	r0, [sp]
    8818:	b170      	cbz	r0, 8838 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    881a:	706e      	strb	r6, [r5, #1]
    881c:	2006      	movs	r0, #6
    881e:	7028      	strb	r0, [r5, #0]
    8820:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    8824:	6068      	str	r0, [r5, #4]
    8826:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    882a:	60a8      	str	r0, [r5, #8]
    882c:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8830:	60e8      	str	r0, [r5, #12]
    8832:	f504 7401 	add.w	r4, r4, #516	; 0x204
    8836:	e03a      	b.n	88ae <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    8838:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    883c:	f88d 0000 	strb.w	r0, [sp]
    8840:	9800      	ldr	r0, [sp, #0]
    8842:	9000      	str	r0, [sp, #0]
    8844:	f89d 0000 	ldrb.w	r0, [sp]
    8848:	b1d0      	cbz	r0, 8880 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    884a:	706e      	strb	r6, [r5, #1]
    884c:	2012      	movs	r0, #18
    884e:	7028      	strb	r0, [r5, #0]
    8850:	e00b      	b.n	886a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    8852:	bf00      	nop
    8854:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8858:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    885c:	6068      	str	r0, [r5, #4]
    885e:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    8862:	60a8      	str	r0, [r5, #8]
    8864:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    8868:	60e8      	str	r0, [r5, #12]
    886a:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    886e:	f88d 0000 	strb.w	r0, [sp]
    8872:	9800      	ldr	r0, [sp, #0]
    8874:	9000      	str	r0, [sp, #0]
    8876:	f89d 0000 	ldrb.w	r0, [sp]
    887a:	2800      	cmp	r0, #0
    887c:	d1ea      	bne.n	8854 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    887e:	e04b      	b.n	8918 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8880:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    8884:	f88d 0000 	strb.w	r0, [sp]
    8888:	9800      	ldr	r0, [sp, #0]
    888a:	9000      	str	r0, [sp, #0]
    888c:	f89d 0000 	ldrb.w	r0, [sp]
    8890:	b180      	cbz	r0, 88b4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    8892:	706e      	strb	r6, [r5, #1]
    8894:	2018      	movs	r0, #24
    8896:	7028      	strb	r0, [r5, #0]
    8898:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    889c:	6068      	str	r0, [r5, #4]
    889e:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    88a2:	60a8      	str	r0, [r5, #8]
    88a4:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    88a8:	81a8      	strh	r0, [r5, #12]
    88aa:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    88ae:	f804 6c02 	strb.w	r6, [r4, #-2]
    88b2:	e031      	b.n	8918 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    88b4:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    88b8:	f88d 0000 	strb.w	r0, [sp]
    88bc:	9800      	ldr	r0, [sp, #0]
    88be:	9000      	str	r0, [sp, #0]
    88c0:	f89d 0000 	ldrb.w	r0, [sp]
    88c4:	b138      	cbz	r0, 88d6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    88c6:	2019      	movs	r0, #25
    88c8:	7028      	strb	r0, [r5, #0]
    88ca:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    88ce:	6068      	str	r0, [r5, #4]
    88d0:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    88d4:	e020      	b.n	8918 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    88d6:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    88da:	f88d 0000 	strb.w	r0, [sp]
    88de:	9800      	ldr	r0, [sp, #0]
    88e0:	9000      	str	r0, [sp, #0]
    88e2:	f89d 0000 	ldrb.w	r0, [sp]
    88e6:	2800      	cmp	r0, #0
    88e8:	f43f af30 	beq.w	874c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    88ec:	706e      	strb	r6, [r5, #1]
    88ee:	2013      	movs	r0, #19
    88f0:	7028      	strb	r0, [r5, #0]
    88f2:	e007      	b.n	8904 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    88f4:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    88f8:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    88fc:	6068      	str	r0, [r5, #4]
    88fe:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    8902:	8128      	strh	r0, [r5, #8]
    8904:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    8908:	f88d 0000 	strb.w	r0, [sp]
    890c:	9800      	ldr	r0, [sp, #0]
    890e:	9000      	str	r0, [sp, #0]
    8910:	f89d 0000 	ldrb.w	r0, [sp]
    8914:	2800      	cmp	r0, #0
    8916:	d1ed      	bne.n	88f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    8918:	2001      	movs	r0, #1
    891a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000891c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    891c:	491b      	ldr	r1, [pc, #108]	; (898c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    891e:	7088      	strb	r0, [r1, #2]
    8920:	481c      	ldr	r0, [pc, #112]	; (8994 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8922:	491b      	ldr	r1, [pc, #108]	; (8990 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8924:	6081      	str	r1, [r0, #8]
    8926:	491c      	ldr	r1, [pc, #112]	; (8998 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8928:	6041      	str	r1, [r0, #4]
    892a:	491c      	ldr	r1, [pc, #112]	; (899c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    892c:	6001      	str	r1, [r0, #0]
    892e:	491c      	ldr	r1, [pc, #112]	; (89a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8930:	6281      	str	r1, [r0, #40]	; 0x28
    8932:	491c      	ldr	r1, [pc, #112]	; (89a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8934:	62c1      	str	r1, [r0, #44]	; 0x2c
    8936:	491c      	ldr	r1, [pc, #112]	; (89a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8938:	60c1      	str	r1, [r0, #12]
    893a:	491c      	ldr	r1, [pc, #112]	; (89ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    893c:	6181      	str	r1, [r0, #24]
    893e:	491c      	ldr	r1, [pc, #112]	; (89b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8940:	6301      	str	r1, [r0, #48]	; 0x30
    8942:	491c      	ldr	r1, [pc, #112]	; (89b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8944:	6201      	str	r1, [r0, #32]
    8946:	491c      	ldr	r1, [pc, #112]	; (89b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8948:	64c1      	str	r1, [r0, #76]	; 0x4c
    894a:	491c      	ldr	r1, [pc, #112]	; (89bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    894c:	6481      	str	r1, [r0, #72]	; 0x48
    894e:	491c      	ldr	r1, [pc, #112]	; (89c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8950:	6441      	str	r1, [r0, #68]	; 0x44
    8952:	491c      	ldr	r1, [pc, #112]	; (89c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8954:	6341      	str	r1, [r0, #52]	; 0x34
    8956:	491c      	ldr	r1, [pc, #112]	; (89c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8958:	61c1      	str	r1, [r0, #28]
    895a:	481d      	ldr	r0, [pc, #116]	; (89d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    895c:	491b      	ldr	r1, [pc, #108]	; (89cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    895e:	6081      	str	r1, [r0, #8]
    8960:	491c      	ldr	r1, [pc, #112]	; (89d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8962:	61c1      	str	r1, [r0, #28]
    8964:	491c      	ldr	r1, [pc, #112]	; (89d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8966:	6241      	str	r1, [r0, #36]	; 0x24
    8968:	491c      	ldr	r1, [pc, #112]	; (89dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    896a:	62c1      	str	r1, [r0, #44]	; 0x2c
    896c:	491c      	ldr	r1, [pc, #112]	; (89e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    896e:	6101      	str	r1, [r0, #16]
    8970:	491c      	ldr	r1, [pc, #112]	; (89e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8972:	6141      	str	r1, [r0, #20]
    8974:	491c      	ldr	r1, [pc, #112]	; (89e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8976:	6441      	str	r1, [r0, #68]	; 0x44
    8978:	6341      	str	r1, [r0, #52]	; 0x34
    897a:	491c      	ldr	r1, [pc, #112]	; (89ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    897c:	6181      	str	r1, [r0, #24]
    897e:	491c      	ldr	r1, [pc, #112]	; (89f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8980:	6301      	str	r1, [r0, #48]	; 0x30
    8982:	491c      	ldr	r1, [pc, #112]	; (89f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    8984:	6481      	str	r1, [r0, #72]	; 0x48
    8986:	491c      	ldr	r1, [pc, #112]	; (89f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    8988:	64c1      	str	r1, [r0, #76]	; 0x4c
    898a:	4770      	bx	lr
    898c:	20000124 	.word	0x20000124
    8990:	00009f85 	.word	0x00009f85
    8994:	20000138 	.word	0x20000138
    8998:	000098e1 	.word	0x000098e1
    899c:	0000993d 	.word	0x0000993d
    89a0:	00009ca9 	.word	0x00009ca9
    89a4:	00009ced 	.word	0x00009ced
    89a8:	000099e9 	.word	0x000099e9
    89ac:	00009f5d 	.word	0x00009f5d
    89b0:	0000a0a1 	.word	0x0000a0a1
    89b4:	00009a99 	.word	0x00009a99
    89b8:	00009c7d 	.word	0x00009c7d
    89bc:	00009c51 	.word	0x00009c51
    89c0:	00009f1d 	.word	0x00009f1d
    89c4:	00009f4d 	.word	0x00009f4d
    89c8:	00009fb9 	.word	0x00009fb9
    89cc:	0000a41d 	.word	0x0000a41d
    89d0:	2000019c 	.word	0x2000019c
    89d4:	0000a445 	.word	0x0000a445
    89d8:	0000a205 	.word	0x0000a205
    89dc:	0000a2dd 	.word	0x0000a2dd
    89e0:	0000a1d9 	.word	0x0000a1d9
    89e4:	0000a385 	.word	0x0000a385
    89e8:	0000a361 	.word	0x0000a361
    89ec:	0000a3a9 	.word	0x0000a3a9
    89f0:	0000a49d 	.word	0x0000a49d
    89f4:	0000a295 	.word	0x0000a295
    89f8:	0000a2c5 	.word	0x0000a2c5

000089fc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    89fc:	4806      	ldr	r0, [pc, #24]	; (8a18 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    89fe:	4905      	ldr	r1, [pc, #20]	; (8a14 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8a00:	6581      	str	r1, [r0, #88]	; 0x58
    8a02:	4906      	ldr	r1, [pc, #24]	; (8a1c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8a04:	6601      	str	r1, [r0, #96]	; 0x60
    8a06:	4807      	ldr	r0, [pc, #28]	; (8a24 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8a08:	4905      	ldr	r1, [pc, #20]	; (8a20 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8a0a:	6581      	str	r1, [r0, #88]	; 0x58
    8a0c:	4906      	ldr	r1, [pc, #24]	; (8a28 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8a0e:	65c1      	str	r1, [r0, #92]	; 0x5c
    8a10:	4770      	bx	lr
    8a12:	0000      	.short	0x0000
    8a14:	00009d0d 	.word	0x00009d0d
    8a18:	20000138 	.word	0x20000138
    8a1c:	00009dd9 	.word	0x00009dd9
    8a20:	0000a309 	.word	0x0000a309
    8a24:	2000019c 	.word	0x2000019c
    8a28:	0000a339 	.word	0x0000a339

00008a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8a30:	2701      	movs	r7, #1
    8a32:	4c72      	ldr	r4, [pc, #456]	; (8bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0>)
    8a34:	2500      	movs	r5, #0
    8a36:	f367 0107 	bfi	r1, r7, #0, #8
    8a3a:	80a5      	strh	r5, [r4, #4]
    8a3c:	7065      	strb	r5, [r4, #1]
    8a3e:	7025      	strb	r5, [r4, #0]
    8a40:	60a0      	str	r0, [r4, #8]
    8a42:	4689      	mov	r9, r1
    8a44:	4680      	mov	r8, r0
    8a46:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    8a4a:	8800      	ldrh	r0, [r0, #0]
    8a4c:	f7fc f99c 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8a50:	b180      	cbz	r0, 8a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8a52:	68a0      	ldr	r0, [r4, #8]
    8a54:	8800      	ldrh	r0, [r0, #0]
    8a56:	f7fc fbbb 	bl	51d0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8a5a:	68a0      	ldr	r0, [r4, #8]
    8a5c:	8800      	ldrh	r0, [r0, #0]
    8a5e:	f7fc fb5f 	bl	5120 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8a62:	68a0      	ldr	r0, [r4, #8]
    8a64:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8a68:	b1a9      	cbz	r1, 8a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8a6a:	3070      	adds	r0, #112	; 0x70
    8a6c:	f006 fa22 	bl	eeb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8a70:	b128      	cbz	r0, 8a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    8a72:	e010      	b.n	8a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8a74:	f640 31ab 	movw	r1, #2987	; 0xbab
    8a78:	2031      	movs	r0, #49	; 0x31
    8a7a:	f7fb fd5f 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a7e:	68a0      	ldr	r0, [r4, #8]
    8a80:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8a84:	b139      	cbz	r1, 8a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8a86:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8a8a:	2301      	movs	r3, #1
    8a8c:	4619      	mov	r1, r3
    8a8e:	3070      	adds	r0, #112	; 0x70
    8a90:	f005 f8cb 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a94:	b180      	cbz	r0, 8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    8a96:	68a0      	ldr	r0, [r4, #8]
    8a98:	3070      	adds	r0, #112	; 0x70
    8a9a:	f006 fa0b 	bl	eeb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8a9e:	b128      	cbz	r0, 8aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    8aa0:	68a0      	ldr	r0, [r4, #8]
    8aa2:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    8aa6:	bf00      	nop
    8aa8:	f000 fb86 	bl	91b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    8aac:	68a0      	ldr	r0, [r4, #8]
    8aae:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    8ab2:	b189      	cbz	r1, 8ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    8ab4:	80e5      	strh	r5, [r4, #6]
    8ab6:	e01e      	b.n	8af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    8ab8:	68a0      	ldr	r0, [r4, #8]
    8aba:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    8abe:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8ac2:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8ac6:	2100      	movs	r1, #0
    8ac8:	2002      	movs	r0, #2
    8aca:	f000 fe03 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8ace:	68a0      	ldr	r0, [r4, #8]
    8ad0:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8ad4:	2002      	movs	r0, #2
    8ad6:	e7e7      	b.n	8aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    8ad8:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8adc:	f88d 1000 	strb.w	r1, [sp]
    8ae0:	9900      	ldr	r1, [sp, #0]
    8ae2:	9100      	str	r1, [sp, #0]
    8ae4:	f89d 1000 	ldrb.w	r1, [sp]
    8ae8:	b919      	cbnz	r1, 8af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    8aea:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    8aec:	8902      	ldrh	r2, [r0, #8]
    8aee:	4291      	cmp	r1, r2
    8af0:	d800      	bhi.n	8af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    8af2:	8901      	ldrh	r1, [r0, #8]
    8af4:	80e1      	strh	r1, [r4, #6]
    8af6:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    8afa:	1e49      	subs	r1, r1, #1
    8afc:	b28e      	uxth	r6, r1
    8afe:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8b02:	4431      	add	r1, r6
    8b04:	f820 195c 	strh.w	r1, [r0], #-92
    8b08:	8801      	ldrh	r1, [r0, #0]
    8b0a:	4431      	add	r1, r6
    8b0c:	8001      	strh	r1, [r0, #0]
    8b0e:	f001 fcf3 	bl	a4f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    8b12:	b120      	cbz	r0, 8b1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    8b14:	68a0      	ldr	r0, [r4, #8]
    8b16:	f850 1f90 	ldr.w	r1, [r0, #144]!
    8b1a:	4431      	add	r1, r6
    8b1c:	6001      	str	r1, [r0, #0]
    8b1e:	68a0      	ldr	r0, [r4, #8]
    8b20:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8b24:	2901      	cmp	r1, #1
    8b26:	d802      	bhi.n	8b2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    8b28:	1c49      	adds	r1, r1, #1
    8b2a:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    8b2e:	b10e      	cbz	r6, 8b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    8b30:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8b34:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8b38:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8b3c:	290b      	cmp	r1, #11
    8b3e:	d001      	beq.n	8b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    8b40:	290c      	cmp	r1, #12
    8b42:	d116      	bne.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146>
    8b44:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    8b48:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    8b4c:	1ad2      	subs	r2, r2, r3
    8b4e:	b212      	sxth	r2, r2
    8b50:	2a00      	cmp	r2, #0
    8b52:	db0e      	blt.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146>
    8b54:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    8b58:	60c1      	str	r1, [r0, #12]
    8b5a:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    8b5e:	7401      	strb	r1, [r0, #16]
    8b60:	2103      	movs	r1, #3
    8b62:	f7fd fbab 	bl	62bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8b66:	68a0      	ldr	r0, [r4, #8]
    8b68:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8b6c:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    8b70:	e024      	b.n	8bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8b72:	2924      	cmp	r1, #36	; 0x24
    8b74:	d10f      	bne.n	8b96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    8b76:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8b7a:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    8b7e:	1a89      	subs	r1, r1, r2
    8b80:	b209      	sxth	r1, r1
    8b82:	2900      	cmp	r1, #0
    8b84:	db07      	blt.n	8b96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    8b86:	f000 fe51 	bl	982c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    8b8a:	68a0      	ldr	r0, [r4, #8]
    8b8c:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8b90:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    8b94:	e012      	b.n	8bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8b96:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8b9a:	2924      	cmp	r1, #36	; 0x24
    8b9c:	d001      	beq.n	8ba2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176>
    8b9e:	2925      	cmp	r1, #37	; 0x25
    8ba0:	d10c      	bne.n	8bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8ba2:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8ba6:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    8baa:	1a08      	subs	r0, r1, r0
    8bac:	b200      	sxth	r0, r0
    8bae:	2800      	cmp	r0, #0
    8bb0:	db04      	blt.n	8bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8bb2:	f000 fe3b 	bl	982c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    8bb6:	68a0      	ldr	r0, [r4, #8]
    8bb8:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8bbc:	68a0      	ldr	r0, [r4, #8]
    8bbe:	4601      	mov	r1, r0
    8bc0:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    8bc4:	3070      	adds	r0, #112	; 0x70
    8bc6:	f005 f8c9 	bl	dd5c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    8bca:	480d      	ldr	r0, [pc, #52]	; (8c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>)
    8bcc:	9000      	str	r0, [sp, #0]
    8bce:	4b0d      	ldr	r3, [pc, #52]	; (8c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8>)
    8bd0:	4a0d      	ldr	r2, [pc, #52]	; (8c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>)
    8bd2:	4641      	mov	r1, r8
    8bd4:	4648      	mov	r0, r9
    8bd6:	f7fc fbb3 	bl	5340 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8bda:	68a0      	ldr	r0, [r4, #8]
    8bdc:	2301      	movs	r3, #1
    8bde:	2105      	movs	r1, #5
    8be0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8be4:	3070      	adds	r0, #112	; 0x70
    8be6:	f005 f820 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8bea:	2800      	cmp	r0, #0
    8bec:	d003      	beq.n	8bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca>
    8bee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8bf2:	f7fc bb9f 	b.w	5334 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8bfa:	0000      	.short	0x0000
    8bfc:	20000124 	.word	0x20000124
    8c00:	00009369 	.word	0x00009369
    8c04:	00008e81 	.word	0x00008e81
    8c08:	00009779 	.word	0x00009779
    8c0c:	b570      	push	{r4, r5, r6, lr}
    8c0e:	4c0f      	ldr	r4, [pc, #60]	; (8c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>)
    8c10:	68a5      	ldr	r5, [r4, #8]
    8c12:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    8c16:	2920      	cmp	r1, #32
    8c18:	d002      	beq.n	8c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>
    8c1a:	2926      	cmp	r1, #38	; 0x26
    8c1c:	d003      	beq.n	8c26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fa>
    8c1e:	e011      	b.n	8c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    8c20:	f000 fe3a 	bl	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8c24:	e008      	b.n	8c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    8c26:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    8c2a:	2301      	movs	r3, #1
    8c2c:	210b      	movs	r1, #11
    8c2e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8c32:	f004 fffa 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c36:	b138      	cbz	r0, 8c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8c38:	68a1      	ldr	r1, [r4, #8]
    8c3a:	2000      	movs	r0, #0
    8c3c:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8c40:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    8c44:	2000      	movs	r0, #0
    8c46:	bd70      	pop	{r4, r5, r6, pc}
    8c48:	202a      	movs	r0, #42	; 0x2a
    8c4a:	e7e9      	b.n	8c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>
    8c4c:	20000124 	.word	0x20000124
    8c50:	4804      	ldr	r0, [pc, #16]	; (8c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x238>)
    8c52:	2100      	movs	r1, #0
    8c54:	6880      	ldr	r0, [r0, #8]
    8c56:	f820 1fa8 	strh.w	r1, [r0, #168]!
    8c5a:	7881      	ldrb	r1, [r0, #2]
    8c5c:	1c49      	adds	r1, r1, #1
    8c5e:	7081      	strb	r1, [r0, #2]
    8c60:	4770      	bx	lr
    8c62:	0000      	.short	0x0000
    8c64:	20000124 	.word	0x20000124
    8c68:	4807      	ldr	r0, [pc, #28]	; (8c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25c>)
    8c6a:	b510      	push	{r4, lr}
    8c6c:	6881      	ldr	r1, [r0, #8]
    8c6e:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    8c72:	1e40      	subs	r0, r0, #1
    8c74:	b240      	sxtb	r0, r0
    8c76:	7008      	strb	r0, [r1, #0]
    8c78:	2800      	cmp	r0, #0
    8c7a:	da04      	bge.n	8c86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25a>
    8c7c:	f240 118f 	movw	r1, #399	; 0x18f
    8c80:	2031      	movs	r0, #49	; 0x31
    8c82:	f7fb fc5b 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c86:	bd10      	pop	{r4, pc}
    8c88:	20000124 	.word	0x20000124
    8c8c:	4917      	ldr	r1, [pc, #92]	; (8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>)
    8c8e:	b510      	push	{r4, lr}
    8c90:	6889      	ldr	r1, [r1, #8]
    8c92:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    8c96:	b1b8      	cbz	r0, 8cc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    8c98:	2a10      	cmp	r2, #16
    8c9a:	d006      	beq.n	8caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    8c9c:	2a14      	cmp	r2, #20
    8c9e:	d007      	beq.n	8cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>
    8ca0:	2a15      	cmp	r2, #21
    8ca2:	d008      	beq.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    8ca4:	2a1b      	cmp	r2, #27
    8ca6:	d11c      	bne.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    8ca8:	e008      	b.n	8cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x290>
    8caa:	2101      	movs	r1, #1
    8cac:	200b      	movs	r0, #11
    8cae:	e007      	b.n	8cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    8cb0:	f001 fa54 	bl	a15c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1730>
    8cb4:	e006      	b.n	8cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    8cb6:	f000 fd2b 	bl	9710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    8cba:	e003      	b.n	8cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    8cbc:	2101      	movs	r1, #1
    8cbe:	2006      	movs	r0, #6
    8cc0:	f000 fd08 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8cc4:	2001      	movs	r0, #1
    8cc6:	bd10      	pop	{r4, pc}
    8cc8:	2a21      	cmp	r2, #33	; 0x21
    8cca:	d10a      	bne.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    8ccc:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8cd0:	2802      	cmp	r0, #2
    8cd2:	d008      	beq.n	8ce6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8cd4:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8cd8:	2801      	cmp	r0, #1
    8cda:	d102      	bne.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    8cdc:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8ce0:	b108      	cbz	r0, 8ce6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8ce2:	2000      	movs	r0, #0
    8ce4:	bd10      	pop	{r4, pc}
    8ce6:	2101      	movs	r1, #1
    8ce8:	2017      	movs	r0, #23
    8cea:	e7e9      	b.n	8cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    8cec:	20000124 	.word	0x20000124
    8cf0:	b510      	push	{r4, lr}
    8cf2:	bbe8      	cbnz	r0, 8d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    8cf4:	4c31      	ldr	r4, [pc, #196]	; (8dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>)
    8cf6:	68a0      	ldr	r0, [r4, #8]
    8cf8:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8cfc:	07ca      	lsls	r2, r1, #31
    8cfe:	d002      	beq.n	8d06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    8d00:	2101      	movs	r1, #1
    8d02:	2009      	movs	r0, #9
    8d04:	e052      	b.n	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    8d06:	078a      	lsls	r2, r1, #30
    8d08:	d50a      	bpl.n	8d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>
    8d0a:	2101      	movs	r1, #1
    8d0c:	200c      	movs	r0, #12
    8d0e:	f000 fce1 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8d12:	68a0      	ldr	r0, [r4, #8]
    8d14:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8d18:	f041 0101 	orr.w	r1, r1, #1
    8d1c:	7001      	strb	r1, [r0, #0]
    8d1e:	e047      	b.n	8db0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8d20:	074a      	lsls	r2, r1, #29
    8d22:	d502      	bpl.n	8d2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2fe>
    8d24:	2101      	movs	r1, #1
    8d26:	2013      	movs	r0, #19
    8d28:	e040      	b.n	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    8d2a:	070a      	lsls	r2, r1, #28
    8d2c:	d505      	bpl.n	8d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30e>
    8d2e:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    8d32:	7141      	strb	r1, [r0, #5]
    8d34:	2101      	movs	r1, #1
    8d36:	2007      	movs	r0, #7
    8d38:	e038      	b.n	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    8d3a:	f011 0f30 	tst.w	r1, #48	; 0x30
    8d3e:	d03b      	beq.n	8db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8d40:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8d44:	b9a1      	cbnz	r1, 8d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    8d46:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8d4a:	b1e1      	cbz	r1, 8d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    8d4c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8d50:	2924      	cmp	r1, #36	; 0x24
    8d52:	d02f      	beq.n	8db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    8d54:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8d58:	2924      	cmp	r1, #36	; 0x24
    8d5a:	d02b      	beq.n	8db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    8d5c:	f05f 0300 	movs.w	r3, #0
    8d60:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8d64:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8d68:	f005 fb8d 	bl	e486 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8d6c:	68a1      	ldr	r1, [r4, #8]
    8d6e:	e000      	b.n	8d72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x346>
    8d70:	e022      	b.n	8db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8d72:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    8d76:	f020 0020 	bic.w	r0, r0, #32
    8d7a:	f040 0010 	orr.w	r0, r0, #16
    8d7e:	7008      	strb	r0, [r1, #0]
    8d80:	2000      	movs	r0, #0
    8d82:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    8d86:	68a0      	ldr	r0, [r4, #8]
    8d88:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8d8c:	06c9      	lsls	r1, r1, #27
    8d8e:	d513      	bpl.n	8db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8d90:	f005 fb94 	bl	e4bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8d94:	f000 f906 	bl	8fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    8d98:	68a1      	ldr	r1, [r4, #8]
    8d9a:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8d9e:	8bc2      	ldrh	r2, [r0, #30]
    8da0:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8da4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8da6:	8048      	strh	r0, [r1, #2]
    8da8:	2101      	movs	r1, #1
    8daa:	2015      	movs	r0, #21
    8dac:	f000 fc92 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8db0:	2001      	movs	r0, #1
    8db2:	bd10      	pop	{r4, pc}
    8db4:	2301      	movs	r3, #1
    8db6:	e7d3      	b.n	8d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    8db8:	2000      	movs	r0, #0
    8dba:	bd10      	pop	{r4, pc}
    8dbc:	20000124 	.word	0x20000124
    8dc0:	b570      	push	{r4, r5, r6, lr}
    8dc2:	460d      	mov	r5, r1
    8dc4:	4606      	mov	r6, r0
    8dc6:	f005 f9ab 	bl	e120 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8dca:	4604      	mov	r4, r0
    8dcc:	4630      	mov	r0, r6
    8dce:	f005 f9b3 	bl	e138 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8dd2:	4629      	mov	r1, r5
    8dd4:	f000 f81e 	bl	8e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    8dd8:	b1b8      	cbz	r0, 8e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    8dda:	4620      	mov	r0, r4
    8ddc:	f004 ffd1 	bl	dd82 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8de0:	0001      	movs	r1, r0
    8de2:	d00d      	beq.n	8e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8de4:	480a      	ldr	r0, [pc, #40]	; (8e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>)
    8de6:	6880      	ldr	r0, [r0, #8]
    8de8:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    8dec:	428a      	cmp	r2, r1
    8dee:	d007      	beq.n	8e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8df0:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8df4:	2901      	cmp	r1, #1
    8df6:	d005      	beq.n	8e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    8df8:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    8dfc:	4220      	tst	r0, r4
    8dfe:	d004      	beq.n	8e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    8e00:	2001      	movs	r0, #1
    8e02:	bd70      	pop	{r4, r5, r6, pc}
    8e04:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    8e08:	e7f8      	b.n	8dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    8e0a:	2000      	movs	r0, #0
    8e0c:	bd70      	pop	{r4, r5, r6, pc}
    8e0e:	0000      	.short	0x0000
    8e10:	20000124 	.word	0x20000124
    8e14:	b570      	push	{r4, r5, r6, lr}
    8e16:	460d      	mov	r5, r1
    8e18:	4604      	mov	r4, r0
    8e1a:	f004 ffb2 	bl	dd82 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8e1e:	b350      	cbz	r0, 8e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8e20:	4916      	ldr	r1, [pc, #88]	; (8e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>)
    8e22:	6889      	ldr	r1, [r1, #8]
    8e24:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    8e28:	4282      	cmp	r2, r0
    8e2a:	d024      	beq.n	8e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8e2c:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    8e30:	2b01      	cmp	r3, #1
    8e32:	d005      	beq.n	8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x414>
    8e34:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    8e38:	4223      	tst	r3, r4
    8e3a:	d013      	beq.n	8e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    8e3c:	b11d      	cbz	r5, 8e46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41a>
    8e3e:	e01a      	b.n	8e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8e40:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    8e44:	e7f8      	b.n	8e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    8e46:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    8e4a:	4221      	tst	r1, r4
    8e4c:	d113      	bne.n	8e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8e4e:	b15a      	cbz	r2, 8e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    8e50:	2a04      	cmp	r2, #4
    8e52:	d00e      	beq.n	8e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8e54:	2804      	cmp	r0, #4
    8e56:	d00c      	beq.n	8e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8e58:	2a08      	cmp	r2, #8
    8e5a:	d00a      	beq.n	8e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8e5c:	2808      	cmp	r0, #8
    8e5e:	d008      	beq.n	8e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8e60:	4282      	cmp	r2, r0
    8e62:	d908      	bls.n	8e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8e64:	2000      	movs	r0, #0
    8e66:	bd70      	pop	{r4, r5, r6, pc}
    8e68:	f240 118f 	movw	r1, #399	; 0x18f
    8e6c:	2006      	movs	r0, #6
    8e6e:	f7fb fb65 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e72:	4282      	cmp	r2, r0
    8e74:	d3f6      	bcc.n	8e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    8e76:	2001      	movs	r0, #1
    8e78:	bd70      	pop	{r4, r5, r6, pc}
    8e7a:	0000      	.short	0x0000
    8e7c:	20000124 	.word	0x20000124
    8e80:	490c      	ldr	r1, [pc, #48]	; (8eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>)
    8e82:	4602      	mov	r2, r0
    8e84:	7848      	ldrb	r0, [r1, #1]
    8e86:	b998      	cbnz	r0, 8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    8e88:	4608      	mov	r0, r1
    8e8a:	6880      	ldr	r0, [r0, #8]
    8e8c:	b142      	cbz	r2, 8ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>
    8e8e:	7909      	ldrb	r1, [r1, #4]
    8e90:	0709      	lsls	r1, r1, #28
    8e92:	d503      	bpl.n	8e9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    8e94:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    8e98:	2808      	cmp	r0, #8
    8e9a:	d009      	beq.n	8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    8e9c:	2001      	movs	r0, #1
    8e9e:	4770      	bx	lr
    8ea0:	f100 0128 	add.w	r1, r0, #40	; 0x28
    8ea4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8ea6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    8ea8:	428a      	cmp	r2, r1
    8eaa:	d801      	bhi.n	8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    8eac:	f7fe bd60 	b.w	7970 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8eb0:	2000      	movs	r0, #0
    8eb2:	4770      	bx	lr
    8eb4:	20000124 	.word	0x20000124
    8eb8:	b570      	push	{r4, r5, r6, lr}
    8eba:	4c39      	ldr	r4, [pc, #228]	; (8fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x574>)
    8ebc:	4605      	mov	r5, r0
    8ebe:	68a0      	ldr	r0, [r4, #8]
    8ec0:	3070      	adds	r0, #112	; 0x70
    8ec2:	f005 fff7 	bl	eeb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ec6:	2800      	cmp	r0, #0
    8ec8:	d169      	bne.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8eca:	2d00      	cmp	r5, #0
    8ecc:	d167      	bne.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8ece:	68a0      	ldr	r0, [r4, #8]
    8ed0:	2301      	movs	r3, #1
    8ed2:	4619      	mov	r1, r3
    8ed4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8ed8:	3070      	adds	r0, #112	; 0x70
    8eda:	f004 fea6 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ede:	2800      	cmp	r0, #0
    8ee0:	d15d      	bne.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8ee2:	68a0      	ldr	r0, [r4, #8]
    8ee4:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8ee8:	b149      	cbz	r1, 8efe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d2>
    8eea:	2100      	movs	r1, #0
    8eec:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8ef0:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8ef4:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8ef8:	2100      	movs	r1, #0
    8efa:	2002      	movs	r0, #2
    8efc:	e045      	b.n	8f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8efe:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f02:	2301      	movs	r3, #1
    8f04:	2104      	movs	r1, #4
    8f06:	3070      	adds	r0, #112	; 0x70
    8f08:	f004 fe8f 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f0c:	4605      	mov	r5, r0
    8f0e:	f7ff feef 	bl	8cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    8f12:	2800      	cmp	r0, #0
    8f14:	d143      	bne.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8f16:	4628      	mov	r0, r5
    8f18:	f7ff feb8 	bl	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>
    8f1c:	2800      	cmp	r0, #0
    8f1e:	d13e      	bne.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8f20:	68a0      	ldr	r0, [r4, #8]
    8f22:	2301      	movs	r3, #1
    8f24:	2100      	movs	r1, #0
    8f26:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8f2a:	3070      	adds	r0, #112	; 0x70
    8f2c:	f004 fe7d 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f30:	b178      	cbz	r0, 8f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    8f32:	68a0      	ldr	r0, [r4, #8]
    8f34:	2301      	movs	r3, #1
    8f36:	2104      	movs	r1, #4
    8f38:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f3c:	3070      	adds	r0, #112	; 0x70
    8f3e:	f004 fe74 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f42:	b930      	cbnz	r0, 8f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    8f44:	68a0      	ldr	r0, [r4, #8]
    8f46:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    8f4a:	b110      	cbz	r0, 8f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    8f4c:	2100      	movs	r1, #0
    8f4e:	2012      	movs	r0, #18
    8f50:	e01b      	b.n	8f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8f52:	68a0      	ldr	r0, [r4, #8]
    8f54:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8f58:	290a      	cmp	r1, #10
    8f5a:	d01a      	beq.n	8f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x566>
    8f5c:	2d00      	cmp	r5, #0
    8f5e:	d11e      	bne.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8f60:	f000 fb18 	bl	9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>
    8f64:	2800      	cmp	r0, #0
    8f66:	d11a      	bne.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8f68:	68a0      	ldr	r0, [r4, #8]
    8f6a:	2301      	movs	r3, #1
    8f6c:	2100      	movs	r1, #0
    8f6e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8f72:	3070      	adds	r0, #112	; 0x70
    8f74:	f004 fe59 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f78:	2800      	cmp	r0, #0
    8f7a:	d010      	beq.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8f7c:	68a0      	ldr	r0, [r4, #8]
    8f7e:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    8f82:	2800      	cmp	r0, #0
    8f84:	d00b      	beq.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8f86:	2100      	movs	r1, #0
    8f88:	20ff      	movs	r0, #255	; 0xff
    8f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f8e:	f000 bba1 	b.w	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8f92:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    8f96:	7101      	strb	r1, [r0, #4]
    8f98:	2100      	movs	r1, #0
    8f9a:	2007      	movs	r0, #7
    8f9c:	e7f5      	b.n	8f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8f9e:	bd70      	pop	{r4, r5, r6, pc}
    8fa0:	20000124 	.word	0x20000124
    8fa4:	b510      	push	{r4, lr}
    8fa6:	4c0a      	ldr	r4, [pc, #40]	; (8fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a4>)
    8fa8:	68a1      	ldr	r1, [r4, #8]
    8faa:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    8fae:	2801      	cmp	r0, #1
    8fb0:	d00a      	beq.n	8fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x59c>
    8fb2:	8808      	ldrh	r0, [r1, #0]
    8fb4:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8fb8:	3128      	adds	r1, #40	; 0x28
    8fba:	f005 fa40 	bl	e43e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8fbe:	78a0      	ldrb	r0, [r4, #2]
    8fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8fc4:	f7fb b90a 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8fc8:	2002      	movs	r0, #2
    8fca:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8fce:	bd10      	pop	{r4, pc}
    8fd0:	20000124 	.word	0x20000124
    8fd4:	b570      	push	{r4, r5, r6, lr}
    8fd6:	4c25      	ldr	r4, [pc, #148]	; (906c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    8fd8:	0005      	movs	r5, r0
    8fda:	d12f      	bne.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    8fdc:	f000 f8a4 	bl	9128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fc>
    8fe0:	f000 f848 	bl	9074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x648>
    8fe4:	0005      	movs	r5, r0
    8fe6:	d129      	bne.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    8fe8:	88a0      	ldrh	r0, [r4, #4]
    8fea:	0741      	lsls	r1, r0, #29
    8fec:	d506      	bpl.n	8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    8fee:	68a1      	ldr	r1, [r4, #8]
    8ff0:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    8ff4:	2907      	cmp	r1, #7
    8ff6:	d101      	bne.n	8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    8ff8:	2101      	movs	r1, #1
    8ffa:	7021      	strb	r1, [r4, #0]
    8ffc:	0780      	lsls	r0, r0, #30
    8ffe:	d512      	bpl.n	9026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    9000:	68e0      	ldr	r0, [r4, #12]
    9002:	78c0      	ldrb	r0, [r0, #3]
    9004:	2819      	cmp	r0, #25
    9006:	d205      	bcs.n	9014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>
    9008:	4919      	ldr	r1, [pc, #100]	; (9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>)
    900a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    900e:	b109      	cbz	r1, 9014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>
    9010:	4788      	blx	r1
    9012:	e008      	b.n	9026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    9014:	28ff      	cmp	r0, #255	; 0xff
    9016:	d004      	beq.n	9022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    9018:	f240 713c 	movw	r1, #1852	; 0x73c
    901c:	2031      	movs	r0, #49	; 0x31
    901e:	f7fb fa8d 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9022:	f001 f8cd 	bl	a1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1794>
    9026:	7920      	ldrb	r0, [r4, #4]
    9028:	06c0      	lsls	r0, r0, #27
    902a:	d507      	bpl.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    902c:	68a0      	ldr	r0, [r4, #8]
    902e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9032:	290b      	cmp	r1, #11
    9034:	d102      	bne.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    9036:	210c      	movs	r1, #12
    9038:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    903c:	7860      	ldrb	r0, [r4, #1]
    903e:	0700      	lsls	r0, r0, #28
    9040:	d511      	bpl.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63a>
    9042:	68a0      	ldr	r0, [r4, #8]
    9044:	2301      	movs	r3, #1
    9046:	2105      	movs	r1, #5
    9048:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    904c:	3070      	adds	r0, #112	; 0x70
    904e:	f004 fdec 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9052:	b128      	cbz	r0, 9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    9054:	68a1      	ldr	r1, [r4, #8]
    9056:	2508      	movs	r5, #8
    9058:	2000      	movs	r0, #0
    905a:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    905e:	e002      	b.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63a>
    9060:	2000      	movs	r0, #0
    9062:	f7fc fa11 	bl	5488 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9066:	4628      	mov	r0, r5
    9068:	bd70      	pop	{r4, r5, r6, pc}
    906a:	0000      	.short	0x0000
    906c:	20000124 	.word	0x20000124
    9070:	2000019c 	.word	0x2000019c
    9074:	b570      	push	{r4, r5, r6, lr}
    9076:	4c2a      	ldr	r4, [pc, #168]	; (9120 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f4>)
    9078:	2000      	movs	r0, #0
    907a:	7921      	ldrb	r1, [r4, #4]
    907c:	07c9      	lsls	r1, r1, #31
    907e:	d015      	beq.n	90ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    9080:	6920      	ldr	r0, [r4, #16]
    9082:	2301      	movs	r3, #1
    9084:	2105      	movs	r1, #5
    9086:	78c5      	ldrb	r5, [r0, #3]
    9088:	68a0      	ldr	r0, [r4, #8]
    908a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    908e:	3070      	adds	r0, #112	; 0x70
    9090:	f004 fdcb 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9094:	b158      	cbz	r0, 90ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    9096:	1ead      	subs	r5, r5, #2
    9098:	2d0a      	cmp	r5, #10
    909a:	d206      	bcs.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    909c:	e8df f005 	tbb	[pc, r5]
    90a0:	05050707 	.word	0x05050707
    90a4:	05050707 	.word	0x05050707
    90a8:	0707      	.short	0x0707
    90aa:	2008      	movs	r0, #8
    90ac:	bd70      	pop	{r4, r5, r6, pc}
    90ae:	6920      	ldr	r0, [r4, #16]
    90b0:	f7fd fa0c 	bl	64cc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    90b4:	b138      	cbz	r0, 90c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69a>
    90b6:	6920      	ldr	r0, [r4, #16]
    90b8:	78c5      	ldrb	r5, [r0, #3]
    90ba:	b145      	cbz	r5, 90ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    90bc:	2d01      	cmp	r5, #1
    90be:	d006      	beq.n	90ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    90c0:	2d16      	cmp	r5, #22
    90c2:	d118      	bne.n	90f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    90c4:	e003      	b.n	90ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    90c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90ca:	f000 bd0f 	b.w	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    90ce:	68a0      	ldr	r0, [r4, #8]
    90d0:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    90d4:	f004 fdf7 	bl	dcc6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    90d8:	b168      	cbz	r0, 90f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    90da:	68a1      	ldr	r1, [r4, #8]
    90dc:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    90e0:	281f      	cmp	r0, #31
    90e2:	d008      	beq.n	90f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    90e4:	2820      	cmp	r0, #32
    90e6:	d003      	beq.n	90f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c4>
    90e8:	2d16      	cmp	r5, #22
    90ea:	d00c      	beq.n	9106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    90ec:	2002      	movs	r0, #2
    90ee:	bd70      	pop	{r4, r5, r6, pc}
    90f0:	2026      	movs	r0, #38	; 0x26
    90f2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    90f6:	2d19      	cmp	r5, #25
    90f8:	d207      	bcs.n	910a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    90fa:	480a      	ldr	r0, [pc, #40]	; (9124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f8>)
    90fc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9100:	b118      	cbz	r0, 910a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    9102:	4780      	blx	r0
    9104:	e003      	b.n	910e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    9106:	2020      	movs	r0, #32
    9108:	bd70      	pop	{r4, r5, r6, pc}
    910a:	f000 fcef 	bl	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    910e:	68a2      	ldr	r2, [r4, #8]
    9110:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    9114:	1c49      	adds	r1, r1, #1
    9116:	f143 0300 	adc.w	r3, r3, #0
    911a:	e9c2 1300 	strd	r1, r3, [r2]
    911e:	bd70      	pop	{r4, r5, r6, pc}
    9120:	20000124 	.word	0x20000124
    9124:	20000138 	.word	0x20000138
    9128:	b570      	push	{r4, r5, r6, lr}
    912a:	4c22      	ldr	r4, [pc, #136]	; (91b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    912c:	7920      	ldrb	r0, [r4, #4]
    912e:	0700      	lsls	r0, r0, #28
    9130:	d53e      	bpl.n	91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    9132:	68a0      	ldr	r0, [r4, #8]
    9134:	3070      	adds	r0, #112	; 0x70
    9136:	f005 febd 	bl	eeb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    913a:	b148      	cbz	r0, 9150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x724>
    913c:	68a0      	ldr	r0, [r4, #8]
    913e:	21fe      	movs	r1, #254	; 0xfe
    9140:	2500      	movs	r5, #0
    9142:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    9146:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    914a:	2919      	cmp	r1, #25
    914c:	d10c      	bne.n	9168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73c>
    914e:	e004      	b.n	915a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    9150:	f240 7146 	movw	r1, #1862	; 0x746
    9154:	2031      	movs	r0, #49	; 0x31
    9156:	f7fb f9f1 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    915a:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    915e:	f7ff fd83 	bl	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9162:	68a0      	ldr	r0, [r4, #8]
    9164:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    9168:	68a0      	ldr	r0, [r4, #8]
    916a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    916e:	291f      	cmp	r1, #31
    9170:	d002      	beq.n	9178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>
    9172:	2927      	cmp	r1, #39	; 0x27
    9174:	d113      	bne.n	919e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x772>
    9176:	e00b      	b.n	9190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>
    9178:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    917c:	f004 fda3 	bl	dcc6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9180:	b108      	cbz	r0, 9186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75a>
    9182:	2026      	movs	r0, #38	; 0x26
    9184:	e000      	b.n	9188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    9186:	2020      	movs	r0, #32
    9188:	68a1      	ldr	r1, [r4, #8]
    918a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    918e:	e006      	b.n	919e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x772>
    9190:	2101      	movs	r1, #1
    9192:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    9196:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    919a:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    919e:	68a0      	ldr	r0, [r4, #8]
    91a0:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    91a4:	2908      	cmp	r1, #8
    91a6:	d103      	bne.n	91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    91a8:	2102      	movs	r1, #2
    91aa:	7021      	strb	r1, [r4, #0]
    91ac:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    91b0:	bd70      	pop	{r4, r5, r6, pc}
    91b2:	0000      	.short	0x0000
    91b4:	20000124 	.word	0x20000124
    91b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    91ba:	4605      	mov	r5, r0
    91bc:	4668      	mov	r0, sp
    91be:	f7fb fff1 	bl	51a4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    91c2:	b318      	cbz	r0, 920c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    91c4:	2222      	movs	r2, #34	; 0x22
    91c6:	2100      	movs	r1, #0
    91c8:	9800      	ldr	r0, [sp, #0]
    91ca:	f003 fc34 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    91ce:	2103      	movs	r1, #3
    91d0:	9800      	ldr	r0, [sp, #0]
    91d2:	f005 f805 	bl	e1e0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    91d6:	9800      	ldr	r0, [sp, #0]
    91d8:	7801      	ldrb	r1, [r0, #0]
    91da:	f021 0110 	bic.w	r1, r1, #16
    91de:	7001      	strb	r1, [r0, #0]
    91e0:	4629      	mov	r1, r5
    91e2:	f7fd f99f 	bl	6524 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    91e6:	2100      	movs	r1, #0
    91e8:	4c5e      	ldr	r4, [pc, #376]	; (9364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>)
    91ea:	f644 162f 	movw	r6, #18735	; 0x492f
    91ee:	2d0e      	cmp	r5, #14
    91f0:	d07e      	beq.n	92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    91f2:	dc0e      	bgt.n	9212 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e6>
    91f4:	f1a5 0502 	sub.w	r5, r5, #2
    91f8:	2d0c      	cmp	r5, #12
    91fa:	d21c      	bcs.n	9236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    91fc:	e8df f005 	tbb	[pc, r5]
    9200:	a7451b1e 	.word	0xa7451b1e
    9204:	511b1ea7 	.word	0x511b1ea7
    9208:	3723a71b 	.word	0x3723a71b
    920c:	f640 116b 	movw	r1, #2411	; 0x96b
    9210:	e0a3      	b.n	935a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92e>
    9212:	2d15      	cmp	r5, #21
    9214:	d058      	beq.n	92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    9216:	dc08      	bgt.n	922a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fe>
    9218:	2d11      	cmp	r5, #17
    921a:	d01f      	beq.n	925c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x830>
    921c:	2d12      	cmp	r5, #18
    921e:	d01c      	beq.n	925a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x82e>
    9220:	2d13      	cmp	r5, #19
    9222:	d01a      	beq.n	925a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x82e>
    9224:	2d14      	cmp	r5, #20
    9226:	d106      	bne.n	9236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    9228:	e04e      	b.n	92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    922a:	2d16      	cmp	r5, #22
    922c:	d023      	beq.n	9276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    922e:	2d17      	cmp	r5, #23
    9230:	d065      	beq.n	92fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    9232:	2dff      	cmp	r5, #255	; 0xff
    9234:	d07e      	beq.n	9334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x908>
    9236:	f640 11dd 	movw	r1, #2525	; 0x9dd
    923a:	e08e      	b.n	935a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92e>
    923c:	68a1      	ldr	r1, [r4, #8]
    923e:	9800      	ldr	r0, [sp, #0]
    9240:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    9244:	e015      	b.n	9272 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x846>
    9246:	9800      	ldr	r0, [sp, #0]
    9248:	220b      	movs	r2, #11
    924a:	7102      	strb	r2, [r0, #4]
    924c:	2259      	movs	r2, #89	; 0x59
    924e:	7142      	strb	r2, [r0, #5]
    9250:	7181      	strb	r1, [r0, #6]
    9252:	212b      	movs	r1, #43	; 0x2b
    9254:	71c1      	strb	r1, [r0, #7]
    9256:	2112      	movs	r1, #18
    9258:	7201      	strb	r1, [r0, #8]
    925a:	e078      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    925c:	2103      	movs	r1, #3
    925e:	9800      	ldr	r0, [sp, #0]
    9260:	f004 ff9a 	bl	e198 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9264:	2106      	movs	r1, #6
    9266:	9800      	ldr	r0, [sp, #0]
    9268:	f004 ff98 	bl	e19c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    926c:	e06f      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    926e:	9800      	ldr	r0, [sp, #0]
    9270:	2106      	movs	r1, #6
    9272:	7101      	strb	r1, [r0, #4]
    9274:	e06b      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    9276:	9800      	ldr	r0, [sp, #0]
    9278:	f8d4 1008 	ldr.w	r1, [r4, #8]
    927c:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    9280:	7102      	strb	r2, [r0, #4]
    9282:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    9286:	7141      	strb	r1, [r0, #5]
    9288:	e061      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    928a:	68a1      	ldr	r1, [r4, #8]
    928c:	9800      	ldr	r0, [sp, #0]
    928e:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9292:	f004 ff96 	bl	e1c2 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9296:	68a1      	ldr	r1, [r4, #8]
    9298:	9800      	ldr	r0, [sp, #0]
    929a:	31dc      	adds	r1, #220	; 0xdc
    929c:	f004 ff8e 	bl	e1bc <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    92a0:	e055      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    92a2:	9101      	str	r1, [sp, #4]
    92a4:	9102      	str	r1, [sp, #8]
    92a6:	f001 fe67 	bl	af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    92aa:	68a1      	ldr	r1, [r4, #8]
    92ac:	4030      	ands	r0, r6
    92ae:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    92b2:	4001      	ands	r1, r0
    92b4:	f88d 1004 	strb.w	r1, [sp, #4]
    92b8:	0a00      	lsrs	r0, r0, #8
    92ba:	f88d 0005 	strb.w	r0, [sp, #5]
    92be:	a901      	add	r1, sp, #4
    92c0:	9800      	ldr	r0, [sp, #0]
    92c2:	f004 ff88 	bl	e1d6 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    92c6:	e042      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    92c8:	68a0      	ldr	r0, [r4, #8]
    92ca:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    92ce:	9800      	ldr	r0, [sp, #0]
    92d0:	f004 ff8e 	bl	e1f0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    92d4:	68a0      	ldr	r0, [r4, #8]
    92d6:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    92da:	9800      	ldr	r0, [sp, #0]
    92dc:	f004 ff8c 	bl	e1f8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    92e0:	68a0      	ldr	r0, [r4, #8]
    92e2:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    92e6:	9800      	ldr	r0, [sp, #0]
    92e8:	f004 ff8a 	bl	e200 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    92ec:	68a0      	ldr	r0, [r4, #8]
    92ee:	e000      	b.n	92f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c6>
    92f0:	e010      	b.n	9314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8e8>
    92f2:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    92f6:	9800      	ldr	r0, [sp, #0]
    92f8:	f004 ff86 	bl	e208 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    92fc:	e027      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    92fe:	68a1      	ldr	r1, [r4, #8]
    9300:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    9304:	2801      	cmp	r0, #1
    9306:	9800      	ldr	r0, [sp, #0]
    9308:	d0b8      	beq.n	927c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x850>
    930a:	f811 2f62 	ldrb.w	r2, [r1, #98]!
    930e:	7102      	strb	r2, [r0, #4]
    9310:	7849      	ldrb	r1, [r1, #1]
    9312:	e7b8      	b.n	9286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    9314:	9101      	str	r1, [sp, #4]
    9316:	9102      	str	r1, [sp, #8]
    9318:	f001 fe2e 	bl	af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    931c:	68a1      	ldr	r1, [r4, #8]
    931e:	4030      	ands	r0, r6
    9320:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    9324:	4001      	ands	r1, r0
    9326:	f88d 1004 	strb.w	r1, [sp, #4]
    932a:	0a00      	lsrs	r0, r0, #8
    932c:	f88d 0005 	strb.w	r0, [sp, #5]
    9330:	a901      	add	r1, sp, #4
    9332:	e000      	b.n	9336 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90a>
    9334:	e003      	b.n	933e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x912>
    9336:	9800      	ldr	r0, [sp, #0]
    9338:	f004 ff48 	bl	e1cc <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    933c:	e007      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    933e:	68a0      	ldr	r0, [r4, #8]
    9340:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    9344:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    9348:	9800      	ldr	r0, [sp, #0]
    934a:	f004 ff29 	bl	e1a0 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    934e:	f7fb ff03 	bl	5158 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9352:	2800      	cmp	r0, #0
    9354:	d104      	bne.n	9360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x934>
    9356:	f640 11e1 	movw	r1, #2529	; 0x9e1
    935a:	2031      	movs	r0, #49	; 0x31
    935c:	f7fb f8ee 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9360:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9362:	0000      	.short	0x0000
    9364:	20000124 	.word	0x20000124
    9368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    936c:	4c88      	ldr	r4, [pc, #544]	; (9590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>)
    936e:	4682      	mov	sl, r0
    9370:	4689      	mov	r9, r1
    9372:	68a0      	ldr	r0, [r4, #8]
    9374:	8800      	ldrh	r0, [r0, #0]
    9376:	f7fb fd07 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    937a:	0006      	movs	r6, r0
    937c:	d00a      	beq.n	9394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    937e:	88a0      	ldrh	r0, [r4, #4]
    9380:	f04f 0500 	mov.w	r5, #0
    9384:	05c0      	lsls	r0, r0, #23
    9386:	68a0      	ldr	r0, [r4, #8]
    9388:	d509      	bpl.n	939e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    938a:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    938e:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    9392:	e008      	b.n	93a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9394:	f640 517d 	movw	r1, #3453	; 0xd7d
    9398:	2031      	movs	r0, #49	; 0x31
    939a:	f7fb f8cf 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    939e:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    93a2:	1c49      	adds	r1, r1, #1
    93a4:	8001      	strh	r1, [r0, #0]
    93a6:	f001 f8a7 	bl	a4f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    93aa:	f04f 0801 	mov.w	r8, #1
    93ae:	b328      	cbz	r0, 93fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    93b0:	88a0      	ldrh	r0, [r4, #4]
    93b2:	0500      	lsls	r0, r0, #20
    93b4:	d506      	bpl.n	93c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>
    93b6:	68a0      	ldr	r0, [r4, #8]
    93b8:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    93bc:	b111      	cbz	r1, 93c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>
    93be:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    93c2:	e01b      	b.n	93fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    93c4:	68a0      	ldr	r0, [r4, #8]
    93c6:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    93ca:	1c49      	adds	r1, r1, #1
    93cc:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    93d0:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
    93d4:	428a      	cmp	r2, r1
    93d6:	d301      	bcc.n	93dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b0>
    93d8:	1a53      	subs	r3, r2, r1
    93da:	e000      	b.n	93de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    93dc:	2300      	movs	r3, #0
    93de:	88e7      	ldrh	r7, [r4, #6]
    93e0:	1d7f      	adds	r7, r7, #5
    93e2:	42bb      	cmp	r3, r7
    93e4:	d801      	bhi.n	93ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9be>
    93e6:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    93ea:	4291      	cmp	r1, r2
    93ec:	d306      	bcc.n	93fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    93ee:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    93f2:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    93f6:	78a0      	ldrb	r0, [r4, #2]
    93f8:	f7fa fef0 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    93fc:	88a0      	ldrh	r0, [r4, #4]
    93fe:	f04f 0702 	mov.w	r7, #2
    9402:	f410 7f40 	tst.w	r0, #768	; 0x300
    9406:	d00e      	beq.n	9426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fa>
    9408:	68a0      	ldr	r0, [r4, #8]
    940a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    940e:	b111      	cbz	r1, 9416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ea>
    9410:	2903      	cmp	r1, #3
    9412:	d108      	bne.n	9426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fa>
    9414:	e002      	b.n	941c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f0>
    9416:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    941a:	e001      	b.n	9420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    941c:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    9420:	2101      	movs	r1, #1
    9422:	f7fe fac7 	bl	79b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9426:	68a0      	ldr	r0, [r4, #8]
    9428:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    942c:	2901      	cmp	r1, #1
    942e:	d104      	bne.n	943a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    9430:	88a1      	ldrh	r1, [r4, #4]
    9432:	0549      	lsls	r1, r1, #21
    9434:	d501      	bpl.n	943a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    9436:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    943a:	f1ba 0f00 	cmp.w	sl, #0
    943e:	d175      	bne.n	952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb00>
    9440:	7921      	ldrb	r1, [r4, #4]
    9442:	0649      	lsls	r1, r1, #25
    9444:	d502      	bpl.n	944c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    9446:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    944a:	e004      	b.n	9456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    944c:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    9450:	1c49      	adds	r1, r1, #1
    9452:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    9456:	4648      	mov	r0, r9
    9458:	f7ff fdbc 	bl	8fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    945c:	ea40 0009 	orr.w	r0, r0, r9
    9460:	4681      	mov	r9, r0
    9462:	f7ff fd29 	bl	8eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    9466:	68a7      	ldr	r7, [r4, #8]
    9468:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    946c:	1c40      	adds	r0, r0, #1
    946e:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    9472:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    9476:	b128      	cbz	r0, 9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    9478:	f7fc f874 	bl	5564 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    947c:	b1a8      	cbz	r0, 94aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    947e:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    9482:	e012      	b.n	94aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    9484:	f7fb ff10 	bl	52a8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9488:	b108      	cbz	r0, 948e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    948a:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    948e:	f7fb ff05 	bl	529c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9492:	b150      	cbz	r0, 94aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    9494:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    9498:	1c40      	adds	r0, r0, #1
    949a:	b2c0      	uxtb	r0, r0
    949c:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    94a0:	2802      	cmp	r0, #2
    94a2:	d902      	bls.n	94aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    94a4:	f827 5ff8 	strh.w	r5, [r7, #248]!
    94a8:	733d      	strb	r5, [r7, #12]
    94aa:	68a0      	ldr	r0, [r4, #8]
    94ac:	2301      	movs	r3, #1
    94ae:	2100      	movs	r1, #0
    94b0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    94b4:	3070      	adds	r0, #112	; 0x70
    94b6:	f004 fbb8 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94ba:	b920      	cbnz	r0, 94c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa9a>
    94bc:	68a0      	ldr	r0, [r4, #8]
    94be:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    94c2:	280c      	cmp	r0, #12
    94c4:	d149      	bne.n	955a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    94c6:	68a0      	ldr	r0, [r4, #8]
    94c8:	2301      	movs	r3, #1
    94ca:	2100      	movs	r1, #0
    94cc:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    94d0:	3070      	adds	r0, #112	; 0x70
    94d2:	f004 fbaa 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94d6:	b350      	cbz	r0, 952e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    94d8:	68a0      	ldr	r0, [r4, #8]
    94da:	2301      	movs	r3, #1
    94dc:	2100      	movs	r1, #0
    94de:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    94e2:	3070      	adds	r0, #112	; 0x70
    94e4:	f004 fba1 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94e8:	b308      	cbz	r0, 952e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    94ea:	68a0      	ldr	r0, [r4, #8]
    94ec:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    94f0:	2902      	cmp	r1, #2
    94f2:	d132      	bne.n	955a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    94f4:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    94f8:	b9c8      	cbnz	r0, 952e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    94fa:	4630      	mov	r0, r6
    94fc:	f003 ff79 	bl	d3f2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9500:	b1a8      	cbz	r0, 952e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    9502:	68a0      	ldr	r0, [r4, #8]
    9504:	3070      	adds	r0, #112	; 0x70
    9506:	f005 fcd5 	bl	eeb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    950a:	b980      	cbnz	r0, 952e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    950c:	68a2      	ldr	r2, [r4, #8]
    950e:	f8b2 00f2 	ldrh.w	r0, [r2, #242]	; 0xf2
    9512:	2801      	cmp	r0, #1
    9514:	d921      	bls.n	955a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    9516:	f882 80fa 	strb.w	r8, [r2, #250]	; 0xfa
    951a:	f8b2 109e 	ldrh.w	r1, [r2, #158]	; 0x9e
    951e:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    9522:	1e8b      	subs	r3, r1, #2
    9524:	4298      	cmp	r0, r3
    9526:	db03      	blt.n	9530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9528:	2001      	movs	r0, #1
    952a:	e004      	b.n	9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    952c:	e021      	b.n	9572 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb46>
    952e:	e014      	b.n	955a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    9530:	1a08      	subs	r0, r1, r0
    9532:	1e40      	subs	r0, r0, #1
    9534:	b280      	uxth	r0, r0
    9536:	f8b2 10f8 	ldrh.w	r1, [r2, #248]	; 0xf8
    953a:	88e3      	ldrh	r3, [r4, #6]
    953c:	4299      	cmp	r1, r3
    953e:	d301      	bcc.n	9544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    9540:	2101      	movs	r1, #1
    9542:	e002      	b.n	954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb1e>
    9544:	1a59      	subs	r1, r3, r1
    9546:	1c49      	adds	r1, r1, #1
    9548:	b289      	uxth	r1, r1
    954a:	4288      	cmp	r0, r1
    954c:	d900      	bls.n	9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb24>
    954e:	4608      	mov	r0, r1
    9550:	2801      	cmp	r0, #1
    9552:	d106      	bne.n	9562 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb36>
    9554:	f882 50fa 	strb.w	r5, [r2, #250]	; 0xfa
    9558:	e003      	b.n	9562 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb36>
    955a:	68a1      	ldr	r1, [r4, #8]
    955c:	2001      	movs	r0, #1
    955e:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    9562:	68a1      	ldr	r1, [r4, #8]
    9564:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    9568:	4410      	add	r0, r2
    956a:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    956e:	f001 f883 	bl	a678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c4c>
    9572:	7920      	ldrb	r0, [r4, #4]
    9574:	464a      	mov	r2, r9
    9576:	f3c0 1180 	ubfx	r1, r0, #6, #1
    957a:	4650      	mov	r0, sl
    957c:	f000 ffd0 	bl	a520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9580:	68a0      	ldr	r0, [r4, #8]
    9582:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    9586:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    958a:	f7fb bdcf 	b.w	512c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    958e:	0000      	.short	0x0000
    9590:	20000124 	.word	0x20000124
    9594:	b570      	push	{r4, r5, r6, lr}
    9596:	4c4e      	ldr	r4, [pc, #312]	; (96d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca4>)
    9598:	2301      	movs	r3, #1
    959a:	2100      	movs	r1, #0
    959c:	68a0      	ldr	r0, [r4, #8]
    959e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    95a2:	3070      	adds	r0, #112	; 0x70
    95a4:	f004 fb41 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95a8:	2800      	cmp	r0, #0
    95aa:	d076      	beq.n	969a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6e>
    95ac:	68a0      	ldr	r0, [r4, #8]
    95ae:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    95b2:	2500      	movs	r5, #0
    95b4:	b139      	cbz	r1, 95c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9a>
    95b6:	2100      	movs	r1, #0
    95b8:	200e      	movs	r0, #14
    95ba:	f000 f88b 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    95be:	68a0      	ldr	r0, [r4, #8]
    95c0:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    95c4:	e082      	b.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    95c6:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    95ca:	b119      	cbz	r1, 95d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    95cc:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    95d0:	0789      	lsls	r1, r1, #30
    95d2:	d00a      	beq.n	95ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbe>
    95d4:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    95d8:	b111      	cbz	r1, 95e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb4>
    95da:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    95de:	b189      	cbz	r1, 9604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd8>
    95e0:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    95e4:	2901      	cmp	r1, #1
    95e6:	d02f      	beq.n	9648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc1c>
    95e8:	e06a      	b.n	96c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    95ea:	2100      	movs	r1, #0
    95ec:	200c      	movs	r0, #12
    95ee:	f000 f871 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    95f2:	68a0      	ldr	r0, [r4, #8]
    95f4:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    95f8:	f041 0101 	orr.w	r1, r1, #1
    95fc:	7001      	strb	r1, [r0, #0]
    95fe:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    9602:	e063      	b.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    9604:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9608:	2924      	cmp	r1, #36	; 0x24
    960a:	d01b      	beq.n	9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    960c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9610:	2924      	cmp	r1, #36	; 0x24
    9612:	d017      	beq.n	9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    9614:	f05f 0300 	movs.w	r3, #0
    9618:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    961c:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    9620:	f004 ff31 	bl	e486 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9624:	68a0      	ldr	r0, [r4, #8]
    9626:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    962a:	2100      	movs	r1, #0
    962c:	2014      	movs	r0, #20
    962e:	f000 f851 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    9632:	68a1      	ldr	r1, [r4, #8]
    9634:	f101 0028 	add.w	r0, r1, #40	; 0x28
    9638:	8bc2      	ldrh	r2, [r0, #30]
    963a:	f821 2fe6 	strh.w	r2, [r1, #230]!
    963e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9640:	8048      	strh	r0, [r1, #2]
    9642:	e043      	b.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    9644:	2301      	movs	r3, #1
    9646:	e7e7      	b.n	9618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbec>
    9648:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    964c:	bb21      	cbnz	r1, 9698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    964e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9652:	2301      	movs	r3, #1
    9654:	210b      	movs	r1, #11
    9656:	3070      	adds	r0, #112	; 0x70
    9658:	f004 fae7 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    965c:	b9e0      	cbnz	r0, 9698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    965e:	68a0      	ldr	r0, [r4, #8]
    9660:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    9664:	f005 fc2e 	bl	eec4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9668:	4605      	mov	r5, r0
    966a:	68a0      	ldr	r0, [r4, #8]
    966c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    9670:	f005 fc28 	bl	eec4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9674:	4606      	mov	r6, r0
    9676:	68a0      	ldr	r0, [r4, #8]
    9678:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    967c:	4628      	mov	r0, r5
    967e:	f005 fc2c 	bl	eeda <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9682:	b158      	cbz	r0, 969c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    9684:	68a0      	ldr	r0, [r4, #8]
    9686:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    968a:	4630      	mov	r0, r6
    968c:	f005 fc25 	bl	eeda <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9690:	b120      	cbz	r0, 969c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    9692:	2000      	movs	r0, #0
    9694:	f000 f900 	bl	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9698:	e012      	b.n	96c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    969a:	e012      	b.n	96c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc96>
    969c:	68a0      	ldr	r0, [r4, #8]
    969e:	2301      	movs	r3, #1
    96a0:	2103      	movs	r1, #3
    96a2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    96a6:	3070      	adds	r0, #112	; 0x70
    96a8:	f004 fabf 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96ac:	b940      	cbnz	r0, 96c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    96ae:	68a0      	ldr	r0, [r4, #8]
    96b0:	2301      	movs	r3, #1
    96b2:	2102      	movs	r1, #2
    96b4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    96b8:	3070      	adds	r0, #112	; 0x70
    96ba:	f004 fab6 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96be:	b108      	cbz	r0, 96c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    96c0:	2000      	movs	r0, #0
    96c2:	bd70      	pop	{r4, r5, r6, pc}
    96c4:	2100      	movs	r1, #0
    96c6:	2016      	movs	r0, #22
    96c8:	f000 f804 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    96cc:	2001      	movs	r0, #1
    96ce:	bd70      	pop	{r4, r5, r6, pc}
    96d0:	20000124 	.word	0x20000124
    96d4:	b570      	push	{r4, r5, r6, lr}
    96d6:	4c0d      	ldr	r4, [pc, #52]	; (970c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>)
    96d8:	4606      	mov	r6, r0
    96da:	460d      	mov	r5, r1
    96dc:	68a0      	ldr	r0, [r4, #8]
    96de:	3070      	adds	r0, #112	; 0x70
    96e0:	f005 fbe8 	bl	eeb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    96e4:	b120      	cbz	r0, 96f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc4>
    96e6:	f640 11f4 	movw	r1, #2548	; 0x9f4
    96ea:	2031      	movs	r0, #49	; 0x31
    96ec:	f7fa ff26 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96f0:	68a2      	ldr	r2, [r4, #8]
    96f2:	2000      	movs	r0, #0
    96f4:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    96f8:	b115      	cbz	r5, 9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    96fa:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    96fe:	bd70      	pop	{r4, r5, r6, pc}
    9700:	f822 0fa2 	strh.w	r0, [r2, #162]!
    9704:	2001      	movs	r0, #1
    9706:	7110      	strb	r0, [r2, #4]
    9708:	bd70      	pop	{r4, r5, r6, pc}
    970a:	0000      	.short	0x0000
    970c:	20000124 	.word	0x20000124
    9710:	b570      	push	{r4, r5, r6, lr}
    9712:	4c18      	ldr	r4, [pc, #96]	; (9774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    9714:	2500      	movs	r5, #0
    9716:	68a0      	ldr	r0, [r4, #8]
    9718:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    971c:	2901      	cmp	r1, #1
    971e:	d00a      	beq.n	9736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0a>
    9720:	2902      	cmp	r1, #2
    9722:	d125      	bne.n	9770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9724:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    9728:	b1a9      	cbz	r1, 9756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2a>
    972a:	2106      	movs	r1, #6
    972c:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    9730:	2101      	movs	r1, #1
    9732:	2002      	movs	r0, #2
    9734:	e017      	b.n	9766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    9736:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    973a:	2900      	cmp	r1, #0
    973c:	d118      	bne.n	9770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    973e:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    9742:	f500 7184 	add.w	r1, r0, #264	; 0x108
    9746:	2200      	movs	r2, #0
    9748:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    974c:	f004 fa25 	bl	db9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9750:	2101      	movs	r1, #1
    9752:	2005      	movs	r0, #5
    9754:	e007      	b.n	9766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    9756:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    975a:	0740      	lsls	r0, r0, #29
    975c:	d501      	bpl.n	9762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    975e:	2011      	movs	r0, #17
    9760:	e000      	b.n	9764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9762:	200d      	movs	r0, #13
    9764:	2101      	movs	r1, #1
    9766:	f7ff ffb5 	bl	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    976a:	68a0      	ldr	r0, [r4, #8]
    976c:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    9770:	bd70      	pop	{r4, r5, r6, pc}
    9772:	0000      	.short	0x0000
    9774:	20000124 	.word	0x20000124
    9778:	b570      	push	{r4, r5, r6, lr}
    977a:	4a2b      	ldr	r2, [pc, #172]	; (9828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfc>)
    977c:	4603      	mov	r3, r0
    977e:	8890      	ldrh	r0, [r2, #4]
    9780:	4318      	orrs	r0, r3
    9782:	8090      	strh	r0, [r2, #4]
    9784:	4610      	mov	r0, r2
    9786:	2b40      	cmp	r3, #64	; 0x40
    9788:	6880      	ldr	r0, [r0, #8]
    978a:	d00d      	beq.n	97a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7c>
    978c:	079e      	lsls	r6, r3, #30
    978e:	f04f 0500 	mov.w	r5, #0
    9792:	f04f 0401 	mov.w	r4, #1
    9796:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    979a:	d50c      	bpl.n	97b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8a>
    979c:	b14e      	cbz	r6, 97b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd86>
    979e:	f44f 614f 	mov.w	r1, #3312	; 0xcf0
    97a2:	2031      	movs	r0, #49	; 0x31
    97a4:	f7fa feca 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    97ac:	2104      	movs	r1, #4
    97ae:	f7fe b901 	b.w	79b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    97b2:	60d1      	str	r1, [r2, #12]
    97b4:	e01c      	b.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    97b6:	b1c6      	cbz	r6, 97ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    97b8:	6111      	str	r1, [r2, #16]
    97ba:	78c9      	ldrb	r1, [r1, #3]
    97bc:	2906      	cmp	r1, #6
    97be:	d002      	beq.n	97c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9a>
    97c0:	290b      	cmp	r1, #11
    97c2:	d112      	bne.n	97ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    97c4:	e009      	b.n	97da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    97c6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    97ca:	2917      	cmp	r1, #23
    97cc:	d10d      	bne.n	97ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    97ce:	2100      	movs	r1, #0
    97d0:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    97d4:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    97d8:	e007      	b.n	97ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    97da:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    97de:	2911      	cmp	r1, #17
    97e0:	d103      	bne.n	97ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    97e2:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    97e6:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    97ea:	0799      	lsls	r1, r3, #30
    97ec:	d516      	bpl.n	981c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    97ee:	68d1      	ldr	r1, [r2, #12]
    97f0:	78c9      	ldrb	r1, [r1, #3]
    97f2:	2905      	cmp	r1, #5
    97f4:	d002      	beq.n	97fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    97f6:	290b      	cmp	r1, #11
    97f8:	d110      	bne.n	981c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    97fa:	e009      	b.n	9810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde4>
    97fc:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9800:	2915      	cmp	r1, #21
    9802:	d10b      	bne.n	981c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9804:	2100      	movs	r1, #0
    9806:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    980a:	f800 4c3d 	strb.w	r4, [r0, #-61]
    980e:	e005      	b.n	981c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9810:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9814:	2910      	cmp	r1, #16
    9816:	d101      	bne.n	981c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9818:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    981c:	0698      	lsls	r0, r3, #26
    981e:	d501      	bpl.n	9824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    9820:	2008      	movs	r0, #8
    9822:	7050      	strb	r0, [r2, #1]
    9824:	bd70      	pop	{r4, r5, r6, pc}
    9826:	0000      	.short	0x0000
    9828:	20000124 	.word	0x20000124
    982c:	b570      	push	{r4, r5, r6, lr}
    982e:	4c19      	ldr	r4, [pc, #100]	; (9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>)
    9830:	68a0      	ldr	r0, [r4, #8]
    9832:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    9836:	b109      	cbz	r1, 983c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    9838:	2601      	movs	r6, #1
    983a:	e000      	b.n	983e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    983c:	2600      	movs	r6, #0
    983e:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    9842:	b10a      	cbz	r2, 9848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1c>
    9844:	2501      	movs	r5, #1
    9846:	e000      	b.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    9848:	2500      	movs	r5, #0
    984a:	b90e      	cbnz	r6, 9850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    984c:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    9850:	b90d      	cbnz	r5, 9856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2a>
    9852:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    9856:	f100 035e 	add.w	r3, r0, #94	; 0x5e
    985a:	7219      	strb	r1, [r3, #8]
    985c:	725a      	strb	r2, [r3, #9]
    985e:	2101      	movs	r1, #1
    9860:	7299      	strb	r1, [r3, #10]
    9862:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    9866:	2801      	cmp	r0, #1
    9868:	d001      	beq.n	986e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    986a:	b906      	cbnz	r6, 986e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    986c:	b115      	cbz	r5, 9874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    986e:	2000      	movs	r0, #0
    9870:	f000 f812 	bl	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9874:	68a0      	ldr	r0, [r4, #8]
    9876:	f004 fe21 	bl	e4bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    987a:	2800      	cmp	r0, #0
    987c:	d008      	beq.n	9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    987e:	68a1      	ldr	r1, [r4, #8]
    9880:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    9884:	8808      	ldrh	r0, [r1, #0]
    9886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    988a:	3128      	adds	r1, #40	; 0x28
    988c:	f004 bdd7 	b.w	e43e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9890:	bd70      	pop	{r4, r5, r6, pc}
    9892:	0000      	.short	0x0000
    9894:	20000124 	.word	0x20000124
    9898:	b510      	push	{r4, lr}
    989a:	4c10      	ldr	r4, [pc, #64]	; (98dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb0>)
    989c:	68a1      	ldr	r1, [r4, #8]
    989e:	880a      	ldrh	r2, [r1, #0]
    98a0:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    98a4:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    98a8:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    98ac:	f005 fb0a 	bl	eec4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    98b0:	68a1      	ldr	r1, [r4, #8]
    98b2:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    98b6:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    98ba:	f005 fb03 	bl	eec4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    98be:	68a2      	ldr	r2, [r4, #8]
    98c0:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    98c4:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    98c8:	2001      	movs	r0, #1
    98ca:	7008      	strb	r0, [r1, #0]
    98cc:	2000      	movs	r0, #0
    98ce:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    98d2:	78a0      	ldrb	r0, [r4, #2]
    98d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98d8:	f7fa bc80 	b.w	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    98dc:	20000124 	.word	0x20000124
    98e0:	b510      	push	{r4, lr}
    98e2:	4c15      	ldr	r4, [pc, #84]	; (9938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>)
    98e4:	2301      	movs	r3, #1
    98e6:	2100      	movs	r1, #0
    98e8:	68a0      	ldr	r0, [r4, #8]
    98ea:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    98ee:	3070      	adds	r0, #112	; 0x70
    98f0:	f004 f99b 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98f4:	b190      	cbz	r0, 991c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef0>
    98f6:	6920      	ldr	r0, [r4, #16]
    98f8:	f004 fbeb 	bl	e0d2 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    98fc:	68a1      	ldr	r1, [r4, #8]
    98fe:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9902:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9906:	f005 faf6 	bl	eef6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    990a:	b148      	cbz	r0, 9920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    990c:	68a0      	ldr	r0, [r4, #8]
    990e:	2128      	movs	r1, #40	; 0x28
    9910:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9914:	306f      	adds	r0, #111	; 0x6f
    9916:	2101      	movs	r1, #1
    9918:	7781      	strb	r1, [r0, #30]
    991a:	e00b      	b.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    991c:	2001      	movs	r0, #1
    991e:	bd10      	pop	{r4, pc}
    9920:	68a1      	ldr	r1, [r4, #8]
    9922:	6920      	ldr	r0, [r4, #16]
    9924:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    9928:	f004 fbce 	bl	e0c8 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    992c:	68a1      	ldr	r1, [r4, #8]
    992e:	200b      	movs	r0, #11
    9930:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9934:	2000      	movs	r0, #0
    9936:	bd10      	pop	{r4, pc}
    9938:	20000124 	.word	0x20000124
    993c:	b570      	push	{r4, r5, r6, lr}
    993e:	4c29      	ldr	r4, [pc, #164]	; (99e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb8>)
    9940:	2301      	movs	r3, #1
    9942:	2100      	movs	r1, #0
    9944:	68a0      	ldr	r0, [r4, #8]
    9946:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    994a:	3070      	adds	r0, #112	; 0x70
    994c:	f004 f96d 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9950:	b1b8      	cbz	r0, 9982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf56>
    9952:	2100      	movs	r1, #0
    9954:	6920      	ldr	r0, [r4, #16]
    9956:	f004 fb8f 	bl	e078 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    995a:	b1a0      	cbz	r0, 9986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    995c:	6920      	ldr	r0, [r4, #16]
    995e:	68a1      	ldr	r1, [r4, #8]
    9960:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9964:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9968:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    996c:	f005 fac3 	bl	eef6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9970:	b168      	cbz	r0, 998e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf62>
    9972:	68a0      	ldr	r0, [r4, #8]
    9974:	2128      	movs	r1, #40	; 0x28
    9976:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    997a:	306f      	adds	r0, #111	; 0x6f
    997c:	2101      	movs	r1, #1
    997e:	7781      	strb	r1, [r0, #30]
    9980:	e02e      	b.n	99e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb4>
    9982:	2001      	movs	r0, #1
    9984:	bd70      	pop	{r4, r5, r6, pc}
    9986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    998a:	f000 b8af 	b.w	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    998e:	6920      	ldr	r0, [r4, #16]
    9990:	f004 fba2 	bl	e0d8 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9994:	f004 f92c 	bl	dbf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9998:	4605      	mov	r5, r0
    999a:	68a0      	ldr	r0, [r4, #8]
    999c:	4629      	mov	r1, r5
    999e:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    99a2:	6920      	ldr	r0, [r4, #16]
    99a4:	7900      	ldrb	r0, [r0, #4]
    99a6:	f004 fac0 	bl	df2a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    99aa:	68a1      	ldr	r1, [r4, #8]
    99ac:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    99b0:	6920      	ldr	r0, [r4, #16]
    99b2:	4629      	mov	r1, r5
    99b4:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    99b8:	f004 fab3 	bl	df22 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    99bc:	68a1      	ldr	r1, [r4, #8]
    99be:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    99c2:	6920      	ldr	r0, [r4, #16]
    99c4:	f004 fb8b 	bl	e0de <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    99c8:	68a1      	ldr	r1, [r4, #8]
    99ca:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    99ce:	6920      	ldr	r0, [r4, #16]
    99d0:	f004 fb88 	bl	e0e4 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    99d4:	68a1      	ldr	r1, [r4, #8]
    99d6:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    99da:	200d      	movs	r0, #13
    99dc:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    99e0:	2000      	movs	r0, #0
    99e2:	bd70      	pop	{r4, r5, r6, pc}
    99e4:	20000124 	.word	0x20000124
    99e8:	b538      	push	{r3, r4, r5, lr}
    99ea:	4c2a      	ldr	r4, [pc, #168]	; (9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1068>)
    99ec:	2301      	movs	r3, #1
    99ee:	2100      	movs	r1, #0
    99f0:	68a0      	ldr	r0, [r4, #8]
    99f2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    99f6:	3070      	adds	r0, #112	; 0x70
    99f8:	f004 f917 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99fc:	b970      	cbnz	r0, 9a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    99fe:	68a0      	ldr	r0, [r4, #8]
    9a00:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9a04:	2a12      	cmp	r2, #18
    9a06:	d009      	beq.n	9a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9a08:	2301      	movs	r3, #1
    9a0a:	2105      	movs	r1, #5
    9a0c:	3070      	adds	r0, #112	; 0x70
    9a0e:	f004 f90c 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a12:	b108      	cbz	r0, 9a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    9a14:	2008      	movs	r0, #8
    9a16:	bd38      	pop	{r3, r4, r5, pc}
    9a18:	2001      	movs	r0, #1
    9a1a:	bd38      	pop	{r3, r4, r5, pc}
    9a1c:	68a0      	ldr	r0, [r4, #8]
    9a1e:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9a22:	b908      	cbnz	r0, 9a28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xffc>
    9a24:	f7ff f914 	bl	8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9a28:	68a1      	ldr	r1, [r4, #8]
    9a2a:	6920      	ldr	r0, [r4, #16]
    9a2c:	f501 7184 	add.w	r1, r1, #264	; 0x108
    9a30:	f004 fb67 	bl	e102 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9a34:	68a1      	ldr	r1, [r4, #8]
    9a36:	6920      	ldr	r0, [r4, #16]
    9a38:	31d8      	adds	r1, #216	; 0xd8
    9a3a:	f004 fb59 	bl	e0f0 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9a3e:	68a1      	ldr	r1, [r4, #8]
    9a40:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    9a44:	f88d 0000 	strb.w	r0, [sp]
    9a48:	9800      	ldr	r0, [sp, #0]
    9a4a:	9000      	str	r0, [sp, #0]
    9a4c:	f89d 0000 	ldrb.w	r0, [sp]
    9a50:	b120      	cbz	r0, 9a5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1030>
    9a52:	f240 219d 	movw	r1, #669	; 0x29d
    9a56:	2031      	movs	r0, #49	; 0x31
    9a58:	f7fa fd70 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a5c:	8808      	ldrh	r0, [r1, #0]
    9a5e:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    9a62:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    9a66:	6920      	ldr	r0, [r4, #16]
    9a68:	f004 fb46 	bl	e0f8 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9a6c:	68a1      	ldr	r1, [r4, #8]
    9a6e:	6920      	ldr	r0, [r4, #16]
    9a70:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9a74:	f004 fb39 	bl	e0ea <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9a78:	68a0      	ldr	r0, [r4, #8]
    9a7a:	4601      	mov	r1, r0
    9a7c:	2201      	movs	r2, #1
    9a7e:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    9a82:	2014      	movs	r0, #20
    9a84:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9a88:	78a0      	ldrb	r0, [r4, #2]
    9a8a:	f7fa fba7 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9a8e:	2000      	movs	r0, #0
    9a90:	bd38      	pop	{r3, r4, r5, pc}
    9a92:	0000      	.short	0x0000
    9a94:	20000124 	.word	0x20000124
    9a98:	b51c      	push	{r2, r3, r4, lr}
    9a9a:	4c13      	ldr	r4, [pc, #76]	; (9ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>)
    9a9c:	68a0      	ldr	r0, [r4, #8]
    9a9e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9aa2:	07c0      	lsls	r0, r0, #31
    9aa4:	d001      	beq.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    9aa6:	2001      	movs	r0, #1
    9aa8:	bd1c      	pop	{r2, r3, r4, pc}
    9aaa:	4669      	mov	r1, sp
    9aac:	6920      	ldr	r0, [r4, #16]
    9aae:	f004 fb2e 	bl	e10e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9ab2:	f001 fa61 	bl	af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9ab6:	f644 112f 	movw	r1, #18735	; 0x492f
    9aba:	4008      	ands	r0, r1
    9abc:	f89d 2000 	ldrb.w	r2, [sp]
    9ac0:	68a1      	ldr	r1, [r4, #8]
    9ac2:	4002      	ands	r2, r0
    9ac4:	f801 2fb4 	strb.w	r2, [r1, #180]!
    9ac8:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9acc:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9ad0:	7048      	strb	r0, [r1, #1]
    9ad2:	f7ff f8bd 	bl	8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9ad6:	68a0      	ldr	r0, [r4, #8]
    9ad8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9adc:	f041 0101 	orr.w	r1, r1, #1
    9ae0:	7001      	strb	r1, [r0, #0]
    9ae2:	2000      	movs	r0, #0
    9ae4:	bd1c      	pop	{r2, r3, r4, pc}
    9ae6:	0000      	.short	0x0000
    9ae8:	20000124 	.word	0x20000124
    9aec:	4a0a      	ldr	r2, [pc, #40]	; (9b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>)
    9aee:	b510      	push	{r4, lr}
    9af0:	6890      	ldr	r0, [r2, #8]
    9af2:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9af6:	070b      	lsls	r3, r1, #28
    9af8:	d501      	bpl.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d2>
    9afa:	2001      	movs	r0, #1
    9afc:	bd10      	pop	{r4, pc}
    9afe:	f041 0108 	orr.w	r1, r1, #8
    9b02:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9b06:	6911      	ldr	r1, [r2, #16]
    9b08:	78c9      	ldrb	r1, [r1, #3]
    9b0a:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    9b0e:	f7ff f89f 	bl	8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9b12:	2000      	movs	r0, #0
    9b14:	bd10      	pop	{r4, pc}
    9b16:	0000      	.short	0x0000
    9b18:	20000124 	.word	0x20000124
    9b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b1e:	4c2f      	ldr	r4, [pc, #188]	; (9bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11b0>)
    9b20:	68a0      	ldr	r0, [r4, #8]
    9b22:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9b26:	f010 0f30 	tst.w	r0, #48	; 0x30
    9b2a:	d001      	beq.n	9b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    9b2c:	2001      	movs	r0, #1
    9b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b30:	6920      	ldr	r0, [r4, #16]
    9b32:	f004 fb07 	bl	e144 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9b36:	b350      	cbz	r0, 9b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1162>
    9b38:	6920      	ldr	r0, [r4, #16]
    9b3a:	f004 faf5 	bl	e128 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9b3e:	4607      	mov	r7, r0
    9b40:	6920      	ldr	r0, [r4, #16]
    9b42:	f004 faf5 	bl	e130 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9b46:	4606      	mov	r6, r0
    9b48:	6920      	ldr	r0, [r4, #16]
    9b4a:	f004 faeb 	bl	e124 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9b4e:	4605      	mov	r5, r0
    9b50:	6920      	ldr	r0, [r4, #16]
    9b52:	f004 faeb 	bl	e12c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9b56:	4601      	mov	r1, r0
    9b58:	9700      	str	r7, [sp, #0]
    9b5a:	68a0      	ldr	r0, [r4, #8]
    9b5c:	4633      	mov	r3, r6
    9b5e:	462a      	mov	r2, r5
    9b60:	3028      	adds	r0, #40	; 0x28
    9b62:	f004 fd35 	bl	e5d0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9b66:	7920      	ldrb	r0, [r4, #4]
    9b68:	0780      	lsls	r0, r0, #30
    9b6a:	d503      	bpl.n	9b74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>
    9b6c:	68e0      	ldr	r0, [r4, #12]
    9b6e:	78c0      	ldrb	r0, [r0, #3]
    9b70:	2814      	cmp	r0, #20
    9b72:	d010      	beq.n	9b96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116a>
    9b74:	68a1      	ldr	r1, [r4, #8]
    9b76:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    9b7a:	281c      	cmp	r0, #28
    9b7c:	d00b      	beq.n	9b96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116a>
    9b7e:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    9b82:	2801      	cmp	r0, #1
    9b84:	d00f      	beq.n	9ba6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    9b86:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    9b8a:	b960      	cbnz	r0, 9ba6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    9b8c:	e008      	b.n	9ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    9b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9b92:	f7ff bfab 	b.w	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    9b96:	68a1      	ldr	r1, [r4, #8]
    9b98:	2001      	movs	r0, #1
    9b9a:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    9b9e:	e002      	b.n	9ba6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    9ba0:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    9ba4:	b130      	cbz	r0, 9bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1188>
    9ba6:	68a0      	ldr	r0, [r4, #8]
    9ba8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9bac:	f041 0110 	orr.w	r1, r1, #16
    9bb0:	7001      	strb	r1, [r0, #0]
    9bb2:	e00e      	b.n	9bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a6>
    9bb4:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    9bb8:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    9bbc:	f040 0020 	orr.w	r0, r0, #32
    9bc0:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    9bc4:	f831 0b28 	ldrh.w	r0, [r1], #40
    9bc8:	f004 fd09 	bl	e5de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9bcc:	78a0      	ldrb	r0, [r4, #2]
    9bce:	f7fa fb05 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9bd2:	f7ff f83d 	bl	8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9bd6:	2000      	movs	r0, #0
    9bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bda:	0000      	.short	0x0000
    9bdc:	20000124 	.word	0x20000124
    9be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9be2:	4c1a      	ldr	r4, [pc, #104]	; (9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>)
    9be4:	2301      	movs	r3, #1
    9be6:	210a      	movs	r1, #10
    9be8:	68a0      	ldr	r0, [r4, #8]
    9bea:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9bee:	3070      	adds	r0, #112	; 0x70
    9bf0:	f004 f81b 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bf4:	b338      	cbz	r0, 9c46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x121a>
    9bf6:	6920      	ldr	r0, [r4, #16]
    9bf8:	f004 faa4 	bl	e144 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9bfc:	b1c8      	cbz	r0, 9c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1206>
    9bfe:	6920      	ldr	r0, [r4, #16]
    9c00:	f004 fa92 	bl	e128 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9c04:	4607      	mov	r7, r0
    9c06:	6920      	ldr	r0, [r4, #16]
    9c08:	f004 fa92 	bl	e130 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9c0c:	4606      	mov	r6, r0
    9c0e:	6920      	ldr	r0, [r4, #16]
    9c10:	f004 fa88 	bl	e124 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9c14:	4605      	mov	r5, r0
    9c16:	6920      	ldr	r0, [r4, #16]
    9c18:	f004 fa88 	bl	e12c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9c1c:	4601      	mov	r1, r0
    9c1e:	9700      	str	r7, [sp, #0]
    9c20:	68a0      	ldr	r0, [r4, #8]
    9c22:	4633      	mov	r3, r6
    9c24:	462a      	mov	r2, r5
    9c26:	3028      	adds	r0, #40	; 0x28
    9c28:	f004 fcd2 	bl	e5d0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9c2c:	68a0      	ldr	r0, [r4, #8]
    9c2e:	f004 fc45 	bl	e4bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9c32:	68a1      	ldr	r1, [r4, #8]
    9c34:	2000      	movs	r0, #0
    9c36:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9c3a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9c3e:	f7ff f9b1 	bl	8fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    9c42:	2000      	movs	r0, #0
    9c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c46:	2001      	movs	r0, #1
    9c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c4a:	0000      	.short	0x0000
    9c4c:	20000124 	.word	0x20000124
    9c50:	b510      	push	{r4, lr}
    9c52:	4c09      	ldr	r4, [pc, #36]	; (9c78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124c>)
    9c54:	68a0      	ldr	r0, [r4, #8]
    9c56:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9c5a:	0740      	lsls	r0, r0, #29
    9c5c:	d501      	bpl.n	9c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1236>
    9c5e:	2001      	movs	r0, #1
    9c60:	bd10      	pop	{r4, pc}
    9c62:	f7fe fff5 	bl	8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9c66:	68a0      	ldr	r0, [r4, #8]
    9c68:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9c6c:	f041 0104 	orr.w	r1, r1, #4
    9c70:	7001      	strb	r1, [r0, #0]
    9c72:	2000      	movs	r0, #0
    9c74:	bd10      	pop	{r4, pc}
    9c76:	0000      	.short	0x0000
    9c78:	20000124 	.word	0x20000124
    9c7c:	b510      	push	{r4, lr}
    9c7e:	4c09      	ldr	r4, [pc, #36]	; (9ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1278>)
    9c80:	2301      	movs	r3, #1
    9c82:	2109      	movs	r1, #9
    9c84:	68a0      	ldr	r0, [r4, #8]
    9c86:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9c8a:	3070      	adds	r0, #112	; 0x70
    9c8c:	f003 ffcd 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c90:	2800      	cmp	r0, #0
    9c92:	d006      	beq.n	9ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    9c94:	68a1      	ldr	r1, [r4, #8]
    9c96:	2000      	movs	r0, #0
    9c98:	f801 0f9a 	strb.w	r0, [r1, #154]!
    9c9c:	7308      	strb	r0, [r1, #12]
    9c9e:	f801 0c1d 	strb.w	r0, [r1, #-29]
    9ca2:	bd10      	pop	{r4, pc}
    9ca4:	20000124 	.word	0x20000124
    9ca8:	b510      	push	{r4, lr}
    9caa:	4c0f      	ldr	r4, [pc, #60]	; (9ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12bc>)
    9cac:	2301      	movs	r3, #1
    9cae:	2100      	movs	r1, #0
    9cb0:	68a0      	ldr	r0, [r4, #8]
    9cb2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9cb6:	3070      	adds	r0, #112	; 0x70
    9cb8:	f003 ffb7 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9cbc:	b138      	cbz	r0, 9cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a2>
    9cbe:	f7fe ffc7 	bl	8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9cc2:	68a1      	ldr	r1, [r4, #8]
    9cc4:	2010      	movs	r0, #16
    9cc6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9cca:	2000      	movs	r0, #0
    9ccc:	bd10      	pop	{r4, pc}
    9cce:	68a0      	ldr	r0, [r4, #8]
    9cd0:	2301      	movs	r3, #1
    9cd2:	2105      	movs	r1, #5
    9cd4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9cd8:	3070      	adds	r0, #112	; 0x70
    9cda:	f003 ffa6 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9cde:	b108      	cbz	r0, 9ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b8>
    9ce0:	2008      	movs	r0, #8
    9ce2:	bd10      	pop	{r4, pc}
    9ce4:	2001      	movs	r0, #1
    9ce6:	bd10      	pop	{r4, pc}
    9ce8:	20000124 	.word	0x20000124
    9cec:	4806      	ldr	r0, [pc, #24]	; (9d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12dc>)
    9cee:	6880      	ldr	r0, [r0, #8]
    9cf0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9cf4:	2911      	cmp	r1, #17
    9cf6:	d001      	beq.n	9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    9cf8:	2002      	movs	r0, #2
    9cfa:	4770      	bx	lr
    9cfc:	2112      	movs	r1, #18
    9cfe:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9d02:	2000      	movs	r0, #0
    9d04:	4770      	bx	lr
    9d06:	0000      	.short	0x0000
    9d08:	20000124 	.word	0x20000124
    9d0c:	b570      	push	{r4, r5, r6, lr}
    9d0e:	4c31      	ldr	r4, [pc, #196]	; (9dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a8>)
    9d10:	2301      	movs	r3, #1
    9d12:	210b      	movs	r1, #11
    9d14:	68a0      	ldr	r0, [r4, #8]
    9d16:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9d1a:	3070      	adds	r0, #112	; 0x70
    9d1c:	f003 ff85 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d20:	bb48      	cbnz	r0, 9d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134a>
    9d22:	68a0      	ldr	r0, [r4, #8]
    9d24:	2301      	movs	r3, #1
    9d26:	2100      	movs	r1, #0
    9d28:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9d2c:	3070      	adds	r0, #112	; 0x70
    9d2e:	f003 ff7c 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d32:	b1f0      	cbz	r0, 9d72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    9d34:	68a0      	ldr	r0, [r4, #8]
    9d36:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9d3a:	2824      	cmp	r0, #36	; 0x24
    9d3c:	d01b      	beq.n	9d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134a>
    9d3e:	6920      	ldr	r0, [r4, #16]
    9d40:	f004 fa1c 	bl	e17c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9d44:	b1c8      	cbz	r0, 9d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    9d46:	68a0      	ldr	r0, [r4, #8]
    9d48:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9d4c:	f041 0104 	orr.w	r1, r1, #4
    9d50:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    9d54:	6921      	ldr	r1, [r4, #16]
    9d56:	794a      	ldrb	r2, [r1, #5]
    9d58:	f002 0207 	and.w	r2, r2, #7
    9d5c:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    9d60:	7909      	ldrb	r1, [r1, #4]
    9d62:	f001 0107 	and.w	r1, r1, #7
    9d66:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    9d6a:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    9d6e:	bb43      	cbnz	r3, 9dc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    9d70:	e007      	b.n	9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1356>
    9d72:	2001      	movs	r0, #1
    9d74:	bd70      	pop	{r4, r5, r6, pc}
    9d76:	2020      	movs	r0, #32
    9d78:	bd70      	pop	{r4, r5, r6, pc}
    9d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9d7e:	f7ff beb5 	b.w	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    9d82:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    9d86:	2b01      	cmp	r3, #1
    9d88:	d01b      	beq.n	9dc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    9d8a:	f100 0366 	add.w	r3, r0, #102	; 0x66
    9d8e:	2501      	movs	r5, #1
    9d90:	785e      	ldrb	r6, [r3, #1]
    9d92:	428e      	cmp	r6, r1
    9d94:	d106      	bne.n	9da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1378>
    9d96:	7819      	ldrb	r1, [r3, #0]
    9d98:	4291      	cmp	r1, r2
    9d9a:	d103      	bne.n	9da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1378>
    9d9c:	2102      	movs	r1, #2
    9d9e:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    9da2:	e00e      	b.n	9dc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    9da4:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    9da8:	8802      	ldrh	r2, [r0, #0]
    9daa:	f821 2902 	strh.w	r2, [r1], #-2
    9dae:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    9db2:	710a      	strb	r2, [r1, #4]
    9db4:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    9db8:	7148      	strb	r0, [r1, #5]
    9dba:	700d      	strb	r5, [r1, #0]
    9dbc:	78a0      	ldrb	r0, [r4, #2]
    9dbe:	f7fa fa0d 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9dc2:	68a1      	ldr	r1, [r4, #8]
    9dc4:	2021      	movs	r0, #33	; 0x21
    9dc6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9dca:	f7fe ff41 	bl	8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9dce:	2000      	movs	r0, #0
    9dd0:	bd70      	pop	{r4, r5, r6, pc}
    9dd2:	0000      	.short	0x0000
    9dd4:	20000124 	.word	0x20000124
    9dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ddc:	4c4e      	ldr	r4, [pc, #312]	; (9f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ec>)
    9dde:	68a0      	ldr	r0, [r4, #8]
    9de0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9de4:	2920      	cmp	r1, #32
    9de6:	d009      	beq.n	9dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d0>
    9de8:	f05f 0700 	movs.w	r7, #0
    9dec:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9df0:	2922      	cmp	r1, #34	; 0x22
    9df2:	d005      	beq.n	9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d4>
    9df4:	b387      	cbz	r7, 9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    9df6:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    9dfa:	e003      	b.n	9e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d8>
    9dfc:	2701      	movs	r7, #1
    9dfe:	e7f5      	b.n	9dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c0>
    9e00:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    9e04:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9e08:	f041 0104 	orr.w	r1, r1, #4
    9e0c:	7001      	strb	r1, [r0, #0]
    9e0e:	6920      	ldr	r0, [r4, #16]
    9e10:	f7fc fb6c 	bl	64ec <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9e14:	f04f 0801 	mov.w	r8, #1
    9e18:	2600      	movs	r6, #0
    9e1a:	b308      	cbz	r0, 9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    9e1c:	4639      	mov	r1, r7
    9e1e:	6920      	ldr	r0, [r4, #16]
    9e20:	f7fe ffce 	bl	8dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    9e24:	b1e0      	cbz	r0, 9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    9e26:	466a      	mov	r2, sp
    9e28:	6921      	ldr	r1, [r4, #16]
    9e2a:	68a0      	ldr	r0, [r4, #8]
    9e2c:	f004 f833 	bl	de96 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9e30:	b388      	cbz	r0, 9e96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146a>
    9e32:	6920      	ldr	r0, [r4, #16]
    9e34:	f004 f97e 	bl	e134 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9e38:	68a1      	ldr	r1, [r4, #8]
    9e3a:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9e3e:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9e42:	f005 f858 	bl	eef6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9e46:	b338      	cbz	r0, 9e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146c>
    9e48:	68a0      	ldr	r0, [r4, #8]
    9e4a:	2128      	movs	r1, #40	; 0x28
    9e4c:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9e50:	306f      	adds	r0, #111	; 0x6f
    9e52:	f880 801e 	strb.w	r8, [r0, #30]
    9e56:	e053      	b.n	9f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    9e58:	e7ff      	b.n	9e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142e>
    9e5a:	2002      	movs	r0, #2
    9e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9e60:	68a0      	ldr	r0, [r4, #8]
    9e62:	f04f 0900 	mov.w	r9, #0
    9e66:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9e6a:	2901      	cmp	r1, #1
    9e6c:	d015      	beq.n	9e9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146e>
    9e6e:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9e72:	b1f7      	cbz	r7, 9eb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1486>
    9e74:	6920      	ldr	r0, [r4, #16]
    9e76:	68a1      	ldr	r1, [r4, #8]
    9e78:	78c0      	ldrb	r0, [r0, #3]
    9e7a:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    9e7e:	fa08 f200 	lsl.w	r2, r8, r0
    9e82:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9e86:	b160      	cbz	r0, 9ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1476>
    9e88:	200a      	movs	r0, #10
    9e8a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9e8e:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    9e92:	b9a0      	cbnz	r0, 9ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    9e94:	e008      	b.n	9ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x147c>
    9e96:	e014      	b.n	9ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1496>
    9e98:	e027      	b.n	9eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14be>
    9e9a:	201e      	movs	r0, #30
    9e9c:	f7ff fcfc 	bl	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9ea0:	e7e7      	b.n	9e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    9ea2:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    9ea6:	e001      	b.n	9eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    9ea8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    9eac:	2031      	movs	r0, #49	; 0x31
    9eae:	f7fa fb45 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eb2:	702e      	strb	r6, [r5, #0]
    9eb4:	f7fe fed8 	bl	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9eb8:	f7ff fe18 	bl	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    9ebc:	4681      	mov	r9, r0
    9ebe:	4648      	mov	r0, r9
    9ec0:	e7cc      	b.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1430>
    9ec2:	68a0      	ldr	r0, [r4, #8]
    9ec4:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9ec8:	2901      	cmp	r1, #1
    9eca:	d009      	beq.n	9ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    9ecc:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9ed0:	68a0      	ldr	r0, [r4, #8]
    9ed2:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9ed6:	428d      	cmp	r5, r1
    9ed8:	d112      	bne.n	9f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    9eda:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    9ede:	e00f      	b.n	9f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    9ee0:	2000      	movs	r0, #0
    9ee2:	f7ff fcd9 	bl	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9ee6:	702e      	strb	r6, [r5, #0]
    9ee8:	e7f2      	b.n	9ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    9eea:	68a0      	ldr	r0, [r4, #8]
    9eec:	f89d 1000 	ldrb.w	r1, [sp]
    9ef0:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9ef4:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9ef8:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    9efc:	2024      	movs	r0, #36	; 0x24
    9efe:	7028      	strb	r0, [r5, #0]
    9f00:	68a0      	ldr	r0, [r4, #8]
    9f02:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9f06:	428d      	cmp	r5, r1
    9f08:	d102      	bne.n	9f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e4>
    9f0a:	f7fe fead 	bl	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9f0e:	e001      	b.n	9f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>
    9f10:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    9f14:	2000      	movs	r0, #0
    9f16:	e7a1      	b.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1430>
    9f18:	20000124 	.word	0x20000124
    9f1c:	b510      	push	{r4, lr}
    9f1e:	4c0a      	ldr	r4, [pc, #40]	; (9f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151c>)
    9f20:	68a0      	ldr	r0, [r4, #8]
    9f22:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9f26:	f041 0104 	orr.w	r1, r1, #4
    9f2a:	7001      	strb	r1, [r0, #0]
    9f2c:	6920      	ldr	r0, [r4, #16]
    9f2e:	f004 f92f 	bl	e190 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9f32:	2816      	cmp	r0, #22
    9f34:	d001      	beq.n	9f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150e>
    9f36:	2000      	movs	r0, #0
    9f38:	bd10      	pop	{r4, pc}
    9f3a:	6920      	ldr	r0, [r4, #16]
    9f3c:	f004 f92a 	bl	e194 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f44:	f7fe be62 	b.w	8c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>
    9f48:	20000124 	.word	0x20000124
    9f4c:	4802      	ldr	r0, [pc, #8]	; (9f58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x152c>)
    9f4e:	6900      	ldr	r0, [r0, #16]
    9f50:	7900      	ldrb	r0, [r0, #4]
    9f52:	f7fe be5b 	b.w	8c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>
    9f56:	0000      	.short	0x0000
    9f58:	20000124 	.word	0x20000124
    9f5c:	b510      	push	{r4, lr}
    9f5e:	4c08      	ldr	r4, [pc, #32]	; (9f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>)
    9f60:	68a0      	ldr	r0, [r4, #8]
    9f62:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9f66:	2817      	cmp	r0, #23
    9f68:	d001      	beq.n	9f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    9f6a:	2002      	movs	r0, #2
    9f6c:	bd10      	pop	{r4, pc}
    9f6e:	f7fe fe7b 	bl	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9f72:	68a1      	ldr	r1, [r4, #8]
    9f74:	201b      	movs	r0, #27
    9f76:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9f7a:	2000      	movs	r0, #0
    9f7c:	bd10      	pop	{r4, pc}
    9f7e:	0000      	.short	0x0000
    9f80:	20000124 	.word	0x20000124
    9f84:	b510      	push	{r4, lr}
    9f86:	4c0b      	ldr	r4, [pc, #44]	; (9fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1588>)
    9f88:	2301      	movs	r3, #1
    9f8a:	4619      	mov	r1, r3
    9f8c:	68a0      	ldr	r0, [r4, #8]
    9f8e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9f92:	3070      	adds	r0, #112	; 0x70
    9f94:	f003 fe49 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f98:	b108      	cbz	r0, 9f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    9f9a:	2000      	movs	r0, #0
    9f9c:	bd10      	pop	{r4, pc}
    9f9e:	6920      	ldr	r0, [r4, #16]
    9fa0:	f004 f8cc 	bl	e13c <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9fa4:	68a1      	ldr	r1, [r4, #8]
    9fa6:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    9faa:	2007      	movs	r0, #7
    9fac:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9fb0:	e7f3      	b.n	9f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    9fb2:	0000      	.short	0x0000
    9fb4:	20000124 	.word	0x20000124
    9fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fbc:	4c37      	ldr	r4, [pc, #220]	; (a09c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>)
    9fbe:	2600      	movs	r6, #0
    9fc0:	4620      	mov	r0, r4
    9fc2:	68a1      	ldr	r1, [r4, #8]
    9fc4:	6900      	ldr	r0, [r0, #16]
    9fc6:	2701      	movs	r7, #1
    9fc8:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    9fcc:	7900      	ldrb	r0, [r0, #4]
    9fce:	2b0e      	cmp	r3, #14
    9fd0:	d101      	bne.n	9fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15aa>
    9fd2:	2812      	cmp	r0, #18
    9fd4:	d006      	beq.n	9fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    9fd6:	4a31      	ldr	r2, [pc, #196]	; (a09c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>)
    9fd8:	2500      	movs	r5, #0
    9fda:	6892      	ldr	r2, [r2, #8]
    9fdc:	32b4      	adds	r2, #180	; 0xb4
    9fde:	2b1c      	cmp	r3, #28
    9fe0:	d004      	beq.n	9fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9fe2:	e005      	b.n	9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    9fe4:	f7ff fe4a 	bl	9c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1250>
    9fe8:	4606      	mov	r6, r0
    9fea:	e054      	b.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9fec:	2814      	cmp	r0, #20
    9fee:	d002      	beq.n	9ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ca>
    9ff0:	2b04      	cmp	r3, #4
    9ff2:	d00b      	beq.n	a00c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    9ff4:	e00c      	b.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e4>
    9ff6:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    9ffa:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    9ffe:	2105      	movs	r1, #5
    a000:	4610      	mov	r0, r2
    a002:	f004 ff38 	bl	ee76 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    a006:	f7fe ffcd 	bl	8fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    a00a:	e044      	b.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    a00c:	280e      	cmp	r0, #14
    a00e:	d002      	beq.n	a016 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    a010:	2b20      	cmp	r3, #32
    a012:	d010      	beq.n	a036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160a>
    a014:	e011      	b.n	a03a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160e>
    a016:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    a01a:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    a01e:	8808      	ldrh	r0, [r1, #0]
    a020:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    a024:	201a      	movs	r0, #26
    a026:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    a02a:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    a02e:	78a0      	ldrb	r0, [r4, #2]
    a030:	f7fa f8d4 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a034:	e02f      	b.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    a036:	2816      	cmp	r0, #22
    a038:	d006      	beq.n	a048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a03a:	2b26      	cmp	r3, #38	; 0x26
    a03c:	d101      	bne.n	a042 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1616>
    a03e:	2816      	cmp	r0, #22
    a040:	d002      	beq.n	a048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a042:	2817      	cmp	r0, #23
    a044:	d014      	beq.n	a070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    a046:	e026      	b.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    a048:	f801 5f7d 	strb.w	r5, [r1, #125]!
    a04c:	f881 5029 	strb.w	r5, [r1, #41]	; 0x29
    a050:	7848      	ldrb	r0, [r1, #1]
    a052:	2821      	cmp	r0, #33	; 0x21
    a054:	d01f      	beq.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    a056:	2108      	movs	r1, #8
    a058:	4610      	mov	r0, r2
    a05a:	f004 ff0c 	bl	ee76 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    a05e:	68a0      	ldr	r0, [r4, #8]
    a060:	210b      	movs	r1, #11
    a062:	30b4      	adds	r0, #180	; 0xb4
    a064:	f004 ff07 	bl	ee76 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    a068:	201a      	movs	r0, #26
    a06a:	f7ff fc15 	bl	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    a06e:	e012      	b.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    a070:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    a074:	2822      	cmp	r0, #34	; 0x22
    a076:	d10e      	bne.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    a078:	f881 507e 	strb.w	r5, [r1, #126]	; 0x7e
    a07c:	f7fe fdf4 	bl	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    a080:	68a0      	ldr	r0, [r4, #8]
    a082:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    a086:	2801      	cmp	r0, #1
    a088:	d102      	bne.n	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>
    a08a:	2000      	movs	r0, #0
    a08c:	f7ff fc04 	bl	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    a090:	68a0      	ldr	r0, [r4, #8]
    a092:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    a096:	4630      	mov	r0, r6
    a098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a09c:	20000124 	.word	0x20000124
    a0a0:	b570      	push	{r4, r5, r6, lr}
    a0a2:	4c2d      	ldr	r4, [pc, #180]	; (a158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x172c>)
    a0a4:	68a0      	ldr	r0, [r4, #8]
    a0a6:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a0aa:	0789      	lsls	r1, r1, #30
    a0ac:	d507      	bpl.n	a0be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1692>
    a0ae:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a0b2:	2301      	movs	r3, #1
    a0b4:	2108      	movs	r1, #8
    a0b6:	3070      	adds	r0, #112	; 0x70
    a0b8:	f003 fdb7 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0bc:	b1e8      	cbz	r0, a0fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ce>
    a0be:	68a0      	ldr	r0, [r4, #8]
    a0c0:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    a0c4:	0780      	lsls	r0, r0, #30
    a0c6:	d412      	bmi.n	a0ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    a0c8:	6920      	ldr	r0, [r4, #16]
    a0ca:	f004 f839 	bl	e140 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a0ce:	68a1      	ldr	r1, [r4, #8]
    a0d0:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    a0d4:	6920      	ldr	r0, [r4, #16]
    a0d6:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a0da:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    a0de:	8840      	ldrh	r0, [r0, #2]
    a0e0:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    a0e4:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    a0e8:	f040 0002 	orr.w	r0, r0, #2
    a0ec:	7008      	strb	r0, [r1, #0]
    a0ee:	68a0      	ldr	r0, [r4, #8]
    a0f0:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    a0f4:	07c9      	lsls	r1, r1, #31
    a0f6:	d002      	beq.n	a0fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    a0f8:	e010      	b.n	a11c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    a0fa:	2001      	movs	r0, #1
    a0fc:	bd70      	pop	{r4, r5, r6, pc}
    a0fe:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a102:	078a      	lsls	r2, r1, #30
    a104:	d504      	bpl.n	a110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    a106:	f240 21d9 	movw	r1, #729	; 0x2d9
    a10a:	2031      	movs	r0, #49	; 0x31
    a10c:	f7fa fa16 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a110:	f041 0102 	orr.w	r1, r1, #2
    a114:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a118:	f7fe fd9a 	bl	8c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    a11c:	68a0      	ldr	r0, [r4, #8]
    a11e:	2500      	movs	r5, #0
    a120:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a124:	2906      	cmp	r1, #6
    a126:	d106      	bne.n	a136 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    a128:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    a12c:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    a130:	78a0      	ldrb	r0, [r4, #2]
    a132:	f7fa f853 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a136:	68a0      	ldr	r0, [r4, #8]
    a138:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    a13c:	b151      	cbz	r1, a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    a13e:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    a142:	78a0      	ldrb	r0, [r4, #2]
    a144:	f7fa f84a 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a148:	68a0      	ldr	r0, [r4, #8]
    a14a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a14e:	b909      	cbnz	r1, a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    a150:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    a154:	2000      	movs	r0, #0
    a156:	bd70      	pop	{r4, r5, r6, pc}
    a158:	20000124 	.word	0x20000124
    a15c:	b510      	push	{r4, lr}
    a15e:	4c17      	ldr	r4, [pc, #92]	; (a1bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1790>)
    a160:	68a3      	ldr	r3, [r4, #8]
    a162:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    a166:	2808      	cmp	r0, #8
    a168:	d20e      	bcs.n	a188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    a16a:	f100 0208 	add.w	r2, r0, #8
    a16e:	f1c0 0008 	rsb	r0, r0, #8
    a172:	b2c1      	uxtb	r1, r0
    a174:	1898      	adds	r0, r3, r2
    a176:	f500 7084 	add.w	r0, r0, #264	; 0x108
    a17a:	f7fa fa6f 	bl	465c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a17e:	68a1      	ldr	r1, [r4, #8]
    a180:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    a184:	4410      	add	r0, r2
    a186:	7008      	strb	r0, [r1, #0]
    a188:	68a3      	ldr	r3, [r4, #8]
    a18a:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    a18e:	3808      	subs	r0, #8
    a190:	2804      	cmp	r0, #4
    a192:	d211      	bcs.n	a1b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x178c>
    a194:	1d02      	adds	r2, r0, #4
    a196:	f1c0 0004 	rsb	r0, r0, #4
    a19a:	b2c1      	uxtb	r1, r0
    a19c:	1898      	adds	r0, r3, r2
    a19e:	30d8      	adds	r0, #216	; 0xd8
    a1a0:	f7fa fa5c 	bl	465c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a1a4:	68a0      	ldr	r0, [r4, #8]
    a1a6:	2100      	movs	r1, #0
    a1a8:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    a1ac:	2101      	movs	r1, #1
    a1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a1b2:	2004      	movs	r0, #4
    a1b4:	f7ff ba8e 	b.w	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    a1b8:	bd10      	pop	{r4, pc}
    a1ba:	0000      	.short	0x0000
    a1bc:	20000124 	.word	0x20000124
    a1c0:	4804      	ldr	r0, [pc, #16]	; (a1d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a8>)
    a1c2:	2127      	movs	r1, #39	; 0x27
    a1c4:	6880      	ldr	r0, [r0, #8]
    a1c6:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a1ca:	2100      	movs	r1, #0
    a1cc:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    a1d0:	4770      	bx	lr
    a1d2:	0000      	.short	0x0000
    a1d4:	20000124 	.word	0x20000124
    a1d8:	4809      	ldr	r0, [pc, #36]	; (a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>)
    a1da:	b510      	push	{r4, lr}
    a1dc:	6880      	ldr	r0, [r0, #8]
    a1de:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a1e2:	2914      	cmp	r1, #20
    a1e4:	d004      	beq.n	a1f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>
    a1e6:	f240 6189 	movw	r1, #1673	; 0x689
    a1ea:	2031      	movs	r0, #49	; 0x31
    a1ec:	f7fa f9a6 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1f0:	2101      	movs	r1, #1
    a1f2:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    a1f6:	2115      	movs	r1, #21
    a1f8:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a1fc:	bd10      	pop	{r4, pc}
    a1fe:	0000      	.short	0x0000
    a200:	20000124 	.word	0x20000124
    a204:	b510      	push	{r4, lr}
    a206:	4c0a      	ldr	r4, [pc, #40]	; (a230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    a208:	68a0      	ldr	r0, [r4, #8]
    a20a:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a20e:	07c0      	lsls	r0, r0, #31
    a210:	d008      	beq.n	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f8>
    a212:	f7fe fd29 	bl	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    a216:	68a0      	ldr	r0, [r4, #8]
    a218:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a21c:	f021 0101 	bic.w	r1, r1, #1
    a220:	7001      	strb	r1, [r0, #0]
    a222:	bd10      	pop	{r4, pc}
    a224:	f240 6172 	movw	r1, #1650	; 0x672
    a228:	2031      	movs	r0, #49	; 0x31
    a22a:	f7fa f987 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a22e:	0000      	.short	0x0000
    a230:	20000124 	.word	0x20000124
    a234:	b510      	push	{r4, lr}
    a236:	4c0a      	ldr	r4, [pc, #40]	; (a260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>)
    a238:	2301      	movs	r3, #1
    a23a:	2100      	movs	r1, #0
    a23c:	68a0      	ldr	r0, [r4, #8]
    a23e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a242:	3070      	adds	r0, #112	; 0x70
    a244:	f003 fcf1 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a248:	b120      	cbz	r0, a254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>
    a24a:	68a1      	ldr	r1, [r4, #8]
    a24c:	201c      	movs	r0, #28
    a24e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a252:	bd10      	pop	{r4, pc}
    a254:	f240 61f7 	movw	r1, #1783	; 0x6f7
    a258:	2031      	movs	r0, #49	; 0x31
    a25a:	f7fa f96f 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a25e:	0000      	.short	0x0000
    a260:	20000124 	.word	0x20000124
    a264:	480a      	ldr	r0, [pc, #40]	; (a290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1864>)
    a266:	b510      	push	{r4, lr}
    a268:	6880      	ldr	r0, [r0, #8]
    a26a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a26e:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a272:	2a01      	cmp	r2, #1
    a274:	d004      	beq.n	a280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    a276:	f240 61fe 	movw	r1, #1790	; 0x6fe
    a27a:	2031      	movs	r0, #49	; 0x31
    a27c:	f7fa f95e 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a280:	f021 0110 	bic.w	r1, r1, #16
    a284:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a28c:	f7fe bcec 	b.w	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    a290:	20000124 	.word	0x20000124
    a294:	b510      	push	{r4, lr}
    a296:	4c0a      	ldr	r4, [pc, #40]	; (a2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>)
    a298:	2301      	movs	r3, #1
    a29a:	2100      	movs	r1, #0
    a29c:	68a0      	ldr	r0, [r4, #8]
    a29e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a2a2:	3070      	adds	r0, #112	; 0x70
    a2a4:	f003 fcc1 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2a8:	b120      	cbz	r0, a2b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>
    a2aa:	68a1      	ldr	r1, [r4, #8]
    a2ac:	200e      	movs	r0, #14
    a2ae:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a2b2:	bd10      	pop	{r4, pc}
    a2b4:	f240 61ea 	movw	r1, #1770	; 0x6ea
    a2b8:	2031      	movs	r0, #49	; 0x31
    a2ba:	f7fa f93f 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2be:	0000      	.short	0x0000
    a2c0:	20000124 	.word	0x20000124
    a2c4:	4804      	ldr	r0, [pc, #16]	; (a2d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>)
    a2c6:	6880      	ldr	r0, [r0, #8]
    a2c8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a2cc:	f021 0104 	bic.w	r1, r1, #4
    a2d0:	7001      	strb	r1, [r0, #0]
    a2d2:	f7fe bcc9 	b.w	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    a2d6:	0000      	.short	0x0000
    a2d8:	20000124 	.word	0x20000124
    a2dc:	4809      	ldr	r0, [pc, #36]	; (a304 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d8>)
    a2de:	b510      	push	{r4, lr}
    a2e0:	6880      	ldr	r0, [r0, #8]
    a2e2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a2e6:	2910      	cmp	r1, #16
    a2e8:	d004      	beq.n	a2f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    a2ea:	f240 6181 	movw	r1, #1665	; 0x681
    a2ee:	2031      	movs	r0, #49	; 0x31
    a2f0:	f7fa f924 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2f4:	2101      	movs	r1, #1
    a2f6:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    a2fa:	2111      	movs	r1, #17
    a2fc:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a300:	bd10      	pop	{r4, pc}
    a302:	0000      	.short	0x0000
    a304:	20000124 	.word	0x20000124
    a308:	b510      	push	{r4, lr}
    a30a:	4c0a      	ldr	r4, [pc, #40]	; (a334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1908>)
    a30c:	2301      	movs	r3, #1
    a30e:	2100      	movs	r1, #0
    a310:	68a0      	ldr	r0, [r4, #8]
    a312:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a316:	3070      	adds	r0, #112	; 0x70
    a318:	f003 fc87 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a31c:	b120      	cbz	r0, a328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>
    a31e:	68a1      	ldr	r1, [r4, #8]
    a320:	201f      	movs	r0, #31
    a322:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a326:	bd10      	pop	{r4, pc}
    a328:	f240 710a 	movw	r1, #1802	; 0x70a
    a32c:	2031      	movs	r0, #49	; 0x31
    a32e:	f7fa f905 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a332:	0000      	.short	0x0000
    a334:	20000124 	.word	0x20000124
    a338:	4808      	ldr	r0, [pc, #32]	; (a35c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1930>)
    a33a:	b510      	push	{r4, lr}
    a33c:	6880      	ldr	r0, [r0, #8]
    a33e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a342:	2921      	cmp	r1, #33	; 0x21
    a344:	d005      	beq.n	a352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1926>
    a346:	b121      	cbz	r1, a352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1926>
    a348:	f240 7111 	movw	r1, #1809	; 0x711
    a34c:	2031      	movs	r0, #49	; 0x31
    a34e:	f7fa f8f5 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a352:	2122      	movs	r1, #34	; 0x22
    a354:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a358:	bd10      	pop	{r4, pc}
    a35a:	0000      	.short	0x0000
    a35c:	20000124 	.word	0x20000124
    a360:	4807      	ldr	r0, [pc, #28]	; (a380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1954>)
    a362:	b510      	push	{r4, lr}
    a364:	6880      	ldr	r0, [r0, #8]
    a366:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a36a:	2915      	cmp	r1, #21
    a36c:	d004      	beq.n	a378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    a36e:	f240 6196 	movw	r1, #1686	; 0x696
    a372:	2031      	movs	r0, #49	; 0x31
    a374:	f7fa f8e2 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a378:	2119      	movs	r1, #25
    a37a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a37e:	bd10      	pop	{r4, pc}
    a380:	20000124 	.word	0x20000124
    a384:	4807      	ldr	r0, [pc, #28]	; (a3a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>)
    a386:	b510      	push	{r4, lr}
    a388:	6880      	ldr	r0, [r0, #8]
    a38a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a38e:	2915      	cmp	r1, #21
    a390:	d004      	beq.n	a39c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1970>
    a392:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    a396:	2031      	movs	r0, #49	; 0x31
    a398:	f7fa f8d0 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a39c:	2117      	movs	r1, #23
    a39e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a3a2:	bd10      	pop	{r4, pc}
    a3a4:	20000124 	.word	0x20000124
    a3a8:	b570      	push	{r4, r5, r6, lr}
    a3aa:	4d1b      	ldr	r5, [pc, #108]	; (a418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>)
    a3ac:	68a8      	ldr	r0, [r5, #8]
    a3ae:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a3b2:	291b      	cmp	r1, #27
    a3b4:	d002      	beq.n	a3bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1990>
    a3b6:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    a3ba:	e007      	b.n	a3cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a0>
    a3bc:	2400      	movs	r4, #0
    a3be:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    a3c2:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    a3c6:	b121      	cbz	r1, a3d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    a3c8:	f240 61b4 	movw	r1, #1716	; 0x6b4
    a3cc:	2031      	movs	r0, #49	; 0x31
    a3ce:	f7fa f8b5 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3d2:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    a3d6:	b141      	cbz	r1, a3ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19be>
    a3d8:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    a3dc:	8801      	ldrh	r1, [r0, #0]
    a3de:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    a3e2:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a3e6:	210c      	movs	r1, #12
    a3e8:	e008      	b.n	a3fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>
    a3ea:	8801      	ldrh	r1, [r0, #0]
    a3ec:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    a3f0:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a3f4:	2101      	movs	r1, #1
    a3f6:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    a3fa:	210b      	movs	r1, #11
    a3fc:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    a400:	8800      	ldrh	r0, [r0, #0]
    a402:	f7fa fcab 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a406:	f003 f984 	bl	d712 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a40a:	78a8      	ldrb	r0, [r5, #2]
    a40c:	f7f9 fee6 	bl	41dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a410:	68a8      	ldr	r0, [r5, #8]
    a412:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    a416:	bd70      	pop	{r4, r5, r6, pc}
    a418:	20000124 	.word	0x20000124
    a41c:	b510      	push	{r4, lr}
    a41e:	4c08      	ldr	r4, [pc, #32]	; (a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a14>)
    a420:	2301      	movs	r3, #1
    a422:	4619      	mov	r1, r3
    a424:	68a0      	ldr	r0, [r4, #8]
    a426:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a42a:	3070      	adds	r0, #112	; 0x70
    a42c:	f003 fbfd 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a430:	2800      	cmp	r0, #0
    a432:	d103      	bne.n	a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    a434:	68a1      	ldr	r1, [r4, #8]
    a436:	2008      	movs	r0, #8
    a438:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    a43c:	bd10      	pop	{r4, pc}
    a43e:	0000      	.short	0x0000
    a440:	20000124 	.word	0x20000124
    a444:	4814      	ldr	r0, [pc, #80]	; (a498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    a446:	b510      	push	{r4, lr}
    a448:	68c1      	ldr	r1, [r0, #12]
    a44a:	6880      	ldr	r0, [r0, #8]
    a44c:	7909      	ldrb	r1, [r1, #4]
    a44e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a452:	2a0a      	cmp	r2, #10
    a454:	d109      	bne.n	a46a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3e>
    a456:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    a45a:	428a      	cmp	r2, r1
    a45c:	d105      	bne.n	a46a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3e>
    a45e:	2100      	movs	r1, #0
    a460:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a464:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    a468:	bd10      	pop	{r4, pc}
    a46a:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    a46e:	0713      	lsls	r3, r2, #28
    a470:	d507      	bpl.n	a482 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    a472:	f022 0108 	bic.w	r1, r2, #8
    a476:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a47e:	f7fe bbf3 	b.w	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    a482:	29ff      	cmp	r1, #255	; 0xff
    a484:	d004      	beq.n	a490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a64>
    a486:	f240 616c 	movw	r1, #1644	; 0x66c
    a48a:	2031      	movs	r0, #49	; 0x31
    a48c:	f7fa f856 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a494:	f7ff be94 	b.w	a1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1794>
    a498:	20000124 	.word	0x20000124
    a49c:	b510      	push	{r4, lr}
    a49e:	4c15      	ldr	r4, [pc, #84]	; (a4f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>)
    a4a0:	68a0      	ldr	r0, [r4, #8]
    a4a2:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    a4a6:	0789      	lsls	r1, r1, #30
    a4a8:	d411      	bmi.n	a4ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa2>
    a4aa:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a4ae:	2301      	movs	r3, #1
    a4b0:	2100      	movs	r1, #0
    a4b2:	3070      	adds	r0, #112	; 0x70
    a4b4:	f003 fbb9 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4b8:	b120      	cbz	r0, a4c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    a4ba:	68a1      	ldr	r1, [r4, #8]
    a4bc:	2006      	movs	r0, #6
    a4be:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a4c2:	e009      	b.n	a4d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aac>
    a4c4:	f240 61d6 	movw	r1, #1750	; 0x6d6
    a4c8:	2031      	movs	r0, #49	; 0x31
    a4ca:	f7fa f837 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4ce:	2100      	movs	r1, #0
    a4d0:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    a4d4:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    a4d8:	68a0      	ldr	r0, [r4, #8]
    a4da:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a4de:	0780      	lsls	r0, r0, #30
    a4e0:	d507      	bpl.n	a4f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac6>
    a4e2:	f7fe fbc1 	bl	8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    a4e6:	68a0      	ldr	r0, [r4, #8]
    a4e8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a4ec:	f021 0102 	bic.w	r1, r1, #2
    a4f0:	7001      	strb	r1, [r0, #0]
    a4f2:	bd10      	pop	{r4, pc}
    a4f4:	20000124 	.word	0x20000124
    a4f8:	4808      	ldr	r0, [pc, #32]	; (a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>)
    a4fa:	b510      	push	{r4, lr}
    a4fc:	6880      	ldr	r0, [r0, #8]
    a4fe:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    a502:	b941      	cbnz	r1, a516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    a504:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a508:	2301      	movs	r3, #1
    a50a:	2106      	movs	r1, #6
    a50c:	3070      	adds	r0, #112	; 0x70
    a50e:	f003 fb8c 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a512:	2800      	cmp	r0, #0
    a514:	d000      	beq.n	a518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aec>
    a516:	2001      	movs	r0, #1
    a518:	bd10      	pop	{r4, pc}
    a51a:	0000      	.short	0x0000
    a51c:	20000124 	.word	0x20000124
    a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a522:	4c54      	ldr	r4, [pc, #336]	; (a674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c48>)
    a524:	4606      	mov	r6, r0
    a526:	4615      	mov	r5, r2
    a528:	68a0      	ldr	r0, [r4, #8]
    a52a:	b109      	cbz	r1, a530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    a52c:	2100      	movs	r1, #0
    a52e:	e004      	b.n	a53a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    a530:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    a534:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    a538:	4411      	add	r1, r2
    a53a:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    a53e:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    a542:	b939      	cbnz	r1, a554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b28>
    a544:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a548:	2301      	movs	r3, #1
    a54a:	4619      	mov	r1, r3
    a54c:	3070      	adds	r0, #112	; 0x70
    a54e:	f003 fb6c 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a552:	b130      	cbz	r0, a562 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    a554:	68a0      	ldr	r0, [r4, #8]
    a556:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    a55a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    a55e:	4411      	add	r1, r2
    a560:	8001      	strh	r1, [r0, #0]
    a562:	68a0      	ldr	r0, [r4, #8]
    a564:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    a568:	b132      	cbz	r2, a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4c>
    a56a:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    a56e:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    a572:	4419      	add	r1, r3
    a574:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    a578:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    a57c:	2f00      	cmp	r7, #0
    a57e:	dd06      	ble.n	a58e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b62>
    a580:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    a584:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    a588:	4419      	add	r1, r3
    a58a:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    a58e:	2101      	movs	r1, #1
    a590:	233d      	movs	r3, #61	; 0x3d
    a592:	b116      	cbz	r6, a59a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b6e>
    a594:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    a598:	e013      	b.n	a5c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b96>
    a59a:	7824      	ldrb	r4, [r4, #0]
    a59c:	2c02      	cmp	r4, #2
    a59e:	d00a      	beq.n	a5b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8a>
    a5a0:	2c01      	cmp	r4, #1
    a5a2:	d012      	beq.n	a5ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9e>
    a5a4:	b345      	cbz	r5, a5f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bcc>
    a5a6:	f100 028d 	add.w	r2, r0, #141	; 0x8d
    a5aa:	7011      	strb	r1, [r2, #0]
    a5ac:	f015 0f14 	tst.w	r5, #20
    a5b0:	d00e      	beq.n	a5d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    a5b2:	211e      	movs	r1, #30
    a5b4:	e018      	b.n	a5e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    a5b6:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    a5ba:	2a06      	cmp	r2, #6
    a5bc:	d03e      	beq.n	a63c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    a5be:	2216      	movs	r2, #22
    a5c0:	e03c      	b.n	a63c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    a5c2:	f100 028d 	add.w	r2, r0, #141	; 0x8d
    a5c6:	7011      	strb	r1, [r2, #0]
    a5c8:	e041      	b.n	a64e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    a5ca:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    a5ce:	e035      	b.n	a63c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    a5d0:	0729      	lsls	r1, r5, #28
    a5d2:	d502      	bpl.n	a5da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bae>
    a5d4:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    a5d8:	e039      	b.n	a64e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    a5da:	06a9      	lsls	r1, r5, #26
    a5dc:	d501      	bpl.n	a5e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb6>
    a5de:	2123      	movs	r1, #35	; 0x23
    a5e0:	e002      	b.n	a5e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    a5e2:	07a9      	lsls	r1, r5, #30
    a5e4:	d003      	beq.n	a5ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc2>
    a5e6:	212a      	movs	r1, #42	; 0x2a
    a5e8:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    a5ec:	e02f      	b.n	a64e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    a5ee:	f640 419d 	movw	r1, #3229	; 0xc9d
    a5f2:	2031      	movs	r0, #49	; 0x31
    a5f4:	f7f9 ffa2 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5f8:	b12a      	cbz	r2, a606 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bda>
    a5fa:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    a5fe:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a602:	429a      	cmp	r2, r3
    a604:	d210      	bcs.n	a628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    a606:	2f00      	cmp	r7, #0
    a608:	dd05      	ble.n	a616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    a60a:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    a60e:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a612:	429a      	cmp	r2, r3
    a614:	d208      	bcs.n	a628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    a616:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    a61a:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    a61e:	4293      	cmp	r3, r2
    a620:	d304      	bcc.n	a62c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a622:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    a626:	b10b      	cbz	r3, a62c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    a628:	2222      	movs	r2, #34	; 0x22
    a62a:	e007      	b.n	a63c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    a62c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    a630:	b13b      	cbz	r3, a642 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c16>
    a632:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    a636:	4293      	cmp	r3, r2
    a638:	d309      	bcc.n	a64e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    a63a:	2208      	movs	r2, #8
    a63c:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    a640:	e7bf      	b.n	a5c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b96>
    a642:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    a646:	2a06      	cmp	r2, #6
    a648:	d301      	bcc.n	a64e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    a64a:	223e      	movs	r2, #62	; 0x3e
    a64c:	e7f6      	b.n	a63c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    a64e:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    a652:	f88d 1000 	strb.w	r1, [sp]
    a656:	9900      	ldr	r1, [sp, #0]
    a658:	9100      	str	r1, [sp, #0]
    a65a:	f89d 1000 	ldrb.w	r1, [sp]
    a65e:	b119      	cbz	r1, a668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>
    a660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a664:	f004 bc17 	b.w	ee96 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a668:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a66c:	2100      	movs	r1, #0
    a66e:	f7fd b9a1 	b.w	79b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a672:	0000      	.short	0x0000
    a674:	20000124 	.word	0x20000124
    a678:	b570      	push	{r4, r5, r6, lr}
    a67a:	4d2d      	ldr	r5, [pc, #180]	; (a730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d04>)
    a67c:	68a8      	ldr	r0, [r5, #8]
    a67e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    a682:	b151      	cbz	r1, a69a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    a684:	2901      	cmp	r1, #1
    a686:	d008      	beq.n	a69a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    a688:	2902      	cmp	r1, #2
    a68a:	d009      	beq.n	a6a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c74>
    a68c:	2903      	cmp	r1, #3
    a68e:	d007      	beq.n	a6a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c74>
    a690:	f640 215f 	movw	r1, #2655	; 0xa5f
    a694:	2031      	movs	r0, #49	; 0x31
    a696:	f7f9 ff51 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a69a:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    a69e:	e035      	b.n	a70c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce0>
    a6a0:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    a6a4:	2908      	cmp	r1, #8
    a6a6:	d034      	beq.n	a712 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce6>
    a6a8:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    a6ac:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    a6b0:	2400      	movs	r4, #0
    a6b2:	1c8b      	adds	r3, r1, #2
    a6b4:	429a      	cmp	r2, r3
    a6b6:	d306      	bcc.n	a6c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9a>
    a6b8:	1a51      	subs	r1, r2, r1
    a6ba:	1e89      	subs	r1, r1, #2
    a6bc:	040c      	lsls	r4, r1, #16
    a6be:	0c24      	lsrs	r4, r4, #16
    a6c0:	d001      	beq.n	a6c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9a>
    a6c2:	1e64      	subs	r4, r4, #1
    a6c4:	b2a4      	uxth	r4, r4
    a6c6:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    a6ca:	b139      	cbz	r1, a6dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
    a6cc:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a6d0:	2301      	movs	r3, #1
    a6d2:	2109      	movs	r1, #9
    a6d4:	3070      	adds	r0, #112	; 0x70
    a6d6:	f003 faa8 	bl	dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6da:	b330      	cbz	r0, a72a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    a6dc:	f7ff ff0c 	bl	a4f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    a6e0:	b168      	cbz	r0, a6fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd2>
    a6e2:	68a9      	ldr	r1, [r5, #8]
    a6e4:	2000      	movs	r0, #0
    a6e6:	3190      	adds	r1, #144	; 0x90
    a6e8:	c906      	ldmia	r1, {r1, r2}
    a6ea:	1c8b      	adds	r3, r1, #2
    a6ec:	429a      	cmp	r2, r3
    a6ee:	d303      	bcc.n	a6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    a6f0:	1a50      	subs	r0, r2, r1
    a6f2:	1e80      	subs	r0, r0, #2
    a6f4:	d000      	beq.n	a6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    a6f6:	1e40      	subs	r0, r0, #1
    a6f8:	42a0      	cmp	r0, r4
    a6fa:	d200      	bcs.n	a6fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd2>
    a6fc:	b284      	uxth	r4, r0
    a6fe:	b10c      	cbz	r4, a704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd8>
    a700:	1e64      	subs	r4, r4, #1
    a702:	b2a4      	uxth	r4, r4
    a704:	68a8      	ldr	r0, [r5, #8]
    a706:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    a70a:	4421      	add	r1, r4
    a70c:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    a710:	bd70      	pop	{r4, r5, r6, pc}
    a712:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    a716:	2903      	cmp	r1, #3
    a718:	d3bf      	bcc.n	a69a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    a71a:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    a71e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    a720:	4411      	add	r1, r2
    a722:	1c49      	adds	r1, r1, #1
    a724:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    a728:	bd70      	pop	{r4, r5, r6, pc}
    a72a:	2400      	movs	r4, #0
    a72c:	e7ea      	b.n	a704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd8>
    a72e:	0000      	.short	0x0000
    a730:	20000124 	.word	0x20000124

0000a734 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a734:	4903      	ldr	r1, [pc, #12]	; (a744 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a736:	888a      	ldrh	r2, [r1, #4]
    a738:	8002      	strh	r2, [r0, #0]
    a73a:	7889      	ldrb	r1, [r1, #2]
    a73c:	7081      	strb	r1, [r0, #2]
    a73e:	2000      	movs	r0, #0
    a740:	4770      	bx	lr
    a742:	0000      	.short	0x0000
    a744:	20000eb8 	.word	0x20000eb8

0000a748 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    a748:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a74c:	460d      	mov	r5, r1
    a74e:	4606      	mov	r6, r0
    a750:	f000 fc12 	bl	af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a754:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a758:	b1e0      	cbz	r0, a794 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    a75a:	8830      	ldrh	r0, [r6, #0]
    a75c:	4669      	mov	r1, sp
    a75e:	f003 fa3a 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a762:	2800      	cmp	r0, #0
    a764:	d114      	bne.n	a790 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    a766:	f8dd 4004 	ldr.w	r4, [sp, #4]
    a76a:	2700      	movs	r7, #0
    a76c:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    a770:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    a774:	f005 f8bf 	bl	f8f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    a778:	70a8      	strb	r0, [r5, #2]
    a77a:	7860      	ldrb	r0, [r4, #1]
    a77c:	f005 f8bb 	bl	f8f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    a780:	70e8      	strb	r0, [r5, #3]
    a782:	78a0      	ldrb	r0, [r4, #2]
    a784:	3c66      	subs	r4, #102	; 0x66
    a786:	2800      	cmp	r0, #0
    a788:	d1f0      	bne.n	a76c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    a78a:	8830      	ldrh	r0, [r6, #0]
    a78c:	8028      	strh	r0, [r5, #0]
    a78e:	2000      	movs	r0, #0
    a790:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a794:	2001      	movs	r0, #1
    a796:	e7fb      	b.n	a790 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

0000a798 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a798:	b51c      	push	{r2, r3, r4, lr}
    a79a:	8800      	ldrh	r0, [r0, #0]
    a79c:	4669      	mov	r1, sp
    a79e:	f003 fa1a 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a7a2:	2800      	cmp	r0, #0
    a7a4:	d10b      	bne.n	a7be <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    a7a6:	480b      	ldr	r0, [pc, #44]	; (a7d4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    a7a8:	7800      	ldrb	r0, [r0, #0]
    a7aa:	b188      	cbz	r0, a7d0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    a7ac:	9801      	ldr	r0, [sp, #4]
    a7ae:	f005 fa29 	bl	fc04 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x346>
    a7b2:	b128      	cbz	r0, a7c0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    a7b4:	9801      	ldr	r0, [sp, #4]
    a7b6:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    a7ba:	b118      	cbz	r0, a7c4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    a7bc:	203a      	movs	r0, #58	; 0x3a
    a7be:	bd1c      	pop	{r2, r3, r4, pc}
    a7c0:	2002      	movs	r0, #2
    a7c2:	bd1c      	pop	{r2, r3, r4, pc}
    a7c4:	9901      	ldr	r1, [sp, #4]
    a7c6:	2001      	movs	r0, #1
    a7c8:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    a7cc:	2000      	movs	r0, #0
    a7ce:	bd1c      	pop	{r2, r3, r4, pc}
    a7d0:	2011      	movs	r0, #17
    a7d2:	bd1c      	pop	{r2, r3, r4, pc}
    a7d4:	20000200 	.word	0x20000200

0000a7d8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a7d8:	b510      	push	{r4, lr}
    a7da:	4604      	mov	r4, r0
    a7dc:	f005 fa09 	bl	fbf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a7e0:	b130      	cbz	r0, a7f0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a7e2:	4804      	ldr	r0, [pc, #16]	; (a7f4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a7e4:	8941      	ldrh	r1, [r0, #10]
    a7e6:	8021      	strh	r1, [r4, #0]
    a7e8:	8980      	ldrh	r0, [r0, #12]
    a7ea:	8060      	strh	r0, [r4, #2]
    a7ec:	2000      	movs	r0, #0
    a7ee:	bd10      	pop	{r4, pc}
    a7f0:	2001      	movs	r0, #1
    a7f2:	bd10      	pop	{r4, pc}
    a7f4:	20001104 	.word	0x20001104

0000a7f8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a7f8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a7fa:	4605      	mov	r5, r0
    a7fc:	f000 fbbc 	bl	af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a800:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a804:	b310      	cbz	r0, a84c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a806:	2400      	movs	r4, #0
    a808:	a802      	add	r0, sp, #8
    a80a:	f88d 4004 	strb.w	r4, [sp, #4]
    a80e:	f88d 4008 	strb.w	r4, [sp, #8]
    a812:	9000      	str	r0, [sp, #0]
    a814:	78aa      	ldrb	r2, [r5, #2]
    a816:	7869      	ldrb	r1, [r5, #1]
    a818:	7828      	ldrb	r0, [r5, #0]
    a81a:	ab01      	add	r3, sp, #4
    a81c:	f005 fa27 	bl	fc6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b0>
    a820:	2800      	cmp	r0, #0
    a822:	d112      	bne.n	a84a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a824:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a828:	f005 f944 	bl	fab4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    a82c:	b180      	cbz	r0, a850 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a82e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a832:	f005 f93f 	bl	fab4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    a836:	b158      	cbz	r0, a850 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a838:	4806      	ldr	r0, [pc, #24]	; (a854 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a83a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a83e:	7481      	strb	r1, [r0, #18]
    a840:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a844:	74c1      	strb	r1, [r0, #19]
    a846:	8284      	strh	r4, [r0, #20]
    a848:	2000      	movs	r0, #0
    a84a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a84c:	2001      	movs	r0, #1
    a84e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a850:	2011      	movs	r0, #17
    a852:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a854:	20000eb8 	.word	0x20000eb8

0000a858 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a85a:	460f      	mov	r7, r1
    a85c:	4605      	mov	r5, r0
    a85e:	7806      	ldrb	r6, [r0, #0]
    a860:	f005 f8d7 	bl	fa12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x154>
    a864:	2800      	cmp	r0, #0
    a866:	d10a      	bne.n	a87e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x26>
    a868:	4628      	mov	r0, r5
    a86a:	f005 f8b6 	bl	f9da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11c>
    a86e:	2800      	cmp	r0, #0
    a870:	d105      	bne.n	a87e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x26>
    a872:	2001      	movs	r0, #1
    a874:	f7fa f844 	bl	4900 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    a878:	4286      	cmp	r6, r0
    a87a:	d301      	bcc.n	a880 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a87c:	2007      	movs	r0, #7
    a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a880:	2101      	movs	r1, #1
    a882:	4630      	mov	r0, r6
    a884:	f003 f86f 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a888:	0004      	movs	r4, r0
    a88a:	d10c      	bne.n	a8a6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4e>
    a88c:	2200      	movs	r2, #0
    a88e:	2101      	movs	r1, #1
    a890:	4630      	mov	r0, r6
    a892:	f003 f84c 	bl	d92e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a896:	0004      	movs	r4, r0
    a898:	d00b      	beq.n	a8b2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    a89a:	f003 ff45 	bl	e728 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a89e:	4915      	ldr	r1, [pc, #84]	; (a8f4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9c>)
    a8a0:	4620      	mov	r0, r4
    a8a2:	f003 ff27 	bl	e6f4 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    a8a6:	4620      	mov	r0, r4
    a8a8:	f004 f953 	bl	eb52 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    a8ac:	b130      	cbz	r0, a8bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x64>
    a8ae:	200c      	movs	r0, #12
    a8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8b2:	f241 213b 	movw	r1, #4667	; 0x123b
    a8b6:	2039      	movs	r0, #57	; 0x39
    a8b8:	f7f9 fe40 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8bc:	4620      	mov	r0, r4
    a8be:	f003 ff7f 	bl	e7c0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a8c2:	7038      	strb	r0, [r7, #0]
    a8c4:	74e8      	strb	r0, [r5, #19]
    a8c6:	4629      	mov	r1, r5
    a8c8:	4620      	mov	r0, r4
    a8ca:	f7fc f911 	bl	6af0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    a8ce:	4606      	mov	r6, r0
    a8d0:	7e68      	ldrb	r0, [r5, #25]
    a8d2:	b168      	cbz	r0, a8f0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
    a8d4:	b966      	cbnz	r6, a8f0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
    a8d6:	20ff      	movs	r0, #255	; 0xff
    a8d8:	f88d 0000 	strb.w	r0, [sp]
    a8dc:	466a      	mov	r2, sp
    a8de:	2100      	movs	r1, #0
    a8e0:	4620      	mov	r0, r4
    a8e2:	f003 ff85 	bl	e7f0 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    a8e6:	466a      	mov	r2, sp
    a8e8:	2100      	movs	r1, #0
    a8ea:	4620      	mov	r0, r4
    a8ec:	f003 ff8a 	bl	e804 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    a8f0:	4630      	mov	r0, r6
    a8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8f4:	20001105 	.word	0x20001105

0000a8f8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a8f8:	7801      	ldrb	r1, [r0, #0]
    a8fa:	b179      	cbz	r1, a91c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a8fc:	7841      	ldrb	r1, [r0, #1]
    a8fe:	b169      	cbz	r1, a91c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a900:	8841      	ldrh	r1, [r0, #2]
    a902:	291b      	cmp	r1, #27
    a904:	d30a      	bcc.n	a91c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a906:	8881      	ldrh	r1, [r0, #4]
    a908:	291b      	cmp	r1, #27
    a90a:	d307      	bcc.n	a91c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a90c:	4904      	ldr	r1, [pc, #16]	; (a920 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a90e:	6802      	ldr	r2, [r0, #0]
    a910:	f8c1 2002 	str.w	r2, [r1, #2]
    a914:	8880      	ldrh	r0, [r0, #4]
    a916:	80c8      	strh	r0, [r1, #6]
    a918:	2000      	movs	r0, #0
    a91a:	4770      	bx	lr
    a91c:	2012      	movs	r0, #18
    a91e:	4770      	bx	lr
    a920:	20000eb8 	.word	0x20000eb8

0000a924 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a924:	6800      	ldr	r0, [r0, #0]
    a926:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a92a:	4288      	cmp	r0, r1
    a92c:	d303      	bcc.n	a936 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a92e:	4903      	ldr	r1, [pc, #12]	; (a93c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a930:	6088      	str	r0, [r1, #8]
    a932:	2000      	movs	r0, #0
    a934:	4770      	bx	lr
    a936:	2012      	movs	r0, #18
    a938:	4770      	bx	lr
    a93a:	0000      	.short	0x0000
    a93c:	20000eb8 	.word	0x20000eb8

0000a940 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a940:	4a03      	ldr	r2, [pc, #12]	; (a950 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a942:	e9d2 1200 	ldrd	r1, r2, [r2]
    a946:	6001      	str	r1, [r0, #0]
    a948:	6042      	str	r2, [r0, #4]
    a94a:	2000      	movs	r0, #0
    a94c:	4770      	bx	lr
    a94e:	0000      	.short	0x0000
    a950:	0000adf8 	.word	0x0000adf8

0000a954 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    a954:	b510      	push	{r4, lr}
    a956:	2005      	movs	r0, #5
    a958:	f000 fb04 	bl	af64 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a95c:	f7fd fe86 	bl	866c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a960:	4902      	ldr	r1, [pc, #8]	; (a96c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    a962:	4801      	ldr	r0, [pc, #4]	; (a968 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    a964:	6048      	str	r0, [r1, #4]
    a966:	bd10      	pop	{r4, pc}
    a968:	0000aa39 	.word	0x0000aa39
    a96c:	20000200 	.word	0x20000200

0000a970 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a970:	4901      	ldr	r1, [pc, #4]	; (a978 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    a972:	7048      	strb	r0, [r1, #1]
    a974:	f000 b802 	b.w	a97c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a978:	20000200 	.word	0x20000200

0000a97c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a980:	f003 f86a 	bl	da58 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a984:	f7fb fa34 	bl	5df0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a988:	4c1a      	ldr	r4, [pc, #104]	; (a9f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>)
    a98a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    a98e:	2600      	movs	r6, #0
    a990:	81e0      	strh	r0, [r4, #14]
    a992:	8220      	strh	r0, [r4, #16]
    a994:	75e6      	strb	r6, [r4, #23]
    a996:	8326      	strh	r6, [r4, #24]
    a998:	8026      	strh	r6, [r4, #0]
    a99a:	f7fa fa45 	bl	4e28 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI>
    a99e:	a016      	add	r0, pc, #88	; (adr r0, a9f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7c>)
    a9a0:	4d17      	ldr	r5, [pc, #92]	; (aa00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>)
    a9a2:	6801      	ldr	r1, [r0, #0]
    a9a4:	7900      	ldrb	r0, [r0, #4]
    a9a6:	702e      	strb	r6, [r5, #0]
    a9a8:	f8c5 1001 	str.w	r1, [r5, #1]
    a9ac:	7168      	strb	r0, [r5, #5]
    a9ae:	2101      	movs	r1, #1
    a9b0:	2000      	movs	r0, #0
    a9b2:	f002 ffd8 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a9b6:	0007      	movs	r7, r0
    a9b8:	d005      	beq.n	a9c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a>
    a9ba:	f003 feb5 	bl	e728 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a9be:	1c69      	adds	r1, r5, #1
    a9c0:	4638      	mov	r0, r7
    a9c2:	f003 fe97 	bl	e6f4 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    a9c6:	201b      	movs	r0, #27
    a9c8:	80e8      	strh	r0, [r5, #6]
    a9ca:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a9ce:	8129      	strh	r1, [r5, #8]
    a9d0:	8168      	strh	r0, [r5, #10]
    a9d2:	81a9      	strh	r1, [r5, #12]
    a9d4:	74a6      	strb	r6, [r4, #18]
    a9d6:	74e6      	strb	r6, [r4, #19]
    a9d8:	2103      	movs	r1, #3
    a9da:	70a1      	strb	r1, [r4, #2]
    a9dc:	2102      	movs	r1, #2
    a9de:	70e1      	strb	r1, [r4, #3]
    a9e0:	80a0      	strh	r0, [r4, #4]
    a9e2:	80e0      	strh	r0, [r4, #6]
    a9e4:	f640 60a6 	movw	r0, #3750	; 0xea6
    a9e8:	60a0      	str	r0, [r4, #8]
    a9ea:	75a6      	strb	r6, [r4, #22]
    a9ec:	7326      	strb	r6, [r4, #12]
    a9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9f2:	0000      	.short	0x0000
    a9f4:	20000eb8 	.word	0x20000eb8
    a9f8:	ffffffff 	.word	0xffffffff
    a9fc:	0000001f 	.word	0x0000001f
    aa00:	20001104 	.word	0x20001104

0000aa04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    aa04:	b510      	push	{r4, lr}
    aa06:	b158      	cbz	r0, aa20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    aa08:	490a      	ldr	r1, [pc, #40]	; (aa34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    aa0a:	780a      	ldrb	r2, [r1, #0]
    aa0c:	b16a      	cbz	r2, aa2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    aa0e:	2200      	movs	r2, #0
    aa10:	7042      	strb	r2, [r0, #1]
    aa12:	2303      	movs	r3, #3
    aa14:	7003      	strb	r3, [r0, #0]
    aa16:	2301      	movs	r3, #1
    aa18:	7103      	strb	r3, [r0, #4]
    aa1a:	700a      	strb	r2, [r1, #0]
    aa1c:	4618      	mov	r0, r3
    aa1e:	bd10      	pop	{r4, pc}
    aa20:	f241 71be 	movw	r1, #6078	; 0x17be
    aa24:	2039      	movs	r0, #57	; 0x39
    aa26:	f7f9 fd89 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa2e:	f7fb bd8d 	b.w	654c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    aa32:	0000      	.short	0x0000
    aa34:	20000eb8 	.word	0x20000eb8
    aa38:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa3c:	4692      	mov	sl, r2
    aa3e:	460f      	mov	r7, r1
    aa40:	4681      	mov	r9, r0
    aa42:	f005 f8d6 	bl	fbf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    aa46:	2800      	cmp	r0, #0
    aa48:	d063      	beq.n	ab12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    aa4a:	4933      	ldr	r1, [pc, #204]	; (ab18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    aa4c:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    aa50:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    aa54:	88c8      	ldrh	r0, [r1, #6]
    aa56:	4290      	cmp	r0, r2
    aa58:	d300      	bcc.n	aa5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    aa5a:	4610      	mov	r0, r2
    aa5c:	4680      	mov	r8, r0
    aa5e:	8948      	ldrh	r0, [r1, #10]
    aa60:	42b0      	cmp	r0, r6
    aa62:	d200      	bcs.n	aa66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    aa64:	4606      	mov	r6, r0
    aa66:	890c      	ldrh	r4, [r1, #8]
    aa68:	f640 0048 	movw	r0, #2120	; 0x848
    aa6c:	4284      	cmp	r4, r0
    aa6e:	d300      	bcc.n	aa72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    aa70:	4604      	mov	r4, r0
    aa72:	898d      	ldrh	r5, [r1, #12]
    aa74:	4285      	cmp	r5, r0
    aa76:	d300      	bcc.n	aa7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    aa78:	4605      	mov	r5, r0
    aa7a:	4284      	cmp	r4, r0
    aa7c:	d300      	bcc.n	aa80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    aa7e:	4604      	mov	r4, r0
    aa80:	f44f 71a4 	mov.w	r1, #328	; 0x148
    aa84:	2e1b      	cmp	r6, #27
    aa86:	d001      	beq.n	aa8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    aa88:	428d      	cmp	r5, r1
    aa8a:	d104      	bne.n	aa96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    aa8c:	f1b8 0f1b 	cmp.w	r8, #27
    aa90:	d03f      	beq.n	ab12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    aa92:	428c      	cmp	r4, r1
    aa94:	d03d      	beq.n	ab12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    aa96:	466a      	mov	r2, sp
    aa98:	4651      	mov	r1, sl
    aa9a:	4648      	mov	r0, r9
    aa9c:	f005 f82d 	bl	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    aaa0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    aaa4:	4641      	mov	r1, r8
    aaa6:	4540      	cmp	r0, r8
    aaa8:	d900      	bls.n	aaac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    aaaa:	4608      	mov	r0, r1
    aaac:	80f8      	strh	r0, [r7, #6]
    aaae:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    aab2:	42a1      	cmp	r1, r4
    aab4:	d800      	bhi.n	aab8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    aab6:	460c      	mov	r4, r1
    aab8:	813c      	strh	r4, [r7, #8]
    aaba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    aabe:	42b1      	cmp	r1, r6
    aac0:	d800      	bhi.n	aac4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    aac2:	460e      	mov	r6, r1
    aac4:	807e      	strh	r6, [r7, #2]
    aac6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aaca:	42a9      	cmp	r1, r5
    aacc:	d900      	bls.n	aad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    aace:	4629      	mov	r1, r5
    aad0:	80b9      	strh	r1, [r7, #4]
    aad2:	2201      	movs	r2, #1
    aad4:	703a      	strb	r2, [r7, #0]
    aad6:	381b      	subs	r0, #27
    aad8:	28e0      	cmp	r0, #224	; 0xe0
    aada:	d902      	bls.n	aae2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    aadc:	f640 41b6 	movw	r1, #3254	; 0xcb6
    aae0:	e014      	b.n	ab0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    aae2:	3e1b      	subs	r6, #27
    aae4:	2ee0      	cmp	r6, #224	; 0xe0
    aae6:	d902      	bls.n	aaee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    aae8:	f640 41b8 	movw	r1, #3256	; 0xcb8
    aaec:	e00e      	b.n	ab0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    aaee:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    aaf2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    aaf6:	4284      	cmp	r4, r0
    aaf8:	d902      	bls.n	ab00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    aafa:	f640 41ba 	movw	r1, #3258	; 0xcba
    aafe:	e005      	b.n	ab0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ab00:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    ab04:	4281      	cmp	r1, r0
    ab06:	d904      	bls.n	ab12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ab08:	f640 41bc 	movw	r1, #3260	; 0xcbc
    ab0c:	2039      	movs	r0, #57	; 0x39
    ab0e:	f7f9 fd15 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab12:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab16:	0000      	.short	0x0000
    ab18:	20001104 	.word	0x20001104

0000ab1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    ab1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab20:	b088      	sub	sp, #32
    ab22:	460c      	mov	r4, r1
    ab24:	4606      	mov	r6, r0
    ab26:	f003 fe4e 	bl	e7c6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ab2a:	b198      	cbz	r0, ab54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    ab2c:	4630      	mov	r0, r6
    ab2e:	f003 fe3d 	bl	e7ac <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ab32:	b130      	cbz	r0, ab42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    ab34:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ab38:	2012      	movs	r0, #18
    ab3a:	2900      	cmp	r1, #0
    ab3c:	d00b      	beq.n	ab56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ab3e:	2980      	cmp	r1, #128	; 0x80
    ab40:	d809      	bhi.n	ab56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ab42:	4630      	mov	r0, r6
    ab44:	f003 fe2a 	bl	e79c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    ab48:	b140      	cbz	r0, ab5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ab4a:	4630      	mov	r0, r6
    ab4c:	f003 fdb7 	bl	e6be <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    ab50:	b130      	cbz	r0, ab60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    ab52:	e009      	b.n	ab68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    ab54:	2042      	movs	r0, #66	; 0x42
    ab56:	b008      	add	sp, #32
    ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab5c:	200c      	movs	r0, #12
    ab5e:	e7fa      	b.n	ab56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ab60:	4630      	mov	r0, r6
    ab62:	f003 fe1d 	bl	e7a0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    ab66:	b3a8      	cbz	r0, abd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    ab68:	4630      	mov	r0, r6
    ab6a:	f003 fff2 	bl	eb52 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ab6e:	2800      	cmp	r0, #0
    ab70:	d1f4      	bne.n	ab5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ab72:	4630      	mov	r0, r6
    ab74:	f003 fdbf 	bl	e6f6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    ab78:	2800      	cmp	r0, #0
    ab7a:	d1ef      	bne.n	ab5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ab7c:	4630      	mov	r0, r6
    ab7e:	f7fb feff 	bl	6980 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    ab82:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ab86:	f242 7110 	movw	r1, #10000	; 0x2710
    ab8a:	fb00 f801 	mul.w	r8, r0, r1
    ab8e:	78e1      	ldrb	r1, [r4, #3]
    ab90:	4630      	mov	r0, r6
    ab92:	f003 fdfa 	bl	e78a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    ab96:	4630      	mov	r0, r6
    ab98:	f003 fe04 	bl	e7a4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ab9c:	b1e8      	cbz	r0, abda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    ab9e:	2200      	movs	r2, #0
    aba0:	4611      	mov	r1, r2
    aba2:	a801      	add	r0, sp, #4
    aba4:	f7f9 ff1e 	bl	49e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    aba8:	0004      	movs	r4, r0
    abaa:	d06a      	beq.n	ac82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    abac:	2100      	movs	r1, #0
    abae:	f7fb fb85 	bl	62bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    abb2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    abb6:	8020      	strh	r0, [r4, #0]
    abb8:	4621      	mov	r1, r4
    abba:	4630      	mov	r0, r6
    abbc:	f003 fe16 	bl	e7ec <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    abc0:	f005 f817 	bl	fbf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    abc4:	4d3a      	ldr	r5, [pc, #232]	; (acb0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    abc6:	2800      	cmp	r0, #0
    abc8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    abcc:	d00f      	beq.n	abee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    abce:	88aa      	ldrh	r2, [r5, #4]
    abd0:	88e9      	ldrh	r1, [r5, #6]
    abd2:	e00e      	b.n	abf2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    abd4:	e7ff      	b.n	abd6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    abd6:	2012      	movs	r0, #18
    abd8:	e7bd      	b.n	ab56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    abda:	4642      	mov	r2, r8
    abdc:	2100      	movs	r1, #0
    abde:	4630      	mov	r0, r6
    abe0:	f7fc fdf6 	bl	77d0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    abe4:	2800      	cmp	r0, #0
    abe6:	d0b6      	beq.n	ab56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    abe8:	f241 4102 	movw	r1, #5122	; 0x1402
    abec:	e053      	b.n	ac96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    abee:	221b      	movs	r2, #27
    abf0:	4611      	mov	r1, r2
    abf2:	84c2      	strh	r2, [r0, #38]	; 0x26
    abf4:	8501      	strh	r1, [r0, #40]	; 0x28
    abf6:	68a8      	ldr	r0, [r5, #8]
    abf8:	62a0      	str	r0, [r4, #40]	; 0x28
    abfa:	f641 574c 	movw	r7, #7500	; 0x1d4c
    abfe:	4630      	mov	r0, r6
    ac00:	f003 fdd8 	bl	e7b4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ac04:	b910      	cbnz	r0, ac0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    ac06:	4630      	mov	r0, r6
    ac08:	f003 fdee 	bl	e7e8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    ac0c:	6067      	str	r7, [r4, #4]
    ac0e:	8821      	ldrh	r1, [r4, #0]
    ac10:	f8ad 1008 	strh.w	r1, [sp, #8]
    ac14:	7ca9      	ldrb	r1, [r5, #18]
    ac16:	f88d 100a 	strb.w	r1, [sp, #10]
    ac1a:	7ce9      	ldrb	r1, [r5, #19]
    ac1c:	f88d 100b 	strb.w	r1, [sp, #11]
    ac20:	8aa9      	ldrh	r1, [r5, #20]
    ac22:	f8ad 100c 	strh.w	r1, [sp, #12]
    ac26:	a905      	add	r1, sp, #20
    ac28:	9100      	str	r1, [sp, #0]
    ac2a:	2001      	movs	r0, #1
    ac2c:	ab04      	add	r3, sp, #16
    ac2e:	aa02      	add	r2, sp, #8
    ac30:	4621      	mov	r1, r4
    ac32:	f004 ff9f 	bl	fb74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    ac36:	b140      	cbz	r0, ac4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    ac38:	2100      	movs	r1, #0
    ac3a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ac3e:	f7f9 fefb 	bl	4a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ac42:	b1f0      	cbz	r0, ac82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    ac44:	f241 414d 	movw	r1, #5197	; 0x144d
    ac48:	e025      	b.n	ac96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ac4a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ac4e:	f88d 0018 	strb.w	r0, [sp, #24]
    ac52:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ac56:	f88d 0019 	strb.w	r0, [sp, #25]
    ac5a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ac5e:	f8ad 001a 	strh.w	r0, [sp, #26]
    ac62:	a906      	add	r1, sp, #24
    ac64:	4620      	mov	r0, r4
    ac66:	f003 f875 	bl	dd54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ac6a:	78e8      	ldrb	r0, [r5, #3]
    ac6c:	9000      	str	r0, [sp, #0]
    ac6e:	78ab      	ldrb	r3, [r5, #2]
    ac70:	88ea      	ldrh	r2, [r5, #6]
    ac72:	88a9      	ldrh	r1, [r5, #4]
    ac74:	8820      	ldrh	r0, [r4, #0]
    ac76:	f7f9 ffab 	bl	4bd0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ac7a:	b120      	cbz	r0, ac86 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    ac7c:	f241 4158 	movw	r1, #5208	; 0x1458
    ac80:	e009      	b.n	ac96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ac82:	2009      	movs	r0, #9
    ac84:	e767      	b.n	ab56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ac86:	4642      	mov	r2, r8
    ac88:	4621      	mov	r1, r4
    ac8a:	4630      	mov	r0, r6
    ac8c:	f7fc fda0 	bl	77d0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    ac90:	b120      	cbz	r0, ac9c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    ac92:	f241 415a 	movw	r1, #5210	; 0x145a
    ac96:	2039      	movs	r0, #57	; 0x39
    ac98:	f7f9 fc50 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac9c:	4805      	ldr	r0, [pc, #20]	; (acb4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    ac9e:	6843      	ldr	r3, [r0, #4]
    aca0:	b123      	cbz	r3, acac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    aca2:	2200      	movs	r2, #0
    aca4:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    aca8:	4620      	mov	r0, r4
    acaa:	4798      	blx	r3
    acac:	2000      	movs	r0, #0
    acae:	e752      	b.n	ab56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    acb0:	20000eb8 	.word	0x20000eb8
    acb4:	20000200 	.word	0x20000200
    acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acbc:	b088      	sub	sp, #32
    acbe:	4604      	mov	r4, r0
    acc0:	8800      	ldrh	r0, [r0, #0]
    acc2:	a906      	add	r1, sp, #24
    acc4:	f002 ff87 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    acc8:	2800      	cmp	r0, #0
    acca:	d147      	bne.n	ad5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    accc:	9807      	ldr	r0, [sp, #28]
    acce:	2700      	movs	r7, #0
    acd0:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    acd4:	f88d 1008 	strb.w	r1, [sp, #8]
    acd8:	9902      	ldr	r1, [sp, #8]
    acda:	9102      	str	r1, [sp, #8]
    acdc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ace0:	f88d 100c 	strb.w	r1, [sp, #12]
    ace4:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    ace8:	3070      	adds	r0, #112	; 0x70
    acea:	0689      	lsls	r1, r1, #26
    acec:	d502      	bpl.n	acf4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    acee:	f89d 100c 	ldrb.w	r1, [sp, #12]
    acf2:	b149      	cbz	r1, ad08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    acf4:	f05f 0100 	movs.w	r1, #0
    acf8:	f88d 1004 	strb.w	r1, [sp, #4]
    acfc:	2105      	movs	r1, #5
    acfe:	3044      	adds	r0, #68	; 0x44
    ad00:	f004 f905 	bl	ef0e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ad04:	b110      	cbz	r0, ad0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    ad06:	e004      	b.n	ad12 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    ad08:	2101      	movs	r1, #1
    ad0a:	e7f5      	b.n	acf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    ad0c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ad10:	b318      	cbz	r0, ad5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    ad12:	8921      	ldrh	r1, [r4, #8]
    ad14:	88e0      	ldrh	r0, [r4, #6]
    ad16:	f004 fee2 	bl	fade <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    ad1a:	2800      	cmp	r0, #0
    ad1c:	d11e      	bne.n	ad5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ad1e:	88a1      	ldrh	r1, [r4, #4]
    ad20:	8860      	ldrh	r0, [r4, #2]
    ad22:	f004 fedc 	bl	fade <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    ad26:	2800      	cmp	r0, #0
    ad28:	d118      	bne.n	ad5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ad2a:	8921      	ldrh	r1, [r4, #8]
    ad2c:	88e0      	ldrh	r0, [r4, #6]
    ad2e:	f004 fecc 	bl	faca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20c>
    ad32:	2800      	cmp	r0, #0
    ad34:	d112      	bne.n	ad5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ad36:	88a1      	ldrh	r1, [r4, #4]
    ad38:	8860      	ldrh	r0, [r4, #2]
    ad3a:	f004 fec6 	bl	faca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20c>
    ad3e:	0006      	movs	r6, r0
    ad40:	d10c      	bne.n	ad5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ad42:	9807      	ldr	r0, [sp, #28]
    ad44:	f04f 0801 	mov.w	r8, #1
    ad48:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    ad4c:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    ad50:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ad54:	b129      	cbz	r1, ad62 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    ad56:	263a      	movs	r6, #58	; 0x3a
    ad58:	e02f      	b.n	adba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    ad5a:	201a      	movs	r0, #26
    ad5c:	b008      	add	sp, #32
    ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad62:	4639      	mov	r1, r7
    ad64:	aa03      	add	r2, sp, #12
    ad66:	f004 fec8 	bl	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    ad6a:	8861      	ldrh	r1, [r4, #2]
    ad6c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    ad70:	4281      	cmp	r1, r0
    ad72:	d200      	bcs.n	ad76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    ad74:	4608      	mov	r0, r1
    ad76:	80e8      	strh	r0, [r5, #6]
    ad78:	88a1      	ldrh	r1, [r4, #4]
    ad7a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    ad7e:	4281      	cmp	r1, r0
    ad80:	d200      	bcs.n	ad84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    ad82:	4608      	mov	r0, r1
    ad84:	8128      	strh	r0, [r5, #8]
    ad86:	88e2      	ldrh	r2, [r4, #6]
    ad88:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ad8c:	428a      	cmp	r2, r1
    ad8e:	d200      	bcs.n	ad92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    ad90:	4611      	mov	r1, r2
    ad92:	8069      	strh	r1, [r5, #2]
    ad94:	8922      	ldrh	r2, [r4, #8]
    ad96:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    ad9a:	428a      	cmp	r2, r1
    ad9c:	d200      	bcs.n	ada0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    ad9e:	4611      	mov	r1, r2
    ada0:	f640 0248 	movw	r2, #2120	; 0x848
    ada4:	80a9      	strh	r1, [r5, #4]
    ada6:	4291      	cmp	r1, r2
    ada8:	d300      	bcc.n	adac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    adaa:	4611      	mov	r1, r2
    adac:	80a9      	strh	r1, [r5, #4]
    adae:	4290      	cmp	r0, r2
    adb0:	d200      	bcs.n	adb4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    adb2:	4602      	mov	r2, r0
    adb4:	812a      	strh	r2, [r5, #8]
    adb6:	f885 8000 	strb.w	r8, [r5]
    adba:	706f      	strb	r7, [r5, #1]
    adbc:	4630      	mov	r0, r6
    adbe:	e7cd      	b.n	ad5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    adc0:	b510      	push	{r4, lr}
    adc2:	4604      	mov	r4, r0
    adc4:	88c1      	ldrh	r1, [r0, #6]
    adc6:	8880      	ldrh	r0, [r0, #4]
    adc8:	f004 fe89 	bl	fade <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    adcc:	2800      	cmp	r0, #0
    adce:	d10f      	bne.n	adf0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    add0:	8861      	ldrh	r1, [r4, #2]
    add2:	8820      	ldrh	r0, [r4, #0]
    add4:	f004 fe83 	bl	fade <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    add8:	2800      	cmp	r0, #0
    adda:	d109      	bne.n	adf0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    addc:	4805      	ldr	r0, [pc, #20]	; (adf4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    adde:	88a1      	ldrh	r1, [r4, #4]
    ade0:	8141      	strh	r1, [r0, #10]
    ade2:	8821      	ldrh	r1, [r4, #0]
    ade4:	80c1      	strh	r1, [r0, #6]
    ade6:	88e1      	ldrh	r1, [r4, #6]
    ade8:	8181      	strh	r1, [r0, #12]
    adea:	8861      	ldrh	r1, [r4, #2]
    adec:	8101      	strh	r1, [r0, #8]
    adee:	2000      	movs	r0, #0
    adf0:	bd10      	pop	{r4, pc}
    adf2:	0000      	.short	0x0000
    adf4:	20001104 	.word	0x20001104
    adf8:	0b122b0b 	.word	0x0b122b0b
    adfc:	122b0059 	.word	0x122b0059
    ae00:	05060708 	.word	0x05060708
    ae04:	00020304 	.word	0x00020304
    ae08:	f0f4f8fc 	.word	0xf0f4f8fc
    ae0c:	0304d8ec 	.word	0x0304d8ec
    ae10:	f4f8fc00 	.word	0xf4f8fc00
    ae14:	00d8ecf0 	.word	0x00d8ecf0

0000ae18 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    ae18:	b510      	push	{r4, lr}
    ae1a:	4604      	mov	r4, r0
    ae1c:	4804      	ldr	r0, [pc, #16]	; (ae30 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    ae1e:	7004      	strb	r4, [r0, #0]
    ae20:	6840      	ldr	r0, [r0, #4]
    ae22:	f004 ffb1 	bl	fd88 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    ae26:	4620      	mov	r0, r4
    ae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae2c:	f7ff bda0 	b.w	a970 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    ae30:	20000208 	.word	0x20000208

0000ae34 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    ae34:	b510      	push	{r4, lr}
    ae36:	4c07      	ldr	r4, [pc, #28]	; (ae54 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    ae38:	68a0      	ldr	r0, [r4, #8]
    ae3a:	f004 ffa5 	bl	fd88 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    ae3e:	68e0      	ldr	r0, [r4, #12]
    ae40:	f004 ffa2 	bl	fd88 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    ae44:	f002 fe08 	bl	da58 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ae48:	f7fa ffd2 	bl	5df0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ae4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae50:	f7ff bd94 	b.w	a97c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    ae54:	20000208 	.word	0x20000208

0000ae58 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    ae58:	b500      	push	{lr}
    ae5a:	4905      	ldr	r1, [pc, #20]	; (ae70 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    ae5c:	4805      	ldr	r0, [pc, #20]	; (ae74 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ae5e:	f004 ff5f 	bl	fd20 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae62:	4804      	ldr	r0, [pc, #16]	; (ae74 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ae64:	4904      	ldr	r1, [pc, #16]	; (ae78 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    ae66:	1d00      	adds	r0, r0, #4
    ae68:	f85d eb04 	ldr.w	lr, [sp], #4
    ae6c:	f004 bf58 	b.w	fd20 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae70:	20000218 	.word	0x20000218
    ae74:	2000020c 	.word	0x2000020c
    ae78:	20000220 	.word	0x20000220

0000ae7c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    ae7c:	b500      	push	{lr}
    ae7e:	4908      	ldr	r1, [pc, #32]	; (aea0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    ae80:	4808      	ldr	r0, [pc, #32]	; (aea4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ae82:	f004 ff4d 	bl	fd20 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae86:	4807      	ldr	r0, [pc, #28]	; (aea4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ae88:	4907      	ldr	r1, [pc, #28]	; (aea8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    ae8a:	1d00      	adds	r0, r0, #4
    ae8c:	f004 ff48 	bl	fd20 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae90:	4804      	ldr	r0, [pc, #16]	; (aea4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ae92:	4906      	ldr	r1, [pc, #24]	; (aeac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    ae94:	3008      	adds	r0, #8
    ae96:	f85d eb04 	ldr.w	lr, [sp], #4
    ae9a:	f004 bf41 	b.w	fd20 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ae9e:	0000      	.short	0x0000
    aea0:	20000244 	.word	0x20000244
    aea4:	2000020c 	.word	0x2000020c
    aea8:	2000024c 	.word	0x2000024c
    aeac:	2000023c 	.word	0x2000023c

0000aeb0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    aeb0:	4801      	ldr	r0, [pc, #4]	; (aeb8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    aeb2:	7840      	ldrb	r0, [r0, #1]
    aeb4:	4770      	bx	lr
    aeb6:	0000      	.short	0x0000
    aeb8:	20000208 	.word	0x20000208
    aebc:	b510      	push	{r4, lr}
    aebe:	f7fb fed5 	bl	6c6c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    aec2:	480c      	ldr	r0, [pc, #48]	; (aef4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>)
    aec4:	7800      	ldrb	r0, [r0, #0]
    aec6:	f7fc fd1d 	bl	7904 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    aeca:	480b      	ldr	r0, [pc, #44]	; (aef8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x48>)
    aecc:	f7fb feb4 	bl	6c38 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    aed0:	490b      	ldr	r1, [pc, #44]	; (af00 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    aed2:	480a      	ldr	r0, [pc, #40]	; (aefc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x4c>)
    aed4:	2200      	movs	r2, #0
    aed6:	6008      	str	r0, [r1, #0]
    aed8:	490b      	ldr	r1, [pc, #44]	; (af08 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x58>)
    aeda:	480a      	ldr	r0, [pc, #40]	; (af04 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    aedc:	6008      	str	r0, [r1, #0]
    aede:	2101      	movs	r1, #1
    aee0:	4610      	mov	r0, r2
    aee2:	f002 fd24 	bl	d92e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    aee6:	2800      	cmp	r0, #0
    aee8:	d103      	bne.n	aef2 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x42>
    aeea:	21d3      	movs	r1, #211	; 0xd3
    aeec:	2001      	movs	r0, #1
    aeee:	f7f9 fb25 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aef2:	bd10      	pop	{r4, pc}
    aef4:	20000208 	.word	0x20000208
    aef8:	200012f5 	.word	0x200012f5
    aefc:	00006a41 	.word	0x00006a41
    af00:	20000228 	.word	0x20000228
    af04:	000065ed 	.word	0x000065ed
    af08:	2000022c 	.word	0x2000022c
    af0c:	b510      	push	{r4, lr}
    af0e:	4c0d      	ldr	r4, [pc, #52]	; (af44 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    af10:	2001      	movs	r0, #1
    af12:	7060      	strb	r0, [r4, #1]
    af14:	f7fb feda 	bl	6ccc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    af18:	7820      	ldrb	r0, [r4, #0]
    af1a:	f7fd fcff 	bl	891c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    af1e:	f002 fd89 	bl	da34 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    af22:	4909      	ldr	r1, [pc, #36]	; (af48 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    af24:	7820      	ldrb	r0, [r4, #0]
    af26:	f7fa f9ef 	bl	5308 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    af2a:	f004 ff15 	bl	fd58 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    af2e:	4908      	ldr	r1, [pc, #32]	; (af50 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    af30:	4806      	ldr	r0, [pc, #24]	; (af4c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    af32:	6008      	str	r0, [r1, #0]
    af34:	4908      	ldr	r1, [pc, #32]	; (af58 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa8>)
    af36:	4807      	ldr	r0, [pc, #28]	; (af54 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    af38:	6008      	str	r0, [r1, #0]
    af3a:	4909      	ldr	r1, [pc, #36]	; (af60 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xb0>)
    af3c:	4807      	ldr	r0, [pc, #28]	; (af5c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xac>)
    af3e:	6008      	str	r0, [r1, #0]
    af40:	bd10      	pop	{r4, pc}
    af42:	0000      	.short	0x0000
    af44:	20000208 	.word	0x20000208
    af48:	200012f5 	.word	0x200012f5
    af4c:	000052b5 	.word	0x000052b5
    af50:	20000238 	.word	0x20000238
    af54:	0000869d 	.word	0x0000869d
    af58:	20000234 	.word	0x20000234
    af5c:	00006661 	.word	0x00006661
    af60:	20000230 	.word	0x20000230

0000af64 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    af64:	2101      	movs	r1, #1
    af66:	4081      	lsls	r1, r0
    af68:	4802      	ldr	r0, [pc, #8]	; (af74 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    af6a:	6802      	ldr	r2, [r0, #0]
    af6c:	4311      	orrs	r1, r2
    af6e:	6001      	str	r1, [r0, #0]
    af70:	4770      	bx	lr
    af72:	0000      	.short	0x0000
    af74:	20000254 	.word	0x20000254

0000af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    af78:	4801      	ldr	r0, [pc, #4]	; (af80 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    af7a:	6800      	ldr	r0, [r0, #0]
    af7c:	4770      	bx	lr
    af7e:	0000      	.short	0x0000
    af80:	20000254 	.word	0x20000254

0000af84 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    af84:	4803      	ldr	r0, [pc, #12]	; (af94 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    af86:	8800      	ldrh	r0, [r0, #0]
    af88:	f3c0 2000 	ubfx	r0, r0, #8, #1
    af8c:	0040      	lsls	r0, r0, #1
    af8e:	1c40      	adds	r0, r0, #1
    af90:	4770      	bx	lr
    af92:	0000      	.short	0x0000
    af94:	20000254 	.word	0x20000254

0000af98 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    af98:	b570      	push	{r4, r5, r6, lr}
    af9a:	4605      	mov	r5, r0
    af9c:	4616      	mov	r6, r2
    af9e:	460c      	mov	r4, r1
    afa0:	2002      	movs	r0, #2
    afa2:	f000 f999 	bl	b2d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    afa6:	4906      	ldr	r1, [pc, #24]	; (afc0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    afa8:	2001      	movs	r0, #1
    afaa:	1ef6      	subs	r6, r6, #3
    afac:	7008      	strb	r0, [r1, #0]
    afae:	4805      	ldr	r0, [pc, #20]	; (afc4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    afb0:	6006      	str	r6, [r0, #0]
    afb2:	4804      	ldr	r0, [pc, #16]	; (afc4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    afb4:	3808      	subs	r0, #8
    afb6:	6005      	str	r5, [r0, #0]
    afb8:	1f00      	subs	r0, r0, #4
    afba:	6004      	str	r4, [r0, #0]
    afbc:	bd70      	pop	{r4, r5, r6, pc}
    afbe:	0000      	.short	0x0000
    afc0:	2000029b 	.word	0x2000029b
    afc4:	4000f510 	.word	0x4000f510

0000afc8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    afc8:	b510      	push	{r4, lr}
    afca:	4c0c      	ldr	r4, [pc, #48]	; (affc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    afcc:	7820      	ldrb	r0, [r4, #0]
    afce:	b180      	cbz	r0, aff2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    afd0:	490b      	ldr	r1, [pc, #44]	; (b000 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    afd2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    afd6:	6008      	str	r0, [r1, #0]
    afd8:	f000 f86a 	bl	b0b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    afdc:	2100      	movs	r1, #0
    afde:	b120      	cbz	r0, afea <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    afe0:	2001      	movs	r0, #1
    afe2:	7060      	strb	r0, [r4, #1]
    afe4:	4807      	ldr	r0, [pc, #28]	; (b004 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    afe6:	6800      	ldr	r0, [r0, #0]
    afe8:	e001      	b.n	afee <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    afea:	7061      	strb	r1, [r4, #1]
    afec:	2010      	movs	r0, #16
    afee:	70a0      	strb	r0, [r4, #2]
    aff0:	7021      	strb	r1, [r4, #0]
    aff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aff6:	2000      	movs	r0, #0
    aff8:	f000 b96e 	b.w	b2d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    affc:	2000029b 	.word	0x2000029b
    b000:	4001f508 	.word	0x4001f508
    b004:	4000f400 	.word	0x4000f400

0000b008 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b008:	b510      	push	{r4, lr}
    b00a:	2002      	movs	r0, #2
    b00c:	f000 f964 	bl	b2d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b010:	4904      	ldr	r1, [pc, #16]	; (b024 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b012:	2001      	movs	r0, #1
    b014:	7008      	strb	r0, [r1, #0]
    b016:	f000 f859 	bl	b0cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b01a:	4903      	ldr	r1, [pc, #12]	; (b028 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b01c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b020:	6008      	str	r0, [r1, #0]
    b022:	bd10      	pop	{r4, pc}
    b024:	2000029b 	.word	0x2000029b
    b028:	4001f504 	.word	0x4001f504

0000b02c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b02c:	4803      	ldr	r0, [pc, #12]	; (b03c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b02e:	2100      	movs	r1, #0
    b030:	7001      	strb	r1, [r0, #0]
    b032:	7041      	strb	r1, [r0, #1]
    b034:	2110      	movs	r1, #16
    b036:	7081      	strb	r1, [r0, #2]
    b038:	4770      	bx	lr
    b03a:	0000      	.short	0x0000
    b03c:	2000029b 	.word	0x2000029b

0000b040 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b040:	4807      	ldr	r0, [pc, #28]	; (b060 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b042:	b510      	push	{r4, lr}
    b044:	7801      	ldrb	r1, [r0, #0]
    b046:	b141      	cbz	r1, b05a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b048:	f000 f832 	bl	b0b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b04c:	b118      	cbz	r0, b056 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b04e:	4805      	ldr	r0, [pc, #20]	; (b064 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b050:	6800      	ldr	r0, [r0, #0]
    b052:	b2c0      	uxtb	r0, r0
    b054:	bd10      	pop	{r4, pc}
    b056:	2010      	movs	r0, #16
    b058:	bd10      	pop	{r4, pc}
    b05a:	7880      	ldrb	r0, [r0, #2]
    b05c:	bd10      	pop	{r4, pc}
    b05e:	0000      	.short	0x0000
    b060:	2000029b 	.word	0x2000029b
    b064:	4000f400 	.word	0x4000f400

0000b068 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b068:	4808      	ldr	r0, [pc, #32]	; (b08c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b06a:	b510      	push	{r4, lr}
    b06c:	7801      	ldrb	r1, [r0, #0]
    b06e:	b159      	cbz	r1, b088 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b070:	4807      	ldr	r0, [pc, #28]	; (b090 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b072:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b076:	b128      	cbz	r0, b084 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b078:	f000 f80c 	bl	b094 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b07c:	2800      	cmp	r0, #0
    b07e:	d000      	beq.n	b082 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b080:	2001      	movs	r0, #1
    b082:	bd10      	pop	{r4, pc}
    b084:	2002      	movs	r0, #2
    b086:	bd10      	pop	{r4, pc}
    b088:	7840      	ldrb	r0, [r0, #1]
    b08a:	bd10      	pop	{r4, pc}
    b08c:	2000029b 	.word	0x2000029b
    b090:	4000f000 	.word	0x4000f000
    b094:	4805      	ldr	r0, [pc, #20]	; (b0ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b096:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b09a:	b111      	cbz	r1, b0a2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b09c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b0a0:	b108      	cbz	r0, b0a6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b0a2:	2000      	movs	r0, #0
    b0a4:	4770      	bx	lr
    b0a6:	2001      	movs	r0, #1
    b0a8:	4770      	bx	lr
    b0aa:	0000      	.short	0x0000
    b0ac:	4000f000 	.word	0x4000f000
    b0b0:	4805      	ldr	r0, [pc, #20]	; (b0c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b0b2:	b510      	push	{r4, lr}
    b0b4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b0b8:	b120      	cbz	r0, b0c4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b0ba:	f7ff ffeb 	bl	b094 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b0be:	b108      	cbz	r0, b0c4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b0c0:	2001      	movs	r0, #1
    b0c2:	bd10      	pop	{r4, pc}
    b0c4:	2000      	movs	r0, #0
    b0c6:	bd10      	pop	{r4, pc}
    b0c8:	4000f000 	.word	0x4000f000
    b0cc:	4804      	ldr	r0, [pc, #16]	; (b0e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b0ce:	2100      	movs	r1, #0
    b0d0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b0d4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b0d8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b0dc:	4770      	bx	lr
    b0de:	0000      	.short	0x0000
    b0e0:	4000f000 	.word	0x4000f000

0000b0e4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b0e4:	4a08      	ldr	r2, [pc, #32]	; (b108 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b0e6:	b510      	push	{r4, lr}
    b0e8:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b0ec:	4907      	ldr	r1, [pc, #28]	; (b10c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b0ee:	4610      	mov	r0, r2
    b0f0:	f7f9 f918 	bl	4324 <mpsl_fem_lna_configuration_set>
    b0f4:	2800      	cmp	r0, #0
    b0f6:	d005      	beq.n	b104 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b0f8:	1c40      	adds	r0, r0, #1
    b0fa:	d003      	beq.n	b104 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b0fc:	2170      	movs	r1, #112	; 0x70
    b0fe:	2040      	movs	r0, #64	; 0x40
    b100:	f7f9 fa1c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b104:	bd10      	pop	{r4, pc}
    b106:	0000      	.short	0x0000
    b108:	20000258 	.word	0x20000258
    b10c:	0000b13c 	.word	0x0000b13c

0000b110 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b110:	4a08      	ldr	r2, [pc, #32]	; (b134 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b112:	b510      	push	{r4, lr}
    b114:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b118:	4907      	ldr	r1, [pc, #28]	; (b138 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b11a:	4610      	mov	r0, r2
    b11c:	f7f9 f90e 	bl	433c <mpsl_fem_pa_configuration_set>
    b120:	2800      	cmp	r0, #0
    b122:	d005      	beq.n	b130 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b124:	1c40      	adds	r0, r0, #1
    b126:	d003      	beq.n	b130 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b128:	2165      	movs	r1, #101	; 0x65
    b12a:	2040      	movs	r0, #64	; 0x40
    b12c:	f7f9 fa06 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b130:	bd10      	pop	{r4, pc}
    b132:	0000      	.short	0x0000
    b134:	20000258 	.word	0x20000258
    b138:	0000b13c 	.word	0x0000b13c
    b13c:	00000001 	.word	0x00000001
    b140:	40001110 	.word	0x40001110
	...

0000b154 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    b154:	b570      	push	{r4, r5, r6, lr}
    b156:	4606      	mov	r6, r0
    b158:	4614      	mov	r4, r2
    b15a:	460d      	mov	r5, r1
    b15c:	2001      	movs	r0, #1
    b15e:	f000 f8bb 	bl	b2d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b162:	4803      	ldr	r0, [pc, #12]	; (b170 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    b164:	6006      	str	r6, [r0, #0]
    b166:	1d00      	adds	r0, r0, #4
    b168:	6004      	str	r4, [r0, #0]
    b16a:	1d00      	adds	r0, r0, #4
    b16c:	6005      	str	r5, [r0, #0]
    b16e:	bd70      	pop	{r4, r5, r6, pc}
    b170:	4000f508 	.word	0x4000f508

0000b174 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b174:	480a      	ldr	r0, [pc, #40]	; (b1a0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    b176:	7801      	ldrb	r1, [r0, #0]
    b178:	b171      	cbz	r1, b198 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    b17a:	4a0a      	ldr	r2, [pc, #40]	; (b1a4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b17c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    b180:	6011      	str	r1, [r2, #0]
    b182:	4909      	ldr	r1, [pc, #36]	; (b1a8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b184:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    b188:	2100      	movs	r1, #0
    b18a:	b11a      	cbz	r2, b194 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b18c:	4a07      	ldr	r2, [pc, #28]	; (b1ac <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b18e:	6812      	ldr	r2, [r2, #0]
    b190:	7042      	strb	r2, [r0, #1]
    b192:	e000      	b.n	b196 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b194:	7041      	strb	r1, [r0, #1]
    b196:	7001      	strb	r1, [r0, #0]
    b198:	2000      	movs	r0, #0
    b19a:	f000 b89d 	b.w	b2d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b19e:	0000      	.short	0x0000
    b1a0:	2000029e 	.word	0x2000029e
    b1a4:	4001f508 	.word	0x4001f508
    b1a8:	4000f000 	.word	0x4000f000
    b1ac:	4000f400 	.word	0x4000f400

0000b1b0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    b1b0:	b570      	push	{r4, r5, r6, lr}
    b1b2:	4604      	mov	r4, r0
    b1b4:	4816      	ldr	r0, [pc, #88]	; (b210 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    b1b6:	460e      	mov	r6, r1
    b1b8:	2501      	movs	r5, #1
    b1ba:	7005      	strb	r5, [r0, #0]
    b1bc:	4915      	ldr	r1, [pc, #84]	; (b214 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    b1be:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    b1c2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b1c6:	6008      	str	r0, [r1, #0]
    b1c8:	f001 fb69 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b1cc:	b930      	cbnz	r0, b1dc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    b1ce:	4811      	ldr	r0, [pc, #68]	; (b214 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    b1d0:	3014      	adds	r0, #20
    b1d2:	6801      	ldr	r1, [r0, #0]
    b1d4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b1d8:	4331      	orrs	r1, r6
    b1da:	6001      	str	r1, [r0, #0]
    b1dc:	490e      	ldr	r1, [pc, #56]	; (b218 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    b1de:	2200      	movs	r2, #0
    b1e0:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    b1e4:	4b0d      	ldr	r3, [pc, #52]	; (b21c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    b1e6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b1ea:	6018      	str	r0, [r3, #0]
    b1ec:	b12c      	cbz	r4, b1fa <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    b1ee:	2c01      	cmp	r4, #1
    b1f0:	d007      	beq.n	b202 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    b1f2:	2185      	movs	r1, #133	; 0x85
    b1f4:	203c      	movs	r0, #60	; 0x3c
    b1f6:	f7f9 f9a1 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1fa:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    b1fe:	600d      	str	r5, [r1, #0]
    b200:	bd70      	pop	{r4, r5, r6, pc}
    b202:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    b206:	600d      	str	r5, [r1, #0]
    b208:	4904      	ldr	r1, [pc, #16]	; (b21c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    b20a:	1f09      	subs	r1, r1, #4
    b20c:	6008      	str	r0, [r1, #0]
    b20e:	bd70      	pop	{r4, r5, r6, pc}
    b210:	2000029e 	.word	0x2000029e
    b214:	4000f504 	.word	0x4000f504
    b218:	4000f000 	.word	0x4000f000
    b21c:	4001f508 	.word	0x4001f508

0000b220 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b220:	4802      	ldr	r0, [pc, #8]	; (b22c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b222:	2100      	movs	r1, #0
    b224:	7001      	strb	r1, [r0, #0]
    b226:	7041      	strb	r1, [r0, #1]
    b228:	4770      	bx	lr
    b22a:	0000      	.short	0x0000
    b22c:	2000029e 	.word	0x2000029e

0000b230 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b230:	4806      	ldr	r0, [pc, #24]	; (b24c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b232:	7801      	ldrb	r1, [r0, #0]
    b234:	b141      	cbz	r1, b248 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b236:	4806      	ldr	r0, [pc, #24]	; (b250 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b238:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b23c:	2800      	cmp	r0, #0
    b23e:	d002      	beq.n	b246 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b240:	4804      	ldr	r0, [pc, #16]	; (b254 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b242:	6800      	ldr	r0, [r0, #0]
    b244:	b2c0      	uxtb	r0, r0
    b246:	4770      	bx	lr
    b248:	7840      	ldrb	r0, [r0, #1]
    b24a:	4770      	bx	lr
    b24c:	2000029e 	.word	0x2000029e
    b250:	4000f000 	.word	0x4000f000
    b254:	4000f400 	.word	0x4000f400

0000b258 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b258:	4901      	ldr	r1, [pc, #4]	; (b260 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b25a:	2001      	movs	r0, #1
    b25c:	6088      	str	r0, [r1, #8]
    b25e:	4770      	bx	lr
    b260:	4000f000 	.word	0x4000f000

0000b264 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b268:	2800      	cmp	r0, #0
    b26a:	d02c      	beq.n	b2c6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b26c:	4817      	ldr	r0, [pc, #92]	; (b2cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    b26e:	7800      	ldrb	r0, [r0, #0]
    b270:	b1b0      	cbz	r0, b2a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b272:	4d17      	ldr	r5, [pc, #92]	; (b2d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b274:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b278:	2800      	cmp	r0, #0
    b27a:	d124      	bne.n	b2c6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b27c:	2702      	movs	r7, #2
    b27e:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b282:	4c14      	ldr	r4, [pc, #80]	; (b2d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b284:	6820      	ldr	r0, [r4, #0]
    b286:	43c0      	mvns	r0, r0
    b288:	f340 1600 	sbfx	r6, r0, #4, #1
    b28c:	6820      	ldr	r0, [r4, #0]
    b28e:	f040 0010 	orr.w	r0, r0, #16
    b292:	6020      	str	r0, [r4, #0]
    b294:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b298:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b29c:	1c76      	adds	r6, r6, #1
    b29e:	e007      	b.n	b2b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b2a0:	21fd      	movs	r1, #253	; 0xfd
    b2a2:	203c      	movs	r0, #60	; 0x3c
    b2a4:	f7f9 f94a 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2a8:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b2ac:	f7f8 ffec 	bl	4288 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b2b0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b2b4:	2800      	cmp	r0, #0
    b2b6:	d0f7      	beq.n	b2a8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    b2b8:	b91e      	cbnz	r6, b2c2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    b2ba:	6820      	ldr	r0, [r4, #0]
    b2bc:	f020 0010 	bic.w	r0, r0, #16
    b2c0:	6020      	str	r0, [r4, #0]
    b2c2:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b2ca:	0000      	.short	0x0000
    b2cc:	2000029e 	.word	0x2000029e
    b2d0:	4000f000 	.word	0x4000f000
    b2d4:	e000ed10 	.word	0xe000ed10

0000b2d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b2d8:	b510      	push	{r4, lr}
    b2da:	4604      	mov	r4, r0
    b2dc:	f000 f822 	bl	b324 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b2e0:	2c00      	cmp	r4, #0
    b2e2:	d017      	beq.n	b314 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b2e4:	4a0c      	ldr	r2, [pc, #48]	; (b318 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b2e6:	480c      	ldr	r0, [pc, #48]	; (b318 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b2e8:	490c      	ldr	r1, [pc, #48]	; (b31c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b2ea:	3214      	adds	r2, #20
    b2ec:	4b0c      	ldr	r3, [pc, #48]	; (b320 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b2ee:	2c01      	cmp	r4, #1
    b2f0:	d005      	beq.n	b2fe <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b2f2:	2c02      	cmp	r4, #2
    b2f4:	d008      	beq.n	b308 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b2f6:	217d      	movs	r1, #125	; 0x7d
    b2f8:	203d      	movs	r0, #61	; 0x3d
    b2fa:	f7f9 f91f 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2fe:	2402      	movs	r4, #2
    b300:	6004      	str	r4, [r0, #0]
    b302:	6011      	str	r1, [r2, #0]
    b304:	0620      	lsls	r0, r4, #24
    b306:	e004      	b.n	b312 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b308:	2403      	movs	r4, #3
    b30a:	6004      	str	r4, [r0, #0]
    b30c:	6011      	str	r1, [r2, #0]
    b30e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b312:	6018      	str	r0, [r3, #0]
    b314:	bd10      	pop	{r4, pc}
    b316:	0000      	.short	0x0000
    b318:	4000f500 	.word	0x4000f500
    b31c:	200013f7 	.word	0x200013f7
    b320:	4001f504 	.word	0x4001f504
    b324:	4804      	ldr	r0, [pc, #16]	; (b338 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b326:	2100      	movs	r1, #0
    b328:	6001      	str	r1, [r0, #0]
    b32a:	6001      	str	r1, [r0, #0]
    b32c:	4903      	ldr	r1, [pc, #12]	; (b33c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b32e:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b332:	6008      	str	r0, [r1, #0]
    b334:	4770      	bx	lr
    b336:	0000      	.short	0x0000
    b338:	4000f500 	.word	0x4000f500
    b33c:	4001f508 	.word	0x4001f508

0000b340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b340:	4805      	ldr	r0, [pc, #20]	; (b358 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b342:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b346:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b34a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b34e:	4903      	ldr	r1, [pc, #12]	; (b35c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    b350:	2000      	movs	r0, #0
    b352:	6008      	str	r0, [r1, #0]
    b354:	4770      	bx	lr
    b356:	0000      	.short	0x0000
    b358:	40001000 	.word	0x40001000
    b35c:	40001560 	.word	0x40001560

0000b360 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b360:	4904      	ldr	r1, [pc, #16]	; (b374 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b362:	6008      	str	r0, [r1, #0]
    b364:	4804      	ldr	r0, [pc, #16]	; (b378 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    b366:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b36a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b36e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b372:	4770      	bx	lr
    b374:	40001560 	.word	0x40001560
    b378:	40001000 	.word	0x40001000

0000b37c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b37c:	4801      	ldr	r0, [pc, #4]	; (b384 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b37e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    b382:	4770      	bx	lr
    b384:	20000ef8 	.word	0x20000ef8

0000b388 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    b388:	4a01      	ldr	r2, [pc, #4]	; (b390 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    b38a:	7051      	strb	r1, [r2, #1]
    b38c:	7010      	strb	r0, [r2, #0]
    b38e:	4770      	bx	lr
    b390:	20000ef8 	.word	0x20000ef8

0000b394 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b396:	4c1e      	ldr	r4, [pc, #120]	; (b410 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    b398:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b39c:	2710      	movs	r7, #16
    b39e:	f3c0 1600 	ubfx	r6, r0, #4, #1
    b3a2:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    b3a6:	2002      	movs	r0, #2
    b3a8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b3ac:	4819      	ldr	r0, [pc, #100]	; (b414 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    b3ae:	2500      	movs	r5, #0
    b3b0:	491a      	ldr	r1, [pc, #104]	; (b41c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    b3b2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    b3b6:	4818      	ldr	r0, [pc, #96]	; (b418 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    b3b8:	6008      	str	r0, [r1, #0]
    b3ba:	4819      	ldr	r0, [pc, #100]	; (b420 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    b3bc:	6800      	ldr	r0, [r0, #0]
    b3be:	b1b0      	cbz	r0, b3ee <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b3c0:	20ff      	movs	r0, #255	; 0xff
    b3c2:	f88d 0000 	strb.w	r0, [sp]
    b3c6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b3ca:	2001      	movs	r0, #1
    b3cc:	6120      	str	r0, [r4, #16]
    b3ce:	e004      	b.n	b3da <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    b3d0:	f89d 0000 	ldrb.w	r0, [sp]
    b3d4:	1e40      	subs	r0, r0, #1
    b3d6:	f88d 0000 	strb.w	r0, [sp]
    b3da:	f89d 0000 	ldrb.w	r0, [sp]
    b3de:	b118      	cbz	r0, b3e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    b3e0:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    b3e4:	2800      	cmp	r0, #0
    b3e6:	d0f3      	beq.n	b3d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    b3e8:	f89d 0000 	ldrb.w	r0, [sp]
    b3ec:	b150      	cbz	r0, b404 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    b3ee:	f000 fce9 	bl	bdc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b3f2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b3f6:	f000 fe73 	bl	c0e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    b3fa:	2e00      	cmp	r6, #0
    b3fc:	d001      	beq.n	b402 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b3fe:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    b402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b404:	f240 71a3 	movw	r1, #1955	; 0x7a3
    b408:	203e      	movs	r0, #62	; 0x3e
    b40a:	f7f9 f897 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b40e:	0000      	.short	0x0000
    b410:	40001000 	.word	0x40001000
    b414:	20000ef8 	.word	0x20000ef8
    b418:	0c0e0000 	.word	0x0c0e0000
    b41c:	4001f508 	.word	0x4001f508
    b420:	40001550 	.word	0x40001550

0000b424 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b428:	4c1f      	ldr	r4, [pc, #124]	; (b4a8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    b42a:	4607      	mov	r7, r0
    b42c:	4688      	mov	r8, r1
    b42e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b432:	07c1      	lsls	r1, r0, #31
    b434:	d018      	beq.n	b468 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b436:	4a1d      	ldr	r2, [pc, #116]	; (b4ac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b438:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b43c:	6011      	str	r1, [r2, #0]
    b43e:	4d1c      	ldr	r5, [pc, #112]	; (b4b0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b440:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    b444:	f041 0101 	orr.w	r1, r1, #1
    b448:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    b44c:	f040 0002 	orr.w	r0, r0, #2
    b450:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b454:	4640      	mov	r0, r8
    b456:	f000 fea9 	bl	c1ac <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b45a:	f000 fc81 	bl	bd60 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b45e:	2601      	movs	r6, #1
    b460:	b13f      	cbz	r7, b472 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b462:	2f01      	cmp	r7, #1
    b464:	d00e      	beq.n	b484 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b466:	e016      	b.n	b496 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b468:	f240 6135 	movw	r1, #1589	; 0x635
    b46c:	203e      	movs	r0, #62	; 0x3e
    b46e:	f7f9 f865 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b472:	4640      	mov	r0, r8
    b474:	f000 fc94 	bl	bda0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b478:	4640      	mov	r0, r8
    b47a:	f000 fc55 	bl	bd28 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b47e:	72e6      	strb	r6, [r4, #11]
    b480:	602e      	str	r6, [r5, #0]
    b482:	e008      	b.n	b496 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b484:	f000 fc94 	bl	bdb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b488:	f000 fe02 	bl	c090 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b48c:	2002      	movs	r0, #2
    b48e:	72e0      	strb	r0, [r4, #11]
    b490:	f000 fd0a 	bl	bea8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    b494:	606e      	str	r6, [r5, #4]
    b496:	4807      	ldr	r0, [pc, #28]	; (b4b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b498:	64c6      	str	r6, [r0, #76]	; 0x4c
    b49a:	4807      	ldr	r0, [pc, #28]	; (b4b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b49c:	6801      	ldr	r1, [r0, #0]
    b49e:	4638      	mov	r0, r7
    b4a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b4a4:	f004 bd29 	b.w	fefa <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b4a8:	20000ef8 	.word	0x20000ef8
    b4ac:	4001f504 	.word	0x4001f504
    b4b0:	40001000 	.word	0x40001000
    b4b4:	40008000 	.word	0x40008000
    b4b8:	4000854c 	.word	0x4000854c

0000b4bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4c0:	4d35      	ldr	r5, [pc, #212]	; (b598 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b4c2:	4606      	mov	r6, r0
    b4c4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b4c8:	4689      	mov	r9, r1
    b4ca:	6028      	str	r0, [r5, #0]
    b4cc:	4c33      	ldr	r4, [pc, #204]	; (b59c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b4ce:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b4d2:	f040 0002 	orr.w	r0, r0, #2
    b4d6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b4da:	4608      	mov	r0, r1
    b4dc:	f000 fe66 	bl	c1ac <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b4e0:	f000 fc3e 	bl	bd60 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b4e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b4e8:	2700      	movs	r7, #0
    b4ea:	b116      	cbz	r6, b4f2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b4ec:	2e01      	cmp	r6, #1
    b4ee:	d027      	beq.n	b540 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b4f0:	e03f      	b.n	b572 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b4f2:	4648      	mov	r0, r9
    b4f4:	f000 fc54 	bl	bda0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b4f8:	7a60      	ldrb	r0, [r4, #9]
    b4fa:	2801      	cmp	r0, #1
    b4fc:	d105      	bne.n	b50a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b4fe:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b502:	f041 0108 	orr.w	r1, r1, #8
    b506:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b50a:	4648      	mov	r0, r9
    b50c:	f000 fc0c 	bl	bd28 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b510:	2001      	movs	r0, #1
    b512:	72e0      	strb	r0, [r4, #11]
    b514:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b516:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b51a:	6320      	str	r0, [r4, #48]	; 0x30
    b51c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b520:	6028      	str	r0, [r5, #0]
    b522:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b526:	f1b9 0f02 	cmp.w	r9, #2
    b52a:	d007      	beq.n	b53c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b52c:	f640 0034 	movw	r0, #2100	; 0x834
    b530:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b534:	4410      	add	r0, r2
    b536:	fbb0 f7f1 	udiv	r7, r0, r1
    b53a:	e01a      	b.n	b572 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b53c:	4608      	mov	r0, r1
    b53e:	e7f7      	b.n	b530 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b540:	f000 fc36 	bl	bdb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b544:	f000 fda4 	bl	c090 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b548:	7a60      	ldrb	r0, [r4, #9]
    b54a:	2801      	cmp	r0, #1
    b54c:	d105      	bne.n	b55a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b54e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b552:	f041 0104 	orr.w	r1, r1, #4
    b556:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b55a:	2002      	movs	r0, #2
    b55c:	72e0      	strb	r0, [r4, #11]
    b55e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b560:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b564:	6320      	str	r0, [r4, #48]	; 0x30
    b566:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b56a:	6028      	str	r0, [r5, #0]
    b56c:	2729      	movs	r7, #41	; 0x29
    b56e:	f000 fc9b 	bl	bea8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    b572:	f000 fc85 	bl	be80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    b576:	f001 f869 	bl	c64c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b57a:	6800      	ldr	r0, [r0, #0]
    b57c:	2801      	cmp	r0, #1
    b57e:	d006      	beq.n	b58e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b580:	2100      	movs	r1, #0
    b582:	4630      	mov	r0, r6
    b584:	f004 fcb9 	bl	fefa <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b588:	4638      	mov	r0, r7
    b58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b58e:	f7ff ff01 	bl	b394 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b592:	2000      	movs	r0, #0
    b594:	e7f9      	b.n	b58a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b596:	0000      	.short	0x0000
    b598:	4001f504 	.word	0x4001f504
    b59c:	20000ef8 	.word	0x20000ef8
    b5a0:	40001000 	.word	0x40001000

0000b5a4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b5a4:	4a02      	ldr	r2, [pc, #8]	; (b5b0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b5a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
    b5a8:	6003      	str	r3, [r0, #0]
    b5aa:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    b5ac:	6008      	str	r0, [r1, #0]
    b5ae:	4770      	bx	lr
    b5b0:	20000ef8 	.word	0x20000ef8

0000b5b4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b5b4:	4601      	mov	r1, r0
    b5b6:	2214      	movs	r2, #20
    b5b8:	4801      	ldr	r0, [pc, #4]	; (b5c0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b5ba:	f001 b9c2 	b.w	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b5be:	0000      	.short	0x0000
    b5c0:	20000ee4 	.word	0x20000ee4

0000b5c4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b5c4:	490e      	ldr	r1, [pc, #56]	; (b600 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    b5c6:	b510      	push	{r4, lr}
    b5c8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    b5ca:	4282      	cmp	r2, r0
    b5cc:	d302      	bcc.n	b5d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b5ce:	f640 0123 	movw	r1, #2083	; 0x823
    b5d2:	e00a      	b.n	b5ea <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    b5d4:	2201      	movs	r2, #1
    b5d6:	740a      	strb	r2, [r1, #16]
    b5d8:	6148      	str	r0, [r1, #20]
    b5da:	490a      	ldr	r1, [pc, #40]	; (b604 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b5dc:	644a      	str	r2, [r1, #68]	; 0x44
    b5de:	4a0a      	ldr	r2, [pc, #40]	; (b608 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b5e0:	6813      	ldr	r3, [r2, #0]
    b5e2:	4283      	cmp	r3, r0
    b5e4:	d304      	bcc.n	b5f0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    b5e6:	f640 012c 	movw	r1, #2092	; 0x82c
    b5ea:	203e      	movs	r0, #62	; 0x3e
    b5ec:	f7f8 ffa6 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5f0:	2300      	movs	r3, #0
    b5f2:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b5f6:	6010      	str	r0, [r2, #0]
    b5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b5fc:	f000 bd56 	b.w	c0ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    b600:	20000ef8 	.word	0x20000ef8
    b604:	40008000 	.word	0x40008000
    b608:	40008544 	.word	0x40008544

0000b60c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b60c:	b570      	push	{r4, r5, r6, lr}
    b60e:	4c10      	ldr	r4, [pc, #64]	; (b650 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b610:	4606      	mov	r6, r0
    b612:	2002      	movs	r0, #2
    b614:	7420      	strb	r0, [r4, #16]
    b616:	2596      	movs	r5, #150	; 0x96
    b618:	f000 f866 	bl	b6e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b61c:	4602      	mov	r2, r0
    b61e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    b622:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    b626:	2801      	cmp	r0, #1
    b628:	d00d      	beq.n	b646 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    b62a:	4628      	mov	r0, r5
    b62c:	f004 fc7d 	bl	ff2a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b630:	4908      	ldr	r1, [pc, #32]	; (b654 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b632:	6160      	str	r0, [r4, #20]
    b634:	2000      	movs	r0, #0
    b636:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b63a:	6961      	ldr	r1, [r4, #20]
    b63c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b63e:	4408      	add	r0, r1
    b640:	4905      	ldr	r1, [pc, #20]	; (b658 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b642:	6008      	str	r0, [r1, #0]
    b644:	bd70      	pop	{r4, r5, r6, pc}
    b646:	4633      	mov	r3, r6
    b648:	4628      	mov	r0, r5
    b64a:	f004 fc8a 	bl	ff62 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b64e:	e7ef      	b.n	b630 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b650:	20000ef8 	.word	0x20000ef8
    b654:	40008000 	.word	0x40008000
    b658:	40008544 	.word	0x40008544

0000b65c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b65c:	b510      	push	{r4, lr}
    b65e:	f001 f93a 	bl	c8d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b662:	2800      	cmp	r0, #0
    b664:	d006      	beq.n	b674 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b666:	4804      	ldr	r0, [pc, #16]	; (b678 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b668:	6801      	ldr	r1, [r0, #0]
    b66a:	f021 0101 	bic.w	r1, r1, #1
    b66e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b672:	6001      	str	r1, [r0, #0]
    b674:	bd10      	pop	{r4, pc}
    b676:	0000      	.short	0x0000
    b678:	40001774 	.word	0x40001774

0000b67c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b680:	2240      	movs	r2, #64	; 0x40
    b682:	2100      	movs	r1, #0
    b684:	4813      	ldr	r0, [pc, #76]	; (b6d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b686:	f001 f9d6 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b68a:	f000 fd29 	bl	c0e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    b68e:	f001 f8db 	bl	c848 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b692:	4d11      	ldr	r5, [pc, #68]	; (b6d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b694:	4e10      	ldr	r6, [pc, #64]	; (b6d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b696:	2400      	movs	r4, #0
    b698:	4f0f      	ldr	r7, [pc, #60]	; (b6d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b69a:	3508      	adds	r5, #8
    b69c:	3610      	adds	r6, #16
    b69e:	b928      	cbnz	r0, b6ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b6a0:	f001 f8e9 	bl	c876 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b6a4:	b910      	cbnz	r0, b6ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b6a6:	f001 f8f0 	bl	c88a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b6aa:	b108      	cbz	r0, b6b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b6ac:	2224      	movs	r2, #36	; 0x24
    b6ae:	e006      	b.n	b6be <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b6b0:	f001 f92b 	bl	c90a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b6b4:	b910      	cbnz	r0, b6bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b6b6:	f001 f91e 	bl	c8f6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b6ba:	b140      	cbz	r0, b6ce <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b6bc:	2240      	movs	r2, #64	; 0x40
    b6be:	21ff      	movs	r1, #255	; 0xff
    b6c0:	4638      	mov	r0, r7
    b6c2:	f001 f9b8 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b6c6:	602c      	str	r4, [r5, #0]
    b6c8:	6034      	str	r4, [r6, #0]
    b6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6ce:	2238      	movs	r2, #56	; 0x38
    b6d0:	e7f5      	b.n	b6be <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b6d2:	0000      	.short	0x0000
    b6d4:	20000ef8 	.word	0x20000ef8
    b6d8:	40000e00 	.word	0x40000e00

0000b6dc <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    b6dc:	4901      	ldr	r1, [pc, #4]	; (b6e4 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    b6de:	7008      	strb	r0, [r1, #0]
    b6e0:	4770      	bx	lr
    b6e2:	0000      	.short	0x0000
    b6e4:	20000270 	.word	0x20000270

0000b6e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b6e8:	4814      	ldr	r0, [pc, #80]	; (b73c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b6ea:	b510      	push	{r4, lr}
    b6ec:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    b6f0:	7ac0      	ldrb	r0, [r0, #11]
    b6f2:	b141      	cbz	r1, b706 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b6f4:	2902      	cmp	r1, #2
    b6f6:	d00b      	beq.n	b710 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b6f8:	2802      	cmp	r0, #2
    b6fa:	d009      	beq.n	b710 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b6fc:	2901      	cmp	r1, #1
    b6fe:	d00b      	beq.n	b718 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b700:	2801      	cmp	r0, #1
    b702:	d009      	beq.n	b718 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b704:	e015      	b.n	b732 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b706:	2800      	cmp	r0, #0
    b708:	d1f6      	bne.n	b6f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b70a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    b70e:	e00d      	b.n	b72c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    b710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b714:	f000 bc56 	b.w	bfc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    b718:	4809      	ldr	r0, [pc, #36]	; (b740 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b71a:	6800      	ldr	r0, [r0, #0]
    b71c:	f000 000f 	and.w	r0, r0, #15
    b720:	2803      	cmp	r0, #3
    b722:	d006      	beq.n	b732 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b724:	2804      	cmp	r0, #4
    b726:	d006      	beq.n	b736 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    b728:	f240 210b 	movw	r1, #523	; 0x20b
    b72c:	203e      	movs	r0, #62	; 0x3e
    b72e:	f7f8 ff05 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b732:	2001      	movs	r0, #1
    b734:	bd10      	pop	{r4, pc}
    b736:	2002      	movs	r0, #2
    b738:	bd10      	pop	{r4, pc}
    b73a:	0000      	.short	0x0000
    b73c:	20000ef8 	.word	0x20000ef8
    b740:	40001510 	.word	0x40001510

0000b744 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b744:	4801      	ldr	r0, [pc, #4]	; (b74c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    b746:	6a00      	ldr	r0, [r0, #32]
    b748:	4770      	bx	lr
    b74a:	0000      	.short	0x0000
    b74c:	20000ef8 	.word	0x20000ef8

0000b750 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    b750:	4801      	ldr	r0, [pc, #4]	; (b758 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    b752:	7f40      	ldrb	r0, [r0, #29]
    b754:	4770      	bx	lr
    b756:	0000      	.short	0x0000
    b758:	20000ef8 	.word	0x20000ef8

0000b75c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b75c:	4913      	ldr	r1, [pc, #76]	; (b7ac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b75e:	b510      	push	{r4, lr}
    b760:	6b08      	ldr	r0, [r1, #48]	; 0x30
    b762:	4a13      	ldr	r2, [pc, #76]	; (b7b0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b764:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    b768:	6010      	str	r0, [r2, #0]
    b76a:	2000      	movs	r0, #0
    b76c:	6308      	str	r0, [r1, #48]	; 0x30
    b76e:	7408      	strb	r0, [r1, #16]
    b770:	6248      	str	r0, [r1, #36]	; 0x24
    b772:	6208      	str	r0, [r1, #32]
    b774:	490f      	ldr	r1, [pc, #60]	; (b7b4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    b776:	6008      	str	r0, [r1, #0]
    b778:	1f09      	subs	r1, r1, #4
    b77a:	6008      	str	r0, [r1, #0]
    b77c:	1f09      	subs	r1, r1, #4
    b77e:	6008      	str	r0, [r1, #0]
    b780:	490c      	ldr	r1, [pc, #48]	; (b7b4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    b782:	1d09      	adds	r1, r1, #4
    b784:	6008      	str	r0, [r1, #0]
    b786:	490c      	ldr	r1, [pc, #48]	; (b7b8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    b788:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b78c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b790:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b794:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    b798:	f7ff fdfc 	bl	b394 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b79c:	2001      	movs	r0, #1
    b79e:	f004 fb7b 	bl	fe98 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7a6:	2001      	movs	r0, #1
    b7a8:	f004 bb69 	b.w	fe7e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b7ac:	20000ef8 	.word	0x20000ef8
    b7b0:	4001f508 	.word	0x4001f508
    b7b4:	40008548 	.word	0x40008548
    b7b8:	40008000 	.word	0x40008000

0000b7bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b7bc:	b570      	push	{r4, r5, r6, lr}
    b7be:	2001      	movs	r0, #1
    b7c0:	f004 fb6a 	bl	fe98 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b7c4:	4837      	ldr	r0, [pc, #220]	; (b8a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b7c6:	2400      	movs	r4, #0
    b7c8:	6004      	str	r4, [r0, #0]
    b7ca:	2601      	movs	r6, #1
    b7cc:	6006      	str	r6, [r0, #0]
    b7ce:	f001 f872 	bl	c8b6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b7d2:	4d35      	ldr	r5, [pc, #212]	; (b8a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b7d4:	b118      	cbz	r0, b7de <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    b7d6:	6828      	ldr	r0, [r5, #0]
    b7d8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b7dc:	6028      	str	r0, [r5, #0]
    b7de:	f001 f85e 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b7e2:	b128      	cbz	r0, b7f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    b7e4:	6828      	ldr	r0, [r5, #0]
    b7e6:	4931      	ldr	r1, [pc, #196]	; (b8ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b7e8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b7ec:	4308      	orrs	r0, r1
    b7ee:	6028      	str	r0, [r5, #0]
    b7f0:	f001 f871 	bl	c8d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b7f4:	b138      	cbz	r0, b806 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    b7f6:	482c      	ldr	r0, [pc, #176]	; (b8a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b7f8:	1d00      	adds	r0, r0, #4
    b7fa:	6801      	ldr	r1, [r0, #0]
    b7fc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b800:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b804:	6001      	str	r1, [r0, #0]
    b806:	4928      	ldr	r1, [pc, #160]	; (b8a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b808:	4829      	ldr	r0, [pc, #164]	; (b8b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b80a:	313c      	adds	r1, #60	; 0x3c
    b80c:	6008      	str	r0, [r1, #0]
    b80e:	f7f8 fda1 	bl	4354 <mpsl_fem_device_config_254_apply_get>
    b812:	b140      	cbz	r0, b826 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b814:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b818:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b81c:	1c41      	adds	r1, r0, #1
    b81e:	d002      	beq.n	b826 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b820:	4921      	ldr	r1, [pc, #132]	; (b8a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b822:	3110      	adds	r1, #16
    b824:	6008      	str	r0, [r1, #0]
    b826:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b82a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b82c:	1c41      	adds	r1, r0, #1
    b82e:	d004      	beq.n	b83a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    b830:	4920      	ldr	r1, [pc, #128]	; (b8b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b832:	680a      	ldr	r2, [r1, #0]
    b834:	f360 4217 	bfi	r2, r0, #16, #8
    b838:	600a      	str	r2, [r1, #0]
    b83a:	491e      	ldr	r1, [pc, #120]	; (b8b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b83c:	f240 605b 	movw	r0, #1627	; 0x65b
    b840:	3954      	subs	r1, #84	; 0x54
    b842:	6008      	str	r0, [r1, #0]
    b844:	1f09      	subs	r1, r1, #4
    b846:	f240 1003 	movw	r0, #259	; 0x103
    b84a:	6008      	str	r0, [r1, #0]
    b84c:	1f08      	subs	r0, r1, #4
    b84e:	6006      	str	r6, [r0, #0]
    b850:	2001      	movs	r0, #1
    b852:	f000 fcab 	bl	c1ac <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b856:	4917      	ldr	r1, [pc, #92]	; (b8b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b858:	f240 1001 	movw	r0, #257	; 0x101
    b85c:	31c4      	adds	r1, #196	; 0xc4
    b85e:	6008      	str	r0, [r1, #0]
    b860:	4e15      	ldr	r6, [pc, #84]	; (b8b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b862:	2502      	movs	r5, #2
    b864:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b868:	4915      	ldr	r1, [pc, #84]	; (b8c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b86a:	4814      	ldr	r0, [pc, #80]	; (b8bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b86c:	6008      	str	r0, [r1, #0]
    b86e:	4815      	ldr	r0, [pc, #84]	; (b8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b870:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b874:	8784      	strh	r4, [r0, #60]	; 0x3c
    b876:	3014      	adds	r0, #20
    b878:	6244      	str	r4, [r0, #36]	; 0x24
    b87a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    b87e:	2001      	movs	r0, #1
    b880:	f004 fafd 	bl	fe7e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b884:	2010      	movs	r0, #16
    b886:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b88a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b88e:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b892:	480d      	ldr	r0, [pc, #52]	; (b8c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b894:	6840      	ldr	r0, [r0, #4]
    b896:	2800      	cmp	r0, #0
    b898:	d002      	beq.n	b8a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    b89a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b89e:	4700      	bx	r0
    b8a0:	bd70      	pop	{r4, r5, r6, pc}
    b8a2:	0000      	.short	0x0000
    b8a4:	40001ffc 	.word	0x40001ffc
    b8a8:	4000173c 	.word	0x4000173c
    b8ac:	80000096 	.word	0x80000096
    b8b0:	8900002c 	.word	0x8900002c
    b8b4:	4000158c 	.word	0x4000158c
    b8b8:	40001000 	.word	0x40001000
    b8bc:	0c0e0000 	.word	0x0c0e0000
    b8c0:	4001f508 	.word	0x4001f508
    b8c4:	20000ee4 	.word	0x20000ee4
    b8c8:	20000270 	.word	0x20000270

0000b8cc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b8cc:	4901      	ldr	r1, [pc, #4]	; (b8d4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b8ce:	7608      	strb	r0, [r1, #24]
    b8d0:	4770      	bx	lr
    b8d2:	0000      	.short	0x0000
    b8d4:	20000ef8 	.word	0x20000ef8

0000b8d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b8d8:	4904      	ldr	r1, [pc, #16]	; (b8ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b8da:	6008      	str	r0, [r1, #0]
    b8dc:	4804      	ldr	r0, [pc, #16]	; (b8f0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b8de:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    b8e2:	f041 0101 	orr.w	r1, r1, #1
    b8e6:	7001      	strb	r1, [r0, #0]
    b8e8:	f000 ba92 	b.w	be10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    b8ec:	40001504 	.word	0x40001504
    b8f0:	20000ef8 	.word	0x20000ef8

0000b8f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8f8:	4e35      	ldr	r6, [pc, #212]	; (b9d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    b8fa:	4607      	mov	r7, r0
    b8fc:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b900:	468a      	mov	sl, r1
    b902:	4614      	mov	r4, r2
    b904:	6030      	str	r0, [r6, #0]
    b906:	4610      	mov	r0, r2
    b908:	f000 fc50 	bl	c1ac <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b90c:	f000 fa28 	bl	bd60 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b910:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b9d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    b914:	4d30      	ldr	r5, [pc, #192]	; (b9d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b916:	f04f 0801 	mov.w	r8, #1
    b91a:	b127      	cbz	r7, b926 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b91c:	2f01      	cmp	r7, #1
    b91e:	d01d      	beq.n	b95c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b920:	f240 7124 	movw	r1, #1828	; 0x724
    b924:	e04a      	b.n	b9bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    b926:	4620      	mov	r0, r4
    b928:	f000 fa3a 	bl	bda0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b92c:	4620      	mov	r0, r4
    b92e:	f000 f9fb 	bl	bd28 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b932:	2c02      	cmp	r4, #2
    b934:	d00f      	beq.n	b956 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b936:	f640 0034 	movw	r0, #2100	; 0x834
    b93a:	bf00      	nop
    b93c:	f649 51f8 	movw	r1, #40440	; 0x9df8
    b940:	4401      	add	r1, r0
    b942:	4650      	mov	r0, sl
    b944:	f000 fbd6 	bl	c0f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    b948:	4604      	mov	r4, r0
    b94a:	4648      	mov	r0, r9
    b94c:	f000 fbbc 	bl	c0c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>
    b950:	f885 800b 	strb.w	r8, [r5, #11]
    b954:	e014      	b.n	b980 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b95a:	e7ef      	b.n	b93c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    b95c:	f000 fa28 	bl	bdb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b960:	f000 fb96 	bl	c090 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b964:	f000 faa0 	bl	bea8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    b968:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b96c:	4650      	mov	r0, sl
    b96e:	f000 fbc1 	bl	c0f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    b972:	4604      	mov	r4, r0
    b974:	4817      	ldr	r0, [pc, #92]	; (b9d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b976:	1d00      	adds	r0, r0, #4
    b978:	f000 fba6 	bl	c0c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>
    b97c:	2002      	movs	r0, #2
    b97e:	72e8      	strb	r0, [r5, #11]
    b980:	4816      	ldr	r0, [pc, #88]	; (b9dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b982:	6004      	str	r4, [r0, #0]
    b984:	4917      	ldr	r1, [pc, #92]	; (b9e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    b986:	4816      	ldr	r0, [pc, #88]	; (b9e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    b988:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b98c:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b98e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b992:	6328      	str	r0, [r5, #48]	; 0x30
    b994:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b998:	6030      	str	r0, [r6, #0]
    b99a:	2110      	movs	r1, #16
    b99c:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    b9a0:	1200      	asrs	r0, r0, #8
    b9a2:	6030      	str	r0, [r6, #0]
    b9a4:	f000 fa6c 	bl	be80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    b9a8:	490f      	ldr	r1, [pc, #60]	; (b9e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    b9aa:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    b9ae:	480b      	ldr	r0, [pc, #44]	; (b9dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b9b0:	300c      	adds	r0, #12
    b9b2:	6800      	ldr	r0, [r0, #0]
    b9b4:	42a0      	cmp	r0, r4
    b9b6:	d304      	bcc.n	b9c2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    b9b8:	f240 7149 	movw	r1, #1865	; 0x749
    b9bc:	203e      	movs	r0, #62	; 0x3e
    b9be:	f7f8 fdbd 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9c2:	4621      	mov	r1, r4
    b9c4:	4638      	mov	r0, r7
    b9c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9ca:	f004 ba96 	b.w	fefa <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b9ce:	0000      	.short	0x0000
    b9d0:	4001f504 	.word	0x4001f504
    b9d4:	40001000 	.word	0x40001000
    b9d8:	20000ef8 	.word	0x20000ef8
    b9dc:	40008540 	.word	0x40008540
    b9e0:	40008140 	.word	0x40008140
    b9e4:	4001f098 	.word	0x4001f098
    b9e8:	40008000 	.word	0x40008000

0000b9ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b9ec:	b510      	push	{r4, lr}
    b9ee:	b14a      	cbz	r2, ba04 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    b9f0:	4c12      	ldr	r4, [pc, #72]	; (ba3c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    b9f2:	7260      	strb	r0, [r4, #9]
    b9f4:	7363      	strb	r3, [r4, #13]
    b9f6:	07d0      	lsls	r0, r2, #31
    b9f8:	d007      	beq.n	ba0a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b9fa:	2a01      	cmp	r2, #1
    b9fc:	d005      	beq.n	ba0a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b9fe:	f640 111e 	movw	r1, #2334	; 0x91e
    ba02:	e00c      	b.n	ba1e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    ba04:	f640 1117 	movw	r1, #2327	; 0x917
    ba08:	e009      	b.n	ba1e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    ba0a:	b159      	cbz	r1, ba24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    ba0c:	2002      	movs	r0, #2
    ba0e:	72a0      	strb	r0, [r4, #10]
    ba10:	7322      	strb	r2, [r4, #12]
    ba12:	2801      	cmp	r0, #1
    ba14:	d008      	beq.n	ba28 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    ba16:	2802      	cmp	r0, #2
    ba18:	d00f      	beq.n	ba3a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    ba1a:	f640 1135 	movw	r1, #2357	; 0x935
    ba1e:	203e      	movs	r0, #62	; 0x3e
    ba20:	f7f8 fd8c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba24:	2001      	movs	r0, #1
    ba26:	e7f2      	b.n	ba0e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    ba28:	7ae0      	ldrb	r0, [r4, #11]
    ba2a:	2802      	cmp	r0, #2
    ba2c:	d105      	bne.n	ba3a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    ba2e:	f000 f9bf 	bl	bdb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    ba32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba36:	f000 bb2b 	b.w	c090 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    ba3a:	bd10      	pop	{r4, pc}
    ba3c:	20000ef8 	.word	0x20000ef8

0000ba40 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    ba40:	490a      	ldr	r1, [pc, #40]	; (ba6c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    ba42:	b508      	push	{r3, lr}
    ba44:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    ba48:	2a01      	cmp	r2, #1
    ba4a:	d001      	beq.n	ba50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    ba4c:	2000      	movs	r0, #0
    ba4e:	bd08      	pop	{r3, pc}
    ba50:	4a07      	ldr	r2, [pc, #28]	; (ba70 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    ba52:	6812      	ldr	r2, [r2, #0]
    ba54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ba58:	4252      	negs	r2, r2
    ba5a:	7002      	strb	r2, [r0, #0]
    ba5c:	2000      	movs	r0, #0
    ba5e:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    ba62:	4804      	ldr	r0, [pc, #16]	; (ba74 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    ba64:	6800      	ldr	r0, [r0, #0]
    ba66:	9000      	str	r0, [sp, #0]
    ba68:	2001      	movs	r0, #1
    ba6a:	bd08      	pop	{r3, pc}
    ba6c:	40001000 	.word	0x40001000
    ba70:	40001548 	.word	0x40001548
    ba74:	4000111c 	.word	0x4000111c

0000ba78 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    ba78:	4a04      	ldr	r2, [pc, #16]	; (ba8c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    ba7a:	6803      	ldr	r3, [r0, #0]
    ba7c:	f8c2 3016 	str.w	r3, [r2, #22]
    ba80:	8880      	ldrh	r0, [r0, #4]
    ba82:	8350      	strh	r0, [r2, #26]
    ba84:	f102 0014 	add.w	r0, r2, #20
    ba88:	7201      	strb	r1, [r0, #8]
    ba8a:	4770      	bx	lr
    ba8c:	20000ee4 	.word	0x20000ee4

0000ba90 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    ba90:	4a04      	ldr	r2, [pc, #16]	; (baa4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ba92:	78c1      	ldrb	r1, [r0, #3]
    ba94:	6011      	str	r1, [r2, #0]
    ba96:	6800      	ldr	r0, [r0, #0]
    ba98:	4902      	ldr	r1, [pc, #8]	; (baa4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ba9a:	0200      	lsls	r0, r0, #8
    ba9c:	3908      	subs	r1, #8
    ba9e:	6008      	str	r0, [r1, #0]
    baa0:	4770      	bx	lr
    baa2:	0000      	.short	0x0000
    baa4:	40001524 	.word	0x40001524

0000baa8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    baa8:	6800      	ldr	r0, [r0, #0]
    baaa:	4902      	ldr	r1, [pc, #8]	; (bab4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    baac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bab0:	6008      	str	r0, [r1, #0]
    bab2:	4770      	bx	lr
    bab4:	4000153c 	.word	0x4000153c

0000bab8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bab8:	b510      	push	{r4, lr}
    baba:	f000 fb53 	bl	c164 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48c>
    babe:	4806      	ldr	r0, [pc, #24]	; (bad8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    bac0:	6800      	ldr	r0, [r0, #0]
    bac2:	2803      	cmp	r0, #3
    bac4:	d001      	beq.n	baca <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    bac6:	280b      	cmp	r0, #11
    bac8:	d104      	bne.n	bad4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    baca:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    bace:	203e      	movs	r0, #62	; 0x3e
    bad0:	f7f8 fd34 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bad4:	bd10      	pop	{r4, pc}
    bad6:	0000      	.short	0x0000
    bad8:	40001550 	.word	0x40001550

0000badc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    badc:	4901      	ldr	r1, [pc, #4]	; (bae4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bade:	7648      	strb	r0, [r1, #25]
    bae0:	4770      	bx	lr
    bae2:	0000      	.short	0x0000
    bae4:	20000ef8 	.word	0x20000ef8

0000bae8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bae8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    baec:	4d71      	ldr	r5, [pc, #452]	; (bcb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    baee:	f04f 0801 	mov.w	r8, #1
    baf2:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
    baf6:	4870      	ldr	r0, [pc, #448]	; (bcb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    baf8:	f8d0 b000 	ldr.w	fp, [r0]
    bafc:	486f      	ldr	r0, [pc, #444]	; (bcbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>)
    bafe:	6800      	ldr	r0, [r0, #0]
    bb00:	4c6f      	ldr	r4, [pc, #444]	; (bcc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    bb02:	e9c4 0b0e 	strd	r0, fp, [r4, #56]	; 0x38
    bb06:	486f      	ldr	r0, [pc, #444]	; (bcc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    bb08:	7800      	ldrb	r0, [r0, #0]
    bb0a:	2804      	cmp	r0, #4
    bb0c:	d302      	bcc.n	bb14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    bb0e:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    bb12:	e0c3      	b.n	bc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    bb14:	f000 f956 	bl	bdc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    bb18:	496b      	ldr	r1, [pc, #428]	; (bcc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    bb1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bb1c:	6008      	str	r0, [r1, #0]
    bb1e:	486b      	ldr	r0, [pc, #428]	; (bccc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    bb20:	2600      	movs	r6, #0
    bb22:	6326      	str	r6, [r4, #48]	; 0x30
    bb24:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bb28:	f240 121d 	movw	r2, #285	; 0x11d
    bb2c:	4391      	bics	r1, r2
    bb2e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bb32:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    bb36:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    bb3a:	b908      	cbnz	r0, bb40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    bb3c:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
    bb40:	f000 f9c4 	bl	becc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f4>
    bb44:	4605      	mov	r5, r0
    bb46:	485c      	ldr	r0, [pc, #368]	; (bcb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    bb48:	1f00      	subs	r0, r0, #4
    bb4a:	6800      	ldr	r0, [r0, #0]
    bb4c:	6260      	str	r0, [r4, #36]	; 0x24
    bb4e:	f7ff fdcb 	bl	b6e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bb52:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    bb56:	7ae0      	ldrb	r0, [r4, #11]
    bb58:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    bb5c:	46b2      	mov	sl, r6
    bb5e:	6226      	str	r6, [r4, #32]
    bb60:	4e5b      	ldr	r6, [pc, #364]	; (bcd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    bb62:	2802      	cmp	r0, #2
    bb64:	d107      	bne.n	bb76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    bb66:	7860      	ldrb	r0, [r4, #1]
    bb68:	b128      	cbz	r0, bb76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    bb6a:	6831      	ldr	r1, [r6, #0]
    bb6c:	7809      	ldrb	r1, [r1, #0]
    bb6e:	4001      	ands	r1, r0
    bb70:	7820      	ldrb	r0, [r4, #0]
    bb72:	4388      	bics	r0, r1
    bb74:	d017      	beq.n	bba6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbe>
    bb76:	f884 a01c 	strb.w	sl, [r4, #28]
    bb7a:	f8df 9158 	ldr.w	r9, [pc, #344]	; bcd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    bb7e:	07a8      	lsls	r0, r5, #30
    bb80:	d502      	bpl.n	bb88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa0>
    bb82:	f8d9 0000 	ldr.w	r0, [r9]
    bb86:	6220      	str	r0, [r4, #32]
    bb88:	0728      	lsls	r0, r5, #28
    bb8a:	d502      	bpl.n	bb92 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    bb8c:	f8d9 0000 	ldr.w	r0, [r9]
    bb90:	6220      	str	r0, [r4, #32]
    bb92:	4f4b      	ldr	r7, [pc, #300]	; (bcc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    bb94:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bb96:	3f14      	subs	r7, #20
    bb98:	6939      	ldr	r1, [r7, #16]
    bb9a:	4788      	blx	r1
    bb9c:	4849      	ldr	r0, [pc, #292]	; (bcc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    bb9e:	7800      	ldrb	r0, [r0, #0]
    bba0:	07c0      	lsls	r0, r0, #31
    bba2:	d003      	beq.n	bbac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc4>
    bba4:	e01b      	b.n	bbde <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    bba6:	f884 801c 	strb.w	r8, [r4, #28]
    bbaa:	e7e6      	b.n	bb7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bbac:	6836      	ldr	r6, [r6, #0]
    bbae:	7830      	ldrb	r0, [r6, #0]
    bbb0:	f000 000f 	and.w	r0, r0, #15
    bbb4:	2807      	cmp	r0, #7
    bbb6:	d210      	bcs.n	bbda <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    bbb8:	2206      	movs	r2, #6
    bbba:	f106 0109 	add.w	r1, r6, #9
    bbbe:	1ca0      	adds	r0, r4, #2
    bbc0:	f000 fead 	bl	c91e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    bbc4:	b930      	cbnz	r0, bbd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    bbc6:	7a20      	ldrb	r0, [r4, #8]
    bbc8:	7831      	ldrb	r1, [r6, #0]
    bbca:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    bbce:	d101      	bne.n	bbd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    bbd0:	2001      	movs	r0, #1
    bbd2:	e000      	b.n	bbd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    bbd4:	2000      	movs	r0, #0
    bbd6:	7760      	strb	r0, [r4, #29]
    bbd8:	e001      	b.n	bbde <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    bbda:	f884 a01d 	strb.w	sl, [r4, #29]
    bbde:	2600      	movs	r6, #0
    bbe0:	4659      	mov	r1, fp
    bbe2:	4628      	mov	r0, r5
    bbe4:	f000 fa02 	bl	bfec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>
    bbe8:	b918      	cbnz	r0, bbf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10a>
    bbea:	4938      	ldr	r1, [pc, #224]	; (bccc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    bbec:	f8c1 8010 	str.w	r8, [r1, #16]
    bbf0:	2601      	movs	r6, #1
    bbf2:	07e8      	lsls	r0, r5, #31
    bbf4:	d002      	beq.n	bbfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x114>
    bbf6:	6838      	ldr	r0, [r7, #0]
    bbf8:	4780      	blx	r0
    bbfa:	e032      	b.n	bc62 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17a>
    bbfc:	07a8      	lsls	r0, r5, #30
    bbfe:	d527      	bpl.n	bc50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    bc00:	0768      	lsls	r0, r5, #29
    bc02:	d41f      	bmi.n	bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bc04:	f000 fe67 	bl	c8d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bc08:	b9e0      	cbnz	r0, bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bc0a:	f000 fe54 	bl	c8b6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc0e:	b9c8      	cbnz	r0, bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bc10:	482f      	ldr	r0, [pc, #188]	; (bcd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    bc12:	38b4      	subs	r0, #180	; 0xb4
    bc14:	6800      	ldr	r0, [r0, #0]
    bc16:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bc1a:	f3c0 6300 	ubfx	r3, r0, #24, #1
    bc1e:	f000 020f 	and.w	r2, r0, #15
    bc22:	f3c0 1103 	ubfx	r1, r0, #4, #4
    bc26:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bc2a:	b15b      	cbz	r3, bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bc2c:	b10a      	cbz	r2, bc32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14a>
    bc2e:	b101      	cbz	r1, bc32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14a>
    bc30:	b940      	cbnz	r0, bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bc32:	4827      	ldr	r0, [pc, #156]	; (bcd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    bc34:	38b0      	subs	r0, #176	; 0xb0
    bc36:	6800      	ldr	r0, [r0, #0]
    bc38:	b120      	cbz	r0, bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bc3a:	f1bc 0f03 	cmp.w	ip, #3
    bc3e:	d201      	bcs.n	bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bc40:	f045 0504 	orr.w	r5, r5, #4
    bc44:	f345 0080 	sbfx	r0, r5, #2, #1
    bc48:	4631      	mov	r1, r6
    bc4a:	1c40      	adds	r0, r0, #1
    bc4c:	687a      	ldr	r2, [r7, #4]
    bc4e:	e007      	b.n	bc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x178>
    bc50:	f015 0f28 	tst.w	r5, #40	; 0x28
    bc54:	d005      	beq.n	bc62 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17a>
    bc56:	f345 1140 	sbfx	r1, r5, #5, #1
    bc5a:	68ba      	ldr	r2, [r7, #8]
    bc5c:	4630      	mov	r0, r6
    bc5e:	1c49      	adds	r1, r1, #1
    bc60:	4790      	blx	r2
    bc62:	06e8      	lsls	r0, r5, #27
    bc64:	d501      	bpl.n	bc6a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x182>
    bc66:	68f8      	ldr	r0, [r7, #12]
    bc68:	4780      	blx	r0
    bc6a:	7ae0      	ldrb	r0, [r4, #11]
    bc6c:	2802      	cmp	r0, #2
    bc6e:	d11e      	bne.n	bcae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c6>
    bc70:	7c20      	ldrb	r0, [r4, #16]
    bc72:	2800      	cmp	r0, #0
    bc74:	d01b      	beq.n	bcae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c6>
    bc76:	2802      	cmp	r0, #2
    bc78:	d004      	beq.n	bc84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    bc7a:	2801      	cmp	r0, #1
    bc7c:	d008      	beq.n	bc90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
    bc7e:	f640 314a 	movw	r1, #2890	; 0xb4a
    bc82:	e00b      	b.n	bc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    bc84:	6961      	ldr	r1, [r4, #20]
    bc86:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bc88:	4401      	add	r1, r0
    bc8a:	f8c9 1000 	str.w	r1, [r9]
    bc8e:	e00a      	b.n	bca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1be>
    bc90:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bc92:	6960      	ldr	r0, [r4, #20]
    bc94:	4288      	cmp	r0, r1
    bc96:	d804      	bhi.n	bca2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ba>
    bc98:	f640 314b 	movw	r1, #2891	; 0xb4b
    bc9c:	203e      	movs	r0, #62	; 0x3e
    bc9e:	f7f8 fc4d 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bca2:	f8c9 0000 	str.w	r0, [r9]
    bca6:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bcaa:	f000 b9ff 	b.w	c0ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    bcae:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    bcb2:	0000      	.short	0x0000
    bcb4:	40008000 	.word	0x40008000
    bcb8:	4000854c 	.word	0x4000854c
    bcbc:	4000b504 	.word	0x4000b504
    bcc0:	20000ef8 	.word	0x20000ef8
    bcc4:	20000270 	.word	0x20000270
    bcc8:	4001f508 	.word	0x4001f508
    bccc:	40001000 	.word	0x40001000
    bcd0:	40001504 	.word	0x40001504
    bcd4:	40008544 	.word	0x40008544

0000bcd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bcd8:	b570      	push	{r4, r5, r6, lr}
    bcda:	4b11      	ldr	r3, [pc, #68]	; (bd20 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    bcdc:	888c      	ldrh	r4, [r1, #4]
    bcde:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bce2:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    bce6:	780c      	ldrb	r4, [r1, #0]
    bce8:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bcec:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bcf0:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    bcf4:	4d0b      	ldr	r5, [pc, #44]	; (bd24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    bcf6:	6829      	ldr	r1, [r5, #0]
    bcf8:	f100 0608 	add.w	r6, r0, #8
    bcfc:	2401      	movs	r4, #1
    bcfe:	fa04 f306 	lsl.w	r3, r4, r6
    bd02:	b132      	cbz	r2, bd12 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bd04:	2a01      	cmp	r2, #1
    bd06:	d006      	beq.n	bd16 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    bd08:	f240 41d1 	movw	r1, #1233	; 0x4d1
    bd0c:	203e      	movs	r0, #62	; 0x3e
    bd0e:	f7f8 fc15 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd12:	4399      	bics	r1, r3
    bd14:	e000      	b.n	bd18 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    bd16:	4319      	orrs	r1, r3
    bd18:	4084      	lsls	r4, r0
    bd1a:	430c      	orrs	r4, r1
    bd1c:	602c      	str	r4, [r5, #0]
    bd1e:	bd70      	pop	{r4, r5, r6, pc}
    bd20:	40001000 	.word	0x40001000
    bd24:	40001640 	.word	0x40001640
    bd28:	b510      	push	{r4, lr}
    bd2a:	4604      	mov	r4, r0
    bd2c:	f000 fdd3 	bl	c8d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd30:	2800      	cmp	r0, #0
    bd32:	d00e      	beq.n	bd52 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    bd34:	4a09      	ldr	r2, [pc, #36]	; (bd5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    bd36:	6811      	ldr	r1, [r2, #0]
    bd38:	0650      	lsls	r0, r2, #25
    bd3a:	2c02      	cmp	r4, #2
    bd3c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bd40:	d008      	beq.n	bd54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    bd42:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bd46:	bf00      	nop
    bd48:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bd4c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bd50:	6010      	str	r0, [r2, #0]
    bd52:	bd10      	pop	{r4, pc}
    bd54:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bd58:	e7f6      	b.n	bd48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    bd5a:	0000      	.short	0x0000
    bd5c:	40001588 	.word	0x40001588
    bd60:	480d      	ldr	r0, [pc, #52]	; (bd98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    bd62:	7e40      	ldrb	r0, [r0, #25]
    bd64:	2825      	cmp	r0, #37	; 0x25
    bd66:	d007      	beq.n	bd78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    bd68:	2826      	cmp	r0, #38	; 0x26
    bd6a:	d007      	beq.n	bd7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    bd6c:	2827      	cmp	r0, #39	; 0x27
    bd6e:	d007      	beq.n	bd80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    bd70:	280a      	cmp	r0, #10
    bd72:	d807      	bhi.n	bd84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    bd74:	2204      	movs	r2, #4
    bd76:	e006      	b.n	bd86 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    bd78:	2102      	movs	r1, #2
    bd7a:	e007      	b.n	bd8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    bd7c:	211a      	movs	r1, #26
    bd7e:	e005      	b.n	bd8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    bd80:	2150      	movs	r1, #80	; 0x50
    bd82:	e003      	b.n	bd8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    bd84:	2206      	movs	r2, #6
    bd86:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    bd8a:	b2c9      	uxtb	r1, r1
    bd8c:	4a03      	ldr	r2, [pc, #12]	; (bd9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    bd8e:	6011      	str	r1, [r2, #0]
    bd90:	4902      	ldr	r1, [pc, #8]	; (bd9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    bd92:	314c      	adds	r1, #76	; 0x4c
    bd94:	6008      	str	r0, [r1, #0]
    bd96:	4770      	bx	lr
    bd98:	20000ef8 	.word	0x20000ef8
    bd9c:	40001508 	.word	0x40001508
    bda0:	4802      	ldr	r0, [pc, #8]	; (bdac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd4>)
    bda2:	f990 0018 	ldrsb.w	r0, [r0, #24]
    bda6:	f000 b9fb 	b.w	c1a0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bdaa:	0000      	.short	0x0000
    bdac:	20000ef8 	.word	0x20000ef8
    bdb0:	4803      	ldr	r0, [pc, #12]	; (bdc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>)
    bdb2:	7a81      	ldrb	r1, [r0, #10]
    bdb4:	2901      	cmp	r1, #1
    bdb6:	d102      	bne.n	bdbe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe6>
    bdb8:	7b40      	ldrb	r0, [r0, #13]
    bdba:	f7ff bff1 	b.w	bda0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    bdbe:	4770      	bx	lr
    bdc0:	20000ef8 	.word	0x20000ef8
    bdc4:	4805      	ldr	r0, [pc, #20]	; (bddc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x104>)
    bdc6:	7ac0      	ldrb	r0, [r0, #11]
    bdc8:	2801      	cmp	r0, #1
    bdca:	d003      	beq.n	bdd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfc>
    bdcc:	2802      	cmp	r0, #2
    bdce:	d103      	bne.n	bdd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x100>
    bdd0:	f004 b81d 	b.w	fe0e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    bdd4:	f004 b827 	b.w	fe26 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    bdd8:	4770      	bx	lr
    bdda:	0000      	.short	0x0000
    bddc:	20000ef8 	.word	0x20000ef8
    bde0:	4809      	ldr	r0, [pc, #36]	; (be08 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x130>)
    bde2:	b508      	push	{r3, lr}
    bde4:	2100      	movs	r1, #0
    bde6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bdea:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    bdee:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    bdf2:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bdf6:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    bdfa:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    bdfe:	4803      	ldr	r0, [pc, #12]	; (be0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x134>)
    be00:	6800      	ldr	r0, [r0, #0]
    be02:	9000      	str	r0, [sp, #0]
    be04:	bd08      	pop	{r3, pc}
    be06:	0000      	.short	0x0000
    be08:	40001000 	.word	0x40001000
    be0c:	40001118 	.word	0x40001118
    be10:	4816      	ldr	r0, [pc, #88]	; (be6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x194>)
    be12:	b510      	push	{r4, lr}
    be14:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    be18:	07c1      	lsls	r1, r0, #31
    be1a:	d026      	beq.n	be6a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    be1c:	0781      	lsls	r1, r0, #30
    be1e:	d513      	bpl.n	be48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>
    be20:	4813      	ldr	r0, [pc, #76]	; (be70 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    be22:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    be26:	f041 0101 	orr.w	r1, r1, #1
    be2a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    be2e:	4811      	ldr	r0, [pc, #68]	; (be74 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x19c>)
    be30:	6800      	ldr	r0, [r0, #0]
    be32:	280b      	cmp	r0, #11
    be34:	d005      	beq.n	be42 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    be36:	280a      	cmp	r0, #10
    be38:	d003      	beq.n	be42 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    be3a:	2803      	cmp	r0, #3
    be3c:	d001      	beq.n	be42 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    be3e:	2802      	cmp	r0, #2
    be40:	d113      	bne.n	be6a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    be42:	f240 512b 	movw	r1, #1323	; 0x52b
    be46:	e00d      	b.n	be64 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x18c>
    be48:	0740      	lsls	r0, r0, #29
    be4a:	d50e      	bpl.n	be6a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    be4c:	4808      	ldr	r0, [pc, #32]	; (be70 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    be4e:	490a      	ldr	r1, [pc, #40]	; (be78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a0>)
    be50:	3008      	adds	r0, #8
    be52:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    be56:	4809      	ldr	r0, [pc, #36]	; (be7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a4>)
    be58:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    be5c:	2801      	cmp	r0, #1
    be5e:	d104      	bne.n	be6a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    be60:	f240 5132 	movw	r1, #1330	; 0x532
    be64:	203e      	movs	r0, #62	; 0x3e
    be66:	f7f8 fb69 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be6a:	bd10      	pop	{r4, pc}
    be6c:	20000ef8 	.word	0x20000ef8
    be70:	40001000 	.word	0x40001000
    be74:	40001550 	.word	0x40001550
    be78:	4001f098 	.word	0x4001f098
    be7c:	40008000 	.word	0x40008000
    be80:	4808      	ldr	r0, [pc, #32]	; (bea4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>)
    be82:	4601      	mov	r1, r0
    be84:	7a42      	ldrb	r2, [r0, #9]
    be86:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    be8a:	b112      	cbz	r2, be92 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ba>
    be8c:	2a01      	cmp	r2, #1
    be8e:	d003      	beq.n	be98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c0>
    be90:	e006      	b.n	bea0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c8>
    be92:	f041 0102 	orr.w	r1, r1, #2
    be96:	e001      	b.n	be9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c4>
    be98:	f041 0104 	orr.w	r1, r1, #4
    be9c:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    bea0:	f7ff bfb6 	b.w	be10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    bea4:	20000ef8 	.word	0x20000ef8
    bea8:	b510      	push	{r4, lr}
    beaa:	f000 fd14 	bl	c8d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    beae:	2800      	cmp	r0, #0
    beb0:	d108      	bne.n	bec4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    beb2:	f000 fd00 	bl	c8b6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    beb6:	2800      	cmp	r0, #0
    beb8:	d104      	bne.n	bec4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    beba:	4803      	ldr	r0, [pc, #12]	; (bec8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f0>)
    bebc:	6801      	ldr	r1, [r0, #0]
    bebe:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bec2:	6001      	str	r1, [r0, #0]
    bec4:	bd10      	pop	{r4, pc}
    bec6:	0000      	.short	0x0000
    bec8:	40001568 	.word	0x40001568
    becc:	b538      	push	{r3, r4, r5, lr}
    bece:	4d36      	ldr	r5, [pc, #216]	; (bfa8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d0>)
    bed0:	2400      	movs	r4, #0
    bed2:	7c28      	ldrb	r0, [r5, #16]
    bed4:	b120      	cbz	r0, bee0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    bed6:	4835      	ldr	r0, [pc, #212]	; (bfac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>)
    bed8:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    bedc:	2801      	cmp	r0, #1
    bede:	d007      	beq.n	bef0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x218>
    bee0:	2200      	movs	r2, #0
    bee2:	7ae9      	ldrb	r1, [r5, #11]
    bee4:	4832      	ldr	r0, [pc, #200]	; (bfb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d8>)
    bee6:	2901      	cmp	r1, #1
    bee8:	d004      	beq.n	bef4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x21c>
    beea:	2902      	cmp	r1, #2
    beec:	d00a      	beq.n	bf04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    beee:	e019      	b.n	bf24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    bef0:	2201      	movs	r2, #1
    bef2:	e7f6      	b.n	bee2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20a>
    bef4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bef8:	2901      	cmp	r1, #1
    befa:	d001      	beq.n	bf00 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x228>
    befc:	2400      	movs	r4, #0
    befe:	e011      	b.n	bf24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    bf00:	2408      	movs	r4, #8
    bf02:	e00f      	b.n	bf24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    bf04:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bf08:	2901      	cmp	r1, #1
    bf0a:	d006      	beq.n	bf1a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x242>
    bf0c:	2100      	movs	r1, #0
    bf0e:	4b29      	ldr	r3, [pc, #164]	; (bfb4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    bf10:	681b      	ldr	r3, [r3, #0]
    bf12:	2b01      	cmp	r3, #1
    bf14:	d003      	beq.n	bf1e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x246>
    bf16:	2404      	movs	r4, #4
    bf18:	e002      	b.n	bf20 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    bf1a:	2102      	movs	r1, #2
    bf1c:	e7f7      	b.n	bf0e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x236>
    bf1e:	2400      	movs	r4, #0
    bf20:	430c      	orrs	r4, r1
    bf22:	4314      	orrs	r4, r2
    bf24:	f014 0f0b 	tst.w	r4, #11
    bf28:	d105      	bne.n	bf36 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25e>
    bf2a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    bf2e:	2901      	cmp	r1, #1
    bf30:	d006      	beq.n	bf40 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    bf32:	2100      	movs	r1, #0
    bf34:	430c      	orrs	r4, r1
    bf36:	4920      	ldr	r1, [pc, #128]	; (bfb8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e0>)
    bf38:	7809      	ldrb	r1, [r1, #0]
    bf3a:	07c9      	lsls	r1, r1, #31
    bf3c:	d002      	beq.n	bf44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    bf3e:	e023      	b.n	bf88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2b0>
    bf40:	2110      	movs	r1, #16
    bf42:	e7f7      	b.n	bf34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    bf44:	491d      	ldr	r1, [pc, #116]	; (bfbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e4>)
    bf46:	6809      	ldr	r1, [r1, #0]
    bf48:	f011 0fff 	tst.w	r1, #255	; 0xff
    bf4c:	d003      	beq.n	bf56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x27e>
    bf4e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    bf52:	2a01      	cmp	r2, #1
    bf54:	d000      	beq.n	bf58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x280>
    bf56:	2200      	movs	r2, #0
    bf58:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    bf5c:	f011 0fff 	tst.w	r1, #255	; 0xff
    bf60:	d003      	beq.n	bf6a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x292>
    bf62:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    bf66:	2801      	cmp	r0, #1
    bf68:	d000      	beq.n	bf6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x294>
    bf6a:	2000      	movs	r0, #0
    bf6c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    bf70:	4810      	ldr	r0, [pc, #64]	; (bfb4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    bf72:	3010      	adds	r0, #16
    bf74:	6800      	ldr	r0, [r0, #0]
    bf76:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bf7a:	f7ff f875 	bl	b068 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    bf7e:	2801      	cmp	r0, #1
    bf80:	d000      	beq.n	bf84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    bf82:	2000      	movs	r0, #0
    bf84:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    bf88:	f7ff ff2a 	bl	bde0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x108>
    bf8c:	06e0      	lsls	r0, r4, #27
    bf8e:	d506      	bpl.n	bf9e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    bf90:	0720      	lsls	r0, r4, #28
    bf92:	d404      	bmi.n	bf9e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    bf94:	7ae8      	ldrb	r0, [r5, #11]
    bf96:	2801      	cmp	r0, #1
    bf98:	d101      	bne.n	bf9e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    bf9a:	f044 0420 	orr.w	r4, r4, #32
    bf9e:	4808      	ldr	r0, [pc, #32]	; (bfc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e8>)
    bfa0:	6800      	ldr	r0, [r0, #0]
    bfa2:	9000      	str	r0, [sp, #0]
    bfa4:	4620      	mov	r0, r4
    bfa6:	bd38      	pop	{r3, r4, r5, pc}
    bfa8:	20000ef8 	.word	0x20000ef8
    bfac:	40008000 	.word	0x40008000
    bfb0:	40001000 	.word	0x40001000
    bfb4:	40001400 	.word	0x40001400
    bfb8:	20000270 	.word	0x20000270
    bfbc:	40001640 	.word	0x40001640
    bfc0:	40008144 	.word	0x40008144
    bfc4:	4808      	ldr	r0, [pc, #32]	; (bfe8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    bfc6:	b510      	push	{r4, lr}
    bfc8:	6800      	ldr	r0, [r0, #0]
    bfca:	f000 000f 	and.w	r0, r0, #15
    bfce:	2803      	cmp	r0, #3
    bfd0:	d006      	beq.n	bfe0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x308>
    bfd2:	2804      	cmp	r0, #4
    bfd4:	d006      	beq.n	bfe4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x30c>
    bfd6:	f240 2136 	movw	r1, #566	; 0x236
    bfda:	203e      	movs	r0, #62	; 0x3e
    bfdc:	f7f8 faae 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfe0:	2001      	movs	r0, #1
    bfe2:	bd10      	pop	{r4, pc}
    bfe4:	2002      	movs	r0, #2
    bfe6:	bd10      	pop	{r4, pc}
    bfe8:	40001510 	.word	0x40001510
    bfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bff0:	4c25      	ldr	r4, [pc, #148]	; (c088 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b0>)
    bff2:	460d      	mov	r5, r1
    bff4:	7aa2      	ldrb	r2, [r4, #10]
    bff6:	b19a      	cbz	r2, c020 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    bff8:	7b21      	ldrb	r1, [r4, #12]
    bffa:	078b      	lsls	r3, r1, #30
    bffc:	d503      	bpl.n	c006 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    bffe:	0783      	lsls	r3, r0, #30
    c000:	d501      	bpl.n	c006 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    c002:	0743      	lsls	r3, r0, #29
    c004:	d41c      	bmi.n	c040 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    c006:	06cb      	lsls	r3, r1, #27
    c008:	d505      	bpl.n	c016 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    c00a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    c00e:	b113      	cbz	r3, c016 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    c010:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    c014:	b1a3      	cbz	r3, c040 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    c016:	070b      	lsls	r3, r1, #28
    c018:	d50b      	bpl.n	c032 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    c01a:	7f23      	ldrb	r3, [r4, #28]
    c01c:	b983      	cbnz	r3, c040 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    c01e:	e008      	b.n	c032 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    c020:	491a      	ldr	r1, [pc, #104]	; (c08c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b4>)
    c022:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c026:	6008      	str	r0, [r1, #0]
    c028:	f000 f85a 	bl	c0e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    c02c:	2000      	movs	r0, #0
    c02e:	7420      	strb	r0, [r4, #16]
    c030:	e028      	b.n	c084 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    c032:	0749      	lsls	r1, r1, #29
    c034:	d501      	bpl.n	c03a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x362>
    c036:	7f61      	ldrb	r1, [r4, #29]
    c038:	b111      	cbz	r1, c040 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    c03a:	f010 0f11 	tst.w	r0, #17
    c03e:	d002      	beq.n	c046 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    c040:	f7ff f9a8 	bl	b394 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c044:	e01e      	b.n	c084 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    c046:	2a01      	cmp	r2, #1
    c048:	d001      	beq.n	c04e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x376>
    c04a:	2601      	movs	r6, #1
    c04c:	e000      	b.n	c050 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x378>
    c04e:	2600      	movs	r6, #0
    c050:	7a60      	ldrb	r0, [r4, #9]
    c052:	2801      	cmp	r0, #1
    c054:	d00e      	beq.n	c074 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39c>
    c056:	2700      	movs	r7, #0
    c058:	f000 f842 	bl	c0e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    c05c:	2196      	movs	r1, #150	; 0x96
    c05e:	4630      	mov	r0, r6
    c060:	f000 f856 	bl	c110 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x438>
    c064:	4601      	mov	r1, r0
    c066:	b14f      	cbz	r7, c07c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a4>
    c068:	353b      	adds	r5, #59	; 0x3b
    c06a:	428d      	cmp	r5, r1
    c06c:	d904      	bls.n	c078 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a0>
    c06e:	2000      	movs	r0, #0
    c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c074:	2701      	movs	r7, #1
    c076:	e7ef      	b.n	c058 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x380>
    c078:	2001      	movs	r0, #1
    c07a:	7260      	strb	r0, [r4, #9]
    c07c:	7b62      	ldrb	r2, [r4, #13]
    c07e:	4630      	mov	r0, r6
    c080:	f7ff fc38 	bl	b8f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c084:	2001      	movs	r0, #1
    c086:	e7f3      	b.n	c070 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x398>
    c088:	20000ef8 	.word	0x20000ef8
    c08c:	4001f508 	.word	0x4001f508
    c090:	4805      	ldr	r0, [pc, #20]	; (c0a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d0>)
    c092:	2100      	movs	r1, #0
    c094:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c098:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c09c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c0a0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c0a4:	4770      	bx	lr
    c0a6:	0000      	.short	0x0000
    c0a8:	40001000 	.word	0x40001000
    c0ac:	4804      	ldr	r0, [pc, #16]	; (c0c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e8>)
    c0ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c0b0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c0b4:	6301      	str	r1, [r0, #48]	; 0x30
    c0b6:	4903      	ldr	r1, [pc, #12]	; (c0c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>)
    c0b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c0bc:	6008      	str	r0, [r1, #0]
    c0be:	4770      	bx	lr
    c0c0:	20000ef8 	.word	0x20000ef8
    c0c4:	4001f504 	.word	0x4001f504
    c0c8:	4903      	ldr	r1, [pc, #12]	; (c0d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x400>)
    c0ca:	7a49      	ldrb	r1, [r1, #9]
    c0cc:	2900      	cmp	r1, #0
    c0ce:	d102      	bne.n	c0d6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3fe>
    c0d0:	4902      	ldr	r1, [pc, #8]	; (c0dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x404>)
    c0d2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c0d6:	4770      	bx	lr
    c0d8:	20000ef8 	.word	0x20000ef8
    c0dc:	4001f098 	.word	0x4001f098
    c0e0:	4803      	ldr	r0, [pc, #12]	; (c0f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x418>)
    c0e2:	2100      	movs	r1, #0
    c0e4:	7241      	strb	r1, [r0, #9]
    c0e6:	7281      	strb	r1, [r0, #10]
    c0e8:	72c1      	strb	r1, [r0, #11]
    c0ea:	2101      	movs	r1, #1
    c0ec:	7301      	strb	r1, [r0, #12]
    c0ee:	4770      	bx	lr
    c0f0:	20000ef8 	.word	0x20000ef8
    c0f4:	4a05      	ldr	r2, [pc, #20]	; (c10c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x434>)
    c0f6:	7a52      	ldrb	r2, [r2, #9]
    c0f8:	2a01      	cmp	r2, #1
    c0fa:	d006      	beq.n	c10a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x432>
    c0fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c100:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c104:	fbb1 f1f2 	udiv	r1, r1, r2
    c108:	1a40      	subs	r0, r0, r1
    c10a:	4770      	bx	lr
    c10c:	20000ef8 	.word	0x20000ef8
    c110:	b570      	push	{r4, r5, r6, lr}
    c112:	4c13      	ldr	r4, [pc, #76]	; (c160 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x488>)
    c114:	4603      	mov	r3, r0
    c116:	460d      	mov	r5, r1
    c118:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    c11c:	2000      	movs	r0, #0
    c11e:	b15a      	cbz	r2, c138 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>
    c120:	4621      	mov	r1, r4
    c122:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    c126:	b163      	cbz	r3, c142 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46a>
    c128:	2b01      	cmp	r3, #1
    c12a:	d111      	bne.n	c150 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    c12c:	2a01      	cmp	r2, #1
    c12e:	4628      	mov	r0, r5
    c130:	d012      	beq.n	c158 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x480>
    c132:	f003 ff3a 	bl	ffaa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c136:	e009      	b.n	c14c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    c138:	f240 7166 	movw	r1, #1894	; 0x766
    c13c:	203e      	movs	r0, #62	; 0x3e
    c13e:	f7f8 f9fd 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c142:	2a01      	cmp	r2, #1
    c144:	4628      	mov	r0, r5
    c146:	d004      	beq.n	c152 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x47a>
    c148:	f003 ff3d 	bl	ffc6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c14c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c14e:	4408      	add	r0, r1
    c150:	bd70      	pop	{r4, r5, r6, pc}
    c152:	f003 ff52 	bl	fffa <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c156:	e7f9      	b.n	c14c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    c158:	f003 ff40 	bl	ffdc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c15c:	e7f6      	b.n	c14c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    c15e:	0000      	.short	0x0000
    c160:	20000ef8 	.word	0x20000ef8
    c164:	b510      	push	{r4, lr}
    c166:	2200      	movs	r2, #0
    c168:	2901      	cmp	r1, #1
    c16a:	d008      	beq.n	c17e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a6>
    c16c:	2902      	cmp	r1, #2
    c16e:	d004      	beq.n	c17a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a2>
    c170:	f240 217f 	movw	r1, #639	; 0x27f
    c174:	203e      	movs	r0, #62	; 0x3e
    c176:	f7f8 f9e1 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c17a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c17e:	4905      	ldr	r1, [pc, #20]	; (c194 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>)
    c180:	430a      	orrs	r2, r1
    c182:	4905      	ldr	r1, [pc, #20]	; (c198 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c0>)
    c184:	600a      	str	r2, [r1, #0]
    c186:	4905      	ldr	r1, [pc, #20]	; (c19c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c4>)
    c188:	4308      	orrs	r0, r1
    c18a:	4903      	ldr	r1, [pc, #12]	; (c198 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c0>)
    c18c:	1d09      	adds	r1, r1, #4
    c18e:	6008      	str	r0, [r1, #0]
    c190:	bd10      	pop	{r4, pc}
    c192:	0000      	.short	0x0000
    c194:	00100108 	.word	0x00100108
    c198:	40001514 	.word	0x40001514
    c19c:	02030000 	.word	0x02030000

0000c1a0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c1a0:	4901      	ldr	r1, [pc, #4]	; (c1a8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c1a2:	b2c0      	uxtb	r0, r0
    c1a4:	6008      	str	r0, [r1, #0]
    c1a6:	4770      	bx	lr
    c1a8:	4000150c 	.word	0x4000150c

0000c1ac <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c1ac:	b510      	push	{r4, lr}
    c1ae:	4907      	ldr	r1, [pc, #28]	; (c1cc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c1b0:	2801      	cmp	r0, #1
    c1b2:	d005      	beq.n	c1c0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c1b4:	2802      	cmp	r0, #2
    c1b6:	d005      	beq.n	c1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c1b8:	2197      	movs	r1, #151	; 0x97
    c1ba:	203f      	movs	r0, #63	; 0x3f
    c1bc:	f7f8 f9be 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1c0:	2003      	movs	r0, #3
    c1c2:	e000      	b.n	c1c6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c1c4:	2004      	movs	r0, #4
    c1c6:	6008      	str	r0, [r1, #0]
    c1c8:	bd10      	pop	{r4, pc}
    c1ca:	0000      	.short	0x0000
    c1cc:	40001510 	.word	0x40001510
    c1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1d4:	000d      	movs	r5, r1
    c1d6:	4604      	mov	r4, r0
    c1d8:	f04f 0602 	mov.w	r6, #2
    c1dc:	f04f 0701 	mov.w	r7, #1
    c1e0:	d008      	beq.n	c1f4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x48>
    c1e2:	7828      	ldrb	r0, [r5, #0]
    c1e4:	b1c8      	cbz	r0, c21a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    c1e6:	2801      	cmp	r0, #1
    c1e8:	d006      	beq.n	c1f8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x4c>
    c1ea:	2802      	cmp	r0, #2
    c1ec:	d013      	beq.n	c216 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    c1ee:	2803      	cmp	r0, #3
    c1f0:	d13a      	bne.n	c268 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xbc>
    c1f2:	e015      	b.n	c220 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x74>
    c1f4:	7707      	strb	r7, [r0, #28]
    c1f6:	e00e      	b.n	c216 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    c1f8:	6868      	ldr	r0, [r5, #4]
    c1fa:	28c8      	cmp	r0, #200	; 0xc8
    c1fc:	d303      	bcc.n	c206 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x5a>
    c1fe:	2104      	movs	r1, #4
    c200:	f7f5 fc76 	bl	1af0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    c204:	b108      	cbz	r0, c20a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x5e>
    c206:	2600      	movs	r6, #0
    c208:	e007      	b.n	c21a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    c20a:	4620      	mov	r0, r4
    c20c:	6869      	ldr	r1, [r5, #4]
    c20e:	f000 f936 	bl	c47e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2d2>
    c212:	2601      	movs	r6, #1
    c214:	e001      	b.n	c21a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    c216:	f7f4 fcf9 	bl	c0c <__aeabi_idiv0+0x60>
    c21a:	4630      	mov	r0, r6
    c21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c220:	7820      	ldrb	r0, [r4, #0]
    c222:	2800      	cmp	r0, #0
    c224:	d1f7      	bne.n	c216 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    c226:	6868      	ldr	r0, [r5, #4]
    c228:	f7f4 fcc2 	bl	bb0 <__aeabi_idiv0+0x4>
    c22c:	b1e0      	cbz	r0, c268 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xbc>
    c22e:	6869      	ldr	r1, [r5, #4]
    c230:	7808      	ldrb	r0, [r1, #0]
    c232:	b128      	cbz	r0, c240 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x94>
    c234:	78a0      	ldrb	r0, [r4, #2]
    c236:	2805      	cmp	r0, #5
    c238:	d007      	beq.n	c24a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x9e>
    c23a:	f240 1179 	movw	r1, #377	; 0x179
    c23e:	e010      	b.n	c262 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xb6>
    c240:	4620      	mov	r0, r4
    c242:	f000 f924 	bl	c48e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2e2>
    c246:	7067      	strb	r7, [r4, #1]
    c248:	e7e5      	b.n	c216 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    c24a:	4620      	mov	r0, r4
    c24c:	f000 f937 	bl	c4be <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x312>
    c250:	78e0      	ldrb	r0, [r4, #3]
    c252:	f104 0108 	add.w	r1, r4, #8
    c256:	f000 f809 	bl	c26c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    c25a:	2800      	cmp	r0, #0
    c25c:	d1db      	bne.n	c216 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    c25e:	f240 117b 	movw	r1, #379	; 0x17b
    c262:	206a      	movs	r0, #106	; 0x6a
    c264:	f7f7 feea 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c268:	7727      	strb	r7, [r4, #28]
    c26a:	e7d4      	b.n	c216 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    c26c:	f7f5 be7c 	b.w	1f68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    c270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c274:	460d      	mov	r5, r1
    c276:	4607      	mov	r7, r0
    c278:	f7f4 fd30 	bl	cdc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY>
    c27c:	4606      	mov	r6, r0
    c27e:	28ff      	cmp	r0, #255	; 0xff
    c280:	d009      	beq.n	c296 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xea>
    c282:	f7f4 fd1f 	bl	cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c286:	0004      	movs	r4, r0
    c288:	d008      	beq.n	c29c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xf0>
    c28a:	78e2      	ldrb	r2, [r4, #3]
    c28c:	42ba      	cmp	r2, r7
    c28e:	d008      	beq.n	c2a2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xf6>
    c290:	f240 119d 	movw	r1, #413	; 0x19d
    c294:	e0f0      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c296:	f240 1195 	movw	r1, #405	; 0x195
    c29a:	e0ed      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c29c:	f44f 71cc 	mov.w	r1, #408	; 0x198
    c2a0:	e0ea      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c2a2:	2700      	movs	r7, #0
    c2a4:	2002      	movs	r0, #2
    c2a6:	2d09      	cmp	r5, #9
    c2a8:	d277      	bcs.n	c39a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1ee>
    c2aa:	e8df f005 	tbb	[pc, r5]
    c2ae:	0d05      	.short	0x0d05
    c2b0:	60572a2a 	.word	0x60572a2a
    c2b4:	00829378 	.word	0x00829378
    c2b8:	78a0      	ldrb	r0, [r4, #2]
    c2ba:	2804      	cmp	r0, #4
    c2bc:	d06e      	beq.n	c39c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1f0>
    c2be:	2803      	cmp	r0, #3
    c2c0:	d06c      	beq.n	c39c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1f0>
    c2c2:	f240 11a1 	movw	r1, #417	; 0x1a1
    c2c6:	e0d7      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c2c8:	78a0      	ldrb	r0, [r4, #2]
    c2ca:	2804      	cmp	r0, #4
    c2cc:	d004      	beq.n	c2d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x12c>
    c2ce:	2803      	cmp	r0, #3
    c2d0:	d002      	beq.n	c2d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x12c>
    c2d2:	f240 11a5 	movw	r1, #421	; 0x1a5
    c2d6:	e0cf      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c2d8:	2005      	movs	r0, #5
    c2da:	70a0      	strb	r0, [r4, #2]
    c2dc:	7727      	strb	r7, [r4, #28]
    c2de:	7820      	ldrb	r0, [r4, #0]
    c2e0:	bb80      	cbnz	r0, c344 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x198>
    c2e2:	2100      	movs	r1, #0
    c2e4:	4620      	mov	r0, r4
    c2e6:	f000 f8ca 	bl	c47e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2d2>
    c2ea:	7a20      	ldrb	r0, [r4, #8]
    c2ec:	2801      	cmp	r0, #1
    c2ee:	d004      	beq.n	c2fa <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14e>
    c2f0:	6960      	ldr	r0, [r4, #20]
    c2f2:	61a0      	str	r0, [r4, #24]
    c2f4:	2100      	movs	r1, #0
    c2f6:	6862      	ldr	r2, [r4, #4]
    c2f8:	e041      	b.n	c37e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    c2fa:	78e0      	ldrb	r0, [r4, #3]
    c2fc:	f7f5 fd2e 	bl	1d5c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    c300:	e7f7      	b.n	c2f2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x146>
    c302:	78a1      	ldrb	r1, [r4, #2]
    c304:	2904      	cmp	r1, #4
    c306:	d004      	beq.n	c312 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x166>
    c308:	2903      	cmp	r1, #3
    c30a:	d002      	beq.n	c312 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x166>
    c30c:	f240 11c3 	movw	r1, #451	; 0x1c3
    c310:	e0b2      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c312:	7822      	ldrb	r2, [r4, #0]
    c314:	b122      	cbz	r2, c320 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x174>
    c316:	4621      	mov	r1, r4
    c318:	4630      	mov	r0, r6
    c31a:	f000 f8ec 	bl	c4f6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    c31e:	e0a2      	b.n	c466 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    c320:	2904      	cmp	r1, #4
    c322:	d000      	beq.n	c326 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x17a>
    c324:	2001      	movs	r0, #1
    c326:	70a0      	strb	r0, [r4, #2]
    c328:	6862      	ldr	r2, [r4, #4]
    c32a:	2d02      	cmp	r5, #2
    c32c:	d00b      	beq.n	c346 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x19a>
    c32e:	2106      	movs	r1, #6
    c330:	4630      	mov	r0, r6
    c332:	4790      	blx	r2
    c334:	2800      	cmp	r0, #0
    c336:	d06a      	beq.n	c40e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x262>
    c338:	7800      	ldrb	r0, [r0, #0]
    c33a:	2800      	cmp	r0, #0
    c33c:	d067      	beq.n	c40e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x262>
    c33e:	f240 11dd 	movw	r1, #477	; 0x1dd
    c342:	e099      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c344:	e031      	b.n	c3aa <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1fe>
    c346:	2105      	movs	r1, #5
    c348:	4630      	mov	r0, r6
    c34a:	4790      	blx	r2
    c34c:	2800      	cmp	r0, #0
    c34e:	d06f      	beq.n	c430 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    c350:	7800      	ldrb	r0, [r0, #0]
    c352:	2800      	cmp	r0, #0
    c354:	d06c      	beq.n	c430 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    c356:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    c35a:	e08d      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c35c:	78a0      	ldrb	r0, [r4, #2]
    c35e:	2805      	cmp	r0, #5
    c360:	d002      	beq.n	c368 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1bc>
    c362:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    c366:	e087      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c368:	2102      	movs	r1, #2
    c36a:	6862      	ldr	r2, [r4, #4]
    c36c:	e007      	b.n	c37e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    c36e:	78a0      	ldrb	r0, [r4, #2]
    c370:	2805      	cmp	r0, #5
    c372:	d002      	beq.n	c37a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1ce>
    c374:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    c378:	e07e      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c37a:	6862      	ldr	r2, [r4, #4]
    c37c:	2101      	movs	r1, #1
    c37e:	4630      	mov	r0, r6
    c380:	4790      	blx	r2
    c382:	4601      	mov	r1, r0
    c384:	4620      	mov	r0, r4
    c386:	f7ff ff23 	bl	c1d0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24>
    c38a:	2802      	cmp	r0, #2
    c38c:	d06b      	beq.n	c466 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    c38e:	b3e8      	cbz	r0, c40c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x260>
    c390:	2801      	cmp	r0, #1
    c392:	d062      	beq.n	c45a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ae>
    c394:	f240 212a 	movw	r1, #554	; 0x22a
    c398:	e06e      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c39a:	e05b      	b.n	c454 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2a8>
    c39c:	e065      	b.n	c46a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2be>
    c39e:	78a0      	ldrb	r0, [r4, #2]
    c3a0:	2805      	cmp	r0, #5
    c3a2:	d002      	beq.n	c3aa <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1fe>
    c3a4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    c3a8:	e066      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c3ae:	f7f4 bc2d 	b.w	c0c <__aeabi_idiv0+0x60>
    c3b2:	78a0      	ldrb	r0, [r4, #2]
    c3b4:	2805      	cmp	r0, #5
    c3b6:	d002      	beq.n	c3be <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x212>
    c3b8:	f240 11f5 	movw	r1, #501	; 0x1f5
    c3bc:	e05c      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c3be:	6862      	ldr	r2, [r4, #4]
    c3c0:	210a      	movs	r1, #10
    c3c2:	4630      	mov	r0, r6
    c3c4:	4790      	blx	r2
    c3c6:	4601      	mov	r1, r0
    c3c8:	4620      	mov	r0, r4
    c3ca:	f7ff ff01 	bl	c1d0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24>
    c3ce:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    c3d2:	e051      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c3d4:	78a1      	ldrb	r1, [r4, #2]
    c3d6:	2905      	cmp	r1, #5
    c3d8:	d006      	beq.n	c3e8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x23c>
    c3da:	7863      	ldrb	r3, [r4, #1]
    c3dc:	b10b      	cbz	r3, c3e2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x236>
    c3de:	2903      	cmp	r1, #3
    c3e0:	d002      	beq.n	c3e8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x23c>
    c3e2:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    c3e6:	e047      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c3e8:	7821      	ldrb	r1, [r4, #0]
    c3ea:	b129      	cbz	r1, c3f8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24c>
    c3ec:	4621      	mov	r1, r4
    c3ee:	4630      	mov	r0, r6
    c3f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c3f4:	f000 b87f 	b.w	c4f6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    c3f8:	7f21      	ldrb	r1, [r4, #28]
    c3fa:	b181      	cbz	r1, c41e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x272>
    c3fc:	7727      	strb	r7, [r4, #28]
    c3fe:	70a0      	strb	r0, [r4, #2]
    c400:	6862      	ldr	r2, [r4, #4]
    c402:	2108      	movs	r1, #8
    c404:	4630      	mov	r0, r6
    c406:	4790      	blx	r2
    c408:	2800      	cmp	r0, #0
    c40a:	e001      	b.n	c410 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x264>
    c40c:	e028      	b.n	c460 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2b4>
    c40e:	e02a      	b.n	c466 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    c410:	d00e      	beq.n	c430 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    c412:	7800      	ldrb	r0, [r0, #0]
    c414:	2800      	cmp	r0, #0
    c416:	d00b      	beq.n	c430 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    c418:	f44f 7102 	mov.w	r1, #520	; 0x208
    c41c:	e02c      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c41e:	7861      	ldrb	r1, [r4, #1]
    c420:	b159      	cbz	r1, c43a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x28e>
    c422:	f104 0108 	add.w	r1, r4, #8
    c426:	4610      	mov	r0, r2
    c428:	f7ff ff20 	bl	c26c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    c42c:	b110      	cbz	r0, c434 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x288>
    c42e:	7067      	strb	r7, [r4, #1]
    c430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c434:	f44f 7103 	mov.w	r1, #524	; 0x20c
    c438:	e01e      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c43a:	70a0      	strb	r0, [r4, #2]
    c43c:	6862      	ldr	r2, [r4, #4]
    c43e:	2107      	movs	r1, #7
    c440:	4630      	mov	r0, r6
    c442:	4790      	blx	r2
    c444:	2800      	cmp	r0, #0
    c446:	d0f3      	beq.n	c430 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    c448:	7800      	ldrb	r0, [r0, #0]
    c44a:	2800      	cmp	r0, #0
    c44c:	d0f0      	beq.n	c430 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    c44e:	f44f 7105 	mov.w	r1, #532	; 0x214
    c452:	e011      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c454:	f240 2119 	movw	r1, #537	; 0x219
    c458:	e00e      	b.n	c478 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    c45a:	2104      	movs	r1, #4
    c45c:	6862      	ldr	r2, [r4, #4]
    c45e:	e78e      	b.n	c37e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    c460:	2103      	movs	r1, #3
    c462:	6862      	ldr	r2, [r4, #4]
    c464:	e78b      	b.n	c37e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    c466:	2d00      	cmp	r5, #0
    c468:	d1e2      	bne.n	c430 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    c46a:	f000 f8f2 	bl	c652 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    c46e:	6800      	ldr	r0, [r0, #0]
    c470:	2800      	cmp	r0, #0
    c472:	d0dd      	beq.n	c430 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    c474:	f44f 710d 	mov.w	r1, #564	; 0x234
    c478:	206a      	movs	r0, #106	; 0x6a
    c47a:	f7f7 fddf 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c47e:	4602      	mov	r2, r0
    c480:	7a03      	ldrb	r3, [r0, #8]
    c482:	68c0      	ldr	r0, [r0, #12]
    c484:	4408      	add	r0, r1
    c486:	60d0      	str	r0, [r2, #12]
    c488:	3859      	subs	r0, #89	; 0x59
    c48a:	f7f6 bcb7 	b.w	2dfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    c48e:	2201      	movs	r2, #1
    c490:	7202      	strb	r2, [r0, #8]
    c492:	2200      	movs	r2, #0
    c494:	74c2      	strb	r2, [r0, #19]
    c496:	790a      	ldrb	r2, [r1, #4]
    c498:	b16a      	cbz	r2, c4b6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30a>
    c49a:	2200      	movs	r2, #0
    c49c:	8202      	strh	r2, [r0, #16]
    c49e:	794a      	ldrb	r2, [r1, #5]
    c4a0:	b15a      	cbz	r2, c4ba <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30e>
    c4a2:	2204      	movs	r2, #4
    c4a4:	7482      	strb	r2, [r0, #18]
    c4a6:	688a      	ldr	r2, [r1, #8]
    c4a8:	326c      	adds	r2, #108	; 0x6c
    c4aa:	60c2      	str	r2, [r0, #12]
    c4ac:	68c9      	ldr	r1, [r1, #12]
    c4ae:	6141      	str	r1, [r0, #20]
    c4b0:	2103      	movs	r1, #3
    c4b2:	7081      	strb	r1, [r0, #2]
    c4b4:	4770      	bx	lr
    c4b6:	222b      	movs	r2, #43	; 0x2b
    c4b8:	e7f0      	b.n	c49c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2f0>
    c4ba:	2203      	movs	r2, #3
    c4bc:	e7f2      	b.n	c4a4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2f8>
    c4be:	b510      	push	{r4, lr}
    c4c0:	4604      	mov	r4, r0
    c4c2:	2000      	movs	r0, #0
    c4c4:	7220      	strb	r0, [r4, #8]
    c4c6:	74e0      	strb	r0, [r4, #19]
    c4c8:	7908      	ldrb	r0, [r1, #4]
    c4ca:	b180      	cbz	r0, c4ee <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x342>
    c4cc:	2000      	movs	r0, #0
    c4ce:	8220      	strh	r0, [r4, #16]
    c4d0:	7948      	ldrb	r0, [r1, #5]
    c4d2:	b170      	cbz	r0, c4f2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x346>
    c4d4:	2004      	movs	r0, #4
    c4d6:	74a0      	strb	r0, [r4, #18]
    c4d8:	68c8      	ldr	r0, [r1, #12]
    c4da:	306c      	adds	r0, #108	; 0x6c
    c4dc:	60e0      	str	r0, [r4, #12]
    c4de:	6889      	ldr	r1, [r1, #8]
    c4e0:	69a0      	ldr	r0, [r4, #24]
    c4e2:	f7f5 fbe1 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c4e6:	6160      	str	r0, [r4, #20]
    c4e8:	2004      	movs	r0, #4
    c4ea:	70a0      	strb	r0, [r4, #2]
    c4ec:	bd10      	pop	{r4, pc}
    c4ee:	202b      	movs	r0, #43	; 0x2b
    c4f0:	e7ed      	b.n	c4ce <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x322>
    c4f2:	2003      	movs	r0, #3
    c4f4:	e7ef      	b.n	c4d6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x32a>
    c4f6:	b570      	push	{r4, r5, r6, lr}
    c4f8:	4605      	mov	r5, r0
    c4fa:	460c      	mov	r4, r1
    c4fc:	78c8      	ldrb	r0, [r1, #3]
    c4fe:	f7f6 fa5b 	bl	29b8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    c502:	b178      	cbz	r0, c524 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x378>
    c504:	4620      	mov	r0, r4
    c506:	f000 f810 	bl	c52a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
    c50a:	6862      	ldr	r2, [r4, #4]
    c50c:	2109      	movs	r1, #9
    c50e:	4628      	mov	r0, r5
    c510:	4790      	blx	r2
    c512:	2800      	cmp	r0, #0
    c514:	d008      	beq.n	c528 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37c>
    c516:	7800      	ldrb	r0, [r0, #0]
    c518:	2800      	cmp	r0, #0
    c51a:	d005      	beq.n	c528 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37c>
    c51c:	21db      	movs	r1, #219	; 0xdb
    c51e:	206a      	movs	r0, #106	; 0x6a
    c520:	f7f7 fd8c 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c524:	21d7      	movs	r1, #215	; 0xd7
    c526:	e7fa      	b.n	c51e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x372>
    c528:	bd70      	pop	{r4, r5, r6, pc}
    c52a:	2100      	movs	r1, #0
    c52c:	7081      	strb	r1, [r0, #2]
    c52e:	7001      	strb	r1, [r0, #0]
    c530:	7041      	strb	r1, [r0, #1]
    c532:	4770      	bx	lr

0000c534 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c534:	b570      	push	{r4, r5, r6, lr}
    c536:	f7f4 fbbf 	bl	cb8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c53a:	4605      	mov	r5, r0
    c53c:	2400      	movs	r4, #0
    c53e:	e006      	b.n	c54e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c540:	4620      	mov	r0, r4
    c542:	f7f4 fbbf 	bl	cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c546:	f7ff fff0 	bl	c52a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
    c54a:	1c64      	adds	r4, r4, #1
    c54c:	b2e4      	uxtb	r4, r4
    c54e:	42ac      	cmp	r4, r5
    c550:	d3f6      	bcc.n	c540 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c552:	bd70      	pop	{r4, r5, r6, pc}

0000c554 <mpsl_timeslot_request>:
    c554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c558:	460d      	mov	r5, r1
    c55a:	f7f4 fbb3 	bl	cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c55e:	0004      	movs	r4, r0
    c560:	d007      	beq.n	c572 <mpsl_timeslot_request+0x1e>
    c562:	78a0      	ldrb	r0, [r4, #2]
    c564:	f06f 0622 	mvn.w	r6, #34	; 0x22
    c568:	2801      	cmp	r0, #1
    c56a:	d006      	beq.n	c57a <mpsl_timeslot_request+0x26>
    c56c:	2802      	cmp	r0, #2
    c56e:	d110      	bne.n	c592 <mpsl_timeslot_request+0x3e>
    c570:	e003      	b.n	c57a <mpsl_timeslot_request+0x26>
    c572:	f06f 0001 	mvn.w	r0, #1
    c576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c57a:	f06f 0715 	mvn.w	r7, #21
    c57e:	b155      	cbz	r5, c596 <mpsl_timeslot_request+0x42>
    c580:	4628      	mov	r0, r5
    c582:	f7f4 fb15 	bl	bb0 <__aeabi_idiv0+0x4>
    c586:	b130      	cbz	r0, c596 <mpsl_timeslot_request+0x42>
    c588:	7828      	ldrb	r0, [r5, #0]
    c58a:	b130      	cbz	r0, c59a <mpsl_timeslot_request+0x46>
    c58c:	78a0      	ldrb	r0, [r4, #2]
    c58e:	2802      	cmp	r0, #2
    c590:	d008      	beq.n	c5a4 <mpsl_timeslot_request+0x50>
    c592:	4630      	mov	r0, r6
    c594:	e7ef      	b.n	c576 <mpsl_timeslot_request+0x22>
    c596:	4638      	mov	r0, r7
    c598:	e7ed      	b.n	c576 <mpsl_timeslot_request+0x22>
    c59a:	4629      	mov	r1, r5
    c59c:	4620      	mov	r0, r4
    c59e:	f7ff ff76 	bl	c48e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2e2>
    c5a2:	e003      	b.n	c5ac <mpsl_timeslot_request+0x58>
    c5a4:	4629      	mov	r1, r5
    c5a6:	4620      	mov	r0, r4
    c5a8:	f7ff ff89 	bl	c4be <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x312>
    c5ac:	78e0      	ldrb	r0, [r4, #3]
    c5ae:	f104 0108 	add.w	r1, r4, #8
    c5b2:	f7ff fe5b 	bl	c26c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    c5b6:	b108      	cbz	r0, c5bc <mpsl_timeslot_request+0x68>
    c5b8:	2000      	movs	r0, #0
    c5ba:	e7dc      	b.n	c576 <mpsl_timeslot_request+0x22>
    c5bc:	f240 21ae 	movw	r1, #686	; 0x2ae
    c5c0:	206a      	movs	r0, #106	; 0x6a
    c5c2:	f7f7 fd3b 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000c5c6 <mpsl_timeslot_session_close>:
    c5c6:	b510      	push	{r4, lr}
    c5c8:	4604      	mov	r4, r0
    c5ca:	f7f4 fb7b 	bl	cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c5ce:	0001      	movs	r1, r0
    c5d0:	d004      	beq.n	c5dc <mpsl_timeslot_session_close+0x16>
    c5d2:	7808      	ldrb	r0, [r1, #0]
    c5d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
    c5d8:	b968      	cbnz	r0, c5f6 <mpsl_timeslot_session_close+0x30>
    c5da:	e002      	b.n	c5e2 <mpsl_timeslot_session_close+0x1c>
    c5dc:	f06f 0001 	mvn.w	r0, #1
    c5e0:	bd10      	pop	{r4, pc}
    c5e2:	7888      	ldrb	r0, [r1, #2]
    c5e4:	b138      	cbz	r0, c5f6 <mpsl_timeslot_session_close+0x30>
    c5e6:	2802      	cmp	r0, #2
    c5e8:	d007      	beq.n	c5fa <mpsl_timeslot_session_close+0x34>
    c5ea:	2801      	cmp	r0, #1
    c5ec:	d005      	beq.n	c5fa <mpsl_timeslot_session_close+0x34>
    c5ee:	2001      	movs	r0, #1
    c5f0:	7008      	strb	r0, [r1, #0]
    c5f2:	2000      	movs	r0, #0
    c5f4:	bd10      	pop	{r4, pc}
    c5f6:	4610      	mov	r0, r2
    c5f8:	bd10      	pop	{r4, pc}
    c5fa:	4620      	mov	r0, r4
    c5fc:	f7ff ff7b 	bl	c4f6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    c600:	e7f7      	b.n	c5f2 <mpsl_timeslot_session_close+0x2c>

0000c602 <mpsl_timeslot_session_count_set>:
    c602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c606:	460e      	mov	r6, r1
    c608:	4607      	mov	r7, r0
    c60a:	f7f4 fb55 	bl	cb8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c60e:	4605      	mov	r5, r0
    c610:	2400      	movs	r4, #0
    c612:	e00a      	b.n	c62a <mpsl_timeslot_session_count_set+0x28>
    c614:	4620      	mov	r0, r4
    c616:	f7f4 fb55 	bl	cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c61a:	7880      	ldrb	r0, [r0, #2]
    c61c:	b118      	cbz	r0, c626 <mpsl_timeslot_session_count_set+0x24>
    c61e:	f04f 30ff 	mov.w	r0, #4294967295
    c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c626:	1c64      	adds	r4, r4, #1
    c628:	b2e4      	uxtb	r4, r4
    c62a:	42ac      	cmp	r4, r5
    c62c:	d3f2      	bcc.n	c614 <mpsl_timeslot_session_count_set+0x12>
    c62e:	2e08      	cmp	r6, #8
    c630:	d902      	bls.n	c638 <mpsl_timeslot_session_count_set+0x36>
    c632:	f06f 0015 	mvn.w	r0, #21
    c636:	e7f4      	b.n	c622 <mpsl_timeslot_session_count_set+0x20>
    c638:	b117      	cbz	r7, c640 <mpsl_timeslot_session_count_set+0x3e>
    c63a:	4631      	mov	r1, r6
    c63c:	4638      	mov	r0, r7
    c63e:	e001      	b.n	c644 <mpsl_timeslot_session_count_set+0x42>
    c640:	2100      	movs	r1, #0
    c642:	4608      	mov	r0, r1
    c644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c648:	f7f4 bb24 	b.w	c94 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000c64c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c64c:	2000      	movs	r0, #0
    c64e:	f7f7 b907 	b.w	3860 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c652 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    c652:	2000      	movs	r0, #0
    c654:	f7f7 b8ea 	b.w	382c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000c658 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c658:	b510      	push	{r4, lr}
    c65a:	f7f6 fdd3 	bl	3204 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c662:	f000 b800 	b.w	c666 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000c666 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    c666:	0a41      	lsrs	r1, r0, #9
    c668:	f643 5209 	movw	r2, #15625	; 0x3d09
    c66c:	4351      	muls	r1, r2
    c66e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c672:	fb10 f002 	smulbb	r0, r0, r2
    c676:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c67a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c67e:	4770      	bx	lr

0000c680 <MPSL_IRQ_RADIO_Handler>:
    c680:	f7f5 bb80 	b.w	1d84 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c684:	2800      	cmp	r0, #0
    c686:	db09      	blt.n	c69c <MPSL_IRQ_RADIO_Handler+0x1c>
    c688:	f000 021f 	and.w	r2, r0, #31
    c68c:	2101      	movs	r1, #1
    c68e:	4091      	lsls	r1, r2
    c690:	0940      	lsrs	r0, r0, #5
    c692:	0080      	lsls	r0, r0, #2
    c694:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c698:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c69c:	4770      	bx	lr
    c69e:	2800      	cmp	r0, #0
    c6a0:	db0d      	blt.n	c6be <MPSL_IRQ_RADIO_Handler+0x3e>
    c6a2:	f000 021f 	and.w	r2, r0, #31
    c6a6:	2101      	movs	r1, #1
    c6a8:	4091      	lsls	r1, r2
    c6aa:	0940      	lsrs	r0, r0, #5
    c6ac:	0080      	lsls	r0, r0, #2
    c6ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c6b2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c6b6:	f3bf 8f4f 	dsb	sy
    c6ba:	f3bf 8f6f 	isb	sy
    c6be:	4770      	bx	lr

0000c6c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c6c0:	b570      	push	{r4, r5, r6, lr}
    c6c2:	4602      	mov	r2, r0
    c6c4:	2000      	movs	r0, #0
    c6c6:	2900      	cmp	r1, #0
    c6c8:	d01d      	beq.n	c706 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c6ca:	fba2 0101 	umull	r0, r1, r2, r1
    c6ce:	0a40      	lsrs	r0, r0, #9
    c6d0:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c6d4:	0a49      	lsrs	r1, r1, #9
    c6d6:	1c40      	adds	r0, r0, #1
    c6d8:	f141 0100 	adc.w	r1, r1, #0
    c6dc:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c6e0:	1883      	adds	r3, r0, r2
    c6e2:	f141 0100 	adc.w	r1, r1, #0
    c6e6:	1c5b      	adds	r3, r3, #1
    c6e8:	f141 0400 	adc.w	r4, r1, #0
    c6ec:	2100      	movs	r1, #0
    c6ee:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c6f2:	41a1      	sbcs	r1, r4
    c6f4:	d203      	bcs.n	c6fe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c6f6:	2171      	movs	r1, #113	; 0x71
    c6f8:	206d      	movs	r0, #109	; 0x6d
    c6fa:	f7f7 fc9f 	bl	403c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c6fe:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c702:	fbb0 f0f2 	udiv	r0, r0, r2
    c706:	bd70      	pop	{r4, r5, r6, pc}
    c708:	5840      	ldr	r0, [r0, r1]
    c70a:	2800      	cmp	r0, #0
    c70c:	d000      	beq.n	c710 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c70e:	2001      	movs	r0, #1
    c710:	4770      	bx	lr
    c712:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c716:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c71a:	f002 0201 	and.w	r2, r2, #1
    c71e:	03c0      	lsls	r0, r0, #15
    c720:	d503      	bpl.n	c72a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c722:	428a      	cmp	r2, r1
    c724:	d101      	bne.n	c72a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c726:	2001      	movs	r0, #1
    c728:	4770      	bx	lr
    c72a:	2000      	movs	r0, #0
    c72c:	4770      	bx	lr

0000c72e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c72e:	b510      	push	{r4, lr}
    c730:	2101      	movs	r1, #1
    c732:	0788      	lsls	r0, r1, #30
    c734:	f7f7 fc40 	bl	3fb8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c738:	2800      	cmp	r0, #0
    c73a:	d000      	beq.n	c73e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c73c:	2001      	movs	r0, #1
    c73e:	bd10      	pop	{r4, pc}

0000c740 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c740:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c744:	2101      	movs	r1, #1
    c746:	6001      	str	r1, [r0, #0]
    c748:	4770      	bx	lr

0000c74a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c74a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c74e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c752:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c756:	f002 0203 	and.w	r2, r2, #3
    c75a:	03c9      	lsls	r1, r1, #15
    c75c:	d503      	bpl.n	c766 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c75e:	4282      	cmp	r2, r0
    c760:	d101      	bne.n	c766 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c762:	2001      	movs	r0, #1
    c764:	4770      	bx	lr
    c766:	2000      	movs	r0, #0
    c768:	4770      	bx	lr

0000c76a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c76a:	b510      	push	{r4, lr}
    c76c:	2100      	movs	r1, #0
    c76e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c772:	f7f7 fc21 	bl	3fb8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c776:	2800      	cmp	r0, #0
    c778:	d000      	beq.n	c77c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c77a:	2001      	movs	r0, #1
    c77c:	bd10      	pop	{r4, pc}
    c77e:	2800      	cmp	r0, #0
    c780:	db09      	blt.n	c796 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c782:	f000 021f 	and.w	r2, r0, #31
    c786:	2101      	movs	r1, #1
    c788:	4091      	lsls	r1, r2
    c78a:	0940      	lsrs	r0, r0, #5
    c78c:	0080      	lsls	r0, r0, #2
    c78e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c792:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c796:	4770      	bx	lr
    c798:	2800      	cmp	r0, #0
    c79a:	db0d      	blt.n	c7b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c79c:	f000 021f 	and.w	r2, r0, #31
    c7a0:	2101      	movs	r1, #1
    c7a2:	4091      	lsls	r1, r2
    c7a4:	0940      	lsrs	r0, r0, #5
    c7a6:	0080      	lsls	r0, r0, #2
    c7a8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c7ac:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c7b0:	f3bf 8f4f 	dsb	sy
    c7b4:	f3bf 8f6f 	isb	sy
    c7b8:	4770      	bx	lr
    c7ba:	1000      	.short	0x1000
    c7bc:	00fa0002 	.word	0x00fa0002
    c7c0:	ffdf0000 	.word	0xffdf0000
    c7c4:	4707a0e7 	.word	0x4707a0e7
    c7c8:	d67d016b 	.word	0xd67d016b
    c7cc:	ce3a8a07 	.word	0xce3a8a07
    c7d0:	d057d4b6 	.word	0xd057d4b6
    c7d4:	c542      	.short	0xc542
    c7d6:	2800      	cmp	r0, #0
    c7d8:	db09      	blt.n	c7ee <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c7da:	f000 021f 	and.w	r2, r0, #31
    c7de:	2101      	movs	r1, #1
    c7e0:	4091      	lsls	r1, r2
    c7e2:	0940      	lsrs	r0, r0, #5
    c7e4:	0080      	lsls	r0, r0, #2
    c7e6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c7ea:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c7ee:	4770      	bx	lr

0000c7f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c7f0:	f3ef 8110 	mrs	r1, PRIMASK
    c7f4:	b672      	cpsid	i
    c7f6:	7802      	ldrb	r2, [r0, #0]
    c7f8:	2a01      	cmp	r2, #1
    c7fa:	d001      	beq.n	c800 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c7fc:	2201      	movs	r2, #1
    c7fe:	e000      	b.n	c802 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c800:	2200      	movs	r2, #0
    c802:	2301      	movs	r3, #1
    c804:	7003      	strb	r3, [r0, #0]
    c806:	b901      	cbnz	r1, c80a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c808:	b662      	cpsie	i
    c80a:	b10a      	cbz	r2, c810 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c80c:	2000      	movs	r0, #0
    c80e:	4770      	bx	lr
    c810:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c814:	4770      	bx	lr

0000c816 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c816:	2100      	movs	r1, #0
    c818:	7001      	strb	r1, [r0, #0]
    c81a:	4608      	mov	r0, r1
    c81c:	4770      	bx	lr

0000c81e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c81e:	f3ef 8110 	mrs	r1, PRIMASK
    c822:	b672      	cpsid	i
    c824:	2200      	movs	r2, #0
    c826:	7002      	strb	r2, [r0, #0]
    c828:	b901      	cbnz	r1, c82c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c82a:	b662      	cpsie	i
    c82c:	2000      	movs	r0, #0
    c82e:	4770      	bx	lr

0000c830 <mpsl_low_priority_process>:
    c830:	f7f7 bcf0 	b.w	4214 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c834 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c834:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c838:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c83c:	280f      	cmp	r0, #15
    c83e:	d001      	beq.n	c844 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c840:	2000      	movs	r0, #0
    c842:	4770      	bx	lr
    c844:	2001      	movs	r0, #1
    c846:	4770      	bx	lr

0000c848 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c848:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c84c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c850:	280a      	cmp	r0, #10
    c852:	d001      	beq.n	c858 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c854:	2000      	movs	r0, #0
    c856:	4770      	bx	lr
    c858:	2001      	movs	r0, #1
    c85a:	4770      	bx	lr

0000c85c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c85c:	b500      	push	{lr}
    c85e:	f7ff fff3 	bl	c848 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c862:	b120      	cbz	r0, c86e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c864:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c868:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c86c:	b108      	cbz	r0, c872 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c86e:	2000      	movs	r0, #0
    c870:	bd00      	pop	{pc}
    c872:	2001      	movs	r0, #1
    c874:	bd00      	pop	{pc}

0000c876 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c876:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c87a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c87e:	280e      	cmp	r0, #14
    c880:	d001      	beq.n	c886 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c882:	2000      	movs	r0, #0
    c884:	4770      	bx	lr
    c886:	2001      	movs	r0, #1
    c888:	4770      	bx	lr

0000c88a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c88a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c88e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c892:	2810      	cmp	r0, #16
    c894:	d001      	beq.n	c89a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c896:	2000      	movs	r0, #0
    c898:	4770      	bx	lr
    c89a:	2001      	movs	r0, #1
    c89c:	4770      	bx	lr

0000c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c89e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8a2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c8a6:	2806      	cmp	r0, #6
    c8a8:	d003      	beq.n	c8b2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c8aa:	1c40      	adds	r0, r0, #1
    c8ac:	d001      	beq.n	c8b2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c8ae:	2000      	movs	r0, #0
    c8b0:	4770      	bx	lr
    c8b2:	2001      	movs	r0, #1
    c8b4:	4770      	bx	lr

0000c8b6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c8b6:	b500      	push	{lr}
    c8b8:	f7ff fff1 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c8bc:	b148      	cbz	r0, c8d2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8c2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c8c6:	2806      	cmp	r0, #6
    c8c8:	d303      	bcc.n	c8d2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8ca:	1c40      	adds	r0, r0, #1
    c8cc:	d001      	beq.n	c8d2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8ce:	2001      	movs	r0, #1
    c8d0:	bd00      	pop	{pc}
    c8d2:	2000      	movs	r0, #0
    c8d4:	bd00      	pop	{pc}

0000c8d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c8d6:	b500      	push	{lr}
    c8d8:	f7ff ffe1 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c8dc:	b138      	cbz	r0, c8ee <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c8de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8e2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c8e6:	2806      	cmp	r0, #6
    c8e8:	d303      	bcc.n	c8f2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c8ea:	1c40      	adds	r0, r0, #1
    c8ec:	d001      	beq.n	c8f2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c8ee:	2000      	movs	r0, #0
    c8f0:	bd00      	pop	{pc}
    c8f2:	2001      	movs	r0, #1
    c8f4:	bd00      	pop	{pc}

0000c8f6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c8f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8fa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c8fe:	280d      	cmp	r0, #13
    c900:	d001      	beq.n	c906 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c902:	2000      	movs	r0, #0
    c904:	4770      	bx	lr
    c906:	2001      	movs	r0, #1
    c908:	4770      	bx	lr

0000c90a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c90a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c90e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c912:	2808      	cmp	r0, #8
    c914:	d001      	beq.n	c91a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c916:	2000      	movs	r0, #0
    c918:	4770      	bx	lr
    c91a:	2001      	movs	r0, #1
    c91c:	4770      	bx	lr

0000c91e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c91e:	2a00      	cmp	r2, #0
    c920:	bf04      	itt	eq
    c922:	2000      	moveq	r0, #0
    c924:	4770      	bxeq	lr
    c926:	1e52      	subs	r2, r2, #1
    c928:	d007      	beq.n	c93a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c92a:	7803      	ldrb	r3, [r0, #0]
    c92c:	f891 c000 	ldrb.w	ip, [r1]
    c930:	4563      	cmp	r3, ip
    c932:	bf04      	itt	eq
    c934:	1c40      	addeq	r0, r0, #1
    c936:	1c49      	addeq	r1, r1, #1
    c938:	d0f5      	beq.n	c926 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c93a:	7800      	ldrb	r0, [r0, #0]
    c93c:	7809      	ldrb	r1, [r1, #0]
    c93e:	1a40      	subs	r0, r0, r1
    c940:	4770      	bx	lr

0000c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c942:	b4f0      	push	{r4, r5, r6, r7}
    c944:	ea80 0c01 	eor.w	ip, r0, r1
    c948:	4603      	mov	r3, r0
    c94a:	f01c 0f03 	tst.w	ip, #3
    c94e:	d13c      	bne.n	c9ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c950:	f013 0f03 	tst.w	r3, #3
    c954:	d00b      	beq.n	c96e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c956:	2a00      	cmp	r2, #0
    c958:	bf04      	itt	eq
    c95a:	bcf0      	popeq	{r4, r5, r6, r7}
    c95c:	4770      	bxeq	lr
    c95e:	f811 cb01 	ldrb.w	ip, [r1], #1
    c962:	f803 cb01 	strb.w	ip, [r3], #1
    c966:	1e52      	subs	r2, r2, #1
    c968:	f013 0f03 	tst.w	r3, #3
    c96c:	d1f3      	bne.n	c956 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c96e:	2a03      	cmp	r2, #3
    c970:	d94f      	bls.n	ca12 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c972:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c976:	d24c      	bcs.n	ca12 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c978:	f1c2 0c00 	rsb	ip, r2, #0
    c97c:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c980:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c984:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c988:	f1cc 0c00 	rsb	ip, ip, #0
    c98c:	f1bc 0f00 	cmp.w	ip, #0
    c990:	dd1b      	ble.n	c9ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c992:	1f0d      	subs	r5, r1, #4
    c994:	1f1c      	subs	r4, r3, #4
    c996:	f01c 0f01 	tst.w	ip, #1
    c99a:	d003      	beq.n	c9a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c99c:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c9a0:	f844 6f04 	str.w	r6, [r4, #4]!
    c9a4:	ea5f 066c 	movs.w	r6, ip, asr #1
    c9a8:	d007      	beq.n	c9ba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c9aa:	686f      	ldr	r7, [r5, #4]
    c9ac:	6067      	str	r7, [r4, #4]
    c9ae:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c9b2:	f844 7f08 	str.w	r7, [r4, #8]!
    c9b6:	1e76      	subs	r6, r6, #1
    c9b8:	d1f7      	bne.n	c9aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c9ba:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c9be:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c9c2:	f1cc 0c00 	rsb	ip, ip, #0
    c9c6:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c9ca:	2a00      	cmp	r2, #0
    c9cc:	bf04      	itt	eq
    c9ce:	bcf0      	popeq	{r4, r5, r6, r7}
    c9d0:	4770      	bxeq	lr
    c9d2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c9d6:	d226      	bcs.n	ca26 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c9d8:	2a00      	cmp	r2, #0
    c9da:	bfdc      	itt	le
    c9dc:	bcf0      	pople	{r4, r5, r6, r7}
    c9de:	4770      	bxle	lr
    c9e0:	1e49      	subs	r1, r1, #1
    c9e2:	1e5b      	subs	r3, r3, #1
    c9e4:	f012 0f01 	tst.w	r2, #1
    c9e8:	d003      	beq.n	c9f2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c9ea:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c9ee:	f803 cf01 	strb.w	ip, [r3, #1]!
    c9f2:	1052      	asrs	r2, r2, #1
    c9f4:	bf04      	itt	eq
    c9f6:	bcf0      	popeq	{r4, r5, r6, r7}
    c9f8:	4770      	bxeq	lr
    c9fa:	f891 c001 	ldrb.w	ip, [r1, #1]
    c9fe:	f883 c001 	strb.w	ip, [r3, #1]
    ca02:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    ca06:	f803 cf02 	strb.w	ip, [r3, #2]!
    ca0a:	1e52      	subs	r2, r2, #1
    ca0c:	d1f5      	bne.n	c9fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    ca0e:	bcf0      	pop	{r4, r5, r6, r7}
    ca10:	4770      	bx	lr
    ca12:	2a04      	cmp	r2, #4
    ca14:	d3d9      	bcc.n	c9ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ca16:	f851 cb04 	ldr.w	ip, [r1], #4
    ca1a:	1f12      	subs	r2, r2, #4
    ca1c:	f843 cb04 	str.w	ip, [r3], #4
    ca20:	2a04      	cmp	r2, #4
    ca22:	d2f8      	bcs.n	ca16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    ca24:	e7d1      	b.n	c9ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ca26:	f811 cb01 	ldrb.w	ip, [r1], #1
    ca2a:	f803 cb01 	strb.w	ip, [r3], #1
    ca2e:	1e52      	subs	r2, r2, #1
    ca30:	d1f9      	bne.n	ca26 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ca32:	bcf0      	pop	{r4, r5, r6, r7}
    ca34:	4770      	bx	lr

0000ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ca36:	b470      	push	{r4, r5, r6}
    ca38:	4603      	mov	r3, r0
    ca3a:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    ca3e:	f010 0f03 	tst.w	r0, #3
    ca42:	d009      	beq.n	ca58 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ca44:	2a00      	cmp	r2, #0
    ca46:	bf04      	itt	eq
    ca48:	bc70      	popeq	{r4, r5, r6}
    ca4a:	4770      	bxeq	lr
    ca4c:	f803 cb01 	strb.w	ip, [r3], #1
    ca50:	1e52      	subs	r2, r2, #1
    ca52:	f013 0f03 	tst.w	r3, #3
    ca56:	d1f5      	bne.n	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    ca58:	b2c9      	uxtb	r1, r1
    ca5a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ca5e:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ca62:	2a03      	cmp	r2, #3
    ca64:	d939      	bls.n	cada <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ca66:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ca6a:	d236      	bcs.n	cada <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ca6c:	4251      	negs	r1, r2
    ca6e:	17cc      	asrs	r4, r1, #31
    ca70:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    ca74:	1089      	asrs	r1, r1, #2
    ca76:	424e      	negs	r6, r1
    ca78:	2e00      	cmp	r6, #0
    ca7a:	dd11      	ble.n	caa0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ca7c:	1f19      	subs	r1, r3, #4
    ca7e:	f016 0f01 	tst.w	r6, #1
    ca82:	bf18      	it	ne
    ca84:	f841 5f04 	strne.w	r5, [r1, #4]!
    ca88:	1074      	asrs	r4, r6, #1
    ca8a:	d004      	beq.n	ca96 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    ca8c:	604d      	str	r5, [r1, #4]
    ca8e:	f841 5f08 	str.w	r5, [r1, #8]!
    ca92:	1e64      	subs	r4, r4, #1
    ca94:	d1fa      	bne.n	ca8c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    ca96:	4271      	negs	r1, r6
    ca98:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    ca9c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    caa0:	2a00      	cmp	r2, #0
    caa2:	bf04      	itt	eq
    caa4:	bc70      	popeq	{r4, r5, r6}
    caa6:	4770      	bxeq	lr
    caa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    caac:	d21d      	bcs.n	caea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    caae:	2a00      	cmp	r2, #0
    cab0:	bfdc      	itt	le
    cab2:	bc70      	pople	{r4, r5, r6}
    cab4:	4770      	bxle	lr
    cab6:	1e59      	subs	r1, r3, #1
    cab8:	f012 0f01 	tst.w	r2, #1
    cabc:	bf18      	it	ne
    cabe:	f801 cf01 	strbne.w	ip, [r1, #1]!
    cac2:	1052      	asrs	r2, r2, #1
    cac4:	bf04      	itt	eq
    cac6:	bc70      	popeq	{r4, r5, r6}
    cac8:	4770      	bxeq	lr
    caca:	f881 c001 	strb.w	ip, [r1, #1]
    cace:	f801 cf02 	strb.w	ip, [r1, #2]!
    cad2:	1e52      	subs	r2, r2, #1
    cad4:	d1f9      	bne.n	caca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    cad6:	bc70      	pop	{r4, r5, r6}
    cad8:	4770      	bx	lr
    cada:	2a04      	cmp	r2, #4
    cadc:	d3e0      	bcc.n	caa0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cade:	1f12      	subs	r2, r2, #4
    cae0:	f843 5b04 	str.w	r5, [r3], #4
    cae4:	2a04      	cmp	r2, #4
    cae6:	d2fa      	bcs.n	cade <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    cae8:	e7da      	b.n	caa0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    caea:	f803 cb01 	strb.w	ip, [r3], #1
    caee:	1e52      	subs	r2, r2, #1
    caf0:	d1fb      	bne.n	caea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    caf2:	bc70      	pop	{r4, r5, r6}
    caf4:	4770      	bx	lr
    caf6:	f04f 30ff 	mov.w	r0, #4294967295
    cafa:	4770      	bx	lr
    cafc:	2000      	movs	r0, #0
    cafe:	4770      	bx	lr
    cb00:	2000      	movs	r0, #0
    cb02:	4770      	bx	lr
    cb04:	f04f 30ff 	mov.w	r0, #4294967295
    cb08:	4770      	bx	lr
    cb0a:	4770      	bx	lr
    cb0c:	4770      	bx	lr
    cb0e:	f04f 30ff 	mov.w	r0, #4294967295
    cb12:	4770      	bx	lr
    cb14:	f04f 30ff 	mov.w	r0, #4294967295
    cb18:	4770      	bx	lr
    cb1a:	2100      	movs	r1, #0
    cb1c:	7001      	strb	r1, [r0, #0]
    cb1e:	4770      	bx	lr
    cb20:	f04f 30ff 	mov.w	r0, #4294967295
    cb24:	4770      	bx	lr
    cb26:	f04f 30ff 	mov.w	r0, #4294967295
    cb2a:	4770      	bx	lr
    cb2c:	2000      	movs	r0, #0
    cb2e:	4770      	bx	lr
    cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb32:	4604      	mov	r4, r0
    cb34:	f100 0003 	add.w	r0, r0, #3
    cb38:	f020 0003 	bic.w	r0, r0, #3
    cb3c:	0015      	movs	r5, r2
    cb3e:	9000      	str	r0, [sp, #0]
    cb40:	460e      	mov	r6, r1
    cb42:	788a      	ldrb	r2, [r1, #2]
    cb44:	7849      	ldrb	r1, [r1, #1]
    cb46:	d000      	beq.n	cb4a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x114>
    cb48:	2000      	movs	r0, #0
    cb4a:	f7f7 fee7 	bl	491c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cb4e:	9900      	ldr	r1, [sp, #0]
    cb50:	4408      	add	r0, r1
    cb52:	9000      	str	r0, [sp, #0]
    cb54:	78b1      	ldrb	r1, [r6, #2]
    cb56:	b131      	cbz	r1, cb66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x130>
    cb58:	b105      	cbz	r5, cb5c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x126>
    cb5a:	2000      	movs	r0, #0
    cb5c:	f7f8 f93e 	bl	4ddc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cb60:	9900      	ldr	r1, [sp, #0]
    cb62:	4408      	add	r0, r1
    cb64:	9000      	str	r0, [sp, #0]
    cb66:	462a      	mov	r2, r5
    cb68:	4631      	mov	r1, r6
    cb6a:	4668      	mov	r0, sp
    cb6c:	f000 f807 	bl	cb7e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x148>
    cb70:	9800      	ldr	r0, [sp, #0]
    cb72:	1dc0      	adds	r0, r0, #7
    cb74:	f020 0007 	bic.w	r0, r0, #7
    cb78:	9000      	str	r0, [sp, #0]
    cb7a:	1b00      	subs	r0, r0, r4
    cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb82:	4606      	mov	r6, r0
    cb84:	460c      	mov	r4, r1
    cb86:	7808      	ldrb	r0, [r1, #0]
    cb88:	7849      	ldrb	r1, [r1, #1]
    cb8a:	2700      	movs	r7, #0
    cb8c:	4408      	add	r0, r1
    cb8e:	4691      	mov	r9, r2
    cb90:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    cb94:	463d      	mov	r5, r7
    cb96:	e00e      	b.n	cbb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    cb98:	79a3      	ldrb	r3, [r4, #6]
    cb9a:	2b02      	cmp	r3, #2
    cb9c:	d200      	bcs.n	cba0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x16a>
    cb9e:	2302      	movs	r3, #2
    cba0:	7962      	ldrb	r2, [r4, #5]
    cba2:	2a03      	cmp	r2, #3
    cba4:	d200      	bcs.n	cba8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x172>
    cba6:	2203      	movs	r2, #3
    cba8:	7921      	ldrb	r1, [r4, #4]
    cbaa:	78e0      	ldrb	r0, [r4, #3]
    cbac:	f000 ff01 	bl	d9b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cbb0:	1c6d      	adds	r5, r5, #1
    cbb2:	4407      	add	r7, r0
    cbb4:	b2ed      	uxtb	r5, r5
    cbb6:	4545      	cmp	r5, r8
    cbb8:	d3ee      	bcc.n	cb98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x162>
    cbba:	6830      	ldr	r0, [r6, #0]
    cbbc:	1cc0      	adds	r0, r0, #3
    cbbe:	f020 0003 	bic.w	r0, r0, #3
    cbc2:	6030      	str	r0, [r6, #0]
    cbc4:	f1b9 0f00 	cmp.w	r9, #0
    cbc8:	d000      	beq.n	cbcc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    cbca:	2000      	movs	r0, #0
    cbcc:	463a      	mov	r2, r7
    cbce:	4641      	mov	r1, r8
    cbd0:	f7f8 f87c 	bl	4ccc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cbd4:	6831      	ldr	r1, [r6, #0]
    cbd6:	4408      	add	r0, r1
    cbd8:	6030      	str	r0, [r6, #0]
    cbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000cbde <sdc_soc_ecb_block_encrypt>:
    cbde:	b530      	push	{r4, r5, lr}
    cbe0:	460d      	mov	r5, r1
    cbe2:	b08d      	sub	sp, #52	; 0x34
    cbe4:	4614      	mov	r4, r2
    cbe6:	4601      	mov	r1, r0
    cbe8:	2210      	movs	r2, #16
    cbea:	4668      	mov	r0, sp
    cbec:	f7ff fea9 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbf0:	2210      	movs	r2, #16
    cbf2:	4629      	mov	r1, r5
    cbf4:	a804      	add	r0, sp, #16
    cbf6:	f7ff fea4 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbfa:	4668      	mov	r0, sp
    cbfc:	f7f8 f9b8 	bl	4f70 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    cc00:	b118      	cbz	r0, cc0a <sdc_soc_ecb_block_encrypt+0x2c>
    cc02:	f06f 0015 	mvn.w	r0, #21
    cc06:	b00d      	add	sp, #52	; 0x34
    cc08:	bd30      	pop	{r4, r5, pc}
    cc0a:	2210      	movs	r2, #16
    cc0c:	4620      	mov	r0, r4
    cc0e:	a908      	add	r1, sp, #32
    cc10:	f7ff fe97 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc14:	2000      	movs	r0, #0
    cc16:	e7f6      	b.n	cc06 <sdc_soc_ecb_block_encrypt+0x28>

0000cc18 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    cc18:	2000      	movs	r0, #0
    cc1a:	4770      	bx	lr

0000cc1c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    cc1c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    cc1e:	4604      	mov	r4, r0
    cc20:	1d01      	adds	r1, r0, #4
    cc22:	4668      	mov	r0, sp
    cc24:	f7f9 fdb6 	bl	6794 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    cc28:	2800      	cmp	r0, #0
    cc2a:	d004      	beq.n	cc36 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    cc2c:	4669      	mov	r1, sp
    cc2e:	4620      	mov	r0, r4
    cc30:	f000 f848 	bl	ccc4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    cc34:	2001      	movs	r0, #1
    cc36:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000cc38 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cc38:	b50e      	push	{r1, r2, r3, lr}
    cc3a:	4601      	mov	r1, r0
    cc3c:	4668      	mov	r0, sp
    cc3e:	f000 f827 	bl	cc90 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cc42:	4668      	mov	r0, sp
    cc44:	f7f9 fdd0 	bl	67e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cc48:	bd0e      	pop	{r1, r2, r3, pc}

0000cc4a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    cc4a:	b510      	push	{r4, lr}
    cc4c:	4604      	mov	r4, r0
    cc4e:	4620      	mov	r0, r4
    cc50:	f7f7 fd6c 	bl	472c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    cc54:	2800      	cmp	r0, #0
    cc56:	d006      	beq.n	cc66 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    cc58:	78a1      	ldrb	r1, [r4, #2]
    cc5a:	7820      	ldrb	r0, [r4, #0]
    cc5c:	f000 f804 	bl	cc68 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    cc60:	2800      	cmp	r0, #0
    cc62:	d0f4      	beq.n	cc4e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    cc64:	2001      	movs	r0, #1
    cc66:	bd10      	pop	{r4, pc}
    cc68:	b570      	push	{r4, r5, r6, lr}
    cc6a:	460c      	mov	r4, r1
    cc6c:	4605      	mov	r5, r0
    cc6e:	f7f7 fdd1 	bl	4814 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cc72:	2800      	cmp	r0, #0
    cc74:	d002      	beq.n	cc7c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    cc76:	2d3e      	cmp	r5, #62	; 0x3e
    cc78:	d001      	beq.n	cc7e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    cc7a:	2001      	movs	r0, #1
    cc7c:	bd70      	pop	{r4, r5, r6, pc}
    cc7e:	2c12      	cmp	r4, #18
    cc80:	d004      	beq.n	cc8c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    cc82:	4620      	mov	r0, r4
    cc84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc88:	f7f7 bde0 	b.w	484c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cc8c:	2000      	movs	r0, #0
    cc8e:	bd70      	pop	{r4, r5, r6, pc}

0000cc90 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cc90:	880a      	ldrh	r2, [r1, #0]
    cc92:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cc96:	8002      	strh	r2, [r0, #0]
    cc98:	884a      	ldrh	r2, [r1, #2]
    cc9a:	8042      	strh	r2, [r0, #2]
    cc9c:	784a      	ldrb	r2, [r1, #1]
    cc9e:	0993      	lsrs	r3, r2, #6
    cca0:	2200      	movs	r2, #0
    cca2:	7142      	strb	r2, [r0, #5]
    cca4:	784b      	ldrb	r3, [r1, #1]
    cca6:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ccaa:	b11b      	cbz	r3, ccb4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ccac:	2b01      	cmp	r3, #1
    ccae:	d005      	beq.n	ccbc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    ccb0:	2b02      	cmp	r3, #2
    ccb2:	d005      	beq.n	ccc0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ccb4:	7102      	strb	r2, [r0, #4]
    ccb6:	1d09      	adds	r1, r1, #4
    ccb8:	6081      	str	r1, [r0, #8]
    ccba:	4770      	bx	lr
    ccbc:	2201      	movs	r2, #1
    ccbe:	e7f9      	b.n	ccb4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ccc0:	2202      	movs	r2, #2
    ccc2:	e7f7      	b.n	ccb4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ccc4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ccc4:	b510      	push	{r4, lr}
    ccc6:	460c      	mov	r4, r1
    ccc8:	7809      	ldrb	r1, [r1, #0]
    ccca:	7001      	strb	r1, [r0, #0]
    cccc:	7841      	ldrb	r1, [r0, #1]
    ccce:	f021 010f 	bic.w	r1, r1, #15
    ccd2:	7041      	strb	r1, [r0, #1]
    ccd4:	8822      	ldrh	r2, [r4, #0]
    ccd6:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ccda:	4311      	orrs	r1, r2
    ccdc:	7041      	strb	r1, [r0, #1]
    ccde:	78a2      	ldrb	r2, [r4, #2]
    cce0:	7082      	strb	r2, [r0, #2]
    cce2:	8862      	ldrh	r2, [r4, #2]
    cce4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    cce8:	0a12      	lsrs	r2, r2, #8
    ccea:	70c2      	strb	r2, [r0, #3]
    ccec:	7041      	strb	r1, [r0, #1]
    ccee:	7922      	ldrb	r2, [r4, #4]
    ccf0:	f002 0203 	and.w	r2, r2, #3
    ccf4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ccf8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    ccfc:	7041      	strb	r1, [r0, #1]
    ccfe:	7962      	ldrb	r2, [r4, #5]
    cd00:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    cd04:	7041      	strb	r1, [r0, #1]
    cd06:	68a1      	ldr	r1, [r4, #8]
    cd08:	1d02      	adds	r2, r0, #4
    cd0a:	4291      	cmp	r1, r2
    cd0c:	d006      	beq.n	cd1c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    cd0e:	8862      	ldrh	r2, [r4, #2]
    cd10:	2afb      	cmp	r2, #251	; 0xfb
    cd12:	d300      	bcc.n	cd16 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    cd14:	22fb      	movs	r2, #251	; 0xfb
    cd16:	1d00      	adds	r0, r0, #4
    cd18:	f7ff fe13 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd1c:	78a0      	ldrb	r0, [r4, #2]
    cd1e:	1d00      	adds	r0, r0, #4
    cd20:	b2c0      	uxtb	r0, r0
    cd22:	bd10      	pop	{r4, pc}

0000cd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd28:	4604      	mov	r4, r0
    cd2a:	780f      	ldrb	r7, [r1, #0]
    cd2c:	2000      	movs	r0, #0
    cd2e:	250c      	movs	r5, #12
    cd30:	2605      	movs	r6, #5
    cd32:	223e      	movs	r2, #62	; 0x3e
    cd34:	23ff      	movs	r3, #255	; 0xff
    cd36:	2f1b      	cmp	r7, #27
    cd38:	d27d      	bcs.n	ce36 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    cd3a:	e8df f007 	tbb	[pc, r7]
    cd3e:	0eeb      	.short	0x0eeb
    cd40:	632d2725 	.word	0x632d2725
    cd44:	af9b816d 	.word	0xaf9b816d
    cd48:	e2c7bcb1 	.word	0xe2c7bcb1
    cd4c:	31ebebf5 	.word	0x31ebebf5
    cd50:	f2fed5d2 	.word	0xf2fed5d2
    cd54:	eeeff0f1 	.word	0xeeeff0f1
    cd58:	00ed      	.short	0x00ed
    cd5a:	7025      	strb	r5, [r4, #0]
    cd5c:	7908      	ldrb	r0, [r1, #4]
    cd5e:	70a0      	strb	r0, [r4, #2]
    cd60:	7948      	ldrb	r0, [r1, #5]
    cd62:	70e0      	strb	r0, [r4, #3]
    cd64:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cd68:	0a00      	lsrs	r0, r0, #8
    cd6a:	7120      	strb	r0, [r4, #4]
    cd6c:	79c8      	ldrb	r0, [r1, #7]
    cd6e:	7160      	strb	r0, [r4, #5]
    cd70:	7a08      	ldrb	r0, [r1, #8]
    cd72:	71a0      	strb	r0, [r4, #6]
    cd74:	8908      	ldrh	r0, [r1, #8]
    cd76:	0a00      	lsrs	r0, r0, #8
    cd78:	71e0      	strb	r0, [r4, #7]
    cd7a:	7a88      	ldrb	r0, [r1, #10]
    cd7c:	7220      	strb	r0, [r4, #8]
    cd7e:	8948      	ldrh	r0, [r1, #10]
    cd80:	0a00      	lsrs	r0, r0, #8
    cd82:	7260      	strb	r0, [r4, #9]
    cd84:	2008      	movs	r0, #8
    cd86:	e0c2      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd88:	2010      	movs	r0, #16
    cd8a:	e000      	b.n	cd8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    cd8c:	201a      	movs	r0, #26
    cd8e:	7020      	strb	r0, [r4, #0]
    cd90:	7908      	ldrb	r0, [r1, #4]
    cd92:	70a0      	strb	r0, [r4, #2]
    cd94:	2001      	movs	r0, #1
    cd96:	e0ba      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd98:	4620      	mov	r0, r4
    cd9a:	f000 f947 	bl	d02c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    cd9e:	e0b4      	b.n	cf0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    cda0:	7022      	strb	r2, [r4, #0]
    cda2:	200a      	movs	r0, #10
    cda4:	70a0      	strb	r0, [r4, #2]
    cda6:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    cdaa:	70e0      	strb	r0, [r4, #3]
    cdac:	7888      	ldrb	r0, [r1, #2]
    cdae:	7120      	strb	r0, [r4, #4]
    cdb0:	8848      	ldrh	r0, [r1, #2]
    cdb2:	0a00      	lsrs	r0, r0, #8
    cdb4:	7160      	strb	r0, [r4, #5]
    cdb6:	7908      	ldrb	r0, [r1, #4]
    cdb8:	71a0      	strb	r0, [r4, #6]
    cdba:	7948      	ldrb	r0, [r1, #5]
    cdbc:	71e0      	strb	r0, [r4, #7]
    cdbe:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cdc2:	60a0      	str	r0, [r4, #8]
    cdc4:	8948      	ldrh	r0, [r1, #10]
    cdc6:	81a0      	strh	r0, [r4, #12]
    cdc8:	68c8      	ldr	r0, [r1, #12]
    cdca:	f8c4 000e 	str.w	r0, [r4, #14]
    cdce:	8a08      	ldrh	r0, [r1, #16]
    cdd0:	8260      	strh	r0, [r4, #18]
    cdd2:	f8d1 0012 	ldr.w	r0, [r1, #18]
    cdd6:	6160      	str	r0, [r4, #20]
    cdd8:	8ac8      	ldrh	r0, [r1, #22]
    cdda:	8320      	strh	r0, [r4, #24]
    cddc:	7e08      	ldrb	r0, [r1, #24]
    cdde:	76a0      	strb	r0, [r4, #26]
    cde0:	8b08      	ldrh	r0, [r1, #24]
    cde2:	0a00      	lsrs	r0, r0, #8
    cde4:	76e0      	strb	r0, [r4, #27]
    cde6:	7e88      	ldrb	r0, [r1, #26]
    cde8:	7720      	strb	r0, [r4, #28]
    cdea:	8b48      	ldrh	r0, [r1, #26]
    cdec:	0a00      	lsrs	r0, r0, #8
    cdee:	7760      	strb	r0, [r4, #29]
    cdf0:	7f08      	ldrb	r0, [r1, #28]
    cdf2:	77a0      	strb	r0, [r4, #30]
    cdf4:	8b88      	ldrh	r0, [r1, #28]
    cdf6:	0a00      	lsrs	r0, r0, #8
    cdf8:	77e0      	strb	r0, [r4, #31]
    cdfa:	7f88      	ldrb	r0, [r1, #30]
    cdfc:	f884 0020 	strb.w	r0, [r4, #32]
    ce00:	201f      	movs	r0, #31
    ce02:	e084      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ce04:	7022      	strb	r2, [r4, #0]
    ce06:	2014      	movs	r0, #20
    ce08:	70a0      	strb	r0, [r4, #2]
    ce0a:	7908      	ldrb	r0, [r1, #4]
    ce0c:	70e0      	strb	r0, [r4, #3]
    ce0e:	8888      	ldrh	r0, [r1, #4]
    ce10:	0a00      	lsrs	r0, r0, #8
    ce12:	7120      	strb	r0, [r4, #4]
    ce14:	7988      	ldrb	r0, [r1, #6]
    ce16:	e0a8      	b.n	cf6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    ce18:	7022      	strb	r2, [r4, #0]
    ce1a:	2004      	movs	r0, #4
    ce1c:	70a0      	strb	r0, [r4, #2]
    ce1e:	7908      	ldrb	r0, [r1, #4]
    ce20:	70e0      	strb	r0, [r4, #3]
    ce22:	7988      	ldrb	r0, [r1, #6]
    ce24:	7120      	strb	r0, [r4, #4]
    ce26:	88c8      	ldrh	r0, [r1, #6]
    ce28:	0a00      	lsrs	r0, r0, #8
    ce2a:	7160      	strb	r0, [r4, #5]
    ce2c:	6888      	ldr	r0, [r1, #8]
    ce2e:	f8c4 0006 	str.w	r0, [r4, #6]
    ce32:	68c8      	ldr	r0, [r1, #12]
    ce34:	e000      	b.n	ce38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    ce36:	e06d      	b.n	cf14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    ce38:	f8c4 000a 	str.w	r0, [r4, #10]
    ce3c:	200c      	movs	r0, #12
    ce3e:	e066      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ce40:	7022      	strb	r2, [r4, #0]
    ce42:	2003      	movs	r0, #3
    ce44:	70a0      	strb	r0, [r4, #2]
    ce46:	7908      	ldrb	r0, [r1, #4]
    ce48:	70e0      	strb	r0, [r4, #3]
    ce4a:	7988      	ldrb	r0, [r1, #6]
    ce4c:	7120      	strb	r0, [r4, #4]
    ce4e:	88c8      	ldrh	r0, [r1, #6]
    ce50:	0a00      	lsrs	r0, r0, #8
    ce52:	7160      	strb	r0, [r4, #5]
    ce54:	7a08      	ldrb	r0, [r1, #8]
    ce56:	71a0      	strb	r0, [r4, #6]
    ce58:	8908      	ldrh	r0, [r1, #8]
    ce5a:	0a00      	lsrs	r0, r0, #8
    ce5c:	71e0      	strb	r0, [r4, #7]
    ce5e:	7a88      	ldrb	r0, [r1, #10]
    ce60:	7220      	strb	r0, [r4, #8]
    ce62:	8948      	ldrh	r0, [r1, #10]
    ce64:	0a00      	lsrs	r0, r0, #8
    ce66:	7260      	strb	r0, [r4, #9]
    ce68:	7b08      	ldrb	r0, [r1, #12]
    ce6a:	72a0      	strb	r0, [r4, #10]
    ce6c:	8988      	ldrh	r0, [r1, #12]
    ce6e:	0a00      	lsrs	r0, r0, #8
    ce70:	72e0      	strb	r0, [r4, #11]
    ce72:	e0d9      	b.n	d028 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    ce74:	7022      	strb	r2, [r4, #0]
    ce76:	70a6      	strb	r6, [r4, #2]
    ce78:	7908      	ldrb	r0, [r1, #4]
    ce7a:	70e0      	strb	r0, [r4, #3]
    ce7c:	8888      	ldrh	r0, [r1, #4]
    ce7e:	0a00      	lsrs	r0, r0, #8
    ce80:	7120      	strb	r0, [r4, #4]
    ce82:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ce86:	f8c4 0005 	str.w	r0, [r4, #5]
    ce8a:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ce8e:	f8c4 0009 	str.w	r0, [r4, #9]
    ce92:	89c8      	ldrh	r0, [r1, #14]
    ce94:	f8a4 000d 	strh.w	r0, [r4, #13]
    ce98:	200d      	movs	r0, #13
    ce9a:	e038      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ce9c:	2011      	movs	r0, #17
    ce9e:	e044      	b.n	cf2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    cea0:	7026      	strb	r6, [r4, #0]
    cea2:	7908      	ldrb	r0, [r1, #4]
    cea4:	70a0      	strb	r0, [r4, #2]
    cea6:	7948      	ldrb	r0, [r1, #5]
    cea8:	70e0      	strb	r0, [r4, #3]
    ceaa:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ceae:	0a00      	lsrs	r0, r0, #8
    ceb0:	7120      	strb	r0, [r4, #4]
    ceb2:	79c8      	ldrb	r0, [r1, #7]
    ceb4:	e059      	b.n	cf6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    ceb6:	2008      	movs	r0, #8
    ceb8:	7020      	strb	r0, [r4, #0]
    ceba:	7908      	ldrb	r0, [r1, #4]
    cebc:	70a0      	strb	r0, [r4, #2]
    cebe:	7988      	ldrb	r0, [r1, #6]
    cec0:	70e0      	strb	r0, [r4, #3]
    cec2:	88c8      	ldrh	r0, [r1, #6]
    cec4:	0a00      	lsrs	r0, r0, #8
    cec6:	7120      	strb	r0, [r4, #4]
    cec8:	7a08      	ldrb	r0, [r1, #8]
    ceca:	e04e      	b.n	cf6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    cecc:	2030      	movs	r0, #48	; 0x30
    cece:	7020      	strb	r0, [r4, #0]
    ced0:	7908      	ldrb	r0, [r1, #4]
    ced2:	70a0      	strb	r0, [r4, #2]
    ced4:	7988      	ldrb	r0, [r1, #6]
    ced6:	70e0      	strb	r0, [r4, #3]
    ced8:	88c8      	ldrh	r0, [r1, #6]
    ceda:	0a00      	lsrs	r0, r0, #8
    cedc:	7120      	strb	r0, [r4, #4]
    cede:	2003      	movs	r0, #3
    cee0:	e015      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cee2:	7022      	strb	r2, [r4, #0]
    cee4:	2007      	movs	r0, #7
    cee6:	e045      	b.n	cf74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    cee8:	7022      	strb	r2, [r4, #0]
    ceea:	70a5      	strb	r5, [r4, #2]
    ceec:	7908      	ldrb	r0, [r1, #4]
    ceee:	70e0      	strb	r0, [r4, #3]
    cef0:	7988      	ldrb	r0, [r1, #6]
    cef2:	7120      	strb	r0, [r4, #4]
    cef4:	88c8      	ldrh	r0, [r1, #6]
    cef6:	0a00      	lsrs	r0, r0, #8
    cef8:	7160      	strb	r0, [r4, #5]
    cefa:	7a08      	ldrb	r0, [r1, #8]
    cefc:	71a0      	strb	r0, [r4, #6]
    cefe:	7a48      	ldrb	r0, [r1, #9]
    cf00:	e028      	b.n	cf54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    cf02:	4620      	mov	r0, r4
    cf04:	1d09      	adds	r1, r1, #4
    cf06:	f7f7 fc57 	bl	47b8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    cf0a:	2800      	cmp	r0, #0
    cf0c:	d002      	beq.n	cf14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    cf0e:	7060      	strb	r0, [r4, #1]
    cf10:	1c80      	adds	r0, r0, #2
    cf12:	b2c0      	uxtb	r0, r0
    cf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf18:	e073      	b.n	d002 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    cf1a:	e047      	b.n	cfac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cf1c:	e028      	b.n	cf70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    cf1e:	e053      	b.n	cfc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    cf20:	e061      	b.n	cfe6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    cf22:	e01a      	b.n	cf5a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    cf24:	e009      	b.n	cf3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    cf26:	e7ff      	b.n	cf28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    cf28:	2057      	movs	r0, #87	; 0x57
    cf2a:	7020      	strb	r0, [r4, #0]
    cf2c:	7908      	ldrb	r0, [r1, #4]
    cf2e:	70a0      	strb	r0, [r4, #2]
    cf30:	8888      	ldrh	r0, [r1, #4]
    cf32:	0a00      	lsrs	r0, r0, #8
    cf34:	70e0      	strb	r0, [r4, #3]
    cf36:	2002      	movs	r0, #2
    cf38:	e7e9      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf3a:	7022      	strb	r2, [r4, #0]
    cf3c:	2012      	movs	r0, #18
    cf3e:	70a0      	strb	r0, [r4, #2]
    cf40:	7908      	ldrb	r0, [r1, #4]
    cf42:	70e0      	strb	r0, [r4, #3]
    cf44:	7948      	ldrb	r0, [r1, #5]
    cf46:	7120      	strb	r0, [r4, #4]
    cf48:	7988      	ldrb	r0, [r1, #6]
    cf4a:	7160      	strb	r0, [r4, #5]
    cf4c:	88c8      	ldrh	r0, [r1, #6]
    cf4e:	0a00      	lsrs	r0, r0, #8
    cf50:	71a0      	strb	r0, [r4, #6]
    cf52:	7a08      	ldrb	r0, [r1, #8]
    cf54:	71e0      	strb	r0, [r4, #7]
    cf56:	2006      	movs	r0, #6
    cf58:	e7d9      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf5a:	7023      	strb	r3, [r4, #0]
    cf5c:	20a1      	movs	r0, #161	; 0xa1
    cf5e:	70a0      	strb	r0, [r4, #2]
    cf60:	7908      	ldrb	r0, [r1, #4]
    cf62:	70e0      	strb	r0, [r4, #3]
    cf64:	7948      	ldrb	r0, [r1, #5]
    cf66:	7120      	strb	r0, [r4, #4]
    cf68:	2000      	movs	r0, #0
    cf6a:	7160      	strb	r0, [r4, #5]
    cf6c:	2004      	movs	r0, #4
    cf6e:	e7ce      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf70:	7023      	strb	r3, [r4, #0]
    cf72:	20a2      	movs	r0, #162	; 0xa2
    cf74:	70a0      	strb	r0, [r4, #2]
    cf76:	7908      	ldrb	r0, [r1, #4]
    cf78:	70e0      	strb	r0, [r4, #3]
    cf7a:	8888      	ldrh	r0, [r1, #4]
    cf7c:	0a00      	lsrs	r0, r0, #8
    cf7e:	7120      	strb	r0, [r4, #4]
    cf80:	7988      	ldrb	r0, [r1, #6]
    cf82:	7160      	strb	r0, [r4, #5]
    cf84:	88c8      	ldrh	r0, [r1, #6]
    cf86:	0a00      	lsrs	r0, r0, #8
    cf88:	71a0      	strb	r0, [r4, #6]
    cf8a:	7a08      	ldrb	r0, [r1, #8]
    cf8c:	71e0      	strb	r0, [r4, #7]
    cf8e:	8908      	ldrh	r0, [r1, #8]
    cf90:	0a00      	lsrs	r0, r0, #8
    cf92:	7220      	strb	r0, [r4, #8]
    cf94:	7a88      	ldrb	r0, [r1, #10]
    cf96:	7260      	strb	r0, [r4, #9]
    cf98:	8948      	ldrh	r0, [r1, #10]
    cf9a:	0a00      	lsrs	r0, r0, #8
    cf9c:	72a0      	strb	r0, [r4, #10]
    cf9e:	7b08      	ldrb	r0, [r1, #12]
    cfa0:	72e0      	strb	r0, [r4, #11]
    cfa2:	8988      	ldrh	r0, [r1, #12]
    cfa4:	0a00      	lsrs	r0, r0, #8
    cfa6:	7320      	strb	r0, [r4, #12]
    cfa8:	200b      	movs	r0, #11
    cfaa:	e7b0      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cfac:	7023      	strb	r3, [r4, #0]
    cfae:	20a3      	movs	r0, #163	; 0xa3
    cfb0:	70a0      	strb	r0, [r4, #2]
    cfb2:	7908      	ldrb	r0, [r1, #4]
    cfb4:	70e0      	strb	r0, [r4, #3]
    cfb6:	8888      	ldrh	r0, [r1, #4]
    cfb8:	0a00      	lsrs	r0, r0, #8
    cfba:	7120      	strb	r0, [r4, #4]
    cfbc:	7988      	ldrb	r0, [r1, #6]
    cfbe:	7160      	strb	r0, [r4, #5]
    cfc0:	79c8      	ldrb	r0, [r1, #7]
    cfc2:	71a0      	strb	r0, [r4, #6]
    cfc4:	2005      	movs	r0, #5
    cfc6:	e7a2      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cfc8:	7022      	strb	r2, [r4, #0]
    cfca:	2013      	movs	r0, #19
    cfcc:	70a0      	strb	r0, [r4, #2]
    cfce:	7908      	ldrb	r0, [r1, #4]
    cfd0:	70e0      	strb	r0, [r4, #3]
    cfd2:	7948      	ldrb	r0, [r1, #5]
    cfd4:	7120      	strb	r0, [r4, #4]
    cfd6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cfda:	f8c4 0005 	str.w	r0, [r4, #5]
    cfde:	8948      	ldrh	r0, [r1, #10]
    cfe0:	f8a4 0009 	strh.w	r0, [r4, #9]
    cfe4:	e020      	b.n	d028 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    cfe6:	7023      	strb	r3, [r4, #0]
    cfe8:	20a4      	movs	r0, #164	; 0xa4
    cfea:	70a0      	strb	r0, [r4, #2]
    cfec:	7908      	ldrb	r0, [r1, #4]
    cfee:	70e0      	strb	r0, [r4, #3]
    cff0:	8888      	ldrh	r0, [r1, #4]
    cff2:	0a00      	lsrs	r0, r0, #8
    cff4:	7120      	strb	r0, [r4, #4]
    cff6:	7988      	ldrb	r0, [r1, #6]
    cff8:	7160      	strb	r0, [r4, #5]
    cffa:	79c8      	ldrb	r0, [r1, #7]
    cffc:	71a0      	strb	r0, [r4, #6]
    cffe:	2007      	movs	r0, #7
    d000:	e785      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    d002:	7023      	strb	r3, [r4, #0]
    d004:	2080      	movs	r0, #128	; 0x80
    d006:	70a0      	strb	r0, [r4, #2]
    d008:	888a      	ldrh	r2, [r1, #4]
    d00a:	f8a4 2003 	strh.w	r2, [r4, #3]
    d00e:	88ca      	ldrh	r2, [r1, #6]
    d010:	f8a4 2005 	strh.w	r2, [r4, #5]
    d014:	7a0a      	ldrb	r2, [r1, #8]
    d016:	71e2      	strb	r2, [r4, #7]
    d018:	7a4a      	ldrb	r2, [r1, #9]
    d01a:	8122      	strh	r2, [r4, #8]
    d01c:	7a8a      	ldrb	r2, [r1, #10]
    d01e:	72a2      	strb	r2, [r4, #10]
    d020:	7ac9      	ldrb	r1, [r1, #11]
    d022:	f001 0101 	and.w	r1, r1, #1
    d026:	72e1      	strb	r1, [r4, #11]
    d028:	200a      	movs	r0, #10
    d02a:	e770      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000d02c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    d02c:	223e      	movs	r2, #62	; 0x3e
    d02e:	7002      	strb	r2, [r0, #0]
    d030:	2201      	movs	r2, #1
    d032:	7082      	strb	r2, [r0, #2]
    d034:	790a      	ldrb	r2, [r1, #4]
    d036:	70c2      	strb	r2, [r0, #3]
    d038:	798a      	ldrb	r2, [r1, #6]
    d03a:	7102      	strb	r2, [r0, #4]
    d03c:	88ca      	ldrh	r2, [r1, #6]
    d03e:	0a12      	lsrs	r2, r2, #8
    d040:	7142      	strb	r2, [r0, #5]
    d042:	7a0a      	ldrb	r2, [r1, #8]
    d044:	7182      	strb	r2, [r0, #6]
    d046:	7a4a      	ldrb	r2, [r1, #9]
    d048:	71c2      	strb	r2, [r0, #7]
    d04a:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d04e:	6082      	str	r2, [r0, #8]
    d050:	89ca      	ldrh	r2, [r1, #14]
    d052:	8182      	strh	r2, [r0, #12]
    d054:	7c0a      	ldrb	r2, [r1, #16]
    d056:	7382      	strb	r2, [r0, #14]
    d058:	8a0a      	ldrh	r2, [r1, #16]
    d05a:	0a12      	lsrs	r2, r2, #8
    d05c:	73c2      	strb	r2, [r0, #15]
    d05e:	7c8a      	ldrb	r2, [r1, #18]
    d060:	7402      	strb	r2, [r0, #16]
    d062:	8a4a      	ldrh	r2, [r1, #18]
    d064:	0a12      	lsrs	r2, r2, #8
    d066:	7442      	strb	r2, [r0, #17]
    d068:	7d0a      	ldrb	r2, [r1, #20]
    d06a:	7482      	strb	r2, [r0, #18]
    d06c:	8a8a      	ldrh	r2, [r1, #20]
    d06e:	0a12      	lsrs	r2, r2, #8
    d070:	74c2      	strb	r2, [r0, #19]
    d072:	7d89      	ldrb	r1, [r1, #22]
    d074:	7501      	strb	r1, [r0, #20]
    d076:	2013      	movs	r0, #19
    d078:	4770      	bx	lr

0000d07a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d07a:	223e      	movs	r2, #62	; 0x3e
    d07c:	7002      	strb	r2, [r0, #0]
    d07e:	2201      	movs	r2, #1
    d080:	7082      	strb	r2, [r0, #2]
    d082:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d086:	70c2      	strb	r2, [r0, #3]
    d088:	788a      	ldrb	r2, [r1, #2]
    d08a:	7102      	strb	r2, [r0, #4]
    d08c:	884a      	ldrh	r2, [r1, #2]
    d08e:	0a12      	lsrs	r2, r2, #8
    d090:	7142      	strb	r2, [r0, #5]
    d092:	790a      	ldrb	r2, [r1, #4]
    d094:	7182      	strb	r2, [r0, #6]
    d096:	794a      	ldrb	r2, [r1, #5]
    d098:	71c2      	strb	r2, [r0, #7]
    d09a:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d09e:	6082      	str	r2, [r0, #8]
    d0a0:	894a      	ldrh	r2, [r1, #10]
    d0a2:	8182      	strh	r2, [r0, #12]
    d0a4:	7e0a      	ldrb	r2, [r1, #24]
    d0a6:	7382      	strb	r2, [r0, #14]
    d0a8:	8b0a      	ldrh	r2, [r1, #24]
    d0aa:	0a12      	lsrs	r2, r2, #8
    d0ac:	73c2      	strb	r2, [r0, #15]
    d0ae:	7e8a      	ldrb	r2, [r1, #26]
    d0b0:	7402      	strb	r2, [r0, #16]
    d0b2:	8b4a      	ldrh	r2, [r1, #26]
    d0b4:	0a12      	lsrs	r2, r2, #8
    d0b6:	7442      	strb	r2, [r0, #17]
    d0b8:	7f0a      	ldrb	r2, [r1, #28]
    d0ba:	7482      	strb	r2, [r0, #18]
    d0bc:	8b8a      	ldrh	r2, [r1, #28]
    d0be:	0a12      	lsrs	r2, r2, #8
    d0c0:	74c2      	strb	r2, [r0, #19]
    d0c2:	7f89      	ldrb	r1, [r1, #30]
    d0c4:	7501      	strb	r1, [r0, #20]
    d0c6:	2113      	movs	r1, #19
    d0c8:	7041      	strb	r1, [r0, #1]
    d0ca:	4608      	mov	r0, r1
    d0cc:	4770      	bx	lr

0000d0ce <sdc_hci_data_get>:
    d0ce:	b510      	push	{r4, lr}
    d0d0:	b120      	cbz	r0, d0dc <sdc_hci_data_get+0xe>
    d0d2:	f7ff fda3 	bl	cc1c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d0d6:	b120      	cbz	r0, d0e2 <sdc_hci_data_get+0x14>
    d0d8:	2000      	movs	r0, #0
    d0da:	bd10      	pop	{r4, pc}
    d0dc:	f06f 0015 	mvn.w	r0, #21
    d0e0:	bd10      	pop	{r4, pc}
    d0e2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d0e6:	bd10      	pop	{r4, pc}

0000d0e8 <sdc_hci_data_put>:
    d0e8:	b510      	push	{r4, lr}
    d0ea:	f06f 0415 	mvn.w	r4, #21
    d0ee:	b120      	cbz	r0, d0fa <sdc_hci_data_put+0x12>
    d0f0:	f7ff fda2 	bl	cc38 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d0f4:	b108      	cbz	r0, d0fa <sdc_hci_data_put+0x12>
    d0f6:	2000      	movs	r0, #0
    d0f8:	bd10      	pop	{r4, pc}
    d0fa:	4620      	mov	r0, r4
    d0fc:	bd10      	pop	{r4, pc}

0000d0fe <sdc_hci_evt_get>:
    d0fe:	b510      	push	{r4, lr}
    d100:	b120      	cbz	r0, d10c <sdc_hci_evt_get+0xe>
    d102:	f7ff fda2 	bl	cc4a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d106:	b120      	cbz	r0, d112 <sdc_hci_evt_get+0x14>
    d108:	2000      	movs	r0, #0
    d10a:	bd10      	pop	{r4, pc}
    d10c:	f06f 0015 	mvn.w	r0, #21
    d110:	bd10      	pop	{r4, pc}
    d112:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d116:	bd10      	pop	{r4, pc}

0000d118 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d118:	f002 baed 	b.w	f6f6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d11c <sdc_hci_cmd_cb_read_transmit_power_level>:
    d11c:	f002 bb2f 	b.w	f77e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d120 <sdc_hci_cmd_cb_set_event_mask>:
    d120:	b510      	push	{r4, lr}
    d122:	f7f7 fba7 	bl	4874 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d126:	2000      	movs	r0, #0
    d128:	bd10      	pop	{r4, pc}

0000d12a <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d12a:	b510      	push	{r4, lr}
    d12c:	f7f7 fbb0 	bl	4890 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d130:	2000      	movs	r0, #0
    d132:	bd10      	pop	{r4, pc}

0000d134 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d134:	f002 bb3f 	b.w	f7b6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d138 <sdc_hci_cmd_vs_conn_event_extend>:
    d138:	b508      	push	{r3, lr}
    d13a:	7800      	ldrb	r0, [r0, #0]
    d13c:	f88d 0000 	strb.w	r0, [sp]
    d140:	4668      	mov	r0, sp
    d142:	f002 fa6e 	bl	f622 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d146:	bd08      	pop	{r3, pc}

0000d148 <sdc_hci_cmd_vs_conn_update>:
    d148:	2001      	movs	r0, #1
    d14a:	4770      	bx	lr

0000d14c <sdc_hci_cmd_vs_event_length_set>:
    d14c:	f7fd bbea 	b.w	a924 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d150 <sdc_hci_cmd_vs_llpm_mode_set>:
    d150:	2001      	movs	r0, #1
    d152:	4770      	bx	lr

0000d154 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d154:	7800      	ldrb	r0, [r0, #0]
    d156:	b100      	cbz	r0, d15a <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d158:	2001      	movs	r0, #1
    d15a:	f002 ba2e 	b.w	f5ba <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d15e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d15e:	b570      	push	{r4, r5, r6, lr}
    d160:	4605      	mov	r5, r0
    d162:	2210      	movs	r2, #16
    d164:	2100      	movs	r1, #0
    d166:	f7ff fc66 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d16a:	2210      	movs	r2, #16
    d16c:	2100      	movs	r1, #0
    d16e:	f105 0010 	add.w	r0, r5, #16
    d172:	f7ff fc60 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d176:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d17a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d17e:	1c40      	adds	r0, r0, #1
    d180:	d10b      	bne.n	d19a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d182:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d186:	1c40      	adds	r0, r0, #1
    d188:	d107      	bne.n	d19a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d18a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d18e:	1c40      	adds	r0, r0, #1
    d190:	d103      	bne.n	d19a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d192:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d196:	1c40      	adds	r0, r0, #1
    d198:	d00b      	beq.n	d1b2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d19a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d19e:	6128      	str	r0, [r5, #16]
    d1a0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d1a4:	6168      	str	r0, [r5, #20]
    d1a6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d1aa:	61a8      	str	r0, [r5, #24]
    d1ac:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d1b0:	61e8      	str	r0, [r5, #28]
    d1b2:	2000      	movs	r0, #0
    d1b4:	f7f8 f85c 	bl	5270 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d1b8:	b918      	cbnz	r0, d1c2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d1ba:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d1be:	07c0      	lsls	r0, r0, #31
    d1c0:	d118      	bne.n	d1f4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1c2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d1c6:	1c40      	adds	r0, r0, #1
    d1c8:	d10b      	bne.n	d1e2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1ca:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d1ce:	1c40      	adds	r0, r0, #1
    d1d0:	d107      	bne.n	d1e2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1d2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d1d6:	1c40      	adds	r0, r0, #1
    d1d8:	d103      	bne.n	d1e2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1da:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d1de:	1c40      	adds	r0, r0, #1
    d1e0:	d008      	beq.n	d1f4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1e2:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d1e6:	6028      	str	r0, [r5, #0]
    d1e8:	6860      	ldr	r0, [r4, #4]
    d1ea:	6068      	str	r0, [r5, #4]
    d1ec:	68a0      	ldr	r0, [r4, #8]
    d1ee:	60a8      	str	r0, [r5, #8]
    d1f0:	68e0      	ldr	r0, [r4, #12]
    d1f2:	60e8      	str	r0, [r5, #12]
    d1f4:	2000      	movs	r0, #0
    d1f6:	bd70      	pop	{r4, r5, r6, pc}

0000d1f8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d1f8:	b570      	push	{r4, r5, r6, lr}
    d1fa:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d1fe:	4604      	mov	r4, r0
    d200:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d204:	1c40      	adds	r0, r0, #1
    d206:	d105      	bne.n	d214 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d208:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d20c:	43c0      	mvns	r0, r0
    d20e:	0400      	lsls	r0, r0, #16
    d210:	0c00      	lsrs	r0, r0, #16
    d212:	d03a      	beq.n	d28a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    d214:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d218:	07c0      	lsls	r0, r0, #31
    d21a:	d036      	beq.n	d28a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    d21c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d220:	f8c4 0001 	str.w	r0, [r4, #1]
    d224:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d228:	f8a4 0005 	strh.w	r0, [r4, #5]
    d22c:	79a0      	ldrb	r0, [r4, #6]
    d22e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d232:	71a0      	strb	r0, [r4, #6]
    d234:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d238:	1c40      	adds	r0, r0, #1
    d23a:	d00f      	beq.n	d25c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    d23c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d240:	1c40      	adds	r0, r0, #1
    d242:	d00b      	beq.n	d25c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    d244:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d248:	1c40      	adds	r0, r0, #1
    d24a:	d007      	beq.n	d25c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    d24c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d250:	1c40      	adds	r0, r0, #1
    d252:	d003      	beq.n	d25c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    d254:	2000      	movs	r0, #0
    d256:	f7f8 f80b 	bl	5270 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d25a:	b140      	cbz	r0, d26e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d25c:	2210      	movs	r2, #16
    d25e:	2100      	movs	r1, #0
    d260:	1de0      	adds	r0, r4, #7
    d262:	f7ff fbe8 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d266:	2001      	movs	r0, #1
    d268:	7020      	strb	r0, [r4, #0]
    d26a:	2000      	movs	r0, #0
    d26c:	bd70      	pop	{r4, r5, r6, pc}
    d26e:	f855 0f90 	ldr.w	r0, [r5, #144]!
    d272:	f8c4 0007 	str.w	r0, [r4, #7]
    d276:	6868      	ldr	r0, [r5, #4]
    d278:	f8c4 000b 	str.w	r0, [r4, #11]
    d27c:	68a8      	ldr	r0, [r5, #8]
    d27e:	f8c4 000f 	str.w	r0, [r4, #15]
    d282:	68e8      	ldr	r0, [r5, #12]
    d284:	f8c4 0013 	str.w	r0, [r4, #19]
    d288:	e7ed      	b.n	d266 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    d28a:	2000      	movs	r0, #0
    d28c:	e7ec      	b.n	d268 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000d28e <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d28e:	f002 b9ae 	b.w	f5ee <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d292 <sdc_hci_cmd_ip_read_bd_addr>:
    d292:	f002 ba41 	b.w	f718 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d296 <sdc_hci_cmd_ip_read_local_version_information>:
    d296:	f7fd bb53 	b.w	a940 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d29a <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d29a:	f001 be99 	b.w	efd0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d29e <sdc_hci_cmd_le_add_device_to_white_list>:
    d29e:	f001 beb2 	b.w	f006 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d2a2 <sdc_hci_cmd_le_clear_resolving_list>:
    d2a2:	f001 bec7 	b.w	f034 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d2a6 <sdc_hci_cmd_le_clear_white_list>:
    d2a6:	f001 bed2 	b.w	f04e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d2aa <sdc_hci_cmd_le_encrypt>:
    d2aa:	f001 beda 	b.w	f062 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d2ae <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d2ae:	8802      	ldrh	r2, [r0, #0]
    d2b0:	800a      	strh	r2, [r1, #0]
    d2b2:	f001 bedf 	b.w	f074 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d2b6 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d2b6:	8802      	ldrh	r2, [r0, #0]
    d2b8:	800a      	strh	r2, [r1, #0]
    d2ba:	f001 bef4 	b.w	f0a6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d2be <sdc_hci_cmd_le_rand>:
    d2be:	f001 bf1c 	b.w	f0fa <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d2c2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d2c2:	f001 bf20 	b.w	f106 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d2c6 <sdc_hci_cmd_le_read_buffer_size>:
    d2c6:	f7fd ba35 	b.w	a734 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d2ca <sdc_hci_cmd_le_read_channel_map>:
    d2ca:	f001 bf2d 	b.w	f128 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d2ce <sdc_hci_cmd_le_read_max_data_length>:
    d2ce:	f001 bf4c 	b.w	f16a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d2d2 <sdc_hci_cmd_le_read_phy>:
    d2d2:	f7fd ba39 	b.w	a748 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d2d6 <sdc_hci_cmd_le_read_remote_features>:
    d2d6:	f7fd ba5f 	b.w	a798 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d2da <sdc_hci_cmd_le_read_resolving_list_size>:
    d2da:	f001 bf56 	b.w	f18a <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d2de <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d2de:	f7fd ba7b 	b.w	a7d8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d2e2 <sdc_hci_cmd_le_read_transmit_power>:
    d2e2:	f001 bf56 	b.w	f192 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d2e6 <sdc_hci_cmd_le_read_white_list_size>:
    d2e6:	f001 bf5d 	b.w	f1a4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d2ea <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d2ea:	f001 bf5f 	b.w	f1ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d2ee <sdc_hci_cmd_le_remove_device_from_white_list>:
    d2ee:	f001 bf76 	b.w	f1de <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d2f2 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d2f2:	f001 bf89 	b.w	f208 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d2f6 <sdc_hci_cmd_le_set_adv_data>:
    d2f6:	f001 bf95 	b.w	f224 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d2fa <sdc_hci_cmd_le_set_adv_enable>:
    d2fa:	f001 bfc9 	b.w	f290 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d2fe <sdc_hci_cmd_le_set_adv_params>:
    d2fe:	f002 b801 	b.w	f304 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d302 <sdc_hci_cmd_le_set_data_length>:
    d302:	f002 b897 	b.w	f434 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d306 <sdc_hci_cmd_le_set_default_phy>:
    d306:	f7fd ba77 	b.w	a7f8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d30a <sdc_hci_cmd_le_set_event_mask>:
    d30a:	b510      	push	{r4, lr}
    d30c:	f7f7 faac 	bl	4868 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d310:	2000      	movs	r0, #0
    d312:	bd10      	pop	{r4, pc}

0000d314 <sdc_hci_cmd_le_set_phy>:
    d314:	f002 b8b5 	b.w	f482 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d318 <sdc_hci_cmd_le_set_privacy_mode>:
    d318:	f002 b8d3 	b.w	f4c2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d31c <sdc_hci_cmd_le_set_random_address>:
    d31c:	f002 b8e7 	b.w	f4ee <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d320 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d320:	f002 b8f3 	b.w	f50a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d324 <sdc_hci_cmd_le_set_scan_response_data>:
    d324:	f002 b8fa 	b.w	f51c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d328 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d328:	f002 b930 	b.w	f58c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d32c <sdc_hci_cmd_lc_disconnect>:
    d32c:	f001 be00 	b.w	ef30 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d330 <sdc_hci_cmd_lc_read_remote_version_information>:
    d330:	f002 b9fe 	b.w	f730 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d334:	b570      	push	{r4, r5, r6, lr}
    d336:	880b      	ldrh	r3, [r1, #0]
    d338:	7f04      	ldrb	r4, [r0, #28]
    d33a:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d33e:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d342:	8802      	ldrh	r2, [r0, #0]
    d344:	4435      	add	r5, r6
    d346:	1da4      	adds	r4, r4, #6
    d348:	882d      	ldrh	r5, [r5, #0]
    d34a:	4422      	add	r2, r4
    d34c:	b292      	uxth	r2, r2
    d34e:	4425      	add	r5, r4
    d350:	1e54      	subs	r4, r2, #1
    d352:	442c      	add	r4, r5
    d354:	fb94 f4f2 	sdiv	r4, r4, r2
    d358:	fb02 6204 	mla	r2, r2, r4, r6
    d35c:	8840      	ldrh	r0, [r0, #2]
    d35e:	b292      	uxth	r2, r2
    d360:	4290      	cmp	r0, r2
    d362:	d903      	bls.n	d36c <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d364:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d368:	4310      	orrs	r0, r2
    d36a:	e002      	b.n	d372 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d36c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d370:	4398      	bics	r0, r3
    d372:	8008      	strh	r0, [r1, #0]
    d374:	bd70      	pop	{r4, r5, r6, pc}
    d376:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d37a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d37e:	429a      	cmp	r2, r3
    d380:	d107      	bne.n	d392 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d382:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d386:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d38a:	4288      	cmp	r0, r1
    d38c:	d001      	beq.n	d392 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d38e:	2001      	movs	r0, #1
    d390:	4770      	bx	lr
    d392:	2000      	movs	r0, #0
    d394:	4770      	bx	lr

0000d396 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d396:	b570      	push	{r4, r5, r6, lr}
    d398:	7f00      	ldrb	r0, [r0, #28]
    d39a:	461c      	mov	r4, r3
    d39c:	1d80      	adds	r0, r0, #6
    d39e:	4408      	add	r0, r1
    d3a0:	4613      	mov	r3, r2
    d3a2:	8809      	ldrh	r1, [r1, #0]
    d3a4:	9a04      	ldr	r2, [sp, #16]
    d3a6:	1cc9      	adds	r1, r1, #3
    d3a8:	b289      	uxth	r1, r1
    d3aa:	1915      	adds	r5, r2, r4
    d3ac:	1ec0      	subs	r0, r0, #3
    d3ae:	428d      	cmp	r5, r1
    d3b0:	d805      	bhi.n	d3be <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d3b2:	1881      	adds	r1, r0, r2
    d3b4:	4622      	mov	r2, r4
    d3b6:	4618      	mov	r0, r3
    d3b8:	f7ff fac3 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3bc:	e000      	b.n	d3c0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d3be:	2400      	movs	r4, #0
    d3c0:	4620      	mov	r0, r4
    d3c2:	bd70      	pop	{r4, r5, r6, pc}

0000d3c4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d3c4:	b570      	push	{r4, r5, r6, lr}
    d3c6:	7f00      	ldrb	r0, [r0, #28]
    d3c8:	461c      	mov	r4, r3
    d3ca:	1d80      	adds	r0, r0, #6
    d3cc:	4408      	add	r0, r1
    d3ce:	4613      	mov	r3, r2
    d3d0:	8809      	ldrh	r1, [r1, #0]
    d3d2:	9a04      	ldr	r2, [sp, #16]
    d3d4:	1cc9      	adds	r1, r1, #3
    d3d6:	b289      	uxth	r1, r1
    d3d8:	1915      	adds	r5, r2, r4
    d3da:	1ec0      	subs	r0, r0, #3
    d3dc:	428d      	cmp	r5, r1
    d3de:	d805      	bhi.n	d3ec <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d3e0:	4410      	add	r0, r2
    d3e2:	4622      	mov	r2, r4
    d3e4:	4619      	mov	r1, r3
    d3e6:	f7ff faac 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3ea:	e000      	b.n	d3ee <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d3ec:	2400      	movs	r4, #0
    d3ee:	4620      	mov	r0, r4
    d3f0:	bd70      	pop	{r4, r5, r6, pc}

0000d3f2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d3f2:	8881      	ldrh	r1, [r0, #4]
    d3f4:	88c0      	ldrh	r0, [r0, #6]
    d3f6:	4288      	cmp	r0, r1
    d3f8:	d101      	bne.n	d3fe <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d3fa:	2001      	movs	r0, #1
    d3fc:	4770      	bx	lr
    d3fe:	2000      	movs	r0, #0
    d400:	4770      	bx	lr

0000d402 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d402:	8881      	ldrh	r1, [r0, #4]
    d404:	8900      	ldrh	r0, [r0, #8]
    d406:	4288      	cmp	r0, r1
    d408:	d101      	bne.n	d40e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d40a:	2001      	movs	r0, #1
    d40c:	4770      	bx	lr
    d40e:	2000      	movs	r0, #0
    d410:	4770      	bx	lr

0000d412 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d412:	b570      	push	{r4, r5, r6, lr}
    d414:	4604      	mov	r4, r0
    d416:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d41a:	8880      	ldrh	r0, [r0, #4]
    d41c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d420:	4401      	add	r1, r0
    d422:	8a20      	ldrh	r0, [r4, #16]
    d424:	2800      	cmp	r0, #0
    d426:	d01a      	beq.n	d45e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d428:	89a2      	ldrh	r2, [r4, #12]
    d42a:	2500      	movs	r5, #0
    d42c:	4410      	add	r0, r2
    d42e:	b280      	uxth	r0, r0
    d430:	81a0      	strh	r0, [r4, #12]
    d432:	880a      	ldrh	r2, [r1, #0]
    d434:	4290      	cmp	r0, r2
    d436:	d905      	bls.n	d444 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d438:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    d43c:	f04f 0014 	mov.w	r0, #20
    d440:	f7f7 f87c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d444:	d109      	bne.n	d45a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d446:	69a0      	ldr	r0, [r4, #24]
    d448:	b108      	cbz	r0, d44e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d44a:	7f40      	ldrb	r0, [r0, #29]
    d44c:	7088      	strb	r0, [r1, #2]
    d44e:	f104 0104 	add.w	r1, r4, #4
    d452:	4620      	mov	r0, r4
    d454:	f7ff ff6e 	bl	d334 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d458:	81a5      	strh	r5, [r4, #12]
    d45a:	8225      	strh	r5, [r4, #16]
    d45c:	2001      	movs	r0, #1
    d45e:	bd70      	pop	{r4, r5, r6, pc}

0000d460 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d464:	4604      	mov	r4, r0
    d466:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d46a:	88c0      	ldrh	r0, [r0, #6]
    d46c:	460e      	mov	r6, r1
    d46e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d472:	8a60      	ldrh	r0, [r4, #18]
    d474:	19d9      	adds	r1, r3, r7
    d476:	b108      	cbz	r0, d47c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d478:	42b0      	cmp	r0, r6
    d47a:	d202      	bcs.n	d482 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d47c:	2000      	movs	r0, #0
    d47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d482:	89e0      	ldrh	r0, [r4, #14]
    d484:	2500      	movs	r5, #0
    d486:	b140      	cbz	r0, d49a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d488:	f8b1 c000 	ldrh.w	ip, [r1]
    d48c:	4560      	cmp	r0, ip
    d48e:	d008      	beq.n	d4a2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    d490:	f240 211f 	movw	r1, #543	; 0x21f
    d494:	2014      	movs	r0, #20
    d496:	f7f7 f851 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d49a:	7f60      	ldrb	r0, [r4, #29]
    d49c:	7088      	strb	r0, [r1, #2]
    d49e:	800d      	strh	r5, [r1, #0]
    d4a0:	e00e      	b.n	d4c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    d4a2:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d4a6:	4418      	add	r0, r3
    d4a8:	f10c 0c06 	add.w	ip, ip, #6
    d4ac:	44bc      	add	ip, r7
    d4ae:	4460      	add	r0, ip
    d4b0:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d4b4:	f820 cc03 	strh.w	ip, [r0, #-3]
    d4b8:	f894 c020 	ldrb.w	ip, [r4, #32]
    d4bc:	f800 cc01 	strb.w	ip, [r0, #-1]
    d4c0:	89e0      	ldrh	r0, [r4, #14]
    d4c2:	4430      	add	r0, r6
    d4c4:	81e0      	strh	r0, [r4, #14]
    d4c6:	8808      	ldrh	r0, [r1, #0]
    d4c8:	4430      	add	r0, r6
    d4ca:	8008      	strh	r0, [r1, #0]
    d4cc:	b16a      	cbz	r2, d4ea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    d4ce:	1da1      	adds	r1, r4, #6
    d4d0:	4620      	mov	r0, r4
    d4d2:	f7ff ff2f 	bl	d334 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4d6:	81e5      	strh	r5, [r4, #14]
    d4d8:	7f60      	ldrb	r0, [r4, #29]
    d4da:	1c40      	adds	r0, r0, #1
    d4dc:	7760      	strb	r0, [r4, #29]
    d4de:	7da0      	ldrb	r0, [r4, #22]
    d4e0:	b108      	cbz	r0, d4e6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    d4e2:	88e0      	ldrh	r0, [r4, #6]
    d4e4:	82a0      	strh	r0, [r4, #20]
    d4e6:	75a5      	strb	r5, [r4, #22]
    d4e8:	e00b      	b.n	d502 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    d4ea:	7f20      	ldrb	r0, [r4, #28]
    d4ec:	89e1      	ldrh	r1, [r4, #14]
    d4ee:	1d80      	adds	r0, r0, #6
    d4f0:	4438      	add	r0, r7
    d4f2:	4419      	add	r1, r3
    d4f4:	4408      	add	r0, r1
    d4f6:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d4fa:	83e1      	strh	r1, [r4, #30]
    d4fc:	7880      	ldrb	r0, [r0, #2]
    d4fe:	f884 0020 	strb.w	r0, [r4, #32]
    d502:	8265      	strh	r5, [r4, #18]
    d504:	75e5      	strb	r5, [r4, #23]
    d506:	2001      	movs	r0, #1
    d508:	e7b9      	b.n	d47e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d50a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d50a:	b510      	push	{r4, lr}
    d50c:	4604      	mov	r4, r0
    d50e:	88c0      	ldrh	r0, [r0, #6]
    d510:	88a1      	ldrh	r1, [r4, #4]
    d512:	4281      	cmp	r1, r0
    d514:	d007      	beq.n	d526 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d516:	89a0      	ldrh	r0, [r4, #12]
    d518:	b928      	cbnz	r0, d526 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d51a:	8a20      	ldrh	r0, [r4, #16]
    d51c:	b918      	cbnz	r0, d526 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d51e:	88a0      	ldrh	r0, [r4, #4]
    d520:	8aa1      	ldrh	r1, [r4, #20]
    d522:	4288      	cmp	r0, r1
    d524:	d101      	bne.n	d52a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d526:	2000      	movs	r0, #0
    d528:	bd10      	pop	{r4, pc}
    d52a:	1d21      	adds	r1, r4, #4
    d52c:	4620      	mov	r0, r4
    d52e:	f7ff ff01 	bl	d334 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d532:	2000      	movs	r0, #0
    d534:	8220      	strh	r0, [r4, #16]
    d536:	2001      	movs	r0, #1
    d538:	bd10      	pop	{r4, pc}

0000d53a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d53a:	b510      	push	{r4, lr}
    d53c:	4604      	mov	r4, r0
    d53e:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d542:	88c0      	ldrh	r0, [r0, #6]
    d544:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d548:	4402      	add	r2, r0
    d54a:	8820      	ldrh	r0, [r4, #0]
    d54c:	2845      	cmp	r0, #69	; 0x45
    d54e:	d200      	bcs.n	d552 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d550:	2045      	movs	r0, #69	; 0x45
    d552:	4288      	cmp	r0, r1
    d554:	d204      	bcs.n	d560 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d556:	f44f 7180 	mov.w	r1, #256	; 0x100
    d55a:	2014      	movs	r0, #20
    d55c:	f7f6 ffee 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d560:	7de0      	ldrb	r0, [r4, #23]
    d562:	2800      	cmp	r0, #0
    d564:	d003      	beq.n	d56e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d566:	8810      	ldrh	r0, [r2, #0]
    d568:	4288      	cmp	r0, r1
    d56a:	d201      	bcs.n	d570 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d56c:	2000      	movs	r0, #0
    d56e:	bd10      	pop	{r4, pc}
    d570:	8011      	strh	r1, [r2, #0]
    d572:	1da1      	adds	r1, r4, #6
    d574:	4620      	mov	r0, r4
    d576:	f7ff fedd 	bl	d334 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d57a:	2000      	movs	r0, #0
    d57c:	75e0      	strb	r0, [r4, #23]
    d57e:	2001      	movs	r0, #1
    d580:	bd10      	pop	{r4, pc}

0000d582 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d586:	8941      	ldrh	r1, [r0, #10]
    d588:	8886      	ldrh	r6, [r0, #4]
    d58a:	4604      	mov	r4, r0
    d58c:	2500      	movs	r5, #0
    d58e:	f100 070a 	add.w	r7, r0, #10
    d592:	e006      	b.n	d5a2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d594:	4639      	mov	r1, r7
    d596:	4620      	mov	r0, r4
    d598:	f7ff fecc 	bl	d334 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d59c:	1c6d      	adds	r5, r5, #1
    d59e:	8961      	ldrh	r1, [r4, #10]
    d5a0:	b2ad      	uxth	r5, r5
    d5a2:	42b1      	cmp	r1, r6
    d5a4:	d1f6      	bne.n	d594 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d5a6:	4628      	mov	r0, r5
    d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5ac <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d5ac:	b530      	push	{r4, r5, lr}
    d5ae:	88c4      	ldrh	r4, [r0, #6]
    d5b0:	8881      	ldrh	r1, [r0, #4]
    d5b2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d5b6:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d5ba:	4413      	add	r3, r2
    d5bc:	8882      	ldrh	r2, [r0, #4]
    d5be:	8a85      	ldrh	r5, [r0, #20]
    d5c0:	42aa      	cmp	r2, r5
    d5c2:	d012      	beq.n	d5ea <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5c4:	42a1      	cmp	r1, r4
    d5c6:	d010      	beq.n	d5ea <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5c8:	8981      	ldrh	r1, [r0, #12]
    d5ca:	b971      	cbnz	r1, d5ea <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5cc:	6982      	ldr	r2, [r0, #24]
    d5ce:	b172      	cbz	r2, d5ee <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5d0:	4610      	mov	r0, r2
    d5d2:	f7ff ff16 	bl	d402 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d5d6:	b950      	cbnz	r0, d5ee <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5d8:	8910      	ldrh	r0, [r2, #8]
    d5da:	3224      	adds	r2, #36	; 0x24
    d5dc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d5e0:	4410      	add	r0, r2
    d5e2:	7899      	ldrb	r1, [r3, #2]
    d5e4:	7880      	ldrb	r0, [r0, #2]
    d5e6:	4288      	cmp	r0, r1
    d5e8:	d101      	bne.n	d5ee <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5ea:	2000      	movs	r0, #0
    d5ec:	bd30      	pop	{r4, r5, pc}
    d5ee:	4618      	mov	r0, r3
    d5f0:	bd30      	pop	{r4, r5, pc}

0000d5f2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d5f2:	7f00      	ldrb	r0, [r0, #28]
    d5f4:	1d80      	adds	r0, r0, #6
    d5f6:	4408      	add	r0, r1
    d5f8:	1ec0      	subs	r0, r0, #3
    d5fa:	6010      	str	r0, [r2, #0]
    d5fc:	8808      	ldrh	r0, [r1, #0]
    d5fe:	4770      	bx	lr

0000d600 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d604:	460e      	mov	r6, r1
    d606:	88c1      	ldrh	r1, [r0, #6]
    d608:	8902      	ldrh	r2, [r0, #8]
    d60a:	4604      	mov	r4, r0
    d60c:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d610:	8800      	ldrh	r0, [r0, #0]
    d612:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d616:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d61a:	2845      	cmp	r0, #69	; 0x45
    d61c:	d200      	bcs.n	d620 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d61e:	2045      	movs	r0, #69	; 0x45
    d620:	42b0      	cmp	r0, r6
    d622:	d203      	bcs.n	d62c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d624:	21c2      	movs	r1, #194	; 0xc2
    d626:	2014      	movs	r0, #20
    d628:	f7f6 ff88 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d62c:	4610      	mov	r0, r2
    d62e:	f7ff fea2 	bl	d376 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d632:	b110      	cbz	r0, d63a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d634:	2000      	movs	r0, #0
    d636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d63a:	42af      	cmp	r7, r5
    d63c:	d908      	bls.n	d650 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d63e:	7f21      	ldrb	r1, [r4, #28]
    d640:	1b78      	subs	r0, r7, r5
    d642:	1a40      	subs	r0, r0, r1
    d644:	1f80      	subs	r0, r0, #6
    d646:	4286      	cmp	r6, r0
    d648:	dd02      	ble.n	d650 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d64a:	2000      	movs	r0, #0
    d64c:	75e0      	strb	r0, [r4, #23]
    d64e:	e7f1      	b.n	d634 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d650:	eb08 0005 	add.w	r0, r8, r5
    d654:	2101      	movs	r1, #1
    d656:	8006      	strh	r6, [r0, #0]
    d658:	75e1      	strb	r1, [r4, #23]
    d65a:	e7ec      	b.n	d636 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d65c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d65c:	b538      	push	{r3, r4, r5, lr}
    d65e:	88c4      	ldrh	r4, [r0, #6]
    d660:	8881      	ldrh	r1, [r0, #4]
    d662:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d666:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d66a:	441a      	add	r2, r3
    d66c:	42a1      	cmp	r1, r4
    d66e:	d010      	beq.n	d692 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d670:	8983      	ldrh	r3, [r0, #12]
    d672:	8a05      	ldrh	r5, [r0, #16]
    d674:	8812      	ldrh	r2, [r2, #0]
    d676:	442b      	add	r3, r5
    d678:	4293      	cmp	r3, r2
    d67a:	d308      	bcc.n	d68e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d67c:	f8ad 1000 	strh.w	r1, [sp]
    d680:	4669      	mov	r1, sp
    d682:	f7ff fe57 	bl	d334 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d686:	f8bd 0000 	ldrh.w	r0, [sp]
    d68a:	42a0      	cmp	r0, r4
    d68c:	d001      	beq.n	d692 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d68e:	2001      	movs	r0, #1
    d690:	bd38      	pop	{r3, r4, r5, pc}
    d692:	2000      	movs	r0, #0
    d694:	bd38      	pop	{r3, r4, r5, pc}

0000d696 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d696:	b570      	push	{r4, r5, r6, lr}
    d698:	88c6      	ldrh	r6, [r0, #6]
    d69a:	8885      	ldrh	r5, [r0, #4]
    d69c:	4603      	mov	r3, r0
    d69e:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d6a2:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d6a6:	4420      	add	r0, r4
    d6a8:	42b5      	cmp	r5, r6
    d6aa:	d102      	bne.n	d6b2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d6ac:	2000      	movs	r0, #0
    d6ae:	8218      	strh	r0, [r3, #16]
    d6b0:	bd70      	pop	{r4, r5, r6, pc}
    d6b2:	8804      	ldrh	r4, [r0, #0]
    d6b4:	899d      	ldrh	r5, [r3, #12]
    d6b6:	7f1e      	ldrb	r6, [r3, #28]
    d6b8:	1b64      	subs	r4, r4, r5
    d6ba:	4435      	add	r5, r6
    d6bc:	4428      	add	r0, r5
    d6be:	880d      	ldrh	r5, [r1, #0]
    d6c0:	b2a4      	uxth	r4, r4
    d6c2:	1cc0      	adds	r0, r0, #3
    d6c4:	42a5      	cmp	r5, r4
    d6c6:	d900      	bls.n	d6ca <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d6c8:	800c      	strh	r4, [r1, #0]
    d6ca:	899c      	ldrh	r4, [r3, #12]
    d6cc:	b124      	cbz	r4, d6d8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d6ce:	2400      	movs	r4, #0
    d6d0:	7014      	strb	r4, [r2, #0]
    d6d2:	8809      	ldrh	r1, [r1, #0]
    d6d4:	8219      	strh	r1, [r3, #16]
    d6d6:	bd70      	pop	{r4, r5, r6, pc}
    d6d8:	2401      	movs	r4, #1
    d6da:	e7f9      	b.n	d6d0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d6dc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d6dc:	b510      	push	{r4, lr}
    d6de:	8a81      	ldrh	r1, [r0, #20]
    d6e0:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d6e4:	3aff      	subs	r2, #255	; 0xff
    d6e6:	d002      	beq.n	d6ee <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    d6e8:	7d82      	ldrb	r2, [r0, #22]
    d6ea:	b952      	cbnz	r2, d702 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    d6ec:	e004      	b.n	d6f8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    d6ee:	f44f 7157 	mov.w	r1, #860	; 0x35c
    d6f2:	2014      	movs	r0, #20
    d6f4:	f7f6 ff22 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6f8:	8880      	ldrh	r0, [r0, #4]
    d6fa:	4281      	cmp	r1, r0
    d6fc:	d101      	bne.n	d702 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    d6fe:	2000      	movs	r0, #0
    d700:	bd10      	pop	{r4, pc}
    d702:	2001      	movs	r0, #1
    d704:	bd10      	pop	{r4, pc}

0000d706 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d706:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d70a:	8281      	strh	r1, [r0, #20]
    d70c:	2100      	movs	r1, #0
    d70e:	7581      	strb	r1, [r0, #22]
    d710:	4770      	bx	lr

0000d712 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d712:	b510      	push	{r4, lr}
    d714:	8a81      	ldrh	r1, [r0, #20]
    d716:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d71a:	3aff      	subs	r2, #255	; 0xff
    d71c:	d004      	beq.n	d728 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d71e:	f240 313f 	movw	r1, #831	; 0x33f
    d722:	2014      	movs	r0, #20
    d724:	f7f6 ff0a 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d728:	88c1      	ldrh	r1, [r0, #6]
    d72a:	8281      	strh	r1, [r0, #20]
    d72c:	89c1      	ldrh	r1, [r0, #14]
    d72e:	b101      	cbz	r1, d732 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    d730:	2101      	movs	r1, #1
    d732:	7581      	strb	r1, [r0, #22]
    d734:	bd10      	pop	{r4, pc}

0000d736 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d73a:	461d      	mov	r5, r3
    d73c:	4616      	mov	r6, r2
    d73e:	9f06      	ldr	r7, [sp, #24]
    d740:	460b      	mov	r3, r1
    d742:	4604      	mov	r4, r0
    d744:	463a      	mov	r2, r7
    d746:	4629      	mov	r1, r5
    d748:	4630      	mov	r0, r6
    d74a:	f000 f84f 	bl	d7ec <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d74e:	4283      	cmp	r3, r0
    d750:	d201      	bcs.n	d756 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d752:	21a1      	movs	r1, #161	; 0xa1
    d754:	e018      	b.n	d788 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d756:	1ce0      	adds	r0, r4, #3
    d758:	f020 0103 	bic.w	r1, r0, #3
    d75c:	4620      	mov	r0, r4
    d75e:	42a1      	cmp	r1, r4
    d760:	d001      	beq.n	d766 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d762:	21a2      	movs	r1, #162	; 0xa2
    d764:	e010      	b.n	d788 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d766:	2224      	movs	r2, #36	; 0x24
    d768:	2100      	movs	r1, #0
    d76a:	f7ff f964 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d76e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d772:	82a0      	strh	r0, [r4, #20]
    d774:	19a8      	adds	r0, r5, r6
    d776:	1d80      	adds	r0, r0, #6
    d778:	4378      	muls	r0, r7
    d77a:	b280      	uxth	r0, r0
    d77c:	7725      	strb	r5, [r4, #28]
    d77e:	8060      	strh	r0, [r4, #2]
    d780:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d784:	d903      	bls.n	d78e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d786:	21a8      	movs	r1, #168	; 0xa8
    d788:	2014      	movs	r0, #20
    d78a:	f7f6 fed7 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d78e:	8026      	strh	r6, [r4, #0]
    d790:	2000      	movs	r0, #0
    d792:	7760      	strb	r0, [r4, #29]
    d794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d798 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d798:	6181      	str	r1, [r0, #24]
    d79a:	6188      	str	r0, [r1, #24]
    d79c:	4770      	bx	lr

0000d79e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7a2:	460b      	mov	r3, r1
    d7a4:	4604      	mov	r4, r0
    d7a6:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d7aa:	8905      	ldrh	r5, [r0, #8]
    d7ac:	8946      	ldrh	r6, [r0, #10]
    d7ae:	8880      	ldrh	r0, [r0, #4]
    d7b0:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d7b4:	4439      	add	r1, r7
    d7b6:	460f      	mov	r7, r1
    d7b8:	4285      	cmp	r5, r0
    d7ba:	d102      	bne.n	d7c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d7bc:	2000      	movs	r0, #0
    d7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7c2:	b10a      	cbz	r2, d7c8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d7c4:	1cc8      	adds	r0, r1, #3
    d7c6:	6010      	str	r0, [r2, #0]
    d7c8:	b123      	cbz	r3, d7d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d7ca:	7f22      	ldrb	r2, [r4, #28]
    d7cc:	1cf9      	adds	r1, r7, #3
    d7ce:	4618      	mov	r0, r3
    d7d0:	f7ff f8b7 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7d4:	883f      	ldrh	r7, [r7, #0]
    d7d6:	f104 0108 	add.w	r1, r4, #8
    d7da:	4620      	mov	r0, r4
    d7dc:	f7ff fdaa 	bl	d334 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d7e0:	42b5      	cmp	r5, r6
    d7e2:	d101      	bne.n	d7e8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d7e4:	8920      	ldrh	r0, [r4, #8]
    d7e6:	8160      	strh	r0, [r4, #10]
    d7e8:	4638      	mov	r0, r7
    d7ea:	e7e8      	b.n	d7be <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d7ec <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d7ec:	4401      	add	r1, r0
    d7ee:	1d89      	adds	r1, r1, #6
    d7f0:	4351      	muls	r1, r2
    d7f2:	b28a      	uxth	r2, r1
    d7f4:	2100      	movs	r1, #0
    d7f6:	2845      	cmp	r0, #69	; 0x45
    d7f8:	d201      	bcs.n	d7fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d7fa:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d7fe:	3224      	adds	r2, #36	; 0x24
    d800:	1850      	adds	r0, r2, r1
    d802:	b280      	uxth	r0, r0
    d804:	4770      	bx	lr

0000d806 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d80a:	4688      	mov	r8, r1
    d80c:	88c1      	ldrh	r1, [r0, #6]
    d80e:	4604      	mov	r4, r0
    d810:	8900      	ldrh	r0, [r0, #8]
    d812:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d816:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d81a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d81e:	eb05 0906 	add.w	r9, r5, r6
    d822:	f7ff fda8 	bl	d376 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d826:	2200      	movs	r2, #0
    d828:	b998      	cbnz	r0, d852 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d82a:	8820      	ldrh	r0, [r4, #0]
    d82c:	2845      	cmp	r0, #69	; 0x45
    d82e:	d200      	bcs.n	d832 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d830:	2045      	movs	r0, #69	; 0x45
    d832:	42b7      	cmp	r7, r6
    d834:	d906      	bls.n	d844 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d836:	7f23      	ldrb	r3, [r4, #28]
    d838:	1bb9      	subs	r1, r7, r6
    d83a:	1ac9      	subs	r1, r1, r3
    d83c:	1f89      	subs	r1, r1, #6
    d83e:	4281      	cmp	r1, r0
    d840:	da00      	bge.n	d844 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d842:	4608      	mov	r0, r1
    d844:	89e1      	ldrh	r1, [r4, #14]
    d846:	b111      	cbz	r1, d84e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d848:	f8b9 3000 	ldrh.w	r3, [r9]
    d84c:	1ac0      	subs	r0, r0, r3
    d84e:	4540      	cmp	r0, r8
    d850:	da03      	bge.n	d85a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d852:	8262      	strh	r2, [r4, #18]
    d854:	2000      	movs	r0, #0
    d856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d85a:	7f20      	ldrb	r0, [r4, #28]
    d85c:	4429      	add	r1, r5
    d85e:	1d80      	adds	r0, r0, #6
    d860:	4430      	add	r0, r6
    d862:	4408      	add	r0, r1
    d864:	f8a4 8012 	strh.w	r8, [r4, #18]
    d868:	1ec0      	subs	r0, r0, #3
    d86a:	e7f4      	b.n	d856 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d86c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d86c:	2100      	movs	r1, #0
    d86e:	81c1      	strh	r1, [r0, #14]
    d870:	8241      	strh	r1, [r0, #18]
    d872:	75c1      	strb	r1, [r0, #23]
    d874:	7581      	strb	r1, [r0, #22]
    d876:	4770      	bx	lr

0000d878 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d878:	b570      	push	{r4, r5, r6, lr}
    d87a:	2300      	movs	r3, #0
    d87c:	2908      	cmp	r1, #8
    d87e:	d204      	bcs.n	d88a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d880:	f240 11cb 	movw	r1, #459	; 0x1cb
    d884:	2015      	movs	r0, #21
    d886:	f7f6 fe59 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d88a:	6802      	ldr	r2, [r0, #0]
    d88c:	b90a      	cbnz	r2, d892 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d88e:	e01e      	b.n	d8ce <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d890:	4610      	mov	r0, r2
    d892:	6802      	ldr	r2, [r0, #0]
    d894:	8893      	ldrh	r3, [r2, #4]
    d896:	428b      	cmp	r3, r1
    d898:	d002      	beq.n	d8a0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d89a:	6813      	ldr	r3, [r2, #0]
    d89c:	2b00      	cmp	r3, #0
    d89e:	d1f7      	bne.n	d890 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d8a0:	8894      	ldrh	r4, [r2, #4]
    d8a2:	4613      	mov	r3, r2
    d8a4:	428c      	cmp	r4, r1
    d8a6:	d101      	bne.n	d8ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d8a8:	6811      	ldr	r1, [r2, #0]
    d8aa:	e00d      	b.n	d8c8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d8ac:	f101 0508 	add.w	r5, r1, #8
    d8b0:	b2ae      	uxth	r6, r5
    d8b2:	2500      	movs	r5, #0
    d8b4:	42b4      	cmp	r4, r6
    d8b6:	d309      	bcc.n	d8cc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d8b8:	1a64      	subs	r4, r4, r1
    d8ba:	4411      	add	r1, r2
    d8bc:	600d      	str	r5, [r1, #0]
    d8be:	808c      	strh	r4, [r1, #4]
    d8c0:	6802      	ldr	r2, [r0, #0]
    d8c2:	6812      	ldr	r2, [r2, #0]
    d8c4:	6002      	str	r2, [r0, #0]
    d8c6:	600a      	str	r2, [r1, #0]
    d8c8:	6001      	str	r1, [r0, #0]
    d8ca:	e000      	b.n	d8ce <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d8cc:	2300      	movs	r3, #0
    d8ce:	4618      	mov	r0, r3
    d8d0:	bd70      	pop	{r4, r5, r6, pc}

0000d8d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d8d2:	b510      	push	{r4, lr}
    d8d4:	000c      	movs	r4, r1
    d8d6:	d006      	beq.n	d8e6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d8d8:	2c08      	cmp	r4, #8
    d8da:	d209      	bcs.n	d8f0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d8dc:	f240 1195 	movw	r1, #405	; 0x195
    d8e0:	2015      	movs	r0, #21
    d8e2:	f7f6 fe2b 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8e6:	b108      	cbz	r0, d8ec <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d8e8:	2100      	movs	r1, #0
    d8ea:	6001      	str	r1, [r0, #0]
    d8ec:	2000      	movs	r0, #0
    d8ee:	bd10      	pop	{r4, pc}
    d8f0:	b118      	cbz	r0, d8fa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d8f2:	b2a1      	uxth	r1, r4
    d8f4:	6800      	ldr	r0, [r0, #0]
    d8f6:	f000 f814 	bl	d922 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d8fa:	1d20      	adds	r0, r4, #4
    d8fc:	bd10      	pop	{r4, pc}

0000d8fe <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d8fe:	2100      	movs	r1, #0
    d900:	6802      	ldr	r2, [r0, #0]
    d902:	e003      	b.n	d90c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d904:	8893      	ldrh	r3, [r2, #4]
    d906:	6812      	ldr	r2, [r2, #0]
    d908:	4419      	add	r1, r3
    d90a:	b289      	uxth	r1, r1
    d90c:	2a00      	cmp	r2, #0
    d90e:	d1f9      	bne.n	d904 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d910:	f000 b807 	b.w	d922 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d914 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d914:	2300      	movs	r3, #0
    d916:	600b      	str	r3, [r1, #0]
    d918:	808a      	strh	r2, [r1, #4]
    d91a:	6802      	ldr	r2, [r0, #0]
    d91c:	600a      	str	r2, [r1, #0]
    d91e:	6001      	str	r1, [r0, #0]
    d920:	4770      	bx	lr
    d922:	2300      	movs	r3, #0
    d924:	6043      	str	r3, [r0, #4]
    d926:	1d02      	adds	r2, r0, #4
    d928:	8101      	strh	r1, [r0, #8]
    d92a:	6002      	str	r2, [r0, #0]
    d92c:	4770      	bx	lr

0000d92e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d92e:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d932:	3bff      	subs	r3, #255	; 0xff
    d934:	d001      	beq.n	d93a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d936:	2902      	cmp	r1, #2
    d938:	d301      	bcc.n	d93e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d93a:	2000      	movs	r0, #0
    d93c:	4770      	bx	lr
    d93e:	f7f7 b8ad 	b.w	4a9c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d942 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    d942:	b50e      	push	{r1, r2, r3, lr}
    d944:	4669      	mov	r1, sp
    d946:	f000 f818 	bl	d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    d94a:	b120      	cbz	r0, d956 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    d94c:	f44f 71b2 	mov.w	r1, #356	; 0x164
    d950:	2017      	movs	r0, #23
    d952:	f7f6 fdf3 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d956:	4668      	mov	r0, sp
    d958:	f7f7 f81e 	bl	4998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d95c:	b108      	cbz	r0, d962 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    d95e:	2000      	movs	r0, #0
    d960:	bd0e      	pop	{r1, r2, r3, pc}
    d962:	2001      	movs	r0, #1
    d964:	bd0e      	pop	{r1, r2, r3, pc}

0000d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d966:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d96a:	3aff      	subs	r2, #255	; 0xff
    d96c:	d001      	beq.n	d972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d96e:	2902      	cmp	r1, #2
    d970:	d301      	bcc.n	d976 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d972:	2000      	movs	r0, #0
    d974:	4770      	bx	lr
    d976:	f7f7 b8cb 	b.w	4b10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d97a:	b570      	push	{r4, r5, r6, lr}
    d97c:	4605      	mov	r5, r0
    d97e:	460c      	mov	r4, r1
    d980:	4608      	mov	r0, r1
    d982:	f000 f850 	bl	da26 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d986:	b108      	cbz	r0, d98c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d988:	2010      	movs	r0, #16
    d98a:	bd70      	pop	{r4, r5, r6, pc}
    d98c:	2d02      	cmp	r5, #2
    d98e:	d301      	bcc.n	d994 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d990:	2007      	movs	r0, #7
    d992:	bd70      	pop	{r4, r5, r6, pc}
    d994:	7025      	strb	r5, [r4, #0]
    d996:	2000      	movs	r0, #0
    d998:	8060      	strh	r0, [r4, #2]
    d99a:	bd70      	pop	{r4, r5, r6, pc}
    d99c:	b510      	push	{r4, lr}
    d99e:	4604      	mov	r4, r0
    d9a0:	f7f7 f902 	bl	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d9a4:	42a0      	cmp	r0, r4
    d9a6:	d901      	bls.n	d9ac <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d9a8:	2001      	movs	r0, #1
    d9aa:	bd10      	pop	{r4, pc}
    d9ac:	2000      	movs	r0, #0
    d9ae:	bd10      	pop	{r4, pc}
    d9b0:	4770      	bx	lr

0000d9b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d9b2:	b570      	push	{r4, r5, r6, lr}
    d9b4:	460e      	mov	r6, r1
    d9b6:	461d      	mov	r5, r3
    d9b8:	4611      	mov	r1, r2
    d9ba:	f000 f811 	bl	d9e0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d9be:	4604      	mov	r4, r0
    d9c0:	4629      	mov	r1, r5
    d9c2:	4630      	mov	r0, r6
    d9c4:	f000 f803 	bl	d9ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d9c8:	4420      	add	r0, r4
    d9ca:	1d00      	adds	r0, r0, #4
    d9cc:	bd70      	pop	{r4, r5, r6, pc}
    d9ce:	b510      	push	{r4, lr}
    d9d0:	460a      	mov	r2, r1
    d9d2:	2101      	movs	r1, #1
    d9d4:	f7ff ff0a 	bl	d7ec <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9d8:	1cc0      	adds	r0, r0, #3
    d9da:	f020 0003 	bic.w	r0, r0, #3
    d9de:	bd10      	pop	{r4, pc}
    d9e0:	b510      	push	{r4, lr}
    d9e2:	460a      	mov	r2, r1
    d9e4:	2101      	movs	r1, #1
    d9e6:	f7ff ff01 	bl	d7ec <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9ea:	1cc0      	adds	r0, r0, #3
    d9ec:	f020 0003 	bic.w	r0, r0, #3
    d9f0:	bd10      	pop	{r4, pc}
    d9f2:	2800      	cmp	r0, #0
    d9f4:	db09      	blt.n	da0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d9f6:	f000 021f 	and.w	r2, r0, #31
    d9fa:	2101      	movs	r1, #1
    d9fc:	4091      	lsls	r1, r2
    d9fe:	0940      	lsrs	r0, r0, #5
    da00:	0080      	lsls	r0, r0, #2
    da02:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da06:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    da0a:	4770      	bx	lr

0000da0c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    da0c:	f7f7 bab0 	b.w	4f70 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000da10 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    da10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    da14:	2000      	movs	r0, #0
    da16:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    da1a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    da1e:	2001      	movs	r0, #1
    da20:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    da24:	4770      	bx	lr

0000da26 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    da26:	b108      	cbz	r0, da2c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    da28:	2000      	movs	r0, #0
    da2a:	4770      	bx	lr
    da2c:	2001      	movs	r0, #1
    da2e:	4770      	bx	lr

0000da30 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    da30:	f7f7 bbe4 	b.w	51fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000da34 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    da34:	f7f7 bbd2 	b.w	51dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000da38 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    da38:	b510      	push	{r4, lr}
    da3a:	2900      	cmp	r1, #0
    da3c:	4604      	mov	r4, r0
    da3e:	f04f 0106 	mov.w	r1, #6
    da42:	d002      	beq.n	da4a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    da44:	f7f6 fe0a 	bl	465c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    da48:	e001      	b.n	da4e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    da4a:	f7f6 fe23 	bl	4694 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    da4e:	7960      	ldrb	r0, [r4, #5]
    da50:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    da54:	7160      	strb	r0, [r4, #5]
    da56:	bd10      	pop	{r4, pc}

0000da58 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    da58:	4770      	bx	lr

0000da5a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    da5a:	b530      	push	{r4, r5, lr}
    da5c:	460c      	mov	r4, r1
    da5e:	4605      	mov	r5, r0
    da60:	b08d      	sub	sp, #52	; 0x34
    da62:	f04f 0103 	mov.w	r1, #3
    da66:	f104 0003 	add.w	r0, r4, #3
    da6a:	b112      	cbz	r2, da72 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    da6c:	f7f6 fdf6 	bl	465c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    da70:	e001      	b.n	da76 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    da72:	f7f6 fe0f 	bl	4694 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    da76:	7960      	ldrb	r0, [r4, #5]
    da78:	220d      	movs	r2, #13
    da7a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    da7e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    da82:	7160      	strb	r0, [r4, #5]
    da84:	2100      	movs	r1, #0
    da86:	a804      	add	r0, sp, #16
    da88:	f7fe ffd5 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    da8c:	78e0      	ldrb	r0, [r4, #3]
    da8e:	f88d 001f 	strb.w	r0, [sp, #31]
    da92:	7920      	ldrb	r0, [r4, #4]
    da94:	f88d 001e 	strb.w	r0, [sp, #30]
    da98:	7960      	ldrb	r0, [r4, #5]
    da9a:	f88d 001d 	strb.w	r0, [sp, #29]
    da9e:	2210      	movs	r2, #16
    daa0:	4629      	mov	r1, r5
    daa2:	4668      	mov	r0, sp
    daa4:	f7fe ff4d 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    daa8:	4668      	mov	r0, sp
    daaa:	f7ff ffaf 	bl	da0c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    daae:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dab2:	7020      	strb	r0, [r4, #0]
    dab4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dab8:	7060      	strb	r0, [r4, #1]
    daba:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dabe:	70a0      	strb	r0, [r4, #2]
    dac0:	b00d      	add	sp, #52	; 0x34
    dac2:	bd30      	pop	{r4, r5, pc}

0000dac4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    dac4:	f7f7 bf1e 	b.w	5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    dac8:	07c1      	lsls	r1, r0, #31
    daca:	d001      	beq.n	dad0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    dacc:	2001      	movs	r0, #1
    dace:	4770      	bx	lr
    dad0:	0780      	lsls	r0, r0, #30
    dad2:	d501      	bpl.n	dad8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    dad4:	2002      	movs	r0, #2
    dad6:	4770      	bx	lr
    dad8:	2000      	movs	r0, #0
    dada:	4770      	bx	lr
    dadc:	b510      	push	{r4, lr}
    dade:	2801      	cmp	r0, #1
    dae0:	d008      	beq.n	daf4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    dae2:	2802      	cmp	r0, #2
    dae4:	d004      	beq.n	daf0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    dae6:	f240 31c1 	movw	r1, #961	; 0x3c1
    daea:	2006      	movs	r0, #6
    daec:	f7f6 fd26 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daf0:	2001      	movs	r0, #1
    daf2:	bd10      	pop	{r4, pc}
    daf4:	2000      	movs	r0, #0
    daf6:	bd10      	pop	{r4, pc}
    daf8:	b570      	push	{r4, r5, r6, lr}
    dafa:	460c      	mov	r4, r1
    dafc:	4605      	mov	r5, r0
    dafe:	2b08      	cmp	r3, #8
    db00:	d001      	beq.n	db06 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    db02:	4619      	mov	r1, r3
    db04:	e000      	b.n	db08 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    db06:	2104      	movs	r1, #4
    db08:	4610      	mov	r0, r2
    db0a:	f000 f8f4 	bl	dcf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    db0e:	b90d      	cbnz	r5, db14 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x50>
    db10:	1d00      	adds	r0, r0, #4
    db12:	b280      	uxth	r0, r0
    db14:	4284      	cmp	r4, r0
    db16:	d200      	bcs.n	db1a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x56>
    db18:	4620      	mov	r0, r4
    db1a:	b2c0      	uxtb	r0, r0
    db1c:	bd70      	pop	{r4, r5, r6, pc}
    db1e:	2900      	cmp	r1, #0
    db20:	d004      	beq.n	db2c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x68>
    db22:	2801      	cmp	r0, #1
    db24:	d003      	beq.n	db2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    db26:	2901      	cmp	r1, #1
    db28:	d001      	beq.n	db2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    db2a:	2002      	movs	r0, #2
    db2c:	4770      	bx	lr
    db2e:	2001      	movs	r0, #1
    db30:	4770      	bx	lr
    db32:	f7ff bdb0 	b.w	d696 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000db36 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    db36:	2201      	movs	r2, #1
    db38:	f7f8 baa2 	b.w	6080 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000db3c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    db3c:	b510      	push	{r4, lr}
    db3e:	f002 f954 	bl	fdea <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    db42:	b118      	cbz	r0, db4c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    db44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db48:	f7fd ba7a 	b.w	b040 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    db4c:	20ff      	movs	r0, #255	; 0xff
    db4e:	bd10      	pop	{r4, pc}

0000db50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    db50:	b510      	push	{r4, lr}
    db52:	f7f8 fadf 	bl	6114 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    db56:	2810      	cmp	r0, #16
    db58:	d003      	beq.n	db62 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    db5a:	f7f8 faab 	bl	60b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    db5e:	2810      	cmp	r0, #16
    db60:	d100      	bne.n	db64 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    db62:	2008      	movs	r0, #8
    db64:	bd10      	pop	{r4, pc}

0000db66 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    db66:	b510      	push	{r4, lr}
    db68:	f7f8 fad4 	bl	6114 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    db6c:	2810      	cmp	r0, #16
    db6e:	d007      	beq.n	db80 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    db70:	f7f8 faa0 	bl	60b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    db74:	2810      	cmp	r0, #16
    db76:	d003      	beq.n	db80 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    db78:	f7f8 fb14 	bl	61a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    db7c:	2001      	movs	r0, #1
    db7e:	bd10      	pop	{r4, pc}
    db80:	2000      	movs	r0, #0
    db82:	bd10      	pop	{r4, pc}

0000db84 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    db84:	b510      	push	{r4, lr}
    db86:	f7f8 fac5 	bl	6114 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    db8a:	2810      	cmp	r0, #16
    db8c:	d003      	beq.n	db96 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    db8e:	f7f8 fb51 	bl	6234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    db92:	2001      	movs	r0, #1
    db94:	bd10      	pop	{r4, pc}
    db96:	2000      	movs	r0, #0
    db98:	bd10      	pop	{r4, pc}

0000db9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    db9a:	b570      	push	{r4, r5, r6, lr}
    db9c:	460e      	mov	r6, r1
    db9e:	b08c      	sub	sp, #48	; 0x30
    dba0:	4614      	mov	r4, r2
    dba2:	4601      	mov	r1, r0
    dba4:	461d      	mov	r5, r3
    dba6:	2210      	movs	r2, #16
    dba8:	4668      	mov	r0, sp
    dbaa:	f000 f92d 	bl	de08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dbae:	2210      	movs	r2, #16
    dbb0:	4631      	mov	r1, r6
    dbb2:	a804      	add	r0, sp, #16
    dbb4:	f000 f928 	bl	de08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dbb8:	4668      	mov	r0, sp
    dbba:	f7ff ff27 	bl	da0c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dbbe:	a908      	add	r1, sp, #32
    dbc0:	f04f 0210 	mov.w	r2, #16
    dbc4:	4628      	mov	r0, r5
    dbc6:	b11c      	cbz	r4, dbd0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dbc8:	f000 f91e 	bl	de08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dbcc:	b00c      	add	sp, #48	; 0x30
    dbce:	bd70      	pop	{r4, r5, r6, pc}
    dbd0:	f7fe feb7 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dbd4:	e7fa      	b.n	dbcc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    dbd6:	b510      	push	{r4, lr}
    dbd8:	460c      	mov	r4, r1
    dbda:	2100      	movs	r1, #0
    dbdc:	f7ff fec3 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dbe0:	6060      	str	r0, [r4, #4]
    dbe2:	b118      	cbz	r0, dbec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dbe4:	2001      	movs	r0, #1
    dbe6:	7020      	strb	r0, [r4, #0]
    dbe8:	2000      	movs	r0, #0
    dbea:	bd10      	pop	{r4, pc}
    dbec:	2002      	movs	r0, #2
    dbee:	bd10      	pop	{r4, pc}

0000dbf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dbf0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbf4:	4348      	muls	r0, r1
    dbf6:	4770      	bx	lr

0000dbf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    dbf8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbfc:	fbb0 f0f1 	udiv	r0, r0, r1
    dc00:	b280      	uxth	r0, r0
    dc02:	4770      	bx	lr

0000dc04 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    dc04:	b570      	push	{r4, r5, r6, lr}
    dc06:	4604      	mov	r4, r0
    dc08:	4290      	cmp	r0, r2
    dc0a:	d20b      	bcs.n	dc24 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    dc0c:	1b10      	subs	r0, r2, r4
    dc0e:	2864      	cmp	r0, #100	; 0x64
    dc10:	d200      	bcs.n	dc14 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    dc12:	2064      	movs	r0, #100	; 0x64
    dc14:	1825      	adds	r5, r4, r0
    dc16:	428d      	cmp	r5, r1
    dc18:	d803      	bhi.n	dc22 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    dc1a:	2104      	movs	r1, #4
    dc1c:	f7f3 ff68 	bl	1af0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    dc20:	b108      	cbz	r0, dc26 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    dc22:	4620      	mov	r0, r4
    dc24:	bd70      	pop	{r4, r5, r6, pc}
    dc26:	4628      	mov	r0, r5
    dc28:	bd70      	pop	{r4, r5, r6, pc}

0000dc2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dc2a:	b510      	push	{r4, lr}
    dc2c:	f1a2 030f 	sub.w	r3, r2, #15
    dc30:	290c      	cmp	r1, #12
    dc32:	d244      	bcs.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc34:	e8df f001 	tbb	[pc, r1]
    dc38:	120d0806 	.word	0x120d0806
    dc3c:	241c1815 	.word	0x241c1815
    dc40:	312a4127 	.word	0x312a4127
    dc44:	b3c2      	cbz	r2, dcb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    dc46:	e03a      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc48:	2a07      	cmp	r2, #7
    dc4a:	d03a      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc4c:	2a08      	cmp	r2, #8
    dc4e:	d038      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc50:	e035      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc52:	2a0c      	cmp	r2, #12
    dc54:	d035      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc56:	2a0b      	cmp	r2, #11
    dc58:	d033      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc5a:	e030      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc5c:	2a0d      	cmp	r2, #13
    dc5e:	d030      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc60:	e02d      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc62:	2b0c      	cmp	r3, #12
    dc64:	d92d      	bls.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc66:	e02a      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc68:	3a10      	subs	r2, #16
    dc6a:	2a0b      	cmp	r2, #11
    dc6c:	d929      	bls.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc6e:	e026      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc70:	2b03      	cmp	r3, #3
    dc72:	d926      	bls.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc74:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    dc78:	b308      	cbz	r0, dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc7a:	2a1b      	cmp	r2, #27
    dc7c:	d921      	bls.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc7e:	e01e      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc80:	2a04      	cmp	r2, #4
    dc82:	d01e      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc84:	e01b      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc86:	2a06      	cmp	r2, #6
    dc88:	d01b      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc8a:	e018      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc8c:	2a1c      	cmp	r2, #28
    dc8e:	d018      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc90:	2a1d      	cmp	r2, #29
    dc92:	d016      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc94:	2a1e      	cmp	r2, #30
    dc96:	d014      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc98:	e011      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc9a:	2a1f      	cmp	r2, #31
    dc9c:	d011      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc9e:	2a20      	cmp	r2, #32
    dca0:	d00f      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dca2:	2a21      	cmp	r2, #33	; 0x21
    dca4:	d00d      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dca6:	2a22      	cmp	r2, #34	; 0x22
    dca8:	d00b      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dcaa:	2a23      	cmp	r2, #35	; 0x23
    dcac:	d009      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dcae:	2a24      	cmp	r2, #36	; 0x24
    dcb0:	d007      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dcb2:	2a26      	cmp	r2, #38	; 0x26
    dcb4:	d005      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dcb6:	e002      	b.n	dcbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dcb8:	e003      	b.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dcba:	2a0e      	cmp	r2, #14
    dcbc:	d001      	beq.n	dcc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dcbe:	2000      	movs	r0, #0
    dcc0:	bd10      	pop	{r4, pc}
    dcc2:	2001      	movs	r0, #1
    dcc4:	bd10      	pop	{r4, pc}

0000dcc6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dcc6:	280c      	cmp	r0, #12
    dcc8:	d013      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcca:	280b      	cmp	r0, #11
    dccc:	d011      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcce:	280d      	cmp	r0, #13
    dcd0:	d00f      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcd2:	281f      	cmp	r0, #31
    dcd4:	d00d      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcd6:	2820      	cmp	r0, #32
    dcd8:	d00b      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcda:	2821      	cmp	r0, #33	; 0x21
    dcdc:	d009      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcde:	2822      	cmp	r0, #34	; 0x22
    dce0:	d007      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dce2:	2823      	cmp	r0, #35	; 0x23
    dce4:	d005      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dce6:	2824      	cmp	r0, #36	; 0x24
    dce8:	d003      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcea:	2826      	cmp	r0, #38	; 0x26
    dcec:	d001      	beq.n	dcf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcee:	2000      	movs	r0, #0
    dcf0:	4770      	bx	lr
    dcf2:	2001      	movs	r0, #1
    dcf4:	4770      	bx	lr

0000dcf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dcf6:	f011 0f0c 	tst.w	r1, #12
    dcfa:	d016      	beq.n	dd2a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dcfc:	074a      	lsls	r2, r1, #29
    dcfe:	f44f 7116 	mov.w	r1, #600	; 0x258
    dd02:	2a00      	cmp	r2, #0
    dd04:	da02      	bge.n	dd0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dd06:	f04f 0210 	mov.w	r2, #16
    dd0a:	e001      	b.n	dd10 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dd0c:	f04f 0240 	mov.w	r2, #64	; 0x40
    dd10:	da01      	bge.n	dd16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dd12:	f04f 0196 	mov.w	r1, #150	; 0x96
    dd16:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dd1a:	eba0 0301 	sub.w	r3, r0, r1
    dd1e:	4288      	cmp	r0, r1
    dd20:	d910      	bls.n	dd44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dd22:	fb93 f0f2 	sdiv	r0, r3, r2
    dd26:	b280      	uxth	r0, r0
    dd28:	4770      	bx	lr
    dd2a:	2902      	cmp	r1, #2
    dd2c:	d002      	beq.n	dd34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    dd2e:	2870      	cmp	r0, #112	; 0x70
    dd30:	d80a      	bhi.n	dd48 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    dd32:	e007      	b.n	dd44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dd34:	283c      	cmp	r0, #60	; 0x3c
    dd36:	d905      	bls.n	dd44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dd38:	383c      	subs	r0, #60	; 0x3c
    dd3a:	17c1      	asrs	r1, r0, #31
    dd3c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dd40:	1080      	asrs	r0, r0, #2
    dd42:	e7f0      	b.n	dd26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dd44:	2000      	movs	r0, #0
    dd46:	e7ee      	b.n	dd26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dd48:	3870      	subs	r0, #112	; 0x70
    dd4a:	17c1      	asrs	r1, r0, #31
    dd4c:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dd50:	10c0      	asrs	r0, r0, #3
    dd52:	e7e8      	b.n	dd26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000dd54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dd54:	6809      	ldr	r1, [r1, #0]
    dd56:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
    dd5a:	4770      	bx	lr

0000dd5c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    dd5c:	7e83      	ldrb	r3, [r0, #26]
    dd5e:	b10b      	cbz	r3, dd64 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x8>
    dd60:	2b25      	cmp	r3, #37	; 0x25
    dd62:	d901      	bls.n	dd68 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    dd64:	2012      	movs	r0, #18
    dd66:	4770      	bx	lr
    dd68:	b12a      	cbz	r2, dd76 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1a>
    dd6a:	7c4b      	ldrb	r3, [r1, #17]
    dd6c:	b12b      	cbz	r3, dd7a <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1e>
    dd6e:	2b01      	cmp	r3, #1
    dd70:	d005      	beq.n	dd7e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x22>
    dd72:	201f      	movs	r0, #31
    dd74:	4770      	bx	lr
    dd76:	2000      	movs	r0, #0
    dd78:	4770      	bx	lr
    dd7a:	f7f8 bb35 	b.w	63e8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x1c>
    dd7e:	f000 b8e8 	b.w	df52 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>

0000dd82 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    dd82:	07c1      	lsls	r1, r0, #31
    dd84:	d001      	beq.n	dd8a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    dd86:	2001      	movs	r0, #1
    dd88:	4770      	bx	lr
    dd8a:	0781      	lsls	r1, r0, #30
    dd8c:	d501      	bpl.n	dd92 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    dd8e:	2002      	movs	r0, #2
    dd90:	4770      	bx	lr
    dd92:	0740      	lsls	r0, r0, #29
    dd94:	d501      	bpl.n	dd9a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    dd96:	2008      	movs	r0, #8
    dd98:	4770      	bx	lr
    dd9a:	2000      	movs	r0, #0
    dd9c:	4770      	bx	lr

0000dd9e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dd9e:	b510      	push	{r4, lr}
    dda0:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dda4:	2901      	cmp	r1, #1
    dda6:	d006      	beq.n	ddb6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    dda8:	2902      	cmp	r1, #2
    ddaa:	d005      	beq.n	ddb8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ddac:	f240 512a 	movw	r1, #1322	; 0x52a
    ddb0:	2029      	movs	r0, #41	; 0x29
    ddb2:	f7f6 fbc3 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddb6:	b108      	cbz	r0, ddbc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ddb8:	4610      	mov	r0, r2
    ddba:	bd10      	pop	{r4, pc}
    ddbc:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ddc0:	bd10      	pop	{r4, pc}

0000ddc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ddc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddc6:	460c      	mov	r4, r1
    ddc8:	4605      	mov	r5, r0
    ddca:	68c6      	ldr	r6, [r0, #12]
    ddcc:	f7f4 fb06 	bl	23dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ddd0:	b198      	cbz	r0, ddfa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    ddd2:	b1bc      	cbz	r4, de04 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ddd4:	4630      	mov	r0, r6
    ddd6:	68e9      	ldr	r1, [r5, #12]
    ddd8:	f7f3 ff9c 	bl	1d14 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dddc:	2800      	cmp	r0, #0
    ddde:	dd11      	ble.n	de04 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dde0:	4420      	add	r0, r4
    dde2:	1e40      	subs	r0, r0, #1
    dde4:	fbb0 f7f4 	udiv	r7, r0, r4
    dde8:	fb07 f104 	mul.w	r1, r7, r4
    ddec:	4630      	mov	r0, r6
    ddee:	f7f3 ff5b 	bl	1ca8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ddf2:	60e8      	str	r0, [r5, #12]
    ddf4:	4638      	mov	r0, r7
    ddf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddfa:	f240 31af 	movw	r1, #943	; 0x3af
    ddfe:	2029      	movs	r0, #41	; 0x29
    de00:	f7f6 fb9c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de04:	2000      	movs	r0, #0
    de06:	e7f6      	b.n	ddf6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000de08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    de08:	b530      	push	{r4, r5, lr}
    de0a:	4613      	mov	r3, r2
    de0c:	e006      	b.n	de1c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    de0e:	18cc      	adds	r4, r1, r3
    de10:	1ad5      	subs	r5, r2, r3
    de12:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    de16:	1e5b      	subs	r3, r3, #1
    de18:	5544      	strb	r4, [r0, r5]
    de1a:	b2db      	uxtb	r3, r3
    de1c:	2b00      	cmp	r3, #0
    de1e:	d1f6      	bne.n	de0e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    de20:	bd30      	pop	{r4, r5, pc}

0000de22 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    de22:	b538      	push	{r3, r4, r5, lr}
    de24:	4605      	mov	r5, r0
    de26:	460c      	mov	r4, r1
    de28:	4668      	mov	r0, sp
    de2a:	f7fd fe09 	bl	ba40 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    de2e:	b308      	cbz	r0, de74 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    de30:	f99d 0000 	ldrsb.w	r0, [sp]
    de34:	7260      	strb	r0, [r4, #9]
    de36:	7f21      	ldrb	r1, [r4, #28]
    de38:	72a1      	strb	r1, [r4, #10]
    de3a:	f994 100b 	ldrsb.w	r1, [r4, #11]
    de3e:	2200      	movs	r2, #0
    de40:	1a41      	subs	r1, r0, r1
    de42:	d500      	bpl.n	de46 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x24>
    de44:	4249      	negs	r1, r1
    de46:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    de4a:	428b      	cmp	r3, r1
    de4c:	dc10      	bgt.n	de70 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    de4e:	2bff      	cmp	r3, #255	; 0xff
    de50:	d00e      	beq.n	de70 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    de52:	7b21      	ldrb	r1, [r4, #12]
    de54:	1c49      	adds	r1, r1, #1
    de56:	b2c9      	uxtb	r1, r1
    de58:	7321      	strb	r1, [r4, #12]
    de5a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    de5e:	4299      	cmp	r1, r3
    de60:	d802      	bhi.n	de68 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    de62:	7ae1      	ldrb	r1, [r4, #11]
    de64:	297f      	cmp	r1, #127	; 0x7f
    de66:	d103      	bne.n	de70 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    de68:	72e0      	strb	r0, [r4, #11]
    de6a:	2000      	movs	r0, #0
    de6c:	7320      	strb	r0, [r4, #12]
    de6e:	2201      	movs	r2, #1
    de70:	4610      	mov	r0, r2
    de72:	bd38      	pop	{r3, r4, r5, pc}
    de74:	207f      	movs	r0, #127	; 0x7f
    de76:	7260      	strb	r0, [r4, #9]
    de78:	2000      	movs	r0, #0
    de7a:	bd38      	pop	{r3, r4, r5, pc}

0000de7c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    de7c:	2300      	movs	r3, #0
    de7e:	6203      	str	r3, [r0, #32]
    de80:	8502      	strh	r2, [r0, #40]	; 0x28
    de82:	f240 2371 	movw	r3, #625	; 0x271
    de86:	435a      	muls	r2, r3
    de88:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    de8c:	1e52      	subs	r2, r2, #1
    de8e:	fbb2 f1f1 	udiv	r1, r2, r1
    de92:	6241      	str	r1, [r0, #36]	; 0x24
    de94:	4770      	bx	lr

0000de96 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    de96:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    de9a:	4607      	mov	r7, r0
    de9c:	4690      	mov	r8, r2
    de9e:	468b      	mov	fp, r1
    dea0:	2601      	movs	r6, #1
    dea2:	4608      	mov	r0, r1
    dea4:	f000 f93c 	bl	e120 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    dea8:	4682      	mov	sl, r0
    deaa:	4658      	mov	r0, fp
    deac:	f000 f944 	bl	e138 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    deb0:	4681      	mov	r9, r0
    deb2:	f7ff ff66 	bl	dd82 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    deb6:	4604      	mov	r4, r0
    deb8:	4650      	mov	r0, sl
    deba:	f7ff ff62 	bl	dd82 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    debe:	4605      	mov	r5, r0
    dec0:	ea54 0005 	orrs.w	r0, r4, r5
    dec4:	d100      	bne.n	dec8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    dec6:	2600      	movs	r6, #0
    dec8:	f7fd f85c 	bl	af84 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    decc:	ea10 0f09 	tst.w	r0, r9
    ded0:	d100      	bne.n	ded4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    ded2:	2400      	movs	r4, #0
    ded4:	f7fd f856 	bl	af84 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ded8:	ea10 0f0a 	tst.w	r0, sl
    dedc:	d100      	bne.n	dee0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    dede:	2500      	movs	r5, #0
    dee0:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
    dee4:	42a0      	cmp	r0, r4
    dee6:	d100      	bne.n	deea <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    dee8:	2400      	movs	r4, #0
    deea:	f888 4000 	strb.w	r4, [r8]
    deee:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
    def2:	42a8      	cmp	r0, r5
    def4:	d100      	bne.n	def8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    def6:	2500      	movs	r5, #0
    def8:	f888 5001 	strb.w	r5, [r8, #1]
    defc:	b974      	cbnz	r4, df1c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    defe:	b96d      	cbnz	r5, df1c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    df00:	4658      	mov	r0, fp
    df02:	f000 f917 	bl	e134 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    df06:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    df0a:	1a40      	subs	r0, r0, r1
    df0c:	b200      	sxth	r0, r0
    df0e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    df12:	4288      	cmp	r0, r1
    df14:	dc01      	bgt.n	df1a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    df16:	2800      	cmp	r0, #0
    df18:	dc00      	bgt.n	df1c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    df1a:	2600      	movs	r6, #0
    df1c:	4630      	mov	r0, r6
    df1e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000df22 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    df22:	f240 41e2 	movw	r1, #1250	; 0x4e2
    df26:	4348      	muls	r0, r1
    df28:	4770      	bx	lr

0000df2a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    df2a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    df2e:	fb10 f001 	smulbb	r0, r0, r1
    df32:	4770      	bx	lr

0000df34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    df34:	b510      	push	{r4, lr}
    df36:	2300      	movs	r3, #0
    df38:	461a      	mov	r2, r3
    df3a:	e003      	b.n	df44 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    df3c:	5c84      	ldrb	r4, [r0, r2]
    df3e:	4323      	orrs	r3, r4
    df40:	1c52      	adds	r2, r2, #1
    df42:	b2d2      	uxtb	r2, r2
    df44:	428a      	cmp	r2, r1
    df46:	d3f9      	bcc.n	df3c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    df48:	b10b      	cbz	r3, df4e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    df4a:	2000      	movs	r0, #0
    df4c:	bd10      	pop	{r4, pc}
    df4e:	2001      	movs	r0, #1
    df50:	bd10      	pop	{r4, pc}
    df52:	b5f0      	push	{r4, r5, r6, r7, lr}
    df54:	7d0c      	ldrb	r4, [r1, #20]
    df56:	7c8b      	ldrb	r3, [r1, #18]
    df58:	7ccd      	ldrb	r5, [r1, #19]
    df5a:	405c      	eors	r4, r3
    df5c:	7d4b      	ldrb	r3, [r1, #21]
    df5e:	8882      	ldrh	r2, [r0, #4]
    df60:	406b      	eors	r3, r5
    df62:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    df66:	7e86      	ldrb	r6, [r0, #26]
    df68:	4062      	eors	r2, r4
    df6a:	2300      	movs	r3, #0
    df6c:	b2d5      	uxtb	r5, r2
    df6e:	0a12      	lsrs	r2, r2, #8
    df70:	fa95 f5a5 	rbit	r5, r5
    df74:	fa92 f2a2 	rbit	r2, r2
    df78:	0e2d      	lsrs	r5, r5, #24
    df7a:	0e12      	lsrs	r2, r2, #24
    df7c:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
    df80:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    df84:	1c5b      	adds	r3, r3, #1
    df86:	4422      	add	r2, r4
    df88:	b2db      	uxtb	r3, r3
    df8a:	b292      	uxth	r2, r2
    df8c:	2b03      	cmp	r3, #3
    df8e:	d3ed      	bcc.n	df6c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x38>
    df90:	4062      	eors	r2, r4
    df92:	2325      	movs	r3, #37	; 0x25
    df94:	fbb2 f4f3 	udiv	r4, r2, r3
    df98:	fb03 2314 	mls	r3, r3, r4, r2
    df9c:	eb01 04d3 	add.w	r4, r1, r3, lsr #3
    dfa0:	76c3      	strb	r3, [r0, #27]
    dfa2:	f003 0707 	and.w	r7, r3, #7
    dfa6:	7b24      	ldrb	r4, [r4, #12]
    dfa8:	2501      	movs	r5, #1
    dfaa:	fa05 f707 	lsl.w	r7, r5, r7
    dfae:	423c      	tst	r4, r7
    dfb0:	d001      	beq.n	dfb6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x82>
    dfb2:	7703      	strb	r3, [r0, #28]
    dfb4:	e01a      	b.n	dfec <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
    dfb6:	4356      	muls	r6, r2
    dfb8:	0c32      	lsrs	r2, r6, #16
    dfba:	1c52      	adds	r2, r2, #1
    dfbc:	b2d2      	uxtb	r2, r2
    dfbe:	2400      	movs	r4, #0
    dfc0:	1903      	adds	r3, r0, r4
    dfc2:	7d5b      	ldrb	r3, [r3, #21]
    dfc4:	4293      	cmp	r3, r2
    dfc6:	d313      	bcc.n	dff0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xbc>
    dfc8:	2300      	movs	r3, #0
    dfca:	190e      	adds	r6, r1, r4
    dfcc:	7b36      	ldrb	r6, [r6, #12]
    dfce:	fa05 f703 	lsl.w	r7, r5, r3
    dfd2:	423e      	tst	r6, r7
    dfd4:	d001      	beq.n	dfda <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xa6>
    dfd6:	1e52      	subs	r2, r2, #1
    dfd8:	b2d2      	uxtb	r2, r2
    dfda:	b122      	cbz	r2, dfe6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb2>
    dfdc:	1c5b      	adds	r3, r3, #1
    dfde:	b2db      	uxtb	r3, r3
    dfe0:	2b08      	cmp	r3, #8
    dfe2:	d3f4      	bcc.n	dfce <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x9a>
    dfe4:	e006      	b.n	dff4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xc0>
    dfe6:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    dfea:	7701      	strb	r1, [r0, #28]
    dfec:	2000      	movs	r0, #0
    dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dff0:	1ad2      	subs	r2, r2, r3
    dff2:	b2d2      	uxtb	r2, r2
    dff4:	1c64      	adds	r4, r4, #1
    dff6:	b2e4      	uxtb	r4, r4
    dff8:	2c05      	cmp	r4, #5
    dffa:	d3e1      	bcc.n	dfc0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8c>
    dffc:	201f      	movs	r0, #31
    dffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e000:	b570      	push	{r4, r5, r6, lr}
    e002:	4605      	mov	r5, r0
    e004:	7c08      	ldrb	r0, [r1, #16]
    e006:	460e      	mov	r6, r1
    e008:	f000 001f 	and.w	r0, r0, #31
    e00c:	7408      	strb	r0, [r1, #16]
    e00e:	2000      	movs	r0, #0
    e010:	76a8      	strb	r0, [r5, #26]
    e012:	4604      	mov	r4, r0
    e014:	1930      	adds	r0, r6, r4
    e016:	7b00      	ldrb	r0, [r0, #12]
    e018:	f000 f811 	bl	e03e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10a>
    e01c:	1929      	adds	r1, r5, r4
    e01e:	1c64      	adds	r4, r4, #1
    e020:	7548      	strb	r0, [r1, #21]
    e022:	7ea9      	ldrb	r1, [r5, #26]
    e024:	b2e4      	uxtb	r4, r4
    e026:	4408      	add	r0, r1
    e028:	76a8      	strb	r0, [r5, #26]
    e02a:	2c05      	cmp	r4, #5
    e02c:	d3f2      	bcc.n	e014 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xe0>
    e02e:	b2c0      	uxtb	r0, r0
    e030:	2825      	cmp	r0, #37	; 0x25
    e032:	d903      	bls.n	e03c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x108>
    e034:	21bf      	movs	r1, #191	; 0xbf
    e036:	2029      	movs	r0, #41	; 0x29
    e038:	f7f6 fa80 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e03c:	bd70      	pop	{r4, r5, r6, pc}
    e03e:	f000 0101 	and.w	r1, r0, #1
    e042:	0840      	lsrs	r0, r0, #1
    e044:	f000 0201 	and.w	r2, r0, #1
    e048:	4411      	add	r1, r2
    e04a:	0840      	lsrs	r0, r0, #1
    e04c:	f000 0201 	and.w	r2, r0, #1
    e050:	4411      	add	r1, r2
    e052:	0840      	lsrs	r0, r0, #1
    e054:	f000 0201 	and.w	r2, r0, #1
    e058:	4411      	add	r1, r2
    e05a:	0840      	lsrs	r0, r0, #1
    e05c:	f000 0201 	and.w	r2, r0, #1
    e060:	4411      	add	r1, r2
    e062:	0840      	lsrs	r0, r0, #1
    e064:	f000 0201 	and.w	r2, r0, #1
    e068:	4411      	add	r1, r2
    e06a:	0840      	lsrs	r0, r0, #1
    e06c:	f000 0201 	and.w	r2, r0, #1
    e070:	4411      	add	r1, r2
    e072:	eb01 0050 	add.w	r0, r1, r0, lsr #1
    e076:	4770      	bx	lr

0000e078 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    e078:	b570      	push	{r4, r5, r6, lr}
    e07a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e07e:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    e082:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    e086:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e08a:	88c0      	ldrh	r0, [r0, #6]
    e08c:	b131      	cbz	r1, e09c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e08e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e092:	d903      	bls.n	e09c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e094:	f640 5107 	movw	r1, #3335	; 0xd07
    e098:	428a      	cmp	r2, r1
    e09a:	d90b      	bls.n	e0b4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    e09c:	1f91      	subs	r1, r2, #6
    e09e:	f640 467a 	movw	r6, #3194	; 0xc7a
    e0a2:	42b1      	cmp	r1, r6
    e0a4:	d80e      	bhi.n	e0c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e0a6:	b16b      	cbz	r3, e0c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e0a8:	2b08      	cmp	r3, #8
    e0aa:	d80b      	bhi.n	e0c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e0ac:	4293      	cmp	r3, r2
    e0ae:	d209      	bcs.n	e0c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e0b0:	4294      	cmp	r4, r2
    e0b2:	d807      	bhi.n	e0c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e0b4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e0b8:	d204      	bcs.n	e0c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e0ba:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e0be:	d801      	bhi.n	e0c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e0c0:	2001      	movs	r0, #1
    e0c2:	bd70      	pop	{r4, r5, r6, pc}
    e0c4:	2000      	movs	r0, #0
    e0c6:	bd70      	pop	{r4, r5, r6, pc}

0000e0c8 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    e0c8:	6842      	ldr	r2, [r0, #4]
    e0ca:	600a      	str	r2, [r1, #0]
    e0cc:	7a00      	ldrb	r0, [r0, #8]
    e0ce:	7108      	strb	r0, [r1, #4]
    e0d0:	4770      	bx	lr

0000e0d2 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    e0d2:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e0d6:	4770      	bx	lr

0000e0d8 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    e0d8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e0dc:	4770      	bx	lr

0000e0de <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    e0de:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e0e2:	4770      	bx	lr

0000e0e4 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    e0e4:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e0e8:	4770      	bx	lr

0000e0ea <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    e0ea:	8980      	ldrh	r0, [r0, #12]
    e0ec:	8008      	strh	r0, [r1, #0]
    e0ee:	4770      	bx	lr

0000e0f0 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    e0f0:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e0f4:	6008      	str	r0, [r1, #0]
    e0f6:	4770      	bx	lr

0000e0f8 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    e0f8:	6842      	ldr	r2, [r0, #4]
    e0fa:	600a      	str	r2, [r1, #0]
    e0fc:	6880      	ldr	r0, [r0, #8]
    e0fe:	6048      	str	r0, [r1, #4]
    e100:	4770      	bx	lr

0000e102 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    e102:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e106:	600a      	str	r2, [r1, #0]
    e108:	6840      	ldr	r0, [r0, #4]
    e10a:	6048      	str	r0, [r1, #4]
    e10c:	4770      	bx	lr

0000e10e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    e10e:	6842      	ldr	r2, [r0, #4]
    e110:	600a      	str	r2, [r1, #0]
    e112:	6880      	ldr	r0, [r0, #8]
    e114:	6048      	str	r0, [r1, #4]
    e116:	4770      	bx	lr

0000e118 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e118:	7800      	ldrb	r0, [r0, #0]
    e11a:	f000 0003 	and.w	r0, r0, #3
    e11e:	4770      	bx	lr

0000e120 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    e120:	7900      	ldrb	r0, [r0, #4]
    e122:	4770      	bx	lr

0000e124 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e124:	8880      	ldrh	r0, [r0, #4]
    e126:	4770      	bx	lr

0000e128 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e128:	88c0      	ldrh	r0, [r0, #6]
    e12a:	4770      	bx	lr

0000e12c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e12c:	8900      	ldrh	r0, [r0, #8]
    e12e:	4770      	bx	lr

0000e130 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e130:	8940      	ldrh	r0, [r0, #10]
    e132:	4770      	bx	lr

0000e134 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    e134:	88c0      	ldrh	r0, [r0, #6]
    e136:	4770      	bx	lr

0000e138 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    e138:	7940      	ldrb	r0, [r0, #5]
    e13a:	4770      	bx	lr

0000e13c <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e13c:	7900      	ldrb	r0, [r0, #4]
    e13e:	4770      	bx	lr

0000e140 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e140:	7900      	ldrb	r0, [r0, #4]
    e142:	4770      	bx	lr

0000e144 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e144:	8901      	ldrh	r1, [r0, #8]
    e146:	291b      	cmp	r1, #27
    e148:	d30c      	bcc.n	e164 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e14a:	8941      	ldrh	r1, [r0, #10]
    e14c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e150:	4291      	cmp	r1, r2
    e152:	d307      	bcc.n	e164 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e154:	8881      	ldrh	r1, [r0, #4]
    e156:	291b      	cmp	r1, #27
    e158:	d304      	bcc.n	e164 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e15a:	88c0      	ldrh	r0, [r0, #6]
    e15c:	4290      	cmp	r0, r2
    e15e:	d301      	bcc.n	e164 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e160:	2001      	movs	r0, #1
    e162:	4770      	bx	lr
    e164:	2000      	movs	r0, #0
    e166:	4770      	bx	lr

0000e168 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e168:	b510      	push	{r4, lr}
    e16a:	29fb      	cmp	r1, #251	; 0xfb
    e16c:	d904      	bls.n	e178 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e16e:	f240 515b 	movw	r1, #1371	; 0x55b
    e172:	202a      	movs	r0, #42	; 0x2a
    e174:	f7f6 f9e2 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e178:	7041      	strb	r1, [r0, #1]
    e17a:	bd10      	pop	{r4, pc}

0000e17c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e17c:	7901      	ldrb	r1, [r0, #4]
    e17e:	0749      	lsls	r1, r1, #29
    e180:	d004      	beq.n	e18c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e182:	7940      	ldrb	r0, [r0, #5]
    e184:	0740      	lsls	r0, r0, #29
    e186:	d001      	beq.n	e18c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e188:	2001      	movs	r0, #1
    e18a:	4770      	bx	lr
    e18c:	2000      	movs	r0, #0
    e18e:	4770      	bx	lr

0000e190 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e190:	7900      	ldrb	r0, [r0, #4]
    e192:	4770      	bx	lr

0000e194 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e194:	7940      	ldrb	r0, [r0, #5]
    e196:	4770      	bx	lr

0000e198 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e198:	7101      	strb	r1, [r0, #4]
    e19a:	4770      	bx	lr

0000e19c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e19c:	7141      	strb	r1, [r0, #5]
    e19e:	4770      	bx	lr

0000e1a0 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    e1a0:	b510      	push	{r4, lr}
    e1a2:	2a1b      	cmp	r2, #27
    e1a4:	d904      	bls.n	e1b0 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    e1a6:	f240 31c2 	movw	r1, #962	; 0x3c2
    e1aa:	202a      	movs	r0, #42	; 0x2a
    e1ac:	f7f6 f9c6 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1b0:	7042      	strb	r2, [r0, #1]
    e1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1b6:	1cc0      	adds	r0, r0, #3
    e1b8:	f7fe bbc3 	b.w	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e1bc <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    e1bc:	6809      	ldr	r1, [r1, #0]
    e1be:	60c1      	str	r1, [r0, #12]
    e1c0:	4770      	bx	lr

0000e1c2 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    e1c2:	680a      	ldr	r2, [r1, #0]
    e1c4:	6042      	str	r2, [r0, #4]
    e1c6:	6849      	ldr	r1, [r1, #4]
    e1c8:	6081      	str	r1, [r0, #8]
    e1ca:	4770      	bx	lr

0000e1cc <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e1cc:	680a      	ldr	r2, [r1, #0]
    e1ce:	6042      	str	r2, [r0, #4]
    e1d0:	6849      	ldr	r1, [r1, #4]
    e1d2:	6081      	str	r1, [r0, #8]
    e1d4:	4770      	bx	lr

0000e1d6 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    e1d6:	680a      	ldr	r2, [r1, #0]
    e1d8:	6042      	str	r2, [r0, #4]
    e1da:	6849      	ldr	r1, [r1, #4]
    e1dc:	6081      	str	r1, [r0, #8]
    e1de:	4770      	bx	lr

0000e1e0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e1e0:	7802      	ldrb	r2, [r0, #0]
    e1e2:	f001 0103 	and.w	r1, r1, #3
    e1e6:	f022 0203 	bic.w	r2, r2, #3
    e1ea:	430a      	orrs	r2, r1
    e1ec:	7002      	strb	r2, [r0, #0]
    e1ee:	4770      	bx	lr

0000e1f0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e1f0:	7101      	strb	r1, [r0, #4]
    e1f2:	0a09      	lsrs	r1, r1, #8
    e1f4:	7141      	strb	r1, [r0, #5]
    e1f6:	4770      	bx	lr

0000e1f8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e1f8:	7181      	strb	r1, [r0, #6]
    e1fa:	0a09      	lsrs	r1, r1, #8
    e1fc:	71c1      	strb	r1, [r0, #7]
    e1fe:	4770      	bx	lr

0000e200 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e200:	7201      	strb	r1, [r0, #8]
    e202:	0a09      	lsrs	r1, r1, #8
    e204:	7241      	strb	r1, [r0, #9]
    e206:	4770      	bx	lr

0000e208 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e208:	7281      	strb	r1, [r0, #10]
    e20a:	0a09      	lsrs	r1, r1, #8
    e20c:	72c1      	strb	r1, [r0, #11]
    e20e:	4770      	bx	lr

0000e210 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    e210:	b570      	push	{r4, r5, r6, lr}
    e212:	7802      	ldrb	r2, [r0, #0]
    e214:	f002 020f 	and.w	r2, r2, #15
    e218:	2a03      	cmp	r2, #3
    e21a:	d02c      	beq.n	e276 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    e21c:	2a05      	cmp	r2, #5
    e21e:	d12d      	bne.n	e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e220:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e224:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    e228:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    e22c:	7d83      	ldrb	r3, [r0, #22]
    e22e:	b141      	cbz	r1, e242 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    e230:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e234:	d905      	bls.n	e242 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    e236:	f640 5107 	movw	r1, #3335	; 0xd07
    e23a:	428a      	cmp	r2, r1
    e23c:	d801      	bhi.n	e242 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    e23e:	2101      	movs	r1, #1
    e240:	e000      	b.n	e244 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    e242:	2100      	movs	r1, #0
    e244:	7846      	ldrb	r6, [r0, #1]
    e246:	2e22      	cmp	r6, #34	; 0x22
    e248:	d118      	bne.n	e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e24a:	b959      	cbnz	r1, e264 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    e24c:	1f91      	subs	r1, r2, #6
    e24e:	f640 467a 	movw	r6, #3194	; 0xc7a
    e252:	42b1      	cmp	r1, r6
    e254:	d812      	bhi.n	e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e256:	b18b      	cbz	r3, e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e258:	2b08      	cmp	r3, #8
    e25a:	d80f      	bhi.n	e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e25c:	4293      	cmp	r3, r2
    e25e:	d20d      	bcs.n	e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e260:	4294      	cmp	r4, r2
    e262:	d80b      	bhi.n	e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e264:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e268:	d208      	bcs.n	e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e26a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e26e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e272:	d905      	bls.n	e280 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    e274:	e002      	b.n	e27c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    e276:	7840      	ldrb	r0, [r0, #1]
    e278:	280c      	cmp	r0, #12
    e27a:	d001      	beq.n	e280 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    e27c:	2000      	movs	r0, #0
    e27e:	bd70      	pop	{r4, r5, r6, pc}
    e280:	2001      	movs	r0, #1
    e282:	bd70      	pop	{r4, r5, r6, pc}

0000e284 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    e284:	b570      	push	{r4, r5, r6, lr}
    e286:	4614      	mov	r4, r2
    e288:	4605      	mov	r5, r0
    e28a:	2a1f      	cmp	r2, #31
    e28c:	d903      	bls.n	e296 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    e28e:	21b2      	movs	r1, #178	; 0xb2
    e290:	202a      	movs	r0, #42	; 0x2a
    e292:	f7f6 f953 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e296:	f105 0009 	add.w	r0, r5, #9
    e29a:	f7fe fb52 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e29e:	1da4      	adds	r4, r4, #6
    e2a0:	706c      	strb	r4, [r5, #1]
    e2a2:	bd70      	pop	{r4, r5, r6, pc}

0000e2a4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e2a4:	b510      	push	{r4, lr}
    e2a6:	7802      	ldrb	r2, [r0, #0]
    e2a8:	f001 030f 	and.w	r3, r1, #15
    e2ac:	f022 020f 	bic.w	r2, r2, #15
    e2b0:	431a      	orrs	r2, r3
    e2b2:	7002      	strb	r2, [r0, #0]
    e2b4:	2907      	cmp	r1, #7
    e2b6:	d20c      	bcs.n	e2d2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e2b8:	e8df f001 	tbb	[pc, r1]
    e2bc:	06040604 	.word	0x06040604
    e2c0:	00040804 	.word	0x00040804
    e2c4:	2106      	movs	r1, #6
    e2c6:	e002      	b.n	e2ce <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e2c8:	210c      	movs	r1, #12
    e2ca:	e000      	b.n	e2ce <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e2cc:	2122      	movs	r1, #34	; 0x22
    e2ce:	7041      	strb	r1, [r0, #1]
    e2d0:	bd10      	pop	{r4, pc}
    e2d2:	216e      	movs	r1, #110	; 0x6e
    e2d4:	202a      	movs	r0, #42	; 0x2a
    e2d6:	f7f6 f931 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e2da <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e2da:	680a      	ldr	r2, [r1, #0]
    e2dc:	f840 2f09 	str.w	r2, [r0, #9]!
    e2e0:	8889      	ldrh	r1, [r1, #4]
    e2e2:	8081      	strh	r1, [r0, #4]
    e2e4:	4770      	bx	lr

0000e2e6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e2e6:	7802      	ldrb	r2, [r0, #0]
    e2e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e2ec:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e2f0:	7002      	strb	r2, [r0, #0]
    e2f2:	4770      	bx	lr

0000e2f4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e2f4:	680a      	ldr	r2, [r1, #0]
    e2f6:	f840 2f03 	str.w	r2, [r0, #3]!
    e2fa:	8889      	ldrh	r1, [r1, #4]
    e2fc:	8081      	strh	r1, [r0, #4]
    e2fe:	4770      	bx	lr

0000e300 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e300:	7802      	ldrb	r2, [r0, #0]
    e302:	2340      	movs	r3, #64	; 0x40
    e304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e308:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e30c:	430a      	orrs	r2, r1
    e30e:	7002      	strb	r2, [r0, #0]
    e310:	4770      	bx	lr

0000e312 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    e312:	b570      	push	{r4, r5, r6, lr}
    e314:	4614      	mov	r4, r2
    e316:	4605      	mov	r5, r0
    e318:	2a1f      	cmp	r2, #31
    e31a:	d903      	bls.n	e324 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    e31c:	21d4      	movs	r1, #212	; 0xd4
    e31e:	202a      	movs	r0, #42	; 0x2a
    e320:	f7f6 f90c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e324:	f105 0009 	add.w	r0, r5, #9
    e328:	f7fe fb0b 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e32c:	1da4      	adds	r4, r4, #6
    e32e:	706c      	strb	r4, [r5, #1]
    e330:	bd70      	pop	{r4, r5, r6, pc}

0000e332 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e332:	2101      	movs	r1, #1
    e334:	f000 b853 	b.w	e3de <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000e338 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e338:	6841      	ldr	r1, [r0, #4]
    e33a:	2200      	movs	r2, #0
    e33c:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    e340:	2b00      	cmp	r3, #0
    e342:	d004      	beq.n	e34e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e344:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    e348:	6840      	ldr	r0, [r0, #4]
    e34a:	f000 bc63 	b.w	ec14 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    e34e:	4770      	bx	lr
    e350:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e354:	460e      	mov	r6, r1
    e356:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e35a:	4617      	mov	r7, r2
    e35c:	39ff      	subs	r1, #255	; 0xff
    e35e:	d014      	beq.n	e38a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    e360:	8030      	strh	r0, [r6, #0]
    e362:	2100      	movs	r1, #0
    e364:	7171      	strb	r1, [r6, #5]
    e366:	f7f6 fcf9 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e36a:	4604      	mov	r4, r0
    e36c:	f7ff f91e 	bl	d5ac <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e370:	0005      	movs	r5, r0
    e372:	d00a      	beq.n	e38a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    e374:	4620      	mov	r0, r4
    e376:	4629      	mov	r1, r5
    e378:	aa01      	add	r2, sp, #4
    e37a:	f7ff f93a 	bl	d5f2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e37e:	8070      	strh	r0, [r6, #2]
    e380:	b130      	cbz	r0, e390 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    e382:	28fb      	cmp	r0, #251	; 0xfb
    e384:	d906      	bls.n	e394 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    e386:	21c9      	movs	r1, #201	; 0xc9
    e388:	e026      	b.n	e3d8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e38a:	2000      	movs	r0, #0
    e38c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e390:	21c8      	movs	r1, #200	; 0xc8
    e392:	e021      	b.n	e3d8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e394:	9801      	ldr	r0, [sp, #4]
    e396:	f7ff febf 	bl	e118 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e39a:	2801      	cmp	r0, #1
    e39c:	d003      	beq.n	e3a6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    e39e:	2802      	cmp	r0, #2
    e3a0:	d001      	beq.n	e3a6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    e3a2:	21d8      	movs	r1, #216	; 0xd8
    e3a4:	e018      	b.n	e3d8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e3a6:	7130      	strb	r0, [r6, #4]
    e3a8:	4629      	mov	r1, r5
    e3aa:	8873      	ldrh	r3, [r6, #2]
    e3ac:	2503      	movs	r5, #3
    e3ae:	4620      	mov	r0, r4
    e3b0:	463a      	mov	r2, r7
    e3b2:	9500      	str	r5, [sp, #0]
    e3b4:	f7fe ffef 	bl	d396 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e3b8:	4620      	mov	r0, r4
    e3ba:	60b7      	str	r7, [r6, #8]
    e3bc:	f7ff f8a5 	bl	d50a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e3c0:	b138      	cbz	r0, e3d2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    e3c2:	2100      	movs	r1, #0
    e3c4:	4620      	mov	r0, r4
    e3c6:	460a      	mov	r2, r1
    e3c8:	f7ff f9e9 	bl	d79e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e3cc:	b118      	cbz	r0, e3d6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    e3ce:	2001      	movs	r0, #1
    e3d0:	e7dc      	b.n	e38c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    e3d2:	21e8      	movs	r1, #232	; 0xe8
    e3d4:	e000      	b.n	e3d8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e3d6:	21ed      	movs	r1, #237	; 0xed
    e3d8:	202b      	movs	r0, #43	; 0x2b
    e3da:	f7f6 f8af 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3de:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e3e2:	4604      	mov	r4, r0
    e3e4:	460e      	mov	r6, r1
    e3e6:	2000      	movs	r0, #0
    e3e8:	f7f6 fa8a 	bl	4900 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e3ec:	4605      	mov	r5, r0
    e3ee:	2000      	movs	r0, #0
    e3f0:	b916      	cbnz	r6, e3f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    e3f2:	2001      	movs	r0, #1
    e3f4:	f7f6 fa84 	bl	4900 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e3f8:	2600      	movs	r6, #0
    e3fa:	46b0      	mov	r8, r6
    e3fc:	182f      	adds	r7, r5, r0
    e3fe:	e017      	b.n	e430 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    e400:	8820      	ldrh	r0, [r4, #0]
    e402:	1c40      	adds	r0, r0, #1
    e404:	b280      	uxth	r0, r0
    e406:	8020      	strh	r0, [r4, #0]
    e408:	42b8      	cmp	r0, r7
    e40a:	d302      	bcc.n	e412 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    e40c:	4640      	mov	r0, r8
    e40e:	f8a4 8000 	strh.w	r8, [r4]
    e412:	b280      	uxth	r0, r0
    e414:	42a8      	cmp	r0, r5
    e416:	d304      	bcc.n	e422 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    e418:	42b8      	cmp	r0, r7
    e41a:	d202      	bcs.n	e422 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    e41c:	2000      	movs	r0, #0
    e41e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e422:	4669      	mov	r1, sp
    e424:	f7ff fbd7 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e428:	2800      	cmp	r0, #0
    e42a:	d0f8      	beq.n	e41e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    e42c:	1c76      	adds	r6, r6, #1
    e42e:	b2f6      	uxtb	r6, r6
    e430:	42b7      	cmp	r7, r6
    e432:	d8e5      	bhi.n	e400 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    e434:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e438:	8020      	strh	r0, [r4, #0]
    e43a:	2012      	movs	r0, #18
    e43c:	e7ef      	b.n	e41e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000e43e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e43e:	b570      	push	{r4, r5, r6, lr}
    e440:	8050      	strh	r0, [r2, #2]
    e442:	890c      	ldrh	r4, [r1, #8]
    e444:	8094      	strh	r4, [r2, #4]
    e446:	898b      	ldrh	r3, [r1, #12]
    e448:	80d3      	strh	r3, [r2, #6]
    e44a:	8948      	ldrh	r0, [r1, #10]
    e44c:	8110      	strh	r0, [r2, #8]
    e44e:	89cd      	ldrh	r5, [r1, #14]
    e450:	8155      	strh	r5, [r2, #10]
    e452:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e454:	42ae      	cmp	r6, r5
    e456:	d108      	bne.n	e46a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e458:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e45a:	4285      	cmp	r5, r0
    e45c:	d105      	bne.n	e46a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e45e:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e460:	429d      	cmp	r5, r3
    e462:	d102      	bne.n	e46a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e464:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e466:	42a3      	cmp	r3, r4
    e468:	d001      	beq.n	e46e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e46a:	2301      	movs	r3, #1
    e46c:	e000      	b.n	e470 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e46e:	2300      	movs	r3, #0
    e470:	7313      	strb	r3, [r2, #12]
    e472:	8548      	strh	r0, [r1, #42]	; 0x2a
    e474:	8950      	ldrh	r0, [r2, #10]
    e476:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e478:	8890      	ldrh	r0, [r2, #4]
    e47a:	8588      	strh	r0, [r1, #44]	; 0x2c
    e47c:	88d0      	ldrh	r0, [r2, #6]
    e47e:	8608      	strh	r0, [r1, #48]	; 0x30
    e480:	2001      	movs	r0, #1
    e482:	7010      	strb	r0, [r2, #0]
    e484:	bd70      	pop	{r4, r5, r6, pc}

0000e486 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e486:	b510      	push	{r4, lr}
    e488:	888c      	ldrh	r4, [r1, #4]
    e48a:	890a      	ldrh	r2, [r1, #8]
    e48c:	884b      	ldrh	r3, [r1, #2]
    e48e:	88c9      	ldrh	r1, [r1, #6]
    e490:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    e494:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    e498:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
    e49c:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    e4a0:	bd10      	pop	{r4, pc}

0000e4a2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e4a2:	b570      	push	{r4, r5, r6, lr}
    e4a4:	4615      	mov	r5, r2
    e4a6:	460c      	mov	r4, r1
    e4a8:	f000 f8c3 	bl	e632 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e4ac:	3096      	adds	r0, #150	; 0x96
    e4ae:	4428      	add	r0, r5
    e4b0:	42a0      	cmp	r0, r4
    e4b2:	d801      	bhi.n	e4b8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e4b4:	1a20      	subs	r0, r4, r0
    e4b6:	bd70      	pop	{r4, r5, r6, pc}
    e4b8:	2000      	movs	r0, #0
    e4ba:	bd70      	pop	{r4, r5, r6, pc}

0000e4bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4c0:	4604      	mov	r4, r0
    e4c2:	8e47      	ldrh	r7, [r0, #50]	; 0x32
    e4c4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
    e4c6:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
    e4ca:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    e4cc:	4285      	cmp	r5, r0
    e4ce:	d300      	bcc.n	e4d2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    e4d0:	4605      	mov	r5, r0
    e4d2:	4620      	mov	r0, r4
    e4d4:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    e4d8:	f000 f89b 	bl	e612 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e4dc:	4601      	mov	r1, r0
    e4de:	8665      	strh	r5, [r4, #50]	; 0x32
    e4e0:	86e1      	strh	r1, [r4, #54]	; 0x36
    e4e2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    e4e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e4e8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    e4ea:	4680      	mov	r8, r0
    e4ec:	42aa      	cmp	r2, r5
    e4ee:	d200      	bcs.n	e4f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e4f0:	462a      	mov	r2, r5
    e4f2:	428b      	cmp	r3, r1
    e4f4:	d200      	bcs.n	e4f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e4f6:	460b      	mov	r3, r1
    e4f8:	8202      	strh	r2, [r0, #16]
    e4fa:	f8a8 3012 	strh.w	r3, [r8, #18]
    e4fe:	42bd      	cmp	r5, r7
    e500:	d101      	bne.n	e506 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    e502:	42b1      	cmp	r1, r6
    e504:	d001      	beq.n	e50a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e506:	2001      	movs	r0, #1
    e508:	e000      	b.n	e50c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e50a:	2000      	movs	r0, #0
    e50c:	4681      	mov	r9, r0
    e50e:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
    e512:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    e514:	8e27      	ldrh	r7, [r4, #48]	; 0x30
    e516:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    e518:	4285      	cmp	r5, r0
    e51a:	d300      	bcc.n	e51e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    e51c:	4605      	mov	r5, r0
    e51e:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    e522:	4620      	mov	r0, r4
    e524:	f000 f87d 	bl	e622 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e528:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    e52c:	2902      	cmp	r1, #2
    e52e:	d108      	bne.n	e542 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    e530:	42af      	cmp	r7, r5
    e532:	d200      	bcs.n	e536 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    e534:	463d      	mov	r5, r7
    e536:	4286      	cmp	r6, r0
    e538:	d200      	bcs.n	e53c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    e53a:	4630      	mov	r0, r6
    e53c:	2100      	movs	r1, #0
    e53e:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    e542:	f8a8 5008 	strh.w	r5, [r8, #8]
    e546:	f8a8 000c 	strh.w	r0, [r8, #12]
    e54a:	42bd      	cmp	r5, r7
    e54c:	d101      	bne.n	e552 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    e54e:	42b0      	cmp	r0, r6
    e550:	d001      	beq.n	e556 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e552:	2001      	movs	r0, #1
    e554:	e000      	b.n	e558 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    e556:	2000      	movs	r0, #0
    e558:	ea40 0009 	orr.w	r0, r0, r9
    e55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e560 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e564:	4616      	mov	r6, r2
    e566:	460f      	mov	r7, r1
    e568:	4604      	mov	r4, r0
    e56a:	f000 f862 	bl	e632 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e56e:	4605      	mov	r5, r0
    e570:	463a      	mov	r2, r7
    e572:	6861      	ldr	r1, [r4, #4]
    e574:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e576:	f000 f847 	bl	e608 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e57a:	19a9      	adds	r1, r5, r6
    e57c:	4281      	cmp	r1, r0
    e57e:	d300      	bcc.n	e582 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e580:	4608      	mov	r0, r1
    e582:	62e0      	str	r0, [r4, #44]	; 0x2c
    e584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e588 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e588:	221b      	movs	r2, #27
    e58a:	8402      	strh	r2, [r0, #32]
    e58c:	8382      	strh	r2, [r0, #28]
    e58e:	82c2      	strh	r2, [r0, #22]
    e590:	8282      	strh	r2, [r0, #20]
    e592:	8142      	strh	r2, [r0, #10]
    e594:	8202      	strh	r2, [r0, #16]
    e596:	8102      	strh	r2, [r0, #8]
    e598:	8542      	strh	r2, [r0, #42]	; 0x2a
    e59a:	8582      	strh	r2, [r0, #44]	; 0x2c
    e59c:	8482      	strh	r2, [r0, #36]	; 0x24
    e59e:	2900      	cmp	r1, #0
    e5a0:	d10a      	bne.n	e5b8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e5a2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e5a6:	8441      	strh	r1, [r0, #34]	; 0x22
    e5a8:	83c1      	strh	r1, [r0, #30]
    e5aa:	8341      	strh	r1, [r0, #26]
    e5ac:	8301      	strh	r1, [r0, #24]
    e5ae:	81c1      	strh	r1, [r0, #14]
    e5b0:	8241      	strh	r1, [r0, #18]
    e5b2:	8181      	strh	r1, [r0, #12]
    e5b4:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e5b6:	8601      	strh	r1, [r0, #48]	; 0x30
    e5b8:	4770      	bx	lr

0000e5ba <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e5ba:	6800      	ldr	r0, [r0, #0]
    e5bc:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e5c0:	4290      	cmp	r0, r2
    e5c2:	d903      	bls.n	e5cc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e5c4:	1a40      	subs	r0, r0, r1
    e5c6:	389c      	subs	r0, #156	; 0x9c
    e5c8:	0840      	lsrs	r0, r0, #1
    e5ca:	4770      	bx	lr
    e5cc:	2000      	movs	r0, #0
    e5ce:	4770      	bx	lr

0000e5d0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e5d0:	b510      	push	{r4, lr}
    e5d2:	9c02      	ldr	r4, [sp, #8]
    e5d4:	8281      	strh	r1, [r0, #20]
    e5d6:	82c2      	strh	r2, [r0, #22]
    e5d8:	8303      	strh	r3, [r0, #24]
    e5da:	8344      	strh	r4, [r0, #26]
    e5dc:	bd10      	pop	{r4, pc}

0000e5de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e5de:	8050      	strh	r0, [r2, #2]
    e5e0:	8a88      	ldrh	r0, [r1, #20]
    e5e2:	8090      	strh	r0, [r2, #4]
    e5e4:	8ac8      	ldrh	r0, [r1, #22]
    e5e6:	80d0      	strh	r0, [r2, #6]
    e5e8:	8b08      	ldrh	r0, [r1, #24]
    e5ea:	8110      	strh	r0, [r2, #8]
    e5ec:	8b48      	ldrh	r0, [r1, #26]
    e5ee:	8150      	strh	r0, [r2, #10]
    e5f0:	2001      	movs	r0, #1
    e5f2:	7010      	strb	r0, [r2, #0]
    e5f4:	4770      	bx	lr
    e5f6:	2902      	cmp	r1, #2
    e5f8:	d003      	beq.n	e602 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e5fa:	00c0      	lsls	r0, r0, #3
    e5fc:	3070      	adds	r0, #112	; 0x70
    e5fe:	b280      	uxth	r0, r0
    e600:	4770      	bx	lr
    e602:	0080      	lsls	r0, r0, #2
    e604:	303c      	adds	r0, #60	; 0x3c
    e606:	e7fa      	b.n	e5fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e608:	4288      	cmp	r0, r1
    e60a:	d300      	bcc.n	e60e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e60c:	4608      	mov	r0, r1
    e60e:	1a80      	subs	r0, r0, r2
    e610:	4770      	bx	lr
    e612:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e616:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e61a:	4281      	cmp	r1, r0
    e61c:	d200      	bcs.n	e620 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e61e:	4608      	mov	r0, r1
    e620:	4770      	bx	lr
    e622:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    e626:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
    e62a:	4281      	cmp	r1, r0
    e62c:	d200      	bcs.n	e630 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e62e:	4608      	mov	r0, r1
    e630:	4770      	bx	lr
    e632:	2196      	movs	r1, #150	; 0x96
    e634:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    e638:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    e63c:	f000 b800 	b.w	e640 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e644:	460d      	mov	r5, r1
    e646:	4606      	mov	r6, r0
    e648:	4698      	mov	r8, r3
    e64a:	4617      	mov	r7, r2
    e64c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    e64e:	4611      	mov	r1, r2
    e650:	f7ff ffd1 	bl	e5f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e654:	4604      	mov	r4, r0
    e656:	4639      	mov	r1, r7
    e658:	4630      	mov	r0, r6
    e65a:	f7ff ffe2 	bl	e622 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e65e:	42a0      	cmp	r0, r4
    e660:	d200      	bcs.n	e664 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e662:	4604      	mov	r4, r0
    e664:	8f30      	ldrh	r0, [r6, #56]	; 0x38
    e666:	4641      	mov	r1, r8
    e668:	f7ff ffc5 	bl	e5f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e66c:	4607      	mov	r7, r0
    e66e:	4641      	mov	r1, r8
    e670:	4630      	mov	r0, r6
    e672:	f7ff ffce 	bl	e612 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e676:	42b8      	cmp	r0, r7
    e678:	d300      	bcc.n	e67c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e67a:	4638      	mov	r0, r7
    e67c:	4420      	add	r0, r4
    e67e:	4428      	add	r0, r5
    e680:	1d80      	adds	r0, r0, #6
    e682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e686:	2801      	cmp	r0, #1
    e688:	d102      	bne.n	e690 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    e68a:	7948      	ldrb	r0, [r1, #5]
    e68c:	0980      	lsrs	r0, r0, #6
    e68e:	d001      	beq.n	e694 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e690:	2000      	movs	r0, #0
    e692:	4770      	bx	lr
    e694:	2001      	movs	r0, #1
    e696:	4770      	bx	lr
    e698:	2801      	cmp	r0, #1
    e69a:	d106      	bne.n	e6aa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e69c:	7948      	ldrb	r0, [r1, #5]
    e69e:	2101      	movs	r1, #1
    e6a0:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e6a4:	d101      	bne.n	e6aa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e6a6:	2001      	movs	r0, #1
    e6a8:	4770      	bx	lr
    e6aa:	2000      	movs	r0, #0
    e6ac:	4770      	bx	lr
    e6ae:	2802      	cmp	r0, #2
    e6b0:	d003      	beq.n	e6ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    e6b2:	2803      	cmp	r0, #3
    e6b4:	d001      	beq.n	e6ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    e6b6:	2000      	movs	r0, #0
    e6b8:	4770      	bx	lr
    e6ba:	2001      	movs	r0, #1
    e6bc:	4770      	bx	lr

0000e6be <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e6be:	b510      	push	{r4, lr}
    e6c0:	4604      	mov	r4, r0
    e6c2:	7c00      	ldrb	r0, [r0, #16]
    e6c4:	f7ff fff3 	bl	e6ae <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    e6c8:	b148      	cbz	r0, e6de <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e6ca:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    e6ce:	f104 0148 	add.w	r1, r4, #72	; 0x48
    e6d2:	f7ff fa3d 	bl	db50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e6d6:	2808      	cmp	r0, #8
    e6d8:	d001      	beq.n	e6de <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e6da:	2001      	movs	r0, #1
    e6dc:	bd10      	pop	{r4, pc}
    e6de:	7c20      	ldrb	r0, [r4, #16]
    e6e0:	b118      	cbz	r0, e6ea <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e6e2:	2802      	cmp	r0, #2
    e6e4:	d001      	beq.n	e6ea <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e6e6:	7de0      	ldrb	r0, [r4, #23]
    e6e8:	bd10      	pop	{r4, pc}
    e6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6ee:	2000      	movs	r0, #0
    e6f0:	f7f6 bdbe 	b.w	5270 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e6f4 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>:
    e6f4:	4770      	bx	lr

0000e6f6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e6f6:	b508      	push	{r3, lr}
    e6f8:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    e6fc:	f88d 1000 	strb.w	r1, [sp]
    e700:	9900      	ldr	r1, [sp, #0]
    e702:	9100      	str	r1, [sp, #0]
    e704:	f89d 1000 	ldrb.w	r1, [sp]
    e708:	b109      	cbz	r1, e70e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e70a:	2001      	movs	r0, #1
    e70c:	bd08      	pop	{r3, pc}
    e70e:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    e712:	f88d 0000 	strb.w	r0, [sp]
    e716:	9800      	ldr	r0, [sp, #0]
    e718:	9000      	str	r0, [sp, #0]
    e71a:	f89d 0000 	ldrb.w	r0, [sp]
    e71e:	2000      	movs	r0, #0
    e720:	bd08      	pop	{r3, pc}

0000e722 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e722:	20ff      	movs	r0, #255	; 0xff
    e724:	7008      	strb	r0, [r1, #0]
    e726:	4770      	bx	lr

0000e728 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e728:	b510      	push	{r4, lr}
    e72a:	4604      	mov	r4, r0
    e72c:	22dc      	movs	r2, #220	; 0xdc
    e72e:	2100      	movs	r1, #0
    e730:	f7fe f981 	bl	ca36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e734:	20ff      	movs	r0, #255	; 0xff
    e736:	7020      	strb	r0, [r4, #0]
    e738:	207f      	movs	r0, #127	; 0x7f
    e73a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e73e:	2013      	movs	r0, #19
    e740:	8060      	strh	r0, [r4, #2]
    e742:	2001      	movs	r0, #1
    e744:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    e748:	2000      	movs	r0, #0
    e74a:	73a0      	strb	r0, [r4, #14]
    e74c:	f104 0020 	add.w	r0, r4, #32
    e750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e754:	f000 b967 	b.w	ea26 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e758 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e758:	7880      	ldrb	r0, [r0, #2]
    e75a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e75e:	b108      	cbz	r0, e764 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e760:	2000      	movs	r0, #0
    e762:	4770      	bx	lr
    e764:	201f      	movs	r0, #31
    e766:	4770      	bx	lr

0000e768 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e768:	f7f8 be10 	b.w	738c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38c>

0000e76c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e76c:	6880      	ldr	r0, [r0, #8]
    e76e:	4770      	bx	lr

0000e770 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e770:	2001      	movs	r0, #1
    e772:	4770      	bx	lr

0000e774 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e774:	b510      	push	{r4, lr}
    e776:	4604      	mov	r4, r0
    e778:	3020      	adds	r0, #32
    e77a:	f000 f914 	bl	e9a6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e77e:	8861      	ldrh	r1, [r4, #2]
    e780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e784:	2228      	movs	r2, #40	; 0x28
    e786:	f7f8 bfbd 	b.w	7704 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e78a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e78a:	2200      	movs	r2, #0
    e78c:	6282      	str	r2, [r0, #40]	; 0x28
    e78e:	8843      	ldrh	r3, [r0, #2]
    e790:	2b1d      	cmp	r3, #29
    e792:	d001      	beq.n	e798 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e794:	7341      	strb	r1, [r0, #13]
    e796:	4770      	bx	lr
    e798:	7342      	strb	r2, [r0, #13]
    e79a:	4770      	bx	lr

0000e79c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e79c:	2001      	movs	r0, #1
    e79e:	4770      	bx	lr

0000e7a0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e7a0:	2000      	movs	r0, #0
    e7a2:	4770      	bx	lr

0000e7a4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e7a4:	7880      	ldrb	r0, [r0, #2]
    e7a6:	f000 0001 	and.w	r0, r0, #1
    e7aa:	4770      	bx	lr

0000e7ac <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e7ac:	7880      	ldrb	r0, [r0, #2]
    e7ae:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e7b2:	4770      	bx	lr

0000e7b4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e7b4:	2001      	movs	r0, #1
    e7b6:	4770      	bx	lr

0000e7b8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e7b8:	7880      	ldrb	r0, [r0, #2]
    e7ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e7be:	4770      	bx	lr

0000e7c0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e7c0:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e7c4:	4770      	bx	lr

0000e7c6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e7c6:	7800      	ldrb	r0, [r0, #0]
    e7c8:	28ff      	cmp	r0, #255	; 0xff
    e7ca:	d001      	beq.n	e7d0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e7cc:	2001      	movs	r0, #1
    e7ce:	4770      	bx	lr
    e7d0:	2000      	movs	r0, #0
    e7d2:	4770      	bx	lr

0000e7d4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e7d4:	680a      	ldr	r2, [r1, #0]
    e7d6:	f840 2f11 	str.w	r2, [r0, #17]!
    e7da:	8889      	ldrh	r1, [r1, #4]
    e7dc:	8081      	strh	r1, [r0, #4]
    e7de:	2101      	movs	r1, #1
    e7e0:	7181      	strb	r1, [r0, #6]
    e7e2:	4770      	bx	lr

0000e7e4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e7e4:	7b00      	ldrb	r0, [r0, #12]
    e7e6:	4770      	bx	lr

0000e7e8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e7e8:	2001      	movs	r0, #1
    e7ea:	4770      	bx	lr

0000e7ec <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e7ec:	61c1      	str	r1, [r0, #28]
    e7ee:	4770      	bx	lr

0000e7f0 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    e7f0:	2300      	movs	r3, #0
    e7f2:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    e7f6:	f8a0 1066 	strh.w	r1, [r0, #102]	; 0x66
    e7fa:	f840 2f5c 	str.w	r2, [r0, #92]!
    e7fe:	2101      	movs	r1, #1
    e800:	7201      	strb	r1, [r0, #8]
    e802:	4770      	bx	lr

0000e804 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    e804:	2300      	movs	r3, #0
    e806:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    e80a:	f840 2f60 	str.w	r2, [r0, #96]!
    e80e:	8101      	strh	r1, [r0, #8]
    e810:	2101      	movs	r1, #1
    e812:	7141      	strb	r1, [r0, #5]
    e814:	4770      	bx	lr

0000e816 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e816:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
    e81a:	4770      	bx	lr

0000e81c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e81c:	b570      	push	{r4, r5, r6, lr}
    e81e:	4604      	mov	r4, r0
    e820:	7880      	ldrb	r0, [r0, #2]
    e822:	2501      	movs	r5, #1
    e824:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e828:	b138      	cbz	r0, e83a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e82a:	233c      	movs	r3, #60	; 0x3c
    e82c:	22ff      	movs	r2, #255	; 0xff
    e82e:	4620      	mov	r0, r4
    e830:	69e1      	ldr	r1, [r4, #28]
    e832:	f7f8 fdd1 	bl	73d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    e836:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
    e83a:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
    e83e:	bd70      	pop	{r4, r5, r6, pc}

0000e840 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e840:	7bc0      	ldrb	r0, [r0, #15]
    e842:	2800      	cmp	r0, #0
    e844:	d000      	beq.n	e848 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e846:	2001      	movs	r0, #1
    e848:	4770      	bx	lr
    e84a:	b510      	push	{r4, lr}
    e84c:	f7ff f980 	bl	db50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e850:	4604      	mov	r4, r0
    e852:	f7f7 fb89 	bl	5f68 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e856:	b138      	cbz	r0, e868 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e858:	4620      	mov	r0, r4
    e85a:	f7f7 fabd 	bl	5dd8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e85e:	b118      	cbz	r0, e868 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e860:	2110      	movs	r1, #16
    e862:	f7ff fb67 	bl	df34 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e866:	b108      	cbz	r0, e86c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e868:	2000      	movs	r0, #0
    e86a:	bd10      	pop	{r4, pc}
    e86c:	2001      	movs	r0, #1
    e86e:	bd10      	pop	{r4, pc}
    e870:	2101      	movs	r1, #1
    e872:	f7f8 ba33 	b.w	6cdc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e876:	2101      	movs	r1, #1
    e878:	f7f8 ba30 	b.w	6cdc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e880:	4604      	mov	r4, r0
    e882:	2700      	movs	r7, #0
    e884:	704f      	strb	r7, [r1, #1]
    e886:	2011      	movs	r0, #17
    e888:	460d      	mov	r5, r1
    e88a:	7008      	strb	r0, [r1, #0]
    e88c:	2220      	movs	r2, #32
    e88e:	f104 016e 	add.w	r1, r4, #110	; 0x6e
    e892:	1d28      	adds	r0, r5, #4
    e894:	f7fe f855 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e898:	2601      	movs	r6, #1
    e89a:	722e      	strb	r6, [r5, #8]
    e89c:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    e8a0:	7928      	ldrb	r0, [r5, #4]
    e8a2:	2800      	cmp	r0, #0
    e8a4:	d110      	bne.n	e8c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    e8a6:	88e8      	ldrh	r0, [r5, #6]
    e8a8:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    e8ac:	69e0      	ldr	r0, [r4, #28]
    e8ae:	7c41      	ldrb	r1, [r0, #17]
    e8b0:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    e8b4:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
    e8b8:	8800      	ldrh	r0, [r0, #0]
    e8ba:	f7f6 fa4f 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e8be:	f7fe ff22 	bl	d706 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e8c2:	69e0      	ldr	r0, [r4, #28]
    e8c4:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    e8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8d0:	4604      	mov	r4, r0
    e8d2:	460f      	mov	r7, r1
    e8d4:	7e40      	ldrb	r0, [r0, #25]
    e8d6:	f7f7 fa3f 	bl	5d58 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e8da:	4606      	mov	r6, r0
    e8dc:	7e20      	ldrb	r0, [r4, #24]
    e8de:	f104 0541 	add.w	r5, r4, #65	; 0x41
    e8e2:	b120      	cbz	r0, e8ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    e8e4:	b11e      	cbz	r6, e8ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    e8e6:	7e60      	ldrb	r0, [r4, #25]
    e8e8:	f7f7 fa2a 	bl	5d40 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e8ec:	b1a0      	cbz	r0, e918 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xd8>
    e8ee:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    e8f2:	2800      	cmp	r0, #0
    e8f4:	d024      	beq.n	e940 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x100>
    e8f6:	7ea0      	ldrb	r0, [r4, #26]
    e8f8:	2800      	cmp	r0, #0
    e8fa:	d021      	beq.n	e940 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x100>
    e8fc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    e900:	4629      	mov	r1, r5
    e902:	f7ff fec9 	bl	e698 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    e906:	b1a8      	cbz	r0, e934 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf4>
    e908:	f7f7 fa16 	bl	5d38 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e90c:	463a      	mov	r2, r7
    e90e:	4629      	mov	r1, r5
    e910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e914:	f7ff b8a1 	b.w	da5a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e918:	2001      	movs	r0, #1
    e91a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    e91e:	463a      	mov	r2, r7
    e920:	4629      	mov	r1, r5
    e922:	4630      	mov	r0, r6
    e924:	f7ff f899 	bl	da5a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e928:	7e61      	ldrb	r1, [r4, #25]
    e92a:	4628      	mov	r0, r5
    e92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e930:	f7f7 ba1e 	b.w	5d70 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e934:	4639      	mov	r1, r7
    e936:	4628      	mov	r0, r5
    e938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e93c:	f7ff b87c 	b.w	da38 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e944:	b510      	push	{r4, lr}
    e946:	4604      	mov	r4, r0
    e948:	4608      	mov	r0, r1
    e94a:	f7fd f8c7 	bl	badc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e94e:	7921      	ldrb	r1, [r4, #4]
    e950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e954:	2025      	movs	r0, #37	; 0x25
    e956:	f001 bace 	b.w	fef6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e95a:	b510      	push	{r4, lr}
    e95c:	4604      	mov	r4, r0
    e95e:	3026      	adds	r0, #38	; 0x26
    e960:	f7fd f86e 	bl	ba40 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e964:	2800      	cmp	r0, #0
    e966:	d102      	bne.n	e96e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    e968:	207f      	movs	r0, #127	; 0x7f
    e96a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e96e:	bd10      	pop	{r4, pc}
    e970:	7802      	ldrb	r2, [r0, #0]
    e972:	2320      	movs	r3, #32
    e974:	f022 0220 	bic.w	r2, r2, #32
    e978:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e97c:	430a      	orrs	r2, r1
    e97e:	7002      	strb	r2, [r0, #0]
    e980:	4770      	bx	lr

0000e982 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e982:	b570      	push	{r4, r5, r6, lr}
    e984:	7001      	strb	r1, [r0, #0]
    e986:	7042      	strb	r2, [r0, #1]
    e988:	4614      	mov	r4, r2
    e98a:	460d      	mov	r5, r1
    e98c:	7880      	ldrb	r0, [r0, #2]
    e98e:	f000 f87f 	bl	ea90 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e992:	fb10 f005 	smulbb	r0, r0, r5
    e996:	4360      	muls	r0, r4
    e998:	28ff      	cmp	r0, #255	; 0xff
    e99a:	d303      	bcc.n	e9a4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e99c:	215c      	movs	r1, #92	; 0x5c
    e99e:	202e      	movs	r0, #46	; 0x2e
    e9a0:	f7f5 fdcc 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a4:	bd70      	pop	{r4, r5, r6, pc}

0000e9a6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e9a6:	b510      	push	{r4, lr}
    e9a8:	4604      	mov	r4, r0
    e9aa:	7880      	ldrb	r0, [r0, #2]
    e9ac:	f000 f870 	bl	ea90 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e9b0:	7861      	ldrb	r1, [r4, #1]
    e9b2:	7822      	ldrb	r2, [r4, #0]
    e9b4:	fb11 f102 	smulbb	r1, r1, r2
    e9b8:	4348      	muls	r0, r1
    e9ba:	b2c0      	uxtb	r0, r0
    e9bc:	bd10      	pop	{r4, pc}

0000e9be <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e9be:	b510      	push	{r4, lr}
    e9c0:	4604      	mov	r4, r0
    e9c2:	f000 f84d 	bl	ea60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e9c6:	7961      	ldrb	r1, [r4, #5]
    e9c8:	1c49      	adds	r1, r1, #1
    e9ca:	b2c9      	uxtb	r1, r1
    e9cc:	7161      	strb	r1, [r4, #5]
    e9ce:	7862      	ldrb	r2, [r4, #1]
    e9d0:	4291      	cmp	r1, r2
    e9d2:	d10b      	bne.n	e9ec <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e9d4:	2200      	movs	r2, #0
    e9d6:	7162      	strb	r2, [r4, #5]
    e9d8:	78e1      	ldrb	r1, [r4, #3]
    e9da:	4301      	orrs	r1, r0
    e9dc:	70e1      	strb	r1, [r4, #3]
    e9de:	78a3      	ldrb	r3, [r4, #2]
    e9e0:	4299      	cmp	r1, r3
    e9e2:	d103      	bne.n	e9ec <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e9e4:	70e2      	strb	r2, [r4, #3]
    e9e6:	7921      	ldrb	r1, [r4, #4]
    e9e8:	1c49      	adds	r1, r1, #1
    e9ea:	7121      	strb	r1, [r4, #4]
    e9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9f0:	f000 b825 	b.w	ea3e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e9f4 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e9f4:	7081      	strb	r1, [r0, #2]
    e9f6:	4770      	bx	lr

0000e9f8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e9f8:	b570      	push	{r4, r5, r6, lr}
    e9fa:	4604      	mov	r4, r0
    e9fc:	7880      	ldrb	r0, [r0, #2]
    e9fe:	f000 f847 	bl	ea90 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ea02:	7861      	ldrb	r1, [r4, #1]
    ea04:	fb11 f500 	smulbb	r5, r1, r0
    ea08:	78e0      	ldrb	r0, [r4, #3]
    ea0a:	f000 f841 	bl	ea90 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ea0e:	7861      	ldrb	r1, [r4, #1]
    ea10:	7962      	ldrb	r2, [r4, #5]
    ea12:	fb10 2001 	smlabb	r0, r0, r1, r2
    ea16:	7821      	ldrb	r1, [r4, #0]
    ea18:	7922      	ldrb	r2, [r4, #4]
    ea1a:	1a89      	subs	r1, r1, r2
    ea1c:	fb11 f105 	smulbb	r1, r1, r5
    ea20:	1a08      	subs	r0, r1, r0
    ea22:	b2c0      	uxtb	r0, r0
    ea24:	bd70      	pop	{r4, r5, r6, pc}

0000ea26 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ea26:	2100      	movs	r1, #0
    ea28:	6001      	str	r1, [r0, #0]
    ea2a:	8081      	strh	r1, [r0, #4]
    ea2c:	2101      	movs	r1, #1
    ea2e:	7041      	strb	r1, [r0, #1]
    ea30:	7001      	strb	r1, [r0, #0]
    ea32:	4770      	bx	lr

0000ea34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ea34:	2100      	movs	r1, #0
    ea36:	70c1      	strb	r1, [r0, #3]
    ea38:	7141      	strb	r1, [r0, #5]
    ea3a:	7101      	strb	r1, [r0, #4]
    ea3c:	4770      	bx	lr
    ea3e:	b510      	push	{r4, lr}
    ea40:	2801      	cmp	r0, #1
    ea42:	d007      	beq.n	ea54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ea44:	2802      	cmp	r0, #2
    ea46:	d007      	beq.n	ea58 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ea48:	2804      	cmp	r0, #4
    ea4a:	d007      	beq.n	ea5c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ea4c:	2139      	movs	r1, #57	; 0x39
    ea4e:	202e      	movs	r0, #46	; 0x2e
    ea50:	f7f5 fd74 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea54:	2025      	movs	r0, #37	; 0x25
    ea56:	bd10      	pop	{r4, pc}
    ea58:	2026      	movs	r0, #38	; 0x26
    ea5a:	bd10      	pop	{r4, pc}
    ea5c:	2027      	movs	r0, #39	; 0x27
    ea5e:	bd10      	pop	{r4, pc}
    ea60:	4601      	mov	r1, r0
    ea62:	2000      	movs	r0, #0
    ea64:	788a      	ldrb	r2, [r1, #2]
    ea66:	07d3      	lsls	r3, r2, #31
    ea68:	d002      	beq.n	ea70 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    ea6a:	78cb      	ldrb	r3, [r1, #3]
    ea6c:	07db      	lsls	r3, r3, #31
    ea6e:	d006      	beq.n	ea7e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ea70:	0793      	lsls	r3, r2, #30
    ea72:	d506      	bpl.n	ea82 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ea74:	78cb      	ldrb	r3, [r1, #3]
    ea76:	079b      	lsls	r3, r3, #30
    ea78:	d403      	bmi.n	ea82 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ea7a:	2002      	movs	r0, #2
    ea7c:	4770      	bx	lr
    ea7e:	2001      	movs	r0, #1
    ea80:	4770      	bx	lr
    ea82:	0752      	lsls	r2, r2, #29
    ea84:	d5fc      	bpl.n	ea80 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ea86:	78c9      	ldrb	r1, [r1, #3]
    ea88:	0749      	lsls	r1, r1, #29
    ea8a:	d4f9      	bmi.n	ea80 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ea8c:	2004      	movs	r0, #4
    ea8e:	4770      	bx	lr
    ea90:	f3c0 0180 	ubfx	r1, r0, #2, #1
    ea94:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ea98:	4411      	add	r1, r2
    ea9a:	f000 0001 	and.w	r0, r0, #1
    ea9e:	4408      	add	r0, r1
    eaa0:	4770      	bx	lr

0000eaa2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    eaa2:	f240 315a 	movw	r1, #858	; 0x35a
    eaa6:	4348      	muls	r0, r1
    eaa8:	4770      	bx	lr
    eaaa:	020e      	.short	0x020e
    eaac:	0630041c 	.word	0x0630041c
    eab0:	035a0c60 	.word	0x035a0c60
    eab4:	05c506b4 	.word	0x05c506b4
    eab8:	12250bf5 	.word	0x12250bf5
    eabc:	03b101a3 	.word	0x03b101a3
    eac0:	02ef05bf 	.word	0x02ef05bf
    eac4:	09a30649 	.word	0x09a30649

0000eac8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    eac8:	b510      	push	{r4, lr}
    eaca:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
    eace:	b109      	cbz	r1, ead4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ead0:	2000      	movs	r0, #0
    ead2:	bd10      	pop	{r4, pc}
    ead4:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    ead8:	b959      	cbnz	r1, eaf2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    eada:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
    eade:	b141      	cbz	r1, eaf2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    eae0:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
    eae4:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    eae8:	4291      	cmp	r1, r2
    eaea:	d902      	bls.n	eaf2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    eaec:	f7ff fe96 	bl	e81c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eaf0:	e7ee      	b.n	ead0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    eaf2:	2001      	movs	r0, #1
    eaf4:	bd10      	pop	{r4, pc}

0000eaf6 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    eaf6:	b510      	push	{r4, lr}
    eaf8:	4604      	mov	r4, r0
    eafa:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    eafe:	b170      	cbz	r0, eb1e <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x28>
    eb00:	2001      	movs	r0, #1
    eb02:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    eb06:	4601      	mov	r1, r0
    eb08:	4620      	mov	r0, r4
    eb0a:	f7ff fe84 	bl	e816 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    eb0e:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    eb12:	2803      	cmp	r0, #3
    eb14:	d005      	beq.n	eb22 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x2c>
    eb16:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
    eb1a:	2800      	cmp	r0, #0
    eb1c:	d000      	beq.n	eb20 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x2a>
    eb1e:	200c      	movs	r0, #12
    eb20:	bd10      	pop	{r4, pc}
    eb22:	f814 0fa8 	ldrb.w	r0, [r4, #168]!
    eb26:	f7f3 fe3b 	bl	27a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    eb2a:	7820      	ldrb	r0, [r4, #0]
    eb2c:	f7f3 ff66 	bl	29fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    eb30:	f814 09a8 	ldrb.w	r0, [r4], #-168
    eb34:	f7f3 ff40 	bl	29b8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eb38:	b118      	cbz	r0, eb42 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x4c>
    eb3a:	2000      	movs	r0, #0
    eb3c:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    eb40:	bd10      	pop	{r4, pc}
    eb42:	f240 2141 	movw	r1, #577	; 0x241
    eb46:	2030      	movs	r0, #48	; 0x30
    eb48:	f7f5 fcf8 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb4c <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    eb4c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
    eb50:	4770      	bx	lr

0000eb52 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    eb52:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    eb56:	2800      	cmp	r0, #0
    eb58:	d000      	beq.n	eb5c <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xa>
    eb5a:	2001      	movs	r0, #1
    eb5c:	4770      	bx	lr

0000eb5e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    eb5e:	b50e      	push	{r1, r2, r3, lr}
    eb60:	4669      	mov	r1, sp
    eb62:	2001      	movs	r0, #1
    eb64:	f7fe ff09 	bl	d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eb68:	b138      	cbz	r0, eb7a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    eb6a:	f240 116b 	movw	r1, #363	; 0x16b
    eb6e:	2030      	movs	r0, #48	; 0x30
    eb70:	f7f5 fce4 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb74:	9802      	ldr	r0, [sp, #8]
    eb76:	f7ff ffbe 	bl	eaf6 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    eb7a:	4668      	mov	r0, sp
    eb7c:	f7f5 ff0c 	bl	4998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eb80:	2800      	cmp	r0, #0
    eb82:	d0f7      	beq.n	eb74 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    eb84:	f7f8 ffc2 	bl	7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x158>
    eb88:	2000      	movs	r0, #0
    eb8a:	bd0e      	pop	{r1, r2, r3, pc}

0000eb8c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    eb8c:	b50e      	push	{r1, r2, r3, lr}
    eb8e:	4669      	mov	r1, sp
    eb90:	2001      	movs	r0, #1
    eb92:	f7fe fef2 	bl	d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eb96:	b150      	cbz	r0, ebae <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    eb98:	f44f 61fb 	mov.w	r1, #2008	; 0x7d8
    eb9c:	2030      	movs	r0, #48	; 0x30
    eb9e:	f7f5 fccd 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eba2:	9802      	ldr	r0, [sp, #8]
    eba4:	f7ff ffd5 	bl	eb52 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    eba8:	b108      	cbz	r0, ebae <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    ebaa:	2000      	movs	r0, #0
    ebac:	bd0e      	pop	{r1, r2, r3, pc}
    ebae:	4668      	mov	r0, sp
    ebb0:	f7f5 fef2 	bl	4998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ebb4:	2800      	cmp	r0, #0
    ebb6:	d0f4      	beq.n	eba2 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    ebb8:	2000      	movs	r0, #0
    ebba:	f7fe fec2 	bl	d942 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    ebbe:	f080 0001 	eor.w	r0, r0, #1
    ebc2:	bd0e      	pop	{r1, r2, r3, pc}

0000ebc4 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>:
    ebc4:	b538      	push	{r3, r4, r5, lr}
    ebc6:	2500      	movs	r5, #0
    ebc8:	4604      	mov	r4, r0
    ebca:	f880 512c 	strb.w	r5, [r0, #300]	; 0x12c
    ebce:	f8a0 515c 	strh.w	r5, [r0, #348]	; 0x15c
    ebd2:	462b      	mov	r3, r5
    ebd4:	462a      	mov	r2, r5
    ebd6:	4629      	mov	r1, r5
    ebd8:	9500      	str	r5, [sp, #0]
    ebda:	f7f9 f93f 	bl	7e5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    ebde:	b120      	cbz	r0, ebea <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA+0x26>
    ebe0:	f44f 7118 	mov.w	r1, #608	; 0x260
    ebe4:	2030      	movs	r0, #48	; 0x30
    ebe6:	f7f5 fca9 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebea:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    ebee:	2001      	movs	r0, #1
    ebf0:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    ebf4:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    ebf8:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    ebfc:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    ec00:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    ec04:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    ec08:	1e40      	subs	r0, r0, #1
    ec0a:	f824 0bb4 	strh.w	r0, [r4], #180
    ec0e:	2000      	movs	r0, #0
    ec10:	86e5      	strh	r5, [r4, #54]	; 0x36
    ec12:	bd38      	pop	{r3, r4, r5, pc}

0000ec14 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    ec14:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ec16:	4604      	mov	r4, r0
    ec18:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    ec1c:	2800      	cmp	r0, #0
    ec1e:	d153      	bne.n	ecc8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ec20:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    ec24:	2803      	cmp	r0, #3
    ec26:	d14f      	bne.n	ecc8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ec28:	f7fd fd16 	bl	c658 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    ec2c:	4601      	mov	r1, r0
    ec2e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    ec32:	f7f3 f86f 	bl	1d14 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ec36:	2800      	cmp	r0, #0
    ec38:	dd46      	ble.n	ecc8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ec3a:	6861      	ldr	r1, [r4, #4]
    ec3c:	b111      	cbz	r1, ec44 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    ec3e:	fbb0 f0f1 	udiv	r0, r0, r1
    ec42:	e000      	b.n	ec46 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    ec44:	2000      	movs	r0, #0
    ec46:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ec4a:	1c40      	adds	r0, r0, #1
    ec4c:	4408      	add	r0, r1
    ec4e:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    ec52:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    ec56:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    ec5a:	1a08      	subs	r0, r1, r0
    ec5c:	b200      	sxth	r0, r0
    ec5e:	2800      	cmp	r0, #0
    ec60:	dd32      	ble.n	ecc8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ec62:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    ec66:	f7f3 fd9b 	bl	27a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ec6a:	2800      	cmp	r0, #0
    ec6c:	d02c      	beq.n	ecc8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ec6e:	2001      	movs	r0, #1
    ec70:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    ec74:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    ec78:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    ec7c:	ae01      	add	r6, sp, #4
    ec7e:	1a40      	subs	r0, r0, r1
    ec80:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ec84:	1e40      	subs	r0, r0, #1
    ec86:	4408      	add	r0, r1
    ec88:	b285      	uxth	r5, r0
    ec8a:	e017      	b.n	ecbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    ec8c:	9600      	str	r6, [sp, #0]
    ec8e:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    ec92:	2300      	movs	r3, #0
    ec94:	2201      	movs	r2, #1
    ec96:	4620      	mov	r0, r4
    ec98:	f7f9 f8e0 	bl	7e5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    ec9c:	2800      	cmp	r0, #0
    ec9e:	d013      	beq.n	ecc8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    eca0:	2801      	cmp	r0, #1
    eca2:	d004      	beq.n	ecae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    eca4:	f240 6143 	movw	r1, #1603	; 0x643
    eca8:	2030      	movs	r0, #48	; 0x30
    ecaa:	f7f5 fc47 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecae:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    ecb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ecb6:	4408      	add	r0, r1
    ecb8:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    ecbc:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    ecc0:	1a28      	subs	r0, r5, r0
    ecc2:	b200      	sxth	r0, r0
    ecc4:	2800      	cmp	r0, #0
    ecc6:	dae1      	bge.n	ec8c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    ecc8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ecca:	2000      	movs	r0, #0
    eccc:	4770      	bx	lr
    ecce:	b510      	push	{r4, lr}
    ecd0:	4604      	mov	r4, r0
    ecd2:	f814 0fa8 	ldrb.w	r0, [r4, #168]!
    ecd6:	f7f3 fe6f 	bl	29b8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ecda:	2000      	movs	r0, #0
    ecdc:	7420      	strb	r0, [r4, #16]
    ecde:	bd10      	pop	{r4, pc}
    ece0:	b510      	push	{r4, lr}
    ece2:	f7ff fd47 	bl	e774 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ece6:	f200 100d 	addw	r0, r0, #269	; 0x10d
    ecea:	bd10      	pop	{r4, pc}
    ecec:	b570      	push	{r4, r5, r6, lr}
    ecee:	4604      	mov	r4, r0
    ecf0:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    ecf4:	460d      	mov	r5, r1
    ecf6:	b108      	cbz	r0, ecfc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xe8>
    ecf8:	2001      	movs	r0, #1
    ecfa:	bd70      	pop	{r4, r5, r6, pc}
    ecfc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    ed00:	b1a8      	cbz	r0, ed2e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11a>
    ed02:	4620      	mov	r0, r4
    ed04:	f7ff fd32 	bl	e76c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ed08:	4405      	add	r5, r0
    ed0a:	4620      	mov	r0, r4
    ed0c:	f7ff ffe8 	bl	ece0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    ed10:	1941      	adds	r1, r0, r5
    ed12:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    ed16:	4288      	cmp	r0, r1
    ed18:	d206      	bcs.n	ed28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x114>
    ed1a:	2001      	movs	r0, #1
    ed1c:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    ed20:	4620      	mov	r0, r4
    ed22:	f7ff fd7b 	bl	e81c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ed26:	e7e7      	b.n	ecf8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xe4>
    ed28:	1b40      	subs	r0, r0, r5
    ed2a:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    ed2e:	2000      	movs	r0, #0
    ed30:	bd70      	pop	{r4, r5, r6, pc}
    ed32:	b510      	push	{r4, lr}
    ed34:	4604      	mov	r4, r0
    ed36:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    ed3a:	f000 f883 	bl	ee44 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x230>
    ed3e:	4602      	mov	r2, r0
    ed40:	4620      	mov	r0, r4
    ed42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed46:	f240 111b 	movw	r1, #283	; 0x11b
    ed4a:	f7ff bc09 	b.w	e560 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ed4e:	b510      	push	{r4, lr}
    ed50:	f7fc fd04 	bl	b75c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ed54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed58:	f7f3 bf7c 	b.w	2c54 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ed5c:	b570      	push	{r4, r5, r6, lr}
    ed5e:	460c      	mov	r4, r1
    ed60:	4605      	mov	r5, r0
    ed62:	f001 f8b8 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed66:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ed6a:	4408      	add	r0, r1
    ed6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ed70:	fbb0 f6f1 	udiv	r6, r0, r1
    ed74:	4628      	mov	r0, r5
    ed76:	f001 f8a0 	bl	feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ed7a:	4430      	add	r0, r6
    ed7c:	4420      	add	r0, r4
    ed7e:	bd70      	pop	{r4, r5, r6, pc}
    ed80:	f7f3 b8f2 	b.w	1f68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ed84:	b510      	push	{r4, lr}
    ed86:	4604      	mov	r4, r0
    ed88:	f7ff fd14 	bl	e7b4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ed8c:	b1a0      	cbz	r0, edb8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a4>
    ed8e:	4620      	mov	r0, r4
    ed90:	f7ff fd08 	bl	e7a4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ed94:	b918      	cbnz	r0, ed9e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18a>
    ed96:	4620      	mov	r0, r4
    ed98:	f7ff fd0e 	bl	e7b8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ed9c:	b120      	cbz	r0, eda8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x194>
    ed9e:	2445      	movs	r4, #69	; 0x45
    eda0:	f001 f857 	bl	fe52 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    eda4:	b928      	cbnz	r0, edb2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    eda6:	e001      	b.n	edac <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x198>
    eda8:	243e      	movs	r4, #62	; 0x3e
    edaa:	e7f9      	b.n	eda0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18c>
    edac:	f001 f847 	bl	fe3e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    edb0:	b100      	cbz	r0, edb4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a0>
    edb2:	1de4      	adds	r4, r4, #7
    edb4:	4620      	mov	r0, r4
    edb6:	bd10      	pop	{r4, pc}
    edb8:	2067      	movs	r0, #103	; 0x67
    edba:	bd10      	pop	{r4, pc}
    edbc:	b510      	push	{r4, lr}
    edbe:	4604      	mov	r4, r0
    edc0:	2000      	movs	r0, #0
    edc2:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    edc6:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    edca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    edce:	f204 1441 	addw	r4, r4, #321	; 0x141
    edd2:	f7f7 fafb 	bl	63cc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    edd6:	7fe0      	ldrb	r0, [r4, #31]
    edd8:	f7f3 fdee 	bl	29b8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eddc:	2020      	movs	r0, #32
    edde:	77e0      	strb	r0, [r4, #31]
    ede0:	bd10      	pop	{r4, pc}
    ede2:	b508      	push	{r3, lr}
    ede4:	2800      	cmp	r0, #0
    ede6:	f04f 0101 	mov.w	r1, #1
    edea:	4668      	mov	r0, sp
    edec:	d002      	beq.n	edf4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1e0>
    edee:	f7f5 fc35 	bl	465c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    edf2:	e001      	b.n	edf8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1e4>
    edf4:	f7f5 fc40 	bl	4678 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    edf8:	f89d 0000 	ldrb.w	r0, [sp]
    edfc:	f242 7110 	movw	r1, #10000	; 0x2710
    ee00:	0200      	lsls	r0, r0, #8
    ee02:	fbb0 f2f1 	udiv	r2, r0, r1
    ee06:	fb01 0012 	mls	r0, r1, r2, r0
    ee0a:	bd08      	pop	{r3, pc}
    ee0c:	b570      	push	{r4, r5, r6, lr}
    ee0e:	460d      	mov	r5, r1
    ee10:	4604      	mov	r4, r0
    ee12:	f7f7 fab1 	bl	6378 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA>
    ee16:	2101      	movs	r1, #1
    ee18:	f7fe fda5 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee1c:	b160      	cbz	r0, ee38 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    ee1e:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    ee22:	2903      	cmp	r1, #3
    ee24:	d108      	bne.n	ee38 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    ee26:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    ee2a:	42a1      	cmp	r1, r4
    ee2c:	d104      	bne.n	ee38 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    ee2e:	4629      	mov	r1, r5
    ee30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee34:	f7f9 ba2e 	b.w	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
    ee38:	4629      	mov	r1, r5
    ee3a:	4620      	mov	r0, r4
    ee3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee40:	f7f9 ba80 	b.w	8344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x344>
    ee44:	b510      	push	{r4, lr}
    ee46:	f001 f846 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ee4a:	f64d 7141 	movw	r1, #57153	; 0xdf41
    ee4e:	4408      	add	r0, r1
    ee50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ee54:	fbb0 f0f1 	udiv	r0, r0, r1
    ee58:	f500 70bc 	add.w	r0, r0, #376	; 0x178
    ee5c:	bd10      	pop	{r4, pc}
    ee5e:	01f4      	.short	0x01f4
    ee60:	009600fa 	.word	0x009600fa
    ee64:	004b0064 	.word	0x004b0064
    ee68:	001e0032 	.word	0x001e0032
    ee6c:	000a0014 	.word	0x000a0014
    ee70:	00020005 	.word	0x00020005
    ee74:	0001      	.short	0x0001
    ee76:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ee7a:	f001 0307 	and.w	r3, r1, #7
    ee7e:	7802      	ldrb	r2, [r0, #0]
    ee80:	2101      	movs	r1, #1
    ee82:	4099      	lsls	r1, r3
    ee84:	438a      	bics	r2, r1
    ee86:	7002      	strb	r2, [r0, #0]
    ee88:	4770      	bx	lr

0000ee8a <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ee8a:	f7f5 bef3 	b.w	4c74 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ee8e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    ee8e:	2000      	movs	r0, #0
    ee90:	4770      	bx	lr

0000ee92 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    ee92:	f7f6 bb7d 	b.w	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000ee96 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    ee96:	2100      	movs	r1, #0
    ee98:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    ee9c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    eea0:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    eea4:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    eea8:	b109      	cbz	r1, eeae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    eeaa:	2102      	movs	r1, #2
    eeac:	e000      	b.n	eeb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    eeae:	2103      	movs	r1, #3
    eeb0:	f7f8 bd80 	b.w	79b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    eeb4:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    eeb8:	28fe      	cmp	r0, #254	; 0xfe
    eeba:	d001      	beq.n	eec0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    eebc:	2001      	movs	r0, #1
    eebe:	4770      	bx	lr
    eec0:	2000      	movs	r0, #0
    eec2:	4770      	bx	lr
    eec4:	b510      	push	{r4, lr}
    eec6:	2801      	cmp	r0, #1
    eec8:	d006      	beq.n	eed8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    eeca:	2802      	cmp	r0, #2
    eecc:	d004      	beq.n	eed8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    eece:	f240 219d 	movw	r1, #669	; 0x29d
    eed2:	2006      	movs	r0, #6
    eed4:	f7f5 fb32 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eed8:	bd10      	pop	{r4, pc}
    eeda:	2801      	cmp	r0, #1
    eedc:	d002      	beq.n	eee4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    eede:	2802      	cmp	r0, #2
    eee0:	d105      	bne.n	eeee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    eee2:	e002      	b.n	eeea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    eee4:	2901      	cmp	r1, #1
    eee6:	d004      	beq.n	eef2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    eee8:	e001      	b.n	eeee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    eeea:	2902      	cmp	r1, #2
    eeec:	d001      	beq.n	eef2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    eeee:	2000      	movs	r0, #0
    eef0:	4770      	bx	lr
    eef2:	2001      	movs	r0, #1
    eef4:	4770      	bx	lr
    eef6:	1a40      	subs	r0, r0, r1
    eef8:	b200      	sxth	r0, r0
    eefa:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    eefe:	4288      	cmp	r0, r1
    ef00:	dc01      	bgt.n	ef06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    ef02:	2800      	cmp	r0, #0
    ef04:	dc01      	bgt.n	ef0a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    ef06:	2001      	movs	r0, #1
    ef08:	4770      	bx	lr
    ef0a:	2000      	movs	r0, #0
    ef0c:	4770      	bx	lr
    ef0e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ef12:	f001 0107 	and.w	r1, r1, #7
    ef16:	7800      	ldrb	r0, [r0, #0]
    ef18:	2201      	movs	r2, #1
    ef1a:	408a      	lsls	r2, r1
    ef1c:	4010      	ands	r0, r2
    ef1e:	40c8      	lsrs	r0, r1
    ef20:	4770      	bx	lr
    ef22:	b118      	cbz	r0, ef2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    ef24:	2802      	cmp	r0, #2
    ef26:	d001      	beq.n	ef2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    ef28:	2001      	movs	r0, #1
    ef2a:	4770      	bx	lr
    ef2c:	2000      	movs	r0, #0
    ef2e:	4770      	bx	lr

0000ef30 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    ef30:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ef34:	7881      	ldrb	r1, [r0, #2]
    ef36:	4604      	mov	r4, r0
    ef38:	291a      	cmp	r1, #26
    ef3a:	d025      	beq.n	ef88 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    ef3c:	dc0e      	bgt.n	ef5c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    ef3e:	2916      	cmp	r1, #22
    ef40:	d22e      	bcs.n	efa0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef42:	e8df f001 	tbb	[pc, r1]
    ef46:	2d2d      	.short	0x2d2d
    ef48:	212d2d2d 	.word	0x212d2d2d
    ef4c:	2d2d2d2d 	.word	0x2d2d2d2d
    ef50:	2d2d2d2d 	.word	0x2d2d2d2d
    ef54:	2d2d2d2d 	.word	0x2d2d2d2d
    ef58:	2121212d 	.word	0x2121212d
    ef5c:	292a      	cmp	r1, #42	; 0x2a
    ef5e:	d01f      	beq.n	efa0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef60:	dc0b      	bgt.n	ef7a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    ef62:	f1a1 011e 	sub.w	r1, r1, #30
    ef66:	290c      	cmp	r1, #12
    ef68:	d21a      	bcs.n	efa0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef6a:	e8df f001 	tbb	[pc, r1]
    ef6e:	1919      	.short	0x1919
    ef70:	19191919 	.word	0x19191919
    ef74:	19191919 	.word	0x19191919
    ef78:	0d19      	.short	0x0d19
    ef7a:	393a      	subs	r1, #58	; 0x3a
    ef7c:	2904      	cmp	r1, #4
    ef7e:	d20f      	bcs.n	efa0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef80:	e8df f001 	tbb	[pc, r1]
    ef84:	020e020e 	.word	0x020e020e
    ef88:	8820      	ldrh	r0, [r4, #0]
    ef8a:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    ef8e:	d207      	bcs.n	efa0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ef90:	2701      	movs	r7, #1
    ef92:	4669      	mov	r1, sp
    ef94:	f7fe fe1f 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef98:	b120      	cbz	r0, efa4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    ef9a:	2002      	movs	r0, #2
    ef9c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    efa0:	2012      	movs	r0, #18
    efa2:	e7fb      	b.n	ef9c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    efa4:	9d01      	ldr	r5, [sp, #4]
    efa6:	4668      	mov	r0, sp
    efa8:	462e      	mov	r6, r5
    efaa:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    efae:	f206 1671 	addw	r6, r6, #369	; 0x171
    efb2:	f000 fe24 	bl	fbfe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
    efb6:	b108      	cbz	r0, efbc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    efb8:	7828      	ldrb	r0, [r5, #0]
    efba:	b108      	cbz	r0, efc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    efbc:	200c      	movs	r0, #12
    efbe:	e7ed      	b.n	ef9c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    efc0:	702f      	strb	r7, [r5, #0]
    efc2:	78a0      	ldrb	r0, [r4, #2]
    efc4:	7030      	strb	r0, [r6, #0]
    efc6:	4668      	mov	r0, sp
    efc8:	f7ff f9b6 	bl	e338 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    efcc:	2000      	movs	r0, #0
    efce:	e7e5      	b.n	ef9c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000efd0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    efd0:	b510      	push	{r4, lr}
    efd2:	4604      	mov	r4, r0
    efd4:	7800      	ldrb	r0, [r0, #0]
    efd6:	b118      	cbz	r0, efe0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    efd8:	2801      	cmp	r0, #1
    efda:	d001      	beq.n	efe0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    efdc:	2012      	movs	r0, #18
    efde:	bd10      	pop	{r4, pc}
    efe0:	f000 fdc1 	bl	fb66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    efe4:	b120      	cbz	r0, eff0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    efe6:	f7f6 ff23 	bl	5e30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    efea:	b108      	cbz	r0, eff0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    efec:	200c      	movs	r0, #12
    efee:	bd10      	pop	{r4, pc}
    eff0:	7820      	ldrb	r0, [r4, #0]
    eff2:	f7ff ff96 	bl	ef22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    eff6:	1de2      	adds	r2, r4, #7
    eff8:	f104 0317 	add.w	r3, r4, #23
    effc:	1c61      	adds	r1, r4, #1
    effe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f002:	f7f6 bf47 	b.w	5e94 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f006 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f006:	b510      	push	{r4, lr}
    f008:	4604      	mov	r4, r0
    f00a:	f000 fe6c 	bl	fce6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    f00e:	b108      	cbz	r0, f014 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f010:	200c      	movs	r0, #12
    f012:	bd10      	pop	{r4, pc}
    f014:	7820      	ldrb	r0, [r4, #0]
    f016:	b118      	cbz	r0, f020 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f018:	2801      	cmp	r0, #1
    f01a:	d001      	beq.n	f020 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f01c:	2012      	movs	r0, #18
    f01e:	bd10      	pop	{r4, pc}
    f020:	f7ff ff7f 	bl	ef22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f024:	1c61      	adds	r1, r4, #1
    f026:	f7f6 ffad 	bl	5f84 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f02a:	b108      	cbz	r0, f030 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f02c:	2000      	movs	r0, #0
    f02e:	bd10      	pop	{r4, pc}
    f030:	2007      	movs	r0, #7
    f032:	bd10      	pop	{r4, pc}

0000f034 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f034:	b510      	push	{r4, lr}
    f036:	f000 fd96 	bl	fb66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    f03a:	b120      	cbz	r0, f046 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f03c:	f7f6 fef8 	bl	5e30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f040:	b108      	cbz	r0, f046 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f042:	200c      	movs	r0, #12
    f044:	bd10      	pop	{r4, pc}
    f046:	f7f6 ff6b 	bl	5f20 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f04a:	2000      	movs	r0, #0
    f04c:	bd10      	pop	{r4, pc}

0000f04e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f04e:	b510      	push	{r4, lr}
    f050:	f000 fe49 	bl	fce6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    f054:	b108      	cbz	r0, f05a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f056:	200c      	movs	r0, #12
    f058:	bd10      	pop	{r4, pc}
    f05a:	f7f6 ffbb 	bl	5fd4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f05e:	2000      	movs	r0, #0
    f060:	bd10      	pop	{r4, pc}

0000f062 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f062:	b510      	push	{r4, lr}
    f064:	460b      	mov	r3, r1
    f066:	2201      	movs	r2, #1
    f068:	f100 0110 	add.w	r1, r0, #16
    f06c:	f7fe fd95 	bl	db9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f070:	2000      	movs	r0, #0
    f072:	bd10      	pop	{r4, pc}

0000f074 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f074:	b510      	push	{r4, lr}
    f076:	8800      	ldrh	r0, [r0, #0]
    f078:	2100      	movs	r1, #0
    f07a:	f7fe fc74 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f07e:	b118      	cbz	r0, f088 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f080:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    f084:	b111      	cbz	r1, f08c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f086:	e007      	b.n	f098 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f088:	2002      	movs	r0, #2
    f08a:	bd10      	pop	{r4, pc}
    f08c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f090:	2914      	cmp	r1, #20
    f092:	d003      	beq.n	f09c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f094:	2915      	cmp	r1, #21
    f096:	d001      	beq.n	f09c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f098:	200c      	movs	r0, #12
    f09a:	bd10      	pop	{r4, pc}
    f09c:	2102      	movs	r1, #2
    f09e:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    f0a2:	2000      	movs	r0, #0
    f0a4:	bd10      	pop	{r4, pc}

0000f0a6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f0a6:	b538      	push	{r3, r4, r5, lr}
    f0a8:	4605      	mov	r5, r0
    f0aa:	8800      	ldrh	r0, [r0, #0]
    f0ac:	2100      	movs	r1, #0
    f0ae:	f7fe fc5a 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f0b2:	0004      	movs	r4, r0
    f0b4:	d003      	beq.n	f0be <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f0b6:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    f0ba:	b110      	cbz	r0, f0c2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f0bc:	e010      	b.n	f0e0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f0be:	2002      	movs	r0, #2
    f0c0:	bd38      	pop	{r3, r4, r5, pc}
    f0c2:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    f0c6:	2814      	cmp	r0, #20
    f0c8:	d001      	beq.n	f0ce <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f0ca:	2815      	cmp	r0, #21
    f0cc:	d108      	bne.n	f0e0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f0ce:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    f0d2:	f88d 0000 	strb.w	r0, [sp]
    f0d6:	9800      	ldr	r0, [sp, #0]
    f0d8:	9000      	str	r0, [sp, #0]
    f0da:	f89d 0000 	ldrb.w	r0, [sp]
    f0de:	b108      	cbz	r0, f0e4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    f0e0:	200c      	movs	r0, #12
    f0e2:	bd38      	pop	{r3, r4, r5, pc}
    f0e4:	2210      	movs	r2, #16
    f0e6:	1ca9      	adds	r1, r5, #2
    f0e8:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    f0ec:	f7fd fc29 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f0f0:	2001      	movs	r0, #1
    f0f2:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    f0f6:	2000      	movs	r0, #0
    f0f8:	bd38      	pop	{r3, r4, r5, pc}

0000f0fa <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f0fa:	b510      	push	{r4, lr}
    f0fc:	2108      	movs	r1, #8
    f0fe:	f7f5 fac9 	bl	4694 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f102:	2000      	movs	r0, #0
    f104:	bd10      	pop	{r4, pc}

0000f106 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f106:	b510      	push	{r4, lr}
    f108:	4604      	mov	r4, r0
    f10a:	2101      	movs	r1, #1
    f10c:	2000      	movs	r0, #0
    f10e:	f7fe fc2a 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f112:	b120      	cbz	r0, f11e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>
    f114:	f7ff fb54 	bl	e7c0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f118:	7020      	strb	r0, [r4, #0]
    f11a:	2000      	movs	r0, #0
    f11c:	bd10      	pop	{r4, pc}
    f11e:	f240 51e4 	movw	r1, #1508	; 0x5e4
    f122:	2039      	movs	r0, #57	; 0x39
    f124:	f7f5 fa0a 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f128 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    f128:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f12a:	460c      	mov	r4, r1
    f12c:	4605      	mov	r5, r0
    f12e:	8800      	ldrh	r0, [r0, #0]
    f130:	4669      	mov	r1, sp
    f132:	f7fe fd50 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f136:	2200      	movs	r2, #0
    f138:	b128      	cbz	r0, f146 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    f13a:	f8c4 2002 	str.w	r2, [r4, #2]
    f13e:	71a2      	strb	r2, [r4, #6]
    f140:	8022      	strh	r2, [r4, #0]
    f142:	2002      	movs	r0, #2
    f144:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f146:	9901      	ldr	r1, [sp, #4]
    f148:	4608      	mov	r0, r1
    f14a:	3170      	adds	r1, #112	; 0x70
    f14c:	f881 2046 	strb.w	r2, [r1, #70]	; 0x46
    f150:	68c3      	ldr	r3, [r0, #12]
    f152:	f8c4 3002 	str.w	r3, [r4, #2]
    f156:	7c03      	ldrb	r3, [r0, #16]
    f158:	71a3      	strb	r3, [r4, #6]
    f15a:	882b      	ldrh	r3, [r5, #0]
    f15c:	8023      	strh	r3, [r4, #0]
    f15e:	f891 3046 	ldrb.w	r3, [r1, #70]	; 0x46
    f162:	2b00      	cmp	r3, #0
    f164:	d1f2      	bne.n	f14c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    f166:	2000      	movs	r0, #0
    f168:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f16a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f16a:	b510      	push	{r4, lr}
    f16c:	4604      	mov	r4, r0
    f16e:	f000 fd40 	bl	fbf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    f172:	b140      	cbz	r0, f186 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    f174:	20fb      	movs	r0, #251	; 0xfb
    f176:	8020      	strh	r0, [r4, #0]
    f178:	f640 0148 	movw	r1, #2120	; 0x848
    f17c:	8061      	strh	r1, [r4, #2]
    f17e:	80a0      	strh	r0, [r4, #4]
    f180:	80e1      	strh	r1, [r4, #6]
    f182:	2000      	movs	r0, #0
    f184:	bd10      	pop	{r4, pc}
    f186:	2001      	movs	r0, #1
    f188:	bd10      	pop	{r4, pc}

0000f18a <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f18a:	2108      	movs	r1, #8
    f18c:	7001      	strb	r1, [r0, #0]
    f18e:	2000      	movs	r0, #0
    f190:	4770      	bx	lr

0000f192 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f192:	b510      	push	{r4, lr}
    f194:	4604      	mov	r4, r0
    f196:	20d8      	movs	r0, #216	; 0xd8
    f198:	7020      	strb	r0, [r4, #0]
    f19a:	f000 fd0b 	bl	fbb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    f19e:	7060      	strb	r0, [r4, #1]
    f1a0:	2000      	movs	r0, #0
    f1a2:	bd10      	pop	{r4, pc}

0000f1a4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f1a4:	2108      	movs	r1, #8
    f1a6:	7001      	strb	r1, [r0, #0]
    f1a8:	2000      	movs	r0, #0
    f1aa:	4770      	bx	lr

0000f1ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f1ac:	b510      	push	{r4, lr}
    f1ae:	4604      	mov	r4, r0
    f1b0:	7800      	ldrb	r0, [r0, #0]
    f1b2:	b108      	cbz	r0, f1b8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f1b4:	2801      	cmp	r0, #1
    f1b6:	d110      	bne.n	f1da <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f1b8:	f000 fcd5 	bl	fb66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    f1bc:	b120      	cbz	r0, f1c8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f1be:	f7f6 fe37 	bl	5e30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f1c2:	b108      	cbz	r0, f1c8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f1c4:	200c      	movs	r0, #12
    f1c6:	bd10      	pop	{r4, pc}
    f1c8:	7820      	ldrb	r0, [r4, #0]
    f1ca:	f7ff feaa 	bl	ef22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f1ce:	1c61      	adds	r1, r4, #1
    f1d0:	f7fe fcc9 	bl	db66 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f1d4:	b108      	cbz	r0, f1da <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f1d6:	2000      	movs	r0, #0
    f1d8:	bd10      	pop	{r4, pc}
    f1da:	2012      	movs	r0, #18
    f1dc:	bd10      	pop	{r4, pc}

0000f1de <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f1de:	b510      	push	{r4, lr}
    f1e0:	4604      	mov	r4, r0
    f1e2:	f000 fd80 	bl	fce6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    f1e6:	b108      	cbz	r0, f1ec <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f1e8:	200c      	movs	r0, #12
    f1ea:	bd10      	pop	{r4, pc}
    f1ec:	7820      	ldrb	r0, [r4, #0]
    f1ee:	b108      	cbz	r0, f1f4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f1f0:	2801      	cmp	r0, #1
    f1f2:	d107      	bne.n	f204 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f1f4:	f7ff fe95 	bl	ef22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f1f8:	1c61      	adds	r1, r4, #1
    f1fa:	f7fe fcc3 	bl	db84 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f1fe:	b108      	cbz	r0, f204 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f200:	2000      	movs	r0, #0
    f202:	bd10      	pop	{r4, pc}
    f204:	2012      	movs	r0, #18
    f206:	bd10      	pop	{r4, pc}

0000f208 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f208:	b510      	push	{r4, lr}
    f20a:	4604      	mov	r4, r0
    f20c:	f000 fcab 	bl	fb66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    f210:	b108      	cbz	r0, f216 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f212:	200c      	movs	r0, #12
    f214:	bd10      	pop	{r4, pc}
    f216:	7820      	ldrb	r0, [r4, #0]
    f218:	f000 0001 	and.w	r0, r0, #1
    f21c:	f7f6 fe02 	bl	5e24 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f220:	2000      	movs	r0, #0
    f222:	bd10      	pop	{r4, pc}

0000f224 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f224:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f226:	4605      	mov	r5, r0
    f228:	2000      	movs	r0, #0
    f22a:	f7f5 fdc5 	bl	4db8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>
    f22e:	0004      	movs	r4, r0
    f230:	d01e      	beq.n	f270 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    f232:	f104 0022 	add.w	r0, r4, #34	; 0x22
    f236:	6020      	str	r0, [r4, #0]
    f238:	301f      	adds	r0, #31
    f23a:	60a0      	str	r0, [r4, #8]
    f23c:	f894 0020 	ldrb.w	r0, [r4, #32]
    f240:	2600      	movs	r6, #0
    f242:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f246:	221f      	movs	r2, #31
    f248:	8086      	strh	r6, [r0, #4]
    f24a:	f894 0020 	ldrb.w	r0, [r4, #32]
    f24e:	1c40      	adds	r0, r0, #1
    f250:	f000 0001 	and.w	r0, r0, #1
    f254:	f884 0020 	strb.w	r0, [r4, #32]
    f258:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    f25c:	7829      	ldrb	r1, [r5, #0]
    f25e:	1c68      	adds	r0, r5, #1
    f260:	f000 fb87 	bl	f972 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb4>
    f264:	b130      	cbz	r0, f274 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x50>
    f266:	f241 5101 	movw	r1, #5377	; 0x1501
    f26a:	2039      	movs	r0, #57	; 0x39
    f26c:	f7f5 f966 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f270:	2007      	movs	r0, #7
    f272:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f274:	f894 0020 	ldrb.w	r0, [r4, #32]
    f278:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    f27c:	9001      	str	r0, [sp, #4]
    f27e:	7828      	ldrb	r0, [r5, #0]
    f280:	f8ad 0002 	strh.w	r0, [sp, #2]
    f284:	f88d 6000 	strb.w	r6, [sp]
    f288:	4668      	mov	r0, sp
    f28a:	f000 f9de 	bl	f64a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f28e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f290 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f290:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f292:	4606      	mov	r6, r0
    f294:	2101      	movs	r1, #1
    f296:	2000      	movs	r0, #0
    f298:	f7fe fb65 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f29c:	0005      	movs	r5, r0
    f29e:	d019      	beq.n	f2d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x44>
    f2a0:	7830      	ldrb	r0, [r6, #0]
    f2a2:	2400      	movs	r4, #0
    f2a4:	b160      	cbz	r0, f2c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
    f2a6:	f88d 4004 	strb.w	r4, [sp, #4]
    f2aa:	f10d 0105 	add.w	r1, sp, #5
    f2ae:	2001      	movs	r0, #1
    f2b0:	f7f5 ffb2 	bl	5218 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f2b4:	b120      	cbz	r0, f2c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
    f2b6:	a801      	add	r0, sp, #4
    f2b8:	f000 f89e 	bl	f3f8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f2bc:	2800      	cmp	r0, #0
    f2be:	d117      	bne.n	f2f0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x60>
    f2c0:	f88d 4000 	strb.w	r4, [sp]
    f2c4:	4628      	mov	r0, r5
    f2c6:	f7ff fa71 	bl	e7ac <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f2ca:	b140      	cbz	r0, f2de <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x4e>
    f2cc:	2080      	movs	r0, #128	; 0x80
    f2ce:	f8ad 0001 	strh.w	r0, [sp, #1]
    f2d2:	e006      	b.n	f2e2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x52>
    f2d4:	f241 5185 	movw	r1, #5509	; 0x1585
    f2d8:	2039      	movs	r0, #57	; 0x39
    f2da:	f7f5 f92f 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2de:	f8ad 4001 	strh.w	r4, [sp, #1]
    f2e2:	f88d 4003 	strb.w	r4, [sp, #3]
    f2e6:	7830      	ldrb	r0, [r6, #0]
    f2e8:	2801      	cmp	r0, #1
    f2ea:	d002      	beq.n	f2f2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x62>
    f2ec:	b130      	cbz	r0, f2fc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x6c>
    f2ee:	2012      	movs	r0, #18
    f2f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f2f2:	4669      	mov	r1, sp
    f2f4:	4628      	mov	r0, r5
    f2f6:	f7fb fc11 	bl	ab1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f2fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f2fc:	4628      	mov	r0, r5
    f2fe:	f000 fc95 	bl	fc2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36e>
    f302:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f304 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f304:	b530      	push	{r4, r5, lr}
    f306:	4604      	mov	r4, r0
    f308:	b08b      	sub	sp, #44	; 0x2c
    f30a:	2101      	movs	r1, #1
    f30c:	2000      	movs	r0, #0
    f30e:	f7fe fb2a 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f312:	0001      	movs	r1, r0
    f314:	d006      	beq.n	f324 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f316:	8860      	ldrh	r0, [r4, #2]
    f318:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f31c:	d905      	bls.n	f32a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x26>
    f31e:	2012      	movs	r0, #18
    f320:	b00b      	add	sp, #44	; 0x2c
    f322:	bd30      	pop	{r4, r5, pc}
    f324:	f241 11d8 	movw	r1, #4568	; 0x11d8
    f328:	e063      	b.n	f3f2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xee>
    f32a:	2500      	movs	r5, #0
    f32c:	f88d 5004 	strb.w	r5, [sp, #4]
    f330:	7922      	ldrb	r2, [r4, #4]
    f332:	9500      	str	r5, [sp, #0]
    f334:	f89d 0000 	ldrb.w	r0, [sp]
    f338:	2a05      	cmp	r2, #5
    f33a:	f040 0010 	orr.w	r0, r0, #16
    f33e:	f88d 0000 	strb.w	r0, [sp]
    f342:	d254      	bcs.n	f3ee <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xea>
    f344:	e8df f002 	tbb	[pc, r2]
    f348:	11050803 	.word	0x11050803
    f34c:	000b      	.short	0x000b
    f34e:	f040 0001 	orr.w	r0, r0, #1
    f352:	f040 0002 	orr.w	r0, r0, #2
    f356:	e006      	b.n	f366 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x62>
    f358:	f040 0009 	orr.w	r0, r0, #9
    f35c:	e001      	b.n	f362 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5e>
    f35e:	f040 0001 	orr.w	r0, r0, #1
    f362:	f040 0004 	orr.w	r0, r0, #4
    f366:	f88d 0000 	strb.w	r0, [sp]
    f36a:	f8bd 0000 	ldrh.w	r0, [sp]
    f36e:	9000      	str	r0, [sp, #0]
    f370:	f8bd 0000 	ldrh.w	r0, [sp]
    f374:	f8ad 0005 	strh.w	r0, [sp, #5]
    f378:	8822      	ldrh	r2, [r4, #0]
    f37a:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f37e:	f362 201f 	bfi	r0, r2, #8, #24
    f382:	f8cd 0006 	str.w	r0, [sp, #6]
    f386:	8862      	ldrh	r2, [r4, #2]
    f388:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f38c:	f362 201f 	bfi	r0, r2, #8, #24
    f390:	f8cd 0009 	str.w	r0, [sp, #9]
    f394:	7b60      	ldrb	r0, [r4, #13]
    f396:	f88d 000d 	strb.w	r0, [sp, #13]
    f39a:	7960      	ldrb	r0, [r4, #5]
    f39c:	f88d 000e 	strb.w	r0, [sp, #14]
    f3a0:	79a0      	ldrb	r0, [r4, #6]
    f3a2:	f88d 000f 	strb.w	r0, [sp, #15]
    f3a6:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f3aa:	9004      	str	r0, [sp, #16]
    f3ac:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f3b0:	f8ad 0014 	strh.w	r0, [sp, #20]
    f3b4:	7ba0      	ldrb	r0, [r4, #14]
    f3b6:	f88d 0016 	strb.w	r0, [sp, #22]
    f3ba:	207f      	movs	r0, #127	; 0x7f
    f3bc:	f88d 0017 	strb.w	r0, [sp, #23]
    f3c0:	2001      	movs	r0, #1
    f3c2:	f88d 0018 	strb.w	r0, [sp, #24]
    f3c6:	f88d 5019 	strb.w	r5, [sp, #25]
    f3ca:	f88d 001a 	strb.w	r0, [sp, #26]
    f3ce:	f88d 501b 	strb.w	r5, [sp, #27]
    f3d2:	4608      	mov	r0, r1
    f3d4:	f7ff fa06 	bl	e7e4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f3d8:	f88d 001c 	strb.w	r0, [sp, #28]
    f3dc:	f88d 501d 	strb.w	r5, [sp, #29]
    f3e0:	f88d 501e 	strb.w	r5, [sp, #30]
    f3e4:	a909      	add	r1, sp, #36	; 0x24
    f3e6:	a801      	add	r0, sp, #4
    f3e8:	f7fb fa36 	bl	a858 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f3ec:	e798      	b.n	f320 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f3ee:	f241 01bc 	movw	r1, #4284	; 0x10bc
    f3f2:	2039      	movs	r0, #57	; 0x39
    f3f4:	f7f5 f8a2 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f3f8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f3f8:	b570      	push	{r4, r5, r6, lr}
    f3fa:	4604      	mov	r4, r0
    f3fc:	7800      	ldrb	r0, [r0, #0]
    f3fe:	2101      	movs	r1, #1
    f400:	f7fe fab1 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f404:	0005      	movs	r5, r0
    f406:	d007      	beq.n	f418 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f408:	f7ff fba3 	bl	eb52 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f40c:	b160      	cbz	r0, f428 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f40e:	4628      	mov	r0, r5
    f410:	f7ff f9d2 	bl	e7b8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f414:	b110      	cbz	r0, f41c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f416:	e005      	b.n	f424 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f418:	2042      	movs	r0, #66	; 0x42
    f41a:	bd70      	pop	{r4, r5, r6, pc}
    f41c:	4628      	mov	r0, r5
    f41e:	f7ff f9c1 	bl	e7a4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f422:	b108      	cbz	r0, f428 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f424:	200c      	movs	r0, #12
    f426:	bd70      	pop	{r4, r5, r6, pc}
    f428:	1c61      	adds	r1, r4, #1
    f42a:	4628      	mov	r0, r5
    f42c:	f7ff f9d2 	bl	e7d4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f430:	2000      	movs	r0, #0
    f432:	bd70      	pop	{r4, r5, r6, pc}

0000f434 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f434:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f436:	460d      	mov	r5, r1
    f438:	4604      	mov	r4, r0
    f43a:	f000 fbda 	bl	fbf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    f43e:	b130      	cbz	r0, f44e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f440:	88a2      	ldrh	r2, [r4, #4]
    f442:	f244 2090 	movw	r0, #17040	; 0x4290
    f446:	4282      	cmp	r2, r0
    f448:	d903      	bls.n	f452 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f44a:	2012      	movs	r0, #18
    f44c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f44e:	2001      	movs	r0, #1
    f450:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f452:	f640 0048 	movw	r0, #2120	; 0x848
    f456:	4282      	cmp	r2, r0
    f458:	d300      	bcc.n	f45c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f45a:	4602      	mov	r2, r0
    f45c:	8820      	ldrh	r0, [r4, #0]
    f45e:	f8ad 0000 	strh.w	r0, [sp]
    f462:	8860      	ldrh	r0, [r4, #2]
    f464:	f8ad 0002 	strh.w	r0, [sp, #2]
    f468:	f8ad 2004 	strh.w	r2, [sp, #4]
    f46c:	8860      	ldrh	r0, [r4, #2]
    f46e:	f8ad 0006 	strh.w	r0, [sp, #6]
    f472:	f8ad 2008 	strh.w	r2, [sp, #8]
    f476:	8820      	ldrh	r0, [r4, #0]
    f478:	8028      	strh	r0, [r5, #0]
    f47a:	4668      	mov	r0, sp
    f47c:	f7fb fc1c 	bl	acb8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f480:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f482 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f482:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f484:	4604      	mov	r4, r0
    f486:	f7fb fd77 	bl	af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f48a:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f48e:	b1b0      	cbz	r0, f4be <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f490:	f10d 0007 	add.w	r0, sp, #7
    f494:	9000      	str	r0, [sp, #0]
    f496:	7922      	ldrb	r2, [r4, #4]
    f498:	78e1      	ldrb	r1, [r4, #3]
    f49a:	78a0      	ldrb	r0, [r4, #2]
    f49c:	f10d 0306 	add.w	r3, sp, #6
    f4a0:	f000 fbe5 	bl	fc6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b0>
    f4a4:	2800      	cmp	r0, #0
    f4a6:	d109      	bne.n	f4bc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f4a8:	8820      	ldrh	r0, [r4, #0]
    f4aa:	f8ad 0004 	strh.w	r0, [sp, #4]
    f4ae:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f4b2:	f8ad 0008 	strh.w	r0, [sp, #8]
    f4b6:	a801      	add	r0, sp, #4
    f4b8:	f000 f903 	bl	f6c2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f4bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f4be:	2001      	movs	r0, #1
    f4c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f4c2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f4c2:	b510      	push	{r4, lr}
    f4c4:	4604      	mov	r4, r0
    f4c6:	f000 fb4e 	bl	fb66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    f4ca:	b120      	cbz	r0, f4d6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f4cc:	f7f6 fcb0 	bl	5e30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f4d0:	b108      	cbz	r0, f4d6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f4d2:	200c      	movs	r0, #12
    f4d4:	bd10      	pop	{r4, pc}
    f4d6:	7820      	ldrb	r0, [r4, #0]
    f4d8:	f7ff fd23 	bl	ef22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f4dc:	79e2      	ldrb	r2, [r4, #7]
    f4de:	1c61      	adds	r1, r4, #1
    f4e0:	f7f6 fc54 	bl	5d8c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f4e4:	b108      	cbz	r0, f4ea <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f4e6:	2000      	movs	r0, #0
    f4e8:	bd10      	pop	{r4, pc}
    f4ea:	2002      	movs	r0, #2
    f4ec:	bd10      	pop	{r4, pc}

0000f4ee <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f4ee:	b510      	push	{r4, lr}
    f4f0:	4604      	mov	r4, r0
    f4f2:	2001      	movs	r0, #1
    f4f4:	f000 fa22 	bl	f93c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f4f8:	b128      	cbz	r0, f506 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f4fa:	4621      	mov	r1, r4
    f4fc:	2001      	movs	r0, #1
    f4fe:	f7f5 fea3 	bl	5248 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f502:	2000      	movs	r0, #0
    f504:	bd10      	pop	{r4, pc}
    f506:	200c      	movs	r0, #12
    f508:	bd10      	pop	{r4, pc}

0000f50a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f50a:	b510      	push	{r4, lr}
    f50c:	8800      	ldrh	r0, [r0, #0]
    f50e:	f7f6 fd1d 	bl	5f4c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f512:	b108      	cbz	r0, f518 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f514:	2000      	movs	r0, #0
    f516:	bd10      	pop	{r4, pc}
    f518:	2030      	movs	r0, #48	; 0x30
    f51a:	bd10      	pop	{r4, pc}

0000f51c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f51c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f51e:	4605      	mov	r5, r0
    f520:	2000      	movs	r0, #0
    f522:	f7f5 fc49 	bl	4db8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>
    f526:	0004      	movs	r4, r0
    f528:	d01f      	beq.n	f56a <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4e>
    f52a:	f104 0060 	add.w	r0, r4, #96	; 0x60
    f52e:	6120      	str	r0, [r4, #16]
    f530:	301f      	adds	r0, #31
    f532:	61a0      	str	r0, [r4, #24]
    f534:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    f538:	2600      	movs	r6, #0
    f53a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f53e:	221f      	movs	r2, #31
    f540:	8286      	strh	r6, [r0, #20]
    f542:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    f546:	1c40      	adds	r0, r0, #1
    f548:	f000 0001 	and.w	r0, r0, #1
    f54c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    f550:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    f554:	7829      	ldrb	r1, [r5, #0]
    f556:	1c68      	adds	r0, r5, #1
    f558:	3310      	adds	r3, #16
    f55a:	f000 fa0a 	bl	f972 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb4>
    f55e:	b130      	cbz	r0, f56e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x52>
    f560:	f241 3132 	movw	r1, #4914	; 0x1332
    f564:	2039      	movs	r0, #57	; 0x39
    f566:	f7f4 ffe9 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f56a:	2007      	movs	r0, #7
    f56c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f56e:	f88d 6000 	strb.w	r6, [sp]
    f572:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    f576:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f57a:	6900      	ldr	r0, [r0, #16]
    f57c:	9001      	str	r0, [sp, #4]
    f57e:	7828      	ldrb	r0, [r5, #0]
    f580:	f8ad 0002 	strh.w	r0, [sp, #2]
    f584:	4668      	mov	r0, sp
    f586:	f000 f87e 	bl	f686 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f58a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f58c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f58c:	b51c      	push	{r2, r3, r4, lr}
    f58e:	4604      	mov	r4, r0
    f590:	f000 fb2f 	bl	fbf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    f594:	b178      	cbz	r0, f5b6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f596:	8820      	ldrh	r0, [r4, #0]
    f598:	f8ad 0000 	strh.w	r0, [sp]
    f59c:	8860      	ldrh	r0, [r4, #2]
    f59e:	f8ad 0002 	strh.w	r0, [sp, #2]
    f5a2:	8820      	ldrh	r0, [r4, #0]
    f5a4:	f8ad 0004 	strh.w	r0, [sp, #4]
    f5a8:	8860      	ldrh	r0, [r4, #2]
    f5aa:	f8ad 0006 	strh.w	r0, [sp, #6]
    f5ae:	4668      	mov	r0, sp
    f5b0:	f7fb fc06 	bl	adc0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    f5b4:	bd1c      	pop	{r2, r3, r4, pc}
    f5b6:	2001      	movs	r0, #1
    f5b8:	bd1c      	pop	{r2, r3, r4, pc}

0000f5ba <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f5ba:	b510      	push	{r4, lr}
    f5bc:	f7f5 fe68 	bl	5290 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f5c0:	2000      	movs	r0, #0
    f5c2:	bd10      	pop	{r4, pc}

0000f5c4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f5c4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f5c6:	460c      	mov	r4, r1
    f5c8:	4605      	mov	r5, r0
    f5ca:	f000 fb12 	bl	fbf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    f5ce:	b160      	cbz	r0, f5ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f5d0:	4669      	mov	r1, sp
    f5d2:	4628      	mov	r0, r5
    f5d4:	f7fe faff 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f5d8:	2800      	cmp	r0, #0
    f5da:	d105      	bne.n	f5e8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f5dc:	2100      	movs	r1, #0
    f5de:	4622      	mov	r2, r4
    f5e0:	9801      	ldr	r0, [sp, #4]
    f5e2:	f000 fa8a 	bl	fafa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    f5e6:	2000      	movs	r0, #0
    f5e8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f5ea:	2001      	movs	r0, #1
    f5ec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f5ee <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f5ee:	b510      	push	{r4, lr}
    f5f0:	4604      	mov	r4, r0
    f5f2:	2000      	movs	r0, #0
    f5f4:	f000 f9a2 	bl	f93c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f5f8:	b128      	cbz	r0, f606 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f5fa:	4621      	mov	r1, r4
    f5fc:	2000      	movs	r0, #0
    f5fe:	f7f5 fe23 	bl	5248 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f602:	2000      	movs	r0, #0
    f604:	bd10      	pop	{r4, pc}
    f606:	200c      	movs	r0, #12
    f608:	bd10      	pop	{r4, pc}

0000f60a <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    f60a:	b510      	push	{r4, lr}
    f60c:	4604      	mov	r4, r0
    f60e:	f7ff fabd 	bl	eb8c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    f612:	b120      	cbz	r0, f61e <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    f614:	7820      	ldrb	r0, [r4, #0]
    f616:	f7f8 f991 	bl	793c <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    f61a:	2000      	movs	r0, #0
    f61c:	bd10      	pop	{r4, pc}
    f61e:	200c      	movs	r0, #12
    f620:	bd10      	pop	{r4, pc}

0000f622 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f622:	b510      	push	{r4, lr}
    f624:	7800      	ldrb	r0, [r0, #0]
    f626:	f000 0001 	and.w	r0, r0, #1
    f62a:	f7f8 f98d 	bl	7948 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    f62e:	2000      	movs	r0, #0
    f630:	bd10      	pop	{r4, pc}

0000f632 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f632:	b510      	push	{r4, lr}
    f634:	4604      	mov	r4, r0
    f636:	f000 fadc 	bl	fbf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    f63a:	b120      	cbz	r0, f646 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f63c:	4620      	mov	r0, r4
    f63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f642:	f7fb bb39 	b.w	acb8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f646:	2001      	movs	r0, #1
    f648:	bd10      	pop	{r4, pc}

0000f64a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f64a:	b570      	push	{r4, r5, r6, lr}
    f64c:	4604      	mov	r4, r0
    f64e:	7800      	ldrb	r0, [r0, #0]
    f650:	2101      	movs	r1, #1
    f652:	f7fe f988 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f656:	0005      	movs	r5, r0
    f658:	d013      	beq.n	f682 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x38>
    f65a:	2201      	movs	r2, #1
    f65c:	8861      	ldrh	r1, [r4, #2]
    f65e:	f000 f99d 	bl	f99c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    f662:	2800      	cmp	r0, #0
    f664:	d10c      	bne.n	f680 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x36>
    f666:	4628      	mov	r0, r5
    f668:	f7ff f876 	bl	e758 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f66c:	8861      	ldrh	r1, [r4, #2]
    f66e:	4281      	cmp	r1, r0
    f670:	d800      	bhi.n	f674 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2a>
    f672:	4608      	mov	r0, r1
    f674:	4601      	mov	r1, r0
    f676:	4628      	mov	r0, r5
    f678:	6862      	ldr	r2, [r4, #4]
    f67a:	f7ff f8b9 	bl	e7f0 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    f67e:	2000      	movs	r0, #0
    f680:	bd70      	pop	{r4, r5, r6, pc}
    f682:	2042      	movs	r0, #66	; 0x42
    f684:	bd70      	pop	{r4, r5, r6, pc}

0000f686 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f686:	b570      	push	{r4, r5, r6, lr}
    f688:	4604      	mov	r4, r0
    f68a:	7800      	ldrb	r0, [r0, #0]
    f68c:	2101      	movs	r1, #1
    f68e:	f7fe f96a 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f692:	0005      	movs	r5, r0
    f694:	d00b      	beq.n	f6ae <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    f696:	2201      	movs	r2, #1
    f698:	8861      	ldrh	r1, [r4, #2]
    f69a:	f000 f97f 	bl	f99c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    f69e:	2800      	cmp	r0, #0
    f6a0:	d106      	bne.n	f6b0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    f6a2:	8866      	ldrh	r6, [r4, #2]
    f6a4:	4628      	mov	r0, r5
    f6a6:	f7ff f887 	bl	e7b8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f6aa:	b110      	cbz	r0, f6b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    f6ac:	e002      	b.n	f6b4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    f6ae:	2042      	movs	r0, #66	; 0x42
    f6b0:	bd70      	pop	{r4, r5, r6, pc}
    f6b2:	2600      	movs	r6, #0
    f6b4:	4631      	mov	r1, r6
    f6b6:	4628      	mov	r0, r5
    f6b8:	6862      	ldr	r2, [r4, #4]
    f6ba:	f7ff f8a3 	bl	e804 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    f6be:	2000      	movs	r0, #0
    f6c0:	bd70      	pop	{r4, r5, r6, pc}

0000f6c2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f6c2:	b510      	push	{r4, lr}
    f6c4:	4604      	mov	r4, r0
    f6c6:	8880      	ldrh	r0, [r0, #4]
    f6c8:	b128      	cbz	r0, f6d6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f6ca:	2801      	cmp	r0, #1
    f6cc:	d003      	beq.n	f6d6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f6ce:	2802      	cmp	r0, #2
    f6d0:	d001      	beq.n	f6d6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f6d2:	2012      	movs	r0, #18
    f6d4:	bd10      	pop	{r4, pc}
    f6d6:	78e0      	ldrb	r0, [r4, #3]
    f6d8:	f000 f9ec 	bl	fab4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f6dc:	b148      	cbz	r0, f6f2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f6de:	78a0      	ldrb	r0, [r4, #2]
    f6e0:	f000 f9e8 	bl	fab4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f6e4:	b128      	cbz	r0, f6f2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f6e6:	4620      	mov	r0, r4
    f6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6ec:	2101      	movs	r1, #1
    f6ee:	f000 b881 	b.w	f7f4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f6f2:	2011      	movs	r0, #17
    f6f4:	bd10      	pop	{r4, pc}

0000f6f6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f6f6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f6f8:	460c      	mov	r4, r1
    f6fa:	4605      	mov	r5, r0
    f6fc:	8800      	ldrh	r0, [r0, #0]
    f6fe:	4669      	mov	r1, sp
    f700:	f7fe fa69 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f704:	2800      	cmp	r0, #0
    f706:	d106      	bne.n	f716 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f708:	9801      	ldr	r0, [sp, #4]
    f70a:	8829      	ldrh	r1, [r5, #0]
    f70c:	8021      	strh	r1, [r4, #0]
    f70e:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    f712:	8060      	strh	r0, [r4, #2]
    f714:	2000      	movs	r0, #0
    f716:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f718 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f718:	b510      	push	{r4, lr}
    f71a:	4604      	mov	r4, r0
    f71c:	4601      	mov	r1, r0
    f71e:	2000      	movs	r0, #0
    f720:	f7f5 fd7a 	bl	5218 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f724:	b910      	cbnz	r0, f72c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f726:	2000      	movs	r0, #0
    f728:	6020      	str	r0, [r4, #0]
    f72a:	80a0      	strh	r0, [r4, #4]
    f72c:	2000      	movs	r0, #0
    f72e:	bd10      	pop	{r4, pc}

0000f730 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f730:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f732:	8800      	ldrh	r0, [r0, #0]
    f734:	4669      	mov	r1, sp
    f736:	f7fe fa4e 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f73a:	b958      	cbnz	r0, f754 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f73c:	4668      	mov	r0, sp
    f73e:	f000 fa5e 	bl	fbfe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
    f742:	b138      	cbz	r0, f754 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f744:	9c01      	ldr	r4, [sp, #4]
    f746:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    f74a:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    f74e:	3470      	adds	r4, #112	; 0x70
    f750:	b929      	cbnz	r1, f75e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    f752:	e001      	b.n	f758 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f754:	2002      	movs	r0, #2
    f756:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f758:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    f75c:	b109      	cbz	r1, f762 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f75e:	203a      	movs	r0, #58	; 0x3a
    f760:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f762:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    f766:	f04f 0501 	mov.w	r5, #1
    f76a:	0789      	lsls	r1, r1, #30
    f76c:	d103      	bne.n	f776 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    f76e:	7005      	strb	r5, [r0, #0]
    f770:	4668      	mov	r0, sp
    f772:	f7fe fde1 	bl	e338 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f776:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    f77a:	2000      	movs	r0, #0
    f77c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f77e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f77e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f780:	460c      	mov	r4, r1
    f782:	4605      	mov	r5, r0
    f784:	8800      	ldrh	r0, [r0, #0]
    f786:	4669      	mov	r1, sp
    f788:	f7fe fa25 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f78c:	b108      	cbz	r0, f792 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f78e:	2002      	movs	r0, #2
    f790:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f792:	78a8      	ldrb	r0, [r5, #2]
    f794:	b130      	cbz	r0, f7a4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f796:	f000 fa0d 	bl	fbb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    f79a:	70a0      	strb	r0, [r4, #2]
    f79c:	8828      	ldrh	r0, [r5, #0]
    f79e:	8020      	strh	r0, [r4, #0]
    f7a0:	2000      	movs	r0, #0
    f7a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f7a4:	9801      	ldr	r0, [sp, #4]
    f7a6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    f7aa:	e7f6      	b.n	f79a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f7ac <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f7ac:	b510      	push	{r4, lr}
    f7ae:	f7fb fb41 	bl	ae34 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f7b2:	2000      	movs	r0, #0
    f7b4:	bd10      	pop	{r4, pc}

0000f7b6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f7b6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f7ba:	4604      	mov	r4, r0
    f7bc:	8840      	ldrh	r0, [r0, #2]
    f7be:	460d      	mov	r5, r1
    f7c0:	b1b0      	cbz	r0, f7f0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    f7c2:	8820      	ldrh	r0, [r4, #0]
    f7c4:	4669      	mov	r1, sp
    f7c6:	f7fe fa06 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f7ca:	2800      	cmp	r0, #0
    f7cc:	d10e      	bne.n	f7ec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    f7ce:	8820      	ldrh	r0, [r4, #0]
    f7d0:	8028      	strh	r0, [r5, #0]
    f7d2:	9e01      	ldr	r6, [sp, #4]
    f7d4:	1d35      	adds	r5, r6, #4
    f7d6:	3670      	adds	r6, #112	; 0x70
    f7d8:	682f      	ldr	r7, [r5, #0]
    f7da:	8862      	ldrh	r2, [r4, #2]
    f7dc:	4639      	mov	r1, r7
    f7de:	4630      	mov	r0, r6
    f7e0:	f7fe fb4c 	bl	de7c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f7e4:	6828      	ldr	r0, [r5, #0]
    f7e6:	42b8      	cmp	r0, r7
    f7e8:	d1f6      	bne.n	f7d8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    f7ea:	2000      	movs	r0, #0
    f7ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f7f0:	2012      	movs	r0, #18
    f7f2:	e7fb      	b.n	f7ec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000f7f4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f7f8:	b086      	sub	sp, #24
    f7fa:	468a      	mov	sl, r1
    f7fc:	4606      	mov	r6, r0
    f7fe:	8800      	ldrh	r0, [r0, #0]
    f800:	a901      	add	r1, sp, #4
    f802:	f7fe f9e8 	bl	dbd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f806:	2800      	cmp	r0, #0
    f808:	d138      	bne.n	f87c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f80a:	9802      	ldr	r0, [sp, #8]
    f80c:	f04f 0800 	mov.w	r8, #0
    f810:	4601      	mov	r1, r0
    f812:	4689      	mov	r9, r1
    f814:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    f818:	f88d 1000 	strb.w	r1, [sp]
    f81c:	9900      	ldr	r1, [sp, #0]
    f81e:	9100      	str	r1, [sp, #0]
    f820:	f89d 5000 	ldrb.w	r5, [sp]
    f824:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f828:	3070      	adds	r0, #112	; 0x70
    f82a:	2921      	cmp	r1, #33	; 0x21
    f82c:	d100      	bne.n	f830 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f82e:	b13d      	cbz	r5, f840 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f830:	2400      	movs	r4, #0
    f832:	3044      	adds	r0, #68	; 0x44
    f834:	2108      	movs	r1, #8
    f836:	4607      	mov	r7, r0
    f838:	f7ff fb69 	bl	ef0e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f83c:	b110      	cbz	r0, f844 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f83e:	e007      	b.n	f850 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f840:	2401      	movs	r4, #1
    f842:	e7f6      	b.n	f832 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f844:	210b      	movs	r1, #11
    f846:	4638      	mov	r0, r7
    f848:	f7ff fb61 	bl	ef0e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f84c:	b900      	cbnz	r0, f850 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f84e:	b1a4      	cbz	r4, f87a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f850:	a804      	add	r0, sp, #16
    f852:	9000      	str	r0, [sp, #0]
    f854:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f858:	ab03      	add	r3, sp, #12
    f85a:	4632      	mov	r2, r6
    f85c:	4649      	mov	r1, r9
    f85e:	f000 f989 	bl	fb74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    f862:	0007      	movs	r7, r0
    f864:	d10a      	bne.n	f87c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f866:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f86a:	9c02      	ldr	r4, [sp, #8]
    f86c:	b148      	cbz	r0, f882 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f86e:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    f872:	2001      	movs	r0, #1
    f874:	7060      	strb	r0, [r4, #1]
    f876:	b94d      	cbnz	r5, f88c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f878:	e006      	b.n	f888 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f87a:	201a      	movs	r0, #26
    f87c:	b006      	add	sp, #24
    f87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f882:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    f886:	e7f4      	b.n	f872 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f888:	7820      	ldrb	r0, [r4, #0]
    f88a:	b108      	cbz	r0, f890 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f88c:	273a      	movs	r7, #58	; 0x3a
    f88e:	e012      	b.n	f8b6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f890:	f884 a000 	strb.w	sl, [r4]
    f894:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f898:	70a0      	strb	r0, [r4, #2]
    f89a:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f89e:	70e1      	strb	r1, [r4, #3]
    f8a0:	f88d 0000 	strb.w	r0, [sp]
    f8a4:	f88d 1001 	strb.w	r1, [sp, #1]
    f8a8:	88b0      	ldrh	r0, [r6, #4]
    f8aa:	f8ad 0002 	strh.w	r0, [sp, #2]
    f8ae:	4669      	mov	r1, sp
    f8b0:	4648      	mov	r0, r9
    f8b2:	f7fe fa4f 	bl	dd54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f8b6:	f884 8001 	strb.w	r8, [r4, #1]
    f8ba:	4638      	mov	r0, r7
    f8bc:	e7de      	b.n	f87c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f8be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f8be:	b510      	push	{r4, lr}
    f8c0:	2008      	movs	r0, #8
    f8c2:	f7fb fb4f 	bl	af64 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8ca:	f7f9 b897 	b.w	89fc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f8ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f8d2:	4288      	cmp	r0, r1
    f8d4:	d303      	bcc.n	f8de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f8d6:	f640 0148 	movw	r1, #2120	; 0x848
    f8da:	4288      	cmp	r0, r1
    f8dc:	d300      	bcc.n	f8e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f8de:	4608      	mov	r0, r1
    f8e0:	4770      	bx	lr
    f8e2:	07c1      	lsls	r1, r0, #31
    f8e4:	d001      	beq.n	f8ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f8e6:	2001      	movs	r0, #1
    f8e8:	4770      	bx	lr
    f8ea:	0780      	lsls	r0, r0, #30
    f8ec:	d501      	bpl.n	f8f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f8ee:	2002      	movs	r0, #2
    f8f0:	4770      	bx	lr
    f8f2:	2000      	movs	r0, #0
    f8f4:	4770      	bx	lr
    f8f6:	b510      	push	{r4, lr}
    f8f8:	2801      	cmp	r0, #1
    f8fa:	d006      	beq.n	f90a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f8fc:	2802      	cmp	r0, #2
    f8fe:	d004      	beq.n	f90a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f900:	f240 219d 	movw	r1, #669	; 0x29d
    f904:	2006      	movs	r0, #6
    f906:	f7f4 fe19 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f90a:	bd10      	pop	{r4, pc}
    f90c:	b50e      	push	{r1, r2, r3, lr}
    f90e:	4669      	mov	r1, sp
    f910:	2001      	movs	r0, #1
    f912:	f7fe f832 	bl	d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f916:	b150      	cbz	r0, f92e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f918:	f44f 719a 	mov.w	r1, #308	; 0x134
    f91c:	2039      	movs	r0, #57	; 0x39
    f91e:	f7f4 fe0d 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f922:	9802      	ldr	r0, [sp, #8]
    f924:	f7ff f915 	bl	eb52 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f928:	b108      	cbz	r0, f92e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f92a:	2001      	movs	r0, #1
    f92c:	bd0e      	pop	{r1, r2, r3, pc}
    f92e:	4668      	mov	r0, sp
    f930:	f7f5 f832 	bl	4998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f934:	2800      	cmp	r0, #0
    f936:	d0f4      	beq.n	f922 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f938:	2000      	movs	r0, #0
    f93a:	bd0e      	pop	{r1, r2, r3, pc}
    f93c:	b510      	push	{r4, lr}
    f93e:	f7ff ffe5 	bl	f90c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f942:	b1a0      	cbz	r0, f96e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f944:	2101      	movs	r1, #1
    f946:	2000      	movs	r0, #0
    f948:	f7fe f80d 	bl	d966 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f94c:	0004      	movs	r4, r0
    f94e:	d003      	beq.n	f958 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f950:	f7fe ff32 	bl	e7b8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f954:	b128      	cbz	r0, f962 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa4>
    f956:	e008      	b.n	f96a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xac>
    f958:	f44f 71be 	mov.w	r1, #380	; 0x17c
    f95c:	2039      	movs	r0, #57	; 0x39
    f95e:	f7f4 fded 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f962:	4620      	mov	r0, r4
    f964:	f7fe ff1e 	bl	e7a4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f968:	b108      	cbz	r0, f96e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f96a:	2000      	movs	r0, #0
    f96c:	bd10      	pop	{r4, pc}
    f96e:	2001      	movs	r0, #1
    f970:	bd10      	pop	{r4, pc}
    f972:	b570      	push	{r4, r5, r6, lr}
    f974:	460d      	mov	r5, r1
    f976:	8899      	ldrh	r1, [r3, #4]
    f978:	461c      	mov	r4, r3
    f97a:	194b      	adds	r3, r1, r5
    f97c:	4293      	cmp	r3, r2
    f97e:	d901      	bls.n	f984 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc6>
    f980:	2007      	movs	r0, #7
    f982:	bd70      	pop	{r4, r5, r6, pc}
    f984:	6822      	ldr	r2, [r4, #0]
    f986:	1853      	adds	r3, r2, r1
    f988:	4601      	mov	r1, r0
    f98a:	462a      	mov	r2, r5
    f98c:	4618      	mov	r0, r3
    f98e:	f7fc ffd8 	bl	c942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f992:	88a0      	ldrh	r0, [r4, #4]
    f994:	4428      	add	r0, r5
    f996:	80a0      	strh	r0, [r4, #4]
    f998:	2000      	movs	r0, #0
    f99a:	bd70      	pop	{r4, r5, r6, pc}
    f99c:	b570      	push	{r4, r5, r6, lr}
    f99e:	460c      	mov	r4, r1
    f9a0:	4605      	mov	r5, r0
    f9a2:	b112      	cbz	r2, f9aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f9a4:	291f      	cmp	r1, #31
    f9a6:	d807      	bhi.n	f9b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfa>
    f9a8:	e011      	b.n	f9ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f9aa:	2cff      	cmp	r4, #255	; 0xff
    f9ac:	d804      	bhi.n	f9b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfa>
    f9ae:	f7fe ff01 	bl	e7b4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f9b2:	b118      	cbz	r0, f9bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f9b4:	2c1f      	cmp	r4, #31
    f9b6:	d901      	bls.n	f9bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f9b8:	2012      	movs	r0, #18
    f9ba:	bd70      	pop	{r4, r5, r6, pc}
    f9bc:	4628      	mov	r0, r5
    f9be:	f7fe ff02 	bl	e7c6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f9c2:	b130      	cbz	r0, f9d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x114>
    f9c4:	4621      	mov	r1, r4
    f9c6:	4628      	mov	r0, r5
    f9c8:	f7fe fed2 	bl	e770 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f9cc:	b118      	cbz	r0, f9d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x118>
    f9ce:	2000      	movs	r0, #0
    f9d0:	bd70      	pop	{r4, r5, r6, pc}
    f9d2:	2042      	movs	r0, #66	; 0x42
    f9d4:	bd70      	pop	{r4, r5, r6, pc}
    f9d6:	2045      	movs	r0, #69	; 0x45
    f9d8:	bd70      	pop	{r4, r5, r6, pc}
    f9da:	b510      	push	{r4, lr}
    f9dc:	4604      	mov	r4, r0
    f9de:	7840      	ldrb	r0, [r0, #1]
    f9e0:	06c1      	lsls	r1, r0, #27
    f9e2:	d512      	bpl.n	fa0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f9e4:	07c0      	lsls	r0, r0, #31
    f9e6:	d00b      	beq.n	fa00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f9e8:	f7fb fa62 	bl	aeb0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f9ec:	b168      	cbz	r0, fa0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f9ee:	7860      	ldrb	r0, [r4, #1]
    f9f0:	06c1      	lsls	r1, r0, #27
    f9f2:	d405      	bmi.n	fa00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f9f4:	0700      	lsls	r0, r0, #28
    f9f6:	d503      	bpl.n	fa00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f9f8:	7d20      	ldrb	r0, [r4, #20]
    f9fa:	2802      	cmp	r0, #2
    f9fc:	d105      	bne.n	fa0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f9fe:	e006      	b.n	fa0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    fa00:	7d20      	ldrb	r0, [r4, #20]
    fa02:	2802      	cmp	r0, #2
    fa04:	d003      	beq.n	fa0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    fa06:	7ea0      	ldrb	r0, [r4, #26]
    fa08:	b108      	cbz	r0, fa0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    fa0a:	2011      	movs	r0, #17
    fa0c:	bd10      	pop	{r4, pc}
    fa0e:	2000      	movs	r0, #0
    fa10:	bd10      	pop	{r4, pc}
    fa12:	b538      	push	{r3, r4, r5, lr}
    fa14:	4604      	mov	r4, r0
    fa16:	7800      	ldrb	r0, [r0, #0]
    fa18:	28ef      	cmp	r0, #239	; 0xef
    fa1a:	d847      	bhi.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa1c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fa20:	f8ad 0000 	strh.w	r0, [sp]
    fa24:	9800      	ldr	r0, [sp, #0]
    fa26:	f000 f939 	bl	fc9c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    fa2a:	b3c0      	cbz	r0, fa9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    fa2c:	7861      	ldrb	r1, [r4, #1]
    fa2e:	0708      	lsls	r0, r1, #28
    fa30:	d40f      	bmi.n	fa52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x194>
    fa32:	f8d4 2002 	ldr.w	r2, [r4, #2]
    fa36:	f8d4 0005 	ldr.w	r0, [r4, #5]
    fa3a:	0a13      	lsrs	r3, r2, #8
    fa3c:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    fa40:	d834      	bhi.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa42:	2320      	movs	r3, #32
    fa44:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    fa48:	d830      	bhi.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa4a:	025a      	lsls	r2, r3, #9
    fa4c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    fa50:	d32c      	bcc.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa52:	7a60      	ldrb	r0, [r4, #9]
    fa54:	b318      	cbz	r0, fa9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    fa56:	2807      	cmp	r0, #7
    fa58:	d828      	bhi.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa5a:	7aa0      	ldrb	r0, [r4, #10]
    fa5c:	b128      	cbz	r0, fa6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    fa5e:	2801      	cmp	r0, #1
    fa60:	d003      	beq.n	fa6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    fa62:	2802      	cmp	r0, #2
    fa64:	d001      	beq.n	fa6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    fa66:	2803      	cmp	r0, #3
    fa68:	d120      	bne.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa6a:	074a      	lsls	r2, r1, #29
    fa6c:	d403      	bmi.n	fa76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b8>
    fa6e:	2802      	cmp	r0, #2
    fa70:	d001      	beq.n	fa76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b8>
    fa72:	2803      	cmp	r0, #3
    fa74:	d105      	bne.n	fa82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c4>
    fa76:	7ae0      	ldrb	r0, [r4, #11]
    fa78:	b108      	cbz	r0, fa7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    fa7a:	2801      	cmp	r0, #1
    fa7c:	d116      	bne.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa7e:	0748      	lsls	r0, r1, #29
    fa80:	d407      	bmi.n	fa92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    fa82:	7ca0      	ldrb	r0, [r4, #18]
    fa84:	b128      	cbz	r0, fa92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    fa86:	2801      	cmp	r0, #1
    fa88:	d003      	beq.n	fa92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    fa8a:	2802      	cmp	r0, #2
    fa8c:	d001      	beq.n	fa92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    fa8e:	2803      	cmp	r0, #3
    fa90:	d10c      	bne.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa92:	06c8      	lsls	r0, r1, #27
    fa94:	7d20      	ldrb	r0, [r4, #20]
    fa96:	d503      	bpl.n	faa0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    fa98:	2801      	cmp	r0, #1
    fa9a:	d107      	bne.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    fa9c:	e002      	b.n	faa4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    fa9e:	e005      	b.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    faa0:	2802      	cmp	r0, #2
    faa2:	d003      	beq.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    faa4:	7e20      	ldrb	r0, [r4, #24]
    faa6:	b118      	cbz	r0, fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    faa8:	2801      	cmp	r0, #1
    faaa:	d001      	beq.n	fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    faac:	2012      	movs	r0, #18
    faae:	bd38      	pop	{r3, r4, r5, pc}
    fab0:	2000      	movs	r0, #0
    fab2:	bd38      	pop	{r3, r4, r5, pc}
    fab4:	b510      	push	{r4, lr}
    fab6:	0004      	movs	r4, r0
    fab8:	d005      	beq.n	fac6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x208>
    faba:	f7fb fa63 	bl	af84 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fabe:	4384      	bics	r4, r0
    fac0:	d001      	beq.n	fac6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x208>
    fac2:	2000      	movs	r0, #0
    fac4:	bd10      	pop	{r4, pc}
    fac6:	2001      	movs	r0, #1
    fac8:	bd10      	pop	{r4, pc}
    faca:	28fb      	cmp	r0, #251	; 0xfb
    facc:	d803      	bhi.n	fad6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x218>
    face:	f640 0048 	movw	r0, #2120	; 0x848
    fad2:	4281      	cmp	r1, r0
    fad4:	d901      	bls.n	fada <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x21c>
    fad6:	2011      	movs	r0, #17
    fad8:	4770      	bx	lr
    fada:	2000      	movs	r0, #0
    fadc:	4770      	bx	lr
    fade:	381b      	subs	r0, #27
    fae0:	28e1      	cmp	r0, #225	; 0xe1
    fae2:	d206      	bcs.n	faf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x234>
    fae4:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fae8:	d303      	bcc.n	faf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x234>
    faea:	f244 2090 	movw	r0, #17040	; 0x4290
    faee:	4281      	cmp	r1, r0
    faf0:	d901      	bls.n	faf6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x238>
    faf2:	2012      	movs	r0, #18
    faf4:	4770      	bx	lr
    faf6:	2000      	movs	r0, #0
    faf8:	4770      	bx	lr
    fafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fafe:	4606      	mov	r6, r0
    fb00:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
    fb04:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
    fb08:	4615      	mov	r5, r2
    fb0a:	3028      	adds	r0, #40	; 0x28
    fb0c:	f7f7 ff22 	bl	7954 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    fb10:	4680      	mov	r8, r0
    fb12:	2102      	movs	r1, #2
    fb14:	f7fe f8ef 	bl	dcf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fb18:	4287      	cmp	r7, r0
    fb1a:	d200      	bcs.n	fb1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x260>
    fb1c:	4638      	mov	r0, r7
    fb1e:	4607      	mov	r7, r0
    fb20:	2102      	movs	r1, #2
    fb22:	4640      	mov	r0, r8
    fb24:	f7fe f8e7 	bl	dcf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fb28:	4284      	cmp	r4, r0
    fb2a:	d200      	bcs.n	fb2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x270>
    fb2c:	4620      	mov	r0, r4
    fb2e:	8831      	ldrh	r1, [r6, #0]
    fb30:	8029      	strh	r1, [r5, #0]
    fb32:	2f1b      	cmp	r7, #27
    fb34:	d913      	bls.n	fb5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
    fb36:	2ffb      	cmp	r7, #251	; 0xfb
    fb38:	d300      	bcc.n	fb3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    fb3a:	27fb      	movs	r7, #251	; 0xfb
    fb3c:	806f      	strh	r7, [r5, #2]
    fb3e:	281b      	cmp	r0, #27
    fb40:	d90f      	bls.n	fb62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    fb42:	28fb      	cmp	r0, #251	; 0xfb
    fb44:	d300      	bcc.n	fb48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28a>
    fb46:	20fb      	movs	r0, #251	; 0xfb
    fb48:	80e8      	strh	r0, [r5, #6]
    fb4a:	4640      	mov	r0, r8
    fb4c:	f7ff febf 	bl	f8ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    fb50:	80a8      	strh	r0, [r5, #4]
    fb52:	4640      	mov	r0, r8
    fb54:	f7ff febb 	bl	f8ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    fb58:	8128      	strh	r0, [r5, #8]
    fb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb5e:	271b      	movs	r7, #27
    fb60:	e7ec      	b.n	fb3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    fb62:	201b      	movs	r0, #27
    fb64:	e7f0      	b.n	fb48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28a>
    fb66:	b510      	push	{r4, lr}
    fb68:	f7ff fed0 	bl	f90c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    fb6c:	2800      	cmp	r0, #0
    fb6e:	d000      	beq.n	fb72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b4>
    fb70:	2001      	movs	r0, #1
    fb72:	bd10      	pop	{r4, pc}
    fb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb78:	7890      	ldrb	r0, [r2, #2]
    fb7a:	9e06      	ldr	r6, [sp, #24]
    fb7c:	461d      	mov	r5, r3
    fb7e:	4614      	mov	r4, r2
    fb80:	b908      	cbnz	r0, fb86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
    fb82:	f7fb f9ff 	bl	af84 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fb86:	78e4      	ldrb	r4, [r4, #3]
    fb88:	4607      	mov	r7, r0
    fb8a:	b914      	cbnz	r4, fb92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d4>
    fb8c:	f7fb f9fa 	bl	af84 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fb90:	4604      	mov	r4, r0
    fb92:	b16f      	cbz	r7, fbb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    fb94:	b164      	cbz	r4, fbb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    fb96:	4638      	mov	r0, r7
    fb98:	f7ff fea3 	bl	f8e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    fb9c:	4620      	mov	r0, r4
    fb9e:	f7ff fea0 	bl	f8e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    fba2:	b12f      	cbz	r7, fbb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    fba4:	b124      	cbz	r4, fbb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    fba6:	702f      	strb	r7, [r5, #0]
    fba8:	7034      	strb	r4, [r6, #0]
    fbaa:	2000      	movs	r0, #0
    fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fbb0:	2009      	movs	r0, #9
    fbb2:	e7fb      	b.n	fbac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ee>
    fbb4:	b510      	push	{r4, lr}
    fbb6:	f7fc fe68 	bl	c88a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    fbba:	b928      	cbnz	r0, fbc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30a>
    fbbc:	f7fc fe9b 	bl	c8f6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    fbc0:	b910      	cbnz	r0, fbc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30a>
    fbc2:	f7fc fea2 	bl	c90a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fbc6:	b108      	cbz	r0, fbcc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    fbc8:	2008      	movs	r0, #8
    fbca:	bd10      	pop	{r4, pc}
    fbcc:	f7fc fe32 	bl	c834 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    fbd0:	b940      	cbnz	r0, fbe4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    fbd2:	f7fc fe39 	bl	c848 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    fbd6:	b928      	cbnz	r0, fbe4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    fbd8:	f7fc fe4d 	bl	c876 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    fbdc:	b910      	cbnz	r0, fbe4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    fbde:	f7fc fe5e 	bl	c89e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fbe2:	b108      	cbz	r0, fbe8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32a>
    fbe4:	2004      	movs	r0, #4
    fbe6:	bd10      	pop	{r4, pc}
    fbe8:	f240 51b4 	movw	r1, #1460	; 0x5b4
    fbec:	2039      	movs	r0, #57	; 0x39
    fbee:	f7f4 fca5 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbf2:	b510      	push	{r4, lr}
    fbf4:	f7fb f9c0 	bl	af78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fbf8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    fbfc:	bd10      	pop	{r4, pc}
    fbfe:	6840      	ldr	r0, [r0, #4]
    fc00:	f000 b800 	b.w	fc04 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x346>
    fc04:	b508      	push	{r3, lr}
    fc06:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    fc0a:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    fc0e:	f88d 0000 	strb.w	r0, [sp]
    fc12:	9800      	ldr	r0, [sp, #0]
    fc14:	9000      	str	r0, [sp, #0]
    fc16:	f89d 0000 	ldrb.w	r0, [sp]
    fc1a:	1e40      	subs	r0, r0, #1
    fc1c:	4208      	tst	r0, r1
    fc1e:	d003      	beq.n	fc28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36a>
    fc20:	2904      	cmp	r1, #4
    fc22:	d001      	beq.n	fc28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36a>
    fc24:	2001      	movs	r0, #1
    fc26:	bd08      	pop	{r3, pc}
    fc28:	2000      	movs	r0, #0
    fc2a:	bd08      	pop	{r3, pc}
    fc2c:	b570      	push	{r4, r5, r6, lr}
    fc2e:	4605      	mov	r5, r0
    fc30:	f7fe fdc9 	bl	e7c6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fc34:	b148      	cbz	r0, fc4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    fc36:	4628      	mov	r0, r5
    fc38:	f7fe ff88 	bl	eb4c <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    fc3c:	4604      	mov	r4, r0
    fc3e:	4628      	mov	r0, r5
    fc40:	f7fe ff59 	bl	eaf6 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    fc44:	b118      	cbz	r0, fc4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x390>
    fc46:	200c      	movs	r0, #12
    fc48:	bd70      	pop	{r4, r5, r6, pc}
    fc4a:	2042      	movs	r0, #66	; 0x42
    fc4c:	bd70      	pop	{r4, r5, r6, pc}
    fc4e:	b164      	cbz	r4, fc6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ac>
    fc50:	8820      	ldrh	r0, [r4, #0]
    fc52:	f7fd feed 	bl	da30 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fc56:	8820      	ldrh	r0, [r4, #0]
    fc58:	2100      	movs	r1, #0
    fc5a:	f7f4 feed 	bl	4a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fc5e:	b120      	cbz	r0, fc6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ac>
    fc60:	f241 417b 	movw	r1, #5243	; 0x147b
    fc64:	2039      	movs	r0, #57	; 0x39
    fc66:	f7f4 fc69 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc6a:	2000      	movs	r0, #0
    fc6c:	bd70      	pop	{r4, r5, r6, pc}
    fc6e:	b530      	push	{r4, r5, lr}
    fc70:	f340 0400 	sbfx	r4, r0, #0, #1
    fc74:	f340 0040 	sbfx	r0, r0, #1, #1
    fc78:	1c40      	adds	r0, r0, #1
    fc7a:	9d03      	ldr	r5, [sp, #12]
    fc7c:	1c64      	adds	r4, r4, #1
    fc7e:	d000      	beq.n	fc82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c4>
    fc80:	b119      	cbz	r1, fc8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3cc>
    fc82:	b100      	cbz	r0, fc86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c8>
    fc84:	b10a      	cbz	r2, fc8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3cc>
    fc86:	b91c      	cbnz	r4, fc90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d2>
    fc88:	e001      	b.n	fc8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d0>
    fc8a:	2011      	movs	r0, #17
    fc8c:	bd30      	pop	{r4, r5, pc}
    fc8e:	2100      	movs	r1, #0
    fc90:	7019      	strb	r1, [r3, #0]
    fc92:	b900      	cbnz	r0, fc96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    fc94:	2200      	movs	r2, #0
    fc96:	702a      	strb	r2, [r5, #0]
    fc98:	2000      	movs	r0, #0
    fc9a:	bd30      	pop	{r4, r5, pc}
    fc9c:	b2c0      	uxtb	r0, r0
    fc9e:	06c1      	lsls	r1, r0, #27
    fca0:	d40c      	bmi.n	fcbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fe>
    fca2:	0681      	lsls	r1, r0, #26
    fca4:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    fca8:	d503      	bpl.n	fcb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    fcaa:	b9d1      	cbnz	r1, fce2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    fcac:	0781      	lsls	r1, r0, #30
    fcae:	d418      	bmi.n	fce2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    fcb0:	e001      	b.n	fcb6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    fcb2:	2900      	cmp	r1, #0
    fcb4:	d1fa      	bne.n	fcac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ee>
    fcb6:	0700      	lsls	r0, r0, #28
    fcb8:	d413      	bmi.n	fce2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    fcba:	e010      	b.n	fcde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    fcbc:	0641      	lsls	r1, r0, #25
    fcbe:	d410      	bmi.n	fce2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    fcc0:	0681      	lsls	r1, r0, #26
    fcc2:	d40e      	bmi.n	fce2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    fcc4:	07c1      	lsls	r1, r0, #31
    fcc6:	ea4f 7180 	mov.w	r1, r0, lsl #30
    fcca:	d004      	beq.n	fcd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x418>
    fccc:	2900      	cmp	r1, #0
    fcce:	db02      	blt.n	fcd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x418>
    fcd0:	0740      	lsls	r0, r0, #29
    fcd2:	d404      	bmi.n	fcde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    fcd4:	e005      	b.n	fce2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    fcd6:	0701      	lsls	r1, r0, #28
    fcd8:	d403      	bmi.n	fce2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    fcda:	0740      	lsls	r0, r0, #29
    fcdc:	d401      	bmi.n	fce2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    fcde:	2001      	movs	r0, #1
    fce0:	4770      	bx	lr
    fce2:	2000      	movs	r0, #0
    fce4:	4770      	bx	lr
    fce6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fce8:	4669      	mov	r1, sp
    fcea:	2001      	movs	r0, #1
    fcec:	f7fd fe45 	bl	d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fcf0:	b178      	cbz	r0, fd12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    fcf2:	f44f 71a9 	mov.w	r1, #338	; 0x152
    fcf6:	2039      	movs	r0, #57	; 0x39
    fcf8:	f7f4 fc20 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcfc:	9c02      	ldr	r4, [sp, #8]
    fcfe:	4620      	mov	r0, r4
    fd00:	f7fe ff27 	bl	eb52 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    fd04:	b128      	cbz	r0, fd12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    fd06:	4620      	mov	r0, r4
    fd08:	f7fe fd9a 	bl	e840 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    fd0c:	b108      	cbz	r0, fd12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    fd0e:	2001      	movs	r0, #1
    fd10:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fd12:	4668      	mov	r0, sp
    fd14:	f7f4 fe40 	bl	4998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fd18:	2800      	cmp	r0, #0
    fd1a:	d0ef      	beq.n	fcfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43e>
    fd1c:	2000      	movs	r0, #0
    fd1e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fd20 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    fd20:	6802      	ldr	r2, [r0, #0]
    fd22:	b912      	cbnz	r2, fd2a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    fd24:	6001      	str	r1, [r0, #0]
    fd26:	4770      	bx	lr
    fd28:	4602      	mov	r2, r0
    fd2a:	6850      	ldr	r0, [r2, #4]
    fd2c:	b108      	cbz	r0, fd32 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    fd2e:	428a      	cmp	r2, r1
    fd30:	d1fa      	bne.n	fd28 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    fd32:	428a      	cmp	r2, r1
    fd34:	d0f7      	beq.n	fd26 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    fd36:	6051      	str	r1, [r2, #4]
    fd38:	4770      	bx	lr
    fd3a:	b510      	push	{r4, lr}
    fd3c:	f7fe ff0f 	bl	eb5e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    fd40:	b108      	cbz	r0, fd46 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    fd42:	21ea      	movs	r1, #234	; 0xea
    fd44:	e004      	b.n	fd50 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x30>
    fd46:	f7f6 ffa1 	bl	6c8c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    fd4a:	2800      	cmp	r0, #0
    fd4c:	d003      	beq.n	fd56 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x36>
    fd4e:	21ef      	movs	r1, #239	; 0xef
    fd50:	2001      	movs	r0, #1
    fd52:	f7f4 fbf3 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd56:	bd10      	pop	{r4, pc}
    fd58:	b50e      	push	{r1, r2, r3, lr}
    fd5a:	4669      	mov	r1, sp
    fd5c:	2000      	movs	r0, #0
    fd5e:	f7fd fe0c 	bl	d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fd62:	b158      	cbz	r0, fd7c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    fd64:	21a0      	movs	r1, #160	; 0xa0
    fd66:	e006      	b.n	fd76 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x56>
    fd68:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    fd6c:	2100      	movs	r1, #0
    fd6e:	f7f4 fe63 	bl	4a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fd72:	b118      	cbz	r0, fd7c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    fd74:	21a4      	movs	r1, #164	; 0xa4
    fd76:	2001      	movs	r0, #1
    fd78:	f7f4 fbe0 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd7c:	4668      	mov	r0, sp
    fd7e:	f7f4 fe0b 	bl	4998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fd82:	2800      	cmp	r0, #0
    fd84:	d0f0      	beq.n	fd68 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x48>
    fd86:	bd0e      	pop	{r1, r2, r3, pc}
    fd88:	b510      	push	{r4, lr}
    fd8a:	4604      	mov	r4, r0
    fd8c:	e002      	b.n	fd94 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x74>
    fd8e:	6820      	ldr	r0, [r4, #0]
    fd90:	4780      	blx	r0
    fd92:	6864      	ldr	r4, [r4, #4]
    fd94:	2c00      	cmp	r4, #0
    fd96:	d1fa      	bne.n	fd8e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6e>
    fd98:	bd10      	pop	{r4, pc}
    fd9a:	b510      	push	{r4, lr}
    fd9c:	f7ff ffdc 	bl	fd58 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    fda0:	f7f4 ffc8 	bl	4d34 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    fda4:	f7f5 fa1a 	bl	51dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    fda8:	f7f5 fbe4 	bl	5574 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    fdac:	2800      	cmp	r0, #0
    fdae:	d003      	beq.n	fdb8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    fdb0:	21c4      	movs	r1, #196	; 0xc4
    fdb2:	2001      	movs	r0, #1
    fdb4:	f7f4 fbc2 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fdb8:	bd10      	pop	{r4, pc}
    fdba:	b510      	push	{r4, lr}
    fdbc:	f7ff ffbd 	bl	fd3a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    fdc0:	f7ff f865 	bl	ee8e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    fdc4:	2800      	cmp	r0, #0
    fdc6:	d004      	beq.n	fdd2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xb2>
    fdc8:	f44f 7183 	mov.w	r1, #262	; 0x106
    fdcc:	2001      	movs	r0, #1
    fdce:	f7f4 fbb5 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fdd2:	bd10      	pop	{r4, pc}

0000fdd4 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    fdd4:	b510      	push	{r4, lr}
    fdd6:	f7fb fc51 	bl	b67c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    fdda:	f000 f844 	bl	fe66 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    fdde:	f7fb f925 	bl	b02c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    fde2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fde6:	f7fb ba1b 	b.w	b220 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000fdea <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    fdea:	b510      	push	{r4, lr}
    fdec:	24c8      	movs	r4, #200	; 0xc8
    fdee:	1e64      	subs	r4, r4, #1
    fdf0:	b2e4      	uxtb	r4, r4
    fdf2:	f7fb f939 	bl	b068 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    fdf6:	2802      	cmp	r0, #2
    fdf8:	d003      	beq.n	fe02 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    fdfa:	2801      	cmp	r0, #1
    fdfc:	d000      	beq.n	fe00 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    fdfe:	2000      	movs	r0, #0
    fe00:	bd10      	pop	{r4, pc}
    fe02:	2c00      	cmp	r4, #0
    fe04:	d1f3      	bne.n	fdee <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    fe06:	218f      	movs	r1, #143	; 0x8f
    fe08:	203b      	movs	r0, #59	; 0x3b
    fe0a:	f7f4 fb97 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fe0e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    fe0e:	b510      	push	{r4, lr}
    fe10:	f7f4 fa82 	bl	4318 <mpsl_fem_lna_configuration_clear>
    fe14:	2800      	cmp	r0, #0
    fe16:	d005      	beq.n	fe24 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fe18:	1c40      	adds	r0, r0, #1
    fe1a:	d003      	beq.n	fe24 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fe1c:	214a      	movs	r1, #74	; 0x4a
    fe1e:	2040      	movs	r0, #64	; 0x40
    fe20:	f7f4 fb8c 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe24:	bd10      	pop	{r4, pc}

0000fe26 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    fe26:	b510      	push	{r4, lr}
    fe28:	f7f4 fa82 	bl	4330 <mpsl_fem_pa_configuration_clear>
    fe2c:	2800      	cmp	r0, #0
    fe2e:	d005      	beq.n	fe3c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fe30:	1c40      	adds	r0, r0, #1
    fe32:	d003      	beq.n	fe3c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fe34:	2143      	movs	r1, #67	; 0x43
    fe36:	2040      	movs	r0, #64	; 0x40
    fe38:	f7f4 fb80 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe3c:	bd10      	pop	{r4, pc}

0000fe3e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    fe3e:	b510      	push	{r4, lr}
    fe40:	2100      	movs	r1, #0
    fe42:	4608      	mov	r0, r1
    fe44:	f7f4 fa6e 	bl	4324 <mpsl_fem_lna_configuration_set>
    fe48:	b108      	cbz	r0, fe4e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    fe4a:	2000      	movs	r0, #0
    fe4c:	bd10      	pop	{r4, pc}
    fe4e:	2001      	movs	r0, #1
    fe50:	bd10      	pop	{r4, pc}

0000fe52 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    fe52:	b508      	push	{r3, lr}
    fe54:	4668      	mov	r0, sp
    fe56:	f7f4 fa77 	bl	4348 <mpsl_fem_pa_is_configured>
    fe5a:	f89d 0000 	ldrb.w	r0, [sp]
    fe5e:	2800      	cmp	r0, #0
    fe60:	d000      	beq.n	fe64 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    fe62:	2001      	movs	r0, #1
    fe64:	bd08      	pop	{r3, pc}

0000fe66 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    fe66:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fe6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fe6e:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    fe72:	f3bf 8f4f 	dsb	sy
    fe76:	f3bf 8f6f 	isb	sy
    fe7a:	f7fb ba53 	b.w	b324 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    fe7e:	2800      	cmp	r0, #0
    fe80:	db09      	blt.n	fe96 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    fe82:	f000 021f 	and.w	r2, r0, #31
    fe86:	2101      	movs	r1, #1
    fe88:	4091      	lsls	r1, r2
    fe8a:	0940      	lsrs	r0, r0, #5
    fe8c:	0080      	lsls	r0, r0, #2
    fe8e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fe92:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fe96:	4770      	bx	lr
    fe98:	2800      	cmp	r0, #0
    fe9a:	db0d      	blt.n	feb8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    fe9c:	f000 021f 	and.w	r2, r0, #31
    fea0:	2101      	movs	r1, #1
    fea2:	4091      	lsls	r1, r2
    fea4:	0940      	lsrs	r0, r0, #5
    fea6:	0080      	lsls	r0, r0, #2
    fea8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    feac:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    feb0:	f3bf 8f4f 	dsb	sy
    feb4:	f3bf 8f6f 	isb	sy
    feb8:	4770      	bx	lr

0000feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    feba:	b510      	push	{r4, lr}
    febc:	2801      	cmp	r0, #1
    febe:	d006      	beq.n	fece <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    fec0:	2802      	cmp	r0, #2
    fec2:	d006      	beq.n	fed2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    fec4:	f640 31a9 	movw	r1, #2985	; 0xba9
    fec8:	203e      	movs	r0, #62	; 0x3e
    feca:	f7f4 fb37 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fece:	2028      	movs	r0, #40	; 0x28
    fed0:	bd10      	pop	{r4, pc}
    fed2:	2018      	movs	r0, #24
    fed4:	bd10      	pop	{r4, pc}

0000fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    fed6:	b510      	push	{r4, lr}
    fed8:	2801      	cmp	r0, #1
    feda:	d006      	beq.n	feea <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    fedc:	2802      	cmp	r0, #2
    fede:	d007      	beq.n	fef0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    fee0:	f640 31bd 	movw	r1, #3005	; 0xbbd
    fee4:	203e      	movs	r0, #62	; 0x3e
    fee6:	f7f4 fb29 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    feea:	f641 6014 	movw	r0, #7700	; 0x1e14
    feee:	bd10      	pop	{r4, pc}
    fef0:	f241 1030 	movw	r0, #4400	; 0x1130
    fef4:	bd10      	pop	{r4, pc}

0000fef6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    fef6:	f7fc b935 	b.w	c164 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48c>
    fefa:	b510      	push	{r4, lr}
    fefc:	460a      	mov	r2, r1
    fefe:	b130      	cbz	r0, ff0e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    ff00:	2801      	cmp	r0, #1
    ff02:	d00b      	beq.n	ff1c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    ff04:	f240 612f 	movw	r1, #1583	; 0x62f
    ff08:	203e      	movs	r0, #62	; 0x3e
    ff0a:	f7f4 fb17 	bl	453c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff12:	f102 0128 	add.w	r1, r2, #40	; 0x28
    ff16:	4610      	mov	r0, r2
    ff18:	f7fb b8fa 	b.w	b110 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    ff1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff20:	f102 0129 	add.w	r1, r2, #41	; 0x29
    ff24:	4610      	mov	r0, r2
    ff26:	f7fb b8dd 	b.w	b0e4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000ff2a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    ff2a:	b570      	push	{r4, r5, r6, lr}
    ff2c:	4605      	mov	r5, r0
    ff2e:	4614      	mov	r4, r2
    ff30:	4608      	mov	r0, r1
    ff32:	f7ff ffd0 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ff36:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    ff3a:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    ff3e:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    ff42:	4620      	mov	r0, r4
    ff44:	f7ff ffc7 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ff48:	4428      	add	r0, r5
    ff4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ff4e:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    ff52:	fbb0 f5f1 	udiv	r5, r0, r1
    ff56:	4620      	mov	r0, r4
    ff58:	f7ff ffaf 	bl	feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ff5c:	4428      	add	r0, r5
    ff5e:	1d40      	adds	r0, r0, #5
    ff60:	bd70      	pop	{r4, r5, r6, pc}

0000ff62 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    ff62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff66:	4607      	mov	r7, r0
    ff68:	461d      	mov	r5, r3
    ff6a:	460e      	mov	r6, r1
    ff6c:	4614      	mov	r4, r2
    ff6e:	4610      	mov	r0, r2
    ff70:	f7ff ffb1 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ff74:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    ff78:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    ff7c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ff80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ff84:	2e02      	cmp	r6, #2
    ff86:	d00e      	beq.n	ffa6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    ff88:	f240 52dc 	movw	r2, #1500	; 0x5dc
    ff8c:	4411      	add	r1, r2
    ff8e:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    ff92:	fbb1 f6f0 	udiv	r6, r1, r0
    ff96:	4620      	mov	r0, r4
    ff98:	f7ff ff8f 	bl	feba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ff9c:	4430      	add	r0, r6
    ff9e:	4428      	add	r0, r5
    ffa0:	1d40      	adds	r0, r0, #5
    ffa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffa6:	4602      	mov	r2, r0
    ffa8:	e7f0      	b.n	ff8c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000ffaa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    ffaa:	b510      	push	{r4, lr}
    ffac:	4604      	mov	r4, r0
    ffae:	4608      	mov	r0, r1
    ffb0:	f7ff ff91 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ffb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ffb8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ffbc:	fbb0 f0f1 	udiv	r0, r0, r1
    ffc0:	1a20      	subs	r0, r4, r0
    ffc2:	1e80      	subs	r0, r0, #2
    ffc4:	bd10      	pop	{r4, pc}

0000ffc6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    ffc6:	b510      	push	{r4, lr}
    ffc8:	4604      	mov	r4, r0
    ffca:	4608      	mov	r0, r1
    ffcc:	f7ff ff83 	bl	fed6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ffd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ffd4:	fbb0 f0f1 	udiv	r0, r0, r1
    ffd8:	1a20      	subs	r0, r4, r0
    ffda:	bd10      	pop	{r4, pc}

0000ffdc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    ffdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ffe0:	2902      	cmp	r1, #2
    ffe2:	d008      	beq.n	fff6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    ffe4:	f240 51dc 	movw	r1, #1500	; 0x5dc
    ffe8:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    ffec:	fbb1 f1f2 	udiv	r1, r1, r2
    fff0:	4408      	add	r0, r1
    fff2:	1e80      	subs	r0, r0, #2
    fff4:	4770      	bx	lr
    fff6:	4611      	mov	r1, r2
    fff8:	e7f6      	b.n	ffe8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000fffa <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    fffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fffe:	2902      	cmp	r1, #2
   10000:	d007      	beq.n	10012 <CONFIG_PM_SRAM_SIZE+0x12>
   10002:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10006:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1000a:	fbb1 f1f2 	udiv	r1, r1, r2
   1000e:	4408      	add	r0, r1
   10010:	4770      	bx	lr
   10012:	4611      	mov	r1, r2
   10014:	e7f7      	b.n	10006 <CONFIG_PM_SRAM_SIZE+0x6>
   10016:	080c      	.short	0x080c
   10018:	010d1702 	.word	0x010d1702
   1001c:	09090201 	.word	0x09090201
   10020:	02060101 	.word	0x02060101
   10024:	03181809 	.word	0x03181809
   10028:	09090101 	.word	0x09090101
   1002c:	00050303 	.word	0x00050303

00010030 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   10030:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10032:	4d43      	ldr	r5, [pc, #268]	; (10140 <bt_init+0x110>)
   10034:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   10038:	6899      	ldr	r1, [r3, #8]
   1003a:	f011 0101 	ands.w	r1, r1, #1
{
   1003e:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10040:	d121      	bne.n	10086 <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10042:	aa03      	add	r2, sp, #12
   10044:	f640 4003 	movw	r0, #3075	; 0xc03
   10048:	f005 fa6a 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   1004c:	4604      	mov	r4, r0
   1004e:	2800      	cmp	r0, #0
   10050:	d173      	bne.n	1013a <bt_init+0x10a>
		hci_reset_complete(rsp);
   10052:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
   10054:	689b      	ldr	r3, [r3, #8]
	if (status) {
   10056:	781b      	ldrb	r3, [r3, #0]
   10058:	b993      	cbnz	r3, 10080 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1005a:	f3bf 8f5b 	dmb	ish
   1005e:	462b      	mov	r3, r5
   10060:	f853 2f98 	ldr.w	r2, [r3, #152]!
   10064:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   10068:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1006c:	f3bf 8f5b 	dmb	ish
   10070:	e853 1f00 	ldrex	r1, [r3]
   10074:	e843 2000 	strex	r0, r2, [r3]
   10078:	2800      	cmp	r0, #0
   1007a:	d1f9      	bne.n	10070 <bt_init+0x40>
   1007c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   10080:	9803      	ldr	r0, [sp, #12]
   10082:	f00c f8bb 	bl	1c1fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10086:	aa03      	add	r2, sp, #12
   10088:	2100      	movs	r1, #0
   1008a:	f241 0003 	movw	r0, #4099	; 0x1003
   1008e:	f005 fa47 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   10092:	4604      	mov	r4, r0
   10094:	2800      	cmp	r0, #0
   10096:	d150      	bne.n	1013a <bt_init+0x10a>
	read_local_features_complete(rsp);
   10098:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1009a:	482a      	ldr	r0, [pc, #168]	; (10144 <bt_init+0x114>)
   1009c:	6899      	ldr	r1, [r3, #8]
   1009e:	2208      	movs	r2, #8
   100a0:	3101      	adds	r1, #1
   100a2:	f012 f8a1 	bl	221e8 <memcpy>
	net_buf_unref(rsp);
   100a6:	9803      	ldr	r0, [sp, #12]
   100a8:	f00c f8a8 	bl	1c1fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   100ac:	4621      	mov	r1, r4
   100ae:	aa03      	add	r2, sp, #12
   100b0:	f241 0001 	movw	r0, #4097	; 0x1001
   100b4:	f005 fa34 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   100b8:	4604      	mov	r4, r0
   100ba:	2800      	cmp	r0, #0
   100bc:	d13d      	bne.n	1013a <bt_init+0x10a>
	read_local_ver_complete(rsp);
   100be:	9803      	ldr	r0, [sp, #12]
   100c0:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   100c2:	785a      	ldrb	r2, [r3, #1]
   100c4:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   100c8:	78d9      	ldrb	r1, [r3, #3]
   100ca:	789a      	ldrb	r2, [r3, #2]
   100cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   100d0:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   100d2:	791a      	ldrb	r2, [r3, #4]
   100d4:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   100d8:	7a19      	ldrb	r1, [r3, #8]
   100da:	79da      	ldrb	r2, [r3, #7]
   100dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   100e0:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   100e2:	795a      	ldrb	r2, [r3, #5]
   100e4:	799b      	ldrb	r3, [r3, #6]
   100e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   100ea:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   100ec:	f00c f886 	bl	1c1fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   100f0:	4621      	mov	r1, r4
   100f2:	aa03      	add	r2, sp, #12
   100f4:	f241 0002 	movw	r0, #4098	; 0x1002
   100f8:	f005 fa12 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   100fc:	4604      	mov	r4, r0
   100fe:	b9e0      	cbnz	r0, 1013a <bt_init+0x10a>
	read_supported_commands_complete(rsp);
   10100:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   10102:	4811      	ldr	r0, [pc, #68]	; (10148 <bt_init+0x118>)
   10104:	6899      	ldr	r1, [r3, #8]
   10106:	2240      	movs	r2, #64	; 0x40
   10108:	3101      	adds	r1, #1
   1010a:	f012 f86d 	bl	221e8 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   1010e:	480e      	ldr	r0, [pc, #56]	; (10148 <bt_init+0x118>)
   10110:	f012 f950 	bl	223b4 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   10114:	9803      	ldr	r0, [sp, #12]
   10116:	f00c f871 	bl	1c1fc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1011a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1011e:	065a      	lsls	r2, r3, #25
   10120:	d41a      	bmi.n	10158 <bt_init+0x128>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   10122:	4b0a      	ldr	r3, [pc, #40]	; (1014c <bt_init+0x11c>)
   10124:	490a      	ldr	r1, [pc, #40]	; (10150 <bt_init+0x120>)
		BT_ERR("Non-LE capable controller detected!");
   10126:	480b      	ldr	r0, [pc, #44]	; (10154 <bt_init+0x124>)
   10128:	1ac9      	subs	r1, r1, r3
   1012a:	08c9      	lsrs	r1, r1, #3
   1012c:	0189      	lsls	r1, r1, #6
   1012e:	f041 0101 	orr.w	r1, r1, #1
   10132:	f00f ffeb 	bl	2010c <log_0>
		return -ENODEV;
   10136:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   1013a:	4620      	mov	r0, r4
   1013c:	b008      	add	sp, #32
   1013e:	bd70      	pop	{r4, r5, r6, pc}
   10140:	200002a0 	.word	0x200002a0
   10144:	200002dc 	.word	0x200002dc
   10148:	200002e4 	.word	0x200002e4
   1014c:	000256c4 	.word	0x000256c4
   10150:	00025704 	.word	0x00025704
   10154:	0002736f 	.word	0x0002736f
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10158:	4621      	mov	r1, r4
   1015a:	aa03      	add	r2, sp, #12
   1015c:	f242 0003 	movw	r0, #8195	; 0x2003
   10160:	f005 f9de 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   10164:	4604      	mov	r4, r0
   10166:	2800      	cmp	r0, #0
   10168:	d1e7      	bne.n	1013a <bt_init+0x10a>
	read_le_features_complete(rsp);
   1016a:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1016c:	48b2      	ldr	r0, [pc, #712]	; (10438 <bt_init+0x408>)
   1016e:	6899      	ldr	r1, [r3, #8]
   10170:	2208      	movs	r2, #8
   10172:	3101      	adds	r1, #1
   10174:	f012 f838 	bl	221e8 <memcpy>
	net_buf_unref(rsp);
   10178:	9803      	ldr	r0, [sp, #12]
   1017a:	f00c f83f 	bl	1c1fc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1017e:	4621      	mov	r1, r4
   10180:	aa03      	add	r2, sp, #12
   10182:	f242 0002 	movw	r0, #8194	; 0x2002
   10186:	f005 f9cb 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   1018a:	4604      	mov	r4, r0
   1018c:	2800      	cmp	r0, #0
   1018e:	d1d4      	bne.n	1013a <bt_init+0x10a>
		le_read_buffer_size_complete(rsp);
   10190:	9b03      	ldr	r3, [sp, #12]
   10192:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10194:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10198:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
   1019c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1019e:	b121      	cbz	r1, 101aa <bt_init+0x17a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   101a0:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   101a2:	48a6      	ldr	r0, [pc, #664]	; (1043c <bt_init+0x40c>)
   101a4:	4611      	mov	r1, r2
   101a6:	f014 fd46 	bl	24c36 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   101aa:	9803      	ldr	r0, [sp, #12]
   101ac:	f00c f826 	bl	1c1fc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   101b0:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   101b4:	f016 0620 	ands.w	r6, r6, #32
   101b8:	f000 811a 	beq.w	103f0 <bt_init+0x3c0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   101bc:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   101c0:	071b      	lsls	r3, r3, #28
   101c2:	d511      	bpl.n	101e8 <bt_init+0x1b8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   101c4:	aa03      	add	r2, sp, #12
   101c6:	2100      	movs	r1, #0
   101c8:	f242 001c 	movw	r0, #8220	; 0x201c
   101cc:	f005 f9a8 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   101d0:	4604      	mov	r4, r0
   101d2:	2800      	cmp	r0, #0
   101d4:	d1b1      	bne.n	1013a <bt_init+0x10a>
		le_read_supp_states_complete(rsp);
   101d6:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   101d8:	6883      	ldr	r3, [r0, #8]
   101da:	f853 2f01 	ldr.w	r2, [r3, #1]!
   101de:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   101e0:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   101e4:	f00c f80a 	bl	1c1fc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   101e8:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   101ec:	069e      	lsls	r6, r3, #26
   101ee:	d523      	bpl.n	10238 <bt_init+0x208>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   101f0:	a902      	add	r1, sp, #8
   101f2:	f10d 0006 	add.w	r0, sp, #6
   101f6:	f005 fa0b 	bl	15610 <hci_le_read_max_data_len>
		if (err) {
   101fa:	4604      	mov	r4, r0
   101fc:	2800      	cmp	r0, #0
   101fe:	d19c      	bne.n	1013a <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10200:	2104      	movs	r1, #4
   10202:	f242 0024 	movw	r0, #8228	; 0x2024
   10206:	f005 f82f 	bl	15268 <bt_hci_cmd_create>
		if (!buf) {
   1020a:	4606      	mov	r6, r0
   1020c:	2800      	cmp	r0, #0
   1020e:	f000 80f6 	beq.w	103fe <bt_init+0x3ce>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10212:	2104      	movs	r1, #4
   10214:	3008      	adds	r0, #8
   10216:	f014 f94a 	bl	244ae <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1021a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1021e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10220:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   10224:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10226:	4622      	mov	r2, r4
   10228:	4631      	mov	r1, r6
   1022a:	f242 0024 	movw	r0, #8228	; 0x2024
   1022e:	f005 f977 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   10232:	4604      	mov	r4, r0
   10234:	2800      	cmp	r0, #0
   10236:	d180      	bne.n	1013a <bt_init+0x10a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   10238:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1023c:	065c      	lsls	r4, r3, #25
   1023e:	d52c      	bpl.n	1029a <bt_init+0x26a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   10240:	2102      	movs	r1, #2
   10242:	f242 002e 	movw	r0, #8238	; 0x202e
   10246:	f005 f80f 	bl	15268 <bt_hci_cmd_create>
		if (!buf) {
   1024a:	4604      	mov	r4, r0
   1024c:	2800      	cmp	r0, #0
   1024e:	f000 80d6 	beq.w	103fe <bt_init+0x3ce>
   10252:	2102      	movs	r1, #2
   10254:	3008      	adds	r0, #8
   10256:	f014 f92a 	bl	244ae <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
   1025a:	f06f 037b 	mvn.w	r3, #123	; 0x7b
   1025e:	7003      	strb	r3, [r0, #0]
   10260:	2303      	movs	r3, #3
   10262:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   10264:	4621      	mov	r1, r4
   10266:	2200      	movs	r2, #0
   10268:	f242 002e 	movw	r0, #8238	; 0x202e
   1026c:	f005 f958 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   10270:	4604      	mov	r4, r0
   10272:	2800      	cmp	r0, #0
   10274:	f47f af61 	bne.w	1013a <bt_init+0x10a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   10278:	4601      	mov	r1, r0
   1027a:	aa03      	add	r2, sp, #12
   1027c:	f242 002a 	movw	r0, #8234	; 0x202a
   10280:	f005 f94e 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   10284:	4604      	mov	r4, r0
   10286:	2800      	cmp	r0, #0
   10288:	f47f af57 	bne.w	1013a <bt_init+0x10a>
		le_read_resolving_list_size_complete(rsp);
   1028c:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
   1028e:	6883      	ldr	r3, [r0, #8]
   10290:	785b      	ldrb	r3, [r3, #1]
   10292:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
   10296:	f00b ffb1 	bl	1c1fc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1029a:	2108      	movs	r1, #8
   1029c:	f242 0001 	movw	r0, #8193	; 0x2001
   102a0:	f004 ffe2 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   102a4:	4604      	mov	r4, r0
   102a6:	2800      	cmp	r0, #0
   102a8:	f000 80a9 	beq.w	103fe <bt_init+0x3ce>
   102ac:	2108      	movs	r1, #8
   102ae:	4408      	add	r0, r1
   102b0:	f014 f8fd 	bl	244ae <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   102b4:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   102b8:	f011 0f40 	tst.w	r1, #64	; 0x40
   102bc:	4602      	mov	r2, r0
   102be:	f240 2302 	movw	r3, #514	; 0x202
   102c2:	bf08      	it	eq
   102c4:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   102c6:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   102c8:	bf4c      	ite	mi
   102ca:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   102ce:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   102d2:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   102d4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   102d8:	bf48      	it	mi
   102da:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   102de:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   102e2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   102e6:	bf18      	it	ne
   102e8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   102ec:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   102f0:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   102f2:	bf48      	it	mi
   102f4:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   102f8:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   102fa:	bf08      	it	eq
   102fc:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   10300:	2100      	movs	r1, #0
   10302:	f012 f930 	bl	22566 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10306:	4621      	mov	r1, r4
   10308:	2200      	movs	r2, #0
   1030a:	f242 0001 	movw	r0, #8193	; 0x2001
   1030e:	f005 f907 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   10312:	4604      	mov	r4, r0
   10314:	2800      	cmp	r0, #0
   10316:	f47f af10 	bne.w	1013a <bt_init+0x10a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1031a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1031e:	0698      	lsls	r0, r3, #26
   10320:	d41e      	bmi.n	10360 <bt_init+0x330>
	if (bt_dev.le.acl_mtu) {
   10322:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   10326:	b9d9      	cbnz	r1, 10360 <bt_init+0x330>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10328:	aa03      	add	r2, sp, #12
   1032a:	f241 0005 	movw	r0, #4101	; 0x1005
   1032e:	f005 f8f7 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   10332:	4604      	mov	r4, r0
   10334:	2800      	cmp	r0, #0
   10336:	f47f af00 	bne.w	1013a <bt_init+0x10a>
	if (bt_dev.le.acl_mtu) {
   1033a:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   1033e:	b963      	cbnz	r3, 1035a <bt_init+0x32a>
	read_buffer_size_complete(rsp);
   10340:	9b03      	ldr	r3, [sp, #12]
   10342:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10344:	785a      	ldrb	r2, [r3, #1]
   10346:	7899      	ldrb	r1, [r3, #2]
   10348:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1034c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10350:	889a      	ldrh	r2, [r3, #4]
   10352:	483a      	ldr	r0, [pc, #232]	; (1043c <bt_init+0x40c>)
   10354:	4611      	mov	r1, r2
   10356:	f014 fc6e 	bl	24c36 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1035a:	9803      	ldr	r0, [sp, #12]
   1035c:	f00b ff4e 	bl	1c1fc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10360:	2108      	movs	r1, #8
   10362:	f640 4001 	movw	r0, #3073	; 0xc01
   10366:	f004 ff7f 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   1036a:	4604      	mov	r4, r0
   1036c:	2800      	cmp	r0, #0
   1036e:	d046      	beq.n	103fe <bt_init+0x3ce>
   10370:	2108      	movs	r1, #8
   10372:	4408      	add	r0, r1
   10374:	f014 f89b 	bl	244ae <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10378:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1037c:	07d9      	lsls	r1, r3, #31
   1037e:	4602      	mov	r2, r0
   10380:	d552      	bpl.n	10428 <bt_init+0x3f8>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10382:	a12b      	add	r1, pc, #172	; (adr r1, 10430 <bt_init+0x400>)
   10384:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   10388:	f012 f8ed 	bl	22566 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1038c:	4621      	mov	r1, r4
   1038e:	2200      	movs	r2, #0
   10390:	f640 4001 	movw	r0, #3073	; 0xc01
   10394:	f005 f8c4 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   10398:	4604      	mov	r4, r0
   1039a:	2800      	cmp	r0, #0
   1039c:	f47f aecd 	bne.w	1013a <bt_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   103a0:	4601      	mov	r1, r0
   103a2:	aa02      	add	r2, sp, #8
   103a4:	f64f 4001 	movw	r0, #64513	; 0xfc01
   103a8:	f005 f8ba 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   103ac:	4e24      	ldr	r6, [pc, #144]	; (10440 <bt_init+0x410>)
   103ae:	4b25      	ldr	r3, [pc, #148]	; (10444 <bt_init+0x414>)
   103b0:	1af6      	subs	r6, r6, r3
   103b2:	08f6      	lsrs	r6, r6, #3
   103b4:	01b6      	lsls	r6, r6, #6
   103b6:	2800      	cmp	r0, #0
   103b8:	d04c      	beq.n	10454 <bt_init+0x424>
		BT_WARN("Vendor HCI extensions not available");
   103ba:	4823      	ldr	r0, [pc, #140]	; (10448 <bt_init+0x418>)
   103bc:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
   103c0:	f00f fea4 	bl	2010c <log_0>
	err = bt_id_init();
   103c4:	f006 fa64 	bl	16890 <bt_id_init>
	if (err) {
   103c8:	4604      	mov	r4, r0
   103ca:	2800      	cmp	r0, #0
   103cc:	f47f aeb5 	bne.w	1013a <bt_init+0x10a>
		err = bt_conn_init();
   103d0:	f007 fc68 	bl	17ca4 <bt_conn_init>
		if (err) {
   103d4:	4604      	mov	r4, r0
   103d6:	2800      	cmp	r0, #0
   103d8:	f47f aeaf 	bne.w	1013a <bt_init+0x10a>
		if (!bt_dev.id_count) {
   103dc:	79eb      	ldrb	r3, [r5, #7]
   103de:	2b00      	cmp	r3, #0
   103e0:	f040 80a5 	bne.w	1052e <bt_init+0x4fe>
			BT_INFO("No ID address. App must call settings_load()");
   103e4:	4819      	ldr	r0, [pc, #100]	; (1044c <bt_init+0x41c>)
   103e6:	f046 0103 	orr.w	r1, r6, #3
   103ea:	f00f fe8f 	bl	2010c <log_0>
			return 0;
   103ee:	e6a4      	b.n	1013a <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   103f0:	2102      	movs	r1, #2
   103f2:	f640 406d 	movw	r0, #3181	; 0xc6d
   103f6:	f004 ff37 	bl	15268 <bt_hci_cmd_create>
		if (!buf) {
   103fa:	4604      	mov	r4, r0
   103fc:	b910      	cbnz	r0, 10404 <bt_init+0x3d4>
		return -ENOBUFS;
   103fe:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10402:	e69a      	b.n	1013a <bt_init+0x10a>
   10404:	2102      	movs	r1, #2
   10406:	3008      	adds	r0, #8
   10408:	f014 f851 	bl	244ae <net_buf_simple_add>
		cp_le->le = 0x01;
   1040c:	2301      	movs	r3, #1
   1040e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10410:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10412:	4621      	mov	r1, r4
   10414:	4632      	mov	r2, r6
   10416:	f640 406d 	movw	r0, #3181	; 0xc6d
   1041a:	f005 f881 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   1041e:	4604      	mov	r4, r0
   10420:	2800      	cmp	r0, #0
   10422:	f43f aecb 	beq.w	101bc <bt_init+0x18c>
   10426:	e688      	b.n	1013a <bt_init+0x10a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   10428:	4809      	ldr	r0, [pc, #36]	; (10450 <bt_init+0x420>)
   1042a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1042e:	e7ab      	b.n	10388 <bt_init+0x358>
   10430:	02008890 	.word	0x02008890
   10434:	20008000 	.word	0x20008000
   10438:	20000340 	.word	0x20000340
   1043c:	20000370 	.word	0x20000370
   10440:	00025704 	.word	0x00025704
   10444:	000256c4 	.word	0x000256c4
   10448:	00027393 	.word	0x00027393
   1044c:	00027467 	.word	0x00027467
   10450:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
   10454:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   10456:	4839      	ldr	r0, [pc, #228]	; (1053c <bt_init+0x50c>)
	rp.info = (void *)rsp->data;
   10458:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   1045a:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   1045e:	2a03      	cmp	r2, #3
		return plat_str[platform];
   10460:	bf96      	itet	ls
   10462:	4937      	ldrls	r1, [pc, #220]	; (10540 <bt_init+0x510>)
	return "unknown";
   10464:	4937      	ldrhi	r1, [pc, #220]	; (10544 <bt_init+0x514>)
		return plat_str[platform];
   10466:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   1046a:	f046 0303 	orr.w	r3, r6, #3
   1046e:	f00f fe6e 	bl	2014e <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   10472:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   10476:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1047a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
   1047c:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   10480:	d12e      	bne.n	104e0 <bt_init+0x4b0>
	if (variant < ARRAY_SIZE(nordic_str)) {
   10482:	2a03      	cmp	r2, #3
   10484:	d82c      	bhi.n	104e0 <bt_init+0x4b0>
		return nordic_str[variant];
   10486:	4930      	ldr	r1, [pc, #192]	; (10548 <bt_init+0x518>)
   10488:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   1048c:	482f      	ldr	r0, [pc, #188]	; (1054c <bt_init+0x51c>)
   1048e:	f00f fe5e 	bl	2014e <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   10492:	7962      	ldrb	r2, [r4, #5]
   10494:	482e      	ldr	r0, [pc, #184]	; (10550 <bt_init+0x520>)
	if (variant < ARRAY_SIZE(var_str)) {
   10496:	2a03      	cmp	r2, #3
		return var_str[variant];
   10498:	bf96      	itet	ls
   1049a:	492e      	ldrls	r1, [pc, #184]	; (10554 <bt_init+0x524>)
	return "unknown";
   1049c:	4929      	ldrhi	r1, [pc, #164]	; (10544 <bt_init+0x514>)
		return var_str[variant];
   1049e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   104a2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   104a6:	79a2      	ldrb	r2, [r4, #6]
   104a8:	9205      	str	r2, [sp, #20]
   104aa:	f8b4 2007 	ldrh.w	r2, [r4, #7]
   104ae:	9206      	str	r2, [sp, #24]
   104b0:	f8d4 2009 	ldr.w	r2, [r4, #9]
   104b4:	9207      	str	r2, [sp, #28]
   104b6:	f046 0303 	orr.w	r3, r6, #3
   104ba:	2205      	movs	r2, #5
   104bc:	a903      	add	r1, sp, #12
   104be:	f00f fe7b 	bl	201b8 <log_n>
	net_buf_unref(rsp);
   104c2:	9802      	ldr	r0, [sp, #8]
   104c4:	f00b fe9a 	bl	1c1fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   104c8:	aa02      	add	r2, sp, #8
   104ca:	2100      	movs	r1, #0
   104cc:	f64f 4002 	movw	r0, #64514	; 0xfc02
   104d0:	f005 f826 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   104d4:	4604      	mov	r4, r0
   104d6:	b128      	cbz	r0, 104e4 <bt_init+0x4b4>
		BT_WARN("Failed to read supported vendor commands");
   104d8:	481f      	ldr	r0, [pc, #124]	; (10558 <bt_init+0x528>)
   104da:	f046 0102 	orr.w	r1, r6, #2
   104de:	e76f      	b.n	103c0 <bt_init+0x390>
		return "unknown";
   104e0:	4918      	ldr	r1, [pc, #96]	; (10544 <bt_init+0x514>)
   104e2:	e7d3      	b.n	1048c <bt_init+0x45c>
	rp.cmds = (void *)rsp->data;
   104e4:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   104e6:	481d      	ldr	r0, [pc, #116]	; (1055c <bt_init+0x52c>)
   104e8:	6899      	ldr	r1, [r3, #8]
   104ea:	2202      	movs	r2, #2
   104ec:	3101      	adds	r1, #1
   104ee:	f011 fe7b 	bl	221e8 <memcpy>
	net_buf_unref(rsp);
   104f2:	9802      	ldr	r0, [sp, #8]
   104f4:	f00b fe82 	bl	1c1fc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   104f8:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   104fc:	075b      	lsls	r3, r3, #29
   104fe:	f57f af61 	bpl.w	103c4 <bt_init+0x394>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   10502:	aa02      	add	r2, sp, #8
   10504:	4621      	mov	r1, r4
   10506:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1050a:	f005 f809 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   1050e:	b118      	cbz	r0, 10518 <bt_init+0x4e8>
			BT_WARN("Failed to read supported vendor features");
   10510:	4813      	ldr	r0, [pc, #76]	; (10560 <bt_init+0x530>)
   10512:	f046 0102 	orr.w	r1, r6, #2
   10516:	e753      	b.n	103c0 <bt_init+0x390>
		rp.feat = (void *)rsp->data;
   10518:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1051a:	4812      	ldr	r0, [pc, #72]	; (10564 <bt_init+0x534>)
   1051c:	6899      	ldr	r1, [r3, #8]
   1051e:	2201      	movs	r2, #1
   10520:	4411      	add	r1, r2
   10522:	f011 fe61 	bl	221e8 <memcpy>
		net_buf_unref(rsp);
   10526:	9802      	ldr	r0, [sp, #8]
   10528:	f00b fe68 	bl	1c1fc <net_buf_unref>
   1052c:	e74a      	b.n	103c4 <bt_init+0x394>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1052e:	2104      	movs	r1, #4
   10530:	480d      	ldr	r0, [pc, #52]	; (10568 <bt_init+0x538>)
   10532:	f012 f804 	bl	2253e <atomic_or>
	bt_finalize_init();
   10536:	f005 fbab 	bl	15c90 <bt_finalize_init>
	return 0;
   1053a:	e5fe      	b.n	1013a <bt_init+0x10a>
   1053c:	000273b7 	.word	0x000273b7
   10540:	00025d48 	.word	0x00025d48
   10544:	00026e87 	.word	0x00026e87
   10548:	00025d08 	.word	0x00025d08
   1054c:	000273d0 	.word	0x000273d0
   10550:	000273e8 	.word	0x000273e8
   10554:	00025d80 	.word	0x00025d80
   10558:	00027415 	.word	0x00027415
   1055c:	20000325 	.word	0x20000325
   10560:	0002743e 	.word	0x0002743e
   10564:	20000324 	.word	0x20000324
   10568:	20000338 	.word	0x20000338

0001056c <hrmc_ccc_cfg_changed>:
   1056c:	4b07      	ldr	r3, [pc, #28]	; (1058c <hrmc_ccc_cfg_changed+0x20>)
   1056e:	4a08      	ldr	r2, [pc, #32]	; (10590 <hrmc_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   10570:	4808      	ldr	r0, [pc, #32]	; (10594 <hrmc_ccc_cfg_changed+0x28>)
   10572:	1ad2      	subs	r2, r2, r3
   10574:	08d2      	lsrs	r2, r2, #3
   10576:	4b08      	ldr	r3, [pc, #32]	; (10598 <hrmc_ccc_cfg_changed+0x2c>)
   10578:	0192      	lsls	r2, r2, #6
   1057a:	2901      	cmp	r1, #1
   1057c:	bf14      	ite	ne
   1057e:	4601      	movne	r1, r0
   10580:	4619      	moveq	r1, r3
   10582:	f042 0203 	orr.w	r2, r2, #3
   10586:	4805      	ldr	r0, [pc, #20]	; (1059c <hrmc_ccc_cfg_changed+0x30>)
   10588:	f00f bdcd 	b.w	20126 <log_1>
   1058c:	000256c4 	.word	0x000256c4
   10590:	0002576c 	.word	0x0002576c
   10594:	000260f4 	.word	0x000260f4
   10598:	000260ec 	.word	0x000260ec
   1059c:	000260fd 	.word	0x000260fd

000105a0 <passkey_display>:
   105a0:	4a04      	ldr	r2, [pc, #16]	; (105b4 <passkey_display+0x14>)
   105a2:	4b05      	ldr	r3, [pc, #20]	; (105b8 <passkey_display+0x18>)
	bt_conn_auth_passkey_entry(conn, 123456);
}

void passkey_display(struct bt_conn *conn, unsigned int passkey)
{
	LOG_INF("Controller passkey = %d", passkey);
   105a4:	4805      	ldr	r0, [pc, #20]	; (105bc <passkey_display+0x1c>)
   105a6:	1ad2      	subs	r2, r2, r3
   105a8:	08d2      	lsrs	r2, r2, #3
   105aa:	0192      	lsls	r2, r2, #6
   105ac:	f042 0203 	orr.w	r2, r2, #3
   105b0:	f00f bdb9 	b.w	20126 <log_1>
   105b4:	0002577c 	.word	0x0002577c
   105b8:	000256c4 	.word	0x000256c4
   105bc:	00026116 	.word	0x00026116

000105c0 <on_disconnected>:
{
   105c0:	b508      	push	{r3, lr}
   105c2:	4a07      	ldr	r2, [pc, #28]	; (105e0 <on_disconnected+0x20>)
   105c4:	4b07      	ldr	r3, [pc, #28]	; (105e4 <on_disconnected+0x24>)
	LOG_INF("BT Disconnected (reason %u)\n", reason);
   105c6:	4808      	ldr	r0, [pc, #32]	; (105e8 <on_disconnected+0x28>)
   105c8:	1ad2      	subs	r2, r2, r3
   105ca:	08d2      	lsrs	r2, r2, #3
   105cc:	0192      	lsls	r2, r2, #6
   105ce:	f042 0203 	orr.w	r2, r2, #3
   105d2:	f00f fda8 	bl	20126 <log_1>
	bt_dclk_info.num_conn--;
   105d6:	4a05      	ldr	r2, [pc, #20]	; (105ec <on_disconnected+0x2c>)
   105d8:	7853      	ldrb	r3, [r2, #1]
   105da:	3b01      	subs	r3, #1
   105dc:	7053      	strb	r3, [r2, #1]
}
   105de:	bd08      	pop	{r3, pc}
   105e0:	0002577c 	.word	0x0002577c
   105e4:	000256c4 	.word	0x000256c4
   105e8:	0002612e 	.word	0x0002612e
   105ec:	20002d28 	.word	0x20002d28

000105f0 <bt_pairing_start>:
	.pairing_confirm = auth_pairing,
	//.pairing_complete = pairing_complete,
};

static void bt_pairing_start()
{
   105f0:	b570      	push	{r4, r5, r6, lr}
   105f2:	4b1d      	ldr	r3, [pc, #116]	; (10668 <bt_pairing_start+0x78>)
   105f4:	4c1d      	ldr	r4, [pc, #116]	; (1066c <bt_pairing_start+0x7c>)
	LOG_INF("Pairing start--");
   105f6:	481e      	ldr	r0, [pc, #120]	; (10670 <bt_pairing_start+0x80>)
   105f8:	1ae4      	subs	r4, r4, r3
   105fa:	08e4      	lsrs	r4, r4, #3
   105fc:	01a4      	lsls	r4, r4, #6
   105fe:	f044 0503 	orr.w	r5, r4, #3
{
   10602:	b08a      	sub	sp, #40	; 0x28
	LOG_INF("Pairing start--");
   10604:	4629      	mov	r1, r5
   10606:	f00f fd81 	bl	2010c <log_0>
	int err = 0;

	bt_le_adv_stop();
   1060a:	f006 fba5 	bl	16d58 <bt_le_adv_stop>

	err = bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1060e:	2000      	movs	r0, #0
   10610:	a903      	add	r1, sp, #12
   10612:	9003      	str	r0, [sp, #12]
   10614:	f8cd 000f 	str.w	r0, [sp, #15]
   10618:	f005 fa72 	bl	15b00 <bt_unpair>
	if (err)
   1061c:	4601      	mov	r1, r0
   1061e:	b1f0      	cbz	r0, 1065e <bt_pairing_start+0x6e>
	{
		LOG_INF("Cannot delete bond (err: %d)\n", err);
   10620:	4814      	ldr	r0, [pc, #80]	; (10674 <bt_pairing_start+0x84>)
   10622:	462a      	mov	r2, r5
   10624:	f00f fd7f 	bl	20126 <log_1>
	}

	LOG_INF("Advertising with no Accept list \n");
	// One shot advertizing due to bt_adv_param settings
	// stops upon connection
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   10628:	4e13      	ldr	r6, [pc, #76]	; (10678 <bt_pairing_start+0x88>)
	LOG_INF("Advertising with no Accept list \n");
   1062a:	4814      	ldr	r0, [pc, #80]	; (1067c <bt_pairing_start+0x8c>)
   1062c:	f044 0403 	orr.w	r4, r4, #3
   10630:	4621      	mov	r1, r4
   10632:	f00f fd6b 	bl	2010c <log_0>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   10636:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10638:	ad05      	add	r5, sp, #20
   1063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1063c:	6833      	ldr	r3, [r6, #0]
   1063e:	602b      	str	r3, [r5, #0]
   10640:	2300      	movs	r3, #0
   10642:	490f      	ldr	r1, [pc, #60]	; (10680 <bt_pairing_start+0x90>)
   10644:	9300      	str	r3, [sp, #0]
   10646:	2202      	movs	r2, #2
   10648:	a805      	add	r0, sp, #20
   1064a:	f006 fb77 	bl	16d3c <bt_le_adv_start>

	if (err)
   1064e:	4601      	mov	r1, r0
   10650:	b118      	cbz	r0, 1065a <bt_pairing_start+0x6a>
	{
		LOG_INF("Advertising failed to start (err %d)\n", err);
   10652:	480c      	ldr	r0, [pc, #48]	; (10684 <bt_pairing_start+0x94>)
   10654:	4622      	mov	r2, r4
   10656:	f00f fd66 	bl	20126 <log_1>
		return;
	}
}
   1065a:	b00a      	add	sp, #40	; 0x28
   1065c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Bond deleted succesfully \n");
   1065e:	480a      	ldr	r0, [pc, #40]	; (10688 <bt_pairing_start+0x98>)
   10660:	4629      	mov	r1, r5
   10662:	f00f fd53 	bl	2010c <log_0>
   10666:	e7df      	b.n	10628 <bt_pairing_start+0x38>
   10668:	000256c4 	.word	0x000256c4
   1066c:	0002577c 	.word	0x0002577c
   10670:	0002614b 	.word	0x0002614b
   10674:	0002615b 	.word	0x0002615b
   10678:	00025820 	.word	0x00025820
   1067c:	00026194 	.word	0x00026194
   10680:	00025948 	.word	0x00025948
   10684:	000261b6 	.word	0x000261b6
   10688:	00026179 	.word	0x00026179

0001068c <on_le_param_updated>:
{
   1068c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1068e:	4616      	mov	r6, r2
   10690:	4c0e      	ldr	r4, [pc, #56]	; (106cc <on_le_param_updated+0x40>)
   10692:	4a0f      	ldr	r2, [pc, #60]	; (106d0 <on_le_param_updated+0x44>)
    uint16_t supervision_timeout = timeout*10;          // in ms
   10694:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    double connection_interval = interval*1.25;         // in ms
   10698:	4608      	mov	r0, r1
   1069a:	1aa4      	subs	r4, r4, r2
    uint16_t supervision_timeout = timeout*10;          // in ms
   1069c:	005d      	lsls	r5, r3, #1
    double connection_interval = interval*1.25;         // in ms
   1069e:	f7ef fe71 	bl	384 <__aeabi_i2d>
   106a2:	4b0c      	ldr	r3, [pc, #48]	; (106d4 <on_le_param_updated+0x48>)
   106a4:	2200      	movs	r2, #0
   106a6:	f7ef fed7 	bl	458 <__aeabi_dmul>
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   106aa:	f7f0 f8e7 	bl	87c <__aeabi_d2uiz>
   106ae:	08e4      	lsrs	r4, r4, #3
   106b0:	01a4      	lsls	r4, r4, #6
   106b2:	f044 0403 	orr.w	r4, r4, #3
   106b6:	b2ad      	uxth	r5, r5
   106b8:	4601      	mov	r1, r0
   106ba:	f8ad 4000 	strh.w	r4, [sp]
   106be:	4806      	ldr	r0, [pc, #24]	; (106d8 <on_le_param_updated+0x4c>)
   106c0:	462b      	mov	r3, r5
   106c2:	4632      	mov	r2, r6
   106c4:	f00f fd5c 	bl	20180 <log_3>
}
   106c8:	b002      	add	sp, #8
   106ca:	bd70      	pop	{r4, r5, r6, pc}
   106cc:	0002577c 	.word	0x0002577c
   106d0:	000256c4 	.word	0x000256c4
   106d4:	3ff40000 	.word	0x3ff40000
   106d8:	000261dc 	.word	0x000261dc

000106dc <passkey_confirm>:
   106dc:	4b08      	ldr	r3, [pc, #32]	; (10700 <passkey_confirm+0x24>)
   106de:	4a09      	ldr	r2, [pc, #36]	; (10704 <passkey_confirm+0x28>)
{
   106e0:	b510      	push	{r4, lr}
   106e2:	1ad2      	subs	r2, r2, r3
   106e4:	08d2      	lsrs	r2, r2, #3
	LOG_INF("Confirm Passkey = %d", passkey);
   106e6:	0192      	lsls	r2, r2, #6
{
   106e8:	4604      	mov	r4, r0
	LOG_INF("Confirm Passkey = %d", passkey);
   106ea:	f042 0203 	orr.w	r2, r2, #3
   106ee:	4806      	ldr	r0, [pc, #24]	; (10708 <passkey_confirm+0x2c>)
   106f0:	f00f fd19 	bl	20126 <log_1>
	bt_conn_auth_passkey_confirm(conn);
   106f4:	4620      	mov	r0, r4
}
   106f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_auth_passkey_confirm(conn);
   106fa:	f007 baab 	b.w	17c54 <bt_conn_auth_passkey_confirm>
   106fe:	bf00      	nop
   10700:	000256c4 	.word	0x000256c4
   10704:	0002577c 	.word	0x0002577c
   10708:	00026231 	.word	0x00026231

0001070c <passkey_entry>:
{
   1070c:	b538      	push	{r3, r4, r5, lr}
   1070e:	4a09      	ldr	r2, [pc, #36]	; (10734 <passkey_entry+0x28>)
   10710:	4b09      	ldr	r3, [pc, #36]	; (10738 <passkey_entry+0x2c>)
	LOG_INF("Sending entry passkey = %d", 123456);
   10712:	4d0a      	ldr	r5, [pc, #40]	; (1073c <passkey_entry+0x30>)
   10714:	1ad2      	subs	r2, r2, r3
   10716:	08d2      	lsrs	r2, r2, #3
   10718:	0192      	lsls	r2, r2, #6
{
   1071a:	4604      	mov	r4, r0
	LOG_INF("Sending entry passkey = %d", 123456);
   1071c:	4629      	mov	r1, r5
   1071e:	4808      	ldr	r0, [pc, #32]	; (10740 <passkey_entry+0x34>)
   10720:	f042 0203 	orr.w	r2, r2, #3
   10724:	f00f fcff 	bl	20126 <log_1>
	bt_conn_auth_passkey_entry(conn, 123456);
   10728:	4629      	mov	r1, r5
   1072a:	4620      	mov	r0, r4
}
   1072c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_auth_passkey_entry(conn, 123456);
   10730:	f007 ba80 	b.w	17c34 <bt_conn_auth_passkey_entry>
   10734:	0002577c 	.word	0x0002577c
   10738:	000256c4 	.word	0x000256c4
   1073c:	0001e240 	.word	0x0001e240
   10740:	00026246 	.word	0x00026246

00010744 <on_security_changed>:
	if (!err)
   10744:	4906      	ldr	r1, [pc, #24]	; (10760 <on_security_changed+0x1c>)
   10746:	4b07      	ldr	r3, [pc, #28]	; (10764 <on_security_changed+0x20>)
   10748:	1ac9      	subs	r1, r1, r3
   1074a:	08c9      	lsrs	r1, r1, #3
   1074c:	0189      	lsls	r1, r1, #6
		LOG_INF("Security changed");
   1074e:	f041 0103 	orr.w	r1, r1, #3
	if (!err)
   10752:	b912      	cbnz	r2, 1075a <on_security_changed+0x16>
		LOG_INF("Security changed");
   10754:	4804      	ldr	r0, [pc, #16]	; (10768 <on_security_changed+0x24>)
		LOG_INF("Security failed");
   10756:	f00f bcd9 	b.w	2010c <log_0>
   1075a:	4804      	ldr	r0, [pc, #16]	; (1076c <on_security_changed+0x28>)
   1075c:	e7fb      	b.n	10756 <on_security_changed+0x12>
   1075e:	bf00      	nop
   10760:	0002577c 	.word	0x0002577c
   10764:	000256c4 	.word	0x000256c4
   10768:	00026261 	.word	0x00026261
   1076c:	00026272 	.word	0x00026272

00010770 <on_connected>:
{
   10770:	b508      	push	{r3, lr}
   10772:	4a0b      	ldr	r2, [pc, #44]	; (107a0 <on_connected+0x30>)
   10774:	4b0b      	ldr	r3, [pc, #44]	; (107a4 <on_connected+0x34>)
   10776:	1ad2      	subs	r2, r2, r3
   10778:	08d2      	lsrs	r2, r2, #3
   1077a:	0192      	lsls	r2, r2, #6
	if (err)
   1077c:	b131      	cbz	r1, 1078c <on_connected+0x1c>
}
   1077e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_INF("Connection failed (err %u)\n", err);
   10782:	4809      	ldr	r0, [pc, #36]	; (107a8 <on_connected+0x38>)
   10784:	f042 0203 	orr.w	r2, r2, #3
   10788:	f00f bccd 	b.w	20126 <log_1>
	LOG_INF("BT Connected\n");
   1078c:	f042 0103 	orr.w	r1, r2, #3
   10790:	4806      	ldr	r0, [pc, #24]	; (107ac <on_connected+0x3c>)
   10792:	f00f fcbb 	bl	2010c <log_0>
	bt_dclk_info.num_conn++;
   10796:	4a06      	ldr	r2, [pc, #24]	; (107b0 <on_connected+0x40>)
   10798:	7853      	ldrb	r3, [r2, #1]
   1079a:	3301      	adds	r3, #1
   1079c:	7053      	strb	r3, [r2, #1]
}
   1079e:	bd08      	pop	{r3, pc}
   107a0:	0002577c 	.word	0x0002577c
   107a4:	000256c4 	.word	0x000256c4
   107a8:	00026282 	.word	0x00026282
   107ac:	0002629e 	.word	0x0002629e
   107b0:	20002d28 	.word	0x20002d28

000107b4 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   107b4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   107b6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   107b8:	b08a      	sub	sp, #40	; 0x28
   107ba:	4604      	mov	r4, r0
   107bc:	460e      	mov	r6, r1
   107be:	ad07      	add	r5, sp, #28
   107c0:	2b03      	cmp	r3, #3
   107c2:	d820      	bhi.n	10806 <bt_addr_le_to_str.constprop.0+0x52>
   107c4:	e8df f003 	tbb	[pc, r3]
   107c8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   107cc:	4911      	ldr	r1, [pc, #68]	; (10814 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   107ce:	4628      	mov	r0, r5
   107d0:	f011 fcb2 	bl	22138 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   107d4:	7863      	ldrb	r3, [r4, #1]
   107d6:	9304      	str	r3, [sp, #16]
   107d8:	78a3      	ldrb	r3, [r4, #2]
   107da:	9303      	str	r3, [sp, #12]
   107dc:	78e3      	ldrb	r3, [r4, #3]
   107de:	9302      	str	r3, [sp, #8]
   107e0:	7923      	ldrb	r3, [r4, #4]
   107e2:	9301      	str	r3, [sp, #4]
   107e4:	7963      	ldrb	r3, [r4, #5]
   107e6:	9300      	str	r3, [sp, #0]
   107e8:	4a0b      	ldr	r2, [pc, #44]	; (10818 <bt_addr_le_to_str.constprop.0+0x64>)
   107ea:	79a3      	ldrb	r3, [r4, #6]
   107ec:	9505      	str	r5, [sp, #20]
   107ee:	211e      	movs	r1, #30
   107f0:	4630      	mov	r0, r6
   107f2:	f00f f853 	bl	1f89c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   107f6:	b00a      	add	sp, #40	; 0x28
   107f8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   107fa:	4908      	ldr	r1, [pc, #32]	; (1081c <bt_addr_le_to_str.constprop.0+0x68>)
   107fc:	e7e7      	b.n	107ce <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   107fe:	4908      	ldr	r1, [pc, #32]	; (10820 <bt_addr_le_to_str.constprop.0+0x6c>)
   10800:	e7e5      	b.n	107ce <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   10802:	4908      	ldr	r1, [pc, #32]	; (10824 <bt_addr_le_to_str.constprop.0+0x70>)
   10804:	e7e3      	b.n	107ce <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10806:	4a08      	ldr	r2, [pc, #32]	; (10828 <bt_addr_le_to_str.constprop.0+0x74>)
   10808:	210a      	movs	r1, #10
   1080a:	4628      	mov	r0, r5
   1080c:	f00f f846 	bl	1f89c <snprintk>
		break;
   10810:	e7e0      	b.n	107d4 <bt_addr_le_to_str.constprop.0+0x20>
   10812:	bf00      	nop
   10814:	000262ac 	.word	0x000262ac
   10818:	000262ce 	.word	0x000262ce
   1081c:	000262b3 	.word	0x000262b3
   10820:	000262ba 	.word	0x000262ba
   10824:	000262c4 	.word	0x000262c4
   10828:	00028227 	.word	0x00028227

0001082c <auth_cancel>:
{
   1082c:	b500      	push	{lr}
   1082e:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10830:	f012 f9ec 	bl	22c0c <bt_conn_get_dst>
   10834:	4669      	mov	r1, sp
   10836:	f7ff ffbd 	bl	107b4 <bt_addr_le_to_str.constprop.0>
   1083a:	4b07      	ldr	r3, [pc, #28]	; (10858 <auth_cancel+0x2c>)
   1083c:	4a07      	ldr	r2, [pc, #28]	; (1085c <auth_cancel+0x30>)
	LOG_INF("Pairing cancelled: %s\n", addr);
   1083e:	4808      	ldr	r0, [pc, #32]	; (10860 <auth_cancel+0x34>)
   10840:	1ad2      	subs	r2, r2, r3
   10842:	08d2      	lsrs	r2, r2, #3
   10844:	0192      	lsls	r2, r2, #6
   10846:	f042 0203 	orr.w	r2, r2, #3
   1084a:	4669      	mov	r1, sp
   1084c:	f00f fc6b 	bl	20126 <log_1>
}
   10850:	b009      	add	sp, #36	; 0x24
   10852:	f85d fb04 	ldr.w	pc, [sp], #4
   10856:	bf00      	nop
   10858:	000256c4 	.word	0x000256c4
   1085c:	0002577c 	.word	0x0002577c
   10860:	000262f1 	.word	0x000262f1

00010864 <auth_pairing>:
{
   10864:	b510      	push	{r4, lr}
   10866:	b088      	sub	sp, #32
   10868:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1086a:	f012 f9cf 	bl	22c0c <bt_conn_get_dst>
   1086e:	4669      	mov	r1, sp
   10870:	f7ff ffa0 	bl	107b4 <bt_addr_le_to_str.constprop.0>
	int err = bt_conn_auth_pairing_confirm(conn);
   10874:	4620      	mov	r0, r4
   10876:	f007 f9fb 	bl	17c70 <bt_conn_auth_pairing_confirm>
   1087a:	4a07      	ldr	r2, [pc, #28]	; (10898 <auth_pairing+0x34>)
   1087c:	4b07      	ldr	r3, [pc, #28]	; (1089c <auth_pairing+0x38>)
   1087e:	1a9b      	subs	r3, r3, r2
   10880:	08db      	lsrs	r3, r3, #3
	LOG_INF("Pairing Authorized %d: %s\n", err, addr);
   10882:	019b      	lsls	r3, r3, #6
	int err = bt_conn_auth_pairing_confirm(conn);
   10884:	4601      	mov	r1, r0
	LOG_INF("Pairing Authorized %d: %s\n", err, addr);
   10886:	f043 0303 	orr.w	r3, r3, #3
   1088a:	4805      	ldr	r0, [pc, #20]	; (108a0 <auth_pairing+0x3c>)
   1088c:	466a      	mov	r2, sp
   1088e:	f00f fc5e 	bl	2014e <log_2>
}
   10892:	b008      	add	sp, #32
   10894:	bd10      	pop	{r4, pc}
   10896:	bf00      	nop
   10898:	000256c4 	.word	0x000256c4
   1089c:	0002577c 	.word	0x0002577c
   108a0:	00026308 	.word	0x00026308

000108a4 <interface_init>:
const uint16_t UPDATE_PERIOD = 1000;


const struct device *dev;
void interface_init()
{
   108a4:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   108a6:	4810      	ldr	r0, [pc, #64]	; (108e8 <interface_init+0x44>)
	int ret;

	dev = device_get_binding(LED0);
   108a8:	4c10      	ldr	r4, [pc, #64]	; (108ec <interface_init+0x48>)
   108aa:	f00d fb57 	bl	1df5c <z_impl_device_get_binding>
   108ae:	6020      	str	r0, [r4, #0]
	if (dev == NULL)
   108b0:	b1c8      	cbz	r0, 108e6 <interface_init+0x42>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   108b2:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   108b4:	6881      	ldr	r1, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   108b6:	6813      	ldr	r3, [r2, #0]
   108b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   108bc:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   108be:	680b      	ldr	r3, [r1, #0]
   108c0:	f240 6201 	movw	r2, #1537	; 0x601
   108c4:	211f      	movs	r1, #31
   108c6:	4798      	blx	r3
	{
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0)
   108c8:	2800      	cmp	r0, #0
   108ca:	db0c      	blt.n	108e6 <interface_init+0x42>
	{
		return;
	}

	gpio_pin_set(dev, PIN, 1);
   108cc:	6820      	ldr	r0, [r4, #0]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   108ce:	6903      	ldr	r3, [r0, #16]
   108d0:	681b      	ldr	r3, [r3, #0]
   108d2:	2b00      	cmp	r3, #0
	return api->port_set_bits_raw(port, pins);
   108d4:	6883      	ldr	r3, [r0, #8]
}
   108d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   108da:	bfac      	ite	ge
   108dc:	68db      	ldrge	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   108de:	691b      	ldrlt	r3, [r3, #16]
   108e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   108e4:	4718      	bx	r3
   108e6:	bd10      	pop	{r4, pc}
   108e8:	00026323 	.word	0x00026323
   108ec:	20002d44 	.word	0x20002d44

000108f0 <main>:



void main(void)
{
   108f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   108f2:	4b2a      	ldr	r3, [pc, #168]	; (1099c <main+0xac>)
   108f4:	4c2a      	ldr	r4, [pc, #168]	; (109a0 <main+0xb0>)


	int err;
	LOG_INF("Hello! I'm a remote.");
   108f6:	482b      	ldr	r0, [pc, #172]	; (109a4 <main+0xb4>)
   108f8:	1ae4      	subs	r4, r4, r3
   108fa:	08e4      	lsrs	r4, r4, #3
   108fc:	01a4      	lsls	r4, r4, #6
   108fe:	f044 0403 	orr.w	r4, r4, #3
   10902:	4621      	mov	r1, r4
   10904:	f00f fc02 	bl	2010c <log_0>

	interface_init();	
   10908:	f7ff ffcc 	bl	108a4 <interface_init>

	err = bt_enable(NULL);
   1090c:	2000      	movs	r0, #0
   1090e:	f005 fa37 	bl	15d80 <bt_enable>
	if (err)
   10912:	4601      	mov	r1, r0
   10914:	b128      	cbz	r0, 10922 <main+0x32>
	{
		LOG_INF("Bluetooth init failed (err %d)\n", err);
   10916:	4824      	ldr	r0, [pc, #144]	; (109a8 <main+0xb8>)
   10918:	4622      	mov	r2, r4
   1091a:	f00f fc04 	bl	20126 <log_1>
		gpio_pin_set(dev, PIN, led_val);
		led_val ^= 1;
		// dclk_notify();
		// bas_notify();
	}
}
   1091e:	b002      	add	sp, #8
   10920:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_load();
   10922:	f010 f933 	bl	20b8c <settings_load>
		if (err)
   10926:	4605      	mov	r5, r0
   10928:	2800      	cmp	r0, #0
   1092a:	d1f8      	bne.n	1091e <main+0x2e>
		LOG_INF("Settings Loaded");
   1092c:	4621      	mov	r1, r4
   1092e:	481f      	ldr	r0, [pc, #124]	; (109ac <main+0xbc>)
		gpio_pin_set(dev, PIN, led_val);
   10930:	4e1f      	ldr	r6, [pc, #124]	; (109b0 <main+0xc0>)
		LOG_INF("Settings Loaded");
   10932:	f00f fbeb 	bl	2010c <log_0>
		bt_foreach_bond(BT_ID_DEFAULT, &bt_count_bonds, &bond_cnt);
   10936:	491f      	ldr	r1, [pc, #124]	; (109b4 <main+0xc4>)
		int bond_cnt = 0;
   10938:	9501      	str	r5, [sp, #4]
		bt_foreach_bond(BT_ID_DEFAULT, &bt_count_bonds, &bond_cnt);
   1093a:	aa01      	add	r2, sp, #4
   1093c:	4628      	mov	r0, r5
   1093e:	f00b fa17 	bl	1bd70 <bt_foreach_bond>
		bt_dclk_info.num_paired = bond_cnt;
   10942:	4b1d      	ldr	r3, [pc, #116]	; (109b8 <main+0xc8>)
   10944:	9901      	ldr	r1, [sp, #4]
		LOG_INF("Existing BT Bonds = %d", bond_cnt);
   10946:	481d      	ldr	r0, [pc, #116]	; (109bc <main+0xcc>)
		bt_dclk_info.num_paired = bond_cnt;
   10948:	7019      	strb	r1, [r3, #0]
		LOG_INF("Existing BT Bonds = %d", bond_cnt);
   1094a:	4622      	mov	r2, r4
   1094c:	f00f fbeb 	bl	20126 <log_1>
	bt_conn_cb_register(&conn_callbacks);
   10950:	481b      	ldr	r0, [pc, #108]	; (109c0 <main+0xd0>)
   10952:	f006 fd39 	bl	173c8 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
   10956:	481b      	ldr	r0, [pc, #108]	; (109c4 <main+0xd4>)
   10958:	f007 f950 	bl	17bfc <bt_conn_auth_cb_register>
	bt_pairing_start();
   1095c:	f7ff fe48 	bl	105f0 <bt_pairing_start>
	LOG_INF("Starting DCLK notifications.");
   10960:	4621      	mov	r1, r4
   10962:	4819      	ldr	r0, [pc, #100]	; (109c8 <main+0xd8>)
   10964:	f00f fbd2 	bl	2010c <log_0>
	int led_val = 1;
   10968:	2401      	movs	r4, #1
	return z_impl_k_sleep(timeout);
   1096a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1096e:	2100      	movs	r1, #0
   10970:	f00e fb7e 	bl	1f070 <z_impl_k_sleep>
		gpio_pin_set(dev, PIN, led_val);
   10974:	6830      	ldr	r0, [r6, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   10976:	6903      	ldr	r3, [r0, #16]
   10978:	681b      	ldr	r3, [r3, #0]
   1097a:	f084 0501 	eor.w	r5, r4, #1
   1097e:	ea34 0423 	bics.w	r4, r4, r3, asr #32
   10982:	bf28      	it	cs
   10984:	462c      	movcs	r4, r5
	if (value != 0)	{
   10986:	b134      	cbz	r4, 10996 <main+0xa6>
	return api->port_set_bits_raw(port, pins);
   10988:	6883      	ldr	r3, [r0, #8]
   1098a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1098c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   10990:	4798      	blx	r3
		led_val ^= 1;
   10992:	462c      	mov	r4, r5
	while (1)
   10994:	e7e9      	b.n	1096a <main+0x7a>
   10996:	6883      	ldr	r3, [r0, #8]
   10998:	691b      	ldr	r3, [r3, #16]
   1099a:	e7f7      	b.n	1098c <main+0x9c>
   1099c:	000256c4 	.word	0x000256c4
   109a0:	0002577c 	.word	0x0002577c
   109a4:	0002632a 	.word	0x0002632a
   109a8:	0002633f 	.word	0x0002633f
   109ac:	0002635f 	.word	0x0002635f
   109b0:	20002d44 	.word	0x20002d44
   109b4:	0001f70d 	.word	0x0001f70d
   109b8:	20002d28 	.word	0x20002d28
   109bc:	0002636f 	.word	0x0002636f
   109c0:	2000048c 	.word	0x2000048c
   109c4:	20000468 	.word	0x20000468
   109c8:	00026386 	.word	0x00026386

000109cc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   109cc:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   109ce:	4c0a      	ldr	r4, [pc, #40]	; (109f8 <crc8_ccitt+0x2c>)
   109d0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   109d2:	4291      	cmp	r1, r2
   109d4:	d100      	bne.n	109d8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   109d6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   109d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   109dc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   109de:	0903      	lsrs	r3, r0, #4
   109e0:	5ce3      	ldrb	r3, [r4, r3]
   109e2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   109e6:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   109e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   109ec:	5ce0      	ldrb	r0, [r4, r3]
   109ee:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   109f2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   109f4:	e7ed      	b.n	109d2 <crc8_ccitt+0x6>
   109f6:	bf00      	nop
   109f8:	000263ac 	.word	0x000263ac

000109fc <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   109fc:	4b01      	ldr	r3, [pc, #4]	; (10a04 <__printk_hook_install+0x8>)
   109fe:	6018      	str	r0, [r3, #0]
}
   10a00:	4770      	bx	lr
   10a02:	bf00      	nop
   10a04:	200004a8 	.word	0x200004a8

00010a08 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10a08:	b530      	push	{r4, r5, lr}
   10a0a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   10a0c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   10a10:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10a12:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   10a14:	a901      	add	r1, sp, #4
   10a16:	4805      	ldr	r0, [pc, #20]	; (10a2c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   10a18:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   10a1a:	f000 f8ef 	bl	10bfc <cbvprintf>

	if (ctx.count < ctx.max) {
   10a1e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   10a22:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10a24:	bfb8      	it	lt
   10a26:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10a28:	b005      	add	sp, #20
   10a2a:	bd30      	pop	{r4, r5, pc}
   10a2c:	0001f85d 	.word	0x0001f85d

00010a30 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10a34:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10a38:	f019 0808 	ands.w	r8, r9, #8
{
   10a3c:	4604      	mov	r4, r0
   10a3e:	4693      	mov	fp, r2
	if (processing) {
   10a40:	d00d      	beq.n	10a5e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   10a42:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10a44:	bf0c      	ite	eq
   10a46:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10a4a:	f049 0920 	orrne.w	r9, r9, #32
   10a4e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10a52:	f38b 8811 	msr	BASEPRI, fp
   10a56:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10a5e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10a62:	2902      	cmp	r1, #2
   10a64:	d107      	bne.n	10a76 <process_event+0x46>
			evt = process_recheck(mgr);
   10a66:	4620      	mov	r0, r4
   10a68:	f00e ff25 	bl	1f8b6 <process_recheck>
		if (evt == EVT_NOP) {
   10a6c:	2800      	cmp	r0, #0
   10a6e:	d0f0      	beq.n	10a52 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   10a70:	2801      	cmp	r0, #1
   10a72:	8b23      	ldrh	r3, [r4, #24]
   10a74:	d150      	bne.n	10b18 <process_event+0xe8>
			res = mgr->last_res;
   10a76:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10a78:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   10a7a:	2f00      	cmp	r7, #0
   10a7c:	da15      	bge.n	10aaa <process_event+0x7a>
		*clients = mgr->clients;
   10a7e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10a80:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   10a84:	e9c4 8800 	strd	r8, r8, [r4]
   10a88:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10a8c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   10a8e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10a90:	8b21      	ldrh	r1, [r4, #24]
   10a92:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10a96:	45ca      	cmp	sl, r9
   10a98:	d002      	beq.n	10aa0 <process_event+0x70>
		if (do_monitors
   10a9a:	68a3      	ldr	r3, [r4, #8]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d15c      	bne.n	10b5a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   10aa0:	b90d      	cbnz	r5, 10aa6 <process_event+0x76>
		    || (transit != NULL)) {
   10aa2:	2e00      	cmp	r6, #0
   10aa4:	d074      	beq.n	10b90 <process_event+0x160>
   10aa6:	2300      	movs	r3, #0
   10aa8:	e058      	b.n	10b5c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10aaa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10aae:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10ab0:	2a01      	cmp	r2, #1
   10ab2:	d820      	bhi.n	10af6 <process_event+0xc6>
		*clients = mgr->clients;
   10ab4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   10ab8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   10aba:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   10abc:	b289      	uxth	r1, r1
	list->tail = NULL;
   10abe:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10ac2:	d10c      	bne.n	10ade <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10ac4:	2d00      	cmp	r5, #0
   10ac6:	462b      	mov	r3, r5
   10ac8:	bf38      	it	cc
   10aca:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10acc:	b12b      	cbz	r3, 10ada <process_event+0xaa>
				mgr->refs += 1U;
   10ace:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10ad0:	681b      	ldr	r3, [r3, #0]
   10ad2:	3201      	adds	r2, #1
   10ad4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	d1f8      	bne.n	10acc <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10ada:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   10ade:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10ae0:	4620      	mov	r0, r4
   10ae2:	f00e fee8 	bl	1f8b6 <process_recheck>
   10ae6:	4606      	mov	r6, r0
   10ae8:	2800      	cmp	r0, #0
   10aea:	d0d1      	beq.n	10a90 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10aec:	8b23      	ldrh	r3, [r4, #24]
   10aee:	f043 0320 	orr.w	r3, r3, #32
   10af2:	8323      	strh	r3, [r4, #24]
   10af4:	e7cb      	b.n	10a8e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10af6:	2b04      	cmp	r3, #4
   10af8:	d10c      	bne.n	10b14 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10afa:	f021 0107 	bic.w	r1, r1, #7
   10afe:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10b00:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10b02:	4620      	mov	r0, r4
   10b04:	f00e fed7 	bl	1f8b6 <process_recheck>
   10b08:	4605      	mov	r5, r0
   10b0a:	2800      	cmp	r0, #0
   10b0c:	d0bf      	beq.n	10a8e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10b0e:	f041 0120 	orr.w	r1, r1, #32
   10b12:	8321      	strh	r1, [r4, #24]
   10b14:	2500      	movs	r5, #0
   10b16:	e7ba      	b.n	10a8e <process_event+0x5e>
		} else if (evt == EVT_START) {
   10b18:	2803      	cmp	r0, #3
   10b1a:	d109      	bne.n	10b30 <process_event+0x100>
			transit = mgr->transitions->start;
   10b1c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b1e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   10b22:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b24:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   10b28:	8323      	strh	r3, [r4, #24]
}
   10b2a:	2500      	movs	r5, #0
		res = 0;
   10b2c:	462f      	mov	r7, r5
   10b2e:	e7af      	b.n	10a90 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   10b30:	2804      	cmp	r0, #4
   10b32:	d106      	bne.n	10b42 <process_event+0x112>
			transit = mgr->transitions->stop;
   10b34:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b36:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   10b3a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b3c:	f043 0304 	orr.w	r3, r3, #4
   10b40:	e7f2      	b.n	10b28 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   10b42:	2805      	cmp	r0, #5
   10b44:	d106      	bne.n	10b54 <process_event+0x124>
			transit = mgr->transitions->reset;
   10b46:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b48:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   10b4c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b4e:	f043 0305 	orr.w	r3, r3, #5
   10b52:	e7e9      	b.n	10b28 <process_event+0xf8>
   10b54:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10b56:	462e      	mov	r6, r5
   10b58:	e7e8      	b.n	10b2c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   10b5a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10b5c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10b60:	8321      	strh	r1, [r4, #24]
   10b62:	f38b 8811 	msr	BASEPRI, fp
   10b66:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10b6a:	bb03      	cbnz	r3, 10bae <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   10b6c:	2d00      	cmp	r5, #0
   10b6e:	d133      	bne.n	10bd8 <process_event+0x1a8>
			if (transit != NULL) {
   10b70:	b116      	cbz	r6, 10b78 <process_event+0x148>
				transit(mgr, transition_complete);
   10b72:	4921      	ldr	r1, [pc, #132]	; (10bf8 <process_event+0x1c8>)
   10b74:	4620      	mov	r0, r4
   10b76:	47b0      	blx	r6
	__asm__ volatile(
   10b78:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b7c:	f3ef 8b11 	mrs	fp, BASEPRI
   10b80:	f383 8811 	msr	BASEPRI, r3
   10b84:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10b88:	8b23      	ldrh	r3, [r4, #24]
   10b8a:	f023 0308 	bic.w	r3, r3, #8
   10b8e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10b90:	8b23      	ldrh	r3, [r4, #24]
   10b92:	06da      	lsls	r2, r3, #27
   10b94:	d528      	bpl.n	10be8 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10b96:	f023 0310 	bic.w	r3, r3, #16
   10b9a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10b9c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10b9e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   10ba2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10ba6:	2900      	cmp	r1, #0
   10ba8:	f47f af5b 	bne.w	10a62 <process_event+0x32>
out:
   10bac:	e751      	b.n	10a52 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10bae:	68a1      	ldr	r1, [r4, #8]
   10bb0:	2900      	cmp	r1, #0
   10bb2:	d0db      	beq.n	10b6c <process_event+0x13c>
	return node->next;
   10bb4:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   10bb6:	f8d1 b004 	ldr.w	fp, [r1, #4]
   10bba:	2b00      	cmp	r3, #0
   10bbc:	bf38      	it	cc
   10bbe:	2300      	movcc	r3, #0
   10bc0:	4699      	mov	r9, r3
   10bc2:	4652      	mov	r2, sl
   10bc4:	463b      	mov	r3, r7
   10bc6:	4620      	mov	r0, r4
   10bc8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10bca:	f1b9 0f00 	cmp.w	r9, #0
   10bce:	d0cd      	beq.n	10b6c <process_event+0x13c>
   10bd0:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10bd4:	4649      	mov	r1, r9
   10bd6:	e7ee      	b.n	10bb6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10bd8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10bda:	463b      	mov	r3, r7
   10bdc:	4652      	mov	r2, sl
   10bde:	4620      	mov	r0, r4
   10be0:	682d      	ldr	r5, [r5, #0]
   10be2:	f00e fe84 	bl	1f8ee <notify_one>
   10be6:	e7c1      	b.n	10b6c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10be8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10bec:	bf1e      	ittt	ne
   10bee:	f023 0320 	bicne.w	r3, r3, #32
   10bf2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   10bf4:	2102      	movne	r1, #2
   10bf6:	e7d2      	b.n	10b9e <process_event+0x16e>
   10bf8:	0001f91b 	.word	0x0001f91b

00010bfc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c00:	b091      	sub	sp, #68	; 0x44
   10c02:	468b      	mov	fp, r1
   10c04:	9002      	str	r0, [sp, #8]
   10c06:	4692      	mov	sl, r2
   10c08:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10c0a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10c0c:	f89a 0000 	ldrb.w	r0, [sl]
   10c10:	b908      	cbnz	r0, 10c16 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10c12:	4628      	mov	r0, r5
   10c14:	e35e      	b.n	112d4 <cbvprintf+0x6d8>
		if (*fp != '%') {
   10c16:	2825      	cmp	r0, #37	; 0x25
   10c18:	f10a 0701 	add.w	r7, sl, #1
   10c1c:	d007      	beq.n	10c2e <cbvprintf+0x32>
			OUTC('%');
   10c1e:	9b02      	ldr	r3, [sp, #8]
   10c20:	4659      	mov	r1, fp
   10c22:	4798      	blx	r3
   10c24:	2800      	cmp	r0, #0
   10c26:	f2c0 8355 	blt.w	112d4 <cbvprintf+0x6d8>
   10c2a:	3501      	adds	r5, #1
			break;
   10c2c:	e210      	b.n	11050 <cbvprintf+0x454>
		} state = {
   10c2e:	2218      	movs	r2, #24
   10c30:	2100      	movs	r1, #0
   10c32:	a80a      	add	r0, sp, #40	; 0x28
   10c34:	f011 fb03 	bl	2223e <memset>
	if (*sp == '%') {
   10c38:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10c3c:	2b25      	cmp	r3, #37	; 0x25
   10c3e:	d078      	beq.n	10d32 <cbvprintf+0x136>
   10c40:	2200      	movs	r2, #0
   10c42:	4694      	mov	ip, r2
   10c44:	4616      	mov	r6, r2
   10c46:	4696      	mov	lr, r2
   10c48:	4610      	mov	r0, r2
   10c4a:	4639      	mov	r1, r7
		switch (*sp) {
   10c4c:	f817 3b01 	ldrb.w	r3, [r7], #1
   10c50:	2b2b      	cmp	r3, #43	; 0x2b
   10c52:	f000 809d 	beq.w	10d90 <cbvprintf+0x194>
   10c56:	f200 8094 	bhi.w	10d82 <cbvprintf+0x186>
   10c5a:	2b20      	cmp	r3, #32
   10c5c:	f000 809b 	beq.w	10d96 <cbvprintf+0x19a>
   10c60:	2b23      	cmp	r3, #35	; 0x23
   10c62:	f000 809a 	beq.w	10d9a <cbvprintf+0x19e>
   10c66:	b128      	cbz	r0, 10c74 <cbvprintf+0x78>
   10c68:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10c6c:	f040 0004 	orr.w	r0, r0, #4
   10c70:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10c74:	f1be 0f00 	cmp.w	lr, #0
   10c78:	d005      	beq.n	10c86 <cbvprintf+0x8a>
   10c7a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10c7e:	f040 0008 	orr.w	r0, r0, #8
   10c82:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10c86:	b12e      	cbz	r6, 10c94 <cbvprintf+0x98>
   10c88:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10c8c:	f040 0010 	orr.w	r0, r0, #16
   10c90:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10c94:	f1bc 0f00 	cmp.w	ip, #0
   10c98:	d005      	beq.n	10ca6 <cbvprintf+0xaa>
   10c9a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10c9e:	f040 0020 	orr.w	r0, r0, #32
   10ca2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10ca6:	b12a      	cbz	r2, 10cb4 <cbvprintf+0xb8>
   10ca8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10cb0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   10cb4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10cb8:	f002 0044 	and.w	r0, r2, #68	; 0x44
   10cbc:	2844      	cmp	r0, #68	; 0x44
   10cbe:	d103      	bne.n	10cc8 <cbvprintf+0xcc>
		conv->flag_zero = false;
   10cc0:	f36f 1286 	bfc	r2, #6, #1
   10cc4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   10cc8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   10ccc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   10cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10cd2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   10cd6:	d17b      	bne.n	10dd0 <cbvprintf+0x1d4>
		conv->width_star = true;
   10cd8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10cdc:	f042 0201 	orr.w	r2, r2, #1
   10ce0:	1c4b      	adds	r3, r1, #1
   10ce2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   10ce6:	781a      	ldrb	r2, [r3, #0]
   10ce8:	2a2e      	cmp	r2, #46	; 0x2e
   10cea:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10cee:	bf0c      	ite	eq
   10cf0:	2101      	moveq	r1, #1
   10cf2:	2100      	movne	r1, #0
   10cf4:	f361 0241 	bfi	r2, r1, #1, #1
   10cf8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   10cfc:	d174      	bne.n	10de8 <cbvprintf+0x1ec>
	if (*sp == '*') {
   10cfe:	785a      	ldrb	r2, [r3, #1]
   10d00:	2a2a      	cmp	r2, #42	; 0x2a
   10d02:	d06a      	beq.n	10dda <cbvprintf+0x1de>
   10d04:	3301      	adds	r3, #1
	size_t val = 0;
   10d06:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   10d08:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10d0a:	4618      	mov	r0, r3
   10d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10d10:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10d14:	2f09      	cmp	r7, #9
   10d16:	f240 808e 	bls.w	10e36 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   10d1a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   10d1e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   10d20:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10d24:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   10d28:	f361 0241 	bfi	r2, r1, #1, #1
   10d2c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10d30:	e05a      	b.n	10de8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   10d32:	f10a 0702 	add.w	r7, sl, #2
   10d36:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   10d3a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10d3e:	07d9      	lsls	r1, r3, #31
   10d40:	f140 8149 	bpl.w	10fd6 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   10d44:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   10d48:	f1b9 0f00 	cmp.w	r9, #0
   10d4c:	da07      	bge.n	10d5e <cbvprintf+0x162>
				conv->flag_dash = true;
   10d4e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10d52:	f042 0204 	orr.w	r2, r2, #4
   10d56:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   10d5a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   10d5e:	075a      	lsls	r2, r3, #29
   10d60:	f140 8142 	bpl.w	10fe8 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   10d64:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   10d68:	f1b8 0f00 	cmp.w	r8, #0
   10d6c:	f280 8141 	bge.w	10ff2 <cbvprintf+0x3f6>
				conv->prec_present = false;
   10d70:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10d74:	f36f 0341 	bfc	r3, #1, #1
   10d78:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   10d7c:	f04f 38ff 	mov.w	r8, #4294967295
   10d80:	e137      	b.n	10ff2 <cbvprintf+0x3f6>
		switch (*sp) {
   10d82:	2b2d      	cmp	r3, #45	; 0x2d
   10d84:	d00c      	beq.n	10da0 <cbvprintf+0x1a4>
   10d86:	2b30      	cmp	r3, #48	; 0x30
   10d88:	f47f af6d 	bne.w	10c66 <cbvprintf+0x6a>
			conv->flag_zero = true;
   10d8c:	2201      	movs	r2, #1
	} while (loop);
   10d8e:	e75c      	b.n	10c4a <cbvprintf+0x4e>
			conv->flag_plus = true;
   10d90:	f04f 0e01 	mov.w	lr, #1
   10d94:	e759      	b.n	10c4a <cbvprintf+0x4e>
			conv->flag_space = true;
   10d96:	2601      	movs	r6, #1
   10d98:	e757      	b.n	10c4a <cbvprintf+0x4e>
			conv->flag_hash = true;
   10d9a:	f04f 0c01 	mov.w	ip, #1
   10d9e:	e754      	b.n	10c4a <cbvprintf+0x4e>
		switch (*sp) {
   10da0:	2001      	movs	r0, #1
   10da2:	e752      	b.n	10c4a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   10da4:	fb0c 0202 	mla	r2, ip, r2, r0
   10da8:	3a30      	subs	r2, #48	; 0x30
   10daa:	4633      	mov	r3, r6
   10dac:	461e      	mov	r6, r3
   10dae:	f816 0b01 	ldrb.w	r0, [r6], #1
   10db2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10db6:	2f09      	cmp	r7, #9
   10db8:	d9f4      	bls.n	10da4 <cbvprintf+0x1a8>
	if (sp != wp) {
   10dba:	4299      	cmp	r1, r3
   10dbc:	d093      	beq.n	10ce6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   10dbe:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   10dc2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   10dc4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   10dc6:	f362 0141 	bfi	r1, r2, #1, #1
   10dca:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   10dce:	e78a      	b.n	10ce6 <cbvprintf+0xea>
   10dd0:	460b      	mov	r3, r1
	size_t val = 0;
   10dd2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10dd4:	f04f 0c0a 	mov.w	ip, #10
   10dd8:	e7e8      	b.n	10dac <cbvprintf+0x1b0>
		conv->prec_star = true;
   10dda:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10dde:	f042 0204 	orr.w	r2, r2, #4
   10de2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   10de6:	3302      	adds	r3, #2
	switch (*sp) {
   10de8:	461f      	mov	r7, r3
   10dea:	f817 2b01 	ldrb.w	r2, [r7], #1
   10dee:	2a6c      	cmp	r2, #108	; 0x6c
   10df0:	d041      	beq.n	10e76 <cbvprintf+0x27a>
   10df2:	d825      	bhi.n	10e40 <cbvprintf+0x244>
   10df4:	2a68      	cmp	r2, #104	; 0x68
   10df6:	d02b      	beq.n	10e50 <cbvprintf+0x254>
   10df8:	2a6a      	cmp	r2, #106	; 0x6a
   10dfa:	d046      	beq.n	10e8a <cbvprintf+0x28e>
   10dfc:	2a4c      	cmp	r2, #76	; 0x4c
   10dfe:	d04c      	beq.n	10e9a <cbvprintf+0x29e>
   10e00:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   10e02:	f817 2b01 	ldrb.w	r2, [r7], #1
   10e06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10e0a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   10e0e:	2a78      	cmp	r2, #120	; 0x78
   10e10:	f200 80d9 	bhi.w	10fc6 <cbvprintf+0x3ca>
   10e14:	2a57      	cmp	r2, #87	; 0x57
   10e16:	d84d      	bhi.n	10eb4 <cbvprintf+0x2b8>
   10e18:	2a41      	cmp	r2, #65	; 0x41
   10e1a:	d003      	beq.n	10e24 <cbvprintf+0x228>
   10e1c:	3a45      	subs	r2, #69	; 0x45
   10e1e:	2a02      	cmp	r2, #2
   10e20:	f200 80d1 	bhi.w	10fc6 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   10e24:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10e28:	2204      	movs	r2, #4
   10e2a:	f362 0302 	bfi	r3, r2, #0, #3
   10e2e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   10e32:	2301      	movs	r3, #1
			break;
   10e34:	e09e      	b.n	10f74 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   10e36:	fb06 2101 	mla	r1, r6, r1, r2
   10e3a:	3930      	subs	r1, #48	; 0x30
   10e3c:	4603      	mov	r3, r0
   10e3e:	e764      	b.n	10d0a <cbvprintf+0x10e>
	switch (*sp) {
   10e40:	2a74      	cmp	r2, #116	; 0x74
   10e42:	d026      	beq.n	10e92 <cbvprintf+0x296>
   10e44:	2a7a      	cmp	r2, #122	; 0x7a
   10e46:	d1db      	bne.n	10e00 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   10e48:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10e4c:	2206      	movs	r2, #6
   10e4e:	e00d      	b.n	10e6c <cbvprintf+0x270>
		if (*++sp == 'h') {
   10e50:	785a      	ldrb	r2, [r3, #1]
   10e52:	2a68      	cmp	r2, #104	; 0x68
   10e54:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10e58:	d106      	bne.n	10e68 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   10e5a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10e5c:	f361 02c6 	bfi	r2, r1, #3, #4
   10e60:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   10e64:	1c9f      	adds	r7, r3, #2
   10e66:	e7cc      	b.n	10e02 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   10e68:	4613      	mov	r3, r2
   10e6a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   10e6c:	f362 03c6 	bfi	r3, r2, #3, #4
   10e70:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   10e74:	e7c5      	b.n	10e02 <cbvprintf+0x206>
		if (*++sp == 'l') {
   10e76:	785a      	ldrb	r2, [r3, #1]
   10e78:	2a6c      	cmp	r2, #108	; 0x6c
   10e7a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10e7e:	d101      	bne.n	10e84 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   10e80:	2104      	movs	r1, #4
   10e82:	e7eb      	b.n	10e5c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   10e84:	4613      	mov	r3, r2
   10e86:	2203      	movs	r2, #3
   10e88:	e7f0      	b.n	10e6c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   10e8a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10e8e:	2205      	movs	r2, #5
   10e90:	e7ec      	b.n	10e6c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   10e92:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10e96:	2207      	movs	r2, #7
   10e98:	e7e8      	b.n	10e6c <cbvprintf+0x270>
		conv->unsupported = true;
   10e9a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   10e9e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   10ea2:	f023 0302 	bic.w	r3, r3, #2
   10ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10eaa:	f043 0302 	orr.w	r3, r3, #2
   10eae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   10eb2:	e7a6      	b.n	10e02 <cbvprintf+0x206>
   10eb4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   10eb8:	2920      	cmp	r1, #32
   10eba:	f200 8084 	bhi.w	10fc6 <cbvprintf+0x3ca>
   10ebe:	a001      	add	r0, pc, #4	; (adr r0, 10ec4 <cbvprintf+0x2c8>)
   10ec0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   10ec4:	00010f89 	.word	0x00010f89
   10ec8:	00010fc7 	.word	0x00010fc7
   10ecc:	00010fc7 	.word	0x00010fc7
   10ed0:	00010fc7 	.word	0x00010fc7
   10ed4:	00010fc7 	.word	0x00010fc7
   10ed8:	00010fc7 	.word	0x00010fc7
   10edc:	00010fc7 	.word	0x00010fc7
   10ee0:	00010fc7 	.word	0x00010fc7
   10ee4:	00010fc7 	.word	0x00010fc7
   10ee8:	00010e25 	.word	0x00010e25
   10eec:	00010fc7 	.word	0x00010fc7
   10ef0:	00010f89 	.word	0x00010f89
   10ef4:	00010f49 	.word	0x00010f49
   10ef8:	00010e25 	.word	0x00010e25
   10efc:	00010e25 	.word	0x00010e25
   10f00:	00010e25 	.word	0x00010e25
   10f04:	00010fc7 	.word	0x00010fc7
   10f08:	00010f49 	.word	0x00010f49
   10f0c:	00010fc7 	.word	0x00010fc7
   10f10:	00010fc7 	.word	0x00010fc7
   10f14:	00010fc7 	.word	0x00010fc7
   10f18:	00010fc7 	.word	0x00010fc7
   10f1c:	00010f91 	.word	0x00010f91
   10f20:	00010f89 	.word	0x00010f89
   10f24:	00010fad 	.word	0x00010fad
   10f28:	00010fc7 	.word	0x00010fc7
   10f2c:	00010fc7 	.word	0x00010fc7
   10f30:	00010fad 	.word	0x00010fad
   10f34:	00010fc7 	.word	0x00010fc7
   10f38:	00010f89 	.word	0x00010f89
   10f3c:	00010fc7 	.word	0x00010fc7
   10f40:	00010fc7 	.word	0x00010fc7
   10f44:	00010f89 	.word	0x00010f89
		conv->specifier_cat = SPECIFIER_SINT;
   10f48:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   10f4c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   10f4e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10f52:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10f56:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10f58:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   10f5c:	bf02      	ittt	eq
   10f5e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   10f62:	f041 0101 	orreq.w	r1, r1, #1
   10f66:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   10f6a:	2a63      	cmp	r2, #99	; 0x63
   10f6c:	d131      	bne.n	10fd2 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10f6e:	3b00      	subs	r3, #0
   10f70:	bf18      	it	ne
   10f72:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10f74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10f78:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10f7c:	430b      	orrs	r3, r1
   10f7e:	f363 0241 	bfi	r2, r3, #1, #1
   10f82:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10f86:	e6d8      	b.n	10d3a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   10f88:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   10f8c:	2002      	movs	r0, #2
   10f8e:	e7de      	b.n	10f4e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   10f90:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10f94:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10f98:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   10f9c:	2103      	movs	r1, #3
   10f9e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10fa2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   10fa4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10fa8:	4143      	adcs	r3, r0
   10faa:	e7e3      	b.n	10f74 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   10fac:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   10fb0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   10fb2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   10fb6:	f361 0202 	bfi	r2, r1, #0, #3
   10fba:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   10fbe:	bf14      	ite	ne
   10fc0:	2301      	movne	r3, #1
   10fc2:	2300      	moveq	r3, #0
   10fc4:	e7d6      	b.n	10f74 <cbvprintf+0x378>
		conv->invalid = true;
   10fc6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10fca:	f043 0301 	orr.w	r3, r3, #1
   10fce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   10fd2:	2300      	movs	r3, #0
   10fd4:	e7ce      	b.n	10f74 <cbvprintf+0x378>
		} else if (conv->width_present) {
   10fd6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   10fda:	2a00      	cmp	r2, #0
			width = conv->width_value;
   10fdc:	bfb4      	ite	lt
   10fde:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   10fe2:	f04f 39ff 	movge.w	r9, #4294967295
   10fe6:	e6ba      	b.n	10d5e <cbvprintf+0x162>
		} else if (conv->prec_present) {
   10fe8:	079b      	lsls	r3, r3, #30
   10fea:	f57f aec7 	bpl.w	10d7c <cbvprintf+0x180>
			precision = conv->prec_value;
   10fee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   10ff2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   10ff6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   10ff8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   10ffc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   11000:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11004:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11006:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1100a:	d136      	bne.n	1107a <cbvprintf+0x47e>
			switch (length_mod) {
   1100c:	1ed3      	subs	r3, r2, #3
   1100e:	2b04      	cmp	r3, #4
   11010:	d820      	bhi.n	11054 <cbvprintf+0x458>
   11012:	e8df f003 	tbb	[pc, r3]
   11016:	0703      	.short	0x0703
   11018:	1f07      	.short	0x1f07
   1101a:	1f          	.byte	0x1f
   1101b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1101c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   11020:	17c1      	asrs	r1, r0, #31
   11022:	e004      	b.n	1102e <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   11024:	3407      	adds	r4, #7
   11026:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1102a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   1102e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   11032:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11036:	f013 0603 	ands.w	r6, r3, #3
   1103a:	d054      	beq.n	110e6 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   1103c:	9802      	ldr	r0, [sp, #8]
   1103e:	463b      	mov	r3, r7
   11040:	4652      	mov	r2, sl
   11042:	4659      	mov	r1, fp
   11044:	f00f f808 	bl	20058 <outs>
   11048:	2800      	cmp	r0, #0
   1104a:	f2c0 8143 	blt.w	112d4 <cbvprintf+0x6d8>
   1104e:	4405      	add	r5, r0
			continue;
   11050:	46ba      	mov	sl, r7
   11052:	e5db      	b.n	10c0c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11054:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   11058:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1105a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1105e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11062:	d105      	bne.n	11070 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   11064:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   11068:	930a      	str	r3, [sp, #40]	; 0x28
   1106a:	2300      	movs	r3, #0
   1106c:	930b      	str	r3, [sp, #44]	; 0x2c
   1106e:	e7e0      	b.n	11032 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   11070:	2a02      	cmp	r2, #2
   11072:	d1de      	bne.n	11032 <cbvprintf+0x436>
				value->sint = (short)value->sint;
   11074:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   11078:	e7d2      	b.n	11020 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1107a:	2b02      	cmp	r3, #2
   1107c:	d123      	bne.n	110c6 <cbvprintf+0x4ca>
			switch (length_mod) {
   1107e:	1ed3      	subs	r3, r2, #3
   11080:	2b04      	cmp	r3, #4
   11082:	d813      	bhi.n	110ac <cbvprintf+0x4b0>
   11084:	e8df f003 	tbb	[pc, r3]
   11088:	120a0a03 	.word	0x120a0a03
   1108c:	12          	.byte	0x12
   1108d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1108e:	6820      	ldr	r0, [r4, #0]
   11090:	900a      	str	r0, [sp, #40]	; 0x28
   11092:	2100      	movs	r1, #0
   11094:	1d23      	adds	r3, r4, #4
   11096:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   11098:	461c      	mov	r4, r3
   1109a:	e7ca      	b.n	11032 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   1109c:	3407      	adds	r4, #7
   1109e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   110a2:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   110a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   110aa:	e7f5      	b.n	11098 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   110ac:	f854 3b04 	ldr.w	r3, [r4], #4
   110b0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   110b2:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   110b4:	f04f 0300 	mov.w	r3, #0
   110b8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   110ba:	d0d3      	beq.n	11064 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   110bc:	2a02      	cmp	r2, #2
   110be:	d1b8      	bne.n	11032 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   110c0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   110c4:	e7d0      	b.n	11068 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   110c6:	2b04      	cmp	r3, #4
   110c8:	d107      	bne.n	110da <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   110ca:	3407      	adds	r4, #7
   110cc:	f024 0407 	bic.w	r4, r4, #7
   110d0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   110d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   110d8:	e7ab      	b.n	11032 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   110da:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   110dc:	bf04      	itt	eq
   110de:	f854 3b04 	ldreq.w	r3, [r4], #4
   110e2:	930a      	streq	r3, [sp, #40]	; 0x28
   110e4:	e7a5      	b.n	11032 <cbvprintf+0x436>
		switch (conv->specifier) {
   110e6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   110ea:	2878      	cmp	r0, #120	; 0x78
   110ec:	d8b0      	bhi.n	11050 <cbvprintf+0x454>
   110ee:	2862      	cmp	r0, #98	; 0x62
   110f0:	d822      	bhi.n	11138 <cbvprintf+0x53c>
   110f2:	2825      	cmp	r0, #37	; 0x25
   110f4:	f43f ad93 	beq.w	10c1e <cbvprintf+0x22>
   110f8:	2858      	cmp	r0, #88	; 0x58
   110fa:	d1a9      	bne.n	11050 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   110fc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11100:	9300      	str	r3, [sp, #0]
   11102:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11106:	ab04      	add	r3, sp, #16
   11108:	aa0c      	add	r2, sp, #48	; 0x30
   1110a:	f00e ff5a 	bl	1ffc2 <encode_uint>
   1110e:	4682      	mov	sl, r0
			if (precision >= 0) {
   11110:	f1b8 0f00 	cmp.w	r8, #0
   11114:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   11118:	db0c      	blt.n	11134 <cbvprintf+0x538>
				conv->flag_zero = false;
   1111a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1111e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   11122:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11126:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   11128:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   1112c:	d902      	bls.n	11134 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   1112e:	eba8 0303 	sub.w	r3, r8, r3
   11132:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   11134:	4680      	mov	r8, r0
   11136:	e03d      	b.n	111b4 <cbvprintf+0x5b8>
   11138:	3863      	subs	r0, #99	; 0x63
   1113a:	2815      	cmp	r0, #21
   1113c:	d888      	bhi.n	11050 <cbvprintf+0x454>
   1113e:	a101      	add	r1, pc, #4	; (adr r1, 11144 <cbvprintf+0x548>)
   11140:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   11144:	000111c5 	.word	0x000111c5
   11148:	00011229 	.word	0x00011229
   1114c:	00011051 	.word	0x00011051
   11150:	00011051 	.word	0x00011051
   11154:	00011051 	.word	0x00011051
   11158:	00011051 	.word	0x00011051
   1115c:	00011229 	.word	0x00011229
   11160:	00011051 	.word	0x00011051
   11164:	00011051 	.word	0x00011051
   11168:	00011051 	.word	0x00011051
   1116c:	00011051 	.word	0x00011051
   11170:	00011287 	.word	0x00011287
   11174:	00011255 	.word	0x00011255
   11178:	00011259 	.word	0x00011259
   1117c:	00011051 	.word	0x00011051
   11180:	00011051 	.word	0x00011051
   11184:	0001119d 	.word	0x0001119d
   11188:	00011051 	.word	0x00011051
   1118c:	00011255 	.word	0x00011255
   11190:	00011051 	.word	0x00011051
   11194:	00011051 	.word	0x00011051
   11198:	00011255 	.word	0x00011255
			if (precision >= 0) {
   1119c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   111a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   111a4:	db0a      	blt.n	111bc <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   111a6:	4641      	mov	r1, r8
   111a8:	4650      	mov	r0, sl
   111aa:	f010 ffe9 	bl	22180 <strnlen>
			bpe = bps + len;
   111ae:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   111b2:	2600      	movs	r6, #0
		if (bps == NULL) {
   111b4:	f1ba 0f00 	cmp.w	sl, #0
   111b8:	d10c      	bne.n	111d4 <cbvprintf+0x5d8>
   111ba:	e749      	b.n	11050 <cbvprintf+0x454>
				len = strlen(bps);
   111bc:	4650      	mov	r0, sl
   111be:	f010 ffd8 	bl	22172 <strlen>
   111c2:	e7f4      	b.n	111ae <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   111c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   111c6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   111ca:	2600      	movs	r6, #0
			bpe = buf + 1;
   111cc:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   111d0:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   111d4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   111d8:	b106      	cbz	r6, 111dc <cbvprintf+0x5e0>
			nj_len += 1U;
   111da:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   111dc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   111e0:	06d0      	lsls	r0, r2, #27
   111e2:	d56b      	bpl.n	112bc <cbvprintf+0x6c0>
			nj_len += 2U;
   111e4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   111e6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   111e8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   111ea:	bf48      	it	mi
   111ec:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   111ee:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   111f0:	bf48      	it	mi
   111f2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   111f4:	f1b9 0f00 	cmp.w	r9, #0
   111f8:	dd79      	ble.n	112ee <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   111fa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   111fe:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   11202:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11206:	9303      	str	r3, [sp, #12]
   11208:	0753      	lsls	r3, r2, #29
   1120a:	d470      	bmi.n	112ee <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   1120c:	0650      	lsls	r0, r2, #25
   1120e:	d564      	bpl.n	112da <cbvprintf+0x6de>
					if (sign != 0) {
   11210:	b146      	cbz	r6, 11224 <cbvprintf+0x628>
						OUTC(sign);
   11212:	9b02      	ldr	r3, [sp, #8]
   11214:	4659      	mov	r1, fp
   11216:	4630      	mov	r0, r6
   11218:	4798      	blx	r3
   1121a:	2800      	cmp	r0, #0
   1121c:	db5a      	blt.n	112d4 <cbvprintf+0x6d8>
						sign = 0;
   1121e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   11220:	3501      	adds	r5, #1
						sign = 0;
   11222:	461e      	mov	r6, r3
					pad = '0';
   11224:	2330      	movs	r3, #48	; 0x30
   11226:	e059      	b.n	112dc <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   11228:	071e      	lsls	r6, r3, #28
   1122a:	d411      	bmi.n	11250 <cbvprintf+0x654>
				sign = ' ';
   1122c:	f013 0610 	ands.w	r6, r3, #16
   11230:	bf18      	it	ne
   11232:	2620      	movne	r6, #32
			sint = value->sint;
   11234:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   11238:	2a00      	cmp	r2, #0
   1123a:	f173 0100 	sbcs.w	r1, r3, #0
   1123e:	f6bf af5d 	bge.w	110fc <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   11242:	4252      	negs	r2, r2
   11244:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11248:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   1124c:	262d      	movs	r6, #45	; 0x2d
   1124e:	e755      	b.n	110fc <cbvprintf+0x500>
				sign = '+';
   11250:	262b      	movs	r6, #43	; 0x2b
   11252:	e7ef      	b.n	11234 <cbvprintf+0x638>
		switch (conv->specifier) {
   11254:	2600      	movs	r6, #0
   11256:	e751      	b.n	110fc <cbvprintf+0x500>
			if (value->ptr != NULL) {
   11258:	980a      	ldr	r0, [sp, #40]	; 0x28
   1125a:	b348      	cbz	r0, 112b0 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1125c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11260:	9300      	str	r3, [sp, #0]
   11262:	aa0c      	add	r2, sp, #48	; 0x30
   11264:	ab04      	add	r3, sp, #16
   11266:	2100      	movs	r1, #0
   11268:	f00e feab 	bl	1ffc2 <encode_uint>
				conv->altform_0c = true;
   1126c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   11270:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11274:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11278:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1127c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1127e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   11282:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11284:	e744      	b.n	11110 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   11286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   11288:	2a07      	cmp	r2, #7
   1128a:	f63f aee1 	bhi.w	11050 <cbvprintf+0x454>
   1128e:	e8df f002 	tbb	[pc, r2]
   11292:	040d      	.short	0x040d
   11294:	08080d06 	.word	0x08080d06
   11298:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1129a:	701d      	strb	r5, [r3, #0]
		break;
   1129c:	e6d8      	b.n	11050 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1129e:	801d      	strh	r5, [r3, #0]
		break;
   112a0:	e6d6      	b.n	11050 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   112a2:	4628      	mov	r0, r5
   112a4:	17e9      	asrs	r1, r5, #31
   112a6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   112aa:	e6d1      	b.n	11050 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   112ac:	601d      	str	r5, [r3, #0]
		break;
   112ae:	e6cf      	b.n	11050 <cbvprintf+0x454>
			bpe = bps + 5;
   112b0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 11378 <cbvprintf+0x77c>
   112b4:	4606      	mov	r6, r0
			bps = "(nil)";
   112b6:	f1a8 0a05 	sub.w	sl, r8, #5
   112ba:	e78b      	b.n	111d4 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   112bc:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   112be:	bf48      	it	mi
   112c0:	3301      	addmi	r3, #1
   112c2:	e790      	b.n	111e6 <cbvprintf+0x5ea>
					OUTC(pad);
   112c4:	4618      	mov	r0, r3
   112c6:	9303      	str	r3, [sp, #12]
   112c8:	4659      	mov	r1, fp
   112ca:	9b02      	ldr	r3, [sp, #8]
   112cc:	4798      	blx	r3
   112ce:	2800      	cmp	r0, #0
   112d0:	9b03      	ldr	r3, [sp, #12]
   112d2:	da04      	bge.n	112de <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   112d4:	b011      	add	sp, #68	; 0x44
   112d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   112da:	2320      	movs	r3, #32
   112dc:	444d      	add	r5, r9
   112de:	464a      	mov	r2, r9
				while (width-- > 0) {
   112e0:	2a00      	cmp	r2, #0
   112e2:	eba5 0109 	sub.w	r1, r5, r9
   112e6:	f109 39ff 	add.w	r9, r9, #4294967295
   112ea:	dceb      	bgt.n	112c4 <cbvprintf+0x6c8>
   112ec:	460d      	mov	r5, r1
		if (sign != 0) {
   112ee:	b136      	cbz	r6, 112fe <cbvprintf+0x702>
			OUTC(sign);
   112f0:	9b02      	ldr	r3, [sp, #8]
   112f2:	4659      	mov	r1, fp
   112f4:	4630      	mov	r0, r6
   112f6:	4798      	blx	r3
   112f8:	2800      	cmp	r0, #0
   112fa:	dbeb      	blt.n	112d4 <cbvprintf+0x6d8>
   112fc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   112fe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11302:	06d9      	lsls	r1, r3, #27
   11304:	d401      	bmi.n	1130a <cbvprintf+0x70e>
   11306:	071a      	lsls	r2, r3, #28
   11308:	d506      	bpl.n	11318 <cbvprintf+0x71c>
				OUTC('0');
   1130a:	9b02      	ldr	r3, [sp, #8]
   1130c:	4659      	mov	r1, fp
   1130e:	2030      	movs	r0, #48	; 0x30
   11310:	4798      	blx	r3
   11312:	2800      	cmp	r0, #0
   11314:	dbde      	blt.n	112d4 <cbvprintf+0x6d8>
   11316:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11318:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1131c:	06db      	lsls	r3, r3, #27
   1131e:	d507      	bpl.n	11330 <cbvprintf+0x734>
				OUTC(conv->specifier);
   11320:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11324:	9b02      	ldr	r3, [sp, #8]
   11326:	4659      	mov	r1, fp
   11328:	4798      	blx	r3
   1132a:	2800      	cmp	r0, #0
   1132c:	dbd2      	blt.n	112d4 <cbvprintf+0x6d8>
   1132e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11330:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11332:	442e      	add	r6, r5
   11334:	1b73      	subs	r3, r6, r5
   11336:	2b00      	cmp	r3, #0
   11338:	dc16      	bgt.n	11368 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   1133a:	9802      	ldr	r0, [sp, #8]
   1133c:	4643      	mov	r3, r8
   1133e:	4652      	mov	r2, sl
   11340:	4659      	mov	r1, fp
   11342:	f00e fe89 	bl	20058 <outs>
   11346:	2800      	cmp	r0, #0
   11348:	dbc4      	blt.n	112d4 <cbvprintf+0x6d8>
   1134a:	4405      	add	r5, r0
		while (width > 0) {
   1134c:	44a9      	add	r9, r5
   1134e:	eba9 0305 	sub.w	r3, r9, r5
   11352:	2b00      	cmp	r3, #0
   11354:	f77f ae7c 	ble.w	11050 <cbvprintf+0x454>
			OUTC(' ');
   11358:	9b02      	ldr	r3, [sp, #8]
   1135a:	4659      	mov	r1, fp
   1135c:	2020      	movs	r0, #32
   1135e:	4798      	blx	r3
   11360:	2800      	cmp	r0, #0
   11362:	dbb7      	blt.n	112d4 <cbvprintf+0x6d8>
   11364:	3501      	adds	r5, #1
			--width;
   11366:	e7f2      	b.n	1134e <cbvprintf+0x752>
				OUTC('0');
   11368:	9b02      	ldr	r3, [sp, #8]
   1136a:	4659      	mov	r1, fp
   1136c:	2030      	movs	r0, #48	; 0x30
   1136e:	4798      	blx	r3
   11370:	2800      	cmp	r0, #0
   11372:	dbaf      	blt.n	112d4 <cbvprintf+0x6d8>
   11374:	3501      	adds	r5, #1
   11376:	e7dd      	b.n	11334 <cbvprintf+0x738>
   11378:	000263c1 	.word	0x000263c1

0001137c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1137c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1137e:	4910      	ldr	r1, [pc, #64]	; (113c0 <enable_logger+0x44>)
   11380:	4810      	ldr	r0, [pc, #64]	; (113c4 <enable_logger+0x48>)
{
   11382:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   11384:	2200      	movs	r2, #0
   11386:	f013 fecc 	bl	25122 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1138a:	4d0f      	ldr	r5, [pc, #60]	; (113c8 <enable_logger+0x4c>)
   1138c:	490f      	ldr	r1, [pc, #60]	; (113cc <enable_logger+0x50>)
   1138e:	2200      	movs	r2, #0
   11390:	2300      	movs	r3, #0
   11392:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11396:	2400      	movs	r4, #0
   11398:	230e      	movs	r3, #14
   1139a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1139e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   113a2:	4b0b      	ldr	r3, [pc, #44]	; (113d0 <enable_logger+0x54>)
   113a4:	9400      	str	r4, [sp, #0]
   113a6:	f44f 7240 	mov.w	r2, #768	; 0x300
   113aa:	4628      	mov	r0, r5
   113ac:	f00c ffaa 	bl	1e304 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   113b0:	4908      	ldr	r1, [pc, #32]	; (113d4 <enable_logger+0x58>)
   113b2:	4628      	mov	r0, r5
   113b4:	f013 fb5d 	bl	24a72 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   113b8:	4620      	mov	r0, r4
   113ba:	b009      	add	sp, #36	; 0x24
   113bc:	bd30      	pop	{r4, r5, pc}
   113be:	bf00      	nop
   113c0:	000113d9 	.word	0x000113d9
   113c4:	20001508 	.word	0x20001508
   113c8:	20001540 	.word	0x20001540
   113cc:	20004e80 	.word	0x20004e80
   113d0:	0001181d 	.word	0x0001181d
   113d4:	000263c2 	.word	0x000263c2

000113d8 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   113d8:	4801      	ldr	r0, [pc, #4]	; (113e0 <log_process_thread_timer_expiry_fn+0x8>)
   113da:	f00d b925 	b.w	1e628 <z_impl_k_sem_give>
   113de:	bf00      	nop
   113e0:	20000870 	.word	0x20000870

000113e4 <log_core_init>:
{
   113e4:	b510      	push	{r4, lr}
	panic_mode = false;
   113e6:	4b0b      	ldr	r3, [pc, #44]	; (11414 <log_core_init+0x30>)
   113e8:	2200      	movs	r2, #0
   113ea:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   113ec:	4b0a      	ldr	r3, [pc, #40]	; (11418 <log_core_init+0x34>)
   113ee:	4a0b      	ldr	r2, [pc, #44]	; (1141c <log_core_init+0x38>)
   113f0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   113f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   113f6:	f000 fcbd 	bl	11d74 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   113fa:	f000 fa71 	bl	118e0 <log_msg_pool_init>
		log_list_init(&list);
   113fe:	4808      	ldr	r0, [pc, #32]	; (11420 <log_core_init+0x3c>)
   11400:	f00e fe41 	bl	20086 <log_list_init>
}
   11404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   11408:	4906      	ldr	r1, [pc, #24]	; (11424 <log_core_init+0x40>)
   1140a:	4807      	ldr	r0, [pc, #28]	; (11428 <log_core_init+0x44>)
   1140c:	2308      	movs	r3, #8
   1140e:	2248      	movs	r2, #72	; 0x48
   11410:	f013 bae5 	b.w	249de <k_mem_slab_init>
   11414:	20003345 	.word	0x20003345
   11418:	200004ac 	.word	0x200004ac
   1141c:	000200c5 	.word	0x000200c5
   11420:	20002d54 	.word	0x20002d54
   11424:	20008988 	.word	0x20008988
   11428:	20002d5c 	.word	0x20002d5c

0001142c <get_msg>:
{
   1142c:	b510      	push	{r4, lr}
   1142e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11432:	f3ef 8411 	mrs	r4, BASEPRI
   11436:	f383 8811 	msr	BASEPRI, r3
   1143a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   1143e:	4804      	ldr	r0, [pc, #16]	; (11450 <get_msg+0x24>)
   11440:	f00e fe31 	bl	200a6 <log_list_head_get>
	__asm__ volatile(
   11444:	f384 8811 	msr	BASEPRI, r4
   11448:	f3bf 8f6f 	isb	sy
}
   1144c:	bd10      	pop	{r4, pc}
   1144e:	bf00      	nop
   11450:	20002d54 	.word	0x20002d54

00011454 <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11454:	4b06      	ldr	r3, [pc, #24]	; (11470 <z_log_dropped+0x1c>)
   11456:	f3bf 8f5b 	dmb	ish
   1145a:	e853 2f00 	ldrex	r2, [r3]
   1145e:	3201      	adds	r2, #1
   11460:	e843 2100 	strex	r1, r2, [r3]
   11464:	2900      	cmp	r1, #0
   11466:	d1f8      	bne.n	1145a <z_log_dropped+0x6>
   11468:	f3bf 8f5b 	dmb	ish
}
   1146c:	4770      	bx	lr
   1146e:	bf00      	nop
   11470:	20002d4c 	.word	0x20002d4c

00011474 <z_log_dropped_read_and_clear>:
}
   11474:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11476:	4b06      	ldr	r3, [pc, #24]	; (11490 <z_log_dropped_read_and_clear+0x1c>)
   11478:	f3bf 8f5b 	dmb	ish
   1147c:	4602      	mov	r2, r0
   1147e:	e853 0f00 	ldrex	r0, [r3]
   11482:	e843 2100 	strex	r1, r2, [r3]
   11486:	2900      	cmp	r1, #0
   11488:	d1f9      	bne.n	1147e <z_log_dropped_read_and_clear+0xa>
   1148a:	f3bf 8f5b 	dmb	ish
   1148e:	4770      	bx	lr
   11490:	20002d4c 	.word	0x20002d4c

00011494 <dropped_notify>:
{
   11494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   11496:	f7ff ffed 	bl	11474 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1149a:	4c0a      	ldr	r4, [pc, #40]	; (114c4 <dropped_notify+0x30>)
   1149c:	4d0a      	ldr	r5, [pc, #40]	; (114c8 <dropped_notify+0x34>)
   1149e:	1b2d      	subs	r5, r5, r4
   114a0:	4607      	mov	r7, r0
   114a2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   114a4:	2600      	movs	r6, #0
   114a6:	42ae      	cmp	r6, r5
   114a8:	db00      	blt.n	114ac <dropped_notify+0x18>
}
   114aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   114ac:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   114ae:	795b      	ldrb	r3, [r3, #5]
   114b0:	b12b      	cbz	r3, 114be <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   114b2:	6823      	ldr	r3, [r4, #0]
   114b4:	691b      	ldr	r3, [r3, #16]
   114b6:	b113      	cbz	r3, 114be <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   114b8:	4639      	mov	r1, r7
   114ba:	4620      	mov	r0, r4
   114bc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   114be:	3601      	adds	r6, #1
   114c0:	3410      	adds	r4, #16
   114c2:	e7f0      	b.n	114a6 <dropped_notify+0x12>
   114c4:	000257dc 	.word	0x000257dc
   114c8:	000257ec 	.word	0x000257ec

000114cc <log_source_name_get>:
   114cc:	4a04      	ldr	r2, [pc, #16]	; (114e0 <log_source_name_get+0x14>)
   114ce:	4b05      	ldr	r3, [pc, #20]	; (114e4 <log_source_name_get+0x18>)
   114d0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   114d2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   114d6:	bf34      	ite	cc
   114d8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   114dc:	2000      	movcs	r0, #0
}
   114de:	4770      	bx	lr
   114e0:	000256c4 	.word	0x000256c4
   114e4:	000257dc 	.word	0x000257dc

000114e8 <log_backend_enable>:
	id += backend - log_backend_get(0);
   114e8:	4b09      	ldr	r3, [pc, #36]	; (11510 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   114ea:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   114ec:	1ac3      	subs	r3, r0, r3
   114ee:	111b      	asrs	r3, r3, #4
   114f0:	3301      	adds	r3, #1
{
   114f2:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   114f4:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
   114f6:	6843      	ldr	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   114f8:	4c06      	ldr	r4, [pc, #24]	; (11514 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
   114fa:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   114fc:	2201      	movs	r2, #1
   114fe:	715a      	strb	r2, [r3, #5]
   11500:	7822      	ldrb	r2, [r4, #0]
   11502:	b912      	cbnz	r2, 1150a <log_backend_enable+0x22>
   11504:	4804      	ldr	r0, [pc, #16]	; (11518 <log_backend_enable+0x30>)
   11506:	f00d f88f 	bl	1e628 <z_impl_k_sem_give>
	backend_attached = true;
   1150a:	2301      	movs	r3, #1
   1150c:	7023      	strb	r3, [r4, #0]
}
   1150e:	bd10      	pop	{r4, pc}
   11510:	000257dc 	.word	0x000257dc
   11514:	20003344 	.word	0x20003344
   11518:	20000870 	.word	0x20000870

0001151c <log_init>:
{
   1151c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1151e:	4b12      	ldr	r3, [pc, #72]	; (11568 <log_init+0x4c>)
   11520:	f3bf 8f5b 	dmb	ish
   11524:	e853 5f00 	ldrex	r5, [r3]
   11528:	1c6a      	adds	r2, r5, #1
   1152a:	e843 2100 	strex	r1, r2, [r3]
   1152e:	2900      	cmp	r1, #0
   11530:	d1f8      	bne.n	11524 <log_init+0x8>
   11532:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   11536:	b92d      	cbnz	r5, 11544 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
   11538:	4c0c      	ldr	r4, [pc, #48]	; (1156c <log_init+0x50>)
   1153a:	4e0d      	ldr	r6, [pc, #52]	; (11570 <log_init+0x54>)
   1153c:	1b36      	subs	r6, r6, r4
   1153e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   11540:	42b5      	cmp	r5, r6
   11542:	db00      	blt.n	11546 <log_init+0x2a>
}
   11544:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   11546:	7b23      	ldrb	r3, [r4, #12]
   11548:	b153      	cbz	r3, 11560 <log_init+0x44>
			if (backend->api->init != NULL) {
   1154a:	6823      	ldr	r3, [r4, #0]
   1154c:	699b      	ldr	r3, [r3, #24]
   1154e:	b10b      	cbz	r3, 11554 <log_init+0x38>
				backend->api->init(backend);
   11550:	4620      	mov	r0, r4
   11552:	4798      	blx	r3
			log_backend_enable(backend,
   11554:	6863      	ldr	r3, [r4, #4]
   11556:	2204      	movs	r2, #4
   11558:	6819      	ldr	r1, [r3, #0]
   1155a:	4620      	mov	r0, r4
   1155c:	f7ff ffc4 	bl	114e8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   11560:	3501      	adds	r5, #1
   11562:	3410      	adds	r4, #16
   11564:	e7ec      	b.n	11540 <log_init+0x24>
   11566:	bf00      	nop
   11568:	20002d50 	.word	0x20002d50
   1156c:	000257dc 	.word	0x000257dc
   11570:	000257ec 	.word	0x000257ec

00011574 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   11574:	4b16      	ldr	r3, [pc, #88]	; (115d0 <z_log_strdup+0x5c>)
   11576:	4298      	cmp	r0, r3
{
   11578:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1157a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1157c:	d302      	bcc.n	11584 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1157e:	4b15      	ldr	r3, [pc, #84]	; (115d4 <z_log_strdup+0x60>)
   11580:	4298      	cmp	r0, r3
   11582:	d320      	bcc.n	115c6 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   11584:	4814      	ldr	r0, [pc, #80]	; (115d8 <z_log_strdup+0x64>)
   11586:	2200      	movs	r2, #0
   11588:	2300      	movs	r3, #0
   1158a:	a901      	add	r1, sp, #4
   1158c:	f00c fe58 	bl	1e240 <k_mem_slab_alloc>
	if (err != 0) {
   11590:	4605      	mov	r5, r0
   11592:	b9d8      	cbnz	r0, 115cc <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11594:	2201      	movs	r2, #1
   11596:	9b01      	ldr	r3, [sp, #4]
   11598:	f3bf 8f5b 	dmb	ish
   1159c:	e853 1f00 	ldrex	r1, [r3]
   115a0:	e843 2000 	strex	r0, r2, [r3]
   115a4:	2800      	cmp	r0, #0
   115a6:	d1f9      	bne.n	1159c <z_log_strdup+0x28>
   115a8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   115ac:	9801      	ldr	r0, [sp, #4]
   115ae:	4621      	mov	r1, r4
   115b0:	2241      	movs	r2, #65	; 0x41
   115b2:	3004      	adds	r0, #4
   115b4:	f010 fdca 	bl	2214c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   115b8:	9c01      	ldr	r4, [sp, #4]
   115ba:	237e      	movs	r3, #126	; 0x7e
   115bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   115c0:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   115c4:	3404      	adds	r4, #4
}
   115c6:	4620      	mov	r0, r4
   115c8:	b003      	add	sp, #12
   115ca:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   115cc:	4c03      	ldr	r4, [pc, #12]	; (115dc <z_log_strdup+0x68>)
   115ce:	e7fa      	b.n	115c6 <z_log_strdup+0x52>
   115d0:	00025430 	.word	0x00025430
   115d4:	000287c0 	.word	0x000287c0
   115d8:	20002d5c 	.word	0x20002d5c
   115dc:	000263ca 	.word	0x000263ca

000115e0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   115e0:	b150      	cbz	r0, 115f8 <log_is_strdup+0x18>
   115e2:	4b06      	ldr	r3, [pc, #24]	; (115fc <log_is_strdup+0x1c>)
   115e4:	4298      	cmp	r0, r3
   115e6:	d306      	bcc.n	115f6 <log_is_strdup+0x16>
   115e8:	f503 7310 	add.w	r3, r3, #576	; 0x240
   115ec:	4298      	cmp	r0, r3
   115ee:	bf2c      	ite	cs
   115f0:	2000      	movcs	r0, #0
   115f2:	2001      	movcc	r0, #1
   115f4:	4770      	bx	lr
   115f6:	2000      	movs	r0, #0
}
   115f8:	4770      	bx	lr
   115fa:	bf00      	nop
   115fc:	20008988 	.word	0x20008988

00011600 <z_impl_log_process>:
{
   11600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   11604:	4b46      	ldr	r3, [pc, #280]	; (11720 <z_impl_log_process+0x120>)
   11606:	781b      	ldrb	r3, [r3, #0]
{
   11608:	b085      	sub	sp, #20
   1160a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   1160c:	b903      	cbnz	r3, 11610 <z_impl_log_process+0x10>
   1160e:	b300      	cbz	r0, 11652 <z_impl_log_process+0x52>
	msg = get_msg();
   11610:	f7ff ff0c 	bl	1142c <get_msg>
	if (msg.msg) {
   11614:	4605      	mov	r5, r0
   11616:	b178      	cbz	r0, 11638 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11618:	f3bf 8f5b 	dmb	ish
   1161c:	4b41      	ldr	r3, [pc, #260]	; (11724 <z_impl_log_process+0x124>)
   1161e:	e853 2f00 	ldrex	r2, [r3]
   11622:	3a01      	subs	r2, #1
   11624:	e843 2100 	strex	r1, r2, [r3]
   11628:	2900      	cmp	r1, #0
   1162a:	d1f8      	bne.n	1161e <z_impl_log_process+0x1e>
   1162c:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   11630:	b19c      	cbz	r4, 1165a <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
   11632:	4628      	mov	r0, r5
   11634:	f00e fe73 	bl	2031e <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   11638:	b92c      	cbnz	r4, 11646 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
   1163a:	4b3b      	ldr	r3, [pc, #236]	; (11728 <z_impl_log_process+0x128>)
	if (!bypass && z_log_dropped_pending()) {
   1163c:	681b      	ldr	r3, [r3, #0]
   1163e:	2b00      	cmp	r3, #0
   11640:	dd01      	ble.n	11646 <z_impl_log_process+0x46>
		dropped_notify();
   11642:	f7ff ff27 	bl	11494 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   11646:	4839      	ldr	r0, [pc, #228]	; (1172c <z_impl_log_process+0x12c>)
   11648:	f00e fd2b 	bl	200a2 <log_list_head_peek>
   1164c:	1e04      	subs	r4, r0, #0
   1164e:	bf18      	it	ne
   11650:	2401      	movne	r4, #1
}
   11652:	4620      	mov	r0, r4
   11654:	b005      	add	sp, #20
   11656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   1165a:	4b35      	ldr	r3, [pc, #212]	; (11730 <z_impl_log_process+0x130>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   1165c:	781b      	ldrb	r3, [r3, #0]
   1165e:	b9cb      	cbnz	r3, 11694 <z_impl_log_process+0x94>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11660:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   11662:	07db      	lsls	r3, r3, #31
   11664:	d416      	bmi.n	11694 <z_impl_log_process+0x94>
	msg_str = log_msg_str_get(msg);
   11666:	f00e fe6d 	bl	20344 <log_msg_str_get>
   1166a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1166c:	4628      	mov	r0, r5
   1166e:	f00e fe34 	bl	202da <log_msg_nargs_get>
   11672:	4601      	mov	r1, r0
   11674:	4640      	mov	r0, r8
   11676:	f00e fd29 	bl	200cc <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1167a:	4f2e      	ldr	r7, [pc, #184]	; (11734 <z_impl_log_process+0x134>)
   1167c:	4b2e      	ldr	r3, [pc, #184]	; (11738 <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1167e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 11754 <z_impl_log_process+0x154>
   11682:	1bdb      	subs	r3, r3, r7
   11684:	08db      	lsrs	r3, r3, #3
   11686:	9303      	str	r3, [sp, #12]
   11688:	4b2c      	ldr	r3, [pc, #176]	; (1173c <z_impl_log_process+0x13c>)
   1168a:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1168c:	4606      	mov	r6, r0
   1168e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   11692:	b936      	cbnz	r6, 116a2 <z_impl_log_process+0xa2>
   11694:	4e2a      	ldr	r6, [pc, #168]	; (11740 <z_impl_log_process+0x140>)
   11696:	4f2b      	ldr	r7, [pc, #172]	; (11744 <z_impl_log_process+0x144>)
   11698:	1bbf      	subs	r7, r7, r6
   1169a:	113f      	asrs	r7, r7, #4
   1169c:	f04f 0800 	mov.w	r8, #0
   116a0:	e03a      	b.n	11718 <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
   116a2:	fab6 f186 	clz	r1, r6
   116a6:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   116aa:	4649      	mov	r1, r9
   116ac:	4628      	mov	r0, r5
   116ae:	f00e fe17 	bl	202e0 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   116b2:	4b25      	ldr	r3, [pc, #148]	; (11748 <z_impl_log_process+0x148>)
   116b4:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   116b6:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   116b8:	d302      	bcc.n	116c0 <z_impl_log_process+0xc0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   116ba:	4b24      	ldr	r3, [pc, #144]	; (1174c <z_impl_log_process+0x14c>)
   116bc:	4298      	cmp	r0, r3
   116be:	d31a      	bcc.n	116f6 <z_impl_log_process+0xf6>
   116c0:	4608      	mov	r0, r1
   116c2:	f7ff ff8d 	bl	115e0 <log_is_strdup>
   116c6:	4602      	mov	r2, r0
   116c8:	b9a8      	cbnz	r0, 116f6 <z_impl_log_process+0xf6>
   116ca:	4b21      	ldr	r3, [pc, #132]	; (11750 <z_impl_log_process+0x150>)
   116cc:	4299      	cmp	r1, r3
   116ce:	d012      	beq.n	116f6 <z_impl_log_process+0xf6>
	return msg->hdr.ids.source_id;
   116d0:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   116d2:	9903      	ldr	r1, [sp, #12]
   116d4:	f3c3 1389 	ubfx	r3, r3, #6, #10
   116d8:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   116da:	bf38      	it	cc
   116dc:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   116e0:	ea4f 138a 	mov.w	r3, sl, lsl #6
   116e4:	f043 0301 	orr.w	r3, r3, #1
   116e8:	f8ad 3000 	strh.w	r3, [sp]
   116ec:	4649      	mov	r1, r9
   116ee:	4643      	mov	r3, r8
   116f0:	4658      	mov	r0, fp
   116f2:	f00e fd45 	bl	20180 <log_3>
		mask &= ~BIT(idx);
   116f6:	2101      	movs	r1, #1
   116f8:	fa01 f109 	lsl.w	r1, r1, r9
   116fc:	ea26 0601 	bic.w	r6, r6, r1
   11700:	e7c7      	b.n	11692 <z_impl_log_process+0x92>
	return backend->cb->active;
   11702:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   11704:	795b      	ldrb	r3, [r3, #5]
   11706:	b123      	cbz	r3, 11712 <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
   11708:	6833      	ldr	r3, [r6, #0]
   1170a:	4629      	mov	r1, r5
   1170c:	685b      	ldr	r3, [r3, #4]
   1170e:	4630      	mov	r0, r6
   11710:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   11712:	f108 0801 	add.w	r8, r8, #1
   11716:	3610      	adds	r6, #16
   11718:	45b8      	cmp	r8, r7
   1171a:	dbf2      	blt.n	11702 <z_impl_log_process+0x102>
   1171c:	e789      	b.n	11632 <z_impl_log_process+0x32>
   1171e:	bf00      	nop
   11720:	20003344 	.word	0x20003344
   11724:	20002d48 	.word	0x20002d48
   11728:	20002d4c 	.word	0x20002d4c
   1172c:	20002d54 	.word	0x20002d54
   11730:	20003345 	.word	0x20003345
   11734:	000256c4 	.word	0x000256c4
   11738:	000257dc 	.word	0x000257dc
   1173c:	00025774 	.word	0x00025774
   11740:	000257dc 	.word	0x000257dc
   11744:	000257ec 	.word	0x000257ec
   11748:	00025430 	.word	0x00025430
   1174c:	000287c0 	.word	0x000287c0
   11750:	000263ca 	.word	0x000263ca
   11754:	000263e4 	.word	0x000263e4

00011758 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   11758:	4b29      	ldr	r3, [pc, #164]	; (11800 <msg_finalize+0xa8>)
{
   1175a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   1175c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   1175e:	8141      	strh	r1, [r0, #10]
{
   11760:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   11762:	4798      	blx	r3
   11764:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11766:	f04f 0340 	mov.w	r3, #64	; 0x40
   1176a:	f3ef 8511 	mrs	r5, BASEPRI
   1176e:	f383 8811 	msr	BASEPRI, r3
   11772:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11776:	4823      	ldr	r0, [pc, #140]	; (11804 <msg_finalize+0xac>)
   11778:	4621      	mov	r1, r4
   1177a:	f00e fc88 	bl	2008e <log_list_add_tail>
	__asm__ volatile(
   1177e:	f385 8811 	msr	BASEPRI, r5
   11782:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11786:	f3bf 8f5b 	dmb	ish
   1178a:	4b1f      	ldr	r3, [pc, #124]	; (11808 <msg_finalize+0xb0>)
   1178c:	e853 2f00 	ldrex	r2, [r3]
   11790:	3201      	adds	r2, #1
   11792:	e843 2100 	strex	r1, r2, [r3]
   11796:	2900      	cmp	r1, #0
   11798:	d1f8      	bne.n	1178c <msg_finalize+0x34>
   1179a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   1179e:	4a1b      	ldr	r2, [pc, #108]	; (1180c <msg_finalize+0xb4>)
   117a0:	7812      	ldrb	r2, [r2, #0]
   117a2:	b182      	cbz	r2, 117c6 <msg_finalize+0x6e>
	__asm__ volatile(
   117a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   117a8:	f3ef 8411 	mrs	r4, BASEPRI
   117ac:	f383 8811 	msr	BASEPRI, r3
   117b0:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   117b4:	2000      	movs	r0, #0
   117b6:	f7ff ff23 	bl	11600 <z_impl_log_process>
	__asm__ volatile(
   117ba:	f384 8811 	msr	BASEPRI, r4
   117be:	f3bf 8f6f 	isb	sy
}
   117c2:	b003      	add	sp, #12
   117c4:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   117c6:	4a12      	ldr	r2, [pc, #72]	; (11810 <msg_finalize+0xb8>)
   117c8:	681b      	ldr	r3, [r3, #0]
   117ca:	6812      	ldr	r2, [r2, #0]
   117cc:	2a00      	cmp	r2, #0
   117ce:	d0f8      	beq.n	117c2 <msg_finalize+0x6a>
   117d0:	2b01      	cmp	r3, #1
   117d2:	d10a      	bne.n	117ea <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   117d4:	2200      	movs	r2, #0
   117d6:	2300      	movs	r3, #0
   117d8:	e9cd 2300 	strd	r2, r3, [sp]
   117dc:	480d      	ldr	r0, [pc, #52]	; (11814 <msg_finalize+0xbc>)
   117de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   117e2:	2300      	movs	r3, #0
   117e4:	f00d fe80 	bl	1f4e8 <z_impl_k_timer_start>
   117e8:	e7eb      	b.n	117c2 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   117ea:	2b0a      	cmp	r3, #10
   117ec:	d1e9      	bne.n	117c2 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   117ee:	4809      	ldr	r0, [pc, #36]	; (11814 <msg_finalize+0xbc>)
   117f0:	f013 fca3 	bl	2513a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   117f4:	4808      	ldr	r0, [pc, #32]	; (11818 <msg_finalize+0xc0>)
}
   117f6:	b003      	add	sp, #12
   117f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   117fc:	f00c bf14 	b.w	1e628 <z_impl_k_sem_give>
   11800:	200004ac 	.word	0x200004ac
   11804:	20002d54 	.word	0x20002d54
   11808:	20002d48 	.word	0x20002d48
   1180c:	20003345 	.word	0x20003345
   11810:	20002d78 	.word	0x20002d78
   11814:	20001508 	.word	0x20001508
   11818:	20000870 	.word	0x20000870

0001181c <log_process_thread_func>:
{
   1181c:	b510      	push	{r4, lr}
	log_init();
   1181e:	f7ff fe7d 	bl	1151c <log_init>
	return z_impl_k_current_get();
   11822:	f00d fc47 	bl	1f0b4 <z_impl_k_current_get>
	proc_tid = process_tid;
   11826:	4b0c      	ldr	r3, [pc, #48]	; (11858 <log_process_thread_func+0x3c>)
   11828:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1182a:	b130      	cbz	r0, 1183a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1182c:	4b0b      	ldr	r3, [pc, #44]	; (1185c <log_process_thread_func+0x40>)
	    process_tid &&
   1182e:	681b      	ldr	r3, [r3, #0]
   11830:	2b09      	cmp	r3, #9
   11832:	dd02      	ble.n	1183a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   11834:	480a      	ldr	r0, [pc, #40]	; (11860 <log_process_thread_func+0x44>)
   11836:	f00c fef7 	bl	1e628 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1183a:	4c09      	ldr	r4, [pc, #36]	; (11860 <log_process_thread_func+0x44>)
   1183c:	2000      	movs	r0, #0
   1183e:	f7ff fedf 	bl	11600 <z_impl_log_process>
		if (log_process(false) == false) {
   11842:	2800      	cmp	r0, #0
   11844:	d1fa      	bne.n	1183c <log_process_thread_func+0x20>
   11846:	f04f 32ff 	mov.w	r2, #4294967295
   1184a:	f04f 33ff 	mov.w	r3, #4294967295
   1184e:	4620      	mov	r0, r4
   11850:	f00c ff10 	bl	1e674 <z_impl_k_sem_take>
   11854:	e7f2      	b.n	1183c <log_process_thread_func+0x20>
   11856:	bf00      	nop
   11858:	20002d78 	.word	0x20002d78
   1185c:	20002d48 	.word	0x20002d48
   11860:	20000870 	.word	0x20000870

00011864 <z_impl_log_panic>:
{
   11864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   11866:	4f0e      	ldr	r7, [pc, #56]	; (118a0 <z_impl_log_panic+0x3c>)
   11868:	783d      	ldrb	r5, [r7, #0]
   1186a:	b975      	cbnz	r5, 1188a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   1186c:	4c0d      	ldr	r4, [pc, #52]	; (118a4 <z_impl_log_panic+0x40>)
   1186e:	4e0e      	ldr	r6, [pc, #56]	; (118a8 <z_impl_log_panic+0x44>)
	log_init();
   11870:	f7ff fe54 	bl	1151c <log_init>
   11874:	1b36      	subs	r6, r6, r4
   11876:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11878:	42b5      	cmp	r5, r6
   1187a:	db07      	blt.n	1188c <z_impl_log_panic+0x28>
   1187c:	2000      	movs	r0, #0
   1187e:	f7ff febf 	bl	11600 <z_impl_log_process>
		while (log_process(false) == true) {
   11882:	2800      	cmp	r0, #0
   11884:	d1fa      	bne.n	1187c <z_impl_log_panic+0x18>
	panic_mode = true;
   11886:	2301      	movs	r3, #1
   11888:	703b      	strb	r3, [r7, #0]
}
   1188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   1188c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1188e:	795b      	ldrb	r3, [r3, #5]
   11890:	b11b      	cbz	r3, 1189a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   11892:	6823      	ldr	r3, [r4, #0]
   11894:	4620      	mov	r0, r4
   11896:	695b      	ldr	r3, [r3, #20]
   11898:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1189a:	3501      	adds	r5, #1
   1189c:	3410      	adds	r4, #16
   1189e:	e7eb      	b.n	11878 <z_impl_log_panic+0x14>
   118a0:	20003345 	.word	0x20003345
   118a4:	000257dc 	.word	0x000257dc
   118a8:	000257ec 	.word	0x000257ec

000118ac <log_free>:
{
   118ac:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   118ae:	3804      	subs	r0, #4
   118b0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   118b2:	f3bf 8f5b 	dmb	ish
   118b6:	e850 3f00 	ldrex	r3, [r0]
   118ba:	1e5a      	subs	r2, r3, #1
   118bc:	e840 2100 	strex	r1, r2, [r0]
   118c0:	2900      	cmp	r1, #0
   118c2:	d1f8      	bne.n	118b6 <log_free+0xa>
   118c4:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   118c8:	2b01      	cmp	r3, #1
   118ca:	d103      	bne.n	118d4 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   118cc:	4803      	ldr	r0, [pc, #12]	; (118dc <log_free+0x30>)
   118ce:	a901      	add	r1, sp, #4
   118d0:	f013 f8a0 	bl	24a14 <k_mem_slab_free>
}
   118d4:	b003      	add	sp, #12
   118d6:	f85d fb04 	ldr.w	pc, [sp], #4
   118da:	bf00      	nop
   118dc:	20002d5c 	.word	0x20002d5c

000118e0 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   118e0:	2320      	movs	r3, #32
   118e2:	4902      	ldr	r1, [pc, #8]	; (118ec <log_msg_pool_init+0xc>)
   118e4:	4802      	ldr	r0, [pc, #8]	; (118f0 <log_msg_pool_init+0x10>)
   118e6:	461a      	mov	r2, r3
   118e8:	f013 b879 	b.w	249de <k_mem_slab_init>
   118ec:	20008bc8 	.word	0x20008bc8
   118f0:	20002d7c 	.word	0x20002d7c

000118f4 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   118f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   118f6:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   118f8:	4d09      	ldr	r5, [pc, #36]	; (11920 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   118fa:	9301      	str	r3, [sp, #4]
   118fc:	2001      	movs	r0, #1
   118fe:	f7ff fe7f 	bl	11600 <z_impl_log_process>
   11902:	4604      	mov	r4, r0
			z_log_dropped();
   11904:	f7ff fda6 	bl	11454 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   11908:	2200      	movs	r2, #0
   1190a:	2300      	movs	r3, #0
   1190c:	a901      	add	r1, sp, #4
   1190e:	4628      	mov	r0, r5
   11910:	f00c fc96 	bl	1e240 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   11914:	b108      	cbz	r0, 1191a <log_msg_no_space_handle+0x26>
   11916:	2c00      	cmp	r4, #0
   11918:	d1f0      	bne.n	118fc <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   1191a:	9801      	ldr	r0, [sp, #4]
   1191c:	b003      	add	sp, #12
   1191e:	bd30      	pop	{r4, r5, pc}
   11920:	20002d7c 	.word	0x20002d7c

00011924 <log_msg_chunk_alloc>:
{
   11924:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   11926:	2300      	movs	r3, #0
   11928:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1192a:	4807      	ldr	r0, [pc, #28]	; (11948 <log_msg_chunk_alloc+0x24>)
   1192c:	2200      	movs	r2, #0
   1192e:	2300      	movs	r3, #0
   11930:	a901      	add	r1, sp, #4
   11932:	f00c fc85 	bl	1e240 <k_mem_slab_alloc>
	if (err != 0) {
   11936:	b110      	cbz	r0, 1193e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   11938:	f7ff ffdc 	bl	118f4 <log_msg_no_space_handle>
   1193c:	9001      	str	r0, [sp, #4]
}
   1193e:	9801      	ldr	r0, [sp, #4]
   11940:	b003      	add	sp, #12
   11942:	f85d fb04 	ldr.w	pc, [sp], #4
   11946:	bf00      	nop
   11948:	20002d7c 	.word	0x20002d7c

0001194c <msg_free>:
{
   1194c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1194e:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   11950:	7a45      	ldrb	r5, [r0, #9]
{
   11952:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   11954:	092d      	lsrs	r5, r5, #4
{
   11956:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   11958:	07d8      	lsls	r0, r3, #31
   1195a:	d41c      	bmi.n	11996 <msg_free+0x4a>
   1195c:	b1dd      	cbz	r5, 11996 <msg_free+0x4a>
		uint32_t smask = 0U;
   1195e:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   11960:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   11962:	9801      	ldr	r0, [sp, #4]
   11964:	4631      	mov	r1, r6
   11966:	f00e fcbb 	bl	202e0 <log_msg_arg_get>
   1196a:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   1196c:	f7ff fe38 	bl	115e0 <log_is_strdup>
   11970:	b170      	cbz	r0, 11990 <msg_free+0x44>
				if (smask == 0U) {
   11972:	b934      	cbnz	r4, 11982 <msg_free+0x36>
					smask = z_log_get_s_mask(
   11974:	9b01      	ldr	r3, [sp, #4]
   11976:	4629      	mov	r1, r5
   11978:	6918      	ldr	r0, [r3, #16]
   1197a:	f00e fba7 	bl	200cc <z_log_get_s_mask>
					if (smask == 0U) {
   1197e:	4604      	mov	r4, r0
   11980:	b148      	cbz	r0, 11996 <msg_free+0x4a>
				if (smask & BIT(i)) {
   11982:	fa24 f306 	lsr.w	r3, r4, r6
   11986:	07d9      	lsls	r1, r3, #31
   11988:	d502      	bpl.n	11990 <msg_free+0x44>
					log_free(buf);
   1198a:	4638      	mov	r0, r7
   1198c:	f7ff ff8e 	bl	118ac <log_free>
		for (i = 0U; i < nargs; i++) {
   11990:	3601      	adds	r6, #1
   11992:	42ae      	cmp	r6, r5
   11994:	d3e5      	bcc.n	11962 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   11996:	9b01      	ldr	r3, [sp, #4]
   11998:	7a1a      	ldrb	r2, [r3, #8]
   1199a:	0792      	lsls	r2, r2, #30
   1199c:	d504      	bpl.n	119a8 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   1199e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   119a0:	4c08      	ldr	r4, [pc, #32]	; (119c4 <msg_free+0x78>)
   119a2:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   119a4:	9b03      	ldr	r3, [sp, #12]
   119a6:	b92b      	cbnz	r3, 119b4 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   119a8:	4806      	ldr	r0, [pc, #24]	; (119c4 <msg_free+0x78>)
   119aa:	a901      	add	r1, sp, #4
   119ac:	f013 f832 	bl	24a14 <k_mem_slab_free>
}
   119b0:	b005      	add	sp, #20
   119b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   119b4:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   119b6:	a903      	add	r1, sp, #12
   119b8:	4620      	mov	r0, r4
   119ba:	f013 f82b 	bl	24a14 <k_mem_slab_free>
		cont = next;
   119be:	9503      	str	r5, [sp, #12]
   119c0:	e7f0      	b.n	119a4 <msg_free+0x58>
   119c2:	bf00      	nop
   119c4:	20002d7c 	.word	0x20002d7c

000119c8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   119c8:	b40e      	push	{r1, r2, r3}
   119ca:	b503      	push	{r0, r1, lr}
   119cc:	ab03      	add	r3, sp, #12
   119ce:	4601      	mov	r1, r0
   119d0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   119d4:	4804      	ldr	r0, [pc, #16]	; (119e8 <print_formatted+0x20>)
	va_start(args, fmt);
   119d6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   119d8:	f7ff f910 	bl	10bfc <cbvprintf>
	va_end(args);

	return length;
}
   119dc:	b002      	add	sp, #8
   119de:	f85d eb04 	ldr.w	lr, [sp], #4
   119e2:	b003      	add	sp, #12
   119e4:	4770      	bx	lr
   119e6:	bf00      	nop
   119e8:	00020793 	.word	0x00020793

000119ec <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   119ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f0:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   119f2:	f011 0602 	ands.w	r6, r1, #2
{
   119f6:	9205      	str	r2, [sp, #20]
   119f8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   119fc:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
   11a00:	4607      	mov	r7, r0
   11a02:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   11a04:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   11a08:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   11a0c:	d006      	beq.n	11a1c <prefix_print+0x30>
	if (!format) {
   11a0e:	f011 0f44 	tst.w	r1, #68	; 0x44
   11a12:	d138      	bne.n	11a86 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   11a14:	4932      	ldr	r1, [pc, #200]	; (11ae0 <prefix_print+0xf4>)
   11a16:	f7ff ffd7 	bl	119c8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   11a1a:	4606      	mov	r6, r0
	if (color) {
   11a1c:	f1ba 0f00 	cmp.w	sl, #0
   11a20:	d00a      	beq.n	11a38 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   11a22:	4b30      	ldr	r3, [pc, #192]	; (11ae4 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
   11a24:	4930      	ldr	r1, [pc, #192]	; (11ae8 <prefix_print+0xfc>)
		const char *log_color = start && (colors[level] != NULL) ?
   11a26:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   11a2a:	4b30      	ldr	r3, [pc, #192]	; (11aec <prefix_print+0x100>)
   11a2c:	4638      	mov	r0, r7
   11a2e:	2a00      	cmp	r2, #0
   11a30:	bf08      	it	eq
   11a32:	461a      	moveq	r2, r3
   11a34:	f7ff ffc8 	bl	119c8 <print_formatted>
	if (level_on) {
   11a38:	b13d      	cbz	r5, 11a4a <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   11a3a:	4b2d      	ldr	r3, [pc, #180]	; (11af0 <prefix_print+0x104>)
   11a3c:	492d      	ldr	r1, [pc, #180]	; (11af4 <prefix_print+0x108>)
   11a3e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   11a42:	4638      	mov	r0, r7
   11a44:	f7ff ffc0 	bl	119c8 <print_formatted>
   11a48:	4605      	mov	r5, r0
	if (source_id >= 0) {
   11a4a:	f1b9 0f00 	cmp.w	r9, #0
   11a4e:	db16      	blt.n	11a7e <prefix_print+0x92>
		total += print_formatted(output,
   11a50:	9b05      	ldr	r3, [sp, #20]
   11a52:	2b00      	cmp	r3, #0
   11a54:	d041      	beq.n	11ada <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   11a56:	2301      	movs	r3, #1
   11a58:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   11a5c:	4b26      	ldr	r3, [pc, #152]	; (11af8 <prefix_print+0x10c>)
   11a5e:	4c27      	ldr	r4, [pc, #156]	; (11afc <prefix_print+0x110>)
   11a60:	f018 0f10 	tst.w	r8, #16
   11a64:	bf18      	it	ne
   11a66:	461c      	movne	r4, r3
   11a68:	4649      	mov	r1, r9
   11a6a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   11a6e:	f7ff fd2d 	bl	114cc <log_source_name_get>
   11a72:	4621      	mov	r1, r4
   11a74:	4602      	mov	r2, r0
   11a76:	4638      	mov	r0, r7
   11a78:	f7ff ffa6 	bl	119c8 <print_formatted>
   11a7c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   11a7e:	19a8      	adds	r0, r5, r6
   11a80:	b007      	add	sp, #28
   11a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   11a86:	4b1e      	ldr	r3, [pc, #120]	; (11b00 <prefix_print+0x114>)
   11a88:	6819      	ldr	r1, [r3, #0]
   11a8a:	b321      	cbz	r1, 11ad6 <prefix_print+0xea>
		timestamp /= timestamp_div;
   11a8c:	4b1d      	ldr	r3, [pc, #116]	; (11b04 <prefix_print+0x118>)
   11a8e:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   11a92:	681b      	ldr	r3, [r3, #0]
   11a94:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
   11a98:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		total_seconds = timestamp / freq;
   11a9c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   11aa0:	fbb4 f2fc 	udiv	r2, r4, ip
   11aa4:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
   11aa8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   11aac:	4374      	muls	r4, r6
		mins = seconds / 60U;
   11aae:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11ab2:	fbb4 fbf1 	udiv	fp, r4, r1
   11ab6:	fb01 441b 	mls	r4, r1, fp, r4
   11aba:	4374      	muls	r4, r6
		mins = seconds / 60U;
   11abc:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11ac0:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   11ac4:	e9cd b101 	strd	fp, r1, [sp, #4]
   11ac8:	fb0e c113 	mls	r1, lr, r3, ip
   11acc:	9100      	str	r1, [sp, #0]
   11ace:	490e      	ldr	r1, [pc, #56]	; (11b08 <prefix_print+0x11c>)
   11ad0:	f7ff ff7a 	bl	119c8 <print_formatted>
   11ad4:	e7a1      	b.n	11a1a <prefix_print+0x2e>
		length = 0;
   11ad6:	4608      	mov	r0, r1
   11ad8:	e79f      	b.n	11a1a <prefix_print+0x2e>
		total += print_formatted(output,
   11ada:	4c08      	ldr	r4, [pc, #32]	; (11afc <prefix_print+0x110>)
   11adc:	e7c4      	b.n	11a68 <prefix_print+0x7c>
   11ade:	bf00      	nop
   11ae0:	00026435 	.word	0x00026435
   11ae4:	00025958 	.word	0x00025958
   11ae8:	00027307 	.word	0x00027307
   11aec:	00026427 	.word	0x00026427
   11af0:	0002596c 	.word	0x0002596c
   11af4:	0002645a 	.word	0x0002645a
   11af8:	00026431 	.word	0x00026431
   11afc:	0002642c 	.word	0x0002642c
   11b00:	20002d98 	.word	0x20002d98
   11b04:	20002d9c 	.word	0x20002d9c
   11b08:	0002643e 	.word	0x0002643e

00011b0c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   11b0c:	b538      	push	{r3, r4, r5, lr}
   11b0e:	460c      	mov	r4, r1
	if (color) {
   11b10:	07e1      	lsls	r1, r4, #31
{
   11b12:	4605      	mov	r5, r0
	if (color) {
   11b14:	d503      	bpl.n	11b1e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   11b16:	4a08      	ldr	r2, [pc, #32]	; (11b38 <postfix_print+0x2c>)
   11b18:	4908      	ldr	r1, [pc, #32]	; (11b3c <postfix_print+0x30>)
   11b1a:	f7ff ff55 	bl	119c8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   11b1e:	06e2      	lsls	r2, r4, #27
   11b20:	d408      	bmi.n	11b34 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   11b22:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   11b24:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   11b26:	bf4c      	ite	mi
   11b28:	4905      	ldrmi	r1, [pc, #20]	; (11b40 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   11b2a:	4906      	ldrpl	r1, [pc, #24]	; (11b44 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   11b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   11b30:	f7ff bf4a 	b.w	119c8 <print_formatted>
}
   11b34:	bd38      	pop	{r3, r4, r5, pc}
   11b36:	bf00      	nop
   11b38:	00026427 	.word	0x00026427
   11b3c:	00027307 	.word	0x00027307
   11b40:	00026461 	.word	0x00026461
   11b44:	00026460 	.word	0x00026460

00011b48 <hexdump_line_print>:
{
   11b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b4c:	461d      	mov	r5, r3
   11b4e:	9b08      	ldr	r3, [sp, #32]
   11b50:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   11b52:	06da      	lsls	r2, r3, #27
{
   11b54:	4604      	mov	r4, r0
   11b56:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   11b58:	d405      	bmi.n	11b66 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   11b5a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   11b5c:	bf4c      	ite	mi
   11b5e:	492a      	ldrmi	r1, [pc, #168]	; (11c08 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   11b60:	492a      	ldrpl	r1, [pc, #168]	; (11c0c <hexdump_line_print+0xc4>)
   11b62:	f7ff ff31 	bl	119c8 <print_formatted>
		print_formatted(output, " ");
   11b66:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 11c14 <hexdump_line_print+0xcc>
{
   11b6a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   11b6e:	45a8      	cmp	r8, r5
   11b70:	db2a      	blt.n	11bc8 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
   11b72:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 11c18 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   11b76:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 11c1c <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   11b7a:	f8df a098 	ldr.w	sl, [pc, #152]	; 11c14 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11b7e:	2500      	movs	r5, #0
		if (i < length) {
   11b80:	42bd      	cmp	r5, r7
   11b82:	d22f      	bcs.n	11be4 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   11b84:	5d72      	ldrb	r2, [r6, r5]
   11b86:	4649      	mov	r1, r9
   11b88:	4620      	mov	r0, r4
   11b8a:	f7ff ff1d 	bl	119c8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11b8e:	3501      	adds	r5, #1
   11b90:	2d10      	cmp	r5, #16
   11b92:	d120      	bne.n	11bd6 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   11b94:	491e      	ldr	r1, [pc, #120]	; (11c10 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
   11b96:	f8df 807c 	ldr.w	r8, [pc, #124]	; 11c14 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   11b9a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 11c20 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
   11b9e:	4620      	mov	r0, r4
   11ba0:	f7ff ff12 	bl	119c8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11ba4:	2500      	movs	r5, #0
		if (i < length) {
   11ba6:	42af      	cmp	r7, r5
   11ba8:	d928      	bls.n	11bfc <hexdump_line_print+0xb4>
			char c = (char)data[i];
   11baa:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   11bac:	f1a2 0320 	sub.w	r3, r2, #32
   11bb0:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   11bb2:	bf28      	it	cs
   11bb4:	222e      	movcs	r2, #46	; 0x2e
   11bb6:	4649      	mov	r1, r9
   11bb8:	4620      	mov	r0, r4
   11bba:	f7ff ff05 	bl	119c8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11bbe:	3501      	adds	r5, #1
   11bc0:	2d10      	cmp	r5, #16
   11bc2:	d114      	bne.n	11bee <hexdump_line_print+0xa6>
}
   11bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   11bc8:	4649      	mov	r1, r9
   11bca:	4620      	mov	r0, r4
   11bcc:	f7ff fefc 	bl	119c8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   11bd0:	f108 0801 	add.w	r8, r8, #1
   11bd4:	e7cb      	b.n	11b6e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   11bd6:	076a      	lsls	r2, r5, #29
   11bd8:	d1d2      	bne.n	11b80 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   11bda:	4651      	mov	r1, sl
   11bdc:	4620      	mov	r0, r4
   11bde:	f7ff fef3 	bl	119c8 <print_formatted>
   11be2:	e7cd      	b.n	11b80 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   11be4:	4641      	mov	r1, r8
   11be6:	4620      	mov	r0, r4
   11be8:	f7ff feee 	bl	119c8 <print_formatted>
   11bec:	e7cf      	b.n	11b8e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   11bee:	076b      	lsls	r3, r5, #29
   11bf0:	d1d9      	bne.n	11ba6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   11bf2:	4641      	mov	r1, r8
   11bf4:	4620      	mov	r0, r4
   11bf6:	f7ff fee7 	bl	119c8 <print_formatted>
   11bfa:	e7d4      	b.n	11ba6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   11bfc:	4641      	mov	r1, r8
   11bfe:	4620      	mov	r0, r4
   11c00:	f7ff fee2 	bl	119c8 <print_formatted>
   11c04:	e7db      	b.n	11bbe <hexdump_line_print+0x76>
   11c06:	bf00      	nop
   11c08:	00026461 	.word	0x00026461
   11c0c:	00026460 	.word	0x00026460
   11c10:	0002646d 	.word	0x0002646d
   11c14:	0002646b 	.word	0x0002646b
   11c18:	00026469 	.word	0x00026469
   11c1c:	00026463 	.word	0x00026463
   11c20:	0002646f 	.word	0x0002646f

00011c24 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   11c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   11c28:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   11c2a:	f013 0807 	ands.w	r8, r3, #7
{
   11c2e:	4617      	mov	r7, r2
   11c30:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11c32:	7a0a      	ldrb	r2, [r1, #8]
   11c34:	4605      	mov	r5, r0
   11c36:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   11c38:	d021      	beq.n	11c7e <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
   11c3a:	8949      	ldrh	r1, [r1, #10]
   11c3c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11c40:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11c44:	43d2      	mvns	r2, r2
   11c46:	e9cd 8300 	strd	r8, r3, [sp]
   11c4a:	9102      	str	r1, [sp, #8]
   11c4c:	68f3      	ldr	r3, [r6, #12]
   11c4e:	f002 0201 	and.w	r2, r2, #1
   11c52:	4639      	mov	r1, r7
   11c54:	f7ff feca 	bl	119ec <prefix_print>
   11c58:	4681      	mov	r9, r0
   11c5a:	7a34      	ldrb	r4, [r6, #8]
   11c5c:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   11c5e:	f014 0401 	ands.w	r4, r4, #1
   11c62:	d00e      	beq.n	11c82 <log_output_msg_process+0x5e>
		std_print(msg, output);
   11c64:	4629      	mov	r1, r5
   11c66:	4630      	mov	r0, r6
   11c68:	f00e fc29 	bl	204be <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   11c6c:	f1b8 0f00 	cmp.w	r8, #0
   11c70:	d02b      	beq.n	11cca <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
   11c72:	4642      	mov	r2, r8
   11c74:	4639      	mov	r1, r7
   11c76:	4628      	mov	r0, r5
   11c78:	f7ff ff48 	bl	11b0c <postfix_print>
   11c7c:	e025      	b.n	11cca <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   11c7e:	46c1      	mov	r9, r8
   11c80:	e7eb      	b.n	11c5a <log_output_msg_process+0x36>
	} else if (raw_string) {
   11c82:	f1b8 0f00 	cmp.w	r8, #0
   11c86:	d126      	bne.n	11cd6 <log_output_msg_process+0xb2>
	size_t offset = 0;
   11c88:	4627      	mov	r7, r4
		length = output->size;
   11c8a:	68eb      	ldr	r3, [r5, #12]
   11c8c:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   11c8e:	aa06      	add	r2, sp, #24
   11c90:	463b      	mov	r3, r7
   11c92:	68a9      	ldr	r1, [r5, #8]
   11c94:	4630      	mov	r0, r6
   11c96:	f00e fbfe 	bl	20496 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   11c9a:	9a06      	ldr	r2, [sp, #24]
   11c9c:	686b      	ldr	r3, [r5, #4]
   11c9e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   11ca0:	b13a      	cbz	r2, 11cb2 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
   11ca2:	68ab      	ldr	r3, [r5, #8]
   11ca4:	4413      	add	r3, r2
   11ca6:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   11caa:	f1a4 030a 	sub.w	r3, r4, #10
   11cae:	425c      	negs	r4, r3
   11cb0:	415c      	adcs	r4, r3
		log_output_flush(output);
   11cb2:	4628      	mov	r0, r5
   11cb4:	f00e fd60 	bl	20778 <log_output_flush>
		offset += length;
   11cb8:	9b06      	ldr	r3, [sp, #24]
   11cba:	441f      	add	r7, r3
	} while (length > 0);
   11cbc:	2b00      	cmp	r3, #0
   11cbe:	d1e4      	bne.n	11c8a <log_output_msg_process+0x66>
	if (eol) {
   11cc0:	b11c      	cbz	r4, 11cca <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
   11cc2:	4914      	ldr	r1, [pc, #80]	; (11d14 <log_output_msg_process+0xf0>)
   11cc4:	4628      	mov	r0, r5
   11cc6:	f7ff fe7f 	bl	119c8 <print_formatted>
	}

	log_output_flush(output);
   11cca:	4628      	mov	r0, r5
   11ccc:	f00e fd54 	bl	20778 <log_output_flush>
}
   11cd0:	b00a      	add	sp, #40	; 0x28
   11cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   11cd6:	4630      	mov	r0, r6
   11cd8:	f00e fb34 	bl	20344 <log_msg_str_get>
   11cdc:	490e      	ldr	r1, [pc, #56]	; (11d18 <log_output_msg_process+0xf4>)
   11cde:	4602      	mov	r2, r0
   11ce0:	4628      	mov	r0, r5
   11ce2:	f7ff fe71 	bl	119c8 <print_formatted>
		length = sizeof(buf);
   11ce6:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   11cea:	aa05      	add	r2, sp, #20
   11cec:	4623      	mov	r3, r4
   11cee:	a906      	add	r1, sp, #24
   11cf0:	4630      	mov	r0, r6
		length = sizeof(buf);
   11cf2:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   11cf6:	f00e fbce 	bl	20496 <log_msg_hexdump_data_get>
		if (length) {
   11cfa:	9a05      	ldr	r2, [sp, #20]
   11cfc:	2a00      	cmp	r2, #0
   11cfe:	d0b8      	beq.n	11c72 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
   11d00:	464b      	mov	r3, r9
   11d02:	9700      	str	r7, [sp, #0]
   11d04:	a906      	add	r1, sp, #24
   11d06:	4628      	mov	r0, r5
   11d08:	f7ff ff1e 	bl	11b48 <hexdump_line_print>
			offset += length;
   11d0c:	9b05      	ldr	r3, [sp, #20]
   11d0e:	441c      	add	r4, r3
		length = sizeof(buf);
   11d10:	e7eb      	b.n	11cea <log_output_msg_process+0xc6>
   11d12:	bf00      	nop
   11d14:	00026472 	.word	0x00026472
   11d18:	00027307 	.word	0x00027307

00011d1c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   11d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11d1e:	f242 730f 	movw	r3, #9999	; 0x270f
   11d22:	428b      	cmp	r3, r1
   11d24:	bf28      	it	cs
   11d26:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   11d28:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11d2a:	4a0f      	ldr	r2, [pc, #60]	; (11d68 <log_output_dropped_process+0x4c>)
{
   11d2c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11d2e:	2105      	movs	r1, #5
   11d30:	4668      	mov	r0, sp
   11d32:	f00d fdb3 	bl	1f89c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   11d36:	6863      	ldr	r3, [r4, #4]
   11d38:	490c      	ldr	r1, [pc, #48]	; (11d6c <log_output_dropped_process+0x50>)
   11d3a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11d3c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   11d3e:	220b      	movs	r2, #11
   11d40:	4628      	mov	r0, r5
   11d42:	f00e fbaf 	bl	204a4 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   11d46:	6863      	ldr	r3, [r4, #4]
   11d48:	4632      	mov	r2, r6
   11d4a:	4669      	mov	r1, sp
   11d4c:	4628      	mov	r0, r5
   11d4e:	685b      	ldr	r3, [r3, #4]
   11d50:	f00e fba8 	bl	204a4 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   11d54:	6863      	ldr	r3, [r4, #4]
   11d56:	4906      	ldr	r1, [pc, #24]	; (11d70 <log_output_dropped_process+0x54>)
   11d58:	685b      	ldr	r3, [r3, #4]
   11d5a:	221b      	movs	r2, #27
   11d5c:	4628      	mov	r0, r5
   11d5e:	f00e fba1 	bl	204a4 <buffer_write>
		     output->control_block->ctx);
}
   11d62:	b002      	add	sp, #8
   11d64:	bd70      	pop	{r4, r5, r6, pc}
   11d66:	bf00      	nop
   11d68:	00028648 	.word	0x00028648
   11d6c:	000264b0 	.word	0x000264b0
   11d70:	00026494 	.word	0x00026494

00011d74 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   11d74:	4a08      	ldr	r2, [pc, #32]	; (11d98 <log_output_timestamp_freq_set+0x24>)
{
   11d76:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   11d78:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   11d7a:	4c08      	ldr	r4, [pc, #32]	; (11d9c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   11d7c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   11d7e:	2100      	movs	r1, #0
   11d80:	42a0      	cmp	r0, r4
   11d82:	d804      	bhi.n	11d8e <log_output_timestamp_freq_set+0x1a>
   11d84:	b101      	cbz	r1, 11d88 <log_output_timestamp_freq_set+0x14>
   11d86:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   11d88:	4b05      	ldr	r3, [pc, #20]	; (11da0 <log_output_timestamp_freq_set+0x2c>)
   11d8a:	6018      	str	r0, [r3, #0]
}
   11d8c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   11d8e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   11d90:	005b      	lsls	r3, r3, #1
   11d92:	2101      	movs	r1, #1
   11d94:	e7f4      	b.n	11d80 <log_output_timestamp_freq_set+0xc>
   11d96:	bf00      	nop
   11d98:	20002d9c 	.word	0x20002d9c
   11d9c:	000f4240 	.word	0x000f4240
   11da0:	20002d98 	.word	0x20002d98

00011da4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   11da4:	4b01      	ldr	r3, [pc, #4]	; (11dac <log_backend_rtt_init+0x8>)
   11da6:	2201      	movs	r2, #1
   11da8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   11daa:	4770      	bx	lr
   11dac:	20003356 	.word	0x20003356

00011db0 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   11db0:	4b02      	ldr	r3, [pc, #8]	; (11dbc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   11db2:	4803      	ldr	r0, [pc, #12]	; (11dc0 <panic+0x10>)
   11db4:	2201      	movs	r2, #1
   11db6:	701a      	strb	r2, [r3, #0]
   11db8:	f00e bcde 	b.w	20778 <log_output_flush>
   11dbc:	20003357 	.word	0x20003357
   11dc0:	0002599c 	.word	0x0002599c

00011dc4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   11dc4:	4801      	ldr	r0, [pc, #4]	; (11dcc <dropped+0x8>)
   11dc6:	f7ff bfa9 	b.w	11d1c <log_output_dropped_process>
   11dca:	bf00      	nop
   11dcc:	0002599c 	.word	0x0002599c

00011dd0 <put>:
{
   11dd0:	b510      	push	{r4, lr}
	log_msg_get(msg);
   11dd2:	4608      	mov	r0, r1
   11dd4:	460c      	mov	r4, r1
   11dd6:	f00e fa73 	bl	202c0 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   11dda:	4805      	ldr	r0, [pc, #20]	; (11df0 <put+0x20>)
   11ddc:	4621      	mov	r1, r4
   11dde:	220f      	movs	r2, #15
   11de0:	f7ff ff20 	bl	11c24 <log_output_msg_process>
	log_msg_put(msg);
   11de4:	4620      	mov	r0, r4
}
   11de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11dea:	f00e ba98 	b.w	2031e <log_msg_put>
   11dee:	bf00      	nop
   11df0:	0002599c 	.word	0x0002599c

00011df4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11df4:	4b05      	ldr	r3, [pc, #20]	; (11e0c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   11df6:	781b      	ldrb	r3, [r3, #0]
   11df8:	b11b      	cbz	r3, 11e02 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   11dfa:	f241 3088 	movw	r0, #5000	; 0x1388
   11dfe:	f013 b963 	b.w	250c8 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   11e02:	20a4      	movs	r0, #164	; 0xa4
   11e04:	2100      	movs	r1, #0
   11e06:	f00d b933 	b.w	1f070 <z_impl_k_sleep>
   11e0a:	bf00      	nop
   11e0c:	20003357 	.word	0x20003357

00011e10 <data_out_block_mode>:
{
   11e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11e14:	f8df 9094 	ldr.w	r9, [pc, #148]	; 11eac <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   11e18:	f8df a094 	ldr.w	sl, [pc, #148]	; 11eb0 <data_out_block_mode+0xa0>
{
   11e1c:	4680      	mov	r8, r0
   11e1e:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   11e20:	2404      	movs	r4, #4
   11e22:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
   11e24:	f899 5000 	ldrb.w	r5, [r9]
   11e28:	b9cd      	cbnz	r5, 11e5e <data_out_block_mode+0x4e>
   11e2a:	f04f 33ff 	mov.w	r3, #4294967295
   11e2e:	f04f 32ff 	mov.w	r2, #4294967295
   11e32:	4650      	mov	r0, sl
   11e34:	f00c fb06 	bl	1e444 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   11e38:	463a      	mov	r2, r7
   11e3a:	4641      	mov	r1, r8
   11e3c:	4628      	mov	r0, r5
   11e3e:	f00b ffe3 	bl	1de08 <SEGGER_RTT_WriteSkipNoLock>
   11e42:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   11e44:	4650      	mov	r0, sl
   11e46:	f00c fb75 	bl	1e534 <z_impl_k_mutex_unlock>
		if (ret) {
   11e4a:	4d17      	ldr	r5, [pc, #92]	; (11ea8 <data_out_block_mode+0x98>)
   11e4c:	b1fe      	cbz	r6, 11e8e <data_out_block_mode+0x7e>
	host_present = true;
   11e4e:	2301      	movs	r3, #1
   11e50:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   11e52:	f89b 3000 	ldrb.w	r3, [fp]
   11e56:	b96b      	cbnz	r3, 11e74 <data_out_block_mode+0x64>
}
   11e58:	4638      	mov	r0, r7
   11e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   11e5e:	463a      	mov	r2, r7
   11e60:	4641      	mov	r1, r8
   11e62:	2000      	movs	r0, #0
   11e64:	f00b ffd0 	bl	1de08 <SEGGER_RTT_WriteSkipNoLock>
   11e68:	4606      	mov	r6, r0
   11e6a:	e7ee      	b.n	11e4a <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   11e6c:	b95c      	cbnz	r4, 11e86 <data_out_block_mode+0x76>
		host_present = false;
   11e6e:	702c      	strb	r4, [r5, #0]
   11e70:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   11e74:	2000      	movs	r0, #0
   11e76:	f00c f847 	bl	1df08 <SEGGER_RTT_HasDataUp>
   11e7a:	2800      	cmp	r0, #0
   11e7c:	d0ec      	beq.n	11e58 <data_out_block_mode+0x48>
   11e7e:	782b      	ldrb	r3, [r5, #0]
   11e80:	2b00      	cmp	r3, #0
   11e82:	d1f3      	bne.n	11e6c <data_out_block_mode+0x5c>
   11e84:	e7e8      	b.n	11e58 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   11e86:	3c01      	subs	r4, #1
   11e88:	f7ff ffb4 	bl	11df4 <on_failed_write.part.0>
   11e8c:	e7f2      	b.n	11e74 <data_out_block_mode+0x64>
		} else if (host_present) {
   11e8e:	782b      	ldrb	r3, [r5, #0]
   11e90:	b113      	cbz	r3, 11e98 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   11e92:	3c01      	subs	r4, #1
   11e94:	d104      	bne.n	11ea0 <data_out_block_mode+0x90>
		host_present = false;
   11e96:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   11e98:	782b      	ldrb	r3, [r5, #0]
   11e9a:	2b00      	cmp	r3, #0
   11e9c:	d1c2      	bne.n	11e24 <data_out_block_mode+0x14>
   11e9e:	e7db      	b.n	11e58 <data_out_block_mode+0x48>
   11ea0:	f7ff ffa8 	bl	11df4 <on_failed_write.part.0>
   11ea4:	e7f8      	b.n	11e98 <data_out_block_mode+0x88>
   11ea6:	bf00      	nop
   11ea8:	20003356 	.word	0x20003356
   11eac:	20003357 	.word	0x20003357
   11eb0:	20000830 	.word	0x20000830

00011eb4 <blvl_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   11eb4:	4b07      	ldr	r3, [pc, #28]	; (11ed4 <blvl_ccc_cfg_changed+0x20>)
   11eb6:	4a08      	ldr	r2, [pc, #32]	; (11ed8 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   11eb8:	4808      	ldr	r0, [pc, #32]	; (11edc <blvl_ccc_cfg_changed+0x28>)
   11eba:	1ad2      	subs	r2, r2, r3
   11ebc:	08d2      	lsrs	r2, r2, #3
   11ebe:	4b08      	ldr	r3, [pc, #32]	; (11ee0 <blvl_ccc_cfg_changed+0x2c>)
   11ec0:	0192      	lsls	r2, r2, #6
   11ec2:	2901      	cmp	r1, #1
   11ec4:	bf14      	ite	ne
   11ec6:	4601      	movne	r1, r0
   11ec8:	4619      	moveq	r1, r3
   11eca:	f042 0203 	orr.w	r2, r2, #3
   11ece:	4805      	ldr	r0, [pc, #20]	; (11ee4 <blvl_ccc_cfg_changed+0x30>)
   11ed0:	f00e b929 	b.w	20126 <log_1>
   11ed4:	000256c4 	.word	0x000256c4
   11ed8:	000256c4 	.word	0x000256c4
   11edc:	000260f4 	.word	0x000260f4
   11ee0:	000260ec 	.word	0x000260ec
   11ee4:	000264ee 	.word	0x000264ee

00011ee8 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   11ee8:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   11eea:	4c08      	ldr	r4, [pc, #32]	; (11f0c <read_blvl+0x24>)
{
   11eec:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   11eee:	7824      	ldrb	r4, [r4, #0]
   11ef0:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   11ef4:	2401      	movs	r4, #1
   11ef6:	9402      	str	r4, [sp, #8]
   11ef8:	f10d 0417 	add.w	r4, sp, #23
   11efc:	9401      	str	r4, [sp, #4]
   11efe:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   11f02:	9400      	str	r4, [sp, #0]
   11f04:	f011 fd07 	bl	23916 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   11f08:	b006      	add	sp, #24
   11f0a:	bd10      	pop	{r4, pc}
   11f0c:	20000733 	.word	0x20000733

00011f10 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   11f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11f14:	460f      	mov	r7, r1
   11f16:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11f18:	2108      	movs	r1, #8
   11f1a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   11f1c:	f00e fd2c 	bl	20978 <nvs_al_size.isra.0>

	*addr -= ate_size;
   11f20:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   11f22:	4b13      	ldr	r3, [pc, #76]	; (11f70 <nvs_recover_last_ate+0x60>)
	*addr -= ate_size;
   11f24:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11f26:	4680      	mov	r8, r0
	*addr -= ate_size;
   11f28:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   11f2a:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   11f2e:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   11f30:	42ac      	cmp	r4, r5
   11f32:	d803      	bhi.n	11f3c <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   11f34:	2000      	movs	r0, #0
}
   11f36:	b003      	add	sp, #12
   11f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11f3c:	2308      	movs	r3, #8
   11f3e:	466a      	mov	r2, sp
   11f40:	4621      	mov	r1, r4
   11f42:	4630      	mov	r0, r6
   11f44:	f00e fc7b 	bl	2083e <nvs_flash_rd>
		if (rc) {
   11f48:	2800      	cmp	r0, #0
   11f4a:	d1f4      	bne.n	11f36 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   11f4c:	4669      	mov	r1, sp
   11f4e:	4630      	mov	r0, r6
   11f50:	f00e fd1c 	bl	2098c <nvs_ate_valid>
   11f54:	b140      	cbz	r0, 11f68 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   11f56:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11f5a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   11f5e:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   11f60:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   11f64:	4413      	add	r3, r2
   11f66:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   11f68:	eba4 0408 	sub.w	r4, r4, r8
   11f6c:	e7e0      	b.n	11f30 <nvs_recover_last_ate+0x20>
   11f6e:	bf00      	nop
   11f70:	ffff0000 	.word	0xffff0000

00011f74 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   11f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f78:	4605      	mov	r5, r0
   11f7a:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11f7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   11f7e:	2108      	movs	r1, #8
   11f80:	f00e fcfa 	bl	20978 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   11f84:	686b      	ldr	r3, [r5, #4]
   11f86:	0c1b      	lsrs	r3, r3, #16
   11f88:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11f8a:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
   11f8c:	a903      	add	r1, sp, #12
   11f8e:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   11f90:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   11f92:	f00e fd15 	bl	209c0 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   11f96:	9b03      	ldr	r3, [sp, #12]
   11f98:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11f9a:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   11f9c:	4419      	add	r1, r3
   11f9e:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11fa2:	2308      	movs	r3, #8
   11fa4:	4632      	mov	r2, r6
   11fa6:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
   11fa8:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11faa:	f00e fc48 	bl	2083e <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   11fae:	1e04      	subs	r4, r0, #0
   11fb0:	f2c0 809c 	blt.w	120ec <nvs_gc+0x178>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   11fb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   11fb6:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   11fb8:	2300      	movs	r3, #0
		if (data8[i] != value) {
   11fba:	5cf1      	ldrb	r1, [r6, r3]
   11fbc:	4291      	cmp	r1, r2
   11fbe:	f040 8083 	bne.w	120c8 <nvs_gc+0x154>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   11fc2:	3301      	adds	r3, #1
   11fc4:	2b08      	cmp	r3, #8
   11fc6:	d1f8      	bne.n	11fba <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
   11fc8:	9903      	ldr	r1, [sp, #12]
   11fca:	4628      	mov	r0, r5
   11fcc:	f00e fc94 	bl	208f8 <nvs_flash_erase_sector>
   11fd0:	4604      	mov	r4, r0
		if (rc) {
   11fd2:	e08b      	b.n	120ec <nvs_gc+0x178>
	}

	stop_addr = gc_addr - ate_size;

	if (nvs_close_ate_valid(fs, &close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
   11fd4:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   11fd6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   11fda:	0c1b      	lsrs	r3, r3, #16
   11fdc:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   11fde:	4413      	add	r3, r2
   11fe0:	9304      	str	r3, [sp, #16]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   11fe2:	f8df b110 	ldr.w	fp, [pc, #272]	; 120f4 <nvs_gc+0x180>
		gc_prev_addr = gc_addr;
   11fe6:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   11fea:	aa08      	add	r2, sp, #32
   11fec:	a904      	add	r1, sp, #16
   11fee:	4628      	mov	r0, r5
   11ff0:	f00e fd55 	bl	20a9e <nvs_prev_ate>
		if (rc) {
   11ff4:	4604      	mov	r4, r0
   11ff6:	2800      	cmp	r0, #0
   11ff8:	d178      	bne.n	120ec <nvs_gc+0x178>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   11ffa:	a908      	add	r1, sp, #32
   11ffc:	4628      	mov	r0, r5
   11ffe:	f00e fcc5 	bl	2098c <nvs_ate_valid>
   12002:	2800      	cmp	r0, #0
   12004:	d036      	beq.n	12074 <nvs_gc+0x100>
		wlk_addr = fs->ate_wra;
   12006:	686b      	ldr	r3, [r5, #4]
   12008:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1200a:	aa0a      	add	r2, sp, #40	; 0x28
   1200c:	a905      	add	r1, sp, #20
   1200e:	4628      	mov	r0, r5
			wlk_prev_addr = wlk_addr;
   12010:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12012:	f00e fd44 	bl	20a9e <nvs_prev_ate>
			if (rc) {
   12016:	4604      	mov	r4, r0
   12018:	2800      	cmp	r0, #0
   1201a:	d167      	bne.n	120ec <nvs_gc+0x178>
			if ((wlk_ate.id == gc_ate.id) &&
   1201c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   12020:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12024:	429a      	cmp	r2, r3
   12026:	d028      	beq.n	1207a <nvs_gc+0x106>
		} while (wlk_addr != fs->ate_wra);
   12028:	686a      	ldr	r2, [r5, #4]
   1202a:	9b05      	ldr	r3, [sp, #20]
   1202c:	429a      	cmp	r2, r3
   1202e:	d1ec      	bne.n	1200a <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   12030:	4556      	cmp	r6, sl
   12032:	d11f      	bne.n	12074 <nvs_gc+0x100>
   12034:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   12038:	b1e3      	cbz	r3, 12074 <nvs_gc+0x100>
			data_addr += gc_ate.offset;
   1203a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1203e:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   12042:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
   12044:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12046:	68ab      	ldr	r3, [r5, #8]
   12048:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   1204c:	f00e fc8b 	bl	20966 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   12050:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   12052:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   12056:	681e      	ldr	r6, [r3, #0]
   12058:	4276      	negs	r6, r6
	block_size =
   1205a:	f006 0320 	and.w	r3, r6, #32
   1205e:	9301      	str	r3, [sp, #4]
	while (len) {
   12060:	f1b9 0f00 	cmp.w	r9, #0
   12064:	d110      	bne.n	12088 <nvs_gc+0x114>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   12066:	a908      	add	r1, sp, #32
   12068:	4628      	mov	r0, r5
   1206a:	f00e fd07 	bl	20a7c <nvs_flash_ate_wrt>
			if (rc) {
   1206e:	4604      	mov	r4, r0
   12070:	2800      	cmp	r0, #0
   12072:	d13b      	bne.n	120ec <nvs_gc+0x178>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
   12074:	45c2      	cmp	sl, r8
   12076:	d1b6      	bne.n	11fe6 <nvs_gc+0x72>
   12078:	e7a6      	b.n	11fc8 <nvs_gc+0x54>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   1207a:	a90a      	add	r1, sp, #40	; 0x28
   1207c:	4628      	mov	r0, r5
   1207e:	f00e fc85 	bl	2098c <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   12082:	2800      	cmp	r0, #0
   12084:	d0d0      	beq.n	12028 <nvs_gc+0xb4>
   12086:	e7d3      	b.n	12030 <nvs_gc+0xbc>
		bytes_to_copy = MIN(block_size, len);
   12088:	9b01      	ldr	r3, [sp, #4]
   1208a:	454b      	cmp	r3, r9
   1208c:	bf28      	it	cs
   1208e:	464b      	movcs	r3, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   12090:	aa0c      	add	r2, sp, #48	; 0x30
   12092:	4639      	mov	r1, r7
   12094:	4628      	mov	r0, r5
		bytes_to_copy = MIN(block_size, len);
   12096:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   12098:	f00e fbd1 	bl	2083e <nvs_flash_rd>
		if (rc) {
   1209c:	4604      	mov	r4, r0
   1209e:	bb28      	cbnz	r0, 120ec <nvs_gc+0x178>
	if (!len) {
   120a0:	b136      	cbz	r6, 120b0 <nvs_gc+0x13c>
   120a2:	68a9      	ldr	r1, [r5, #8]
   120a4:	4633      	mov	r3, r6
   120a6:	aa0c      	add	r2, sp, #48	; 0x30
   120a8:	4628      	mov	r0, r5
   120aa:	f00e fcb2 	bl	20a12 <nvs_flash_al_wrt.part.0>
   120ae:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
   120b0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   120b2:	4631      	mov	r1, r6
   120b4:	f00e fc60 	bl	20978 <nvs_al_size.isra.0>
   120b8:	68aa      	ldr	r2, [r5, #8]
   120ba:	4402      	add	r2, r0
   120bc:	60aa      	str	r2, [r5, #8]
		if (rc) {
   120be:	b9ac      	cbnz	r4, 120ec <nvs_gc+0x178>
		len -= bytes_to_copy;
   120c0:	eba9 0906 	sub.w	r9, r9, r6
		addr += bytes_to_copy;
   120c4:	4437      	add	r7, r6
   120c6:	e7cb      	b.n	12060 <nvs_gc+0xec>
	stop_addr = gc_addr - ate_size;
   120c8:	9804      	ldr	r0, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   120ca:	4631      	mov	r1, r6
	stop_addr = gc_addr - ate_size;
   120cc:	eba0 0808 	sub.w	r8, r0, r8
	if (nvs_close_ate_valid(fs, &close_ate)) {
   120d0:	4628      	mov	r0, r5
   120d2:	f00e fc80 	bl	209d6 <nvs_close_ate_valid>
   120d6:	2800      	cmp	r0, #0
   120d8:	f47f af7c 	bne.w	11fd4 <nvs_gc+0x60>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   120dc:	a904      	add	r1, sp, #16
   120de:	4628      	mov	r0, r5
   120e0:	f7ff ff16 	bl	11f10 <nvs_recover_last_ate>
		if (rc) {
   120e4:	4604      	mov	r4, r0
   120e6:	2800      	cmp	r0, #0
   120e8:	f43f af7b 	beq.w	11fe2 <nvs_gc+0x6e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
   120ec:	4620      	mov	r0, r4
   120ee:	b015      	add	sp, #84	; 0x54
   120f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120f4:	ffff0000 	.word	0xffff0000

000120f8 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   120f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   120fc:	4604      	mov	r4, r0
   120fe:	b086      	sub	sp, #24
   12100:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   12102:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
   12106:	4630      	mov	r0, r6
   12108:	f012 fcc1 	bl	24a8e <z_impl_k_mutex_init>
   1210c:	4628      	mov	r0, r5
   1210e:	f00b ff25 	bl	1df5c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   12112:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   12114:	b978      	cbnz	r0, 12136 <nvs_init+0x3e>
   12116:	4bac      	ldr	r3, [pc, #688]	; (123c8 <nvs_init+0x2d0>)
   12118:	49ac      	ldr	r1, [pc, #688]	; (123cc <nvs_init+0x2d4>)
		LOG_ERR("No valid flash device found");
   1211a:	48ad      	ldr	r0, [pc, #692]	; (123d0 <nvs_init+0x2d8>)
   1211c:	1ac9      	subs	r1, r1, r3
   1211e:	08c9      	lsrs	r1, r1, #3
   12120:	0189      	lsls	r1, r1, #6
   12122:	f041 0101 	orr.w	r1, r1, #1
   12126:	f00d fff1 	bl	2010c <log_0>
		return -ENXIO;
   1212a:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1212e:	4628      	mov	r0, r5
   12130:	b006      	add	sp, #24
   12132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   12136:	6883      	ldr	r3, [r0, #8]
   12138:	691b      	ldr	r3, [r3, #16]
   1213a:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1213c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1213e:	b960      	cbnz	r0, 1215a <nvs_init+0x62>
   12140:	49a2      	ldr	r1, [pc, #648]	; (123cc <nvs_init+0x2d4>)
   12142:	4ba1      	ldr	r3, [pc, #644]	; (123c8 <nvs_init+0x2d0>)
		LOG_ERR("Could not obtain flash parameters");
   12144:	48a3      	ldr	r0, [pc, #652]	; (123d4 <nvs_init+0x2dc>)
   12146:	1ac9      	subs	r1, r1, r3
   12148:	08c9      	lsrs	r1, r1, #3
   1214a:	0189      	lsls	r1, r1, #6
   1214c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
   12150:	f00d ffdc 	bl	2010c <log_0>
		return -EINVAL;
   12154:	f06f 0515 	mvn.w	r5, #21
   12158:	e7e9      	b.n	1212e <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
   1215a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   1215c:	6883      	ldr	r3, [r0, #8]
   1215e:	691b      	ldr	r3, [r3, #16]
   12160:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   12162:	6803      	ldr	r3, [r0, #0]
   12164:	3b01      	subs	r3, #1
   12166:	2b1f      	cmp	r3, #31
   12168:	d908      	bls.n	1217c <nvs_init+0x84>
   1216a:	4998      	ldr	r1, [pc, #608]	; (123cc <nvs_init+0x2d4>)
   1216c:	4b96      	ldr	r3, [pc, #600]	; (123c8 <nvs_init+0x2d0>)
		LOG_ERR("Unsupported write block size");
   1216e:	489a      	ldr	r0, [pc, #616]	; (123d8 <nvs_init+0x2e0>)
   12170:	1ac9      	subs	r1, r1, r3
   12172:	08c9      	lsrs	r1, r1, #3
   12174:	0189      	lsls	r1, r1, #6
   12176:	f041 0101 	orr.w	r1, r1, #1
   1217a:	e7e9      	b.n	12150 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   1217c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1217e:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   12180:	aa03      	add	r2, sp, #12
   12182:	f012 faae 	bl	246e2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   12186:	b140      	cbz	r0, 1219a <nvs_init+0xa2>
   12188:	4990      	ldr	r1, [pc, #576]	; (123cc <nvs_init+0x2d4>)
   1218a:	4b8f      	ldr	r3, [pc, #572]	; (123c8 <nvs_init+0x2d0>)
		LOG_ERR("Unable to get page info");
   1218c:	4893      	ldr	r0, [pc, #588]	; (123dc <nvs_init+0x2e4>)
   1218e:	1ac9      	subs	r1, r1, r3
   12190:	08c9      	lsrs	r1, r1, #3
   12192:	0189      	lsls	r1, r1, #6
   12194:	f041 0101 	orr.w	r1, r1, #1
   12198:	e7da      	b.n	12150 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
   1219a:	89a3      	ldrh	r3, [r4, #12]
   1219c:	b12b      	cbz	r3, 121aa <nvs_init+0xb2>
   1219e:	9a04      	ldr	r2, [sp, #16]
   121a0:	fbb3 f5f2 	udiv	r5, r3, r2
   121a4:	fb02 3515 	mls	r5, r2, r5, r3
   121a8:	b145      	cbz	r5, 121bc <nvs_init+0xc4>
   121aa:	4988      	ldr	r1, [pc, #544]	; (123cc <nvs_init+0x2d4>)
   121ac:	4b86      	ldr	r3, [pc, #536]	; (123c8 <nvs_init+0x2d0>)
		LOG_ERR("Invalid sector size");
   121ae:	488c      	ldr	r0, [pc, #560]	; (123e0 <nvs_init+0x2e8>)
   121b0:	1ac9      	subs	r1, r1, r3
   121b2:	08c9      	lsrs	r1, r1, #3
   121b4:	0189      	lsls	r1, r1, #6
   121b6:	f041 0101 	orr.w	r1, r1, #1
   121ba:	e7c9      	b.n	12150 <nvs_init+0x58>
	if (fs->sector_count < 2) {
   121bc:	89e3      	ldrh	r3, [r4, #14]
   121be:	2b01      	cmp	r3, #1
   121c0:	d808      	bhi.n	121d4 <nvs_init+0xdc>
   121c2:	4982      	ldr	r1, [pc, #520]	; (123cc <nvs_init+0x2d4>)
   121c4:	4b80      	ldr	r3, [pc, #512]	; (123c8 <nvs_init+0x2d0>)
		LOG_ERR("Configuration error - sector count");
   121c6:	4887      	ldr	r0, [pc, #540]	; (123e4 <nvs_init+0x2ec>)
   121c8:	1ac9      	subs	r1, r1, r3
   121ca:	08c9      	lsrs	r1, r1, #3
   121cc:	0189      	lsls	r1, r1, #6
   121ce:	f041 0101 	orr.w	r1, r1, #1
   121d2:	e7bd      	b.n	12150 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   121d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   121d6:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   121d8:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   121dc:	f04f 32ff 	mov.w	r2, #4294967295
   121e0:	f04f 33ff 	mov.w	r3, #4294967295
   121e4:	4630      	mov	r0, r6
   121e6:	f00c f92d 	bl	1e444 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   121ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   121ec:	2108      	movs	r1, #8
   121ee:	f00e fbc3 	bl	20978 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   121f2:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   121f4:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
   121f6:	89e3      	ldrh	r3, [r4, #14]
   121f8:	fa1f fa85 	uxth.w	sl, r5
   121fc:	4553      	cmp	r3, sl
   121fe:	d865      	bhi.n	122cc <nvs_init+0x1d4>
	if (closed_sectors == fs->sector_count) {
   12200:	89e3      	ldrh	r3, [r4, #14]
   12202:	42bb      	cmp	r3, r7
   12204:	f000 80c3 	beq.w	1238e <nvs_init+0x296>
	if (i == fs->sector_count) {
   12208:	4553      	cmp	r3, sl
   1220a:	d10c      	bne.n	12226 <nvs_init+0x12e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1220c:	9900      	ldr	r1, [sp, #0]
   1220e:	2308      	movs	r3, #8
   12210:	464a      	mov	r2, r9
   12212:	eba1 0108 	sub.w	r1, r1, r8
   12216:	4620      	mov	r0, r4
   12218:	f00e fb49 	bl	208ae <nvs_flash_cmp_const>
		if (!rc) {
   1221c:	b918      	cbnz	r0, 12226 <nvs_init+0x12e>
			nvs_sector_advance(fs, &addr);
   1221e:	89e0      	ldrh	r0, [r4, #14]
   12220:	4669      	mov	r1, sp
   12222:	f00e fbcd 	bl	209c0 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   12226:	4669      	mov	r1, sp
   12228:	4620      	mov	r0, r4
   1222a:	f7ff fe71 	bl	11f10 <nvs_recover_last_ate>
	if (rc) {
   1222e:	4605      	mov	r5, r0
   12230:	bb40      	cbnz	r0, 12284 <nvs_init+0x18c>
	fs->ate_wra = addr;
   12232:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12234:	4f6c      	ldr	r7, [pc, #432]	; (123e8 <nvs_init+0x2f0>)
	fs->ate_wra = addr;
   12236:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12238:	403b      	ands	r3, r7
   1223a:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   1223c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   12240:	4299      	cmp	r1, r3
   12242:	d30f      	bcc.n	12264 <nvs_init+0x16c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12244:	2308      	movs	r3, #8
   12246:	aa01      	add	r2, sp, #4
   12248:	4620      	mov	r0, r4
   1224a:	f00e faf8 	bl	2083e <nvs_flash_rd>
		if (rc) {
   1224e:	4605      	mov	r5, r0
   12250:	b9c0      	cbnz	r0, 12284 <nvs_init+0x18c>
   12252:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   12254:	f813 2b01 	ldrb.w	r2, [r3], #1
   12258:	4591      	cmp	r9, r2
   1225a:	f040 809b 	bne.w	12394 <nvs_init+0x29c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1225e:	3501      	adds	r5, #1
   12260:	2d08      	cmp	r5, #8
   12262:	d1f7      	bne.n	12254 <nvs_init+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12264:	6863      	ldr	r3, [r4, #4]
   12266:	4f60      	ldr	r7, [pc, #384]	; (123e8 <nvs_init+0x2f0>)
	nvs_sector_advance(fs, &addr);
   12268:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1226a:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
   1226c:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1226e:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   12270:	f00e fba6 	bl	209c0 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   12274:	89a3      	ldrh	r3, [r4, #12]
   12276:	9900      	ldr	r1, [sp, #0]
   12278:	464a      	mov	r2, r9
   1227a:	4620      	mov	r0, r4
   1227c:	f00e fb17 	bl	208ae <nvs_flash_cmp_const>
	if (rc < 0) {
   12280:	1e05      	subs	r5, r0, #0
   12282:	da46      	bge.n	12312 <nvs_init+0x21a>
	return z_impl_k_mutex_unlock(mutex);
   12284:	4630      	mov	r0, r6
   12286:	f00c f955 	bl	1e534 <z_impl_k_mutex_unlock>
	if (rc) {
   1228a:	2d00      	cmp	r5, #0
   1228c:	f47f af4f 	bne.w	1212e <nvs_init+0x36>
	fs->ready = true;
   12290:	2301      	movs	r3, #1
   12292:	7423      	strb	r3, [r4, #16]
   12294:	4e4d      	ldr	r6, [pc, #308]	; (123cc <nvs_init+0x2d4>)
   12296:	4b4c      	ldr	r3, [pc, #304]	; (123c8 <nvs_init+0x2d0>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   12298:	89a2      	ldrh	r2, [r4, #12]
   1229a:	89e1      	ldrh	r1, [r4, #14]
   1229c:	4853      	ldr	r0, [pc, #332]	; (123ec <nvs_init+0x2f4>)
   1229e:	1af6      	subs	r6, r6, r3
   122a0:	08f6      	lsrs	r6, r6, #3
   122a2:	01b6      	lsls	r6, r6, #6
   122a4:	f046 0603 	orr.w	r6, r6, #3
   122a8:	4633      	mov	r3, r6
   122aa:	f00d ff50 	bl	2014e <log_2>
	LOG_INF("alloc wra: %d, %x",
   122ae:	6861      	ldr	r1, [r4, #4]
   122b0:	484f      	ldr	r0, [pc, #316]	; (123f0 <nvs_init+0x2f8>)
   122b2:	4633      	mov	r3, r6
   122b4:	b28a      	uxth	r2, r1
   122b6:	0c09      	lsrs	r1, r1, #16
   122b8:	f00d ff49 	bl	2014e <log_2>
	LOG_INF("data wra: %d, %x",
   122bc:	68a1      	ldr	r1, [r4, #8]
   122be:	484d      	ldr	r0, [pc, #308]	; (123f4 <nvs_init+0x2fc>)
   122c0:	b28a      	uxth	r2, r1
   122c2:	4633      	mov	r3, r6
   122c4:	0c09      	lsrs	r1, r1, #16
   122c6:	f00d ff42 	bl	2014e <log_2>
	return 0;
   122ca:	e730      	b.n	1212e <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
   122cc:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   122ce:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   122d0:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
   122d4:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   122d8:	464a      	mov	r2, r9
   122da:	2308      	movs	r3, #8
   122dc:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   122de:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   122e0:	f00e fae5 	bl	208ae <nvs_flash_cmp_const>
		if (rc) {
   122e4:	b170      	cbz	r0, 12304 <nvs_init+0x20c>
			nvs_sector_advance(fs, &addr);
   122e6:	89e0      	ldrh	r0, [r4, #14]
   122e8:	4669      	mov	r1, sp
   122ea:	f00e fb69 	bl	209c0 <nvs_sector_advance.isra.0>
			closed_sectors++;
   122ee:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   122f0:	9900      	ldr	r1, [sp, #0]
   122f2:	2308      	movs	r3, #8
   122f4:	464a      	mov	r2, r9
   122f6:	4620      	mov	r0, r4
			closed_sectors++;
   122f8:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   122fa:	f00e fad8 	bl	208ae <nvs_flash_cmp_const>
			if (!rc) {
   122fe:	2800      	cmp	r0, #0
   12300:	f43f af7e 	beq.w	12200 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
   12304:	3501      	adds	r5, #1
   12306:	e776      	b.n	121f6 <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12308:	2d00      	cmp	r5, #0
   1230a:	d058      	beq.n	123be <nvs_init+0x2c6>
				rc = -ESPIPE;
   1230c:	f06f 051c 	mvn.w	r5, #28
   12310:	e7b8      	b.n	12284 <nvs_init+0x18c>
	if (rc) {
   12312:	d021      	beq.n	12358 <nvs_init+0x260>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12314:	6861      	ldr	r1, [r4, #4]
   12316:	4620      	mov	r0, r4
   12318:	f00e faee 	bl	208f8 <nvs_flash_erase_sector>
		if (rc) {
   1231c:	4605      	mov	r5, r0
   1231e:	2800      	cmp	r0, #0
   12320:	d1b0      	bne.n	12284 <nvs_init+0x18c>
		fs->ate_wra &= ADDR_SECT_MASK;
   12322:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   12324:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   12326:	403b      	ands	r3, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   12328:	4403      	add	r3, r0
   1232a:	eba3 0048 	sub.w	r0, r3, r8, lsl #1
   1232e:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   12330:	4038      	ands	r0, r7
   12332:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
   12334:	4620      	mov	r0, r4
   12336:	f7ff fe1d 	bl	11f74 <nvs_gc>
   1233a:	4605      	mov	r5, r0
		goto end;
   1233c:	e7a2      	b.n	12284 <nvs_init+0x18c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   1233e:	1a5b      	subs	r3, r3, r1
   12340:	464a      	mov	r2, r9
   12342:	4620      	mov	r0, r4
   12344:	f00e fab3 	bl	208ae <nvs_flash_cmp_const>
		if (rc < 0) {
   12348:	1e05      	subs	r5, r0, #0
   1234a:	db9b      	blt.n	12284 <nvs_init+0x18c>
		if (!rc) {
   1234c:	d008      	beq.n	12360 <nvs_init+0x268>
		fs->data_wra += fs->flash_parameters->write_block_size;
   1234e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   12350:	68a3      	ldr	r3, [r4, #8]
   12352:	6812      	ldr	r2, [r2, #0]
   12354:	4413      	add	r3, r2
   12356:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   12358:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1235c:	428b      	cmp	r3, r1
   1235e:	d8ee      	bhi.n	1233e <nvs_init+0x246>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12360:	6861      	ldr	r1, [r4, #4]
   12362:	89a3      	ldrh	r3, [r4, #12]
   12364:	eb01 0048 	add.w	r0, r1, r8, lsl #1
   12368:	4298      	cmp	r0, r3
   1236a:	d18b      	bne.n	12284 <nvs_init+0x18c>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1236c:	4f1e      	ldr	r7, [pc, #120]	; (123e8 <nvs_init+0x2f0>)
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1236e:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   12370:	ea01 0307 	and.w	r3, r1, r7
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12374:	429a      	cmp	r2, r3
   12376:	d085      	beq.n	12284 <nvs_init+0x18c>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12378:	4620      	mov	r0, r4
   1237a:	f00e fabd 	bl	208f8 <nvs_flash_erase_sector>
		if (rc) {
   1237e:	4605      	mov	r5, r0
   12380:	2800      	cmp	r0, #0
   12382:	f47f af7f 	bne.w	12284 <nvs_init+0x18c>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12386:	6863      	ldr	r3, [r4, #4]
   12388:	403b      	ands	r3, r7
   1238a:	60a3      	str	r3, [r4, #8]
   1238c:	e77a      	b.n	12284 <nvs_init+0x18c>
		rc = -EDEADLK;
   1238e:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   12392:	e777      	b.n	12284 <nvs_init+0x18c>
		if (nvs_ate_valid(fs, &last_ate)) {
   12394:	a901      	add	r1, sp, #4
   12396:	4620      	mov	r0, r4
   12398:	f00e faf8 	bl	2098c <nvs_ate_valid>
   1239c:	6862      	ldr	r2, [r4, #4]
   1239e:	b170      	cbz	r0, 123be <nvs_init+0x2c6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   123a0:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   123a2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   123a6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   123aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   123ac:	403b      	ands	r3, r7
   123ae:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   123b0:	4429      	add	r1, r5
   123b2:	f00e fae1 	bl	20978 <nvs_al_size.isra.0>
   123b6:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   123b8:	4293      	cmp	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   123ba:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   123bc:	d0a4      	beq.n	12308 <nvs_init+0x210>
		fs->ate_wra -= ate_size;
   123be:	eba2 0208 	sub.w	r2, r2, r8
   123c2:	6062      	str	r2, [r4, #4]
   123c4:	e73a      	b.n	1223c <nvs_init+0x144>
   123c6:	bf00      	nop
   123c8:	000256c4 	.word	0x000256c4
   123cc:	00025764 	.word	0x00025764
   123d0:	0002651b 	.word	0x0002651b
   123d4:	00026537 	.word	0x00026537
   123d8:	00026559 	.word	0x00026559
   123dc:	00026576 	.word	0x00026576
   123e0:	0002658e 	.word	0x0002658e
   123e4:	000265a2 	.word	0x000265a2
   123e8:	ffff0000 	.word	0xffff0000
   123ec:	000265c5 	.word	0x000265c5
   123f0:	000265dc 	.word	0x000265dc
   123f4:	000265ee 	.word	0x000265ee

000123f8 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   123f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123fc:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   123fe:	7c03      	ldrb	r3, [r0, #16]
{
   12400:	b089      	sub	sp, #36	; 0x24
   12402:	4604      	mov	r4, r0
   12404:	4689      	mov	r9, r1
   12406:	4690      	mov	r8, r2
	if (!fs->ready) {
   12408:	b97b      	cbnz	r3, 1242a <nvs_write+0x32>
   1240a:	4b69      	ldr	r3, [pc, #420]	; (125b0 <nvs_write+0x1b8>)
   1240c:	4969      	ldr	r1, [pc, #420]	; (125b4 <nvs_write+0x1bc>)
		LOG_ERR("NVS not initialized");
   1240e:	486a      	ldr	r0, [pc, #424]	; (125b8 <nvs_write+0x1c0>)
   12410:	1ac9      	subs	r1, r1, r3
   12412:	08c9      	lsrs	r1, r1, #3
   12414:	0189      	lsls	r1, r1, #6
   12416:	f041 0101 	orr.w	r1, r1, #1
   1241a:	f00d fe77 	bl	2010c <log_0>
		return -EACCES;
   1241e:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   12422:	4628      	mov	r0, r5
   12424:	b009      	add	sp, #36	; 0x24
   12426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1242a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1242c:	2108      	movs	r1, #8
   1242e:	4618      	mov	r0, r3
   12430:	f00e faa2 	bl	20978 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   12434:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12436:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   12438:	4618      	mov	r0, r3
   1243a:	f00e fa9d 	bl	20978 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   1243e:	89a3      	ldrh	r3, [r4, #12]
   12440:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   12444:	1a9b      	subs	r3, r3, r2
   12446:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   12448:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   1244a:	f200 80ac 	bhi.w	125a6 <nvs_write+0x1ae>
   1244e:	b11e      	cbz	r6, 12458 <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
   12450:	f1b8 0f00 	cmp.w	r8, #0
   12454:	f000 80a7 	beq.w	125a6 <nvs_write+0x1ae>
	wlk_addr = fs->ate_wra;
   12458:	6863      	ldr	r3, [r4, #4]
   1245a:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1245c:	aa04      	add	r2, sp, #16
   1245e:	a903      	add	r1, sp, #12
   12460:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12462:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12466:	f00e fb1a 	bl	20a9e <nvs_prev_ate>
		if (rc) {
   1246a:	4605      	mov	r5, r0
   1246c:	2800      	cmp	r0, #0
   1246e:	d1d8      	bne.n	12422 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12470:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12474:	454b      	cmp	r3, r9
   12476:	d005      	beq.n	12484 <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
   12478:	6862      	ldr	r2, [r4, #4]
   1247a:	9b03      	ldr	r3, [sp, #12]
   1247c:	429a      	cmp	r2, r3
   1247e:	d1ed      	bne.n	1245c <nvs_write+0x64>
		if (len == 0) {
   12480:	b9e6      	cbnz	r6, 124bc <nvs_write+0xc4>
   12482:	e7ce      	b.n	12422 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12484:	a904      	add	r1, sp, #16
   12486:	4620      	mov	r0, r4
   12488:	f00e fa80 	bl	2098c <nvs_ate_valid>
   1248c:	2800      	cmp	r0, #0
   1248e:	d0f3      	beq.n	12478 <nvs_write+0x80>
		if (len == 0) {
   12490:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   12494:	b186      	cbz	r6, 124b8 <nvs_write+0xc0>
		} else if (len == wlk_ate.len) {
   12496:	429e      	cmp	r6, r3
   12498:	d110      	bne.n	124bc <nvs_write+0xc4>
		rd_addr += wlk_ate.offset;
   1249a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   1249e:	ea4f 411b 	mov.w	r1, fp, lsr #16
   124a2:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   124a4:	4401      	add	r1, r0
   124a6:	4633      	mov	r3, r6
   124a8:	4642      	mov	r2, r8
   124aa:	4620      	mov	r0, r4
   124ac:	f00e f9d5 	bl	2085a <nvs_flash_block_cmp>
			if (rc <= 0) {
   124b0:	2800      	cmp	r0, #0
   124b2:	dc03      	bgt.n	124bc <nvs_write+0xc4>
   124b4:	4605      	mov	r5, r0
   124b6:	e7b4      	b.n	12422 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   124b8:	2b00      	cmp	r3, #0
   124ba:	d0b2      	beq.n	12422 <nvs_write+0x2a>
	if (data_size) {
   124bc:	2f00      	cmp	r7, #0
   124be:	d13f      	bne.n	12540 <nvs_write+0x148>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   124c0:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   124c4:	f04f 32ff 	mov.w	r2, #4294967295
   124c8:	f04f 33ff 	mov.w	r3, #4294967295
   124cc:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   124ce:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 125bc <nvs_write+0x1c4>
   124d2:	f00b ffb7 	bl	1e444 <z_impl_k_mutex_lock>
	gc_count = 0;
   124d6:	2200      	movs	r2, #0
		if (gc_count == fs->sector_count) {
   124d8:	89e3      	ldrh	r3, [r4, #14]
   124da:	429a      	cmp	r2, r3
   124dc:	d060      	beq.n	125a0 <nvs_write+0x1a8>
		if (fs->ate_wra >= fs->data_wra + required_space) {
   124de:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   124e2:	1878      	adds	r0, r7, r1
   124e4:	4283      	cmp	r3, r0
   124e6:	d32e      	bcc.n	12546 <nvs_write+0x14e>
	entry.part = 0xff;
   124e8:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   124ea:	a806      	add	r0, sp, #24
	entry.id = id;
   124ec:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   124f0:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   124f4:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   124f8:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   124fc:	f00e fa33 	bl	20966 <nvs_ate_crc8_update>
	if (!len) {
   12500:	b136      	cbz	r6, 12510 <nvs_write+0x118>
   12502:	68a1      	ldr	r1, [r4, #8]
   12504:	4633      	mov	r3, r6
   12506:	4642      	mov	r2, r8
   12508:	4620      	mov	r0, r4
   1250a:	f00e fa82 	bl	20a12 <nvs_flash_al_wrt.part.0>
   1250e:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   12510:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12512:	4631      	mov	r1, r6
   12514:	f00e fa30 	bl	20978 <nvs_al_size.isra.0>
   12518:	68a3      	ldr	r3, [r4, #8]
   1251a:	4403      	add	r3, r0
   1251c:	60a3      	str	r3, [r4, #8]
	if (rc) {
   1251e:	2d00      	cmp	r5, #0
   12520:	d144      	bne.n	125ac <nvs_write+0x1b4>
	rc = nvs_flash_ate_wrt(fs, &entry);
   12522:	a906      	add	r1, sp, #24
   12524:	4620      	mov	r0, r4
   12526:	f00e faa9 	bl	20a7c <nvs_flash_ate_wrt>
	if (rc) {
   1252a:	4605      	mov	r5, r0
   1252c:	2800      	cmp	r0, #0
   1252e:	d13d      	bne.n	125ac <nvs_write+0x1b4>
	rc = len;
   12530:	4633      	mov	r3, r6
   12532:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   12534:	4650      	mov	r0, sl
   12536:	f00b fffd 	bl	1e534 <z_impl_k_mutex_unlock>
	return rc;
   1253a:	9b01      	ldr	r3, [sp, #4]
   1253c:	461d      	mov	r5, r3
   1253e:	e770      	b.n	12422 <nvs_write+0x2a>
		required_space = data_size + ate_size;
   12540:	4457      	add	r7, sl
   12542:	b2bf      	uxth	r7, r7
   12544:	e7bc      	b.n	124c0 <nvs_write+0xc8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12546:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12548:	9201      	str	r2, [sp, #4]
   1254a:	2108      	movs	r1, #8
   1254c:	f00e fa14 	bl	20978 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   12550:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12554:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   12558:	2100      	movs	r1, #0
   1255a:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1255e:	1819      	adds	r1, r3, r0
   12560:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   12564:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   12566:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   1256a:	440b      	add	r3, r1
   1256c:	1a18      	subs	r0, r3, r0
   1256e:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   12570:	a806      	add	r0, sp, #24
   12572:	f00e f9f8 	bl	20966 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   12576:	a906      	add	r1, sp, #24
   12578:	4620      	mov	r0, r4
   1257a:	f00e fa7f 	bl	20a7c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1257e:	89e0      	ldrh	r0, [r4, #14]
   12580:	1d21      	adds	r1, r4, #4
   12582:	f00e fa1d 	bl	209c0 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12586:	6863      	ldr	r3, [r4, #4]
   12588:	ea03 030b 	and.w	r3, r3, fp
   1258c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1258e:	4620      	mov	r0, r4
   12590:	f7ff fcf0 	bl	11f74 <nvs_gc>
		if (rc) {
   12594:	4603      	mov	r3, r0
   12596:	2800      	cmp	r0, #0
   12598:	d1cb      	bne.n	12532 <nvs_write+0x13a>
		gc_count++;
   1259a:	9a01      	ldr	r2, [sp, #4]
   1259c:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   1259e:	e79b      	b.n	124d8 <nvs_write+0xe0>
			rc = -ENOSPC;
   125a0:	f06f 031b 	mvn.w	r3, #27
   125a4:	e7c5      	b.n	12532 <nvs_write+0x13a>
		return -EINVAL;
   125a6:	f06f 0515 	mvn.w	r5, #21
   125aa:	e73a      	b.n	12422 <nvs_write+0x2a>
			if (rc) {
   125ac:	462b      	mov	r3, r5
   125ae:	e7c0      	b.n	12532 <nvs_write+0x13a>
   125b0:	000256c4 	.word	0x000256c4
   125b4:	00025764 	.word	0x00025764
   125b8:	00026507 	.word	0x00026507
   125bc:	ffff0000 	.word	0xffff0000

000125c0 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   125c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   125c4:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   125c6:	7c03      	ldrb	r3, [r0, #16]
{
   125c8:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   125cc:	4604      	mov	r4, r0
   125ce:	460f      	mov	r7, r1
   125d0:	4690      	mov	r8, r2
	if (!fs->ready) {
   125d2:	b973      	cbnz	r3, 125f2 <nvs_read_hist+0x32>
   125d4:	4b2b      	ldr	r3, [pc, #172]	; (12684 <nvs_read_hist+0xc4>)
   125d6:	492c      	ldr	r1, [pc, #176]	; (12688 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
   125d8:	482c      	ldr	r0, [pc, #176]	; (1268c <nvs_read_hist+0xcc>)
   125da:	1ac9      	subs	r1, r1, r3
   125dc:	08c9      	lsrs	r1, r1, #3
   125de:	0189      	lsls	r1, r1, #6
   125e0:	f041 0101 	orr.w	r1, r1, #1
   125e4:	f00d fd92 	bl	2010c <log_0>
		return -EACCES;
   125e8:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   125ec:	b004      	add	sp, #16
   125ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   125f2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   125f4:	2108      	movs	r1, #8
   125f6:	f00e f9bf 	bl	20978 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   125fa:	89a3      	ldrh	r3, [r4, #12]
   125fc:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   12600:	429e      	cmp	r6, r3
   12602:	d83c      	bhi.n	1267e <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
   12604:	6863      	ldr	r3, [r4, #4]
   12606:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   12608:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1260c:	aa02      	add	r2, sp, #8
   1260e:	a901      	add	r1, sp, #4
   12610:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12612:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12614:	f00e fa43 	bl	20a9e <nvs_prev_ate>
		if (rc) {
   12618:	2800      	cmp	r0, #0
   1261a:	d1e7      	bne.n	125ec <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   1261c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12620:	42bb      	cmp	r3, r7
   12622:	d108      	bne.n	12636 <nvs_read_hist+0x76>
   12624:	a902      	add	r1, sp, #8
   12626:	4620      	mov	r0, r4
   12628:	f00e f9b0 	bl	2098c <nvs_ate_valid>
   1262c:	b118      	cbz	r0, 12636 <nvs_read_hist+0x76>
			cnt_his++;
   1262e:	f10a 0a01 	add.w	sl, sl, #1
   12632:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   12636:	6862      	ldr	r2, [r4, #4]
   12638:	9b01      	ldr	r3, [sp, #4]
   1263a:	429a      	cmp	r2, r3
   1263c:	d018      	beq.n	12670 <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
   1263e:	45d1      	cmp	r9, sl
   12640:	d2e4      	bcs.n	1260c <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12642:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12646:	b1bb      	cbz	r3, 12678 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12648:	45d1      	cmp	r9, sl
   1264a:	d815      	bhi.n	12678 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
   1264c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   12650:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12652:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   12654:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12658:	bf28      	it	cs
   1265a:	4633      	movcs	r3, r6
   1265c:	4642      	mov	r2, r8
   1265e:	4429      	add	r1, r5
   12660:	4620      	mov	r0, r4
   12662:	f00e f8ec 	bl	2083e <nvs_flash_rd>
	if (rc) {
   12666:	2800      	cmp	r0, #0
   12668:	d1c0      	bne.n	125ec <nvs_read_hist+0x2c>
	return wlk_ate.len;
   1266a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1266e:	e7bd      	b.n	125ec <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12670:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12674:	42bb      	cmp	r3, r7
   12676:	d0e4      	beq.n	12642 <nvs_read_hist+0x82>
		return -ENOENT;
   12678:	f06f 0001 	mvn.w	r0, #1
   1267c:	e7b6      	b.n	125ec <nvs_read_hist+0x2c>
		return -EINVAL;
   1267e:	f06f 0015 	mvn.w	r0, #21
   12682:	e7b3      	b.n	125ec <nvs_read_hist+0x2c>
   12684:	000256c4 	.word	0x000256c4
   12688:	00025764 	.word	0x00025764
   1268c:	00026507 	.word	0x00026507

00012690 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   12690:	4b09      	ldr	r3, [pc, #36]	; (126b8 <get_flash_area_from_id+0x28>)
{
   12692:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   12694:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   12696:	4b09      	ldr	r3, [pc, #36]	; (126bc <get_flash_area_from_id+0x2c>)
{
   12698:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
   1269a:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   1269c:	2300      	movs	r3, #0
   1269e:	429d      	cmp	r5, r3
   126a0:	dc01      	bgt.n	126a6 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   126a2:	2000      	movs	r0, #0
}
   126a4:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   126a6:	0119      	lsls	r1, r3, #4
   126a8:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   126ac:	5c61      	ldrb	r1, [r4, r1]
   126ae:	4291      	cmp	r1, r2
   126b0:	d0f8      	beq.n	126a4 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
   126b2:	3301      	adds	r3, #1
   126b4:	e7f3      	b.n	1269e <get_flash_area_from_id+0xe>
   126b6:	bf00      	nop
   126b8:	00025ab0 	.word	0x00025ab0
   126bc:	20000508 	.word	0x20000508

000126c0 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   126c0:	4b08      	ldr	r3, [pc, #32]	; (126e4 <flash_area_open+0x24>)
   126c2:	681b      	ldr	r3, [r3, #0]
{
   126c4:	b510      	push	{r4, lr}
   126c6:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   126c8:	b12b      	cbz	r3, 126d6 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   126ca:	f7ff ffe1 	bl	12690 <get_flash_area_from_id>
	if (area == NULL) {
   126ce:	b128      	cbz	r0, 126dc <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   126d0:	6020      	str	r0, [r4, #0]
	return 0;
   126d2:	2000      	movs	r0, #0
}
   126d4:	bd10      	pop	{r4, pc}
		return -EACCES;
   126d6:	f06f 000c 	mvn.w	r0, #12
   126da:	e7fb      	b.n	126d4 <flash_area_open+0x14>
		return -ENOENT;
   126dc:	f06f 0001 	mvn.w	r0, #1
   126e0:	e7f8      	b.n	126d4 <flash_area_open+0x14>
   126e2:	bf00      	nop
   126e4:	20000508 	.word	0x20000508

000126e8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   126e8:	b530      	push	{r4, r5, lr}
   126ea:	b089      	sub	sp, #36	; 0x24
   126ec:	460c      	mov	r4, r1
   126ee:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   126f0:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   126f2:	f7ff ffcd 	bl	12690 <get_flash_area_from_id>
	if (fa == NULL) {
   126f6:	b1b8      	cbz	r0, 12728 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   126f8:	6843      	ldr	r3, [r0, #4]
   126fa:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   126fc:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   126fe:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   12700:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   12702:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   12706:	2300      	movs	r3, #0
	cb_data->status = 0;
   12708:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   1270c:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
   1270e:	f00e fa1d 	bl	20b4c <device_get_binding>
	if (flash_dev == NULL) {
   12712:	b160      	cbz	r0, 1272e <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   12714:	4907      	ldr	r1, [pc, #28]	; (12734 <flash_area_get_sectors+0x4c>)
   12716:	aa01      	add	r2, sp, #4
   12718:	f011 ffe7 	bl	246ea <flash_page_foreach>
	if (cb_data->status == 0) {
   1271c:	9807      	ldr	r0, [sp, #28]
   1271e:	b908      	cbnz	r0, 12724 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   12720:	9b05      	ldr	r3, [sp, #20]
   12722:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   12724:	b009      	add	sp, #36	; 0x24
   12726:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   12728:	f06f 0015 	mvn.w	r0, #21
   1272c:	e7fa      	b.n	12724 <flash_area_get_sectors+0x3c>
		return -ENODEV;
   1272e:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   12732:	e7f7      	b.n	12724 <flash_area_get_sectors+0x3c>
   12734:	00020b51 	.word	0x00020b51

00012738 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   12738:	4b10      	ldr	r3, [pc, #64]	; (1277c <settings_save_one+0x44>)
{
   1273a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   1273e:	681c      	ldr	r4, [r3, #0]
{
   12740:	4605      	mov	r5, r0
   12742:	460e      	mov	r6, r1
   12744:	4617      	mov	r7, r2
	if (!cs) {
   12746:	b1ac      	cbz	r4, 12774 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   12748:	f04f 32ff 	mov.w	r2, #4294967295
   1274c:	f04f 33ff 	mov.w	r3, #4294967295
   12750:	480b      	ldr	r0, [pc, #44]	; (12780 <settings_save_one+0x48>)
   12752:	f00b fe77 	bl	1e444 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   12756:	6863      	ldr	r3, [r4, #4]
   12758:	4632      	mov	r2, r6
   1275a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1275e:	4629      	mov	r1, r5
   12760:	463b      	mov	r3, r7
   12762:	4620      	mov	r0, r4
   12764:	47c0      	blx	r8
   12766:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12768:	4805      	ldr	r0, [pc, #20]	; (12780 <settings_save_one+0x48>)
   1276a:	f00b fee3 	bl	1e534 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   1276e:	4620      	mov	r0, r4
   12770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   12774:	f06f 0401 	mvn.w	r4, #1
   12778:	e7f9      	b.n	1276e <settings_save_one+0x36>
   1277a:	bf00      	nop
   1277c:	20002dbc 	.word	0x20002dbc
   12780:	20000844 	.word	0x20000844

00012784 <settings_src_register>:
	parent->next = child;
   12784:	2300      	movs	r3, #0
   12786:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   12788:	4b04      	ldr	r3, [pc, #16]	; (1279c <settings_src_register+0x18>)
   1278a:	685a      	ldr	r2, [r3, #4]
   1278c:	b912      	cbnz	r2, 12794 <settings_src_register+0x10>
	list->head = node;
   1278e:	e9c3 0000 	strd	r0, r0, [r3]
}
   12792:	4770      	bx	lr
	parent->next = child;
   12794:	6010      	str	r0, [r2, #0]
	list->tail = node;
   12796:	6058      	str	r0, [r3, #4]
}
   12798:	4770      	bx	lr
   1279a:	bf00      	nop
   1279c:	20002db4 	.word	0x20002db4

000127a0 <settings_dst_register>:
	settings_save_dst = cs;
   127a0:	4b01      	ldr	r3, [pc, #4]	; (127a8 <settings_dst_register+0x8>)
   127a2:	6018      	str	r0, [r3, #0]
}
   127a4:	4770      	bx	lr
   127a6:	bf00      	nop
   127a8:	20002dbc 	.word	0x20002dbc

000127ac <settings_load_subtree>:
{
   127ac:	b530      	push	{r4, r5, lr}
   127ae:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   127b0:	2300      	movs	r3, #0
{
   127b2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   127b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   127b8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   127ba:	f04f 33ff 	mov.w	r3, #4294967295
   127be:	480e      	ldr	r0, [pc, #56]	; (127f8 <settings_load_subtree+0x4c>)
   127c0:	f04f 32ff 	mov.w	r2, #4294967295
   127c4:	f00b fe3e 	bl	1e444 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   127c8:	4b0c      	ldr	r3, [pc, #48]	; (127fc <settings_load_subtree+0x50>)
   127ca:	681c      	ldr	r4, [r3, #0]
   127cc:	2c00      	cmp	r4, #0
   127ce:	bf38      	it	cc
   127d0:	2400      	movcc	r4, #0
   127d2:	b13c      	cbz	r4, 127e4 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   127d4:	6863      	ldr	r3, [r4, #4]
   127d6:	4620      	mov	r0, r4
   127d8:	681b      	ldr	r3, [r3, #0]
   127da:	a901      	add	r1, sp, #4
   127dc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   127de:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   127e0:	2c00      	cmp	r4, #0
   127e2:	d1f6      	bne.n	127d2 <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   127e4:	4628      	mov	r0, r5
   127e6:	f000 f8d7 	bl	12998 <settings_commit_subtree>
   127ea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   127ec:	4802      	ldr	r0, [pc, #8]	; (127f8 <settings_load_subtree+0x4c>)
   127ee:	f00b fea1 	bl	1e534 <z_impl_k_mutex_unlock>
}
   127f2:	4620      	mov	r0, r4
   127f4:	b005      	add	sp, #20
   127f6:	bd30      	pop	{r4, r5, pc}
   127f8:	20000844 	.word	0x20000844
   127fc:	20002db4 	.word	0x20002db4

00012800 <settings_load_subtree_direct>:
{
   12800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   12802:	e9cd 0101 	strd	r0, r1, [sp, #4]
   12806:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   12808:	f04f 33ff 	mov.w	r3, #4294967295
   1280c:	480c      	ldr	r0, [pc, #48]	; (12840 <settings_load_subtree_direct+0x40>)
   1280e:	f04f 32ff 	mov.w	r2, #4294967295
   12812:	f00b fe17 	bl	1e444 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12816:	4b0b      	ldr	r3, [pc, #44]	; (12844 <settings_load_subtree_direct+0x44>)
   12818:	681c      	ldr	r4, [r3, #0]
   1281a:	2c00      	cmp	r4, #0
   1281c:	bf38      	it	cc
   1281e:	2400      	movcc	r4, #0
   12820:	b13c      	cbz	r4, 12832 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   12822:	6863      	ldr	r3, [r4, #4]
   12824:	4620      	mov	r0, r4
   12826:	681b      	ldr	r3, [r3, #0]
   12828:	a901      	add	r1, sp, #4
   1282a:	4798      	blx	r3
   1282c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1282e:	2c00      	cmp	r4, #0
   12830:	d1f6      	bne.n	12820 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   12832:	4803      	ldr	r0, [pc, #12]	; (12840 <settings_load_subtree_direct+0x40>)
   12834:	f00b fe7e 	bl	1e534 <z_impl_k_mutex_unlock>
}
   12838:	2000      	movs	r0, #0
   1283a:	b004      	add	sp, #16
   1283c:	bd10      	pop	{r4, pc}
   1283e:	bf00      	nop
   12840:	20000844 	.word	0x20000844
   12844:	20002db4 	.word	0x20002db4

00012848 <settings_store_init>:
	list->head = NULL;
   12848:	4b02      	ldr	r3, [pc, #8]	; (12854 <settings_store_init+0xc>)
   1284a:	2200      	movs	r2, #0
	list->tail = NULL;
   1284c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   12850:	4770      	bx	lr
   12852:	bf00      	nop
   12854:	20002db4 	.word	0x20002db4

00012858 <settings_init>:
	list->head = NULL;
   12858:	4b02      	ldr	r3, [pc, #8]	; (12864 <settings_init+0xc>)
   1285a:	2200      	movs	r2, #0
	list->tail = NULL;
   1285c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   12860:	f7ff bff2 	b.w	12848 <settings_store_init>
   12864:	20002dc0 	.word	0x20002dc0

00012868 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   12868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1286c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   1286e:	460e      	mov	r6, r1
   12870:	b109      	cbz	r1, 12876 <settings_parse_and_lookup+0xe>
		*next = NULL;
   12872:	2300      	movs	r3, #0
   12874:	600b      	str	r3, [r1, #0]
   12876:	4c1e      	ldr	r4, [pc, #120]	; (128f0 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12878:	f8df 807c 	ldr.w	r8, [pc, #124]	; 128f8 <settings_parse_and_lookup+0x90>
   1287c:	2500      	movs	r5, #0
   1287e:	4544      	cmp	r4, r8
   12880:	d308      	bcc.n	12894 <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12882:	4b1c      	ldr	r3, [pc, #112]	; (128f4 <settings_parse_and_lookup+0x8c>)
   12884:	681c      	ldr	r4, [r3, #0]
   12886:	b10c      	cbz	r4, 1288c <settings_parse_and_lookup+0x24>
   12888:	3c14      	subs	r4, #20
   1288a:	b9c4      	cbnz	r4, 128be <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   1288c:	4628      	mov	r0, r5
   1288e:	b002      	add	sp, #8
   12890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   12894:	6821      	ldr	r1, [r4, #0]
   12896:	aa01      	add	r2, sp, #4
   12898:	4638      	mov	r0, r7
   1289a:	f00e f97e 	bl	20b9a <settings_name_steq>
   1289e:	b160      	cbz	r0, 128ba <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
   128a0:	b925      	cbnz	r5, 128ac <settings_parse_and_lookup+0x44>
			if (next) {
   128a2:	b10e      	cbz	r6, 128a8 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
   128a4:	9b01      	ldr	r3, [sp, #4]
   128a6:	6033      	str	r3, [r6, #0]
   128a8:	4625      	mov	r5, r4
   128aa:	e006      	b.n	128ba <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   128ac:	6829      	ldr	r1, [r5, #0]
   128ae:	6820      	ldr	r0, [r4, #0]
   128b0:	2200      	movs	r2, #0
   128b2:	f00e f972 	bl	20b9a <settings_name_steq>
   128b6:	2800      	cmp	r0, #0
   128b8:	d1f3      	bne.n	128a2 <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   128ba:	3414      	adds	r4, #20
   128bc:	e7df      	b.n	1287e <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   128be:	6821      	ldr	r1, [r4, #0]
   128c0:	aa01      	add	r2, sp, #4
   128c2:	4638      	mov	r0, r7
   128c4:	f00e f969 	bl	20b9a <settings_name_steq>
   128c8:	b160      	cbz	r0, 128e4 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   128ca:	b925      	cbnz	r5, 128d6 <settings_parse_and_lookup+0x6e>
			if (next) {
   128cc:	b10e      	cbz	r6, 128d2 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   128ce:	9b01      	ldr	r3, [sp, #4]
   128d0:	6033      	str	r3, [r6, #0]
   128d2:	4625      	mov	r5, r4
   128d4:	e006      	b.n	128e4 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   128d6:	6829      	ldr	r1, [r5, #0]
   128d8:	6820      	ldr	r0, [r4, #0]
   128da:	2200      	movs	r2, #0
   128dc:	f00e f95d 	bl	20b9a <settings_name_steq>
   128e0:	2800      	cmp	r0, #0
   128e2:	d1f3      	bne.n	128cc <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   128e4:	f114 0f14 	cmn.w	r4, #20
   128e8:	d0d0      	beq.n	1288c <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   128ea:	6964      	ldr	r4, [r4, #20]
   128ec:	e7cb      	b.n	12886 <settings_parse_and_lookup+0x1e>
   128ee:	bf00      	nop
   128f0:	0002564c 	.word	0x0002564c
   128f4:	20002dc0 	.word	0x20002dc0
   128f8:	000256c4 	.word	0x000256c4

000128fc <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   128fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12900:	b085      	sub	sp, #20
   12902:	4605      	mov	r5, r0
   12904:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   12908:	9003      	str	r0, [sp, #12]
{
   1290a:	460c      	mov	r4, r1
   1290c:	4616      	mov	r6, r2
   1290e:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   12910:	f1b8 0f00 	cmp.w	r8, #0
   12914:	d018      	beq.n	12948 <settings_call_set_handler+0x4c>
   12916:	f8d8 1000 	ldr.w	r1, [r8]
   1291a:	b181      	cbz	r1, 1293e <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   1291c:	aa03      	add	r2, sp, #12
   1291e:	f00e f93c 	bl	20b9a <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   12922:	b960      	cbnz	r0, 1293e <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   12924:	2000      	movs	r0, #0
   12926:	e007      	b.n	12938 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   12928:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1292c:	9300      	str	r3, [sp, #0]
   1292e:	9803      	ldr	r0, [sp, #12]
   12930:	463b      	mov	r3, r7
   12932:	4632      	mov	r2, r6
   12934:	4621      	mov	r1, r4
   12936:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   12938:	b005      	add	sp, #20
   1293a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   1293e:	f8d8 9004 	ldr.w	r9, [r8, #4]
   12942:	f1b9 0f00 	cmp.w	r9, #0
   12946:	d1ef      	bne.n	12928 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   12948:	a903      	add	r1, sp, #12
   1294a:	4628      	mov	r0, r5
   1294c:	f7ff ff8c 	bl	12868 <settings_parse_and_lookup>
		if (!ch) {
   12950:	2800      	cmp	r0, #0
   12952:	d0e7      	beq.n	12924 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   12954:	f8d0 8008 	ldr.w	r8, [r0, #8]
   12958:	9803      	ldr	r0, [sp, #12]
   1295a:	4632      	mov	r2, r6
   1295c:	463b      	mov	r3, r7
   1295e:	4621      	mov	r1, r4
   12960:	47c0      	blx	r8
		if (rc != 0) {
   12962:	4606      	mov	r6, r0
   12964:	2800      	cmp	r0, #0
   12966:	d0dd      	beq.n	12924 <settings_call_set_handler+0x28>
   12968:	4b08      	ldr	r3, [pc, #32]	; (1298c <settings_call_set_handler+0x90>)
   1296a:	4c09      	ldr	r4, [pc, #36]	; (12990 <settings_call_set_handler+0x94>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1296c:	4628      	mov	r0, r5
   1296e:	1ae4      	subs	r4, r4, r3
   12970:	08e4      	lsrs	r4, r4, #3
   12972:	f7fe fdff 	bl	11574 <z_log_strdup>
			LOG_ERR("set-value failure. key: %s error(%d)",
   12976:	01a4      	lsls	r4, r4, #6
   12978:	f044 0401 	orr.w	r4, r4, #1
   1297c:	4601      	mov	r1, r0
   1297e:	4623      	mov	r3, r4
   12980:	4804      	ldr	r0, [pc, #16]	; (12994 <settings_call_set_handler+0x98>)
   12982:	4632      	mov	r2, r6
   12984:	f00d fbe3 	bl	2014e <log_2>
   12988:	e7cc      	b.n	12924 <settings_call_set_handler+0x28>
   1298a:	bf00      	nop
   1298c:	000256c4 	.word	0x000256c4
   12990:	000257c4 	.word	0x000257c4
   12994:	00026619 	.word	0x00026619

00012998 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   12998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1299a:	4c1a      	ldr	r4, [pc, #104]	; (12a04 <settings_commit_subtree+0x6c>)
   1299c:	4f1a      	ldr	r7, [pc, #104]	; (12a08 <settings_commit_subtree+0x70>)
{
   1299e:	4606      	mov	r6, r0
	rc = 0;
   129a0:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   129a2:	42bc      	cmp	r4, r7
   129a4:	d306      	bcc.n	129b4 <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   129a6:	4b19      	ldr	r3, [pc, #100]	; (12a0c <settings_commit_subtree+0x74>)
   129a8:	681c      	ldr	r4, [r3, #0]
   129aa:	b10c      	cbz	r4, 129b0 <settings_commit_subtree+0x18>
   129ac:	3c14      	subs	r4, #20
   129ae:	b99c      	cbnz	r4, 129d8 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   129b0:	4628      	mov	r0, r5
   129b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   129b4:	b91e      	cbnz	r6, 129be <settings_commit_subtree+0x26>
		if (ch->h_commit) {
   129b6:	68e3      	ldr	r3, [r4, #12]
   129b8:	b94b      	cbnz	r3, 129ce <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   129ba:	3414      	adds	r4, #20
   129bc:	e7f1      	b.n	129a2 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   129be:	6820      	ldr	r0, [r4, #0]
   129c0:	2200      	movs	r2, #0
   129c2:	4631      	mov	r1, r6
   129c4:	f00e f8e9 	bl	20b9a <settings_name_steq>
   129c8:	2800      	cmp	r0, #0
   129ca:	d1f4      	bne.n	129b6 <settings_commit_subtree+0x1e>
   129cc:	e7f5      	b.n	129ba <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
   129ce:	4798      	blx	r3
				rc = rc2;
   129d0:	2d00      	cmp	r5, #0
   129d2:	bf08      	it	eq
   129d4:	4605      	moveq	r5, r0
   129d6:	e7f0      	b.n	129ba <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   129d8:	b936      	cbnz	r6, 129e8 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
   129da:	68e3      	ldr	r3, [r4, #12]
   129dc:	b963      	cbnz	r3, 129f8 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
   129de:	f114 0f14 	cmn.w	r4, #20
   129e2:	d0e5      	beq.n	129b0 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   129e4:	6964      	ldr	r4, [r4, #20]
   129e6:	e7e0      	b.n	129aa <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   129e8:	6820      	ldr	r0, [r4, #0]
   129ea:	2200      	movs	r2, #0
   129ec:	4631      	mov	r1, r6
   129ee:	f00e f8d4 	bl	20b9a <settings_name_steq>
   129f2:	2800      	cmp	r0, #0
   129f4:	d1f1      	bne.n	129da <settings_commit_subtree+0x42>
   129f6:	e7f2      	b.n	129de <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
   129f8:	4798      	blx	r3
				rc = rc2;
   129fa:	2d00      	cmp	r5, #0
   129fc:	bf08      	it	eq
   129fe:	4605      	moveq	r5, r0
   12a00:	e7ed      	b.n	129de <settings_commit_subtree+0x46>
   12a02:	bf00      	nop
   12a04:	0002564c 	.word	0x0002564c
   12a08:	000256c4 	.word	0x000256c4
   12a0c:	20002dc0 	.word	0x20002dc0

00012a10 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   12a10:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   12a12:	4c06      	ldr	r4, [pc, #24]	; (12a2c <settings_subsys_init+0x1c>)
   12a14:	7823      	ldrb	r3, [r4, #0]
   12a16:	b93b      	cbnz	r3, 12a28 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   12a18:	f7ff ff1e 	bl	12858 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   12a1c:	f000 f864 	bl	12ae8 <settings_backend_init>

	if (!err) {
   12a20:	b908      	cbnz	r0, 12a26 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   12a22:	2301      	movs	r3, #1
   12a24:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   12a26:	bd10      	pop	{r4, pc}
		return 0;
   12a28:	2000      	movs	r0, #0
   12a2a:	e7fc      	b.n	12a26 <settings_subsys_init+0x16>
   12a2c:	20003358 	.word	0x20003358

00012a30 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   12a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   12a34:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   12a36:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 12ae4 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   12a3a:	3401      	adds	r4, #1
{
   12a3c:	b098      	sub	sp, #96	; 0x60
   12a3e:	4680      	mov	r8, r0
   12a40:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   12a42:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   12a44:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   12a48:	1e65      	subs	r5, r4, #1
   12a4a:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   12a4c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   12a50:	d045      	beq.n	12ade <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   12a52:	234a      	movs	r3, #74	; 0x4a
   12a54:	aa05      	add	r2, sp, #20
   12a56:	4629      	mov	r1, r5
   12a58:	4630      	mov	r0, r6
   12a5a:	f00e f870 	bl	20b3e <nvs_read>
   12a5e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   12a62:	343f      	adds	r4, #63	; 0x3f
   12a64:	b2a4      	uxth	r4, r4
   12a66:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   12a68:	4621      	mov	r1, r4
   12a6a:	2301      	movs	r3, #1
   12a6c:	f10d 020b 	add.w	r2, sp, #11
   12a70:	4630      	mov	r0, r6
   12a72:	f00e f864 	bl	20b3e <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   12a76:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   12a78:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   12a7a:	dc03      	bgt.n	12a84 <settings_nvs_load+0x54>
   12a7c:	2800      	cmp	r0, #0
   12a7e:	dc03      	bgt.n	12a88 <settings_nvs_load+0x58>
{
   12a80:	462c      	mov	r4, r5
   12a82:	e7e1      	b.n	12a48 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   12a84:	2800      	cmp	r0, #0
   12a86:	dc16      	bgt.n	12ab6 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   12a88:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   12a8c:	42ab      	cmp	r3, r5
   12a8e:	d109      	bne.n	12aa4 <settings_nvs_load+0x74>
				cf->last_name_id--;
   12a90:	4642      	mov	r2, r8
   12a92:	1e6b      	subs	r3, r5, #1
   12a94:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   12a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12a9c:	2302      	movs	r3, #2
   12a9e:	4630      	mov	r0, r6
   12aa0:	f7ff fcaa 	bl	123f8 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   12aa4:	4629      	mov	r1, r5
   12aa6:	4630      	mov	r0, r6
   12aa8:	f00e f845 	bl	20b36 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   12aac:	4621      	mov	r1, r4
   12aae:	4630      	mov	r0, r6
   12ab0:	f00e f841 	bl	20b36 <nvs_delete>
			continue;
   12ab4:	e7e4      	b.n	12a80 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   12ab6:	ab18      	add	r3, sp, #96	; 0x60
   12ab8:	441f      	add	r7, r3
   12aba:	2300      	movs	r3, #0
   12abc:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   12ac0:	4652      	mov	r2, sl
   12ac2:	f8cd 9000 	str.w	r9, [sp]
   12ac6:	ab03      	add	r3, sp, #12
   12ac8:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   12aca:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   12acc:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   12ad0:	f7ff ff14 	bl	128fc <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   12ad4:	2800      	cmp	r0, #0
   12ad6:	d0d3      	beq.n	12a80 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   12ad8:	b018      	add	sp, #96	; 0x60
   12ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12ade:	2000      	movs	r0, #0
	return ret;
   12ae0:	e7fa      	b.n	12ad8 <settings_nvs_load+0xa8>
   12ae2:	bf00      	nop
   12ae4:	00020c0d 	.word	0x00020c0d

00012ae8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   12ae8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   12aea:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   12aec:	4669      	mov	r1, sp
   12aee:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   12af0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   12af2:	f7ff fde5 	bl	126c0 <flash_area_open>
	if (rc) {
   12af6:	4604      	mov	r4, r0
   12af8:	2800      	cmp	r0, #0
   12afa:	d136      	bne.n	12b6a <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   12afc:	aa02      	add	r2, sp, #8
   12afe:	a901      	add	r1, sp, #4
   12b00:	2004      	movs	r0, #4
   12b02:	f7ff fdf1 	bl	126e8 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   12b06:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   12b0a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   12b0c:	d02d      	beq.n	12b6a <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   12b0e:	b138      	cbz	r0, 12b20 <settings_backend_init+0x38>
   12b10:	340c      	adds	r4, #12
   12b12:	d005      	beq.n	12b20 <settings_backend_init+0x38>
		k_panic();
   12b14:	4040      	eors	r0, r0
   12b16:	f380 8811 	msr	BASEPRI, r0
   12b1a:	f04f 0004 	mov.w	r0, #4
   12b1e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   12b20:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   12b22:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   12b26:	d223      	bcs.n	12b70 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   12b28:	9a00      	ldr	r2, [sp, #0]
   12b2a:	2300      	movs	r3, #0
   12b2c:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   12b2e:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   12b30:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   12b32:	4285      	cmp	r5, r0
   12b34:	b29c      	uxth	r4, r3
   12b36:	d303      	bcc.n	12b40 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   12b38:	3301      	adds	r3, #1
   12b3a:	2b08      	cmp	r3, #8
   12b3c:	d1f8      	bne.n	12b30 <settings_backend_init+0x48>
   12b3e:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   12b40:	4d0d      	ldr	r5, [pc, #52]	; (12b78 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   12b42:	6853      	ldr	r3, [r2, #4]
   12b44:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   12b46:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   12b48:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   12b4a:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   12b4c:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   12b4e:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   12b50:	f00e f8f3 	bl	20d3a <settings_nvs_backend_init>
	if (rc) {
   12b54:	4604      	mov	r4, r0
   12b56:	b940      	cbnz	r0, 12b6a <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   12b58:	4e08      	ldr	r6, [pc, #32]	; (12b7c <settings_backend_init+0x94>)
   12b5a:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   12b5c:	4628      	mov	r0, r5
   12b5e:	f7ff fe11 	bl	12784 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   12b62:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   12b64:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   12b66:	f7ff fe1b 	bl	127a0 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   12b6a:	4620      	mov	r0, r4
   12b6c:	b004      	add	sp, #16
   12b6e:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   12b70:	f06f 0420 	mvn.w	r4, #32
   12b74:	e7f9      	b.n	12b6a <settings_backend_init+0x82>
   12b76:	bf00      	nop
   12b78:	20002dc8 	.word	0x20002dc8
   12b7c:	2000050c 	.word	0x2000050c

00012b80 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b82:	4605      	mov	r5, r0
	__asm__ volatile(
   12b84:	f04f 0340 	mov.w	r3, #64	; 0x40
   12b88:	f3ef 8611 	mrs	r6, BASEPRI
   12b8c:	f383 8811 	msr	BASEPRI, r3
   12b90:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12b94:	4b0b      	ldr	r3, [pc, #44]	; (12bc4 <pm_state_notify+0x44>)
   12b96:	681c      	ldr	r4, [r3, #0]
   12b98:	2c00      	cmp	r4, #0
   12b9a:	bf38      	it	cc
   12b9c:	2400      	movcc	r4, #0
   12b9e:	b15c      	cbz	r4, 12bb8 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   12ba0:	4f09      	ldr	r7, [pc, #36]	; (12bc8 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   12ba2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12ba6:	2d00      	cmp	r5, #0
   12ba8:	bf08      	it	eq
   12baa:	4613      	moveq	r3, r2
		if (callback) {
   12bac:	b10b      	cbz	r3, 12bb2 <pm_state_notify+0x32>
			callback(z_power_state.state);
   12bae:	7838      	ldrb	r0, [r7, #0]
   12bb0:	4798      	blx	r3
   12bb2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12bb4:	2c00      	cmp	r4, #0
   12bb6:	d1f4      	bne.n	12ba2 <pm_state_notify+0x22>
	__asm__ volatile(
   12bb8:	f386 8811 	msr	BASEPRI, r6
   12bbc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12bc2:	bf00      	nop
   12bc4:	20002e08 	.word	0x20002e08
   12bc8:	20002e10 	.word	0x20002e10

00012bcc <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   12bcc:	4b08      	ldr	r3, [pc, #32]	; (12bf0 <pm_system_resume+0x24>)
{
   12bce:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   12bd0:	681c      	ldr	r4, [r3, #0]
   12bd2:	b95c      	cbnz	r4, 12bec <pm_system_resume+0x20>
		post_ops_done = 1;
   12bd4:	2201      	movs	r2, #1
   12bd6:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   12bd8:	4b06      	ldr	r3, [pc, #24]	; (12bf4 <pm_system_resume+0x28>)
   12bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12bde:	f00f fb69 	bl	222b4 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   12be2:	4620      	mov	r0, r4
	}
}
   12be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   12be8:	f7ff bfca 	b.w	12b80 <pm_state_notify>
}
   12bec:	bd10      	pop	{r4, pc}
   12bee:	bf00      	nop
   12bf0:	2000051c 	.word	0x2000051c
   12bf4:	20002e10 	.word	0x20002e10

00012bf8 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   12bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bfa:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   12bfc:	466e      	mov	r6, sp
   12bfe:	4601      	mov	r1, r0
{
   12c00:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   12c02:	4630      	mov	r0, r6
   12c04:	f00e f8b5 	bl	20d72 <pm_policy_next_state>
   12c08:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12c0c:	4c14      	ldr	r4, [pc, #80]	; (12c60 <pm_system_suspend+0x68>)
   12c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   12c12:	7820      	ldrb	r0, [r4, #0]
   12c14:	b308      	cbz	r0, 12c5a <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   12c16:	4b13      	ldr	r3, [pc, #76]	; (12c64 <pm_system_suspend+0x6c>)
   12c18:	2100      	movs	r1, #0
   12c1a:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   12c1c:	1c6b      	adds	r3, r5, #1
   12c1e:	d00e      	beq.n	12c3e <pm_system_suspend+0x46>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12c20:	4811      	ldr	r0, [pc, #68]	; (12c68 <pm_system_suspend+0x70>)
   12c22:	4617      	mov	r7, r2
   12c24:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   12c28:	2100      	movs	r1, #0
   12c2a:	4a10      	ldr	r2, [pc, #64]	; (12c6c <pm_system_suspend+0x74>)
   12c2c:	2300      	movs	r3, #0
   12c2e:	fbe6 0107 	umlal	r0, r1, r6, r7
   12c32:	f7ed fe43 	bl	8bc <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12c36:	2101      	movs	r1, #1
   12c38:	1a28      	subs	r0, r5, r0
   12c3a:	f012 fa27 	bl	2508c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12c3e:	f00b ff89 	bl	1eb54 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   12c42:	2001      	movs	r0, #1
   12c44:	f7ff ff9c 	bl	12b80 <pm_state_notify>
	pm_power_state_set(z_power_state);
   12c48:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12c4c:	f00f fb1f 	bl	2228e <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   12c50:	f7ff ffbc 	bl	12bcc <pm_system_resume>
	k_sched_unlock();
   12c54:	f00c f870 	bl	1ed38 <k_sched_unlock>

	return z_power_state.state;
   12c58:	7820      	ldrb	r0, [r4, #0]
}
   12c5a:	b005      	add	sp, #20
   12c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c5e:	bf00      	nop
   12c60:	20002e10 	.word	0x20002e10
   12c64:	2000051c 	.word	0x2000051c
   12c68:	000f423f 	.word	0x000f423f
   12c6c:	000f4240 	.word	0x000f4240

00012c70 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   12c70:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   12c72:	4c04      	ldr	r4, [pc, #16]	; (12c84 <rtt_console_init+0x14>)
   12c74:	4620      	mov	r0, r4
   12c76:	f7fd fec1 	bl	109fc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   12c7a:	4620      	mov	r0, r4
   12c7c:	f001 f97c 	bl	13f78 <__stdout_hook_install>

	return 0;
}
   12c80:	2000      	movs	r0, #0
   12c82:	bd10      	pop	{r4, pc}
   12c84:	00012c89 	.word	0x00012c89

00012c88 <rtt_console_out>:
{
   12c88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   12c8c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 12cf0 <rtt_console_out+0x68>
   12c90:	4e16      	ldr	r6, [pc, #88]	; (12cec <rtt_console_out+0x64>)
	char c = (char)character;
   12c92:	f88d 0007 	strb.w	r0, [sp, #7]
{
   12c96:	4604      	mov	r4, r0
	char c = (char)character;
   12c98:	2503      	movs	r5, #3
   12c9a:	f04f 33ff 	mov.w	r3, #4294967295
   12c9e:	f04f 32ff 	mov.w	r2, #4294967295
   12ca2:	4640      	mov	r0, r8
   12ca4:	f00b fbce 	bl	1e444 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   12ca8:	2201      	movs	r2, #1
   12caa:	f10d 0107 	add.w	r1, sp, #7
   12cae:	2000      	movs	r0, #0
   12cb0:	f00b f8f6 	bl	1dea0 <SEGGER_RTT_WriteNoLock>
   12cb4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   12cb6:	4640      	mov	r0, r8
   12cb8:	f00b fc3c 	bl	1e534 <z_impl_k_mutex_unlock>
		if (cnt) {
   12cbc:	b12f      	cbz	r7, 12cca <rtt_console_out+0x42>
			host_present = true;
   12cbe:	2301      	movs	r3, #1
   12cc0:	7033      	strb	r3, [r6, #0]
}
   12cc2:	4620      	mov	r0, r4
   12cc4:	b002      	add	sp, #8
   12cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   12cca:	7833      	ldrb	r3, [r6, #0]
   12ccc:	2b00      	cmp	r3, #0
   12cce:	d0f8      	beq.n	12cc2 <rtt_console_out+0x3a>
			if (max_cnt) {
   12cd0:	3d01      	subs	r5, #1
   12cd2:	d008      	beq.n	12ce6 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   12cd4:	f011 fec7 	bl	24a66 <k_is_in_isr>
   12cd8:	2800      	cmp	r0, #0
   12cda:	d1de      	bne.n	12c9a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   12cdc:	2100      	movs	r1, #0
   12cde:	2042      	movs	r0, #66	; 0x42
   12ce0:	f00c f9c6 	bl	1f070 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   12ce4:	e7d9      	b.n	12c9a <rtt_console_out+0x12>
				host_present = false;
   12ce6:	7035      	strb	r5, [r6, #0]
   12ce8:	e7eb      	b.n	12cc2 <rtt_console_out+0x3a>
   12cea:	bf00      	nop
   12cec:	20003359 	.word	0x20003359
   12cf0:	20000830 	.word	0x20000830

00012cf4 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12cf4:	b570      	push	{r4, r5, r6, lr}
   12cf6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   12cf8:	480d      	ldr	r0, [pc, #52]	; (12d30 <onoff_stop+0x3c>)
   12cfa:	1a23      	subs	r3, r4, r0
   12cfc:	109a      	asrs	r2, r3, #2
   12cfe:	4b0d      	ldr	r3, [pc, #52]	; (12d34 <onoff_stop+0x40>)
   12d00:	4353      	muls	r3, r2
   12d02:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   12d04:	250c      	movs	r5, #12
   12d06:	435d      	muls	r5, r3
   12d08:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   12d0c:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   12d0e:	4418      	add	r0, r3
   12d10:	2140      	movs	r1, #64	; 0x40
   12d12:	f00e f83c 	bl	20d8e <set_off_state>
	if (err < 0) {
   12d16:	1e01      	subs	r1, r0, #0
   12d18:	db04      	blt.n	12d24 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   12d1a:	4b07      	ldr	r3, [pc, #28]	; (12d38 <onoff_stop+0x44>)
   12d1c:	442b      	add	r3, r5
   12d1e:	685b      	ldr	r3, [r3, #4]
   12d20:	4798      	blx	r3
	return 0;
   12d22:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   12d24:	4620      	mov	r0, r4
   12d26:	4633      	mov	r3, r6
}
   12d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   12d2c:	4718      	bx	r3
   12d2e:	bf00      	nop
   12d30:	20002e30 	.word	0x20002e30
   12d34:	b6db6db7 	.word	0xb6db6db7
   12d38:	00025ac8 	.word	0x00025ac8

00012d3c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12d40:	4c0f      	ldr	r4, [pc, #60]	; (12d80 <onoff_start+0x44>)
   12d42:	4d10      	ldr	r5, [pc, #64]	; (12d84 <onoff_start+0x48>)
   12d44:	1b03      	subs	r3, r0, r4
   12d46:	109b      	asrs	r3, r3, #2
   12d48:	435d      	muls	r5, r3
   12d4a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   12d4c:	250c      	movs	r5, #12
   12d4e:	435d      	muls	r5, r3
{
   12d50:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   12d52:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   12d56:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   12d58:	4420      	add	r0, r4
   12d5a:	2140      	movs	r1, #64	; 0x40
   12d5c:	f00e f830 	bl	20dc0 <set_starting_state>
	if (err < 0) {
   12d60:	1e01      	subs	r1, r0, #0
   12d62:	db08      	blt.n	12d76 <onoff_start+0x3a>
	subdata->cb = cb;
   12d64:	4b08      	ldr	r3, [pc, #32]	; (12d88 <onoff_start+0x4c>)
   12d66:	442c      	add	r4, r5
	subdata->user_data = user_data;
   12d68:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   12d6c:	4b07      	ldr	r3, [pc, #28]	; (12d8c <onoff_start+0x50>)
   12d6e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   12d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   12d74:	4718      	bx	r3
		notify(mgr, err);
   12d76:	4638      	mov	r0, r7
   12d78:	4633      	mov	r3, r6
}
   12d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   12d7e:	4718      	bx	r3
   12d80:	20002e30 	.word	0x20002e30
   12d84:	b6db6db7 	.word	0xb6db6db7
   12d88:	00020e23 	.word	0x00020e23
   12d8c:	00025ac8 	.word	0x00025ac8

00012d90 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12d90:	2200      	movs	r2, #0
{
   12d92:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12d94:	2101      	movs	r1, #1
{
   12d96:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12d98:	4610      	mov	r0, r2
   12d9a:	f000 fc47 	bl	1362c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   12d9e:	2000      	movs	r0, #0
   12da0:	f000 fc12 	bl	135c8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   12da4:	480f      	ldr	r0, [pc, #60]	; (12de4 <clk_init+0x54>)
   12da6:	f00a fd5b 	bl	1d860 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12daa:	4b0f      	ldr	r3, [pc, #60]	; (12de8 <clk_init+0x58>)
   12dac:	4298      	cmp	r0, r3
   12dae:	d115      	bne.n	12ddc <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   12db0:	f011 fd30 	bl	24814 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   12db4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   12db6:	490d      	ldr	r1, [pc, #52]	; (12dec <clk_init+0x5c>)
   12db8:	4630      	mov	r0, r6
   12dba:	f00c fdcb 	bl	1f954 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   12dbe:	2800      	cmp	r0, #0
   12dc0:	db0b      	blt.n	12dda <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12dc2:	2501      	movs	r5, #1
   12dc4:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   12dc6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12dc8:	4908      	ldr	r1, [pc, #32]	; (12dec <clk_init+0x5c>)
   12dca:	f104 001c 	add.w	r0, r4, #28
   12dce:	f00c fdc1 	bl	1f954 <onoff_manager_init>
		if (err < 0) {
   12dd2:	2800      	cmp	r0, #0
   12dd4:	db01      	blt.n	12dda <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12dd6:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   12dd8:	2000      	movs	r0, #0
}
   12dda:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   12ddc:	f06f 0004 	mvn.w	r0, #4
   12de0:	e7fb      	b.n	12dda <clk_init+0x4a>
   12de2:	bf00      	nop
   12de4:	00012e25 	.word	0x00012e25
   12de8:	0bad0000 	.word	0x0bad0000
   12dec:	00025ae0 	.word	0x00025ae0

00012df0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   12df0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   12df2:	230c      	movs	r3, #12
   12df4:	4809      	ldr	r0, [pc, #36]	; (12e1c <clkstarted_handle.constprop.0+0x2c>)
   12df6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   12df8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   12dfa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   12dfc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   12e00:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   12e02:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   12e04:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   12e06:	4418      	add	r0, r3
   12e08:	f00d fff8 	bl	20dfc <set_on_state>
	if (callback) {
   12e0c:	b12d      	cbz	r5, 12e1a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   12e0e:	4632      	mov	r2, r6
   12e10:	462b      	mov	r3, r5
   12e12:	4803      	ldr	r0, [pc, #12]	; (12e20 <clkstarted_handle.constprop.0+0x30>)
}
   12e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   12e18:	4718      	bx	r3
}
   12e1a:	bd70      	pop	{r4, r5, r6, pc}
   12e1c:	20002e30 	.word	0x20002e30
   12e20:	20000738 	.word	0x20000738

00012e24 <clock_event_handler>:
	switch (event) {
   12e24:	b110      	cbz	r0, 12e2c <clock_event_handler+0x8>
   12e26:	2801      	cmp	r0, #1
   12e28:	d004      	beq.n	12e34 <clock_event_handler+0x10>
   12e2a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   12e2c:	4b03      	ldr	r3, [pc, #12]	; (12e3c <clock_event_handler+0x18>)
   12e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   12e30:	075b      	lsls	r3, r3, #29
   12e32:	d101      	bne.n	12e38 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   12e34:	f7ff bfdc 	b.w	12df0 <clkstarted_handle.constprop.0>
}
   12e38:	4770      	bx	lr
   12e3a:	bf00      	nop
   12e3c:	20002e30 	.word	0x20002e30

00012e40 <generic_hfclk_start>:
{
   12e40:	b508      	push	{r3, lr}
	__asm__ volatile(
   12e42:	f04f 0340 	mov.w	r3, #64	; 0x40
   12e46:	f3ef 8111 	mrs	r1, BASEPRI
   12e4a:	f383 8811 	msr	BASEPRI, r3
   12e4e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12e52:	4a12      	ldr	r2, [pc, #72]	; (12e9c <generic_hfclk_start+0x5c>)
   12e54:	6813      	ldr	r3, [r2, #0]
   12e56:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   12e5a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   12e5e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12e60:	d00c      	beq.n	12e7c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12e66:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12e6a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12e6e:	f013 0301 	ands.w	r3, r3, #1
   12e72:	d003      	beq.n	12e7c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   12e74:	480a      	ldr	r0, [pc, #40]	; (12ea0 <generic_hfclk_start+0x60>)
   12e76:	f00d ffc1 	bl	20dfc <set_on_state>
			already_started = true;
   12e7a:	2301      	movs	r3, #1
	__asm__ volatile(
   12e7c:	f381 8811 	msr	BASEPRI, r1
   12e80:	f3bf 8f6f 	isb	sy
	if (already_started) {
   12e84:	b123      	cbz	r3, 12e90 <generic_hfclk_start+0x50>
}
   12e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   12e8a:	2000      	movs	r0, #0
   12e8c:	f7ff bfb0 	b.w	12df0 <clkstarted_handle.constprop.0>
}
   12e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12e94:	2001      	movs	r0, #1
   12e96:	f00a bcd3 	b.w	1d840 <nrfx_clock_start>
   12e9a:	bf00      	nop
   12e9c:	20002e80 	.word	0x20002e80
   12ea0:	20002e70 	.word	0x20002e70

00012ea4 <lfclk_start>:
{
   12ea4:	b510      	push	{r4, lr}
	if (!once) {
   12ea6:	4c07      	ldr	r4, [pc, #28]	; (12ec4 <lfclk_start+0x20>)
   12ea8:	7823      	ldrb	r3, [r4, #0]
   12eaa:	b92b      	cbnz	r3, 12eb8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   12eac:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   12eb0:	f012 f90a 	bl	250c8 <z_impl_k_busy_wait>
		once = true;
   12eb4:	2301      	movs	r3, #1
   12eb6:	7023      	strb	r3, [r4, #0]
}
   12eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   12ebc:	2000      	movs	r0, #0
   12ebe:	f00a bcbf 	b.w	1d840 <nrfx_clock_start>
   12ec2:	bf00      	nop
   12ec4:	2000335a 	.word	0x2000335a

00012ec8 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12ec8:	4b09      	ldr	r3, [pc, #36]	; (12ef0 <generic_hfclk_stop+0x28>)
   12eca:	f3bf 8f5b 	dmb	ish
   12ece:	e853 2f00 	ldrex	r2, [r3]
   12ed2:	f022 0102 	bic.w	r1, r2, #2
   12ed6:	e843 1000 	strex	r0, r1, [r3]
   12eda:	2800      	cmp	r0, #0
   12edc:	d1f7      	bne.n	12ece <generic_hfclk_stop+0x6>
   12ede:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   12ee2:	07d3      	lsls	r3, r2, #31
   12ee4:	d402      	bmi.n	12eec <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12ee6:	2001      	movs	r0, #1
   12ee8:	f011 bc8f 	b.w	2480a <nrfx_clock_stop>
}
   12eec:	4770      	bx	lr
   12eee:	bf00      	nop
   12ef0:	20002e80 	.word	0x20002e80

00012ef4 <api_blocking_start>:
{
   12ef4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12ef6:	2200      	movs	r2, #0
   12ef8:	2301      	movs	r3, #1
   12efa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   12efe:	ab04      	add	r3, sp, #16
   12f00:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12f04:	4a09      	ldr	r2, [pc, #36]	; (12f2c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12f06:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12f0a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12f0c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12f10:	f00d ffaa 	bl	20e68 <api_start>
	if (err < 0) {
   12f14:	2800      	cmp	r0, #0
   12f16:	db05      	blt.n	12f24 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   12f18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12f1c:	2300      	movs	r3, #0
   12f1e:	4668      	mov	r0, sp
   12f20:	f00b fba8 	bl	1e674 <z_impl_k_sem_take>
}
   12f24:	b007      	add	sp, #28
   12f26:	f85d fb04 	ldr.w	pc, [sp], #4
   12f2a:	bf00      	nop
   12f2c:	00020e3b 	.word	0x00020e3b

00012f30 <z_nrf_clock_control_get_onoff>:
}
   12f30:	4a02      	ldr	r2, [pc, #8]	; (12f3c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   12f32:	b2c3      	uxtb	r3, r0
}
   12f34:	201c      	movs	r0, #28
   12f36:	fb03 2000 	mla	r0, r3, r0, r2
   12f3a:	4770      	bx	lr
   12f3c:	20002e30 	.word	0x20002e30

00012f40 <z_nrf_clock_control_lf_on>:
{
   12f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12f42:	4928      	ldr	r1, [pc, #160]	; (12fe4 <z_nrf_clock_control_lf_on+0xa4>)
   12f44:	f3bf 8f5b 	dmb	ish
   12f48:	4606      	mov	r6, r0
   12f4a:	2201      	movs	r2, #1
   12f4c:	e851 3f00 	ldrex	r3, [r1]
   12f50:	e841 2000 	strex	r0, r2, [r1]
   12f54:	2800      	cmp	r0, #0
   12f56:	d1f9      	bne.n	12f4c <z_nrf_clock_control_lf_on+0xc>
   12f58:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   12f5c:	b933      	cbnz	r3, 12f6c <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   12f5e:	4922      	ldr	r1, [pc, #136]	; (12fe8 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   12f60:	4822      	ldr	r0, [pc, #136]	; (12fec <z_nrf_clock_control_lf_on+0xac>)
   12f62:	604b      	str	r3, [r1, #4]
   12f64:	60cb      	str	r3, [r1, #12]
   12f66:	608a      	str	r2, [r1, #8]
   12f68:	f00c fd07 	bl	1f97a <onoff_request>
	switch (start_mode) {
   12f6c:	1e73      	subs	r3, r6, #1
   12f6e:	2b01      	cmp	r3, #1
   12f70:	d820      	bhi.n	12fb4 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12f72:	f011 fd78 	bl	24a66 <k_is_in_isr>
   12f76:	4604      	mov	r4, r0
   12f78:	b910      	cbnz	r0, 12f80 <z_nrf_clock_control_lf_on+0x40>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   12f7a:	4b1d      	ldr	r3, [pc, #116]	; (12ff0 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   12f7c:	781b      	ldrb	r3, [r3, #0]
   12f7e:	bb53      	cbnz	r3, 12fd6 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   12f80:	f04f 0340 	mov.w	r3, #64	; 0x40
   12f84:	f3ef 8511 	mrs	r5, BASEPRI
   12f88:	f383 8811 	msr	BASEPRI, r3
   12f8c:	f3bf 8f6f 	isb	sy
   12f90:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12f92:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   12f96:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12f9a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   12f9e:	03d2      	lsls	r2, r2, #15
   12fa0:	d509      	bpl.n	12fb6 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   12fa2:	079b      	lsls	r3, r3, #30
   12fa4:	d001      	beq.n	12faa <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12fa6:	2e01      	cmp	r6, #1
   12fa8:	d105      	bne.n	12fb6 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   12faa:	b174      	cbz	r4, 12fca <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   12fac:	f385 8811 	msr	BASEPRI, r5
   12fb0:	f3bf 8f6f 	isb	sy
}
   12fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   12fb6:	b11c      	cbz	r4, 12fc0 <z_nrf_clock_control_lf_on+0x80>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12fb8:	4628      	mov	r0, r5
   12fba:	f000 fbbf 	bl	1373c <arch_cpu_atomic_idle>
}
   12fbe:	e7ea      	b.n	12f96 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   12fc0:	2100      	movs	r1, #0
   12fc2:	2021      	movs	r0, #33	; 0x21
   12fc4:	f00c f854 	bl	1f070 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12fc8:	e7e5      	b.n	12f96 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   12fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12fce:	2202      	movs	r2, #2
   12fd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12fd4:	e7ee      	b.n	12fb4 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   12fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12fda:	2202      	movs	r2, #2
   12fdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   12fe0:	4605      	mov	r5, r0
}
   12fe2:	e7d6      	b.n	12f92 <z_nrf_clock_control_lf_on+0x52>
   12fe4:	20002e84 	.word	0x20002e84
   12fe8:	20002e20 	.word	0x20002e20
   12fec:	20002e4c 	.word	0x20002e4c
   12ff0:	20004e75 	.word	0x20004e75

00012ff4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   12ff4:	4a04      	ldr	r2, [pc, #16]	; (13008 <sys_clock_timeout_handler+0x14>)
   12ff6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   12ff8:	1ac8      	subs	r0, r1, r3
   12ffa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   12ffe:	4403      	add	r3, r0
   13000:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   13002:	f00c b9c3 	b.w	1f38c <sys_clock_announce>
   13006:	bf00      	nop
   13008:	20002e98 	.word	0x20002e98

0001300c <set_absolute_alarm>:
{
   1300c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13010:	0086      	lsls	r6, r0, #2
   13012:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13016:	f100 0450 	add.w	r4, r0, #80	; 0x50
   1301a:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   1301e:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   13020:	f8df 807c 	ldr.w	r8, [pc, #124]	; 130a0 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   13024:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13028:	b2a4      	uxth	r4, r4
   1302a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1302e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   13032:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   13036:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1303a:	4087      	lsls	r7, r0
   1303c:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   1303e:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13042:	eba3 030a 	sub.w	r3, r3, sl
   13046:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1304a:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1304e:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   13050:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   13054:	d102      	bne.n	1305c <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   13056:	2013      	movs	r0, #19
   13058:	f012 f836 	bl	250c8 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1305c:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   13060:	1aab      	subs	r3, r5, r2
   13062:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   13066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1306a:	bf88      	it	hi
   1306c:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1306e:	2300      	movs	r3, #0
   13070:	6023      	str	r3, [r4, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   13072:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   13074:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13078:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1307c:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   13080:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   13084:	459a      	cmp	sl, r3
   13086:	d006      	beq.n	13096 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   13088:	1aeb      	subs	r3, r5, r3
   1308a:	3b02      	subs	r3, #2
   1308c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   13090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   13094:	d801      	bhi.n	1309a <set_absolute_alarm+0x8e>
}
   13096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   1309a:	462b      	mov	r3, r5
   1309c:	e7cf      	b.n	1303e <set_absolute_alarm+0x32>
   1309e:	bf00      	nop
   130a0:	40011000 	.word	0x40011000

000130a4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   130a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   130a6:	4e10      	ldr	r6, [pc, #64]	; (130e8 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   130a8:	4f10      	ldr	r7, [pc, #64]	; (130ec <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   130aa:	2500      	movs	r5, #0
   130ac:	4b10      	ldr	r3, [pc, #64]	; (130f0 <rtc_nrf_isr+0x4c>)
   130ae:	2000      	movs	r0, #0
   130b0:	681c      	ldr	r4, [r3, #0]
   130b2:	461a      	mov	r2, r3
   130b4:	b105      	cbz	r5, 130b8 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   130b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   130b8:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   130bc:	03c9      	lsls	r1, r1, #15
   130be:	d5fa      	bpl.n	130b6 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   130c0:	6839      	ldr	r1, [r7, #0]
   130c2:	2900      	cmp	r1, #0
   130c4:	d0f7      	beq.n	130b6 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   130c6:	603d      	str	r5, [r7, #0]
   130c8:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   130ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   130ce:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
   130d2:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   130d6:	2501      	movs	r5, #1
			if (handler) {
   130d8:	b11c      	cbz	r4, 130e2 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
   130da:	685a      	ldr	r2, [r3, #4]
   130dc:	6018      	str	r0, [r3, #0]
   130de:	47a0      	blx	r4
   130e0:	e7e4      	b.n	130ac <rtc_nrf_isr+0x8>
   130e2:	6014      	str	r4, [r2, #0]
}
   130e4:	e7e7      	b.n	130b6 <rtc_nrf_isr+0x12>
   130e6:	bf00      	nop
   130e8:	40011000 	.word	0x40011000
   130ec:	40011140 	.word	0x40011140
   130f0:	20002e8c 	.word	0x20002e8c

000130f4 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   130f4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   130f6:	4d10      	ldr	r5, [pc, #64]	; (13138 <sys_clock_driver_init+0x44>)
   130f8:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   130fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   130fe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   13102:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13106:	4b0d      	ldr	r3, [pc, #52]	; (1313c <sys_clock_driver_init+0x48>)
   13108:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1310c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13110:	2101      	movs	r1, #1
   13112:	4622      	mov	r2, r4
   13114:	2011      	movs	r0, #17
   13116:	f000 fa89 	bl	1362c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1311a:	2011      	movs	r0, #17
   1311c:	f000 fa54 	bl	135c8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13120:	4a07      	ldr	r2, [pc, #28]	; (13140 <sys_clock_driver_init+0x4c>)
   13122:	2301      	movs	r3, #1
   13124:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13126:	4a07      	ldr	r2, [pc, #28]	; (13144 <sys_clock_driver_init+0x50>)
   13128:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   1312a:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   1312c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   1312e:	f7ff ff07 	bl	12f40 <z_nrf_clock_control_lf_on>

	return 0;
}
   13132:	4620      	mov	r0, r4
   13134:	bd38      	pop	{r3, r4, r5, pc}
   13136:	bf00      	nop
   13138:	40011000 	.word	0x40011000
   1313c:	e000e100 	.word	0xe000e100
   13140:	40011008 	.word	0x40011008
   13144:	20002e94 	.word	0x20002e94

00013148 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13148:	4b13      	ldr	r3, [pc, #76]	; (13198 <sys_clock_set_timeout+0x50>)
   1314a:	f1b0 3fff 	cmp.w	r0, #4294967295
   1314e:	bf08      	it	eq
   13150:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13152:	3801      	subs	r0, #1
   13154:	2800      	cmp	r0, #0
   13156:	dd1c      	ble.n	13192 <sys_clock_set_timeout+0x4a>
   13158:	4298      	cmp	r0, r3
   1315a:	bfa8      	it	ge
   1315c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   1315e:	4b0f      	ldr	r3, [pc, #60]	; (1319c <sys_clock_set_timeout+0x54>)
   13160:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   13164:	4b0e      	ldr	r3, [pc, #56]	; (131a0 <sys_clock_set_timeout+0x58>)
   13166:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   13168:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   1316a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   1316e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   13172:	bf18      	it	ne
   13174:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   13176:	4a0b      	ldr	r2, [pc, #44]	; (131a4 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13178:	3301      	adds	r3, #1
   1317a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   1317c:	480a      	ldr	r0, [pc, #40]	; (131a8 <sys_clock_set_timeout+0x60>)
   1317e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   13180:	2000      	movs	r0, #0
   13182:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   13184:	4a04      	ldr	r2, [pc, #16]	; (13198 <sys_clock_set_timeout+0x50>)
   13186:	4293      	cmp	r3, r2
   13188:	bf94      	ite	ls
   1318a:	18c9      	addls	r1, r1, r3
   1318c:	1889      	addhi	r1, r1, r2
   1318e:	f7ff bf3d 	b.w	1300c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13192:	2000      	movs	r0, #0
   13194:	e7e3      	b.n	1315e <sys_clock_set_timeout+0x16>
   13196:	bf00      	nop
   13198:	007fffff 	.word	0x007fffff
   1319c:	40011000 	.word	0x40011000
   131a0:	20002e98 	.word	0x20002e98
   131a4:	20002e8c 	.word	0x20002e8c
   131a8:	00012ff5 	.word	0x00012ff5

000131ac <sys_clock_elapsed>:
   131ac:	4b04      	ldr	r3, [pc, #16]	; (131c0 <sys_clock_elapsed+0x14>)
   131ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   131b2:	4b04      	ldr	r3, [pc, #16]	; (131c4 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   131b4:	681b      	ldr	r3, [r3, #0]
   131b6:	1ac0      	subs	r0, r0, r3
}
   131b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   131bc:	4770      	bx	lr
   131be:	bf00      	nop
   131c0:	40011000 	.word	0x40011000
   131c4:	20002e98 	.word	0x20002e98

000131c8 <sys_clock_cycle_get_32>:
	__asm__ volatile(
   131c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   131cc:	f3ef 8211 	mrs	r2, BASEPRI
   131d0:	f383 8811 	msr	BASEPRI, r3
   131d4:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   131d8:	4906      	ldr	r1, [pc, #24]	; (131f4 <sys_clock_cycle_get_32+0x2c>)
   131da:	4b07      	ldr	r3, [pc, #28]	; (131f8 <sys_clock_cycle_get_32+0x30>)
   131dc:	6808      	ldr	r0, [r1, #0]
   131de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   131e2:	f382 8811 	msr	BASEPRI, r2
   131e6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   131ea:	1a1b      	subs	r3, r3, r0
   131ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   131f0:	4418      	add	r0, r3
   131f2:	4770      	bx	lr
   131f4:	20002e98 	.word	0x20002e98
   131f8:	40011000 	.word	0x40011000

000131fc <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   131fc:	4b01      	ldr	r3, [pc, #4]	; (13204 <uECC_get_rng+0x8>)
   131fe:	6818      	ldr	r0, [r3, #0]
   13200:	4770      	bx	lr
   13202:	bf00      	nop
   13204:	20000520 	.word	0x20000520

00013208 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   13208:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1320a:	2208      	movs	r2, #8
{
   1320c:	b089      	sub	sp, #36	; 0x24
   1320e:	460c      	mov	r4, r1
   13210:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   13212:	f00e f807 	bl	21224 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   13216:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13218:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   1321a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1321c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   1321e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   13220:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   13222:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   13224:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   13226:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   13228:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   1322a:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1322c:	2308      	movs	r3, #8
   1322e:	466a      	mov	r2, sp
   13230:	4669      	mov	r1, sp
   13232:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   13234:	e9cd 7701 	strd	r7, r7, [sp, #4]
   13238:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1323a:	f00d fef5 	bl	21028 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1323e:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13240:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13242:	466a      	mov	r2, sp
   13244:	4631      	mov	r1, r6
   13246:	4630      	mov	r0, r6
   13248:	f00d feee 	bl	21028 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   1324c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1324e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   13250:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13252:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   13254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13256:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   13258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1325a:	4405      	add	r5, r0
	tmp[7] = 0;
   1325c:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13260:	466a      	mov	r2, sp
   13262:	2308      	movs	r3, #8
   13264:	4669      	mov	r1, sp
   13266:	4668      	mov	r0, sp
   13268:	f00d fede 	bl	21028 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1326c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1326e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13270:	2308      	movs	r3, #8
   13272:	466a      	mov	r2, sp
   13274:	4630      	mov	r0, r6
   13276:	f00d fed7 	bl	21028 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   1327a:	6a23      	ldr	r3, [r4, #32]
   1327c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   1327e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13280:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   13282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13284:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   13286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13288:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1328a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1328c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1328e:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13290:	2308      	movs	r3, #8
   13292:	466a      	mov	r2, sp
   13294:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   13296:	e9cd 7704 	strd	r7, r7, [sp, #16]
   1329a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1329c:	f00d fec4 	bl	21028 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   132a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   132a2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   132a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   132a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   132a8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   132aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   132ac:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   132ae:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   132b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   132b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   132b4:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   132b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   132ba:	6a23      	ldr	r3, [r4, #32]
   132bc:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   132be:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   132c0:	2308      	movs	r3, #8
   132c2:	466a      	mov	r2, sp
   132c4:	4630      	mov	r0, r6
   132c6:	f00d feaf 	bl	21028 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   132ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   132cc:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   132ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
   132d0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   132d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132d4:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   132d6:	6a23      	ldr	r3, [r4, #32]
   132d8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   132da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   132dc:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   132de:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   132e0:	2308      	movs	r3, #8
   132e2:	466a      	mov	r2, sp
   132e4:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   132e6:	e9cd 7704 	strd	r7, r7, [sp, #16]
   132ea:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   132ec:	f00d ffd0 	bl	21290 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   132f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   132f2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   132f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132f6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   132f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   132fa:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   132fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   132fe:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   13300:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13302:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   13304:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13306:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13308:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1330a:	2308      	movs	r3, #8
   1330c:	466a      	mov	r2, sp
   1330e:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   13310:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13314:	f00d ffbc 	bl	21290 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   13318:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1331a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   1331c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1331e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   13320:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13322:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   13324:	6a23      	ldr	r3, [r4, #32]
   13326:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   13328:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1332a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   1332c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   1332e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   13332:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13334:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13336:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13338:	2308      	movs	r3, #8
   1333a:	466a      	mov	r2, sp
   1333c:	4630      	mov	r0, r6
   1333e:	f00d ffa7 	bl	21290 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   13342:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13344:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   13346:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   13348:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   1334c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1334e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   13350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13352:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   13354:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   13356:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   1335a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1335c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1335e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13360:	2308      	movs	r3, #8
   13362:	466a      	mov	r2, sp
   13364:	4630      	mov	r0, r6
   13366:	f00d ff93 	bl	21290 <uECC_vli_sub>

	if (carry < 0) {
   1336a:	1a2d      	subs	r5, r5, r0
   1336c:	d410      	bmi.n	13390 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   1336e:	4c0d      	ldr	r4, [pc, #52]	; (133a4 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   13370:	b935      	cbnz	r5, 13380 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   13372:	2208      	movs	r2, #8
   13374:	4631      	mov	r1, r6
   13376:	4620      	mov	r0, r4
   13378:	f00d ff60 	bl	2123c <uECC_vli_cmp_unsafe>
		while (carry || 
   1337c:	2801      	cmp	r0, #1
   1337e:	d00f      	beq.n	133a0 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   13380:	2308      	movs	r3, #8
   13382:	4622      	mov	r2, r4
   13384:	4631      	mov	r1, r6
   13386:	4630      	mov	r0, r6
   13388:	f00d ff82 	bl	21290 <uECC_vli_sub>
   1338c:	1a2d      	subs	r5, r5, r0
   1338e:	e7ef      	b.n	13370 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   13390:	4a04      	ldr	r2, [pc, #16]	; (133a4 <vli_mmod_fast_secp256r1+0x19c>)
   13392:	2308      	movs	r3, #8
   13394:	4631      	mov	r1, r6
   13396:	4630      	mov	r0, r6
   13398:	f00d fe46 	bl	21028 <uECC_vli_add>
		while (carry < 0);
   1339c:	182d      	adds	r5, r5, r0
   1339e:	d4f8      	bmi.n	13392 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   133a0:	b009      	add	sp, #36	; 0x24
   133a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   133a4:	00025af0 	.word	0x00025af0

000133a8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   133a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   133aa:	4e26      	ldr	r6, [pc, #152]	; (13444 <tc_aes128_set_encrypt_key+0x9c>)
{
   133ac:	4607      	mov	r7, r0
   133ae:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   133b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   133b2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   133b4:	ad01      	add	r5, sp, #4
   133b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   133b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   133ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   133bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   133c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   133c4:	4638      	mov	r0, r7
   133c6:	2f00      	cmp	r7, #0
   133c8:	d038      	beq.n	1343c <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   133ca:	2c00      	cmp	r4, #0
   133cc:	d038      	beq.n	13440 <tc_aes128_set_encrypt_key+0x98>
   133ce:	1f38      	subs	r0, r7, #4
   133d0:	4621      	mov	r1, r4
   133d2:	4602      	mov	r2, r0
   133d4:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   133d6:	784b      	ldrb	r3, [r1, #1]
   133d8:	780d      	ldrb	r5, [r1, #0]
   133da:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   133dc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   133e0:	78cd      	ldrb	r5, [r1, #3]
   133e2:	432b      	orrs	r3, r5
   133e4:	788d      	ldrb	r5, [r1, #2]
   133e6:	3104      	adds	r1, #4
   133e8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   133ec:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   133ee:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   133f2:	d1f0      	bne.n	133d6 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   133f4:	4c14      	ldr	r4, [pc, #80]	; (13448 <tc_aes128_set_encrypt_key+0xa0>)
   133f6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   133f8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   133fa:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   133fc:	d116      	bne.n	1342c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   133fe:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13402:	5ca5      	ldrb	r5, [r4, r2]
   13404:	0e1a      	lsrs	r2, r3, #24
   13406:	5ca2      	ldrb	r2, [r4, r2]
   13408:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1340c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13410:	b2db      	uxtb	r3, r3
   13412:	5d65      	ldrb	r5, [r4, r5]
   13414:	5ce3      	ldrb	r3, [r4, r3]
   13416:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1341a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1341e:	ad0c      	add	r5, sp, #48	; 0x30
   13420:	f021 0303 	bic.w	r3, r1, #3
   13424:	442b      	add	r3, r5
   13426:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1342a:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1342c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13430:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13432:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13434:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   13436:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13438:	d1de      	bne.n	133f8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1343a:	2001      	movs	r0, #1
}
   1343c:	b00d      	add	sp, #52	; 0x34
   1343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13440:	4620      	mov	r0, r4
   13442:	e7fb      	b.n	1343c <tc_aes128_set_encrypt_key+0x94>
   13444:	00025834 	.word	0x00025834
   13448:	0002666e 	.word	0x0002666e

0001344c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1344c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13450:	4615      	mov	r5, r2
   13452:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13454:	4606      	mov	r6, r0
   13456:	2800      	cmp	r0, #0
   13458:	d058      	beq.n	1350c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1345a:	2900      	cmp	r1, #0
   1345c:	d059      	beq.n	13512 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1345e:	2a00      	cmp	r2, #0
   13460:	d059      	beq.n	13516 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   13462:	2310      	movs	r3, #16
   13464:	460a      	mov	r2, r1
   13466:	4668      	mov	r0, sp
   13468:	4619      	mov	r1, r3
   1346a:	f00d fd19 	bl	20ea0 <_copy>
	add_round_key(state, s->words);
   1346e:	4629      	mov	r1, r5
   13470:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   13472:	4c2a      	ldr	r4, [pc, #168]	; (1351c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   13474:	f00e fc1e 	bl	21cb4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   13478:	f105 0710 	add.w	r7, r5, #16
   1347c:	46a1      	mov	r9, r4
   1347e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   13480:	46e8      	mov	r8, sp
{
   13482:	466a      	mov	r2, sp
   13484:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   13486:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13488:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1348a:	5c61      	ldrb	r1, [r4, r1]
   1348c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13490:	d1f9      	bne.n	13486 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   13492:	4668      	mov	r0, sp
   13494:	f00e fc53 	bl	21d3e <shift_rows>
	mult_row_column(t, s);
   13498:	4669      	mov	r1, sp
   1349a:	a804      	add	r0, sp, #16
   1349c:	f00e fc88 	bl	21db0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   134a0:	a901      	add	r1, sp, #4
   134a2:	a805      	add	r0, sp, #20
   134a4:	f00e fc84 	bl	21db0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   134a8:	a902      	add	r1, sp, #8
   134aa:	a806      	add	r0, sp, #24
   134ac:	f00e fc80 	bl	21db0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   134b0:	a903      	add	r1, sp, #12
   134b2:	a807      	add	r0, sp, #28
   134b4:	f00e fc7c 	bl	21db0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   134b8:	2310      	movs	r3, #16
   134ba:	4619      	mov	r1, r3
   134bc:	eb0d 0203 	add.w	r2, sp, r3
   134c0:	4668      	mov	r0, sp
   134c2:	f00d fced 	bl	20ea0 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   134c6:	4639      	mov	r1, r7
   134c8:	4668      	mov	r0, sp
   134ca:	3710      	adds	r7, #16
   134cc:	f00e fbf2 	bl	21cb4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   134d0:	42af      	cmp	r7, r5
   134d2:	d1d5      	bne.n	13480 <tc_aes_encrypt+0x34>
   134d4:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   134d6:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   134da:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   134dc:	f819 3003 	ldrb.w	r3, [r9, r3]
   134e0:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   134e4:	d1f7      	bne.n	134d6 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   134e6:	4668      	mov	r0, sp
   134e8:	f00e fc29 	bl	21d3e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   134ec:	4629      	mov	r1, r5
   134ee:	4668      	mov	r0, sp
   134f0:	f00e fbe0 	bl	21cb4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   134f4:	2310      	movs	r3, #16
   134f6:	4619      	mov	r1, r3
   134f8:	466a      	mov	r2, sp
   134fa:	4630      	mov	r0, r6
   134fc:	f00d fcd0 	bl	20ea0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   13500:	4668      	mov	r0, sp
   13502:	2210      	movs	r2, #16
   13504:	4621      	mov	r1, r4
   13506:	f00d fcd8 	bl	20eba <_set>

	return TC_CRYPTO_SUCCESS;
   1350a:	2001      	movs	r0, #1
}
   1350c:	b009      	add	sp, #36	; 0x24
   1350e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   13512:	4608      	mov	r0, r1
   13514:	e7fa      	b.n	1350c <tc_aes_encrypt+0xc0>
   13516:	4610      	mov	r0, r2
   13518:	e7f8      	b.n	1350c <tc_aes_encrypt+0xc0>
   1351a:	bf00      	nop
   1351c:	0002666e 	.word	0x0002666e

00013520 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13520:	4a09      	ldr	r2, [pc, #36]	; (13548 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   13522:	490a      	ldr	r1, [pc, #40]	; (1354c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   13524:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13526:	6809      	ldr	r1, [r1, #0]
   13528:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1352a:	4909      	ldr	r1, [pc, #36]	; (13550 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1352c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1352e:	684b      	ldr	r3, [r1, #4]
   13530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13534:	604b      	str	r3, [r1, #4]
   13536:	2300      	movs	r3, #0
   13538:	f383 8811 	msr	BASEPRI, r3
   1353c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13540:	6893      	ldr	r3, [r2, #8]
}
   13542:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   13544:	4770      	bx	lr
   13546:	bf00      	nop
   13548:	200032a8 	.word	0x200032a8
   1354c:	000260d4 	.word	0x000260d4
   13550:	e000ed00 	.word	0xe000ed00

00013554 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13554:	4912      	ldr	r1, [pc, #72]	; (135a0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13556:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13558:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1355c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1355e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13562:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13566:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13568:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1356c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13570:	4f0c      	ldr	r7, [pc, #48]	; (135a4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13572:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13576:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   13578:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1357a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1357c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1357e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13580:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13582:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13586:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13588:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1358a:	f000 fc29 	bl	13de0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1358e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13592:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13596:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1359a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1359e:	4770      	bx	lr
    ldr r1, =_kernel
   135a0:	200032a8 	.word	0x200032a8
    ldr v4, =_SCS_ICSR
   135a4:	e000ed04 	.word	0xe000ed04

000135a8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   135a8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   135ac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   135ae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   135b2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   135b6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   135b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   135bc:	2902      	cmp	r1, #2
    beq _oops
   135be:	d0ff      	beq.n	135c0 <_oops>

000135c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   135c0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   135c2:	f00e fd38 	bl	22036 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   135c6:	bd01      	pop	{r0, pc}

000135c8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   135c8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   135ca:	2b00      	cmp	r3, #0
   135cc:	db08      	blt.n	135e0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   135ce:	2201      	movs	r2, #1
   135d0:	f000 001f 	and.w	r0, r0, #31
   135d4:	fa02 f000 	lsl.w	r0, r2, r0
   135d8:	095b      	lsrs	r3, r3, #5
   135da:	4a02      	ldr	r2, [pc, #8]	; (135e4 <arch_irq_enable+0x1c>)
   135dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   135e0:	4770      	bx	lr
   135e2:	bf00      	nop
   135e4:	e000e100 	.word	0xe000e100

000135e8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   135e8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   135ea:	2b00      	cmp	r3, #0
   135ec:	db0d      	blt.n	1360a <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   135ee:	2201      	movs	r2, #1
   135f0:	095b      	lsrs	r3, r3, #5
   135f2:	f000 001f 	and.w	r0, r0, #31
   135f6:	fa02 f000 	lsl.w	r0, r2, r0
   135fa:	3320      	adds	r3, #32
   135fc:	4a03      	ldr	r2, [pc, #12]	; (1360c <arch_irq_disable+0x24>)
   135fe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13606:	f3bf 8f6f 	isb	sy
}
   1360a:	4770      	bx	lr
   1360c:	e000e100 	.word	0xe000e100

00013610 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13610:	4b05      	ldr	r3, [pc, #20]	; (13628 <arch_irq_is_enabled+0x18>)
   13612:	0942      	lsrs	r2, r0, #5
   13614:	f000 001f 	and.w	r0, r0, #31
   13618:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1361c:	2301      	movs	r3, #1
   1361e:	fa03 f000 	lsl.w	r0, r3, r0
}
   13622:	4010      	ands	r0, r2
   13624:	4770      	bx	lr
   13626:	bf00      	nop
   13628:	e000e100 	.word	0xe000e100

0001362c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1362c:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1362e:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   13630:	bf54      	ite	pl
   13632:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13634:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13636:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13638:	bfac      	ite	ge
   1363a:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1363e:	4a07      	ldrlt	r2, [pc, #28]	; (1365c <z_arm_irq_priority_set+0x30>)
   13640:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13644:	bfac      	ite	ge
   13646:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1364a:	f000 000f 	andlt.w	r0, r0, #15
   1364e:	b2db      	uxtb	r3, r3
   13650:	bfb4      	ite	lt
   13652:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13654:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13658:	4770      	bx	lr
   1365a:	bf00      	nop
   1365c:	e000ed14 	.word	0xe000ed14

00013660 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13660:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13662:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13664:	4b04      	ldr	r3, [pc, #16]	; (13678 <_arch_isr_direct_pm+0x18>)
   13666:	6a18      	ldr	r0, [r3, #32]
   13668:	b118      	cbz	r0, 13672 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1366a:	2200      	movs	r2, #0
   1366c:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   1366e:	f011 fa07 	bl	24a80 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13672:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13674:	bd08      	pop	{r3, pc}
   13676:	bf00      	nop
   13678:	200032a8 	.word	0x200032a8

0001367c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1367c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13680:	9b00      	ldr	r3, [sp, #0]
   13682:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13686:	490a      	ldr	r1, [pc, #40]	; (136b0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13688:	9b01      	ldr	r3, [sp, #4]
   1368a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1368e:	9b02      	ldr	r3, [sp, #8]
   13690:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13694:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1369c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   136a0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   136a4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   136a6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   136a8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   136aa:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   136ac:	4770      	bx	lr
   136ae:	bf00      	nop
   136b0:	0001fa57 	.word	0x0001fa57

000136b4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   136b4:	4a0b      	ldr	r2, [pc, #44]	; (136e4 <z_check_thread_stack_fail+0x30>)
{
   136b6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   136b8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   136ba:	b190      	cbz	r0, 136e2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   136bc:	f113 0f16 	cmn.w	r3, #22
   136c0:	6e80      	ldr	r0, [r0, #104]	; 0x68
   136c2:	d005      	beq.n	136d0 <z_check_thread_stack_fail+0x1c>
   136c4:	f1a0 0220 	sub.w	r2, r0, #32
   136c8:	429a      	cmp	r2, r3
   136ca:	d806      	bhi.n	136da <z_check_thread_stack_fail+0x26>
   136cc:	4283      	cmp	r3, r0
   136ce:	d204      	bcs.n	136da <z_check_thread_stack_fail+0x26>
   136d0:	4281      	cmp	r1, r0
   136d2:	bf2c      	ite	cs
   136d4:	2100      	movcs	r1, #0
   136d6:	2101      	movcc	r1, #1
   136d8:	e000      	b.n	136dc <z_check_thread_stack_fail+0x28>
   136da:	2100      	movs	r1, #0
   136dc:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   136de:	bf08      	it	eq
   136e0:	2000      	moveq	r0, #0
}
   136e2:	4770      	bx	lr
   136e4:	200032a8 	.word	0x200032a8

000136e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   136e8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   136ea:	4b09      	ldr	r3, [pc, #36]	; (13710 <arch_switch_to_main_thread+0x28>)
   136ec:	6098      	str	r0, [r3, #8]
{
   136ee:	460d      	mov	r5, r1
   136f0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   136f2:	f000 fb75 	bl	13de0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   136f6:	4620      	mov	r0, r4
   136f8:	f385 8809 	msr	PSP, r5
   136fc:	2100      	movs	r1, #0
   136fe:	b663      	cpsie	if
   13700:	f381 8811 	msr	BASEPRI, r1
   13704:	f3bf 8f6f 	isb	sy
   13708:	2200      	movs	r2, #0
   1370a:	2300      	movs	r3, #0
   1370c:	f00c f9a3 	bl	1fa56 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13710:	200032a8 	.word	0x200032a8

00013714 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13714:	4901      	ldr	r1, [pc, #4]	; (1371c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13716:	2210      	movs	r2, #16
	str	r2, [r1]
   13718:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1371a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1371c:	e000ed10 	.word	0xe000ed10

00013720 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13720:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13722:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13724:	f380 8811 	msr	BASEPRI, r0
	isb
   13728:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1372c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13730:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13732:	b662      	cpsie	i
	isb
   13734:	f3bf 8f6f 	isb	sy

	bx	lr
   13738:	4770      	bx	lr
   1373a:	bf00      	nop

0001373c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1373c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1373e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13740:	f381 8811 	msr	BASEPRI, r1

	wfe
   13744:	bf20      	wfe

	msr	BASEPRI, r0
   13746:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1374a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1374c:	4770      	bx	lr
   1374e:	bf00      	nop

00013750 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13750:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13752:	4606      	mov	r6, r0

	if (esf != NULL) {
   13754:	460c      	mov	r4, r1
   13756:	b301      	cbz	r1, 1379a <z_arm_fatal_error+0x4a>
   13758:	4b13      	ldr	r3, [pc, #76]	; (137a8 <z_arm_fatal_error+0x58>)
   1375a:	4d14      	ldr	r5, [pc, #80]	; (137ac <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1375c:	4814      	ldr	r0, [pc, #80]	; (137b0 <z_arm_fatal_error+0x60>)
   1375e:	1aed      	subs	r5, r5, r3
   13760:	08ed      	lsrs	r5, r5, #3
   13762:	01ad      	lsls	r5, r5, #6
   13764:	f045 0501 	orr.w	r5, r5, #1
   13768:	f8ad 5000 	strh.w	r5, [sp]
   1376c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   13770:	6809      	ldr	r1, [r1, #0]
   13772:	f00c fd05 	bl	20180 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13776:	f8ad 5000 	strh.w	r5, [sp]
   1377a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1377e:	68e1      	ldr	r1, [r4, #12]
   13780:	480c      	ldr	r0, [pc, #48]	; (137b4 <z_arm_fatal_error+0x64>)
   13782:	f00c fcfd 	bl	20180 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13786:	69e1      	ldr	r1, [r4, #28]
   13788:	480b      	ldr	r0, [pc, #44]	; (137b8 <z_arm_fatal_error+0x68>)
   1378a:	462a      	mov	r2, r5
   1378c:	f00c fccb 	bl	20126 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13790:	69a1      	ldr	r1, [r4, #24]
   13792:	480a      	ldr	r0, [pc, #40]	; (137bc <z_arm_fatal_error+0x6c>)
   13794:	462a      	mov	r2, r5
   13796:	f00c fcc6 	bl	20126 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1379a:	4621      	mov	r1, r4
   1379c:	4630      	mov	r0, r6
}
   1379e:	b002      	add	sp, #8
   137a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   137a4:	f00a bc0c 	b.w	1dfc0 <z_fatal_error>
   137a8:	000256c4 	.word	0x000256c4
   137ac:	0002579c 	.word	0x0002579c
   137b0:	0002676e 	.word	0x0002676e
   137b4:	0002679d 	.word	0x0002679d
   137b8:	000267cc 	.word	0x000267cc
   137bc:	000267db 	.word	0x000267db

000137c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   137c0:	bf30      	wfi
    b z_SysNmiOnReset
   137c2:	f7ff bffd 	b.w	137c0 <z_SysNmiOnReset>
   137c6:	bf00      	nop

000137c8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   137c8:	4a0b      	ldr	r2, [pc, #44]	; (137f8 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   137ca:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   137cc:	4b0b      	ldr	r3, [pc, #44]	; (137fc <z_arm_prep_c+0x34>)
   137ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   137d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   137d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   137d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   137dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   137e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   137e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   137e8:	f00a fc48 	bl	1e07c <z_bss_zero>
	z_data_copy();
   137ec:	f00b fcdc 	bl	1f1a8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   137f0:	f000 facc 	bl	13d8c <z_arm_interrupt_init>
	z_cstart();
   137f4:	f00a fc66 	bl	1e0c4 <z_cstart>
   137f8:	00000000 	.word	0x00000000
   137fc:	e000ed00 	.word	0xe000ed00

00013800 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13800:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13802:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13804:	4a0b      	ldr	r2, [pc, #44]	; (13834 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13806:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   13808:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1380a:	bf1e      	ittt	ne
	movne	r1, #0
   1380c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1380e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   13810:	f011 f936 	blne	24a80 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13814:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13816:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1381a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1381e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13822:	4905      	ldr	r1, [pc, #20]	; (13838 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13824:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13826:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13828:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1382a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1382e:	4903      	ldr	r1, [pc, #12]	; (1383c <_isr_wrapper+0x3c>)
	bx r1
   13830:	4708      	bx	r1
   13832:	0000      	.short	0x0000
	ldr r2, =_kernel
   13834:	200032a8 	.word	0x200032a8
	ldr r1, =_sw_isr_table
   13838:	000254c8 	.word	0x000254c8
	ldr r1, =z_arm_int_exit
   1383c:	00013ced 	.word	0x00013ced

00013840 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13840:	2000      	movs	r0, #0
    msr CONTROL, r0
   13842:	f380 8814 	msr	CONTROL, r0
    isb
   13846:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1384a:	f00e fd1e 	bl	2228a <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1384e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13850:	490d      	ldr	r1, [pc, #52]	; (13888 <__start+0x48>)
    str r0, [r1]
   13852:	6008      	str	r0, [r1, #0]
    dsb
   13854:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13858:	480c      	ldr	r0, [pc, #48]	; (1388c <__start+0x4c>)
    msr msp, r0
   1385a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1385e:	f000 fa63 	bl	13d28 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13862:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13864:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13868:	4809      	ldr	r0, [pc, #36]	; (13890 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1386a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   1386e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13870:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13874:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13878:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1387a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1387c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13880:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13884:	f7ff ffa0 	bl	137c8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13888:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1388c:	20007160 	.word	0x20007160
    ldr r0, =z_interrupt_stacks
   13890:	200072e0 	.word	0x200072e0

00013894 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13894:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13898:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1389c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1389e:	4672      	mov	r2, lr
	bl z_arm_fault
   138a0:	f000 f94e 	bl	13b40 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   138a4:	bd01      	pop	{r0, pc}
   138a6:	bf00      	nop

000138a8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   138a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   138ac:	4b35      	ldr	r3, [pc, #212]	; (13984 <mem_manage_fault+0xdc>)
   138ae:	4c36      	ldr	r4, [pc, #216]	; (13988 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   138b0:	4d36      	ldr	r5, [pc, #216]	; (1398c <mem_manage_fault+0xe4>)
   138b2:	1ae4      	subs	r4, r4, r3
   138b4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   138b6:	01a4      	lsls	r4, r4, #6
   138b8:	f044 0901 	orr.w	r9, r4, #1
{
   138bc:	4607      	mov	r7, r0
   138be:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   138c0:	4833      	ldr	r0, [pc, #204]	; (13990 <mem_manage_fault+0xe8>)
   138c2:	4649      	mov	r1, r9
{
   138c4:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   138c6:	f00c fc21 	bl	2010c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   138ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   138cc:	06d3      	lsls	r3, r2, #27
   138ce:	d503      	bpl.n	138d8 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   138d0:	4830      	ldr	r0, [pc, #192]	; (13994 <mem_manage_fault+0xec>)
   138d2:	4649      	mov	r1, r9
   138d4:	f00c fc1a 	bl	2010c <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   138d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   138da:	0718      	lsls	r0, r3, #28
   138dc:	d504      	bpl.n	138e8 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   138de:	482e      	ldr	r0, [pc, #184]	; (13998 <mem_manage_fault+0xf0>)
   138e0:	f044 0101 	orr.w	r1, r4, #1
   138e4:	f00c fc12 	bl	2010c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   138e8:	4d28      	ldr	r5, [pc, #160]	; (1398c <mem_manage_fault+0xe4>)
   138ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   138ec:	0799      	lsls	r1, r3, #30
   138ee:	d423      	bmi.n	13938 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   138f0:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   138f4:	4d25      	ldr	r5, [pc, #148]	; (1398c <mem_manage_fault+0xe4>)
   138f6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   138f8:	07d3      	lsls	r3, r2, #31
   138fa:	d504      	bpl.n	13906 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   138fc:	4827      	ldr	r0, [pc, #156]	; (1399c <mem_manage_fault+0xf4>)
   138fe:	f044 0101 	orr.w	r1, r4, #1
   13902:	f00c fc03 	bl	2010c <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13906:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13908:	0698      	lsls	r0, r3, #26
   1390a:	d504      	bpl.n	13916 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   1390c:	4824      	ldr	r0, [pc, #144]	; (139a0 <mem_manage_fault+0xf8>)
   1390e:	f044 0101 	orr.w	r1, r4, #1
   13912:	f00c fbfb 	bl	2010c <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13916:	4b1d      	ldr	r3, [pc, #116]	; (1398c <mem_manage_fault+0xe4>)
   13918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1391a:	06d1      	lsls	r1, r2, #27
   1391c:	d424      	bmi.n	13968 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1391e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13920:	0792      	lsls	r2, r2, #30
   13922:	d421      	bmi.n	13968 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13924:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13926:	4a19      	ldr	r2, [pc, #100]	; (1398c <mem_manage_fault+0xe4>)
   13928:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1392a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1392e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13930:	2300      	movs	r3, #0
   13932:	7033      	strb	r3, [r6, #0]

	return reason;
}
   13934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   13938:	f044 0a01 	orr.w	sl, r4, #1
   1393c:	4819      	ldr	r0, [pc, #100]	; (139a4 <mem_manage_fault+0xfc>)
   1393e:	4651      	mov	r1, sl
   13940:	f00c fbe4 	bl	2010c <log_0>
		uint32_t temp = SCB->MMFAR;
   13944:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13948:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1394a:	061a      	lsls	r2, r3, #24
   1394c:	d5d0      	bpl.n	138f0 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1394e:	4816      	ldr	r0, [pc, #88]	; (139a8 <mem_manage_fault+0x100>)
   13950:	4652      	mov	r2, sl
   13952:	4649      	mov	r1, r9
   13954:	f00c fbe7 	bl	20126 <log_1>
			if (from_hard_fault != 0) {
   13958:	f1b8 0f00 	cmp.w	r8, #0
   1395c:	d0ca      	beq.n	138f4 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1395e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13964:	62ab      	str	r3, [r5, #40]	; 0x28
   13966:	e7c5      	b.n	138f4 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13968:	685b      	ldr	r3, [r3, #4]
   1396a:	051b      	lsls	r3, r3, #20
   1396c:	d5da      	bpl.n	13924 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1396e:	4639      	mov	r1, r7
   13970:	4648      	mov	r0, r9
   13972:	f7ff fe9f 	bl	136b4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13976:	2800      	cmp	r0, #0
   13978:	d0d4      	beq.n	13924 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1397a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1397e:	2002      	movs	r0, #2
   13980:	e7d1      	b.n	13926 <mem_manage_fault+0x7e>
   13982:	bf00      	nop
   13984:	000256c4 	.word	0x000256c4
   13988:	0002579c 	.word	0x0002579c
   1398c:	e000ed00 	.word	0xe000ed00
   13990:	00026809 	.word	0x00026809
   13994:	0002681f 	.word	0x0002681f
   13998:	00026852 	.word	0x00026852
   1399c:	00026893 	.word	0x00026893
   139a0:	000268b2 	.word	0x000268b2
   139a4:	00026865 	.word	0x00026865
   139a8:	0002687d 	.word	0x0002687d

000139ac <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   139ac:	b570      	push	{r4, r5, r6, lr}
   139ae:	4b23      	ldr	r3, [pc, #140]	; (13a3c <usage_fault.isra.0+0x90>)
   139b0:	4c23      	ldr	r4, [pc, #140]	; (13a40 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   139b2:	4d24      	ldr	r5, [pc, #144]	; (13a44 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   139b4:	4824      	ldr	r0, [pc, #144]	; (13a48 <usage_fault.isra.0+0x9c>)
   139b6:	1ae4      	subs	r4, r4, r3
   139b8:	08e4      	lsrs	r4, r4, #3
   139ba:	01a4      	lsls	r4, r4, #6
   139bc:	f044 0601 	orr.w	r6, r4, #1
   139c0:	4631      	mov	r1, r6
   139c2:	f00c fba3 	bl	2010c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   139c6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   139c8:	0193      	lsls	r3, r2, #6
   139ca:	d503      	bpl.n	139d4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   139cc:	481f      	ldr	r0, [pc, #124]	; (13a4c <usage_fault.isra.0+0xa0>)
   139ce:	4631      	mov	r1, r6
   139d0:	f00c fb9c 	bl	2010c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   139d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   139d6:	01dd      	lsls	r5, r3, #7
   139d8:	d504      	bpl.n	139e4 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   139da:	481d      	ldr	r0, [pc, #116]	; (13a50 <usage_fault.isra.0+0xa4>)
   139dc:	f044 0101 	orr.w	r1, r4, #1
   139e0:	f00c fb94 	bl	2010c <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   139e4:	4d17      	ldr	r5, [pc, #92]	; (13a44 <usage_fault.isra.0+0x98>)
   139e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   139e8:	0310      	lsls	r0, r2, #12
   139ea:	d504      	bpl.n	139f6 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   139ec:	4819      	ldr	r0, [pc, #100]	; (13a54 <usage_fault.isra.0+0xa8>)
   139ee:	f044 0101 	orr.w	r1, r4, #1
   139f2:	f00c fb8b 	bl	2010c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   139f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   139f8:	0359      	lsls	r1, r3, #13
   139fa:	d504      	bpl.n	13a06 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   139fc:	4816      	ldr	r0, [pc, #88]	; (13a58 <usage_fault.isra.0+0xac>)
   139fe:	f044 0101 	orr.w	r1, r4, #1
   13a02:	f00c fb83 	bl	2010c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13a06:	4d0f      	ldr	r5, [pc, #60]	; (13a44 <usage_fault.isra.0+0x98>)
   13a08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13a0a:	0392      	lsls	r2, r2, #14
   13a0c:	d504      	bpl.n	13a18 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13a0e:	4813      	ldr	r0, [pc, #76]	; (13a5c <usage_fault.isra.0+0xb0>)
   13a10:	f044 0101 	orr.w	r1, r4, #1
   13a14:	f00c fb7a 	bl	2010c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13a18:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a1a:	03db      	lsls	r3, r3, #15
   13a1c:	d504      	bpl.n	13a28 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13a1e:	4810      	ldr	r0, [pc, #64]	; (13a60 <usage_fault.isra.0+0xb4>)
   13a20:	f044 0101 	orr.w	r1, r4, #1
   13a24:	f00c fb72 	bl	2010c <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13a28:	4a06      	ldr	r2, [pc, #24]	; (13a44 <usage_fault.isra.0+0x98>)
   13a2a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13a2c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13a30:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13a34:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13a36:	2000      	movs	r0, #0
   13a38:	bd70      	pop	{r4, r5, r6, pc}
   13a3a:	bf00      	nop
   13a3c:	000256c4 	.word	0x000256c4
   13a40:	0002579c 	.word	0x0002579c
   13a44:	e000ed00 	.word	0xe000ed00
   13a48:	000268e1 	.word	0x000268e1
   13a4c:	000268f9 	.word	0x000268f9
   13a50:	0002690c 	.word	0x0002690c
   13a54:	00026926 	.word	0x00026926
   13a58:	00026944 	.word	0x00026944
   13a5c:	00026969 	.word	0x00026969
   13a60:	00026983 	.word	0x00026983

00013a64 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a68:	4b2a      	ldr	r3, [pc, #168]	; (13b14 <bus_fault.isra.0+0xb0>)
   13a6a:	4c2b      	ldr	r4, [pc, #172]	; (13b18 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13a6c:	4d2b      	ldr	r5, [pc, #172]	; (13b1c <bus_fault.isra.0+0xb8>)
   13a6e:	1ae4      	subs	r4, r4, r3
   13a70:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13a72:	01a4      	lsls	r4, r4, #6
   13a74:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13a78:	4607      	mov	r7, r0
   13a7a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13a7c:	4828      	ldr	r0, [pc, #160]	; (13b20 <bus_fault.isra.0+0xbc>)
   13a7e:	4641      	mov	r1, r8
   13a80:	f00c fb44 	bl	2010c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13a84:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13a86:	04d1      	lsls	r1, r2, #19
   13a88:	d503      	bpl.n	13a92 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   13a8a:	4826      	ldr	r0, [pc, #152]	; (13b24 <bus_fault.isra.0+0xc0>)
   13a8c:	4641      	mov	r1, r8
   13a8e:	f00c fb3d 	bl	2010c <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13a92:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a94:	051a      	lsls	r2, r3, #20
   13a96:	d504      	bpl.n	13aa2 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13a98:	4823      	ldr	r0, [pc, #140]	; (13b28 <bus_fault.isra.0+0xc4>)
   13a9a:	f044 0101 	orr.w	r1, r4, #1
   13a9e:	f00c fb35 	bl	2010c <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13aa2:	4d1e      	ldr	r5, [pc, #120]	; (13b1c <bus_fault.isra.0+0xb8>)
   13aa4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13aa6:	059b      	lsls	r3, r3, #22
   13aa8:	d512      	bpl.n	13ad0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   13aaa:	f044 0801 	orr.w	r8, r4, #1
   13aae:	481f      	ldr	r0, [pc, #124]	; (13b2c <bus_fault.isra.0+0xc8>)
   13ab0:	4641      	mov	r1, r8
   13ab2:	f00c fb2b 	bl	2010c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13ab6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13ab8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13aba:	0418      	lsls	r0, r3, #16
   13abc:	d508      	bpl.n	13ad0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13abe:	481c      	ldr	r0, [pc, #112]	; (13b30 <bus_fault.isra.0+0xcc>)
   13ac0:	4642      	mov	r2, r8
   13ac2:	f00c fb30 	bl	20126 <log_1>
			if (from_hard_fault != 0) {
   13ac6:	b11f      	cbz	r7, 13ad0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13ac8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13aca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13ace:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13ad0:	4d12      	ldr	r5, [pc, #72]	; (13b1c <bus_fault.isra.0+0xb8>)
   13ad2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ad4:	0559      	lsls	r1, r3, #21
   13ad6:	d504      	bpl.n	13ae2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   13ad8:	4816      	ldr	r0, [pc, #88]	; (13b34 <bus_fault.isra.0+0xd0>)
   13ada:	f044 0101 	orr.w	r1, r4, #1
   13ade:	f00c fb15 	bl	2010c <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13ae2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ae4:	05da      	lsls	r2, r3, #23
   13ae6:	d50d      	bpl.n	13b04 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   13ae8:	4813      	ldr	r0, [pc, #76]	; (13b38 <bus_fault.isra.0+0xd4>)
   13aea:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13aee:	f00c fb0d 	bl	2010c <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13af2:	4a0a      	ldr	r2, [pc, #40]	; (13b1c <bus_fault.isra.0+0xb8>)
   13af4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13af6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13af8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13afc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13afe:	7030      	strb	r0, [r6, #0]
}
   13b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13b04:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b06:	049b      	lsls	r3, r3, #18
   13b08:	d5f3      	bpl.n	13af2 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13b0a:	480c      	ldr	r0, [pc, #48]	; (13b3c <bus_fault.isra.0+0xd8>)
   13b0c:	f044 0101 	orr.w	r1, r4, #1
   13b10:	e7ed      	b.n	13aee <bus_fault.isra.0+0x8a>
   13b12:	bf00      	nop
   13b14:	000256c4 	.word	0x000256c4
   13b18:	0002579c 	.word	0x0002579c
   13b1c:	e000ed00 	.word	0xe000ed00
   13b20:	000269ae 	.word	0x000269ae
   13b24:	000269c4 	.word	0x000269c4
   13b28:	00026852 	.word	0x00026852
   13b2c:	000269d5 	.word	0x000269d5
   13b30:	000269ee 	.word	0x000269ee
   13b34:	00026a03 	.word	0x00026a03
   13b38:	00026a1e 	.word	0x00026a1e
   13b3c:	000268b2 	.word	0x000268b2

00013b40 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13b44:	4b57      	ldr	r3, [pc, #348]	; (13ca4 <z_arm_fault+0x164>)
   13b46:	685e      	ldr	r6, [r3, #4]
{
   13b48:	b08a      	sub	sp, #40	; 0x28
   13b4a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13b4c:	f3c6 0408 	ubfx	r4, r6, #0, #9
   13b50:	2500      	movs	r5, #0
   13b52:	f385 8811 	msr	BASEPRI, r5
   13b56:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13b5a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13b5e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13b62:	d10d      	bne.n	13b80 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13b64:	f002 030c 	and.w	r3, r2, #12
   13b68:	2b08      	cmp	r3, #8
   13b6a:	d10b      	bne.n	13b84 <z_arm_fault+0x44>
   13b6c:	494e      	ldr	r1, [pc, #312]	; (13ca8 <z_arm_fault+0x168>)
   13b6e:	4b4f      	ldr	r3, [pc, #316]	; (13cac <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13b70:	484f      	ldr	r0, [pc, #316]	; (13cb0 <z_arm_fault+0x170>)
   13b72:	1ac9      	subs	r1, r1, r3
   13b74:	08c9      	lsrs	r1, r1, #3
   13b76:	0189      	lsls	r1, r1, #6
   13b78:	f041 0101 	orr.w	r1, r1, #1
   13b7c:	f00c fac6 	bl	2010c <log_0>
		return NULL;
   13b80:	462f      	mov	r7, r5
   13b82:	e003      	b.n	13b8c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13b84:	0712      	lsls	r2, r2, #28
   13b86:	d401      	bmi.n	13b8c <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   13b88:	4607      	mov	r7, r0
			*nested_exc = true;
   13b8a:	2501      	movs	r5, #1
	*recoverable = false;
   13b8c:	2300      	movs	r3, #0
   13b8e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   13b92:	1ee3      	subs	r3, r4, #3
   13b94:	2b09      	cmp	r3, #9
   13b96:	d86b      	bhi.n	13c70 <z_arm_fault+0x130>
   13b98:	e8df f003 	tbb	[pc, r3]
   13b9c:	3d5d5905 	.word	0x3d5d5905
   13ba0:	6a6a6a6a 	.word	0x6a6a6a6a
   13ba4:	616a      	.short	0x616a
   13ba6:	4b41      	ldr	r3, [pc, #260]	; (13cac <z_arm_fault+0x16c>)
   13ba8:	4e3f      	ldr	r6, [pc, #252]	; (13ca8 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   13baa:	4842      	ldr	r0, [pc, #264]	; (13cb4 <z_arm_fault+0x174>)
   13bac:	1af6      	subs	r6, r6, r3
   13bae:	08f6      	lsrs	r6, r6, #3
   13bb0:	01b6      	lsls	r6, r6, #6
   13bb2:	f046 0601 	orr.w	r6, r6, #1
   13bb6:	4631      	mov	r1, r6
   13bb8:	f00c faa8 	bl	2010c <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13bbc:	4b39      	ldr	r3, [pc, #228]	; (13ca4 <z_arm_fault+0x164>)
   13bbe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   13bc0:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13bc4:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   13bc8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13bcc:	d005      	beq.n	13bda <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   13bce:	483a      	ldr	r0, [pc, #232]	; (13cb8 <z_arm_fault+0x178>)
   13bd0:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   13bd2:	f00c fa9b 	bl	2010c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13bd6:	2400      	movs	r4, #0
}
   13bd8:	e020      	b.n	13c1c <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13bdc:	005b      	lsls	r3, r3, #1
   13bde:	d51d      	bpl.n	13c1c <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
   13be0:	4836      	ldr	r0, [pc, #216]	; (13cbc <z_arm_fault+0x17c>)
   13be2:	4631      	mov	r1, r6
   13be4:	f00c fa92 	bl	2010c <log_0>
		if (SCB_MMFSR != 0) {
   13be8:	4b35      	ldr	r3, [pc, #212]	; (13cc0 <z_arm_fault+0x180>)
   13bea:	781b      	ldrb	r3, [r3, #0]
   13bec:	b133      	cbz	r3, 13bfc <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
   13bee:	f10d 0207 	add.w	r2, sp, #7
   13bf2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   13bf4:	4638      	mov	r0, r7
   13bf6:	f7ff fe57 	bl	138a8 <mem_manage_fault>
   13bfa:	e00e      	b.n	13c1a <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
   13bfc:	4b31      	ldr	r3, [pc, #196]	; (13cc4 <z_arm_fault+0x184>)
   13bfe:	781b      	ldrb	r3, [r3, #0]
   13c00:	b12b      	cbz	r3, 13c0e <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
   13c02:	f10d 0107 	add.w	r1, sp, #7
   13c06:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13c08:	f7ff ff2c 	bl	13a64 <bus_fault.isra.0>
   13c0c:	e005      	b.n	13c1a <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
   13c0e:	4b2e      	ldr	r3, [pc, #184]	; (13cc8 <z_arm_fault+0x188>)
   13c10:	881b      	ldrh	r3, [r3, #0]
   13c12:	b29b      	uxth	r3, r3
   13c14:	b113      	cbz	r3, 13c1c <z_arm_fault+0xdc>
			reason = usage_fault(esf);
   13c16:	f7ff fec9 	bl	139ac <usage_fault.isra.0>
   13c1a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13c20:	b993      	cbnz	r3, 13c48 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13c22:	2220      	movs	r2, #32
   13c24:	4639      	mov	r1, r7
   13c26:	a802      	add	r0, sp, #8
   13c28:	f00e fade 	bl	221e8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13c2e:	b39d      	cbz	r5, 13c98 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13c30:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13c34:	b922      	cbnz	r2, 13c40 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13c36:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13c3a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13c3e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13c40:	a902      	add	r1, sp, #8
   13c42:	4620      	mov	r0, r4
   13c44:	f7ff fd84 	bl	13750 <z_arm_fatal_error>
}
   13c48:	b00a      	add	sp, #40	; 0x28
   13c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   13c4e:	f10d 0207 	add.w	r2, sp, #7
   13c52:	2100      	movs	r1, #0
   13c54:	e7ce      	b.n	13bf4 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
   13c56:	f10d 0107 	add.w	r1, sp, #7
   13c5a:	2000      	movs	r0, #0
   13c5c:	e7d4      	b.n	13c08 <z_arm_fault+0xc8>
   13c5e:	4912      	ldr	r1, [pc, #72]	; (13ca8 <z_arm_fault+0x168>)
   13c60:	4b12      	ldr	r3, [pc, #72]	; (13cac <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
   13c62:	481a      	ldr	r0, [pc, #104]	; (13ccc <z_arm_fault+0x18c>)
   13c64:	1ac9      	subs	r1, r1, r3
   13c66:	08c9      	lsrs	r1, r1, #3
   13c68:	0189      	lsls	r1, r1, #6
   13c6a:	f041 0101 	orr.w	r1, r1, #1
   13c6e:	e7b0      	b.n	13bd2 <z_arm_fault+0x92>
   13c70:	4a0e      	ldr	r2, [pc, #56]	; (13cac <z_arm_fault+0x16c>)
   13c72:	4b0d      	ldr	r3, [pc, #52]	; (13ca8 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
   13c74:	4816      	ldr	r0, [pc, #88]	; (13cd0 <z_arm_fault+0x190>)
   13c76:	4917      	ldr	r1, [pc, #92]	; (13cd4 <z_arm_fault+0x194>)
   13c78:	1a9b      	subs	r3, r3, r2
   13c7a:	08db      	lsrs	r3, r3, #3
   13c7c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   13c80:	ea4f 1383 	mov.w	r3, r3, lsl #6
   13c84:	bf18      	it	ne
   13c86:	4601      	movne	r1, r0
   13c88:	f043 0301 	orr.w	r3, r3, #1
   13c8c:	4812      	ldr	r0, [pc, #72]	; (13cd8 <z_arm_fault+0x198>)
   13c8e:	f1a4 0210 	sub.w	r2, r4, #16
   13c92:	f00c fa5c 	bl	2014e <log_2>
   13c96:	e79e      	b.n	13bd6 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13c98:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13c9c:	f023 0301 	bic.w	r3, r3, #1
   13ca0:	e7cd      	b.n	13c3e <z_arm_fault+0xfe>
   13ca2:	bf00      	nop
   13ca4:	e000ed00 	.word	0xe000ed00
   13ca8:	0002579c 	.word	0x0002579c
   13cac:	000256c4 	.word	0x000256c4
   13cb0:	00026a36 	.word	0x00026a36
   13cb4:	00026a61 	.word	0x00026a61
   13cb8:	00026a78 	.word	0x00026a78
   13cbc:	00026a99 	.word	0x00026a99
   13cc0:	e000ed28 	.word	0xe000ed28
   13cc4:	e000ed29 	.word	0xe000ed29
   13cc8:	e000ed2a 	.word	0xe000ed2a
   13ccc:	00026ab8 	.word	0x00026ab8
   13cd0:	00026af1 	.word	0x00026af1
   13cd4:	00026adc 	.word	0x00026adc
   13cd8:	00026b0a 	.word	0x00026b0a

00013cdc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13cdc:	4a02      	ldr	r2, [pc, #8]	; (13ce8 <z_arm_fault_init+0xc>)
   13cde:	6953      	ldr	r3, [r2, #20]
   13ce0:	f043 0310 	orr.w	r3, r3, #16
   13ce4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13ce6:	4770      	bx	lr
   13ce8:	e000ed00 	.word	0xe000ed00

00013cec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13cec:	4b04      	ldr	r3, [pc, #16]	; (13d00 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13cee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13cf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   13cf2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13cf4:	d003      	beq.n	13cfe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13cf6:	4903      	ldr	r1, [pc, #12]	; (13d04 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13cfc:	600a      	str	r2, [r1, #0]

00013cfe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13cfe:	4770      	bx	lr
	ldr r3, =_kernel
   13d00:	200032a8 	.word	0x200032a8
	ldr r1, =_SCS_ICSR
   13d04:	e000ed04 	.word	0xe000ed04

00013d08 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13d08:	4a06      	ldr	r2, [pc, #24]	; (13d24 <z_arm_clear_arm_mpu_config+0x1c>)
   13d0a:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   13d0c:	2300      	movs	r3, #0
	int num_regions =
   13d0e:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   13d12:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   13d14:	428b      	cmp	r3, r1
   13d16:	d100      	bne.n	13d1a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   13d18:	4770      	bx	lr
  MPU->RNR = rnr;
   13d1a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13d1c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   13d1e:	3301      	adds	r3, #1
   13d20:	e7f8      	b.n	13d14 <z_arm_clear_arm_mpu_config+0xc>
   13d22:	bf00      	nop
   13d24:	e000ed90 	.word	0xe000ed90

00013d28 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13d28:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13d2a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13d2c:	2300      	movs	r3, #0
   13d2e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13d32:	f7ff ffe9 	bl	13d08 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   13d36:	4b14      	ldr	r3, [pc, #80]	; (13d88 <z_arm_init_arch_hw_at_boot+0x60>)
   13d38:	f04f 32ff 	mov.w	r2, #4294967295
   13d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   13d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   13d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   13d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   13d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   13d50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   13d54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   13d58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13d5c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13d60:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   13d64:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   13d68:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   13d6c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   13d70:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   13d74:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   13d78:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   13d7c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13d7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13d82:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13d86:	bd08      	pop	{r3, pc}
   13d88:	e000e100 	.word	0xe000e100

00013d8c <z_arm_interrupt_init>:
   13d8c:	4804      	ldr	r0, [pc, #16]	; (13da0 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13d8e:	2300      	movs	r3, #0
   13d90:	2140      	movs	r1, #64	; 0x40
   13d92:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13d94:	3301      	adds	r3, #1
   13d96:	2b27      	cmp	r3, #39	; 0x27
   13d98:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13d9c:	d1f9      	bne.n	13d92 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13d9e:	4770      	bx	lr
   13da0:	e000e100 	.word	0xe000e100

00013da4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   13da4:	4b06      	ldr	r3, [pc, #24]	; (13dc0 <z_impl_k_thread_abort+0x1c>)
   13da6:	689b      	ldr	r3, [r3, #8]
   13da8:	4283      	cmp	r3, r0
   13daa:	d107      	bne.n	13dbc <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13dac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13db0:	b123      	cbz	r3, 13dbc <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13db2:	4a04      	ldr	r2, [pc, #16]	; (13dc4 <z_impl_k_thread_abort+0x20>)
   13db4:	6853      	ldr	r3, [r2, #4]
   13db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13dba:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   13dbc:	f00b b990 	b.w	1f0e0 <z_thread_abort>
   13dc0:	200032a8 	.word	0x200032a8
   13dc4:	e000ed00 	.word	0xe000ed00

00013dc8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13dc8:	4b02      	ldr	r3, [pc, #8]	; (13dd4 <z_arm_configure_static_mpu_regions+0xc>)
   13dca:	4a03      	ldr	r2, [pc, #12]	; (13dd8 <z_arm_configure_static_mpu_regions+0x10>)
   13dcc:	4803      	ldr	r0, [pc, #12]	; (13ddc <z_arm_configure_static_mpu_regions+0x14>)
   13dce:	2101      	movs	r1, #1
   13dd0:	f000 b884 	b.w	13edc <arm_core_mpu_configure_static_mpu_regions>
   13dd4:	20010000 	.word	0x20010000
   13dd8:	20000000 	.word	0x20000000
   13ddc:	00025b9c 	.word	0x00025b9c

00013de0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13de0:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13de2:	4b05      	ldr	r3, [pc, #20]	; (13df8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   13de4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   13de6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13de8:	4a04      	ldr	r2, [pc, #16]	; (13dfc <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13dea:	2120      	movs	r1, #32
   13dec:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13df0:	4618      	mov	r0, r3
   13df2:	2101      	movs	r1, #1
   13df4:	f000 b87c 	b.w	13ef0 <arm_core_mpu_configure_dynamic_mpu_regions>
   13df8:	20002e9c 	.word	0x20002e9c
   13dfc:	150b0000 	.word	0x150b0000

00013e00 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   13e02:	4f28      	ldr	r7, [pc, #160]	; (13ea4 <mpu_configure_regions+0xa4>)
   13e04:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13e06:	2100      	movs	r1, #0
   13e08:	42b1      	cmp	r1, r6
   13e0a:	da14      	bge.n	13e36 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   13e0c:	6844      	ldr	r4, [r0, #4]
   13e0e:	2c00      	cmp	r4, #0
   13e10:	d045      	beq.n	13e9e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   13e12:	b1c3      	cbz	r3, 13e46 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   13e14:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13e18:	ea14 0f0c 	tst.w	r4, ip
   13e1c:	d00d      	beq.n	13e3a <mpu_configure_regions+0x3a>
   13e1e:	4a22      	ldr	r2, [pc, #136]	; (13ea8 <mpu_configure_regions+0xa8>)
   13e20:	4b22      	ldr	r3, [pc, #136]	; (13eac <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   13e22:	4823      	ldr	r0, [pc, #140]	; (13eb0 <mpu_configure_regions+0xb0>)
   13e24:	1ad2      	subs	r2, r2, r3
   13e26:	08d2      	lsrs	r2, r2, #3
   13e28:	0192      	lsls	r2, r2, #6
   13e2a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13e2e:	f00c f97a 	bl	20126 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13e32:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   13e36:	4610      	mov	r0, r2
   13e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   13e3a:	2c1f      	cmp	r4, #31
   13e3c:	d9ef      	bls.n	13e1e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   13e3e:	6805      	ldr	r5, [r0, #0]
		&&
   13e40:	ea1c 0f05 	tst.w	ip, r5
   13e44:	d1eb      	bne.n	13e1e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13e46:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13e48:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   13e4a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   13e4e:	6802      	ldr	r2, [r0, #0]
   13e50:	d916      	bls.n	13e80 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   13e52:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13e56:	d815      	bhi.n	13e84 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13e58:	3c01      	subs	r4, #1
   13e5a:	fab4 f484 	clz	r4, r4
   13e5e:	f1c4 041f 	rsb	r4, r4, #31
   13e62:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13e64:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13e66:	ea4c 0404 	orr.w	r4, ip, r4
   13e6a:	d90d      	bls.n	13e88 <mpu_configure_regions+0x88>
   13e6c:	4a0e      	ldr	r2, [pc, #56]	; (13ea8 <mpu_configure_regions+0xa8>)
   13e6e:	4b0f      	ldr	r3, [pc, #60]	; (13eac <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13e70:	4810      	ldr	r0, [pc, #64]	; (13eb4 <mpu_configure_regions+0xb4>)
   13e72:	1ad2      	subs	r2, r2, r3
   13e74:	08d2      	lsrs	r2, r2, #3
   13e76:	0192      	lsls	r2, r2, #6
   13e78:	f042 0201 	orr.w	r2, r2, #1
   13e7c:	4629      	mov	r1, r5
   13e7e:	e7d6      	b.n	13e2e <mpu_configure_regions+0x2e>
		return REGION_32B;
   13e80:	2408      	movs	r4, #8
   13e82:	e7ef      	b.n	13e64 <mpu_configure_regions+0x64>
		return REGION_4G;
   13e84:	243e      	movs	r4, #62	; 0x3e
   13e86:	e7ed      	b.n	13e64 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13e88:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   13e8c:	432a      	orrs	r2, r5
   13e8e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13e92:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   13e96:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13e98:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13e9a:	613c      	str	r4, [r7, #16]
		reg_index++;
   13e9c:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   13e9e:	3101      	adds	r1, #1
   13ea0:	300c      	adds	r0, #12
   13ea2:	e7b1      	b.n	13e08 <mpu_configure_regions+0x8>
   13ea4:	e000ed90 	.word	0xe000ed90
   13ea8:	0002578c 	.word	0x0002578c
   13eac:	000256c4 	.word	0x000256c4
   13eb0:	00026b21 	.word	0x00026b21
   13eb4:	00026b44 	.word	0x00026b44

00013eb8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13eb8:	4b03      	ldr	r3, [pc, #12]	; (13ec8 <arm_core_mpu_enable+0x10>)
   13eba:	2205      	movs	r2, #5
   13ebc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13ec2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13ec6:	4770      	bx	lr
   13ec8:	e000ed90 	.word	0xe000ed90

00013ecc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   13ecc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13ed0:	4b01      	ldr	r3, [pc, #4]	; (13ed8 <arm_core_mpu_disable+0xc>)
   13ed2:	2200      	movs	r2, #0
   13ed4:	605a      	str	r2, [r3, #4]
}
   13ed6:	4770      	bx	lr
   13ed8:	e000ed90 	.word	0xe000ed90

00013edc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13edc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13ede:	4c03      	ldr	r4, [pc, #12]	; (13eec <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13ee0:	2301      	movs	r3, #1
   13ee2:	7822      	ldrb	r2, [r4, #0]
   13ee4:	f7ff ff8c 	bl	13e00 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13ee8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   13eea:	bd10      	pop	{r4, pc}
   13eec:	2000335b 	.word	0x2000335b

00013ef0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13ef0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13ef2:	4a08      	ldr	r2, [pc, #32]	; (13f14 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   13ef4:	2300      	movs	r3, #0
   13ef6:	7812      	ldrb	r2, [r2, #0]
   13ef8:	f7ff ff82 	bl	13e00 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13efc:	f110 0f16 	cmn.w	r0, #22
   13f00:	d003      	beq.n	13f0a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   13f02:	4b05      	ldr	r3, [pc, #20]	; (13f18 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   13f04:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13f06:	2807      	cmp	r0, #7
   13f08:	dd00      	ble.n	13f0c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13f0a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   13f0c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   13f0e:	611a      	str	r2, [r3, #16]
   13f10:	3001      	adds	r0, #1
   13f12:	e7f8      	b.n	13f06 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13f14:	2000335b 	.word	0x2000335b
   13f18:	e000ed90 	.word	0xe000ed90

00013f1c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13f1c:	4913      	ldr	r1, [pc, #76]	; (13f6c <z_arm_mpu_init+0x50>)
   13f1e:	6808      	ldr	r0, [r1, #0]
   13f20:	2808      	cmp	r0, #8
{
   13f22:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13f24:	d81e      	bhi.n	13f64 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13f26:	f7ff ffd1 	bl	13ecc <arm_core_mpu_disable>
	MPU->RNR = index;
   13f2a:	4c11      	ldr	r4, [pc, #68]	; (13f70 <z_arm_mpu_init+0x54>)
   13f2c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13f2e:	2200      	movs	r2, #0
   13f30:	4290      	cmp	r0, r2
   13f32:	f101 010c 	add.w	r1, r1, #12
   13f36:	d105      	bne.n	13f44 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13f38:	4b0e      	ldr	r3, [pc, #56]	; (13f74 <z_arm_mpu_init+0x58>)
   13f3a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   13f3c:	f7ff ffbc 	bl	13eb8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13f40:	2000      	movs	r0, #0
}
   13f42:	bd10      	pop	{r4, pc}
   13f44:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13f46:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   13f4a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13f4e:	4313      	orrs	r3, r2
   13f50:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13f54:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13f5a:	f043 0301 	orr.w	r3, r3, #1
   13f5e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13f60:	3201      	adds	r2, #1
   13f62:	e7e5      	b.n	13f30 <z_arm_mpu_init+0x14>
		return -1;
   13f64:	f04f 30ff 	mov.w	r0, #4294967295
   13f68:	e7eb      	b.n	13f42 <z_arm_mpu_init+0x26>
   13f6a:	bf00      	nop
   13f6c:	00025ba8 	.word	0x00025ba8
   13f70:	e000ed90 	.word	0xe000ed90
   13f74:	2000335b 	.word	0x2000335b

00013f78 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13f78:	4b01      	ldr	r3, [pc, #4]	; (13f80 <__stdout_hook_install+0x8>)
   13f7a:	6018      	str	r0, [r3, #0]
}
   13f7c:	4770      	bx	lr
   13f7e:	bf00      	nop
   13f80:	20000524 	.word	0x20000524

00013f84 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13f84:	f04f 0240 	mov.w	r2, #64	; 0x40
   13f88:	f3ef 8311 	mrs	r3, BASEPRI
   13f8c:	f382 8811 	msr	BASEPRI, r2
   13f90:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13f94:	4a04      	ldr	r2, [pc, #16]	; (13fa8 <nordicsemi_nrf52_init+0x24>)
   13f96:	2101      	movs	r1, #1
   13f98:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   13f9c:	f383 8811 	msr	BASEPRI, r3
   13fa0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13fa4:	2000      	movs	r0, #0
   13fa6:	4770      	bx	lr
   13fa8:	4001e000 	.word	0x4001e000

00013fac <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   13fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13fb0:	b2c0      	uxtb	r0, r0
   13fb2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13fb6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13fba:	4905      	ldr	r1, [pc, #20]	; (13fd0 <sys_arch_reboot+0x24>)
   13fbc:	4b05      	ldr	r3, [pc, #20]	; (13fd4 <sys_arch_reboot+0x28>)
   13fbe:	68ca      	ldr	r2, [r1, #12]
   13fc0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13fc4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13fc6:	60cb      	str	r3, [r1, #12]
   13fc8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13fcc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13fce:	e7fd      	b.n	13fcc <sys_arch_reboot+0x20>
   13fd0:	e000ed00 	.word	0xe000ed00
   13fd4:	05fa0004 	.word	0x05fa0004

00013fd8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13fd8:	b120      	cbz	r0, 13fe4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13fda:	4b03      	ldr	r3, [pc, #12]	; (13fe8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13fdc:	0180      	lsls	r0, r0, #6
   13fde:	f043 0301 	orr.w	r3, r3, #1
   13fe2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13fe4:	4770      	bx	lr
   13fe6:	bf00      	nop
   13fe8:	000258f0 	.word	0x000258f0

00013fec <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13fec:	4b0e      	ldr	r3, [pc, #56]	; (14028 <bt_hex_real+0x3c>)
   13fee:	2940      	cmp	r1, #64	; 0x40
{
   13ff0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   13ff2:	bf28      	it	cs
   13ff4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   13ff6:	4c0d      	ldr	r4, [pc, #52]	; (1402c <bt_hex_real+0x40>)
   13ff8:	1846      	adds	r6, r0, r1
   13ffa:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   13ffc:	42b0      	cmp	r0, r6
   13ffe:	f103 0302 	add.w	r3, r3, #2
   14002:	d104      	bne.n	1400e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14004:	2300      	movs	r3, #0
   14006:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1400a:	4807      	ldr	r0, [pc, #28]	; (14028 <bt_hex_real+0x3c>)
   1400c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   1400e:	7802      	ldrb	r2, [r0, #0]
   14010:	0912      	lsrs	r2, r2, #4
   14012:	5ca2      	ldrb	r2, [r4, r2]
   14014:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14018:	f810 2b01 	ldrb.w	r2, [r0], #1
   1401c:	f002 020f 	and.w	r2, r2, #15
   14020:	5ca2      	ldrb	r2, [r4, r2]
   14022:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14026:	e7e9      	b.n	13ffc <bt_hex_real+0x10>
   14028:	2000335c 	.word	0x2000335c
   1402c:	00026b7d 	.word	0x00026b7d

00014030 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14030:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   14032:	7803      	ldrb	r3, [r0, #0]
   14034:	b08b      	sub	sp, #44	; 0x2c
   14036:	4604      	mov	r4, r0
   14038:	ad07      	add	r5, sp, #28
   1403a:	2b03      	cmp	r3, #3
   1403c:	d821      	bhi.n	14082 <bt_addr_le_str_real+0x52>
   1403e:	e8df f003 	tbb	[pc, r3]
   14042:	1a02      	.short	0x1a02
   14044:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   14046:	4912      	ldr	r1, [pc, #72]	; (14090 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   14048:	4628      	mov	r0, r5
   1404a:	f00e f875 	bl	22138 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1404e:	7863      	ldrb	r3, [r4, #1]
   14050:	9304      	str	r3, [sp, #16]
   14052:	78a3      	ldrb	r3, [r4, #2]
   14054:	9303      	str	r3, [sp, #12]
   14056:	78e3      	ldrb	r3, [r4, #3]
   14058:	9302      	str	r3, [sp, #8]
   1405a:	7923      	ldrb	r3, [r4, #4]
   1405c:	9301      	str	r3, [sp, #4]
   1405e:	7963      	ldrb	r3, [r4, #5]
   14060:	9300      	str	r3, [sp, #0]
   14062:	4a0c      	ldr	r2, [pc, #48]	; (14094 <bt_addr_le_str_real+0x64>)
   14064:	79a3      	ldrb	r3, [r4, #6]
   14066:	9505      	str	r5, [sp, #20]
   14068:	211e      	movs	r1, #30
   1406a:	480b      	ldr	r0, [pc, #44]	; (14098 <bt_addr_le_str_real+0x68>)
   1406c:	f00b fc16 	bl	1f89c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   14070:	4809      	ldr	r0, [pc, #36]	; (14098 <bt_addr_le_str_real+0x68>)
   14072:	b00b      	add	sp, #44	; 0x2c
   14074:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   14076:	4909      	ldr	r1, [pc, #36]	; (1409c <bt_addr_le_str_real+0x6c>)
   14078:	e7e6      	b.n	14048 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   1407a:	4909      	ldr	r1, [pc, #36]	; (140a0 <bt_addr_le_str_real+0x70>)
   1407c:	e7e4      	b.n	14048 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   1407e:	4909      	ldr	r1, [pc, #36]	; (140a4 <bt_addr_le_str_real+0x74>)
   14080:	e7e2      	b.n	14048 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   14082:	4a09      	ldr	r2, [pc, #36]	; (140a8 <bt_addr_le_str_real+0x78>)
   14084:	210a      	movs	r1, #10
   14086:	4628      	mov	r0, r5
   14088:	f00b fc08 	bl	1f89c <snprintk>
		break;
   1408c:	e7df      	b.n	1404e <bt_addr_le_str_real+0x1e>
   1408e:	bf00      	nop
   14090:	000262ac 	.word	0x000262ac
   14094:	000262ce 	.word	0x000262ce
   14098:	200033dd 	.word	0x200033dd
   1409c:	000262b3 	.word	0x000262b3
   140a0:	000262ba 	.word	0x000262ba
   140a4:	000262c4 	.word	0x000262c4
   140a8:	00028227 	.word	0x00028227

000140ac <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   140ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   140b0:	4b6a      	ldr	r3, [pc, #424]	; (1425c <ecc_thread+0x1b0>)
   140b2:	4d6b      	ldr	r5, [pc, #428]	; (14260 <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   140b4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 14280 <ecc_thread+0x1d4>
	return z_impl_k_sem_take(sem, timeout);
   140b8:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 14284 <ecc_thread+0x1d8>
   140bc:	1aed      	subs	r5, r5, r3
   140be:	08ed      	lsrs	r5, r5, #3
   140c0:	4647      	mov	r7, r8
   140c2:	f04f 32ff 	mov.w	r2, #4294967295
   140c6:	f04f 33ff 	mov.w	r3, #4294967295
   140ca:	4648      	mov	r0, r9
   140cc:	f00a fad2 	bl	1e674 <z_impl_k_sem_take>
   140d0:	f3bf 8f5b 	dmb	ish
   140d4:	f8d8 4000 	ldr.w	r4, [r8]
   140d8:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   140dc:	f014 0401 	ands.w	r4, r4, #1
   140e0:	d05a      	beq.n	14198 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   140e2:	f8df a194 	ldr.w	sl, [pc, #404]	; 14278 <ecc_thread+0x1cc>
   140e6:	4c5f      	ldr	r4, [pc, #380]	; (14264 <ecc_thread+0x1b8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   140e8:	4e5f      	ldr	r6, [pc, #380]	; (14268 <ecc_thread+0x1bc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   140ea:	4860      	ldr	r0, [pc, #384]	; (1426c <ecc_thread+0x1c0>)
   140ec:	4652      	mov	r2, sl
   140ee:	4621      	mov	r1, r4
   140f0:	f00c feee 	bl	20ed0 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   140f4:	bbe8      	cbnz	r0, 14172 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
   140f6:	01a9      	lsls	r1, r5, #6
   140f8:	485d      	ldr	r0, [pc, #372]	; (14270 <ecc_thread+0x1c4>)
   140fa:	f041 0101 	orr.w	r1, r1, #1
   140fe:	f00c f805 	bl	2010c <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   14102:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   14106:	f04f 32ff 	mov.w	r2, #4294967295
   1410a:	f04f 33ff 	mov.w	r3, #4294967295
   1410e:	2001      	movs	r0, #1
   14110:	f000 fb24 	bl	1475c <bt_buf_get_rx>
   14114:	f100 0608 	add.w	r6, r0, #8
   14118:	2102      	movs	r1, #2
   1411a:	4604      	mov	r4, r0
   1411c:	4630      	mov	r0, r6
   1411e:	f010 f9c6 	bl	244ae <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   14122:	233e      	movs	r3, #62	; 0x3e
   14124:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   14126:	2342      	movs	r3, #66	; 0x42
   14128:	7043      	strb	r3, [r0, #1]
   1412a:	2101      	movs	r1, #1
   1412c:	4630      	mov	r0, r6
   1412e:	f010 f9be 	bl	244ae <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   14132:	2308      	movs	r3, #8
   14134:	7003      	strb	r3, [r0, #0]
   14136:	2141      	movs	r1, #65	; 0x41
   14138:	4630      	mov	r0, r6
   1413a:	f010 f9b8 	bl	244ae <net_buf_simple_add>
   1413e:	4606      	mov	r6, r0
	evt->status = status;
   14140:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
   14144:	f1ba 0f00 	cmp.w	sl, #0
   14148:	d01d      	beq.n	14186 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1414a:	2240      	movs	r2, #64	; 0x40
   1414c:	2100      	movs	r1, #0
   1414e:	f00e f876 	bl	2223e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14152:	f3bf 8f5b 	dmb	ish
   14156:	e857 3f00 	ldrex	r3, [r7]
   1415a:	f023 0301 	bic.w	r3, r3, #1
   1415e:	e847 3200 	strex	r2, r3, [r7]
   14162:	2a00      	cmp	r2, #0
   14164:	d1f7      	bne.n	14156 <ecc_thread+0xaa>
   14166:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1416a:	4620      	mov	r0, r4
	bt_recv(buf);
   1416c:	f001 fd48 	bl	15c00 <bt_recv>
	while (true) {
   14170:	e7a7      	b.n	140c2 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   14172:	2220      	movs	r2, #32
   14174:	4631      	mov	r1, r6
   14176:	4620      	mov	r0, r4
   14178:	f00e f826 	bl	221c8 <memcmp>
   1417c:	2800      	cmp	r0, #0
   1417e:	d0b4      	beq.n	140ea <ecc_thread+0x3e>
	return 0;
   14180:	f04f 0a00 	mov.w	sl, #0
   14184:	e7bf      	b.n	14106 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
   14186:	4939      	ldr	r1, [pc, #228]	; (1426c <ecc_thread+0x1c0>)
   14188:	f00e f90a 	bl	223a0 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
   1418c:	4939      	ldr	r1, [pc, #228]	; (14274 <ecc_thread+0x1c8>)
   1418e:	f106 0021 	add.w	r0, r6, #33	; 0x21
   14192:	f00e f905 	bl	223a0 <sys_memcpy_swap.constprop.0>
   14196:	e7dc      	b.n	14152 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14198:	f3bf 8f5b 	dmb	ish
   1419c:	f8d8 3000 	ldr.w	r3, [r8]
   141a0:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   141a4:	079b      	lsls	r3, r3, #30
   141a6:	d58c      	bpl.n	140c2 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   141a8:	4933      	ldr	r1, [pc, #204]	; (14278 <ecc_thread+0x1cc>)
   141aa:	4830      	ldr	r0, [pc, #192]	; (1426c <ecc_thread+0x1c0>)
   141ac:	f00d fd5f 	bl	21c6e <uECC_valid_public_key>
	if (ret < 0) {
   141b0:	1e01      	subs	r1, r0, #0
   141b2:	da38      	bge.n	14226 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
   141b4:	01aa      	lsls	r2, r5, #6
   141b6:	4831      	ldr	r0, [pc, #196]	; (1427c <ecc_thread+0x1d0>)
   141b8:	f042 0201 	orr.w	r2, r2, #1
   141bc:	f00b ffb3 	bl	20126 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   141c0:	f04f 32ff 	mov.w	r2, #4294967295
   141c4:	f04f 33ff 	mov.w	r3, #4294967295
   141c8:	2001      	movs	r0, #1
   141ca:	f000 fac7 	bl	1475c <bt_buf_get_rx>
   141ce:	f100 0a08 	add.w	sl, r0, #8
   141d2:	2102      	movs	r1, #2
   141d4:	4606      	mov	r6, r0
   141d6:	4650      	mov	r0, sl
   141d8:	f010 f969 	bl	244ae <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   141dc:	233e      	movs	r3, #62	; 0x3e
   141de:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   141e0:	2322      	movs	r3, #34	; 0x22
   141e2:	7043      	strb	r3, [r0, #1]
   141e4:	2101      	movs	r1, #1
   141e6:	4650      	mov	r0, sl
   141e8:	f010 f961 	bl	244ae <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   141ec:	2309      	movs	r3, #9
   141ee:	7003      	strb	r3, [r0, #0]
   141f0:	2121      	movs	r1, #33	; 0x21
   141f2:	4650      	mov	r0, sl
   141f4:	f010 f95b 	bl	244ae <net_buf_simple_add>
   141f8:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   141fa:	3001      	adds	r0, #1
   141fc:	bb3c      	cbnz	r4, 1424e <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   141fe:	221f      	movs	r2, #31
   14200:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   14202:	21ff      	movs	r1, #255	; 0xff
   14204:	2220      	movs	r2, #32
   14206:	f00e f81a 	bl	2223e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1420a:	f3bf 8f5b 	dmb	ish
   1420e:	e857 3f00 	ldrex	r3, [r7]
   14212:	f023 0302 	bic.w	r3, r3, #2
   14216:	e847 3200 	strex	r2, r3, [r7]
   1421a:	2a00      	cmp	r2, #0
   1421c:	d1f7      	bne.n	1420e <ecc_thread+0x162>
   1421e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   14222:	4630      	mov	r0, r6
   14224:	e7a2      	b.n	1416c <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
   14226:	490f      	ldr	r1, [pc, #60]	; (14264 <ecc_thread+0x1b8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14228:	f3bf 8f5b 	dmb	ish
   1422c:	f8d8 3000 	ldr.w	r3, [r8]
   14230:	480d      	ldr	r0, [pc, #52]	; (14268 <ecc_thread+0x1bc>)
   14232:	f3bf 8f5b 	dmb	ish
   14236:	f013 0f04 	tst.w	r3, #4
   1423a:	f101 0220 	add.w	r2, r1, #32
   1423e:	4b0e      	ldr	r3, [pc, #56]	; (14278 <ecc_thread+0x1cc>)
   14240:	bf18      	it	ne
   14242:	4601      	movne	r1, r0
   14244:	4610      	mov	r0, r2
   14246:	f00c fe92 	bl	20f6e <uECC_shared_secret>
   1424a:	4604      	mov	r4, r0
   1424c:	e7b8      	b.n	141c0 <ecc_thread+0x114>
		evt->status = 0U;
   1424e:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   14250:	4906      	ldr	r1, [pc, #24]	; (1426c <ecc_thread+0x1c0>)
		evt->status = 0U;
   14252:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   14254:	f00e f8a4 	bl	223a0 <sys_memcpy_swap.constprop.0>
   14258:	e7d7      	b.n	1420a <ecc_thread+0x15e>
   1425a:	bf00      	nop
   1425c:	000256c4 	.word	0x000256c4
   14260:	0002570c 	.word	0x0002570c
   14264:	200033fb 	.word	0x200033fb
   14268:	00026bf1 	.word	0x00026bf1
   1426c:	2000341b 	.word	0x2000341b
   14270:	00026b95 	.word	0x00026b95
   14274:	2000343b 	.word	0x2000343b
   14278:	00025bc8 	.word	0x00025bc8
   1427c:	00026bbe 	.word	0x00026bbe
   14280:	20002ea8 	.word	0x20002ea8
   14284:	20000858 	.word	0x20000858

00014288 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   14288:	b570      	push	{r4, r5, r6, lr}
   1428a:	4c21      	ldr	r4, [pc, #132]	; (14310 <le_gen_dhkey+0x88>)
   1428c:	f3bf 8f5b 	dmb	ish
   14290:	6823      	ldr	r3, [r4, #0]
   14292:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   14296:	07da      	lsls	r2, r3, #31
{
   14298:	4606      	mov	r6, r0
   1429a:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   1429c:	d501      	bpl.n	142a2 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1429e:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   142a0:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   142a2:	2901      	cmp	r1, #1
   142a4:	d831      	bhi.n	1430a <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   142a6:	f3bf 8f5b 	dmb	ish
   142aa:	e854 3f00 	ldrex	r3, [r4]
   142ae:	f043 0202 	orr.w	r2, r3, #2
   142b2:	e844 2100 	strex	r1, r2, [r4]
   142b6:	2900      	cmp	r1, #0
   142b8:	d1f7      	bne.n	142aa <le_gen_dhkey+0x22>
   142ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   142be:	079b      	lsls	r3, r3, #30
   142c0:	d4ed      	bmi.n	1429e <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
   142c2:	4814      	ldr	r0, [pc, #80]	; (14314 <le_gen_dhkey+0x8c>)
   142c4:	4631      	mov	r1, r6
   142c6:	f00e f86b 	bl	223a0 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
   142ca:	4813      	ldr	r0, [pc, #76]	; (14318 <le_gen_dhkey+0x90>)
   142cc:	f106 0120 	add.w	r1, r6, #32
   142d0:	f00e f866 	bl	223a0 <sys_memcpy_swap.constprop.0>
   142d4:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   142d8:	b175      	cbz	r5, 142f8 <le_gen_dhkey+0x70>
   142da:	e854 3f00 	ldrex	r3, [r4]
   142de:	f043 0304 	orr.w	r3, r3, #4
   142e2:	e844 3200 	strex	r2, r3, [r4]
   142e6:	2a00      	cmp	r2, #0
   142e8:	d1f7      	bne.n	142da <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   142ea:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   142ee:	480b      	ldr	r0, [pc, #44]	; (1431c <le_gen_dhkey+0x94>)
   142f0:	f00a f99a 	bl	1e628 <z_impl_k_sem_give>
   142f4:	2000      	movs	r0, #0
   142f6:	e7d3      	b.n	142a0 <le_gen_dhkey+0x18>
   142f8:	e854 3f00 	ldrex	r3, [r4]
   142fc:	f023 0304 	bic.w	r3, r3, #4
   14300:	e844 3200 	strex	r2, r3, [r4]
   14304:	2a00      	cmp	r2, #0
   14306:	d0f0      	beq.n	142ea <le_gen_dhkey+0x62>
   14308:	e7f6      	b.n	142f8 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   1430a:	2012      	movs	r0, #18
   1430c:	e7c8      	b.n	142a0 <le_gen_dhkey+0x18>
   1430e:	bf00      	nop
   14310:	20002ea8 	.word	0x20002ea8
   14314:	2000341b 	.word	0x2000341b
   14318:	2000343b 	.word	0x2000343b
   1431c:	20000858 	.word	0x20000858

00014320 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   14320:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14322:	7d06      	ldrb	r6, [r0, #20]
   14324:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   14326:	b976      	cbnz	r6, 14346 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   14328:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   1432a:	881d      	ldrh	r5, [r3, #0]
   1432c:	f242 0226 	movw	r2, #8230	; 0x2026
   14330:	4295      	cmp	r5, r2
   14332:	d045      	beq.n	143c0 <bt_hci_ecc_send+0xa0>
   14334:	d80f      	bhi.n	14356 <bt_hci_ecc_send+0x36>
   14336:	f242 0201 	movw	r2, #8193	; 0x2001
   1433a:	4295      	cmp	r5, r2
   1433c:	d04f      	beq.n	143de <bt_hci_ecc_send+0xbe>
   1433e:	f242 0325 	movw	r3, #8229	; 0x2025
   14342:	429d      	cmp	r5, r3
   14344:	d013      	beq.n	1436e <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   14346:	4b2a      	ldr	r3, [pc, #168]	; (143f0 <bt_hci_ecc_send+0xd0>)
   14348:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1434c:	4620      	mov	r0, r4
   1434e:	691b      	ldr	r3, [r3, #16]
}
   14350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   14354:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   14356:	f242 035e 	movw	r3, #8286	; 0x205e
   1435a:	429d      	cmp	r5, r3
   1435c:	d1f3      	bne.n	14346 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   1435e:	2103      	movs	r1, #3
   14360:	3008      	adds	r0, #8
   14362:	f010 f8c3 	bl	244ec <net_buf_simple_pull>
	cmd = (void *)buf->data;
   14366:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   14368:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   1436c:	e02e      	b.n	143cc <bt_hci_ecc_send+0xac>
   1436e:	2103      	movs	r1, #3
   14370:	3008      	adds	r0, #8
   14372:	f010 f8bb 	bl	244ec <net_buf_simple_pull>
	net_buf_unref(buf);
   14376:	4620      	mov	r0, r4
   14378:	f007 ff40 	bl	1c1fc <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1437c:	f3bf 8f5b 	dmb	ish
   14380:	4b1c      	ldr	r3, [pc, #112]	; (143f4 <bt_hci_ecc_send+0xd4>)
   14382:	681a      	ldr	r2, [r3, #0]
   14384:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   14388:	0792      	lsls	r2, r2, #30
   1438a:	d507      	bpl.n	1439c <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   1438c:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   1438e:	4631      	mov	r1, r6
   14390:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   14394:	f00d ffe0 	bl	22358 <send_cmd_status>
}
   14398:	2000      	movs	r0, #0
   1439a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1439c:	f3bf 8f5b 	dmb	ish
   143a0:	e853 2f00 	ldrex	r2, [r3]
   143a4:	f042 0101 	orr.w	r1, r2, #1
   143a8:	e843 1000 	strex	r0, r1, [r3]
   143ac:	2800      	cmp	r0, #0
   143ae:	d1f7      	bne.n	143a0 <bt_hci_ecc_send+0x80>
   143b0:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   143b4:	07d3      	lsls	r3, r2, #31
   143b6:	d4e9      	bmi.n	1438c <bt_hci_ecc_send+0x6c>
   143b8:	480f      	ldr	r0, [pc, #60]	; (143f8 <bt_hci_ecc_send+0xd8>)
   143ba:	f00a f935 	bl	1e628 <z_impl_k_sem_give>
}
   143be:	e7e6      	b.n	1438e <bt_hci_ecc_send+0x6e>
   143c0:	2103      	movs	r1, #3
   143c2:	3008      	adds	r0, #8
   143c4:	f010 f892 	bl	244ec <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   143c8:	68a0      	ldr	r0, [r4, #8]
   143ca:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   143cc:	f7ff ff5c 	bl	14288 <le_gen_dhkey>
   143d0:	4606      	mov	r6, r0
	net_buf_unref(buf);
   143d2:	4620      	mov	r0, r4
   143d4:	f007 ff12 	bl	1c1fc <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   143d8:	4631      	mov	r1, r6
   143da:	4628      	mov	r0, r5
   143dc:	e7da      	b.n	14394 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   143de:	78da      	ldrb	r2, [r3, #3]
   143e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   143e4:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   143e6:	791a      	ldrb	r2, [r3, #4]
   143e8:	f022 0201 	bic.w	r2, r2, #1
   143ec:	711a      	strb	r2, [r3, #4]
}
   143ee:	e7aa      	b.n	14346 <bt_hci_ecc_send+0x26>
   143f0:	200002a0 	.word	0x200002a0
   143f4:	20002ea8 	.word	0x20002ea8
   143f8:	20000858 	.word	0x20000858

000143fc <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   143fc:	b510      	push	{r4, lr}
   143fe:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14400:	4c0c      	ldr	r4, [pc, #48]	; (14434 <bt_hci_ecc_init+0x38>)
   14402:	490d      	ldr	r1, [pc, #52]	; (14438 <bt_hci_ecc_init+0x3c>)
   14404:	2200      	movs	r2, #0
   14406:	2300      	movs	r3, #0
   14408:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1440c:	2300      	movs	r3, #0
   1440e:	220a      	movs	r2, #10
   14410:	e9cd 2303 	strd	r2, r3, [sp, #12]
   14414:	e9cd 3301 	strd	r3, r3, [sp, #4]
   14418:	9300      	str	r3, [sp, #0]
   1441a:	f44f 628f 	mov.w	r2, #1144	; 0x478
   1441e:	4b07      	ldr	r3, [pc, #28]	; (1443c <bt_hci_ecc_init+0x40>)
   14420:	4620      	mov	r0, r4
   14422:	f009 ff6f 	bl	1e304 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14426:	4906      	ldr	r1, [pc, #24]	; (14440 <bt_hci_ecc_init+0x44>)
   14428:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   1442a:	b008      	add	sp, #32
   1442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14430:	f010 bb1f 	b.w	24a72 <z_impl_k_thread_name_set>
   14434:	200015c0 	.word	0x200015c0
   14438:	200051a0 	.word	0x200051a0
   1443c:	000140ad 	.word	0x000140ad
   14440:	00026bdf 	.word	0x00026bdf

00014444 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   14444:	b538      	push	{r3, r4, r5, lr}
   14446:	4b14      	ldr	r3, [pc, #80]	; (14498 <save_id+0x54>)
   14448:	4c14      	ldr	r4, [pc, #80]	; (1449c <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   1444a:	4d15      	ldr	r5, [pc, #84]	; (144a0 <save_id+0x5c>)
	BT_INFO("Saving ID");
   1444c:	4815      	ldr	r0, [pc, #84]	; (144a4 <save_id+0x60>)
   1444e:	1ae4      	subs	r4, r4, r3
   14450:	08e4      	lsrs	r4, r4, #3
   14452:	01a4      	lsls	r4, r4, #6
   14454:	f044 0103 	orr.w	r1, r4, #3
   14458:	f00b fe58 	bl	2010c <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   1445c:	79ea      	ldrb	r2, [r5, #7]
   1445e:	4812      	ldr	r0, [pc, #72]	; (144a8 <save_id+0x64>)
   14460:	4629      	mov	r1, r5
   14462:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   14466:	f7fe f967 	bl	12738 <settings_save_one>
	if (err) {
   1446a:	4601      	mov	r1, r0
   1446c:	b120      	cbz	r0, 14478 <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
   1446e:	480f      	ldr	r0, [pc, #60]	; (144ac <save_id+0x68>)
   14470:	f044 0201 	orr.w	r2, r4, #1
   14474:	f00b fe57 	bl	20126 <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   14478:	79ea      	ldrb	r2, [r5, #7]
   1447a:	490d      	ldr	r1, [pc, #52]	; (144b0 <save_id+0x6c>)
   1447c:	480d      	ldr	r0, [pc, #52]	; (144b4 <save_id+0x70>)
   1447e:	0112      	lsls	r2, r2, #4
   14480:	f7fe f95a 	bl	12738 <settings_save_one>
	if (err) {
   14484:	4601      	mov	r1, r0
   14486:	b130      	cbz	r0, 14496 <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
   14488:	f044 0201 	orr.w	r2, r4, #1
   1448c:	480a      	ldr	r0, [pc, #40]	; (144b8 <save_id+0x74>)
	}
#endif
}
   1448e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
   14492:	f00b be48 	b.w	20126 <log_1>
}
   14496:	bd38      	pop	{r3, r4, r5, pc}
   14498:	000256c4 	.word	0x000256c4
   1449c:	00025734 	.word	0x00025734
   144a0:	200002a0 	.word	0x200002a0
   144a4:	00026c11 	.word	0x00026c11
   144a8:	00026c1b 	.word	0x00026c1b
   144ac:	00026c21 	.word	0x00026c21
   144b0:	200003e0 	.word	0x200003e0
   144b4:	00026c3c 	.word	0x00026c3c
   144b8:	00026c43 	.word	0x00026c43

000144bc <set>:
{
   144bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   144c0:	4605      	mov	r5, r0
   144c2:	4616      	mov	r6, r2
   144c4:	461f      	mov	r7, r3
	if (!name) {
   144c6:	b960      	cbnz	r0, 144e2 <set+0x26>
   144c8:	4934      	ldr	r1, [pc, #208]	; (1459c <set+0xe0>)
   144ca:	4b35      	ldr	r3, [pc, #212]	; (145a0 <set+0xe4>)
		BT_ERR("Insufficient number of arguments");
   144cc:	4835      	ldr	r0, [pc, #212]	; (145a4 <set+0xe8>)
   144ce:	1ac9      	subs	r1, r1, r3
   144d0:	08c9      	lsrs	r1, r1, #3
   144d2:	0189      	lsls	r1, r1, #6
   144d4:	f041 0101 	orr.w	r1, r1, #1
   144d8:	f00b fe18 	bl	2010c <log_0>
	return -ENOENT;
   144dc:	f06f 0401 	mvn.w	r4, #1
   144e0:	e01c      	b.n	1451c <set+0x60>
	len = settings_name_next(name, &next);
   144e2:	a901      	add	r1, sp, #4
   144e4:	f00c fb7c 	bl	20be0 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   144e8:	492f      	ldr	r1, [pc, #188]	; (145a8 <set+0xec>)
   144ea:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
   144ec:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
   144ee:	4628      	mov	r0, r5
   144f0:	f00d fe5b 	bl	221aa <strncmp>
   144f4:	4604      	mov	r4, r0
   144f6:	bb90      	cbnz	r0, 1455e <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   144f8:	f3bf 8f5b 	dmb	ish
   144fc:	4d2b      	ldr	r5, [pc, #172]	; (145ac <set+0xf0>)
   144fe:	682b      	ldr	r3, [r5, #0]
   14500:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   14504:	075b      	lsls	r3, r3, #29
   14506:	d50d      	bpl.n	14524 <set+0x68>
   14508:	4924      	ldr	r1, [pc, #144]	; (1459c <set+0xe0>)
   1450a:	4b25      	ldr	r3, [pc, #148]	; (145a0 <set+0xe4>)
			BT_WARN("Ignoring identities stored in flash");
   1450c:	4828      	ldr	r0, [pc, #160]	; (145b0 <set+0xf4>)
   1450e:	1ac9      	subs	r1, r1, r3
   14510:	08c9      	lsrs	r1, r1, #3
   14512:	0189      	lsls	r1, r1, #6
   14514:	f041 0102 	orr.w	r1, r1, #2
   14518:	f00b fdf8 	bl	2010c <log_0>
}
   1451c:	4620      	mov	r0, r4
   1451e:	b002      	add	sp, #8
   14520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   14524:	3d98      	subs	r5, #152	; 0x98
   14526:	2207      	movs	r2, #7
   14528:	4629      	mov	r1, r5
   1452a:	4638      	mov	r0, r7
   1452c:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   1452e:	2806      	cmp	r0, #6
   14530:	d810      	bhi.n	14554 <set+0x98>
   14532:	4b1b      	ldr	r3, [pc, #108]	; (145a0 <set+0xe4>)
   14534:	4919      	ldr	r1, [pc, #100]	; (1459c <set+0xe0>)
				BT_ERR("Invalid length ID address in storage");
   14536:	481f      	ldr	r0, [pc, #124]	; (145b4 <set+0xf8>)
   14538:	1ac9      	subs	r1, r1, r3
   1453a:	08c9      	lsrs	r1, r1, #3
   1453c:	0189      	lsls	r1, r1, #6
   1453e:	f041 0101 	orr.w	r1, r1, #1
   14542:	f00b fde3 	bl	2010c <log_0>
			(void)memset(bt_dev.id_addr, 0,
   14546:	2207      	movs	r2, #7
   14548:	4621      	mov	r1, r4
   1454a:	4628      	mov	r0, r5
   1454c:	f00d fe77 	bl	2223e <memset>
			bt_dev.id_count = 0U;
   14550:	71ec      	strb	r4, [r5, #7]
   14552:	e7e3      	b.n	1451c <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   14554:	2307      	movs	r3, #7
   14556:	fbb0 f0f3 	udiv	r0, r0, r3
   1455a:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   1455c:	e7de      	b.n	1451c <set+0x60>
	if (!strncmp(name, "irk", len)) {
   1455e:	4916      	ldr	r1, [pc, #88]	; (145b8 <set+0xfc>)
   14560:	4642      	mov	r2, r8
   14562:	4628      	mov	r0, r5
   14564:	f00d fe21 	bl	221aa <strncmp>
   14568:	4604      	mov	r4, r0
   1456a:	2800      	cmp	r0, #0
   1456c:	d1b6      	bne.n	144dc <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   1456e:	4913      	ldr	r1, [pc, #76]	; (145bc <set+0x100>)
   14570:	2210      	movs	r2, #16
   14572:	4638      	mov	r0, r7
   14574:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   14576:	280f      	cmp	r0, #15
   14578:	d8d0      	bhi.n	1451c <set+0x60>
   1457a:	4b09      	ldr	r3, [pc, #36]	; (145a0 <set+0xe4>)
   1457c:	4907      	ldr	r1, [pc, #28]	; (1459c <set+0xe0>)
				BT_ERR("Invalid length IRK in storage");
   1457e:	4810      	ldr	r0, [pc, #64]	; (145c0 <set+0x104>)
   14580:	1ac9      	subs	r1, r1, r3
   14582:	08c9      	lsrs	r1, r1, #3
   14584:	0189      	lsls	r1, r1, #6
   14586:	f041 0101 	orr.w	r1, r1, #1
   1458a:	f00b fdbf 	bl	2010c <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   1458e:	2210      	movs	r2, #16
   14590:	4621      	mov	r1, r4
   14592:	480a      	ldr	r0, [pc, #40]	; (145bc <set+0x100>)
   14594:	f00d fe53 	bl	2223e <memset>
   14598:	e7c0      	b.n	1451c <set+0x60>
   1459a:	bf00      	nop
   1459c:	00025734 	.word	0x00025734
   145a0:	000256c4 	.word	0x000256c4
   145a4:	00026c5f 	.word	0x00026c5f
   145a8:	000262c1 	.word	0x000262c1
   145ac:	20000338 	.word	0x20000338
   145b0:	00026c80 	.word	0x00026c80
   145b4:	00026ca4 	.word	0x00026ca4
   145b8:	00026c3f 	.word	0x00026c3f
   145bc:	200003e0 	.word	0x200003e0
   145c0:	00026cc9 	.word	0x00026cc9

000145c4 <bt_settings_encode_key>:
{
   145c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145c8:	b088      	sub	sp, #32
   145ca:	799c      	ldrb	r4, [r3, #6]
   145cc:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   145d0:	795d      	ldrb	r5, [r3, #5]
   145d2:	791e      	ldrb	r6, [r3, #4]
   145d4:	78df      	ldrb	r7, [r3, #3]
   145d6:	f893 c002 	ldrb.w	ip, [r3, #2]
   145da:	f893 e001 	ldrb.w	lr, [r3, #1]
   145de:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   145e0:	f1b8 0f00 	cmp.w	r8, #0
   145e4:	d00e      	beq.n	14604 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   145e6:	e9cd 3806 	strd	r3, r8, [sp, #24]
   145ea:	e9cd ce04 	strd	ip, lr, [sp, #16]
   145ee:	4613      	mov	r3, r2
   145f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   145f4:	e9cd 4500 	strd	r4, r5, [sp]
   145f8:	4a08      	ldr	r2, [pc, #32]	; (1461c <bt_settings_encode_key+0x58>)
   145fa:	f00b f94f 	bl	1f89c <snprintk>
}
   145fe:	b008      	add	sp, #32
   14600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   14604:	e9cd e305 	strd	lr, r3, [sp, #20]
   14608:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   1460c:	4613      	mov	r3, r2
   1460e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   14612:	4a03      	ldr	r2, [pc, #12]	; (14620 <bt_settings_encode_key+0x5c>)
   14614:	9400      	str	r4, [sp, #0]
   14616:	f00b f941 	bl	1f89c <snprintk>
}
   1461a:	e7f0      	b.n	145fe <bt_settings_encode_key+0x3a>
   1461c:	00026ce7 	.word	0x00026ce7
   14620:	00026d0b 	.word	0x00026d0b

00014624 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   14624:	4801      	ldr	r0, [pc, #4]	; (1462c <bt_settings_save_id+0x8>)
   14626:	f00a b997 	b.w	1e958 <k_work_submit>
   1462a:	bf00      	nop
   1462c:	20000528 	.word	0x20000528

00014630 <commit>:
}

static int commit(void)
{
   14630:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   14632:	4c1a      	ldr	r4, [pc, #104]	; (1469c <commit+0x6c>)
   14634:	79e3      	ldrb	r3, [r4, #7]
   14636:	b99b      	cbnz	r3, 14660 <commit+0x30>
		bt_setup_public_id_addr();
   14638:	f001 ffdc 	bl	165f4 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
   1463c:	79e3      	ldrb	r3, [r4, #7]
   1463e:	b97b      	cbnz	r3, 14660 <commit+0x30>
		int err;

		err = bt_setup_random_id_addr();
   14640:	f002 f87c 	bl	1673c <bt_setup_random_id_addr>
		if (err) {
   14644:	4604      	mov	r4, r0
   14646:	b158      	cbz	r0, 14660 <commit+0x30>
   14648:	4915      	ldr	r1, [pc, #84]	; (146a0 <commit+0x70>)
   1464a:	4b16      	ldr	r3, [pc, #88]	; (146a4 <commit+0x74>)
			BT_ERR("Unable to setup an identity address");
   1464c:	4816      	ldr	r0, [pc, #88]	; (146a8 <commit+0x78>)
   1464e:	1ac9      	subs	r1, r1, r3
   14650:	08c9      	lsrs	r1, r1, #3
   14652:	0189      	lsls	r1, r1, #6
   14654:	f041 0101 	orr.w	r1, r1, #1
   14658:	f00b fd58 	bl	2010c <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   1465c:	4620      	mov	r0, r4
   1465e:	bd38      	pop	{r3, r4, r5, pc}
   14660:	4d12      	ldr	r5, [pc, #72]	; (146ac <commit+0x7c>)
   14662:	f3bf 8f5b 	dmb	ish
   14666:	682b      	ldr	r3, [r5, #0]
   14668:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1466c:	079b      	lsls	r3, r3, #30
   1466e:	d401      	bmi.n	14674 <commit+0x44>
		bt_finalize_init();
   14670:	f001 fb0e 	bl	15c90 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14674:	f3bf 8f5b 	dmb	ish
   14678:	e855 4f00 	ldrex	r4, [r5]
   1467c:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
   14680:	e845 3200 	strex	r2, r3, [r5]
   14684:	2a00      	cmp	r2, #0
   14686:	d1f7      	bne.n	14678 <commit+0x48>
   14688:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   1468c:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   14690:	d0e4      	beq.n	1465c <commit+0x2c>
		bt_settings_save_id();
   14692:	f7ff ffc7 	bl	14624 <bt_settings_save_id>
	return 0;
   14696:	2400      	movs	r4, #0
   14698:	e7e0      	b.n	1465c <commit+0x2c>
   1469a:	bf00      	nop
   1469c:	200002a0 	.word	0x200002a0
   146a0:	00025734 	.word	0x00025734
   146a4:	000256c4 	.word	0x000256c4
   146a8:	00026d2c 	.word	0x00026d2c
   146ac:	20000338 	.word	0x20000338

000146b0 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   146b0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   146b2:	f7fe f9ad 	bl	12a10 <settings_subsys_init>
	if (err) {
   146b6:	4604      	mov	r4, r0
   146b8:	b150      	cbz	r0, 146d0 <bt_settings_init+0x20>
   146ba:	4a06      	ldr	r2, [pc, #24]	; (146d4 <bt_settings_init+0x24>)
   146bc:	4b06      	ldr	r3, [pc, #24]	; (146d8 <bt_settings_init+0x28>)
   146be:	1ad2      	subs	r2, r2, r3
   146c0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
   146c2:	0192      	lsls	r2, r2, #6
   146c4:	4601      	mov	r1, r0
   146c6:	f042 0201 	orr.w	r2, r2, #1
   146ca:	4804      	ldr	r0, [pc, #16]	; (146dc <bt_settings_init+0x2c>)
   146cc:	f00b fd2b 	bl	20126 <log_1>
		return err;
	}

	return 0;
}
   146d0:	4620      	mov	r0, r4
   146d2:	bd10      	pop	{r4, pc}
   146d4:	00025734 	.word	0x00025734
   146d8:	000256c4 	.word	0x000256c4
   146dc:	00026d50 	.word	0x00026d50

000146e0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   146e0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   146e2:	7802      	ldrb	r2, [r0, #0]
   146e4:	2a01      	cmp	r2, #1
{
   146e6:	4604      	mov	r4, r0
   146e8:	460b      	mov	r3, r1
	switch (src->type) {
   146ea:	d016      	beq.n	1471a <uuid_to_uuid128+0x3a>
   146ec:	2a02      	cmp	r2, #2
   146ee:	d02c      	beq.n	1474a <uuid_to_uuid128+0x6a>
   146f0:	b98a      	cbnz	r2, 14716 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   146f2:	4a19      	ldr	r2, [pc, #100]	; (14758 <uuid_to_uuid128+0x78>)
   146f4:	460d      	mov	r5, r1
   146f6:	f102 0710 	add.w	r7, r2, #16
   146fa:	6810      	ldr	r0, [r2, #0]
   146fc:	6851      	ldr	r1, [r2, #4]
   146fe:	462e      	mov	r6, r5
   14700:	c603      	stmia	r6!, {r0, r1}
   14702:	3208      	adds	r2, #8
   14704:	42ba      	cmp	r2, r7
   14706:	4635      	mov	r5, r6
   14708:	d1f7      	bne.n	146fa <uuid_to_uuid128+0x1a>
   1470a:	7812      	ldrb	r2, [r2, #0]
   1470c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1470e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   14710:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   14712:	0a12      	lsrs	r2, r2, #8
   14714:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14716:	bcf0      	pop	{r4, r5, r6, r7}
   14718:	4770      	bx	lr
		*dst = uuid128_base;
   1471a:	4a0f      	ldr	r2, [pc, #60]	; (14758 <uuid_to_uuid128+0x78>)
   1471c:	460d      	mov	r5, r1
   1471e:	f102 0710 	add.w	r7, r2, #16
   14722:	6810      	ldr	r0, [r2, #0]
   14724:	6851      	ldr	r1, [r2, #4]
   14726:	462e      	mov	r6, r5
   14728:	c603      	stmia	r6!, {r0, r1}
   1472a:	3208      	adds	r2, #8
   1472c:	42ba      	cmp	r2, r7
   1472e:	4635      	mov	r5, r6
   14730:	d1f7      	bne.n	14722 <uuid_to_uuid128+0x42>
   14732:	7812      	ldrb	r2, [r2, #0]
   14734:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   14736:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   14738:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1473a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1473e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   14740:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   14742:	0a12      	lsrs	r2, r2, #8
   14744:	7399      	strb	r1, [r3, #14]
   14746:	741a      	strb	r2, [r3, #16]
}
   14748:	e7e5      	b.n	14716 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1474a:	4601      	mov	r1, r0
}
   1474c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1474e:	2211      	movs	r2, #17
   14750:	4618      	mov	r0, r3
   14752:	f00d bd49 	b.w	221e8 <memcpy>
   14756:	bf00      	nop
   14758:	00026d84 	.word	0x00026d84

0001475c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1475c:	b538      	push	{r3, r4, r5, lr}
   1475e:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   14760:	4805      	ldr	r0, [pc, #20]	; (14778 <bt_buf_get_rx+0x1c>)
   14762:	f00f fe4e 	bl	24402 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   14766:	4604      	mov	r4, r0
   14768:	b120      	cbz	r0, 14774 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   1476a:	2100      	movs	r1, #0
   1476c:	3008      	adds	r0, #8
   1476e:	f00f fe67 	bl	24440 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14772:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14774:	4620      	mov	r0, r4
   14776:	bd38      	pop	{r3, r4, r5, pc}
   14778:	20000988 	.word	0x20000988

0001477c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1477c:	b570      	push	{r4, r5, r6, lr}
   1477e:	4602      	mov	r2, r0
   14780:	460b      	mov	r3, r1
	__asm__ volatile(
   14782:	f04f 0140 	mov.w	r1, #64	; 0x40
   14786:	f3ef 8511 	mrs	r5, BASEPRI
   1478a:	f381 8811 	msr	BASEPRI, r1
   1478e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   14792:	480c      	ldr	r0, [pc, #48]	; (147c4 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   14794:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   14796:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   1479a:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
   1479e:	f385 8811 	msr	BASEPRI, r5
   147a2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   147a6:	b924      	cbnz	r4, 147b2 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   147a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   147ac:	2001      	movs	r0, #1
   147ae:	f7ff bfd5 	b.w	1475c <bt_buf_get_rx>
   147b2:	2301      	movs	r3, #1
   147b4:	f104 0008 	add.w	r0, r4, #8
   147b8:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   147ba:	81a1      	strh	r1, [r4, #12]
   147bc:	f00f fe40 	bl	24440 <net_buf_simple_reserve>
}
   147c0:	4620      	mov	r0, r4
   147c2:	bd70      	pop	{r4, r5, r6, pc}
   147c4:	200002a0 	.word	0x200002a0

000147c8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   147c8:	b570      	push	{r4, r5, r6, lr}
   147ca:	4604      	mov	r4, r0
	switch (evt) {
   147cc:	2c0f      	cmp	r4, #15
{
   147ce:	460d      	mov	r5, r1
   147d0:	4610      	mov	r0, r2
   147d2:	4619      	mov	r1, r3
	switch (evt) {
   147d4:	d805      	bhi.n	147e2 <bt_buf_get_evt+0x1a>
   147d6:	2c0d      	cmp	r4, #13
   147d8:	d912      	bls.n	14800 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   147da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   147de:	f7ff bfcd 	b.w	1477c <bt_buf_get_cmd_complete>
	switch (evt) {
   147e2:	2c13      	cmp	r4, #19
   147e4:	d10c      	bne.n	14800 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   147e6:	480b      	ldr	r0, [pc, #44]	; (14814 <bt_buf_get_evt+0x4c>)
   147e8:	f00f fe0b 	bl	24402 <net_buf_alloc_fixed>
			if (buf) {
   147ec:	4604      	mov	r4, r0
   147ee:	b128      	cbz	r0, 147fc <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   147f0:	2100      	movs	r1, #0
   147f2:	3008      	adds	r0, #8
   147f4:	f00f fe24 	bl	24440 <net_buf_simple_reserve>
   147f8:	2301      	movs	r3, #1
   147fa:	7523      	strb	r3, [r4, #20]
}
   147fc:	4620      	mov	r0, r4
   147fe:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14800:	4602      	mov	r2, r0
   14802:	460b      	mov	r3, r1
		if (discardable) {
   14804:	b10d      	cbz	r5, 1480a <bt_buf_get_evt+0x42>
   14806:	4804      	ldr	r0, [pc, #16]	; (14818 <bt_buf_get_evt+0x50>)
   14808:	e7ee      	b.n	147e8 <bt_buf_get_evt+0x20>
}
   1480a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1480e:	2001      	movs	r0, #1
   14810:	f7ff bfa4 	b.w	1475c <bt_buf_get_rx>
   14814:	200009b0 	.word	0x200009b0
   14818:	20000910 	.word	0x20000910

0001481c <ver_str>:
{
   1481c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   1481e:	4d0b      	ldr	r5, [pc, #44]	; (1484c <ver_str+0x30>)
{
   14820:	4606      	mov	r6, r0
	const char * const str[] = {
   14822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   14824:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
   14826:	466c      	mov	r4, sp
   14828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1482a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1482c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1482e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   14832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   14836:	2e0b      	cmp	r6, #11
		return str[ver];
   14838:	bf9b      	ittet	ls
   1483a:	ab0c      	addls	r3, sp, #48	; 0x30
   1483c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   14840:	4803      	ldrhi	r0, [pc, #12]	; (14850 <ver_str+0x34>)
		return str[ver];
   14842:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
   14846:	b00c      	add	sp, #48	; 0x30
   14848:	bd70      	pop	{r4, r5, r6, pc}
   1484a:	bf00      	nop
   1484c:	00025860 	.word	0x00025860
   14850:	00026e87 	.word	0x00026e87

00014854 <hci_data_buf_overflow>:
   14854:	4905      	ldr	r1, [pc, #20]	; (1486c <hci_data_buf_overflow+0x18>)
   14856:	4a06      	ldr	r2, [pc, #24]	; (14870 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   14858:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1485a:	4806      	ldr	r0, [pc, #24]	; (14874 <hci_data_buf_overflow+0x20>)
   1485c:	1a52      	subs	r2, r2, r1
   1485e:	08d2      	lsrs	r2, r2, #3
   14860:	0192      	lsls	r2, r2, #6
   14862:	7819      	ldrb	r1, [r3, #0]
   14864:	f042 0202 	orr.w	r2, r2, #2
   14868:	f00b bc5d 	b.w	20126 <log_1>
   1486c:	000256c4 	.word	0x000256c4
   14870:	00025704 	.word	0x00025704
   14874:	00026e8f 	.word	0x00026e8f

00014878 <unpair>:
{
   14878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1487c:	4606      	mov	r6, r0
   1487e:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   14880:	f002 fffe 	bl	17880 <bt_conn_lookup_addr_le>
	if (conn) {
   14884:	4604      	mov	r4, r0
   14886:	b9b0      	cbnz	r0, 148b6 <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
   14888:	4639      	mov	r1, r7
   1488a:	4630      	mov	r0, r6
   1488c:	f007 faee 	bl	1be6c <bt_keys_find_addr>
		if (keys) {
   14890:	4605      	mov	r5, r0
   14892:	b110      	cbz	r0, 1489a <unpair+0x22>
			bt_keys_clear(keys);
   14894:	4628      	mov	r0, r5
   14896:	f007 faf9 	bl	1be8c <bt_keys_clear>
	bt_gatt_clear(id, addr);
   1489a:	4639      	mov	r1, r7
   1489c:	4630      	mov	r0, r6
   1489e:	f005 fd29 	bl	1a2f4 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   148a2:	4b10      	ldr	r3, [pc, #64]	; (148e4 <unpair+0x6c>)
   148a4:	681b      	ldr	r3, [r3, #0]
   148a6:	b1db      	cbz	r3, 148e0 <unpair+0x68>
   148a8:	6a1b      	ldr	r3, [r3, #32]
   148aa:	b1cb      	cbz	r3, 148e0 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
   148ac:	4639      	mov	r1, r7
   148ae:	4630      	mov	r0, r6
}
   148b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
   148b4:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
   148b6:	7883      	ldrb	r3, [r0, #2]
   148b8:	2b01      	cmp	r3, #1
   148ba:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   148be:	bf04      	itt	eq
   148c0:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   148c4:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   148c8:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   148cc:	bf18      	it	ne
   148ce:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   148d0:	f00e f99e 	bl	22c10 <bt_conn_disconnect>
		bt_conn_unref(conn);
   148d4:	4620      	mov	r0, r4
   148d6:	f00e f960 	bl	22b9a <bt_conn_unref>
		if (!keys) {
   148da:	2d00      	cmp	r5, #0
   148dc:	d1da      	bne.n	14894 <unpair+0x1c>
   148de:	e7d3      	b.n	14888 <unpair+0x10>
}
   148e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148e4:	20002ed4 	.word	0x20002ed4

000148e8 <hci_disconn_complete_prio>:
{
   148e8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   148ea:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   148ec:	781a      	ldrb	r2, [r3, #0]
   148ee:	b99a      	cbnz	r2, 14918 <hci_disconn_complete_prio+0x30>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   148f0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   148f4:	4620      	mov	r0, r4
   148f6:	f002 fed3 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   148fa:	4605      	mov	r5, r0
   148fc:	b968      	cbnz	r0, 1491a <hci_disconn_complete_prio+0x32>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   148fe:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   14902:	4a0a      	ldr	r2, [pc, #40]	; (1492c <hci_disconn_complete_prio+0x44>)
	if (!conn) {
   14904:	2305      	movs	r3, #5
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   14906:	ea6f 5010 	mvn.w	r0, r0, lsr #20
		if (!disconnected_handles[i]) {
   1490a:	f832 1b02 	ldrh.w	r1, [r2], #2
   1490e:	b909      	cbnz	r1, 14914 <hci_disconn_complete_prio+0x2c>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   14910:	f822 0c02 	strh.w	r0, [r2, #-2]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14914:	3b01      	subs	r3, #1
   14916:	d1f8      	bne.n	1490a <hci_disconn_complete_prio+0x22>
}
   14918:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1491a:	2101      	movs	r1, #1
   1491c:	f002 fecc 	bl	176b8 <bt_conn_set_state>
	bt_conn_unref(conn);
   14920:	4628      	mov	r0, r5
}
   14922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   14926:	f00e b938 	b.w	22b9a <bt_conn_unref>
   1492a:	bf00      	nop
   1492c:	200032f0 	.word	0x200032f0

00014930 <hci_disconn_complete>:
{
   14930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14932:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   14934:	7835      	ldrb	r5, [r6, #0]
   14936:	b9f5      	cbnz	r5, 14976 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14938:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   1493c:	4638      	mov	r0, r7
   1493e:	f002 feaf 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   14942:	4604      	mov	r4, r0
   14944:	b960      	cbnz	r0, 14960 <hci_disconn_complete+0x30>
   14946:	4b0c      	ldr	r3, [pc, #48]	; (14978 <hci_disconn_complete+0x48>)
   14948:	4a0c      	ldr	r2, [pc, #48]	; (1497c <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   1494a:	480d      	ldr	r0, [pc, #52]	; (14980 <hci_disconn_complete+0x50>)
   1494c:	1ad2      	subs	r2, r2, r3
   1494e:	08d2      	lsrs	r2, r2, #3
   14950:	0192      	lsls	r2, r2, #6
   14952:	4639      	mov	r1, r7
   14954:	f042 0201 	orr.w	r2, r2, #1
}
   14958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1495c:	f00b bbe3 	b.w	20126 <log_1>
	conn->err = evt->reason;
   14960:	78f3      	ldrb	r3, [r6, #3]
   14962:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14964:	4629      	mov	r1, r5
   14966:	f002 fea7 	bl	176b8 <bt_conn_set_state>
	conn->handle = 0U;
   1496a:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1496c:	4620      	mov	r0, r4
}
   1496e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   14972:	f00e b912 	b.w	22b9a <bt_conn_unref>
}
   14976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14978:	000256c4 	.word	0x000256c4
   1497c:	00025704 	.word	0x00025704
   14980:	00026eb7 	.word	0x00026eb7

00014984 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14984:	6883      	ldr	r3, [r0, #8]
{
   14986:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14988:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1498a:	4620      	mov	r0, r4
   1498c:	f002 fe88 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   14990:	b960      	cbnz	r0, 149ac <le_data_len_change+0x28>
   14992:	4a08      	ldr	r2, [pc, #32]	; (149b4 <le_data_len_change+0x30>)
   14994:	4b08      	ldr	r3, [pc, #32]	; (149b8 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14996:	4809      	ldr	r0, [pc, #36]	; (149bc <le_data_len_change+0x38>)
   14998:	1ad2      	subs	r2, r2, r3
   1499a:	08d2      	lsrs	r2, r2, #3
   1499c:	0192      	lsls	r2, r2, #6
   1499e:	4621      	mov	r1, r4
   149a0:	f042 0201 	orr.w	r2, r2, #1
}
   149a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   149a8:	f00b bbbd 	b.w	20126 <log_1>
}
   149ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   149b0:	f00e b8f3 	b.w	22b9a <bt_conn_unref>
   149b4:	00025704 	.word	0x00025704
   149b8:	000256c4 	.word	0x000256c4
   149bc:	00026edd 	.word	0x00026edd

000149c0 <hci_hardware_error>:
{
   149c0:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   149c2:	2101      	movs	r1, #1
   149c4:	3008      	adds	r0, #8
   149c6:	f00f fd99 	bl	244fc <net_buf_simple_pull_mem>
   149ca:	4b06      	ldr	r3, [pc, #24]	; (149e4 <hci_hardware_error+0x24>)
   149cc:	4a06      	ldr	r2, [pc, #24]	; (149e8 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   149ce:	7801      	ldrb	r1, [r0, #0]
   149d0:	4806      	ldr	r0, [pc, #24]	; (149ec <hci_hardware_error+0x2c>)
   149d2:	1ad2      	subs	r2, r2, r3
   149d4:	08d2      	lsrs	r2, r2, #3
   149d6:	0192      	lsls	r2, r2, #6
}
   149d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   149dc:	f042 0201 	orr.w	r2, r2, #1
   149e0:	f00b bba1 	b.w	20126 <log_1>
   149e4:	000256c4 	.word	0x000256c4
   149e8:	00025704 	.word	0x00025704
   149ec:	00026f01 	.word	0x00026f01

000149f0 <hci_vendor_event>:
{
   149f0:	b510      	push	{r4, lr}
   149f2:	4a0a      	ldr	r2, [pc, #40]	; (14a1c <hci_vendor_event+0x2c>)
   149f4:	4c0a      	ldr	r4, [pc, #40]	; (14a20 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   149f6:	8981      	ldrh	r1, [r0, #12]
   149f8:	6880      	ldr	r0, [r0, #8]
   149fa:	1aa4      	subs	r4, r4, r2
   149fc:	f7ff faf6 	bl	13fec <bt_hex_real>
   14a00:	f7fc fdb8 	bl	11574 <z_log_strdup>
   14a04:	08e4      	lsrs	r4, r4, #3
   14a06:	01a4      	lsls	r4, r4, #6
   14a08:	f044 0402 	orr.w	r4, r4, #2
   14a0c:	4601      	mov	r1, r0
   14a0e:	4622      	mov	r2, r4
   14a10:	4804      	ldr	r0, [pc, #16]	; (14a24 <hci_vendor_event+0x34>)
}
   14a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   14a16:	f00b bb86 	b.w	20126 <log_1>
   14a1a:	bf00      	nop
   14a1c:	000256c4 	.word	0x000256c4
   14a20:	00025704 	.word	0x00025704
   14a24:	00026f23 	.word	0x00026f23

00014a28 <hci_encrypt_key_refresh_complete>:
{
   14a28:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   14a2a:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14a2c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   14a30:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   14a32:	4630      	mov	r0, r6
   14a34:	f002 fe34 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   14a38:	4604      	mov	r4, r0
   14a3a:	b960      	cbnz	r0, 14a56 <hci_encrypt_key_refresh_complete+0x2e>
   14a3c:	4a1e      	ldr	r2, [pc, #120]	; (14ab8 <hci_encrypt_key_refresh_complete+0x90>)
   14a3e:	4b1f      	ldr	r3, [pc, #124]	; (14abc <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   14a40:	481f      	ldr	r0, [pc, #124]	; (14ac0 <hci_encrypt_key_refresh_complete+0x98>)
   14a42:	1ad2      	subs	r2, r2, r3
   14a44:	08d2      	lsrs	r2, r2, #3
   14a46:	0192      	lsls	r2, r2, #6
   14a48:	4631      	mov	r1, r6
   14a4a:	f042 0201 	orr.w	r2, r2, #1
}
   14a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   14a52:	f00b bb68 	b.w	20126 <log_1>
	if (status) {
   14a56:	b165      	cbz	r5, 14a72 <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
   14a58:	2d29      	cmp	r5, #41	; 0x29
   14a5a:	bf96      	itet	ls
   14a5c:	4b19      	ldrls	r3, [pc, #100]	; (14ac4 <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
   14a5e:	2208      	movhi	r2, #8
   14a60:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   14a62:	4629      	mov	r1, r5
   14a64:	f002 fc9a 	bl	1739c <bt_conn_security_changed>
	bt_conn_unref(conn);
   14a68:	4620      	mov	r0, r4
}
   14a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   14a6e:	f00e b894 	b.w	22b9a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   14a72:	7883      	ldrb	r3, [r0, #2]
   14a74:	2b01      	cmp	r3, #1
   14a76:	d107      	bne.n	14a88 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
   14a78:	f007 f8b0 	bl	1bbdc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   14a7c:	4620      	mov	r0, r4
   14a7e:	f00d fd43 	bl	22508 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   14a82:	2800      	cmp	r0, #0
   14a84:	bf08      	it	eq
   14a86:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14a88:	4b0e      	ldr	r3, [pc, #56]	; (14ac4 <hci_encrypt_key_refresh_complete+0x9c>)
   14a8a:	4629      	mov	r1, r5
   14a8c:	5d5a      	ldrb	r2, [r3, r5]
   14a8e:	4620      	mov	r0, r4
   14a90:	f002 fc84 	bl	1739c <bt_conn_security_changed>
	if (status) {
   14a94:	2d00      	cmp	r5, #0
   14a96:	d0e7      	beq.n	14a68 <hci_encrypt_key_refresh_complete+0x40>
   14a98:	4b08      	ldr	r3, [pc, #32]	; (14abc <hci_encrypt_key_refresh_complete+0x94>)
   14a9a:	4907      	ldr	r1, [pc, #28]	; (14ab8 <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
   14a9c:	480a      	ldr	r0, [pc, #40]	; (14ac8 <hci_encrypt_key_refresh_complete+0xa0>)
   14a9e:	1ac9      	subs	r1, r1, r3
   14aa0:	08c9      	lsrs	r1, r1, #3
   14aa2:	0189      	lsls	r1, r1, #6
   14aa4:	f041 0101 	orr.w	r1, r1, #1
   14aa8:	f00b fb30 	bl	2010c <log_0>
		bt_conn_disconnect(conn, status);
   14aac:	4629      	mov	r1, r5
   14aae:	4620      	mov	r0, r4
   14ab0:	f00e f8ae 	bl	22c10 <bt_conn_disconnect>
   14ab4:	e7d8      	b.n	14a68 <hci_encrypt_key_refresh_complete+0x40>
   14ab6:	bf00      	nop
   14ab8:	00025704 	.word	0x00025704
   14abc:	000256c4 	.word	0x000256c4
   14ac0:	00026eb7 	.word	0x00026eb7
   14ac4:	000274dc 	.word	0x000274dc
   14ac8:	00026f47 	.word	0x00026f47

00014acc <hci_encrypt_change>:
{
   14acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   14ace:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14ad0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   14ad4:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   14ad6:	4638      	mov	r0, r7
   14ad8:	f002 fde2 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   14adc:	4604      	mov	r4, r0
   14ade:	b960      	cbnz	r0, 14afa <hci_encrypt_change+0x2e>
   14ae0:	4b1f      	ldr	r3, [pc, #124]	; (14b60 <hci_encrypt_change+0x94>)
   14ae2:	4a20      	ldr	r2, [pc, #128]	; (14b64 <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   14ae4:	4820      	ldr	r0, [pc, #128]	; (14b68 <hci_encrypt_change+0x9c>)
   14ae6:	1ad2      	subs	r2, r2, r3
   14ae8:	08d2      	lsrs	r2, r2, #3
   14aea:	0192      	lsls	r2, r2, #6
   14aec:	4639      	mov	r1, r7
   14aee:	f042 0201 	orr.w	r2, r2, #1
}
   14af2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   14af6:	f00b bb16 	b.w	20126 <log_1>
	if (status) {
   14afa:	b165      	cbz	r5, 14b16 <hci_encrypt_change+0x4a>
	switch (hci_err) {
   14afc:	2d29      	cmp	r5, #41	; 0x29
   14afe:	bf96      	itet	ls
   14b00:	4b1a      	ldrls	r3, [pc, #104]	; (14b6c <hci_encrypt_change+0xa0>)
	if (status) {
   14b02:	2208      	movhi	r2, #8
   14b04:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   14b06:	4629      	mov	r1, r5
   14b08:	f002 fc48 	bl	1739c <bt_conn_security_changed>
	bt_conn_unref(conn);
   14b0c:	4620      	mov	r0, r4
}
   14b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   14b12:	f00e b842 	b.w	22b9a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   14b16:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   14b18:	78f3      	ldrb	r3, [r6, #3]
   14b1a:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   14b1c:	2a01      	cmp	r2, #1
   14b1e:	d108      	bne.n	14b32 <hci_encrypt_change+0x66>
		if (conn->encrypt) {
   14b20:	b10b      	cbz	r3, 14b26 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   14b22:	f007 f85b 	bl	1bbdc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   14b26:	4620      	mov	r0, r4
   14b28:	f00d fcee 	bl	22508 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   14b2c:	2800      	cmp	r0, #0
   14b2e:	bf08      	it	eq
   14b30:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14b32:	4b0e      	ldr	r3, [pc, #56]	; (14b6c <hci_encrypt_change+0xa0>)
   14b34:	4629      	mov	r1, r5
   14b36:	5d5a      	ldrb	r2, [r3, r5]
   14b38:	4620      	mov	r0, r4
   14b3a:	f002 fc2f 	bl	1739c <bt_conn_security_changed>
	if (status) {
   14b3e:	2d00      	cmp	r5, #0
   14b40:	d0e4      	beq.n	14b0c <hci_encrypt_change+0x40>
   14b42:	4b07      	ldr	r3, [pc, #28]	; (14b60 <hci_encrypt_change+0x94>)
   14b44:	4907      	ldr	r1, [pc, #28]	; (14b64 <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
   14b46:	480a      	ldr	r0, [pc, #40]	; (14b70 <hci_encrypt_change+0xa4>)
   14b48:	1ac9      	subs	r1, r1, r3
   14b4a:	08c9      	lsrs	r1, r1, #3
   14b4c:	0189      	lsls	r1, r1, #6
   14b4e:	f041 0101 	orr.w	r1, r1, #1
   14b52:	f00b fadb 	bl	2010c <log_0>
		bt_conn_disconnect(conn, status);
   14b56:	4629      	mov	r1, r5
   14b58:	4620      	mov	r0, r4
   14b5a:	f00e f859 	bl	22c10 <bt_conn_disconnect>
   14b5e:	e7d5      	b.n	14b0c <hci_encrypt_change+0x40>
   14b60:	000256c4 	.word	0x000256c4
   14b64:	00025704 	.word	0x00025704
   14b68:	00026eb7 	.word	0x00026eb7
   14b6c:	000274dc 	.word	0x000274dc
   14b70:	00026f47 	.word	0x00026f47

00014b74 <le_conn_update_complete>:
{
   14b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   14b76:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14b78:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   14b7c:	4630      	mov	r0, r6
   14b7e:	f002 fd8f 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   14b82:	4604      	mov	r4, r0
   14b84:	b960      	cbnz	r0, 14ba0 <le_conn_update_complete+0x2c>
   14b86:	4a1f      	ldr	r2, [pc, #124]	; (14c04 <le_conn_update_complete+0x90>)
   14b88:	4b1f      	ldr	r3, [pc, #124]	; (14c08 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14b8a:	4820      	ldr	r0, [pc, #128]	; (14c0c <le_conn_update_complete+0x98>)
   14b8c:	1ad2      	subs	r2, r2, r3
   14b8e:	08d2      	lsrs	r2, r2, #3
   14b90:	0192      	lsls	r2, r2, #6
   14b92:	f042 0201 	orr.w	r2, r2, #1
   14b96:	4631      	mov	r1, r6
   14b98:	f00b fac5 	bl	20126 <log_1>
}
   14b9c:	b002      	add	sp, #8
   14b9e:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   14ba0:	782b      	ldrb	r3, [r5, #0]
   14ba2:	b9bb      	cbnz	r3, 14bd4 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   14ba4:	792a      	ldrb	r2, [r5, #4]
   14ba6:	78eb      	ldrb	r3, [r5, #3]
   14ba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14bac:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   14bb0:	79aa      	ldrb	r2, [r5, #6]
   14bb2:	796b      	ldrb	r3, [r5, #5]
   14bb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14bb8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14bbc:	79eb      	ldrb	r3, [r5, #7]
   14bbe:	7a2a      	ldrb	r2, [r5, #8]
   14bc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14bc4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   14bc8:	f002 fb76 	bl	172b8 <notify_le_param_updated>
	bt_conn_unref(conn);
   14bcc:	4620      	mov	r0, r4
   14bce:	f00d ffe4 	bl	22b9a <bt_conn_unref>
   14bd2:	e7e3      	b.n	14b9c <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14bd4:	2b1a      	cmp	r3, #26
   14bd6:	d1f9      	bne.n	14bcc <le_conn_update_complete+0x58>
   14bd8:	78c3      	ldrb	r3, [r0, #3]
   14bda:	2b01      	cmp	r3, #1
   14bdc:	d1f6      	bne.n	14bcc <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
   14be2:	3004      	adds	r0, #4
   14be4:	f00d fcab 	bl	2253e <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   14be8:	0543      	lsls	r3, r0, #21
   14bea:	d4ef      	bmi.n	14bcc <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   14bec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   14bf0:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   14bf2:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   14bf4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   14bf8:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   14bfa:	4620      	mov	r0, r4
   14bfc:	f003 f9ee 	bl	17fdc <bt_l2cap_update_conn_param>
   14c00:	e7e4      	b.n	14bcc <le_conn_update_complete+0x58>
   14c02:	bf00      	nop
   14c04:	00025704 	.word	0x00025704
   14c08:	000256c4 	.word	0x000256c4
   14c0c:	00026edd 	.word	0x00026edd

00014c10 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14c10:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14c12:	4c0c      	ldr	r4, [pc, #48]	; (14c44 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14c14:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14c16:	2205      	movs	r2, #5
   14c18:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   14c1c:	f002 fe7a 	bl	17914 <bt_conn_lookup_state_le>
		if (!conn) {
   14c20:	b970      	cbnz	r0, 14c40 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   14c22:	4b09      	ldr	r3, [pc, #36]	; (14c48 <find_pending_connect.part.0+0x38>)
   14c24:	6818      	ldr	r0, [r3, #0]
   14c26:	889a      	ldrh	r2, [r3, #4]
   14c28:	9000      	str	r0, [sp, #0]
   14c2a:	799b      	ldrb	r3, [r3, #6]
   14c2c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14c30:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
   14c34:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14c38:	2204      	movs	r2, #4
   14c3a:	4669      	mov	r1, sp
   14c3c:	f002 fe6a 	bl	17914 <bt_conn_lookup_state_le>
}
   14c40:	b002      	add	sp, #8
   14c42:	bd10      	pop	{r4, pc}
   14c44:	200002a0 	.word	0x200002a0
   14c48:	00025890 	.word	0x00025890

00014c4c <hci_cmd_done>:
{
   14c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14c50:	4607      	mov	r7, r0
   14c52:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14c54:	7990      	ldrb	r0, [r2, #6]
   14c56:	4e40      	ldr	r6, [pc, #256]	; (14d58 <hci_cmd_done+0x10c>)
{
   14c58:	4688      	mov	r8, r1
   14c5a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14c5c:	f007 fa12 	bl	1c084 <net_buf_pool_get>
   14c60:	4286      	cmp	r6, r0
   14c62:	d016      	beq.n	14c92 <hci_cmd_done+0x46>
   14c64:	4b3d      	ldr	r3, [pc, #244]	; (14d5c <hci_cmd_done+0x110>)
   14c66:	4d3e      	ldr	r5, [pc, #248]	; (14d60 <hci_cmd_done+0x114>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   14c68:	79a0      	ldrb	r0, [r4, #6]
   14c6a:	9700      	str	r7, [sp, #0]
   14c6c:	1aed      	subs	r5, r5, r3
   14c6e:	08ed      	lsrs	r5, r5, #3
   14c70:	9001      	str	r0, [sp, #4]
   14c72:	f007 fa07 	bl	1c084 <net_buf_pool_get>
   14c76:	01ad      	lsls	r5, r5, #6
   14c78:	f045 0502 	orr.w	r5, r5, #2
   14c7c:	e9cd 0602 	strd	r0, r6, [sp, #8]
   14c80:	462b      	mov	r3, r5
   14c82:	4838      	ldr	r0, [pc, #224]	; (14d64 <hci_cmd_done+0x118>)
   14c84:	2204      	movs	r2, #4
   14c86:	4669      	mov	r1, sp
   14c88:	f00b fa96 	bl	201b8 <log_n>
}
   14c8c:	b005      	add	sp, #20
   14c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   14c92:	4620      	mov	r0, r4
   14c94:	f007 f9fe 	bl	1c094 <net_buf_id>
   14c98:	4d33      	ldr	r5, [pc, #204]	; (14d68 <hci_cmd_done+0x11c>)
   14c9a:	f04f 090c 	mov.w	r9, #12
   14c9e:	fb09 5300 	mla	r3, r9, r0, r5
   14ca2:	885b      	ldrh	r3, [r3, #2]
   14ca4:	42bb      	cmp	r3, r7
   14ca6:	d011      	beq.n	14ccc <hci_cmd_done+0x80>
   14ca8:	4b2c      	ldr	r3, [pc, #176]	; (14d5c <hci_cmd_done+0x110>)
   14caa:	4e2d      	ldr	r6, [pc, #180]	; (14d60 <hci_cmd_done+0x114>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   14cac:	4620      	mov	r0, r4
   14cae:	1af6      	subs	r6, r6, r3
   14cb0:	f007 f9f0 	bl	1c094 <net_buf_id>
   14cb4:	08f6      	lsrs	r6, r6, #3
   14cb6:	fb09 5000 	mla	r0, r9, r0, r5
   14cba:	01b6      	lsls	r6, r6, #6
   14cbc:	f046 0602 	orr.w	r6, r6, #2
   14cc0:	8842      	ldrh	r2, [r0, #2]
   14cc2:	482a      	ldr	r0, [pc, #168]	; (14d6c <hci_cmd_done+0x120>)
   14cc4:	4633      	mov	r3, r6
   14cc6:	4639      	mov	r1, r7
   14cc8:	f00b fa41 	bl	2014e <log_2>
	if (cmd(buf)->state && !status) {
   14ccc:	4620      	mov	r0, r4
   14cce:	f007 f9e1 	bl	1c094 <net_buf_id>
   14cd2:	260c      	movs	r6, #12
   14cd4:	fb06 5000 	mla	r0, r6, r0, r5
   14cd8:	6843      	ldr	r3, [r0, #4]
   14cda:	b1ab      	cbz	r3, 14d08 <hci_cmd_done+0xbc>
   14cdc:	f1b8 0f00 	cmp.w	r8, #0
   14ce0:	d112      	bne.n	14d08 <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14ce2:	4620      	mov	r0, r4
   14ce4:	f007 f9d6 	bl	1c094 <net_buf_id>
   14ce8:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   14cec:	2101      	movs	r1, #1
   14cee:	6842      	ldr	r2, [r0, #4]
   14cf0:	e9d2 3000 	ldrd	r3, r0, [r2]
	if (val) {
   14cf4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   14cf6:	f000 061f 	and.w	r6, r0, #31
   14cfa:	40b1      	lsls	r1, r6
	if (val) {
   14cfc:	0940      	lsrs	r0, r0, #5
   14cfe:	b1da      	cbz	r2, 14d38 <hci_cmd_done+0xec>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14d00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14d04:	f00d fc1b 	bl	2253e <atomic_or>
	if (cmd(buf)->sync) {
   14d08:	4620      	mov	r0, r4
   14d0a:	f007 f9c3 	bl	1c094 <net_buf_id>
   14d0e:	260c      	movs	r6, #12
   14d10:	fb06 5000 	mla	r0, r6, r0, r5
   14d14:	6883      	ldr	r3, [r0, #8]
   14d16:	2b00      	cmp	r3, #0
   14d18:	d0b8      	beq.n	14c8c <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   14d1a:	4620      	mov	r0, r4
   14d1c:	f007 f9ba 	bl	1c094 <net_buf_id>
   14d20:	4370      	muls	r0, r6
   14d22:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   14d26:	4620      	mov	r0, r4
   14d28:	f007 f9b4 	bl	1c094 <net_buf_id>
   14d2c:	fb06 5500 	mla	r5, r6, r0, r5
   14d30:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   14d32:	f009 fc79 	bl	1e628 <z_impl_k_sem_give>
}
   14d36:	e7a9      	b.n	14c8c <hci_cmd_done+0x40>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14d38:	43c9      	mvns	r1, r1
   14d3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   14d3e:	f3bf 8f5b 	dmb	ish
   14d42:	e853 2f00 	ldrex	r2, [r3]
   14d46:	400a      	ands	r2, r1
   14d48:	e843 2000 	strex	r0, r2, [r3]
   14d4c:	2800      	cmp	r0, #0
   14d4e:	d1f8      	bne.n	14d42 <hci_cmd_done+0xf6>
   14d50:	f3bf 8f5b 	dmb	ish
   14d54:	e7d8      	b.n	14d08 <hci_cmd_done+0xbc>
   14d56:	bf00      	nop
   14d58:	20000960 	.word	0x20000960
   14d5c:	000256c4 	.word	0x000256c4
   14d60:	00025704 	.word	0x00025704
   14d64:	00026f6d 	.word	0x00026f6d
   14d68:	20002eac 	.word	0x20002eac
   14d6c:	00026fa2 	.word	0x00026fa2

00014d70 <handle_event>:
{
   14d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14d72:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   14d76:	4605      	mov	r5, r0
   14d78:	4608      	mov	r0, r1
		if (handler->event != event) {
   14d7a:	7811      	ldrb	r1, [r2, #0]
   14d7c:	42a9      	cmp	r1, r5
   14d7e:	d01a      	beq.n	14db6 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   14d80:	3208      	adds	r2, #8
   14d82:	429a      	cmp	r2, r3
   14d84:	d1f9      	bne.n	14d7a <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14d86:	8986      	ldrh	r6, [r0, #12]
   14d88:	4b16      	ldr	r3, [pc, #88]	; (14de4 <handle_event+0x74>)
   14d8a:	4c17      	ldr	r4, [pc, #92]	; (14de8 <handle_event+0x78>)
   14d8c:	6880      	ldr	r0, [r0, #8]
   14d8e:	4631      	mov	r1, r6
   14d90:	1ae4      	subs	r4, r4, r3
   14d92:	f7ff f92b 	bl	13fec <bt_hex_real>
   14d96:	f7fc fbed 	bl	11574 <z_log_strdup>
   14d9a:	08e4      	lsrs	r4, r4, #3
   14d9c:	01a4      	lsls	r4, r4, #6
   14d9e:	f044 0402 	orr.w	r4, r4, #2
   14da2:	4603      	mov	r3, r0
   14da4:	f8ad 4000 	strh.w	r4, [sp]
   14da8:	4810      	ldr	r0, [pc, #64]	; (14dec <handle_event+0x7c>)
   14daa:	4632      	mov	r2, r6
   14dac:	4629      	mov	r1, r5
   14dae:	f00b f9e7 	bl	20180 <log_3>
}
   14db2:	b002      	add	sp, #8
   14db4:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   14db6:	8981      	ldrh	r1, [r0, #12]
   14db8:	7853      	ldrb	r3, [r2, #1]
   14dba:	428b      	cmp	r3, r1
   14dbc:	d90d      	bls.n	14dda <handle_event+0x6a>
   14dbe:	4a09      	ldr	r2, [pc, #36]	; (14de4 <handle_event+0x74>)
   14dc0:	4b09      	ldr	r3, [pc, #36]	; (14de8 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14dc2:	480b      	ldr	r0, [pc, #44]	; (14df0 <handle_event+0x80>)
   14dc4:	1a9b      	subs	r3, r3, r2
   14dc6:	08db      	lsrs	r3, r3, #3
   14dc8:	019b      	lsls	r3, r3, #6
   14dca:	f043 0301 	orr.w	r3, r3, #1
   14dce:	462a      	mov	r2, r5
}
   14dd0:	b002      	add	sp, #8
   14dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14dd6:	f00b b9ba 	b.w	2014e <log_2>
		handler->handler(buf);
   14dda:	6853      	ldr	r3, [r2, #4]
}
   14ddc:	b002      	add	sp, #8
   14dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   14de2:	4718      	bx	r3
   14de4:	000256c4 	.word	0x000256c4
   14de8:	00025704 	.word	0x00025704
   14dec:	00026ff7 	.word	0x00026ff7
   14df0:	00026fd5 	.word	0x00026fd5

00014df4 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   14df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14df8:	4b47      	ldr	r3, [pc, #284]	; (14f18 <hci_rx_thread+0x124>)
   14dfa:	4d48      	ldr	r5, [pc, #288]	; (14f1c <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14dfc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 14f3c <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14e00:	f8df 913c 	ldr.w	r9, [pc, #316]	; 14f40 <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14e04:	4f46      	ldr	r7, [pc, #280]	; (14f20 <hci_rx_thread+0x12c>)
   14e06:	1aed      	subs	r5, r5, r3
   14e08:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14e0a:	f04f 32ff 	mov.w	r2, #4294967295
   14e0e:	f04f 33ff 	mov.w	r3, #4294967295
   14e12:	4640      	mov	r0, r8
   14e14:	f00f fafa 	bl	2440c <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14e18:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   14e1a:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14e1c:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   14e1e:	d046      	beq.n	14eae <hci_rx_thread+0xba>
   14e20:	2903      	cmp	r1, #3
   14e22:	d173      	bne.n	14f0c <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14e24:	8983      	ldrh	r3, [r0, #12]
   14e26:	2b03      	cmp	r3, #3
   14e28:	d80c      	bhi.n	14e44 <hci_rx_thread+0x50>
   14e2a:	493e      	ldr	r1, [pc, #248]	; (14f24 <hci_rx_thread+0x130>)
   14e2c:	483e      	ldr	r0, [pc, #248]	; (14f28 <hci_rx_thread+0x134>)
   14e2e:	f240 1379 	movw	r3, #377	; 0x179
   14e32:	463a      	mov	r2, r7
   14e34:	f00a fd25 	bl	1f882 <printk>
   14e38:	4040      	eors	r0, r0
   14e3a:	f380 8811 	msr	BASEPRI, r0
   14e3e:	f04f 0003 	mov.w	r0, #3
   14e42:	df02      	svc	2
   14e44:	2104      	movs	r1, #4
   14e46:	f104 0008 	add.w	r0, r4, #8
   14e4a:	f00f fb57 	bl	244fc <net_buf_simple_pull_mem>
	if (buf->len != len) {
   14e4e:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   14e50:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14e52:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14e56:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   14e58:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   14e5c:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   14e5e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14e60:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   14e62:	d009      	beq.n	14e78 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   14e64:	01ab      	lsls	r3, r5, #6
   14e66:	4831      	ldr	r0, [pc, #196]	; (14f2c <hci_rx_thread+0x138>)
   14e68:	f043 0301 	orr.w	r3, r3, #1
   14e6c:	f00b f96f 	bl	2014e <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   14e70:	4620      	mov	r0, r4
   14e72:	f007 f9c3 	bl	1c1fc <net_buf_unref>
			break;
   14e76:	e017      	b.n	14ea8 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14e78:	f002 fc12 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   14e7c:	4606      	mov	r6, r0
   14e7e:	b938      	cbnz	r0, 14e90 <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14e80:	01aa      	lsls	r2, r5, #6
   14e82:	8ae1      	ldrh	r1, [r4, #22]
   14e84:	482a      	ldr	r0, [pc, #168]	; (14f30 <hci_rx_thread+0x13c>)
   14e86:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14e8a:	f00b f94c 	bl	20126 <log_1>
   14e8e:	e7ef      	b.n	14e70 <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   14e90:	f002 fefc 	bl	17c8c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   14e94:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   14e98:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   14e9a:	4621      	mov	r1, r4
   14e9c:	4630      	mov	r0, r6
   14e9e:	f002 fa9b 	bl	173d8 <bt_conn_recv>
	bt_conn_unref(conn);
   14ea2:	4630      	mov	r0, r6
   14ea4:	f00d fe79 	bl	22b9a <bt_conn_unref>
	z_impl_k_yield();
   14ea8:	f00a f890 	bl	1efcc <z_impl_k_yield>
	while (1) {
   14eac:	e7ad      	b.n	14e0a <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14eae:	8983      	ldrh	r3, [r0, #12]
   14eb0:	2b01      	cmp	r3, #1
   14eb2:	d80c      	bhi.n	14ece <hci_rx_thread+0xda>
   14eb4:	491b      	ldr	r1, [pc, #108]	; (14f24 <hci_rx_thread+0x130>)
   14eb6:	481c      	ldr	r0, [pc, #112]	; (14f28 <hci_rx_thread+0x134>)
   14eb8:	f640 03f9 	movw	r3, #2297	; 0x8f9
   14ebc:	463a      	mov	r2, r7
   14ebe:	f00a fce0 	bl	1f882 <printk>
   14ec2:	4040      	eors	r0, r0
   14ec4:	f380 8811 	msr	BASEPRI, r0
   14ec8:	f04f 0003 	mov.w	r0, #3
   14ecc:	df02      	svc	2
   14ece:	2102      	movs	r1, #2
   14ed0:	f104 0008 	add.w	r0, r4, #8
   14ed4:	f00f fb12 	bl	244fc <net_buf_simple_pull_mem>
   14ed8:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14eda:	7800      	ldrb	r0, [r0, #0]
   14edc:	f00d fb02 	bl	224e4 <bt_hci_evt_get_flags>
   14ee0:	0783      	lsls	r3, r0, #30
   14ee2:	d40c      	bmi.n	14efe <hci_rx_thread+0x10a>
   14ee4:	4913      	ldr	r1, [pc, #76]	; (14f34 <hci_rx_thread+0x140>)
   14ee6:	4810      	ldr	r0, [pc, #64]	; (14f28 <hci_rx_thread+0x134>)
   14ee8:	f640 03fd 	movw	r3, #2301	; 0x8fd
   14eec:	463a      	mov	r2, r7
   14eee:	f00a fcc8 	bl	1f882 <printk>
   14ef2:	4040      	eors	r0, r0
   14ef4:	f380 8811 	msr	BASEPRI, r0
   14ef8:	f04f 0003 	mov.w	r0, #3
   14efc:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14efe:	7830      	ldrb	r0, [r6, #0]
   14f00:	2306      	movs	r3, #6
   14f02:	464a      	mov	r2, r9
   14f04:	4621      	mov	r1, r4
   14f06:	f7ff ff33 	bl	14d70 <handle_event>
	net_buf_unref(buf);
   14f0a:	e7b1      	b.n	14e70 <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14f0c:	01aa      	lsls	r2, r5, #6
   14f0e:	480a      	ldr	r0, [pc, #40]	; (14f38 <hci_rx_thread+0x144>)
   14f10:	f042 0201 	orr.w	r2, r2, #1
   14f14:	e7b9      	b.n	14e8a <hci_rx_thread+0x96>
   14f16:	bf00      	nop
   14f18:	000256c4 	.word	0x000256c4
   14f1c:	00025704 	.word	0x00025704
   14f20:	00027019 	.word	0x00027019
   14f24:	0002704d 	.word	0x0002704d
   14f28:	00027066 	.word	0x00027066
   14f2c:	00027083 	.word	0x00027083
   14f30:	000270a7 	.word	0x000270a7
   14f34:	000270c9 	.word	0x000270c9
   14f38:	000270f7 	.word	0x000270f7
   14f3c:	200003ac 	.word	0x200003ac
   14f40:	00025d18 	.word	0x00025d18

00014f44 <hci_le_meta_event>:
{
   14f44:	b510      	push	{r4, lr}
   14f46:	2101      	movs	r1, #1
   14f48:	4604      	mov	r4, r0
   14f4a:	3008      	adds	r0, #8
   14f4c:	f00f fad6 	bl	244fc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14f50:	4621      	mov	r1, r4
   14f52:	4a03      	ldr	r2, [pc, #12]	; (14f60 <hci_le_meta_event+0x1c>)
   14f54:	7800      	ldrb	r0, [r0, #0]
}
   14f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14f5a:	230a      	movs	r3, #10
   14f5c:	f7ff bf08 	b.w	14d70 <handle_event>
   14f60:	00025ca8 	.word	0x00025ca8

00014f64 <hci_num_completed_packets>:
{
   14f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f68:	4d39      	ldr	r5, [pc, #228]	; (15050 <hci_num_completed_packets+0xec>)
   14f6a:	4b3a      	ldr	r3, [pc, #232]	; (15054 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14f6c:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   14f70:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1505c <hci_num_completed_packets+0xf8>
   14f74:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   14f76:	2600      	movs	r6, #0
   14f78:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   14f7a:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   14f7c:	f898 3000 	ldrb.w	r3, [r8]
   14f80:	429e      	cmp	r6, r3
   14f82:	db01      	blt.n	14f88 <hci_num_completed_packets+0x24>
}
   14f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14f88:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   14f8c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14f90:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   14f94:	4658      	mov	r0, fp
   14f96:	f002 fb83 	bl	176a0 <bt_conn_lookup_handle>
		if (!conn) {
   14f9a:	4604      	mov	r4, r0
   14f9c:	b1d8      	cbz	r0, 14fd6 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   14f9e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   14fa2:	2f00      	cmp	r7, #0
   14fa4:	d033      	beq.n	1500e <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   14fa6:	f04f 0340 	mov.w	r3, #64	; 0x40
   14faa:	f3ef 8211 	mrs	r2, BASEPRI
   14fae:	f383 8811 	msr	BASEPRI, r3
   14fb2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14fb6:	69e3      	ldr	r3, [r4, #28]
   14fb8:	b1b3      	cbz	r3, 14fe8 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   14fba:	3b01      	subs	r3, #1
   14fbc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14fbe:	f382 8811 	msr	BASEPRI, r2
   14fc2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   14fc6:	4620      	mov	r0, r4
   14fc8:	f002 f972 	bl	172b0 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   14fcc:	3f01      	subs	r7, #1
   14fce:	f009 fb2b 	bl	1e628 <z_impl_k_sem_give>
   14fd2:	b2bf      	uxth	r7, r7
   14fd4:	e7e5      	b.n	14fa2 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   14fd6:	01aa      	lsls	r2, r5, #6
   14fd8:	481f      	ldr	r0, [pc, #124]	; (15058 <hci_num_completed_packets+0xf4>)
   14fda:	f042 0201 	orr.w	r2, r2, #1
   14fde:	4659      	mov	r1, fp
   14fe0:	f00b f8a1 	bl	20126 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   14fe4:	3601      	adds	r6, #1
   14fe6:	e7c9      	b.n	14f7c <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   14fe8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14fea:	b12b      	cbz	r3, 14ff8 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14fec:	69a1      	ldr	r1, [r4, #24]
   14fee:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   14ff0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14ff2:	428b      	cmp	r3, r1
	list->tail = node;
   14ff4:	bf08      	it	eq
   14ff6:	61a0      	streq	r0, [r4, #24]
   14ff8:	f382 8811 	msr	BASEPRI, r2
   14ffc:	f3bf 8f6f 	isb	sy
			if (!node) {
   15000:	b94b      	cbnz	r3, 15016 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   15002:	01a9      	lsls	r1, r5, #6
   15004:	f041 0101 	orr.w	r1, r1, #1
   15008:	4650      	mov	r0, sl
   1500a:	f00b f87f 	bl	2010c <log_0>
		bt_conn_unref(conn);
   1500e:	4620      	mov	r0, r4
   15010:	f00d fdc3 	bl	22b9a <bt_conn_unref>
   15014:	e7e6      	b.n	14fe4 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   15016:	f04f 0240 	mov.w	r2, #64	; 0x40
   1501a:	f3ef 8111 	mrs	r1, BASEPRI
   1501e:	f382 8811 	msr	BASEPRI, r2
   15022:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   15026:	68da      	ldr	r2, [r3, #12]
   15028:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   1502a:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   1502e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   15030:	f8c3 900c 	str.w	r9, [r3, #12]
   15034:	b94a      	cbnz	r2, 1504a <hci_num_completed_packets+0xe6>
	list->head = node;
   15036:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1503a:	f381 8811 	msr	BASEPRI, r1
   1503e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   15042:	4658      	mov	r0, fp
   15044:	f009 fc88 	bl	1e958 <k_work_submit>
   15048:	e7bd      	b.n	14fc6 <hci_num_completed_packets+0x62>
	parent->next = child;
   1504a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1504c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1504e:	e7f4      	b.n	1503a <hci_num_completed_packets+0xd6>
   15050:	00025704 	.word	0x00025704
   15054:	000256c4 	.word	0x000256c4
   15058:	0002710b 	.word	0x0002710b
   1505c:	00027127 	.word	0x00027127

00015060 <hci_tx_thread>:
{
   15060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15064:	4d51      	ldr	r5, [pc, #324]	; (151ac <hci_tx_thread+0x14c>)
   15066:	4b52      	ldr	r3, [pc, #328]	; (151b0 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   15068:	f8df 914c 	ldr.w	r9, [pc, #332]	; 151b8 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   1506c:	f8df a174 	ldr.w	sl, [pc, #372]	; 151e4 <hci_tx_thread+0x184>
   15070:	1aed      	subs	r5, r5, r3
   15072:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   15074:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15078:	484e      	ldr	r0, [pc, #312]	; (151b4 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1507a:	f36f 3352 	bfc	r3, #13, #6
   1507e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15082:	f002 fa97 	bl	175b4 <bt_conn_prepare_events>
   15086:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   15088:	484b      	ldr	r0, [pc, #300]	; (151b8 <hci_tx_thread+0x158>)
   1508a:	f04f 32ff 	mov.w	r2, #4294967295
   1508e:	f04f 33ff 	mov.w	r3, #4294967295
   15092:	4639      	mov	r1, r7
   15094:	f00a fa88 	bl	1f5a8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   15098:	b160      	cbz	r0, 150b4 <hci_tx_thread+0x54>
   1509a:	4948      	ldr	r1, [pc, #288]	; (151bc <hci_tx_thread+0x15c>)
   1509c:	4848      	ldr	r0, [pc, #288]	; (151c0 <hci_tx_thread+0x160>)
   1509e:	f640 136f 	movw	r3, #2415	; 0x96f
   150a2:	4652      	mov	r2, sl
   150a4:	f00a fbed 	bl	1f882 <printk>
   150a8:	4040      	eors	r0, r0
   150aa:	f380 8811 	msr	BASEPRI, r0
   150ae:	f04f 0003 	mov.w	r0, #3
   150b2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   150b4:	4e43      	ldr	r6, [pc, #268]	; (151c4 <hci_tx_thread+0x164>)
{
   150b6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 151b8 <hci_tx_thread+0x158>
   150ba:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
   150be:	b917      	cbnz	r7, 150c6 <hci_tx_thread+0x66>
	z_impl_k_yield();
   150c0:	f009 ff84 	bl	1efcc <z_impl_k_yield>
	while (1) {
   150c4:	e7d6      	b.n	15074 <hci_tx_thread+0x14>
		switch (ev->state) {
   150c6:	f8d8 100c 	ldr.w	r1, [r8, #12]
   150ca:	f3c1 3145 	ubfx	r1, r1, #13, #6
   150ce:	2901      	cmp	r1, #1
   150d0:	d959      	bls.n	15186 <hci_tx_thread+0x126>
   150d2:	2904      	cmp	r1, #4
   150d4:	d163      	bne.n	1519e <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   150d6:	f898 300c 	ldrb.w	r3, [r8, #12]
   150da:	2b00      	cmp	r3, #0
   150dc:	d157      	bne.n	1518e <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   150de:	483a      	ldr	r0, [pc, #232]	; (151c8 <hci_tx_thread+0x168>)
   150e0:	2200      	movs	r2, #0
   150e2:	2300      	movs	r3, #0
   150e4:	f00f f992 	bl	2440c <net_buf_get>
	BT_ASSERT(buf);
   150e8:	4604      	mov	r4, r0
   150ea:	b960      	cbnz	r0, 15106 <hci_tx_thread+0xa6>
   150ec:	4937      	ldr	r1, [pc, #220]	; (151cc <hci_tx_thread+0x16c>)
   150ee:	4834      	ldr	r0, [pc, #208]	; (151c0 <hci_tx_thread+0x160>)
   150f0:	f640 130c 	movw	r3, #2316	; 0x90c
   150f4:	4652      	mov	r2, sl
   150f6:	f00a fbc4 	bl	1f882 <printk>
   150fa:	4040      	eors	r0, r0
   150fc:	f380 8811 	msr	BASEPRI, r0
   15100:	f04f 0003 	mov.w	r0, #3
   15104:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   15106:	f04f 33ff 	mov.w	r3, #4294967295
   1510a:	f04f 32ff 	mov.w	r2, #4294967295
   1510e:	4658      	mov	r0, fp
   15110:	f009 fab0 	bl	1e674 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   15114:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   15118:	b163      	cbz	r3, 15134 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   1511a:	01a9      	lsls	r1, r5, #6
   1511c:	482c      	ldr	r0, [pc, #176]	; (151d0 <hci_tx_thread+0x170>)
   1511e:	f041 0101 	orr.w	r1, r1, #1
   15122:	f00a fff3 	bl	2010c <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   15126:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   1512a:	f007 f867 	bl	1c1fc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1512e:	2300      	movs	r3, #0
   15130:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   15134:	4620      	mov	r0, r4
   15136:	f00f f994 	bl	24462 <net_buf_ref>
   1513a:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
		return bt_hci_ecc_send(buf);
   1513e:	4620      	mov	r0, r4
   15140:	f7ff f8ee 	bl	14320 <bt_hci_ecc_send>
	if (err) {
   15144:	4601      	mov	r1, r0
   15146:	b1f0      	cbz	r0, 15186 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   15148:	01aa      	lsls	r2, r5, #6
   1514a:	4822      	ldr	r0, [pc, #136]	; (151d4 <hci_tx_thread+0x174>)
   1514c:	f042 0201 	orr.w	r2, r2, #1
   15150:	f00a ffe9 	bl	20126 <log_1>
	z_impl_k_sem_give(sem);
   15154:	4820      	ldr	r0, [pc, #128]	; (151d8 <hci_tx_thread+0x178>)
   15156:	f009 fa67 	bl	1e628 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1515a:	4620      	mov	r0, r4
   1515c:	f006 ff9a 	bl	1c094 <net_buf_id>
   15160:	4b1e      	ldr	r3, [pc, #120]	; (151dc <hci_tx_thread+0x17c>)
   15162:	220c      	movs	r2, #12
   15164:	fb02 3000 	mla	r0, r2, r0, r3
   15168:	211f      	movs	r1, #31
   1516a:	8840      	ldrh	r0, [r0, #2]
   1516c:	4622      	mov	r2, r4
   1516e:	f7ff fd6d 	bl	14c4c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   15172:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   15176:	f007 f841 	bl	1c1fc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1517a:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1517c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   1517e:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
   15182:	f007 f83b 	bl	1c1fc <net_buf_unref>
	for (; count; ev++, count--) {
   15186:	f108 0814 	add.w	r8, r8, #20
   1518a:	3f01      	subs	r7, #1
   1518c:	e797      	b.n	150be <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1518e:	2b01      	cmp	r3, #1
   15190:	d1f9      	bne.n	15186 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   15192:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   15196:	3838      	subs	r0, #56	; 0x38
   15198:	f002 fcc8 	bl	17b2c <bt_conn_process_tx>
   1519c:	e7f3      	b.n	15186 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1519e:	01aa      	lsls	r2, r5, #6
   151a0:	480f      	ldr	r0, [pc, #60]	; (151e0 <hci_tx_thread+0x180>)
   151a2:	f042 0202 	orr.w	r2, r2, #2
   151a6:	f00a ffbe 	bl	20126 <log_1>
   151aa:	e7ec      	b.n	15186 <hci_tx_thread+0x126>
   151ac:	00025704 	.word	0x00025704
   151b0:	000256c4 	.word	0x000256c4
   151b4:	2000054c 	.word	0x2000054c
   151b8:	20000538 	.word	0x20000538
   151bc:	0002713e 	.word	0x0002713e
   151c0:	00027066 	.word	0x00027066
   151c4:	200002a0 	.word	0x200002a0
   151c8:	200003c4 	.word	0x200003c4
   151cc:	00026d98 	.word	0x00026d98
   151d0:	00027147 	.word	0x00027147
   151d4:	00027162 	.word	0x00027162
   151d8:	20000390 	.word	0x20000390
   151dc:	20002eac 	.word	0x20002eac
   151e0:	00027184 	.word	0x00027184
   151e4:	00027019 	.word	0x00027019

000151e8 <hci_cmd_status>:
{
   151e8:	b538      	push	{r3, r4, r5, lr}
   151ea:	2104      	movs	r1, #4
   151ec:	4604      	mov	r4, r0
   151ee:	3008      	adds	r0, #8
   151f0:	f00f f984 	bl	244fc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   151f4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   151f6:	7801      	ldrb	r1, [r0, #0]
   151f8:	8840      	ldrh	r0, [r0, #2]
   151fa:	4622      	mov	r2, r4
   151fc:	f7ff fd26 	bl	14c4c <hci_cmd_done>
	if (ncmd) {
   15200:	b125      	cbz	r5, 1520c <hci_cmd_status+0x24>
   15202:	4803      	ldr	r0, [pc, #12]	; (15210 <hci_cmd_status+0x28>)
}
   15204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15208:	f009 ba0e 	b.w	1e628 <z_impl_k_sem_give>
   1520c:	bd38      	pop	{r3, r4, r5, pc}
   1520e:	bf00      	nop
   15210:	20000390 	.word	0x20000390

00015214 <hci_cmd_complete>:
{
   15214:	b538      	push	{r3, r4, r5, lr}
   15216:	2103      	movs	r1, #3
   15218:	4604      	mov	r4, r0
   1521a:	3008      	adds	r0, #8
   1521c:	f00f f96e 	bl	244fc <net_buf_simple_pull_mem>
	status = buf->data[0];
   15220:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   15222:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   15224:	7819      	ldrb	r1, [r3, #0]
   15226:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1522a:	4622      	mov	r2, r4
   1522c:	f7ff fd0e 	bl	14c4c <hci_cmd_done>
	if (ncmd) {
   15230:	b125      	cbz	r5, 1523c <hci_cmd_complete+0x28>
   15232:	4803      	ldr	r0, [pc, #12]	; (15240 <hci_cmd_complete+0x2c>)
}
   15234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15238:	f009 b9f6 	b.w	1e628 <z_impl_k_sem_give>
   1523c:	bd38      	pop	{r3, r4, r5, pc}
   1523e:	bf00      	nop
   15240:	20000390 	.word	0x20000390

00015244 <bt_hci_cmd_state_set_init>:
{
   15244:	b510      	push	{r4, lr}
	state->bit = bit;
   15246:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1524a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1524e:	720b      	strb	r3, [r1, #8]
{
   15250:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   15252:	f006 ff1f 	bl	1c094 <net_buf_id>
   15256:	4b03      	ldr	r3, [pc, #12]	; (15264 <bt_hci_cmd_state_set_init+0x20>)
   15258:	220c      	movs	r2, #12
   1525a:	fb02 3000 	mla	r0, r2, r0, r3
   1525e:	6044      	str	r4, [r0, #4]
}
   15260:	bd10      	pop	{r4, pc}
   15262:	bf00      	nop
   15264:	20002eac 	.word	0x20002eac

00015268 <bt_hci_cmd_create>:
{
   15268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   1526c:	f04f 32ff 	mov.w	r2, #4294967295
   15270:	f04f 33ff 	mov.w	r3, #4294967295
   15274:	4605      	mov	r5, r0
   15276:	4816      	ldr	r0, [pc, #88]	; (152d0 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   15278:	f8df 8058 	ldr.w	r8, [pc, #88]	; 152d4 <bt_hci_cmd_create+0x6c>
{
   1527c:	460e      	mov	r6, r1
   1527e:	f00f f8c0 	bl	24402 <net_buf_alloc_fixed>
   15282:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   15284:	f100 0b08 	add.w	fp, r0, #8
   15288:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1528a:	2700      	movs	r7, #0
   1528c:	4658      	mov	r0, fp
   1528e:	f00f f8d7 	bl	24440 <net_buf_simple_reserve>
   15292:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   15294:	4620      	mov	r0, r4
   15296:	f006 fefd 	bl	1c094 <net_buf_id>
   1529a:	f04f 0a0c 	mov.w	sl, #12
   1529e:	fb0a 8000 	mla	r0, sl, r0, r8
   152a2:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   152a4:	4620      	mov	r0, r4
   152a6:	f006 fef5 	bl	1c094 <net_buf_id>
   152aa:	fb0a 8000 	mla	r0, sl, r0, r8
   152ae:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   152b0:	4620      	mov	r0, r4
   152b2:	f006 feef 	bl	1c094 <net_buf_id>
   152b6:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   152ba:	2103      	movs	r1, #3
   152bc:	6047      	str	r7, [r0, #4]
   152be:	4658      	mov	r0, fp
   152c0:	f00f f8f5 	bl	244ae <net_buf_simple_add>
	hdr->param_len = param_len;
   152c4:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   152c6:	8005      	strh	r5, [r0, #0]
}
   152c8:	4620      	mov	r0, r4
   152ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152ce:	bf00      	nop
   152d0:	20000960 	.word	0x20000960
   152d4:	20002eac 	.word	0x20002eac

000152d8 <bt_hci_cmd_send>:
{
   152d8:	b538      	push	{r3, r4, r5, lr}
   152da:	4605      	mov	r5, r0
	if (!buf) {
   152dc:	460c      	mov	r4, r1
   152de:	b919      	cbnz	r1, 152e8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   152e0:	f7ff ffc2 	bl	15268 <bt_hci_cmd_create>
		if (!buf) {
   152e4:	4604      	mov	r4, r0
   152e6:	b1f0      	cbz	r0, 15326 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   152e8:	f640 4335 	movw	r3, #3125	; 0xc35
   152ec:	429d      	cmp	r5, r3
   152ee:	d114      	bne.n	1531a <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
   152f0:	4620      	mov	r0, r4
   152f2:	f7ff f815 	bl	14320 <bt_hci_ecc_send>
		if (err) {
   152f6:	4605      	mov	r5, r0
   152f8:	b168      	cbz	r0, 15316 <bt_hci_cmd_send+0x3e>
   152fa:	4b0c      	ldr	r3, [pc, #48]	; (1532c <bt_hci_cmd_send+0x54>)
   152fc:	4a0c      	ldr	r2, [pc, #48]	; (15330 <bt_hci_cmd_send+0x58>)
   152fe:	1ad2      	subs	r2, r2, r3
   15300:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   15302:	0192      	lsls	r2, r2, #6
   15304:	4601      	mov	r1, r0
   15306:	f042 0201 	orr.w	r2, r2, #1
   1530a:	480a      	ldr	r0, [pc, #40]	; (15334 <bt_hci_cmd_send+0x5c>)
   1530c:	f00a ff0b 	bl	20126 <log_1>
			net_buf_unref(buf);
   15310:	4620      	mov	r0, r4
   15312:	f006 ff73 	bl	1c1fc <net_buf_unref>
}
   15316:	4628      	mov	r0, r5
   15318:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1531a:	4807      	ldr	r0, [pc, #28]	; (15338 <bt_hci_cmd_send+0x60>)
   1531c:	4621      	mov	r1, r4
   1531e:	f00f f893 	bl	24448 <net_buf_put>
	return 0;
   15322:	2500      	movs	r5, #0
   15324:	e7f7      	b.n	15316 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   15326:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1532a:	e7f4      	b.n	15316 <bt_hci_cmd_send+0x3e>
   1532c:	000256c4 	.word	0x000256c4
   15330:	00025704 	.word	0x00025704
   15334:	00027162 	.word	0x00027162
   15338:	200003c4 	.word	0x200003c4

0001533c <le_ltk_request>:
{
   1533c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1533e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15340:	882e      	ldrh	r6, [r5, #0]
   15342:	b2b7      	uxth	r7, r6
{
   15344:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   15346:	4638      	mov	r0, r7
   15348:	f002 f9aa 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   1534c:	4604      	mov	r4, r0
   1534e:	b960      	cbnz	r0, 1536a <le_ltk_request+0x2e>
   15350:	4a26      	ldr	r2, [pc, #152]	; (153ec <le_ltk_request+0xb0>)
   15352:	4b27      	ldr	r3, [pc, #156]	; (153f0 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15354:	4827      	ldr	r0, [pc, #156]	; (153f4 <le_ltk_request+0xb8>)
   15356:	1ad2      	subs	r2, r2, r3
   15358:	08d2      	lsrs	r2, r2, #3
   1535a:	0192      	lsls	r2, r2, #6
   1535c:	f042 0201 	orr.w	r2, r2, #1
   15360:	4639      	mov	r1, r7
   15362:	f00a fee0 	bl	20126 <log_1>
}
   15366:	b007      	add	sp, #28
   15368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1536a:	af02      	add	r7, sp, #8
   1536c:	f8d5 2002 	ldr.w	r2, [r5, #2]
   15370:	f8d5 3006 	ldr.w	r3, [r5, #6]
   15374:	9701      	str	r7, [sp, #4]
   15376:	8969      	ldrh	r1, [r5, #10]
   15378:	9100      	str	r1, [sp, #0]
   1537a:	f00e fdf3 	bl	23f64 <bt_smp_request_ltk>
   1537e:	b320      	cbz	r0, 153ca <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   15380:	2112      	movs	r1, #18
   15382:	f242 001a 	movw	r0, #8218	; 0x201a
   15386:	f7ff ff6f 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   1538a:	4605      	mov	r5, r0
   1538c:	b968      	cbnz	r0, 153aa <le_ltk_request+0x6e>
   1538e:	4917      	ldr	r1, [pc, #92]	; (153ec <le_ltk_request+0xb0>)
   15390:	4b17      	ldr	r3, [pc, #92]	; (153f0 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
   15392:	4819      	ldr	r0, [pc, #100]	; (153f8 <le_ltk_request+0xbc>)
   15394:	1ac9      	subs	r1, r1, r3
   15396:	08c9      	lsrs	r1, r1, #3
   15398:	0189      	lsls	r1, r1, #6
   1539a:	f041 0101 	orr.w	r1, r1, #1
   1539e:	f00a feb5 	bl	2010c <log_0>
	bt_conn_unref(conn);
   153a2:	4620      	mov	r0, r4
   153a4:	f00d fbf9 	bl	22b9a <bt_conn_unref>
   153a8:	e7dd      	b.n	15366 <le_ltk_request+0x2a>
   153aa:	2112      	movs	r1, #18
   153ac:	3008      	adds	r0, #8
   153ae:	f00f f87e 	bl	244ae <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   153b2:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   153b4:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   153b8:	2210      	movs	r2, #16
   153ba:	f00c ff15 	bl	221e8 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   153be:	4629      	mov	r1, r5
   153c0:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   153c4:	f7ff ff88 	bl	152d8 <bt_hci_cmd_send>
   153c8:	e7eb      	b.n	153a2 <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   153ca:	2102      	movs	r1, #2
   153cc:	f242 001b 	movw	r0, #8219	; 0x201b
   153d0:	f7ff ff4a 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   153d4:	4605      	mov	r5, r0
   153d6:	2800      	cmp	r0, #0
   153d8:	d0d9      	beq.n	1538e <le_ltk_request+0x52>
   153da:	2102      	movs	r1, #2
   153dc:	3008      	adds	r0, #8
   153de:	f00f f866 	bl	244ae <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   153e2:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   153e4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   153e6:	f242 001b 	movw	r0, #8219	; 0x201b
   153ea:	e7eb      	b.n	153c4 <le_ltk_request+0x88>
   153ec:	00025704 	.word	0x00025704
   153f0:	000256c4 	.word	0x000256c4
   153f4:	00026edd 	.word	0x00026edd
   153f8:	000271a5 	.word	0x000271a5

000153fc <le_conn_param_neg_reply>:
{
   153fc:	b570      	push	{r4, r5, r6, lr}
   153fe:	4606      	mov	r6, r0
   15400:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   15402:	f242 0021 	movw	r0, #8225	; 0x2021
   15406:	2103      	movs	r1, #3
   15408:	f7ff ff2e 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   1540c:	4604      	mov	r4, r0
   1540e:	b958      	cbnz	r0, 15428 <le_conn_param_neg_reply+0x2c>
   15410:	490c      	ldr	r1, [pc, #48]	; (15444 <le_conn_param_neg_reply+0x48>)
   15412:	4b0d      	ldr	r3, [pc, #52]	; (15448 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   15414:	480d      	ldr	r0, [pc, #52]	; (1544c <le_conn_param_neg_reply+0x50>)
   15416:	1ac9      	subs	r1, r1, r3
   15418:	08c9      	lsrs	r1, r1, #3
   1541a:	0189      	lsls	r1, r1, #6
}
   1541c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   15420:	f041 0101 	orr.w	r1, r1, #1
   15424:	f00a be72 	b.w	2010c <log_0>
   15428:	2103      	movs	r1, #3
   1542a:	3008      	adds	r0, #8
   1542c:	f00f f83f 	bl	244ae <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   15430:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   15432:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   15434:	4621      	mov	r1, r4
   15436:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1543a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1543e:	f7ff bf4b 	b.w	152d8 <bt_hci_cmd_send>
   15442:	bf00      	nop
   15444:	00025704 	.word	0x00025704
   15448:	000256c4 	.word	0x000256c4
   1544c:	000271bc 	.word	0x000271bc

00015450 <le_conn_param_req>:
{
   15450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   15452:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15454:	78d9      	ldrb	r1, [r3, #3]
   15456:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   15458:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1545a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1545e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   15462:	7959      	ldrb	r1, [r3, #5]
   15464:	791a      	ldrb	r2, [r3, #4]
   15466:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1546a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1546e:	799a      	ldrb	r2, [r3, #6]
   15470:	79d9      	ldrb	r1, [r3, #7]
   15472:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15476:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1547a:	7a1a      	ldrb	r2, [r3, #8]
   1547c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1547e:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15480:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   15484:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15486:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1548a:	f002 f909 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   1548e:	4606      	mov	r6, r0
   15490:	b980      	cbnz	r0, 154b4 <le_conn_param_req+0x64>
   15492:	4b20      	ldr	r3, [pc, #128]	; (15514 <le_conn_param_req+0xc4>)
   15494:	4a20      	ldr	r2, [pc, #128]	; (15518 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15496:	4821      	ldr	r0, [pc, #132]	; (1551c <le_conn_param_req+0xcc>)
   15498:	1ad2      	subs	r2, r2, r3
   1549a:	08d2      	lsrs	r2, r2, #3
   1549c:	0192      	lsls	r2, r2, #6
   1549e:	4621      	mov	r1, r4
   154a0:	f042 0201 	orr.w	r2, r2, #1
   154a4:	f00a fe3f 	bl	20126 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   154a8:	2102      	movs	r1, #2
   154aa:	4620      	mov	r0, r4
   154ac:	f7ff ffa6 	bl	153fc <le_conn_param_neg_reply>
}
   154b0:	b003      	add	sp, #12
   154b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   154b4:	4669      	mov	r1, sp
   154b6:	f001 ff37 	bl	17328 <le_param_req>
   154ba:	b938      	cbnz	r0, 154cc <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   154bc:	211e      	movs	r1, #30
   154be:	4620      	mov	r0, r4
   154c0:	f7ff ff9c 	bl	153fc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   154c4:	4630      	mov	r0, r6
   154c6:	f00d fb68 	bl	22b9a <bt_conn_unref>
   154ca:	e7f1      	b.n	154b0 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   154cc:	210e      	movs	r1, #14
   154ce:	f242 0020 	movw	r0, #8224	; 0x2020
   154d2:	f7ff fec9 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   154d6:	4605      	mov	r5, r0
   154d8:	2800      	cmp	r0, #0
   154da:	d0f3      	beq.n	154c4 <le_conn_param_req+0x74>
   154dc:	210e      	movs	r1, #14
   154de:	3008      	adds	r0, #8
   154e0:	f00e ffe5 	bl	244ae <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   154e4:	220e      	movs	r2, #14
   154e6:	4604      	mov	r4, r0
   154e8:	2100      	movs	r1, #0
   154ea:	f00c fea8 	bl	2223e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   154ee:	f8bd 3000 	ldrh.w	r3, [sp]
   154f2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   154f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   154f8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   154fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   154fe:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15500:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   15504:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15506:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   15508:	4629      	mov	r1, r5
   1550a:	f242 0020 	movw	r0, #8224	; 0x2020
   1550e:	f7ff fee3 	bl	152d8 <bt_hci_cmd_send>
   15512:	e7d7      	b.n	154c4 <le_conn_param_req+0x74>
   15514:	000256c4 	.word	0x000256c4
   15518:	00025704 	.word	0x00025704
   1551c:	00026edd 	.word	0x00026edd

00015520 <bt_hci_cmd_send_sync>:
{
   15520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15524:	4607      	mov	r7, r0
   15526:	b086      	sub	sp, #24
   15528:	4615      	mov	r5, r2
	if (!buf) {
   1552a:	460c      	mov	r4, r1
   1552c:	b921      	cbnz	r1, 15538 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   1552e:	f7ff fe9b 	bl	15268 <bt_hci_cmd_create>
		if (!buf) {
   15532:	4604      	mov	r4, r0
   15534:	2800      	cmp	r0, #0
   15536:	d055      	beq.n	155e4 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15538:	2201      	movs	r2, #1
   1553a:	2100      	movs	r1, #0
   1553c:	4668      	mov	r0, sp
   1553e:	f00f fb7a 	bl	24c36 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   15542:	4620      	mov	r0, r4
   15544:	f006 fda6 	bl	1c094 <net_buf_id>
   15548:	4e28      	ldr	r6, [pc, #160]	; (155ec <bt_hci_cmd_send_sync+0xcc>)
   1554a:	230c      	movs	r3, #12
   1554c:	fb03 6000 	mla	r0, r3, r0, r6
   15550:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   15554:	4620      	mov	r0, r4
   15556:	f00e ff84 	bl	24462 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1555a:	4825      	ldr	r0, [pc, #148]	; (155f0 <bt_hci_cmd_send_sync+0xd0>)
   1555c:	4621      	mov	r1, r4
   1555e:	f00e ff73 	bl	24448 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   15562:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   15566:	2300      	movs	r3, #0
   15568:	4668      	mov	r0, sp
   1556a:	f009 f883 	bl	1e674 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1556e:	4680      	mov	r8, r0
   15570:	b180      	cbz	r0, 15594 <bt_hci_cmd_send_sync+0x74>
   15572:	4a20      	ldr	r2, [pc, #128]	; (155f4 <bt_hci_cmd_send_sync+0xd4>)
   15574:	4920      	ldr	r1, [pc, #128]	; (155f8 <bt_hci_cmd_send_sync+0xd8>)
   15576:	4821      	ldr	r0, [pc, #132]	; (155fc <bt_hci_cmd_send_sync+0xdc>)
   15578:	f240 1333 	movw	r3, #307	; 0x133
   1557c:	f00a f981 	bl	1f882 <printk>
   15580:	481f      	ldr	r0, [pc, #124]	; (15600 <bt_hci_cmd_send_sync+0xe0>)
   15582:	4641      	mov	r1, r8
   15584:	f00a f97d 	bl	1f882 <printk>
   15588:	4040      	eors	r0, r0
   1558a:	f380 8811 	msr	BASEPRI, r0
   1558e:	f04f 0003 	mov.w	r0, #3
   15592:	df02      	svc	2
	status = cmd(buf)->status;
   15594:	4620      	mov	r0, r4
   15596:	f006 fd7d 	bl	1c094 <net_buf_id>
   1559a:	230c      	movs	r3, #12
   1559c:	4343      	muls	r3, r0
   1559e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   155a0:	b1be      	cbz	r6, 155d2 <bt_hci_cmd_send_sync+0xb2>
   155a2:	4a18      	ldr	r2, [pc, #96]	; (15604 <bt_hci_cmd_send_sync+0xe4>)
   155a4:	4b18      	ldr	r3, [pc, #96]	; (15608 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   155a6:	4819      	ldr	r0, [pc, #100]	; (1560c <bt_hci_cmd_send_sync+0xec>)
   155a8:	1a9b      	subs	r3, r3, r2
   155aa:	08db      	lsrs	r3, r3, #3
   155ac:	019b      	lsls	r3, r3, #6
   155ae:	f043 0302 	orr.w	r3, r3, #2
   155b2:	4632      	mov	r2, r6
   155b4:	4639      	mov	r1, r7
   155b6:	f00a fdca 	bl	2014e <log_2>
		net_buf_unref(buf);
   155ba:	4620      	mov	r0, r4
   155bc:	f006 fe1e 	bl	1c1fc <net_buf_unref>
			return -EIO;
   155c0:	2e09      	cmp	r6, #9
   155c2:	bf0c      	ite	eq
   155c4:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   155c8:	f06f 0004 	mvnne.w	r0, #4
}
   155cc:	b006      	add	sp, #24
   155ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   155d2:	b115      	cbz	r5, 155da <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   155d4:	602c      	str	r4, [r5, #0]
	return 0;
   155d6:	4630      	mov	r0, r6
   155d8:	e7f8      	b.n	155cc <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   155da:	4620      	mov	r0, r4
   155dc:	f006 fe0e 	bl	1c1fc <net_buf_unref>
	return 0;
   155e0:	4628      	mov	r0, r5
   155e2:	e7f3      	b.n	155cc <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   155e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   155e8:	e7f0      	b.n	155cc <bt_hci_cmd_send_sync+0xac>
   155ea:	bf00      	nop
   155ec:	20002eac 	.word	0x20002eac
   155f0:	200003c4 	.word	0x200003c4
   155f4:	00027019 	.word	0x00027019
   155f8:	0002713e 	.word	0x0002713e
   155fc:	00027066 	.word	0x00027066
   15600:	000271d6 	.word	0x000271d6
   15604:	000256c4 	.word	0x000256c4
   15608:	00025704 	.word	0x00025704
   1560c:	000271f6 	.word	0x000271f6

00015610 <hci_le_read_max_data_len>:
{
   15610:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15612:	4606      	mov	r6, r0
   15614:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15616:	aa01      	add	r2, sp, #4
   15618:	2100      	movs	r1, #0
   1561a:	f242 002f 	movw	r0, #8239	; 0x202f
   1561e:	f7ff ff7f 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   15622:	4604      	mov	r4, r0
   15624:	b160      	cbz	r0, 15640 <hci_le_read_max_data_len+0x30>
   15626:	490c      	ldr	r1, [pc, #48]	; (15658 <hci_le_read_max_data_len+0x48>)
   15628:	4b0c      	ldr	r3, [pc, #48]	; (1565c <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   1562a:	480d      	ldr	r0, [pc, #52]	; (15660 <hci_le_read_max_data_len+0x50>)
   1562c:	1ac9      	subs	r1, r1, r3
   1562e:	08c9      	lsrs	r1, r1, #3
   15630:	0189      	lsls	r1, r1, #6
   15632:	f041 0101 	orr.w	r1, r1, #1
   15636:	f00a fd69 	bl	2010c <log_0>
}
   1563a:	4620      	mov	r0, r4
   1563c:	b002      	add	sp, #8
   1563e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15640:	9801      	ldr	r0, [sp, #4]
   15642:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15644:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15648:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1564a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1564e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   15650:	f006 fdd4 	bl	1c1fc <net_buf_unref>
	return 0;
   15654:	e7f1      	b.n	1563a <hci_le_read_max_data_len+0x2a>
   15656:	bf00      	nop
   15658:	00025704 	.word	0x00025704
   1565c:	000256c4 	.word	0x000256c4
   15660:	00027212 	.word	0x00027212

00015664 <conn_auto_initiate>:
{
   15664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15666:	7b43      	ldrb	r3, [r0, #13]
   15668:	2b07      	cmp	r3, #7
{
   1566a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1566c:	d121      	bne.n	156b2 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1566e:	f3bf 8f5b 	dmb	ish
   15672:	6843      	ldr	r3, [r0, #4]
   15674:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15678:	049b      	lsls	r3, r3, #18
   1567a:	f100 0604 	add.w	r6, r0, #4
   1567e:	d41a      	bmi.n	156b6 <conn_auto_initiate+0x52>
   15680:	78c3      	ldrb	r3, [r0, #3]
   15682:	b123      	cbz	r3, 1568e <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   15684:	4b31      	ldr	r3, [pc, #196]	; (1574c <conn_auto_initiate+0xe8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   15686:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   1568a:	071d      	lsls	r5, r3, #28
   1568c:	d513      	bpl.n	156b6 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1568e:	2102      	movs	r1, #2
   15690:	f242 0016 	movw	r0, #8214	; 0x2016
   15694:	f7ff fde8 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   15698:	4605      	mov	r5, r0
   1569a:	b160      	cbz	r0, 156b6 <conn_auto_initiate+0x52>
   1569c:	2102      	movs	r1, #2
   1569e:	3008      	adds	r0, #8
   156a0:	f00e ff05 	bl	244ae <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   156a4:	8823      	ldrh	r3, [r4, #0]
   156a6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   156a8:	4629      	mov	r1, r5
   156aa:	f242 0016 	movw	r0, #8214	; 0x2016
   156ae:	f7ff fe13 	bl	152d8 <bt_hci_cmd_send>
}
   156b2:	b004      	add	sp, #16
   156b4:	bd70      	pop	{r4, r5, r6, pc}
   156b6:	f3bf 8f5b 	dmb	ish
   156ba:	6863      	ldr	r3, [r4, #4]
   156bc:	4d23      	ldr	r5, [pc, #140]	; (1574c <conn_auto_initiate+0xe8>)
   156be:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   156c2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   156c6:	f3c3 3100 	ubfx	r1, r3, #12, #1
   156ca:	d11a      	bne.n	15702 <conn_auto_initiate+0x9e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   156cc:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   156d0:	07d8      	lsls	r0, r3, #31
   156d2:	d516      	bpl.n	15702 <conn_auto_initiate+0x9e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   156d4:	2302      	movs	r3, #2
   156d6:	9100      	str	r1, [sp, #0]
   156d8:	461a      	mov	r2, r3
   156da:	4620      	mov	r0, r4
   156dc:	f00c ff8b 	bl	225f6 <bt_le_set_phy>
		if (!err) {
   156e0:	4601      	mov	r1, r0
   156e2:	b920      	cbnz	r0, 156ee <conn_auto_initiate+0x8a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   156e4:	2180      	movs	r1, #128	; 0x80
   156e6:	4630      	mov	r0, r6
   156e8:	f00c ff29 	bl	2253e <atomic_or>
			return;
   156ec:	e7e1      	b.n	156b2 <conn_auto_initiate+0x4e>
   156ee:	4a18      	ldr	r2, [pc, #96]	; (15750 <conn_auto_initiate+0xec>)
   156f0:	4b18      	ldr	r3, [pc, #96]	; (15754 <conn_auto_initiate+0xf0>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   156f2:	4819      	ldr	r0, [pc, #100]	; (15758 <conn_auto_initiate+0xf4>)
   156f4:	1ad2      	subs	r2, r2, r3
   156f6:	08d2      	lsrs	r2, r2, #3
   156f8:	0192      	lsls	r2, r2, #6
   156fa:	f042 0201 	orr.w	r2, r2, #1
   156fe:	f00a fd12 	bl	20126 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   15702:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   15706:	069a      	lsls	r2, r3, #26
   15708:	d5d3      	bpl.n	156b2 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1570a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   1570e:	689b      	ldr	r3, [r3, #8]
   15710:	079b      	lsls	r3, r3, #30
   15712:	d5ce      	bpl.n	156b2 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15714:	f10d 010e 	add.w	r1, sp, #14
   15718:	a803      	add	r0, sp, #12
   1571a:	f7ff ff79 	bl	15610 <hci_le_read_max_data_len>
			if (!err) {
   1571e:	2800      	cmp	r0, #0
   15720:	d1c7      	bne.n	156b2 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   15722:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15726:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1572a:	4620      	mov	r0, r4
   1572c:	f00c ff46 	bl	225bc <bt_le_set_data_len>
				if (err) {
   15730:	4601      	mov	r1, r0
   15732:	2800      	cmp	r0, #0
   15734:	d0bd      	beq.n	156b2 <conn_auto_initiate+0x4e>
   15736:	4b07      	ldr	r3, [pc, #28]	; (15754 <conn_auto_initiate+0xf0>)
   15738:	4a05      	ldr	r2, [pc, #20]	; (15750 <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
   1573a:	4808      	ldr	r0, [pc, #32]	; (1575c <conn_auto_initiate+0xf8>)
   1573c:	1ad2      	subs	r2, r2, r3
   1573e:	08d2      	lsrs	r2, r2, #3
   15740:	0192      	lsls	r2, r2, #6
   15742:	f042 0201 	orr.w	r2, r2, #1
   15746:	f00a fcee 	bl	20126 <log_1>
		}
   1574a:	e7b2      	b.n	156b2 <conn_auto_initiate+0x4e>
   1574c:	200002a0 	.word	0x200002a0
   15750:	00025704 	.word	0x00025704
   15754:	000256c4 	.word	0x000256c4
   15758:	00027232 	.word	0x00027232
   1575c:	0002724c 	.word	0x0002724c

00015760 <le_phy_update_complete>:
{
   15760:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15762:	6883      	ldr	r3, [r0, #8]
   15764:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15768:	4628      	mov	r0, r5
   1576a:	f001 ff99 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   1576e:	4604      	mov	r4, r0
   15770:	b960      	cbnz	r0, 1578c <le_phy_update_complete+0x2c>
   15772:	4b14      	ldr	r3, [pc, #80]	; (157c4 <le_phy_update_complete+0x64>)
   15774:	4a14      	ldr	r2, [pc, #80]	; (157c8 <le_phy_update_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15776:	4815      	ldr	r0, [pc, #84]	; (157cc <le_phy_update_complete+0x6c>)
   15778:	1ad2      	subs	r2, r2, r3
   1577a:	08d2      	lsrs	r2, r2, #3
   1577c:	0192      	lsls	r2, r2, #6
   1577e:	4629      	mov	r1, r5
   15780:	f042 0201 	orr.w	r2, r2, #1
}
   15784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15788:	f00a bccd 	b.w	20126 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1578c:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1578e:	f3bf 8f5b 	dmb	ish
   15792:	e850 3f00 	ldrex	r3, [r0]
   15796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   1579a:	e840 2100 	strex	r1, r2, [r0]
   1579e:	2900      	cmp	r1, #0
   157a0:	d1f7      	bne.n	15792 <le_phy_update_complete+0x32>
   157a2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   157a6:	061b      	lsls	r3, r3, #24
   157a8:	d506      	bpl.n	157b8 <le_phy_update_complete+0x58>
   157aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   157ae:	f00c fec6 	bl	2253e <atomic_or>
		conn_auto_initiate(conn);
   157b2:	4620      	mov	r0, r4
   157b4:	f7ff ff56 	bl	15664 <conn_auto_initiate>
	bt_conn_unref(conn);
   157b8:	4620      	mov	r0, r4
}
   157ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   157be:	f00d b9ec 	b.w	22b9a <bt_conn_unref>
   157c2:	bf00      	nop
   157c4:	000256c4 	.word	0x000256c4
   157c8:	00025704 	.word	0x00025704
   157cc:	00026edd 	.word	0x00026edd

000157d0 <le_remote_feat_complete>:
{
   157d0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   157d2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   157d4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   157d8:	4630      	mov	r0, r6
   157da:	f001 ff61 	bl	176a0 <bt_conn_lookup_handle>
	if (!conn) {
   157de:	4604      	mov	r4, r0
   157e0:	b960      	cbnz	r0, 157fc <le_remote_feat_complete+0x2c>
   157e2:	4a10      	ldr	r2, [pc, #64]	; (15824 <le_remote_feat_complete+0x54>)
   157e4:	4b10      	ldr	r3, [pc, #64]	; (15828 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   157e6:	4811      	ldr	r0, [pc, #68]	; (1582c <le_remote_feat_complete+0x5c>)
   157e8:	1ad2      	subs	r2, r2, r3
   157ea:	08d2      	lsrs	r2, r2, #3
   157ec:	0192      	lsls	r2, r2, #6
   157ee:	4631      	mov	r1, r6
   157f0:	f042 0201 	orr.w	r2, r2, #1
}
   157f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   157f8:	f00a bc95 	b.w	20126 <log_1>
	if (!evt->status) {
   157fc:	782b      	ldrb	r3, [r5, #0]
   157fe:	b923      	cbnz	r3, 1580a <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   15800:	2208      	movs	r2, #8
   15802:	1ce9      	adds	r1, r5, #3
   15804:	30ac      	adds	r0, #172	; 0xac
   15806:	f00c fcef 	bl	221e8 <memcpy>
   1580a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1580e:	1d20      	adds	r0, r4, #4
   15810:	f00c fe95 	bl	2253e <atomic_or>
	conn_auto_initiate(conn);
   15814:	4620      	mov	r0, r4
   15816:	f7ff ff25 	bl	15664 <conn_auto_initiate>
	bt_conn_unref(conn);
   1581a:	4620      	mov	r0, r4
}
   1581c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15820:	f00d b9bb 	b.w	22b9a <bt_conn_unref>
   15824:	00025704 	.word	0x00025704
   15828:	000256c4 	.word	0x000256c4
   1582c:	00026edd 	.word	0x00026edd

00015830 <bt_hci_le_enh_conn_complete>:
{
   15830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15834:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   15838:	498e      	ldr	r1, [pc, #568]	; (15a74 <bt_hci_le_enh_conn_complete+0x244>)
	handle |= ~BT_ACL_HANDLE_MASK;
   1583a:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   1583e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   15842:	4604      	mov	r4, r0
   15844:	b087      	sub	sp, #28
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15846:	fa1f f788 	uxth.w	r7, r8
	handle |= ~BT_ACL_HANDLE_MASK;
   1584a:	b29b      	uxth	r3, r3
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1584c:	2200      	movs	r2, #0
   1584e:	4608      	mov	r0, r1
		if (disconnected_handles[i] == handle) {
   15850:	f831 5b02 	ldrh.w	r5, [r1], #2
   15854:	42ab      	cmp	r3, r5
   15856:	d12c      	bne.n	158b2 <bt_hci_le_enh_conn_complete+0x82>
			disconnected_handles[i] = 0;
   15858:	2300      	movs	r3, #0
   1585a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			return true;
   1585e:	f04f 0901 	mov.w	r9, #1
	bt_id_pending_keys_update();
   15862:	f000 fc97 	bl	16194 <bt_id_pending_keys_update>
	if (evt->status) {
   15866:	7825      	ldrb	r5, [r4, #0]
   15868:	2d00      	cmp	r5, #0
   1586a:	d03c      	beq.n	158e6 <bt_hci_le_enh_conn_complete+0xb6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1586c:	2d3c      	cmp	r5, #60	; 0x3c
   1586e:	d12e      	bne.n	158ce <bt_hci_le_enh_conn_complete+0x9e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15870:	f001 f91e 	bl	16ab0 <bt_le_adv_lookup_legacy>
   15874:	f3bf 8f5b 	dmb	ish
   15878:	3010      	adds	r0, #16
   1587a:	e850 3f00 	ldrex	r3, [r0]
   1587e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   15882:	e840 3200 	strex	r2, r3, [r0]
   15886:	2a00      	cmp	r2, #0
   15888:	d1f7      	bne.n	1587a <bt_hci_le_enh_conn_complete+0x4a>
   1588a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1588e:	2000      	movs	r0, #0
   15890:	f7ff f9be 	bl	14c10 <find_pending_connect.part.0>
		if (!conn) {
   15894:	4604      	mov	r4, r0
   15896:	b990      	cbnz	r0, 158be <bt_hci_le_enh_conn_complete+0x8e>
   15898:	4977      	ldr	r1, [pc, #476]	; (15a78 <bt_hci_le_enh_conn_complete+0x248>)
   1589a:	4b78      	ldr	r3, [pc, #480]	; (15a7c <bt_hci_le_enh_conn_complete+0x24c>)
			BT_ERR("No pending slave connection");
   1589c:	4878      	ldr	r0, [pc, #480]	; (15a80 <bt_hci_le_enh_conn_complete+0x250>)
   1589e:	1ac9      	subs	r1, r1, r3
   158a0:	08c9      	lsrs	r1, r1, #3
   158a2:	0189      	lsls	r1, r1, #6
   158a4:	f041 0101 	orr.w	r1, r1, #1
   158a8:	f00a fc30 	bl	2010c <log_0>
}
   158ac:	b007      	add	sp, #28
   158ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   158b2:	3201      	adds	r2, #1
   158b4:	2a05      	cmp	r2, #5
   158b6:	d1cb      	bne.n	15850 <bt_hci_le_enh_conn_complete+0x20>
	return false;
   158b8:	f04f 0900 	mov.w	r9, #0
   158bc:	e7d1      	b.n	15862 <bt_hci_le_enh_conn_complete+0x32>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   158be:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   158c0:	2100      	movs	r1, #0
   158c2:	f001 fef9 	bl	176b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   158c6:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   158c8:	f00d f967 	bl	22b9a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   158cc:	e7ee      	b.n	158ac <bt_hci_le_enh_conn_complete+0x7c>
   158ce:	4b6b      	ldr	r3, [pc, #428]	; (15a7c <bt_hci_le_enh_conn_complete+0x24c>)
   158d0:	4a69      	ldr	r2, [pc, #420]	; (15a78 <bt_hci_le_enh_conn_complete+0x248>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   158d2:	486c      	ldr	r0, [pc, #432]	; (15a84 <bt_hci_le_enh_conn_complete+0x254>)
   158d4:	1ad2      	subs	r2, r2, r3
   158d6:	08d2      	lsrs	r2, r2, #3
   158d8:	0192      	lsls	r2, r2, #6
   158da:	f042 0202 	orr.w	r2, r2, #2
   158de:	4629      	mov	r1, r5
   158e0:	f00a fc21 	bl	20126 <log_1>
		return;
   158e4:	e7e2      	b.n	158ac <bt_hci_le_enh_conn_complete+0x7c>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   158e6:	7923      	ldrb	r3, [r4, #4]
   158e8:	3b02      	subs	r3, #2
   158ea:	2b01      	cmp	r3, #1
   158ec:	f104 0604 	add.w	r6, r4, #4
   158f0:	d842      	bhi.n	15978 <bt_hci_le_enh_conn_complete+0x148>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   158f2:	4631      	mov	r1, r6
   158f4:	a804      	add	r0, sp, #16
   158f6:	f00c fe1f 	bl	22538 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   158fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
	memcpy(dst, src, sizeof(*dst));
   158fe:	2206      	movs	r2, #6
   15900:	3b02      	subs	r3, #2
   15902:	f104 0111 	add.w	r1, r4, #17
   15906:	f10d 0009 	add.w	r0, sp, #9
   1590a:	f88d 3010 	strb.w	r3, [sp, #16]
   1590e:	f00c fc6b 	bl	221e8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15912:	2301      	movs	r3, #1
   15914:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   15918:	78e3      	ldrb	r3, [r4, #3]
   1591a:	2b01      	cmp	r3, #1
   1591c:	d116      	bne.n	1594c <bt_hci_le_enh_conn_complete+0x11c>
   1591e:	a804      	add	r0, sp, #16
   15920:	f7ff f976 	bl	14c10 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15924:	78e3      	ldrb	r3, [r4, #3]
   15926:	2b01      	cmp	r3, #1
   15928:	4605      	mov	r5, r0
   1592a:	d10e      	bne.n	1594a <bt_hci_le_enh_conn_complete+0x11a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1592c:	f001 f8c0 	bl	16ab0 <bt_le_adv_lookup_legacy>
   15930:	f3bf 8f5b 	dmb	ish
   15934:	3010      	adds	r0, #16
   15936:	e850 3f00 	ldrex	r3, [r0]
   1593a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1593e:	e840 3200 	strex	r2, r3, [r0]
   15942:	2a00      	cmp	r2, #0
   15944:	d1f7      	bne.n	15936 <bt_hci_le_enh_conn_complete+0x106>
   15946:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   1594a:	bb45      	cbnz	r5, 1599e <bt_hci_le_enh_conn_complete+0x16e>
   1594c:	4a4b      	ldr	r2, [pc, #300]	; (15a7c <bt_hci_le_enh_conn_complete+0x24c>)
   1594e:	4c4a      	ldr	r4, [pc, #296]	; (15a78 <bt_hci_le_enh_conn_complete+0x248>)
		BT_ERR("No pending conn for peer %s",
   15950:	4630      	mov	r0, r6
   15952:	1aa4      	subs	r4, r4, r2
   15954:	f7fe fb6c 	bl	14030 <bt_addr_le_str_real>
   15958:	f7fb fe0c 	bl	11574 <z_log_strdup>
   1595c:	08e4      	lsrs	r4, r4, #3
   1595e:	01a4      	lsls	r4, r4, #6
   15960:	f044 0401 	orr.w	r4, r4, #1
   15964:	4601      	mov	r1, r0
   15966:	4622      	mov	r2, r4
   15968:	4847      	ldr	r0, [pc, #284]	; (15a88 <bt_hci_le_enh_conn_complete+0x258>)
   1596a:	f00a fbdc 	bl	20126 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1596e:	211f      	movs	r1, #31
   15970:	4638      	mov	r0, r7
   15972:	f00c fe08 	bl	22586 <bt_hci_disconnect>
		return;
   15976:	e799      	b.n	158ac <bt_hci_le_enh_conn_complete+0x7c>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   15978:	78e3      	ldrb	r3, [r4, #3]
   1597a:	2b01      	cmp	r3, #1
   1597c:	bf04      	itt	eq
   1597e:	4b43      	ldreq	r3, [pc, #268]	; (15a8c <bt_hci_le_enh_conn_complete+0x25c>)
   15980:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   15984:	4631      	mov	r1, r6
   15986:	4628      	mov	r0, r5
   15988:	f00c ff1b 	bl	227c2 <bt_lookup_id_addr>
   1598c:	4601      	mov	r1, r0
   1598e:	a804      	add	r0, sp, #16
   15990:	f00c fdd2 	bl	22538 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   15994:	4631      	mov	r1, r6
   15996:	a802      	add	r0, sp, #8
   15998:	f00c fdce 	bl	22538 <bt_addr_le_copy>
   1599c:	e7bc      	b.n	15918 <bt_hci_le_enh_conn_complete+0xe8>
	conn->handle = handle;
   1599e:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   159a0:	a904      	add	r1, sp, #16
	conn->handle = handle;
   159a2:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   159a6:	f00c fdc7 	bl	22538 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   159aa:	7e22      	ldrb	r2, [r4, #24]
   159ac:	7de3      	ldrb	r3, [r4, #23]
   159ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   159b2:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   159b6:	7ea2      	ldrb	r2, [r4, #26]
   159b8:	7e63      	ldrb	r3, [r4, #25]
   159ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   159be:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   159c2:	7ee3      	ldrb	r3, [r4, #27]
   159c4:	7f22      	ldrb	r2, [r4, #28]
   159c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   159ca:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   159ce:	78e7      	ldrb	r7, [r4, #3]
   159d0:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
   159d2:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   159d4:	2f01      	cmp	r7, #1
	conn->err = 0U;
   159d6:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   159d8:	d12d      	bne.n	15a36 <bt_hci_le_enh_conn_complete+0x206>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   159da:	a902      	add	r1, sp, #8
   159dc:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   159e0:	f00c fdaa 	bl	22538 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   159e4:	f001 f864 	bl	16ab0 <bt_le_adv_lookup_legacy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   159e8:	f3bf 8f5b 	dmb	ish
   159ec:	6902      	ldr	r2, [r0, #16]
   159ee:	4e27      	ldr	r6, [pc, #156]	; (15a8c <bt_hci_le_enh_conn_complete+0x25c>)
   159f0:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   159f4:	f412 6f00 	tst.w	r2, #2048	; 0x800
   159f8:	f3c2 23c0 	ubfx	r3, r2, #11, #1
   159fc:	d131      	bne.n	15a62 <bt_hci_le_enh_conn_complete+0x232>
				if (bt_addr_cmp(&evt->local_rpa,
   159fe:	340b      	adds	r4, #11
	return memcmp(a, b, sizeof(*a));
   15a00:	2206      	movs	r2, #6
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   15a02:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
   15a06:	4669      	mov	r1, sp
   15a08:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
   15a0a:	9300      	str	r3, [sp, #0]
   15a0c:	f8ad 3004 	strh.w	r3, [sp, #4]
   15a10:	f00c fbda 	bl	221c8 <memcmp>
   15a14:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   15a16:	2206      	movs	r2, #6
   15a18:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   15a1c:	b1f3      	cbz	r3, 15a5c <bt_hci_le_enh_conn_complete+0x22c>
   15a1e:	4621      	mov	r1, r4
   15a20:	f00c fbe2 	bl	221e8 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   15a24:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   15a28:	2200      	movs	r2, #0
   15a2a:	f001 0340 	and.w	r3, r1, #64	; 0x40
   15a2e:	4313      	orrs	r3, r2
   15a30:	d001      	beq.n	15a36 <bt_hci_le_enh_conn_complete+0x206>
			bt_le_adv_resume();
   15a32:	f001 f9db 	bl	16dec <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15a36:	2107      	movs	r1, #7
   15a38:	4628      	mov	r0, r5
   15a3a:	f001 fe3d 	bl	176b8 <bt_conn_set_state>
	if (is_disconnected) {
   15a3e:	f1b9 0f00 	cmp.w	r9, #0
   15a42:	d003      	beq.n	15a4c <bt_hci_le_enh_conn_complete+0x21c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15a44:	2101      	movs	r1, #1
   15a46:	4628      	mov	r0, r5
   15a48:	f001 fe36 	bl	176b8 <bt_conn_set_state>
	bt_conn_connected(conn);
   15a4c:	4628      	mov	r0, r5
   15a4e:	f00d f860 	bl	22b12 <bt_conn_connected>
	conn_auto_initiate(conn);
   15a52:	4628      	mov	r0, r5
   15a54:	f7ff fe06 	bl	15664 <conn_auto_initiate>
	bt_conn_unref(conn);
   15a58:	4628      	mov	r0, r5
   15a5a:	e735      	b.n	158c8 <bt_hci_le_enh_conn_complete+0x98>
   15a5c:	f106 012d 	add.w	r1, r6, #45	; 0x2d
   15a60:	e7de      	b.n	15a20 <bt_hci_le_enh_conn_complete+0x1f0>
						&bt_dev.id_addr[conn->id]);
   15a62:	7a29      	ldrb	r1, [r5, #8]
   15a64:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   15a68:	4431      	add	r1, r6
   15a6a:	f105 0096 	add.w	r0, r5, #150	; 0x96
   15a6e:	f00c fd63 	bl	22538 <bt_addr_le_copy>
   15a72:	e7d7      	b.n	15a24 <bt_hci_le_enh_conn_complete+0x1f4>
   15a74:	200032f0 	.word	0x200032f0
   15a78:	00025704 	.word	0x00025704
   15a7c:	000256c4 	.word	0x000256c4
   15a80:	00027268 	.word	0x00027268
   15a84:	00027284 	.word	0x00027284
   15a88:	0002729d 	.word	0x0002729d
   15a8c:	200002a0 	.word	0x200002a0

00015a90 <le_legacy_conn_complete>:
{
   15a90:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   15a92:	6881      	ldr	r1, [r0, #8]
{
   15a94:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   15a96:	780b      	ldrb	r3, [r1, #0]
   15a98:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   15a9c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   15aa0:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   15aa4:	78cb      	ldrb	r3, [r1, #3]
   15aa6:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   15aaa:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   15aae:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   15ab2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   15ab6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   15aba:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   15abe:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   15ac2:	7c4b      	ldrb	r3, [r1, #17]
   15ac4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   15ac8:	a803      	add	r0, sp, #12
   15aca:	3104      	adds	r1, #4
   15acc:	f00c fd34 	bl	22538 <bt_addr_le_copy>
   15ad0:	490a      	ldr	r1, [pc, #40]	; (15afc <le_legacy_conn_complete+0x6c>)
   15ad2:	2206      	movs	r2, #6
   15ad4:	f10d 0013 	add.w	r0, sp, #19
   15ad8:	f00c fb86 	bl	221e8 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   15adc:	2300      	movs	r3, #0
   15ade:	2206      	movs	r2, #6
   15ae0:	4669      	mov	r1, sp
   15ae2:	f10d 0019 	add.w	r0, sp, #25
   15ae6:	9300      	str	r3, [sp, #0]
   15ae8:	f8ad 3004 	strh.w	r3, [sp, #4]
   15aec:	f00c fb7c 	bl	221e8 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   15af0:	a802      	add	r0, sp, #8
   15af2:	f7ff fe9d 	bl	15830 <bt_hci_le_enh_conn_complete>
}
   15af6:	b00b      	add	sp, #44	; 0x2c
   15af8:	f85d fb04 	ldr.w	pc, [sp], #4
   15afc:	200002cd 	.word	0x200002cd

00015b00 <bt_unpair>:
{
   15b00:	b530      	push	{r4, r5, lr}
   15b02:	b085      	sub	sp, #20
   15b04:	460d      	mov	r5, r1
   15b06:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   15b0a:	b9d0      	cbnz	r0, 15b42 <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   15b0c:	b949      	cbnz	r1, 15b22 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   15b0e:	490e      	ldr	r1, [pc, #56]	; (15b48 <bt_unpair+0x48>)
   15b10:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15b14:	f10d 0207 	add.w	r2, sp, #7
   15b18:	f006 f92a 	bl	1bd70 <bt_foreach_bond>
		return 0;
   15b1c:	2000      	movs	r0, #0
}
   15b1e:	b005      	add	sp, #20
   15b20:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   15b22:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   15b24:	2207      	movs	r2, #7
   15b26:	f8cd 000b 	str.w	r0, [sp, #11]
   15b2a:	a902      	add	r1, sp, #8
   15b2c:	4628      	mov	r0, r5
   15b2e:	f00c fb4b 	bl	221c8 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   15b32:	2800      	cmp	r0, #0
   15b34:	d0eb      	beq.n	15b0e <bt_unpair+0xe>
	unpair(id, addr);
   15b36:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15b3a:	4629      	mov	r1, r5
   15b3c:	f7fe fe9c 	bl	14878 <unpair>
	return 0;
   15b40:	e7ec      	b.n	15b1c <bt_unpair+0x1c>
		return -EINVAL;
   15b42:	f06f 0015 	mvn.w	r0, #21
   15b46:	e7ea      	b.n	15b1e <bt_unpair+0x1e>
   15b48:	0002255d 	.word	0x0002255d

00015b4c <bt_security_err_get>:
	switch (hci_err) {
   15b4c:	2829      	cmp	r0, #41	; 0x29
   15b4e:	bf9a      	itte	ls
   15b50:	4b01      	ldrls	r3, [pc, #4]	; (15b58 <bt_security_err_get+0xc>)
   15b52:	5c18      	ldrbls	r0, [r3, r0]
{
   15b54:	2008      	movhi	r0, #8
}
   15b56:	4770      	bx	lr
   15b58:	000274dc 	.word	0x000274dc

00015b5c <hci_event_prio>:
{
   15b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b60:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15b62:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15b66:	4630      	mov	r0, r6
   15b68:	f00e fcd8 	bl	2451c <net_buf_simple_headroom>
	state->len = buf->len;
   15b6c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15b70:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   15b74:	4605      	mov	r5, r0
   15b76:	d80c      	bhi.n	15b92 <hci_event_prio+0x36>
   15b78:	4a1c      	ldr	r2, [pc, #112]	; (15bec <hci_event_prio+0x90>)
   15b7a:	491d      	ldr	r1, [pc, #116]	; (15bf0 <hci_event_prio+0x94>)
   15b7c:	481d      	ldr	r0, [pc, #116]	; (15bf4 <hci_event_prio+0x98>)
   15b7e:	f640 43dc 	movw	r3, #3292	; 0xcdc
   15b82:	f009 fe7e 	bl	1f882 <printk>
   15b86:	4040      	eors	r0, r0
   15b88:	f380 8811 	msr	BASEPRI, r0
   15b8c:	f04f 0003 	mov.w	r0, #3
   15b90:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   15b92:	2102      	movs	r1, #2
   15b94:	4630      	mov	r0, r6
   15b96:	f00e fcb1 	bl	244fc <net_buf_simple_pull_mem>
   15b9a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15b9c:	7800      	ldrb	r0, [r0, #0]
   15b9e:	f00c fca1 	bl	224e4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15ba2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15ba4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15ba6:	d40c      	bmi.n	15bc2 <hci_event_prio+0x66>
   15ba8:	4a10      	ldr	r2, [pc, #64]	; (15bec <hci_event_prio+0x90>)
   15baa:	4913      	ldr	r1, [pc, #76]	; (15bf8 <hci_event_prio+0x9c>)
   15bac:	4811      	ldr	r0, [pc, #68]	; (15bf4 <hci_event_prio+0x98>)
   15bae:	f44f 634e 	mov.w	r3, #3296	; 0xce0
   15bb2:	f009 fe66 	bl	1f882 <printk>
   15bb6:	4040      	eors	r0, r0
   15bb8:	f380 8811 	msr	BASEPRI, r0
   15bbc:	f04f 0003 	mov.w	r0, #3
   15bc0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15bc2:	2305      	movs	r3, #5
   15bc4:	4a0d      	ldr	r2, [pc, #52]	; (15bfc <hci_event_prio+0xa0>)
   15bc6:	7838      	ldrb	r0, [r7, #0]
   15bc8:	4621      	mov	r1, r4
   15bca:	f7ff f8d1 	bl	14d70 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15bce:	07b3      	lsls	r3, r6, #30
   15bd0:	d507      	bpl.n	15be2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   15bd2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15bd4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15bd8:	fa10 f585 	uxtah	r5, r0, r5
   15bdc:	60a5      	str	r5, [r4, #8]
}
   15bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   15be2:	4620      	mov	r0, r4
}
   15be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   15be8:	f006 bb08 	b.w	1c1fc <net_buf_unref>
   15bec:	00027019 	.word	0x00027019
   15bf0:	0002704d 	.word	0x0002704d
   15bf4:	00027066 	.word	0x00027066
   15bf8:	000272b9 	.word	0x000272b9
   15bfc:	00025d58 	.word	0x00025d58

00015c00 <bt_recv>:
{
   15c00:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15c02:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15c04:	2901      	cmp	r1, #1
{
   15c06:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   15c08:	d007      	beq.n	15c1a <bt_recv+0x1a>
   15c0a:	2903      	cmp	r1, #3
   15c0c:	d113      	bne.n	15c36 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   15c0e:	4812      	ldr	r0, [pc, #72]	; (15c58 <bt_recv+0x58>)
   15c10:	4629      	mov	r1, r5
   15c12:	f00e fc19 	bl	24448 <net_buf_put>
		return 0;
   15c16:	2000      	movs	r0, #0
   15c18:	e00c      	b.n	15c34 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15c1a:	6883      	ldr	r3, [r0, #8]
   15c1c:	7818      	ldrb	r0, [r3, #0]
   15c1e:	f00c fc61 	bl	224e4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15c22:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15c24:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15c26:	d502      	bpl.n	15c2e <bt_recv+0x2e>
			hci_event_prio(buf);
   15c28:	4628      	mov	r0, r5
   15c2a:	f7ff ff97 	bl	15b5c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15c2e:	f014 0002 	ands.w	r0, r4, #2
   15c32:	d1ec      	bne.n	15c0e <bt_recv+0xe>
}
   15c34:	bd38      	pop	{r3, r4, r5, pc}
   15c36:	4b09      	ldr	r3, [pc, #36]	; (15c5c <bt_recv+0x5c>)
   15c38:	4a09      	ldr	r2, [pc, #36]	; (15c60 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15c3a:	480a      	ldr	r0, [pc, #40]	; (15c64 <bt_recv+0x64>)
   15c3c:	1ad2      	subs	r2, r2, r3
   15c3e:	08d2      	lsrs	r2, r2, #3
   15c40:	0192      	lsls	r2, r2, #6
   15c42:	f042 0201 	orr.w	r2, r2, #1
   15c46:	f00a fa6e 	bl	20126 <log_1>
		net_buf_unref(buf);
   15c4a:	4628      	mov	r0, r5
   15c4c:	f006 fad6 	bl	1c1fc <net_buf_unref>
		return -EINVAL;
   15c50:	f06f 0015 	mvn.w	r0, #21
   15c54:	e7ee      	b.n	15c34 <bt_recv+0x34>
   15c56:	bf00      	nop
   15c58:	200003ac 	.word	0x200003ac
   15c5c:	000256c4 	.word	0x000256c4
   15c60:	00025704 	.word	0x00025704
   15c64:	000272d2 	.word	0x000272d2

00015c68 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15c68:	4a08      	ldr	r2, [pc, #32]	; (15c8c <bt_hci_driver_register+0x24>)
{
   15c6a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   15c6c:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   15c70:	b930      	cbnz	r0, 15c80 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   15c72:	68d9      	ldr	r1, [r3, #12]
   15c74:	b139      	cbz	r1, 15c86 <bt_hci_driver_register+0x1e>
   15c76:	6919      	ldr	r1, [r3, #16]
   15c78:	b129      	cbz	r1, 15c86 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   15c7a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   15c7e:	4770      	bx	lr
		return -EALREADY;
   15c80:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15c84:	4770      	bx	lr
		return -EINVAL;
   15c86:	f06f 0015 	mvn.w	r0, #21
}
   15c8a:	4770      	bx	lr
   15c8c:	200002a0 	.word	0x200002a0

00015c90 <bt_finalize_init>:
{
   15c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15c94:	4c2b      	ldr	r4, [pc, #172]	; (15d44 <bt_finalize_init+0xb4>)
   15c96:	4d2c      	ldr	r5, [pc, #176]	; (15d48 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   15c98:	4e2c      	ldr	r6, [pc, #176]	; (15d4c <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
   15c9a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 15d64 <bt_finalize_init+0xd4>
{
   15c9e:	b087      	sub	sp, #28
   15ca0:	2102      	movs	r1, #2
   15ca2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15ca6:	f00c fc4a 	bl	2253e <atomic_or>
   15caa:	4b29      	ldr	r3, [pc, #164]	; (15d50 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   15cac:	4929      	ldr	r1, [pc, #164]	; (15d54 <bt_finalize_init+0xc4>)
   15cae:	1aed      	subs	r5, r5, r3
   15cb0:	79e3      	ldrb	r3, [r4, #7]
   15cb2:	4620      	mov	r0, r4
   15cb4:	2b01      	cmp	r3, #1
   15cb6:	bf88      	it	hi
   15cb8:	460e      	movhi	r6, r1
   15cba:	f7fe f9b9 	bl	14030 <bt_addr_le_str_real>
   15cbe:	f7fb fc59 	bl	11574 <z_log_strdup>
   15cc2:	08ed      	lsrs	r5, r5, #3
   15cc4:	01ad      	lsls	r5, r5, #6
   15cc6:	f045 0703 	orr.w	r7, r5, #3
   15cca:	4602      	mov	r2, r0
   15ccc:	4631      	mov	r1, r6
   15cce:	4822      	ldr	r0, [pc, #136]	; (15d58 <bt_finalize_init+0xc8>)
   15cd0:	463b      	mov	r3, r7
   15cd2:	f00a fa3c 	bl	2014e <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   15cd6:	46a0      	mov	r8, r4
   15cd8:	2601      	movs	r6, #1
   15cda:	79e3      	ldrb	r3, [r4, #7]
   15cdc:	429e      	cmp	r6, r3
   15cde:	f108 0807 	add.w	r8, r8, #7
   15ce2:	db22      	blt.n	15d2a <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   15ce4:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
   15ce8:	4630      	mov	r0, r6
   15cea:	f7fe fd97 	bl	1481c <ver_str>
   15cee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   15cf0:	9304      	str	r3, [sp, #16]
   15cf2:	f045 0503 	orr.w	r5, r5, #3
   15cf6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   15cf8:	9305      	str	r3, [sp, #20]
   15cfa:	e9cd 0602 	strd	r0, r6, [sp, #8]
   15cfe:	462b      	mov	r3, r5
   15d00:	a902      	add	r1, sp, #8
   15d02:	2204      	movs	r2, #4
   15d04:	4815      	ldr	r0, [pc, #84]	; (15d5c <bt_finalize_init+0xcc>)
   15d06:	f00a fa57 	bl	201b8 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   15d0a:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
   15d0e:	4630      	mov	r0, r6
   15d10:	f7fe fd84 	bl	1481c <ver_str>
   15d14:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   15d16:	f8ad 5000 	strh.w	r5, [sp]
   15d1a:	4601      	mov	r1, r0
   15d1c:	4632      	mov	r2, r6
   15d1e:	4810      	ldr	r0, [pc, #64]	; (15d60 <bt_finalize_init+0xd0>)
   15d20:	f00a fa2e 	bl	20180 <log_3>
}
   15d24:	b007      	add	sp, #28
   15d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   15d2a:	4640      	mov	r0, r8
   15d2c:	f7fe f980 	bl	14030 <bt_addr_le_str_real>
   15d30:	f7fb fc20 	bl	11574 <z_log_strdup>
   15d34:	4631      	mov	r1, r6
   15d36:	4602      	mov	r2, r0
   15d38:	463b      	mov	r3, r7
   15d3a:	4648      	mov	r0, r9
   15d3c:	f00a fa07 	bl	2014e <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   15d40:	3601      	adds	r6, #1
   15d42:	e7ca      	b.n	15cda <bt_finalize_init+0x4a>
   15d44:	200002a0 	.word	0x200002a0
   15d48:	00025704 	.word	0x00025704
   15d4c:	00026462 	.word	0x00026462
   15d50:	000256c4 	.word	0x000256c4
   15d54:	000272e6 	.word	0x000272e6
   15d58:	000272ea 	.word	0x000272ea
   15d5c:	0002730a 	.word	0x0002730a
   15d60:	00027348 	.word	0x00027348
   15d64:	000272f9 	.word	0x000272f9

00015d68 <init_work>:
{
   15d68:	b510      	push	{r4, lr}
	err = bt_init();
   15d6a:	f7fa f961 	bl	10030 <bt_init>
	if (ready_cb) {
   15d6e:	4b03      	ldr	r3, [pc, #12]	; (15d7c <init_work+0x14>)
   15d70:	681b      	ldr	r3, [r3, #0]
   15d72:	b113      	cbz	r3, 15d7a <init_work+0x12>
}
   15d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   15d78:	4718      	bx	r3
}
   15d7a:	bd10      	pop	{r4, pc}
   15d7c:	20002ec4 	.word	0x20002ec4

00015d80 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   15d80:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   15d84:	4d38      	ldr	r5, [pc, #224]	; (15e68 <bt_enable+0xe8>)
   15d86:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   15d8a:	b088      	sub	sp, #32
   15d8c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   15d8e:	b97b      	cbnz	r3, 15db0 <bt_enable+0x30>
   15d90:	4b36      	ldr	r3, [pc, #216]	; (15e6c <bt_enable+0xec>)
   15d92:	4937      	ldr	r1, [pc, #220]	; (15e70 <bt_enable+0xf0>)
		BT_ERR("No HCI driver registered");
   15d94:	4837      	ldr	r0, [pc, #220]	; (15e74 <bt_enable+0xf4>)
   15d96:	1ac9      	subs	r1, r1, r3
   15d98:	08c9      	lsrs	r1, r1, #3
   15d9a:	0189      	lsls	r1, r1, #6
   15d9c:	f041 0101 	orr.w	r1, r1, #1
   15da0:	f00a f9b4 	bl	2010c <log_0>
		return -ENODEV;
   15da4:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   15da8:	4620      	mov	r0, r4
   15daa:	b008      	add	sp, #32
   15dac:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15db0:	2101      	movs	r1, #1
   15db2:	f105 0098 	add.w	r0, r5, #152	; 0x98
   15db6:	f00c fbc2 	bl	2253e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15dba:	07c3      	lsls	r3, r0, #31
   15dbc:	d451      	bmi.n	15e62 <bt_enable+0xe2>
		err = bt_settings_init();
   15dbe:	f7fe fc77 	bl	146b0 <bt_settings_init>
		if (err) {
   15dc2:	4604      	mov	r4, r0
   15dc4:	2800      	cmp	r0, #0
   15dc6:	d1ef      	bne.n	15da8 <bt_enable+0x28>
	ready_cb = cb;
   15dc8:	4b2b      	ldr	r3, [pc, #172]	; (15e78 <bt_enable+0xf8>)
   15dca:	f04f 0800 	mov.w	r8, #0
   15dce:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   15dd0:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15dd4:	f06f 0308 	mvn.w	r3, #8
   15dd8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   15ddc:	e9cd 0000 	strd	r0, r0, [sp]
   15de0:	9004      	str	r0, [sp, #16]
   15de2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   15de6:	4b25      	ldr	r3, [pc, #148]	; (15e7c <bt_enable+0xfc>)
   15de8:	4925      	ldr	r1, [pc, #148]	; (15e80 <bt_enable+0x100>)
   15dea:	4826      	ldr	r0, [pc, #152]	; (15e84 <bt_enable+0x104>)
   15dec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   15df0:	f008 fa88 	bl	1e304 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15df4:	4924      	ldr	r1, [pc, #144]	; (15e88 <bt_enable+0x108>)
   15df6:	4823      	ldr	r0, [pc, #140]	; (15e84 <bt_enable+0x104>)
   15df8:	f00e fe3b 	bl	24a72 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15dfc:	f06f 0307 	mvn.w	r3, #7
   15e00:	e9cd 4302 	strd	r4, r3, [sp, #8]
   15e04:	e9cd 8906 	strd	r8, r9, [sp, #24]
   15e08:	e9cd 4400 	strd	r4, r4, [sp]
   15e0c:	4b1f      	ldr	r3, [pc, #124]	; (15e8c <bt_enable+0x10c>)
   15e0e:	4920      	ldr	r1, [pc, #128]	; (15e90 <bt_enable+0x110>)
   15e10:	9404      	str	r4, [sp, #16]
   15e12:	f640 0298 	movw	r2, #2200	; 0x898
   15e16:	481f      	ldr	r0, [pc, #124]	; (15e94 <bt_enable+0x114>)
   15e18:	f008 fa74 	bl	1e304 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15e1c:	491e      	ldr	r1, [pc, #120]	; (15e98 <bt_enable+0x118>)
   15e1e:	481d      	ldr	r0, [pc, #116]	; (15e94 <bt_enable+0x114>)
   15e20:	f00e fe27 	bl	24a72 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   15e24:	f7fe faea 	bl	143fc <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   15e28:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   15e2c:	68db      	ldr	r3, [r3, #12]
   15e2e:	4798      	blx	r3
	if (err) {
   15e30:	4604      	mov	r4, r0
   15e32:	b158      	cbz	r0, 15e4c <bt_enable+0xcc>
   15e34:	4b0d      	ldr	r3, [pc, #52]	; (15e6c <bt_enable+0xec>)
   15e36:	4a0e      	ldr	r2, [pc, #56]	; (15e70 <bt_enable+0xf0>)
   15e38:	1ad2      	subs	r2, r2, r3
   15e3a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   15e3c:	0192      	lsls	r2, r2, #6
   15e3e:	4601      	mov	r1, r0
   15e40:	f042 0201 	orr.w	r2, r2, #1
   15e44:	4815      	ldr	r0, [pc, #84]	; (15e9c <bt_enable+0x11c>)
   15e46:	f00a f96e 	bl	20126 <log_1>
		return err;
   15e4a:	e7ad      	b.n	15da8 <bt_enable+0x28>
	if (!cb) {
   15e4c:	b926      	cbnz	r6, 15e58 <bt_enable+0xd8>
}
   15e4e:	b008      	add	sp, #32
   15e50:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   15e54:	f7fa b8ec 	b.w	10030 <bt_init>
	k_work_submit(&bt_dev.init);
   15e58:	f105 0088 	add.w	r0, r5, #136	; 0x88
   15e5c:	f008 fd7c 	bl	1e958 <k_work_submit>
	return 0;
   15e60:	e7a2      	b.n	15da8 <bt_enable+0x28>
		return -EALREADY;
   15e62:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15e66:	e79f      	b.n	15da8 <bt_enable+0x28>
   15e68:	200002a0 	.word	0x200002a0
   15e6c:	000256c4 	.word	0x000256c4
   15e70:	00025704 	.word	0x00025704
   15e74:	00027494 	.word	0x00027494
   15e78:	20002ec4 	.word	0x20002ec4
   15e7c:	00015061 	.word	0x00015061
   15e80:	20005f00 	.word	0x20005f00
   15e84:	200016c0 	.word	0x200016c0
   15e88:	000274ad 	.word	0x000274ad
   15e8c:	00014df5 	.word	0x00014df5
   15e90:	20005640 	.word	0x20005640
   15e94:	20001640 	.word	0x20001640
   15e98:	000274b3 	.word	0x000274b3
   15e9c:	000274b9 	.word	0x000274b9

00015ea0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   15ea0:	4800      	ldr	r0, [pc, #0]	; (15ea4 <bt_get_name+0x4>)
   15ea2:	4770      	bx	lr
   15ea4:	000274d5 	.word	0x000274d5

00015ea8 <hci_id_add>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
				    buf, NULL);
}

static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
{
   15ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15eac:	4605      	mov	r5, r0
   15eae:	4688      	mov	r8, r1
	struct bt_hci_cp_le_add_dev_to_rl *cp;
	struct net_buf *buf;

	BT_DBG("addr %s", bt_addr_le_str(addr));

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   15eb0:	f242 0027 	movw	r0, #8231	; 0x2027
   15eb4:	2127      	movs	r1, #39	; 0x27
{
   15eb6:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   15eb8:	f7ff f9d6 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   15ebc:	4604      	mov	r4, r0
   15ebe:	b1e8      	cbz	r0, 15efc <hci_id_add+0x54>
	return net_buf_simple_add(&buf->b, len);
   15ec0:	2127      	movs	r1, #39	; 0x27
   15ec2:	3008      	adds	r0, #8
   15ec4:	f00e faf3 	bl	244ae <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   15ec8:	4641      	mov	r1, r8
   15eca:	4606      	mov	r6, r0
   15ecc:	f00c fbe7 	bl	2269e <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   15ed0:	4639      	mov	r1, r7
   15ed2:	2210      	movs	r2, #16
   15ed4:	1df0      	adds	r0, r6, #7
   15ed6:	f00c f987 	bl	221e8 <memcpy>

#if defined(CONFIG_BT_PRIVACY)
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
   15eda:	490a      	ldr	r1, [pc, #40]	; (15f04 <hci_id_add+0x5c>)
   15edc:	3514      	adds	r5, #20
   15ede:	eb01 1105 	add.w	r1, r1, r5, lsl #4
   15ee2:	2210      	movs	r2, #16
   15ee4:	f106 0017 	add.w	r0, r6, #23
   15ee8:	f00c f97e 	bl	221e8 <memcpy>
#else
	(void)memset(cp->local_irk, 0, 16);
#endif

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   15eec:	4621      	mov	r1, r4
   15eee:	2200      	movs	r2, #0
}
   15ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   15ef4:	f242 0027 	movw	r0, #8231	; 0x2027
   15ef8:	f7ff bb12 	b.w	15520 <bt_hci_cmd_send_sync>
}
   15efc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15f04:	200002a0 	.word	0x200002a0

00015f08 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   15f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   15f0a:	4f0b      	ldr	r7, [pc, #44]	; (15f38 <id_find+0x30>)
{
   15f0c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   15f0e:	2500      	movs	r5, #0
   15f10:	79fb      	ldrb	r3, [r7, #7]
   15f12:	b2ec      	uxtb	r4, r5
   15f14:	42a3      	cmp	r3, r4
   15f16:	d802      	bhi.n	15f1e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   15f18:	f06f 0401 	mvn.w	r4, #1
   15f1c:	e009      	b.n	15f32 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   15f1e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   15f22:	2207      	movs	r2, #7
   15f24:	4439      	add	r1, r7
   15f26:	4630      	mov	r0, r6
   15f28:	f00c f94e 	bl	221c8 <memcmp>
   15f2c:	3501      	adds	r5, #1
   15f2e:	2800      	cmp	r0, #0
   15f30:	d1ee      	bne.n	15f10 <id_find+0x8>
}
   15f32:	4620      	mov	r0, r4
   15f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f36:	bf00      	nop
   15f38:	200002a0 	.word	0x200002a0

00015f3c <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15f3c:	4b08      	ldr	r3, [pc, #32]	; (15f60 <le_rpa_invalidate+0x24>)
   15f3e:	f3bf 8f5b 	dmb	ish
   15f42:	e853 2f00 	ldrex	r2, [r3]
   15f46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   15f4a:	e843 2100 	strex	r1, r2, [r3]
   15f4e:	2900      	cmp	r1, #0
   15f50:	d1f7      	bne.n	15f42 <le_rpa_invalidate+0x6>
   15f52:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   15f56:	4803      	ldr	r0, [pc, #12]	; (15f64 <le_rpa_invalidate+0x28>)
   15f58:	2100      	movs	r1, #0
   15f5a:	f000 bda3 	b.w	16aa4 <bt_le_ext_adv_foreach>
   15f5e:	bf00      	nop
   15f60:	20000338 	.word	0x20000338
   15f64:	0002276f 	.word	0x0002276f

00015f68 <set_random_address>:
{
   15f68:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   15f6a:	4914      	ldr	r1, [pc, #80]	; (15fbc <set_random_address+0x54>)
   15f6c:	2206      	movs	r2, #6
   15f6e:	4605      	mov	r5, r0
   15f70:	f00c f92a 	bl	221c8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15f74:	4604      	mov	r4, r0
   15f76:	b1e0      	cbz	r0, 15fb2 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   15f78:	2106      	movs	r1, #6
   15f7a:	f242 0005 	movw	r0, #8197	; 0x2005
   15f7e:	f7ff f973 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   15f82:	4604      	mov	r4, r0
   15f84:	b1b8      	cbz	r0, 15fb6 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15f86:	2206      	movs	r2, #6
   15f88:	4629      	mov	r1, r5
   15f8a:	3008      	adds	r0, #8
   15f8c:	f00e fa95 	bl	244ba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15f90:	4621      	mov	r1, r4
   15f92:	2200      	movs	r2, #0
   15f94:	f242 0005 	movw	r0, #8197	; 0x2005
   15f98:	f7ff fac2 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   15f9c:	4604      	mov	r4, r0
   15f9e:	b940      	cbnz	r0, 15fb2 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   15fa0:	2206      	movs	r2, #6
   15fa2:	4806      	ldr	r0, [pc, #24]	; (15fbc <set_random_address+0x54>)
   15fa4:	4629      	mov	r1, r5
   15fa6:	f00c f91f 	bl	221e8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   15faa:	4b05      	ldr	r3, [pc, #20]	; (15fc0 <set_random_address+0x58>)
   15fac:	2201      	movs	r2, #1
   15fae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   15fb2:	4620      	mov	r0, r4
   15fb4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   15fb6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15fba:	e7fa      	b.n	15fb2 <set_random_address+0x4a>
   15fbc:	200002cd 	.word	0x200002cd
   15fc0:	200002a0 	.word	0x200002a0

00015fc4 <id_create>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   15fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fc8:	4b28      	ldr	r3, [pc, #160]	; (1606c <id_create+0xa8>)
   15fca:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
   15fce:	b086      	sub	sp, #24
   15fd0:	4607      	mov	r7, r0
   15fd2:	4615      	mov	r5, r2
   15fd4:	441e      	add	r6, r3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15fd6:	460c      	mov	r4, r1
   15fd8:	4698      	mov	r8, r3
   15fda:	b361      	cbz	r1, 16036 <id_create+0x72>
   15fdc:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   15fde:	2207      	movs	r2, #7
   15fe0:	4669      	mov	r1, sp
   15fe2:	4620      	mov	r0, r4
   15fe4:	9300      	str	r3, [sp, #0]
   15fe6:	f8cd 3003 	str.w	r3, [sp, #3]
   15fea:	f00c f8ed 	bl	221c8 <memcmp>
   15fee:	b310      	cbz	r0, 16036 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   15ff0:	4621      	mov	r1, r4
   15ff2:	4630      	mov	r0, r6
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15ff4:	f00c fb53 	bl	2269e <bt_addr_le_copy>
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };
   15ff8:	2300      	movs	r3, #0
   15ffa:	f107 0014 	add.w	r0, r7, #20
   15ffe:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16002:	e9cd 3304 	strd	r3, r3, [sp, #16]

		if (irk && memcmp(irk, zero_irk, 16)) {
   16006:	eb08 1800 	add.w	r8, r8, r0, lsl #4
   1600a:	b32d      	cbz	r5, 16058 <id_create+0x94>
   1600c:	2210      	movs	r2, #16
   1600e:	a902      	add	r1, sp, #8
   16010:	4628      	mov	r0, r5
   16012:	f00c f8d9 	bl	221c8 <memcmp>
   16016:	b1f8      	cbz	r0, 16058 <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
   16018:	2210      	movs	r2, #16
   1601a:	4629      	mov	r1, r5
   1601c:	4640      	mov	r0, r8
		} else {
			bt_rand(&bt_dev.irk[id], 16);
			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   1601e:	f00c f8e3 	bl	221e8 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16022:	4813      	ldr	r0, [pc, #76]	; (16070 <id_create+0xac>)
   16024:	f00c fb3e 	bl	226a4 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16028:	0783      	lsls	r3, r0, #30
   1602a:	d501      	bpl.n	16030 <id_create+0x6c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   1602c:	f7fe fafa 	bl	14624 <bt_settings_save_id>
	}
}
   16030:	b006      	add	sp, #24
   16032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_addr_le_create_static(&new_addr);
   16036:	a802      	add	r0, sp, #8
   16038:	f00c fa46 	bl	224c8 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   1603c:	a802      	add	r0, sp, #8
   1603e:	f7ff ff63 	bl	15f08 <id_find>
   16042:	2800      	cmp	r0, #0
   16044:	daf7      	bge.n	16036 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   16046:	a902      	add	r1, sp, #8
   16048:	4630      	mov	r0, r6
   1604a:	f00c fb28 	bl	2269e <bt_addr_le_copy>
		if (addr) {
   1604e:	2c00      	cmp	r4, #0
   16050:	d0d2      	beq.n	15ff8 <id_create+0x34>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16052:	4631      	mov	r1, r6
   16054:	4620      	mov	r0, r4
   16056:	e7cd      	b.n	15ff4 <id_create+0x30>
			bt_rand(&bt_dev.irk[id], 16);
   16058:	2110      	movs	r1, #16
   1605a:	4640      	mov	r0, r8
   1605c:	f007 fb34 	bl	1d6c8 <bt_rand>
			if (irk) {
   16060:	2d00      	cmp	r5, #0
   16062:	d0de      	beq.n	16022 <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
   16064:	2210      	movs	r2, #16
   16066:	4641      	mov	r1, r8
   16068:	4628      	mov	r0, r5
   1606a:	e7d8      	b.n	1601e <id_create+0x5a>
   1606c:	200002a0 	.word	0x200002a0
   16070:	20000338 	.word	0x20000338

00016074 <bt_id_set_private_addr>:
{
   16074:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16076:	4603      	mov	r3, r0
   16078:	4812      	ldr	r0, [pc, #72]	; (160c4 <bt_id_set_private_addr+0x50>)
   1607a:	f00c fb13 	bl	226a4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   1607e:	04c2      	lsls	r2, r0, #19
   16080:	d41d      	bmi.n	160be <bt_id_set_private_addr+0x4a>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   16082:	4d11      	ldr	r5, [pc, #68]	; (160c8 <bt_id_set_private_addr+0x54>)
   16084:	f103 0014 	add.w	r0, r3, #20
   16088:	4669      	mov	r1, sp
   1608a:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   1608e:	f00c f94c 	bl	2232a <bt_rpa_create>
	if (!err) {
   16092:	4604      	mov	r4, r0
   16094:	b950      	cbnz	r0, 160ac <bt_id_set_private_addr+0x38>
		err = set_random_address(&rpa);
   16096:	4668      	mov	r0, sp
   16098:	f7ff ff66 	bl	15f68 <set_random_address>
		if (!err) {
   1609c:	4604      	mov	r4, r0
   1609e:	b928      	cbnz	r0, 160ac <bt_id_set_private_addr+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   160a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   160a4:	f105 0098 	add.w	r0, r5, #152	; 0x98
   160a8:	f00c fb1a 	bl	226e0 <atomic_or>
	(void)k_work_schedule(&bt_dev.rpa_update, RPA_TIMEOUT);
   160ac:	4807      	ldr	r0, [pc, #28]	; (160cc <bt_id_set_private_addr+0x58>)
   160ae:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
   160b2:	2300      	movs	r3, #0
   160b4:	f008 fcba 	bl	1ea2c <k_work_schedule>
}
   160b8:	4620      	mov	r0, r4
   160ba:	b003      	add	sp, #12
   160bc:	bd30      	pop	{r4, r5, pc}
		return 0;
   160be:	2400      	movs	r4, #0
   160c0:	e7fa      	b.n	160b8 <bt_id_set_private_addr+0x44>
   160c2:	bf00      	nop
   160c4:	20000338 	.word	0x20000338
   160c8:	200002a0 	.word	0x200002a0
   160cc:	200003f0 	.word	0x200003f0

000160d0 <le_update_private_addr>:
{
   160d0:	b570      	push	{r4, r5, r6, lr}
		adv = bt_le_adv_lookup_legacy();
   160d2:	f000 fced 	bl	16ab0 <bt_le_adv_lookup_legacy>
		if (adv &&
   160d6:	4604      	mov	r4, r0
   160d8:	b990      	cbnz	r0, 16100 <le_update_private_addr+0x30>
	uint8_t id = BT_ID_DEFAULT;
   160da:	2600      	movs	r6, #0
	bool adv_enabled = false;
   160dc:	4635      	mov	r5, r6
	err = bt_id_set_private_addr(id);
   160de:	4630      	mov	r0, r6
   160e0:	f7ff ffc8 	bl	16074 <bt_id_set_private_addr>
	if (err) {
   160e4:	4601      	mov	r1, r0
   160e6:	b300      	cbz	r0, 1612a <le_update_private_addr+0x5a>
   160e8:	4a14      	ldr	r2, [pc, #80]	; (1613c <le_update_private_addr+0x6c>)
   160ea:	4b15      	ldr	r3, [pc, #84]	; (16140 <le_update_private_addr+0x70>)
		BT_WARN("Failed to update RPA address (%d)", err);
   160ec:	4815      	ldr	r0, [pc, #84]	; (16144 <le_update_private_addr+0x74>)
   160ee:	1ad2      	subs	r2, r2, r3
   160f0:	08d2      	lsrs	r2, r2, #3
   160f2:	0192      	lsls	r2, r2, #6
}
   160f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
   160f8:	f042 0202 	orr.w	r2, r2, #2
   160fc:	f00a b813 	b.w	20126 <log_1>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   16100:	f100 0210 	add.w	r2, r0, #16
   16104:	2106      	movs	r1, #6
   16106:	4610      	mov	r0, r2
   16108:	f00c fad2 	bl	226b0 <atomic_test_bit>
		if (adv &&
   1610c:	4605      	mov	r5, r0
   1610e:	2800      	cmp	r0, #0
   16110:	d0e3      	beq.n	160da <le_update_private_addr+0xa>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   16112:	210b      	movs	r1, #11
   16114:	4610      	mov	r0, r2
   16116:	f00c facb 	bl	226b0 <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1611a:	4601      	mov	r1, r0
   1611c:	2800      	cmp	r0, #0
   1611e:	d1dc      	bne.n	160da <le_update_private_addr+0xa>
			bt_le_adv_set_enable_legacy(adv, false);
   16120:	4620      	mov	r0, r4
			id = adv->id;
   16122:	7826      	ldrb	r6, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   16124:	f00c fc26 	bl	22974 <bt_le_adv_set_enable_legacy>
   16128:	e7d9      	b.n	160de <le_update_private_addr+0xe>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   1612a:	b134      	cbz	r4, 1613a <le_update_private_addr+0x6a>
	    adv && adv_enabled) {
   1612c:	b12d      	cbz	r5, 1613a <le_update_private_addr+0x6a>
		bt_le_adv_set_enable_legacy(adv, true);
   1612e:	4620      	mov	r0, r4
   16130:	2101      	movs	r1, #1
}
   16132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_adv_set_enable_legacy(adv, true);
   16136:	f00c bc1d 	b.w	22974 <bt_le_adv_set_enable_legacy>
}
   1613a:	bd70      	pop	{r4, r5, r6, pc}
   1613c:	00025714 	.word	0x00025714
   16140:	000256c4 	.word	0x000256c4
   16144:	00027506 	.word	0x00027506

00016148 <rpa_timeout>:
{
   16148:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
   1614a:	2300      	movs	r3, #0
   1614c:	f88d 3007 	strb.w	r3, [sp, #7]
	le_rpa_invalidate();
   16150:	f7ff fef4 	bl	15f3c <le_rpa_invalidate>
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   16154:	480d      	ldr	r0, [pc, #52]	; (1618c <rpa_timeout+0x44>)
   16156:	f10d 0107 	add.w	r1, sp, #7
   1615a:	f000 fca3 	bl	16aa4 <bt_le_ext_adv_foreach>
	if (!(adv_enabled ||
   1615e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16162:	b973      	cbnz	r3, 16182 <rpa_timeout+0x3a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16164:	480a      	ldr	r0, [pc, #40]	; (16190 <rpa_timeout+0x48>)
   16166:	f00c fa9d 	bl	226a4 <atomic_get>
   1616a:	0501      	lsls	r1, r0, #20
   1616c:	d409      	bmi.n	16182 <rpa_timeout+0x3a>
   1616e:	4808      	ldr	r0, [pc, #32]	; (16190 <rpa_timeout+0x48>)
   16170:	f00c fa98 	bl	226a4 <atomic_get>
   16174:	0682      	lsls	r2, r0, #26
   16176:	d506      	bpl.n	16186 <rpa_timeout+0x3e>
   16178:	4805      	ldr	r0, [pc, #20]	; (16190 <rpa_timeout+0x48>)
   1617a:	f00c fa93 	bl	226a4 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1617e:	0603      	lsls	r3, r0, #24
   16180:	d501      	bpl.n	16186 <rpa_timeout+0x3e>
	le_update_private_addr();
   16182:	f7ff ffa5 	bl	160d0 <le_update_private_addr>
}
   16186:	b003      	add	sp, #12
   16188:	f85d fb04 	ldr.w	pc, [sp], #4
   1618c:	000226bf 	.word	0x000226bf
   16190:	20000338 	.word	0x20000338

00016194 <bt_id_pending_keys_update>:
   16194:	4b0a      	ldr	r3, [pc, #40]	; (161c0 <bt_id_pending_keys_update+0x2c>)
   16196:	f3bf 8f5b 	dmb	ish
   1619a:	e853 2f00 	ldrex	r2, [r3]
   1619e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   161a2:	e843 1000 	strex	r0, r1, [r3]
   161a6:	2800      	cmp	r0, #0
   161a8:	d1f7      	bne.n	1619a <bt_id_pending_keys_update+0x6>
   161aa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   161ae:	0493      	lsls	r3, r2, #18
   161b0:	d504      	bpl.n	161bc <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   161b2:	4904      	ldr	r1, [pc, #16]	; (161c4 <bt_id_pending_keys_update+0x30>)
   161b4:	2200      	movs	r2, #0
   161b6:	2002      	movs	r0, #2
   161b8:	f005 bdf0 	b.w	1bd9c <bt_keys_foreach>
}
   161bc:	4770      	bx	lr
   161be:	bf00      	nop
   161c0:	20000338 	.word	0x20000338
   161c4:	000227dd 	.word	0x000227dd

000161c8 <bt_id_add>:
{
   161c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   161ca:	4f5b      	ldr	r7, [pc, #364]	; (16338 <bt_id_add+0x170>)
   161cc:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   161d0:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   161d4:	4604      	mov	r4, r0
   161d6:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   161d8:	b10a      	cbz	r2, 161de <bt_id_add+0x16>
   161da:	429a      	cmp	r2, r3
   161dc:	d208      	bcs.n	161f0 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   161de:	3301      	adds	r3, #1
   161e0:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   161e4:	7a23      	ldrb	r3, [r4, #8]
   161e6:	f043 0304 	orr.w	r3, r3, #4
   161ea:	7223      	strb	r3, [r4, #8]
}
   161ec:	b003      	add	sp, #12
   161ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   161f0:	2100      	movs	r1, #0
   161f2:	2206      	movs	r2, #6
   161f4:	4608      	mov	r0, r1
   161f6:	f001 fb8d 	bl	17914 <bt_conn_lookup_state_le>
	if (conn) {
   161fa:	4606      	mov	r6, r0
   161fc:	b168      	cbz	r0, 1621a <bt_id_add+0x52>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   161fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   16202:	f107 0098 	add.w	r0, r7, #152	; 0x98
   16206:	f00c fa6b 	bl	226e0 <atomic_or>
	keys->state |= flag;
   1620a:	7a23      	ldrb	r3, [r4, #8]
   1620c:	f043 0301 	orr.w	r3, r3, #1
   16210:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   16212:	4630      	mov	r0, r6
   16214:	f00c fcc1 	bl	22b9a <bt_conn_unref>
		return;
   16218:	e7e8      	b.n	161ec <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1621a:	4601      	mov	r1, r0
   1621c:	4847      	ldr	r0, [pc, #284]	; (1633c <bt_id_add+0x174>)
   1621e:	f000 fc41 	bl	16aa4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   16222:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
   16226:	b173      	cbz	r3, 16246 <bt_id_add+0x7e>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16228:	4630      	mov	r0, r6
   1622a:	f00c fa68 	bl	226fe <addr_res_enable>
		if (err) {
   1622e:	b150      	cbz	r0, 16246 <bt_id_add+0x7e>
   16230:	4943      	ldr	r1, [pc, #268]	; (16340 <bt_id_add+0x178>)
   16232:	4b44      	ldr	r3, [pc, #272]	; (16344 <bt_id_add+0x17c>)
			BT_WARN("Failed to disable address resolution");
   16234:	4844      	ldr	r0, [pc, #272]	; (16348 <bt_id_add+0x180>)
   16236:	1ac9      	subs	r1, r1, r3
   16238:	08c9      	lsrs	r1, r1, #3
   1623a:	0189      	lsls	r1, r1, #6
   1623c:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   16240:	f009 ff64 	bl	2010c <log_0>
	if (err) {
   16244:	e023      	b.n	1628e <bt_id_add+0xc6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   16246:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   1624a:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   1624e:	429a      	cmp	r2, r3
   16250:	d125      	bne.n	1629e <bt_id_add+0xd6>
   16252:	4b3c      	ldr	r3, [pc, #240]	; (16344 <bt_id_add+0x17c>)
   16254:	4e3a      	ldr	r6, [pc, #232]	; (16340 <bt_id_add+0x178>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   16256:	483d      	ldr	r0, [pc, #244]	; (1634c <bt_id_add+0x184>)
   16258:	1af6      	subs	r6, r6, r3
   1625a:	08f6      	lsrs	r6, r6, #3
   1625c:	01b6      	lsls	r6, r6, #6
   1625e:	f046 0102 	orr.w	r1, r6, #2
   16262:	f009 ff53 	bl	2010c <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   16266:	2200      	movs	r2, #0
   16268:	4611      	mov	r1, r2
   1626a:	f242 0029 	movw	r0, #8233	; 0x2029
   1626e:	f7ff f957 	bl	15520 <bt_hci_cmd_send_sync>
		if (err) {
   16272:	b118      	cbz	r0, 1627c <bt_id_add+0xb4>
			BT_ERR("Failed to clear resolution list");
   16274:	4836      	ldr	r0, [pc, #216]	; (16350 <bt_id_add+0x188>)
   16276:	f046 0101 	orr.w	r1, r6, #1
   1627a:	e7e1      	b.n	16240 <bt_id_add+0x78>
		bt_dev.le.rl_entries++;
   1627c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   16280:	3301      	adds	r3, #1
   16282:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   16286:	7a23      	ldrb	r3, [r4, #8]
   16288:	f043 0304 	orr.w	r3, r3, #4
   1628c:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1628e:	2001      	movs	r0, #1
   16290:	f00c fa35 	bl	226fe <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16294:	482f      	ldr	r0, [pc, #188]	; (16354 <bt_id_add+0x18c>)
   16296:	2100      	movs	r1, #0
   16298:	f000 fc04 	bl	16aa4 <bt_le_ext_adv_foreach>
   1629c:	e7a6      	b.n	161ec <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1629e:	4622      	mov	r2, r4
   162a0:	1c67      	adds	r7, r4, #1
   162a2:	f812 0b2a 	ldrb.w	r0, [r2], #42
   162a6:	4639      	mov	r1, r7
   162a8:	f7ff fdfe 	bl	15ea8 <hci_id_add>
	if (err) {
   162ac:	4606      	mov	r6, r0
   162ae:	b140      	cbz	r0, 162c2 <bt_id_add+0xfa>
   162b0:	4923      	ldr	r1, [pc, #140]	; (16340 <bt_id_add+0x178>)
   162b2:	4b24      	ldr	r3, [pc, #144]	; (16344 <bt_id_add+0x17c>)
		BT_ERR("Failed to add IRK to controller");
   162b4:	4828      	ldr	r0, [pc, #160]	; (16358 <bt_id_add+0x190>)
   162b6:	1ac9      	subs	r1, r1, r3
   162b8:	08c9      	lsrs	r1, r1, #3
   162ba:	0189      	lsls	r1, r1, #6
   162bc:	f041 0101 	orr.w	r1, r1, #1
   162c0:	e7be      	b.n	16240 <bt_id_add+0x78>
	bt_dev.le.rl_entries++;
   162c2:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   162c6:	3301      	adds	r3, #1
   162c8:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   162cc:	7a23      	ldrb	r3, [r4, #8]
   162ce:	f043 0304 	orr.w	r3, r3, #4
   162d2:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   162d4:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
   162d8:	075b      	lsls	r3, r3, #29
   162da:	d408      	bmi.n	162ee <bt_id_add+0x126>
   162dc:	4918      	ldr	r1, [pc, #96]	; (16340 <bt_id_add+0x178>)
   162de:	4b19      	ldr	r3, [pc, #100]	; (16344 <bt_id_add+0x17c>)
		BT_WARN("Set privacy mode command is not supported");
   162e0:	481e      	ldr	r0, [pc, #120]	; (1635c <bt_id_add+0x194>)
   162e2:	1ac9      	subs	r1, r1, r3
   162e4:	08c9      	lsrs	r1, r1, #3
   162e6:	0189      	lsls	r1, r1, #6
   162e8:	f041 0102 	orr.w	r1, r1, #2
   162ec:	e7a8      	b.n	16240 <bt_id_add+0x78>
	bt_addr_le_copy(&cp.id_addr, addr);
   162ee:	4639      	mov	r1, r7
   162f0:	4668      	mov	r0, sp
   162f2:	f00c f9d4 	bl	2269e <bt_addr_le_copy>
	cp.mode = mode;
   162f6:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   162f8:	2108      	movs	r1, #8
   162fa:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   162fe:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16302:	f7fe ffb1 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   16306:	4604      	mov	r4, r0
   16308:	b940      	cbnz	r0, 1631c <bt_id_add+0x154>
   1630a:	490d      	ldr	r1, [pc, #52]	; (16340 <bt_id_add+0x178>)
   1630c:	4b0d      	ldr	r3, [pc, #52]	; (16344 <bt_id_add+0x17c>)
		BT_ERR("Failed to set privacy mode");
   1630e:	4814      	ldr	r0, [pc, #80]	; (16360 <bt_id_add+0x198>)
   16310:	1ac9      	subs	r1, r1, r3
   16312:	08c9      	lsrs	r1, r1, #3
   16314:	0189      	lsls	r1, r1, #6
   16316:	f041 0101 	orr.w	r1, r1, #1
   1631a:	e791      	b.n	16240 <bt_id_add+0x78>
   1631c:	2208      	movs	r2, #8
   1631e:	4669      	mov	r1, sp
   16320:	4410      	add	r0, r2
   16322:	f00e f8ca 	bl	244ba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   16326:	4632      	mov	r2, r6
   16328:	4621      	mov	r1, r4
   1632a:	f242 004e 	movw	r0, #8270	; 0x204e
   1632e:	f7ff f8f7 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   16332:	2800      	cmp	r0, #0
   16334:	d0ab      	beq.n	1628e <bt_id_add+0xc6>
   16336:	e7e8      	b.n	1630a <bt_id_add+0x142>
   16338:	200002a0 	.word	0x200002a0
   1633c:	00022745 	.word	0x00022745
   16340:	00025714 	.word	0x00025714
   16344:	000256c4 	.word	0x000256c4
   16348:	00027528 	.word	0x00027528
   1634c:	0002754d 	.word	0x0002754d
   16350:	0002757e 	.word	0x0002757e
   16354:	00022799 	.word	0x00022799
   16358:	0002759e 	.word	0x0002759e
   1635c:	000275be 	.word	0x000275be
   16360:	000275e8 	.word	0x000275e8

00016364 <bt_id_del>:
{
   16364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   16368:	4f44      	ldr	r7, [pc, #272]	; (1647c <bt_id_del+0x118>)
   1636a:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   1636e:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   16372:	4604      	mov	r4, r0
   16374:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
   16376:	b112      	cbz	r2, 1637e <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16378:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1637a:	4293      	cmp	r3, r2
   1637c:	dd08      	ble.n	16390 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   1637e:	3b01      	subs	r3, #1
   16380:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   16384:	7a23      	ldrb	r3, [r4, #8]
   16386:	f023 0304 	bic.w	r3, r3, #4
   1638a:	7223      	strb	r3, [r4, #8]
}
   1638c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   16390:	2100      	movs	r1, #0
   16392:	2206      	movs	r2, #6
   16394:	4608      	mov	r0, r1
   16396:	f001 fabd 	bl	17914 <bt_conn_lookup_state_le>
	if (conn) {
   1639a:	4606      	mov	r6, r0
   1639c:	b170      	cbz	r0, 163bc <bt_id_del+0x58>
   1639e:	f107 0098 	add.w	r0, r7, #152	; 0x98
   163a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   163a6:	f00c f99b 	bl	226e0 <atomic_or>
	keys->state |= flag;
   163aa:	7a23      	ldrb	r3, [r4, #8]
   163ac:	f043 0302 	orr.w	r3, r3, #2
   163b0:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   163b2:	4630      	mov	r0, r6
}
   163b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   163b8:	f00c bbef 	b.w	22b9a <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   163bc:	4601      	mov	r1, r0
   163be:	4830      	ldr	r0, [pc, #192]	; (16480 <bt_id_del+0x11c>)
   163c0:	f000 fb70 	bl	16aa4 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   163c4:	4630      	mov	r0, r6
   163c6:	f00c f99a 	bl	226fe <addr_res_enable>
	if (err) {
   163ca:	4606      	mov	r6, r0
   163cc:	b1b0      	cbz	r0, 163fc <bt_id_del+0x98>
   163ce:	4a2d      	ldr	r2, [pc, #180]	; (16484 <bt_id_del+0x120>)
   163d0:	4b2d      	ldr	r3, [pc, #180]	; (16488 <bt_id_del+0x124>)
   163d2:	1ad2      	subs	r2, r2, r3
   163d4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   163d6:	0192      	lsls	r2, r2, #6
   163d8:	4601      	mov	r1, r0
   163da:	f042 0201 	orr.w	r2, r2, #1
   163de:	482b      	ldr	r0, [pc, #172]	; (1648c <bt_id_del+0x128>)
   163e0:	f009 fea1 	bl	20126 <log_1>
	if (bt_dev.le.rl_entries) {
   163e4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   163e8:	b113      	cbz	r3, 163f0 <bt_id_del+0x8c>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   163ea:	2001      	movs	r0, #1
   163ec:	f00c f987 	bl	226fe <addr_res_enable>
}
   163f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   163f4:	4826      	ldr	r0, [pc, #152]	; (16490 <bt_id_del+0x12c>)
   163f6:	2100      	movs	r1, #0
   163f8:	f000 bb54 	b.w	16aa4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   163fc:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
   16400:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   16404:	429a      	cmp	r2, r3
   16406:	d20c      	bcs.n	16422 <bt_id_del+0xbe>
		bt_dev.le.rl_entries--;
   16408:	3b01      	subs	r3, #1
   1640a:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   1640e:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16410:	4920      	ldr	r1, [pc, #128]	; (16494 <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   16412:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16416:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   16418:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1641a:	2002      	movs	r0, #2
   1641c:	f005 fcbe 	bl	1bd9c <bt_keys_foreach>
		goto done;
   16420:	e7e0      	b.n	163e4 <bt_id_del+0x80>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   16422:	2107      	movs	r1, #7
   16424:	f242 0028 	movw	r0, #8232	; 0x2028
   16428:	f7fe ff1e 	bl	15268 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1642c:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   16430:	4607      	mov	r7, r0
   16432:	b950      	cbnz	r0, 1644a <bt_id_del+0xe6>
   16434:	4b14      	ldr	r3, [pc, #80]	; (16488 <bt_id_del+0x124>)
   16436:	4913      	ldr	r1, [pc, #76]	; (16484 <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
   16438:	4817      	ldr	r0, [pc, #92]	; (16498 <bt_id_del+0x134>)
   1643a:	1ac9      	subs	r1, r1, r3
   1643c:	08c9      	lsrs	r1, r1, #3
   1643e:	0189      	lsls	r1, r1, #6
   16440:	f041 0101 	orr.w	r1, r1, #1
   16444:	f009 fe62 	bl	2010c <log_0>
		goto done;
   16448:	e7cc      	b.n	163e4 <bt_id_del+0x80>
	return net_buf_simple_add(&buf->b, len);
   1644a:	2107      	movs	r1, #7
   1644c:	3008      	adds	r0, #8
   1644e:	f00e f82e 	bl	244ae <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   16452:	4641      	mov	r1, r8
   16454:	f00c f923 	bl	2269e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   16458:	4632      	mov	r2, r6
   1645a:	4639      	mov	r1, r7
   1645c:	f242 0028 	movw	r0, #8232	; 0x2028
   16460:	f7ff f85e 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   16464:	2800      	cmp	r0, #0
   16466:	d1e5      	bne.n	16434 <bt_id_del+0xd0>
	bt_dev.le.rl_entries--;
   16468:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1646c:	3b01      	subs	r3, #1
   1646e:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   16472:	7a23      	ldrb	r3, [r4, #8]
   16474:	f023 0304 	bic.w	r3, r3, #4
   16478:	7223      	strb	r3, [r4, #8]
   1647a:	e7b3      	b.n	163e4 <bt_id_del+0x80>
   1647c:	200002a0 	.word	0x200002a0
   16480:	00022745 	.word	0x00022745
   16484:	00025714 	.word	0x00025714
   16488:	000256c4 	.word	0x000256c4
   1648c:	00027603 	.word	0x00027603
   16490:	00022799 	.word	0x00022799
   16494:	0002272f 	.word	0x0002272f
   16498:	00027630 	.word	0x00027630

0001649c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1649c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1649e:	460f      	mov	r7, r1
   164a0:	b087      	sub	sp, #28
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   164a2:	4605      	mov	r5, r0
   164a4:	b930      	cbnz	r0, 164b4 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   164a6:	4e2c      	ldr	r6, [pc, #176]	; (16558 <bt_id_create+0xbc>)
   164a8:	79f3      	ldrb	r3, [r6, #7]
   164aa:	2b01      	cmp	r3, #1
   164ac:	d12b      	bne.n	16506 <bt_id_create+0x6a>
		return -ENOMEM;
   164ae:	f06f 040b 	mvn.w	r4, #11
   164b2:	e025      	b.n	16500 <bt_id_create+0x64>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   164b4:	2300      	movs	r3, #0
   164b6:	2207      	movs	r2, #7
   164b8:	a902      	add	r1, sp, #8
   164ba:	9302      	str	r3, [sp, #8]
   164bc:	f8cd 300b 	str.w	r3, [sp, #11]
   164c0:	f00b fe82 	bl	221c8 <memcmp>
   164c4:	2800      	cmp	r0, #0
   164c6:	d0ee      	beq.n	164a6 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   164c8:	782b      	ldrb	r3, [r5, #0]
   164ca:	2b01      	cmp	r3, #1
   164cc:	d104      	bne.n	164d8 <bt_id_create+0x3c>
   164ce:	79ab      	ldrb	r3, [r5, #6]
   164d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   164d4:	2bc0      	cmp	r3, #192	; 0xc0
   164d6:	d00c      	beq.n	164f2 <bt_id_create+0x56>
   164d8:	4920      	ldr	r1, [pc, #128]	; (1655c <bt_id_create+0xc0>)
   164da:	4b21      	ldr	r3, [pc, #132]	; (16560 <bt_id_create+0xc4>)
			BT_ERR("Only static random identity address supported");
   164dc:	4821      	ldr	r0, [pc, #132]	; (16564 <bt_id_create+0xc8>)
   164de:	1ac9      	subs	r1, r1, r3
   164e0:	08c9      	lsrs	r1, r1, #3
   164e2:	0189      	lsls	r1, r1, #6
   164e4:	f041 0101 	orr.w	r1, r1, #1
   164e8:	f009 fe10 	bl	2010c <log_0>
			return -EINVAL;
   164ec:	f06f 0415 	mvn.w	r4, #21
   164f0:	e006      	b.n	16500 <bt_id_create+0x64>
		if (id_find(addr) >= 0) {
   164f2:	4628      	mov	r0, r5
   164f4:	f7ff fd08 	bl	15f08 <id_find>
   164f8:	2800      	cmp	r0, #0
   164fa:	dbd4      	blt.n	164a6 <bt_id_create+0xa>
			return -EALREADY;
   164fc:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   16500:	4620      	mov	r0, r4
   16502:	b007      	add	sp, #28
   16504:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16506:	f106 0098 	add.w	r0, r6, #152	; 0x98
   1650a:	f00c f8cb 	bl	226a4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1650e:	f010 0001 	ands.w	r0, r0, #1
   16512:	d118      	bne.n	16546 <bt_id_create+0xaa>
		uint8_t zero_irk[16] = { 0 };
   16514:	e9cd 0002 	strd	r0, r0, [sp, #8]
   16518:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1651c:	2d00      	cmp	r5, #0
   1651e:	d0e5      	beq.n	164ec <bt_id_create+0x50>
   16520:	9000      	str	r0, [sp, #0]
   16522:	2207      	movs	r2, #7
   16524:	f8cd 0003 	str.w	r0, [sp, #3]
   16528:	4669      	mov	r1, sp
   1652a:	4628      	mov	r0, r5
   1652c:	f00b fe4c 	bl	221c8 <memcmp>
   16530:	2800      	cmp	r0, #0
   16532:	d0db      	beq.n	164ec <bt_id_create+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16534:	2f00      	cmp	r7, #0
   16536:	d0d9      	beq.n	164ec <bt_id_create+0x50>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   16538:	2210      	movs	r2, #16
   1653a:	a902      	add	r1, sp, #8
   1653c:	4638      	mov	r0, r7
   1653e:	f00b fe43 	bl	221c8 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16542:	2800      	cmp	r0, #0
   16544:	d0d2      	beq.n	164ec <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
   16546:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   16548:	463a      	mov	r2, r7
	new_id = bt_dev.id_count++;
   1654a:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   1654c:	4629      	mov	r1, r5
   1654e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   16550:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   16552:	f7ff fd37 	bl	15fc4 <id_create>
	return new_id;
   16556:	e7d3      	b.n	16500 <bt_id_create+0x64>
   16558:	200002a0 	.word	0x200002a0
   1655c:	00025714 	.word	0x00025714
   16560:	000256c4 	.word	0x000256c4
   16564:	00027655 	.word	0x00027655

00016568 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   16568:	b570      	push	{r4, r5, r6, lr}
   1656a:	b086      	sub	sp, #24
   1656c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1656e:	aa01      	add	r2, sp, #4
   16570:	2100      	movs	r1, #0
   16572:	f241 0009 	movw	r0, #4105	; 0x1009
   16576:	f7fe ffd3 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   1657a:	4604      	mov	r4, r0
   1657c:	b160      	cbz	r0, 16598 <bt_id_read_public_addr+0x30>
   1657e:	491a      	ldr	r1, [pc, #104]	; (165e8 <bt_id_read_public_addr+0x80>)
   16580:	4b1a      	ldr	r3, [pc, #104]	; (165ec <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   16582:	481b      	ldr	r0, [pc, #108]	; (165f0 <bt_id_read_public_addr+0x88>)
   16584:	1ac9      	subs	r1, r1, r3
   16586:	08c9      	lsrs	r1, r1, #3
   16588:	0189      	lsls	r1, r1, #6
   1658a:	f041 0102 	orr.w	r1, r1, #2
   1658e:	f009 fdbd 	bl	2010c <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   16592:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16594:	b006      	add	sp, #24
   16596:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16598:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1659a:	9002      	str	r0, [sp, #8]
   1659c:	689d      	ldr	r5, [r3, #8]
   1659e:	f8ad 000c 	strh.w	r0, [sp, #12]
   165a2:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   165a4:	2206      	movs	r2, #6
   165a6:	a902      	add	r1, sp, #8
   165a8:	4628      	mov	r0, r5
   165aa:	f00b fe0d 	bl	221c8 <memcmp>
   165ae:	b918      	cbnz	r0, 165b8 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   165b0:	9801      	ldr	r0, [sp, #4]
   165b2:	f005 fe23 	bl	1c1fc <net_buf_unref>
   165b6:	e7ec      	b.n	16592 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   165b8:	f04f 33ff 	mov.w	r3, #4294967295
   165bc:	2206      	movs	r2, #6
   165be:	a904      	add	r1, sp, #16
   165c0:	4628      	mov	r0, r5
   165c2:	9304      	str	r3, [sp, #16]
   165c4:	f8ad 3014 	strh.w	r3, [sp, #20]
   165c8:	f00b fdfe 	bl	221c8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   165cc:	2800      	cmp	r0, #0
   165ce:	d0ef      	beq.n	165b0 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   165d0:	2206      	movs	r2, #6
   165d2:	4629      	mov	r1, r5
   165d4:	1c70      	adds	r0, r6, #1
   165d6:	f00b fe07 	bl	221e8 <memcpy>
	net_buf_unref(rsp);
   165da:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   165dc:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   165de:	f005 fe0d 	bl	1c1fc <net_buf_unref>
	return 1U;
   165e2:	2001      	movs	r0, #1
   165e4:	e7d6      	b.n	16594 <bt_id_read_public_addr+0x2c>
   165e6:	bf00      	nop
   165e8:	00025714 	.word	0x00025714
   165ec:	000256c4 	.word	0x000256c4
   165f0:	00027683 	.word	0x00027683

000165f4 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   165f4:	b510      	push	{r4, lr}
   165f6:	b08a      	sub	sp, #40	; 0x28
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   165f8:	4668      	mov	r0, sp
   165fa:	f7ff ffb5 	bl	16568 <bt_id_read_public_addr>
   165fe:	4c1d      	ldr	r4, [pc, #116]	; (16674 <bt_setup_public_id_addr+0x80>)
   16600:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   16602:	b340      	cbz	r0, 16656 <bt_setup_public_id_addr+0x62>
	memset(ir, 0, 16);
   16604:	2210      	movs	r2, #16
   16606:	2100      	movs	r1, #0
   16608:	a806      	add	r0, sp, #24
   1660a:	f00b fe18 	bl	2223e <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   1660e:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
   16612:	079b      	lsls	r3, r3, #30
   16614:	d510      	bpl.n	16638 <bt_setup_public_id_addr+0x44>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   16616:	aa02      	add	r2, sp, #8
   16618:	2100      	movs	r1, #0
   1661a:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   1661e:	f7fe ff7f 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   16622:	b1d0      	cbz	r0, 1665a <bt_setup_public_id_addr+0x66>
   16624:	4914      	ldr	r1, [pc, #80]	; (16678 <bt_setup_public_id_addr+0x84>)
   16626:	4b15      	ldr	r3, [pc, #84]	; (1667c <bt_setup_public_id_addr+0x88>)
		BT_WARN("Failed to read identity root");
   16628:	4815      	ldr	r0, [pc, #84]	; (16680 <bt_setup_public_id_addr+0x8c>)
   1662a:	1ac9      	subs	r1, r1, r3
   1662c:	08c9      	lsrs	r1, r1, #3
   1662e:	0189      	lsls	r1, r1, #6
   16630:	f041 0102 	orr.w	r1, r1, #2
   16634:	f009 fd6a 	bl	2010c <log_0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
   16638:	a902      	add	r1, sp, #8
   1663a:	a806      	add	r0, sp, #24
   1663c:	f00d fd34 	bl	240a8 <bt_smp_irk_get>
   16640:	b1b0      	cbz	r0, 16670 <bt_setup_public_id_addr+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16642:	4810      	ldr	r0, [pc, #64]	; (16684 <bt_setup_public_id_addr+0x90>)
   16644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   16648:	f00c f84a 	bl	226e0 <atomic_or>
	uint8_t *irk = NULL;
   1664c:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   1664e:	4669      	mov	r1, sp
   16650:	2000      	movs	r0, #0
   16652:	f7ff fcb7 	bl	15fc4 <id_create>
}
   16656:	b00a      	add	sp, #40	; 0x28
   16658:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   1665a:	9b02      	ldr	r3, [sp, #8]
	memcpy(ir, rp->ir, 16);
   1665c:	6899      	ldr	r1, [r3, #8]
   1665e:	2210      	movs	r2, #16
   16660:	3101      	adds	r1, #1
   16662:	a806      	add	r0, sp, #24
   16664:	f00b fdc0 	bl	221e8 <memcpy>
	net_buf_unref(rsp);
   16668:	9802      	ldr	r0, [sp, #8]
   1666a:	f005 fdc7 	bl	1c1fc <net_buf_unref>
   1666e:	e7e3      	b.n	16638 <bt_setup_public_id_addr+0x44>
		irk = ir_irk;
   16670:	aa02      	add	r2, sp, #8
   16672:	e7ec      	b.n	1664e <bt_setup_public_id_addr+0x5a>
   16674:	200002a0 	.word	0x200002a0
   16678:	00025714 	.word	0x00025714
   1667c:	000256c4 	.word	0x000256c4
   16680:	000276a1 	.word	0x000276a1
   16684:	20000338 	.word	0x20000338

00016688 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1668c:	4b25      	ldr	r3, [pc, #148]	; (16724 <bt_read_static_addr+0x9c>)
   1668e:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   16692:	f014 0401 	ands.w	r4, r4, #1
{
   16696:	4607      	mov	r7, r0
   16698:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1669a:	d10a      	bne.n	166b2 <bt_read_static_addr+0x2a>
   1669c:	4922      	ldr	r1, [pc, #136]	; (16728 <bt_read_static_addr+0xa0>)
   1669e:	4b23      	ldr	r3, [pc, #140]	; (1672c <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   166a0:	4823      	ldr	r0, [pc, #140]	; (16730 <bt_read_static_addr+0xa8>)
   166a2:	1ac9      	subs	r1, r1, r3
   166a4:	08c9      	lsrs	r1, r1, #3
   166a6:	0189      	lsls	r1, r1, #6
   166a8:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   166ac:	f009 fd2e 	bl	2010c <log_0>
   166b0:	e012      	b.n	166d8 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   166b2:	aa01      	add	r2, sp, #4
   166b4:	2100      	movs	r1, #0
   166b6:	f64f 4009 	movw	r0, #64521	; 0xfc09
   166ba:	f7fe ff31 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   166be:	4605      	mov	r5, r0
   166c0:	b170      	cbz	r0, 166e0 <bt_read_static_addr+0x58>
   166c2:	4b1a      	ldr	r3, [pc, #104]	; (1672c <bt_read_static_addr+0xa4>)
   166c4:	4918      	ldr	r1, [pc, #96]	; (16728 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   166c6:	481b      	ldr	r0, [pc, #108]	; (16734 <bt_read_static_addr+0xac>)
   166c8:	1ac9      	subs	r1, r1, r3
   166ca:	08c9      	lsrs	r1, r1, #3
   166cc:	0189      	lsls	r1, r1, #6
   166ce:	f041 0102 	orr.w	r1, r1, #2
   166d2:	f009 fd1b 	bl	2010c <log_0>
		return 0;
   166d6:	2400      	movs	r4, #0
	}

	return cnt;
}
   166d8:	4620      	mov	r0, r4
   166da:	b002      	add	sp, #8
   166dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   166e0:	9b01      	ldr	r3, [sp, #4]
   166e2:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   166e4:	785c      	ldrb	r4, [r3, #1]
   166e6:	42b4      	cmp	r4, r6
   166e8:	bf28      	it	cs
   166ea:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   166ec:	f04f 0816 	mov.w	r8, #22
   166f0:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   166f2:	42a5      	cmp	r5, r4
   166f4:	db0d      	blt.n	16712 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   166f6:	9801      	ldr	r0, [sp, #4]
   166f8:	f005 fd80 	bl	1c1fc <net_buf_unref>
	if (!cnt) {
   166fc:	2c00      	cmp	r4, #0
   166fe:	d1eb      	bne.n	166d8 <bt_read_static_addr+0x50>
   16700:	4909      	ldr	r1, [pc, #36]	; (16728 <bt_read_static_addr+0xa0>)
   16702:	4b0a      	ldr	r3, [pc, #40]	; (1672c <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   16704:	480c      	ldr	r0, [pc, #48]	; (16738 <bt_read_static_addr+0xb0>)
   16706:	1ac9      	subs	r1, r1, r3
   16708:	08c9      	lsrs	r1, r1, #3
   1670a:	0189      	lsls	r1, r1, #6
   1670c:	f041 0102 	orr.w	r1, r1, #2
   16710:	e7cc      	b.n	166ac <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   16712:	fb08 7005 	mla	r0, r8, r5, r7
   16716:	2216      	movs	r2, #22
   16718:	4631      	mov	r1, r6
   1671a:	f00b fd65 	bl	221e8 <memcpy>
	for (i = 0; i < cnt; i++) {
   1671e:	3501      	adds	r5, #1
   16720:	e7e7      	b.n	166f2 <bt_read_static_addr+0x6a>
   16722:	bf00      	nop
   16724:	200002a0 	.word	0x200002a0
   16728:	00025714 	.word	0x00025714
   1672c:	000256c4 	.word	0x000256c4
   16730:	000276be 	.word	0x000276be
   16734:	000276ea 	.word	0x000276ea
   16738:	0002770a 	.word	0x0002770a

0001673c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1673c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16740:	4c21      	ldr	r4, [pc, #132]	; (167c8 <bt_setup_random_id_addr+0x8c>)
   16742:	79e5      	ldrb	r5, [r4, #7]
{
   16744:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   16746:	bbad      	cbnz	r5, 167b4 <bt_setup_random_id_addr+0x78>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   16748:	2101      	movs	r1, #1
   1674a:	a806      	add	r0, sp, #24
   1674c:	f7ff ff9c 	bl	16688 <bt_read_static_addr>
   16750:	71e0      	strb	r0, [r4, #7]

		if (bt_dev.id_count) {
   16752:	b378      	cbz	r0, 167b4 <bt_setup_random_id_addr+0x78>
   16754:	f04f 0916 	mov.w	r9, #22
   16758:	f104 0a98 	add.w	sl, r4, #152	; 0x98
   1675c:	e020      	b.n	167a0 <bt_setup_random_id_addr+0x64>
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   1675e:	fb09 f806 	mul.w	r8, r9, r6
   16762:	f108 0006 	add.w	r0, r8, #6
   16766:	ab06      	add	r3, sp, #24
   16768:	a902      	add	r1, sp, #8
   1676a:	4418      	add	r0, r3
   1676c:	f00d fc9c 	bl	240a8 <bt_smp_irk_get>
   16770:	b1f0      	cbz	r0, 167b0 <bt_setup_random_id_addr+0x74>
   16772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   16776:	4650      	mov	r0, sl
   16778:	f00b ffb2 	bl	226e0 <atomic_or>
				uint8_t *irk = NULL;
   1677c:	2700      	movs	r7, #0
   1677e:	ab06      	add	r3, sp, #24
   16780:	eb03 0108 	add.w	r1, r3, r8
   16784:	2206      	movs	r2, #6
   16786:	f10d 0001 	add.w	r0, sp, #1
   1678a:	f00b fd2d 	bl	221e8 <memcpy>
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
				addr.type = BT_ADDR_LE_RANDOM;
   1678e:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   16790:	463a      	mov	r2, r7
   16792:	4669      	mov	r1, sp
   16794:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   16796:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   1679a:	f7ff fc13 	bl	15fc4 <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1679e:	3501      	adds	r5, #1
   167a0:	79e3      	ldrb	r3, [r4, #7]
   167a2:	b2ee      	uxtb	r6, r5
   167a4:	42b3      	cmp	r3, r6
   167a6:	d8da      	bhi.n	1675e <bt_setup_random_id_addr+0x22>
			}

			return 0;
   167a8:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   167aa:	b00c      	add	sp, #48	; 0x30
   167ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
   167b0:	af02      	add	r7, sp, #8
   167b2:	e7e4      	b.n	1677e <bt_setup_random_id_addr+0x42>
   167b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   167b8:	4804      	ldr	r0, [pc, #16]	; (167cc <bt_setup_random_id_addr+0x90>)
   167ba:	f00b ff91 	bl	226e0 <atomic_or>
	return bt_id_create(NULL, NULL);
   167be:	2100      	movs	r1, #0
   167c0:	4608      	mov	r0, r1
   167c2:	f7ff fe6b 	bl	1649c <bt_id_create>
   167c6:	e7f0      	b.n	167aa <bt_setup_random_id_addr+0x6e>
   167c8:	200002a0 	.word	0x200002a0
   167cc:	20000338 	.word	0x20000338

000167d0 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   167d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   167d4:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   167d8:	7805      	ldrb	r5, [r0, #0]
{
   167da:	4684      	mov	ip, r0
   167dc:	460f      	mov	r7, r1
   167de:	4690      	mov	r8, r2
   167e0:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   167e2:	d035      	beq.n	16850 <bt_id_set_adv_own_addr+0x80>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   167e4:	b132      	cbz	r2, 167f4 <bt_id_set_adv_own_addr+0x24>
   167e6:	068b      	lsls	r3, r1, #26
   167e8:	d504      	bpl.n	167f4 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   167ea:	4b28      	ldr	r3, [pc, #160]	; (1688c <bt_id_set_adv_own_addr+0xbc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   167ec:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   167f0:	065c      	lsls	r4, r3, #25
   167f2:	d547      	bpl.n	16884 <bt_id_set_adv_own_addr+0xb4>
			return -ENOTSUP;
		}

		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   167f4:	0778      	lsls	r0, r7, #29
   167f6:	d40b      	bmi.n	16810 <bt_id_set_adv_own_addr+0x40>
		    !(options & BT_LE_ADV_OPT_USE_IDENTITY)) {
			err = bt_id_set_adv_private_addr(adv);
   167f8:	4660      	mov	r0, ip
   167fa:	f00b ffea 	bl	227d2 <bt_id_set_adv_private_addr>
			if (err) {
   167fe:	bb00      	cbnz	r0, 16842 <bt_id_set_adv_own_addr+0x72>
				return err;
			}

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16800:	f1b8 0f00 	cmp.w	r8, #0
   16804:	d03c      	beq.n	16880 <bt_id_set_adv_own_addr+0xb0>
   16806:	06b9      	lsls	r1, r7, #26
   16808:	d53a      	bpl.n	16880 <bt_id_set_adv_own_addr+0xb0>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
   1680a:	2303      	movs	r3, #3
				scan_enabled = true;
				bt_le_scan_set_enable(false);
			}
#endif /* defined(CONFIG_BT_OBSERVER) */
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1680c:	7033      	strb	r3, [r6, #0]
		} else {
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}

		if (err) {
   1680e:	e018      	b.n	16842 <bt_id_set_adv_own_addr+0x72>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16810:	4c1e      	ldr	r4, [pc, #120]	; (1688c <bt_id_set_adv_own_addr+0xbc>)
   16812:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   16816:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1681a:	5ce3      	ldrb	r3, [r4, r3]
   1681c:	2b01      	cmp	r3, #1
   1681e:	d008      	beq.n	16832 <bt_id_set_adv_own_addr+0x62>
			*own_addr_type = id_addr->type;
   16820:	eba9 0505 	sub.w	r5, r9, r5
   16824:	5d63      	ldrb	r3, [r4, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16826:	f1b8 0f00 	cmp.w	r8, #0
   1682a:	d10c      	bne.n	16846 <bt_id_set_adv_own_addr+0x76>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1682c:	7033      	strb	r3, [r6, #0]
			return err;
		}
	}

	return 0;
   1682e:	2000      	movs	r0, #0
   16830:	e007      	b.n	16842 <bt_id_set_adv_own_addr+0x72>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   16832:	2007      	movs	r0, #7
   16834:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   16838:	4420      	add	r0, r4
   1683a:	f7ff fb95 	bl	15f68 <set_random_address>
				if (err) {
   1683e:	2800      	cmp	r0, #0
   16840:	d0ee      	beq.n	16820 <bt_id_set_adv_own_addr+0x50>
}
   16842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16846:	06ba      	lsls	r2, r7, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16848:	bf48      	it	mi
   1684a:	f043 0302 	orrmi.w	r3, r3, #2
   1684e:	e7ed      	b.n	1682c <bt_id_set_adv_own_addr+0x5c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   16850:	074b      	lsls	r3, r1, #29
   16852:	d513      	bpl.n	1687c <bt_id_set_adv_own_addr+0xac>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16854:	4f0d      	ldr	r7, [pc, #52]	; (1688c <bt_id_set_adv_own_addr+0xbc>)
   16856:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1685a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   1685e:	5cfb      	ldrb	r3, [r7, r3]
   16860:	2b01      	cmp	r3, #1
   16862:	d109      	bne.n	16878 <bt_id_set_adv_own_addr+0xa8>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   16864:	2007      	movs	r0, #7
   16866:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   1686a:	4438      	add	r0, r7
   1686c:	f7ff fb7c 	bl	15f68 <set_random_address>
			*own_addr_type = id_addr->type;
   16870:	eba8 0505 	sub.w	r5, r8, r5
   16874:	5d7b      	ldrb	r3, [r7, r5]
   16876:	e7c9      	b.n	1680c <bt_id_set_adv_own_addr+0x3c>
	int err = 0;
   16878:	4620      	mov	r0, r4
   1687a:	e7f9      	b.n	16870 <bt_id_set_adv_own_addr+0xa0>
			err = bt_id_set_adv_private_addr(adv);
   1687c:	f00b ffa9 	bl	227d2 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16880:	2301      	movs	r3, #1
   16882:	e7c3      	b.n	1680c <bt_id_set_adv_own_addr+0x3c>
			return -ENOTSUP;
   16884:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16888:	e7db      	b.n	16842 <bt_id_set_adv_own_addr+0x72>
   1688a:	bf00      	nop
   1688c:	200002a0 	.word	0x200002a0

00016890 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   16890:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   16892:	4903      	ldr	r1, [pc, #12]	; (168a0 <bt_id_init+0x10>)
   16894:	4803      	ldr	r0, [pc, #12]	; (168a4 <bt_id_init+0x14>)
   16896:	f00e fa6b 	bl	24d70 <k_work_init_delayable>
#endif

	return 0;
}
   1689a:	2000      	movs	r0, #0
   1689c:	bd08      	pop	{r3, pc}
   1689e:	bf00      	nop
   168a0:	00016149 	.word	0x00016149
   168a4:	200003f0 	.word	0x200003f0

000168a8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   168a8:	6843      	ldr	r3, [r0, #4]
{
   168aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   168ac:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   168ae:	0558      	lsls	r0, r3, #21
   168b0:	d502      	bpl.n	168b8 <valid_adv_param+0x10>
		return false;
   168b2:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   168b4:	b003      	add	sp, #12
   168b6:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   168b8:	6922      	ldr	r2, [r4, #16]
   168ba:	b12a      	cbz	r2, 168c8 <valid_adv_param+0x20>
   168bc:	07d9      	lsls	r1, r3, #31
   168be:	d5f8      	bpl.n	168b2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
   168c0:	f003 0324 	and.w	r3, r3, #36	; 0x24
   168c4:	2b24      	cmp	r3, #36	; 0x24
   168c6:	d0f4      	beq.n	168b2 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   168c8:	4d1a      	ldr	r5, [pc, #104]	; (16934 <valid_adv_param+0x8c>)
   168ca:	7820      	ldrb	r0, [r4, #0]
   168cc:	79eb      	ldrb	r3, [r5, #7]
   168ce:	4283      	cmp	r3, r0
   168d0:	d9ef      	bls.n	168b2 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   168d2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   168d6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   168d8:	2207      	movs	r2, #7
   168da:	4669      	mov	r1, sp
   168dc:	4428      	add	r0, r5
   168de:	9300      	str	r3, [sp, #0]
   168e0:	f8cd 3003 	str.w	r3, [sp, #3]
   168e4:	f00b fc70 	bl	221c8 <memcmp>
	if (param->id >= bt_dev.id_count ||
   168e8:	2800      	cmp	r0, #0
   168ea:	d0e2      	beq.n	168b2 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   168ec:	6860      	ldr	r0, [r4, #4]
   168ee:	07c2      	lsls	r2, r0, #31
   168f0:	d406      	bmi.n	16900 <valid_adv_param+0x58>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   168f2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   168f6:	2b08      	cmp	r3, #8
   168f8:	d802      	bhi.n	16900 <valid_adv_param+0x58>
   168fa:	68a3      	ldr	r3, [r4, #8]
   168fc:	2b9f      	cmp	r3, #159	; 0x9f
   168fe:	d9d8      	bls.n	168b2 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   16900:	f010 0f30 	tst.w	r0, #48	; 0x30
   16904:	d002      	beq.n	1690c <valid_adv_param+0x64>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   16906:	6923      	ldr	r3, [r4, #16]
   16908:	2b00      	cmp	r3, #0
   1690a:	d0d2      	beq.n	168b2 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1690c:	06c3      	lsls	r3, r0, #27
   1690e:	d401      	bmi.n	16914 <valid_adv_param+0x6c>
   16910:	6923      	ldr	r3, [r4, #16]
   16912:	b943      	cbnz	r3, 16926 <valid_adv_param+0x7e>
		if (param->interval_min > param->interval_max ||
   16914:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   16918:	429a      	cmp	r2, r3
   1691a:	d8ca      	bhi.n	168b2 <valid_adv_param+0xa>
   1691c:	2a1f      	cmp	r2, #31
   1691e:	d9c8      	bls.n	168b2 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   16920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   16924:	d8c5      	bhi.n	168b2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   16926:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1692a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1692e:	bf18      	it	ne
   16930:	2001      	movne	r0, #1
   16932:	e7bf      	b.n	168b4 <valid_adv_param+0xc>
   16934:	200002a0 	.word	0x200002a0

00016938 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   16938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1693c:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1693e:	2120      	movs	r1, #32
{
   16940:	4682      	mov	sl, r0
   16942:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16944:	f7fe fc90 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   16948:	4606      	mov	r6, r0
   1694a:	2800      	cmp	r0, #0
   1694c:	d05c      	beq.n	16a08 <hci_set_ad+0xd0>
   1694e:	2120      	movs	r1, #32
   16950:	3008      	adds	r0, #8
   16952:	f00d fdac 	bl	244ae <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   16956:	2220      	movs	r2, #32
   16958:	2100      	movs	r1, #0
   1695a:	4681      	mov	r9, r0
   1695c:	f00b fc6f 	bl	2223e <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   16960:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   16964:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   16968:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1696a:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1696c:	f8d4 8000 	ldr.w	r8, [r4]
   16970:	2300      	movs	r3, #0
   16972:	6862      	ldr	r2, [r4, #4]
   16974:	4293      	cmp	r3, r2
   16976:	d30d      	bcc.n	16994 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   16978:	9b00      	ldr	r3, [sp, #0]
   1697a:	3408      	adds	r4, #8
   1697c:	429c      	cmp	r4, r3
   1697e:	d1f5      	bne.n	1696c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16980:	2200      	movs	r2, #0
   16982:	4631      	mov	r1, r6
   16984:	4650      	mov	r0, sl
	*data_len = set_data_len;
   16986:	f889 5000 	strb.w	r5, [r9]
}
   1698a:	b003      	add	sp, #12
   1698c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16990:	f7fe bdc6 	b.w	15520 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   16994:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   16998:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1699c:	1ca8      	adds	r0, r5, #2
   1699e:	1881      	adds	r1, r0, r2
   169a0:	291f      	cmp	r1, #31
   169a2:	d91a      	bls.n	169da <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   169a4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   169a8:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   169ac:	d101      	bne.n	169b2 <hci_set_ad+0x7a>
   169ae:	2a00      	cmp	r2, #0
   169b0:	dc11      	bgt.n	169d6 <hci_set_ad+0x9e>
   169b2:	4b17      	ldr	r3, [pc, #92]	; (16a10 <hci_set_ad+0xd8>)
   169b4:	4917      	ldr	r1, [pc, #92]	; (16a14 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   169b6:	4818      	ldr	r0, [pc, #96]	; (16a18 <hci_set_ad+0xe0>)
   169b8:	1ac9      	subs	r1, r1, r3
   169ba:	08c9      	lsrs	r1, r1, #3
   169bc:	0189      	lsls	r1, r1, #6
   169be:	f041 0101 	orr.w	r1, r1, #1
   169c2:	f009 fba3 	bl	2010c <log_0>
		net_buf_unref(buf);
   169c6:	4630      	mov	r0, r6
   169c8:	f005 fc18 	bl	1c1fc <net_buf_unref>
					return -EINVAL;
   169cc:	f06f 0015 	mvn.w	r0, #21
}
   169d0:	b003      	add	sp, #12
   169d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   169d6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   169da:	b2d7      	uxtb	r7, r2
   169dc:	1c79      	adds	r1, r7, #1
   169de:	f80b 1005 	strb.w	r1, [fp, r5]
   169e2:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   169e4:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   169e6:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   169ea:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   169ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
   169f2:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   169f4:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   169f6:	f00b fbf7 	bl	221e8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   169fa:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   169fc:	443d      	add	r5, r7
   169fe:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   16a00:	3301      	adds	r3, #1
   16a02:	f108 0808 	add.w	r8, r8, #8
   16a06:	e7b4      	b.n	16972 <hci_set_ad+0x3a>
		return -ENOBUFS;
   16a08:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16a0c:	e7e0      	b.n	169d0 <hci_set_ad+0x98>
   16a0e:	bf00      	nop
   16a10:	000256c4 	.word	0x000256c4
   16a14:	000256cc 	.word	0x000256cc
   16a18:	00027739 	.word	0x00027739

00016a1c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   16a1e:	4606      	mov	r6, r0
   16a20:	4b1e      	ldr	r3, [pc, #120]	; (16a9c <le_adv_start_add_conn+0x80>)
   16a22:	f816 2b09 	ldrb.w	r2, [r6], #9
   16a26:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{
   16a2a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16a2c:	2300      	movs	r3, #0
{
   16a2e:	4605      	mov	r5, r0
   16a30:	2207      	movs	r2, #7
   16a32:	460f      	mov	r7, r1
   16a34:	4630      	mov	r0, r6
   16a36:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16a38:	9300      	str	r3, [sp, #0]
   16a3a:	f8cd 3003 	str.w	r3, [sp, #3]
   16a3e:	f00b fbc3 	bl	221c8 <memcmp>
   16a42:	782a      	ldrb	r2, [r5, #0]
   16a44:	4604      	mov	r4, r0
   16a46:	b9a8      	cbnz	r0, 16a74 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   16a48:	4b15      	ldr	r3, [pc, #84]	; (16aa0 <le_adv_start_add_conn+0x84>)
   16a4a:	6818      	ldr	r0, [r3, #0]
   16a4c:	8899      	ldrh	r1, [r3, #4]
   16a4e:	9002      	str	r0, [sp, #8]
   16a50:	799b      	ldrb	r3, [r3, #6]
   16a52:	f8ad 100c 	strh.w	r1, [sp, #12]
   16a56:	4610      	mov	r0, r2
   16a58:	a902      	add	r1, sp, #8
   16a5a:	f88d 300e 	strb.w	r3, [sp, #14]
   16a5e:	f000 fdf5 	bl	1764c <bt_conn_add_le>
		if (!conn) {
   16a62:	4605      	mov	r5, r0
   16a64:	b1b8      	cbz	r0, 16a96 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   16a66:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   16a68:	f000 fe26 	bl	176b8 <bt_conn_set_state>
	*out_conn = conn;
   16a6c:	603d      	str	r5, [r7, #0]
	return 0;
}
   16a6e:	4620      	mov	r0, r4
   16a70:	b005      	add	sp, #20
   16a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   16a74:	4631      	mov	r1, r6
   16a76:	4610      	mov	r0, r2
   16a78:	f000 ff26 	bl	178c8 <bt_conn_exists_le>
   16a7c:	4604      	mov	r4, r0
   16a7e:	b938      	cbnz	r0, 16a90 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   16a80:	7828      	ldrb	r0, [r5, #0]
   16a82:	4631      	mov	r1, r6
   16a84:	f000 fde2 	bl	1764c <bt_conn_add_le>
	if (!conn) {
   16a88:	4605      	mov	r5, r0
   16a8a:	b120      	cbz	r0, 16a96 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   16a8c:	2105      	movs	r1, #5
   16a8e:	e7eb      	b.n	16a68 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   16a90:	f06f 0415 	mvn.w	r4, #21
   16a94:	e7eb      	b.n	16a6e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   16a96:	f06f 040b 	mvn.w	r4, #11
   16a9a:	e7e8      	b.n	16a6e <le_adv_start_add_conn+0x52>
   16a9c:	200002a0 	.word	0x200002a0
   16aa0:	000258ac 	.word	0x000258ac

00016aa4 <bt_le_ext_adv_foreach>:
{
   16aa4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   16aa6:	4801      	ldr	r0, [pc, #4]	; (16aac <bt_le_ext_adv_foreach+0x8>)
   16aa8:	4718      	bx	r3
   16aaa:	bf00      	nop
   16aac:	200002b8 	.word	0x200002b8

00016ab0 <bt_le_adv_lookup_legacy>:
}
   16ab0:	4800      	ldr	r0, [pc, #0]	; (16ab4 <bt_le_adv_lookup_legacy+0x4>)
   16ab2:	4770      	bx	lr
   16ab4:	200002b8 	.word	0x200002b8

00016ab8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   16ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   16abc:	690e      	ldr	r6, [r1, #16]
{
   16abe:	b08d      	sub	sp, #52	; 0x34
   16ac0:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   16ac2:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   16ac4:	ebb6 0b03 	subs.w	fp, r6, r3
{
   16ac8:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16aca:	4897      	ldr	r0, [pc, #604]	; (16d28 <bt_le_adv_start_legacy+0x270>)
	struct bt_conn *conn = NULL;
   16acc:	9305      	str	r3, [sp, #20]
{
   16ace:	4691      	mov	r9, r2
	bool dir_adv = (param->peer != NULL), scannable;
   16ad0:	bf18      	it	ne
   16ad2:	f04f 0b01 	movne.w	fp, #1
{
   16ad6:	460c      	mov	r4, r1
   16ad8:	f00b fe9f 	bl	2281a <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16adc:	0782      	lsls	r2, r0, #30
   16ade:	f140 8117 	bpl.w	16d10 <bt_le_adv_start_legacy+0x258>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   16ae2:	4608      	mov	r0, r1
   16ae4:	f7ff fee0 	bl	168a8 <valid_adv_param>
   16ae8:	b928      	cbnz	r0, 16af6 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   16aea:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   16aee:	4658      	mov	r0, fp
   16af0:	b00d      	add	sp, #52	; 0x34
   16af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   16af6:	4620      	mov	r0, r4
   16af8:	f00b fe6e 	bl	227d8 <bt_id_adv_random_addr_check>
   16afc:	4680      	mov	r8, r0
   16afe:	2800      	cmp	r0, #0
   16b00:	d0f3      	beq.n	16aea <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16b02:	f105 0710 	add.w	r7, r5, #16
   16b06:	4638      	mov	r0, r7
   16b08:	f00b fe87 	bl	2281a <atomic_get>
   16b0c:	0643      	lsls	r3, r0, #25
   16b0e:	f3c0 1180 	ubfx	r1, r0, #6, #1
   16b12:	f100 8100 	bmi.w	16d16 <bt_le_adv_start_legacy+0x25e>
	(void)memset(&set_param, 0, sizeof(set_param));
   16b16:	220f      	movs	r2, #15
   16b18:	a808      	add	r0, sp, #32
   16b1a:	f00b fb90 	bl	2223e <memset>
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b1e:	6861      	ldr	r1, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   16b20:	68a3      	ldr	r3, [r4, #8]
   16b22:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b26:	4608      	mov	r0, r1
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   16b28:	68e3      	ldr	r3, [r4, #12]
   16b2a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b2e:	f00b fe65 	bl	227fc <get_adv_channel_map>
	} else if ((options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) &&
   16b32:	f001 03c0 	and.w	r3, r1, #192	; 0xc0
   16b36:	2bc0      	cmp	r3, #192	; 0xc0
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b38:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	} else if ((options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) &&
   16b3c:	d073      	beq.n	16c26 <bt_le_adv_start_legacy+0x16e>
	} else if (options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) {
   16b3e:	0648      	lsls	r0, r1, #25
   16b40:	d473      	bmi.n	16c2a <bt_le_adv_start_legacy+0x172>
		return BT_LE_ADV_FP_NO_WHITELIST;
   16b42:	f011 0f80 	tst.w	r1, #128	; 0x80
   16b46:	bf14      	ite	ne
   16b48:	2302      	movne	r3, #2
   16b4a:	2300      	moveq	r3, #0
	if (adv->id != param->id) {
   16b4c:	782a      	ldrb	r2, [r5, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   16b4e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   16b52:	7823      	ldrb	r3, [r4, #0]
   16b54:	429a      	cmp	r2, r3
   16b56:	d004      	beq.n	16b62 <bt_le_adv_start_legacy+0xaa>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16b58:	4873      	ldr	r0, [pc, #460]	; (16d28 <bt_le_adv_start_legacy+0x270>)
   16b5a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   16b5e:	f00b fe62 	bl	22826 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   16b62:	4a72      	ldr	r2, [pc, #456]	; (16d2c <bt_le_adv_start_legacy+0x274>)
	adv->id = param->id;
   16b64:	7823      	ldrb	r3, [r4, #0]
   16b66:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   16b68:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   16b6c:	6861      	ldr	r1, [r4, #4]
   16b6e:	465a      	mov	r2, fp
   16b70:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   16b74:	4628      	mov	r0, r5
   16b76:	f7ff fe2b 	bl	167d0 <bt_id_set_adv_own_addr>
	if (err) {
   16b7a:	4683      	mov	fp, r0
   16b7c:	2800      	cmp	r0, #0
   16b7e:	d1b6      	bne.n	16aee <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   16b80:	f105 0009 	add.w	r0, r5, #9
   16b84:	2e00      	cmp	r6, #0
   16b86:	d052      	beq.n	16c2e <bt_le_adv_start_legacy+0x176>
	memcpy(dst, src, sizeof(*dst));
   16b88:	6921      	ldr	r1, [r4, #16]
   16b8a:	2207      	movs	r2, #7
   16b8c:	f00b fb2c 	bl	221e8 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16b90:	6860      	ldr	r0, [r4, #4]
   16b92:	07c1      	lsls	r1, r0, #31
   16b94:	d554      	bpl.n	16c40 <bt_le_adv_start_legacy+0x188>
		if (dir_adv) {
   16b96:	2e00      	cmp	r6, #0
   16b98:	d04f      	beq.n	16c3a <bt_le_adv_start_legacy+0x182>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   16b9a:	f010 0f10 	tst.w	r0, #16
   16b9e:	bf14      	ite	ne
   16ba0:	2304      	movne	r3, #4
   16ba2:	2301      	moveq	r3, #1
   16ba4:	6921      	ldr	r1, [r4, #16]
   16ba6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16baa:	2207      	movs	r2, #7
   16bac:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   16bb0:	f00b fb1a 	bl	221e8 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   16bb4:	210f      	movs	r1, #15
   16bb6:	f242 0006 	movw	r0, #8198	; 0x2006
   16bba:	f7fe fb55 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   16bbe:	4683      	mov	fp, r0
   16bc0:	2800      	cmp	r0, #0
   16bc2:	f000 80ab 	beq.w	16d1c <bt_le_adv_start_legacy+0x264>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16bc6:	220f      	movs	r2, #15
   16bc8:	a908      	add	r1, sp, #32
   16bca:	3008      	adds	r0, #8
   16bcc:	f00d fc75 	bl	244ba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   16bd0:	2200      	movs	r2, #0
   16bd2:	4659      	mov	r1, fp
   16bd4:	f242 0006 	movw	r0, #8198	; 0x2006
   16bd8:	f7fe fca2 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   16bdc:	2800      	cmp	r0, #0
   16bde:	f040 80a0 	bne.w	16d22 <bt_le_adv_start_legacy+0x26a>
	if (!dir_adv) {
   16be2:	2e00      	cmp	r6, #0
   16be4:	d038      	beq.n	16c58 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16be6:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16be8:	07da      	lsls	r2, r3, #31
   16bea:	d449      	bmi.n	16c80 <bt_le_adv_start_legacy+0x1c8>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16bec:	2101      	movs	r1, #1
   16bee:	4628      	mov	r0, r5
   16bf0:	f00b fec0 	bl	22974 <bt_le_adv_set_enable_legacy>
	if (err) {
   16bf4:	4683      	mov	fp, r0
   16bf6:	2800      	cmp	r0, #0
   16bf8:	f000 8083 	beq.w	16d02 <bt_le_adv_start_legacy+0x24a>
   16bfc:	4b4c      	ldr	r3, [pc, #304]	; (16d30 <bt_le_adv_start_legacy+0x278>)
   16bfe:	494d      	ldr	r1, [pc, #308]	; (16d34 <bt_le_adv_start_legacy+0x27c>)
		BT_ERR("Failed to start advertiser");
   16c00:	484d      	ldr	r0, [pc, #308]	; (16d38 <bt_le_adv_start_legacy+0x280>)
   16c02:	1ac9      	subs	r1, r1, r3
   16c04:	08c9      	lsrs	r1, r1, #3
   16c06:	0189      	lsls	r1, r1, #6
   16c08:	f041 0101 	orr.w	r1, r1, #1
   16c0c:	f009 fa7e 	bl	2010c <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16c10:	9805      	ldr	r0, [sp, #20]
   16c12:	2800      	cmp	r0, #0
   16c14:	f43f af6b 	beq.w	16aee <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16c18:	2100      	movs	r1, #0
   16c1a:	f000 fd4d 	bl	176b8 <bt_conn_set_state>
			bt_conn_unref(conn);
   16c1e:	9805      	ldr	r0, [sp, #20]
   16c20:	f00b ffbb 	bl	22b9a <bt_conn_unref>
   16c24:	e763      	b.n	16aee <bt_le_adv_start_legacy+0x36>
		return BT_LE_ADV_FP_WHITELIST_BOTH;
   16c26:	2303      	movs	r3, #3
   16c28:	e790      	b.n	16b4c <bt_le_adv_start_legacy+0x94>
		return BT_LE_ADV_FP_WHITELIST_SCAN_REQ;
   16c2a:	2301      	movs	r3, #1
   16c2c:	e78e      	b.n	16b4c <bt_le_adv_start_legacy+0x94>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   16c2e:	9606      	str	r6, [sp, #24]
   16c30:	2207      	movs	r2, #7
   16c32:	f8cd 601b 	str.w	r6, [sp, #27]
   16c36:	a906      	add	r1, sp, #24
   16c38:	e7a8      	b.n	16b8c <bt_le_adv_start_legacy+0xd4>
			set_param.type = BT_HCI_ADV_IND;
   16c3a:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
   16c3e:	e7b9      	b.n	16bb4 <bt_le_adv_start_legacy+0xfc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   16c40:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16c42:	b933      	cbnz	r3, 16c52 <bt_le_adv_start_legacy+0x19a>
   16c44:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   16c48:	f1c8 0303 	rsb	r3, r8, #3
   16c4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16c50:	e7b0      	b.n	16bb4 <bt_le_adv_start_legacy+0xfc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   16c52:	f04f 0801 	mov.w	r8, #1
   16c56:	e7f7      	b.n	16c48 <bt_le_adv_start_legacy+0x190>
   16c58:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   16c5a:	f3c3 4280 	ubfx	r2, r3, #18, #1
   16c5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   16c62:	e9cd 8301 	strd	r8, r3, [sp, #4]
   16c66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16c68:	9203      	str	r2, [sp, #12]
   16c6a:	9300      	str	r3, [sp, #0]
   16c6c:	4652      	mov	r2, sl
   16c6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16c70:	4649      	mov	r1, r9
   16c72:	4628      	mov	r0, r5
   16c74:	f00b fdfd 	bl	22872 <le_adv_update.constprop.0>
		if (err) {
   16c78:	4683      	mov	fp, r0
   16c7a:	2800      	cmp	r0, #0
   16c7c:	d0b3      	beq.n	16be6 <bt_le_adv_start_legacy+0x12e>
   16c7e:	e736      	b.n	16aee <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   16c80:	a905      	add	r1, sp, #20
   16c82:	4628      	mov	r0, r5
   16c84:	f7ff feca 	bl	16a1c <le_adv_start_add_conn>
		if (err) {
   16c88:	4683      	mov	fp, r0
   16c8a:	2800      	cmp	r0, #0
   16c8c:	d0ae      	beq.n	16bec <bt_le_adv_start_legacy+0x134>
			if (err == -ENOMEM && !dir_adv &&
   16c8e:	f110 0f0c 	cmn.w	r0, #12
   16c92:	f47f af2c 	bne.w	16aee <bt_le_adv_start_legacy+0x36>
   16c96:	2e00      	cmp	r6, #0
   16c98:	f47f af29 	bne.w	16aee <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   16c9c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   16c9e:	079b      	lsls	r3, r3, #30
   16ca0:	f53f af25 	bmi.w	16aee <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16ca4:	6860      	ldr	r0, [r4, #4]
   16ca6:	f080 0002 	eor.w	r0, r0, #2
   16caa:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   16cae:	f00b 0201 	and.w	r2, fp, #1
   16cb2:	210c      	movs	r1, #12
   16cb4:	4638      	mov	r0, r7
   16cb6:	f00b fdc5 	bl	22844 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   16cba:	6862      	ldr	r2, [r4, #4]
   16cbc:	2107      	movs	r1, #7
   16cbe:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   16cc2:	4638      	mov	r0, r7
   16cc4:	f00b fdbe 	bl	22844 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   16cc8:	6862      	ldr	r2, [r4, #4]
   16cca:	2112      	movs	r1, #18
   16ccc:	f3c2 4280 	ubfx	r2, r2, #18, #1
   16cd0:	4638      	mov	r0, r7
   16cd2:	f00b fdb7 	bl	22844 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   16cd6:	6862      	ldr	r2, [r4, #4]
   16cd8:	2108      	movs	r1, #8
   16cda:	f002 0201 	and.w	r2, r2, #1
   16cde:	4638      	mov	r0, r7
   16ce0:	f00b fdb0 	bl	22844 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   16ce4:	4642      	mov	r2, r8
   16ce6:	2109      	movs	r1, #9
   16ce8:	4638      	mov	r0, r7
   16cea:	f00b fdab 	bl	22844 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   16cee:	6862      	ldr	r2, [r4, #4]
   16cf0:	210b      	movs	r1, #11
   16cf2:	f3c2 0280 	ubfx	r2, r2, #2, #1
   16cf6:	4638      	mov	r0, r7
   16cf8:	f00b fda4 	bl	22844 <atomic_set_bit_to>
	return 0;
   16cfc:	f04f 0b00 	mov.w	fp, #0
   16d00:	e6f5      	b.n	16aee <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16d02:	9805      	ldr	r0, [sp, #20]
   16d04:	b108      	cbz	r0, 16d0a <bt_le_adv_start_legacy+0x252>
		bt_conn_unref(conn);
   16d06:	f00b ff48 	bl	22b9a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16d0a:	2e00      	cmp	r6, #0
   16d0c:	d1cf      	bne.n	16cae <bt_le_adv_start_legacy+0x1f6>
   16d0e:	e7c9      	b.n	16ca4 <bt_le_adv_start_legacy+0x1ec>
		return -EAGAIN;
   16d10:	f06f 0b0a 	mvn.w	fp, #10
   16d14:	e6eb      	b.n	16aee <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   16d16:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   16d1a:	e6e8      	b.n	16aee <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   16d1c:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   16d20:	e6e5      	b.n	16aee <bt_le_adv_start_legacy+0x36>
   16d22:	4683      	mov	fp, r0
   16d24:	e6e3      	b.n	16aee <bt_le_adv_start_legacy+0x36>
   16d26:	bf00      	nop
   16d28:	20000338 	.word	0x20000338
   16d2c:	200002a0 	.word	0x200002a0
   16d30:	000256c4 	.word	0x000256c4
   16d34:	000256cc 	.word	0x000256cc
   16d38:	00027752 	.word	0x00027752

00016d3c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   16d3c:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16d3e:	9c04      	ldr	r4, [sp, #16]
   16d40:	e9cd 3400 	strd	r3, r4, [sp]
   16d44:	4613      	mov	r3, r2
   16d46:	460a      	mov	r2, r1
   16d48:	4601      	mov	r1, r0
   16d4a:	4802      	ldr	r0, [pc, #8]	; (16d54 <bt_le_adv_start+0x18>)
   16d4c:	f7ff feb4 	bl	16ab8 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
   16d50:	b002      	add	sp, #8
   16d52:	bd10      	pop	{r4, pc}
   16d54:	200002b8 	.word	0x200002b8

00016d58 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16d5a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   16d5e:	481e      	ldr	r0, [pc, #120]	; (16dd8 <bt_le_adv_stop+0x80>)
   16d60:	f00b fd61 	bl	22826 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16d64:	481c      	ldr	r0, [pc, #112]	; (16dd8 <bt_le_adv_stop+0x80>)
   16d66:	f00b fd58 	bl	2281a <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16d6a:	0642      	lsls	r2, r0, #25
   16d6c:	f3c0 1380 	ubfx	r3, r0, #6, #1
   16d70:	d530      	bpl.n	16dd4 <bt_le_adv_stop+0x7c>
   16d72:	4819      	ldr	r0, [pc, #100]	; (16dd8 <bt_le_adv_stop+0x80>)
   16d74:	f00b fd51 	bl	2281a <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16d78:	05c3      	lsls	r3, r0, #23
   16d7a:	d521      	bpl.n	16dc0 <bt_le_adv_stop+0x68>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16d7c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16d7e:	4817      	ldr	r0, [pc, #92]	; (16ddc <bt_le_adv_stop+0x84>)
   16d80:	9300      	str	r3, [sp, #0]
   16d82:	2207      	movs	r2, #7
   16d84:	4669      	mov	r1, sp
   16d86:	f8cd 3003 	str.w	r3, [sp, #3]
   16d8a:	f00b fa1d 	bl	221c8 <memcmp>
   16d8e:	4b14      	ldr	r3, [pc, #80]	; (16de0 <bt_le_adv_stop+0x88>)
   16d90:	b9e0      	cbnz	r0, 16dcc <bt_le_adv_stop+0x74>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   16d92:	4a14      	ldr	r2, [pc, #80]	; (16de4 <bt_le_adv_stop+0x8c>)
   16d94:	8891      	ldrh	r1, [r2, #4]
   16d96:	6810      	ldr	r0, [r2, #0]
   16d98:	7992      	ldrb	r2, [r2, #6]
   16d9a:	f8ad 100c 	strh.w	r1, [sp, #12]
   16d9e:	f88d 200e 	strb.w	r2, [sp, #14]
   16da2:	9002      	str	r0, [sp, #8]
   16da4:	2204      	movs	r2, #4
   16da6:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16da8:	7e18      	ldrb	r0, [r3, #24]
   16daa:	f000 fdb3 	bl	17914 <bt_conn_lookup_state_le>
   16dae:	4604      	mov	r4, r0
	if (conn) {
   16db0:	b130      	cbz	r0, 16dc0 <bt_le_adv_stop+0x68>
		conn->err = status;
   16db2:	2100      	movs	r1, #0
   16db4:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16db6:	f000 fc7f 	bl	176b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   16dba:	4620      	mov	r0, r4
   16dbc:	f00b feed 	bl	22b9a <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   16dc0:	4809      	ldr	r0, [pc, #36]	; (16de8 <bt_le_adv_stop+0x90>)
   16dc2:	2100      	movs	r1, #0
   16dc4:	f00b fdd6 	bl	22974 <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16dc8:	b004      	add	sp, #16
   16dca:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16dcc:	2205      	movs	r2, #5
   16dce:	f103 0121 	add.w	r1, r3, #33	; 0x21
   16dd2:	e7e9      	b.n	16da8 <bt_le_adv_stop+0x50>
		return 0;
   16dd4:	4618      	mov	r0, r3
   16dd6:	e7f7      	b.n	16dc8 <bt_le_adv_stop+0x70>
   16dd8:	200002c8 	.word	0x200002c8
   16ddc:	200002c1 	.word	0x200002c1
   16de0:	200002a0 	.word	0x200002a0
   16de4:	000258ac 	.word	0x000258ac
   16de8:	200002b8 	.word	0x200002b8

00016dec <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   16dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16dee:	4822      	ldr	r0, [pc, #136]	; (16e78 <bt_le_adv_resume+0x8c>)
   16df0:	4c21      	ldr	r4, [pc, #132]	; (16e78 <bt_le_adv_resume+0x8c>)
   16df2:	f00b fd12 	bl	2281a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   16df6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   16dfa:	d03a      	beq.n	16e72 <bt_le_adv_resume+0x86>
   16dfc:	4620      	mov	r0, r4
   16dfe:	f00b fd0c 	bl	2281a <atomic_get>
   16e02:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16e04:	f3c0 1580 	ubfx	r5, r0, #6, #1
   16e08:	d433      	bmi.n	16e72 <bt_le_adv_resume+0x86>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16e0a:	4620      	mov	r0, r4
   16e0c:	f00b fd05 	bl	2281a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   16e10:	05c2      	lsls	r2, r0, #23
   16e12:	d52e      	bpl.n	16e72 <bt_le_adv_resume+0x86>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   16e14:	a901      	add	r1, sp, #4
   16e16:	f1a4 0010 	sub.w	r0, r4, #16
   16e1a:	f7ff fdff 	bl	16a1c <le_adv_start_add_conn>
	if (err) {
   16e1e:	bb40      	cbnz	r0, 16e72 <bt_le_adv_resume+0x86>
   16e20:	4620      	mov	r0, r4
   16e22:	f00b fcfa 	bl	2281a <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16e26:	0503      	lsls	r3, r0, #20
   16e28:	d403      	bmi.n	16e32 <bt_le_adv_resume+0x46>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
   16e2a:	f1a4 0010 	sub.w	r0, r4, #16
   16e2e:	f00b fcd0 	bl	227d2 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16e32:	4812      	ldr	r0, [pc, #72]	; (16e7c <bt_le_adv_resume+0x90>)
   16e34:	2101      	movs	r1, #1
   16e36:	f00b fd9d 	bl	22974 <bt_le_adv_set_enable_legacy>
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   16e3a:	b150      	cbz	r0, 16e52 <bt_le_adv_resume+0x66>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16e3c:	9801      	ldr	r0, [sp, #4]
   16e3e:	2100      	movs	r1, #0
   16e40:	f000 fc3a 	bl	176b8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16e44:	480c      	ldr	r0, [pc, #48]	; (16e78 <bt_le_adv_resume+0x8c>)
   16e46:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   16e4a:	f00b fcec 	bl	22826 <atomic_and>
	return (old & mask) != 0;
   16e4e:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   16e52:	9801      	ldr	r0, [sp, #4]
   16e54:	f00b fea1 	bl	22b9a <bt_conn_unref>
	if (persist_paused) {
   16e58:	b15d      	cbz	r5, 16e72 <bt_le_adv_resume+0x86>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16e5a:	f3bf 8f5b 	dmb	ish
   16e5e:	e854 3f00 	ldrex	r3, [r4]
   16e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   16e66:	e844 3200 	strex	r2, r3, [r4]
   16e6a:	2a00      	cmp	r2, #0
   16e6c:	d1f7      	bne.n	16e5e <bt_le_adv_resume+0x72>
   16e6e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   16e72:	b003      	add	sp, #12
   16e74:	bd30      	pop	{r4, r5, pc}
   16e76:	bf00      	nop
   16e78:	200002c8 	.word	0x200002c8
   16e7c:	200002b8 	.word	0x200002b8

00016e80 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   16e80:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
   16e82:	4904      	ldr	r1, [pc, #16]	; (16e94 <bt_pub_key_is_debug+0x14>)
   16e84:	2240      	movs	r2, #64	; 0x40
   16e86:	f00b f99f 	bl	221c8 <memcmp>
}
   16e8a:	fab0 f080 	clz	r0, r0
   16e8e:	0940      	lsrs	r0, r0, #5
   16e90:	bd08      	pop	{r3, pc}
   16e92:	bf00      	nop
   16e94:	00027802 	.word	0x00027802

00016e98 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   16e98:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   16e9a:	4b44      	ldr	r3, [pc, #272]	; (16fac <bt_pub_key_gen+0x114>)
   16e9c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   16ea0:	f003 0306 	and.w	r3, r3, #6
   16ea4:	2b06      	cmp	r3, #6
   16ea6:	d00d      	beq.n	16ec4 <bt_pub_key_gen+0x2c>
   16ea8:	4b41      	ldr	r3, [pc, #260]	; (16fb0 <bt_pub_key_gen+0x118>)
   16eaa:	4942      	ldr	r1, [pc, #264]	; (16fb4 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   16eac:	4842      	ldr	r0, [pc, #264]	; (16fb8 <bt_pub_key_gen+0x120>)
   16eae:	1ac9      	subs	r1, r1, r3
   16eb0:	08c9      	lsrs	r1, r1, #3
   16eb2:	0189      	lsls	r1, r1, #6
   16eb4:	f041 0102 	orr.w	r1, r1, #2
   16eb8:	f009 f928 	bl	2010c <log_0>
		return -ENOTSUP;
   16ebc:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   16ec0:	4630      	mov	r0, r6
   16ec2:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   16ec4:	2800      	cmp	r0, #0
   16ec6:	d06d      	beq.n	16fa4 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16ec8:	4d3c      	ldr	r5, [pc, #240]	; (16fbc <bt_pub_key_gen+0x124>)
   16eca:	682a      	ldr	r2, [r5, #0]
   16ecc:	b10a      	cbz	r2, 16ed2 <bt_pub_key_gen+0x3a>
   16ece:	1f13      	subs	r3, r2, #4
   16ed0:	b9bb      	cbnz	r3, 16f02 <bt_pub_key_gen+0x6a>
	parent->next = child;
   16ed2:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   16ed4:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   16ed6:	1d03      	adds	r3, r0, #4
	list->head = node;
   16ed8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   16eda:	b902      	cbnz	r2, 16ede <bt_pub_key_gen+0x46>
	list->tail = node;
   16edc:	606b      	str	r3, [r5, #4]
   16ede:	4c38      	ldr	r4, [pc, #224]	; (16fc0 <bt_pub_key_gen+0x128>)
   16ee0:	f3bf 8f5b 	dmb	ish
   16ee4:	e854 2f00 	ldrex	r2, [r4]
   16ee8:	f042 0310 	orr.w	r3, r2, #16
   16eec:	e844 3100 	strex	r1, r3, [r4]
   16ef0:	2900      	cmp	r1, #0
   16ef2:	d1f7      	bne.n	16ee4 <bt_pub_key_gen+0x4c>
   16ef4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16ef8:	f012 0210 	ands.w	r2, r2, #16
   16efc:	d017      	beq.n	16f2e <bt_pub_key_gen+0x96>
		return 0;
   16efe:	2600      	movs	r6, #0
   16f00:	e7de      	b.n	16ec0 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   16f02:	4298      	cmp	r0, r3
   16f04:	d10c      	bne.n	16f20 <bt_pub_key_gen+0x88>
   16f06:	4b2a      	ldr	r3, [pc, #168]	; (16fb0 <bt_pub_key_gen+0x118>)
   16f08:	492a      	ldr	r1, [pc, #168]	; (16fb4 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
   16f0a:	482e      	ldr	r0, [pc, #184]	; (16fc4 <bt_pub_key_gen+0x12c>)
   16f0c:	1ac9      	subs	r1, r1, r3
   16f0e:	08c9      	lsrs	r1, r1, #3
   16f10:	0189      	lsls	r1, r1, #6
   16f12:	f041 0102 	orr.w	r1, r1, #2
   16f16:	f009 f8f9 	bl	2010c <log_0>
			return -EALREADY;
   16f1a:	f06f 0677 	mvn.w	r6, #119	; 0x77
   16f1e:	e7cf      	b.n	16ec0 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16f20:	1d19      	adds	r1, r3, #4
   16f22:	d0d6      	beq.n	16ed2 <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16f24:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f26:	2b00      	cmp	r3, #0
   16f28:	d0d3      	beq.n	16ed2 <bt_pub_key_gen+0x3a>
   16f2a:	3b04      	subs	r3, #4
   16f2c:	e7d0      	b.n	16ed0 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f2e:	f3bf 8f5b 	dmb	ish
   16f32:	e854 3f00 	ldrex	r3, [r4]
   16f36:	f023 0308 	bic.w	r3, r3, #8
   16f3a:	e844 3100 	strex	r1, r3, [r4]
   16f3e:	2900      	cmp	r1, #0
   16f40:	d1f7      	bne.n	16f32 <bt_pub_key_gen+0x9a>
   16f42:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   16f46:	4611      	mov	r1, r2
   16f48:	f242 0025 	movw	r0, #8229	; 0x2025
   16f4c:	f7fe fae8 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   16f50:	4606      	mov	r6, r0
   16f52:	2800      	cmp	r0, #0
   16f54:	d0d3      	beq.n	16efe <bt_pub_key_gen+0x66>
   16f56:	4b16      	ldr	r3, [pc, #88]	; (16fb0 <bt_pub_key_gen+0x118>)
   16f58:	4916      	ldr	r1, [pc, #88]	; (16fb4 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
   16f5a:	481b      	ldr	r0, [pc, #108]	; (16fc8 <bt_pub_key_gen+0x130>)
   16f5c:	1ac9      	subs	r1, r1, r3
   16f5e:	08c9      	lsrs	r1, r1, #3
   16f60:	0189      	lsls	r1, r1, #6
   16f62:	f041 0101 	orr.w	r1, r1, #1
   16f66:	f009 f8d1 	bl	2010c <log_0>
   16f6a:	f3bf 8f5b 	dmb	ish
   16f6e:	e854 3f00 	ldrex	r3, [r4]
   16f72:	f023 0310 	bic.w	r3, r3, #16
   16f76:	e844 3200 	strex	r2, r3, [r4]
   16f7a:	2a00      	cmp	r2, #0
   16f7c:	d1f7      	bne.n	16f6e <bt_pub_key_gen+0xd6>
   16f7e:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f82:	682c      	ldr	r4, [r5, #0]
   16f84:	b91c      	cbnz	r4, 16f8e <bt_pub_key_gen+0xf6>
	list->head = NULL;
   16f86:	2300      	movs	r3, #0
	list->tail = NULL;
   16f88:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   16f8c:	e798      	b.n	16ec0 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f8e:	3c04      	subs	r4, #4
   16f90:	2c00      	cmp	r4, #0
   16f92:	d0f8      	beq.n	16f86 <bt_pub_key_gen+0xee>
			if (cb->func) {
   16f94:	6823      	ldr	r3, [r4, #0]
   16f96:	b10b      	cbz	r3, 16f9c <bt_pub_key_gen+0x104>
				cb->func(NULL);
   16f98:	2000      	movs	r0, #0
   16f9a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16f9c:	1d23      	adds	r3, r4, #4
   16f9e:	d0f2      	beq.n	16f86 <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16fa0:	6864      	ldr	r4, [r4, #4]
	return node->next;
   16fa2:	e7ef      	b.n	16f84 <bt_pub_key_gen+0xec>
		return -EINVAL;
   16fa4:	f06f 0615 	mvn.w	r6, #21
   16fa8:	e78a      	b.n	16ec0 <bt_pub_key_gen+0x28>
   16faa:	bf00      	nop
   16fac:	200002a0 	.word	0x200002a0
   16fb0:	000256c4 	.word	0x000256c4
   16fb4:	000256f4 	.word	0x000256f4
   16fb8:	00027774 	.word	0x00027774
   16fbc:	20002ecc 	.word	0x20002ecc
   16fc0:	20000338 	.word	0x20000338
   16fc4:	00027793 	.word	0x00027793
   16fc8:	000277af 	.word	0x000277af

00016fcc <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16fcc:	4b05      	ldr	r3, [pc, #20]	; (16fe4 <bt_pub_key_get+0x18>)
   16fce:	f3bf 8f5b 	dmb	ish
   16fd2:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   16fd4:	4804      	ldr	r0, [pc, #16]	; (16fe8 <bt_pub_key_get+0x1c>)
   16fd6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16fda:	f013 0f08 	tst.w	r3, #8
}
   16fde:	bf08      	it	eq
   16fe0:	2000      	moveq	r0, #0
   16fe2:	4770      	bx	lr
   16fe4:	20000338 	.word	0x20000338
   16fe8:	2000345b 	.word	0x2000345b

00016fec <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   16fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   16fee:	4d25      	ldr	r5, [pc, #148]	; (17084 <bt_dh_key_gen+0x98>)
   16ff0:	682b      	ldr	r3, [r5, #0]
   16ff2:	428b      	cmp	r3, r1
{
   16ff4:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   16ff6:	d03f      	beq.n	17078 <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16ff8:	b11b      	cbz	r3, 17002 <bt_dh_key_gen+0x16>
		return -EBUSY;
   16ffa:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   16ffe:	4620      	mov	r0, r4
   17000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17002:	4b21      	ldr	r3, [pc, #132]	; (17088 <bt_dh_key_gen+0x9c>)
   17004:	f3bf 8f5b 	dmb	ish
   17008:	681a      	ldr	r2, [r3, #0]
   1700a:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1700e:	f3c2 1700 	ubfx	r7, r2, #4, #1
   17012:	06d2      	lsls	r2, r2, #27
   17014:	d4f1      	bmi.n	16ffa <bt_dh_key_gen+0xe>
   17016:	f3bf 8f5b 	dmb	ish
   1701a:	681b      	ldr	r3, [r3, #0]
   1701c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17020:	071b      	lsls	r3, r3, #28
   17022:	d52c      	bpl.n	1707e <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
   17024:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   17026:	f242 0026 	movw	r0, #8230	; 0x2026
   1702a:	2140      	movs	r1, #64	; 0x40
   1702c:	f7fe f91c 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   17030:	4604      	mov	r4, r0
   17032:	b1f0      	cbz	r0, 17072 <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
   17034:	2140      	movs	r1, #64	; 0x40
   17036:	3008      	adds	r0, #8
   17038:	f00d fa39 	bl	244ae <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   1703c:	2240      	movs	r2, #64	; 0x40
   1703e:	4631      	mov	r1, r6
   17040:	f00b f8d2 	bl	221e8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   17044:	4621      	mov	r1, r4
   17046:	463a      	mov	r2, r7
   17048:	f242 0026 	movw	r0, #8230	; 0x2026
   1704c:	f7fe fa68 	bl	15520 <bt_hci_cmd_send_sync>
	if (err) {
   17050:	4604      	mov	r4, r0
   17052:	2800      	cmp	r0, #0
   17054:	d0d3      	beq.n	16ffe <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   17056:	2300      	movs	r3, #0
   17058:	602b      	str	r3, [r5, #0]
   1705a:	4a0c      	ldr	r2, [pc, #48]	; (1708c <bt_dh_key_gen+0xa0>)
   1705c:	4b0c      	ldr	r3, [pc, #48]	; (17090 <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1705e:	480d      	ldr	r0, [pc, #52]	; (17094 <bt_dh_key_gen+0xa8>)
   17060:	1ad2      	subs	r2, r2, r3
   17062:	08d2      	lsrs	r2, r2, #3
   17064:	0192      	lsls	r2, r2, #6
   17066:	f042 0202 	orr.w	r2, r2, #2
   1706a:	4621      	mov	r1, r4
   1706c:	f009 f85b 	bl	20126 <log_1>
		return err;
   17070:	e7c5      	b.n	16ffe <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   17072:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17076:	e7ee      	b.n	17056 <bt_dh_key_gen+0x6a>
		return -EALREADY;
   17078:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1707c:	e7bf      	b.n	16ffe <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   1707e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   17082:	e7bc      	b.n	16ffe <bt_dh_key_gen+0x12>
   17084:	20002ec8 	.word	0x20002ec8
   17088:	20000338 	.word	0x20000338
   1708c:	000256f4 	.word	0x000256f4
   17090:	000256c4 	.word	0x000256c4
   17094:	000277d9 	.word	0x000277d9

00017098 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   17098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1709a:	4c1d      	ldr	r4, [pc, #116]	; (17110 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1709c:	6886      	ldr	r6, [r0, #8]
   1709e:	f3bf 8f5b 	dmb	ish
   170a2:	e854 3f00 	ldrex	r3, [r4]
   170a6:	f023 0310 	bic.w	r3, r3, #16
   170aa:	e844 3200 	strex	r2, r3, [r4]
   170ae:	2a00      	cmp	r2, #0
   170b0:	d1f7      	bne.n	170a2 <bt_hci_evt_le_pkey_complete+0xa>
   170b2:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   170b6:	7833      	ldrb	r3, [r6, #0]
   170b8:	b983      	cbnz	r3, 170dc <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, 64);
   170ba:	4816      	ldr	r0, [pc, #88]	; (17114 <bt_hci_evt_le_pkey_complete+0x7c>)
   170bc:	2240      	movs	r2, #64	; 0x40
   170be:	1c71      	adds	r1, r6, #1
   170c0:	f00b f892 	bl	221e8 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   170c4:	f3bf 8f5b 	dmb	ish
   170c8:	e854 3f00 	ldrex	r3, [r4]
   170cc:	f043 0308 	orr.w	r3, r3, #8
   170d0:	e844 3200 	strex	r2, r3, [r4]
   170d4:	2a00      	cmp	r2, #0
   170d6:	d1f7      	bne.n	170c8 <bt_hci_evt_le_pkey_complete+0x30>
   170d8:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   170dc:	4d0e      	ldr	r5, [pc, #56]	; (17118 <bt_hci_evt_le_pkey_complete+0x80>)
   170de:	682c      	ldr	r4, [r5, #0]
   170e0:	b91c      	cbnz	r4, 170ea <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   170e2:	2300      	movs	r3, #0
	list->tail = NULL;
   170e4:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   170e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   170ea:	4f0a      	ldr	r7, [pc, #40]	; (17114 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   170ec:	3c04      	subs	r4, #4
   170ee:	2c00      	cmp	r4, #0
   170f0:	d0f7      	beq.n	170e2 <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   170f2:	6823      	ldr	r3, [r4, #0]
   170f4:	b12b      	cbz	r3, 17102 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   170f6:	7832      	ldrb	r2, [r6, #0]
   170f8:	2a00      	cmp	r2, #0
   170fa:	bf0c      	ite	eq
   170fc:	4638      	moveq	r0, r7
   170fe:	2000      	movne	r0, #0
   17100:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   17102:	1d23      	adds	r3, r4, #4
   17104:	d0ed      	beq.n	170e2 <bt_hci_evt_le_pkey_complete+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17106:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17108:	2c00      	cmp	r4, #0
   1710a:	d0ea      	beq.n	170e2 <bt_hci_evt_le_pkey_complete+0x4a>
   1710c:	3c04      	subs	r4, #4
   1710e:	e7ee      	b.n	170ee <bt_hci_evt_le_pkey_complete+0x56>
   17110:	20000338 	.word	0x20000338
   17114:	2000345b 	.word	0x2000345b
   17118:	20002ecc 	.word	0x20002ecc

0001711c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1711c:	4905      	ldr	r1, [pc, #20]	; (17134 <bt_hci_evt_le_dhkey_complete+0x18>)
   1711e:	680b      	ldr	r3, [r1, #0]
   17120:	b133      	cbz	r3, 17130 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   17122:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   17124:	2000      	movs	r0, #0
   17126:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   17128:	7811      	ldrb	r1, [r2, #0]
   1712a:	b901      	cbnz	r1, 1712e <bt_hci_evt_le_dhkey_complete+0x12>
   1712c:	1c50      	adds	r0, r2, #1
   1712e:	4718      	bx	r3
	}
}
   17130:	4770      	bx	lr
   17132:	bf00      	nop
   17134:	20002ec8 	.word	0x20002ec8

00017138 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   17138:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1713a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1713e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   17140:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   17142:	4801      	ldr	r0, [pc, #4]	; (17148 <tx_free+0x10>)
   17144:	f00d bd26 	b.w	24b94 <k_queue_append>
   17148:	200008d0 	.word	0x200008d0

0001714c <notify_connected>:
{
   1714c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   1714e:	4b09      	ldr	r3, [pc, #36]	; (17174 <notify_connected+0x28>)
   17150:	681d      	ldr	r5, [r3, #0]
{
   17152:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17154:	7b21      	ldrb	r1, [r4, #12]
   17156:	b92d      	cbnz	r5, 17164 <notify_connected+0x18>
	if (!conn->err) {
   17158:	b951      	cbnz	r1, 17170 <notify_connected+0x24>
		bt_gatt_connected(conn);
   1715a:	4620      	mov	r0, r4
}
   1715c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   17160:	f003 b808 	b.w	1a174 <bt_gatt_connected>
		if (cb->connected) {
   17164:	682b      	ldr	r3, [r5, #0]
   17166:	b10b      	cbz	r3, 1716c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   17168:	4620      	mov	r0, r4
   1716a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1716c:	69ad      	ldr	r5, [r5, #24]
   1716e:	e7f1      	b.n	17154 <notify_connected+0x8>
}
   17170:	bd38      	pop	{r3, r4, r5, pc}
   17172:	bf00      	nop
   17174:	20002ed8 	.word	0x20002ed8

00017178 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   17178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1717c:	694d      	ldr	r5, [r1, #20]
{
   1717e:	4604      	mov	r4, r0
   17180:	460e      	mov	r6, r1
   17182:	4691      	mov	r9, r2
   17184:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   17186:	f04f 33ff 	mov.w	r3, #4294967295
   1718a:	4845      	ldr	r0, [pc, #276]	; (172a0 <send_frag+0x128>)
   1718c:	f04f 32ff 	mov.w	r2, #4294967295
   17190:	f007 fa70 	bl	1e674 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   17194:	7b63      	ldrb	r3, [r4, #13]
   17196:	2b07      	cmp	r3, #7
   17198:	d151      	bne.n	1723e <send_frag+0xc6>
	__asm__ volatile(
   1719a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1719e:	f3ef 8211 	mrs	r2, BASEPRI
   171a2:	f383 8811 	msr	BASEPRI, r3
   171a6:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   171aa:	2d00      	cmp	r5, #0
   171ac:	d059      	beq.n	17262 <send_frag+0xea>
	parent->next = child;
   171ae:	2300      	movs	r3, #0
   171b0:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   171b2:	69a3      	ldr	r3, [r4, #24]
   171b4:	2b00      	cmp	r3, #0
   171b6:	d151      	bne.n	1725c <send_frag+0xe4>
	list->head = node;
   171b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   171bc:	f382 8811 	msr	BASEPRI, r2
   171c0:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   171c4:	2104      	movs	r1, #4
   171c6:	f106 0008 	add.w	r0, r6, #8
   171ca:	f00d f987 	bl	244dc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   171ce:	8823      	ldrh	r3, [r4, #0]
   171d0:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   171d4:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   171d8:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   171da:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   171de:	3b04      	subs	r3, #4
   171e0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   171e2:	2302      	movs	r3, #2
   171e4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   171e6:	4630      	mov	r0, r6
   171e8:	f00b fa4e 	bl	22688 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   171ec:	4601      	mov	r1, r0
   171ee:	2800      	cmp	r0, #0
   171f0:	d053      	beq.n	1729a <send_frag+0x122>
   171f2:	4b2c      	ldr	r3, [pc, #176]	; (172a4 <send_frag+0x12c>)
   171f4:	4a2c      	ldr	r2, [pc, #176]	; (172a8 <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
   171f6:	482d      	ldr	r0, [pc, #180]	; (172ac <send_frag+0x134>)
   171f8:	1ad2      	subs	r2, r2, r3
   171fa:	08d2      	lsrs	r2, r2, #3
   171fc:	0192      	lsls	r2, r2, #6
   171fe:	f042 0201 	orr.w	r2, r2, #1
   17202:	f008 ff90 	bl	20126 <log_1>
	__asm__ volatile(
   17206:	f04f 0340 	mov.w	r3, #64	; 0x40
   1720a:	f3ef 8111 	mrs	r1, BASEPRI
   1720e:	f383 8811 	msr	BASEPRI, r3
   17212:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   17216:	2d00      	cmp	r5, #0
   17218:	d039      	beq.n	1728e <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1721a:	6963      	ldr	r3, [r4, #20]
   1721c:	2200      	movs	r2, #0
   1721e:	b153      	cbz	r3, 17236 <send_frag+0xbe>
   17220:	429d      	cmp	r5, r3
   17222:	d131      	bne.n	17288 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   17224:	682b      	ldr	r3, [r5, #0]
   17226:	bb4a      	cbnz	r2, 1727c <send_frag+0x104>
   17228:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1722a:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1722c:	4295      	cmp	r5, r2
   1722e:	d100      	bne.n	17232 <send_frag+0xba>
	list->tail = node;
   17230:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   17232:	2300      	movs	r3, #0
   17234:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   17236:	f381 8811 	msr	BASEPRI, r1
   1723a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1723e:	4818      	ldr	r0, [pc, #96]	; (172a0 <send_frag+0x128>)
   17240:	f007 f9f2 	bl	1e628 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   17244:	b115      	cbz	r5, 1724c <send_frag+0xd4>
		tx_free(tx);
   17246:	4628      	mov	r0, r5
   17248:	f7ff ff76 	bl	17138 <tx_free>
	}

	if (always_consume) {
   1724c:	b11f      	cbz	r7, 17256 <send_frag+0xde>
		net_buf_unref(buf);
   1724e:	4630      	mov	r0, r6
   17250:	f004 ffd4 	bl	1c1fc <net_buf_unref>
	}
	return false;
   17254:	2700      	movs	r7, #0
}
   17256:	4638      	mov	r0, r7
   17258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1725c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1725e:	61a5      	str	r5, [r4, #24]
}
   17260:	e7ac      	b.n	171bc <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   17262:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   17264:	b133      	cbz	r3, 17274 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   17266:	f103 080c 	add.w	r8, r3, #12
   1726a:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1726c:	3301      	adds	r3, #1
   1726e:	f8c8 3000 	str.w	r3, [r8]
   17272:	e7a3      	b.n	171bc <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   17274:	69e3      	ldr	r3, [r4, #28]
   17276:	f104 081c 	add.w	r8, r4, #28
   1727a:	e7f7      	b.n	1726c <send_frag+0xf4>
	parent->next = child;
   1727c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1727e:	69a3      	ldr	r3, [r4, #24]
   17280:	429d      	cmp	r5, r3
	list->tail = node;
   17282:	bf08      	it	eq
   17284:	61a2      	streq	r2, [r4, #24]
}
   17286:	e7d4      	b.n	17232 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17288:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1728a:	681b      	ldr	r3, [r3, #0]
   1728c:	e7c7      	b.n	1721e <send_frag+0xa6>
			(*pending_no_cb)--;
   1728e:	f8d8 3000 	ldr.w	r3, [r8]
   17292:	3b01      	subs	r3, #1
   17294:	f8c8 3000 	str.w	r3, [r8]
   17298:	e7cd      	b.n	17236 <send_frag+0xbe>
	return true;
   1729a:	2701      	movs	r7, #1
   1729c:	e7db      	b.n	17256 <send_frag+0xde>
   1729e:	bf00      	nop
   172a0:	20000370 	.word	0x20000370
   172a4:	000256c4 	.word	0x000256c4
   172a8:	000256e4 	.word	0x000256e4
   172ac:	00027162 	.word	0x00027162

000172b0 <bt_conn_get_pkts>:
}
   172b0:	4800      	ldr	r0, [pc, #0]	; (172b4 <bt_conn_get_pkts+0x4>)
   172b2:	4770      	bx	lr
   172b4:	20000370 	.word	0x20000370

000172b8 <notify_le_param_updated>:
{
   172b8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   172ba:	f3bf 8f5b 	dmb	ish
   172be:	6842      	ldr	r2, [r0, #4]
   172c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   172c4:	0592      	lsls	r2, r2, #22
{
   172c6:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   172c8:	f100 0304 	add.w	r3, r0, #4
   172cc:	d519      	bpl.n	17302 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   172ce:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   172d2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   172d6:	4291      	cmp	r1, r2
   172d8:	d813      	bhi.n	17302 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   172da:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   172de:	4291      	cmp	r1, r2
   172e0:	d30f      	bcc.n	17302 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
   172e2:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   172e6:	4291      	cmp	r1, r2
   172e8:	d10b      	bne.n	17302 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   172ea:	f3bf 8f5b 	dmb	ish
   172ee:	e853 2f00 	ldrex	r2, [r3]
   172f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   172f6:	e843 2100 	strex	r1, r2, [r3]
   172fa:	2900      	cmp	r1, #0
   172fc:	d1f7      	bne.n	172ee <notify_le_param_updated+0x36>
   172fe:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   17302:	4b08      	ldr	r3, [pc, #32]	; (17324 <notify_le_param_updated+0x6c>)
   17304:	681d      	ldr	r5, [r3, #0]
   17306:	b905      	cbnz	r5, 1730a <notify_le_param_updated+0x52>
}
   17308:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1730a:	68ee      	ldr	r6, [r5, #12]
   1730c:	b13e      	cbz	r6, 1731e <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   1730e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17312:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   17316:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1731a:	4620      	mov	r0, r4
   1731c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1731e:	69ad      	ldr	r5, [r5, #24]
   17320:	e7f1      	b.n	17306 <notify_le_param_updated+0x4e>
   17322:	bf00      	nop
   17324:	20002ed8 	.word	0x20002ed8

00017328 <le_param_req>:
{
   17328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1732a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   1732c:	4608      	mov	r0, r1
{
   1732e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17330:	f00b f98a 	bl	22648 <bt_le_conn_params_valid>
   17334:	4604      	mov	r4, r0
   17336:	b910      	cbnz	r0, 1733e <le_param_req+0x16>
		return false;
   17338:	2400      	movs	r4, #0
}
   1733a:	4620      	mov	r0, r4
   1733c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1733e:	4b09      	ldr	r3, [pc, #36]	; (17364 <le_param_req+0x3c>)
   17340:	681e      	ldr	r6, [r3, #0]
   17342:	2e00      	cmp	r6, #0
   17344:	d0f9      	beq.n	1733a <le_param_req+0x12>
		if (!cb->le_param_req) {
   17346:	68b3      	ldr	r3, [r6, #8]
   17348:	b90b      	cbnz	r3, 1734e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1734a:	69b6      	ldr	r6, [r6, #24]
   1734c:	e7f9      	b.n	17342 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1734e:	4629      	mov	r1, r5
   17350:	4638      	mov	r0, r7
   17352:	4798      	blx	r3
   17354:	2800      	cmp	r0, #0
   17356:	d0ef      	beq.n	17338 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   17358:	4628      	mov	r0, r5
   1735a:	f00b f975 	bl	22648 <bt_le_conn_params_valid>
   1735e:	2800      	cmp	r0, #0
   17360:	d1f3      	bne.n	1734a <le_param_req+0x22>
   17362:	e7e9      	b.n	17338 <le_param_req+0x10>
   17364:	20002ed8 	.word	0x20002ed8

00017368 <bt_conn_identity_resolved>:
{
   17368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1736a:	78c3      	ldrb	r3, [r0, #3]
{
   1736c:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1736e:	b93b      	cbnz	r3, 17380 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   17370:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   17374:	4b08      	ldr	r3, [pc, #32]	; (17398 <bt_conn_identity_resolved+0x30>)
   17376:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17378:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   1737c:	b91d      	cbnz	r5, 17386 <bt_conn_identity_resolved+0x1e>
}
   1737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   17380:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   17384:	e7f6      	b.n	17374 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   17386:	692b      	ldr	r3, [r5, #16]
   17388:	b11b      	cbz	r3, 17392 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1738a:	463a      	mov	r2, r7
   1738c:	4631      	mov	r1, r6
   1738e:	4620      	mov	r0, r4
   17390:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17392:	69ad      	ldr	r5, [r5, #24]
   17394:	e7f2      	b.n	1737c <bt_conn_identity_resolved+0x14>
   17396:	bf00      	nop
   17398:	20002ed8 	.word	0x20002ed8

0001739c <bt_conn_security_changed>:
{
   1739c:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   1739e:	7a43      	ldrb	r3, [r0, #9]
   173a0:	7283      	strb	r3, [r0, #10]
{
   173a2:	4604      	mov	r4, r0
   173a4:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   173a6:	f00b fcd0 	bl	22d4a <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   173aa:	4b06      	ldr	r3, [pc, #24]	; (173c4 <bt_conn_security_changed+0x28>)
   173ac:	681d      	ldr	r5, [r3, #0]
   173ae:	b905      	cbnz	r5, 173b2 <bt_conn_security_changed+0x16>
}
   173b0:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   173b2:	696b      	ldr	r3, [r5, #20]
   173b4:	b11b      	cbz	r3, 173be <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   173b6:	7a61      	ldrb	r1, [r4, #9]
   173b8:	4632      	mov	r2, r6
   173ba:	4620      	mov	r0, r4
   173bc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   173be:	69ad      	ldr	r5, [r5, #24]
   173c0:	e7f5      	b.n	173ae <bt_conn_security_changed+0x12>
   173c2:	bf00      	nop
   173c4:	20002ed8 	.word	0x20002ed8

000173c8 <bt_conn_cb_register>:
	cb->_next = callback_list;
   173c8:	4b02      	ldr	r3, [pc, #8]	; (173d4 <bt_conn_cb_register+0xc>)
   173ca:	681a      	ldr	r2, [r3, #0]
   173cc:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   173ce:	6018      	str	r0, [r3, #0]
}
   173d0:	4770      	bx	lr
   173d2:	bf00      	nop
   173d4:	20002ed8 	.word	0x20002ed8

000173d8 <bt_conn_recv>:
{
   173d8:	b570      	push	{r4, r5, r6, lr}
   173da:	4616      	mov	r6, r2
   173dc:	4604      	mov	r4, r0
   173de:	460d      	mov	r5, r1
	tx_notify(conn);
   173e0:	f00b faef 	bl	229c2 <tx_notify>
	switch (flags) {
   173e4:	2e01      	cmp	r6, #1
   173e6:	d02e      	beq.n	17446 <bt_conn_recv+0x6e>
   173e8:	2e02      	cmp	r6, #2
   173ea:	d15b      	bne.n	174a4 <bt_conn_recv+0xcc>
		if (conn->rx) {
   173ec:	6923      	ldr	r3, [r4, #16]
   173ee:	b163      	cbz	r3, 1740a <bt_conn_recv+0x32>
   173f0:	4b37      	ldr	r3, [pc, #220]	; (174d0 <bt_conn_recv+0xf8>)
   173f2:	4938      	ldr	r1, [pc, #224]	; (174d4 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   173f4:	4838      	ldr	r0, [pc, #224]	; (174d8 <bt_conn_recv+0x100>)
   173f6:	1ac9      	subs	r1, r1, r3
   173f8:	08c9      	lsrs	r1, r1, #3
   173fa:	0189      	lsls	r1, r1, #6
   173fc:	f041 0101 	orr.w	r1, r1, #1
   17400:	f008 fe84 	bl	2010c <log_0>
			bt_conn_reset_rx_state(conn);
   17404:	4620      	mov	r0, r4
   17406:	f00b fb5d 	bl	22ac4 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1740a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1740c:	6923      	ldr	r3, [r4, #16]
   1740e:	8999      	ldrh	r1, [r3, #12]
   17410:	2901      	cmp	r1, #1
   17412:	d95b      	bls.n	174cc <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   17414:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   17416:	7845      	ldrb	r5, [r0, #1]
   17418:	7802      	ldrb	r2, [r0, #0]
   1741a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1741e:	3204      	adds	r2, #4
   17420:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   17422:	4291      	cmp	r1, r2
   17424:	d352      	bcc.n	174cc <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
   17426:	d949      	bls.n	174bc <bt_conn_recv+0xe4>
   17428:	4829      	ldr	r0, [pc, #164]	; (174d0 <bt_conn_recv+0xf8>)
   1742a:	4b2a      	ldr	r3, [pc, #168]	; (174d4 <bt_conn_recv+0xfc>)
   1742c:	1a1b      	subs	r3, r3, r0
   1742e:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   17430:	019b      	lsls	r3, r3, #6
   17432:	482a      	ldr	r0, [pc, #168]	; (174dc <bt_conn_recv+0x104>)
   17434:	f043 0301 	orr.w	r3, r3, #1
   17438:	f008 fe89 	bl	2014e <log_2>
		bt_conn_reset_rx_state(conn);
   1743c:	4620      	mov	r0, r4
}
   1743e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   17442:	f00b bb3f 	b.w	22ac4 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   17446:	6920      	ldr	r0, [r4, #16]
   17448:	b968      	cbnz	r0, 17466 <bt_conn_recv+0x8e>
   1744a:	4922      	ldr	r1, [pc, #136]	; (174d4 <bt_conn_recv+0xfc>)
   1744c:	4b20      	ldr	r3, [pc, #128]	; (174d0 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   1744e:	4824      	ldr	r0, [pc, #144]	; (174e0 <bt_conn_recv+0x108>)
   17450:	1ac9      	subs	r1, r1, r3
   17452:	08c9      	lsrs	r1, r1, #3
   17454:	0189      	lsls	r1, r1, #6
   17456:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   1745a:	f008 fe57 	bl	2010c <log_0>
			bt_conn_reset_rx_state(conn);
   1745e:	4620      	mov	r0, r4
   17460:	f00b fb30 	bl	22ac4 <bt_conn_reset_rx_state>
   17464:	e001      	b.n	1746a <bt_conn_recv+0x92>
		if (!buf->len) {
   17466:	89ae      	ldrh	r6, [r5, #12]
   17468:	b926      	cbnz	r6, 17474 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   1746a:	4628      	mov	r0, r5
}
   1746c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   17470:	f004 bec4 	b.w	1c1fc <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   17474:	3008      	adds	r0, #8
   17476:	f00d f855 	bl	24524 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1747a:	4286      	cmp	r6, r0
   1747c:	d908      	bls.n	17490 <bt_conn_recv+0xb8>
   1747e:	4915      	ldr	r1, [pc, #84]	; (174d4 <bt_conn_recv+0xfc>)
   17480:	4b13      	ldr	r3, [pc, #76]	; (174d0 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   17482:	4818      	ldr	r0, [pc, #96]	; (174e4 <bt_conn_recv+0x10c>)
   17484:	1ac9      	subs	r1, r1, r3
   17486:	08c9      	lsrs	r1, r1, #3
   17488:	0189      	lsls	r1, r1, #6
   1748a:	f041 0101 	orr.w	r1, r1, #1
   1748e:	e7e4      	b.n	1745a <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17490:	6920      	ldr	r0, [r4, #16]
   17492:	89aa      	ldrh	r2, [r5, #12]
   17494:	68a9      	ldr	r1, [r5, #8]
   17496:	3008      	adds	r0, #8
   17498:	f00d f80f 	bl	244ba <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1749c:	4628      	mov	r0, r5
   1749e:	f004 fead 	bl	1c1fc <net_buf_unref>
		break;
   174a2:	e7b3      	b.n	1740c <bt_conn_recv+0x34>
   174a4:	4a0a      	ldr	r2, [pc, #40]	; (174d0 <bt_conn_recv+0xf8>)
   174a6:	4b0b      	ldr	r3, [pc, #44]	; (174d4 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   174a8:	480f      	ldr	r0, [pc, #60]	; (174e8 <bt_conn_recv+0x110>)
   174aa:	1a9b      	subs	r3, r3, r2
   174ac:	08db      	lsrs	r3, r3, #3
   174ae:	019b      	lsls	r3, r3, #6
   174b0:	f043 0201 	orr.w	r2, r3, #1
   174b4:	4631      	mov	r1, r6
   174b6:	f008 fe36 	bl	20126 <log_1>
		bt_conn_reset_rx_state(conn);
   174ba:	e7d0      	b.n	1745e <bt_conn_recv+0x86>
	conn->rx = NULL;
   174bc:	2200      	movs	r2, #0
   174be:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   174c0:	4620      	mov	r0, r4
   174c2:	4619      	mov	r1, r3
}
   174c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   174c8:	f000 bd50 	b.w	17f6c <bt_l2cap_recv>
}
   174cc:	bd70      	pop	{r4, r5, r6, pc}
   174ce:	bf00      	nop
   174d0:	000256c4 	.word	0x000256c4
   174d4:	000256e4 	.word	0x000256e4
   174d8:	00027842 	.word	0x00027842
   174dc:	000278c2 	.word	0x000278c2
   174e0:	0002785f 	.word	0x0002785f
   174e4:	0002787d 	.word	0x0002787d
   174e8:	000278a4 	.word	0x000278a4

000174ec <bt_conn_send_cb>:
{
   174ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174f0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   174f2:	7b43      	ldrb	r3, [r0, #13]
   174f4:	2b07      	cmp	r3, #7
{
   174f6:	4605      	mov	r5, r0
   174f8:	460e      	mov	r6, r1
   174fa:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   174fc:	d00c      	beq.n	17518 <bt_conn_send_cb+0x2c>
   174fe:	4926      	ldr	r1, [pc, #152]	; (17598 <bt_conn_send_cb+0xac>)
   17500:	4b26      	ldr	r3, [pc, #152]	; (1759c <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   17502:	4827      	ldr	r0, [pc, #156]	; (175a0 <bt_conn_send_cb+0xb4>)
   17504:	1ac9      	subs	r1, r1, r3
   17506:	08c9      	lsrs	r1, r1, #3
   17508:	0189      	lsls	r1, r1, #6
   1750a:	f041 0101 	orr.w	r1, r1, #1
   1750e:	f008 fdfd 	bl	2010c <log_0>
			return -ENOTCONN;
   17512:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17516:	e01d      	b.n	17554 <bt_conn_send_cb+0x68>
	if (cb) {
   17518:	2a00      	cmp	r2, #0
   1751a:	d03a      	beq.n	17592 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   1751c:	f007 fdca 	bl	1f0b4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   17520:	4b20      	ldr	r3, [pc, #128]	; (175a4 <bt_conn_send_cb+0xb8>)
   17522:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17524:	4820      	ldr	r0, [pc, #128]	; (175a8 <bt_conn_send_cb+0xbc>)
   17526:	bf07      	ittee	eq
   17528:	2200      	moveq	r2, #0
   1752a:	2300      	moveq	r3, #0
   1752c:	f04f 32ff 	movne.w	r2, #4294967295
   17530:	f04f 33ff 	movne.w	r3, #4294967295
   17534:	f007 f844 	bl	1e5c0 <z_impl_k_queue_get>
   17538:	4604      	mov	r4, r0
		if (!tx) {
   1753a:	b968      	cbnz	r0, 17558 <bt_conn_send_cb+0x6c>
   1753c:	4b17      	ldr	r3, [pc, #92]	; (1759c <bt_conn_send_cb+0xb0>)
   1753e:	4916      	ldr	r1, [pc, #88]	; (17598 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   17540:	481a      	ldr	r0, [pc, #104]	; (175ac <bt_conn_send_cb+0xc0>)
   17542:	1ac9      	subs	r1, r1, r3
   17544:	08c9      	lsrs	r1, r1, #3
   17546:	0189      	lsls	r1, r1, #6
   17548:	f041 0101 	orr.w	r1, r1, #1
   1754c:	f008 fdde 	bl	2010c <log_0>
			return -ENOBUFS;
   17550:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17558:	7b6b      	ldrb	r3, [r5, #13]
   1755a:	2b07      	cmp	r3, #7
   1755c:	d00d      	beq.n	1757a <bt_conn_send_cb+0x8e>
   1755e:	4b0f      	ldr	r3, [pc, #60]	; (1759c <bt_conn_send_cb+0xb0>)
   17560:	490d      	ldr	r1, [pc, #52]	; (17598 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   17562:	4813      	ldr	r0, [pc, #76]	; (175b0 <bt_conn_send_cb+0xc4>)
   17564:	1ac9      	subs	r1, r1, r3
   17566:	08c9      	lsrs	r1, r1, #3
   17568:	0189      	lsls	r1, r1, #6
   1756a:	f041 0102 	orr.w	r1, r1, #2
   1756e:	f008 fdcd 	bl	2010c <log_0>
			tx_free(tx);
   17572:	4620      	mov	r0, r4
   17574:	f7ff fde0 	bl	17138 <tx_free>
   17578:	e7cb      	b.n	17512 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   1757a:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1757c:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   17580:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   17582:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   17584:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17588:	4631      	mov	r1, r6
   1758a:	f00c ff5d 	bl	24448 <net_buf_put>
	return 0;
   1758e:	2000      	movs	r0, #0
   17590:	e7e0      	b.n	17554 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   17592:	614a      	str	r2, [r1, #20]
   17594:	e7f6      	b.n	17584 <bt_conn_send_cb+0x98>
   17596:	bf00      	nop
   17598:	000256e4 	.word	0x000256e4
   1759c:	000256c4 	.word	0x000256c4
   175a0:	000278dd 	.word	0x000278dd
   175a4:	20002c80 	.word	0x20002c80
   175a8:	200008d0 	.word	0x200008d0
   175ac:	000278ec 	.word	0x000278ec
   175b0:	0002790a 	.word	0x0002790a

000175b4 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   175b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   175b8:	4b22      	ldr	r3, [pc, #136]	; (17644 <bt_conn_prepare_events+0x90>)
   175ba:	4e23      	ldr	r6, [pc, #140]	; (17648 <bt_conn_prepare_events+0x94>)
   175bc:	2400      	movs	r4, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   175be:	4622      	mov	r2, r4
   175c0:	2101      	movs	r1, #1
{
   175c2:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   175c4:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   175c6:	f00d ff0a 	bl	253de <k_poll_event_init>
   175ca:	2501      	movs	r5, #1
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   175cc:	f04f 0914 	mov.w	r9, #20
		conn_cleanup(conn);
   175d0:	f1a6 0ab8 	sub.w	sl, r6, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   175d4:	f3bf 8f5b 	dmb	ish
   175d8:	6833      	ldr	r3, [r6, #0]
   175da:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   175de:	fb09 7805 	mla	r8, r9, r5, r7
	if (!atomic_get(&conn->ref)) {
   175e2:	b1bb      	cbz	r3, 17614 <bt_conn_prepare_events+0x60>
	if (conn->state == BT_CONN_DISCONNECTED &&
   175e4:	f816 3cab 	ldrb.w	r3, [r6, #-171]
   175e8:	b9e3      	cbnz	r3, 17624 <bt_conn_prepare_events+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   175ea:	f3bf 8f5b 	dmb	ish
   175ee:	f1a6 03b4 	sub.w	r3, r6, #180	; 0xb4
   175f2:	e853 2f00 	ldrex	r2, [r3]
   175f6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   175fa:	e843 1000 	strex	r0, r1, [r3]
   175fe:	2800      	cmp	r0, #0
   17600:	d1f7      	bne.n	175f2 <bt_conn_prepare_events+0x3e>
   17602:	f3bf 8f5b 	dmb	ish
   17606:	0653      	lsls	r3, r2, #25
   17608:	d50c      	bpl.n	17624 <bt_conn_prepare_events+0x70>
		conn_cleanup(conn);
   1760a:	20c0      	movs	r0, #192	; 0xc0
   1760c:	fb00 a004 	mla	r0, r0, r4, sl
   17610:	f00b fa61 	bl	22ad6 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17614:	3401      	adds	r4, #1
   17616:	2c05      	cmp	r4, #5
   17618:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   1761c:	d1da      	bne.n	175d4 <bt_conn_prepare_events+0x20>
		}
	}
#endif

	return ev_count;
}
   1761e:	4628      	mov	r0, r5
   17620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   17624:	f816 3cab 	ldrb.w	r3, [r6, #-171]
   17628:	2b07      	cmp	r3, #7
   1762a:	d1f3      	bne.n	17614 <bt_conn_prepare_events+0x60>
	k_poll_event_init(&events[0],
   1762c:	f1a6 0380 	sub.w	r3, r6, #128	; 0x80
   17630:	2200      	movs	r2, #0
   17632:	2104      	movs	r1, #4
   17634:	4640      	mov	r0, r8
   17636:	f00d fed2 	bl	253de <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1763a:	2301      	movs	r3, #1
   1763c:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   17640:	441d      	add	r5, r3
   17642:	e7e7      	b.n	17614 <bt_conn_prepare_events+0x60>
   17644:	200005c4 	.word	0x200005c4
   17648:	200017f8 	.word	0x200017f8

0001764c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1764c:	b570      	push	{r4, r5, r6, lr}
   1764e:	4606      	mov	r6, r0
   17650:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   17652:	480f      	ldr	r0, [pc, #60]	; (17690 <bt_conn_add_le+0x44>)
   17654:	2105      	movs	r1, #5
   17656:	f00b f9da 	bl	22a0e <bt_conn_new>
	if (!conn) {
   1765a:	4604      	mov	r4, r0
   1765c:	b1b0      	cbz	r0, 1768c <bt_conn_add_le+0x40>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1765e:	490d      	ldr	r1, [pc, #52]	; (17694 <bt_conn_add_le+0x48>)
   17660:	3058      	adds	r0, #88	; 0x58
   17662:	f00d fb85 	bl	24d70 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17666:	490c      	ldr	r1, [pc, #48]	; (17698 <bt_conn_add_le+0x4c>)
   17668:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1766c:	f00d fb5a 	bl	24d24 <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   17670:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
   17672:	2207      	movs	r2, #7
   17674:	4629      	mov	r1, r5
   17676:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1767a:	f00a fdb5 	bl	221e8 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1767e:	2301      	movs	r3, #1
   17680:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   17682:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   17684:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   17686:	4b05      	ldr	r3, [pc, #20]	; (1769c <bt_conn_add_le+0x50>)
   17688:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1768c:	4620      	mov	r0, r4
   1768e:	bd70      	pop	{r4, r5, r6, pc}
   17690:	20001740 	.word	0x20001740
   17694:	000179d1 	.word	0x000179d1
   17698:	00022a09 	.word	0x00022a09
   1769c:	00280018 	.word	0x00280018

000176a0 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   176a0:	4602      	mov	r2, r0
   176a2:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   176a4:	2105      	movs	r1, #5
   176a6:	4803      	ldr	r0, [pc, #12]	; (176b4 <bt_conn_lookup_handle+0x14>)
   176a8:	f00b fa8e 	bl	22bc8 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   176ac:	2800      	cmp	r0, #0
   176ae:	bf38      	it	cc
   176b0:	2000      	movcc	r0, #0
   176b2:	bd08      	pop	{r3, pc}
   176b4:	20001740 	.word	0x20001740

000176b8 <bt_conn_set_state>:
{
   176b8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   176ba:	7b46      	ldrb	r6, [r0, #13]
   176bc:	428e      	cmp	r6, r1
{
   176be:	4604      	mov	r4, r0
   176c0:	460d      	mov	r5, r1
	if (conn->state == state) {
   176c2:	d112      	bne.n	176ea <bt_conn_set_state+0x32>
   176c4:	4b65      	ldr	r3, [pc, #404]	; (1785c <bt_conn_set_state+0x1a4>)
   176c6:	4a66      	ldr	r2, [pc, #408]	; (17860 <bt_conn_set_state+0x1a8>)
		BT_WARN("no transition %s", state2str(state));
   176c8:	4866      	ldr	r0, [pc, #408]	; (17864 <bt_conn_set_state+0x1ac>)
   176ca:	2e08      	cmp	r6, #8
   176cc:	eba2 0203 	sub.w	r2, r2, r3
   176d0:	bf96      	itet	ls
   176d2:	4b65      	ldrls	r3, [pc, #404]	; (17868 <bt_conn_set_state+0x1b0>)
   176d4:	4965      	ldrhi	r1, [pc, #404]	; (1786c <bt_conn_set_state+0x1b4>)
   176d6:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   176da:	08d2      	lsrs	r2, r2, #3
   176dc:	0192      	lsls	r2, r2, #6
   176de:	f042 0202 	orr.w	r2, r2, #2
}
   176e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   176e6:	f008 bd1e 	b.w	20126 <log_1>
	conn->state = state;
   176ea:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   176ec:	b90e      	cbnz	r6, 176f2 <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
   176ee:	f00b fa39 	bl	22b64 <bt_conn_ref>
	switch (conn->state) {
   176f2:	7b63      	ldrb	r3, [r4, #13]
   176f4:	2b08      	cmp	r3, #8
   176f6:	f200 80a6 	bhi.w	17846 <bt_conn_set_state+0x18e>
   176fa:	e8df f003 	tbb	[pc, r3]
   176fe:	0537      	.short	0x0537
   17700:	aeaeaeae 	.word	0xaeaeaeae
   17704:	1cae      	.short	0x1cae
   17706:	ae          	.byte	0xae
   17707:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   17708:	4d59      	ldr	r5, [pc, #356]	; (17870 <bt_conn_set_state+0x1b8>)
		tx->pending_no_cb = 0U;
   1770a:	2600      	movs	r6, #0
	__asm__ volatile(
   1770c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17710:	f3ef 8211 	mrs	r2, BASEPRI
   17714:	f383 8811 	msr	BASEPRI, r3
   17718:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1771c:	69e3      	ldr	r3, [r4, #28]
   1771e:	2b00      	cmp	r3, #0
   17720:	d072      	beq.n	17808 <bt_conn_set_state+0x150>
			conn->pending_no_cb--;
   17722:	3b01      	subs	r3, #1
   17724:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17726:	f382 8811 	msr	BASEPRI, r2
   1772a:	f3bf 8f6f 	isb	sy
   1772e:	4628      	mov	r0, r5
   17730:	f006 ff7a 	bl	1e628 <z_impl_k_sem_give>
}
   17734:	e7ea      	b.n	1770c <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17736:	78a3      	ldrb	r3, [r4, #2]
   17738:	2b04      	cmp	r3, #4
   1773a:	f000 808e 	beq.w	1785a <bt_conn_set_state+0x1a2>
	z_impl_k_queue_init(queue);
   1773e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17742:	f00d fa1b 	bl	24b7c <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   17746:	484b      	ldr	r0, [pc, #300]	; (17874 <bt_conn_set_state+0x1bc>)
   17748:	2100      	movs	r1, #0
   1774a:	f007 ff89 	bl	1f660 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1774e:	2300      	movs	r3, #0
	list->tail = NULL;
   17750:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17754:	78e3      	ldrb	r3, [r4, #3]
   17756:	2b01      	cmp	r3, #1
   17758:	d17f      	bne.n	1785a <bt_conn_set_state+0x1a2>
			k_work_schedule(&conn->deferred_work,
   1775a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1775e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   17762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   17766:	2300      	movs	r3, #0
   17768:	f007 b960 	b.w	1ea2c <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1776c:	78a3      	ldrb	r3, [r4, #2]
   1776e:	2b04      	cmp	r3, #4
   17770:	d104      	bne.n	1777c <bt_conn_set_state+0xc4>
			bt_conn_unref(conn);
   17772:	4620      	mov	r0, r4
}
   17774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   17778:	f00b ba0f 	b.w	22b9a <bt_conn_unref>
		switch (old_state) {
   1777c:	2e08      	cmp	r6, #8
   1777e:	d86c      	bhi.n	1785a <bt_conn_set_state+0x1a2>
   17780:	a301      	add	r3, pc, #4	; (adr r3, 17788 <bt_conn_set_state+0xd0>)
   17782:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17786:	bf00      	nop
   17788:	000177f5 	.word	0x000177f5
   1778c:	000177ad 	.word	0x000177ad
   17790:	000177e7 	.word	0x000177e7
   17794:	00017773 	.word	0x00017773
   17798:	00017773 	.word	0x00017773
   1779c:	000177e7 	.word	0x000177e7
   177a0:	000177e7 	.word	0x000177e7
   177a4:	000177f5 	.word	0x000177f5
   177a8:	000177f5 	.word	0x000177f5
			tx_notify(conn);
   177ac:	4620      	mov	r0, r4
   177ae:	f00b f908 	bl	229c2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   177b2:	78a3      	ldrb	r3, [r4, #2]
   177b4:	2b01      	cmp	r3, #1
   177b6:	d103      	bne.n	177c0 <bt_conn_set_state+0x108>
				k_work_cancel_delayable(&conn->deferred_work);
   177b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   177bc:	f00d fae4 	bl	24d88 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   177c0:	f3bf 8f5b 	dmb	ish
   177c4:	3404      	adds	r4, #4
   177c6:	e854 3f00 	ldrex	r3, [r4]
   177ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   177ce:	e844 3200 	strex	r2, r3, [r4]
   177d2:	2a00      	cmp	r2, #0
   177d4:	d1f7      	bne.n	177c6 <bt_conn_set_state+0x10e>
   177d6:	f3bf 8f5b 	dmb	ish
   177da:	4826      	ldr	r0, [pc, #152]	; (17874 <bt_conn_set_state+0x1bc>)
}
   177dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   177e0:	2100      	movs	r1, #0
   177e2:	f007 bf3d 	b.w	1f660 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   177e6:	7b23      	ldrb	r3, [r4, #12]
   177e8:	2b00      	cmp	r3, #0
   177ea:	d0c2      	beq.n	17772 <bt_conn_set_state+0xba>
				notify_connected(conn);
   177ec:	4620      	mov	r0, r4
   177ee:	f7ff fcad 	bl	1714c <notify_connected>
   177f2:	e7be      	b.n	17772 <bt_conn_set_state+0xba>
   177f4:	4a1a      	ldr	r2, [pc, #104]	; (17860 <bt_conn_set_state+0x1a8>)
   177f6:	4b19      	ldr	r3, [pc, #100]	; (1785c <bt_conn_set_state+0x1a4>)
			BT_WARN("Invalid (%u) old state", state);
   177f8:	481f      	ldr	r0, [pc, #124]	; (17878 <bt_conn_set_state+0x1c0>)
   177fa:	1ad2      	subs	r2, r2, r3
   177fc:	08d2      	lsrs	r2, r2, #3
   177fe:	0192      	lsls	r2, r2, #6
   17800:	f042 0202 	orr.w	r2, r2, #2
   17804:	4629      	mov	r1, r5
   17806:	e76c      	b.n	176e2 <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   17808:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1780a:	b128      	cbz	r0, 17818 <bt_conn_set_state+0x160>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1780c:	69a1      	ldr	r1, [r4, #24]
   1780e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   17810:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17812:	4288      	cmp	r0, r1
	list->tail = node;
   17814:	bf08      	it	eq
   17816:	61a3      	streq	r3, [r4, #24]
   17818:	f382 8811 	msr	BASEPRI, r2
   1781c:	f3bf 8f6f 	isb	sy
		if (!node) {
   17820:	b1d8      	cbz	r0, 1785a <bt_conn_set_state+0x1a2>
	__asm__ volatile(
   17822:	f04f 0240 	mov.w	r2, #64	; 0x40
   17826:	f3ef 8311 	mrs	r3, BASEPRI
   1782a:	f382 8811 	msr	BASEPRI, r2
   1782e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   17832:	68c2      	ldr	r2, [r0, #12]
   17834:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   17836:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   17838:	f383 8811 	msr	BASEPRI, r3
   1783c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   17840:	f7ff fc7a 	bl	17138 <tx_free>
   17844:	e773      	b.n	1772e <bt_conn_set_state+0x76>
   17846:	4a06      	ldr	r2, [pc, #24]	; (17860 <bt_conn_set_state+0x1a8>)
   17848:	4b04      	ldr	r3, [pc, #16]	; (1785c <bt_conn_set_state+0x1a4>)
		BT_WARN("no valid (%u) state was set", state);
   1784a:	480c      	ldr	r0, [pc, #48]	; (1787c <bt_conn_set_state+0x1c4>)
   1784c:	1ad2      	subs	r2, r2, r3
   1784e:	08d2      	lsrs	r2, r2, #3
   17850:	0192      	lsls	r2, r2, #6
   17852:	f042 0202 	orr.w	r2, r2, #2
   17856:	4629      	mov	r1, r5
   17858:	e743      	b.n	176e2 <bt_conn_set_state+0x2a>
}
   1785a:	bd70      	pop	{r4, r5, r6, pc}
   1785c:	000256c4 	.word	0x000256c4
   17860:	000256e4 	.word	0x000256e4
   17864:	0002793a 	.word	0x0002793a
   17868:	00025d90 	.word	0x00025d90
   1786c:	00027930 	.word	0x00027930
   17870:	20000370 	.word	0x20000370
   17874:	200005c4 	.word	0x200005c4
   17878:	0002794b 	.word	0x0002794b
   1787c:	00027962 	.word	0x00027962

00017880 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   17880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17884:	4e0f      	ldr	r6, [pc, #60]	; (178c4 <bt_conn_lookup_addr_le+0x44>)
   17886:	4607      	mov	r7, r0
   17888:	4688      	mov	r8, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1788a:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1788c:	4630      	mov	r0, r6
   1788e:	f00b f969 	bl	22b64 <bt_conn_ref>

		if (!conn) {
   17892:	4604      	mov	r4, r0
   17894:	b120      	cbz	r0, 178a0 <bt_conn_lookup_addr_le+0x20>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17896:	7883      	ldrb	r3, [r0, #2]
   17898:	2b01      	cmp	r3, #1
   1789a:	d00a      	beq.n	178b2 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   1789c:	f00b f97d 	bl	22b9a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   178a0:	3501      	adds	r5, #1
   178a2:	2d05      	cmp	r5, #5
   178a4:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   178a8:	d1f0      	bne.n	1788c <bt_conn_lookup_addr_le+0xc>
		}

		return conn;
	}

	return NULL;
   178aa:	2400      	movs	r4, #0
}
   178ac:	4620      	mov	r0, r4
   178ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   178b2:	4642      	mov	r2, r8
   178b4:	4639      	mov	r1, r7
   178b6:	f00b f935 	bl	22b24 <bt_conn_is_peer_addr_le>
   178ba:	2800      	cmp	r0, #0
   178bc:	d1f6      	bne.n	178ac <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   178be:	4620      	mov	r0, r4
   178c0:	e7ec      	b.n	1789c <bt_conn_lookup_addr_le+0x1c>
   178c2:	bf00      	nop
   178c4:	20001740 	.word	0x20001740

000178c8 <bt_conn_exists_le>:
{
   178c8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   178ca:	f7ff ffd9 	bl	17880 <bt_conn_lookup_addr_le>
	if (conn) {
   178ce:	4604      	mov	r4, r0
   178d0:	b1a0      	cbz	r0, 178fc <bt_conn_exists_le+0x34>
   178d2:	4b0b      	ldr	r3, [pc, #44]	; (17900 <bt_conn_exists_le+0x38>)
   178d4:	4a0b      	ldr	r2, [pc, #44]	; (17904 <bt_conn_exists_le+0x3c>)
   178d6:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   178d8:	7b43      	ldrb	r3, [r0, #13]
   178da:	480b      	ldr	r0, [pc, #44]	; (17908 <bt_conn_exists_le+0x40>)
   178dc:	2b08      	cmp	r3, #8
   178de:	bf96      	itet	ls
   178e0:	490a      	ldrls	r1, [pc, #40]	; (1790c <bt_conn_exists_le+0x44>)
   178e2:	490b      	ldrhi	r1, [pc, #44]	; (17910 <bt_conn_exists_le+0x48>)
   178e4:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   178e8:	08d2      	lsrs	r2, r2, #3
   178ea:	0192      	lsls	r2, r2, #6
   178ec:	f042 0202 	orr.w	r2, r2, #2
   178f0:	f008 fc19 	bl	20126 <log_1>
		bt_conn_unref(conn);
   178f4:	4620      	mov	r0, r4
   178f6:	f00b f950 	bl	22b9a <bt_conn_unref>
		return true;
   178fa:	2001      	movs	r0, #1
}
   178fc:	bd10      	pop	{r4, pc}
   178fe:	bf00      	nop
   17900:	000256c4 	.word	0x000256c4
   17904:	000256e4 	.word	0x000256e4
   17908:	0002797e 	.word	0x0002797e
   1790c:	00025d90 	.word	0x00025d90
   17910:	00027930 	.word	0x00027930

00017914 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17918:	f8df a050 	ldr.w	sl, [pc, #80]	; 1796c <bt_conn_lookup_state_le+0x58>
{
   1791c:	4606      	mov	r6, r0
   1791e:	460f      	mov	r7, r1
   17920:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17922:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17924:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   17928:	fb09 a005 	mla	r0, r9, r5, sl
   1792c:	f00b f91a 	bl	22b64 <bt_conn_ref>

		if (!conn) {
   17930:	4604      	mov	r4, r0
   17932:	b120      	cbz	r0, 1793e <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17934:	7883      	ldrb	r3, [r0, #2]
   17936:	2b01      	cmp	r3, #1
   17938:	d006      	beq.n	17948 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1793a:	f00b f92e 	bl	22b9a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1793e:	3501      	adds	r5, #1
   17940:	2d05      	cmp	r5, #5
   17942:	d1f1      	bne.n	17928 <bt_conn_lookup_state_le+0x14>
		}

		return conn;
	}

	return NULL;
   17944:	2400      	movs	r4, #0
   17946:	e00d      	b.n	17964 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17948:	b137      	cbz	r7, 17958 <bt_conn_lookup_state_le+0x44>
   1794a:	463a      	mov	r2, r7
   1794c:	4631      	mov	r1, r6
   1794e:	f00b f8e9 	bl	22b24 <bt_conn_is_peer_addr_le>
   17952:	b908      	cbnz	r0, 17958 <bt_conn_lookup_state_le+0x44>
			bt_conn_unref(conn);
   17954:	4620      	mov	r0, r4
   17956:	e7f0      	b.n	1793a <bt_conn_lookup_state_le+0x26>
		if (!(conn->state == state && conn->id == id)) {
   17958:	7b63      	ldrb	r3, [r4, #13]
   1795a:	4543      	cmp	r3, r8
   1795c:	d1fa      	bne.n	17954 <bt_conn_lookup_state_le+0x40>
   1795e:	7a23      	ldrb	r3, [r4, #8]
   17960:	42b3      	cmp	r3, r6
   17962:	d1f7      	bne.n	17954 <bt_conn_lookup_state_le+0x40>
}
   17964:	4620      	mov	r0, r4
   17966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1796a:	bf00      	nop
   1796c:	20001740 	.word	0x20001740

00017970 <send_conn_le_param_update>:
{
   17970:	b538      	push	{r3, r4, r5, lr}
   17972:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   17974:	4608      	mov	r0, r1
{
   17976:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17978:	f00a fe66 	bl	22648 <bt_le_conn_params_valid>
   1797c:	b318      	cbz	r0, 179c6 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1797e:	4b13      	ldr	r3, [pc, #76]	; (179cc <send_conn_le_param_update+0x5c>)
   17980:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   17984:	0799      	lsls	r1, r3, #30
   17986:	d407      	bmi.n	17998 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   17988:	78e3      	ldrb	r3, [r4, #3]
   1798a:	b183      	cbz	r3, 179ae <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   1798c:	4629      	mov	r1, r5
   1798e:	4620      	mov	r0, r4
}
   17990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   17994:	f000 bb22 	b.w	17fdc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17998:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   1799c:	079a      	lsls	r2, r3, #30
   1799e:	d5f3      	bpl.n	17988 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   179a0:	f3bf 8f5b 	dmb	ish
   179a4:	6863      	ldr	r3, [r4, #4]
   179a6:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   179aa:	055b      	lsls	r3, r3, #21
   179ac:	d4ec      	bmi.n	17988 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   179ae:	4629      	mov	r1, r5
   179b0:	4620      	mov	r0, r4
   179b2:	f00b f951 	bl	22c58 <bt_conn_le_conn_update>
		if (rc == 0) {
   179b6:	b928      	cbnz	r0, 179c4 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   179b8:	88ab      	ldrh	r3, [r5, #4]
   179ba:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   179be:	88eb      	ldrh	r3, [r5, #6]
   179c0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   179c4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   179c6:	f06f 0015 	mvn.w	r0, #21
   179ca:	e7fb      	b.n	179c4 <send_conn_le_param_update+0x54>
   179cc:	200002a0 	.word	0x200002a0

000179d0 <deferred_work>:
{
   179d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   179d2:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   179d6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   179d8:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   179dc:	b993      	cbnz	r3, 17a04 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   179de:	4630      	mov	r0, r6
   179e0:	f00b f99d 	bl	22d1e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   179e4:	4b1f      	ldr	r3, [pc, #124]	; (17a64 <deferred_work+0x94>)
   179e6:	681d      	ldr	r5, [r3, #0]
   179e8:	b925      	cbnz	r5, 179f4 <deferred_work+0x24>
		bt_conn_unref(conn);
   179ea:	4630      	mov	r0, r6
   179ec:	f00b f8d5 	bl	22b9a <bt_conn_unref>
}
   179f0:	b002      	add	sp, #8
   179f2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   179f4:	686b      	ldr	r3, [r5, #4]
   179f6:	b11b      	cbz	r3, 17a00 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   179f8:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   179fc:	4630      	mov	r0, r6
   179fe:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17a00:	69ad      	ldr	r5, [r5, #24]
   17a02:	e7f1      	b.n	179e8 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   17a04:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   17a08:	2b01      	cmp	r3, #1
   17a0a:	d1f1      	bne.n	179f0 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17a0c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   17a10:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   17a14:	e855 3f00 	ldrex	r3, [r5]
   17a18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   17a1c:	e845 2100 	strex	r1, r2, [r5]
   17a20:	2900      	cmp	r1, #0
   17a22:	d1f7      	bne.n	17a14 <deferred_work+0x44>
   17a24:	f3bf 8f5b 	dmb	ish
   17a28:	059b      	lsls	r3, r3, #22
   17a2a:	d514      	bpl.n	17a56 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17a2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17a2e:	9300      	str	r3, [sp, #0]
   17a30:	6d23      	ldr	r3, [r4, #80]	; 0x50
   17a32:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   17a34:	4669      	mov	r1, sp
   17a36:	4630      	mov	r0, r6
   17a38:	f7ff ff9a 	bl	17970 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17a3c:	f3bf 8f5b 	dmb	ish
   17a40:	e855 3f00 	ldrex	r3, [r5]
   17a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17a48:	e845 3200 	strex	r2, r3, [r5]
   17a4c:	2a00      	cmp	r2, #0
   17a4e:	d1f7      	bne.n	17a40 <deferred_work+0x70>
   17a50:	f3bf 8f5b 	dmb	ish
   17a54:	e7cc      	b.n	179f0 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   17a56:	4a04      	ldr	r2, [pc, #16]	; (17a68 <deferred_work+0x98>)
   17a58:	6810      	ldr	r0, [r2, #0]
   17a5a:	6851      	ldr	r1, [r2, #4]
   17a5c:	466b      	mov	r3, sp
   17a5e:	c303      	stmia	r3!, {r0, r1}
   17a60:	e7e8      	b.n	17a34 <deferred_work+0x64>
   17a62:	bf00      	nop
   17a64:	20002ed8 	.word	0x20002ed8
   17a68:	000258a4 	.word	0x000258a4

00017a6c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   17a6c:	b538      	push	{r3, r4, r5, lr}
   17a6e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   17a70:	490c      	ldr	r1, [pc, #48]	; (17aa4 <bt_conn_create_pdu_timeout+0x38>)
   17a72:	2800      	cmp	r0, #0
   17a74:	bf08      	it	eq
   17a76:	4608      	moveq	r0, r1
   17a78:	f00c fcc3 	bl	24402 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   17a7c:	4604      	mov	r4, r0
   17a7e:	b958      	cbnz	r0, 17a98 <bt_conn_create_pdu_timeout+0x2c>
   17a80:	4909      	ldr	r1, [pc, #36]	; (17aa8 <bt_conn_create_pdu_timeout+0x3c>)
   17a82:	4b0a      	ldr	r3, [pc, #40]	; (17aac <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   17a84:	480a      	ldr	r0, [pc, #40]	; (17ab0 <bt_conn_create_pdu_timeout+0x44>)
   17a86:	1ac9      	subs	r1, r1, r3
   17a88:	08c9      	lsrs	r1, r1, #3
   17a8a:	0189      	lsls	r1, r1, #6
   17a8c:	f041 0102 	orr.w	r1, r1, #2
   17a90:	f008 fb3c 	bl	2010c <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   17a94:	4620      	mov	r0, r4
   17a96:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   17a98:	1d29      	adds	r1, r5, #4
   17a9a:	3008      	adds	r0, #8
   17a9c:	f00c fcd0 	bl	24440 <net_buf_simple_reserve>
	return buf;
   17aa0:	e7f8      	b.n	17a94 <bt_conn_create_pdu_timeout+0x28>
   17aa2:	bf00      	nop
   17aa4:	200008e8 	.word	0x200008e8
   17aa8:	000256e4 	.word	0x000256e4
   17aac:	000256c4 	.word	0x000256c4
   17ab0:	000279a1 	.word	0x000279a1

00017ab4 <bt_conn_create_frag_timeout>:
{
   17ab4:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   17ab6:	4801      	ldr	r0, [pc, #4]	; (17abc <bt_conn_create_frag_timeout+0x8>)
   17ab8:	f7ff bfd8 	b.w	17a6c <bt_conn_create_pdu_timeout>
   17abc:	20000938 	.word	0x20000938

00017ac0 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   17ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ac4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   17ac6:	f04f 33ff 	mov.w	r3, #4294967295
   17aca:	f04f 32ff 	mov.w	r2, #4294967295
   17ace:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   17ad0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   17ad2:	f7ff ffef 	bl	17ab4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   17ad6:	7833      	ldrb	r3, [r6, #0]
   17ad8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   17ada:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17adc:	f04f 0600 	mov.w	r6, #0
   17ae0:	d005      	beq.n	17aee <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   17ae2:	f004 fb8b 	bl	1c1fc <net_buf_unref>
		return NULL;
   17ae6:	4635      	mov	r5, r6
}
   17ae8:	4628      	mov	r0, r5
   17aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   17aee:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   17af0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   17af4:	4e0c      	ldr	r6, [pc, #48]	; (17b28 <create_frag.isra.0+0x68>)
   17af6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17af8:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   17afc:	f00c fd12 	bl	24524 <net_buf_simple_tailroom>
   17b00:	4580      	cmp	r8, r0
   17b02:	d20c      	bcs.n	17b1e <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   17b04:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17b08:	f854 1f08 	ldr.w	r1, [r4, #8]!
   17b0c:	4632      	mov	r2, r6
   17b0e:	4638      	mov	r0, r7
   17b10:	f00c fcd3 	bl	244ba <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17b14:	4631      	mov	r1, r6
   17b16:	4620      	mov	r0, r4
   17b18:	f00c fce8 	bl	244ec <net_buf_simple_pull>
   17b1c:	e7e4      	b.n	17ae8 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   17b1e:	4638      	mov	r0, r7
   17b20:	f00c fd00 	bl	24524 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17b24:	b286      	uxth	r6, r0
   17b26:	e7ef      	b.n	17b08 <create_frag.isra.0+0x48>
   17b28:	200002a0 	.word	0x200002a0

00017b2c <bt_conn_process_tx>:
{
   17b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17b2e:	7b43      	ldrb	r3, [r0, #13]
{
   17b30:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   17b32:	b993      	cbnz	r3, 17b5a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17b34:	f3bf 8f5b 	dmb	ish
   17b38:	1d03      	adds	r3, r0, #4
   17b3a:	e853 2f00 	ldrex	r2, [r3]
   17b3e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   17b42:	e843 1400 	strex	r4, r1, [r3]
   17b46:	2c00      	cmp	r4, #0
   17b48:	d1f7      	bne.n	17b3a <bt_conn_process_tx+0xe>
   17b4a:	f3bf 8f5b 	dmb	ish
   17b4e:	0653      	lsls	r3, r2, #25
   17b50:	d503      	bpl.n	17b5a <bt_conn_process_tx+0x2e>
}
   17b52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   17b56:	f00a bfbe 	b.w	22ad6 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   17b5a:	2200      	movs	r2, #0
   17b5c:	2300      	movs	r3, #0
   17b5e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17b62:	f00c fc53 	bl	2440c <net_buf_get>
	BT_ASSERT(buf);
   17b66:	4604      	mov	r4, r0
   17b68:	b960      	cbnz	r0, 17b84 <bt_conn_process_tx+0x58>
   17b6a:	4a20      	ldr	r2, [pc, #128]	; (17bec <bt_conn_process_tx+0xc0>)
   17b6c:	4920      	ldr	r1, [pc, #128]	; (17bf0 <bt_conn_process_tx+0xc4>)
   17b6e:	4821      	ldr	r0, [pc, #132]	; (17bf4 <bt_conn_process_tx+0xc8>)
   17b70:	f240 5357 	movw	r3, #1367	; 0x557
   17b74:	f007 fe85 	bl	1f882 <printk>
   17b78:	4040      	eors	r0, r0
   17b7a:	f380 8811 	msr	BASEPRI, r0
   17b7e:	f04f 0003 	mov.w	r0, #3
   17b82:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   17b84:	4f1c      	ldr	r7, [pc, #112]	; (17bf8 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   17b86:	89a1      	ldrh	r1, [r4, #12]
   17b88:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   17b8c:	4291      	cmp	r1, r2
   17b8e:	d807      	bhi.n	17ba0 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   17b90:	2300      	movs	r3, #0
   17b92:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   17b94:	4621      	mov	r1, r4
   17b96:	4628      	mov	r0, r5
   17b98:	f7ff faee 	bl	17178 <send_frag>
	if (!send_buf(conn, buf)) {
   17b9c:	b140      	cbz	r0, 17bb0 <bt_conn_process_tx+0x84>
}
   17b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   17ba0:	f105 060d 	add.w	r6, r5, #13
   17ba4:	4621      	mov	r1, r4
   17ba6:	4630      	mov	r0, r6
   17ba8:	f7ff ff8a 	bl	17ac0 <create_frag.isra.0>
	if (!frag) {
   17bac:	4601      	mov	r1, r0
   17bae:	b920      	cbnz	r0, 17bba <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   17bb0:	4620      	mov	r0, r4
}
   17bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   17bb6:	f004 bb21 	b.w	1c1fc <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17bba:	2301      	movs	r3, #1
   17bbc:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17bbe:	4628      	mov	r0, r5
   17bc0:	f7ff fada 	bl	17178 <send_frag>
   17bc4:	2800      	cmp	r0, #0
   17bc6:	d0f3      	beq.n	17bb0 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   17bc8:	89a2      	ldrh	r2, [r4, #12]
   17bca:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   17bce:	429a      	cmp	r2, r3
   17bd0:	d802      	bhi.n	17bd8 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   17bd2:	2300      	movs	r3, #0
   17bd4:	2203      	movs	r2, #3
   17bd6:	e7dd      	b.n	17b94 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   17bd8:	4621      	mov	r1, r4
   17bda:	4630      	mov	r0, r6
   17bdc:	f7ff ff70 	bl	17ac0 <create_frag.isra.0>
		if (!frag) {
   17be0:	4601      	mov	r1, r0
   17be2:	2800      	cmp	r0, #0
   17be4:	d0e4      	beq.n	17bb0 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17be6:	2301      	movs	r3, #1
   17be8:	461a      	mov	r2, r3
   17bea:	e7e8      	b.n	17bbe <bt_conn_process_tx+0x92>
   17bec:	000279ca 	.word	0x000279ca
   17bf0:	00026d98 	.word	0x00026d98
   17bf4:	00027066 	.word	0x00027066
   17bf8:	200002a0 	.word	0x200002a0

00017bfc <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   17bfc:	4b0c      	ldr	r3, [pc, #48]	; (17c30 <bt_conn_auth_cb_register+0x34>)
   17bfe:	b908      	cbnz	r0, 17c04 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   17c00:	6018      	str	r0, [r3, #0]
		return 0;
   17c02:	4770      	bx	lr
	}

	if (bt_auth) {
   17c04:	681a      	ldr	r2, [r3, #0]
   17c06:	b962      	cbnz	r2, 17c22 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   17c08:	6902      	ldr	r2, [r0, #16]
   17c0a:	b93a      	cbnz	r2, 17c1c <bt_conn_auth_cb_register+0x20>
   17c0c:	6802      	ldr	r2, [r0, #0]
   17c0e:	b95a      	cbnz	r2, 17c28 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   17c10:	6842      	ldr	r2, [r0, #4]
   17c12:	b94a      	cbnz	r2, 17c28 <bt_conn_auth_cb_register+0x2c>
   17c14:	6882      	ldr	r2, [r0, #8]
   17c16:	b93a      	cbnz	r2, 17c28 <bt_conn_auth_cb_register+0x2c>
   17c18:	6942      	ldr	r2, [r0, #20]
   17c1a:	b92a      	cbnz	r2, 17c28 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   17c1c:	6018      	str	r0, [r3, #0]
	return 0;
   17c1e:	2000      	movs	r0, #0
   17c20:	4770      	bx	lr
		return -EALREADY;
   17c22:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17c26:	4770      	bx	lr
		return -EINVAL;
   17c28:	f06f 0015 	mvn.w	r0, #21
}
   17c2c:	4770      	bx	lr
   17c2e:	bf00      	nop
   17c30:	20002ed4 	.word	0x20002ed4

00017c34 <bt_conn_auth_passkey_entry>:

int bt_conn_auth_passkey_entry(struct bt_conn *conn, unsigned int passkey)
{
	if (!bt_auth) {
   17c34:	4a06      	ldr	r2, [pc, #24]	; (17c50 <bt_conn_auth_passkey_entry+0x1c>)
   17c36:	6812      	ldr	r2, [r2, #0]
{
   17c38:	b508      	push	{r3, lr}
	if (!bt_auth) {
   17c3a:	b132      	cbz	r2, 17c4a <bt_conn_auth_passkey_entry+0x16>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) && conn->type == BT_CONN_TYPE_LE) {
   17c3c:	7883      	ldrb	r3, [r0, #2]
   17c3e:	2b01      	cmp	r3, #1
   17c40:	d103      	bne.n	17c4a <bt_conn_auth_passkey_entry+0x16>
		bt_smp_auth_passkey_entry(conn, passkey);
   17c42:	f00c fac9 	bl	241d8 <bt_smp_auth_passkey_entry>
		return 0;
   17c46:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_BREDR) && conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_entry(conn, passkey);
	}

	return -EINVAL;
}
   17c48:	bd08      	pop	{r3, pc}
		return -EINVAL;
   17c4a:	f06f 0015 	mvn.w	r0, #21
   17c4e:	e7fb      	b.n	17c48 <bt_conn_auth_passkey_entry+0x14>
   17c50:	20002ed4 	.word	0x20002ed4

00017c54 <bt_conn_auth_passkey_confirm>:

int bt_conn_auth_passkey_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   17c54:	4a05      	ldr	r2, [pc, #20]	; (17c6c <bt_conn_auth_passkey_confirm+0x18>)
   17c56:	6812      	ldr	r2, [r2, #0]
   17c58:	b122      	cbz	r2, 17c64 <bt_conn_auth_passkey_confirm+0x10>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) &&
   17c5a:	7883      	ldrb	r3, [r0, #2]
   17c5c:	2b01      	cmp	r3, #1
   17c5e:	d101      	bne.n	17c64 <bt_conn_auth_passkey_confirm+0x10>
	    conn->type == BT_CONN_TYPE_LE) {
		return bt_smp_auth_passkey_confirm(conn);
   17c60:	f00c baf2 	b.w	24248 <bt_smp_auth_passkey_confirm>
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_confirm(conn);
	}

	return -EINVAL;
}
   17c64:	f06f 0015 	mvn.w	r0, #21
   17c68:	4770      	bx	lr
   17c6a:	bf00      	nop
   17c6c:	20002ed4 	.word	0x20002ed4

00017c70 <bt_conn_auth_pairing_confirm>:
	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   17c70:	4a05      	ldr	r2, [pc, #20]	; (17c88 <bt_conn_auth_pairing_confirm+0x18>)
   17c72:	6812      	ldr	r2, [r2, #0]
   17c74:	b122      	cbz	r2, 17c80 <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
   17c76:	7883      	ldrb	r3, [r0, #2]
   17c78:	2b01      	cmp	r3, #1
   17c7a:	d101      	bne.n	17c80 <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
   17c7c:	f00c ba35 	b.w	240ea <bt_smp_auth_pairing_confirm>
		return bt_ssp_auth_pairing_confirm(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
   17c80:	f06f 0015 	mvn.w	r0, #21
   17c84:	4770      	bx	lr
   17c86:	bf00      	nop
   17c88:	20002ed4 	.word	0x20002ed4

00017c8c <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   17c8c:	4b03      	ldr	r3, [pc, #12]	; (17c9c <bt_conn_index+0x10>)
   17c8e:	1ac0      	subs	r0, r0, r3
   17c90:	4b03      	ldr	r3, [pc, #12]	; (17ca0 <bt_conn_index+0x14>)
   17c92:	1180      	asrs	r0, r0, #6
   17c94:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   17c96:	b2c0      	uxtb	r0, r0
   17c98:	4770      	bx	lr
   17c9a:	bf00      	nop
   17c9c:	20001740 	.word	0x20001740
   17ca0:	aaaaaaab 	.word	0xaaaaaaab

00017ca4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17ca4:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   17ca6:	490b      	ldr	r1, [pc, #44]	; (17cd4 <bt_conn_init+0x30>)
   17ca8:	480b      	ldr	r0, [pc, #44]	; (17cd8 <bt_conn_init+0x34>)
   17caa:	f00c ff73 	bl	24b94 <k_queue_append>
   17cae:	490b      	ldr	r1, [pc, #44]	; (17cdc <bt_conn_init+0x38>)
   17cb0:	4809      	ldr	r0, [pc, #36]	; (17cd8 <bt_conn_init+0x34>)
   17cb2:	f00c ff6f 	bl	24b94 <k_queue_append>
   17cb6:	490a      	ldr	r1, [pc, #40]	; (17ce0 <bt_conn_init+0x3c>)
   17cb8:	4807      	ldr	r0, [pc, #28]	; (17cd8 <bt_conn_init+0x34>)
   17cba:	f00c ff6b 	bl	24b94 <k_queue_append>
	}

	bt_att_init();
   17cbe:	f00b fba7 	bl	23410 <bt_att_init>

	err = bt_smp_init();
   17cc2:	f004 f817 	bl	1bcf4 <bt_smp_init>
	if (err) {
   17cc6:	4604      	mov	r4, r0
   17cc8:	b908      	cbnz	r0, 17cce <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   17cca:	f00b f894 	bl	22df6 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17cce:	4620      	mov	r0, r4
   17cd0:	bd10      	pop	{r4, pc}
   17cd2:	bf00      	nop
   17cd4:	20002edc 	.word	0x20002edc
   17cd8:	200008d0 	.word	0x200008d0
   17cdc:	20002eec 	.word	0x20002eec
   17ce0:	20002efc 	.word	0x20002efc

00017ce4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   17ce4:	4b0f      	ldr	r3, [pc, #60]	; (17d24 <l2cap_accept+0x40>)
{
   17ce6:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17ce8:	2200      	movs	r2, #0
{
   17cea:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17cec:	26e8      	movs	r6, #232	; 0xe8
		if (l2cap->chan.chan.conn) {
   17cee:	fb06 f502 	mul.w	r5, r6, r2
   17cf2:	58e8      	ldr	r0, [r5, r3]
   17cf4:	b180      	cbz	r0, 17d18 <l2cap_accept+0x34>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17cf6:	3201      	adds	r2, #1
   17cf8:	2a05      	cmp	r2, #5
   17cfa:	d1f8      	bne.n	17cee <l2cap_accept+0xa>
   17cfc:	4b0a      	ldr	r3, [pc, #40]	; (17d28 <l2cap_accept+0x44>)
   17cfe:	4a0b      	ldr	r2, [pc, #44]	; (17d2c <l2cap_accept+0x48>)
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   17d00:	480b      	ldr	r0, [pc, #44]	; (17d30 <l2cap_accept+0x4c>)
   17d02:	1ad2      	subs	r2, r2, r3
   17d04:	08d2      	lsrs	r2, r2, #3
   17d06:	0192      	lsls	r2, r2, #6
   17d08:	f042 0201 	orr.w	r2, r2, #1
   17d0c:	4621      	mov	r1, r4
   17d0e:	f008 fa0a 	bl	20126 <log_1>

	return -ENOMEM;
   17d12:	f06f 000b 	mvn.w	r0, #11
   17d16:	e003      	b.n	17d20 <l2cap_accept+0x3c>
		l2cap->chan.chan.ops = &ops;
   17d18:	442b      	add	r3, r5
   17d1a:	4a06      	ldr	r2, [pc, #24]	; (17d34 <l2cap_accept+0x50>)
   17d1c:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   17d1e:	600b      	str	r3, [r1, #0]
}
   17d20:	bd70      	pop	{r4, r5, r6, pc}
   17d22:	bf00      	nop
   17d24:	20001b00 	.word	0x20001b00
   17d28:	000256c4 	.word	0x000256c4
   17d2c:	00025724 	.word	0x00025724
   17d30:	00027a57 	.word	0x00027a57
   17d34:	00025dd4 	.word	0x00025dd4

00017d38 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   17d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d3a:	4605      	mov	r5, r0
   17d3c:	460f      	mov	r7, r1
   17d3e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   17d40:	2300      	movs	r3, #0
   17d42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17d46:	2104      	movs	r1, #4
   17d48:	2000      	movs	r0, #0
   17d4a:	f7ff fe8f 	bl	17a6c <bt_conn_create_pdu_timeout>
	if (!buf) {
   17d4e:	4604      	mov	r4, r0
   17d50:	b960      	cbnz	r0, 17d6c <l2cap_create_le_sig_pdu.isra.0+0x34>
   17d52:	4a0a      	ldr	r2, [pc, #40]	; (17d7c <l2cap_create_le_sig_pdu.isra.0+0x44>)
   17d54:	4b0a      	ldr	r3, [pc, #40]	; (17d80 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   17d56:	480b      	ldr	r0, [pc, #44]	; (17d84 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   17d58:	1ad2      	subs	r2, r2, r3
   17d5a:	08d2      	lsrs	r2, r2, #3
   17d5c:	0192      	lsls	r2, r2, #6
   17d5e:	f042 0201 	orr.w	r2, r2, #1
   17d62:	4629      	mov	r1, r5
   17d64:	f008 f9df 	bl	20126 <log_1>
}
   17d68:	4620      	mov	r0, r4
   17d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   17d6c:	2104      	movs	r1, #4
   17d6e:	3008      	adds	r0, #8
   17d70:	f00c fb9d 	bl	244ae <net_buf_simple_add>
	hdr->code = code;
   17d74:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   17d76:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   17d78:	8046      	strh	r6, [r0, #2]
	return buf;
   17d7a:	e7f5      	b.n	17d68 <l2cap_create_le_sig_pdu.isra.0+0x30>
   17d7c:	00025724 	.word	0x00025724
   17d80:	000256c4 	.word	0x000256c4
   17d84:	00027a7e 	.word	0x00027a7e

00017d88 <l2cap_rtx_timeout>:
{
   17d88:	b538      	push	{r3, r4, r5, lr}
   17d8a:	4a0b      	ldr	r2, [pc, #44]	; (17db8 <l2cap_rtx_timeout+0x30>)
   17d8c:	4b0b      	ldr	r3, [pc, #44]	; (17dbc <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   17d8e:	4604      	mov	r4, r0
   17d90:	1ad2      	subs	r2, r2, r3
   17d92:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   17d96:	480a      	ldr	r0, [pc, #40]	; (17dc0 <l2cap_rtx_timeout+0x38>)
   17d98:	08d2      	lsrs	r2, r2, #3
   17d9a:	0192      	lsls	r2, r2, #6
   17d9c:	4621      	mov	r1, r4
   17d9e:	f042 0201 	orr.w	r2, r2, #1
   17da2:	f008 f9c0 	bl	20126 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   17da6:	4628      	mov	r0, r5
   17da8:	4621      	mov	r1, r4
   17daa:	f00a ff81 	bl	22cb0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   17dae:	4620      	mov	r0, r4
}
   17db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   17db4:	f00a bf9e 	b.w	22cf4 <bt_l2cap_chan_del>
   17db8:	00025724 	.word	0x00025724
   17dbc:	000256c4 	.word	0x000256c4
   17dc0:	00027aa6 	.word	0x00027aa6

00017dc4 <bt_l2cap_connected>:
{
   17dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17dc8:	4e29      	ldr	r6, [pc, #164]	; (17e70 <bt_l2cap_connected+0xac>)
   17dca:	4f2a      	ldr	r7, [pc, #168]	; (17e74 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   17dcc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 17e78 <bt_l2cap_connected+0xb4>
{
   17dd0:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17dd2:	42be      	cmp	r6, r7
   17dd4:	d302      	bcc.n	17ddc <bt_l2cap_connected+0x18>
}
   17dd6:	b003      	add	sp, #12
   17dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   17ddc:	6873      	ldr	r3, [r6, #4]
   17dde:	a901      	add	r1, sp, #4
   17de0:	4620      	mov	r0, r4
   17de2:	4798      	blx	r3
   17de4:	2800      	cmp	r0, #0
   17de6:	db3d      	blt.n	17e64 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   17de8:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   17dea:	8833      	ldrh	r3, [r6, #0]
   17dec:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   17df0:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   17df4:	4641      	mov	r1, r8
   17df6:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17dfa:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   17dfe:	f00c ffb7 	bl	24d70 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17e02:	f3bf 8f5b 	dmb	ish
   17e06:	f105 0368 	add.w	r3, r5, #104	; 0x68
   17e0a:	2200      	movs	r2, #0
   17e0c:	e853 1f00 	ldrex	r1, [r3]
   17e10:	e843 2000 	strex	r0, r2, [r3]
   17e14:	2800      	cmp	r0, #0
   17e16:	d1f9      	bne.n	17e0c <bt_l2cap_connected+0x48>
   17e18:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   17e1c:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   17e1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   17e20:	f105 0308 	add.w	r3, r5, #8
   17e24:	bb02      	cbnz	r2, 17e68 <bt_l2cap_connected+0xa4>
	list->head = node;
   17e26:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   17e2a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   17e2c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   17e2e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   17e30:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   17e34:	681b      	ldr	r3, [r3, #0]
   17e36:	b103      	cbz	r3, 17e3a <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   17e38:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e3a:	9b01      	ldr	r3, [sp, #4]
   17e3c:	f3bf 8f5b 	dmb	ish
   17e40:	3368      	adds	r3, #104	; 0x68
   17e42:	e853 2f00 	ldrex	r2, [r3]
   17e46:	f042 0201 	orr.w	r2, r2, #1
   17e4a:	e843 2100 	strex	r1, r2, [r3]
   17e4e:	2900      	cmp	r1, #0
   17e50:	d1f7      	bne.n	17e42 <bt_l2cap_connected+0x7e>
   17e52:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   17e56:	9801      	ldr	r0, [sp, #4]
   17e58:	6843      	ldr	r3, [r0, #4]
   17e5a:	699b      	ldr	r3, [r3, #24]
   17e5c:	b113      	cbz	r3, 17e64 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   17e5e:	f100 0168 	add.w	r1, r0, #104	; 0x68
   17e62:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17e64:	360c      	adds	r6, #12
   17e66:	e7b4      	b.n	17dd2 <bt_l2cap_connected+0xe>
	parent->next = child;
   17e68:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17e6a:	6563      	str	r3, [r4, #84]	; 0x54
}
   17e6c:	e7dd      	b.n	17e2a <bt_l2cap_connected+0x66>
   17e6e:	bf00      	nop
   17e70:	00025600 	.word	0x00025600
   17e74:	00025624 	.word	0x00025624
   17e78:	00017d89 	.word	0x00017d89

00017e7c <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   17e7c:	898b      	ldrh	r3, [r1, #12]
   17e7e:	2b03      	cmp	r3, #3
{
   17e80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17e82:	4606      	mov	r6, r0
   17e84:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   17e86:	d80a      	bhi.n	17e9e <l2cap_recv+0x22>
   17e88:	4931      	ldr	r1, [pc, #196]	; (17f50 <l2cap_recv+0xd4>)
   17e8a:	4b32      	ldr	r3, [pc, #200]	; (17f54 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   17e8c:	4832      	ldr	r0, [pc, #200]	; (17f58 <l2cap_recv+0xdc>)
   17e8e:	1ac9      	subs	r1, r1, r3
   17e90:	08c9      	lsrs	r1, r1, #3
   17e92:	0189      	lsls	r1, r1, #6
   17e94:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   17e98:	f008 f938 	bl	2010c <log_0>
		return 0;
   17e9c:	e013      	b.n	17ec6 <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   17e9e:	2104      	movs	r1, #4
   17ea0:	f105 0008 	add.w	r0, r5, #8
   17ea4:	f00c fb2a 	bl	244fc <net_buf_simple_pull_mem>
	if (buf->len != len) {
   17ea8:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   17eaa:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   17eac:	428a      	cmp	r2, r1
   17eae:	4604      	mov	r4, r0
   17eb0:	d00c      	beq.n	17ecc <l2cap_recv+0x50>
   17eb2:	4828      	ldr	r0, [pc, #160]	; (17f54 <l2cap_recv+0xd8>)
   17eb4:	4b26      	ldr	r3, [pc, #152]	; (17f50 <l2cap_recv+0xd4>)
   17eb6:	1a1b      	subs	r3, r3, r0
   17eb8:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   17eba:	019b      	lsls	r3, r3, #6
   17ebc:	4827      	ldr	r0, [pc, #156]	; (17f5c <l2cap_recv+0xe0>)
   17ebe:	f043 0301 	orr.w	r3, r3, #1
   17ec2:	f008 f944 	bl	2014e <log_2>
}
   17ec6:	2000      	movs	r0, #0
   17ec8:	b002      	add	sp, #8
   17eca:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   17ecc:	7843      	ldrb	r3, [r0, #1]
   17ece:	b943      	cbnz	r3, 17ee2 <l2cap_recv+0x66>
   17ed0:	491f      	ldr	r1, [pc, #124]	; (17f50 <l2cap_recv+0xd4>)
   17ed2:	4b20      	ldr	r3, [pc, #128]	; (17f54 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   17ed4:	4822      	ldr	r0, [pc, #136]	; (17f60 <l2cap_recv+0xe4>)
   17ed6:	1ac9      	subs	r1, r1, r3
   17ed8:	08c9      	lsrs	r1, r1, #3
   17eda:	0189      	lsls	r1, r1, #6
   17edc:	f041 0101 	orr.w	r1, r1, #1
   17ee0:	e7da      	b.n	17e98 <l2cap_recv+0x1c>
	switch (hdr->code) {
   17ee2:	7801      	ldrb	r1, [r0, #0]
   17ee4:	2901      	cmp	r1, #1
   17ee6:	d0ee      	beq.n	17ec6 <l2cap_recv+0x4a>
   17ee8:	2913      	cmp	r1, #19
   17eea:	d10a      	bne.n	17f02 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   17eec:	2a01      	cmp	r2, #1
   17eee:	d8ea      	bhi.n	17ec6 <l2cap_recv+0x4a>
   17ef0:	4917      	ldr	r1, [pc, #92]	; (17f50 <l2cap_recv+0xd4>)
   17ef2:	4b18      	ldr	r3, [pc, #96]	; (17f54 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   17ef4:	481b      	ldr	r0, [pc, #108]	; (17f64 <l2cap_recv+0xe8>)
   17ef6:	1ac9      	subs	r1, r1, r3
   17ef8:	08c9      	lsrs	r1, r1, #3
   17efa:	0189      	lsls	r1, r1, #6
   17efc:	f041 0101 	orr.w	r1, r1, #1
   17f00:	e7ca      	b.n	17e98 <l2cap_recv+0x1c>
   17f02:	4b14      	ldr	r3, [pc, #80]	; (17f54 <l2cap_recv+0xd8>)
   17f04:	4a12      	ldr	r2, [pc, #72]	; (17f50 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   17f06:	4818      	ldr	r0, [pc, #96]	; (17f68 <l2cap_recv+0xec>)
   17f08:	1ad2      	subs	r2, r2, r3
   17f0a:	08d2      	lsrs	r2, r2, #3
   17f0c:	0192      	lsls	r2, r2, #6
   17f0e:	f042 0202 	orr.w	r2, r2, #2
   17f12:	f008 f908 	bl	20126 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17f16:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   17f18:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17f1a:	2202      	movs	r2, #2
   17f1c:	2001      	movs	r0, #1
   17f1e:	f7ff ff0b 	bl	17d38 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   17f22:	4604      	mov	r4, r0
   17f24:	2800      	cmp	r0, #0
   17f26:	d0ce      	beq.n	17ec6 <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   17f28:	2102      	movs	r1, #2
   17f2a:	3008      	adds	r0, #8
   17f2c:	f00c fabf 	bl	244ae <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   17f30:	2300      	movs	r3, #0
   17f32:	7003      	strb	r3, [r0, #0]
   17f34:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   17f36:	4622      	mov	r2, r4
   17f38:	9300      	str	r3, [sp, #0]
   17f3a:	2105      	movs	r1, #5
   17f3c:	4628      	mov	r0, r5
   17f3e:	f00a ff21 	bl	22d84 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   17f42:	2800      	cmp	r0, #0
   17f44:	d0bf      	beq.n	17ec6 <l2cap_recv+0x4a>
		net_buf_unref(buf);
   17f46:	4620      	mov	r0, r4
   17f48:	f004 f958 	bl	1c1fc <net_buf_unref>
   17f4c:	e7bb      	b.n	17ec6 <l2cap_recv+0x4a>
   17f4e:	bf00      	nop
   17f50:	00025724 	.word	0x00025724
   17f54:	000256c4 	.word	0x000256c4
   17f58:	00027ab6 	.word	0x00027ab6
   17f5c:	00027ad4 	.word	0x00027ad4
   17f60:	00027af5 	.word	0x00027af5
   17f64:	00027b16 	.word	0x00027b16
   17f68:	00027b32 	.word	0x00027b32

00017f6c <bt_l2cap_recv>:
{
   17f6c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   17f6e:	898b      	ldrh	r3, [r1, #12]
   17f70:	2b03      	cmp	r3, #3
{
   17f72:	4605      	mov	r5, r0
   17f74:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   17f76:	d80e      	bhi.n	17f96 <bt_l2cap_recv+0x2a>
   17f78:	4914      	ldr	r1, [pc, #80]	; (17fcc <bt_l2cap_recv+0x60>)
   17f7a:	4b15      	ldr	r3, [pc, #84]	; (17fd0 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   17f7c:	4815      	ldr	r0, [pc, #84]	; (17fd4 <bt_l2cap_recv+0x68>)
   17f7e:	1ac9      	subs	r1, r1, r3
   17f80:	08c9      	lsrs	r1, r1, #3
   17f82:	0189      	lsls	r1, r1, #6
   17f84:	f041 0101 	orr.w	r1, r1, #1
   17f88:	f008 f8c0 	bl	2010c <log_0>
	net_buf_unref(buf);
   17f8c:	4620      	mov	r0, r4
}
   17f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   17f92:	f004 b933 	b.w	1c1fc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   17f96:	2104      	movs	r1, #4
   17f98:	f104 0008 	add.w	r0, r4, #8
   17f9c:	f00c faae 	bl	244fc <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   17fa0:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   17fa2:	4628      	mov	r0, r5
   17fa4:	f00a ff17 	bl	22dd6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17fa8:	b950      	cbnz	r0, 17fc0 <bt_l2cap_recv+0x54>
   17faa:	4b09      	ldr	r3, [pc, #36]	; (17fd0 <bt_l2cap_recv+0x64>)
   17fac:	4a07      	ldr	r2, [pc, #28]	; (17fcc <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   17fae:	480a      	ldr	r0, [pc, #40]	; (17fd8 <bt_l2cap_recv+0x6c>)
   17fb0:	1ad2      	subs	r2, r2, r3
   17fb2:	08d2      	lsrs	r2, r2, #3
   17fb4:	0192      	lsls	r2, r2, #6
   17fb6:	f042 0202 	orr.w	r2, r2, #2
   17fba:	f008 f8b4 	bl	20126 <log_1>
		net_buf_unref(buf);
   17fbe:	e7e5      	b.n	17f8c <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   17fc0:	6843      	ldr	r3, [r0, #4]
   17fc2:	4621      	mov	r1, r4
   17fc4:	691b      	ldr	r3, [r3, #16]
   17fc6:	4798      	blx	r3
   17fc8:	e7e0      	b.n	17f8c <bt_l2cap_recv+0x20>
   17fca:	bf00      	nop
   17fcc:	00025724 	.word	0x00025724
   17fd0:	000256c4 	.word	0x000256c4
   17fd4:	00027b50 	.word	0x00027b50
   17fd8:	00027b6d 	.word	0x00027b6d

00017fdc <bt_l2cap_update_conn_param>:
{
   17fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   17fde:	4b17      	ldr	r3, [pc, #92]	; (1803c <bt_l2cap_update_conn_param+0x60>)
   17fe0:	781a      	ldrb	r2, [r3, #0]
   17fe2:	3201      	adds	r2, #1
	if (!ident) {
   17fe4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   17fe8:	bf08      	it	eq
   17fea:	2201      	moveq	r2, #1
   17fec:	701a      	strb	r2, [r3, #0]
{
   17fee:	4606      	mov	r6, r0
   17ff0:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   17ff2:	2208      	movs	r2, #8
   17ff4:	7819      	ldrb	r1, [r3, #0]
   17ff6:	2012      	movs	r0, #18
   17ff8:	f7ff fe9e 	bl	17d38 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   17ffc:	4604      	mov	r4, r0
   17ffe:	b1d0      	cbz	r0, 18036 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   18000:	2108      	movs	r1, #8
   18002:	4408      	add	r0, r1
   18004:	f00c fa53 	bl	244ae <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18008:	882b      	ldrh	r3, [r5, #0]
   1800a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1800c:	886b      	ldrh	r3, [r5, #2]
   1800e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18010:	88ab      	ldrh	r3, [r5, #4]
   18012:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18014:	88eb      	ldrh	r3, [r5, #6]
   18016:	80c3      	strh	r3, [r0, #6]
   18018:	2300      	movs	r3, #0
   1801a:	9300      	str	r3, [sp, #0]
   1801c:	4622      	mov	r2, r4
   1801e:	2105      	movs	r1, #5
   18020:	4630      	mov	r0, r6
   18022:	f00a feaf 	bl	22d84 <bt_l2cap_send_cb>
	if (err) {
   18026:	4605      	mov	r5, r0
   18028:	b110      	cbz	r0, 18030 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1802a:	4620      	mov	r0, r4
   1802c:	f004 f8e6 	bl	1c1fc <net_buf_unref>
}
   18030:	4628      	mov	r0, r5
   18032:	b002      	add	sp, #8
   18034:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18036:	f06f 050b 	mvn.w	r5, #11
   1803a:	e7f9      	b.n	18030 <bt_l2cap_update_conn_param+0x54>
   1803c:	2000349b 	.word	0x2000349b

00018040 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   18040:	4b02      	ldr	r3, [pc, #8]	; (1804c <att_cfm_sent+0xc>)
   18042:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   18046:	f00a bf04 	b.w	22e52 <att_sent>
   1804a:	bf00      	nop
   1804c:	0002315d 	.word	0x0002315d

00018050 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   18050:	4b02      	ldr	r3, [pc, #8]	; (1805c <att_rsp_sent+0xc>)
   18052:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   18056:	f00a befc 	b.w	22e52 <att_sent>
   1805a:	bf00      	nop
   1805c:	00023141 	.word	0x00023141

00018060 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   18060:	4b02      	ldr	r3, [pc, #8]	; (1806c <att_req_sent+0xc>)
   18062:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   18066:	f00a bef4 	b.w	22e52 <att_sent>
   1806a:	bf00      	nop
   1806c:	00023127 	.word	0x00023127

00018070 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   18070:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18072:	3808      	subs	r0, #8
   18074:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   18076:	a901      	add	r1, sp, #4
   18078:	4802      	ldr	r0, [pc, #8]	; (18084 <bt_att_released+0x14>)
   1807a:	f00c fccb 	bl	24a14 <k_mem_slab_free>
}
   1807e:	b003      	add	sp, #12
   18080:	f85d fb04 	ldr.w	pc, [sp], #4
   18084:	200007e4 	.word	0x200007e4

00018088 <read_group_cb>:
{
   18088:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1808c:	4606      	mov	r6, r0
   1808e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18090:	f04f 0800 	mov.w	r8, #0
   18094:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18098:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1809a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1809c:	f88d 8008 	strb.w	r8, [sp, #8]
   180a0:	a902      	add	r1, sp, #8
{
   180a2:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   180a4:	f8ad 300a 	strh.w	r3, [sp, #10]
   180a8:	f00a f9bc 	bl	22424 <bt_uuid_cmp>
   180ac:	b1a0      	cbz	r0, 180d8 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   180ae:	f642 0301 	movw	r3, #10241	; 0x2801
   180b2:	6830      	ldr	r0, [r6, #0]
   180b4:	f88d 800c 	strb.w	r8, [sp, #12]
   180b8:	a903      	add	r1, sp, #12
   180ba:	f8ad 300e 	strh.w	r3, [sp, #14]
   180be:	f00a f9b1 	bl	22424 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   180c2:	b148      	cbz	r0, 180d8 <read_group_cb+0x50>
		if (data->group &&
   180c4:	6923      	ldr	r3, [r4, #16]
   180c6:	b11b      	cbz	r3, 180d0 <read_group_cb+0x48>
   180c8:	885a      	ldrh	r2, [r3, #2]
   180ca:	42aa      	cmp	r2, r5
   180cc:	d200      	bcs.n	180d0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   180ce:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   180d0:	2001      	movs	r0, #1
}
   180d2:	b004      	add	sp, #16
   180d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   180d8:	6861      	ldr	r1, [r4, #4]
   180da:	6830      	ldr	r0, [r6, #0]
   180dc:	f00a f9a2 	bl	22424 <bt_uuid_cmp>
   180e0:	b110      	cbz	r0, 180e8 <read_group_cb+0x60>
		data->group = NULL;
   180e2:	2300      	movs	r3, #0
   180e4:	6123      	str	r3, [r4, #16]
   180e6:	e7f3      	b.n	180d0 <read_group_cb+0x48>
	if (data->rsp->len &&
   180e8:	68e3      	ldr	r3, [r4, #12]
   180ea:	68a0      	ldr	r0, [r4, #8]
   180ec:	781a      	ldrb	r2, [r3, #0]
   180ee:	b13a      	cbz	r2, 18100 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   180f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   180f4:	8981      	ldrh	r1, [r0, #12]
   180f6:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   180f8:	4293      	cmp	r3, r2
   180fa:	da01      	bge.n	18100 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   180fc:	2000      	movs	r0, #0
   180fe:	e7e8      	b.n	180d2 <read_group_cb+0x4a>
   18100:	2104      	movs	r1, #4
   18102:	3008      	adds	r0, #8
   18104:	f00c f9d3 	bl	244ae <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18108:	4b09      	ldr	r3, [pc, #36]	; (18130 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1810a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1810c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1810e:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18110:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18112:	4631      	mov	r1, r6
   18114:	9300      	str	r3, [sp, #0]
   18116:	9401      	str	r4, [sp, #4]
   18118:	2300      	movs	r3, #0
   1811a:	4638      	mov	r0, r7
   1811c:	f00a fee9 	bl	22ef2 <att_chan_read>
	if (read < 0) {
   18120:	2800      	cmp	r0, #0
   18122:	dbeb      	blt.n	180fc <read_group_cb+0x74>
	if (!data->group) {
   18124:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   18126:	3800      	subs	r0, #0
   18128:	bf18      	it	ne
   1812a:	2001      	movne	r0, #1
   1812c:	e7d1      	b.n	180d2 <read_group_cb+0x4a>
   1812e:	bf00      	nop
   18130:	000230a1 	.word	0x000230a1

00018134 <read_type_cb>:
{
   18134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   18138:	f8d2 8000 	ldr.w	r8, [r2]
{
   1813c:	4606      	mov	r6, r0
   1813e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18140:	6800      	ldr	r0, [r0, #0]
   18142:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   18144:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   18148:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1814a:	f00a f96b 	bl	22424 <bt_uuid_cmp>
   1814e:	4607      	mov	r7, r0
   18150:	2800      	cmp	r0, #0
   18152:	d13e      	bne.n	181d2 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18154:	4628      	mov	r0, r5
   18156:	2215      	movs	r2, #21
   18158:	4631      	mov	r1, r6
   1815a:	f00b fc4c 	bl	239f6 <bt_gatt_check_perm>
   1815e:	4605      	mov	r5, r0
   18160:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18162:	b148      	cbz	r0, 18178 <read_type_cb+0x44>
		if (data->rsp->len) {
   18164:	68e3      	ldr	r3, [r4, #12]
   18166:	781b      	ldrb	r3, [r3, #0]
   18168:	b923      	cbnz	r3, 18174 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1816a:	2500      	movs	r5, #0
}
   1816c:	4628      	mov	r0, r5
   1816e:	b003      	add	sp, #12
   18170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   18174:	7527      	strb	r7, [r4, #20]
   18176:	e7f8      	b.n	1816a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18178:	68a0      	ldr	r0, [r4, #8]
   1817a:	f00c f976 	bl	2446a <net_buf_frag_last>
   1817e:	2102      	movs	r1, #2
   18180:	3008      	adds	r0, #8
   18182:	f00c f994 	bl	244ae <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18186:	4b14      	ldr	r3, [pc, #80]	; (181d8 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18188:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1818a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   1818c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18190:	4631      	mov	r1, r6
   18192:	9300      	str	r3, [sp, #0]
   18194:	9401      	str	r4, [sp, #4]
   18196:	462b      	mov	r3, r5
   18198:	4640      	mov	r0, r8
   1819a:	f00a feaa 	bl	22ef2 <att_chan_read>
	if (read < 0) {
   1819e:	2800      	cmp	r0, #0
   181a0:	da07      	bge.n	181b2 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   181a2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   181a6:	bf26      	itte	cs
   181a8:	4240      	negcs	r0, r0
   181aa:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   181ac:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   181ae:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   181b0:	e7dc      	b.n	1816c <read_type_cb+0x38>
	if (!data->item) {
   181b2:	6923      	ldr	r3, [r4, #16]
   181b4:	2b00      	cmp	r3, #0
   181b6:	d0d8      	beq.n	1816a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   181b8:	68a0      	ldr	r0, [r4, #8]
   181ba:	f00a fe42 	bl	22e42 <net_buf_frags_len>
   181be:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   181c2:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   181c4:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   181c6:	7818      	ldrb	r0, [r3, #0]
   181c8:	4285      	cmp	r5, r0
   181ca:	bf94      	ite	ls
   181cc:	2500      	movls	r5, #0
   181ce:	2501      	movhi	r5, #1
   181d0:	e7cc      	b.n	1816c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   181d2:	2501      	movs	r5, #1
   181d4:	e7ca      	b.n	1816c <read_type_cb+0x38>
   181d6:	bf00      	nop
   181d8:	00022e5f 	.word	0x00022e5f

000181dc <find_type_cb>:
{
   181dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   181e0:	f8d2 9000 	ldr.w	r9, [r2]
{
   181e4:	b091      	sub	sp, #68	; 0x44
   181e6:	4607      	mov	r7, r0
   181e8:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   181ea:	2500      	movs	r5, #0
   181ec:	f642 0301 	movw	r3, #10241	; 0x2801
   181f0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   181f2:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   181f6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   181fa:	a90b      	add	r1, sp, #44	; 0x2c
{
   181fc:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   181fe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18202:	f00a f90f 	bl	22424 <bt_uuid_cmp>
   18206:	2800      	cmp	r0, #0
   18208:	d066      	beq.n	182d8 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1820a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1820e:	6838      	ldr	r0, [r7, #0]
   18210:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18214:	a90b      	add	r1, sp, #44	; 0x2c
   18216:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1821a:	f00a f903 	bl	22424 <bt_uuid_cmp>
   1821e:	b138      	cbz	r0, 18230 <find_type_cb+0x54>
		if (data->group &&
   18220:	68a3      	ldr	r3, [r4, #8]
   18222:	b11b      	cbz	r3, 1822c <find_type_cb+0x50>
   18224:	885a      	ldrh	r2, [r3, #2]
   18226:	42b2      	cmp	r2, r6
   18228:	d200      	bcs.n	1822c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1822a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1822c:	2001      	movs	r0, #1
   1822e:	e009      	b.n	18244 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18230:	6861      	ldr	r1, [r4, #4]
   18232:	4608      	mov	r0, r1
   18234:	f00a fe05 	bl	22e42 <net_buf_frags_len>
   18238:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1823c:	1a1b      	subs	r3, r3, r0
   1823e:	2b03      	cmp	r3, #3
   18240:	d803      	bhi.n	1824a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   18242:	2000      	movs	r0, #0
}
   18244:	b011      	add	sp, #68	; 0x44
   18246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1824a:	4608      	mov	r0, r1
   1824c:	f00c f90d 	bl	2446a <net_buf_frag_last>
   18250:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   18252:	6860      	ldr	r0, [r4, #4]
   18254:	f00a fdf5 	bl	22e42 <net_buf_frags_len>
   18258:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1825c:	f105 0b08 	add.w	fp, r5, #8
   18260:	ebaa 0a00 	sub.w	sl, sl, r0
   18264:	4658      	mov	r0, fp
   18266:	f00c f95d 	bl	24524 <net_buf_simple_tailroom>
   1826a:	4582      	cmp	sl, r0
   1826c:	d237      	bcs.n	182de <find_type_cb+0x102>
   1826e:	6860      	ldr	r0, [r4, #4]
   18270:	f00a fde7 	bl	22e42 <net_buf_frags_len>
   18274:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   18278:	1a18      	subs	r0, r3, r0
	if (!len) {
   1827a:	b970      	cbnz	r0, 1829a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1827c:	6863      	ldr	r3, [r4, #4]
   1827e:	7998      	ldrb	r0, [r3, #6]
   18280:	f003 ff00 	bl	1c084 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18284:	2200      	movs	r2, #0
   18286:	2300      	movs	r3, #0
   18288:	f00c f8bb 	bl	24402 <net_buf_alloc_fixed>
		if (!frag) {
   1828c:	4605      	mov	r5, r0
   1828e:	2800      	cmp	r0, #0
   18290:	d0d7      	beq.n	18242 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   18292:	4601      	mov	r1, r0
   18294:	6860      	ldr	r0, [r4, #4]
   18296:	f00c f8f9 	bl	2448c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1829a:	2300      	movs	r3, #0
   1829c:	9300      	str	r3, [sp, #0]
   1829e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   182a2:	4639      	mov	r1, r7
   182a4:	2310      	movs	r3, #16
   182a6:	aa02      	add	r2, sp, #8
   182a8:	4640      	mov	r0, r8
   182aa:	47c8      	blx	r9
	if (read < 0) {
   182ac:	1e07      	subs	r7, r0, #0
   182ae:	db13      	blt.n	182d8 <find_type_cb+0xfc>
	if (read != data->value_len) {
   182b0:	7c22      	ldrb	r2, [r4, #16]
   182b2:	68e0      	ldr	r0, [r4, #12]
   182b4:	42ba      	cmp	r2, r7
   182b6:	d037      	beq.n	18328 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   182b8:	4601      	mov	r1, r0
   182ba:	a80b      	add	r0, sp, #44	; 0x2c
   182bc:	f00a f8dc 	bl	22478 <bt_uuid_create>
   182c0:	b988      	cbnz	r0, 182e6 <find_type_cb+0x10a>
   182c2:	4a1b      	ldr	r2, [pc, #108]	; (18330 <find_type_cb+0x154>)
   182c4:	4b1b      	ldr	r3, [pc, #108]	; (18334 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   182c6:	7c21      	ldrb	r1, [r4, #16]
   182c8:	481b      	ldr	r0, [pc, #108]	; (18338 <find_type_cb+0x15c>)
   182ca:	1ad2      	subs	r2, r2, r3
   182cc:	08d2      	lsrs	r2, r2, #3
   182ce:	0192      	lsls	r2, r2, #6
   182d0:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   182d4:	f007 ff27 	bl	20126 <log_1>
	data->group = NULL;
   182d8:	2300      	movs	r3, #0
   182da:	60a3      	str	r3, [r4, #8]
   182dc:	e7a6      	b.n	1822c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   182de:	4658      	mov	r0, fp
   182e0:	f00c f920 	bl	24524 <net_buf_simple_tailroom>
   182e4:	e7c9      	b.n	1827a <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   182e6:	b2fa      	uxtb	r2, r7
   182e8:	a902      	add	r1, sp, #8
   182ea:	a806      	add	r0, sp, #24
   182ec:	f00a f8c4 	bl	22478 <bt_uuid_create>
   182f0:	b948      	cbnz	r0, 18306 <find_type_cb+0x12a>
   182f2:	4a0f      	ldr	r2, [pc, #60]	; (18330 <find_type_cb+0x154>)
   182f4:	4b0f      	ldr	r3, [pc, #60]	; (18334 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   182f6:	4811      	ldr	r0, [pc, #68]	; (1833c <find_type_cb+0x160>)
   182f8:	1ad2      	subs	r2, r2, r3
   182fa:	08d2      	lsrs	r2, r2, #3
   182fc:	0192      	lsls	r2, r2, #6
   182fe:	f042 0202 	orr.w	r2, r2, #2
   18302:	4639      	mov	r1, r7
   18304:	e7e6      	b.n	182d4 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18306:	a906      	add	r1, sp, #24
   18308:	a80b      	add	r0, sp, #44	; 0x2c
   1830a:	f00a f88b 	bl	22424 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1830e:	2800      	cmp	r0, #0
   18310:	d1e2      	bne.n	182d8 <find_type_cb+0xfc>
	data->err = 0x00;
   18312:	2300      	movs	r3, #0
   18314:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18316:	2104      	movs	r1, #4
   18318:	f105 0008 	add.w	r0, r5, #8
   1831c:	f00c f8c7 	bl	244ae <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18320:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18322:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18324:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   18326:	e781      	b.n	1822c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   18328:	a902      	add	r1, sp, #8
   1832a:	f009 ff4d 	bl	221c8 <memcmp>
   1832e:	e7ee      	b.n	1830e <find_type_cb+0x132>
   18330:	000256d4 	.word	0x000256d4
   18334:	000256c4 	.word	0x000256c4
   18338:	00027ba9 	.word	0x00027ba9
   1833c:	00027bc8 	.word	0x00027bc8

00018340 <chan_send>:
{
   18340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18344:	688b      	ldr	r3, [r1, #8]
   18346:	781b      	ldrb	r3, [r3, #0]
   18348:	2bd2      	cmp	r3, #210	; 0xd2
{
   1834a:	4606      	mov	r6, r0
   1834c:	460c      	mov	r4, r1
   1834e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18350:	d116      	bne.n	18380 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   18352:	6803      	ldr	r3, [r0, #0]
   18354:	6818      	ldr	r0, [r3, #0]
   18356:	f00b fea4 	bl	240a2 <bt_smp_sign>
		if (err) {
   1835a:	4605      	mov	r5, r0
   1835c:	b180      	cbz	r0, 18380 <chan_send+0x40>
   1835e:	4b24      	ldr	r3, [pc, #144]	; (183f0 <chan_send+0xb0>)
   18360:	4924      	ldr	r1, [pc, #144]	; (183f4 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   18362:	4825      	ldr	r0, [pc, #148]	; (183f8 <chan_send+0xb8>)
   18364:	1ac9      	subs	r1, r1, r3
   18366:	08c9      	lsrs	r1, r1, #3
   18368:	0189      	lsls	r1, r1, #6
   1836a:	f041 0101 	orr.w	r1, r1, #1
   1836e:	f007 fecd 	bl	2010c <log_0>
			net_buf_unref(buf);
   18372:	4620      	mov	r0, r4
   18374:	f003 ff42 	bl	1c1fc <net_buf_unref>
}
   18378:	4628      	mov	r0, r5
   1837a:	b003      	add	sp, #12
   1837c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18380:	f104 0008 	add.w	r0, r4, #8
   18384:	f00c f8ca 	bl	2451c <net_buf_simple_headroom>
	state->len = buf->len;
   18388:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1838c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1838e:	b957      	cbnz	r7, 183a6 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   18390:	68a3      	ldr	r3, [r4, #8]
   18392:	7818      	ldrb	r0, [r3, #0]
   18394:	f00a fd75 	bl	22e82 <att_op_get_type>
   18398:	1e43      	subs	r3, r0, #1
   1839a:	b2db      	uxtb	r3, r3
   1839c:	2b04      	cmp	r3, #4
   1839e:	bf9c      	itt	ls
   183a0:	4a16      	ldrls	r2, [pc, #88]	; (183fc <chan_send+0xbc>)
   183a2:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   183a6:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   183a8:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   183ac:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   183ae:	4b14      	ldr	r3, [pc, #80]	; (18400 <chan_send+0xc0>)
   183b0:	429f      	cmp	r7, r3
   183b2:	d018      	beq.n	183e6 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   183b4:	4b13      	ldr	r3, [pc, #76]	; (18404 <chan_send+0xc4>)
   183b6:	429f      	cmp	r7, r3
   183b8:	d017      	beq.n	183ea <chan_send+0xaa>
		return att_sent;
   183ba:	4913      	ldr	r1, [pc, #76]	; (18408 <chan_send+0xc8>)
   183bc:	4b13      	ldr	r3, [pc, #76]	; (1840c <chan_send+0xcc>)
   183be:	4a14      	ldr	r2, [pc, #80]	; (18410 <chan_send+0xd0>)
   183c0:	428f      	cmp	r7, r1
   183c2:	bf18      	it	ne
   183c4:	4613      	movne	r3, r2
			       &chan->chan.chan);
   183c6:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   183c8:	9600      	str	r6, [sp, #0]
   183ca:	4622      	mov	r2, r4
   183cc:	2104      	movs	r1, #4
   183ce:	f00a fcd9 	bl	22d84 <bt_l2cap_send_cb>
	if (err) {
   183d2:	4605      	mov	r5, r0
   183d4:	2800      	cmp	r0, #0
   183d6:	d0cf      	beq.n	18378 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   183d8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   183da:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   183de:	fa10 f088 	uxtah	r0, r0, r8
   183e2:	60a0      	str	r0, [r4, #8]
}
   183e4:	e7c8      	b.n	18378 <chan_send+0x38>
		return att_rsp_sent;
   183e6:	4b0b      	ldr	r3, [pc, #44]	; (18414 <chan_send+0xd4>)
   183e8:	e7ed      	b.n	183c6 <chan_send+0x86>
		return att_cfm_sent;
   183ea:	4b0b      	ldr	r3, [pc, #44]	; (18418 <chan_send+0xd8>)
   183ec:	e7eb      	b.n	183c6 <chan_send+0x86>
   183ee:	bf00      	nop
   183f0:	000256c4 	.word	0x000256c4
   183f4:	000256d4 	.word	0x000256d4
   183f8:	00027be7 	.word	0x00027be7
   183fc:	00025df4 	.word	0x00025df4
   18400:	00023141 	.word	0x00023141
   18404:	0002315d 	.word	0x0002315d
   18408:	00023127 	.word	0x00023127
   1840c:	00018061 	.word	0x00018061
   18410:	00022e53 	.word	0x00022e53
   18414:	00018051 	.word	0x00018051
   18418:	00018041 	.word	0x00018041

0001841c <att_get>:
{
   1841c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1841e:	7b43      	ldrb	r3, [r0, #13]
   18420:	2b07      	cmp	r3, #7
   18422:	d00b      	beq.n	1843c <att_get+0x20>
   18424:	4918      	ldr	r1, [pc, #96]	; (18488 <att_get+0x6c>)
   18426:	4b19      	ldr	r3, [pc, #100]	; (1848c <att_get+0x70>)
		BT_WARN("Not connected");
   18428:	4819      	ldr	r0, [pc, #100]	; (18490 <att_get+0x74>)
   1842a:	1ac9      	subs	r1, r1, r3
   1842c:	08c9      	lsrs	r1, r1, #3
   1842e:	0189      	lsls	r1, r1, #6
   18430:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   18434:	f007 fe6a 	bl	2010c <log_0>
		return NULL;
   18438:	2400      	movs	r4, #0
   1843a:	e00e      	b.n	1845a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1843c:	2104      	movs	r1, #4
   1843e:	f00a fcca 	bl	22dd6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18442:	4604      	mov	r4, r0
   18444:	b958      	cbnz	r0, 1845e <att_get+0x42>
   18446:	4910      	ldr	r1, [pc, #64]	; (18488 <att_get+0x6c>)
   18448:	4b10      	ldr	r3, [pc, #64]	; (1848c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   1844a:	4812      	ldr	r0, [pc, #72]	; (18494 <att_get+0x78>)
   1844c:	1ac9      	subs	r1, r1, r3
   1844e:	08c9      	lsrs	r1, r1, #3
   18450:	0189      	lsls	r1, r1, #6
   18452:	f041 0101 	orr.w	r1, r1, #1
   18456:	f007 fe59 	bl	2010c <log_0>
}
   1845a:	4620      	mov	r0, r4
   1845c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1845e:	f3bf 8f5b 	dmb	ish
   18462:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   18466:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1846a:	075b      	lsls	r3, r3, #29
   1846c:	d508      	bpl.n	18480 <att_get+0x64>
   1846e:	4906      	ldr	r1, [pc, #24]	; (18488 <att_get+0x6c>)
   18470:	4b06      	ldr	r3, [pc, #24]	; (1848c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   18472:	4809      	ldr	r0, [pc, #36]	; (18498 <att_get+0x7c>)
   18474:	1ac9      	subs	r1, r1, r3
   18476:	08c9      	lsrs	r1, r1, #3
   18478:	0189      	lsls	r1, r1, #6
   1847a:	f041 0102 	orr.w	r1, r1, #2
   1847e:	e7d9      	b.n	18434 <att_get+0x18>
	return att_chan->att;
   18480:	f850 4c08 	ldr.w	r4, [r0, #-8]
   18484:	e7e9      	b.n	1845a <att_get+0x3e>
   18486:	bf00      	nop
   18488:	000256d4 	.word	0x000256d4
   1848c:	000256c4 	.word	0x000256c4
   18490:	00027bfa 	.word	0x00027bfa
   18494:	00027c08 	.word	0x00027c08
   18498:	00027c23 	.word	0x00027c23

0001849c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   1849c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   1849e:	4a07      	ldr	r2, [pc, #28]	; (184bc <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   184a0:	4604      	mov	r4, r0
   184a2:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   184a4:	f7ff ff4c 	bl	18340 <chan_send>
	if (err) {
   184a8:	b130      	cbz	r0, 184b8 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   184aa:	4629      	mov	r1, r5
   184ac:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   184b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   184b4:	f00b bfc8 	b.w	24448 <net_buf_put>
}
   184b8:	bd38      	pop	{r3, r4, r5, pc}
   184ba:	bf00      	nop
   184bc:	00023141 	.word	0x00023141

000184c0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   184c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   184c2:	2300      	movs	r3, #0
{
   184c4:	4606      	mov	r6, r0
   184c6:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   184c8:	4828      	ldr	r0, [pc, #160]	; (1856c <bt_att_accept+0xac>)
   184ca:	2200      	movs	r2, #0
   184cc:	4669      	mov	r1, sp
   184ce:	f005 feb7 	bl	1e240 <k_mem_slab_alloc>
   184d2:	4604      	mov	r4, r0
   184d4:	b178      	cbz	r0, 184f6 <bt_att_accept+0x36>
   184d6:	4a26      	ldr	r2, [pc, #152]	; (18570 <bt_att_accept+0xb0>)
   184d8:	4b26      	ldr	r3, [pc, #152]	; (18574 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
   184da:	4827      	ldr	r0, [pc, #156]	; (18578 <bt_att_accept+0xb8>)
   184dc:	1ad2      	subs	r2, r2, r3
   184de:	08d2      	lsrs	r2, r2, #3
   184e0:	0192      	lsls	r2, r2, #6
   184e2:	f042 0201 	orr.w	r2, r2, #1
   184e6:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   184e8:	f007 fe1d 	bl	20126 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   184ec:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   184f0:	4620      	mov	r0, r4
   184f2:	b003      	add	sp, #12
   184f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   184f6:	4601      	mov	r1, r0
   184f8:	222c      	movs	r2, #44	; 0x2c
   184fa:	9800      	ldr	r0, [sp, #0]
   184fc:	f009 fe9f 	bl	2223e <memset>
	att->conn = conn;
   18500:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18502:	481e      	ldr	r0, [pc, #120]	; (1857c <bt_att_accept+0xbc>)
	list->tail = NULL;
   18504:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   18506:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1850a:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   1850e:	2200      	movs	r2, #0
   18510:	2300      	movs	r3, #0
   18512:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18514:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18516:	f005 fe93 	bl	1e240 <k_mem_slab_alloc>
   1851a:	4604      	mov	r4, r0
   1851c:	b148      	cbz	r0, 18532 <bt_att_accept+0x72>
   1851e:	4a14      	ldr	r2, [pc, #80]	; (18570 <bt_att_accept+0xb0>)
   18520:	4b14      	ldr	r3, [pc, #80]	; (18574 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   18522:	6829      	ldr	r1, [r5, #0]
   18524:	4816      	ldr	r0, [pc, #88]	; (18580 <bt_att_accept+0xc0>)
   18526:	1ad2      	subs	r2, r2, r3
   18528:	08d2      	lsrs	r2, r2, #3
   1852a:	0192      	lsls	r2, r2, #6
   1852c:	f042 0201 	orr.w	r2, r2, #1
   18530:	e7da      	b.n	184e8 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   18532:	4601      	mov	r1, r0
   18534:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18538:	9801      	ldr	r0, [sp, #4]
   1853a:	f009 fe80 	bl	2223e <memset>
	chan->chan.chan.ops = &ops;
   1853e:	9801      	ldr	r0, [sp, #4]
   18540:	4b10      	ldr	r3, [pc, #64]	; (18584 <bt_att_accept+0xc4>)
   18542:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   18544:	30f8      	adds	r0, #248	; 0xf8
   18546:	f00c fb19 	bl	24b7c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1854a:	9b01      	ldr	r3, [sp, #4]
   1854c:	f3bf 8f5b 	dmb	ish
   18550:	33f0      	adds	r3, #240	; 0xf0
   18552:	e853 2f00 	ldrex	r2, [r3]
   18556:	e843 4100 	strex	r1, r4, [r3]
   1855a:	2900      	cmp	r1, #0
   1855c:	d1f9      	bne.n	18552 <bt_att_accept+0x92>
   1855e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18562:	9b01      	ldr	r3, [sp, #4]
   18564:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   18568:	603b      	str	r3, [r7, #0]
	return 0;
   1856a:	e7c1      	b.n	184f0 <bt_att_accept+0x30>
   1856c:	200007c8 	.word	0x200007c8
   18570:	000256d4 	.word	0x000256d4
   18574:	000256c4 	.word	0x000256c4
   18578:	00027c47 	.word	0x00027c47
   1857c:	200007e4 	.word	0x200007e4
   18580:	00027c6c 	.word	0x00027c6c
   18584:	200005d4 	.word	0x200005d4

00018588 <bt_att_connected>:
{
   18588:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1858a:	2104      	movs	r1, #4
{
   1858c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1858e:	6800      	ldr	r0, [r0, #0]
   18590:	f00a fc11 	bl	22db6 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   18594:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   18598:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1859a:	b91b      	cbnz	r3, 185a4 <bt_att_connected+0x1c>
   1859c:	f105 000c 	add.w	r0, r5, #12
   185a0:	f00c faec 	bl	24b7c <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   185a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   185a6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   185aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   185ac:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   185b0:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   185b2:	b902      	cbnz	r2, 185b6 <bt_att_connected+0x2e>
	list->tail = node;
   185b4:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   185b6:	f3bf 8f5b 	dmb	ish
   185ba:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   185be:	4908      	ldr	r1, [pc, #32]	; (185e0 <bt_att_connected+0x58>)
   185c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   185c4:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   185c6:	bf5e      	ittt	pl
   185c8:	2317      	movpl	r3, #23
   185ca:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   185ce:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   185d2:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   185d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   185da:	f00c bbc9 	b.w	24d70 <k_work_init_delayable>
   185de:	bf00      	nop
   185e0:	00018f19 	.word	0x00018f19

000185e4 <att_write_cmd>:
{
   185e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   185e6:	4604      	mov	r4, r0
   185e8:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   185ea:	f101 0008 	add.w	r0, r1, #8
   185ee:	460d      	mov	r5, r1
   185f0:	f00b ff8c 	bl	2450c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   185f4:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   185f6:	68af      	ldr	r7, [r5, #8]
   185f8:	89ad      	ldrh	r5, [r5, #12]
   185fa:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   185fc:	2100      	movs	r1, #0
   185fe:	6818      	ldr	r0, [r3, #0]
   18600:	f00b fa24 	bl	23a4c <bt_gatt_change_aware>
   18604:	b320      	cbz	r0, 18650 <att_write_cmd+0x6c>
	if (!handle) {
   18606:	b32e      	cbz	r6, 18654 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   18608:	2218      	movs	r2, #24
   1860a:	2100      	movs	r1, #0
   1860c:	4668      	mov	r0, sp
   1860e:	f009 fe16 	bl	2223e <memset>
	data.conn = chan->att->conn;
   18612:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18614:	4a10      	ldr	r2, [pc, #64]	; (18658 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   18616:	681b      	ldr	r3, [r3, #0]
   18618:	9300      	str	r3, [sp, #0]
	data.req = req;
   1861a:	2300      	movs	r3, #0
   1861c:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   18620:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18624:	2301      	movs	r3, #1
   18626:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1862a:	4631      	mov	r1, r6
   1862c:	466b      	mov	r3, sp
   1862e:	4630      	mov	r0, r6
	data.value = value;
   18630:	9703      	str	r7, [sp, #12]
	data.len = len;
   18632:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18636:	f00a fc51 	bl	22edc <bt_gatt_foreach_attr>
	if (data.err) {
   1863a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1863e:	b923      	cbnz	r3, 1864a <att_write_cmd+0x66>
	if (data.buf) {
   18640:	9901      	ldr	r1, [sp, #4]
   18642:	b111      	cbz	r1, 1864a <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18644:	4620      	mov	r0, r4
   18646:	f7ff ff29 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
   1864a:	2000      	movs	r0, #0
}
   1864c:	b007      	add	sp, #28
   1864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18650:	2012      	movs	r0, #18
   18652:	e7fb      	b.n	1864c <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   18654:	2001      	movs	r0, #1
   18656:	e7f9      	b.n	1864c <att_write_cmd+0x68>
   18658:	00023219 	.word	0x00023219

0001865c <bt_att_chan_create_pdu>:
{
   1865c:	b538      	push	{r3, r4, r5, lr}
   1865e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18660:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   18664:	3201      	adds	r2, #1
   18666:	428a      	cmp	r2, r1
   18668:	d90c      	bls.n	18684 <bt_att_chan_create_pdu+0x28>
   1866a:	481a      	ldr	r0, [pc, #104]	; (186d4 <bt_att_chan_create_pdu+0x78>)
   1866c:	4b1a      	ldr	r3, [pc, #104]	; (186d8 <bt_att_chan_create_pdu+0x7c>)
   1866e:	1a1b      	subs	r3, r3, r0
   18670:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18672:	019b      	lsls	r3, r3, #6
   18674:	4819      	ldr	r0, [pc, #100]	; (186dc <bt_att_chan_create_pdu+0x80>)
   18676:	f043 0302 	orr.w	r3, r3, #2
   1867a:	f007 fd68 	bl	2014e <log_2>
		return NULL;
   1867e:	2400      	movs	r4, #0
}
   18680:	4620      	mov	r0, r4
   18682:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   18684:	4628      	mov	r0, r5
   18686:	f00a fbfc 	bl	22e82 <att_op_get_type>
   1868a:	2802      	cmp	r0, #2
   1868c:	d001      	beq.n	18692 <bt_att_chan_create_pdu+0x36>
   1868e:	2804      	cmp	r0, #4
   18690:	d114      	bne.n	186bc <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   18692:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18696:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   18698:	2100      	movs	r1, #0
   1869a:	4608      	mov	r0, r1
   1869c:	f00a fb6f 	bl	22d7e <bt_l2cap_create_pdu_timeout>
   186a0:	4604      	mov	r4, r0
	if (!buf) {
   186a2:	b980      	cbnz	r0, 186c6 <bt_att_chan_create_pdu+0x6a>
   186a4:	4b0b      	ldr	r3, [pc, #44]	; (186d4 <bt_att_chan_create_pdu+0x78>)
   186a6:	4a0c      	ldr	r2, [pc, #48]	; (186d8 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   186a8:	480d      	ldr	r0, [pc, #52]	; (186e0 <bt_att_chan_create_pdu+0x84>)
   186aa:	1ad2      	subs	r2, r2, r3
   186ac:	08d2      	lsrs	r2, r2, #3
   186ae:	0192      	lsls	r2, r2, #6
   186b0:	f042 0201 	orr.w	r2, r2, #1
   186b4:	4629      	mov	r1, r5
   186b6:	f007 fd36 	bl	20126 <log_1>
		return NULL;
   186ba:	e7e1      	b.n	18680 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   186bc:	f04f 32ff 	mov.w	r2, #4294967295
   186c0:	f04f 33ff 	mov.w	r3, #4294967295
   186c4:	e7e8      	b.n	18698 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   186c6:	2101      	movs	r1, #1
   186c8:	3008      	adds	r0, #8
   186ca:	f00b fef0 	bl	244ae <net_buf_simple_add>
	hdr->code = op;
   186ce:	7005      	strb	r5, [r0, #0]
	return buf;
   186d0:	e7d6      	b.n	18680 <bt_att_chan_create_pdu+0x24>
   186d2:	bf00      	nop
   186d4:	000256c4 	.word	0x000256c4
   186d8:	000256d4 	.word	0x000256d4
   186dc:	00027c91 	.word	0x00027c91
   186e0:	00027a7e 	.word	0x00027a7e

000186e4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   186e4:	898b      	ldrh	r3, [r1, #12]
{
   186e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186ea:	4604      	mov	r4, r0
   186ec:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   186ee:	b963      	cbnz	r3, 1870a <bt_att_recv+0x26>
   186f0:	494c      	ldr	r1, [pc, #304]	; (18824 <bt_att_recv+0x140>)
   186f2:	4b4d      	ldr	r3, [pc, #308]	; (18828 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   186f4:	484d      	ldr	r0, [pc, #308]	; (1882c <bt_att_recv+0x148>)
   186f6:	1ac9      	subs	r1, r1, r3
   186f8:	08c9      	lsrs	r1, r1, #3
   186fa:	0189      	lsls	r1, r1, #6
   186fc:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   18700:	f007 fd04 	bl	2010c <log_0>
}
   18704:	2000      	movs	r0, #0
   18706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1870a:	2101      	movs	r1, #1
   1870c:	f108 0008 	add.w	r0, r8, #8
   18710:	f00b fef4 	bl	244fc <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   18714:	f854 3c08 	ldr.w	r3, [r4, #-8]
   18718:	4605      	mov	r5, r0
   1871a:	2b00      	cmp	r3, #0
   1871c:	d0f2      	beq.n	18704 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   1871e:	4a44      	ldr	r2, [pc, #272]	; (18830 <bt_att_recv+0x14c>)
   18720:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18722:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18726:	2300      	movs	r3, #0
   18728:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1872a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1872e:	4288      	cmp	r0, r1
   18730:	d11d      	bne.n	1876e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   18732:	00d8      	lsls	r0, r3, #3
   18734:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18738:	789f      	ldrb	r7, [r3, #2]
   1873a:	2f01      	cmp	r7, #1
   1873c:	d132      	bne.n	187a4 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1873e:	f3bf 8f5b 	dmb	ish
   18742:	34e8      	adds	r4, #232	; 0xe8
   18744:	e854 3f00 	ldrex	r3, [r4]
   18748:	f043 0201 	orr.w	r2, r3, #1
   1874c:	e844 2100 	strex	r1, r2, [r4]
   18750:	2900      	cmp	r1, #0
   18752:	d1f7      	bne.n	18744 <bt_att_recv+0x60>
   18754:	f3bf 8f5b 	dmb	ish
   18758:	07da      	lsls	r2, r3, #31
   1875a:	d53d      	bpl.n	187d8 <bt_att_recv+0xf4>
   1875c:	4931      	ldr	r1, [pc, #196]	; (18824 <bt_att_recv+0x140>)
   1875e:	4b32      	ldr	r3, [pc, #200]	; (18828 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   18760:	4834      	ldr	r0, [pc, #208]	; (18834 <bt_att_recv+0x150>)
   18762:	1ac9      	subs	r1, r1, r3
   18764:	08c9      	lsrs	r1, r1, #3
   18766:	0189      	lsls	r1, r1, #6
   18768:	f041 0102 	orr.w	r1, r1, #2
   1876c:	e7c8      	b.n	18700 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1876e:	3301      	adds	r3, #1
   18770:	2b0d      	cmp	r3, #13
   18772:	d1da      	bne.n	1872a <bt_att_recv+0x46>
   18774:	4b2c      	ldr	r3, [pc, #176]	; (18828 <bt_att_recv+0x144>)
   18776:	4a2b      	ldr	r2, [pc, #172]	; (18824 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   18778:	482f      	ldr	r0, [pc, #188]	; (18838 <bt_att_recv+0x154>)
   1877a:	1ad2      	subs	r2, r2, r3
   1877c:	08d2      	lsrs	r2, r2, #3
   1877e:	0192      	lsls	r2, r2, #6
   18780:	f042 0202 	orr.w	r2, r2, #2
   18784:	f007 fccf 	bl	20126 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   18788:	7829      	ldrb	r1, [r5, #0]
   1878a:	4608      	mov	r0, r1
   1878c:	f00a fb79 	bl	22e82 <att_op_get_type>
   18790:	2800      	cmp	r0, #0
   18792:	d0b7      	beq.n	18704 <bt_att_recv+0x20>
	if (!req) {
   18794:	2900      	cmp	r1, #0
   18796:	d0b5      	beq.n	18704 <bt_att_recv+0x20>
   18798:	2306      	movs	r3, #6
   1879a:	2200      	movs	r2, #0
   1879c:	4630      	mov	r0, r6
   1879e:	f00a fdd0 	bl	23342 <send_err_rsp.part.0>
   187a2:	e7af      	b.n	18704 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   187a4:	2f05      	cmp	r7, #5
   187a6:	d117      	bne.n	187d8 <bt_att_recv+0xf4>
   187a8:	f3bf 8f5b 	dmb	ish
   187ac:	34e8      	adds	r4, #232	; 0xe8
   187ae:	e854 3f00 	ldrex	r3, [r4]
   187b2:	f043 0202 	orr.w	r2, r3, #2
   187b6:	e844 2100 	strex	r1, r2, [r4]
   187ba:	2900      	cmp	r1, #0
   187bc:	d1f7      	bne.n	187ae <bt_att_recv+0xca>
   187be:	f3bf 8f5b 	dmb	ish
   187c2:	079b      	lsls	r3, r3, #30
   187c4:	d508      	bpl.n	187d8 <bt_att_recv+0xf4>
   187c6:	4917      	ldr	r1, [pc, #92]	; (18824 <bt_att_recv+0x140>)
   187c8:	4b17      	ldr	r3, [pc, #92]	; (18828 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   187ca:	481c      	ldr	r0, [pc, #112]	; (1883c <bt_att_recv+0x158>)
   187cc:	1ac9      	subs	r1, r1, r3
   187ce:	08c9      	lsrs	r1, r1, #3
   187d0:	0189      	lsls	r1, r1, #6
   187d2:	f041 0102 	orr.w	r1, r1, #2
   187d6:	e793      	b.n	18700 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   187d8:	eb0c 0300 	add.w	r3, ip, r0
   187dc:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   187e0:	785a      	ldrb	r2, [r3, #1]
   187e2:	428a      	cmp	r2, r1
   187e4:	d90e      	bls.n	18804 <bt_att_recv+0x120>
   187e6:	4a10      	ldr	r2, [pc, #64]	; (18828 <bt_att_recv+0x144>)
   187e8:	4b0e      	ldr	r3, [pc, #56]	; (18824 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   187ea:	4815      	ldr	r0, [pc, #84]	; (18840 <bt_att_recv+0x15c>)
   187ec:	1a9b      	subs	r3, r3, r2
   187ee:	08db      	lsrs	r3, r3, #3
   187f0:	019b      	lsls	r3, r3, #6
   187f2:	782a      	ldrb	r2, [r5, #0]
   187f4:	f043 0301 	orr.w	r3, r3, #1
   187f8:	f007 fca9 	bl	2014e <log_2>
	if (handler->type == ATT_REQUEST && err) {
   187fc:	2f01      	cmp	r7, #1
   187fe:	d181      	bne.n	18704 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   18800:	2304      	movs	r3, #4
   18802:	e00a      	b.n	1881a <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   18804:	685b      	ldr	r3, [r3, #4]
   18806:	4641      	mov	r1, r8
   18808:	4630      	mov	r0, r6
   1880a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1880c:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   1880e:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   18810:	f47f af78 	bne.w	18704 <bt_att_recv+0x20>
   18814:	2800      	cmp	r0, #0
   18816:	f43f af75 	beq.w	18704 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1881a:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1881c:	2900      	cmp	r1, #0
   1881e:	f43f af71 	beq.w	18704 <bt_att_recv+0x20>
   18822:	e7ba      	b.n	1879a <bt_att_recv+0xb6>
   18824:	000256d4 	.word	0x000256d4
   18828:	000256c4 	.word	0x000256c4
   1882c:	00027cb6 	.word	0x00027cb6
   18830:	00025e08 	.word	0x00025e08
   18834:	00027cd1 	.word	0x00027cd1
   18838:	00027d2b 	.word	0x00027d2b
   1883c:	00027ced 	.word	0x00027ced
   18840:	00027d0c 	.word	0x00027d0c

00018844 <att_write_req>:
{
   18844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18848:	4604      	mov	r4, r0
   1884a:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1884c:	f101 0008 	add.w	r0, r1, #8
   18850:	460d      	mov	r5, r1
   18852:	f00b fe5b 	bl	2450c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18856:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   18858:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1885c:	89ad      	ldrh	r5, [r5, #12]
   1885e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18860:	2101      	movs	r1, #1
   18862:	6818      	ldr	r0, [r3, #0]
   18864:	f00b f8f2 	bl	23a4c <bt_gatt_change_aware>
   18868:	2800      	cmp	r0, #0
   1886a:	d03f      	beq.n	188ec <att_write_req+0xa8>
	if (!handle) {
   1886c:	2e00      	cmp	r6, #0
   1886e:	d03f      	beq.n	188f0 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   18870:	2218      	movs	r2, #24
   18872:	2100      	movs	r1, #0
   18874:	4668      	mov	r0, sp
   18876:	f009 fce2 	bl	2223e <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1887a:	2200      	movs	r2, #0
   1887c:	2113      	movs	r1, #19
   1887e:	4620      	mov	r0, r4
   18880:	f7ff feec 	bl	1865c <bt_att_chan_create_pdu>
   18884:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18886:	b378      	cbz	r0, 188e8 <att_write_req+0xa4>
	data.conn = chan->att->conn;
   18888:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1888a:	4a1a      	ldr	r2, [pc, #104]	; (188f4 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   1888c:	681b      	ldr	r3, [r3, #0]
   1888e:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18890:	2301      	movs	r3, #1
   18892:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   18896:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   1889a:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1889c:	466b      	mov	r3, sp
   1889e:	4631      	mov	r1, r6
   188a0:	4630      	mov	r0, r6
	data.len = len;
   188a2:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   188a6:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   188aa:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   188ae:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   188b2:	f00a fb13 	bl	22edc <bt_gatt_foreach_attr>
	if (data.err) {
   188b6:	f89d 5014 	ldrb.w	r5, [sp, #20]
   188ba:	b175      	cbz	r5, 188da <att_write_req+0x96>
			net_buf_unref(data.buf);
   188bc:	9801      	ldr	r0, [sp, #4]
   188be:	f003 fc9d 	bl	1c1fc <net_buf_unref>
	if (!req) {
   188c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   188c6:	4632      	mov	r2, r6
   188c8:	4641      	mov	r1, r8
   188ca:	4620      	mov	r0, r4
   188cc:	f00a fd39 	bl	23342 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   188d0:	463d      	mov	r5, r7
}
   188d2:	4628      	mov	r0, r5
   188d4:	b007      	add	sp, #28
   188d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   188da:	9901      	ldr	r1, [sp, #4]
   188dc:	2900      	cmp	r1, #0
   188de:	d0f8      	beq.n	188d2 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   188e0:	4620      	mov	r0, r4
   188e2:	f7ff fddb 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
   188e6:	e7f4      	b.n	188d2 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   188e8:	250e      	movs	r5, #14
   188ea:	e7f2      	b.n	188d2 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   188ec:	2512      	movs	r5, #18
   188ee:	e7f0      	b.n	188d2 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   188f0:	2501      	movs	r5, #1
   188f2:	e7ee      	b.n	188d2 <att_write_req+0x8e>
   188f4:	00023219 	.word	0x00023219

000188f8 <bt_att_create_pdu>:
{
   188f8:	b570      	push	{r4, r5, r6, lr}
   188fa:	460e      	mov	r6, r1
   188fc:	4615      	mov	r5, r2
	att = att_get(conn);
   188fe:	f7ff fd8d 	bl	1841c <att_get>
	if (!att) {
   18902:	b1c0      	cbz	r0, 18936 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18904:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
   18906:	1c69      	adds	r1, r5, #1
   18908:	b15b      	cbz	r3, 18922 <bt_att_create_pdu+0x2a>
   1890a:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1890e:	d008      	beq.n	18922 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18910:	681b      	ldr	r3, [r3, #0]
   18912:	b10b      	cbz	r3, 18918 <bt_att_create_pdu+0x20>
   18914:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18918:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   1891c:	4291      	cmp	r1, r2
   1891e:	d90c      	bls.n	1893a <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18920:	b98b      	cbnz	r3, 18946 <bt_att_create_pdu+0x4e>
   18922:	4a0e      	ldr	r2, [pc, #56]	; (1895c <bt_att_create_pdu+0x64>)
   18924:	4b0e      	ldr	r3, [pc, #56]	; (18960 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   18926:	480f      	ldr	r0, [pc, #60]	; (18964 <bt_att_create_pdu+0x6c>)
   18928:	1ad2      	subs	r2, r2, r3
   1892a:	08d2      	lsrs	r2, r2, #3
   1892c:	0192      	lsls	r2, r2, #6
   1892e:	f042 0202 	orr.w	r2, r2, #2
   18932:	f007 fbf8 	bl	20126 <log_1>
}
   18936:	2000      	movs	r0, #0
   18938:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1893a:	462a      	mov	r2, r5
   1893c:	4631      	mov	r1, r6
}
   1893e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   18942:	f7ff be8b 	b.w	1865c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18946:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   1894a:	d004      	beq.n	18956 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1894c:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18950:	b10c      	cbz	r4, 18956 <bt_att_create_pdu+0x5e>
   18952:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   18956:	4618      	mov	r0, r3
   18958:	4623      	mov	r3, r4
   1895a:	e7dd      	b.n	18918 <bt_att_create_pdu+0x20>
   1895c:	000256d4 	.word	0x000256d4
   18960:	000256c4 	.word	0x000256c4
   18964:	00027d45 	.word	0x00027d45

00018968 <att_read_group_req>:
{
   18968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1896c:	7b0c      	ldrb	r4, [r1, #12]
   1896e:	3c04      	subs	r4, #4
   18970:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18972:	2c02      	cmp	r4, #2
{
   18974:	4605      	mov	r5, r0
   18976:	b08c      	sub	sp, #48	; 0x30
   18978:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1897a:	d001      	beq.n	18980 <att_read_group_req+0x18>
   1897c:	2c10      	cmp	r4, #16
   1897e:	d16e      	bne.n	18a5e <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   18980:	2104      	movs	r1, #4
   18982:	3008      	adds	r0, #8
   18984:	f00b fdba 	bl	244fc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18988:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1898c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1898e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18990:	1d01      	adds	r1, r0, #4
   18992:	4622      	mov	r2, r4
   18994:	4640      	mov	r0, r8
   18996:	f009 fd6f 	bl	22478 <bt_uuid_create>
   1899a:	2800      	cmp	r0, #0
   1899c:	d061      	beq.n	18a62 <att_read_group_req+0xfa>
	if (!start || !end) {
   1899e:	2e00      	cmp	r6, #0
   189a0:	d03a      	beq.n	18a18 <att_read_group_req+0xb0>
   189a2:	2400      	movs	r4, #0
   189a4:	2f00      	cmp	r7, #0
   189a6:	d036      	beq.n	18a16 <att_read_group_req+0xae>
	if (start > end) {
   189a8:	42b7      	cmp	r7, r6
   189aa:	d335      	bcc.n	18a18 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   189ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   189b0:	a901      	add	r1, sp, #4
   189b2:	4640      	mov	r0, r8
   189b4:	f88d 4004 	strb.w	r4, [sp, #4]
   189b8:	f8ad 3006 	strh.w	r3, [sp, #6]
   189bc:	f009 fd32 	bl	22424 <bt_uuid_cmp>
   189c0:	2800      	cmp	r0, #0
   189c2:	d134      	bne.n	18a2e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   189c4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   189c6:	2214      	movs	r2, #20
   189c8:	2100      	movs	r1, #0
   189ca:	a807      	add	r0, sp, #28
   189cc:	f009 fc37 	bl	2223e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   189d0:	2201      	movs	r2, #1
   189d2:	2111      	movs	r1, #17
   189d4:	4620      	mov	r0, r4
   189d6:	f7ff ff8f 	bl	188f8 <bt_att_create_pdu>
   189da:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   189dc:	2800      	cmp	r0, #0
   189de:	d040      	beq.n	18a62 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   189e0:	2101      	movs	r1, #1
   189e2:	3008      	adds	r0, #8
	data.uuid = uuid;
   189e4:	e9cd 5807 	strd	r5, r8, [sp, #28]
   189e8:	f00b fd61 	bl	244ae <net_buf_simple_add>
	data.rsp->len = 0U;
   189ec:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   189f0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   189f2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   189f4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   189f8:	4a1b      	ldr	r2, [pc, #108]	; (18a68 <att_read_group_req+0x100>)
	data.group = NULL;
   189fa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   189fe:	4639      	mov	r1, r7
   18a00:	4630      	mov	r0, r6
   18a02:	f00a fa6b 	bl	22edc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   18a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18a08:	781c      	ldrb	r4, [r3, #0]
   18a0a:	bb1c      	cbnz	r4, 18a54 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   18a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
   18a0e:	f003 fbf5 	bl	1c1fc <net_buf_unref>
	if (!req) {
   18a12:	230a      	movs	r3, #10
   18a14:	e018      	b.n	18a48 <att_read_group_req+0xe0>
			*err = 0U;
   18a16:	463e      	mov	r6, r7
	if (!req) {
   18a18:	2301      	movs	r3, #1
   18a1a:	4632      	mov	r2, r6
   18a1c:	2110      	movs	r1, #16
   18a1e:	4628      	mov	r0, r5
   18a20:	f00a fc8f 	bl	23342 <send_err_rsp.part.0>
		return 0;
   18a24:	2400      	movs	r4, #0
}
   18a26:	4620      	mov	r0, r4
   18a28:	b00c      	add	sp, #48	; 0x30
   18a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   18a2e:	f642 0301 	movw	r3, #10241	; 0x2801
   18a32:	a907      	add	r1, sp, #28
   18a34:	4640      	mov	r0, r8
   18a36:	f88d 401c 	strb.w	r4, [sp, #28]
   18a3a:	f8ad 301e 	strh.w	r3, [sp, #30]
   18a3e:	f009 fcf1 	bl	22424 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18a42:	2800      	cmp	r0, #0
   18a44:	d0be      	beq.n	189c4 <att_read_group_req+0x5c>
	if (!req) {
   18a46:	2310      	movs	r3, #16
   18a48:	4632      	mov	r2, r6
   18a4a:	2110      	movs	r1, #16
   18a4c:	4628      	mov	r0, r5
   18a4e:	f00a fc78 	bl	23342 <send_err_rsp.part.0>
		return 0;
   18a52:	e7e8      	b.n	18a26 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18a54:	9909      	ldr	r1, [sp, #36]	; 0x24
   18a56:	4628      	mov	r0, r5
   18a58:	f7ff fd20 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18a5c:	e7e2      	b.n	18a24 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   18a5e:	2404      	movs	r4, #4
   18a60:	e7e1      	b.n	18a26 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   18a62:	240e      	movs	r4, #14
   18a64:	e7df      	b.n	18a26 <att_read_group_req+0xbe>
   18a66:	bf00      	nop
   18a68:	00018089 	.word	0x00018089

00018a6c <att_read_mult_req>:
{
   18a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18a70:	6886      	ldr	r6, [r0, #8]
{
   18a72:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   18a74:	2210      	movs	r2, #16
{
   18a76:	4604      	mov	r4, r0
   18a78:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   18a7a:	4668      	mov	r0, sp
   18a7c:	2100      	movs	r1, #0
   18a7e:	f009 fbde 	bl	2223e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18a82:	2200      	movs	r2, #0
   18a84:	210f      	movs	r1, #15
   18a86:	4630      	mov	r0, r6
   18a88:	f7ff ff36 	bl	188f8 <bt_att_create_pdu>
   18a8c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18a8e:	b358      	cbz	r0, 18ae8 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18a90:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18aec <att_read_mult_req+0x80>
	data.chan = chan;
   18a94:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   18a96:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18a9a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18a9e:	89ab      	ldrh	r3, [r5, #12]
   18aa0:	2b01      	cmp	r3, #1
   18aa2:	d804      	bhi.n	18aae <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18aa4:	9902      	ldr	r1, [sp, #8]
   18aa6:	4620      	mov	r0, r4
   18aa8:	f7ff fcf8 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
   18aac:	e018      	b.n	18ae0 <att_read_mult_req+0x74>
   18aae:	4638      	mov	r0, r7
   18ab0:	f00b fd2c 	bl	2450c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18ab4:	466b      	mov	r3, sp
   18ab6:	464a      	mov	r2, r9
   18ab8:	4601      	mov	r1, r0
   18aba:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18abc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18ac0:	f00a fa0c 	bl	22edc <bt_gatt_foreach_attr>
		if (data.err) {
   18ac4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18ac8:	2b00      	cmp	r3, #0
   18aca:	d0e8      	beq.n	18a9e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   18acc:	9802      	ldr	r0, [sp, #8]
   18ace:	f003 fb95 	bl	1c1fc <net_buf_unref>
	if (!req) {
   18ad2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18ad6:	4632      	mov	r2, r6
   18ad8:	210e      	movs	r1, #14
   18ada:	4620      	mov	r0, r4
   18adc:	f00a fc31 	bl	23342 <send_err_rsp.part.0>
	return 0;
   18ae0:	2000      	movs	r0, #0
}
   18ae2:	b005      	add	sp, #20
   18ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   18ae8:	200e      	movs	r0, #14
   18aea:	e7fa      	b.n	18ae2 <att_read_mult_req+0x76>
   18aec:	000232ef 	.word	0x000232ef

00018af0 <att_read_rsp>:
{
   18af0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18af4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   18af8:	4605      	mov	r5, r0
   18afa:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18afc:	4640      	mov	r0, r8
   18afe:	2101      	movs	r1, #1
{
   18b00:	4614      	mov	r4, r2
   18b02:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   18b04:	f00a ffa2 	bl	23a4c <bt_gatt_change_aware>
   18b08:	b388      	cbz	r0, 18b6e <att_read_rsp+0x7e>
	if (!handle) {
   18b0a:	b396      	cbz	r6, 18b72 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   18b0c:	2210      	movs	r2, #16
   18b0e:	2100      	movs	r1, #0
   18b10:	4668      	mov	r0, sp
   18b12:	f009 fb94 	bl	2223e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18b16:	2200      	movs	r2, #0
   18b18:	4621      	mov	r1, r4
   18b1a:	4640      	mov	r0, r8
   18b1c:	f7ff feec 	bl	188f8 <bt_att_create_pdu>
   18b20:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18b22:	b340      	cbz	r0, 18b76 <att_read_rsp+0x86>
	data.offset = offset;
   18b24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18b28:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18b2c:	2301      	movs	r3, #1
   18b2e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18b32:	4a12      	ldr	r2, [pc, #72]	; (18b7c <att_read_rsp+0x8c>)
	data.chan = chan;
   18b34:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18b36:	466b      	mov	r3, sp
   18b38:	4631      	mov	r1, r6
   18b3a:	4630      	mov	r0, r6
   18b3c:	f00a f9ce 	bl	22edc <bt_gatt_foreach_attr>
	if (data.err) {
   18b40:	f89d 400c 	ldrb.w	r4, [sp, #12]
   18b44:	b174      	cbz	r4, 18b64 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   18b46:	9802      	ldr	r0, [sp, #8]
   18b48:	f003 fb58 	bl	1c1fc <net_buf_unref>
	if (!req) {
   18b4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18b50:	4632      	mov	r2, r6
   18b52:	4639      	mov	r1, r7
   18b54:	4628      	mov	r0, r5
   18b56:	f00a fbf4 	bl	23342 <send_err_rsp.part.0>
		return 0;
   18b5a:	2400      	movs	r4, #0
}
   18b5c:	4620      	mov	r0, r4
   18b5e:	b004      	add	sp, #16
   18b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18b64:	9902      	ldr	r1, [sp, #8]
   18b66:	4628      	mov	r0, r5
   18b68:	f7ff fc98 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18b6c:	e7f6      	b.n	18b5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18b6e:	2412      	movs	r4, #18
   18b70:	e7f4      	b.n	18b5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   18b72:	2401      	movs	r4, #1
   18b74:	e7f2      	b.n	18b5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   18b76:	240e      	movs	r4, #14
   18b78:	e7f0      	b.n	18b5c <att_read_rsp+0x6c>
   18b7a:	bf00      	nop
   18b7c:	000232ef 	.word	0x000232ef

00018b80 <att_read_type_req>:
{
   18b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18b84:	7b0c      	ldrb	r4, [r1, #12]
   18b86:	3c04      	subs	r4, #4
   18b88:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18b8a:	2c02      	cmp	r4, #2
{
   18b8c:	4605      	mov	r5, r0
   18b8e:	b08c      	sub	sp, #48	; 0x30
   18b90:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18b92:	d001      	beq.n	18b98 <att_read_type_req+0x18>
   18b94:	2c10      	cmp	r4, #16
   18b96:	d14f      	bne.n	18c38 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   18b98:	2104      	movs	r1, #4
   18b9a:	3008      	adds	r0, #8
   18b9c:	f00b fcae 	bl	244fc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18ba0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   18ba4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18ba6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18ba8:	1d01      	adds	r1, r0, #4
   18baa:	4622      	mov	r2, r4
   18bac:	4640      	mov	r0, r8
   18bae:	f009 fc63 	bl	22478 <bt_uuid_create>
   18bb2:	b188      	cbz	r0, 18bd8 <att_read_type_req+0x58>
	if (!start || !end) {
   18bb4:	b19e      	cbz	r6, 18bde <att_read_type_req+0x5e>
   18bb6:	b18f      	cbz	r7, 18bdc <att_read_type_req+0x5c>
	if (start > end) {
   18bb8:	42be      	cmp	r6, r7
   18bba:	d810      	bhi.n	18bde <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   18bbc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   18bbe:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   18bc0:	2100      	movs	r1, #0
   18bc2:	eb0d 0002 	add.w	r0, sp, r2
   18bc6:	f009 fb3a 	bl	2223e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18bca:	2201      	movs	r2, #1
   18bcc:	2109      	movs	r1, #9
   18bce:	4620      	mov	r0, r4
   18bd0:	f7ff fe92 	bl	188f8 <bt_att_create_pdu>
   18bd4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   18bd6:	b968      	cbnz	r0, 18bf4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   18bd8:	240e      	movs	r4, #14
   18bda:	e007      	b.n	18bec <att_read_type_req+0x6c>
			*err = 0U;
   18bdc:	463e      	mov	r6, r7
	if (!req) {
   18bde:	2301      	movs	r3, #1
   18be0:	4632      	mov	r2, r6
   18be2:	2108      	movs	r1, #8
   18be4:	4628      	mov	r0, r5
   18be6:	f00a fbac 	bl	23342 <send_err_rsp.part.0>
		return 0;
   18bea:	2400      	movs	r4, #0
}
   18bec:	4620      	mov	r0, r4
   18bee:	b00c      	add	sp, #48	; 0x30
   18bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   18bf4:	2101      	movs	r1, #1
   18bf6:	3008      	adds	r0, #8
	data.uuid = uuid;
   18bf8:	e9cd 5806 	strd	r5, r8, [sp, #24]
   18bfc:	f00b fc57 	bl	244ae <net_buf_simple_add>
	data.rsp->len = 0U;
   18c00:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18c04:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18c06:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18c08:	4a0c      	ldr	r2, [pc, #48]	; (18c3c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   18c0a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18c0e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18c10:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18c14:	4630      	mov	r0, r6
   18c16:	ab06      	add	r3, sp, #24
   18c18:	f00a f960 	bl	22edc <bt_gatt_foreach_attr>
	if (data.err) {
   18c1c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   18c20:	b12c      	cbz	r4, 18c2e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   18c22:	9808      	ldr	r0, [sp, #32]
   18c24:	f003 faea 	bl	1c1fc <net_buf_unref>
	if (!req) {
   18c28:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18c2c:	e7d8      	b.n	18be0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18c2e:	9908      	ldr	r1, [sp, #32]
   18c30:	4628      	mov	r0, r5
   18c32:	f7ff fc33 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18c36:	e7d9      	b.n	18bec <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   18c38:	2404      	movs	r4, #4
   18c3a:	e7d7      	b.n	18bec <att_read_type_req+0x6c>
   18c3c:	00018135 	.word	0x00018135

00018c40 <att_find_type_req>:
{
   18c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c44:	4688      	mov	r8, r1
   18c46:	b086      	sub	sp, #24
   18c48:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18c4a:	2106      	movs	r1, #6
   18c4c:	f108 0008 	add.w	r0, r8, #8
   18c50:	f00b fc54 	bl	244fc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   18c54:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   18c56:	b317      	cbz	r7, 18c9e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18c58:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   18c5c:	f1b9 0f00 	cmp.w	r9, #0
   18c60:	d01c      	beq.n	18c9c <att_find_type_req+0x5c>
	if (start > end) {
   18c62:	45b9      	cmp	r9, r7
   18c64:	d31b      	bcc.n	18c9e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   18c66:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18c68:	f8ad 3002 	strh.w	r3, [sp, #2]
   18c6c:	2400      	movs	r4, #0
   18c6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18c72:	a901      	add	r1, sp, #4
   18c74:	4668      	mov	r0, sp
	value = buf->data;
   18c76:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18c7a:	f88d 4000 	strb.w	r4, [sp]
   18c7e:	f88d 4004 	strb.w	r4, [sp, #4]
   18c82:	f8ad 3006 	strh.w	r3, [sp, #6]
   18c86:	f009 fbcd 	bl	22424 <bt_uuid_cmp>
   18c8a:	4606      	mov	r6, r0
   18c8c:	b190      	cbz	r0, 18cb4 <att_find_type_req+0x74>
	if (!req) {
   18c8e:	230a      	movs	r3, #10
   18c90:	463a      	mov	r2, r7
   18c92:	2106      	movs	r1, #6
   18c94:	4628      	mov	r0, r5
   18c96:	f00a fb54 	bl	23342 <send_err_rsp.part.0>
		return 0;
   18c9a:	e007      	b.n	18cac <att_find_type_req+0x6c>
			*err = 0U;
   18c9c:	464f      	mov	r7, r9
	if (!req) {
   18c9e:	2301      	movs	r3, #1
   18ca0:	463a      	mov	r2, r7
   18ca2:	2106      	movs	r1, #6
   18ca4:	4628      	mov	r0, r5
   18ca6:	f00a fb4c 	bl	23342 <send_err_rsp.part.0>
		return 0;
   18caa:	2400      	movs	r4, #0
}
   18cac:	4620      	mov	r0, r4
   18cae:	b006      	add	sp, #24
   18cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18cb4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   18cb8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   18cbc:	4601      	mov	r1, r0
   18cbe:	2214      	movs	r2, #20
   18cc0:	a801      	add	r0, sp, #4
   18cc2:	f009 fabc 	bl	2223e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18cc6:	4632      	mov	r2, r6
   18cc8:	2107      	movs	r1, #7
   18cca:	4640      	mov	r0, r8
   18ccc:	f7ff fe14 	bl	188f8 <bt_att_create_pdu>
   18cd0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18cd2:	b1d8      	cbz	r0, 18d0c <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18cd4:	230a      	movs	r3, #10
   18cd6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18cda:	4a0d      	ldr	r2, [pc, #52]	; (18d10 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   18cdc:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18ce0:	ab01      	add	r3, sp, #4
   18ce2:	4649      	mov	r1, r9
   18ce4:	4638      	mov	r0, r7
	data.value = value;
   18ce6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   18cea:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18cec:	f00a f8f6 	bl	22edc <bt_gatt_foreach_attr>
	if (data.err) {
   18cf0:	f89d 4015 	ldrb.w	r4, [sp, #21]
   18cf4:	b12c      	cbz	r4, 18d02 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   18cf6:	9802      	ldr	r0, [sp, #8]
   18cf8:	f003 fa80 	bl	1c1fc <net_buf_unref>
	if (!req) {
   18cfc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18d00:	e7ce      	b.n	18ca0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18d02:	9902      	ldr	r1, [sp, #8]
   18d04:	4628      	mov	r0, r5
   18d06:	f7ff fbc9 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18d0a:	e7cf      	b.n	18cac <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   18d0c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18d0e:	e7cd      	b.n	18cac <att_find_type_req+0x6c>
   18d10:	000181dd 	.word	0x000181dd

00018d14 <att_find_info_req>:
{
   18d14:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   18d16:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   18d18:	881e      	ldrh	r6, [r3, #0]
{
   18d1a:	b085      	sub	sp, #20
   18d1c:	4605      	mov	r5, r0
	if (!start || !end) {
   18d1e:	b19e      	cbz	r6, 18d48 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18d20:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   18d22:	b184      	cbz	r4, 18d46 <att_find_info_req+0x32>
	if (start > end) {
   18d24:	42a6      	cmp	r6, r4
   18d26:	d80f      	bhi.n	18d48 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   18d28:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18d2a:	2210      	movs	r2, #16
   18d2c:	2100      	movs	r1, #0
   18d2e:	4668      	mov	r0, sp
   18d30:	f009 fa85 	bl	2223e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18d34:	2200      	movs	r2, #0
   18d36:	2105      	movs	r1, #5
   18d38:	4638      	mov	r0, r7
   18d3a:	f7ff fddd 	bl	188f8 <bt_att_create_pdu>
   18d3e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   18d40:	b958      	cbnz	r0, 18d5a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   18d42:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   18d44:	e007      	b.n	18d56 <att_find_info_req+0x42>
			*err = 0U;
   18d46:	4626      	mov	r6, r4
	if (!req) {
   18d48:	2301      	movs	r3, #1
   18d4a:	4632      	mov	r2, r6
   18d4c:	2104      	movs	r1, #4
   18d4e:	4628      	mov	r0, r5
   18d50:	f00a faf7 	bl	23342 <send_err_rsp.part.0>
	return 0;
   18d54:	2000      	movs	r0, #0
}
   18d56:	b005      	add	sp, #20
   18d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18d5a:	4621      	mov	r1, r4
   18d5c:	4a08      	ldr	r2, [pc, #32]	; (18d80 <att_find_info_req+0x6c>)
	data.chan = chan;
   18d5e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18d60:	466b      	mov	r3, sp
   18d62:	4630      	mov	r0, r6
   18d64:	f00a f8ba 	bl	22edc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   18d68:	9c02      	ldr	r4, [sp, #8]
   18d6a:	b924      	cbnz	r4, 18d76 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   18d6c:	9801      	ldr	r0, [sp, #4]
   18d6e:	f003 fa45 	bl	1c1fc <net_buf_unref>
	if (!req) {
   18d72:	230a      	movs	r3, #10
   18d74:	e7e9      	b.n	18d4a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18d76:	9901      	ldr	r1, [sp, #4]
   18d78:	4628      	mov	r0, r5
   18d7a:	f7ff fb8f 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
   18d7e:	e7e9      	b.n	18d54 <att_find_info_req+0x40>
   18d80:	00023009 	.word	0x00023009

00018d84 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   18d84:	b513      	push	{r0, r1, r4, lr}
   18d86:	4602      	mov	r2, r0
   18d88:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18d8a:	4808      	ldr	r0, [pc, #32]	; (18dac <bt_att_req_alloc+0x28>)
   18d8c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   18d8e:	2400      	movs	r4, #0
   18d90:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18d92:	f005 fa55 	bl	1e240 <k_mem_slab_alloc>
   18d96:	4601      	mov	r1, r0
   18d98:	b930      	cbnz	r0, 18da8 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   18d9a:	9801      	ldr	r0, [sp, #4]
   18d9c:	221c      	movs	r2, #28
   18d9e:	f009 fa4e 	bl	2223e <memset>

	return req;
   18da2:	9801      	ldr	r0, [sp, #4]
}
   18da4:	b002      	add	sp, #8
   18da6:	bd10      	pop	{r4, pc}
		return NULL;
   18da8:	4620      	mov	r0, r4
   18daa:	e7fb      	b.n	18da4 <bt_att_req_alloc+0x20>
   18dac:	20000800 	.word	0x20000800

00018db0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18db0:	b507      	push	{r0, r1, r2, lr}
   18db2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   18db4:	6880      	ldr	r0, [r0, #8]
   18db6:	b120      	cbz	r0, 18dc2 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   18db8:	f003 fa20 	bl	1c1fc <net_buf_unref>
		req->buf = NULL;
   18dbc:	9b01      	ldr	r3, [sp, #4]
   18dbe:	2200      	movs	r2, #0
   18dc0:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18dc2:	4803      	ldr	r0, [pc, #12]	; (18dd0 <bt_att_req_free+0x20>)
   18dc4:	a901      	add	r1, sp, #4
   18dc6:	f00b fe25 	bl	24a14 <k_mem_slab_free>
}
   18dca:	b003      	add	sp, #12
   18dcc:	f85d fb04 	ldr.w	pc, [sp], #4
   18dd0:	20000800 	.word	0x20000800

00018dd4 <att_handle_rsp>:
{
   18dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dd8:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   18dda:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   18dde:	460f      	mov	r7, r1
   18de0:	4690      	mov	r8, r2
   18de2:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18de4:	f00b ffd0 	bl	24d88 <k_work_cancel_delayable>
	if (!chan->req) {
   18de8:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   18dec:	b9e5      	cbnz	r5, 18e28 <att_handle_rsp+0x54>
   18dee:	4919      	ldr	r1, [pc, #100]	; (18e54 <att_handle_rsp+0x80>)
   18df0:	4819      	ldr	r0, [pc, #100]	; (18e58 <att_handle_rsp+0x84>)
   18df2:	1a40      	subs	r0, r0, r1
   18df4:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   18df6:	0180      	lsls	r0, r0, #6
   18df8:	f040 0102 	orr.w	r1, r0, #2
   18dfc:	4817      	ldr	r0, [pc, #92]	; (18e5c <att_handle_rsp+0x88>)
   18dfe:	f007 f985 	bl	2010c <log_0>
	bt_att_func_t func = NULL;
   18e02:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   18e04:	6820      	ldr	r0, [r4, #0]
   18e06:	f00a f9db 	bl	231c0 <att_req_send_process>
	if (func) {
   18e0a:	f1ba 0f00 	cmp.w	sl, #0
   18e0e:	d007      	beq.n	18e20 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   18e10:	6820      	ldr	r0, [r4, #0]
   18e12:	f8cd 9000 	str.w	r9, [sp]
   18e16:	6800      	ldr	r0, [r0, #0]
   18e18:	4643      	mov	r3, r8
   18e1a:	463a      	mov	r2, r7
   18e1c:	4631      	mov	r1, r6
   18e1e:	47d0      	blx	sl
}
   18e20:	2000      	movs	r0, #0
   18e22:	b003      	add	sp, #12
   18e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   18e28:	4b0d      	ldr	r3, [pc, #52]	; (18e60 <att_handle_rsp+0x8c>)
   18e2a:	429d      	cmp	r5, r3
   18e2c:	f04f 0b00 	mov.w	fp, #0
   18e30:	d103      	bne.n	18e3a <att_handle_rsp+0x66>
		chan->req = NULL;
   18e32:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   18e36:	46da      	mov	sl, fp
		goto process;
   18e38:	e7e4      	b.n	18e04 <att_handle_rsp+0x30>
	func = chan->req->func;
   18e3a:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   18e3e:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   18e42:	4628      	mov	r0, r5
	params = chan->req->user_data;
   18e44:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   18e48:	f7ff ffb2 	bl	18db0 <bt_att_req_free>
	chan->req = NULL;
   18e4c:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
   18e50:	e7d8      	b.n	18e04 <att_handle_rsp+0x30>
   18e52:	bf00      	nop
   18e54:	000256c4 	.word	0x000256c4
   18e58:	000256d4 	.word	0x000256d4
   18e5c:	00027d60 	.word	0x00027d60
   18e60:	20002f0c 	.word	0x20002f0c

00018e64 <bt_att_disconnected>:
{
   18e64:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   18e66:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   18e6a:	b085      	sub	sp, #20
   18e6c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   18e6e:	b385      	cbz	r5, 18ed2 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   18e70:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   18e74:	f105 0024 	add.w	r0, r5, #36	; 0x24
   18e78:	f009 ffc8 	bl	22e0c <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   18e7c:	f1a4 0608 	sub.w	r6, r4, #8
   18e80:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   18e84:	2200      	movs	r2, #0
   18e86:	2300      	movs	r3, #0
   18e88:	4638      	mov	r0, r7
   18e8a:	f00b fabf 	bl	2440c <net_buf_get>
   18e8e:	4602      	mov	r2, r0
   18e90:	bb08      	cbnz	r0, 18ed6 <bt_att_disconnected+0x72>
	if (chan->req) {
   18e92:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   18e96:	b123      	cbz	r3, 18ea2 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   18e98:	4601      	mov	r1, r0
   18e9a:	230e      	movs	r3, #14
   18e9c:	4630      	mov	r0, r6
   18e9e:	f7ff ff99 	bl	18dd4 <att_handle_rsp>
	chan->att = NULL;
   18ea2:	2300      	movs	r3, #0
   18ea4:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   18ea8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18eaa:	b993      	cbnz	r3, 18ed2 <bt_att_disconnected+0x6e>
	att_reset(att);
   18eac:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   18eae:	9803      	ldr	r0, [sp, #12]
   18eb0:	2200      	movs	r2, #0
   18eb2:	2300      	movs	r3, #0
   18eb4:	300c      	adds	r0, #12
   18eb6:	f00b faa9 	bl	2440c <net_buf_get>
   18eba:	b978      	cbnz	r0, 18edc <bt_att_disconnected+0x78>
	att->conn = NULL;
   18ebc:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   18ebe:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   18ec0:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   18ec2:	b976      	cbnz	r6, 18ee2 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   18ec4:	4813      	ldr	r0, [pc, #76]	; (18f14 <bt_att_disconnected+0xb0>)
   18ec6:	a903      	add	r1, sp, #12
   18ec8:	f00b fda4 	bl	24a14 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   18ecc:	6820      	ldr	r0, [r4, #0]
   18ece:	f001 fa5f 	bl	1a390 <bt_gatt_disconnected>
}
   18ed2:	b005      	add	sp, #20
   18ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   18ed6:	f003 f991 	bl	1c1fc <net_buf_unref>
   18eda:	e7d3      	b.n	18e84 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   18edc:	f003 f98e 	bl	1c1fc <net_buf_unref>
   18ee0:	e7e5      	b.n	18eae <bt_att_disconnected+0x4a>
	return node->next;
   18ee2:	6835      	ldr	r5, [r6, #0]
   18ee4:	2d00      	cmp	r5, #0
   18ee6:	bf38      	it	cc
   18ee8:	2500      	movcc	r5, #0
		if (req->func) {
   18eea:	6877      	ldr	r7, [r6, #4]
   18eec:	b137      	cbz	r7, 18efc <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   18eee:	69b3      	ldr	r3, [r6, #24]
   18ef0:	9300      	str	r3, [sp, #0]
   18ef2:	2300      	movs	r3, #0
   18ef4:	461a      	mov	r2, r3
   18ef6:	210e      	movs	r1, #14
   18ef8:	4618      	mov	r0, r3
   18efa:	47b8      	blx	r7
		bt_att_req_free(req);
   18efc:	4630      	mov	r0, r6
   18efe:	f7ff ff57 	bl	18db0 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   18f02:	2d00      	cmp	r5, #0
   18f04:	d0de      	beq.n	18ec4 <bt_att_disconnected+0x60>
   18f06:	682b      	ldr	r3, [r5, #0]
   18f08:	2b00      	cmp	r3, #0
   18f0a:	bf38      	it	cc
   18f0c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18f0e:	462e      	mov	r6, r5
   18f10:	461d      	mov	r5, r3
   18f12:	e7ea      	b.n	18eea <bt_att_disconnected+0x86>
   18f14:	200007c8 	.word	0x200007c8

00018f18 <att_timeout>:
   18f18:	4b08      	ldr	r3, [pc, #32]	; (18f3c <att_timeout+0x24>)
   18f1a:	4909      	ldr	r1, [pc, #36]	; (18f40 <att_timeout+0x28>)
{
   18f1c:	b510      	push	{r4, lr}
   18f1e:	1ac9      	subs	r1, r1, r3
   18f20:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   18f22:	0189      	lsls	r1, r1, #6
{
   18f24:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   18f26:	f041 0101 	orr.w	r1, r1, #1
   18f2a:	4806      	ldr	r0, [pc, #24]	; (18f44 <att_timeout+0x2c>)
   18f2c:	f007 f8ee 	bl	2010c <log_0>
	bt_att_disconnected(&chan->chan.chan);
   18f30:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   18f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   18f38:	f7ff bf94 	b.w	18e64 <bt_att_disconnected>
   18f3c:	000256c4 	.word	0x000256c4
   18f40:	000256d4 	.word	0x000256d4
   18f44:	00027d77 	.word	0x00027d77

00018f48 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   18f48:	490a      	ldr	r1, [pc, #40]	; (18f74 <db_hash_store+0x2c>)
   18f4a:	480b      	ldr	r0, [pc, #44]	; (18f78 <db_hash_store+0x30>)
{
   18f4c:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   18f4e:	2210      	movs	r2, #16
   18f50:	f7f9 fbf2 	bl	12738 <settings_save_one>
	if (err) {
   18f54:	4601      	mov	r1, r0
   18f56:	b158      	cbz	r0, 18f70 <db_hash_store+0x28>
   18f58:	4b08      	ldr	r3, [pc, #32]	; (18f7c <db_hash_store+0x34>)
   18f5a:	4a09      	ldr	r2, [pc, #36]	; (18f80 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
   18f5c:	4809      	ldr	r0, [pc, #36]	; (18f84 <db_hash_store+0x3c>)
   18f5e:	1ad2      	subs	r2, r2, r3
   18f60:	08d2      	lsrs	r2, r2, #3
   18f62:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
   18f64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   18f68:	f042 0201 	orr.w	r2, r2, #1
   18f6c:	f007 b8db 	b.w	20126 <log_1>
}
   18f70:	bd08      	pop	{r3, pc}
   18f72:	bf00      	nop
   18f74:	20001f88 	.word	0x20001f88
   18f78:	00027d8a 	.word	0x00027d8a
   18f7c:	000256c4 	.word	0x000256c4
   18f80:	000256fc 	.word	0x000256fc
   18f84:	00027d92 	.word	0x00027d92

00018f88 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   18f88:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   18f8a:	490b      	ldr	r1, [pc, #44]	; (18fb8 <db_hash_set+0x30>)
{
   18f8c:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   18f8e:	4618      	mov	r0, r3
   18f90:	2210      	movs	r2, #16
   18f92:	47a0      	blx	r4
	if (len < 0) {
   18f94:	1e04      	subs	r4, r0, #0
   18f96:	da0c      	bge.n	18fb2 <db_hash_set+0x2a>
   18f98:	4a08      	ldr	r2, [pc, #32]	; (18fbc <db_hash_set+0x34>)
   18f9a:	4b09      	ldr	r3, [pc, #36]	; (18fc0 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
   18f9c:	4809      	ldr	r0, [pc, #36]	; (18fc4 <db_hash_set+0x3c>)
   18f9e:	1ad2      	subs	r2, r2, r3
   18fa0:	08d2      	lsrs	r2, r2, #3
   18fa2:	0192      	lsls	r2, r2, #6
   18fa4:	f042 0201 	orr.w	r2, r2, #1
   18fa8:	4621      	mov	r1, r4
   18faa:	f007 f8bc 	bl	20126 <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   18fae:	4620      	mov	r0, r4
   18fb0:	bd10      	pop	{r4, pc}
	return 0;
   18fb2:	2400      	movs	r4, #0
   18fb4:	e7fb      	b.n	18fae <db_hash_set+0x26>
   18fb6:	bf00      	nop
   18fb8:	20001f98 	.word	0x20001f98
   18fbc:	000256fc 	.word	0x000256fc
   18fc0:	000256c4 	.word	0x000256c4
   18fc4:	00027db8 	.word	0x00027db8

00018fc8 <sc_store>:
{
   18fc8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   18fca:	4605      	mov	r5, r0
{
   18fcc:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   18fce:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   18fd2:	4604      	mov	r4, r0
	if (cfg->id) {
   18fd4:	b1fa      	cbz	r2, 19016 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   18fd6:	ae02      	add	r6, sp, #8
   18fd8:	2104      	movs	r1, #4
   18fda:	4630      	mov	r0, r6
   18fdc:	f006 fb9c 	bl	1f718 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   18fe0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   18fe2:	4a0e      	ldr	r2, [pc, #56]	; (1901c <sc_store+0x54>)
   18fe4:	462b      	mov	r3, r5
   18fe6:	2124      	movs	r1, #36	; 0x24
   18fe8:	a803      	add	r0, sp, #12
   18fea:	f7fb faeb 	bl	145c4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   18fee:	f104 0108 	add.w	r1, r4, #8
   18ff2:	2204      	movs	r2, #4
   18ff4:	a803      	add	r0, sp, #12
   18ff6:	f7f9 fb9f 	bl	12738 <settings_save_one>
	if (err) {
   18ffa:	4601      	mov	r1, r0
   18ffc:	b148      	cbz	r0, 19012 <sc_store+0x4a>
   18ffe:	4a08      	ldr	r2, [pc, #32]	; (19020 <sc_store+0x58>)
   19000:	4b08      	ldr	r3, [pc, #32]	; (19024 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
   19002:	4809      	ldr	r0, [pc, #36]	; (19028 <sc_store+0x60>)
   19004:	1ad2      	subs	r2, r2, r3
   19006:	08d2      	lsrs	r2, r2, #3
   19008:	0192      	lsls	r2, r2, #6
   1900a:	f042 0201 	orr.w	r2, r2, #1
   1900e:	f007 f88a 	bl	20126 <log_1>
}
   19012:	b00c      	add	sp, #48	; 0x30
   19014:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   19016:	9200      	str	r2, [sp, #0]
   19018:	e7e3      	b.n	18fe2 <sc_store+0x1a>
   1901a:	bf00      	nop
   1901c:	00028019 	.word	0x00028019
   19020:	000256fc 	.word	0x000256fc
   19024:	000256c4 	.word	0x000256c4
   19028:	00027dd9 	.word	0x00027dd9

0001902c <db_hash_commit>:

static int db_hash_commit(void)
{
   1902c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1902e:	2108      	movs	r1, #8
   19030:	4804      	ldr	r0, [pc, #16]	; (19044 <db_hash_commit+0x18>)
   19032:	f00a fb24 	bl	2367e <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   19036:	2200      	movs	r2, #0
   19038:	2300      	movs	r3, #0
   1903a:	4803      	ldr	r0, [pc, #12]	; (19048 <db_hash_commit+0x1c>)
   1903c:	f005 fd2a 	bl	1ea94 <k_work_reschedule>

	return 0;
}
   19040:	2000      	movs	r0, #0
   19042:	bd08      	pop	{r3, pc}
   19044:	20002050 	.word	0x20002050
   19048:	20001fa8 	.word	0x20001fa8

0001904c <sc_commit>:
{
   1904c:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1904e:	f06f 0102 	mvn.w	r1, #2
   19052:	4808      	ldr	r0, [pc, #32]	; (19074 <sc_commit+0x28>)
   19054:	f00a fb33 	bl	236be <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19058:	4806      	ldr	r0, [pc, #24]	; (19074 <sc_commit+0x28>)
   1905a:	f00a fab4 	bl	235c6 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1905e:	07c3      	lsls	r3, r0, #31
   19060:	d505      	bpl.n	1906e <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   19062:	4805      	ldr	r0, [pc, #20]	; (19078 <sc_commit+0x2c>)
   19064:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19068:	2300      	movs	r3, #0
   1906a:	f005 fd13 	bl	1ea94 <k_work_reschedule>
}
   1906e:	2000      	movs	r0, #0
   19070:	bd08      	pop	{r3, pc}
   19072:	bf00      	nop
   19074:	20002050 	.word	0x20002050
   19078:	20002020 	.word	0x20002020

0001907c <find_sc_cfg>:
{
   1907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19080:	4c0e      	ldr	r4, [pc, #56]	; (190bc <find_sc_cfg+0x40>)
   19082:	4607      	mov	r7, r0
   19084:	4688      	mov	r8, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19086:	2600      	movs	r6, #0
   19088:	4625      	mov	r5, r4
   1908a:	f04f 090c 	mov.w	r9, #12
		if (id == sc_cfg[i].id &&
   1908e:	7823      	ldrb	r3, [r4, #0]
   19090:	42bb      	cmp	r3, r7
   19092:	d10b      	bne.n	190ac <find_sc_cfg+0x30>
	return memcmp(a, b, sizeof(*a));
   19094:	2207      	movs	r2, #7
   19096:	4641      	mov	r1, r8
   19098:	1c60      	adds	r0, r4, #1
   1909a:	fb09 fa06 	mul.w	sl, r9, r6
   1909e:	f009 f893 	bl	221c8 <memcmp>
   190a2:	b918      	cbnz	r0, 190ac <find_sc_cfg+0x30>
			return &sc_cfg[i];
   190a4:	eb05 000a 	add.w	r0, r5, sl
}
   190a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   190ac:	3601      	adds	r6, #1
   190ae:	2e06      	cmp	r6, #6
   190b0:	f104 040c 	add.w	r4, r4, #12
   190b4:	d1eb      	bne.n	1908e <find_sc_cfg+0x12>
	return NULL;
   190b6:	2000      	movs	r0, #0
   190b8:	e7f6      	b.n	190a8 <find_sc_cfg+0x2c>
   190ba:	bf00      	nop
   190bc:	200032fc 	.word	0x200032fc

000190c0 <sc_save>:
{
   190c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   190c4:	4680      	mov	r8, r0
   190c6:	460f      	mov	r7, r1
   190c8:	4616      	mov	r6, r2
   190ca:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   190cc:	f7ff ffd6 	bl	1907c <find_sc_cfg>
	if (!cfg) {
   190d0:	4604      	mov	r4, r0
   190d2:	b9c8      	cbnz	r0, 19108 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   190d4:	4669      	mov	r1, sp
   190d6:	9000      	str	r0, [sp, #0]
   190d8:	f8cd 0003 	str.w	r0, [sp, #3]
   190dc:	f7ff ffce 	bl	1907c <find_sc_cfg>
		if (!cfg) {
   190e0:	4604      	mov	r4, r0
   190e2:	b960      	cbnz	r0, 190fe <sc_save+0x3e>
   190e4:	4915      	ldr	r1, [pc, #84]	; (1913c <sc_save+0x7c>)
   190e6:	4b16      	ldr	r3, [pc, #88]	; (19140 <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
   190e8:	4816      	ldr	r0, [pc, #88]	; (19144 <sc_save+0x84>)
   190ea:	1ac9      	subs	r1, r1, r3
   190ec:	08c9      	lsrs	r1, r1, #3
   190ee:	0189      	lsls	r1, r1, #6
   190f0:	f041 0101 	orr.w	r1, r1, #1
   190f4:	f007 f80a 	bl	2010c <log_0>
}
   190f8:	b002      	add	sp, #8
   190fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   190fe:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19102:	4639      	mov	r1, r7
   19104:	f00a faca 	bl	2369c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19108:	8922      	ldrh	r2, [r4, #8]
   1910a:	8963      	ldrh	r3, [r4, #10]
   1910c:	b96a      	cbnz	r2, 1912a <sc_save+0x6a>
   1910e:	b973      	cbnz	r3, 1912e <sc_save+0x6e>
		cfg->data.start = start;
   19110:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19112:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   19114:	4621      	mov	r1, r4
   19116:	f811 0b01 	ldrb.w	r0, [r1], #1
   1911a:	f009 fab7 	bl	2268c <bt_addr_le_is_bonded>
   1911e:	2800      	cmp	r0, #0
   19120:	d0ea      	beq.n	190f8 <sc_save+0x38>
		sc_store(cfg);
   19122:	4620      	mov	r0, r4
   19124:	f7ff ff50 	bl	18fc8 <sc_store>
   19128:	e7e6      	b.n	190f8 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   1912a:	4296      	cmp	r6, r2
   1912c:	d302      	bcc.n	19134 <sc_save+0x74>
   1912e:	429d      	cmp	r5, r3
   19130:	d8ef      	bhi.n	19112 <sc_save+0x52>
   19132:	e7e1      	b.n	190f8 <sc_save+0x38>
	if (*end < new_end) {
   19134:	429d      	cmp	r5, r3
		*start = new_start;
   19136:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   19138:	d9ec      	bls.n	19114 <sc_save+0x54>
   1913a:	e7ea      	b.n	19112 <sc_save+0x52>
   1913c:	000256fc 	.word	0x000256fc
   19140:	000256c4 	.word	0x000256c4
   19144:	00027df5 	.word	0x00027df5

00019148 <sc_set>:
{
   19148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1914c:	460e      	mov	r6, r1
   1914e:	b087      	sub	sp, #28
   19150:	4690      	mov	r8, r2
   19152:	4699      	mov	r9, r3
	if (!name) {
   19154:	4607      	mov	r7, r0
   19156:	b978      	cbnz	r0, 19178 <sc_set+0x30>
   19158:	4937      	ldr	r1, [pc, #220]	; (19238 <sc_set+0xf0>)
   1915a:	4b38      	ldr	r3, [pc, #224]	; (1923c <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
   1915c:	4838      	ldr	r0, [pc, #224]	; (19240 <sc_set+0xf8>)
   1915e:	1ac9      	subs	r1, r1, r3
   19160:	08c9      	lsrs	r1, r1, #3
   19162:	0189      	lsls	r1, r1, #6
   19164:	f041 0101 	orr.w	r1, r1, #1
   19168:	f006 ffd0 	bl	2010c <log_0>
		return -EINVAL;
   1916c:	f06f 0515 	mvn.w	r5, #21
}
   19170:	4628      	mov	r0, r5
   19172:	b007      	add	sp, #28
   19174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   19178:	a902      	add	r1, sp, #8
   1917a:	f009 f92f 	bl	223dc <bt_settings_decode_key>
	if (err) {
   1917e:	4605      	mov	r5, r0
   19180:	b178      	cbz	r0, 191a2 <sc_set+0x5a>
   19182:	4a2e      	ldr	r2, [pc, #184]	; (1923c <sc_set+0xf4>)
   19184:	4c2c      	ldr	r4, [pc, #176]	; (19238 <sc_set+0xf0>)
   19186:	4638      	mov	r0, r7
   19188:	1aa4      	subs	r4, r4, r2
   1918a:	08e4      	lsrs	r4, r4, #3
   1918c:	f7f8 f9f2 	bl	11574 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   19190:	01a4      	lsls	r4, r4, #6
   19192:	f044 0401 	orr.w	r4, r4, #1
   19196:	4601      	mov	r1, r0
   19198:	4622      	mov	r2, r4
   1919a:	482a      	ldr	r0, [pc, #168]	; (19244 <sc_set+0xfc>)
   1919c:	f006 ffc3 	bl	20126 <log_1>
   191a0:	e7e4      	b.n	1916c <sc_set+0x24>
	settings_name_next(name, &next);
   191a2:	a901      	add	r1, sp, #4
   191a4:	4638      	mov	r0, r7
   191a6:	f007 fd1b 	bl	20be0 <settings_name_next>
	if (!next) {
   191aa:	9801      	ldr	r0, [sp, #4]
   191ac:	b308      	cbz	r0, 191f2 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
   191ae:	220a      	movs	r2, #10
   191b0:	4629      	mov	r1, r5
   191b2:	f008 ff4b 	bl	2204c <strtol>
   191b6:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   191b8:	a902      	add	r1, sp, #8
   191ba:	4638      	mov	r0, r7
   191bc:	f7ff ff5e 	bl	1907c <find_sc_cfg>
	if (!cfg && len_rd) {
   191c0:	4604      	mov	r4, r0
   191c2:	bb88      	cbnz	r0, 19228 <sc_set+0xe0>
   191c4:	2e00      	cmp	r6, #0
   191c6:	d0d3      	beq.n	19170 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   191c8:	a904      	add	r1, sp, #16
   191ca:	9004      	str	r0, [sp, #16]
   191cc:	f8cd 0013 	str.w	r0, [sp, #19]
   191d0:	f7ff ff54 	bl	1907c <find_sc_cfg>
		if (!cfg) {
   191d4:	4604      	mov	r4, r0
   191d6:	b970      	cbnz	r0, 191f6 <sc_set+0xae>
   191d8:	4b18      	ldr	r3, [pc, #96]	; (1923c <sc_set+0xf4>)
   191da:	4917      	ldr	r1, [pc, #92]	; (19238 <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
   191dc:	481a      	ldr	r0, [pc, #104]	; (19248 <sc_set+0x100>)
   191de:	1ac9      	subs	r1, r1, r3
   191e0:	08c9      	lsrs	r1, r1, #3
   191e2:	0189      	lsls	r1, r1, #6
   191e4:	f041 0101 	orr.w	r1, r1, #1
   191e8:	f006 ff90 	bl	2010c <log_0>
			return -ENOMEM;
   191ec:	f06f 050b 	mvn.w	r5, #11
   191f0:	e7be      	b.n	19170 <sc_set+0x28>
		id = BT_ID_DEFAULT;
   191f2:	462f      	mov	r7, r5
   191f4:	e7e0      	b.n	191b8 <sc_set+0x70>
		cfg->id = id;
   191f6:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   191fa:	a902      	add	r1, sp, #8
   191fc:	f00a fa4e 	bl	2369c <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   19200:	f104 0108 	add.w	r1, r4, #8
   19204:	2204      	movs	r2, #4
   19206:	4648      	mov	r0, r9
   19208:	47c0      	blx	r8
		if (len < 0) {
   1920a:	1e04      	subs	r4, r0, #0
   1920c:	dab0      	bge.n	19170 <sc_set+0x28>
   1920e:	4b0b      	ldr	r3, [pc, #44]	; (1923c <sc_set+0xf4>)
   19210:	4a09      	ldr	r2, [pc, #36]	; (19238 <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
   19212:	480e      	ldr	r0, [pc, #56]	; (1924c <sc_set+0x104>)
   19214:	1ad2      	subs	r2, r2, r3
   19216:	08d2      	lsrs	r2, r2, #3
   19218:	0192      	lsls	r2, r2, #6
   1921a:	f042 0201 	orr.w	r2, r2, #1
   1921e:	4621      	mov	r1, r4
   19220:	f006 ff81 	bl	20126 <log_1>
			return len;
   19224:	4625      	mov	r5, r4
   19226:	e7a3      	b.n	19170 <sc_set+0x28>
	if (len_rd) {
   19228:	2e00      	cmp	r6, #0
   1922a:	d1e9      	bne.n	19200 <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
   1922c:	220c      	movs	r2, #12
   1922e:	4631      	mov	r1, r6
   19230:	f009 f805 	bl	2223e <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   19234:	e79c      	b.n	19170 <sc_set+0x28>
   19236:	bf00      	nop
   19238:	000256fc 	.word	0x000256fc
   1923c:	000256c4 	.word	0x000256c4
   19240:	00026c5f 	.word	0x00026c5f
   19244:	00027e14 	.word	0x00027e14
   19248:	00027e30 	.word	0x00027e30
   1924c:	00027db8 	.word	0x00027db8

00019250 <find_cf_cfg_by_addr>:
{
   19250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19254:	4c0d      	ldr	r4, [pc, #52]	; (1928c <find_cf_cfg_by_addr+0x3c>)
   19256:	4607      	mov	r7, r0
   19258:	4688      	mov	r8, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1925a:	2600      	movs	r6, #0
   1925c:	4625      	mov	r5, r4
			if (id == cf_cfg[i].id &&
   1925e:	7823      	ldrb	r3, [r4, #0]
   19260:	42bb      	cmp	r3, r7
   19262:	d10b      	bne.n	1927c <find_cf_cfg_by_addr+0x2c>
   19264:	2207      	movs	r2, #7
   19266:	1c61      	adds	r1, r4, #1
   19268:	4640      	mov	r0, r8
   1926a:	ea4f 1906 	mov.w	r9, r6, lsl #4
   1926e:	f008 ffab 	bl	221c8 <memcmp>
   19272:	b918      	cbnz	r0, 1927c <find_cf_cfg_by_addr+0x2c>
				return &cf_cfg[i];
   19274:	eb05 0009 	add.w	r0, r5, r9
}
   19278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1927c:	3601      	adds	r6, #1
   1927e:	2e06      	cmp	r6, #6
   19280:	f104 0410 	add.w	r4, r4, #16
   19284:	d1eb      	bne.n	1925e <find_cf_cfg_by_addr+0xe>
	return NULL;
   19286:	2000      	movs	r0, #0
   19288:	e7f6      	b.n	19278 <find_cf_cfg_by_addr+0x28>
   1928a:	bf00      	nop
   1928c:	20002f28 	.word	0x20002f28

00019290 <ccc_save>:
{
   19290:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19292:	4b0c      	ldr	r3, [pc, #48]	; (192c4 <ccc_save+0x34>)
{
   19294:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19296:	6882      	ldr	r2, [r0, #8]
   19298:	429a      	cmp	r2, r3
{
   1929a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1929c:	d10f      	bne.n	192be <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1929e:	7922      	ldrb	r2, [r4, #4]
   192a0:	6821      	ldr	r1, [r4, #0]
   192a2:	68c0      	ldr	r0, [r0, #12]
   192a4:	f00a fa37 	bl	23716 <ccc_find_cfg>
	if (!cfg) {
   192a8:	b148      	cbz	r0, 192be <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   192aa:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   192ae:	8901      	ldrh	r1, [r0, #8]
   192b0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   192b4:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   192b6:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   192b8:	8151      	strh	r1, [r2, #10]
	save->count++;
   192ba:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   192be:	2001      	movs	r0, #1
   192c0:	bd38      	pop	{r3, r4, r5, pc}
   192c2:	bf00      	nop
   192c4:	000194bd 	.word	0x000194bd

000192c8 <ccc_load>:
{
   192c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   192ca:	4b21      	ldr	r3, [pc, #132]	; (19350 <ccc_load+0x88>)
{
   192cc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   192ce:	6882      	ldr	r2, [r0, #8]
   192d0:	429a      	cmp	r2, r3
   192d2:	d002      	beq.n	192da <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   192d4:	2001      	movs	r0, #1
}
   192d6:	b002      	add	sp, #8
   192d8:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   192da:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   192dc:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   192de:	b94b      	cbnz	r3, 192f4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   192e0:	7922      	ldrb	r2, [r4, #4]
   192e2:	6821      	ldr	r1, [r4, #0]
   192e4:	4630      	mov	r0, r6
   192e6:	f00a fa16 	bl	23716 <ccc_find_cfg>
	if (!cfg) {
   192ea:	2800      	cmp	r0, #0
   192ec:	d0f2      	beq.n	192d4 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   192ee:	f00a f9d8 	bl	236a2 <clear_ccc_cfg>
   192f2:	e7ef      	b.n	192d4 <ccc_load+0xc>
	} else if (!load->count) {
   192f4:	68e0      	ldr	r0, [r4, #12]
   192f6:	2800      	cmp	r0, #0
   192f8:	d0ed      	beq.n	192d6 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   192fa:	881b      	ldrh	r3, [r3, #0]
   192fc:	4299      	cmp	r1, r3
   192fe:	d00a      	beq.n	19316 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   19300:	d9e8      	bls.n	192d4 <ccc_load+0xc>
	load->count--;
   19302:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   19304:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   19306:	3801      	subs	r0, #1
	load->entry++;
   19308:	3304      	adds	r3, #4
	load->count--;
   1930a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1930c:	3800      	subs	r0, #0
	load->entry++;
   1930e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19310:	bf18      	it	ne
   19312:	2001      	movne	r0, #1
   19314:	e7df      	b.n	192d6 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   19316:	7922      	ldrb	r2, [r4, #4]
   19318:	6821      	ldr	r1, [r4, #0]
   1931a:	4630      	mov	r0, r6
   1931c:	f00a f9fb 	bl	23716 <ccc_find_cfg>
	if (!cfg) {
   19320:	4605      	mov	r5, r0
   19322:	b980      	cbnz	r0, 19346 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   19324:	9000      	str	r0, [sp, #0]
   19326:	4602      	mov	r2, r0
   19328:	f8cd 0003 	str.w	r0, [sp, #3]
   1932c:	4669      	mov	r1, sp
   1932e:	4630      	mov	r0, r6
   19330:	f00a f9f1 	bl	23716 <ccc_find_cfg>
		if (!cfg) {
   19334:	4605      	mov	r5, r0
   19336:	2800      	cmp	r0, #0
   19338:	d0e3      	beq.n	19302 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1933a:	6821      	ldr	r1, [r4, #0]
   1933c:	3001      	adds	r0, #1
   1933e:	f00a f9ad 	bl	2369c <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   19342:	7923      	ldrb	r3, [r4, #4]
   19344:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   19346:	68a3      	ldr	r3, [r4, #8]
   19348:	885b      	ldrh	r3, [r3, #2]
   1934a:	812b      	strh	r3, [r5, #8]
   1934c:	e7d9      	b.n	19302 <ccc_load+0x3a>
   1934e:	bf00      	nop
   19350:	000194bd 	.word	0x000194bd

00019354 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   19354:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   19356:	6881      	ldr	r1, [r0, #8]
{
   19358:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1935a:	4a07      	ldr	r2, [pc, #28]	; (19378 <remove_peer_from_attr+0x24>)
   1935c:	4291      	cmp	r1, r2
   1935e:	d109      	bne.n	19374 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   19360:	791a      	ldrb	r2, [r3, #4]
   19362:	6819      	ldr	r1, [r3, #0]
   19364:	68c0      	ldr	r0, [r0, #12]
   19366:	f00a f9d6 	bl	23716 <ccc_find_cfg>
	if (cfg) {
   1936a:	b118      	cbz	r0, 19374 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1936c:	220a      	movs	r2, #10
   1936e:	2100      	movs	r1, #0
   19370:	f008 ff65 	bl	2223e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   19374:	2001      	movs	r0, #1
   19376:	bd08      	pop	{r3, pc}
   19378:	000194bd 	.word	0x000194bd

0001937c <find_cf_cfg>:
{
   1937c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1937e:	4d0f      	ldr	r5, [pc, #60]	; (193bc <find_cf_cfg+0x40>)
   19380:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19382:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19384:	462f      	mov	r7, r5
		if (!conn) {
   19386:	1c68      	adds	r0, r5, #1
   19388:	b954      	cbnz	r4, 193a0 <find_cf_cfg+0x24>
   1938a:	2207      	movs	r2, #7
   1938c:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1938e:	9400      	str	r4, [sp, #0]
   19390:	f8cd 4003 	str.w	r4, [sp, #3]
   19394:	f008 ff18 	bl	221c8 <memcmp>
   19398:	b948      	cbnz	r0, 193ae <find_cf_cfg+0x32>
}
   1939a:	4638      	mov	r0, r7
   1939c:	b003      	add	sp, #12
   1939e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   193a0:	4602      	mov	r2, r0
   193a2:	7829      	ldrb	r1, [r5, #0]
   193a4:	4620      	mov	r0, r4
   193a6:	f009 fbbd 	bl	22b24 <bt_conn_is_peer_addr_le>
   193aa:	2800      	cmp	r0, #0
   193ac:	d1f5      	bne.n	1939a <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   193ae:	3601      	adds	r6, #1
   193b0:	2e06      	cmp	r6, #6
   193b2:	f105 0510 	add.w	r5, r5, #16
   193b6:	d1e5      	bne.n	19384 <find_cf_cfg+0x8>
	return NULL;
   193b8:	2700      	movs	r7, #0
   193ba:	e7ee      	b.n	1939a <find_cf_cfg+0x1e>
   193bc:	20002f28 	.word	0x20002f28

000193c0 <cf_set>:
{
   193c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   193c4:	4689      	mov	r9, r1
   193c6:	b085      	sub	sp, #20
   193c8:	4617      	mov	r7, r2
   193ca:	4698      	mov	r8, r3
	if (!name) {
   193cc:	4605      	mov	r5, r0
   193ce:	b978      	cbnz	r0, 193f0 <cf_set+0x30>
   193d0:	4934      	ldr	r1, [pc, #208]	; (194a4 <cf_set+0xe4>)
   193d2:	4b35      	ldr	r3, [pc, #212]	; (194a8 <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
   193d4:	4835      	ldr	r0, [pc, #212]	; (194ac <cf_set+0xec>)
   193d6:	1ac9      	subs	r1, r1, r3
   193d8:	08c9      	lsrs	r1, r1, #3
   193da:	0189      	lsls	r1, r1, #6
   193dc:	f041 0101 	orr.w	r1, r1, #1
   193e0:	f006 fe94 	bl	2010c <log_0>
		return -EINVAL;
   193e4:	f06f 0415 	mvn.w	r4, #21
}
   193e8:	4620      	mov	r0, r4
   193ea:	b005      	add	sp, #20
   193ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   193f0:	a902      	add	r1, sp, #8
   193f2:	f008 fff3 	bl	223dc <bt_settings_decode_key>
	if (err) {
   193f6:	4604      	mov	r4, r0
   193f8:	b178      	cbz	r0, 1941a <cf_set+0x5a>
   193fa:	4a2b      	ldr	r2, [pc, #172]	; (194a8 <cf_set+0xe8>)
   193fc:	4c29      	ldr	r4, [pc, #164]	; (194a4 <cf_set+0xe4>)
   193fe:	4628      	mov	r0, r5
   19400:	1aa4      	subs	r4, r4, r2
   19402:	08e4      	lsrs	r4, r4, #3
   19404:	f7f8 f8b6 	bl	11574 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   19408:	01a4      	lsls	r4, r4, #6
   1940a:	f044 0401 	orr.w	r4, r4, #1
   1940e:	4601      	mov	r1, r0
   19410:	4622      	mov	r2, r4
   19412:	4827      	ldr	r0, [pc, #156]	; (194b0 <cf_set+0xf0>)
   19414:	f006 fe87 	bl	20126 <log_1>
   19418:	e7e4      	b.n	193e4 <cf_set+0x24>
	settings_name_next(name, &next);
   1941a:	a901      	add	r1, sp, #4
   1941c:	4628      	mov	r0, r5
   1941e:	f007 fbdf 	bl	20be0 <settings_name_next>
	if (!next) {
   19422:	9801      	ldr	r0, [sp, #4]
   19424:	b1d8      	cbz	r0, 1945e <cf_set+0x9e>
		id = strtol(next, NULL, 10);
   19426:	220a      	movs	r2, #10
   19428:	4621      	mov	r1, r4
   1942a:	f008 fe0f 	bl	2204c <strtol>
   1942e:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   19430:	a902      	add	r1, sp, #8
   19432:	4630      	mov	r0, r6
   19434:	f7ff ff0c 	bl	19250 <find_cf_cfg_by_addr>
	if (!cfg) {
   19438:	4605      	mov	r5, r0
   1943a:	b9b8      	cbnz	r0, 1946c <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
   1943c:	f7ff ff9e 	bl	1937c <find_cf_cfg>
		if (!cfg) {
   19440:	4605      	mov	r5, r0
   19442:	b970      	cbnz	r0, 19462 <cf_set+0xa2>
   19444:	4b18      	ldr	r3, [pc, #96]	; (194a8 <cf_set+0xe8>)
   19446:	4917      	ldr	r1, [pc, #92]	; (194a4 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
   19448:	481a      	ldr	r0, [pc, #104]	; (194b4 <cf_set+0xf4>)
   1944a:	1ac9      	subs	r1, r1, r3
   1944c:	08c9      	lsrs	r1, r1, #3
   1944e:	0189      	lsls	r1, r1, #6
   19450:	f041 0101 	orr.w	r1, r1, #1
   19454:	f006 fe5a 	bl	2010c <log_0>
			return -ENOMEM;
   19458:	f06f 040b 	mvn.w	r4, #11
   1945c:	e7c4      	b.n	193e8 <cf_set+0x28>
		id = BT_ID_DEFAULT;
   1945e:	4626      	mov	r6, r4
   19460:	e7e6      	b.n	19430 <cf_set+0x70>
		cfg->id = id;
   19462:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   19466:	a902      	add	r1, sp, #8
   19468:	f00a f918 	bl	2369c <bt_addr_le_copy>
	if (len_rd) {
   1946c:	f1b9 0f00 	cmp.w	r9, #0
   19470:	d013      	beq.n	1949a <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   19472:	f105 0108 	add.w	r1, r5, #8
   19476:	2201      	movs	r2, #1
   19478:	4640      	mov	r0, r8
   1947a:	47b8      	blx	r7
		if (len < 0) {
   1947c:	1e05      	subs	r5, r0, #0
   1947e:	dab3      	bge.n	193e8 <cf_set+0x28>
   19480:	4b09      	ldr	r3, [pc, #36]	; (194a8 <cf_set+0xe8>)
   19482:	4a08      	ldr	r2, [pc, #32]	; (194a4 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
   19484:	480c      	ldr	r0, [pc, #48]	; (194b8 <cf_set+0xf8>)
   19486:	1ad2      	subs	r2, r2, r3
   19488:	08d2      	lsrs	r2, r2, #3
   1948a:	0192      	lsls	r2, r2, #6
   1948c:	f042 0201 	orr.w	r2, r2, #1
   19490:	4629      	mov	r1, r5
   19492:	f006 fe48 	bl	20126 <log_1>
			return len;
   19496:	462c      	mov	r4, r5
   19498:	e7a6      	b.n	193e8 <cf_set+0x28>
		clear_cf_cfg(cfg);
   1949a:	4628      	mov	r0, r5
   1949c:	f00a f91e 	bl	236dc <clear_cf_cfg>
   194a0:	e7a2      	b.n	193e8 <cf_set+0x28>
   194a2:	bf00      	nop
   194a4:	000256fc 	.word	0x000256fc
   194a8:	000256c4 	.word	0x000256c4
   194ac:	00026c5f 	.word	0x00026c5f
   194b0:	00027e14 	.word	0x00027e14
   194b4:	00027e52 	.word	0x00027e52
   194b8:	00027db8 	.word	0x00027db8

000194bc <bt_gatt_attr_write_ccc>:
{
   194bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194c0:	461f      	mov	r7, r3
   194c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   194c6:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   194ca:	4606      	mov	r6, r0
   194cc:	4688      	mov	r8, r1
	if (offset) {
   194ce:	2b00      	cmp	r3, #0
   194d0:	d14a      	bne.n	19568 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
   194d2:	1e7b      	subs	r3, r7, #1
   194d4:	2b01      	cmp	r3, #1
   194d6:	d84a      	bhi.n	1956e <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
   194d8:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   194da:	7815      	ldrb	r5, [r2, #0]
   194dc:	bf18      	it	ne
   194de:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   194e0:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   194e2:	bf0c      	ite	eq
   194e4:	b2ad      	uxtheq	r5, r5
   194e6:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   194ea:	f00a f930 	bl	2374e <find_ccc_cfg>
	if (!cfg) {
   194ee:	4604      	mov	r4, r0
   194f0:	b9e0      	cbnz	r0, 1952c <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
   194f2:	b915      	cbnz	r5, 194fa <bt_gatt_attr_write_ccc+0x3e>
			return len;
   194f4:	4638      	mov	r0, r7
}
   194f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   194fa:	4649      	mov	r1, r9
   194fc:	f00a f927 	bl	2374e <find_ccc_cfg>
		if (!cfg) {
   19500:	4604      	mov	r4, r0
   19502:	b960      	cbnz	r0, 1951e <bt_gatt_attr_write_ccc+0x62>
   19504:	4b1b      	ldr	r3, [pc, #108]	; (19574 <bt_gatt_attr_write_ccc+0xb8>)
   19506:	491c      	ldr	r1, [pc, #112]	; (19578 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
   19508:	481c      	ldr	r0, [pc, #112]	; (1957c <bt_gatt_attr_write_ccc+0xc0>)
   1950a:	1ac9      	subs	r1, r1, r3
   1950c:	08c9      	lsrs	r1, r1, #3
   1950e:	0189      	lsls	r1, r1, #6
   19510:	f041 0102 	orr.w	r1, r1, #2
   19514:	f006 fdfa 	bl	2010c <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19518:	f06f 0010 	mvn.w	r0, #16
   1951c:	e7eb      	b.n	194f6 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1951e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19522:	3001      	adds	r0, #1
   19524:	f00a f8ba 	bl	2369c <bt_addr_le_copy>
		cfg->id = conn->id;
   19528:	7a33      	ldrb	r3, [r6, #8]
   1952a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1952c:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   19530:	b973      	cbnz	r3, 19550 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
   19532:	f8b9 3032 	ldrh.w	r3, [r9, #50]	; 0x32
	cfg->value = value;
   19536:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   19538:	42ab      	cmp	r3, r5
   1953a:	d003      	beq.n	19544 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   1953c:	4649      	mov	r1, r9
   1953e:	4640      	mov	r0, r8
   19540:	f00a f80e 	bl	23560 <gatt_ccc_changed>
	if (!value) {
   19544:	2d00      	cmp	r5, #0
   19546:	d1d5      	bne.n	194f4 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   19548:	4620      	mov	r0, r4
   1954a:	f00a f8aa 	bl	236a2 <clear_ccc_cfg>
   1954e:	e7d1      	b.n	194f4 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   19550:	462a      	mov	r2, r5
   19552:	4641      	mov	r1, r8
   19554:	4630      	mov	r0, r6
   19556:	4798      	blx	r3
		if (write < 0) {
   19558:	2800      	cmp	r0, #0
   1955a:	dbcc      	blt.n	194f6 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1955c:	1e42      	subs	r2, r0, #1
   1955e:	2a01      	cmp	r2, #1
   19560:	d9e7      	bls.n	19532 <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19562:	f06f 000d 	mvn.w	r0, #13
   19566:	e7c6      	b.n	194f6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19568:	f06f 0006 	mvn.w	r0, #6
   1956c:	e7c3      	b.n	194f6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1956e:	f06f 000c 	mvn.w	r0, #12
   19572:	e7c0      	b.n	194f6 <bt_gatt_attr_write_ccc+0x3a>
   19574:	000256c4 	.word	0x000256c4
   19578:	000256fc 	.word	0x000256fc
   1957c:	00027e74 	.word	0x00027e74

00019580 <cf_write>:
{
   19580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19584:	4698      	mov	r8, r3
   19586:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1958a:	2b01      	cmp	r3, #1
{
   1958c:	4606      	mov	r6, r0
   1958e:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   19590:	d83d      	bhi.n	1960e <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   19592:	4443      	add	r3, r8
   19594:	2b01      	cmp	r3, #1
   19596:	4645      	mov	r5, r8
   19598:	dc3c      	bgt.n	19614 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1959a:	f7ff feef 	bl	1937c <find_cf_cfg>
	if (!cfg) {
   1959e:	4604      	mov	r4, r0
   195a0:	b990      	cbnz	r0, 195c8 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   195a2:	f7ff feeb 	bl	1937c <find_cf_cfg>
	if (!cfg) {
   195a6:	4604      	mov	r4, r0
   195a8:	b970      	cbnz	r0, 195c8 <cf_write+0x48>
   195aa:	4b1d      	ldr	r3, [pc, #116]	; (19620 <cf_write+0xa0>)
   195ac:	491d      	ldr	r1, [pc, #116]	; (19624 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   195ae:	481e      	ldr	r0, [pc, #120]	; (19628 <cf_write+0xa8>)
   195b0:	1ac9      	subs	r1, r1, r3
   195b2:	08c9      	lsrs	r1, r1, #3
   195b4:	0189      	lsls	r1, r1, #6
   195b6:	f041 0102 	orr.w	r1, r1, #2
   195ba:	f006 fda7 	bl	2010c <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   195be:	f06f 0510 	mvn.w	r5, #16
}
   195c2:	4628      	mov	r0, r5
   195c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   195c8:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   195ca:	f1b8 0f00 	cmp.w	r8, #0
   195ce:	d10c      	bne.n	195ea <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   195d0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   195d4:	1c60      	adds	r0, r4, #1
   195d6:	f00a f861 	bl	2369c <bt_addr_le_copy>
	cfg->id = conn->id;
   195da:	4620      	mov	r0, r4
   195dc:	7a33      	ldrb	r3, [r6, #8]
   195de:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   195e2:	2101      	movs	r1, #1
   195e4:	f00a f84b 	bl	2367e <atomic_or>
}
   195e8:	e7eb      	b.n	195c2 <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   195ea:	7a20      	ldrb	r0, [r4, #8]
   195ec:	fa20 f301 	lsr.w	r3, r0, r1
   195f0:	07da      	lsls	r2, r3, #31
   195f2:	d503      	bpl.n	195fc <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   195f4:	783b      	ldrb	r3, [r7, #0]
   195f6:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   195f8:	07db      	lsls	r3, r3, #31
   195fa:	d50e      	bpl.n	1961a <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   195fc:	3101      	adds	r1, #1
   195fe:	2903      	cmp	r1, #3
   19600:	d1e3      	bne.n	195ca <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19602:	783b      	ldrb	r3, [r7, #0]
   19604:	f003 0307 	and.w	r3, r3, #7
   19608:	4318      	orrs	r0, r3
   1960a:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1960c:	e7e0      	b.n	195d0 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1960e:	f06f 0506 	mvn.w	r5, #6
   19612:	e7d6      	b.n	195c2 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19614:	f06f 050c 	mvn.w	r5, #12
   19618:	e7d3      	b.n	195c2 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1961a:	f06f 0512 	mvn.w	r5, #18
   1961e:	e7d0      	b.n	195c2 <cf_write+0x42>
   19620:	000256c4 	.word	0x000256c4
   19624:	000256fc 	.word	0x000256fc
   19628:	00027e8e 	.word	0x00027e8e

0001962c <read_ppcp>:
{
   1962c:	b513      	push	{r0, r1, r4, lr}
   1962e:	4610      	mov	r0, r2
   19630:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   19634:	4a0a      	ldr	r2, [pc, #40]	; (19660 <read_ppcp+0x34>)
   19636:	9200      	str	r2, [sp, #0]
	if (offset > value_len) {
   19638:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1963a:	f5a2 72c7 	sub.w	r2, r2, #398	; 0x18e
   1963e:	9201      	str	r2, [sp, #4]
	if (offset > value_len) {
   19640:	d80b      	bhi.n	1965a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   19642:	f1c1 0408 	rsb	r4, r1, #8
   19646:	429c      	cmp	r4, r3
   19648:	bfa8      	it	ge
   1964a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1964c:	4622      	mov	r2, r4
   1964e:	4469      	add	r1, sp
   19650:	f008 fdca 	bl	221e8 <memcpy>
}
   19654:	4620      	mov	r0, r4
   19656:	b002      	add	sp, #8
   19658:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1965a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1965e:	e7f9      	b.n	19654 <read_ppcp+0x28>
   19660:	01900190 	.word	0x01900190

00019664 <sc_indicate_rsp>:
{
   19664:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19666:	f06f 0102 	mvn.w	r1, #2
   1966a:	4604      	mov	r4, r0
   1966c:	480d      	ldr	r0, [pc, #52]	; (196a4 <sc_indicate_rsp+0x40>)
   1966e:	f00a f826 	bl	236be <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19672:	480c      	ldr	r0, [pc, #48]	; (196a4 <sc_indicate_rsp+0x40>)
   19674:	f009 ffa7 	bl	235c6 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19678:	07c2      	lsls	r2, r0, #31
   1967a:	d504      	bpl.n	19686 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1967c:	480a      	ldr	r0, [pc, #40]	; (196a8 <sc_indicate_rsp+0x44>)
   1967e:	2200      	movs	r2, #0
   19680:	2300      	movs	r3, #0
   19682:	f005 fa07 	bl	1ea94 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   19686:	4620      	mov	r0, r4
   19688:	f7ff fe78 	bl	1937c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1968c:	b140      	cbz	r0, 196a0 <sc_indicate_rsp+0x3c>
   1968e:	7a03      	ldrb	r3, [r0, #8]
   19690:	07db      	lsls	r3, r3, #31
   19692:	d505      	bpl.n	196a0 <sc_indicate_rsp+0x3c>
}
   19694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19698:	2101      	movs	r1, #1
   1969a:	300c      	adds	r0, #12
   1969c:	f009 bfef 	b.w	2367e <atomic_or>
   196a0:	bd10      	pop	{r4, pc}
   196a2:	bf00      	nop
   196a4:	20002050 	.word	0x20002050
   196a8:	20002020 	.word	0x20002020

000196ac <bt_gatt_clear_sc>:
{
   196ac:	b570      	push	{r4, r5, r6, lr}
   196ae:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   196b0:	f7ff fce4 	bl	1907c <find_sc_cfg>
	if (!cfg) {
   196b4:	4604      	mov	r4, r0
   196b6:	b318      	cbz	r0, 19700 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
   196b8:	4605      	mov	r5, r0
   196ba:	f815 2b01 	ldrb.w	r2, [r5], #1
   196be:	b312      	cbz	r2, 19706 <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   196c0:	ae02      	add	r6, sp, #8
   196c2:	2104      	movs	r1, #4
   196c4:	4630      	mov	r0, r6
   196c6:	f006 f827 	bl	1f718 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   196ca:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   196cc:	2124      	movs	r1, #36	; 0x24
   196ce:	4a0f      	ldr	r2, [pc, #60]	; (1970c <bt_gatt_clear_sc+0x60>)
   196d0:	462b      	mov	r3, r5
   196d2:	a803      	add	r0, sp, #12
   196d4:	f7fa ff76 	bl	145c4 <bt_settings_encode_key>
		err = settings_delete(key);
   196d8:	a803      	add	r0, sp, #12
   196da:	f007 fa5a 	bl	20b92 <settings_delete>
		if (err) {
   196de:	4601      	mov	r1, r0
   196e0:	b148      	cbz	r0, 196f6 <bt_gatt_clear_sc+0x4a>
   196e2:	4a0b      	ldr	r2, [pc, #44]	; (19710 <bt_gatt_clear_sc+0x64>)
   196e4:	4b0b      	ldr	r3, [pc, #44]	; (19714 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
   196e6:	480c      	ldr	r0, [pc, #48]	; (19718 <bt_gatt_clear_sc+0x6c>)
   196e8:	1ad2      	subs	r2, r2, r3
   196ea:	08d2      	lsrs	r2, r2, #3
   196ec:	0192      	lsls	r2, r2, #6
   196ee:	f042 0201 	orr.w	r2, r2, #1
   196f2:	f006 fd18 	bl	20126 <log_1>
	memset(cfg, 0, sizeof(*cfg));
   196f6:	220c      	movs	r2, #12
   196f8:	2100      	movs	r1, #0
   196fa:	4620      	mov	r0, r4
   196fc:	f008 fd9f 	bl	2223e <memset>
}
   19700:	2000      	movs	r0, #0
   19702:	b00c      	add	sp, #48	; 0x30
   19704:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   19706:	9200      	str	r2, [sp, #0]
   19708:	e7e0      	b.n	196cc <bt_gatt_clear_sc+0x20>
   1970a:	bf00      	nop
   1970c:	00028019 	.word	0x00028019
   19710:	000256fc 	.word	0x000256fc
   19714:	000256c4 	.word	0x000256c4
   19718:	00027eba 	.word	0x00027eba

0001971c <sc_clear>:
{
   1971c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1971e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   19722:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19724:	4631      	mov	r1, r6
   19726:	7a00      	ldrb	r0, [r0, #8]
   19728:	f008 ffb0 	bl	2268c <bt_addr_le_is_bonded>
   1972c:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1972e:	4631      	mov	r1, r6
   19730:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19732:	b17d      	cbz	r5, 19754 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   19734:	f7ff ffba 	bl	196ac <bt_gatt_clear_sc>
		if (err) {
   19738:	4601      	mov	r1, r0
   1973a:	b1a0      	cbz	r0, 19766 <sc_clear+0x4a>
   1973c:	4a0a      	ldr	r2, [pc, #40]	; (19768 <sc_clear+0x4c>)
   1973e:	4b0b      	ldr	r3, [pc, #44]	; (1976c <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
   19740:	480b      	ldr	r0, [pc, #44]	; (19770 <sc_clear+0x54>)
   19742:	1ad2      	subs	r2, r2, r3
   19744:	08d2      	lsrs	r2, r2, #3
   19746:	0192      	lsls	r2, r2, #6
}
   19748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   1974c:	f042 0201 	orr.w	r2, r2, #1
   19750:	f006 bce9 	b.w	20126 <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19754:	f7ff fc92 	bl	1907c <find_sc_cfg>
		if (cfg) {
   19758:	b128      	cbz	r0, 19766 <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
   1975a:	4629      	mov	r1, r5
   1975c:	220c      	movs	r2, #12
}
   1975e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   19762:	f008 bd6c 	b.w	2223e <memset>
}
   19766:	bd70      	pop	{r4, r5, r6, pc}
   19768:	000256fc 	.word	0x000256fc
   1976c:	000256c4 	.word	0x000256c4
   19770:	00027ed7 	.word	0x00027ed7

00019774 <disconnected_cb>:
{
   19774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19778:	4b25      	ldr	r3, [pc, #148]	; (19810 <disconnected_cb+0x9c>)
{
   1977a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1977c:	6882      	ldr	r2, [r0, #8]
   1977e:	429a      	cmp	r2, r3
{
   19780:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19782:	d12f      	bne.n	197e4 <disconnected_cb+0x70>
	ccc = attr->user_data;
   19784:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   19786:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
   19788:	b363      	cbz	r3, 197e4 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
   1978a:	f8df b088 	ldr.w	fp, [pc, #136]	; 19814 <disconnected_cb+0xa0>
   1978e:	1c6c      	adds	r4, r5, #1
   19790:	f105 0a33 	add.w	sl, r5, #51	; 0x33
	value_used = false;
   19794:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19798:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   1979c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   197a0:	b19b      	cbz	r3, 197ca <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   197a2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   197a6:	4622      	mov	r2, r4
   197a8:	4630      	mov	r0, r6
   197aa:	f009 f9bb 	bl	22b24 <bt_conn_is_peer_addr_le>
   197ae:	b9e0      	cbnz	r0, 197ea <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   197b0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   197b4:	4621      	mov	r1, r4
   197b6:	f7fe f863 	bl	17880 <bt_conn_lookup_addr_le>
			if (tmp) {
   197ba:	b130      	cbz	r0, 197ca <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   197bc:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   197be:	2b07      	cmp	r3, #7
   197c0:	bf08      	it	eq
   197c2:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   197c6:	f009 f9e8 	bl	22b9a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   197ca:	340a      	adds	r4, #10
   197cc:	45a2      	cmp	sl, r4
   197ce:	d1e5      	bne.n	1979c <disconnected_cb+0x28>
	if (!value_used) {
   197d0:	f1b8 0f00 	cmp.w	r8, #0
   197d4:	d106      	bne.n	197e4 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   197d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
		ccc->value = 0U;
   197d8:	f8a5 8032 	strh.w	r8, [r5, #50]	; 0x32
		if (ccc->cfg_changed) {
   197dc:	b113      	cbz	r3, 197e4 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   197de:	4641      	mov	r1, r8
   197e0:	4638      	mov	r0, r7
   197e2:	4798      	blx	r3
}
   197e4:	2001      	movs	r0, #1
   197e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   197ea:	7a30      	ldrb	r0, [r6, #8]
   197ec:	4649      	mov	r1, r9
   197ee:	f008 ff4d 	bl	2268c <bt_addr_le_is_bonded>
   197f2:	b940      	cbnz	r0, 19806 <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   197f4:	455d      	cmp	r5, fp
   197f6:	d102      	bne.n	197fe <disconnected_cb+0x8a>
					sc_clear(conn);
   197f8:	4630      	mov	r0, r6
   197fa:	f7ff ff8f 	bl	1971c <sc_clear>
				clear_ccc_cfg(cfg);
   197fe:	1e60      	subs	r0, r4, #1
   19800:	f009 ff4f 	bl	236a2 <clear_ccc_cfg>
   19804:	e7e1      	b.n	197ca <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19806:	4649      	mov	r1, r9
   19808:	4620      	mov	r0, r4
   1980a:	f009 ff47 	bl	2369c <bt_addr_le_copy>
   1980e:	e7dc      	b.n	197ca <disconnected_cb+0x56>
   19810:	000194bd 	.word	0x000194bd
   19814:	20000624 	.word	0x20000624

00019818 <bt_gatt_init>:
{
   19818:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1981a:	4b20      	ldr	r3, [pc, #128]	; (1989c <bt_gatt_init+0x84>)
   1981c:	f3bf 8f5b 	dmb	ish
   19820:	2201      	movs	r2, #1
   19822:	e853 1f00 	ldrex	r1, [r3]
   19826:	2900      	cmp	r1, #0
   19828:	d103      	bne.n	19832 <bt_gatt_init+0x1a>
   1982a:	e843 2000 	strex	r0, r2, [r3]
   1982e:	2800      	cmp	r0, #0
   19830:	d1f7      	bne.n	19822 <bt_gatt_init+0xa>
   19832:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   19836:	d130      	bne.n	1989a <bt_gatt_init+0x82>
   19838:	f3bf 8f5b 	dmb	ish
   1983c:	4b18      	ldr	r3, [pc, #96]	; (198a0 <bt_gatt_init+0x88>)
   1983e:	e853 1f00 	ldrex	r1, [r3]
   19842:	2900      	cmp	r1, #0
   19844:	d103      	bne.n	1984e <bt_gatt_init+0x36>
   19846:	e843 2000 	strex	r0, r2, [r3]
   1984a:	2800      	cmp	r0, #0
   1984c:	d1f7      	bne.n	1983e <bt_gatt_init+0x26>
   1984e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   19852:	d108      	bne.n	19866 <bt_gatt_init+0x4e>
   19854:	4a13      	ldr	r2, [pc, #76]	; (198a4 <bt_gatt_init+0x8c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19856:	4914      	ldr	r1, [pc, #80]	; (198a8 <bt_gatt_init+0x90>)
   19858:	8813      	ldrh	r3, [r2, #0]
   1985a:	4c14      	ldr	r4, [pc, #80]	; (198ac <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1985c:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1985e:	42a1      	cmp	r1, r4
   19860:	d315      	bcc.n	1988e <bt_gatt_init+0x76>
   19862:	b100      	cbz	r0, 19866 <bt_gatt_init+0x4e>
   19864:	8013      	strh	r3, [r2, #0]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19866:	4912      	ldr	r1, [pc, #72]	; (198b0 <bt_gatt_init+0x98>)
   19868:	4812      	ldr	r0, [pc, #72]	; (198b4 <bt_gatt_init+0x9c>)
   1986a:	f00b fa81 	bl	24d70 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1986e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19872:	2300      	movs	r3, #0
   19874:	480f      	ldr	r0, [pc, #60]	; (198b4 <bt_gatt_init+0x9c>)
   19876:	f005 f8d9 	bl	1ea2c <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1987a:	490f      	ldr	r1, [pc, #60]	; (198b8 <bt_gatt_init+0xa0>)
   1987c:	480f      	ldr	r0, [pc, #60]	; (198bc <bt_gatt_init+0xa4>)
   1987e:	f00b fa77 	bl	24d70 <k_work_init_delayable>
}
   19882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19886:	480e      	ldr	r0, [pc, #56]	; (198c0 <bt_gatt_init+0xa8>)
   19888:	2102      	movs	r1, #2
   1988a:	f009 bef8 	b.w	2367e <atomic_or>
		last_static_handle += svc->attr_count;
   1988e:	6848      	ldr	r0, [r1, #4]
   19890:	4403      	add	r3, r0
   19892:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19894:	3108      	adds	r1, #8
   19896:	2001      	movs	r0, #1
   19898:	e7e1      	b.n	1985e <bt_gatt_init+0x46>
}
   1989a:	bd10      	pop	{r4, pc}
   1989c:	20002f88 	.word	0x20002f88
   198a0:	20003004 	.word	0x20003004
   198a4:	200032fa 	.word	0x200032fa
   198a8:	00025624 	.word	0x00025624
   198ac:	0002564c 	.word	0x0002564c
   198b0:	00019a7d 	.word	0x00019a7d
   198b4:	20001fa8 	.word	0x20001fa8
   198b8:	00019e0d 	.word	0x00019e0d
   198bc:	20002020 	.word	0x20002020
   198c0:	20002050 	.word	0x20002050

000198c4 <bt_gatt_attr_get_handle>:
{
   198c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   198c8:	4603      	mov	r3, r0
   198ca:	b148      	cbz	r0, 198e0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   198cc:	8a00      	ldrh	r0, [r0, #16]
   198ce:	b938      	cbnz	r0, 198e0 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   198d0:	4912      	ldr	r1, [pc, #72]	; (1991c <bt_gatt_attr_get_handle+0x58>)
   198d2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 19920 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   198d6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   198d8:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   198dc:	4571      	cmp	r1, lr
   198de:	d301      	bcc.n	198e4 <bt_gatt_attr_get_handle+0x20>
}
   198e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   198e4:	e9d1 7600 	ldrd	r7, r6, [r1]
   198e8:	42bb      	cmp	r3, r7
   198ea:	d304      	bcc.n	198f6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   198ec:	fb0c 7206 	mla	r2, ip, r6, r7
   198f0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   198f2:	4293      	cmp	r3, r2
   198f4:	d90e      	bls.n	19914 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   198f6:	19a2      	adds	r2, r4, r6
   198f8:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   198fa:	3108      	adds	r1, #8
   198fc:	4614      	mov	r4, r2
   198fe:	e7ed      	b.n	198dc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   19900:	fb0c 7805 	mla	r8, ip, r5, r7
   19904:	4543      	cmp	r3, r8
   19906:	d007      	beq.n	19918 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   19908:	3501      	adds	r5, #1
   1990a:	1962      	adds	r2, r4, r5
   1990c:	42b5      	cmp	r5, r6
   1990e:	b292      	uxth	r2, r2
   19910:	d1f6      	bne.n	19900 <bt_gatt_attr_get_handle+0x3c>
   19912:	e7f2      	b.n	198fa <bt_gatt_attr_get_handle+0x36>
   19914:	2500      	movs	r5, #0
   19916:	e7f8      	b.n	1990a <bt_gatt_attr_get_handle+0x46>
   19918:	4610      	mov	r0, r2
   1991a:	e7e1      	b.n	198e0 <bt_gatt_attr_get_handle+0x1c>
   1991c:	00025624 	.word	0x00025624
   19920:	0002564c 	.word	0x0002564c

00019924 <bt_gatt_foreach_attr_type>:
{
   19924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19928:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1992c:	9100      	str	r1, [sp, #0]
   1992e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   19930:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19934:	2d00      	cmp	r5, #0
   19936:	bf08      	it	eq
   19938:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1993a:	4b24      	ldr	r3, [pc, #144]	; (199cc <bt_gatt_foreach_attr_type+0xa8>)
   1993c:	881b      	ldrh	r3, [r3, #0]
   1993e:	4283      	cmp	r3, r0
{
   19940:	4607      	mov	r7, r0
   19942:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   19944:	d23c      	bcs.n	199c0 <bt_gatt_foreach_attr_type+0x9c>
}
   19946:	b003      	add	sp, #12
   19948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1994c:	6873      	ldr	r3, [r6, #4]
   1994e:	4423      	add	r3, r4
   19950:	42bb      	cmp	r3, r7
   19952:	d232      	bcs.n	199ba <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   19954:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19956:	3608      	adds	r6, #8
   19958:	4b1d      	ldr	r3, [pc, #116]	; (199d0 <bt_gatt_foreach_attr_type+0xac>)
   1995a:	429e      	cmp	r6, r3
   1995c:	d3f6      	bcc.n	1994c <bt_gatt_foreach_attr_type+0x28>
   1995e:	e7f2      	b.n	19946 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   19960:	5889      	ldr	r1, [r1, r2]
   19962:	9301      	str	r3, [sp, #4]
   19964:	4640      	mov	r0, r8
   19966:	f008 fd5d 	bl	22424 <bt_uuid_cmp>
   1996a:	9b01      	ldr	r3, [sp, #4]
   1996c:	b190      	cbz	r0, 19994 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1996e:	3401      	adds	r4, #1
   19970:	f10a 0a01 	add.w	sl, sl, #1
   19974:	b2a4      	uxth	r4, r4
   19976:	6873      	ldr	r3, [r6, #4]
   19978:	4553      	cmp	r3, sl
   1997a:	d9ec      	bls.n	19956 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1997c:	9b00      	ldr	r3, [sp, #0]
   1997e:	429c      	cmp	r4, r3
   19980:	d8e1      	bhi.n	19946 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   19982:	42bc      	cmp	r4, r7
   19984:	d3f3      	bcc.n	1996e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19986:	6831      	ldr	r1, [r6, #0]
   19988:	fb0b f20a 	mul.w	r2, fp, sl
   1998c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1998e:	f1b8 0f00 	cmp.w	r8, #0
   19992:	d1e5      	bne.n	19960 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   19994:	f1b9 0f00 	cmp.w	r9, #0
   19998:	d10b      	bne.n	199b2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1999a:	3d01      	subs	r5, #1
   1999c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1999e:	4618      	mov	r0, r3
   199a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   199a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   199a4:	4621      	mov	r1, r4
   199a6:	4798      	blx	r3
	if (!*num_matches) {
   199a8:	2d00      	cmp	r5, #0
   199aa:	d0cc      	beq.n	19946 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   199ac:	2800      	cmp	r0, #0
   199ae:	d1de      	bne.n	1996e <bt_gatt_foreach_attr_type+0x4a>
   199b0:	e7c9      	b.n	19946 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   199b2:	68da      	ldr	r2, [r3, #12]
   199b4:	4591      	cmp	r9, r2
   199b6:	d1da      	bne.n	1996e <bt_gatt_foreach_attr_type+0x4a>
   199b8:	e7ef      	b.n	1999a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   199ba:	f04f 0a00 	mov.w	sl, #0
   199be:	e7da      	b.n	19976 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   199c0:	4e04      	ldr	r6, [pc, #16]	; (199d4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   199c2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   199c4:	f04f 0b14 	mov.w	fp, #20
   199c8:	e7c6      	b.n	19958 <bt_gatt_foreach_attr_type+0x34>
   199ca:	bf00      	nop
   199cc:	200032fa 	.word	0x200032fa
   199d0:	0002564c 	.word	0x0002564c
   199d4:	00025624 	.word	0x00025624

000199d8 <db_hash_gen>:
{
   199d8:	b530      	push	{r4, r5, lr}
   199da:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   199dc:	2300      	movs	r3, #0
{
   199de:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   199e0:	aa1c      	add	r2, sp, #112	; 0x70
   199e2:	4669      	mov	r1, sp
   199e4:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   199e6:	e9cd 3300 	strd	r3, r3, [sp]
   199ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   199ee:	f008 fa52 	bl	21e96 <tc_cmac_setup>
   199f2:	b958      	cbnz	r0, 19a0c <db_hash_gen+0x34>
   199f4:	491a      	ldr	r1, [pc, #104]	; (19a60 <db_hash_gen+0x88>)
   199f6:	4b1b      	ldr	r3, [pc, #108]	; (19a64 <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   199f8:	481b      	ldr	r0, [pc, #108]	; (19a68 <db_hash_gen+0x90>)
   199fa:	1ac9      	subs	r1, r1, r3
   199fc:	08c9      	lsrs	r1, r1, #3
   199fe:	0189      	lsls	r1, r1, #6
   19a00:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   19a04:	f006 fb82 	bl	2010c <log_0>
}
   19a08:	b049      	add	sp, #292	; 0x124
   19a0a:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   19a0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19a10:	2001      	movs	r0, #1
   19a12:	4a16      	ldr	r2, [pc, #88]	; (19a6c <db_hash_gen+0x94>)
   19a14:	ab04      	add	r3, sp, #16
   19a16:	f009 ffe3 	bl	239e0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19a1a:	4815      	ldr	r0, [pc, #84]	; (19a70 <db_hash_gen+0x98>)
   19a1c:	a904      	add	r1, sp, #16
   19a1e:	f008 fad1 	bl	21fc4 <tc_cmac_final>
   19a22:	b940      	cbnz	r0, 19a36 <db_hash_gen+0x5e>
   19a24:	490e      	ldr	r1, [pc, #56]	; (19a60 <db_hash_gen+0x88>)
   19a26:	4b0f      	ldr	r3, [pc, #60]	; (19a64 <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
   19a28:	4812      	ldr	r0, [pc, #72]	; (19a74 <db_hash_gen+0x9c>)
   19a2a:	1ac9      	subs	r1, r1, r3
   19a2c:	08c9      	lsrs	r1, r1, #3
   19a2e:	0189      	lsls	r1, r1, #6
   19a30:	f041 0101 	orr.w	r1, r1, #1
   19a34:	e7e6      	b.n	19a04 <db_hash_gen+0x2c>
   19a36:	4b0e      	ldr	r3, [pc, #56]	; (19a70 <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19a38:	2208      	movs	r2, #8
   19a3a:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   19a3e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   19a40:	780d      	ldrb	r5, [r1, #0]
   19a42:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   19a46:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19a48:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   19a4c:	d1f7      	bne.n	19a3e <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   19a4e:	b10c      	cbz	r4, 19a54 <db_hash_gen+0x7c>
		db_hash_store();
   19a50:	f7ff fa7a 	bl	18f48 <db_hash_store>
   19a54:	2104      	movs	r1, #4
   19a56:	4808      	ldr	r0, [pc, #32]	; (19a78 <db_hash_gen+0xa0>)
   19a58:	f009 fe11 	bl	2367e <atomic_or>
   19a5c:	e7d4      	b.n	19a08 <db_hash_gen+0x30>
   19a5e:	bf00      	nop
   19a60:	000256fc 	.word	0x000256fc
   19a64:	000256c4 	.word	0x000256c4
   19a68:	00027eed 	.word	0x00027eed
   19a6c:	000235d3 	.word	0x000235d3
   19a70:	20001f88 	.word	0x20001f88
   19a74:	00027f06 	.word	0x00027f06
   19a78:	20002050 	.word	0x20002050

00019a7c <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19a7c:	f06f 0108 	mvn.w	r1, #8
{
   19a80:	b510      	push	{r4, lr}
   19a82:	4828      	ldr	r0, [pc, #160]	; (19b24 <db_hash_process+0xa8>)
   19a84:	f009 fe1b 	bl	236be <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   19a88:	0701      	lsls	r1, r0, #28
   19a8a:	d545      	bpl.n	19b18 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19a8c:	4825      	ldr	r0, [pc, #148]	; (19b24 <db_hash_process+0xa8>)
   19a8e:	f009 fd9a 	bl	235c6 <atomic_get>
   19a92:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19a94:	075a      	lsls	r2, r3, #29
   19a96:	f3c0 0080 	ubfx	r0, r0, #2, #1
   19a9a:	d401      	bmi.n	19aa0 <db_hash_process+0x24>
			db_hash_gen(false);
   19a9c:	f7ff ff9c 	bl	199d8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   19aa0:	4921      	ldr	r1, [pc, #132]	; (19b28 <db_hash_process+0xac>)
   19aa2:	2210      	movs	r2, #16
   19aa4:	1888      	adds	r0, r1, r2
   19aa6:	f008 fb8f 	bl	221c8 <memcmp>
   19aaa:	b948      	cbnz	r0, 19ac0 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   19aac:	481f      	ldr	r0, [pc, #124]	; (19b2c <db_hash_process+0xb0>)
   19aae:	f00b f96b 	bl	24d88 <k_work_cancel_delayable>
}
   19ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19ab6:	481b      	ldr	r0, [pc, #108]	; (19b24 <db_hash_process+0xa8>)
   19ab8:	f06f 0101 	mvn.w	r1, #1
   19abc:	f009 bdff 	b.w	236be <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19ac0:	4c1b      	ldr	r4, [pc, #108]	; (19b30 <db_hash_process+0xb4>)
   19ac2:	2101      	movs	r1, #1
   19ac4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   19ac8:	f009 fdd9 	bl	2367e <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19acc:	f010 0f01 	tst.w	r0, #1
   19ad0:	4623      	mov	r3, r4
   19ad2:	d110      	bne.n	19af6 <db_hash_process+0x7a>
		gatt_sc.start = start;
   19ad4:	4b17      	ldr	r3, [pc, #92]	; (19b34 <db_hash_process+0xb8>)
   19ad6:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19ad8:	4812      	ldr	r0, [pc, #72]	; (19b24 <db_hash_process+0xa8>)
   19ada:	f009 fd74 	bl	235c6 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   19ade:	0783      	lsls	r3, r0, #30
   19ae0:	d405      	bmi.n	19aee <db_hash_process+0x72>
	k_work_reschedule(&gatt_sc.work, timeout);
   19ae2:	4812      	ldr	r0, [pc, #72]	; (19b2c <db_hash_process+0xb0>)
   19ae4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19ae8:	2300      	movs	r3, #0
   19aea:	f004 ffd3 	bl	1ea94 <k_work_reschedule>
}
   19aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   19af2:	f7ff ba29 	b.w	18f48 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   19af6:	8b22      	ldrh	r2, [r4, #24]
   19af8:	8b61      	ldrh	r1, [r4, #26]
   19afa:	2a01      	cmp	r2, #1
   19afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19b00:	d805      	bhi.n	19b0e <db_hash_process+0x92>
   19b02:	4291      	cmp	r1, r2
   19b04:	d0f3      	beq.n	19aee <db_hash_process+0x72>
		*end = new_end;
   19b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19b0a:	835a      	strh	r2, [r3, #26]
   19b0c:	e7e4      	b.n	19ad8 <db_hash_process+0x5c>
		*start = new_start;
   19b0e:	2001      	movs	r0, #1
	if (*end < new_end) {
   19b10:	4291      	cmp	r1, r2
		*start = new_start;
   19b12:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   19b14:	d0e0      	beq.n	19ad8 <db_hash_process+0x5c>
   19b16:	e7f6      	b.n	19b06 <db_hash_process+0x8a>
}
   19b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   19b1c:	2001      	movs	r0, #1
   19b1e:	f7ff bf5b 	b.w	199d8 <db_hash_gen>
   19b22:	bf00      	nop
   19b24:	20002050 	.word	0x20002050
   19b28:	20001f88 	.word	0x20001f88
   19b2c:	20002020 	.word	0x20002020
   19b30:	20002000 	.word	0x20002000
   19b34:	ffff0001 	.word	0xffff0001

00019b38 <ccc_set_direct>:
{
   19b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b3c:	b0b9      	sub	sp, #228	; 0xe4
   19b3e:	4688      	mov	r8, r1
   19b40:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   19b42:	4939      	ldr	r1, [pc, #228]	; (19c28 <ccc_set_direct+0xf0>)
   19b44:	9840      	ldr	r0, [sp, #256]	; 0x100
   19b46:	466a      	mov	r2, sp
{
   19b48:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   19b4a:	f007 f826 	bl	20b9a <settings_name_steq>
   19b4e:	b978      	cbnz	r0, 19b70 <ccc_set_direct+0x38>
   19b50:	4b36      	ldr	r3, [pc, #216]	; (19c2c <ccc_set_direct+0xf4>)
   19b52:	4937      	ldr	r1, [pc, #220]	; (19c30 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
   19b54:	4837      	ldr	r0, [pc, #220]	; (19c34 <ccc_set_direct+0xfc>)
   19b56:	1ac9      	subs	r1, r1, r3
   19b58:	08c9      	lsrs	r1, r1, #3
   19b5a:	0189      	lsls	r1, r1, #6
   19b5c:	f041 0101 	orr.w	r1, r1, #1
   19b60:	f006 fad4 	bl	2010c <log_0>
			return -EINVAL;
   19b64:	f06f 0515 	mvn.w	r5, #21
}
   19b68:	4628      	mov	r0, r5
   19b6a:	b039      	add	sp, #228	; 0xe4
   19b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   19b70:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   19b72:	a901      	add	r1, sp, #4
   19b74:	4630      	mov	r0, r6
   19b76:	f007 f833 	bl	20be0 <settings_name_next>
		if (!name) {
   19b7a:	b96e      	cbnz	r6, 19b98 <ccc_set_direct+0x60>
   19b7c:	492c      	ldr	r1, [pc, #176]	; (19c30 <ccc_set_direct+0xf8>)
   19b7e:	4b2b      	ldr	r3, [pc, #172]	; (19c2c <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
   19b80:	482d      	ldr	r0, [pc, #180]	; (19c38 <ccc_set_direct+0x100>)
   19b82:	1ac9      	subs	r1, r1, r3
   19b84:	08c9      	lsrs	r1, r1, #3
   19b86:	0189      	lsls	r1, r1, #6
   19b88:	f041 0101 	orr.w	r1, r1, #1
   19b8c:	f006 fabe 	bl	2010c <log_0>
			return -EINVAL;
   19b90:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   19b94:	4625      	mov	r5, r4
   19b96:	e7e7      	b.n	19b68 <ccc_set_direct+0x30>
		} else if (!next) {
   19b98:	9801      	ldr	r0, [sp, #4]
   19b9a:	b9c8      	cbnz	r0, 19bd0 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
   19b9c:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   19ba0:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   19ba4:	4649      	mov	r1, r9
   19ba6:	4630      	mov	r0, r6
   19ba8:	f008 fc18 	bl	223dc <bt_settings_decode_key>
		if (err) {
   19bac:	4605      	mov	r5, r0
   19bae:	b1a0      	cbz	r0, 19bda <ccc_set_direct+0xa2>
   19bb0:	4a1e      	ldr	r2, [pc, #120]	; (19c2c <ccc_set_direct+0xf4>)
   19bb2:	4c1f      	ldr	r4, [pc, #124]	; (19c30 <ccc_set_direct+0xf8>)
   19bb4:	4630      	mov	r0, r6
   19bb6:	1aa4      	subs	r4, r4, r2
   19bb8:	08e4      	lsrs	r4, r4, #3
   19bba:	f7f7 fcdb 	bl	11574 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   19bbe:	01a4      	lsls	r4, r4, #6
   19bc0:	f044 0401 	orr.w	r4, r4, #1
   19bc4:	4601      	mov	r1, r0
   19bc6:	4622      	mov	r2, r4
   19bc8:	481c      	ldr	r0, [pc, #112]	; (19c3c <ccc_set_direct+0x104>)
   19bca:	f006 faac 	bl	20126 <log_1>
   19bce:	e7df      	b.n	19b90 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
   19bd0:	220a      	movs	r2, #10
   19bd2:	2100      	movs	r1, #0
   19bd4:	f008 fa3a 	bl	2204c <strtol>
   19bd8:	e7e0      	b.n	19b9c <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
   19bda:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   19bde:	f1b8 0f00 	cmp.w	r8, #0
   19be2:	d01d      	beq.n	19c20 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   19be4:	ae08      	add	r6, sp, #32
   19be6:	22c0      	movs	r2, #192	; 0xc0
   19be8:	4631      	mov	r1, r6
   19bea:	4638      	mov	r0, r7
   19bec:	47a0      	blx	r4
			if (len < 0) {
   19bee:	1e04      	subs	r4, r0, #0
   19bf0:	da0b      	bge.n	19c0a <ccc_set_direct+0xd2>
   19bf2:	4b0e      	ldr	r3, [pc, #56]	; (19c2c <ccc_set_direct+0xf4>)
   19bf4:	4a0e      	ldr	r2, [pc, #56]	; (19c30 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
   19bf6:	4812      	ldr	r0, [pc, #72]	; (19c40 <ccc_set_direct+0x108>)
   19bf8:	1ad2      	subs	r2, r2, r3
   19bfa:	08d2      	lsrs	r2, r2, #3
   19bfc:	0192      	lsls	r2, r2, #6
   19bfe:	f042 0201 	orr.w	r2, r2, #1
   19c02:	4621      	mov	r1, r4
   19c04:	f006 fa8f 	bl	20126 <log_1>
				return len;
   19c08:	e7c4      	b.n	19b94 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   19c0a:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   19c0c:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   19c0e:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   19c10:	4a0c      	ldr	r2, [pc, #48]	; (19c44 <ccc_set_direct+0x10c>)
   19c12:	ab04      	add	r3, sp, #16
   19c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19c18:	2001      	movs	r0, #1
   19c1a:	f009 fee1 	bl	239e0 <bt_gatt_foreach_attr>
	return 0;
   19c1e:	e7a3      	b.n	19b68 <ccc_set_direct+0x30>
			load.count = 0;
   19c20:	e9cd 0006 	strd	r0, r0, [sp, #24]
   19c24:	e7f4      	b.n	19c10 <ccc_set_direct+0xd8>
   19c26:	bf00      	nop
   19c28:	00027f1f 	.word	0x00027f1f
   19c2c:	000256c4 	.word	0x000256c4
   19c30:	000256fc 	.word	0x000256fc
   19c34:	00027f26 	.word	0x00027f26
   19c38:	00026c5f 	.word	0x00026c5f
   19c3c:	00027e14 	.word	0x00027e14
   19c40:	00027db8 	.word	0x00027db8
   19c44:	000192c9 	.word	0x000192c9

00019c48 <gatt_indicate>:
{
   19c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c4c:	4615      	mov	r5, r2
   19c4e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   19c50:	2214      	movs	r2, #20
   19c52:	6869      	ldr	r1, [r5, #4]
{
   19c54:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   19c56:	f009 fece 	bl	239f6 <bt_gatt_check_perm>
   19c5a:	4607      	mov	r7, r0
   19c5c:	b170      	cbz	r0, 19c7c <gatt_indicate+0x34>
   19c5e:	4b2a      	ldr	r3, [pc, #168]	; (19d08 <gatt_indicate+0xc0>)
   19c60:	492a      	ldr	r1, [pc, #168]	; (19d0c <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   19c62:	482b      	ldr	r0, [pc, #172]	; (19d10 <gatt_indicate+0xc8>)
   19c64:	1ac9      	subs	r1, r1, r3
   19c66:	08c9      	lsrs	r1, r1, #3
   19c68:	0189      	lsls	r1, r1, #6
   19c6a:	f041 0102 	orr.w	r1, r1, #2
   19c6e:	f006 fa4d 	bl	2010c <log_0>
		return -EPERM;
   19c72:	f04f 35ff 	mov.w	r5, #4294967295
}
   19c76:	4628      	mov	r0, r5
   19c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19c7c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   19c80:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   19c82:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19c84:	f7ff f87e 	bl	18d84 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   19c88:	3602      	adds	r6, #2
	if (!req) {
   19c8a:	4604      	mov	r4, r0
   19c8c:	b910      	cbnz	r0, 19c94 <gatt_indicate+0x4c>
		return -ENOMEM;
   19c8e:	f06f 050b 	mvn.w	r5, #11
   19c92:	e7f0      	b.n	19c76 <gatt_indicate+0x2e>
	req->func = func;
   19c94:	4b1f      	ldr	r3, [pc, #124]	; (19d14 <gatt_indicate+0xcc>)
	req->len = len;
   19c96:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   19c98:	211d      	movs	r1, #29
   19c9a:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   19c9c:	60c7      	str	r7, [r0, #12]
	req->func = func;
   19c9e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   19ca0:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   19ca2:	4632      	mov	r2, r6
   19ca4:	4640      	mov	r0, r8
   19ca6:	f7fe fe27 	bl	188f8 <bt_att_create_pdu>
	if (!buf) {
   19caa:	4606      	mov	r6, r0
   19cac:	b968      	cbnz	r0, 19cca <gatt_indicate+0x82>
   19cae:	4b16      	ldr	r3, [pc, #88]	; (19d08 <gatt_indicate+0xc0>)
   19cb0:	4916      	ldr	r1, [pc, #88]	; (19d0c <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   19cb2:	4819      	ldr	r0, [pc, #100]	; (19d18 <gatt_indicate+0xd0>)
   19cb4:	1ac9      	subs	r1, r1, r3
   19cb6:	08c9      	lsrs	r1, r1, #3
   19cb8:	0189      	lsls	r1, r1, #6
   19cba:	f041 0102 	orr.w	r1, r1, #2
   19cbe:	f006 fa25 	bl	2010c <log_0>
		bt_att_req_free(req);
   19cc2:	4620      	mov	r0, r4
   19cc4:	f7ff f874 	bl	18db0 <bt_att_req_free>
   19cc8:	e7e1      	b.n	19c8e <gatt_indicate+0x46>
	return net_buf_simple_add(&buf->b, len);
   19cca:	f100 0a08 	add.w	sl, r0, #8
   19cce:	2102      	movs	r1, #2
   19cd0:	4650      	mov	r0, sl
   19cd2:	f00a fbec 	bl	244ae <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   19cd6:	4607      	mov	r7, r0
   19cd8:	8aa9      	ldrh	r1, [r5, #20]
   19cda:	f827 9b02 	strh.w	r9, [r7], #2
   19cde:	4650      	mov	r0, sl
   19ce0:	f00a fbe5 	bl	244ae <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   19ce4:	8aaa      	ldrh	r2, [r5, #20]
   19ce6:	6929      	ldr	r1, [r5, #16]
   19ce8:	4638      	mov	r0, r7
   19cea:	f008 fa7d 	bl	221e8 <memcpy>
	req->buf = buf;
   19cee:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   19cf0:	4621      	mov	r1, r4
   19cf2:	4640      	mov	r0, r8
   19cf4:	f009 fc1f 	bl	23536 <bt_att_req_send>
	if (err) {
   19cf8:	4605      	mov	r5, r0
   19cfa:	2800      	cmp	r0, #0
   19cfc:	d0bb      	beq.n	19c76 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   19cfe:	4620      	mov	r0, r4
   19d00:	f7ff f856 	bl	18db0 <bt_att_req_free>
   19d04:	e7b7      	b.n	19c76 <gatt_indicate+0x2e>
   19d06:	bf00      	nop
   19d08:	000256c4 	.word	0x000256c4
   19d0c:	000256fc 	.word	0x000256fc
   19d10:	00027f32 	.word	0x00027f32
   19d14:	00023595 	.word	0x00023595
   19d18:	00027f48 	.word	0x00027f48

00019d1c <bt_gatt_indicate>:
{
   19d1c:	b530      	push	{r4, r5, lr}
   19d1e:	4604      	mov	r4, r0
   19d20:	b08b      	sub	sp, #44	; 0x2c
   19d22:	4837      	ldr	r0, [pc, #220]	; (19e00 <bt_gatt_indicate+0xe4>)
   19d24:	460d      	mov	r5, r1
   19d26:	f009 fc4e 	bl	235c6 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19d2a:	0782      	lsls	r2, r0, #30
   19d2c:	d561      	bpl.n	19df2 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   19d2e:	6848      	ldr	r0, [r1, #4]
   19d30:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19d32:	b114      	cbz	r4, 19d3a <bt_gatt_indicate+0x1e>
   19d34:	7b63      	ldrb	r3, [r4, #13]
   19d36:	2b07      	cmp	r3, #7
   19d38:	d15e      	bne.n	19df8 <bt_gatt_indicate+0xdc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19d3a:	f7ff fdc3 	bl	198c4 <bt_gatt_attr_get_handle>
   19d3e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   19d42:	b918      	cbnz	r0, 19d4c <bt_gatt_indicate+0x30>
		return -ENOENT;
   19d44:	f06f 0001 	mvn.w	r0, #1
}
   19d48:	b00b      	add	sp, #44	; 0x2c
   19d4a:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   19d4c:	682a      	ldr	r2, [r5, #0]
   19d4e:	b9ba      	cbnz	r2, 19d80 <bt_gatt_indicate+0x64>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19d50:	9b05      	ldr	r3, [sp, #20]
   19d52:	6818      	ldr	r0, [r3, #0]
   19d54:	2300      	movs	r3, #0
   19d56:	f88d 3010 	strb.w	r3, [sp, #16]
   19d5a:	a904      	add	r1, sp, #16
   19d5c:	f642 0303 	movw	r3, #10243	; 0x2803
   19d60:	f8ad 3012 	strh.w	r3, [sp, #18]
   19d64:	f008 fb5e 	bl	22424 <bt_uuid_cmp>
   19d68:	b1d0      	cbz	r0, 19da0 <bt_gatt_indicate+0x84>
	if (conn) {
   19d6a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   19d6e:	b324      	cbz	r4, 19dba <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   19d70:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   19d72:	4601      	mov	r1, r0
		params->_ref = 1;
   19d74:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   19d76:	462a      	mov	r2, r5
   19d78:	4620      	mov	r0, r4
   19d7a:	f7ff ff65 	bl	19c48 <gatt_indicate>
   19d7e:	e7e3      	b.n	19d48 <bt_gatt_indicate+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19d80:	a905      	add	r1, sp, #20
   19d82:	9102      	str	r1, [sp, #8]
   19d84:	491f      	ldr	r1, [pc, #124]	; (19e04 <bt_gatt_indicate+0xe8>)
   19d86:	9101      	str	r1, [sp, #4]
   19d88:	2101      	movs	r1, #1
	found->attr = NULL;
   19d8a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19d8c:	9100      	str	r1, [sp, #0]
   19d8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   19d92:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19d94:	f7ff fdc6 	bl	19924 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19d98:	9b05      	ldr	r3, [sp, #20]
   19d9a:	2b00      	cmp	r3, #0
   19d9c:	d1d8      	bne.n	19d50 <bt_gatt_indicate+0x34>
   19d9e:	e7d1      	b.n	19d44 <bt_gatt_indicate+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19da0:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   19da2:	68c3      	ldr	r3, [r0, #12]
   19da4:	799b      	ldrb	r3, [r3, #6]
   19da6:	069b      	lsls	r3, r3, #26
   19da8:	d402      	bmi.n	19db0 <bt_gatt_indicate+0x94>
			return -EINVAL;
   19daa:	f06f 0015 	mvn.w	r0, #21
   19dae:	e7cb      	b.n	19d48 <bt_gatt_indicate+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19db0:	f009 fdc8 	bl	23944 <bt_gatt_attr_value_handle>
   19db4:	f8ad 0018 	strh.w	r0, [sp, #24]
   19db8:	e7d7      	b.n	19d6a <bt_gatt_indicate+0x4e>
	data.err = -ENOTCONN;
   19dba:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   19dbe:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   19dc0:	2302      	movs	r3, #2
   19dc2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19dc6:	f642 1302 	movw	r3, #10498	; 0x2902
   19dca:	f8ad 3012 	strh.w	r3, [sp, #18]
   19dce:	ab05      	add	r3, sp, #20
   19dd0:	9302      	str	r3, [sp, #8]
   19dd2:	4b0d      	ldr	r3, [pc, #52]	; (19e08 <bt_gatt_indicate+0xec>)
   19dd4:	9301      	str	r3, [sp, #4]
   19dd6:	2301      	movs	r3, #1
   19dd8:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   19dda:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19ddc:	4623      	mov	r3, r4
   19dde:	aa04      	add	r2, sp, #16
   19de0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   19de4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19de6:	f88d 4010 	strb.w	r4, [sp, #16]
   19dea:	f7ff fd9b 	bl	19924 <bt_gatt_foreach_attr_type>
	return data.err;
   19dee:	9807      	ldr	r0, [sp, #28]
   19df0:	e7aa      	b.n	19d48 <bt_gatt_indicate+0x2c>
		return -EAGAIN;
   19df2:	f06f 000a 	mvn.w	r0, #10
   19df6:	e7a7      	b.n	19d48 <bt_gatt_indicate+0x2c>
		return -ENOTCONN;
   19df8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19dfc:	e7a4      	b.n	19d48 <bt_gatt_indicate+0x2c>
   19dfe:	bf00      	nop
   19e00:	20000338 	.word	0x20000338
   19e04:	000235bb 	.word	0x000235bb
   19e08:	00019f09 	.word	0x00019f09

00019e0c <sc_process>:
{
   19e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   19e0e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   19e12:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19e14:	f850 3c08 	ldr.w	r3, [r0, #-8]
   19e18:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   19e1a:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19e1e:	f06f 0101 	mvn.w	r1, #1
   19e22:	4628      	mov	r0, r5
   19e24:	f009 fc4b 	bl	236be <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   19e28:	4b0d      	ldr	r3, [pc, #52]	; (19e60 <sc_process+0x54>)
   19e2a:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   19e2e:	4b0d      	ldr	r3, [pc, #52]	; (19e64 <sc_process+0x58>)
   19e30:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   19e34:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   19e36:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   19e38:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   19e3c:	2304      	movs	r3, #4
	sc->start = 0U;
   19e3e:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   19e42:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   19e46:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   19e4a:	4631      	mov	r1, r6
   19e4c:	f7ff ff66 	bl	19d1c <bt_gatt_indicate>
   19e50:	b918      	cbnz	r0, 19e5a <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19e52:	2102      	movs	r1, #2
   19e54:	4628      	mov	r0, r5
   19e56:	f009 fc12 	bl	2367e <atomic_or>
}
   19e5a:	b002      	add	sp, #8
   19e5c:	bd70      	pop	{r4, r5, r6, pc}
   19e5e:	bf00      	nop
   19e60:	00025e98 	.word	0x00025e98
   19e64:	00019665 	.word	0x00019665

00019e68 <gatt_notify>:
{
   19e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e6c:	4614      	mov	r4, r2
   19e6e:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   19e70:	2214      	movs	r2, #20
   19e72:	6861      	ldr	r1, [r4, #4]
{
   19e74:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   19e76:	f009 fdbe 	bl	239f6 <bt_gatt_check_perm>
   19e7a:	b168      	cbz	r0, 19e98 <gatt_notify+0x30>
   19e7c:	4b1e      	ldr	r3, [pc, #120]	; (19ef8 <gatt_notify+0x90>)
   19e7e:	491f      	ldr	r1, [pc, #124]	; (19efc <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   19e80:	481f      	ldr	r0, [pc, #124]	; (19f00 <gatt_notify+0x98>)
   19e82:	1ac9      	subs	r1, r1, r3
   19e84:	08c9      	lsrs	r1, r1, #3
   19e86:	0189      	lsls	r1, r1, #6
   19e88:	f041 0102 	orr.w	r1, r1, #2
   19e8c:	f006 f93e 	bl	2010c <log_0>
		return -EPERM;
   19e90:	f04f 30ff 	mov.w	r0, #4294967295
}
   19e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   19e98:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   19e9a:	211b      	movs	r1, #27
   19e9c:	3202      	adds	r2, #2
   19e9e:	4638      	mov	r0, r7
   19ea0:	f7fe fd2a 	bl	188f8 <bt_att_create_pdu>
	if (!buf) {
   19ea4:	4605      	mov	r5, r0
   19ea6:	b960      	cbnz	r0, 19ec2 <gatt_notify+0x5a>
   19ea8:	4b13      	ldr	r3, [pc, #76]	; (19ef8 <gatt_notify+0x90>)
   19eaa:	4914      	ldr	r1, [pc, #80]	; (19efc <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   19eac:	4815      	ldr	r0, [pc, #84]	; (19f04 <gatt_notify+0x9c>)
   19eae:	1ac9      	subs	r1, r1, r3
   19eb0:	08c9      	lsrs	r1, r1, #3
   19eb2:	0189      	lsls	r1, r1, #6
   19eb4:	f041 0102 	orr.w	r1, r1, #2
   19eb8:	f006 f928 	bl	2010c <log_0>
		return -ENOMEM;
   19ebc:	f06f 000b 	mvn.w	r0, #11
   19ec0:	e7e8      	b.n	19e94 <gatt_notify+0x2c>
   19ec2:	f100 0908 	add.w	r9, r0, #8
   19ec6:	2102      	movs	r1, #2
   19ec8:	4648      	mov	r0, r9
   19eca:	f00a faf0 	bl	244ae <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   19ece:	4606      	mov	r6, r0
   19ed0:	89a1      	ldrh	r1, [r4, #12]
   19ed2:	f826 8b02 	strh.w	r8, [r6], #2
   19ed6:	4648      	mov	r0, r9
   19ed8:	f00a fae9 	bl	244ae <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   19edc:	89a2      	ldrh	r2, [r4, #12]
   19ede:	68a1      	ldr	r1, [r4, #8]
   19ee0:	4630      	mov	r0, r6
   19ee2:	f008 f981 	bl	221e8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   19ee6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   19eea:	4629      	mov	r1, r5
   19eec:	4638      	mov	r0, r7
}
   19eee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   19ef2:	f009 bad5 	b.w	234a0 <bt_att_send>
   19ef6:	bf00      	nop
   19ef8:	000256c4 	.word	0x000256c4
   19efc:	000256fc 	.word	0x000256fc
   19f00:	00027f32 	.word	0x00027f32
   19f04:	00027f6f 	.word	0x00027f6f

00019f08 <notify_cb>:
{
   19f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19f0c:	4b45      	ldr	r3, [pc, #276]	; (1a024 <notify_cb+0x11c>)
{
   19f0e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19f10:	6882      	ldr	r2, [r0, #8]
   19f12:	429a      	cmp	r2, r3
{
   19f14:	b085      	sub	sp, #20
   19f16:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19f18:	d005      	beq.n	19f26 <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   19f1a:	f04f 0801 	mov.w	r8, #1
}
   19f1e:	4640      	mov	r0, r8
   19f20:	b005      	add	sp, #20
   19f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   19f26:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   19f2a:	4b3f      	ldr	r3, [pc, #252]	; (1a028 <notify_cb+0x120>)
   19f2c:	4599      	cmp	r9, r3
   19f2e:	d022      	beq.n	19f76 <notify_cb+0x6e>
   19f30:	4b3e      	ldr	r3, [pc, #248]	; (1a02c <notify_cb+0x124>)
   19f32:	4d3f      	ldr	r5, [pc, #252]	; (1a030 <notify_cb+0x128>)
			BT_WARN("Link is not encrypted");
   19f34:	f8df b100 	ldr.w	fp, [pc, #256]	; 1a038 <notify_cb+0x130>
   19f38:	1aed      	subs	r5, r5, r3
   19f3a:	08ed      	lsrs	r5, r5, #3
   19f3c:	01ad      	lsls	r5, r5, #6
   19f3e:	f045 0302 	orr.w	r3, r5, #2
   19f42:	f109 0601 	add.w	r6, r9, #1
   19f46:	f109 0a33 	add.w	sl, r9, #51	; 0x33
   19f4a:	9300      	str	r3, [sp, #0]
		if (cfg->value != data->type) {
   19f4c:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   19f50:	89a3      	ldrh	r3, [r4, #12]
   19f52:	429a      	cmp	r2, r3
   19f54:	d10b      	bne.n	19f6e <notify_cb+0x66>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19f56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   19f5a:	4631      	mov	r1, r6
   19f5c:	f7fd fc90 	bl	17880 <bt_conn_lookup_addr_le>
		if (!conn) {
   19f60:	4605      	mov	r5, r0
   19f62:	b120      	cbz	r0, 19f6e <notify_cb+0x66>
		if (conn->state != BT_CONN_CONNECTED) {
   19f64:	7b42      	ldrb	r2, [r0, #13]
   19f66:	2a07      	cmp	r2, #7
   19f68:	d02b      	beq.n	19fc2 <notify_cb+0xba>
			bt_conn_unref(conn);
   19f6a:	f008 fe16 	bl	22b9a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19f6e:	360a      	adds	r6, #10
   19f70:	4556      	cmp	r6, sl
   19f72:	d1eb      	bne.n	19f4c <notify_cb+0x44>
   19f74:	e7d1      	b.n	19f1a <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19f76:	2600      	movs	r6, #0
   19f78:	4d2e      	ldr	r5, [pc, #184]	; (1a034 <notify_cb+0x12c>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19f7a:	46b0      	mov	r8, r6
   19f7c:	2207      	movs	r2, #7
   19f7e:	a902      	add	r1, sp, #8
   19f80:	4628      	mov	r0, r5
   19f82:	f8cd 8008 	str.w	r8, [sp, #8]
   19f86:	f8cd 800b 	str.w	r8, [sp, #11]
   19f8a:	f008 f91d 	bl	221c8 <memcmp>
   19f8e:	b178      	cbz	r0, 19fb0 <notify_cb+0xa8>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   19f90:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   19f94:	2207      	movs	r2, #7
   19f96:	4629      	mov	r1, r5
   19f98:	f7fd fcbc 	bl	17914 <bt_conn_lookup_state_le>
			if (!conn) {
   19f9c:	b970      	cbnz	r0, 19fbc <notify_cb+0xb4>
				sc = (struct sc_data *)data->ind_params->data;
   19f9e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   19fa0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   19fa4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   19fa6:	4629      	mov	r1, r5
   19fa8:	8853      	ldrh	r3, [r2, #2]
   19faa:	8812      	ldrh	r2, [r2, #0]
   19fac:	f7ff f888 	bl	190c0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19fb0:	3601      	adds	r6, #1
   19fb2:	2e06      	cmp	r6, #6
   19fb4:	f105 050c 	add.w	r5, r5, #12
   19fb8:	d1e0      	bne.n	19f7c <notify_cb+0x74>
   19fba:	e7b9      	b.n	19f30 <notify_cb+0x28>
			bt_conn_unref(conn);
   19fbc:	f008 fded 	bl	22b9a <bt_conn_unref>
   19fc0:	e7f6      	b.n	19fb0 <notify_cb+0xa8>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   19fc2:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
   19fc6:	b122      	cbz	r2, 19fd2 <notify_cb+0xca>
   19fc8:	4639      	mov	r1, r7
   19fca:	4790      	blx	r2
   19fcc:	b908      	cbnz	r0, 19fd2 <notify_cb+0xca>
			bt_conn_unref(conn);
   19fce:	4628      	mov	r0, r5
   19fd0:	e7cb      	b.n	19f6a <notify_cb+0x62>
		if (bt_gatt_check_perm(conn, attr,
   19fd2:	2214      	movs	r2, #20
   19fd4:	4639      	mov	r1, r7
   19fd6:	4628      	mov	r0, r5
   19fd8:	f009 fd0d 	bl	239f6 <bt_gatt_check_perm>
   19fdc:	4680      	mov	r8, r0
   19fde:	b128      	cbz	r0, 19fec <notify_cb+0xe4>
			BT_WARN("Link is not encrypted");
   19fe0:	f8bd 1000 	ldrh.w	r1, [sp]
   19fe4:	4658      	mov	r0, fp
   19fe6:	f006 f891 	bl	2010c <log_0>
			continue;
   19fea:	e7c0      	b.n	19f6e <notify_cb+0x66>
		if (data->type == BT_GATT_CCC_INDICATE) {
   19fec:	89a0      	ldrh	r0, [r4, #12]
   19fee:	88a1      	ldrh	r1, [r4, #4]
   19ff0:	6922      	ldr	r2, [r4, #16]
   19ff2:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
   19ff4:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   19ff6:	d111      	bne.n	1a01c <notify_cb+0x114>
			err = gatt_indicate(conn, data->handle,
   19ff8:	f7ff fe26 	bl	19c48 <gatt_indicate>
			if (err == 0) {
   19ffc:	4602      	mov	r2, r0
   19ffe:	b918      	cbnz	r0, 1a008 <notify_cb+0x100>
				data->ind_params->_ref++;
   1a000:	6920      	ldr	r0, [r4, #16]
   1a002:	7d81      	ldrb	r1, [r0, #22]
   1a004:	3101      	adds	r1, #1
   1a006:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
   1a008:	4628      	mov	r0, r5
   1a00a:	9201      	str	r2, [sp, #4]
   1a00c:	f008 fdc5 	bl	22b9a <bt_conn_unref>
		if (err < 0) {
   1a010:	9a01      	ldr	r2, [sp, #4]
   1a012:	2a00      	cmp	r2, #0
   1a014:	db83      	blt.n	19f1e <notify_cb+0x16>
		data->err = 0;
   1a016:	2300      	movs	r3, #0
   1a018:	60a3      	str	r3, [r4, #8]
   1a01a:	e7a8      	b.n	19f6e <notify_cb+0x66>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1a01c:	f7ff ff24 	bl	19e68 <gatt_notify>
   1a020:	4602      	mov	r2, r0
   1a022:	e7f1      	b.n	1a008 <notify_cb+0x100>
   1a024:	000194bd 	.word	0x000194bd
   1a028:	20000624 	.word	0x20000624
   1a02c:	000256c4 	.word	0x000256c4
   1a030:	000256fc 	.word	0x000256fc
   1a034:	200032fd 	.word	0x200032fd
   1a038:	00027f32 	.word	0x00027f32

0001a03c <update_ccc>:
{
   1a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a040:	6881      	ldr	r1, [r0, #8]
{
   1a042:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a044:	4a42      	ldr	r2, [pc, #264]	; (1a150 <update_ccc+0x114>)
   1a046:	4291      	cmp	r1, r2
{
   1a048:	b085      	sub	sp, #20
   1a04a:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a04c:	d17b      	bne.n	1a146 <update_ccc+0x10a>
   1a04e:	4c41      	ldr	r4, [pc, #260]	; (1a154 <update_ccc+0x118>)
   1a050:	4941      	ldr	r1, [pc, #260]	; (1a158 <update_ccc+0x11c>)
	ccc = attr->user_data;
   1a052:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   1a056:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
   1a058:	f8df b114 	ldr.w	fp, [pc, #276]	; 1a170 <update_ccc+0x134>
   1a05c:	1a64      	subs	r4, r4, r1
   1a05e:	08e4      	lsrs	r4, r4, #3
   1a060:	f108 0333 	add.w	r3, r8, #51	; 0x33
   1a064:	ea4f 1984 	mov.w	r9, r4, lsl #6
   1a068:	f108 0601 	add.w	r6, r8, #1
   1a06c:	9300      	str	r3, [sp, #0]
   1a06e:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
   1a072:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   1a076:	b19a      	cbz	r2, 1a0a0 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a078:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   1a07c:	4632      	mov	r2, r6
   1a07e:	4628      	mov	r0, r5
   1a080:	f008 fd50 	bl	22b24 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a084:	b160      	cbz	r0, 1a0a0 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a086:	222a      	movs	r2, #42	; 0x2a
   1a088:	4651      	mov	r1, sl
   1a08a:	4628      	mov	r0, r5
   1a08c:	f009 fcb3 	bl	239f6 <bt_gatt_check_perm>
		if (err) {
   1a090:	b1d8      	cbz	r0, 1a0ca <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a092:	2803      	cmp	r0, #3
   1a094:	d109      	bne.n	1a0aa <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
   1a096:	464a      	mov	r2, r9
   1a098:	4651      	mov	r1, sl
   1a09a:	4658      	mov	r0, fp
   1a09c:	f006 f843 	bl	20126 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a0a0:	9b00      	ldr	r3, [sp, #0]
   1a0a2:	360a      	adds	r6, #10
   1a0a4:	429e      	cmp	r6, r3
   1a0a6:	d1e4      	bne.n	1a072 <update_ccc+0x36>
   1a0a8:	e04d      	b.n	1a146 <update_ccc+0x10a>
				sec = BT_SECURITY_L3;
   1a0aa:	2805      	cmp	r0, #5
   1a0ac:	bf14      	ite	ne
   1a0ae:	2202      	movne	r2, #2
   1a0b0:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
   1a0b2:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
   1a0b4:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
   1a0b6:	f008 fd03 	bl	22ac0 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a0ba:	9a01      	ldr	r2, [sp, #4]
   1a0bc:	4282      	cmp	r2, r0
   1a0be:	d904      	bls.n	1a0ca <update_ccc+0x8e>
				if (data->sec < sec) {
   1a0c0:	7939      	ldrb	r1, [r7, #4]
   1a0c2:	4291      	cmp	r1, r2
   1a0c4:	d2ec      	bcs.n	1a0a0 <update_ccc+0x64>
					data->sec = sec;
   1a0c6:	713a      	strb	r2, [r7, #4]
   1a0c8:	e7ea      	b.n	1a0a0 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
   1a0ca:	4641      	mov	r1, r8
   1a0cc:	4650      	mov	r0, sl
   1a0ce:	f009 fa47 	bl	23560 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a0d2:	4b22      	ldr	r3, [pc, #136]	; (1a15c <update_ccc+0x120>)
   1a0d4:	4598      	cmp	r8, r3
   1a0d6:	d136      	bne.n	1a146 <update_ccc+0x10a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a0d8:	7a28      	ldrb	r0, [r5, #8]
   1a0da:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1a0de:	f7fe ffcd 	bl	1907c <find_sc_cfg>
	if (!cfg) {
   1a0e2:	4606      	mov	r6, r0
   1a0e4:	b378      	cbz	r0, 1a146 <update_ccc+0x10a>
	if (!(cfg->data.start || cfg->data.end)) {
   1a0e6:	8902      	ldrh	r2, [r0, #8]
   1a0e8:	8943      	ldrh	r3, [r0, #10]
   1a0ea:	ea52 0103 	orrs.w	r1, r2, r3
   1a0ee:	d02a      	beq.n	1a146 <update_ccc+0x10a>
	index = bt_conn_index(conn);
   1a0f0:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a0f2:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a0f6:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
   1a0fa:	f7fd fdc7 	bl	17c8c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a0fe:	4918      	ldr	r1, [pc, #96]	; (1a160 <update_ccc+0x124>)
   1a100:	4a18      	ldr	r2, [pc, #96]	; (1a164 <update_ccc+0x128>)
   1a102:	2318      	movs	r3, #24
   1a104:	fb03 1300 	mla	r3, r3, r0, r1
   1a108:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a10a:	4a17      	ldr	r2, [pc, #92]	; (1a168 <update_ccc+0x12c>)
   1a10c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1a10e:	aa03      	add	r2, sp, #12
   1a110:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1a112:	2204      	movs	r2, #4
   1a114:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a116:	b203      	sxth	r3, r0
   1a118:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a11c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1a120:	4628      	mov	r0, r5
   1a122:	f7ff fdfb 	bl	19d1c <bt_gatt_indicate>
   1a126:	b128      	cbz	r0, 1a134 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
   1a128:	01a1      	lsls	r1, r4, #6
   1a12a:	4810      	ldr	r0, [pc, #64]	; (1a16c <update_ccc+0x130>)
   1a12c:	f041 0101 	orr.w	r1, r1, #1
   1a130:	f005 ffec 	bl	2010c <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1a134:	2204      	movs	r2, #4
   1a136:	2100      	movs	r1, #0
   1a138:	f106 0008 	add.w	r0, r6, #8
   1a13c:	f008 f87f 	bl	2223e <memset>
		sc_store(cfg);
   1a140:	4630      	mov	r0, r6
   1a142:	f7fe ff41 	bl	18fc8 <sc_store>
}
   1a146:	2001      	movs	r0, #1
   1a148:	b005      	add	sp, #20
   1a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a14e:	bf00      	nop
   1a150:	000194bd 	.word	0x000194bd
   1a154:	000256fc 	.word	0x000256fc
   1a158:	000256c4 	.word	0x000256c4
   1a15c:	20000624 	.word	0x20000624
   1a160:	20002f8c 	.word	0x20002f8c
   1a164:	00025e98 	.word	0x00025e98
   1a168:	0002378f 	.word	0x0002378f
   1a16c:	00027fac 	.word	0x00027fac
   1a170:	00027f98 	.word	0x00027f98

0001a174 <bt_gatt_connected>:
{
   1a174:	b570      	push	{r4, r5, r6, lr}
   1a176:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a178:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1a17c:	4604      	mov	r4, r0
	data.conn = conn;
   1a17e:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1a180:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a182:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1a184:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a188:	4629      	mov	r1, r5
   1a18a:	f008 fa7f 	bl	2268c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a18e:	b190      	cbz	r0, 1a1b6 <bt_gatt_connected+0x42>
		if (conn->id) {
   1a190:	7a22      	ldrb	r2, [r4, #8]
   1a192:	b31a      	cbz	r2, 1a1dc <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a194:	ae02      	add	r6, sp, #8
   1a196:	2104      	movs	r1, #4
   1a198:	4630      	mov	r0, r6
   1a19a:	f005 fabd 	bl	1f718 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a19e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a1a0:	4a0f      	ldr	r2, [pc, #60]	; (1a1e0 <bt_gatt_connected+0x6c>)
   1a1a2:	2124      	movs	r1, #36	; 0x24
   1a1a4:	a805      	add	r0, sp, #20
   1a1a6:	462b      	mov	r3, r5
   1a1a8:	f7fa fa0c 	bl	145c4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1a1ac:	aa05      	add	r2, sp, #20
   1a1ae:	490d      	ldr	r1, [pc, #52]	; (1a1e4 <bt_gatt_connected+0x70>)
   1a1b0:	4610      	mov	r0, r2
   1a1b2:	f7f8 fb25 	bl	12800 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a1b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a1ba:	4a0b      	ldr	r2, [pc, #44]	; (1a1e8 <bt_gatt_connected+0x74>)
   1a1bc:	ab03      	add	r3, sp, #12
   1a1be:	2001      	movs	r0, #1
   1a1c0:	f009 fc0e 	bl	239e0 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1a1c4:	4620      	mov	r0, r4
   1a1c6:	f008 fc7b 	bl	22ac0 <bt_conn_get_security>
   1a1ca:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a1ce:	4288      	cmp	r0, r1
   1a1d0:	d202      	bcs.n	1a1d8 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
   1a1d2:	4620      	mov	r0, r4
   1a1d4:	f008 fc41 	bl	22a5a <bt_conn_set_security>
}
   1a1d8:	b00e      	add	sp, #56	; 0x38
   1a1da:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a1dc:	9200      	str	r2, [sp, #0]
   1a1de:	e7df      	b.n	1a1a0 <bt_gatt_connected+0x2c>
   1a1e0:	00027f22 	.word	0x00027f22
   1a1e4:	00019b39 	.word	0x00019b39
   1a1e8:	0001a03d 	.word	0x0001a03d

0001a1ec <bt_gatt_encrypt_change>:
{
   1a1ec:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a1ee:	4a06      	ldr	r2, [pc, #24]	; (1a208 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1a1f0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a1f2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1a1f4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a1f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1a1fa:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a1fe:	f009 fbef 	bl	239e0 <bt_gatt_foreach_attr>
}
   1a202:	b003      	add	sp, #12
   1a204:	f85d fb04 	ldr.w	pc, [sp], #4
   1a208:	0001a03d 	.word	0x0001a03d

0001a20c <db_hash_read>:
{
   1a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a20e:	4914      	ldr	r1, [pc, #80]	; (1a260 <db_hash_read+0x54>)
{
   1a210:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1a214:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a216:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1a21a:	461f      	mov	r7, r3
   1a21c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a21e:	f00a fdc7 	bl	24db0 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a222:	4810      	ldr	r0, [pc, #64]	; (1a264 <db_hash_read+0x58>)
   1a224:	f009 f9cf 	bl	235c6 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a228:	0743      	lsls	r3, r0, #29
   1a22a:	d402      	bmi.n	1a232 <db_hash_read+0x26>
		db_hash_gen(true);
   1a22c:	2001      	movs	r0, #1
   1a22e:	f7ff fbd3 	bl	199d8 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   1a232:	2101      	movs	r1, #1
   1a234:	4620      	mov	r0, r4
   1a236:	f009 fc09 	bl	23a4c <bt_gatt_change_aware>
	if (offset > value_len) {
   1a23a:	2e10      	cmp	r6, #16
   1a23c:	d80c      	bhi.n	1a258 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   1a23e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1a242:	4909      	ldr	r1, [pc, #36]	; (1a268 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   1a244:	42bc      	cmp	r4, r7
   1a246:	bfa8      	it	ge
   1a248:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1a24a:	4622      	mov	r2, r4
   1a24c:	4431      	add	r1, r6
   1a24e:	4628      	mov	r0, r5
   1a250:	f007 ffca 	bl	221e8 <memcpy>
}
   1a254:	4620      	mov	r0, r4
   1a256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a258:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a25c:	e7fa      	b.n	1a254 <db_hash_read+0x48>
   1a25e:	bf00      	nop
   1a260:	20001fd8 	.word	0x20001fd8
   1a264:	20002050 	.word	0x20002050
   1a268:	20001f88 	.word	0x20001f88

0001a26c <bt_gatt_store_ccc>:
{
   1a26c:	b570      	push	{r4, r5, r6, lr}
   1a26e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1a270:	2300      	movs	r3, #0
{
   1a272:	4604      	mov	r4, r0
   1a274:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1a276:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1a278:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1a27c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1a27e:	4a18      	ldr	r2, [pc, #96]	; (1a2e0 <bt_gatt_store_ccc+0x74>)
   1a280:	ab0d      	add	r3, sp, #52	; 0x34
   1a282:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a286:	2001      	movs	r0, #1
   1a288:	f009 fbaa 	bl	239e0 <bt_gatt_foreach_attr>
	if (id) {
   1a28c:	b31c      	cbz	r4, 1a2d6 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   1a28e:	ae03      	add	r6, sp, #12
   1a290:	4622      	mov	r2, r4
   1a292:	2104      	movs	r1, #4
   1a294:	4630      	mov	r0, r6
   1a296:	f005 fa3f 	bl	1f718 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1a29a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1a29c:	4a11      	ldr	r2, [pc, #68]	; (1a2e4 <bt_gatt_store_ccc+0x78>)
   1a29e:	462b      	mov	r3, r5
   1a2a0:	2124      	movs	r1, #36	; 0x24
   1a2a2:	a804      	add	r0, sp, #16
   1a2a4:	f7fa f98e 	bl	145c4 <bt_settings_encode_key>
	if (save.count) {
   1a2a8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1a2aa:	b1b2      	cbz	r2, 1a2da <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   1a2ac:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1a2ae:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1a2b0:	a804      	add	r0, sp, #16
   1a2b2:	f7f8 fa41 	bl	12738 <settings_save_one>
	if (err) {
   1a2b6:	4604      	mov	r4, r0
   1a2b8:	b150      	cbz	r0, 1a2d0 <bt_gatt_store_ccc+0x64>
   1a2ba:	4a0b      	ldr	r2, [pc, #44]	; (1a2e8 <bt_gatt_store_ccc+0x7c>)
   1a2bc:	4b0b      	ldr	r3, [pc, #44]	; (1a2ec <bt_gatt_store_ccc+0x80>)
   1a2be:	1ad2      	subs	r2, r2, r3
   1a2c0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
   1a2c2:	0192      	lsls	r2, r2, #6
   1a2c4:	4601      	mov	r1, r0
   1a2c6:	f042 0201 	orr.w	r2, r2, #1
   1a2ca:	4809      	ldr	r0, [pc, #36]	; (1a2f0 <bt_gatt_store_ccc+0x84>)
   1a2cc:	f005 ff2b 	bl	20126 <log_1>
}
   1a2d0:	4620      	mov	r0, r4
   1a2d2:	b040      	add	sp, #256	; 0x100
   1a2d4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1a2d6:	9400      	str	r4, [sp, #0]
   1a2d8:	e7e0      	b.n	1a29c <bt_gatt_store_ccc+0x30>
		str = NULL;
   1a2da:	4611      	mov	r1, r2
   1a2dc:	e7e8      	b.n	1a2b0 <bt_gatt_store_ccc+0x44>
   1a2de:	bf00      	nop
   1a2e0:	00019291 	.word	0x00019291
   1a2e4:	00027f22 	.word	0x00027f22
   1a2e8:	000256fc 	.word	0x000256fc
   1a2ec:	000256c4 	.word	0x000256c4
   1a2f0:	00027fc9 	.word	0x00027fc9

0001a2f4 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1a2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2f6:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1a2f8:	ae03      	add	r6, sp, #12
{
   1a2fa:	4604      	mov	r4, r0
   1a2fc:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1a2fe:	9103      	str	r1, [sp, #12]
   1a300:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1a304:	4a1f      	ldr	r2, [pc, #124]	; (1a384 <bt_gatt_clear+0x90>)
   1a306:	4633      	mov	r3, r6
   1a308:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a30c:	2001      	movs	r0, #1
   1a30e:	f009 fb67 	bl	239e0 <bt_gatt_foreach_attr>
		if (id) {
   1a312:	b394      	cbz	r4, 1a37a <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1a314:	af02      	add	r7, sp, #8
   1a316:	4622      	mov	r2, r4
   1a318:	2104      	movs	r1, #4
   1a31a:	4638      	mov	r0, r7
   1a31c:	f005 f9fc 	bl	1f718 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a320:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a322:	4a19      	ldr	r2, [pc, #100]	; (1a388 <bt_gatt_clear+0x94>)
   1a324:	462b      	mov	r3, r5
   1a326:	2124      	movs	r1, #36	; 0x24
   1a328:	a805      	add	r0, sp, #20
   1a32a:	f7fa f94b 	bl	145c4 <bt_settings_encode_key>
		return settings_delete(key);
   1a32e:	a805      	add	r0, sp, #20
   1a330:	f006 fc2f 	bl	20b92 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1a334:	2800      	cmp	r0, #0
   1a336:	db1e      	blt.n	1a376 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1a338:	4629      	mov	r1, r5
   1a33a:	4620      	mov	r0, r4
   1a33c:	f7ff f9b6 	bl	196ac <bt_gatt_clear_sc>
		if (err < 0) {
   1a340:	2800      	cmp	r0, #0
   1a342:	db18      	blt.n	1a376 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1a344:	4629      	mov	r1, r5
   1a346:	4620      	mov	r0, r4
   1a348:	f7fe ff82 	bl	19250 <find_cf_cfg_by_addr>
	if (cfg) {
   1a34c:	b108      	cbz	r0, 1a352 <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1a34e:	f009 f9c5 	bl	236dc <clear_cf_cfg>
		if (id) {
   1a352:	b1a4      	cbz	r4, 1a37e <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1a354:	4622      	mov	r2, r4
   1a356:	2104      	movs	r1, #4
   1a358:	4630      	mov	r0, r6
   1a35a:	f005 f9dd 	bl	1f718 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1a35e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1a360:	4a0a      	ldr	r2, [pc, #40]	; (1a38c <bt_gatt_clear+0x98>)
   1a362:	462b      	mov	r3, r5
   1a364:	2124      	movs	r1, #36	; 0x24
   1a366:	a805      	add	r0, sp, #20
   1a368:	f7fa f92c 	bl	145c4 <bt_settings_encode_key>
		return settings_delete(key);
   1a36c:	a805      	add	r0, sp, #20
   1a36e:	f006 fc10 	bl	20b92 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1a372:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1a376:	b00f      	add	sp, #60	; 0x3c
   1a378:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a37a:	9400      	str	r4, [sp, #0]
   1a37c:	e7d1      	b.n	1a322 <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1a37e:	9400      	str	r4, [sp, #0]
   1a380:	e7ee      	b.n	1a360 <bt_gatt_clear+0x6c>
   1a382:	bf00      	nop
   1a384:	00019355 	.word	0x00019355
   1a388:	00027f22 	.word	0x00027f22
   1a38c:	00028013 	.word	0x00028013

0001a390 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1a390:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a392:	4604      	mov	r4, r0
   1a394:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1a396:	4603      	mov	r3, r0
   1a398:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a39c:	2001      	movs	r0, #1
   1a39e:	4a37      	ldr	r2, [pc, #220]	; (1a47c <bt_gatt_disconnected+0xec>)
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a3a0:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1a3a4:	f009 fb1c 	bl	239e0 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a3a8:	7a20      	ldrb	r0, [r4, #8]
   1a3aa:	4629      	mov	r1, r5
   1a3ac:	f008 f96e 	bl	2268c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1a3b0:	2800      	cmp	r0, #0
   1a3b2:	d035      	beq.n	1a420 <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1a3b4:	4629      	mov	r1, r5
   1a3b6:	7a20      	ldrb	r0, [r4, #8]
   1a3b8:	f7ff ff58 	bl	1a26c <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1a3bc:	4620      	mov	r0, r4
   1a3be:	f7fe ffdd 	bl	1937c <find_cf_cfg>
	if (!cfg) {
   1a3c2:	4606      	mov	r6, r0
   1a3c4:	2800      	cmp	r0, #0
   1a3c6:	d04a      	beq.n	1a45e <bt_gatt_disconnected+0xce>
		if (conn->id) {
   1a3c8:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1a3ca:	3608      	adds	r6, #8
		if (conn->id) {
   1a3cc:	2a00      	cmp	r2, #0
   1a3ce:	d048      	beq.n	1a462 <bt_gatt_disconnected+0xd2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a3d0:	af02      	add	r7, sp, #8
   1a3d2:	2104      	movs	r1, #4
   1a3d4:	4638      	mov	r0, r7
   1a3d6:	f005 f99f 	bl	1f718 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1a3da:	9700      	str	r7, [sp, #0]
   1a3dc:	462b      	mov	r3, r5
   1a3de:	4a28      	ldr	r2, [pc, #160]	; (1a480 <bt_gatt_disconnected+0xf0>)
   1a3e0:	2124      	movs	r1, #36	; 0x24
   1a3e2:	a803      	add	r0, sp, #12
   1a3e4:	f7fa f8ee 	bl	145c4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1a3e8:	7a23      	ldrb	r3, [r4, #8]
   1a3ea:	2701      	movs	r7, #1
   1a3ec:	b93b      	cbnz	r3, 1a3fe <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1a3ee:	2300      	movs	r3, #0
   1a3f0:	9300      	str	r3, [sp, #0]
   1a3f2:	4a23      	ldr	r2, [pc, #140]	; (1a480 <bt_gatt_disconnected+0xf0>)
   1a3f4:	462b      	mov	r3, r5
   1a3f6:	2124      	movs	r1, #36	; 0x24
   1a3f8:	a803      	add	r0, sp, #12
   1a3fa:	f7fa f8e3 	bl	145c4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1a3fe:	4631      	mov	r1, r6
   1a400:	463a      	mov	r2, r7
   1a402:	a803      	add	r0, sp, #12
   1a404:	f7f8 f998 	bl	12738 <settings_save_one>
	if (err) {
   1a408:	4601      	mov	r1, r0
   1a40a:	b148      	cbz	r0, 1a420 <bt_gatt_disconnected+0x90>
   1a40c:	4a1d      	ldr	r2, [pc, #116]	; (1a484 <bt_gatt_disconnected+0xf4>)
   1a40e:	4b1e      	ldr	r3, [pc, #120]	; (1a488 <bt_gatt_disconnected+0xf8>)
		BT_ERR("Failed to store Client Features (err %d)", err);
   1a410:	481e      	ldr	r0, [pc, #120]	; (1a48c <bt_gatt_disconnected+0xfc>)
   1a412:	1ad2      	subs	r2, r2, r3
   1a414:	08d2      	lsrs	r2, r2, #3
   1a416:	0192      	lsls	r2, r2, #6
   1a418:	f042 0201 	orr.w	r2, r2, #1
   1a41c:	f005 fe83 	bl	20126 <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a420:	7a20      	ldrb	r0, [r4, #8]
   1a422:	4629      	mov	r1, r5
   1a424:	f008 f932 	bl	2268c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a428:	b150      	cbz	r0, 1a440 <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
   1a42a:	7a23      	ldrb	r3, [r4, #8]
   1a42c:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1a430:	4a17      	ldr	r2, [pc, #92]	; (1a490 <bt_gatt_disconnected+0x100>)
		struct addr_with_id addr_with_id = {
   1a432:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1a434:	ab03      	add	r3, sp, #12
   1a436:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a43a:	2001      	movs	r0, #1
   1a43c:	f009 fad0 	bl	239e0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1a440:	4620      	mov	r0, r4
   1a442:	f7fe ff9b 	bl	1937c <find_cf_cfg>
	if (!cfg) {
   1a446:	4606      	mov	r6, r0
   1a448:	b138      	cbz	r0, 1a45a <bt_gatt_disconnected+0xca>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a44a:	7a20      	ldrb	r0, [r4, #8]
   1a44c:	4629      	mov	r1, r5
   1a44e:	f008 f91d 	bl	2268c <bt_addr_le_is_bonded>
   1a452:	b940      	cbnz	r0, 1a466 <bt_gatt_disconnected+0xd6>
		clear_cf_cfg(cfg);
   1a454:	4630      	mov	r0, r6
   1a456:	f009 f941 	bl	236dc <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1a45a:	b00d      	add	sp, #52	; 0x34
   1a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   1a45e:	4607      	mov	r7, r0
   1a460:	e7c5      	b.n	1a3ee <bt_gatt_disconnected+0x5e>
   1a462:	2701      	movs	r7, #1
   1a464:	e7c3      	b.n	1a3ee <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a466:	4629      	mov	r1, r5
   1a468:	1c70      	adds	r0, r6, #1
   1a46a:	f009 f917 	bl	2369c <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a46e:	f06f 0102 	mvn.w	r1, #2
   1a472:	f106 000c 	add.w	r0, r6, #12
   1a476:	f009 f922 	bl	236be <atomic_and>
}
   1a47a:	e7ee      	b.n	1a45a <bt_gatt_disconnected+0xca>
   1a47c:	00019775 	.word	0x00019775
   1a480:	00028013 	.word	0x00028013
   1a484:	000256fc 	.word	0x000256fc
   1a488:	000256c4 	.word	0x000256c4
   1a48c:	00027fe7 	.word	0x00027fe7
   1a490:	00019355 	.word	0x00019355

0001a494 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1a494:	4b10      	ldr	r3, [pc, #64]	; (1a4d8 <get_io_capa+0x44>)
   1a496:	681b      	ldr	r3, [r3, #0]
   1a498:	b1bb      	cbz	r3, 1a4ca <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1a49a:	681a      	ldr	r2, [r3, #0]
   1a49c:	b142      	cbz	r2, 1a4b0 <get_io_capa+0x1c>
   1a49e:	6859      	ldr	r1, [r3, #4]
   1a4a0:	b131      	cbz	r1, 1a4b0 <get_io_capa+0x1c>
   1a4a2:	6899      	ldr	r1, [r3, #8]
   1a4a4:	b911      	cbnz	r1, 1a4ac <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1a4a6:	490d      	ldr	r1, [pc, #52]	; (1a4dc <get_io_capa+0x48>)
   1a4a8:	7809      	ldrb	r1, [r1, #0]
   1a4aa:	b939      	cbnz	r1, 1a4bc <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1a4ac:	2004      	movs	r0, #4
   1a4ae:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1a4b0:	490a      	ldr	r1, [pc, #40]	; (1a4dc <get_io_capa+0x48>)
   1a4b2:	7809      	ldrb	r1, [r1, #0]
   1a4b4:	b111      	cbz	r1, 1a4bc <get_io_capa+0x28>
   1a4b6:	b10a      	cbz	r2, 1a4bc <get_io_capa+0x28>
   1a4b8:	6899      	ldr	r1, [r3, #8]
   1a4ba:	b941      	cbnz	r1, 1a4ce <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   1a4bc:	685b      	ldr	r3, [r3, #4]
   1a4be:	b943      	cbnz	r3, 1a4d2 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   1a4c0:	2a00      	cmp	r2, #0
   1a4c2:	bf0c      	ite	eq
   1a4c4:	2003      	moveq	r0, #3
   1a4c6:	2000      	movne	r0, #0
   1a4c8:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1a4ca:	2003      	movs	r0, #3
   1a4cc:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1a4ce:	2001      	movs	r0, #1
   1a4d0:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1a4d2:	2002      	movs	r0, #2
	}
}
   1a4d4:	4770      	bx	lr
   1a4d6:	bf00      	nop
   1a4d8:	20002ed4 	.word	0x20002ed4
   1a4dc:	2000349d 	.word	0x2000349d

0001a4e0 <smp_find>:
}

static struct bt_smp *smp_find(int flag)
{
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1a4e0:	4a08      	ldr	r2, [pc, #32]	; (1a504 <smp_find+0x24>)
{
   1a4e2:	b538      	push	{r3, r4, r5, lr}
   1a4e4:	4601      	mov	r1, r0
   1a4e6:	2300      	movs	r3, #0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1a4e8:	1d15      	adds	r5, r2, #4
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a4ea:	f640 2428 	movw	r4, #2600	; 0xa28
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1a4ee:	18e8      	adds	r0, r5, r3
   1a4f0:	f009 faf3 	bl	23ada <atomic_test_bit>
   1a4f4:	b108      	cbz	r0, 1a4fa <smp_find+0x1a>
			return &bt_smp_pool[i];
   1a4f6:	18d0      	adds	r0, r2, r3
		}
	}

	return NULL;
}
   1a4f8:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a4fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
   1a4fe:	42a3      	cmp	r3, r4
   1a500:	d1f5      	bne.n	1a4ee <smp_find+0xe>
   1a502:	e7f9      	b.n	1a4f8 <smp_find+0x18>
   1a504:	20002058 	.word	0x20002058

0001a508 <smp_dhkey_generate>:
{
   1a508:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a50a:	1d05      	adds	r5, r0, #4
{
   1a50c:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a50e:	2108      	movs	r1, #8
   1a510:	4628      	mov	r0, r5
   1a512:	f009 face 	bl	23ab2 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1a516:	490b      	ldr	r1, [pc, #44]	; (1a544 <smp_dhkey_generate+0x3c>)
   1a518:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1a51c:	f7fc fd66 	bl	16fec <bt_dh_key_gen>
	if (err) {
   1a520:	b170      	cbz	r0, 1a540 <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a522:	2108      	movs	r1, #8
   1a524:	4628      	mov	r0, r5
   1a526:	f009 fae1 	bl	23aec <atomic_clear_bit>
   1a52a:	4b07      	ldr	r3, [pc, #28]	; (1a548 <smp_dhkey_generate+0x40>)
   1a52c:	4907      	ldr	r1, [pc, #28]	; (1a54c <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
   1a52e:	4808      	ldr	r0, [pc, #32]	; (1a550 <smp_dhkey_generate+0x48>)
   1a530:	1ac9      	subs	r1, r1, r3
   1a532:	08c9      	lsrs	r1, r1, #3
   1a534:	0189      	lsls	r1, r1, #6
   1a536:	f041 0101 	orr.w	r1, r1, #1
   1a53a:	f005 fde7 	bl	2010c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1a53e:	2008      	movs	r0, #8
}
   1a540:	bd38      	pop	{r3, r4, r5, pc}
   1a542:	bf00      	nop
   1a544:	000242ad 	.word	0x000242ad
   1a548:	000256c4 	.word	0x000256c4
   1a54c:	0002573c 	.word	0x0002573c
   1a550:	00028024 	.word	0x00028024

0001a554 <smp_ident_info>:
	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}

static uint8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
   1a554:	b570      	push	{r4, r5, r6, lr}
   1a556:	460b      	mov	r3, r1
   1a558:	4604      	mov	r4, r0
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a55a:	210d      	movs	r1, #13
   1a55c:	3004      	adds	r0, #4
   1a55e:	f009 fabc 	bl	23ada <atomic_test_bit>
   1a562:	b310      	cbz	r0, 1a5aa <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1a564:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1a566:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1a56a:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1a56e:	7a19      	ldrb	r1, [r3, #8]
   1a570:	462a      	mov	r2, r5
   1a572:	2002      	movs	r0, #2
   1a574:	f009 ff30 	bl	243d8 <bt_keys_get_type>
		if (!keys) {
   1a578:	b990      	cbnz	r0, 1a5a0 <smp_ident_info+0x4c>
   1a57a:	4a0f      	ldr	r2, [pc, #60]	; (1a5b8 <smp_ident_info+0x64>)
   1a57c:	4c0f      	ldr	r4, [pc, #60]	; (1a5bc <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1a57e:	4628      	mov	r0, r5
   1a580:	1aa4      	subs	r4, r4, r2
   1a582:	f7f9 fd55 	bl	14030 <bt_addr_le_str_real>
   1a586:	f7f6 fff5 	bl	11574 <z_log_strdup>
   1a58a:	08e4      	lsrs	r4, r4, #3
   1a58c:	01a4      	lsls	r4, r4, #6
   1a58e:	f044 0401 	orr.w	r4, r4, #1
   1a592:	4601      	mov	r1, r0
   1a594:	4622      	mov	r2, r4
   1a596:	480a      	ldr	r0, [pc, #40]	; (1a5c0 <smp_ident_info+0x6c>)
   1a598:	f005 fdc5 	bl	20126 <log_1>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
   1a59c:	2008      	movs	r0, #8
	}

	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);

	return 0;
}
   1a59e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1a5a0:	2210      	movs	r2, #16
   1a5a2:	4631      	mov	r1, r6
   1a5a4:	302a      	adds	r0, #42	; 0x2a
   1a5a6:	f007 fe1f 	bl	221e8 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1a5aa:	4620      	mov	r0, r4
   1a5ac:	2109      	movs	r1, #9
   1a5ae:	f009 fa80 	bl	23ab2 <atomic_set_bit>
	return 0;
   1a5b2:	2000      	movs	r0, #0
   1a5b4:	e7f3      	b.n	1a59e <smp_ident_info+0x4a>
   1a5b6:	bf00      	nop
   1a5b8:	000256c4 	.word	0x000256c4
   1a5bc:	0002573c 	.word	0x0002573c
   1a5c0:	0002803d 	.word	0x0002803d

0001a5c4 <smp_encrypt_info>:
{
   1a5c4:	b570      	push	{r4, r5, r6, lr}
   1a5c6:	460b      	mov	r3, r1
   1a5c8:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a5ca:	210d      	movs	r1, #13
   1a5cc:	3004      	adds	r0, #4
   1a5ce:	f009 fa84 	bl	23ada <atomic_test_bit>
   1a5d2:	b310      	cbz	r0, 1a61a <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1a5d4:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1a5d6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1a5da:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1a5de:	7a19      	ldrb	r1, [r3, #8]
   1a5e0:	462a      	mov	r2, r5
   1a5e2:	2004      	movs	r0, #4
   1a5e4:	f009 fef8 	bl	243d8 <bt_keys_get_type>
		if (!keys) {
   1a5e8:	b990      	cbnz	r0, 1a610 <smp_encrypt_info+0x4c>
   1a5ea:	4a0f      	ldr	r2, [pc, #60]	; (1a628 <smp_encrypt_info+0x64>)
   1a5ec:	4c0f      	ldr	r4, [pc, #60]	; (1a62c <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1a5ee:	4628      	mov	r0, r5
   1a5f0:	1aa4      	subs	r4, r4, r2
   1a5f2:	f7f9 fd1d 	bl	14030 <bt_addr_le_str_real>
   1a5f6:	f7f6 ffbd 	bl	11574 <z_log_strdup>
   1a5fa:	08e4      	lsrs	r4, r4, #3
   1a5fc:	01a4      	lsls	r4, r4, #6
   1a5fe:	f044 0401 	orr.w	r4, r4, #1
   1a602:	4601      	mov	r1, r0
   1a604:	4622      	mov	r2, r4
   1a606:	480a      	ldr	r0, [pc, #40]	; (1a630 <smp_encrypt_info+0x6c>)
   1a608:	f005 fd8d 	bl	20126 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1a60c:	2008      	movs	r0, #8
}
   1a60e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1a610:	2210      	movs	r2, #16
   1a612:	4631      	mov	r1, r6
   1a614:	301a      	adds	r0, #26
   1a616:	f007 fde7 	bl	221e8 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1a61a:	4620      	mov	r0, r4
   1a61c:	2107      	movs	r1, #7
   1a61e:	f009 fa48 	bl	23ab2 <atomic_set_bit>
	return 0;
   1a622:	2000      	movs	r0, #0
   1a624:	e7f3      	b.n	1a60e <smp_encrypt_info+0x4a>
   1a626:	bf00      	nop
   1a628:	000256c4 	.word	0x000256c4
   1a62c:	0002573c 	.word	0x0002573c
   1a630:	0002803d 	.word	0x0002803d

0001a634 <get_auth.isra.0>:
	if (sc_supported) {
   1a634:	4b0c      	ldr	r3, [pc, #48]	; (1a668 <get_auth.isra.0+0x34>)
   1a636:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   1a638:	b510      	push	{r4, lr}
	if (sc_supported) {
   1a63a:	b17b      	cbz	r3, 1a65c <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1a63c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a640:	f7ff ff28 	bl	1a494 <get_io_capa>
	if (bondable) {
   1a644:	4b09      	ldr	r3, [pc, #36]	; (1a66c <get_auth.isra.0+0x38>)
   1a646:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a648:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1a64a:	bf0c      	ite	eq
   1a64c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1a650:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1a654:	b12b      	cbz	r3, 1a662 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1a656:	f044 0001 	orr.w	r0, r4, #1
}
   1a65a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1a65c:	f000 0407 	and.w	r4, r0, #7
   1a660:	e7ee      	b.n	1a640 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1a662:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1a666:	e7f8      	b.n	1a65a <get_auth.isra.0+0x26>
   1a668:	2000349d 	.word	0x2000349d
   1a66c:	20000734 	.word	0x20000734

0001a670 <smp_chan_get>:
{
   1a670:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1a672:	2106      	movs	r1, #6
   1a674:	f008 fbaf 	bl	22dd6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a678:	4604      	mov	r4, r0
   1a67a:	b958      	cbnz	r0, 1a694 <smp_chan_get+0x24>
   1a67c:	4907      	ldr	r1, [pc, #28]	; (1a69c <smp_chan_get+0x2c>)
   1a67e:	4b08      	ldr	r3, [pc, #32]	; (1a6a0 <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   1a680:	4808      	ldr	r0, [pc, #32]	; (1a6a4 <smp_chan_get+0x34>)
   1a682:	1ac9      	subs	r1, r1, r3
   1a684:	08c9      	lsrs	r1, r1, #3
   1a686:	0189      	lsls	r1, r1, #6
   1a688:	f041 0101 	orr.w	r1, r1, #1
   1a68c:	f005 fd3e 	bl	2010c <log_0>
}
   1a690:	4620      	mov	r0, r4
   1a692:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1a694:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1a698:	e7fa      	b.n	1a690 <smp_chan_get+0x20>
   1a69a:	bf00      	nop
   1a69c:	0002573c 	.word	0x0002573c
   1a6a0:	000256c4 	.word	0x000256c4
   1a6a4:	00028057 	.word	0x00028057

0001a6a8 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1a6a8:	b538      	push	{r3, r4, r5, lr}
   1a6aa:	4b12      	ldr	r3, [pc, #72]	; (1a6f4 <bt_smp_accept+0x4c>)
   1a6ac:	4605      	mov	r5, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a6ae:	2400      	movs	r4, #0
   1a6b0:	461a      	mov	r2, r3
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1a6b2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   1a6b6:	b190      	cbz	r0, 1a6de <bt_smp_accept+0x36>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a6b8:	3401      	adds	r4, #1
   1a6ba:	2c05      	cmp	r4, #5
   1a6bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   1a6c0:	d1f7      	bne.n	1a6b2 <bt_smp_accept+0xa>
   1a6c2:	4b0d      	ldr	r3, [pc, #52]	; (1a6f8 <bt_smp_accept+0x50>)
   1a6c4:	4a0d      	ldr	r2, [pc, #52]	; (1a6fc <bt_smp_accept+0x54>)
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1a6c6:	480e      	ldr	r0, [pc, #56]	; (1a700 <bt_smp_accept+0x58>)
   1a6c8:	1ad2      	subs	r2, r2, r3
   1a6ca:	08d2      	lsrs	r2, r2, #3
   1a6cc:	0192      	lsls	r2, r2, #6
   1a6ce:	f042 0201 	orr.w	r2, r2, #1
   1a6d2:	4629      	mov	r1, r5
   1a6d4:	f005 fd27 	bl	20126 <log_1>

	return -ENOMEM;
   1a6d8:	f06f 000b 	mvn.w	r0, #11
   1a6dc:	e009      	b.n	1a6f2 <bt_smp_accept+0x4a>
		smp->chan.chan.ops = &ops;
   1a6de:	f44f 7302 	mov.w	r3, #520	; 0x208
   1a6e2:	4363      	muls	r3, r4
   1a6e4:	18d4      	adds	r4, r2, r3
		*chan = &smp->chan.chan;
   1a6e6:	33f0      	adds	r3, #240	; 0xf0
		smp->chan.chan.ops = &ops;
   1a6e8:	4d06      	ldr	r5, [pc, #24]	; (1a704 <bt_smp_accept+0x5c>)
   1a6ea:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		*chan = &smp->chan.chan;
   1a6ee:	4413      	add	r3, r2
   1a6f0:	600b      	str	r3, [r1, #0]
}
   1a6f2:	bd38      	pop	{r3, r4, r5, pc}
   1a6f4:	20002058 	.word	0x20002058
   1a6f8:	000256c4 	.word	0x000256c4
   1a6fc:	0002573c 	.word	0x0002573c
   1a700:	00028072 	.word	0x00028072
   1a704:	00026014 	.word	0x00026014

0001a708 <smp_init>:
{
   1a708:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1a70a:	22f0      	movs	r2, #240	; 0xf0
{
   1a70c:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1a70e:	2100      	movs	r1, #0
   1a710:	f007 fd95 	bl	2223e <memset>
	if (bt_rand(smp->prnd, 16)) {
   1a714:	2110      	movs	r1, #16
   1a716:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1a71a:	f002 ffd5 	bl	1d6c8 <bt_rand>
   1a71e:	4604      	mov	r4, r0
   1a720:	b948      	cbnz	r0, 1a736 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1a722:	2105      	movs	r1, #5
   1a724:	4628      	mov	r0, r5
   1a726:	f009 f9c4 	bl	23ab2 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1a72a:	f7fc fc4f 	bl	16fcc <bt_pub_key_get>
   1a72e:	4b03      	ldr	r3, [pc, #12]	; (1a73c <smp_init+0x34>)
   1a730:	6018      	str	r0, [r3, #0]
}
   1a732:	4620      	mov	r0, r4
   1a734:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1a736:	2408      	movs	r4, #8
   1a738:	e7fb      	b.n	1a732 <smp_init+0x2a>
   1a73a:	bf00      	nop
   1a73c:	20003008 	.word	0x20003008

0001a740 <smp_pairing_req>:
{
   1a740:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   1a744:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1a746:	78eb      	ldrb	r3, [r5, #3]
   1a748:	3b07      	subs	r3, #7
   1a74a:	2b09      	cmp	r3, #9
{
   1a74c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1a74e:	d904      	bls.n	1a75a <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1a750:	2506      	movs	r5, #6
}
   1a752:	4628      	mov	r0, r5
   1a754:	b002      	add	sp, #8
   1a756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   1a75a:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   1a75e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1a762:	b15b      	cbz	r3, 1a77c <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1a764:	1d26      	adds	r6, r4, #4
   1a766:	210f      	movs	r1, #15
   1a768:	4630      	mov	r0, r6
   1a76a:	f009 f9b6 	bl	23ada <atomic_test_bit>
   1a76e:	b980      	cbnz	r0, 1a792 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   1a770:	4620      	mov	r0, r4
   1a772:	f7ff ffc9 	bl	1a708 <smp_init>
		if (ret) {
   1a776:	b160      	cbz	r0, 1a792 <smp_pairing_req+0x52>
			return ret;
   1a778:	b2c5      	uxtb	r5, r0
   1a77a:	e7ea      	b.n	1a752 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a77c:	7a38      	ldrb	r0, [r7, #8]
   1a77e:	f107 0188 	add.w	r1, r7, #136	; 0x88
   1a782:	f001 facd 	bl	1bd20 <bt_keys_get_addr>
   1a786:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   1a78a:	2800      	cmp	r0, #0
   1a78c:	d1ea      	bne.n	1a764 <smp_pairing_req+0x24>
	switch (sec) {
   1a78e:	2508      	movs	r5, #8
   1a790:	e7df      	b.n	1a752 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1a792:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1a794:	2206      	movs	r2, #6
   1a796:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1a798:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1a79a:	f104 000a 	add.w	r0, r4, #10
   1a79e:	f007 fd23 	bl	221e8 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1a7a2:	2302      	movs	r3, #2
   1a7a4:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1a7a6:	78a8      	ldrb	r0, [r5, #2]
   1a7a8:	f7ff ff44 	bl	1a634 <get_auth.isra.0>
   1a7ac:	74e0      	strb	r0, [r4, #19]
   1a7ae:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   1a7b0:	f7ff fe70 	bl	1a494 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1a7b4:	4ba5      	ldr	r3, [pc, #660]	; (1aa4c <smp_pairing_req+0x30c>)
	rsp->io_capability = get_io_capa();
   1a7b6:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1a7b8:	781b      	ldrb	r3, [r3, #0]
   1a7ba:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1a7bc:	2310      	movs	r3, #16
   1a7be:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1a7c0:	792b      	ldrb	r3, [r5, #4]
   1a7c2:	f003 0303 	and.w	r3, r3, #3
   1a7c6:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1a7c8:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1a7ca:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1a7ce:	f003 0303 	and.w	r3, r3, #3
   1a7d2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1a7d4:	d00e      	beq.n	1a7f4 <smp_pairing_req+0xb4>
   1a7d6:	78ab      	ldrb	r3, [r5, #2]
   1a7d8:	071a      	lsls	r2, r3, #28
   1a7da:	d50b      	bpl.n	1a7f4 <smp_pairing_req+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1a7dc:	2105      	movs	r1, #5
   1a7de:	4630      	mov	r0, r6
   1a7e0:	f009 f967 	bl	23ab2 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1a7e4:	7d63      	ldrb	r3, [r4, #21]
   1a7e6:	f003 0302 	and.w	r3, r3, #2
   1a7ea:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1a7ec:	7da3      	ldrb	r3, [r4, #22]
   1a7ee:	f003 0302 	and.w	r3, r3, #2
   1a7f2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1a7f4:	7ce3      	ldrb	r3, [r4, #19]
   1a7f6:	069b      	lsls	r3, r3, #26
   1a7f8:	d506      	bpl.n	1a808 <smp_pairing_req+0xc8>
   1a7fa:	78ab      	ldrb	r3, [r5, #2]
   1a7fc:	0698      	lsls	r0, r3, #26
   1a7fe:	d503      	bpl.n	1a808 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1a800:	2114      	movs	r1, #20
   1a802:	4630      	mov	r0, r6
   1a804:	f009 f955 	bl	23ab2 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1a808:	7da3      	ldrb	r3, [r4, #22]
   1a80a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1a80e:	7d63      	ldrb	r3, [r4, #21]
   1a810:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1a814:	7ce3      	ldrb	r3, [r4, #19]
   1a816:	07d9      	lsls	r1, r3, #31
   1a818:	d5b9      	bpl.n	1a78e <smp_pairing_req+0x4e>
   1a81a:	f895 8002 	ldrb.w	r8, [r5, #2]
   1a81e:	f018 0801 	ands.w	r8, r8, #1
   1a822:	d0b4      	beq.n	1a78e <smp_pairing_req+0x4e>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1a824:	210d      	movs	r1, #13
   1a826:	4630      	mov	r0, r6
   1a828:	f009 f943 	bl	23ab2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1a82c:	2103      	movs	r1, #3
   1a82e:	f009 f940 	bl	23ab2 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a832:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1a834:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a836:	f009 f950 	bl	23ada <atomic_test_bit>
   1a83a:	bb28      	cbnz	r0, 1a888 <smp_pairing_req+0x148>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1a83c:	2d04      	cmp	r5, #4
   1a83e:	d81a      	bhi.n	1a876 <smp_pairing_req+0x136>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1a840:	7ca2      	ldrb	r2, [r4, #18]
   1a842:	7ae3      	ldrb	r3, [r4, #11]
   1a844:	4013      	ands	r3, r2
   1a846:	07da      	lsls	r2, r3, #31
   1a848:	d437      	bmi.n	1a8ba <smp_pairing_req+0x17a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1a84a:	7b20      	ldrb	r0, [r4, #12]
   1a84c:	7ce3      	ldrb	r3, [r4, #19]
   1a84e:	4318      	orrs	r0, r3
   1a850:	f010 0004 	ands.w	r0, r0, #4
   1a854:	d00f      	beq.n	1a876 <smp_pairing_req+0x136>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1a856:	f7ff fe1d 	bl	1a494 <get_io_capa>
   1a85a:	4b7d      	ldr	r3, [pc, #500]	; (1aa50 <smp_pairing_req+0x310>)
   1a85c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a860:	441d      	add	r5, r3
   1a862:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1a864:	2804      	cmp	r0, #4
   1a866:	d106      	bne.n	1a876 <smp_pairing_req+0x136>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1a868:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1a86c:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1a86e:	2b00      	cmp	r3, #0
   1a870:	bf14      	ite	ne
   1a872:	4640      	movne	r0, r8
   1a874:	2002      	moveq	r0, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1a876:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1a878:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   1a87c:	4620      	mov	r0, r4
   1a87e:	f009 f960 	bl	23b42 <update_keys_check>
   1a882:	bb00      	cbnz	r0, 1a8c6 <smp_pairing_req+0x186>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1a884:	2503      	movs	r5, #3
   1a886:	e764      	b.n	1a752 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1a888:	7b20      	ldrb	r0, [r4, #12]
   1a88a:	7ce2      	ldrb	r2, [r4, #19]
   1a88c:	ea00 0302 	and.w	r3, r0, r2
   1a890:	071b      	lsls	r3, r3, #28
   1a892:	d504      	bpl.n	1a89e <smp_pairing_req+0x15e>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1a894:	7ca1      	ldrb	r1, [r4, #18]
   1a896:	7ae3      	ldrb	r3, [r4, #11]
   1a898:	430b      	orrs	r3, r1
   1a89a:	07d9      	lsls	r1, r3, #31
   1a89c:	d40f      	bmi.n	1a8be <smp_pairing_req+0x17e>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1a89e:	2d04      	cmp	r5, #4
   1a8a0:	d80f      	bhi.n	1a8c2 <smp_pairing_req+0x182>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1a8a2:	4310      	orrs	r0, r2
   1a8a4:	f010 0004 	ands.w	r0, r0, #4
   1a8a8:	d0e5      	beq.n	1a876 <smp_pairing_req+0x136>
	return gen_method_sc[remote_io][get_io_capa()];
   1a8aa:	f7ff fdf3 	bl	1a494 <get_io_capa>
   1a8ae:	4b69      	ldr	r3, [pc, #420]	; (1aa54 <smp_pairing_req+0x314>)
   1a8b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a8b4:	441d      	add	r5, r3
   1a8b6:	5c28      	ldrb	r0, [r5, r0]
   1a8b8:	e7dd      	b.n	1a876 <smp_pairing_req+0x136>
		return LEGACY_OOB;
   1a8ba:	2006      	movs	r0, #6
   1a8bc:	e7db      	b.n	1a876 <smp_pairing_req+0x136>
			return LE_SC_OOB;
   1a8be:	2005      	movs	r0, #5
   1a8c0:	e7d9      	b.n	1a876 <smp_pairing_req+0x136>
		return JUST_WORKS;
   1a8c2:	2000      	movs	r0, #0
   1a8c4:	e7d7      	b.n	1a876 <smp_pairing_req+0x136>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1a8c6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1a8ca:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1a8cc:	2b03      	cmp	r3, #3
   1a8ce:	d034      	beq.n	1a93a <smp_pairing_req+0x1fa>
   1a8d0:	d822      	bhi.n	1a918 <smp_pairing_req+0x1d8>
   1a8d2:	3b01      	subs	r3, #1
   1a8d4:	2b01      	cmp	r3, #1
   1a8d6:	f63f af5a 	bhi.w	1a78e <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a8da:	2105      	movs	r1, #5
   1a8dc:	4630      	mov	r0, r6
   1a8de:	f009 f8fc 	bl	23ada <atomic_test_bit>
   1a8e2:	2800      	cmp	r0, #0
   1a8e4:	f040 80c4 	bne.w	1aa70 <smp_pairing_req+0x330>
	struct bt_conn *conn = smp->chan.chan.conn;
   1a8e8:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1a8ec:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1a8f0:	7a28      	ldrb	r0, [r5, #8]
   1a8f2:	f001 fabb 	bl	1be6c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1a8f6:	7a21      	ldrb	r1, [r4, #8]
   1a8f8:	b318      	cbz	r0, 1a942 <smp_pairing_req+0x202>
   1a8fa:	7b43      	ldrb	r3, [r0, #13]
   1a8fc:	07db      	lsls	r3, r3, #31
   1a8fe:	d520      	bpl.n	1a942 <smp_pairing_req+0x202>
   1a900:	b9f9      	cbnz	r1, 1a942 <smp_pairing_req+0x202>
   1a902:	4b55      	ldr	r3, [pc, #340]	; (1aa58 <smp_pairing_req+0x318>)
   1a904:	4955      	ldr	r1, [pc, #340]	; (1aa5c <smp_pairing_req+0x31c>)
		BT_ERR("JustWorks failed, authenticated keys present");
   1a906:	4856      	ldr	r0, [pc, #344]	; (1aa60 <smp_pairing_req+0x320>)
   1a908:	1ac9      	subs	r1, r1, r3
   1a90a:	08c9      	lsrs	r1, r1, #3
   1a90c:	0189      	lsls	r1, r1, #6
   1a90e:	f041 0101 	orr.w	r1, r1, #1
   1a912:	f005 fbfb 	bl	2010c <log_0>
	if (ret) {
   1a916:	e73a      	b.n	1a78e <smp_pairing_req+0x4e>
	switch (sec) {
   1a918:	2b04      	cmp	r3, #4
   1a91a:	f47f af38 	bne.w	1a78e <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1a91e:	7d23      	ldrb	r3, [r4, #20]
   1a920:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1a922:	4293      	cmp	r3, r2
   1a924:	bf28      	it	cs
   1a926:	4613      	movcs	r3, r2
   1a928:	2b10      	cmp	r3, #16
   1a92a:	f47f af11 	bne.w	1a750 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a92e:	2105      	movs	r1, #5
   1a930:	4630      	mov	r0, r6
   1a932:	f009 f8d2 	bl	23ada <atomic_test_bit>
   1a936:	2800      	cmp	r0, #0
   1a938:	d0a4      	beq.n	1a884 <smp_pairing_req+0x144>
		if (smp->method == JUST_WORKS) {
   1a93a:	7a23      	ldrb	r3, [r4, #8]
   1a93c:	2b00      	cmp	r3, #0
   1a93e:	d1cc      	bne.n	1a8da <smp_pairing_req+0x19a>
   1a940:	e7a0      	b.n	1a884 <smp_pairing_req+0x144>
	switch (smp->method) {
   1a942:	2906      	cmp	r1, #6
   1a944:	d869      	bhi.n	1aa1a <smp_pairing_req+0x2da>
   1a946:	e8df f001 	tbb	[pc, r1]
   1a94a:	5e1b      	.short	0x5e1b
   1a94c:	68686833 	.word	0x68686833
   1a950:	04          	.byte	0x04
   1a951:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1a952:	4d44      	ldr	r5, [pc, #272]	; (1aa64 <smp_pairing_req+0x324>)
   1a954:	682b      	ldr	r3, [r5, #0]
   1a956:	2b00      	cmp	r3, #0
   1a958:	d06a      	beq.n	1aa30 <smp_pairing_req+0x2f0>
   1a95a:	68db      	ldr	r3, [r3, #12]
   1a95c:	2b00      	cmp	r3, #0
   1a95e:	d067      	beq.n	1aa30 <smp_pairing_req+0x2f0>
			struct bt_conn_oob_info info = {
   1a960:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a962:	210a      	movs	r1, #10
   1a964:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1a966:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a96a:	f009 f8a2 	bl	23ab2 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1a96e:	682b      	ldr	r3, [r5, #0]
   1a970:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1a974:	68db      	ldr	r3, [r3, #12]
   1a976:	a901      	add	r1, sp, #4
   1a978:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a97a:	7a23      	ldrb	r3, [r4, #8]
   1a97c:	2b00      	cmp	r3, #0
   1a97e:	d159      	bne.n	1aa34 <smp_pairing_req+0x2f4>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a980:	210f      	movs	r1, #15
   1a982:	4630      	mov	r0, r6
   1a984:	f009 f8a9 	bl	23ada <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a988:	4605      	mov	r5, r0
   1a98a:	2800      	cmp	r0, #0
   1a98c:	d152      	bne.n	1aa34 <smp_pairing_req+0x2f4>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a98e:	4f35      	ldr	r7, [pc, #212]	; (1aa64 <smp_pairing_req+0x324>)
   1a990:	683b      	ldr	r3, [r7, #0]
   1a992:	2b00      	cmp	r3, #0
   1a994:	d04e      	beq.n	1aa34 <smp_pairing_req+0x2f4>
	    bt_auth && bt_auth->pairing_confirm) {
   1a996:	695b      	ldr	r3, [r3, #20]
   1a998:	2b00      	cmp	r3, #0
   1a99a:	d04b      	beq.n	1aa34 <smp_pairing_req+0x2f4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a99c:	4630      	mov	r0, r6
   1a99e:	210a      	movs	r1, #10
   1a9a0:	f009 f887 	bl	23ab2 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1a9a4:	683b      	ldr	r3, [r7, #0]
   1a9a6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1a9aa:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   1a9ac:	4798      	blx	r3
		return 0;
   1a9ae:	e6d0      	b.n	1a752 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1a9b0:	2104      	movs	r1, #4
   1a9b2:	eb0d 0001 	add.w	r0, sp, r1
   1a9b6:	f002 fe87 	bl	1d6c8 <bt_rand>
   1a9ba:	2800      	cmp	r0, #0
   1a9bc:	f47f aee7 	bne.w	1a78e <smp_pairing_req+0x4e>
			passkey %= 1000000;
   1a9c0:	9901      	ldr	r1, [sp, #4]
   1a9c2:	4a29      	ldr	r2, [pc, #164]	; (1aa68 <smp_pairing_req+0x328>)
		if (bt_auth && bt_auth->passkey_display) {
   1a9c4:	4f27      	ldr	r7, [pc, #156]	; (1aa64 <smp_pairing_req+0x324>)
			passkey %= 1000000;
   1a9c6:	fbb1 f3f2 	udiv	r3, r1, r2
   1a9ca:	fb02 1313 	mls	r3, r2, r3, r1
   1a9ce:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1a9d0:	683b      	ldr	r3, [r7, #0]
   1a9d2:	b153      	cbz	r3, 1a9ea <smp_pairing_req+0x2aa>
   1a9d4:	681b      	ldr	r3, [r3, #0]
   1a9d6:	b143      	cbz	r3, 1a9ea <smp_pairing_req+0x2aa>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a9d8:	210b      	movs	r1, #11
   1a9da:	4630      	mov	r0, r6
   1a9dc:	f009 f869 	bl	23ab2 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1a9e0:	683b      	ldr	r3, [r7, #0]
   1a9e2:	9901      	ldr	r1, [sp, #4]
   1a9e4:	681b      	ldr	r3, [r3, #0]
   1a9e6:	4628      	mov	r0, r5
   1a9e8:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1a9ea:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1a9ec:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1a9f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1a9f4:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1a9f6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1a9fa:	0a1b      	lsrs	r3, r3, #8
   1a9fc:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1aa00:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1aa04:	e7b9      	b.n	1a97a <smp_pairing_req+0x23a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1aa06:	4630      	mov	r0, r6
   1aa08:	210a      	movs	r1, #10
   1aa0a:	f009 f852 	bl	23ab2 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1aa0e:	4b15      	ldr	r3, [pc, #84]	; (1aa64 <smp_pairing_req+0x324>)
   1aa10:	681b      	ldr	r3, [r3, #0]
   1aa12:	4628      	mov	r0, r5
   1aa14:	685b      	ldr	r3, [r3, #4]
   1aa16:	4798      	blx	r3
	if (ret) {
   1aa18:	e7af      	b.n	1a97a <smp_pairing_req+0x23a>
   1aa1a:	4b0f      	ldr	r3, [pc, #60]	; (1aa58 <smp_pairing_req+0x318>)
   1aa1c:	4a0f      	ldr	r2, [pc, #60]	; (1aa5c <smp_pairing_req+0x31c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1aa1e:	4813      	ldr	r0, [pc, #76]	; (1aa6c <smp_pairing_req+0x32c>)
   1aa20:	1ad2      	subs	r2, r2, r3
   1aa22:	08d2      	lsrs	r2, r2, #3
   1aa24:	0192      	lsls	r2, r2, #6
   1aa26:	f042 0201 	orr.w	r2, r2, #1
   1aa2a:	f005 fb7c 	bl	20126 <log_1>
	if (ret) {
   1aa2e:	e6ae      	b.n	1a78e <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1aa30:	2502      	movs	r5, #2
   1aa32:	e68e      	b.n	1a752 <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1aa34:	2103      	movs	r1, #3
   1aa36:	4620      	mov	r0, r4
   1aa38:	f009 f83b 	bl	23ab2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1aa3c:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1aa3e:	4620      	mov	r0, r4
   1aa40:	f009 f837 	bl	23ab2 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1aa44:	f009 f8f3 	bl	23c2e <send_pairing_rsp>
   1aa48:	4605      	mov	r5, r0
   1aa4a:	e682      	b.n	1a752 <smp_pairing_req+0x12>
   1aa4c:	2000349c 	.word	0x2000349c
   1aa50:	00028380 	.word	0x00028380
   1aa54:	00028399 	.word	0x00028399
   1aa58:	000256c4 	.word	0x000256c4
   1aa5c:	0002573c 	.word	0x0002573c
   1aa60:	00028097 	.word	0x00028097
   1aa64:	20002ed4 	.word	0x20002ed4
   1aa68:	000f4240 	.word	0x000f4240
   1aa6c:	000280c4 	.word	0x000280c4
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1aa70:	7a25      	ldrb	r5, [r4, #8]
   1aa72:	b9a5      	cbnz	r5, 1aa9e <smp_pairing_req+0x35e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1aa74:	210f      	movs	r1, #15
   1aa76:	4630      	mov	r0, r6
   1aa78:	f009 f82f 	bl	23ada <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1aa7c:	b978      	cbnz	r0, 1aa9e <smp_pairing_req+0x35e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1aa7e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1aaa4 <smp_pairing_req+0x364>
   1aa82:	f8d8 3000 	ldr.w	r3, [r8]
   1aa86:	b153      	cbz	r3, 1aa9e <smp_pairing_req+0x35e>
	    bt_auth && bt_auth->pairing_confirm) {
   1aa88:	695b      	ldr	r3, [r3, #20]
   1aa8a:	b143      	cbz	r3, 1aa9e <smp_pairing_req+0x35e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1aa8c:	4630      	mov	r0, r6
   1aa8e:	210a      	movs	r1, #10
   1aa90:	f009 f80f 	bl	23ab2 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   1aa94:	f8d8 3000 	ldr.w	r3, [r8]
   1aa98:	4638      	mov	r0, r7
   1aa9a:	695b      	ldr	r3, [r3, #20]
   1aa9c:	e786      	b.n	1a9ac <smp_pairing_req+0x26c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1aa9e:	210c      	movs	r1, #12
   1aaa0:	e7cd      	b.n	1aa3e <smp_pairing_req+0x2fe>
   1aaa2:	bf00      	nop
   1aaa4:	20002ed4 	.word	0x20002ed4

0001aaa8 <compute_and_check_and_send_slave_dhcheck>:
{
   1aaa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1aaac:	2210      	movs	r2, #16
{
   1aaae:	b0a3      	sub	sp, #140	; 0x8c
   1aab0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1aab2:	2100      	movs	r1, #0
   1aab4:	eb0d 0002 	add.w	r0, sp, r2
   1aab8:	f007 fbc1 	bl	2223e <memset>
	switch (smp->method) {
   1aabc:	7a21      	ldrb	r1, [r4, #8]
   1aabe:	2905      	cmp	r1, #5
   1aac0:	f200 8099 	bhi.w	1abf6 <compute_and_check_and_send_slave_dhcheck+0x14e>
   1aac4:	e8df f001 	tbb	[pc, r1]
   1aac8:	09030309 	.word	0x09030309
   1aacc:	8e97      	.short	0x8e97
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1aace:	2204      	movs	r2, #4
   1aad0:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1aad4:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1aad6:	f007 fb87 	bl	221e8 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1aada:	4b79      	ldr	r3, [pc, #484]	; (1acc0 <compute_and_check_and_send_slave_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
   1aadc:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1aae0:	aa14      	add	r2, sp, #80	; 0x50
   1aae2:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1aae6:	6818      	ldr	r0, [r3, #0]
   1aae8:	6859      	ldr	r1, [r3, #4]
   1aaea:	4615      	mov	r5, r2
   1aaec:	c503      	stmia	r5!, {r0, r1}
   1aaee:	3308      	adds	r3, #8
   1aaf0:	42b3      	cmp	r3, r6
   1aaf2:	462a      	mov	r2, r5
   1aaf4:	d1f7      	bne.n	1aae6 <compute_and_check_and_send_slave_dhcheck+0x3e>
   1aaf6:	6818      	ldr	r0, [r3, #0]
   1aaf8:	791b      	ldrb	r3, [r3, #4]
   1aafa:	6028      	str	r0, [r5, #0]
   1aafc:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1aafe:	ad0c      	add	r5, sp, #48	; 0x30
   1ab00:	2220      	movs	r2, #32
   1ab02:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1ab06:	4628      	mov	r0, r5
   1ab08:	f008 ffc7 	bl	23a9a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1ab0c:	486d      	ldr	r0, [pc, #436]	; (1acc4 <compute_and_check_and_send_slave_dhcheck+0x21c>)
   1ab0e:	ab08      	add	r3, sp, #32
   1ab10:	2220      	movs	r2, #32
   1ab12:	4629      	mov	r1, r5
   1ab14:	f008 fff9 	bl	23b0a <bt_smp_aes_cmac>
	if (err) {
   1ab18:	2800      	cmp	r0, #0
   1ab1a:	f040 80c7 	bne.w	1acac <compute_and_check_and_send_slave_dhcheck+0x204>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1ab1e:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1ab22:	2210      	movs	r2, #16
   1ab24:	4639      	mov	r1, r7
   1ab26:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1ab2a:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1ab2e:	f008 ffb4 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1ab32:	2210      	movs	r2, #16
   1ab34:	4641      	mov	r1, r8
   1ab36:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1ab3a:	f008 ffae 	bl	23a9a <sys_memcpy_swap>
	m[37] = a1->type;
   1ab3e:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   1ab42:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1ab46:	2206      	movs	r2, #6
   1ab48:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1ab4c:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1ab50:	f008 ffa3 	bl	23a9a <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1ab54:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1ab58:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   1ab5c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1ab60:	2206      	movs	r2, #6
   1ab62:	f109 0197 	add.w	r1, r9, #151	; 0x97
   1ab66:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1ab6a:	f008 ff96 	bl	23a9a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1ab6e:	4633      	mov	r3, r6
   1ab70:	2235      	movs	r2, #53	; 0x35
   1ab72:	a914      	add	r1, sp, #80	; 0x50
   1ab74:	a808      	add	r0, sp, #32
   1ab76:	f008 ffc8 	bl	23b0a <bt_smp_aes_cmac>
	if (err) {
   1ab7a:	2800      	cmp	r0, #0
   1ab7c:	f040 8096 	bne.w	1acac <compute_and_check_and_send_slave_dhcheck+0x204>
	sys_mem_swap(mackey, 16);
   1ab80:	4630      	mov	r0, r6
   1ab82:	f009 f86f 	bl	23c64 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1ab86:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   1ab8a:	2301      	movs	r3, #1
   1ab8c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1ab90:	2235      	movs	r2, #53	; 0x35
   1ab92:	464b      	mov	r3, r9
   1ab94:	a914      	add	r1, sp, #80	; 0x50
   1ab96:	a808      	add	r0, sp, #32
   1ab98:	f008 ffb7 	bl	23b0a <bt_smp_aes_cmac>
	if (err) {
   1ab9c:	2800      	cmp	r0, #0
   1ab9e:	f040 8085 	bne.w	1acac <compute_and_check_and_send_slave_dhcheck+0x204>
	sys_mem_swap(ltk, 16);
   1aba2:	4648      	mov	r0, r9
   1aba4:	f009 f85e 	bl	23c64 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1aba8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1abac:	aa14      	add	r2, sp, #80	; 0x50
   1abae:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1abb0:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   1abb4:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1abb6:	9301      	str	r3, [sp, #4]
   1abb8:	f104 0311 	add.w	r3, r4, #17
   1abbc:	9202      	str	r2, [sp, #8]
   1abbe:	9300      	str	r3, [sp, #0]
   1abc0:	463a      	mov	r2, r7
   1abc2:	ab04      	add	r3, sp, #16
   1abc4:	4641      	mov	r1, r8
   1abc6:	4630      	mov	r0, r6
   1abc8:	f009 f85a 	bl	23c80 <smp_f6>
   1abcc:	b1f8      	cbz	r0, 1ac0e <compute_and_check_and_send_slave_dhcheck+0x166>
   1abce:	493e      	ldr	r1, [pc, #248]	; (1acc8 <compute_and_check_and_send_slave_dhcheck+0x220>)
   1abd0:	4b3e      	ldr	r3, [pc, #248]	; (1accc <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate local DHKey check failed");
   1abd2:	483f      	ldr	r0, [pc, #252]	; (1acd0 <compute_and_check_and_send_slave_dhcheck+0x228>)
   1abd4:	1ac9      	subs	r1, r1, r3
   1abd6:	08c9      	lsrs	r1, r1, #3
   1abd8:	0189      	lsls	r1, r1, #6
   1abda:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   1abde:	f005 fa95 	bl	2010c <log_0>
   1abe2:	e012      	b.n	1ac0a <compute_and_check_and_send_slave_dhcheck+0x162>
		if (smp->oobd_remote) {
   1abe4:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1abe8:	2900      	cmp	r1, #0
   1abea:	f43f af76 	beq.w	1aada <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1abee:	2210      	movs	r2, #16
   1abf0:	eb0d 0002 	add.w	r0, sp, r2
   1abf4:	e76f      	b.n	1aad6 <compute_and_check_and_send_slave_dhcheck+0x2e>
   1abf6:	4a34      	ldr	r2, [pc, #208]	; (1acc8 <compute_and_check_and_send_slave_dhcheck+0x220>)
   1abf8:	4b34      	ldr	r3, [pc, #208]	; (1accc <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1abfa:	4836      	ldr	r0, [pc, #216]	; (1acd4 <compute_and_check_and_send_slave_dhcheck+0x22c>)
   1abfc:	1ad2      	subs	r2, r2, r3
   1abfe:	08d2      	lsrs	r2, r2, #3
   1ac00:	0192      	lsls	r2, r2, #6
   1ac02:	f042 0201 	orr.w	r2, r2, #1
   1ac06:	f005 fa8e 	bl	20126 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1ac0a:	2008      	movs	r0, #8
   1ac0c:	e049      	b.n	1aca2 <compute_and_check_and_send_slave_dhcheck+0x1fa>
	if (smp->method == LE_SC_OOB) {
   1ac0e:	7a23      	ldrb	r3, [r4, #8]
   1ac10:	2b05      	cmp	r3, #5
   1ac12:	d107      	bne.n	1ac24 <compute_and_check_and_send_slave_dhcheck+0x17c>
		if (smp->oobd_local) {
   1ac14:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1ac18:	2210      	movs	r2, #16
   1ac1a:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   1ac1e:	b1e1      	cbz	r1, 1ac5a <compute_and_check_and_send_slave_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1ac20:	f007 fae2 	bl	221e8 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1ac24:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ac28:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1ac2a:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1ac2e:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ac30:	9301      	str	r3, [sp, #4]
   1ac32:	f104 030a 	add.w	r3, r4, #10
   1ac36:	9202      	str	r2, [sp, #8]
   1ac38:	9300      	str	r3, [sp, #0]
   1ac3a:	4642      	mov	r2, r8
   1ac3c:	ab04      	add	r3, sp, #16
   1ac3e:	4639      	mov	r1, r7
   1ac40:	4630      	mov	r0, r6
   1ac42:	f009 f81d 	bl	23c80 <smp_f6>
   1ac46:	b158      	cbz	r0, 1ac60 <compute_and_check_and_send_slave_dhcheck+0x1b8>
   1ac48:	491f      	ldr	r1, [pc, #124]	; (1acc8 <compute_and_check_and_send_slave_dhcheck+0x220>)
   1ac4a:	4b20      	ldr	r3, [pc, #128]	; (1accc <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate remote DHKey check failed");
   1ac4c:	4822      	ldr	r0, [pc, #136]	; (1acd8 <compute_and_check_and_send_slave_dhcheck+0x230>)
   1ac4e:	1ac9      	subs	r1, r1, r3
   1ac50:	08c9      	lsrs	r1, r1, #3
   1ac52:	0189      	lsls	r1, r1, #6
   1ac54:	f041 0101 	orr.w	r1, r1, #1
   1ac58:	e7c1      	b.n	1abde <compute_and_check_and_send_slave_dhcheck+0x136>
			memset(r, 0, sizeof(r));
   1ac5a:	f007 faf0 	bl	2223e <memset>
   1ac5e:	e7e1      	b.n	1ac24 <compute_and_check_and_send_slave_dhcheck+0x17c>
	if (memcmp(smp->e, re, 16)) {
   1ac60:	4629      	mov	r1, r5
   1ac62:	2210      	movs	r2, #16
   1ac64:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1ac68:	f007 faae 	bl	221c8 <memcmp>
   1ac6c:	4605      	mov	r5, r0
   1ac6e:	b9d8      	cbnz	r0, 1aca8 <compute_and_check_and_send_slave_dhcheck+0x200>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1ac70:	210d      	movs	r1, #13
   1ac72:	4620      	mov	r0, r4
   1ac74:	f008 ff86 	bl	23b84 <smp_create_pdu.isra.0>
	if (!buf) {
   1ac78:	4606      	mov	r6, r0
   1ac7a:	2800      	cmp	r0, #0
   1ac7c:	d0c5      	beq.n	1ac0a <compute_and_check_and_send_slave_dhcheck+0x162>
   1ac7e:	2110      	movs	r1, #16
   1ac80:	3008      	adds	r0, #8
   1ac82:	f009 fc14 	bl	244ae <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1ac86:	2210      	movs	r2, #16
   1ac88:	a914      	add	r1, sp, #80	; 0x50
   1ac8a:	f007 faad 	bl	221e8 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1ac8e:	462a      	mov	r2, r5
   1ac90:	4631      	mov	r1, r6
   1ac92:	4620      	mov	r0, r4
   1ac94:	f008 ff95 	bl	23bc2 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ac98:	1d20      	adds	r0, r4, #4
   1ac9a:	2101      	movs	r1, #1
   1ac9c:	f008 ff09 	bl	23ab2 <atomic_set_bit>
	return 0;
   1aca0:	4628      	mov	r0, r5
}
   1aca2:	b023      	add	sp, #140	; 0x8c
   1aca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1aca8:	200b      	movs	r0, #11
   1acaa:	e7fa      	b.n	1aca2 <compute_and_check_and_send_slave_dhcheck+0x1fa>
   1acac:	4906      	ldr	r1, [pc, #24]	; (1acc8 <compute_and_check_and_send_slave_dhcheck+0x220>)
   1acae:	4b07      	ldr	r3, [pc, #28]	; (1accc <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate LTK failed");
   1acb0:	480a      	ldr	r0, [pc, #40]	; (1acdc <compute_and_check_and_send_slave_dhcheck+0x234>)
   1acb2:	1ac9      	subs	r1, r1, r3
   1acb4:	08c9      	lsrs	r1, r1, #3
   1acb6:	0189      	lsls	r1, r1, #6
   1acb8:	f041 0101 	orr.w	r1, r1, #1
   1acbc:	e78f      	b.n	1abde <compute_and_check_and_send_slave_dhcheck+0x136>
   1acbe:	bf00      	nop
   1acc0:	000258b3 	.word	0x000258b3
   1acc4:	000283b2 	.word	0x000283b2
   1acc8:	0002573c 	.word	0x0002573c
   1accc:	000256c4 	.word	0x000256c4
   1acd0:	000280e0 	.word	0x000280e0
   1acd4:	000280c4 	.word	0x000280c4
   1acd8:	00028103 	.word	0x00028103
   1acdc:	00028127 	.word	0x00028127

0001ace0 <smp_send_pairing_confirm>:
{
   1ace0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1ace2:	7a04      	ldrb	r4, [r0, #8]
   1ace4:	2c02      	cmp	r4, #2
{
   1ace6:	4605      	mov	r5, r0
	switch (smp->method) {
   1ace8:	d824      	bhi.n	1ad34 <smp_send_pairing_confirm+0x54>
   1acea:	b14c      	cbz	r4, 1ad00 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1acec:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1acf0:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1acf4:	40dc      	lsrs	r4, r3
   1acf6:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1acfa:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1acfe:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1ad00:	2103      	movs	r1, #3
   1ad02:	4628      	mov	r0, r5
   1ad04:	f008 ff3e 	bl	23b84 <smp_create_pdu.isra.0>
	if (!buf) {
   1ad08:	4606      	mov	r6, r0
   1ad0a:	b300      	cbz	r0, 1ad4e <smp_send_pairing_confirm+0x6e>
   1ad0c:	2110      	movs	r1, #16
   1ad0e:	3008      	adds	r0, #8
   1ad10:	f009 fbcd 	bl	244ae <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1ad14:	9000      	str	r0, [sp, #0]
   1ad16:	4816      	ldr	r0, [pc, #88]	; (1ad70 <smp_send_pairing_confirm+0x90>)
   1ad18:	4623      	mov	r3, r4
   1ad1a:	6800      	ldr	r0, [r0, #0]
   1ad1c:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1ad20:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1ad24:	f009 f821 	bl	23d6a <smp_f4>
   1ad28:	4604      	mov	r4, r0
   1ad2a:	b1a0      	cbz	r0, 1ad56 <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   1ad2c:	4630      	mov	r0, r6
   1ad2e:	f001 fa65 	bl	1c1fc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1ad32:	e00c      	b.n	1ad4e <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1ad34:	2c03      	cmp	r4, #3
   1ad36:	d00c      	beq.n	1ad52 <smp_send_pairing_confirm+0x72>
   1ad38:	4a0e      	ldr	r2, [pc, #56]	; (1ad74 <smp_send_pairing_confirm+0x94>)
   1ad3a:	4b0f      	ldr	r3, [pc, #60]	; (1ad78 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ad3c:	480f      	ldr	r0, [pc, #60]	; (1ad7c <smp_send_pairing_confirm+0x9c>)
   1ad3e:	1ad2      	subs	r2, r2, r3
   1ad40:	08d2      	lsrs	r2, r2, #3
   1ad42:	0192      	lsls	r2, r2, #6
   1ad44:	f042 0201 	orr.w	r2, r2, #1
   1ad48:	4621      	mov	r1, r4
   1ad4a:	f005 f9ec 	bl	20126 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1ad4e:	2008      	movs	r0, #8
   1ad50:	e00b      	b.n	1ad6a <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   1ad52:	2400      	movs	r4, #0
   1ad54:	e7d4      	b.n	1ad00 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   1ad56:	4602      	mov	r2, r0
   1ad58:	4631      	mov	r1, r6
   1ad5a:	4628      	mov	r0, r5
   1ad5c:	f008 ff31 	bl	23bc2 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ad60:	1d28      	adds	r0, r5, #4
   1ad62:	4621      	mov	r1, r4
   1ad64:	f008 fec2 	bl	23aec <atomic_clear_bit>
	return 0;
   1ad68:	4620      	mov	r0, r4
}
   1ad6a:	b002      	add	sp, #8
   1ad6c:	bd70      	pop	{r4, r5, r6, pc}
   1ad6e:	bf00      	nop
   1ad70:	20003008 	.word	0x20003008
   1ad74:	0002573c 	.word	0x0002573c
   1ad78:	000256c4 	.word	0x000256c4
   1ad7c:	000280c4 	.word	0x000280c4

0001ad80 <smp_public_key_slave>:
{
   1ad80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ad84:	1d06      	adds	r6, r0, #4
{
   1ad86:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ad88:	210e      	movs	r1, #14
   1ad8a:	4630      	mov	r0, r6
   1ad8c:	f008 fea5 	bl	23ada <atomic_test_bit>
   1ad90:	b998      	cbnz	r0, 1adba <smp_public_key_slave+0x3a>
	    memcmp(smp->pkey, sc_public_key, 32) == 0) {
   1ad92:	4b4e      	ldr	r3, [pc, #312]	; (1aecc <smp_public_key_slave+0x14c>)
   1ad94:	2220      	movs	r2, #32
   1ad96:	6819      	ldr	r1, [r3, #0]
   1ad98:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ad9c:	f007 fa14 	bl	221c8 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ada0:	b958      	cbnz	r0, 1adba <smp_public_key_slave+0x3a>
   1ada2:	494b      	ldr	r1, [pc, #300]	; (1aed0 <smp_public_key_slave+0x150>)
   1ada4:	4b4b      	ldr	r3, [pc, #300]	; (1aed4 <smp_public_key_slave+0x154>)
		BT_WARN("Remote public key rejected");
   1ada6:	484c      	ldr	r0, [pc, #304]	; (1aed8 <smp_public_key_slave+0x158>)
   1ada8:	1ac9      	subs	r1, r1, r3
   1adaa:	08c9      	lsrs	r1, r1, #3
   1adac:	0189      	lsls	r1, r1, #6
   1adae:	f041 0102 	orr.w	r1, r1, #2
   1adb2:	f005 f9ab 	bl	2010c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1adb6:	2008      	movs	r0, #8
   1adb8:	e02e      	b.n	1ae18 <smp_public_key_slave+0x98>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1adba:	210c      	movs	r1, #12
   1adbc:	4620      	mov	r0, r4
   1adbe:	f008 fee1 	bl	23b84 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1adc2:	4605      	mov	r5, r0
   1adc4:	2800      	cmp	r0, #0
   1adc6:	d0f6      	beq.n	1adb6 <smp_public_key_slave+0x36>
   1adc8:	2140      	movs	r1, #64	; 0x40
   1adca:	3008      	adds	r0, #8
   1adcc:	f009 fb6f 	bl	244ae <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1add0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1aecc <smp_public_key_slave+0x14c>
   1add4:	2220      	movs	r2, #32
   1add6:	f8d8 1000 	ldr.w	r1, [r8]
   1adda:	4607      	mov	r7, r0
   1addc:	f007 fa04 	bl	221e8 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1ade0:	f8d8 1000 	ldr.w	r1, [r8]
   1ade4:	2220      	movs	r2, #32
   1ade6:	4411      	add	r1, r2
   1ade8:	18b8      	adds	r0, r7, r2
   1adea:	f007 f9fd 	bl	221e8 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1adee:	4629      	mov	r1, r5
   1adf0:	2200      	movs	r2, #0
   1adf2:	4620      	mov	r0, r4
   1adf4:	f008 fee5 	bl	23bc2 <smp_send.isra.0>
	switch (smp->method) {
   1adf8:	7a21      	ldrb	r1, [r4, #8]
   1adfa:	2905      	cmp	r1, #5
   1adfc:	d859      	bhi.n	1aeb2 <smp_public_key_slave+0x132>
   1adfe:	e8df f001 	tbb	[pc, r1]
   1ae02:	3803      	.short	0x3803
   1ae04:	5658030d 	.word	0x5658030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ae08:	2104      	movs	r1, #4
   1ae0a:	4620      	mov	r0, r4
   1ae0c:	f008 fe51 	bl	23ab2 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1ae10:	f7ff ff66 	bl	1ace0 <smp_send_pairing_confirm>
		if (err) {
   1ae14:	2800      	cmp	r0, #0
   1ae16:	d03d      	beq.n	1ae94 <smp_public_key_slave+0x114>
}
   1ae18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ae1c:	2104      	movs	r1, #4
   1ae1e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1ae22:	f002 fc51 	bl	1d6c8 <bt_rand>
   1ae26:	2800      	cmp	r0, #0
   1ae28:	d1c5      	bne.n	1adb6 <smp_public_key_slave+0x36>
		smp->passkey %= 1000000;
   1ae2a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ae2e:	4a2b      	ldr	r2, [pc, #172]	; (1aedc <smp_public_key_slave+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
   1ae30:	4d2b      	ldr	r5, [pc, #172]	; (1aee0 <smp_public_key_slave+0x160>)
		smp->passkey %= 1000000;
   1ae32:	fbb1 f3f2 	udiv	r3, r1, r2
   1ae36:	fb02 1313 	mls	r3, r2, r3, r1
   1ae3a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   1ae3e:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   1ae40:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1ae44:	b163      	cbz	r3, 1ae60 <smp_public_key_slave+0xe0>
   1ae46:	681b      	ldr	r3, [r3, #0]
   1ae48:	b153      	cbz	r3, 1ae60 <smp_public_key_slave+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ae4a:	210b      	movs	r1, #11
   1ae4c:	4630      	mov	r0, r6
   1ae4e:	f008 fe30 	bl	23ab2 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1ae52:	682b      	ldr	r3, [r5, #0]
   1ae54:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ae58:	681b      	ldr	r3, [r3, #0]
   1ae5a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1ae5e:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ae60:	2103      	movs	r1, #3
   1ae62:	4620      	mov	r0, r4
   1ae64:	f008 fe25 	bl	23ab2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ae68:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ae6a:	4620      	mov	r0, r4
   1ae6c:	f008 fe21 	bl	23ab2 <atomic_set_bit>
		break;
   1ae70:	e010      	b.n	1ae94 <smp_public_key_slave+0x114>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ae72:	4620      	mov	r0, r4
   1ae74:	2103      	movs	r1, #3
   1ae76:	f008 fe1c 	bl	23ab2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ae7a:	210e      	movs	r1, #14
   1ae7c:	f008 fe19 	bl	23ab2 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ae80:	4630      	mov	r0, r6
   1ae82:	210a      	movs	r1, #10
   1ae84:	f008 fe15 	bl	23ab2 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1ae88:	4b15      	ldr	r3, [pc, #84]	; (1aee0 <smp_public_key_slave+0x160>)
   1ae8a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1ae8e:	681b      	ldr	r3, [r3, #0]
   1ae90:	685b      	ldr	r3, [r3, #4]
   1ae92:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1ae94:	4630      	mov	r0, r6
   1ae96:	2107      	movs	r1, #7
   1ae98:	f008 fe0b 	bl	23ab2 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1ae9c:	2008      	movs	r0, #8
   1ae9e:	f7ff fb1f 	bl	1a4e0 <smp_find>
   1aea2:	b988      	cbnz	r0, 1aec8 <smp_public_key_slave+0x148>
		return smp_dhkey_generate(smp);
   1aea4:	4620      	mov	r0, r4
}
   1aea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   1aeaa:	f7ff bb2d 	b.w	1a508 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1aeae:	2104      	movs	r1, #4
   1aeb0:	e7db      	b.n	1ae6a <smp_public_key_slave+0xea>
   1aeb2:	4b08      	ldr	r3, [pc, #32]	; (1aed4 <smp_public_key_slave+0x154>)
   1aeb4:	4a06      	ldr	r2, [pc, #24]	; (1aed0 <smp_public_key_slave+0x150>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1aeb6:	480b      	ldr	r0, [pc, #44]	; (1aee4 <smp_public_key_slave+0x164>)
   1aeb8:	1ad2      	subs	r2, r2, r3
   1aeba:	08d2      	lsrs	r2, r2, #3
   1aebc:	0192      	lsls	r2, r2, #6
   1aebe:	f042 0201 	orr.w	r2, r2, #1
   1aec2:	f005 f930 	bl	20126 <log_1>
   1aec6:	e776      	b.n	1adb6 <smp_public_key_slave+0x36>
	return 0;
   1aec8:	2000      	movs	r0, #0
   1aeca:	e7a5      	b.n	1ae18 <smp_public_key_slave+0x98>
   1aecc:	20003008 	.word	0x20003008
   1aed0:	0002573c 	.word	0x0002573c
   1aed4:	000256c4 	.word	0x000256c4
   1aed8:	0002813c 	.word	0x0002813c
   1aedc:	000f4240 	.word	0x000f4240
   1aee0:	20002ed4 	.word	0x20002ed4
   1aee4:	000280c4 	.word	0x000280c4

0001aee8 <smp_public_key>:
{
   1aee8:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1aeea:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   1aeec:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   1aef0:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
   1aef2:	2220      	movs	r2, #32
   1aef4:	4631      	mov	r1, r6
   1aef6:	4628      	mov	r0, r5
   1aef8:	f007 f976 	bl	221e8 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   1aefc:	2220      	movs	r2, #32
   1aefe:	18b1      	adds	r1, r6, r2
   1af00:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1af04:	f007 f970 	bl	221e8 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1af08:	4628      	mov	r0, r5
   1af0a:	f7fb ffb9 	bl	16e80 <bt_pub_key_is_debug>
   1af0e:	b940      	cbnz	r0, 1af22 <smp_public_key+0x3a>
	if (!sc_public_key) {
   1af10:	4b1a      	ldr	r3, [pc, #104]	; (1af7c <smp_public_key+0x94>)
   1af12:	681d      	ldr	r5, [r3, #0]
   1af14:	bb6d      	cbnz	r5, 1af72 <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1af16:	1d20      	adds	r0, r4, #4
   1af18:	2106      	movs	r1, #6
   1af1a:	f008 fdca 	bl	23ab2 <atomic_set_bit>
		return 0;
   1af1e:	4628      	mov	r0, r5
   1af20:	e026      	b.n	1af70 <smp_public_key+0x88>
   1af22:	4b17      	ldr	r3, [pc, #92]	; (1af80 <smp_public_key+0x98>)
   1af24:	4917      	ldr	r1, [pc, #92]	; (1af84 <smp_public_key+0x9c>)
		BT_INFO("Remote is using Debug Public key");
   1af26:	4818      	ldr	r0, [pc, #96]	; (1af88 <smp_public_key+0xa0>)
   1af28:	1ac9      	subs	r1, r1, r3
   1af2a:	08c9      	lsrs	r1, r1, #3
   1af2c:	0189      	lsls	r1, r1, #6
   1af2e:	f041 0103 	orr.w	r1, r1, #3
   1af32:	f005 f8eb 	bl	2010c <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1af36:	210e      	movs	r1, #14
   1af38:	1d20      	adds	r0, r4, #4
   1af3a:	f008 fdba 	bl	23ab2 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1af3e:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   1af42:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1af46:	b933      	cbnz	r3, 1af56 <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1af48:	7a28      	ldrb	r0, [r5, #8]
   1af4a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1af4e:	f000 fee7 	bl	1bd20 <bt_keys_get_addr>
   1af52:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1af56:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1af5a:	2b00      	cmp	r3, #0
   1af5c:	d0d8      	beq.n	1af10 <smp_public_key+0x28>
   1af5e:	89da      	ldrh	r2, [r3, #14]
   1af60:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1af64:	2a00      	cmp	r2, #0
   1af66:	d0d3      	beq.n	1af10 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1af68:	7b5b      	ldrb	r3, [r3, #13]
   1af6a:	079b      	lsls	r3, r3, #30
   1af6c:	d4d0      	bmi.n	1af10 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1af6e:	2003      	movs	r0, #3
}
   1af70:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
   1af72:	4620      	mov	r0, r4
}
   1af74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
   1af78:	f7ff bf02 	b.w	1ad80 <smp_public_key_slave>
   1af7c:	20003008 	.word	0x20003008
   1af80:	000256c4 	.word	0x000256c4
   1af84:	0002573c 	.word	0x0002573c
   1af88:	00028157 	.word	0x00028157

0001af8c <bt_smp_connected>:
{
   1af8c:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1af8e:	4905      	ldr	r1, [pc, #20]	; (1afa4 <bt_smp_connected+0x18>)
   1af90:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1af94:	30e8      	adds	r0, #232	; 0xe8
   1af96:	f009 feeb 	bl	24d70 <k_work_init_delayable>
	smp_reset(smp);
   1af9a:	4620      	mov	r0, r4
}
   1af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1afa0:	f008 bf22 	b.w	23de8 <smp_reset>
   1afa4:	0001bba1 	.word	0x0001bba1

0001afa8 <smp_pairing_confirm>:
{
   1afa8:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1afaa:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1afac:	1d05      	adds	r5, r0, #4
{
   1afae:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1afb0:	210b      	movs	r1, #11
   1afb2:	4628      	mov	r0, r5
   1afb4:	f008 fd9a 	bl	23aec <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1afb8:	4631      	mov	r1, r6
   1afba:	2210      	movs	r2, #16
   1afbc:	f104 0017 	add.w	r0, r4, #23
   1afc0:	f007 f912 	bl	221e8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1afc4:	2105      	movs	r1, #5
   1afc6:	4628      	mov	r0, r5
   1afc8:	f008 fd87 	bl	23ada <atomic_test_bit>
   1afcc:	b920      	cbnz	r0, 1afd8 <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1afce:	4620      	mov	r0, r4
}
   1afd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1afd4:	f008 bf86 	b.w	23ee4 <legacy_pairing_confirm>
	switch (smp->method) {
   1afd8:	7a21      	ldrb	r1, [r4, #8]
   1afda:	2901      	cmp	r1, #1
   1afdc:	d009      	beq.n	1aff2 <smp_pairing_confirm+0x4a>
   1afde:	2902      	cmp	r1, #2
   1afe0:	d113      	bne.n	1b00a <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1afe2:	4620      	mov	r0, r4
   1afe4:	2104      	movs	r1, #4
   1afe6:	f008 fd64 	bl	23ab2 <atomic_set_bit>
}
   1afea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1afee:	f7ff be77 	b.w	1ace0 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1aff2:	210a      	movs	r1, #10
   1aff4:	4628      	mov	r0, r5
   1aff6:	f008 fd70 	bl	23ada <atomic_test_bit>
   1affa:	2800      	cmp	r0, #0
   1affc:	d0f1      	beq.n	1afe2 <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1affe:	4628      	mov	r0, r5
   1b000:	2100      	movs	r1, #0
   1b002:	f008 fd56 	bl	23ab2 <atomic_set_bit>
			return 0;
   1b006:	2000      	movs	r0, #0
}
   1b008:	bd70      	pop	{r4, r5, r6, pc}
   1b00a:	4b06      	ldr	r3, [pc, #24]	; (1b024 <smp_pairing_confirm+0x7c>)
   1b00c:	4a06      	ldr	r2, [pc, #24]	; (1b028 <smp_pairing_confirm+0x80>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b00e:	4807      	ldr	r0, [pc, #28]	; (1b02c <smp_pairing_confirm+0x84>)
   1b010:	1ad2      	subs	r2, r2, r3
   1b012:	08d2      	lsrs	r2, r2, #3
   1b014:	0192      	lsls	r2, r2, #6
   1b016:	f042 0201 	orr.w	r2, r2, #1
   1b01a:	f005 f884 	bl	20126 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1b01e:	2008      	movs	r0, #8
   1b020:	e7f2      	b.n	1b008 <smp_pairing_confirm+0x60>
   1b022:	bf00      	nop
   1b024:	000256c4 	.word	0x000256c4
   1b028:	0002573c 	.word	0x0002573c
   1b02c:	000280c4 	.word	0x000280c4

0001b030 <smp_pairing_random>:
{
   1b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b034:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b036:	f100 0737 	add.w	r7, r0, #55	; 0x37
   1b03a:	6889      	ldr	r1, [r1, #8]
{
   1b03c:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b03e:	2210      	movs	r2, #16
   1b040:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b042:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b044:	f007 f8d0 	bl	221e8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b048:	2105      	movs	r1, #5
   1b04a:	4630      	mov	r0, r6
   1b04c:	f008 fd45 	bl	23ada <atomic_test_bit>
   1b050:	2800      	cmp	r0, #0
   1b052:	d147      	bne.n	1b0e4 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
   1b054:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b058:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1b05c:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b060:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1b062:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b064:	9201      	str	r2, [sp, #4]
   1b066:	9300      	str	r3, [sp, #0]
   1b068:	9502      	str	r5, [sp, #8]
   1b06a:	f104 0310 	add.w	r3, r4, #16
   1b06e:	f104 0209 	add.w	r2, r4, #9
   1b072:	4639      	mov	r1, r7
   1b074:	4640      	mov	r0, r8
   1b076:	f008 feda 	bl	23e2e <smp_c1>
	if (err) {
   1b07a:	bb18      	cbnz	r0, 1b0c4 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1b07c:	2210      	movs	r2, #16
   1b07e:	4629      	mov	r1, r5
   1b080:	f104 0017 	add.w	r0, r4, #23
   1b084:	f007 f8a0 	bl	221c8 <memcmp>
   1b088:	2800      	cmp	r0, #0
   1b08a:	f040 8095 	bne.w	1b1b8 <smp_pairing_random+0x188>
	memcpy(out, r2, 8);
   1b08e:	2208      	movs	r2, #8
   1b090:	4639      	mov	r1, r7
   1b092:	4628      	mov	r0, r5
   1b094:	f007 f8a8 	bl	221e8 <memcpy>
	memcpy(out + 8, r1, 8);
   1b098:	2208      	movs	r2, #8
   1b09a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1b09e:	a80c      	add	r0, sp, #48	; 0x30
   1b0a0:	f007 f8a2 	bl	221e8 <memcpy>
	return bt_encrypt_le(k, out, out);
   1b0a4:	462a      	mov	r2, r5
   1b0a6:	4629      	mov	r1, r5
   1b0a8:	4640      	mov	r0, r8
   1b0aa:	f009 fb4c 	bl	24746 <bt_encrypt_le>
		if (err) {
   1b0ae:	b158      	cbz	r0, 1b0c8 <smp_pairing_random+0x98>
   1b0b0:	4973      	ldr	r1, [pc, #460]	; (1b280 <smp_pairing_random+0x250>)
   1b0b2:	4b74      	ldr	r3, [pc, #464]	; (1b284 <smp_pairing_random+0x254>)
			BT_ERR("Calculate STK failed");
   1b0b4:	4874      	ldr	r0, [pc, #464]	; (1b288 <smp_pairing_random+0x258>)
   1b0b6:	1ac9      	subs	r1, r1, r3
   1b0b8:	08c9      	lsrs	r1, r1, #3
   1b0ba:	0189      	lsls	r1, r1, #6
   1b0bc:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   1b0c0:	f005 f824 	bl	2010c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1b0c4:	2508      	movs	r5, #8
   1b0c6:	e078      	b.n	1b1ba <smp_pairing_random+0x18a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1b0c8:	4629      	mov	r1, r5
   1b0ca:	2210      	movs	r2, #16
   1b0cc:	4640      	mov	r0, r8
   1b0ce:	f007 f88b 	bl	221e8 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b0d2:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1b0d4:	4630      	mov	r0, r6
   1b0d6:	f008 fcec 	bl	23ab2 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1b0da:	4620      	mov	r0, r4
   1b0dc:	f008 fd8e 	bl	23bfc <smp_send_pairing_random>
   1b0e0:	4605      	mov	r5, r0
   1b0e2:	e06a      	b.n	1b1ba <smp_pairing_random+0x18a>
	switch (smp->method) {
   1b0e4:	7a21      	ldrb	r1, [r4, #8]
   1b0e6:	2905      	cmp	r1, #5
   1b0e8:	f200 80a9 	bhi.w	1b23e <smp_pairing_random+0x20e>
   1b0ec:	e8df f001 	tbb	[pc, r1]
   1b0f0:	0341413b 	.word	0x0341413b
   1b0f4:	8ba7      	.short	0x8ba7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1b0f6:	4b65      	ldr	r3, [pc, #404]	; (1b28c <smp_pairing_random+0x25c>)
   1b0f8:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1b0fa:	2220      	movs	r2, #32
   1b0fc:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1b100:	a80a      	add	r0, sp, #40	; 0x28
   1b102:	f008 fcca 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1b106:	2220      	movs	r2, #32
   1b108:	4629      	mov	r1, r5
   1b10a:	a812      	add	r0, sp, #72	; 0x48
   1b10c:	f008 fcc5 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1b110:	2210      	movs	r2, #16
   1b112:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1b116:	a81a      	add	r0, sp, #104	; 0x68
   1b118:	f008 fcbf 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1b11c:	2210      	movs	r2, #16
   1b11e:	4639      	mov	r1, r7
   1b120:	a806      	add	r0, sp, #24
   1b122:	f008 fcba 	bl	23a9a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1b126:	ab06      	add	r3, sp, #24
   1b128:	2250      	movs	r2, #80	; 0x50
   1b12a:	a90a      	add	r1, sp, #40	; 0x28
   1b12c:	4618      	mov	r0, r3
   1b12e:	f008 fcec 	bl	23b0a <bt_smp_aes_cmac>
	if (err) {
   1b132:	2800      	cmp	r0, #0
   1b134:	d1c6      	bne.n	1b0c4 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
   1b136:	2204      	movs	r2, #4
   1b138:	a909      	add	r1, sp, #36	; 0x24
   1b13a:	a805      	add	r0, sp, #20
   1b13c:	f007 f854 	bl	221e8 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1b140:	9b05      	ldr	r3, [sp, #20]
   1b142:	4953      	ldr	r1, [pc, #332]	; (1b290 <smp_pairing_random+0x260>)
   1b144:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b146:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1b148:	fbb3 f2f1 	udiv	r2, r3, r1
   1b14c:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b150:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1b152:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b154:	f008 fcad 	bl	23ab2 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1b158:	4b4e      	ldr	r3, [pc, #312]	; (1b294 <smp_pairing_random+0x264>)
   1b15a:	9905      	ldr	r1, [sp, #20]
   1b15c:	681b      	ldr	r3, [r3, #0]
   1b15e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1b162:	689b      	ldr	r3, [r3, #8]
   1b164:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1b166:	210d      	movs	r1, #13
   1b168:	4620      	mov	r0, r4
   1b16a:	f008 fca2 	bl	23ab2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1b16e:	2110      	movs	r1, #16
   1b170:	e7b0      	b.n	1b0d4 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b172:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1b176:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b17a:	4944      	ldr	r1, [pc, #272]	; (1b28c <smp_pairing_random+0x25c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b17c:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b17e:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b180:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b184:	9500      	str	r5, [sp, #0]
   1b186:	6809      	ldr	r1, [r1, #0]
   1b188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b18c:	463a      	mov	r2, r7
   1b18e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b192:	f008 fdea 	bl	23d6a <smp_f4>
   1b196:	b140      	cbz	r0, 1b1aa <smp_pairing_random+0x17a>
   1b198:	4939      	ldr	r1, [pc, #228]	; (1b280 <smp_pairing_random+0x250>)
   1b19a:	4b3a      	ldr	r3, [pc, #232]	; (1b284 <smp_pairing_random+0x254>)
		BT_ERR("Calculate confirm failed");
   1b19c:	483e      	ldr	r0, [pc, #248]	; (1b298 <smp_pairing_random+0x268>)
   1b19e:	1ac9      	subs	r1, r1, r3
   1b1a0:	08c9      	lsrs	r1, r1, #3
   1b1a2:	0189      	lsls	r1, r1, #6
   1b1a4:	f041 0101 	orr.w	r1, r1, #1
   1b1a8:	e78a      	b.n	1b0c0 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1b1aa:	2210      	movs	r2, #16
   1b1ac:	4629      	mov	r1, r5
   1b1ae:	f104 0017 	add.w	r0, r4, #23
   1b1b2:	f007 f809 	bl	221c8 <memcmp>
   1b1b6:	b120      	cbz	r0, 1b1c2 <smp_pairing_random+0x192>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1b1b8:	2504      	movs	r5, #4
}
   1b1ba:	4628      	mov	r0, r5
   1b1bc:	b01e      	add	sp, #120	; 0x78
   1b1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   1b1c2:	2103      	movs	r1, #3
   1b1c4:	4620      	mov	r0, r4
   1b1c6:	f008 fc74 	bl	23ab2 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1b1ca:	f008 fd17 	bl	23bfc <smp_send_pairing_random>
		if (err) {
   1b1ce:	4605      	mov	r5, r0
   1b1d0:	2800      	cmp	r0, #0
   1b1d2:	d1f2      	bne.n	1b1ba <smp_pairing_random+0x18a>
		smp->passkey_round++;
   1b1d4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1b1d8:	3301      	adds	r3, #1
   1b1da:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1b1dc:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1b1de:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1b1e2:	d108      	bne.n	1b1f6 <smp_pairing_random+0x1c6>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1b1e4:	4620      	mov	r0, r4
   1b1e6:	210d      	movs	r1, #13
   1b1e8:	f008 fc63 	bl	23ab2 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1b1ec:	2110      	movs	r1, #16
   1b1ee:	4630      	mov	r0, r6
   1b1f0:	f008 fc5f 	bl	23ab2 <atomic_set_bit>
			return 0;
   1b1f4:	e7e1      	b.n	1b1ba <smp_pairing_random+0x18a>
		if (bt_rand(smp->prnd, 16)) {
   1b1f6:	2110      	movs	r1, #16
   1b1f8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b1fc:	f002 fa64 	bl	1d6c8 <bt_rand>
   1b200:	2800      	cmp	r0, #0
   1b202:	d0da      	beq.n	1b1ba <smp_pairing_random+0x18a>
   1b204:	e75e      	b.n	1b0c4 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
   1b206:	2110      	movs	r1, #16
   1b208:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b20c:	f002 fa5c 	bl	1d6c8 <bt_rand>
   1b210:	2800      	cmp	r0, #0
   1b212:	f47f af57 	bne.w	1b0c4 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
   1b216:	4f1f      	ldr	r7, [pc, #124]	; (1b294 <smp_pairing_random+0x264>)
   1b218:	683b      	ldr	r3, [r7, #0]
   1b21a:	b1db      	cbz	r3, 1b254 <smp_pairing_random+0x224>
   1b21c:	68db      	ldr	r3, [r3, #12]
   1b21e:	b1cb      	cbz	r3, 1b254 <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   1b220:	4b1e      	ldr	r3, [pc, #120]	; (1b29c <smp_pairing_random+0x26c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b222:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1b224:	881b      	ldrh	r3, [r3, #0]
   1b226:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b22a:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1b22c:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b22e:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1b232:	d411      	bmi.n	1b258 <smp_pairing_random+0x228>
				     BT_CONN_OOB_BOTH_PEERS :
   1b234:	2b00      	cmp	r3, #0
   1b236:	bf0c      	ite	eq
   1b238:	2003      	moveq	r0, #3
   1b23a:	2001      	movne	r0, #1
   1b23c:	e00f      	b.n	1b25e <smp_pairing_random+0x22e>
   1b23e:	4b11      	ldr	r3, [pc, #68]	; (1b284 <smp_pairing_random+0x254>)
   1b240:	4a0f      	ldr	r2, [pc, #60]	; (1b280 <smp_pairing_random+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b242:	4817      	ldr	r0, [pc, #92]	; (1b2a0 <smp_pairing_random+0x270>)
   1b244:	1ad2      	subs	r2, r2, r3
   1b246:	08d2      	lsrs	r2, r2, #3
   1b248:	0192      	lsls	r2, r2, #6
   1b24a:	f042 0201 	orr.w	r2, r2, #1
   1b24e:	f004 ff6a 	bl	20126 <log_1>
   1b252:	e737      	b.n	1b0c4 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b254:	2502      	movs	r5, #2
   1b256:	e7b0      	b.n	1b1ba <smp_pairing_random+0x18a>
				     BT_CONN_OOB_BOTH_PEERS :
   1b258:	2b00      	cmp	r3, #0
   1b25a:	bf18      	it	ne
   1b25c:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1b25e:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1b260:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   1b264:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1b268:	4630      	mov	r0, r6
   1b26a:	210c      	movs	r1, #12
   1b26c:	f008 fc21 	bl	23ab2 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1b270:	683b      	ldr	r3, [r7, #0]
   1b272:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1b276:	68db      	ldr	r3, [r3, #12]
   1b278:	a90a      	add	r1, sp, #40	; 0x28
   1b27a:	4798      	blx	r3
			return 0;
   1b27c:	e79d      	b.n	1b1ba <smp_pairing_random+0x18a>
   1b27e:	bf00      	nop
   1b280:	0002573c 	.word	0x0002573c
   1b284:	000256c4 	.word	0x000256c4
   1b288:	00028178 	.word	0x00028178
   1b28c:	20003008 	.word	0x20003008
   1b290:	000f4240 	.word	0x000f4240
   1b294:	20002ed4 	.word	0x20002ed4
   1b298:	0002818d 	.word	0x0002818d
   1b29c:	000258e8 	.word	0x000258e8
   1b2a0:	000280c4 	.word	0x000280c4

0001b2a4 <bt_smp_start_security>:
{
   1b2a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1b2a8:	78c4      	ldrb	r4, [r0, #3]
   1b2aa:	2c01      	cmp	r4, #1
{
   1b2ac:	4605      	mov	r5, r0
	switch (conn->role) {
   1b2ae:	d005      	beq.n	1b2bc <bt_smp_start_security+0x18>
		return -EINVAL;
   1b2b0:	f06f 0415 	mvn.w	r4, #21
}
   1b2b4:	4620      	mov	r0, r4
   1b2b6:	b003      	add	sp, #12
   1b2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1b2bc:	f7ff f9d8 	bl	1a670 <smp_chan_get>
	if (!smp) {
   1b2c0:	4606      	mov	r6, r0
   1b2c2:	2800      	cmp	r0, #0
   1b2c4:	f000 80a5 	beq.w	1b412 <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b2c8:	1d07      	adds	r7, r0, #4
   1b2ca:	2104      	movs	r1, #4
   1b2cc:	4638      	mov	r0, r7
   1b2ce:	f008 fc04 	bl	23ada <atomic_test_bit>
   1b2d2:	2800      	cmp	r0, #0
   1b2d4:	f040 80a0 	bne.w	1b418 <bt_smp_start_security+0x174>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b2d8:	2103      	movs	r1, #3
   1b2da:	4638      	mov	r0, r7
   1b2dc:	f008 fbfd 	bl	23ada <atomic_test_bit>
   1b2e0:	b110      	cbz	r0, 1b2e8 <bt_smp_start_security+0x44>
		return -EBUSY;
   1b2e2:	f06f 040f 	mvn.w	r4, #15
   1b2e6:	e7e5      	b.n	1b2b4 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b2e8:	4621      	mov	r1, r4
   1b2ea:	4638      	mov	r0, r7
   1b2ec:	f008 fbf5 	bl	23ada <atomic_test_bit>
   1b2f0:	2800      	cmp	r0, #0
   1b2f2:	d1f6      	bne.n	1b2e2 <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1b2f4:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1b2f6:	2b03      	cmp	r3, #3
   1b2f8:	d03d      	beq.n	1b376 <bt_smp_start_security+0xd2>
   1b2fa:	d82c      	bhi.n	1b356 <bt_smp_start_security+0xb2>
   1b2fc:	3b01      	subs	r3, #1
   1b2fe:	2b01      	cmp	r3, #1
   1b300:	d947      	bls.n	1b392 <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1b302:	210b      	movs	r1, #11
   1b304:	1d28      	adds	r0, r5, #4
   1b306:	f008 fbe8 	bl	23ada <atomic_test_bit>
   1b30a:	2800      	cmp	r0, #0
   1b30c:	d1d0      	bne.n	1b2b0 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1b30e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1b312:	b983      	cbnz	r3, 1b336 <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   1b314:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1b318:	7a29      	ldrb	r1, [r5, #8]
   1b31a:	4622      	mov	r2, r4
   1b31c:	2020      	movs	r0, #32
   1b31e:	f000 fd55 	bl	1bdcc <bt_keys_find>
   1b322:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1b326:	b930      	cbnz	r0, 1b336 <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1b328:	7a29      	ldrb	r1, [r5, #8]
   1b32a:	4622      	mov	r2, r4
   1b32c:	2004      	movs	r0, #4
   1b32e:	f000 fd4d 	bl	1bdcc <bt_keys_find>
   1b332:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1b336:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1b33a:	2b00      	cmp	r3, #0
   1b33c:	d0b8      	beq.n	1b2b0 <bt_smp_start_security+0xc>
   1b33e:	89da      	ldrh	r2, [r3, #14]
   1b340:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1b344:	2a00      	cmp	r2, #0
   1b346:	d0b3      	beq.n	1b2b0 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1b348:	7aaa      	ldrb	r2, [r5, #10]
   1b34a:	2a02      	cmp	r2, #2
   1b34c:	d921      	bls.n	1b392 <bt_smp_start_security+0xee>
   1b34e:	7b5b      	ldrb	r3, [r3, #13]
   1b350:	07db      	lsls	r3, r3, #31
   1b352:	d5ad      	bpl.n	1b2b0 <bt_smp_start_security+0xc>
   1b354:	e01d      	b.n	1b392 <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
   1b356:	2b04      	cmp	r3, #4
   1b358:	d1d3      	bne.n	1b302 <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b35a:	f7ff f89b 	bl	1a494 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1b35e:	2803      	cmp	r0, #3
   1b360:	d104      	bne.n	1b36c <bt_smp_start_security+0xc8>
   1b362:	4b2f      	ldr	r3, [pc, #188]	; (1b420 <bt_smp_start_security+0x17c>)
   1b364:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b366:	b1fb      	cbz	r3, 1b3a8 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1b368:	68dc      	ldr	r4, [r3, #12]
   1b36a:	b10c      	cbz	r4, 1b370 <bt_smp_start_security+0xcc>
   1b36c:	4b2d      	ldr	r3, [pc, #180]	; (1b424 <bt_smp_start_security+0x180>)
   1b36e:	781c      	ldrb	r4, [r3, #0]
   1b370:	f004 0401 	and.w	r4, r4, #1
   1b374:	e00b      	b.n	1b38e <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b376:	f7ff f88d 	bl	1a494 <get_io_capa>
   1b37a:	2803      	cmp	r0, #3
   1b37c:	d107      	bne.n	1b38e <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
   1b37e:	4b28      	ldr	r3, [pc, #160]	; (1b420 <bt_smp_start_security+0x17c>)
   1b380:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b382:	2c00      	cmp	r4, #0
   1b384:	d0bd      	beq.n	1b302 <bt_smp_start_security+0x5e>
		       (bt_auth && bt_auth->oob_data_request);
   1b386:	68e4      	ldr	r4, [r4, #12]
   1b388:	3c00      	subs	r4, #0
   1b38a:	bf18      	it	ne
   1b38c:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1b38e:	2c00      	cmp	r4, #0
   1b390:	d0b7      	beq.n	1b302 <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   1b392:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1b396:	b14b      	cbz	r3, 1b3ac <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
   1b398:	4630      	mov	r0, r6
   1b39a:	f7ff f9b5 	bl	1a708 <smp_init>
   1b39e:	4604      	mov	r4, r0
   1b3a0:	b180      	cbz	r0, 1b3c4 <bt_smp_start_security+0x120>
		return -ENOBUFS;
   1b3a2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1b3a6:	e785      	b.n	1b2b4 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1b3a8:	2400      	movs	r4, #0
   1b3aa:	e7e1      	b.n	1b370 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b3ac:	7a28      	ldrb	r0, [r5, #8]
   1b3ae:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1b3b2:	f000 fcb5 	bl	1bd20 <bt_keys_get_addr>
   1b3b6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1b3ba:	2800      	cmp	r0, #0
   1b3bc:	d1ec      	bne.n	1b398 <bt_smp_start_security+0xf4>
			return -ENOMEM;
   1b3be:	f06f 040b 	mvn.w	r4, #11
   1b3c2:	e777      	b.n	1b2b4 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1b3c4:	210b      	movs	r1, #11
   1b3c6:	4630      	mov	r0, r6
   1b3c8:	f008 fbdc 	bl	23b84 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1b3cc:	4680      	mov	r8, r0
   1b3ce:	2800      	cmp	r0, #0
   1b3d0:	d0e7      	beq.n	1b3a2 <bt_smp_start_security+0xfe>
   1b3d2:	2101      	movs	r1, #1
   1b3d4:	3008      	adds	r0, #8
   1b3d6:	f009 f86a 	bl	244ae <net_buf_simple_add>
   1b3da:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1b3dc:	2009      	movs	r0, #9
   1b3de:	f7ff f929 	bl	1a634 <get_auth.isra.0>
   1b3e2:	4623      	mov	r3, r4
   1b3e4:	f889 0000 	strb.w	r0, [r9]
   1b3e8:	4642      	mov	r2, r8
   1b3ea:	9400      	str	r4, [sp, #0]
   1b3ec:	2106      	movs	r1, #6
   1b3ee:	4628      	mov	r0, r5
   1b3f0:	f007 fcc8 	bl	22d84 <bt_l2cap_send_cb>
	if (err) {
   1b3f4:	4604      	mov	r4, r0
   1b3f6:	b118      	cbz	r0, 1b400 <bt_smp_start_security+0x15c>
		net_buf_unref(req_buf);
   1b3f8:	4640      	mov	r0, r8
   1b3fa:	f000 feff 	bl	1c1fc <net_buf_unref>
		return err;
   1b3fe:	e759      	b.n	1b2b4 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1b400:	4638      	mov	r0, r7
   1b402:	210f      	movs	r1, #15
   1b404:	f008 fb55 	bl	23ab2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1b408:	2101      	movs	r1, #1
   1b40a:	4630      	mov	r0, r6
   1b40c:	f008 fb51 	bl	23ab2 <atomic_set_bit>
	return 0;
   1b410:	e750      	b.n	1b2b4 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1b412:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1b416:	e74d      	b.n	1b2b4 <bt_smp_start_security+0x10>
		return -EIO;
   1b418:	f06f 0404 	mvn.w	r4, #4
   1b41c:	e74a      	b.n	1b2b4 <bt_smp_start_security+0x10>
   1b41e:	bf00      	nop
   1b420:	20002ed4 	.word	0x20002ed4
   1b424:	2000349d 	.word	0x2000349d

0001b428 <smp_pairing_complete>:
{
   1b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1b42c:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!status) {
   1b430:	4f28      	ldr	r7, [pc, #160]	; (1b4d4 <smp_pairing_complete+0xac>)
{
   1b432:	4605      	mov	r5, r0
   1b434:	f100 0804 	add.w	r8, r0, #4
	if (!status) {
   1b438:	b9e1      	cbnz	r1, 1b474 <smp_pairing_complete+0x4c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1b43a:	210d      	movs	r1, #13
   1b43c:	4640      	mov	r0, r8
   1b43e:	f008 fb4c 	bl	23ada <atomic_test_bit>
		if (bond_flag) {
   1b442:	4606      	mov	r6, r0
   1b444:	b118      	cbz	r0, 1b44e <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
   1b446:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1b44a:	f000 fde7 	bl	1c01c <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   1b44e:	683b      	ldr	r3, [r7, #0]
   1b450:	b123      	cbz	r3, 1b45c <smp_pairing_complete+0x34>
   1b452:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
   1b454:	b113      	cbz	r3, 1b45c <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(conn, security_err);
   1b456:	4631      	mov	r1, r6
   1b458:	4620      	mov	r0, r4
   1b45a:	4798      	blx	r3
	smp_reset(smp);
   1b45c:	4628      	mov	r0, r5
   1b45e:	f008 fcc3 	bl	23de8 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1b462:	7a62      	ldrb	r2, [r4, #9]
   1b464:	7aa3      	ldrb	r3, [r4, #10]
   1b466:	429a      	cmp	r2, r3
   1b468:	d032      	beq.n	1b4d0 <smp_pairing_complete+0xa8>
		bt_smp_start_security(conn);
   1b46a:	4620      	mov	r0, r4
}
   1b46c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
   1b470:	f7ff bf18 	b.w	1b2a4 <bt_smp_start_security>
	switch (smp_err) {
   1b474:	3901      	subs	r1, #1
   1b476:	b2c9      	uxtb	r1, r1
   1b478:	290d      	cmp	r1, #13
   1b47a:	bf9c      	itt	ls
   1b47c:	4b16      	ldrls	r3, [pc, #88]	; (1b4d8 <smp_pairing_complete+0xb0>)
   1b47e:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   1b480:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   1b484:	bf88      	it	hi
   1b486:	2608      	movhi	r6, #8
		if (conn->le.keys &&
   1b488:	b143      	cbz	r3, 1b49c <smp_pairing_complete+0x74>
   1b48a:	7b1b      	ldrb	r3, [r3, #12]
   1b48c:	b9cb      	cbnz	r3, 1b4c2 <smp_pairing_complete+0x9a>
			bt_keys_clear(conn->le.keys);
   1b48e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1b492:	f000 fcfb 	bl	1be8c <bt_keys_clear>
			conn->le.keys = NULL;
   1b496:	2300      	movs	r3, #0
   1b498:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b49c:	2102      	movs	r1, #2
   1b49e:	4640      	mov	r0, r8
   1b4a0:	f008 fb1b 	bl	23ada <atomic_test_bit>
   1b4a4:	b940      	cbnz	r0, 1b4b8 <smp_pairing_complete+0x90>
	switch (err) {
   1b4a6:	2e08      	cmp	r6, #8
   1b4a8:	bf16      	itet	ne
   1b4aa:	4b0c      	ldrne	r3, [pc, #48]	; (1b4dc <smp_pairing_complete+0xb4>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b4ac:	211f      	moveq	r1, #31
   1b4ae:	5d99      	ldrbne	r1, [r3, r6]
			bt_conn_security_changed(conn,
   1b4b0:	4632      	mov	r2, r6
   1b4b2:	4620      	mov	r0, r4
   1b4b4:	f7fb ff72 	bl	1739c <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   1b4b8:	683b      	ldr	r3, [r7, #0]
   1b4ba:	2b00      	cmp	r3, #0
   1b4bc:	d0ce      	beq.n	1b45c <smp_pairing_complete+0x34>
   1b4be:	69db      	ldr	r3, [r3, #28]
   1b4c0:	e7c8      	b.n	1b454 <smp_pairing_complete+0x2c>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1b4c2:	2102      	movs	r1, #2
   1b4c4:	4640      	mov	r0, r8
   1b4c6:	f008 fb08 	bl	23ada <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1b4ca:	2800      	cmp	r0, #0
   1b4cc:	d1df      	bne.n	1b48e <smp_pairing_complete+0x66>
   1b4ce:	e7e5      	b.n	1b49c <smp_pairing_complete+0x74>
}
   1b4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4d4:	20002ed4 	.word	0x20002ed4
   1b4d8:	00028362 	.word	0x00028362
   1b4dc:	00028378 	.word	0x00028378

0001b4e0 <bt_smp_recv>:
{
   1b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1b4e2:	898b      	ldrh	r3, [r1, #12]
{
   1b4e4:	4607      	mov	r7, r0
   1b4e6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1b4e8:	b95b      	cbnz	r3, 1b502 <bt_smp_recv+0x22>
   1b4ea:	493a      	ldr	r1, [pc, #232]	; (1b5d4 <bt_smp_recv+0xf4>)
   1b4ec:	4b3a      	ldr	r3, [pc, #232]	; (1b5d8 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   1b4ee:	483b      	ldr	r0, [pc, #236]	; (1b5dc <bt_smp_recv+0xfc>)
   1b4f0:	1ac9      	subs	r1, r1, r3
   1b4f2:	08c9      	lsrs	r1, r1, #3
   1b4f4:	0189      	lsls	r1, r1, #6
   1b4f6:	f041 0101 	orr.w	r1, r1, #1
   1b4fa:	f004 fe07 	bl	2010c <log_0>
}
   1b4fe:	2000      	movs	r0, #0
   1b500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b502:	2101      	movs	r1, #1
   1b504:	f105 0008 	add.w	r0, r5, #8
   1b508:	f008 fff8 	bl	244fc <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b50c:	2104      	movs	r1, #4
   1b50e:	4606      	mov	r6, r0
   1b510:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   1b514:	f008 fae1 	bl	23ada <atomic_test_bit>
   1b518:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   1b51c:	7831      	ldrb	r1, [r6, #0]
   1b51e:	b150      	cbz	r0, 1b536 <bt_smp_recv+0x56>
   1b520:	4a2c      	ldr	r2, [pc, #176]	; (1b5d4 <bt_smp_recv+0xf4>)
   1b522:	4b2d      	ldr	r3, [pc, #180]	; (1b5d8 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1b524:	482e      	ldr	r0, [pc, #184]	; (1b5e0 <bt_smp_recv+0x100>)
   1b526:	1ad2      	subs	r2, r2, r3
   1b528:	08d2      	lsrs	r2, r2, #3
   1b52a:	0192      	lsls	r2, r2, #6
   1b52c:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1b530:	f004 fdf9 	bl	20126 <log_1>
		return 0;
   1b534:	e7e3      	b.n	1b4fe <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1b536:	290e      	cmp	r1, #14
   1b538:	d908      	bls.n	1b54c <bt_smp_recv+0x6c>
   1b53a:	4a26      	ldr	r2, [pc, #152]	; (1b5d4 <bt_smp_recv+0xf4>)
   1b53c:	4b26      	ldr	r3, [pc, #152]	; (1b5d8 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1b53e:	4829      	ldr	r0, [pc, #164]	; (1b5e4 <bt_smp_recv+0x104>)
   1b540:	1ad2      	subs	r2, r2, r3
   1b542:	08d2      	lsrs	r2, r2, #3
   1b544:	0192      	lsls	r2, r2, #6
   1b546:	f042 0202 	orr.w	r2, r2, #2
   1b54a:	e7f1      	b.n	1b530 <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   1b54c:	4f26      	ldr	r7, [pc, #152]	; (1b5e8 <bt_smp_recv+0x108>)
   1b54e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1b552:	b973      	cbnz	r3, 1b572 <bt_smp_recv+0x92>
   1b554:	4b20      	ldr	r3, [pc, #128]	; (1b5d8 <bt_smp_recv+0xf8>)
   1b556:	4a1f      	ldr	r2, [pc, #124]	; (1b5d4 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1b558:	4824      	ldr	r0, [pc, #144]	; (1b5ec <bt_smp_recv+0x10c>)
   1b55a:	1ad2      	subs	r2, r2, r3
   1b55c:	08d2      	lsrs	r2, r2, #3
   1b55e:	0192      	lsls	r2, r2, #6
   1b560:	f042 0202 	orr.w	r2, r2, #2
   1b564:	f004 fddf 	bl	20126 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1b568:	2107      	movs	r1, #7
		smp_error(smp, err);
   1b56a:	4620      	mov	r0, r4
   1b56c:	f008 fde4 	bl	24138 <smp_error>
   1b570:	e7c5      	b.n	1b4fe <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1b572:	4620      	mov	r0, r4
   1b574:	f008 fc20 	bl	23db8 <atomic_test_and_clear_bit>
   1b578:	7831      	ldrb	r1, [r6, #0]
   1b57a:	b970      	cbnz	r0, 1b59a <bt_smp_recv+0xba>
   1b57c:	4b16      	ldr	r3, [pc, #88]	; (1b5d8 <bt_smp_recv+0xf8>)
   1b57e:	4a15      	ldr	r2, [pc, #84]	; (1b5d4 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1b580:	481b      	ldr	r0, [pc, #108]	; (1b5f0 <bt_smp_recv+0x110>)
   1b582:	1ad2      	subs	r2, r2, r3
   1b584:	08d2      	lsrs	r2, r2, #3
   1b586:	0192      	lsls	r2, r2, #6
   1b588:	f042 0202 	orr.w	r2, r2, #2
   1b58c:	f004 fdcb 	bl	20126 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1b590:	7833      	ldrb	r3, [r6, #0]
   1b592:	2b05      	cmp	r3, #5
   1b594:	d0b3      	beq.n	1b4fe <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1b596:	2108      	movs	r1, #8
   1b598:	e7e7      	b.n	1b56a <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1b59a:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   1b59e:	89a8      	ldrh	r0, [r5, #12]
   1b5a0:	791b      	ldrb	r3, [r3, #4]
   1b5a2:	4283      	cmp	r3, r0
   1b5a4:	d00d      	beq.n	1b5c2 <bt_smp_recv+0xe2>
   1b5a6:	4a0c      	ldr	r2, [pc, #48]	; (1b5d8 <bt_smp_recv+0xf8>)
   1b5a8:	4b0a      	ldr	r3, [pc, #40]	; (1b5d4 <bt_smp_recv+0xf4>)
   1b5aa:	1a9b      	subs	r3, r3, r2
   1b5ac:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b5ae:	019b      	lsls	r3, r3, #6
   1b5b0:	460a      	mov	r2, r1
   1b5b2:	f043 0301 	orr.w	r3, r3, #1
   1b5b6:	4601      	mov	r1, r0
   1b5b8:	480e      	ldr	r0, [pc, #56]	; (1b5f4 <bt_smp_recv+0x114>)
   1b5ba:	f004 fdc8 	bl	2014e <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1b5be:	210a      	movs	r1, #10
   1b5c0:	e7d3      	b.n	1b56a <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   1b5c2:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1b5c6:	4620      	mov	r0, r4
   1b5c8:	4629      	mov	r1, r5
   1b5ca:	4798      	blx	r3
	if (err) {
   1b5cc:	4601      	mov	r1, r0
   1b5ce:	2800      	cmp	r0, #0
   1b5d0:	d095      	beq.n	1b4fe <bt_smp_recv+0x1e>
   1b5d2:	e7ca      	b.n	1b56a <bt_smp_recv+0x8a>
   1b5d4:	0002573c 	.word	0x0002573c
   1b5d8:	000256c4 	.word	0x000256c4
   1b5dc:	000281a6 	.word	0x000281a6
   1b5e0:	000281c1 	.word	0x000281c1
   1b5e4:	000281f2 	.word	0x000281f2
   1b5e8:	00025f9c 	.word	0x00025f9c
   1b5ec:	00028214 	.word	0x00028214
   1b5f0:	0002822e 	.word	0x0002822e
   1b5f4:	00027d0c 	.word	0x00027d0c

0001b5f8 <bt_smp_pkey_ready>:
{
   1b5f8:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   1b5fa:	4b13      	ldr	r3, [pc, #76]	; (1b648 <bt_smp_pkey_ready+0x50>)
   1b5fc:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1b5fe:	b958      	cbnz	r0, 1b618 <bt_smp_pkey_ready+0x20>
   1b600:	4b12      	ldr	r3, [pc, #72]	; (1b64c <bt_smp_pkey_ready+0x54>)
   1b602:	4913      	ldr	r1, [pc, #76]	; (1b650 <bt_smp_pkey_ready+0x58>)
		BT_WARN("Public key not available");
   1b604:	4813      	ldr	r0, [pc, #76]	; (1b654 <bt_smp_pkey_ready+0x5c>)
   1b606:	1ac9      	subs	r1, r1, r3
   1b608:	08c9      	lsrs	r1, r1, #3
   1b60a:	0189      	lsls	r1, r1, #6
}
   1b60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Public key not available");
   1b610:	f041 0102 	orr.w	r1, r1, #2
   1b614:	f004 bd7a 	b.w	2010c <log_0>
	z_impl_k_sem_give(sem);
   1b618:	480f      	ldr	r0, [pc, #60]	; (1b658 <bt_smp_pkey_ready+0x60>)
   1b61a:	4c10      	ldr	r4, [pc, #64]	; (1b65c <bt_smp_pkey_ready+0x64>)
   1b61c:	f003 f804 	bl	1e628 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1b620:	2500      	movs	r5, #0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1b622:	2106      	movs	r1, #6
   1b624:	1d20      	adds	r0, r4, #4
   1b626:	f008 fa58 	bl	23ada <atomic_test_bit>
   1b62a:	b138      	cbz	r0, 1b63c <bt_smp_pkey_ready+0x44>
		err = smp_public_key_slave(smp);
   1b62c:	4620      	mov	r0, r4
   1b62e:	f7ff fba7 	bl	1ad80 <smp_public_key_slave>
		if (err) {
   1b632:	4601      	mov	r1, r0
   1b634:	b110      	cbz	r0, 1b63c <bt_smp_pkey_ready+0x44>
			smp_error(smp, err);
   1b636:	4620      	mov	r0, r4
   1b638:	f008 fd7e 	bl	24138 <smp_error>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1b63c:	3501      	adds	r5, #1
   1b63e:	2d05      	cmp	r5, #5
   1b640:	f504 7402 	add.w	r4, r4, #520	; 0x208
   1b644:	d1ed      	bne.n	1b622 <bt_smp_pkey_ready+0x2a>
}
   1b646:	bd38      	pop	{r3, r4, r5, pc}
   1b648:	20003008 	.word	0x20003008
   1b64c:	000256c4 	.word	0x000256c4
   1b650:	0002573c 	.word	0x0002573c
   1b654:	00028249 	.word	0x00028249
   1b658:	20000888 	.word	0x20000888
   1b65c:	20002058 	.word	0x20002058

0001b660 <smp_ident_addr_info>:
{
   1b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1b664:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1b666:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1b66a:	782b      	ldrb	r3, [r5, #0]
{
   1b66c:	4604      	mov	r4, r0
   1b66e:	f107 0688 	add.w	r6, r7, #136	; 0x88
   1b672:	b313      	cbz	r3, 1b6ba <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1b674:	79ab      	ldrb	r3, [r5, #6]
   1b676:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b67a:	2bc0      	cmp	r3, #192	; 0xc0
   1b67c:	d01d      	beq.n	1b6ba <smp_ident_addr_info+0x5a>
   1b67e:	4b4b      	ldr	r3, [pc, #300]	; (1b7ac <smp_ident_addr_info+0x14c>)
   1b680:	4c4b      	ldr	r4, [pc, #300]	; (1b7b0 <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1b682:	4628      	mov	r0, r5
   1b684:	1ae4      	subs	r4, r4, r3
   1b686:	f7f8 fcd3 	bl	14030 <bt_addr_le_str_real>
   1b68a:	f7f5 ff73 	bl	11574 <z_log_strdup>
   1b68e:	08e4      	lsrs	r4, r4, #3
   1b690:	01a4      	lsls	r4, r4, #6
   1b692:	f044 0401 	orr.w	r4, r4, #1
   1b696:	4601      	mov	r1, r0
   1b698:	4622      	mov	r2, r4
   1b69a:	4846      	ldr	r0, [pc, #280]	; (1b7b4 <smp_ident_addr_info+0x154>)
   1b69c:	f004 fd43 	bl	20126 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1b6a0:	4630      	mov	r0, r6
   1b6a2:	f7f8 fcc5 	bl	14030 <bt_addr_le_str_real>
   1b6a6:	f7f5 ff65 	bl	11574 <z_log_strdup>
   1b6aa:	4622      	mov	r2, r4
   1b6ac:	4601      	mov	r1, r0
   1b6ae:	4842      	ldr	r0, [pc, #264]	; (1b7b8 <smp_ident_addr_info+0x158>)
   1b6b0:	f004 fd39 	bl	20126 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   1b6b4:	200a      	movs	r0, #10
}
   1b6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1b6ba:	2207      	movs	r2, #7
   1b6bc:	4629      	mov	r1, r5
   1b6be:	4630      	mov	r0, r6
   1b6c0:	f006 fd82 	bl	221c8 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1b6c4:	b168      	cbz	r0, 1b6e2 <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1b6c6:	7a38      	ldrb	r0, [r7, #8]
   1b6c8:	4629      	mov	r1, r5
   1b6ca:	f000 fbcf 	bl	1be6c <bt_keys_find_addr>
		if (keys) {
   1b6ce:	4680      	mov	r8, r0
   1b6d0:	b138      	cbz	r0, 1b6e2 <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   1b6d2:	4601      	mov	r1, r0
   1b6d4:	4620      	mov	r0, r4
   1b6d6:	f008 fa34 	bl	23b42 <update_keys_check>
   1b6da:	b300      	cbz	r0, 1b71e <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   1b6dc:	4640      	mov	r0, r8
   1b6de:	f000 fbd5 	bl	1be8c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b6e2:	210d      	movs	r1, #13
   1b6e4:	1d20      	adds	r0, r4, #4
   1b6e6:	f008 f9f8 	bl	23ada <atomic_test_bit>
   1b6ea:	2800      	cmp	r0, #0
   1b6ec:	d046      	beq.n	1b77c <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b6ee:	7a39      	ldrb	r1, [r7, #8]
   1b6f0:	4632      	mov	r2, r6
   1b6f2:	2002      	movs	r0, #2
   1b6f4:	f008 fe70 	bl	243d8 <bt_keys_get_type>
		if (!keys) {
   1b6f8:	4680      	mov	r8, r0
   1b6fa:	b990      	cbnz	r0, 1b722 <smp_ident_addr_info+0xc2>
   1b6fc:	4a2b      	ldr	r2, [pc, #172]	; (1b7ac <smp_ident_addr_info+0x14c>)
   1b6fe:	4c2c      	ldr	r4, [pc, #176]	; (1b7b0 <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
   1b700:	4630      	mov	r0, r6
   1b702:	1aa4      	subs	r4, r4, r2
   1b704:	f7f8 fc94 	bl	14030 <bt_addr_le_str_real>
   1b708:	f7f5 ff34 	bl	11574 <z_log_strdup>
   1b70c:	08e4      	lsrs	r4, r4, #3
   1b70e:	01a4      	lsls	r4, r4, #6
   1b710:	f044 0401 	orr.w	r4, r4, #1
   1b714:	4601      	mov	r1, r0
   1b716:	4622      	mov	r2, r4
   1b718:	4828      	ldr	r0, [pc, #160]	; (1b7bc <smp_ident_addr_info+0x15c>)
   1b71a:	f004 fd04 	bl	20126 <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   1b71e:	2008      	movs	r0, #8
   1b720:	e7c9      	b.n	1b6b6 <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1b722:	78fb      	ldrb	r3, [r7, #3]
   1b724:	2b00      	cmp	r3, #0
   1b726:	d13e      	bne.n	1b7a6 <smp_ident_addr_info+0x146>
			dst = &conn->le.resp_addr;
   1b728:	f107 0196 	add.w	r1, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1b72c:	780b      	ldrb	r3, [r1, #0]
   1b72e:	2b01      	cmp	r3, #1
   1b730:	d121      	bne.n	1b776 <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1b732:	798b      	ldrb	r3, [r1, #6]
   1b734:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b738:	2b40      	cmp	r3, #64	; 0x40
   1b73a:	d11c      	bne.n	1b776 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1b73c:	2206      	movs	r2, #6
   1b73e:	3101      	adds	r1, #1
   1b740:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1b744:	f006 fd50 	bl	221e8 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1b748:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
   1b74c:	b19b      	cbz	r3, 1b776 <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1b74e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
   1b752:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b756:	2bc0      	cmp	r3, #192	; 0xc0
   1b758:	d00d      	beq.n	1b776 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1b75a:	2207      	movs	r2, #7
   1b75c:	4629      	mov	r1, r5
   1b75e:	f108 0001 	add.w	r0, r8, #1
   1b762:	f006 fd41 	bl	221e8 <memcpy>
   1b766:	2207      	movs	r2, #7
   1b768:	4629      	mov	r1, r5
   1b76a:	4630      	mov	r0, r6
   1b76c:	f006 fd3c 	bl	221e8 <memcpy>
				bt_conn_identity_resolved(conn);
   1b770:	4638      	mov	r0, r7
   1b772:	f7fb fdf9 	bl	17368 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1b776:	4640      	mov	r0, r8
   1b778:	f7fa fd26 	bl	161c8 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1b77c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b780:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b784:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1b786:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b78a:	d503      	bpl.n	1b794 <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b78c:	210a      	movs	r1, #10
   1b78e:	4620      	mov	r0, r4
   1b790:	f008 f98f 	bl	23ab2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1b794:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1b798:	b91d      	cbnz	r5, 1b7a2 <smp_ident_addr_info+0x142>
		smp_pairing_complete(smp, 0);
   1b79a:	4629      	mov	r1, r5
   1b79c:	4620      	mov	r0, r4
   1b79e:	f7ff fe43 	bl	1b428 <smp_pairing_complete>
	return 0;
   1b7a2:	2000      	movs	r0, #0
   1b7a4:	e787      	b.n	1b6b6 <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   1b7a6:	f107 018f 	add.w	r1, r7, #143	; 0x8f
   1b7aa:	e7bf      	b.n	1b72c <smp_ident_addr_info+0xcc>
   1b7ac:	000256c4 	.word	0x000256c4
   1b7b0:	0002573c 	.word	0x0002573c
   1b7b4:	00028262 	.word	0x00028262
   1b7b8:	0002828f 	.word	0x0002828f
   1b7bc:	0002803d 	.word	0x0002803d

0001b7c0 <smp_master_ident>:
{
   1b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1b7c2:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   1b7c6:	4604      	mov	r4, r0
   1b7c8:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b7ca:	3004      	adds	r0, #4
   1b7cc:	210d      	movs	r1, #13
   1b7ce:	f008 f984 	bl	23ada <atomic_test_bit>
   1b7d2:	b368      	cbz	r0, 1b830 <smp_master_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b7d4:	f105 0788 	add.w	r7, r5, #136	; 0x88
   1b7d8:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1b7da:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b7dc:	463a      	mov	r2, r7
   1b7de:	2004      	movs	r0, #4
   1b7e0:	f008 fdfa 	bl	243d8 <bt_keys_get_type>
		if (!keys) {
   1b7e4:	4605      	mov	r5, r0
   1b7e6:	b990      	cbnz	r0, 1b80e <smp_master_ident+0x4e>
   1b7e8:	4a1c      	ldr	r2, [pc, #112]	; (1b85c <smp_master_ident+0x9c>)
   1b7ea:	4c1d      	ldr	r4, [pc, #116]	; (1b860 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
   1b7ec:	4638      	mov	r0, r7
   1b7ee:	1aa4      	subs	r4, r4, r2
   1b7f0:	f7f8 fc1e 	bl	14030 <bt_addr_le_str_real>
   1b7f4:	f7f5 febe 	bl	11574 <z_log_strdup>
   1b7f8:	08e4      	lsrs	r4, r4, #3
   1b7fa:	01a4      	lsls	r4, r4, #6
   1b7fc:	f044 0401 	orr.w	r4, r4, #1
   1b800:	4601      	mov	r1, r0
   1b802:	4622      	mov	r2, r4
   1b804:	4817      	ldr	r0, [pc, #92]	; (1b864 <smp_master_ident+0xa4>)
   1b806:	f004 fc8e 	bl	20126 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1b80a:	2008      	movs	r0, #8
}
   1b80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1b80e:	2202      	movs	r2, #2
   1b810:	4631      	mov	r1, r6
   1b812:	3018      	adds	r0, #24
   1b814:	f006 fce8 	bl	221e8 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1b818:	2208      	movs	r2, #8
   1b81a:	1cb1      	adds	r1, r6, #2
   1b81c:	f105 0010 	add.w	r0, r5, #16
   1b820:	f006 fce2 	bl	221e8 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1b824:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b828:	f023 0301 	bic.w	r3, r3, #1
   1b82c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b830:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b834:	079a      	lsls	r2, r3, #30
   1b836:	d50c      	bpl.n	1b852 <smp_master_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b838:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b83a:	4620      	mov	r0, r4
   1b83c:	f008 f939 	bl	23ab2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1b840:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1b844:	b91d      	cbnz	r5, 1b84e <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
   1b846:	4629      	mov	r1, r5
   1b848:	4620      	mov	r0, r4
   1b84a:	f7ff fded 	bl	1b428 <smp_pairing_complete>
	return 0;
   1b84e:	2000      	movs	r0, #0
   1b850:	e7dc      	b.n	1b80c <smp_master_ident+0x4c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b852:	075b      	lsls	r3, r3, #29
   1b854:	d5f4      	bpl.n	1b840 <smp_master_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b856:	210a      	movs	r1, #10
   1b858:	e7ef      	b.n	1b83a <smp_master_ident+0x7a>
   1b85a:	bf00      	nop
   1b85c:	000256c4 	.word	0x000256c4
   1b860:	0002573c 	.word	0x0002573c
   1b864:	0002803d 	.word	0x0002803d

0001b868 <smp_pairing_failed>:
{
   1b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b86a:	4a15      	ldr	r2, [pc, #84]	; (1b8c0 <smp_pairing_failed+0x58>)
   1b86c:	4b15      	ldr	r3, [pc, #84]	; (1b8c4 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1b86e:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1b870:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   1b874:	7829      	ldrb	r1, [r5, #0]
   1b876:	1ad2      	subs	r2, r2, r3
   1b878:	08d2      	lsrs	r2, r2, #3
{
   1b87a:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1b87c:	0192      	lsls	r2, r2, #6
   1b87e:	4812      	ldr	r0, [pc, #72]	; (1b8c8 <smp_pairing_failed+0x60>)
   1b880:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b884:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1b886:	f004 fc4e 	bl	20126 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b88a:	210a      	movs	r1, #10
   1b88c:	4638      	mov	r0, r7
   1b88e:	f008 fa93 	bl	23db8 <atomic_test_and_clear_bit>
   1b892:	b140      	cbz	r0, 1b8a6 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   1b894:	4b0d      	ldr	r3, [pc, #52]	; (1b8cc <smp_pairing_failed+0x64>)
   1b896:	681b      	ldr	r3, [r3, #0]
   1b898:	b963      	cbnz	r3, 1b8b4 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   1b89a:	4620      	mov	r0, r4
   1b89c:	7829      	ldrb	r1, [r5, #0]
   1b89e:	f7ff fdc3 	bl	1b428 <smp_pairing_complete>
}
   1b8a2:	2000      	movs	r0, #0
   1b8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1b8a6:	210b      	movs	r1, #11
   1b8a8:	4638      	mov	r0, r7
   1b8aa:	f008 fa85 	bl	23db8 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b8ae:	2800      	cmp	r0, #0
   1b8b0:	d1f0      	bne.n	1b894 <smp_pairing_failed+0x2c>
   1b8b2:	e7f2      	b.n	1b89a <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1b8b4:	691b      	ldr	r3, [r3, #16]
   1b8b6:	2b00      	cmp	r3, #0
   1b8b8:	d0ef      	beq.n	1b89a <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   1b8ba:	4630      	mov	r0, r6
   1b8bc:	4798      	blx	r3
   1b8be:	e7ec      	b.n	1b89a <smp_pairing_failed+0x32>
   1b8c0:	0002573c 	.word	0x0002573c
   1b8c4:	000256c4 	.word	0x000256c4
   1b8c8:	00028276 	.word	0x00028276
   1b8cc:	20002ed4 	.word	0x20002ed4

0001b8d0 <bt_smp_encrypt_change>:
{
   1b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1b8d4:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b8d6:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   1b8da:	b089      	sub	sp, #36	; 0x24
   1b8dc:	4605      	mov	r5, r0
   1b8de:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b8e0:	4630      	mov	r0, r6
   1b8e2:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1b8e4:	f854 89f0 	ldr.w	r8, [r4], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b8e8:	f008 fa66 	bl	23db8 <atomic_test_and_clear_bit>
   1b8ec:	b318      	cbz	r0, 1b936 <bt_smp_encrypt_change+0x66>
	if (hci_status) {
   1b8ee:	b1bf      	cbz	r7, 1b920 <bt_smp_encrypt_change+0x50>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b8f0:	2103      	movs	r1, #3
   1b8f2:	4630      	mov	r0, r6
   1b8f4:	f008 f8f1 	bl	23ada <atomic_test_bit>
   1b8f8:	b1e8      	cbz	r0, 1b936 <bt_smp_encrypt_change+0x66>
			uint8_t smp_err = smp_err_get(
   1b8fa:	4638      	mov	r0, r7
   1b8fc:	f7fa f926 	bl	15b4c <bt_security_err_get>
	switch (auth_err) {
   1b900:	3801      	subs	r0, #1
   1b902:	b2c0      	uxtb	r0, r0
   1b904:	2807      	cmp	r0, #7
   1b906:	bf9a      	itte	ls
   1b908:	4b99      	ldrls	r3, [pc, #612]	; (1bb70 <bt_smp_encrypt_change+0x2a0>)
   1b90a:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1b90c:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b90e:	2102      	movs	r1, #2
   1b910:	4630      	mov	r0, r6
   1b912:	f008 f8ce 	bl	23ab2 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1b916:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1b918:	4620      	mov	r0, r4
   1b91a:	f7ff fd85 	bl	1b428 <smp_pairing_complete>
   1b91e:	e00a      	b.n	1b936 <bt_smp_encrypt_change+0x66>
	if (!conn->encrypt) {
   1b920:	f898 300b 	ldrb.w	r3, [r8, #11]
   1b924:	b13b      	cbz	r3, 1b936 <bt_smp_encrypt_change+0x66>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b926:	2103      	movs	r1, #3
   1b928:	4630      	mov	r0, r6
   1b92a:	f008 f8d6 	bl	23ada <atomic_test_bit>
   1b92e:	b928      	cbnz	r0, 1b93c <bt_smp_encrypt_change+0x6c>
		smp_reset(smp);
   1b930:	4620      	mov	r0, r4
   1b932:	f008 fa59 	bl	23de8 <smp_reset>
}
   1b936:	b009      	add	sp, #36	; 0x24
   1b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b93c:	2105      	movs	r1, #5
   1b93e:	4630      	mov	r0, r6
   1b940:	f008 f8cb 	bl	23ada <atomic_test_bit>
   1b944:	b1b8      	cbz	r0, 1b976 <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1b946:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1b94a:	071a      	lsls	r2, r3, #28
   1b94c:	d507      	bpl.n	1b95e <bt_smp_encrypt_change+0x8e>
   1b94e:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   1b952:	071b      	lsls	r3, r3, #28
   1b954:	d503      	bpl.n	1b95e <bt_smp_encrypt_change+0x8e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1b956:	2111      	movs	r1, #17
   1b958:	4630      	mov	r0, r6
   1b95a:	f008 f8aa 	bl	23ab2 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b95e:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1b962:	f023 0308 	bic.w	r3, r3, #8
   1b966:	f805 3c08 	strb.w	r3, [r5, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b96a:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   1b96e:	f023 0308 	bic.w	r3, r3, #8
   1b972:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1b976:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   1b97a:	07df      	lsls	r7, r3, #31
   1b97c:	d51e      	bpl.n	1b9bc <bt_smp_encrypt_change+0xec>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1b97e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b980:	4620      	mov	r0, r4
   1b982:	f008 f896 	bl	23ab2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b986:	2102      	movs	r1, #2
   1b988:	4630      	mov	r0, r6
   1b98a:	f008 f892 	bl	23ab2 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1b98e:	682f      	ldr	r7, [r5, #0]
	if (!keys) {
   1b990:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1b994:	b9d3      	cbnz	r3, 1b9cc <bt_smp_encrypt_change+0xfc>
   1b996:	4a77      	ldr	r2, [pc, #476]	; (1bb74 <bt_smp_encrypt_change+0x2a4>)
   1b998:	4c77      	ldr	r4, [pc, #476]	; (1bb78 <bt_smp_encrypt_change+0x2a8>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1b99a:	f107 0088 	add.w	r0, r7, #136	; 0x88
   1b99e:	1aa4      	subs	r4, r4, r2
   1b9a0:	f7f8 fb46 	bl	14030 <bt_addr_le_str_real>
   1b9a4:	f7f5 fde6 	bl	11574 <z_log_strdup>
   1b9a8:	08e4      	lsrs	r4, r4, #3
   1b9aa:	01a4      	lsls	r4, r4, #6
   1b9ac:	f044 0401 	orr.w	r4, r4, #1
   1b9b0:	4601      	mov	r1, r0
   1b9b2:	4622      	mov	r2, r4
   1b9b4:	4871      	ldr	r0, [pc, #452]	; (1bb7c <bt_smp_encrypt_change+0x2ac>)
   1b9b6:	f004 fbb6 	bl	20126 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1b9ba:	e7bc      	b.n	1b936 <bt_smp_encrypt_change+0x66>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b9bc:	0798      	lsls	r0, r3, #30
   1b9be:	d501      	bpl.n	1b9c4 <bt_smp_encrypt_change+0xf4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b9c0:	2108      	movs	r1, #8
   1b9c2:	e7dd      	b.n	1b980 <bt_smp_encrypt_change+0xb0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b9c4:	0759      	lsls	r1, r3, #29
   1b9c6:	d5de      	bpl.n	1b986 <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b9c8:	210a      	movs	r1, #10
   1b9ca:	e7d9      	b.n	1b980 <bt_smp_encrypt_change+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b9cc:	2105      	movs	r1, #5
   1b9ce:	f008 f884 	bl	23ada <atomic_test_bit>
   1b9d2:	b9b0      	cbnz	r0, 1ba02 <bt_smp_encrypt_change+0x132>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1b9d4:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1b9d8:	07da      	lsls	r2, r3, #31
   1b9da:	d512      	bpl.n	1ba02 <bt_smp_encrypt_change+0x132>
	struct bt_keys *keys = conn->le.keys;
   1b9dc:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1b9de:	211a      	movs	r1, #26
   1b9e0:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1b9e2:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1b9e6:	f001 fe6f 	bl	1d6c8 <bt_rand>
   1b9ea:	4682      	mov	sl, r0
   1b9ec:	b300      	cbz	r0, 1ba30 <bt_smp_encrypt_change+0x160>
   1b9ee:	4962      	ldr	r1, [pc, #392]	; (1bb78 <bt_smp_encrypt_change+0x2a8>)
   1b9f0:	4b60      	ldr	r3, [pc, #384]	; (1bb74 <bt_smp_encrypt_change+0x2a4>)
			BT_ERR("Unable to get random bytes");
   1b9f2:	4863      	ldr	r0, [pc, #396]	; (1bb80 <bt_smp_encrypt_change+0x2b0>)
   1b9f4:	1ac9      	subs	r1, r1, r3
   1b9f6:	08c9      	lsrs	r1, r1, #3
   1b9f8:	0189      	lsls	r1, r1, #6
   1b9fa:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1b9fe:	f004 fb85 	bl	2010c <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1ba02:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1ba06:	079b      	lsls	r3, r3, #30
   1ba08:	f140 80ab 	bpl.w	1bb62 <bt_smp_encrypt_change+0x292>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1ba0c:	2108      	movs	r1, #8
   1ba0e:	4620      	mov	r0, r4
   1ba10:	f008 f8b8 	bl	23b84 <smp_create_pdu.isra.0>
		if (!buf) {
   1ba14:	4606      	mov	r6, r0
   1ba16:	2800      	cmp	r0, #0
   1ba18:	d172      	bne.n	1bb00 <bt_smp_encrypt_change+0x230>
   1ba1a:	4957      	ldr	r1, [pc, #348]	; (1bb78 <bt_smp_encrypt_change+0x2a8>)
   1ba1c:	4b55      	ldr	r3, [pc, #340]	; (1bb74 <bt_smp_encrypt_change+0x2a4>)
			BT_ERR("Unable to allocate Ident Info buffer");
   1ba1e:	4859      	ldr	r0, [pc, #356]	; (1bb84 <bt_smp_encrypt_change+0x2b4>)
   1ba20:	1ac9      	subs	r1, r1, r3
   1ba22:	08c9      	lsrs	r1, r1, #3
   1ba24:	0189      	lsls	r1, r1, #6
   1ba26:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1ba2a:	f004 fb6f 	bl	2010c <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ba2e:	e782      	b.n	1b936 <bt_smp_encrypt_change+0x66>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1ba30:	2106      	movs	r1, #6
   1ba32:	4620      	mov	r0, r4
   1ba34:	f008 f8a6 	bl	23b84 <smp_create_pdu.isra.0>
		if (!buf) {
   1ba38:	4681      	mov	r9, r0
   1ba3a:	b940      	cbnz	r0, 1ba4e <bt_smp_encrypt_change+0x17e>
   1ba3c:	494e      	ldr	r1, [pc, #312]	; (1bb78 <bt_smp_encrypt_change+0x2a8>)
   1ba3e:	4b4d      	ldr	r3, [pc, #308]	; (1bb74 <bt_smp_encrypt_change+0x2a4>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1ba40:	4851      	ldr	r0, [pc, #324]	; (1bb88 <bt_smp_encrypt_change+0x2b8>)
   1ba42:	1ac9      	subs	r1, r1, r3
   1ba44:	08c9      	lsrs	r1, r1, #3
   1ba46:	0189      	lsls	r1, r1, #6
   1ba48:	f041 0101 	orr.w	r1, r1, #1
   1ba4c:	e7d7      	b.n	1b9fe <bt_smp_encrypt_change+0x12e>
	return net_buf_simple_add(&buf->b, len);
   1ba4e:	2110      	movs	r1, #16
   1ba50:	3008      	adds	r0, #8
   1ba52:	f008 fd2c 	bl	244ae <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1ba56:	f898 200c 	ldrb.w	r2, [r8, #12]
   1ba5a:	a901      	add	r1, sp, #4
   1ba5c:	4683      	mov	fp, r0
   1ba5e:	f006 fbc3 	bl	221e8 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1ba62:	f898 000c 	ldrb.w	r0, [r8, #12]
   1ba66:	280f      	cmp	r0, #15
   1ba68:	d805      	bhi.n	1ba76 <bt_smp_encrypt_change+0x1a6>
			(void)memset(info->ltk + keys->enc_size, 0,
   1ba6a:	f1c0 0210 	rsb	r2, r0, #16
   1ba6e:	4651      	mov	r1, sl
   1ba70:	4458      	add	r0, fp
   1ba72:	f006 fbe4 	bl	2223e <memset>
		smp_send(smp, buf, NULL, NULL);
   1ba76:	4649      	mov	r1, r9
   1ba78:	2200      	movs	r2, #0
   1ba7a:	4620      	mov	r0, r4
   1ba7c:	f008 f8a1 	bl	23bc2 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   1ba80:	2107      	movs	r1, #7
   1ba82:	4620      	mov	r0, r4
   1ba84:	f008 f87e 	bl	23b84 <smp_create_pdu.isra.0>
		if (!buf) {
   1ba88:	4681      	mov	r9, r0
   1ba8a:	b940      	cbnz	r0, 1ba9e <bt_smp_encrypt_change+0x1ce>
   1ba8c:	493a      	ldr	r1, [pc, #232]	; (1bb78 <bt_smp_encrypt_change+0x2a8>)
   1ba8e:	4b39      	ldr	r3, [pc, #228]	; (1bb74 <bt_smp_encrypt_change+0x2a4>)
			BT_ERR("Unable to allocate Master Ident buffer");
   1ba90:	483e      	ldr	r0, [pc, #248]	; (1bb8c <bt_smp_encrypt_change+0x2bc>)
   1ba92:	1ac9      	subs	r1, r1, r3
   1ba94:	08c9      	lsrs	r1, r1, #3
   1ba96:	0189      	lsls	r1, r1, #6
   1ba98:	f041 0101 	orr.w	r1, r1, #1
   1ba9c:	e7af      	b.n	1b9fe <bt_smp_encrypt_change+0x12e>
   1ba9e:	210a      	movs	r1, #10
   1baa0:	3008      	adds	r0, #8
   1baa2:	f008 fd04 	bl	244ae <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1baa6:	2208      	movs	r2, #8
   1baa8:	4682      	mov	sl, r0
   1baaa:	a905      	add	r1, sp, #20
   1baac:	3002      	adds	r0, #2
   1baae:	f006 fb9b 	bl	221e8 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1bab2:	2202      	movs	r2, #2
   1bab4:	a907      	add	r1, sp, #28
   1bab6:	4650      	mov	r0, sl
   1bab8:	f006 fb96 	bl	221e8 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1babc:	4649      	mov	r1, r9
   1babe:	4620      	mov	r0, r4
   1bac0:	4a33      	ldr	r2, [pc, #204]	; (1bb90 <bt_smp_encrypt_change+0x2c0>)
   1bac2:	f008 f87e 	bl	23bc2 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bac6:	210d      	movs	r1, #13
   1bac8:	4630      	mov	r0, r6
   1baca:	f008 f806 	bl	23ada <atomic_test_bit>
   1bace:	2800      	cmp	r0, #0
   1bad0:	d097      	beq.n	1ba02 <bt_smp_encrypt_change+0x132>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   1bad2:	4640      	mov	r0, r8
   1bad4:	2101      	movs	r1, #1
   1bad6:	f008 fc8f 	bl	243f8 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   1bada:	a901      	add	r1, sp, #4
   1badc:	2210      	movs	r2, #16
   1bade:	f108 004a 	add.w	r0, r8, #74	; 0x4a
   1bae2:	f006 fb81 	bl	221e8 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   1bae6:	a905      	add	r1, sp, #20
   1bae8:	2208      	movs	r2, #8
   1baea:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1baee:	f006 fb7b 	bl	221e8 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   1baf2:	2202      	movs	r2, #2
   1baf4:	a907      	add	r1, sp, #28
   1baf6:	f108 0048 	add.w	r0, r8, #72	; 0x48
   1bafa:	f006 fb75 	bl	221e8 <memcpy>
   1bafe:	e780      	b.n	1ba02 <bt_smp_encrypt_change+0x132>
   1bb00:	2110      	movs	r1, #16
   1bb02:	3008      	adds	r0, #8
   1bb04:	f008 fcd3 	bl	244ae <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1bb08:	7a39      	ldrb	r1, [r7, #8]
   1bb0a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1bb9c <bt_smp_encrypt_change+0x2cc>
   1bb0e:	3114      	adds	r1, #20
   1bb10:	2210      	movs	r2, #16
   1bb12:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   1bb16:	f006 fb67 	bl	221e8 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1bb1a:	4631      	mov	r1, r6
   1bb1c:	2200      	movs	r2, #0
   1bb1e:	4620      	mov	r0, r4
   1bb20:	f008 f84f 	bl	23bc2 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1bb24:	2109      	movs	r1, #9
   1bb26:	4620      	mov	r0, r4
   1bb28:	f008 f82c 	bl	23b84 <smp_create_pdu.isra.0>
		if (!buf) {
   1bb2c:	4606      	mov	r6, r0
   1bb2e:	b940      	cbnz	r0, 1bb42 <bt_smp_encrypt_change+0x272>
   1bb30:	4911      	ldr	r1, [pc, #68]	; (1bb78 <bt_smp_encrypt_change+0x2a8>)
   1bb32:	4b10      	ldr	r3, [pc, #64]	; (1bb74 <bt_smp_encrypt_change+0x2a4>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1bb34:	4817      	ldr	r0, [pc, #92]	; (1bb94 <bt_smp_encrypt_change+0x2c4>)
   1bb36:	1ac9      	subs	r1, r1, r3
   1bb38:	08c9      	lsrs	r1, r1, #3
   1bb3a:	0189      	lsls	r1, r1, #6
   1bb3c:	f041 0101 	orr.w	r1, r1, #1
   1bb40:	e773      	b.n	1ba2a <bt_smp_encrypt_change+0x15a>
   1bb42:	2107      	movs	r1, #7
   1bb44:	3008      	adds	r0, #8
   1bb46:	f008 fcb2 	bl	244ae <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1bb4a:	7a39      	ldrb	r1, [r7, #8]
   1bb4c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1bb50:	2207      	movs	r2, #7
   1bb52:	4441      	add	r1, r8
   1bb54:	f006 fb48 	bl	221e8 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1bb58:	4a0f      	ldr	r2, [pc, #60]	; (1bb98 <bt_smp_encrypt_change+0x2c8>)
   1bb5a:	4631      	mov	r1, r6
   1bb5c:	4620      	mov	r0, r4
   1bb5e:	f008 f830 	bl	23bc2 <smp_send.isra.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1bb62:	f835 1c08 	ldrh.w	r1, [r5, #-8]
   1bb66:	2900      	cmp	r1, #0
   1bb68:	f47f aee5 	bne.w	1b936 <bt_smp_encrypt_change+0x66>
   1bb6c:	e6d4      	b.n	1b918 <bt_smp_encrypt_change+0x48>
   1bb6e:	bf00      	nop
   1bb70:	00028370 	.word	0x00028370
   1bb74:	000256c4 	.word	0x000256c4
   1bb78:	0002573c 	.word	0x0002573c
   1bb7c:	00028282 	.word	0x00028282
   1bb80:	00028297 	.word	0x00028297
   1bb84:	00028300 	.word	0x00028300
   1bb88:	000282b2 	.word	0x000282b2
   1bb8c:	000282d9 	.word	0x000282d9
   1bb90:	00024357 	.word	0x00024357
   1bb94:	00028325 	.word	0x00028325
   1bb98:	00024363 	.word	0x00024363
   1bb9c:	200002a0 	.word	0x200002a0

0001bba0 <smp_timeout>:
   1bba0:	4b0b      	ldr	r3, [pc, #44]	; (1bbd0 <smp_timeout+0x30>)
   1bba2:	490c      	ldr	r1, [pc, #48]	; (1bbd4 <smp_timeout+0x34>)
{
   1bba4:	b510      	push	{r4, lr}
   1bba6:	1ac9      	subs	r1, r1, r3
   1bba8:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   1bbaa:	0189      	lsls	r1, r1, #6
{
   1bbac:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1bbae:	f041 0101 	orr.w	r1, r1, #1
   1bbb2:	4809      	ldr	r0, [pc, #36]	; (1bbd8 <smp_timeout+0x38>)
   1bbb4:	f004 faaa 	bl	2010c <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1bbb8:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
   1bbbc:	2108      	movs	r1, #8
   1bbbe:	f7ff fc33 	bl	1b428 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1bbc2:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   1bbc6:	2104      	movs	r1, #4
}
   1bbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1bbcc:	f007 bf71 	b.w	23ab2 <atomic_set_bit>
   1bbd0:	000256c4 	.word	0x000256c4
   1bbd4:	0002573c 	.word	0x0002573c
   1bbd8:	0002834f 	.word	0x0002834f

0001bbdc <bt_smp_update_keys>:
{
   1bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbde:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1bbe0:	f7fe fd46 	bl	1a670 <smp_chan_get>
	if (!smp) {
   1bbe4:	4605      	mov	r5, r0
   1bbe6:	2800      	cmp	r0, #0
   1bbe8:	d07c      	beq.n	1bce4 <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1bbea:	1d06      	adds	r6, r0, #4
   1bbec:	2103      	movs	r1, #3
   1bbee:	4630      	mov	r0, r6
   1bbf0:	f007 ff73 	bl	23ada <atomic_test_bit>
   1bbf4:	2800      	cmp	r0, #0
   1bbf6:	d075      	beq.n	1bce4 <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   1bbf8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1bbfc:	b108      	cbz	r0, 1bc02 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1bbfe:	f000 f945 	bl	1be8c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bc02:	f104 0788 	add.w	r7, r4, #136	; 0x88
   1bc06:	7a20      	ldrb	r0, [r4, #8]
   1bc08:	4639      	mov	r1, r7
   1bc0a:	f000 f889 	bl	1bd20 <bt_keys_get_addr>
   1bc0e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1bc12:	b9b0      	cbnz	r0, 1bc42 <bt_smp_update_keys+0x66>
   1bc14:	4a34      	ldr	r2, [pc, #208]	; (1bce8 <bt_smp_update_keys+0x10c>)
   1bc16:	4c35      	ldr	r4, [pc, #212]	; (1bcec <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
   1bc18:	4638      	mov	r0, r7
   1bc1a:	1aa4      	subs	r4, r4, r2
   1bc1c:	f7f8 fa08 	bl	14030 <bt_addr_le_str_real>
   1bc20:	f7f5 fca8 	bl	11574 <z_log_strdup>
   1bc24:	08e4      	lsrs	r4, r4, #3
   1bc26:	01a4      	lsls	r4, r4, #6
   1bc28:	f044 0401 	orr.w	r4, r4, #1
   1bc2c:	4601      	mov	r1, r0
   1bc2e:	4622      	mov	r2, r4
   1bc30:	482f      	ldr	r0, [pc, #188]	; (1bcf0 <bt_smp_update_keys+0x114>)
   1bc32:	f004 fa78 	bl	20126 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1bc36:	4628      	mov	r0, r5
   1bc38:	2108      	movs	r1, #8
}
   1bc3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1bc3e:	f008 ba7b 	b.w	24138 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1bc42:	210e      	movs	r1, #14
   1bc44:	4630      	mov	r0, r6
   1bc46:	f007 ff48 	bl	23ada <atomic_test_bit>
   1bc4a:	b128      	cbz	r0, 1bc58 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1bc4c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1bc50:	7b53      	ldrb	r3, [r2, #13]
   1bc52:	f043 0302 	orr.w	r3, r3, #2
   1bc56:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1bc58:	7a2a      	ldrb	r2, [r5, #8]
   1bc5a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1bc5e:	2a03      	cmp	r2, #3
   1bc60:	7b4b      	ldrb	r3, [r1, #13]
   1bc62:	d836      	bhi.n	1bcd2 <bt_smp_update_keys+0xf6>
   1bc64:	b3c2      	cbz	r2, 1bcd8 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1bc66:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1bc6a:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1bc6c:	7b6b      	ldrb	r3, [r5, #13]
   1bc6e:	7d2a      	ldrb	r2, [r5, #20]
   1bc70:	4293      	cmp	r3, r2
   1bc72:	bf28      	it	cs
   1bc74:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1bc76:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bc78:	4630      	mov	r0, r6
   1bc7a:	2105      	movs	r1, #5
   1bc7c:	f007 ff2d 	bl	23ada <atomic_test_bit>
   1bc80:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1bc84:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bc86:	b350      	cbz	r0, 1bcde <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   1bc88:	f042 0210 	orr.w	r2, r2, #16
   1bc8c:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bc8e:	210d      	movs	r1, #13
   1bc90:	4630      	mov	r0, r6
   1bc92:	f007 ff22 	bl	23ada <atomic_test_bit>
   1bc96:	b328      	cbz	r0, 1bce4 <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1bc98:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1bc9c:	2120      	movs	r1, #32
   1bc9e:	f008 fbab 	bl	243f8 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1bca2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1bca6:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1bcaa:	2210      	movs	r2, #16
   1bcac:	301a      	adds	r0, #26
   1bcae:	f006 fa9b 	bl	221e8 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1bcb2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1bcb6:	2208      	movs	r2, #8
   1bcb8:	2100      	movs	r1, #0
   1bcba:	3010      	adds	r0, #16
   1bcbc:	f006 fabf 	bl	2223e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1bcc0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1bcc4:	2202      	movs	r2, #2
}
   1bcc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1bcca:	2100      	movs	r1, #0
   1bccc:	3018      	adds	r0, #24
   1bcce:	f006 bab6 	b.w	2223e <memset>
	switch (smp->method) {
   1bcd2:	3a05      	subs	r2, #5
   1bcd4:	2a01      	cmp	r2, #1
   1bcd6:	d9c6      	bls.n	1bc66 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1bcd8:	f023 0301 	bic.w	r3, r3, #1
   1bcdc:	e7c5      	b.n	1bc6a <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1bcde:	f022 0210 	bic.w	r2, r2, #16
   1bce2:	735a      	strb	r2, [r3, #13]
}
   1bce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bce6:	bf00      	nop
   1bce8:	000256c4 	.word	0x000256c4
   1bcec:	0002573c 	.word	0x0002573c
   1bcf0:	0002803d 	.word	0x0002803d

0001bcf4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1bcf4:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1bcf6:	4b07      	ldr	r3, [pc, #28]	; (1bd14 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1bcf8:	4807      	ldr	r0, [pc, #28]	; (1bd18 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1bcfa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   1bcfe:	f003 0306 	and.w	r3, r3, #6
   1bd02:	1f9a      	subs	r2, r3, #6
   1bd04:	4253      	negs	r3, r2
   1bd06:	4153      	adcs	r3, r2
   1bd08:	4a04      	ldr	r2, [pc, #16]	; (1bd1c <bt_smp_init+0x28>)
   1bd0a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1bd0c:	f7fb f8c4 	bl	16e98 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1bd10:	2000      	movs	r0, #0
   1bd12:	bd08      	pop	{r3, pc}
   1bd14:	200002a0 	.word	0x200002a0
   1bd18:	20000664 	.word	0x20000664
   1bd1c:	2000349d 	.word	0x2000349d

0001bd20 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1bd20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1bd22:	4c11      	ldr	r4, [pc, #68]	; (1bd68 <bt_keys_get_addr+0x48>)
   1bd24:	7823      	ldrb	r3, [r4, #0]
   1bd26:	4283      	cmp	r3, r0
{
   1bd28:	4605      	mov	r5, r0
   1bd2a:	460e      	mov	r6, r1
   1bd2c:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1bd2e:	d00b      	beq.n	1bd48 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1bd30:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1bd32:	480e      	ldr	r0, [pc, #56]	; (1bd6c <bt_keys_get_addr+0x4c>)
   1bd34:	9400      	str	r4, [sp, #0]
   1bd36:	2207      	movs	r2, #7
   1bd38:	4669      	mov	r1, sp
   1bd3a:	f8cd 4003 	str.w	r4, [sp, #3]
   1bd3e:	f006 fa43 	bl	221c8 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1bd42:	b140      	cbz	r0, 1bd56 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1bd44:	4620      	mov	r0, r4
   1bd46:	e00d      	b.n	1bd64 <bt_keys_get_addr+0x44>
   1bd48:	2207      	movs	r2, #7
   1bd4a:	1c60      	adds	r0, r4, #1
   1bd4c:	f006 fa3c 	bl	221c8 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1bd50:	2800      	cmp	r0, #0
   1bd52:	d1ed      	bne.n	1bd30 <bt_keys_get_addr+0x10>
   1bd54:	e7f6      	b.n	1bd44 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   1bd56:	4805      	ldr	r0, [pc, #20]	; (1bd6c <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1bd58:	703d      	strb	r5, [r7, #0]
   1bd5a:	2207      	movs	r2, #7
   1bd5c:	4631      	mov	r1, r6
   1bd5e:	f006 fa43 	bl	221e8 <memcpy>
		return keys;
   1bd62:	4801      	ldr	r0, [pc, #4]	; (1bd68 <bt_keys_get_addr+0x48>)
}
   1bd64:	b003      	add	sp, #12
   1bd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd68:	2000300c 	.word	0x2000300c
   1bd6c:	2000300d 	.word	0x2000300d

0001bd70 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1bd70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bd72:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1bd74:	4908      	ldr	r1, [pc, #32]	; (1bd98 <bt_foreach_bond+0x28>)
   1bd76:	89cb      	ldrh	r3, [r1, #14]
{
   1bd78:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
   1bd7a:	b153      	cbz	r3, 1bd92 <bt_foreach_bond+0x22>
   1bd7c:	780b      	ldrb	r3, [r1, #0]
   1bd7e:	4283      	cmp	r3, r0
   1bd80:	d107      	bne.n	1bd92 <bt_foreach_bond+0x22>
   1bd82:	3101      	adds	r1, #1
   1bd84:	2207      	movs	r2, #7
   1bd86:	4668      	mov	r0, sp
   1bd88:	f006 fa2e 	bl	221e8 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   1bd8c:	4629      	mov	r1, r5
   1bd8e:	4668      	mov	r0, sp
   1bd90:	47a0      	blx	r4
		}
	}
}
   1bd92:	b003      	add	sp, #12
   1bd94:	bd30      	pop	{r4, r5, pc}
   1bd96:	bf00      	nop
   1bd98:	2000300c 	.word	0x2000300c

0001bd9c <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1bd9c:	460b      	mov	r3, r1
   1bd9e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1bda0:	4a04      	ldr	r2, [pc, #16]	; (1bdb4 <bt_keys_foreach+0x18>)
{
   1bda2:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1bda4:	89d4      	ldrh	r4, [r2, #14]
   1bda6:	4204      	tst	r4, r0
   1bda8:	d002      	beq.n	1bdb0 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1bdaa:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1bdac:	4610      	mov	r0, r2
   1bdae:	4718      	bx	r3
}
   1bdb0:	bc10      	pop	{r4}
   1bdb2:	4770      	bx	lr
   1bdb4:	2000300c 	.word	0x2000300c

0001bdb8 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1bdb8:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1bdba:	4903      	ldr	r1, [pc, #12]	; (1bdc8 <keys_commit+0x10>)
   1bdbc:	2200      	movs	r2, #0
   1bdbe:	2002      	movs	r0, #2
   1bdc0:	f7ff ffec 	bl	1bd9c <bt_keys_foreach>
	}

	return 0;
}
   1bdc4:	2000      	movs	r0, #0
   1bdc6:	bd08      	pop	{r3, pc}
   1bdc8:	000243d5 	.word	0x000243d5

0001bdcc <bt_keys_find>:
{
   1bdcc:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1bdce:	4c09      	ldr	r4, [pc, #36]	; (1bdf4 <bt_keys_find+0x28>)
{
   1bdd0:	460b      	mov	r3, r1
   1bdd2:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1bdd4:	89e2      	ldrh	r2, [r4, #14]
   1bdd6:	4202      	tst	r2, r0
   1bdd8:	d007      	beq.n	1bdea <bt_keys_find+0x1e>
   1bdda:	7822      	ldrb	r2, [r4, #0]
   1bddc:	429a      	cmp	r2, r3
   1bdde:	d104      	bne.n	1bdea <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1bde0:	2207      	movs	r2, #7
   1bde2:	1c60      	adds	r0, r4, #1
   1bde4:	f006 f9f0 	bl	221c8 <memcmp>
   1bde8:	b108      	cbz	r0, 1bdee <bt_keys_find+0x22>
	return NULL;
   1bdea:	2000      	movs	r0, #0
}
   1bdec:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1bdee:	4620      	mov	r0, r4
   1bdf0:	e7fc      	b.n	1bdec <bt_keys_find+0x20>
   1bdf2:	bf00      	nop
   1bdf4:	2000300c 	.word	0x2000300c

0001bdf8 <bt_keys_find_irk>:
{
   1bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1bdfa:	780b      	ldrb	r3, [r1, #0]
   1bdfc:	2b01      	cmp	r3, #1
   1bdfe:	4607      	mov	r7, r0
   1be00:	460c      	mov	r4, r1
   1be02:	d001      	beq.n	1be08 <bt_keys_find_irk+0x10>
		return NULL;
   1be04:	2000      	movs	r0, #0
}
   1be06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1be08:	798b      	ldrb	r3, [r1, #6]
   1be0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1be0e:	2b40      	cmp	r3, #64	; 0x40
   1be10:	d1f8      	bne.n	1be04 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1be12:	4d13      	ldr	r5, [pc, #76]	; (1be60 <bt_keys_find_irk+0x68>)
   1be14:	89eb      	ldrh	r3, [r5, #14]
   1be16:	f013 0f02 	tst.w	r3, #2
   1be1a:	462e      	mov	r6, r5
   1be1c:	d0f2      	beq.n	1be04 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1be1e:	7833      	ldrb	r3, [r6, #0]
   1be20:	42bb      	cmp	r3, r7
   1be22:	d10b      	bne.n	1be3c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1be24:	2206      	movs	r2, #6
   1be26:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1be2a:	1c60      	adds	r0, r4, #1
   1be2c:	f006 f9cc 	bl	221c8 <memcmp>
   1be30:	b908      	cbnz	r0, 1be36 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   1be32:	4628      	mov	r0, r5
   1be34:	e7e7      	b.n	1be06 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1be36:	89f3      	ldrh	r3, [r6, #14]
   1be38:	079b      	lsls	r3, r3, #30
   1be3a:	d5e3      	bpl.n	1be04 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1be3c:	7833      	ldrb	r3, [r6, #0]
   1be3e:	42bb      	cmp	r3, r7
   1be40:	d1e0      	bne.n	1be04 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1be42:	3401      	adds	r4, #1
   1be44:	4807      	ldr	r0, [pc, #28]	; (1be64 <bt_keys_find_irk+0x6c>)
   1be46:	4621      	mov	r1, r4
   1be48:	f006 fa5c 	bl	22304 <bt_rpa_irk_matches>
   1be4c:	2800      	cmp	r0, #0
   1be4e:	d0d9      	beq.n	1be04 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1be50:	4805      	ldr	r0, [pc, #20]	; (1be68 <bt_keys_find_irk+0x70>)
   1be52:	2206      	movs	r2, #6
   1be54:	4621      	mov	r1, r4
   1be56:	f006 f9c7 	bl	221e8 <memcpy>
			return &key_pool[i];
   1be5a:	4801      	ldr	r0, [pc, #4]	; (1be60 <bt_keys_find_irk+0x68>)
}
   1be5c:	e7d3      	b.n	1be06 <bt_keys_find_irk+0xe>
   1be5e:	bf00      	nop
   1be60:	2000300c 	.word	0x2000300c
   1be64:	20003036 	.word	0x20003036
   1be68:	20003046 	.word	0x20003046

0001be6c <bt_keys_find_addr>:
{
   1be6c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1be6e:	4c06      	ldr	r4, [pc, #24]	; (1be88 <bt_keys_find_addr+0x1c>)
   1be70:	7823      	ldrb	r3, [r4, #0]
   1be72:	4283      	cmp	r3, r0
   1be74:	d104      	bne.n	1be80 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1be76:	2207      	movs	r2, #7
   1be78:	1c60      	adds	r0, r4, #1
   1be7a:	f006 f9a5 	bl	221c8 <memcmp>
   1be7e:	b108      	cbz	r0, 1be84 <bt_keys_find_addr+0x18>
	return NULL;
   1be80:	2000      	movs	r0, #0
}
   1be82:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1be84:	4620      	mov	r0, r4
   1be86:	e7fc      	b.n	1be82 <bt_keys_find_addr+0x16>
   1be88:	2000300c 	.word	0x2000300c

0001be8c <bt_keys_clear>:
{
   1be8c:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1be8e:	7a03      	ldrb	r3, [r0, #8]
   1be90:	075b      	lsls	r3, r3, #29
{
   1be92:	b08c      	sub	sp, #48	; 0x30
   1be94:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1be96:	d501      	bpl.n	1be9c <bt_keys_clear+0x10>
		bt_id_del(keys);
   1be98:	f7fa fa64 	bl	16364 <bt_id_del>
		if (keys->id) {
   1be9c:	4625      	mov	r5, r4
   1be9e:	f815 2b01 	ldrb.w	r2, [r5], #1
   1bea2:	b1aa      	cbz	r2, 1bed0 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1bea4:	ae02      	add	r6, sp, #8
   1bea6:	2104      	movs	r1, #4
   1bea8:	4630      	mov	r0, r6
   1beaa:	f003 fc35 	bl	1f718 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1beae:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1beb0:	462b      	mov	r3, r5
   1beb2:	4a08      	ldr	r2, [pc, #32]	; (1bed4 <bt_keys_clear+0x48>)
   1beb4:	2124      	movs	r1, #36	; 0x24
   1beb6:	a803      	add	r0, sp, #12
   1beb8:	f7f8 fb84 	bl	145c4 <bt_settings_encode_key>
		settings_delete(key);
   1bebc:	a803      	add	r0, sp, #12
   1bebe:	f004 fe68 	bl	20b92 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1bec2:	225c      	movs	r2, #92	; 0x5c
   1bec4:	2100      	movs	r1, #0
   1bec6:	4620      	mov	r0, r4
   1bec8:	f006 f9b9 	bl	2223e <memset>
}
   1becc:	b00c      	add	sp, #48	; 0x30
   1bece:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   1bed0:	9200      	str	r2, [sp, #0]
   1bed2:	e7ed      	b.n	1beb0 <bt_keys_clear+0x24>
   1bed4:	00028461 	.word	0x00028461

0001bed8 <keys_set>:
{
   1bed8:	b570      	push	{r4, r5, r6, lr}
   1beda:	4614      	mov	r4, r2
   1bedc:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1bede:	4605      	mov	r5, r0
   1bee0:	b970      	cbnz	r0, 1bf00 <keys_set+0x28>
   1bee2:	4946      	ldr	r1, [pc, #280]	; (1bffc <keys_set+0x124>)
   1bee4:	4b46      	ldr	r3, [pc, #280]	; (1c000 <keys_set+0x128>)
		BT_ERR("Insufficient number of arguments");
   1bee6:	4847      	ldr	r0, [pc, #284]	; (1c004 <keys_set+0x12c>)
   1bee8:	1ac9      	subs	r1, r1, r3
   1beea:	08c9      	lsrs	r1, r1, #3
   1beec:	0189      	lsls	r1, r1, #6
   1beee:	f041 0101 	orr.w	r1, r1, #1
   1bef2:	f004 f90b 	bl	2010c <log_0>
		return -EINVAL;
   1bef6:	f06f 0415 	mvn.w	r4, #21
}
   1befa:	4620      	mov	r0, r4
   1befc:	b018      	add	sp, #96	; 0x60
   1befe:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1bf00:	2250      	movs	r2, #80	; 0x50
   1bf02:	a904      	add	r1, sp, #16
   1bf04:	4618      	mov	r0, r3
   1bf06:	47a0      	blx	r4
	if (len < 0) {
   1bf08:	1e04      	subs	r4, r0, #0
   1bf0a:	da0b      	bge.n	1bf24 <keys_set+0x4c>
   1bf0c:	4a3b      	ldr	r2, [pc, #236]	; (1bffc <keys_set+0x124>)
   1bf0e:	4b3c      	ldr	r3, [pc, #240]	; (1c000 <keys_set+0x128>)
		BT_ERR("Failed to read value (err %zd)", len);
   1bf10:	483d      	ldr	r0, [pc, #244]	; (1c008 <keys_set+0x130>)
   1bf12:	1ad2      	subs	r2, r2, r3
   1bf14:	08d2      	lsrs	r2, r2, #3
   1bf16:	0192      	lsls	r2, r2, #6
   1bf18:	f042 0201 	orr.w	r2, r2, #1
   1bf1c:	4621      	mov	r1, r4
   1bf1e:	f004 f902 	bl	20126 <log_1>
   1bf22:	e7e8      	b.n	1bef6 <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   1bf24:	a902      	add	r1, sp, #8
   1bf26:	4628      	mov	r0, r5
   1bf28:	f006 fa58 	bl	223dc <bt_settings_decode_key>
	if (err) {
   1bf2c:	4606      	mov	r6, r0
   1bf2e:	b148      	cbz	r0, 1bf44 <keys_set+0x6c>
   1bf30:	4a32      	ldr	r2, [pc, #200]	; (1bffc <keys_set+0x124>)
   1bf32:	4b33      	ldr	r3, [pc, #204]	; (1c000 <keys_set+0x128>)
		BT_ERR("Unable to decode address %s", name);
   1bf34:	4835      	ldr	r0, [pc, #212]	; (1c00c <keys_set+0x134>)
   1bf36:	1ad2      	subs	r2, r2, r3
   1bf38:	08d2      	lsrs	r2, r2, #3
   1bf3a:	0192      	lsls	r2, r2, #6
   1bf3c:	f042 0201 	orr.w	r2, r2, #1
   1bf40:	4629      	mov	r1, r5
   1bf42:	e7ec      	b.n	1bf1e <keys_set+0x46>
	settings_name_next(name, &next);
   1bf44:	a901      	add	r1, sp, #4
   1bf46:	4628      	mov	r0, r5
   1bf48:	f004 fe4a 	bl	20be0 <settings_name_next>
	if (!next) {
   1bf4c:	9801      	ldr	r0, [sp, #4]
   1bf4e:	b120      	cbz	r0, 1bf5a <keys_set+0x82>
		id = strtol(next, NULL, 10);
   1bf50:	220a      	movs	r2, #10
   1bf52:	4631      	mov	r1, r6
   1bf54:	f006 f87a 	bl	2204c <strtol>
   1bf58:	b2c0      	uxtb	r0, r0
	if (!len) {
   1bf5a:	b9e4      	cbnz	r4, 1bf96 <keys_set+0xbe>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1bf5c:	4601      	mov	r1, r0
   1bf5e:	aa02      	add	r2, sp, #8
   1bf60:	203f      	movs	r0, #63	; 0x3f
   1bf62:	f7ff ff33 	bl	1bdcc <bt_keys_find>
		if (keys) {
   1bf66:	b120      	cbz	r0, 1bf72 <keys_set+0x9a>
			(void)memset(keys, 0, sizeof(*keys));
   1bf68:	225c      	movs	r2, #92	; 0x5c
   1bf6a:	4621      	mov	r1, r4
   1bf6c:	f006 f967 	bl	2223e <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1bf70:	e7c3      	b.n	1befa <keys_set+0x22>
   1bf72:	4a23      	ldr	r2, [pc, #140]	; (1c000 <keys_set+0x128>)
   1bf74:	4d21      	ldr	r5, [pc, #132]	; (1bffc <keys_set+0x124>)
			BT_WARN("Unable to find deleted keys for %s",
   1bf76:	a802      	add	r0, sp, #8
   1bf78:	1aad      	subs	r5, r5, r2
   1bf7a:	f7f8 f859 	bl	14030 <bt_addr_le_str_real>
   1bf7e:	f7f5 faf9 	bl	11574 <z_log_strdup>
   1bf82:	08ed      	lsrs	r5, r5, #3
   1bf84:	01ad      	lsls	r5, r5, #6
   1bf86:	f045 0502 	orr.w	r5, r5, #2
   1bf8a:	4601      	mov	r1, r0
   1bf8c:	462a      	mov	r2, r5
   1bf8e:	4820      	ldr	r0, [pc, #128]	; (1c010 <keys_set+0x138>)
   1bf90:	f004 f8c9 	bl	20126 <log_1>
   1bf94:	e7b1      	b.n	1befa <keys_set+0x22>
	keys = bt_keys_get_addr(id, &addr);
   1bf96:	a902      	add	r1, sp, #8
   1bf98:	f7ff fec2 	bl	1bd20 <bt_keys_get_addr>
	if (!keys) {
   1bf9c:	4605      	mov	r5, r0
   1bf9e:	b998      	cbnz	r0, 1bfc8 <keys_set+0xf0>
   1bfa0:	4a17      	ldr	r2, [pc, #92]	; (1c000 <keys_set+0x128>)
   1bfa2:	4c16      	ldr	r4, [pc, #88]	; (1bffc <keys_set+0x124>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1bfa4:	a802      	add	r0, sp, #8
   1bfa6:	1aa4      	subs	r4, r4, r2
   1bfa8:	f7f8 f842 	bl	14030 <bt_addr_le_str_real>
   1bfac:	f7f5 fae2 	bl	11574 <z_log_strdup>
   1bfb0:	08e4      	lsrs	r4, r4, #3
   1bfb2:	01a4      	lsls	r4, r4, #6
   1bfb4:	f044 0401 	orr.w	r4, r4, #1
   1bfb8:	4601      	mov	r1, r0
   1bfba:	4622      	mov	r2, r4
   1bfbc:	4815      	ldr	r0, [pc, #84]	; (1c014 <keys_set+0x13c>)
   1bfbe:	f004 f8b2 	bl	20126 <log_1>
		return -ENOMEM;
   1bfc2:	f06f 040b 	mvn.w	r4, #11
   1bfc6:	e798      	b.n	1befa <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   1bfc8:	2c50      	cmp	r4, #80	; 0x50
   1bfca:	d00f      	beq.n	1bfec <keys_set+0x114>
   1bfcc:	4a0c      	ldr	r2, [pc, #48]	; (1c000 <keys_set+0x128>)
   1bfce:	4b0b      	ldr	r3, [pc, #44]	; (1bffc <keys_set+0x124>)
			BT_ERR("Invalid key length %zd != %zu", len,
   1bfd0:	4811      	ldr	r0, [pc, #68]	; (1c018 <keys_set+0x140>)
   1bfd2:	1a9b      	subs	r3, r3, r2
   1bfd4:	08db      	lsrs	r3, r3, #3
   1bfd6:	019b      	lsls	r3, r3, #6
   1bfd8:	f043 0301 	orr.w	r3, r3, #1
   1bfdc:	2250      	movs	r2, #80	; 0x50
   1bfde:	4621      	mov	r1, r4
   1bfe0:	f004 f8b5 	bl	2014e <log_2>
			bt_keys_clear(keys);
   1bfe4:	4628      	mov	r0, r5
   1bfe6:	f7ff ff51 	bl	1be8c <bt_keys_clear>
			return -EINVAL;
   1bfea:	e784      	b.n	1bef6 <keys_set+0x1e>
		memcpy(keys->storage_start, val, len);
   1bfec:	4622      	mov	r2, r4
   1bfee:	a904      	add	r1, sp, #16
   1bff0:	300c      	adds	r0, #12
   1bff2:	f006 f8f9 	bl	221e8 <memcpy>
	return 0;
   1bff6:	2400      	movs	r4, #0
   1bff8:	e77f      	b.n	1befa <keys_set+0x22>
   1bffa:	bf00      	nop
   1bffc:	0002571c 	.word	0x0002571c
   1c000:	000256c4 	.word	0x000256c4
   1c004:	00026c5f 	.word	0x00026c5f
   1c008:	000283c2 	.word	0x000283c2
   1c00c:	00027e14 	.word	0x00027e14
   1c010:	000283e1 	.word	0x000283e1
   1c014:	00028404 	.word	0x00028404
   1c018:	00028423 	.word	0x00028423

0001c01c <bt_keys_store>:
{
   1c01c:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1c01e:	4605      	mov	r5, r0
{
   1c020:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1c022:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1c026:	4604      	mov	r4, r0
	if (keys->id) {
   1c028:	b30a      	cbz	r2, 1c06e <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   1c02a:	ae02      	add	r6, sp, #8
   1c02c:	2104      	movs	r1, #4
   1c02e:	4630      	mov	r0, r6
   1c030:	f003 fb72 	bl	1f718 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c034:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c036:	4a0f      	ldr	r2, [pc, #60]	; (1c074 <bt_keys_store+0x58>)
   1c038:	462b      	mov	r3, r5
   1c03a:	2124      	movs	r1, #36	; 0x24
   1c03c:	a803      	add	r0, sp, #12
   1c03e:	f7f8 fac1 	bl	145c4 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1c042:	f104 010c 	add.w	r1, r4, #12
   1c046:	2250      	movs	r2, #80	; 0x50
   1c048:	a803      	add	r0, sp, #12
   1c04a:	f7f6 fb75 	bl	12738 <settings_save_one>
	if (err) {
   1c04e:	4604      	mov	r4, r0
   1c050:	b150      	cbz	r0, 1c068 <bt_keys_store+0x4c>
   1c052:	4a09      	ldr	r2, [pc, #36]	; (1c078 <bt_keys_store+0x5c>)
   1c054:	4b09      	ldr	r3, [pc, #36]	; (1c07c <bt_keys_store+0x60>)
   1c056:	1ad2      	subs	r2, r2, r3
   1c058:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   1c05a:	0192      	lsls	r2, r2, #6
   1c05c:	4601      	mov	r1, r0
   1c05e:	f042 0201 	orr.w	r2, r2, #1
   1c062:	4807      	ldr	r0, [pc, #28]	; (1c080 <bt_keys_store+0x64>)
   1c064:	f004 f85f 	bl	20126 <log_1>
}
   1c068:	4620      	mov	r0, r4
   1c06a:	b00c      	add	sp, #48	; 0x30
   1c06c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c06e:	9200      	str	r2, [sp, #0]
   1c070:	e7e1      	b.n	1c036 <bt_keys_store+0x1a>
   1c072:	bf00      	nop
   1c074:	00028461 	.word	0x00028461
   1c078:	0002571c 	.word	0x0002571c
   1c07c:	000256c4 	.word	0x000256c4
   1c080:	00028441 	.word	0x00028441

0001c084 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1c084:	4b02      	ldr	r3, [pc, #8]	; (1c090 <net_buf_pool_get+0xc>)
   1c086:	2228      	movs	r2, #40	; 0x28
   1c088:	fb02 3000 	mla	r0, r2, r0, r3
   1c08c:	4770      	bx	lr
   1c08e:	bf00      	nop
   1c090:	200008e8 	.word	0x200008e8

0001c094 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c094:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1c096:	4a05      	ldr	r2, [pc, #20]	; (1c0ac <net_buf_id+0x18>)
   1c098:	2128      	movs	r1, #40	; 0x28
   1c09a:	fb01 2303 	mla	r3, r1, r3, r2
   1c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c0a0:	1ac0      	subs	r0, r0, r3
}
   1c0a2:	4b03      	ldr	r3, [pc, #12]	; (1c0b0 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1c0a4:	10c0      	asrs	r0, r0, #3
}
   1c0a6:	4358      	muls	r0, r3
   1c0a8:	4770      	bx	lr
   1c0aa:	bf00      	nop
   1c0ac:	200008e8 	.word	0x200008e8
   1c0b0:	aaaaaaab 	.word	0xaaaaaaab

0001c0b4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1c0b4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c0b6:	4a0a      	ldr	r2, [pc, #40]	; (1c0e0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c0b8:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c0ba:	2428      	movs	r4, #40	; 0x28
   1c0bc:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1c0c0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c0c2:	6a1b      	ldr	r3, [r3, #32]
   1c0c4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1c0c6:	6823      	ldr	r3, [r4, #0]
   1c0c8:	429a      	cmp	r2, r3
   1c0ca:	bf94      	ite	ls
   1c0cc:	600a      	strls	r2, [r1, #0]
   1c0ce:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1c0d0:	f7ff ffe0 	bl	1c094 <net_buf_id>
   1c0d4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1c0d8:	fb02 3000 	mla	r0, r2, r0, r3
   1c0dc:	bd10      	pop	{r4, pc}
   1c0de:	bf00      	nop
   1c0e0:	200008e8 	.word	0x200008e8

0001c0e4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1c0e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c0e8:	4605      	mov	r5, r0
   1c0ea:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c0ec:	4610      	mov	r0, r2
   1c0ee:	4619      	mov	r1, r3
{
   1c0f0:	4616      	mov	r6, r2
   1c0f2:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c0f4:	f008 ffec 	bl	250d0 <sys_clock_timeout_end_calc>
   1c0f8:	4680      	mov	r8, r0
   1c0fa:	4689      	mov	r9, r1
	__asm__ volatile(
   1c0fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c100:	f3ef 8a11 	mrs	sl, BASEPRI
   1c104:	f383 8811 	msr	BASEPRI, r3
   1c108:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c10c:	8b6b      	ldrh	r3, [r5, #26]
   1c10e:	2b00      	cmp	r3, #0
   1c110:	d054      	beq.n	1c1bc <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c112:	8b2a      	ldrh	r2, [r5, #24]
   1c114:	429a      	cmp	r2, r3
   1c116:	d93d      	bls.n	1c194 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1c118:	2200      	movs	r2, #0
   1c11a:	2300      	movs	r3, #0
   1c11c:	4628      	mov	r0, r5
   1c11e:	f002 fa4f 	bl	1e5c0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1c122:	4604      	mov	r4, r0
   1c124:	2800      	cmp	r0, #0
   1c126:	d035      	beq.n	1c194 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1c128:	f38a 8811 	msr	BASEPRI, sl
   1c12c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c130:	9b01      	ldr	r3, [sp, #4]
   1c132:	2b00      	cmp	r3, #0
   1c134:	d052      	beq.n	1c1dc <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c136:	ea56 0307 	orrs.w	r3, r6, r7
   1c13a:	d010      	beq.n	1c15e <net_buf_alloc_len+0x7a>
   1c13c:	1c7b      	adds	r3, r7, #1
   1c13e:	bf08      	it	eq
   1c140:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1c144:	d00b      	beq.n	1c15e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1c146:	f003 f98d 	bl	1f464 <sys_clock_tick_get>
   1c14a:	ebb8 0600 	subs.w	r6, r8, r0
   1c14e:	eb69 0701 	sbc.w	r7, r9, r1
   1c152:	2e00      	cmp	r6, #0
   1c154:	f177 0300 	sbcs.w	r3, r7, #0
   1c158:	bfbc      	itt	lt
   1c15a:	2600      	movlt	r6, #0
   1c15c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c15e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1c160:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1c1f4 <net_buf_alloc_len+0x110>
   1c164:	2228      	movs	r2, #40	; 0x28
   1c166:	fb02 8303 	mla	r3, r2, r3, r8
   1c16a:	a901      	add	r1, sp, #4
   1c16c:	6a1b      	ldr	r3, [r3, #32]
   1c16e:	681b      	ldr	r3, [r3, #0]
   1c170:	4632      	mov	r2, r6
   1c172:	681d      	ldr	r5, [r3, #0]
   1c174:	4620      	mov	r0, r4
   1c176:	463b      	mov	r3, r7
   1c178:	47a8      	blx	r5
   1c17a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c17c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1c17e:	bb70      	cbnz	r0, 1c1de <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1c180:	79a0      	ldrb	r0, [r4, #6]
   1c182:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c186:	4621      	mov	r1, r4
   1c188:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1c18c:	f008 fd0d 	bl	24baa <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1c190:	462c      	mov	r4, r5
}
   1c192:	e01f      	b.n	1c1d4 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1c194:	8b68      	ldrh	r0, [r5, #26]
   1c196:	1e43      	subs	r3, r0, #1
   1c198:	836b      	strh	r3, [r5, #26]
   1c19a:	f38a 8811 	msr	BASEPRI, sl
   1c19e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1c1a2:	8b2c      	ldrh	r4, [r5, #24]
   1c1a4:	1a24      	subs	r4, r4, r0
   1c1a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1c1a8:	2318      	movs	r3, #24
   1c1aa:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1c1ae:	4811      	ldr	r0, [pc, #68]	; (1c1f4 <net_buf_alloc_len+0x110>)
   1c1b0:	4b11      	ldr	r3, [pc, #68]	; (1c1f8 <net_buf_alloc_len+0x114>)
   1c1b2:	1a2d      	subs	r5, r5, r0
   1c1b4:	10ed      	asrs	r5, r5, #3
   1c1b6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1c1b8:	71a5      	strb	r5, [r4, #6]
		goto success;
   1c1ba:	e7b9      	b.n	1c130 <net_buf_alloc_len+0x4c>
   1c1bc:	f38a 8811 	msr	BASEPRI, sl
   1c1c0:	f3bf 8f6f 	isb	sy
   1c1c4:	4632      	mov	r2, r6
   1c1c6:	463b      	mov	r3, r7
   1c1c8:	4628      	mov	r0, r5
   1c1ca:	f002 f9f9 	bl	1e5c0 <z_impl_k_queue_get>
	if (!buf) {
   1c1ce:	4604      	mov	r4, r0
   1c1d0:	2800      	cmp	r0, #0
   1c1d2:	d1ad      	bne.n	1c130 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c1d4:	4620      	mov	r0, r4
   1c1d6:	b002      	add	sp, #8
   1c1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1c1dc:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1c1de:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1c1e0:	2201      	movs	r2, #1
	buf->frags = NULL;
   1c1e2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1c1e4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1c1e6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1c1e8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1c1ea:	6923      	ldr	r3, [r4, #16]
   1c1ec:	81e2      	strh	r2, [r4, #14]
   1c1ee:	60a3      	str	r3, [r4, #8]
	return buf;
   1c1f0:	e7f0      	b.n	1c1d4 <net_buf_alloc_len+0xf0>
   1c1f2:	bf00      	nop
   1c1f4:	200008e8 	.word	0x200008e8
   1c1f8:	cccccccd 	.word	0xcccccccd

0001c1fc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c200:	4d17      	ldr	r5, [pc, #92]	; (1c260 <net_buf_unref+0x64>)
   1c202:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1c204:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1c206:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1c208:	b90c      	cbnz	r4, 1c20e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1c20e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1c210:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1c214:	3b01      	subs	r3, #1
   1c216:	b2db      	uxtb	r3, r3
   1c218:	7123      	strb	r3, [r4, #4]
   1c21a:	2b00      	cmp	r3, #0
   1c21c:	d1f5      	bne.n	1c20a <net_buf_unref+0xe>
		if (buf->__buf) {
   1c21e:	6921      	ldr	r1, [r4, #16]
   1c220:	b159      	cbz	r1, 1c23a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c222:	7963      	ldrb	r3, [r4, #5]
   1c224:	079b      	lsls	r3, r3, #30
   1c226:	d407      	bmi.n	1c238 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1c228:	79a3      	ldrb	r3, [r4, #6]
   1c22a:	fb07 5303 	mla	r3, r7, r3, r5
   1c22e:	4620      	mov	r0, r4
   1c230:	6a1b      	ldr	r3, [r3, #32]
   1c232:	681b      	ldr	r3, [r3, #0]
   1c234:	689b      	ldr	r3, [r3, #8]
   1c236:	4798      	blx	r3
			buf->__buf = NULL;
   1c238:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1c23a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1c23c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1c23e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1c242:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1c244:	69db      	ldr	r3, [r3, #28]
   1c246:	b11b      	cbz	r3, 1c250 <net_buf_unref+0x54>
			pool->destroy(buf);
   1c248:	4620      	mov	r0, r4
   1c24a:	4798      	blx	r3
{
   1c24c:	4644      	mov	r4, r8
   1c24e:	e7db      	b.n	1c208 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1c250:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c254:	4621      	mov	r1, r4
   1c256:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1c25a:	f008 fca6 	bl	24baa <k_queue_prepend>
}
   1c25e:	e7f5      	b.n	1c24c <net_buf_unref+0x50>
   1c260:	200008e8 	.word	0x200008e8

0001c264 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c264:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1c266:	4b09      	ldr	r3, [pc, #36]	; (1c28c <gpio_nrfx_init+0x28>)
   1c268:	781a      	ldrb	r2, [r3, #0]
   1c26a:	b96a      	cbnz	r2, 1c288 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1c26c:	2101      	movs	r1, #1
   1c26e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c270:	2006      	movs	r0, #6
   1c272:	2105      	movs	r1, #5
   1c274:	f7f7 f9da 	bl	1362c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1c278:	2006      	movs	r0, #6
   1c27a:	f7f7 f9a5 	bl	135c8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c27e:	4b04      	ldr	r3, [pc, #16]	; (1c290 <gpio_nrfx_init+0x2c>)
   1c280:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c284:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1c288:	2000      	movs	r0, #0
   1c28a:	bd08      	pop	{r3, pc}
   1c28c:	2000349e 	.word	0x2000349e
   1c290:	40006000 	.word	0x40006000

0001c294 <gpio_nrfx_pin_interrupt_configure>:
{
   1c294:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c296:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c298:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1c29a:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c29c:	7a09      	ldrb	r1, [r1, #8]
   1c29e:	f005 041f 	and.w	r4, r5, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1c2a2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1c2a6:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
   1c2aa:	d10c      	bne.n	1c2c6 <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1c2ac:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c2b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1c2b4:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1c2b8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c2bc:	07c8      	lsls	r0, r1, #31
   1c2be:	d507      	bpl.n	1c2d0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   1c2c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c2c4:	e093      	b.n	1c3ee <gpio_nrfx_pin_interrupt_configure+0x15a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1c2c6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1c2ca:	68f1      	ldr	r1, [r6, #12]
   1c2cc:	f000 8091 	beq.w	1c3f2 <gpio_nrfx_pin_interrupt_configure+0x15e>
   1c2d0:	68f0      	ldr	r0, [r6, #12]
   1c2d2:	2101      	movs	r1, #1
   1c2d4:	40a9      	lsls	r1, r5
   1c2d6:	4301      	orrs	r1, r0
   1c2d8:	6970      	ldr	r0, [r6, #20]
   1c2da:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1c2dc:	2101      	movs	r1, #1
   1c2de:	40a9      	lsls	r1, r5
   1c2e0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1c2e4:	69b2      	ldr	r2, [r6, #24]
   1c2e6:	bf0c      	ite	eq
   1c2e8:	4308      	orreq	r0, r1
   1c2ea:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1c2ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1c2f0:	bf0c      	ite	eq
   1c2f2:	430a      	orreq	r2, r1
   1c2f4:	438a      	bicne	r2, r1
   1c2f6:	61b2      	str	r2, [r6, #24]
   1c2f8:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1c2fa:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1c2fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1c300:	bf0c      	ite	eq
   1c302:	4311      	orreq	r1, r2
   1c304:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1c308:	4a46      	ldr	r2, [pc, #280]	; (1c424 <gpio_nrfx_pin_interrupt_configure+0x190>)
   1c30a:	6131      	str	r1, [r6, #16]
   1c30c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1c310:	2000      	movs	r0, #0
   1c312:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1c314:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1c318:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1c31c:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1c320:	428c      	cmp	r4, r1
   1c322:	d16b      	bne.n	1c3fc <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
   1c324:	fa23 f100 	lsr.w	r1, r3, r0
   1c328:	07c9      	lsls	r1, r1, #31
   1c32a:	d567      	bpl.n	1c3fc <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1c32c:	0083      	lsls	r3, r0, #2
   1c32e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c332:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1c336:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1c33a:	f021 0101 	bic.w	r1, r1, #1
   1c33e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1c342:	2301      	movs	r3, #1
   1c344:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1c346:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1c34a:	b2c0      	uxtb	r0, r0
   1c34c:	f001 fca0 	bl	1dc90 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1c350:	4620      	mov	r0, r4
   1c352:	2100      	movs	r1, #0
   1c354:	f008 f8ee 	bl	24534 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1c358:	68f0      	ldr	r0, [r6, #12]
   1c35a:	40e8      	lsrs	r0, r5
   1c35c:	f010 0001 	ands.w	r0, r0, #1
   1c360:	d045      	beq.n	1c3ee <gpio_nrfx_pin_interrupt_configure+0x15a>
		if (data->trig_edge & BIT(pin)) {
   1c362:	6970      	ldr	r0, [r6, #20]
   1c364:	40e8      	lsrs	r0, r5
   1c366:	f010 0201 	ands.w	r2, r0, #1
   1c36a:	d04e      	beq.n	1c40a <gpio_nrfx_pin_interrupt_configure+0x176>
				if (data->double_edge & BIT(pin)) {
   1c36c:	69b3      	ldr	r3, [r6, #24]
   1c36e:	40eb      	lsrs	r3, r5
   1c370:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1c372:	bf5f      	itttt	pl
   1c374:	6931      	ldrpl	r1, [r6, #16]
   1c376:	fa21 f505 	lsrpl.w	r5, r1, r5
   1c37a:	f005 0501 	andpl.w	r5, r5, #1
   1c37e:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1c382:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1c386:	bf54      	ite	pl
   1c388:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1c38a:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1c38c:	f001 fca2 	bl	1dcd4 <nrfx_gpiote_channel_alloc>
   1c390:	4b25      	ldr	r3, [pc, #148]	; (1c428 <gpio_nrfx_pin_interrupt_configure+0x194>)
   1c392:	4298      	cmp	r0, r3
   1c394:	d136      	bne.n	1c404 <gpio_nrfx_pin_interrupt_configure+0x170>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1c396:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1c39a:	008b      	lsls	r3, r1, #2
   1c39c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c3a0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c3a4:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1c3a6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1c3aa:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1c3ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1c3b2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c3b6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1c3ba:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1c3be:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
   1c3c0:	008a      	lsls	r2, r1, #2
   1c3c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c3c6:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c3ca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c3ce:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c3d0:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c3d4:	6010      	str	r0, [r2, #0]
   1c3d6:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1c3d8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1c3dc:	f042 0201 	orr.w	r2, r2, #1
   1c3e0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1c3e4:	4a0f      	ldr	r2, [pc, #60]	; (1c424 <gpio_nrfx_pin_interrupt_configure+0x190>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1c3e6:	2301      	movs	r3, #1
   1c3e8:	408b      	lsls	r3, r1
   1c3ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1c3ee:	b002      	add	sp, #8
   1c3f0:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1c3f2:	2001      	movs	r0, #1
   1c3f4:	40a8      	lsls	r0, r5
   1c3f6:	ea21 0100 	bic.w	r1, r1, r0
   1c3fa:	e76d      	b.n	1c2d8 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1c3fc:	3001      	adds	r0, #1
   1c3fe:	2808      	cmp	r0, #8
   1c400:	d188      	bne.n	1c314 <gpio_nrfx_pin_interrupt_configure+0x80>
   1c402:	e7a5      	b.n	1c350 <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
   1c404:	f06f 0012 	mvn.w	r0, #18
   1c408:	e7f1      	b.n	1c3ee <gpio_nrfx_pin_interrupt_configure+0x15a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c40a:	6931      	ldr	r1, [r6, #16]
   1c40c:	40e9      	lsrs	r1, r5
   1c40e:	f001 0101 	and.w	r1, r1, #1
   1c412:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1c416:	4620      	mov	r0, r4
   1c418:	b2c9      	uxtb	r1, r1
   1c41a:	f008 f88b 	bl	24534 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1c41e:	4610      	mov	r0, r2
   1c420:	e7e5      	b.n	1c3ee <gpio_nrfx_pin_interrupt_configure+0x15a>
   1c422:	bf00      	nop
   1c424:	40006000 	.word	0x40006000
   1c428:	0bad0000 	.word	0x0bad0000

0001c42c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c42c:	4b2a      	ldr	r3, [pc, #168]	; (1c4d8 <gpio_nrfx_config+0xac>)
{
   1c42e:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c430:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c432:	482a      	ldr	r0, [pc, #168]	; (1c4dc <gpio_nrfx_config+0xb0>)
   1c434:	4013      	ands	r3, r2
   1c436:	4283      	cmp	r3, r0
   1c438:	d03e      	beq.n	1c4b8 <gpio_nrfx_config+0x8c>
   1c43a:	d80d      	bhi.n	1c458 <gpio_nrfx_config+0x2c>
   1c43c:	2b06      	cmp	r3, #6
   1c43e:	d015      	beq.n	1c46c <gpio_nrfx_config+0x40>
   1c440:	d805      	bhi.n	1c44e <gpio_nrfx_config+0x22>
   1c442:	b19b      	cbz	r3, 1c46c <gpio_nrfx_config+0x40>
   1c444:	2b02      	cmp	r3, #2
   1c446:	d039      	beq.n	1c4bc <gpio_nrfx_config+0x90>
   1c448:	f06f 0015 	mvn.w	r0, #21
   1c44c:	e033      	b.n	1c4b6 <gpio_nrfx_config+0x8a>
   1c44e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1c452:	d1f9      	bne.n	1c448 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1c454:	2301      	movs	r3, #1
   1c456:	e009      	b.n	1c46c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c458:	4821      	ldr	r0, [pc, #132]	; (1c4e0 <gpio_nrfx_config+0xb4>)
   1c45a:	4283      	cmp	r3, r0
   1c45c:	d030      	beq.n	1c4c0 <gpio_nrfx_config+0x94>
   1c45e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1c462:	d02f      	beq.n	1c4c4 <gpio_nrfx_config+0x98>
   1c464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1c468:	d1ee      	bne.n	1c448 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1c46a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1c46c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1c46e:	bf54      	ite	pl
   1c470:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1c474:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c476:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1c47a:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   1c47e:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c482:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1c486:	d007      	beq.n	1c498 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1c488:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c48c:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1c48e:	d01b      	beq.n	1c4c8 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1c490:	2201      	movs	r2, #1
   1c492:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1c494:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1c498:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   1c49c:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1c4a0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1c4a4:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1c4a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1c4ac:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1c4b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   1c4b4:	2000      	movs	r0, #0
}
   1c4b6:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1c4b8:	2307      	movs	r3, #7
   1c4ba:	e7d7      	b.n	1c46c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1c4bc:	2304      	movs	r3, #4
   1c4be:	e7d5      	b.n	1c46c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1c4c0:	2305      	movs	r3, #5
   1c4c2:	e7d3      	b.n	1c46c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1c4c4:	2303      	movs	r3, #3
   1c4c6:	e7d1      	b.n	1c46c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1c4c8:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1c4ca:	bf42      	ittt	mi
   1c4cc:	2201      	movmi	r2, #1
   1c4ce:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1c4d0:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   1c4d4:	e7e0      	b.n	1c498 <gpio_nrfx_config+0x6c>
   1c4d6:	bf00      	nop
   1c4d8:	00f00006 	.word	0x00f00006
   1c4dc:	00100006 	.word	0x00100006
   1c4e0:	00400002 	.word	0x00400002

0001c4e4 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c4e4:	4a46      	ldr	r2, [pc, #280]	; (1c600 <gpiote_event_handler+0x11c>)
{
   1c4e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c4ea:	6816      	ldr	r6, [r2, #0]
	if (port_event) {
   1c4ec:	2e00      	cmp	r6, #0
   1c4ee:	d05a      	beq.n	1c5a6 <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
   1c4f0:	4b44      	ldr	r3, [pc, #272]	; (1c604 <gpiote_event_handler+0x120>)
	out &= ~data->trig_edge & ~data->double_edge;
   1c4f2:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
	uint32_t out = data->pin_int_en;
   1c4f6:	68d8      	ldr	r0, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1c4f8:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   1c4fa:	4321      	orrs	r1, r4
   1c4fc:	ea20 0801 	bic.w	r8, r0, r1
    return p_reg->IN;
   1c500:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t check_pins = level_pins;
   1c504:	4645      	mov	r5, r8
   1c506:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1c50a:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1c50c:	ea28 0404 	bic.w	r4, r8, r4
	uint32_t bit = 1U << pin;
   1c510:	2701      	movs	r7, #1
	uint32_t pin = 0U;
   1c512:	f04f 0a00 	mov.w	sl, #0
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c516:	4689      	mov	r9, r1
	while (check_pins) {
   1c518:	bb7d      	cbnz	r5, 1c57a <gpiote_event_handler+0x96>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c51a:	6015      	str	r5, [r2, #0]
   1c51c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1c51e:	483a      	ldr	r0, [pc, #232]	; (1c608 <gpiote_event_handler+0x124>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1c520:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1c522:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c524:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1c526:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1c52a:	fa05 f103 	lsl.w	r1, r5, r3
   1c52e:	4211      	tst	r1, r2
   1c530:	d011      	beq.n	1c556 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c532:	009a      	lsls	r2, r3, #2
   1c534:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c538:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   1c53c:	6811      	ldr	r1, [r2, #0]
   1c53e:	b151      	cbz	r1, 1c556 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1c540:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1c544:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c548:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1c54a:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1c54e:	fa05 f101 	lsl.w	r1, r5, r1
   1c552:	6812      	ldr	r2, [r2, #0]
   1c554:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1c556:	3301      	adds	r3, #1
   1c558:	2b08      	cmp	r3, #8
   1c55a:	d1e4      	bne.n	1c526 <gpiote_event_handler+0x42>
	if (fired_triggers[0]) {
   1c55c:	bb2c      	cbnz	r4, 1c5aa <gpiote_event_handler+0xc6>
	if (port_event) {
   1c55e:	b156      	cbz	r6, 1c576 <gpiote_event_handler+0x92>
	uint32_t out = data->pin_int_en;
   1c560:	4c28      	ldr	r4, [pc, #160]	; (1c604 <gpiote_event_handler+0x120>)
	out &= ~data->trig_edge & ~data->double_edge;
   1c562:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   1c566:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c568:	4301      	orrs	r1, r0
   1c56a:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   1c56e:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   1c570:	2600      	movs	r6, #0
	while (level_pins) {
   1c572:	2a00      	cmp	r2, #0
   1c574:	d131      	bne.n	1c5da <gpiote_event_handler+0xf6>
}
   1c576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (check_pins & bit) {
   1c57a:	422f      	tst	r7, r5
   1c57c:	d00f      	beq.n	1c59e <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
   1c57e:	ea17 0f08 	tst.w	r7, r8
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c582:	f00a 001f 	and.w	r0, sl, #31
   1c586:	bf08      	it	eq
   1c588:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1c58c:	f04f 0100 	mov.w	r1, #0
   1c590:	bf08      	it	eq
   1c592:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
   1c596:	f007 ffcd 	bl	24534 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1c59a:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   1c59e:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   1c5a2:	007f      	lsls	r7, r7, #1
   1c5a4:	e7b8      	b.n	1c518 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1c5a6:	4634      	mov	r4, r6
   1c5a8:	e7b9      	b.n	1c51e <gpiote_event_handler+0x3a>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c5aa:	4b16      	ldr	r3, [pc, #88]	; (1c604 <gpiote_event_handler+0x120>)
   1c5ac:	6859      	ldr	r1, [r3, #4]
   1c5ae:	2900      	cmp	r1, #0
   1c5b0:	d0d5      	beq.n	1c55e <gpiote_event_handler+0x7a>
	return node->next;
   1c5b2:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c5b4:	4f15      	ldr	r7, [pc, #84]	; (1c60c <gpiote_event_handler+0x128>)
   1c5b6:	2d00      	cmp	r5, #0
   1c5b8:	bf38      	it	cc
   1c5ba:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   1c5bc:	688a      	ldr	r2, [r1, #8]
   1c5be:	4022      	ands	r2, r4
   1c5c0:	d002      	beq.n	1c5c8 <gpiote_event_handler+0xe4>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c5c2:	684b      	ldr	r3, [r1, #4]
   1c5c4:	4638      	mov	r0, r7
   1c5c6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c5c8:	2d00      	cmp	r5, #0
   1c5ca:	d0c8      	beq.n	1c55e <gpiote_event_handler+0x7a>
   1c5cc:	682b      	ldr	r3, [r5, #0]
   1c5ce:	2b00      	cmp	r3, #0
   1c5d0:	bf38      	it	cc
   1c5d2:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c5d4:	4629      	mov	r1, r5
   1c5d6:	461d      	mov	r5, r3
   1c5d8:	e7f0      	b.n	1c5bc <gpiote_event_handler+0xd8>
		if (level_pins & bit) {
   1c5da:	4215      	tst	r5, r2
   1c5dc:	d00c      	beq.n	1c5f8 <gpiote_event_handler+0x114>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c5de:	6921      	ldr	r1, [r4, #16]
   1c5e0:	40f1      	lsrs	r1, r6
   1c5e2:	f001 0101 	and.w	r1, r1, #1
   1c5e6:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1c5ea:	b2c9      	uxtb	r1, r1
   1c5ec:	f006 001f 	and.w	r0, r6, #31
   1c5f0:	f007 ffa0 	bl	24534 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c5f4:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   1c5f8:	3601      	adds	r6, #1
		bit <<= 1;
   1c5fa:	006d      	lsls	r5, r5, #1
   1c5fc:	e7b9      	b.n	1c572 <gpiote_event_handler+0x8e>
   1c5fe:	bf00      	nop
   1c600:	4000617c 	.word	0x4000617c
   1c604:	2000306c 	.word	0x2000306c
   1c608:	40006000 	.word	0x40006000
   1c60c:	20000780 	.word	0x20000780

0001c610 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   1c610:	4b01      	ldr	r3, [pc, #4]	; (1c618 <hfclk_on_callback+0x8>)
   1c612:	2201      	movs	r2, #1
   1c614:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   1c616:	4770      	bx	lr
   1c618:	4000c000 	.word	0x4000c000

0001c61c <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1c61c:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   1c61e:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1c620:	d10b      	bne.n	1c63a <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   1c622:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1c624:	4b06      	ldr	r3, [pc, #24]	; (1c640 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   1c626:	4807      	ldr	r0, [pc, #28]	; (1c644 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   1c628:	4359      	muls	r1, r3
	val->val1 = uval / 1000000;
   1c62a:	fb91 f3f0 	sdiv	r3, r1, r0
   1c62e:	6013      	str	r3, [r2, #0]
	val->val2 = uval % 1000000;
   1c630:	fb00 1313 	mls	r3, r0, r3, r1
   1c634:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   1c636:	2000      	movs	r0, #0
   1c638:	4770      	bx	lr
		return -ENOTSUP;
   1c63a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1c63e:	4770      	bx	lr
   1c640:	0003d090 	.word	0x0003d090
   1c644:	000f4240 	.word	0x000f4240

0001c648 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c648:	4b03      	ldr	r3, [pc, #12]	; (1c658 <temp_nrf5_isr+0x10>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   1c64a:	6900      	ldr	r0, [r0, #16]
   1c64c:	2200      	movs	r2, #0
   1c64e:	601a      	str	r2, [r3, #0]
   1c650:	681b      	ldr	r3, [r3, #0]
	z_impl_k_sem_give(sem);
   1c652:	f001 bfe9 	b.w	1e628 <z_impl_k_sem_give>
   1c656:	bf00      	nop
   1c658:	4000c100 	.word	0x4000c100

0001c65c <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   1c65c:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   1c65e:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1c660:	2000      	movs	r0, #0
   1c662:	f7f6 fc65 	bl	12f30 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   1c666:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c668:	f04f 32ff 	mov.w	r2, #4294967295
   1c66c:	2100      	movs	r1, #0
   1c66e:	4620      	mov	r0, r4
   1c670:	f008 fae1 	bl	24c36 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   1c674:	f104 0018 	add.w	r0, r4, #24
   1c678:	f008 fa09 	bl	24a8e <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   1c67c:	2200      	movs	r2, #0
   1c67e:	2101      	movs	r1, #1
   1c680:	200c      	movs	r0, #12
   1c682:	f7f6 ffd3 	bl	1362c <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   1c686:	200c      	movs	r0, #12
   1c688:	f7f6 ff9e 	bl	135c8 <arch_irq_enable>
    p_reg->INTENSET = mask;
   1c68c:	4b02      	ldr	r3, [pc, #8]	; (1c698 <temp_nrf5_init+0x3c>)
   1c68e:	2201      	movs	r2, #1
   1c690:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   1c694:	2000      	movs	r0, #0
   1c696:	bd10      	pop	{r4, pc}
   1c698:	4000c000 	.word	0x4000c000

0001c69c <temp_nrf5_sample_fetch>:
{
   1c69c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   1c69e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   1c6a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1c6a2:	b36b      	cbz	r3, 1c700 <temp_nrf5_sample_fetch+0x64>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   1c6a4:	2938      	cmp	r1, #56	; 0x38
   1c6a6:	d001      	beq.n	1c6ac <temp_nrf5_sample_fetch+0x10>
   1c6a8:	290c      	cmp	r1, #12
   1c6aa:	d12c      	bne.n	1c706 <temp_nrf5_sample_fetch+0x6a>
	k_mutex_lock(&data->mutex, K_FOREVER);
   1c6ac:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   1c6b0:	f04f 32ff 	mov.w	r2, #4294967295
   1c6b4:	f04f 33ff 	mov.w	r3, #4294967295
   1c6b8:	4630      	mov	r0, r6
   1c6ba:	f001 fec3 	bl	1e444 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1c6be:	4b13      	ldr	r3, [pc, #76]	; (1c70c <temp_nrf5_sample_fetch+0x70>)
   1c6c0:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   1c6c2:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1c6c4:	2303      	movs	r3, #3
   1c6c6:	2400      	movs	r4, #0
   1c6c8:	4669      	mov	r1, sp
   1c6ca:	9403      	str	r4, [sp, #12]
   1c6cc:	9302      	str	r3, [sp, #8]
   1c6ce:	f003 f954 	bl	1f97a <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   1c6d2:	f04f 32ff 	mov.w	r2, #4294967295
   1c6d6:	f04f 33ff 	mov.w	r3, #4294967295
   1c6da:	4628      	mov	r0, r5
   1c6dc:	f001 ffca 	bl	1e674 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   1c6e0:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1c6e2:	f003 f993 	bl	1fa0c <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   1c6e6:	4b0a      	ldr	r3, [pc, #40]	; (1c710 <temp_nrf5_sample_fetch+0x74>)
   1c6e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   1c6ec:	62eb      	str	r3, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   1c6ee:	4b09      	ldr	r3, [pc, #36]	; (1c714 <temp_nrf5_sample_fetch+0x78>)
   1c6f0:	2201      	movs	r2, #1
   1c6f2:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   1c6f4:	4630      	mov	r0, r6
   1c6f6:	f001 ff1d 	bl	1e534 <z_impl_k_mutex_unlock>
	return 0;
   1c6fa:	4620      	mov	r0, r4
}
   1c6fc:	b004      	add	sp, #16
   1c6fe:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1c700:	f06f 000a 	mvn.w	r0, #10
   1c704:	e7fa      	b.n	1c6fc <temp_nrf5_sample_fetch+0x60>
		return -ENOTSUP;
   1c706:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c70a:	e7f7      	b.n	1c6fc <temp_nrf5_sample_fetch+0x60>
   1c70c:	0001c611 	.word	0x0001c611
   1c710:	4000c000 	.word	0x4000c000
   1c714:	4000c004 	.word	0x4000c004

0001c718 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1c718:	4b02      	ldr	r3, [pc, #8]	; (1c724 <flash_nrf_pages_layout+0xc>)
   1c71a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1c71c:	2301      	movs	r3, #1
   1c71e:	6013      	str	r3, [r2, #0]
}
   1c720:	4770      	bx	lr
   1c722:	bf00      	nop
   1c724:	200030c4 	.word	0x200030c4

0001c728 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1c728:	4800      	ldr	r0, [pc, #0]	; (1c72c <flash_nrf_get_parameters+0x4>)
   1c72a:	4770      	bx	lr
   1c72c:	0002609c 	.word	0x0002609c

0001c730 <flash_nrf_read>:
{
   1c730:	b570      	push	{r4, r5, r6, lr}
   1c732:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1c734:	4628      	mov	r0, r5
   1c736:	4619      	mov	r1, r3
{
   1c738:	4616      	mov	r6, r2
   1c73a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1c73c:	f007 ff5a 	bl	245f4 <is_regular_addr_valid>
   1c740:	b970      	cbnz	r0, 1c760 <flash_nrf_read+0x30>
   1c742:	4a0c      	ldr	r2, [pc, #48]	; (1c774 <flash_nrf_read+0x44>)
   1c744:	4b0c      	ldr	r3, [pc, #48]	; (1c778 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c746:	480d      	ldr	r0, [pc, #52]	; (1c77c <flash_nrf_read+0x4c>)
   1c748:	1a9b      	subs	r3, r3, r2
   1c74a:	08db      	lsrs	r3, r3, #3
   1c74c:	019b      	lsls	r3, r3, #6
   1c74e:	f043 0301 	orr.w	r3, r3, #1
   1c752:	4622      	mov	r2, r4
   1c754:	4629      	mov	r1, r5
   1c756:	f003 fcfa 	bl	2014e <log_2>
		return -EINVAL;
   1c75a:	f06f 0015 	mvn.w	r0, #21
}
   1c75e:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1c760:	b134      	cbz	r4, 1c770 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1c762:	4622      	mov	r2, r4
   1c764:	4629      	mov	r1, r5
   1c766:	4630      	mov	r0, r6
   1c768:	f005 fd3e 	bl	221e8 <memcpy>
	return 0;
   1c76c:	2000      	movs	r0, #0
   1c76e:	e7f6      	b.n	1c75e <flash_nrf_read+0x2e>
		return 0;
   1c770:	4620      	mov	r0, r4
   1c772:	e7f4      	b.n	1c75e <flash_nrf_read+0x2e>
   1c774:	000256c4 	.word	0x000256c4
   1c778:	00025754 	.word	0x00025754
   1c77c:	00028487 	.word	0x00028487

0001c780 <flash_nrf_erase>:
{
   1c780:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c782:	b087      	sub	sp, #28
   1c784:	460e      	mov	r6, r1
   1c786:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c788:	f008 f851 	bl	2482e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1c78c:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c78e:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1c790:	4630      	mov	r0, r6
   1c792:	f007 ff2f 	bl	245f4 <is_regular_addr_valid>
   1c796:	b388      	cbz	r0, 1c7fc <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1c798:	fbb6 f3f7 	udiv	r3, r6, r7
   1c79c:	fb07 6313 	mls	r3, r7, r3, r6
   1c7a0:	b923      	cbnz	r3, 1c7ac <flash_nrf_erase+0x2c>
   1c7a2:	fbb5 f4f7 	udiv	r4, r5, r7
   1c7a6:	fb07 5414 	mls	r4, r7, r4, r5
   1c7aa:	b184      	cbz	r4, 1c7ce <flash_nrf_erase+0x4e>
   1c7ac:	4a25      	ldr	r2, [pc, #148]	; (1c844 <flash_nrf_erase+0xc4>)
   1c7ae:	4b26      	ldr	r3, [pc, #152]	; (1c848 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1c7b0:	4826      	ldr	r0, [pc, #152]	; (1c84c <flash_nrf_erase+0xcc>)
   1c7b2:	1a9b      	subs	r3, r3, r2
   1c7b4:	08db      	lsrs	r3, r3, #3
   1c7b6:	019b      	lsls	r3, r3, #6
   1c7b8:	f043 0301 	orr.w	r3, r3, #1
   1c7bc:	462a      	mov	r2, r5
   1c7be:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c7c0:	f003 fcc5 	bl	2014e <log_2>
		return -EINVAL;
   1c7c4:	f06f 0415 	mvn.w	r4, #21
}
   1c7c8:	4620      	mov	r0, r4
   1c7ca:	b007      	add	sp, #28
   1c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1c7ce:	42af      	cmp	r7, r5
   1c7d0:	d8fa      	bhi.n	1c7c8 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1c7d2:	f04f 33ff 	mov.w	r3, #4294967295
   1c7d6:	f04f 32ff 	mov.w	r2, #4294967295
   1c7da:	481d      	ldr	r0, [pc, #116]	; (1c850 <flash_nrf_erase+0xd0>)
   1c7dc:	f001 ff4a 	bl	1e674 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1c7e0:	f008 f81b 	bl	2481a <nrf_flash_sync_is_required>
   1c7e4:	ab02      	add	r3, sp, #8
   1c7e6:	4601      	mov	r1, r0
   1c7e8:	b998      	cbnz	r0, 1c812 <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1c7ea:	2210      	movs	r2, #16
   1c7ec:	4618      	mov	r0, r3
   1c7ee:	f005 fd26 	bl	2223e <memset>
   1c7f2:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1c7f6:	f007 ff10 	bl	2461a <erase_op>
   1c7fa:	e01d      	b.n	1c838 <flash_nrf_erase+0xb8>
   1c7fc:	4a11      	ldr	r2, [pc, #68]	; (1c844 <flash_nrf_erase+0xc4>)
   1c7fe:	4b12      	ldr	r3, [pc, #72]	; (1c848 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c800:	4814      	ldr	r0, [pc, #80]	; (1c854 <flash_nrf_erase+0xd4>)
   1c802:	1a9b      	subs	r3, r3, r2
   1c804:	08db      	lsrs	r3, r3, #3
   1c806:	019b      	lsls	r3, r3, #6
   1c808:	f043 0301 	orr.w	r3, r3, #1
   1c80c:	462a      	mov	r2, r5
   1c80e:	4631      	mov	r1, r6
   1c810:	e7d6      	b.n	1c7c0 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1c812:	2210      	movs	r2, #16
   1c814:	4621      	mov	r1, r4
   1c816:	4618      	mov	r0, r3
   1c818:	f005 fd11 	bl	2223e <memset>
   1c81c:	2201      	movs	r2, #1
   1c81e:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1c822:	4a0d      	ldr	r2, [pc, #52]	; (1c858 <flash_nrf_erase+0xd8>)
   1c824:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1c828:	480c      	ldr	r0, [pc, #48]	; (1c85c <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1c82a:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1c82e:	f001 f85f 	bl	1d8f0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1c832:	4668      	mov	r0, sp
   1c834:	f001 f862 	bl	1d8fc <nrf_flash_sync_exe>
	return	erase_op(&context);
   1c838:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1c83a:	4805      	ldr	r0, [pc, #20]	; (1c850 <flash_nrf_erase+0xd0>)
   1c83c:	f001 fef4 	bl	1e628 <z_impl_k_sem_give>
}
   1c840:	e7c2      	b.n	1c7c8 <flash_nrf_erase+0x48>
   1c842:	bf00      	nop
   1c844:	000256c4 	.word	0x000256c4
   1c848:	00025754 	.word	0x00025754
   1c84c:	000284a4 	.word	0x000284a4
   1c850:	200030cc 	.word	0x200030cc
   1c854:	00028487 	.word	0x00028487
   1c858:	0002461b 	.word	0x0002461b
   1c85c:	00015e64 	.word	0x00015e64

0001c860 <nrf_flash_init>:
{
   1c860:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c862:	2201      	movs	r2, #1
   1c864:	4611      	mov	r1, r2
   1c866:	4807      	ldr	r0, [pc, #28]	; (1c884 <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c868:	4c07      	ldr	r4, [pc, #28]	; (1c888 <nrf_flash_init+0x28>)
   1c86a:	f008 f9e4 	bl	24c36 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1c86e:	f001 f837 	bl	1d8e0 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c872:	f007 ffe0 	bl	24836 <nrfx_nvmc_flash_page_count_get>
   1c876:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1c878:	f007 ffd9 	bl	2482e <nrfx_nvmc_flash_page_size_get>
   1c87c:	6060      	str	r0, [r4, #4]
}
   1c87e:	2000      	movs	r0, #0
   1c880:	bd10      	pop	{r4, pc}
   1c882:	bf00      	nop
   1c884:	200030cc 	.word	0x200030cc
   1c888:	200030c4 	.word	0x200030c4

0001c88c <write_op>:
{
   1c88c:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1c88e:	7b03      	ldrb	r3, [r0, #12]
{
   1c890:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1c892:	b10b      	cbz	r3, 1c898 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1c894:	f007 ffc3 	bl	2481e <nrf_flash_sync_get_timestamp_begin>
{
   1c898:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1c89a:	68a3      	ldr	r3, [r4, #8]
   1c89c:	2b03      	cmp	r3, #3
   1c89e:	d806      	bhi.n	1c8ae <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c8a0:	4a12      	ldr	r2, [pc, #72]	; (1c8ec <write_op+0x60>)
   1c8a2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c8a6:	07db      	lsls	r3, r3, #31
   1c8a8:	d5fb      	bpl.n	1c8a2 <write_op+0x16>
	return FLASH_OP_DONE;
   1c8aa:	2000      	movs	r0, #0
}
   1c8ac:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1c8ae:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1c8b0:	6860      	ldr	r0, [r4, #4]
   1c8b2:	6819      	ldr	r1, [r3, #0]
   1c8b4:	f001 fa66 	bl	1dd84 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1c8b8:	6863      	ldr	r3, [r4, #4]
   1c8ba:	3304      	adds	r3, #4
   1c8bc:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1c8be:	6823      	ldr	r3, [r4, #0]
   1c8c0:	3304      	adds	r3, #4
   1c8c2:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1c8c4:	68a3      	ldr	r3, [r4, #8]
   1c8c6:	3b04      	subs	r3, #4
   1c8c8:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1c8ca:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1c8cc:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1c8ce:	2b00      	cmp	r3, #0
   1c8d0:	d0e3      	beq.n	1c89a <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1c8d2:	4628      	mov	r0, r5
   1c8d4:	f001 f89e 	bl	1da14 <nrf_flash_sync_check_time_limit>
   1c8d8:	2800      	cmp	r0, #0
   1c8da:	d0de      	beq.n	1c89a <write_op+0xe>
   1c8dc:	4a03      	ldr	r2, [pc, #12]	; (1c8ec <write_op+0x60>)
   1c8de:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c8e2:	07d9      	lsls	r1, r3, #31
   1c8e4:	d5fb      	bpl.n	1c8de <write_op+0x52>
				return FLASH_OP_ONGOING;
   1c8e6:	2001      	movs	r0, #1
   1c8e8:	e7e0      	b.n	1c8ac <write_op+0x20>
   1c8ea:	bf00      	nop
   1c8ec:	4001e000 	.word	0x4001e000

0001c8f0 <flash_nrf_write>:
{
   1c8f0:	b570      	push	{r4, r5, r6, lr}
   1c8f2:	460d      	mov	r5, r1
   1c8f4:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1c8f6:	4619      	mov	r1, r3
   1c8f8:	4628      	mov	r0, r5
{
   1c8fa:	4616      	mov	r6, r2
   1c8fc:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1c8fe:	f007 fe79 	bl	245f4 <is_regular_addr_valid>
   1c902:	b980      	cbnz	r0, 1c926 <flash_nrf_write+0x36>
   1c904:	4a23      	ldr	r2, [pc, #140]	; (1c994 <flash_nrf_write+0xa4>)
   1c906:	4b24      	ldr	r3, [pc, #144]	; (1c998 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c908:	4824      	ldr	r0, [pc, #144]	; (1c99c <flash_nrf_write+0xac>)
   1c90a:	1a9b      	subs	r3, r3, r2
   1c90c:	08db      	lsrs	r3, r3, #3
   1c90e:	019b      	lsls	r3, r3, #6
   1c910:	f043 0301 	orr.w	r3, r3, #1
   1c914:	4622      	mov	r2, r4
   1c916:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c918:	f003 fc19 	bl	2014e <log_2>
		return -EINVAL;
   1c91c:	f06f 0415 	mvn.w	r4, #21
}
   1c920:	4620      	mov	r0, r4
   1c922:	b006      	add	sp, #24
   1c924:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1c926:	ea45 0304 	orr.w	r3, r5, r4
   1c92a:	079b      	lsls	r3, r3, #30
   1c92c:	d00a      	beq.n	1c944 <flash_nrf_write+0x54>
   1c92e:	4a19      	ldr	r2, [pc, #100]	; (1c994 <flash_nrf_write+0xa4>)
   1c930:	4b19      	ldr	r3, [pc, #100]	; (1c998 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c932:	481b      	ldr	r0, [pc, #108]	; (1c9a0 <flash_nrf_write+0xb0>)
   1c934:	1a9b      	subs	r3, r3, r2
   1c936:	08db      	lsrs	r3, r3, #3
   1c938:	019b      	lsls	r3, r3, #6
   1c93a:	f043 0301 	orr.w	r3, r3, #1
   1c93e:	4622      	mov	r2, r4
   1c940:	4629      	mov	r1, r5
   1c942:	e7e9      	b.n	1c918 <flash_nrf_write+0x28>
	if (!len) {
   1c944:	2c00      	cmp	r4, #0
   1c946:	d0eb      	beq.n	1c920 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c948:	f04f 33ff 	mov.w	r3, #4294967295
   1c94c:	f04f 32ff 	mov.w	r2, #4294967295
   1c950:	4814      	ldr	r0, [pc, #80]	; (1c9a4 <flash_nrf_write+0xb4>)
   1c952:	f001 fe8f 	bl	1e674 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1c956:	f007 ff60 	bl	2481a <nrf_flash_sync_is_required>
   1c95a:	4603      	mov	r3, r0
	struct flash_context context = {
   1c95c:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1c960:	a802      	add	r0, sp, #8
   1c962:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1c964:	b18b      	cbz	r3, 1c98a <flash_nrf_write+0x9a>
	struct flash_context context = {
   1c966:	2301      	movs	r3, #1
   1c968:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1c96c:	4b0e      	ldr	r3, [pc, #56]	; (1c9a8 <flash_nrf_write+0xb8>)
   1c96e:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1c972:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1c976:	f000 ffbb 	bl	1d8f0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1c97a:	4668      	mov	r0, sp
   1c97c:	f000 ffbe 	bl	1d8fc <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1c980:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1c982:	4808      	ldr	r0, [pc, #32]	; (1c9a4 <flash_nrf_write+0xb4>)
   1c984:	f001 fe50 	bl	1e628 <z_impl_k_sem_give>
}
   1c988:	e7ca      	b.n	1c920 <flash_nrf_write+0x30>
	struct flash_context context = {
   1c98a:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1c98e:	f7ff ff7d 	bl	1c88c <write_op>
   1c992:	e7f5      	b.n	1c980 <flash_nrf_write+0x90>
   1c994:	000256c4 	.word	0x000256c4
   1c998:	00025754 	.word	0x00025754
   1c99c:	00028487 	.word	0x00028487
   1c9a0:	000284c3 	.word	0x000284c3
   1c9a4:	200030cc 	.word	0x200030cc
   1c9a8:	0001c88d 	.word	0x0001c88d

0001c9ac <random_byte_get>:
	__asm__ volatile(
   1c9ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c9b0:	f3ef 8211 	mrs	r2, BASEPRI
   1c9b4:	f383 8811 	msr	BASEPRI, r3
   1c9b8:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c9bc:	4b08      	ldr	r3, [pc, #32]	; (1c9e0 <random_byte_get+0x34>)
   1c9be:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c9c0:	b159      	cbz	r1, 1c9da <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c9c2:	4908      	ldr	r1, [pc, #32]	; (1c9e4 <random_byte_get+0x38>)
   1c9c4:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c9c8:	2100      	movs	r1, #0
   1c9ca:	6019      	str	r1, [r3, #0]
   1c9cc:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c9ce:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c9d0:	f382 8811 	msr	BASEPRI, r2
   1c9d4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c9d8:	4770      	bx	lr
	int retval = -EAGAIN;
   1c9da:	f06f 000a 	mvn.w	r0, #10
   1c9de:	e7f7      	b.n	1c9d0 <random_byte_get+0x24>
   1c9e0:	4000d100 	.word	0x4000d100
   1c9e4:	4000d000 	.word	0x4000d000

0001c9e8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9ea:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1c9ec:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1c9ee:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1c9f0:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c9f4:	f3ef 8011 	mrs	r0, BASEPRI
   1c9f8:	f385 8811 	msr	BASEPRI, r5
   1c9fc:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1ca00:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1ca02:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1ca06:	1ba4      	subs	r4, r4, r6
   1ca08:	403c      	ands	r4, r7
	if (available < len) {
   1ca0a:	42a2      	cmp	r2, r4
		len = available;
   1ca0c:	bf88      	it	hi
   1ca0e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ca10:	eb06 0c02 	add.w	ip, r6, r2
   1ca14:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1ca18:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1ca1a:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1ca1e:	f380 8811 	msr	BASEPRI, r0
   1ca22:	f3bf 8f6f 	isb	sy
   1ca26:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1ca28:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1ca2a:	4282      	cmp	r2, r0
   1ca2c:	d119      	bne.n	1ca62 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1ca2e:	4576      	cmp	r6, lr
   1ca30:	d10d      	bne.n	1ca4e <rng_pool_get+0x66>
	__asm__ volatile(
   1ca32:	f04f 0540 	mov.w	r5, #64	; 0x40
   1ca36:	f3ef 8211 	mrs	r2, BASEPRI
   1ca3a:	f385 8811 	msr	BASEPRI, r5
   1ca3e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1ca42:	781d      	ldrb	r5, [r3, #0]
   1ca44:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1ca46:	f382 8811 	msr	BASEPRI, r2
   1ca4a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1ca4e:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1ca50:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1ca52:	b288      	uxth	r0, r1
	available = available - len;
   1ca54:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1ca56:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ca58:	bf22      	ittt	cs
   1ca5a:	4b06      	ldrcs	r3, [pc, #24]	; (1ca74 <rng_pool_get+0x8c>)
   1ca5c:	2201      	movcs	r2, #1
   1ca5e:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1ca60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1ca62:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1ca66:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1ca68:	f89c c005 	ldrb.w	ip, [ip, #5]
   1ca6c:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1ca70:	403d      	ands	r5, r7
   1ca72:	e7da      	b.n	1ca2a <rng_pool_get+0x42>
   1ca74:	4000d000 	.word	0x4000d000

0001ca78 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ca78:	43db      	mvns	r3, r3
{
   1ca7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ca7e:	f013 0501 	ands.w	r5, r3, #1
{
   1ca82:	460e      	mov	r6, r1
   1ca84:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ca86:	d004      	beq.n	1ca92 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ca88:	4821      	ldr	r0, [pc, #132]	; (1cb10 <entropy_nrf5_get_entropy_isr+0x98>)
   1ca8a:	f7ff ffad 	bl	1c9e8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ca8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ca92:	2a00      	cmp	r2, #0
   1ca94:	d033      	beq.n	1cafe <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1ca96:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca9a:	f3ef 8811 	mrs	r8, BASEPRI
   1ca9e:	f383 8811 	msr	BASEPRI, r3
   1caa2:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1caa6:	200d      	movs	r0, #13
   1caa8:	f7f6 fdb2 	bl	13610 <arch_irq_is_enabled>
   1caac:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1caae:	200d      	movs	r0, #13
   1cab0:	f7f6 fd9a 	bl	135e8 <arch_irq_disable>
	__asm__ volatile(
   1cab4:	f388 8811 	msr	BASEPRI, r8
   1cab8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cabc:	4a15      	ldr	r2, [pc, #84]	; (1cb14 <entropy_nrf5_get_entropy_isr+0x9c>)
   1cabe:	6015      	str	r5, [r2, #0]
   1cac0:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cac2:	4b15      	ldr	r3, [pc, #84]	; (1cb18 <entropy_nrf5_get_entropy_isr+0xa0>)
   1cac4:	2101      	movs	r1, #1
   1cac6:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cac8:	4914      	ldr	r1, [pc, #80]	; (1cb1c <entropy_nrf5_get_entropy_isr+0xa4>)
   1caca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1cace:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1cad2:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1cad4:	4691      	mov	r9, r2
   1cad6:	468a      	mov	sl, r1
   1cad8:	4698      	mov	r8, r3
   1cada:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1cade:	b183      	cbz	r3, 1cb02 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1cae0:	f7ff ff64 	bl	1c9ac <random_byte_get>
			if (byte < 0) {
   1cae4:	1e03      	subs	r3, r0, #0
   1cae6:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1caea:	dbf6      	blt.n	1cada <entropy_nrf5_get_entropy_isr+0x62>
   1caec:	3d01      	subs	r5, #1
   1caee:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1caf0:	5573      	strb	r3, [r6, r5]
		} while (len);
   1caf2:	2d00      	cmp	r5, #0
   1caf4:	d1f1      	bne.n	1cada <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1caf6:	b117      	cbz	r7, 1cafe <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1caf8:	200d      	movs	r0, #13
   1cafa:	f7f6 fd65 	bl	135c8 <arch_irq_enable>
	return cnt;
   1cafe:	4620      	mov	r0, r4
   1cb00:	e7c5      	b.n	1ca8e <entropy_nrf5_get_entropy_isr+0x16>
   1cb02:	f3bf 8f4f 	dsb	sy
				__WFE();
   1cb06:	bf20      	wfe
				__SEV();
   1cb08:	bf40      	sev
				__WFE();
   1cb0a:	bf20      	wfe
   1cb0c:	e7e5      	b.n	1cada <entropy_nrf5_get_entropy_isr+0x62>
   1cb0e:	bf00      	nop
   1cb10:	20003118 	.word	0x20003118
   1cb14:	4000d100 	.word	0x4000d100
   1cb18:	4000d000 	.word	0x4000d000
   1cb1c:	e000e100 	.word	0xe000e100

0001cb20 <entropy_nrf5_get_entropy>:
{
   1cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1cb24:	4f13      	ldr	r7, [pc, #76]	; (1cb74 <entropy_nrf5_get_entropy+0x54>)
   1cb26:	460d      	mov	r5, r1
   1cb28:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1cb2a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1cb2e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1cb32:	b914      	cbnz	r4, 1cb3a <entropy_nrf5_get_entropy+0x1a>
}
   1cb34:	4620      	mov	r0, r4
   1cb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cb3a:	f04f 33ff 	mov.w	r3, #4294967295
   1cb3e:	f04f 32ff 	mov.w	r2, #4294967295
   1cb42:	4638      	mov	r0, r7
   1cb44:	f001 fd96 	bl	1e674 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1cb48:	4622      	mov	r2, r4
   1cb4a:	4629      	mov	r1, r5
   1cb4c:	4640      	mov	r0, r8
   1cb4e:	f7ff ff4b 	bl	1c9e8 <rng_pool_get>
   1cb52:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1cb54:	4638      	mov	r0, r7
   1cb56:	f001 fd67 	bl	1e628 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1cb5a:	b93e      	cbnz	r6, 1cb6c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1cb5c:	f04f 32ff 	mov.w	r2, #4294967295
   1cb60:	f04f 33ff 	mov.w	r3, #4294967295
   1cb64:	4648      	mov	r0, r9
   1cb66:	f001 fd85 	bl	1e674 <z_impl_k_sem_take>
			continue;
   1cb6a:	e7e2      	b.n	1cb32 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1cb6c:	1ba4      	subs	r4, r4, r6
   1cb6e:	b2a4      	uxth	r4, r4
		buf += bytes;
   1cb70:	4435      	add	r5, r6
   1cb72:	e7de      	b.n	1cb32 <entropy_nrf5_get_entropy+0x12>
   1cb74:	200030e8 	.word	0x200030e8

0001cb78 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1cb78:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cb7a:	4c19      	ldr	r4, [pc, #100]	; (1cbe0 <entropy_nrf5_init+0x68>)
   1cb7c:	2201      	movs	r2, #1
   1cb7e:	4611      	mov	r1, r2
   1cb80:	4620      	mov	r0, r4
   1cb82:	f008 f858 	bl	24c36 <z_impl_k_sem_init>
   1cb86:	2201      	movs	r2, #1
   1cb88:	2100      	movs	r1, #0
   1cb8a:	f104 0018 	add.w	r0, r4, #24
   1cb8e:	f008 f852 	bl	24c36 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1cb92:	f240 4307 	movw	r3, #1031	; 0x407
   1cb96:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1cb9a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1cb9e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1cba0:	230c      	movs	r3, #12
   1cba2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1cba6:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1cba8:	4b0e      	ldr	r3, [pc, #56]	; (1cbe4 <entropy_nrf5_init+0x6c>)
   1cbaa:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1cbae:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1cbb2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1cbb6:	f022 0201 	bic.w	r2, r2, #1
   1cbba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cbbe:	4a0a      	ldr	r2, [pc, #40]	; (1cbe8 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1cbc0:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cbc2:	6015      	str	r5, [r2, #0]
   1cbc4:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1cbc6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1cbca:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cbcc:	6019      	str	r1, [r3, #0]
   1cbce:	200d      	movs	r0, #13
   1cbd0:	f7f6 fd2c 	bl	1362c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1cbd4:	200d      	movs	r0, #13
   1cbd6:	f7f6 fcf7 	bl	135c8 <arch_irq_enable>

	return 0;
}
   1cbda:	4628      	mov	r0, r5
   1cbdc:	bd38      	pop	{r3, r4, r5, pc}
   1cbde:	bf00      	nop
   1cbe0:	200030e8 	.word	0x200030e8
   1cbe4:	4000d000 	.word	0x4000d000
   1cbe8:	4000d100 	.word	0x4000d100

0001cbec <isr>:
{
   1cbec:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1cbee:	f7ff fedd 	bl	1c9ac <random_byte_get>
	if (byte < 0) {
   1cbf2:	2800      	cmp	r0, #0
   1cbf4:	db20      	blt.n	1cc38 <isr+0x4c>
	uint8_t last  = rngp->last;
   1cbf6:	4b17      	ldr	r3, [pc, #92]	; (1cc54 <isr+0x68>)
   1cbf8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1cbfc:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1cc00:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1cc04:	1a51      	subs	r1, r2, r1
   1cc06:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1cc0a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1cc0c:	d10d      	bne.n	1cc2a <isr+0x3e>
	uint8_t last  = rngp->last;
   1cc0e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1cc12:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1cc16:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1cc1a:	1a51      	subs	r1, r2, r1
   1cc1c:	ea34 0101 	bics.w	r1, r4, r1
   1cc20:	d10b      	bne.n	1cc3a <isr+0x4e>
   1cc22:	4b0d      	ldr	r3, [pc, #52]	; (1cc58 <isr+0x6c>)
   1cc24:	2201      	movs	r2, #1
   1cc26:	601a      	str	r2, [r3, #0]
}
   1cc28:	e00e      	b.n	1cc48 <isr+0x5c>
	rngp->buffer[last] = byte;
   1cc2a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1cc2c:	3201      	adds	r2, #1
   1cc2e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1cc30:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1cc34:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1cc38:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1cc3a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1cc3c:	3201      	adds	r2, #1
   1cc3e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1cc40:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1cc44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1cc48:	4804      	ldr	r0, [pc, #16]	; (1cc5c <isr+0x70>)
}
   1cc4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cc4e:	f001 bceb 	b.w	1e628 <z_impl_k_sem_give>
   1cc52:	bf00      	nop
   1cc54:	200030e8 	.word	0x200030e8
   1cc58:	4000d004 	.word	0x4000d004
   1cc5c:	20003100 	.word	0x20003100

0001cc60 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1cc60:	4602      	mov	r2, r0
   1cc62:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1cc64:	4801      	ldr	r0, [pc, #4]	; (1cc6c <multithreading_lock_acquire+0xc>)
   1cc66:	f001 bbed 	b.w	1e444 <z_impl_k_mutex_lock>
   1cc6a:	bf00      	nop
   1cc6c:	2000081c 	.word	0x2000081c

0001cc70 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1cc70:	4801      	ldr	r0, [pc, #4]	; (1cc78 <multithreading_lock_release+0x8>)
   1cc72:	f001 bc5f 	b.w	1e534 <z_impl_k_mutex_unlock>
   1cc76:	bf00      	nop
   1cc78:	2000081c 	.word	0x2000081c

0001cc7c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1cc7c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1cc7e:	f7f4 fdf1 	bl	11864 <z_impl_log_panic>
   1cc82:	4b06      	ldr	r3, [pc, #24]	; (1cc9c <k_sys_fatal_error_handler+0x20>)
   1cc84:	4906      	ldr	r1, [pc, #24]	; (1cca0 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1cc86:	4807      	ldr	r0, [pc, #28]	; (1cca4 <k_sys_fatal_error_handler+0x28>)
   1cc88:	1ac9      	subs	r1, r1, r3
   1cc8a:	08c9      	lsrs	r1, r1, #3
   1cc8c:	0189      	lsls	r1, r1, #6
   1cc8e:	f041 0101 	orr.w	r1, r1, #1
   1cc92:	f003 fa3b 	bl	2010c <log_0>
		sys_arch_reboot(0);
   1cc96:	2000      	movs	r0, #0
   1cc98:	f7f7 f988 	bl	13fac <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1cc9c:	000256c4 	.word	0x000256c4
   1cca0:	0002574c 	.word	0x0002574c
   1cca4:	000284ef 	.word	0x000284ef

0001cca8 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1cca8:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1ccaa:	4905      	ldr	r1, [pc, #20]	; (1ccc0 <rand_prio_low_vector_get_blocking+0x18>)
{
   1ccac:	b410      	push	{r4}
   1ccae:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1ccb0:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1ccb2:	6881      	ldr	r1, [r0, #8]
   1ccb4:	680c      	ldr	r4, [r1, #0]
   1ccb6:	4619      	mov	r1, r3
   1ccb8:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1ccba:	bc10      	pop	{r4}
   1ccbc:	4718      	bx	r3
   1ccbe:	bf00      	nop
   1ccc0:	2000313c 	.word	0x2000313c

0001ccc4 <sdc_assertion_handler>:
{
   1ccc4:	b538      	push	{r3, r4, r5, lr}
   1ccc6:	4b0b      	ldr	r3, [pc, #44]	; (1ccf4 <sdc_assertion_handler+0x30>)
   1ccc8:	4c0b      	ldr	r4, [pc, #44]	; (1ccf8 <sdc_assertion_handler+0x34>)
   1ccca:	1ae4      	subs	r4, r4, r3
   1cccc:	460d      	mov	r5, r1
   1ccce:	08e4      	lsrs	r4, r4, #3
   1ccd0:	f7f4 fc50 	bl	11574 <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1ccd4:	01a4      	lsls	r4, r4, #6
   1ccd6:	f044 0401 	orr.w	r4, r4, #1
   1ccda:	4601      	mov	r1, r0
   1ccdc:	4623      	mov	r3, r4
   1ccde:	4807      	ldr	r0, [pc, #28]	; (1ccfc <sdc_assertion_handler+0x38>)
   1cce0:	462a      	mov	r2, r5
   1cce2:	f003 fa34 	bl	2014e <log_2>
	k_oops();
   1cce6:	4040      	eors	r0, r0
   1cce8:	f380 8811 	msr	BASEPRI, r0
   1ccec:	f04f 0003 	mov.w	r0, #3
   1ccf0:	df02      	svc	2
}
   1ccf2:	bd38      	pop	{r3, r4, r5, pc}
   1ccf4:	000256c4 	.word	0x000256c4
   1ccf8:	000257b4 	.word	0x000257b4
   1ccfc:	0002850c 	.word	0x0002850c

0001cd00 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1cd00:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1cd02:	4804      	ldr	r0, [pc, #16]	; (1cd14 <hci_driver_init+0x14>)
   1cd04:	f7f8 ffb0 	bl	15c68 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1cd08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1cd0c:	4802      	ldr	r0, [pc, #8]	; (1cd18 <hci_driver_init+0x18>)
   1cd0e:	f7e7 bbcf 	b.w	44b0 <sdc_init>
   1cd12:	bf00      	nop
   1cd14:	000260ac 	.word	0x000260ac
   1cd18:	0001ccc5 	.word	0x0001ccc5

0001cd1c <rand_prio_low_vector_get>:
{
   1cd1c:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1cd1e:	4b08      	ldr	r3, [pc, #32]	; (1cd40 <rand_prio_low_vector_get+0x24>)
{
   1cd20:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1cd22:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1cd24:	6883      	ldr	r3, [r0, #8]
   1cd26:	685d      	ldr	r5, [r3, #4]
   1cd28:	460a      	mov	r2, r1
   1cd2a:	b135      	cbz	r5, 1cd3a <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1cd2c:	2300      	movs	r3, #0
   1cd2e:	4621      	mov	r1, r4
   1cd30:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1cd32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1cd36:	b2c0      	uxtb	r0, r0
   1cd38:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1cd3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cd3e:	e7f8      	b.n	1cd32 <rand_prio_low_vector_get+0x16>
   1cd40:	2000313c 	.word	0x2000313c

0001cd44 <hci_driver_open>:
{
   1cd44:	b570      	push	{r4, r5, r6, lr}
   1cd46:	b092      	sub	sp, #72	; 0x48
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1cd48:	2200      	movs	r2, #0
   1cd4a:	2300      	movs	r3, #0
   1cd4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1cd50:	2500      	movs	r5, #0
   1cd52:	f06f 0309 	mvn.w	r3, #9
   1cd56:	e9cd 3503 	strd	r3, r5, [sp, #12]
   1cd5a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   1cd5e:	4b51      	ldr	r3, [pc, #324]	; (1cea4 <hci_driver_open+0x160>)
   1cd60:	4951      	ldr	r1, [pc, #324]	; (1cea8 <hci_driver_open+0x164>)
   1cd62:	9500      	str	r5, [sp, #0]
   1cd64:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1cd68:	4850      	ldr	r0, [pc, #320]	; (1ceac <hci_driver_open+0x168>)
   1cd6a:	f001 facb 	bl	1e304 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1cd6e:	4950      	ldr	r1, [pc, #320]	; (1ceb0 <hci_driver_open+0x16c>)
   1cd70:	484e      	ldr	r0, [pc, #312]	; (1ceac <hci_driver_open+0x168>)
   1cd72:	4c50      	ldr	r4, [pc, #320]	; (1ceb4 <hci_driver_open+0x170>)
   1cd74:	f007 fe7d 	bl	24a72 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1cd78:	a80d      	add	r0, sp, #52	; 0x34
   1cd7a:	f7e7 fb2b 	bl	43d4 <sdc_build_revision_get>
   1cd7e:	4b4e      	ldr	r3, [pc, #312]	; (1ceb8 <hci_driver_open+0x174>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1cd80:	484e      	ldr	r0, [pc, #312]	; (1cebc <hci_driver_open+0x178>)
   1cd82:	1ae4      	subs	r4, r4, r3
   1cd84:	08e4      	lsrs	r4, r4, #3
   1cd86:	01a4      	lsls	r4, r4, #6
   1cd88:	f044 0303 	orr.w	r3, r4, #3
   1cd8c:	2214      	movs	r2, #20
   1cd8e:	a90d      	add	r1, sp, #52	; 0x34
   1cd90:	f003 fa1d 	bl	201ce <log_hexdump>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cd94:	aa09      	add	r2, sp, #36	; 0x24
   1cd96:	2101      	movs	r1, #1
   1cd98:	4628      	mov	r0, r5
	cfg.master_count.count = SDC_MASTER_COUNT;
   1cd9a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cd9e:	f7e7 fb27 	bl	43f0 <sdc_cfg_set>
	if (required_memory < 0) {
   1cda2:	2800      	cmp	r0, #0
   1cda4:	db38      	blt.n	1ce18 <hci_driver_open+0xd4>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1cda6:	2605      	movs	r6, #5
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cda8:	aa09      	add	r2, sp, #36	; 0x24
   1cdaa:	2102      	movs	r1, #2
   1cdac:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1cdae:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cdb2:	f7e7 fb1d 	bl	43f0 <sdc_cfg_set>
	if (required_memory < 0) {
   1cdb6:	2800      	cmp	r0, #0
   1cdb8:	db2e      	blt.n	1ce18 <hci_driver_open+0xd4>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1cdba:	4b41      	ldr	r3, [pc, #260]	; (1cec0 <hci_driver_open+0x17c>)
   1cdbc:	9309      	str	r3, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cdbe:	aa09      	add	r2, sp, #36	; 0x24
   1cdc0:	2103      	movs	r1, #3
   1cdc2:	4628      	mov	r0, r5
   1cdc4:	f7e7 fb14 	bl	43f0 <sdc_cfg_set>
	if (required_memory < 0) {
   1cdc8:	2800      	cmp	r0, #0
   1cdca:	db25      	blt.n	1ce18 <hci_driver_open+0xd4>
	cfg.event_length.event_length_us =
   1cdcc:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cdd0:	aa09      	add	r2, sp, #36	; 0x24
   1cdd2:	2104      	movs	r1, #4
   1cdd4:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1cdd6:	9309      	str	r3, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cdd8:	f7e7 fb0a 	bl	43f0 <sdc_cfg_set>
	if (required_memory < 0) {
   1cddc:	2800      	cmp	r0, #0
   1cdde:	db1b      	blt.n	1ce18 <hci_driver_open+0xd4>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1cde0:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cde2:	aa09      	add	r2, sp, #36	; 0x24
   1cde4:	4631      	mov	r1, r6
   1cde6:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1cde8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cdec:	f7e7 fb00 	bl	43f0 <sdc_cfg_set>
	if (required_memory < 0) {
   1cdf0:	2800      	cmp	r0, #0
   1cdf2:	db11      	blt.n	1ce18 <hci_driver_open+0xd4>
	if (required_memory > sizeof(sdc_mempool)) {
   1cdf4:	f241 5136 	movw	r1, #5430	; 0x1536
   1cdf8:	4288      	cmp	r0, r1
   1cdfa:	dd0f      	ble.n	1ce1c <hci_driver_open+0xd8>
		BT_ERR("Allocated memory too low: %u < %u",
   1cdfc:	4602      	mov	r2, r0
   1cdfe:	f044 0301 	orr.w	r3, r4, #1
   1ce02:	4830      	ldr	r0, [pc, #192]	; (1cec4 <hci_driver_open+0x180>)
   1ce04:	f003 f9a3 	bl	2014e <log_2>
		k_panic();
   1ce08:	4040      	eors	r0, r0
   1ce0a:	f380 8811 	msr	BASEPRI, r0
   1ce0e:	f04f 0004 	mov.w	r0, #4
   1ce12:	df02      	svc	2
		return -ENOMEM;
   1ce14:	f06f 000b 	mvn.w	r0, #11
}
   1ce18:	b012      	add	sp, #72	; 0x48
   1ce1a:	bd70      	pop	{r4, r5, r6, pc}
   1ce1c:	482a      	ldr	r0, [pc, #168]	; (1cec8 <hci_driver_open+0x184>)
   1ce1e:	f001 f89d 	bl	1df5c <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1ce22:	4b2a      	ldr	r3, [pc, #168]	; (1cecc <hci_driver_open+0x188>)
   1ce24:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1ce26:	b938      	cbnz	r0, 1ce38 <hci_driver_open+0xf4>
		BT_ERR("An entropy source is required");
   1ce28:	4829      	ldr	r0, [pc, #164]	; (1ced0 <hci_driver_open+0x18c>)
   1ce2a:	f044 0101 	orr.w	r1, r4, #1
   1ce2e:	f003 f96d 	bl	2010c <log_0>
		return -ENODEV;
   1ce32:	f06f 0012 	mvn.w	r0, #18
   1ce36:	e7ef      	b.n	1ce18 <hci_driver_open+0xd4>
	sdc_rand_source_t rand_functions = {
   1ce38:	4a26      	ldr	r2, [pc, #152]	; (1ced4 <hci_driver_open+0x190>)
   1ce3a:	ca07      	ldmia	r2, {r0, r1, r2}
   1ce3c:	ab0a      	add	r3, sp, #40	; 0x28
   1ce3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1ce42:	4618      	mov	r0, r3
   1ce44:	f7e7 fc42 	bl	46cc <sdc_rand_source_register>
	if (err) {
   1ce48:	4601      	mov	r1, r0
   1ce4a:	b138      	cbz	r0, 1ce5c <hci_driver_open+0x118>
		BT_ERR("Failed to register rand source (%d)", err);
   1ce4c:	4822      	ldr	r0, [pc, #136]	; (1ced8 <hci_driver_open+0x194>)
   1ce4e:	f044 0201 	orr.w	r2, r4, #1
   1ce52:	f003 f968 	bl	20126 <log_1>
		return -EINVAL;
   1ce56:	f06f 0015 	mvn.w	r0, #21
   1ce5a:	e7dd      	b.n	1ce18 <hci_driver_open+0xd4>
			err = sdc_support_adv();
   1ce5c:	f7e7 fba2 	bl	45a4 <sdc_support_adv>
			if (err) {
   1ce60:	b110      	cbz	r0, 1ce68 <hci_driver_open+0x124>
				return -ENOTSUP;
   1ce62:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ce66:	e7d7      	b.n	1ce18 <hci_driver_open+0xd4>
		err = sdc_support_slave();
   1ce68:	f7e7 fbc6 	bl	45f8 <sdc_support_slave>
		if (err) {
   1ce6c:	2800      	cmp	r0, #0
   1ce6e:	d1f8      	bne.n	1ce62 <hci_driver_open+0x11e>
		err = sdc_support_dle();
   1ce70:	f7e7 fba6 	bl	45c0 <sdc_support_dle>
		if (err) {
   1ce74:	2800      	cmp	r0, #0
   1ce76:	d1f4      	bne.n	1ce62 <hci_driver_open+0x11e>
		err = sdc_support_le_2m_phy();
   1ce78:	f7e7 fbb0 	bl	45dc <sdc_support_le_2m_phy>
		if (err) {
   1ce7c:	2800      	cmp	r0, #0
   1ce7e:	d1f0      	bne.n	1ce62 <hci_driver_open+0x11e>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1ce80:	f04f 30ff 	mov.w	r0, #4294967295
   1ce84:	f04f 31ff 	mov.w	r1, #4294967295
   1ce88:	f7ff feea 	bl	1cc60 <multithreading_lock_acquire>
	if (!err) {
   1ce8c:	4604      	mov	r4, r0
   1ce8e:	b930      	cbnz	r0, 1ce9e <hci_driver_open+0x15a>
		err = sdc_enable(host_signal, sdc_mempool);
   1ce90:	4912      	ldr	r1, [pc, #72]	; (1cedc <hci_driver_open+0x198>)
   1ce92:	4813      	ldr	r0, [pc, #76]	; (1cee0 <hci_driver_open+0x19c>)
   1ce94:	f7e7 fade 	bl	4454 <sdc_enable>
   1ce98:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ce9a:	f7ff fee9 	bl	1cc70 <multithreading_lock_release>
	if (err < 0) {
   1ce9e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1cea2:	e7b9      	b.n	1ce18 <hci_driver_open+0xd4>
   1cea4:	0001cee5 	.word	0x0001cee5
   1cea8:	20006520 	.word	0x20006520
   1ceac:	20002a80 	.word	0x20002a80
   1ceb0:	00028531 	.word	0x00028531
   1ceb4:	000257b4 	.word	0x000257b4
   1ceb8:	000256c4 	.word	0x000256c4
   1cebc:	00028538 	.word	0x00028538
   1cec0:	02031b1b 	.word	0x02031b1b
   1cec4:	0002855f 	.word	0x0002855f
   1cec8:	000284eb 	.word	0x000284eb
   1cecc:	2000313c 	.word	0x2000313c
   1ced0:	00028581 	.word	0x00028581
   1ced4:	00025898 	.word	0x00025898
   1ced8:	0002859f 	.word	0x0002859f
   1cedc:	200034e8 	.word	0x200034e8
   1cee0:	0001d001 	.word	0x0001d001

0001cee4 <recv_thread>:
{
   1cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cee8:	4b3f      	ldr	r3, [pc, #252]	; (1cfe8 <recv_thread+0x104>)
   1ceea:	4e40      	ldr	r6, [pc, #256]	; (1cfec <recv_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   1ceec:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1cffc <recv_thread+0x118>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1cef0:	4d3f      	ldr	r5, [pc, #252]	; (1cff0 <recv_thread+0x10c>)
   1cef2:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1cef4:	2700      	movs	r7, #0
   1cef6:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1cef8:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1cefa:	b93c      	cbnz	r4, 1cf0c <recv_thread+0x28>
   1cefc:	b937      	cbnz	r7, 1cf0c <recv_thread+0x28>
   1cefe:	f04f 32ff 	mov.w	r2, #4294967295
   1cf02:	f04f 33ff 	mov.w	r3, #4294967295
   1cf06:	4640      	mov	r0, r8
   1cf08:	f001 fbb4 	bl	1e674 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1cf0c:	f04f 30ff 	mov.w	r0, #4294967295
   1cf10:	f04f 31ff 	mov.w	r1, #4294967295
   1cf14:	f7ff fea4 	bl	1cc60 <multithreading_lock_acquire>
	if (!errcode) {
   1cf18:	b160      	cbz	r0, 1cf34 <recv_thread+0x50>
		return false;
   1cf1a:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1cf1c:	f04f 30ff 	mov.w	r0, #4294967295
   1cf20:	f04f 31ff 	mov.w	r1, #4294967295
   1cf24:	f7ff fe9c 	bl	1cc60 <multithreading_lock_acquire>
	if (!errcode) {
   1cf28:	2800      	cmp	r0, #0
   1cf2a:	d03a      	beq.n	1cfa2 <recv_thread+0xbe>
		return false;
   1cf2c:	2700      	movs	r7, #0
	z_impl_k_yield();
   1cf2e:	f002 f84d 	bl	1efcc <z_impl_k_yield>
}
   1cf32:	e7e2      	b.n	1cefa <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1cf34:	482e      	ldr	r0, [pc, #184]	; (1cff0 <recv_thread+0x10c>)
   1cf36:	f000 fbb5 	bl	1d6a4 <hci_internal_evt_get>
   1cf3a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1cf3c:	f7ff fe98 	bl	1cc70 <multithreading_lock_release>
	if (errcode) {
   1cf40:	2c00      	cmp	r4, #0
   1cf42:	d1ea      	bne.n	1cf1a <recv_thread+0x36>
	switch (hdr->evt) {
   1cf44:	7828      	ldrb	r0, [r5, #0]
   1cf46:	283e      	cmp	r0, #62	; 0x3e
   1cf48:	d007      	beq.n	1cf5a <recv_thread+0x76>
   1cf4a:	28ff      	cmp	r0, #255	; 0xff
   1cf4c:	d01c      	beq.n	1cf88 <recv_thread+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1cf4e:	f04f 32ff 	mov.w	r2, #4294967295
   1cf52:	f04f 33ff 	mov.w	r3, #4294967295
   1cf56:	2400      	movs	r4, #0
   1cf58:	e007      	b.n	1cf6a <recv_thread+0x86>
		switch (me->subevent) {
   1cf5a:	78ab      	ldrb	r3, [r5, #2]
   1cf5c:	2b02      	cmp	r3, #2
   1cf5e:	d001      	beq.n	1cf64 <recv_thread+0x80>
   1cf60:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1cf62:	d1f4      	bne.n	1cf4e <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1cf64:	2200      	movs	r2, #0
   1cf66:	2300      	movs	r3, #0
   1cf68:	2401      	movs	r4, #1
   1cf6a:	4621      	mov	r1, r4
   1cf6c:	f7f7 fc2c 	bl	147c8 <bt_buf_get_evt>
	if (!evt_buf) {
   1cf70:	4607      	mov	r7, r0
   1cf72:	b960      	cbnz	r0, 1cf8e <recv_thread+0xaa>
		if (discardable) {
   1cf74:	2c00      	cmp	r4, #0
   1cf76:	d1d1      	bne.n	1cf1c <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1cf78:	01b1      	lsls	r1, r6, #6
   1cf7a:	481e      	ldr	r0, [pc, #120]	; (1cff4 <recv_thread+0x110>)
   1cf7c:	f041 0101 	orr.w	r1, r1, #1
   1cf80:	f003 f8c4 	bl	2010c <log_0>
	return true;
   1cf84:	2401      	movs	r4, #1
   1cf86:	e7c9      	b.n	1cf1c <recv_thread+0x38>
		switch (subevent) {
   1cf88:	78ab      	ldrb	r3, [r5, #2]
   1cf8a:	2b80      	cmp	r3, #128	; 0x80
   1cf8c:	e7e9      	b.n	1cf62 <recv_thread+0x7e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1cf8e:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1cf90:	4629      	mov	r1, r5
   1cf92:	3202      	adds	r2, #2
   1cf94:	3008      	adds	r0, #8
   1cf96:	f007 fa90 	bl	244ba <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1cf9a:	4638      	mov	r0, r7
   1cf9c:	f7f8 fe30 	bl	15c00 <bt_recv>
   1cfa0:	e7f0      	b.n	1cf84 <recv_thread+0xa0>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1cfa2:	4813      	ldr	r0, [pc, #76]	; (1cff0 <recv_thread+0x10c>)
   1cfa4:	f7f0 f893 	bl	d0ce <sdc_hci_data_get>
   1cfa8:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1cfaa:	f7ff fe61 	bl	1cc70 <multithreading_lock_release>
	if (errcode) {
   1cfae:	2f00      	cmp	r7, #0
   1cfb0:	d1bc      	bne.n	1cf2c <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1cfb2:	f04f 32ff 	mov.w	r2, #4294967295
   1cfb6:	f04f 33ff 	mov.w	r3, #4294967295
   1cfba:	2003      	movs	r0, #3
   1cfbc:	f7f7 fbce 	bl	1475c <bt_buf_get_rx>
	if (!data_buf) {
   1cfc0:	4607      	mov	r7, r0
   1cfc2:	b938      	cbnz	r0, 1cfd4 <recv_thread+0xf0>
		BT_ERR("No data buffer available");
   1cfc4:	01b1      	lsls	r1, r6, #6
   1cfc6:	480c      	ldr	r0, [pc, #48]	; (1cff8 <recv_thread+0x114>)
   1cfc8:	f041 0101 	orr.w	r1, r1, #1
   1cfcc:	f003 f89e 	bl	2010c <log_0>
	return true;
   1cfd0:	2701      	movs	r7, #1
   1cfd2:	e7ac      	b.n	1cf2e <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1cfd4:	886a      	ldrh	r2, [r5, #2]
   1cfd6:	4629      	mov	r1, r5
   1cfd8:	3204      	adds	r2, #4
   1cfda:	3008      	adds	r0, #8
   1cfdc:	f007 fa6d 	bl	244ba <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1cfe0:	4638      	mov	r0, r7
   1cfe2:	f7f8 fe0d 	bl	15c00 <bt_recv>
   1cfe6:	e7f3      	b.n	1cfd0 <recv_thread+0xec>
   1cfe8:	000256c4 	.word	0x000256c4
   1cfec:	000257b4 	.word	0x000257b4
   1cff0:	2000349f 	.word	0x2000349f
   1cff4:	000285c3 	.word	0x000285c3
   1cff8:	000285dd 	.word	0x000285dd
   1cffc:	200008a0 	.word	0x200008a0

0001d000 <host_signal>:
	z_impl_k_sem_give(sem);
   1d000:	4801      	ldr	r0, [pc, #4]	; (1d008 <host_signal+0x8>)
   1d002:	f001 bb11 	b.w	1e628 <z_impl_k_sem_give>
   1d006:	bf00      	nop
   1d008:	200008a0 	.word	0x200008a0

0001d00c <hci_driver_send>:
{
   1d00c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1d00e:	8983      	ldrh	r3, [r0, #12]
{
   1d010:	4605      	mov	r5, r0
	if (!buf->len) {
   1d012:	b383      	cbz	r3, 1d076 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1d014:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1d016:	b1ab      	cbz	r3, 1d044 <hci_driver_send+0x38>
   1d018:	2b02      	cmp	r3, #2
   1d01a:	d12c      	bne.n	1d076 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d01c:	f04f 30ff 	mov.w	r0, #4294967295
   1d020:	f04f 31ff 	mov.w	r1, #4294967295
   1d024:	f7ff fe1c 	bl	1cc60 <multithreading_lock_acquire>
	if (!errcode) {
   1d028:	4604      	mov	r4, r0
   1d02a:	b948      	cbnz	r0, 1d040 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1d02c:	68a8      	ldr	r0, [r5, #8]
   1d02e:	f7f0 f85b 	bl	d0e8 <sdc_hci_data_put>
   1d032:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d034:	f7ff fe1c 	bl	1cc70 <multithreading_lock_release>
		if (errcode) {
   1d038:	b1c4      	cbz	r4, 1d06c <hci_driver_send+0x60>
   1d03a:	4810      	ldr	r0, [pc, #64]	; (1d07c <hci_driver_send+0x70>)
   1d03c:	f001 faf4 	bl	1e628 <z_impl_k_sem_give>
}
   1d040:	4620      	mov	r0, r4
   1d042:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d044:	f04f 30ff 	mov.w	r0, #4294967295
   1d048:	f04f 31ff 	mov.w	r1, #4294967295
   1d04c:	f7ff fe08 	bl	1cc60 <multithreading_lock_acquire>
	if (!errcode) {
   1d050:	4604      	mov	r4, r0
   1d052:	2800      	cmp	r0, #0
   1d054:	d1f4      	bne.n	1d040 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1d056:	68a8      	ldr	r0, [r5, #8]
   1d058:	f000 f812 	bl	1d080 <hci_internal_cmd_put>
   1d05c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d05e:	f7ff fe07 	bl	1cc70 <multithreading_lock_release>
	if (errcode) {
   1d062:	2c00      	cmp	r4, #0
   1d064:	d1ec      	bne.n	1d040 <hci_driver_send+0x34>
   1d066:	4805      	ldr	r0, [pc, #20]	; (1d07c <hci_driver_send+0x70>)
   1d068:	f001 fade 	bl	1e628 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1d06c:	4628      	mov	r0, r5
   1d06e:	f7ff f8c5 	bl	1c1fc <net_buf_unref>
   1d072:	2400      	movs	r4, #0
   1d074:	e7e4      	b.n	1d040 <hci_driver_send+0x34>
	switch (type) {
   1d076:	f06f 0415 	mvn.w	r4, #21
   1d07a:	e7e1      	b.n	1d040 <hci_driver_send+0x34>
   1d07c:	200008a0 	.word	0x200008a0

0001d080 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1d080:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1d082:	4c8e      	ldr	r4, [pc, #568]	; (1d2bc <hci_internal_cmd_put+0x23c>)
   1d084:	7823      	ldrb	r3, [r4, #0]
   1d086:	2b00      	cmp	r3, #0
   1d088:	f040 82f7 	bne.w	1d67a <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   1d08c:	7843      	ldrb	r3, [r0, #1]
   1d08e:	7805      	ldrb	r5, [r0, #0]
   1d090:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1d094:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1d098:	b22e      	sxth	r6, r5
   1d09a:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1d09e:	d20d      	bcs.n	1d0bc <hci_internal_cmd_put+0x3c>
   1d0a0:	b17b      	cbz	r3, 1d0c2 <hci_internal_cmd_put+0x42>
   1d0a2:	3b01      	subs	r3, #1
   1d0a4:	2b07      	cmp	r3, #7
   1d0a6:	d80c      	bhi.n	1d0c2 <hci_internal_cmd_put+0x42>
   1d0a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d0ac:	000b000e 	.word	0x000b000e
   1d0b0:	0060002c 	.word	0x0060002c
   1d0b4:	000b000b 	.word	0x000b000b
   1d0b8:	010c000b 	.word	0x010c000b
   1d0bc:	2b3f      	cmp	r3, #63	; 0x3f
   1d0be:	f000 8233 	beq.w	1d528 <hci_internal_cmd_put+0x4a8>
   1d0c2:	2304      	movs	r3, #4
   1d0c4:	2001      	movs	r0, #1
   1d0c6:	e26b      	b.n	1d5a0 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   1d0c8:	f240 4306 	movw	r3, #1030	; 0x406
   1d0cc:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d0ce:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1d0d2:	d005      	beq.n	1d0e0 <hci_internal_cmd_put+0x60>
   1d0d4:	f240 431d 	movw	r3, #1053	; 0x41d
   1d0d8:	429e      	cmp	r6, r3
   1d0da:	d010      	beq.n	1d0fe <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1d0dc:	2001      	movs	r0, #1
   1d0de:	e001      	b.n	1d0e4 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1d0e0:	f7f0 f924 	bl	d32c <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d0e4:	230f      	movs	r3, #15
   1d0e6:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d0e8:	2304      	movs	r3, #4
   1d0ea:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1d0ec:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1d0ee:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1d0f0:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1d0f2:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1d0f6:	2301      	movs	r3, #1
   1d0f8:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1d0fa:	2000      	movs	r0, #0
}
   1d0fc:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1d0fe:	f7f0 f917 	bl	d330 <sdc_hci_cmd_lc_read_remote_version_information>
   1d102:	e7ef      	b.n	1d0e4 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1d104:	f640 4363 	movw	r3, #3171	; 0xc63
   1d108:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d10a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1d10e:	d025      	beq.n	1d15c <hci_internal_cmd_put+0xdc>
   1d110:	dc0f      	bgt.n	1d132 <hci_internal_cmd_put+0xb2>
   1d112:	f640 4303 	movw	r3, #3075	; 0xc03
   1d116:	429e      	cmp	r6, r3
   1d118:	d018      	beq.n	1d14c <hci_internal_cmd_put+0xcc>
   1d11a:	f640 432d 	movw	r3, #3117	; 0xc2d
   1d11e:	429e      	cmp	r6, r3
   1d120:	d017      	beq.n	1d152 <hci_internal_cmd_put+0xd2>
   1d122:	f640 4301 	movw	r3, #3073	; 0xc01
   1d126:	429e      	cmp	r6, r3
   1d128:	d1d8      	bne.n	1d0dc <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1d12a:	f7ef fff9 	bl	d120 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1d12e:	2304      	movs	r3, #4
   1d130:	e0b8      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1d132:	f640 437b 	movw	r3, #3195	; 0xc7b
   1d136:	429e      	cmp	r6, r3
   1d138:	d013      	beq.n	1d162 <hci_internal_cmd_put+0xe2>
   1d13a:	f640 437c 	movw	r3, #3196	; 0xc7c
   1d13e:	429e      	cmp	r6, r3
   1d140:	d1cc      	bne.n	1d0dc <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1d142:	495f      	ldr	r1, [pc, #380]	; (1d2c0 <hci_internal_cmd_put+0x240>)
   1d144:	f7ef fff6 	bl	d134 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1d148:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1d14a:	e0ab      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1d14c:	f7e7 fbb4 	bl	48b8 <sdc_hci_cmd_cb_reset>
   1d150:	e7ed      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1d152:	495b      	ldr	r1, [pc, #364]	; (1d2c0 <hci_internal_cmd_put+0x240>)
   1d154:	f7ef ffe2 	bl	d11c <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1d158:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1d15a:	e0a3      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1d15c:	f7ef ffe5 	bl	d12a <sdc_hci_cmd_cb_set_event_mask_page_2>
   1d160:	e7e5      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1d162:	4957      	ldr	r1, [pc, #348]	; (1d2c0 <hci_internal_cmd_put+0x240>)
   1d164:	f7ef ffd8 	bl	d118 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1d168:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1d16a:	e09b      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1d16c:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1d170:	3e01      	subs	r6, #1
   1d172:	2e08      	cmp	r6, #8
   1d174:	d8b2      	bhi.n	1d0dc <hci_internal_cmd_put+0x5c>
   1d176:	a301      	add	r3, pc, #4	; (adr r3, 1d17c <hci_internal_cmd_put+0xfc>)
   1d178:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1d17c:	0001d1a1 	.word	0x0001d1a1
   1d180:	0001d1ab 	.word	0x0001d1ab
   1d184:	0001d285 	.word	0x0001d285
   1d188:	0001d0dd 	.word	0x0001d0dd
   1d18c:	0001d0dd 	.word	0x0001d0dd
   1d190:	0001d0dd 	.word	0x0001d0dd
   1d194:	0001d0dd 	.word	0x0001d0dd
   1d198:	0001d0dd 	.word	0x0001d0dd
   1d19c:	0001d29d 	.word	0x0001d29d
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1d1a0:	4847      	ldr	r0, [pc, #284]	; (1d2c0 <hci_internal_cmd_put+0x240>)
   1d1a2:	f7f0 f878 	bl	d296 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1d1a6:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1d1a8:	e07c      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1d1aa:	4845      	ldr	r0, [pc, #276]	; (1d2c0 <hci_internal_cmd_put+0x240>)
   1d1ac:	222e      	movs	r2, #46	; 0x2e
   1d1ae:	2100      	movs	r1, #0
   1d1b0:	f005 f845 	bl	2223e <memset>
	cmds->hci_disconnect = 1;
   1d1b4:	79e3      	ldrb	r3, [r4, #7]
   1d1b6:	f043 0320 	orr.w	r3, r3, #32
   1d1ba:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1d1bc:	7a63      	ldrb	r3, [r4, #9]
   1d1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d1c2:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1d1c4:	7b23      	ldrb	r3, [r4, #12]
   1d1c6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d1ca:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1d1cc:	7c63      	ldrb	r3, [r4, #17]
   1d1ce:	f043 0304 	orr.w	r3, r3, #4
   1d1d2:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1d1d4:	7d63      	ldrb	r3, [r4, #21]
   1d1d6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1d1da:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1d1de:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1d1e0:	7da3      	ldrb	r3, [r4, #22]
   1d1e2:	f043 0302 	orr.w	r3, r3, #2
   1d1e6:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1d1e8:	7f63      	ldrb	r3, [r4, #29]
   1d1ea:	f043 0304 	orr.w	r3, r3, #4
   1d1ee:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1d1f0:	f894 3020 	ldrb.w	r3, [r4, #32]
   1d1f4:	f063 0308 	orn	r3, r3, #8
   1d1f8:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1d1fc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1d200:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1d204:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1d208:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1d20c:	f063 030c 	orn	r3, r3, #12
   1d210:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1d214:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d218:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1d21c:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1d220:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1d224:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1d228:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1d22c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1d230:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1d234:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1d238:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d23c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1d240:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1d244:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1d248:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1d24c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1d250:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1d254:	f063 0301 	orn	r3, r3, #1
   1d258:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1d25c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1d260:	f043 0301 	orr.w	r3, r3, #1
   1d264:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1d268:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1d26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d270:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1d274:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1d278:	f043 0304 	orr.w	r3, r3, #4
   1d27c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1d280:	2344      	movs	r3, #68	; 0x44
   1d282:	e0de      	b.n	1d442 <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   1d284:	480e      	ldr	r0, [pc, #56]	; (1d2c0 <hci_internal_cmd_put+0x240>)
   1d286:	2208      	movs	r2, #8
   1d288:	2100      	movs	r1, #0
   1d28a:	f004 ffd8 	bl	2223e <memset>
	features->bdedr_not_supported = 1;
   1d28e:	7ae3      	ldrb	r3, [r4, #11]
   1d290:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1d294:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1d298:	72e3      	strb	r3, [r4, #11]
   1d29a:	e0d1      	b.n	1d440 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1d29c:	4808      	ldr	r0, [pc, #32]	; (1d2c0 <hci_internal_cmd_put+0x240>)
   1d29e:	f7ef fff8 	bl	d292 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1d2a2:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1d2a4:	2801      	cmp	r0, #1
   1d2a6:	f43f af1d 	beq.w	1d0e4 <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d2aa:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1d2ac:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1d2ae:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d2b0:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1d2b2:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1d2b4:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1d2b6:	71a0      	strb	r0, [r4, #6]
}
   1d2b8:	e71d      	b.n	1d0f6 <hci_internal_cmd_put+0x76>
   1d2ba:	bf00      	nop
   1d2bc:	20004a1e 	.word	0x20004a1e
   1d2c0:	20004a25 	.word	0x20004a25
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d2c4:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1d2c8:	3e01      	subs	r6, #1
   1d2ca:	3003      	adds	r0, #3
	switch (opcode)	{
   1d2cc:	2e4d      	cmp	r6, #77	; 0x4d
   1d2ce:	f63f af05 	bhi.w	1d0dc <hci_internal_cmd_put+0x5c>
   1d2d2:	a301      	add	r3, pc, #4	; (adr r3, 1d2d8 <hci_internal_cmd_put+0x258>)
   1d2d4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1d2d8:	0001d411 	.word	0x0001d411
   1d2dc:	0001d417 	.word	0x0001d417
   1d2e0:	0001d41f 	.word	0x0001d41f
   1d2e4:	0001d0dd 	.word	0x0001d0dd
   1d2e8:	0001d447 	.word	0x0001d447
   1d2ec:	0001d44d 	.word	0x0001d44d
   1d2f0:	0001d453 	.word	0x0001d453
   1d2f4:	0001d45d 	.word	0x0001d45d
   1d2f8:	0001d463 	.word	0x0001d463
   1d2fc:	0001d469 	.word	0x0001d469
   1d300:	0001d0dd 	.word	0x0001d0dd
   1d304:	0001d0dd 	.word	0x0001d0dd
   1d308:	0001d0dd 	.word	0x0001d0dd
   1d30c:	0001d0dd 	.word	0x0001d0dd
   1d310:	0001d46f 	.word	0x0001d46f
   1d314:	0001d477 	.word	0x0001d477
   1d318:	0001d47d 	.word	0x0001d47d
   1d31c:	0001d483 	.word	0x0001d483
   1d320:	0001d0dd 	.word	0x0001d0dd
   1d324:	0001d0dd 	.word	0x0001d0dd
   1d328:	0001d489 	.word	0x0001d489
   1d32c:	0001d493 	.word	0x0001d493
   1d330:	0001d499 	.word	0x0001d499
   1d334:	0001d4a3 	.word	0x0001d4a3
   1d338:	0001d0dd 	.word	0x0001d0dd
   1d33c:	0001d4ab 	.word	0x0001d4ab
   1d340:	0001d4b3 	.word	0x0001d4b3
   1d344:	0001d4bb 	.word	0x0001d4bb
   1d348:	0001d0dd 	.word	0x0001d0dd
   1d34c:	0001d0dd 	.word	0x0001d0dd
   1d350:	0001d0dd 	.word	0x0001d0dd
   1d354:	0001d0dd 	.word	0x0001d0dd
   1d358:	0001d0dd 	.word	0x0001d0dd
   1d35c:	0001d4c3 	.word	0x0001d4c3
   1d360:	0001d4cb 	.word	0x0001d4cb
   1d364:	0001d4d3 	.word	0x0001d4d3
   1d368:	0001d0dd 	.word	0x0001d0dd
   1d36c:	0001d0dd 	.word	0x0001d0dd
   1d370:	0001d4d9 	.word	0x0001d4d9
   1d374:	0001d4df 	.word	0x0001d4df
   1d378:	0001d4e5 	.word	0x0001d4e5
   1d37c:	0001d4eb 	.word	0x0001d4eb
   1d380:	0001d0dd 	.word	0x0001d0dd
   1d384:	0001d0dd 	.word	0x0001d0dd
   1d388:	0001d4f3 	.word	0x0001d4f3
   1d38c:	0001d4f9 	.word	0x0001d4f9
   1d390:	0001d4ff 	.word	0x0001d4ff
   1d394:	0001d507 	.word	0x0001d507
   1d398:	0001d50f 	.word	0x0001d50f
   1d39c:	0001d515 	.word	0x0001d515
   1d3a0:	0001d0dd 	.word	0x0001d0dd
   1d3a4:	0001d0dd 	.word	0x0001d0dd
   1d3a8:	0001d0dd 	.word	0x0001d0dd
   1d3ac:	0001d0dd 	.word	0x0001d0dd
   1d3b0:	0001d0dd 	.word	0x0001d0dd
   1d3b4:	0001d0dd 	.word	0x0001d0dd
   1d3b8:	0001d0dd 	.word	0x0001d0dd
   1d3bc:	0001d0dd 	.word	0x0001d0dd
   1d3c0:	0001d0dd 	.word	0x0001d0dd
   1d3c4:	0001d0dd 	.word	0x0001d0dd
   1d3c8:	0001d0dd 	.word	0x0001d0dd
   1d3cc:	0001d0dd 	.word	0x0001d0dd
   1d3d0:	0001d0dd 	.word	0x0001d0dd
   1d3d4:	0001d0dd 	.word	0x0001d0dd
   1d3d8:	0001d0dd 	.word	0x0001d0dd
   1d3dc:	0001d0dd 	.word	0x0001d0dd
   1d3e0:	0001d0dd 	.word	0x0001d0dd
   1d3e4:	0001d0dd 	.word	0x0001d0dd
   1d3e8:	0001d0dd 	.word	0x0001d0dd
   1d3ec:	0001d0dd 	.word	0x0001d0dd
   1d3f0:	0001d0dd 	.word	0x0001d0dd
   1d3f4:	0001d0dd 	.word	0x0001d0dd
   1d3f8:	0001d0dd 	.word	0x0001d0dd
   1d3fc:	0001d0dd 	.word	0x0001d0dd
   1d400:	0001d51b 	.word	0x0001d51b
   1d404:	0001d0dd 	.word	0x0001d0dd
   1d408:	0001d0dd 	.word	0x0001d0dd
   1d40c:	0001d523 	.word	0x0001d523
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1d410:	f7ef ff7b 	bl	d30a <sdc_hci_cmd_le_set_event_mask>
   1d414:	e68b      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1d416:	48a2      	ldr	r0, [pc, #648]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d418:	f7ef ff55 	bl	d2c6 <sdc_hci_cmd_le_read_buffer_size>
   1d41c:	e69c      	b.n	1d158 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1d41e:	48a0      	ldr	r0, [pc, #640]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d420:	2205      	movs	r2, #5
   1d422:	2100      	movs	r1, #0
   1d424:	f004 ff0b 	bl	2223e <memset>
	features->le_encryption = 1;
   1d428:	79e3      	ldrb	r3, [r4, #7]
   1d42a:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   1d42e:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   1d432:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1d434:	7a23      	ldrb	r3, [r4, #8]
   1d436:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1d43a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1d43e:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1d440:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1d442:	2000      	movs	r0, #0
   1d444:	e731      	b.n	1d2aa <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1d446:	f7ef ff69 	bl	d31c <sdc_hci_cmd_le_set_random_address>
   1d44a:	e670      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1d44c:	f7ef ff57 	bl	d2fe <sdc_hci_cmd_le_set_adv_params>
   1d450:	e66d      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1d452:	4893      	ldr	r0, [pc, #588]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d454:	f7ef ff35 	bl	d2c2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1d458:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1d45a:	e723      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1d45c:	f7ef ff4b 	bl	d2f6 <sdc_hci_cmd_le_set_adv_data>
   1d460:	e665      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1d462:	f7ef ff5f 	bl	d324 <sdc_hci_cmd_le_set_scan_response_data>
   1d466:	e662      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1d468:	f7ef ff47 	bl	d2fa <sdc_hci_cmd_le_set_adv_enable>
   1d46c:	e65f      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1d46e:	488c      	ldr	r0, [pc, #560]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d470:	f7ef ff39 	bl	d2e6 <sdc_hci_cmd_le_read_white_list_size>
   1d474:	e7f0      	b.n	1d458 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   1d476:	f7ef ff16 	bl	d2a6 <sdc_hci_cmd_le_clear_white_list>
   1d47a:	e658      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1d47c:	f7ef ff0f 	bl	d29e <sdc_hci_cmd_le_add_device_to_white_list>
   1d480:	e655      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1d482:	f7ef ff34 	bl	d2ee <sdc_hci_cmd_le_remove_device_from_white_list>
   1d486:	e652      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1d488:	4985      	ldr	r1, [pc, #532]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d48a:	f7ef ff1e 	bl	d2ca <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1d48e:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1d490:	e708      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1d492:	f7ef ff20 	bl	d2d6 <sdc_hci_cmd_le_read_remote_features>
   1d496:	e625      	b.n	1d0e4 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1d498:	4981      	ldr	r1, [pc, #516]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d49a:	f7ef ff06 	bl	d2aa <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1d49e:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1d4a0:	e700      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1d4a2:	487f      	ldr	r0, [pc, #508]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d4a4:	f7ef ff0b 	bl	d2be <sdc_hci_cmd_le_rand>
   1d4a8:	e67d      	b.n	1d1a6 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1d4aa:	497d      	ldr	r1, [pc, #500]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d4ac:	f7ef ff03 	bl	d2b6 <sdc_hci_cmd_le_long_term_key_request_reply>
   1d4b0:	e64a      	b.n	1d148 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1d4b2:	497b      	ldr	r1, [pc, #492]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d4b4:	f7ef fefb 	bl	d2ae <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1d4b8:	e646      	b.n	1d148 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1d4ba:	238f      	movs	r3, #143	; 0x8f
   1d4bc:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1d4be:	23c0      	movs	r3, #192	; 0xc0
   1d4c0:	e6ea      	b.n	1d298 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1d4c2:	4977      	ldr	r1, [pc, #476]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d4c4:	f7ef ff1d 	bl	d302 <sdc_hci_cmd_le_set_data_length>
   1d4c8:	e63e      	b.n	1d148 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1d4ca:	4875      	ldr	r0, [pc, #468]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d4cc:	f7ef ff07 	bl	d2de <sdc_hci_cmd_le_read_suggested_default_data_length>
   1d4d0:	e64a      	b.n	1d168 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1d4d2:	f7ef ff29 	bl	d328 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1d4d6:	e62a      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1d4d8:	f7ef fedf 	bl	d29a <sdc_hci_cmd_le_add_device_to_resolving_list>
   1d4dc:	e627      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1d4de:	f7ef ff04 	bl	d2ea <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1d4e2:	e624      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1d4e4:	f7ef fedd 	bl	d2a2 <sdc_hci_cmd_le_clear_resolving_list>
   1d4e8:	e621      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1d4ea:	486d      	ldr	r0, [pc, #436]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d4ec:	f7ef fef5 	bl	d2da <sdc_hci_cmd_le_read_resolving_list_size>
   1d4f0:	e7b2      	b.n	1d458 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1d4f2:	f7ef fefe 	bl	d2f2 <sdc_hci_cmd_le_set_address_resolution_enable>
   1d4f6:	e61a      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1d4f8:	f7ef ff12 	bl	d320 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1d4fc:	e617      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1d4fe:	4868      	ldr	r0, [pc, #416]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d500:	f7ef fee5 	bl	d2ce <sdc_hci_cmd_le_read_max_data_length>
   1d504:	e64f      	b.n	1d1a6 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1d506:	4966      	ldr	r1, [pc, #408]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d508:	f7ef fee3 	bl	d2d2 <sdc_hci_cmd_le_read_phy>
   1d50c:	e62c      	b.n	1d168 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1d50e:	f7ef fefa 	bl	d306 <sdc_hci_cmd_le_set_default_phy>
   1d512:	e60c      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1d514:	f7ef fefe 	bl	d314 <sdc_hci_cmd_le_set_phy>
   1d518:	e5e4      	b.n	1d0e4 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1d51a:	4861      	ldr	r0, [pc, #388]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d51c:	f7ef fee1 	bl	d2e2 <sdc_hci_cmd_le_read_transmit_power>
   1d520:	e612      	b.n	1d148 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1d522:	f7ef fef9 	bl	d318 <sdc_hci_cmd_le_set_privacy_mode>
   1d526:	e602      	b.n	1d12e <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1d528:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1d52c:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d52e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1d532:	d821      	bhi.n	1d578 <hci_internal_cmd_put+0x4f8>
   1d534:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1d538:	f43f add0 	beq.w	1d0dc <hci_internal_cmd_put+0x5c>
   1d53c:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1d540:	3b01      	subs	r3, #1
   1d542:	2b09      	cmp	r3, #9
   1d544:	f63f adca 	bhi.w	1d0dc <hci_internal_cmd_put+0x5c>
   1d548:	a201      	add	r2, pc, #4	; (adr r2, 1d550 <hci_internal_cmd_put+0x4d0>)
   1d54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d54e:	bf00      	nop
   1d550:	0001d599 	.word	0x0001d599
   1d554:	0001d5c7 	.word	0x0001d5c7
   1d558:	0001d0dd 	.word	0x0001d0dd
   1d55c:	0001d0dd 	.word	0x0001d0dd
   1d560:	0001d0dd 	.word	0x0001d0dd
   1d564:	0001d613 	.word	0x0001d613
   1d568:	0001d0dd 	.word	0x0001d0dd
   1d56c:	0001d0dd 	.word	0x0001d0dd
   1d570:	0001d5ff 	.word	0x0001d5ff
   1d574:	0001d609 	.word	0x0001d609
   1d578:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1d57c:	b29b      	uxth	r3, r3
   1d57e:	2b05      	cmp	r3, #5
   1d580:	f63f adac 	bhi.w	1d0dc <hci_internal_cmd_put+0x5c>
   1d584:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1d588:	2b05      	cmp	r3, #5
   1d58a:	f63f ada7 	bhi.w	1d0dc <hci_internal_cmd_put+0x5c>
   1d58e:	e8df f003 	tbb	[pc, r3]
   1d592:	5044      	.short	0x5044
   1d594:	5c595653 	.word	0x5c595653
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1d598:	4841      	ldr	r0, [pc, #260]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d59a:	f7e7 f9a1 	bl	48e0 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1d59e:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1d5a0:	f242 0219 	movw	r2, #8217	; 0x2019
   1d5a4:	4296      	cmp	r6, r2
   1d5a6:	dc60      	bgt.n	1d66a <hci_internal_cmd_put+0x5ea>
   1d5a8:	f242 020c 	movw	r2, #8204	; 0x200c
   1d5ac:	4296      	cmp	r6, r2
   1d5ae:	dc4f      	bgt.n	1d650 <hci_internal_cmd_put+0x5d0>
   1d5b0:	f240 4206 	movw	r2, #1030	; 0x406
   1d5b4:	4296      	cmp	r6, r2
   1d5b6:	f43f ad95 	beq.w	1d0e4 <hci_internal_cmd_put+0x64>
   1d5ba:	f240 421d 	movw	r2, #1053	; 0x41d
   1d5be:	4296      	cmp	r6, r2
   1d5c0:	f43f ad90 	beq.w	1d0e4 <hci_internal_cmd_put+0x64>
   1d5c4:	e66e      	b.n	1d2a4 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1d5c6:	4836      	ldr	r0, [pc, #216]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d5c8:	2202      	movs	r2, #2
   1d5ca:	2100      	movs	r1, #0
   1d5cc:	f004 fe37 	bl	2223e <memset>
	cmds->read_version_info = 1;
   1d5d0:	79e3      	ldrb	r3, [r4, #7]
   1d5d2:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1d5d6:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1d5da:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1d5dc:	7a23      	ldrb	r3, [r4, #8]
   1d5de:	f023 0307 	bic.w	r3, r3, #7
   1d5e2:	f043 0307 	orr.w	r3, r3, #7
   1d5e6:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1d5e8:	f242 0319 	movw	r3, #8217	; 0x2019
   1d5ec:	429e      	cmp	r6, r3
   1d5ee:	dd47      	ble.n	1d680 <hci_internal_cmd_put+0x600>
   1d5f0:	f242 0332 	movw	r3, #8242	; 0x2032
   1d5f4:	429e      	cmp	r6, r3
   1d5f6:	d051      	beq.n	1d69c <hci_internal_cmd_put+0x61c>
   1d5f8:	f242 0343 	movw	r3, #8259	; 0x2043
   1d5fc:	e04b      	b.n	1d696 <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1d5fe:	4828      	ldr	r0, [pc, #160]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d600:	f7ef fdfa 	bl	d1f8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1d604:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1d606:	e7cb      	b.n	1d5a0 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1d608:	4825      	ldr	r0, [pc, #148]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d60a:	f7ef fda8 	bl	d15e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1d60e:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1d610:	e7c6      	b.n	1d5a0 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1d612:	f7ef fe3c 	bl	d28e <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1d616:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1d618:	e7c2      	b.n	1d5a0 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   1d61a:	4821      	ldr	r0, [pc, #132]	; (1d6a0 <hci_internal_cmd_put+0x620>)
   1d61c:	2201      	movs	r2, #1
   1d61e:	2100      	movs	r1, #0
   1d620:	f004 fe0d 	bl	2223e <memset>
	cmds->read_supported_vs_commands = 1;
   1d624:	79e3      	ldrb	r3, [r4, #7]
   1d626:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1d62a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1d62e:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1d630:	e626      	b.n	1d280 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1d632:	f7ef fd8d 	bl	d150 <sdc_hci_cmd_vs_llpm_mode_set>
   1d636:	e57a      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1d638:	f7ef fd86 	bl	d148 <sdc_hci_cmd_vs_conn_update>
   1d63c:	e577      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1d63e:	f7ef fd7b 	bl	d138 <sdc_hci_cmd_vs_conn_event_extend>
   1d642:	e574      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1d644:	f7ef fd86 	bl	d154 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1d648:	e571      	b.n	1d12e <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1d64a:	f7ef fd7f 	bl	d14c <sdc_hci_cmd_vs_event_length_set>
   1d64e:	e56e      	b.n	1d12e <hci_internal_cmd_put+0xae>
   1d650:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1d654:	3a0d      	subs	r2, #13
   1d656:	2101      	movs	r1, #1
   1d658:	b292      	uxth	r2, r2
   1d65a:	fa01 f202 	lsl.w	r2, r1, r2
   1d65e:	f241 2141 	movw	r1, #4673	; 0x1241
   1d662:	420a      	tst	r2, r1
   1d664:	f43f ae1e 	beq.w	1d2a4 <hci_internal_cmd_put+0x224>
   1d668:	e53c      	b.n	1d0e4 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1d66a:	f242 0232 	movw	r2, #8242	; 0x2032
   1d66e:	4296      	cmp	r6, r2
   1d670:	f43f ad38 	beq.w	1d0e4 <hci_internal_cmd_put+0x64>
   1d674:	f242 0243 	movw	r2, #8259	; 0x2043
   1d678:	e7a1      	b.n	1d5be <hci_internal_cmd_put+0x53e>
		return -NRF_EPERM;
   1d67a:	f04f 30ff 	mov.w	r0, #4294967295
   1d67e:	e53d      	b.n	1d0fc <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   1d680:	f242 030c 	movw	r3, #8204	; 0x200c
   1d684:	429e      	cmp	r6, r3
   1d686:	f73f adfb 	bgt.w	1d280 <hci_internal_cmd_put+0x200>
   1d68a:	f240 4306 	movw	r3, #1030	; 0x406
   1d68e:	429e      	cmp	r6, r3
   1d690:	d004      	beq.n	1d69c <hci_internal_cmd_put+0x61c>
   1d692:	f240 431d 	movw	r3, #1053	; 0x41d
   1d696:	429e      	cmp	r6, r3
   1d698:	f47f adf2 	bne.w	1d280 <hci_internal_cmd_put+0x200>
   1d69c:	2000      	movs	r0, #0
   1d69e:	e521      	b.n	1d0e4 <hci_internal_cmd_put+0x64>
   1d6a0:	20004a25 	.word	0x20004a25

0001d6a4 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1d6a4:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1d6a6:	4c07      	ldr	r4, [pc, #28]	; (1d6c4 <hci_internal_evt_get+0x20>)
   1d6a8:	7823      	ldrb	r3, [r4, #0]
   1d6aa:	b13b      	cbz	r3, 1d6bc <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1d6ac:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1d6ae:	1c61      	adds	r1, r4, #1
   1d6b0:	3202      	adds	r2, #2
   1d6b2:	f004 fd99 	bl	221e8 <memcpy>
		cmd_complete_or_status.occurred = false;
   1d6b6:	2000      	movs	r0, #0
   1d6b8:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1d6ba:	bd10      	pop	{r4, pc}
   1d6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1d6c0:	f7ef bd1d 	b.w	d0fe <sdc_hci_evt_get>
   1d6c4:	20004a1e 	.word	0x20004a1e

0001d6c8 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1d6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1d6cc:	4c0b      	ldr	r4, [pc, #44]	; (1d6fc <bt_rand+0x34>)
   1d6ce:	6823      	ldr	r3, [r4, #0]
{
   1d6d0:	4605      	mov	r5, r0
   1d6d2:	460e      	mov	r6, r1
   1d6d4:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1d6d6:	b13b      	cbz	r3, 1d6e8 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1d6d8:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   1d6da:	6883      	ldr	r3, [r0, #8]
   1d6dc:	b2b2      	uxth	r2, r6
   1d6de:	4629      	mov	r1, r5
   1d6e0:	681b      	ldr	r3, [r3, #0]
}
   1d6e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d6e6:	4718      	bx	r3
   1d6e8:	4805      	ldr	r0, [pc, #20]	; (1d700 <bt_rand+0x38>)
   1d6ea:	f000 fc37 	bl	1df5c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1d6ee:	6020      	str	r0, [r4, #0]
		if (!dev) {
   1d6f0:	2800      	cmp	r0, #0
   1d6f2:	d1f1      	bne.n	1d6d8 <bt_rand+0x10>
}
   1d6f4:	f06f 0012 	mvn.w	r0, #18
   1d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d6fc:	20003140 	.word	0x20003140
   1d700:	000284eb 	.word	0x000284eb

0001d704 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1d704:	b538      	push	{r3, r4, r5, lr}
   1d706:	4b0b      	ldr	r3, [pc, #44]	; (1d734 <m_assert_handler+0x30>)
   1d708:	4c0b      	ldr	r4, [pc, #44]	; (1d738 <m_assert_handler+0x34>)
   1d70a:	1ae4      	subs	r4, r4, r3
   1d70c:	460d      	mov	r5, r1
   1d70e:	08e4      	lsrs	r4, r4, #3
   1d710:	f7f3 ff30 	bl	11574 <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1d714:	01a4      	lsls	r4, r4, #6
   1d716:	f044 0401 	orr.w	r4, r4, #1
   1d71a:	4601      	mov	r1, r0
   1d71c:	4623      	mov	r3, r4
   1d71e:	4807      	ldr	r0, [pc, #28]	; (1d73c <m_assert_handler+0x38>)
   1d720:	462a      	mov	r2, r5
   1d722:	f002 fd14 	bl	2014e <log_2>
	k_oops();
   1d726:	4040      	eors	r0, r0
   1d728:	f380 8811 	msr	BASEPRI, r0
   1d72c:	f04f 0003 	mov.w	r0, #3
   1d730:	df02      	svc	2
}
   1d732:	bd38      	pop	{r3, r4, r5, pc}
   1d734:	000256c4 	.word	0x000256c4
   1d738:	00025784 	.word	0x00025784
   1d73c:	00028637 	.word	0x00028637

0001d740 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1d740:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1d742:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1d746:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1d74a:	2300      	movs	r3, #0
   1d74c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1d750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1d754:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1d758:	4a11      	ldr	r2, [pc, #68]	; (1d7a0 <mpsl_lib_init+0x60>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1d75a:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1d75c:	2119      	movs	r1, #25
   1d75e:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1d760:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1d764:	f7e6 fc8e 	bl	4084 <mpsl_init>
	if (err) {
   1d768:	4604      	mov	r4, r0
   1d76a:	b9b0      	cbnz	r0, 1d79a <mpsl_lib_init+0x5a>
		return err;
	}

	mpsl_fem_device_config_254_apply_set(
   1d76c:	f7e6 fdf8 	bl	4360 <mpsl_fem_device_config_254_apply_set>
		IS_ENABLED(CONFIG_MPSL_FEM_DEVICE_CONFIG_254));

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1d770:	480c      	ldr	r0, [pc, #48]	; (1d7a4 <mpsl_lib_init+0x64>)
   1d772:	2101      	movs	r1, #1
   1d774:	f7ee ff45 	bl	c602 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1d778:	4604      	mov	r4, r0
   1d77a:	b970      	cbnz	r0, 1d79a <mpsl_lib_init+0x5a>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1d77c:	4601      	mov	r1, r0
   1d77e:	2201      	movs	r2, #1
   1d780:	2008      	movs	r0, #8
   1d782:	f7f5 ff53 	bl	1362c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1d786:	2201      	movs	r2, #1
   1d788:	4621      	mov	r1, r4
   1d78a:	200b      	movs	r0, #11
   1d78c:	f7f5 ff4e 	bl	1362c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1d790:	2201      	movs	r2, #1
   1d792:	4621      	mov	r1, r4
   1d794:	4610      	mov	r0, r2
   1d796:	f7f5 ff49 	bl	1362c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1d79a:	4620      	mov	r0, r4
   1d79c:	b002      	add	sp, #8
   1d79e:	bd10      	pop	{r4, pc}
   1d7a0:	0001d705 	.word	0x0001d705
   1d7a4:	20003144 	.word	0x20003144

0001d7a8 <mpsl_low_prio_irq_handler>:
   1d7a8:	4801      	ldr	r0, [pc, #4]	; (1d7b0 <mpsl_low_prio_irq_handler+0x8>)
   1d7aa:	f000 bf3d 	b.w	1e628 <z_impl_k_sem_give>
   1d7ae:	bf00      	nop
   1d7b0:	200008b8 	.word	0x200008b8

0001d7b4 <signal_thread>:
{
   1d7b4:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1d7b6:	4c09      	ldr	r4, [pc, #36]	; (1d7dc <signal_thread+0x28>)
   1d7b8:	f04f 32ff 	mov.w	r2, #4294967295
   1d7bc:	f04f 33ff 	mov.w	r3, #4294967295
   1d7c0:	4620      	mov	r0, r4
   1d7c2:	f000 ff57 	bl	1e674 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d7c6:	f04f 31ff 	mov.w	r1, #4294967295
   1d7ca:	f04f 30ff 	mov.w	r0, #4294967295
   1d7ce:	f7ff fa47 	bl	1cc60 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1d7d2:	f7ef f82d 	bl	c830 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1d7d6:	f7ff fa4b 	bl	1cc70 <multithreading_lock_release>
	while (true) {
   1d7da:	e7ed      	b.n	1d7b8 <signal_thread+0x4>
   1d7dc:	200008b8 	.word	0x200008b8

0001d7e0 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1d7e0:	b530      	push	{r4, r5, lr}
   1d7e2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d7e4:	4d0f      	ldr	r5, [pc, #60]	; (1d824 <mpsl_signal_thread_init+0x44>)
   1d7e6:	4910      	ldr	r1, [pc, #64]	; (1d828 <mpsl_signal_thread_init+0x48>)
   1d7e8:	2200      	movs	r2, #0
   1d7ea:	2300      	movs	r3, #0
   1d7ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d7f0:	2400      	movs	r4, #0
   1d7f2:	f06f 0309 	mvn.w	r3, #9
   1d7f6:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1d7fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1d7fe:	4b0b      	ldr	r3, [pc, #44]	; (1d82c <mpsl_signal_thread_init+0x4c>)
   1d800:	9400      	str	r4, [sp, #0]
   1d802:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d806:	4628      	mov	r0, r5
   1d808:	f000 fd7c 	bl	1e304 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1d80c:	4908      	ldr	r1, [pc, #32]	; (1d830 <mpsl_signal_thread_init+0x50>)
   1d80e:	4628      	mov	r0, r5
   1d810:	f007 f92f 	bl	24a72 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1d814:	4622      	mov	r2, r4
   1d816:	2104      	movs	r1, #4
   1d818:	2019      	movs	r0, #25
   1d81a:	f7f5 ff07 	bl	1362c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1d81e:	4620      	mov	r0, r4
   1d820:	b009      	add	sp, #36	; 0x24
   1d822:	bd30      	pop	{r4, r5, pc}
   1d824:	20002b00 	.word	0x20002b00
   1d828:	20006940 	.word	0x20006940
   1d82c:	0001d7b5 	.word	0x0001d7b5
   1d830:	0002864b 	.word	0x0002864b

0001d834 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1d834:	4b01      	ldr	r3, [pc, #4]	; (1d83c <mpsl_hfclk_callback+0x8>)
   1d836:	2000      	movs	r0, #0
   1d838:	681b      	ldr	r3, [r3, #0]
   1d83a:	4718      	bx	r3
   1d83c:	20003168 	.word	0x20003168

0001d840 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1d840:	b120      	cbz	r0, 1d84c <nrfx_clock_start+0xc>
   1d842:	2801      	cmp	r0, #1
   1d844:	d106      	bne.n	1d854 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1d846:	4804      	ldr	r0, [pc, #16]	; (1d858 <nrfx_clock_start+0x18>)
   1d848:	f7e6 ba7c 	b.w	3d44 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1d84c:	4b03      	ldr	r3, [pc, #12]	; (1d85c <nrfx_clock_start+0x1c>)
   1d84e:	2001      	movs	r0, #1
   1d850:	681b      	ldr	r3, [r3, #0]
   1d852:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1d854:	4770      	bx	lr
   1d856:	bf00      	nop
   1d858:	0001d835 	.word	0x0001d835
   1d85c:	20003168 	.word	0x20003168

0001d860 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1d860:	4b01      	ldr	r3, [pc, #4]	; (1d868 <nrfx_clock_init+0x8>)
   1d862:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1d864:	4801      	ldr	r0, [pc, #4]	; (1d86c <nrfx_clock_init+0xc>)
   1d866:	4770      	bx	lr
   1d868:	20003168 	.word	0x20003168
   1d86c:	0bad0000 	.word	0x0bad0000

0001d870 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1d870:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d872:	4d1a      	ldr	r5, [pc, #104]	; (1d8dc <timeslot_callback+0x6c>)
   1d874:	f3bf 8f5b 	dmb	ish
   1d878:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   1d87a:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   1d87e:	bb5c      	cbnz	r4, 1d8d8 <timeslot_callback+0x68>
		return NULL;
	}

	switch (signal) {
   1d880:	2906      	cmp	r1, #6
   1d882:	d804      	bhi.n	1d88e <timeslot_callback+0x1e>
   1d884:	2904      	cmp	r1, #4
   1d886:	d81f      	bhi.n	1d8c8 <timeslot_callback+0x58>
   1d888:	b139      	cbz	r1, 1d89a <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   1d88a:	4620      	mov	r0, r4
   1d88c:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   1d88e:	2907      	cmp	r1, #7
   1d890:	d1fb      	bne.n	1d88a <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   1d892:	4628      	mov	r0, r5
   1d894:	f000 fec8 	bl	1e628 <z_impl_k_sem_give>
}
   1d898:	e7f7      	b.n	1d88a <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   1d89a:	6a2b      	ldr	r3, [r5, #32]
   1d89c:	e9d3 2000 	ldrd	r2, r0, [r3]
   1d8a0:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1d8a2:	2801      	cmp	r0, #1
   1d8a4:	d005      	beq.n	1d8b2 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   1d8a6:	462c      	mov	r4, r5
   1d8a8:	2302      	movs	r3, #2
   1d8aa:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1d8ae:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1d8b0:	e7eb      	b.n	1d88a <timeslot_callback+0x1a>
			_context.return_param.callback_action =
   1d8b2:	2303      	movs	r3, #3
   1d8b4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1d8b8:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   1d8bc:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1d8c0:	63ab      	str	r3, [r5, #56]	; 0x38
   1d8c2:	f105 0434 	add.w	r4, r5, #52	; 0x34
   1d8c6:	e7e0      	b.n	1d88a <timeslot_callback+0x1a>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1d8c8:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   1d8ca:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1d8ce:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1d8d2:	f7ee fe3f 	bl	c554 <mpsl_timeslot_request>
}
   1d8d6:	e7d8      	b.n	1d88a <timeslot_callback+0x1a>
		return NULL;
   1d8d8:	2400      	movs	r4, #0
   1d8da:	e7d6      	b.n	1d88a <timeslot_callback+0x1a>
   1d8dc:	2000316c 	.word	0x2000316c

0001d8e0 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d8e0:	4802      	ldr	r0, [pc, #8]	; (1d8ec <nrf_flash_sync_init+0xc>)
   1d8e2:	2201      	movs	r2, #1
   1d8e4:	2100      	movs	r1, #0
   1d8e6:	f007 b9a6 	b.w	24c36 <z_impl_k_sem_init>
   1d8ea:	bf00      	nop
   1d8ec:	2000316c 	.word	0x2000316c

0001d8f0 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1d8f0:	4b01      	ldr	r3, [pc, #4]	; (1d8f8 <nrf_flash_sync_set_context+0x8>)
   1d8f2:	61d8      	str	r0, [r3, #28]
}
   1d8f4:	4770      	bx	lr
   1d8f6:	bf00      	nop
   1d8f8:	2000316c 	.word	0x2000316c

0001d8fc <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1d8fc:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1d8fe:	4c3d      	ldr	r4, [pc, #244]	; (1d9f4 <nrf_flash_sync_exe+0xf8>)
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d900:	f04f 31ff 	mov.w	r1, #4294967295
{
   1d904:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d906:	f04f 30ff 	mov.w	r0, #4294967295
   1d90a:	f7ff f9a9 	bl	1cc60 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1d90e:	f104 0118 	add.w	r1, r4, #24
   1d912:	4839      	ldr	r0, [pc, #228]	; (1d9f8 <nrf_flash_sync_exe+0xfc>)
   1d914:	f7e3 f988 	bl	c28 <mpsl_timeslot_session_open>
   1d918:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1d91a:	f7ff f9a9 	bl	1cc70 <multithreading_lock_release>

	if (ret < 0) {
   1d91e:	2d00      	cmp	r5, #0
   1d920:	da0d      	bge.n	1d93e <nrf_flash_sync_exe+0x42>
   1d922:	4b36      	ldr	r3, [pc, #216]	; (1d9fc <nrf_flash_sync_exe+0x100>)
   1d924:	4a36      	ldr	r2, [pc, #216]	; (1da00 <nrf_flash_sync_exe+0x104>)
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1d926:	4837      	ldr	r0, [pc, #220]	; (1da04 <nrf_flash_sync_exe+0x108>)
   1d928:	1ad2      	subs	r2, r2, r3
   1d92a:	08d2      	lsrs	r2, r2, #3
   1d92c:	0192      	lsls	r2, r2, #6
   1d92e:	f042 0201 	orr.w	r2, r2, #1
   1d932:	4629      	mov	r1, r5
   1d934:	f002 fbf7 	bl	20126 <log_1>
		return -ENOMEM;
   1d938:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1d93c:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1d93e:	f240 1301 	movw	r3, #257	; 0x101
   1d942:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1d944:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1d946:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1d948:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1d94a:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   1d94c:	4b2e      	ldr	r3, [pc, #184]	; (1da08 <nrf_flash_sync_exe+0x10c>)
   1d94e:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1d950:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   1d952:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1d956:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   1d95a:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d95c:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1d960:	f3bf 8f5b 	dmb	ish
   1d964:	e855 3f00 	ldrex	r3, [r5]
   1d968:	e845 2100 	strex	r1, r2, [r5]
   1d96c:	2900      	cmp	r1, #0
   1d96e:	d1f9      	bne.n	1d964 <nrf_flash_sync_exe+0x68>
   1d970:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d974:	f04f 31ff 	mov.w	r1, #4294967295
   1d978:	f04f 30ff 	mov.w	r0, #4294967295
   1d97c:	f7ff f970 	bl	1cc60 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1d980:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1d984:	7e20      	ldrb	r0, [r4, #24]
   1d986:	f7ee fde5 	bl	c554 <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   1d98a:	f7ff f971 	bl	1cc70 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1d98e:	4a1f      	ldr	r2, [pc, #124]	; (1da0c <nrf_flash_sync_exe+0x110>)
   1d990:	2300      	movs	r3, #0
   1d992:	4620      	mov	r0, r4
   1d994:	f000 fe6e 	bl	1e674 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1d998:	2800      	cmp	r0, #0
   1d99a:	da14      	bge.n	1d9c6 <nrf_flash_sync_exe+0xca>
   1d99c:	4b17      	ldr	r3, [pc, #92]	; (1d9fc <nrf_flash_sync_exe+0x100>)
   1d99e:	4918      	ldr	r1, [pc, #96]	; (1da00 <nrf_flash_sync_exe+0x104>)
		LOG_ERR("timeout");
   1d9a0:	481b      	ldr	r0, [pc, #108]	; (1da10 <nrf_flash_sync_exe+0x114>)
   1d9a2:	1ac9      	subs	r1, r1, r3
   1d9a4:	08c9      	lsrs	r1, r1, #3
   1d9a6:	0189      	lsls	r1, r1, #6
   1d9a8:	f041 0101 	orr.w	r1, r1, #1
   1d9ac:	f002 fbae 	bl	2010c <log_0>
   1d9b0:	f3bf 8f5b 	dmb	ish
   1d9b4:	2301      	movs	r3, #1
   1d9b6:	e855 2f00 	ldrex	r2, [r5]
   1d9ba:	e845 3100 	strex	r1, r3, [r5]
   1d9be:	2900      	cmp	r1, #0
   1d9c0:	d1f9      	bne.n	1d9b6 <nrf_flash_sync_exe+0xba>
   1d9c2:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d9c6:	f04f 31ff 	mov.w	r1, #4294967295
   1d9ca:	f04f 30ff 	mov.w	r0, #4294967295
   1d9ce:	f7ff f947 	bl	1cc60 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   1d9d2:	7e20      	ldrb	r0, [r4, #24]
   1d9d4:	f7ee fdf7 	bl	c5c6 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1d9d8:	f7ff f94a 	bl	1cc70 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d9dc:	f3bf 8f5b 	dmb	ish
   1d9e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1d9e2:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1d9e6:	b113      	cbz	r3, 1d9ee <nrf_flash_sync_exe+0xf2>
	z_impl_k_sem_reset(sem);
   1d9e8:	4802      	ldr	r0, [pc, #8]	; (1d9f4 <nrf_flash_sync_exe+0xf8>)
   1d9ea:	f000 fe6d 	bl	1e6c8 <z_impl_k_sem_reset>
	return _context.status;
   1d9ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1d9f0:	e7a4      	b.n	1d93c <nrf_flash_sync_exe+0x40>
   1d9f2:	bf00      	nop
   1d9f4:	2000316c 	.word	0x2000316c
   1d9f8:	0001d871 	.word	0x0001d871
   1d9fc:	000256c4 	.word	0x000256c4
   1da00:	0002575c 	.word	0x0002575c
   1da04:	00028661 	.word	0x00028661
   1da08:	07a11fff 	.word	0x07a11fff
   1da0c:	000b7b44 	.word	0x000b7b44
   1da10:	000279c2 	.word	0x000279c2

0001da14 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1da14:	4b07      	ldr	r3, [pc, #28]	; (1da34 <nrf_flash_sync_check_time_limit+0x20>)
   1da16:	2201      	movs	r2, #1
   1da18:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1da1a:	3b40      	subs	r3, #64	; 0x40
   1da1c:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1da20:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1da24:	4418      	add	r0, r3
   1da26:	4b04      	ldr	r3, [pc, #16]	; (1da38 <nrf_flash_sync_check_time_limit+0x24>)
   1da28:	69db      	ldr	r3, [r3, #28]
}
   1da2a:	4298      	cmp	r0, r3
   1da2c:	bf34      	ite	cc
   1da2e:	2000      	movcc	r0, #0
   1da30:	2001      	movcs	r0, #1
   1da32:	4770      	bx	lr
   1da34:	40008040 	.word	0x40008040
   1da38:	2000316c 	.word	0x2000316c

0001da3c <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1da3c:	4b04      	ldr	r3, [pc, #16]	; (1da50 <nrf52_errata_108+0x14>)
   1da3e:	6818      	ldr	r0, [r3, #0]
   1da40:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1da42:	bf04      	itt	eq
   1da44:	4b03      	ldreq	r3, [pc, #12]	; (1da54 <nrf52_errata_108+0x18>)
   1da46:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   1da48:	1f83      	subs	r3, r0, #6
   1da4a:	4258      	negs	r0, r3
   1da4c:	4158      	adcs	r0, r3
   1da4e:	4770      	bx	lr
   1da50:	10000130 	.word	0x10000130
   1da54:	f0000fe0 	.word	0xf0000fe0

0001da58 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1da58:	4b07      	ldr	r3, [pc, #28]	; (1da78 <nrf52_errata_16+0x20>)
   1da5a:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1da5c:	2b06      	cmp	r3, #6
   1da5e:	d109      	bne.n	1da74 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1da60:	4b06      	ldr	r3, [pc, #24]	; (1da7c <nrf52_errata_16+0x24>)
   1da62:	681b      	ldr	r3, [r3, #0]
   1da64:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1da68:	3b03      	subs	r3, #3
   1da6a:	2b04      	cmp	r3, #4
   1da6c:	d802      	bhi.n	1da74 <nrf52_errata_16+0x1c>
   1da6e:	4a04      	ldr	r2, [pc, #16]	; (1da80 <nrf52_errata_16+0x28>)
   1da70:	5cd0      	ldrb	r0, [r2, r3]
   1da72:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1da74:	2000      	movs	r0, #0
    #endif
}
   1da76:	4770      	bx	lr
   1da78:	f0000fe0 	.word	0xf0000fe0
   1da7c:	f0000fe8 	.word	0xf0000fe8
   1da80:	000286a6 	.word	0x000286a6

0001da84 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1da84:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1da86:	f7ff ffd9 	bl	1da3c <nrf52_errata_108>
   1da8a:	b128      	cbz	r0, 1da98 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1da8c:	4b6b      	ldr	r3, [pc, #428]	; (1dc3c <SystemInit+0x1b8>)
   1da8e:	4a6c      	ldr	r2, [pc, #432]	; (1dc40 <SystemInit+0x1bc>)
   1da90:	681b      	ldr	r3, [r3, #0]
   1da92:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1da96:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1da98:	f7ff ffde 	bl	1da58 <nrf52_errata_16>
   1da9c:	b110      	cbz	r0, 1daa4 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1da9e:	4b69      	ldr	r3, [pc, #420]	; (1dc44 <SystemInit+0x1c0>)
   1daa0:	4a69      	ldr	r2, [pc, #420]	; (1dc48 <SystemInit+0x1c4>)
   1daa2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1daa4:	f7ff ffca 	bl	1da3c <nrf52_errata_108>
   1daa8:	b128      	cbz	r0, 1dab6 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1daaa:	4b68      	ldr	r3, [pc, #416]	; (1dc4c <SystemInit+0x1c8>)
   1daac:	4a68      	ldr	r2, [pc, #416]	; (1dc50 <SystemInit+0x1cc>)
   1daae:	681b      	ldr	r3, [r3, #0]
   1dab0:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1dab4:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1dab6:	f7ff ffcf 	bl	1da58 <nrf52_errata_16>
   1daba:	b120      	cbz	r0, 1dac6 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1dabc:	4a65      	ldr	r2, [pc, #404]	; (1dc54 <SystemInit+0x1d0>)
   1dabe:	68d3      	ldr	r3, [r2, #12]
   1dac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1dac4:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1dac6:	f7ff ffb9 	bl	1da3c <nrf52_errata_108>
   1daca:	b140      	cbz	r0, 1dade <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1dacc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dad0:	2200      	movs	r2, #0
   1dad2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1dad6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1dada:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1dade:	f7ff ffbb 	bl	1da58 <nrf52_errata_16>
   1dae2:	b110      	cbz	r0, 1daea <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1dae4:	4b5c      	ldr	r3, [pc, #368]	; (1dc58 <SystemInit+0x1d4>)
   1dae6:	2203      	movs	r2, #3
   1dae8:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1daea:	f7ff ffb5 	bl	1da58 <nrf52_errata_16>
   1daee:	b140      	cbz	r0, 1db02 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1daf0:	4b5a      	ldr	r3, [pc, #360]	; (1dc5c <SystemInit+0x1d8>)
   1daf2:	2205      	movs	r2, #5
   1daf4:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1daf6:	2201      	movs	r2, #1
   1daf8:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1dafa:	2200      	movs	r2, #0
   1dafc:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1dafe:	223f      	movs	r2, #63	; 0x3f
   1db00:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1db02:	4b57      	ldr	r3, [pc, #348]	; (1dc60 <SystemInit+0x1dc>)
   1db04:	681a      	ldr	r2, [r3, #0]
   1db06:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1db08:	bf0b      	itete	eq
   1db0a:	4b56      	ldreq	r3, [pc, #344]	; (1dc64 <SystemInit+0x1e0>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1db0c:	4b56      	ldrne	r3, [pc, #344]	; (1dc68 <SystemInit+0x1e4>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1db0e:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1db10:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1db12:	bf02      	ittt	eq
   1db14:	3308      	addeq	r3, #8
   1db16:	681b      	ldreq	r3, [r3, #0]
   1db18:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1db1c:	2a06      	cmp	r2, #6
   1db1e:	d14d      	bne.n	1dbbc <SystemInit+0x138>
            {
                switch(var2)
   1db20:	3b03      	subs	r3, #3
   1db22:	2b04      	cmp	r3, #4
   1db24:	d803      	bhi.n	1db2e <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1db26:	4a51      	ldr	r2, [pc, #324]	; (1dc6c <SystemInit+0x1e8>)
   1db28:	5cd3      	ldrb	r3, [r2, r3]
   1db2a:	2b00      	cmp	r3, #0
   1db2c:	d046      	beq.n	1dbbc <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1db2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1db32:	4b4f      	ldr	r3, [pc, #316]	; (1dc70 <SystemInit+0x1ec>)
   1db34:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1db38:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1db3c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1db40:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1db44:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1db48:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1db4c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1db50:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1db54:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1db58:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1db5c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1db60:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1db64:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1db68:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1db6c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1db70:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1db74:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1db78:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1db7c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1db80:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1db84:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1db88:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1db8c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1db90:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1db94:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1db98:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1db9c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1dba0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1dba4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1dba8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1dbac:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1dbb0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1dbb4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1dbb8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1dbbc:	f7ff ff3e 	bl	1da3c <nrf52_errata_108>
   1dbc0:	b128      	cbz	r0, 1dbce <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1dbc2:	4b2c      	ldr	r3, [pc, #176]	; (1dc74 <SystemInit+0x1f0>)
   1dbc4:	4a2c      	ldr	r2, [pc, #176]	; (1dc78 <SystemInit+0x1f4>)
   1dbc6:	681b      	ldr	r3, [r3, #0]
   1dbc8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1dbcc:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1dbce:	f7ff ff35 	bl	1da3c <nrf52_errata_108>
   1dbd2:	b148      	cbz	r0, 1dbe8 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1dbd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dbd8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1dbdc:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1dbde:	bf44      	itt	mi
   1dbe0:	f06f 0201 	mvnmi.w	r2, #1
   1dbe4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1dbe8:	4b1d      	ldr	r3, [pc, #116]	; (1dc60 <SystemInit+0x1dc>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1dbea:	681b      	ldr	r3, [r3, #0]
   1dbec:	2b06      	cmp	r3, #6
   1dbee:	d120      	bne.n	1dc32 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1dbf0:	4b1d      	ldr	r3, [pc, #116]	; (1dc68 <SystemInit+0x1e4>)
   1dbf2:	681b      	ldr	r3, [r3, #0]
   1dbf4:	3b03      	subs	r3, #3
   1dbf6:	2b04      	cmp	r3, #4
   1dbf8:	d802      	bhi.n	1dc00 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1dbfa:	4a20      	ldr	r2, [pc, #128]	; (1dc7c <SystemInit+0x1f8>)
   1dbfc:	5cd3      	ldrb	r3, [r2, r3]
   1dbfe:	b143      	cbz	r3, 1dc12 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1dc00:	4a1f      	ldr	r2, [pc, #124]	; (1dc80 <SystemInit+0x1fc>)
   1dc02:	6813      	ldr	r3, [r2, #0]
   1dc04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1dc08:	6013      	str	r3, [r2, #0]
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1dc0a:	4b15      	ldr	r3, [pc, #84]	; (1dc60 <SystemInit+0x1dc>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1dc0c:	681b      	ldr	r3, [r3, #0]
   1dc0e:	2b06      	cmp	r3, #6
   1dc10:	d10f      	bne.n	1dc32 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1dc12:	4b15      	ldr	r3, [pc, #84]	; (1dc68 <SystemInit+0x1e4>)
   1dc14:	681b      	ldr	r3, [r3, #0]
   1dc16:	3b03      	subs	r3, #3
   1dc18:	2b04      	cmp	r3, #4
   1dc1a:	d802      	bhi.n	1dc22 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1dc1c:	4a19      	ldr	r2, [pc, #100]	; (1dc84 <SystemInit+0x200>)
   1dc1e:	5cd3      	ldrb	r3, [r2, r3]
   1dc20:	b13b      	cbz	r3, 1dc32 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1dc22:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1dc26:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1dc2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dc2e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1dc32:	4b15      	ldr	r3, [pc, #84]	; (1dc88 <SystemInit+0x204>)
   1dc34:	4a15      	ldr	r2, [pc, #84]	; (1dc8c <SystemInit+0x208>)
   1dc36:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1dc38:	bd08      	pop	{r3, pc}
   1dc3a:	bf00      	nop
   1dc3c:	10000324 	.word	0x10000324
   1dc40:	40013540 	.word	0x40013540
   1dc44:	4007c074 	.word	0x4007c074
   1dc48:	baadf00d 	.word	0xbaadf00d
   1dc4c:	10000244 	.word	0x10000244
   1dc50:	4000053c 	.word	0x4000053c
   1dc54:	e000edf0 	.word	0xe000edf0
   1dc58:	400005a0 	.word	0x400005a0
   1dc5c:	40005610 	.word	0x40005610
   1dc60:	10000130 	.word	0x10000130
   1dc64:	f0000fe0 	.word	0xf0000fe0
   1dc68:	10000134 	.word	0x10000134
   1dc6c:	00028697 	.word	0x00028697
   1dc70:	4000c000 	.word	0x4000c000
   1dc74:	10000258 	.word	0x10000258
   1dc78:	40000ee4 	.word	0x40000ee4
   1dc7c:	0002869c 	.word	0x0002869c
   1dc80:	4000173c 	.word	0x4000173c
   1dc84:	000286a1 	.word	0x000286a1
   1dc88:	2000066c 	.word	0x2000066c
   1dc8c:	03d09000 	.word	0x03d09000

0001dc90 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1dc90:	2301      	movs	r3, #1
   1dc92:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1dc96:	f010 0fff 	tst.w	r0, #255	; 0xff
   1dc9a:	d012      	beq.n	1dcc2 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1dc9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dca0:	f3ef 8111 	mrs	r1, BASEPRI
   1dca4:	f383 8811 	msr	BASEPRI, r3
   1dca8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1dcac:	4a06      	ldr	r2, [pc, #24]	; (1dcc8 <nrfx_gpiote_channel_free+0x38>)
   1dcae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1dcb0:	ea23 0000 	bic.w	r0, r3, r0
   1dcb4:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   1dcb6:	f381 8811 	msr	BASEPRI, r1
   1dcba:	f3bf 8f6f 	isb	sy
   1dcbe:	4803      	ldr	r0, [pc, #12]	; (1dccc <nrfx_gpiote_channel_free+0x3c>)
   1dcc0:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1dcc2:	4803      	ldr	r0, [pc, #12]	; (1dcd0 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1dcc4:	4770      	bx	lr
   1dcc6:	bf00      	nop
   1dcc8:	200031b0 	.word	0x200031b0
   1dccc:	0bad0000 	.word	0x0bad0000
   1dcd0:	0bad0004 	.word	0x0bad0004

0001dcd4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1dcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dcd8:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1dcda:	f8df e060 	ldr.w	lr, [pc, #96]	; 1dd3c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1dcde:	4816      	ldr	r0, [pc, #88]	; (1dd38 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1dce0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1dd40 <nrfx_gpiote_channel_alloc+0x6c>
{
   1dce4:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1dce6:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1dce8:	2601      	movs	r6, #1
   1dcea:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1dcec:	f04f 0140 	mov.w	r1, #64	; 0x40
   1dcf0:	f3ef 8c11 	mrs	ip, BASEPRI
   1dcf4:	f381 8811 	msr	BASEPRI, r1
   1dcf8:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1dcfc:	fa22 f103 	lsr.w	r1, r2, r3
   1dd00:	07c9      	lsls	r1, r1, #31
   1dd02:	d50a      	bpl.n	1dd1a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1dd04:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   1dd08:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1dd0c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1dd0e:	bf01      	itttt	eq
   1dd10:	4339      	orreq	r1, r7
   1dd12:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   1dd16:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1dd18:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1dd1a:	f38c 8811 	msr	BASEPRI, ip
   1dd1e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1dd22:	4540      	cmp	r0, r8
   1dd24:	d005      	beq.n	1dd32 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1dd26:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1dd2a:	439a      	bics	r2, r3
   1dd2c:	f104 0401 	add.w	r4, r4, #1
   1dd30:	d1db      	bne.n	1dcea <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1dd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd36:	bf00      	nop
   1dd38:	0bad0002 	.word	0x0bad0002
   1dd3c:	200031b0 	.word	0x200031b0
   1dd40:	0bad0000 	.word	0x0bad0000

0001dd44 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1dd44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1dd48:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   1dd4a:	fbb0 f3f2 	udiv	r3, r0, r2
   1dd4e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1dd52:	b973      	cbnz	r3, 1dd72 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1dd54:	4b08      	ldr	r3, [pc, #32]	; (1dd78 <nrfx_nvmc_page_erase+0x34>)
   1dd56:	2202      	movs	r2, #2
   1dd58:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1dd5c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1dd60:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1dd64:	07d2      	lsls	r2, r2, #31
   1dd66:	d5fb      	bpl.n	1dd60 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1dd68:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1dd6a:	4804      	ldr	r0, [pc, #16]	; (1dd7c <nrfx_nvmc_page_erase+0x38>)
   1dd6c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1dd70:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1dd72:	4803      	ldr	r0, [pc, #12]	; (1dd80 <nrfx_nvmc_page_erase+0x3c>)
}
   1dd74:	4770      	bx	lr
   1dd76:	bf00      	nop
   1dd78:	4001e000 	.word	0x4001e000
   1dd7c:	0bad0000 	.word	0x0bad0000
   1dd80:	0bad000a 	.word	0x0bad000a

0001dd84 <nrfx_nvmc_word_write>:
   1dd84:	4b07      	ldr	r3, [pc, #28]	; (1dda4 <nrfx_nvmc_word_write+0x20>)
   1dd86:	2201      	movs	r2, #1
   1dd88:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1dd8c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1dd90:	07d2      	lsls	r2, r2, #31
   1dd92:	d5fb      	bpl.n	1dd8c <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   1dd94:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1dd96:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   1dd9a:	2200      	movs	r2, #0
   1dd9c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   1dda0:	4770      	bx	lr
   1dda2:	bf00      	nop
   1dda4:	4001e000 	.word	0x4001e000

0001dda8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1dda8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1ddaa:	4c11      	ldr	r4, [pc, #68]	; (1ddf0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1ddac:	4a11      	ldr	r2, [pc, #68]	; (1ddf4 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1ddae:	4912      	ldr	r1, [pc, #72]	; (1ddf8 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1ddb0:	2303      	movs	r3, #3
   1ddb2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1ddb4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ddb6:	4b11      	ldr	r3, [pc, #68]	; (1ddfc <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1ddb8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ddba:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1ddbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1ddc0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1ddc2:	2300      	movs	r3, #0
   1ddc4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1ddc6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1ddc8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1ddca:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1ddcc:	4a0c      	ldr	r2, [pc, #48]	; (1de00 <_DoInit+0x58>)
   1ddce:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1ddd0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1ddd2:	2210      	movs	r2, #16
   1ddd4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1ddd6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1ddd8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1ddda:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1dddc:	f004 f9ac 	bl	22138 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1dde0:	4908      	ldr	r1, [pc, #32]	; (1de04 <_DoInit+0x5c>)
   1dde2:	4620      	mov	r0, r4
   1dde4:	f004 f9a8 	bl	22138 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1dde8:	2320      	movs	r3, #32
   1ddea:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1ddec:	bd10      	pop	{r4, pc}
   1ddee:	bf00      	nop
   1ddf0:	20003200 	.word	0x20003200
   1ddf4:	000286ab 	.word	0x000286ab
   1ddf8:	000286b4 	.word	0x000286b4
   1ddfc:	20004a75 	.word	0x20004a75
   1de00:	20004a65 	.word	0x20004a65
   1de04:	000286b8 	.word	0x000286b8

0001de08 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1de08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1de0c:	4f23      	ldr	r7, [pc, #140]	; (1de9c <SEGGER_RTT_WriteSkipNoLock+0x94>)
   1de0e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1de12:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1de14:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1de18:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1de1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1de1c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1de1e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1de20:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1de22:	d834      	bhi.n	1de8e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1de24:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1de28:	ebaa 0905 	sub.w	r9, sl, r5
   1de2c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1de30:	4294      	cmp	r4, r2
   1de32:	d811      	bhi.n	1de58 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1de34:	f04f 0918 	mov.w	r9, #24
   1de38:	fb06 9309 	mla	r3, r6, r9, r9
   1de3c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1de3e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1de40:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1de42:	4641      	mov	r1, r8
   1de44:	4428      	add	r0, r5
   1de46:	f004 f9cf 	bl	221e8 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1de4a:	fb09 7606 	mla	r6, r9, r6, r7
   1de4e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1de50:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   1de52:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1de54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1de58:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1de5a:	429c      	cmp	r4, r3
   1de5c:	d81b      	bhi.n	1de96 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1de5e:	fb00 bb0b 	mla	fp, r0, fp, fp
   1de62:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1de64:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1de66:	f8db 0004 	ldr.w	r0, [fp, #4]
   1de6a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1de6c:	4428      	add	r0, r5
   1de6e:	f004 f9bb 	bl	221e8 <memcpy>
      if (NumBytes) {
   1de72:	ebb4 040a 	subs.w	r4, r4, sl
   1de76:	d006      	beq.n	1de86 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1de78:	f8db 0004 	ldr.w	r0, [fp, #4]
   1de7c:	4622      	mov	r2, r4
   1de7e:	eb08 0109 	add.w	r1, r8, r9
   1de82:	f004 f9b1 	bl	221e8 <memcpy>
      pRing->WrOff = NumBytes;
   1de86:	2018      	movs	r0, #24
   1de88:	fb00 7606 	mla	r6, r0, r6, r7
   1de8c:	e7e0      	b.n	1de50 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1de8e:	3b01      	subs	r3, #1
   1de90:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1de92:	42a3      	cmp	r3, r4
   1de94:	d2ce      	bcs.n	1de34 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1de96:	2000      	movs	r0, #0
   1de98:	e7dc      	b.n	1de54 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1de9a:	bf00      	nop
   1de9c:	20003200 	.word	0x20003200

0001dea0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1dea2:	4c18      	ldr	r4, [pc, #96]	; (1df04 <SEGGER_RTT_WriteNoLock+0x64>)
   1dea4:	2318      	movs	r3, #24
   1dea6:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1deaa:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1deae:	4425      	add	r5, r4
  switch (pRing->Flags) {
   1deb0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   1deb2:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1deb4:	460f      	mov	r7, r1
   1deb6:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   1deb8:	d00f      	beq.n	1deda <SEGGER_RTT_WriteNoLock+0x3a>
   1deba:	2c02      	cmp	r4, #2
   1debc:	d01a      	beq.n	1def4 <SEGGER_RTT_WriteNoLock+0x54>
   1debe:	b9f4      	cbnz	r4, 1defe <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1dec0:	4628      	mov	r0, r5
   1dec2:	f006 fcbc 	bl	2483e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1dec6:	4286      	cmp	r6, r0
   1dec8:	d805      	bhi.n	1ded6 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   1deca:	4632      	mov	r2, r6
   1decc:	4639      	mov	r1, r7
   1dece:	4628      	mov	r0, r5
   1ded0:	f006 fcc3 	bl	2485a <_WriteNoCheck>
   1ded4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   1ded6:	4620      	mov	r0, r4
   1ded8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1deda:	4628      	mov	r0, r5
   1dedc:	f006 fcaf 	bl	2483e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1dee0:	4286      	cmp	r6, r0
   1dee2:	4634      	mov	r4, r6
   1dee4:	bf28      	it	cs
   1dee6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1dee8:	4622      	mov	r2, r4
   1deea:	4639      	mov	r1, r7
   1deec:	4628      	mov	r0, r5
   1deee:	f006 fcb4 	bl	2485a <_WriteNoCheck>
    break;
   1def2:	e7f0      	b.n	1ded6 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1def4:	4628      	mov	r0, r5
}
   1def6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1defa:	f006 bcca 	b.w	24892 <_WriteBlocking>
  switch (pRing->Flags) {
   1defe:	2400      	movs	r4, #0
  return Status;
   1df00:	e7e9      	b.n	1ded6 <SEGGER_RTT_WriteNoLock+0x36>
   1df02:	bf00      	nop
   1df04:	20003200 	.word	0x20003200

0001df08 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1df08:	4b03      	ldr	r3, [pc, #12]	; (1df18 <SEGGER_RTT_HasDataUp+0x10>)
   1df0a:	2218      	movs	r2, #24
   1df0c:	fb02 3300 	mla	r3, r2, r0, r3
   1df10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1df12:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1df14:	1a80      	subs	r0, r0, r2
   1df16:	4770      	bx	lr
   1df18:	20003200 	.word	0x20003200

0001df1c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1df1c:	4b0e      	ldr	r3, [pc, #56]	; (1df58 <z_sys_init_run_level+0x3c>)
{
   1df1e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1df20:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1df24:	3001      	adds	r0, #1
   1df26:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1df2a:	42a6      	cmp	r6, r4
   1df2c:	d800      	bhi.n	1df30 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1df2e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1df30:	e9d4 3500 	ldrd	r3, r5, [r4]
   1df34:	4628      	mov	r0, r5
   1df36:	4798      	blx	r3
		if (dev != NULL) {
   1df38:	b165      	cbz	r5, 1df54 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1df3a:	68eb      	ldr	r3, [r5, #12]
   1df3c:	b130      	cbz	r0, 1df4c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1df3e:	2800      	cmp	r0, #0
   1df40:	bfb8      	it	lt
   1df42:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1df44:	28ff      	cmp	r0, #255	; 0xff
   1df46:	bfa8      	it	ge
   1df48:	20ff      	movge	r0, #255	; 0xff
   1df4a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1df4c:	785a      	ldrb	r2, [r3, #1]
   1df4e:	f042 0201 	orr.w	r2, r2, #1
   1df52:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1df54:	3408      	adds	r4, #8
   1df56:	e7e8      	b.n	1df2a <z_sys_init_run_level+0xe>
   1df58:	000260c0 	.word	0x000260c0

0001df5c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1df5c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1df5e:	4605      	mov	r5, r0
   1df60:	b910      	cbnz	r0, 1df68 <z_impl_device_get_binding+0xc>
		return NULL;
   1df62:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1df64:	4620      	mov	r0, r4
   1df66:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1df68:	7803      	ldrb	r3, [r0, #0]
   1df6a:	2b00      	cmp	r3, #0
   1df6c:	d0f9      	beq.n	1df62 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1df6e:	4a0f      	ldr	r2, [pc, #60]	; (1dfac <z_impl_device_get_binding+0x50>)
   1df70:	4c0f      	ldr	r4, [pc, #60]	; (1dfb0 <z_impl_device_get_binding+0x54>)
   1df72:	4616      	mov	r6, r2
   1df74:	4294      	cmp	r4, r2
   1df76:	d108      	bne.n	1df8a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1df78:	4c0d      	ldr	r4, [pc, #52]	; (1dfb0 <z_impl_device_get_binding+0x54>)
   1df7a:	42b4      	cmp	r4, r6
   1df7c:	d0f1      	beq.n	1df62 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1df7e:	4620      	mov	r0, r4
   1df80:	f006 fcb8 	bl	248f4 <z_device_ready>
   1df84:	b950      	cbnz	r0, 1df9c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1df86:	3418      	adds	r4, #24
   1df88:	e7f7      	b.n	1df7a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1df8a:	4620      	mov	r0, r4
   1df8c:	f006 fcb2 	bl	248f4 <z_device_ready>
   1df90:	b110      	cbz	r0, 1df98 <z_impl_device_get_binding+0x3c>
   1df92:	6823      	ldr	r3, [r4, #0]
   1df94:	42ab      	cmp	r3, r5
   1df96:	d0e5      	beq.n	1df64 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1df98:	3418      	adds	r4, #24
   1df9a:	e7eb      	b.n	1df74 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1df9c:	6821      	ldr	r1, [r4, #0]
   1df9e:	4628      	mov	r0, r5
   1dfa0:	f004 f8f7 	bl	22192 <strcmp>
   1dfa4:	2800      	cmp	r0, #0
   1dfa6:	d1ee      	bne.n	1df86 <z_impl_device_get_binding+0x2a>
   1dfa8:	e7dc      	b.n	1df64 <z_impl_device_get_binding+0x8>
   1dfaa:	bf00      	nop
   1dfac:	200007c8 	.word	0x200007c8
   1dfb0:	20000738 	.word	0x20000738

0001dfb4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1dfb4:	4b01      	ldr	r3, [pc, #4]	; (1dfbc <z_impl_z_errno+0x8>)
   1dfb6:	6898      	ldr	r0, [r3, #8]
}
   1dfb8:	3064      	adds	r0, #100	; 0x64
   1dfba:	4770      	bx	lr
   1dfbc:	200032a8 	.word	0x200032a8

0001dfc0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1dfc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1dfc4:	4606      	mov	r6, r0
   1dfc6:	460f      	mov	r7, r1
	__asm__ volatile(
   1dfc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dfcc:	f3ef 8811 	mrs	r8, BASEPRI
   1dfd0:	f383 8811 	msr	BASEPRI, r3
   1dfd4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1dfd8:	f001 f86c 	bl	1f0b4 <z_impl_k_current_get>
   1dfdc:	4c1f      	ldr	r4, [pc, #124]	; (1e05c <z_fatal_error+0x9c>)
   1dfde:	4b20      	ldr	r3, [pc, #128]	; (1e060 <z_fatal_error+0xa0>)
   1dfe0:	1ae4      	subs	r4, r4, r3
   1dfe2:	2e04      	cmp	r6, #4
   1dfe4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1dfe8:	bf96      	itet	ls
   1dfea:	4a1e      	ldrls	r2, [pc, #120]	; (1e064 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1dfec:	4a1e      	ldrhi	r2, [pc, #120]	; (1e068 <z_fatal_error+0xa8>)
   1dfee:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1dff2:	01a4      	lsls	r4, r4, #6
   1dff4:	f044 0301 	orr.w	r3, r4, #1
   1dff8:	4605      	mov	r5, r0
   1dffa:	f8ad 3000 	strh.w	r3, [sp]
   1dffe:	481b      	ldr	r0, [pc, #108]	; (1e06c <z_fatal_error+0xac>)
   1e000:	2300      	movs	r3, #0
   1e002:	4631      	mov	r1, r6
   1e004:	f002 f8bc 	bl	20180 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1e008:	b147      	cbz	r7, 1e01c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1e00a:	69fb      	ldr	r3, [r7, #28]
   1e00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1e010:	b123      	cbz	r3, 1e01c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1e012:	4817      	ldr	r0, [pc, #92]	; (1e070 <z_fatal_error+0xb0>)
   1e014:	f044 0101 	orr.w	r1, r4, #1
   1e018:	f002 f878 	bl	2010c <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1e01c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1e020:	b12d      	cbz	r5, 1e02e <z_fatal_error+0x6e>
   1e022:	4628      	mov	r0, r5
   1e024:	f006 fd28 	bl	24a78 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1e028:	b108      	cbz	r0, 1e02e <z_fatal_error+0x6e>
   1e02a:	7803      	ldrb	r3, [r0, #0]
   1e02c:	b903      	cbnz	r3, 1e030 <z_fatal_error+0x70>
		thread_name = "unknown";
   1e02e:	4811      	ldr	r0, [pc, #68]	; (1e074 <z_fatal_error+0xb4>)
   1e030:	f7f3 faa0 	bl	11574 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1e034:	4623      	mov	r3, r4
   1e036:	4602      	mov	r2, r0
   1e038:	4629      	mov	r1, r5
   1e03a:	480f      	ldr	r0, [pc, #60]	; (1e078 <z_fatal_error+0xb8>)
   1e03c:	f002 f887 	bl	2014e <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1e040:	4639      	mov	r1, r7
   1e042:	4630      	mov	r0, r6
   1e044:	f7fe fe1a 	bl	1cc7c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1e048:	f388 8811 	msr	BASEPRI, r8
   1e04c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1e050:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1e052:	b002      	add	sp, #8
   1e054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e058:	f7f5 bea4 	b.w	13da4 <z_impl_k_thread_abort>
   1e05c:	0002579c 	.word	0x0002579c
   1e060:	000256c4 	.word	0x000256c4
   1e064:	000260d8 	.word	0x000260d8
   1e068:	000286bf 	.word	0x000286bf
   1e06c:	000286cd 	.word	0x000286cd
   1e070:	000286f5 	.word	0x000286f5
   1e074:	00026e87 	.word	0x00026e87
   1e078:	00028716 	.word	0x00028716

0001e07c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1e07c:	4802      	ldr	r0, [pc, #8]	; (1e088 <z_bss_zero+0xc>)
   1e07e:	4a03      	ldr	r2, [pc, #12]	; (1e08c <z_bss_zero+0x10>)
   1e080:	2100      	movs	r1, #0
   1e082:	1a12      	subs	r2, r2, r0
   1e084:	f004 b8db 	b.w	2223e <memset>
   1e088:	200009d8 	.word	0x200009d8
   1e08c:	20004e78 	.word	0x20004e78

0001e090 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1e090:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1e092:	4b0a      	ldr	r3, [pc, #40]	; (1e0bc <bg_thread_main+0x2c>)
   1e094:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e096:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1e098:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e09a:	f7ff ff3f 	bl	1df1c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1e09e:	f001 fb27 	bl	1f6f0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1e0a2:	2003      	movs	r0, #3
   1e0a4:	f7ff ff3a 	bl	1df1c <z_sys_init_run_level>

	z_init_static_threads();
   1e0a8:	f000 f958 	bl	1e35c <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   1e0ac:	f7f2 fc20 	bl	108f0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1e0b0:	4a03      	ldr	r2, [pc, #12]	; (1e0c0 <bg_thread_main+0x30>)
   1e0b2:	7b13      	ldrb	r3, [r2, #12]
   1e0b4:	f023 0301 	bic.w	r3, r3, #1
   1e0b8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1e0ba:	bd08      	pop	{r3, pc}
   1e0bc:	20004e75 	.word	0x20004e75
   1e0c0:	20002c00 	.word	0x20002c00

0001e0c4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1e0c4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1e0c8:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1e0ca:	f7f3 f98b 	bl	113e4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1e0ce:	f8df 9100 	ldr.w	r9, [pc, #256]	; 1e1d0 <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1e0d2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1e0d6:	4d36      	ldr	r5, [pc, #216]	; (1e1b0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1e0d8:	4e36      	ldr	r6, [pc, #216]	; (1e1b4 <z_cstart+0xf0>)
   1e0da:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e0dc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1e1d4 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
   1e0e0:	4f35      	ldr	r7, [pc, #212]	; (1e1b8 <z_cstart+0xf4>)
   1e0e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1e0e6:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e0e8:	23e0      	movs	r3, #224	; 0xe0
   1e0ea:	2400      	movs	r4, #0
   1e0ec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1e0f0:	2320      	movs	r3, #32
   1e0f2:	77eb      	strb	r3, [r5, #31]
   1e0f4:	762c      	strb	r4, [r5, #24]
   1e0f6:	766c      	strb	r4, [r5, #25]
   1e0f8:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1e0fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e0fc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1e100:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1e102:	f7f5 fdeb 	bl	13cdc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1e106:	f7f5 fb05 	bl	13714 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1e10a:	f04f 33ff 	mov.w	r3, #4294967295
   1e10e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1e110:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1e112:	f7f5 ff03 	bl	13f1c <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1e116:	4d29      	ldr	r5, [pc, #164]	; (1e1bc <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1e118:	f7f5 fe56 	bl	13dc8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1e11c:	f240 1301 	movw	r3, #257	; 0x101
   1e120:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1e124:	ab06      	add	r3, sp, #24
   1e126:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   1e128:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1e12c:	f006 fbe1 	bl	248f2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1e130:	4620      	mov	r0, r4
   1e132:	f7ff fef3 	bl	1df1c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e136:	2001      	movs	r0, #1
   1e138:	f7ff fef0 	bl	1df1c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e13c:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1e140:	f000 ff38 	bl	1efb4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e144:	4b1e      	ldr	r3, [pc, #120]	; (1e1c0 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
   1e146:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e148:	491e      	ldr	r1, [pc, #120]	; (1e1c4 <z_cstart+0x100>)
   1e14a:	9305      	str	r3, [sp, #20]
   1e14c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e150:	4653      	mov	r3, sl
   1e152:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1e156:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e15a:	9400      	str	r4, [sp, #0]
   1e15c:	4630      	mov	r0, r6
   1e15e:	f000 f89f 	bl	1e2a0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e162:	7b73      	ldrb	r3, [r6, #13]
   1e164:	4680      	mov	r8, r0
   1e166:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1e16a:	4630      	mov	r0, r6
   1e16c:	7373      	strb	r3, [r6, #13]
   1e16e:	f006 fedb 	bl	24f28 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1e172:	230f      	movs	r3, #15
   1e174:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1e178:	4913      	ldr	r1, [pc, #76]	; (1e1c8 <z_cstart+0x104>)
   1e17a:	4b14      	ldr	r3, [pc, #80]	; (1e1cc <z_cstart+0x108>)
   1e17c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1e180:	e9cd b404 	strd	fp, r4, [sp, #16]
   1e184:	e9cd 5400 	strd	r5, r4, [sp]
   1e188:	4638      	mov	r0, r7
   1e18a:	f000 f889 	bl	1e2a0 <z_setup_new_thread>
   1e18e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1e190:	60ef      	str	r7, [r5, #12]
   1e192:	f023 0304 	bic.w	r3, r3, #4
   1e196:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1e198:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1e19c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1e1a0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1e1a2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1e1a6:	4652      	mov	r2, sl
   1e1a8:	4641      	mov	r1, r8
   1e1aa:	4630      	mov	r0, r6
   1e1ac:	f7f5 fa9c 	bl	136e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1e1b0:	e000ed00 	.word	0xe000ed00
   1e1b4:	20002c00 	.word	0x20002c00
   1e1b8:	20002b80 	.word	0x20002b80
   1e1bc:	200032a8 	.word	0x200032a8
   1e1c0:	00028778 	.word	0x00028778
   1e1c4:	20006d60 	.word	0x20006d60
   1e1c8:	20007180 	.word	0x20007180
   1e1cc:	0001e419 	.word	0x0001e419
   1e1d0:	20007b00 	.word	0x20007b00
   1e1d4:	0001e091 	.word	0x0001e091

0001e1d8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1e1d8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1e1da:	4c06      	ldr	r4, [pc, #24]	; (1e1f4 <statics_init+0x1c>)
   1e1dc:	4d06      	ldr	r5, [pc, #24]	; (1e1f8 <statics_init+0x20>)
   1e1de:	42ac      	cmp	r4, r5
   1e1e0:	d301      	bcc.n	1e1e6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1e1e2:	2000      	movs	r0, #0
   1e1e4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1e1e6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1e1ea:	4620      	mov	r0, r4
   1e1ec:	f006 fb8b 	bl	24906 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1e1f0:	3414      	adds	r4, #20
   1e1f2:	e7f4      	b.n	1e1de <statics_init+0x6>
   1e1f4:	2000081c 	.word	0x2000081c
   1e1f8:	2000081c 	.word	0x2000081c

0001e1fc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1e1fc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e1fe:	4b0e      	ldr	r3, [pc, #56]	; (1e238 <init_mem_slab_module+0x3c>)
   1e200:	4c0e      	ldr	r4, [pc, #56]	; (1e23c <init_mem_slab_module+0x40>)
   1e202:	42a3      	cmp	r3, r4
   1e204:	d301      	bcc.n	1e20a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1e206:	2000      	movs	r0, #0
	return rc;
}
   1e208:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1e20a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1e20e:	ea41 0200 	orr.w	r2, r1, r0
   1e212:	f012 0203 	ands.w	r2, r2, #3
   1e216:	d10b      	bne.n	1e230 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1e218:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1e21a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e21c:	42aa      	cmp	r2, r5
   1e21e:	d101      	bne.n	1e224 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e220:	331c      	adds	r3, #28
   1e222:	e7ee      	b.n	1e202 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1e224:	695e      	ldr	r6, [r3, #20]
   1e226:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e228:	3201      	adds	r2, #1
		slab->free_list = p;
   1e22a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1e22c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1e22e:	e7f5      	b.n	1e21c <init_mem_slab_module+0x20>
		return -EINVAL;
   1e230:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1e234:	e7e8      	b.n	1e208 <init_mem_slab_module+0xc>
   1e236:	bf00      	nop
   1e238:	200007c8 	.word	0x200007c8
   1e23c:	2000081c 	.word	0x2000081c

0001e240 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1e240:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1e242:	460c      	mov	r4, r1
   1e244:	4616      	mov	r6, r2
   1e246:	461f      	mov	r7, r3
	__asm__ volatile(
   1e248:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e24c:	f3ef 8111 	mrs	r1, BASEPRI
   1e250:	f383 8811 	msr	BASEPRI, r3
   1e254:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1e258:	6943      	ldr	r3, [r0, #20]
   1e25a:	b15b      	cbz	r3, 1e274 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1e25c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1e25e:	681b      	ldr	r3, [r3, #0]
   1e260:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1e262:	6983      	ldr	r3, [r0, #24]
   1e264:	3301      	adds	r3, #1
   1e266:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1e268:	2000      	movs	r0, #0
	__asm__ volatile(
   1e26a:	f381 8811 	msr	BASEPRI, r1
   1e26e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1e272:	e011      	b.n	1e298 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1e274:	ea56 0207 	orrs.w	r2, r6, r7
   1e278:	d103      	bne.n	1e282 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1e27a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1e27c:	f06f 000b 	mvn.w	r0, #11
   1e280:	e7f3      	b.n	1e26a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1e282:	4602      	mov	r2, r0
   1e284:	e9cd 6700 	strd	r6, r7, [sp]
   1e288:	3008      	adds	r0, #8
   1e28a:	f000 fcd5 	bl	1ec38 <z_pend_curr>
		if (result == 0) {
   1e28e:	b918      	cbnz	r0, 1e298 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1e290:	4b02      	ldr	r3, [pc, #8]	; (1e29c <k_mem_slab_alloc+0x5c>)
   1e292:	689b      	ldr	r3, [r3, #8]
   1e294:	695b      	ldr	r3, [r3, #20]
   1e296:	6023      	str	r3, [r4, #0]
}
   1e298:	b002      	add	sp, #8
   1e29a:	bdd0      	pop	{r4, r6, r7, pc}
   1e29c:	200032a8 	.word	0x200032a8

0001e2a0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1e2a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1e2a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1e2a6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1e2a8:	2604      	movs	r6, #4
   1e2aa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1e2ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1e2ae:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1e2b0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1e2b4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e2b6:	1dd6      	adds	r6, r2, #7
   1e2b8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e2bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1e2be:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e2c0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1e2c4:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1e2c6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1e2ca:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1e2ce:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1e2d0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1e2d2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e2d4:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e2d8:	9202      	str	r2, [sp, #8]
   1e2da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e2dc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1e2de:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e2e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e2e2:	9200      	str	r2, [sp, #0]
   1e2e4:	4642      	mov	r2, r8
{
   1e2e6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e2e8:	f7f5 f9c8 	bl	1367c <arch_new_thread>
	if (!_current) {
   1e2ec:	4b04      	ldr	r3, [pc, #16]	; (1e300 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1e2ee:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1e2f0:	689b      	ldr	r3, [r3, #8]
   1e2f2:	b103      	cbz	r3, 1e2f6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1e2f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1e2f6:	6763      	str	r3, [r4, #116]	; 0x74
}
   1e2f8:	4640      	mov	r0, r8
   1e2fa:	b004      	add	sp, #16
   1e2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e300:	200032a8 	.word	0x200032a8

0001e304 <z_impl_k_thread_create>:
{
   1e304:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e306:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e308:	2500      	movs	r5, #0
   1e30a:	9505      	str	r5, [sp, #20]
   1e30c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1e30e:	9504      	str	r5, [sp, #16]
   1e310:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1e312:	9503      	str	r5, [sp, #12]
   1e314:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e316:	9502      	str	r5, [sp, #8]
{
   1e318:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e31c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1e31e:	9501      	str	r5, [sp, #4]
   1e320:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1e322:	9500      	str	r5, [sp, #0]
{
   1e324:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e326:	f7ff ffbb 	bl	1e2a0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1e32a:	1c7b      	adds	r3, r7, #1
   1e32c:	bf08      	it	eq
   1e32e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1e332:	d005      	beq.n	1e340 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e334:	ea56 0307 	orrs.w	r3, r6, r7
   1e338:	d105      	bne.n	1e346 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1e33a:	4620      	mov	r0, r4
   1e33c:	f000 fdd0 	bl	1eee0 <z_sched_start>
}
   1e340:	4620      	mov	r0, r4
   1e342:	b007      	add	sp, #28
   1e344:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1e346:	4904      	ldr	r1, [pc, #16]	; (1e358 <z_impl_k_thread_create+0x54>)
   1e348:	4632      	mov	r2, r6
   1e34a:	463b      	mov	r3, r7
   1e34c:	f104 0018 	add.w	r0, r4, #24
   1e350:	f000 ff94 	bl	1f27c <z_add_timeout>
   1e354:	e7f4      	b.n	1e340 <z_impl_k_thread_create+0x3c>
   1e356:	bf00      	nop
   1e358:	00024f49 	.word	0x00024f49

0001e35c <z_init_static_threads>:
{
   1e35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1e360:	4e2a      	ldr	r6, [pc, #168]	; (1e40c <z_init_static_threads+0xb0>)
   1e362:	4d2b      	ldr	r5, [pc, #172]	; (1e410 <z_init_static_threads+0xb4>)
{
   1e364:	b086      	sub	sp, #24
   1e366:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1e368:	42b5      	cmp	r5, r6
   1e36a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1e36e:	d310      	bcc.n	1e392 <z_init_static_threads+0x36>
	k_sched_lock();
   1e370:	f000 fbf0 	bl	1eb54 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e374:	4c26      	ldr	r4, [pc, #152]	; (1e410 <z_init_static_threads+0xb4>)
   1e376:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1e414 <z_init_static_threads+0xb8>
		} else {
			return (t * to_hz + off) / from_hz;
   1e37a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1e37e:	f240 36e7 	movw	r6, #999	; 0x3e7
   1e382:	2700      	movs	r7, #0
   1e384:	4544      	cmp	r4, r8
   1e386:	d321      	bcc.n	1e3cc <z_init_static_threads+0x70>
}
   1e388:	b006      	add	sp, #24
   1e38a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1e38e:	f000 bcd3 	b.w	1ed38 <k_sched_unlock>
		z_setup_new_thread(
   1e392:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1e396:	9305      	str	r3, [sp, #20]
   1e398:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1e39c:	9304      	str	r3, [sp, #16]
   1e39e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1e3a2:	9303      	str	r3, [sp, #12]
   1e3a4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1e3a8:	9302      	str	r3, [sp, #8]
   1e3aa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1e3ae:	9301      	str	r3, [sp, #4]
   1e3b0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1e3b4:	9300      	str	r3, [sp, #0]
   1e3b6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1e3ba:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1e3be:	f7ff ff6f 	bl	1e2a0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1e3c2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1e3c6:	655d      	str	r5, [r3, #84]	; 0x54
   1e3c8:	4625      	mov	r5, r4
   1e3ca:	e7cd      	b.n	1e368 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1e3cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e3ce:	1c5a      	adds	r2, r3, #1
   1e3d0:	d00d      	beq.n	1e3ee <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1e3d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e3d6:	4630      	mov	r0, r6
   1e3d8:	4639      	mov	r1, r7
   1e3da:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e3de:	42b9      	cmp	r1, r7
   1e3e0:	bf08      	it	eq
   1e3e2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1e3e4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e3e6:	d104      	bne.n	1e3f2 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1e3e8:	4628      	mov	r0, r5
   1e3ea:	f000 fd79 	bl	1eee0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e3ee:	3430      	adds	r4, #48	; 0x30
   1e3f0:	e7c8      	b.n	1e384 <z_init_static_threads+0x28>
   1e3f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e3f6:	2300      	movs	r3, #0
   1e3f8:	f7e2 fa60 	bl	8bc <__aeabi_uldivmod>
   1e3fc:	4602      	mov	r2, r0
   1e3fe:	460b      	mov	r3, r1
   1e400:	f105 0018 	add.w	r0, r5, #24
   1e404:	4651      	mov	r1, sl
   1e406:	f000 ff39 	bl	1f27c <z_add_timeout>
   1e40a:	e7f0      	b.n	1e3ee <z_init_static_threads+0x92>
   1e40c:	200007c8 	.word	0x200007c8
   1e410:	200007c8 	.word	0x200007c8
   1e414:	00024f49 	.word	0x00024f49

0001e418 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1e418:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1e41a:	4c09      	ldr	r4, [pc, #36]	; (1e440 <idle+0x28>)
	__asm__ volatile(
   1e41c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e420:	f3ef 8311 	mrs	r3, BASEPRI
   1e424:	f382 8811 	msr	BASEPRI, r2
   1e428:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1e42c:	f006 fe1e 	bl	2506c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1e430:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1e432:	f7f4 fbe1 	bl	12bf8 <pm_system_suspend>
   1e436:	2800      	cmp	r0, #0
   1e438:	d1f0      	bne.n	1e41c <idle+0x4>
	arch_cpu_idle();
   1e43a:	f7f5 f971 	bl	13720 <arch_cpu_idle>
}
   1e43e:	e7ed      	b.n	1e41c <idle+0x4>
   1e440:	200032a8 	.word	0x200032a8

0001e444 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1e444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e448:	4604      	mov	r4, r0
   1e44a:	4616      	mov	r6, r2
   1e44c:	461f      	mov	r7, r3
   1e44e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e452:	f3ef 8811 	mrs	r8, BASEPRI
   1e456:	f383 8811 	msr	BASEPRI, r3
   1e45a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1e45e:	68c3      	ldr	r3, [r0, #12]
   1e460:	4a32      	ldr	r2, [pc, #200]	; (1e52c <z_impl_k_mutex_lock+0xe8>)
   1e462:	b16b      	cbz	r3, 1e480 <z_impl_k_mutex_lock+0x3c>
   1e464:	6880      	ldr	r0, [r0, #8]
   1e466:	6891      	ldr	r1, [r2, #8]
   1e468:	4288      	cmp	r0, r1
   1e46a:	d019      	beq.n	1e4a0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1e46c:	ea56 0307 	orrs.w	r3, r6, r7
   1e470:	d118      	bne.n	1e4a4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1e472:	f388 8811 	msr	BASEPRI, r8
   1e476:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1e47a:	f06f 000f 	mvn.w	r0, #15
   1e47e:	e00c      	b.n	1e49a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1e480:	6891      	ldr	r1, [r2, #8]
   1e482:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1e486:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1e488:	3301      	adds	r3, #1
   1e48a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1e48c:	6893      	ldr	r3, [r2, #8]
   1e48e:	60a3      	str	r3, [r4, #8]
   1e490:	f388 8811 	msr	BASEPRI, r8
   1e494:	f3bf 8f6f 	isb	sy
		return 0;
   1e498:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1e49a:	b002      	add	sp, #8
   1e49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1e4a0:	6921      	ldr	r1, [r4, #16]
   1e4a2:	e7f0      	b.n	1e486 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1e4a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e4a8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1e4ac:	4299      	cmp	r1, r3
   1e4ae:	bfa8      	it	ge
   1e4b0:	4619      	movge	r1, r3
   1e4b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1e4b6:	428b      	cmp	r3, r1
   1e4b8:	dd2c      	ble.n	1e514 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1e4ba:	f000 fd2f 	bl	1ef1c <z_set_prio>
   1e4be:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1e4c0:	e9cd 6700 	strd	r6, r7, [sp]
   1e4c4:	481a      	ldr	r0, [pc, #104]	; (1e530 <z_impl_k_mutex_lock+0xec>)
   1e4c6:	4622      	mov	r2, r4
   1e4c8:	4641      	mov	r1, r8
   1e4ca:	f000 fbb5 	bl	1ec38 <z_pend_curr>
	if (got_mutex == 0) {
   1e4ce:	2800      	cmp	r0, #0
   1e4d0:	d0e3      	beq.n	1e49a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1e4d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e4d6:	f3ef 8611 	mrs	r6, BASEPRI
   1e4da:	f383 8811 	msr	BASEPRI, r3
   1e4de:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1e4e2:	6823      	ldr	r3, [r4, #0]
   1e4e4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e4e6:	429c      	cmp	r4, r3
   1e4e8:	d007      	beq.n	1e4fa <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1e4ea:	b133      	cbz	r3, 1e4fa <z_impl_k_mutex_lock+0xb6>
   1e4ec:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e4f0:	4299      	cmp	r1, r3
   1e4f2:	bfa8      	it	ge
   1e4f4:	4619      	movge	r1, r3
   1e4f6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e4fa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e4fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e500:	4299      	cmp	r1, r3
   1e502:	d109      	bne.n	1e518 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1e504:	b16d      	cbz	r5, 1e522 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1e506:	480a      	ldr	r0, [pc, #40]	; (1e530 <z_impl_k_mutex_lock+0xec>)
   1e508:	4631      	mov	r1, r6
   1e50a:	f000 fb11 	bl	1eb30 <z_reschedule>
	return -EAGAIN;
   1e50e:	f06f 000a 	mvn.w	r0, #10
   1e512:	e7c2      	b.n	1e49a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1e514:	2500      	movs	r5, #0
   1e516:	e7d3      	b.n	1e4c0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1e518:	f000 fd00 	bl	1ef1c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e51c:	2800      	cmp	r0, #0
   1e51e:	d1f2      	bne.n	1e506 <z_impl_k_mutex_lock+0xc2>
   1e520:	e7f0      	b.n	1e504 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1e522:	f386 8811 	msr	BASEPRI, r6
   1e526:	f3bf 8f6f 	isb	sy
   1e52a:	e7f0      	b.n	1e50e <z_impl_k_mutex_lock+0xca>
   1e52c:	200032a8 	.word	0x200032a8
   1e530:	20004e76 	.word	0x20004e76

0001e534 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1e534:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1e536:	6883      	ldr	r3, [r0, #8]
{
   1e538:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1e53a:	2b00      	cmp	r3, #0
   1e53c:	d036      	beq.n	1e5ac <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1e53e:	4a1e      	ldr	r2, [pc, #120]	; (1e5b8 <z_impl_k_mutex_unlock+0x84>)
   1e540:	6892      	ldr	r2, [r2, #8]
   1e542:	4293      	cmp	r3, r2
   1e544:	d135      	bne.n	1e5b2 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1e546:	7bda      	ldrb	r2, [r3, #15]
   1e548:	3a01      	subs	r2, #1
   1e54a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1e54c:	68c3      	ldr	r3, [r0, #12]
   1e54e:	2b01      	cmp	r3, #1
   1e550:	d005      	beq.n	1e55e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1e552:	3b01      	subs	r3, #1
   1e554:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1e556:	f000 fbef 	bl	1ed38 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1e55a:	2000      	movs	r0, #0
}
   1e55c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e55e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e562:	f3ef 8511 	mrs	r5, BASEPRI
   1e566:	f383 8811 	msr	BASEPRI, r3
   1e56a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1e56e:	6901      	ldr	r1, [r0, #16]
   1e570:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e572:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e576:	4299      	cmp	r1, r3
   1e578:	d001      	beq.n	1e57e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1e57a:	f000 fccf 	bl	1ef1c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1e57e:	4620      	mov	r0, r4
   1e580:	f006 fd19 	bl	24fb6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1e584:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1e586:	b158      	cbz	r0, 1e5a0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1e588:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1e58c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e58e:	2200      	movs	r2, #0
   1e590:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1e592:	f006 fcc9 	bl	24f28 <z_ready_thread>
		z_reschedule(&lock, key);
   1e596:	4809      	ldr	r0, [pc, #36]	; (1e5bc <z_impl_k_mutex_unlock+0x88>)
   1e598:	4629      	mov	r1, r5
   1e59a:	f000 fac9 	bl	1eb30 <z_reschedule>
   1e59e:	e7da      	b.n	1e556 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1e5a0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1e5a2:	f385 8811 	msr	BASEPRI, r5
   1e5a6:	f3bf 8f6f 	isb	sy
   1e5aa:	e7d4      	b.n	1e556 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1e5ac:	f06f 0015 	mvn.w	r0, #21
   1e5b0:	e7d4      	b.n	1e55c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1e5b2:	f04f 30ff 	mov.w	r0, #4294967295
   1e5b6:	e7d1      	b.n	1e55c <z_impl_k_mutex_unlock+0x28>
   1e5b8:	200032a8 	.word	0x200032a8
   1e5bc:	20004e76 	.word	0x20004e76

0001e5c0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1e5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e5c2:	4616      	mov	r6, r2
   1e5c4:	461f      	mov	r7, r3
	__asm__ volatile(
   1e5c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e5ca:	f3ef 8511 	mrs	r5, BASEPRI
   1e5ce:	f383 8811 	msr	BASEPRI, r3
   1e5d2:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1e5d6:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e5d8:	b19c      	cbz	r4, 1e602 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e5da:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e5dc:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e5de:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e5e2:	4294      	cmp	r4, r2
	list->head = node;
   1e5e4:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1e5e6:	bf08      	it	eq
   1e5e8:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e5ea:	2101      	movs	r1, #1
   1e5ec:	4620      	mov	r0, r4
   1e5ee:	f006 fab9 	bl	24b64 <z_queue_node_peek>
   1e5f2:	4604      	mov	r4, r0
	__asm__ volatile(
   1e5f4:	f385 8811 	msr	BASEPRI, r5
   1e5f8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1e5fc:	4620      	mov	r0, r4
   1e5fe:	b003      	add	sp, #12
   1e600:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e602:	ea56 0307 	orrs.w	r3, r6, r7
   1e606:	d0f5      	beq.n	1e5f4 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e608:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1e60c:	e9cd 6700 	strd	r6, r7, [sp]
   1e610:	4629      	mov	r1, r5
   1e612:	4610      	mov	r0, r2
   1e614:	f000 fb10 	bl	1ec38 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1e618:	2800      	cmp	r0, #0
   1e61a:	d1ef      	bne.n	1e5fc <z_impl_k_queue_get+0x3c>
   1e61c:	4b01      	ldr	r3, [pc, #4]	; (1e624 <z_impl_k_queue_get+0x64>)
   1e61e:	689b      	ldr	r3, [r3, #8]
   1e620:	695c      	ldr	r4, [r3, #20]
   1e622:	e7eb      	b.n	1e5fc <z_impl_k_queue_get+0x3c>
   1e624:	200032a8 	.word	0x200032a8

0001e628 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1e628:	b538      	push	{r3, r4, r5, lr}
   1e62a:	4604      	mov	r4, r0
	__asm__ volatile(
   1e62c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e630:	f3ef 8511 	mrs	r5, BASEPRI
   1e634:	f383 8811 	msr	BASEPRI, r3
   1e638:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1e63c:	f006 fcbb 	bl	24fb6 <z_unpend_first_thread>

	if (thread != NULL) {
   1e640:	b148      	cbz	r0, 1e656 <z_impl_k_sem_give+0x2e>
   1e642:	2200      	movs	r2, #0
   1e644:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1e646:	f006 fc6f 	bl	24f28 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1e64a:	4629      	mov	r1, r5
   1e64c:	4808      	ldr	r0, [pc, #32]	; (1e670 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1e64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1e652:	f000 ba6d 	b.w	1eb30 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1e656:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1e65a:	429a      	cmp	r2, r3
   1e65c:	bf18      	it	ne
   1e65e:	3301      	addne	r3, #1
   1e660:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1e662:	2102      	movs	r1, #2
   1e664:	f104 0010 	add.w	r0, r4, #16
   1e668:	f006 fec8 	bl	253fc <z_handle_obj_poll_events>
}
   1e66c:	e7ed      	b.n	1e64a <z_impl_k_sem_give+0x22>
   1e66e:	bf00      	nop
   1e670:	20004e76 	.word	0x20004e76

0001e674 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1e674:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e676:	4614      	mov	r4, r2
   1e678:	461d      	mov	r5, r3
   1e67a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e67e:	f3ef 8111 	mrs	r1, BASEPRI
   1e682:	f383 8811 	msr	BASEPRI, r3
   1e686:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1e68a:	6883      	ldr	r3, [r0, #8]
   1e68c:	b143      	cbz	r3, 1e6a0 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1e68e:	3b01      	subs	r3, #1
   1e690:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1e692:	f381 8811 	msr	BASEPRI, r1
   1e696:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1e69a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1e69c:	b003      	add	sp, #12
   1e69e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e6a0:	ea54 0305 	orrs.w	r3, r4, r5
   1e6a4:	d106      	bne.n	1e6b4 <z_impl_k_sem_take+0x40>
   1e6a6:	f381 8811 	msr	BASEPRI, r1
   1e6aa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1e6ae:	f06f 000f 	mvn.w	r0, #15
   1e6b2:	e7f3      	b.n	1e69c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1e6b4:	4602      	mov	r2, r0
   1e6b6:	e9cd 4500 	strd	r4, r5, [sp]
   1e6ba:	4802      	ldr	r0, [pc, #8]	; (1e6c4 <z_impl_k_sem_take+0x50>)
   1e6bc:	f000 fabc 	bl	1ec38 <z_pend_curr>
	return ret;
   1e6c0:	e7ec      	b.n	1e69c <z_impl_k_sem_take+0x28>
   1e6c2:	bf00      	nop
   1e6c4:	20004e76 	.word	0x20004e76

0001e6c8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   1e6c8:	b570      	push	{r4, r5, r6, lr}
   1e6ca:	4604      	mov	r4, r0
	__asm__ volatile(
   1e6cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e6d0:	f3ef 8511 	mrs	r5, BASEPRI
   1e6d4:	f383 8811 	msr	BASEPRI, r3
   1e6d8:	f3bf 8f6f 	isb	sy
   1e6dc:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   1e6e0:	4620      	mov	r0, r4
   1e6e2:	f006 fc68 	bl	24fb6 <z_unpend_first_thread>
		if (thread == NULL) {
   1e6e6:	b118      	cbz	r0, 1e6f0 <z_impl_k_sem_reset+0x28>
   1e6e8:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   1e6ea:	f006 fc1d 	bl	24f28 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   1e6ee:	e7f7      	b.n	1e6e0 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   1e6f0:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1e6f2:	2102      	movs	r1, #2
   1e6f4:	f104 0010 	add.w	r0, r4, #16
   1e6f8:	f006 fe80 	bl	253fc <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   1e6fc:	4629      	mov	r1, r5
   1e6fe:	4802      	ldr	r0, [pc, #8]	; (1e708 <z_impl_k_sem_reset+0x40>)
}
   1e700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1e704:	f000 ba14 	b.w	1eb30 <z_reschedule>
   1e708:	20004e76 	.word	0x20004e76

0001e70c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1e70c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1e70e:	4b09      	ldr	r3, [pc, #36]	; (1e734 <k_sys_work_q_init+0x28>)
   1e710:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1e712:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1e714:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1e716:	9300      	str	r3, [sp, #0]
   1e718:	4907      	ldr	r1, [pc, #28]	; (1e738 <k_sys_work_q_init+0x2c>)
   1e71a:	4808      	ldr	r0, [pc, #32]	; (1e73c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1e71c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1e720:	f04f 33ff 	mov.w	r3, #4294967295
   1e724:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1e728:	f000 f91c 	bl	1e964 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1e72c:	4620      	mov	r0, r4
   1e72e:	b004      	add	sp, #16
   1e730:	bd10      	pop	{r4, pc}
   1e732:	bf00      	nop
   1e734:	00028780 	.word	0x00028780
   1e738:	20007b00 	.word	0x20007b00
   1e73c:	20002c80 	.word	0x20002c80

0001e740 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e744:	4e4b      	ldr	r6, [pc, #300]	; (1e874 <work_queue_main+0x134>)
{
   1e746:	b085      	sub	sp, #20
   1e748:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1e74a:	f04f 38ff 	mov.w	r8, #4294967295
   1e74e:	f04f 39ff 	mov.w	r9, #4294967295
   1e752:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e756:	f3ef 8711 	mrs	r7, BASEPRI
   1e75a:	f383 8811 	msr	BASEPRI, r3
   1e75e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e762:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1e766:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1e76a:	b985      	cbnz	r5, 1e78e <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   1e76c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1e770:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1e772:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1e776:	d433      	bmi.n	1e7e0 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1e778:	2300      	movs	r3, #0
   1e77a:	e9cd 8900 	strd	r8, r9, [sp]
   1e77e:	9302      	str	r3, [sp, #8]
   1e780:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1e784:	4639      	mov	r1, r7
   1e786:	483c      	ldr	r0, [pc, #240]	; (1e878 <work_queue_main+0x138>)
   1e788:	f000 fcfc 	bl	1f184 <z_sched_wait>
			continue;
   1e78c:	e7e1      	b.n	1e752 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e78e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1e792:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1e794:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e798:	4295      	cmp	r5, r2
   1e79a:	d101      	bne.n	1e7a0 <work_queue_main+0x60>
	list->tail = node;
   1e79c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1e7a0:	f043 0302 	orr.w	r3, r3, #2
   1e7a4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1e7a8:	68eb      	ldr	r3, [r5, #12]
   1e7aa:	f023 0304 	bic.w	r3, r3, #4
   1e7ae:	f043 0301 	orr.w	r3, r3, #1
   1e7b2:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1e7b4:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1e7b6:	f387 8811 	msr	BASEPRI, r7
   1e7ba:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1e7be:	4628      	mov	r0, r5
   1e7c0:	4798      	blx	r3
	__asm__ volatile(
   1e7c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e7c6:	f3ef 8b11 	mrs	fp, BASEPRI
   1e7ca:	f383 8811 	msr	BASEPRI, r3
   1e7ce:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1e7d2:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e7d4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1e7d6:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e7da:	d40b      	bmi.n	1e7f4 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1e7dc:	60ea      	str	r2, [r5, #12]
   1e7de:	e00e      	b.n	1e7fe <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1e7e0:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1e7e4:	2200      	movs	r2, #0
   1e7e6:	2101      	movs	r1, #1
   1e7e8:	4628      	mov	r0, r5
   1e7ea:	f006 fc0c 	bl	25006 <z_sched_wake>
   1e7ee:	2800      	cmp	r0, #0
   1e7f0:	d1f8      	bne.n	1e7e4 <work_queue_main+0xa4>
   1e7f2:	e7c1      	b.n	1e778 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e7f4:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1e7f6:	f023 0303 	bic.w	r3, r3, #3
   1e7fa:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e7fc:	b970      	cbnz	r0, 1e81c <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1e7fe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1e802:	f023 0302 	bic.w	r3, r3, #2
   1e806:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1e80a:	f38b 8811 	msr	BASEPRI, fp
   1e80e:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1e812:	05d8      	lsls	r0, r3, #23
   1e814:	d49d      	bmi.n	1e752 <work_queue_main+0x12>
	z_impl_k_yield();
   1e816:	f000 fbd9 	bl	1efcc <z_impl_k_yield>
}
   1e81a:	e79a      	b.n	1e752 <work_queue_main+0x12>
	return node->next;
   1e81c:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e81e:	f04f 0a00 	mov.w	sl, #0
   1e822:	2f00      	cmp	r7, #0
   1e824:	bf38      	it	cc
   1e826:	2700      	movcc	r7, #0
	parent->next = child;
   1e828:	4653      	mov	r3, sl
		if (wc->work == work) {
   1e82a:	6842      	ldr	r2, [r0, #4]
   1e82c:	4295      	cmp	r5, r2
   1e82e:	4601      	mov	r1, r0
   1e830:	d10e      	bne.n	1e850 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1e832:	6801      	ldr	r1, [r0, #0]
   1e834:	f1ba 0f00 	cmp.w	sl, #0
   1e838:	d114      	bne.n	1e864 <work_queue_main+0x124>
   1e83a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1e83c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e83e:	4290      	cmp	r0, r2
   1e840:	d100      	bne.n	1e844 <work_queue_main+0x104>
	list->tail = node;
   1e842:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1e844:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1e848:	f7ff feee 	bl	1e628 <z_impl_k_sem_give>
}
   1e84c:	4651      	mov	r1, sl
   1e84e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e850:	2f00      	cmp	r7, #0
   1e852:	d0d4      	beq.n	1e7fe <work_queue_main+0xbe>
	return node->next;
   1e854:	683a      	ldr	r2, [r7, #0]
   1e856:	2a00      	cmp	r2, #0
   1e858:	bf38      	it	cc
   1e85a:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e85c:	4638      	mov	r0, r7
   1e85e:	468a      	mov	sl, r1
   1e860:	4617      	mov	r7, r2
   1e862:	e7e2      	b.n	1e82a <work_queue_main+0xea>
	parent->next = child;
   1e864:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   1e868:	6872      	ldr	r2, [r6, #4]
   1e86a:	4290      	cmp	r0, r2
	list->tail = node;
   1e86c:	bf08      	it	eq
   1e86e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1e872:	e7e7      	b.n	1e844 <work_queue_main+0x104>
   1e874:	200032d8 	.word	0x200032d8
   1e878:	20004e76 	.word	0x20004e76

0001e87c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1e87c:	68c3      	ldr	r3, [r0, #12]
{
   1e87e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1e880:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1e884:	079b      	lsls	r3, r3, #30
{
   1e886:	4605      	mov	r5, r0
   1e888:	460c      	mov	r4, r1
	if (ret) {
   1e88a:	d50d      	bpl.n	1e8a8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e88c:	2201      	movs	r2, #1
   1e88e:	2100      	movs	r1, #0
   1e890:	f104 0008 	add.w	r0, r4, #8
   1e894:	f006 f9cf 	bl	24c36 <z_impl_k_sem_init>
	parent->next = child;
   1e898:	2300      	movs	r3, #0
   1e89a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1e89c:	4b05      	ldr	r3, [pc, #20]	; (1e8b4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1e89e:	6065      	str	r5, [r4, #4]
   1e8a0:	685a      	ldr	r2, [r3, #4]
   1e8a2:	b91a      	cbnz	r2, 1e8ac <cancel_sync_locked+0x30>
	list->head = node;
   1e8a4:	e9c3 4400 	strd	r4, r4, [r3]
}
   1e8a8:	4630      	mov	r0, r6
   1e8aa:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1e8ac:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1e8ae:	605c      	str	r4, [r3, #4]
}
   1e8b0:	e7fa      	b.n	1e8a8 <cancel_sync_locked+0x2c>
   1e8b2:	bf00      	nop
   1e8b4:	200032d8 	.word	0x200032d8

0001e8b8 <submit_to_queue_locked>:
{
   1e8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e8ba:	68c3      	ldr	r3, [r0, #12]
   1e8bc:	079a      	lsls	r2, r3, #30
{
   1e8be:	4604      	mov	r4, r0
   1e8c0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e8c2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1e8c6:	d41f      	bmi.n	1e908 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1e8c8:	075f      	lsls	r7, r3, #29
   1e8ca:	d41f      	bmi.n	1e90c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1e8cc:	680a      	ldr	r2, [r1, #0]
   1e8ce:	b90a      	cbnz	r2, 1e8d4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1e8d0:	6882      	ldr	r2, [r0, #8]
   1e8d2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1e8d4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1e8d6:	bf44      	itt	mi
   1e8d8:	68a3      	ldrmi	r3, [r4, #8]
   1e8da:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1e8dc:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1e8de:	bf4c      	ite	mi
   1e8e0:	2502      	movmi	r5, #2
		ret = 1;
   1e8e2:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1e8e4:	b37f      	cbz	r7, 1e946 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1e8e6:	4b1b      	ldr	r3, [pc, #108]	; (1e954 <submit_to_queue_locked+0x9c>)
   1e8e8:	689b      	ldr	r3, [r3, #8]
   1e8ea:	42bb      	cmp	r3, r7
   1e8ec:	d111      	bne.n	1e912 <submit_to_queue_locked+0x5a>
   1e8ee:	f006 f8ba 	bl	24a66 <k_is_in_isr>
   1e8f2:	f080 0001 	eor.w	r0, r0, #1
   1e8f6:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1e8f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1e8fc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1e8fe:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1e902:	d523      	bpl.n	1e94c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1e904:	b13a      	cbz	r2, 1e916 <submit_to_queue_locked+0x5e>
   1e906:	b940      	cbnz	r0, 1e91a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1e908:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1e90c:	2300      	movs	r3, #0
   1e90e:	6033      	str	r3, [r6, #0]
	return ret;
   1e910:	e013      	b.n	1e93a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1e912:	2000      	movs	r0, #0
   1e914:	e7f0      	b.n	1e8f8 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1e916:	071b      	lsls	r3, r3, #28
   1e918:	d4f6      	bmi.n	1e908 <submit_to_queue_locked+0x50>
	parent->next = child;
   1e91a:	2300      	movs	r3, #0
   1e91c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1e91e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1e922:	b963      	cbnz	r3, 1e93e <submit_to_queue_locked+0x86>
	list->head = node;
   1e924:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1e928:	4638      	mov	r0, r7
   1e92a:	f006 f994 	bl	24c56 <notify_queue_locked>
	*flagp |= BIT(bit);
   1e92e:	68e3      	ldr	r3, [r4, #12]
   1e930:	f043 0304 	orr.w	r3, r3, #4
   1e934:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1e936:	6833      	ldr	r3, [r6, #0]
   1e938:	60a3      	str	r3, [r4, #8]
}
   1e93a:	4628      	mov	r0, r5
   1e93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1e93e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e940:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1e944:	e7f0      	b.n	1e928 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1e946:	f06f 0515 	mvn.w	r5, #21
   1e94a:	e7df      	b.n	1e90c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1e94c:	f06f 0512 	mvn.w	r5, #18
   1e950:	e7dc      	b.n	1e90c <submit_to_queue_locked+0x54>
   1e952:	bf00      	nop
   1e954:	200032a8 	.word	0x200032a8

0001e958 <k_work_submit>:
{
   1e958:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1e95a:	4801      	ldr	r0, [pc, #4]	; (1e960 <k_work_submit+0x8>)
   1e95c:	f006 b9eb 	b.w	24d36 <k_work_submit_to_queue>
   1e960:	20002c80 	.word	0x20002c80

0001e964 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1e964:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e966:	b089      	sub	sp, #36	; 0x24
   1e968:	4604      	mov	r4, r0
	list->head = NULL;
   1e96a:	2000      	movs	r0, #0
	list->tail = NULL;
   1e96c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1e970:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e972:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1e976:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1e97a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1e97e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1e982:	b31d      	cbz	r5, 1e9cc <k_work_queue_start+0x68>
   1e984:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1e986:	2800      	cmp	r0, #0
   1e988:	f240 1001 	movw	r0, #257	; 0x101
   1e98c:	bf08      	it	eq
   1e98e:	2001      	moveq	r0, #1
	*flagp = flags;
   1e990:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e994:	2000      	movs	r0, #0
   1e996:	f04f 36ff 	mov.w	r6, #4294967295
   1e99a:	f04f 37ff 	mov.w	r7, #4294967295
   1e99e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1e9a2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1e9a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1e9aa:	4b09      	ldr	r3, [pc, #36]	; (1e9d0 <k_work_queue_start+0x6c>)
   1e9ac:	9400      	str	r4, [sp, #0]
   1e9ae:	4620      	mov	r0, r4
   1e9b0:	f7ff fca8 	bl	1e304 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1e9b4:	b125      	cbz	r5, 1e9c0 <k_work_queue_start+0x5c>
   1e9b6:	6829      	ldr	r1, [r5, #0]
   1e9b8:	b111      	cbz	r1, 1e9c0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1e9ba:	4620      	mov	r0, r4
   1e9bc:	f006 f859 	bl	24a72 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1e9c0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1e9c2:	b009      	add	sp, #36	; 0x24
   1e9c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e9c8:	f006 b858 	b.w	24a7c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1e9cc:	2001      	movs	r0, #1
   1e9ce:	e7df      	b.n	1e990 <k_work_queue_start+0x2c>
   1e9d0:	0001e741 	.word	0x0001e741

0001e9d4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1e9d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e9d6:	4614      	mov	r4, r2
   1e9d8:	9001      	str	r0, [sp, #4]
   1e9da:	461d      	mov	r5, r3
   1e9dc:	4608      	mov	r0, r1
	__asm__ volatile(
   1e9de:	f04f 0140 	mov.w	r1, #64	; 0x40
   1e9e2:	f3ef 8611 	mrs	r6, BASEPRI
   1e9e6:	f381 8811 	msr	BASEPRI, r1
   1e9ea:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1e9ee:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1e9f0:	f011 0f0e 	tst.w	r1, #14
   1e9f4:	d115      	bne.n	1ea22 <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e9f6:	432c      	orrs	r4, r5
   1e9f8:	d108      	bne.n	1ea0c <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   1e9fa:	a901      	add	r1, sp, #4
   1e9fc:	f7ff ff5c 	bl	1e8b8 <submit_to_queue_locked>
	__asm__ volatile(
   1ea00:	f386 8811 	msr	BASEPRI, r6
   1ea04:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1ea08:	b002      	add	sp, #8
   1ea0a:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   1ea0c:	f041 0108 	orr.w	r1, r1, #8
   1ea10:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1ea12:	9901      	ldr	r1, [sp, #4]
   1ea14:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1ea16:	3010      	adds	r0, #16
   1ea18:	4903      	ldr	r1, [pc, #12]	; (1ea28 <k_work_schedule_for_queue+0x54>)
   1ea1a:	f000 fc2f 	bl	1f27c <z_add_timeout>
	return ret;
   1ea1e:	2001      	movs	r0, #1
   1ea20:	e7ee      	b.n	1ea00 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1ea22:	2000      	movs	r0, #0
   1ea24:	e7ec      	b.n	1ea00 <k_work_schedule_for_queue+0x2c>
   1ea26:	bf00      	nop
   1ea28:	00024ce7 	.word	0x00024ce7

0001ea2c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1ea2c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1ea2e:	4801      	ldr	r0, [pc, #4]	; (1ea34 <k_work_schedule+0x8>)
   1ea30:	f7ff bfd0 	b.w	1e9d4 <k_work_schedule_for_queue>
   1ea34:	20002c80 	.word	0x20002c80

0001ea38 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1ea38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ea3a:	460c      	mov	r4, r1
   1ea3c:	9001      	str	r0, [sp, #4]
   1ea3e:	4616      	mov	r6, r2
   1ea40:	461f      	mov	r7, r3
	__asm__ volatile(
   1ea42:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea46:	f3ef 8511 	mrs	r5, BASEPRI
   1ea4a:	f383 8811 	msr	BASEPRI, r3
   1ea4e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1ea52:	4608      	mov	r0, r1
   1ea54:	f006 f906 	bl	24c64 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ea58:	ea56 0307 	orrs.w	r3, r6, r7
   1ea5c:	d109      	bne.n	1ea72 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1ea5e:	a901      	add	r1, sp, #4
   1ea60:	4620      	mov	r0, r4
   1ea62:	f7ff ff29 	bl	1e8b8 <submit_to_queue_locked>
	__asm__ volatile(
   1ea66:	f385 8811 	msr	BASEPRI, r5
   1ea6a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1ea6e:	b003      	add	sp, #12
   1ea70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1ea72:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1ea74:	4906      	ldr	r1, [pc, #24]	; (1ea90 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1ea76:	f043 0308 	orr.w	r3, r3, #8
   1ea7a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1ea7c:	9b01      	ldr	r3, [sp, #4]
   1ea7e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1ea80:	f104 0010 	add.w	r0, r4, #16
   1ea84:	4632      	mov	r2, r6
   1ea86:	463b      	mov	r3, r7
   1ea88:	f000 fbf8 	bl	1f27c <z_add_timeout>
	return ret;
   1ea8c:	2001      	movs	r0, #1
   1ea8e:	e7ea      	b.n	1ea66 <k_work_reschedule_for_queue+0x2e>
   1ea90:	00024ce7 	.word	0x00024ce7

0001ea94 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1ea94:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1ea96:	4801      	ldr	r0, [pc, #4]	; (1ea9c <k_work_reschedule+0x8>)
   1ea98:	f7ff bfce 	b.w	1ea38 <k_work_reschedule_for_queue>
   1ea9c:	20002c80 	.word	0x20002c80

0001eaa0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1eaa0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1eaa2:	4c08      	ldr	r4, [pc, #32]	; (1eac4 <z_reset_time_slice+0x24>)
   1eaa4:	6823      	ldr	r3, [r4, #0]
   1eaa6:	b15b      	cbz	r3, 1eac0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1eaa8:	f7f4 fb80 	bl	131ac <sys_clock_elapsed>
   1eaac:	4603      	mov	r3, r0
   1eaae:	6820      	ldr	r0, [r4, #0]
   1eab0:	4a05      	ldr	r2, [pc, #20]	; (1eac8 <z_reset_time_slice+0x28>)
   1eab2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1eab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1eab8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1eaba:	2100      	movs	r1, #0
   1eabc:	f006 bae6 	b.w	2508c <z_set_timeout_expiry>
}
   1eac0:	bd10      	pop	{r4, pc}
   1eac2:	bf00      	nop
   1eac4:	200032e8 	.word	0x200032e8
   1eac8:	200032a8 	.word	0x200032a8

0001eacc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eace:	4604      	mov	r4, r0
   1ead0:	460d      	mov	r5, r1
	__asm__ volatile(
   1ead2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ead6:	f3ef 8611 	mrs	r6, BASEPRI
   1eada:	f383 8811 	msr	BASEPRI, r3
   1eade:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1eae2:	4b10      	ldr	r3, [pc, #64]	; (1eb24 <k_sched_time_slice_set+0x58>)
   1eae4:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1eae6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1eaea:	f240 30e7 	movw	r0, #999	; 0x3e7
   1eaee:	2100      	movs	r1, #0
   1eaf0:	611a      	str	r2, [r3, #16]
   1eaf2:	fbe7 0104 	umlal	r0, r1, r7, r4
   1eaf6:	2300      	movs	r3, #0
   1eaf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1eafc:	f7e1 fede 	bl	8bc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1eb00:	2c00      	cmp	r4, #0
   1eb02:	4b09      	ldr	r3, [pc, #36]	; (1eb28 <k_sched_time_slice_set+0x5c>)
   1eb04:	dc09      	bgt.n	1eb1a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1eb06:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1eb08:	4b08      	ldr	r3, [pc, #32]	; (1eb2c <k_sched_time_slice_set+0x60>)
   1eb0a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1eb0c:	f7ff ffc8 	bl	1eaa0 <z_reset_time_slice>
	__asm__ volatile(
   1eb10:	f386 8811 	msr	BASEPRI, r6
   1eb14:	f3bf 8f6f 	isb	sy
	}
}
   1eb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1eb1a:	2802      	cmp	r0, #2
   1eb1c:	bfb8      	it	lt
   1eb1e:	2002      	movlt	r0, #2
   1eb20:	e7f1      	b.n	1eb06 <k_sched_time_slice_set+0x3a>
   1eb22:	bf00      	nop
   1eb24:	200032a8 	.word	0x200032a8
   1eb28:	200032e8 	.word	0x200032e8
   1eb2c:	200032e4 	.word	0x200032e4

0001eb30 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eb30:	b949      	cbnz	r1, 1eb46 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1eb32:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1eb36:	b930      	cbnz	r0, 1eb46 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1eb38:	4b05      	ldr	r3, [pc, #20]	; (1eb50 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1eb3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1eb3c:	689b      	ldr	r3, [r3, #8]
   1eb3e:	429a      	cmp	r2, r3
   1eb40:	d001      	beq.n	1eb46 <z_reschedule+0x16>
	ret = arch_swap(key);
   1eb42:	f7f4 bced 	b.w	13520 <arch_swap>
   1eb46:	f381 8811 	msr	BASEPRI, r1
   1eb4a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1eb4e:	4770      	bx	lr
   1eb50:	200032a8 	.word	0x200032a8

0001eb54 <k_sched_lock>:
	__asm__ volatile(
   1eb54:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eb58:	f3ef 8111 	mrs	r1, BASEPRI
   1eb5c:	f383 8811 	msr	BASEPRI, r3
   1eb60:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1eb64:	4b04      	ldr	r3, [pc, #16]	; (1eb78 <k_sched_lock+0x24>)
   1eb66:	689a      	ldr	r2, [r3, #8]
   1eb68:	7bd3      	ldrb	r3, [r2, #15]
   1eb6a:	3b01      	subs	r3, #1
   1eb6c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1eb6e:	f381 8811 	msr	BASEPRI, r1
   1eb72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1eb76:	4770      	bx	lr
   1eb78:	200032a8 	.word	0x200032a8

0001eb7c <update_cache>:
{
   1eb7c:	b538      	push	{r3, r4, r5, lr}
   1eb7e:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1eb80:	480c      	ldr	r0, [pc, #48]	; (1ebb4 <update_cache+0x38>)
   1eb82:	4d0d      	ldr	r5, [pc, #52]	; (1ebb8 <update_cache+0x3c>)
   1eb84:	f006 f999 	bl	24eba <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1eb88:	4604      	mov	r4, r0
   1eb8a:	b900      	cbnz	r0, 1eb8e <update_cache+0x12>
   1eb8c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1eb8e:	68ab      	ldr	r3, [r5, #8]
   1eb90:	b94a      	cbnz	r2, 1eba6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1eb92:	7b5a      	ldrb	r2, [r3, #13]
   1eb94:	06d2      	lsls	r2, r2, #27
   1eb96:	d106      	bne.n	1eba6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1eb98:	69a2      	ldr	r2, [r4, #24]
   1eb9a:	b922      	cbnz	r2, 1eba6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1eb9c:	89da      	ldrh	r2, [r3, #14]
   1eb9e:	2a7f      	cmp	r2, #127	; 0x7f
   1eba0:	d901      	bls.n	1eba6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1eba2:	626b      	str	r3, [r5, #36]	; 0x24
}
   1eba4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1eba6:	429c      	cmp	r4, r3
   1eba8:	d001      	beq.n	1ebae <update_cache+0x32>
			z_reset_time_slice();
   1ebaa:	f7ff ff79 	bl	1eaa0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1ebae:	626c      	str	r4, [r5, #36]	; 0x24
}
   1ebb0:	e7f8      	b.n	1eba4 <update_cache+0x28>
   1ebb2:	bf00      	nop
   1ebb4:	200032d0 	.word	0x200032d0
   1ebb8:	200032a8 	.word	0x200032a8

0001ebbc <unready_thread>:
{
   1ebbc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1ebbe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1ebc2:	7b43      	ldrb	r3, [r0, #13]
   1ebc4:	2a00      	cmp	r2, #0
{
   1ebc6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ebc8:	da04      	bge.n	1ebd4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ebca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ebce:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ebd0:	f006 f91e 	bl	24e10 <sys_dlist_remove>
	update_cache(thread == _current);
   1ebd4:	4b04      	ldr	r3, [pc, #16]	; (1ebe8 <unready_thread+0x2c>)
   1ebd6:	6898      	ldr	r0, [r3, #8]
   1ebd8:	1a43      	subs	r3, r0, r1
   1ebda:	4258      	negs	r0, r3
   1ebdc:	4158      	adcs	r0, r3
}
   1ebde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ebe2:	f7ff bfcb 	b.w	1eb7c <update_cache>
   1ebe6:	bf00      	nop
   1ebe8:	200032a8 	.word	0x200032a8

0001ebec <pend>:
{
   1ebec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ebf0:	4606      	mov	r6, r0
   1ebf2:	4614      	mov	r4, r2
   1ebf4:	461d      	mov	r5, r3
	__asm__ volatile(
   1ebf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ebfa:	f3ef 8711 	mrs	r7, BASEPRI
   1ebfe:	f383 8811 	msr	BASEPRI, r3
   1ec02:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ec06:	f006 f962 	bl	24ece <add_to_waitq_locked>
	__asm__ volatile(
   1ec0a:	f387 8811 	msr	BASEPRI, r7
   1ec0e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ec12:	1c6b      	adds	r3, r5, #1
   1ec14:	bf08      	it	eq
   1ec16:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1ec1a:	d008      	beq.n	1ec2e <pend+0x42>
   1ec1c:	4622      	mov	r2, r4
   1ec1e:	462b      	mov	r3, r5
   1ec20:	f106 0018 	add.w	r0, r6, #24
   1ec24:	4903      	ldr	r1, [pc, #12]	; (1ec34 <pend+0x48>)
}
   1ec26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ec2a:	f000 bb27 	b.w	1f27c <z_add_timeout>
   1ec2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec32:	bf00      	nop
   1ec34:	00024f49 	.word	0x00024f49

0001ec38 <z_pend_curr>:
{
   1ec38:	b510      	push	{r4, lr}
	pending_current = _current;
   1ec3a:	4b07      	ldr	r3, [pc, #28]	; (1ec58 <z_pend_curr+0x20>)
   1ec3c:	6898      	ldr	r0, [r3, #8]
   1ec3e:	4b07      	ldr	r3, [pc, #28]	; (1ec5c <z_pend_curr+0x24>)
{
   1ec40:	460c      	mov	r4, r1
	pending_current = _current;
   1ec42:	6018      	str	r0, [r3, #0]
{
   1ec44:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1ec46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ec4a:	f7ff ffcf 	bl	1ebec <pend>
   1ec4e:	4620      	mov	r0, r4
}
   1ec50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ec54:	f7f4 bc64 	b.w	13520 <arch_swap>
   1ec58:	200032a8 	.word	0x200032a8
   1ec5c:	200032e0 	.word	0x200032e0

0001ec60 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1ec60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec64:	4605      	mov	r5, r0
   1ec66:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1ec68:	f006 fa2a 	bl	250c0 <sys_clock_tick_get_32>
   1ec6c:	4604      	mov	r4, r0
	__asm__ volatile(
   1ec6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ec72:	f3ef 8811 	mrs	r8, BASEPRI
   1ec76:	f383 8811 	msr	BASEPRI, r3
   1ec7a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1ec7e:	4e12      	ldr	r6, [pc, #72]	; (1ecc8 <z_tick_sleep.part.0+0x68>)
   1ec80:	4b12      	ldr	r3, [pc, #72]	; (1eccc <z_tick_sleep.part.0+0x6c>)
   1ec82:	68b0      	ldr	r0, [r6, #8]
   1ec84:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1ec86:	f7ff ff99 	bl	1ebbc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1ec8a:	68b0      	ldr	r0, [r6, #8]
   1ec8c:	4910      	ldr	r1, [pc, #64]	; (1ecd0 <z_tick_sleep.part.0+0x70>)
   1ec8e:	462a      	mov	r2, r5
   1ec90:	463b      	mov	r3, r7
   1ec92:	3018      	adds	r0, #24
   1ec94:	f000 faf2 	bl	1f27c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1ec98:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ec9a:	7b53      	ldrb	r3, [r2, #13]
   1ec9c:	f043 0310 	orr.w	r3, r3, #16
   1eca0:	7353      	strb	r3, [r2, #13]
   1eca2:	4640      	mov	r0, r8
   1eca4:	f7f4 fc3c 	bl	13520 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1eca8:	f006 fa0a 	bl	250c0 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1ecac:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1ecae:	1a24      	subs	r4, r4, r0
   1ecb0:	f04f 0500 	mov.w	r5, #0
   1ecb4:	f165 0500 	sbc.w	r5, r5, #0
   1ecb8:	2c00      	cmp	r4, #0
   1ecba:	f175 0300 	sbcs.w	r3, r5, #0
   1ecbe:	bfb8      	it	lt
   1ecc0:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1ecc2:	4620      	mov	r0, r4
   1ecc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ecc8:	200032a8 	.word	0x200032a8
   1eccc:	200032e0 	.word	0x200032e0
   1ecd0:	00024f49 	.word	0x00024f49

0001ecd4 <z_impl_k_thread_suspend>:
{
   1ecd4:	b570      	push	{r4, r5, r6, lr}
   1ecd6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ecd8:	3018      	adds	r0, #24
   1ecda:	f006 f9b1 	bl	25040 <z_abort_timeout>
   1ecde:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ece2:	f3ef 8611 	mrs	r6, BASEPRI
   1ece6:	f383 8811 	msr	BASEPRI, r3
   1ecea:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1ecee:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1ecf2:	7b63      	ldrb	r3, [r4, #13]
   1ecf4:	2a00      	cmp	r2, #0
   1ecf6:	da05      	bge.n	1ed04 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ecf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ecfc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ecfe:	4620      	mov	r0, r4
   1ed00:	f006 f886 	bl	24e10 <sys_dlist_remove>
		update_cache(thread == _current);
   1ed04:	4d0b      	ldr	r5, [pc, #44]	; (1ed34 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ed06:	7b63      	ldrb	r3, [r4, #13]
   1ed08:	68a8      	ldr	r0, [r5, #8]
   1ed0a:	f043 0310 	orr.w	r3, r3, #16
   1ed0e:	7363      	strb	r3, [r4, #13]
   1ed10:	1b03      	subs	r3, r0, r4
   1ed12:	4258      	negs	r0, r3
   1ed14:	4158      	adcs	r0, r3
   1ed16:	f7ff ff31 	bl	1eb7c <update_cache>
	__asm__ volatile(
   1ed1a:	f386 8811 	msr	BASEPRI, r6
   1ed1e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1ed22:	68ab      	ldr	r3, [r5, #8]
   1ed24:	42a3      	cmp	r3, r4
   1ed26:	d103      	bne.n	1ed30 <z_impl_k_thread_suspend+0x5c>
}
   1ed28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1ed2c:	f006 b8bb 	b.w	24ea6 <z_reschedule_unlocked>
}
   1ed30:	bd70      	pop	{r4, r5, r6, pc}
   1ed32:	bf00      	nop
   1ed34:	200032a8 	.word	0x200032a8

0001ed38 <k_sched_unlock>:
{
   1ed38:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ed3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ed3e:	f3ef 8411 	mrs	r4, BASEPRI
   1ed42:	f383 8811 	msr	BASEPRI, r3
   1ed46:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1ed4a:	4b08      	ldr	r3, [pc, #32]	; (1ed6c <k_sched_unlock+0x34>)
   1ed4c:	689a      	ldr	r2, [r3, #8]
   1ed4e:	7bd3      	ldrb	r3, [r2, #15]
   1ed50:	3301      	adds	r3, #1
   1ed52:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1ed54:	2000      	movs	r0, #0
   1ed56:	f7ff ff11 	bl	1eb7c <update_cache>
	__asm__ volatile(
   1ed5a:	f384 8811 	msr	BASEPRI, r4
   1ed5e:	f3bf 8f6f 	isb	sy
}
   1ed62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1ed66:	f006 b89e 	b.w	24ea6 <z_reschedule_unlocked>
   1ed6a:	bf00      	nop
   1ed6c:	200032a8 	.word	0x200032a8

0001ed70 <move_thread_to_end_of_prio_q>:
{
   1ed70:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ed72:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1ed76:	7b43      	ldrb	r3, [r0, #13]
   1ed78:	2a00      	cmp	r2, #0
{
   1ed7a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ed7c:	da04      	bge.n	1ed88 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ed7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ed82:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ed84:	f006 f844 	bl	24e10 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ed88:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1ed8a:	4a17      	ldr	r2, [pc, #92]	; (1ede8 <move_thread_to_end_of_prio_q+0x78>)
   1ed8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ed90:	4610      	mov	r0, r2
   1ed92:	734b      	strb	r3, [r1, #13]
   1ed94:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ed98:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ed9a:	4283      	cmp	r3, r0
   1ed9c:	bf08      	it	eq
   1ed9e:	2300      	moveq	r3, #0
   1eda0:	2b00      	cmp	r3, #0
   1eda2:	bf38      	it	cc
   1eda4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1eda6:	b1cb      	cbz	r3, 1eddc <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1eda8:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1edac:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1edb0:	42a6      	cmp	r6, r4
   1edb2:	d00f      	beq.n	1edd4 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1edb4:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1edb6:	2c00      	cmp	r4, #0
   1edb8:	dd0c      	ble.n	1edd4 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1edba:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1edbc:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1edc0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1edc2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1edc4:	6890      	ldr	r0, [r2, #8]
   1edc6:	1a43      	subs	r3, r0, r1
   1edc8:	4258      	negs	r0, r3
}
   1edca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1edce:	4158      	adcs	r0, r3
   1edd0:	f7ff bed4 	b.w	1eb7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1edd4:	42ab      	cmp	r3, r5
   1edd6:	d001      	beq.n	1eddc <move_thread_to_end_of_prio_q+0x6c>
   1edd8:	681b      	ldr	r3, [r3, #0]
   1edda:	e7e4      	b.n	1eda6 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1eddc:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1ede0:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1ede2:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1ede4:	e7ee      	b.n	1edc4 <move_thread_to_end_of_prio_q+0x54>
   1ede6:	bf00      	nop
   1ede8:	200032a8 	.word	0x200032a8

0001edec <z_time_slice>:
{
   1edec:	b570      	push	{r4, r5, r6, lr}
   1edee:	4601      	mov	r1, r0
	__asm__ volatile(
   1edf0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1edf4:	f3ef 8411 	mrs	r4, BASEPRI
   1edf8:	f383 8811 	msr	BASEPRI, r3
   1edfc:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1ee00:	4b16      	ldr	r3, [pc, #88]	; (1ee5c <z_time_slice+0x70>)
   1ee02:	4a17      	ldr	r2, [pc, #92]	; (1ee60 <z_time_slice+0x74>)
   1ee04:	6898      	ldr	r0, [r3, #8]
   1ee06:	6815      	ldr	r5, [r2, #0]
   1ee08:	42a8      	cmp	r0, r5
   1ee0a:	461d      	mov	r5, r3
   1ee0c:	d106      	bne.n	1ee1c <z_time_slice+0x30>
			z_reset_time_slice();
   1ee0e:	f7ff fe47 	bl	1eaa0 <z_reset_time_slice>
	__asm__ volatile(
   1ee12:	f384 8811 	msr	BASEPRI, r4
   1ee16:	f3bf 8f6f 	isb	sy
}
   1ee1a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1ee1c:	2600      	movs	r6, #0
   1ee1e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1ee20:	4a10      	ldr	r2, [pc, #64]	; (1ee64 <z_time_slice+0x78>)
   1ee22:	6812      	ldr	r2, [r2, #0]
   1ee24:	b1ba      	cbz	r2, 1ee56 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1ee26:	89c2      	ldrh	r2, [r0, #14]
   1ee28:	2a7f      	cmp	r2, #127	; 0x7f
   1ee2a:	d814      	bhi.n	1ee56 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1ee2c:	7b42      	ldrb	r2, [r0, #13]
   1ee2e:	06d2      	lsls	r2, r2, #27
   1ee30:	d111      	bne.n	1ee56 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1ee32:	4a0d      	ldr	r2, [pc, #52]	; (1ee68 <z_time_slice+0x7c>)
   1ee34:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1ee38:	6812      	ldr	r2, [r2, #0]
   1ee3a:	4296      	cmp	r6, r2
   1ee3c:	db0b      	blt.n	1ee56 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1ee3e:	4a0b      	ldr	r2, [pc, #44]	; (1ee6c <z_time_slice+0x80>)
   1ee40:	4290      	cmp	r0, r2
   1ee42:	d008      	beq.n	1ee56 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1ee44:	691a      	ldr	r2, [r3, #16]
   1ee46:	428a      	cmp	r2, r1
   1ee48:	dc02      	bgt.n	1ee50 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1ee4a:	f7ff ff91 	bl	1ed70 <move_thread_to_end_of_prio_q>
   1ee4e:	e7de      	b.n	1ee0e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1ee50:	1a52      	subs	r2, r2, r1
   1ee52:	611a      	str	r2, [r3, #16]
   1ee54:	e7dd      	b.n	1ee12 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1ee56:	2300      	movs	r3, #0
   1ee58:	612b      	str	r3, [r5, #16]
   1ee5a:	e7da      	b.n	1ee12 <z_time_slice+0x26>
   1ee5c:	200032a8 	.word	0x200032a8
   1ee60:	200032e0 	.word	0x200032e0
   1ee64:	200032e8 	.word	0x200032e8
   1ee68:	200032e4 	.word	0x200032e4
   1ee6c:	20002b80 	.word	0x20002b80

0001ee70 <ready_thread>:
{
   1ee70:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ee72:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1ee76:	7b42      	ldrb	r2, [r0, #13]
   1ee78:	2b00      	cmp	r3, #0
   1ee7a:	db2d      	blt.n	1eed8 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ee7c:	06d3      	lsls	r3, r2, #27
   1ee7e:	d12b      	bne.n	1eed8 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1ee80:	6983      	ldr	r3, [r0, #24]
   1ee82:	bb4b      	cbnz	r3, 1eed8 <ready_thread+0x68>
	return list->head == list;
   1ee84:	4915      	ldr	r1, [pc, #84]	; (1eedc <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1ee86:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ee8a:	7342      	strb	r2, [r0, #13]
   1ee8c:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ee8e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   1ee90:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ee94:	4294      	cmp	r4, r2
   1ee96:	bf18      	it	ne
   1ee98:	4623      	movne	r3, r4
   1ee9a:	2b00      	cmp	r3, #0
   1ee9c:	bf38      	it	cc
   1ee9e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1eea0:	b1ab      	cbz	r3, 1eece <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1eea2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1eea6:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1eeaa:	42a6      	cmp	r6, r4
   1eeac:	d00b      	beq.n	1eec6 <ready_thread+0x56>
		return b2 - b1;
   1eeae:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1eeb0:	2c00      	cmp	r4, #0
   1eeb2:	dd08      	ble.n	1eec6 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1eeb4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1eeb6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1eeba:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1eebc:	6058      	str	r0, [r3, #4]
}
   1eebe:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1eec0:	2000      	movs	r0, #0
   1eec2:	f7ff be5b 	b.w	1eb7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1eec6:	42ab      	cmp	r3, r5
   1eec8:	d001      	beq.n	1eece <ready_thread+0x5e>
   1eeca:	681b      	ldr	r3, [r3, #0]
   1eecc:	e7e8      	b.n	1eea0 <ready_thread+0x30>
	node->prev = tail;
   1eece:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1eed2:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1eed4:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   1eed6:	e7f2      	b.n	1eebe <ready_thread+0x4e>
}
   1eed8:	bc70      	pop	{r4, r5, r6}
   1eeda:	4770      	bx	lr
   1eedc:	200032a8 	.word	0x200032a8

0001eee0 <z_sched_start>:
{
   1eee0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eee2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1eee6:	f3ef 8411 	mrs	r4, BASEPRI
   1eeea:	f382 8811 	msr	BASEPRI, r2
   1eeee:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1eef2:	7b42      	ldrb	r2, [r0, #13]
   1eef4:	0751      	lsls	r1, r2, #29
   1eef6:	d404      	bmi.n	1ef02 <z_sched_start+0x22>
	__asm__ volatile(
   1eef8:	f384 8811 	msr	BASEPRI, r4
   1eefc:	f3bf 8f6f 	isb	sy
}
   1ef00:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ef02:	f022 0204 	bic.w	r2, r2, #4
   1ef06:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1ef08:	f7ff ffb2 	bl	1ee70 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ef0c:	4621      	mov	r1, r4
   1ef0e:	4802      	ldr	r0, [pc, #8]	; (1ef18 <z_sched_start+0x38>)
}
   1ef10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1ef14:	f7ff be0c 	b.w	1eb30 <z_reschedule>
   1ef18:	20004e76 	.word	0x20004e76

0001ef1c <z_set_prio>:
{
   1ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef1e:	4604      	mov	r4, r0
	__asm__ volatile(
   1ef20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef24:	f3ef 8611 	mrs	r6, BASEPRI
   1ef28:	f383 8811 	msr	BASEPRI, r3
   1ef2c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ef30:	7b43      	ldrb	r3, [r0, #13]
   1ef32:	06da      	lsls	r2, r3, #27
   1ef34:	b249      	sxtb	r1, r1
   1ef36:	d138      	bne.n	1efaa <z_set_prio+0x8e>
   1ef38:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1ef3a:	2d00      	cmp	r5, #0
   1ef3c:	d135      	bne.n	1efaa <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ef3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ef42:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ef44:	f005 ff64 	bl	24e10 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ef48:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1ef4a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1ef4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ef50:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1ef52:	4817      	ldr	r0, [pc, #92]	; (1efb0 <z_set_prio+0x94>)
   1ef54:	4603      	mov	r3, r0
   1ef56:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef5a:	429f      	cmp	r7, r3
   1ef5c:	bf18      	it	ne
   1ef5e:	463d      	movne	r5, r7
   1ef60:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ef62:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1ef64:	461a      	mov	r2, r3
   1ef66:	462b      	mov	r3, r5
   1ef68:	bf38      	it	cc
   1ef6a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ef6c:	b1c3      	cbz	r3, 1efa0 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1ef6e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1ef72:	42a9      	cmp	r1, r5
   1ef74:	d010      	beq.n	1ef98 <z_set_prio+0x7c>
		return b2 - b1;
   1ef76:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ef78:	2d00      	cmp	r5, #0
   1ef7a:	dd0d      	ble.n	1ef98 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1ef7c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ef7e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1ef82:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ef84:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1ef86:	2001      	movs	r0, #1
   1ef88:	f7ff fdf8 	bl	1eb7c <update_cache>
   1ef8c:	2001      	movs	r0, #1
	__asm__ volatile(
   1ef8e:	f386 8811 	msr	BASEPRI, r6
   1ef92:	f3bf 8f6f 	isb	sy
}
   1ef96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1ef98:	42bb      	cmp	r3, r7
   1ef9a:	d001      	beq.n	1efa0 <z_set_prio+0x84>
   1ef9c:	681b      	ldr	r3, [r3, #0]
   1ef9e:	e7e5      	b.n	1ef6c <z_set_prio+0x50>
	node->prev = tail;
   1efa0:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1efa4:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1efa6:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   1efa8:	e7ed      	b.n	1ef86 <z_set_prio+0x6a>
			thread->base.prio = prio;
   1efaa:	73a1      	strb	r1, [r4, #14]
   1efac:	2000      	movs	r0, #0
   1efae:	e7ee      	b.n	1ef8e <z_set_prio+0x72>
   1efb0:	200032a8 	.word	0x200032a8

0001efb4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1efb4:	4b04      	ldr	r3, [pc, #16]	; (1efc8 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1efb6:	2100      	movs	r1, #0
   1efb8:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1efbc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1efc0:	4608      	mov	r0, r1
   1efc2:	f7ff bd83 	b.w	1eacc <k_sched_time_slice_set>
   1efc6:	bf00      	nop
   1efc8:	200032a8 	.word	0x200032a8

0001efcc <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   1efcc:	4926      	ldr	r1, [pc, #152]	; (1f068 <z_impl_k_yield+0x9c>)
{
   1efce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1efd0:	688a      	ldr	r2, [r1, #8]
   1efd2:	4b26      	ldr	r3, [pc, #152]	; (1f06c <z_impl_k_yield+0xa0>)
   1efd4:	429a      	cmp	r2, r3
   1efd6:	d03d      	beq.n	1f054 <z_impl_k_yield+0x88>
	__asm__ volatile(
   1efd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1efdc:	f3ef 8511 	mrs	r5, BASEPRI
   1efe0:	f383 8811 	msr	BASEPRI, r3
   1efe4:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   1efe8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1efea:	7b43      	ldrb	r3, [r0, #13]
   1efec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1eff0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1eff2:	f005 ff0d 	bl	24e10 <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   1eff6:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1eff8:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1effa:	4608      	mov	r0, r1
   1effc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f000:	7353      	strb	r3, [r2, #13]
   1f002:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f006:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f008:	4283      	cmp	r3, r0
   1f00a:	bf08      	it	eq
   1f00c:	2300      	moveq	r3, #0
   1f00e:	2b00      	cmp	r3, #0
   1f010:	bf38      	it	cc
   1f012:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f014:	b1cb      	cbz	r3, 1f04a <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   1f016:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1f01a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1f01e:	42a7      	cmp	r7, r4
   1f020:	d00f      	beq.n	1f042 <z_impl_k_yield+0x76>
		return b2 - b1;
   1f022:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f024:	2c00      	cmp	r4, #0
   1f026:	dd0c      	ble.n	1f042 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   1f028:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1f02a:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1f02e:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1f030:	605a      	str	r2, [r3, #4]
		update_cache(1);
   1f032:	2001      	movs	r0, #1
   1f034:	f7ff fda2 	bl	1eb7c <update_cache>
   1f038:	4628      	mov	r0, r5
}
   1f03a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f03e:	f7f4 ba6f 	b.w	13520 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1f042:	42b3      	cmp	r3, r6
   1f044:	d001      	beq.n	1f04a <z_impl_k_yield+0x7e>
   1f046:	681b      	ldr	r3, [r3, #0]
   1f048:	e7e4      	b.n	1f014 <z_impl_k_yield+0x48>
	node->prev = tail;
   1f04a:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1f04e:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1f050:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   1f052:	e7ee      	b.n	1f032 <z_impl_k_yield+0x66>
   1f054:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f058:	f3ef 8011 	mrs	r0, BASEPRI
   1f05c:	f383 8811 	msr	BASEPRI, r3
   1f060:	f3bf 8f6f 	isb	sy
   1f064:	e7e9      	b.n	1f03a <z_impl_k_yield+0x6e>
   1f066:	bf00      	nop
   1f068:	200032a8 	.word	0x200032a8
   1f06c:	20002b80 	.word	0x20002b80

0001f070 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f070:	f1b1 3fff 	cmp.w	r1, #4294967295
   1f074:	bf08      	it	eq
   1f076:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1f07a:	b508      	push	{r3, lr}
   1f07c:	4602      	mov	r2, r0
   1f07e:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f080:	d106      	bne.n	1f090 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1f082:	4b0b      	ldr	r3, [pc, #44]	; (1f0b0 <z_impl_k_sleep+0x40>)
   1f084:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1f086:	f7ff fe25 	bl	1ecd4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1f08a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1f08e:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1f090:	4313      	orrs	r3, r2
   1f092:	d10a      	bne.n	1f0aa <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1f094:	f7ff ff9a 	bl	1efcc <z_impl_k_yield>
		return 0;
   1f098:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   1f09a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f09e:	fb80 2303 	smull	r2, r3, r0, r3
   1f0a2:	0bd0      	lsrs	r0, r2, #15
   1f0a4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1f0a8:	e7f1      	b.n	1f08e <z_impl_k_sleep+0x1e>
   1f0aa:	f7ff fdd9 	bl	1ec60 <z_tick_sleep.part.0>
   1f0ae:	e7f4      	b.n	1f09a <z_impl_k_sleep+0x2a>
   1f0b0:	200032a8 	.word	0x200032a8

0001f0b4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1f0b4:	4b01      	ldr	r3, [pc, #4]	; (1f0bc <z_impl_k_current_get+0x8>)
   1f0b6:	6898      	ldr	r0, [r3, #8]
   1f0b8:	4770      	bx	lr
   1f0ba:	bf00      	nop
   1f0bc:	200032a8 	.word	0x200032a8

0001f0c0 <z_impl_k_is_preempt_thread>:
   1f0c0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1f0c4:	b93b      	cbnz	r3, 1f0d6 <z_impl_k_is_preempt_thread+0x16>
   1f0c6:	4b05      	ldr	r3, [pc, #20]	; (1f0dc <z_impl_k_is_preempt_thread+0x1c>)
   1f0c8:	689b      	ldr	r3, [r3, #8]
   1f0ca:	89d8      	ldrh	r0, [r3, #14]
   1f0cc:	287f      	cmp	r0, #127	; 0x7f
   1f0ce:	bf8c      	ite	hi
   1f0d0:	2000      	movhi	r0, #0
   1f0d2:	2001      	movls	r0, #1
   1f0d4:	4770      	bx	lr
   1f0d6:	2000      	movs	r0, #0
}
   1f0d8:	4770      	bx	lr
   1f0da:	bf00      	nop
   1f0dc:	200032a8 	.word	0x200032a8

0001f0e0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1f0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0e4:	4604      	mov	r4, r0
   1f0e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f0ea:	f3ef 8611 	mrs	r6, BASEPRI
   1f0ee:	f383 8811 	msr	BASEPRI, r3
   1f0f2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1f0f6:	7b43      	ldrb	r3, [r0, #13]
   1f0f8:	071a      	lsls	r2, r3, #28
   1f0fa:	d505      	bpl.n	1f108 <z_thread_abort+0x28>
	__asm__ volatile(
   1f0fc:	f386 8811 	msr	BASEPRI, r6
   1f100:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1f104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1f108:	f023 0220 	bic.w	r2, r3, #32
   1f10c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1f110:	09d2      	lsrs	r2, r2, #7
   1f112:	d120      	bne.n	1f156 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1f114:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1f116:	68a3      	ldr	r3, [r4, #8]
   1f118:	b113      	cbz	r3, 1f120 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1f11a:	4620      	mov	r0, r4
   1f11c:	f005 fe80 	bl	24e20 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1f120:	f104 0018 	add.w	r0, r4, #24
   1f124:	f005 ff8c 	bl	25040 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1f128:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1f12c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1f130:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f132:	42bd      	cmp	r5, r7
   1f134:	d000      	beq.n	1f138 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f136:	b9b5      	cbnz	r5, 1f166 <z_thread_abort+0x86>
		update_cache(1);
   1f138:	2001      	movs	r0, #1
   1f13a:	f7ff fd1f 	bl	1eb7c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1f13e:	4b10      	ldr	r3, [pc, #64]	; (1f180 <z_thread_abort+0xa0>)
   1f140:	689b      	ldr	r3, [r3, #8]
   1f142:	42a3      	cmp	r3, r4
   1f144:	d1da      	bne.n	1f0fc <z_thread_abort+0x1c>
   1f146:	f3ef 8305 	mrs	r3, IPSR
   1f14a:	2b00      	cmp	r3, #0
   1f14c:	d1d6      	bne.n	1f0fc <z_thread_abort+0x1c>
   1f14e:	4630      	mov	r0, r6
   1f150:	f7f4 f9e6 	bl	13520 <arch_swap>
	return ret;
   1f154:	e7d2      	b.n	1f0fc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1f156:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1f15a:	f043 0308 	orr.w	r3, r3, #8
   1f15e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1f160:	f005 fe56 	bl	24e10 <sys_dlist_remove>
}
   1f164:	e7d7      	b.n	1f116 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1f166:	4628      	mov	r0, r5
   1f168:	f005 fe5a 	bl	24e20 <unpend_thread_no_timeout>
   1f16c:	f105 0018 	add.w	r0, r5, #24
   1f170:	f005 ff66 	bl	25040 <z_abort_timeout>
   1f174:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1f178:	4628      	mov	r0, r5
   1f17a:	f7ff fe79 	bl	1ee70 <ready_thread>
   1f17e:	e7d7      	b.n	1f130 <z_thread_abort+0x50>
   1f180:	200032a8 	.word	0x200032a8

0001f184 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1f184:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1f186:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1f18a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1f18c:	e9cd 6700 	strd	r6, r7, [sp]
   1f190:	f7ff fd52 	bl	1ec38 <z_pend_curr>

	if (data != NULL) {
   1f194:	b11c      	cbz	r4, 1f19e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1f196:	4b03      	ldr	r3, [pc, #12]	; (1f1a4 <z_sched_wait+0x20>)
   1f198:	689b      	ldr	r3, [r3, #8]
   1f19a:	695b      	ldr	r3, [r3, #20]
   1f19c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1f19e:	b002      	add	sp, #8
   1f1a0:	bdd0      	pop	{r4, r6, r7, pc}
   1f1a2:	bf00      	nop
   1f1a4:	200032a8 	.word	0x200032a8

0001f1a8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1f1a8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1f1aa:	4806      	ldr	r0, [pc, #24]	; (1f1c4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1f1ac:	4a06      	ldr	r2, [pc, #24]	; (1f1c8 <z_data_copy+0x20>)
   1f1ae:	4907      	ldr	r1, [pc, #28]	; (1f1cc <z_data_copy+0x24>)
   1f1b0:	1a12      	subs	r2, r2, r0
   1f1b2:	f003 f819 	bl	221e8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1f1b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1f1ba:	4a05      	ldr	r2, [pc, #20]	; (1f1d0 <z_data_copy+0x28>)
   1f1bc:	4905      	ldr	r1, [pc, #20]	; (1f1d4 <z_data_copy+0x2c>)
   1f1be:	4806      	ldr	r0, [pc, #24]	; (1f1d8 <z_data_copy+0x30>)
   1f1c0:	f003 b812 	b.w	221e8 <memcpy>
   1f1c4:	20000000 	.word	0x20000000
   1f1c8:	200009d8 	.word	0x200009d8
   1f1cc:	000287c0 	.word	0x000287c0
   1f1d0:	00000000 	.word	0x00000000
   1f1d4:	000287c0 	.word	0x000287c0
   1f1d8:	20000000 	.word	0x20000000

0001f1dc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1f1dc:	4b03      	ldr	r3, [pc, #12]	; (1f1ec <elapsed+0x10>)
   1f1de:	681b      	ldr	r3, [r3, #0]
   1f1e0:	b90b      	cbnz	r3, 1f1e6 <elapsed+0xa>
   1f1e2:	f7f3 bfe3 	b.w	131ac <sys_clock_elapsed>
}
   1f1e6:	2000      	movs	r0, #0
   1f1e8:	4770      	bx	lr
   1f1ea:	bf00      	nop
   1f1ec:	200032ec 	.word	0x200032ec

0001f1f0 <remove_timeout>:
{
   1f1f0:	b530      	push	{r4, r5, lr}
   1f1f2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f1f4:	b168      	cbz	r0, 1f212 <remove_timeout+0x22>
   1f1f6:	4a0a      	ldr	r2, [pc, #40]	; (1f220 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1f1f8:	6852      	ldr	r2, [r2, #4]
   1f1fa:	4290      	cmp	r0, r2
   1f1fc:	d009      	beq.n	1f212 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1f1fe:	b143      	cbz	r3, 1f212 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1f200:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1f204:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1f208:	1912      	adds	r2, r2, r4
   1f20a:	eb45 0101 	adc.w	r1, r5, r1
   1f20e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1f212:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1f214:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f216:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f218:	2300      	movs	r3, #0
	node->prev = NULL;
   1f21a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f21e:	bd30      	pop	{r4, r5, pc}
   1f220:	20000670 	.word	0x20000670

0001f224 <next_timeout>:

static int32_t next_timeout(void)
{
   1f224:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1f226:	4b13      	ldr	r3, [pc, #76]	; (1f274 <next_timeout+0x50>)
   1f228:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f22a:	429c      	cmp	r4, r3
   1f22c:	bf08      	it	eq
   1f22e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1f230:	f7ff ffd4 	bl	1f1dc <elapsed>
   1f234:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1f236:	b1bc      	cbz	r4, 1f268 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1f238:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1f23c:	1b40      	subs	r0, r0, r5
   1f23e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1f242:	2801      	cmp	r0, #1
   1f244:	f171 0300 	sbcs.w	r3, r1, #0
   1f248:	db11      	blt.n	1f26e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1f24a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1f24e:	2300      	movs	r3, #0
   1f250:	4282      	cmp	r2, r0
   1f252:	eb73 0401 	sbcs.w	r4, r3, r1
   1f256:	da00      	bge.n	1f25a <next_timeout+0x36>
   1f258:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1f25a:	4b07      	ldr	r3, [pc, #28]	; (1f278 <next_timeout+0x54>)
   1f25c:	691b      	ldr	r3, [r3, #16]
   1f25e:	b113      	cbz	r3, 1f266 <next_timeout+0x42>
   1f260:	4298      	cmp	r0, r3
   1f262:	bfa8      	it	ge
   1f264:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1f266:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1f268:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f26c:	e7f5      	b.n	1f25a <next_timeout+0x36>
   1f26e:	2000      	movs	r0, #0
   1f270:	e7f3      	b.n	1f25a <next_timeout+0x36>
   1f272:	bf00      	nop
   1f274:	20000670 	.word	0x20000670
   1f278:	200032a8 	.word	0x200032a8

0001f27c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f27c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f280:	bf08      	it	eq
   1f282:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1f286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f28a:	4604      	mov	r4, r0
   1f28c:	4692      	mov	sl, r2
   1f28e:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f290:	d073      	beq.n	1f37a <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1f292:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1f294:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f298:	f3ef 8511 	mrs	r5, BASEPRI
   1f29c:	f383 8811 	msr	BASEPRI, r3
   1f2a0:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1f2a4:	f06f 0301 	mvn.w	r3, #1
   1f2a8:	ebb3 080a 	subs.w	r8, r3, sl
   1f2ac:	f04f 32ff 	mov.w	r2, #4294967295
   1f2b0:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1f2b4:	f1b8 0f00 	cmp.w	r8, #0
   1f2b8:	f179 0100 	sbcs.w	r1, r9, #0
   1f2bc:	db1c      	blt.n	1f2f8 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1f2be:	4830      	ldr	r0, [pc, #192]	; (1f380 <z_add_timeout+0x104>)
   1f2c0:	e9d0 1000 	ldrd	r1, r0, [r0]
   1f2c4:	1a5b      	subs	r3, r3, r1
   1f2c6:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1f2ca:	ebb3 060a 	subs.w	r6, r3, sl
   1f2ce:	eb62 070b 	sbc.w	r7, r2, fp
   1f2d2:	2e01      	cmp	r6, #1
   1f2d4:	f177 0300 	sbcs.w	r3, r7, #0
   1f2d8:	bfbc      	itt	lt
   1f2da:	2601      	movlt	r6, #1
   1f2dc:	2700      	movlt	r7, #0
   1f2de:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1f2e2:	4a28      	ldr	r2, [pc, #160]	; (1f384 <z_add_timeout+0x108>)
   1f2e4:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f2e8:	4293      	cmp	r3, r2
   1f2ea:	d11e      	bne.n	1f32a <z_add_timeout+0xae>
	node->prev = tail;
   1f2ec:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1f2f0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1f2f4:	6054      	str	r4, [r2, #4]
}
   1f2f6:	e02d      	b.n	1f354 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1f2f8:	f7ff ff70 	bl	1f1dc <elapsed>
   1f2fc:	f11a 0301 	adds.w	r3, sl, #1
   1f300:	9300      	str	r3, [sp, #0]
   1f302:	f14b 0300 	adc.w	r3, fp, #0
   1f306:	9301      	str	r3, [sp, #4]
   1f308:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f30c:	1812      	adds	r2, r2, r0
   1f30e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1f312:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1f316:	e7e4      	b.n	1f2e2 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1f318:	ebb6 0008 	subs.w	r0, r6, r8
   1f31c:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1f320:	4563      	cmp	r3, ip
   1f322:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1f326:	d0e1      	beq.n	1f2ec <z_add_timeout+0x70>
   1f328:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1f32a:	2b00      	cmp	r3, #0
   1f32c:	d0de      	beq.n	1f2ec <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   1f32e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1f332:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1f336:	4546      	cmp	r6, r8
   1f338:	eb77 0109 	sbcs.w	r1, r7, r9
   1f33c:	daec      	bge.n	1f318 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   1f33e:	ebb8 0006 	subs.w	r0, r8, r6
   1f342:	eb69 0107 	sbc.w	r1, r9, r7
   1f346:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1f34a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1f34c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1f350:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1f352:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1f354:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f356:	4293      	cmp	r3, r2
   1f358:	d00b      	beq.n	1f372 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1f35a:	429c      	cmp	r4, r3
   1f35c:	d109      	bne.n	1f372 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1f35e:	f7ff ff61 	bl	1f224 <next_timeout>

			if (next_time == 0 ||
   1f362:	b118      	cbz	r0, 1f36c <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   1f364:	4b08      	ldr	r3, [pc, #32]	; (1f388 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1f366:	691b      	ldr	r3, [r3, #16]
   1f368:	4283      	cmp	r3, r0
   1f36a:	d002      	beq.n	1f372 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   1f36c:	2100      	movs	r1, #0
   1f36e:	f7f3 feeb 	bl	13148 <sys_clock_set_timeout>
	__asm__ volatile(
   1f372:	f385 8811 	msr	BASEPRI, r5
   1f376:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1f37a:	b003      	add	sp, #12
   1f37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f380:	20002d20 	.word	0x20002d20
   1f384:	20000670 	.word	0x20000670
   1f388:	200032a8 	.word	0x200032a8

0001f38c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1f38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f390:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1f392:	f7ff fd2b 	bl	1edec <z_time_slice>
	__asm__ volatile(
   1f396:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f39a:	f3ef 8411 	mrs	r4, BASEPRI
   1f39e:	f383 8811 	msr	BASEPRI, r3
   1f3a2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1f3a6:	4d2c      	ldr	r5, [pc, #176]	; (1f458 <sys_clock_announce+0xcc>)
   1f3a8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1f45c <sys_clock_announce+0xd0>
	return list->head == list;
   1f3ac:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1f460 <sys_clock_announce+0xd4>
   1f3b0:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1f3b2:	4651      	mov	r1, sl
   1f3b4:	f8d5 c000 	ldr.w	ip, [r5]
   1f3b8:	f8db 0000 	ldr.w	r0, [fp]
   1f3bc:	4662      	mov	r2, ip
   1f3be:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f3c0:	4558      	cmp	r0, fp
   1f3c2:	e9da 8900 	ldrd	r8, r9, [sl]
   1f3c6:	e9cd 2300 	strd	r2, r3, [sp]
   1f3ca:	d00d      	beq.n	1f3e8 <sys_clock_announce+0x5c>
   1f3cc:	b160      	cbz	r0, 1f3e8 <sys_clock_announce+0x5c>
   1f3ce:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1f3d2:	45b4      	cmp	ip, r6
   1f3d4:	41bb      	sbcs	r3, r7
   1f3d6:	da1e      	bge.n	1f416 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1f3d8:	9b00      	ldr	r3, [sp, #0]
   1f3da:	ebb6 0c03 	subs.w	ip, r6, r3
   1f3de:	9b01      	ldr	r3, [sp, #4]
   1f3e0:	eb67 0603 	sbc.w	r6, r7, r3
   1f3e4:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1f3e8:	9b00      	ldr	r3, [sp, #0]
   1f3ea:	eb13 0208 	adds.w	r2, r3, r8
   1f3ee:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1f3f0:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1f3f4:	eb43 0309 	adc.w	r3, r3, r9
   1f3f8:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1f3fc:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1f3fe:	f7ff ff11 	bl	1f224 <next_timeout>
   1f402:	4631      	mov	r1, r6
   1f404:	f7f3 fea0 	bl	13148 <sys_clock_set_timeout>
	__asm__ volatile(
   1f408:	f384 8811 	msr	BASEPRI, r4
   1f40c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1f410:	b003      	add	sp, #12
   1f412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1f416:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1f41a:	f04f 0200 	mov.w	r2, #0
   1f41e:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1f422:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1f426:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1f42a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1f42e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1f432:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1f434:	f7ff fedc 	bl	1f1f0 <remove_timeout>
   1f438:	f384 8811 	msr	BASEPRI, r4
   1f43c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1f440:	6883      	ldr	r3, [r0, #8]
   1f442:	4798      	blx	r3
	__asm__ volatile(
   1f444:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f448:	f3ef 8411 	mrs	r4, BASEPRI
   1f44c:	f383 8811 	msr	BASEPRI, r3
   1f450:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1f454:	4901      	ldr	r1, [pc, #4]	; (1f45c <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1f456:	e7ad      	b.n	1f3b4 <sys_clock_announce+0x28>
   1f458:	200032ec 	.word	0x200032ec
   1f45c:	20002d20 	.word	0x20002d20
   1f460:	20000670 	.word	0x20000670

0001f464 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1f464:	b510      	push	{r4, lr}
   1f466:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f46a:	f3ef 8411 	mrs	r4, BASEPRI
   1f46e:	f383 8811 	msr	BASEPRI, r3
   1f472:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1f476:	f7f3 fe99 	bl	131ac <sys_clock_elapsed>
   1f47a:	4b06      	ldr	r3, [pc, #24]	; (1f494 <sys_clock_tick_get+0x30>)
   1f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f480:	1812      	adds	r2, r2, r0
   1f482:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1f486:	f384 8811 	msr	BASEPRI, r4
   1f48a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1f48e:	4610      	mov	r0, r2
   1f490:	4619      	mov	r1, r3
   1f492:	bd10      	pop	{r4, pc}
   1f494:	20002d20 	.word	0x20002d20

0001f498 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1f49a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1f49e:	1c56      	adds	r6, r2, #1
   1f4a0:	f143 0700 	adc.w	r7, r3, #0
   1f4a4:	2f00      	cmp	r7, #0
   1f4a6:	bf08      	it	eq
   1f4a8:	2e02      	cmpeq	r6, #2
{
   1f4aa:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1f4ac:	d302      	bcc.n	1f4b4 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f4ae:	490d      	ldr	r1, [pc, #52]	; (1f4e4 <z_timer_expiration_handler+0x4c>)
   1f4b0:	f7ff fee4 	bl	1f27c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1f4b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f4b6:	3301      	adds	r3, #1
   1f4b8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1f4ba:	6a23      	ldr	r3, [r4, #32]
   1f4bc:	b10b      	cbz	r3, 1f4c2 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1f4be:	4620      	mov	r0, r4
   1f4c0:	4798      	blx	r3
	return list->head == list;
   1f4c2:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f4c6:	42a5      	cmp	r5, r4
   1f4c8:	d00a      	beq.n	1f4e0 <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1f4ca:	b14d      	cbz	r5, 1f4e0 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1f4cc:	4628      	mov	r0, r5
   1f4ce:	f005 fcba 	bl	24e46 <z_unpend_thread_no_timeout>
   1f4d2:	2300      	movs	r3, #0
   1f4d4:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1f4d6:	4628      	mov	r0, r5
}
   1f4d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1f4dc:	f005 bd24 	b.w	24f28 <z_ready_thread>
}
   1f4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4e2:	bf00      	nop
   1f4e4:	0001f499 	.word	0x0001f499

0001f4e8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1f4e8:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1f4ec:	4619      	mov	r1, r3
   1f4ee:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1f4f0:	1c4c      	adds	r4, r1, #1
{
   1f4f2:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1f4f4:	bf08      	it	eq
   1f4f6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1f4fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f4fe:	4680      	mov	r8, r0
   1f500:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1f502:	d04c      	beq.n	1f59e <z_impl_k_timer_start+0xb6>
   1f504:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1f506:	1c6b      	adds	r3, r5, #1
   1f508:	bf08      	it	eq
   1f50a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1f50e:	4614      	mov	r4, r2
   1f510:	d019      	beq.n	1f546 <z_impl_k_timer_start+0x5e>
   1f512:	ea54 0305 	orrs.w	r3, r4, r5
   1f516:	d016      	beq.n	1f546 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1f518:	f06f 0301 	mvn.w	r3, #1
   1f51c:	ebb3 0a02 	subs.w	sl, r3, r2
   1f520:	f04f 33ff 	mov.w	r3, #4294967295
   1f524:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1f528:	f1ba 0f00 	cmp.w	sl, #0
   1f52c:	f17b 0300 	sbcs.w	r3, fp, #0
   1f530:	da09      	bge.n	1f546 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1f532:	f112 34ff 	adds.w	r4, r2, #4294967295
   1f536:	f145 35ff 	adc.w	r5, r5, #4294967295
   1f53a:	2c01      	cmp	r4, #1
   1f53c:	f175 0300 	sbcs.w	r3, r5, #0
   1f540:	bfbc      	itt	lt
   1f542:	2401      	movlt	r4, #1
   1f544:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1f546:	f06f 0301 	mvn.w	r3, #1
   1f54a:	1a1b      	subs	r3, r3, r0
   1f54c:	9300      	str	r3, [sp, #0]
   1f54e:	f04f 33ff 	mov.w	r3, #4294967295
   1f552:	eb63 0301 	sbc.w	r3, r3, r1
   1f556:	9301      	str	r3, [sp, #4]
   1f558:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f55c:	2a00      	cmp	r2, #0
   1f55e:	f173 0300 	sbcs.w	r3, r3, #0
   1f562:	da0c      	bge.n	1f57e <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1f564:	f110 38ff 	adds.w	r8, r0, #4294967295
   1f568:	f141 39ff 	adc.w	r9, r1, #4294967295
   1f56c:	f1b8 0f00 	cmp.w	r8, #0
   1f570:	f179 0300 	sbcs.w	r3, r9, #0
   1f574:	bfbc      	itt	lt
   1f576:	f04f 0800 	movlt.w	r8, #0
   1f57a:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1f57e:	4630      	mov	r0, r6
   1f580:	f005 fd5e 	bl	25040 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1f584:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f586:	4907      	ldr	r1, [pc, #28]	; (1f5a4 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1f588:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f58a:	4642      	mov	r2, r8
   1f58c:	464b      	mov	r3, r9
   1f58e:	4630      	mov	r0, r6
	timer->period = period;
   1f590:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1f594:	b002      	add	sp, #8
   1f596:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f59a:	f7ff be6f 	b.w	1f27c <z_add_timeout>
}
   1f59e:	b002      	add	sp, #8
   1f5a0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1f5a4:	0001f499 	.word	0x0001f499

0001f5a8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1f5a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f5ac:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1f5ae:	4b29      	ldr	r3, [pc, #164]	; (1f654 <z_impl_k_poll+0xac>)
   1f5b0:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1f5b2:	2301      	movs	r3, #1
   1f5b4:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1f5b8:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1f5bc:	ea52 0307 	orrs.w	r3, r2, r7
{
   1f5c0:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1f5c2:	bf0c      	ite	eq
   1f5c4:	2301      	moveq	r3, #1
   1f5c6:	2300      	movne	r3, #0
   1f5c8:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1f5cc:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1f5ce:	f005 fe33 	bl	25238 <register_events>
   1f5d2:	4681      	mov	r9, r0
	__asm__ volatile(
   1f5d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f5d8:	f3ef 8a11 	mrs	sl, BASEPRI
   1f5dc:	f383 8811 	msr	BASEPRI, r3
   1f5e0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1f5e4:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1f5e8:	b964      	cbnz	r4, 1f604 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1f5ea:	4601      	mov	r1, r0
   1f5ec:	4652      	mov	r2, sl
   1f5ee:	4640      	mov	r0, r8
   1f5f0:	f005 fdc0 	bl	25174 <clear_event_registrations>
	__asm__ volatile(
   1f5f4:	f38a 8811 	msr	BASEPRI, sl
   1f5f8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1f5fc:	4620      	mov	r0, r4
   1f5fe:	b002      	add	sp, #8
   1f600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1f604:	2300      	movs	r3, #0
   1f606:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f60a:	ea56 0307 	orrs.w	r3, r6, r7
   1f60e:	d106      	bne.n	1f61e <z_impl_k_poll+0x76>
   1f610:	f38a 8811 	msr	BASEPRI, sl
   1f614:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1f618:	f06f 040a 	mvn.w	r4, #10
   1f61c:	e7ee      	b.n	1f5fc <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f61e:	e9cd 6700 	strd	r6, r7, [sp]
   1f622:	4a0d      	ldr	r2, [pc, #52]	; (1f658 <z_impl_k_poll+0xb0>)
   1f624:	480d      	ldr	r0, [pc, #52]	; (1f65c <z_impl_k_poll+0xb4>)
   1f626:	4651      	mov	r1, sl
   1f628:	f7ff fb06 	bl	1ec38 <z_pend_curr>
   1f62c:	4604      	mov	r4, r0
	__asm__ volatile(
   1f62e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f632:	f3ef 8511 	mrs	r5, BASEPRI
   1f636:	f383 8811 	msr	BASEPRI, r3
   1f63a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1f63e:	462a      	mov	r2, r5
   1f640:	4649      	mov	r1, r9
   1f642:	4640      	mov	r0, r8
   1f644:	f005 fd96 	bl	25174 <clear_event_registrations>
	__asm__ volatile(
   1f648:	f385 8811 	msr	BASEPRI, r5
   1f64c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1f650:	e7d4      	b.n	1f5fc <z_impl_k_poll+0x54>
   1f652:	bf00      	nop
   1f654:	200032a8 	.word	0x200032a8
   1f658:	20000678 	.word	0x20000678
   1f65c:	20004e76 	.word	0x20004e76

0001f660 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1f660:	b538      	push	{r3, r4, r5, lr}
   1f662:	4603      	mov	r3, r0
	__asm__ volatile(
   1f664:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f668:	f3ef 8511 	mrs	r5, BASEPRI
   1f66c:	f382 8811 	msr	BASEPRI, r2
   1f670:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1f674:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1f676:	2101      	movs	r1, #1
   1f678:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1f67a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1f67c:	4283      	cmp	r3, r0
   1f67e:	d106      	bne.n	1f68e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1f680:	f385 8811 	msr	BASEPRI, r5
   1f684:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1f688:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1f68a:	4620      	mov	r0, r4
   1f68c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1f68e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f692:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f694:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f696:	2300      	movs	r3, #0
	node->prev = NULL;
   1f698:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f69c:	f005 fe43 	bl	25326 <signal_poll_event>
	z_reschedule(&lock, key);
   1f6a0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f6a2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1f6a4:	4801      	ldr	r0, [pc, #4]	; (1f6ac <z_impl_k_poll_signal_raise+0x4c>)
   1f6a6:	f7ff fa43 	bl	1eb30 <z_reschedule>
	return rc;
   1f6aa:	e7ee      	b.n	1f68a <z_impl_k_poll_signal_raise+0x2a>
   1f6ac:	20004e76 	.word	0x20004e76

0001f6b0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1f6b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f6b2:	4606      	mov	r6, r0
   1f6b4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1f6b6:	f005 f9d6 	bl	24a66 <k_is_in_isr>
   1f6ba:	b980      	cbnz	r0, 1f6de <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1f6bc:	4b0b      	ldr	r3, [pc, #44]	; (1f6ec <z_thread_aligned_alloc+0x3c>)
   1f6be:	689b      	ldr	r3, [r3, #8]
   1f6c0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1f6c2:	b184      	cbz	r4, 1f6e6 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1f6c4:	2204      	movs	r2, #4
   1f6c6:	18aa      	adds	r2, r5, r2
   1f6c8:	d209      	bcs.n	1f6de <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1f6ca:	2000      	movs	r0, #0
   1f6cc:	2100      	movs	r1, #0
   1f6ce:	e9cd 0100 	strd	r0, r1, [sp]
   1f6d2:	f046 0104 	orr.w	r1, r6, #4
   1f6d6:	4620      	mov	r0, r4
   1f6d8:	f005 f91d 	bl	24916 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1f6dc:	b908      	cbnz	r0, 1f6e2 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1f6de:	2400      	movs	r4, #0
	}

	return ret;
   1f6e0:	e001      	b.n	1f6e6 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   1f6e2:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1f6e4:	1d04      	adds	r4, r0, #4
}
   1f6e6:	4620      	mov	r0, r4
   1f6e8:	b002      	add	sp, #8
   1f6ea:	bd70      	pop	{r4, r5, r6, pc}
   1f6ec:	200032a8 	.word	0x200032a8

0001f6f0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1f6f0:	4a02      	ldr	r2, [pc, #8]	; (1f6fc <boot_banner+0xc>)
   1f6f2:	4903      	ldr	r1, [pc, #12]	; (1f700 <boot_banner+0x10>)
   1f6f4:	4803      	ldr	r0, [pc, #12]	; (1f704 <boot_banner+0x14>)
   1f6f6:	f000 b8c4 	b.w	1f882 <printk>
   1f6fa:	bf00      	nop
   1f6fc:	00026462 	.word	0x00026462
   1f700:	00028789 	.word	0x00028789
   1f704:	00028799 	.word	0x00028799

0001f708 <hrs_init>:
	ARG_UNUSED(dev);

	hrs_blsc = 0x06;

	return 0;
}
   1f708:	2000      	movs	r0, #0
   1f70a:	4770      	bx	lr

0001f70c <bt_count_bonds>:
	if ((*bond_cnt) < 0)
   1f70c:	680b      	ldr	r3, [r1, #0]
   1f70e:	2b00      	cmp	r3, #0
	(*bond_cnt)++;
   1f710:	bfa4      	itt	ge
   1f712:	3301      	addge	r3, #1
   1f714:	600b      	strge	r3, [r1, #0]
}
   1f716:	4770      	bx	lr

0001f718 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1f718:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1f71a:	f04f 0c0a 	mov.w	ip, #10
{
   1f71e:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   1f720:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   1f722:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   1f724:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   1f726:	b111      	cbz	r1, 1f72e <u8_to_dec+0x16>
   1f728:	3e01      	subs	r6, #1
   1f72a:	d101      	bne.n	1f730 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1f72c:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   1f72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1f730:	42a2      	cmp	r2, r4
		digit = value / divisor;
   1f732:	fbb2 f7f4 	udiv	r7, r2, r4
   1f736:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1f738:	d202      	bcs.n	1f740 <u8_to_dec+0x28>
   1f73a:	2c01      	cmp	r4, #1
   1f73c:	d000      	beq.n	1f740 <u8_to_dec+0x28>
   1f73e:	b130      	cbz	r0, 1f74e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1f740:	3330      	adds	r3, #48	; 0x30
   1f742:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   1f746:	3901      	subs	r1, #1
			num_digits++;
   1f748:	1c43      	adds	r3, r0, #1
			buflen--;
   1f74a:	b2c9      	uxtb	r1, r1
			num_digits++;
   1f74c:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   1f74e:	fb04 2217 	mls	r2, r4, r7, r2
   1f752:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1f754:	fbb4 f4fc 	udiv	r4, r4, ip
   1f758:	e7e5      	b.n	1f726 <u8_to_dec+0xe>

0001f75a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1f75a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1f75e:	b2db      	uxtb	r3, r3
   1f760:	2b09      	cmp	r3, #9
   1f762:	d802      	bhi.n	1f76a <char2hex+0x10>
		*x = c - '0';
   1f764:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1f766:	2000      	movs	r0, #0
   1f768:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1f76a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1f76e:	2b05      	cmp	r3, #5
   1f770:	d802      	bhi.n	1f778 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1f772:	3857      	subs	r0, #87	; 0x57
   1f774:	7008      	strb	r0, [r1, #0]
   1f776:	e7f6      	b.n	1f766 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1f778:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1f77c:	2b05      	cmp	r3, #5
   1f77e:	d801      	bhi.n	1f784 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1f780:	3837      	subs	r0, #55	; 0x37
   1f782:	e7f7      	b.n	1f774 <char2hex+0x1a>
		return -EINVAL;
   1f784:	f06f 0015 	mvn.w	r0, #21
}
   1f788:	4770      	bx	lr

0001f78a <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1f78a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f78c:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1f78e:	f001 0001 	and.w	r0, r1, #1
   1f792:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1f796:	429d      	cmp	r5, r3
   1f798:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1f79c:	d903      	bls.n	1f7a6 <hex2bin+0x1c>
		return 0;
   1f79e:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1f7a0:	4628      	mov	r0, r5
   1f7a2:	b003      	add	sp, #12
   1f7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1f7a6:	b158      	cbz	r0, 1f7c0 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1f7a8:	7820      	ldrb	r0, [r4, #0]
   1f7aa:	f10d 0107 	add.w	r1, sp, #7
   1f7ae:	f7ff ffd4 	bl	1f75a <char2hex>
   1f7b2:	2800      	cmp	r0, #0
   1f7b4:	dbf3      	blt.n	1f79e <hex2bin+0x14>
		buf[0] = dec;
   1f7b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f7ba:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   1f7be:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1f7c0:	3401      	adds	r4, #1
   1f7c2:	4416      	add	r6, r2
   1f7c4:	42b2      	cmp	r2, r6
   1f7c6:	d0eb      	beq.n	1f7a0 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1f7c8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1f7cc:	f10d 0107 	add.w	r1, sp, #7
   1f7d0:	f7ff ffc3 	bl	1f75a <char2hex>
   1f7d4:	2800      	cmp	r0, #0
   1f7d6:	dbe2      	blt.n	1f79e <hex2bin+0x14>
		buf[i] = dec << 4;
   1f7d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f7dc:	011b      	lsls	r3, r3, #4
   1f7de:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1f7e0:	f814 0b02 	ldrb.w	r0, [r4], #2
   1f7e4:	f10d 0107 	add.w	r1, sp, #7
   1f7e8:	f7ff ffb7 	bl	1f75a <char2hex>
   1f7ec:	2800      	cmp	r0, #0
   1f7ee:	dbd6      	blt.n	1f79e <hex2bin+0x14>
		buf[i] += dec;
   1f7f0:	7813      	ldrb	r3, [r2, #0]
   1f7f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1f7f6:	440b      	add	r3, r1
   1f7f8:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1f7fc:	e7e2      	b.n	1f7c4 <hex2bin+0x3a>

0001f7fe <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f7fe:	4603      	mov	r3, r0
   1f800:	b140      	cbz	r0, 1f814 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f802:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f804:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f808:	2a02      	cmp	r2, #2
   1f80a:	d006      	beq.n	1f81a <sys_notify_validate+0x1c>
   1f80c:	2a03      	cmp	r2, #3
   1f80e:	d004      	beq.n	1f81a <sys_notify_validate+0x1c>
   1f810:	2a01      	cmp	r2, #1
   1f812:	d005      	beq.n	1f820 <sys_notify_validate+0x22>
		return -EINVAL;
   1f814:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f818:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f81a:	681a      	ldr	r2, [r3, #0]
   1f81c:	2a00      	cmp	r2, #0
   1f81e:	d0f9      	beq.n	1f814 <sys_notify_validate+0x16>
		notify->result = 0;
   1f820:	2000      	movs	r0, #0
   1f822:	6098      	str	r0, [r3, #8]
   1f824:	4770      	bx	lr

0001f826 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f826:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f828:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f82c:	2a02      	cmp	r2, #2
{
   1f82e:	b510      	push	{r4, lr}
   1f830:	4603      	mov	r3, r0
	notify->result = res;
   1f832:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f834:	d00a      	beq.n	1f84c <sys_notify_finalize+0x26>
   1f836:	2a03      	cmp	r2, #3
   1f838:	d10b      	bne.n	1f852 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f83a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f83c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f83e:	2200      	movs	r2, #0
   1f840:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f842:	b108      	cbz	r0, 1f848 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1f844:	f7ff ff0c 	bl	1f660 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f848:	4620      	mov	r0, r4
   1f84a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f84c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f84e:	2400      	movs	r4, #0
		break;
   1f850:	e7f5      	b.n	1f83e <sys_notify_finalize+0x18>
	switch (method) {
   1f852:	2400      	movs	r4, #0
   1f854:	4620      	mov	r0, r4
   1f856:	e7f2      	b.n	1f83e <sys_notify_finalize+0x18>

0001f858 <arch_printk_char_out>:
}
   1f858:	2000      	movs	r0, #0
   1f85a:	4770      	bx	lr

0001f85c <str_out>:
{
   1f85c:	b530      	push	{r4, r5, lr}
   1f85e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f860:	680c      	ldr	r4, [r1, #0]
   1f862:	1c55      	adds	r5, r2, #1
   1f864:	b114      	cbz	r4, 1f86c <str_out+0x10>
   1f866:	684b      	ldr	r3, [r1, #4]
   1f868:	4293      	cmp	r3, r2
   1f86a:	dc01      	bgt.n	1f870 <str_out+0x14>
		ctx->count++;
   1f86c:	608d      	str	r5, [r1, #8]
}
   1f86e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1f870:	3b01      	subs	r3, #1
   1f872:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1f874:	bf08      	it	eq
   1f876:	2200      	moveq	r2, #0
   1f878:	608d      	str	r5, [r1, #8]
   1f87a:	bf0c      	ite	eq
   1f87c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1f87e:	54a0      	strbne	r0, [r4, r2]
   1f880:	e7f5      	b.n	1f86e <str_out+0x12>

0001f882 <printk>:
{
   1f882:	b40f      	push	{r0, r1, r2, r3}
   1f884:	b507      	push	{r0, r1, r2, lr}
   1f886:	a904      	add	r1, sp, #16
   1f888:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1f88c:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   1f88e:	f000 fca9 	bl	201e4 <z_log_printk>
}
   1f892:	b003      	add	sp, #12
   1f894:	f85d eb04 	ldr.w	lr, [sp], #4
   1f898:	b004      	add	sp, #16
   1f89a:	4770      	bx	lr

0001f89c <snprintk>:
{
   1f89c:	b40c      	push	{r2, r3}
   1f89e:	b507      	push	{r0, r1, r2, lr}
   1f8a0:	ab04      	add	r3, sp, #16
   1f8a2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1f8a6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1f8a8:	f7f1 f8ae 	bl	10a08 <vsnprintk>
}
   1f8ac:	b003      	add	sp, #12
   1f8ae:	f85d eb04 	ldr.w	lr, [sp], #4
   1f8b2:	b002      	add	sp, #8
   1f8b4:	4770      	bx	lr

0001f8b6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f8b6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f8b8:	f013 0307 	ands.w	r3, r3, #7
   1f8bc:	d105      	bne.n	1f8ca <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f8be:	6803      	ldr	r3, [r0, #0]
   1f8c0:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1f8c2:	bf0c      	ite	eq
   1f8c4:	2000      	moveq	r0, #0
   1f8c6:	2003      	movne	r0, #3
   1f8c8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f8ca:	2b02      	cmp	r3, #2
   1f8cc:	d105      	bne.n	1f8da <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f8ce:	8b43      	ldrh	r3, [r0, #26]
   1f8d0:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1f8d2:	bf14      	ite	ne
   1f8d4:	2000      	movne	r0, #0
   1f8d6:	2004      	moveq	r0, #4
   1f8d8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f8da:	2b01      	cmp	r3, #1
   1f8dc:	d105      	bne.n	1f8ea <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f8de:	6803      	ldr	r3, [r0, #0]
   1f8e0:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1f8e2:	bf0c      	ite	eq
   1f8e4:	2000      	moveq	r0, #0
   1f8e6:	2005      	movne	r0, #5
   1f8e8:	4770      	bx	lr
	int evt = EVT_NOP;
   1f8ea:	2000      	movs	r0, #0
}
   1f8ec:	4770      	bx	lr

0001f8ee <notify_one>:
{
   1f8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8f2:	460d      	mov	r5, r1
   1f8f4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f8f6:	4619      	mov	r1, r3
   1f8f8:	1d28      	adds	r0, r5, #4
{
   1f8fa:	4690      	mov	r8, r2
   1f8fc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f8fe:	f7ff ff92 	bl	1f826 <sys_notify_finalize>
	if (cb) {
   1f902:	4604      	mov	r4, r0
   1f904:	b138      	cbz	r0, 1f916 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f906:	4633      	mov	r3, r6
   1f908:	4642      	mov	r2, r8
   1f90a:	4629      	mov	r1, r5
   1f90c:	4638      	mov	r0, r7
   1f90e:	46a4      	mov	ip, r4
}
   1f910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f914:	4760      	bx	ip
}
   1f916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f91a <transition_complete>:
{
   1f91a:	b410      	push	{r4}
	__asm__ volatile(
   1f91c:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f920:	f3ef 8211 	mrs	r2, BASEPRI
   1f924:	f384 8811 	msr	BASEPRI, r4
   1f928:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f92c:	6141      	str	r1, [r0, #20]
}
   1f92e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f930:	2101      	movs	r1, #1
   1f932:	f7f1 b87d 	b.w	10a30 <process_event>

0001f936 <validate_args>:
{
   1f936:	b510      	push	{r4, lr}
   1f938:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f93a:	b140      	cbz	r0, 1f94e <validate_args+0x18>
   1f93c:	b139      	cbz	r1, 1f94e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1f93e:	1d08      	adds	r0, r1, #4
   1f940:	f7ff ff5d 	bl	1f7fe <sys_notify_validate>
	if ((rv == 0)
   1f944:	b928      	cbnz	r0, 1f952 <validate_args+0x1c>
	    && ((cli->notify.flags
   1f946:	68a3      	ldr	r3, [r4, #8]
   1f948:	f033 0303 	bics.w	r3, r3, #3
   1f94c:	d001      	beq.n	1f952 <validate_args+0x1c>
		rv = -EINVAL;
   1f94e:	f06f 0015 	mvn.w	r0, #21
}
   1f952:	bd10      	pop	{r4, pc}

0001f954 <onoff_manager_init>:
{
   1f954:	b538      	push	{r3, r4, r5, lr}
   1f956:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f958:	4605      	mov	r5, r0
   1f95a:	b158      	cbz	r0, 1f974 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f95c:	b151      	cbz	r1, 1f974 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f95e:	680b      	ldr	r3, [r1, #0]
   1f960:	b143      	cbz	r3, 1f974 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f962:	684b      	ldr	r3, [r1, #4]
   1f964:	b133      	cbz	r3, 1f974 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f966:	221c      	movs	r2, #28
   1f968:	2100      	movs	r1, #0
   1f96a:	f002 fc68 	bl	2223e <memset>
   1f96e:	612c      	str	r4, [r5, #16]
	return 0;
   1f970:	2000      	movs	r0, #0
}
   1f972:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f974:	f06f 0015 	mvn.w	r0, #21
   1f978:	e7fb      	b.n	1f972 <onoff_manager_init+0x1e>

0001f97a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f97a:	b570      	push	{r4, r5, r6, lr}
   1f97c:	4604      	mov	r4, r0
   1f97e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f980:	f7ff ffd9 	bl	1f936 <validate_args>

	if (rv < 0) {
   1f984:	1e05      	subs	r5, r0, #0
   1f986:	db31      	blt.n	1f9ec <onoff_request+0x72>
   1f988:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f98c:	f3ef 8111 	mrs	r1, BASEPRI
   1f990:	f383 8811 	msr	BASEPRI, r3
   1f994:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f998:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f99a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f99c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f9a0:	42ab      	cmp	r3, r5
   1f9a2:	f000 0207 	and.w	r2, r0, #7
   1f9a6:	d02e      	beq.n	1fa06 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f9a8:	2a02      	cmp	r2, #2
   1f9aa:	d10e      	bne.n	1f9ca <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f9ac:	3301      	adds	r3, #1
   1f9ae:	8363      	strh	r3, [r4, #26]
	rv = state;
   1f9b0:	4615      	mov	r5, r2
		notify = true;
   1f9b2:	2301      	movs	r3, #1
	__asm__ volatile(
   1f9b4:	f381 8811 	msr	BASEPRI, r1
   1f9b8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f9bc:	b1b3      	cbz	r3, 1f9ec <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1f9be:	2300      	movs	r3, #0
   1f9c0:	4631      	mov	r1, r6
   1f9c2:	4620      	mov	r0, r4
   1f9c4:	f7ff ff93 	bl	1f8ee <notify_one>
   1f9c8:	e010      	b.n	1f9ec <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1f9ca:	0783      	lsls	r3, r0, #30
   1f9cc:	d001      	beq.n	1f9d2 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f9ce:	2a06      	cmp	r2, #6
   1f9d0:	d10e      	bne.n	1f9f0 <onoff_request+0x76>
	parent->next = child;
   1f9d2:	2300      	movs	r3, #0
   1f9d4:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1f9d6:	6863      	ldr	r3, [r4, #4]
   1f9d8:	b993      	cbnz	r3, 1fa00 <onoff_request+0x86>
	list->head = node;
   1f9da:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1f9de:	4615      	mov	r5, r2
   1f9e0:	b962      	cbnz	r2, 1f9fc <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1f9e2:	460a      	mov	r2, r1
   1f9e4:	4620      	mov	r0, r4
   1f9e6:	2102      	movs	r1, #2
   1f9e8:	f7f1 f822 	bl	10a30 <process_event>
		}
	}

	return rv;
}
   1f9ec:	4628      	mov	r0, r5
   1f9ee:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1f9f0:	2a05      	cmp	r2, #5
   1f9f2:	bf0c      	ite	eq
   1f9f4:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1f9f8:	f06f 0504 	mvnne.w	r5, #4
   1f9fc:	2300      	movs	r3, #0
   1f9fe:	e7d9      	b.n	1f9b4 <onoff_request+0x3a>
	parent->next = child;
   1fa00:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1fa02:	6066      	str	r6, [r4, #4]
}
   1fa04:	e7eb      	b.n	1f9de <onoff_request+0x64>
		rv = -EAGAIN;
   1fa06:	f06f 050a 	mvn.w	r5, #10
   1fa0a:	e7f7      	b.n	1f9fc <onoff_request+0x82>

0001fa0c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1fa0c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fa0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa12:	f3ef 8211 	mrs	r2, BASEPRI
   1fa16:	f383 8811 	msr	BASEPRI, r3
   1fa1a:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fa1e:	8b04      	ldrh	r4, [r0, #24]
   1fa20:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1fa24:	2c02      	cmp	r4, #2
   1fa26:	d00a      	beq.n	1fa3e <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1fa28:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1fa2a:	bf0c      	ite	eq
   1fa2c:	f06f 0004 	mvneq.w	r0, #4
   1fa30:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1fa34:	f382 8811 	msr	BASEPRI, r2
   1fa38:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1fa3c:	e008      	b.n	1fa50 <onoff_release+0x44>
	mgr->refs -= 1U;
   1fa3e:	8b43      	ldrh	r3, [r0, #26]
   1fa40:	3b01      	subs	r3, #1
   1fa42:	b29b      	uxth	r3, r3
   1fa44:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1fa46:	b923      	cbnz	r3, 1fa52 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1fa48:	4621      	mov	r1, r4
   1fa4a:	f7f0 fff1 	bl	10a30 <process_event>
	int rv = state;
   1fa4e:	4620      	mov	r0, r4
}
   1fa50:	bd10      	pop	{r4, pc}
	int rv = state;
   1fa52:	4620      	mov	r0, r4
   1fa54:	e7ee      	b.n	1fa34 <onoff_release+0x28>

0001fa56 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1fa56:	4604      	mov	r4, r0
   1fa58:	b508      	push	{r3, lr}
   1fa5a:	4608      	mov	r0, r1
   1fa5c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1fa5e:	461a      	mov	r2, r3
   1fa60:	47a0      	blx	r4
	return z_impl_k_current_get();
   1fa62:	f7ff fb27 	bl	1f0b4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1fa66:	f7f4 f99d 	bl	13da4 <z_impl_k_thread_abort>

0001fa6a <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1fa6a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1fa6c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1fa70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1fa74:	bf2c      	ite	cs
   1fa76:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1fa7a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1fa7e:	4770      	bx	lr

0001fa80 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1fa80:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1fa84:	6880      	ldr	r0, [r0, #8]
   1fa86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1fa8a:	bf2c      	ite	cs
   1fa8c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1fa90:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1fa94:	4770      	bx	lr

0001fa96 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1fa96:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1fa98:	2201      	movs	r2, #1
   1fa9a:	f7ff ffe6 	bl	1fa6a <chunk_field>
}
   1fa9e:	0840      	lsrs	r0, r0, #1
   1faa0:	bd08      	pop	{r3, pc}

0001faa2 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1faa2:	6883      	ldr	r3, [r0, #8]
   1faa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1faa8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1faac:	d308      	bcc.n	1fac0 <set_chunk_used+0x1e>
		if (used) {
   1faae:	684b      	ldr	r3, [r1, #4]
   1fab0:	b11a      	cbz	r2, 1faba <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fab2:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1fab6:	604b      	str	r3, [r1, #4]
   1fab8:	4770      	bx	lr
   1faba:	f023 0301 	bic.w	r3, r3, #1
   1fabe:	e7fa      	b.n	1fab6 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1fac0:	884b      	ldrh	r3, [r1, #2]
   1fac2:	b11a      	cbz	r2, 1facc <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fac4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1fac8:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1faca:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1facc:	f023 0301 	bic.w	r3, r3, #1
   1fad0:	e7fa      	b.n	1fac8 <set_chunk_used+0x26>

0001fad2 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fad2:	0053      	lsls	r3, r2, #1
   1fad4:	2201      	movs	r2, #1
   1fad6:	f7ff bfd3 	b.w	1fa80 <chunk_set>

0001fada <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1fada:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1fadc:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fade:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1fae2:	bf2c      	ite	cs
   1fae4:	2002      	movcs	r0, #2
   1fae6:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1fae8:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1faea:	fab0 f080 	clz	r0, r0
}
   1faee:	f1c0 001f 	rsb	r0, r0, #31
   1faf2:	4770      	bx	lr

0001faf4 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1faf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1faf8:	4616      	mov	r6, r2
   1fafa:	4604      	mov	r4, r0
   1fafc:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fafe:	f7ff ffca 	bl	1fa96 <chunk_size>
   1fb02:	4631      	mov	r1, r6
   1fb04:	4605      	mov	r5, r0
   1fb06:	4620      	mov	r0, r4
   1fb08:	f7ff ffc5 	bl	1fa96 <chunk_size>
   1fb0c:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1fb0e:	462a      	mov	r2, r5
   1fb10:	4639      	mov	r1, r7
   1fb12:	4620      	mov	r0, r4
   1fb14:	f7ff ffdd 	bl	1fad2 <set_chunk_size>
	return c + chunk_size(h, c);
   1fb18:	4631      	mov	r1, r6
   1fb1a:	4620      	mov	r0, r4
   1fb1c:	f7ff ffbb 	bl	1fa96 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1fb20:	462b      	mov	r3, r5
   1fb22:	1831      	adds	r1, r6, r0
   1fb24:	2200      	movs	r2, #0
   1fb26:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1fb28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fb2c:	f7ff bfa8 	b.w	1fa80 <chunk_set>

0001fb30 <split_chunks>:
{
   1fb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb34:	4614      	mov	r4, r2
   1fb36:	4605      	mov	r5, r0
   1fb38:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1fb3a:	f7ff ffac 	bl	1fa96 <chunk_size>
	chunksz_t lsz = rc - lc;
   1fb3e:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1fb42:	1b37      	subs	r7, r6, r4
   1fb44:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1fb46:	4642      	mov	r2, r8
   1fb48:	4631      	mov	r1, r6
   1fb4a:	4628      	mov	r0, r5
   1fb4c:	f7ff ffc1 	bl	1fad2 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1fb50:	463a      	mov	r2, r7
   1fb52:	4621      	mov	r1, r4
   1fb54:	4628      	mov	r0, r5
   1fb56:	f7ff ffbc 	bl	1fad2 <set_chunk_size>
   1fb5a:	4643      	mov	r3, r8
   1fb5c:	2200      	movs	r2, #0
   1fb5e:	4621      	mov	r1, r4
   1fb60:	4628      	mov	r0, r5
   1fb62:	f7ff ff8d 	bl	1fa80 <chunk_set>
	return c + chunk_size(h, c);
   1fb66:	4621      	mov	r1, r4
   1fb68:	4628      	mov	r0, r5
   1fb6a:	f7ff ff94 	bl	1fa96 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1fb6e:	463b      	mov	r3, r7
   1fb70:	1821      	adds	r1, r4, r0
   1fb72:	2200      	movs	r2, #0
   1fb74:	4628      	mov	r0, r5
}
   1fb76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fb7a:	f7ff bf81 	b.w	1fa80 <chunk_set>

0001fb7e <free_list_remove_bidx>:
{
   1fb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb82:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1fb84:	2203      	movs	r2, #3
   1fb86:	460e      	mov	r6, r1
   1fb88:	4604      	mov	r4, r0
   1fb8a:	f7ff ff6e 	bl	1fa6a <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1fb8e:	4286      	cmp	r6, r0
   1fb90:	4605      	mov	r5, r0
   1fb92:	f107 0804 	add.w	r8, r7, #4
   1fb96:	d10b      	bne.n	1fbb0 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1fb98:	2301      	movs	r3, #1
   1fb9a:	fa03 f707 	lsl.w	r7, r3, r7
   1fb9e:	68e3      	ldr	r3, [r4, #12]
   1fba0:	ea23 0307 	bic.w	r3, r3, r7
   1fba4:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1fba6:	2300      	movs	r3, #0
   1fba8:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1fbb0:	4631      	mov	r1, r6
   1fbb2:	2202      	movs	r2, #2
   1fbb4:	4620      	mov	r0, r4
   1fbb6:	f7ff ff58 	bl	1fa6a <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1fbba:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1fbbc:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1fbbe:	4601      	mov	r1, r0
		b->next = second;
   1fbc0:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1fbc4:	4620      	mov	r0, r4
   1fbc6:	2203      	movs	r2, #3
   1fbc8:	f7ff ff5a 	bl	1fa80 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1fbcc:	4633      	mov	r3, r6
   1fbce:	4629      	mov	r1, r5
   1fbd0:	4620      	mov	r0, r4
   1fbd2:	2202      	movs	r2, #2
}
   1fbd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fbd8:	f7ff bf52 	b.w	1fa80 <chunk_set>

0001fbdc <free_list_remove>:
{
   1fbdc:	b538      	push	{r3, r4, r5, lr}
   1fbde:	4604      	mov	r4, r0
   1fbe0:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1fbe2:	f7ff ff58 	bl	1fa96 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1fbe6:	68a3      	ldr	r3, [r4, #8]
   1fbe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fbec:	4601      	mov	r1, r0
   1fbee:	d301      	bcc.n	1fbf4 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1fbf0:	2801      	cmp	r0, #1
   1fbf2:	d009      	beq.n	1fc08 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	f7ff ff70 	bl	1fada <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1fbfa:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fbfc:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1fbfe:	4620      	mov	r0, r4
}
   1fc00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1fc04:	f7ff bfbb 	b.w	1fb7e <free_list_remove_bidx>
}
   1fc08:	bd38      	pop	{r3, r4, r5, pc}

0001fc0a <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1fc0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc0e:	4605      	mov	r5, r0
   1fc10:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1fc12:	f7ff ff62 	bl	1fada <bucket_idx>
   1fc16:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1fc1a:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1fc1c:	f8da 9010 	ldr.w	r9, [sl, #16]
   1fc20:	f1b9 0f00 	cmp.w	r9, #0
   1fc24:	d01b      	beq.n	1fc5e <alloc_chunk+0x54>
   1fc26:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1fc28:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1fc2c:	4628      	mov	r0, r5
   1fc2e:	4621      	mov	r1, r4
   1fc30:	f7ff ff31 	bl	1fa96 <chunk_size>
   1fc34:	4540      	cmp	r0, r8
   1fc36:	d307      	bcc.n	1fc48 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1fc38:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1fc3a:	4621      	mov	r1, r4
   1fc3c:	4628      	mov	r0, r5
   1fc3e:	f7ff ff9e 	bl	1fb7e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1fc42:	4620      	mov	r0, r4
   1fc44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1fc48:	2203      	movs	r2, #3
   1fc4a:	4621      	mov	r1, r4
   1fc4c:	4628      	mov	r0, r5
   1fc4e:	f7ff ff0c 	bl	1fa6a <chunk_field>
		} while (--i && b->next != first);
   1fc52:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1fc54:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1fc58:	d001      	beq.n	1fc5e <alloc_chunk+0x54>
   1fc5a:	4581      	cmp	r9, r0
   1fc5c:	d1e4      	bne.n	1fc28 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1fc5e:	68e9      	ldr	r1, [r5, #12]
   1fc60:	3601      	adds	r6, #1
   1fc62:	f04f 34ff 	mov.w	r4, #4294967295
   1fc66:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1fc68:	400c      	ands	r4, r1
   1fc6a:	d0ea      	beq.n	1fc42 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1fc6c:	fa94 f2a4 	rbit	r2, r4
   1fc70:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1fc74:	1d13      	adds	r3, r2, #4
   1fc76:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1fc7a:	e7de      	b.n	1fc3a <alloc_chunk+0x30>

0001fc7c <free_list_add>:
{
   1fc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc80:	4604      	mov	r4, r0
   1fc82:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1fc84:	f7ff ff07 	bl	1fa96 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1fc88:	68a3      	ldr	r3, [r4, #8]
   1fc8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fc8e:	4601      	mov	r1, r0
   1fc90:	d301      	bcc.n	1fc96 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1fc92:	2801      	cmp	r0, #1
   1fc94:	d035      	beq.n	1fd02 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fc96:	4620      	mov	r0, r4
   1fc98:	f7ff ff1f 	bl	1fada <bucket_idx>
	if (b->next == 0U) {
   1fc9c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1fca0:	6916      	ldr	r6, [r2, #16]
   1fca2:	b99e      	cbnz	r6, 1fccc <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1fca4:	2301      	movs	r3, #1
   1fca6:	fa03 f000 	lsl.w	r0, r3, r0
   1fcaa:	68e3      	ldr	r3, [r4, #12]
   1fcac:	4303      	orrs	r3, r0
   1fcae:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1fcb0:	4629      	mov	r1, r5
		b->next = c;
   1fcb2:	6115      	str	r5, [r2, #16]
   1fcb4:	462b      	mov	r3, r5
   1fcb6:	2202      	movs	r2, #2
   1fcb8:	4620      	mov	r0, r4
   1fcba:	f7ff fee1 	bl	1fa80 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1fcbe:	2203      	movs	r2, #3
   1fcc0:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1fcc2:	4620      	mov	r0, r4
}
   1fcc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fcc8:	f7ff beda 	b.w	1fa80 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1fccc:	2202      	movs	r2, #2
   1fcce:	4631      	mov	r1, r6
   1fcd0:	4620      	mov	r0, r4
   1fcd2:	f7ff feca 	bl	1fa6a <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1fcd6:	2202      	movs	r2, #2
   1fcd8:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1fcda:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1fcdc:	4629      	mov	r1, r5
   1fcde:	4620      	mov	r0, r4
   1fce0:	f7ff fece 	bl	1fa80 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1fce4:	4633      	mov	r3, r6
   1fce6:	2203      	movs	r2, #3
   1fce8:	4629      	mov	r1, r5
   1fcea:	4620      	mov	r0, r4
   1fcec:	f7ff fec8 	bl	1fa80 <chunk_set>
   1fcf0:	2203      	movs	r2, #3
   1fcf2:	4639      	mov	r1, r7
   1fcf4:	462b      	mov	r3, r5
   1fcf6:	4620      	mov	r0, r4
   1fcf8:	f7ff fec2 	bl	1fa80 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1fcfc:	2202      	movs	r2, #2
   1fcfe:	4631      	mov	r1, r6
   1fd00:	e7df      	b.n	1fcc2 <free_list_add+0x46>
   1fd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fd06 <free_chunk>:
{
   1fd06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd08:	460c      	mov	r4, r1
   1fd0a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1fd0c:	f7ff fec3 	bl	1fa96 <chunk_size>
   1fd10:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fd12:	2201      	movs	r2, #1
   1fd14:	4631      	mov	r1, r6
   1fd16:	4628      	mov	r0, r5
   1fd18:	f7ff fea7 	bl	1fa6a <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1fd1c:	07c3      	lsls	r3, r0, #31
   1fd1e:	d40c      	bmi.n	1fd3a <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1fd20:	4631      	mov	r1, r6
   1fd22:	4628      	mov	r0, r5
   1fd24:	f7ff ff5a 	bl	1fbdc <free_list_remove>
	return c + chunk_size(h, c);
   1fd28:	4621      	mov	r1, r4
   1fd2a:	4628      	mov	r0, r5
   1fd2c:	f7ff feb3 	bl	1fa96 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1fd30:	4621      	mov	r1, r4
   1fd32:	1822      	adds	r2, r4, r0
   1fd34:	4628      	mov	r0, r5
   1fd36:	f7ff fedd 	bl	1faf4 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1fd3a:	2200      	movs	r2, #0
   1fd3c:	4621      	mov	r1, r4
   1fd3e:	4628      	mov	r0, r5
   1fd40:	f7ff fe93 	bl	1fa6a <chunk_field>
   1fd44:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fd46:	2201      	movs	r2, #1
   1fd48:	4639      	mov	r1, r7
   1fd4a:	4628      	mov	r0, r5
   1fd4c:	f7ff fe8d 	bl	1fa6a <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1fd50:	f010 0601 	ands.w	r6, r0, #1
   1fd54:	d113      	bne.n	1fd7e <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1fd56:	4639      	mov	r1, r7
   1fd58:	4628      	mov	r0, r5
   1fd5a:	f7ff ff3f 	bl	1fbdc <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1fd5e:	4621      	mov	r1, r4
   1fd60:	4632      	mov	r2, r6
   1fd62:	4628      	mov	r0, r5
   1fd64:	f7ff fe81 	bl	1fa6a <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1fd68:	4622      	mov	r2, r4
   1fd6a:	1a21      	subs	r1, r4, r0
   1fd6c:	4628      	mov	r0, r5
   1fd6e:	f7ff fec1 	bl	1faf4 <merge_chunks>
   1fd72:	4621      	mov	r1, r4
   1fd74:	4632      	mov	r2, r6
   1fd76:	4628      	mov	r0, r5
   1fd78:	f7ff fe77 	bl	1fa6a <chunk_field>
   1fd7c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1fd7e:	4621      	mov	r1, r4
   1fd80:	4628      	mov	r0, r5
}
   1fd82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1fd86:	f7ff bf79 	b.w	1fc7c <free_list_add>

0001fd8a <sys_heap_free>:
{
   1fd8a:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1fd8c:	b191      	cbz	r1, 1fdb4 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1fd8e:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1fd90:	6883      	ldr	r3, [r0, #8]
   1fd92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fd96:	bf2c      	ite	cs
   1fd98:	2408      	movcs	r4, #8
   1fd9a:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fd9c:	1b0c      	subs	r4, r1, r4
   1fd9e:	1a24      	subs	r4, r4, r0
   1fda0:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1fda2:	4621      	mov	r1, r4
   1fda4:	2200      	movs	r2, #0
   1fda6:	f7ff fe7c 	bl	1faa2 <set_chunk_used>
	free_chunk(h, c);
   1fdaa:	4621      	mov	r1, r4
}
   1fdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1fdb0:	f7ff bfa9 	b.w	1fd06 <free_chunk>
}
   1fdb4:	bd10      	pop	{r4, pc}

0001fdb6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1fdb6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1fdb8:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1fdba:	b909      	cbnz	r1, 1fdc0 <sys_heap_alloc+0xa>
		return NULL;
   1fdbc:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1fdbe:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1fdc0:	68ab      	ldr	r3, [r5, #8]
   1fdc2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1fdc6:	d9f9      	bls.n	1fdbc <sys_heap_alloc+0x6>
   1fdc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fdcc:	bf2c      	ite	cs
   1fdce:	2208      	movcs	r2, #8
   1fdd0:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fdd2:	1dcc      	adds	r4, r1, #7
   1fdd4:	4414      	add	r4, r2
   1fdd6:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1fdd8:	4621      	mov	r1, r4
   1fdda:	4628      	mov	r0, r5
   1fddc:	f7ff ff15 	bl	1fc0a <alloc_chunk>
	if (c == 0U) {
   1fde0:	4606      	mov	r6, r0
   1fde2:	2800      	cmp	r0, #0
   1fde4:	d0ea      	beq.n	1fdbc <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1fde6:	4601      	mov	r1, r0
   1fde8:	4628      	mov	r0, r5
   1fdea:	f7ff fe54 	bl	1fa96 <chunk_size>
   1fdee:	42a0      	cmp	r0, r4
   1fdf0:	d909      	bls.n	1fe06 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1fdf2:	4434      	add	r4, r6
   1fdf4:	4631      	mov	r1, r6
   1fdf6:	4628      	mov	r0, r5
   1fdf8:	4622      	mov	r2, r4
   1fdfa:	f7ff fe99 	bl	1fb30 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1fdfe:	4621      	mov	r1, r4
   1fe00:	4628      	mov	r0, r5
   1fe02:	f7ff ff3b 	bl	1fc7c <free_list_add>
	set_chunk_used(h, c, true);
   1fe06:	4628      	mov	r0, r5
   1fe08:	2201      	movs	r2, #1
   1fe0a:	4631      	mov	r1, r6
   1fe0c:	f7ff fe49 	bl	1faa2 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1fe10:	68ab      	ldr	r3, [r5, #8]
   1fe12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fe16:	bf2c      	ite	cs
   1fe18:	2008      	movcs	r0, #8
   1fe1a:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fe1c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1fe20:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1fe22:	e7cc      	b.n	1fdbe <sys_heap_alloc+0x8>

0001fe24 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1fe24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1fe28:	6806      	ldr	r6, [r0, #0]
{
   1fe2a:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1fe2c:	424a      	negs	r2, r1
   1fe2e:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1fe32:	ea31 0202 	bics.w	r2, r1, r2
   1fe36:	68b5      	ldr	r5, [r6, #8]
{
   1fe38:	460b      	mov	r3, r1
	if (align != rew) {
   1fe3a:	d00f      	beq.n	1fe5c <sys_heap_aligned_alloc+0x38>
   1fe3c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1fe40:	bf34      	ite	cc
   1fe42:	2104      	movcc	r1, #4
   1fe44:	2108      	movcs	r1, #8
   1fe46:	42b9      	cmp	r1, r7
   1fe48:	460a      	mov	r2, r1
   1fe4a:	46b9      	mov	r9, r7
   1fe4c:	bf28      	it	cs
   1fe4e:	463a      	movcs	r2, r7
		align -= rew;
   1fe50:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1fe52:	b994      	cbnz	r4, 1fe7a <sys_heap_aligned_alloc+0x56>
		return NULL;
   1fe54:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1fe56:	4628      	mov	r0, r5
   1fe58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fe5c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1fe60:	bf34      	ite	cc
   1fe62:	2204      	movcc	r2, #4
   1fe64:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1fe66:	4291      	cmp	r1, r2
   1fe68:	d804      	bhi.n	1fe74 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1fe6a:	4621      	mov	r1, r4
}
   1fe6c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1fe70:	f7ff bfa1 	b.w	1fdb6 <sys_heap_alloc>
		rew = 0;
   1fe74:	f04f 0900 	mov.w	r9, #0
   1fe78:	e7eb      	b.n	1fe52 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1fe7a:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1fe7e:	d9e9      	bls.n	1fe54 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1fe80:	1de1      	adds	r1, r4, #7
   1fe82:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1fe86:	4439      	add	r1, r7
   1fe88:	bf2c      	ite	cs
   1fe8a:	2308      	movcs	r3, #8
   1fe8c:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fe8e:	1a89      	subs	r1, r1, r2
   1fe90:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fe92:	08c9      	lsrs	r1, r1, #3
   1fe94:	4630      	mov	r0, r6
   1fe96:	f7ff feb8 	bl	1fc0a <alloc_chunk>
	if (c0 == 0) {
   1fe9a:	4680      	mov	r8, r0
   1fe9c:	2800      	cmp	r0, #0
   1fe9e:	d0d9      	beq.n	1fe54 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1fea0:	68b3      	ldr	r3, [r6, #8]
   1fea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fea6:	bf2c      	ite	cs
   1fea8:	2308      	movcs	r3, #8
   1feaa:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1feac:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1feb0:	441d      	add	r5, r3
   1feb2:	1e7a      	subs	r2, r7, #1
   1feb4:	4435      	add	r5, r6
   1feb6:	427f      	negs	r7, r7
   1feb8:	4415      	add	r5, r2
   1feba:	403d      	ands	r5, r7
   1febc:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fec0:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fec2:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fec4:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fec6:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fec8:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1fecc:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1fece:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fed2:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1fed6:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1feda:	d208      	bcs.n	1feee <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1fedc:	4601      	mov	r1, r0
   1fede:	463a      	mov	r2, r7
   1fee0:	4630      	mov	r0, r6
   1fee2:	f7ff fe25 	bl	1fb30 <split_chunks>
		free_list_add(h, c0);
   1fee6:	4641      	mov	r1, r8
   1fee8:	4630      	mov	r0, r6
   1feea:	f7ff fec7 	bl	1fc7c <free_list_add>
	return c + chunk_size(h, c);
   1feee:	4639      	mov	r1, r7
   1fef0:	4630      	mov	r0, r6
   1fef2:	f7ff fdd0 	bl	1fa96 <chunk_size>
   1fef6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fef8:	4284      	cmp	r4, r0
   1fefa:	d208      	bcs.n	1ff0e <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1fefc:	4639      	mov	r1, r7
   1fefe:	4630      	mov	r0, r6
   1ff00:	4622      	mov	r2, r4
   1ff02:	f7ff fe15 	bl	1fb30 <split_chunks>
		free_list_add(h, c_end);
   1ff06:	4621      	mov	r1, r4
   1ff08:	4630      	mov	r0, r6
   1ff0a:	f7ff feb7 	bl	1fc7c <free_list_add>
	set_chunk_used(h, c, true);
   1ff0e:	2201      	movs	r2, #1
   1ff10:	4639      	mov	r1, r7
   1ff12:	4630      	mov	r0, r6
   1ff14:	f7ff fdc5 	bl	1faa2 <set_chunk_used>
	return mem;
   1ff18:	e79d      	b.n	1fe56 <sys_heap_aligned_alloc+0x32>

0001ff1a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1ff1a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1ff1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff20:	bf2c      	ite	cs
   1ff22:	2508      	movcs	r5, #8
   1ff24:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1ff26:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ff28:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ff2a:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ff2c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ff30:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1ff34:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1ff36:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1ff38:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1ff3a:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ff3c:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1ff3e:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1ff40:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ff42:	4620      	mov	r0, r4
   1ff44:	f7ff fdc9 	bl	1fada <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1ff48:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ff4a:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ff4c:	1c41      	adds	r1, r0, #1
   1ff4e:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1ff50:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1ff54:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1ff56:	428b      	cmp	r3, r1
   1ff58:	db2f      	blt.n	1ffba <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1ff5a:	4632      	mov	r2, r6
   1ff5c:	4620      	mov	r0, r4
   1ff5e:	2100      	movs	r1, #0
   1ff60:	f7ff fdb7 	bl	1fad2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ff64:	2300      	movs	r3, #0
   1ff66:	461a      	mov	r2, r3
   1ff68:	4619      	mov	r1, r3
   1ff6a:	4620      	mov	r0, r4
   1ff6c:	f7ff fd88 	bl	1fa80 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ff70:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1ff72:	4620      	mov	r0, r4
   1ff74:	2201      	movs	r2, #1
   1ff76:	2100      	movs	r1, #0
   1ff78:	f7ff fd93 	bl	1faa2 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ff7c:	463a      	mov	r2, r7
   1ff7e:	4631      	mov	r1, r6
   1ff80:	f7ff fda7 	bl	1fad2 <set_chunk_size>
   1ff84:	4633      	mov	r3, r6
   1ff86:	4631      	mov	r1, r6
   1ff88:	4620      	mov	r0, r4
   1ff8a:	2200      	movs	r2, #0
   1ff8c:	f7ff fd78 	bl	1fa80 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1ff90:	4629      	mov	r1, r5
   1ff92:	4620      	mov	r0, r4
   1ff94:	2200      	movs	r2, #0
   1ff96:	f7ff fd9c 	bl	1fad2 <set_chunk_size>
   1ff9a:	463b      	mov	r3, r7
   1ff9c:	4629      	mov	r1, r5
   1ff9e:	4620      	mov	r0, r4
   1ffa0:	2200      	movs	r2, #0
   1ffa2:	f7ff fd6d 	bl	1fa80 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1ffa6:	4629      	mov	r1, r5
   1ffa8:	4620      	mov	r0, r4
   1ffaa:	2201      	movs	r2, #1
   1ffac:	f7ff fd79 	bl	1faa2 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1ffb0:	4631      	mov	r1, r6
}
   1ffb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1ffb6:	f7ff be61 	b.w	1fc7c <free_list_add>
		h->buckets[i].next = 0;
   1ffba:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1ffbe:	3301      	adds	r3, #1
   1ffc0:	e7c9      	b.n	1ff56 <sys_heap_init+0x3c>

0001ffc2 <encode_uint>:
{
   1ffc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffc6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1ffc8:	78d3      	ldrb	r3, [r2, #3]
{
   1ffca:	4614      	mov	r4, r2
	switch (specifier) {
   1ffcc:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ffce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1ffd2:	4606      	mov	r6, r0
   1ffd4:	460f      	mov	r7, r1
   1ffd6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1ffd8:	d02d      	beq.n	20036 <encode_uint+0x74>
   1ffda:	d828      	bhi.n	2002e <encode_uint+0x6c>
		return 16;
   1ffdc:	2b58      	cmp	r3, #88	; 0x58
   1ffde:	bf14      	ite	ne
   1ffe0:	250a      	movne	r5, #10
   1ffe2:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1ffe4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1ffe8:	46aa      	mov	sl, r5
   1ffea:	f04f 0b00 	mov.w	fp, #0
   1ffee:	4652      	mov	r2, sl
   1fff0:	465b      	mov	r3, fp
   1fff2:	4630      	mov	r0, r6
   1fff4:	4639      	mov	r1, r7
   1fff6:	f7e0 fc61 	bl	8bc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fffa:	2a09      	cmp	r2, #9
   1fffc:	b2d3      	uxtb	r3, r2
   1fffe:	d81f      	bhi.n	20040 <encode_uint+0x7e>
   20000:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   20002:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   20004:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   20006:	bf08      	it	eq
   20008:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2000a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   2000e:	d301      	bcc.n	20014 <encode_uint+0x52>
   20010:	45c8      	cmp	r8, r9
   20012:	d812      	bhi.n	2003a <encode_uint+0x78>
	if (conv->flag_hash) {
   20014:	7823      	ldrb	r3, [r4, #0]
   20016:	069b      	lsls	r3, r3, #26
   20018:	d505      	bpl.n	20026 <encode_uint+0x64>
		if (radix == 8) {
   2001a:	2d08      	cmp	r5, #8
   2001c:	d116      	bne.n	2004c <encode_uint+0x8a>
			conv->altform_0 = true;
   2001e:	78a3      	ldrb	r3, [r4, #2]
   20020:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   20024:	70a3      	strb	r3, [r4, #2]
}
   20026:	4640      	mov	r0, r8
   20028:	b003      	add	sp, #12
   2002a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2002e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   20032:	2b70      	cmp	r3, #112	; 0x70
   20034:	e7d3      	b.n	1ffde <encode_uint+0x1c>
	switch (specifier) {
   20036:	2508      	movs	r5, #8
   20038:	e7d4      	b.n	1ffe4 <encode_uint+0x22>
		value /= radix;
   2003a:	4606      	mov	r6, r0
   2003c:	460f      	mov	r7, r1
   2003e:	e7d6      	b.n	1ffee <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   20040:	9a01      	ldr	r2, [sp, #4]
   20042:	2a19      	cmp	r2, #25
   20044:	bf94      	ite	ls
   20046:	3337      	addls	r3, #55	; 0x37
   20048:	3357      	addhi	r3, #87	; 0x57
   2004a:	e7da      	b.n	20002 <encode_uint+0x40>
		} else if (radix == 16) {
   2004c:	2d10      	cmp	r5, #16
   2004e:	d1ea      	bne.n	20026 <encode_uint+0x64>
			conv->altform_0c = true;
   20050:	78a3      	ldrb	r3, [r4, #2]
   20052:	f043 0310 	orr.w	r3, r3, #16
   20056:	e7e5      	b.n	20024 <encode_uint+0x62>

00020058 <outs>:
{
   20058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2005c:	4607      	mov	r7, r0
   2005e:	4688      	mov	r8, r1
   20060:	4615      	mov	r5, r2
   20062:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20064:	4614      	mov	r4, r2
   20066:	42b4      	cmp	r4, r6
   20068:	eba4 0005 	sub.w	r0, r4, r5
   2006c:	d302      	bcc.n	20074 <outs+0x1c>
   2006e:	b93e      	cbnz	r6, 20080 <outs+0x28>
   20070:	7823      	ldrb	r3, [r4, #0]
   20072:	b12b      	cbz	r3, 20080 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   20074:	f814 0b01 	ldrb.w	r0, [r4], #1
   20078:	4641      	mov	r1, r8
   2007a:	47b8      	blx	r7
		if (rc < 0) {
   2007c:	2800      	cmp	r0, #0
   2007e:	daf2      	bge.n	20066 <outs+0xe>
}
   20080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020084 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   20084:	4770      	bx	lr

00020086 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   20086:	2300      	movs	r3, #0
	list->head = NULL;
   20088:	e9c0 3300 	strd	r3, r3, [r0]
}
   2008c:	4770      	bx	lr

0002008e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2008e:	6803      	ldr	r3, [r0, #0]
   20090:	b923      	cbnz	r3, 2009c <log_list_add_tail+0xe>
		list->head = msg;
   20092:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   20094:	2300      	movs	r3, #0
	list->tail = msg;
   20096:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   20098:	600b      	str	r3, [r1, #0]
}
   2009a:	4770      	bx	lr
		list->tail->next = msg;
   2009c:	6843      	ldr	r3, [r0, #4]
   2009e:	6019      	str	r1, [r3, #0]
   200a0:	e7f8      	b.n	20094 <log_list_add_tail+0x6>

000200a2 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   200a2:	6800      	ldr	r0, [r0, #0]
   200a4:	4770      	bx	lr

000200a6 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   200a6:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   200a8:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   200aa:	b108      	cbz	r0, 200b0 <log_list_head_get+0xa>
		list->head = list->head->next;
   200ac:	6802      	ldr	r2, [r0, #0]
   200ae:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   200b0:	4770      	bx	lr

000200b2 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   200b2:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   200b4:	f7f1 fc36 	bl	11924 <log_msg_chunk_alloc>

	if (msg != NULL) {
   200b8:	b118      	cbz	r0, 200c2 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   200ba:	2301      	movs	r3, #1
   200bc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   200be:	2300      	movs	r3, #0
   200c0:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   200c2:	bd08      	pop	{r3, pc}

000200c4 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   200c4:	f7f3 b880 	b.w	131c8 <sys_clock_cycle_get_32>

000200c8 <dummy_timestamp>:
   200c8:	2000      	movs	r0, #0
   200ca:	4770      	bx	lr

000200cc <z_log_get_s_mask>:
{
   200cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   200ce:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   200d0:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   200d2:	4603      	mov	r3, r0
	bool arm = false;
   200d4:	4602      	mov	r2, r0
				mask |= BIT(arg);
   200d6:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   200d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   200dc:	b10c      	cbz	r4, 200e2 <z_log_get_s_mask+0x16>
   200de:	428b      	cmp	r3, r1
   200e0:	d300      	bcc.n	200e4 <z_log_get_s_mask+0x18>
}
   200e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   200e4:	2c25      	cmp	r4, #37	; 0x25
   200e6:	d102      	bne.n	200ee <z_log_get_s_mask+0x22>
			arm = !arm;
   200e8:	f082 0201 	eor.w	r2, r2, #1
   200ec:	e7f4      	b.n	200d8 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   200ee:	2a00      	cmp	r2, #0
   200f0:	d0f2      	beq.n	200d8 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   200f2:	f044 0620 	orr.w	r6, r4, #32
   200f6:	3e61      	subs	r6, #97	; 0x61
   200f8:	2e19      	cmp	r6, #25
   200fa:	d8ed      	bhi.n	200d8 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   200fc:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   200fe:	bf04      	itt	eq
   20100:	fa07 f203 	lsleq.w	r2, r7, r3
   20104:	4310      	orreq	r0, r2
			arg++;
   20106:	3301      	adds	r3, #1
			arm = false;
   20108:	2200      	movs	r2, #0
   2010a:	e7e5      	b.n	200d8 <z_log_get_s_mask+0xc>

0002010c <log_0>:
{
   2010c:	b538      	push	{r3, r4, r5, lr}
   2010e:	4605      	mov	r5, r0
   20110:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   20112:	f7ff ffce 	bl	200b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20116:	b128      	cbz	r0, 20124 <log_0+0x18>
		msg->str = str;
   20118:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   2011a:	4621      	mov	r1, r4
}
   2011c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   20120:	f7f1 bb1a 	b.w	11758 <msg_finalize>
}
   20124:	bd38      	pop	{r3, r4, r5, pc}

00020126 <log_1>:
{
   20126:	b570      	push	{r4, r5, r6, lr}
   20128:	4606      	mov	r6, r0
   2012a:	460d      	mov	r5, r1
   2012c:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2012e:	f7ff ffc0 	bl	200b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20132:	b158      	cbz	r0, 2014c <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   20134:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   20136:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   20138:	2101      	movs	r1, #1
   2013a:	f361 1207 	bfi	r2, r1, #4, #4
   2013e:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   20140:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   20142:	4621      	mov	r1, r4
}
   20144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   20148:	f7f1 bb06 	b.w	11758 <msg_finalize>
}
   2014c:	bd70      	pop	{r4, r5, r6, pc}

0002014e <log_2>:
{
   2014e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20152:	4680      	mov	r8, r0
   20154:	460f      	mov	r7, r1
   20156:	4616      	mov	r6, r2
   20158:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2015a:	f7ff ffaa 	bl	200b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2015e:	b168      	cbz	r0, 2017c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   20160:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   20162:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   20166:	2202      	movs	r2, #2
   20168:	f362 1307 	bfi	r3, r2, #4, #4
   2016c:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2016e:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   20172:	4629      	mov	r1, r5
}
   20174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   20178:	f7f1 baee 	b.w	11758 <msg_finalize>
}
   2017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020180 <log_3>:
{
   20180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20184:	4680      	mov	r8, r0
   20186:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   2018a:	460f      	mov	r7, r1
   2018c:	4616      	mov	r6, r2
   2018e:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   20190:	f7ff ff8f 	bl	200b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20194:	b170      	cbz	r0, 201b4 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   20196:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   20198:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   2019c:	2203      	movs	r2, #3
   2019e:	f362 1307 	bfi	r3, r2, #4, #4
   201a2:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   201a4:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   201a8:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   201aa:	4649      	mov	r1, r9
}
   201ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   201b0:	f7f1 bad2 	b.w	11758 <msg_finalize>
}
   201b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000201b8 <log_n>:
{
   201b8:	b510      	push	{r4, lr}
   201ba:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   201bc:	f000 f8c4 	bl	20348 <log_msg_create_n>
		if (msg == NULL) {
   201c0:	b120      	cbz	r0, 201cc <log_n+0x14>
		msg_finalize(msg, src_level);
   201c2:	4621      	mov	r1, r4
}
   201c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   201c8:	f7f1 bac6 	b.w	11758 <msg_finalize>
}
   201cc:	bd10      	pop	{r4, pc}

000201ce <log_hexdump>:
{
   201ce:	b510      	push	{r4, lr}
   201d0:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   201d2:	f000 f90d 	bl	203f0 <log_msg_hexdump_create>
		if (msg == NULL) {
   201d6:	b120      	cbz	r0, 201e2 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   201d8:	4621      	mov	r1, r4
}
   201da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   201de:	f7f1 babb 	b.w	11758 <msg_finalize>
}
   201e2:	bd10      	pop	{r4, pc}

000201e4 <z_log_printk>:
{
   201e4:	b500      	push	{lr}
   201e6:	b0a3      	sub	sp, #140	; 0x8c
   201e8:	4602      	mov	r2, r0
   201ea:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   201ec:	a801      	add	r0, sp, #4
   201ee:	2181      	movs	r1, #129	; 0x81
   201f0:	f7f0 fc0a 	bl	10a08 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   201f4:	2881      	cmp	r0, #129	; 0x81
   201f6:	4602      	mov	r2, r0
   201f8:	a901      	add	r1, sp, #4
   201fa:	bf28      	it	cs
   201fc:	2281      	movcs	r2, #129	; 0x81
   201fe:	2000      	movs	r0, #0
   20200:	f000 f8f6 	bl	203f0 <log_msg_hexdump_create>
			if (msg == NULL) {
   20204:	b118      	cbz	r0, 2020e <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   20206:	f04f 0100 	mov.w	r1, #0
   2020a:	f7f1 faa5 	bl	11758 <msg_finalize>
}
   2020e:	b023      	add	sp, #140	; 0x8c
   20210:	f85d fb04 	ldr.w	pc, [sp], #4

00020214 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   20214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20218:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2021a:	8903      	ldrh	r3, [r0, #8]
{
   2021c:	f89d 7020 	ldrb.w	r7, [sp, #32]
   20220:	460e      	mov	r6, r1
   20222:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   20224:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   20228:	42a2      	cmp	r2, r4
   2022a:	d803      	bhi.n	20234 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   2022c:	2300      	movs	r3, #0
   2022e:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   20230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   20234:	680b      	ldr	r3, [r1, #0]
   20236:	4423      	add	r3, r4
   20238:	4293      	cmp	r3, r2
		*length = available_len - offset;
   2023a:	bf84      	itt	hi
   2023c:	1b13      	subhi	r3, r2, r4
   2023e:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20240:	2a0c      	cmp	r2, #12
	req_len = *length;
   20242:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20246:	d92a      	bls.n	2029e <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   20248:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2024a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2024e:	d82d      	bhi.n	202ac <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   20250:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20252:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20254:	454a      	cmp	r2, r9
   20256:	bf28      	it	cs
   20258:	464a      	movcs	r2, r9
   2025a:	4615      	mov	r5, r2
		if (put_op) {
   2025c:	4420      	add	r0, r4
   2025e:	b317      	cbz	r7, 202a6 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   20260:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   20262:	f001 ffc1 	bl	221e8 <memcpy>
		req_len -= cpy_len;
   20266:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2026a:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2026c:	f1b9 0f00 	cmp.w	r9, #0
   20270:	d0de      	beq.n	20230 <log_msg_hexdump_data_op+0x1c>
   20272:	f1b8 0f00 	cmp.w	r8, #0
   20276:	d0db      	beq.n	20230 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   20278:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2027c:	454d      	cmp	r5, r9
   2027e:	bf28      	it	cs
   20280:	464d      	movcs	r5, r9
		if (put_op) {
   20282:	1d20      	adds	r0, r4, #4
   20284:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   20286:	462a      	mov	r2, r5
		if (put_op) {
   20288:	b1bf      	cbz	r7, 202ba <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   2028a:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   2028c:	f001 ffac 	bl	221e8 <memcpy>
		req_len -= cpy_len;
   20290:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   20294:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   20298:	442e      	add	r6, r5
		offset = 0;
   2029a:	2400      	movs	r4, #0
   2029c:	e7e6      	b.n	2026c <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   2029e:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   202a0:	f04f 0800 	mov.w	r8, #0
   202a4:	e7d6      	b.n	20254 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   202a6:	4601      	mov	r1, r0
   202a8:	4630      	mov	r0, r6
   202aa:	e7da      	b.n	20262 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   202ac:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   202ae:	2c1b      	cmp	r4, #27
   202b0:	d9dc      	bls.n	2026c <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   202b2:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   202b6:	3c1c      	subs	r4, #28
   202b8:	e7f9      	b.n	202ae <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   202ba:	4601      	mov	r1, r0
   202bc:	4630      	mov	r0, r6
   202be:	e7e5      	b.n	2028c <log_msg_hexdump_data_op+0x78>

000202c0 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   202c0:	3004      	adds	r0, #4
   202c2:	f3bf 8f5b 	dmb	ish
   202c6:	e850 3f00 	ldrex	r3, [r0]
   202ca:	3301      	adds	r3, #1
   202cc:	e840 3200 	strex	r2, r3, [r0]
   202d0:	2a00      	cmp	r2, #0
   202d2:	d1f8      	bne.n	202c6 <log_msg_get+0x6>
   202d4:	f3bf 8f5b 	dmb	ish
}
   202d8:	4770      	bx	lr

000202da <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   202da:	7a40      	ldrb	r0, [r0, #9]
}
   202dc:	0900      	lsrs	r0, r0, #4
   202de:	4770      	bx	lr

000202e0 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   202e0:	7a43      	ldrb	r3, [r0, #9]
   202e2:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   202e6:	ea4f 1213 	mov.w	r2, r3, lsr #4
   202ea:	d216      	bcs.n	2031a <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   202ec:	2a03      	cmp	r2, #3
   202ee:	d803      	bhi.n	202f8 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   202f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   202f4:	6948      	ldr	r0, [r1, #20]
   202f6:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   202f8:	2901      	cmp	r1, #1
   202fa:	d803      	bhi.n	20304 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   202fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   20300:	6988      	ldr	r0, [r1, #24]
   20302:	4770      	bx	lr
	cont = msg->payload.ext.next;
   20304:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   20306:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   20308:	2906      	cmp	r1, #6
   2030a:	d803      	bhi.n	20314 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2030c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   20310:	6848      	ldr	r0, [r1, #4]
   20312:	4770      	bx	lr
		cont = cont->next;
   20314:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   20316:	3907      	subs	r1, #7
		cont = cont->next;
   20318:	e7f6      	b.n	20308 <log_msg_arg_get+0x28>
		return 0;
   2031a:	2000      	movs	r0, #0
}
   2031c:	4770      	bx	lr

0002031e <log_msg_put>:
{
   2031e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20320:	1d02      	adds	r2, r0, #4
   20322:	f3bf 8f5b 	dmb	ish
   20326:	e852 1f00 	ldrex	r1, [r2]
   2032a:	3901      	subs	r1, #1
   2032c:	e842 1c00 	strex	ip, r1, [r2]
   20330:	f1bc 0f00 	cmp.w	ip, #0
   20334:	d1f7      	bne.n	20326 <log_msg_put+0x8>
   20336:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   2033a:	685b      	ldr	r3, [r3, #4]
   2033c:	b90b      	cbnz	r3, 20342 <log_msg_put+0x24>
		msg_free(msg);
   2033e:	f7f1 bb05 	b.w	1194c <msg_free>
}
   20342:	4770      	bx	lr

00020344 <log_msg_str_get>:
}
   20344:	6900      	ldr	r0, [r0, #16]
   20346:	4770      	bx	lr

00020348 <log_msg_create_n>:
{
   20348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2034c:	4681      	mov	r9, r0
   2034e:	4688      	mov	r8, r1
   20350:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   20352:	f7f1 fae7 	bl	11924 <log_msg_chunk_alloc>
	if (msg != NULL) {
   20356:	4604      	mov	r4, r0
   20358:	b330      	cbz	r0, 203a8 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   2035a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   2035c:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2035e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   20360:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   20362:	8107      	strh	r7, [r0, #8]
   20364:	d909      	bls.n	2037a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   20366:	2202      	movs	r2, #2
   20368:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2036a:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   2036e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   20372:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   20374:	f1ba 0f00 	cmp.w	sl, #0
   20378:	dc0e      	bgt.n	20398 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   2037a:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   2037c:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   20380:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   20384:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   20386:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   20388:	d818      	bhi.n	203bc <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   2038a:	00aa      	lsls	r2, r5, #2
   2038c:	4641      	mov	r1, r8
   2038e:	f104 0014 	add.w	r0, r4, #20
   20392:	f001 ff29 	bl	221e8 <memcpy>
	while (nargs != 0U) {
   20396:	e007      	b.n	203a8 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   20398:	f7f1 fac4 	bl	11924 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2039c:	4606      	mov	r6, r0
   2039e:	b930      	cbnz	r0, 203ae <log_msg_create_n+0x66>
			msg_free(msg);
   203a0:	4620      	mov	r0, r4
   203a2:	f7f1 fad3 	bl	1194c <msg_free>
			return NULL;
   203a6:	4634      	mov	r4, r6
}
   203a8:	4620      	mov	r0, r4
   203aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   203ae:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   203b2:	f1aa 0a07 	sub.w	sl, sl, #7
   203b6:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   203b8:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   203ba:	e7db      	b.n	20374 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   203bc:	4641      	mov	r1, r8
   203be:	2208      	movs	r2, #8
   203c0:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   203c4:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   203c6:	f001 ff0f 	bl	221e8 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   203ca:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   203cc:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   203d0:	2d07      	cmp	r5, #7
   203d2:	462e      	mov	r6, r5
   203d4:	bf28      	it	cs
   203d6:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   203d8:	ea4f 0986 	mov.w	r9, r6, lsl #2
   203dc:	4641      	mov	r1, r8
   203de:	1d38      	adds	r0, r7, #4
   203e0:	464a      	mov	r2, r9
   203e2:	f001 ff01 	bl	221e8 <memcpy>
	while (nargs != 0U) {
   203e6:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   203e8:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   203ea:	44c8      	add	r8, r9
	while (nargs != 0U) {
   203ec:	d1f0      	bne.n	203d0 <log_msg_create_n+0x88>
   203ee:	e7db      	b.n	203a8 <log_msg_create_n+0x60>

000203f0 <log_msg_hexdump_create>:
{
   203f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   203f4:	f643 75ff 	movw	r5, #16383	; 0x3fff
   203f8:	4295      	cmp	r5, r2
{
   203fa:	4680      	mov	r8, r0
   203fc:	460e      	mov	r6, r1
   203fe:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   20400:	bf28      	it	cs
   20402:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   20404:	f7f1 fa8e 	bl	11924 <log_msg_chunk_alloc>
	if (msg == NULL) {
   20408:	4604      	mov	r4, r0
   2040a:	b380      	cbz	r0, 2046e <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2040c:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   2040e:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   20412:	2301      	movs	r3, #1
   20414:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   20416:	00ab      	lsls	r3, r5, #2
   20418:	f043 0301 	orr.w	r3, r3, #1
   2041c:	f002 0202 	and.w	r2, r2, #2
   20420:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20422:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   20424:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20426:	f100 0814 	add.w	r8, r0, #20
   2042a:	d917      	bls.n	2045c <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   2042c:	2208      	movs	r2, #8
   2042e:	4631      	mov	r1, r6
   20430:	3018      	adds	r0, #24
   20432:	f001 fed9 	bl	221e8 <memcpy>
		msg->hdr.params.generic.ext = 1;
   20436:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   20438:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   2043a:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   2043e:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   20440:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20442:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20444:	3d08      	subs	r5, #8
	while (length > 0) {
   20446:	4699      	mov	r9, r3
   20448:	b18d      	cbz	r5, 2046e <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2044a:	f7f1 fa6b 	bl	11924 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2044e:	4607      	mov	r7, r0
   20450:	b980      	cbnz	r0, 20474 <log_msg_hexdump_create+0x84>
			msg_free(msg);
   20452:	4620      	mov	r0, r4
   20454:	f7f1 fa7a 	bl	1194c <msg_free>
			return NULL;
   20458:	463c      	mov	r4, r7
   2045a:	e008      	b.n	2046e <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   2045c:	462a      	mov	r2, r5
   2045e:	4631      	mov	r1, r6
   20460:	4640      	mov	r0, r8
   20462:	f001 fec1 	bl	221e8 <memcpy>
		msg->hdr.params.generic.ext = 0;
   20466:	7a23      	ldrb	r3, [r4, #8]
   20468:	f36f 0341 	bfc	r3, #1, #1
   2046c:	7223      	strb	r3, [r4, #8]
}
   2046e:	4620      	mov	r0, r4
   20470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   20474:	2d1c      	cmp	r5, #28
   20476:	462f      	mov	r7, r5
   20478:	bf28      	it	cs
   2047a:	271c      	movcs	r7, #28
		*prev_cont = cont;
   2047c:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   20480:	4631      	mov	r1, r6
		cont->next = NULL;
   20482:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   20486:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   20488:	463a      	mov	r2, r7
   2048a:	3004      	adds	r0, #4
   2048c:	f001 feac 	bl	221e8 <memcpy>
		data += chunk_length;
   20490:	443e      	add	r6, r7
		length -= chunk_length;
   20492:	1bed      	subs	r5, r5, r7
   20494:	e7d8      	b.n	20448 <log_msg_hexdump_create+0x58>

00020496 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   20496:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   20498:	2400      	movs	r4, #0
   2049a:	9400      	str	r4, [sp, #0]
   2049c:	f7ff feba 	bl	20214 <log_msg_hexdump_data_op>
}
   204a0:	b002      	add	sp, #8
   204a2:	bd10      	pop	{r4, pc}

000204a4 <buffer_write>:
{
   204a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204a6:	4606      	mov	r6, r0
   204a8:	460d      	mov	r5, r1
   204aa:	4614      	mov	r4, r2
   204ac:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   204ae:	4621      	mov	r1, r4
   204b0:	4628      	mov	r0, r5
   204b2:	463a      	mov	r2, r7
   204b4:	47b0      	blx	r6
	} while (len != 0);
   204b6:	1a24      	subs	r4, r4, r0
		buf += processed;
   204b8:	4405      	add	r5, r0
	} while (len != 0);
   204ba:	d1f8      	bne.n	204ae <buffer_write+0xa>
}
   204bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000204be <std_print>:
{
   204be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204c2:	b08e      	sub	sp, #56	; 0x38
   204c4:	af0e      	add	r7, sp, #56	; 0x38
   204c6:	4680      	mov	r8, r0
   204c8:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   204ca:	f7ff ff3b 	bl	20344 <log_msg_str_get>
   204ce:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   204d0:	4640      	mov	r0, r8
   204d2:	f7ff ff02 	bl	202da <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   204d6:	0083      	lsls	r3, r0, #2
   204d8:	3307      	adds	r3, #7
   204da:	f023 0307 	bic.w	r3, r3, #7
   204de:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   204e2:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   204e4:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   204e6:	f04f 0900 	mov.w	r9, #0
   204ea:	45d1      	cmp	r9, sl
   204ec:	d116      	bne.n	2051c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   204ee:	4640      	mov	r0, r8
   204f0:	f7ff fef3 	bl	202da <log_msg_nargs_get>
   204f4:	280f      	cmp	r0, #15
   204f6:	d81e      	bhi.n	20536 <std_print+0x78>
   204f8:	e8df f010 	tbh	[pc, r0, lsl #1]
   204fc:	00200019 	.word	0x00200019
   20500:	002d0026 	.word	0x002d0026
   20504:	00410036 	.word	0x00410036
   20508:	005d004e 	.word	0x005d004e
   2050c:	0081006e 	.word	0x0081006e
   20510:	00ad0096 	.word	0x00ad0096
   20514:	00e100c6 	.word	0x00e100c6
   20518:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   2051c:	4649      	mov	r1, r9
   2051e:	4640      	mov	r0, r8
   20520:	f7ff fede 	bl	202e0 <log_msg_arg_get>
   20524:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   20528:	f109 0901 	add.w	r9, r9, #1
   2052c:	e7dd      	b.n	204ea <std_print+0x2c>
		print_formatted(output, str);
   2052e:	4631      	mov	r1, r6
   20530:	4628      	mov	r0, r5
   20532:	f7f1 fa49 	bl	119c8 <print_formatted>
}
   20536:	46bd      	mov	sp, r7
   20538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   2053c:	6822      	ldr	r2, [r4, #0]
   2053e:	4631      	mov	r1, r6
   20540:	4628      	mov	r0, r5
   20542:	f7f1 fa41 	bl	119c8 <print_formatted>
		break;
   20546:	e7f6      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   20548:	e9d4 2300 	ldrd	r2, r3, [r4]
   2054c:	4631      	mov	r1, r6
   2054e:	4628      	mov	r0, r5
   20550:	f7f1 fa3a 	bl	119c8 <print_formatted>
		break;
   20554:	e7ef      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   20556:	68a3      	ldr	r3, [r4, #8]
   20558:	9300      	str	r3, [sp, #0]
   2055a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2055e:	4631      	mov	r1, r6
   20560:	4628      	mov	r0, r5
   20562:	f7f1 fa31 	bl	119c8 <print_formatted>
		break;
   20566:	e7e6      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   20568:	68e3      	ldr	r3, [r4, #12]
   2056a:	9301      	str	r3, [sp, #4]
   2056c:	68a3      	ldr	r3, [r4, #8]
   2056e:	9300      	str	r3, [sp, #0]
   20570:	e9d4 2300 	ldrd	r2, r3, [r4]
   20574:	4631      	mov	r1, r6
   20576:	4628      	mov	r0, r5
   20578:	f7f1 fa26 	bl	119c8 <print_formatted>
		break;
   2057c:	e7db      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2057e:	6923      	ldr	r3, [r4, #16]
   20580:	9302      	str	r3, [sp, #8]
   20582:	68e3      	ldr	r3, [r4, #12]
   20584:	9301      	str	r3, [sp, #4]
   20586:	68a3      	ldr	r3, [r4, #8]
   20588:	9300      	str	r3, [sp, #0]
   2058a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2058e:	4631      	mov	r1, r6
   20590:	4628      	mov	r0, r5
   20592:	f7f1 fa19 	bl	119c8 <print_formatted>
		break;
   20596:	e7ce      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   20598:	6963      	ldr	r3, [r4, #20]
   2059a:	9303      	str	r3, [sp, #12]
   2059c:	6923      	ldr	r3, [r4, #16]
   2059e:	9302      	str	r3, [sp, #8]
   205a0:	68e3      	ldr	r3, [r4, #12]
   205a2:	9301      	str	r3, [sp, #4]
   205a4:	68a3      	ldr	r3, [r4, #8]
   205a6:	9300      	str	r3, [sp, #0]
   205a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   205ac:	4631      	mov	r1, r6
   205ae:	4628      	mov	r0, r5
   205b0:	f7f1 fa0a 	bl	119c8 <print_formatted>
		break;
   205b4:	e7bf      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   205b6:	69a3      	ldr	r3, [r4, #24]
   205b8:	9304      	str	r3, [sp, #16]
   205ba:	6963      	ldr	r3, [r4, #20]
   205bc:	9303      	str	r3, [sp, #12]
   205be:	6923      	ldr	r3, [r4, #16]
   205c0:	9302      	str	r3, [sp, #8]
   205c2:	68e3      	ldr	r3, [r4, #12]
   205c4:	9301      	str	r3, [sp, #4]
   205c6:	68a3      	ldr	r3, [r4, #8]
   205c8:	9300      	str	r3, [sp, #0]
   205ca:	e9d4 2300 	ldrd	r2, r3, [r4]
   205ce:	4631      	mov	r1, r6
   205d0:	4628      	mov	r0, r5
   205d2:	f7f1 f9f9 	bl	119c8 <print_formatted>
		break;
   205d6:	e7ae      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   205d8:	69e3      	ldr	r3, [r4, #28]
   205da:	9305      	str	r3, [sp, #20]
   205dc:	69a3      	ldr	r3, [r4, #24]
   205de:	9304      	str	r3, [sp, #16]
   205e0:	6963      	ldr	r3, [r4, #20]
   205e2:	9303      	str	r3, [sp, #12]
   205e4:	6923      	ldr	r3, [r4, #16]
   205e6:	9302      	str	r3, [sp, #8]
   205e8:	68e3      	ldr	r3, [r4, #12]
   205ea:	9301      	str	r3, [sp, #4]
   205ec:	68a3      	ldr	r3, [r4, #8]
   205ee:	9300      	str	r3, [sp, #0]
   205f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   205f4:	4631      	mov	r1, r6
   205f6:	4628      	mov	r0, r5
   205f8:	f7f1 f9e6 	bl	119c8 <print_formatted>
		break;
   205fc:	e79b      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   205fe:	6a23      	ldr	r3, [r4, #32]
   20600:	9306      	str	r3, [sp, #24]
   20602:	69e3      	ldr	r3, [r4, #28]
   20604:	9305      	str	r3, [sp, #20]
   20606:	69a3      	ldr	r3, [r4, #24]
   20608:	9304      	str	r3, [sp, #16]
   2060a:	6963      	ldr	r3, [r4, #20]
   2060c:	9303      	str	r3, [sp, #12]
   2060e:	6923      	ldr	r3, [r4, #16]
   20610:	9302      	str	r3, [sp, #8]
   20612:	68e3      	ldr	r3, [r4, #12]
   20614:	9301      	str	r3, [sp, #4]
   20616:	68a3      	ldr	r3, [r4, #8]
   20618:	9300      	str	r3, [sp, #0]
   2061a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2061e:	4631      	mov	r1, r6
   20620:	4628      	mov	r0, r5
   20622:	f7f1 f9d1 	bl	119c8 <print_formatted>
		break;
   20626:	e786      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   20628:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2062a:	9307      	str	r3, [sp, #28]
   2062c:	6a23      	ldr	r3, [r4, #32]
   2062e:	9306      	str	r3, [sp, #24]
   20630:	69e3      	ldr	r3, [r4, #28]
   20632:	9305      	str	r3, [sp, #20]
   20634:	69a3      	ldr	r3, [r4, #24]
   20636:	9304      	str	r3, [sp, #16]
   20638:	6963      	ldr	r3, [r4, #20]
   2063a:	9303      	str	r3, [sp, #12]
   2063c:	6923      	ldr	r3, [r4, #16]
   2063e:	9302      	str	r3, [sp, #8]
   20640:	68e3      	ldr	r3, [r4, #12]
   20642:	9301      	str	r3, [sp, #4]
   20644:	68a3      	ldr	r3, [r4, #8]
   20646:	9300      	str	r3, [sp, #0]
   20648:	e9d4 2300 	ldrd	r2, r3, [r4]
   2064c:	4631      	mov	r1, r6
   2064e:	4628      	mov	r0, r5
   20650:	f7f1 f9ba 	bl	119c8 <print_formatted>
		break;
   20654:	e76f      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   20656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20658:	9308      	str	r3, [sp, #32]
   2065a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2065c:	9307      	str	r3, [sp, #28]
   2065e:	6a23      	ldr	r3, [r4, #32]
   20660:	9306      	str	r3, [sp, #24]
   20662:	69e3      	ldr	r3, [r4, #28]
   20664:	9305      	str	r3, [sp, #20]
   20666:	69a3      	ldr	r3, [r4, #24]
   20668:	9304      	str	r3, [sp, #16]
   2066a:	6963      	ldr	r3, [r4, #20]
   2066c:	9303      	str	r3, [sp, #12]
   2066e:	6923      	ldr	r3, [r4, #16]
   20670:	9302      	str	r3, [sp, #8]
   20672:	68e3      	ldr	r3, [r4, #12]
   20674:	9301      	str	r3, [sp, #4]
   20676:	68a3      	ldr	r3, [r4, #8]
   20678:	9300      	str	r3, [sp, #0]
   2067a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2067e:	4631      	mov	r1, r6
   20680:	4628      	mov	r0, r5
   20682:	f7f1 f9a1 	bl	119c8 <print_formatted>
		break;
   20686:	e756      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   20688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2068a:	9309      	str	r3, [sp, #36]	; 0x24
   2068c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2068e:	9308      	str	r3, [sp, #32]
   20690:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20692:	9307      	str	r3, [sp, #28]
   20694:	6a23      	ldr	r3, [r4, #32]
   20696:	9306      	str	r3, [sp, #24]
   20698:	69e3      	ldr	r3, [r4, #28]
   2069a:	9305      	str	r3, [sp, #20]
   2069c:	69a3      	ldr	r3, [r4, #24]
   2069e:	9304      	str	r3, [sp, #16]
   206a0:	6963      	ldr	r3, [r4, #20]
   206a2:	9303      	str	r3, [sp, #12]
   206a4:	6923      	ldr	r3, [r4, #16]
   206a6:	9302      	str	r3, [sp, #8]
   206a8:	68e3      	ldr	r3, [r4, #12]
   206aa:	9301      	str	r3, [sp, #4]
   206ac:	68a3      	ldr	r3, [r4, #8]
   206ae:	9300      	str	r3, [sp, #0]
   206b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   206b4:	4631      	mov	r1, r6
   206b6:	4628      	mov	r0, r5
   206b8:	f7f1 f986 	bl	119c8 <print_formatted>
		break;
   206bc:	e73b      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   206be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   206c0:	930a      	str	r3, [sp, #40]	; 0x28
   206c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   206c4:	9309      	str	r3, [sp, #36]	; 0x24
   206c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   206c8:	9308      	str	r3, [sp, #32]
   206ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   206cc:	9307      	str	r3, [sp, #28]
   206ce:	6a23      	ldr	r3, [r4, #32]
   206d0:	9306      	str	r3, [sp, #24]
   206d2:	69e3      	ldr	r3, [r4, #28]
   206d4:	9305      	str	r3, [sp, #20]
   206d6:	69a3      	ldr	r3, [r4, #24]
   206d8:	9304      	str	r3, [sp, #16]
   206da:	6963      	ldr	r3, [r4, #20]
   206dc:	9303      	str	r3, [sp, #12]
   206de:	6923      	ldr	r3, [r4, #16]
   206e0:	9302      	str	r3, [sp, #8]
   206e2:	68e3      	ldr	r3, [r4, #12]
   206e4:	9301      	str	r3, [sp, #4]
   206e6:	68a3      	ldr	r3, [r4, #8]
   206e8:	9300      	str	r3, [sp, #0]
   206ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   206ee:	4631      	mov	r1, r6
   206f0:	4628      	mov	r0, r5
   206f2:	f7f1 f969 	bl	119c8 <print_formatted>
		break;
   206f6:	e71e      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   206f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   206fa:	930b      	str	r3, [sp, #44]	; 0x2c
   206fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   206fe:	930a      	str	r3, [sp, #40]	; 0x28
   20700:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20702:	9309      	str	r3, [sp, #36]	; 0x24
   20704:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20706:	9308      	str	r3, [sp, #32]
   20708:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2070a:	9307      	str	r3, [sp, #28]
   2070c:	6a23      	ldr	r3, [r4, #32]
   2070e:	9306      	str	r3, [sp, #24]
   20710:	69e3      	ldr	r3, [r4, #28]
   20712:	9305      	str	r3, [sp, #20]
   20714:	69a3      	ldr	r3, [r4, #24]
   20716:	9304      	str	r3, [sp, #16]
   20718:	6963      	ldr	r3, [r4, #20]
   2071a:	9303      	str	r3, [sp, #12]
   2071c:	6923      	ldr	r3, [r4, #16]
   2071e:	9302      	str	r3, [sp, #8]
   20720:	68e3      	ldr	r3, [r4, #12]
   20722:	9301      	str	r3, [sp, #4]
   20724:	68a3      	ldr	r3, [r4, #8]
   20726:	9300      	str	r3, [sp, #0]
   20728:	e9d4 2300 	ldrd	r2, r3, [r4]
   2072c:	4631      	mov	r1, r6
   2072e:	4628      	mov	r0, r5
   20730:	f7f1 f94a 	bl	119c8 <print_formatted>
		break;
   20734:	e6ff      	b.n	20536 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   20736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   20738:	930c      	str	r3, [sp, #48]	; 0x30
   2073a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2073c:	930b      	str	r3, [sp, #44]	; 0x2c
   2073e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20740:	930a      	str	r3, [sp, #40]	; 0x28
   20742:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20744:	9309      	str	r3, [sp, #36]	; 0x24
   20746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20748:	9308      	str	r3, [sp, #32]
   2074a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2074c:	9307      	str	r3, [sp, #28]
   2074e:	6a23      	ldr	r3, [r4, #32]
   20750:	9306      	str	r3, [sp, #24]
   20752:	69e3      	ldr	r3, [r4, #28]
   20754:	9305      	str	r3, [sp, #20]
   20756:	69a3      	ldr	r3, [r4, #24]
   20758:	9304      	str	r3, [sp, #16]
   2075a:	6963      	ldr	r3, [r4, #20]
   2075c:	9303      	str	r3, [sp, #12]
   2075e:	6923      	ldr	r3, [r4, #16]
   20760:	9302      	str	r3, [sp, #8]
   20762:	68e3      	ldr	r3, [r4, #12]
   20764:	9301      	str	r3, [sp, #4]
   20766:	68a3      	ldr	r3, [r4, #8]
   20768:	9300      	str	r3, [sp, #0]
   2076a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2076e:	4631      	mov	r1, r6
   20770:	4628      	mov	r0, r5
   20772:	f7f1 f929 	bl	119c8 <print_formatted>
}
   20776:	e6de      	b.n	20536 <std_print+0x78>

00020778 <log_output_flush>:
		     output->control_block->offset,
   20778:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2077a:	6881      	ldr	r1, [r0, #8]
{
   2077c:	b510      	push	{r4, lr}
   2077e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   20780:	e9d2 2300 	ldrd	r2, r3, [r2]
   20784:	6800      	ldr	r0, [r0, #0]
   20786:	f7ff fe8d 	bl	204a4 <buffer_write>
	output->control_block->offset = 0;
   2078a:	6863      	ldr	r3, [r4, #4]
   2078c:	2200      	movs	r2, #0
   2078e:	601a      	str	r2, [r3, #0]
}
   20790:	bd10      	pop	{r4, pc}

00020792 <out_func>:
{
   20792:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   20794:	684b      	ldr	r3, [r1, #4]
   20796:	681a      	ldr	r2, [r3, #0]
   20798:	68cb      	ldr	r3, [r1, #12]
   2079a:	429a      	cmp	r2, r3
{
   2079c:	4605      	mov	r5, r0
   2079e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   207a0:	d102      	bne.n	207a8 <out_func+0x16>
		log_output_flush(out_ctx);
   207a2:	4608      	mov	r0, r1
   207a4:	f7ff ffe8 	bl	20778 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   207a8:	6863      	ldr	r3, [r4, #4]
   207aa:	f3bf 8f5b 	dmb	ish
   207ae:	e853 2f00 	ldrex	r2, [r3]
   207b2:	1c51      	adds	r1, r2, #1
   207b4:	e843 1000 	strex	r0, r1, [r3]
   207b8:	2800      	cmp	r0, #0
   207ba:	d1f8      	bne.n	207ae <out_func+0x1c>
   207bc:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   207c0:	68a3      	ldr	r3, [r4, #8]
   207c2:	549d      	strb	r5, [r3, r2]
}
   207c4:	2000      	movs	r0, #0
   207c6:	bd38      	pop	{r3, r4, r5, pc}

000207c8 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   207c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   207cc:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   207d0:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   207d2:	4640      	mov	r0, r8
{
   207d4:	461f      	mov	r7, r3
   207d6:	460c      	mov	r4, r1
   207d8:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   207da:	f001 fcca 	bl	22172 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   207de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   207e2:	9300      	str	r3, [sp, #0]
   207e4:	b280      	uxth	r0, r0
   207e6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   207ea:	463b      	mov	r3, r7
   207ec:	4632      	mov	r2, r6
   207ee:	4621      	mov	r1, r4
   207f0:	4628      	mov	r0, r5
   207f2:	f003 f890 	bl	23916 <bt_gatt_attr_read>
}
   207f6:	b004      	add	sp, #16
   207f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000207fc <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   207fc:	2000      	movs	r0, #0
   207fe:	4770      	bx	lr

00020800 <z_impl_flash_write>:
{
   20800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   20804:	6886      	ldr	r6, [r0, #8]
{
   20806:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   20808:	68f3      	ldr	r3, [r6, #12]
{
   2080a:	4605      	mov	r5, r0
   2080c:	460f      	mov	r7, r1
   2080e:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   20810:	b95b      	cbnz	r3, 2082a <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   20812:	6874      	ldr	r4, [r6, #4]
   20814:	464b      	mov	r3, r9
   20816:	4642      	mov	r2, r8
   20818:	4639      	mov	r1, r7
   2081a:	4628      	mov	r0, r5
   2081c:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   2081e:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   20820:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   20822:	b943      	cbnz	r3, 20836 <z_impl_flash_write+0x36>
}
   20824:	4620      	mov	r0, r4
   20826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   2082a:	2100      	movs	r1, #0
   2082c:	4798      	blx	r3
		if (rc) {
   2082e:	4604      	mov	r4, r0
   20830:	2800      	cmp	r0, #0
   20832:	d0ee      	beq.n	20812 <z_impl_flash_write+0x12>
   20834:	e7f6      	b.n	20824 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   20836:	2101      	movs	r1, #1
   20838:	4628      	mov	r0, r5
   2083a:	4798      	blx	r3
   2083c:	e7f2      	b.n	20824 <z_impl_flash_write+0x24>

0002083e <nvs_flash_rd>:
{
   2083e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   20840:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20842:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   20844:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20846:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   20848:	fa16 f181 	uxtah	r1, r6, r1
   2084c:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   20850:	6884      	ldr	r4, [r0, #8]
   20852:	6824      	ldr	r4, [r4, #0]
   20854:	46a4      	mov	ip, r4
}
   20856:	bc70      	pop	{r4, r5, r6}
   20858:	4760      	bx	ip

0002085a <nvs_flash_block_cmp>:
{
   2085a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2085e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   20860:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20862:	681d      	ldr	r5, [r3, #0]
   20864:	426d      	negs	r5, r5
{
   20866:	b089      	sub	sp, #36	; 0x24
   20868:	4681      	mov	r9, r0
   2086a:	460e      	mov	r6, r1
   2086c:	4617      	mov	r7, r2
	block_size =
   2086e:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   20872:	b91c      	cbnz	r4, 2087c <nvs_flash_block_cmp+0x22>
	return 0;
   20874:	4620      	mov	r0, r4
}
   20876:	b009      	add	sp, #36	; 0x24
   20878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2087c:	42ac      	cmp	r4, r5
   2087e:	46a0      	mov	r8, r4
   20880:	bf28      	it	cs
   20882:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   20884:	4643      	mov	r3, r8
   20886:	466a      	mov	r2, sp
   20888:	4631      	mov	r1, r6
   2088a:	4648      	mov	r0, r9
   2088c:	f7ff ffd7 	bl	2083e <nvs_flash_rd>
		if (rc) {
   20890:	2800      	cmp	r0, #0
   20892:	d1f0      	bne.n	20876 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   20894:	4642      	mov	r2, r8
   20896:	4669      	mov	r1, sp
   20898:	4638      	mov	r0, r7
   2089a:	f001 fc95 	bl	221c8 <memcmp>
		if (rc) {
   2089e:	b920      	cbnz	r0, 208aa <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   208a0:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   208a4:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   208a6:	4447      	add	r7, r8
   208a8:	e7e3      	b.n	20872 <nvs_flash_block_cmp+0x18>
			return 1;
   208aa:	2001      	movs	r0, #1
   208ac:	e7e3      	b.n	20876 <nvs_flash_block_cmp+0x1c>

000208ae <nvs_flash_cmp_const>:
{
   208ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   208b2:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   208b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   208b6:	681d      	ldr	r5, [r3, #0]
   208b8:	426d      	negs	r5, r5
{
   208ba:	b088      	sub	sp, #32
	block_size =
   208bc:	f005 0520 	and.w	r5, r5, #32
{
   208c0:	4607      	mov	r7, r0
   208c2:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   208c4:	4668      	mov	r0, sp
{
   208c6:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   208c8:	462a      	mov	r2, r5
   208ca:	f001 fcb8 	bl	2223e <memset>
	while (len) {
   208ce:	b91c      	cbnz	r4, 208d8 <nvs_flash_cmp_const+0x2a>
	return 0;
   208d0:	4620      	mov	r0, r4
}
   208d2:	b008      	add	sp, #32
   208d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   208d8:	42ac      	cmp	r4, r5
   208da:	46a0      	mov	r8, r4
   208dc:	bf28      	it	cs
   208de:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   208e0:	4643      	mov	r3, r8
   208e2:	466a      	mov	r2, sp
   208e4:	4631      	mov	r1, r6
   208e6:	4638      	mov	r0, r7
   208e8:	f7ff ffb7 	bl	2085a <nvs_flash_block_cmp>
		if (rc) {
   208ec:	2800      	cmp	r0, #0
   208ee:	d1f0      	bne.n	208d2 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   208f0:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   208f4:	4446      	add	r6, r8
   208f6:	e7ea      	b.n	208ce <nvs_flash_cmp_const+0x20>

000208f8 <nvs_flash_erase_sector>:
{
   208f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   208fc:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   20900:	6806      	ldr	r6, [r0, #0]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   20902:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   20904:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20908:	0c09      	lsrs	r1, r1, #16
{
   2090a:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   2090c:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20910:	fb0a 6601 	mla	r6, sl, r1, r6
	const struct flash_driver_api *api =
   20914:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   20918:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2091c:	b9b3      	cbnz	r3, 2094c <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   2091e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   20922:	4652      	mov	r2, sl
   20924:	4631      	mov	r1, r6
   20926:	4638      	mov	r0, r7
   20928:	4798      	blx	r3
	if (api->write_protection != NULL) {
   2092a:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   2092e:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   20930:	b9ab      	cbnz	r3, 2095e <nvs_flash_erase_sector+0x66>
	if (rc) {
   20932:	b98c      	cbnz	r4, 20958 <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   20934:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   20936:	89ab      	ldrh	r3, [r5, #12]
   20938:	7912      	ldrb	r2, [r2, #4]
   2093a:	4641      	mov	r1, r8
   2093c:	4628      	mov	r0, r5
   2093e:	f7ff ffb6 	bl	208ae <nvs_flash_cmp_const>
		rc = -ENXIO;
   20942:	1e04      	subs	r4, r0, #0
   20944:	bf18      	it	ne
   20946:	f06f 0405 	mvnne.w	r4, #5
   2094a:	e005      	b.n	20958 <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   2094c:	2100      	movs	r1, #0
   2094e:	4638      	mov	r0, r7
   20950:	4798      	blx	r3
		if (rc) {
   20952:	4604      	mov	r4, r0
   20954:	2800      	cmp	r0, #0
   20956:	d0e2      	beq.n	2091e <nvs_flash_erase_sector+0x26>
}
   20958:	4620      	mov	r0, r4
   2095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   2095e:	2101      	movs	r1, #1
   20960:	4638      	mov	r0, r7
   20962:	4798      	blx	r3
   20964:	e7e5      	b.n	20932 <nvs_flash_erase_sector+0x3a>

00020966 <nvs_ate_crc8_update>:
{
   20966:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   20968:	4601      	mov	r1, r0
{
   2096a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2096c:	2207      	movs	r2, #7
   2096e:	20ff      	movs	r0, #255	; 0xff
   20970:	f7f0 f82c 	bl	109cc <crc8_ccitt>
	entry->crc8 = crc8;
   20974:	71e0      	strb	r0, [r4, #7]
}
   20976:	bd10      	pop	{r4, pc}

00020978 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   20978:	7800      	ldrb	r0, [r0, #0]
   2097a:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2097c:	bf81      	itttt	hi
   2097e:	1809      	addhi	r1, r1, r0
   20980:	f101 31ff 	addhi.w	r1, r1, #4294967295
   20984:	4240      	neghi	r0, r0
   20986:	4001      	andhi	r1, r0
}
   20988:	4608      	mov	r0, r1
   2098a:	4770      	bx	lr

0002098c <nvs_ate_valid>:
{
   2098c:	b570      	push	{r4, r5, r6, lr}
   2098e:	460c      	mov	r4, r1
   20990:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20992:	2108      	movs	r1, #8
   20994:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   20996:	f7ff ffef 	bl	20978 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2099a:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2099c:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2099e:	4621      	mov	r1, r4
   209a0:	20ff      	movs	r0, #255	; 0xff
   209a2:	f7f0 f813 	bl	109cc <crc8_ccitt>
	if (crc8 == entry->crc8) {
   209a6:	79e3      	ldrb	r3, [r4, #7]
   209a8:	4283      	cmp	r3, r0
   209aa:	d107      	bne.n	209bc <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   209ac:	89a8      	ldrh	r0, [r5, #12]
   209ae:	8863      	ldrh	r3, [r4, #2]
   209b0:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   209b2:	4283      	cmp	r3, r0
   209b4:	bf2c      	ite	cs
   209b6:	2000      	movcs	r0, #0
   209b8:	2001      	movcc	r0, #1
}
   209ba:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   209bc:	2000      	movs	r0, #0
   209be:	e7fc      	b.n	209ba <nvs_ate_valid+0x2e>

000209c0 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   209c0:	680b      	ldr	r3, [r1, #0]
   209c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   209c6:	0c1a      	lsrs	r2, r3, #16
   209c8:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   209cc:	bf08      	it	eq
   209ce:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   209d2:	600b      	str	r3, [r1, #0]
}
   209d4:	4770      	bx	lr

000209d6 <nvs_close_ate_valid>:
{
   209d6:	b538      	push	{r3, r4, r5, lr}
   209d8:	4605      	mov	r5, r0
   209da:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   209dc:	f7ff ffd6 	bl	2098c <nvs_ate_valid>
   209e0:	b1a0      	cbz	r0, 20a0c <nvs_close_ate_valid+0x36>
   209e2:	88a0      	ldrh	r0, [r4, #4]
   209e4:	b998      	cbnz	r0, 20a0e <nvs_close_ate_valid+0x38>
   209e6:	8822      	ldrh	r2, [r4, #0]
   209e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   209ec:	429a      	cmp	r2, r3
   209ee:	d10d      	bne.n	20a0c <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   209f0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   209f2:	2108      	movs	r1, #8
   209f4:	f7ff ffc0 	bl	20978 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   209f8:	8862      	ldrh	r2, [r4, #2]
   209fa:	89ab      	ldrh	r3, [r5, #12]
   209fc:	1a9b      	subs	r3, r3, r2
   209fe:	fbb3 f2f0 	udiv	r2, r3, r0
   20a02:	fb02 3010 	mls	r0, r2, r0, r3
   20a06:	fab0 f080 	clz	r0, r0
   20a0a:	0940      	lsrs	r0, r0, #5
}
   20a0c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   20a0e:	2000      	movs	r0, #0
   20a10:	e7fc      	b.n	20a0c <nvs_close_ate_valid+0x36>

00020a12 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   20a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20a16:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   20a18:	4605      	mov	r5, r0
	offset += addr & ADDR_OFFS_MASK;
   20a1a:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   20a1c:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20a1e:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   20a20:	fa10 f181 	uxtah	r1, r0, r1
   20a24:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   20a28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20a2a:	681e      	ldr	r6, [r3, #0]
   20a2c:	4276      	negs	r6, r6
	if (blen > 0) {
   20a2e:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   20a30:	b088      	sub	sp, #32
   20a32:	4690      	mov	r8, r2
	if (blen > 0) {
   20a34:	d008      	beq.n	20a48 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   20a36:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   20a38:	4633      	mov	r3, r6
   20a3a:	4639      	mov	r1, r7
   20a3c:	f7ff fee0 	bl	20800 <z_impl_flash_write>
		if (rc) {
   20a40:	b9b8      	cbnz	r0, 20a72 <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   20a42:	1ba4      	subs	r4, r4, r6
		offset += blen;
   20a44:	4437      	add	r7, r6
		data8 += blen;
   20a46:	44b0      	add	r8, r6
	if (len) {
   20a48:	b1b4      	cbz	r4, 20a78 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   20a4a:	4622      	mov	r2, r4
   20a4c:	4641      	mov	r1, r8
   20a4e:	4668      	mov	r0, sp
   20a50:	f001 fbca 	bl	221e8 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   20a54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20a56:	681a      	ldr	r2, [r3, #0]
   20a58:	7919      	ldrb	r1, [r3, #4]
   20a5a:	1b12      	subs	r2, r2, r4
   20a5c:	eb0d 0004 	add.w	r0, sp, r4
   20a60:	f001 fbed 	bl	2223e <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   20a64:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   20a68:	681b      	ldr	r3, [r3, #0]
   20a6a:	466a      	mov	r2, sp
   20a6c:	4639      	mov	r1, r7
   20a6e:	f7ff fec7 	bl	20800 <z_impl_flash_write>
}
   20a72:	b008      	add	sp, #32
   20a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   20a78:	4620      	mov	r0, r4
   20a7a:	e7fa      	b.n	20a72 <nvs_flash_al_wrt.part.0+0x60>

00020a7c <nvs_flash_ate_wrt>:
{
   20a7c:	b510      	push	{r4, lr}
   20a7e:	460a      	mov	r2, r1
	if (!len) {
   20a80:	2308      	movs	r3, #8
   20a82:	6841      	ldr	r1, [r0, #4]
{
   20a84:	4604      	mov	r4, r0
   20a86:	f7ff ffc4 	bl	20a12 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   20a8a:	2108      	movs	r1, #8
   20a8c:	4603      	mov	r3, r0
   20a8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   20a90:	f7ff ff72 	bl	20978 <nvs_al_size.isra.0>
   20a94:	6862      	ldr	r2, [r4, #4]
   20a96:	1a12      	subs	r2, r2, r0
   20a98:	6062      	str	r2, [r4, #4]
}
   20a9a:	4618      	mov	r0, r3
   20a9c:	bd10      	pop	{r4, pc}

00020a9e <nvs_prev_ate>:
{
   20a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20aa0:	4605      	mov	r5, r0
   20aa2:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20aa4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   20aa6:	2108      	movs	r1, #8
   20aa8:	f7ff ff66 	bl	20978 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20aac:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20aae:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20ab0:	2308      	movs	r3, #8
   20ab2:	4628      	mov	r0, r5
   20ab4:	f7ff fec3 	bl	2083e <nvs_flash_rd>
	if (rc) {
   20ab8:	4604      	mov	r4, r0
   20aba:	2800      	cmp	r0, #0
   20abc:	d138      	bne.n	20b30 <nvs_prev_ate+0x92>
	*addr += ate_size;
   20abe:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   20ac0:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   20ac2:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   20ac4:	b29a      	uxth	r2, r3
   20ac6:	1bc7      	subs	r7, r0, r7
   20ac8:	42ba      	cmp	r2, r7
	*addr += ate_size;
   20aca:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   20acc:	d130      	bne.n	20b30 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   20ace:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   20ad0:	bf03      	ittte	eq
   20ad2:	89e9      	ldrheq	r1, [r5, #14]
   20ad4:	f101 31ff 	addeq.w	r1, r1, #4294967295
   20ad8:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   20adc:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   20ae0:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20ae2:	2308      	movs	r3, #8
   20ae4:	466a      	mov	r2, sp
   20ae6:	4628      	mov	r0, r5
   20ae8:	f7ff fea9 	bl	2083e <nvs_flash_rd>
	if (rc) {
   20aec:	4604      	mov	r4, r0
   20aee:	b9f8      	cbnz	r0, 20b30 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   20af0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20af2:	466a      	mov	r2, sp
   20af4:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   20af6:	4603      	mov	r3, r0
		if (data8[i] != value) {
   20af8:	f812 0b01 	ldrb.w	r0, [r2], #1
   20afc:	4281      	cmp	r1, r0
   20afe:	d10c      	bne.n	20b1a <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   20b00:	3301      	adds	r3, #1
   20b02:	2b08      	cmp	r3, #8
   20b04:	d1f8      	bne.n	20af8 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   20b06:	686b      	ldr	r3, [r5, #4]
   20b08:	e005      	b.n	20b16 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   20b0a:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   20b0c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   20b10:	0c1b      	lsrs	r3, r3, #16
   20b12:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   20b14:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   20b16:	6033      	str	r3, [r6, #0]
		return 0;
   20b18:	e00a      	b.n	20b30 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   20b1a:	4669      	mov	r1, sp
   20b1c:	4628      	mov	r0, r5
   20b1e:	f7ff ff5a 	bl	209d6 <nvs_close_ate_valid>
   20b22:	2800      	cmp	r0, #0
   20b24:	d1f1      	bne.n	20b0a <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   20b26:	4631      	mov	r1, r6
   20b28:	4628      	mov	r0, r5
   20b2a:	f7f1 f9f1 	bl	11f10 <nvs_recover_last_ate>
   20b2e:	4604      	mov	r4, r0
}
   20b30:	4620      	mov	r0, r4
   20b32:	b003      	add	sp, #12
   20b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020b36 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   20b36:	2300      	movs	r3, #0
   20b38:	461a      	mov	r2, r3
   20b3a:	f7f1 bc5d 	b.w	123f8 <nvs_write>

00020b3e <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   20b3e:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   20b40:	2400      	movs	r4, #0
   20b42:	9400      	str	r4, [sp, #0]
   20b44:	f7f1 fd3c 	bl	125c0 <nvs_read_hist>
	return rc;
}
   20b48:	b002      	add	sp, #8
   20b4a:	bd10      	pop	{r4, pc}

00020b4c <device_get_binding>:
   20b4c:	f7fd ba06 	b.w	1df5c <z_impl_device_get_binding>

00020b50 <get_sectors_cb>:
{
   20b50:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   20b52:	6802      	ldr	r2, [r0, #0]
   20b54:	684c      	ldr	r4, [r1, #4]
   20b56:	42a2      	cmp	r2, r4
   20b58:	d316      	bcc.n	20b88 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   20b5a:	688b      	ldr	r3, [r1, #8]
   20b5c:	4423      	add	r3, r4
   20b5e:	429a      	cmp	r2, r3
   20b60:	d206      	bcs.n	20b70 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   20b62:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   20b66:	42ab      	cmp	r3, r5
   20b68:	d304      	bcc.n	20b74 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   20b6a:	f06f 030b 	mvn.w	r3, #11
   20b6e:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   20b70:	2000      	movs	r0, #0
   20b72:	e00a      	b.n	20b8a <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   20b74:	68cd      	ldr	r5, [r1, #12]
   20b76:	1b12      	subs	r2, r2, r4
   20b78:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   20b7c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   20b80:	6842      	ldr	r2, [r0, #4]
   20b82:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   20b84:	3301      	adds	r3, #1
   20b86:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   20b88:	2001      	movs	r0, #1
}
   20b8a:	bd70      	pop	{r4, r5, r6, pc}

00020b8c <settings_load>:
	return settings_load_subtree(NULL);
   20b8c:	2000      	movs	r0, #0
   20b8e:	f7f1 be0d 	b.w	127ac <settings_load_subtree>

00020b92 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   20b92:	2200      	movs	r2, #0
   20b94:	4611      	mov	r1, r2
   20b96:	f7f1 bdcf 	b.w	12738 <settings_save_one>

00020b9a <settings_name_steq>:
{
   20b9a:	4603      	mov	r3, r0
   20b9c:	b530      	push	{r4, r5, lr}
   20b9e:	4608      	mov	r0, r1
	if (next) {
   20ba0:	b10a      	cbz	r2, 20ba6 <settings_name_steq+0xc>
		*next = NULL;
   20ba2:	2100      	movs	r1, #0
   20ba4:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   20ba6:	b163      	cbz	r3, 20bc2 <settings_name_steq+0x28>
   20ba8:	b190      	cbz	r0, 20bd0 <settings_name_steq+0x36>
   20baa:	1e41      	subs	r1, r0, #1
   20bac:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   20bae:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   20bb2:	4604      	mov	r4, r0
   20bb4:	f810 3b01 	ldrb.w	r3, [r0], #1
   20bb8:	b15d      	cbz	r5, 20bd2 <settings_name_steq+0x38>
   20bba:	429d      	cmp	r5, r3
   20bbc:	d101      	bne.n	20bc2 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   20bbe:	2d3d      	cmp	r5, #61	; 0x3d
   20bc0:	d1f5      	bne.n	20bae <settings_name_steq+0x14>
	return 0;
   20bc2:	2000      	movs	r0, #0
   20bc4:	e004      	b.n	20bd0 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   20bc6:	2b3d      	cmp	r3, #61	; 0x3d
   20bc8:	d008      	beq.n	20bdc <settings_name_steq+0x42>
   20bca:	fab3 f083 	clz	r0, r3
   20bce:	0940      	lsrs	r0, r0, #5
}
   20bd0:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   20bd2:	2b2f      	cmp	r3, #47	; 0x2f
   20bd4:	d1f7      	bne.n	20bc6 <settings_name_steq+0x2c>
		if (next) {
   20bd6:	b10a      	cbz	r2, 20bdc <settings_name_steq+0x42>
			*next = name + 1;
   20bd8:	3401      	adds	r4, #1
   20bda:	6014      	str	r4, [r2, #0]
		return 1;
   20bdc:	2001      	movs	r0, #1
   20bde:	e7f7      	b.n	20bd0 <settings_name_steq+0x36>

00020be0 <settings_name_next>:
{
   20be0:	b530      	push	{r4, r5, lr}
   20be2:	4603      	mov	r3, r0
	if (next) {
   20be4:	b109      	cbz	r1, 20bea <settings_name_next+0xa>
		*next = NULL;
   20be6:	2200      	movs	r2, #0
   20be8:	600a      	str	r2, [r1, #0]
	if (!name) {
   20bea:	b16b      	cbz	r3, 20c08 <settings_name_next+0x28>
   20bec:	461a      	mov	r2, r3
   20bee:	4614      	mov	r4, r2
   20bf0:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   20bf2:	f812 5b01 	ldrb.w	r5, [r2], #1
   20bf6:	b135      	cbz	r5, 20c06 <settings_name_next+0x26>
   20bf8:	2d3d      	cmp	r5, #61	; 0x3d
   20bfa:	d004      	beq.n	20c06 <settings_name_next+0x26>
   20bfc:	2d2f      	cmp	r5, #47	; 0x2f
   20bfe:	d1f6      	bne.n	20bee <settings_name_next+0xe>
		if (next) {
   20c00:	b109      	cbz	r1, 20c06 <settings_name_next+0x26>
			*next = name + 1;
   20c02:	3401      	adds	r4, #1
   20c04:	600c      	str	r4, [r1, #0]
}
   20c06:	bd30      	pop	{r4, r5, pc}
		return 0;
   20c08:	4618      	mov	r0, r3
   20c0a:	e7fc      	b.n	20c06 <settings_name_next+0x26>

00020c0c <settings_nvs_read_fn>:
{
   20c0c:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   20c0e:	4613      	mov	r3, r2
{
   20c10:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   20c12:	460a      	mov	r2, r1
   20c14:	8881      	ldrh	r1, [r0, #4]
   20c16:	6800      	ldr	r0, [r0, #0]
   20c18:	f7ff ff91 	bl	20b3e <nvs_read>
}
   20c1c:	42a0      	cmp	r0, r4
   20c1e:	bfa8      	it	ge
   20c20:	4620      	movge	r0, r4
   20c22:	bd10      	pop	{r4, pc}

00020c24 <settings_nvs_save>:
{
   20c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c28:	b097      	sub	sp, #92	; 0x5c
   20c2a:	4604      	mov	r4, r0
   20c2c:	9201      	str	r2, [sp, #4]
   20c2e:	469b      	mov	fp, r3
	if (!name) {
   20c30:	4689      	mov	r9, r1
   20c32:	2900      	cmp	r1, #0
   20c34:	d069      	beq.n	20d0a <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   20c36:	b1da      	cbz	r2, 20c70 <settings_nvs_save+0x4c>
   20c38:	fabb f78b 	clz	r7, fp
   20c3c:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   20c3e:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   20c40:	3501      	adds	r5, #1
   20c42:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   20c44:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   20c46:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   20c4a:	1e6e      	subs	r6, r5, #1
   20c4c:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   20c4e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   20c52:	d02e      	beq.n	20cb2 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   20c54:	234a      	movs	r3, #74	; 0x4a
   20c56:	aa03      	add	r2, sp, #12
   20c58:	4631      	mov	r1, r6
   20c5a:	4650      	mov	r0, sl
   20c5c:	f7ff ff6f 	bl	20b3e <nvs_read>
		if (rc < 0) {
   20c60:	2800      	cmp	r0, #0
   20c62:	da07      	bge.n	20c74 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   20c64:	f110 0f02 	cmn.w	r0, #2
   20c68:	bf08      	it	eq
   20c6a:	46b0      	moveq	r8, r6
   20c6c:	4635      	mov	r5, r6
   20c6e:	e7ec      	b.n	20c4a <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   20c70:	2701      	movs	r7, #1
   20c72:	e7e4      	b.n	20c3e <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   20c74:	ab16      	add	r3, sp, #88	; 0x58
   20c76:	4418      	add	r0, r3
   20c78:	2300      	movs	r3, #0
   20c7a:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   20c7e:	a903      	add	r1, sp, #12
   20c80:	4648      	mov	r0, r9
   20c82:	f001 fa86 	bl	22192 <strcmp>
   20c86:	2800      	cmp	r0, #0
   20c88:	d1f0      	bne.n	20c6c <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   20c8a:	2f00      	cmp	r7, #0
   20c8c:	d03b      	beq.n	20d06 <settings_nvs_save+0xe2>
   20c8e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   20c90:	42b3      	cmp	r3, r6
   20c92:	d142      	bne.n	20d1a <settings_nvs_save+0xf6>
			cf->last_name_id--;
   20c94:	4622      	mov	r2, r4
   20c96:	1e73      	subs	r3, r6, #1
   20c98:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   20c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20ca0:	2302      	movs	r3, #2
   20ca2:	4650      	mov	r0, sl
   20ca4:	f7f1 fba8 	bl	123f8 <nvs_write>
			if (rc < 0) {
   20ca8:	2800      	cmp	r0, #0
   20caa:	da36      	bge.n	20d1a <settings_nvs_save+0xf6>
}
   20cac:	b017      	add	sp, #92	; 0x5c
   20cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   20cb2:	bb6f      	cbnz	r7, 20d10 <settings_nvs_save+0xec>
	write_name = true;
   20cb4:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   20cb6:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   20cba:	d02b      	beq.n	20d14 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   20cbc:	f104 0508 	add.w	r5, r4, #8
   20cc0:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   20cc4:	9a01      	ldr	r2, [sp, #4]
   20cc6:	465b      	mov	r3, fp
   20cc8:	b289      	uxth	r1, r1
   20cca:	4628      	mov	r0, r5
   20ccc:	f7f1 fb94 	bl	123f8 <nvs_write>
	if (rc < 0) {
   20cd0:	2800      	cmp	r0, #0
   20cd2:	dbeb      	blt.n	20cac <settings_nvs_save+0x88>
	if (write_name) {
   20cd4:	b157      	cbz	r7, 20cec <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   20cd6:	4648      	mov	r0, r9
   20cd8:	f001 fa4b 	bl	22172 <strlen>
   20cdc:	464a      	mov	r2, r9
   20cde:	4603      	mov	r3, r0
   20ce0:	4641      	mov	r1, r8
   20ce2:	4628      	mov	r0, r5
   20ce4:	f7f1 fb88 	bl	123f8 <nvs_write>
		if (rc < 0) {
   20ce8:	2800      	cmp	r0, #0
   20cea:	dbdf      	blt.n	20cac <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   20cec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   20cee:	4543      	cmp	r3, r8
   20cf0:	d220      	bcs.n	20d34 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   20cf2:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   20cf4:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   20cf6:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   20cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20cfe:	4628      	mov	r0, r5
   20d00:	f7f1 fb7a 	bl	123f8 <nvs_write>
   20d04:	e016      	b.n	20d34 <settings_nvs_save+0x110>
   20d06:	46b0      	mov	r8, r6
   20d08:	e7d5      	b.n	20cb6 <settings_nvs_save+0x92>
		return -EINVAL;
   20d0a:	f06f 0015 	mvn.w	r0, #21
   20d0e:	e7cd      	b.n	20cac <settings_nvs_save+0x88>
		return 0;
   20d10:	2000      	movs	r0, #0
   20d12:	e7cb      	b.n	20cac <settings_nvs_save+0x88>
		return -ENOMEM;
   20d14:	f06f 000b 	mvn.w	r0, #11
   20d18:	e7c8      	b.n	20cac <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   20d1a:	4631      	mov	r1, r6
   20d1c:	4650      	mov	r0, sl
   20d1e:	f7ff ff0a 	bl	20b36 <nvs_delete>
			if (rc >= 0) {
   20d22:	2800      	cmp	r0, #0
   20d24:	dbc2      	blt.n	20cac <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   20d26:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   20d2a:	313f      	adds	r1, #63	; 0x3f
   20d2c:	b289      	uxth	r1, r1
   20d2e:	4650      	mov	r0, sl
   20d30:	f7ff ff01 	bl	20b36 <nvs_delete>
	if (rc < 0) {
   20d34:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   20d38:	e7b8      	b.n	20cac <settings_nvs_save+0x88>

00020d3a <settings_nvs_backend_init>:
{
   20d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   20d3c:	f100 0608 	add.w	r6, r0, #8
   20d40:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   20d42:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   20d44:	4630      	mov	r0, r6
   20d46:	f7f1 f9d7 	bl	120f8 <nvs_init>
	if (rc) {
   20d4a:	4605      	mov	r5, r0
   20d4c:	b970      	cbnz	r0, 20d6c <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   20d4e:	2302      	movs	r3, #2
   20d50:	f10d 0206 	add.w	r2, sp, #6
   20d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20d58:	4630      	mov	r0, r6
   20d5a:	f7ff fef0 	bl	20b3e <nvs_read>
	if (rc < 0) {
   20d5e:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   20d60:	bfac      	ite	ge
   20d62:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   20d66:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   20d6a:	8723      	strh	r3, [r4, #56]	; 0x38
}
   20d6c:	4628      	mov	r0, r5
   20d6e:	b002      	add	sp, #8
   20d70:	bd70      	pop	{r4, r5, r6, pc}

00020d72 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   20d72:	2200      	movs	r2, #0
   20d74:	e9c0 2200 	strd	r2, r2, [r0]
   20d78:	6082      	str	r2, [r0, #8]
}
   20d7a:	4770      	bx	lr

00020d7c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   20d7c:	6902      	ldr	r2, [r0, #16]
   20d7e:	b2cb      	uxtb	r3, r1
   20d80:	210c      	movs	r1, #12
   20d82:	fb03 2101 	mla	r1, r3, r1, r2
   20d86:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   20d88:	f000 0007 	and.w	r0, r0, #7
   20d8c:	4770      	bx	lr

00020d8e <set_off_state>:
	__asm__ volatile(
   20d8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d92:	f3ef 8211 	mrs	r2, BASEPRI
   20d96:	f383 8811 	msr	BASEPRI, r3
   20d9a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   20d9e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   20da0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   20da4:	d001      	beq.n	20daa <set_off_state+0x1c>
   20da6:	428b      	cmp	r3, r1
   20da8:	d107      	bne.n	20dba <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   20daa:	2301      	movs	r3, #1
   20dac:	6003      	str	r3, [r0, #0]
	int err = 0;
   20dae:	2000      	movs	r0, #0
	__asm__ volatile(
   20db0:	f382 8811 	msr	BASEPRI, r2
   20db4:	f3bf 8f6f 	isb	sy
}
   20db8:	4770      	bx	lr
		err = -EPERM;
   20dba:	f04f 30ff 	mov.w	r0, #4294967295
   20dbe:	e7f7      	b.n	20db0 <set_off_state+0x22>

00020dc0 <set_starting_state>:
{
   20dc0:	b510      	push	{r4, lr}
	__asm__ volatile(
   20dc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   20dc6:	f3ef 8211 	mrs	r2, BASEPRI
   20dca:	f383 8811 	msr	BASEPRI, r3
   20dce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   20dd2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   20dd4:	f003 0407 	and.w	r4, r3, #7
   20dd8:	2c01      	cmp	r4, #1
   20dda:	d106      	bne.n	20dea <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   20ddc:	6001      	str	r1, [r0, #0]
	int err = 0;
   20dde:	2000      	movs	r0, #0
	__asm__ volatile(
   20de0:	f382 8811 	msr	BASEPRI, r2
   20de4:	f3bf 8f6f 	isb	sy
}
   20de8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   20dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   20dee:	428b      	cmp	r3, r1
		err = -EALREADY;
   20df0:	bf14      	ite	ne
   20df2:	f04f 30ff 	movne.w	r0, #4294967295
   20df6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   20dfa:	e7f1      	b.n	20de0 <set_starting_state+0x20>

00020dfc <set_on_state>:
	__asm__ volatile(
   20dfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e00:	f3ef 8211 	mrs	r2, BASEPRI
   20e04:	f383 8811 	msr	BASEPRI, r3
   20e08:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   20e0c:	6803      	ldr	r3, [r0, #0]
   20e0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20e12:	f043 0302 	orr.w	r3, r3, #2
   20e16:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   20e18:	f382 8811 	msr	BASEPRI, r2
   20e1c:	f3bf 8f6f 	isb	sy
}
   20e20:	4770      	bx	lr

00020e22 <onoff_started_callback>:
	return &data->mgr[type];
   20e22:	6900      	ldr	r0, [r0, #16]
{
   20e24:	b410      	push	{r4}
	return &data->mgr[type];
   20e26:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   20e28:	241c      	movs	r4, #28
   20e2a:	fb03 0004 	mla	r0, r3, r4, r0
   20e2e:	2100      	movs	r1, #0
}
   20e30:	bc10      	pop	{r4}
	notify(mgr, 0);
   20e32:	4710      	bx	r2

00020e34 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20e34:	2000      	movs	r0, #0
   20e36:	f003 bce8 	b.w	2480a <nrfx_clock_stop>

00020e3a <blocking_start_callback>:
{
   20e3a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   20e3c:	f7fd bbf4 	b.w	1e628 <z_impl_k_sem_give>

00020e40 <api_stop>:
{
   20e40:	b538      	push	{r3, r4, r5, lr}
   20e42:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   20e44:	240c      	movs	r4, #12
   20e46:	434c      	muls	r4, r1
{
   20e48:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   20e4a:	6900      	ldr	r0, [r0, #16]
   20e4c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20e50:	2180      	movs	r1, #128	; 0x80
   20e52:	4418      	add	r0, r3
   20e54:	f7ff ff9b 	bl	20d8e <set_off_state>
	if (err < 0) {
   20e58:	2800      	cmp	r0, #0
   20e5a:	db04      	blt.n	20e66 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   20e5c:	6869      	ldr	r1, [r5, #4]
   20e5e:	440c      	add	r4, r1
   20e60:	6863      	ldr	r3, [r4, #4]
   20e62:	4798      	blx	r3
	return 0;
   20e64:	2000      	movs	r0, #0
}
   20e66:	bd38      	pop	{r3, r4, r5, pc}

00020e68 <api_start>:
{
   20e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e6c:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   20e6e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   20e70:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   20e72:	434c      	muls	r4, r1
{
   20e74:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   20e76:	f104 0040 	add.w	r0, r4, #64	; 0x40
   20e7a:	2180      	movs	r1, #128	; 0x80
   20e7c:	4428      	add	r0, r5
{
   20e7e:	4690      	mov	r8, r2
   20e80:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   20e82:	f7ff ff9d 	bl	20dc0 <set_starting_state>
	if (err < 0) {
   20e86:	2800      	cmp	r0, #0
   20e88:	db06      	blt.n	20e98 <api_start+0x30>
	subdata->cb = cb;
   20e8a:	4425      	add	r5, r4
	subdata->user_data = user_data;
   20e8c:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   20e90:	6873      	ldr	r3, [r6, #4]
   20e92:	591b      	ldr	r3, [r3, r4]
   20e94:	4798      	blx	r3
	return 0;
   20e96:	2000      	movs	r0, #0
}
   20e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020e9c <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   20e9c:	4770      	bx	lr

00020e9e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   20e9e:	4770      	bx	lr

00020ea0 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   20ea0:	b538      	push	{r3, r4, r5, lr}
   20ea2:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   20ea4:	42ab      	cmp	r3, r5
{
   20ea6:	4611      	mov	r1, r2
   20ea8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   20eaa:	d804      	bhi.n	20eb6 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   20eac:	461a      	mov	r2, r3
   20eae:	f001 f99b 	bl	221e8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   20eb2:	4620      	mov	r0, r4
   20eb4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   20eb6:	2400      	movs	r4, #0
   20eb8:	e7fb      	b.n	20eb2 <_copy+0x12>

00020eba <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   20eba:	f001 b9c0 	b.w	2223e <memset>

00020ebe <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   20ebe:	09c3      	lsrs	r3, r0, #7
   20ec0:	005a      	lsls	r2, r3, #1
   20ec2:	4413      	add	r3, r2
   20ec4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   20ec8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   20ecc:	b2c0      	uxtb	r0, r0
   20ece:	4770      	bx	lr

00020ed0 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   20ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20ed4:	4606      	mov	r6, r0
   20ed6:	b0a9      	sub	sp, #164	; 0xa4
   20ed8:	4688      	mov	r8, r1
   20eda:	4614      	mov	r4, r2
   20edc:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   20ede:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   20ee2:	f7f2 f98b 	bl	131fc <uECC_get_rng>
		if (!rng_function ||
   20ee6:	4603      	mov	r3, r0
   20ee8:	2800      	cmp	r0, #0
   20eea:	d03e      	beq.n	20f6a <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   20eec:	2140      	movs	r1, #64	; 0x40
   20eee:	a808      	add	r0, sp, #32
   20ef0:	4798      	blx	r3
		if (!rng_function ||
   20ef2:	b3d0      	cbz	r0, 20f6a <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   20ef4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   20ef8:	f112 031f 	adds.w	r3, r2, #31
   20efc:	bf48      	it	mi
   20efe:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   20f02:	466d      	mov	r5, sp
   20f04:	464a      	mov	r2, r9
   20f06:	a908      	add	r1, sp, #32
   20f08:	4628      	mov	r0, r5
   20f0a:	f343 1347 	sbfx	r3, r3, #5, #8
   20f0e:	f000 fa03 	bl	21318 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   20f12:	4622      	mov	r2, r4
   20f14:	4629      	mov	r1, r5
   20f16:	a818      	add	r0, sp, #96	; 0x60
   20f18:	f000 fe19 	bl	21b4e <EccPoint_compute_public_key>
   20f1c:	b318      	cbz	r0, 20f66 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   20f1e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   20f22:	1dd9      	adds	r1, r3, #7
   20f24:	bf48      	it	mi
   20f26:	f103 010e 	addmi.w	r1, r3, #14
   20f2a:	462a      	mov	r2, r5
   20f2c:	4640      	mov	r0, r8
   20f2e:	10c9      	asrs	r1, r1, #3
   20f30:	f000 fe35 	bl	21b9e <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   20f34:	f994 1001 	ldrsb.w	r1, [r4, #1]
   20f38:	aa18      	add	r2, sp, #96	; 0x60
   20f3a:	4630      	mov	r0, r6
   20f3c:	f000 fe2f 	bl	21b9e <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   20f40:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   20f44:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   20f48:	ab18      	add	r3, sp, #96	; 0x60
   20f4a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   20f4e:	1870      	adds	r0, r6, r1
   20f50:	f000 fe25 	bl	21b9e <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   20f54:	2220      	movs	r2, #32
   20f56:	2100      	movs	r1, #0
   20f58:	4628      	mov	r0, r5
   20f5a:	f001 f970 	bl	2223e <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   20f5e:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   20f60:	b029      	add	sp, #164	; 0xa4
   20f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   20f66:	3f01      	subs	r7, #1
   20f68:	d1bb      	bne.n	20ee2 <uECC_make_key+0x12>
        		return 0;
   20f6a:	2000      	movs	r0, #0
   20f6c:	e7f8      	b.n	20f60 <uECC_make_key+0x90>

00020f6e <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   20f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f72:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   20f74:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   20f78:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   20f7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   20f80:	b0a4      	sub	sp, #144	; 0x90
   20f82:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   20f84:	1dda      	adds	r2, r3, #7
   20f86:	bf48      	it	mi
   20f88:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   20f8c:	ad04      	add	r5, sp, #16
{
   20f8e:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   20f90:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   20f92:	4628      	mov	r0, r5
   20f94:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   20f96:	9502      	str	r5, [sp, #8]
   20f98:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   20f9a:	f000 fe14 	bl	21bc6 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   20f9e:	463a      	mov	r2, r7
   20fa0:	4649      	mov	r1, r9
   20fa2:	a814      	add	r0, sp, #80	; 0x50
   20fa4:	f000 fe0f 	bl	21bc6 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   20fa8:	ab14      	add	r3, sp, #80	; 0x50
   20faa:	eb09 0107 	add.w	r1, r9, r7
   20fae:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   20fb2:	463a      	mov	r2, r7
   20fb4:	f000 fe07 	bl	21bc6 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   20fb8:	4623      	mov	r3, r4
   20fba:	4632      	mov	r2, r6
   20fbc:	4629      	mov	r1, r5
   20fbe:	4628      	mov	r0, r5
   20fc0:	f000 fd99 	bl	21af6 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   20fc4:	fab0 f080 	clz	r0, r0
   20fc8:	9401      	str	r4, [sp, #4]
   20fca:	ab24      	add	r3, sp, #144	; 0x90
   20fcc:	0940      	lsrs	r0, r0, #5
   20fce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   20fd2:	8863      	ldrh	r3, [r4, #2]
   20fd4:	3301      	adds	r3, #1
   20fd6:	b21b      	sxth	r3, r3
   20fd8:	9300      	str	r3, [sp, #0]
   20fda:	a914      	add	r1, sp, #80	; 0x50
   20fdc:	2300      	movs	r3, #0
   20fde:	f850 2c88 	ldr.w	r2, [r0, #-136]
   20fe2:	4608      	mov	r0, r1
   20fe4:	f000 fcb8 	bl	21958 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   20fe8:	aa14      	add	r2, sp, #80	; 0x50
   20fea:	4639      	mov	r1, r7
   20fec:	4640      	mov	r0, r8
   20fee:	f000 fdd6 	bl	21b9e <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   20ff2:	4621      	mov	r1, r4
   20ff4:	a814      	add	r0, sp, #80	; 0x50
   20ff6:	f000 fc24 	bl	21842 <EccPoint_isZero>
   20ffa:	af02      	add	r7, sp, #8
   20ffc:	4604      	mov	r4, r0
   20ffe:	2208      	movs	r2, #8
   21000:	2100      	movs	r1, #0
   21002:	4638      	mov	r0, r7
   21004:	f001 f91b 	bl	2223e <memset>
   21008:	2220      	movs	r2, #32
   2100a:	2100      	movs	r1, #0
   2100c:	4630      	mov	r0, r6
   2100e:	f001 f916 	bl	2223e <memset>
   21012:	2220      	movs	r2, #32
   21014:	2100      	movs	r1, #0
   21016:	4628      	mov	r0, r5
   21018:	f001 f911 	bl	2223e <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   2101c:	fab4 f084 	clz	r0, r4
   21020:	0940      	lsrs	r0, r0, #5
   21022:	b024      	add	sp, #144	; 0x90
   21024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021028 <uECC_vli_add>:
{
   21028:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2102a:	2400      	movs	r4, #0
{
   2102c:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   2102e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   21030:	b265      	sxtb	r5, r4
   21032:	42ab      	cmp	r3, r5
   21034:	dc00      	bgt.n	21038 <uECC_vli_add+0x10>
}
   21036:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   21038:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2103c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   21040:	443d      	add	r5, r7
   21042:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   21044:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   21046:	bf8c      	ite	hi
   21048:	2701      	movhi	r7, #1
   2104a:	2700      	movls	r7, #0
		result[i] = sum;
   2104c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   21050:	bf18      	it	ne
   21052:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   21054:	3401      	adds	r4, #1
   21056:	e7eb      	b.n	21030 <uECC_vli_add+0x8>

00021058 <uECC_vli_rshift1>:
	vli += num_words;
   21058:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   2105c:	2300      	movs	r3, #0
	while (vli-- > end) {
   2105e:	4288      	cmp	r0, r1
   21060:	d300      	bcc.n	21064 <uECC_vli_rshift1+0xc>
}
   21062:	4770      	bx	lr
		uECC_word_t temp = *vli;
   21064:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   21068:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2106c:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   2106e:	07d3      	lsls	r3, r2, #31
   21070:	e7f5      	b.n	2105e <uECC_vli_rshift1+0x6>

00021072 <vli_modInv_update>:
	if (!EVEN(uv)) {
   21072:	6803      	ldr	r3, [r0, #0]
{
   21074:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   21076:	f013 0601 	ands.w	r6, r3, #1
{
   2107a:	4605      	mov	r5, r0
   2107c:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   2107e:	d005      	beq.n	2108c <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   21080:	4613      	mov	r3, r2
   21082:	460a      	mov	r2, r1
   21084:	4601      	mov	r1, r0
   21086:	f7ff ffcf 	bl	21028 <uECC_vli_add>
   2108a:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2108c:	4621      	mov	r1, r4
   2108e:	4628      	mov	r0, r5
   21090:	f7ff ffe2 	bl	21058 <uECC_vli_rshift1>
	if (carry) {
   21094:	b146      	cbz	r6, 210a8 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   21096:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2109a:	3a01      	subs	r2, #1
   2109c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   210a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   210a4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   210a8:	bd70      	pop	{r4, r5, r6, pc}

000210aa <uECC_vli_mult>:
{
   210aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   210ae:	2500      	movs	r5, #0
{
   210b0:	b087      	sub	sp, #28
   210b2:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   210b6:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   210b8:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   210ba:	fa4f f885 	sxtb.w	r8, r5
   210be:	4543      	cmp	r3, r8
   210c0:	dc16      	bgt.n	210f0 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   210c2:	f04f 35ff 	mov.w	r5, #4294967295
   210c6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   210ca:	9502      	str	r5, [sp, #8]
   210cc:	f04f 0a00 	mov.w	sl, #0
   210d0:	9e02      	ldr	r6, [sp, #8]
   210d2:	fa53 fe8a 	uxtab	lr, r3, sl
   210d6:	fa4f fe8e 	sxtb.w	lr, lr
   210da:	45b6      	cmp	lr, r6
   210dc:	fa5f f58a 	uxtb.w	r5, sl
   210e0:	db2d      	blt.n	2113e <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   210e2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   210e6:	f840 2c04 	str.w	r2, [r0, #-4]
}
   210ea:	b007      	add	sp, #28
   210ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210f0:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   210f2:	f04f 0c00 	mov.w	ip, #0
   210f6:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   210fa:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   210fc:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   21100:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   21102:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   21106:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   2110a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2110e:	fba7 ab06 	umull	sl, fp, r7, r6
   21112:	eb1a 0601 	adds.w	r6, sl, r1
   21116:	f10c 0c01 	add.w	ip, ip, #1
   2111a:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   2111e:	fa4f fa8c 	sxtb.w	sl, ip
   21122:	bf2c      	ite	cs
   21124:	2201      	movcs	r2, #1
   21126:	2200      	movcc	r2, #0
   21128:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   2112a:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2112c:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   2112e:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   21130:	dde4      	ble.n	210fc <uECC_vli_mult+0x52>
		result[k] = r0;
   21132:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   21136:	463a      	mov	r2, r7
   21138:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   2113a:	4674      	mov	r4, lr
   2113c:	e7bd      	b.n	210ba <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2113e:	3501      	adds	r5, #1
   21140:	9900      	ldr	r1, [sp, #0]
   21142:	9e01      	ldr	r6, [sp, #4]
   21144:	fa4f fc85 	sxtb.w	ip, r5
   21148:	ebae 0b0c 	sub.w	fp, lr, ip
   2114c:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   21150:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   21154:	4621      	mov	r1, r4
   21156:	2400      	movs	r4, #0
   21158:	459c      	cmp	ip, r3
   2115a:	db05      	blt.n	21168 <uECC_vli_mult+0xbe>
		result[k] = r0;
   2115c:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   21160:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   21164:	460a      	mov	r2, r1
   21166:	e7b3      	b.n	210d0 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   21168:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2116c:	f855 7b04 	ldr.w	r7, [r5], #4
   21170:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   21174:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   21178:	fba7 6706 	umull	r6, r7, r7, r6
   2117c:	eb16 0801 	adds.w	r8, r6, r1
   21180:	eb57 0902 	adcs.w	r9, r7, r2
   21184:	bf2c      	ite	cs
   21186:	2201      	movcs	r2, #1
   21188:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2118a:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   2118e:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   21190:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   21192:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   21194:	fa4f fc8c 	sxtb.w	ip, ip
   21198:	e7de      	b.n	21158 <uECC_vli_mult+0xae>

0002119a <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2119a:	2300      	movs	r3, #0
{
   2119c:	b510      	push	{r4, lr}
		 vli[i] = 0;
   2119e:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   211a0:	b25a      	sxtb	r2, r3
   211a2:	4291      	cmp	r1, r2
   211a4:	dc00      	bgt.n	211a8 <uECC_vli_clear+0xe>
}
   211a6:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   211a8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   211ac:	3301      	adds	r3, #1
   211ae:	e7f7      	b.n	211a0 <uECC_vli_clear+0x6>

000211b0 <uECC_vli_isZero>:
{
   211b0:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   211b2:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   211b4:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   211b6:	b25c      	sxtb	r4, r3
   211b8:	42a1      	cmp	r1, r4
   211ba:	dc03      	bgt.n	211c4 <uECC_vli_isZero+0x14>
}
   211bc:	fab2 f082 	clz	r0, r2
   211c0:	0940      	lsrs	r0, r0, #5
   211c2:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   211c4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   211c8:	3301      	adds	r3, #1
   211ca:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   211cc:	e7f3      	b.n	211b6 <uECC_vli_isZero+0x6>

000211ce <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   211ce:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   211d0:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   211d2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   211d6:	f001 011f 	and.w	r1, r1, #31
   211da:	fa03 f101 	lsl.w	r1, r3, r1
}
   211de:	4008      	ands	r0, r1
   211e0:	4770      	bx	lr

000211e2 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   211e2:	3901      	subs	r1, #1
   211e4:	b24b      	sxtb	r3, r1
{
   211e6:	4602      	mov	r2, r0
   211e8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   211ec:	2b00      	cmp	r3, #0
   211ee:	da03      	bge.n	211f8 <uECC_vli_numBits+0x16>
	return (i + 1);
   211f0:	3301      	adds	r3, #1
   211f2:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   211f4:	b938      	cbnz	r0, 21206 <uECC_vli_numBits+0x24>
   211f6:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   211f8:	f851 0904 	ldr.w	r0, [r1], #-4
   211fc:	2800      	cmp	r0, #0
   211fe:	d1f7      	bne.n	211f0 <uECC_vli_numBits+0xe>
   21200:	3b01      	subs	r3, #1
   21202:	b25b      	sxtb	r3, r3
   21204:	e7f2      	b.n	211ec <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   21206:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2120a:	3b01      	subs	r3, #1
   2120c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   21210:	2300      	movs	r3, #0
   21212:	b922      	cbnz	r2, 2121e <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   21214:	3801      	subs	r0, #1
   21216:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2121a:	b200      	sxth	r0, r0
}
   2121c:	4770      	bx	lr
		digit >>= 1;
   2121e:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   21220:	3301      	adds	r3, #1
   21222:	e7f6      	b.n	21212 <uECC_vli_numBits+0x30>

00021224 <uECC_vli_set>:
{
   21224:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   21226:	2300      	movs	r3, #0
   21228:	b25c      	sxtb	r4, r3
   2122a:	42a2      	cmp	r2, r4
   2122c:	dc00      	bgt.n	21230 <uECC_vli_set+0xc>
}
   2122e:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   21230:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   21234:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   21238:	3301      	adds	r3, #1
   2123a:	e7f5      	b.n	21228 <uECC_vli_set+0x4>

0002123c <uECC_vli_cmp_unsafe>:
{
   2123c:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2123e:	3a01      	subs	r2, #1
   21240:	b253      	sxtb	r3, r2
   21242:	009a      	lsls	r2, r3, #2
   21244:	2b00      	cmp	r3, #0
   21246:	da01      	bge.n	2124c <uECC_vli_cmp_unsafe+0x10>
	return 0;
   21248:	2000      	movs	r0, #0
}
   2124a:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   2124c:	5885      	ldr	r5, [r0, r2]
   2124e:	588c      	ldr	r4, [r1, r2]
   21250:	42a5      	cmp	r5, r4
   21252:	d805      	bhi.n	21260 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   21254:	f1a2 0204 	sub.w	r2, r2, #4
   21258:	d304      	bcc.n	21264 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   2125a:	3b01      	subs	r3, #1
   2125c:	b25b      	sxtb	r3, r3
   2125e:	e7f1      	b.n	21244 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   21260:	2001      	movs	r0, #1
   21262:	e7f2      	b.n	2124a <uECC_vli_cmp_unsafe+0xe>
			return -1;
   21264:	f04f 30ff 	mov.w	r0, #4294967295
   21268:	e7ef      	b.n	2124a <uECC_vli_cmp_unsafe+0xe>

0002126a <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   2126a:	3a01      	subs	r2, #1
   2126c:	b253      	sxtb	r3, r2
{
   2126e:	b570      	push	{r4, r5, r6, lr}
   21270:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   21272:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   21274:	2b00      	cmp	r3, #0
   21276:	da03      	bge.n	21280 <uECC_vli_equal+0x16>
}
   21278:	1e20      	subs	r0, r4, #0
   2127a:	bf18      	it	ne
   2127c:	2001      	movne	r0, #1
   2127e:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   21280:	5885      	ldr	r5, [r0, r2]
   21282:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   21284:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   21286:	4075      	eors	r5, r6
   21288:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   2128a:	b25b      	sxtb	r3, r3
   2128c:	3a04      	subs	r2, #4
   2128e:	e7f1      	b.n	21274 <uECC_vli_equal+0xa>

00021290 <uECC_vli_sub>:
{
   21290:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   21292:	2400      	movs	r4, #0
{
   21294:	4606      	mov	r6, r0
   21296:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   21298:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2129a:	b265      	sxtb	r5, r4
   2129c:	45ac      	cmp	ip, r5
   2129e:	dc00      	bgt.n	212a2 <uECC_vli_sub+0x12>
}
   212a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   212a2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   212a6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   212aa:	1a3d      	subs	r5, r7, r0
   212ac:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   212ae:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   212b0:	bf34      	ite	cc
   212b2:	2701      	movcc	r7, #1
   212b4:	2700      	movcs	r7, #0
		result[i] = diff;
   212b6:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   212ba:	bf18      	it	ne
   212bc:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   212be:	3401      	adds	r4, #1
   212c0:	e7eb      	b.n	2129a <uECC_vli_sub+0xa>

000212c2 <uECC_vli_modAdd>:
{
   212c2:	b570      	push	{r4, r5, r6, lr}
   212c4:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   212c8:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   212ca:	4633      	mov	r3, r6
{
   212cc:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   212ce:	f7ff feab 	bl	21028 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   212d2:	b930      	cbnz	r0, 212e2 <uECC_vli_modAdd+0x20>
   212d4:	4632      	mov	r2, r6
   212d6:	4621      	mov	r1, r4
   212d8:	4628      	mov	r0, r5
   212da:	f7ff ffaf 	bl	2123c <uECC_vli_cmp_unsafe>
   212de:	2801      	cmp	r0, #1
   212e0:	d007      	beq.n	212f2 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   212e2:	4633      	mov	r3, r6
   212e4:	462a      	mov	r2, r5
   212e6:	4621      	mov	r1, r4
   212e8:	4620      	mov	r0, r4
}
   212ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   212ee:	f7ff bfcf 	b.w	21290 <uECC_vli_sub>
}
   212f2:	bd70      	pop	{r4, r5, r6, pc}

000212f4 <uECC_vli_modSub>:
{
   212f4:	b570      	push	{r4, r5, r6, lr}
   212f6:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   212fa:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   212fc:	4633      	mov	r3, r6
{
   212fe:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   21300:	f7ff ffc6 	bl	21290 <uECC_vli_sub>
	if (l_borrow) {
   21304:	b138      	cbz	r0, 21316 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   21306:	4633      	mov	r3, r6
   21308:	462a      	mov	r2, r5
   2130a:	4621      	mov	r1, r4
   2130c:	4620      	mov	r0, r4
}
   2130e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   21312:	f7ff be89 	b.w	21028 <uECC_vli_add>
}
   21316:	bd70      	pop	{r4, r5, r6, pc}

00021318 <uECC_vli_mmod>:
{
   21318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2131c:	b0a5      	sub	sp, #148	; 0x94
   2131e:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   21320:	ab14      	add	r3, sp, #80	; 0x50
   21322:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   21326:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   21328:	4629      	mov	r1, r5
   2132a:	4610      	mov	r0, r2
{
   2132c:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   2132e:	f7ff ff58 	bl	211e2 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   21332:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   21336:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   21338:	2c00      	cmp	r4, #0
   2133a:	4621      	mov	r1, r4
   2133c:	bfb8      	it	lt
   2133e:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   21342:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   21344:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   21348:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   2134c:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2134e:	f004 071f 	and.w	r7, r4, #31
   21352:	bf58      	it	pl
   21354:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   21356:	f7ff ff20 	bl	2119a <uECC_vli_clear>
	if (bit_shift > 0) {
   2135a:	2f00      	cmp	r7, #0
   2135c:	b208      	sxth	r0, r1
   2135e:	dd2b      	ble.n	213b8 <uECC_vli_mmod+0xa0>
   21360:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   21362:	2200      	movs	r2, #0
   21364:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   21368:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2136c:	4613      	mov	r3, r2
   2136e:	429d      	cmp	r5, r3
   21370:	d817      	bhi.n	213a2 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   21372:	006b      	lsls	r3, r5, #1
   21374:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21376:	ab04      	add	r3, sp, #16
   21378:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2137c:	1e6f      	subs	r7, r5, #1
   2137e:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21380:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21382:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   21386:	2c00      	cmp	r4, #0
   21388:	da54      	bge.n	21434 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   2138a:	ab24      	add	r3, sp, #144	; 0x90
   2138c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   21390:	462a      	mov	r2, r5
   21392:	f856 1c88 	ldr.w	r1, [r6, #-136]
   21396:	4640      	mov	r0, r8
   21398:	f7ff ff44 	bl	21224 <uECC_vli_set>
}
   2139c:	b025      	add	sp, #148	; 0x94
   2139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   213a2:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   213a6:	fa0c f007 	lsl.w	r0, ip, r7
   213aa:	4302      	orrs	r2, r0
   213ac:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   213b0:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   213b2:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   213b6:	e7da      	b.n	2136e <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   213b8:	ab04      	add	r3, sp, #16
   213ba:	462a      	mov	r2, r5
   213bc:	4631      	mov	r1, r6
   213be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   213c2:	f7ff ff2f 	bl	21224 <uECC_vli_set>
   213c6:	e7d4      	b.n	21372 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   213c8:	fa0f fe82 	sxth.w	lr, r2
   213cc:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   213d0:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   213d4:	ab24      	add	r3, sp, #144	; 0x90
   213d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   213da:	3001      	adds	r0, #1
   213dc:	f852 3c80 	ldr.w	r3, [r2, #-128]
   213e0:	440b      	add	r3, r1
   213e2:	ebbb 0303 	subs.w	r3, fp, r3
   213e6:	bf34      	ite	cc
   213e8:	2201      	movcc	r2, #1
   213ea:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   213ec:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   213ee:	bf18      	it	ne
   213f0:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   213f2:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   213f6:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   213fa:	9b01      	ldr	r3, [sp, #4]
   213fc:	b242      	sxtb	r2, r0
   213fe:	429a      	cmp	r2, r3
   21400:	dbe2      	blt.n	213c8 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   21402:	1a73      	subs	r3, r6, r1
   21404:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   21406:	4629      	mov	r1, r5
   21408:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2140a:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2140c:	f7ff fe24 	bl	21058 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21410:	ab24      	add	r3, sp, #144	; 0x90
   21412:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21416:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21418:	f853 2c80 	ldr.w	r2, [r3, #-128]
   2141c:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21420:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21422:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   21426:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21428:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   2142c:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2142e:	f7ff fe13 	bl	21058 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   21432:	e7a8      	b.n	21386 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   21434:	ab24      	add	r3, sp, #144	; 0x90
   21436:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   21438:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   2143c:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2143e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   21442:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   21446:	e7d8      	b.n	213fa <uECC_vli_mmod+0xe2>

00021448 <uECC_vli_modMult_fast>:
{
   21448:	b530      	push	{r4, r5, lr}
   2144a:	461c      	mov	r4, r3
   2144c:	b091      	sub	sp, #68	; 0x44
   2144e:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   21450:	f993 3000 	ldrsb.w	r3, [r3]
   21454:	4668      	mov	r0, sp
   21456:	f7ff fe28 	bl	210aa <uECC_vli_mult>
	curve->mmod_fast(result, product);
   2145a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   2145e:	4669      	mov	r1, sp
   21460:	4628      	mov	r0, r5
   21462:	4798      	blx	r3
}
   21464:	b011      	add	sp, #68	; 0x44
   21466:	bd30      	pop	{r4, r5, pc}

00021468 <uECC_vli_modSquare_fast>:
{
   21468:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   2146a:	460a      	mov	r2, r1
   2146c:	f7ff bfec 	b.w	21448 <uECC_vli_modMult_fast>

00021470 <double_jacobian_default>:
{
   21470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   21474:	f993 6000 	ldrsb.w	r6, [r3]
{
   21478:	b092      	sub	sp, #72	; 0x48
   2147a:	4604      	mov	r4, r0
   2147c:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   2147e:	4610      	mov	r0, r2
   21480:	4631      	mov	r1, r6
{
   21482:	4615      	mov	r5, r2
   21484:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   21486:	f7ff fe93 	bl	211b0 <uECC_vli_isZero>
   2148a:	2800      	cmp	r0, #0
   2148c:	f040 8091 	bne.w	215b2 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   21490:	463a      	mov	r2, r7
   21492:	4649      	mov	r1, r9
   21494:	a802      	add	r0, sp, #8
   21496:	f7ff ffe7 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2149a:	463b      	mov	r3, r7
   2149c:	aa02      	add	r2, sp, #8
   2149e:	4621      	mov	r1, r4
   214a0:	a80a      	add	r0, sp, #40	; 0x28
   214a2:	f7ff ffd1 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   214a6:	a902      	add	r1, sp, #8
   214a8:	4608      	mov	r0, r1
   214aa:	463a      	mov	r2, r7
   214ac:	f7ff ffdc 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   214b0:	463b      	mov	r3, r7
   214b2:	462a      	mov	r2, r5
   214b4:	4649      	mov	r1, r9
   214b6:	4648      	mov	r0, r9
   214b8:	f7ff ffc6 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   214bc:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   214c0:	463a      	mov	r2, r7
   214c2:	4629      	mov	r1, r5
   214c4:	4628      	mov	r0, r5
   214c6:	f7ff ffcf 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   214ca:	4643      	mov	r3, r8
   214cc:	462a      	mov	r2, r5
   214ce:	4621      	mov	r1, r4
   214d0:	4620      	mov	r0, r4
   214d2:	9600      	str	r6, [sp, #0]
   214d4:	f7ff fef5 	bl	212c2 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   214d8:	4643      	mov	r3, r8
   214da:	462a      	mov	r2, r5
   214dc:	4629      	mov	r1, r5
   214de:	4628      	mov	r0, r5
   214e0:	9600      	str	r6, [sp, #0]
   214e2:	f7ff feee 	bl	212c2 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   214e6:	4643      	mov	r3, r8
   214e8:	462a      	mov	r2, r5
   214ea:	4621      	mov	r1, r4
   214ec:	4628      	mov	r0, r5
   214ee:	9600      	str	r6, [sp, #0]
   214f0:	f7ff ff00 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   214f4:	463b      	mov	r3, r7
   214f6:	462a      	mov	r2, r5
   214f8:	4621      	mov	r1, r4
   214fa:	4620      	mov	r0, r4
   214fc:	f7ff ffa4 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   21500:	4643      	mov	r3, r8
   21502:	4622      	mov	r2, r4
   21504:	4621      	mov	r1, r4
   21506:	4628      	mov	r0, r5
   21508:	9600      	str	r6, [sp, #0]
   2150a:	f7ff feda 	bl	212c2 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   2150e:	4643      	mov	r3, r8
   21510:	9600      	str	r6, [sp, #0]
   21512:	462a      	mov	r2, r5
   21514:	4621      	mov	r1, r4
   21516:	4620      	mov	r0, r4
   21518:	f7ff fed3 	bl	212c2 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2151c:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   2151e:	07db      	lsls	r3, r3, #31
   21520:	d54a      	bpl.n	215b8 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   21522:	4633      	mov	r3, r6
   21524:	4642      	mov	r2, r8
   21526:	4621      	mov	r1, r4
   21528:	4620      	mov	r0, r4
   2152a:	f7ff fd7d 	bl	21028 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   2152e:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   21530:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   21532:	4620      	mov	r0, r4
   21534:	f7ff fd90 	bl	21058 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   21538:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2153c:	3b01      	subs	r3, #1
   2153e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   21542:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   21546:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2154a:	463a      	mov	r2, r7
   2154c:	4621      	mov	r1, r4
   2154e:	4628      	mov	r0, r5
   21550:	f7ff ff8a 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   21554:	4643      	mov	r3, r8
   21556:	aa0a      	add	r2, sp, #40	; 0x28
   21558:	4629      	mov	r1, r5
   2155a:	4628      	mov	r0, r5
   2155c:	9600      	str	r6, [sp, #0]
   2155e:	f7ff fec9 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   21562:	4643      	mov	r3, r8
   21564:	aa0a      	add	r2, sp, #40	; 0x28
   21566:	4629      	mov	r1, r5
   21568:	4628      	mov	r0, r5
   2156a:	9600      	str	r6, [sp, #0]
   2156c:	f7ff fec2 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   21570:	a90a      	add	r1, sp, #40	; 0x28
   21572:	4608      	mov	r0, r1
   21574:	4643      	mov	r3, r8
   21576:	462a      	mov	r2, r5
   21578:	9600      	str	r6, [sp, #0]
   2157a:	f7ff febb 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   2157e:	463b      	mov	r3, r7
   21580:	aa0a      	add	r2, sp, #40	; 0x28
   21582:	4621      	mov	r1, r4
   21584:	4620      	mov	r0, r4
   21586:	f7ff ff5f 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2158a:	aa02      	add	r2, sp, #8
   2158c:	4643      	mov	r3, r8
   2158e:	4610      	mov	r0, r2
   21590:	4621      	mov	r1, r4
   21592:	9600      	str	r6, [sp, #0]
   21594:	f7ff feae 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   21598:	4632      	mov	r2, r6
   2159a:	4629      	mov	r1, r5
   2159c:	4620      	mov	r0, r4
   2159e:	f7ff fe41 	bl	21224 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   215a2:	4649      	mov	r1, r9
   215a4:	4628      	mov	r0, r5
   215a6:	f7ff fe3d 	bl	21224 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   215aa:	a902      	add	r1, sp, #8
   215ac:	4648      	mov	r0, r9
   215ae:	f7ff fe39 	bl	21224 <uECC_vli_set>
}
   215b2:	b012      	add	sp, #72	; 0x48
   215b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   215b8:	4631      	mov	r1, r6
   215ba:	4620      	mov	r0, r4
   215bc:	f7ff fd4c 	bl	21058 <uECC_vli_rshift1>
   215c0:	e7c3      	b.n	2154a <double_jacobian_default+0xda>

000215c2 <x_side_default>:
{
   215c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215c6:	4615      	mov	r5, r2
   215c8:	b08a      	sub	sp, #40	; 0x28
   215ca:	4604      	mov	r4, r0
   215cc:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   215ce:	221c      	movs	r2, #28
   215d0:	2100      	movs	r1, #0
   215d2:	a803      	add	r0, sp, #12
   215d4:	f000 fe33 	bl	2223e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   215d8:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   215da:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   215de:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   215e0:	462a      	mov	r2, r5
   215e2:	4631      	mov	r1, r6
   215e4:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   215e6:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   215e8:	f7ff ff3e 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   215ec:	463b      	mov	r3, r7
   215ee:	aa02      	add	r2, sp, #8
   215f0:	4621      	mov	r1, r4
   215f2:	4620      	mov	r0, r4
   215f4:	f8cd 8000 	str.w	r8, [sp]
   215f8:	f7ff fe7c 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   215fc:	462b      	mov	r3, r5
   215fe:	4632      	mov	r2, r6
   21600:	4621      	mov	r1, r4
   21602:	4620      	mov	r0, r4
   21604:	f7ff ff20 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   21608:	f8cd 8000 	str.w	r8, [sp]
   2160c:	463b      	mov	r3, r7
   2160e:	f105 0284 	add.w	r2, r5, #132	; 0x84
   21612:	4621      	mov	r1, r4
   21614:	4620      	mov	r0, r4
   21616:	f7ff fe54 	bl	212c2 <uECC_vli_modAdd>
}
   2161a:	b00a      	add	sp, #40	; 0x28
   2161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021620 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   21620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21624:	b09a      	sub	sp, #104	; 0x68
   21626:	4616      	mov	r6, r2
   21628:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2162c:	4644      	mov	r4, r8
{
   2162e:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   21630:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   21634:	9500      	str	r5, [sp, #0]
{
   21636:	4607      	mov	r7, r0
   21638:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2163a:	4623      	mov	r3, r4
   2163c:	4602      	mov	r2, r0
   2163e:	4631      	mov	r1, r6
   21640:	a802      	add	r0, sp, #8
   21642:	f7ff fe57 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   21646:	a902      	add	r1, sp, #8
   21648:	4642      	mov	r2, r8
   2164a:	4608      	mov	r0, r1
   2164c:	f7ff ff0c 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   21650:	4643      	mov	r3, r8
   21652:	aa02      	add	r2, sp, #8
   21654:	4639      	mov	r1, r7
   21656:	4638      	mov	r0, r7
   21658:	f7ff fef6 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2165c:	4643      	mov	r3, r8
   2165e:	aa02      	add	r2, sp, #8
   21660:	4631      	mov	r1, r6
   21662:	4630      	mov	r0, r6
   21664:	f7ff fef0 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   21668:	4623      	mov	r3, r4
   2166a:	4652      	mov	r2, sl
   2166c:	4649      	mov	r1, r9
   2166e:	a802      	add	r0, sp, #8
   21670:	9500      	str	r5, [sp, #0]
   21672:	f7ff fe26 	bl	212c2 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   21676:	4623      	mov	r3, r4
   21678:	4652      	mov	r2, sl
   2167a:	4649      	mov	r1, r9
   2167c:	4648      	mov	r0, r9
   2167e:	9500      	str	r5, [sp, #0]
   21680:	f7ff fe38 	bl	212f4 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   21684:	4623      	mov	r3, r4
   21686:	463a      	mov	r2, r7
   21688:	4631      	mov	r1, r6
   2168a:	a80a      	add	r0, sp, #40	; 0x28
   2168c:	9500      	str	r5, [sp, #0]
   2168e:	f7ff fe31 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   21692:	4643      	mov	r3, r8
   21694:	aa0a      	add	r2, sp, #40	; 0x28
   21696:	4651      	mov	r1, sl
   21698:	4650      	mov	r0, sl
   2169a:	f7ff fed5 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2169e:	4623      	mov	r3, r4
   216a0:	4632      	mov	r2, r6
   216a2:	4639      	mov	r1, r7
   216a4:	a80a      	add	r0, sp, #40	; 0x28
   216a6:	9500      	str	r5, [sp, #0]
   216a8:	f7ff fe0b 	bl	212c2 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   216ac:	4642      	mov	r2, r8
   216ae:	4649      	mov	r1, r9
   216b0:	4630      	mov	r0, r6
   216b2:	f7ff fed9 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   216b6:	4623      	mov	r3, r4
   216b8:	aa0a      	add	r2, sp, #40	; 0x28
   216ba:	4631      	mov	r1, r6
   216bc:	4630      	mov	r0, r6
   216be:	9500      	str	r5, [sp, #0]
   216c0:	f7ff fe18 	bl	212f4 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   216c4:	4623      	mov	r3, r4
   216c6:	4632      	mov	r2, r6
   216c8:	4639      	mov	r1, r7
   216ca:	a812      	add	r0, sp, #72	; 0x48
   216cc:	9500      	str	r5, [sp, #0]
   216ce:	f7ff fe11 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   216d2:	4643      	mov	r3, r8
   216d4:	aa12      	add	r2, sp, #72	; 0x48
   216d6:	4649      	mov	r1, r9
   216d8:	4648      	mov	r0, r9
   216da:	f7ff feb5 	bl	21448 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   216de:	4623      	mov	r3, r4
   216e0:	4652      	mov	r2, sl
   216e2:	4649      	mov	r1, r9
   216e4:	4648      	mov	r0, r9
   216e6:	9500      	str	r5, [sp, #0]
   216e8:	f7ff fe04 	bl	212f4 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   216ec:	4642      	mov	r2, r8
   216ee:	a902      	add	r1, sp, #8
   216f0:	a812      	add	r0, sp, #72	; 0x48
   216f2:	f7ff feb9 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   216f6:	a912      	add	r1, sp, #72	; 0x48
   216f8:	4623      	mov	r3, r4
   216fa:	aa0a      	add	r2, sp, #40	; 0x28
   216fc:	4608      	mov	r0, r1
   216fe:	9500      	str	r5, [sp, #0]
   21700:	f7ff fdf8 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   21704:	4623      	mov	r3, r4
   21706:	463a      	mov	r2, r7
   21708:	a912      	add	r1, sp, #72	; 0x48
   2170a:	a80a      	add	r0, sp, #40	; 0x28
   2170c:	9500      	str	r5, [sp, #0]
   2170e:	f7ff fdf1 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   21712:	a90a      	add	r1, sp, #40	; 0x28
   21714:	4643      	mov	r3, r8
   21716:	aa02      	add	r2, sp, #8
   21718:	4608      	mov	r0, r1
   2171a:	f7ff fe95 	bl	21448 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   2171e:	4623      	mov	r3, r4
   21720:	4652      	mov	r2, sl
   21722:	a90a      	add	r1, sp, #40	; 0x28
   21724:	4650      	mov	r0, sl
   21726:	9500      	str	r5, [sp, #0]
   21728:	f7ff fde4 	bl	212f4 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2172c:	462a      	mov	r2, r5
   2172e:	a912      	add	r1, sp, #72	; 0x48
   21730:	4638      	mov	r0, r7
   21732:	f7ff fd77 	bl	21224 <uECC_vli_set>
}
   21736:	b01a      	add	sp, #104	; 0x68
   21738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002173c <uECC_vli_modInv>:
{
   2173c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2173e:	460f      	mov	r7, r1
   21740:	b0a1      	sub	sp, #132	; 0x84
   21742:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   21744:	4619      	mov	r1, r3
   21746:	4638      	mov	r0, r7
{
   21748:	4615      	mov	r5, r2
   2174a:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2174c:	f7ff fd30 	bl	211b0 <uECC_vli_isZero>
   21750:	b120      	cbz	r0, 2175c <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   21752:	4630      	mov	r0, r6
   21754:	f7ff fd21 	bl	2119a <uECC_vli_clear>
}
   21758:	b021      	add	sp, #132	; 0x84
   2175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   2175c:	4622      	mov	r2, r4
   2175e:	4639      	mov	r1, r7
   21760:	4668      	mov	r0, sp
   21762:	f7ff fd5f 	bl	21224 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   21766:	4629      	mov	r1, r5
   21768:	a808      	add	r0, sp, #32
   2176a:	f7ff fd5b 	bl	21224 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2176e:	a810      	add	r0, sp, #64	; 0x40
   21770:	4621      	mov	r1, r4
   21772:	f7ff fd12 	bl	2119a <uECC_vli_clear>
	u[0] = 1;
   21776:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   21778:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2177a:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2177c:	f7ff fd0d 	bl	2119a <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   21780:	4622      	mov	r2, r4
   21782:	a908      	add	r1, sp, #32
   21784:	4668      	mov	r0, sp
   21786:	f7ff fd59 	bl	2123c <uECC_vli_cmp_unsafe>
   2178a:	b928      	cbnz	r0, 21798 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   2178c:	4622      	mov	r2, r4
   2178e:	a910      	add	r1, sp, #64	; 0x40
   21790:	4630      	mov	r0, r6
   21792:	f7ff fd47 	bl	21224 <uECC_vli_set>
   21796:	e7df      	b.n	21758 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   21798:	9b00      	ldr	r3, [sp, #0]
   2179a:	07da      	lsls	r2, r3, #31
   2179c:	d409      	bmi.n	217b2 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   2179e:	4621      	mov	r1, r4
   217a0:	4668      	mov	r0, sp
   217a2:	f7ff fc59 	bl	21058 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   217a6:	4622      	mov	r2, r4
   217a8:	4629      	mov	r1, r5
   217aa:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   217ac:	f7ff fc61 	bl	21072 <vli_modInv_update>
   217b0:	e7e6      	b.n	21780 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   217b2:	9b08      	ldr	r3, [sp, #32]
   217b4:	07db      	lsls	r3, r3, #31
   217b6:	d407      	bmi.n	217c8 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   217b8:	4621      	mov	r1, r4
   217ba:	a808      	add	r0, sp, #32
   217bc:	f7ff fc4c 	bl	21058 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   217c0:	4622      	mov	r2, r4
   217c2:	4629      	mov	r1, r5
   217c4:	a818      	add	r0, sp, #96	; 0x60
   217c6:	e7f1      	b.n	217ac <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   217c8:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   217ca:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   217cc:	dd1c      	ble.n	21808 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   217ce:	aa08      	add	r2, sp, #32
   217d0:	4669      	mov	r1, sp
   217d2:	4668      	mov	r0, sp
   217d4:	f7ff fd5c 	bl	21290 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   217d8:	4621      	mov	r1, r4
   217da:	4668      	mov	r0, sp
   217dc:	f7ff fc3c 	bl	21058 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   217e0:	4622      	mov	r2, r4
   217e2:	a918      	add	r1, sp, #96	; 0x60
   217e4:	a810      	add	r0, sp, #64	; 0x40
   217e6:	f7ff fd29 	bl	2123c <uECC_vli_cmp_unsafe>
   217ea:	2800      	cmp	r0, #0
   217ec:	da05      	bge.n	217fa <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   217ee:	a910      	add	r1, sp, #64	; 0x40
   217f0:	4623      	mov	r3, r4
   217f2:	462a      	mov	r2, r5
   217f4:	4608      	mov	r0, r1
   217f6:	f7ff fc17 	bl	21028 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   217fa:	a910      	add	r1, sp, #64	; 0x40
   217fc:	4623      	mov	r3, r4
   217fe:	aa18      	add	r2, sp, #96	; 0x60
   21800:	4608      	mov	r0, r1
   21802:	f7ff fd45 	bl	21290 <uECC_vli_sub>
   21806:	e7ce      	b.n	217a6 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   21808:	a908      	add	r1, sp, #32
   2180a:	466a      	mov	r2, sp
   2180c:	4608      	mov	r0, r1
   2180e:	f7ff fd3f 	bl	21290 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   21812:	4621      	mov	r1, r4
   21814:	a808      	add	r0, sp, #32
   21816:	f7ff fc1f 	bl	21058 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2181a:	4622      	mov	r2, r4
   2181c:	a910      	add	r1, sp, #64	; 0x40
   2181e:	a818      	add	r0, sp, #96	; 0x60
   21820:	f7ff fd0c 	bl	2123c <uECC_vli_cmp_unsafe>
   21824:	2800      	cmp	r0, #0
   21826:	da05      	bge.n	21834 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   21828:	a918      	add	r1, sp, #96	; 0x60
   2182a:	4623      	mov	r3, r4
   2182c:	462a      	mov	r2, r5
   2182e:	4608      	mov	r0, r1
   21830:	f7ff fbfa 	bl	21028 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   21834:	a918      	add	r1, sp, #96	; 0x60
   21836:	4623      	mov	r3, r4
   21838:	aa10      	add	r2, sp, #64	; 0x40
   2183a:	4608      	mov	r0, r1
   2183c:	f7ff fd28 	bl	21290 <uECC_vli_sub>
   21840:	e7be      	b.n	217c0 <uECC_vli_modInv+0x84>

00021842 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   21842:	7809      	ldrb	r1, [r1, #0]
   21844:	0049      	lsls	r1, r1, #1
   21846:	b249      	sxtb	r1, r1
   21848:	f7ff bcb2 	b.w	211b0 <uECC_vli_isZero>

0002184c <apply_z>:
{
   2184c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2184e:	4615      	mov	r5, r2
   21850:	b089      	sub	sp, #36	; 0x24
   21852:	461c      	mov	r4, r3
   21854:	4607      	mov	r7, r0
   21856:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   21858:	461a      	mov	r2, r3
   2185a:	4629      	mov	r1, r5
   2185c:	4668      	mov	r0, sp
   2185e:	f7ff fe03 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   21862:	4623      	mov	r3, r4
   21864:	466a      	mov	r2, sp
   21866:	4639      	mov	r1, r7
   21868:	4638      	mov	r0, r7
   2186a:	f7ff fded 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2186e:	4623      	mov	r3, r4
   21870:	462a      	mov	r2, r5
   21872:	4669      	mov	r1, sp
   21874:	4668      	mov	r0, sp
   21876:	f7ff fde7 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2187a:	4623      	mov	r3, r4
   2187c:	466a      	mov	r2, sp
   2187e:	4631      	mov	r1, r6
   21880:	4630      	mov	r0, r6
   21882:	f7ff fde1 	bl	21448 <uECC_vli_modMult_fast>
}
   21886:	b009      	add	sp, #36	; 0x24
   21888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002188a <XYcZ_add>:
{
   2188a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2188e:	b08a      	sub	sp, #40	; 0x28
   21890:	4614      	mov	r4, r2
   21892:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   21896:	4655      	mov	r5, sl
{
   21898:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2189a:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2189e:	9600      	str	r6, [sp, #0]
{
   218a0:	4680      	mov	r8, r0
   218a2:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   218a4:	462b      	mov	r3, r5
   218a6:	4602      	mov	r2, r0
   218a8:	4621      	mov	r1, r4
   218aa:	a802      	add	r0, sp, #8
   218ac:	f7ff fd22 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   218b0:	a902      	add	r1, sp, #8
   218b2:	4652      	mov	r2, sl
   218b4:	4608      	mov	r0, r1
   218b6:	f7ff fdd7 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   218ba:	4653      	mov	r3, sl
   218bc:	aa02      	add	r2, sp, #8
   218be:	4641      	mov	r1, r8
   218c0:	4640      	mov	r0, r8
   218c2:	f7ff fdc1 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   218c6:	4653      	mov	r3, sl
   218c8:	aa02      	add	r2, sp, #8
   218ca:	4621      	mov	r1, r4
   218cc:	4620      	mov	r0, r4
   218ce:	f7ff fdbb 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   218d2:	462b      	mov	r3, r5
   218d4:	464a      	mov	r2, r9
   218d6:	4639      	mov	r1, r7
   218d8:	4638      	mov	r0, r7
   218da:	9600      	str	r6, [sp, #0]
   218dc:	f7ff fd0a 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   218e0:	4652      	mov	r2, sl
   218e2:	4639      	mov	r1, r7
   218e4:	a802      	add	r0, sp, #8
   218e6:	f7ff fdbf 	bl	21468 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   218ea:	a902      	add	r1, sp, #8
   218ec:	462b      	mov	r3, r5
   218ee:	4642      	mov	r2, r8
   218f0:	4608      	mov	r0, r1
   218f2:	9600      	str	r6, [sp, #0]
   218f4:	f7ff fcfe 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   218f8:	a902      	add	r1, sp, #8
   218fa:	462b      	mov	r3, r5
   218fc:	4622      	mov	r2, r4
   218fe:	4608      	mov	r0, r1
   21900:	9600      	str	r6, [sp, #0]
   21902:	f7ff fcf7 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   21906:	462b      	mov	r3, r5
   21908:	4642      	mov	r2, r8
   2190a:	4621      	mov	r1, r4
   2190c:	4620      	mov	r0, r4
   2190e:	9600      	str	r6, [sp, #0]
   21910:	f7ff fcf0 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   21914:	4653      	mov	r3, sl
   21916:	4622      	mov	r2, r4
   21918:	4649      	mov	r1, r9
   2191a:	4648      	mov	r0, r9
   2191c:	f7ff fd94 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   21920:	462b      	mov	r3, r5
   21922:	aa02      	add	r2, sp, #8
   21924:	4641      	mov	r1, r8
   21926:	4620      	mov	r0, r4
   21928:	9600      	str	r6, [sp, #0]
   2192a:	f7ff fce3 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2192e:	4653      	mov	r3, sl
   21930:	4622      	mov	r2, r4
   21932:	4639      	mov	r1, r7
   21934:	4638      	mov	r0, r7
   21936:	f7ff fd87 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2193a:	462b      	mov	r3, r5
   2193c:	464a      	mov	r2, r9
   2193e:	4639      	mov	r1, r7
   21940:	4638      	mov	r0, r7
   21942:	9600      	str	r6, [sp, #0]
   21944:	f7ff fcd6 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   21948:	4632      	mov	r2, r6
   2194a:	a902      	add	r1, sp, #8
   2194c:	4620      	mov	r0, r4
   2194e:	f7ff fc69 	bl	21224 <uECC_vli_set>
}
   21952:	b00a      	add	sp, #40	; 0x28
   21954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021958 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   21958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2195c:	b0b1      	sub	sp, #196	; 0xc4
   2195e:	e9cd 0103 	strd	r0, r1, [sp, #12]
   21962:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   21964:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   21968:	a818      	add	r0, sp, #96	; 0x60
{
   2196a:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   2196c:	463a      	mov	r2, r7
{
   2196e:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   21970:	f7ff fc58 	bl	21224 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   21974:	00bb      	lsls	r3, r7, #2
   21976:	9305      	str	r3, [sp, #20]
   21978:	9b04      	ldr	r3, [sp, #16]
   2197a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   2197e:	4619      	mov	r1, r3
   21980:	a828      	add	r0, sp, #160	; 0xa0
   21982:	9302      	str	r3, [sp, #8]
   21984:	f7ff fc4e 	bl	21224 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   21988:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   2198c:	2e00      	cmp	r6, #0
   2198e:	f000 8088 	beq.w	21aa2 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   21992:	462a      	mov	r2, r5
   21994:	4631      	mov	r1, r6
   21996:	a808      	add	r0, sp, #32
   21998:	f7ff fc44 	bl	21224 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2199c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   219a0:	462a      	mov	r2, r5
   219a2:	a918      	add	r1, sp, #96	; 0x60
   219a4:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   219a6:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   219aa:	f7ff fc3b 	bl	21224 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   219ae:	a928      	add	r1, sp, #160	; 0xa0
   219b0:	4648      	mov	r0, r9
   219b2:	f7ff fc37 	bl	21224 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   219b6:	4623      	mov	r3, r4
   219b8:	aa08      	add	r2, sp, #32
   219ba:	a928      	add	r1, sp, #160	; 0xa0
   219bc:	a818      	add	r0, sp, #96	; 0x60
   219be:	f7ff ff45 	bl	2184c <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   219c2:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   219c6:	4623      	mov	r3, r4
   219c8:	aa08      	add	r2, sp, #32
   219ca:	a928      	add	r1, sp, #160	; 0xa0
   219cc:	a818      	add	r0, sp, #96	; 0x60
   219ce:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   219d0:	4623      	mov	r3, r4
   219d2:	aa08      	add	r2, sp, #32
   219d4:	4649      	mov	r1, r9
   219d6:	4640      	mov	r0, r8
   219d8:	f7ff ff38 	bl	2184c <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   219dc:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   219e0:	3d02      	subs	r5, #2
   219e2:	b22d      	sxth	r5, r5
   219e4:	2d00      	cmp	r5, #0
   219e6:	dc63      	bgt.n	21ab0 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   219e8:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   219ec:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   219ee:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   219f2:	ab10      	add	r3, sp, #64	; 0x40
   219f4:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   219f8:	43ed      	mvns	r5, r5
   219fa:	ab20      	add	r3, sp, #128	; 0x80
   219fc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   21a00:	f005 0501 	and.w	r5, r5, #1
   21a04:	ab10      	add	r3, sp, #64	; 0x40
   21a06:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   21a0a:	ab20      	add	r3, sp, #128	; 0x80
   21a0c:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   21a10:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   21a14:	462b      	mov	r3, r5
   21a16:	464a      	mov	r2, r9
   21a18:	4631      	mov	r1, r6
   21a1a:	4640      	mov	r0, r8
   21a1c:	f7ff fe00 	bl	21620 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   21a20:	4653      	mov	r3, sl
   21a22:	aa10      	add	r2, sp, #64	; 0x40
   21a24:	a918      	add	r1, sp, #96	; 0x60
   21a26:	a808      	add	r0, sp, #32
   21a28:	9700      	str	r7, [sp, #0]
   21a2a:	f7ff fc63 	bl	212f4 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   21a2e:	a908      	add	r1, sp, #32
   21a30:	4623      	mov	r3, r4
   21a32:	4632      	mov	r2, r6
   21a34:	4608      	mov	r0, r1
   21a36:	f7ff fd07 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   21a3a:	a908      	add	r1, sp, #32
   21a3c:	9a04      	ldr	r2, [sp, #16]
   21a3e:	4623      	mov	r3, r4
   21a40:	4608      	mov	r0, r1
   21a42:	f7ff fd01 	bl	21448 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   21a46:	a908      	add	r1, sp, #32
   21a48:	463b      	mov	r3, r7
   21a4a:	4652      	mov	r2, sl
   21a4c:	4608      	mov	r0, r1
   21a4e:	f7ff fe75 	bl	2173c <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   21a52:	a908      	add	r1, sp, #32
   21a54:	9a02      	ldr	r2, [sp, #8]
   21a56:	4623      	mov	r3, r4
   21a58:	4608      	mov	r0, r1
   21a5a:	f7ff fcf5 	bl	21448 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   21a5e:	a908      	add	r1, sp, #32
   21a60:	4623      	mov	r3, r4
   21a62:	4642      	mov	r2, r8
   21a64:	4608      	mov	r0, r1
   21a66:	f7ff fcef 	bl	21448 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   21a6a:	9400      	str	r4, [sp, #0]
   21a6c:	4633      	mov	r3, r6
   21a6e:	4642      	mov	r2, r8
   21a70:	4629      	mov	r1, r5
   21a72:	4648      	mov	r0, r9
   21a74:	f7ff ff09 	bl	2188a <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   21a78:	4623      	mov	r3, r4
   21a7a:	aa08      	add	r2, sp, #32
   21a7c:	a920      	add	r1, sp, #128	; 0x80
   21a7e:	a810      	add	r0, sp, #64	; 0x40
   21a80:	f7ff fee4 	bl	2184c <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   21a84:	9803      	ldr	r0, [sp, #12]
   21a86:	463a      	mov	r2, r7
   21a88:	a910      	add	r1, sp, #64	; 0x40
   21a8a:	f7ff fbcb 	bl	21224 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   21a8e:	9b03      	ldr	r3, [sp, #12]
   21a90:	9c05      	ldr	r4, [sp, #20]
   21a92:	4423      	add	r3, r4
   21a94:	a920      	add	r1, sp, #128	; 0x80
   21a96:	4618      	mov	r0, r3
   21a98:	f7ff fbc4 	bl	21224 <uECC_vli_set>
}
   21a9c:	b031      	add	sp, #196	; 0xc4
   21a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   21aa2:	4629      	mov	r1, r5
   21aa4:	a808      	add	r0, sp, #32
   21aa6:	f7ff fb78 	bl	2119a <uECC_vli_clear>
		z[0] = 1;
   21aaa:	2301      	movs	r3, #1
   21aac:	9308      	str	r3, [sp, #32]
   21aae:	e775      	b.n	2199c <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   21ab0:	4629      	mov	r1, r5
   21ab2:	4650      	mov	r0, sl
   21ab4:	f7ff fb8b 	bl	211ce <uECC_vli_testBit>
   21ab8:	fab0 f680 	clz	r6, r0
   21abc:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   21abe:	f1c6 0101 	rsb	r1, r6, #1
   21ac2:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   21ac6:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   21aca:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   21ace:	4633      	mov	r3, r6
   21ad0:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   21ad4:	465a      	mov	r2, fp
   21ad6:	9400      	str	r4, [sp, #0]
   21ad8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   21adc:	f7ff fda0 	bl	21620 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   21ae0:	9907      	ldr	r1, [sp, #28]
   21ae2:	9806      	ldr	r0, [sp, #24]
   21ae4:	9400      	str	r4, [sp, #0]
   21ae6:	460b      	mov	r3, r1
   21ae8:	4602      	mov	r2, r0
   21aea:	4631      	mov	r1, r6
   21aec:	4658      	mov	r0, fp
   21aee:	f7ff fecc 	bl	2188a <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   21af2:	3d01      	subs	r5, #1
   21af4:	e775      	b.n	219e2 <EccPoint_mult+0x8a>

00021af6 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   21af6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   21afa:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   21afe:	f119 081f 	adds.w	r8, r9, #31
{
   21b02:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   21b04:	bf48      	it	mi
   21b06:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   21b0a:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   21b0c:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   21b10:	3524      	adds	r5, #36	; 0x24
   21b12:	4601      	mov	r1, r0
{
   21b14:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   21b16:	4643      	mov	r3, r8
   21b18:	462a      	mov	r2, r5
   21b1a:	4630      	mov	r0, r6
   21b1c:	f7ff fa84 	bl	21028 <uECC_vli_add>
   21b20:	4604      	mov	r4, r0
   21b22:	b990      	cbnz	r0, 21b4a <regularize_k+0x54>
   21b24:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   21b28:	da06      	bge.n	21b38 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   21b2a:	4649      	mov	r1, r9
   21b2c:	4630      	mov	r0, r6
   21b2e:	f7ff fb4e 	bl	211ce <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   21b32:	1e04      	subs	r4, r0, #0
   21b34:	bf18      	it	ne
   21b36:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   21b38:	4643      	mov	r3, r8
   21b3a:	462a      	mov	r2, r5
   21b3c:	4631      	mov	r1, r6
   21b3e:	4638      	mov	r0, r7
   21b40:	f7ff fa72 	bl	21028 <uECC_vli_add>

	return carry;
}
   21b44:	4620      	mov	r0, r4
   21b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   21b4a:	2401      	movs	r4, #1
   21b4c:	e7f4      	b.n	21b38 <regularize_k+0x42>

00021b4e <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   21b4e:	b530      	push	{r4, r5, lr}
   21b50:	4614      	mov	r4, r2
   21b52:	b095      	sub	sp, #84	; 0x54
   21b54:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   21b56:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   21b58:	4623      	mov	r3, r4
{
   21b5a:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   21b5c:	a904      	add	r1, sp, #16
   21b5e:	9102      	str	r1, [sp, #8]
   21b60:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   21b62:	f7ff ffc8 	bl	21af6 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   21b66:	fab0 f380 	clz	r3, r0
   21b6a:	095b      	lsrs	r3, r3, #5
   21b6c:	aa14      	add	r2, sp, #80	; 0x50
   21b6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   21b72:	8863      	ldrh	r3, [r4, #2]
   21b74:	9401      	str	r4, [sp, #4]
   21b76:	3301      	adds	r3, #1
   21b78:	b21b      	sxth	r3, r3
   21b7a:	9300      	str	r3, [sp, #0]
   21b7c:	f852 2c48 	ldr.w	r2, [r2, #-72]
   21b80:	2300      	movs	r3, #0
   21b82:	f104 0144 	add.w	r1, r4, #68	; 0x44
   21b86:	4628      	mov	r0, r5
   21b88:	f7ff fee6 	bl	21958 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   21b8c:	4621      	mov	r1, r4
   21b8e:	4628      	mov	r0, r5
   21b90:	f7ff fe57 	bl	21842 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   21b94:	fab0 f080 	clz	r0, r0
   21b98:	0940      	lsrs	r0, r0, #5
   21b9a:	b015      	add	sp, #84	; 0x54
   21b9c:	bd30      	pop	{r4, r5, pc}

00021b9e <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   21b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   21ba0:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   21ba2:	1e4f      	subs	r7, r1, #1
   21ba4:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   21ba6:	428c      	cmp	r4, r1
   21ba8:	f105 0501 	add.w	r5, r5, #1
   21bac:	db00      	blt.n	21bb0 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   21bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   21bb0:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   21bb2:	f023 0603 	bic.w	r6, r3, #3
   21bb6:	f003 0303 	and.w	r3, r3, #3
   21bba:	5996      	ldr	r6, [r2, r6]
   21bbc:	00db      	lsls	r3, r3, #3
   21bbe:	fa26 f303 	lsr.w	r3, r6, r3
   21bc2:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   21bc4:	e7ee      	b.n	21ba4 <uECC_vli_nativeToBytes+0x6>

00021bc6 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   21bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21bc8:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   21bca:	1cd1      	adds	r1, r2, #3
   21bcc:	bf48      	it	mi
   21bce:	1d91      	addmi	r1, r2, #6
   21bd0:	f341 0187 	sbfx	r1, r1, #2, #8
{
   21bd4:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   21bd6:	f7ff fae0 	bl	2119a <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   21bda:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   21bdc:	1e67      	subs	r7, r4, #1
   21bde:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   21be0:	42a2      	cmp	r2, r4
   21be2:	f105 0501 	add.w	r5, r5, #1
   21be6:	db00      	blt.n	21bea <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   21be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   21bea:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   21bec:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   21bf0:	5cb2      	ldrb	r2, [r6, r2]
   21bf2:	f003 0303 	and.w	r3, r3, #3
   21bf6:	00db      	lsls	r3, r3, #3
   21bf8:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   21bfc:	5842      	ldr	r2, [r0, r1]
   21bfe:	431a      	orrs	r2, r3
   21c00:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   21c02:	e7ec      	b.n	21bde <uECC_vli_bytesToNative+0x18>

00021c04 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   21c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c06:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   21c08:	f991 6000 	ldrsb.w	r6, [r1]
{
   21c0c:	4605      	mov	r5, r0
   21c0e:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   21c10:	f7ff fe17 	bl	21842 <EccPoint_isZero>
   21c14:	bb28      	cbnz	r0, 21c62 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   21c16:	1d27      	adds	r7, r4, #4
   21c18:	4632      	mov	r2, r6
   21c1a:	4629      	mov	r1, r5
   21c1c:	4638      	mov	r0, r7
   21c1e:	f7ff fb0d 	bl	2123c <uECC_vli_cmp_unsafe>
   21c22:	2801      	cmp	r0, #1
   21c24:	d120      	bne.n	21c68 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   21c26:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   21c2a:	4632      	mov	r2, r6
   21c2c:	4638      	mov	r0, r7
   21c2e:	f7ff fb05 	bl	2123c <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   21c32:	2801      	cmp	r0, #1
   21c34:	d118      	bne.n	21c68 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   21c36:	4622      	mov	r2, r4
   21c38:	4668      	mov	r0, sp
   21c3a:	f7ff fc15 	bl	21468 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   21c3e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   21c42:	4622      	mov	r2, r4
   21c44:	4629      	mov	r1, r5
   21c46:	a808      	add	r0, sp, #32
   21c48:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   21c4a:	4632      	mov	r2, r6
   21c4c:	a908      	add	r1, sp, #32
   21c4e:	4668      	mov	r0, sp
   21c50:	f7ff fb0b 	bl	2126a <uECC_vli_equal>
   21c54:	2800      	cmp	r0, #0
		return -3;
   21c56:	bf0c      	ite	eq
   21c58:	2000      	moveq	r0, #0
   21c5a:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   21c5e:	b011      	add	sp, #68	; 0x44
   21c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   21c62:	f04f 30ff 	mov.w	r0, #4294967295
   21c66:	e7fa      	b.n	21c5e <uECC_valid_point+0x5a>
		return -2;
   21c68:	f06f 0001 	mvn.w	r0, #1
   21c6c:	e7f7      	b.n	21c5e <uECC_valid_point+0x5a>

00021c6e <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   21c6e:	b570      	push	{r4, r5, r6, lr}
   21c70:	460c      	mov	r4, r1
   21c72:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   21c74:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   21c76:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   21c7a:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   21c7c:	4601      	mov	r1, r0
   21c7e:	4668      	mov	r0, sp
   21c80:	f7ff ffa1 	bl	21bc6 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   21c84:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   21c88:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   21c8c:	18a9      	adds	r1, r5, r2
   21c8e:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   21c92:	f7ff ff98 	bl	21bc6 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   21c96:	2210      	movs	r2, #16
   21c98:	4631      	mov	r1, r6
   21c9a:	4668      	mov	r0, sp
   21c9c:	f7ff face 	bl	2123c <uECC_vli_cmp_unsafe>
   21ca0:	b128      	cbz	r0, 21cae <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   21ca2:	4621      	mov	r1, r4
   21ca4:	4668      	mov	r0, sp
   21ca6:	f7ff ffad 	bl	21c04 <uECC_valid_point>
}
   21caa:	b010      	add	sp, #64	; 0x40
   21cac:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   21cae:	f06f 0003 	mvn.w	r0, #3
   21cb2:	e7fa      	b.n	21caa <uECC_valid_public_key+0x3c>

00021cb4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   21cb4:	78cb      	ldrb	r3, [r1, #3]
   21cb6:	7802      	ldrb	r2, [r0, #0]
   21cb8:	4053      	eors	r3, r2
   21cba:	7003      	strb	r3, [r0, #0]
   21cbc:	884b      	ldrh	r3, [r1, #2]
   21cbe:	7842      	ldrb	r2, [r0, #1]
   21cc0:	4053      	eors	r3, r2
   21cc2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   21cc4:	680a      	ldr	r2, [r1, #0]
   21cc6:	7883      	ldrb	r3, [r0, #2]
   21cc8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   21ccc:	7083      	strb	r3, [r0, #2]
   21cce:	680a      	ldr	r2, [r1, #0]
   21cd0:	78c3      	ldrb	r3, [r0, #3]
   21cd2:	4053      	eors	r3, r2
   21cd4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   21cd6:	79cb      	ldrb	r3, [r1, #7]
   21cd8:	7902      	ldrb	r2, [r0, #4]
   21cda:	4053      	eors	r3, r2
   21cdc:	7103      	strb	r3, [r0, #4]
   21cde:	88cb      	ldrh	r3, [r1, #6]
   21ce0:	7942      	ldrb	r2, [r0, #5]
   21ce2:	4053      	eors	r3, r2
   21ce4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   21ce6:	684a      	ldr	r2, [r1, #4]
   21ce8:	7983      	ldrb	r3, [r0, #6]
   21cea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   21cee:	7183      	strb	r3, [r0, #6]
   21cf0:	684a      	ldr	r2, [r1, #4]
   21cf2:	79c3      	ldrb	r3, [r0, #7]
   21cf4:	4053      	eors	r3, r2
   21cf6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   21cf8:	7acb      	ldrb	r3, [r1, #11]
   21cfa:	7a02      	ldrb	r2, [r0, #8]
   21cfc:	4053      	eors	r3, r2
   21cfe:	7203      	strb	r3, [r0, #8]
   21d00:	7a42      	ldrb	r2, [r0, #9]
   21d02:	894b      	ldrh	r3, [r1, #10]
   21d04:	4053      	eors	r3, r2
   21d06:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   21d08:	688a      	ldr	r2, [r1, #8]
   21d0a:	7a83      	ldrb	r3, [r0, #10]
   21d0c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   21d10:	7283      	strb	r3, [r0, #10]
   21d12:	688a      	ldr	r2, [r1, #8]
   21d14:	7ac3      	ldrb	r3, [r0, #11]
   21d16:	4053      	eors	r3, r2
   21d18:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   21d1a:	7bcb      	ldrb	r3, [r1, #15]
   21d1c:	7b02      	ldrb	r2, [r0, #12]
   21d1e:	4053      	eors	r3, r2
   21d20:	7303      	strb	r3, [r0, #12]
   21d22:	89cb      	ldrh	r3, [r1, #14]
   21d24:	7b42      	ldrb	r2, [r0, #13]
   21d26:	4053      	eors	r3, r2
   21d28:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   21d2a:	68ca      	ldr	r2, [r1, #12]
   21d2c:	7b83      	ldrb	r3, [r0, #14]
   21d2e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   21d32:	7383      	strb	r3, [r0, #14]
   21d34:	68ca      	ldr	r2, [r1, #12]
   21d36:	7bc3      	ldrb	r3, [r0, #15]
   21d38:	4053      	eors	r3, r2
   21d3a:	73c3      	strb	r3, [r0, #15]
}
   21d3c:	4770      	bx	lr

00021d3e <shift_rows>:
{
   21d3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   21d40:	7802      	ldrb	r2, [r0, #0]
   21d42:	f88d 2000 	strb.w	r2, [sp]
   21d46:	7942      	ldrb	r2, [r0, #5]
   21d48:	f88d 2001 	strb.w	r2, [sp, #1]
   21d4c:	7a82      	ldrb	r2, [r0, #10]
   21d4e:	f88d 2002 	strb.w	r2, [sp, #2]
   21d52:	7bc2      	ldrb	r2, [r0, #15]
   21d54:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   21d58:	7902      	ldrb	r2, [r0, #4]
   21d5a:	f88d 2004 	strb.w	r2, [sp, #4]
   21d5e:	7a42      	ldrb	r2, [r0, #9]
   21d60:	f88d 2005 	strb.w	r2, [sp, #5]
   21d64:	7b82      	ldrb	r2, [r0, #14]
   21d66:	f88d 2006 	strb.w	r2, [sp, #6]
   21d6a:	78c2      	ldrb	r2, [r0, #3]
   21d6c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   21d70:	7a02      	ldrb	r2, [r0, #8]
   21d72:	f88d 2008 	strb.w	r2, [sp, #8]
   21d76:	7b42      	ldrb	r2, [r0, #13]
   21d78:	f88d 2009 	strb.w	r2, [sp, #9]
   21d7c:	7882      	ldrb	r2, [r0, #2]
   21d7e:	f88d 200a 	strb.w	r2, [sp, #10]
   21d82:	79c2      	ldrb	r2, [r0, #7]
   21d84:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   21d88:	7b02      	ldrb	r2, [r0, #12]
   21d8a:	f88d 200c 	strb.w	r2, [sp, #12]
   21d8e:	7842      	ldrb	r2, [r0, #1]
   21d90:	7ac3      	ldrb	r3, [r0, #11]
   21d92:	f88d 200d 	strb.w	r2, [sp, #13]
   21d96:	7982      	ldrb	r2, [r0, #6]
   21d98:	f88d 200e 	strb.w	r2, [sp, #14]
   21d9c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   21da0:	2310      	movs	r3, #16
   21da2:	466a      	mov	r2, sp
   21da4:	4619      	mov	r1, r3
   21da6:	f7ff f87b 	bl	20ea0 <_copy>
}
   21daa:	b005      	add	sp, #20
   21dac:	f85d fb04 	ldr.w	pc, [sp], #4

00021db0 <mult_row_column>:
{
   21db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21db2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   21db4:	7808      	ldrb	r0, [r1, #0]
{
   21db6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   21db8:	f7ff f881 	bl	20ebe <_double_byte>
   21dbc:	4605      	mov	r5, r0
   21dbe:	7860      	ldrb	r0, [r4, #1]
   21dc0:	f7ff f87d 	bl	20ebe <_double_byte>
   21dc4:	78a2      	ldrb	r2, [r4, #2]
   21dc6:	7863      	ldrb	r3, [r4, #1]
   21dc8:	4053      	eors	r3, r2
   21dca:	78e2      	ldrb	r2, [r4, #3]
   21dcc:	4053      	eors	r3, r2
   21dce:	405d      	eors	r5, r3
   21dd0:	4045      	eors	r5, r0
   21dd2:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   21dd4:	7860      	ldrb	r0, [r4, #1]
   21dd6:	7827      	ldrb	r7, [r4, #0]
   21dd8:	f7ff f871 	bl	20ebe <_double_byte>
   21ddc:	4605      	mov	r5, r0
   21dde:	78a0      	ldrb	r0, [r4, #2]
   21de0:	f7ff f86d 	bl	20ebe <_double_byte>
   21de4:	78a3      	ldrb	r3, [r4, #2]
   21de6:	405f      	eors	r7, r3
   21de8:	78e3      	ldrb	r3, [r4, #3]
   21dea:	405f      	eors	r7, r3
   21dec:	407d      	eors	r5, r7
   21dee:	4045      	eors	r5, r0
   21df0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   21df2:	78a0      	ldrb	r0, [r4, #2]
   21df4:	7865      	ldrb	r5, [r4, #1]
   21df6:	7827      	ldrb	r7, [r4, #0]
   21df8:	f7ff f861 	bl	20ebe <_double_byte>
   21dfc:	406f      	eors	r7, r5
   21dfe:	4605      	mov	r5, r0
   21e00:	78e0      	ldrb	r0, [r4, #3]
   21e02:	f7ff f85c 	bl	20ebe <_double_byte>
   21e06:	78e3      	ldrb	r3, [r4, #3]
   21e08:	405f      	eors	r7, r3
   21e0a:	407d      	eors	r5, r7
   21e0c:	4045      	eors	r5, r0
   21e0e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   21e10:	7820      	ldrb	r0, [r4, #0]
   21e12:	f7ff f854 	bl	20ebe <_double_byte>
   21e16:	7863      	ldrb	r3, [r4, #1]
   21e18:	7825      	ldrb	r5, [r4, #0]
   21e1a:	405d      	eors	r5, r3
   21e1c:	78a3      	ldrb	r3, [r4, #2]
   21e1e:	405d      	eors	r5, r3
   21e20:	4045      	eors	r5, r0
   21e22:	78e0      	ldrb	r0, [r4, #3]
   21e24:	f7ff f84b 	bl	20ebe <_double_byte>
   21e28:	b2ed      	uxtb	r5, r5
   21e2a:	4045      	eors	r5, r0
   21e2c:	70f5      	strb	r5, [r6, #3]
}
   21e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021e30 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   21e30:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   21e32:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   21e34:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   21e36:	f912 3b10 	ldrsb.w	r3, [r2], #16
   21e3a:	2b00      	cmp	r3, #0
   21e3c:	bfb4      	ite	lt
   21e3e:	2387      	movlt	r3, #135	; 0x87
   21e40:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   21e42:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21e46:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   21e4a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   21e4c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   21e50:	d002      	beq.n	21e58 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   21e52:	7813      	ldrb	r3, [r2, #0]
   21e54:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   21e56:	e7f4      	b.n	21e42 <gf_double+0x12>
	}
}
   21e58:	bd10      	pop	{r4, pc}

00021e5a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   21e5a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   21e5c:	b120      	cbz	r0, 21e68 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   21e5e:	2258      	movs	r2, #88	; 0x58
   21e60:	2100      	movs	r1, #0
   21e62:	f7ff f82a 	bl	20eba <_set>
   21e66:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   21e68:	bd08      	pop	{r3, pc}

00021e6a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   21e6a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   21e6c:	4604      	mov	r4, r0
   21e6e:	b188      	cbz	r0, 21e94 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   21e70:	2210      	movs	r2, #16
   21e72:	2100      	movs	r1, #0
   21e74:	f7ff f821 	bl	20eba <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   21e78:	2210      	movs	r2, #16
   21e7a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21e7e:	2100      	movs	r1, #0
   21e80:	f7ff f81b 	bl	20eba <_set>
	s->leftover_offset = 0;
   21e84:	2300      	movs	r3, #0
   21e86:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   21e88:	2200      	movs	r2, #0
   21e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21e8e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   21e92:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   21e94:	bd10      	pop	{r4, pc}

00021e96 <tc_cmac_setup>:
{
   21e96:	b570      	push	{r4, r5, r6, lr}
   21e98:	460d      	mov	r5, r1
   21e9a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   21e9c:	4604      	mov	r4, r0
   21e9e:	b310      	cbz	r0, 21ee6 <tc_cmac_setup+0x50>
   21ea0:	b311      	cbz	r1, 21ee8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   21ea2:	2258      	movs	r2, #88	; 0x58
   21ea4:	2100      	movs	r1, #0
   21ea6:	f7ff f808 	bl	20eba <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   21eaa:	4629      	mov	r1, r5
	s->sched = sched;
   21eac:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   21eae:	4630      	mov	r0, r6
   21eb0:	f7f1 fa7a 	bl	133a8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   21eb4:	2210      	movs	r2, #16
   21eb6:	2100      	movs	r1, #0
   21eb8:	4620      	mov	r0, r4
   21eba:	f7fe fffe 	bl	20eba <_set>
	gf_double (s->K1, s->iv);
   21ebe:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   21ec2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21ec4:	4621      	mov	r1, r4
   21ec6:	4620      	mov	r0, r4
   21ec8:	f7f1 fac0 	bl	1344c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   21ecc:	4621      	mov	r1, r4
   21ece:	4628      	mov	r0, r5
   21ed0:	f7ff ffae 	bl	21e30 <gf_double>
	gf_double (s->K2, s->K1);
   21ed4:	4629      	mov	r1, r5
   21ed6:	f104 0020 	add.w	r0, r4, #32
   21eda:	f7ff ffa9 	bl	21e30 <gf_double>
	tc_cmac_init(s);
   21ede:	4620      	mov	r0, r4
   21ee0:	f7ff ffc3 	bl	21e6a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   21ee4:	2001      	movs	r0, #1
}
   21ee6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   21ee8:	4608      	mov	r0, r1
   21eea:	e7fc      	b.n	21ee6 <tc_cmac_setup+0x50>

00021eec <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   21eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ef0:	460d      	mov	r5, r1
   21ef2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   21ef4:	4604      	mov	r4, r0
   21ef6:	2800      	cmp	r0, #0
   21ef8:	d062      	beq.n	21fc0 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   21efa:	b912      	cbnz	r2, 21f02 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   21efc:	2001      	movs	r0, #1
}
   21efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   21f02:	2900      	cmp	r1, #0
   21f04:	d05c      	beq.n	21fc0 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   21f06:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   21f0a:	ea50 0301 	orrs.w	r3, r0, r1
   21f0e:	d057      	beq.n	21fc0 <tc_cmac_update+0xd4>
	s->countdown--;
   21f10:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   21f14:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   21f18:	f141 33ff 	adc.w	r3, r1, #4294967295
   21f1c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   21f20:	f1b8 0f00 	cmp.w	r8, #0
   21f24:	d02a      	beq.n	21f7c <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   21f26:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   21f2a:	f108 0030 	add.w	r0, r8, #48	; 0x30
   21f2e:	42be      	cmp	r6, r7
   21f30:	4420      	add	r0, r4
   21f32:	d208      	bcs.n	21f46 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   21f34:	462a      	mov	r2, r5
   21f36:	4633      	mov	r3, r6
   21f38:	4631      	mov	r1, r6
   21f3a:	f7fe ffb1 	bl	20ea0 <_copy>
			s->leftover_offset += data_length;
   21f3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   21f40:	4432      	add	r2, r6
   21f42:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   21f44:	e7da      	b.n	21efc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   21f46:	463b      	mov	r3, r7
   21f48:	462a      	mov	r2, r5
   21f4a:	4639      	mov	r1, r7
   21f4c:	f7fe ffa8 	bl	20ea0 <_copy>
		data_length -= remaining_space;
   21f50:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   21f52:	2300      	movs	r3, #0
   21f54:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   21f56:	4446      	add	r6, r8
		data += remaining_space;
   21f58:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21f5a:	1e63      	subs	r3, r4, #1
   21f5c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   21f60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   21f64:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21f68:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   21f6a:	ea82 0200 	eor.w	r2, r2, r0
   21f6e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21f70:	d1f6      	bne.n	21f60 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   21f72:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21f74:	4621      	mov	r1, r4
   21f76:	4620      	mov	r0, r4
   21f78:	f7f1 fa68 	bl	1344c <tc_aes_encrypt>
   21f7c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   21f80:	2e10      	cmp	r6, #16
   21f82:	d80a      	bhi.n	21f9a <tc_cmac_update+0xae>
	if (data_length > 0) {
   21f84:	2e00      	cmp	r6, #0
   21f86:	d0b9      	beq.n	21efc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   21f88:	4633      	mov	r3, r6
   21f8a:	462a      	mov	r2, r5
   21f8c:	4631      	mov	r1, r6
   21f8e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21f92:	f7fe ff85 	bl	20ea0 <_copy>
		s->leftover_offset = data_length;
   21f96:	6466      	str	r6, [r4, #68]	; 0x44
   21f98:	e7b0      	b.n	21efc <tc_cmac_update+0x10>
   21f9a:	1e63      	subs	r3, r4, #1
   21f9c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   21f9e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   21fa2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21fa6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   21fa8:	ea82 0200 	eor.w	r2, r2, r0
   21fac:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21fae:	d1f6      	bne.n	21f9e <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   21fb0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21fb2:	4621      	mov	r1, r4
   21fb4:	4620      	mov	r0, r4
   21fb6:	f7f1 fa49 	bl	1344c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   21fba:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   21fbc:	3e10      	subs	r6, #16
   21fbe:	e7df      	b.n	21f80 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   21fc0:	2000      	movs	r0, #0
   21fc2:	e79c      	b.n	21efe <tc_cmac_update+0x12>

00021fc4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   21fc4:	b570      	push	{r4, r5, r6, lr}
   21fc6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   21fc8:	4605      	mov	r5, r0
   21fca:	b1e8      	cbz	r0, 22008 <tc_cmac_final+0x44>
   21fcc:	b369      	cbz	r1, 2202a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   21fce:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   21fd0:	2a10      	cmp	r2, #16
   21fd2:	d11a      	bne.n	2200a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   21fd4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21fd6:	1e63      	subs	r3, r4, #1
   21fd8:	3901      	subs	r1, #1
   21fda:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   21fde:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   21fe2:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   21fe6:	4072      	eors	r2, r6
   21fe8:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21fec:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   21fee:	ea82 0206 	eor.w	r2, r2, r6
   21ff2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21ff4:	d1f3      	bne.n	21fde <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   21ff6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21ff8:	4621      	mov	r1, r4
   21ffa:	4628      	mov	r0, r5
   21ffc:	f7f1 fa26 	bl	1344c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   22000:	4620      	mov	r0, r4
   22002:	f7ff ff2a 	bl	21e5a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   22006:	2001      	movs	r0, #1
}
   22008:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2200a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2200e:	2100      	movs	r1, #0
   22010:	f1c2 0210 	rsb	r2, r2, #16
   22014:	4420      	add	r0, r4
   22016:	f7fe ff50 	bl	20eba <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2201a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2201c:	4423      	add	r3, r4
   2201e:	2280      	movs	r2, #128	; 0x80
   22020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   22024:	f104 0120 	add.w	r1, r4, #32
   22028:	e7d5      	b.n	21fd6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2202a:	4608      	mov	r0, r1
   2202c:	e7ec      	b.n	22008 <tc_cmac_final+0x44>

0002202e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2202e:	2100      	movs	r1, #0
   22030:	2001      	movs	r0, #1
   22032:	f7f1 bb8d 	b.w	13750 <z_arm_fatal_error>

00022036 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   22036:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   22038:	6800      	ldr	r0, [r0, #0]
   2203a:	f7f1 bb89 	b.w	13750 <z_arm_fatal_error>

0002203e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2203e:	b508      	push	{r3, lr}
	handler();
   22040:	f7f1 fbbe 	bl	137c0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   22044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   22048:	f7f1 be50 	b.w	13cec <z_arm_exc_exit>

0002204c <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   2204c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22050:	4684      	mov	ip, r0
   22052:	4688      	mov	r8, r1
	register const char *s = nptr;
   22054:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   22056:	460c      	mov	r4, r1
   22058:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2205c:	2b20      	cmp	r3, #32
   2205e:	d033      	beq.n	220c8 <strtol+0x7c>
   22060:	f1a3 0009 	sub.w	r0, r3, #9
   22064:	2804      	cmp	r0, #4
   22066:	d92f      	bls.n	220c8 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   22068:	2b2d      	cmp	r3, #45	; 0x2d
   2206a:	d12f      	bne.n	220cc <strtol+0x80>
		neg = 1;
		c = *s++;
   2206c:	784b      	ldrb	r3, [r1, #1]
   2206e:	1c8c      	adds	r4, r1, #2
		neg = 1;
   22070:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   22072:	2a00      	cmp	r2, #0
   22074:	d05c      	beq.n	22130 <strtol+0xe4>
   22076:	2a10      	cmp	r2, #16
   22078:	d109      	bne.n	2208e <strtol+0x42>
   2207a:	2b30      	cmp	r3, #48	; 0x30
   2207c:	d107      	bne.n	2208e <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2207e:	7823      	ldrb	r3, [r4, #0]
   22080:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   22084:	2b58      	cmp	r3, #88	; 0x58
   22086:	d14e      	bne.n	22126 <strtol+0xda>
		c = s[1];
   22088:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   2208a:	2210      	movs	r2, #16
		s += 2;
   2208c:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2208e:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   22092:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   22094:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   22096:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   2209a:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   2209c:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   220a0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   220a4:	2d09      	cmp	r5, #9
   220a6:	d817      	bhi.n	220d8 <strtol+0x8c>
			c -= '0';
   220a8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   220aa:	429a      	cmp	r2, r3
   220ac:	dd24      	ble.n	220f8 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   220ae:	1c75      	adds	r5, r6, #1
   220b0:	d007      	beq.n	220c2 <strtol+0x76>
   220b2:	4570      	cmp	r0, lr
   220b4:	d81d      	bhi.n	220f2 <strtol+0xa6>
   220b6:	d101      	bne.n	220bc <strtol+0x70>
   220b8:	454b      	cmp	r3, r9
   220ba:	dc1a      	bgt.n	220f2 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   220bc:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   220c0:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   220c2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   220c6:	e7eb      	b.n	220a0 <strtol+0x54>
{
   220c8:	4621      	mov	r1, r4
   220ca:	e7c4      	b.n	22056 <strtol+0xa>
	} else if (c == '+') {
   220cc:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   220ce:	bf04      	itt	eq
   220d0:	784b      	ldrbeq	r3, [r1, #1]
   220d2:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   220d4:	2100      	movs	r1, #0
   220d6:	e7cc      	b.n	22072 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   220d8:	f043 0520 	orr.w	r5, r3, #32
   220dc:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   220de:	2d19      	cmp	r5, #25
   220e0:	d80a      	bhi.n	220f8 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   220e2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   220e6:	2d1a      	cmp	r5, #26
   220e8:	bf34      	ite	cc
   220ea:	2537      	movcc	r5, #55	; 0x37
   220ec:	2557      	movcs	r5, #87	; 0x57
   220ee:	1b5b      	subs	r3, r3, r5
   220f0:	e7db      	b.n	220aa <strtol+0x5e>
			any = -1;
   220f2:	f04f 36ff 	mov.w	r6, #4294967295
   220f6:	e7e4      	b.n	220c2 <strtol+0x76>
		}
	}

	if (any < 0) {
   220f8:	1c73      	adds	r3, r6, #1
   220fa:	d109      	bne.n	22110 <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   220fc:	f7fb ff5a 	bl	1dfb4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   22100:	2322      	movs	r3, #34	; 0x22
   22102:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   22104:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   22106:	f1b8 0f00 	cmp.w	r8, #0
   2210a:	d107      	bne.n	2211c <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2210c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   22110:	b101      	cbz	r1, 22114 <strtol+0xc8>
		acc = -acc;
   22112:	4240      	negs	r0, r0
	if (endptr != NULL) {
   22114:	f1b8 0f00 	cmp.w	r8, #0
   22118:	d0f8      	beq.n	2210c <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   2211a:	b10e      	cbz	r6, 22120 <strtol+0xd4>
   2211c:	f104 3cff 	add.w	ip, r4, #4294967295
   22120:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   22124:	e7f2      	b.n	2210c <strtol+0xc0>
	if (base == 0) {
   22126:	2330      	movs	r3, #48	; 0x30
   22128:	2a00      	cmp	r2, #0
   2212a:	d1b0      	bne.n	2208e <strtol+0x42>
		base = c == '0' ? 8 : 10;
   2212c:	2208      	movs	r2, #8
   2212e:	e7ae      	b.n	2208e <strtol+0x42>
	if ((base == 0 || base == 16) &&
   22130:	2b30      	cmp	r3, #48	; 0x30
   22132:	d0a4      	beq.n	2207e <strtol+0x32>
		base = c == '0' ? 8 : 10;
   22134:	220a      	movs	r2, #10
   22136:	e7aa      	b.n	2208e <strtol+0x42>

00022138 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   22138:	3901      	subs	r1, #1
   2213a:	4603      	mov	r3, r0
   2213c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   22140:	b90a      	cbnz	r2, 22146 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   22142:	701a      	strb	r2, [r3, #0]

	return dest;
}
   22144:	4770      	bx	lr
		*d = *s;
   22146:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2214a:	e7f7      	b.n	2213c <strcpy+0x4>

0002214c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   2214c:	b570      	push	{r4, r5, r6, lr}
   2214e:	3901      	subs	r1, #1
   22150:	4605      	mov	r5, r0
   22152:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   22154:	b142      	cbz	r2, 22168 <strncpy+0x1c>
   22156:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2215a:	1e56      	subs	r6, r2, #1
   2215c:	b92b      	cbnz	r3, 2216a <strncpy+0x1e>
   2215e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   22160:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   22164:	42a2      	cmp	r2, r4
   22166:	d1fb      	bne.n	22160 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   22168:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   2216a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2216e:	4632      	mov	r2, r6
   22170:	e7ef      	b.n	22152 <strncpy+0x6>

00022172 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   22172:	4603      	mov	r3, r0
	size_t n = 0;
   22174:	2000      	movs	r0, #0

	while (*s != '\0') {
   22176:	5c1a      	ldrb	r2, [r3, r0]
   22178:	b902      	cbnz	r2, 2217c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2217a:	4770      	bx	lr
		n++;
   2217c:	3001      	adds	r0, #1
   2217e:	e7fa      	b.n	22176 <strlen+0x4>

00022180 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   22180:	4603      	mov	r3, r0
	size_t n = 0;
   22182:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   22184:	5c1a      	ldrb	r2, [r3, r0]
   22186:	b10a      	cbz	r2, 2218c <strnlen+0xc>
   22188:	4288      	cmp	r0, r1
   2218a:	d100      	bne.n	2218e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2218c:	4770      	bx	lr
		n++;
   2218e:	3001      	adds	r0, #1
   22190:	e7f8      	b.n	22184 <strnlen+0x4>

00022192 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   22192:	1e43      	subs	r3, r0, #1
   22194:	3901      	subs	r1, #1
   22196:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2219a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2219e:	4282      	cmp	r2, r0
   221a0:	d101      	bne.n	221a6 <strcmp+0x14>
   221a2:	2a00      	cmp	r2, #0
   221a4:	d1f7      	bne.n	22196 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   221a6:	1a10      	subs	r0, r2, r0
   221a8:	4770      	bx	lr

000221aa <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   221aa:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   221ac:	2400      	movs	r4, #0
   221ae:	42a2      	cmp	r2, r4
   221b0:	d008      	beq.n	221c4 <strncmp+0x1a>
   221b2:	5d03      	ldrb	r3, [r0, r4]
   221b4:	5d0d      	ldrb	r5, [r1, r4]
   221b6:	42ab      	cmp	r3, r5
   221b8:	d102      	bne.n	221c0 <strncmp+0x16>
   221ba:	3401      	adds	r4, #1
   221bc:	2b00      	cmp	r3, #0
   221be:	d1f6      	bne.n	221ae <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   221c0:	1b58      	subs	r0, r3, r5
   221c2:	e000      	b.n	221c6 <strncmp+0x1c>
   221c4:	2000      	movs	r0, #0
}
   221c6:	bd30      	pop	{r4, r5, pc}

000221c8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   221c8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   221ca:	b15a      	cbz	r2, 221e4 <memcmp+0x1c>
   221cc:	3901      	subs	r1, #1
   221ce:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   221d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   221d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   221d8:	42a0      	cmp	r0, r4
   221da:	d001      	beq.n	221e0 <memcmp+0x18>
   221dc:	429a      	cmp	r2, r3
   221de:	d0f7      	beq.n	221d0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   221e0:	1ad0      	subs	r0, r2, r3
}
   221e2:	bd10      	pop	{r4, pc}
		return 0;
   221e4:	4610      	mov	r0, r2
   221e6:	e7fc      	b.n	221e2 <memcmp+0x1a>

000221e8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   221e8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   221ea:	ea81 0400 	eor.w	r4, r1, r0
   221ee:	07a5      	lsls	r5, r4, #30
   221f0:	4603      	mov	r3, r0
   221f2:	d00b      	beq.n	2220c <memcpy+0x24>
   221f4:	3b01      	subs	r3, #1
   221f6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   221f8:	4291      	cmp	r1, r2
   221fa:	d11b      	bne.n	22234 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   221fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   221fe:	2a00      	cmp	r2, #0
   22200:	d0fc      	beq.n	221fc <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   22202:	f811 4b01 	ldrb.w	r4, [r1], #1
   22206:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   2220a:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   2220c:	079c      	lsls	r4, r3, #30
   2220e:	d1f6      	bne.n	221fe <memcpy+0x16>
   22210:	f022 0403 	bic.w	r4, r2, #3
   22214:	1f1d      	subs	r5, r3, #4
   22216:	0896      	lsrs	r6, r2, #2
   22218:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   2221a:	42b9      	cmp	r1, r7
   2221c:	d105      	bne.n	2222a <memcpy+0x42>
   2221e:	f06f 0503 	mvn.w	r5, #3
   22222:	fb05 2206 	mla	r2, r5, r6, r2
   22226:	4423      	add	r3, r4
   22228:	e7e4      	b.n	221f4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   2222a:	f851 cb04 	ldr.w	ip, [r1], #4
   2222e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   22232:	e7f2      	b.n	2221a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   22234:	f811 4b01 	ldrb.w	r4, [r1], #1
   22238:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2223c:	e7dc      	b.n	221f8 <memcpy+0x10>

0002223e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   2223e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   22240:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   22242:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   22244:	079c      	lsls	r4, r3, #30
   22246:	d111      	bne.n	2226c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   22248:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   2224c:	f022 0603 	bic.w	r6, r2, #3
   22250:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   22254:	441e      	add	r6, r3
   22256:	0894      	lsrs	r4, r2, #2
   22258:	42b3      	cmp	r3, r6
   2225a:	d10d      	bne.n	22278 <memset+0x3a>
   2225c:	f06f 0503 	mvn.w	r5, #3
   22260:	fb05 2204 	mla	r2, r5, r4, r2
   22264:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   22266:	4293      	cmp	r3, r2
   22268:	d109      	bne.n	2227e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2226a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   2226c:	2a00      	cmp	r2, #0
   2226e:	d0fc      	beq.n	2226a <memset+0x2c>
		*(d_byte++) = c_byte;
   22270:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   22274:	3a01      	subs	r2, #1
   22276:	e7e5      	b.n	22244 <memset+0x6>
		*(d_word++) = c_word;
   22278:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   2227c:	e7ec      	b.n	22258 <memset+0x1a>
		*(d_byte++) = c_byte;
   2227e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   22282:	e7f0      	b.n	22266 <memset+0x28>

00022284 <_stdout_hook_default>:
}
   22284:	f04f 30ff 	mov.w	r0, #4294967295
   22288:	4770      	bx	lr

0002228a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2228a:	f7fb bbfb 	b.w	1da84 <SystemInit>

0002228e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   2228e:	b084      	sub	sp, #16
   22290:	ab04      	add	r3, sp, #16
   22292:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   22296:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2229a:	2b06      	cmp	r3, #6
   2229c:	d108      	bne.n	222b0 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2229e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   222a2:	2201      	movs	r2, #1
   222a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   222a8:	f3bf 8f4f 	dsb	sy
        __WFE();
   222ac:	bf20      	wfe
    while (true)
   222ae:	e7fd      	b.n	222ac <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   222b0:	b004      	add	sp, #16
   222b2:	4770      	bx	lr

000222b4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   222b4:	b084      	sub	sp, #16
   222b6:	ab04      	add	r3, sp, #16
   222b8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   222bc:	2300      	movs	r3, #0
   222be:	f383 8811 	msr	BASEPRI, r3
   222c2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   222c6:	b004      	add	sp, #16
   222c8:	4770      	bx	lr

000222ca <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   222ca:	b530      	push	{r4, r5, lr}
   222cc:	b085      	sub	sp, #20
   222ce:	4604      	mov	r4, r0
   222d0:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   222d2:	4668      	mov	r0, sp
   222d4:	2203      	movs	r2, #3
   222d6:	f7ff ff87 	bl	221e8 <memcpy>
	(void)memset(res + 3, 0, 13);
   222da:	220d      	movs	r2, #13
   222dc:	2100      	movs	r1, #0
   222de:	f10d 0003 	add.w	r0, sp, #3
   222e2:	f7ff ffac 	bl	2223e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   222e6:	4620      	mov	r0, r4
   222e8:	466a      	mov	r2, sp
   222ea:	4669      	mov	r1, sp
   222ec:	f002 fa2b 	bl	24746 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   222f0:	4604      	mov	r4, r0
   222f2:	b920      	cbnz	r0, 222fe <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   222f4:	2203      	movs	r2, #3
   222f6:	4669      	mov	r1, sp
   222f8:	4628      	mov	r0, r5
   222fa:	f7ff ff75 	bl	221e8 <memcpy>

	return 0;
}
   222fe:	4620      	mov	r0, r4
   22300:	b005      	add	sp, #20
   22302:	bd30      	pop	{r4, r5, pc}

00022304 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   22304:	b513      	push	{r0, r1, r4, lr}
   22306:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   22308:	aa01      	add	r2, sp, #4
   2230a:	3103      	adds	r1, #3
   2230c:	f7ff ffdd 	bl	222ca <ah>
	if (err) {
   22310:	b948      	cbnz	r0, 22326 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   22312:	2203      	movs	r2, #3
   22314:	a901      	add	r1, sp, #4
   22316:	4620      	mov	r0, r4
   22318:	f7ff ff56 	bl	221c8 <memcmp>
   2231c:	fab0 f080 	clz	r0, r0
   22320:	0940      	lsrs	r0, r0, #5
}
   22322:	b002      	add	sp, #8
   22324:	bd10      	pop	{r4, pc}
		return false;
   22326:	2000      	movs	r0, #0
   22328:	e7fb      	b.n	22322 <bt_rpa_irk_matches+0x1e>

0002232a <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2232a:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   2232c:	1cce      	adds	r6, r1, #3
{
   2232e:	4605      	mov	r5, r0
   22330:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   22332:	4630      	mov	r0, r6
   22334:	2103      	movs	r1, #3
   22336:	f7fb f9c7 	bl	1d6c8 <bt_rand>
	if (err) {
   2233a:	b960      	cbnz	r0, 22356 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2233c:	7963      	ldrb	r3, [r4, #5]
   2233e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22346:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   22348:	4622      	mov	r2, r4
   2234a:	4631      	mov	r1, r6
   2234c:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2234e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   22352:	f7ff bfba 	b.w	222ca <ah>
}
   22356:	bd70      	pop	{r4, r5, r6, pc}

00022358 <send_cmd_status>:
{
   22358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2235c:	f04f 32ff 	mov.w	r2, #4294967295
{
   22360:	4606      	mov	r6, r0
   22362:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   22364:	f04f 33ff 	mov.w	r3, #4294967295
   22368:	2100      	movs	r1, #0
   2236a:	200f      	movs	r0, #15
   2236c:	f7f2 fa2c 	bl	147c8 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   22370:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   22372:	f100 0808 	add.w	r8, r0, #8
   22376:	4604      	mov	r4, r0
   22378:	7507      	strb	r7, [r0, #20]
   2237a:	2102      	movs	r1, #2
   2237c:	4640      	mov	r0, r8
   2237e:	f002 f896 	bl	244ae <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   22382:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   22384:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   22386:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   22388:	7041      	strb	r1, [r0, #1]
   2238a:	4640      	mov	r0, r8
   2238c:	f002 f88f 	bl	244ae <net_buf_simple_add>
	evt->ncmd = 1U;
   22390:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   22392:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   22394:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   22396:	4620      	mov	r0, r4
}
   22398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   2239c:	f7f3 bc30 	b.w	15c00 <bt_recv>

000223a0 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   223a0:	f101 0320 	add.w	r3, r1, #32
   223a4:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   223a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   223aa:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   223ae:	428b      	cmp	r3, r1
   223b0:	d1f9      	bne.n	223a6 <sys_memcpy_swap.constprop.0+0x6>
}
   223b2:	4770      	bx	lr

000223b4 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   223b4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   223b8:	f043 0306 	orr.w	r3, r3, #6
   223bc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   223c0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   223c4:	f043 0304 	orr.w	r3, r3, #4
   223c8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   223cc:	4770      	bx	lr

000223ce <default_CSPRNG>:
{
   223ce:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   223d0:	f7fb f97a 	bl	1d6c8 <bt_rand>
}
   223d4:	fab0 f080 	clz	r0, r0
   223d8:	0940      	lsrs	r0, r0, #5
   223da:	bd08      	pop	{r3, pc}

000223dc <bt_settings_decode_key>:
{
   223dc:	b570      	push	{r4, r5, r6, lr}
   223de:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   223e0:	2100      	movs	r1, #0
{
   223e2:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   223e4:	f7fe fbfc 	bl	20be0 <settings_name_next>
   223e8:	280d      	cmp	r0, #13
   223ea:	d118      	bne.n	2241e <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   223ec:	7b23      	ldrb	r3, [r4, #12]
   223ee:	2b30      	cmp	r3, #48	; 0x30
   223f0:	d111      	bne.n	22416 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   223f2:	2300      	movs	r3, #0
   223f4:	702b      	strb	r3, [r5, #0]
   223f6:	f104 060c 	add.w	r6, r4, #12
   223fa:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   223fc:	462a      	mov	r2, r5
   223fe:	4620      	mov	r0, r4
   22400:	2301      	movs	r3, #1
   22402:	2102      	movs	r1, #2
   22404:	3402      	adds	r4, #2
   22406:	f7fd f9c0 	bl	1f78a <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2240a:	42b4      	cmp	r4, r6
   2240c:	f105 35ff 	add.w	r5, r5, #4294967295
   22410:	d1f4      	bne.n	223fc <bt_settings_decode_key+0x20>
	return 0;
   22412:	2000      	movs	r0, #0
}
   22414:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   22416:	2b31      	cmp	r3, #49	; 0x31
   22418:	d101      	bne.n	2241e <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   2241a:	2301      	movs	r3, #1
   2241c:	e7ea      	b.n	223f4 <bt_settings_decode_key+0x18>
		return -EINVAL;
   2241e:	f06f 0015 	mvn.w	r0, #21
   22422:	e7f7      	b.n	22414 <bt_settings_decode_key+0x38>

00022424 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   22424:	b510      	push	{r4, lr}
   22426:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   22428:	7801      	ldrb	r1, [r0, #0]
   2242a:	7822      	ldrb	r2, [r4, #0]
   2242c:	428a      	cmp	r2, r1
{
   2242e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   22430:	d00e      	beq.n	22450 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   22432:	4669      	mov	r1, sp
   22434:	f7f2 f954 	bl	146e0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   22438:	a905      	add	r1, sp, #20
   2243a:	4620      	mov	r0, r4
   2243c:	f7f2 f950 	bl	146e0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   22440:	2210      	movs	r2, #16
   22442:	f10d 0115 	add.w	r1, sp, #21
   22446:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2244a:	f7ff febd 	bl	221c8 <memcmp>
   2244e:	e007      	b.n	22460 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   22450:	2a01      	cmp	r2, #1
   22452:	d007      	beq.n	22464 <bt_uuid_cmp+0x40>
   22454:	2a02      	cmp	r2, #2
   22456:	d008      	beq.n	2246a <bt_uuid_cmp+0x46>
   22458:	b95a      	cbnz	r2, 22472 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2245a:	8840      	ldrh	r0, [r0, #2]
   2245c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2245e:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   22460:	b00a      	add	sp, #40	; 0x28
   22462:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   22464:	6840      	ldr	r0, [r0, #4]
   22466:	6863      	ldr	r3, [r4, #4]
   22468:	e7f9      	b.n	2245e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2246a:	2210      	movs	r2, #16
   2246c:	1c61      	adds	r1, r4, #1
   2246e:	3001      	adds	r0, #1
   22470:	e7eb      	b.n	2244a <bt_uuid_cmp+0x26>
	switch (u1->type) {
   22472:	f06f 0015 	mvn.w	r0, #21
   22476:	e7f3      	b.n	22460 <bt_uuid_cmp+0x3c>

00022478 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   22478:	2a04      	cmp	r2, #4
{
   2247a:	b538      	push	{r3, r4, r5, lr}
   2247c:	460c      	mov	r4, r1
	switch (data_len) {
   2247e:	d00d      	beq.n	2249c <bt_uuid_create+0x24>
   22480:	2a10      	cmp	r2, #16
   22482:	d019      	beq.n	224b8 <bt_uuid_create+0x40>
   22484:	2a02      	cmp	r2, #2
   22486:	f04f 0300 	mov.w	r3, #0
   2248a:	d11b      	bne.n	224c4 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   2248c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2248e:	784a      	ldrb	r2, [r1, #1]
   22490:	780b      	ldrb	r3, [r1, #0]
   22492:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   22496:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   22498:	2001      	movs	r0, #1
}
   2249a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2249c:	2301      	movs	r3, #1
   2249e:	7003      	strb	r3, [r0, #0]
   224a0:	78a2      	ldrb	r2, [r4, #2]
   224a2:	78c9      	ldrb	r1, [r1, #3]
   224a4:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   224a6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   224aa:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   224ac:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   224b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   224b4:	6042      	str	r2, [r0, #4]
		break;
   224b6:	e7ef      	b.n	22498 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   224b8:	2302      	movs	r3, #2
   224ba:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   224be:	f7ff fe93 	bl	221e8 <memcpy>
		break;
   224c2:	e7e9      	b.n	22498 <bt_uuid_create+0x20>
	switch (data_len) {
   224c4:	4618      	mov	r0, r3
   224c6:	e7e8      	b.n	2249a <bt_uuid_create+0x22>

000224c8 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   224c8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   224ca:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   224cc:	2106      	movs	r1, #6
{
   224ce:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   224d0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   224d4:	f7fb f8f8 	bl	1d6c8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   224d8:	b918      	cbnz	r0, 224e2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   224da:	79a3      	ldrb	r3, [r4, #6]
   224dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   224e0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   224e2:	bd10      	pop	{r4, pc}

000224e4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   224e4:	280f      	cmp	r0, #15
   224e6:	d806      	bhi.n	224f6 <bt_hci_evt_get_flags+0x12>
   224e8:	280d      	cmp	r0, #13
   224ea:	d80b      	bhi.n	22504 <bt_hci_evt_get_flags+0x20>
   224ec:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   224ee:	bf14      	ite	ne
   224f0:	2002      	movne	r0, #2
   224f2:	2003      	moveq	r0, #3
   224f4:	4770      	bx	lr
	switch (evt) {
   224f6:	2813      	cmp	r0, #19
   224f8:	d004      	beq.n	22504 <bt_hci_evt_get_flags+0x20>
   224fa:	281a      	cmp	r0, #26
   224fc:	bf14      	ite	ne
   224fe:	2002      	movne	r0, #2
   22500:	2001      	moveq	r0, #1
   22502:	4770      	bx	lr
   22504:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   22506:	4770      	bx	lr

00022508 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   22508:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2250c:	b193      	cbz	r3, 22534 <update_sec_level+0x2c>
   2250e:	7b5a      	ldrb	r2, [r3, #13]
   22510:	07d1      	lsls	r1, r2, #31
   22512:	d50f      	bpl.n	22534 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   22514:	06d2      	lsls	r2, r2, #27
   22516:	d50b      	bpl.n	22530 <update_sec_level+0x28>
   22518:	7b1b      	ldrb	r3, [r3, #12]
   2251a:	2b10      	cmp	r3, #16
   2251c:	d108      	bne.n	22530 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2251e:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   22520:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   22522:	7a82      	ldrb	r2, [r0, #10]
   22524:	7a40      	ldrb	r0, [r0, #9]
}
   22526:	4282      	cmp	r2, r0
   22528:	bf8c      	ite	hi
   2252a:	2000      	movhi	r0, #0
   2252c:	2001      	movls	r0, #1
   2252e:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   22530:	2303      	movs	r3, #3
   22532:	e7f5      	b.n	22520 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   22534:	2302      	movs	r3, #2
   22536:	e7f3      	b.n	22520 <update_sec_level+0x18>

00022538 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   22538:	2207      	movs	r2, #7
   2253a:	f7ff be55 	b.w	221e8 <memcpy>

0002253e <atomic_or>:
{
   2253e:	4603      	mov	r3, r0
}
   22540:	f3bf 8f5b 	dmb	ish
   22544:	e853 0f00 	ldrex	r0, [r3]
   22548:	ea40 0201 	orr.w	r2, r0, r1
   2254c:	e843 2c00 	strex	ip, r2, [r3]
   22550:	f1bc 0f00 	cmp.w	ip, #0
   22554:	d1f6      	bne.n	22544 <atomic_or+0x6>
   22556:	f3bf 8f5b 	dmb	ish
   2255a:	4770      	bx	lr

0002255c <unpair_remote>:
{
   2255c:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   2255e:	4601      	mov	r1, r0
   22560:	7818      	ldrb	r0, [r3, #0]
   22562:	f7f2 b989 	b.w	14878 <unpair>

00022566 <sys_put_le64>:
	dst[1] = val >> 8;
   22566:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2256a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2256c:	0e00      	lsrs	r0, r0, #24
   2256e:	7053      	strb	r3, [r2, #1]
   22570:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   22572:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   22574:	f3c1 2007 	ubfx	r0, r1, #8, #8
   22578:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2257a:	7093      	strb	r3, [r2, #2]
   2257c:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2257e:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   22580:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   22582:	71d1      	strb	r1, [r2, #7]
}
   22584:	4770      	bx	lr

00022586 <bt_hci_disconnect>:
{
   22586:	b570      	push	{r4, r5, r6, lr}
   22588:	4606      	mov	r6, r0
   2258a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2258c:	f240 4006 	movw	r0, #1030	; 0x406
   22590:	2103      	movs	r1, #3
   22592:	f7f2 fe69 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   22596:	4604      	mov	r4, r0
   22598:	b168      	cbz	r0, 225b6 <bt_hci_disconnect+0x30>
   2259a:	2103      	movs	r1, #3
   2259c:	3008      	adds	r0, #8
   2259e:	f001 ff86 	bl	244ae <net_buf_simple_add>
	disconn->reason = reason;
   225a2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   225a4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   225a6:	4621      	mov	r1, r4
   225a8:	2200      	movs	r2, #0
}
   225aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   225ae:	f240 4006 	movw	r0, #1030	; 0x406
   225b2:	f7f2 bfb5 	b.w	15520 <bt_hci_cmd_send_sync>
}
   225b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   225ba:	bd70      	pop	{r4, r5, r6, pc}

000225bc <bt_le_set_data_len>:
{
   225bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225be:	4607      	mov	r7, r0
   225c0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   225c2:	f242 0022 	movw	r0, #8226	; 0x2022
   225c6:	2106      	movs	r1, #6
{
   225c8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   225ca:	f7f2 fe4d 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   225ce:	4604      	mov	r4, r0
   225d0:	b170      	cbz	r0, 225f0 <bt_le_set_data_len+0x34>
   225d2:	2106      	movs	r1, #6
   225d4:	3008      	adds	r0, #8
   225d6:	f001 ff6a 	bl	244ae <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   225da:	883b      	ldrh	r3, [r7, #0]
   225dc:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   225de:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   225e0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   225e2:	4621      	mov	r1, r4
   225e4:	f242 0022 	movw	r0, #8226	; 0x2022
}
   225e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   225ec:	f7f2 be74 	b.w	152d8 <bt_hci_cmd_send>
}
   225f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   225f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000225f6 <bt_le_set_phy>:
{
   225f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   225fa:	4680      	mov	r8, r0
   225fc:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   225fe:	f242 0032 	movw	r0, #8242	; 0x2032
   22602:	2107      	movs	r1, #7
{
   22604:	f89d 9020 	ldrb.w	r9, [sp, #32]
   22608:	4616      	mov	r6, r2
   2260a:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2260c:	f7f2 fe2c 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   22610:	4604      	mov	r4, r0
   22612:	b190      	cbz	r0, 2263a <bt_le_set_phy+0x44>
   22614:	2107      	movs	r1, #7
   22616:	3008      	adds	r0, #8
   22618:	f001 ff49 	bl	244ae <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2261c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   22620:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   22622:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   22624:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   22626:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   22628:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2262c:	4621      	mov	r1, r4
   2262e:	f242 0032 	movw	r0, #8242	; 0x2032
}
   22632:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   22636:	f7f2 be4f 	b.w	152d8 <bt_hci_cmd_send>
}
   2263a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2263e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022642 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   22642:	6880      	ldr	r0, [r0, #8]
   22644:	f7f3 b8f4 	b.w	15830 <bt_hci_le_enh_conn_complete>

00022648 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   22648:	8802      	ldrh	r2, [r0, #0]
   2264a:	8843      	ldrh	r3, [r0, #2]
   2264c:	429a      	cmp	r2, r3
{
   2264e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   22650:	d818      	bhi.n	22684 <bt_le_conn_params_valid+0x3c>
   22652:	2a05      	cmp	r2, #5
   22654:	d916      	bls.n	22684 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   22656:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2265a:	d813      	bhi.n	22684 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   2265c:	8884      	ldrh	r4, [r0, #4]
   2265e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   22662:	d20f      	bcs.n	22684 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   22664:	88c1      	ldrh	r1, [r0, #6]
   22666:	f1a1 020a 	sub.w	r2, r1, #10
   2266a:	b292      	uxth	r2, r2
   2266c:	f640 4076 	movw	r0, #3190	; 0xc76
   22670:	4282      	cmp	r2, r0
   22672:	d807      	bhi.n	22684 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   22674:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   22678:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   2267c:	bf34      	ite	cc
   2267e:	2001      	movcc	r0, #1
   22680:	2000      	movcs	r0, #0
}
   22682:	bd10      	pop	{r4, pc}
		return false;
   22684:	2000      	movs	r0, #0
   22686:	e7fc      	b.n	22682 <bt_le_conn_params_valid+0x3a>

00022688 <bt_send>:
		return bt_hci_ecc_send(buf);
   22688:	f7f1 be4a 	b.w	14320 <bt_hci_ecc_send>

0002268c <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2268c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2268e:	f7f9 fbed 	bl	1be6c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   22692:	b118      	cbz	r0, 2269c <bt_addr_le_is_bonded+0x10>
   22694:	89c0      	ldrh	r0, [r0, #14]
   22696:	3800      	subs	r0, #0
   22698:	bf18      	it	ne
   2269a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2269c:	bd08      	pop	{r3, pc}

0002269e <bt_addr_le_copy>:
   2269e:	2207      	movs	r2, #7
   226a0:	f7ff bda2 	b.w	221e8 <memcpy>

000226a4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   226a4:	f3bf 8f5b 	dmb	ish
   226a8:	6800      	ldr	r0, [r0, #0]
   226aa:	f3bf 8f5b 	dmb	ish
}
   226ae:	4770      	bx	lr

000226b0 <atomic_test_bit>:
{
   226b0:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   226b2:	f7ff fff7 	bl	226a4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   226b6:	4108      	asrs	r0, r1
}
   226b8:	f000 0001 	and.w	r0, r0, #1
   226bc:	bd08      	pop	{r3, pc}

000226be <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   226be:	f100 0210 	add.w	r2, r0, #16
{
   226c2:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   226c4:	4610      	mov	r0, r2
{
   226c6:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   226c8:	2106      	movs	r1, #6
   226ca:	f7ff fff1 	bl	226b0 <atomic_test_bit>
   226ce:	b130      	cbz	r0, 226de <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   226d0:	210b      	movs	r1, #11
   226d2:	4610      	mov	r0, r2
   226d4:	f7ff ffec 	bl	226b0 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   226d8:	b908      	cbnz	r0, 226de <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   226da:	2301      	movs	r3, #1
   226dc:	7023      	strb	r3, [r4, #0]
}
   226de:	bd10      	pop	{r4, pc}

000226e0 <atomic_or>:
{
   226e0:	4603      	mov	r3, r0
}
   226e2:	f3bf 8f5b 	dmb	ish
   226e6:	e853 0f00 	ldrex	r0, [r3]
   226ea:	ea40 0201 	orr.w	r2, r0, r1
   226ee:	e843 2c00 	strex	ip, r2, [r3]
   226f2:	f1bc 0f00 	cmp.w	ip, #0
   226f6:	d1f6      	bne.n	226e6 <atomic_or+0x6>
   226f8:	f3bf 8f5b 	dmb	ish
   226fc:	4770      	bx	lr

000226fe <addr_res_enable>:
{
   226fe:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   22700:	2101      	movs	r1, #1
{
   22702:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   22704:	f242 002d 	movw	r0, #8237	; 0x202d
   22708:	f7f2 fdae 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   2270c:	4604      	mov	r4, r0
   2270e:	b158      	cbz	r0, 22728 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   22710:	4629      	mov	r1, r5
   22712:	3008      	adds	r0, #8
   22714:	f001 feda 	bl	244cc <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   22718:	4621      	mov	r1, r4
   2271a:	2200      	movs	r2, #0
}
   2271c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   22720:	f242 002d 	movw	r0, #8237	; 0x202d
   22724:	f7f2 befc 	b.w	15520 <bt_hci_cmd_send_sync>
}
   22728:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2272c:	bd38      	pop	{r3, r4, r5, pc}

0002272e <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2272e:	7a03      	ldrb	r3, [r0, #8]
   22730:	075b      	lsls	r3, r3, #29
{
   22732:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   22734:	d505      	bpl.n	22742 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   22736:	4601      	mov	r1, r0
   22738:	322a      	adds	r2, #42	; 0x2a
   2273a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2273e:	f7f3 bbb3 	b.w	15ea8 <hci_id_add>
}
   22742:	4770      	bx	lr

00022744 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   22744:	f100 0210 	add.w	r2, r0, #16
{
   22748:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2274a:	2106      	movs	r1, #6
{
   2274c:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2274e:	4610      	mov	r0, r2
   22750:	f7ff ffae 	bl	226b0 <atomic_test_bit>
   22754:	b150      	cbz	r0, 2276c <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   22756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   2275a:	4610      	mov	r0, r2
   2275c:	f7ff ffc0 	bl	226e0 <atomic_or>
		bt_le_adv_set_enable(adv, false);
   22760:	4620      	mov	r0, r4
   22762:	2100      	movs	r1, #0
}
   22764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   22768:	f000 b929 	b.w	229be <bt_le_adv_set_enable>
}
   2276c:	bd10      	pop	{r4, pc}

0002276e <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   2276e:	f100 0210 	add.w	r2, r0, #16
{
   22772:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   22774:	2105      	movs	r1, #5
   22776:	4610      	mov	r0, r2
   22778:	f7ff ff9a 	bl	226b0 <atomic_test_bit>
   2277c:	b958      	cbnz	r0, 22796 <adv_rpa_invalidate+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2277e:	f3bf 8f5b 	dmb	ish
   22782:	e852 3f00 	ldrex	r3, [r2]
   22786:	f023 0310 	bic.w	r3, r3, #16
   2278a:	e842 3100 	strex	r1, r3, [r2]
   2278e:	2900      	cmp	r1, #0
   22790:	d1f7      	bne.n	22782 <adv_rpa_invalidate+0x14>
   22792:	f3bf 8f5b 	dmb	ish
}
   22796:	bd08      	pop	{r3, pc}

00022798 <adv_unpause_enabled>:
   22798:	f100 0310 	add.w	r3, r0, #16
   2279c:	f3bf 8f5b 	dmb	ish
   227a0:	e853 2f00 	ldrex	r2, [r3]
   227a4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   227a8:	e843 1c00 	strex	ip, r1, [r3]
   227ac:	f1bc 0f00 	cmp.w	ip, #0
   227b0:	d1f6      	bne.n	227a0 <adv_unpause_enabled+0x8>
   227b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   227b6:	0493      	lsls	r3, r2, #18
   227b8:	d502      	bpl.n	227c0 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   227ba:	2101      	movs	r1, #1
   227bc:	f000 b8ff 	b.w	229be <bt_le_adv_set_enable>
}
   227c0:	4770      	bx	lr

000227c2 <bt_lookup_id_addr>:
{
   227c2:	b510      	push	{r4, lr}
   227c4:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   227c6:	f7f9 fb17 	bl	1bdf8 <bt_keys_find_irk>
		if (keys) {
   227ca:	b100      	cbz	r0, 227ce <bt_lookup_id_addr+0xc>
			return &keys->addr;
   227cc:	1c44      	adds	r4, r0, #1
}
   227ce:	4620      	mov	r0, r4
   227d0:	bd10      	pop	{r4, pc}

000227d2 <bt_id_set_adv_private_addr>:
		return bt_id_set_private_addr(adv->id);
   227d2:	7800      	ldrb	r0, [r0, #0]
   227d4:	f7f3 bc4e 	b.w	16074 <bt_id_set_private_addr>

000227d8 <bt_id_adv_random_addr_check>:
}
   227d8:	2001      	movs	r0, #1
   227da:	4770      	bx	lr

000227dc <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   227dc:	7a03      	ldrb	r3, [r0, #8]
   227de:	07d9      	lsls	r1, r3, #31
   227e0:	d504      	bpl.n	227ec <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   227e2:	f023 0301 	bic.w	r3, r3, #1
   227e6:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   227e8:	f7f3 bcee 	b.w	161c8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   227ec:	0799      	lsls	r1, r3, #30
   227ee:	d504      	bpl.n	227fa <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   227f0:	f023 0302 	bic.w	r3, r3, #2
   227f4:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   227f6:	f7f3 bdb5 	b.w	16364 <bt_id_del>
}
   227fa:	4770      	bx	lr

000227fc <get_adv_channel_map>:
{
   227fc:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   227fe:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   22802:	bf0c      	ite	eq
   22804:	2007      	moveq	r0, #7
   22806:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   22808:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2280a:	bf48      	it	mi
   2280c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   22810:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   22812:	bf48      	it	mi
   22814:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   22818:	4770      	bx	lr

0002281a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2281a:	f3bf 8f5b 	dmb	ish
   2281e:	6800      	ldr	r0, [r0, #0]
   22820:	f3bf 8f5b 	dmb	ish
}
   22824:	4770      	bx	lr

00022826 <atomic_and>:
{
   22826:	4603      	mov	r3, r0
}
   22828:	f3bf 8f5b 	dmb	ish
   2282c:	e853 0f00 	ldrex	r0, [r3]
   22830:	ea00 0201 	and.w	r2, r0, r1
   22834:	e843 2c00 	strex	ip, r2, [r3]
   22838:	f1bc 0f00 	cmp.w	ip, #0
   2283c:	d1f6      	bne.n	2282c <atomic_and+0x6>
   2283e:	f3bf 8f5b 	dmb	ish
   22842:	4770      	bx	lr

00022844 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22844:	2301      	movs	r3, #1
{
   22846:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   22848:	fa03 f101 	lsl.w	r1, r3, r1
{
   2284c:	4604      	mov	r4, r0
	if (val) {
   2284e:	b162      	cbz	r2, 2286a <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22850:	f3bf 8f5b 	dmb	ish
   22854:	e854 3f00 	ldrex	r3, [r4]
   22858:	430b      	orrs	r3, r1
   2285a:	e844 3200 	strex	r2, r3, [r4]
   2285e:	2a00      	cmp	r2, #0
   22860:	d1f8      	bne.n	22854 <atomic_set_bit_to+0x10>
   22862:	f3bf 8f5b 	dmb	ish
	}
}
   22866:	bc10      	pop	{r4}
   22868:	4770      	bx	lr
   2286a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2286c:	43c9      	mvns	r1, r1
   2286e:	f7ff bfda 	b.w	22826 <atomic_and>

00022872 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   22872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22876:	b087      	sub	sp, #28
   22878:	4605      	mov	r5, r0
   2287a:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   2287e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   22882:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   22886:	460c      	mov	r4, r1
   22888:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   2288a:	2100      	movs	r1, #0
   2288c:	2210      	movs	r2, #16
   2288e:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   22890:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   22892:	f7ff fcd4 	bl	2223e <memset>
	if (use_name) {
   22896:	b187      	cbz	r7, 228ba <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   22898:	f7f3 fb02 	bl	15ea0 <bt_get_name>
   2289c:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2289e:	2c00      	cmp	r4, #0
   228a0:	d13e      	bne.n	22920 <le_adv_update.constprop.0+0xae>
   228a2:	2e00      	cmp	r6, #0
   228a4:	d148      	bne.n	22938 <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   228a6:	4648      	mov	r0, r9
   228a8:	f7ff fc63 	bl	22172 <strlen>
   228ac:	2209      	movs	r2, #9
   228ae:	f88d 2000 	strb.w	r2, [sp]
   228b2:	f88d 0001 	strb.w	r0, [sp, #1]
   228b6:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   228ba:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   228be:	2f00      	cmp	r7, #0
   228c0:	d03c      	beq.n	2293c <le_adv_update.constprop.0+0xca>
   228c2:	f1ba 0f00 	cmp.w	sl, #0
   228c6:	d002      	beq.n	228ce <le_adv_update.constprop.0+0x5c>
   228c8:	f1b8 0f00 	cmp.w	r8, #0
   228cc:	d036      	beq.n	2293c <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   228ce:	2301      	movs	r3, #1
			d[1].data = &data;
   228d0:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   228d4:	9305      	str	r3, [sp, #20]
			d_len = 2;
   228d6:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   228d8:	a902      	add	r1, sp, #8
   228da:	f242 0008 	movw	r0, #8200	; 0x2008
   228de:	f7f4 f82b 	bl	16938 <hci_set_ad>
		if (err) {
   228e2:	4604      	mov	r4, r0
   228e4:	b978      	cbnz	r0, 22906 <le_adv_update.constprop.0+0x94>
	if (scannable) {
   228e6:	f1ba 0f00 	cmp.w	sl, #0
   228ea:	d129      	bne.n	22940 <le_adv_update.constprop.0+0xce>
   228ec:	3510      	adds	r5, #16
   228ee:	f3bf 8f5b 	dmb	ish
   228f2:	e855 3f00 	ldrex	r3, [r5]
   228f6:	f043 0304 	orr.w	r3, r3, #4
   228fa:	e845 3200 	strex	r2, r3, [r5]
   228fe:	2a00      	cmp	r2, #0
   22900:	d1f7      	bne.n	228f2 <le_adv_update.constprop.0+0x80>
   22902:	f3bf 8f5b 	dmb	ish
}
   22906:	4620      	mov	r0, r4
   22908:	b007      	add	sp, #28
   2290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2290e:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   22912:	3908      	subs	r1, #8
   22914:	2901      	cmp	r1, #1
   22916:	d92a      	bls.n	2296e <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   22918:	3201      	adds	r2, #1
   2291a:	4593      	cmp	fp, r2
   2291c:	d1f7      	bne.n	2290e <le_adv_update.constprop.0+0x9c>
   2291e:	e7c0      	b.n	228a2 <le_adv_update.constprop.0+0x30>
   22920:	2200      	movs	r2, #0
   22922:	e7fa      	b.n	2291a <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   22924:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   22928:	3908      	subs	r1, #8
   2292a:	2901      	cmp	r1, #1
   2292c:	d91f      	bls.n	2296e <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   2292e:	3201      	adds	r2, #1
   22930:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22932:	4293      	cmp	r3, r2
   22934:	d1f6      	bne.n	22924 <le_adv_update.constprop.0+0xb2>
   22936:	e7b6      	b.n	228a6 <le_adv_update.constprop.0+0x34>
   22938:	2200      	movs	r2, #0
   2293a:	e7f9      	b.n	22930 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   2293c:	2201      	movs	r2, #1
   2293e:	e7cb      	b.n	228d8 <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   22940:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   22942:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   22944:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   22946:	b187      	cbz	r7, 2296a <le_adv_update.constprop.0+0xf8>
   22948:	f1b8 0f00 	cmp.w	r8, #0
   2294c:	d10d      	bne.n	2296a <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   2294e:	2301      	movs	r3, #1
			d[1].data = &data;
   22950:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   22954:	9305      	str	r3, [sp, #20]
			d_len = 2;
   22956:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22958:	a902      	add	r1, sp, #8
   2295a:	f242 0009 	movw	r0, #8201	; 0x2009
   2295e:	f7f3 ffeb 	bl	16938 <hci_set_ad>
		if (err) {
   22962:	2800      	cmp	r0, #0
   22964:	d0c2      	beq.n	228ec <le_adv_update.constprop.0+0x7a>
   22966:	4604      	mov	r4, r0
   22968:	e7cd      	b.n	22906 <le_adv_update.constprop.0+0x94>
		d_len = 1;
   2296a:	2201      	movs	r2, #1
   2296c:	e7f4      	b.n	22958 <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   2296e:	f06f 0415 	mvn.w	r4, #21
   22972:	e7c8      	b.n	22906 <le_adv_update.constprop.0+0x94>

00022974 <bt_le_adv_set_enable_legacy>:
{
   22974:	b570      	push	{r4, r5, r6, lr}
   22976:	4606      	mov	r6, r0
   22978:	b086      	sub	sp, #24
   2297a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2297c:	f242 000a 	movw	r0, #8202	; 0x200a
   22980:	2101      	movs	r1, #1
   22982:	f7f2 fc71 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   22986:	4604      	mov	r4, r0
   22988:	b1b0      	cbz	r0, 229b8 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   2298a:	3008      	adds	r0, #8
   2298c:	b195      	cbz	r5, 229b4 <bt_le_adv_set_enable_legacy+0x40>
   2298e:	2101      	movs	r1, #1
   22990:	f001 fd9c 	bl	244cc <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   22994:	f106 0210 	add.w	r2, r6, #16
   22998:	a903      	add	r1, sp, #12
   2299a:	4620      	mov	r0, r4
   2299c:	9500      	str	r5, [sp, #0]
   2299e:	2306      	movs	r3, #6
   229a0:	f7f2 fc50 	bl	15244 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   229a4:	2200      	movs	r2, #0
   229a6:	4621      	mov	r1, r4
   229a8:	f242 000a 	movw	r0, #8202	; 0x200a
   229ac:	f7f2 fdb8 	bl	15520 <bt_hci_cmd_send_sync>
}
   229b0:	b006      	add	sp, #24
   229b2:	bd70      	pop	{r4, r5, r6, pc}
   229b4:	4629      	mov	r1, r5
   229b6:	e7eb      	b.n	22990 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   229b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   229bc:	e7f8      	b.n	229b0 <bt_le_adv_set_enable_legacy+0x3c>

000229be <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   229be:	f7ff bfd9 	b.w	22974 <bt_le_adv_set_enable_legacy>

000229c2 <tx_notify>:
{
   229c2:	b570      	push	{r4, r5, r6, lr}
   229c4:	4604      	mov	r4, r0
	__asm__ volatile(
   229c6:	f04f 0240 	mov.w	r2, #64	; 0x40
   229ca:	f3ef 8311 	mrs	r3, BASEPRI
   229ce:	f382 8811 	msr	BASEPRI, r2
   229d2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   229d6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   229d8:	b920      	cbnz	r0, 229e4 <tx_notify+0x22>
	__asm__ volatile(
   229da:	f383 8811 	msr	BASEPRI, r3
   229de:	f3bf 8f6f 	isb	sy
}
   229e2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   229e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   229e6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   229e8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   229ea:	4288      	cmp	r0, r1
	list->tail = node;
   229ec:	bf08      	it	eq
   229ee:	6262      	streq	r2, [r4, #36]	; 0x24
   229f0:	f383 8811 	msr	BASEPRI, r3
   229f4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   229f8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   229fc:	f7f4 fb9c 	bl	17138 <tx_free>
		cb(conn, user_data);
   22a00:	4631      	mov	r1, r6
   22a02:	4620      	mov	r0, r4
   22a04:	47a8      	blx	r5
	while (1) {
   22a06:	e7de      	b.n	229c6 <tx_notify+0x4>

00022a08 <tx_complete_work>:
	tx_notify(conn);
   22a08:	3828      	subs	r0, #40	; 0x28
   22a0a:	f7ff bfda 	b.w	229c2 <tx_notify>

00022a0e <bt_conn_new>:
{
   22a0e:	b538      	push	{r3, r4, r5, lr}
   22a10:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   22a12:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22a14:	2501      	movs	r5, #1
   22a16:	428b      	cmp	r3, r1
   22a18:	d102      	bne.n	22a20 <bt_conn_new+0x12>
		return NULL;
   22a1a:	2400      	movs	r4, #0
}
   22a1c:	4620      	mov	r0, r4
   22a1e:	bd38      	pop	{r3, r4, r5, pc}
   22a20:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   22a24:	f3bf 8f5b 	dmb	ish
   22a28:	e852 0f00 	ldrex	r0, [r2]
   22a2c:	2800      	cmp	r0, #0
   22a2e:	d104      	bne.n	22a3a <bt_conn_new+0x2c>
   22a30:	e842 5c00 	strex	ip, r5, [r2]
   22a34:	f1bc 0f00 	cmp.w	ip, #0
   22a38:	d1f6      	bne.n	22a28 <bt_conn_new+0x1a>
   22a3a:	f3bf 8f5b 	dmb	ish
   22a3e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   22a42:	d002      	beq.n	22a4a <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   22a44:	3301      	adds	r3, #1
   22a46:	4604      	mov	r4, r0
   22a48:	e7e5      	b.n	22a16 <bt_conn_new+0x8>
	if (!conn) {
   22a4a:	2c00      	cmp	r4, #0
   22a4c:	d0e6      	beq.n	22a1c <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   22a4e:	22b8      	movs	r2, #184	; 0xb8
   22a50:	2100      	movs	r1, #0
   22a52:	4620      	mov	r0, r4
   22a54:	f7ff fbf3 	bl	2223e <memset>
	return conn;
   22a58:	e7e0      	b.n	22a1c <bt_conn_new+0xe>

00022a5a <bt_conn_set_security>:
{
   22a5a:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   22a5c:	7b43      	ldrb	r3, [r0, #13]
   22a5e:	2b07      	cmp	r3, #7
{
   22a60:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   22a62:	d128      	bne.n	22ab6 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   22a64:	7a43      	ldrb	r3, [r0, #9]
   22a66:	428b      	cmp	r3, r1
   22a68:	d228      	bcs.n	22abc <bt_conn_set_security+0x62>
   22a6a:	7a83      	ldrb	r3, [r0, #10]
   22a6c:	428b      	cmp	r3, r1
   22a6e:	d225      	bcs.n	22abc <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22a70:	f3bf 8f5b 	dmb	ish
	if (val) {
   22a74:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   22a76:	f100 0304 	add.w	r3, r0, #4
   22a7a:	d513      	bpl.n	22aa4 <bt_conn_set_security+0x4a>
   22a7c:	e853 2f00 	ldrex	r2, [r3]
   22a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   22a84:	e843 2000 	strex	r0, r2, [r3]
   22a88:	2800      	cmp	r0, #0
   22a8a:	d1f7      	bne.n	22a7c <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22a8c:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   22a90:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   22a94:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   22a96:	4620      	mov	r0, r4
   22a98:	f7f8 fc04 	bl	1b2a4 <bt_smp_start_security>
	if (err) {
   22a9c:	b108      	cbz	r0, 22aa2 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   22a9e:	7a63      	ldrb	r3, [r4, #9]
   22aa0:	72a3      	strb	r3, [r4, #10]
}
   22aa2:	bd10      	pop	{r4, pc}
   22aa4:	e853 2f00 	ldrex	r2, [r3]
   22aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   22aac:	e843 2000 	strex	r0, r2, [r3]
   22ab0:	2800      	cmp	r0, #0
   22ab2:	d0eb      	beq.n	22a8c <bt_conn_set_security+0x32>
   22ab4:	e7f6      	b.n	22aa4 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   22ab6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22aba:	e7f2      	b.n	22aa2 <bt_conn_set_security+0x48>
		return 0;
   22abc:	2000      	movs	r0, #0
   22abe:	e7f0      	b.n	22aa2 <bt_conn_set_security+0x48>

00022ac0 <bt_conn_get_security>:
}
   22ac0:	7a40      	ldrb	r0, [r0, #9]
   22ac2:	4770      	bx	lr

00022ac4 <bt_conn_reset_rx_state>:
{
   22ac4:	b510      	push	{r4, lr}
   22ac6:	4604      	mov	r4, r0
	if (!conn->rx) {
   22ac8:	6900      	ldr	r0, [r0, #16]
   22aca:	b118      	cbz	r0, 22ad4 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   22acc:	f7f9 fb96 	bl	1c1fc <net_buf_unref>
	conn->rx = NULL;
   22ad0:	2300      	movs	r3, #0
   22ad2:	6123      	str	r3, [r4, #16]
}
   22ad4:	bd10      	pop	{r4, pc}

00022ad6 <conn_cleanup>:
{
   22ad6:	b570      	push	{r4, r5, r6, lr}
   22ad8:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   22ada:	f100 0638 	add.w	r6, r0, #56	; 0x38
   22ade:	2200      	movs	r2, #0
   22ae0:	2300      	movs	r3, #0
   22ae2:	4630      	mov	r0, r6
   22ae4:	f001 fc92 	bl	2440c <net_buf_get>
   22ae8:	4605      	mov	r5, r0
   22aea:	b950      	cbnz	r0, 22b02 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   22aec:	4620      	mov	r0, r4
   22aee:	f7ff ffe9 	bl	22ac4 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   22af2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22af6:	2200      	movs	r2, #0
}
   22af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   22afc:	2300      	movs	r3, #0
   22afe:	f7fb bfc9 	b.w	1ea94 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   22b02:	6968      	ldr	r0, [r5, #20]
   22b04:	b108      	cbz	r0, 22b0a <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   22b06:	f7f4 fb17 	bl	17138 <tx_free>
		net_buf_unref(buf);
   22b0a:	4628      	mov	r0, r5
   22b0c:	f7f9 fb76 	bl	1c1fc <net_buf_unref>
   22b10:	e7e5      	b.n	22ade <conn_cleanup+0x8>

00022b12 <bt_conn_connected>:
{
   22b12:	b510      	push	{r4, lr}
   22b14:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   22b16:	f7f5 f955 	bl	17dc4 <bt_l2cap_connected>
	notify_connected(conn);
   22b1a:	4620      	mov	r0, r4
}
   22b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   22b20:	f7f4 bb14 	b.w	1714c <notify_connected>

00022b24 <bt_conn_is_peer_addr_le>:
{
   22b24:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   22b26:	7a03      	ldrb	r3, [r0, #8]
   22b28:	428b      	cmp	r3, r1
{
   22b2a:	4604      	mov	r4, r0
   22b2c:	4615      	mov	r5, r2
	if (id != conn->id) {
   22b2e:	d115      	bne.n	22b5c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   22b30:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22b34:	2207      	movs	r2, #7
   22b36:	4628      	mov	r0, r5
   22b38:	f7ff fb46 	bl	221c8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   22b3c:	b180      	cbz	r0, 22b60 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   22b3e:	78e3      	ldrb	r3, [r4, #3]
   22b40:	2207      	movs	r2, #7
   22b42:	b943      	cbnz	r3, 22b56 <bt_conn_is_peer_addr_le+0x32>
   22b44:	f104 0196 	add.w	r1, r4, #150	; 0x96
   22b48:	4628      	mov	r0, r5
   22b4a:	f7ff fb3d 	bl	221c8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   22b4e:	fab0 f080 	clz	r0, r0
   22b52:	0940      	lsrs	r0, r0, #5
}
   22b54:	bd38      	pop	{r3, r4, r5, pc}
   22b56:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   22b5a:	e7f5      	b.n	22b48 <bt_conn_is_peer_addr_le+0x24>
		return false;
   22b5c:	2000      	movs	r0, #0
   22b5e:	e7f9      	b.n	22b54 <bt_conn_is_peer_addr_le+0x30>
		return true;
   22b60:	2001      	movs	r0, #1
   22b62:	e7f7      	b.n	22b54 <bt_conn_is_peer_addr_le+0x30>

00022b64 <bt_conn_ref>:
{
   22b64:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   22b66:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22b6a:	f3bf 8f5b 	dmb	ish
   22b6e:	6813      	ldr	r3, [r2, #0]
   22b70:	f3bf 8f5b 	dmb	ish
		if (!old) {
   22b74:	b17b      	cbz	r3, 22b96 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22b76:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   22b7a:	1c59      	adds	r1, r3, #1
   22b7c:	e852 4f00 	ldrex	r4, [r2]
   22b80:	429c      	cmp	r4, r3
   22b82:	d104      	bne.n	22b8e <bt_conn_ref+0x2a>
   22b84:	e842 1c00 	strex	ip, r1, [r2]
   22b88:	f1bc 0f00 	cmp.w	ip, #0
   22b8c:	d1f6      	bne.n	22b7c <bt_conn_ref+0x18>
   22b8e:	f3bf 8f5b 	dmb	ish
   22b92:	d1ea      	bne.n	22b6a <bt_conn_ref+0x6>
}
   22b94:	bd10      	pop	{r4, pc}
			return NULL;
   22b96:	4618      	mov	r0, r3
   22b98:	e7fc      	b.n	22b94 <bt_conn_ref+0x30>

00022b9a <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   22b9a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   22b9e:	f3bf 8f5b 	dmb	ish
   22ba2:	e853 2f00 	ldrex	r2, [r3]
   22ba6:	3a01      	subs	r2, #1
   22ba8:	e843 2100 	strex	r1, r2, [r3]
   22bac:	2900      	cmp	r1, #0
   22bae:	d1f8      	bne.n	22ba2 <bt_conn_unref+0x8>
   22bb0:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22bb4:	f3bf 8f5b 	dmb	ish
   22bb8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   22bbc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   22bc0:	b90b      	cbnz	r3, 22bc6 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   22bc2:	f7f4 b913 	b.w	16dec <bt_le_adv_resume>
}
   22bc6:	4770      	bx	lr

00022bc8 <conn_lookup_handle>:
{
   22bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22bcc:	4607      	mov	r7, r0
   22bce:	460e      	mov	r6, r1
   22bd0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   22bd2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   22bd4:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   22bd8:	42b4      	cmp	r4, r6
   22bda:	d103      	bne.n	22be4 <conn_lookup_handle+0x1c>
	return NULL;
   22bdc:	2300      	movs	r3, #0
}
   22bde:	4618      	mov	r0, r3
   22be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   22be4:	fb09 7004 	mla	r0, r9, r4, r7
   22be8:	f7ff ffbc 	bl	22b64 <bt_conn_ref>
   22bec:	4603      	mov	r3, r0
		if (!conn) {
   22bee:	b158      	cbz	r0, 22c08 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   22bf0:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   22bf2:	2d01      	cmp	r5, #1
   22bf4:	d002      	beq.n	22bfc <conn_lookup_handle+0x34>
   22bf6:	3d07      	subs	r5, #7
   22bf8:	2d01      	cmp	r5, #1
   22bfa:	d803      	bhi.n	22c04 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   22bfc:	881a      	ldrh	r2, [r3, #0]
   22bfe:	4542      	cmp	r2, r8
   22c00:	d0ed      	beq.n	22bde <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   22c02:	4618      	mov	r0, r3
   22c04:	f7ff ffc9 	bl	22b9a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   22c08:	3401      	adds	r4, #1
   22c0a:	e7e5      	b.n	22bd8 <conn_lookup_handle+0x10>

00022c0c <bt_conn_get_dst>:
}
   22c0c:	3088      	adds	r0, #136	; 0x88
   22c0e:	4770      	bx	lr

00022c10 <bt_conn_disconnect>:
{
   22c10:	b538      	push	{r3, r4, r5, lr}
   22c12:	7b43      	ldrb	r3, [r0, #13]
   22c14:	3b02      	subs	r3, #2
   22c16:	4604      	mov	r4, r0
   22c18:	2b06      	cmp	r3, #6
   22c1a:	d805      	bhi.n	22c28 <bt_conn_disconnect+0x18>
   22c1c:	e8df f003 	tbb	[pc, r3]
   22c20:	04040408 	.word	0x04040408
   22c24:	0e0c      	.short	0x0e0c
   22c26:	0c          	.byte	0x0c
   22c27:	00          	.byte	0x00
	switch (conn->state) {
   22c28:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   22c2c:	4628      	mov	r0, r5
   22c2e:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   22c30:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   22c32:	2100      	movs	r1, #0
   22c34:	f7f4 fd40 	bl	176b8 <bt_conn_set_state>
		return 0;
   22c38:	2500      	movs	r5, #0
   22c3a:	e7f7      	b.n	22c2c <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   22c3c:	8800      	ldrh	r0, [r0, #0]
   22c3e:	f7ff fca2 	bl	22586 <bt_hci_disconnect>
	if (err) {
   22c42:	4605      	mov	r5, r0
   22c44:	2800      	cmp	r0, #0
   22c46:	d1f1      	bne.n	22c2c <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   22c48:	7b63      	ldrb	r3, [r4, #13]
   22c4a:	2b07      	cmp	r3, #7
   22c4c:	d1ee      	bne.n	22c2c <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   22c4e:	2108      	movs	r1, #8
   22c50:	4620      	mov	r0, r4
   22c52:	f7f4 fd31 	bl	176b8 <bt_conn_set_state>
   22c56:	e7e9      	b.n	22c2c <bt_conn_disconnect+0x1c>

00022c58 <bt_conn_le_conn_update>:
{
   22c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c5a:	4607      	mov	r7, r0
   22c5c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   22c5e:	f242 0013 	movw	r0, #8211	; 0x2013
   22c62:	210e      	movs	r1, #14
   22c64:	f7f2 fb00 	bl	15268 <bt_hci_cmd_create>
	if (!buf) {
   22c68:	4606      	mov	r6, r0
   22c6a:	b1d0      	cbz	r0, 22ca2 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   22c6c:	210e      	movs	r1, #14
   22c6e:	3008      	adds	r0, #8
   22c70:	f001 fc1d 	bl	244ae <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   22c74:	220e      	movs	r2, #14
   22c76:	4604      	mov	r4, r0
   22c78:	2100      	movs	r1, #0
   22c7a:	f7ff fae0 	bl	2223e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   22c7e:	883b      	ldrh	r3, [r7, #0]
   22c80:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   22c82:	882b      	ldrh	r3, [r5, #0]
   22c84:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   22c86:	886b      	ldrh	r3, [r5, #2]
   22c88:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   22c8a:	88ab      	ldrh	r3, [r5, #4]
   22c8c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   22c8e:	88eb      	ldrh	r3, [r5, #6]
   22c90:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22c92:	4631      	mov	r1, r6
   22c94:	2200      	movs	r2, #0
}
   22c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22c9a:	f242 0013 	movw	r0, #8211	; 0x2013
   22c9e:	f7f2 bc3f 	b.w	15520 <bt_hci_cmd_send_sync>
}
   22ca2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022ca8 <l2cap_connected>:
}
   22ca8:	4770      	bx	lr

00022caa <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   22caa:	3010      	adds	r0, #16
   22cac:	f002 b86c 	b.w	24d88 <k_work_cancel_delayable>

00022cb0 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22cb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   22cb2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22cb4:	b17b      	cbz	r3, 22cd6 <bt_l2cap_chan_remove+0x26>
   22cb6:	3b08      	subs	r3, #8
   22cb8:	2200      	movs	r2, #0
   22cba:	b163      	cbz	r3, 22cd6 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   22cbc:	428b      	cmp	r3, r1
   22cbe:	f103 0408 	add.w	r4, r3, #8
   22cc2:	d10f      	bne.n	22ce4 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   22cc4:	688b      	ldr	r3, [r1, #8]
   22cc6:	b93a      	cbnz	r2, 22cd8 <bt_l2cap_chan_remove+0x28>
   22cc8:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   22cca:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   22ccc:	4294      	cmp	r4, r2
   22cce:	d100      	bne.n	22cd2 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   22cd0:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   22cd2:	2300      	movs	r3, #0
   22cd4:	608b      	str	r3, [r1, #8]
}
   22cd6:	bd10      	pop	{r4, pc}
   22cd8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22cda:	6d43      	ldr	r3, [r0, #84]	; 0x54
   22cdc:	429c      	cmp	r4, r3
	list->tail = node;
   22cde:	bf08      	it	eq
   22ce0:	6542      	streq	r2, [r0, #84]	; 0x54
}
   22ce2:	e7f6      	b.n	22cd2 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22ce4:	2c00      	cmp	r4, #0
   22ce6:	d0f6      	beq.n	22cd6 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22ce8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22cea:	2b00      	cmp	r3, #0
   22cec:	d0f3      	beq.n	22cd6 <bt_l2cap_chan_remove+0x26>
   22cee:	3b08      	subs	r3, #8
   22cf0:	4622      	mov	r2, r4
   22cf2:	e7e2      	b.n	22cba <bt_l2cap_chan_remove+0xa>

00022cf4 <bt_l2cap_chan_del>:
{
   22cf4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   22cf6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   22cfa:	4604      	mov	r4, r0
	if (!chan->conn) {
   22cfc:	b123      	cbz	r3, 22d08 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   22cfe:	686b      	ldr	r3, [r5, #4]
   22d00:	b103      	cbz	r3, 22d04 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   22d02:	4798      	blx	r3
	chan->conn = NULL;
   22d04:	2300      	movs	r3, #0
   22d06:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   22d08:	68e3      	ldr	r3, [r4, #12]
   22d0a:	b10b      	cbz	r3, 22d10 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   22d0c:	4620      	mov	r0, r4
   22d0e:	4798      	blx	r3
	if (ops->released) {
   22d10:	69eb      	ldr	r3, [r5, #28]
   22d12:	b11b      	cbz	r3, 22d1c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   22d14:	4620      	mov	r0, r4
}
   22d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   22d1a:	4718      	bx	r3
}
   22d1c:	bd70      	pop	{r4, r5, r6, pc}

00022d1e <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22d1e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   22d20:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22d22:	b18b      	cbz	r3, 22d48 <bt_l2cap_disconnected+0x2a>
   22d24:	f1b3 0008 	subs.w	r0, r3, #8
   22d28:	d00e      	beq.n	22d48 <bt_l2cap_disconnected+0x2a>
   22d2a:	681c      	ldr	r4, [r3, #0]
   22d2c:	b104      	cbz	r4, 22d30 <bt_l2cap_disconnected+0x12>
   22d2e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   22d30:	f7ff ffe0 	bl	22cf4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22d34:	b144      	cbz	r4, 22d48 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22d36:	f114 0308 	adds.w	r3, r4, #8
   22d3a:	d002      	beq.n	22d42 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22d3c:	68a3      	ldr	r3, [r4, #8]
   22d3e:	b103      	cbz	r3, 22d42 <bt_l2cap_disconnected+0x24>
   22d40:	3b08      	subs	r3, #8
{
   22d42:	4620      	mov	r0, r4
   22d44:	461c      	mov	r4, r3
   22d46:	e7f3      	b.n	22d30 <bt_l2cap_disconnected+0x12>
}
   22d48:	bd10      	pop	{r4, pc}

00022d4a <bt_l2cap_security_changed>:
{
   22d4a:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22d4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   22d4e:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22d50:	b1a3      	cbz	r3, 22d7c <bt_l2cap_security_changed+0x32>
   22d52:	f1b3 0008 	subs.w	r0, r3, #8
   22d56:	d011      	beq.n	22d7c <bt_l2cap_security_changed+0x32>
   22d58:	681c      	ldr	r4, [r3, #0]
   22d5a:	b104      	cbz	r4, 22d5e <bt_l2cap_security_changed+0x14>
   22d5c:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   22d5e:	6843      	ldr	r3, [r0, #4]
   22d60:	689b      	ldr	r3, [r3, #8]
   22d62:	b10b      	cbz	r3, 22d68 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   22d64:	4629      	mov	r1, r5
   22d66:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22d68:	b144      	cbz	r4, 22d7c <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22d6a:	f114 0308 	adds.w	r3, r4, #8
   22d6e:	d002      	beq.n	22d76 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22d70:	68a3      	ldr	r3, [r4, #8]
   22d72:	b103      	cbz	r3, 22d76 <bt_l2cap_security_changed+0x2c>
   22d74:	3b08      	subs	r3, #8
{
   22d76:	4620      	mov	r0, r4
   22d78:	461c      	mov	r4, r3
   22d7a:	e7f0      	b.n	22d5e <bt_l2cap_security_changed+0x14>
}
   22d7c:	bd38      	pop	{r3, r4, r5, pc}

00022d7e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   22d7e:	3104      	adds	r1, #4
   22d80:	f7f4 be74 	b.w	17a6c <bt_conn_create_pdu_timeout>

00022d84 <bt_l2cap_send_cb>:
{
   22d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d88:	4614      	mov	r4, r2
   22d8a:	4605      	mov	r5, r0
   22d8c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   22d8e:	f102 0008 	add.w	r0, r2, #8
   22d92:	2104      	movs	r1, #4
   22d94:	461e      	mov	r6, r3
   22d96:	f8dd 8018 	ldr.w	r8, [sp, #24]
   22d9a:	f001 fb9f 	bl	244dc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   22d9e:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   22da0:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   22da2:	3a04      	subs	r2, #4
   22da4:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22da6:	4643      	mov	r3, r8
   22da8:	4632      	mov	r2, r6
   22daa:	4621      	mov	r1, r4
   22dac:	4628      	mov	r0, r5
}
   22dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22db2:	f7f4 bb9b 	b.w	174ec <bt_conn_send_cb>

00022db6 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22db6:	6d00      	ldr	r0, [r0, #80]	; 0x50
   22db8:	b160      	cbz	r0, 22dd4 <bt_l2cap_le_lookup_tx_cid+0x1e>
   22dba:	3808      	subs	r0, #8
   22dbc:	b900      	cbnz	r0, 22dc0 <bt_l2cap_le_lookup_tx_cid+0xa>
   22dbe:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   22dc0:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   22dc4:	428b      	cmp	r3, r1
   22dc6:	d005      	beq.n	22dd4 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22dc8:	f110 0308 	adds.w	r3, r0, #8
   22dcc:	d001      	beq.n	22dd2 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22dce:	6880      	ldr	r0, [r0, #8]
   22dd0:	e7f2      	b.n	22db8 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   22dd2:	4618      	mov	r0, r3
}
   22dd4:	4770      	bx	lr

00022dd6 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22dd6:	6d00      	ldr	r0, [r0, #80]	; 0x50
   22dd8:	b160      	cbz	r0, 22df4 <bt_l2cap_le_lookup_rx_cid+0x1e>
   22dda:	3808      	subs	r0, #8
   22ddc:	b900      	cbnz	r0, 22de0 <bt_l2cap_le_lookup_rx_cid+0xa>
   22dde:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   22de0:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   22de4:	428b      	cmp	r3, r1
   22de6:	d005      	beq.n	22df4 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22de8:	f110 0308 	adds.w	r3, r0, #8
   22dec:	d001      	beq.n	22df2 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22dee:	6880      	ldr	r0, [r0, #8]
   22df0:	e7f2      	b.n	22dd8 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   22df2:	4618      	mov	r0, r3
}
   22df4:	4770      	bx	lr

00022df6 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   22df6:	4770      	bx	lr

00022df8 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   22df8:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   22dfa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   22dfc:	b128      	cbz	r0, 22e0a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22dfe:	6859      	ldr	r1, [r3, #4]
   22e00:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   22e02:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22e04:	4288      	cmp	r0, r1
	list->tail = node;
   22e06:	bf08      	it	eq
   22e08:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   22e0a:	4770      	bx	lr

00022e0c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22e0c:	4603      	mov	r3, r0
   22e0e:	6800      	ldr	r0, [r0, #0]
   22e10:	2200      	movs	r2, #0
   22e12:	b900      	cbnz	r0, 22e16 <sys_slist_find_and_remove+0xa>
   22e14:	4770      	bx	lr
   22e16:	4288      	cmp	r0, r1
   22e18:	d110      	bne.n	22e3c <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   22e1a:	6808      	ldr	r0, [r1, #0]
   22e1c:	b942      	cbnz	r2, 22e30 <sys_slist_find_and_remove+0x24>
   22e1e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   22e20:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22e22:	4291      	cmp	r1, r2
   22e24:	d100      	bne.n	22e28 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   22e26:	6058      	str	r0, [r3, #4]
	parent->next = child;
   22e28:	2300      	movs	r3, #0
   22e2a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22e2c:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   22e2e:	4770      	bx	lr
	parent->next = child;
   22e30:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22e32:	6858      	ldr	r0, [r3, #4]
   22e34:	4281      	cmp	r1, r0
	list->tail = node;
   22e36:	bf08      	it	eq
   22e38:	605a      	streq	r2, [r3, #4]
}
   22e3a:	e7f5      	b.n	22e28 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22e3c:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22e3e:	6800      	ldr	r0, [r0, #0]
   22e40:	e7e7      	b.n	22e12 <sys_slist_find_and_remove+0x6>

00022e42 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   22e42:	4603      	mov	r3, r0
	size_t bytes = 0;
   22e44:	2000      	movs	r0, #0

	while (buf) {
   22e46:	b903      	cbnz	r3, 22e4a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   22e48:	4770      	bx	lr
		bytes += buf->len;
   22e4a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   22e4c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   22e4e:	4410      	add	r0, r2
		buf = buf->frags;
   22e50:	e7f9      	b.n	22e46 <net_buf_frags_len+0x4>

00022e52 <att_sent>:
	if (chan->ops->sent) {
   22e52:	684b      	ldr	r3, [r1, #4]
   22e54:	695b      	ldr	r3, [r3, #20]
{
   22e56:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   22e58:	b103      	cbz	r3, 22e5c <att_sent+0xa>
		chan->ops->sent(chan);
   22e5a:	4718      	bx	r3
}
   22e5c:	4770      	bx	lr

00022e5e <attr_read_type_cb>:
{
   22e5e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   22e60:	68d4      	ldr	r4, [r2, #12]
   22e62:	7823      	ldrb	r3, [r4, #0]
   22e64:	3102      	adds	r1, #2
   22e66:	b913      	cbnz	r3, 22e6e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   22e68:	7021      	strb	r1, [r4, #0]
	return true;
   22e6a:	2001      	movs	r0, #1
   22e6c:	e006      	b.n	22e7c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   22e6e:	428b      	cmp	r3, r1
   22e70:	d0fb      	beq.n	22e6a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   22e72:	8983      	ldrh	r3, [r0, #12]
   22e74:	3b02      	subs	r3, #2
   22e76:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   22e78:	2000      	movs	r0, #0
   22e7a:	6110      	str	r0, [r2, #16]
}
   22e7c:	bd10      	pop	{r4, pc}

00022e7e <att_prepare_write_req>:
}
   22e7e:	2006      	movs	r0, #6
   22e80:	4770      	bx	lr

00022e82 <att_op_get_type>:
	switch (op) {
   22e82:	281e      	cmp	r0, #30
   22e84:	d816      	bhi.n	22eb4 <att_op_get_type+0x32>
   22e86:	b308      	cbz	r0, 22ecc <att_op_get_type+0x4a>
   22e88:	1e43      	subs	r3, r0, #1
   22e8a:	2b1d      	cmp	r3, #29
   22e8c:	d81e      	bhi.n	22ecc <att_op_get_type+0x4a>
   22e8e:	e8df f003 	tbb	[pc, r3]
   22e92:	2317      	.short	0x2317
   22e94:	23172317 	.word	0x23172317
   22e98:	23172317 	.word	0x23172317
   22e9c:	23172317 	.word	0x23172317
   22ea0:	23172317 	.word	0x23172317
   22ea4:	231d1d17 	.word	0x231d1d17
   22ea8:	1d172317 	.word	0x1d172317
   22eac:	0f1b1d19 	.word	0x0f1b1d19
   22eb0:	2004      	movs	r0, #4
   22eb2:	4770      	bx	lr
   22eb4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   22eb8:	2b52      	cmp	r3, #82	; 0x52
   22eba:	d107      	bne.n	22ecc <att_op_get_type+0x4a>
		return ATT_COMMAND;
   22ebc:	2000      	movs	r0, #0
}
   22ebe:	4770      	bx	lr
		return ATT_RESPONSE;
   22ec0:	2002      	movs	r0, #2
   22ec2:	4770      	bx	lr
		return ATT_NOTIFICATION;
   22ec4:	2003      	movs	r0, #3
   22ec6:	4770      	bx	lr
		return ATT_INDICATION;
   22ec8:	2005      	movs	r0, #5
   22eca:	4770      	bx	lr
		return ATT_COMMAND;
   22ecc:	f010 0f40 	tst.w	r0, #64	; 0x40
   22ed0:	bf0c      	ite	eq
   22ed2:	2006      	moveq	r0, #6
   22ed4:	2000      	movne	r0, #0
   22ed6:	4770      	bx	lr
		return ATT_REQUEST;
   22ed8:	2001      	movs	r0, #1
   22eda:	4770      	bx	lr

00022edc <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   22edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   22ede:	e9cd 2301 	strd	r2, r3, [sp, #4]
   22ee2:	2300      	movs	r3, #0
   22ee4:	9300      	str	r3, [sp, #0]
   22ee6:	461a      	mov	r2, r3
   22ee8:	f7f6 fd1c 	bl	19924 <bt_gatt_foreach_attr_type>
				  user_data);
}
   22eec:	b005      	add	sp, #20
   22eee:	f85d fb04 	ldr.w	pc, [sp], #4

00022ef2 <att_chan_read>:
{
   22ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ef6:	4680      	mov	r8, r0
   22ef8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   22efa:	4610      	mov	r0, r2
{
   22efc:	4699      	mov	r9, r3
   22efe:	468b      	mov	fp, r1
   22f00:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   22f02:	f7ff ff9e 	bl	22e42 <net_buf_frags_len>
   22f06:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   22f0a:	4283      	cmp	r3, r0
   22f0c:	d97a      	bls.n	23004 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   22f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22f12:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   22f14:	4630      	mov	r0, r6
   22f16:	f001 faa8 	bl	2446a <net_buf_frag_last>
	size_t len, total = 0;
   22f1a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   22f1e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22f20:	4630      	mov	r0, r6
   22f22:	f7ff ff8e 	bl	22e42 <net_buf_frags_len>
   22f26:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   22f2a:	f105 0708 	add.w	r7, r5, #8
   22f2e:	1a24      	subs	r4, r4, r0
   22f30:	4638      	mov	r0, r7
   22f32:	f001 faf7 	bl	24524 <net_buf_simple_tailroom>
   22f36:	4284      	cmp	r4, r0
   22f38:	d211      	bcs.n	22f5e <att_chan_read+0x6c>
   22f3a:	4630      	mov	r0, r6
   22f3c:	f7ff ff81 	bl	22e42 <net_buf_frags_len>
   22f40:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   22f44:	1a24      	subs	r4, r4, r0
		if (!len) {
   22f46:	bb34      	cbnz	r4, 22f96 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   22f48:	79b0      	ldrb	r0, [r6, #6]
   22f4a:	f7f9 f89b 	bl	1c084 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   22f4e:	2200      	movs	r2, #0
   22f50:	2300      	movs	r3, #0
   22f52:	f001 fa56 	bl	24402 <net_buf_alloc_fixed>
			if (!frag) {
   22f56:	4605      	mov	r5, r0
   22f58:	b930      	cbnz	r0, 22f68 <att_chan_read+0x76>
	return total;
   22f5a:	4657      	mov	r7, sl
   22f5c:	e02c      	b.n	22fb8 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   22f5e:	4638      	mov	r0, r7
   22f60:	f001 fae0 	bl	24524 <net_buf_simple_tailroom>
   22f64:	4604      	mov	r4, r0
   22f66:	e7ee      	b.n	22f46 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   22f68:	4601      	mov	r1, r0
   22f6a:	4630      	mov	r0, r6
   22f6c:	f001 fa8e 	bl	2448c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22f70:	4630      	mov	r0, r6
   22f72:	f7ff ff66 	bl	22e42 <net_buf_frags_len>
   22f76:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   22f7a:	f105 0708 	add.w	r7, r5, #8
   22f7e:	1a24      	subs	r4, r4, r0
   22f80:	4638      	mov	r0, r7
   22f82:	f001 facf 	bl	24524 <net_buf_simple_tailroom>
   22f86:	4284      	cmp	r4, r0
   22f88:	d21a      	bcs.n	22fc0 <att_chan_read+0xce>
   22f8a:	4630      	mov	r0, r6
   22f8c:	f7ff ff59 	bl	22e42 <net_buf_frags_len>
   22f90:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   22f94:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   22f96:	68a9      	ldr	r1, [r5, #8]
   22f98:	89aa      	ldrh	r2, [r5, #12]
   22f9a:	f8db 7004 	ldr.w	r7, [fp, #4]
   22f9e:	9803      	ldr	r0, [sp, #12]
   22fa0:	f8cd 9000 	str.w	r9, [sp]
   22fa4:	440a      	add	r2, r1
   22fa6:	b2a3      	uxth	r3, r4
   22fa8:	4659      	mov	r1, fp
   22faa:	47b8      	blx	r7
		if (read < 0) {
   22fac:	1e07      	subs	r7, r0, #0
   22fae:	da0c      	bge.n	22fca <att_chan_read+0xd8>
				return total;
   22fb0:	f1ba 0f00 	cmp.w	sl, #0
   22fb4:	bf18      	it	ne
   22fb6:	4657      	movne	r7, sl
}
   22fb8:	4638      	mov	r0, r7
   22fba:	b005      	add	sp, #20
   22fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22fc0:	4638      	mov	r0, r7
   22fc2:	f001 faaf 	bl	24524 <net_buf_simple_tailroom>
   22fc6:	4604      	mov	r4, r0
   22fc8:	e7e5      	b.n	22f96 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   22fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22fcc:	b993      	cbnz	r3, 22ff4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   22fce:	4639      	mov	r1, r7
   22fd0:	f105 0008 	add.w	r0, r5, #8
   22fd4:	f001 fa6b 	bl	244ae <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   22fd8:	4630      	mov	r0, r6
   22fda:	f7ff ff32 	bl	22e42 <net_buf_frags_len>
   22fde:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   22fe2:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   22fe4:	4283      	cmp	r3, r0
		total += read;
   22fe6:	44ba      	add	sl, r7
		offset += read;
   22fe8:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   22fec:	d9b5      	bls.n	22f5a <att_chan_read+0x68>
   22fee:	42a7      	cmp	r7, r4
   22ff0:	d096      	beq.n	22f20 <att_chan_read+0x2e>
   22ff2:	e7b2      	b.n	22f5a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   22ff4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22ff8:	4639      	mov	r1, r7
   22ffa:	4628      	mov	r0, r5
   22ffc:	4798      	blx	r3
   22ffe:	2800      	cmp	r0, #0
   23000:	d1e5      	bne.n	22fce <att_chan_read+0xdc>
   23002:	e7aa      	b.n	22f5a <att_chan_read+0x68>
		return 0;
   23004:	2700      	movs	r7, #0
   23006:	e7d7      	b.n	22fb8 <att_chan_read+0xc6>

00023008 <find_info_cb>:
{
   23008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2300a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2300c:	6817      	ldr	r7, [r2, #0]
{
   2300e:	4605      	mov	r5, r0
   23010:	460e      	mov	r6, r1
   23012:	4614      	mov	r4, r2
	if (!data->rsp) {
   23014:	b963      	cbnz	r3, 23030 <find_info_cb+0x28>
   23016:	6850      	ldr	r0, [r2, #4]
   23018:	2101      	movs	r1, #1
   2301a:	3008      	adds	r0, #8
   2301c:	f001 fa47 	bl	244ae <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   23020:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23022:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   23024:	781b      	ldrb	r3, [r3, #0]
   23026:	2b00      	cmp	r3, #0
   23028:	bf0c      	ite	eq
   2302a:	2301      	moveq	r3, #1
   2302c:	2302      	movne	r3, #2
   2302e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   23030:	68a3      	ldr	r3, [r4, #8]
   23032:	781b      	ldrb	r3, [r3, #0]
   23034:	2b01      	cmp	r3, #1
   23036:	d003      	beq.n	23040 <find_info_cb+0x38>
   23038:	2b02      	cmp	r3, #2
   2303a:	d019      	beq.n	23070 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2303c:	2000      	movs	r0, #0
   2303e:	e016      	b.n	2306e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   23040:	682b      	ldr	r3, [r5, #0]
   23042:	781b      	ldrb	r3, [r3, #0]
   23044:	2b00      	cmp	r3, #0
   23046:	d1f9      	bne.n	2303c <find_info_cb+0x34>
   23048:	6860      	ldr	r0, [r4, #4]
   2304a:	2104      	movs	r1, #4
   2304c:	3008      	adds	r0, #8
   2304e:	f001 fa2e 	bl	244ae <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   23052:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   23054:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   23056:	885b      	ldrh	r3, [r3, #2]
   23058:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2305a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2305c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2305e:	899b      	ldrh	r3, [r3, #12]
   23060:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   23064:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   23066:	2804      	cmp	r0, #4
   23068:	bf94      	ite	ls
   2306a:	2000      	movls	r0, #0
   2306c:	2001      	movhi	r0, #1
}
   2306e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   23070:	682b      	ldr	r3, [r5, #0]
   23072:	781b      	ldrb	r3, [r3, #0]
   23074:	2b02      	cmp	r3, #2
   23076:	d1e1      	bne.n	2303c <find_info_cb+0x34>
   23078:	6860      	ldr	r0, [r4, #4]
   2307a:	2112      	movs	r1, #18
   2307c:	3008      	adds	r0, #8
   2307e:	f001 fa16 	bl	244ae <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   23082:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   23084:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   23086:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   23088:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2308c:	3101      	adds	r1, #1
   2308e:	f7ff f8ab 	bl	221e8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   23092:	6863      	ldr	r3, [r4, #4]
   23094:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   23098:	899b      	ldrh	r3, [r3, #12]
   2309a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2309c:	2812      	cmp	r0, #18
   2309e:	e7e3      	b.n	23068 <find_info_cb+0x60>

000230a0 <attr_read_group_cb>:
	if (!data->rsp->len) {
   230a0:	68d0      	ldr	r0, [r2, #12]
   230a2:	7803      	ldrb	r3, [r0, #0]
   230a4:	3104      	adds	r1, #4
   230a6:	b913      	cbnz	r3, 230ae <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   230a8:	7001      	strb	r1, [r0, #0]
	return true;
   230aa:	2001      	movs	r0, #1
}
   230ac:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   230ae:	428b      	cmp	r3, r1
   230b0:	d0fb      	beq.n	230aa <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   230b2:	6891      	ldr	r1, [r2, #8]
   230b4:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   230b6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   230b8:	3b04      	subs	r3, #4
   230ba:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   230bc:	6110      	str	r0, [r2, #16]
		return false;
   230be:	4770      	bx	lr

000230c0 <chan_req_send>:
{
   230c0:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   230c2:	688e      	ldr	r6, [r1, #8]
{
   230c4:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   230c6:	4630      	mov	r0, r6
{
   230c8:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   230ca:	f7ff feba 	bl	22e42 <net_buf_frags_len>
   230ce:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   230d2:	4283      	cmp	r3, r0
   230d4:	d30a      	bcc.n	230ec <chan_req_send+0x2c>
	req->buf = NULL;
   230d6:	2200      	movs	r2, #0
	chan->req = req;
   230d8:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   230dc:	4628      	mov	r0, r5
	req->buf = NULL;
   230de:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   230e0:	4631      	mov	r1, r6
   230e2:	f7f5 f92d 	bl	18340 <chan_send>
	if (err) {
   230e6:	b100      	cbz	r0, 230ea <chan_req_send+0x2a>
		req->buf = buf;
   230e8:	60a6      	str	r6, [r4, #8]
}
   230ea:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   230ec:	f06f 0079 	mvn.w	r0, #121	; 0x79
   230f0:	e7fb      	b.n	230ea <chan_req_send+0x2a>

000230f2 <process_queue>:
{
   230f2:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   230f4:	2200      	movs	r2, #0
{
   230f6:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   230f8:	2300      	movs	r3, #0
   230fa:	4608      	mov	r0, r1
{
   230fc:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   230fe:	f001 f985 	bl	2440c <net_buf_get>
	if (buf) {
   23102:	4605      	mov	r5, r0
   23104:	b160      	cbz	r0, 23120 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   23106:	4601      	mov	r1, r0
   23108:	2200      	movs	r2, #0
   2310a:	4620      	mov	r0, r4
   2310c:	f7f5 f918 	bl	18340 <chan_send>
		if (err) {
   23110:	4604      	mov	r4, r0
   23112:	b118      	cbz	r0, 2311c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   23114:	4629      	mov	r1, r5
   23116:	4630      	mov	r0, r6
   23118:	f001 fd47 	bl	24baa <k_queue_prepend>
}
   2311c:	4620      	mov	r0, r4
   2311e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   23120:	f06f 0401 	mvn.w	r4, #1
   23124:	e7fa      	b.n	2311c <process_queue+0x2a>

00023126 <chan_req_sent>:
	if (chan->req) {
   23126:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2312a:	b133      	cbz	r3, 2313a <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2312c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23130:	2300      	movs	r3, #0
   23132:	f500 7088 	add.w	r0, r0, #272	; 0x110
   23136:	f7fb bcad 	b.w	1ea94 <k_work_reschedule>
}
   2313a:	4770      	bx	lr

0002313c <att_exec_write_req>:
   2313c:	2006      	movs	r0, #6
   2313e:	4770      	bx	lr

00023140 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23140:	30f0      	adds	r0, #240	; 0xf0
   23142:	f3bf 8f5b 	dmb	ish
   23146:	e850 3f00 	ldrex	r3, [r0]
   2314a:	f023 0301 	bic.w	r3, r3, #1
   2314e:	e840 3200 	strex	r2, r3, [r0]
   23152:	2a00      	cmp	r2, #0
   23154:	d1f7      	bne.n	23146 <chan_rsp_sent+0x6>
   23156:	f3bf 8f5b 	dmb	ish
}
   2315a:	4770      	bx	lr

0002315c <chan_cfm_sent>:
   2315c:	30f0      	adds	r0, #240	; 0xf0
   2315e:	f3bf 8f5b 	dmb	ish
   23162:	e850 3f00 	ldrex	r3, [r0]
   23166:	f023 0302 	bic.w	r3, r3, #2
   2316a:	e840 3200 	strex	r2, r3, [r0]
   2316e:	2a00      	cmp	r2, #0
   23170:	d1f7      	bne.n	23162 <chan_cfm_sent+0x6>
   23172:	f3bf 8f5b 	dmb	ish
}
   23176:	4770      	bx	lr

00023178 <bt_att_status>:
{
   23178:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2317a:	f3bf 8f5b 	dmb	ish
   2317e:	680b      	ldr	r3, [r1, #0]
   23180:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   23184:	07db      	lsls	r3, r3, #31
{
   23186:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   23188:	d519      	bpl.n	231be <bt_att_status+0x46>
	if (!chan->att) {
   2318a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2318e:	b1b0      	cbz	r0, 231be <bt_att_status+0x46>
	if (chan->req) {
   23190:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   23194:	b99b      	cbnz	r3, 231be <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   23196:	3004      	adds	r0, #4
   23198:	f7ff fe2e 	bl	22df8 <sys_slist_get>
	if (!node) {
   2319c:	4604      	mov	r4, r0
   2319e:	b170      	cbz	r0, 231be <bt_att_status+0x46>
	return chan_req_send(chan, req);
   231a0:	4601      	mov	r1, r0
   231a2:	f1a5 0008 	sub.w	r0, r5, #8
   231a6:	f7ff ff8b 	bl	230c0 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   231aa:	2800      	cmp	r0, #0
   231ac:	da07      	bge.n	231be <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   231ae:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   231b2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   231b4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   231b6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   231b8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   231ba:	b902      	cbnz	r2, 231be <bt_att_status+0x46>
	list->tail = node;
   231bc:	609c      	str	r4, [r3, #8]
}
   231be:	bd38      	pop	{r3, r4, r5, pc}

000231c0 <att_req_send_process>:
{
   231c0:	b570      	push	{r4, r5, r6, lr}
   231c2:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   231c4:	3004      	adds	r0, #4
   231c6:	f7ff fe17 	bl	22df8 <sys_slist_get>
	if (!node) {
   231ca:	4606      	mov	r6, r0
   231cc:	b1c0      	cbz	r0, 23200 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   231ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   231d0:	b153      	cbz	r3, 231e8 <att_req_send_process+0x28>
   231d2:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   231d6:	d007      	beq.n	231e8 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   231d8:	681c      	ldr	r4, [r3, #0]
   231da:	b10c      	cbz	r4, 231e0 <att_req_send_process+0x20>
   231dc:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   231e0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   231e4:	b13b      	cbz	r3, 231f6 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   231e6:	b964      	cbnz	r4, 23202 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   231e8:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   231ea:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   231ec:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   231ee:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   231f0:	b933      	cbnz	r3, 23200 <att_req_send_process+0x40>
	list->tail = node;
   231f2:	60ae      	str	r6, [r5, #8]
}
   231f4:	e004      	b.n	23200 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   231f6:	4631      	mov	r1, r6
   231f8:	f7ff ff62 	bl	230c0 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   231fc:	2800      	cmp	r0, #0
   231fe:	dbf2      	blt.n	231e6 <att_req_send_process+0x26>
}
   23200:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   23202:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   23206:	d004      	beq.n	23212 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23208:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2320c:	b10b      	cbz	r3, 23212 <att_req_send_process+0x52>
   2320e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   23212:	4620      	mov	r0, r4
   23214:	461c      	mov	r4, r3
   23216:	e7e3      	b.n	231e0 <att_req_send_process+0x20>

00023218 <write_cb>:
{
   23218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2321a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2321c:	4601      	mov	r1, r0
{
   2321e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   23220:	222a      	movs	r2, #42	; 0x2a
   23222:	6820      	ldr	r0, [r4, #0]
   23224:	f000 fbe7 	bl	239f6 <bt_gatt_check_perm>
   23228:	4605      	mov	r5, r0
   2322a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2322c:	bb00      	cbnz	r0, 23270 <write_cb+0x58>
	if (!data->req) {
   2322e:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   23230:	68b7      	ldr	r7, [r6, #8]
   23232:	68e2      	ldr	r2, [r4, #12]
   23234:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   23236:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   23238:	bf14      	ite	ne
   2323a:	2300      	movne	r3, #0
   2323c:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2323e:	9301      	str	r3, [sp, #4]
   23240:	8a63      	ldrh	r3, [r4, #18]
   23242:	9300      	str	r3, [sp, #0]
   23244:	4631      	mov	r1, r6
   23246:	8a23      	ldrh	r3, [r4, #16]
   23248:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2324a:	1e03      	subs	r3, r0, #0
   2324c:	db05      	blt.n	2325a <write_cb+0x42>
   2324e:	8a22      	ldrh	r2, [r4, #16]
   23250:	4293      	cmp	r3, r2
   23252:	d10b      	bne.n	2326c <write_cb+0x54>
	data->err = 0U;
   23254:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   23256:	2501      	movs	r5, #1
   23258:	e005      	b.n	23266 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   2325a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2325e:	d305      	bcc.n	2326c <write_cb+0x54>
		return -err;
   23260:	425b      	negs	r3, r3
   23262:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   23264:	7523      	strb	r3, [r4, #20]
}
   23266:	4628      	mov	r0, r5
   23268:	b003      	add	sp, #12
   2326a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2326c:	230e      	movs	r3, #14
   2326e:	e7f9      	b.n	23264 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   23270:	2500      	movs	r5, #0
   23272:	e7f8      	b.n	23266 <write_cb+0x4e>

00023274 <bt_att_sent>:
{
   23274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   23276:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2327a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2327e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   23280:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   23284:	b10b      	cbz	r3, 2328a <bt_att_sent+0x16>
		chan->sent(chan);
   23286:	4638      	mov	r0, r7
   23288:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2328a:	f3bf 8f5b 	dmb	ish
   2328e:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   23292:	e853 2f00 	ldrex	r2, [r3]
   23296:	f022 0210 	bic.w	r2, r2, #16
   2329a:	e843 2100 	strex	r1, r2, [r3]
   2329e:	2900      	cmp	r1, #0
   232a0:	d1f7      	bne.n	23292 <bt_att_sent+0x1e>
   232a2:	f3bf 8f5b 	dmb	ish
	if (!att) {
   232a6:	b30c      	cbz	r4, 232ec <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   232a8:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   232ac:	b98b      	cbnz	r3, 232d2 <bt_att_sent+0x5e>
   232ae:	6863      	ldr	r3, [r4, #4]
   232b0:	b17b      	cbz	r3, 232d2 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   232b2:	1d20      	adds	r0, r4, #4
   232b4:	f7ff fda0 	bl	22df8 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   232b8:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   232ba:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   232bc:	4638      	mov	r0, r7
   232be:	f7ff feff 	bl	230c0 <chan_req_send>
   232c2:	2800      	cmp	r0, #0
   232c4:	da12      	bge.n	232ec <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   232c6:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   232c8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   232ca:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   232cc:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   232ce:	b903      	cbnz	r3, 232d2 <bt_att_sent+0x5e>
	list->tail = node;
   232d0:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   232d2:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   232d6:	4638      	mov	r0, r7
   232d8:	f7ff ff0b 	bl	230f2 <process_queue>
	if (!err) {
   232dc:	b130      	cbz	r0, 232ec <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   232de:	f104 010c 	add.w	r1, r4, #12
   232e2:	4638      	mov	r0, r7
}
   232e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   232e8:	f7ff bf03 	b.w	230f2 <process_queue>
}
   232ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000232ee <read_cb>:
{
   232ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   232f2:	f8d2 8000 	ldr.w	r8, [r2]
{
   232f6:	4606      	mov	r6, r0
	data->err = 0x00;
   232f8:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   232fa:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   232fe:	7317      	strb	r7, [r2, #12]
{
   23300:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   23302:	4631      	mov	r1, r6
   23304:	2215      	movs	r2, #21
   23306:	f000 fb76 	bl	239f6 <bt_gatt_check_perm>
   2330a:	4604      	mov	r4, r0
   2330c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2330e:	b9a0      	cbnz	r0, 2333a <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   23310:	e9cd 0000 	strd	r0, r0, [sp]
   23314:	88ab      	ldrh	r3, [r5, #4]
   23316:	68aa      	ldr	r2, [r5, #8]
   23318:	4631      	mov	r1, r6
   2331a:	4640      	mov	r0, r8
   2331c:	f7ff fde9 	bl	22ef2 <att_chan_read>
	if (ret < 0) {
   23320:	1e03      	subs	r3, r0, #0
   23322:	da0c      	bge.n	2333e <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   23324:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   23328:	bf26      	itte	cs
   2332a:	425b      	negcs	r3, r3
   2332c:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2332e:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   23330:	732b      	strb	r3, [r5, #12]
}
   23332:	4620      	mov	r0, r4
   23334:	b002      	add	sp, #8
   23336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2333a:	463c      	mov	r4, r7
   2333c:	e7f9      	b.n	23332 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2333e:	2401      	movs	r4, #1
   23340:	e7f7      	b.n	23332 <read_cb+0x44>

00023342 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   23342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23346:	4688      	mov	r8, r1
   23348:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2334a:	2101      	movs	r1, #1
   2334c:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2334e:	4605      	mov	r5, r0
   23350:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   23352:	f7f5 f983 	bl	1865c <bt_att_chan_create_pdu>
	if (!buf) {
   23356:	4604      	mov	r4, r0
   23358:	b170      	cbz	r0, 23378 <send_err_rsp.part.0+0x36>
   2335a:	2104      	movs	r1, #4
   2335c:	3008      	adds	r0, #8
   2335e:	f001 f8a6 	bl	244ae <net_buf_simple_add>
	rsp->request = req;
   23362:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   23366:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   23368:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2336c:	4621      	mov	r1, r4
   2336e:	4628      	mov	r0, r5
}
   23370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   23374:	f7f5 b892 	b.w	1849c <bt_att_chan_send_rsp.constprop.0>
}
   23378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002337c <att_read_blob_req>:
{
   2337c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2337e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   23380:	8813      	ldrh	r3, [r2, #0]
   23382:	8852      	ldrh	r2, [r2, #2]
   23384:	9200      	str	r2, [sp, #0]
   23386:	210c      	movs	r1, #12
   23388:	220d      	movs	r2, #13
   2338a:	f7f5 fbb1 	bl	18af0 <att_read_rsp>
}
   2338e:	b003      	add	sp, #12
   23390:	f85d fb04 	ldr.w	pc, [sp], #4

00023394 <att_read_req>:
{
   23394:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   23396:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   23398:	2200      	movs	r2, #0
   2339a:	881b      	ldrh	r3, [r3, #0]
   2339c:	9200      	str	r2, [sp, #0]
   2339e:	210a      	movs	r1, #10
   233a0:	220b      	movs	r2, #11
   233a2:	f7f5 fba5 	bl	18af0 <att_read_rsp>
}
   233a6:	b003      	add	sp, #12
   233a8:	f85d fb04 	ldr.w	pc, [sp], #4

000233ac <att_mtu_req>:
{
   233ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   233ae:	6803      	ldr	r3, [r0, #0]
{
   233b0:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   233b2:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   233b4:	f3bf 8f5b 	dmb	ish
   233b8:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   233bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   233c0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   233c4:	071b      	lsls	r3, r3, #28
   233c6:	d41d      	bmi.n	23404 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   233c8:	688b      	ldr	r3, [r1, #8]
   233ca:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   233cc:	2e16      	cmp	r6, #22
   233ce:	d91b      	bls.n	23408 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   233d0:	2202      	movs	r2, #2
   233d2:	2103      	movs	r1, #3
   233d4:	f7f5 fa90 	bl	188f8 <bt_att_create_pdu>
	if (!pdu) {
   233d8:	4607      	mov	r7, r0
   233da:	b1b8      	cbz	r0, 2340c <att_mtu_req+0x60>
   233dc:	2102      	movs	r1, #2
   233de:	3008      	adds	r0, #8
   233e0:	f001 f865 	bl	244ae <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   233e4:	2341      	movs	r3, #65	; 0x41
   233e6:	7003      	strb	r3, [r0, #0]
   233e8:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   233ea:	4639      	mov	r1, r7
   233ec:	4628      	mov	r0, r5
   233ee:	f7f5 f855 	bl	1849c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   233f2:	2e41      	cmp	r6, #65	; 0x41
   233f4:	bf28      	it	cs
   233f6:	2641      	movcs	r6, #65	; 0x41
   233f8:	f8a5 607a 	strh.w	r6, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   233fc:	f8a5 6086 	strh.w	r6, [r5, #134]	; 0x86
	return 0;
   23400:	4620      	mov	r0, r4
}
   23402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   23404:	2006      	movs	r0, #6
   23406:	e7fc      	b.n	23402 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   23408:	2004      	movs	r0, #4
   2340a:	e7fa      	b.n	23402 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   2340c:	200e      	movs	r0, #14
   2340e:	e7f8      	b.n	23402 <att_mtu_req+0x56>

00023410 <bt_att_init>:
	bt_gatt_init();
   23410:	f7f6 ba02 	b.w	19818 <bt_gatt_init>

00023414 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   23414:	898a      	ldrh	r2, [r1, #12]
   23416:	6889      	ldr	r1, [r1, #8]
   23418:	2300      	movs	r3, #0
   2341a:	f7f5 bcdb 	b.w	18dd4 <att_handle_rsp>

0002341e <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2341e:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   23422:	b570      	push	{r4, r5, r6, lr}
   23424:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   23426:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   2342a:	2b00      	cmp	r3, #0
   2342c:	d037      	beq.n	2349e <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2342e:	b171      	cbz	r1, 2344e <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   23430:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   23434:	2b00      	cmp	r3, #0
   23436:	d032      	beq.n	2349e <bt_att_encrypt_change+0x80>
   23438:	7c1b      	ldrb	r3, [r3, #16]
   2343a:	07da      	lsls	r2, r3, #31
   2343c:	d52f      	bpl.n	2349e <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2343e:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   23440:	2200      	movs	r2, #0
   23442:	4630      	mov	r0, r6
   23444:	4611      	mov	r1, r2
}
   23446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2344a:	f7f5 bcc3 	b.w	18dd4 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   2344e:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   23450:	4628      	mov	r0, r5
   23452:	f7f6 fecb 	bl	1a1ec <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   23456:	7a6b      	ldrb	r3, [r5, #9]
   23458:	2b01      	cmp	r3, #1
   2345a:	d020      	beq.n	2349e <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2345c:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   23460:	b1ec      	cbz	r4, 2349e <bt_att_encrypt_change+0x80>
   23462:	7c23      	ldrb	r3, [r4, #16]
   23464:	07db      	lsls	r3, r3, #31
   23466:	d51a      	bpl.n	2349e <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   23468:	68e3      	ldr	r3, [r4, #12]
   2346a:	2b00      	cmp	r3, #0
   2346c:	d0e7      	beq.n	2343e <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2346e:	6962      	ldr	r2, [r4, #20]
   23470:	7c61      	ldrb	r1, [r4, #17]
   23472:	4630      	mov	r0, r6
   23474:	f7f5 f8f2 	bl	1865c <bt_att_chan_create_pdu>
	if (!buf) {
   23478:	4605      	mov	r5, r0
   2347a:	b140      	cbz	r0, 2348e <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2347c:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   23480:	68e3      	ldr	r3, [r4, #12]
   23482:	4798      	blx	r3
   23484:	4602      	mov	r2, r0
   23486:	b120      	cbz	r0, 23492 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   23488:	4628      	mov	r0, r5
   2348a:	f7f8 feb7 	bl	1c1fc <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2348e:	230e      	movs	r3, #14
   23490:	e7d6      	b.n	23440 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   23492:	4629      	mov	r1, r5
   23494:	4630      	mov	r0, r6
   23496:	f7f4 ff53 	bl	18340 <chan_send>
   2349a:	2800      	cmp	r0, #0
   2349c:	d1f4      	bne.n	23488 <bt_att_encrypt_change+0x6a>
}
   2349e:	bd70      	pop	{r4, r5, r6, pc}

000234a0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   234a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   234a4:	4607      	mov	r7, r0
   234a6:	460d      	mov	r5, r1
   234a8:	4616      	mov	r6, r2
   234aa:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   234ac:	f7f4 ffb6 	bl	1841c <att_get>
	if (!att) {
   234b0:	4604      	mov	r4, r0
   234b2:	b938      	cbnz	r0, 234c4 <bt_att_send+0x24>
		net_buf_unref(buf);
   234b4:	4628      	mov	r0, r5
   234b6:	f7f8 fea1 	bl	1c1fc <net_buf_unref>
		return -ENOTCONN;
   234ba:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   234be:	b002      	add	sp, #8
   234c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   234c4:	b146      	cbz	r6, 234d8 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   234c6:	f8cd 8000 	str.w	r8, [sp]
   234ca:	4633      	mov	r3, r6
   234cc:	462a      	mov	r2, r5
   234ce:	2104      	movs	r1, #4
   234d0:	4638      	mov	r0, r7
   234d2:	f7ff fc57 	bl	22d84 <bt_l2cap_send_cb>
   234d6:	e7f2      	b.n	234be <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   234d8:	f100 060c 	add.w	r6, r0, #12
   234dc:	4629      	mov	r1, r5
   234de:	4630      	mov	r0, r6
   234e0:	f000 ffb2 	bl	24448 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   234e4:	2200      	movs	r2, #0
   234e6:	2300      	movs	r3, #0
   234e8:	4630      	mov	r0, r6
   234ea:	f000 ff8f 	bl	2440c <net_buf_get>
	if (!buf) {
   234ee:	4605      	mov	r5, r0
   234f0:	b908      	cbnz	r0, 234f6 <bt_att_send+0x56>
	return 0;
   234f2:	2000      	movs	r0, #0
   234f4:	e7e3      	b.n	234be <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   234f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   234f8:	b1c3      	cbz	r3, 2352c <bt_att_send+0x8c>
   234fa:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   234fe:	d015      	beq.n	2352c <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23500:	681c      	ldr	r4, [r3, #0]
   23502:	b10c      	cbz	r4, 23508 <bt_att_send+0x68>
   23504:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   23508:	2200      	movs	r2, #0
   2350a:	4629      	mov	r1, r5
   2350c:	f7f4 ff18 	bl	18340 <chan_send>
		if (err >= 0) {
   23510:	2800      	cmp	r0, #0
   23512:	daee      	bge.n	234f2 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23514:	b154      	cbz	r4, 2352c <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23516:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   2351a:	d004      	beq.n	23526 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2351c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   23520:	b10b      	cbz	r3, 23526 <bt_att_send+0x86>
   23522:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   23526:	4620      	mov	r0, r4
   23528:	461c      	mov	r4, r3
   2352a:	e7ed      	b.n	23508 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   2352c:	4629      	mov	r1, r5
   2352e:	4630      	mov	r0, r6
   23530:	f001 fb3b 	bl	24baa <k_queue_prepend>
   23534:	e7dd      	b.n	234f2 <bt_att_send+0x52>

00023536 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   23536:	b510      	push	{r4, lr}
   23538:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2353a:	f7f4 ff6f 	bl	1841c <att_get>
	if (!att) {
   2353e:	b160      	cbz	r0, 2355a <bt_att_req_send+0x24>
	parent->next = child;
   23540:	2300      	movs	r3, #0
   23542:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   23544:	6883      	ldr	r3, [r0, #8]
   23546:	b92b      	cbnz	r3, 23554 <bt_att_req_send+0x1e>
	list->head = node;
   23548:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2354c:	f7ff fe38 	bl	231c0 <att_req_send_process>

	return 0;
   23550:	2000      	movs	r0, #0
}
   23552:	bd10      	pop	{r4, pc}
	parent->next = child;
   23554:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23556:	6084      	str	r4, [r0, #8]
}
   23558:	e7f8      	b.n	2354c <bt_att_req_send+0x16>
		return -ENOTCONN;
   2355a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2355e:	e7f8      	b.n	23552 <bt_att_req_send+0x1c>

00023560 <gatt_ccc_changed>:
{
   23560:	460b      	mov	r3, r1
   23562:	8a49      	ldrh	r1, [r1, #18]
   23564:	8b9a      	ldrh	r2, [r3, #28]
   23566:	4291      	cmp	r1, r2
   23568:	bf38      	it	cc
   2356a:	4611      	movcc	r1, r2
   2356c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   2356e:	4291      	cmp	r1, r2
   23570:	bf38      	it	cc
   23572:	4611      	movcc	r1, r2
   23574:	891a      	ldrh	r2, [r3, #8]
   23576:	4291      	cmp	r1, r2
   23578:	bf38      	it	cc
   2357a:	4611      	movcc	r1, r2
		if (ccc->cfg[i].value > value) {
   2357c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   2357e:	4291      	cmp	r1, r2
   23580:	bf38      	it	cc
   23582:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   23584:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   23586:	428a      	cmp	r2, r1
   23588:	d003      	beq.n	23592 <gatt_ccc_changed+0x32>
		ccc->value = value;
   2358a:	8659      	strh	r1, [r3, #50]	; 0x32
		if (ccc->cfg_changed) {
   2358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2358e:	b103      	cbz	r3, 23592 <gatt_ccc_changed+0x32>
			ccc->cfg_changed(attr, value);
   23590:	4718      	bx	r3
}
   23592:	4770      	bx	lr

00023594 <gatt_indicate_rsp>:
{
   23594:	b510      	push	{r4, lr}
   23596:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   23598:	68a3      	ldr	r3, [r4, #8]
{
   2359a:	460a      	mov	r2, r1
	if (params->func) {
   2359c:	b10b      	cbz	r3, 235a2 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2359e:	4621      	mov	r1, r4
   235a0:	4798      	blx	r3
	params->_ref--;
   235a2:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   235a4:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   235a6:	3b01      	subs	r3, #1
   235a8:	b2db      	uxtb	r3, r3
   235aa:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   235ac:	b122      	cbz	r2, 235b8 <gatt_indicate_rsp+0x24>
   235ae:	b91b      	cbnz	r3, 235b8 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   235b0:	4620      	mov	r0, r4
}
   235b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   235b6:	4710      	bx	r2
}
   235b8:	bd10      	pop	{r4, pc}

000235ba <match_uuid>:
	data->attr = attr;
   235ba:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   235bc:	8091      	strh	r1, [r2, #4]
}
   235be:	2000      	movs	r0, #0
   235c0:	4770      	bx	lr

000235c2 <ccc_set_cb>:
}
   235c2:	2000      	movs	r0, #0
   235c4:	4770      	bx	lr

000235c6 <atomic_get>:
   235c6:	f3bf 8f5b 	dmb	ish
   235ca:	6800      	ldr	r0, [r0, #0]
   235cc:	f3bf 8f5b 	dmb	ish
}
   235d0:	4770      	bx	lr

000235d2 <gen_hash_m>:
{
   235d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   235d4:	6807      	ldr	r7, [r0, #0]
   235d6:	783d      	ldrb	r5, [r7, #0]
{
   235d8:	b089      	sub	sp, #36	; 0x24
   235da:	4606      	mov	r6, r0
   235dc:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   235de:	b10d      	cbz	r5, 235e4 <gen_hash_m+0x12>
	switch (u16->val) {
   235e0:	2501      	movs	r5, #1
   235e2:	e014      	b.n	2360e <gen_hash_m+0x3c>
   235e4:	887b      	ldrh	r3, [r7, #2]
   235e6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   235ea:	d004      	beq.n	235f6 <gen_hash_m+0x24>
   235ec:	d812      	bhi.n	23614 <gen_hash_m+0x42>
   235ee:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   235f2:	2b03      	cmp	r3, #3
   235f4:	d8f4      	bhi.n	235e0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   235f6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   235fa:	2202      	movs	r2, #2
   235fc:	f10d 010e 	add.w	r1, sp, #14
   23600:	4620      	mov	r0, r4
   23602:	f7fe fc73 	bl	21eec <tc_cmac_update>
   23606:	b9e0      	cbnz	r0, 23642 <gen_hash_m+0x70>
			state->err = -EINVAL;
   23608:	f06f 0315 	mvn.w	r3, #21
   2360c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2360e:	4628      	mov	r0, r5
   23610:	b009      	add	sp, #36	; 0x24
   23612:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   23614:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   23618:	33ff      	adds	r3, #255	; 0xff
   2361a:	b29b      	uxth	r3, r3
   2361c:	2b04      	cmp	r3, #4
   2361e:	d8df      	bhi.n	235e0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   23620:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23624:	2202      	movs	r2, #2
   23626:	f10d 010e 	add.w	r1, sp, #14
   2362a:	4620      	mov	r0, r4
   2362c:	f7fe fc5e 	bl	21eec <tc_cmac_update>
   23630:	2800      	cmp	r0, #0
   23632:	d0e9      	beq.n	23608 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   23634:	887b      	ldrh	r3, [r7, #2]
   23636:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2363a:	2202      	movs	r2, #2
   2363c:	f10d 010e 	add.w	r1, sp, #14
   23640:	e017      	b.n	23672 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   23642:	887b      	ldrh	r3, [r7, #2]
   23644:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23648:	2202      	movs	r2, #2
   2364a:	f10d 010e 	add.w	r1, sp, #14
   2364e:	4620      	mov	r0, r4
   23650:	f7fe fc4c 	bl	21eec <tc_cmac_update>
   23654:	2800      	cmp	r0, #0
   23656:	d0d7      	beq.n	23608 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   23658:	2000      	movs	r0, #0
   2365a:	2310      	movs	r3, #16
   2365c:	eb0d 0203 	add.w	r2, sp, r3
   23660:	6877      	ldr	r7, [r6, #4]
   23662:	9000      	str	r0, [sp, #0]
   23664:	4631      	mov	r1, r6
   23666:	47b8      	blx	r7
		if (len < 0) {
   23668:	1e02      	subs	r2, r0, #0
   2366a:	da01      	bge.n	23670 <gen_hash_m+0x9e>
			state->err = len;
   2366c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2366e:	e7ce      	b.n	2360e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   23670:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23672:	4620      	mov	r0, r4
   23674:	f7fe fc3a 	bl	21eec <tc_cmac_update>
   23678:	2800      	cmp	r0, #0
   2367a:	d1b1      	bne.n	235e0 <gen_hash_m+0xe>
   2367c:	e7c4      	b.n	23608 <gen_hash_m+0x36>

0002367e <atomic_or>:
{
   2367e:	4603      	mov	r3, r0
}
   23680:	f3bf 8f5b 	dmb	ish
   23684:	e853 0f00 	ldrex	r0, [r3]
   23688:	ea40 0201 	orr.w	r2, r0, r1
   2368c:	e843 2c00 	strex	ip, r2, [r3]
   23690:	f1bc 0f00 	cmp.w	ip, #0
   23694:	d1f6      	bne.n	23684 <atomic_or+0x6>
   23696:	f3bf 8f5b 	dmb	ish
   2369a:	4770      	bx	lr

0002369c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2369c:	2207      	movs	r2, #7
   2369e:	f7fe bda3 	b.w	221e8 <memcpy>

000236a2 <clear_ccc_cfg>:
{
   236a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   236a4:	2500      	movs	r5, #0
{
   236a6:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   236a8:	4669      	mov	r1, sp
   236aa:	3001      	adds	r0, #1
   236ac:	9500      	str	r5, [sp, #0]
   236ae:	f8cd 5003 	str.w	r5, [sp, #3]
   236b2:	f7ff fff3 	bl	2369c <bt_addr_le_copy>
	cfg->id = 0U;
   236b6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   236b8:	8125      	strh	r5, [r4, #8]
}
   236ba:	b003      	add	sp, #12
   236bc:	bd30      	pop	{r4, r5, pc}

000236be <atomic_and>:
{
   236be:	4603      	mov	r3, r0
}
   236c0:	f3bf 8f5b 	dmb	ish
   236c4:	e853 0f00 	ldrex	r0, [r3]
   236c8:	ea00 0201 	and.w	r2, r0, r1
   236cc:	e843 2c00 	strex	ip, r2, [r3]
   236d0:	f1bc 0f00 	cmp.w	ip, #0
   236d4:	d1f6      	bne.n	236c4 <atomic_and+0x6>
   236d6:	f3bf 8f5b 	dmb	ish
   236da:	4770      	bx	lr

000236dc <clear_cf_cfg>:
{
   236dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   236de:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   236e0:	2500      	movs	r5, #0
   236e2:	4669      	mov	r1, sp
   236e4:	3001      	adds	r0, #1
   236e6:	9500      	str	r5, [sp, #0]
   236e8:	f8cd 5003 	str.w	r5, [sp, #3]
   236ec:	f7ff ffd6 	bl	2369c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   236f0:	f104 0008 	add.w	r0, r4, #8
   236f4:	2201      	movs	r2, #1
   236f6:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   236f8:	340c      	adds	r4, #12
   236fa:	f7fe fda0 	bl	2223e <memset>
   236fe:	f3bf 8f5b 	dmb	ish
   23702:	e854 3f00 	ldrex	r3, [r4]
   23706:	e844 5200 	strex	r2, r5, [r4]
   2370a:	2a00      	cmp	r2, #0
   2370c:	d1f9      	bne.n	23702 <clear_cf_cfg+0x26>
   2370e:	f3bf 8f5b 	dmb	ish
}
   23712:	b003      	add	sp, #12
   23714:	bd30      	pop	{r4, r5, pc}

00023716 <ccc_find_cfg>:
{
   23716:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2371a:	4604      	mov	r4, r0
   2371c:	460e      	mov	r6, r1
   2371e:	4617      	mov	r7, r2
   23720:	f100 0832 	add.w	r8, r0, #50	; 0x32
   23724:	4605      	mov	r5, r0
		if (id == ccc->cfg[i].id &&
   23726:	782b      	ldrb	r3, [r5, #0]
   23728:	42bb      	cmp	r3, r7
   2372a:	d10b      	bne.n	23744 <ccc_find_cfg+0x2e>
	return memcmp(a, b, sizeof(*a));
   2372c:	2207      	movs	r2, #7
   2372e:	4631      	mov	r1, r6
   23730:	1c68      	adds	r0, r5, #1
   23732:	eba5 0904 	sub.w	r9, r5, r4
   23736:	f7fe fd47 	bl	221c8 <memcmp>
   2373a:	b918      	cbnz	r0, 23744 <ccc_find_cfg+0x2e>
			return &ccc->cfg[i];
   2373c:	eb04 0009 	add.w	r0, r4, r9
}
   23740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23744:	350a      	adds	r5, #10
   23746:	4545      	cmp	r5, r8
   23748:	d1ed      	bne.n	23726 <ccc_find_cfg+0x10>
	return NULL;
   2374a:	2000      	movs	r0, #0
   2374c:	e7f8      	b.n	23740 <ccc_find_cfg+0x2a>

0002374e <find_ccc_cfg>:
{
   2374e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23750:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23752:	1c4c      	adds	r4, r1, #1
   23754:	f101 0533 	add.w	r5, r1, #51	; 0x33
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   23758:	1e67      	subs	r7, r4, #1
		if (conn) {
   2375a:	b14e      	cbz	r6, 23770 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2375c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   23760:	4622      	mov	r2, r4
   23762:	4630      	mov	r0, r6
   23764:	f7ff f9de 	bl	22b24 <bt_conn_is_peer_addr_le>
   23768:	b160      	cbz	r0, 23784 <find_ccc_cfg+0x36>
}
   2376a:	4638      	mov	r0, r7
   2376c:	b003      	add	sp, #12
   2376e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23770:	2207      	movs	r2, #7
   23772:	4669      	mov	r1, sp
   23774:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   23776:	9600      	str	r6, [sp, #0]
   23778:	f8cd 6003 	str.w	r6, [sp, #3]
   2377c:	f7fe fd24 	bl	221c8 <memcmp>
   23780:	2800      	cmp	r0, #0
   23782:	d0f2      	beq.n	2376a <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23784:	340a      	adds	r4, #10
   23786:	42ac      	cmp	r4, r5
   23788:	d1e6      	bne.n	23758 <find_ccc_cfg+0xa>
	return NULL;
   2378a:	2700      	movs	r7, #0
   2378c:	e7ed      	b.n	2376a <find_ccc_cfg+0x1c>

0002378e <sc_restore_rsp>:
{
   2378e:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   23790:	f7f5 fdf4 	bl	1937c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   23794:	b140      	cbz	r0, 237a8 <sc_restore_rsp+0x1a>
   23796:	7a03      	ldrb	r3, [r0, #8]
   23798:	07db      	lsls	r3, r3, #31
   2379a:	d505      	bpl.n	237a8 <sc_restore_rsp+0x1a>
}
   2379c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   237a0:	2101      	movs	r1, #1
   237a2:	300c      	adds	r0, #12
   237a4:	f7ff bf6b 	b.w	2367e <atomic_or>
   237a8:	bd08      	pop	{r3, pc}

000237aa <read_appearance>:
{
   237aa:	b513      	push	{r0, r1, r4, lr}
   237ac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   237b0:	4610      	mov	r0, r2
	if (offset > value_len) {
   237b2:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   237b4:	f240 3241 	movw	r2, #833	; 0x341
   237b8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   237bc:	d80d      	bhi.n	237da <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   237be:	f1c1 0402 	rsb	r4, r1, #2
   237c2:	429c      	cmp	r4, r3
   237c4:	bfa8      	it	ge
   237c6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   237c8:	f10d 0306 	add.w	r3, sp, #6
   237cc:	4622      	mov	r2, r4
   237ce:	4419      	add	r1, r3
   237d0:	f7fe fd0a 	bl	221e8 <memcpy>
}
   237d4:	4620      	mov	r0, r4
   237d6:	b002      	add	sp, #8
   237d8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   237da:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   237de:	e7f9      	b.n	237d4 <read_appearance+0x2a>

000237e0 <read_name>:
{
   237e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   237e4:	4698      	mov	r8, r3
   237e6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   237ea:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   237ec:	f7f2 fb58 	bl	15ea0 <bt_get_name>
   237f0:	4607      	mov	r7, r0
				 strlen(name));
   237f2:	f7fe fcbe 	bl	22172 <strlen>
	if (offset > value_len) {
   237f6:	b283      	uxth	r3, r0
   237f8:	42b3      	cmp	r3, r6
   237fa:	d30c      	bcc.n	23816 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   237fc:	1b9c      	subs	r4, r3, r6
   237fe:	4544      	cmp	r4, r8
   23800:	bfa8      	it	ge
   23802:	4644      	movge	r4, r8
   23804:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   23806:	4622      	mov	r2, r4
   23808:	19b9      	adds	r1, r7, r6
   2380a:	4628      	mov	r0, r5
   2380c:	f7fe fcec 	bl	221e8 <memcpy>
}
   23810:	4620      	mov	r0, r4
   23812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   23816:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2381a:	e7f9      	b.n	23810 <read_name+0x30>

0002381c <cf_read>:
{
   2381c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2381e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   23820:	2300      	movs	r3, #0
{
   23822:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   23826:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2382a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2382c:	f7f5 fda6 	bl	1937c <find_cf_cfg>
	if (cfg) {
   23830:	b128      	cbz	r0, 2383e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   23832:	f100 0108 	add.w	r1, r0, #8
   23836:	2201      	movs	r2, #1
   23838:	a801      	add	r0, sp, #4
   2383a:	f7fe fcd5 	bl	221e8 <memcpy>
	if (offset > value_len) {
   2383e:	2e01      	cmp	r6, #1
   23840:	d80d      	bhi.n	2385e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   23842:	f1c6 0401 	rsb	r4, r6, #1
   23846:	42bc      	cmp	r4, r7
   23848:	bfa8      	it	ge
   2384a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2384c:	ab01      	add	r3, sp, #4
   2384e:	4622      	mov	r2, r4
   23850:	1999      	adds	r1, r3, r6
   23852:	4628      	mov	r0, r5
   23854:	f7fe fcc8 	bl	221e8 <memcpy>
}
   23858:	4620      	mov	r0, r4
   2385a:	b003      	add	sp, #12
   2385c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2385e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   23862:	e7f9      	b.n	23858 <cf_read+0x3c>

00023864 <bt_gatt_attr_read_ccc>:
{
   23864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   23866:	68c9      	ldr	r1, [r1, #12]
{
   23868:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2386c:	4615      	mov	r5, r2
   2386e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   23870:	f7ff ff6d 	bl	2374e <find_ccc_cfg>
	if (cfg) {
   23874:	b100      	cbz	r0, 23878 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   23876:	8900      	ldrh	r0, [r0, #8]
   23878:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2387c:	2e02      	cmp	r6, #2
   2387e:	d80e      	bhi.n	2389e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   23880:	f1c6 0402 	rsb	r4, r6, #2
   23884:	42bc      	cmp	r4, r7
   23886:	bfa8      	it	ge
   23888:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2388a:	f10d 0306 	add.w	r3, sp, #6
   2388e:	4622      	mov	r2, r4
   23890:	1999      	adds	r1, r3, r6
   23892:	4628      	mov	r0, r5
   23894:	f7fe fca8 	bl	221e8 <memcpy>
}
   23898:	4620      	mov	r0, r4
   2389a:	b003      	add	sp, #12
   2389c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2389e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   238a2:	e7f9      	b.n	23898 <bt_gatt_attr_read_ccc+0x34>

000238a4 <bt_gatt_attr_read_service>:
{
   238a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   238a6:	68c9      	ldr	r1, [r1, #12]
{
   238a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   238ac:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   238ae:	780b      	ldrb	r3, [r1, #0]
{
   238b0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   238b2:	b993      	cbnz	r3, 238da <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   238b4:	884b      	ldrh	r3, [r1, #2]
   238b6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   238ba:	2d02      	cmp	r5, #2
   238bc:	d819      	bhi.n	238f2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   238be:	f1c5 0202 	rsb	r2, r5, #2
   238c2:	4294      	cmp	r4, r2
   238c4:	bfa8      	it	ge
   238c6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   238c8:	f10d 0306 	add.w	r3, sp, #6
   238cc:	4622      	mov	r2, r4
   238ce:	1959      	adds	r1, r3, r5
   238d0:	f7fe fc8a 	bl	221e8 <memcpy>
}
   238d4:	4620      	mov	r0, r4
   238d6:	b003      	add	sp, #12
   238d8:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   238da:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   238dc:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   238e0:	d807      	bhi.n	238f2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   238e2:	f1c5 0210 	rsb	r2, r5, #16
   238e6:	4294      	cmp	r4, r2
   238e8:	bfa8      	it	ge
   238ea:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   238ec:	4622      	mov	r2, r4
   238ee:	4429      	add	r1, r5
   238f0:	e7ee      	b.n	238d0 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   238f2:	f06f 0406 	mvn.w	r4, #6
   238f6:	e7ed      	b.n	238d4 <bt_gatt_attr_read_service+0x30>

000238f8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   238f8:	2a02      	cmp	r2, #2
{
   238fa:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   238fc:	d108      	bne.n	23910 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   238fe:	2300      	movs	r3, #0
   23900:	f100 0188 	add.w	r1, r0, #136	; 0x88
   23904:	461a      	mov	r2, r3
   23906:	7a00      	ldrb	r0, [r0, #8]
   23908:	f7f5 fbda 	bl	190c0 <sc_save>
}
   2390c:	2002      	movs	r0, #2
   2390e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   23910:	f7f5 ff04 	bl	1971c <sc_clear>
   23914:	e7fa      	b.n	2390c <sc_ccc_cfg_write+0x14>

00023916 <bt_gatt_attr_read>:
{
   23916:	b538      	push	{r3, r4, r5, lr}
   23918:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2391c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   23920:	42a9      	cmp	r1, r5
{
   23922:	4610      	mov	r0, r2
	if (offset > value_len) {
   23924:	d80b      	bhi.n	2393e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   23926:	1a6d      	subs	r5, r5, r1
   23928:	429d      	cmp	r5, r3
   2392a:	bfa8      	it	ge
   2392c:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2392e:	9b05      	ldr	r3, [sp, #20]
   23930:	b2ad      	uxth	r5, r5
   23932:	462a      	mov	r2, r5
   23934:	4419      	add	r1, r3
   23936:	f7fe fc57 	bl	221e8 <memcpy>
}
   2393a:	4628      	mov	r0, r5
   2393c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2393e:	f06f 0506 	mvn.w	r5, #6
   23942:	e7fa      	b.n	2393a <bt_gatt_attr_read+0x24>

00023944 <bt_gatt_attr_value_handle>:
{
   23944:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23946:	4604      	mov	r4, r0
   23948:	b910      	cbnz	r0, 23950 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2394a:	2000      	movs	r0, #0
}
   2394c:	b002      	add	sp, #8
   2394e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23950:	2300      	movs	r3, #0
   23952:	f88d 3004 	strb.w	r3, [sp, #4]
   23956:	6800      	ldr	r0, [r0, #0]
   23958:	f642 0303 	movw	r3, #10243	; 0x2803
   2395c:	a901      	add	r1, sp, #4
   2395e:	f8ad 3006 	strh.w	r3, [sp, #6]
   23962:	f7fe fd5f 	bl	22424 <bt_uuid_cmp>
   23966:	2800      	cmp	r0, #0
   23968:	d1ef      	bne.n	2394a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2396a:	68e3      	ldr	r3, [r4, #12]
   2396c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2396e:	2800      	cmp	r0, #0
   23970:	d1ec      	bne.n	2394c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   23972:	4620      	mov	r0, r4
   23974:	f7f5 ffa6 	bl	198c4 <bt_gatt_attr_get_handle>
   23978:	3001      	adds	r0, #1
   2397a:	b280      	uxth	r0, r0
	return handle;
   2397c:	e7e6      	b.n	2394c <bt_gatt_attr_value_handle+0x8>

0002397e <bt_gatt_attr_read_chrc>:
{
   2397e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   23980:	68cf      	ldr	r7, [r1, #12]
{
   23982:	b087      	sub	sp, #28
   23984:	4608      	mov	r0, r1
   23986:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   23988:	79bb      	ldrb	r3, [r7, #6]
   2398a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2398e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   23992:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   23994:	f7ff ffd6 	bl	23944 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   23998:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2399a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2399e:	780b      	ldrb	r3, [r1, #0]
   239a0:	b99b      	cbnz	r3, 239ca <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   239a2:	884b      	ldrh	r3, [r1, #2]
   239a4:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   239a8:	2105      	movs	r1, #5
	if (offset > value_len) {
   239aa:	42b1      	cmp	r1, r6
   239ac:	d315      	bcc.n	239da <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   239ae:	1b89      	subs	r1, r1, r6
   239b0:	42a1      	cmp	r1, r4
   239b2:	bfa8      	it	ge
   239b4:	4621      	movge	r1, r4
   239b6:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   239b8:	ab01      	add	r3, sp, #4
   239ba:	4622      	mov	r2, r4
   239bc:	1999      	adds	r1, r3, r6
   239be:	4628      	mov	r0, r5
   239c0:	f7fe fc12 	bl	221e8 <memcpy>
}
   239c4:	4620      	mov	r0, r4
   239c6:	b007      	add	sp, #28
   239c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   239ca:	3101      	adds	r1, #1
   239cc:	2210      	movs	r2, #16
   239ce:	f10d 0007 	add.w	r0, sp, #7
   239d2:	f7fe fc09 	bl	221e8 <memcpy>
		value_len += 16U;
   239d6:	2113      	movs	r1, #19
   239d8:	e7e7      	b.n	239aa <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   239da:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   239de:	e7f1      	b.n	239c4 <bt_gatt_attr_read_chrc+0x46>

000239e0 <bt_gatt_foreach_attr>:
{
   239e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   239e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   239e6:	2300      	movs	r3, #0
   239e8:	9300      	str	r3, [sp, #0]
   239ea:	461a      	mov	r2, r3
   239ec:	f7f5 ff9a 	bl	19924 <bt_gatt_foreach_attr_type>
}
   239f0:	b005      	add	sp, #20
   239f2:	f85d fb04 	ldr.w	pc, [sp], #4

000239f6 <bt_gatt_check_perm>:
{
   239f6:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   239f8:	07d4      	lsls	r4, r2, #31
{
   239fa:	4605      	mov	r5, r0
   239fc:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   239fe:	d504      	bpl.n	23a0a <bt_gatt_check_perm+0x14>
   23a00:	f010 0f15 	tst.w	r0, #21
   23a04:	d01e      	beq.n	23a44 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   23a06:	684b      	ldr	r3, [r1, #4]
   23a08:	b1e3      	cbz	r3, 23a44 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   23a0a:	0793      	lsls	r3, r2, #30
   23a0c:	d504      	bpl.n	23a18 <bt_gatt_check_perm+0x22>
   23a0e:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   23a12:	d019      	beq.n	23a48 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   23a14:	688b      	ldr	r3, [r1, #8]
   23a16:	b1bb      	cbz	r3, 23a48 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   23a18:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   23a1c:	f014 0f30 	tst.w	r4, #48	; 0x30
   23a20:	d103      	bne.n	23a2a <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   23a22:	f014 000c 	ands.w	r0, r4, #12
   23a26:	d107      	bne.n	23a38 <bt_gatt_check_perm+0x42>
}
   23a28:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   23a2a:	4628      	mov	r0, r5
   23a2c:	f7ff f848 	bl	22ac0 <bt_conn_get_security>
   23a30:	2802      	cmp	r0, #2
   23a32:	d8f6      	bhi.n	23a22 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   23a34:	2005      	movs	r0, #5
   23a36:	e7f7      	b.n	23a28 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   23a38:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   23a3a:	2b00      	cmp	r3, #0
   23a3c:	bf14      	ite	ne
   23a3e:	2000      	movne	r0, #0
   23a40:	200f      	moveq	r0, #15
   23a42:	e7f1      	b.n	23a28 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   23a44:	2002      	movs	r0, #2
   23a46:	e7ef      	b.n	23a28 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   23a48:	2003      	movs	r0, #3
   23a4a:	e7ed      	b.n	23a28 <bt_gatt_check_perm+0x32>

00023a4c <bt_gatt_change_aware>:
{
   23a4c:	b538      	push	{r3, r4, r5, lr}
   23a4e:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   23a50:	f7f5 fc94 	bl	1937c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23a54:	b910      	cbnz	r0, 23a5c <bt_gatt_change_aware+0x10>
		return true;
   23a56:	2501      	movs	r5, #1
}
   23a58:	4628      	mov	r0, r5
   23a5a:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23a5c:	7a03      	ldrb	r3, [r0, #8]
   23a5e:	07d9      	lsls	r1, r3, #31
   23a60:	d5f9      	bpl.n	23a56 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   23a62:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   23a66:	4620      	mov	r0, r4
   23a68:	f7ff fdad 	bl	235c6 <atomic_get>
   23a6c:	07c2      	lsls	r2, r0, #31
   23a6e:	d4f2      	bmi.n	23a56 <bt_gatt_change_aware+0xa>
	if (!req) {
   23a70:	2d00      	cmp	r5, #0
   23a72:	d0f1      	beq.n	23a58 <bt_gatt_change_aware+0xc>
   23a74:	4620      	mov	r0, r4
   23a76:	f7ff fda6 	bl	235c6 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   23a7a:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23a7c:	f3c0 0540 	ubfx	r5, r0, #1, #1
   23a80:	d509      	bpl.n	23a96 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23a82:	f06f 0102 	mvn.w	r1, #2
   23a86:	4620      	mov	r0, r4
   23a88:	f7ff fe19 	bl	236be <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   23a8c:	2101      	movs	r1, #1
   23a8e:	4620      	mov	r0, r4
   23a90:	f7ff fdf5 	bl	2367e <atomic_or>
}
   23a94:	e7e0      	b.n	23a58 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   23a96:	2102      	movs	r1, #2
   23a98:	e7f9      	b.n	23a8e <bt_gatt_change_aware+0x42>

00023a9a <sys_memcpy_swap>:
	psrc += length - 1;
   23a9a:	1e53      	subs	r3, r2, #1
   23a9c:	4419      	add	r1, r3
	for (; length > 0; length--) {
   23a9e:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   23aa0:	f811 3901 	ldrb.w	r3, [r1], #-1
   23aa4:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   23aa8:	4290      	cmp	r0, r2
   23aaa:	d1f9      	bne.n	23aa0 <sys_memcpy_swap+0x6>
}
   23aac:	4770      	bx	lr

00023aae <smp_pairing_rsp>:
}
   23aae:	2007      	movs	r0, #7
   23ab0:	4770      	bx	lr

00023ab2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   23ab2:	2301      	movs	r3, #1
   23ab4:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23ab6:	f3bf 8f5b 	dmb	ish
   23aba:	e850 2f00 	ldrex	r2, [r0]
   23abe:	431a      	orrs	r2, r3
   23ac0:	e840 2100 	strex	r1, r2, [r0]
   23ac4:	2900      	cmp	r1, #0
   23ac6:	d1f8      	bne.n	23aba <atomic_set_bit+0x8>
   23ac8:	f3bf 8f5b 	dmb	ish
}
   23acc:	4770      	bx	lr

00023ace <smp_keypress_notif>:
{
   23ace:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   23ad0:	210e      	movs	r1, #14
   23ad2:	f7ff ffee 	bl	23ab2 <atomic_set_bit>
}
   23ad6:	2000      	movs	r0, #0
   23ad8:	bd08      	pop	{r3, pc}

00023ada <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23ada:	f3bf 8f5b 	dmb	ish
   23ade:	6800      	ldr	r0, [r0, #0]
   23ae0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23ae4:	4108      	asrs	r0, r1
}
   23ae6:	f000 0001 	and.w	r0, r0, #1
   23aea:	4770      	bx	lr

00023aec <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   23aec:	2301      	movs	r3, #1
   23aee:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23af0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23af2:	f3bf 8f5b 	dmb	ish
   23af6:	e850 2f00 	ldrex	r2, [r0]
   23afa:	401a      	ands	r2, r3
   23afc:	e840 2100 	strex	r1, r2, [r0]
   23b00:	2900      	cmp	r1, #0
   23b02:	d1f8      	bne.n	23af6 <atomic_clear_bit+0xa>
   23b04:	f3bf 8f5b 	dmb	ish
}
   23b08:	4770      	bx	lr

00023b0a <bt_smp_aes_cmac>:
{
   23b0a:	b570      	push	{r4, r5, r6, lr}
   23b0c:	b0c2      	sub	sp, #264	; 0x108
   23b0e:	460d      	mov	r5, r1
   23b10:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   23b12:	4601      	mov	r1, r0
   23b14:	aa16      	add	r2, sp, #88	; 0x58
   23b16:	4668      	mov	r0, sp
{
   23b18:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   23b1a:	f7fe f9bc 	bl	21e96 <tc_cmac_setup>
   23b1e:	b150      	cbz	r0, 23b36 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   23b20:	4632      	mov	r2, r6
   23b22:	4629      	mov	r1, r5
   23b24:	4668      	mov	r0, sp
   23b26:	f7fe f9e1 	bl	21eec <tc_cmac_update>
   23b2a:	b120      	cbz	r0, 23b36 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   23b2c:	4669      	mov	r1, sp
   23b2e:	4620      	mov	r0, r4
   23b30:	f7fe fa48 	bl	21fc4 <tc_cmac_final>
   23b34:	b918      	cbnz	r0, 23b3e <bt_smp_aes_cmac+0x34>
		return -EIO;
   23b36:	f06f 0004 	mvn.w	r0, #4
}
   23b3a:	b042      	add	sp, #264	; 0x108
   23b3c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   23b3e:	2000      	movs	r0, #0
   23b40:	e7fb      	b.n	23b3a <bt_smp_aes_cmac+0x30>

00023b42 <update_keys_check>:
{
   23b42:	b510      	push	{r4, lr}
   23b44:	4603      	mov	r3, r0
	if (!keys ||
   23b46:	b1d9      	cbz	r1, 23b80 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   23b48:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   23b4a:	f010 0f24 	tst.w	r0, #36	; 0x24
   23b4e:	d017      	beq.n	23b80 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   23b50:	7d1a      	ldrb	r2, [r3, #20]
   23b52:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   23b54:	7b09      	ldrb	r1, [r1, #12]
   23b56:	42a2      	cmp	r2, r4
   23b58:	bf28      	it	cs
   23b5a:	4622      	movcs	r2, r4
   23b5c:	4291      	cmp	r1, r2
   23b5e:	d901      	bls.n	23b64 <update_keys_check+0x22>
		return false;
   23b60:	2000      	movs	r0, #0
}
   23b62:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   23b64:	0682      	lsls	r2, r0, #26
   23b66:	d404      	bmi.n	23b72 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   23b68:	7a18      	ldrb	r0, [r3, #8]
   23b6a:	3800      	subs	r0, #0
   23b6c:	bf18      	it	ne
   23b6e:	2001      	movne	r0, #1
   23b70:	e7f7      	b.n	23b62 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   23b72:	2105      	movs	r1, #5
   23b74:	1d18      	adds	r0, r3, #4
   23b76:	f7ff ffb0 	bl	23ada <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   23b7a:	2800      	cmp	r0, #0
   23b7c:	d1f4      	bne.n	23b68 <update_keys_check+0x26>
   23b7e:	e7ef      	b.n	23b60 <update_keys_check+0x1e>
		return true;
   23b80:	2001      	movs	r0, #1
   23b82:	e7ee      	b.n	23b62 <update_keys_check+0x20>

00023b84 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   23b84:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   23b86:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   23b88:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   23b8a:	4628      	mov	r0, r5
   23b8c:	2104      	movs	r1, #4
   23b8e:	f7ff ffa4 	bl	23ada <atomic_test_bit>
   23b92:	b168      	cbz	r0, 23bb0 <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   23b94:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   23b96:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   23b98:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   23b9a:	4608      	mov	r0, r1
   23b9c:	f7ff f8ef 	bl	22d7e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   23ba0:	4604      	mov	r4, r0
   23ba2:	b940      	cbnz	r0, 23bb6 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   23ba4:	2104      	movs	r1, #4
   23ba6:	4628      	mov	r0, r5
   23ba8:	f7ff ff83 	bl	23ab2 <atomic_set_bit>
}
   23bac:	4620      	mov	r0, r4
   23bae:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   23bb0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23bb4:	e7ef      	b.n	23b96 <smp_create_pdu.isra.0+0x12>
   23bb6:	2101      	movs	r1, #1
   23bb8:	3008      	adds	r0, #8
   23bba:	f000 fc78 	bl	244ae <net_buf_simple_add>
	hdr->code = op;
   23bbe:	7006      	strb	r6, [r0, #0]
	return buf;
   23bc0:	e7f4      	b.n	23bac <smp_create_pdu.isra.0+0x28>

00023bc2 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   23bc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23bc4:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   23bc6:	2200      	movs	r2, #0
   23bc8:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   23bca:	4604      	mov	r4, r0
   23bcc:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   23bce:	460a      	mov	r2, r1
   23bd0:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   23bd4:	2106      	movs	r1, #6
   23bd6:	f7ff f8d5 	bl	22d84 <bt_l2cap_send_cb>
   23bda:	b128      	cbz	r0, 23be8 <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   23bdc:	4628      	mov	r0, r5
}
   23bde:	b003      	add	sp, #12
   23be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   23be4:	f7f8 bb0a 	b.w	1c1fc <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   23be8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23bec:	2300      	movs	r3, #0
   23bee:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   23bf2:	b003      	add	sp, #12
   23bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   23bf8:	f7fa bf4c 	b.w	1ea94 <k_work_reschedule>

00023bfc <smp_send_pairing_random>:
{
   23bfc:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   23bfe:	2104      	movs	r1, #4
{
   23c00:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   23c02:	f7ff ffbf 	bl	23b84 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   23c06:	4604      	mov	r4, r0
   23c08:	b178      	cbz	r0, 23c2a <smp_send_pairing_random+0x2e>
   23c0a:	2110      	movs	r1, #16
   23c0c:	3008      	adds	r0, #8
   23c0e:	f000 fc4e 	bl	244ae <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   23c12:	2210      	movs	r2, #16
   23c14:	f105 0127 	add.w	r1, r5, #39	; 0x27
   23c18:	f7fe fae6 	bl	221e8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   23c1c:	4628      	mov	r0, r5
   23c1e:	2200      	movs	r2, #0
   23c20:	4621      	mov	r1, r4
   23c22:	f7ff ffce 	bl	23bc2 <smp_send.isra.0>
	return 0;
   23c26:	2000      	movs	r0, #0
}
   23c28:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   23c2a:	2008      	movs	r0, #8
   23c2c:	e7fc      	b.n	23c28 <smp_send_pairing_random+0x2c>

00023c2e <send_pairing_rsp>:
{
   23c2e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   23c30:	2102      	movs	r1, #2
{
   23c32:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   23c34:	f7ff ffa6 	bl	23b84 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   23c38:	4604      	mov	r4, r0
   23c3a:	b178      	cbz	r0, 23c5c <send_pairing_rsp+0x2e>
   23c3c:	2106      	movs	r1, #6
   23c3e:	3008      	adds	r0, #8
   23c40:	f000 fc35 	bl	244ae <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   23c44:	2206      	movs	r2, #6
   23c46:	f105 0111 	add.w	r1, r5, #17
   23c4a:	f7fe facd 	bl	221e8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   23c4e:	4628      	mov	r0, r5
   23c50:	2200      	movs	r2, #0
   23c52:	4621      	mov	r1, r4
   23c54:	f7ff ffb5 	bl	23bc2 <smp_send.isra.0>
	return 0;
   23c58:	2000      	movs	r0, #0
}
   23c5a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   23c5c:	2008      	movs	r0, #8
   23c5e:	e7fc      	b.n	23c5a <send_pairing_rsp+0x2c>

00023c60 <smp_security_request>:
   23c60:	2007      	movs	r0, #7
   23c62:	4770      	bx	lr

00023c64 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   23c64:	b510      	push	{r4, lr}
   23c66:	1e43      	subs	r3, r0, #1
   23c68:	f100 0210 	add.w	r2, r0, #16
   23c6c:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   23c6e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   23c72:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   23c76:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   23c78:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   23c7a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   23c7c:	d1f7      	bne.n	23c6e <sys_mem_swap.constprop.0+0xa>
	}
}
   23c7e:	bd10      	pop	{r4, pc}

00023c80 <smp_f6>:
{
   23c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c82:	b097      	sub	sp, #92	; 0x5c
   23c84:	4605      	mov	r5, r0
   23c86:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   23c88:	a805      	add	r0, sp, #20
   23c8a:	2210      	movs	r2, #16
{
   23c8c:	461c      	mov	r4, r3
   23c8e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   23c90:	f7ff ff03 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   23c94:	2210      	movs	r2, #16
   23c96:	4631      	mov	r1, r6
   23c98:	a809      	add	r0, sp, #36	; 0x24
   23c9a:	f7ff fefe 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   23c9e:	4621      	mov	r1, r4
   23ca0:	2210      	movs	r2, #16
   23ca2:	a80d      	add	r0, sp, #52	; 0x34
   23ca4:	f7ff fef9 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   23ca8:	991c      	ldr	r1, [sp, #112]	; 0x70
   23caa:	2203      	movs	r2, #3
   23cac:	a811      	add	r0, sp, #68	; 0x44
   23cae:	f7ff fef4 	bl	23a9a <sys_memcpy_swap>
	m[51] = a1->type;
   23cb2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   23cb4:	f814 3b01 	ldrb.w	r3, [r4], #1
   23cb8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   23cbc:	4621      	mov	r1, r4
   23cbe:	2206      	movs	r2, #6
   23cc0:	a812      	add	r0, sp, #72	; 0x48
   23cc2:	f7fe fa91 	bl	221e8 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   23cc6:	4621      	mov	r1, r4
   23cc8:	2206      	movs	r2, #6
   23cca:	a812      	add	r0, sp, #72	; 0x48
   23ccc:	f7ff fee5 	bl	23a9a <sys_memcpy_swap>
	m[58] = a2->type;
   23cd0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   23cd2:	f814 3b01 	ldrb.w	r3, [r4], #1
   23cd6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   23cda:	4621      	mov	r1, r4
   23cdc:	2206      	movs	r2, #6
   23cde:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   23ce2:	f7fe fa81 	bl	221e8 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   23ce6:	4621      	mov	r1, r4
   23ce8:	2206      	movs	r2, #6
   23cea:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   23cee:	f7ff fed4 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   23cf2:	2210      	movs	r2, #16
   23cf4:	4629      	mov	r1, r5
   23cf6:	a801      	add	r0, sp, #4
   23cf8:	f7ff fecf 	bl	23a9a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   23cfc:	463b      	mov	r3, r7
   23cfe:	2241      	movs	r2, #65	; 0x41
   23d00:	a905      	add	r1, sp, #20
   23d02:	a801      	add	r0, sp, #4
   23d04:	f7ff ff01 	bl	23b0a <bt_smp_aes_cmac>
	if (err) {
   23d08:	4604      	mov	r4, r0
   23d0a:	b910      	cbnz	r0, 23d12 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   23d0c:	4638      	mov	r0, r7
   23d0e:	f7ff ffa9 	bl	23c64 <sys_mem_swap.constprop.0>
}
   23d12:	4620      	mov	r0, r4
   23d14:	b017      	add	sp, #92	; 0x5c
   23d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023d18 <smp_dhkey_check>:
{
   23d18:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   23d1a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   23d1e:	78db      	ldrb	r3, [r3, #3]
   23d20:	2b01      	cmp	r3, #1
{
   23d22:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   23d24:	d114      	bne.n	23d50 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   23d26:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   23d28:	1d05      	adds	r5, r0, #4
   23d2a:	2110      	movs	r1, #16
   23d2c:	4628      	mov	r0, r5
   23d2e:	f7ff fedd 	bl	23aec <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   23d32:	4631      	mov	r1, r6
   23d34:	2210      	movs	r2, #16
   23d36:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   23d3a:	f7fe fa55 	bl	221e8 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   23d3e:	2107      	movs	r1, #7
   23d40:	4628      	mov	r0, r5
   23d42:	f7ff feca 	bl	23ada <atomic_test_bit>
   23d46:	b128      	cbz	r0, 23d54 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   23d48:	2109      	movs	r1, #9
   23d4a:	4628      	mov	r0, r5
   23d4c:	f7ff feb1 	bl	23ab2 <atomic_set_bit>
}
   23d50:	2000      	movs	r0, #0
   23d52:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23d54:	210a      	movs	r1, #10
   23d56:	4628      	mov	r0, r5
   23d58:	f7ff febf 	bl	23ada <atomic_test_bit>
   23d5c:	2800      	cmp	r0, #0
   23d5e:	d1f3      	bne.n	23d48 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   23d60:	4620      	mov	r0, r4
}
   23d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   23d66:	f7f6 be9f 	b.w	1aaa8 <compute_and_check_and_send_slave_dhcheck>

00023d6a <smp_f4>:
{
   23d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   23d6c:	b097      	sub	sp, #92	; 0x5c
   23d6e:	4614      	mov	r4, r2
   23d70:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   23d72:	2220      	movs	r2, #32
   23d74:	4601      	mov	r1, r0
   23d76:	a805      	add	r0, sp, #20
{
   23d78:	461d      	mov	r5, r3
   23d7a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   23d7c:	f7ff fe8d 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   23d80:	2220      	movs	r2, #32
   23d82:	4631      	mov	r1, r6
   23d84:	a80d      	add	r0, sp, #52	; 0x34
   23d86:	f7ff fe88 	bl	23a9a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   23d8a:	4621      	mov	r1, r4
   23d8c:	2210      	movs	r2, #16
   23d8e:	a801      	add	r0, sp, #4
	m[64] = z;
   23d90:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   23d94:	f7ff fe81 	bl	23a9a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   23d98:	463b      	mov	r3, r7
   23d9a:	2241      	movs	r2, #65	; 0x41
   23d9c:	a905      	add	r1, sp, #20
   23d9e:	a801      	add	r0, sp, #4
   23da0:	f7ff feb3 	bl	23b0a <bt_smp_aes_cmac>
	if (err) {
   23da4:	4604      	mov	r4, r0
   23da6:	b910      	cbnz	r0, 23dae <smp_f4+0x44>
	sys_mem_swap(res, 16);
   23da8:	4638      	mov	r0, r7
   23daa:	f7ff ff5b 	bl	23c64 <sys_mem_swap.constprop.0>
}
   23dae:	4620      	mov	r0, r4
   23db0:	b017      	add	sp, #92	; 0x5c
   23db2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023db4 <smp_signing_info>:
   23db4:	2007      	movs	r0, #7
   23db6:	4770      	bx	lr

00023db8 <atomic_test_and_clear_bit>:
{
   23db8:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   23dba:	2301      	movs	r3, #1
   23dbc:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23dc0:	43ca      	mvns	r2, r1
   23dc2:	f3bf 8f5b 	dmb	ish
   23dc6:	e850 3f00 	ldrex	r3, [r0]
   23dca:	ea03 0c02 	and.w	ip, r3, r2
   23dce:	e840 ce00 	strex	lr, ip, [r0]
   23dd2:	f1be 0f00 	cmp.w	lr, #0
   23dd6:	d1f6      	bne.n	23dc6 <atomic_test_and_clear_bit+0xe>
   23dd8:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   23ddc:	420b      	tst	r3, r1
}
   23dde:	bf14      	ite	ne
   23de0:	2001      	movne	r0, #1
   23de2:	2000      	moveq	r0, #0
   23de4:	f85d fb04 	ldr.w	pc, [sp], #4

00023de8 <smp_reset>:
{
   23de8:	b538      	push	{r3, r4, r5, lr}
   23dea:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23dec:	1d03      	adds	r3, r0, #4
   23dee:	2500      	movs	r5, #0
   23df0:	f3bf 8f5b 	dmb	ish
   23df4:	e853 2f00 	ldrex	r2, [r3]
   23df8:	e843 5100 	strex	r1, r5, [r3]
   23dfc:	2900      	cmp	r1, #0
   23dfe:	d1f9      	bne.n	23df4 <smp_reset+0xc>
   23e00:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   23e04:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   23e08:	f000 ffbe 	bl	24d88 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   23e0c:	7225      	strb	r5, [r4, #8]
   23e0e:	f3bf 8f5b 	dmb	ish
   23e12:	e854 3f00 	ldrex	r3, [r4]
   23e16:	e844 5200 	strex	r2, r5, [r4]
   23e1a:	2a00      	cmp	r2, #0
   23e1c:	d1f9      	bne.n	23e12 <smp_reset+0x2a>
   23e1e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   23e22:	4620      	mov	r0, r4
   23e24:	2101      	movs	r1, #1
}
   23e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   23e2a:	f7ff be42 	b.w	23ab2 <atomic_set_bit>

00023e2e <smp_c1>:
{
   23e2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23e32:	b089      	sub	sp, #36	; 0x24
   23e34:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   23e38:	4699      	mov	r9, r3
	p1[0] = ia->type;
   23e3a:	783b      	ldrb	r3, [r7, #0]
{
   23e3c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   23e3e:	f88d 3000 	strb.w	r3, [sp]
{
   23e42:	460c      	mov	r4, r1
	p1[1] = ra->type;
   23e44:	f898 3000 	ldrb.w	r3, [r8]
   23e48:	f88d 3001 	strb.w	r3, [sp, #1]
{
   23e4c:	4611      	mov	r1, r2
   23e4e:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   23e50:	2207      	movs	r2, #7
   23e52:	f10d 0002 	add.w	r0, sp, #2
   23e56:	f7fe f9c7 	bl	221e8 <memcpy>
	memcpy(p1 + 9, pres, 7);
   23e5a:	2207      	movs	r2, #7
   23e5c:	4649      	mov	r1, r9
   23e5e:	f10d 0009 	add.w	r0, sp, #9
   23e62:	f7fe f9c1 	bl	221e8 <memcpy>
	while (len--) {
   23e66:	f104 0010 	add.w	r0, r4, #16
   23e6a:	4629      	mov	r1, r5
   23e6c:	466a      	mov	r2, sp
   23e6e:	42a0      	cmp	r0, r4
   23e70:	d127      	bne.n	23ec2 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   23e72:	462a      	mov	r2, r5
   23e74:	4629      	mov	r1, r5
   23e76:	4630      	mov	r0, r6
   23e78:	f000 fc65 	bl	24746 <bt_encrypt_le>
	if (err) {
   23e7c:	4604      	mov	r4, r0
   23e7e:	b9e0      	cbnz	r0, 23eba <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   23e80:	2206      	movs	r2, #6
   23e82:	f108 0101 	add.w	r1, r8, #1
   23e86:	a804      	add	r0, sp, #16
   23e88:	f7fe f9ae 	bl	221e8 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   23e8c:	2206      	movs	r2, #6
   23e8e:	1c79      	adds	r1, r7, #1
   23e90:	f10d 0016 	add.w	r0, sp, #22
   23e94:	f7fe f9a8 	bl	221e8 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   23e98:	2204      	movs	r2, #4
   23e9a:	4621      	mov	r1, r4
   23e9c:	a807      	add	r0, sp, #28
   23e9e:	f7fe f9ce 	bl	2223e <memset>
	while (len--) {
   23ea2:	f105 0010 	add.w	r0, r5, #16
   23ea6:	462a      	mov	r2, r5
   23ea8:	ab04      	add	r3, sp, #16
   23eaa:	4282      	cmp	r2, r0
   23eac:	d112      	bne.n	23ed4 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   23eae:	462a      	mov	r2, r5
   23eb0:	4629      	mov	r1, r5
   23eb2:	4630      	mov	r0, r6
   23eb4:	f000 fc47 	bl	24746 <bt_encrypt_le>
   23eb8:	4604      	mov	r4, r0
}
   23eba:	4620      	mov	r0, r4
   23ebc:	b009      	add	sp, #36	; 0x24
   23ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   23ec2:	f814 3b01 	ldrb.w	r3, [r4], #1
   23ec6:	f812 cb01 	ldrb.w	ip, [r2], #1
   23eca:	ea83 030c 	eor.w	r3, r3, ip
   23ece:	f801 3b01 	strb.w	r3, [r1], #1
   23ed2:	e7cc      	b.n	23e6e <smp_c1+0x40>
   23ed4:	f812 1b01 	ldrb.w	r1, [r2], #1
   23ed8:	f813 4b01 	ldrb.w	r4, [r3], #1
   23edc:	4061      	eors	r1, r4
   23ede:	f802 1c01 	strb.w	r1, [r2, #-1]
   23ee2:	e7e2      	b.n	23eaa <smp_c1+0x7c>

00023ee4 <legacy_pairing_confirm>:
{
   23ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23ee6:	1d07      	adds	r7, r0, #4
{
   23ee8:	b085      	sub	sp, #20
   23eea:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23eec:	210a      	movs	r1, #10
   23eee:	4638      	mov	r0, r7
   23ef0:	f7ff fdf3 	bl	23ada <atomic_test_bit>
   23ef4:	bb88      	cbnz	r0, 23f5a <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   23ef6:	2104      	movs	r1, #4
   23ef8:	4628      	mov	r0, r5
   23efa:	f7ff fdda 	bl	23ab2 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   23efe:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   23f00:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   23f04:	f7ff fe3e 	bl	23b84 <smp_create_pdu.isra.0>
	if (!buf) {
   23f08:	4606      	mov	r6, r0
   23f0a:	b1c0      	cbz	r0, 23f3e <legacy_pairing_confirm+0x5a>
   23f0c:	2110      	movs	r1, #16
   23f0e:	3008      	adds	r0, #8
   23f10:	f000 facd 	bl	244ae <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   23f14:	f104 0396 	add.w	r3, r4, #150	; 0x96
   23f18:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   23f1a:	9002      	str	r0, [sp, #8]
   23f1c:	9301      	str	r3, [sp, #4]
   23f1e:	9400      	str	r4, [sp, #0]
   23f20:	f105 0310 	add.w	r3, r5, #16
   23f24:	f105 0209 	add.w	r2, r5, #9
   23f28:	f105 0127 	add.w	r1, r5, #39	; 0x27
   23f2c:	f105 0047 	add.w	r0, r5, #71	; 0x47
   23f30:	f7ff ff7d 	bl	23e2e <smp_c1>
   23f34:	4604      	mov	r4, r0
   23f36:	b120      	cbz	r0, 23f42 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   23f38:	4630      	mov	r0, r6
   23f3a:	f7f8 f95f 	bl	1c1fc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   23f3e:	2008      	movs	r0, #8
   23f40:	e009      	b.n	23f56 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   23f42:	4602      	mov	r2, r0
   23f44:	4631      	mov	r1, r6
   23f46:	4628      	mov	r0, r5
   23f48:	f7ff fe3b 	bl	23bc2 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   23f4c:	4621      	mov	r1, r4
   23f4e:	4638      	mov	r0, r7
   23f50:	f7ff fdcc 	bl	23aec <atomic_clear_bit>
	return 0;
   23f54:	2000      	movs	r0, #0
}
   23f56:	b005      	add	sp, #20
   23f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   23f5a:	2100      	movs	r1, #0
   23f5c:	4638      	mov	r0, r7
   23f5e:	f7ff fda8 	bl	23ab2 <atomic_set_bit>
   23f62:	e7f7      	b.n	23f54 <legacy_pairing_confirm+0x70>

00023f64 <bt_smp_request_ltk>:
{
   23f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23f68:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   23f6c:	e9cd 2300 	strd	r2, r3, [sp]
   23f70:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   23f72:	f7f6 fb7d 	bl	1a670 <smp_chan_get>
	if (!smp) {
   23f76:	4605      	mov	r5, r0
   23f78:	2800      	cmp	r0, #0
   23f7a:	f000 8090 	beq.w	2409e <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   23f7e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   23f82:	1d07      	adds	r7, r0, #4
   23f84:	f1b9 0f00 	cmp.w	r9, #0
   23f88:	d12a      	bne.n	23fe0 <bt_smp_request_ltk+0x7c>
   23f8a:	e9dd 2300 	ldrd	r2, r3, [sp]
   23f8e:	4313      	orrs	r3, r2
   23f90:	d126      	bne.n	23fe0 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   23f92:	2103      	movs	r1, #3
   23f94:	4638      	mov	r0, r7
   23f96:	f7ff fda0 	bl	23ada <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   23f9a:	b308      	cbz	r0, 23fe0 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   23f9c:	2101      	movs	r1, #1
   23f9e:	4638      	mov	r0, r7
   23fa0:	f7ff fd9b 	bl	23ada <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   23fa4:	4606      	mov	r6, r0
   23fa6:	b1d8      	cbz	r0, 23fe0 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   23fa8:	7d2c      	ldrb	r4, [r5, #20]
   23faa:	7b6b      	ldrb	r3, [r5, #13]
   23fac:	429c      	cmp	r4, r3
   23fae:	bf28      	it	cs
   23fb0:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   23fb2:	4622      	mov	r2, r4
   23fb4:	f105 0147 	add.w	r1, r5, #71	; 0x47
   23fb8:	4640      	mov	r0, r8
   23fba:	f7fe f915 	bl	221e8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   23fbe:	2c0f      	cmp	r4, #15
   23fc0:	d806      	bhi.n	23fd0 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   23fc2:	f1c4 0210 	rsb	r2, r4, #16
   23fc6:	4649      	mov	r1, r9
   23fc8:	eb08 0004 	add.w	r0, r8, r4
   23fcc:	f7fe f937 	bl	2223e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   23fd0:	2101      	movs	r1, #1
   23fd2:	4638      	mov	r0, r7
   23fd4:	f7ff fd6d 	bl	23ab2 <atomic_set_bit>
}
   23fd8:	4630      	mov	r0, r6
   23fda:	b003      	add	sp, #12
   23fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   23fe0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   23fe4:	b983      	cbnz	r3, 24008 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   23fe6:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   23fea:	7a21      	ldrb	r1, [r4, #8]
   23fec:	4632      	mov	r2, r6
   23fee:	2020      	movs	r0, #32
   23ff0:	f7f7 feec 	bl	1bdcc <bt_keys_find>
   23ff4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   23ff8:	b930      	cbnz	r0, 24008 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   23ffa:	7a21      	ldrb	r1, [r4, #8]
   23ffc:	4632      	mov	r2, r6
   23ffe:	2001      	movs	r0, #1
   24000:	f7f7 fee4 	bl	1bdcc <bt_keys_find>
   24004:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   24008:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   2400c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   24010:	b9ee      	cbnz	r6, 2404e <bt_smp_request_ltk+0xea>
   24012:	e9dd 2300 	ldrd	r2, r3, [sp]
   24016:	4313      	orrs	r3, r2
   24018:	d119      	bne.n	2404e <bt_smp_request_ltk+0xea>
   2401a:	b388      	cbz	r0, 24080 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2401c:	89c3      	ldrh	r3, [r0, #14]
   2401e:	069a      	lsls	r2, r3, #26
   24020:	d516      	bpl.n	24050 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   24022:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   24024:	f100 011a 	add.w	r1, r0, #26
   24028:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2402a:	4640      	mov	r0, r8
   2402c:	f7fe f8dc 	bl	221e8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   24030:	2c0f      	cmp	r4, #15
   24032:	d806      	bhi.n	24042 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   24034:	f1c4 0210 	rsb	r2, r4, #16
   24038:	4631      	mov	r1, r6
   2403a:	eb08 0004 	add.w	r0, r8, r4
   2403e:	f7fe f8fe 	bl	2223e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   24042:	2101      	movs	r1, #1
   24044:	4638      	mov	r0, r7
   24046:	f7ff fd34 	bl	23ab2 <atomic_set_bit>
		return true;
   2404a:	2601      	movs	r6, #1
   2404c:	e7c4      	b.n	23fd8 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2404e:	b1b8      	cbz	r0, 24080 <bt_smp_request_ltk+0x11c>
   24050:	89c3      	ldrh	r3, [r0, #14]
   24052:	07db      	lsls	r3, r3, #31
   24054:	d514      	bpl.n	24080 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   24056:	2208      	movs	r2, #8
   24058:	4669      	mov	r1, sp
   2405a:	3040      	adds	r0, #64	; 0x40
   2405c:	f7fe f8b4 	bl	221c8 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   24060:	b970      	cbnz	r0, 24080 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   24062:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   24066:	2202      	movs	r2, #2
   24068:	a90a      	add	r1, sp, #40	; 0x28
   2406a:	3048      	adds	r0, #72	; 0x48
   2406c:	f7fe f8ac 	bl	221c8 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   24070:	4606      	mov	r6, r0
   24072:	b928      	cbnz	r0, 24080 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   24074:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   24078:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2407a:	314a      	adds	r1, #74	; 0x4a
   2407c:	4622      	mov	r2, r4
   2407e:	e7d4      	b.n	2402a <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   24080:	210f      	movs	r1, #15
   24082:	4638      	mov	r0, r7
   24084:	f7ff fd29 	bl	23ada <atomic_test_bit>
   24088:	b120      	cbz	r0, 24094 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2408a:	2202      	movs	r2, #2
   2408c:	2106      	movs	r1, #6
   2408e:	4620      	mov	r0, r4
   24090:	f7f3 f984 	bl	1739c <bt_conn_security_changed>
	smp_reset(smp);
   24094:	4628      	mov	r0, r5
   24096:	f7ff fea7 	bl	23de8 <smp_reset>
	return false;
   2409a:	2600      	movs	r6, #0
   2409c:	e79c      	b.n	23fd8 <bt_smp_request_ltk+0x74>
		return false;
   2409e:	4606      	mov	r6, r0
   240a0:	e79a      	b.n	23fd8 <bt_smp_request_ltk+0x74>

000240a2 <bt_smp_sign>:
   240a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   240a6:	4770      	bx	lr

000240a8 <bt_smp_irk_get>:
{
   240a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   240aa:	2500      	movs	r5, #0
{
   240ac:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   240ae:	2210      	movs	r2, #16
   240b0:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   240b2:	e9cd 5500 	strd	r5, r5, [sp]
   240b6:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   240ba:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   240bc:	f7fe f884 	bl	221c8 <memcmp>
   240c0:	b180      	cbz	r0, 240e4 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   240c2:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   240c4:	220c      	movs	r2, #12
   240c6:	4629      	mov	r1, r5
   240c8:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   240ca:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   240cc:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   240ce:	70e5      	strb	r5, [r4, #3]
   240d0:	1d20      	adds	r0, r4, #4
   240d2:	f7fe f8b4 	bl	2223e <memset>
	err = bt_encrypt_le(key, res, res);
   240d6:	4622      	mov	r2, r4
   240d8:	4621      	mov	r1, r4
   240da:	4630      	mov	r0, r6
   240dc:	f000 fb33 	bl	24746 <bt_encrypt_le>
}
   240e0:	b004      	add	sp, #16
   240e2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   240e4:	f06f 0015 	mvn.w	r0, #21
   240e8:	e7fa      	b.n	240e0 <bt_smp_irk_get+0x38>

000240ea <bt_smp_auth_pairing_confirm>:
{
   240ea:	b538      	push	{r3, r4, r5, lr}
	smp = smp_chan_get(conn);
   240ec:	f7f6 fac0 	bl	1a670 <smp_chan_get>
	if (!smp) {
   240f0:	4604      	mov	r4, r0
   240f2:	b910      	cbnz	r0, 240fa <bt_smp_auth_pairing_confirm+0x10>
		return -EINVAL;
   240f4:	f06f 0015 	mvn.w	r0, #21
}
   240f8:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   240fa:	1d05      	adds	r5, r0, #4
   240fc:	210a      	movs	r1, #10
   240fe:	4628      	mov	r0, r5
   24100:	f7ff fe5a 	bl	23db8 <atomic_test_and_clear_bit>
   24104:	2800      	cmp	r0, #0
   24106:	d0f5      	beq.n	240f4 <bt_smp_auth_pairing_confirm+0xa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   24108:	2105      	movs	r1, #5
   2410a:	4628      	mov	r0, r5
   2410c:	f7ff fce5 	bl	23ada <atomic_test_bit>
   24110:	b930      	cbnz	r0, 24120 <bt_smp_auth_pairing_confirm+0x36>
		atomic_set_bit(smp->allowed_cmds,
   24112:	2103      	movs	r1, #3
   24114:	4620      	mov	r0, r4
   24116:	f7ff fccc 	bl	23ab2 <atomic_set_bit>
		return send_pairing_rsp(smp);
   2411a:	f7ff fd88 	bl	23c2e <send_pairing_rsp>
   2411e:	e7eb      	b.n	240f8 <bt_smp_auth_pairing_confirm+0xe>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   24120:	210c      	movs	r1, #12
   24122:	4620      	mov	r0, r4
   24124:	f7ff fcc5 	bl	23ab2 <atomic_set_bit>
	if (send_pairing_rsp(smp)) {
   24128:	f7ff fd81 	bl	23c2e <send_pairing_rsp>
		return -EIO;
   2412c:	2800      	cmp	r0, #0
   2412e:	bf0c      	ite	eq
   24130:	2000      	moveq	r0, #0
   24132:	f06f 0004 	mvnne.w	r0, #4
   24136:	e7df      	b.n	240f8 <bt_smp_auth_pairing_confirm+0xe>

00024138 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   24138:	1d03      	adds	r3, r0, #4
{
   2413a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2413c:	4605      	mov	r5, r0
   2413e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   24140:	4618      	mov	r0, r3
   24142:	2103      	movs	r1, #3
   24144:	f7ff fcc9 	bl	23ada <atomic_test_bit>
   24148:	b1f0      	cbz	r0, 24188 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2414a:	4631      	mov	r1, r6
   2414c:	4628      	mov	r0, r5
   2414e:	f7f7 f96b 	bl	1b428 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   24152:	2105      	movs	r1, #5
   24154:	4628      	mov	r0, r5
   24156:	f7ff fd15 	bl	23b84 <smp_create_pdu.isra.0>
	if (!buf) {
   2415a:	4604      	mov	r4, r0
   2415c:	b308      	cbz	r0, 241a2 <smp_error+0x6a>
   2415e:	2101      	movs	r1, #1
   24160:	3008      	adds	r0, #8
   24162:	f000 f9a4 	bl	244ae <net_buf_simple_add>
	rsp->reason = reason;
   24166:	7006      	strb	r6, [r0, #0]
   24168:	2600      	movs	r6, #0
   2416a:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   2416e:	9600      	str	r6, [sp, #0]
   24170:	4633      	mov	r3, r6
   24172:	4622      	mov	r2, r4
   24174:	2106      	movs	r1, #6
   24176:	f7fe fe05 	bl	22d84 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2417a:	b118      	cbz	r0, 24184 <smp_error+0x4c>
		net_buf_unref(buf);
   2417c:	4620      	mov	r0, r4
   2417e:	f7f8 f83d 	bl	1c1fc <net_buf_unref>
	return 0;
   24182:	4630      	mov	r0, r6
}
   24184:	b002      	add	sp, #8
   24186:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   24188:	2101      	movs	r1, #1
   2418a:	4618      	mov	r0, r3
   2418c:	f7ff fca5 	bl	23ada <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   24190:	2800      	cmp	r0, #0
   24192:	d1da      	bne.n	2414a <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   24194:	210f      	movs	r1, #15
   24196:	4618      	mov	r0, r3
   24198:	f7ff fc9f 	bl	23ada <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2419c:	2800      	cmp	r0, #0
   2419e:	d1d4      	bne.n	2414a <smp_error+0x12>
   241a0:	e7d7      	b.n	24152 <smp_error+0x1a>
		return -ENOBUFS;
   241a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   241a6:	e7ed      	b.n	24184 <smp_error+0x4c>

000241a8 <legacy_user_tk_entry>:
{
   241a8:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   241aa:	2100      	movs	r1, #0
{
   241ac:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   241ae:	3004      	adds	r0, #4
   241b0:	f7ff fe02 	bl	23db8 <atomic_test_and_clear_bit>
   241b4:	b178      	cbz	r0, 241d6 <legacy_user_tk_entry+0x2e>
	if (legacy_pairing_confirm(smp)) {
   241b6:	4620      	mov	r0, r4
   241b8:	f7ff fe94 	bl	23ee4 <legacy_pairing_confirm>
   241bc:	b128      	cbz	r0, 241ca <legacy_user_tk_entry+0x22>
		smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   241be:	4620      	mov	r0, r4
   241c0:	2101      	movs	r1, #1
}
   241c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   241c6:	f7ff bfb7 	b.w	24138 <smp_error>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   241ca:	4620      	mov	r0, r4
   241cc:	2104      	movs	r1, #4
}
   241ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   241d2:	f7ff bc6e 	b.w	23ab2 <atomic_set_bit>
}
   241d6:	bd10      	pop	{r4, pc}

000241d8 <bt_smp_auth_passkey_entry>:
{
   241d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   241da:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
   241dc:	f7f6 fa48 	bl	1a670 <smp_chan_get>
	if (!smp) {
   241e0:	4604      	mov	r4, r0
   241e2:	b918      	cbnz	r0, 241ec <bt_smp_auth_passkey_entry+0x14>
		return -EINVAL;
   241e4:	f06f 0015 	mvn.w	r0, #21
}
   241e8:	b003      	add	sp, #12
   241ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   241ec:	1d07      	adds	r7, r0, #4
   241ee:	210a      	movs	r1, #10
   241f0:	4638      	mov	r0, r7
   241f2:	f7ff fde1 	bl	23db8 <atomic_test_and_clear_bit>
   241f6:	2800      	cmp	r0, #0
   241f8:	d0f4      	beq.n	241e4 <bt_smp_auth_passkey_entry+0xc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   241fa:	2105      	movs	r1, #5
   241fc:	4638      	mov	r0, r7
   241fe:	f7ff fc6c 	bl	23ada <atomic_test_bit>
   24202:	b960      	cbnz	r0, 2421e <bt_smp_auth_passkey_entry+0x46>
	memcpy(smp->tk, &passkey, sizeof(passkey));
   24204:	2204      	movs	r2, #4
   24206:	eb0d 0102 	add.w	r1, sp, r2
   2420a:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2420e:	9601      	str	r6, [sp, #4]
   24210:	f7fd ffea 	bl	221e8 <memcpy>
	legacy_user_tk_entry(smp);
   24214:	4620      	mov	r0, r4
   24216:	f7ff ffc7 	bl	241a8 <legacy_user_tk_entry>
			return 0;
   2421a:	2000      	movs	r0, #0
   2421c:	e7e4      	b.n	241e8 <bt_smp_auth_passkey_entry+0x10>
	smp->passkey = sys_cpu_to_le32(passkey);
   2421e:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
	    atomic_test_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   24222:	2100      	movs	r1, #0
   24224:	4638      	mov	r0, r7
   24226:	f7ff fc58 	bl	23ada <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2422a:	2800      	cmp	r0, #0
   2422c:	d0f5      	beq.n	2421a <bt_smp_auth_passkey_entry+0x42>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2422e:	2104      	movs	r1, #4
   24230:	4620      	mov	r0, r4
   24232:	f7ff fc3e 	bl	23ab2 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   24236:	f7f6 fd53 	bl	1ace0 <smp_send_pairing_confirm>
		if (err) {
   2423a:	2800      	cmp	r0, #0
   2423c:	d0ed      	beq.n	2421a <bt_smp_auth_passkey_entry+0x42>
			smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   2423e:	2101      	movs	r1, #1
   24240:	4620      	mov	r0, r4
   24242:	f7ff ff79 	bl	24138 <smp_error>
   24246:	e7e8      	b.n	2421a <bt_smp_auth_passkey_entry+0x42>

00024248 <bt_smp_auth_passkey_confirm>:
{
   24248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	smp = smp_chan_get(conn);
   2424a:	f7f6 fa11 	bl	1a670 <smp_chan_get>
	if (!smp) {
   2424e:	4605      	mov	r5, r0
   24250:	b910      	cbnz	r0, 24258 <bt_smp_auth_passkey_confirm+0x10>
		return -EINVAL;
   24252:	f06f 0015 	mvn.w	r0, #21
}
   24256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   24258:	1d06      	adds	r6, r0, #4
   2425a:	210a      	movs	r1, #10
   2425c:	4630      	mov	r0, r6
   2425e:	f7ff fdab 	bl	23db8 <atomic_test_and_clear_bit>
   24262:	2800      	cmp	r0, #0
   24264:	d0f5      	beq.n	24252 <bt_smp_auth_passkey_confirm+0xa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   24266:	2107      	movs	r1, #7
   24268:	4630      	mov	r0, r6
   2426a:	f7ff fc36 	bl	23ada <atomic_test_bit>
   2426e:	b128      	cbz	r0, 2427c <bt_smp_auth_passkey_confirm+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24270:	2109      	movs	r1, #9
   24272:	4630      	mov	r0, r6
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24274:	f7ff fc1d 	bl	23ab2 <atomic_set_bit>
	return 0;
   24278:	2000      	movs	r0, #0
   2427a:	e7ec      	b.n	24256 <bt_smp_auth_passkey_confirm+0xe>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2427c:	2110      	movs	r1, #16
   2427e:	4630      	mov	r0, r6
   24280:	f7ff fc2b 	bl	23ada <atomic_test_bit>
   24284:	4604      	mov	r4, r0
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24286:	2109      	movs	r1, #9
   24288:	4630      	mov	r0, r6
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2428a:	2c00      	cmp	r4, #0
   2428c:	d1f2      	bne.n	24274 <bt_smp_auth_passkey_confirm+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2428e:	f7ff fc24 	bl	23ada <atomic_test_bit>
   24292:	2800      	cmp	r0, #0
   24294:	d0f0      	beq.n	24278 <bt_smp_auth_passkey_confirm+0x30>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   24296:	4628      	mov	r0, r5
   24298:	f7f6 fc06 	bl	1aaa8 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   2429c:	4601      	mov	r1, r0
   2429e:	2800      	cmp	r0, #0
   242a0:	d0ea      	beq.n	24278 <bt_smp_auth_passkey_confirm+0x30>
			smp_error(smp, err);
   242a2:	4628      	mov	r0, r5
   242a4:	f7ff ff48 	bl	24138 <smp_error>
	return 0;
   242a8:	4620      	mov	r0, r4
   242aa:	e7d4      	b.n	24256 <bt_smp_auth_passkey_confirm+0xe>

000242ac <bt_smp_dhkey_ready>:
{
   242ac:	b570      	push	{r4, r5, r6, lr}
   242ae:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   242b0:	2008      	movs	r0, #8
   242b2:	f7f6 f915 	bl	1a4e0 <smp_find>
	if (smp) {
   242b6:	4604      	mov	r4, r0
   242b8:	b1b8      	cbz	r0, 242ea <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   242ba:	1d05      	adds	r5, r0, #4
   242bc:	2108      	movs	r1, #8
   242be:	4628      	mov	r0, r5
   242c0:	f7ff fc14 	bl	23aec <atomic_clear_bit>
	if (!dhkey) {
   242c4:	b38e      	cbz	r6, 2432a <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   242c6:	2107      	movs	r1, #7
   242c8:	f7ff fc10 	bl	23aec <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   242cc:	4631      	mov	r1, r6
   242ce:	2220      	movs	r2, #32
   242d0:	f104 0097 	add.w	r0, r4, #151	; 0x97
   242d4:	f7fd ff88 	bl	221e8 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   242d8:	210a      	movs	r1, #10
   242da:	4628      	mov	r0, r5
   242dc:	f7ff fbfd 	bl	23ada <atomic_test_bit>
   242e0:	b168      	cbz	r0, 242fe <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   242e2:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   242e4:	4628      	mov	r0, r5
   242e6:	f7ff fbe4 	bl	23ab2 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   242ea:	2007      	movs	r0, #7
   242ec:	f7f6 f8f8 	bl	1a4e0 <smp_find>
		if (smp) {
   242f0:	4604      	mov	r4, r0
   242f2:	b118      	cbz	r0, 242fc <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   242f4:	f7f6 f908 	bl	1a508 <smp_dhkey_generate>
			if (err) {
   242f8:	4601      	mov	r1, r0
   242fa:	b990      	cbnz	r0, 24322 <bt_smp_dhkey_ready+0x76>
}
   242fc:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   242fe:	2110      	movs	r1, #16
   24300:	4628      	mov	r0, r5
   24302:	f7ff fbea 	bl	23ada <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24306:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   24308:	2800      	cmp	r0, #0
   2430a:	d1eb      	bne.n	242e4 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2430c:	4628      	mov	r0, r5
   2430e:	f7ff fbe4 	bl	23ada <atomic_test_bit>
   24312:	2800      	cmp	r0, #0
   24314:	d0e9      	beq.n	242ea <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   24316:	4620      	mov	r0, r4
   24318:	f7f6 fbc6 	bl	1aaa8 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   2431c:	4601      	mov	r1, r0
   2431e:	2800      	cmp	r0, #0
   24320:	d0e3      	beq.n	242ea <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   24322:	4620      	mov	r0, r4
   24324:	f7ff ff08 	bl	24138 <smp_error>
   24328:	e7df      	b.n	242ea <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2432a:	210b      	movs	r1, #11
   2432c:	e7f9      	b.n	24322 <bt_smp_dhkey_ready+0x76>

0002432e <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   2432e:	b510      	push	{r4, lr}
   24330:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   24332:	2106      	movs	r1, #6
   24334:	f7fe fd3f 	bl	22db6 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   24338:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   2433c:	ea23 0104 	bic.w	r1, r3, r4
   24340:	f800 1c08 	strb.w	r1, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   24344:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   24348:	b921      	cbnz	r1, 24354 <smp_check_complete.part.0+0x26>
}
   2434a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   2434e:	38f0      	subs	r0, #240	; 0xf0
   24350:	f7f7 b86a 	b.w	1b428 <smp_pairing_complete>
}
   24354:	bd10      	pop	{r4, pc}

00024356 <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   24356:	7881      	ldrb	r1, [r0, #2]
   24358:	2901      	cmp	r1, #1
   2435a:	d101      	bne.n	24360 <smp_ident_sent+0xa>
   2435c:	f7ff bfe7 	b.w	2432e <smp_check_complete.part.0>
}
   24360:	4770      	bx	lr

00024362 <smp_id_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   24362:	7883      	ldrb	r3, [r0, #2]
   24364:	2b01      	cmp	r3, #1
   24366:	d102      	bne.n	2436e <smp_id_sent+0xc>
   24368:	2102      	movs	r1, #2
   2436a:	f7ff bfe0 	b.w	2432e <smp_check_complete.part.0>
}
   2436e:	4770      	bx	lr

00024370 <bt_smp_disconnected>:
{
   24370:	b570      	push	{r4, r5, r6, lr}
   24372:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   24374:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   24378:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2437c:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2437e:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   24382:	f000 fd01 	bl	24d88 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   24386:	2103      	movs	r1, #3
   24388:	4620      	mov	r0, r4
   2438a:	f7ff fba6 	bl	23ada <atomic_test_bit>
   2438e:	b1a0      	cbz	r0, 243ba <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   24390:	2108      	movs	r1, #8
   24392:	4630      	mov	r0, r6
   24394:	f7f7 f848 	bl	1b428 <smp_pairing_complete>
	if (keys) {
   24398:	b13d      	cbz	r5, 243aa <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2439a:	89eb      	ldrh	r3, [r5, #14]
   2439c:	b113      	cbz	r3, 243a4 <bt_smp_disconnected+0x34>
   2439e:	7b6b      	ldrb	r3, [r5, #13]
   243a0:	079b      	lsls	r3, r3, #30
   243a2:	d502      	bpl.n	243aa <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   243a4:	4628      	mov	r0, r5
   243a6:	f7f7 fd71 	bl	1be8c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   243aa:	4630      	mov	r0, r6
   243ac:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   243b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   243b4:	2100      	movs	r1, #0
   243b6:	f7fd bf42 	b.w	2223e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   243ba:	2101      	movs	r1, #1
   243bc:	4620      	mov	r0, r4
   243be:	f7ff fb8c 	bl	23ada <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   243c2:	2800      	cmp	r0, #0
   243c4:	d1e4      	bne.n	24390 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   243c6:	210f      	movs	r1, #15
   243c8:	4620      	mov	r0, r4
   243ca:	f7ff fb86 	bl	23ada <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   243ce:	2800      	cmp	r0, #0
   243d0:	d1de      	bne.n	24390 <bt_smp_disconnected+0x20>
   243d2:	e7e1      	b.n	24398 <bt_smp_disconnected+0x28>

000243d4 <id_add>:
	bt_id_add(keys);
   243d4:	f7f1 bef8 	b.w	161c8 <bt_id_add>

000243d8 <bt_keys_get_type>:
{
   243d8:	b570      	push	{r4, r5, r6, lr}
   243da:	4604      	mov	r4, r0
   243dc:	460d      	mov	r5, r1
   243de:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   243e0:	f7f7 fcf4 	bl	1bdcc <bt_keys_find>
	if (keys) {
   243e4:	b938      	cbnz	r0, 243f6 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   243e6:	4631      	mov	r1, r6
   243e8:	4628      	mov	r0, r5
   243ea:	f7f7 fc99 	bl	1bd20 <bt_keys_get_addr>
	if (!keys) {
   243ee:	b110      	cbz	r0, 243f6 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   243f0:	89c3      	ldrh	r3, [r0, #14]
   243f2:	431c      	orrs	r4, r3
   243f4:	81c4      	strh	r4, [r0, #14]
}
   243f6:	bd70      	pop	{r4, r5, r6, pc}

000243f8 <bt_keys_add_type>:
	keys->keys |= type;
   243f8:	89c3      	ldrh	r3, [r0, #14]
   243fa:	4319      	orrs	r1, r3
   243fc:	81c1      	strh	r1, [r0, #14]
}
   243fe:	4770      	bx	lr

00024400 <fixed_data_unref>:
}
   24400:	4770      	bx	lr

00024402 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   24402:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   24404:	6849      	ldr	r1, [r1, #4]
   24406:	6809      	ldr	r1, [r1, #0]
   24408:	f7f7 be6c 	b.w	1c0e4 <net_buf_alloc_len>

0002440c <net_buf_get>:
{
   2440c:	b570      	push	{r4, r5, r6, lr}
   2440e:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   24410:	f7fa f8d6 	bl	1e5c0 <z_impl_k_queue_get>
	if (!buf) {
   24414:	4605      	mov	r5, r0
   24416:	b128      	cbz	r0, 24424 <net_buf_get+0x18>
   24418:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2441a:	7963      	ldrb	r3, [r4, #5]
   2441c:	f013 0301 	ands.w	r3, r3, #1
   24420:	d102      	bne.n	24428 <net_buf_get+0x1c>
	frag->frags = NULL;
   24422:	6023      	str	r3, [r4, #0]
}
   24424:	4628      	mov	r0, r5
   24426:	bd70      	pop	{r4, r5, r6, pc}
   24428:	2300      	movs	r3, #0
   2442a:	2200      	movs	r2, #0
   2442c:	4630      	mov	r0, r6
   2442e:	f7fa f8c7 	bl	1e5c0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   24432:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   24434:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   24436:	f023 0301 	bic.w	r3, r3, #1
   2443a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2443c:	4604      	mov	r4, r0
   2443e:	e7ec      	b.n	2441a <net_buf_get+0xe>

00024440 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   24440:	6883      	ldr	r3, [r0, #8]
   24442:	440b      	add	r3, r1
   24444:	6003      	str	r3, [r0, #0]
}
   24446:	4770      	bx	lr

00024448 <net_buf_put>:
{
   24448:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2444a:	460a      	mov	r2, r1
   2444c:	6814      	ldr	r4, [r2, #0]
   2444e:	b914      	cbnz	r4, 24456 <net_buf_put+0xe>
}
   24450:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   24452:	f000 bbb4 	b.w	24bbe <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   24456:	7953      	ldrb	r3, [r2, #5]
   24458:	f043 0301 	orr.w	r3, r3, #1
   2445c:	7153      	strb	r3, [r2, #5]
   2445e:	4622      	mov	r2, r4
   24460:	e7f4      	b.n	2444c <net_buf_put+0x4>

00024462 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   24462:	7902      	ldrb	r2, [r0, #4]
   24464:	3201      	adds	r2, #1
   24466:	7102      	strb	r2, [r0, #4]
	return buf;
}
   24468:	4770      	bx	lr

0002446a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2446a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2446c:	4618      	mov	r0, r3
   2446e:	681b      	ldr	r3, [r3, #0]
   24470:	2b00      	cmp	r3, #0
   24472:	d1fb      	bne.n	2446c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   24474:	4770      	bx	lr

00024476 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   24476:	6802      	ldr	r2, [r0, #0]
{
   24478:	b510      	push	{r4, lr}
	if (parent->frags) {
   2447a:	b12a      	cbz	r2, 24488 <net_buf_frag_insert+0x12>
   2447c:	460b      	mov	r3, r1
	while (buf->frags) {
   2447e:	461c      	mov	r4, r3
   24480:	681b      	ldr	r3, [r3, #0]
   24482:	2b00      	cmp	r3, #0
   24484:	d1fb      	bne.n	2447e <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   24486:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   24488:	6001      	str	r1, [r0, #0]
}
   2448a:	bd10      	pop	{r4, pc}

0002448c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2448c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2448e:	4604      	mov	r4, r0
   24490:	b920      	cbnz	r0, 2449c <net_buf_frag_add+0x10>
	buf->ref++;
   24492:	790b      	ldrb	r3, [r1, #4]
   24494:	3301      	adds	r3, #1
   24496:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   24498:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2449a:	bd10      	pop	{r4, pc}
   2449c:	4603      	mov	r3, r0
	while (buf->frags) {
   2449e:	4618      	mov	r0, r3
   244a0:	681b      	ldr	r3, [r3, #0]
   244a2:	2b00      	cmp	r3, #0
   244a4:	d1fb      	bne.n	2449e <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   244a6:	f7ff ffe6 	bl	24476 <net_buf_frag_insert>
   244aa:	4620      	mov	r0, r4
   244ac:	e7f5      	b.n	2449a <net_buf_frag_add+0xe>

000244ae <net_buf_simple_add>:
	return buf->data + buf->len;
   244ae:	8883      	ldrh	r3, [r0, #4]
   244b0:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   244b2:	4419      	add	r1, r3
   244b4:	8081      	strh	r1, [r0, #4]
	return tail;
}
   244b6:	18d0      	adds	r0, r2, r3
   244b8:	4770      	bx	lr

000244ba <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   244ba:	b430      	push	{r4, r5}
   244bc:	8884      	ldrh	r4, [r0, #4]
   244be:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   244c0:	18a3      	adds	r3, r4, r2
   244c2:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   244c4:	1928      	adds	r0, r5, r4
}
   244c6:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   244c8:	f7fd be8e 	b.w	221e8 <memcpy>

000244cc <net_buf_simple_add_u8>:
   244cc:	8883      	ldrh	r3, [r0, #4]
   244ce:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   244d0:	b510      	push	{r4, lr}
	buf->len += len;
   244d2:	1c5c      	adds	r4, r3, #1
   244d4:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   244d6:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   244d8:	18d0      	adds	r0, r2, r3
   244da:	bd10      	pop	{r4, pc}

000244dc <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   244dc:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   244de:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   244e0:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   244e2:	1a40      	subs	r0, r0, r1
	buf->len += len;
   244e4:	4411      	add	r1, r2
	buf->data -= len;
   244e6:	6018      	str	r0, [r3, #0]
	buf->len += len;
   244e8:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   244ea:	4770      	bx	lr

000244ec <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   244ec:	8882      	ldrh	r2, [r0, #4]
   244ee:	1a52      	subs	r2, r2, r1
{
   244f0:	4603      	mov	r3, r0
	buf->len -= len;
   244f2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   244f4:	6800      	ldr	r0, [r0, #0]
   244f6:	4408      	add	r0, r1
   244f8:	6018      	str	r0, [r3, #0]
}
   244fa:	4770      	bx	lr

000244fc <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   244fc:	4603      	mov	r3, r0
	void *data = buf->data;
   244fe:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   24500:	889a      	ldrh	r2, [r3, #4]
   24502:	1a52      	subs	r2, r2, r1
	buf->data += len;
   24504:	4401      	add	r1, r0
	buf->len -= len;
   24506:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   24508:	6019      	str	r1, [r3, #0]

	return data;
}
   2450a:	4770      	bx	lr

0002450c <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2450c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2450e:	6803      	ldr	r3, [r0, #0]
   24510:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24512:	2102      	movs	r1, #2
   24514:	f7ff ffea 	bl	244ec <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   24518:	4620      	mov	r0, r4
   2451a:	bd10      	pop	{r4, pc}

0002451c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2451c:	6802      	ldr	r2, [r0, #0]
   2451e:	6880      	ldr	r0, [r0, #8]
}
   24520:	1a10      	subs	r0, r2, r0
   24522:	4770      	bx	lr

00024524 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   24524:	8883      	ldrh	r3, [r0, #4]
   24526:	88c2      	ldrh	r2, [r0, #6]
   24528:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2452a:	6803      	ldr	r3, [r0, #0]
   2452c:	6880      	ldr	r0, [r0, #8]
   2452e:	1a18      	subs	r0, r3, r0
}
   24530:	1a10      	subs	r0, r2, r0
   24532:	4770      	bx	lr

00024534 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   24534:	f000 001f 	and.w	r0, r0, #31
   24538:	0080      	lsls	r0, r0, #2
   2453a:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2453e:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   24542:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   24546:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2454a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   2454e:	4770      	bx	lr

00024550 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24550:	6843      	ldr	r3, [r0, #4]
   24552:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   24554:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   24558:	600b      	str	r3, [r1, #0]
}
   2455a:	2000      	movs	r0, #0
   2455c:	4770      	bx	lr

0002455e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2455e:	6843      	ldr	r3, [r0, #4]
   24560:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   24562:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   24566:	4042      	eors	r2, r0
   24568:	400a      	ands	r2, r1
   2456a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2456c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   24570:	2000      	movs	r0, #0
   24572:	4770      	bx	lr

00024574 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24574:	6843      	ldr	r3, [r0, #4]
   24576:	685b      	ldr	r3, [r3, #4]
}
   24578:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2457a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2457e:	4770      	bx	lr

00024580 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24580:	6843      	ldr	r3, [r0, #4]
   24582:	685b      	ldr	r3, [r3, #4]
}
   24584:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   24586:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2458a:	4770      	bx	lr

0002458c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2458c:	6843      	ldr	r3, [r0, #4]
   2458e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   24590:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   24594:	404b      	eors	r3, r1
    p_reg->OUT = value;
   24596:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2459a:	2000      	movs	r0, #0
   2459c:	4770      	bx	lr

0002459e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2459e:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   245a0:	6858      	ldr	r0, [r3, #4]
{
   245a2:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   245a4:	b158      	cbz	r0, 245be <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   245a6:	2400      	movs	r4, #0
   245a8:	4281      	cmp	r1, r0
   245aa:	d113      	bne.n	245d4 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   245ac:	6808      	ldr	r0, [r1, #0]
   245ae:	b95c      	cbnz	r4, 245c8 <gpio_nrfx_manage_callback+0x2a>
   245b0:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   245b2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   245b4:	42a1      	cmp	r1, r4
   245b6:	d100      	bne.n	245ba <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   245b8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   245ba:	2000      	movs	r0, #0
   245bc:	6008      	str	r0, [r1, #0]
	if (set) {
   245be:	b972      	cbnz	r2, 245de <gpio_nrfx_manage_callback+0x40>
	return 0;
   245c0:	2000      	movs	r0, #0
}
   245c2:	bd30      	pop	{r4, r5, pc}
   245c4:	4628      	mov	r0, r5
   245c6:	e7ef      	b.n	245a8 <gpio_nrfx_manage_callback+0xa>
   245c8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   245ca:	6898      	ldr	r0, [r3, #8]
   245cc:	4281      	cmp	r1, r0
	list->tail = node;
   245ce:	bf08      	it	eq
   245d0:	609c      	streq	r4, [r3, #8]
}
   245d2:	e7f2      	b.n	245ba <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   245d4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   245d6:	4604      	mov	r4, r0
   245d8:	2d00      	cmp	r5, #0
   245da:	d1f3      	bne.n	245c4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   245dc:	b13a      	cbz	r2, 245ee <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   245de:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   245e0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   245e2:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   245e4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   245e6:	2800      	cmp	r0, #0
   245e8:	d1ea      	bne.n	245c0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   245ea:	6099      	str	r1, [r3, #8]
}
   245ec:	e7e9      	b.n	245c2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   245ee:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   245f2:	e7e6      	b.n	245c2 <gpio_nrfx_manage_callback+0x24>

000245f4 <is_regular_addr_valid>:
{
   245f4:	b538      	push	{r3, r4, r5, lr}
   245f6:	4604      	mov	r4, r0
   245f8:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   245fa:	f000 f912 	bl	24822 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   245fe:	4284      	cmp	r4, r0
   24600:	d209      	bcs.n	24616 <is_regular_addr_valid+0x22>
   24602:	2c00      	cmp	r4, #0
   24604:	db07      	blt.n	24616 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   24606:	42a8      	cmp	r0, r5
   24608:	d305      	bcc.n	24616 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2460a:	442c      	add	r4, r5
	    len > flash_size ||
   2460c:	4284      	cmp	r4, r0
   2460e:	bf8c      	ite	hi
   24610:	2000      	movhi	r0, #0
   24612:	2001      	movls	r0, #1
}
   24614:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   24616:	2000      	movs	r0, #0
   24618:	e7fc      	b.n	24614 <is_regular_addr_valid+0x20>

0002461a <erase_op>:
{
   2461a:	b570      	push	{r4, r5, r6, lr}
   2461c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2461e:	f000 f906 	bl	2482e <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   24622:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24624:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   24626:	b10b      	cbz	r3, 2462c <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   24628:	f000 f8f9 	bl	2481e <nrf_flash_sync_get_timestamp_begin>
{
   2462c:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2462e:	6860      	ldr	r0, [r4, #4]
   24630:	f7f9 fb88 	bl	1dd44 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   24634:	68a3      	ldr	r3, [r4, #8]
   24636:	1b5b      	subs	r3, r3, r5
   24638:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2463a:	6863      	ldr	r3, [r4, #4]
   2463c:	442b      	add	r3, r5
   2463e:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   24640:	7b23      	ldrb	r3, [r4, #12]
		i++;
   24642:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   24644:	b93b      	cbnz	r3, 24656 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   24646:	68a3      	ldr	r3, [r4, #8]
   24648:	2b00      	cmp	r3, #0
   2464a:	d1f0      	bne.n	2462e <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2464c:	68a0      	ldr	r0, [r4, #8]
}
   2464e:	3800      	subs	r0, #0
   24650:	bf18      	it	ne
   24652:	2001      	movne	r0, #1
   24654:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   24656:	4630      	mov	r0, r6
   24658:	f7f9 f9dc 	bl	1da14 <nrf_flash_sync_check_time_limit>
   2465c:	2800      	cmp	r0, #0
   2465e:	d0f2      	beq.n	24646 <erase_op+0x2c>
   24660:	e7f4      	b.n	2464c <erase_op+0x32>

00024662 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   24662:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24666:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   24668:	6883      	ldr	r3, [r0, #8]
{
   2466a:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   2466c:	695b      	ldr	r3, [r3, #20]
   2466e:	4669      	mov	r1, sp
{
   24670:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   24672:	aa01      	add	r2, sp, #4
   24674:	4798      	blx	r3

	while (layout_size--) {
   24676:	e9dd 1000 	ldrd	r1, r0, [sp]
   2467a:	2300      	movs	r3, #0
   2467c:	f100 38ff 	add.w	r8, r0, #4294967295
	off_t end = 0;
   24680:	461d      	mov	r5, r3
	off_t group_offs = 0;
   24682:	469e      	mov	lr, r3
	size_t page_count = 0;
   24684:	469c      	mov	ip, r3
	while (layout_size--) {
   24686:	f1b8 3fff 	cmp.w	r8, #4294967295
   2468a:	d102      	bne.n	24692 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   2468c:	f06f 0015 	mvn.w	r0, #21
   24690:	e018      	b.n	246c4 <flash_get_page_info+0x62>
		if (use_addr) {
   24692:	680a      	ldr	r2, [r1, #0]
   24694:	b1cf      	cbz	r7, 246ca <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   24696:	6848      	ldr	r0, [r1, #4]
   24698:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   2469c:	42a5      	cmp	r5, r4
   2469e:	f108 38ff 	add.w	r8, r8, #4294967295
   246a2:	dd17      	ble.n	246d4 <flash_get_page_info+0x72>
   246a4:	b103      	cbz	r3, 246a8 <flash_get_page_info+0x46>
   246a6:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   246a8:	9b00      	ldr	r3, [sp, #0]
   246aa:	685b      	ldr	r3, [r3, #4]
   246ac:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   246ae:	b177      	cbz	r7, 246ce <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   246b0:	eba4 040e 	sub.w	r4, r4, lr
   246b4:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   246b8:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   246bc:	4464      	add	r4, ip
			info->start_offset = group_offs +
   246be:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   246c0:	60b4      	str	r4, [r6, #8]
			return 0;
   246c2:	2000      	movs	r0, #0
}
   246c4:	b002      	add	sp, #8
   246c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   246ca:	4415      	add	r5, r2
   246cc:	e7e6      	b.n	2469c <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   246ce:	eba4 040c 	sub.w	r4, r4, ip
   246d2:	e7f1      	b.n	246b8 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   246d4:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   246d6:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   246d8:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   246dc:	3108      	adds	r1, #8
   246de:	2301      	movs	r3, #1
   246e0:	e7d1      	b.n	24686 <flash_get_page_info+0x24>

000246e2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   246e2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   246e4:	2201      	movs	r2, #1
   246e6:	f7ff bfbc 	b.w	24662 <flash_get_page_info>

000246ea <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   246ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   246ee:	6883      	ldr	r3, [r0, #8]
{
   246f0:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   246f2:	695b      	ldr	r3, [r3, #20]
{
   246f4:	4688      	mov	r8, r1
   246f6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   246f8:	a901      	add	r1, sp, #4
   246fa:	aa02      	add	r2, sp, #8
   246fc:	4798      	blx	r3
	off_t off = 0;
   246fe:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   24700:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   24702:	4625      	mov	r5, r4
   24704:	9b02      	ldr	r3, [sp, #8]
   24706:	42ab      	cmp	r3, r5
   24708:	d802      	bhi.n	24710 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2470a:	b006      	add	sp, #24
   2470c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   24710:	9f01      	ldr	r7, [sp, #4]
   24712:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   24716:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   24718:	687b      	ldr	r3, [r7, #4]
   2471a:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2471c:	683a      	ldr	r2, [r7, #0]
   2471e:	42b2      	cmp	r2, r6
   24720:	eb0a 0306 	add.w	r3, sl, r6
   24724:	d802      	bhi.n	2472c <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   24726:	3501      	adds	r5, #1
   24728:	469a      	mov	sl, r3
   2472a:	e7eb      	b.n	24704 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2472c:	4649      	mov	r1, r9
   2472e:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   24730:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   24732:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   24734:	47c0      	blx	r8
   24736:	2800      	cmp	r0, #0
   24738:	d0e7      	beq.n	2470a <flash_page_foreach+0x20>
			off += page_info.size;
   2473a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2473c:	3601      	adds	r6, #1
			off += page_info.size;
   2473e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   24740:	e7ec      	b.n	2471c <flash_page_foreach+0x32>

00024742 <rand_prio_high_vector_get>:
   24742:	f7f8 baeb 	b.w	1cd1c <rand_prio_low_vector_get>

00024746 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   24746:	b5f0      	push	{r4, r5, r6, r7, lr}
   24748:	b08d      	sub	sp, #52	; 0x34
   2474a:	4615      	mov	r5, r2
   2474c:	466a      	mov	r2, sp
   2474e:	f100 0310 	add.w	r3, r0, #16
   24752:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   24754:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   24758:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   2475c:	4298      	cmp	r0, r3
   2475e:	d1f9      	bne.n	24754 <bt_encrypt_le+0xe>
   24760:	aa04      	add	r2, sp, #16
   24762:	f101 0310 	add.w	r3, r1, #16
   24766:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   24768:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2476c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   24770:	428b      	cmp	r3, r1
   24772:	d1f9      	bne.n	24768 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   24774:	f04f 30ff 	mov.w	r0, #4294967295
   24778:	f04f 31ff 	mov.w	r1, #4294967295
   2477c:	f7f8 fa70 	bl	1cc60 <multithreading_lock_acquire>

	if (!errcode) {
   24780:	4604      	mov	r4, r0
   24782:	b990      	cbnz	r0, 247aa <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   24784:	aa08      	add	r2, sp, #32
   24786:	4639      	mov	r1, r7
   24788:	4630      	mov	r0, r6
   2478a:	f7e8 fa28 	bl	cbde <sdc_soc_ecb_block_encrypt>
   2478e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   24790:	f7f8 fa6e 	bl	1cc70 <multithreading_lock_release>
	}

	if (!errcode) {
   24794:	b94c      	cbnz	r4, 247aa <bt_encrypt_le+0x64>
   24796:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   24798:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   2479c:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   2479e:	f812 1901 	ldrb.w	r1, [r2], #-1
   247a2:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   247a6:	429d      	cmp	r5, r3
   247a8:	d1f9      	bne.n	2479e <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   247aa:	4620      	mov	r0, r4
   247ac:	b00d      	add	sp, #52	; 0x34
   247ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000247b0 <mpsl_fem_init>:
#if IS_ENABLED(CONFIG_MPSL_FEM)
	return mpsl_fem_configure();
#else
	return 0;
#endif
}
   247b0:	2000      	movs	r0, #0
   247b2:	4770      	bx	lr

000247b4 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   247b4:	4668      	mov	r0, sp
   247b6:	f020 0107 	bic.w	r1, r0, #7
   247ba:	468d      	mov	sp, r1
   247bc:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   247be:	f7de fc77 	bl	30b0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   247c2:	f7ee ff4d 	bl	13660 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   247c6:	f7ef fa91 	bl	13cec <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   247ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   247ce:	4685      	mov	sp, r0
   247d0:	4770      	bx	lr

000247d2 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   247d2:	4668      	mov	r0, sp
   247d4:	f020 0107 	bic.w	r1, r0, #7
   247d8:	468d      	mov	sp, r1
   247da:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   247dc:	f7de fbea 	bl	2fb4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   247e0:	f7ee ff3e 	bl	13660 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   247e4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   247e8:	4685      	mov	sp, r0
   247ea:	4770      	bx	lr

000247ec <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   247ec:	4668      	mov	r0, sp
   247ee:	f020 0107 	bic.w	r1, r0, #7
   247f2:	468d      	mov	sp, r1
   247f4:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   247f6:	f7e7 ff43 	bl	c680 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   247fa:	f7ee ff31 	bl	13660 <_arch_isr_direct_pm>
   247fe:	f7ef fa75 	bl	13cec <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24802:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24806:	4685      	mov	sp, r0
   24808:	4770      	bx	lr

0002480a <nrfx_clock_stop>:
	switch (domain) {
   2480a:	2801      	cmp	r0, #1
   2480c:	d101      	bne.n	24812 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   2480e:	f7df ba8b 	b.w	3d28 <mpsl_clock_hfclk_release>
}
   24812:	4770      	bx	lr

00024814 <nrfx_clock_enable>:
}
   24814:	4770      	bx	lr

00024816 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   24816:	f7df b8a5 	b.w	3964 <MPSL_IRQ_CLOCK_Handler>

0002481a <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2481a:	f7df bc67 	b.w	40ec <mpsl_is_initialized>

0002481e <nrf_flash_sync_get_timestamp_begin>:
}
   2481e:	4770      	bx	lr

00024820 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   24820:	4700      	bx	r0

00024822 <nrfx_nvmc_flash_size_get>:
   24822:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24826:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   24828:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2482a:	4350      	muls	r0, r2
   2482c:	4770      	bx	lr

0002482e <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2482e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24832:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   24834:	4770      	bx	lr

00024836 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   24836:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2483a:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2483c:	4770      	bx	lr

0002483e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2483e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   24840:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   24842:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   24844:	bf9d      	ittte	ls
   24846:	6882      	ldrls	r2, [r0, #8]
   24848:	18d2      	addls	r2, r2, r3
   2484a:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
   2484e:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   24852:	bf94      	ite	ls
   24854:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   24856:	1a58      	subhi	r0, r3, r1
}
   24858:	4770      	bx	lr

0002485a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2485a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   2485e:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   24862:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   24864:	eba9 0804 	sub.w	r8, r9, r4
  if (Rem > NumBytes) {
   24868:	6840      	ldr	r0, [r0, #4]
   2486a:	4590      	cmp	r8, r2
   2486c:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2486e:	460f      	mov	r7, r1
   24870:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   24872:	d904      	bls.n	2487e <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   24874:	f7fd fcb8 	bl	221e8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   24878:	60ec      	str	r4, [r5, #12]
}
   2487a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   2487e:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   24880:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   24884:	f7fd fcb0 	bl	221e8 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   24888:	6868      	ldr	r0, [r5, #4]
   2488a:	4622      	mov	r2, r4
   2488c:	eb07 0108 	add.w	r1, r7, r8
   24890:	e7f0      	b.n	24874 <_WriteNoCheck+0x1a>

00024892 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   24892:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   24896:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   24898:	4606      	mov	r6, r0
   2489a:	4689      	mov	r9, r1
   2489c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2489e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   248a2:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   248a4:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   248a6:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   248a8:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   248aa:	bf28      	it	cs
   248ac:	18e4      	addcs	r4, r4, r3
   248ae:	3c01      	subs	r4, #1
   248b0:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   248b2:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   248b4:	42bc      	cmp	r4, r7
   248b6:	bf28      	it	cs
   248b8:	463c      	movcs	r4, r7
   248ba:	4294      	cmp	r4, r2
   248bc:	bf28      	it	cs
   248be:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   248c0:	4649      	mov	r1, r9
   248c2:	4428      	add	r0, r5
   248c4:	4622      	mov	r2, r4
   248c6:	f7fd fc8f 	bl	221e8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   248ca:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   248cc:	4425      	add	r5, r4
      WrOff = 0u;
   248ce:	42ab      	cmp	r3, r5
   248d0:	bf08      	it	eq
   248d2:	2500      	moveq	r5, #0
  } while (NumBytes);
   248d4:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   248d6:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   248d8:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   248da:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   248dc:	d1e1      	bne.n	248a2 <_WriteBlocking+0x10>
}
   248de:	4640      	mov	r0, r8
   248e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000248e4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   248e4:	f7f9 ba60 	b.w	1dda8 <_DoInit>

000248e8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   248e8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   248ea:	f7ff fffb 	bl	248e4 <SEGGER_RTT_Init>

	return 0;
}
   248ee:	2000      	movs	r0, #0
   248f0:	bd08      	pop	{r3, pc}

000248f2 <z_device_state_init>:
}
   248f2:	4770      	bx	lr

000248f4 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   248f4:	68c3      	ldr	r3, [r0, #12]
   248f6:	8818      	ldrh	r0, [r3, #0]
   248f8:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   248fc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   24900:	4258      	negs	r0, r3
   24902:	4158      	adcs	r0, r3
   24904:	4770      	bx	lr

00024906 <k_heap_init>:
{
   24906:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   24908:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2490c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   24910:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   24912:	f7fb bb02 	b.w	1ff1a <sys_heap_init>

00024916 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   24916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2491a:	b087      	sub	sp, #28
   2491c:	4604      	mov	r4, r0
   2491e:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24920:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   24924:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24926:	f000 fbd3 	bl	250d0 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2492a:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2492e:	4605      	mov	r5, r0
   24930:	4688      	mov	r8, r1
	__asm__ volatile(
   24932:	f04f 0340 	mov.w	r3, #64	; 0x40
   24936:	f3ef 8b11 	mrs	fp, BASEPRI
   2493a:	f383 8811 	msr	BASEPRI, r3
   2493e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24942:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24946:	463a      	mov	r2, r7
   24948:	4631      	mov	r1, r6
   2494a:	4620      	mov	r0, r4
   2494c:	f7fb fa6a 	bl	1fe24 <sys_heap_aligned_alloc>
   24950:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   24952:	f7fa fd87 	bl	1f464 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24956:	9b05      	ldr	r3, [sp, #20]
   24958:	b13b      	cbz	r3, 2496a <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2495a:	f38b 8811 	msr	BASEPRI, fp
   2495e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24962:	4618      	mov	r0, r3
   24964:	b007      	add	sp, #28
   24966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2496a:	1a2a      	subs	r2, r5, r0
   2496c:	9202      	str	r2, [sp, #8]
   2496e:	eb68 0201 	sbc.w	r2, r8, r1
   24972:	9203      	str	r2, [sp, #12]
   24974:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   24978:	2901      	cmp	r1, #1
   2497a:	f172 0200 	sbcs.w	r2, r2, #0
   2497e:	dbec      	blt.n	2495a <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24984:	4659      	mov	r1, fp
   24986:	e9cd 2300 	strd	r2, r3, [sp]
   2498a:	4648      	mov	r0, r9
   2498c:	4652      	mov	r2, sl
   2498e:	f7fa f953 	bl	1ec38 <z_pend_curr>
	__asm__ volatile(
   24992:	f04f 0340 	mov.w	r3, #64	; 0x40
   24996:	f3ef 8b11 	mrs	fp, BASEPRI
   2499a:	f383 8811 	msr	BASEPRI, r3
   2499e:	f3bf 8f6f 	isb	sy
   249a2:	e7d0      	b.n	24946 <k_heap_aligned_alloc+0x30>

000249a4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   249a4:	b538      	push	{r3, r4, r5, lr}
   249a6:	4604      	mov	r4, r0
   249a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   249ac:	f3ef 8511 	mrs	r5, BASEPRI
   249b0:	f383 8811 	msr	BASEPRI, r3
   249b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   249b8:	f7fb f9e7 	bl	1fd8a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   249bc:	f104 000c 	add.w	r0, r4, #12
   249c0:	f000 fb11 	bl	24fe6 <z_unpend_all>
   249c4:	b130      	cbz	r0, 249d4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   249c6:	4629      	mov	r1, r5
   249c8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   249cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   249d0:	f7fa b8ae 	b.w	1eb30 <z_reschedule>
	__asm__ volatile(
   249d4:	f385 8811 	msr	BASEPRI, r5
   249d8:	f3bf 8f6f 	isb	sy
}
   249dc:	bd38      	pop	{r3, r4, r5, pc}

000249de <k_mem_slab_init>:
{
   249de:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   249e0:	2400      	movs	r4, #0
   249e2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   249e4:	ea41 0402 	orr.w	r4, r1, r2
   249e8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   249ec:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   249f0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   249f2:	d10c      	bne.n	24a0e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   249f4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   249f6:	42a3      	cmp	r3, r4
   249f8:	d103      	bne.n	24a02 <k_mem_slab_init+0x24>
   249fa:	e9c0 0000 	strd	r0, r0, [r0]
}
   249fe:	2000      	movs	r0, #0
}
   24a00:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   24a02:	6945      	ldr	r5, [r0, #20]
   24a04:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   24a06:	3401      	adds	r4, #1
		slab->free_list = p;
   24a08:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   24a0a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   24a0c:	e7f3      	b.n	249f6 <k_mem_slab_init+0x18>
		return -EINVAL;
   24a0e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   24a12:	e7f5      	b.n	24a00 <k_mem_slab_init+0x22>

00024a14 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a16:	4604      	mov	r4, r0
   24a18:	460d      	mov	r5, r1
	__asm__ volatile(
   24a1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a1e:	f3ef 8611 	mrs	r6, BASEPRI
   24a22:	f383 8811 	msr	BASEPRI, r3
   24a26:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24a2a:	6947      	ldr	r7, [r0, #20]
   24a2c:	b977      	cbnz	r7, 24a4c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24a2e:	f000 fac2 	bl	24fb6 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   24a32:	b158      	cbz	r0, 24a4c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24a34:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24a36:	6142      	str	r2, [r0, #20]
   24a38:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   24a3a:	f000 fa75 	bl	24f28 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24a3e:	4631      	mov	r1, r6
   24a40:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24a44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   24a48:	f7fa b872 	b.w	1eb30 <z_reschedule>
	**(char ***) mem = slab->free_list;
   24a4c:	682b      	ldr	r3, [r5, #0]
   24a4e:	6962      	ldr	r2, [r4, #20]
   24a50:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24a52:	682b      	ldr	r3, [r5, #0]
   24a54:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   24a56:	69a3      	ldr	r3, [r4, #24]
   24a58:	3b01      	subs	r3, #1
   24a5a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   24a5c:	f386 8811 	msr	BASEPRI, r6
   24a60:	f3bf 8f6f 	isb	sy
}
   24a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024a66 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24a66:	f3ef 8005 	mrs	r0, IPSR
}
   24a6a:	3800      	subs	r0, #0
   24a6c:	bf18      	it	ne
   24a6e:	2001      	movne	r0, #1
   24a70:	4770      	bx	lr

00024a72 <z_impl_k_thread_name_set>:
}
   24a72:	f06f 0057 	mvn.w	r0, #87	; 0x57
   24a76:	4770      	bx	lr

00024a78 <k_thread_name_get>:
}
   24a78:	2000      	movs	r0, #0
   24a7a:	4770      	bx	lr

00024a7c <z_impl_k_thread_start>:
	z_sched_start(thread);
   24a7c:	f7fa ba30 	b.w	1eee0 <z_sched_start>

00024a80 <z_pm_save_idle_exit>:
{
   24a80:	b508      	push	{r3, lr}
	pm_system_resume();
   24a82:	f7ee f8a3 	bl	12bcc <pm_system_resume>
}
   24a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   24a8a:	f7fc ba08 	b.w	20e9e <sys_clock_idle_exit>

00024a8e <z_impl_k_mutex_init>:
{
   24a8e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   24a90:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   24a92:	e9c3 0002 	strd	r0, r0, [r3, #8]
   24a96:	e9c3 3300 	strd	r3, r3, [r3]
}
   24a9a:	4770      	bx	lr

00024a9c <queue_insert>:
{
   24a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24aa0:	4699      	mov	r9, r3
   24aa2:	4604      	mov	r4, r0
   24aa4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   24aa8:	460d      	mov	r5, r1
   24aaa:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24aac:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   24ab0:	f04f 0240 	mov.w	r2, #64	; 0x40
   24ab4:	f3ef 8711 	mrs	r7, BASEPRI
   24ab8:	f382 8811 	msr	BASEPRI, r2
   24abc:	f3bf 8f6f 	isb	sy
	if (is_append) {
   24ac0:	b103      	cbz	r3, 24ac4 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   24ac2:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24ac4:	4630      	mov	r0, r6
   24ac6:	f000 fa76 	bl	24fb6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   24aca:	b158      	cbz	r0, 24ae4 <queue_insert+0x48>
   24acc:	2400      	movs	r4, #0
   24ace:	67c4      	str	r4, [r0, #124]	; 0x7c
   24ad0:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   24ad4:	f000 fa28 	bl	24f28 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   24ad8:	4630      	mov	r0, r6
   24ada:	4639      	mov	r1, r7
   24adc:	f7fa f828 	bl	1eb30 <z_reschedule>
	return 0;
   24ae0:	2000      	movs	r0, #0
   24ae2:	e00c      	b.n	24afe <queue_insert+0x62>
	if (alloc) {
   24ae4:	f1b9 0f00 	cmp.w	r9, #0
   24ae8:	d01b      	beq.n	24b22 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   24aea:	2108      	movs	r1, #8
   24aec:	f7fa fde0 	bl	1f6b0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   24af0:	b938      	cbnz	r0, 24b02 <queue_insert+0x66>
	__asm__ volatile(
   24af2:	f387 8811 	msr	BASEPRI, r7
   24af6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24afa:	f06f 000b 	mvn.w	r0, #11
}
   24afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   24b02:	2301      	movs	r3, #1
		anode->data = data;
   24b04:	f8c0 8004 	str.w	r8, [r0, #4]
   24b08:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24b0a:	6803      	ldr	r3, [r0, #0]
   24b0c:	f003 0203 	and.w	r2, r3, #3
   24b10:	b95d      	cbnz	r5, 24b2a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24b12:	6823      	ldr	r3, [r4, #0]
   24b14:	4313      	orrs	r3, r2
   24b16:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24b18:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   24b1a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24b1c:	b973      	cbnz	r3, 24b3c <queue_insert+0xa0>
	list->tail = node;
   24b1e:	6060      	str	r0, [r4, #4]
}
   24b20:	e00c      	b.n	24b3c <queue_insert+0xa0>
	node->next_and_flags = flags;
   24b22:	f8c8 9000 	str.w	r9, [r8]
}
   24b26:	4640      	mov	r0, r8
   24b28:	e7ef      	b.n	24b0a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24b2a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24b2c:	f033 0303 	bics.w	r3, r3, #3
   24b30:	d110      	bne.n	24b54 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24b32:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   24b34:	6862      	ldr	r2, [r4, #4]
   24b36:	b93a      	cbnz	r2, 24b48 <queue_insert+0xac>
	list->head = node;
   24b38:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24b3c:	2104      	movs	r1, #4
   24b3e:	f104 0010 	add.w	r0, r4, #16
   24b42:	f000 fc5b 	bl	253fc <z_handle_obj_poll_events>
   24b46:	e7c7      	b.n	24ad8 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24b48:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24b4a:	f003 0303 	and.w	r3, r3, #3
   24b4e:	4303      	orrs	r3, r0
   24b50:	6013      	str	r3, [r2, #0]
   24b52:	e7e4      	b.n	24b1e <queue_insert+0x82>
   24b54:	4313      	orrs	r3, r2
   24b56:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24b58:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24b5a:	f003 0303 	and.w	r3, r3, #3
   24b5e:	4303      	orrs	r3, r0
   24b60:	602b      	str	r3, [r5, #0]
}
   24b62:	e7eb      	b.n	24b3c <queue_insert+0xa0>

00024b64 <z_queue_node_peek>:
{
   24b64:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   24b66:	4604      	mov	r4, r0
   24b68:	b130      	cbz	r0, 24b78 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24b6a:	6802      	ldr	r2, [r0, #0]
   24b6c:	0793      	lsls	r3, r2, #30
   24b6e:	d003      	beq.n	24b78 <z_queue_node_peek+0x14>
		ret = anode->data;
   24b70:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   24b72:	b109      	cbz	r1, 24b78 <z_queue_node_peek+0x14>
			k_free(anode);
   24b74:	f000 fc50 	bl	25418 <k_free>
}
   24b78:	4620      	mov	r0, r4
   24b7a:	bd10      	pop	{r4, pc}

00024b7c <z_impl_k_queue_init>:
	list->head = NULL;
   24b7c:	2300      	movs	r3, #0
	list->tail = NULL;
   24b7e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   24b82:	f100 0308 	add.w	r3, r0, #8
   24b86:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   24b8a:	f100 0310 	add.w	r3, r0, #16
   24b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   24b92:	4770      	bx	lr

00024b94 <k_queue_append>:
{
   24b94:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   24b96:	2301      	movs	r3, #1
   24b98:	9300      	str	r3, [sp, #0]
   24b9a:	2300      	movs	r3, #0
{
   24b9c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   24b9e:	4619      	mov	r1, r3
   24ba0:	f7ff ff7c 	bl	24a9c <queue_insert>
}
   24ba4:	b003      	add	sp, #12
   24ba6:	f85d fb04 	ldr.w	pc, [sp], #4

00024baa <k_queue_prepend>:
{
   24baa:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   24bac:	2300      	movs	r3, #0
{
   24bae:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   24bb0:	9300      	str	r3, [sp, #0]
   24bb2:	4619      	mov	r1, r3
   24bb4:	f7ff ff72 	bl	24a9c <queue_insert>
}
   24bb8:	b003      	add	sp, #12
   24bba:	f85d fb04 	ldr.w	pc, [sp], #4

00024bbe <k_queue_append_list>:
{
   24bbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24bc2:	4605      	mov	r5, r0
   24bc4:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   24bc6:	460c      	mov	r4, r1
   24bc8:	b391      	cbz	r1, 24c30 <k_queue_append_list+0x72>
   24bca:	b38a      	cbz	r2, 24c30 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24bcc:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   24bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   24bd4:	f3ef 8811 	mrs	r8, BASEPRI
   24bd8:	f383 8811 	msr	BASEPRI, r3
   24bdc:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   24be0:	4638      	mov	r0, r7
   24be2:	f000 f9e8 	bl	24fb6 <z_unpend_first_thread>
   24be6:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   24bea:	b920      	cbnz	r0, 24bf6 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24bec:	686b      	ldr	r3, [r5, #4]
   24bee:	b9cb      	cbnz	r3, 24c24 <k_queue_append_list+0x66>
	list->head = node;
   24bf0:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24bf2:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24bf4:	e00a      	b.n	24c0c <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   24bf6:	6144      	str	r4, [r0, #20]
   24bf8:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   24bfc:	f000 f994 	bl	24f28 <z_ready_thread>
		head = *(void **)head;
   24c00:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   24c02:	4638      	mov	r0, r7
   24c04:	f000 f9d7 	bl	24fb6 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   24c08:	2c00      	cmp	r4, #0
   24c0a:	d1ee      	bne.n	24bea <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   24c0c:	2104      	movs	r1, #4
   24c0e:	f105 0010 	add.w	r0, r5, #16
   24c12:	f000 fbf3 	bl	253fc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   24c16:	4638      	mov	r0, r7
   24c18:	4641      	mov	r1, r8
   24c1a:	f7f9 ff89 	bl	1eb30 <z_reschedule>
	return 0;
   24c1e:	2000      	movs	r0, #0
}
   24c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24c24:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24c26:	f001 0103 	and.w	r1, r1, #3
   24c2a:	430c      	orrs	r4, r1
   24c2c:	601c      	str	r4, [r3, #0]
}
   24c2e:	e7e0      	b.n	24bf2 <k_queue_append_list+0x34>
		return -EINVAL;
   24c30:	f06f 0015 	mvn.w	r0, #21
   24c34:	e7f4      	b.n	24c20 <k_queue_append_list+0x62>

00024c36 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   24c36:	b15a      	cbz	r2, 24c50 <z_impl_k_sem_init+0x1a>
   24c38:	428a      	cmp	r2, r1
   24c3a:	d309      	bcc.n	24c50 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   24c3c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   24c40:	e9c0 1202 	strd	r1, r2, [r0, #8]
   24c44:	e9c0 0000 	strd	r0, r0, [r0]
   24c48:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   24c4c:	2000      	movs	r0, #0
   24c4e:	4770      	bx	lr
		return -EINVAL;
   24c50:	f06f 0015 	mvn.w	r0, #21
}
   24c54:	4770      	bx	lr

00024c56 <notify_queue_locked>:
	if (queue != NULL) {
   24c56:	b120      	cbz	r0, 24c62 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   24c58:	2200      	movs	r2, #0
   24c5a:	4611      	mov	r1, r2
   24c5c:	3088      	adds	r0, #136	; 0x88
   24c5e:	f000 b9d2 	b.w	25006 <z_sched_wake>
}
   24c62:	4770      	bx	lr

00024c64 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   24c64:	68c3      	ldr	r3, [r0, #12]
{
   24c66:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   24c68:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   24c6c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24c70:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   24c72:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24c74:	d502      	bpl.n	24c7c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   24c76:	3010      	adds	r0, #16
   24c78:	f000 f9e2 	bl	25040 <z_abort_timeout>
}
   24c7c:	4620      	mov	r0, r4
   24c7e:	bd10      	pop	{r4, pc}

00024c80 <cancel_async_locked>:
{
   24c80:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24c82:	68c0      	ldr	r0, [r0, #12]
{
   24c84:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24c86:	0784      	lsls	r4, r0, #30
   24c88:	f3c0 0140 	ubfx	r1, r0, #1, #1
   24c8c:	d416      	bmi.n	24cbc <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   24c8e:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   24c92:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   24c94:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   24c96:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   24c98:	d510      	bpl.n	24cbc <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c9a:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   24c9e:	b168      	cbz	r0, 24cbc <cancel_async_locked+0x3c>
   24ca0:	4283      	cmp	r3, r0
   24ca2:	d11d      	bne.n	24ce0 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   24ca4:	6818      	ldr	r0, [r3, #0]
   24ca6:	b999      	cbnz	r1, 24cd0 <cancel_async_locked+0x50>
   24ca8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   24cac:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   24cb0:	428b      	cmp	r3, r1
   24cb2:	d101      	bne.n	24cb8 <cancel_async_locked+0x38>
	list->tail = node;
   24cb4:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   24cb8:	2200      	movs	r2, #0
   24cba:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   24cbc:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   24cbe:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   24cc2:	bf1e      	ittt	ne
   24cc4:	f042 0202 	orrne.w	r2, r2, #2
   24cc8:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   24cca:	f002 000f 	andne.w	r0, r2, #15
}
   24cce:	bd10      	pop	{r4, pc}
   24cd0:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   24cd2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   24cd6:	4283      	cmp	r3, r0
	list->tail = node;
   24cd8:	bf08      	it	eq
   24cda:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   24cde:	e7eb      	b.n	24cb8 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24ce0:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24ce2:	6800      	ldr	r0, [r0, #0]
   24ce4:	e7db      	b.n	24c9e <cancel_async_locked+0x1e>

00024ce6 <work_timeout>:
{
   24ce6:	b513      	push	{r0, r1, r4, lr}
   24ce8:	f04f 0340 	mov.w	r3, #64	; 0x40
   24cec:	f3ef 8411 	mrs	r4, BASEPRI
   24cf0:	f383 8811 	msr	BASEPRI, r3
   24cf4:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   24cf8:	2300      	movs	r3, #0
   24cfa:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   24cfc:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   24d00:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24d04:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   24d06:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24d0a:	d505      	bpl.n	24d18 <work_timeout+0x32>
		queue = dw->queue;
   24d0c:	6983      	ldr	r3, [r0, #24]
   24d0e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   24d10:	a901      	add	r1, sp, #4
   24d12:	3810      	subs	r0, #16
   24d14:	f7f9 fdd0 	bl	1e8b8 <submit_to_queue_locked>
	__asm__ volatile(
   24d18:	f384 8811 	msr	BASEPRI, r4
   24d1c:	f3bf 8f6f 	isb	sy
}
   24d20:	b002      	add	sp, #8
   24d22:	bd10      	pop	{r4, pc}

00024d24 <k_work_init>:
{
   24d24:	b538      	push	{r3, r4, r5, lr}
   24d26:	4604      	mov	r4, r0
   24d28:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   24d2a:	2210      	movs	r2, #16
   24d2c:	2100      	movs	r1, #0
   24d2e:	f7fd fa86 	bl	2223e <memset>
   24d32:	6065      	str	r5, [r4, #4]
}
   24d34:	bd38      	pop	{r3, r4, r5, pc}

00024d36 <k_work_submit_to_queue>:
{
   24d36:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24d38:	9001      	str	r0, [sp, #4]
   24d3a:	4608      	mov	r0, r1
	__asm__ volatile(
   24d3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d40:	f3ef 8511 	mrs	r5, BASEPRI
   24d44:	f383 8811 	msr	BASEPRI, r3
   24d48:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   24d4c:	a901      	add	r1, sp, #4
   24d4e:	f7f9 fdb3 	bl	1e8b8 <submit_to_queue_locked>
   24d52:	4604      	mov	r4, r0
	__asm__ volatile(
   24d54:	f385 8811 	msr	BASEPRI, r5
   24d58:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   24d5c:	2800      	cmp	r0, #0
   24d5e:	dd04      	ble.n	24d6a <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   24d60:	f7fa f9ae 	bl	1f0c0 <z_impl_k_is_preempt_thread>
   24d64:	b108      	cbz	r0, 24d6a <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   24d66:	f7fa f931 	bl	1efcc <z_impl_k_yield>
}
   24d6a:	4620      	mov	r0, r4
   24d6c:	b003      	add	sp, #12
   24d6e:	bd30      	pop	{r4, r5, pc}

00024d70 <k_work_init_delayable>:
{
   24d70:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   24d72:	2230      	movs	r2, #48	; 0x30
{
   24d74:	4604      	mov	r4, r0
   24d76:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   24d78:	2100      	movs	r1, #0
   24d7a:	f7fd fa60 	bl	2223e <memset>
   24d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
   24d82:	6065      	str	r5, [r4, #4]
   24d84:	60e3      	str	r3, [r4, #12]
}
   24d86:	bd38      	pop	{r3, r4, r5, pc}

00024d88 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   24d88:	b538      	push	{r3, r4, r5, lr}
   24d8a:	4604      	mov	r4, r0
	__asm__ volatile(
   24d8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d90:	f3ef 8511 	mrs	r5, BASEPRI
   24d94:	f383 8811 	msr	BASEPRI, r3
   24d98:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   24d9c:	f7ff ff62 	bl	24c64 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24da0:	4620      	mov	r0, r4
   24da2:	f7ff ff6d 	bl	24c80 <cancel_async_locked>
	__asm__ volatile(
   24da6:	f385 8811 	msr	BASEPRI, r5
   24daa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   24dae:	bd38      	pop	{r3, r4, r5, pc}

00024db0 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   24db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24db2:	4604      	mov	r4, r0
   24db4:	460d      	mov	r5, r1
	__asm__ volatile(
   24db6:	f04f 0340 	mov.w	r3, #64	; 0x40
   24dba:	f3ef 8711 	mrs	r7, BASEPRI
   24dbe:	f383 8811 	msr	BASEPRI, r3
   24dc2:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24dc6:	f3bf 8f5b 	dmb	ish
   24dca:	68c3      	ldr	r3, [r0, #12]
   24dcc:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   24dd0:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   24dd4:	2b00      	cmp	r3, #0
   24dd6:	bf14      	ite	ne
   24dd8:	2601      	movne	r6, #1
   24dda:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   24ddc:	d009      	beq.n	24df2 <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   24dde:	f7ff ff41 	bl	24c64 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24de2:	4620      	mov	r0, r4
   24de4:	f7ff ff4c 	bl	24c80 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   24de8:	4629      	mov	r1, r5
   24dea:	4620      	mov	r0, r4
   24dec:	f7f9 fd46 	bl	1e87c <cancel_sync_locked>
   24df0:	4603      	mov	r3, r0
	__asm__ volatile(
   24df2:	f387 8811 	msr	BASEPRI, r7
   24df6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   24dfa:	b13b      	cbz	r3, 24e0c <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   24dfc:	f04f 32ff 	mov.w	r2, #4294967295
   24e00:	f04f 33ff 	mov.w	r3, #4294967295
   24e04:	f105 0008 	add.w	r0, r5, #8
   24e08:	f7f9 fc34 	bl	1e674 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   24e0c:	4630      	mov	r0, r6
   24e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024e10 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   24e10:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24e14:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24e16:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24e18:	2300      	movs	r3, #0
	node->prev = NULL;
   24e1a:	e9c0 3300 	strd	r3, r3, [r0]
}
   24e1e:	4770      	bx	lr

00024e20 <unpend_thread_no_timeout>:
{
   24e20:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   24e22:	f7ff fff5 	bl	24e10 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24e26:	7b43      	ldrb	r3, [r0, #13]
   24e28:	f023 0302 	bic.w	r3, r3, #2
   24e2c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   24e2e:	2300      	movs	r3, #0
   24e30:	6083      	str	r3, [r0, #8]
}
   24e32:	bd08      	pop	{r3, pc}

00024e34 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   24e34:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24e38:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   24e3c:	4283      	cmp	r3, r0
		return b2 - b1;
   24e3e:	bf14      	ite	ne
   24e40:	1ac0      	subne	r0, r0, r3
	return 0;
   24e42:	2000      	moveq	r0, #0
}
   24e44:	4770      	bx	lr

00024e46 <z_unpend_thread_no_timeout>:
{
   24e46:	b508      	push	{r3, lr}
	__asm__ volatile(
   24e48:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e4c:	f3ef 8111 	mrs	r1, BASEPRI
   24e50:	f383 8811 	msr	BASEPRI, r3
   24e54:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   24e58:	f7ff ffe2 	bl	24e20 <unpend_thread_no_timeout>
	__asm__ volatile(
   24e5c:	f381 8811 	msr	BASEPRI, r1
   24e60:	f3bf 8f6f 	isb	sy
}
   24e64:	bd08      	pop	{r3, pc}

00024e66 <z_unpend_thread>:
{
   24e66:	b510      	push	{r4, lr}
	__asm__ volatile(
   24e68:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e6c:	f3ef 8411 	mrs	r4, BASEPRI
   24e70:	f383 8811 	msr	BASEPRI, r3
   24e74:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   24e78:	f7ff ffd2 	bl	24e20 <unpend_thread_no_timeout>
	__asm__ volatile(
   24e7c:	f384 8811 	msr	BASEPRI, r4
   24e80:	f3bf 8f6f 	isb	sy
}
   24e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24e88:	3018      	adds	r0, #24
   24e8a:	f000 b8d9 	b.w	25040 <z_abort_timeout>

00024e8e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24e8e:	4603      	mov	r3, r0
   24e90:	b920      	cbnz	r0, 24e9c <z_reschedule_irqlock+0xe>
   24e92:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   24e96:	b90a      	cbnz	r2, 24e9c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   24e98:	f7ee bb42 	b.w	13520 <arch_swap>
   24e9c:	f383 8811 	msr	BASEPRI, r3
   24ea0:	f3bf 8f6f 	isb	sy
}
   24ea4:	4770      	bx	lr

00024ea6 <z_reschedule_unlocked>:
	__asm__ volatile(
   24ea6:	f04f 0340 	mov.w	r3, #64	; 0x40
   24eaa:	f3ef 8011 	mrs	r0, BASEPRI
   24eae:	f383 8811 	msr	BASEPRI, r3
   24eb2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24eb6:	f7ff bfea 	b.w	24e8e <z_reschedule_irqlock>

00024eba <z_priq_dumb_best>:
{
   24eba:	4603      	mov	r3, r0
	return list->head == list;
   24ebc:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24ebe:	4283      	cmp	r3, r0
   24ec0:	d003      	beq.n	24eca <z_priq_dumb_best+0x10>
	if (n != NULL) {
   24ec2:	2800      	cmp	r0, #0
   24ec4:	bf38      	it	cc
   24ec6:	2000      	movcc	r0, #0
   24ec8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   24eca:	2000      	movs	r0, #0
}
   24ecc:	4770      	bx	lr

00024ece <add_to_waitq_locked>:
{
   24ece:	b538      	push	{r3, r4, r5, lr}
   24ed0:	4604      	mov	r4, r0
   24ed2:	460d      	mov	r5, r1
	unready_thread(thread);
   24ed4:	f7f9 fe72 	bl	1ebbc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24ed8:	7b63      	ldrb	r3, [r4, #13]
   24eda:	f043 0302 	orr.w	r3, r3, #2
   24ede:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   24ee0:	b1b5      	cbz	r5, 24f10 <add_to_waitq_locked+0x42>
	return list->head == list;
   24ee2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   24ee4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24ee6:	429d      	cmp	r5, r3
   24ee8:	bf08      	it	eq
   24eea:	2300      	moveq	r3, #0
   24eec:	2b00      	cmp	r3, #0
   24eee:	bf38      	it	cc
   24ef0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24ef2:	b19b      	cbz	r3, 24f1c <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   24ef4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   24ef8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   24efc:	4291      	cmp	r1, r2
   24efe:	d008      	beq.n	24f12 <add_to_waitq_locked+0x44>
		return b2 - b1;
   24f00:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   24f02:	2a00      	cmp	r2, #0
   24f04:	dd05      	ble.n	24f12 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   24f06:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24f08:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24f0c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24f0e:	605c      	str	r4, [r3, #4]
}
   24f10:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   24f12:	686a      	ldr	r2, [r5, #4]
   24f14:	4293      	cmp	r3, r2
   24f16:	d001      	beq.n	24f1c <add_to_waitq_locked+0x4e>
   24f18:	681b      	ldr	r3, [r3, #0]
   24f1a:	e7ea      	b.n	24ef2 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   24f1c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   24f1e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   24f22:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24f24:	606c      	str	r4, [r5, #4]
   24f26:	e7f3      	b.n	24f10 <add_to_waitq_locked+0x42>

00024f28 <z_ready_thread>:
{
   24f28:	b510      	push	{r4, lr}
   24f2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f2e:	f3ef 8411 	mrs	r4, BASEPRI
   24f32:	f383 8811 	msr	BASEPRI, r3
   24f36:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   24f3a:	f7f9 ff99 	bl	1ee70 <ready_thread>
	__asm__ volatile(
   24f3e:	f384 8811 	msr	BASEPRI, r4
   24f42:	f3bf 8f6f 	isb	sy
}
   24f46:	bd10      	pop	{r4, pc}

00024f48 <z_thread_timeout>:
{
   24f48:	b510      	push	{r4, lr}
   24f4a:	4601      	mov	r1, r0
	__asm__ volatile(
   24f4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f50:	f3ef 8411 	mrs	r4, BASEPRI
   24f54:	f383 8811 	msr	BASEPRI, r3
   24f58:	f3bf 8f6f 	isb	sy
		if (!killed) {
   24f5c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   24f60:	f013 0f28 	tst.w	r3, #40	; 0x28
   24f64:	d10d      	bne.n	24f82 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   24f66:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   24f6a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   24f6c:	b10b      	cbz	r3, 24f72 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   24f6e:	f7ff ff57 	bl	24e20 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24f72:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   24f76:	f023 0314 	bic.w	r3, r3, #20
   24f7a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   24f7e:	f7f9 ff77 	bl	1ee70 <ready_thread>
	__asm__ volatile(
   24f82:	f384 8811 	msr	BASEPRI, r4
   24f86:	f3bf 8f6f 	isb	sy
}
   24f8a:	bd10      	pop	{r4, pc}

00024f8c <z_unpend1_no_timeout>:
{
   24f8c:	b510      	push	{r4, lr}
	__asm__ volatile(
   24f8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f92:	f3ef 8411 	mrs	r4, BASEPRI
   24f96:	f383 8811 	msr	BASEPRI, r3
   24f9a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   24f9e:	f7ff ff8c 	bl	24eba <z_priq_dumb_best>
		if (thread != NULL) {
   24fa2:	4601      	mov	r1, r0
   24fa4:	b108      	cbz	r0, 24faa <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   24fa6:	f7ff ff3b 	bl	24e20 <unpend_thread_no_timeout>
	__asm__ volatile(
   24faa:	f384 8811 	msr	BASEPRI, r4
   24fae:	f3bf 8f6f 	isb	sy
}
   24fb2:	4608      	mov	r0, r1
   24fb4:	bd10      	pop	{r4, pc}

00024fb6 <z_unpend_first_thread>:
{
   24fb6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24fb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   24fbc:	f3ef 8511 	mrs	r5, BASEPRI
   24fc0:	f383 8811 	msr	BASEPRI, r3
   24fc4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   24fc8:	f7ff ff77 	bl	24eba <z_priq_dumb_best>
		if (thread != NULL) {
   24fcc:	4604      	mov	r4, r0
   24fce:	b120      	cbz	r0, 24fda <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   24fd0:	f7ff ff26 	bl	24e20 <unpend_thread_no_timeout>
   24fd4:	3018      	adds	r0, #24
   24fd6:	f000 f833 	bl	25040 <z_abort_timeout>
	__asm__ volatile(
   24fda:	f385 8811 	msr	BASEPRI, r5
   24fde:	f3bf 8f6f 	isb	sy
}
   24fe2:	4620      	mov	r0, r4
   24fe4:	bd38      	pop	{r3, r4, r5, pc}

00024fe6 <z_unpend_all>:
{
   24fe6:	b538      	push	{r3, r4, r5, lr}
   24fe8:	4605      	mov	r5, r0
	int need_sched = 0;
   24fea:	2000      	movs	r0, #0
	return list->head == list;
   24fec:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24fee:	42a5      	cmp	r5, r4
   24ff0:	d000      	beq.n	24ff4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24ff2:	b904      	cbnz	r4, 24ff6 <z_unpend_all+0x10>
}
   24ff4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   24ff6:	4620      	mov	r0, r4
   24ff8:	f7ff ff35 	bl	24e66 <z_unpend_thread>
		z_ready_thread(thread);
   24ffc:	4620      	mov	r0, r4
   24ffe:	f7ff ff93 	bl	24f28 <z_ready_thread>
		need_sched = 1;
   25002:	2001      	movs	r0, #1
   25004:	e7f2      	b.n	24fec <z_unpend_all+0x6>

00025006 <z_sched_wake>:
{
   25006:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25008:	f04f 0340 	mov.w	r3, #64	; 0x40
   2500c:	f3ef 8511 	mrs	r5, BASEPRI
   25010:	f383 8811 	msr	BASEPRI, r3
   25014:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   25018:	f7ff ff4f 	bl	24eba <z_priq_dumb_best>
		if (thread != NULL) {
   2501c:	4604      	mov	r4, r0
   2501e:	b150      	cbz	r0, 25036 <z_sched_wake+0x30>
   25020:	67c1      	str	r1, [r0, #124]	; 0x7c
   25022:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   25024:	f7ff fefc 	bl	24e20 <unpend_thread_no_timeout>
   25028:	3018      	adds	r0, #24
   2502a:	f000 f809 	bl	25040 <z_abort_timeout>
			ready_thread(thread);
   2502e:	4620      	mov	r0, r4
   25030:	f7f9 ff1e 	bl	1ee70 <ready_thread>
			ret = true;
   25034:	2001      	movs	r0, #1
	__asm__ volatile(
   25036:	f385 8811 	msr	BASEPRI, r5
   2503a:	f3bf 8f6f 	isb	sy
}
   2503e:	bd38      	pop	{r3, r4, r5, pc}

00025040 <z_abort_timeout>:
{
   25040:	b510      	push	{r4, lr}
	__asm__ volatile(
   25042:	f04f 0240 	mov.w	r2, #64	; 0x40
   25046:	f3ef 8411 	mrs	r4, BASEPRI
   2504a:	f382 8811 	msr	BASEPRI, r2
   2504e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   25052:	6803      	ldr	r3, [r0, #0]
   25054:	b13b      	cbz	r3, 25066 <z_abort_timeout+0x26>
			remove_timeout(to);
   25056:	f7fa f8cb 	bl	1f1f0 <remove_timeout>
			ret = 0;
   2505a:	2000      	movs	r0, #0
	__asm__ volatile(
   2505c:	f384 8811 	msr	BASEPRI, r4
   25060:	f3bf 8f6f 	isb	sy
}
   25064:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   25066:	f06f 0015 	mvn.w	r0, #21
   2506a:	e7f7      	b.n	2505c <z_abort_timeout+0x1c>

0002506c <z_get_next_timeout_expiry>:
{
   2506c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2506e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25072:	f3ef 8411 	mrs	r4, BASEPRI
   25076:	f383 8811 	msr	BASEPRI, r3
   2507a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2507e:	f7fa f8d1 	bl	1f224 <next_timeout>
	__asm__ volatile(
   25082:	f384 8811 	msr	BASEPRI, r4
   25086:	f3bf 8f6f 	isb	sy
}
   2508a:	bd10      	pop	{r4, pc}

0002508c <z_set_timeout_expiry>:
{
   2508c:	b570      	push	{r4, r5, r6, lr}
   2508e:	4604      	mov	r4, r0
   25090:	460d      	mov	r5, r1
	__asm__ volatile(
   25092:	f04f 0340 	mov.w	r3, #64	; 0x40
   25096:	f3ef 8611 	mrs	r6, BASEPRI
   2509a:	f383 8811 	msr	BASEPRI, r3
   2509e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   250a2:	f7fa f8bf 	bl	1f224 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   250a6:	2801      	cmp	r0, #1
   250a8:	dd05      	ble.n	250b6 <z_set_timeout_expiry+0x2a>
   250aa:	42a0      	cmp	r0, r4
   250ac:	db03      	blt.n	250b6 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   250ae:	4629      	mov	r1, r5
   250b0:	4620      	mov	r0, r4
   250b2:	f7ee f849 	bl	13148 <sys_clock_set_timeout>
	__asm__ volatile(
   250b6:	f386 8811 	msr	BASEPRI, r6
   250ba:	f3bf 8f6f 	isb	sy
}
   250be:	bd70      	pop	{r4, r5, r6, pc}

000250c0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   250c0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   250c2:	f7fa f9cf 	bl	1f464 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   250c6:	bd08      	pop	{r3, pc}

000250c8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   250c8:	b108      	cbz	r0, 250ce <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   250ca:	f7ee bf85 	b.w	13fd8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   250ce:	4770      	bx	lr

000250d0 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   250d0:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   250d2:	1c4b      	adds	r3, r1, #1
   250d4:	bf08      	it	eq
   250d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   250da:	4604      	mov	r4, r0
   250dc:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   250de:	d013      	beq.n	25108 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   250e0:	ea54 0105 	orrs.w	r1, r4, r5
   250e4:	d103      	bne.n	250ee <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   250e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   250ea:	f7fa b9bb 	b.w	1f464 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   250ee:	f06f 0101 	mvn.w	r1, #1
   250f2:	1a0a      	subs	r2, r1, r0
   250f4:	f04f 31ff 	mov.w	r1, #4294967295
   250f8:	eb61 0305 	sbc.w	r3, r1, r5
   250fc:	2a00      	cmp	r2, #0
   250fe:	f173 0100 	sbcs.w	r1, r3, #0
   25102:	db02      	blt.n	2510a <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   25104:	4610      	mov	r0, r2
   25106:	4619      	mov	r1, r3
}
   25108:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2510a:	f7fa f9ab 	bl	1f464 <sys_clock_tick_get>
   2510e:	2c01      	cmp	r4, #1
   25110:	f175 0300 	sbcs.w	r3, r5, #0
   25114:	bfbc      	itt	lt
   25116:	2401      	movlt	r4, #1
   25118:	2500      	movlt	r5, #0
   2511a:	1820      	adds	r0, r4, r0
   2511c:	eb45 0101 	adc.w	r1, r5, r1
   25120:	e7f2      	b.n	25108 <sys_clock_timeout_end_calc+0x38>

00025122 <k_timer_init>:
	timer->status = 0U;
   25122:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   25124:	e9c0 1208 	strd	r1, r2, [r0, #32]
   25128:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2512c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   25130:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   25134:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   25136:	6343      	str	r3, [r0, #52]	; 0x34
}
   25138:	4770      	bx	lr

0002513a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2513a:	b510      	push	{r4, lr}
   2513c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2513e:	f7ff ff7f 	bl	25040 <z_abort_timeout>

	if (inactive) {
   25142:	b9b0      	cbnz	r0, 25172 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   25144:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25146:	b10b      	cbz	r3, 2514c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   25148:	4620      	mov	r0, r4
   2514a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2514c:	f104 0018 	add.w	r0, r4, #24
   25150:	f7ff ff1c 	bl	24f8c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   25154:	b168      	cbz	r0, 25172 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   25156:	f7ff fee7 	bl	24f28 <z_ready_thread>
	__asm__ volatile(
   2515a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2515e:	f3ef 8011 	mrs	r0, BASEPRI
   25162:	f383 8811 	msr	BASEPRI, r3
   25166:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2516a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2516e:	f7ff be8e 	b.w	24e8e <z_reschedule_irqlock>
   25172:	bd10      	pop	{r4, pc}

00025174 <clear_event_registrations>:
	while (num_events--) {
   25174:	2314      	movs	r3, #20
{
   25176:	b570      	push	{r4, r5, r6, lr}
   25178:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2517c:	2400      	movs	r4, #0
   2517e:	2601      	movs	r6, #1
	while (num_events--) {
   25180:	4281      	cmp	r1, r0
   25182:	d100      	bne.n	25186 <clear_event_registrations+0x12>
}
   25184:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   25186:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2518a:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2518e:	f003 031f 	and.w	r3, r3, #31
   25192:	2b08      	cmp	r3, #8
   25194:	d80d      	bhi.n	251b2 <clear_event_registrations+0x3e>
   25196:	fa06 f303 	lsl.w	r3, r6, r3
   2519a:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2519e:	d008      	beq.n	251b2 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   251a0:	f851 3c14 	ldr.w	r3, [r1, #-20]
   251a4:	b12b      	cbz	r3, 251b2 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   251a6:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   251aa:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   251ac:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   251ae:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   251b2:	f382 8811 	msr	BASEPRI, r2
   251b6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   251ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   251be:	f3ef 8211 	mrs	r2, BASEPRI
   251c2:	f383 8811 	msr	BASEPRI, r3
   251c6:	f3bf 8f6f 	isb	sy
   251ca:	3914      	subs	r1, #20
   251cc:	e7d8      	b.n	25180 <clear_event_registrations+0xc>

000251ce <add_event>:
{
   251ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251d0:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   251d2:	e9d0 2300 	ldrd	r2, r3, [r0]
   251d6:	4290      	cmp	r0, r2
   251d8:	4604      	mov	r4, r0
   251da:	460d      	mov	r5, r1
   251dc:	d105      	bne.n	251ea <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   251de:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   251e0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   251e4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   251e6:	6065      	str	r5, [r4, #4]
}
   251e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   251ea:	2b00      	cmp	r3, #0
   251ec:	d0f7      	beq.n	251de <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   251ee:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   251f0:	b100      	cbz	r0, 251f4 <add_event+0x26>
   251f2:	3860      	subs	r0, #96	; 0x60
   251f4:	b107      	cbz	r7, 251f8 <add_event+0x2a>
   251f6:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   251f8:	4639      	mov	r1, r7
   251fa:	f7ff fe1b 	bl	24e34 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   251fe:	2800      	cmp	r0, #0
   25200:	dced      	bgt.n	251de <add_event+0x10>
	return list->head == list;
   25202:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25204:	42b4      	cmp	r4, r6
   25206:	d0ea      	beq.n	251de <add_event+0x10>
   25208:	2e00      	cmp	r6, #0
   2520a:	bf38      	it	cc
   2520c:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2520e:	2e00      	cmp	r6, #0
   25210:	d0e5      	beq.n	251de <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   25212:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   25214:	b101      	cbz	r1, 25218 <add_event+0x4a>
   25216:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   25218:	4638      	mov	r0, r7
   2521a:	f7ff fe0b 	bl	24e34 <z_sched_prio_cmp>
   2521e:	2800      	cmp	r0, #0
   25220:	dd05      	ble.n	2522e <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   25222:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   25224:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   25228:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2522a:	6075      	str	r5, [r6, #4]
			return;
   2522c:	e7dc      	b.n	251e8 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2522e:	6863      	ldr	r3, [r4, #4]
   25230:	42b3      	cmp	r3, r6
   25232:	d0d4      	beq.n	251de <add_event+0x10>
   25234:	6836      	ldr	r6, [r6, #0]
   25236:	e7ea      	b.n	2520e <add_event+0x40>

00025238 <register_events>:
{
   25238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2523c:	2500      	movs	r5, #0
{
   2523e:	468b      	mov	fp, r1
   25240:	4614      	mov	r4, r2
   25242:	461f      	mov	r7, r3
   25244:	4682      	mov	sl, r0
	int events_registered = 0;
   25246:	462e      	mov	r6, r5
	event->poller = NULL;
   25248:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2524a:	455d      	cmp	r5, fp
   2524c:	db02      	blt.n	25254 <register_events+0x1c>
}
   2524e:	4630      	mov	r0, r6
   25250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25254:	f04f 0340 	mov.w	r3, #64	; 0x40
   25258:	f3ef 8911 	mrs	r9, BASEPRI
   2525c:	f383 8811 	msr	BASEPRI, r3
   25260:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   25264:	f89a 300d 	ldrb.w	r3, [sl, #13]
   25268:	f003 031f 	and.w	r3, r3, #31
   2526c:	3b01      	subs	r3, #1
   2526e:	2b07      	cmp	r3, #7
   25270:	d80f      	bhi.n	25292 <register_events+0x5a>
   25272:	e8df f003 	tbb	[pc, r3]
   25276:	041e      	.short	0x041e
   25278:	0e0e0a0e 	.word	0x0e0e0a0e
   2527c:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2527e:	f8da 3010 	ldr.w	r3, [sl, #16]
   25282:	689b      	ldr	r3, [r3, #8]
   25284:	b12b      	cbz	r3, 25292 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   25286:	2302      	movs	r3, #2
   25288:	e020      	b.n	252cc <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2528a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2528e:	681b      	ldr	r3, [r3, #0]
   25290:	bb8b      	cbnz	r3, 252f6 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   25292:	bb47      	cbnz	r7, 252e6 <register_events+0xae>
   25294:	7823      	ldrb	r3, [r4, #0]
   25296:	b333      	cbz	r3, 252e6 <register_events+0xae>
	switch (event->type) {
   25298:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2529c:	f003 031f 	and.w	r3, r3, #31
   252a0:	3b01      	subs	r3, #1
   252a2:	2b07      	cmp	r3, #7
   252a4:	d830      	bhi.n	25308 <register_events+0xd0>
   252a6:	e8df f003 	tbb	[pc, r3]
   252aa:	2833      	.short	0x2833
   252ac:	2f2f282f 	.word	0x2f2f282f
   252b0:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   252b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   252b6:	689b      	ldr	r3, [r3, #8]
   252b8:	2b00      	cmp	r3, #0
   252ba:	d0ea      	beq.n	25292 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   252bc:	2301      	movs	r3, #1
   252be:	e005      	b.n	252cc <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   252c0:	f8da 3010 	ldr.w	r3, [sl, #16]
   252c4:	6a1b      	ldr	r3, [r3, #32]
   252c6:	2b00      	cmp	r3, #0
   252c8:	d0e3      	beq.n	25292 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   252ca:	2310      	movs	r3, #16
	event->state |= state;
   252cc:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   252d0:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   252d4:	f3c2 3145 	ubfx	r1, r2, #13, #6
   252d8:	430b      	orrs	r3, r1
   252da:	f363 3252 	bfi	r2, r3, #13, #6
   252de:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   252e2:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   252e6:	f389 8811 	msr	BASEPRI, r9
   252ea:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   252ee:	3501      	adds	r5, #1
   252f0:	f10a 0a14 	add.w	sl, sl, #20
   252f4:	e7a9      	b.n	2524a <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   252f6:	2304      	movs	r3, #4
   252f8:	e7e8      	b.n	252cc <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   252fa:	f8da 0010 	ldr.w	r0, [sl, #16]
   252fe:	4622      	mov	r2, r4
   25300:	4651      	mov	r1, sl
   25302:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   25304:	f7ff ff63 	bl	251ce <add_event>
	event->poller = poller;
   25308:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2530c:	3601      	adds	r6, #1
   2530e:	e7ea      	b.n	252e6 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   25310:	f8da 0010 	ldr.w	r0, [sl, #16]
   25314:	4622      	mov	r2, r4
   25316:	4651      	mov	r1, sl
   25318:	e7f4      	b.n	25304 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2531a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2531e:	4622      	mov	r2, r4
   25320:	4651      	mov	r1, sl
   25322:	3024      	adds	r0, #36	; 0x24
   25324:	e7ee      	b.n	25304 <register_events+0xcc>

00025326 <signal_poll_event>:
{
   25326:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2532a:	6884      	ldr	r4, [r0, #8]
{
   2532c:	4605      	mov	r5, r0
   2532e:	460e      	mov	r6, r1
	if (poller != NULL) {
   25330:	b144      	cbz	r4, 25344 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   25332:	7863      	ldrb	r3, [r4, #1]
   25334:	2b01      	cmp	r3, #1
   25336:	d138      	bne.n	253aa <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   25338:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2533c:	f013 0302 	ands.w	r3, r3, #2
   25340:	d10a      	bne.n	25358 <signal_poll_event+0x32>
		poller->is_polling = false;
   25342:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   25344:	68eb      	ldr	r3, [r5, #12]
   25346:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2534a:	430e      	orrs	r6, r1
	event->poller = NULL;
   2534c:	2000      	movs	r0, #0
	event->state |= state;
   2534e:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   25352:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   25354:	60eb      	str	r3, [r5, #12]
	return retcode;
   25356:	e00d      	b.n	25374 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   25358:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2535c:	f04f 31ff 	mov.w	r1, #4294967295
   25360:	f06f 0001 	mvn.w	r0, #1
   25364:	428b      	cmp	r3, r1
   25366:	bf08      	it	eq
   25368:	4282      	cmpeq	r2, r0
   2536a:	d105      	bne.n	25378 <signal_poll_event+0x52>
		poller->is_polling = false;
   2536c:	2300      	movs	r3, #0
   2536e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   25370:	f06f 000a 	mvn.w	r0, #10
}
   25374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   25378:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2537c:	4640      	mov	r0, r8
   2537e:	f7ff fd72 	bl	24e66 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   25382:	2e08      	cmp	r6, #8
   25384:	bf0c      	ite	eq
   25386:	f06f 0303 	mvneq.w	r3, #3
   2538a:	2300      	movne	r3, #0
   2538c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2538e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   25392:	06db      	lsls	r3, r3, #27
   25394:	d102      	bne.n	2539c <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   25396:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2539a:	b10f      	cbz	r7, 253a0 <signal_poll_event+0x7a>
		poller->is_polling = false;
   2539c:	2300      	movs	r3, #0
   2539e:	e7d0      	b.n	25342 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   253a0:	4640      	mov	r0, r8
   253a2:	f7ff fdc1 	bl	24f28 <z_ready_thread>
		poller->is_polling = false;
   253a6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   253a8:	e7cc      	b.n	25344 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   253aa:	2b02      	cmp	r3, #2
   253ac:	d1f6      	bne.n	2539c <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   253ae:	7823      	ldrb	r3, [r4, #0]
   253b0:	2b00      	cmp	r3, #0
   253b2:	d0c7      	beq.n	25344 <signal_poll_event+0x1e>
   253b4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   253b8:	2f00      	cmp	r7, #0
   253ba:	d0f4      	beq.n	253a6 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   253bc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   253c0:	f1a4 0914 	sub.w	r9, r4, #20
   253c4:	f104 0014 	add.w	r0, r4, #20
   253c8:	f7ff fe3a 	bl	25040 <z_abort_timeout>
		twork->poll_result = 0;
   253cc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   253d0:	4649      	mov	r1, r9
   253d2:	4638      	mov	r0, r7
   253d4:	f7ff fcaf 	bl	24d36 <k_work_submit_to_queue>
		poller->is_polling = false;
   253d8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   253dc:	e7b2      	b.n	25344 <signal_poll_event+0x1e>

000253de <k_poll_event_init>:
{
   253de:	b510      	push	{r4, lr}
	event->type = type;
   253e0:	04d2      	lsls	r2, r2, #19
   253e2:	0209      	lsls	r1, r1, #8
   253e4:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   253e8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   253ec:	430a      	orrs	r2, r1
   253ee:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   253f0:	2400      	movs	r4, #0
	event->type = type;
   253f2:	430a      	orrs	r2, r1
	event->obj = obj;
   253f4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   253f8:	6084      	str	r4, [r0, #8]
}
   253fa:	bd10      	pop	{r4, pc}

000253fc <z_handle_obj_poll_events>:
{
   253fc:	4603      	mov	r3, r0
	return list->head == list;
   253fe:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   25400:	4283      	cmp	r3, r0
   25402:	d008      	beq.n	25416 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   25404:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25408:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2540a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2540c:	2300      	movs	r3, #0
	node->prev = NULL;
   2540e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   25412:	f7ff bf88 	b.w	25326 <signal_poll_event>
}
   25416:	4770      	bx	lr

00025418 <k_free>:
	if (ptr != NULL) {
   25418:	b120      	cbz	r0, 25424 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2541a:	1f01      	subs	r1, r0, #4
   2541c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   25420:	f7ff bac0 	b.w	249a4 <k_heap_free>
}
   25424:	4770      	bx	lr

00025426 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   25426:	4770      	bx	lr
